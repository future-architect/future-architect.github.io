<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Future Tech Blog - フューチャーアーキテクト</title>
  
  <subtitle>フューチャーアーキテクト開発者ブログ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2019-07-17T23:36:27.495Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>― 脱RDB脳 ― Cassandraのデータモデルについて考えてみる</title>
    <link href="https://future-architect.github.io/articles/20190718/"/>
    <id>https://future-architect.github.io/articles/20190718/</id>
    <published>2019-07-18T00:11:12.000Z</published>
    <updated>2019-07-17T23:36:27.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Technology Innovation Group所属 DBチームの岩崎です。</p><p>私はDBチームとして様々なプロジェクトでOracleやPostgreSQLなどRDBの設計・構築に携わってきました。<br>現在は、Cassandraの導入とデータモデルを設計しています。</p><p>本稿ではDBネタとしてRDB脳から脱却して、KVSならではのテーブル設計の勘所をお伝えいたします。</p><h1 id="Cassandraはどのようなデータベースなのか"><a href="#Cassandraはどのようなデータベースなのか" class="headerlink" title="Cassandraはどのようなデータベースなのか"></a>Cassandraはどのようなデータベースなのか</h1><p>CassandraはKVS(Key-ValueStore）と呼ばれ、KeyとValueを組み合わせる単純な構造からなるDBです。<br>データアクセスはkeyに対して行い、Keyに関連付けられたValueが呼び出されます。</p><p>KVSは一般的にスキーマレスを採用することが多いと思いますが、Cassandraではアプリケーションの観点から見て、データは構造的に扱える方が開発・運用・管理していく上でメリットがあるとのスタンスを取っているため、スキーマレスではなくスキーマ定義を必要としています。</p><p>また、keyに対して複数のカラムを定義することが可能で、カラム型にはListやMapのようなコレクション型、いわゆるオブジェクト型のようなユーザ定義型（UDT:User Defined Type）の使用に対応しているため、JSONのような階層的なデータをスキーマ定義して柔軟に扱うことができるのが特徴です。</p><p>その他、本稿では触れませんが下記のような特徴を持っており、スケーラビリティ・アベイラビリティに重きを置いたデータベースと言えます。</p><ol><li>データをクラスタ内の複数ノードで分散保持しているため、性能・容量のリニアにスケール可能  </li><li>マスタレスアーキテクチャで、単一障害点がなくノード障害時のマスタ切り替え不要で可用性を厳格に保証  </li><li>データセンターを跨ぐクロスリージョン構成を取ることができ、広域災害時の高いBCP要求を満たすことが可能  </li></ol><h1 id="Cassandraのデータモデルを理解する"><a href="#Cassandraのデータモデルを理解する" class="headerlink" title="Cassandraのデータモデルを理解する"></a>Cassandraのデータモデルを理解する</h1><p>Cassandraにおいてデータをどのように定義して扱うことができるのかということを説明していきます。<br>CassandraはCQLというSQLライクなクエリ言語を用いて記述できるためRDB脳でも直感的に扱えます。<br>なお、本項ではCassandraのバージョンは3.11.4を利用します。</p><h2 id="テーブル作成"><a href="#テーブル作成" class="headerlink" title="テーブル作成"></a>テーブル作成</h2><p>CassandraではRDBと同様にデータをテーブルという単位で管理を行います。<br>KVSではデータの管理、アクセスはkeyに対して行うため、PRIMARY KEYとして定義する必要があります。<br>Valueに相当するカラムは複数定義可能で配列やMapなどのコレクション型もデータ型として定義することが可能です。</p><h3 id="テーブル定義"><a href="#テーブル定義" class="headerlink" title="テーブル定義"></a>テーブル定義</h3><p>PRIMARY KEYに指定したカラムがKVSにおけるkey項目です。</p><figure class="highlight sql"><figcaption><span>テーブル定義</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_table (</span><br><span class="line">   <span class="keyword">id</span>      <span class="built_in">text</span></span><br><span class="line"> , <span class="keyword">body</span>    <span class="built_in">text</span></span><br><span class="line"> , tag     <span class="keyword">list</span>&lt;<span class="built_in">text</span>&gt;</span><br><span class="line"> , keyword <span class="keyword">map</span>&lt;<span class="built_in">text</span>, <span class="built_in">text</span>&gt;</span><br><span class="line"> , PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="レコード作成"><a href="#レコード作成" class="headerlink" title="レコード作成"></a>レコード作成</h3><figure class="highlight sql"><figcaption><span>レコード作成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_table (</span><br><span class="line">   <span class="keyword">id</span></span><br><span class="line"> , <span class="keyword">body</span></span><br><span class="line"> , tag</span><br><span class="line"> , keyword</span><br><span class="line">) <span class="keyword">VALUES</span> (</span><br><span class="line">   <span class="string">'01'</span></span><br><span class="line"> , <span class="string">'Cassandraデータモデリングの紹介'</span></span><br><span class="line"> , [<span class="string">'Future'</span>,<span class="string">'Tech Blog'</span>]</span><br><span class="line"> , &#123;<span class="string">'author'</span>: <span class="string">'Iwasaki'</span>, <span class="string">'nosql'</span>:<span class="string">'cassandra'</span>&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>このようにCassandraでは扱うデータをテーブルとしてスキーマ定義して管理します。<br>次にデータアクセス方法について見ていきましょう。</p><h2 id="データアクセス-PRIMARY-KEY"><a href="#データアクセス-PRIMARY-KEY" class="headerlink" title="データアクセス(PRIMARY KEY)"></a>データアクセス(PRIMARY KEY)</h2><p>データベース内に作成したテーブルにアクセスするにはkeyをWHERE句に指定してアクセスを行います。<br>KVSの特徴は基本的にはkey以外をWHERE句の絞り込み条件に指定できないという点です。</p><h3 id="keyを指定してデータアクセス"><a href="#keyを指定してデータアクセス" class="headerlink" title="keyを指定してデータアクセス"></a>keyを指定してデータアクセス</h3><figure class="highlight"><figcaption><span>Key指定のデータアクセス</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test_table <span class="keyword">where</span> <span class="keyword">id</span> = <span class="string">'01'</span>;</span><br><span class="line"></span><br><span class="line"> id | body                            | keyword                                     | tag</span><br><span class="line"><span class="comment">----+---------------------------------+---------------------------------------------+-------------------------</span></span><br><span class="line"> 01 | Cassandraデータモデリングの紹介 | &#123;'author': 'Iwasaki', 'nosql': 'cassandra'&#125; | ['Future', 'Tech Blog']</span><br></pre></td></tr></table></figure><h3 id="key以外を指定してデータアクセス"><a href="#key以外を指定してデータアクセス" class="headerlink" title="key以外を指定してデータアクセス"></a>key以外を指定してデータアクセス</h3><figure class="highlight"><figcaption><span>Key以外を指定した場合のデータアクセス</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test_table <span class="keyword">where</span> <span class="keyword">body</span> = <span class="string">'Cassandraデータモデリングの紹介'</span>;</span><br><span class="line"></span><br><span class="line">-&gt; key以外をWHERE句に指定したためクエリの実行に失敗する</span><br></pre></td></tr></table></figure><p>このようにRDBでは当たり前のようにできたWHERE句による絞り込みが、KVSではできないということを念頭にデータモデルを設計する必要があります。</p><p>実際は全くできないというわけではないものの制限があるため、できないというスタンスにたって設計したほうが無難と考えられます。</p><h2 id="データアクセス-PARTITION-KEY"><a href="#データアクセス-PARTITION-KEY" class="headerlink" title="データアクセス(PARTITION KEY)"></a>データアクセス(PARTITION KEY)</h2><p>CassandraはKVSのため基本的には上記のPRIMARY KEYによるデータアクセスになりますが、もう一つの特徴としてPARTITION KEYによるデータアクセスが可能です。</p><p>PARTITION KEYとはレコードをカラム単位で集約するキーのことを意味します。</p><p>先ほど作成したtest_tableに対して日付単位で集約できるようにPARTITION KEYを追加してみましょう。</p><h3 id="テーブル定義-1"><a href="#テーブル定義-1" class="headerlink" title="テーブル定義"></a>テーブル定義</h3><p>PRIMARY KEYの先頭項目がPARTITION KEYと認識されます。<br>下記の例ではPARTITION KEYがdate、PRIMARY KEYはdateとidの複合になります。  </p><figure class="highlight sql"><figcaption><span>パーティションキー付きのテーブル定義</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_part_table (</span><br><span class="line">   <span class="built_in">date</span>    <span class="built_in">text</span></span><br><span class="line"> , <span class="keyword">id</span>      <span class="built_in">text</span></span><br><span class="line"> , <span class="keyword">body</span>    <span class="built_in">text</span></span><br><span class="line"> , tag     <span class="keyword">list</span>&lt;<span class="built_in">text</span>&gt;</span><br><span class="line"> , keyword <span class="keyword">map</span>&lt;<span class="built_in">text</span>, <span class="built_in">text</span>&gt;</span><br><span class="line"> , PRIMARY <span class="keyword">KEY</span>((<span class="built_in">date</span>), <span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="レコード作成-1"><a href="#レコード作成-1" class="headerlink" title="レコード作成"></a>レコード作成</h3><figure class="highlight sql"><figcaption><span>レコード作成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_part_table (</span><br><span class="line">   <span class="built_in">date</span></span><br><span class="line"> , <span class="keyword">id</span></span><br><span class="line"> , <span class="keyword">body</span></span><br><span class="line"> , tag</span><br><span class="line"> , keyword</span><br><span class="line">) <span class="keyword">VALUES</span> (</span><br><span class="line">   <span class="string">'2019-07-01'</span></span><br><span class="line"> , <span class="string">'01'</span></span><br><span class="line"> , <span class="string">'パーティションキーテスト1'</span></span><br><span class="line"> , [<span class="string">'Future'</span>,<span class="string">'Tech Blog'</span>]</span><br><span class="line"> , &#123;<span class="string">'author'</span>: <span class="string">'Iwasaki'</span>, <span class="string">'nosql'</span>:<span class="string">'cassandra'</span>&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_part_table (</span><br><span class="line">   <span class="built_in">date</span></span><br><span class="line"> , <span class="keyword">id</span></span><br><span class="line"> , <span class="keyword">body</span></span><br><span class="line"> , tag</span><br><span class="line"> , keyword</span><br><span class="line">) <span class="keyword">VALUES</span> (</span><br><span class="line">   <span class="string">'2019-07-01'</span></span><br><span class="line"> , <span class="string">'02'</span></span><br><span class="line"> , <span class="string">'パーティションキーテスト2'</span></span><br><span class="line"> , [<span class="string">'Future'</span>,<span class="string">'Tech Blog'</span>]</span><br><span class="line"> , &#123;<span class="string">'author'</span>: <span class="string">'Iwasaki'</span>, <span class="string">'nosql'</span>:<span class="string">'cassandra'</span>&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test_part_table (</span><br><span class="line">   <span class="built_in">date</span></span><br><span class="line"> , <span class="keyword">id</span></span><br><span class="line"> , <span class="keyword">body</span></span><br><span class="line"> , tag</span><br><span class="line"> , keyword</span><br><span class="line">) <span class="keyword">VALUES</span> (</span><br><span class="line">   <span class="string">'2019-07-02'</span></span><br><span class="line"> , <span class="string">'01'</span></span><br><span class="line"> , <span class="string">'パーティションキーテスト3'</span></span><br><span class="line"> , [<span class="string">'Future'</span>,<span class="string">'Tech Blog'</span>]</span><br><span class="line"> , &#123;<span class="string">'author'</span>: <span class="string">'Iwasaki'</span>, <span class="string">'nosql'</span>:<span class="string">'cassandra'</span>&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="PARTITION-KEYを指定してデータアクセス"><a href="#PARTITION-KEYを指定してデータアクセス" class="headerlink" title="PARTITION KEYを指定してデータアクセス"></a>PARTITION KEYを指定してデータアクセス</h3><p>PARTITION KEYのdateをWHERE句の条件に指定してデータアクセスしてみると、PARTITION KEY単位で集約されたデータを取得することができます。</p><figure class="highlight"><figcaption><span>パーティションキーを指定してのデータアクセス</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test_part_table <span class="keyword">where</span> <span class="built_in">date</span> = <span class="string">'2019-07-01'</span>;</span><br><span class="line"></span><br><span class="line"> date       | id | body                      | keyword                                     | tag</span><br><span class="line"><span class="comment">------------+----+---------------------------+---------------------------------------------+-------------------------</span></span><br><span class="line"> 2019-07-01 | 01 | パーティションキーテスト1 | &#123;'author': 'Iwasaki', 'nosql': 'cassandra'&#125; | ['Future', 'Tech Blog']</span><br><span class="line"> 2019-07-01 | 02 | パーティションキーテスト2 | &#123;'author': 'Iwasaki', 'nosql': 'cassandra'&#125; | ['Future', 'Tech Blog']</span><br><span class="line"></span><br><span class="line">-&gt; 2019-07-01のレコード2件が取得可能</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> test_part_table <span class="keyword">where</span> <span class="built_in">date</span> = <span class="string">'2019-07-02'</span>;</span><br><span class="line"></span><br><span class="line"> date       | id | body                      | keyword                                     | tag</span><br><span class="line"><span class="comment">------------+----+---------------------------+---------------------------------------------+-------------------------</span></span><br><span class="line"> 2019-07-02 | 01 | パーティションキーテスト3 | &#123;'author': 'Iwasaki', 'nosql': 'cassandra'&#125; | ['Future', 'Tech Blog']</span><br><span class="line"></span><br><span class="line">-&gt; 2019-07-02のレコード1件が取得可能</span><br></pre></td></tr></table></figure><p>このようにCassandraではPARTITION KEY単位による列ごとに集約されたデータアクセスが可能なため、KVSの中でもワイドカラムストア(列指向型)と呼ばれることがあります。</p><p>CassandraではPARTITION KEYのハッシュ値を基に物理的なデータ配置箇所を決定しています。</p><p>Cassandraは複数ノードでクラスタ構成を取ることが一般的ですが、同一PARTITION KEYのデータは、（複数の）特定ノード内に集約されてデータが格納されます。</p><p>そのため、検索条件にPARTITION KEYを指定することで対象のキーのデータをどのノードが保持しているかということが分かるため、サーバーの並列数やデータ量が増えても高速にデータアクセスすることが可能になります。</p><p>言い換えれば、PARTITION KEYが無いと全ノードの全レコードを舐めないと条件に一致するかを評価することができないので、KVSはキーアクセスしか行えないということになります。</p><p>ちなみに複合PRIMARY KEYを定義する場合、特に指定がなければ先頭のキーがPARTITION KEYとなり、単一PRIMARY KEYの場合はPRIMARY KEY = PARTITION KEYとして認識されています。  </p><p>また、PARTITION KEY以外のPRIMARY KEYはCLUSTERING KEYと呼ばれ、パーティション内のデータのソートキーとなっています。</p><p>PARTITION KEYのみを指定してデータを取得する際の動作は、RDB脳にはなじみ深いB*TreeインデックスをRANGE SCANする動作と同様です。</p><p>本記事のなかではあまりふれませんが、CLUSTERING KEYによるソート順に従って先頭の〇〇件を取得する、といったことも可能です。</p><h2 id="データ更新"><a href="#データ更新" class="headerlink" title="データ更新"></a>データ更新</h2><p>Cassandraはテーブル構造を事前に定義しているため、RDB同様に特定のカラムに対する更新が可能です。<br>また、配列やMapで定義した項目に対しても要素の追加や削除など柔軟に更新を行うことができます。</p><h3 id="Map型のデータ更新"><a href="#Map型のデータ更新" class="headerlink" title="Map型のデータ更新"></a>Map型のデータ更新</h3><p>先ほど作成したtest_tableのMap型で定義したkeywordに対して要素の追加や更新を行ってみましょう。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> keyword <span class="keyword">from</span> test_table <span class="keyword">where</span> <span class="keyword">id</span> = <span class="string">'01'</span>;</span><br><span class="line"></span><br><span class="line"> keyword</span><br><span class="line"><span class="comment">---------------------------------------------</span></span><br><span class="line"> &#123;'author': 'Iwasaki', 'nosql': 'cassandra'&#125;</span><br></pre></td></tr></table></figure><p>Mapのkey要素であるauthorを指定してvalueを書き換えてみます。</p><figure class="highlight"><figcaption><span>Mapの要素を書き換え</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> test_table <span class="keyword">SET</span> keyword[<span class="string">'author'</span>] = <span class="string">'Yuta'</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="string">'01'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> keyword <span class="keyword">from</span> test_table <span class="keyword">where</span> <span class="keyword">id</span> = <span class="string">'01'</span>;</span><br><span class="line"></span><br><span class="line"> keyword</span><br><span class="line"><span class="comment">------------------------------------------</span></span><br><span class="line"> &#123;'author': 'Yuta', 'nosql': 'cassandra'&#125;</span><br></pre></td></tr></table></figure><p>Mapの要素を足してみます。</p><figure class="highlight"><figcaption><span>Mapの要素を追加</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> test_table <span class="keyword">SET</span> keyword = keyword + &#123;<span class="string">'category'</span>: <span class="string">'db'</span>&#125; <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="string">'01'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> keyword <span class="keyword">from</span> test_table <span class="keyword">where</span> <span class="keyword">id</span> = <span class="string">'01'</span>;</span><br><span class="line"></span><br><span class="line"> keyword</span><br><span class="line"><span class="comment">------------------------------------------------------------</span></span><br><span class="line"> &#123;'author': 'Yuta', 'category': 'db', 'nosql': 'cassandra'&#125;</span><br></pre></td></tr></table></figure><h1 id="Cassandraのデータモデリングについて考える"><a href="#Cassandraのデータモデリングについて考える" class="headerlink" title="Cassandraのデータモデリングについて考える"></a>Cassandraのデータモデリングについて考える</h1><p>なんとなくCassandraでデータをどのように扱うか理解できましたでしょうか。</p><p>ここからはどのようにデータモデルを考えていくべきかをチャットテーブルを例に説明していきます。</p><h2 id="チャットのデータモデル概要"><a href="#チャットのデータモデル概要" class="headerlink" title="チャットのデータモデル概要"></a>チャットのデータモデル概要</h2><p>チャット管理に関するリレーショナルモデルのテーブル設計を元に考えてみましょう。</p><ul><li>チャットルーム<ul><li>ユーザ、グループ毎にチャットを管理するテーブル。</li></ul></li><li>チャット<ul><li>チャットの投稿内容の詳細を管理するテーブル</li></ul></li><li>リアクション<ul><li>チャットの投稿に対するスタンプなどのリアクションを管理するテーブル</li></ul></li></ul><img src="/images/20190718/photo_20190718_01.png" class="img-middle-size"><p>例えばRDBであれば上記のままの3つのテーブルを作成することが考えられます。</p><p>しかし、KVSは単一テーブルに対するキーアクセスのみを可能にしたデータベースであるため、RDBのように複数テーブル間を結合することができないという点がKVSとRDBとの最大の違いです。</p><p>KVSにおけるテーブル設計では、ある機能を実現するためのテーブルは基本的に1つで足りる（であろう）というスタンスに立ち、まず上記のテーブルを1テーブルに集約できないかを考えます。</p><p>また、KVSでは結合だけでなくトランザクションも存在しないため(単一レコードに対する軽量トランザクションのみ)テーブルを分割すると、アプリケーションの作りが複雑化してしまうという問題もあります。</p><p>そのため、まずはテーブルを集約することを意識していきましょう。</p><h2 id="テーブル集約のポイント"><a href="#テーブル集約のポイント" class="headerlink" title="テーブル集約のポイント"></a>テーブル集約のポイント</h2><p>RDBのようにフラットな階層でデータモデルを表現するためには結合が必須です。<br>しかし、KVSは配列やMapのようなコレクション型を扱えるという点が集約のポイントになります。</p><p>例えばチャットとリアクションの関係をコレクション型を利用して１つのテーブルとして表現してみましょう。<br>チャットに対してリアクションをコレクション型で定義することで1チャットに対してN数のリアクションを表現できます。</p><h3 id="Map型を利用した集約"><a href="#Map型を利用した集約" class="headerlink" title="Map型を利用した集約"></a>Map型を利用した集約</h3><p>reactionをMap型で定義することでユーザ別のリアクションを表現できるようになりました。<br>更新時もMap要素を指定して行えるため追加や削除を柔軟に行えます。</p><figure class="highlight sql"><figcaption><span>Map型を利用したチャットテーブル定義</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> chat (</span><br><span class="line">    <span class="keyword">id</span>        <span class="built_in">text</span>              <span class="comment">-- チャットID</span></span><br><span class="line">  , <span class="keyword">body</span>      <span class="built_in">text</span>              <span class="comment">-- チャット本文</span></span><br><span class="line">  , <span class="keyword">user</span>      <span class="built_in">text</span>              <span class="comment">-- 投稿者</span></span><br><span class="line">  , send_date <span class="built_in">text</span>              <span class="comment">-- 投稿日付</span></span><br><span class="line">  , reaction  <span class="keyword">map</span>&lt;<span class="built_in">text</span>, <span class="built_in">text</span>&gt;   <span class="comment">-- リアクション</span></span><br><span class="line">  , PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>次にチャットルームとチャットの関係を1つのテーブルとして表現してみましょう。</p><p>チャットルームには最終投稿日付やチャットルーム参加者などチャットにとっての付随情報を管理をするため、RDBではチャットルームIDをFKとしてチャット側に持たせるという考え方になると思います。</p><p>ここもコレクションを利用してチャットルームにチャット情報を集約してみましょう。</p><p>chatをMap型で定義することでチャットテーブルにチャットの情報を持たせることができます。</p><figure class="highlight sql"><figcaption><span>Map型を利用したチャットルームテーブル定義</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> chatroom (</span><br><span class="line">    <span class="keyword">id</span>            <span class="built_in">text</span>              <span class="comment">-- チャットルームID</span></span><br><span class="line">  , last_update   <span class="built_in">text</span>              <span class="comment">-- 最終更新日付</span></span><br><span class="line">  , <span class="keyword">member</span>        <span class="keyword">set</span>&lt;<span class="built_in">text</span>&gt;         <span class="comment">-- 参加者</span></span><br><span class="line">  , chat          <span class="keyword">map</span>&lt;<span class="built_in">text</span>, <span class="built_in">text</span>&gt;   <span class="comment">-- チャット情報</span></span><br><span class="line">  , PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>しかし、上記のようなMap型（map&lt;text, text&gt;）では単一項目のvalueしか持てないためチャットの情報を表現しきることができません。</p><p>そこでユーザ定義型(UDT)という複数のフィールドと型を定義して利用します。</p><h3 id="UDT型を利用した集約"><a href="#UDT型を利用した集約" class="headerlink" title="UDT型を利用した集約"></a>UDT型を利用した集約</h3><p>chatの情報をUDTとして定義してみましょう。</p><p>UDTはテーブルではなくタイプとして定義（CREATE）されます。タイプにはPKを指定する必要はありません。</p><p>UDTのフィールドにMapなどのコレクション型を定義することもできます。</p><figure class="highlight sql"><figcaption><span>UDT型の定義</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TYPE</span> chat_type (</span><br><span class="line">    <span class="keyword">body</span>      <span class="built_in">text</span>              <span class="comment">-- チャット本文</span></span><br><span class="line">  , <span class="keyword">user</span>      <span class="built_in">text</span>              <span class="comment">-- 投稿者</span></span><br><span class="line">  , send_date <span class="built_in">text</span>              <span class="comment">-- 投稿日付</span></span><br><span class="line">  , reaction  <span class="keyword">map</span>&lt;<span class="built_in">text</span>, <span class="built_in">text</span>&gt;   <span class="comment">-- リアクション</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上記で作ったUDTを利用してチャットルームとチャットを集約してみましょう。<br>先ほどの作ったUDTをデータ型として指定することができます。</p><p>ただし注意しなければならない点は、コレクション型の中でUDTを定義する場合、frozenという指定が必要になります。frozenの制約事項は後述します。</p><figure class="highlight sql"><figcaption><span>UDT型を利用したチャットルーム定義</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> chatroom (</span><br><span class="line">    <span class="keyword">id</span>            <span class="built_in">text</span></span><br><span class="line">  , chatroom_name <span class="built_in">text</span></span><br><span class="line">  , last_update   <span class="built_in">text</span></span><br><span class="line">  , <span class="keyword">member</span>        <span class="keyword">set</span>&lt;<span class="built_in">text</span>&gt;</span><br><span class="line">  , chat          <span class="keyword">map</span>&lt;<span class="built_in">text</span>, frozen&lt;chat_type&gt;&gt;</span><br><span class="line">  , PRIMARY <span class="keyword">KEY</span>(<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> chatroom <span class="keyword">JSON</span></span><br><span class="line">  <span class="string">'&#123;</span></span><br><span class="line"><span class="string">    "id": "1",</span></span><br><span class="line"><span class="string">    "chatroom_name": "DB Tech Blog",</span></span><br><span class="line"><span class="string">    "last_update": "2019-07-01:12:00",</span></span><br><span class="line"><span class="string">    "member": ["iwasaki","sugiyama","mano"],</span></span><br><span class="line"><span class="string">    "chat": &#123;</span></span><br><span class="line"><span class="string">        "01": &#123;</span></span><br><span class="line"><span class="string">          "body" : "chat message 1",</span></span><br><span class="line"><span class="string">          "user" : "iwasaki",</span></span><br><span class="line"><span class="string">          "send_date" : "2019-07-01:10:00",</span></span><br><span class="line"><span class="string">          "reaction" : &#123; "sugiyama" : "reaction 1"&#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "02": &#123;</span></span><br><span class="line"><span class="string">          "body" : "chat message 2",</span></span><br><span class="line"><span class="string">          "user" : "iwasaki",</span></span><br><span class="line"><span class="string">          "send_date" : "2019-07-01:11:00"</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        "03": &#123;</span></span><br><span class="line"><span class="string">          "body" : "chat message 3",</span></span><br><span class="line"><span class="string">          "user" : "sugiyama",</span></span><br><span class="line"><span class="string">          "send_date" : "2019-07-01:12:00",</span></span><br><span class="line"><span class="string">          "reaction" : &#123; "iwasaki" : "reaction 1"&#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;'</span></span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> chat <span class="keyword">from</span> chatroom <span class="keyword">where</span> <span class="keyword">id</span> = <span class="string">'1'</span>;</span><br><span class="line"></span><br><span class="line"> chat</span><br><span class="line"><span class="comment">----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"> &#123;'01': &#123;body: 'chat message 1', user: 'iwasaki', send_date: '2019-07-01:10:00', reaction: &#123;'sugiyama': 'reaction 1'&#125;&#125;, '02': &#123;body: 'chat message 2', user: 'iwasaki', send_date: '2019-07-01:11:00', reaction: null&#125;, '03': &#123;body: 'chat message 3', user: 'sugiyama', send_date: '2019-07-01:12:00', reaction: &#123;'iwasaki': 'reaction 1'&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>UDTを利用することでチャットルームとチャットを集約することができました。</p><p>しかし、上記の集約例だと2つの問題点が存在します。</p><h3 id="問題点1-投稿数-要素数となるためコレクションサイズが肥大化し過ぎる"><a href="#問題点1-投稿数-要素数となるためコレクションサイズが肥大化し過ぎる" class="headerlink" title="問題点1. 投稿数 = 要素数となるためコレクションサイズが肥大化し過ぎる"></a>問題点1. 投稿数 = 要素数となるためコレクションサイズが肥大化し過ぎる</h3><p>Cassandraのドキュメントによると、mapコレクションのキーの最大数は65,535しか持てないと記述されています。</p><p>また、コレクション要素全てを読み込んでしまうのでアクセス効率も悪くなります。</p><p>つまり、チャットルームにチャットの情報をコレクション型で集約してしまうと1チャットルーム内で投稿できるチャット数が制限されてしまい、要件を満たせなくなる可能性があります。</p><p>チャットとリアクションのようにそこまでコレクションの要素が肥大化しない関係であれば積極的に集約していく価値がありますが、上記のパターンには注意が必要です。</p><h3 id="問題点2-chatの情報をfrozenで定義しているため柔軟な更新が行えなくなる"><a href="#問題点2-chatの情報をfrozenで定義しているため柔軟な更新が行えなくなる" class="headerlink" title="問題点2. chatの情報をfrozenで定義しているため柔軟な更新が行えなくなる"></a>問題点2. chatの情報をfrozenで定義しているため柔軟な更新が行えなくなる</h3><p>Cassandraではコレクション型の中でさらにコレクション型を定義するようなネスト構造を表現する際にfrozenを利用して定義します。</p><p>frozenを利用することで深い階層のデータを定義していくことができますが、frozenされた項目の値はBLOBと同様に処理されるようになるため、frozenされた項目に対して部分更新ができなくなります。</p><p>つまり先ほどのchatroomの例だと、chatがfrozenで定義されているためchatの項目を更新するためには、下記のようにchatの全項目を指定して更新する必要があります。</p><h3 id="frozen項目の更新"><a href="#frozen項目の更新" class="headerlink" title="frozen項目の更新"></a>frozen項目の更新</h3><p>chatのbodyだけ更新するとbody以外の項目は全てnullとして扱われるのでデータロストしてしまいます。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> chatroom <span class="keyword">SET</span> chat[<span class="string">'01'</span>] = fromJson(</span><br><span class="line"><span class="string">'&#123; "body" : "chat message update 1"&#125;'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="string">'1'</span></span><br><span class="line"></span><br><span class="line">cqlsh:<span class="keyword">test</span>&gt; <span class="keyword">select</span> chat <span class="keyword">from</span> chatroom <span class="keyword">where</span> <span class="keyword">id</span> = <span class="string">'1'</span>;</span><br><span class="line"></span><br><span class="line"> chat</span><br><span class="line"><span class="comment">------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"> &#123;'01': &#123;body: 'chat message update 1', user: null, send_date: null, reaction: null&#125;, '02': &#123;body: 'chat message 2', user: 'iwasaki', send_date: '2019-07-01:11:00', reaction: null&#125;, '03': &#123;body: 'chat message 3', user: 'sugiyama', send_date: '2019-07-01:12:00', reaction: &#123;'iwasaki': 'reaction 1'&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>下記のようにfrozen項目全体を含めて更新する必要があります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> chatroom <span class="keyword">SET</span> chat[<span class="string">'01'</span>] = fromJson(</span><br><span class="line"><span class="string">'&#123;</span></span><br><span class="line"><span class="string">  "body" : "chat message update 1",</span></span><br><span class="line"><span class="string">  "user" : "iwasaki",</span></span><br><span class="line"><span class="string">  "send_date" : "2019-07-01:13:00",</span></span><br><span class="line"><span class="string">  "reaction" : &#123; "sugiyama" : "reaction 1"&#125;</span></span><br><span class="line"><span class="string">  &#125;'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="string">'1'</span></span><br></pre></td></tr></table></figure><p>このように一見便利なfrozenですが安易に利用してネストを深くすると更新要件を満たすことができなくなる可能性があるので、注意が必要です。</p><h3 id="staticカラムを利用してテーブルを集約する"><a href="#staticカラムを利用してテーブルを集約する" class="headerlink" title="staticカラムを利用してテーブルを集約する"></a>staticカラムを利用してテーブルを集約する</h3><p>コレクション型を利用してチャットルームとチャットを集約するのは制約事項があることがわかりました。</p><p>Cassandraにおいてテーブル集約を考える際にもう一つ有効な手法としてstaticカラムというものがあります。</p><p>staticカラムとして定義することで対象のカラムはパーティション単位で同じデータが保持されるようになります。</p><figure class="highlight sql"><figcaption><span>staticカラムを利用したテーブル定義</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> static_test(</span><br><span class="line">  <span class="keyword">id</span>                <span class="built_in">text</span>,</span><br><span class="line">  <span class="keyword">no</span>                <span class="built_in">text</span>,</span><br><span class="line">  static_data       <span class="built_in">text</span> <span class="keyword">static</span>,</span><br><span class="line">  non_static_data   <span class="built_in">text</span>,</span><br><span class="line">  primary <span class="keyword">key</span>((<span class="keyword">id</span>),<span class="keyword">no</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> static_test <span class="keyword">json</span> <span class="string">'&#123;"id":"1","no":"1","static_data":"static_1","non_static_data":"non_static_1"&#125;'</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> static_test <span class="keyword">json</span> <span class="string">'&#123;"id":"1","no":"2","static_data":"static_1","non_static_data":"non_static_1"&#125;'</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> static_test <span class="keyword">json</span> <span class="string">'&#123;"id":"2","no":"1","static_data":"static_2","non_static_data":"non_static_2"&#125;'</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> static_test <span class="keyword">json</span> <span class="string">'&#123;"id":"2","no":"2","static_data":"static_2","non_static_data":"non_static_2"&#125;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> static_test ;</span><br><span class="line"></span><br><span class="line"> id | no | static_data | non_static_data</span><br><span class="line"><span class="comment">----+----+-------------+-----------------</span></span><br><span class="line">  1 |  1 |    static_1 |    non_static_1</span><br><span class="line">  1 |  2 |    static_1 |    non_static_1</span><br><span class="line">  2 |  1 |    static_2 |    non_static_2</span><br><span class="line">  2 |  2 |    static_2 |    non_static_2</span><br></pre></td></tr></table></figure><h3 id="staticカラムを更新する"><a href="#staticカラムを更新する" class="headerlink" title="staticカラムを更新する"></a>staticカラムを更新する</h3><p>staticとして定義したstatic_dataを更新すると同一パーティション内のstatic_dataも更新されます。</p><figure class="highlight"><figcaption><span>staticカラムの更新</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> static_test <span class="keyword">set</span> static_data = <span class="string">'static_test_1'</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="string">'1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> static_test;</span><br><span class="line"></span><br><span class="line"> id | no | static_data   | non_static_data</span><br><span class="line"><span class="comment">----+----+---------------+-----------------</span></span><br><span class="line">  1 |  1 | static_test_1 |    non_static_1</span><br><span class="line">  1 |  2 | static_test_1 |    non_static_1</span><br><span class="line">  2 |  1 |      static_2 |    non_static_2</span><br><span class="line">  2 |  2 |      static_2 |    non_static_2</span><br><span class="line"></span><br><span class="line">-&gt; PARTITION KEY = '01'に対する更新だが、同パーティション内のstatic_dataも更新される</span><br></pre></td></tr></table></figure><p>staticで定義すると下記のように同一パーティション内のデータはstaticカラムを参照するようなデータ構造になるため、static項目を更新すると同一パーティション内のデータは全て更新されたように見えていたわけです。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">"id"</span> : <span class="number">1</span>, <span class="attr">"static_data"</span> : <span class="string">"static_test_1"</span>  &#123; </span><br><span class="line">        <span class="attr">"no"</span> : <span class="number">1</span>  &#123; <span class="attr">"non_static_data"</span> : <span class="string">"non_static_1"</span>&#125;,</span><br><span class="line">        <span class="attr">"no"</span> : <span class="number">2</span>  &#123; <span class="attr">"non_static_data"</span> : <span class="string">"non_static_1"</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123; <span class="attr">"id"</span> : <span class="number">2</span>, <span class="attr">"static_data"</span> : <span class="string">"static_2"</span>  &#123; </span><br><span class="line">        <span class="attr">"no"</span> : <span class="number">1</span>  &#123; <span class="attr">"non_static_data"</span> : <span class="string">"non_static_2"</span>&#125;,</span><br><span class="line">        <span class="attr">"no"</span> : <span class="number">2</span>  &#123; <span class="attr">"non_static_data"</span> : <span class="string">"non_static_2"</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このstaticカラムを利用することで同一パーティションキー間でテーブル結合することなく共有することができます。</p><p>チャットとチャットルームにおける関係にも利用できそうです。</p><h3 id="staticカラムを利用してテーブルを集約する-1"><a href="#staticカラムを利用してテーブルを集約する-1" class="headerlink" title="staticカラムを利用してテーブルを集約する"></a>staticカラムを利用してテーブルを集約する</h3><p>チャットにチャットルームIDをFKとして持たせてチャットルームの情報を引っ張ってくるRDB的な結合を、チャットテーブルにstatcカラムとしてチャットルームの情報を定義することでテーブル集約を実現することができます。</p><figure class="highlight sql"><figcaption><span>staticカラムを利用したチャットテーブル定義</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> chat (</span><br><span class="line">    chatroom_id         <span class="built_in">text</span>               <span class="comment">-- チャットルームID</span></span><br><span class="line">  , chat_id             <span class="built_in">text</span>               <span class="comment">-- チャットID</span></span><br><span class="line">  , chatroom_name       <span class="built_in">text</span> <span class="keyword">static</span>        <span class="comment">-- チャットルーム名</span></span><br><span class="line">  , last_update         <span class="built_in">text</span> <span class="keyword">static</span>        <span class="comment">-- 最終更新日付</span></span><br><span class="line">  , <span class="keyword">member</span>              <span class="keyword">set</span>&lt;<span class="built_in">text</span>&gt; <span class="keyword">static</span>   <span class="comment">-- チャット参加者</span></span><br><span class="line">  , <span class="keyword">body</span>                <span class="built_in">text</span>               <span class="comment">-- チャット本文</span></span><br><span class="line">  , <span class="keyword">user</span>                <span class="built_in">text</span>               <span class="comment">-- 投稿者</span></span><br><span class="line">  , send_date           <span class="built_in">text</span>               <span class="comment">-- 投稿日付</span></span><br><span class="line">  , reaction            <span class="keyword">map</span>&lt;<span class="built_in">text</span>, <span class="built_in">text</span>&gt;    <span class="comment">-- リアクション</span></span><br><span class="line">  , PRIMARY <span class="keyword">KEY</span>((chatroom_id), chat_id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>staticカラムでテーブル集約したことにより、コレクション型で集約した時に比べて、投稿数 = レコード数となるため、投稿数の制約が無くなります。</p><p>また、レコード更新時もネストが1段階浅くなりfrozenを利用せずチャットの情報を保持することができるため、個別更新にも対応できる柔軟なデータモデルになったと言えます。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Cassandraのデータモデルを考える際にはついついRDB的な思考で結合ありきのデータモデルでテーブル設計を行ってしまいますが、まずはテーブルを集約できるかを念頭に見つめ直してみましょう。</p><p>最後にデータモデルを考える上での考慮点をまとめてみました。</p><ul><li>結合ありきのテーブル設計になっていないか</li><li>コレクション型を利用してテーブル間の関係を集約できるか</li><li>集約時にネストが深くなりすぎないか、また更新要件を満たすことができるか</li><li>staticカラムを利用してパーティション単位の情報を共有させることで集約できるか</li></ul><p>他にもデータモデル設計時に検討した項目はありますが、それはまた別の機会に紹介できれば幸いです。<br>ぜひ皆さんもRDB脳から脱却してKVSを使いこなしてみましょう！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、Technology Innovation Group所属 DBチームの岩崎です。&lt;/p&gt;
&lt;p&gt;私はDBチーム
      
    
    </summary>
    
      <category term="DB" scheme="https://future-architect.github.io/categories/DB/"/>
    
    
      <category term="DB" scheme="https://future-architect.github.io/tags/DB/"/>
    
  </entry>
  
  <entry>
    <title>GCPインスタンスを自動で停止させるツールの公開</title>
    <link href="https://future-architect.github.io/articles/20190716/"/>
    <id>https://future-architect.github.io/articles/20190716/</id>
    <published>2019-07-16T00:12:58.000Z</published>
    <updated>2019-07-16T00:20:09.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG DXユニットの真野です。2019年時点ではフューチャーに入社して9年目、主にバックエンド側の設計や開発をしています。</p><blockquote><p>TIG: Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。<br>DXユニット: TIGの中でも特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</p></blockquote><p>GCPのインスタンス（GCE, SQL, GKE）を自動で停止させるGoで書かれたツールをGitHubに公開しました。<br><a href="https://github.com/future-architect/gcp-instance-scheduler" target="_blank" rel="noopener">https://github.com/future-architect/gcp-instance-scheduler</a></p><p>このツールの実装はアルバイト社員の<a href="https://qiita.com/donkomura" target="_blank" rel="noopener">donkomura</a>さんが主体的に開発を進めていただいました。<br>別の機会にdonkomuraさんにはアルバイトブログを書いてもらおうと思うので、工夫した点などはそこで述べてもらおうと思います。</p><p>このツールを用いてGCPを利用しない時間帯を上手く指定することで、クラウドの運用費用を節約できます。</p><h1 id="ツールの概要"><a href="#ツールの概要" class="headerlink" title="ツールの概要"></a>ツールの概要</h1><p><code>state-scheduler:true</code> というラベルがついた、GCE, SQL, GKEなどのインスタンスを停止します。<br>GKEの場合は、ノードプールを構成するインスタンスグループのサイズを0にすることで実現します。</p><p>定期的なシャットダウンを避けたい場合は、<code>state-scheduler:false</code>と指定すれば、対象から除外させることもできます。</p><p>構成は下図の通り、Pub/SubトリガーのCloud Functionとして動作します。</p><img src="/images/20190713/photo_20190713_01.png"><p>起動タイミングはCloud Schedulerで制御する構成です。<br>そのため、「0 21 * * *」のようにCRON形式でスケジュールを定義すれば、毎日21時に停止させることができます。</p><p>ちなみに、Cloud FunctionをHTTPトリガーにせずPub/Subを挟んでいる理由は、認証を挟みたかったためです。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><h1 id="デプロイ方法"><a href="#デプロイ方法" class="headerlink" title="デプロイ方法"></a>デプロイ方法</h1><p>ツールのデプロイ手順を1~3の順に説明します。</p><h2 id="1-ラベルの設定"><a href="#1-ラベルの設定" class="headerlink" title="1. ラベルの設定"></a>1. ラベルの設定</h2><p>停止したいインスタンスのラベルに <code>state-scheduler:true</code> を設定する必要があります。<br>ラベルの設定はもちろん管理コンソールから手動で行っても良いですし、下記のようなgcloudコマンドでも設定できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GCE</span></span><br><span class="line">gcloud compute instances update &lt;insntance-name&gt; \</span><br><span class="line">  --project &lt;project-id&gt; \</span><br><span class="line">  --update-labels state-scheduler=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cloud SQL (master must be running)</span></span><br><span class="line">gcloud beta sql instances patch &lt;insntance-name&gt; \</span><br><span class="line">  --project &lt;project-id&gt; \</span><br><span class="line">  --update-labels state-scheduler=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GKE</span></span><br><span class="line">gcloud container clusters update &lt;cluster-name&gt; \</span><br><span class="line">  --project &lt;project-id&gt; \</span><br><span class="line">  --zone &lt;cluster-master-node-zone&gt; \</span><br><span class="line">  --update-labels state-scheduler=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="2-Cloud-Functionのデプロイ"><a href="#2-Cloud-Functionのデプロイ" class="headerlink" title="2. Cloud Functionのデプロイ"></a>2. Cloud Functionのデプロイ</h2><p>デプロイには <a href="https://cloud.google.com/sdk/gcloud/" target="_blank" rel="noopener">gcloud</a> が必要ですのでインストールしておきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Download</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/future-architect/gcp-instance-scheduler.git</span><br><span class="line"><span class="built_in">cd</span> gcp-instance-scheduler</span><br><span class="line"></span><br><span class="line"><span class="comment"># Deploy Cloud Function</span></span><br><span class="line">gcloud <span class="built_in">functions</span> deploy ReceiveEvent --project &lt;project-id&gt; \</span><br><span class="line">  --runtime go111 \</span><br><span class="line">  --trigger-topic instance-scheduler-event</span><br></pre></td></tr></table></figure><h2 id="3-Cloud-Schedulerの設定"><a href="#3-Cloud-Schedulerの設定" class="headerlink" title="3. Cloud Schedulerの設定"></a>3. Cloud Schedulerの設定</h2><p>最後にスケジューラの設定を行います。</p><p>今回は仮に、「毎日21時」に停止することにします。タイムゾーンをUTCにしたい場合は適時書き換えください。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create Cloud Scheduler Job</span></span><br><span class="line">gcloud beta scheduler <span class="built_in">jobs</span> create pubsub shutdown-workday \</span><br><span class="line">  --project &lt;project-id&gt; \</span><br><span class="line">  --schedule <span class="string">'0 21 * * *'</span> \</span><br><span class="line">  --topic instance-scheduler-event \</span><br><span class="line">  --message-body <span class="string">'&#123;"command":"stop"&#125;'</span> \</span><br><span class="line">  --time-zone <span class="string">'Asia/Tokyo'</span> \</span><br><span class="line">  --description <span class="string">'automatically stop instances'</span></span><br></pre></td></tr></table></figure><p>以上で適用できました。<br>これで、毎日21時に指定したインスタンスのシャットダウンが行われます。</p><p>テキストでは長いですが、コマンド数として少ないので簡単に適用できると思います。</p><h1 id="こぼれ話（ツール設計について）"><a href="#こぼれ話（ツール設計について）" class="headerlink" title="こぼれ話（ツール設計について）"></a>こぼれ話（ツール設計について）</h1><p>このGCP停止ツールの特徴として、Goの<a href="https://godoc.org/cloud.google.com/go" target="_blank" rel="noopener">GCP SDK</a>経由でインスタンスの制御を行っています。</p><p>これには理由があって、当初は、インフラ構築をTerraformで行っていたため、インスタンスのステータスを<a href="https://www.terraform.io/docs/configuration/override.html" target="_blank" rel="noopener">override variables</a>で上書いた上で、terraform applyによって停止させる想定でした。<br>この方式だと、既存のTerraform資産を活かしつつ手堅く実装できるんじゃないかという目論見です。</p><p>しかし、実は費用がかかっていたのはTerraform管理対象外である、サンドボックス的なDevelopment環境であったことが判明。<br>そこで方向転換し、Terraform定義が無い環境においても稼働できるように、GCPのAPIを直接呼び出すことによってシャットダウンすることにしました。</p><p>通常だとgcloudコマンドでガンバリそうですが、レポーティング機能やSlack連携機能が将来的に求められそうだったので、Goで開発することにしました。</p><p>結果として、個人的なプライベートの小さなGCP環境にでも簡単に適用できるので、これはこれで良かったなと思っています。</p><h1 id="今後"><a href="#今後" class="headerlink" title="今後"></a>今後</h1><p>まだまだ、稼働し始めたところで作りが甘いところがあり、継続的に改善していきます。<br>例えば、2019年7月時点では以下のような面を機能拡張していこうとなっています。</p><ul><li>停止したインスタンスや、停止をスキップしたインスタンス数のSlackへの通知</li><li>停止処理の高速化（並列化）</li><li>インスタンスの再起動機能の追加</li></ul><p>今後も有益だと思われるツールはドンドン公開していこうと考えています。</p><p>この記事が少しでも皆さんの役にたてば幸いです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">参考: https://cloud.google.com/scheduler/docs/start-and-stop-compute-engine-instances-on-a-schedule</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG DXユニットの真野です。2019年時点ではフューチャーに入社して9年目、主にバックエンド側の設計や開発を
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="gcp" scheme="https://future-architect.github.io/tags/gcp/"/>
    
  </entry>
  
  <entry>
    <title>Goを学ぶときにつまずきやすいポイントFAQ</title>
    <link href="https://future-architect.github.io/articles/20190713/"/>
    <id>https://future-architect.github.io/articles/20190713/</id>
    <published>2019-07-13T01:00:00.000Z</published>
    <updated>2019-07-12T06:02:47.532Z</updated>
    
    <content type="html"><![CDATA[<p>他の言語になれた人が、初めてGoを書いた時にわかりにくいな、と思った部分はどういうところがあるのか、難しいポイントはどこか、という情報を自分の経験や、会社の内外の人に聞いたりしてまとめてみました。まだまだたくさんあるのですが、多すぎるのでまずはこんなところで。コンテナで開発することがこれからますます増えていくと思われますし、その時にコンテナとの相性が抜群なGoをこれから使い始める人もどんどん増えていくと思います。</p><p>Goは特に言語のコアをシンプルに、何かを実現するときはそのシンプルな機能を組み合わせて実現しよう、というコンセプトです。つまり、他の言語で実現したいこと・できていることに比べて、Goは組み合わせ（イディオム）でカバーする領域が広くなります。そのあたりのとっかかりになる情報を提供することが、これからGoを触る人にとってつまずきを減らすことになると思います。</p><p>Go Conference’19 Summer in Fukuokaではこちらの中からいくつかピックアップをしましたが、こちらが今の所の完全版です。</p><h1 id="見え方の違い"><a href="#見え方の違い" class="headerlink" title="見え方の違い"></a>見え方の違い</h1><p>Goになれている人となれていない人では、同じコードを見た時にも見えている景色がだいぶ違いますし、コードを書くときの頭の使い方もだいぶ違います。</p><h2 id="再生-vs-再認"><a href="#再生-vs-再認" class="headerlink" title="再生 vs 再認"></a>再生 vs 再認</h2><p>認知心理学では、2つの記憶のモード、再生と再認を考えます。</p><p>再生は、過去の記憶を何もインプットがなくても思い出せる状態です。再認は、「これは体験したことがありますか？」と問われたら「ああ、これは体験したことがある」と思い出せる状態です。</p><p>再生をするには完全に記憶しきっている状態にならないとダメです。慣れている人は、数多くのパターンを記憶しており、それを再生することでコードが書けますし、他の人のコードを見た時にも、過去のパターンと照らし合わせて「より良いコード」パターンを思いついたりします。</p><p>再認の方が難易度は低いです。ドキュメント、サンプルコード、ネットで調べた情報などを辿りながら、それを組み合わせて実装します。時間もかかりますし、検索で出てこないパターンだとパフォーマンスが落ちます。ですが、なんどもなんどもコードを見て繰り返し再認していくと、再生でコードが書けるようになります。このドキュメントは再認の効率アップがゴールです。</p><p>とはいえ、必ずしも全員が再生レベルになる必要はありません。たとえGoに慣れていても、普段使わないパッケージ（cryptoパッケージの暗号化とか）を使う場合は再認で（サンプルのコピペで）コードを書くことになるでしょう。上級者でも、自分用のスニペット集を作ることで、記憶の能力の節約しつつパフォーマンスは落とさないということをしますね。</p><h2 id="アンラーニング"><a href="#アンラーニング" class="headerlink" title="アンラーニング"></a>アンラーニング</h2><p>すでに学んでいる知識がかえって学習の妨げになりがちです。このバイアスを除外して（客観化して）、あらためて学ぶというのはなかなか難易度の高いことです。自分の知識をリセットして（組み替えて）楽しむSF好きとか、逆転裁判好きとか何かしらのプラスアルファの能力が必要じゃないでしょうか？</p><p>受けての言葉で差分を表現して教えて上げるというのはこのスタートのつまずきを解消するてっとり早い方法です。そして一通り自分で手が動くようになればそこでどんどん新しい考えが定着していきます。それまでは温かい目で見守る必要があるでしょう。</p><p>なお、うまくアンラーニングできるということは、自分がそれまで持っていた知識が客観化されることになるので、過去に学んだ言語が勝手に上達することもありえます。</p><h1 id="実装パターン集"><a href="#実装パターン集" class="headerlink" title="実装パターン集"></a>実装パターン集</h1><p>では説明していきましょう。そのうちカテゴリーに分けるかもしれません。以下のような形式で統一します。</p><ul><li>これを使うときのGoの作法はなにか？（慣れている人がよく選ぶものはなにか）</li><li>この言語でやっていたように〇〇したいがどうすればいいのか？<ul><li>できない場合はその理由</li><li>複数ある場合はそれぞれの選択肢とトレードオフ</li></ul></li><li>Goにこの機能があるけどどう使うのか？</li></ul><h2 id="パッケージ"><a href="#パッケージ" class="headerlink" title="パッケージ"></a>パッケージ</h2><h3 id="Q-リポジトリはそもそもどこにおけば良いですか？"><a href="#Q-リポジトリはそもそもどこにおけば良いですか？" class="headerlink" title="Q: リポジトリはそもそもどこにおけば良いですか？"></a>Q: リポジトリはそもそもどこにおけば良いですか？</h3><p>適当なフォルダを作業フォルダにするのは可能ですか？</p><hr><p><strong>A: Goは<code>$GOPATH</code>という環境変数のところにいろいろ置きます。デフォルトでは<code>$HOME/go</code>です。これはソースコードだけではなく、ビルド済みのライブラリなどです。とりあえず作業フォルダを作ったら、そこが<code>$GOPATH</code>となるように、direnvなりで設定されるようにしましょう。</strong></p><p>プロジェクトごとに完全に分けたいのであれば、トップの<code>$GOPATH</code>用のフォルダを必要なだけ切って利用します。そこまで厳密でなければデフォルトの<code>$HOME/go</code>で良いと思います。</p><p><code>$GOPATH</code>以下は次のようになっています。appが自分の作りたいアプリケーションだとしたら、そこにフォルダを作り、git initしてしまえば良いです。go getを行ってもここにダウンロードされます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$GOPATH</span><br><span class="line">+ bin</span><br><span class="line">| ... go getで取得してビルドした実行ファイル</span><br><span class="line">+ pkg</span><br><span class="line">| + [os_arch]</span><br><span class="line">| | + ...ビルド済みのライブラリ</span><br><span class="line">| + mod</span><br><span class="line">| | + ...go modでダウンロードしたパッケージのキャッシュ</span><br><span class="line">| + dep</span><br><span class="line">|   + ...今となっては古いdepコマンドでダウンロードしたパッケージのキャッシュ </span><br><span class="line">+ src</span><br><span class="line">  + github.com</span><br><span class="line">    + user</span><br><span class="line">      + app</span><br><span class="line">      + library</span><br></pre></td></tr></table></figure><p>複数のリポジトリに分離したプロジェクトを作るときも同じ場所に置きます。ただし、依存ライブラリ側は、github等からダウンロードされて、pkg/mod以下に入れられたバージョンを利用しようとします。一緒に開発したい場合、わざわざ不安定なバージョンをgit pushしなければならない、というのは不便でしょう。幸い、go.modにはreplaceという機能が使えます。appがlibraryを使う場合は、appのgo.modに次の行を加えておくと、同じ場所にあるフォルダを参照してくれます。複数リポジトリを一緒に変更しつつ動作検証するにはこの方法がベストです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">replace (</span><br><span class="line">    github.com/user/library =&gt; ../library</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>memo:</strong> Go 1.12では<code>$GOPATH</code>以下はgo.modが自動では有効にならないため、環境変数設定で、<code>GO111MODULE=on</code>を入れておきましょう。あと数ヶ月で不要になりますが。</p><p>環境構築にはあまり凝りすぎないで、デフォルト多めの方が、世間の情報とのずれが少なく、後から見返すときに楽です。凝りすぎたMakefileやらシェルスクリプトやらは引き継ぎのコストが多くなったりするし、自分でも忘れてしまったりしがちです。</p><h3 id="Q-関数や構造体は、パッケージ（ディレクトリ）やファイルにどのように配置していけばいいか？"><a href="#Q-関数や構造体は、パッケージ（ディレクトリ）やファイルにどのように配置していけばいいか？" class="headerlink" title="Q: 関数や構造体は、パッケージ（ディレクトリ）やファイルにどのように配置していけばいいか？"></a>Q: 関数や構造体は、パッケージ（ディレクトリ）やファイルにどのように配置していけばいいか？</h3><p>各言語で、パッケージ、モジュール、ファイルの扱いがかなり違います。Goでは関数をどのように格納していけばいいのですか？例えば、Javaではフォルダがパッケージ。ファイルがクラスと対応づけられています。JavaScriptやPythonはファイル単位でモジュール、ディレクトリはデフォルトのファイル（<code>index.js</code>や<code>__init__.py</code>）を自動で読み込む動作をします。</p><hr><p><strong>A: Goではディレクトリがパッケージになります。ディレクトリに含まれるすべてのファイルは同一のパッケージ名でなければなりません。一方、ファイル間で要素を移動してもビルド時には差はありません。</strong></p><p>関数や構造体、変数などはディレクトリ内部のファイルに書きます。1つのファイルには1つの何かを書くというルールはありません。このあたりはPythonやJavaScriptに近いと言えます。</p><p>a.goとb.goが同じディレクトリ内にあった場合、a.goで定義された要素はb.goから何も宣言せずに利用できます。スコープに関してはどちらかというとJavaに近い感じです。そういった点で、ファイルに関してはどこに何をおいても、ファイル間で移動してもビルド時には差はありません。最初は1ファイルでなんでも入れておいて、大きくなってきたときに、パッケージの中で、コードなどをグルーピング化する単位でファイルに分ければ良いでしょう。</p><p>唯一、条件コンパイルで、Windowsの場合だけ、Linuxの場合だけ利用される関数といった条件コンパイルを実現するときは、ファイル単位でビルドに含めたり除外したりしますので、その単位で分けます。</p><h3 id="Q-プロジェクトを作るときのフォルダ構成の定番はどういう構成ですか？"><a href="#Q-プロジェクトを作るときのフォルダ構成の定番はどういう構成ですか？" class="headerlink" title="Q: プロジェクトを作るときのフォルダ構成の定番はどういう構成ですか？　"></a>Q: プロジェクトを作るときのフォルダ構成の定番はどういう構成ですか？　</h3><p>新規で作るときにどのようなプロジェクト構成にすればよいでしょうか？</p><hr><p><strong>A: ライブラリなのか、ライブラリ＋CLIツールも提供するのか、ウェブサーバーなのかで変わります。</strong></p><p>これはGoのリファレンスなどには書かれていませんが、一般的な慣習として使われているフォルダ構成です。</p><p>ライブラリの場合は、トップフォルダがライブラリのルートになります。リポジトリのルートで、go mod initをします。code.goの先頭は <code>pakckage yourlib</code>になり、go.modの方は<code>module github.com/yourname/yourlib</code> になります。READMEには <code>go get -u github.com/yourname/yourlib</code>でインストールしてねって書きます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+ github.com</span><br><span class="line">  + yourname </span><br><span class="line">    + yourlib    ←ここがリポジトリのルート</span><br><span class="line">      + code.go</span><br><span class="line">      + go.mod</span><br><span class="line">      + go.sum</span><br><span class="line">      + README</span><br></pre></td></tr></table></figure><p>ライブラリが、おまけでCLIツールを提供する場合は、cmdフォルダを作ってその中にコマンド名のフォルダを作り、その中に実行ファイルのソースをおきます。Goの場合ビルドを実行したフォルダ名がデフォルトで実行ファイルの名前になります。go modulesで成果物の名前を設定できるようになりましたが、それ以前からの慣習として一般的に使われています。</p><p>複数のコマンドを提供するときはcmd以下に複数フォルダを作ります。各実行ファイルは当然<code>package main</code>になります。READMEには <code>go get -u github.com/yourname/yourlib/...</code>でインストールしてねって書きます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+ github.com</span><br><span class="line">  + yourname </span><br><span class="line">    + yourlib    ←ここがリポジトリのルート</span><br><span class="line">      + cmd</span><br><span class="line">      | + yourcmd</span><br><span class="line">      |   + main.go</span><br><span class="line">      + code.go</span><br><span class="line">      + go.mod</span><br><span class="line">      + go.sum</span><br></pre></td></tr></table></figure><p>ウェブサービスのプロジェクトの場合は、トップフォルダがアプリケーションのルートになります。リポジトリのルートで、go mod initをします。実行ファイルなのでmain.goの先頭は <code>pakckage main</code>になり、go.modの方は<code>module github.com/yourname/yourapp</code> になります。あるいは、<code>go mod init yourapp</code>と実行しても良いです。その場合は、<code>module yourapp</code>となります。READMEには <code>go get -u github.com/yourname/yourapp</code>でインストールしてねって書きます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+ github.com</span><br><span class="line">  + yourname </span><br><span class="line">    + yourapp    ←ここがリポジトリのルート</span><br><span class="line">      + main.go</span><br><span class="line">      + go.mod</span><br><span class="line">      + go.sum</span><br><span class="line">      + README</span><br></pre></td></tr></table></figure><h3 id="Q-パッケージやフォルダの名前には何を使えばいいか？"><a href="#Q-パッケージやフォルダの名前には何を使えばいいか？" class="headerlink" title="Q: パッケージやフォルダの名前には何を使えばいいか？"></a>Q: パッケージやフォルダの名前には何を使えばいいか？</h3><p>パッケージやフォルダには自分で名前を設定できますが、何を使うのが良いでしょうか？</p><hr><p><strong>A: 基本的にはEffective Goで説明されている作法（簡潔な何をするパッケージ化が明確になる一つの単語、小文字、フォルダ名と同じ）に従えば良いでしょう。</strong></p><p>なお、この推奨はフォルダ名と同じというのが入っているので、フォルダ名も必然的に同じルールが適用されます。複数の単語で構成させたい場合は、 <code>encoding/json</code> のようにフォルダを分け、末端のパッケージは <code>pakcage json</code> とするのが一般的です。</p><p>パッケージはインポートしたあとに利用するシンボル名としてデフォルトで利用されます。簡潔で短い方が、プログラムが短くなります。GoはJavaのようななるべく明示的な名前を使う作法とは逆に、記憶の再認が可能な限り短くするのが作法です。また、フォルダ名と違うと、<code>import</code>文とプログラム中で利用されるシンボルがずれるため、コードを読むときに困ります。</p><p>ただし、この1単語に沿わないケースが2つほどあります。</p><h4 id="テスト用パッケージ"><a href="#テスト用パッケージ" class="headerlink" title="テスト用パッケージ"></a>テスト用パッケージ</h4><p>たとえば、 <code>slices</code> という名前のフォルダを作り、 <code>pakcage slices</code> のような名前のパッケージでコードを書くとします。通常はGoの場合は同一フォルダ内のファイルはすべて同じパッケージにしなければなりませんが、 <code>_test</code> が末尾に入っている名前（ここでは<code>package slices_test</code>）だけは特別に設定可能です。</p><p>リリースされるライブラリには含まれない、テスト用の共通処理を書いたり、ユニットテスト自体をこの<code>_test</code>パッケージで書くことができます。ただこの場合は本体の<code>slices</code>とは別のパッケージ扱いになるのでimport文を書かないと<code>slices</code>の提供する関数や構造体にはアクセスできませんし、公開されているものしかアクセスできません。exampleテストなどのブラックボックステストには逆にメリットですが、プライベートな要素のテストはできません。</p><h4 id="xxxx-go-go-xxxx-xxxx-goフォルダ"><a href="#xxxx-go-go-xxxx-xxxx-goフォルダ" class="headerlink" title="xxxx-go, go-xxxx, xxxx.goフォルダ"></a>xxxx-go, go-xxxx, xxxx.goフォルダ</h4><p>たまに見かけるケースです。何か既製のライブラリのGoラッパーとか、Go移植とかで見られるものです。たとえばlxc開発元自体が提供している<a href="https://github.com/lxc/go-lxc" target="_blank" rel="noopener">go-lxc</a>なんかは、GitHubの同一階層に本体のlxcがあるので、それと区別するためにgo-が入っています。</p><p>なお、ハイフンとかピリオドはパッケージ名には使えません。この場合は <code>package xxxx</code>のように、-goとかgo-とか.go部分を外した名前をパッケージ名につけることが多いです。</p><h2 id="ビルド環境・ツール"><a href="#ビルド環境・ツール" class="headerlink" title="ビルド環境・ツール"></a>ビルド環境・ツール</h2><h3 id="Q-Goについて調べるといろいろなツールが出てきますが、何が本当に必要なんでしょうか？"><a href="#Q-Goについて調べるといろいろなツールが出てきますが、何が本当に必要なんでしょうか？" class="headerlink" title="Q: Goについて調べるといろいろなツールが出てきますが、何が本当に必要なんでしょうか？"></a>Q: Goについて調べるといろいろなツールが出てきますが、何が本当に必要なんでしょうか？</h3><p>それぞれのツールの役割、入れた場合のメリットとか、入れなかった時のデメリットについて教えてください。</p><hr><p><strong>A: とりあえず、go fmtだけはエディタの保存時に実行されるように設定しておけば良いです。</strong></p><ul><li>go fmt: コードのスタイルを標準スタイルの設定する純正ツール。他の言語でいうところのPythonのblackとかJS/TSのprettier。gitのマージでのトラブルが減ります。やらないとコンフリクト等が増えるかもしれません。</li><li>go vet: コンパイルはできるんだけど、静的解析で問題が起きそうな箇所を見つけてくれる純正ツール。Go 1.10からはユニットテスト実行時に一緒に実行されるようになったので特に何もしなくてもご利益が得られる（当然テストはしてますよね？）</li><li>その他のツール群: 基本的に静的チェックでエラーを見つけてくれるものが多いです。<a href="https://github.com/alecthomas/gometalinter" target="_blank" rel="noopener">これらのツールをまとめてチェックしてくれるツール</a>もあります。</li></ul><p>Goはそもそもコンパイル言語であるので、変なコードはビルドすればわかります。型の整合性もいろいろわかります。何も入れなくてもスタート地点がかなり高いしgo vet自動実行もあるので、他の動的言語で徒手空拳で戦うのに比べたら遥かに安心感を持ってコードを書くことができます。</p><p>それ以上にいろいろチェックしたければ入れると良いと思います。</p><h2 id="ドキュメント"><a href="#ドキュメント" class="headerlink" title="ドキュメント"></a>ドキュメント</h2><h3 id="Q-Goはドキュメントが充実していると聞いたのですが、リファレンスを見ても使いたい機能にどうアプローチすれば良いのかわかりません。"><a href="#Q-Goはドキュメントが充実していると聞いたのですが、リファレンスを見ても使いたい機能にどうアプローチすれば良いのかわかりません。" class="headerlink" title="Q: Goはドキュメントが充実していると聞いたのですが、リファレンスを見ても使いたい機能にどうアプローチすれば良いのかわかりません。"></a>Q: Goはドキュメントが充実していると聞いたのですが、リファレンスを見ても使いたい機能にどうアプローチすれば良いのかわかりません。</h3><p>便利そうな関数あっても、それの利用方法がドキュメントを読んでも想像できません。ついつい、Qiitaなどのサンプルコードを探してしまいます。あと、どのようにソートされているのかわからず、探しにくいです。</p><hr><p><strong>A: ファクトリー関数とインタフェースの2つがわかると、読みやすくなります。</strong></p><p>まず、Goは構造体そのものを使うときには、何も初期化しないで使うか、ファクトリー関数を使って初期化します。例えば、syncのWaitGroupとかRWMutexはゼロ初期化でも正常に動きます。一方、初期化が必要なものはファクトリー関数を使って初期化します。ゼロ初期化でも動くけどユーザーの利便性のためにファクトリー関数を用意しているものもあります。</p><p>ファクトリー関数（その構造体のポインタを返す）はgo docはその構造体のメソッドリストの中に入れてくれます。なので、「この構造体が使いたい」というときはまずファクトリー関数を見つけると、そこが解決の糸口になります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ゼロ初期化</span></span><br><span class="line">wg := &amp;sync.WaitGroup&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// ファクトリー関数で初期化</span></span><br><span class="line">f, _ := os.Create(<span class="string">"new.zip"</span>)</span><br><span class="line">w := zip.NewWriter(f)</span><br></pre></td></tr></table></figure><p>ただ、その「ファクトリー関数を整列する」go docの機能が仇になって、読みにくくなるケースも多少あります。net/httpのGet/Postなどは単独で使ってHTTPアクセスをする関数ですが、Responseのファクトリー関数としてリストされてしまっています。少し、使い手側の感覚とはちょっと違いますよね？関数と構造体の順番にソートされていて、単独で使える機能は関数のところだけを探しがちですが、構造体のファクトリーメソッドのところにも使える機能が隠されている可能性があります。</p><p>次はインタフェースです。例えば、先程の <code>zip.Writer</code> を使いたい場合、 <code>io.Writer</code> というものが必要というのはわかります。で、 <code>io.Writer</code> を見ても、どう作っていいのかわからず、ここでお手上げになってしまう、というのがGoではありがちです。知識がついてくると、「os.Createで作ればOK、テスト用にはbytes.Bufferを使おうとかわかってくるのですが、どうしてもここは引っかかりがちです。</p><p>go docをローカルで動かして静的解析するとインタフェースを実装している構造体一覧とかもわかったりはします。Goが標準で提供している外部入出力系はこれでだいたいカバーできますが、io.Reader/io.Writerとかこのあたりはある程度暗記は必要かな、と思います。</p><p>しかし、例えば、 <code>sort</code> パッケージの<code>sort.Interface</code>なんかは、利用者がそのインタフェースを実装するのを期待しています（ので、そのインタフェースを作成してくれる関数はどこにもありません）。また、いくつか、ライブラリが提供する構造体のみが来ることを想定して引数がインタフェースになっていることがあります。作るにしても、ライブラリが提供する構造体を利用するにしても、ライブラリの提供者がきちんと動作可能なサンプルコードをドキュメントとして提供すべきですね。場合によってはソースコードのテストコードを読むとかが必要になるかもしれません。</p><p>ドキュメントが充実している文化とはいっても、書く人によって差がでたりわかりやすかったりわかりにくかったりするのはどうしても仕方がない面があります。</p><h2 id="型・変数"><a href="#型・変数" class="headerlink" title="型・変数"></a>型・変数</h2><h3 id="Q-ウェブアプリケーションを開発しているが、型の恩恵がわかりません"><a href="#Q-ウェブアプリケーションを開発しているが、型の恩恵がわかりません" class="headerlink" title="Q: ウェブアプリケーションを開発しているが、型の恩恵がわかりません"></a>Q: ウェブアプリケーションを開発しているが、型の恩恵がわかりません</h3><p>JSONのマッピングのための型など構造体を実装する手間ばかりが多く、面倒です。</p><hr><p><strong>A: たしかに、型のメリットを一番体感しやすいのは他人の書いてくれたものを利用するときです。自分で書いたものを自分で利用する場合はメリットを感じにくいこともありますが、後から助かる保険になります。</strong></p><p>特にJavaScriptからGoに来ると、今時のVisual Studio Codeが賢すぎて、型情報とか定義しなくても推論してしまうので、Goが面倒に感じる場面もあります。しかし、確実に後から助けてくれます。</p><ul><li>他の人が書いたコードを読み解く時に、型情報がヒントになります。Visual Studio CodeやGoLandなどのエディタを使って入れば、「定義元にジャンプ」という機能が使えます。Goはすべての型をきちんと判定するため、確実に定義元にジャンプできます（ただしインタフェースから実装の構造体には飛べません）</li><li>1ヶ月以上たって自分のコードを読み解く時に、型情報がヒントになります。</li><li>コード整理のためにあっちこっちに移動するときに、不一致があるとエディタがその場でエラーを教えてくれます。既存のコードに手を加えるのが楽になります。</li></ul><p>あとは、歳をとって記憶力がなくなってくるとか、風邪をひいた、二日酔いがつらい、という状況では短期記憶能力が下がります。まずはビールを何杯か飲んでからコードを書いてみると良いかもしれません（ダメ絶対）。</p><p>おまけですが、JSONから構造体へのマッピングを作る場合などは、<a href="https://mholt.github.io/json-to-go/" target="_blank" rel="noopener">JSON to Go</a>みたいなツールを使うと楽ができます。</p><h3 id="Q-ポインタの記号がよくわかりません"><a href="#Q-ポインタの記号がよくわかりません" class="headerlink" title="Q: ポインタの記号がよくわかりません"></a>Q: ポインタの記号がよくわかりません</h3><p><code>*</code>と<code>&amp;</code>があって使い方がよくわかりません。</p><hr><p><strong>A: ポインタなのか、インスタンス（実体）なのかをまず区別することが大切です。</strong></p><p>インスタンスはメモリ上に確保されているデータの本体です。100バイトの文字列であれば100バイトぶんのメモリを消費しています。一方、ポインタはインスタンスの場所情報です。64ビット機であれば8バイトです。</p><p>インスタンスがメモリ上にあれば、そのメモリのアドレスはかならず1つあるので、インスタンスからポインタを作ることができます。また、ポインタは特定のアドレスを指しているので、ポインタからインスタンスを取り出すこともできます。相互に変換できる、というのは大切な特性です。</p><p><code>&amp;</code>は、インスタンスからポインタを取り出す操作です。下のコードのうち、下の方には<code>&amp;</code>がついています。これはインスタンスをメモリ上に作った後にポインタを取り出して変数に入れています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// personIにはインスタンスが入る</span></span><br><span class="line">personI := Person&#123;</span><br><span class="line">  Name: <span class="string">"小動物"</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// personPはインスタンスを作ってからポインタを取り出してそれを格納</span></span><br><span class="line">personP := &amp;Person&#123;</span><br><span class="line">  Name: <span class="string">"小山駅"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>*</code>には2つの意味があります。1つはポインタから、インスタンスを取り出す「操作」です。<code>&amp;</code>の反対の操作です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"小椋佳"</span></span><br><span class="line"><span class="comment">// namePはポインタ</span></span><br><span class="line"><span class="keyword">var</span> nameP = &amp;name</span><br><span class="line"></span><br><span class="line"><span class="comment">// そのまま表示するとポインタ値が表示される</span></span><br><span class="line">fmt.Println(nameP)  <span class="comment">// 0x40c128</span></span><br><span class="line"><span class="comment">// *でインスタンスに戻すときちんと表示される</span></span><br><span class="line">fmt.Println(*nameP) <span class="comment">// 小椋佳</span></span><br></pre></td></tr></table></figure><p>もう1つはポインタを表す型です。変数、引数の型につきます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person  Person <span class="comment">// personはPerson構造体のインスタンスが入る</span></span><br><span class="line"><span class="keyword">var</span> person *Person <span class="comment">// personはPerson構造体のインスタンスのポインタが入る</span></span><br></pre></td></tr></table></figure><p>ポインタに関する記号にはもうひとつあります。それが<code>.</code>です。構造体はインタフェースのメンバーへのアクセスで使いますが、この場合はポインタだろうがインスタンスだろうが気にしないで「使える」という特別な特性があります。C/C++の場合はポインタのメンバーにアクセスする場合は<code>-&gt;</code>を使っていましたが、Goはどちらも<code>.</code>でOKです。</p><h3 id="Q-と-の使い分けがわかりません"><a href="#Q-と-の使い分けがわかりません" class="headerlink" title="Q: :=と=の使い分けがわかりません"></a>Q: <code>:=</code>と<code>=</code>の使い分けがわかりません</h3><p>代入に記号が2つありますが、いまいち使い分けでいつも悩んでしまいます。</p><hr><p><strong>A: 何が必要かはエディタが教えてくれます。エディタに従いましょう。</strong></p><p>明示的に型を指定して変数を作りたい場合はvarを使って<code>=</code>を使います。ここで<code>:=</code>を書くとエラーになります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 右辺は文字列だけど、interface&#123;&#125;にしたい</span></span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">interface</span>&#123;&#125; = <span class="string">"小中大"</span></span><br></pre></td></tr></table></figure><p>変数宣言なしで宣言と代入を同時にやろうとすると<code>:=</code>を使います。ここで<code>=</code>を書くとエラーになります。</p><p>既存の変数に代入するときは<code>=</code>を使います。ここで<code>:=</code>を書くとエラーになります。</p><p>間違ったらコンパイラが教えてくれますし、エディタやIDEも赤線をひいいてくれますので、悩む前に手を動かしてしまうのが楽です。</p><p>注意すべきは新しいスコープを作る場合です。次のコードはif文のところの記号は<code>:=</code>でも<code>=</code>でも動作します。ifの条件節は新しいスコープの中になるため、新しい変数を重複してもエラーになりません。また、親のスコープで同名の変数があれば、<code>=</code>にしても動作します（ただし、親側の変数が書き換わる）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ok := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ここ</span></span><br><span class="line"><span class="keyword">if</span> ok := test(); ok &#123;</span><br><span class="line">fmt.Println(<span class="string">"a"</span>, ok)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"b"</span>, ok)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q-返り値の宣言で変数名を入れるのはどういった意味がありますか？"><a href="#Q-返り値の宣言で変数名を入れるのはどういった意味がありますか？" class="headerlink" title="Q: 返り値の宣言で変数名を入れるのはどういった意味がありますか？"></a>Q: 返り値の宣言で変数名を入れるのはどういった意味がありますか？</h3><p>返り値の宣言で変数名を入れる記法がありますが、横に長くなってメリットを感じません。どういったご利益がありますか？</p><hr><p><strong>A: メソッドの引数をn番目でアクセスしないで、名前でアクセスするのと同じで、返り値の意味を利用者や実装者に伝えるためのものです。</strong></p><p>特に、データを外部から読み込みをするが、データ、行、列、エラーと返り値がたくさんある、みたいなケースで数が多くなってくるとプログラムのreturn文がわかりにくくなってきます。ドキュメントも読みやすくなります。</p><p>名前付きの返り値は関数開始時にゼロ値で初期化されますので、文字列の場合は空文字列、数値系の型はゼロ、bool型はfalse、errorなどのインタフェースやポインタはnilになります。エラーなんかは発生しなければそのままreturnすれば問題ありません。</p><h3 id="Q-関数の引数に型名が書かれていないものがあるのですが、どう解釈すればいいですか？"><a href="#Q-関数の引数に型名が書かれていないものがあるのですが、どう解釈すればいいですか？" class="headerlink" title="Q: 関数の引数に型名が書かれていないものがあるのですが、どう解釈すればいいですか？"></a>Q: 関数の引数に型名が書かれていないものがあるのですが、どう解釈すればいいですか？</h3><p><code>func Func(a, b, c []byte)</code>のような宣言がありました。aとbの型はなんでしょうか？</p><hr><p><strong>A: Goでは省略した引数は後ろに宣言した型が自動で入ります。</strong></p><p>変数宣言で次のような宣言があった場合に違和感を感じる人はあまりいないのではないでしょうか？これが引数のところでも使える、と考えればOKです。もちろん、最後の変数に宣言がないとエラーになります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b <span class="keyword">int</span></span><br></pre></td></tr></table></figure><h3 id="Q-immutableなコーディングがしたいのですがどうすればいいでしょうか？"><a href="#Q-immutableなコーディングがしたいのですがどうすればいいでしょうか？" class="headerlink" title="Q: immutableなコーディングがしたいのですがどうすればいいでしょうか？"></a>Q: immutableなコーディングがしたいのですがどうすればいいでしょうか？</h3><p>最近のプログラミング言語では変更不可能であると宣言することで、デバッグなどがしやすくなっており、Goでもやりたいと思っています。</p><hr><p><strong>A: Goにはあまりimmutableに実現する手法はありません。諦めてください。</strong></p><p>TypeScriptの<code>const</code>は再代入禁止なので、結構気軽に使えました。変数宣言をすべて<code>const</code>に揃えるという方法で機械的にimmutableスタイルに近づけます。Goの<code>const</code>は整数や文字列などのプリミティブには使えますが、スライス、配列、map、構造体のインスタンス、構造体のポインタなどには使えません。</p><p>また、map、スライスなどは一部の要素を変更するたびに全コピーというのは遅いためコードレビューで集中砲火を浴びることになるでしょう。</p><p>構造体のメソッドのレシーバをポインタではなくてインスタンスにすると、変更した内容がインスタンスには伝搬しなくなるため、予期せぬ変更を防げるぐらいの機能はあります（が、これも変更したつもりで変わっていないというわかりにくい挙動になるので注意）。</p><h2 id="構文"><a href="#構文" class="headerlink" title="構文"></a>構文</h2><h3 id="Q-三項演算子が使いたい"><a href="#Q-三項演算子が使いたい" class="headerlink" title="Q: 三項演算子が使いたい"></a>Q: 三項演算子が使いたい</h3><p>条件付きの初期化処理などで、三項演算子が使いたいです。</p><hr><p><strong>A: Goにはありませんので、if文を書いてください。</strong></p><h2 id="リテラル・スライス・map"><a href="#リテラル・スライス・map" class="headerlink" title="リテラル・スライス・map"></a>リテラル・スライス・map</h2><h3 id="Q-“sss”-1とか、暗黙的型変換してくれない"><a href="#Q-“sss”-1とか、暗黙的型変換してくれない" class="headerlink" title="Q: “sss” + 1とか、暗黙的型変換してくれない"></a>Q: “sss” + 1とか、暗黙的型変換してくれない</h3><p>他の言語だと、文字列と数値の結合とかをしても、適切に変換してくれます。Goの場合は文字列と数値の結合はおろか、整数と小数の計算もエラーになって不便です。</p><hr><p><strong>A: 暗黙の型変換は予想外のバグを産むことがあるため、すべて明示的に書くのがGoの考え方です。つまり、これは実現不可能です。</strong></p><h4 id="fmt-Sprintfで文字列に変換する"><a href="#fmt-Sprintfで文字列に変換する" class="headerlink" title="fmt.Sprintfで文字列に変換する"></a><code>fmt.Sprintf</code>で文字列に変換する</h4><p>結果が文字列であれば、<code>fmt.Sprintf</code>を使ってあげるのが簡単です。<code>%v</code>はどんな型でもそれなりに変換してくれます。細かい指定が必要であれば他のフラグを使って指定もできます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Sprintf(<span class="string">"%v%v"</span>, <span class="string">"abc"</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// abc1</span></span><br></pre></td></tr></table></figure><h4 id="文字列→数値、数値→文字列なら-strconv-パッケージを使う"><a href="#文字列→数値、数値→文字列なら-strconv-パッケージを使う" class="headerlink" title="文字列→数値、数値→文字列なら strconv パッケージを使う"></a>文字列→数値、数値→文字列なら <code>strconv</code> パッケージを使う</h4><p><a href="https://golang.org/pkg/strconv" target="_blank" rel="noopener">strconv</a>パッケージには文字列と他のプリミティブ型の相互変換の関数がもろもろ定義されています。<code>Format</code>で始まる関数は文字列への変換、<code>Parse</code>で始まる関数は文字列から変換です。<code>fmt.Sprintf</code>よりはコードは長くなりがちですが、こちらの方が高パフォーマンスが期待できます。</p><h4 id="キャストで数値にする"><a href="#キャストで数値にする" class="headerlink" title="キャストで数値にする"></a>キャストで数値にする</h4><p>数値型同士の変換はキャストします。誤差がどうなるかも考えて、実装者が責任を持って選ぶ必要があります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">price := <span class="number">1000</span></span><br><span class="line">taxRate := <span class="number">0.08</span></span><br><span class="line">totalPrice := <span class="keyword">int</span>(<span class="keyword">float64</span>(price) * taxRate)</span><br></pre></td></tr></table></figure><h3 id="Q-配列を返す関数を実装するときに、空の配列のreturnが面倒ですが簡単に書けませんか？"><a href="#Q-配列を返す関数を実装するときに、空の配列のreturnが面倒ですが簡単に書けませんか？" class="headerlink" title="Q: 配列を返す関数を実装するときに、空の配列のreturnが面倒ですが簡単に書けませんか？"></a>Q: 配列を返す関数を実装するときに、空の配列のreturnが面倒ですが簡単に書けませんか？</h3><p>例えば、検索してマッチした要素のインデックスの一覧を返す関数を作るとします。通信エラーの場合に空スライスとエラーを返したいのですが冗長になってしまいます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FindIndexes</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">    :</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> []<span class="keyword">int</span>&#123;&#125;, errors.New(<span class="string">"Network error"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><figcaption><span>Goではnilが空スライスとして使えるようになっています。```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">``append()``やforループにnilの空スライスを渡してもメモリアクセスエラーになったりせずに、空のスライスとして振る舞うようにGoのランタイムはデザインされています。そのため、初期化時はわざわざ空スライスを作ってあげる必要はありません。</span><br><span class="line"></span><br><span class="line">```go</span><br><span class="line">var indexes []int             // この段階では何も代入してないのでnil</span><br><span class="line">indexes = append(indexes, 10) // nilだとこの時に配列が自動で作られて帰ってくる</span><br><span class="line"></span><br><span class="line">if err != nil &#123;</span><br><span class="line">    // nilを返せば空スライスに</span><br><span class="line">    return nil, errors.New(&quot;Network error&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>単なるnilでは型情報がないのでエラーになりますので、returnで型が決まっている場合以外は変数宣言は最低限必要です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index = <span class="built_in">append</span>(<span class="literal">nil</span>, <span class="number">10</span>)  <span class="comment">// first argument to append must be typed slice; have untyped nil</span></span><br></pre></td></tr></table></figure><p>なお、<code>[]int{}</code>と初期化すると、空とはいえ実態が作られますので、nilと比較するとfalseになります。空スライスかどうかの判定はlen()を使いましょう。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">indexes := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> indexes == <span class="literal">nil</span> &#123; <span class="comment">// 常にfalse</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(indexes) == <span class="number">0</span> &#123; <span class="comment">// 期待通りの動作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q-GoにはJavaやPythonやJavaScriptにあるSetがありませんが、どうするんでしょうか？"><a href="#Q-GoにはJavaやPythonやJavaScriptにあるSetがありませんが、どうするんでしょうか？" class="headerlink" title="Q: GoにはJavaやPythonやJavaScriptにあるSetがありませんが、どうするんでしょうか？"></a>Q: GoにはJavaやPythonやJavaScriptにあるSetがありませんが、どうするんでしょうか？</h3><hr><p><strong>A: 一番簡単な（他への依存がない）方法はmapで代用する方法です。</strong></p><p>例えば、キーが文字列であれば、<code>map[string]bool</code>みたいにするのがもっとも簡単でしょう。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 作成</span></span><br><span class="line">set := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// セット</span></span><br><span class="line">set[<span class="string">"exists"</span>] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ある？</span></span><br><span class="line"><span class="keyword">if</span> set[<span class="string">"exists"</span>] &#123;</span><br><span class="line">fmt.Println(<span class="string">"exists"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ない？</span></span><br><span class="line"><span class="keyword">if</span> !set[<span class="string">"not exists"</span>] &#123;</span><br><span class="line">fmt.Println(<span class="string">"not exists"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 削除</span></span><br><span class="line"><span class="built_in">delete</span>(set, <span class="string">"exists"</span>)</span><br></pre></td></tr></table></figure><p>もし、和集合とか積集合とか差集合が必要であれば<a href="https://godoc.org/github.com/golang-collections/collections/set" target="_blank" rel="noopener">github.com/golang-collections/collections</a>パッケージが使えるでしょう。</p><p>あるいは、順序の維持も必要であれば、ソート済み配列と<a href="https://golang.org/pkg/sort/#Search" target="_blank" rel="noopener">sort.Search</a>などを駆使する手もあります（楽ではありませんが）。<a href="https://shibukawa.github.io/slices/" target="_blank" rel="noopener">ソート済み配列を対象にしたアルゴリズムのコードジェネレータ</a>もあります。</p><h2 id="関数・ロジック"><a href="#関数・ロジック" class="headerlink" title="関数・ロジック"></a>関数・ロジック</h2><h3 id="Q-クロージャって何ですか？何がうれしいんですか？"><a href="#Q-クロージャって何ですか？何がうれしいんですか？" class="headerlink" title="Q: クロージャって何ですか？何がうれしいんですか？"></a>Q: クロージャって何ですか？何がうれしいんですか？</h3><p>クロージャという言葉をよく聞きます。クロージャとはなんですか？ループの変数でトラブルが起きやすいとも聞きます。使うとどのようなメリットがあるんでしょうか？</p><hr><p><strong>A: クロージャというのは、自分が作られた環境の外の変数への参照を保持した（閉じ込めた）関数で、主に2つの用途があります。</strong></p><p>多くの言語では無名関数やラムダと呼ばれる文法を使って作られます。Goは無名関数（funcで作る名前のない関数）です。関数の中で関数を定義すると、その関数は当然外の変数にアクセスできて当然である、と誰しもが思うでしょう。しかし、これはコンパイラが気を利かせて、関数に隠れた引数を追加して、中からアクセスしている変数のポインタを渡すようにコードを改変しているのです（Pythonは親の名前空間として持っていて、ローカルで参照できない場合は親の名前空間に順番に探しに行くことで解決）。</p><p>たとえ、親の関数を抜けて、クロージャだけが存在する状態になっても、ローカル変数のnameが残り続け、あとからクロージャを実行してもその変数が残ります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Function</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">   name = <span class="string">"小太刀"</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// これがクロージャ</span></span><br><span class="line">   closure := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">       <span class="comment">// クロージャの外の変数が扱える</span></span><br><span class="line">       fmt.Printf(<span class="string">"name=%v\n"</span>, name)</span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">return</span> closure</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">closure := Function()</span><br><span class="line">closure()</span><br><span class="line"><span class="comment">// name=小太刀</span></span><br></pre></td></tr></table></figure><p>要素に分けてこれから説明しますが、普段使うときはここまで考える必要はあまりないでしょう。大抵のイディオムの中で知らずに使っていることが多いです。</p><h4 id="クロージャを使って遅延実行・コールバックをする"><a href="#クロージャを使って遅延実行・コールバックをする" class="headerlink" title="クロージャを使って遅延実行・コールバックをする"></a>クロージャを使って遅延実行・コールバックをする</h4><p>クロージャは定義されたタイミングと実行されるタイミングが少しずれます。何か実行の準備が整ったタイミング、何かイベントがあったタイミングでコールバックされます。</p><p>単なる関数を別に定義しても結果は同じですが、その定義したところのスコープの変数へのアクセスが保持されるため、引数リストを短くできます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// スコープを抜けたタイミングで後から実行されるクロージャ</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"関数実行が終了しました"</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// goroutineを作成して並列動作が可能になったときに実行されるクロージャ</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"並列動作しています"</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// フォルダを探索し、ディレクトリやファイルを見つけるたびに実行されるクロージャ</span></span><br><span class="line">err := filepath.Walk(<span class="string">"/path/to/count/files"</span>, <span class="function"><span class="keyword">func</span><span class="params">(path <span class="keyword">string</span>, info os.FileInfo, err error)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">"path=%s is-dir=%v\n"</span>, path, info.IsDir())</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="クロージャの中に変数やデータを閉じ込める"><a href="#クロージャの中に変数やデータを閉じ込める" class="headerlink" title="クロージャの中に変数やデータを閉じ込める"></a>クロージャの中に変数やデータを閉じ込める</h4><p>乱暴な言い方をしてしまえば、構造体を作らずに、構造体のようなものを作ることです。Tour of Goのクロージャの説明はここにフォーカスしていましたね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    prev, next := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        prev, next = next, prev+next</span><br><span class="line">        <span class="keyword">return</span> next</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f := fibonacci()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">    fmt.Println(f())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 13</span></span><br><span class="line"><span class="comment">// 21</span></span><br><span class="line"><span class="comment">// 34</span></span><br><span class="line"><span class="comment">// 55</span></span><br><span class="line"><span class="comment">// 89</span></span><br></pre></td></tr></table></figure><p>引数の数が多かったり、呼び出し条件が複雑だったりする場合、なおかつ、定義場所と遠く離れたところで呼び出される場合（ただし、フレームワークにユーザー定義の振る舞いを設定するケース以外）は構造体とメソッドにしてもいいかもしれません。実行場所と定義場所が離れているクロージャの本体を探すよりは、構造体を使った方がIDEで定義を探すのは簡単です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> fibonacci <span class="keyword">struct</span> &#123;</span><br><span class="line">prev, next <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *fibonacci)</span> <span class="title">calc</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">f.prev, f.next = f.next, f.prev+f.next</span><br><span class="line"><span class="keyword">return</span> f.next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newFibonacci</span><span class="params">()</span> *<span class="title">fibonacci</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;fibonacci&#123;</span><br><span class="line">prev: <span class="number">0</span>,</span><br><span class="line">next: <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f := newFibonacci()</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(f.calc())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ただ、Tour of Goのような無限配列のようなコードの場合はクロージャ単体よりも、チャネルとgoroutineを使った方が良いでしょう。なお、このコードは、サンプルをシンプルにするために無限ループになっており、外から中断できるようになっていないため、goroutineリークするコードになっていますので、このままコピーはしないでください。非同期処理・並列処理の書き方を参照してください。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">()</span> &lt;-<span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">prev, next := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// ループ一回ごとにチャネルに書き出し</span></span><br><span class="line">prev, next = next, prev+next</span><br><span class="line">c &lt;- next</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f := fibonacci()</span><br><span class="line"><span class="comment">// チャネルならforループに直接置ける</span></span><br><span class="line"><span class="keyword">for</span> next := <span class="keyword">range</span> f &#123;</span><br><span class="line">fmt.Println(next)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q-タイムアウトのエラーと並列の重い処理をどう組み合わせていいかわかりません"><a href="#Q-タイムアウトのエラーと並列の重い処理をどう組み合わせていいかわかりません" class="headerlink" title="Q: タイムアウトのエラーと並列の重い処理をどう組み合わせていいかわかりません"></a>Q: タイムアウトのエラーと並列の重い処理をどう組み合わせていいかわかりません</h3><p>タイムアウトがチャネルになっています。複数の処理の待ち合わせは <code>sync.WaitGroup</code>を使いたいのですが、どのように組み立てれば良いかわかりません。</p><hr><p><strong>A: Goには、待ち合わせには関数呼び出しによるブロックと、チャネルと主に2種類あります。まずはすべてをチャネルに集約して、<code>select</code>に持ち込むのがポイントです。</strong></p><p>例えば、<code>sync.WaitGroup</code>を使う場合は、終了した時にそれを通知するチャネルをあらかじめ作り、<code>Wait()</code>完了後にそのチャネルに送信することで、関数呼び出しのブロックをチャネルに変換できます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func NewWaitGroup(count int) (done func(), allDone &lt;-chan struct&#123;&#125;) &#123;</span><br><span class="line">wait := make(chan struct&#123;&#125;)</span><br><span class="line">allDone = wait</span><br><span class="line">var wg sync.WaitGroup</span><br><span class="line">wg.Add(count)</span><br><span class="line">done = wg.Done</span><br><span class="line">go func() &#123;</span><br><span class="line">wg.Wait()</span><br><span class="line">wait &lt;- struct&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;()</span><br><span class="line">return</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>チャネルどうしであれば<code>select</code>が使え、どちらか先に解決したほうが実行される、ということが簡単に実現できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">done, allDone := NewWaitGroup(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">timeout := time.After(<span class="number">5</span> * time.Second)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//何か重い処理</span></span><br><span class="line">done()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-allDone:</span><br><span class="line">fmt.Println(<span class="string">"全部終了"</span>)</span><br><span class="line"><span class="keyword">case</span> &lt;-timeout:</span><br><span class="line">fmt.Println(<span class="string">"タイムアウト"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>なお、チャネルをラップしたデータ構造としては<code>context</code>があります。<code>context</code>は終了通知用に特化したチャネルをラップして、関数間でやり取りをしやすくしたものです。</p><h3 id="Q-コンテキストを受け取る関数ってどんなものなんでしょうか？"><a href="#Q-コンテキストを受け取る関数ってどんなものなんでしょうか？" class="headerlink" title="Q: コンテキストを受け取る関数ってどんなものなんでしょうか？"></a>Q: コンテキストを受け取る関数ってどんなものなんでしょうか？</h3><p>あと、コンテキストとはどのようなもので、どのように使えばいいのでしょうか？</p><hr><p><strong>A: コンテキストを受け取る関数は、処理に長い時間のかかる関数です。もし呼び出し側の都合で中断させたいときに<code>context</code>を使います。時間がかかるという点では、他の言語で言う所のasync関数と同じようなものと言えます。</strong></p><p>コンテキストは、goroutineを使って非同期に柔軟に仕事を行うGoで、まとめて中断したり、他の言語でいうスレッドローカルな、一つの処理単位に閉じた並列処理用の情報共有の手段としてGo 1.7から導入されました。</p><p>ウェブサービスは1つのHTTPリクエストを起点に処理がスタートしますが、その中で多数のAPIリクエストを並行して行ったりします。この「リクエスト単位の処理」を識別し、情報共有やら中断の通知をするために、<code>context.Context</code>のインタフェースのインスタンスを共有します。他の言語だと、1リクエストは1スレッドとして、スレッドローカルなストレージを使ったりスレッドのIDを使ったりしますが、Goのスタイルの方が柔軟です。</p><p>書き方は次の3つに分けて説明します。</p><ul><li>作って呼び出す側</li><li>外部プロセス起動、APIアクセスなどのOS由来の重い処理を投げる</li><li>プロセス内の複数のタスク呼び出しの結果取得などの重い処理を扱う</li></ul><p>まずは作って呼び出す側の書き方です。</p><p>コンテキストを受け取る関数は<code>ctx</code>という名前で第一引数で渡すのがGoの流儀です。<br>コンテキストはデフォルトの<code>context.Background()</code>で作り、必要に応じて手動キャンセルがしたい（<code>context.WithCancel()</code>）、一定時間経過したら中断したい（<code>context.WithTimeout()</code>）、指定した時間になったら中断したい（<code>context.Deadline()</code>）でラップします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    <span class="comment">// Backgroundはキャンセル処理はせず、情報共有のためだけのcontext</span></span><br><span class="line">    ctx := context.Background()</span><br><span class="line">    <span class="comment">// WithCancelはキャンセルできるcontext</span></span><br><span class="line">    <span class="comment">// cancelは異常時で中断したい時以外にも、正常終了時に最後に呼ぶこと</span></span><br><span class="line">    ctx, cancel := context.WithCancel(ctx)</span><br><span class="line">    <span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子供の仕事を実行するときに第一引数で渡す</span></span><br><span class="line">    work1(ctx, r)</span><br><span class="line">    work2(ctx, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次に外部プロセス起動、APIアクセスなどのOS由来の重い処理を投げる書き方の紹介です。標準ライブラリの<code>net/http</code>や<code>os/exec</code>は<code>context</code>を受け取って、終了通知が来たら通信を中断したり、外部コマンドにシグナルを送って中断させるキャンセル処理ができるAPIも提供しています。<code>net/http</code>は多少不便なので、非標準の<code>ctxhttp</code>を使うと簡単ですし、そのうち標準ライブラリも改善される予定ではあります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"https://godoc.org/golang.org/x/net/context/ctxhttp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">accessSHS</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ctxを第一引数で渡す</span></span><br><span class="line">    res, err := ctxhttp.Get(ctx, <span class="literal">nil</span>, <span class="string">"https://shs.sh"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後に、自分でコンテキストの中断をハンドリングさせる方法です。コンテキストの中はチャネルですので、重い処理をすべてチャネルとして取り出せるようにしておけば、<code>select</code>を使ってコンテキストの中断と一緒に扱うことができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">launchBatch</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">    resultChan := <span class="built_in">make</span>(<span class="keyword">chan</span> Result)</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> result := &lt;-resultChan:</span><br><span class="line">        <span class="comment">// 正常に終了</span></span><br><span class="line">    <span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">        <span class="comment">// 親の都合でキャンセル</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q-省略可能な引数はどのように実現するのですか？"><a href="#Q-省略可能な引数はどのように実現するのですか？" class="headerlink" title="Q: 省略可能な引数はどのように実現するのですか？"></a>Q: 省略可能な引数はどのように実現するのですか？</h3><p>Pythonや最近のJavaScriptは引数を省略する、デフォルト値を設定する方法を提供しています。Javaはオーバーロードを駆使すれば変数の数によって似たことを実現できます。Goではどのようにするのでしょうか？</p><hr><p>Goには省略可能な引数もオーバーロードもありません。可変長引数や、メンバーが省略可能な構造体を利用してオプション引数を実現します。</p><p>なお、可変長引数で型を <code>interface{}</code> にして動的に型アサーションして読み込む方法もありますが、複雑になると破綻しがちなのと、引数の役割が呼び出し側でわかりにくいのでここでは紹介しません。</p><h4 id="名前違いの関数をいくつも提供する"><a href="#名前違いの関数をいくつも提供する" class="headerlink" title="名前違いの関数をいくつも提供する"></a>名前違いの関数をいくつも提供する</h4><p>たとえば、<code>strings</code>パッケージには、文字列の前後の指定された文字をカットする<code>strings.Trim(s, cutset)</code>関数と、文字列の前後のスペースを取り除く<code>strings.TrimSpace(s)</code>があります。</p><p>細かくたくさんの引数を受け取る関数を定義し、それをラップしてデフォルトの引数を付与する便利関数を定義する、というのがGoでよく利用される方法です。</p><h4 id="オプション構造体"><a href="#オプション構造体" class="headerlink" title="オプション構造体"></a>オプション構造体</h4><p>最近よく見るパターンです。実装が簡単なので実装者にとってはやりやすい方法です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Option <span class="keyword">struct</span> &#123;</span><br><span class="line">    Host <span class="keyword">string</span></span><br><span class="line">    Port <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetData</span><span class="params">(o Option)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 初期値を与える</span></span><br><span class="line">    <span class="keyword">if</span> o.Host == <span class="string">""</span> &#123;</span><br><span class="line">        o.Host = <span class="string">"localhost"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> o.Port == <span class="number">0</span> &#123;</span><br><span class="line">        o.Port = <span class="number">65535</span></span><br><span class="line">    &#125;</span><br><span class="line">    res, err := http.Get(fmt.Sprintf(<span class="string">"http://%s:%d"</span>, o.Host, o.Port))</span><br><span class="line">    :</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用時</span></span><br><span class="line">d, e := GetData(Option&#123;</span><br><span class="line">  Host: <span class="string">"example.com"</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Builderパターンの変形"><a href="#Builderパターンの変形" class="headerlink" title="Builderパターンの変形"></a>Builderパターンの変形</h4><p>JavaでおなじみのBuilderパターンの変形もたまにGoでみかけます。Builderパターンは本来は構造体などの初期化で使うパターンですが、関数呼び出しでも使えます。</p><p><a href="https://godoc.org/google.golang.org/api/drive/v3" target="_blank" rel="noopener">Google Drive API</a>では大々的に使われています。List()の返り値はDrivesListCallという構造体で、この構造体のメソッドを呼ぶたびに、構造体に引数が設定されていきます。最後に<code>Do()</code>を呼び出すと、処理が実行されます。それ以外にも<a href="https://gorm.io/docs/query.html" target="_blank" rel="noopener">ORマッパーのクエリーの組み立て</a>でも使われたりします。</p><p>難点としては、実装が多くなりがちなのと、このパターンを知らない人がいきなりドキュメントを見ても使い方が難しいと感じがちな点です。ただ、コード補完はバッチリ効くので、一度なれたら快適でしょう。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driveService, err := drive.NewService(ctx)</span><br><span class="line"></span><br><span class="line">list, err := driveService</span><br><span class="line">    .List().PageSize(<span class="number">20</span>).Q(<span class="string">"name contains 'secret'"</span>).Do()</span><br></pre></td></tr></table></figure><p>Pythonの疑似コードで例えるなら次のような感じになります（実際のGoogle提供のAPIとは違いますが）。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list = drive_service.list(page_size=<span class="number">20</span>, Q=<span class="string">"name contains 'secret'"</span>)</span><br></pre></td></tr></table></figure><h4 id="設定値をグローバルな構造体に設定して、それを利用する関数を使用"><a href="#設定値をグローバルな構造体に設定して、それを利用する関数を使用" class="headerlink" title="設定値をグローバルな構造体に設定して、それを利用する関数を使用"></a>設定値をグローバルな構造体に設定して、それを利用する関数を使用</h4><p><code>net/http</code>の<code>http.Get()</code>などが利用しているパターンです。<br>HTTPアクセスには、アクセス経路（TCP/IPなのか、はたまたローカルのサーバーとUnixドメインソケットで直結なのか)とか、タイムアウトとか、TLSの設定とか、パラメータが大量にあります。簡単関数とそれらを1つずつ受ける関数を作るのも大変ですし、ちょっと高度な使い方を使用としたときに呼び出し先をすべて変更してまわらないといけないのは大変です。</p><p>Goの<code>net/http</code>パッケージは、<code>DefaultClient</code>という<code>Client</code>構造体のインスタンスがグローバル変数として定義されており、<code>http.Get()</code>などはこれのメソッドを間接的に呼び出します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Get</span><span class="params">(url <span class="keyword">string</span>)</span> <span class="params">(resp *Response, err error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> DefaultClient.Get(url)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この<code>DefaultClient</code>に、自作の<code>Client</code>のインスタンスを入れることで、プログラム全体が同じ通信設定を利用できます。大抵、通信設定が複数に必要になるケースはあまりないため、このようなAPIでも問題なることはいまのところ聞いていません。</p><p>単なるグローバル変数と何が違うかというと、構造体単体を初期化してそのメソッドを呼ぶと、他の設定に依存せずに独立して利用できます。いざという時に複数の設定が必要になっても機械的に移行できますし、ライブラリ側のテストもしやすいです。</p><h4 id="可変長引数を利用した方法"><a href="#可変長引数を利用した方法" class="headerlink" title="可変長引数を利用した方法"></a>可変長引数を利用した方法</h4><p>Goでは、すでに存在している型にも別名の型を定義でき、それを制約にすることができます。</p><p>Go Patternsの<a href="http://tmrts.com/go-patterns/idiom/functional-options.html" target="_blank" rel="noopener">Functional Options</a>はその応用例の一つです。Go Patternsのサンプルの完成形の部分だけ貼ります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fillerFile, err := file.New(</span><br><span class="line">    <span class="string">"/tmp/file.txt"</span>,</span><br><span class="line">    file.UID(<span class="number">1000</span>),</span><br><span class="line">    file.Contents(<span class="string">"Lorem Ipsum Dolor Amet"</span>))</span><br></pre></td></tr></table></figure><p>難点はコードの量が多くなる、パッケージのドキュメントが散らかる（New関数も引数の関数もフラットにソートされてしまう）ために、読みにくくなるといったことが挙げられます。あまり現実世界では見たことがありません。</p><h3 id="Q-goroutineの中から外の変数にアクセスすると値がおかしくなる"><a href="#Q-goroutineの中から外の変数にアクセスすると値がおかしくなる" class="headerlink" title="Q: goroutineの中から外の変数にアクセスすると値がおかしくなる"></a>Q: goroutineの中から外の変数にアクセスすると値がおかしくなる</h3><p>ループの中でループ変数などを参照するときになぜか変な値になってしまいます</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 10</span></span><br></pre></td></tr></table></figure><hr><p><strong>A: 関数は定義されている外の情報にアクセスできます。ただし、ポインタを持っているだけなので、値が変更されると呼ばれたときではなく、最新の値を読み込んでしまいます。</strong></p><p>たいていのプログラミング言語では、「レキシカルスコープ」と呼ぶこの機能を実装しています。関数の中で関数を定義すると、その関数は当然外の変数にアクセスできて当然である、と誰しもが思うでしょう。しかし、これはコンパイラが気を利かせて、関数に隠れた引数を追加して、中からアクセスしている変数のポインタを渡すようにコードを改変しているのです（Pythonは親の名前空間として持っていて、ローカルで参照できない場合は親の名前空間に順番に探しに行くことで解決）。</p><p>Goのgroutineは高速とはいえ、forループが回る速度よりは低速です。そのため、goroutineが起動するころにはほとんどループが終わってしまっています。そのため、ほとんどの上記のgroutineではiが10になっています。</p><p>ポインタなのが問題なので、インスタンス化してコピーを保持するのがもっとも安全な解決方法です。コピーは関数の引数として渡す方がよいでしょう。これにより、goroutineが起動したときの変数の状態を固定化して、期待通りの結果が得られます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;(i) <span class="comment">// ここで引数としてiを入れることでコピーが引数として残る</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 9</span></span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 8</span></span><br></pre></td></tr></table></figure><h3 id="Q-deferの中で変数の値が期待と違います"><a href="#Q-deferの中で変数の値が期待と違います" class="headerlink" title="Q: deferの中で変数の値が期待と違います"></a>Q: deferの中で変数の値が期待と違います</h3><p>deferは終了時に呼ばれるはずですが、変数が終了していない状態のものになってしまっています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">finished := <span class="literal">false</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(finished <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(finished)</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">&#125;(finished)</span><br><span class="line"></span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line"></span><br><span class="line">finished = <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><p><strong>A: 呼び出しはスコープを抜ける時に行われますが、引数の評価は宣言時に行われています。</strong></p><p>クロージャの時のケースの逆です。このケースではdefer文のところでfinishedのインスタンスのコピーが作られて固定化されてしまっているため、その後finishedを変更してもdeferの中では呼び出し時の状態に固定化されてしまっています。関数終了時の状態が必要であれば、クロージャにする、ポインタを引数で受け取るなどして最終状態にアクセスできるようにしなければなりません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">finished := <span class="literal">false</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(finished)</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// do something</span></span><br><span class="line"></span><br><span class="line">finished = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="Q-関数型スタイルのリスト処理がやりたいがGoではどうすれば良いですか？"><a href="#Q-関数型スタイルのリスト処理がやりたいがGoではどうすれば良いですか？" class="headerlink" title="Q: 関数型スタイルのリスト処理がやりたいがGoではどうすれば良いですか？"></a>Q: 関数型スタイルのリスト処理がやりたいがGoではどうすれば良いですか？</h3><p>JavaScriptのArrayのmap/reduce/forEach/filterのメソッドを利用したコーディングが好きです。Javaにもstreamが入りました。Pythonにはリスト内包表記があります。Goではどのようにすればいいでしょうか？</p><hr><p><strong>A: Goではそのスタイルをサポートする機能があまりないのであきらめてください。</strong></p><p>手続き型的にコードを書くのではなく、リストに入ったデータに対して、その加工方法（関数）を渡して（高階関数）すべての要素にパイプライン的に処理させる機能を充実させている言語は増えていますが、Goではそのようなサポートはありません。あきらめてforループを書きましょう。もちろん、末尾再帰もありません。パターンマッチもありません。</p><p>関数が一級オブジェクトではあるので、自分でmap相当の処理を書くことで似たことは実現できますが、あまり強力に推論してくれたりしないので、型アサーションの嵐になるか、リフレクションで頑張らざるを得ないため、必ずしもシンプルには実現できないでしょう。</p><h3 id="Q-外部のAPI呼び出しなどの時間のかかる処理でタイムアウトを実装するにはどうすれば良いでしょうか？"><a href="#Q-外部のAPI呼び出しなどの時間のかかる処理でタイムアウトを実装するにはどうすれば良いでしょうか？" class="headerlink" title="Q: 外部のAPI呼び出しなどの時間のかかる処理でタイムアウトを実装するにはどうすれば良いでしょうか？"></a>Q: 外部のAPI呼び出しなどの時間のかかる処理でタイムアウトを実装するにはどうすれば良いでしょうか？</h3><h2 id="構造体・インタフェース"><a href="#構造体・インタフェース" class="headerlink" title="構造体・インタフェース"></a>構造体・インタフェース</h2><h3 id="Q-Goの構造体とかインタフェースの定義の構文は冗長に見えます"><a href="#Q-Goの構造体とかインタフェースの定義の構文は冗長に見えます" class="headerlink" title="Q: Goの構造体とかインタフェースの定義の構文は冗長に見えます"></a>Q: Goの構造体とかインタフェースの定義の構文は冗長に見えます</h3><p>Javaとかだと、class { 実装 }だけど、キーワードが多いし順番に違和感を覚えます。</p><hr><p><strong>A: Goは構造体もインタフェースもインラインで定義できます。インラインの定義構文＋名前の定義の組み合わせになっています。</strong></p><p>例えば、テーブル駆動テストはたいてい、インラインで構造体を定義してその配列をその場でインスタンスまで作ってしまいます。1行でやってしまっています。関数内部でしか使われない型はこのようにつくってしまえるのがGoです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSum</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    testcases := []<span class="keyword">struct</span> &#123;</span><br><span class="line">        name         <span class="keyword">string</span></span><br><span class="line">        a, b, result <span class="keyword">int</span></span><br><span class="line">    &#125;&#123;</span><br><span class="line">        &#123;name: <span class="string">"p + p"</span>, a: <span class="number">10</span>, b: <span class="number">10</span>, result: <span class="number">20</span>&#125;,</span><br><span class="line">        &#123;name: <span class="string">"p + 0"</span>, a: <span class="number">20</span>, b: <span class="number">0</span>, result: <span class="number">20</span>&#125;,</span><br><span class="line">        &#123;name: <span class="string">"n + p"</span>, a: <span class="number">-10</span>, b: <span class="number">10</span>, result: <span class="number">0</span>&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> _, testcase := <span class="keyword">range</span> testcases &#123;</span><br><span class="line">        t.Run(testcase.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">            actual := Sum(testcase.a, testcase.b)</span><br><span class="line">            <span class="keyword">if</span> actual != testcase.result &#123;</span><br><span class="line">                t.Fatalf(<span class="string">"expected: %d, actual %d"</span>, testcase.result, actual)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一方、既存の型に名前をつけるのがtypeです。<code>type 新しい名前 既存の型</code>で使います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ErrorFlag <span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>Goの構造体定義の書き方はこの2つの合成です。既存の型部分にインラインの構造体定義がくっつているというわけです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SmallAnimal <span class="keyword">struct</span> &#123;</span><br><span class="line">    FavoriteDrink <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>インタフェースのインライン定義も使ったことはありませんが、osパッケージのerror.goで見ることができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e, ok := err.(<span class="keyword">interface</span>&#123; Is(error) <span class="keyword">bool</span> &#125;)</span><br></pre></td></tr></table></figure><p>この一行で、errというポインタ変数が<code>func Is(error) bool</code>というメソッドを持っているかどうか、という判断ができます。</p><h3 id="Q-構造体をJSONに書き出そうとしているのですがメンバー変数の値が出力されません。なぜでしょうか？"><a href="#Q-構造体をJSONに書き出そうとしているのですがメンバー変数の値が出力されません。なぜでしょうか？" class="headerlink" title="Q: 構造体をJSONに書き出そうとしているのですがメンバー変数の値が出力されません。なぜでしょうか？"></a>Q: 構造体をJSONに書き出そうとしているのですがメンバー変数の値が出力されません。なぜでしょうか？</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span> <span class="string">`json:"name"`</span></span><br><span class="line">age  <span class="keyword">int</span>    <span class="string">`json:"age"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>A: 外部パッケージから利用できる名前は大文字スタートでないといけません。<code>encoding/json</code>パッケージはリフレクションでデータを読みに行きますが、大文字スタート以外の名前の変数は無視されます。</strong></p><p>そのため、name, ageの先頭を大文字にすれば出力されるようになります。</p><h3 id="Q-汎用的なロジックを実装したいが、Goの場合は型が決まってしまうため再利用がしにくい"><a href="#Q-汎用的なロジックを実装したいが、Goの場合は型が決まってしまうため再利用がしにくい" class="headerlink" title="Q: 汎用的なロジックを実装したいが、Goの場合は型が決まってしまうため再利用がしにくい"></a>Q: 汎用的なロジックを実装したいが、Goの場合は型が決まってしまうため再利用がしにくい</h3><p>複数のデータ変換用の構造体に対する処理とかを書くのが大変。どうすれば良いか？</p><hr><p><strong>A: 共通化を行うためには、共通化のための仕組みを作り込む必要があります。</strong></p><p>Goはなるべく高速に動作し、型のチェックをきちんと行いつつ、すばやくコンパイルが完了するというのを目指して作られた処理系です。柔軟性よりも、存在しないメンバーや変数へのアクセスがないかがすぐにわかって、実行時のメモリレイアウトがカチッと決まることがGoのコンパイラの価値です。</p><p>共通化のための仕組みを実現する方法はいくつかあります。</p><h4 id="インタフェースを実装する方法"><a href="#インタフェースを実装する方法" class="headerlink" title="インタフェースを実装する方法"></a>インタフェースを実装する方法</h4><p>処理対象の構造体の共通インタフェースを定義して、それに対する処理を書きます。インタフェースは構造体のメンバー変数へのアクセスができないため、まず、必要な読み書きのメソッドを用意します。その後、そのメソッドを持つインタフェースを定義して、共通処理をそのメソッドを使って行うようにします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">  Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> p.Name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name     <span class="keyword">string</span></span><br><span class="line">  Age      <span class="keyword">int</span></span><br><span class="line">  FurColor Color</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d Dog)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> d.Name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Living <span class="keyword">interface</span> &#123;</span><br><span class="line">  GetName() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 共通処理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintName</span><span class="params">(l Living)</span></span> &#123;</span><br><span class="line">  fmt.Println(l.GetName())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="構造体の埋め込みを使う方法"><a href="#構造体の埋め込みを使う方法" class="headerlink" title="構造体の埋め込みを使う方法"></a>構造体の埋め込みを使う方法</h4><p>共通の属性が一意に定まり、なおかつ共通処理はそこの情報にしか絶対にアクセスしないと保証できるなら、共通の属性を構造体として切り出し、それを各構造体に埋め込みます。</p><p>ただし、共通処理に対するコードを書く場合は、それ以外の要素にアクセスしようとか、メソッドのオーバーライドをしたいとか、一般的なオブジェクト指向言語のノリで扱うと想定通りに動かなくて時間を取られることになりますので、用法容量を守ってお使いください。</p><ul><li>参考: <a href="https://qiita.com/shibukawa/items/16acb36e94cfe3b02aa1" target="_blank" rel="noopener">オブジェクト指向言語としてGolangをやろうとするとハマること</a></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Living <span class="keyword">struct</span> &#123;</span><br><span class="line">  Name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">  Living</span><br><span class="line">  Age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Dog <span class="keyword">struct</span> &#123;</span><br><span class="line">  Living</span><br><span class="line">  Age      <span class="keyword">int</span></span><br><span class="line">  FurColor Color</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 共通処理</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrintName</span><span class="params">(l Living)</span></span> &#123;</span><br><span class="line">  fmt.Println(l.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q-構造体にメソッドを追加しました。メンバー変数を書き換えようとしても変更されません。なぜでしょうか？"><a href="#Q-構造体にメソッドを追加しました。メンバー変数を書き換えようとしても変更されません。なぜでしょうか？" class="headerlink" title="Q: 構造体にメソッドを追加しました。メンバー変数を書き換えようとしても変更されません。なぜでしょうか？"></a>Q: 構造体にメソッドを追加しました。メンバー変数を書き換えようとしても変更されません。なぜでしょうか？</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> SmallAnimal <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s SmallAnimal)</span> <span class="title">SetName</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    s.name = name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>A: メソッドのレシーバーがポインタでないとメンバーへの変更ができません。</strong></p><p>読み込み専用にしたい場合はポインタを外してインスタンスにします。基本的には最初は全部ポインタをつけておいて、「このメソッド内部では変更しないな」というのが確定する場合だけ外すというのが良いでしょう。メソッドからメソッドを呼ぶ場合がややこしいので、困ったら全部ポインタにしてしまいましょう。</p><h3 id="Q-ある構造体に対する処理を実装する場合は、メソッドにすべきか、それとも構造体を引数に取る関数にすべきか？"><a href="#Q-ある構造体に対する処理を実装する場合は、メソッドにすべきか、それとも構造体を引数に取る関数にすべきか？" class="headerlink" title="Q: ある構造体に対する処理を実装する場合は、メソッドにすべきか、それとも構造体を引数に取る関数にすべきか？"></a>Q: ある構造体に対する処理を実装する場合は、メソッドにすべきか、それとも構造体を引数に取る関数にすべきか？</h3><p>Goには構造体の処理の書き方が2通りあります。どちらが良いですか？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1: メソッド</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Struct)</span> <span class="title">Method</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// sに対する処理を書く</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2: 関数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Func</span><span class="params">(s *Struct)</span></span> &#123;</span><br><span class="line">    <span class="comment">// sに対する処理を書く</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>A: 最初にメソッドで実装してしまえばいいんじゃないでしょうか？</strong></p><p>メソッドの方は、使う側からすれば、 <code>s.</code> とドットを打った時点でそれに関連するメソッドが補完されますので、再認でコーディングがしやすいというメリットがあります。また、関数にしても、<code>パッケージ名.関数名</code>となってしまうため、利用するコード上は多少冗長になります。</p><p>ただし、処理対象が1つの構造体ではなく、複数の構造体がくる可能性のあるインタフェースになる場合は、関数の方が1つの実装でたくさんの処理対象に対して利用できるので、数が多くなってきたら関数で良いかと思います。</p><h3 id="Q-エラーの構造体を作っています。そのエラーがタイムアウトかそうじゃないかを機械的にboolで判断できるようにするメソッドを追加したいのですが、どうすれば良いでしょうか？"><a href="#Q-エラーの構造体を作っています。そのエラーがタイムアウトかそうじゃないかを機械的にboolで判断できるようにするメソッドを追加したいのですが、どうすれば良いでしょうか？" class="headerlink" title="Q: エラーの構造体を作っています。そのエラーがタイムアウトかそうじゃないかを機械的にboolで判断できるようにするメソッドを追加したいのですが、どうすれば良いでしょうか？"></a>Q: エラーの構造体を作っています。そのエラーがタイムアウトかそうじゃないかを機械的にboolで判断できるようにするメソッドを追加したいのですが、どうすれば良いでしょうか？</h3><p>標準のエラー構造体は文字列を取り出すError()メソッドしかなく、詳細情報をそこをパースして取り出すのは変更に弱いコードになってしまいます。良い方法はないでしょうか？</p><hr><p><strong>A: errorインタフェースを満たす実装以外に別のインタフェースも提供して、型アサーションで別のインタフェースを取り出す方法があります。</strong></p><p>まず、公開要素のTimeoutErrorインタフェースと、非公開のtimeoutError構造体を作ります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> TimeoutError <span class="keyword">interface</span> &#123;</span><br><span class="line">    timeout()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> timeoutError <span class="keyword">struct</span> &#123;</span><br><span class="line">    error <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// errorインタフェース用のメソッド</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t timeError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> t.error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TimeoutErrorインタフェース用のメソッド（private)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t timeError)</span> <span class="title">timeout</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>何かしらの処理がタイムアウトしたときは、timeoutError構造体のポインタ値を返すようにします。これはerrorインタフェースを満たすので、関数の返り値はerror型でOKです。</p><p>で、この構造体はerror型以外にも、新規で作ったTimeoutErrorインタフェースも満たしますので、インタフェースからインタフェースの型アサーションも成功します。そのため、次のようにキャストすることでerrorインタフェースが持てない情報を別のインタフェースを通じて提供することができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> _, ok := err.(TimeoutError); ok &#123;</span><br><span class="line">    <span class="comment">// キャストが成功したのでタイムアウトエラーと判定可能</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一定以上の年齢の人にはCOMのqueryInterfaceと言えば伝わるテクニックです。</p><h2 id="エラー処理・例外処理"><a href="#エラー処理・例外処理" class="headerlink" title="エラー処理・例外処理"></a>エラー処理・例外処理</h2><h3 id="Q-エラーの種別はどのようにして区別すれば良いでしょうか？"><a href="#Q-エラーの種別はどのようにして区別すれば良いでしょうか？" class="headerlink" title="Q: エラーの種別はどのようにして区別すれば良いでしょうか？"></a>Q: エラーの種別はどのようにして区別すれば良いでしょうか？</h3><p><code>nil</code>と比較することでエラーの有無の確認はわかったのですが、タイムアウトなのかファイルがないのかを区別するにはどうすれば良いでしょうか？</p><hr><p><strong>A: ここはGo言語の実装者同士の間でも設計がぶれているところですが、基本的には型アサーションで行うことが多いでしょう。</strong></p><p>Go本体のコードを見ても、2種類あります。osパッケージにはエラー種別を区別する関数がいくつか提供されています。IsExists, IsNotExist, IsPermission, IsTimeoutがあります。この方式はコードが一見きれいに見えますが、osパッケージ以外では見ない気がします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_, err := os.Stats(<span class="string">"file"</span>)</span><br><span class="line"><span class="keyword">if</span> os.IsNotExist(err) &#123;</span><br><span class="line">  <span class="comment">// ファイルが存在しない</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他のケースでは型アサーションがあります。こちらのほうがサードパーティ製ライブラリでは一般的な気がします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">err := json.Unmarshal(jsonStr, person)</span><br><span class="line"><span class="keyword">if</span> _, ok := err.(*json.InvalidUnmarshalError); ok &#123;</span><br><span class="line">  <span class="comment">// unmarshal errorのとき</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q-panicはどのような時に使うのか？"><a href="#Q-panicはどのような時に使うのか？" class="headerlink" title="Q: panicはどのような時に使うのか？"></a>Q: panicはどのような時に使うのか？</h3><p>Goは例外がない言語で、errorを最後の返り値として渡すのが一般的ですが、panicはどうやって使うんでしょうか？</p><hr><p><strong>A: panicとrecoverを使えば例外のようなことができますが、Goでは一般的ではありません。プログラマーの間違いを引っ掛けるのに使う、と考えれば良いでしょう。</strong></p><p>Goでよくpanicを使うのは、入力値が固定値だったり、実行時に変動しないデータを扱う場合です。例えば正規表現、テンプレートなど、入力値が文字列で、内部でコンパイルのようなことを行う関数は、<code>Must</code>で始まる関数も提供しています。この<code>Must</code>な関数は処理が失敗すると<code>panic</code>になります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> validID *regexp.Regexp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> validID = regexp.MustCompile(<span class="string">`^[a-z]+\[[0-9]+\]$`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Q-log-Fatal-や-os-Exit-ってどのような時に使うのか？"><a href="#Q-log-Fatal-や-os-Exit-ってどのような時に使うのか？" class="headerlink" title="Q: log.Fatal() や os.Exit() ってどのような時に使うのか？"></a>Q: <code>log.Fatal()</code> や <code>os.Exit()</code> ってどのような時に使うのか？</h3><p>これらの関数を使うとプログラムが終了できますが、いろいろ副作用があるようです。どこで使うべきですか？</p><hr><p><code>log.Fatal()</code> は内部では <code>os.Exit(1)</code> を呼んでいるので、 <code>os.Exit()</code> ど同等なので後者に絞って説明します。 <code>os.Exit()</code>を呼ぶと、その次の行が実行されずにプログラムが終了します。問題なのは、 <code>defer</code>で設定した後処理が無視されてしまうので、完了時にネットワーク切断とかもろもろ後片付けをする行儀の良いコードが動作しなくなります。また、そのロジックが有用なコードでも、コマンドラインツールのように一回実行して完了するプログラム以外で使用が不可能になります。</p><p>基本的には、main関数以外ではerrorを上流に返していき、最後の最後、main関数の中で <code>os.Exit</code>を呼んでステータスコードを0以外にする、という使い方以外で使うことはないでしょう。</p><h3 id="Q-並列処理で複数のAPI呼び出しをしています。どこかでエラーがおきた時にまとめて終了させたいときはどうすればいいですか？"><a href="#Q-並列処理で複数のAPI呼び出しをしています。どこかでエラーがおきた時にまとめて終了させたいときはどうすればいいですか？" class="headerlink" title="Q: 並列処理で複数のAPI呼び出しをしています。どこかでエラーがおきた時にまとめて終了させたいときはどうすればいいですか？"></a>Q: 並列処理で複数のAPI呼び出しをしています。どこかでエラーがおきた時にまとめて終了させたいときはどうすればいいですか？</h3><p>それぞれの処理で途中で継続できなくなった時に、他の処理も中断させたいと思います。どのようにすれば良いでしょうか？</p><hr><p><strong>A: <code>context</code>はまさにその用途で使うものです。<code>context</code>は並列処理で使える例外のようなものです。</strong></p><p>JavaやPythonやJavaScriptはエラー処理機構として例外を持っており、Goはそれを持っていないと言われます。しかし、一般的な言語の例外は、呼び出し先から呼び出し元に戻っていきます。その途中で受け取って後片付けを行ったりしますが、呼び出し元と呼び出し先は1:1の関係です。Goのようにgoroutineをカジュアルにたくさん作って処理を行う場合。どこかで復旧不能なエラーが発生したら、並行で実行されている他のタスクもキャンセルしたいですよね？そのような場合に<code>context</code>を使います。</p><p>ただし、<code>context</code>パッケージをそのまま使い、タスクの終了を監視しつつ（<code>sync.WaitGroup</code>)、各ジョブのエラーのレスポンスを監視し、どこかのgoroutineがエラーを返したら<code>context</code>のキャンセルを行うというコードを書くのは結構骨が折れます。非標準パッケージの<code>golang.org/x/sync/errgroup</code>を使うと、1/10ぐらいの行数で実現ができます。</p><p><code>Go()</code>メソッドはerrorを返す関数で、これがerrorを返すと、すべての並列実行タスクを終了します。これは並列じゃなくてもよくて、順次実行されるジョブでも使えます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"golang.org/x/sync/errgroup"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">eg := errgroup.Group&#123;&#125;</span><br><span class="line"></span><br><span class="line">results := <span class="built_in">make</span>(<span class="keyword">chan</span> []<span class="keyword">byte</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">eg.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">res, err := http.Get(<span class="string">"http://shs.sh"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line">result, _ := ioutil.ReadAll(res.Body)</span><br><span class="line">results &lt;- result</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">eg.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">res, err := http.Get(<span class="string">"http://sh.shs"</span>) <span class="comment">// 間違ったドメイン</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line">result, _ := ioutil.ReadAll(res.Body)</span><br><span class="line">results &lt;- result</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := eg.Wait(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ロギング"><a href="#ロギング" class="headerlink" title="ロギング"></a>ロギング</h2><h3 id="Q-ログレベルを設定したログ出力はどのように実現するのか？"><a href="#Q-ログレベルを設定したログ出力はどのように実現するのか？" class="headerlink" title="Q: ログレベルを設定したログ出力はどのように実現するのか？"></a>Q: ログレベルを設定したログ出力はどのように実現するのか？</h3><p>JavaのLog4J、Pythonのloggingパッケージではinfo/warnのようなログの出し分けができますが？Goではどのようにすればいいですか？</p><hr><p><strong>A: Goの標準ライブラリではサポートしていません。<a href="https://github.com/sirupsen/logrus" target="_blank" rel="noopener">logrus</a>や<a href="https://github.com/uber-go/zap" target="_blank" rel="noopener">zap</a>などのサードパーティ製のロギングライブラリを使うのが良いでしょう</strong></p><p>以前はlogrusほぼ一強でしたが、ハイパフォーマンスをうたったzapの人気も高まっています。zapは構造化ログに特化していますので用途に応じて選ぶと良いでしょう。zapはサンプリングレートなども設定できるので、本番環境でログが多すぎて困る、というケースでとりあえず対処するのも簡単です。</p><h3 id="Q-ログがChromeに比べて見にくいです"><a href="#Q-ログがChromeに比べて見にくいです" class="headerlink" title="Q: ログがChromeに比べて見にくいです"></a>Q: ログがChromeに比べて見にくいです</h3><hr><p><strong>A: Chromeの開発者コンソールはたいていのプログラミング言語のデバッグ環境よりも圧倒的に良いので諦めましょう。</strong></p><h2 id="データベース"><a href="#データベース" class="headerlink" title="データベース"></a>データベース</h2><h3 id="Q-DBのトランザクション制御はdatabase-sqlのBegin-つかう？"><a href="#Q-DBのトランザクション制御はdatabase-sqlのBegin-つかう？" class="headerlink" title="Q: DBのトランザクション制御はdatabase/sqlのBegin()つかう？"></a>Q: DBのトランザクション制御は<code>database/sql</code>の<code>Begin()</code>つかう？</h3><hr><p>直接間接問わず、最終的にはこのメソッドでトランザクションを制御することになるでしょう。</p><p><a href="https://github.com/jmoiron/sqlx/blob/3a411660be52b3236199fbfe1919f515cfc1ca32/sqlx.go#L343" target="_blank" rel="noopener">sqlxも内部では<code>Begin()</code>を使っています</a>し、<a href="https://github.com/jinzhu/gorm/blob/a6b790ffd00da9beddc60a0d2d5b9e31f03a3ffd/main.go#L535" target="_blank" rel="noopener">gormもsqlパッケージの<code>BeginTx()</code>を使っています</a>。便利ライブラリを使っても最終的には<code>database/sql</code>にたどり着きます。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>何か困ったことはないですか？と自社のチャットやら某コミュニティに投げて飛んで来た質問とか困った事例とかについては一通り回答を書いたりした、というのが今の状況です。コンパイラでエラーになるものはここでは入れてはなくて、文法を学んで、じゃあそれを組み合わせてどう使おう、というものだけにひとまず限定しています。</p><p>もちろん、これをまとめたあとにもいくつか質問が飛んだりしていて、入れたいものはたくさんありますが、ウェブで技術ブログという体裁で出すのは分量的にこれ以上は厳しいかなぁ、という気もしますので、今後どうやってまとめていくかはまた考えたいと思います。</p><h1 id="参考文献とか他のおすすめ"><a href="#参考文献とか他のおすすめ" class="headerlink" title="参考文献とか他のおすすめ"></a>参考文献とか他のおすすめ</h1><ul><li><a href="http://tmrts.com/go-patterns/" target="_blank" rel="noopener">http://tmrts.com/go-patterns/</a></li><li><a href="https://medium.com/eureka-engineering/go-beginner-3bb95e0790da" target="_blank" rel="noopener">https://medium.com/eureka-engineering/go-beginner-3bb95e0790da</a> </li><li><a href="https://qiita.com/shibukawa/items/16acb36e94cfe3b02aa1" target="_blank" rel="noopener">https://qiita.com/shibukawa/items/16acb36e94cfe3b02aa1</a>: 昔書いたオブジェクト指向なプログラミング言語のユーザー観点での記事</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;他の言語になれた人が、初めてGoを書いた時にわかりにくいな、と思った部分はどういうところがあるのか、難しいポイントはどこか、という情報を自分の経験や、会社の内外の人に聞いたりしてまとめてみました。まだまだたくさんあるのですが、多すぎるのでまずはこんなところで。コンテナで開発
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>アルバイト生から見たフューチャーのTIG DXユニット</title>
    <link href="https://future-architect.github.io/articles/20190712/"/>
    <id>https://future-architect.github.io/articles/20190712/</id>
    <published>2019-07-12T00:00:00.000Z</published>
    <updated>2019-07-11T15:20:56.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="導入"><a href="#導入" class="headerlink" title="導入"></a>導入</h2><p>はじめまして。</p><p>2019/7/1にFutureへ新卒入社した棚井龍之介と申します。</p><p>現在は会社の新人研修に誠意取り組んでおります。</p><p>大学を卒業してから入社するまでの期間、私は Future の TIG DXユニットにアルバイトとして参加しました。</p><blockquote><p>TIG: Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。<br>DXユニット: TIGの中にありデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</p></blockquote><p>アルバイトの視点から見た「Future ってこんな会社なんだ」について紹介いたします。</p><h2 id="筆者スキルセット"><a href="#筆者スキルセット" class="headerlink" title="筆者スキルセット"></a>筆者スキルセット</h2><ul><li>TCP/IP の授業を受けて、IT 分野に興味を持ちました</li><li>大学時代の４年から、 AI 系ベンチャー企業で５か月ほど長期アルバイトに参加しました</li><li>長期アルバイト中に触った技術<ul><li>言語<ul><li>Python</li></ul></li><li>インフラ寄り<ul><li>Docker</li><li>AWS</li></ul></li><li>OS<ul><li>MacOS</li></ul></li></ul></li></ul><h2 id="Future-入って分かったこと"><a href="#Future-入って分かったこと" class="headerlink" title="Future 入って分かったこと"></a>Future 入って分かったこと</h2><h3 id="開発に使う技術"><a href="#開発に使う技術" class="headerlink" title="開発に使う技術"></a>開発に使う技術</h3><ul><li>Go や Terraform など、イケイケのweb系企業が使いそうな技術をFutureでも使います</li></ul><p>Future といえども ITコンサル業界の一角を占めるお堅い会社であり、開発言語は「Java」がメインになると思っていました。しかしながら、初めに受けたタスクは「Node.js で記述されたアプリケーションを Go に書き換えて欲しい」というものでした。「ある案件で利用する言語をなるべくGoで統一したい」という方針から生じたタスクだったので、私のみならず、他のアルバイト生もGoで開発していました。</p><p>私はサーバサイト側のタスクとして Go と Terraform を使いましたが、フロントサイド側のアルバイト生は Vue.js を使い画面コンポーネントを作成していました。</p><p>サーバ、フロントへのアサインは完全に「案件ベース」であり、自分の希望する技術とアサイン先で必要な技術がマッチすれば、タイミング次第ですぐに新しい技術へスイッチできます。私の場合、初めはアプリケーション開発がメインでしたが、インフラにも興味があることを上司に伝えたところ、担当タスクが済んだらすぐに Terraform を利用したタスクへと移動できました。</p><p>アルバイト中の経験から、Future-TIGでは、案件とタイミング次第で未経験の分野への挑戦権を得られると実感しました。経験の少ない段階では「どの分野に適性があるか」は予測できないので、「やりたい技術を意思表明すれば挑戦させてくれる文化」は「手を動かすエンジニアになりたい」私にはピッタリでした。</p><h3 id="評価基準について"><a href="#評価基準について" class="headerlink" title="評価基準について"></a>評価基準について</h3><ul><li>Future-TIG では、技術力が高い人が評価されると思います</li></ul><p>Future には、アルバイトとして参加している大学生から40歳手前で転職された方まで、多様なバックグラウンドを持つ技術者がいます。それを反映して、Futureでは「○○さん」と、さん付けで名前を呼ぶ文化があります。年齢を問わずにチームが結成されるので、年下の上司や年上の部下などいくらでもいました。しかしながら、それを気にする社員はいませんでした。</p><p>評価軸となるのは「どんなアウトプットを出したか」という点に絞られるので、「何歳か」「男性か女性か」「出勤しているか<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>」という技術力とは関係しない部分は、評価項目に上がりません。成果物で評価してもらいたい技術者には最適な環境です。その代償として、未経験の分野ではなく、ある程度知見が貯まった技術を使い続けたいという人には、かなりつらい環境になると思います。</p><p>開発の進め方は「ブラウザで検索し、公式ドキュメントを理解して、実装する」の繰り返しであり、このサイクルをいかに早く回せるかにより、本人の技術力が評価されます。この評価方法は、AI系ベンチャー企業と Future のどちらでも全く同じでした。</p><h3 id="キャリア入社について"><a href="#キャリア入社について" class="headerlink" title="キャリア入社について"></a>キャリア入社について</h3><p>Futureでは、自分の観測範囲で半数近くがキャリア入社された方でした。キャリア入社された方々にお話を伺うと、</p><ul><li>ユーザー企業の情シスでITに触り、もっと開発側に近づきたいと思った</li><li>前の企業ではスキルアップに限界を感じ、レベルの高い技術者のいる会社へ入りたいと思った</li></ul><p>という旨の転職理由を話されていました。</p><p>キャリアで入社される方の場合「より高いレベルの環境を目指した結果、その選択肢の1つとして Future があった」というケースの人が、私の周りには多めでした。技術への関心が高い人が自然に集まるという Future の文化は、最先端の技術を次々と実装する社風ともリンクしています。「できる人、もっとできるようになりたい人」がキャリアとして Future にジョインされるので、基本的に意識高めの人が多いと感じました。</p><h2 id="私が担当したタスク"><a href="#私が担当したタスク" class="headerlink" title="私が担当したタスク"></a>私が担当したタスク</h2><ul><li>Go で GCP の Billing 情報を通知するアプリケーションを2タイプ作成(近日 OSS として公開予定)</li><li>設計思想の異なる２つの Terraform スクリプトを１つに統合</li></ul><h3 id="Go-でのアプリケーション開発-×２"><a href="#Go-でのアプリケーション開発-×２" class="headerlink" title="Go でのアプリケーション開発　×２"></a>Go でのアプリケーション開発　×２</h3><p>Web界隈で大人気の Go を使い、GCP の Billing 情報を通知するアプリケーションを作成しました。アルバイトとしてアサインされた段階では Go 言語の経験は一切ありませんでした。しかしながら、公式ドキュメントと試行錯誤をつづけることにより、実際の案件で利用するアプリケーションの完成まで漕ぎつけました。</p><p>アルバイト生である私の書いたコードでもしっかりとレビューして頂き、そのために時間を割いて頂いた社員の方々には感謝の気持ちでいっぱいです。本当にありがとうございました。</p><p>アルバイト生が開発するコードであっても、全て実案件に関わっている（コードを納品するお客様がいる）ので、先輩方は本気でコードレビューしてくれます。したがって、「実案件で通用するレベルまでコード力を向上させたい」という大学生には、Future でのアルバイトを是非ともお勧めしたいです。</p><h3 id="Terraform-スクリプトの統合"><a href="#Terraform-スクリプトの統合" class="headerlink" title="Terraform スクリプトの統合"></a>Terraform スクリプトの統合</h3><p>2つの Terraform スクリプトを１つに統合するタスクを担当しました。</p><p>現実にある１つのインフラは動いているが、それを構成管理する Terraform スクリプトは２つ存在する<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>という恐ろしい状況から、インフラ実態を一切操作せずにスクリプトのみを統合するというタスクを進めました。</p><p>設計の異なる Terraform スクリプトを統合するには、片方のインフラ定義を、現状と矛盾しない形で、もう一方へと「移植する」必要があります。また、同時に移植が問題なく成功したことを「証明する」必要もあります。この「移植」と「成功の証明」を何とか達成したことが、私のアルバイト期間における最大の実績だと思っています。</p><p>Terraform スクリプトの書き方が異なれば、terraform apply コマンドで生成される tfstateファイルの定義も異なった記述になります。したがって、移植を達成するには</p><ol><li>Terraform スクリプトの記述を、片方に矛盾なく移植する</li><li>tfstateファイルの内容を、移植した Terraform スクリプトに完全に沿う形で書き換える</li></ol><p>という２つの壁を同時に乗り越える必要があり、私はこれを突破しました。</p><p>現在の私ならば、Terraformスクリプトの統合と tfstateファイルの書き換え程度ならそれほど難しいタスクではありません。この具体的な方法については技術的な需要があると認識しているので、別な場面でご紹介したいと考えています。</p><h4 id="「未経験でもインフラを希望したら、最先端の技術を利用し、かつ、とても難しいタスクを経験できた」"><a href="#「未経験でもインフラを希望したら、最先端の技術を利用し、かつ、とても難しいタスクを経験できた」" class="headerlink" title="「未経験でもインフラを希望したら、最先端の技術を利用し、かつ、とても難しいタスクを経験できた」"></a><strong>「未経験でもインフラを希望したら、最先端の技術を利用し、かつ、とても難しいタスクを経験できた」</strong></h4><p>技術力を向上させるには「技術的に困難な壁を突破する」経験が必要です。しかし、その分野に対して未経験な人では、なかなか難しいタスクを任せていただけません。しかし、Future でならば、「最先端技術の難しいところ」をアルバイト生であっても担当させて頂けます。むしろ、社員の方々はそれ以上に難しいタスクを次々に解決しています。</p><p>「手を動かすエンジニアとして活躍したい」と考えるエンジニアであれば、Future で働くことはプラス面が多いと感じました。</p><h2 id="まとめる"><a href="#まとめる" class="headerlink" title="まとめる"></a>まとめる</h2><p>アルバイトを通してFuture では…</p><ol><li>イケイケなWeb系企業が使うような最先端の技術を使っている<ul><li>市場価値を高く保てるので、将来的な転職に有利になる</li><li>最先端の難しいタスクを担当することで、技術力が急上昇する</li></ul></li><li>「技術力が高いこと」が評価される<ul><li>自主的に勉強する習慣や、ブログや講演で一般公開することが歓迎される</li><li>仕事と並行して、エンジニア界隈で知名度を上げられる</li></ul></li><li>技術を向上させたい人が社外からも集まってくる<ul><li>「勉強するのが基本」という人が集まってくるので、互いに教えあう文化がある</li><li>社員のバックグラウンドが多様で面白い</li></ul></li></ol><p>という3点の特徴があるのだなと理解できました。</p><p>現在の私は研修中の身ですが、1日も早く現場に復帰できるよう、誠意努力してまいります。</p><p>Future の先輩社員の皆様方、これからもよろしくお願い致します。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">社員補足: 現時点ではリモートフレンドリーではありますが、リモートファーストでは無いので、慣れるまでは出社を推奨しています。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">社員補足: 別のチーム（他社）が管理していたインフラ構築作業を弊社で巻き取ったために発生したイレギュラーな状態でした。</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;導入&quot;&gt;&lt;a href=&quot;#導入&quot; class=&quot;headerlink&quot; title=&quot;導入&quot;&gt;&lt;/a&gt;導入&lt;/h2&gt;&lt;p&gt;はじめまして。&lt;/p&gt;
&lt;p&gt;2019/7/1にFutureへ新卒入社した棚井龍之介と申します。&lt;/p&gt;
&lt;p&gt;現在は会社の新人研修に誠意取
      
    
    </summary>
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="アルバイト報告" scheme="https://future-architect.github.io/tags/%E3%82%A2%E3%83%AB%E3%83%90%E3%82%A4%E3%83%88%E5%A0%B1%E5%91%8A/"/>
    
  </entry>
  
  <entry>
    <title>GCPのIAMポリシー周りでドハマりした話</title>
    <link href="https://future-architect.github.io/articles/20190708/"/>
    <id>https://future-architect.github.io/articles/20190708/</id>
    <published>2019-07-07T23:33:22.000Z</published>
    <updated>2019-07-11T14:46:30.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Technology Innovation GroupのDXユニット所属の<a href="https://twitter.com/famipapamart" target="_blank" rel="noopener">村田</a>と申します！<br>DXユニットとはデジタルトランスフォーメーションに関わる仕事を主に推進していくチームです。<br>私は現在<a href="https://www.future.co.jp/about_us/#tab-iot" target="_blank" rel="noopener">Future IoT</a>プロジェクトに携わっており、最近はもっぱらクラウドインフラに従事しています。</p><p>メインの仕事は複数のGoogle Cloud Platform(以下、GCP)プロジェクトとそれぞれの環境（Production/Staging/Developmentなど）の構築・運用です。<br>この中で個人的にとても面白いと思った知見を得たので「これはぜひブログにしよう！」といま筆を走らせています。</p><h1 id="クラウドインフラの使命"><a href="#クラウドインフラの使命" class="headerlink" title="クラウドインフラの使命"></a>クラウドインフラの使命</h1><p>クラウドインフラと一言で言っても意味する範囲はとても広いですが、私がこのブログで紹介する内容はどちらかというと地味かもしれません。</p><p>私が今日紹介したいのは、GCPの「IAMポリシー管理の重要性」です。</p><h2 id="Infrastructure-as-a-Code-の徹底"><a href="#Infrastructure-as-a-Code-の徹底" class="headerlink" title="Infrastructure as a Code の徹底"></a>Infrastructure as a Code の徹底</h2><p>Infrastructure as a Code というものの概念については昨今多くの方が自分なりの理解を持ち、それを実務に活かすべく実践するフェーズに至っているかと思いますが、私のプロジェクトも例外ではありません。</p><p>たとえば私の現在のプロジェクトではTerraformを利用してGCPリソースを管理しており、その運用や何をどこまでスクリプト化したり自動化するかについて日々メンバーと頭を悩ませています。<br>(Cloud Deployment Managerを使わないの？という声も聞こえてきそうですが、色々な事情がありメインのツールはTerraformを利用しています)</p><p>さて、話を元に戻しますが、この「リソースをスクリプト管理する」ということには大事な前提があります。<br>それはすなわち「スクリプトと実リソースにズレが無い」ということです。</p><p>個人で扱うGCPプロジェクトならまだしも、複数人（しかも複数ベンダー）が同時に扱うプロジェクトともなればズレを無くし整合性を保つのにも一苦労です。</p><p>もちろん、本番環境やステージング環境であればインフラチームとアプリケーション開発チームとの棲み分けをしっかり行うでしょうから、上記のような状態にはならないでしょう。</p><p>しかし、初期の開発環境や負荷テスト環境などは、アプリチーム側でもサンドボックス的にある程度自由にインフラ操作をしたいという要望もあり、ではこの権限を付与して…とついなってしまいがちです。</p><p>クラウドな時代ですし、リソースに変更を加えたいときはコンソールでポチッとやれてしまいます。<br>これはクラウドのメリットであり大きな強みです。<br>ただその一方で、今回推し進めたい Infrastructure as a Code にとっては連絡なしにいつの間にかリソースが増えているといった邪悪な敵にもなり得ます。</p><p>インフラスクリプトを管理するチームと実際にリソースを利用するチームが別で、互いのコミュニケーション不足からスクリプトと実リソースが乖離、どんどんカオス化していく…という状況は想像に難くないはずです。</p><h2 id="IAMポリシー管理の重要性"><a href="#IAMポリシー管理の重要性" class="headerlink" title="IAMポリシー管理の重要性"></a>IAMポリシー管理の重要性</h2><p>カオスな状況を打開するための施策は様々考えられますが、私が今回選択したポリシーは「IAMポリシー管理を徹底する」という至極普通な当たり前のものでした。<br>基本に忠実であることは非常に大事だなと日々感じています</p><p>同時に、初期の開発環境はIAMポリシーを緩め、だれでもインフラ操作を行える反面、この段階ではTerraform運用を行わないという割り切りをしました。<br>その次の開発フェーズからはアプリチームの申請ベースでTerraform化を行いしっかり管理するようなフローを整えました。</p><p>IAMポリシー管理と運用フローの整備を徹底することで予期せぬ変更がそもそも起こりえない状況を作り出し、元々推し進めたかった Infrastructure as a Code の実現に少しずつ近づけていきました。</p><h1 id="今回ハマったポイント-Cloud-Functionとの闘い"><a href="#今回ハマったポイント-Cloud-Functionとの闘い" class="headerlink" title="今回ハマったポイント Cloud Functionとの闘い"></a>今回ハマったポイント <del>Cloud Functionとの闘い</del></h1><p>と、ここまで長い前置きとなりましたが、やっとメインネタです。<br>IAMポリシーの管理うんぬん、みたいな話をしてきましたが、別に「管理が大変なんじゃ」とか「管理ｗカオスｗｗ」とか言いたいわけではないです。笑</p><p>最初に結論を言ってしまうのですが、「GCPにおけるオーナー権限は最強ではない」という知見を得ました。<br>これがこのエントリーで一番伝えたいことで、IAMポリシー周りの仕事を進める中で得た私の一番の知見です。</p><h2 id="Google管理サービスアカウントとは？"><a href="#Google管理サービスアカウントとは？" class="headerlink" title="Google管理サービスアカウントとは？"></a>Google管理サービスアカウントとは？</h2><p>一瞬話は変わりますが、皆さんGCPのGoogle管理サービスアカウントってご存知ですか？<br><img src="/images/20190708/photo_20190708_01.png"><br>↑↑<br>これですね。</p><p><a href="https://cloud.google.com/iam/docs/service-accounts?&_ga=2.185771177.-1847946762.1548816048#google-managed_service_accounts" target="_blank" rel="noopener">公式ページ</a>によると…</p><blockquote><p>Google 管理サービス アカウント<br>ユーザーが管理するサービス アカウントに加えて、プロジェクトの IAM ポリシーまたは GCP Console にいくつかの追加サービス アカウントが表示されることがあります。これらのサービス アカウントは Google が作成し所有しています。これらのアカウントはさまざまな Google サービスを表し、各アカウントには GCP プロジェクトにアクセスするための IAM の役割が自動的に付与されます。</p></blockquote><p>…とあります。<br>書いてある通りですが、GCP側が利用するサービスに応じて自動的に追加してくれるIAMポリシーです。<br>例えば上写真にある<code>Cloud Functions Service Agent</code>とはその名の通りCloud Functionsを利用する際に自動的に追加されます。</p><p>これらのサービスアカウントは各GCPサービスを動作させるために必要なもので、このIAMポリシーがなければアプリケーション動作時に<code>Permission Denied Error</code>等発生してしまいます。</p><h2 id="IAMポリシーって好き勝手消せるんです"><a href="#IAMポリシーって好き勝手消せるんです" class="headerlink" title="IAMポリシーって好き勝手消せるんです"></a>IAMポリシーって好き勝手消せるんです</h2><p>オーナー権限を持っていればIAMポリシーの追加・編集・削除が自由に行えるのは皆さんご存知の通りかと思いますが、これはGoogle管理サービスアカウントも例外ではありません。<br>そうなんです、 <strong>「サービスの動作に必要な自動作成されるアカウント」も自由に編集・削除できてしまう</strong> のです。</p><h2 id="深い沼でした"><a href="#深い沼でした" class="headerlink" title="深い沼でした"></a>深い沼でした</h2><p>深い沼でした（2回目）<br>というのも、このGoogle管理サービスアカウント、新規にプロジェクトを作成して最初に該当サービスを利用する際に作成されますが、その後は自動的に作成されることはありません。<br>一度編集・削除してしまったら最後、元の状態へ復元するためには手動で復旧するしかないのです。</p><p>今回私が引き継いだとあるGCP環境では、IAMポリシー整理と称し様々な「不要と思われる」ポリシーの削除が実施されていました。<br>みなさんもうお気づきかと思いますが、この「不要と思われる」というのが不要ではなかったというオチです。</p><p>その環境のIAMポリシーからはCloud Functions関連のポリシーが一切消失していました。<br>そうとは知らずにCloud Functionsのデプロイを試みた私は深い沼にハマっていきました…</p><p>それもそのはず。</p><p>自動作成されるGoogle管理サービスアカウントは文字通り自動で作成されているのであって、明示的にその存在を意識して作業を行うことはあまり多くありません。<br>（この一件のおかげでいまではGoogle管理サービスアカウントもしっかり気にかけるようになりました）</p><p>Cloud Functionsの実行はエラーに阻まれ成功せず、そこから切り分けがスタートしました。</p><p>余談ですが、この時発生したエラーはシンプルなタイムアウトエラーでした。<br>真因は権限エラーだったのですが、<code>Permission denied</code>というエラーメッセージが出てくれず、切り分けが難航しました…</p><h2 id="オーナー権限は最強ではない"><a href="#オーナー権限は最強ではない" class="headerlink" title="オーナー権限は最強ではない"></a>オーナー権限は最強ではない</h2><p>調査の中で2種類のGoogle管理サービスアカウントが消失していることに気づきました。<br>ひとつは<code>PROJECT_ID@appspot.gserviceaccount.com</code>です。<br><a href="https://cloud.google.com/functions/docs/concepts/iam?hl=ja" target="_blank" rel="noopener">公式ページ</a>では以下のように説明されています。</p><blockquote><p>ランタイム サービス アカウント<br>実行時に、Cloud Functions ではプロジェクトの編集者の役割を持つサービス アカウント <a href="mailto:PROJECT_ID@appspot.gserviceaccount.com" target="_blank" rel="noopener">PROJECT_ID@appspot.gserviceaccount.com</a> を使用します。このサービス アカウントの役割を変更して、実行中の関数に対する権限を制限または拡張することができます。</p></blockquote><p>もう一つは<code>PROJECT_ID@gcf-admin-robot.iam.gserviceaccount.com</code>です。<br>これについては日本語のドキュメントには記載がなく(2019/07/02現在)、<a href="https://cloud.google.com/functions/docs/concepts/iam" target="_blank" rel="noopener">英語版</a>を参照する必要がありました。<br>以下のような記載があります。</p><blockquote><p>Cloud Functions service account<br>For administrative actions on your project during the creation, updating, or deletion of functions, the Cloud Functions service uses the Google Cloud Functions service agent service account (<a href="mailto:service-PROJECT_NUMBER@gcf-admin-robot.iam.gserviceaccount.com" target="_blank" rel="noopener">service-PROJECT_NUMBER@gcf-admin-robot.iam.gserviceaccount.com</a>).</p></blockquote><blockquote><p>By default, this service account has the cloudfunctions.serviceAgent role on your project. Creating, updating, and deleting functions may fail if you change this account’s permissions.</p></blockquote><p>私は手動で上記2つのGoogle管理サービスアカウントの復旧を試みました。<br><code>PROJECT_ID@appspot.gserviceaccount.com</code>は<code>編集者</code>ロールが付与されていればよいのでコンソール画面からIAMポリシーを追加しました。<br>問題はもう一つの方でした。<br><code>PROJECT_ID@gcf-admin-robot.iam.gserviceaccount.com</code>には<code>Cloud Functions Service Agent</code>のロールが付与されている必要があるのですが、このロールがコンソールから選択できなかったのです。</p><p>gcloudコマンド経由で問題なく該当ロールの付与はできるのですが、当時私は切り分けとして「<code>PROJECT_ID@gcf-admin-robot.iam.gserviceaccount.com</code>に<code>オーナー</code>権限を付与する」ということを行いました。</p><p>オーナー権限は最強だろうと思っていたのです。<br>権限周りでハマっているのであればとりあえずオーナー付与しちゃえば突破できるはず、と。</p><p>違いました。<br>Google管理サービスアカウントに付与されるロール群、サービスエージェント達はオーナー権限では持っていない特殊な権限を持っていたのです。</p><p>gcloud コマンドを使って<code>Cloud Functions Service Agent</code>に付与されている権限を見てみます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud iam roles describe roles/cloudfunctions.serviceAgent</span><br></pre></td></tr></table></figure><p>下記が結果です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">description: Gives Cloud Functions service account access to managed resources.</span><br><span class="line">etag: AA==</span><br><span class="line">includedPermissions:</span><br><span class="line">- clientauthconfig.clients.list</span><br><span class="line">- cloudfunctions.functions.invoke</span><br><span class="line">- firebasedatabase.instances.get</span><br><span class="line">- firebasedatabase.instances.update</span><br><span class="line">- iam.serviceAccounts.getAccessToken</span><br><span class="line">- iam.serviceAccounts.signBlob</span><br><span class="line">- pubsub.subscriptions.consume</span><br><span class="line">- pubsub.subscriptions.create</span><br><span class="line">- pubsub.subscriptions.delete</span><br><span class="line">- pubsub.subscriptions.get</span><br><span class="line">- pubsub.subscriptions.getIamPolicy</span><br><span class="line">- pubsub.subscriptions.list</span><br><span class="line">- pubsub.subscriptions.setIamPolicy</span><br><span class="line">- pubsub.subscriptions.update</span><br><span class="line">- pubsub.topics.attachSubscription</span><br><span class="line">- pubsub.topics.create</span><br><span class="line">- pubsub.topics.get</span><br><span class="line">- resourcemanager.projects.get</span><br><span class="line">- resourcemanager.projects.getIamPolicy</span><br><span class="line">- serviceusage.quotas.get</span><br><span class="line">- serviceusage.services.disable</span><br><span class="line">- serviceusage.services.enable</span><br><span class="line">- storage.buckets.get</span><br><span class="line">- storage.buckets.update</span><br><span class="line">name: roles/cloudfunctions.serviceAgent</span><br><span class="line">stage: ALPHA</span><br><span class="line">title: Cloud Functions Service Agent</span><br></pre></td></tr></table></figure><p>これとオーナー権限を比べてみます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud iam roles describe roles/owner</span><br></pre></td></tr></table></figure><p>こっちはあまりにも結果が多いので割愛します。<br>気になった方は調べてみてください。</p><p>diffを取ってみると、<code>Cloud Functions Service Agent</code>にあってオーナー権限では持っていない役割があることがわかりました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- iam.serviceAccounts.getAccessToken</span><br><span class="line">- iam.serviceAccounts.signBlob</span><br><span class="line">- storage.buckets.get</span><br><span class="line">- storage.buckets.update</span><br></pre></td></tr></table></figure><p>今回のエラーの原因は<code>iam.serviceAccounts.getAccessToken</code>でした。</p><p>(<code>storage.buckets.get</code>あたりがオーナー権限でやれないのはこの記事を書いてて初めて知りました笑)</p><p>私たちの動かそうとしていたCloud FunctuionsのプログラムはBigQueryへのアクセスを行っていました。<br>詰まっていたのはBigQueryへの<a href="https://cloud.google.com/bigquery/docs/authorization?hl=ja" target="_blank" rel="noopener">APIリクエストの承認</a>だったということが判明しました。</p><blockquote><p>このガイドでは、Google BigQuery API にアクセス トークンを提供する方法を説明します。BigQuery クライアント ライブラリを使用している場合は自動的に実行されるため、このガイドに従う必要はありません。</p></blockquote><p>という記載があるのですが、まさにこの<a href="https://cloud.google.com/bigquery/docs/reference/libraries?hl=ja" target="_blank" rel="noopener">BigQueryクライアントライブラリ</a>を利用したプログラムを実装していました。</p><p>BigQueryクライアントライブラリ内で行われているアクセストークンの取得が、<code>iam.serviceAccounts.getAccessToken</code>の欠如により失敗するというのが真の原因でした。</p><h2 id="大切な学び"><a href="#大切な学び" class="headerlink" title="大切な学び"></a>大切な学び</h2><p>私は今回の一件で2つのとても大切な学びを得ました。</p><ul><li>オーナー権限は最強ではない</li><li>Googleサービスによって自動作成されたIAMポリシーは消さない（これは本当に大事）</li></ul><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>長文読んで頂きありがとうございました！<br>クラウドインフラについての思いの話から始まり、その中で得た超具体的な知見の話に至るまで、伝えたかったことはしっかり言葉にできました。</p><p>何事も実物を見ずに判断してはいけないとよく言いますが、まさに今回の事例がそれだなーと実感しています。<br>GCPにおいて、オーナー権限が最強ではない、というのは覚えておいて損のない知見かと思いますので、頭の片隅に留めておいてもらえるとこの記事自身もそれを書いた私もとても喜びます。</p><p>この記事が少しでも皆さんの役にたてば幸いです。</p><p>では、これからも<a href="https://future-architect.github.io/">Future Tech Blog</a>をよろしくお願いします！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、Technology Innovation GroupのDXユニット所属の&lt;a href=&quot;https://tw
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
  </entry>
  
  <entry>
    <title>マネージャーがうれしいRedmineデータのグラフ表示方法を公開します！！（Metabase編） </title>
    <link href="https://future-architect.github.io/articles/20190703/"/>
    <id>https://future-architect.github.io/articles/20190703/</id>
    <published>2019-07-03T00:00:00.000Z</published>
    <updated>2019-07-02T14:16:53.156Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20190703/photo_20190703_01.jpeg"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。近藤です。<br>みなさん、Redmineを使っていますか？<br>私は使っています。Redmineはタスクをチケット管理する上で便利ですよね。</p><p>一方で、Redmineにはデータの可視化機能が標準で搭載されていないという課題があります。<br>例えばこれが、標準のサマリ画面。グラフがないから傾向とか分かりづらいんですよね。<br><img src="/images/20190703/photo_20190703_02.png" style="border:solid 1px #000000"><br>参考：<a href="http://www.redmine.org/projects/redmine/issues/report" target="_blank" rel="noopener">http://www.redmine.org/projects/redmine/issues/report</a></p><p>これを何とかしようと、<a href="https://future-architect.github.io/articles/20160920/">以前の投稿</a>では、Kibana+Timelionを使ってRedmineデータをグラフ表示する方法を紹介しました。</p><p>ただ、Kibanaを利用する場合、一度Elasticsearchにデータを登録しないといけないので、手間なのですよね。。</p><p>そこで、本日はOSSのBIツールである<a href="https://metabase.com/" target="_blank" rel="noopener">Metabase</a>を利用して、Redmineのデータをグラフ表示する方法を紹介します。</p><p>例えば、Metabaseを利用すると、チケットの発生件数とクローズ件数の推移を簡単に表示することができます。<br><img src="/images/20190703/photo_20190703_03.png" style="border:solid 1px #000000"></p><p>構築する環境は下記の通り。Kibana+Timelionで構築した環境よりもシンプルですね。<br><img src="/images/20190703/photo_20190703_04.png" style="border:solid 1px #000000" class="img-middle-size"></p><p>では実際にやってみましょう。</p><p>なお、下記を前提としています。</p><ul><li><strong>Windows</strong>環境で構築</li><li><strong>Redmineのデータベース(MySQL)に直接接続</strong>する</li></ul><h2 id="大まかな流れ"><a href="#大まかな流れ" class="headerlink" title="大まかな流れ"></a>大まかな流れ</h2><p>下記の手順でグラフを表示します。</p><ol><li>Javaのインストール</li><li>Metabaseのインストール</li><li>グラフ表示</li></ol><h2 id="1-Javaのインストール"><a href="#1-Javaのインストール" class="headerlink" title="1.Javaのインストール"></a>1.Javaのインストール</h2><p>まず、MetabaseではJavaを利用するため、事前にインストールします。</p><p>お使いの環境にあったインストーラをご利用ください。<br>なお、私の場合は、下記のインストーラを利用しました。</p><p>◆Java SE DevelopmentダウンロードURL<br><a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a><br>の「jdk-8u211-windows-x64.exe」</p><h2 id="2-Metabaseのインストール"><a href="#2-Metabaseのインストール" class="headerlink" title="2. Metabaseのインストール"></a>2. Metabaseのインストール</h2><p>次に、Metabaseをダウンロードします。</p><p>◆MetabaseダウンロードURL<br><a href="https://metabase.com/start/jar.html" target="_blank" rel="noopener">https://metabase.com/start/jar.html</a><br>→「Download Metabase.jar」をクリックします。すると「metabase.jar」がダウンロードされます。</p><p>そして、「c:\metabase」というフォルダを作成し、ダウンロードしたファイルを配置します。</p><p>最終的には下記のようなフォルダ構成になります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c:\metabase</span><br><span class="line">└ metabase.jar</span><br></pre></td></tr></table></figure><h2 id="3-グラフ表示"><a href="#3-グラフ表示" class="headerlink" title="3. グラフ表示"></a>3. グラフ表示</h2><p>さあ、グラフ表示するにあたり、まずは、Metabaseを起動します。</p><p>コマンドプロンプトで <code>c:\metabase</code> へ移動し、<code>java -jar metabase.jar</code> を実行します。<br><img src="/images/20190703/photo_20190703_05.png"></p><p>しばらくすると、下記のように<code>Metabase Initialization COMPLETE</code>と表示されます。<br><img src="/images/20190703/photo_20190703_06.png" style="border:solid 1px #000000"></p><p>これでMetabaseが起動しました。<br>ブラウザで <code>http://localhost:3000</code> を開きます。</p><p>すると下記のような画面が表示されます。<br><img src="/images/20190703/photo_20190703_07.png" style="border:solid 1px #000000"></p><p>「開始しましょう」をクリックします。<br>すると下記のような画面が表示されます。<br><img src="/images/20190703/photo_20190703_08.png" style="border:solid 1px #000000"></p><p>姓名、メールアドレス、パスワード、組織名を入力します。<br><img src="/images/20190703/photo_20190703_09.png" style="border:solid 1px #000000"></p><p>そして、「次へ」をクリック。<br>すると、下記のような画面が表示されます。<br><img src="/images/20190703/photo_20190703_10.png" style="border:solid 1px #000000"></p><p>「使用するデータベースのタイプを選択する」から、データベースタイプを選択。<br>私の場合は、「MySQL」を選択しました。<br>すると、下記のように表示されるので、<br><img src="/images/20190703/photo_20190703_11.png" style="border:solid 1px #000000"></p><p>データベースの種類、名前、ホスト、ポート、データベース名、ユーザ名、パスワードを入力。<br>私の場合は、名前を「redmine」にしました。<br><img src="/images/20190703/photo_20190703_12.png" style="border:solid 1px #000000"></p><p>そして、「次へ」をクリックします。<br>すると、下記のような画面が表示されます。<br><img src="/images/20190703/photo_20190703_13.png" style="border:solid 1px #000000"></p><p>「次へ」をクリックしましょう。<br>すると、下記のような画面が表示されます。</p><img src="/images/20190703/photo_20190703_14.png" style="border:solid 1px #000000"><p>右上の「照会する」をクリックします。<br><img src="/images/20190703/photo_20190703_15.png" style="border:solid 1px #000000"></p><p>「ネイティブクエリ」をクリック。<br><img src="/images/20190703/photo_20190703_16.png" style="border:solid 1px #000000"></p><p>「データベースを選択する」から、先ほど入力したデータベースを選択しましょう。<br>（私の場合は、「redmine」）<br><img src="/images/20190703/photo_20190703_17.png" style="border:solid 1px #000000"></p><p>次に、チケットの発生件数とクローズ件数を取得する下記のSQLを水色のエリアに貼り付けます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">is1.created_on ymd</span><br><span class="line">, <span class="string">'open'</span> kbn</span><br><span class="line">, <span class="keyword">sum</span>(is2.id_count) id_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">date_format</span>(created_on, <span class="string">'%Y-%m-%d'</span>) <span class="keyword">as</span> created_on</span><br><span class="line">, <span class="keyword">count</span>(<span class="keyword">id</span>) id_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">issues</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line"><span class="keyword">date_format</span>(created_on, <span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">) is1</span><br><span class="line">, (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">date_format</span>(created_on, <span class="string">'%Y-%m-%d'</span>) <span class="keyword">as</span> created_on</span><br><span class="line">, <span class="keyword">count</span>(<span class="keyword">id</span>) id_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">issues</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line"><span class="keyword">date_format</span>(created_on, <span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">) is2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">is2.created_on &lt;= is1.created_on</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">is1.created_on</span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">is1.closed_on</span><br><span class="line">, <span class="string">'close'</span></span><br><span class="line">, <span class="keyword">sum</span>(is2.id_count) id_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">date_format</span>(closed_on, <span class="string">'%Y-%m-%d'</span>) <span class="keyword">as</span> closed_on</span><br><span class="line">, <span class="keyword">count</span>(<span class="keyword">id</span>) id_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">issues</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line"><span class="keyword">date_format</span>(closed_on, <span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">) is1</span><br><span class="line">, (</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="keyword">date_format</span>(closed_on, <span class="string">'%Y-%m-%d'</span>) <span class="keyword">as</span> closed_on</span><br><span class="line">, <span class="keyword">count</span>(<span class="keyword">id</span>) id_count</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">issues</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line"><span class="keyword">date_format</span>(closed_on, <span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">) is2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">is2.closed_on &lt;= is1.closed_on</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">is1.closed_on</span><br></pre></td></tr></table></figure><p>貼り付けました。<br><img src="/images/20190703/photo_20190703_18.png" style="border:solid 1px #000000"></p><p>そして、「回答を得る」をクリックすると、<br><img src="/images/20190703/photo_20190703_19.png" style="border:solid 1px #000000"></p><p>結果が表示されます。<br>更に、左下の「テーブル」をクリックして、<br><img src="/images/20190703/photo_20190703_20.png" style="border:solid 1px #000000"></p><p>「線」をクリックすると、<br><img src="/images/20190703/photo_20190703_21.png" style="border:solid 1px #000000"></p><p>出ましたね。<br>チケットの発生件数とクローズ件数の推移が表示されています。</p><p>右上の「エディターを非表示にする」をクリックすると<br><img src="/images/20190703/photo_20190703_22.png" style="border:solid 1px #000000"></p><p>グラフが大きくなりましたね。<br>グラフの線にカーソルを当てると、<br><img src="/images/20190703/photo_20190703_23.png" style="border:solid 1px #000000"></p><p>値が表示されますし、右側の「↓」をクリックすると、<br><img src="/images/20190703/photo_20190703_24.png" style="border:solid 1px #000000"><br>データのダウンロードも可能です。<br>便利ですね。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>今回は、チケットの発生件数とクローズ件数の推移をグラフで表示しました。<br>それ以外のグラフを簡単に追加することも可能です。<br>詳しくは下記のMetabaseユーザーガイドをご参照ください。</p><p>◆Metabaseユーザーガイド<br><a href="https://metabase.com/docs/latest/users-guide/start.html" target="_blank" rel="noopener">https://metabase.com/docs/latest/users-guide/start.html</a></p><p>いかがでしたでしょうか？RedmineをMetabaseと組み合わせることで、グラフ表示が可能になり、結果的にプロジェクト状況の把握が容易になります。</p><p>本記事が、皆様のプロジェクトマネジメントに役に立てば幸いです。</p><p>なお、今後私がブログを執筆する際は、EVM表示やメール配信、ダッシュボードの構築に関する方法を記載していく予定。</p><p>これらの記事が、みなさまにとって参考になりそうでしたら「いいね！」をクリックして頂けますと幸いです。執筆の励みになります。😃</p><p>今後ともよろしくお願い致します。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20190703/photo_20190703_01.jpeg&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。近藤で
      
    
    </summary>
    
      <category term="Management" scheme="https://future-architect.github.io/categories/Management/"/>
    
    
      <category term="Redmine" scheme="https://future-architect.github.io/tags/Redmine/"/>
    
      <category term="Metabase" scheme="https://future-architect.github.io/tags/Metabase/"/>
    
  </entry>
  
  <entry>
    <title>AWS Datalake Hands-on(2019 May)メモ</title>
    <link href="https://future-architect.github.io/articles/20190702/"/>
    <id>https://future-architect.github.io/articles/20190702/</id>
    <published>2019-07-02T00:00:00.000Z</published>
    <updated>2019-07-01T14:32:20.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AWS-Datalake-Hands-on-2019-May-メモ"><a href="#AWS-Datalake-Hands-on-2019-May-メモ" class="headerlink" title="AWS Datalake Hands-on(2019 May)メモ"></a>AWS Datalake Hands-on(2019 May)メモ</h1><p>2019/05/29にAWS Japanで行われたDataLakeについてのHands-onメモです。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li><a href="#0-はじめに">0.はじめに</a></li><li><a href="#1-参加の背景">1.参加の背景</a></li><li><a href="#2-手を動かす、その前に">2.手を動かす、その前に</a></li><li><a href="#3-ハンズオンでやったこと">3.ハンズオンでやったこと</a></li><li><a href="#4-まとめ">4.まとめ</a></li></ul><h2 id="0-はじめに"><a href="#0-はじめに" class="headerlink" title="0. はじめに"></a>0. はじめに</h2><h3 id="自己紹介"><a href="#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h3><p>はじめまして、Technology Innovation Groupの柳澤です。こちらのブログへ投稿するのは初めてなので、簡単に自己紹介させていただきます。</p><p>2018年の5月にFutureへ中途採用で入社した社会人6年目になります。前職のメーカー系SIerではフロント業務からオンプレのアプライアンスもいじるなんでも屋さんみたいな立ち回りをしていました。</p><p>Future入社後は業務でクラウドを触ったことがなかった状態で、GCPの運用やオンプレ→AWSのリフト案件の推進など、なかなか刺激的な経験を積んでいたらあっという間に1年経ってしまったという今日この頃です。</p><h3 id="DataLake-Hands-onセミナーについて"><a href="#DataLake-Hands-onセミナーについて" class="headerlink" title="DataLake Hands-onセミナーについて"></a>DataLake Hands-onセミナーについて</h3><p>基本的に<strong>ユーザ</strong>を主な対象としているセミナーで、30分程度の簡単な講義のあとに、ひたすら手を動かすハンズオンという二部形式で構成されています</p><p>あとから知ったのですが、昨年から始まった恒例のワークショップのようです。※開催報告の公式ページは<a href="https://aws.amazon.com/jp/blogs/news/20190529-aws-datalake-handson-seminor/" target="_blank" rel="noopener">こちら</a></p><p>また、参加者層としては、後述のハンズオンの進捗を見るにユーザの方が多かったのかなという印象でした。<br>(ハンズオンの分量が多かったものの、ハンズオン終了時時点で分量の半分まで到達できていた人が6割くらいだった印象です)</p><h2 id="1-参加の背景"><a href="#1-参加の背景" class="headerlink" title="1.参加の背景"></a>1.参加の背景</h2><p>あるプロジェクトでデータ分析基盤を開発することになり、その一環として</p><ol><li>データってどうやって集める？</li><li>集めたデータをどう使う？</li><li>集めたデータをどう使える状態にする？</li></ol><p>を知るために参加しました。</p><p>当日の講義の内容としては、以下のような簡単な座学の後に、ハンズオンに移ります。</p><ul><li>実際にハンズオンで手を動かして作るものの構成とその概要についての</li><li>なぜDatalake(DataLakeってなに？という話題も含めて)なのか</li></ul><h2 id="2-手を動かす、その前に"><a href="#2-手を動かす、その前に" class="headerlink" title="2.手を動かす、その前に"></a>2.手を動かす、その前に</h2><p>もともとユーザ向けのセミナーだったこともあり、技術的に複雑な説明などはありませんでした。</p><p>しかし、データレイクについては、その利点などについてしっかりできていなかった部分があったのでそれらを整理する意味でも有意義なものだったと思います。</p><p>説明のあった内容をざっくり要約すると以下の通りです。</p><h3 id="企業の保有するデータについて"><a href="#企業の保有するデータについて" class="headerlink" title="企業の保有するデータについて"></a>企業の保有するデータについて</h3><ul><li>いま現在も企業の保持するデータは増え続けている</li><li>しかもデータの形式や抽出要件も増える一方</li></ul><h3 id="要件が複雑化するデータに対して-RDSの場合"><a href="#要件が複雑化するデータに対して-RDSの場合" class="headerlink" title="要件が複雑化するデータに対して(RDSの場合)"></a>要件が複雑化するデータに対して(RDSの場合)</h3><ul><li>複雑化する要件に合わせてスキーマなどが増加するため、どんどん<strong>サイロ化が進む</strong></li><li>また、リアルタイム分析や<del>最近流行の</del>機械学習などの領域への対応が難しい</li></ul><h3 id="複雑化するデータへの対策としてのデータレイク"><a href="#複雑化するデータへの対策としてのデータレイク" class="headerlink" title="複雑化するデータへの対策としてのデータレイク"></a>複雑化するデータへの対策としてのデータレイク</h3><ul><li>上記の問題への対応策として、データレイクは非常に有効<ul><li>データレイクとは、構造にかかわらずデータをそのままの姿で保存可能な一元化されたリポジトリのこと</li></ul></li><li>データレイクを使用することの利点(例)としては<ul><li>前述の通り、データを保存する段階でスキーマの分割などが発生しないため、サイロ化が発生せず、データの一元管理が可能になる<ul><li>一元管理が可能になることでSSOT(詳しくは<a href="https://en.wikipedia.org/wiki/Single_source_of_truth" target="_blank" rel="noopener">このあたり</a>をご参照ください)として使用することが可能に</li></ul></li><li>データの保存場所に対してinput/outputが独立するため、それぞれ柔軟に手段を選定することができる</li></ul></li></ul><h2 id="3-ハンズオンでやったこと"><a href="#3-ハンズオンでやったこと" class="headerlink" title="3. ハンズオンでやったこと"></a>3. ハンズオンでやったこと</h2><p>座学に続いて、以下黙々と手を動かす時間が続きました。</p><ol><li>はじめの準備</li><li>アプリケーションログをリアルタイムで可視化する</li><li>2に加えてアラームの設定</li><li>アプリケーションログの永続化と長期間データの分析と可視化</li><li>クラウドDWHを使用したデータ分析</li><li>サーバレスでデータのETL処理</li></ol><p>使ったサービスは全部は以下の通りです。</p><table><thead><tr><th align="left">No</th><th align="left">内容</th><th align="left">使用サービス</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">はじめの準備</td><td align="left">VPC, EC2, CloudFormation, IAM</td></tr><tr><td align="left">2</td><td align="left">リアルタイムのアプリケーションログ可視化</td><td align="left">Elasticsearch Service</td></tr><tr><td align="left">3</td><td align="left">アラームの設定</td><td align="left">CloudWatch Lambda, Elasticsearch Service</td></tr><tr><td align="left">4</td><td align="left">アプリケーションログの永続化・長期間データの分析と可視化</td><td align="left">Kinesis Data Firehose, S3, Athena, QuickSight</td></tr><tr><td align="left">5</td><td align="left">クラウドDWHを使用したデータ分析</td><td align="left">Kinesis Data Firehose, S3, Athena, Redshift Spectrum, Quicksight</td></tr><tr><td align="left">6</td><td align="left">サーバレスでデータのETL処理</td><td align="left">Glue, Athena</td></tr></tbody></table><p>上記のサービスを使って最終的には</p><ul><li>バッチレイヤ(バッチ処理、あとからまとめて分析)</li><li>スピードレイヤ(リアルタイム処理、監視のアラートなど)</li></ul><p>の両面から監視・分析を実行できる環境を構築していきます。</p><p>イメージ図はこちら<br><img src="/images/20190702/photo_20190702_01.png"></p><h3 id="3-1-はじめの準備"><a href="#3-1-はじめの準備" class="headerlink" title="3-1. はじめの準備"></a>3-1. はじめの準備</h3><img src="/images/20190702/photo_20190702_02.png"><p>後続のログ分析に使うためのログを生成し続けるEC2インスタンスを作成します。</p><p>このEC2インスタンスおよび周辺の設定(VPCやSecurityGroupなど)はすでにCloudFormationのテンプレートが用意されており、実作業としてはテンプレートをS3に置いて、スタックの作成を実行するだけ、という感じでした。</p><p>ここまでは特筆すべきこともないのでさっくりいきます。</p><h3 id="3-2-リアルタイムのアプリケーションログ可視化"><a href="#3-2-リアルタイムのアプリケーションログ可視化" class="headerlink" title="3-2. リアルタイムのアプリケーションログ可視化"></a>3-2. リアルタイムのアプリケーションログ可視化</h3><img src="/images/20190702/photo_20190702_03.png"><p>続いて、スピードレイヤの構築を開始します。</p><p>前手順で作成したインスタンスで出力したログを</p><ul><li>fluentdでElasticsearch Service(以下、ESとします)へストリーミング</li><li>ESに付属しているKibana(←Kibanaのセットアップしなくていいのは楽！！)でグラフィカルにデータを確認</li></ul><p>することをしました。</p><p>できた画面は↑の画像内のスクリーンショットのような感じです。</p><h3 id="3-3-アラームの設定"><a href="#3-3-アラームの設定" class="headerlink" title="3-3. アラームの設定"></a>3-3. アラームの設定</h3><img src="/images/20190702/photo_20190702_04.png"><p>fluentd→ESの間に、CloudWatchLogs(Alarm)とLambdaを差し込むことで、リアルタイムのログ監視とアラームを設定します。</p><p>ここまでがスピードレイヤの構築です。</p><h3 id="3-4-アプリケーションログの永続化・長期間データの分析と可視化"><a href="#3-4-アプリケーションログの永続化・長期間データの分析と可視化" class="headerlink" title="3-4. アプリケーションログの永続化・長期間データの分析と可視化"></a>3-4. アプリケーションログの永続化・長期間データの分析と可視化</h3><img src="/images/20190702/photo_20190702_05.png"><p>ここからバッチレイヤの構築に入ります。</p><p>fluentdからKinesis Data Firehoseにもストリーミングを行い、保存先としてS3を指定します。</p><p>S3への保存によって長期間のデータ保管を可能にしたうえで、アドホックな分析を行うと同時にBIツールで可視化しました。</p><h3 id="3-5-アプリケーションログの永続化・長期間データの分析と可視化"><a href="#3-5-アプリケーションログの永続化・長期間データの分析と可視化" class="headerlink" title="3-5. アプリケーションログの永続化・長期間データの分析と可視化"></a>3-5. アプリケーションログの永続化・長期間データの分析と可視化</h3><img src="/images/20190702/photo_20190702_06.png"><p>3-4とは異なり、ストリーミングされたログをS3で永続化したうえで、DWHに読み込み分析し、BIツールで可視化しました。</p><h3 id="3-6-サーバレスでデータのETL処理"><a href="#3-6-サーバレスでデータのETL処理" class="headerlink" title="3-6. サーバレスでデータのETL処理"></a>3-6. サーバレスでデータのETL処理</h3><img src="/images/20190702/photo_20190702_07.png"><p>Glueを使い、サーバーレスでデータの加工処理をしました。</p><h2 id="4-まとめ"><a href="#4-まとめ" class="headerlink" title="4.まとめ"></a>4.まとめ</h2><h3 id="4-1-勉強になったこと-もう少し知りたかったこと"><a href="#4-1-勉強になったこと-もう少し知りたかったこと" class="headerlink" title="4-1.勉強になったこと/もう少し知りたかったこと"></a>4-1.勉強になったこと/もう少し知りたかったこと</h3><h4 id="勉強になったこと"><a href="#勉強になったこと" class="headerlink" title="勉強になったこと"></a>勉強になったこと</h4><p>以前かかわったPJでElasticsearchの運用していたこともあり(構築にはさほどかかわっていませんでしたが)、諸々の設定をスキップしてGUIポチポチである程度の構成が出来上がってしまうマネージドサービスの生産性の高さを改めて認識できました。</p><h4 id="もう少し知りたかったこと"><a href="#もう少し知りたかったこと" class="headerlink" title="もう少し知りたかったこと"></a>もう少し知りたかったこと</h4><p>もう少し知りたかった、というよりはもう少し時間が欲しかったという表現が正しいかもしれませんが、セミナーのテキストが400ページ近い超大作だったのに対し、実際に手を動かせる時間が3時間もなかったので、すべてを腹落ちさせて帰るのはちょっと厳しかったかなという印象でした。(そもそもシナリオを選択してかいつまんで構築していく想定だとは思いますが)</p><h3 id="4-2-所感"><a href="#4-2-所感" class="headerlink" title="4-2.所感"></a>4-2.所感</h3><p>私自身、現在AWSを触っていることもあり、セミナーで使用するCloudFormationの扱いやGUI操作については特に詰まるところはありませんでした。</p><p>この点についてはある程度マネジメントコンソールを触ったことのある人であれば特に困ることはないのではないかと思います。</p><p>逆にいえば、従来までログ分析基盤などをがんばって作っていた時間を「集めたログをどうやって使っていくか」などビジネス的視点に立ったタスクにシフトさせていく必要性を強く感じる結果になりました。</p><p>そういった意味では、少し技術的な部分に触れてみたいユーザ企業の方や、さくっとログ分析基盤作ってみたい！というクラウド初心者の方には短時間で方法論を学べるいい機会になるのではないかと思いました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;AWS-Datalake-Hands-on-2019-May-メモ&quot;&gt;&lt;a href=&quot;#AWS-Datalake-Hands-on-2019-May-メモ&quot; class=&quot;headerlink&quot; title=&quot;AWS Datalake Hands-on(2019
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>人工知能学会（JSAI2019） 参加報告</title>
    <link href="https://future-architect.github.io/articles/20190627/"/>
    <id>https://future-architect.github.io/articles/20190627/</id>
    <published>2019-06-26T23:13:03.000Z</published>
    <updated>2019-06-27T01:08:22.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>みなさんこんにちは！SAIG(Strategic AI Group)の水本と明官です！<br>2019年6月4日(火)〜6月7日(金)に開催された<a href="https://www.ai-gakkai.or.jp/jsai2019/" target="_blank" rel="noopener">人工知能学会全国大会（JSAI2019)</a>にSAIGで参加してきましたので報告します。<br>フューチャーは2017年からJSAIのプラチナスポンサーとなっており、今年もスポンサーブースの出展、インダストリアルセッションでの発表を行ないました。また、スポンサーブース出展の合間を縫ってセッション聴講も行なってきました。<br><img src="/images/20190627/1.jpg" width="60%"></p><p>今年のJSAIは新潟県の朱鷺メッセで開催されました。東京からだと新潟駅まで2時間程度、新潟駅から朱鷺メッセまで20分ほどの比較的参加しやすい立地でした。ありきたりですが、おいしい日本酒とお米が印象的でした（下の写真は参加者交流会で出た日本酒の<strong>ほんの</strong>一部）。<br><img src="/images/20190627/2.jpg" width="60%"></p><h1 id="人工知能学会全国大会とは"><a href="#人工知能学会全国大会とは" class="headerlink" title="人工知能学会全国大会とは"></a>人工知能学会全国大会とは</h1><p>今年で33回目の開催で人工知能 (AI)の研究発表を行う学会で、機械学習から人工知能の応用の話まで幅広く発表があります。一般口頭発表、インタラクティブセッション（ポスター発表）、テーマに沿った発表を行うオーガナイズドセッションや企画セッション、企業の方が事例紹介などを行うインダストリアルセッションなどがあります。一方で発表会場も15会場程度あり、どの発表を聞きに行くか決めるのも大変なセッション数になっています。SAIGの貞光/水本はこの全国大会の運営委員もやっており、学会中にそちらの仕事も行っておりました。</p><p>人工知能学会全国大会はここ数年でさらに規模が拡大してきており、2017年には2,561人であった来場者数は、2018年には2,611人、今回の2019年には2,897人と順調に増加しており発表申し込み件数も750件程あったそうです。スポンサー数も、2017年から55社、68社、90社と増加しました。また、学会としては、量から質への転換を目指しており、査読付きの国際セッションを開催するなど、新しい取り組みに積極的な様子でした。</p><h1 id="ブースの紹介"><a href="#ブースの紹介" class="headerlink" title="ブースの紹介"></a>ブースの紹介</h1><p>企業ブースでは、FutureでのAI案件実績を展示し、学生さんや企業の方との議論が大変盛り上がりました！<br>ノベルティとして配布したFutureオリジナルの歯ブラシも大好評でした。<br><img src="/images/20190627/3.jpg" width="60%"></p><h1 id="セッション聴講"><a href="#セッション聴講" class="headerlink" title="セッション聴講"></a>セッション聴講</h1><p>スポンサーブース出展の合間を縫って聴講した口頭発表、インタラクティブセッション（ポスター発表）から独断と偏見でおもしろいと思ったものを紹介します。</p><p><a href="https://confit.atlas.jp/guide/event-img/jsai2019/3Rin2-40/public/pdf?type=in" target="_blank" rel="noopener">[3Rin2-40] 潜在的な旅行者への宿泊施設の提案­­（丸山ら）</a><br>この研究では、宿泊施設の提案のためにユーザの路線検索の履歴を使います。具体的には路線検索で100km以上の移動がある検索を行なったユーザに対してホテルも情報をメールすると言った本当に単純な方法です。検証では、移動距離が長く、かつ路線検索の指定日時が遠いほどメールによってホテルの予約をするユーザが多くなるといった結果が得られていました。一見当たり前のようですが、様々なサービスを一社で扱っている強みとも言え大変興味深かったです。また、応用的にはホテルだけでなくレストランの提案などとも相互に情報を使うこともできそうなため今後に期待したい発表でした。</p><p><a href="https://confit.atlas.jp/guide/event-img/jsai2019/2H4-E-2-03/public/pdf?type=in" target="_blank" rel="noopener">[2H4-E-2-03] 潜在的な談話構造を捉えたレビュー文書の教師なしヘッドライン生成（磯沼ら）</a><br>今年のJSAIから始まった国際セッションで発表されたものです。教師ありのヘッドライン生成が主流ですが、教師ありでやるにはデータ量も必要でかつドメインも揃えないと難しいといった問題があります。その問題を解決する手段としてこの論文ではヘッドライン生成を教師なしで行う手法を提案しています。談話構造を考えた時に、子の文は親の文に関する追加情報が書かれている、ルートというのは良いサマリーになっているという仮定をおいた手法になっています。つまり、子の文を使って親の文を生成するように学習することで要約になる文を生成しようというアイデアになります。実験の結果、全体の性能では教師あり手法に及ばない結果になっていますが、レビューに含まれる文が多い場合は教師あり手法と同じ程度もしくは上回る性能となっており大変興味深い結果となっています。実際の出力例を見ると、教師あり学習では名詞句のようになっているのですが、教師なしの方ではちゃんとした文になっているのが特徴的です(ヘッドラインとして文になっている必要があるかはわかりませんが)。モチベーションにあるように、ドメインの違うデータで学習した場合の教師ありの結果と比較したらどうなのかというのも気になるところです。この研究は自然言語処理のトップ国際会議でもあるACLに採択されているようなので、そちらも要チェックです。</p><p><a href="https://confit.atlas.jp/guide/event-img/jsai2019/2L5-J-9-02/public/pdf?type=in" target="_blank" rel="noopener">[2L5-J-9-02] 物語世界間のつながりが一部明示されたメタファー写像セットの構築（松吉ら）</a><br>物語文章の自動生成にシミュレーションとメタファー写像を使うといったおもしろい研究です。自動生成のフレームワーク自体は著者らの先行研究<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>で提案されたもので、この研究はその自動生成のフレームワークを使ってデータ（メタファー写像セット）を拡張した話になります。ここでシミュレーションは迷路探索であったり、チェスであったりをシミュレートするものです。その状態遷移に基づきメタファー写像にある対応する事象を使って文を生成します。例えば、「チェスで相手のコマを取る」様子を「部屋の物を片付ける」イベントに写像するといった具合です。部屋の片付けだけでなく、チェスや迷路探索を様々なイベントに対応することでいろいろな物語を自動生成可能になります。また、チェスや迷路探索などを組みわせることもでき、フレームワーク自体は簡単ですが、より複雑な物語も生成できます。この研究では、物語を生成する核となるメタファー写像セットの構築をし、チェスと迷路探索によるメタファー写像をそれぞれ100個ずつ作成しました。また、物語世界の呼び出しを行うようなものも実際に作成しました。</p><p><a href="https://confit.atlas.jp/guide/event-img/jsai2019/2L5-J-9-03/public/pdf?type=in" target="_blank" rel="noopener">[2L5-J-9-03] 機械翻訳における訳語一貫性評価用データセットの構築（阿部ら）</a><br>NMTの登場によって流暢な翻訳を生成可能になってきましたが、これまでの機械翻訳の研究では一文単位での翻訳を対象にしていました。そのため文章単位での翻訳を考えた場合に、文脈に応じた訳語選択、代名詞補完、訳語の一貫性といった観点から見ると機械翻訳には課題が残っています。最近になり文脈を使った機械翻訳の研究は行なわれるようになってきましたが、訳語の一貫性といった観点で取り組んでいる研究はありませんでした。そのため一貫性を評価するためのデータセットや適切な評価指標が存在していません。この研究では、機械翻訳による訳語一貫性を評価するための日英/英日翻訳データセット作成に取り組みました。また、実際に実験も行なっており、制約付きデコーディングを使うことで訳語の一貫性の正解率が高くなることを示しました。</p><p><a href="https://confit.atlas.jp/guide/event-img/jsai2019/3N4-J-10-03/public/pdf?type=in" target="_blank" rel="noopener">[3N4-J-10-03] 深層学習を用いた不動産間取り図のグラフ化と物件検索への応用（山田ら）</a><br>不動産の間取り図で類似したものを検索するために、グラフ構造を利用した研究です。先行研究では部屋の物理的近さを用いてグラフを構築していたため、実際に行き来できない部屋同士にもエッジが張られるという問題がありました。そこでこの研究ではドアの位置の情報を使うことで先行研究の問題を解決しました。具体的には、まずドアの位置をルールベースで同定し、ドアで繋がっている部屋（ノード）間にエッジを張るところを限定しグラフを生成します。この手法を使って実際の物件検索に応用した例の成功したものは人が見ても似ていると思えるものでありおもしろいと思いました。</p><p><a href="https://confit.atlas.jp/guide/event-img/jsai2019/2Q3-J-2-04/public/pdf?type=in" target="_blank" rel="noopener">[2Q3-J-2-04] 特徴パターンを用いた機械学習の説明手法（浅野ら）</a><br>LIMEは個々の特徴の重要性を測ることはできますが重要な特徴の組み合わせを特定することはできないため、予測に影響を与えた特徴の組み合わせに着目したMP-LIME（Minimal-Patterns-LIME）を提案しています。極小パターンの探索方法としては、特徴の組み合わせ特徴（A,B,C）に対して（A,B),(B,C),(A,C)と特徴数を減らしたパターンを作り、それぞれの特徴パターンを使った分類結果と元の分類結果が変わるまで探索します。特徴数を減らしていき、異なる分類結果になった一つ前の特徴パターンを極小パターンとし、この極小パターンをMP-LIMEにおける判断根拠とします。結果は、recallは若干下がりましたが、Precisionがかなり向上し、実際に予測に用いられた特徴の割合も多くなるという結果でした。LIMEにより判断根拠として出力された画像を再度CNNにかけると、もとの分類結果にならないという問題がありましたが、MP-LIMEだとそれも解消されていました。判断根拠特定手法はかなり多くの方々から注目されており、我々もチャレンジしている分野だったため非常に興味深い発表でした。　<br><img src="/images/20190627/4.jpg" style="border:solid 1px #000000" class="img-middle-size"></p><p><a href="https://confit.atlas.jp/guide/event-img/jsai2019/1P2-J-13-05/public/pdf?type=in" target="_blank" rel="noopener">[1P2-J-13-05] 新聞記事からの因果関係を考慮したアナリストレポートの自動要約文生成（高嶺ら）</a><br>新聞記事からのテキストマイニングによる因果関係を考慮したアナリストレポートの要約文生成手法の研究です。アナリストレポートとは、証券分析の専門家が企業の経営状態や収益力などを分析・調査し、まとめたレポートのことです。アナリストレポートには、アナリストの予想を示す文とその根拠を示す文があり、これら二種類の文と類似する文を新聞記事中からマイニングします。類似度の算出方法として、LDAとSkip-gramにより得られた2種類の分散表現の類似度と金融極性辞書を用いた極性の一致度をそれぞれコサイン類似度を用いて算出しています。評価方法として、文章内で因果関係を抽出できたレポートの件数に対するアナリストの予想の根拠情報の抽出ができたレポートの件数の割合を用いており、この割合が80%を超えていることから提案手法が有用であることを示しました。<br><img src="/images/20190627/5.jpg" style="border:solid 1px #000000" class="img-middle-size"></p><p><a href="https://confit.atlas.jp/guide/event-img/jsai2019/1H4-J-13-03/public/pdf?type=in" target="_blank" rel="noopener">[1H4-J-13-03] 長期短期記憶と心拍変動に基づく睡眠時無呼吸症候群のスクリーニング（岩崎ら）</a><br>睡眠時無呼吸症候群(SAS)は、睡眠中に呼吸の停止あるいは呼吸量の減少が頻繁に起こる疾患であり、日中の眠気などの症状を引き起こすほか、心血管系の合併症のリスクを高めます。一方で自覚症状に乏しいケースも存在するため治療に至っていない患者が多いと考えらえています。SASの診断には終夜睡眠ポリグラフ検査 (PSG) が用いられますが、PSGを実施できる施設が少ないことや高額であることが問題でした。そこで本研究では、心拍変動解析とLSTMを組み合わせたスクリーニング手法を提案しており、SAS患者および健常者のデータに対して提案法を適用したところ、感度100%、特異度100%（感度：SASの人のなかで、陽性と判断された割合、特異度：SASではない人のなかで、陰性と判断された割合）でSASのスクリーニングが可能であることが明らかとなりました。適用された手法としては新規性はありませんが、このような医学領域での活用は新鮮でわかりやすく面白い発表でした。</p><p><a href="https://confit。atlas。jp/guide/event-img/jsai2019/1L3-J-11-01/public/pdf?type=in" target="_blank" rel="noopener">[1L3-J-11-01] HVGH: 高次元時系列データの深層圧縮と教師なし分節化（長野ら）</a><br>この研究では教師なしで高次元の時系列データから特徴抽出すると同時に、分節・分類が可能なHierarchical Dirichlet Processes-Variational Autoencoder-Gaussian Process-Hidden Semi-Markov Model (HVGH)を提案しています。HVGHは、HDP-GP-HSMMにVariational Autoencoder（VAE）を導入したモデルであり、VAEにより高次元データを低次元の潜在変数へと圧縮し、その潜在変数の遷移をガウス過程を用いて表現することで、高次元の複雑な時系列データの分節化を可能としています。実験ではCMU Graphics Lab Motion Capture Databaseのモーションキャプチャデータ（チキンダンスと体操動作 1）を入力として分節化を行った結果、複雑な動作も高い精度で分節化が可能であることを示しました。<br><img src="/images/20190627/6.jpg" style="border:solid 1px #000000" class="img-middle-size"></p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>いかがでしたでしょか？👦<br>二人ともFutureに入って初めての学会でしたが、様々な研究成果を見ることができ良い刺激を受けました。<br>SAIGでは、週に一回、Future Study Group という勉強会を開催しているので、JSAI2019の研究発表も共有しようと思います！</p><p>現在SAIGでは意欲あるメンバーを募集しています。<br>下記URLから応募できますので、興味のある方は是非！<br><a href="https://progres12.jposting.net/pgfuture/u/job.phtml?job_code=365" target="_blank" rel="noopener">https://progres12.jposting.net/pgfuture/u/job.phtml?job_code=365</a><br><a href="https://progres12.jposting.net/pgfuture/u/job.phtml?job_code=363" target="_blank" rel="noopener">https://progres12.jposting.net/pgfuture/u/job.phtml?job_code=363</a></p><img src="/images/20190627/7.jpg" width="60%"><p>▲会場（朱鷺メッセ）から見える景色</p><p>以上、水本・明官でした！</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">松吉 俊, 内海 彰：メタファー写像に基づく物語文の自動生成, 言語処理学会第 24 回年次大会発表論文集, pp. 1288–1291 (2018)</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;みなさんこんにちは！SAIG(Strategic AI Group)の水本と明官です！&lt;br&gt;2019年6月4日(火)〜6月
      
    
    </summary>
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>Amazon Redshiftの仕様を調べてみた</title>
    <link href="https://future-architect.github.io/articles/20190625/"/>
    <id>https://future-architect.github.io/articles/20190625/</id>
    <published>2019-06-25T00:00:00.000Z</published>
    <updated>2019-06-24T13:28:23.204Z</updated>
    
    <content type="html"><![CDATA[<p>クラウド環境におけるDWHの選択肢として、Redshiftはもはや珍しいものではなくなりましたが、弊社内の採用実績はそれほど多くはありませんでした。<br>本記事は元々そのような社内向けに、Redshiftの基本的な仕様をなるべく網羅的に理解できるようまとめたものです。</p><h1 id="筆者について"><a href="#筆者について" class="headerlink" title="筆者について"></a>筆者について</h1><p>新卒でフューチャーに入社し、今年で8年目になります。<br>入社後は一貫して技術畑、オンプレミスのインフラに始まり、直近ではアプリケーションまで含めたプロジェクトの技術統括を担当しています。</p><p>私もかつては社内有数のAWSエンジニアを自負していましたが、最近は別の仕事のため少し遠ざかっており、クラウドの世界は日進月歩なこともあり知識をアップデートする必要を感じています。<br>※この記事の準備中にもElastic Resizeがリリースされました。</p><p>本記事は私のリハビリも兼ね、ドキュメントのまとめだけでなく、実際に手を動かして振る舞いを確認した箇所も含んでいます。</p><h1 id="Amazon-Redshift"><a href="#Amazon-Redshift" class="headerlink" title="Amazon Redshift"></a>Amazon Redshift</h1><p>RedshiftはカラムナーストレージとMPP(Massively Parallel Processing)に基づくDWH向けデータベースサービスです。<br>次の順番でそれぞれまとめていきます。</p><ol><li>ノード構成</li><li>ネットワーク</li><li>メンテナンス</li><li>パラメータグループ</li><li>ワークロード管理</li><li>ユーザーとグループ</li><li>監査ログ</li><li>テーブル設計</li><li>データのロードとアンロード・バキューム</li><li>ラッシュパフォーマンス</li><li>Redshift Spectrum</li><li>参考資料</li></ol><h2 id="1-ノード構成"><a href="#1-ノード構成" class="headerlink" title="1. ノード構成"></a>1. ノード構成</h2><h3 id="1-1-概要"><a href="#1-1-概要" class="headerlink" title="1-1. 概要"></a>1-1. 概要</h3><p>Amazon Redshiftクラスターは1つの<strong>リーダーノード</strong>と、複数の<strong>コンピューティングノード</strong>から構成されます。<br>それぞれの役割の概要を次にまとめます。</p><ul><li>リーダーノード<ul><li>クライアントアプリケーションからクエリを受け取ってクエリを解析し、クエリ実行プランを作成する</li><li>コンピューティングノードに対するこれらのプランの並列実行を調整し、コンピューティングノードから得た中間結果を集計してから、最終的にクライアントアプリケーションに結果を返す</li></ul></li><li>コンピューティングノード<ul><li>クエリ実行プランを実行し、これらのクエリを処理するためにデータをコンピューティングノード間で伝送する(再分散)</li><li>集計の中間結果は、クライアントアプリケーションに送り返される前にリーダーノードに送り返される</li></ul></li></ul><h3 id="1-2-選べるノードタイプ"><a href="#1-2-選べるノードタイプ" class="headerlink" title="1-2. 選べるノードタイプ"></a>1-2. 選べるノードタイプ</h3><p><a href="https://aws.amazon.com/jp/redshift/pricing/" target="_blank" rel="noopener">ノードタイプと料金</a>はこちら。</p><ul><li>リーダーノードは無料<ul><li>コンピューティングノードを一つにした場合、リーダーノード=コンピューティングノードのシングルノード構成となる</li><li>通常運用する場合は、コンピューティングノードを複数にするが、この場合リーダーノードが別に1ノード作成される。課金対象となるのはコンピューティングノードのみである</li></ul></li><li><a href="http://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/purchase-reserved-node-instance.html" target="_blank" rel="noopener">リザーブドインスタンス</a>が購入できる</li></ul><h3 id="1-3-リージョンとアベイラビリティ"><a href="#1-3-リージョンとアベイラビリティ" class="headerlink" title="1-3. リージョンとアベイラビリティ"></a>1-3. リージョンとアベイラビリティ</h3><p>すべてのクラスターノードが同じAZにプロビジョニングされ、<strong>Multi-AZ構成は選択不可能</strong> です。</p><blockquote><p>Amazon Redshift ではデータウェアハウスクラスター内の障害ノードが自動的に検知され、障害ノードの交換が行われます。データウェアハウスクラスターは代替ノードがプロビジョニングされてデータベースに追加されるまで、クエリと更新を行うことはできません。Amazon Redshift では代替ノードが即座に利用可能となり、まず最も高い頻度でアクセスされるデータが S3 からロードされます。こうすることで、可能な限り速やかにクエリの実行が再開できるようになります。単一ノードのクラスターは、データのレプリケーションをサポートしません。ドライブに障害が発生した場合、S3 のスナップショットからクラスターを復元する必要があります。実稼働には少なくとも 2 つのノードを使用することをお勧めします。<br><a href="https://aws.amazon.com/jp/redshift/faqs/" target="_blank" rel="noopener">https://aws.amazon.com/jp/redshift/faqs/</a></p></blockquote><p>実際にどれくらいの時間で復旧するのかは未調査です。</p><h2 id="2-ネットワーク"><a href="#2-ネットワーク" class="headerlink" title="2. ネットワーク"></a>2. ネットワーク</h2><h3 id="2-1-クラスターサブネットグループ"><a href="#2-1-クラスターサブネットグループ" class="headerlink" title="2-1. クラスターサブネットグループ"></a>2-1. クラスターサブネットグループ</h3><p>RDSのデータベースサブネットグループと同じようなもので、別途作成する必要があります。</p><h3 id="2-2-拡張されたVPCのルーティング-Enhanced-VPC-Routing"><a href="#2-2-拡張されたVPCのルーティング-Enhanced-VPC-Routing" class="headerlink" title="2-2. 拡張されたVPCのルーティング(Enhanced VPC Routing)"></a>2-2. 拡張されたVPCのルーティング(Enhanced VPC Routing)</h3><p>拡張されたVPCのルーティングを有効にすると、Amazon Redshiftはクラスターとデータリポジトリ間のすべてのCOPYとUNLOADトラフィックがAmazon VPCを通るよう強制します。</p><ul><li>S3との通信はVPC Endpointを作ればOK。ただしRedshift SpectrumはGlueカタログを利用するため、インターネット経由でGlueにアクセスできる必要があり、NATゲートウェイ等の利用が必要となる。※PoCでは確認できていない</li><li>DynamoDBは未検証だが、おそらくVPC Endpoint経由であれば問題ないはずである</li><li>EMRクラスターは未検証だが、VPC内で通信できれば支障はないはずである</li></ul><p>拡張されたVPCルーティングが有効でない場合、Amazon RedshiftはAWSネットワークにおけるその他のサービスへのトラフィックを含むトラフィックをインターネット経由でルーティングします。</p><h2 id="3-メンテナンス"><a href="#3-メンテナンス" class="headerlink" title="3. メンテナンス"></a>3. メンテナンス</h2><h3 id="3-1-リサイズ"><a href="#3-1-リサイズ" class="headerlink" title="3-1. リサイズ"></a>3-1. リサイズ</h3><p>リサイズは以下1~4のプロセスで実行され、気軽に実行できるものではないです。</p><ol><li>新しいクラスターを作成する</li><li>ソースクラスターを読み取り専用モードで再起動する。既存のコネクションは全て切断され、実行中のトランザクションはロールバックされる</li><li>ソースクラスターから新しいクラスターへデータをコピーする</li><li>エンドポイントを新しいクラスターへ変更する</li></ol><p>クラスターの<strong>サイズ変更にかかる時間</strong>は、各ノードのデータ量に依存します。</p><ul><li>通常、サイズ変更処理には数時間から1日かかる</li><li>データ量が多いクラスターではさらに時間がかかることもある</li></ul><p>Amazon Redshiftは<strong>サイズ変更の操作中、テーブルをソートしません</strong>。</p><ul><li>クラスターのサイズを変更すると、Amazon Redshiftは分散方式に基づいてデータベースのテーブルを新しいコンピューティングノードに分散し、ANALYZEを実行して統計を更新する</li><li>削除のマークが付いた行は転送されないため、テーブルを再ソートする必要がある場合のみVACUUMを実行する必要がある</li></ul><p>リサイズ後の<strong>IPアドレス</strong>について以下の特徴があります。</p><ul><li>クラスターがパブリックであり、VPC 内に存在する場合、サイズ変更後もリーダーノードの elastic IP アドレス（EIP）は変更されない</li><li>クラスターがプライベートであり、VPC 内に存在する場合、サイズ変更後もリーダーノードのプライベート IP アドレスは変更されない</li><li>クラスターがVPC内に存在しない場合、サイズ変更オペレーションの一部として、新しいパブリック IP アドレスがリーダーノードに割り当てられる</li></ul><h3 id="3-2-Elastic-Resize"><a href="#3-2-Elastic-Resize" class="headerlink" title="3-2. Elastic Resize"></a>3-2. Elastic Resize</h3><p><a href="https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/rs-resize-tutorial.html" target="_blank" rel="noopener">伸縮自在なサイズ変更</a>がサポートされました。</p><p>既存のクラスターにあるノードを追加または削除し、自動的にデータを新しいノードに再分散する。以下1~4のイベントが記録されます。</p><ol><li>リサイズリクエスト受付</li><li>リサイズ開始</li><li>リサイズ完了</li><li>再分散完了</li></ol><p>Elastic Resizeは新しいクラスターを作成しないため、伸縮自在なサイズ変更オペレーションは通常のリサイズに比べて素早く完了します。実測したところ、確かに速かった(～5分以内)です。</p><p>ちなみに、「<a href="https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/rs-resize-tutorial.html#elastic-resize" target="_blank" rel="noopener">バックグラウンドでデータが再分配されているとき、一部のクエリの実行時間がわずかに増加するのに気付くかも知れません。</a>」とありますが、差を確認することはできなかったです。</p><p>その他、留意したほうが良さそうな点をまとめました。</p><ul><li>一時的に使用不可な時間が発生するが、セッションは切断されず、クエリはキューに溜まる<ul><li>2ノードから4ノードへの変更時に40秒程度クエリが発行できない時間が発生した</li><li>その後、クエリの実行時間が大きく増大する時間が60秒程度発生した<ul><li>2ノードで600msec程度のクエリに4sec～13sec</li></ul></li></ul></li><li>ノード数を2倍にするか、半分にするかのどちらかしか選べない。また、一度ノード数を増やしてしまうとスライス数が増えるため、2倍にしてから半分にする(元に戻す)とスライス数が過剰になってしまう</li></ul><h3 id="3-3-スナップショット"><a href="#3-3-スナップショット" class="headerlink" title="3-3. スナップショット"></a>3-3. スナップショット</h3><p>スナップショットは<strong>自動</strong>または<strong>手動</strong>を選択できます。</p><ul><li>自動スナップショット<ul><li>自動スナップショットは、クラスターを作成するときデフォルトで有効になる</li><li>通常は、8時間ごとまたはノードあたり5GBのデータ変更ごと (あるいはそのいずれか早い方) に作成される</li></ul></li><li>手動スナップショット<ul><li>手動スナップショットはいつでも取得できる</li><li>デフォルトでは、手動スナップショットは、クラスターを削除した後も、無限に保持される。手動スナップショットを作成するときに保持期間を指定できる</li></ul></li></ul><p>また、次のような特徴があります。</p><ul><li>テーブル定義に<code>BACKUP NO</code>を加えると、バックアップ対象外になる</li><li>クラスター全体を復元する代わりに、スナップショットから単一のテーブルを復元できる</li><li>別アカウントへ共有可能。※RDSと同様</li><li>復元する際に(コンソールから実行する限りは)監査設定とIAMロールが外れるので注意が必要。ユーザー側で再設定する必要がある</li></ul><h3 id="3-4-メンテナンスウィンドウ"><a href="#3-4-メンテナンスウィンドウ" class="headerlink" title="3-4. メンテナンスウィンドウ"></a>3-4. メンテナンスウィンドウ</h3><p>Amazon Redshiftは定期的にメンテナンスを実行して、クラスターにアップグレードを適用します。更新中は Amazon Redshiftクラスターで通常の操作を実行することはできません。</p><p>また、特に抑えておきたい内容に以下のような項目があります。</p><ul><li>メンテナンスウィンドウは30分以上、24時間以内で指定可能<ul><li>クラスター作成時は指定できず、自動で設定される。※コンソール使用時</li></ul></li><li>メンテナンスがスケジュールされた場合、最長45日までは延期可能。</li></ul><h2 id="4-パラメータグループ"><a href="#4-パラメータグループ" class="headerlink" title="4. パラメータグループ"></a>4. パラメータグループ</h2><p>使用できるパラメータのリストは、パラメータグループが属しているパラメータグループファミリーによって異なります。</p><p>これはRedshiftのエンジンバージョン毎に異なるパラメータのリストが使われる(新しいバージョンでないと設定できないパラメータやサポートされないパラメータがある)ということですが、2019年5月時点ではエンジンバージョンは一つ(<code>redshift-1.0</code>)しかないので現時点では気にしなくても良さそうです。</p><p>反映する場合は <strong>再起動が必要</strong>です。ただしWLM(後述)のうち一部のパラメータは動的変更可能です。</p><p>パラメータ一覧</p><table><thead><tr><th>Item</th><th>Note</th></tr></thead><tbody><tr><td>auto_analyze</td><td>自動ANALYZEを有効にするか。データ更新がバッチのみなら手動ANALYZEのみにした方が制御しやすい</td></tr><tr><td>datestyle</td><td>‘ISO, YMD’が無難</td></tr><tr><td>enable_user_activity_logging</td><td>データベースで実行される前に各クエリを記録する</td></tr><tr><td>extra_float_digits</td><td>浮動小数点値 (float4 と float8 を含みます) の表示桁数を設定する</td></tr><tr><td>max_concurrency_scaling_clusters</td><td>同時実行スケーリングで起動されるクラスター数上限を設定する</td></tr><tr><td>max_cursor_result_set_size</td><td>設定は可能だが、廃止されている</td></tr><tr><td>query_group</td><td>ワークロード管理で利用するが、パラメータグループで設定することはまずないと思われる</td></tr><tr><td>require_ssl</td><td>tls接続を使用する</td></tr><tr><td>use_fips_ssl</td><td>FIPS 準拠の SSL モードを有効にする</td></tr><tr><td>search_path</td><td>検索パス(PostgreSQLと同じもの)</td></tr><tr><td>statement_timeout</td><td>指定されたミリ秒数以上かかっているステートメントを中止する。0に設定すれば制限なし</td></tr></tbody></table><p>セッション内でのみ変更可能なパラメータもあります。</p><table><thead><tr><th>Item</th><th>Note</th></tr></thead><tbody><tr><td><code>analyze_threshold_percent</code></td><td><code>ANALYZE</code>を実行する際のしきい値を設定する。<code>analyze_threshold_percent</code>の指定よりも変更された行の割合が低いテーブルの分析は省略される。デフォルトは10(パーセント)</td></tr><tr><td><code>describe_field_name_in_uppercase</code></td><td><code>SELECT</code>で返却される列名を大文字にする。デフォルトはオフ</td></tr><tr><td><code>timezone</code></td><td>セッションのタイムゾーンを設定する。デフォルトはUTC。パラメータグループでは設定できない。デフォルト設定した場合はユーザーのデフォルトセッションパラメータに設定する</td></tr><tr><td><code>wlm_query_slot_count</code></td><td><a href="#WLM設定">WLM設定</a>参照</td></tr></tbody></table><h2 id="5-ワークロード管理"><a href="#5-ワークロード管理" class="headerlink" title="5. ワークロード管理"></a>5. ワークロード管理</h2><p>Amazon Redshift では、<strong>ワークロード管理(WLM)</strong>を使用して、使用可能なクエリキューの数と、処理するためにクエリをそれらのキューにルーティングする方法を定義します。</p><p>デフォルトのWLM設定には、<strong>最大5つのクエリを同時に実行できる1つのキュー</strong>が含まれ、<strong>最大で8個のキューを定義</strong>できます。</p><h3 id="5-1-スーパーユーザーキュー"><a href="#5-1-スーパーユーザーキュー" class="headerlink" title="5.1 スーパーユーザーキュー"></a>5.1 スーパーユーザーキュー</h3><p>スーパーユーザーキューは、スーパーユーザー専用に予約されており、設定することはできません。</p><p>このキューは、システムに影響を与えるクエリを実行する必要があるときや、トラブルシューティング目的でのみ使用することが想定されています。</p><p>スーパーユーザーキューでクエリを実行するには、ユーザーはスーパーユーザーとしてログインし、事前定義された <code>superuser</code>クエリグループを使用してクエリを実行する必要があります。</p><h3 id="5-2-WLM設定"><a href="#5-2-WLM設定" class="headerlink" title="5.2 WLM設定"></a>5.2 WLM設定</h3><p>WLMは<code>wlm_json_configuration</code>パラメータで制御すします。<code>wlm_json_configuration</code>はJSON(キューに対応するオブジェクトの配列)として定義します。キューに名前を付けられないのでわかりにくいですね。</p><p>プロパティは動的/静的があります。動的はクラスターを再起動することなく適用でき、静的プロパティはクラスターの再起動が必要です。</p><table><thead><tr><th>名称</th><th>種別</th><th>説明</th><th>備考</th></tr></thead><tbody><tr><td><code>query_concurrency</code></td><td>動的</td><td>キューの同時実行クエリ数。キューが同時実行レベルに達すると、後続のクエリを処理するリソースが利用可能になるまでそれらのクエリはキューで待機する。</td><td>定義可能な範囲は1～50だが、全てのキューを合計して15までが推奨値</td></tr><tr><td><code>max_execution_time</code></td><td>動的</td><td>クエリが実行されて始めてからキャンセルされるまでの最大時間（ミリ秒単位）。COPY ステートメントと、ANALYZE や VACUUM などのメンテナンスオペレーションは、WLM タイムアウトの対象にはならない</td><td></td></tr><tr><td><code>memory_percent_to_use</code></td><td>動的</td><td>キューに割り当てるメモリの割合。すべてのキューに割り当てられたメモリの合計が100パーセントを下回る場合、未割り当てのメモリはサービスによって管理され、処理用に追加メモリをリクエストするキューに一時的に付与できる。クエリスロットに割り当てられるメモリ量は、キューに割り当てられたメモリをスロットカウントで割った割合と同じ。</td><td>デフォルトは各ユーザー定義キューへ均等に割り当て。100%になるような割り当てが無難。<code>Superuser</code>キューは独自に割り当てられているメモリがあるため変更負荷</td></tr><tr><td><code>user_group</code></td><td>静的</td><td>ユーザーグループ名のカンマ区切りリスト。ユーザーグループのメンバーがデータベースでクエリを実行すると、そのメンバーのクエリはユーザーグループに関連付けられたキューにルーティングされる</td><td></td></tr><tr><td><code>user_group_wild_card</code></td><td>静的</td><td>ユーザーグループでワイルドカードを有効にするかどうかを示すブール値。ワイルドカードが有効な場合、「+」または「?」を使用し、クエリを実行するときに複数のユーザーグループを指定できる</td><td>0:無効 1:有効</td></tr><tr><td><code>query_group</code></td><td>静的</td><td>クエリグループのカンマ区切りリスト。クエリグループのメンバーがデータベースでクエリを実行すると、そのメンバーのクエリはクエリグループに関連付けられたキューにルーティングされる</td><td></td></tr><tr><td><code>query_group_wild_card</code></td><td>静的</td><td>クエリグループでワイルドカードを有効にするかどうかを示すブール値。ワイルドカードが有効な場合、「+」または「?」を使用し、クエリを実行するときに複数のクエリグループを指定できる</td><td>0:無効 1:有効</td></tr></tbody></table><p>以下、キューとルーティングについて追記します。</p><ul><li>ルーティングについて<ul><li><code>query group</code>を使ってルーティングする場合<ul><li>ユーザーのデフォルトセッションパラメータで<code>query_group</code>を定義することも出来るので、変えたい時だけ<code>SET</code>する運用が可能である</li><li>ex. <code>set query_group to &#39;priority-high&#39;; xxx; reset query_group;</code></li></ul></li><li><code>user_group</code>をつかってルーティングする場合<ul><li>アプリケーションによってワークロードが変わる場合は、アプリケーションごとにユーザーを作成することで、異なるキューを割り当てることができる</li></ul></li></ul></li><li>キュー割り当てルール<ol><li>user = <code>Superuser</code> and Query Group = <code>superuser</code>, then <code>Superuser queue</code></li><li>Matching user group, then user group</li><li>Matching query group, then query group</li><li>default queue</li></ol></li><li>VACUUMのルーティング<ul><li>VACUUMのルーティングはテーブルの所有者権限(またはスーパーユーザー権限)を持っていないと実行できないため、所有者が含まれる<code>user_group</code>でキュー定義していると<code>VACUUM</code>がそのキューに行ってしまう。<code>user_group</code>ではなく<code>query_group</code>でルーティングするようにした方が良い</li><li>例えばテーブルAの所有者ユーザーAがグループAに所属していた場合、グループAに対して定義されたキューがあると、ユーザーAが発行する<code>SELECT</code>と<code>VACUUM</code>がどちらの同じキューへルーティングされる</li></ul></li><li>キューの分割パターン<ul><li>スループット重視で並列度を管理可能な夜間バッチ<ul><li>実行されるクエリが予測できるので、タイムアウトはさせない</li><li>夜間バッチ前後にWLM設定を変更し、日中クエリにメモリを明け渡すことも検討する</li></ul></li><li>リクエスト数が多いが、定型的でキャッシュヒットしやすいクエリ(ダッシュボード等)<ul><li>実行されるクエリが予測できるので、タイムアウトはさせない</li><li>同時実行スケーリングを有効にする</li></ul></li><li>実行されるクエリが予め予測できないアドホッククエリ<ul><li>メモリを使いすぎないように、メモリ上限を少なめにしておく</li><li>タイムアウトを設定する</li><li><a href="クエリモニタリング">クエリモニタリング</a>を設定する</li></ul></li></ul></li></ul><h4 id="キューの確認方法"><a href="#キューの確認方法" class="headerlink" title="キューの確認方法"></a>キューの確認方法</h4><p><code>service_class</code>がわかりにくいですが…</p><ul><li>1, 2, 3, 4はシステム用</li><li>5がスーパーユーザーキュー</li><li>6～13までユーザー定義キュー</li><li>14が <a href="#short-query-acceleration">SQA</a> 用のキュー</li></ul><figure class="highlight sql"><figcaption><span>キューの確認方法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> service_class, num_query_tasks, query_working_mem, <span class="keyword">name</span> <span class="keyword">from</span> stv_wlm_service_class_config;</span><br></pre></td></tr></table></figure><p>キューとクエリのマッピング方法</p><figure class="highlight sql"><figcaption><span>キュートクエリのマッピング</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    wq.queue_start_time</span><br><span class="line">,   wq.service_class</span><br><span class="line">,   wq.total_exec_time</span><br><span class="line">,   q.label</span><br><span class="line">,   q.concurrency_scaling_status</span><br><span class="line">,   <span class="keyword">trim</span>(q.querytxt) <span class="keyword">as</span> query_text</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    stl_wlm_query wq</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">    stl_query q</span><br><span class="line"><span class="keyword">on</span>  wq.query = q.query</span><br><span class="line"><span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">and</span> wq.service_class &gt; <span class="number">5</span></span><br><span class="line"><span class="keyword">and</span> wq.final_state = <span class="string">'Completed'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    q.query <span class="keyword">desc</span></span><br><span class="line"><span class="keyword">limit</span> <span class="number">20</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure><h3 id="5-3-クエリモニタリング"><a href="#5-3-クエリモニタリング" class="headerlink" title="5.3 クエリモニタリング"></a>5.3 クエリモニタリング</h3><p>リソース消費が激しいクエリや、検索件数が多すぎるクエリなど、滅茶苦茶なクエリを監視することができます。</p><p>また、基準に抵触した場合に、<strong>ログ</strong>・<strong>ホップ</strong>・<strong>キャンセル</strong>を選ぶことができます。</p><ul><li>ログ: ログ出力するのみ</li><li>ホップ: 実行状態を保ったままキューを移動させる</li><li>キャンセル: クエリをキャンセルする</li></ul><h3 id="5-4-クエリホッピング"><a href="#5-4-クエリホッピング" class="headerlink" title="5.4 クエリホッピング"></a>5.4 クエリホッピング</h3><p>WLMタイムアウトした場合・クエリモニタリングでホップした場合、次の有効なキューに移されます。この場合は一度キャンセルされるわけではなく、実行状態を保ったままキューを移動します。</p><p>これにより低レイテンシ用のキューで予期せず長時間かかるクエリが実行された場合に、長時間クエリ用のキューへ移動することが可能になります。</p><h2 id="6-ユーザー・グループ"><a href="#6-ユーザー・グループ" class="headerlink" title="6. ユーザー・グループ"></a>6. ユーザー・グループ</h2><p>現在のPostgreSQLではRoleに統合されているが、Redshiftでは分かれています。<br>わかりにくいのでユーザーとグループで同じ名前を使わないようにすべきでしょう。</p><ul><li>グループの使い道<ul><li>権限設定</li><li>WLMキューの振り分け</li></ul></li><li>全てのユーザーが暗黙的に<code>PUBLIC</code>グループに所属しています。<ul><li><code>PUBLIC</code>グループに対して<code>public</code>スキーマの<code>CREATE</code>と<code>USAGE</code>が付与されているので、<code>public</code>スキーマを使用しない場合は<code>REVOKE</code>しておくか、<code>search_path</code>を設定しておくと良いでしょう。</li></ul></li><li>通常のデータベースユーザーも<a href="https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/generating-user-credentials.html" target="_blank" rel="noopener">IAM認証</a>も可能です。</li><li>ユーザーのパスワードを無効にするには<code>DISABLE</code>を指定します。パスワードを無効にしてもIAM認証は可能です。</li><li><code>CREATEUSER</code>オプションを使用すると、<code>CREATE USER</code>を含め、データベースに関するすべての権限を持つスーパーユーザーが作成されます。</li><li><code>SYSLOG ACCESS UNRESTRICTED</code>を指定すると、別のユーザーによって生成された行を含む、ユーザーが表示可能なシステムテーブルとビューのすべての行を表示できます。ただし、スーパーユーザーのみが表示可能なテーブルへのアクセス権は与えられません。デフォルトは<code>RESTRICTED</code>です。なお、STV_RECENTS および SVV_TRANSACTIONS のすべての行は、すべてのユーザーに表示されます。</li><li><code>CONNECTION LIMIT</code>を指定すると、ユーザーが同時に開けるデータベース接続の最大数を指定できます。デフォルトは<code>UNLIMITED</code>であり、クラスターの同時接続制限数は500です。</li><li><code>ALTER USER username SET parameter TO value</code>でセッションパラメータのデフォルト値を設定できます。<ul><li>ユーザーレベルで設定するのは<code>search_path</code>と<code>statement_timeout</code>くらいでしょうか。</li></ul></li></ul><p>ユーザーとグループのマッピング確認は以下の通りです。</p><figure class="highlight sql"><figcaption><span>ユーザとグループのマッピング確認</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    grp.groname</span><br><span class="line">,   usr.usename</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    pg_group grp</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">    pg_user usr</span><br><span class="line"><span class="keyword">on</span> usr.usesysid = <span class="keyword">ANY</span>(grp.grolist)</span><br><span class="line"><span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="comment">--    pg_group.groname='&lt;YOUR_GROUP_NAME&gt;'</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure><h2 id="7-監査ログ"><a href="#7-監査ログ" class="headerlink" title="7. 監査ログ"></a>7. 監査ログ</h2><p><strong>接続ログ</strong>・<strong>ユーザーログ</strong>・<strong>ユーザーアクティビティログ</strong>が収集可能です。</p><ul><li>接続ログ<ul><li>認証の試みと、接続および切断を記録する</li><li>自動でシステムテーブル(STL_CONNECTION_LOG）に出力されるが、S3に出力することも可能</li></ul></li><li>ユーザーログ<ul><li>データベースのユーザー定義への変更に関する情報を記録する</li><li>自動でシステムテーブル(STL_USERLOG）に出力されるが、S3に出力することも可能</li></ul></li><li>ユーザーアクティビティログ<ul><li>データベースで実行される前に各クエリを記録する</li><li>S3へのログ出力を有効化したうえでパラメータ <code>enable_user_activity_logging</code> の設定が必要</li></ul></li></ul><p>ただし、S3出力時には権限設定が必要で、ELBと同様にRedshiftがS3に書き込めるよう特定のアカウントIDからのアクセス許可（<code>s3:GetBucketAcl</code>, <code>s3:PutObject</code>）を付与します。<br>検証したところ、有効にしてからログが配信されるまで1時間くらいかかりました。</p><h2 id="8-テーブル設計"><a href="#8-テーブル設計" class="headerlink" title="8. テーブル設計"></a>8. テーブル設計</h2><h3 id="8-1-実行計画"><a href="#8-1-実行計画" class="headerlink" title="8-1. 実行計画"></a>8-1. 実行計画</h3><h4 id="テーブル結合"><a href="#テーブル結合" class="headerlink" title="テーブル結合"></a>テーブル結合</h4><p>性能観点では、<strong>Merge Join</strong>が最適で、次点が<strong>Hash Join</strong>で<strong>Nested Loop</strong>の順。</p><p>しかし、Merge Joinが選択されるためには、分散キー/ソートキーで結合される必要があります。分散キーとソートキーは同じカラムでないといけないので、ファクトとディメンジョンの結合ではまずならないです。また。ソートキーは<a href="#ソートキー"><code>compound sort key</code></a>である必要があります。[分散スタイル](#8-2. 分散スタイル)は両テーブルとも<code>KEY</code>である必要があります。<code>ALL</code>では(必要なデータはローカルにあるはずだが)Merge Joinが選択されません。</p><p>上記の制約もありMerge Joinが使えるケースは希少だと思うので、基本的にHash Joinを使うように考えた方が良さそうです。高速化する場合は分割並列化し、分割キーで(可能なら)ソートキーを作る、あるいは複合キーに加えます。</p><p>また、Nested Loopを選ばないためには、結合は等価結合でないとダメです。</p><p>【参考】<a href="https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/r_EXPLAIN.html" target="_blank" rel="noopener">ステップ概要</a>・<a href="https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/c_data_redistribution.html" target="_blank" rel="noopener">クエリプランの評価</a></p><h4 id="クエリの実行"><a href="#クエリの実行" class="headerlink" title="クエリの実行"></a>クエリの実行</h4><p>開発者ガイドの<a href="https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/c-query-planning.html" target="_blank" rel="noopener">クエリプランと実行ワークフロー</a>によると、実際にはSQLがそのまま実行されるのではなく、C++コードに変換された後コンパイルされて実行されます。</p><p>コンパイルに秒単位の時間がかかるため、初回の検索に時間がかかりますが、実行計画が同じクエリであればコンパイル結果が再利用されます。</p><h4 id="設計方針"><a href="#設計方針" class="headerlink" title="設計方針"></a>設計方針</h4><ul><li>最終的にはERではなくクエリパタンに基づき実行計画を設計して、分散スタイルとソートキーを設定する</li><li>とはいえ、ERがないとクエリが設計できないので、下記のガイドに従って仮決めする。</li><li>大雑把に言えばレイテンシーに影響があるのはソートキーと圧縮で、スループットに影響があるのは圧縮キー<ul><li>それでもレイテンシーが足りなければデータマートやサマリテーブルを検討する</li></ul></li></ul><h3 id="8-2-分散スタイル"><a href="#8-2-分散スタイル" class="headerlink" title="8-2. 分散スタイル"></a>8-2. 分散スタイル</h3><p>テーブルを作成する場合は<code>EVEN</code>/<code>ALL</code>/<code>KEY</code>/<code>AUTO</code>(デフォルト)のいずれかの分散スタイルを指定します。</p><ul><li><code>EVEN</code>: ラウンドロビン方式で各スライスへ行を分散する</li><li><code>ALL</code>: テーブル全体のコピーが全てのノードに分散される<ul><li>サイズが小さいテーブルに適しているようにも思えるが、更新コストが増える割に再分散コストが低いため、大きなメリットは得られない。また、結合しない場合は各スライスの検索結果をUNIONすることになるため、むしろ遅くなる。</li><li>更新頻度が低く、更新範囲が広くないテーブルに適している</li><li>結合する際に内部表となる場合に有効。実行計画が<code>DS_DIST_ALL_NONE</code>となる</li></ul></li><li><code>KEY</code>: 特定の列に含まれている値に従って、複数の一致する値を同じノードスライスに配置する<ul><li>指定できる分散キーは一つだけ。複合キーにはできない</li><li>where句で指定されるカラムは不向き。クエリが分散しなくなってしまうため。ただし、分散キーをソートに指定することも出来る</li></ul></li><li><code>AUTO</code>: テーブルサイズに応じて<code>EVEN</code>か<code>ALL</code>か自動的に判定する</li></ul><p><a href="https://aws.typepad.com/sajp/2016/12/amazon-redshift-engineerings-advanced-table-design-playbook-distribution-styles-and-distribution-keys.html" target="_blank" rel="noopener">Amazon Redshift テーブル設計詳細ガイド:Part 2 分散スタイルと分散キー</a>に最適な分散スタイルと分散キーを選ぶ方法論が紹介されています。以下に簡単にまとめます。</p><ul><li>適切なDistKeyの特定<ul><li>列のデータが均一に分散しているか？<ul><li>DistKeyの値を同じくするレコード数がどれも同じくらいか？</li></ul></li><li>列のカーディナリティが高いか？<ul><li>スライス数を大きく上回る(10倍以上)のユニーク値を持つか？</li><li>少ないとスライスごとにデータサイズがばらつく</li></ul></li><li>クエリは選択的フィルターを実行するか？<ul><li>実行しないのであれば、分散キーの有力候補</li><li>実行するのであれば、まず第一ソートキーになり得るか確認する<ul><li>加えて同じキーで分散・ソートが設定してあるテーブルと結合するならMerge Joinになるので、分散キーの有力候補</li></ul></li></ul></li></ul></li><li>分散スタイルの選択<ul><li>結合しないテーブルの場合<ul><li>適切なDistKeyがあればKey分散を選択する</li><li>なければEVEN分散になる。ALL分散は採用しない</li></ul></li><li>結合するテーブルの場合、まずALL分散を検討する<ul><li>以下の条件を全て満たせばALL分散を採用する<ul><li>小さいテーブルである。全ノードへコピーするためストレージ使用量が増えてしまう</li><li>更新頻度の低いテーブルである。全ノードで重複データを持つため、全ノードにレプリケートされるまで書き込みが終わらなくなる</li><li>駆動表にならない。駆動表となった場合に、全ノードで同一データをスキャンするため非効率</li><li>適切な分散キーが見つからない</li></ul></li><li>採用できない場合、結合しないテーブルにおける検討に従ってKey分散ないしEVEN分散とする</li></ul></li></ul></li></ul><h3 id="8-3-ソートキー"><a href="#8-3-ソートキー" class="headerlink" title="8-3. ソートキー"></a>8-3. ソートキー</h3><ul><li>ソートキーを指定することでスキャン範囲を制限することができる。<ul><li>index scanというよりも、パーティションプルーニングに近い。</li></ul></li><li>なるべくprefixのついていない文字列を選ぶ(先頭8バイトしかソートに使われない)</li><li>where句で指定されるカラム(indexと同じ使い方)か、結合キーになるカラムを指定する<ul><li>分散キー・ソートキーで結合する場合にMerge Joinが選択され、Redshiftでは最適な結合プランになる。結合キーだからソートキーにするのではなく、Merge Joinを狙う場合に指定する</li></ul></li><li>ソートキーの種類(<a href="https://aws.typepad.com/sajp/2016/12/amazon-redshift-engineerings-advanced-table-design-playbook-compound-and-interleaved-sort-keys.html" target="_blank" rel="noopener">Compound and Interleaved Sort Keys</a>)<ul><li>compoundは複数のソートキーを指定した場合に、指定順にソートされる。interleavedは多次元のゾーンマップが構成されるので指定順に関係なし</li><li>Merge Joinを狙うか？YESならcompound<ul><li>Merge Joinとなる条件は結合条件に分散キーとソートキーが含まれること<ul><li>Key分散しているテーブル同士でないとMege Joinにはならない。ソートキーが一致していてもKey分散とALL分散ではMerge Joinが選択されない</li></ul></li><li>Hash Joinの方が速いケースもある。結合よりも抽出を高速にした方が良い場合は抽出条件をソートキーにした方が良い</li></ul></li><li>ソートはゾーンマップを改善するか？クエリはゾーンマップを利用するか？<ul><li>ゾーンマップは、1MBブロック毎に、ブロック内の最小値と最大値をメモリー内にメタデータとして保存します<ul><li>各スライス事にゾーンマップを管理する。最低限、カラムデータサイズがスライス数x1MBを超えないと意味がない</li></ul></li><li>FunctionやCAST(暗黙CASTも含むので注意)では利用されない。PostgreSQLのパーティションキーと同じ</li><li>抽出条件指定でcompoundかinterleavedか選択する<ul><li>compoundの場合、第一ソートキーが指定されないと無意味</li><li>とはいえ、vacuum reindexのコストが高いため、interleavedは選びにくい。マート専用か</li></ul></li></ul></li><li>ソートは実行時のソート処理を削減するか？YESならcompound<ul><li>ORDER BY、GROUP BY,　Window関数内のPARTITION BY, ORDER BYなど</li><li>ソートを高速化したいケースでは大概ゾーンマップを利用したくなるはずなので、これだけを理由とするケースはあまり想像できない</li><li><code>where col_a = &#39;a&#39; group by col_b</code>のようなケースでソートキー<code>col_a, col_b</code>が有効かどうか</li></ul></li><li>どれもNOならソートキーにしない</li></ul></li><li>メンテナンス<ul><li>compound<ul><li><code>vacuum delete only</code>はバックグラウンドで実行されるため、バッチの中で<code>vacuum sort only</code>を実行するのは有用かも</li><li>未ソート領域が大きい場合はVACUUMよりもディープコピーを行う</li></ul></li><li>interleaved<ul><li>COPYまたはCTASを使用して空テーブルにロードすると、自動的にインデックスが作成される。INSERTを使用してロードした場合はVACUUM REINDEXの実行が必要</li><li>VACUUM REINDEXのコストが高い。まるごとCTASで作り直す設計にし、VACUUM REINDEXを実行しないことを第一に考えるべき<ul><li>ただしCTASだと圧縮エンコーディングが指定できず、自動設定される</li></ul></li></ul></li></ul></li><li>compound sortkeyの状態確認</li></ul><figure class="highlight sql"><figcaption><span>compound sortkeyの状態確認</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    sti.schema</span><br><span class="line">,   stp.name</span><br><span class="line">,   stp.sorted_rows</span><br><span class="line">,   stp.rows</span><br><span class="line">,   <span class="keyword">round</span>(<span class="number">100.0</span> * stp.sorted_rows / (stp.rows + <span class="number">0.0000001</span>), <span class="number">2</span>) <span class="keyword">as</span> sort_percentage</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        <span class="keyword">id</span></span><br><span class="line">    ,   <span class="keyword">name</span></span><br><span class="line">    ,   <span class="keyword">sum</span>(sorted_rows) <span class="keyword">as</span> sorted_rows</span><br><span class="line">    ,   <span class="keyword">sum</span>(<span class="keyword">rows</span>) <span class="keyword">as</span> <span class="keyword">rows</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        stv_tbl_perm</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">        <span class="keyword">id</span>, <span class="keyword">name</span></span><br><span class="line">    ) stp</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> svv_table_info sti</span><br><span class="line">    <span class="keyword">on</span> stp.id = sti.table_id</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    sti.sortkey_num &gt; <span class="number">0</span></span><br><span class="line"><span class="keyword">and</span> stp.rows &gt; <span class="number">0</span></span><br><span class="line"><span class="keyword">and</span> stp.sorted_rows &lt;&gt; stp.rows</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    sort_percentage</span><br><span class="line">;</span><br></pre></td></tr></table></figure><ul><li>interleaved sortkeyの状態確認</li></ul><figure class="highlight sql"><figcaption><span>interleaved sortkeyの状態確認</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    tbl <span class="keyword">as</span> tbl_id</span><br><span class="line">,   stv_tbl_perm.name <span class="keyword">as</span> table_name</span><br><span class="line">,   <span class="keyword">col</span></span><br><span class="line">,   interleaved_skew</span><br><span class="line">,   last_reindex</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    svv_interleaved_columns</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> stv_tbl_perm</span><br><span class="line">    <span class="keyword">on</span>  svv_interleaved_columns.tbl = stv_tbl_perm.id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="8-4-キー"><a href="#8-4-キー" class="headerlink" title="8-4. キー"></a>8-4. キー</h3><p><code>UNIQUE</code>・<code>PRIMARY KEY</code>・<code>References</code>・<code>FOREIGN KEY</code>はプランナが利用するものの、システムに強制されない(制約にならない)です。</p><h3 id="8-5-データ型"><a href="#8-5-データ型" class="headerlink" title="8-5. データ型"></a>8-5. データ型</h3><ul><li>数値<ul><li>数値データ型には、整数型、10 進数型、および浮動小数点数型などがあります。</li></ul></li></ul><table><thead><tr><th>型</th><th>備考</th></tr></thead><tbody><tr><td><code>SMALLINT</code>/<code>INT2</code></td><td>符号付き2バイト整数</td></tr><tr><td><code>INTEGER</code>/<code>INT</code>/<code>INT4</code></td><td>符号付き4バイト整数</td></tr><tr><td><code>BIGINT</code>/<code>INT8</code></td><td>符号付き8バイト整数</td></tr><tr><td><code>DECIMAL</code>/<code>NUMERIC</code></td><td>任意精度</td></tr><tr><td><code>REAL</code>/<code>FLOAT4</code></td><td>単精度浮動小数点数</td></tr><tr><td><code>DOUBLE PRECISION</code>/<code>FLOAT</code>/<code>FLOAT8</code></td><td>倍精度浮動小数点数</td></tr></tbody></table><ul><li>文字列<ul><li><code>CHAR</code>/<code>VARCHAR</code>は最大長を宣言する代わりに<code>MAX</code>キーワードが使用可能です。</li></ul></li></ul><table><thead><tr><th>型</th><th>備考</th></tr></thead><tbody><tr><td><code>CHAR</code></td><td><strong>バイトセマンティクス</strong>で4096バイト。シングルバイト文字のみ</td></tr><tr><td><code>VARCHAR</code></td><td><strong>バイトセマンティクス</strong>で65535バイト。マルチバイト文字がサポートされており、対応している文字コードはUTF-8、1～4バイト文字まで利用可</td></tr><tr><td><code>TEXT</code></td><td><code>VARCHAR(256)</code>の別名</td></tr></tbody></table><ul><li>日付と時刻<ul><li>日付は<code>DATE</code>、日付時刻には<code>TIMESTAMP</code>と<code>TIMESTAMPTZ</code>がある</li><li>クラスタのタイムゾーンはUTC固定だが、セッションパラメータを変更することは可能</li></ul></li><li>真偽値<ul><li>論理ブール演算型 (true/false)として<code>BOOLEAN</code>/<code>BOOL</code>がある</li></ul></li><li>その他<ul><li>配列・JSONはサポートされていない</li></ul></li></ul><h3 id="8-6-圧縮エンコード"><a href="#8-6-圧縮エンコード" class="headerlink" title="8-6. 圧縮エンコード"></a>8-6. 圧縮エンコード</h3><ul><li><code>ANALYZE COMPRESSION</code>を実行して圧縮率を評価できる<ul><li><code>ANALYZE COMPRESSION</code>は排他的テーブルロックを取得し、テーブルに対する同時読み取り書き込みがブロックされる。<code>ANALYZE COMPRESSION</code>コマンドは、テーブルがアイドル状態になっている場合にのみ実行する。</li></ul></li><li>圧縮エンコードの選択。基本的にはデータドメインで定まる。以下に記載のないエンコーディングは有効なユースケースが不明なので、<code>ANALYZE COMPRESSION</code>で提示されたら検討すると良いと思います。<ul><li>ソートキーカラムは非圧縮(<a href="https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/c_Raw_encoding.html" target="_blank" rel="noopener"><code>RAW</code></a>)にする</li><li>区分値はバイトディクショナリエンコード(<a href="https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/c_Byte_dictionary_encoding.html" target="_blank" rel="noopener"><code>BYTEDICT</code></a>)<ul><li>ディクショナリサイズ: 1MB</li><li>キーサイズ: 1バイト. 最大256個</li><li>列のデータドメインが一意の値 256 個未満である場合に最適</li></ul></li><li>汎用で使われるエンコードは<a href="https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/lzo-encoding.html" target="_blank" rel="noopener"><code>LZO</code></a>と<a href="https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/zstd-encoding.html" target="_blank" rel="noopener"><code>ZSTD</code></a>。<code>ZSTD</code>の方が優れているが、後発であるためか圧縮エンコードを指定しない場合のデフォルトは<code>LZO</code>になる<ul><li>LZO(<code>LZO</code>)<ul><li><code>LZO</code>エンコードは、非常に長い文字列を格納する<code>CHAR</code>および<code>VARCHAR</code>列、特に製品説明、ユーザーコメント、JSON文字列などの自由形式テキストに適している</li><li><code>LZO</code>は、ソートキー、および<code>BOOLEAN</code>、<code>REAL</code>、または<code>DOUBLE PRECISION</code>データ型として定義された列として指定された列以外のエンコードのデフォルトとされている</li></ul></li><li>Zstandard(<code>ZSTD</code>)<ul><li>Zstandard (<code>ZSTD</code>) エンコーディングは、多様なデータセット間で非常にパフォーマンスのいい高圧縮比率を提供します。<code>ZSTD</code> は、製品説明、ユーザーのコメント、ログ、JSON 文字列など、長さがさまざまな文字列を保存する<code>CHAR</code>および<code>VARCHAR</code>列に対して、特に効果を発揮します</li><li>ZSTD では、Amazon Redshift のすべてのデータ型がサポートされています</li></ul></li></ul></li><li>ランレングスエンコード(<a href="https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/c_Runlength_encoding.html" target="_blank" rel="noopener"><code>RUNLENGTH</code></a>)<ul><li>連続して繰り返される値を、値と連続発生数 (実行の長さ) から成るトークンに置き換えます</li><li>ソートキーに関係従属するカラムに使えるかと思いましたが、実測したところ<code>ZSTD</code>の方が高圧縮でした。</li></ul></li></ul></li></ul><p>カラム毎に使用しているブロック数は以下のSQLで確認できます。圧縮の効果が確認できます。</p><figure class="highlight sql"><figcaption><span>利用ブロック数の確認</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    t.schema</span><br><span class="line">,   t.table</span><br><span class="line">,   c.column_name</span><br><span class="line">,   <span class="keyword">max</span>(b.blocknum)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    stv_blocklist b</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">    svv_table_info t</span><br><span class="line">        <span class="keyword">on</span> b.tbl = t.table_id</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">    svv_columns c</span><br><span class="line">        <span class="keyword">on</span> t.schema = c.table_schema</span><br><span class="line">        <span class="keyword">and</span> t.table = c.table_name</span><br><span class="line">        <span class="keyword">and</span> b.col = c.ordinal_position <span class="number">-1</span></span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    t.table = <span class="string">'xxx'</span></span><br><span class="line"><span class="keyword">and</span> c.column_name = <span class="string">'yyy'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="9-データのロードとアンロード・バキューム"><a href="#9-データのロードとアンロード・バキューム" class="headerlink" title="9. データのロードとアンロード・バキューム"></a>9. データのロードとアンロード・バキューム</h2><h3 id="9-1-データロード"><a href="#9-1-データロード" class="headerlink" title="9-1. データロード"></a>9-1. データロード</h3><ul><li><a href="https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/r_COPY.html" target="_blank" rel="noopener">COPY</a>コマンドを使用して、Amazon S3 バケット、Amazon EMR クラスター、リモート ホスト (SSH 接続を使用)、または Amazon DynamoDB テーブルからデータをロードできる</li><li><a href="https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/copy-usage_notes-access-permissions.html#copy-usage_notes-iam-permissions" target="_blank" rel="noopener">COPY、UNLOAD、CREATE LIBRARY のための IAM のアクセス許可</a></li><li>データソース<ul><li>Amazon S3 からの COPY<ul><li>オブジェクトプリフィックス(<code>/</code>終わりでなくても良い)</li><li>マニフェストファイルパス</li></ul></li><li>Amazon EMR からの COPY</li><li>リモートホスト (SSH) からの COPY</li><li>Amazon DynamoDB からの COPY</li></ul></li><li>データ形式<ul><li><code>CSV [ QUOTE [AS] &#39;quote_character&#39; ] [DELIMITER [AS] &#39;delimiter_char&#39;]</code><ul><li>デフォルトの引用文字は二重引用符 ( “ ) だが、<code>QUOTE</code>オプションを使用して別の引用文字を指定できる</li><li>デフォルトの区切り記号はカンマ (,) だが、<code>DELIMITER</code>パラメータを使用して別の区切り記号を指定できる</li></ul></li><li><code>DATE</code>列と<code>TIMESTAMP</code>列をロードする場合、日付の場合は <code>YYYY-MM-DD</code>で、タイムスタンプの場合は<code>YYYY-MM-DD HH:MI:SS</code>がデフォルトの形式となる。デードデータでデフォルトの形式が使用されていない場合、<code>DATEFORMAT</code>と<code>TIMEFORMAT</code>を使用して形式を指定できる</li></ul></li><li>ファイル圧縮<ul><li><code>BZIP2</code>/<code>GZIP</code>/<code>LZOP</code>/<code>ZSTD</code></li><li><code>LZOP</code>形式では<code>UNLOAD</code>できない。<code>BZIP2</code>は時間がかかるので、<code>GZIP</code>が無難</li><li><code>ZSTD</code>はAmazon S3からCOPYを使用する場合のみサポートされる</li></ul></li><li>その他パラメータ(通常は<code>STATUPDATE ON</code>だけ指定する運用で良いと思われる)<ul><li><code>COMPROWS numrows</code>: 圧縮分析のサンプルサイズ(スライス合計)として使用される行数を指定する。<code>COMPROWS</code>を指定しない場合、サンプルサイズはデフォルトでスライスごとに100,000になる。<code>COMPROWS</code>の値がスライスごとに100,000行のデフォルト値より小さい場合、自動的にデフォルト値にアップグレードされる。ただし、ロードされるデータの量が有意のサンプルとしては不十分な場合、自動圧縮は実行されない</li><li><code>COMPUPDATE [ { ON | TRUE } | { OFF | FALSE } ]</code>: <code>COMPUPDATE</code>を省略した場合、ターゲットテーブルが空であり、テーブルのすべての列に<code>RAW</code>エンコードがあるかまったくエンコードがないときにのみ、<code>COPY</code>は自動圧縮を適用する。<code>COMPUPDATE ON</code>(または<code>TRUE</code>)の場合、テーブル列に<code>RAW</code>以外のエンコードがある場合も、テーブルが空であれば<code>COPY</code>は自動圧縮を適用します。<code>COMPUPDATE OFF</code>(または<code>FALSE</code>)の場合、自動圧縮は無効になる。</li><li><code>MAXERROR AS error_count</code>: ロードのエラー数が<em>error_count</em>以上である場合、ロードは失敗する。ロードのエラーがそれより少ない場合、処理は続行される(正常データのみロードされる)</li><li><code>NOLOAD</code>: データを実際にロードせずにデータファイルの有効性をチェックする</li><li><code>STATUPDATE [ { ON | TRUE } | { OFF | FALSE } ]</code>: <code>ON</code>(または<code>TRUE</code>)の場合、テーブルが最初に空であるかどうかに関係なく、統計は自動的に更新される。<code>STATUPDATE</code>パラメータを使用しない場合、テーブルが最初は空ならば、統計は自動的に更新される</li></ul></li><li><code>ALTER TABLE RENAME</code>はトランザクション内で実行できるので、TMPにロード-&gt; TAB RENAME TO BK-&gt;TMP RENAME TABのような入れかえができる</li></ul><h3 id="9-2-データアンロード"><a href="#9-2-データアンロード" class="headerlink" title="9-2. データアンロード"></a>9-2. データアンロード</h3><p>参考: <a href="https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/r_UNLOAD.html" target="_blank" rel="noopener">UNLOAD</a></p><ul><li>出力可能な形式<ul><li>固定長(<code>FIXWIDTH</code>)</li><li>Character Separated Values(<code>DELIMITER</code>)<ul><li>基本的に<code>ESCAPE</code>オプションを付けておいた方が無難<ul><li>エスケープ文字は<code>\</code></li><li>ラインフィード・キャリッジリターン・区切り文字・エスケープ文字・引用符(<code>ADDQUOTES</code>を指定した場合)がエスケープされる</li></ul></li></ul></li></ul></li><li>クエリで<code>ORDER BY</code>句を指定してソート順にデータをアンロードしておくと、データの再ロード時にデータをソートするために必要な時間を節約できる<ul><li><code>TOP</code>は <code>SELECT</code>句ではサポートされていない。代わりに<code>LIMIT</code>を使用する</li><li><code>SELECT</code>クエリは、外部の<code>SELECT</code>で<code>LIMIT</code>句を使用することはできない<ul><li>ネストするか、別テーブルにデータを移してからUNLOADする</li><li><code>select ... limit 10</code>はダメで、<code>select ... from (select ... limit 10)</code>はOKということ</li></ul></li></ul></li><li>クエリの中に引用符 (たとえば、リテラル値を囲むため) またはバックスラッシュ (<code>\</code>) がある場合は、クエリテキスト内でバックスラッシュでエスケープする必要がある</li><li>書き込み先にマニフェストファイルを指定する場合(<code>MANIFEST</code>オプションを指定する場合)、「manifest」サフィックスが自動的に付与されるため、<code>name_prefix</code>には含めない</li><li>マニフェストファイルを指定しない場合の出力フォーマットは<code>&lt;object-path&gt;/&lt;name-prefix&gt;&lt;slice-number&gt;_part_&lt;part-number&gt;</code></li><li>ヘッダー出力する場合は<code>HEADER</code>オプション。固定長では出力できない</li><li>圧縮する場合は<code>BZIP2</code>オプションか<code>GZIP</code>オプションを付与する</li><li>デフォルトでは既存ファイルの上書きは行わない。上書きする場合は<code>ALLOWOVERWRITE</code>オプションを付与する</li><li>デフォルトではスライス数に応じて複数ファイルに並列書き込みを行う。オフにする場合は<code>PARALLEL OFF</code></li><li>ファイルサイズ上限を指定すると1ファイルあたりのサイズ上限が指定できる。デフォルトでは6.2GB.</li></ul><h3 id="9-3-VACUUM"><a href="#9-3-VACUUM" class="headerlink" title="9-3. VACUUM"></a>9-3. VACUUM</h3><p>参考: <a href="https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/r_VACUUM_command.html" target="_blank" rel="noopener">VACUUM</a></p><ul><li>テーブルの所有者またはスーパーユーザーのみがテーブルにバキューム処理を実行できる</li><li><code>VACUUM</code>にはサブコマンドで指定される以下のモードがある<ul><li><code>SORT ONLY</code>: ソートのみ。<code>Compound Sort Key</code>のメンテナンス<ul><li>デフォルトではテーブルの行の95パーセント以上がすでにソートされているテーブルのソートフェーズをスキップする。実行時に<code>TO threshold PERCENT</code>オプションを指定することでしきい値を変更できる</li></ul></li><li><code>DELETE ONLY</code>: 削除のみ。バックグラウンドで自動的にDELETE ONLY Vacuumを実行するため、手動実行する必要は通常ない<ul><li>デフォルトでは残りの行の少なくとも95パーセントが削除対象としてマークされていない領域を再利用する。実行時に<code>TO threshold PERCENT</code>オプションを指定することでしきい値を変更できる</li><li>ユーザーが<code>ALTER TABLE</code>などのデータ定義言語 (DDL) 操作を実行すると、自動バキューム操作は一時停止する</li></ul></li><li><code>FULL</code>(デフォルト): ソート＋削除。<code>TO threshold PERCENT</code>オプションを指定すると、ソートと削除の両方にしきい値が適用される</li><li><code>REINDEX</code>: <code>Interleaved Sort Key</code>のメンテナンス。<code>VACUUM FULL</code>よりも大幅に実行時間が長くなる</li></ul></li><li>排他制御<ul><li>トランザクションブロック内で<code>VACUUM</code>は実行できない</li><li><code>VACUUM</code>開始時にテーブルへの一時的な排他アクセスが必要になる</li><li>ユーザーは、バキューム処理中のテーブルにアクセスできる。バキューム処理中のテーブルにクエリおよび書き込み操作を実行できるが、データ操作言語 (DML) コマンドおよびバキュームを同時に実行すると両方の処理時間が長くなる可能性がある。バキューム処理中に<code>UPDATE</code>および<code>DELETE</code>ステートメントを実行する場合は、システムのパフォーマンスが低減する場合がある。<code>VACUUM DELETE</code>は、更新操作と削除操作を一時的にブロックする</li></ul></li><li>一度にクラスターで実行できる<code>VACUUM</code>コマンドは1つだけ<ul><li>vacuum専用のキューを作るのが簡単か</li></ul></li><li><code>VACUUM</code>では<code>ANALYZE</code>はされない</li></ul><h2 id="10-ラッシュパフォーマンス"><a href="#10-ラッシュパフォーマンス" class="headerlink" title="10. ラッシュパフォーマンス"></a>10. ラッシュパフォーマンス</h2><p>RedshiftのWLMにおける推奨同時クエリ実行数は15です。<br>これまでこの点を根拠として大量の参照クエリを受け付けるワークロードには不向きと考えられてきました。<br>しかしながら最近の機能アップデートにより、大量の参照クエリを処理する仕組みがRedshiftにも備わっています。</p><h3 id="10-1-Result-Caching"><a href="#10-1-Result-Caching" class="headerlink" title="10-1. Result Caching"></a>10-1. Result Caching</h3><ul><li>リーダーノード内のメモリにクエリ結果をキャッシュする。受け付けたクエリに対応する結果がキャッシュに含まれている場合、コンピュートノード上での処理を伴わずに結果が返却される</li><li><code>select limit 1000</code>でキャッシュされた結果は<code>limit 100</code>でも有効</li><li>コメントが違うだけのSQLであればキャッシュが使われる</li><li>JDBCでPreparedStatementを使用した場合、ログ上は同じSQLのように見えるが、バインド値が同じでないとキャッシュヒットしないし、同じあればヒットする</li><li>セッションレベルでは<code>enable_result_cache_for_session = off</code>で無効化できる</li></ul><p>キャッシュヒットしたクエリの確認</p><figure class="highlight sql"><figcaption><span>キャッシュヒットしたクエリ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    userid</span><br><span class="line">,   <span class="keyword">query</span></span><br><span class="line">,   starttime</span><br><span class="line">,   endtime</span><br><span class="line">,   elapsed</span><br><span class="line">,   <span class="keyword">substring</span></span><br><span class="line">,   source_query</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    svl_qlog</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    source_query <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>キャッシュヒット率の確認</p><figure class="highlight sql"><figcaption><span>キャッシュヒット率確認</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>)</span><br><span class="line">,   <span class="keyword">count</span>(source_query)</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    svl_qlog q</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    q.userid = <span class="number">103</span></span><br><span class="line"><span class="keyword">and</span> q.starttime &gt; <span class="string">'2019-04-12 9:07:00'</span></span><br><span class="line"><span class="keyword">and</span> q.endtime &lt; <span class="string">'2019-04-12 9:08:00'</span></span><br></pre></td></tr></table></figure><h3 id="10-2-Short-Query-Acceleration"><a href="#10-2-Short-Query-Acceleration" class="headerlink" title="10-2. Short Query Acceleration"></a>10-2. Short Query Acceleration</h3><ul><li>実行時間が短いと判定された一部のクエリを、実行時間が長いクエリよりも優先する</li><li>SQAでは実行時間が短いクエリを専用領域で実行する。SQA用のWLMキューを事前定義する必要はない</li><li>SQAは実行時間が短く、ユーザー定義のキュー内にあるクエリのみを優先する。デフォルトキューでは無効</li><li>クエリのパターンをSQAが学習するため、時間が経つほど予測精度は向上する</li><li>対象クエリは<code>CTAS</code>と<code>SELECT</code>(正確には読み取り専用クエリ)</li></ul><p>サービスクエリ別クエリ統計。SQAクエリはサービスクラス14を使用する。</p><figure class="highlight sql"><figcaption><span>サービスクエリ別クエリ統計</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> final_state, service_class, <span class="keyword">count</span>(*), <span class="keyword">avg</span>(total_exec_time),</span><br><span class="line"><span class="keyword">percentile_cont</span>(<span class="number">0.9</span>) <span class="keyword">within</span> <span class="keyword">group</span> (<span class="keyword">order</span> <span class="keyword">by</span> total_queue_time), <span class="keyword">avg</span>(total_queue_time)</span><br><span class="line"><span class="keyword">from</span> stl_wlm_query <span class="keyword">where</span> userid &gt;= <span class="number">100</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="number">1</span>,<span class="number">2</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">2</span>,<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>SQA によって選択され正常に完了したクエリの特定</p><figure class="highlight sql"><figcaption><span>SQAによって選択され正常に完了したクエリの特定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.queue_start_time, a.total_exec_time, label, <span class="keyword">trim</span>(querytxt)</span><br><span class="line"><span class="keyword">from</span> stl_wlm_query a, stl_query b</span><br><span class="line"><span class="keyword">where</span> a.query = b.query <span class="keyword">and</span> a.service_class = <span class="number">14</span> <span class="keyword">and</span> a.final_state = <span class="string">'Completed'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> b.query <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>SQA で選択されたがタイムアウトしたクエリの特定</p><figure class="highlight sql"><figcaption><span>SQAで選択されたがタイムアウトしたクエリの特定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.queue_start_time, a.total_exec_time, label, <span class="keyword">trim</span>(querytxt)</span><br><span class="line"><span class="keyword">from</span> stl_wlm_query a, stl_query b</span><br><span class="line"><span class="keyword">where</span> a.query = b.query <span class="keyword">and</span> a.service_class = <span class="number">14</span> <span class="keyword">and</span> a.final_state = <span class="string">'Evicted'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> b.query <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><h3 id="10-3-同時実行スケーリング"><a href="#10-3-同時実行スケーリング" class="headerlink" title="10-3. 同時実行スケーリング"></a>10-3. 同時実行スケーリング</h3><ul><li>詳しくは<a href="https://www.slideshare.net/AmazonWebServices/modern-cloud-data-warehousing-ft-intuit-optimize-analytics-practices-ant202r1-aws-reinvent-2018" target="_blank" rel="noopener">Modern Cloud Data Warehousing ft. Intuit: Optimize Analytics Practices (ANT202-R1) - AWS re:Invent 2018</a></li><li>参照系クエリ専用のノードが自動的に起動される<ul><li><code>Concurrency Scaling Mode</code>を<code>auto</code>に設定したキューで滞留が発生すると起動される<ul><li>ただし、短時間(3秒未満くらい)のクエリが滞留しても起動されなかった。仕様なのか不明</li><li>WLMキューを増やしても起動されなくなった。ある程度さばけていると判定されると起動しないのか</li><li>滞留だけでなくスループット等もトリガーにしていると思われるが、不明</li></ul></li><li>実測してみると負荷投入後、速ければ数秒遅くとも数十秒程度のラグで起動した</li><li>滞留しないように必要なだけのクラスタが<code>max_concurrency_scaling_clusters</code>の範囲内で起動される。クラスタ一つあたりの並列度を指定することはできなかった</li></ul></li><li>24時間毎に1時間分のクレジットが最大30時間まで与えられる</li><li>利用できるクエリは以下の制約を満たす必要がある<ul><li>Read Only</li><li>interleaved sort keyを設定したテーブルを参照しない</li><li>Redshift Spectrumを参照しない</li><li>テンポラリテーブルを参照しない</li></ul></li></ul><p>メインクラスターと同時実行クラスターとで実行されたクエリの統計</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> w.service_class <span class="keyword">AS</span> queue</span><br><span class="line">     , q.concurrency_scaling_status</span><br><span class="line">     , <span class="keyword">COUNT</span>( * ) <span class="keyword">AS</span> queries</span><br><span class="line">     , <span class="keyword">SUM</span>( q.aborted )  <span class="keyword">AS</span> aborted</span><br><span class="line">     , <span class="keyword">SUM</span>( <span class="keyword">ROUND</span>( total_queue_time::<span class="built_in">NUMERIC</span> / <span class="number">1000000</span>,<span class="number">2</span> ) ) <span class="keyword">AS</span> queue_secs</span><br><span class="line">     , <span class="keyword">SUM</span>( <span class="keyword">ROUND</span>( total_exec_time::<span class="built_in">NUMERIC</span> / <span class="number">1000000</span>,<span class="number">2</span> ) )  <span class="keyword">AS</span> exec_secs</span><br><span class="line"><span class="keyword">FROM</span> stl_query q</span><br><span class="line">     <span class="keyword">JOIN</span> stl_wlm_query w</span><br><span class="line">          <span class="keyword">USING</span> (userid,<span class="keyword">query</span>)</span><br><span class="line"><span class="keyword">WHERE</span> q.userid = <span class="number">103</span></span><br><span class="line"><span class="keyword">AND</span> q.starttime &gt; <span class="string">'2019-04-12 7:20:00'</span></span><br><span class="line"><span class="keyword">AND</span> q.endtime &lt; <span class="string">'2019-04-12 7:45:00'</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">1</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="11-Redshift-Spectrum"><a href="#11-Redshift-Spectrum" class="headerlink" title="11. Redshift Spectrum"></a>11. Redshift Spectrum</h2><h3 id="11-1-料金"><a href="#11-1-料金" class="headerlink" title="11-1. 料金"></a>11-1. 料金</h3><p>Redshiftそれ自体と異なり、スキャンされたデータ1TBにつき5USDの課金となります。<br>クエリ単位で10MB以下のスキャンは切り上げられます。</p><h3 id="11-2-準備"><a href="#11-2-準備" class="headerlink" title="11-2. 準備"></a>11-2. 準備</h3><p><a href="https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/c-spectrum-iam-policies.html" target="_blank" rel="noopener">Amazon Redshift Spectrum 用の IAM ポリシー</a> が必要です。</p><h3 id="11-3-ファイルフォーマット"><a href="#11-3-ファイルフォーマット" class="headerlink" title="11-3. ファイルフォーマット"></a>11-3. ファイルフォーマット</h3><p>多くの形式(PARQUESTかORCが無難.AWSのドキュメントではORCよりもParquestを推奨しているように見受けられます)に対応しています。</p><ul><li>AVRO</li><li>PARQUET</li><li>TEXTFILE</li><li>SEQUENCEFILE</li><li>RCFILE</li><li>RegexSerDe</li><li>ORC</li><li>Grok</li><li>OpenCSV</li><li>Ion</li><li>JSON</li></ul><p>圧縮(PARQUEST/ORCは圧縮込みのフォーマット)は以下に対応しています。</p><ul><li>gzip: 普通</li><li>Snappy: 高速</li><li>bzip2: 高圧縮</li></ul><p>ファイルは64MB以上で均等に分割されます。</p><h3 id="11-4-パーティション"><a href="#11-4-パーティション" class="headerlink" title="11-4. パーティション"></a>11-4. パーティション</h3><p>パーティション表に追加できる数(<a href="https://docs.aws.amazon.com/ja_jp/redshift/latest/mgmt/amazon-redshift-limits.html" target="_blank" rel="noopener">Amazon Redshift における制限</a>)があります。</p><ul><li>テーブルあたりのパーティション数の上限: 1,000,000</li><li>アカウントあたりのパーティション数の上限: 10,000,000</li></ul><p>参考: <a href="https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/c-spectrum-external-tables.html#c-spectrum-external-tables-partitioning" target="_blank" rel="noopener">Redshift Spectrum 外部テーブルのパーティション化</a></p><h3 id="11-5-注意"><a href="#11-5-注意" class="headerlink" title="11-5. 注意"></a>11-5. 注意</h3><p>統計情報の設定(<code>TABLE PROPERTIES (numRows&#39;=&#39;row_count&#39;)</code>)は必須です。設定されていないとプランが崩れます。</p><h3 id="11-6-使いどころ"><a href="#11-6-使いどころ" class="headerlink" title="11-6. 使いどころ"></a>11-6. 使いどころ</h3><ul><li>スキャンや集約インテンシブなワークロードを並行で実行するようなユースケース<ul><li>S3に対する検索はユーザーが予約しているリーダーノード・コンピュートノードとは別のリソースが使われるため、Redshift Spectrumだけを利用するのであれば、コンピュートノードには負荷がかかりません</li><li>フィルタ(<code>where</code>)や集約(<code>group by</code>)はRedshift Spectrum層で処理されます</li><li>結果的に同時実行性能が大きく向上します</li></ul></li><li>結合する際はRedshiftにデータをもった方が有利です。結合する場合はRedshift Spectrumの検索結果がコンピュートノードへ分散される。例えばRedshift Spectrumのファクトを抽出・集約してデータ量を減らしてから、Redshiftのディメンジョンと結合するようなクエリは有効に作用すると期待されます</li><li>古いデータはS3に追い出して、ビュー(<code>create view with no schema binding</code>)でRedshiftのテーブルと連結(<code>union all</code>)することで、ビューに対して検索すると、RedshiftのテーブルとRedshift Spectrumの両方を透過的に検索できます<ul><li>上記のような使い方を考えたくなるのですが、別テーブルと結合した際の実行計画がまったく最適化されないので、基本的に結合するような使い方はダメなようなです<ul><li>(A UNION ALL B) JOIN CのようなケースでA JOIN C とB JOIN Cに分解されないため、分散スタイルが有効に使えません。</li></ul></li><li>フィルタや集約はRedshift Spectrum層で処理されるため、有効です。</li></ul></li></ul><h2 id="12-参考資料"><a href="#12-参考資料" class="headerlink" title="12. 参考資料"></a>12. 参考資料</h2><h3 id="12-1-AWS公式"><a href="#12-1-AWS公式" class="headerlink" title="12-1. AWS公式"></a>12-1. AWS公式</h3><ul><li><a href="https://docs.aws.amazon.com/ja_jp/redshift/latest/dg/c_loading-data-best-practices.html" target="_blank" rel="noopener">Amazon Redshift のデータロードのベストプラクティス</a></li><li><a href="https://www.slideshare.net/AmazonWebServicesJapan/amazon-redshiftamazon-quicksightdwh" target="_blank" rel="noopener">Amazon RedshiftとAmazon QuickSightで実現する、長く使えるDWH作り</a></li><li><a href="https://aws.typepad.com/sajp/2015/12/top-10-performance-tuning-techniques-for-amazon-redshift.html" target="_blank" rel="noopener">Amazon Redshiftのパフォーマンスチューニングテクニック Top 10</a></li><li><a href="https://aws.typepad.com/sajp/2016/12/amazon-redshift-engineerings-advanced-table-design-playbook-preamble-prerequisites-and-prioritization.html" target="_blank" rel="noopener">Amazon Redshift テーブル設計詳細ガイド:Part 1 序文、事前準備、優先順位付け</a></li><li><a href="https://aws.typepad.com/sajp/2016/12/amazon-redshift-engineerings-advanced-table-design-playbook-distribution-styles-and-distribution-keys.html" target="_blank" rel="noopener">Amazon Redshift テーブル設計詳細ガイド:Part 2 分散スタイルと分散キー</a></li><li><a href="https://aws.typepad.com/sajp/2016/12/amazon-redshift-engineerings-advanced-table-design-playbook-compound-and-interleaved-sort-keys.html" target="_blank" rel="noopener">Amazon Redshift テーブル設計詳細ガイド:Part 3 Compound and Interleaved Sort Keys（Compound と Interleaved ソートキー）</a></li><li><a href="https://aws.typepad.com/sajp/2016/12/amazon-redshift-engineerings-advanced-table-design-playbook-compression-encodings.html" target="_blank" rel="noopener">Amazon Redshift テーブル設計詳細ガイド:Part 4 圧縮エンコーディング</a></li><li><a href="https://aws.typepad.com/sajp/2016/12/amazon-redshift-engineerings-advanced-table-design-playbook-table-data-durability.html" target="_blank" rel="noopener">Amazon Redshift テーブル設計詳細ガイド:Part 5 テーブルデータの永続性</a></li><li><a href="https://aws.amazon.com/jp/blogs/big-data/10-best-practices-for-amazon-redshift-spectrum/" target="_blank" rel="noopener">Twelve Best Practices for Amazon Redshift Spectrum</a><ul><li>和訳が<a href="https://aws.amazon.com/jp/blogs/news/10-best-practices-for-amazon-redshift-spectrum/" target="_blank" rel="noopener">Amazon Redshift Spectrum 10 のベストプラクティス</a>にありますが、内容が少し異なるようです。</li></ul></li><li><a href="https://www.slideshare.net/AmazonWebServicesJapan/20190122-aws-black-belt-online-seminar-amazon-redshift-update" target="_blank" rel="noopener">20190122 AWS Black Belt Online Seminar Amazon Redshift Update</a></li></ul><h3 id="12-2-他社事例"><a href="#12-2-他社事例" class="headerlink" title="12-2. 他社事例"></a>12-2. 他社事例</h3><ul><li><a href="http://www.slideshare.net/mineroaoki/at-aws-summit-tokyo-2014" target="_blank" rel="noopener">Amazon Redshiftによるリアルタイム分析サービスの構築</a></li><li><a href="https://hack.nikkei.com/blog/hundred_users_redshift/" target="_blank" rel="noopener">Redshiftを数百人で使うためのコツ（クラスター構成編）</a></li></ul><h3 id="12-3-要素技術"><a href="#12-3-要素技術" class="headerlink" title="12-3. 要素技術"></a>12-3. 要素技術</h3><ul><li><a href="https://qiita.com/nishemon/items/818cc64dc2f8577edd87" target="_blank" rel="noopener">2016年のOSS圧縮ツール選択カタログ</a></li><li><a href="https://engineer.retty.me/entry/columnar-storage-format" target="_blank" rel="noopener">カラムナフォーマットのきほん 〜データウェアハウスを支える技術〜</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;クラウド環境におけるDWHの選択肢として、Redshiftはもはや珍しいものではなくなりましたが、弊社内の採用実績はそれほど多くはありませんでした。&lt;br&gt;本記事は元々そのような社内向けに、Redshiftの基本的な仕様をなるべく網羅的に理解できるようまとめたものです。&lt;/
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>RedmineからGoogle Hangouts Chat へ連携するプラグインを作成しました！</title>
    <link href="https://future-architect.github.io/articles/20190620/"/>
    <id>https://future-architect.github.io/articles/20190620/</id>
    <published>2019-06-20T00:15:06.000Z</published>
    <updated>2019-06-20T15:29:08.321Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG（Technology Innovation Group）所属の高橋です。</p><p>みなさん、課題管理システムは何を使っていますか？</p><p>弊社ではほぼ全てのプロジェクトでRedmineを採用しており、毎日1000以上のユーザが利用しています。これにより管理の標準化と品質向上を図っています。</p><p>なお、2019年2月にデブサミで発表しておりますのでこちらの記事も併せてご覧ください。<br><a href="https://future-architect.github.io/articles/20190607/">https://future-architect.github.io/articles/20190607/</a></p><p>一方、ビジネスツールとしてはG-Suite(Google Drive,Spreadsheets,Hangouts Chat等)を全社的に利用しています。コミュニケーションはGoogle Hangouts Chatで取ることが多くなり、メールの送信件数も従来から約25%減少しました。</p><p>今回RedmineからGoogle hangouts chatへ更新内容を連携するプラグインを作成しましたので紹介させていただきます。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Redmineの更新をメールで通知する運用を行っていましたが、以下のような課題がありました。</p><p>・Redmineの通知メールが多くて結局見ていない<br>・Redmineチケットに書くほどでもないが内部で少し相談したいことがある<br>・対応すべきチケットが放置されていた</p><p>Google Hangouts Chatでのコミュニケーションが増えるにつれメールのやり取りが相対的に減り、メールではなくGoogle Hangouts Chatへ通知されることが望まれるようになりました。</p><h2 id="プラグインの調査"><a href="#プラグインの調査" class="headerlink" title="プラグインの調査"></a>プラグインの調査</h2><p>Redmineは様々なプラグインが公開されており、Google Hangouts Chatへ通知するプラグインも既に公開されていました。<br><a href="https://github.com/patope/redmine-hangouts-chat" target="_blank" rel="noopener">https://github.com/patope/redmine-hangouts-chat</a></p><p>このプラグインは以下のような仕様でした。<br>・Redmineチケットのリンクのみ通知する<br>・チャットルームのスレッドをRedmineチケットの更新ごとに分けて通知する</p><p>チケット内容は通知しないためRedmineへ内容を確認しに行く必要があり、更新ごとにスレッドが分かれるためチャットルームでチケットごとの流れを把握することが難しく、要望とはマッチしませんでした。</p><h2 id="作成したプラグインの概要"><a href="#作成したプラグインの概要" class="headerlink" title="作成したプラグインの概要"></a>作成したプラグインの概要</h2><p><strong>Redmine Google Hangouts Chat Plugin</strong><br><a href="https://github.com/future-architect/redmine_hangouts_chat_integration" target="_blank" rel="noopener">https://github.com/future-architect/redmine_hangouts_chat_integration</a></p><p>​Redmineでチケット起票や更新のイベントが発生した際に、自動的にGoogle Hangouts Chatのチャットルームにメッセージが送信されます。</p><h3 id="主な機能"><a href="#主な機能" class="headerlink" title="主な機能"></a>主な機能</h3><ol><li>Redmineチケットごとにチャットルームのスレッドを分けてチケットの内容/各ステータス更新を通知します</li><li>プロジェクト単位で、チャットルーム通知先の設定ができます</li><li>指定したユーザのチケット更新を通知対象外として設定できます</li></ol><h2 id="インストールと設定"><a href="#インストールと設定" class="headerlink" title="インストールと設定"></a>インストールと設定</h2><h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><ol><li>Githubから最新の​「Redmine Hangouts Chat Integration plugin」ソースをダウンロードして、$REDMINE_ROOT/pluginsに展開します</li><li>$REDMINE_ROOTの直下で下記コマンドを実行し、インストールします<pre>$ bundle install</pre></li><li>カスタムフィールド作成のため、$REDMINE_ROOTの直下で、下記コマンドを実行します<pre>$ RAILS_ENV=production rake redmine:plugins:migrate</pre></li></ol><h3 id="Google-Hangouts-Chat設定"><a href="#Google-Hangouts-Chat設定" class="headerlink" title="Google Hangouts Chat設定"></a>Google Hangouts Chat設定</h3><h4 id="Webhook用URL生成"><a href="#Webhook用URL生成" class="headerlink" title="Webhook用URL生成"></a>Webhook用URL生成</h4><ol><li><p>Hangouts chat ページ最上部にあるグループ名をクリック</p></li><li><p>「Webhook を設定」をクリック</p><img src="/images/20190620/photo_20190620_01.png" style="border:solid 1px #000000"></li><li><p>立ち上がったポップアップへ以下情報を入力後、保存をクリック</p><ul><li>名前=<strong>チャット投稿するBOT名</strong></li><li>アバターのURL=<strong>チャット投稿するBOTのアバター</strong><img src="/images/20190620/photo_20190620_02.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li><li><p>アイコンをクリックしWebhookURLをコピーします</p><img src="/images/20190620/photo_20190620_03.png" class="img-middle-size" style="border:solid 1px #000000">​ </li></ol><h3 id="Redmine設定"><a href="#Redmine設定" class="headerlink" title="Redmine設定"></a>Redmine設定</h3><h4 id="各プロジェクト設定"><a href="#各プロジェクト設定" class="headerlink" title="各プロジェクト設定"></a>各プロジェクト設定</h4><p>Redmineプロジェクト別にチャットルームを分ける場合はプロジェクト別の設定画面でWebhook URL設定を行います。<br>Redmineプロジェクト単位にチャットルームをわける必要がない場合は後述。<br>Redmineプロジェクト別設定は全プロジェクト設定より優先されます。</p><ol><li>Redmineプロジェクト管理者権限があるアカウントでログイン</li><li>プロジェクトの「設定」の「情報」の「Hangouts Chat Webhook」にプロジェクト別のWebhookURLに貼り付けます<img src="/images/20190620/photo_20190620_04.png" style="border:solid 1px #000000"></li></ol><h4 id="全プロジェクト設定"><a href="#全プロジェクト設定" class="headerlink" title="全プロジェクト設定"></a>全プロジェクト設定</h4><p>Redmineプロジェクト単位にチャットルームを分ける必要がない場合はプラグイン設定画面で指定してします。<br>全プロジェクト同じチャットルームへの通知となります。</p><ol><li>Redmine管理者権限があるアカウントでログイン</li><li>ページ最上部にある「管理」をクリック</li><li>左側の「プラグイン」をクリック<img src="/images/20190620/photo_20190620_05.png" class="img-small-size" style="border:solid 1px #000000"></li><li>「Redmine Hangouts Chat Integration plugin」の「設定」をクリック<img width="717" class="img-middle-size" src="/images/20190620/d72ca067-8bef-dbec-b934-059597c9d72f.png" style="border:solid 1px #000000"></li><li>「Webhook」の入力欄に先ほどのWebhookURLを貼り付けます<img src="/images/20190620/photo_20190620_06.png" style="border:solid 1px #000000"></li></ol><h4 id="特定ユーザだけ通知を無効"><a href="#特定ユーザだけ通知を無効" class="headerlink" title="特定ユーザだけ通知を無効"></a>特定ユーザだけ通知を無効</h4><p>特定ユーザからのチケット更新の通知を無効にしたい場合は「個人設定」の「Hangouts Chat Disabled」を「はい」にします。　　<br>Rest Api経由でチケットを大量に生成する場合等に特定ユーザの連携を無効化できるようにしています。</p><h3 id="使用例"><a href="#使用例" class="headerlink" title="使用例"></a>使用例</h3><p>一例ですが、Redmineでチケットが起票され、その対応をチャットルームで話し合い、チケットを更新する、という流れができました。</p><img src="/images/20190620/photo_20190620_07.png" style="border:solid 1px #000000"><h3 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h3><p>今回紹介したプラグインを用いることでRedmineを証跡管理、Google Hangouts Chatをコミュニケーションツール、という形の使い分けがスムーズになりました。社内でも好評利用中です。<a href="https://github.com/future-architect/redmine_hangouts_chat_integration" target="_blank" rel="noopener">Github</a>からダウンロード可能ですのでお試しください。Pull Requestもお待ちしております。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIG（Technology Innovation Group）所属の高橋です。&lt;/p&gt;
&lt;p&gt;みなさん、課題管
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Redmine" scheme="https://future-architect.github.io/tags/Redmine/"/>
    
  </entry>
  
  <entry>
    <title>ICLR2019 参加報告ブログ</title>
    <link href="https://future-architect.github.io/articles/20190617/"/>
    <id>https://future-architect.github.io/articles/20190617/</id>
    <published>2019-06-17T00:00:00.000Z</published>
    <updated>2019-06-20T15:29:01.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Strategic AI Groupの田中です。<br>先月の<a href="https://future-architect.github.io/articles/20190515/">AI EXPO出展報告</a>ぶりになります。</p><p>5/6-5/9にアメリカ ニューオーリンズで開催された<a href="https://iclr.cc/Conferences/2019" target="_blank" rel="noopener">ICLR2019</a>に、私と貞光で参加してきました！</p><p>ICLR(International Conference on Learning Representation)とは、</p><ul><li>2019年の投稿数が1,590件</li><li>ポスター発表が454件(採択率6.9%)</li><li>口頭発表が24件(採択率1.5%)</li></ul><p>…という、非常に狭き門なディープラーニング系のトップカンファレンスです！</p><p>1,400人のレビュアーが、レビュー内容が一般にも公開されるウェブサービス、<a href="https://openreview.net/" target="_blank" rel="noopener">OpenReview</a>を使用してレビューを行います。</p><p>発表者は、企業ではGAFAM(Google, Apple, Facebook, Amazon, Microsoft)が圧倒的な多さ。<br>大学だとStanford, MIT, RICE, BAIRなどが多かったです。</p><p>国別だと、アメリカ、中国が圧倒的。ヨーロッパ、韓国も比較的多く感じました。</p><h1 id="論文紹介"><a href="#論文紹介" class="headerlink" title="論文紹介"></a>論文紹介</h1><p>私が専門とするNLPについての発表2本、</p><p>論文1: The Neuro-Symbolic Concept Learner: Interpreting Scenes, Words, and Sentences From Natural Supervision<br>論文2: Wizard of Wikipedia: Knowledge-Powered Conversational Agents</p><p>と、ICLRでホットトピックになっていた　Robustness, メタ学習, GNN関連の発表、</p><p>論文3: ImageNet-trained CNNs are biased towards texture; increasing shape bias improves accuracy and robustness<br>論文4: A Closer Look at Few-shot Classification<br>論文5: How Powerful are Graph Neural Networks?</p><p>について、それぞれまとめています。</p><iframe src="//www.slideshare.net/slideshow/embed_code/key/vS4eTXxoSAkhio" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/secret/vS4eTXxoSAkhio" title="future study group_iclr2019_nlp" target="_blank">future study group_iclr2019_nlp</a> </strong> from <strong><a href="https://www.slideshare.net/cbutters400" target="_blank">Shun Tanaka</a></strong> </div><iframe src="//www.slideshare.net/slideshow/embed_code/key/MPTB6KnvPE9lZt" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/secret/MPTB6KnvPE9lZt" title="future study group_iclr2019_robustness,meta-learning,gnn" target="_blank">future study group_iclr2019_robustness,meta-learning,gnn</a> </strong> from <strong><a href="https://www.slideshare.net/cbutters400" target="_blank">Shun Tanaka</a></strong> </div><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>いかがでしたでしょうか😌👏</p><p>Strategic AI Groupでは、週に一回、論文読み会 Future Study Group を開催しており、メンバ間での技術の共有を活発に行っていますー！<br>この記事に掲載したスライドも、Future Study Groupでメンバに紹介したものが元になっています！</p><p>さて、話は戻りますが、ニューオーリンズといえばジャズ発祥の街らしいです。</p><p>カンファレンス終了後に二人でジャズ🎷🎺を聞きに行きました！<br>生音の迫力と、眼の前で繰り広げられるパフォーマンスに圧倒されました</p><p>そして、ニューオーリンズといえばミシシッピ川🏊 です。<br>ホテルの真横を流れていました。とても広大な川でした😊</p><img src="/images/20190617/photo_20190617_01.jpeg">▲ジャズを聞いた場所、Preservation Hall<img src="/images/20190617/photo_20190617_02.jpeg">▲ホテルの部屋から見たミシシッピ川]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、Strategic AI Groupの田中です。&lt;br&gt;先月の&lt;a href=&quot;https://future-a
      
    
    </summary>
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript教育用コンテンツ公開のお知らせ</title>
    <link href="https://future-architect.github.io/articles/20190612/"/>
    <id>https://future-architect.github.io/articles/20190612/</id>
    <published>2019-06-12T06:04:53.000Z</published>
    <updated>2019-06-12T06:31:18.658Z</updated>
    
    <content type="html"><![CDATA[<p>2019年頭より少しずつ書いていたTypeScriptの教育コンテンツを<a href="https://creativecommons.org/licenses/by-sa/4.0/deed.ja" target="_blank" rel="noopener">クリエイティブ・コモンズ4.0の表示 - 継承 （CC BY-SA 4.0）</a>で公開します。といっても完成版ではなく、アーリーアクセス版のような品質であることをご了承ください。</p><ul><li><a href="https://future-architect.github.io/typescript-guide/">仕事ですぐに使えるTypeScript</a></li></ul><p>Web版に加えてPDF版もダウンロード可能です。<br><img alt src="/images/20190612/image.png" style="border:solid 1px #000000"></p><p>そもそもこの資料を書き始めたきっかけですが、フューチャーのようなB2Bな会社であっても、最近はフロントエンドの比重が高まっているところから出発しています。僕もフューチャーに転職後からReactでがっつり1年以上の案件をやったり、半年ぐらいのAngular案件をやったりしています。会社としてはVue.jsを推しています。グループ会社の東京カレンダーはReactを使っていたりもします。要件に合わせていろいろですね。B2B2Cな案件も多いですし、お客様の求めるUX体験の良さを実現するにはフロントエンド側での頑張りが必要です。</p><p>しかし、フューチャーは基本的にサーバー側で頑張ってきた会社です。フロントエンドが好きな一部の人ががんばって回していたり、現場で教育していたりはしますが、現場主導でのゲリラ戦や、強い人がキャリア入社してくれるのを待つとかだけでは、お客様の期待に応える体制を整えるには時間がかかってしまいます。しかも、どこの会社の人も口を揃えてフロントエンド系人材はなかなか採用が難しいと言っています。そこで、いままでフロント側に関わってこなかったメンバーも、教養として（業務時間の中で）フロントの知識を付けられるような場と機会を作っていきたいですね、とCTOの斎藤洋平さん、コアテクの星さんとかと話をして、コンテンツの作成に着手し始めました。</p><p>途中、ありがたいことに、Software Designの特集x2やら情報処理学会誌の執筆依頼がきたりもしましたし、ここ最近は勉強会の登壇（とその準備の開発）が続いて少し手が止まっていました。当初は社内以外にはフューチャーのキャリア採用イベントに参加してくれた人に配る案とかもありましたが、早く公開してフィードバックをもらえたらいいなと思いましたので、公開することにしました。</p><p>フューチャーの新卒はどの職種になるにしても、基本的には全員エンジニア講習を受けており、Javaでウェブサービスは作れる程度には理解している、ただしJavaScriptはそこまででもない、という前提で書いています。JavaScriptやフロントエンド開発のエコシステムの知識を前提としないで読めて、ゼロからTypeScriptを学べるコンテンツにしたいと思っています。また、ライブラリもTypeScriptで作成し、型情報付きでデプロイする、アプリケーションもスタートからTypeScriptを書くという世界観で書いています。フューチャーの場合、自社で開発を行なったシステムを運用する案件もありますが、ゼロから作成とか、ゼロから作り直しみたいな案件も多いので、まずはそこにフォーカスしています。既存のコードに型付けをしつつ漸進的に移行というのはあまり考えていません。そういう方はazuさんの書かれた「<a href="https://efcl.info/2019/01/09/babel-to-typescript-library/" target="_blank" rel="noopener">Babelで書かれたJavaScriptライブラリをTypeScriptへ移行する方法</a>」とか、gfxさんの書かれた「<a href="https://employment.en-japan.com/engineerhub/entry/2019/04/16/103000" target="_blank" rel="noopener">TypeScript再入門 ― 「がんばらないTypeScript」で、JavaScriptを“柔らかい”静的型付き言語に</a>」がおすすめです。</p><p>コンテンツとしては、Software Designの特集で書いた、モダンなJSの書き方（これ自体もQiitaで4000以上のいいねがついたエントリーを下地にしています）をTypeScript化しつつ、そのエントリーにはなかった制御構文の紹介とかの基礎ネタ、TypeScript固有の型の話も盛り込みました。それ以外にも、TypeScriptの環境構築のエントリーとか、Qiitaに吐き出した他のエントリーのネタ（実際は、この本に入れることを前提に下書きしたのがQiitaの記事）も入れています。もちろん、いろいろなチャットとか勉強会とかTwitterとかで僕と議論してくださった方々の知見とかも入っています。1人で作り上げたものではないです。</p><p>まだまだ、中級以降のところは手つかずですが、同じチームで現在進行中でそこそこ大規模なReact + TypeScript案件の技術リードをしている人もいたりするので、いろいろフィードバックをもらいつつ、仕事で溜まった知見とかをどんどん入れていこうと思っています。</p><p>こんな感じで、フロントエンドのニーズは高いので、そちら系のスキルをお持ちの方でうちの会社にご興味のある方はキャリア採用ページから<a href="https://progres12.jposting.net/pgfuture/u/job.phtml?job_code=185" target="_blank" rel="noopener">このあたりの職種</a>で応募してくださると大変助かります。</p><p>フューチャーの方へ。同じプロジェクトの人以外はなかなか接点ができにくいですが、もしフロントエンドとか、JavaScriptとか、Goとかでわからないことがあったら気軽に聞いてくださいね。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2019年頭より少しずつ書いていたTypeScriptの教育コンテンツを&lt;a href=&quot;https://creativecommons.org/licenses/by-sa/4.0/deed.ja&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;クリエイテ
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="TypeScript" scheme="https://future-architect.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>ソースコードを綺麗にするためにまず心がけたい３点</title>
    <link href="https://future-architect.github.io/articles/20190610/"/>
    <id>https://future-architect.github.io/articles/20190610/</id>
    <published>2019-06-10T00:20:47.000Z</published>
    <updated>2019-06-11T15:40:39.445Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは、テクノロジーイノベーショングループ所属、社会人歴4年目エンジニアの王紹宇です。大学ではC/C++使いでしたが、最近はPythonとJavaScript に注力しています。</p><p>現在（2019年6月）、とある業務システムの開発チームに所属し、ある実験的な機能を素早くリリースしてはユーザからのフィードバックを得て改善、それをまた次回以降のリリースに入れる、といった業務システムでは珍しくアジャイル的なスタイルでここ1~2年ほど過ごしています。採用技術は主にReact/Next.js/Go/GCPです。</p><p>チームメンバーはフューチャーに新卒入社してから1~5年目という、若手中心でガンバっています。</p><p>この若いチームでの開発経験を通して、こうすればもっとソースコードが綺麗になると感じたことを3点まとめます。</p><h1 id="ソースコードを綺麗にする３つのポイント"><a href="#ソースコードを綺麗にする３つのポイント" class="headerlink" title="ソースコードを綺麗にする３つのポイント"></a>ソースコードを綺麗にする３つのポイント</h1><p>📖 綺麗なエッセイを読んだら目に優しく、心も癒やされますよね。<br>💻 ソースコードもエッセイのように美しくすると非常に価値が上がると思います。</p><p>本エントリーでは、将来的にどこかに展開しやすい<strong>可読性が高い</strong>コードを綺麗であり高価値であるとします。</p><p>可読性が低いと、例え自分のコードであったとしても時間が経ってから読み返すと「これ、自分が書いたの？」「思い出さない、さっぱり意味分からない」となり時間の浪費に繋がるかもしれません。また、他人の書いたソースコードであれば、なおさらその意図を理解することに時間がかかります。後から直すのも大変です。</p><p>👉 最初のコードから創意工夫し綺麗な状態にすることが重要です。バグの発生も抑えられ、例えバグが発生しても簡潔なコードであれば比較的容易に対処できます。将来の自分にとっても、他人にとっても時間の節約と<strong>メンタルケア</strong>に繋がるかもしれません。</p><p>さて、下のコードは綺麗といえるでしょうか。さっそく一例をあげます。<br><em>(本文の例は JavaScript っぽく書いていますが、原理原則は言語に問わない内容にするつもりです)</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">err = checkError();</span><br><span class="line"><span class="keyword">while</span> (err) &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">  err = checkError();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>短いコードで、ぱっと見ると「よくやるパターンではないか」、「簡潔で問題がなさそう」と思われるかもしれません。しかし、実は突っ込みポイントは複数あります。</p><p>え、どこでしょう？答えは最後まで読んでいただいたら、文末に開示します。</p><p>（注意）コーディングスタイルはの答えは一つだけではありません。これから述べるのはあくまで個人の見解に過ぎなく、ご意見・指摘は大歓迎です。</p><h1 id="では、簡単にソースコードを綺麗にするテクニックを紹介します。"><a href="#では、簡単にソースコードを綺麗にするテクニックを紹介します。" class="headerlink" title="では、簡単にソースコードを綺麗にするテクニックを紹介します。"></a>では、簡単にソースコードを綺麗にするテクニックを紹介します。</h1><h2 id="ポイント１-実態と名前の違いに気をつける"><a href="#ポイント１-実態と名前の違いに気をつける" class="headerlink" title="ポイント１ 実態と名前の違いに気をつける"></a>ポイント１ 実態と名前の違いに気をつける</h2><p>基本すぎるだろうと思われるかもしれませんが、ロジックの実態と、関数などの名前が乖離しはじめてしまうことがあります（実際に何件かありました）。<br>ここで言いたいことは、<a href="https://ja.wikipedia.org/wiki/%E9%A9%9A%E3%81%8D%E6%9C%80%E5%B0%8F%E3%81%AE%E5%8E%9F%E5%89%87" target="_blank" rel="noopener">驚き最小の原則</a> に尽きると思いますが、いくつか具体例とともに紹介します。</p><h3 id="1-1-中身が推測できる関数名をつける"><a href="#1-1-中身が推測できる関数名をつける" class="headerlink" title="1.1 中身が推測できる関数名をつける"></a>1.1 中身が推測できる関数名をつける</h3><p>例えば、<code>getXXX()</code>や<code>checkXXX()</code>のような名前の関数は、読み手に副作用（side-effect）がないイメージを与えます。そのため、<code>getXXX()</code> の中で write などの更新が行われると読み手にとって大きな驚きを与えてしまいます。</p><p>あるいは、checkXXX()というメソッドが、正常時の返り値として Boolean ではなく、オブジェクトを返すことも、戸惑わせるでしょう。なぜなら、<code>check</code>（検査）は OK か NG かを返すのを期待する名前なので、オブジェクト本体を期待するわけではありません。</p><p>実態に則した名前をつけるとしたら、<code>checkAndGet()</code>となるでしょう。</p><p>ただし、そうすると「単一責任原則」（次の「ポイント２ ロジックの複雑度を減す」の説明を参考してください）に違反になるため別々切り分けるほうが良いかもしれません。</p><p>場当たり的に対応するのではなく、その関数の関心事を見極めて適切な対応をしましょう。</p><h3 id="1-2-パラメータや変数名には型や可視性などが推測できる名前をつける"><a href="#1-2-パラメータや変数名には型や可視性などが推測できる名前をつける" class="headerlink" title="1.2 パラメータや変数名には型や可視性などが推測できる名前をつける"></a>1.2 パラメータや変数名には型や可視性などが推測できる名前をつける</h3><p>パラメータや変数名は（特にweak-typed言語にといて）値の型まで推測できる名前が望ましいです。</p><p>文字列なら<code>XxxStr</code>、<code>xxxName</code>、数値なら<code>xxxNum</code>、<code>xxxCount</code>、ブーリアンなら<code>isXxx</code>、<code>hasXxx</code>、リストなら<code>xxxList</code>、<code>xxxArr</code>、マップなら<code>xxxMap</code>、<code>xxxDict</code>などなどよく使われている表現を把握したほうが良いです。</p><p>＊【参考】命名規則(wikipedia):<a href="https://ja.wikipedia.org/wiki/%E5%91%BD%E5%90%8D%E8%A6%8F%E5%89%87_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)#%E3%83%8F%E3%83%B3%E3%82%AC%E3%83%AA%E3%82%A2%E3%83%B3%E8%A8%98%E6%B3%95" target="_blank" rel="noopener">https://ja.wikipedia.org/wiki/%E5%91%BD%E5%90%8D%E8%A6%8F%E5%89%87_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)#%E3%83%8F%E3%83%B3%E3%82%AC%E3%83%AA%E3%82%A2%E3%83%B3%E8%A8%98%E6%B3%95</a></p><p>オブジェクト指向言語の<code>private</code>や<code>protected</code>のアクセス制限仕組みは、その文法がない言語にも応用できることがあります。</p><p>例えば、Python などの言語には、private なら<code>__</code>(underscore ２個)、protected なら<code>_</code>(underscore １個)をつけるルールがあります。もちろんこの場合は、<code>export _xyz</code> や <code>import __utils__</code>のようなルールに反する定義はやめたほうが良いです。Pythonでは注意喚起のために、あえて違和感のある<code>from __future__ import xxx</code>を許していますが、もちろんそれを推奨するわけではありません。</p><p>変数名の悪い例を挙げますと、<code>executedFlag</code>が<code>0:NOT_EXECUTED</code>、<code>1:EXECUTED</code>、<code>-1:EXCEPTION</code>の取りうるのもよくないでしょう。<code>flag</code>は 0/1、true/false の二値のイメージが強いので、本当に3値をとるのであれば<code>executedStatus</code>の方がまだ適切でしょう。</p><h3 id="1-3-実態にあったコメントをつける"><a href="#1-3-実態にあったコメントをつける" class="headerlink" title="1.3 実態にあったコメントをつける"></a>1.3 実態にあったコメントをつける</h3><p>ソースを改修した際によくあるのが、コメントの更新を忘れることです。もちろんコメントも同期してアップデートしましょう。</p><p>次のコードの改善ポイントは何点あるでしょうか？</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// check number positive, if not do nothing</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPositive</span><span class="params">(*str)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (*str &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        *str = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ポイント２-ロジックの複雑度を減らす"><a href="#ポイント２-ロジックの複雑度を減らす" class="headerlink" title="ポイント２ ロジックの複雑度を減らす"></a>ポイント２ ロジックの複雑度を減らす</h2><p>コードの複雑度を減らす技術はたくさんあると思いますが、実践しやすいと思われるコツを紹介したいと思います。</p><h3 id="2-1-関数やモジュールの長さを減らす"><a href="#2-1-関数やモジュールの長さを減らす" class="headerlink" title="2.1 関数やモジュールの長さを減らす"></a>2.1 関数やモジュールの長さを減らす</h3><p>言語や目的がそれぞれ違うので、関数やモジュールの長さ制限に明確なルールは存在しません。</p><p>ただ、参考にできる観点と原則があります。それは、一つの関数は一つの機能しか担当させないこと（<a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" rel="noopener">単一責任原則（Single responsibility principle）</a>）、言い換えると、コメント一言で説明できるぐらいの量が適切ということです。</p><p>ある関数が複数タスクを担当していたとして、ポイント１の「名称には嘘ついていけない」という観点で素直に名称をつけたとすると<code>checkValidationAndDoTask1AndDoTask2AndSubmit()</code>的な名前になってしまいます。素直に、タスクごとに関数を分けたほうが分かりやすいでしょう。</p><p>１箇所で２つ以上のことをやっていると気づいたら、<a href="https://en.wikipedia.org/wiki/Separation_of_concerns" target="_blank" rel="noopener">関心の分離（Separation of concerns）</a>と言われるように、関数を切り分けるを考慮するべきです。そうすると、それぞれのコードが簡潔になることで結局は理解にかかる時間が元のコードよりも短縮できます。<br>理由は、人の脳のレジスタの容量が限られているので、一度処理できる情報量はごくわずかです。そして人間はトップダウンの視点からものの全体像を掴もうとします。細かいタスクのやり方（関心）を別箇所に分離できると、脳の負荷を下げることができるからです。</p><p>次のコードはあるデータモデルの初期化の例です。<br>いろいろなステップの実装を展開して、<code>init</code>の一箇所に全部書く方法[BEFORE]もできますが、それより、[AFTER]のほうはステップごとに何をやっているのが一目瞭然です。</p><p>[BEFORE]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">init() &#123;</span><br><span class="line">  <span class="comment">// get enviromnment variables</span></span><br><span class="line">  <span class="comment">// do the job ...</span></span><br><span class="line">  <span class="comment">// do the job ...</span></span><br><span class="line">  <span class="comment">// do the job ...</span></span><br><span class="line">  <span class="comment">// prepare default options</span></span><br><span class="line">  <span class="comment">// do the job ...</span></span><br><span class="line">  <span class="comment">// do the job ...</span></span><br><span class="line">  <span class="comment">// do the job ...</span></span><br><span class="line">  <span class="comment">// fetch data</span></span><br><span class="line">  <span class="comment">// do the job ...</span></span><br><span class="line">  <span class="comment">// do the job ...</span></span><br><span class="line">  <span class="comment">// do the job ...</span></span><br><span class="line">  <span class="comment">// check the data's validation</span></span><br><span class="line">  <span class="comment">// do the job ...</span></span><br><span class="line">  <span class="comment">// do the job ...</span></span><br><span class="line">  <span class="comment">// do the job ...</span></span><br><span class="line">  <span class="comment">// transform data into expected form</span></span><br><span class="line">  <span class="comment">// do the job ...</span></span><br><span class="line">  <span class="comment">// do the job ...</span></span><br><span class="line">  <span class="comment">// do the job ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[AFTER]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">init() &#123;</span><br><span class="line">  get_env()</span><br><span class="line">  prepare_option()</span><br><span class="line">  fetch_data()</span><br><span class="line">  check_data()</span><br><span class="line">  transform_data()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-ネストを減らす"><a href="#2-2-ネストを減らす" class="headerlink" title="2.2 ネストを減らす"></a>2.2 ネストを減らす</h4><p><code>if</code> <code>else</code> <code>while</code> <code>switch</code>などの制御構文が積み重なるほど、インデントが増え複雑度が上がります。<br>これらの可読性を上げる<strong>定形のコツ</strong>をまとめます。</p><ul><li>2.2.1 異常系分岐(エラーハンドリング)を先に書き、早期リターンする</li></ul><p>[BEFORE] 条件分岐間にどんな依存関係があるのか追うのが難しい</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// operation 0</span></span><br><span class="line"><span class="keyword">if</span> (check1(something1)) &#123;</span><br><span class="line">  <span class="comment">// operation 1</span></span><br><span class="line">  <span class="keyword">if</span> (check2(something2)) &#123;</span><br><span class="line">    <span class="comment">// operation 2</span></span><br><span class="line">    <span class="keyword">if</span> (check3(something3)) &#123;</span><br><span class="line">      <span class="comment">// operation 3</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[AFTER] エラーチェックを同じインデントにそろえた方が分かりやすい</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// operation 0</span></span><br><span class="line"><span class="keyword">if</span> (!check1(something1)) &#123;</span><br><span class="line">  <span class="keyword">return</span> Exception1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// operation 1</span></span><br><span class="line"><span class="keyword">if</span> (!check2(something2)) &#123;</span><br><span class="line">  <span class="keyword">return</span> Exception2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// operation 2</span></span><br><span class="line"><span class="keyword">if</span> (!check3(something3)) &#123;</span><br><span class="line">  <span class="keyword">return</span> Exception3;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// operation 3</span></span><br></pre></td></tr></table></figure><ul><li>2.2.2 余計な else を省略</li></ul><p>else の次は何もやらない場合、else 分岐さえ切る必要ありません。</p><p>[BEFORE] else を素直に書いた例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1) &#123;</span><br><span class="line">  <span class="comment">// operation 1</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// other operations</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[AFTER] elseを無くし、早期リターンする</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1) &#123;</span><br><span class="line">  <span class="comment">// operation 1</span></span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// other operations</span></span><br></pre></td></tr></table></figure><p>また、<code>if (condition) return</code>と同じく<code>if (condition) break</code> や <code>if (condition) continue</code> の後ろの else も省略します。</p><p>[BEFORE]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition1) &#123;</span><br><span class="line">  <span class="keyword">if</span> (hasError) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// nomral operations</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[AFTER]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition1) &#123;</span><br><span class="line">  <span class="keyword">if</span> (hasError) <span class="keyword">break</span>;</span><br><span class="line">  <span class="comment">// nomral operations</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ポイント３-書き方の揺らぎを減らす制約ルールを作る"><a href="#ポイント３-書き方の揺らぎを減らす制約ルールを作る" class="headerlink" title="ポイント３ 書き方の揺らぎを減らす制約ルールを作る"></a>ポイント３ 書き方の揺らぎを減らす制約ルールを作る</h2><p>コードを綺麗に書くためは、世にでている規制のコーディング規約を導入するだけではなく、チーム内ルールを作り、各人の揺れを抑えるとお互いのコードが読みやすくなります。<br>（どこまでやるかの線引は難しいですが、相互にレビューをしていると慣習的なルールが作られることが多いと思いますので、まずそれを明文化しておくことは有益だと思います）</p><p>一例として、<code>a&lt;b</code>と<code>b&gt;a</code>は意味は同じなので、どちらでも書いても問題ありませんが、左は小さいもの、右は大きいものという原則に従い、<code>&lt;</code> <code>&lt;=</code>を使って、<code>&gt;</code> <code>&gt;=</code>を避けるという意見をよく耳にします。<br><code>if (a&gt;1 &amp;&amp; a&lt;100)</code>より、<code>if (1&lt;a &amp;&amp; a&lt;100)</code>（言語によって<code>if 1&lt;a&lt;100</code>のような簡略の書き方もある）のほうが視覚的に分かりやすいでしょう。<br>ただし、単独な<code>if (42&lt;myNumber)</code> の使用は「ユーダ記法」(<a href="https://ja.wikipedia.org/wiki/%E3%83%A8%E3%83%BC%E3%83%80%E8%A8%98%E6%B3%95" target="_blank" rel="noopener">Yoda Condition</a>)になってしまう欠点もあります。Python でユーダ記法で書いたら pylint の慣例違反のワーニング（<code>misplaced-comparison-constant (C0122)</code>）が発動されます。</p><p>全ての状況で使える正解は無いですが、このようにコードレビューでお互いに異なる指摘をしてしまうのであれば、チームで方針を統一したほうがスムーズでしょう。</p><h2 id="最後に、文頭に挙げた例について"><a href="#最後に、文頭に挙げた例について" class="headerlink" title="最後に、文頭に挙げた例について"></a>最後に、文頭に挙げた例について</h2><p>[BEFORE]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">err = checkError();</span><br><span class="line"><span class="keyword">while</span> (err) &#123;</span><br><span class="line">  <span class="comment">// no error, do something</span></span><br><span class="line">  err = checkError();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このコードの問題点が分かりましたでしょうか。</p><p>まずは、while 条件を見て、<code>err</code>が真の時に正常処理のフローに入ることが分かります。<br><code>// err means no error</code> のコメントをつければ良いでしょうか？<br>それでもまだ違和感が残りますよね。</p><p>その違和感の原因は<code>checkError</code>の返り値の内容を関数名から推測できないからです。<br>今の書き方では以下のような疑問がでてきます。</p><ol><li>「check は単純に実行動作を表していて、何も返さないではない？」</li><li>「check の対象は Error なので、Error がある時は真を返す？」</li><li>「checkError の目的を考え、error のないことを望んでいるはずで、No Error の時は真？」</li><li>「Error 発生時、エラーの詳細を返したいので、Error のオブジェクト、あるいは Null を返すかも？」</li></ol><p>曖昧過ぎますね。<br>この<code>checkError</code>関数の命名の改善案は３つあげられます。</p><ol><li>エラー有無を表現する Boolean を返す場合、<code>hasError</code>が良いでしょう</li><li>1の反対の意味を示したい場合、<code>hasNoError</code>、否定形式を気になるなら<code>isValid</code>がよく使われています</li><li>エラー時には詳細のエラーオブジェクトを返し、正常時にはNullを返す場合、<code>getError</code>の方が直感的</li></ol><p>上記を踏まえると次の用に修正できます。</p><p>[MIDDLE] 修正パターン ①</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hasErr = hasError();</span><br><span class="line"><span class="keyword">while</span> (!hasErr) &#123;</span><br><span class="line">  <span class="comment">// no error, do something</span></span><br><span class="line">  hasErr = hasError();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[MIDDLE] 修正パターン ②</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">isValid = hasNoError();</span><br><span class="line"><span class="keyword">while</span> (isValid) &#123;</span><br><span class="line">  <span class="comment">// no error, do something</span></span><br><span class="line">  isValid = hasNoError();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>[MIDDLE] 修正パターン ③</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">err = getError();</span><br><span class="line"><span class="keyword">while</span> (!err) &#123;</span><br><span class="line">  <span class="comment">// no error, do something</span></span><br><span class="line">  err = getError();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>さらに、コードの重複も改善できます。これによって最初と最後２箇所同じコードが書かれていることで、メンテで修正した時にどちら片方を編集し忘れてバグが出てしまう不幸をなくせます。<br>次のコードは重複のコードを１箇所にまとめました。</p><p>[AFTER] 修正パターン１ (他パターンは同様なので省略します。)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!hasError()) &#123;</span><br><span class="line">  <span class="comment">// no error, do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>エラーオブジェクトの中身を取り出して、追加処理したい場合には次のようにも書けますね。</p><p>[FINAL] 修正パターン３</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  err = getError();</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    handle(err);</span><br><span class="line">    <span class="keyword">break</span>; <span class="comment">// 場合によって、エラーを解消したらcontinueしたいケースも対応できる</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// no error, do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ポイントまとめ"><a href="#ポイントまとめ" class="headerlink" title="ポイントまとめ"></a>ポイントまとめ</h2><ul><li>コードを綺麗にするのは自分と他人の<strong>時間の節約</strong>に繋がります</li><li>ソースコードを綺麗にするための３点<ul><li>嘘をついてはいけない</li><li>ロジックの複雑度を減らす</li><li>書き方の揺らぎを減らす制約ルールを作る</li></ul></li></ul><p>コーディングはキャンプに行くことと似ている点があると思います。キャンプ場にゴミがあったら、誰が捨てたかに関係なく全て持って帰りますよね？</p><p>チームのリポジトリに対しても同様に、チェックインする時にチェックアウトした時より少しでも綺麗にするようにしたら、確実に素晴らしいプロジェクトになるのではないでしょうか。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは、テクノロジーイノベーショングループ所属、社会人歴4年目エンジニアの王紹宇です。大学ではC/C++使いでしたが、最近はPythonとJavaScript に注力しています。&lt;/p&gt;
&lt;p&gt;現在（2019年6月）、とある業務システムの開発チームに所属し、ある実験的な
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Styleguide" scheme="https://future-architect.github.io/tags/Styleguide/"/>
    
  </entry>
  
  <entry>
    <title>デブサミ2019に登壇しました</title>
    <link href="https://future-architect.github.io/articles/20190607/"/>
    <id>https://future-architect.github.io/articles/20190607/</id>
    <published>2019-06-07T00:00:00.000Z</published>
    <updated>2019-06-06T16:27:55.912Z</updated>
    
    <content type="html"><![CDATA[<p>2019/02/15に<a href="https://event.shoeisha.jp/devsumi/20190214" target="_blank" rel="noopener">Developers Summit 2019</a>のランチセッションにて、Redmineとそのプラグインである<a href="https://lychee-redmine.jp/" target="_blank" rel="noopener">Lychee</a>のユーザ事例として登壇しました。</p><p>登壇内容は、<a href="https://event.shoeisha.jp/devsumi/20190214/session/1978/" target="_blank" rel="noopener">【導入事例】Lychee Redmineのユーザが語る！トラブル予防としての使い方</a>です。</p><p>ここに至るまでの背景と、当日の状況についてレポートします。</p><h1 id="Redmineとは"><a href="#Redmineとは" class="headerlink" title="Redmineとは"></a>Redmineとは</h1><p>RedmineとはOSSのいわゆるタスク管理ツールです。<br>ワークフローや管理項目などを自由にカスタマイズして利用することが可能です。<br>Ruby On Railsで構築されており、たくさんのプラグインを組み合わせてユーザ自身の手で機能拡張させることも可能です。</p><p>弊社では社内の標準的なプロジェクト管理ツールとして広く利用しています。</p><h1 id="Lycheeとは"><a href="#Lycheeとは" class="headerlink" title="Lycheeとは"></a>Lycheeとは</h1><p>Lycheeはアジャイルウェアさんが開発されたRedmineのプラグインの一種です。<br><a href="https://lychee-redmine.jp/" target="_blank" rel="noopener">https://lychee-redmine.jp/</a></p><p>プロジェクト管理に便利なツールが多く、重宝しています。</p><h1 id="筆者について"><a href="#筆者について" class="headerlink" title="筆者について"></a>筆者について</h1><p>新卒でフューチャーに入社し、我ながらぞっとしますが勤続20年以上になります。</p><p>Windows95が出た3年後に入社し、当時は社員数が100人くらいのでした（※2018年12月末だと連結で1984名）。</p><p>「いわゆる名の知れた大学と大学院まで出たのに、未上場の会社に入るなんて！」といった当時の世間の常識や、親の涙に抗い、社会人生活をスタートさせました。</p><p>Futureは難易度の高いプロジェクトを手掛けるわりに、トラブルは少ない方だと思います。</p><p>しかし、私はほぼトラブル中のプロジェクトにアサインされ続け、かなり厳しくソフトウェアの品質について考え抜きながらプロジェクトマネジメントを経験してきました。</p><p>そこが評価されたのか、2013年から社内の品質管理の室長に任命され、全社の品質基準の策定、プロジェクト状況の可視化、分析など多くの取り組みを行いました。</p><p>苦しい時もありましたが、人生は苦味も含めて味わうと豊かになるものだなーと最近は考えています。</p><p>そんな折、2018年10月になぜか人事の責任者になりました。<br>品質管理室長からは離れなかったので、現在兼務です。</p><p>品質管理室ではRailsでアジャイル開発し、その前はミッションクリティカルな基幹系システムを開発してきましたが、人事と兼務ともなるとそれはなかなか出来ません。</p><p>したがって、他のデブサミ登壇者に比べると私はかなり異色な背景を持っているし、純粋なITエンジニアリングの力で比較すると彼らの方が上でしょう。</p><p>入社当時に考えていたキャリアとは遠いのか近いのか、今ひとつ分からない所もありますが、人間万事塞翁が馬だと考えれば、もはや何でもありですね。</p><h2 id="デブサミ登壇に至るまで"><a href="#デブサミ登壇に至るまで" class="headerlink" title="デブサミ登壇に至るまで"></a>デブサミ登壇に至るまで</h2><p>RedmineにLycheeをかけ合わせて利用しているのは、「単に便利だから」という理由ではなく、品質管理の一環として必要な機能だと思って利用しています。</p><p>そのため、それなりのこだわりやコツもあったこともあり、事例紹介自体は問題なかったのですが、果たしてデブサミにふさわしいコンテンツなのか？？というのは非常に心配でした。</p><p>エンジニアというのは、如何に自由に大空を飛びまわれるか？ということを追及している人種に違いない。</p><p>大空というのは制約のない世界だと思うので、私のような「品質管理」なんてものは「制約万歳」に脳内変換されてるんだろうなーと思うわけです。</p><p>ただし、引き受けた以上はやりきるのがビジネスパーソンの矜持。</p><p>価値というのは相手によって変わるので、完全アウェイであっても、喜んでもらえるコンテンツを提供せねばならない・・。</p><p>会場も50人くらいなのかな？と思っていたら200人くらいは入るかなりご立派な部屋になっており、じわじわと迫る後悔とプレッシャーの中で当日を迎えました。</p><h1 id="発表コンテンツ"><a href="#発表コンテンツ" class="headerlink" title="発表コンテンツ"></a>発表コンテンツ</h1><p>単なるプラグインの使い方を説明しても面白くもないし、役に立たないと考え、トラブルの予防にターゲットを絞りました。</p><p>なぜなら、エンジニアであればチャレンジしてるに違いない<br>↓チャレンジしてるとトラブルに会う確率は高いに違いない<br>↓みんなトラブルは嫌だろうなー<br>↓じゃあ予防出来たらみんな幸せだろうなー。そうだそうだー。</p><p>…ということで、「Lychee Redmineのユーザが語る！トラブル予防としての使い方」という、今見ると大してキャッチ―でもない普通のタイトルで出陣しました。</p><h1 id="当日の様子"><a href="#当日の様子" class="headerlink" title="当日の様子"></a>当日の様子</h1><p>デブサミだけあって、来場者の大半はエンジニアです。フリーダム感漂う参加者が多く、会場に入った瞬間からアウェイを満喫。うむ。予想通り。</p><p>登壇者は専用の控室が用意されており、逃げ込むように控室にたどり着きます。</p><p>しかし、控室にいらっしゃった他の登壇者の方々は、フリーダムに一層の年季が加わっており、実に堂々たる風貌。圧倒されました。むむ。予想外。</p><p>ここでは気持ちが落ち着かないなーということで、多少のホーム感を感じる小ぶりなスポンサー控室に移動しました。</p><p>私の前に話すはずのスポンサー社長がなかなか来場しないというハプニングもありましたが、コーヒーを無駄におかわりしながら前日まで推敲していた資料を確認し、登壇の時間を待ちます。</p><h1 id="発表しました"><a href="#発表しました" class="headerlink" title="発表しました"></a>発表しました</h1><img src="/images/20190607/1.jpg" class="img-small-size"><p>来ていただいた人に、何かしら価値あるものを持って帰ってもうことをミッションに設定し登壇しました。</p><p>タイトルがタイトルなだけに、ご来場の方々の年齢層は少し高かったように見え、エンジニアというよりは管理者の人が多かったような印象を受けました。</p><iframe src="//www.slideshare.net/slideshow/embed_code/key/KjD1yfZ505Rfzn" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/agileware_jp/4-136539333" title="【導入事例】Lychee Redmineユーザーが語る！トラブル予防としての使い方" target="_blank">【導入事例】Lychee Redmineユーザーが語る！トラブル予防としての使い方</a> </strong> from <strong><a href="https://www.slideshare.net/agileware_jp" target="_blank">agileware_jp</a></strong> </div><br><p>当日の発表の様子もCodeZine様より記事になっております。<br><a href="https://codezine.jp/article/detail/11427" target="_blank" rel="noopener">https://codezine.jp/article/detail/11427</a></p><p>極力平易な言葉と、エピソードを織り交ぜて話すようにしたので、集中して聞いてくれていたように思います。</p><p>後でツイッターを見ましたが、時間が足りなくて省略した部分についてもっと聞きたい、というような声も上がっており、概ね良かったのかな？と思います。</p><p>声を褒められたのはうれしかったかな＾＾</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>今回、ニーズにあっていたのかどうかが正直なところ一番の不安でした。<br>しかし、こういった場に出ることで、自分の頭が整理されますし、客観的に振り返ることが出来るには、とてもいいタイミングだったなと改めて思いました。</p><p>それと同時に、本来はもっとこうしたいが、できていないこともまた浮き彫りになります。</p><p>別の方の発表の中で、「組織を変えるにはルールと設備と風土の３つが大事」、といったことを発言されており、心に深く突き刺さっています。</p><p>風土を変えるのが一番難易度が高いし、時間がかかりますよね。</p><p>今回の私が登壇した内容も、ルールと設備に限った話でしたので、次回は風土に対する取り組みも話せるようにしたいと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2019/02/15に&lt;a href=&quot;https://event.shoeisha.jp/devsumi/20190214&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Developers Summit 2019&lt;/a&gt;のランチセッションにて、Redm
      
    
    </summary>
    
      <category term="Management" scheme="https://future-architect.github.io/categories/Management/"/>
    
    
  </entry>
  
  <entry>
    <title>OpenCensus(OpenTelemetry)とは</title>
    <link href="https://future-architect.github.io/articles/20190604/"/>
    <id>https://future-architect.github.io/articles/20190604/</id>
    <published>2019-06-04T00:00:51.000Z</published>
    <updated>2019-06-24T13:37:27.537Z</updated>
    
    <content type="html"><![CDATA[<p>うちの会社では、各種クラウドサービスの知見を共有する勉強会を毎週行なっています。弊社ではコンサルティング事業をしていて、次々と多くの案件をこなしているし、各案件の要件も異なるため、自社でもっている知見もバラエティーに富んでいます。既存のサービスではこういう制約があってハマったとか、今回これで作りきったけど、次回クリーンに作り直すならこうしたい、みたいな話が赤裸々に語られる楽しい会です。で、僕はインフラをやることはあまりないのだけど、話を聞くだけでは申し訳ないので、2週間前の会で、最近ハマっているOpenCensusについて紹介しました。</p><p>「分散トレースとは」という話がまとまっていて、初学者に「これ読んどいて」と言えるようなページがなかったので社内向けの資料をベースに技術ブログでも公開します。</p><h1 id="トレーシングとメトリックス"><a href="#トレーシングとメトリックス" class="headerlink" title="トレーシングとメトリックス"></a>トレーシングとメトリックス</h1><p>トレーシングはどの処理がどの順番で行われているか、どのぐらい処理時間がかかっているかをミクロに見ていくことによって、システムの状況を把握しやすくする。</p><p>メトリックスは、マクロな統計情報。だいたい平均は100mSで終わってる、80パーセンタイルの処理時間は120mS、95パーセンタイルは400mSみたいな、「なんとなく」を掴む方法。メモリ使用量、CPUなどのシステムの状態を把握し、異常が起きそうかどうか、余裕があるかどうかを把握するために使うもので、SRE本ではかなり強調されているもの。</p><p>OpenCensusでは、メトリックスはビューというものをあらかじめ定義する。どういった単位の数字で、どういった感じの値分布になるのか、を定義する。ちょうど、OpenCensusのGoライブラリのデフォルト定義がわかりやすい。</p><ul><li><a href="https://github.com/census-instrumentation/opencensus-go/blob/master/plugin/ochttp/stats.go#L129" target="_blank" rel="noopener">HTTPクライアント向けのビュー定義</a></li></ul><p>この分布に含まれるリクエスト数がいくつ、みたいなカウント数が集計されるので、数万件のアクセス時にも、収集されるデータ量はあまり大きくならない。トレーシングはどの処理がどの順番に行われたか、どれだけ時間がかかったかを個別に収集するため、ビューといったものはない。アクセス数に比例した分量の詳細なログが出力されるが、データ量削減のために、トレーシングも、間引いて（サンプラーの設定による）収集することがある。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul><li>Googleが社内のサービスの監視のために、Borgmonを作る<ul><li>Borgmonはモニタリングのためのツール。システムが正しく動作しているかどうかのモニタリングを行う</li><li>元Googleの人がBorgmonに触発されてOSSでPrometheusを作る</li></ul></li><li>Googleが社内のサービスのトレーシングのために、Dapperを作る<ul><li>Dapperの論文が2010年ごろに出る</li><li>この論文をもとに、Zipkin(Twitter)、Jaeger(Uber)といったOSSが作成される</li></ul></li><li>New Relic, Datadog, Treasure Dataなどのサービスがここ10年ぐらいのあいだで生まれた<ul><li>モニタリング・分析などのビッグデータ的な文脈</li></ul></li><li>統合APIの機運<ul><li>いろんなバックエンドサービスが生まれたが、それぞれの専用のSDKをアプリケーションに組み込む必要があった</li><li>OpenTracingというプロジェクトができ、Cloud Native Computing Foundation配下に入る</li><li>Googleが社内のCensusというライブラリの公開版のOpenCensusを作成する<ul><li>トレーシングと、モニタリングを両方サポート</li></ul></li></ul></li><li>統合APIの統合<ul><li>OpenCensusとOpenTracingの統合が発表される</li><li>この2つがマージして、CNCF配下のOpenTelemetryというものが作られることが発表される(先週)</li></ul></li></ul><h1 id="分散トレーシング"><a href="#分散トレーシング" class="headerlink" title="分散トレーシング"></a>分散トレーシング</h1><p>各処理にどれだけ時間がかかったのかを、ルールに従って出力することにより、複雑に関連しあったタスクでどこに問題があるのかを一目で見れるようにする。たんなるログではなく、親子関係の構造を持つログ。</p><ul><li>タスクのスタートと終了時に、特別なAPIを使って記録する（この1区画をスパンと呼ぶ）</li><li>スパンを作る時には、親のスパンのIDをAPIに渡すことで、親子関係があることを通知する</li><li>バッチ処理から作られるワーカーの場合は、スパンIDどうしをリンクすることで、関連するスパンであることを通知する</li><li>ネットワーク越しにタスクを投げる時は、X-B3-TraceId, X-B3-ParentSpanIdといったヘッダー、gRPCのメタデータなどを介して、別プロセスでも親子関係のあるタスクを行なっていることを通知する</li><li>スパンに対してログ、タグといったものを出力することもできる</li><li>分散トレースの文脈では、スパンの集合=トレース</li></ul><p>この情報を使うことで、下記のようなグラフを表示することができる。</p><img width="993" alt src="/images/20190604/opencentus_dashboard.png"><h1 id="OpenCensusとは"><a href="#OpenCensusとは" class="headerlink" title="OpenCensusとは"></a>OpenCensusとは</h1><p>Borgmon由来のメトリクス、Dapper由来のトレーシングの両方に対応したライブラリ</p><p>次のような言語に対応している</p><ul><li>Go</li><li>Java</li><li>C++</li><li>C#</li><li>Python</li><li>PHP</li><li>Ruby</li><li>Erlang/Elixir</li></ul><p>出力先がプラグインで切り替えられる。Goのものだと、次のようなものに対応している。</p><ul><li>GCPのStackdriver</li><li>Datadog</li><li>AWSのX-Ray</li><li>Jaeger</li><li>Zipkin</li><li>Honeycomb</li></ul><h1 id="どうやって出力するのか？"><a href="#どうやって出力するのか？" class="headerlink" title="どうやって出力するのか？"></a>どうやって出力するのか？</h1><h2 id="自動出力"><a href="#自動出力" class="headerlink" title="自動出力"></a>自動出力</h2><p>データの出力は、OpenCensusのAPIで行うが、Integrationと呼ばれる特別なプラグインを入れると、システムの入出力で勝手にログを取ってくれる。Pythonだと次のようなものが公式で提供されている、</p><ul><li>DB API, Django, Flask, Google Cloud Client Library, gRPC, httplib, PostgreSQL, MongoDB, MySQL, Pyramid, Requests, SQLAlchemy, threading</li></ul><p>Node.jsではOpenCensusをimportするだけで、勝手にHTTPのログが出力されるようになる。プロセスをまたぐような通信のログが勝手に取得できる。</p><p>Envoyというコンテナ間の通信プロキシが通信のトレース出力機能を持っているのため、Kubernetesを使うと勝手に出力される</p><h2 id="手動でメトリックスを出力する"><a href="#手動でメトリックスを出力する" class="headerlink" title="手動でメトリックスを出力する"></a>手動でメトリックスを出力する</h2><p>測定したい単位、評価基準をプログラムで作り、定期的にstats.Recordで送信する。アプリケーションでどのようなメトリックスが必要かを考えて項目を設定する。あるいは、既成の自動出力のIntegrationを参考にすると良さそう。</p><p>下記のコードはExporter設定は省略しています</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"go.opencensus.io/stats"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mLatencyMs = stats.Float64(<span class="string">"latency"</span>, <span class="string">"The latency in milliseconds"</span>, <span class="string">"ms"</span>)</span><br><span class="line">mLines = stats.Int64(<span class="string">"lines_in"</span>, <span class="string">"The number of lines processed"</span>, <span class="string">"1"</span>)</span><br><span class="line">mBytesIn = stats.Int64(<span class="string">"bytes_in"</span>, <span class="string">"The number of bytes received"</span>, <span class="string">"By"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Invoking .M produces measurements that we then record against</span></span><br><span class="line"><span class="comment">// a context "ctx" with tags.</span></span><br><span class="line">stats.Record(ctx,</span><br><span class="line">mLatencyMs.M(<span class="number">17</span>),</span><br><span class="line">mLines.M(<span class="number">238</span>),</span><br><span class="line">mBytesIn.M(<span class="number">7000</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>メトリックスの出力先としてPrometheus（PULL型)を設定しておくと、Prometheusが読みにくるためのAPIが作成され、定期的に出力された数値を取得しにくるようになる。</p><h2 id="手動でトレースを出力する"><a href="#手動でトレースを出力する" class="headerlink" title="手動でトレースを出力する"></a>手動でトレースを出力する</h2><p>StartSpanとEndでスパンを出力していく</p><p>下記のコードはExporter設定は省略しています</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"go.opencensus.io/trace"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Create a span with the background context, making this the parent span.</span></span><br><span class="line"><span class="comment">// A span must be closed.</span></span><br><span class="line">ctx, span := trace.StartSpan(context.Background(), <span class="string">"main"</span>)</span><br><span class="line"><span class="comment">// Make the span close at the end of this function.</span></span><br><span class="line"><span class="keyword">defer</span> span.End()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">doWork(ctx)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="OpenCensusの使いどころ"><a href="#OpenCensusの使いどころ" class="headerlink" title="OpenCensusの使いどころ"></a>OpenCensusの使いどころ</h1><p>複数のサービスに別れているシステムだと、分散トレーシングはかなり便利なはず。</p><ol><li>ローカル開発では、分散トレース収集可視化のJaeger/Zipkinと、メトリクス収集可視化のPrometheusがDockerで簡単に起動できるので、これを出力先にして開発を行う<ol start="2"><li>デバッグ出力するときも、トレースでタグとして情報を出力しておくと、かなり良い</li><li>ステージング環境ではStackdriverとX-Rayで</li><li>たてなくても, zPageという簡易のビューアはついてくる（かなり簡易）</li></ol></li><li>本番環境では、Stackdriverの無料枠がかなり小さいので、サンプリング頻度をかなり下げて使うか、予算に入れてきちんとお金を払う？<ol start="3"><li>トレーシングはいらないので、メトリクスだけとかに絞るとか</li><li>あるいは自前でPrometheus、Jaeger(Zipkin)を立てる？</li></ol></li></ol><p>OpenCensusの初期化とか環境設定がなかなかめんどいので、それを簡単にする<a href="https://github.com/future-architect/futureot/tree/master/occonfig" target="_blank" rel="noopener">occonfig</a>というGoのパッケージをチームのハックデー等を使って作りました。Node.js版も公開はしてないけど<a href="https://github.com/future-architect/futureot/tree/master/occonfig-node" target="_blank" rel="noopener">実装はしました</a>。READMEに環境設定のもろもろを書いたので、参考にしてください。まあ、本当に作ったばかりの状態で実戦投入はまだなので、実際に使うといろいろ出るかもですが。OpenTelemetryへの追従もやっていきます。</p><p>また、気軽にローカルの開発で使い始められるように、今Go界隈で一番いけているという話題のロガーの<a href="https://github.com/uber-go/zap" target="_blank" rel="noopener">zap</a>経由でコンソールに出力する<a href="https://github.com/future-architect/futureot/tree/master/exporters/opencensus-go-exporter-zap" target="_blank" rel="noopener">エクスポーター</a>も実装しました。Instrumentsも色々今後は仕事しながら足していきたいな、と思っています。</p><h1 id="今後とか"><a href="#今後とか" class="headerlink" title="今後とか"></a>今後とか</h1><ul><li>OpenTelemetryになっても、アプリケーションに対して（Record、StartSpan, End等の)後方互換APIは用意されるとのこと<ul><li>ExporterやInstrumentの実装者はそのままではいかないかもしれない</li><li>出力先の設定部分以外のアプリケーションコードに埋め込まれた部分は大丈夫そうなので、とりあえず今からやるならOpenCensusでやっていけば良さそう。</li></ul></li><li>OpenCensusはGoがプライマリーの扱いだったが、OpenTelemetryはリポジトリを見る限りでは、Java中心<ul><li><a href="https://opentelemetry.io/" target="_blank" rel="noopener">https://opentelemetry.io/</a></li></ul></li><li>OpenCensus時代にも、Agent/Collectorというものが作られていた<ul><li>fluentdみたいなやつ。Exporterをアプリケーションで設定するのではなくて、Agentに設定すると、アプリケーションが相手先のシステムが何かを知らずに（気にせずに）出力できる</li><li>CollectorはAgentの出力を集めて、実際の集計サーバーに転送する、というコンセプト</li><li>現在でも安定はしていないが、<a href="https://medium.com/opentracing/a-roadmap-to-convergence-b074e5815289" target="_blank" rel="noopener">OpenTelemetryはProxy, Sidecar, AgentというのがProject Overviewに明記されている</a>ので、こちらが主流になる？とはいえ、C#のリポジトリを見ると、<a href="https://github.com/open-telemetry/opentelemetry-dotnet" target="_blank" rel="noopener">exporterも依然として存在する模様</a> </li></ul></li><li>用語が少し整理される？<ul><li>InstrumentはCollectorとなる？</li></ul></li></ul><h1 id="その他の情報源"><a href="#その他の情報源" class="headerlink" title="その他の情報源"></a>その他の情報源</h1><p>OpenCensusの情報はまとまっていなかったので、次のページを作ってみました。</p><ul><li><a href="https://github.com/shibukawa/awesome-opencensus" target="_blank" rel="noopener">https://github.com/shibukawa/awesome-opencensus</a></li></ul><p>あとは、Observability JapanというDiscordのグループもあります。</p><ul><li><a href="https://discordapp.com/invite/dcvSbt2" target="_blank" rel="noopener">https://discordapp.com/invite/dcvSbt2</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;うちの会社では、各種クラウドサービスの知見を共有する勉強会を毎週行なっています。弊社ではコンサルティング事業をしていて、次々と多くの案件をこなしているし、各案件の要件も異なるため、自社でもっている知見もバラエティーに富んでいます。既存のサービスではこういう制約があってハマっ
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Monitoring" scheme="https://future-architect.github.io/tags/Monitoring/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>【合格記】GCP Professional Cloud Architect認定資格を振り返る</title>
    <link href="https://future-architect.github.io/articles/20190530/"/>
    <id>https://future-architect.github.io/articles/20190530/</id>
    <published>2019-05-30T03:00:15.000Z</published>
    <updated>2019-06-07T00:32:45.372Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GCP-Professional-Cloud-Architectって？"><a href="#GCP-Professional-Cloud-Architectって？" class="headerlink" title="GCP Professional Cloud Architectって？"></a>GCP Professional Cloud Architectって？</h2><p><a href="https://cloud.google.com/certification/cloud-architect?hl=ja" target="_blank" rel="noopener">公式ホームページ</a>にも記載があるように、GCPのアーキテクチャ・インフラストラクチャに関する知識を有していることを客観的に証明するための資格です。<br>ポイントは、<strong>ビジネス目標を実現するために</strong>という点で、架空の事業者に対するソリューション提案を行うのような設問が多く出題されていました。</p><h2 id="筆者について"><a href="#筆者について" class="headerlink" title="筆者について"></a>筆者について</h2><p>元々はオンプレミスのネットワーク屋さんで、クラウドはAWSでの構築経験がそれなりにありました。<br>GCPについては半年ほど、設計や実現可能性を確認するための検証を実施していました。</p><h2 id="試験までに何をしたか"><a href="#試験までに何をしたか" class="headerlink" title="試験までに何をしたか"></a>試験までに何をしたか</h2><p>あまり勉強時間が取れなかったため、しっかり座って紙に書いて・・・といったことは基本的に行っていません。<br>出張など移動のスキマ時間に教材を読みこみました。<br># 私は仕事でGCPを触っていましたが、触ったことのない方は画面ポチポチで構築するのもGoodだと思います<br># 最初は無料トライアルで3万円分のクレジットが付いているので、お片付けを忘れなければ課金されないです</p><h3 id="試験で気になるお金の話"><a href="#試験で気になるお金の話" class="headerlink" title="試験で気になるお金の話"></a>試験で気になるお金の話</h3><p>試験ですので費用がかかります。</p><ul><li>試験時間: 2 時間</li><li>登録料: 200 米ドル</li><li>言語: 英語、日本語、スペイン語、ポルトガル語</li></ul><p>まぁまぁ高い・・・です。一回で合格できるようにがんばりましょう。</p><h2 id="申込み方法は？"><a href="#申込み方法は？" class="headerlink" title="申込み方法は？"></a>申込み方法は？</h2><p><a href="https://webassessor.com/wa.do?page=publicHome&branding=GOOGLECLOUD" target="_blank" rel="noopener">webassessor</a>経由で申し込みになります。<br>申込み後に送られてくるメールと身分証明書（2枚別のもの）が試験当日に必要になるので、ウッカリ忘れないようにご注意を！<br># 私はメールが行方不明になって当日めちゃくちゃ焦りました。</p><h3 id="勉強に使った教材"><a href="#勉強に使った教材" class="headerlink" title="勉強に使った教材"></a>勉強に使った教材</h3><p>並行してKubernetesの勉強もしていたため、下記の書籍を利用して勉強しました。<br>GKEはあるけど、Kubernetes関連の問題はでないだろう、と思ってたらしっかり出たので用語や挙動についても勉強することをおすすめします。</p><ul><li><a href="https://www.amazon.co.jp/Google-Cloud-Platform-%E3%82%A8%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%97%E3%83%A9%E3%82%A4%E3%82%BA%E8%A8%AD%E8%A8%88%E3%82%AC%E3%82%A4%E3%83%89-%E9%81%A0%E5%B1%B1/dp/4822257908" target="_blank" rel="noopener">Google Cloud Platform エンタープライズ設計ガイド</a></li><li><a href="https://www.amazon.co.jp/Kubernetes%E5%AE%8C%E5%85%A8%E3%82%AC%E3%82%A4%E3%83%89-impress-top-gear-%E9%9D%92%E5%B1%B1/dp/4295004804/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&keywords=kubernetes&qid=1559176294&s=books&sr=1-1" target="_blank" rel="noopener">Kubernetes完全ガイド</a></li><li><a href="https://ja.coursera.org/specializations/gcp-architecture-jp" target="_blank" rel="noopener">coursera:Architecting with Google Cloud Platform 日本語版専門講座</a></li></ul><h3 id="何はともあれ出題範囲"><a href="#何はともあれ出題範囲" class="headerlink" title="何はともあれ出題範囲"></a>何はともあれ出題範囲</h3><p>闇雲に勉強してもクラウドサービスはとにかくできることが多いので、対象を絞っていきましょう。<br>セクションは大きく6セクションです。</p><ul><li>セクション 1: クラウド ソリューション アーキテクチャの設計と計画</li><li>セクション 2: ソリューション インフラストラクチャの管理とプロビジョニング</li><li>セクション 3: セキュリティとコンプライアンスを考慮した設計</li><li>セクション 4: 技術プロセスやビジネス プロセスの分析と改善</li><li>セクション 5: 実装の管理</li><li>セクション 6: ソリューションおよびオペレーションの信頼性の確保</li></ul><p><a href="https://cloud.google.com/certification/guides/professional-cloud-architect/?hl=ja" target="_blank" rel="noopener">参考：公式の出題範囲</a></p><p>もうすでにザックリしています…。</p><p>Associate Cloud Engineerの試験に比べるとセクション4のマネジメントにかかわる部分などが追加されています。<br>計画・設計・マネジメント・実装・運用の意図通りの知識を要求されます。</p><h3 id="で、結局何をやれば・・・"><a href="#で、結局何をやれば・・・" class="headerlink" title="で、結局何をやれば・・・"></a>で、結局何をやれば・・・</h3><p>試験範囲が広いことはわかったけど、何をやったらいいのか・・・</p><p>まだGCPに慣れていない、あるいはそもそもどんなサービスがあるかわかっていない、という方は最初に<a href="https://www.amazon.co.jp/Google-Cloud-Platform-%E3%82%A8%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%97%E3%83%A9%E3%82%A4%E3%82%BA%E8%A8%AD%E8%A8%88%E3%82%AC%E3%82%A4%E3%83%89-%E9%81%A0%E5%B1%B1/dp/4822257908" target="_blank" rel="noopener">Google Cloud Platform エンタープライズ設計ガイド</a>を読むことをおすすめします。<br>完璧に網羅しているわけではありませんが、GCPのサービスやそれらにどのような特徴があるのかが読みやすい粒度で書いてあるので、流し読む程度でも読破すると良いです。</p><p>次に<a href="https://ja.coursera.org/specializations/gcp-architecture-jp" target="_blank" rel="noopener">courseraのArchitecting with Google Cloud Platform 日本語版専門講座</a>を受講してみましょう。スマホさえあればどこでも聞けますし、通勤・通学のお供にしてもらうときづいたら終わっていると思います。<br>より、具体的な各サービスやアーキテクチャの解説があり、Googleが目指しているインフラストラクチャ・アーキテクチャの世界を垣間見ることができます。</p><p>ここまでで、ふわっとGCPがなにか、どのような設計思想なのか、のようなことがわかってくると思います。<br>さらにはAWSほどではないですが、DB周りやコンピューティング（GCE/GAE/GKEなど）は似て異なる部分があります。<br>それらの違いを理解して、適切にソリューションを提案できるようになることが重要です。</p><p>追加で下記の勉強をされると盤石です。</p><ul><li>GCPのアカウントを取得して実際に構築を行う</li><li>kubernetesについてアウトラインを学習・見直す</li><li>kubernetesの周辺ツール（SpinnakerとかHelmとか）について学ぶ</li><li>CI/CDの周辺ツールについて学習・見直す</li></ul><h3 id="他には？"><a href="#他には？" class="headerlink" title="他には？"></a>他には？</h3><p>コレは出ないだろと見落としがちですが、ネットワーク関連のソリューションを抑えておくことをおすすめします。<br><a href="https://cloud.google.com/interconnect/?hl=ja" target="_blank" rel="noopener">Cloud Interconnect</a>のページは必読です。</p><h3 id="重要なこと"><a href="#重要なこと" class="headerlink" title="重要なこと"></a>重要なこと</h3><p><a href="https://cloud.google.com/certification/guides/professional-cloud-architect/?hl=ja" target="_blank" rel="noopener">試験ガイドとケーススタディ</a>にひっそりと「ケーススタディのサンプル」という項目があり、架空の会社やソリューションの説明が載っています。<br>これらの会社がどんな会社で、何を困っていて、どうしたいかという外枠からの設問も多く出題されるので、サラッと読んでおくと、試験時に「何言ってるんだ・・・？」がなくなります。</p><h3 id="実力がついたか不安・・・"><a href="#実力がついたか不安・・・" class="headerlink" title="実力がついたか不安・・・"></a>実力がついたか不安・・・</h3><p>そんなあなたに公式の<a href="https://cloud.google.com/certification/practice-exam/cloud-engineer?hl=ja" target="_blank" rel="noopener">模擬試験</a>があります。<br>何回やっても同じ問題なので、個人的には勉強後に実施することをおすすめします。</p><h3 id="試験当日について"><a href="#試験当日について" class="headerlink" title="試験当日について"></a>試験当日について</h3><p>試験当日は30分くらい前に試験会場につくことをおすすめします。<br>webassessorのメールを見失っても時間の余裕が助けてくれます。<br>窓口の方にgoogleの試験を受けに来たとお伝えすれば手続きをしていただけます。<br>あとは試験会場で実力を発揮するだけです！（周囲の音が気になる方は部屋にヘッドホンがありました@秋葉原会場）</p><h3 id="試験後のボーナスは？"><a href="#試験後のボーナスは？" class="headerlink" title="試験後のボーナスは？"></a>試験後のボーナスは？</h3><p>あります。ボーナスあります。<br>下記の商品から選ぶことができて、だいたい2週間位でモノが届きます。効果としてはGoogleが好きになります。</p><table><thead><tr><th>パーカー</th><th>リュック</th><th>プルオーバー</th></tr></thead><tbody><tr><td><img src="/images/20190530/photo_20190530_01.png"></td><td><img src="/images/20190530/photo_20190530_02.png"></td><td><img src="/images/20190530/photo_20190530_03.png"></td></tr></tbody></table><h3 id="リンクまとめ"><a href="#リンクまとめ" class="headerlink" title="リンクまとめ"></a>リンクまとめ</h3><ul><li><a href="https://cloud.google.com/certification/cloud-architect?hl=ja" target="_blank" rel="noopener">公式ホームページ</a></li><li><a href="https://webassessor.com/wa.do?page=publicHome&branding=GOOGLECLOUD" target="_blank" rel="noopener">webassessor（試験申し込み）</a></li><li><a href="https://cloud.google.com/certification/guides/professional-cloud-architect/?hl=ja" target="_blank" rel="noopener">試験ガイドとケーススタディ</a></li><li><a href="https://cloud.google.com/certification/practice-exam/cloud-engineer?hl=ja" target="_blank" rel="noopener">模擬試験</a></li><li><a href="https://www.amazon.co.jp/Google-Cloud-Platform-%E3%82%A8%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%97%E3%83%A9%E3%82%A4%E3%82%BA%E8%A8%AD%E8%A8%88%E3%82%AC%E3%82%A4%E3%83%89-%E9%81%A0%E5%B1%B1/dp/4822257908" target="_blank" rel="noopener">Google Cloud Platform エンタープライズ設計ガイド</a></li><li><a href="https://www.amazon.co.jp/Kubernetes%E5%AE%8C%E5%85%A8%E3%82%AC%E3%82%A4%E3%83%89-impress-top-gear-%E9%9D%92%E5%B1%B1/dp/4295004804/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&keywords=kubernetes&qid=1559176294&s=books&sr=1-1" target="_blank" rel="noopener">Kubernetes完全ガイド</a></li><li><a href="https://ja.coursera.org/specializations/gcp-architecture-jp" target="_blank" rel="noopener">coursera:Architecting with Google Cloud Platform 日本語版専門講座</a></li><li><a href="https://cloud.google.com/certification/guides/professional-cloud-architect/?hl=ja" target="_blank" rel="noopener">公式の出題範囲</a></li><li><a href="https://cloud.google.com/interconnect/?hl=ja" target="_blank" rel="noopener">Cloud Interconnect</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GCP-Professional-Cloud-Architectって？&quot;&gt;&lt;a href=&quot;#GCP-Professional-Cloud-Architectって？&quot; class=&quot;headerlink&quot; title=&quot;GCP Professional Cloud
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
  </entry>
  
  <entry>
    <title>「スマートグラスを使った革新的なビジネスを考えるアイデアソン」の実施報告</title>
    <link href="https://future-architect.github.io/articles/20190527/"/>
    <id>https://future-architect.github.io/articles/20190527/</id>
    <published>2019-05-27T00:00:00.000Z</published>
    <updated>2019-05-27T17:07:54.142Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは、フューチャーのSAIG（Strategic AI Group）所属の佐藤です。</p><p>フューチャー主催でアイデアソンを開催し、運営としてとても勉強になりました。<br>この場をお借りして、当日の様子をお伝えします。</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>2019年3月21日に大崎Think Park Tower 9Fにて、『<a href="https://future.connpass.com/event/120099/" target="_blank" rel="noopener">スマートグラスを使った革新的なビジネスを考えるアイデアソン</a>』と題してアイデアソンを開催しました！<br>スマートグラスで未来の生活を実現する革新的なビジネスのアイデアを考えたい、そんな熱い気持ちを持った17名の方々にお集まりいただきました!また、スマートグラスを提供している各社が集い、最新のスマートグラスの体験会も開催しました。</p><p>お忙しい中アイデアソンにご参加いただいた皆さま、体験会にご協力いただいた各企業様、本当にありがとうございました!</p><h4 id="実施内容"><a href="#実施内容" class="headerlink" title="実施内容"></a>実施内容</h4><p>下記スケジュールで実施しました。</p><table><thead><tr><th align="right">No.</th><th align="left">時間</th><th align="left">内容</th></tr></thead><tbody><tr><td align="right">1</td><td align="left">10:30-11:15</td><td align="left">各社のスマートグラス体験会・個人でアイデア検討</td></tr><tr><td align="right">2</td><td align="left">11:45-12:30</td><td align="left">個人のアイデア発表</td></tr><tr><td align="right">3</td><td align="left">12:30-12:45</td><td align="left">チーム分け</td></tr><tr><td align="right">4</td><td align="left">13:30-16:30</td><td align="left">アイデアのブラッシュアップ</td></tr><tr><td align="right">5</td><td align="left">16:30-17:30</td><td align="left">アイデア発表・投票</td></tr><tr><td align="right">6</td><td align="left">17:30-19:00</td><td align="left">表彰式・懇親会</td></tr></tbody></table><h2 id="スマートグラス体験会"><a href="#スマートグラス体験会" class="headerlink" title="スマートグラス体験会"></a>スマートグラス体験会</h2><p>アイデアソンを始める前に、各社が販売している最新のスマートグラスの体験会を実施しました。</p><p>体験会では、協賛企業5社の製品と弊社が所持しているHololensを体験していただきました。</p><p>簡単に紹介します。(各製品名をクリックするとHPに飛べます)</p><h4 id="JMACS株式会社様"><a href="#JMACS株式会社様" class="headerlink" title="JMACS株式会社様"></a>JMACS株式会社様</h4><img src="/images/20190527/1.jpg"><ul><li><a href="http://www.jmacs-j.co.jp/news/%E5%9B%BD%E5%86%85%E5%88%9D%EF%BC%81%E9%98%B2%E7%88%86%EF%BC%81%E6%96%B0%E3%82%B9%E3%83%9E%E3%83%BC%E3%83%88%E3%82%B0%E3%83%A9%E3%82%B9%E3%81%AE%E8%B2%A9%E5%A3%B2%E9%96%8B%E5%A7%8B/" target="_blank" rel="noopener">HMT-1Z1</a><ul><li>現場作業向け防爆スマートグラス</li><li>可燃性ガスが発生する場所や粉塵が存在する場所など、爆発の危険性がある場所で使用可能な国内初のスマートグラス</li></ul></li></ul><h4 id="santec株式会社様"><a href="#santec株式会社様" class="headerlink" title="santec株式会社様"></a>santec株式会社様</h4><img src="/images/20190527/2.jpg"><ul><li><a href="https://www.santec.com/jp/30746" target="_blank" rel="noopener">M300</a></li><li><a href="https://www.sun-denshi.co.jp/service/acereal/" target="_blank" rel="noopener">AceReal(防塵防滴)</a><ul><li>現場作業向けスマートグラス</li><li>スマートグラスで現場映像を本部に送り、本部からの指示画像を目の前のモニタに投影</li><li>音声指示を取得することで、より適切な現場対応を実施</li></ul></li></ul><h4 id="レノボジャパン株式会社様"><a href="#レノボジャパン株式会社様" class="headerlink" title="レノボジャパン株式会社様"></a>レノボジャパン株式会社様</h4><img src="/images/20190527/3.jpg"><ul><li><a href="https://www.lenovo.com/jp/ja/vr-smartdevices/augmented-reality/lenovo-mirage-solo/Mirage-Solo/p/ZZIRZRHVR01" target="_blank" rel="noopener">Mirage Solo</a><ul><li>世界初のスタンドアロン型でかつDaydream対応、WorldSense搭載のVRヘッドセット</li><li>体験会では、避難訓練を疑似体験</li></ul></li></ul><h4 id="セイコーエプソン株式会社様"><a href="#セイコーエプソン株式会社様" class="headerlink" title="セイコーエプソン株式会社様"></a>セイコーエプソン株式会社様</h4><img src="/images/20190527/4.jpg"><ul><li><a href="https://www.epson.jp/products/moverio/bt300/" target="_blank" rel="noopener">MOVERIO BT-300</a><ul><li>紙に書いてある絵が立体的に浮かび上がるARグラス</li><li>絵に塗った色を投影</li></ul></li><li><a href="https://www.epson.jp/products/moverio/bt300/" target="_blank" rel="noopener">MOVERIO BT-300</a><ul><li>いつでもどこでもパーソナルシアターが楽しめるARグラス</li><li>リモコン内蔵のAndroid端末の映像を、目の前に大きく投影</li></ul></li></ul><h4 id="QDレーザ株式会社様"><a href="#QDレーザ株式会社様" class="headerlink" title="QDレーザ株式会社様"></a>QDレーザ株式会社様</h4><img src="/images/20190527/5.jpg"><ul><li><a href="https://www.qdlaser.com/products/retissa.html" target="_blank" rel="noopener">RETISSA Display</a><ul><li>眼球に直接レーザーを照射するARグラス</li><li>視力が低い人でも映像が鮮明に見える医療向け機器</li></ul></li></ul><h4 id="フューチャー所持機器"><a href="#フューチャー所持機器" class="headerlink" title="フューチャー所持機器"></a>フューチャー所持機器</h4><img src="/images/20190527/6.jpg"><ul><li><a href="https://www.microsoft.com/ja-jp/hololens" target="_blank" rel="noopener">HoloLens</a><ul><li>Microsoft製のARグラス</li><li>アイデアソンではFuture社員(澤田)が開発したアプリ『<a href="https://future-architect.github.io/articles/20170421/">Potato Head</a>』(人の顔をじゃがいもに変換するアプリ)を体験</li></ul></li></ul><h2 id="チーム分け・発表準備"><a href="#チーム分け・発表準備" class="headerlink" title="チーム分け・発表準備"></a>チーム分け・発表準備</h2><p>チーム分けと発表準備は、以下の流れで実施しました。</p><ol><li>1人1アイデア宿題として事前に準備した内容を個人発表</li><li>各発表を聞いて良いと思ったアイデアに投票</li><li>投票の結果、上位チームの中で「もっと深堀したい!」と思ったアイデアを選び、アイデアごとにチームを組む<ul><li>上位に入れなかったアイデアでも、「どうしても自分のアイデアで戦いたい!」と思う人は『情熱枠』として自分のアイデアで参加も可能</li></ul></li><li>制限時間内にアイデアの深堀とプレゼン用スライドを作成し、発表会を実施</li></ol><img src="/images/20190527/7.jpg"><img src="/images/20190527/8.jpg"><img src="/images/20190527/9.jpg"><p>各チーム時間をフルに使って、アイデアのプラッシュアップと発表資料の作成に取り組んでいました。</p><h2 id="アイデア発表"><a href="#アイデア発表" class="headerlink" title="アイデア発表"></a>アイデア発表</h2><p>各チーム5分の持ち時間で、以下の順番で発表会を実施しました。</p><table><thead><tr><th align="right">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; No. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th><th align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; チーム名 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th><th align="left">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; タイトル &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th><th align="left">発表内容</th></tr></thead><tbody><tr><td align="right">1</td><td align="left">SGGG</td><td align="left">Smart GyoGyo Glass</td><td align="left">漁業へのARの活用。魚群の場所、魚の種類や大きさ(食べごろかどうか)、漁獲可能な量などの情報を表示する。</td></tr><tr><td align="right">2</td><td align="left">Team Trust</td><td align="left">ARマッチングアプリ</td><td align="left">婚活へのARの活用。婚活パーティーなどで、参加者の特徴や趣味が合う参加者などを表示する。分析結果をマッチングビジネスの企業に提供することで、収入も得られる。</td></tr><tr><td align="right">3</td><td align="left">TRIATE</td><td align="left">WANT ONLY</td><td align="left">見たいものだけをARで投影する。例えば、怒っている人を猫やVTuberに変換する。労働をその人が好きな娯楽に変えることもできる。</td></tr><tr><td align="right">4</td><td align="left">COACH</td><td align="left">What the food looks Like</td><td align="left">ARでレストランのメニューを投影。レストランで作られている料理を注文前に表示することで、顧客が期待する大きさや見た目のイメージと実際に提供される料理との乖離を回避する。</td></tr><tr><td align="right">5</td><td align="left">キモチ開発</td><td align="left">キモチみえるめがね</td><td align="left">ARを用いた感情分析・表示による育児支援。子供の感情を表示して育児に役立てる。また、子供の片付けのガイダンス(片付け場所の指示)など、子供の教育にも活用できる。</td></tr><tr><td align="right">6</td><td align="left">ハッピーターン</td><td align="left">ショパナビ</td><td align="left">ARによる買い物支援。家の冷蔵庫など、IoT家電とスマートグラスを連携。買い物が必要な食材等をスマートグラスに表示し、販売されている店舗に誘導する。店舗内でも、当該食材がどこにあるかを表示、誘導する。</td></tr><tr><td align="right">7</td><td align="left">ふくじんチーム</td><td align="left">アラート・グラス</td><td align="left">周囲の危険を表示。例えば、背後から車が来る場合に警告を表示するなどといった機能を提供する。表示だけでなく、音声による警告も発することで、視覚障害者にも対応する。</td></tr><tr><td align="right">8</td><td align="left">コーヒー</td><td align="left">スタイリングアプリ</td><td align="left">女性のスタイリング支援。事前にカメラで体型を撮影し、サイズ等を登録しておくことで、朝、忙しい女性のスタイリングをARで実施する。女性の好みを記録しておくことで、その後のアパレル企業のマーケティングにも活用できる。</td></tr></tbody></table><p>各チームとてもユニークで革新的なアイデアの発表でした。</p><h2 id="結果発表・表彰式"><a href="#結果発表・表彰式" class="headerlink" title="結果発表・表彰式"></a>結果発表・表彰式</h2><p>各チームの発表が終わり、参加者・参加企業・運営メンバによる投票で順位を決めました。<br>見事、最優秀賞を獲得したアイデアは…</p><p><strong>キモチ開発</strong>の<strong>『キモチみえるめがね』!!!</strong></p><p>おめでとうございます!</p><iframe src="https://www.slideshare.net/slideshow/embed_code/key/JaUJoHOP1qwGuJ" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/secret/JaUJoHOP1qwGuJ" title="〇〇〇〇〇〇めがね" target="_blank">〇〇〇〇〇〇めがね</a> </strong> from<strong><a href="https://www.slideshare.net/webhisa" target="_blank">達彦 徳久</a></strong> </div><p>発表内容は、子育て支援をするためのARグラス。<br>アイデアの背景として、核家族化する日本社会で、育児の大変さも増している現状があります。</p><p>ARグラスをかけた親は、まだ話すことのできない子供の感情を読み取り、子供とのコミュニケーションをより密に図ることができるというアイデアでした。</p><p>さらに、こどもが大きくなってからはARグラスを装着することで、片付けのガイダンス(片付け場所の指示)が表示され、教育にも活用できるというアイデアも盛り込まれていました。</p><p>人は生後間6ヶ月ほどの間は顔認識を頼りにしていること、両手で片付けをすべきであることから、「スマートグラスでなければならない」ことを強く伝えていた点も印象的でした。</p><p>キモチ開発チームの2名は、チーム分けをした時点ではそれぞれ情熱枠で1人チームでしたが、ブラッシュアップ中にそれぞれのアイデアを活かして1チームになったとのことです。</p><p>それぞれのアイデアを活かしつつ協力して勝ち取った最優秀賞でした。</p><img src="/images/20190527/10.jpg"><p>キモチ開発のお二人には、2019年05月21日発売予定の『<a href="https://www.oculus.com/quest/?locale=ja_JP" target="_blank" rel="noopener">Oculus Quest</a>』が贈呈されます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回のアイデアソンのタイトルの通り、<strong>革新的なビジネス</strong>のアイデアがたくさん出たアイデアソンでした。アイデア次第で、ジャンルに囚われることなく様々な場面に活用できるのが、スマートグラスの強みであり面白いところだと感じました。</p><p>私は運営としての参加でしたが、次回はアイデアを考える側として参加してみたいと思いました!</p><img src="/images/20190527/11.jpg">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは、フューチャーのSAIG（Strategic AI Group）所属の佐藤です。&lt;/p&gt;
&lt;p&gt;フューチャー主催でアイデアソンを開催し、運営としてとても勉強になりました。&lt;br&gt;この場をお借りして、当日の様子をお伝えします。&lt;/p&gt;
&lt;h2 id=&quot;概要&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="VR" scheme="https://future-architect.github.io/categories/VR/"/>
    
    
      <category term="HoloLens" scheme="https://future-architect.github.io/tags/HoloLens/"/>
    
  </entry>
  
  <entry>
    <title>AI EXPO2019に参加しました！</title>
    <link href="https://future-architect.github.io/articles/20190515/"/>
    <id>https://future-architect.github.io/articles/20190515/</id>
    <published>2019-05-15T00:53:25.000Z</published>
    <updated>2019-05-15T01:03:44.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。Strategic AI Groupの田中駿です。</p><p>Strategic AI Groupは、4/3~5に東京ビッグサイトで開催されたAI・人工知能EXPOに出展を行いました。<br>今年の来場者数は３日間合計で48,739人!ととても大規模な展示会です。</p><p>初めてのAI EXPO出展でしたが、3,500枚用意していたチラシもすべて無くなり、追加で印刷しに走るくらい、多くのお客様に来訪いただきました！<br>このブログではその展示内容について紹介していきます。</p><img src="/images/20190515/photo_20190515_01.png" class="img-middle-size">▲ ブースはこんなでした<img src="/images/20190515/photo_20190515_02.png" class="img-middle-size">▲ 大盛況なようす<h1 id="展示内容"><a href="#展示内容" class="headerlink" title="展示内容"></a>展示内容</h1><p>おもに次の3つの展示を行いました。それぞれ説明します。</p><ol><li>パーソナルAIメイクアドバイザー</li><li>スポーツAI</li><li>本人確認AI</li></ol><h2 id="1-パーソナルAIメイクアドバイザー"><a href="#1-パーソナルAIメイクアドバイザー" class="headerlink" title="1. パーソナルAIメイクアドバイザー"></a>1. パーソナルAIメイクアドバイザー</h2><img src="/images/20190515/photo_20190515_03.png" class="img-small-size"><p>パーソナルAIメイクアドバイザーは、お客様がその日のなりたい印象に合わせたメイクを楽しむためのサポートツールとして、化粧品メーカーのオルビス様と共同開発したサービスです。</p><p>顔写真を撮影するだけで、四季をイメージした4カテゴリでパーソナルカラーを判定(パーソナルカラー診断)、顔のパーツや比率の分析のフェイスプロポーション診断と組み合わせて似合う色や目的に合った商品を提案します。</p><p>「パーソナルカラー診断」と「フェイスプロポーション診断」のそれぞれの機能について紹介します。</p><h3 id="パーソナルカラー診断"><a href="#パーソナルカラー診断" class="headerlink" title="パーソナルカラー診断"></a>パーソナルカラー診断</h3><p>「パーソナルカラー診断」とは、ユーザーに似合う色を推薦するもので、通常はプロのカラースタイリストが色のついた布をユーザーの顔に当て、肌の色味などを確認して診断しています。</p><p>フューチャーでは、このパーソナルカラー診断のAI化に挑戦、”プロが過去に診断したパーソナルカラー” と”顔写真”の大量のデータを用いて機械学習を行いました。<br>結果として、プロのカラースタイリストと比べても遜色ないレベルでパーソナルカラーを判定できるまでに至りました<em>1。<br>(</em>1: 画質が低い場合や不明瞭な場合を除く。)</p><img src="/images/20190515/photo_20190515_04.png" class="img-small-size"><h3 id="フェイスプロポーション診断"><a href="#フェイスプロポーション診断" class="headerlink" title="フェイスプロポーション診断"></a>フェイスプロポーション診断</h3><p>「フェイスプロポーション診断」は、顔のパーツの特徴や、配置のバランスから、ユーザーの顔を「子供顔、大人顔」、「直線的・切れ長目・曲線的・柔らかい」といったプロポーションの分類するものです。</p><p>顔写真のデータから顔のパーツの座標を検知、それぞれの距離や大きさ、比率などから、プロポーション診断を行っています。</p><p>次のようにユーザーの顔がどのようなフェイスプロポーションに分類されるか確認でき、パーソナルカラー診断の結果と合わせて、ユーザーに似合うメイク方法等を提案します。</p><img src="/images/20190515/photo_20190515_05.png" class="img-small-size"><p>ORBISアプリは、以下のURLからダウンロード可能です。<br>みなさんもぜひパーソナルAIメイクアドバイザーを使ってみて下さい！</p><p><a href="https://www.orbis.co.jp/contents/app/personal_color/" target="_blank" rel="noopener">https://www.orbis.co.jp/contents/app/personal_color/</a></p><h2 id="2-スポーツAI"><a href="#2-スポーツAI" class="headerlink" title="2. スポーツAI"></a>2. スポーツAI</h2><img src="/images/20190515/photo_20190515_06.png" class="img-small-size"><p>スポーツAIの展示では、投球フォーム分析のデモ展示を行いました。<br>本研究は、鹿屋体育大学という日本で唯一の国立体育大学との共同研究となっています。</p><p>野球選手がピッチングの練習を行う際、調子の良い時と悪い時を比較し、投げ方の修正をしたいというニーズがあります。<br>しかし、単純に調子の良い時と悪い時でそれぞれ動画を撮影し重ね合わせて見ても、投球の動作に要する時間は徐々にずれていくため、選手自身が確認したいポイントでの比較がしづらいという課題があります。</p><p>そのため、フューチャーでは投球モーションの動画に対して、自動でチャプターに分割し（構え、膝抱え、テイクバック等）、チャプター毎に同期させることで、モーションの差異を可視化する技術を開発しています。</p><h2 id="3-本人確認AI"><a href="#3-本人確認AI" class="headerlink" title="3. 本人確認AI"></a>3. 本人確認AI</h2><img src="/images/20190515/photo_20190515_07.png" class="img-small-size"><p>銀行口座の開設を行う際、申請を行っている人が本人なのかを確認する作業、「本人確認」が必要になります。<br>この本人確認の作業には時間を要し、結果として口座開設率の低下や投資モチベーションの低下などの機会損失が発生してしまう恐れがあります。</p><p>本人確認作業に要する人的コストを削減するべく、フューチャーでは本人確認AIを研究開発しています。<br>この本人確認AIには「なりすまし判定」と「顔照合」の2つの機能が含まれており、例えば他人の顔写真を印刷することによるなりすまし(プリントアタック)への対応や、眼鏡を付けたままでの本人確認などを実現しています。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>Strategic AI Groupでは、この記事で紹介した内容以外にも、金融機関における融資審査の自動化や、カスタマーボイスの分析技術、食品等の需要予測などなど、多彩なドメインにおいてAI・機械学習技術を活用しています。</p><p>また、言語処理、画像処理、データ分析等に興味のあるエンジニアの方も募集していますので、<br>EXPO展示の内容や人材募集に関して詳しく知りたい方はこちら(<a href="mailto:future-ai@future.co.jp" target="_blank" rel="noopener">future-ai@future.co.jp</a>)まで気軽にご連絡ください！</p><img src="/images/20190515/photo_20190515_08.png">▲ AI EXPO終了後に集合写真]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。Strategic AI Groupの田中駿です。&lt;/p&gt;
&lt;p&gt;Strategic AI Groupは、4/3
      
    
    </summary>
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>第1回PG Battle参戦記</title>
    <link href="https://future-architect.github.io/articles/20190513/"/>
    <id>https://future-architect.github.io/articles/20190513/</id>
    <published>2019-05-13T01:33:39.000Z</published>
    <updated>2019-05-15T01:05:59.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、テクノロジーイノベーショングループ・DXチーム所属兼、競技プログラミング部の<a href="https://atcoder.jp/users/tutuz" target="_blank" rel="noopener">tutuz</a>です。</p><p>2018年11月17日に開催された<a href="https://products.sint.co.jp/pg_battle_2018" target="_blank" rel="noopener">PG Battle</a>というプログラミングコンテストに社内チームで参戦しました。</p><p>今回はその結果について説明します。</p><h2 id="参加のキッカケ"><a href="#参加のキッカケ" class="headerlink" title="参加のキッカケ"></a>参加のキッカケ</h2><p>私の競技プログラミング部での活動は、主にAtCoder, Codeforcesで開催されるコンテストへの参加です。</p><p>そんな中で、PG Battleの参加した理由は、弊社の <a href="https://atcoder.jp/users/tanzaku" target="_blank" rel="noopener">tanzaku</a> さんからの一言でした！</p><blockquote><p><a href="https://products.sint.co.jp/pg_battle_2018" target="_blank" rel="noopener">https://products.sint.co.jp/pg_battle_2018</a><br>申込み期限まで日がないですが、誰かチーム組んで参加しませんか。<br>(by tanzakuさん)</p></blockquote><p>せっかくの機会で是非参加したみたかったので、</p><blockquote><p>参加してみたいです！！！<br>(by tutuz)</p></blockquote><p>…ということで参加が決まりました！</p><h2 id="競技のルール"><a href="#競技のルール" class="headerlink" title="競技のルール"></a>競技のルール</h2><p>プログラミングコンテストのルールはシンプルです。</p><ul><li>1チーム3人で参加</li><li>チームで一つの問題に取り組むのではなく、エントリー時に選択した難易度の問題に3人それぞれで挑戦し、チームの合計点を競う</li><li>問題は「ましゅまろ」「せんべい」「かつおぶし」の3つの難易度の問題が用意されていて、エントリー時に決める<ul><li>ましゅまろが一番易しく、かつおぶしが一番難しい</li></ul></li><li>チームでの相談はOK<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li><li>合計点が同じ場合は、解答時間の短い方が上位</li><li>企業の部と学校の部のそれぞれで順位が決まる</li></ul><h3 id="チーム編成"><a href="#チーム編成" class="headerlink" title="チーム編成"></a>チーム編成</h3><ul><li><a href="https://atcoder.jp/users/tanzaku" target="_blank" rel="noopener"><b><font color="Orange">tanzaku</font></b></a></li><li><a href="https://atcoder.jp/users/kou65536" target="_blank" rel="noopener"><b><font color="Blue">kou65536</font></b></a></li><li><a href="https://atcoder.jp/users/tutuz" target="_blank" rel="noopener"><b><font color="LightSeaGreen">tutuz</font></b></a></li></ul><p>解く問題の難易度については、当時(2018年11月5日)の <a href="https://atcoder.jp/" target="_blank" rel="noopener">AtCoder</a> のレートの高い順に、tanzakuさん・kou65536さん・私でしたので、順に難しい問題に取り組むことになりました。</p><h1 id="コンテスト当日-By-tutuz"><a href="#コンテスト当日-By-tutuz" class="headerlink" title="コンテスト当日(By tutuz)"></a>コンテスト当日(By tutuz)</h1><p>コンテストは13時からでした。私はいつもの通り自宅で精神を整えてからコンテストに参加しました。</p><p>私が取り組んだ「ましゅまろ」の問題は、$1$ 問目から $3$ 問目はすぐに解くことができました。$4$ 問目の問題は難しかったです。</p><p>以下のような問題でした。</p><blockquote><p>■解説内容<br>「ましゅまろ　難易度1，2，3，5」から、難易度5「旅」<br>「せんべい　難易度2，3，4，6」から、難易度4「除去とスコア」<br>「かつおぶし　難易度3，4，5，6」から、難易度6「リフルシャッフル」</p></blockquote><blockquote><p>※補足：PG BATTLE受験者様へ<br>上記解説対象の3問につきましては、問題・模範解答等のコンテンツの他、自らが作成したコードや解法についての見解などを、SNSやブログなどを通じて第三者に開示していただいて問題ございません。</p></blockquote><p><strong>※なお $4$ 問目のこの問題は<a href="https://products.sint.co.jp/pg_battle_2018" target="_blank" rel="noopener">PG Battle 公式サイト</a>に記載がある通り、問題や解法などを開示しても問題ないことが示されています</strong></p><h2 id="問題-旅"><a href="#問題-旅" class="headerlink" title="問題(旅)"></a>問題(旅)</h2><p>町が $N$ 個あり、 $M$ 本の双方向に移動可能な道で結ばれています。<br>町には $1$ から $N$ までの番号が、道には $1$ から $M$ までの番号が付いています。<br>$i(1 \le i \le M)$ 番目の道は、町 $A_i$ と町 $B_i$ の間を結んでいて、通ると $H_i$ の幸福を得ることができます。<br>町 $s$ と町 $t$ を $s≠t$ を満たすように選び、同じ町を二回以上訪れないように町 $s$ から町 $t$ まで移動するとき、得られる幸福の総和の最大値を求めてください。</p><h3 id="制約"><a href="#制約" class="headerlink" title="制約"></a>制約</h3><ul><li>制限実行時間：$2$ 秒、制限メモリ使用量：$256$ MB</li><li>$2 \le N \le 12$</li><li>$\displaystyle 1 \le M \le \frac{N \times (N−1)}{2}$</li><li>$1 \le Hi \le 10^7$</li></ul><h2 id="考えていたこと"><a href="#考えていたこと" class="headerlink" title="考えていたこと"></a>考えていたこと</h2><p>$s$ と $t$ は任意に定めることができます。</p><p>例として以下のような重み付きグラフを考えます。町がグラフの頂点、道がグラフの辺として任意の $2$ 点間の最長パスを求めれば良いです。</p><img src="/images/20190513/photo_20190513_01.png"><p>この例では頂点 $2$ と $5$ を選んだときに幸福の総和の最大値が $43$ になります。</p><p>さて、ナイーブな解法は、訪問する頂点の順番を決め打ちして、順番に試せばよいです。訪問する頂点の順番は $O(N!)$ 通りあるので全体の計算量は $O(N \times N!)$ となります。しかし、この計算量では制限実行時間内に問題を解くことができません。</p><p>少し考えてtanzakuさんに相談しました！</p><blockquote><p>制約的にはbitDPな気もするんですが、まだ解法わかってないです…<br>(by tutuz)</p></blockquote><p>(…数分後…)</p><blockquote><p>dp[訪れた都市の集合][今いる都市] := 幸福度のdp<br>巡回セールスマン問題まんまっぽい気がします<br>(by tanzakuさん)</p></blockquote><p>確かに…🌄 と思いながらおもむろに実装するもバグがとれず、tanzakuさんに再度相談(というか雑にコードを投げつける)</p><blockquote><p>始点の情報がうまく実装できていないゆえにバグっていると思っているのですが、<br>どの辺直したら良さそうとかわかりますでしょうか…？<br>(by tutuz)</p></blockquote><figure class="highlight java"><figcaption><span>何かがバグっている実装</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一部省略してあります</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> testNumber, InputReader in, PrintWriter out)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = in.nextInt(), m = in.nextInt();</span><br><span class="line">    <span class="keyword">int</span>[][] mat = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        Arrays.fill(mat[i], -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> a = in.nextInt()-<span class="number">1</span>, b = in.nextInt()-<span class="number">1</span>, h = in.nextInt();</span><br><span class="line">        mat[a][b] = h;</span><br><span class="line">        mat[b][a] = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span> &lt;&lt; n][n];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; i++) &#123;</span><br><span class="line">        Arrays.fill(dp[i], <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> bit = <span class="number">0</span>; bit &lt; <span class="number">1</span> &lt;&lt; n; bit++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> now = <span class="number">0</span>; now &lt; n; now++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> to = <span class="number">0</span>; to &lt; n; to++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((bit &gt;&gt; to &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp; mat[now][to] != -<span class="number">1</span>) &#123;</span><br><span class="line">                    dp[bit | <span class="number">1</span> &lt;&lt; to][to] = Math.max(dp[bit | <span class="number">1</span> &lt;&lt; to][to], dp[bit][now] + mat[now][to]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        max = Math.max(max, dp[(<span class="number">1</span>&lt;&lt;n)-<span class="number">1</span>][i]);</span><br><span class="line">    &#125;</span><br><span class="line">    out.println(max);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>始点というより、if ((bit &gt;&gt; now &amp; 1) == 1 のチェックが足りないような…<br>(by tanzakuさん)</p></blockquote><p>またも確かに…🌄 と思いながらこの部分を…</p><figure class="highlight java"><figcaption><span>修正前</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((bit &gt;&gt; to &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp; mat[now][to] != -<span class="number">1</span>) &#123;</span><br><span class="line">    dp[bit | <span class="number">1</span> &lt;&lt; to][to] = Math.max(dp[bit | <span class="number">1</span> &lt;&lt; to][to], dp[bit][now] + mat[now][to]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このように修正しました。</p><figure class="highlight java"><figcaption><span>修正後</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((bit &gt;&gt; i &amp; <span class="number">1</span>) == <span class="number">1</span> &amp;&amp; (bit &gt;&gt; to &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp; mat[now][to] != -<span class="number">1</span>) &#123;</span><br><span class="line">    dp[bit | <span class="number">1</span> &lt;&lt; to][to] = Math.max(dp[bit | <span class="number">1</span> &lt;&lt; to][to], dp[bit][now] + mat[now][to]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>なんとか制限時間内に修正でき、$4$ 問とも提出することができました。</p><p>コードの完全版はこちらです。<br><a href="https://gist.github.com/future-tsuji/7e0ae4515616d9d0320666e9482faffc" target="_blank" rel="noopener">https://gist.github.com/future-tsuji/7e0ae4515616d9d0320666e9482faffc</a></p><h1 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h1><p>正解/不正解は $15$ 時以降に運営から連絡が来るようなので気長に待ちました。</p><p>…</p><p>企業の部 $169$ チームのうちなんと <strong>$3$ 位</strong> でした👏👏👏</p><img src="/images/20190513/photo_20190513_02.png"><p>ちなみにこのコンテストの3位の賞品は</p><ul><li>Amazonギフト券3万円(チームで3万円)</li><li>超小型PC「Raspberry Pi（ラズパイ）」Pi 3B+ Starter Kit(チームで3台)</li><li>トロフィー</li></ul><p>でした。</p><p>トロフィーはこんな感じでオフィスに飾ってあります。 </p><img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/89391/5a67bd1c-bbd2-378d-915f-b2b6ca25cd20.jpeg" width="50%"><p>tanzakuさん、kou65536さんは賞品でもらった Raspberry Pi を使って、CO2 センサーを開発しているとか 🌿</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回はプログラミングコンテストに社内チームで参加した内容を紹介しました。</p><p>チームでコンテストに取り組むことができ、面白かったです！</p><p>フューチャーアーキテクトには競技プログラミング好きが集まる競技プログラミング部があります。</p><p>弊社での競技プログラミング活動に興味を持っていただけた方、ぜひランチ🍝や、カフェでコーヒー☕でも飲みながら話しましょう♫</p><p><strong><a href="https://www.future.co.jp/recruit/" target="_blank" rel="noopener">We are hiring engineers!!</a></strong></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">HPには明記されていませんが、運営に確認しました。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、テクノロジーイノベーショングループ・DXチーム所属兼、競技プログラミング部の&lt;a href=&quot;https://a
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="競技プログラミング" scheme="https://future-architect.github.io/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
  </entry>
  
  <entry>
    <title>IoT/M2M展へ「Future IoT」出展してきました！</title>
    <link href="https://future-architect.github.io/articles/20190509/"/>
    <id>https://future-architect.github.io/articles/20190509/</id>
    <published>2019-05-09T01:00:00.000Z</published>
    <updated>2019-05-15T02:32:58.325Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは、Future株式会社、IoT/DXユニットの千葉です。<br>IoT/DXユニットとして、技術展示会「<a href="https://spring.japan-it.jp/ja-jp/about/iot.html" target="_blank" rel="noopener">IoT/M2M EXPO 2019</a>」へ初出展してきましたので、当日の様子や展示物、出展の手応えなどを報告します。</p><img src="/images/20190509/top.jpg" style="border:solid 1px #CFD8DC"><h2 id="そもそもIoT-DXユニットとは"><a href="#そもそもIoT-DXユニットとは" class="headerlink" title="そもそもIoT/DXユニットとは"></a>そもそもIoT/DXユニットとは</h2><p>Future株式会社はITコンサルティングを生業としている会社です。<br>その中で、モビリティやスマートファクトリーなどIoTを中心に扱っているチームが今年からIoT/DXユニットとなりました。今後はIoTに限らず、DX（デジタルトランスフォーメーション）全般を扱っていきます。</p><p>ちなみにですが、IoT/DXユニットは2019年1月に名称を変更したばかりの新しい組織です。半ば自称から始まった部分もありましたが、数ヶ月も経ずに社内に広く浸透・認識されています。</p><p>Futureはフットワークが軽い企業で、自発的に結成された組織が後々会社に公認された実績がいくつもあり、こういうところが面白いところだなと思っています。</p><h2 id="何を出展したのか"><a href="#何を出展したのか" class="headerlink" title="何を出展したのか"></a>何を出展したのか</h2><p>今回のIoT/M2M展は、グループ会社のYDCさんと共同出展しました。<br>YDCさんは製造現場のデータ活用を支えるプロダクト「<a href="https://www.ydc.co.jp/service/sonar/ydcsonar.html" target="_blank" rel="noopener">YDC SONAR®</a>」を出展しました。</p><p>さてFutureですが、本業がITコンサルティングのため特定の自社プロダクトを持ちません。そこで私たちは、サービスのコンセプトや考え方、それに基づき実施してきた事例を、IoTコンサルティングサービス「Future IoT」として展示しました。</p><p>コンセプトは「 <strong>トータルデザイン</strong> 」です。</p><p>「世の中に優れた技術が揃っていることを再確認するだけのPoCや、導入して満足し現場を変えない個別最適のIoTは終わりにして、地に足をつけた、全体最適の観点から経営と現場を変えるIoT導入をしましょう」というメッセージを、経営に近い層をターゲットとして発信してきました。</p><p>以下は実際に掲示したポスターです。<br>我々が目指すべき世界観を表現しており、データ活用の範囲を社内に留まらせず、社外、ひいては業界を超えて活用することで、より大きなシナジーを生む社会を表現しています。<br><img src="/images/20190509/chirashi1.jpg" style="border:solid 1px #CFD8DC" class="img-small-size"></p><p>以下の3枚は、Futureで扱ってきた案件の事例紹介です。内容は事情により抽象的になっていますが、これまで取り組んできた案件の考え方や概念、顧客の目指すべき状態を表現しています。<br><img src="/images/20190509/chirashi2.png" style="border:solid 1px #CFD8DC"></p><h2 id="当日の様子は…"><a href="#当日の様子は…" class="headerlink" title="当日の様子は…"></a>当日の様子は…</h2><p>無事、盛況で終えることができました！!</p><p>名だたる企業の経営戦略室室長やICT推進部部長、代表取締役など、ターゲットとしていた経営に近い層の方にも多く来場していただき、<br>「最新のIoT機器を導入してみたが現場が使いこなせず、結局既存の機器を使い続けてしまっている」<br>「上からIoT導入を指示されているが、どこから手をつけていいのかわからない」<br>「多くの業態のグループ会社を抱えているが、横の連携が取れていないためにシナジーを発揮できていない」<br>などなど多くの相談をいただきました!</p><p>現在、新規案件へ繋げるべく各企業様と個別にやり取りさせていただいております。</p><img src="/images/20190509/desc.png" style="border:solid 1px #CFD8DC"><p>正直出展前は、プロダクトがなく他企業より派手さで見劣りするために不安に思う部分もありましたが、当日には多くの方に来場いただくことができました。今回のイベントで、私たちが発信したメッセージ、提供できる価値は世の中から需要があり、高い訴求力を持つことを再確認することができました。<br>また技術展示会の場は、さまざまな業態の方と交流できる、新規案件へ繋げられる、最新技術の情報収集ができるなど多くのメリットがあるため、今後も精力的に出展していきたいと思います！</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>FutureではIoTに留まらず、AI EXPOやOSSサミットなど多方面へ出展しております！<br>ご興味のある方は以下Qiita Jobsもご覧ください！</p><ul><li><a href="https://jobs.qiita.com/employers/future/development_teams/109" target="_blank" rel="noopener">IoT/DX</a></li><li><a href="https://jobs.qiita.com/employers/future/development_teams/57" target="_blank" rel="noopener">コアテクノロジー</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは、Future株式会社、IoT/DXユニットの千葉です。&lt;br&gt;IoT/DXユニットとして、技術展示会「&lt;a href=&quot;https://spring.japan-it.jp/ja-jp/about/iot.html&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="IoT" scheme="https://future-architect.github.io/tags/IoT/"/>
    
      <category term="Conference" scheme="https://future-architect.github.io/tags/Conference/"/>
    
  </entry>
  
</feed>
