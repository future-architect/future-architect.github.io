<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Future Tech Blog - フューチャーアーキテクト</title>
  
  <subtitle>フューチャー開発者ブログ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2020-04-16T01:21:24.431Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ServiceNow+Terraform(+Go) によるインフラ構築自動化</title>
    <link href="https://future-architect.github.io/articles/20200416/"/>
    <id>https://future-architect.github.io/articles/20200416/</id>
    <published>2020-04-16T12:30:49.000Z</published>
    <updated>2020-04-16T01:21:24.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGのDXユニットの西田です。前職ではServiceNowというaPaaS上でのアプリけーション開発をしておりました。現在は、GCPインフラの設計・構築をTerraform, Ansibleを利用して開発しております。GCP, ServiceNow ともに資格を持っています。</p><p>さて、皆さん、ServiceNow(以降：SNOW)というSaaSはご存知でしょうか？Salesforceと非常によく似ておりますが、米国発の SaaS, aPaaS サービスです。米国では割とポピュラーなサービスとして位置づけられていますが、日本ではまだまだです。が、伸び率は今年度は4割近くと、利用ユーザがすごい勢いで伸びています。そんな中、お客様内でSNOWを利用していて、それと関連する領域をFutureが担当するケースも増えてくるかと思いますので、今回は本ブログでSNOWについて少しだけ紹介したいと思います。SNOW とは？の説明は、言葉だけだと概念過ぎてわかりづらいので、現状、<strong>私が直面している課題の解決案ベースで解説</strong>していきたいと思います。</p><h1 id="課題設定"><a href="#課題設定" class="headerlink" title="課題設定"></a>課題設定</h1><ul><li>課題①<ul><li>昨今、会社内でのITシステムの開発体制って、以下の様なケースが多くないですか？<ul><li>事業部門がアプリケーション開発ベンダを直接雇っている。情シス部門は関知していない。</li><li>情シス部門（インフラ部門）はインフラのみ（主にサーバ）を提供する。</li><li>セキュリティ部門（or 品質保証部）が別で存在し、それらの監査・チェックを担当している。</li></ul></li><li>インフラの準備は、組織が分かれているため、<strong>組織間の仕事の受け渡しが主に打合せ &amp; エクセル &amp; メール</strong>で発生している。</li><li>現状、これらの組織間調整がとてもレガシーで非効率である事はみんな課題意識はあるが、解決方法がよくわからない。</li></ul></li><li>課題②<ul><li><strong>インフラ構築の依頼作業は単純作業が多く、6割方はコピー＆ペーストして名前を変える</strong>程度。</li><li>設計が必要なインフラ構築だけにリソースを割きたい。</li></ul></li></ul><h1 id="ソリューションの概要"><a href="#ソリューションの概要" class="headerlink" title="ソリューションの概要"></a>ソリューションの概要</h1><p>上記のすべての問題を解決出来るわけではないですが、SNOW と Terraform を使った自動化の仕組みを例に取って、PoCレベルで組んでみます。各製品/ツールの役割分担は以下です。</p><ul><li>SNOW：人の動き（リクエスト、承認フロー）を自動化する</li><li>Terraform：インフラの構築を自動化する</li><li>Go：インターフェース役</li></ul><img src="/images/20200416/photo_20200416_01.png"><h3 id="作るコンポーネント（上の図の番号と紐づいています）"><a href="#作るコンポーネント（上の図の番号と紐づいています）" class="headerlink" title="作るコンポーネント（上の図の番号と紐づいています）"></a>作るコンポーネント（上の図の番号と紐づいています）</h3><ol><li>SNOW の Service Catalog を利用し、準備するインフラをメニュー化する（簡単な＆頻繁なリクエストのみ）</li><li>Terraform の各種実行と、承認を順番に実施するワークフローを実行するFlowDesignerを作る。</li><li>Infra構築を担う Terraform は、GCP Project 単位にディレクトリを切り、inventory 書き換えだけで terraform plan, terraform apply が出来るファイル構成にする。（地味にこれが一番頭を使いました…）</li><li>FlowDesigner からの API に応対し、Terraform の inventory を作り、コマンドの実行結果を返す API-SV を Go で作る。</li></ol><p>4に関しては、<strong>SNOW の API リファレンスのサンプルコードは基本 Python</strong> なので、そっちの方がベターです。本記事では、単にGoを書きたかったので、Goを採用しています。<br>また、最初に申し上げておきますが、分量の関係で全ての実装方法を画像やコードで丁寧に記載する事が難しいです。もちろん核となる箇所は極力丁寧に記載していきます。</p><h3 id="本記事で取り上げるインフラ構築のシチュエーション"><a href="#本記事で取り上げるインフラ構築のシチュエーション" class="headerlink" title="本記事で取り上げるインフラ構築のシチュエーション"></a>本記事で取り上げるインフラ構築のシチュエーション</h3><p><strong>アプリチームからのインスタンス構築依頼を受けてGCEを用意</strong> というシチュエーションを例にします。以下が前提です。</p><ul><li>GCE のマシンタイプやリージョン・ゾーンなどは基本パターンが存在するものとする。<ul><li>n1-standard-1, asia-northeast1-a, centos-7 など</li></ul></li><li>プロジェクトはすでに存在している。</li><li>よって、プロジェクト名・インスタンス名、くらいしかユーザに指定させるパラメータがない。</li></ul><p>実装方法にそこまで興味がない方は、<a href="/articles/20200416/#%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D">動作確認</a> だけご覧になれば OK です。<br>っていうかむしろ、先に <a href="/articles/20200416/#%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D">動作確認</a> を見た方がゴールが明確化して読みやすくなるのでおススメです。</p><h1 id="1-インフラ構築のリクエストをメニュー化する-SNOW"><a href="#1-インフラ構築のリクエストをメニュー化する-SNOW" class="headerlink" title="1. インフラ構築のリクエストをメニュー化する @ SNOW"></a>1. インフラ構築のリクエストをメニュー化する @ SNOW</h1><p>本来ならこの<strong>メニュー化する対象の作業は何か？を決める</strong>のが非常に大変ですよね。今回は GCE のリクエストを例にします。</p><h2 id="SNOW-の環境準備"><a href="#SNOW-の環境準備" class="headerlink" title="SNOW の環境準備"></a>SNOW の環境準備</h2><p><a href="https://developer.servicenow.com/" target="_blank" rel="noopener">developerサイト</a> でインスタンスを準備。最新版のOrlando(出たばかり！)を使ってます。<br>払いだされたインスタンスに admin でログインしてください。<br>少しだけ宣伝交じりですが、この developer インスタンスはアカウントを作れば誰でも発行できます。6時間触らないと sleep、10日触らないと消えます（でもリストア可）。本来はライセンス費用を払わなければならないあらゆる機能が全て無料で使えるので、とてもおススメです！</p><h2 id="Service-Catalog-を作成する"><a href="#Service-Catalog-を作成する" class="headerlink" title="Service Catalog を作成する"></a>Service Catalog を作成する</h2><h3 id="Category-の作成"><a href="#Category-の作成" class="headerlink" title="Category の作成"></a>Category の作成</h3><p><code>Maintain Categories</code>をクリックし、Newを押下する。<br><img src="/images/20200416/1.png" class="img-middle-size" style="border:solid 1px #000000"></p><h3 id="item-の作成"><a href="#item-の作成" class="headerlink" title="item の作成"></a>item の作成</h3><p><code>Maintain Items</code> をクリックし、Newを押下する。<br>前述の通り、プロジェクトとインスタンス名をvariablesに設定します。この例では、Projectはカスタムテーブルを作って参照形式にしました。<br><img src="/images/20200416/2.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/3.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/4.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>ちなみに、色んなパトロールの方から『Application scopeは別で切るべきだ』と絶対に言われますが、本来なら私もそうします。今はそこは本質じゃないからGlobalのまま行きます。</p><h1 id="2-Terraform-Server-にリクエストを送り、各種承認を回すFlowDesigner-SNOW"><a href="#2-Terraform-Server-にリクエストを送り、各種承認を回すFlowDesigner-SNOW" class="headerlink" title="2. Terraform Server にリクエストを送り、各種承認を回すFlowDesigner @ SNOW"></a>2. Terraform Server にリクエストを送り、各種承認を回すFlowDesigner @ SNOW</h1><p>Flow Designer の前に、Terraform の実行結果を格納するテーブルを作っておきましょう。作ったのはこんな感じです。<br><img src="/images/20200416/4.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/5.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>それではいよいよ Flow Designer です。<code>Flow Designer</code> → <code>Designer</code> をクリック。右上のNew で新しい Flow を作ります。<br>以下の様にフローを組みます。スペースの関係で、細かいパラメータまでは取っていませんが、大枠の処理をコメントで書き込みました。<br><img src="/images/20200416/photo_20200416_02.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>Terraform Server に送るためのアクションの定義は以下です。大した事やっていません。<br><img src="/images/20200416/7.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/8.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/9.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>最後に作った Flow Designer を GCE インスタンスのメニューに紐づけます。<br><img src="/images/20200416/10.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>これで SNOW の準備は終わりです。大した事はなかったです。</p><h1 id="3-Terraform-のディレクトリとファイル構成-Terraform-Server"><a href="#3-Terraform-のディレクトリとファイル構成-Terraform-Server" class="headerlink" title="3. Terraform のディレクトリとファイル構成 @ Terraform Server"></a>3. Terraform のディレクトリとファイル構成 @ Terraform Server</h1><p>さて、地味に一番苦労した Terraform の構成です。何が難しかったかというと…</p><ul><li>自動的に構築対象のインスタンス（インベントリ）が増えるのに対して、GCE の tf ファイル自体を Go が作るのは簡単だが、それだと可読性が著しく下がり、同じプロジェクトに対して個別対応が入った際に、運用者にかなりの負担を強いる</li><li>よって、tfファイルの定義はメニューに対して1つだけ用意し、インベントリ分だけループしてインスタンスを作るファイル構成にしたい。</li><li>一方で、構築メニューは互いに依存させたくないので、GCE, GCS 毎にインベントリファイルを持たせたい。</li><li>しかし、tfvars は 1 ファイルしか許容されていないので、temporary として各メニュー毎に tfvars を作り、それをファイル結合する方法を選択した。</li></ul><p>…言葉だけじゃわからないですよね。。ディレクトリ構成は以下です。</p><figure class="highlight bash"><figcaption><span>tree</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/terraform</span><br><span class="line">├── project<span class="_">-a</span></span><br><span class="line">│   ├── compute_instance.tf         <span class="comment"># ← GCEのインスタンス定義。</span></span><br><span class="line">│   ├── storage_bucket.tf   </span><br><span class="line">│   ├── terraform.tfvars            <span class="comment"># ← 自動生成されるterraform の変数ファイル</span></span><br><span class="line">│   ├── tfplan.sh                   <span class="comment"># ← plan実行用。bashの色を付けるための特殊文字を消すsedがパイプされている</span></span><br><span class="line">│   ├── tfapply.sh                  <span class="comment"># ← 同上</span></span><br><span class="line">│   ├── variables.tf                <span class="comment"># ← メニュー化しているリストを定義。メニューが変わらない限りstatic</span></span><br><span class="line">│   ├── vars                        <span class="comment"># ← Go が使う、インベントリファイル組み立ての作業用dir</span></span><br><span class="line">│   │   ├── compute_instance.tfvars <span class="comment"># ← GCE のインベントリリスト</span></span><br><span class="line">│   │   ├── filejoin.sh             <span class="comment"># ← cat ./*.tfvars &gt; ../terraform.tfvars と書かれているだけ</span></span><br><span class="line">│   │   ├── project.tfvars          <span class="comment"># ← GCP Project の変数定義ファイル</span></span><br><span class="line">│   │   └── storage_bucket.tfvars   <span class="comment"># ← GCS のインベントリリスト</span></span><br><span class="line">│   └── version.tf</span><br><span class="line">└── project-b</span><br><span class="line">    ├── 同上</span><br></pre></td></tr></table></figure><p>コアな部分をまずは説明しますね。</p><figure class="highlight bash"><figcaption><span>compute_instance.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"google_compute_instance"</span> <span class="string">"GCE_instances"</span> &#123;</span><br><span class="line">  count        = length(var.gce_instances_list)</span><br><span class="line">  name         = var.gce_instances_list[count.index]</span><br><span class="line">  machine_type = <span class="string">"n1-standard-1"</span></span><br><span class="line">  zone         = <span class="string">"asia-northeast1-a"</span></span><br><span class="line">  tags         = [<span class="string">"app01"</span>]</span><br><span class="line">  project      = var.project.id</span><br><span class="line"></span><br><span class="line">  boot_disk &#123;</span><br><span class="line">    auto_delete = <span class="literal">false</span></span><br><span class="line">    <span class="built_in">source</span>      = google_compute_disk.GCE_disk[count.index].self_link</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  network_interface &#123;</span><br><span class="line">    network       = <span class="string">"default"</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  metadata = &#123;</span><br><span class="line">    <span class="built_in">enable</span>-oslogin = <span class="string">"true"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"google_compute_disk"</span> <span class="string">"GCE_disk"</span> &#123;</span><br><span class="line">  count   = length(var.gce_instances_list)</span><br><span class="line">  name    = <span class="string">"<span class="variable">$&#123;var.gce_instances_list[count.index]&#125;</span>-disk"</span></span><br><span class="line">  project = var.project.id</span><br><span class="line">  zone    = <span class="string">"asia-northeast1-a"</span></span><br><span class="line">  <span class="built_in">type</span>    = <span class="string">"pd-standard"</span></span><br><span class="line">  size    = 30</span><br><span class="line">  image   = <span class="string">"centos-cloud/centos-7"</span></span><br><span class="line"></span><br><span class="line">  lifecycle &#123;</span><br><span class="line">    ignore_changes = [labels]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>variables.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">variable <span class="string">"project_suffix"</span> &#123;&#125;</span><br><span class="line">variable <span class="string">"project"</span> &#123;&#125;</span><br><span class="line">variable <span class="string">"gce_instances_list"</span> &#123;&#125;</span><br><span class="line">variable <span class="string">"gcs_buckets_list"</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>terraform.tfvars</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gce_instances_list = [</span><br><span class="line">  <span class="string">"test-instance-11"</span></span><br><span class="line">]</span><br><span class="line">project_suffix = <span class="string">"project-a"</span></span><br><span class="line">project = &#123;</span><br><span class="line">  name = <span class="string">"project-a"</span></span><br><span class="line">  id   = <span class="string">"project-a"</span></span><br><span class="line">&#125;</span><br><span class="line">gcs_buckets_list = [</span><br><span class="line">  <span class="string">"test-bucket01"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>まず、<strong>GCE の定義はこのメニュー化された 1 つの tf ファイルだけ</strong>です。それを変数のリスト分だけ loop で回してリソースを作っています。<a href="https://future-architect.github.io/articles/20190819/">前原さんの記事</a>を参考にしています。</p><p>ただ今回は、この <strong>loopの要素を Go が自動で生成しなければならない</strong> ということなんです。<br>そして、<strong>GCE と GCS は別メニューだから、お互いに干渉したくない</strong> ということなんです。<br>Go で書き切る手段もあったんですが、<strong>実装をリーズナブルにするためにファイルを分けて bash で結合する方法を選択</strong>しました。それが vars ディレクトリ配下のお話です。</p><figure class="highlight bash"><figcaption><span>vars/compute_instance.tfvars</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gce_instances_list = [</span><br><span class="line">  <span class="string">"test-instance-11"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>vars/storage_bucket.tfvars</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcs_buckets_list = [</span><br><span class="line">  <span class="string">"test-bucket01"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>vars/project.tfvars</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">project_suffix = <span class="string">"project-a"</span></span><br><span class="line">project = &#123;</span><br><span class="line">  name = <span class="string">"project-a"</span></span><br><span class="line">  id   = <span class="string">"project-a"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>vars/filejoin.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat *.tfvars &gt; ../terraform.tfvars</span><br></pre></td></tr></table></figure><p>よって、Go は GCE, GCS のメニュー毎に対応する vars/ 配下の tfvars ファイルにだけ要素を追加し、filejoin.sh を叩けば Terraform 系のファイルは揃うという事になります。Go でファイル操作は頑張らない（笑）</p><h1 id="4-FlowDesigner-からのリクエストを応じて-Terraform-を実行し、結果を返す-Terraform-Server"><a href="#4-FlowDesigner-からのリクエストを応じて-Terraform-を実行し、結果を返す-Terraform-Server" class="headerlink" title="4. FlowDesigner からのリクエストを応じて Terraform を実行し、結果を返す @ Terraform Server"></a>4. FlowDesigner からのリクエストを応じて Terraform を実行し、結果を返す @ Terraform Server</h1><p>さて、SNOW と Terraform の間をつなぐ API-SV の Go です。<br>処理を整理すると、以下です。</p><ol><li>SNOW(FlowDesigner)からの Rest API の受け口を作る。</li><li>SNOW から受け取るパラメータは、Project名とインスタンス名だけである。（SNOW の CMDB を本格利用すればそうでもないですが、構成管理は Terraform でコード化されているから、SNOW ではやらない。フロントエンドに徹する。）</li><li>Terraform の Project ディレクトリの GCE, GCS に対応する tfvars ファイルに受け取ったリソース名を書き込む。</li><li>vars/filejoin.sh を実行する。</li><li>terraform plan を実行し、結果を返す。</li></ol><p>始めに言い訳しておきますが、初めて Go を書いた関係で、あまりソースコードには自信がありません。<br>本質的に必要な部分だけを書いているので、エラー処理・認証・暗号化の処理も実装していないので、検証用途と割り切って見てください。</p><figure class="highlight golang"><figcaption><span>api-sv.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/http/httputil"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"os/exec"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TF_PATH = <span class="string">"/terraform"</span></span><br><span class="line"><span class="keyword">const</span> TF_VARDIR = <span class="string">"vars"</span></span><br><span class="line"><span class="keyword">const</span> TF_GCE_TFVARS = <span class="string">"compute_instance.tfvars"</span></span><br><span class="line"><span class="keyword">const</span> TF_GCS_TFVARS = <span class="string">"storage_bucket.tfvars"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GCEInstanceRequest <span class="keyword">struct</span> &#123;</span><br><span class="line">Action      <span class="keyword">string</span> <span class="string">`json:"action"`</span></span><br><span class="line">GCEInstance <span class="keyword">struct</span> &#123;</span><br><span class="line">GCPProjectName  <span class="keyword">string</span> <span class="string">`json:"GCP_project_name"`</span></span><br><span class="line">GCPInstanceName <span class="keyword">string</span> <span class="string">`json:"GCE_instance_name"`</span></span><br><span class="line">&#125; <span class="string">`json:"GCE_instance"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/gce_instance"</span>, handleGCEInstance)</span><br><span class="line"><span class="comment">// http.HandleFunc("/gcs_bucket", handleGCSBucket) // スペースの関係で一旦作りません…m(_ _)m</span></span><br><span class="line">http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /gce_instance に POST された時に実行される関数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleGCEInstance</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// request body のパースと値の取得</span></span><br><span class="line">b, err := ioutil.ReadAll(r.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> r.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> req GCEInstanceRequest</span><br><span class="line"><span class="keyword">if</span> err = json.Unmarshal(b, &amp;req); err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, err.Error(), <span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Debug用</span></span><br><span class="line">fmt.Printf(<span class="string">"Request: %+v"</span>, req)</span><br><span class="line"></span><br><span class="line"><span class="comment">// plan の時だけ、gce 用の terraform の tfvars に追加する</span></span><br><span class="line"><span class="keyword">if</span> req.Action == <span class="string">"plan"</span> &#123;</span><br><span class="line">addGCETfvars(req.GCEInstance.GCPProjectName, req.GCEInstance.GCPInstanceName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">strtemp := execTF(req.GCEInstance.GCPProjectName, req.Action)</span><br><span class="line">fmt.Fprintf(w, strtemp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// terraform の gce instance の tfvars にリクエストされた instance を追加する</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addGCETfvars</span><span class="params">(project, gce_instance <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">tfvarpath := TF_PATH + <span class="string">"/"</span> + project + <span class="string">"/"</span> + TF_VARDIR</span><br><span class="line">tfvarsFile := TF_PATH + <span class="string">"/"</span> + project + <span class="string">"/"</span> + TF_VARDIR + <span class="string">"/"</span> + TF_GCE_TFVARS</span><br><span class="line"></span><br><span class="line">raw, err := ioutil.ReadFile(tfvarsFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラー処理</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(tfvarsFile + <span class="string">" read success"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最初の"["までの文字列を捨て、arrayに変換</span></span><br><span class="line">filetext = filetext[strings.Index(<span class="keyword">string</span>(raw), <span class="string">"["</span>):]</span><br><span class="line"><span class="keyword">var</span> strarr []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal([]<span class="keyword">byte</span>(filetext), &amp;strarr); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラー処理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// すでにインスタンスが登録されている場合のエラー処理は省略する</span></span><br><span class="line"><span class="comment">// 新しいインスタンスを登録する。</span></span><br><span class="line">strarr = <span class="built_in">append</span>(strarr, gce_instance)</span><br><span class="line"></span><br><span class="line"><span class="comment">// output to file</span></span><br><span class="line">file, err := os.Create(tfvarsFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラー処理</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// gce の tfvars を出力する。</span></span><br><span class="line">output := <span class="string">"gce_instances_list = [\n"</span></span><br><span class="line"><span class="keyword">for</span> ii := <span class="number">0</span>; ii &lt; <span class="built_in">len</span>(strarr)<span class="number">-1</span>; ii++ &#123;</span><br><span class="line">output = output + <span class="string">"  \""</span> + strarr[ii] + <span class="string">"\",\n"</span></span><br><span class="line">&#125;</span><br><span class="line">output = output + <span class="string">"  \""</span> + strarr[<span class="built_in">len</span>(strarr)<span class="number">-1</span>] + <span class="string">"\"\n]\n"</span></span><br><span class="line">file.Write(([]<span class="keyword">byte</span>)(output))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 各varsファイルを連結して、terraform.tfvarsにまとめる。</span></span><br><span class="line">cmd := exec.Command(<span class="string">"sh"</span>, <span class="string">"filejoin.sh"</span>)</span><br><span class="line">cmd.Dir = tfvarpath</span><br><span class="line">out, err := cmd.Output()</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(out))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// terraform plan を実行して、stdout を戻り値で返す関数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">execTF</span><span class="params">(project, action <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">tfpath := TF_PATH + <span class="string">"/"</span> + project</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shellscript <span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> action == <span class="string">"plan"</span> &#123;</span><br><span class="line">shellscript = <span class="string">"tfplan.sh"</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> action == <span class="string">"apply"</span> &#123;</span><br><span class="line">shellscript = <span class="string">"tfapply.sh"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cmd := exec.Command(<span class="string">"sh"</span>, shellscript)</span><br><span class="line">cmd.Dir = tfpath</span><br><span class="line">out, _ := cmd.Output()</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(out)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>tfplan.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform plan -no-color</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>tfapply.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">terraform apply -auto-approve -no-color</span><br></pre></td></tr></table></figure><p><code>-no-color</code> オプションで terraformコマンドの出力する特殊文字を無効化して、単純な文字列にしています。</p><p>また、わざわざshを作り、それをGoで実行する様にしたのは、複数の引数指定でos/execがうまく動作しなかったからです。<a href="https://qiita.com/tng527/items/c44b943da93041a8355b" target="_blank" rel="noopener">こちらの記事</a>の最後を参考にしました。</p><h1 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h1><h3 id="ユーザの操作"><a href="#ユーザの操作" class="headerlink" title="ユーザの操作"></a>ユーザの操作</h3><p>Service Catalog のダッシュボードに、GCP infra の widget を追加すると、以下の様になります。<br><img src="/images/20200416/u1.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u2.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>画面ではGCSも追加しています。手順はGCEの時と全く同じです。<br><img src="/images/20200416/u3.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u4.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>Shoppingっぽくなっているのは、あんまり気にしないでください。SaaSで細部を気にし始めると工数が跳ね上がります。（※初期構築だけ考えるとそうでもないですが、保守や機能拡張を考えると雪だるま式に増えます。）</p><p>これだけでユーザのリクエストは完了です。本当にパラメータを2つ入れるだけ。</p><h3 id="リクエストの状態を確認"><a href="#リクエストの状態を確認" class="headerlink" title="リクエストの状態を確認"></a>リクエストの状態を確認</h3><p>リクエストされたアイテムを見ると、自分の上司で止まっているのが確認できます。<br><img src="/images/20200416/u5.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u6.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>FlowDesingnerは非常に強力な機能で、すべての実行ログを記録していますので、それで状態を確認してみます。すると、確かに1つ目のapprovalで止まっていますね。<br><img src="/images/20200416/u7.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>Terraform の実行ログを見てみましょう。この結果からすると、良さそうですね。<br><img src="/images/20200416/u8.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u9.png" class="img-middle-size" style="border:solid 1px #000000"></p><h3 id="承認を回す"><a href="#承認を回す" class="headerlink" title="承認を回す"></a>承認を回す</h3><p>それじゃあ、上司のアカウントでログインして、承認しましょう。<br><img src="/images/20200416/u10.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u11.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>1つ進みましたね。画像はつけてないですが、この画面からTerraformの実行plan結果のレコードには遷移出来るので、上司も確認できます。<br>そんな感じで、みんなに承認してもらいましょう。</p><img src="/images/20200416/u12.png" class="img-middle-size" style="border:solid 1px #000000"><p>なぜか名前に既視感がありますねぇ…不思議…</p><h3 id="apply-の結果を見てみる"><a href="#apply-の結果を見てみる" class="headerlink" title="apply の結果を見てみる"></a>apply の結果を見てみる</h3><p>これで承認が回ったので GCE がデプロイ（アプリ-Tにデリバリー）されているはずです。早速関連リストからTerraformの実行ログを見てみましょう。<br><img src="/images/20200416/u13.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u14.png" class="img-middle-size" style="border:solid 1px #000000"><br><img src="/images/20200416/u15.png" class="img-middle-size" style="border:solid 1px #000000"></p><p>来ましたね！同時実行とか、変更・削除はどうするのかとか色々ありますが、とりあえずPoCとしては完成！</p><h1 id="結局-ServiceNow-とは何か？"><a href="#結局-ServiceNow-とは何か？" class="headerlink" title="結局 ServiceNow とは何か？"></a>結局 ServiceNow とは何か？</h1><p>ServiceNow社的には、以下をメッセージとして強く主張しています。</p><ul><li>昨今、消費者に対して提供されている顧客体験は非常に良くなっている(UX, CX)。</li><li>一方で、企業内の社内システムを含む従業員体験は全く乖離している。自動化は限定的で仕事は手渡し・対面ベース。</li><li>それを同じレベルまで簡単に持っていくのが ServiceNow である。</li></ul><p>本記事で取り上げた Service Catalog なんかはまさに当てはまりますよね。事業部門が使う備品の調達と同じ様なノリで GCP のクラウドリソースを注文できる仕組み。それがシステム化されており、承認行為と構築行為がシームレスに行われる。</p><p>通常この手の調達をしようと思ったら、インフラとしての申請＆承認行為と、セキュリティとしての申請＆承認行為、そして調達行為は分断されていて、それぞれの部門に対して申請だったり打ち合わせだったりで調整しないといけないですよね。</p><p>一方で、私が捉えているイメージは以下です。</p><p><strong>業務目線</strong></p><ul><li>複数担当者（特に別組織）間で行われる仕事の受け渡しを、簡単にワークフロー化してシステムに落とせる仕組み。<ul><li>厳密には ITOM, CMDB などそれに合致しない Plugin もあるが、ITSM, HR, ServiceCatalog など多くはこれ</li></ul></li></ul><p><strong>技術目線</strong></p><ul><li>DBのレコード変更をトリガに様々な処理を間に挟む処理を簡単に作れるプラットフォーム。最初のレコード変更がフロントエンドや API などで行われると、そこから他のテーブルへの CRUD や他の API を叩いて結果を導出するなどの仕組みを簡単に作れる。</li></ul><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回、私にとって最も実装が簡単だったのはSNOWでした。逆に一番大変だったのがGoでの実装です。ただ、こういう製品と製品の間に落ちる部分の処理って、どうしてもカスタム実装が必要になるんですよね。なので、実際のサービス連携を考えた際も同じ様な比率になるんじゃないかと考えています。<br>まだまだGithubやJenkinsなど課題は多々ありますが、まずは本質的なインフラ構築の自動化を中心に置いて実装してみました。今回利用した製品/サービスは別に他のなんでも代替は可能だと思ってますので、考え方の1つとして捕えてもらえれば幸いです。</p><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/tags/GCP%98A%8D%DA/">GCP連載企画</a></li><li><a href="https://future-architect.github.io/articles/20190604/">OpenCensus(OpenTelemetry)とは</a></li><li><a href="https://future-architect.github.io/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGのDXユニットの西田です。前職ではServiceNowというaPaaS上でのアプリけーション開発をしており
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
      <category term="ServiceNow" scheme="https://future-architect.github.io/tags/ServiceNow/"/>
    
      <category term="Workflow" scheme="https://future-architect.github.io/tags/Workflow/"/>
    
  </entry>
  
  <entry>
    <title>【小ネタ】AWS S3 署名付きURLってマネジメントコンソールからでも作れたのね</title>
    <link href="https://future-architect.github.io/articles/20200415/"/>
    <id>https://future-architect.github.io/articles/20200415/</id>
    <published>2020-04-15T00:46:43.000Z</published>
    <updated>2020-04-15T00:53:03.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXチームの村瀬です。</p><p>目新しい機能ではなくずいぶん前から存在するS3の署名付きURLについて新発見したので記載してみようと思います。</p><p>便利な署名付きURLですがインターネット上で検索する限り、URLを発行するにはAWS CLIを利用する、もしくはSDKを利用して簡単なプログラミングをするかしかないと思ってました。利用する人がITエンジニアであればそれでも良いかと思いますが、しかしながら世の中にはプログラミングが苦手だったり、操作が容易であったり様々な理由でマネジメントコンソールで操作している方も多いと思います。</p><p>今回はマネジメントコンソールで操作している方のお役に立てればと思います。</p><h1 id="S3-署名付きURLとは"><a href="#S3-署名付きURLとは" class="headerlink" title="S3 署名付きURLとは"></a>S3 署名付きURLとは</h1><p>S3のオブジェクトに対して権限によらずURLさえ知りえれば誰でもダウンロードできる機能です。<br>正確にはダウンロードとアップロードの2種類あるのですが、今回の話はダウンロードに限った話です。</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h2 id="1-S3バケットを表示し、署名付きURLで公開したいファイルをクリックする"><a href="#1-S3バケットを表示し、署名付きURLで公開したいファイルをクリックする" class="headerlink" title="1. S3バケットを表示し、署名付きURLで公開したいファイルをクリックする"></a>1. S3バケットを表示し、署名付きURLで公開したいファイルをクリックする</h2><img src="/images/20200415/1.png" class="img-middle-size" style="border:solid 1px #000000"><h2 id="2-開けるボタンをクリックする"><a href="#2-開けるボタンをクリックする" class="headerlink" title="2. 開けるボタンをクリックする"></a>2. 開けるボタンをクリックする</h2><img src="/images/20200415/2.png" class="img-middle-size" style="border:solid 1px #000000"><h2 id="3-ファイルの中身が表示される"><a href="#3-ファイルの中身が表示される" class="headerlink" title="3. ファイルの中身が表示される"></a>3. ファイルの中身が表示される</h2><img src="/images/20200415/3.png" class="img-middle-size" style="border:solid 1px #000000"><h2 id="4-上記3で表示されたURLをダウンロードさせたい相手に教える"><a href="#4-上記3で表示されたURLをダウンロードさせたい相手に教える" class="headerlink" title="4. 上記3で表示されたURLをダウンロードさせたい相手に教える"></a>4. 上記3で表示されたURLをダウンロードさせたい相手に教える</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://samples3bucketname.s3.ap-northeast-1.amazonaws.com/test.txt?response-content-disposition=inline&amp;X-Amz-Security-Token=xxxxxxxxxxx&amp;X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Date=20200403T012759Z&amp;X-Amz-SignedHeaders=host&amp;X-Amz-Expires=300&amp;X-Amz-Credential=xxxxxxxxxxx&amp;X-Amz-Signature=xxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>※S3バケット名、Token等はマスクしています。</p><p>なんとこれだけで終わりです。実にお手軽！</p><h1 id="制限事項"><a href="#制限事項" class="headerlink" title="制限事項"></a>制限事項</h1><p>上記URLに含まれている通りダウンロード可能な時間は300秒(5分)です。<br>また、アップロードには対応していません。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>開けるボタンで表示した場合にはてっきりログインした状況でしか表示されないと思い込んでいたのですが、実は署名付きURLで公開されたものを閲覧していたに過ぎませんでした。</p><p>制限時間が300秒(5分)と少ないのでメールでのコミュニケーションには不向きですが、リアルタイムにチャットツールでやりとりしている際に(きっとみんなチャットツール使ってますよね？)、わざわざ自分でダウンロードしてから相手に渡さなくて済むのはお手軽で良いかと思います。</p><p>上記の通り使いどころは少ないですがマネジメントコンソールから署名付きURLが作成できることが確認できました。</p><p>また、注意点としては便利の裏返しで意図せず(短時間かつ推測困難なURLですが)全公開されているのでセキュリティを気にされる場合には開けるボタンの取り扱いにはお気を付けください。</p><p>関連する記事:</p><ul><li><a href="/articles/20191101/">AWS Glueの開発エンドポイントがそこそこお高いのでローカル開発環境を用意しました</a></li><li><a href="/articles/20191009/">AWS Session Managerでセッションを切断されにくくする方法</a></li><li><a href="https://future-architect.github.io/articles/20200121/">スロットリングとの付き合い方</a></li><li><a href="https://future-architect.github.io/articles/20191107/">インフラ入門vol.3(ネットワーク冗長化構成)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXチームの村瀬です。&lt;/p&gt;
&lt;p&gt;目新しい機能ではなくずいぶん前から存在するS3の署名付きURLにつ
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>インフラ入門vol.4（ストレージ）</title>
    <link href="https://future-architect.github.io/articles/20200414/"/>
    <id>https://future-architect.github.io/articles/20200414/</id>
    <published>2020-04-14T02:07:29.000Z</published>
    <updated>2020-04-15T00:54:58.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG所属の川村です。<br>キャリアとしてはほぼ大半をインフラ担当として過ごし、データセンターの室温環境の中でも気にせず過ごせるという体質になったため（防寒のために脂肪を身に着けたという説もあり）、通常のオフィスが未だに暑くて難儀しています。</p><p>インフラ、興味深いですよね。今はクラウドサービスの隆盛もあり、アプリケーション分野に脚光が当たることが多いですが、これらを裏で支える素敵なインフラデザインを見るとキュンとしてしまいますね。当時のハードの仕様のため入り組んだ構成になったシステムが後年すっきりしたデザインになるのは感動的でもありますし、可用性を担保するたためにメッシュになったネットワーク構成図も幾何学的で美しいものです。</p><p>今回は連載の<a href="/tags/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E5%85%A5%E9%96%80/">インフラ入門</a>の第4回目として、前2回で続いたネットワークから視点を変えて、ストレージについての説明をしようかと思います。</p><h1 id="過去記事について"><a href="#過去記事について" class="headerlink" title="過去記事について"></a>過去記事について</h1><ol><li><a href="https://future-architect.github.io/articles/20170109/">インフラ入門vol.1</a>：インフラ全般に興味を持ってもらうためのアツい記事です。</li><li><a href="https://future-architect.github.io/articles/20170704/">インフラ入門vol.2(ネットワーク)</a>：ネットワークって何さ？から仕様検討の上での入門知識が書かれた記事です。</li><li><a href="https://future-architect.github.io/articles/20191107/">インフラ入門vol.3(ネットワーク冗長化構成)</a>：冗長構成にスポットライトをあてた若干ニッチな記事です。</li><li>インフラ入門vol.4(ストレージ)：この記事。ストレージの主流となるHDDやSSDの特徴についての記事です。</li></ol><h1 id="そもそもストレージって？"><a href="#そもそもストレージって？" class="headerlink" title="そもそもストレージって？"></a>そもそもストレージって？</h1><p>当記事の対象は当然ITインフラに限ったストレージですが、それでも範囲が広いため、今回はコンピュータの構成要素における補助記憶装置、その中でも現在主流のハードディスクドライブ（HDD）、ソリッドステートドライブ（SSD）を主な対象とします。補助記憶装置、ということは主記憶装置もあるわけで、こちらはコンピュータでいうところのメインメモリとなります。</p><p>主記憶装置と補助記憶装置の単純な違いとしては以下になります。</p><ul><li><strong>主記憶装置</strong>：読み書きが速い、電源が消えると内容が消える、データサイズ単価の価格が高い</li><li><strong>補助記憶装置</strong>：読み書きが遅い、電源が消えても内容は消えない、データサイズ単価の価格が安い</li></ul><p>この特性もあり、１ユニット単位の容量もメインメモリとHDDを比較すると200倍以上の差があります。</p><p>実際の利用例としてはプログラムの入出力として使用されるファイルは普段補助記憶装置に記憶されており、プログラム実行時に主記憶装置（メインメモリ）に読みだされ、処理終了後に補助記憶装置のデータに更新の必要があれば補助記憶装置に書き戻されます。</p><h1 id="ストレージの特徴（HDD編）"><a href="#ストレージの特徴（HDD編）" class="headerlink" title="ストレージの特徴（HDD編）"></a>ストレージの特徴（HDD編）</h1><p>現在もエンタープライズシステムにおけるストレージの主流。近年SSDに押されていますがまだまだ最前線で活躍しています。その最大の特徴はデータサイズ単位の価格が低いことです。2020年4月現在、1万円程度で6TBのHDDが購入できますが、同程度の価格帯でメインメモリ、SSDと比較すると</p><ul><li>メインメモリ：16GB</li><li>SSD：500GB～1TB</li></ul><p>となり、HDDの圧倒的なコストパフォーマンスが伝わります。<br>参考ですが、テープ媒体であるLTOはLTO7（6TB：圧縮時15TB）のテープが1本1万円程度です。さすがにここまでは達していませんが、利便性を考えるとHDDでのデータ長期保管も現実味のある選択肢になってきています。LTO、決して使いやすいとは言えないし・・・</p><p>そんなHDDですが歴史は長く、初期は高級品でした。家庭のPCで利用されるようになったのは1980年代半ばから後半にかけてでしょうか。このころはそもそもPC自体がある家庭が珍しく、私の家にはたまたまありましたが30MB程度の容量でした。それでも当時のフロッピーディスクの20倍超という大容量で、当時保存するデータは文字データが中心なこともあり、なかなか使いきれないサイズ感でありました。</p><p>HDDドライブの内部構成としては<strong>プラッタ</strong>というアルミニウムやガラスに磁性体を塗布した円盤をモーターで回転させ、ヘッドで読み書きを行います。プラッタは5400rpm（round per minuts）から10000rpmを超えるものまであり、最外周部は100km/hを超えるスピードに達します。このプラッタとヘッドの距離は数nmしか離れておらず、飛行機が地上スレスレを飛んでいるような状態と例えられることがあります。また、HDDは内部にもキャッシュメモリを内蔵しており、直近でアクセスしたデータにおいてはキャッシュメモリから読み込みが行われます。</p><p>ディスクに対する書き込み、読み込みは <strong>セクタ</strong> と呼ばれる単位ごとに行われます。一般的には512B単位であり、512以下のデータはセクタ内に、512Bを超えるデータは複数セクタに記録されます。例として、513Bのデータは2セクタを使用するためディスク上は1024B使用していることになります。プラッタ上でのセクタ１周分をトラックといいます。トラック内のセクタ数は外周になるほど多くなります。</p><img src="/images/20200414/photo_20200414_01.png" class="img-middle-size"><p>また、CD-RやDVD-Rと異なり、HDDは外側からの書き込みとなります。これは、プラッタが円形であることから外側の方がセクタが多くなり、同じ一周でもプラッタの外側の方が多くのセクタにアクセスが行えます。実際HDDに対する書き込みスピードは最初と最後で差があることが分かっています。インタフェースの側に目を向けると、データ転送の規格がPC向けだとSATA（SATA3.0：600MB/s）、エンタープライズレベルでSAS（SAS3.0：2400MB/s）となっており、特にSATAは転送速度向上が近年鈍化しており、転送速度向上には時間がかかる傾向にあります。</p><p>雑学ですがレコードも外側の方が1回転で読み取れる情報量が多いため、外側に記録されている曲は音質が良くなります。カセットテープはサーボモータによりテープの送り出し速度が一定のため、どこに記録されても音質は一定となります。オーディオCDも音声ファイルの仕様により一定の音質となります。</p><p>構成部品の点数、回転するプラッタとヘッドの関係により振動に弱いという特徴もあり、信頼性はあまり高くないです。特にモバイル機器においてはHDDの故障が多く、こちらはいち早くSSDが主流になったという経緯があります。また、物理的なドライブのサイズもSSDに比べると大きく、本体の厚みにも影響を及ぼします。</p><p><strong>HDDの特徴まとめ</strong></p><ul><li>データサイズ単位の価格が安い</li><li>ドライブの最初と最後で読み書きのスピードが変わる</li><li>インタフェース規格の性能向上が鈍化しており、データ転送速度が他インタフェースに対して相対的に遅い</li><li>物理的なサイズが（SSDに比較して）大きい</li><li>駆動部品の多さから信頼性が低い</li></ul><h1 id="ストレージの特徴（SSD編）"><a href="#ストレージの特徴（SSD編）" class="headerlink" title="ストレージの特徴（SSD編）"></a>ストレージの特徴（SSD編）</h1><p>今、新規でノートPCを購入するなら大抵はSSD採用モデルになるのではないでしょうか。SSDが個人ユースに普及しだしたのは2010年頃。当然ながらデータサイズあたりの単価はHDDに比べ高価ですが、消費電力の低さ、耐衝撃性、動作音も発生しない、規格によってはHDDより小さく、薄く作れるという優位性の多さから置き換えが進んできています。</p><p>SSDを構成する部品はフラッシュメモリとキャッシュメモリ、アクセス制御用のコントロールチップなどとなります。製品の差別化に使われるのはフラッシュメモリが大半で、メモリの種別としてNAND型とNOR型（SSDは通常NAND型）、メモリセル1つに対して何bit書き込むかにより<strong>SLC型</strong>（1bit）、<strong>MLC型</strong>（2bit）、<strong>TLC</strong>型（3bit）、<strong>QLC</strong>型（4bit）に分類されます。が、仕様情報が公表されていることはあまり多くなく、価格帯でなんとなく判断をすることが多いです。また、駆動部品がないことからHDDに対して相対的に故障率が低く、HDDではよく用いられるRAIDという耐障害構成はSSDでは不要という声もあります。</p><p>フラッシュメモリ（NAND型）は読み込み・書き込みはページ単位、消去はブロック単位で行われます。上書きは行えないためデータの更新は消去を行ってから書き込むことになります。1ページは標準的なSLCでは2112バイト、1ブロックは64ページとなります。1ページを上書きする場合、以下の挙動となります。<br>　１．該当ページが所属するブロックの情報を読み込みフラッシュメモリ外部へキャッシュ<br>　２．該当のブロックを消去<br>　３．上書きするページ、キャッシュしたページの書き込み</p><img src="/images/20200414/photo_20200414_02.png" class="img-middle-size"><p>SLCにおける、1ビットを記録する単位をメモリセルと呼びます。メモリセルには書き換え回数に上限があり、それを超えると書き換えが行えなくなります。書き換えが行えなくなるセルを含んだブロックを不良ブロックと言い、領域として使用されなくなります。メモリセルの書き換え回数の上限はSLCが10万回程度、MLCで1万回程度、TLCは3000回程度、QLCは1000回程度と言われており、SSD使用中に利用できる領域は減少していく傾向にあります。書き換えを多く行うデータを置く場合はMLC型以上のSSD採用の検討を行った方がいいかと思われます。</p><p>SSDは当初HDDの置き換え用途もあり、HDD同様SATA規格での普及が進みましたが、近年はPCI Expressをインタフェースに使用したM.2型のSSDが、その性能から主流となりつつあります。PCI Expressのスロットに挿すタイプのSSDもありますが、こちらはデスクトップ向けの高性能用途として利用されます。PCI ExpressはSASを大きく上回る4000MB/s（PCI Express 3.0 x4）のデータ速度となるためコンピュータ内でボトルネックになることが多いディスクI/Oの性能向上に寄与することができます。</p><p><strong>SSDの特徴まとめ</strong></p><ul><li>高信頼性</li><li>読み書きスピードが速い</li><li>書き換え回数に上限がある</li><li>物理サイズが小型化できる</li><li>製品仕様が分かりづらい</li></ul><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>HDD、SSDのハードウェア仕様のみの説明となりましたが、他にもCD-R、DVD-Rなどの光学ディスクやLTO、DATといったテープデバイスなどの媒体、RAIDなどの仮想ドライブ、NASやSANといった利用形態、ファイバーチャネルなどを使用したインタフェースなど、ストレージの世界を構成する要素については、この連載の続きで私を含む誰かが解説してくれることを期待してます。</p><p>クラウド化が進んだ昨今、物理ストレージを意識する機会は減りつつありますが、利用しているサービスの奥底には物理ストレージがあることを記憶していただけると幸いです。</p><hr><p>関連記事:</p><ul><li><a href="/articles/20170109">インフラ入門vol.1</a></li><li><a href="/articles/20170704/">インフラ入門vol.2(ネットワーク)</a></li><li><a href="/articles/20191107/">インフラ入門vol.3(ネットワーク冗長化構成)</a></li><li><a href="/articles/20200414/">インフラ入門vol.4((ストレージ)</a></li><li><a href="/articles/20190731/">俺のインフラデザインパターン　～過去の失敗に学ぶニッチなインフラの話～</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG所属の川村です。&lt;br&gt;キャリアとしてはほぼ大半をインフラ担当として過ごし、データセンターの室温環境の中で
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="インフラ入門" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E5%85%A5%E9%96%80/"/>
    
      <category term="Storage" scheme="https://future-architect.github.io/tags/Storage/"/>
    
  </entry>
  
  <entry>
    <title>スキーマファースト開発のためのOpenAPI（Swagger）設計規約</title>
    <link href="https://future-architect.github.io/articles/20200409/"/>
    <id>https://future-architect.github.io/articles/20200409/</id>
    <published>2020-04-09T01:38:04.000Z</published>
    <updated>2020-04-11T06:44:35.510Z</updated>
    
    <content type="html"><![CDATA[<p>はじめまして。TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の亀井です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><img src="/images/20200409/1.png" style="border:solid 1px #000000"><p>みなさん、Swagger使ってますか？<br>Swaggerや周辺ツールについては <a href="https://future-architect.github.io/articles/20191008/">某先輩の記事</a> にて丁寧に解説されていますので、<br>本記事では実際にSwaggerのスキーマ定義を設計していく上で取り決めた規約について書いてみたいと思います。</p><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>私が在籍しているプロジェクトでは、REST APIは golang でフロントエンドを Vue.js + TypeScript で構築しています。<br>短期間・高品質での構築を実現するためにSwaggerを設計ドキュメントとしてだけではなく、コード自動生成やモックサーバーに活用させることで徹底したスキーマファーストな開発を行ってきました。</p><p>というわけで、今回は下記のツールを利用することを前提として規約を作成しています。</p><ul><li><a href="https://github.com/go-swagger/go-swagger" target="_blank" rel="noopener">go-swagger</a>: Goアプリケーションのハンドラ、リクエスト/レスポンスのドメインモデル、バリデーションフレームワーク<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li><li><a href="https://github.com/OpenAPITools/openapi-generator" target="_blank" rel="noopener">openapi-generator/typescript-axios</a>: フロントエンドのHTTPクライアント、リクエスト/レスポンスのインターフェイス</li><li><a href="https://stoplight.io/open-source/prism" target="_blank" rel="noopener">Prism</a>: フロントエンド開発時に利用するモックサーバー</li></ul><h1 id="設計規約"><a href="#設計規約" class="headerlink" title="設計規約"></a>設計規約</h1><h2 id="バージョン"><a href="#バージョン" class="headerlink" title="バージョン"></a>バージョン</h2><ul><li><a href="https://swagger.io/docs/specification/2-0/basic-structure/" target="_blank" rel="noopener">OpenAPI v2</a><ul><li>前述の<code>go-swagger</code>が3系に対応されていないため2系を利用</li></ul></li></ul><h2 id="paths"><a href="#paths" class="headerlink" title="paths"></a>paths</h2><h3 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h3><ul><li>必須</li><li>1URIで１つのタグのみ定義する</li><li>リソース名を単数形で記載する</li><li>キャメルケース</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># good</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">product</span> <span class="comment"># GoアプリケーションのhandlerやTypeScriptのclassの単位となる</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bad</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">products</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bad</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">user</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">product</span></span><br></pre></td></tr></table></figure><h3 id="operationId"><a href="#operationId" class="headerlink" title="operationId"></a>operationId</h3><ul><li>必須</li><li><code>${HTTPメソッド}${機能物理名}</code>を記載する</li><li>キャメルケース</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># GET /products</span></span><br><span class="line"><span class="attr">operationId:</span> <span class="string">getProducts</span></span><br><span class="line"><span class="comment"># GET /products/:product_id</span></span><br><span class="line"><span class="attr">operationId:</span> <span class="string">getProductByProductId</span></span><br><span class="line"><span class="comment"># POST /products</span></span><br><span class="line"><span class="attr">operationId:</span> <span class="string">postProducts</span></span><br><span class="line"><span class="comment"># PUT /products/:product_id</span></span><br><span class="line"><span class="attr">operationId:</span> <span class="string">putProduct</span></span><br><span class="line"><span class="comment"># DELETE /product/:product_id</span></span><br><span class="line"><span class="attr">operationId:</span> <span class="string">deleteProduct</span></span><br></pre></td></tr></table></figure><h3 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h3><ul><li>必須</li><li><code>${機能ID} ${機能論理名}</code>で定義する</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">summary:</span> <span class="string">XXX-0001</span> <span class="string">商品参照</span></span><br></pre></td></tr></table></figure><h3 id="security"><a href="#security" class="headerlink" title="security"></a>security</h3><ul><li>必須</li><li>認証の要否で以下のように定義する</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 認証なし</span></span><br><span class="line"><span class="attr">security:</span> <span class="string">[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 認証あり</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line"><span class="attr">  - isAuthorized:</span> <span class="string">[]</span></span><br></pre></td></tr></table></figure><ul><li>参考: securityDefinitions</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OAuth認証</span></span><br><span class="line"><span class="attr">securityDefinitions:</span></span><br><span class="line"><span class="attr">  isAuthorized:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">oauth2</span></span><br><span class="line"><span class="attr">    flow:</span> <span class="string">accessCode</span></span><br><span class="line"><span class="attr">    authorizationUrl:</span> <span class="string">'https://example.com/authorize'</span></span><br><span class="line"><span class="attr">    tokenUrl:</span> <span class="string">'https://example.com/.well-known/jwks.json'</span></span><br></pre></td></tr></table></figure><h3 id="description"><a href="#description" class="headerlink" title="description"></a>description</h3><ul><li>必須</li><li>APIの機能概要を記載する。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">description:</span> <span class="string">IDを指定して商品情報を取得する。</span></span><br></pre></td></tr></table></figure><h3 id="parameters"><a href="#parameters" class="headerlink" title="parameters"></a>parameters</h3><h4 id="GET-DELETE-API-の場合"><a href="#GET-DELETE-API-の場合" class="headerlink" title="GET/DELETE API の場合"></a>GET/DELETE API の場合</h4><ul><li>in:          PATHパラメータ<code>in: path</code>またはクエリパラメータ<code>in: query</code>のみ利用可能</li><li>description: 必須</li><li>name:        物理名を定義する<ul><li>命名規約<ul><li>スネークケース</li><li>原則略語は禁止</li><li><code>type: array</code>の場合、<code>xxx_list</code>や<code>xxx_array</code>はNGとする</li><li><code>type: boolean</code>の場合、<code>is_xxx</code>や<code>has_xxx</code>で定義し<code>xxx_flag</code>は非推奨とする<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># good</span></span><br><span class="line"><span class="attr">- in:</span> <span class="string">path</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">product_id</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">プロダクトID</span></span><br><span class="line"><span class="attr">  required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">- in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">product_types</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">プロダクト種別</span></span><br><span class="line"><span class="attr">- in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">is_defective</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">boolean</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">不良品フラグ</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bad</span></span><br><span class="line"><span class="attr">- in:</span> <span class="string">path</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">productId</span> <span class="comment"># キャメルケースはNG</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">プロダクトID</span></span><br><span class="line"><span class="attr">  required:</span> <span class="literal">false</span> <span class="comment"># 不要</span></span><br><span class="line"><span class="attr">- in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">product_type_list</span> <span class="comment"># xxx_listはNG</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">プロダクト種別</span></span><br><span class="line"><span class="attr">- in:</span> <span class="string">query</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">defective_flag</span> <span class="comment"># trueとfalseがどちらの状態を示すのか不明瞭であるため非推奨</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">boolean</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">不良品フラグ</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="POST-PUT-API-の場合"><a href="#POST-PUT-API-の場合" class="headerlink" title="POST/PUT API の場合"></a>POST/PUT API の場合</h4><ul><li>in:       リクエストボディ<code>in: body</code>のみ利用可能</li><li>name:     全て<code>name: body</code>とする</li><li>required: リクエストボディが必須でない場合を除いて<code>required: true</code>を定義する</li><li>schema:   リクエストモデルを<code>type: object</code>で定義する<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># good</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">  - in:</span> <span class="string">body</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">body</span></span><br><span class="line"><span class="attr">    required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    schema:</span></span><br><span class="line">      <span class="string">$ref:</span> <span class="string">'#/definitions/postProductsRequest'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># bad</span></span><br><span class="line"><span class="attr">parameters:</span></span><br><span class="line"><span class="attr">  - in:</span> <span class="string">body</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">postProductsBody</span></span><br><span class="line"><span class="attr">    required:</span> <span class="literal">false</span> <span class="comment"># 不要</span></span><br><span class="line"><span class="attr">    schema:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">object</span> <span class="comment"># TypeScriptのInterfaceの自動生成時に型が適切に定義されない</span></span><br><span class="line"><span class="attr">      properties:</span></span><br><span class="line"><span class="attr">        product_name:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="バリデーション"><a href="#バリデーション" class="headerlink" title="バリデーション"></a>バリデーション</h4><ul><li><p>必須</p><ul><li>required: 必須パラメータのみ<code>required: true</code>を定義する</li><li>default: 必須でないパラメータでもデフォルト値がある場合は定義する</li></ul></li><li><p>型</p><ul><li>type: 必須<ul><li>文字列：string</li><li>数値：number</li><li>整数値：integer</li><li>ブール値：boolean</li><li>配列：array</li><li>オブジェクト：object</li></ul></li><li><code>type: array</code>の場合、配列要素<code>items</code>のtypeも必須</li><li><code>type: null</code>は原則として利用しない</li><li>複数のタイプを定義しない</li></ul></li><li><p>桁</p><ul><li>文字列<ul><li>最大桁数：<code>maxLength</code></li><li>最小桁数：<code>minLength</code></li></ul></li><li>数値または整数値<ul><li>最大値（境界値を含む）：<code>maximum</code></li><li>最小値（境界値を含む）：<code>maximum</code></li><li>境界値を含まない場合のみ<code>exclusiveMinimum: true</code>または<code>exclusiveMaximum: true</code>を定義</li></ul></li><li>配列:<ul><li>最大要素数：<code>maxItems</code></li><li>最小要素数：<code>minItems</code></li><li><code>required: true</code>の場合は原則として<code>minItems: 1</code>を定義する</li></ul></li></ul></li><li><p>区分値</p><ul><li><code>enum</code>必須</li><li><code>description</code>に区分値の論理名を記載する<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ex. enum</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">gender</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">enum:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">'00'</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">'01'</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">'02'</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">|</span></span><br><span class="line"><span class="string">  性別</span></span><br><span class="line"><span class="string">    00: 不明</span></span><br><span class="line"><span class="string">    01: 男</span></span><br><span class="line"><span class="string">    02: 女</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>日付/日時/時刻</p><ul><li><p>日付</p><ul><li>ISO8601拡張形式（YYYY-MM-DD）とする</li><li>example: <code>2020-01-31</code></li><li>name: 接尾辞<code>_date</code></li><li>type: <code>string</code></li><li>format: <code>date</code><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">created_date:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    example:</span> <span class="string">'2020-01-31'</span></span><br><span class="line"><span class="attr">    format:</span> <span class="string">date</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>日時</p><ul><li><p>タイムゾーン指定子付きISO8601形式とする</p></li><li><p>秒精度（YYYY-MM-DDThh:mm:ss+TZD）の場合</p><ul><li>example: <code>2020-01-31T23:59:59+09:00</code></li><li>name: 接尾辞<code>_date_time</code></li><li>type: <code>string</code></li><li>format: <code>date-time</code><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">created_date_time:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    example:</span> <span class="string">'2020-01-31T23:59:59+09:00'</span></span><br><span class="line"><span class="attr">    format:</span> <span class="string">date-time</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>ミリ秒精度（YYYY-MM-DDThh:mm:ss.sss+TZD）の場合</p><ul><li>example: <code>2020-01-31T23:59:59.000+09:00</code></li><li>name: 接尾辞<code>_date_time</code></li><li>type: <code>string</code></li><li>pattern: 必須<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">created_date_time:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    example:</span> <span class="string">'2020-01-31T23:59:59.000+09:00'</span></span><br><span class="line"><span class="attr">    pattern:</span> <span class="string">'^((?:[1-9][0-9]*)?[0-9]&#123;4&#125;)-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9][0-9][0-9])[+|-]([0-9][0-9]:[0-9][0-9])$'</span><span class="string">`</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>時刻</p><ul><li>ISO8601形式（hh:mm）とする</li><li>example: <code>23:59</code></li><li>name: 接尾辞<code>_time</code></li><li>type: string</li><li>pattern: 必須<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">created_time:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    example:</span> <span class="number">23</span><span class="string">:59</span></span><br><span class="line"><span class="attr">    pattern:</span> <span class="string">'^(2[0-3]|[01][0-9]):([0-5][0-9])$'</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>その他</p><ul><li>正規表現で表現できる文字列は<code>pattern</code>を利用して定義すること</li></ul></li></ul><h2 id="responses"><a href="#responses" class="headerlink" title="responses"></a>responses</h2><h3 id="GET-APIの場合"><a href="#GET-APIの場合" class="headerlink" title="GET APIの場合"></a>GET APIの場合</h3><ul><li><p>description</p><ul><li>必須</li><li>HTTPステータスコードのメッセージを記載すること</li></ul></li><li><p>schema</p><ul><li><p>HTTPステータス：200の場合</p><ul><li><code>type: object</code>でレスポンスモデルを定義する</li><li>required: 必須で返る項目を定義する</li><li>再利用可能なモデルを<code>definitions</code>配下に定義する<ul><li>複合的なモデルを定義する場合は<code>allOf</code>を利用する<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># good</span></span><br><span class="line"><span class="attr">getProductsResponse:</span></span><br><span class="line"><span class="attr">  allOf:</span></span><br><span class="line"><span class="attr">    - type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">      properties:</span></span><br><span class="line"><span class="attr">        products:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">          items:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">"#/definitions/product"</span></span><br><span class="line"><span class="attr">        required:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">products</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">$ref:</span> <span class="string">"#/definitions/pagination"</span></span><br><span class="line"><span class="comment"># bad</span></span><br><span class="line"><span class="attr">getProductsResponse:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">array</span> <span class="comment"># TypeScriptのInterfaceが適切に定義されません</span></span><br><span class="line"><span class="attr">  items:</span></span><br><span class="line"><span class="attr">    product:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">        properties:</span></span><br><span class="line"><span class="attr">          product_id:</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">string</span></span><br><span class="line">            <span class="comment"># required: true を定義しないとundefined許容の変数となり不要なType Guardが必要になる</span></span><br><span class="line"><span class="attr">          product_name:</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">string</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>HTTPステータスコード：400系または500系の場合</p><ul><li>共通で定義されたレスポンスモデルを利用すること</li></ul></li></ul></li><li><p>examples</p><ul><li>ステータスコード：200の場合のみ<code>application/json</code>という命名で必須</li><li>必須項目は必ず値を記載すること<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">200</span><span class="string">:</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">OK</span></span><br><span class="line"><span class="attr">  schema:</span></span><br><span class="line">    <span class="string">$ref:</span> <span class="string">'#/definitions/getProductsResponse'</span></span><br><span class="line"><span class="attr">  examples:</span></span><br><span class="line">    <span class="string">application/json:</span> <span class="comment"># Mockサーバのレスポンスになるためフロントエンド開発者も編集する</span></span><br><span class="line"><span class="attr">      products:</span></span><br><span class="line"><span class="attr">        - product_name:</span> <span class="string">Example</span> <span class="string">Product</span></span><br><span class="line"><span class="attr">          create_date:</span> <span class="string">'2020-01-01'</span></span><br><span class="line"><span class="number">400</span><span class="string">:</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">Bad</span> <span class="string">Request</span></span><br><span class="line"><span class="attr">  schema:</span></span><br><span class="line">    <span class="string">$ref:</span> <span class="string">'#/definitions/ErrorResponse'</span></span><br><span class="line"><span class="number">500</span><span class="string">:</span></span><br><span class="line"><span class="attr">  description:</span> <span class="string">Internal</span> <span class="string">Server</span> <span class="string">Error</span></span><br><span class="line"><span class="attr">  schema:</span></span><br><span class="line">    <span class="string">$ref:</span> <span class="string">'#/definitions/ErrorResponse'</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="POST-PUT-DELETE-APIの場合"><a href="#POST-PUT-DELETE-APIの場合" class="headerlink" title="POST/PUT/DELETE APIの場合"></a>POST/PUT/DELETE APIの場合</h3><ul><li>description<ul><li>必須</li><li>HTTPステータスコードのメッセージを記載すること</li></ul></li><li>schema<ul><li>原則不要</li><li>必要な場合は<code>type: object</code>でレスポンスモデルを定義する</li></ul></li><li>examples<ul><li>schemaを定義した場合のみ記載する</li><li>ステータスコード：200の場合のみ<code>application/json</code>という命名で必須</li><li>必須項目は必ず値を記載すること</li></ul></li></ul><h2 id="models"><a href="#models" class="headerlink" title="models"></a>models</h2><h3 id="リクエストモデル"><a href="#リクエストモデル" class="headerlink" title="リクエストモデル"></a>リクエストモデル</h3><ul><li>URI単位で1モデルを定義する</li><li>命名規約<ul><li>キャメルケース</li><li><code>postXxxxRequest</code>または<code>putXxxxRequest</code><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># POST /products</span></span><br><span class="line"><span class="attr">postProductRequest:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">  properties:</span></span><br><span class="line"><span class="attr">    proeuct_name:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">  required:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">product_name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PUT /products/:product_id</span></span><br><span class="line"><span class="attr">putProductRequest:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">  properties:</span></span><br><span class="line"><span class="attr">    proeuct_id:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">    proeuct_name:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">  required:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">product_id</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="レスポンスモデル"><a href="#レスポンスモデル" class="headerlink" title="レスポンスモデル"></a>レスポンスモデル</h3><ul><li>URI単位で1モデルを定義する</li><li>リソースモデルをそのまま利用できる場合は不要</li><li>命名規約<ul><li>キャメルケース</li><li><code>getXxxxResponse</code><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># GET /products</span></span><br><span class="line"><span class="attr">getProductResponse:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">  properties:</span></span><br><span class="line"><span class="attr">    proeucts:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">      items:</span></span><br><span class="line">        <span class="string">$refs:</span> <span class="string">"#/definitions/product"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GET /products/:product_id</span></span><br><span class="line"><span class="attr">responses:</span></span><br><span class="line">  <span class="number">200</span><span class="string">:</span></span><br><span class="line"><span class="attr">    description:</span> <span class="string">OK</span></span><br><span class="line"><span class="attr">      schema:</span></span><br><span class="line">        <span class="string">$ref:</span> <span class="string">"#/definitions/product"</span> <span class="comment"># リソースモデルをそのまま利用する場合は不要</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="リソースモデル"><a href="#リソースモデル" class="headerlink" title="リソースモデル"></a>リソースモデル</h3><ul><li>リソースや共通で利用するエンティティの単位で単数形で定義する</li><li>命名規約<ul><li>キャメルケース<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pagination:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">  properties:</span></span><br><span class="line"><span class="attr">    total_counts:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">    offset:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">    limit:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">  required:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">total_counts</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">offset</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">limit</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="HTTPステータス"><a href="#HTTPステータス" class="headerlink" title="HTTPステータス"></a>HTTPステータス</h2><ul><li>原則として<a href="https://tools.ietf.org/html/rfc7231#section-6" target="_blank" rel="noopener">RFC 7231</a>で定義されているレスポンスステータスコードを利用します</li><li>以下、設計者が特に意識すべきものを抜粋して記載します。</li></ul><h3 id="共通"><a href="#共通" class="headerlink" title="共通"></a>共通</h3><ul><li>バリデーションエラー：<code>400 Bad Request</code></li><li>業務エラー：<code>400 Bad Request</code></li><li>認証エラー：<code>401 Unauthorized</code></li><li>認可エラー：<code>403 Forbidden</code></li><li>システムエラー：<code>500 Internal Server Error</code></li></ul><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><ul><li>正常系：<code>200 OK</code></li><li>検索系APIで結果0件：<code>200 OK</code></li><li>キー検索系APIで対象リソースが存在しないエラー：<code>404 Not Found</code></li></ul><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><ul><li>正常系（同期）：<code>201 Created</code></li><li>正常系（非同期）：<code>202 Accepted</code></li><li>一意制約違反エラー：<code>409 Conflict</code></li><li>親リソースが存在しないエラー：<code>404 Not Found</code></li></ul><h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><ul><li>正常系（同期）：<code>200 OK</code></li><li>正常系（非同期）：<code>202 Accepted</code></li><li>対象リソースが存在しないエラー：<code>404 Not Found</code></li></ul><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><ul><li>正常系：<code>204 No Content</code></li><li>対象リソースが存在しないエラー：<code>404 Not Found</code></li></ul><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回はSwaggerやREST APIの設計に慣れてないメンバーを含む複数人で設計していくことを踏まえて、Swaggerに精通している方には自明な内容を含めやや細かめに規約を設定してみました。<br>結果として品質の高いスキーマ定義でコードを自動生成することでテスト工数も削減できますし、TypeScriptの恩恵をしっかり享受できました。<br>よいソースコードを書くために正しく美しいスキーマ定義を設計しましょう。</p><hr><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20200409/">スキーマファースト開発のためのOpenAPI（Swagger）設計規約</a></li><li><a href="https://future-architect.github.io/articles/20191008/">本当に使ってよかったOpenAPI (Swagger) ツール</a></li><li><a href="https://future-architect.github.io/articles/20200319/">今あえてTypeScriptのビルド＆バンドルツールを探してみる</a></li><li><a href="https://future-architect.github.io/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。その中でもDXチームは特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">go-swaggerについては <a href="https://future-architect.github.io/articles/20190814/">WAFとして go-swagger を選択してみた</a> で詳しく紹介されています。</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;はじめまして。TIG DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;の亀井です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="TypeScript" scheme="https://future-architect.github.io/tags/TypeScript/"/>
    
      <category term="Swagger" scheme="https://future-architect.github.io/tags/Swagger/"/>
    
      <category term="OpenAPI" scheme="https://future-architect.github.io/tags/OpenAPI/"/>
    
      <category term="設計" scheme="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js最初の難関、「props down, event up」を初心者にわかるように解説してみた</title>
    <link href="https://future-architect.github.io/articles/20200401/"/>
    <id>https://future-architect.github.io/articles/20200401/</id>
    <published>2020-04-01T01:30:55.000Z</published>
    <updated>2020-04-14T06:54:00.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、とあるプロジェクトでアーキチームに所属している東郷です。</p><p>今回はVue.jsの最初の難関（だと思っている）「props down, event up」について、初心者（わたしが主に想定しているのは新卒入社の新人さんです）が読んでもわかるような資料を用意してみようと思います。</p><p>プロジェクトで独自のコンポーネントを作ったり、会社として用意しているコンポーネントの利用や改良ができるようになってもらいたいという思いから、その導入を解説しようということです。</p><p>ちなみに、私自身もアサインされて半年未満。Vue.jsを触り始めて4か月くらいです。<br>では、簡単なおさらいから始めていきます。</p><h1 id="Vue-jsとMVVM"><a href="#Vue-jsとMVVM" class="headerlink" title="Vue.jsとMVVM"></a>Vue.jsとMVVM</h1><p>props down, event upの理解のためにMVVMについて簡単に触れておきましょう。<br>下記は、Vueの<a href="https://012-jp.vuejs.org/guide/" target="_blank" rel="noopener">公式サイト(https://012-jp.vuejs.org/guide/)</a>から引用しました</p><blockquote><p>Vue.js はインタラクティブな Web インターフェイスを作るためのライブラリです。<br>技術的に、Vue.js は MVVM パターンの ViewModel レイヤに注目しています。それは two way (双方向)バインディングによって View と Model を接続します。実際の DOM 操作と出力の形式はディレクティブとフィルタによって抽象化されています。</p></blockquote><p>初心者にとってはMVVM パターンと言われてもピンとこないと思います。<br>そこで、導入として例を交えながら詳しく解説します。</p><h2 id="MVVMはModel-View-ViewModelの頭文字"><a href="#MVVMはModel-View-ViewModelの頭文字" class="headerlink" title="MVVMはModel-View-ViewModelの頭文字"></a>MVVMはModel-View-ViewModelの頭文字</h2><p>下の図はVue.jsの公式サイトから拝借しました。<br>図で見ると何となく分かった感じがしますが、何となくの理解ではなく確実に理解しましょう。<br><img src="/images/20200401/photo_20200401_01.png"></p><p><a href="https://012-jp.vuejs.org/guide/" target="_blank" rel="noopener">Vue.js 公式サイト(https://012-jp.vuejs.org/guide/)</a>より</p><table><thead><tr><th></th><th>実体</th><th>役割</th></tr></thead><tbody><tr><td>model</td><td>JavaScrptのコード</td><td>データ処理の主体</td></tr><tr><td>view</td><td>DOM(最終的なhtml)</td><td>人間に情報を伝える、操作を受け付ける末端</td></tr><tr><td>ViewModel</td><td>vue.js</td><td>modelで処理したデータをどんなふうにveiwに流し込むかの制御、viewで受けた操作をmodelに伝える</td></tr></tbody></table><p>なぜ、アルファベットで表現してまで分割して考えるのか？それは、具体例を考えれば簡単に理解できるはずです。</p><p>ユーザに何らかのデータを伝えるとき、どんな見せ方をしますか？あるいはどんな見方をしたいですか？文章、表、写真、動画、音楽の再生など、データに合わせて適切な見せ方が存在するはずです。では、適切な見せ方が決まって同じ種類のデータを扱うのなら、ある種のテンプレートにデータを流し込んで決まった見せ方にしますよね？</p><p>もし変えてしまったらユーザーは混乱しますし、そんな複雑なサイトを作るのは困難かつ望ましくありません。</p><p>上記の話の見せ方（ある種のテンプレート）の部分をview(見た目)としてDOMが担当します。viewに流しこむデータの取得・加工、viewで受けた操作の命令を受けるのはmodelとしてのJavaScriptです。（写真管理のwebサービスなんかであればダウンロード操作など）</p><h2 id="MVVMの実現のために重要なData-binding"><a href="#MVVMの実現のために重要なData-binding" class="headerlink" title="MVVMの実現のために重要なData binding"></a>MVVMの実現のために重要なData binding</h2><p>Vue.jsがMVVMを実現するために取り入れている仕組みにData bindingがあります。</p><p>Data bindingは、よく「データを流し込む目印を打ち込む」と表現されます。まさにこの言葉がすべてを表しています。本解説の肝、「props down, event up」で再度、上記の表現について触れます。Data Bindingは、その言葉が表すように <strong>“データを特定の個所に結びつけます”</strong>。</p><p>しがたって、元のデータが途中で変わっても目印を打ち込んであるので、自動で（Vue.jsが勝手に）目印を打ち込んだ箇所の値を書き換えてくれます。素敵ですね。</p><p>一方で誤解しやすいのがこのData bindingという考え方です。</p><p>ついつい、Vue.jsにおけるData bindingは、常に双方向にデータが流れ込むものだと思ってしまいます。（特にv-modelに値をバインドすれば値の変更に対応できることを知ったばかりの初心者さんはそう思ってしまう。）もちろん、Vue.jsとしては双方向にデータのやり取りは可能です。しかし、単純なData bindingだけですべての仕様を実現することはできません。</p><p>次章では、実際のコードを見ながらData bindingがどんなふうに機能しているかを見ていきましょう。</p><p>※初心者の皆さんへ：<br>ちなみに、MVVMやData bindingはVue.js専用の言葉ではありません。<br>MVVMはプロダクトの構成パターン、Data bindingは仕組みの名前であり他の言語やFrameworkでも当然登場します。</p><h1 id="props-down-event-up-が何を意味するのか"><a href="#props-down-event-up-が何を意味するのか" class="headerlink" title="props down, event up が何を意味するのか"></a>props down, event up が何を意味するのか</h1><p>ちょっと前置きが長くなりましたが、本題のprops down, event upについて、実例を交えながら解説をしていきます。</p><p>業務でVue.jsを使うとなると普通はVueCLIを用いた単一コンポーネントファイルによる開発になると思います。当社でもその形式を利用しています。</p><p>この記事の題材もそれに倣って、下記のようなファイルの構成で説明を進めます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># フォルダの階層構造</span></span><br><span class="line">src</span><br><span class="line"> └ components</span><br><span class="line">    ├ ParentLayer.vue</span><br><span class="line">    ├ ChildLayer.vue</span><br><span class="line">    └ GrandChildLayer.vue</span><br><span class="line"></span><br><span class="line"><span class="comment"># Vue内での構造</span></span><br><span class="line">App.vue ─────────────────────────</span><br><span class="line">│ ParentLayer.vue ─────────────────────────</span><br><span class="line">│ │ ChildLayer.vue ─────────────────────────</span><br><span class="line">│ │ │ GrandChildLayer.vue ─────────────────────────</span><br><span class="line">│ │ │ │</span><br></pre></td></tr></table></figure><p>※<strong>2020/04/14追記</strong>: なお今回の題材では、3つのコンポーネントを親子孫関係にしていますが、何階層にもわたってデータを連携するのは現場ではあまりお勧めされません。データとイベントの管理が大変になりますのでemitの乱用は避けるべきです。<br>親コンポーネントがもつデータを浅い階層でやり取りするため、再利用性の高いコンポーネントの利用/作成のためと思ってご覧ください。場合によってはVuexを使ったデータ管理も有効かもしれません</p><p>実際の画面はこんな感じです。<br><img src="/images/20200401/photo_20200401_02.png" class="img-small-size"></p><p><code>components</code>配下のvueファイルのソースを下記に示します。<br><code>App.vue</code>は中身を空っぽにして<code>ParentLayer.vue</code>を表示しているだけですので割愛します。</p><figure class="highlight html"><figcaption><span>ParentLayer.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 説明のための表示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Parent:&#123;&#123; model.testData &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- THML5 標準の要素に対するデータバインディング --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"ParentInput"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">v-model</span>=<span class="string">"model.testData"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自作のコンポーネントに対するデータバインディング --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child-layer</span> <span class="attr">class</span>=<span class="string">"child"</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">v-model</span>=<span class="string">"model.testData"</span>&gt;</span><span class="tag">&lt;/<span class="name">child-layer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">import ChildLayer from '../components/ChildLayer'</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: 'ParentLayer',</span><br><span class="line">  components: &#123;</span><br><span class="line">    ChildLayer</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: String</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      model: &#123;</span><br><span class="line">        testData: null  // 上記のtemplete部で合計3箇所にバインドされている。</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.parent &#123;</span><br><span class="line">  border: solid gray;</span><br><span class="line">  background: pink;</span><br><span class="line">  height: 300px;</span><br><span class="line">  width: 300px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.child &#123;</span><br><span class="line">  margin-left: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>model.testData</code>が3か所にbindされています。</p><p>1つ目は、<code>templete</code>で直接使用するマスタッシュ構文で、<br>2つ目は、HTML5標準の<code>input</code>タグに<code>v-model</code>ディレクティブで、<br>3つ目は、今回自作した<code>children-layer</code>タグに<code>v-model</code>ディレクティブで<br>使用しています。</p><p>1つ目のマスタッシュ構文は参照だけです。何も困りませんし、<code>model.testData</code>が変更されれば勝手に変わります。<br>2つ目の<code>input</code>タグの<code>v-model</code>ディレクティブでは、テキストボックスに<code>model.testData</code>の値が勝手に入ってきますし、</p><p>上記の実装ならテキストボックスを編集すれば、<code>model.testData</code>がバインドされた箇所すべてが変更された値に変わります。勝手に値が流れ込んできてくれるし、それを編集すれば他にもその変更が伝わります。つまり、<strong>双方向に値が伝達されていっているように見えてしまいます</strong>。</p><p>ここが、Vue.jsのありがたいところであり、props down, event upの理解を困難にする部分です。入力内容が<code>model.testData</code>に自動反映される仕組みは次の<code>ChildLayer.vue</code>の説明と合わせて行います。</p><p>3つ目の<code>children-layer</code>タグに<code>v-model</code>ディレクティブで指定された値がどんなふうに<code>ChildLayer.vue</code>が受け取り、処理するかについてですが、ここからはコンポーネントの理解を深めつつ見ていく必要があります。では、<code>ChildLayer.vue</code>のソースを見ながら確認します。</p><figure class="highlight html"><figcaption><span>ChildLayer.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Child:&#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"ChildInput"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">:value</span>=<span class="string">"value"</span></span></span><br><span class="line"><span class="tag">           @<span class="attr">input</span>=<span class="string">"test"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"clickChildButton(value)"</span>&gt;</span>clickChildButton<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">grand-child-layer</span> <span class="attr">class</span>=<span class="string">"grand-child"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">v-model</span>=<span class="string">"value"</span>&gt;</span><span class="tag">&lt;/<span class="name">grand-child-layer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">import GrandChildLayer from '../components/GrandChildLayer'</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: 'ChildLayer',</span><br><span class="line">  components: &#123;</span><br><span class="line">    GrandChildLayer</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: String</span><br><span class="line">    &#125;,</span><br><span class="line">    msg: String</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    test (e) &#123;</span><br><span class="line">      const vm = this</span><br><span class="line">      vm.$emit('input', e.target.value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.child &#123;</span><br><span class="line">  border: solid gray;</span><br><span class="line">  background: palegreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.grand-child &#123;</span><br><span class="line">    margin-left: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>ParentLayer.vue</code>で<code>v-model=&quot;testData&quot;</code>として流れ込んできた値は、<code>ChildLayer.vue</code>でどんなふうに受け取り、処理しているのでしょうか？</p><p>答えは、<code>ChildLayer.vue</code>の<code>props</code>の<code>value</code>プロパティです。<code>ParentLayer.vue</code>では<code>testData</code>という変数で扱われていた値は、<code>ChildLayer.vue</code>では<code>value</code>プロパティの値として扱われます。こうして、親コンポーネントから子コンポーネントへと値が流れ込んできます。<code>ChildLayer.vue</code>内では、その<code>value</code>を4箇所で使っています。</p><p>1つ目は、マスタッシュ構文で、<br>2つ目は、<code>input</code>の<code>:value</code>で、<br>3つ目は、<code>button</code>タグのクリックイベントの引数で、<br>4つ目は、さらに子コンポーネントの<code>grand-parent-layer</code>で使用しています。</p><p><code>ParentLayer.vue</code>との違いに気づきましたか？<code>button</code>タグがあることが一番目立ちますがそれ以外です。</p><p><code>ParentLayer.vue</code>では、<code>input</code>タグに対して<code>v-model</code>を使ってバインドしていたのに<code>ChildLayer.vue</code>では、<code>:value</code>にバインドしていて、<code>@input</code>なんていうイベントも追加されています。なぜ、こんな違いがあるかというと、もう一つ見逃してはいけない違いがあるからです。</p><p>それは、バインドしている値が<code>data.model</code>に属している値か、コンポーネントのプロパティかということです。</p><p>プロパティはあくまで<strong>読み取り専用</strong>であり、それを直接書き換えることはできません。なぜ直接書き換えられないかというと、プロパティは、親コンポーネントが子コンポーネントに対して付与するものです。子コンポーネントから見た親コンポーネントは絶対的な存在で逆らうことは許されていません。子コンポーネントが自らのプロパティを勝手に変えるということは、親コンポーネントでの指定と不整合が起きることを意味します。そんなことができたら、混乱することは必至です。</p><p>では、<code>ParentLayer.vue</code>や<code>ChildLayer.vue</code>のテキストボックスを変更したら、しっかりと変更が伝わったのは何故でしょうか？</p><p>答えは、<code>@input</code>が重要な役割を果たしているからです。この<code>@input</code>はそれが記載されているタグの<code>input</code>イベントが呼ばれるたびに実行され、そのたびに<code>test</code>という<del>センスのない</del>名前のメソッドを実行します。</p><figure class="highlight javascript"><figcaption><span>@input</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test (e) &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="keyword">this</span></span><br><span class="line">  vm.$emit(<span class="string">'input'</span>, e.target.value)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>上記の<code>test</code>というメソッドは何をしているかというと<code>$emit</code>というメソッドを実行しています。<code>&#39;input&#39;</code>というメソッドを引数<code>e.target.value</code>で実行してほしいとお願いしているメソッドです。そう、勝手にプロパティを変更してはいけないので、変更する権限を持つ親コンポーネントに変更をお願いしているのです。</p><p>ここで、<code>ParentLayer.vue</code>内の<code>input</code>タグでの双方向な値のやり取りを解説したいと思います。<code>これは、親コンポーネントに対して、input</code>タグに指定された<code>v-model</code>は、実は、下記の実装と同じです。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"ParentInput2"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">:value</span>=<span class="string">"model.testData"</span></span></span><br><span class="line"><span class="tag">       @<span class="attr">input</span>=<span class="string">"ParentInput2"</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  ParentInput2 (e) &#123;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">this</span></span><br><span class="line">    vm.model.testData = e.target.value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この<code>input</code>タグはプロパティではなく、普通のデータを扱っているわけですし、親コンポーネントへemitする必要はないだけで、<br>裏ではVue.jsが値が双方向に反映されているように見せているのです。</p><p>先の<code>child-layer</code>タグに戻ってしまいますが、こちらも</p><figure class="highlight html"><figcaption><span>ParentLayer.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自作の要素に対するデータバインディング --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-layer</span> <span class="attr">class</span>=<span class="string">"child"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">:value</span>=<span class="string">"model.testData"</span></span></span><br><span class="line"><span class="tag">             @<span class="attr">input</span>=<span class="string">"catchEmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">child-layer</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  catchEmit (e) &#123;</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">this</span></span><br><span class="line">    vm.model.testData = e.target.value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>と記載するのと同じことになります。流れを追っていくと、</p><p>子コンポーネントの<br>　<code>templete</code>部で<strong>inputイベント</strong>によって<strong>メソッドA</strong>を起動<br>　<code>script</code>部の<strong>メソッドA</strong>によって親コンポーネントへと<strong>イベントB</strong>をemit<br>親コンポーネント<br>　<code>templete</code>部のv-on(@)ディレクティブで<strong>イベントB</strong>を受けて<strong>メソッドC</strong>を起動<br>　<code>script</code>部の<strong>メソッドC</strong>によって親コンポーネントのデータの書き換え</p><p>ということをしています。</p><p>つまり、親から子へのデータの流れはData bindingによるデータの流し込み（props down:流れは高いところから低いところへ）、子から親へのデータの流れは<code>$emit</code>によるイベントとメソッドのリレー(event up:上の立場の親が子のイベントを拾い上げる)ということで双方向バインディングを実現しています。</p><p>また、こういった複雑でわかりにくい複数の指定をひとまとめに指定することができる構文を<strong>糖衣構文</strong>といいます。つまり、<code>ParentLayer.vue</code>と<code>ChildLayer.vue</code>にある<code>input</code>タグの指定はVue.jsから見たら同じなのです。</p><p>ここで、<code>GrandChildLayer.vue</code>を見てみましょう。ソース内にもコメントで書いていますが、<code>props</code>の<code>value</code>を直接<code>v-model</code>に放り込んでいるので、テキストボックスに入力をするたびにエラーが出ます。</p><figure class="highlight html"><figcaption><span>GrandChildLayer.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grand-child"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>GrandChild:&#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-modelに直接propsのvalueを指定しているため、</span></span><br><span class="line"><span class="comment">         inputタグのinputイベントが呼ばれるたびに</span></span><br><span class="line"><span class="comment">         コンソールにエラーが出て、値の更新も行われない --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"GrandChildInput"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">v-model</span>=<span class="string">"value"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">'GrandChildLayer'</span>,</span></span><br><span class="line">  props: &#123;</span><br><span class="line"><span class="javascript">    value: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">    msg: <span class="built_in">String</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">.grand-child &#123;</span><br><span class="line">  border: solid gray;</span><br><span class="line">  background: paleturquoise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>v-model</code>が<code>:value</code>と<code>@input</code>を一つにまとめて書いていると表現しましたが、<code>value</code>プロパティじゃないほかの名前のプロパティへ値を渡したいこともあるでしょう。<code>@input</code>でないイベントを拾いたいことことも考えられます。</p><p>Vue.jsとしてそういった要望に対応できるにmodelオプションというものを用意されています。必要に応じて勉強してみてください。また<code>props</code>や<code>$emit</code>を使わない親子間データ連携もあります。特徴も違います。ぜひ使い分けてみててください。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>最後に言葉でしっかりと表現して自分のものにしておきましょう。</p><ul><li>Data bindingはあくまで、データの流れ込みの目印である</li><li>双方向に見えても、それは糖衣構文で暗黙的に変換がかかっているだけである。</li><li>親コンポーネントへのデータ連携は<code>$emit</code>を使って実装しないといけない。(親でもそれを拾い上げる実装が必要) </li></ul><hr><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20200316/">その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～</a></li><li><a href="https://future-architect.github.io/articles/20200318/">【Figma】を使ってチームでUI/UX設計するといいこと</a></li><li><a href="https://future-architect.github.io/articles/20200319/">今あえてTypeScriptのビルド＆バンドルツールを探してみる</a></li><li><a href="https://future-architect.github.io/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、とあるプロジェクトでアーキチームに所属している東郷です。&lt;/p&gt;
&lt;p&gt;今回はVue.jsの最初の難関（だと思っ
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Serverless連載5: CloudEventsのGo版SDKをいじってみる</title>
    <link href="https://future-architect.github.io/articles/20200331/"/>
    <id>https://future-architect.github.io/articles/20200331/</id>
    <published>2020-03-31T00:39:23.000Z</published>
    <updated>2020-03-31T03:44:09.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG所属の<a href="https://twitter.com/famipapamart" target="_blank" rel="noopener">村田</a>です。<br>サーバレス連載企画の第5回は<a href="https://cloudevents.io/" target="_blank" rel="noopener">CloudEvents</a>を取り上げたいと思います。</p><p>※本記事は2020.03.31時点の情報を元に執筆しています</p><h1 id="CloudEventsとは？"><a href="#CloudEventsとは？" class="headerlink" title="CloudEventsとは？"></a>CloudEventsとは？</h1><img src="/images/20200331/photo_20200331_01.png"><p><a href="https://cloudevents.io/" target="_blank" rel="noopener">CloudEvents</a>は様々存在するイベントを統一的に扱いたいとの思いから登場した統一仕様です。<br>2019.10.24に<a href="https://www.cncf.io/" target="_blank" rel="noopener">CNCF</a>のIncubatorプロジェクトに昇格したらしく、同時にv1.0のSpecificationがリリースされています。</p><p>私のチームで開催している勉強会でも取り上げたことがあり、以下はその時の資料です。<br><a href="https://speakerdeck.com/mura123yasu/cloudevents" target="_blank" rel="noopener">https://speakerdeck.com/mura123yasu/cloudevents</a></p><p>今回は実際に公開されているSDKを使って一連のイベントデータのやり取りを実現してみようと思うのですが、SDKはいくつかの言語で公開されています。</p><blockquote><p>CloudEvents provides SDKs for Go, JavaScript, Java, C#, Ruby, and Python</p></blockquote><p>GitHubを見る限りではGoのSDKが一番開発進んでいるのかなと思ったのと個人的にGo書きたい思いが強いので、今回はGoのSDKを使っていきます。</p><h1 id="環境とターゲット"><a href="#環境とターゲット" class="headerlink" title="環境とターゲット"></a>環境とターゲット</h1><table><thead><tr><th align="left">項目</th><th align="left">バージョン等</th></tr></thead><tbody><tr><td align="left">OS</td><td align="left">macOS Mojave 10.14.6</td></tr><tr><td align="left">go</td><td align="left">1.14</td></tr><tr><td align="left">Google Cloud SDK</td><td align="left">286.0.0</td></tr><tr><td align="left">CloudEvents sdk-go</td><td align="left">v1.1.2</td></tr></tbody></table><p>今回は『CloudEvents仕様のメッセージをローカル端末からCloud Pub/Sub経由でCloud Functionsに渡し、個々の値を取り出しプログラムで扱える形にすること』を目的とします。</p><p>以下のような形を目指します。</p><img src="/images/20200331/d1.png"><h3 id="SDKバージョンについての補足"><a href="#SDKバージョンについての補足" class="headerlink" title="SDKバージョンについての補足"></a>SDKバージョンについての補足</h3><p>現在v2は <code>work in progress</code> とのことで、今回は雰囲気を掴むためにLatest Releaseの <code>v1.1.2</code> のソースコードをいじってみます。</p><p>※v1のREADMEには <code>2020.03.27</code> を目処にv2リリースを目指すとの記載がありますが、いまも絶賛開発中と思われます。</p><blockquote><p>We will target ~2 months of development to release v2 of this SDK with an end date of March 27, 2020.</p></blockquote><p><a href="https://github.com/cloudevents/sdk-go/blob/master/README_v1.md" target="_blank" rel="noopener">https://github.com/cloudevents/sdk-go/blob/master/README_v1.md</a></p><h1 id="やってみる"><a href="#やってみる" class="headerlink" title="やってみる"></a>やってみる</h1><p>今回書いたソースコードはすべてGitHubにあげていますので必要に応じて参照して頂ければと思います。</p><ul><li><a href="https://github.com/mura123yasu/cloudevents-go-helloworld" target="_blank" rel="noopener">https://github.com/mura123yasu/cloudevents-go-helloworld</a></li><li><a href="https://github.com/mura123yasu/cloudevents-cloudpubsub-receiver" target="_blank" rel="noopener">https://github.com/mura123yasu/cloudevents-cloudpubsub-receiver</a></li></ul><h2 id="まずは、シンプルにローカルで繋げる"><a href="#まずは、シンプルにローカルで繋げる" class="headerlink" title="まずは、シンプルにローカルで繋げる"></a>まずは、シンプルにローカルで繋げる</h2><p>まずはローカル端末内で完結する形で実装します。</p><img src="/images/20200331/d2.png"><p><a href="https://github.com/cloudevents/sdk-go/tree/v1.1.2/cmd/samples" target="_blank" rel="noopener">公式のリポジトリ</a>にしっかりサンプル実装があるので、それを参考にしつつ進めることができました。</p><p>まずはReceiver側の実装です。</p><figure class="highlight go"><figcaption><span>Reveiver側の実装</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"></span><br><span class="line">cloudevents <span class="string">"github.com/cloudevents/sdk-go"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Receive</span><span class="params">(event cloudevents.Event)</span></span> &#123;</span><br><span class="line"><span class="comment">// do something with event.Context and event.Data (via event.DataAs(foo)</span></span><br><span class="line">fmt.Printf(<span class="string">"Event received.\n====\n%s====\n"</span>, event)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c, err := cloudevents.NewDefaultClient()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"failed to create client, %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Fatal(c.StartReceiver(context.Background(), Receive))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実処理は <code>Receive</code> にて行われていますが、今回は受け取ったイベントを標準出力するのみです。</p><p>次にSender側の実装です。</p><figure class="highlight go"><figcaption><span>Sender側の実装</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"></span><br><span class="line">cloudevents <span class="string">"github.com/cloudevents/sdk-go"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">event := cloudevents.NewEvent()</span><br><span class="line">event.SetID(<span class="string">"ABC-123"</span>)</span><br><span class="line">event.SetType(<span class="string">"com.cloudevents.readme.sent"</span>)</span><br><span class="line">event.SetSource(<span class="string">"somesource"</span>)</span><br><span class="line">event.SetData(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;<span class="string">"hello"</span>: <span class="string">"world"</span>&#125;)</span><br><span class="line"></span><br><span class="line">t, err := cloudevents.NewHTTPTransport(</span><br><span class="line">cloudevents.WithTarget(<span class="string">"http://localhost:8080/"</span>),</span><br><span class="line">cloudevents.WithEncoding(cloudevents.HTTPBinaryV1),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"failed to create transport, "</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c, err := cloudevents.NewClient(t)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"unable to create cloudevent client: "</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_, _, err = c.Send(context.Background(), event)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"failed to send cloudevent: "</span> + err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>event.SetData</code> がいわゆるpayloadにあたるデータを詰め込んでいる箇所です。</p><p>Receiverを起動してSenderからメッセージを投げてみると…</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line">Event received.</span><br><span class="line">====</span><br><span class="line">Validation: valid</span><br><span class="line">Context Attributes,</span><br><span class="line">  specversion: 1.0</span><br><span class="line">  <span class="built_in">type</span>: com.cloudevents.readme.sent</span><br><span class="line">  <span class="built_in">source</span>: somesource</span><br><span class="line">  id: ABC-123</span><br><span class="line">Extensions,</span><br><span class="line">  traceparent: 00-5480757570b54984891dde6df8921bba-6a759fba2b9ee0eb-00</span><br><span class="line">Data,</span><br><span class="line">  &#123;<span class="string">"hello"</span>:<span class="string">"world"</span>&#125;</span><br><span class="line">====</span><br></pre></td></tr></table></figure><p>ちゃんと届きました！簡単ですね。</p><h2 id="次に、Cloud-Pub-Sub経由の形に変えてみる"><a href="#次に、Cloud-Pub-Sub経由の形に変えてみる" class="headerlink" title="次に、Cloud Pub/Sub経由の形に変えてみる"></a>次に、Cloud Pub/Sub経由の形に変えてみる</h2><p>実際にはイベントデータの受け渡しはキューを経由するなどして非同期なやりとりになるかと思います。<br>というわけで、私が普段GCPを利用しているということもありGCPのCloud Pub/Subを経由する形で実装したいと思います。</p><img src="/images/20200331/d3.png"><p>まずはReceiverの実装です。</p><figure class="highlight go"><figcaption><span>Receiver側の実装(Pub/Sub)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"></span><br><span class="line">cloudevents <span class="string">"github.com/cloudevents/sdk-go"</span></span><br><span class="line"><span class="string">"github.com/cloudevents/sdk-go/pkg/cloudevents/client"</span></span><br><span class="line">cepubsub <span class="string">"github.com/cloudevents/sdk-go/pkg/cloudevents/transport/pubsub"</span></span><br><span class="line">pscontext <span class="string">"github.com/cloudevents/sdk-go/pkg/cloudevents/transport/pubsub/context"</span></span><br><span class="line"><span class="string">"github.com/kelseyhightower/envconfig"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> envConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">ProjectID <span class="keyword">string</span> <span class="string">`envconfig:"GOOGLE_CLOUD_PROJECT"`</span></span><br><span class="line"></span><br><span class="line">TopicID <span class="keyword">string</span> <span class="string">`envconfig:"PUBSUB_TOPIC" default:"demo_cloudevents" required:"true"`</span></span><br><span class="line"></span><br><span class="line">SubscriptionID <span class="keyword">string</span> <span class="string">`envconfig:"PUBSUB_SUBSCRIPTION" default:"demo_cloudevents_subscriber" required:"true"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Model <span class="keyword">struct</span> &#123;</span><br><span class="line">Sequence <span class="keyword">int</span>    <span class="string">`json:"id"`</span></span><br><span class="line">Message  <span class="keyword">string</span> <span class="string">`json:"message"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">receive</span><span class="params">(ctx context.Context, event cloudevents.Event, resp *cloudevents.EventResponse)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Event Context: %+v\n"</span>, event.Context)</span><br><span class="line">fmt.Printf(<span class="string">"Transport Context: %+v\n"</span>, pscontext.TransportContextFrom(ctx))</span><br><span class="line"></span><br><span class="line">data := &amp;Model&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := event.DataAs(data); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Got Data Error: %s\n"</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"Data: %+v\n"</span>, data)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"----------------------------\n"</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> env envConfig</span><br><span class="line"><span class="keyword">if</span> err := envconfig.Process(<span class="string">""</span>, &amp;env); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"[ERROR] Failed to process env var: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">"[INFO] ProjectID: %s"</span>, env.ProjectID)</span><br><span class="line">log.Printf(<span class="string">"[INFO] TopicID: %s"</span>, env.TopicID)</span><br><span class="line">log.Printf(<span class="string">"[INFO] SubscriptionID: %s"</span>, env.SubscriptionID)</span><br><span class="line">t, err := cepubsub.New(context.Background(),</span><br><span class="line">cepubsub.WithProjectID(env.ProjectID),</span><br><span class="line">cepubsub.WithSubscriptionID(env.SubscriptionID))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"failed to create pubsub transport, %s"</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c, err := client.New(t)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"failed to create client, %s"</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">"Created client, listening..."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := c.StartReceiver(ctx, receive); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"failed to start pubsub receiver, %s"</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GCPサービスへアクセスする都合上環境変数からの値の取得やその取り回しがありますが、大枠は先程の実装と同じです。<br>先程はクライアント作成時に <code>NewDefaultClient</code> を呼んでいましたが、今回はPub/Subを利用するため専用のtransportを作成してそれを引数に渡す形でクライアントを <code>New(transport)</code> しています。</p><p>ちょうど該当するソースコードは以下になります。</p><figure class="highlight go"><figcaption><span>PubSub設定する部分</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t, err := cepubsub.New(context.Background(),</span><br><span class="line">cepubsub.WithProjectID(env.ProjectID),</span><br><span class="line">cepubsub.WithSubscriptionID(env.SubscriptionID))</span><br><span class="line"><span class="comment">// ---中略---</span></span><br><span class="line">c, err := client.New(t)</span><br></pre></td></tr></table></figure><p>次にSender側の実装です。</p><figure class="highlight go"><figcaption><span>Sender側の実装(Pub/Sub)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"></span><br><span class="line">cloudevents <span class="string">"github.com/cloudevents/sdk-go"</span></span><br><span class="line">cepubsub <span class="string">"github.com/cloudevents/sdk-go/pkg/cloudevents/transport/pubsub"</span></span><br><span class="line"><span class="string">"github.com/kelseyhightower/envconfig"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> envConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">ProjectID <span class="keyword">string</span> <span class="string">`envconfig:"GOOGLE_CLOUD_PROJECT" required:"true"`</span></span><br><span class="line">TopicID   <span class="keyword">string</span> <span class="string">`envconfig:"PUBSUB_TOPIC" default:"demo_cloudevents" required:"true"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Basic data struct.</span></span><br><span class="line"><span class="keyword">type</span> Model <span class="keyword">struct</span> &#123;</span><br><span class="line">Sequence <span class="keyword">int</span>    <span class="string">`json:"id"`</span></span><br><span class="line">Message  <span class="keyword">string</span> <span class="string">`json:"message"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> env envConfig</span><br><span class="line"><span class="keyword">if</span> err := envconfig.Process(<span class="string">""</span>, &amp;env); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"[ERROR] Failed to process env var: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t, err := cepubsub.New(context.Background(),</span><br><span class="line">cepubsub.WithProjectID(env.ProjectID),</span><br><span class="line">cepubsub.WithTopicID(env.TopicID))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"failed to create pubsub transport, %s"</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line">c, err := cloudevents.NewClient(t, cloudevents.WithTimeNow(), cloudevents.WithUUIDs())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"failed to create client, %s"</span>, err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">event := cloudevents.NewEvent(cloudevents.VersionV1)</span><br><span class="line">event.SetType(<span class="string">"com.cloudevents.sample.sent"</span>)</span><br><span class="line">event.SetSource(<span class="string">"github.com/cloudevents/sdk-go/cmd/samples/pubsub/sender/"</span>)</span><br><span class="line">_ = event.SetData(&amp;Model&#123;</span><br><span class="line">Sequence: <span class="number">0</span>,</span><br><span class="line">Message:  <span class="string">"HELLO"</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">_, _, err = c.Send(context.Background(), event)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"failed to send: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらも大枠は先程のパターンと変わりませんが、今回ひとつ先程のパターンと異なるのは、やりとりするデータの形式について明示的にstructを定義している点です。(念のため補足ですが、Pub/Subを利用するからそうしているというわけではありません。あくまで変化点という意味です。)</p><p>各々ファイルにそれぞれ <code>Model</code> を定義してしまっていますが、別ファイルで定義してReceiverとSenderの両方からimportする形で実装するのが望ましい形かなと思います。</p><p>では動かしてみましょう。<br>まずはCloud Pub/SubのTopicおよびSubscriptionを作成します。</p><figure class="highlight sh"><figcaption><span>TopicとSubscriptionの作成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcloud pubsub topics create &lt;YOUR PUBSUB TOPIC&gt;</span><br><span class="line">gcloud pubsub subscriptions create &lt;YOUR PUBSUB SUBSCRIPTION&gt; --topic=&lt;YOUR PUBSUB TOPIC&gt;</span><br></pre></td></tr></table></figure><p>次に、アプリケーションの実行に必要な環境変数を設定します。</p><figure class="highlight sh"><figcaption><span>環境変数設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># required</span></span><br><span class="line"><span class="built_in">export</span> GOOGLE_APPLICATION_CREDENTIALS=&lt;YOUR CREDENTIAL&gt;</span><br><span class="line"><span class="built_in">export</span> GOOGLE_CLOUD_PROJECT=&lt;YOUR GCP PROJECT&gt;</span><br><span class="line"><span class="comment"># optional</span></span><br><span class="line"><span class="built_in">export</span> PUBSUB_TOPIC=&lt;YOUR PUBSUB TOPIC&gt; <span class="comment"># default is "demo_cloudevents"</span></span><br><span class="line"><span class="built_in">export</span> PUBSUB_SUBSCRIPTION=&lt;YOUR PUBSUB SUBSCRIPTION&gt; <span class="comment"># default is "demo_cloudevents_subscriber"</span></span><br></pre></td></tr></table></figure><p>アプリケーションの認証情報については詳しくは<a href="https://cloud.google.com/docs/authentication/production?hl=ja" target="_blank" rel="noopener">こちら</a>を参照してください。</p><p>準備が整ったので動かします！</p><figure class="highlight sh"><figcaption><span>実行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go</span><br><span class="line"><span class="comment"># ---中略---</span></span><br><span class="line">Event Context: Context Attributes,</span><br><span class="line">  specversion: 1.0</span><br><span class="line">  <span class="built_in">type</span>: com.cloudevents.sample.sent</span><br><span class="line">  <span class="built_in">source</span>: github.com/cloudevents/sdk-go/cmd/samples/pubsub/sender/</span><br><span class="line">  id: 89142958-bdb1-4fc9-979a-5c45f6590207</span><br><span class="line">  time: 2020-03-30T16:25:40.473793Z</span><br><span class="line">  datacontenttype: application/json</span><br><span class="line">Extensions,</span><br><span class="line">  traceparent: 00-a31200e4a4b2a5a0d41b5710b5f350bb-a348823d4ab87c62-00</span><br><span class="line"></span><br><span class="line">Transport Context: Transport Context,</span><br><span class="line">  ID: 1085540809479288</span><br><span class="line">  PublishTime: 2020-03-30 16:25:41.358 +0000 UTC</span><br><span class="line">  Project: xxxxxxx</span><br><span class="line">  Subscription: demo_cloudevents_subscriber</span><br><span class="line">  Method: pull</span><br><span class="line"></span><br><span class="line">Data: &amp;&#123;Sequence:0 Message:HELLO&#125;</span><br><span class="line">----------------------------</span><br></pre></td></tr></table></figure><p>期待通りにメッセージを受け取ることができました。<br>GCPコンソールからもメッセージがしっかりPub/Subに届いていたことが確認できます。</p><img src="/images/20200331/photo_20200331_02.png" class="img-small-size"><p>成功です。</p><h2 id="最後に、Cloud-Pub-Subから先をCloud-Functionsに切り替える"><a href="#最後に、Cloud-Pub-Subから先をCloud-Functionsに切り替える" class="headerlink" title="最後に、Cloud Pub/Subから先をCloud Functionsに切り替える"></a>最後に、Cloud Pub/Subから先をCloud Functionsに切り替える</h2><p>さて、Pub/SubキューはCloud Functionsに渡してあげたいと思うのは私だけでしょうか？（求ム、同志）<br>というわけでラストは先程Cloud Pub/Subに到達したメッセージをCloud Functionsで受け取りたいと思います。</p><img src="/images/20200331/d4.png"><p>先程までのReceiverをCluod Functions仕様に書き換えてあげます。また、さっきまでは受け取ったメッセージの中に含まれるpayloadをプログラム上で扱える形にまでparseしきってなかったのでそこも一緒にやりたいと思います。</p><p>ということで実装がこちら。</p><figure class="highlight go"><figcaption><span>CloudFunction実装</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> receiver</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"cloud.google.com/go/pubsub"</span></span><br><span class="line">cepubsub <span class="string">"github.com/cloudevents/sdk-go/pkg/cloudevents/transport/pubsub"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Model is published data struct.</span></span><br><span class="line"><span class="keyword">type</span> Model <span class="keyword">struct</span> &#123;</span><br><span class="line">Sequence <span class="keyword">int</span>    <span class="string">`json:"id"`</span></span><br><span class="line">Message  <span class="keyword">string</span> <span class="string">`json:"message"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Receiver parse payload to Model</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Receiver</span><span class="params">(ctx context.Context, msg *pubsub.Message)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"[INFO] message received: %v\n"</span>, msg)</span><br><span class="line">fmt.Printf(<span class="string">"[INFO] message.Attributes: %s\n"</span>, msg.Attributes)</span><br><span class="line">fmt.Printf(<span class="string">"[INFO] message.Data: %s\n"</span>, msg.Data)</span><br><span class="line"></span><br><span class="line"><span class="comment">// convert pubsub.Message to cepubsub.Message</span></span><br><span class="line"><span class="keyword">var</span> cemsg cepubsub.Message</span><br><span class="line">cemsg.Data = msg.Data</span><br><span class="line">cemsg.Attributes = msg.Attributes</span><br><span class="line">fmt.Printf(<span class="string">"[INFO] CloudEventsVersion: %s\n"</span>, cemsg.CloudEventsVersion())</span><br><span class="line"></span><br><span class="line"><span class="comment">// get data(type Model) from cepubsub.Message</span></span><br><span class="line"><span class="keyword">var</span> data &amp;Model</span><br><span class="line">json.Unmarshal([]<span class="keyword">byte</span>(cemsg.Data), &amp;data)</span><br><span class="line">fmt.Printf(<span class="string">"[INFO] Model.Sequence: %d\n"</span>, data.Sequence)</span><br><span class="line">fmt.Printf(<span class="string">"[INFO] Model.Message: %s\n"</span>, data.Message)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cloud Pub/Subの <code>Message</code> 型で受け取った電文を、CloudEventsの <code>Message</code> 型に変換し、データの中身を <code>Model</code> 型へ変換しています。これにより <code>Sequence</code> および <code>Message</code> という個々の値を扱える状態にできました。</p><h3 id="CloudEventsのメッセージの取り扱いについての考察"><a href="#CloudEventsのメッセージの取り扱いについての考察" class="headerlink" title="CloudEventsのメッセージの取り扱いについての考察"></a>CloudEventsのメッセージの取り扱いについての考察</h3><p>ReceiverとSenderで同一の <code>Model</code> を準備してデータをやりとりし合うこと自体は一般的な実装ですが、今回ひとつミソになるのは <code>pubsub.Message</code> ⇔ <code>cepubsub.Message</code> の変換だと思います。</p><p>※Cloud Pub/SubのMessageを <code>pubsub.Message</code> 、CloudEventsのMessageを <code>cepubsub.Message</code> と表現しています。(以下、同様)</p><p>CloudEventsのSDK上ではCloud Pub/Subとやりとりする際の <code>Message</code> を以下のように定義しています。</p><figure class="highlight go"><figcaption><span>CloudEventsSDKのMessage定義</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// Data is the actual data in the message.</span></span><br><span class="line">Data []<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Attributes represents the key-value pairs the current message</span></span><br><span class="line"><span class="comment">// is labelled with.</span></span><br><span class="line">Attributes <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/cloudevents/sdk-go/blob/v1.1.2/pkg/cloudevents/transport/pubsub/message.go" target="_blank" rel="noopener">https://github.com/cloudevents/sdk-go/blob/v1.1.2/pkg/cloudevents/transport/pubsub/message.go</a></p><p>つまり、CloudEventsの定義する <code>Event</code> データがCloud Pub/Subを通過する際には <code>pubsub.Message.Data</code> と <code>pubsub.Message.Attributes</code> に情報が集約されます。</p><p>実際にPub/Subから受け取った電文をそのまま標準出力したものを見てみると、以下のような形になっていました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&amp;&#123; </span><br><span class="line">    [123 34 105 100 34 58 48 44 34 109 101 115 115 97 103 101 34 58 34 72 69 76 76 79 34 125] </span><br><span class="line">    map[</span><br><span class="line">        ce-datacontenttype:application/json </span><br><span class="line">        ce-id:89142958-bdb1-4fc9-979a-5c45f6590207 </span><br><span class="line">        ce-source:github.com/cloudevents/sdk-go/cmd/samples/pubsub/sender/ </span><br><span class="line">        ce-specversion:1.0 </span><br><span class="line">        ce-time:2020-03-30T16:25:40.473793Z </span><br><span class="line">        ce-traceparent:00-a31200e4a4b2a5a0d41b5710b5f350bb-a348823d4ab87c62-00 </span><br><span class="line">        ce-type:com.cloudevents.sample.sent</span><br><span class="line">    ] </span><br><span class="line">    0001-01-01 00:00:00 +0000 UTC &#123;0 0 &lt;nil&gt;&#125; &lt;nil&gt; 0 false &lt;nil&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pubsub.Message.Attributes</code> を標準出力したログでは以下のようにMap情報が確認できました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[INFO] message.Attributes: map[ce-datacontenttype:application/json ce-id:89142958-bdb1-4fc9-979a-5c45f6590207 ce-source:github.com/cloudevents/sdk-go/cmd/samples/pubsub/sender/ ce-specversion:1.0 ce-time:2020-03-30T16:25:40.473793Z ce-traceparent:00-a31200e4a4b2a5a0d41b5710b5f350bb-a348823d4ab87c62-00 ce-type:com.cloudevents.sample.sent]</span><br></pre></td></tr></table></figure><p>また、 <code>pubsub.Message.Data</code> を標準出力したログでは以下のようにデータの中身が確認できました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[INFO] message.Data: &#123;&quot;id&quot;:0,&quot;message&quot;:&quot;HELLO&quot;&#125;</span><br></pre></td></tr></table></figure><p>私は今回Cloud Pub/Subを利用しましたが、同様な形でCloudEventsが各イベント型の情報とのIFを定義してくれて、実装者はCloudEventsとのIFだけを気にすれば良くなっていくんだろうなと思います。</p><p>現在v2は絶賛開発中ですが、たとえば <code>pubsub.Message</code> ⇔ <code>cepubsub.Message</code> の変換をやってくれるutility的なものがSDKの中に登場するとすごく便利だろうなと思いました。</p><p>また、もう一点気になったポイントは以下のように実装されている <code>CloudEventsVersion</code> の存在です。</p><figure class="highlight go"><figcaption><span>CloudEventsVersion</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Message)</span> <span class="title">CloudEventsVersion</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="comment">// Check as Binary encoding first.</span></span><br><span class="line"><span class="keyword">if</span> m.Attributes != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// Binary v0.3:</span></span><br><span class="line"><span class="keyword">if</span> s := m.Attributes[prefix+<span class="string">"specversion"</span>]; s != <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now check as Structured encoding.</span></span><br><span class="line">raw := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]json.RawMessage)</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(m.Data, &amp;raw); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// structured v0.3</span></span><br><span class="line"><span class="keyword">if</span> v, ok := raw[<span class="string">"specversion"</span>]; ok &#123;</span><br><span class="line"><span class="keyword">var</span> version <span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(v, &amp;version); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> version</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/cloudevents/sdk-go/blob/v1.1.2/pkg/cloudevents/transport/pubsub/message.go" target="_blank" rel="noopener">https://github.com/cloudevents/sdk-go/blob/v1.1.2/pkg/cloudevents/transport/pubsub/message.go</a></p><p>これは <code>cepubsub.Message</code> の <code>Attributes</code> の中から <code>specversion</code> を取り出しており、ちょうど以下の <code>ce-specversion:1.0</code> にあたる情報を取り出していることになります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">map[</span><br><span class="line">    ce-datacontenttype:application/json </span><br><span class="line">    ce-id:89142958-bdb1-4fc9-979a-5c45f6590207 </span><br><span class="line">    ce-source:github.com/cloudevents/sdk-go/cmd/samples/pubsub/sender/ </span><br><span class="line">    ce-specversion:1.0 </span><br><span class="line">    ce-time:2020-03-30T16:25:40.473793Z </span><br><span class="line">    ce-traceparent:00-a31200e4a4b2a5a0d41b5710b5f350bb-a348823d4ab87c62-00 </span><br><span class="line">    ce-type:com.cloudevents.sample.sent</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>v1.1.2のSDKでは <code>specversion</code> のみの実装ですが、同様の形で <code>Attributes</code> からいわゆるメタデータを取り出して処理を行うかあるいは後続にイベントを伝播させるために再度なにかしらのオブジェクトに詰めるかといったことを行うことになるかなと思います。</p><h3 id="ということで動かしてみる"><a href="#ということで動かしてみる" class="headerlink" title="ということで動かしてみる"></a>ということで動かしてみる</h3><p>ちょこっと考察を挟みましたが、肝心のプログラム実行がまだでした。<br>まずはReceiver関数をCloud Functionsにデプロイします。</p><figure class="highlight sh"><figcaption><span>CloudFunctionsのデプロイ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcloud <span class="built_in">functions</span> deploy &lt;YOUR FUNCTION NAME&gt; --project &lt;YOUR GCP PROJECT&gt; \</span><br><span class="line">  --entry-point Receiver \</span><br><span class="line">  --trigger-topic &lt;YOUR PUBSUB TOPIC&gt; \</span><br><span class="line">  --runtime go113</span><br></pre></td></tr></table></figure><p>Senderは同じものを利用するだけなので新しい準備は不要です。</p><p>というわけで実行してみると…</p><img src="/images/20200331/photo_20200331_03.png">Cloud Functionsのログにてメッセージが届いていることが確認できました！<p>無事に『CloudEvents仕様のメッセージをローカル端末からCloud Pub/Sub経由でCloud Functionsに渡し、個々の値を取り出しプログラムで扱える形にすること』という目的を達成することができました。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回は主にCloud Pub/Subにフォーカスする形でCloudEventsの実装について紹介させて頂きました。SDKは絶賛開発中なステータスですが、世に蔓延る様々なイベント形式に悩まされる実装者が幸せになれる未来が待っていると思うと非常に楽しみですし、CloudEventsの動向からますます目が離せませんね。</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG所属の&lt;a href=&quot;https://twitter.com/famipapamart&quot; target=
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
      <category term="Serverless連載" scheme="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Serverless連載4: Firebase CrashlyticsでAndroidアプリのエラーログをさくっと収集する</title>
    <link href="https://future-architect.github.io/articles/20200330/"/>
    <id>https://future-architect.github.io/articles/20200330/</id>
    <published>2020-03-30T00:45:42.000Z</published>
    <updated>2020-03-30T01:04:28.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Android Developerの佐藤です。</p><p><a href="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/">サーバーレス連載</a>の4回目を担当します！<br>モバイルアプリ品質強化の強い味方となってくれるFirebase Crashlyticsを紹介したいと思います！</p><h1 id="そもそもFirebaseとは"><a href="#そもそもFirebaseとは" class="headerlink" title="そもそもFirebaseとは"></a>そもそもFirebaseとは</h1><p>Firebaseとは、AndroidやiOSなどのモバイルアプリのバックエンド機能を提供してくれるサービスです。<br><a href="https://firebase.google.com/products?hl=ja" target="_blank" rel="noopener">提供されているサービス</a>は、利用状況の解析、クラッシュの検知、認証、通知、ホスティングなど多種多様です。<br>これらのサービスを利用する上で、サーバーの管理が不要なのはもちろん、導入する上で追加のコーディングはほぼ必要ありません。<br><code>Firebase SDK</code>をアプリのソースコードに組み込むだけで、Firebaseの機能を利用することができます。</p><p>※ Firebaseはモバイルアプリだけでなく、Webアプリにも対応しています。サービスごとに、対応しているプラットフォームが異なる点に注意が必要です。</p><h1 id="Firebase-Crashlyticsとは"><a href="#Firebase-Crashlyticsとは" class="headerlink" title="Firebase Crashlyticsとは"></a>Firebase Crashlyticsとは</h1><p>どんなに気をつけていても、予期せずアプリがクラッシュしてしまうことはあります。<br>クラッシュしないようなコーディングに努めることも重要ですが、クラッシュがあったという事実をいち早く検知し、その原因を突き止めることも同じくらい重要です。</p><p>Firebase Crashlyticsはクラッシュの検知とその原因の究明に役立つサービスです。<br>Firebase Crashlyticsを導入することで、以下の情報を簡単に知ることができます。</p><ul><li>いつクラッシュしたのか</li><li>ソースコードのどこでクラッシュしたのか</li><li>クラッシュによって影響を受けているユーザーはどれくらいいるのか</li><li>どのバージョンでクラッシュしたのか</li><li>どの機種でクラッシュしたのか</li></ul><p>以下では、実際にFirebase Crashlyticsを使って、どのようにクラッシュ情報にアクセスできるようになるのかを見ていきます。</p><h1 id="Firebase-Crashlyticsを使ってみる"><a href="#Firebase-Crashlyticsを使ってみる" class="headerlink" title="Firebase Crashlyticsを使ってみる"></a>Firebase Crashlyticsを使ってみる</h1><p>簡単なサンプルアプリを用いて、</p><ul><li>どのようにしたらクラッシュ情報をFirebaseに送ることができるのか</li><li>Firebaseコンソールでどのようなクラッシュレポートを見ることができるのか</li></ul><p>を見ていきましょう。</p><h2 id="サンプルアプリを用意する"><a href="#サンプルアプリを用意する" class="headerlink" title="サンプルアプリを用意する"></a>サンプルアプリを用意する</h2><p>Android Studioで<code>Empty Activity</code>テンプレートをベースにした新規プロジェクトを作成します。<br>ボタンを画像のように2つ追加します。</p><img src="/images/20200330/1.png" class="img-small-size"><p>それぞれのボタンに<code>OnClickListener</code>を実装します。実装例は後述しますが、それぞれのボタンをクリックしたときの振る舞いを簡単に説明すると、以下のようになります。</p><ul><li><code>FATAL</code>ボタンをクリックすると<code>RuntimeException</code>が発生し、アプリが強制終了します。</li><li><code>NON FATAL</code>ボタンをクリックすると<code>RuntimeException</code>が発生しますが、try-catchのエラーハンドリングを実装しているため、アプリが強制終了しません。</li></ul><p>意図的に例外が発生する状況を再現しています。</p><h2 id="Firebaseをセットアップする"><a href="#Firebaseをセットアップする" class="headerlink" title="Firebaseをセットアップする"></a>Firebaseをセットアップする</h2><p>Firebase公式ページを見ながらFirebaseのセットアップを行います。<br><a href="https://firebase.google.com/docs/android/setup" target="_blank" rel="noopener">https://firebase.google.com/docs/android/setup</a><br>(Firebase公式ページには日本語に訳されているページもありますが、英語ページのアップデートに追随していない箇所がいくつかあります。日本語ページを参照する場合は、英語ページも併せてご覧になることをおすすめします。)</p><p>Firebaseコンソール画面も親切にナビゲートしてくれるので安心です。</p><img src="/images/20200330/2.png"><h2 id="Firebase-Crashlyticsをセットアップする"><a href="#Firebase-Crashlyticsをセットアップする" class="headerlink" title="Firebase Crashlyticsをセットアップする"></a>Firebase Crashlyticsをセットアップする</h2><p><a href="https://firebase.google.com/docs/android/setup" target="_blank" rel="noopener">Firebaseのセットアップ</a>が完了していれば、<code>build.gradle</code>にコードを数カ所追加するだけでCrashlyticsの最小限の設定は完了です。アプリが異常終了したとき、自動的にFirebaseにクラッシュレポートが送信されます。</p><ul><li>Projectの<code>build.gradle</code></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">'https://maven.fabric.io/public'</span> <span class="comment">// 追加</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.6.1'</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.google.gms:google-services:4.3.3'</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'io.fabric.tools:gradle:1.31.2'</span> <span class="comment">// 追加</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Moduleの<code>build.gradle</code></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line">apply plugin: <span class="string">'com.google.gms.google-services'</span></span><br><span class="line">apply plugin: <span class="string">'io.fabric'</span> <span class="comment">// 追加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    implementation <span class="string">'com.google.firebase:firebase-analytics:17.2.3'</span></span><br><span class="line">    implementation <span class="string">'com.crashlytics.sdk.android:crashlytics:2.10.1'</span> <span class="comment">// 追加</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>※ 2020/3/30現在2つのCrashlytics SDKが存在します。”Fabric系譜のCrashlytics SDK”と”Firebase向けに新調されたSDK”です。後者は、2020/3/30現在beta版となっています。今回はGAになっている前者のSDKを使用しています。</p><h2 id="アプリをクラッシュさせてみる"><a href="#アプリをクラッシュさせてみる" class="headerlink" title="アプリをクラッシュさせてみる"></a>アプリをクラッシュさせてみる</h2><p><code>MainActivity</code>の実装例はこちらです。<code>FATAL</code>ボタン、<code>NON FATAL</code>ボタンに<code>OnClickListener</code>をセットしています。</p><figure class="highlight java"><figcaption><span>アプリクラッシュするMainActivity実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// どのユーザーの端末でクラッシュが発生したのかを知りたい場合、</span></span><br><span class="line">        <span class="comment">// CrashlyticsにUserIDを教えてあげる必要がある。</span></span><br><span class="line">        Crashlytics.setUserIdentifier(<span class="string">"user0001"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// FATALボタンをクリックしたときの処理</span></span><br><span class="line">        findViewById(R.id.fatal_button).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// "FATAL"ボタンをクリックするとアプリが強制終了する。</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Fatal"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// NON FATALボタンをクリックしたときの処理</span></span><br><span class="line">        findViewById(R.id.non_fatal_button).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// "NON FATAL"ボタンをクリックするとRuntimeExceptionが発生するが、</span></span><br><span class="line">                <span class="comment">// 例外をcatchしているので、アプリが強制終了することはない。</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Non Fatal"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">// logException()メソッド送信されたログは「非致命的(non-fatal)」なログとしてレポートされる。</span></span><br><span class="line">                    Crashlytics.logException(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Firebase SDK</code>は、開発者が意図しない強制終了(クラッシュ)が発生したときに、自動でスタックトレースをFirebaseに送信してくれます。上のコードでいうと<code>FATAL</code>ボタンをクリックしたときにアプリが強制終了してしまいますが、裏でSDKがクラッシュレポートをFirebaseに送信してくれます。</p><p>クラッシュが起きないようにエラーハンドリングはしているけれど、開発者目線で「この例外の発生は検知したい」というような場合がよくあります。そういった場合は、<code>Crashlytics.logException()</code>メソッドを利用します。発生した例外を「非致命的(Non-fatal)」な例外としてFirebaseに通知することができます。</p><h2 id="Firebaseコンソールでクラッシュレポートを確認する"><a href="#Firebaseコンソールでクラッシュレポートを確認する" class="headerlink" title="Firebaseコンソールでクラッシュレポートを確認する"></a>Firebaseコンソールでクラッシュレポートを確認する</h2><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>サイドナビの<code>品質</code>から<code>Crashlytics</code>を選択するとCrashlyticsの画面が開きます。<br>こちらの画面からクラッシュ状況の概要がわかります。<br><code>FATAL</code>ボタンをクリックしたときのレポートは「MainActivity.java - line 23」として通知されています。<br><code>NON FATAL</code>ボタンをクリックしたときのレポートは「MainActivity.java - line 30」として通知されています。<br>「評価」項目をみると「クラッシュレポート」なのか「非致命的な例外のレポート」なのかがひと目でわかりますね。</p><img src="/images/20200330/3.png"><h3 id="クラッシュレポート"><a href="#クラッシュレポート" class="headerlink" title="クラッシュレポート"></a>クラッシュレポート</h3><p><code>Fatal</code>ボタンをクリックすることによって発生したクラッシュレポート(MainActivity.java - line 23)を見てみましょう。</p><img src="/images/20200330/4.png"><p>以下がひと目でわかりますね。</p><ul><li>いつクラッシュしたのか</li><li>ソースコードのどこでクラッシュしたのか</li><li>クラッシュによって影響を受けているユーザーはどれくらいいるのか</li><li>どのバージョンでクラッシュしたのか</li><li>どの機種でクラッシュしたのか</li></ul><p>また「スタックトレース」タブからクラッシュしたときのスタックトレースを見ることができます。<br>なぜクラッシュしたのかが詳細にわかります。</p><img src="/images/20200330/5.png"><h3 id="ユーザーIDでの検索"><a href="#ユーザーIDでの検索" class="headerlink" title="ユーザーIDでの検索"></a>ユーザーIDでの検索</h3><p>「ユーザーIDでの検索」も行うことができます。<br>ユーザーから不具合の問い合わせがあった際に、ソースコードのどの箇所で異常があったがゆえにそのユーザーの端末で不具合が発生したのかを素早く知ることができます。<br><img src="/images/20200330/6.png"></p><p>以下のようにSDKにユーザーIDを教えてあげることで、ユーザーIDでの検索が可能になります。</p><figure class="highlight java"><figcaption><span>ユーザID検索</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Crashlytics.setUserIdentifier(<span class="string">"user0001"</span>);</span><br></pre></td></tr></table></figure><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>Firebase Crashlyticsは本当にさくっと導入することができます。<br>ユーザーの端末に埋もれてしまいがちなクラッシュ情報に簡単にアクセスできるのが嬉しいポイントですね。<br><a href="https://firebase.google.com/docs/crashlytics/customize-crash-reports?platform=android" target="_blank" rel="noopener">クラッシュレポートはカスタマイズ</a>もできるのですが、<code>build.gradle</code>にSDKを追加するだけのシンプルな実装だけでも大変役に立ちます。</p><p>ぜひお試しください！</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://future-architect.github.io/articles/20160420/">ハッカソン道中記#2～世界はチャンスであふれてる～</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a></li><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、Android Developerの佐藤です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future-a
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
      <category term="Serverless連載" scheme="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/"/>
    
      <category term="Firebase" scheme="https://future-architect.github.io/tags/Firebase/"/>
    
      <category term="Android" scheme="https://future-architect.github.io/tags/Android/"/>
    
      <category term="モバイルアプリ" scheme="https://future-architect.github.io/tags/%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA/"/>
    
  </entry>
  
  <entry>
    <title>Serverless連載3: Goでサーバーレス用の検索エンジンwatertowerを作ってみました</title>
    <link href="https://future-architect.github.io/articles/20200327/"/>
    <id>https://future-architect.github.io/articles/20200327/</id>
    <published>2020-03-27T00:51:22.000Z</published>
    <updated>2020-03-30T00:49:29.741Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">サーバーレス連載の3回目</a>は検索エンジンを作ってみたお話です。</p><p>クラウドサービスが充実してくるにつれて、サーバーレスではいろいろなことができるようになっています。HTTPサーバーは動きますし、RDBやNoSQLなストレージも使えますし、PubSubみたいなサービスも利用できます。これらを駆使するとそこそこ複雑な処理も記述できます。</p><p>一方で、上から下までサーバーレスにしようとするとできないものもいくつかあります。例えば、RDBも使えるといっても制約があり、LambdaやCloud FunctionsからRDSやCloudSQLを雑に使うとコネクションを張りすぎる問題があります。LambdaにはRDS Proxyが出始めています。あと、RDBそのものは基本的に常駐型なのでサーバーレスではないです。一応サーバーレスなのもありますが、起動時間が結構かかるらしい（自分ではまだ試してないです）。それ以外にもキャッシュ系のサービスがなかったします。</p><p>中でも検索エンジンがない、という話はよく聞きます。Google App Engineの1st Genにはあったのですが、2ndにはなくなりました。これの代替サービスはありません。自前で建てると言えばElasticsaerchですが、ESはオンメモリDBなので、サーバーレスではなくなってしまいます。</p><p>ずっと前に、前職の同僚の末永さんから<a href="https://amzn.to/33M6uce" target="_blank" rel="noopener">検索エンジン自作入門～手を動かしながら見渡す検索の舞台裏</a>の献本を頂いていて、本の趣旨的には、実装してから感想を書かないといかんな！と思いつつ、なかなかチャンスがなかったのですが、今回この本のロジックを参考にサーバーレス環境用の検索エンジンを作ってみました。コードは<a href="https://github.com/future-architect/watertower" target="_blank" rel="noopener">GitHub</a>にアップしています。名前はwatertowerです。サーバーレス→略してSLなので、蒸気機関車用語で良さげなのいっぱいあるんじゃないかと思って探したけど、まあ地味に給水塔です。</p><h1 id="アーキテクチャ"><a href="#アーキテクチャ" class="headerlink" title="アーキテクチャ"></a>アーキテクチャ</h1><p>検索エンジン自作入門をなぞって実装します。サーバーレスでやる以上、ストレージのサイズは小さくしたいところなので、N-Gramではなく形態要素解析を使うことにします。日本語は<a href="https://github.com/ikawaha/kagome" target="_blank" rel="noopener">kagome</a>を使います。英語は分かち書きは不要ですが、Snowball Stemmerを使ってStemmingをします。TF-IDFによるスコアリング、符号化による圧縮にもチャレンジしてみたいですね。この本ではC言語を使っていますが、Goで実装します。</p><p>RDBを使っちゃうとストレージがサーバーレスではなくなってしまうので、DynamoDBとかFirestoreを使うことにしました。<a href="https://future-architect.github.io/tags/GoCDK/">GoCloudは以前このブログで連載</a>してとりあげましたが、今回の実装もGoCloudを活用します。同一のコードでGCPでもAWSでもAzureでも柔軟にアクセスできます。</p><p>単に自然言語で検索するだけならかんたんですが、実用性を考えると、タグでフィルタリングとかも欲しいですよね。Elasticsearch的にこんな感じのマッピングがハードコーディングされている、という感じのデータ構造にしてみます。Elasticsearchの「検索がめっぽう強いドキュメントDB」みたいなのは良いな、と思ったのでちょっとしたデータを持てるようにしています。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"unique_key"</span>: <span class="string">"一位のキー"</span>,</span><br><span class="line">  <span class="attr">"title"</span>: <span class="string">"フレーズ検索対象となるタイトル"</span>,</span><br><span class="line">  <span class="attr">"content"</span>: <span class="string">"フレーズ検索対象となる本文"</span>,</span><br><span class="line">  <span class="attr">"tags"</span>: [<span class="string">"タグ"</span>, <span class="string">"の"</span>, <span class="string">"リスト"</span>],</span><br><span class="line">  <span class="attr">"lang"</span>: <span class="string">"jp"</span>,</span><br><span class="line">  <span class="attr">"metadata"</span>: &#123;<span class="attr">"検索対象"</span>: <span class="string">"じゃない追加データ"</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GoCloudの<a href="https://gocloud.dev/howto/docstore/#mem" target="_blank" rel="noopener">memdocstore</a>を使うと、オンメモリで動作するので、ユニットテストが超高速ではかどります。</p><p>実装したのは主に1つの構造体なんですが、長くなったので3分割しています。</p><ul><li>watertower.go: WaterTower構造体の定義と初期化まわり</li><li>database.go: ドキュメントの登録や削除、検索などの</li><li>search.go: 検索してスコアをつけてソートして返す</li></ul><p>ユニークなドキュメントIDを振るために、<a href="https://github.com/shibukawa/cloudcounter" target="_blank" rel="noopener">シーケンシャルなカウンター</a>も実装しました。NoSQLだと秒間更新数が決まっていたりするので、10個ぐらいのエントリーに分けてランダムにインクリメントし、最新のIDを取得するにはこの10個の値を合計して返す、みたいな感じです。</p><h1 id="検索ロジック"><a href="#検索ロジック" class="headerlink" title="検索ロジック"></a>検索ロジック</h1><p>ということで、最初に実装したのは、テーブルが4つある検索エンジンです。</p><ul><li>単語→Doc IDと登場位置のリスト（ポスティングリスト）</li><li>Doc ID→ドキュメント本体</li><li>ユニークキー→Doc ID</li><li>タグ→Doc IDのリスト</li></ul><p>最初の2つが自然言語検索用です。最初のテーブルが、タイトルと本文を形態要素解析した単語をキーにして、ドキュメントと登場位置のインデックスをまとめたものです。検索ワードも同様に形態要素解析してから、このテーブルを引っ張ってきて、Doc IDの積集合を取ると、検索ワードにひっかかった文章がわかるというわけです。これでDoc IDがわかるので、本文を2つ目のテーブルで取得して返せば、検索は完了します。</p><p>このシステムをドキュメントDBだとすると、文書を一位に特定するもの、例えばURLだったりから取得できる必要があるため、3つ目のテーブルを用意しています。</p><p>最後がタグのフィルタリングです。これも、タグが含まれるDoc IDのリストが取得できるため、この積集合をさらに取れば、自然言語検索の結果を絞り込むことができます。基本的な検索のロジックはこんなところです。</p><p>さらなるフィルタリングとしては、フレーズ検索によるフィルタも入れています。３つのキーワードで文章検索したら、その3つのキーワードが登場するだけではなく、検索キーワードと同じ並びで含まれるという単語の登場位置も見ています。</p><p>最後にTF-IDFで単語の登場頻度でスコアをつけてソートします。タイトルはちょっとスコアを上げる、みたいなこともしていたかな？</p><p>samples/httpstatusに、HTTPのステータスコードを検索できるコマンドのサンプルがあります。ユニットテストで便利なmemdocstoreをそのまま使い、起動時にドキュメントを一通り登録してから検索をする、CLIツールです。</p><h1 id="ダメダメそんなんじゃダメ"><a href="#ダメダメそんなんじゃダメ" class="headerlink" title="ダメダメそんなんじゃダメ"></a>ダメダメそんなんじゃダメ</h1><p>というわけには行かないのがDynamoDB。DynamoDBは起動時間に寄らない課金体系になっていますが、キャパシティユニットというのがあります。キャパシティユニットを増やすと秒間のアクセスできる回数が増えます。しかし、キャパシティユニットはテーブルごと。無料枠もありますが、基本的にテーブルを増やせば増やすほどお金もかかります。</p><p>上記のテーブルがどれぐらいアクセスがあるかの比率なんて、使われ方によって変わってきますので、最適なチューニングを目指すのは大変です。チューニングとかしないで利用しただけ課金にしたい、という本来のサーバーレスの趣旨とは反します。</p><p>というわけで、全部のデータ構造を1つのテーブルにまとめます。ユニークキーならk、ドキュメントならd、単語ならw、タグはtと主キーにプリフィックスをつけて、1つのテーブルに統合しました。サーバーレスならテーブル一個用意すれば使えます、という手軽さがないと意味がないですからね。手間暇かけるぐらいなら、Elasticsearch使ったほうが良いですし。</p><p>というわけで、1つのテーブルで全部のデータを格納するように実装を修正しました。</p><h1 id="せっかくならウェブインタフェースも"><a href="#せっかくならウェブインタフェースも" class="headerlink" title="せっかくならウェブインタフェースも"></a>せっかくならウェブインタフェースも</h1><p>これで使える検索エンジンはできました。実際にはウェブサービスとしてHTTPサーバーの上で使われるはず。もしかしたら単体のウェブサービスとして起動できたら便利かな？と今週の月曜日にふと思って、ウェブサーバーも実装してみました。</p><p>Goの構造体を作ると、そのメソッドがそのままJSON-RPCの外部IFになってくれる<a href="https://github.com/semrush/zenrpc" target="_blank" rel="noopener">github.com/semrush/zenrpc</a>か、gRPCか、REST APIかで悩んだんですが、gRPCはウェブ上に記事がいっぱいあるのでやっても面白くないですよね。JSON-RPCはそういう意味ではレアなのでいいのですが、せっかくElasticsearchのようなフレーズ検索もタグ検索も可能な仕組みなので、Elasticsearch互換のREST APIにチャレンジしてみます。</p><p>本ブログで、多賀さんと、武田さんがいろいろ紹介してくれていますので、使ってみました。go-swaggerとStopLight Studioを使いました。結果としてはとても良い体験が得られました。</p><ul><li>多賀さん: <a href="https://future-architect.github.io/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li>武田さん: <a href="https://future-architect.github.io/articles/20191008/">本当に使ってよかったOpenAPI (Swagger) ツール</a></li></ul><p>Elasticsearchクローンといっても、全部はできないので、インデックスに対するドキュメントの追加、削除、IDでの取得、検索ぐらいを定義しました（PUTはswagger上では定義したけど本体側に更新のAPI作ってなかったので使えません）。</p><img src="/images/20200327/photo_20200327_01.png"><p>検索は<code>?q=unique_key:ユニークキーの値</code>で、キーでの取得もできるようにしていますが、検索エンジンっぽい検索は、次のようなクエリーだけが処理できるようになっています。今後ももっといろいろ実装したいですね。ちなみに、内部では自然言語検索ではタイトルと本文を両方検索しちゃうので、titleだけに含まれるキーワードの検索とかはできません。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: &#123;</span><br><span class="line">    <span class="attr">"bool"</span>: &#123;</span><br><span class="line">      <span class="attr">"must"</span>: &#123;</span><br><span class="line">        <span class="attr">"match"</span>: &#123;</span><br><span class="line">          <span class="attr">"content"</span>: &#123;</span><br><span class="line">            <span class="attr">"query"</span>: <span class="string">"this is a test"</span>,</span><br><span class="line">            <span class="attr">"analyzer"</span>: <span class="string">"en"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"filter"</span>: &#123;</span><br><span class="line">        <span class="attr">"terms"</span>: &#123;</span><br><span class="line">          <span class="attr">"tags"</span>: [</span><br><span class="line">            <span class="string">"white"</span>,</span><br><span class="line">            <span class="string">"red"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cmd/watertower-server以下に実装があります。次のように起動します。WATERTOWER_INDEXES環境変数でカンマ切りで指定するとインデックスを増やせますが、デフォルトはindexとなります。WATERTOWER_DOCUMENT_URL環境変数で、保存先を設定します。デフォルトのmem://でオンメモリ動作します。dyanamo://とか、firestore://とか、mongo://とかも使えるはずです（localStackのDynamoしかテストしてないですが）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./watertower-server --port=8888</span><br></pre></td></tr></table></figure><p>あとはcurlでいつものElasticsearchのように使えます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ドキュメントの登録</span></span><br><span class="line">$ curl -X POST <span class="string">"http://127.0.0.1:8888/index/_doc/"</span></span><br><span class="line">　　-H <span class="string">"content-type: application/json"</span></span><br><span class="line">　　-d <span class="string">'&#123; "unique_key": "id1", "title": "hello watertower", </span></span><br><span class="line"><span class="string">　　　　　"content": "watertower is a full text search engine with tag filtering", "lang": "en" &#125;'</span></span><br><span class="line">&#123;<span class="string">"_id"</span>:<span class="string">"d1"</span>,<span class="string">"_index"</span>:<span class="string">"index"</span>,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"result"</span>:<span class="string">"created"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ユニークなキーで取得</span></span><br><span class="line">$ curl -X GET <span class="string">"http://127.0.0.1:8888/index/_search?q=unique_key%3Aid1"</span></span><br><span class="line">    -H<span class="string">"content-type: application/json"</span></span><br><span class="line">&#123;<span class="string">"hits"</span>:&#123;<span class="string">"hits"</span>:[&#123;<span class="string">"_id"</span>:<span class="string">"d1"</span>,<span class="string">"_index"</span>:<span class="string">"index"</span>,<span class="string">"_source"</span>:&#123;<span class="string">"content"</span>:<span class="string">"watertower is a full text search engine with tag filtering"</span>,<span class="string">"lang"</span>:<span class="string">"en"</span>,<span class="string">"metadata"</span>:&#123;&#125;,<span class="string">"tags"</span>:null,<span class="string">"title"</span>:<span class="string">"hello watertower"</span>,<span class="string">"unique_key"</span>:<span class="string">"id1"</span>&#125;,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"sort"</span>:null&#125;],<span class="string">"total"</span>:&#123;<span class="string">"total"</span>:1&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># ドキュメントのIDで取得</span></span><br><span class="line">$ curl -X GET <span class="string">"http://127.0.0.1:8888/index/_source/d1"</span></span><br><span class="line">(略)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 検索</span></span><br><span class="line">$ curl -X GET <span class="string">"http://127.0.0.1:8888/index/_search"</span> </span><br><span class="line">  -H <span class="string">"content-type: application/json"</span></span><br><span class="line">  -d <span class="string">'&#123;"query": &#123;"bool": &#123;"must": &#123;"match_phrase": &#123;"content": &#123;"query": "stay", "analyzer": "en"&#125;&#125;&#125;&#125;&#125;&#125;'</span></span><br><span class="line">(略)</span><br></pre></td></tr></table></figure><p>動きました。めでたしめでたし。Elasticsearch IFは後付けだったので、タイトルの文字列のスコアのBoostingはクエリー側で重みを設定できたりできないとかありますが、そのうちなんとかするかも。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>まだ実用的に使ってみてはないのですが、これでサーバーレスなサービスでも検索ができるようになります。今回は保存と検索を両方ともアクティブに行う前提でNoSQLなストレージを選択しました。まあ、うちの会社だとRDBを常時起動するケースがほとんどなので、RDBバックエンドも選べるようにしても良かったかもなぁ、と作ってから思いました。それ以外のケースで、更新頻度が少ないのであれば、バッチで転置インデックスを作成してS3に置いて、フロント側は読み込み専用で使う、みたいなのもあってもいいかもなぁ、と思いました。ブログみたいに誰かが更新しない限りインデックスも変更されないような場合ですね。</p><p>静的な検索だけしかしない、というユースケースを想定するなら、インデックスを検索エンジンのバイナリに書き込んでしまって、WebAssemblyにしてしまうというのも手です。なんか、今どきのCDNはWebAssemblyが動くらしいですし、CDN上で走らせても面白いんじゃないかと。Goはバイナリが大きいのでGo製のWebAssemblyバイナリはブラウザで動かすのはダウンロードのオーバーヘッドが大きくて、どこで使えばいいのか悩んでいましたが、エッジで動くならぜんぜんありですね。</p><p>互換インタフェースをつけてみたとはいえ、絶対的な検索速度の性能だけじゃなくて、台数を増やせば増やすほどスケーリングする点、マッピングの柔軟性、運用ノウハウetcな点では圧倒的にElasticsearchのほうが上です。たまーにしか使わない管理画面とかにも検索機能つけたらよくね？ぐらいな気持ちで作り始めたので、常時起動してもきちんと使われるとかであればElasticsearchを使うほうが良いです。</p><p>本を頂いてから6年越しになってしまって非常に申し訳なかったのですが、ようやく実装することができました。「サーバーレスでやる！」というコンセプトが決まってしまったら、あとはスムーズにできました。とても良い本です。実装の仕方の本ですが、Elasticsearchとかも基本的には同じ転置インデックス型のはずなので、今まで既製の検索エンジンを使うだけだった人も、より詳しくなってElasticsearchの気持ちを理解するには良い本じゃないかと思います。</p><p>今週末は都心近くの人はみんなお出かけはしないでしょうし、何か暇つぶしを探している方は、ぜひ検索エンジンを作ってみると良いと思います。</p><p>検索エンジン自作入門以外にも手を動かす系書籍の<a href="https://amzn.to/2UIpdBm" target="_blank" rel="noopener">［ゲーム＆モダン JavaScript文法で2倍楽しい］グラフィックスプログラミング入門</a>も杉本さんから献本を頂いてしまっているので、今度は一年以内には・・・</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><p>Goに関連した記事です。</p><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;/tags/Serverless%E9%80%A3%E8%BC%89/&quot;&gt;サーバーレス連載の3回目&lt;/a&gt;は検索エンジンを作ってみたお話です。&lt;/p&gt;
&lt;p&gt;クラウドサービスが充実してくるにつれて、サーバーレスではいろいろなことができるようになっています。
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
      <category term="Serverless連載" scheme="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/"/>
    
      <category term="GoCloud" scheme="https://future-architect.github.io/tags/GoCloud/"/>
    
  </entry>
  
  <entry>
    <title>Serverless連載2: AWS Lambda×Goの開発Tips</title>
    <link href="https://future-architect.github.io/articles/20200326/"/>
    <id>https://future-architect.github.io/articles/20200326/</id>
    <published>2020-03-26T05:24:00.000Z</published>
    <updated>2020-03-26T05:30:28.964Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG/DXユニットの真野です。</p><p><a href="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレスに関する連載</a>の第2弾ということで、典型的なAWSサービスであるLambdaアプリをGoで開発する中で調べた内容や、Tipsを紹介します。</p><h2 id="Lambdaの利用コア数は？"><a href="#Lambdaの利用コア数は？" class="headerlink" title="Lambdaの利用コア数は？"></a>Lambdaの利用コア数は？</h2><p>結論⇨ 全ての場合で”2”でした。</p><p>Goで開発する場合、少しでも性能を稼ぐためgoroutineを使う場面も多いと思います。特にバックエンドのデータストアがDynamoDBである場合は負荷を気にする必要がほぼ無いため、わたしはデータの書き込み部分を良く並列化することが多いです。</p><p>そういった場面で概算でどれくらい性能上がるのかな？と推測ができるよう、Lambda上で利用できるgoroutineの個数を調べました。メモリを128MB~3008MBを調整することで、裏のCPUやNW幅も増減する話も聞いたので、メモリサイズを変えて調べました。</p><p>Goで利用コア数を調べるには <a href="https://golang.org/pkg/runtime/#NumCPU" target="_blank" rel="noopener">NumCPU</a> を利用するそうです。これをLambdaのお作法に組み込みます。</p><p>Goにおける<a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/golang-handler.html" target="_blank" rel="noopener">Lambda関数の規約</a>から、最も短いシグネチャは <code>func()</code> ということで、単に標準出力するだけのものを作成します。</p><figure class="highlight go"><figcaption><span>検証コード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line"><span class="string">"runtime"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; fmt.Println(runtime.NumCPU()) &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを<a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/golang-package.html" target="_blank" rel="noopener">公式の手順を参考に</a>にデプロイします。</p><p>起動トリガーは何でも良いですが、今回はKinesis Data Streamをマッピングさせ、AWS CLIで <code>aws kinesis --profile=my_lambda_test put-record --stream-name dev-test-lambda --partition-key 123456789 --data MTIzNDU=</code> など適当なデータを投入し実行します。</p><p>例えば、メモリを1024MB与えて、実際に起動すると以下のようなログがCloudWatchLogsに出力されます。メモリなど設定を変更するたびに、LogStreamが変わるのでご注意ください。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-03-26T03:10:39.194+09:00 START RequestId: 65078a85-9db0-45b0-bbf2-81a4eb19a08a Version: $LATEST</span><br><span class="line">2020-03-26T03:10:39.195+09:00 2</span><br><span class="line">2020-03-26T03:10:39.195+09:00 END RequestId: 65078a85-9db0-45b0-bbf2-81a4eb19a08a</span><br><span class="line">2020-03-26T03:10:39.195+09:00 REPORT RequestId: 65078a85-9db0-45b0-bbf2-81a4eb19a08a Duration: 0.67 ms Billed Duration: 100 ms Memory Size: 1024 MB Max Memory Used: 34 MB Init Duration: 74.46 ms</span><br></pre></td></tr></table></figure><p>実際に128MB, 512MB, 1024MB, 3008MBでLambdaを動かし、<code>runtime.NumCPU()</code> の値を取得すると以下の結果でした。</p><table><thead><tr><th>Memory[MB]</th><th>NumCPU</th></tr></thead><tbody><tr><td>128</td><td>2</td></tr><tr><td>512</td><td>2</td></tr><tr><td>1024</td><td>2</td></tr><tr><td>3008</td><td>2</td></tr></tbody></table><p>…全部2ですね。</p><p>もちろん、利用可能なCPU利用時間はメモリサイズによって変動すると思いますので、Concurrentにgoroutineを動かす場合は、メモリサイズを上げることは有効な対策になると思いますので、ユースケースに合わせてパラメータを検討しようと思います。</p><p>ちなみに、隣に座っている同僚が、つい最近メモリサイズごとの処理性能を計測していましたので大体どのくらいメモリを与えるとよいかの指標は近いうちに公開したいと思います。</p><h2 id="Lambdaの初期処理のポイント"><a href="#Lambdaの初期処理のポイント" class="headerlink" title="Lambdaの初期処理のポイント"></a>Lambdaの初期処理のポイント</h2><p><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/golang-handler.html#golang-handler-state" target="_blank" rel="noopener">ドキュメント</a> に記載している通り、Lambda関数外に変数を宣言できますし、init関数を用いる事もできます。Lambda関数は同時に1つしか動かないのでスレッドセーフを気にせずフィールドにおけるそうです。</p><p>init関数も良いですが、普通にmain関数内に初期処理を書いています。</p><figure class="highlight go"><figcaption><span>main関数内でフィールドに初期化するコード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> kc *kinesis.Kinesis</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(ctx context.Context, e events.KinesisEvent)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// kcを使った何かしらのロジック</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">kc = kinesis.New(<span class="comment">/* 色々な初期化処理 */</span>),</span><br><span class="line">lambda.Start(handle)</span><br></pre></td></tr></table></figure><p>こうすると、Lambdaの実行時間を削減につながる≒課金額を減らせる可能性があるため、初期処理に寄せられるものはドンドン寄せたほうが良い使い方になります。</p><h2 id="Lambdaの関数タイプ"><a href="#Lambdaの関数タイプ" class="headerlink" title="Lambdaの関数タイプ"></a>Lambdaの関数タイプ</h2><p>Lambdaの関数として以下の8パターンが利用できます。<code>TIn</code>, <code>TOut</code> はencoding/json 標準ライブラリと互換性のある（≒Marshal, Unmarshalができるの意だと思います）必要があります。</p><ol><li><code>func ()</code></li><li><code>func () error</code></li><li><code>func (TIn), error</code></li><li><code>func () (TOut, error)</code></li><li><code>func (context.Context) error</code></li><li><code>func (context.Context, TIn) error</code></li><li><code>func (context.Context) (TOut, error)</code></li><li><code>func (context.Context, TIn) (TOut, error)</code></li></ol><p>このとき、ApiGatewayEventであれば <code>TIn</code>や<code>TOut</code> があるのもわかりますが、KinesisEventの場合は<code>TIn</code>は意味がわかるものの、戻り値 <code>TOut</code>は何にも使われないはずなので、使ったらどうなるのか気になりました。仮にKinesisEventで<code>TOut</code> を用いるとエラーになるのでしょうか？</p><p>結論⇨ KinesisEventでも <code>TOut</code>はあってもなくても良い。</p><p>4の形式でLambdaを作成し起動してみます。<code>TOut</code>は何でも良いということで、適当にResponseというStructを作成します。main関数では引数なし・Responseの固定値を返します。</p><figure class="highlight go"><figcaption><span>4の形式のLambda</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Response <span class="keyword">struct</span> &#123;</span><br><span class="line">Payload <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(Response, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> Response&#123;Payload: <span class="string">"future"</span>&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同じようにKinesisトリガーにし実行すると以下のようなログが出力されました。<br>特にResponseの内容は出力されませんし、エラーにもなっていませんでした。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2020-03-26T03:52:06.697+09:00 START RequestId: 27bc00f8-d7de-48d1-8c05-1f69c2c3ab07 Version: $LATEST</span><br><span class="line">2020-03-26T03:52:06.698+09:00 END RequestId: 27bc00f8-d7de-48d1-8c05-1f69c2c3ab07</span><br><span class="line">2020-03-26T03:52:06.698+09:00 REPORT RequestId: 27bc00f8-d7de-48d1-8c05-1f69c2c3ab07 Duration: 0.77 ms Billed Duration: 100 ms Memory Size: 3008 MB Max Memory U</span><br></pre></td></tr></table></figure><p>ということで、Lambdaの起動トリガーとなるEvent種別とマッチしないような関数シグネチャを使っても問題ないということがわかりました。Responseが後続連携のSNSなどにうまく渡せると面白いかなと思いましたが、それは未検証です（パット見、Responseをどう取得できるか分からなかったため）</p><p>個人的な考えですが、LambdaのHandler関数をテストする時に、戻り値があると色々と検証が捗るため、Kinesis Triggerであっても戻り値 <code>TOut</code>は指定するようにしています。</p><h2 id="errorとLogging"><a href="#errorとLogging" class="headerlink" title="errorとLogging"></a>errorとLogging</h2><p>これはLambdaに限らないかもですが、LambdaのHandler関数の中で、以下のようにログ出力とerror をreturnするコードがあり、重複してて嫌だなと思いつつ、気持ちを込めてダブルメンテしていました。そのまま errorをreturnするだけでLambdaサービス側でerrorの内容を出力してくれるのですが、 <code>ERROR</code> といった文字列などカスタマイズしたい場合は2度手間せざるおえなかったです。</p><p>↓の例では一箇所ですが、こういったハンドリングが複数あると見落としも怖いと思うこともありました。</p><figure class="highlight go"><figcaption><span>よくあるerrorのreturnとlog出力</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := Hoge(ctx, hogeInput); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Error().Msgf(<span class="string">"put dynamoDB: %v %+v"</span>, err, models)</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"put dynamoDB: %w %+v"</span>, err, models)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これの対応としてhttpのMiddlewareのような関数を宣言すると良いかもしれません。<br><code>func (context.Context, TIn) error</code> パターンで作ってみています。</p><figure class="highlight go"><figcaption><span>Middlewareライクな関数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> lambdaHandlerFunc <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, ke events.KinesisEvent)</span> <span class="title">error</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">errLog</span><span class="params">(fn lambdaHandlerFunc)</span> <span class="title">lambdaHandlerFunc</span></span>  &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, ke events.KinesisEvent)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := fn(ctx, ke); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// ログなど横断的な処理を加える</span></span><br><span class="line">log.Error().Msgf(<span class="string">"lambda err: %v"</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のようなerrLogという関数を、ロジックが実装された <code>handle</code> をWrapすると事前・事後の処理をうまくWrapすることができます。</p><figure class="highlight go"><figcaption><span>呼び出す場合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lambda.Start(errLog(handle))</span><br></pre></td></tr></table></figure><p>この辺はガンバりすぎると一種のアプリケーションフレームワークのように進化を遂げて、いろいろな功罪を生みそうですが、機能をシンプルに保てる体制の見通しがあれば導入しても良いかなと最近考えています。</p><h2 id="return-errorした場合の-errorString-null対応"><a href="#return-errorした場合の-errorString-null対応" class="headerlink" title="return errorした場合の errorString null対応"></a>return errorした場合の errorString null対応</h2><p>以下のように任意のerrorをreturnしたときのCloudWatchLogs側のログ出力ですが…</p><figure class="highlight go"><figcaption><span>エラー出力時</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">"BAD REQUEST"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下のように、 <code>BAD REQUEST</code> の後に <code>errorString null</code> というのが出力されます。</p><p>問題ないといえば無いですが、 <code>null</code> といわれると少し気持ち悪い気持ちがありました。</p><figure class="highlight plain"><figcaption><span>Lambdaの実行ログ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-03-26T10:02:58.888+09:00 START RequestId: 8f41435e-5caa-4feb-a1ea-d1f1d6d56811 Version: $LATEST</span><br><span class="line">2020-03-26T10:02:58.888+09:00 BAD REQUEST: errorString null</span><br><span class="line">2020-03-26T10:02:58.889+09:00 END RequestId: 8f41435e-5caa-4feb-a1ea-d1f1d6d56811</span><br><span class="line">2020-03-26T10:02:58.889+09:00 REPORT RequestId: 8f41435e-5caa-4feb-a1ea-d1f1d6d56811 Duration: 1.03 ms Billed Duration: 100 ms Memory Size: 1024 MB Max Memory ...</span><br></pre></td></tr></table></figure><p>この <code>null</code> の部分ですが、ドキュメントで探せなかったですが、内部のErrorを示すStructが持つフィールドを見たところ正体はStackTraceのようです。</p><p>設定の方法は、<a href="https://github.com/aws/aws-lambda-go/blob/master/lambda/function.go#L33" target="_blank" rel="noopener">コードを読んだ限り</a>通常の error を returnする形では設定できないようで（間違えていればご指摘ください）、panicを発生させると設定されるようです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"BAD_REQUEST with panic"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のLambdaを実行すると、以下のようなログが出力されます</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2020-03-26T10:15:05.546+09:00 START RequestId: 8f41435e-5caa-4feb-a1ea-d1f1d6d56811 Version: $LATEST</span><br><span class="line">2020-03-26T10:15:05.547+09:00 BAD_REQUEST with panic: string</span><br><span class="line">[</span><br><span class="line">   &#123;&quot;path&quot;: &quot;github.com/aws/aws-lambda-go@v1.15.0/lambda/function.go&quot;, &quot;line&quot;: 36, label&quot;: &quot;(*Function).Invoke.func1&quot;&#125;,</span><br><span class="line">   &#123;&quot;path&quot;: &quot;runtime/panic.go&quot;, &quot;line&quot;: 679,  &quot;label&quot;: &quot;gopanic&quot;&#125;,</span><br><span class="line">   &#123;&quot;path&quot;: &quot;MyApplication/lambda.go&quot;, &quot;line&quot;: 10, &quot;label&quot;: &quot;main.func1&quot;&#125;,</span><br><span class="line">   // 省略</span><br><span class="line">]</span><br><span class="line">2020-03-26T10:15:05.583+09:00 END RequestId: 8f41435e-5caa-4feb-a1ea-d1f1d6d56811</span><br><span class="line">2020-03-26T10:15:05.583+09:00 REPORT RequestId: 8f41435e-5caa-4feb-a1ea-d1f1d6d56811Duration: 36.24 msBilled Duration: 100 msMemory Size: 1024 MBMax Memory Used: 34 MBInit Duration: 66.10 ms</span><br><span class="line">2020-03-26T10:15:05.583+09:00 BAD_REQUEST with panic string</span><br></pre></td></tr></table></figure><p>panicということで予期せぬエラーの場合にはStackTraceを出してくれるのは助かりますね。</p><p>アプリケーションとしてpanicでエラーハンドリングすると、少々Lambda関数のUnitTestが難しくなりそうなので、なかなか導入する気にはなれないですが、どうしてもStackTraceを出したい場合などは検討してみても良いかもしれません。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>LambdaのGoから見た論理コア数⇨2固定</li><li>Lambdaのコードは初期処理に寄せる</li><li>関数タイプは開発/テスト観点など好きなものを使って良い</li><li>Lambda関数のパターンは決まっているのでmiddlewareを用意しても良いかも</li><li><code>errorString null</code>の<code>null</code>はStackTrace項目で、通常は <code>null</code> が入るで問題なし</li></ul><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><p>Goに関連した記事です。</p><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG/DXユニットの真野です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future-architec
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
      <category term="Serverless連載" scheme="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Go1.14のRelease Partyに登壇しました🎉</title>
    <link href="https://future-architect.github.io/articles/20200325/"/>
    <id>https://future-architect.github.io/articles/20200325/</id>
    <published>2020-03-25T05:44:32.000Z</published>
    <updated>2020-03-25T05:59:52.800Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG の辻です。先日開催された Go 1.14 Release Party に TIG DX ユニットから渋川、辻が登壇しました。今回の Release Party は COVID-19 により初のオンラインでの開催になりました。見逃した方は youtube にアップロードされている<a href="https://www.youtube.com/watch?v=IWyDR08pUU4&feature=youtu.be" target="_blank" rel="noopener">動画</a>を見てみてください！</p><p>Go 1.14 のリリースノートは以下です。</p><ul><li><a href="https://golang.org/doc/go1.14" target="_blank" rel="noopener">Go 1.14 Release Notes</a></li></ul><h2 id="発表1-hash-maphash-コードリーディング"><a href="#発表1-hash-maphash-コードリーディング" class="headerlink" title="発表1: hash/maphash コードリーディング"></a>発表1: hash/maphash コードリーディング</h2><img src="/images/20200325/3.png" class="img-middle-size"><img src="/images/20200325/4.png" class="img-middle-size"><p>辻さんのコメントにもある、社内のコードリーディングで紹介したGo 1.14で追加されたhash/maphashパッケージについて紹介しました。今回追加された唯一の新パッケージではあるものの、Hashインタフェースを使った使い方もすでにあるものですし、機能もGo内部で文字列やバイト列をハッシュのキーに使うときに使われていたアルゴリズムを公開したものなので、特に真新しさはありません。なので、よくある新パッケージの機能紹介というよりも、コードを読んでいて面白いと思ったところを紹介する、という発表にしました。</p><br><p>⏩hash/maphashコードリーディング<br><a href="https://qiita.com/shibukawa/items/d483889731c34d3e5faa" target="_blank" rel="noopener">https://qiita.com/shibukawa/items/d483889731c34d3e5faa</a></p><br><br><p>もろもろ仕事の締め切りが忙しかったとかもあって、Qiitaのスライドでさっとまとめて資料を作りました。流れとしては、まずテストコードを見てAPIや使われ方を見て、その後内部実装を見ていく、という手順で説明しました。</p><h2 id="発表2-context-の話"><a href="#発表2-context-の話" class="headerlink" title="発表2: context の話"></a>発表2: context の話</h2><img src="/images/20200325/1.png" class="img-middle-size"><img src="/images/20200325/2.png" class="img-middle-size"><p>辻からは Go1.14 の context についてお話しました。リリースノートには記載されていないのですが、Go1.14 の context パッケージは内部的な挙動が改善されています。</p><script async class="speakerdeck-embed" data-id="25137172b466435089aaa8554307a9a0" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>裏話なのですが、たまたま Go1.14 の context に関する興味深いツイートを見かけ、調べた内容を Qiita の<a href="https://qiita.com/tutuz/items/963a6118cec63a4cd2f3" target="_blank" rel="noopener">Go1.14のcontextは何が変わるのか</a> という記事にしたところ、Release Party の運営チームから登壇依頼をいただきました。ありがとうございます！！(Go に限らず)技術的な改善や拡張があったときに、そもそもの問題の前提や背景を理解し、改善方針の議論を確認することで、新しい技術をより深く理解できると考えています。</p><h2 id="質疑応答"><a href="#質疑応答" class="headerlink" title="質疑応答"></a>質疑応答</h2><p>オンライン上の開催もあって、質疑応答はツイッター上で気になることをツイートし、それに答えていく形式で行われました。辻への質問は Context は社内の Go のコードリーディング会でとりあげていたのもあり、コードリーディング会の取り組みに関する質問をいただきました。オンライン上でも回答したのですが、補足として <a href="https://future-architect.github.io/articles/20200310/">Goの標準ライブラリのコードリーディングのすすめ</a> という記事も書きました。合わせて見てみてください。</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><p>Goに関連した記事です。</p><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIG の辻です。先日開催された Go 1.14 Release Party に TIG DX ユニットから渋川
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Serverless連載1: SAMを使ったローカルテスト（Go編）</title>
    <link href="https://future-architect.github.io/articles/20200323/"/>
    <id>https://future-architect.github.io/articles/20200323/</id>
    <published>2020-03-23T00:56:50.000Z</published>
    <updated>2020-03-26T05:29:00.027Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載</a> の第1弾です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG/DXチームの栗田です。AWSのLambdaに代表されるサーバレスアプリは実行時のみ稼働するため、サーバー稼働によるあらゆるコストから解放され、システム開発の工数を減らすことができます。例えば何らかのAPIを提供する場合でも、API GatewayとLambdaを組み合わせることで提供可能です。</p><p>一方で、サーバーレスアプリを開発するとき、ローカルでのテストが課題となります。例えばLambda + DynamoDBであれば、<a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">先の連載</a>の手法を参考に、テストコードを書くことで解決します。一方で…</p><ul><li>API GatewayからLambdaの着火もテストした上でDynamoDBまで書き込ませたい</li><li>なんならAPI Gaweway自体もLambdaで叩きたい</li></ul><p>となると、少々ハードルがあがります。この問題を解決してくれるのが、<a href="https://docs.aws.amazon.com/ja_jp/serverless-application-model/latest/developerguide/what-is-sam.html" target="_blank" rel="noopener">AWS Serverless Application Model(AWS SAM)</a>です。SAMはローカルにLambda実行用のdockerを立ち上げ、<code>127.0.0.1:3000</code>を叩くと指定した実行ファイルをdocker上で動作させることができるツールです。今回はSAMを使って API Gateway + Lambda (Go) + DynamoDBのローカルテストをする手法を紹介します。</p><p>なお、今回ターゲットとする構成は、Lambda→AWS Gateway→Lambda→DynamoDBのような構成です。例えばKinesisやS3から非同期な入力をトリガーにLambdaを着火し、特定のAPIを叩くようなケースです。便宜上、API Gatewayを叩くのをLambda A、API Gatewayから呼び出されるのをLambda Bとします。</p><img src="/images/20200323/photo_20200323_01.png" class="img-middle-size"><p>これをSAMとDynamoDB localを使ってテストしますが、想定する最終的なテスト環境としては以下のような形になります。青で示した<code>lambda_b.go</code>から127.0.0.1:8000を叩くのが、前述した<a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">先の連載</a>の手法です。<code>lambda_a.go</code>から<code>127.0.0.1:3000</code>を叩くのもGoから特定のAPIを叩く処理になるので、ここでは割愛します。つまり、今回記述するのは<code>127.0.0.1:3000</code>を叩いたらLambdaが着火し、DynamoDBに書き込むまでの部分になります。</p><img src="/images/20200323/photo_20200323_02.png" class="img-middle-size"><h1 id="環境とターゲット"><a href="#環境とターゲット" class="headerlink" title="環境とターゲット"></a>環境とターゲット</h1><p>今回は、下記の環境で動かしました。</p><table><thead><tr><th align="left">項目</th><th align="left">バージョン等</th><th align="left">入手方法</th></tr></thead><tbody><tr><td align="left">OS</td><td align="left">macOS Mojave 10.15.5</td><td align="left"></td></tr><tr><td align="left">awscli</td><td align="left">1.16.209</td><td align="left"><code>$ pip install awscli</code>。テストだけなら無くても動くかも。</td></tr><tr><td align="left">aws-sam-cli</td><td align="left">0.43.0</td><td align="left"><code>$ pip install aws-sam-cli</code></td></tr><tr><td align="left">Docker</td><td align="left">19.03.5 build 633a0ea</td><td align="left"></td></tr><tr><td align="left">go</td><td align="left">1.13.5</td><td align="left"></td></tr></tbody></table><p>WebAPIのリターンとして、下記を期待することにします。（ただし処理はベタ書きです）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"Company"</span>: <span class="string">"Future"</span>, <span class="attr">"Year"</span>: <span class="string">"1989"</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h1><h2 id="ディレクトリ構成"><a href="#ディレクトリ構成" class="headerlink" title="ディレクトリ構成"></a>ディレクトリ構成</h2><p>次のような構成とします。最初に宣言したとおり、今回APIを叩くLambdaについては触れません。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apigw  </span><br><span class="line">  ├─Makefile</span><br><span class="line">  ├─lambdab</span><br><span class="line">  |   ├─lambdab.go          <span class="comment"># APIから呼ばれるLambdaのコード</span></span><br><span class="line">  |   └─lambdab_test.go     <span class="comment"># テストコード</span></span><br><span class="line">  ├─template.yaml</span><br><span class="line">  └─testdata</span><br><span class="line">      └─db_table.json       <span class="comment"># DBテーブル作成用のコード</span></span><br></pre></td></tr></table></figure><h2 id="AWS-SAMプロジェクトの用意"><a href="#AWS-SAMプロジェクトの用意" class="headerlink" title="AWS SAMプロジェクトの用意"></a>AWS SAMプロジェクトの用意</h2><p>SAMのコマンドを使用して、Templatesを用意します。独自のテンプレートを用意してくることも可能ですが、今回は簡単かつシンプルにということでAWS Quick Start Templatesを使用します。<br>先の構成のディレクトリ内で、作業を進めます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ sam init --runtime go1.x --name apigw</span><br><span class="line">Which template <span class="built_in">source</span> would you like to use?</span><br><span class="line">        1 - AWS Quick Start Templates</span><br><span class="line">        2 - Custom Template Location</span><br><span class="line">Choice: 1</span><br><span class="line"></span><br><span class="line">Cloning app templates from https://github.com/awslabs/aws-sam-cli-app-templates.git</span><br><span class="line"></span><br><span class="line">-----------------------</span><br><span class="line">Generating application:</span><br><span class="line">-----------------------</span><br><span class="line">Name: apigw</span><br><span class="line">Runtime: go1.x</span><br><span class="line">Dependency Manager: mod</span><br><span class="line">Application Template: hello-world</span><br><span class="line">Output Directory: .</span><br><span class="line"></span><br><span class="line">Next steps can be found <span class="keyword">in</span> the README file at ./apigw/README.md</span><br><span class="line">$ ls</span><br><span class="line">apigw</span><br><span class="line">$ ls apigw/</span><br><span class="line">Makefile      README.md     hello-world   template.yaml</span><br><span class="line">$ ls apigw/hello-world/</span><br><span class="line">go.mod       main.go      main_test.go</span><br></pre></td></tr></table></figure><p>色々とできましたが、同梱されているREADME.mdに必要なことは記載してあります。そこから抜粋しますが、例えばファイル構造は以下のようになっています。</p><figure class="highlight bash"><figcaption><span>README.md（抜粋）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">（前略）</span><br><span class="line">.</span><br><span class="line">├── Makefile                    <span class="comment"># &lt;-- Make to automate build</span></span><br><span class="line">├── README.md                   <span class="comment"># &lt;-- This instructions file</span></span><br><span class="line">├── hello-world                 <span class="comment"># &lt;-- Source code for a lambda function</span></span><br><span class="line">│   ├── main.go                 <span class="comment"># &lt;-- Lambda function code</span></span><br><span class="line">│   └── main_test.go            <span class="comment"># &lt;-- Unit tests</span></span><br><span class="line">└── template.yaml</span><br><span class="line">（以下略）</span><br></pre></td></tr></table></figure><h2 id="Lambda（Go）の記述"><a href="#Lambda（Go）の記述" class="headerlink" title="Lambda（Go）の記述"></a>Lambda（Go）の記述</h2><p>最初に必要なパッケージをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go get -u github.com/aws/aws-lambda-go/lambda</span><br><span class="line">$ go get -u github.com/aws/aws-lambda-go/events</span><br></pre></td></tr></table></figure><p>続いて、必要なパス構成にしていきます。<br><code>sam init</code>で自動生成された実行ファイルは<code>hello-world</code>以下に入っています。<br>せっかくなので、これをオリジナルな名前にします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> apigw</span><br><span class="line">$ mv hello-world lambdab</span><br></pre></td></tr></table></figure><p>パス構造が変わったので、<code>Makefile</code>と<code>template.yaml</code>に変更を加えます。</p><figure class="highlight plain"><figcaption><span>Makefile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PHONY: deps clean build</span><br><span class="line"></span><br><span class="line">deps:</span><br><span class="line">go get -u ./...</span><br><span class="line"></span><br><span class="line">clean: </span><br><span class="line">rm -rf ./lambdab/lambdab # 変更</span><br><span class="line"></span><br><span class="line">build:</span><br><span class="line">GOOS=linux GOARCH=amd64 go build -o lambdab/lambdab ./lambdab/main.go # 変更</span><br></pre></td></tr></table></figure><p><code>template.yaml</code>への変更において、</p><figure class="highlight yaml"><figcaption><span>template.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">AWSTemplateFormatVersion:</span> <span class="string">'2010-09-09'</span></span><br><span class="line"><span class="attr">Transform:</span> <span class="attr">AWS::Serverless-2016-10-31</span></span><br><span class="line"><span class="attr">Description:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">  apigw</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  Sample SAM Template for apigw</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst</span></span><br><span class="line"><span class="string"></span><span class="attr">Globals:</span></span><br><span class="line"><span class="attr">  Function:</span></span><br><span class="line"><span class="attr">    Timeout:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Resources:</span></span><br><span class="line"><span class="attr">  HelloWorldFunction:</span></span><br><span class="line"><span class="attr">    Type:</span> <span class="attr">AWS::Serverless::Function</span> <span class="comment"># More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction</span></span><br><span class="line"><span class="attr">    Properties:</span></span><br><span class="line"><span class="attr">      CodeUri:</span> <span class="string">lambdab/</span> <span class="comment"># 変更</span></span><br><span class="line"><span class="attr">      Handler:</span> <span class="string">lambdab</span> <span class="comment"># 変更</span></span><br><span class="line"><span class="attr">      Runtime:</span> <span class="string">go1.x</span></span><br><span class="line"><span class="attr">      Tracing:</span> <span class="string">Active</span> <span class="comment"># https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html</span></span><br><span class="line"><span class="attr">      Events:</span></span><br><span class="line"><span class="attr">        CatchAll:</span></span><br><span class="line"><span class="attr">          Type:</span> <span class="string">Api</span> <span class="comment"># More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api</span></span><br><span class="line"><span class="attr">          Properties:</span></span><br><span class="line"><span class="attr">            Path:</span> <span class="string">/apigw</span> <span class="comment"># 変更</span></span><br><span class="line"><span class="attr">            Method:</span> <span class="string">GET</span></span><br><span class="line"><span class="attr">      Environment:</span> <span class="comment"># More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object</span></span><br><span class="line"><span class="attr">        Variables:</span></span><br><span class="line"><span class="attr">          PARAM1:</span> <span class="string">VALUE</span></span><br></pre></td></tr></table></figure><p><code>template.yaml</code>の内容について補足すると、これはCloudFormationの形式になっています。<br>このまま<code>sam</code>のみでdeployすることも可能ですが、今回はテストのみなので、注記がいれてある場所のみ変更しました。<br>この設定で <code>sam</code> を立ち上げると、 <code>http://127.0.0.1:3000/apigw</code> にGETすると、<code>./lambdab/lambdab</code> が実行されることを示しています。</p><p>それでは<code>main.go</code> に変更を加えます。今回は、 <code>events.APIGatewayProxyResponse</code> のBodyと、それに応じて少しだけコードをいじっただけでほぼほぼ自動生成されたものになります。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/events"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CompanyResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Company <span class="keyword">string</span> <span class="string">`json:"company"`</span></span><br><span class="line">Year    <span class="keyword">string</span> <span class="string">`json:"year"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(request events.APIGatewayProxyRequest)</span> <span class="params">(events.APIGatewayProxyResponse, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">response := CompanyResponse&#123;</span><br><span class="line">Company: <span class="string">"Future"</span>,</span><br><span class="line">Year:    <span class="string">"1989"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonBytes, _ := json.Marshal(response)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> events.APIGatewayProxyResponse&#123;</span><br><span class="line">Body:       <span class="keyword">string</span>(jsonBytes),</span><br><span class="line">StatusCode: <span class="number">200</span>,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="build"><a href="#build" class="headerlink" title="build"></a>build</h2><p>諸々設定ができたら、buildして準備は完了です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ make build</span><br><span class="line">GOOS=linux GOARCH=amd64 go build -o lambdab/lambdab ./lambdab/main.go <span class="comment"># 変更</span></span><br><span class="line">$ ls lambdab/</span><br><span class="line">go.mod       go.sum       lambdab      main.go      main_test.go</span><br></pre></td></tr></table></figure><h1 id="ローカルでAPIを動かしてテスト"><a href="#ローカルでAPIを動かしてテスト" class="headerlink" title="ローカルでAPIを動かしてテスト"></a>ローカルでAPIを動かしてテスト</h1><p>コマンドを叩けばOKです。動き出したAPI（今回の場合 <code>http://127.0.0.1:3000/apigw</code>）にアクセスすると、コンテナイメージが呼び出され、実行結果が帰ってきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ sam <span class="built_in">local</span> start-api</span><br><span class="line">Mounting HelloWorldFunction at http://127.0.0.1:3000/apigw [GET]</span><br><span class="line">You can now browse to the above endpoints to invoke your <span class="built_in">functions</span>. You <span class="keyword">do</span> not need to restart/reload SAM CLI <span class="keyword">while</span> working on your <span class="built_in">functions</span>, changes will be reflected instantly/automatically. You only need to restart SAM CLI <span class="keyword">if</span> you update your AWS SAM template</span><br><span class="line">2020-03-09 22:05:33  * Running on http://127.0.0.1:3000/ (Press CTRL+C to quit)</span><br><span class="line">Invoking lambdab (go1.x)</span><br><span class="line"></span><br><span class="line">Fetching lambci/lambda:go1.x Docker container image......</span><br><span class="line">Mounting /Users/kurita/[パス情報なので省略]/apigw/lambdab as /var/task:ro,delegated inside runtime container</span><br><span class="line">START RequestId: f2fd9e5a-f031-10c7-3340-25e3997c6dd1 Version: <span class="variable">$LATEST</span></span><br><span class="line">END RequestId: f2fd9e5a-f031-10c7-3340-25e3997c6dd1</span><br><span class="line">REPORT RequestId: f2fd9e5a-f031-10c7-3340-25e3997c6dd1  Init Duration: 131.05 ms        Duration: 4.07 ms       Billed Duration: 100 ms Memory Size: 128 MBMax Memory Used: 21 MB</span><br><span class="line">No Content-Type given. Defaulting to <span class="string">'application/json'</span>.</span><br><span class="line">2020-03-09 22:05:38 127.0.0.1 - - [09/Mar/2020 22:05:38] <span class="string">"GET /apigw HTTP/1.1"</span> 200 -</span><br><span class="line">2020-03-09 22:05:39 127.0.0.1 - - [09/Mar/2020 22:05:39] <span class="string">"GET /favicon.ico HTTP/1.1"</span> 403 -</span><br></pre></td></tr></table></figure><p>ブラウザでAPI叩くと、ちゃんと返ってきているのがわかります。</p><img src="/images/20200323/photo_20200323_03.png" class="img-middle-size"><p>AWS SAMを利用することで、ローカルでもAPI Gatewayを意識したLambda を動作させることができました。数が少ないなら一つずつ試しても良いですし、APIを適宜叩くツールを用意すれば、自動にテストを行うこともできます。</p><h1 id="DynamoDB-localとの連携"><a href="#DynamoDB-localとの連携" class="headerlink" title="DynamoDB localとの連携"></a>DynamoDB localとの連携</h1><p>続いて、SAM上で動かすLambdaからDynamoDB localにアクセスします。<br>注意事項として、DynamoDB localはdocker上で動くので、SAMとDynamoDB localを同じdocker-networkにする必要があります。</p><h2 id="DynamoDB-localの準備"><a href="#DynamoDB-localの準備" class="headerlink" title="DynamoDB localの準備"></a>DynamoDB localの準備</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AWS profile(初回のみ)</span></span><br><span class="line"><span class="comment"># localのDynamoDB</span></span><br><span class="line">$ aws configure <span class="built_in">set</span> aws_access_key_id dummy     --profile <span class="built_in">local</span></span><br><span class="line">$ aws configure <span class="built_in">set</span> aws_secret_access_key dummy --profile <span class="built_in">local</span></span><br><span class="line">$ aws configure <span class="built_in">set</span> region ap-northeast-1       --profile <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DynamoDBに必要なテーブル作成(初回のみ)</span></span><br><span class="line">$ docker network create lambda-local-test</span><br><span class="line">$ docker run -d --network lambda-local-test --name dynamoTest -p 8000:8000 amazon/dynamodb-local:1.12.0 -jar DynamoDBLocal.jar -sharedDb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止コマンド</span></span><br><span class="line"><span class="comment"># docker stop dynamoTest</span></span><br></pre></td></tr></table></figure><p>これでテスト用のdynamoDBができました。ここにテスト用のテーブルを切ります。テーブルは<code>aws-cli</code>を使います。</p><figure class="highlight json"><figcaption><span>testdata/db_local.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"TableName"</span>: <span class="string">"local_company_table"</span>,</span><br><span class="line">    <span class="attr">"KeySchema"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"AttributeName"</span>: <span class="string">"company"</span>,</span><br><span class="line">        <span class="attr">"KeyType"</span>: <span class="string">"HASH"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"AttributeName"</span>: <span class="string">"year"</span>,</span><br><span class="line">        <span class="attr">"KeyType"</span>: <span class="string">"RANGE"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"AttributeDefinitions"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"AttributeName"</span>: <span class="string">"company"</span>,</span><br><span class="line">        <span class="attr">"AttributeType"</span>: <span class="string">"S"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"AttributeName"</span>: <span class="string">"year"</span>,</span><br><span class="line">        <span class="attr">"AttributeType"</span>: <span class="string">"S"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"ProvisionedThroughput"</span>: &#123;</span><br><span class="line">      <span class="attr">"ReadCapacityUnits"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"WriteCapacityUnits"</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>テーブルを切ります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ aws dynamodb --profile local --endpoint-url http://localhost:8000 create-table --cli-input-json file://./testdata/db_local.json</span><br><span class="line">（出力略）</span><br></pre></td></tr></table></figure><h2 id="Goのコード修正"><a href="#Goのコード修正" class="headerlink" title="Goのコード修正"></a>Goのコード修正</h2><p>先程はAPIアクセスに対してレスポンスを返すだけでしたが、今度は同じ内容をDynamoDBに書き込むように修正します。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/events"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/session"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/service/dynamodb"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db *dynamodb.DynamoDB</span><br><span class="line"><span class="keyword">var</span> dbEndpoint = <span class="string">"http://dynamoTest:8000"</span></span><br><span class="line"><span class="keyword">var</span> region = <span class="string">"ap-northeast-1"</span></span><br><span class="line"><span class="keyword">var</span> testTable = <span class="string">"local_company_table"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CompanyResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Company <span class="keyword">string</span> <span class="string">`json:"company"`</span></span><br><span class="line">Year    <span class="keyword">string</span> <span class="string">`json:"year"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">write</span><span class="params">(ctx context.Context, tableName <span class="keyword">string</span>, v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">av, err := dynamodbattribute.MarshalMap(v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"dynamodb attribute marshalling map: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">i := &amp;dynamodb.PutItemInput&#123;</span><br><span class="line">Item:      av,</span><br><span class="line">TableName: aws.String(tableName),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err = db.PutItemWithContext(ctx, i); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"dynamodb put item: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(ctx context.Context, request events.APIGatewayProxyRequest)</span> <span class="params">(events.APIGatewayProxyResponse, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">sess := session.Must(session.NewSession(&amp;aws.Config&#123;</span><br><span class="line">Endpoint: aws.String(dbEndpoint),</span><br><span class="line">Region:   aws.String(region),</span><br><span class="line">&#125;))</span><br><span class="line">db = dynamodb.New(sess)</span><br><span class="line"></span><br><span class="line">response := CompanyResponse&#123;</span><br><span class="line">Company: <span class="string">"Future"</span>,</span><br><span class="line">Year:    <span class="string">"1989"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonBytes, _ := json.Marshal(response)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := write(ctx, testTable, response); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(<span class="string">"%s"</span>, err)</span><br><span class="line"><span class="keyword">return</span> events.APIGatewayProxyResponse&#123;</span><br><span class="line">Body:       <span class="keyword">string</span>(jsonBytes),</span><br><span class="line">StatusCode: <span class="number">500</span>,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> events.APIGatewayProxyResponse&#123;</span><br><span class="line">Body:       <span class="keyword">string</span>(jsonBytes),</span><br><span class="line">StatusCode: <span class="number">200</span>,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SAMによるテスト"><a href="#SAMによるテスト" class="headerlink" title="SAMによるテスト"></a>SAMによるテスト</h2><p>SAMを実行するとき、docker-networkを指定します。これで、SAMで起動したdockerとDynamoDB localが同じネットワーク上に入ります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make build</span><br><span class="line">$ sam <span class="built_in">local</span> start-api --docker-network lambda-local-test</span><br></pre></td></tr></table></figure><p>もう一つターミナルを立ち上げてコマンドを打ちます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先程作ったテーブルは未だ空です。これからここに書き込みます。</span></span><br><span class="line">$ aws dynamodb scan --table-name local_company_table --profile <span class="built_in">local</span> --endpoint-url http://localhost:8000</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"Items"</span>: [],</span><br><span class="line">    <span class="string">"Count"</span>: 0,</span><br><span class="line">    <span class="string">"ScannedCount"</span>: 0,</span><br><span class="line">    <span class="string">"ConsumedCapacity"</span>: null</span><br><span class="line">&#125;</span><br><span class="line">$ curl localhost:3000/apigw</span><br><span class="line">&#123;<span class="string">"Company"</span>:<span class="string">"Future"</span>,<span class="string">"Year"</span>:<span class="string">"1989"</span>&#125;</span><br><span class="line"><span class="comment"># 作ったテーブルに必要な項目が入っている</span></span><br><span class="line">$ aws dynamodb scan --table-name local_company_table --profile <span class="built_in">local</span> --endpoint-url http://localhost:8000</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"Items"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"year"</span>: &#123;</span><br><span class="line">                <span class="string">"S"</span>: <span class="string">"1989"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"company"</span>: &#123;</span><br><span class="line">                <span class="string">"S"</span>: <span class="string">"Future"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"Count"</span>: 1,</span><br><span class="line">    <span class="string">"ScannedCount"</span>: 1,</span><br><span class="line">    <span class="string">"ConsumedCapacity"</span>: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>確かに、テーブルの中に値が格納されました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回SAMを使ったテストができました。あとは必要に応じてAPIを叩くLambdaを作ったり、あるいはAPI Gatewayから呼び出されるLambdaを適宜増やしていくことで、目的とするシステムの開発が行なえます。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://dev.classmethod.jp/cloud/aws/aws-lambda-supports-go/" target="_blank" rel="noopener">AWS Lambda で Go が使えるようになったので試してみた</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/go-programming-model-handler-types.html" target="_blank" rel="noopener">Go の AWS Lambda 関数ハンドラー</a></li><li><a href="https://qiita.com/shunp/items/52ee20278e02e29ef3e8" target="_blank" rel="noopener">Go+Lambdaで最速サーバーレスチュートリアル</a> </li></ul><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><p>Goに関連した連載企画があります。</p><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;/tags/Serverless%E9%80%A3%E8%BC%89/&quot;&gt;サーバレス連載&lt;/a&gt; の第1弾です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;は
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
      <category term="Serverless連載" scheme="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/"/>
    
      <category term="DynamoDB" scheme="https://future-architect.github.io/tags/DynamoDB/"/>
    
      <category term="Lambda" scheme="https://future-architect.github.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>今あえてTypeScriptのビルド＆バンドルツールを探してみる</title>
    <link href="https://future-architect.github.io/articles/20200319/"/>
    <id>https://future-architect.github.io/articles/20200319/</id>
    <published>2020-03-19T01:12:40.000Z</published>
    <updated>2020-03-19T01:18:52.766Z</updated>
    
    <content type="html"><![CDATA[<p>ちょっとしたフロントエンドの開発で、TypeScriptに最初から対応していて、簡単に使えるものは何かないかな、と調べてみたメモです。React/Vue/Angularの場合はそれぞれの初期化コマンドで何から何まで用意してくれます。Next.js、Nuxt.js、Gatsbyなども、これらのビルドのステップを簡略化するコマンドを提供しています。基本的にこれらのウェブフロントエンドを開発するときには、小規模・中規模ぐらいならあんまり気にしなくておまかせでもいいと思います。</p><p>今回は、それらのフレームワーク固有のビルドツールとは別に環境を作りたい人で、TypeScriptの環境が欲しい、ウェブの開発がしたい、という前提でいろいろ探してみました。</p><p>今回試してみたのは次の4つです。</p><ul><li>Parcel</li><li>Fusebox</li><li>ncc</li><li>Rome.js</li></ul><h1 id="JavaScriptのビルドツールとは"><a href="#JavaScriptのビルドツールとは" class="headerlink" title="JavaScriptのビルドツールとは"></a>JavaScriptのビルドツールとは</h1><p>JavaScriptでビルドといっても、いろいろなステップがあります。</p><ol><li>TypeScriptやBabelを使って、ターゲットとなるバージョンのJavaScriptに変換</li><li>SCSSとかPostCSSを使ってブラウザにない機能を使って書かれたCSSを素のCSSに変換</li><li>webpackなどを使って、1つのJavaScriptファイル、もしくは遅延ロードをするJSファイル群を生成</li></ol><p>まあ実際にはこんなに綺麗にステップが分かれることはなくて、webpackがimport文を追跡しつつファイルを探し、.tsを見つけてはTypeScriptで処理して（コンパイル）、コード中にSCSSを見つけてはSCSSの処理系に投げて、一つのファイルにまとめる（バンドル）・・みたいな工程を行ったりきたりしながらビルドします。以前は、これにJake、Gulp、Gruntなどのタスクランナーも組み合わせてやってましたが、今はwebpack単体にts-loaderなどを組み合わせる感じで一通りできます。webpackが<a href="https://www.jetbrains.com/lp/devecosystem-2019/javascript/" target="_blank" rel="noopener">シェア80%</a>で一強ですね。</p><p>なお、これにファイルの変更検知を行って、変更時に変更部分だけをビルド（ウォッチ）、読み込んでいるブラウザに変更したことを伝えてリロードを行わせる開発サーバーとよぶサーバーも加えると、世間で「JavaScriptのビルドツール」と呼ぶ機能はだいたい網羅されるんじゃないですかね。</p><h1 id="Parcel"><a href="#Parcel" class="headerlink" title="Parcel"></a>Parcel</h1><p><a href="https://parceljs.org/" target="_blank" rel="noopener">Parcel</a>はゼロコンフィグを目指したバンドラーです。TypeScriptも最初からサポートしています。エントリーポイントを指定するだけでビルドしてくれます。tsconfig.jsonがあればそれを拾って解釈してくれますし、なくても動きます。単にtsファイルをエントリーポイントとしてわたしてあげれば、そのままTypeScriptの処理系をインストールしつつビルドしてくれます。最初のビルドも高速ですし、キャッシュもしてくれて2回目以降も速いです。TreeShakingとかの生成されたファイルの最適化機構も入っているとのこと。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D parcel-bundler</span><br><span class="line">$ npx parcel build src/index.ts</span><br></pre></td></tr></table></figure><p>エントリーポイントにHTMLファイルを指定できて、フロントエンド開発の開発サーバーも付いている。これは無敵！と思いきや・・・わざと型を間違ったTypeScriptのファイルを入力しても何もエラーも出ません。</p><p>これは現在は意図した動作らしく、Parcelは最速でバンドルするだけを目指しており、設計方針としてエラーは出さないとのこと。もしかしたら、TypeScriptで開発し、Visual Studio CodeとかWebStorm上でエラーが出てくるなら問題ないとも言えるかもしれません。とはいえ、せっかくのチェック機構をまったく無視するのはTypeScriptを使うメリットがだいぶ削られてしまいます。また、別途CIなりを整備するのもちょっと手間ですよね。まあ、TypeScriptとかが流行る前は型チェックなんてなかったわけで、ちょっと昔の感覚を思い出しました。</p><p><a href="https://github.com/parcel-bundler/parcel/issues/1378" target="_blank" rel="noopener">Parcel 2系になったらTypeScriptのエラーを報告しない問題に対応するよ</a>、と昨年のコメントにはあるものの、次の<a href="https://github.com/parcel-bundler/parcel/projects/5" target="_blank" rel="noopener">2.0のリリースまでのハードルはかなり高そう</a>。2.0が出てさえくれれば設定のかんたんさとかは抜群なので、期待しています。</p><h1 id="FuseBox"><a href="#FuseBox" class="headerlink" title="FuseBox"></a>FuseBox</h1><p><a href="https://fuse-box.org/" target="_blank" rel="noopener">FuseBox</a>はそこそこ歴史はあるツールですが、ここで紹介する他のツールと違い、CLIを提供しません。JavaScriptかTypeScriptでビルドの設定ファイルを作ります。現状は3系ですが、これも新バージョンの4系が開発中で、<code>@next</code>をつけてインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D fuse-box@next</span><br></pre></td></tr></table></figure><p>4系の最小は以下の通りです。これはデバッグビルドのための開発サーバーを立ち上げて開発支援をする、という設定ファイルです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; fusebox &#125; from &apos;fuse-box&apos;;</span><br><span class="line">fusebox(&#123;</span><br><span class="line">  target: &apos;browser&apos;,</span><br><span class="line">  entry: &apos;src/index.tsx&apos;,</span><br><span class="line">  webIndex: &#123;</span><br><span class="line">    template: &apos;src/index.html&apos;,</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: true,</span><br><span class="line">&#125;).runDev();</span><br></pre></td></tr></table></figure><p>テンプレートのところのHTMLはこんな感じで、CSSとJavaScriptの成果物を$なプレースホルダーに埋め込むようになっています。　</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    $css</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    $bundles</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>とはいっても、デバッグ実行だけがしたいわけじゃなくて、productionビルドもしたいわけで、そうなるとたくさん書かないといけない。一応、<a href="https://github.com/fuse-box/react-example/blob/master/fuse.ts" target="_blank" rel="noopener">フルセットのサンプルとして以下のようなコード</a>が提示されています（今回はReactを作りたいわけではないので.tsxは.tsに書き換えました）。ここまで書かないといけないのであれば、CLIツールも一緒に提供してほしい気が・・・</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fusebox, sparky &#125; <span class="keyword">from</span> <span class="string">"fuse-box"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">  runServer;</span><br><span class="line">  getConfig = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">    fusebox(&#123;</span><br><span class="line">      target: <span class="string">"browser"</span>,</span><br><span class="line">      entry: <span class="string">"src/index.ts"</span>,</span><br><span class="line">      webIndex: &#123;</span><br><span class="line">        template: <span class="string">"src/index.html"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      cache : <span class="literal">true</span>,</span><br><span class="line">      devServer: <span class="keyword">this</span>.runServer</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; task &#125; = sparky&lt;Context&gt;(Context);</span><br><span class="line"></span><br><span class="line">task(<span class="string">"default"</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.runServer = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">const</span> fuse = ctx.getConfig();</span><br><span class="line">  <span class="keyword">await</span> fuse.runDev();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">task(<span class="string">"preview"</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.runServer = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">const</span> fuse = ctx.getConfig();</span><br><span class="line">  <span class="keyword">await</span> fuse.runProd(&#123; <span class="attr">uglify</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">task(<span class="string">"dist"</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.runServer = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">const</span> fuse = ctx.getConfig();</span><br><span class="line">  <span class="keyword">await</span> fuse.runProd(&#123; <span class="attr">uglify</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ビルドは高速で快適です。tsconfig.jsonがなくても実行できます。なお、Node.js 10.xや11.xのバージョンではまだexperimentalなworker_threadパッケージを使っているので、12以降を使うか、<code>--experimental-worker</code>オプションが必要です。開発サーバーもあり、HMRもできて、ウェブフロントエンド開発でTypeScriptでやりたい人には良いですね。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">% npm start </span><br><span class="line"></span><br><span class="line">&gt; fuse-box-test@1.0.0 start /Users/shibukawa/fuse-box-test</span><br><span class="line">&gt; ts-node -T fuse</span><br><span class="line"></span><br><span class="line">  [ default ] Starting</span><br><span class="line"></span><br><span class="line">  ⚙  FuseBox 4.0.0-next.411</span><br><span class="line">     Mode: development</span><br><span class="line">     Entry: /Users/shibukawa/fuse-box-test/src/index.ts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   SUCCESS   Completed without build issues <span class="keyword">in</span> 128ms</span><br><span class="line"></span><br><span class="line">  [ default ] Completed <span class="keyword">in</span> 138ms</span><br><span class="line">  development Development server is running at http://localhost:4444</span><br></pre></td></tr></table></figure><h1 id="ncc"><a href="#ncc" class="headerlink" title="ncc"></a>ncc</h1><p>npmにアップロードするコードをシンプルにする、超快適に開発する、というのを目指して作られているのが<a href="https://www.npmjs.com/package/@zeit/ncc" target="_blank" rel="noopener">ncc</a>です。ある意味browserifyの後継な感じを受けます。簡単。ひたすら簡単。Next.jsで有名なZeitが開発しています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D @zeit/ncc</span><br></pre></td></tr></table></figure><p>npmのサイズを小さくするという目標を体現しているツールで、それ自身もTypeScript内臓だけど、インストールは一瞬で終わります。他への依存もなく、パッケージがとても小さい。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ du -h</span><br><span class="line">9.8M./node_modules/@zeit</span><br></pre></td></tr></table></figure><p>コマンド体系はGoを目指していて、ncc build [script]でビルドができます。ncc run [script]で実行ができます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% npx ncc run -q test.ts</span><br><span class="line">ncc: Using typescript@3.7.5 (ncc built-in)</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>ts-nodeは実行にtypescriptパッケージが必要で、ts-nodeとtypescriptをインストールするとそれだけで52MBぐらいになってしまうので、ncc runをts-nodeがわりにするのも良さそうです。tsconfig.jsonは必要です。</p><p>コマンドは基本的にbuildとrunだけなので使い方は迷うことはないと思います。<code>--watch</code>で監視しつつビルドしたり、<code>--minify</code>で小さくしたり。</p><p>一方、ウェブフロントエンドの開発を手助けしてくれる開発サーバーはありません。ExpressとかでAPIサーバーを実装するには良さそうです。</p><h1 id="Rome-js"><a href="#Rome-js" class="headerlink" title="Rome.js"></a>Rome.js</h1><ul><li><a href="https://romejs.dev/" target="_blank" rel="noopener">https://romejs.dev/</a></li></ul><p>こちらは超新進気鋭のビルドツールです。日本Node.jsユーザグループの会長に「かいちょー、何かJSのバンドラー兼ビルドサーバーまわりで、なんか新しげな良いのないですか」と聞いて教えてもらいました。</p><p>Babelの作者とかが関わっているツールです。コンパイラ、Linter、フォーマッター、テスト、バンドラーなどを全部まとめて持っていて、外部依存がないのがウリとのこと。なお、ウェブサイトはありますが、それよりも<a href="https://github.com/facebookexperimental/rome" target="_blank" rel="noopener">GitHubのREADME</a>の方がいろいろプロジェクトの背景等が詳しく書かれていたりします（実行の仕方の説明はREADMEは古くて動かないですが）。</p><p>npmにも上がっていないので、git cloneするところから。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --depth 1 https://github.com/facebookexperimental/rome</span><br><span class="line">$ <span class="built_in">pushd</span> rome</span><br><span class="line">$ ./scripts/build-release dist</span><br><span class="line">$ <span class="built_in">popd</span></span><br><span class="line">$ <span class="built_in">cd</span> rome-test</span><br><span class="line">$ npm install -D ../rome/dist</span><br></pre></td></tr></table></figure><p>このヘルプメッセージから溢れ出るexperimental感。残念ながら、開発サーバーとかはないようです。Facebookなので、ウェブフロントエンドだけではなくて、React Nativeとかもターゲットに考えているのかもしれないし、そこのあたりはよくわかりません。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">% npx rome --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"> Usage ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line"></span><br><span class="line">  $ rome [<span class="built_in">command</span>] [flags]</span><br><span class="line"></span><br><span class="line"> Global Flags ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line"></span><br><span class="line">  --benchmark                   no description found</span><br><span class="line">  --benchmark-iterations &lt;num&gt;  no description found</span><br><span class="line">  --collect-markers             no description found</span><br><span class="line">  --cwd &lt;input&gt;                 no description found</span><br><span class="line">  --fieri                       no description found</span><br><span class="line">  --focus &lt;input&gt;               no description found</span><br><span class="line">  --grep &lt;input&gt;                no description found</span><br><span class="line">  --<span class="built_in">help</span>                        show this <span class="built_in">help</span> screen</span><br><span class="line">  --inverse-grep                no description found</span><br><span class="line">  --<span class="built_in">log</span>-path &lt;input&gt;            no description found</span><br><span class="line">  --logs                        no description found</span><br><span class="line">  --<span class="built_in">log</span>-workers                 no description found</span><br><span class="line">  --markers-path &lt;input&gt;        no description found</span><br><span class="line">  --max-diagnostics &lt;num&gt;       no description found</span><br><span class="line">  --no-profile-workers          no description found</span><br><span class="line">  --no-show-all-diagnostics     no description found</span><br><span class="line">  --profile                     no description found</span><br><span class="line">  --profile-path &lt;input&gt;        no description found</span><br><span class="line">  --profile-sampling &lt;num&gt;      no description found</span><br><span class="line">  --profile-timeout &lt;num&gt;       no description found</span><br><span class="line">  --rage                        no description found</span><br><span class="line">  --rage-path &lt;input&gt;           no description found</span><br><span class="line">  --resolver-mocks              no description found</span><br><span class="line">  --resolver-scale &lt;num&gt;        no description found</span><br><span class="line">  --silent                      no description found</span><br><span class="line">  --temporary-daemon            no description found</span><br><span class="line">  --verbose                     no description found</span><br><span class="line">  --verbose-diagnostics         no description found</span><br><span class="line">  --watch                       no description found</span><br><span class="line"></span><br><span class="line"> Commands ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line"></span><br><span class="line">  Code Quality Commands</span><br><span class="line">  - ci run lint and tests</span><br><span class="line">  - lint run lint against a <span class="built_in">set</span> of files</span><br><span class="line">  - <span class="built_in">test</span> run tests</span><br><span class="line"></span><br><span class="line">  Internal Commands</span><br><span class="line">  - evict evict a file from the memory cache</span><br><span class="line">  - format TODO</span><br><span class="line">  - logs TODO</span><br><span class="line">  - rage TODO</span><br><span class="line"></span><br><span class="line">  Process Management Commands</span><br><span class="line">  - develop TODO</span><br><span class="line">  - restart restart daemon</span><br><span class="line">  - start start daemon (<span class="keyword">if</span> none running)</span><br><span class="line">  - status get the current daemon status</span><br><span class="line">  - stop stop a running daemon <span class="keyword">if</span> one exists</span><br><span class="line"></span><br><span class="line">  Project Management Commands</span><br><span class="line">  - config Modify a project config</span><br><span class="line">  - init create a project config</span><br><span class="line">  - publish TODO</span><br><span class="line">  - run TODO</span><br><span class="line"></span><br><span class="line">  Source Code Commands</span><br><span class="line">  - analyzeDependencies analyze and dump the dependencies of a file</span><br><span class="line">  - bundle build a standalone js bundle <span class="keyword">for</span> a package</span><br><span class="line">  - compile compile a single file</span><br><span class="line">  - parse parse a single file and dump its ast</span><br><span class="line">  - resolve resolve a file</span><br></pre></td></tr></table></figure><p><code>rome run test.ts</code>で実行はできましたが、残念ながら、現段階ではこれもParcel同様型情報を削ぎ落としているだけっぽくて、TypeScriptの型チェックのエラーは出ませんでした。READMEには”Don’t use loose types such as <code>any</code>“と強く書かれているので、型には厳しくなっていくと思われます。</p><p>基本方針の中には、修正方法を開発者に伝えないようなエラーメッセージはなくしていく、とか、「トークン」みたいなコンパイラ内部用語（ジャーゴン）が外に出ないようにして、コンパイラ視点ではなくて、プログラマー視点の用語の「文字」を出すようにしていく、みたいなことも書いてあるのは面白いなと思いました。単にTypeScriptとかに変換処理を投げるだけじゃなくて、その出力もラップして、開発者にとって使いやすい処理系を目指しています。なかなかに野心的なプロジェクトです。</p><p>・・・人に紹介するにはまだまだexperimentalすぎる感じはありますが。会長曰く「僕も試してないです。渋川さんなら一番早く書籍にしてくれるはず」とのこと。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>まだ正式リリースしていないバージョンも含めて、TypeScriptに最初から対応しているビルド・バンドルツールをいくつか紹介してきました。webpack一強だからこそ、そのwebpackにはない強みを出そうと活発に開発されています。このあたりのエコシステムの活発さはNode.js界隈はやはり強いですね。</p><p>まあ、お金をいただいてやる仕事はまだまだwebpackでいいかな・・・と思いつつ、手元でちょっと新しいライブラリを試行錯誤する時とかに、新しいものも使ってみようと思います。とりあえず、FuseBox@nextと、nccはすでに実用に耐えられるレベルかな、と思います。今回はウェブフロントエンド開発をするという前提で開発サーバーの有無とかも紹介しましたが、そうなるとFuseBoxは良さそうです。本当は使い捨てのサンプルで活用したかったので、そのユースケースにいちばんマッチしているParcel 2もリリースされたら使ってみようと思います。Rome.jsも新しい開発体験を目指していそうだし、開発者が強い人たちなので楽しみです。</p><hr><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20200318/">【Figma】を使ってチームでUI/UX設計するといいこと</a></li><li><a href="https://future-architect.github.io/articles/20200317/">SPA + Tableau Online + Auth0 SSO</a></li><li><a href="/articles/20200316/">その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li><li><a href="https://future-architect.github.io/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ちょっとしたフロントエンドの開発で、TypeScriptに最初から対応していて、簡単に使えるものは何かないかな、と調べてみたメモです。React/Vue/Angularの場合はそれぞれの初期化コマンドで何から何まで用意してくれます。Next.js、Nuxt.js、Gatsb
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
      <category term="TypeScript" scheme="https://future-architect.github.io/tags/TypeScript/"/>
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
  </entry>
  
  <entry>
    <title>【Figma】を使ってチームでUI/UX設計するといいこと</title>
    <link href="https://future-architect.github.io/articles/20200318/"/>
    <id>https://future-architect.github.io/articles/20200318/</id>
    <published>2020-03-18T03:33:18.000Z</published>
    <updated>2020-03-18T03:43:03.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p><strong>Figma</strong>とは何か、何ができるのか、<strong>チーム</strong>でシステムデザイン設計するときにFigmaを使うと何がいいのかを初心者向けにざっくり紹介していきます。<br>「〇〇するにはどうすれば？」といった具体的な疑問はyoutubeに動画がたくさん上がっているので見てください。</p><img src="/images/20200318/photo_20200318_01.png"><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul><li>Figmaとは何か</li><li>画面の作り方</li><li>チーム設計でFigmaを使うメリット</li><li>Figmaを利用してみて</li><li>まとめ</li></ul><h1 id="Figmaとは何か"><a href="#Figmaとは何か" class="headerlink" title="Figmaとは何か"></a>Figmaとは何か</h1><p><strong>Figma</strong>はユーザーインターフェース（UI）のデザインを<strong>ブラウザ上</strong>で簡単に作れるデザインツールです。<br>デザインツールといえば<strong>デスクトップアプリ</strong>のAdobe XDやSketchが有名どころですが、Figmaも負けず劣らずの操作性と利便性を兼ね備えています。また、エディターが<strong>２名までなら無料</strong>で使うことができるので１人での利用だけでなくチームでの利用にも始めやすいツールです。<br>本記事でFigmaの利便性を紹介していく前に、Figmaでは何が作れるのか簡単にお見せします。</p><p>　クリック👉　<a href="https://www.figma.com/proto/jnVOYln5pumAQOkpL2nBT7/Untitled?node-id=351%3A174&scaling=scale-down" target="_blank" rel="noopener">Figmaでできるもの</a></p><p>このワイヤーフレーム（以下、見本）は約1時間ほどで作成しました。Figmaはこのようなワイヤーフレームや、UIを構成する画面・部品を作成することができます。</p><p>以下で、具体的な作り方を説明していきます。</p><h1 id="画面の作り方"><a href="#画面の作り方" class="headerlink" title="画面の作り方"></a>画面の作り方</h1><p>Figmaの画面設計は<strong>フレーム</strong>と部品（<strong>コンポーネント</strong>）を組み合わせることで作ることができます。作成手順は以下２ステップです。</p><ol><li>画面フレームを作成する</li><li>部品を作る</li></ol><p>最後に作成した画面に対して実行操作を行うことで、上記でお見せしたような画面の操作感を実際に触って確認することができます。</p><h2 id="１．画面フレームを作成する"><a href="#１．画面フレームを作成する" class="headerlink" title="１．画面フレームを作成する"></a>１．画面フレームを作成する</h2><p>画面のテンプレートとなるフレームを選択します。<br>フレームは設計者自身でサイズを設定することもできますが、デフォルトでスマートフォンやタブレット、PCの規格が用意されています。<br>イチから形を定義し調整する必要はなく、自チームが作成するアプリケーションに合わせて選択することができます。</p><img src="/images/20200318/photo_20200318_02.gif"><p>ここでは見本と同じようにiPhone11 ProMaxを選択して作成していきます。<br>次に、フレームにUIの根幹となる部品を作成します。</p><h2 id="２．部品を作成する"><a href="#２．部品を作成する" class="headerlink" title="２．部品を作成する"></a>２．部品を作成する</h2><p>Figmaの部品の作り方はパワーポイントと似ているため直感的で扱いやすいです。</p><p>①オブジェクトを配置<br>②サイズを決め<br>③色をつける（又はテキスト入力する）</p><p>この３ステップを繰り返すことで部品を作成し、フレームの上に配置していきます。</p><img src="/images/20200318/photo_20200318_03.gif"><p>フレームの上に部品を作成・配置し終えたら実際に操作感を試してみます。</p><h2 id="実行操作を行う"><a href="#実行操作を行う" class="headerlink" title="実行操作を行う"></a>実行操作を行う</h2><p>フレーム・部品を作り終えたら右上の <strong>（▶）</strong> を押下するだけです。</p><img src="/images/20200318/photo_20200318_04.gif"><p>説明では省きましたが、<strong>Prototype</strong>機能で部品とフレームを紐づけることでアニメーションをつけることができます。<br>細かく設定を行うことで、画面遷移時の動き等をより実際のUIに近づけたイメージを作成することも可能です。<br>この時、最初にフレームで設定した端末（ここではiPhone11 ProMax）風に表示してくれる点も<strong>ポイント！</strong></p><h1 id="チーム設計でFigmaを使うメリット"><a href="#チーム設計でFigmaを使うメリット" class="headerlink" title="チーム設計でFigmaを使うメリット"></a>チーム設計でFigmaを使うメリット</h1><p>簡単にFigmaでのUIの作り方を紹介しました。<br>ここまででも、Figmaがいかに簡単にデザイン設計できるかは伝わったと思いますが、「なぜチームで使うと良いの？」と思う方のために、次はチーム設計で便利な機能を紹介します。<br>キーワードは以下の４点です。</p><p><strong>👆チームで使いたいFigmaの機能👆</strong></p><ul><li><strong>コンポーネント化</strong></li><li><strong>定義の共有</strong></li><li>レビュー</li><li>豊富なライブラリ</li></ul><h2 id="コンポーネント化"><a href="#コンポーネント化" class="headerlink" title="コンポーネント化"></a>コンポーネント化</h2><p>この機能はチーム設計で必須の機能といって大袈裟ではないくらい重要な機能です。</p><p>チームでデザイン設計をしていると、「あの画面では日付を入力する方法は直接入力だったのに、この画面では選択式だ」のように、設計者によってバラつきが生まれてしまうことがあります。<br>これまでであれば、使用する部品はpowerpointやexcel等のドキュメントに一覧化して定義することで、設計者による差異を潰してUIの統一化を図ってきたかもしれません。</p><p>しかし、Figmaでは部品を<strong>コンポーネント化</strong>することで、一度作成した部品を<strong>共有</strong>・<strong>再利用</strong>することができます。<br><img src="/images/20200318/photo_20200318_05.png"><br>作成したコンポーネントを１か所にまとめておくことで、各設計者は（基本的には）<strong>既存のコンポーネント</strong>を利用して設計するため同じ目的を果たす部品が増えることはありません。</p><p>またコンポーネント（以下、親）から生成した子コンポーネント（以下、子）は親の情報を引き継ぐため、親に修正が入ったら子にも反映される。子が様々な場所で使われ、後でコンポーネントに改修が入っても全ての子に反映されるためメンテナンスも簡単にできます。<br><img src="/images/20200318/photo_20200318_06.gif"></p><h2 id="定義の共有"><a href="#定義の共有" class="headerlink" title="定義の共有"></a>定義の共有</h2><p>コンポーネントを紹介しましたが、UIのデザインを統一するためにFigmaが提供しているのはコンポーネントだけではありません。<br>カラーパレットやフォントスタイルも定義することができるため、設計者ごとの差異をより極小化することができます。<br><img src="/images/20200318/photo_20200318_07.gif"></p><p><strong>コンポーネント</strong>・<strong>カラーパレット</strong>・<strong>フォントスタイル</strong>はチーム内のみならず、その設計者が属している<strong>全てのチーム</strong>でも利用することができます。<br>そのため定義の共有・統一化は、単一チームの枠にとわられず複数のチーム・組織で利用することが可能となります。</p><h2 id="レビュー"><a href="#レビュー" class="headerlink" title="レビュー"></a>レビュー</h2><p>Figmaではチームに属しているメンバーに対して、コメントできます。<br>この機能のすごいところは、オブジェクトに紐づけてコメントすることができるため、レビュアーと設計者はより視覚的に対象箇所を認識・修正することができます。<br><img src="/images/20200318/photo_20200318_08.gif"></p><p>また、コメントは一覧化されるため、レビューに対する修正も漏れなく潰しこんでいくことができます。</p><h2 id="豊富なライブラリ"><a href="#豊富なライブラリ" class="headerlink" title="豊富なライブラリ"></a>豊富なライブラリ</h2><p>Figmaでは様々なライブラリが提供されています。<br><img src="/images/20200318/photo_20200318_09.png"></p><p>皆がよく使うアイコンセットもとても充実しており、コピペで簡単に使用できるため設計の大きな助けとなります。</p><p>　クリック👉<a href="https://www.figma.com/resources/assets/material-icons-outline/" target="_blank" rel="noopener">マテリアルアイコンセット</a></p><h1 id="Figmaを利用してみて"><a href="#Figmaを利用してみて" class="headerlink" title="Figmaを利用してみて"></a>Figmaを利用してみて</h1><p>私は約１か月の間、設計者３名体制でFigmaを利用しスマートフォンアプリのデザイン設計を行ってきました。</p><p>先行設計者としてアプリ内で利用するコンポーネント作成を最優先として着手しました。その結果、後続で参入してきたメンバーは既存のコンポーネントを組み合わせて設計することでチーム内でのイメージの揺らぎを極小化し良い品質のシステムデザインができたと思っています。</p><p>一方で、実際に業務で使ってみると事前に定義しておく対象範囲の絞り込みが難しく、コンポーネントの作成からコンポーネント間の余白等、必要と思う定義をあげればキリがありません。定義に時間をかけていくと<strong>本来のUI/UXデザインの目的</strong>に時間をかけることができません。</p><p>このような問題を解決するには小規模なチーム毎に定義を作っていては時間が足りません。定義対象の範囲を絞り込む一方で、利用できる定義は汎用化し、<strong>チームにとどまらずより</strong>上位の組織として定義・共有することが効率性や統一性を踏まえても重要だと感じました。</p><p>現在、社内でもFigmaによるデザイン性の統一化を図り汎用的なライブラリ化を目指して絶賛作成中です！！</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>業務上まだまだ設計書が必要な場面はたくさんありますが、Figmaでは設計した画面を画像ファイルとして保存することもできるため、設計書に貼るキャプチャをFigmaで作るだけでスピーディかつ高品質な画面設計ができます。</p><p>Figmaを使う理由は様々ですが、何よりFigmaでのシステムデザイン設計はとても楽しいです。</p><p>余談ですが、作成したデザインを実際のスマホ画面で確認すること等もできるため、ぜひ触ってみてください！</p><hr><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20200317/">SPA + Tableau Online + Auth0 SSO</a></li><li><a href="/articles/20200316/">その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li><li><a href="https://future-architect.github.io/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Figma&lt;/strong&gt;とは何か、何ができるのか、&lt;strong&gt;チーム&lt;/strong&gt;でシステムデザイン設計するとき
      
    
    </summary>
    
      <category term="Design" scheme="https://future-architect.github.io/categories/Design/"/>
    
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="UI" scheme="https://future-architect.github.io/tags/UI/"/>
    
      <category term="Figma" scheme="https://future-architect.github.io/tags/Figma/"/>
    
  </entry>
  
  <entry>
    <title>SPA + Tableau Online + Auth0 SSO</title>
    <link href="https://future-architect.github.io/articles/20200317/"/>
    <id>https://future-architect.github.io/articles/20200317/</id>
    <published>2020-03-17T01:59:27.000Z</published>
    <updated>2020-03-17T02:33:50.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><ul><li>プロジェクトでTableauダッシュボードを組み込んだSPAを開発しています。</li><li>その際にPoCを実施したので、こちらで簡単にお試しできる手順を共有させていただきます。</li></ul><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li>Tableau OnlineダッシュボードのSPA埋め込み with Auth0 SSOを最短でお試しできる手順になります。</li></ul><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>事前にTableauアカウントと、Auth0アカウント および テナント作成は行なっているものとします。</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h4 id="1-Auth0-login-URL、メタデータ取得"><a href="#1-Auth0-login-URL、メタデータ取得" class="headerlink" title="1. Auth0 login URL、メタデータ取得"></a>1. Auth0 login URL、メタデータ取得</h4><p>Auth0のSAML Protocol URL(login URL)、メタデータを取得します。<br>メタデータはDLしておいてください。</p><img src="/images/20200317/photo_20200317_01.png" style="border:solid 1px #000000"><h4 id="2-Tableau設定"><a href="#2-Tableau設定" class="headerlink" title="2. Tableau設定"></a>2. Tableau設定</h4><ol><li>サイトでのSAML認証の有効化</li><li>TableauへのAuth0メタデータ(手順3で取得済)をインポート</li><li>iFrame の埋め込みの有効化</li><li>ユーザー追加(auth0 SSO有効)</li></ol><img src="/images/20200317/photo_20200317_02.png" style="border:solid 1px #000000"><img src="/images/20200317/photo_20200317_03.png" style="border:solid 1px #000000"><h4 id="3-Tableauメタデータ取得"><a href="#3-Tableauメタデータ取得" class="headerlink" title="3. Tableauメタデータ取得"></a>3. Tableauメタデータ取得</h4><p>Auth0の設定に使用する値が含まれたメタデータを取得します。</p><img src="/images/20200317/photo_20200317_04.png" style="border:solid 1px #000000"><h4 id="4-Auth0設定"><a href="#4-Auth0設定" class="headerlink" title="4. Auth0設定"></a>4. Auth0設定</h4><p>Applicationsを作成します。<br>Applications → Regular Web Applications → Create</p><img src="/images/20200317/photo_20200317_05.png" style="border:solid 1px #000000"><p>作成したApplicationのAddonsを設定します</p><img src="/images/20200317/photo_20200317_06.png" style="border:solid 1px #000000"><p>Application Callback URL: <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> を設定<br>Setteingsは下記を設定</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"audience"</span>: 前工程で取得したメタデータのentityIDを設定,</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">        <span class="attr">"user_id"</span>: <span class="string">"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"</span>,</span><br><span class="line">        <span class="attr">"email"</span>: <span class="string">"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"logout"</span>: &#123;</span><br><span class="line">        <span class="attr">"callback"</span>: 前工程で取得したメタデータのSingleLogoutServiceを設定,</span><br><span class="line">        <span class="attr">"slo_enabled"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-Tableauの埋め込みコード取得"><a href="#5-Tableauの埋め込みコード取得" class="headerlink" title="5. Tableauの埋め込みコード取得"></a>5. Tableauの埋め込みコード取得</h4><p>対象のダッシュボードへ移動 → 共有 → 埋め込みコードのコピー</p><img src="/images/20200317/photo_20200317_07.png"><h4 id="6-サンプルアプリ組み込み"><a href="#6-サンプルアプリ組み込み" class="headerlink" title="6. サンプルアプリ組み込み"></a>6. サンプルアプリ組み込み</h4><p>サンプルアプリへ実際に組み込みます</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="comment"># サンプルアプリを自動生成します</span></span><br><span class="line">$ <span class="comment"># 任意のディレクトリで実行</span></span><br><span class="line">$ npx create-next-app my-app</span><br></pre></td></tr></table></figure><p>手順5で取得した埋め込みコードを整形します。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">※ 次の工程でTableauのJSライブラリをロード時に読み込むように切り出す↓↓↓</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"text/javascript"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">"https://us-west-2b.online.tableau.com/javascripts/api/viz_v1.js"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">※ 次の工程でTableauのJSライブラリをロード時に読み込むように切り出す↑↑↑</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tableauPlaceholder"</span> <span class="attr">style</span>=<span class="string">"width: 1440px; height: 712px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">class</span>=<span class="string">"tableauViz"</span> <span class="attr">width</span>=<span class="string">"1440"</span> <span class="attr">height</span>=<span class="string">"712"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;<span class="name">param</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"host_url"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">value</span>=<span class="string">"https%3A%2F%2Fus-west-2b.online.tableau.com%2F"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"embed_code_version"</span> <span class="attr">value</span>=<span class="string">"3"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"site_root"</span> <span class="attr">value</span>=<span class="string">"&amp;#47;t&amp;#47;samltest3"</span>/&gt;</span><span class="tag">&lt;<span class="name">param</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">value</span>=<span class="string">"Superstore&amp;#47;Overview"</span>/&gt;</span><span class="tag">&lt;<span class="name">param</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"tabs"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">value</span>=<span class="string">"yes"</span>/&gt;</span><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"toolbar"</span> <span class="attr">value</span>=<span class="string">"yes"</span>/&gt;</span><span class="tag">&lt;<span class="name">param</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"showAppBanner"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">value</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上記の埋め込みコードを少し修正して、pages/index.jsに貼り付けます  </p><ol><li>ロード時にTableauライブラリ読み込み</li><li>styleに <code>position: &quot;absolute&quot;</code> を追加</li><li>styleに <code>display: &quot;none&quot;</code> を追加</li><li>ログインボタンを追加</li></ol><figure class="highlight javascript"><figcaption><span>my-app/pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ① ロード時にTableauのJSライブラリを読み込み↓↓↓</span></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">        script.src =</span><br><span class="line">            <span class="string">"https://us-west-2b.online.tableau.com/javascripts/api/viz_v1.js"</span>;</span><br><span class="line">        script.async = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">    &#125;, []);</span><br><span class="line">    <span class="comment">// ① ロード時にTableauのJSライブラリを読み込み↑↑↑</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &#123;<span class="comment">/* ④ ログインボタンを追加 */</span>&#125;</span><br><span class="line">            &lt;button</span><br><span class="line">                onClick=&#123;() =&gt; &#123;</span><br><span class="line">                    <span class="built_in">window</span>.location =</span><br><span class="line">            &#123;<span class="comment">/* 手順3のSAML Protocol URLを設定 */</span>&#125;</span><br><span class="line">            <span class="string">"https://xxxxxx.auth0.com/samlp/xxxxxxxxxxxxxxxxxxxxxx"</span>;</span><br><span class="line">                &#125;&#125;</span><br><span class="line">            &gt;</span><br><span class="line">                login</span><br><span class="line">            &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &#123;/</span>* ② styleにposition: <span class="string">"absolute"</span>を追加 *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">            &lt;div</span></span><br><span class="line"><span class="regexp">                class="tableauPlaceholder"</span></span><br><span class="line"><span class="regexp">                style=&#123;&#123; width: "100%", height: "100%", position: "absolute" &#125;&#125;</span></span><br><span class="line"><span class="regexp">            &gt;</span></span><br><span class="line"><span class="regexp">                &#123;/</span>* ③ style=&#123;&#123; <span class="attr">display</span>: <span class="string">"none"</span> &#125;&#125;を追加 *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">                &lt;object</span></span><br><span class="line"><span class="regexp">                    class="tableauViz"</span></span><br><span class="line"><span class="regexp">                    width="1440"</span></span><br><span class="line"><span class="regexp">                    height="670"</span></span><br><span class="line"><span class="regexp">                    style=&#123;&#123; display: "none" &#125;&#125;</span></span><br><span class="line"><span class="regexp">                &gt;</span></span><br><span class="line"><span class="regexp">                    &lt;param</span></span><br><span class="line"><span class="regexp">                        name="host_url"</span></span><br><span class="line"><span class="regexp">                        value="https%3A%2F%2Fus-west-2b.online.tableau.com%2F"</span></span><br><span class="line"><span class="regexp">                    /</span>&gt;</span><br><span class="line">                    &lt;param name=<span class="string">"embed_code_version"</span> value=<span class="string">"3"</span> /&gt;</span><br><span class="line">                    &lt;param name=<span class="string">"site_root"</span> value=<span class="string">"&amp;#47;t&amp;#47;samltest3"</span> /&gt;</span><br><span class="line">                    &lt;param name=<span class="string">"name"</span> value=<span class="string">"Superstore&amp;#47;Overview"</span> /&gt;</span><br><span class="line">                    &lt;param name=<span class="string">"tabs"</span> value=<span class="string">"yes"</span> /&gt;</span><br><span class="line">                    &lt;param name=<span class="string">"toolbar"</span> value=<span class="string">"yes"</span> /&gt;</span><br><span class="line">                    &lt;param name=<span class="string">"showAppBanner"</span> value=<span class="string">"false"</span> /&gt;</span><br><span class="line">                &lt;<span class="regexp">/object&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Home;</span></span><br></pre></td></tr></table></figure><h4 id="7-アクセス"><a href="#7-アクセス" class="headerlink" title="7. アクセス"></a>7. アクセス</h4><p>① サンプルアプリ起動</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> my-app</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><p>② localhost:3000にアクセス<br>③ ログインボタンを押下<br>④ Auth0 ログイン画面に遷移するのでログイン</p><img src="/images/20200317/photo_20200317_08.png"><p>localhostにリダイレクトされ、埋め込みのTableauダッシュボードが表示されました！🎉</p><img src="/images/20200317/photo_20200317_09.png"><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><ul><li>プロジェクトではこの後、cloudfront + S3の環境にデプロイしています。</li><li>また、SPA自体の認証もAuth0 SSOで行っており、  session、token管理をauth0のライブラリを使用して行っています。</li><li>こちらに関しては、機会がありましたら別途、紹介させていただけたらと思います。</li></ul><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://auth0.com/blog/jp-how-saml-authentication-works/" target="_blank" rel="noopener">https://auth0.com/blog/jp-how-saml-authentication-works/</a>  <ul><li>(SAML 認証はどのように機能するか？)</li></ul></li><li><a href="https://help.tableau.com/current/online/ja-jp/saml_config_site.htm" target="_blank" rel="noopener">https://help.tableau.com/current/online/ja-jp/saml_config_site.htm</a>  <ul><li>(サイトでの SAML 認証の有効化)</li></ul></li></ul><hr><p>関連記事：</p><ul><li><a href="/articles/20200316/">その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li><li><a href="https://future-architect.github.io/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;プロジェクトでTableauダッシュボードを組み込んだSPAを開発しています。&lt;/li&gt;
&lt;li&gt;その際にPoC
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="Auht0" scheme="https://future-architect.github.io/tags/Auht0/"/>
    
  </entry>
  
  <entry>
    <title>その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～</title>
    <link href="https://future-architect.github.io/articles/20200316/"/>
    <id>https://future-architect.github.io/articles/20200316/</id>
    <published>2020-03-16T02:49:57.000Z</published>
    <updated>2020-03-16T02:57:03.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="その値、Vue-jsは監視していますか？～Vue-jsで値が更新されないときに気をつけるところ～"><a href="#その値、Vue-jsは監視していますか？～Vue-jsで値が更新されないときに気をつけるところ～" class="headerlink" title="その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～"></a>その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～</h1><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIG コアテクノロジーチーム竹林です。<br>こちらのブログでは前回 <a href="https://future-architect.github.io/articles/20181031/">その問い合わせ、AIが解決します！～Redmineチケットレコメンドシステムのご紹介～</a> を書かせていただきました。</p><p>この記事を書いてから早くも1年半が経ち、間もなく社会人4年目を迎えようとしております。<br>新人の後輩たちや、競技プログラミング上級者なキャリア入社の凄腕な皆さんもチームメンバに加わり、個性豊かな楽しい職場になってまいりました。</p><p>ちなみに<a href="https://future-architect.github.io/articles/20181031/">前回の記事</a>はAI(自然言語処理によるレコメンドシステム開発)に関するものです。まだご覧になっていない方はよろしければどうぞ！<br>さて、今回はAIではなくフロントエンド(Vue.js)の話です。</p><h2 id="コアテクノロジーチームについて"><a href="#コアテクノロジーチームについて" class="headerlink" title="コアテクノロジーチームについて"></a>コアテクノロジーチームについて</h2><p>私が所属するコアテクノロジーチームでは、Futureの各プロジェクトでの生産性・品質向上および設計開発プロセスの標準化を目標に、内製ライブラリ・フレームワーク・インフラ等の提供を行っております。</p><p><a href="https://jobs.qiita.com/employers/future/development_teams/57" target="_blank" rel="noopener">フューチャー株式会社 コアテクノロジーチーム - Qiita Jobs</a></p><p>そんな内製フレームワークの一部として採用されているのがVue.jsです。</p><p>フレームワーク自体の設計開発を行う一方、顧客・プロジェクト向け画面の開発を行うために、自分たちもそのフレームワークを用いた開発を行う機会がありました。</p><p>今回はそんなとある画面開発をするにあたって、私がVue.jsをキャッチアップしていく過程の中で遭遇したトラブルに関する解決方法を共有します。</p><h2 id="Vue-jsで値が更新されないとき？"><a href="#Vue-jsで値が更新されないとき？" class="headerlink" title="Vue.jsで値が更新されないとき？"></a>Vue.jsで値が更新されないとき？</h2><h3 id="事象について"><a href="#事象について" class="headerlink" title="事象について"></a>事象について</h3><p>Vue.jsで何かしらのAPIをaxios等で入手し、テーブル描画などの外部ライブラリと連携した際、外部ライブラリ側で値を書き換えてもうまく更新した値が取得できないケースが有りました。</p><p>私の場合、DB上のあるテーブルの一覧を<a href="https://github.com/future-architect/cheetah-grid" target="_blank" rel="noopener">cheetah-grid</a>を用いて表に描画し、<a href="https://www.npmjs.com/package/vue-cheetah-grid#available-vue-component-tag-names" target="_blank" rel="noopener"><code>&lt;c-grid-check-column&gt;</code>コンポーネント</a>によりチェック欄を設けてそのtrue/falseを取得しようとした際にうまく値が反映されておらず「あれ？おかしいぞ？」となりました。</p><h3 id="DBにあるデータ"><a href="#DBにあるデータ" class="headerlink" title="DBにあるデータ"></a>DBにあるデータ</h3><p>ダミーのテーブルで例を示します。</p><table><thead><tr><th>名前</th><th>職場</th><th>説明</th></tr></thead><tbody><tr><td>Aさん</td><td>東京</td><td>フロントエンドエンジニア</td></tr><tr><td>Bさん</td><td>名古屋</td><td>バックエンドエンジニア</td></tr><tr><td>Cさん</td><td>大分</td><td>インフラエンジニア</td></tr></tbody></table><h3 id="画面で見せたいデータ"><a href="#画面で見せたいデータ" class="headerlink" title="画面で見せたいデータ"></a>画面で見せたいデータ</h3><p>DB上のテーブルを取得した上に、フロントエンド側でチェックカラムを追加します。<br>デフォルト値はfalseを入れておきます。</p><ul><li><a href="https://github.com/future-architect/cheetah-grid" target="_blank" rel="noopener">cheetah-grid</a>では、<a href="https://www.npmjs.com/package/vue-cheetah-grid#available-vue-component-tag-names" target="_blank" rel="noopener"><code>&lt;c-grid-check-column&gt;</code>コンポーネント</a>を利用するとチェックカラムを簡単に用意することが出来ます。</li></ul><table><thead><tr><th>(★追加)チェックカラム</th><th>名前</th><th>職場</th><th>説明</th></tr></thead><tbody><tr><td>true/false(デフォルト:false)</td><td>Aさん</td><td>東京</td><td>フロントエンドエンジニア</td></tr><tr><td>true/false(デフォルト:false)</td><td>Bさん</td><td>名古屋</td><td>バックエンドエンジニア</td></tr><tr><td>true/false(デフォルト:false)</td><td>Cさん</td><td>大分</td><td>インフラエンジニア</td></tr></tbody></table><p>ユーザがレコードごとのチェックカラムを操作し、その変更を検知できるかどうかを見てみます。</p><h3 id="正しい例"><a href="#正しい例" class="headerlink" title="正しい例"></a>正しい例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ユーザ一覧<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- テーブル --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c-grid</span> <span class="attr">:data</span>=<span class="string">"users"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">c-grid-check-column</span> <span class="attr">field</span>=<span class="string">"check"</span>&gt;</span><span class="tag">&lt;/<span class="name">c-grid-check-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">c-grid-column</span> <span class="attr">field</span>=<span class="string">"name"</span>&gt;</span>名前<span class="tag">&lt;/<span class="name">c-grid-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">c-grid-column</span> <span class="attr">field</span>=<span class="string">"workplace"</span>&gt;</span>職場<span class="tag">&lt;/<span class="name">c-grid-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">c-grid-column</span> <span class="attr">field</span>=<span class="string">"note"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">width</span>=<span class="string">"200px"</span>&gt;</span>説明<span class="tag">&lt;/<span class="name">c-grid-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">c-grid</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 値の更新を確認するため、テーブルの中身をそのまま出力してみる --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>テーブルの中身: &#123;&#123; users &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">// import箇所省略</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: 'users',</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      users: [] // cheetah-gridにバインドされる変数</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mounted () &#123;</span><br><span class="line">    const vm = this</span><br><span class="line">    vm.onLoad()</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    /**</span><br><span class="line">     * ユーザ一覧取得</span><br><span class="line">     *</span><br><span class="line">     * @returns &#123;void&#125;</span><br><span class="line">     */</span><br><span class="line">    onLoad () &#123;</span><br><span class="line">      const vm = this</span><br><span class="line"></span><br><span class="line">      // バックエンドサーバからユーザ一覧データを取得</span><br><span class="line">      vm.axios.get('/api/v1/users').then(response =&gt; &#123;</span><br><span class="line">        vm.users = response.data.map(e =&gt; &#123;</span><br><span class="line">          // チェックカラム用、デフォルトはfalse</span><br><span class="line">          e.check = false</span><br><span class="line">          return e</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>画面での出力:</p><p>下図のように、テーブルとデバッグ用にテーブルの中身がそれぞれ出力されます。<br><img src="/images/20200316/photo_20200316_01.png"></p><p>チェックカラムをクリックすると、チェックが付きます。<br>デバッグ用に出力したテーブルの中身データにも反映されています。<br><img src="/images/20200316/photo_20200316_02.png"></p><h3 id="うまくいかない例"><a href="#うまくいかない例" class="headerlink" title="うまくいかない例"></a>うまくいかない例</h3><p>当初、私は<code>forEach()</code>ループを用いた代入操作を行っていました。</p><ul><li><code>onLoad()</code>メソッド以外共通のため省略</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">onLoad () &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// バックエンドサーバからユーザ一覧データを取得</span></span><br><span class="line">  vm.axios.get(<span class="string">'/api/v1/users'</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    vm.users = response.data</span><br><span class="line">    vm.users.forEach(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// チェックカラム用、デフォルトはfalse</span></span><br><span class="line">      e.check = <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>画面での出力:</p><p>チェックカラムをクリックしても、デバッグ用に出したデータは書き換わっていません。<br><img src="/images/20200316/photo_20200316_03.png"></p><h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>配列の各要素ごとの直接操作をやめ、代わりに<code>Array.prototype.map()</code>などを用いて<strong>新しい配列インスタンス</strong>を生成してあげるようにしましょう。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">onLoad () &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">  vm.axios.get(<span class="string">'/api/v1/files'</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ★Array.prototype.map()でインスタンスを新規生成</span></span><br><span class="line">    vm.users = response.data.map(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      e.check = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">return</span> e</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="なぜ配列の各要素ごとに直接操作すると値が更新されないのか"><a href="#なぜ配列の各要素ごとに直接操作すると値が更新されないのか" class="headerlink" title="なぜ配列の各要素ごとに直接操作すると値が更新されないのか"></a>なぜ配列の各要素ごとに直接操作すると値が更新されないのか</h2><p>公式マニュアルの <a href="https://jp.vuejs.org/v2/guide/list.html" target="_blank" rel="noopener">リストレンダリング</a> に詳しく書かれています。</p><p>以下、 <a href="https://jp.vuejs.org/v2/guide/list.html#オブジェクトの変更検出の注意" target="_blank" rel="noopener">https://jp.vuejs.org/v2/guide/list.html#オブジェクトの変更検出の注意</a> からの引用です。</p><blockquote><p>再度になりますが、現代の JavaScript の制約のため、Vue は<strong>プロパティの追加や削除を検出することはできません</strong>。(中略)<br>Vue はすでに作成されたインスタンスに新しいルートレベルのリアクティブプロパティを動的に追加することはできません。</p></blockquote><p>また、公式マニュアルの <a href="https://jp.vuejs.org/v2/guide/reactivity.html" target="_blank" rel="noopener">リアクティブの探求</a>も併せて参照してください。</p><p>配列の中に新たなプロパティを生やそうとしても、Vue.jsはそれを監視していないため、値の更新検知や再描画ができないよ。新しくインスタンスを作ってあげてね。ということでした。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>今回のトラブルを通じてVue.jsの仕組みについてより理解が深まりました。<br>Vue.jsは便利で手軽ですが、このあたりの内部的な仕組みもしっかりと把握しておきたいですね。</p><hr><p>関連記事：</p><ul><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li><li><a href="https://future-architect.github.io/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;その値、Vue-jsは監視していますか？～Vue-jsで値が更新されないときに気をつけるところ～&quot;&gt;&lt;a href=&quot;#その値、Vue-jsは監視していますか？～Vue-jsで値が更新されないときに気をつけるところ～&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>公開鍵暗号(非対称鍵暗号)の仕組みをわかりやすく解説してみる</title>
    <link href="https://future-architect.github.io/articles/20200312/"/>
    <id>https://future-architect.github.io/articles/20200312/</id>
    <published>2020-03-12T01:34:17.000Z</published>
    <updated>2020-03-12T01:52:57.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXチームの村瀬です。</p><p>公開鍵暗号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">公開鍵で暗号化されたデータは対応する秘密鍵でしか復号できない。</span><br></pre></td></tr></table></figure><p>最初にこの説明を聞いた時にそんな鍵がありえるのか？と疑問に思いました。<br>技術力もなかった当時は不思議で仕方ありませんでした。自分で利用することもないし、知識として覚えておこうぐらいの感覚でいたのですがある程度技術力がついた今日では、常日頃からHTTPSやSSHで利用していることにふと気が付き自分の理解のため仕組みについて公開鍵暗号の一つであるRSA暗号について調べてみることにしました。<br>RSA暗号を解説しているページはたくさんありますが、この記事では極力簡単な内容になることを心がけてみました。</p><h1 id="暗号化、復号の概要"><a href="#暗号化、復号の概要" class="headerlink" title="暗号化、復号の概要"></a>暗号化、復号の概要</h1><p>図で表すとこんな感じです。</p><img src="/images/20200312/photo_20200312_01.png" class="img-middle-size"><h1 id="暗号化式と復号式"><a href="#暗号化式と復号式" class="headerlink" title="暗号化式と復号式"></a>暗号化式と復号式</h1><p>RSA暗号ではべき乗と余り(mod)を利用します。<br>暗号化する際はとある数EとNを利用します。</p><p>$$暗号文=平文^E \quad mod \quad N$$</p><p>復号する際も式は同様ですがEの代わりにDを利用します。</p><p>$$平文=暗号文^D \quad mod \quad N$$</p><p>式から暗号文を削除すると以下の式が成り立ちます。</p><p>$$平文=平文^{ED} \quad mod \quad N$$</p><h1 id="とりあえずだまされたと思って確認"><a href="#とりあえずだまされたと思って確認" class="headerlink" title="とりあえずだまされたと思って確認"></a>とりあえずだまされたと思って確認</h1><p>平文を5,とある数E,D,Nを3,7,33として確認してみます。</p><p>暗号化</p><p>$$5^3 \quad mod \quad 33 = 125 \quad mod \quad 33 = 26$$</p><p>復号</p><p>$$26^7 \quad mod \quad 33 = 8031810176 \quad mod \quad 33\quad = 5$$</p><p>平文の5が暗号化することで26になり、26を復号することで5に戻りましたね。<br>modが33なので平文が1～32の整数であれば同様に暗号化、復号すれば元の平文に戻すことができます。</p><h1 id="E-D-Nの求め方"><a href="#E-D-Nの求め方" class="headerlink" title="E,D,Nの求め方"></a>E,D,Nの求め方</h1><p>暗号化、複合に用いたE,D,Nはどんな数字でも良いわけではありません。<br>では、暗号化、復号が成り立つE,D,Nはどのような数なのでしょうか？</p><p>任意の正の整数a,nと、相違なる素数p、qにおいて以下の式が成り立ちます。<br>どうして成り立つのかは省略しますがRSA暗号の発明者が発見したぐらいに思ってください。</p><p>$$a^{(p−1)(q−1)n+1} ≡ a \quad mod \quad pq$$</p><p>RSA暗号の肝はこの数式です。<br>NからE,Dを探せばRSAで暗号化、復号ができます。</p><p>先の例ではNが33でしたのでそれを素因数分解してp,qは3,11です。ここからE,Dを求めます。</p><p>$$ED = (p−1)(q−1)n+1=(3-1)(11-1)×1+1=2*10+1 =21$$</p><p>ここまで触れていませんでしたがE,Dは素数である必要があります。素数同士のかけ算で21になるE,Dの組み合わせは3,7※ですね。<br>※説明のためにしれっと素因数分解していますが、実際の鍵生成ではEを固定値にすることで容易にDを求めています。</p><h1 id="秘密鍵が容易に特定されるのでは？"><a href="#秘密鍵が容易に特定されるのでは？" class="headerlink" title="秘密鍵が容易に特定されるのでは？"></a>秘密鍵が容易に特定されるのでは？</h1><p>今回の場合、暗号する為には秘密鍵として3,33の数字の組が必要で、複合する為に公開鍵として7,33の数字の組が必要です。<br>上記のE,D,Nの求め方の計算方法を用いれば公開鍵がわかれば秘密鍵も簡単にわかってしまいそうです。<br>では、実際に私たちが利用している秘密鍵はなぜ特定が困難なのでしょうか？</p><p>それは素因数分解が容易にできないことを利用し特定を困難にしています。<br>二桁程度の素因数分解は人間でも瞬時に計算できますが、数百桁の素因数分解はコンピュータを利用しても容易には計算できません。<br>ですので実際に利用されている鍵はとても大きな数を利用しています。</p><h1 id="数字が暗号化出来るのはわかったけど文字列を暗号化したいんだけど？"><a href="#数字が暗号化出来るのはわかったけど文字列を暗号化したいんだけど？" class="headerlink" title="数字が暗号化出来るのはわかったけど文字列を暗号化したいんだけど？"></a>数字が暗号化出来るのはわかったけど文字列を暗号化したいんだけど？</h1><p>コンピュータで取り扱われる文字は文字コードで成り立っています。文字コードは一つ一つの文字が数値から成り立っているので数値として扱われます。<br>それを一文字ずつ暗号化しているので文字列でも暗号化できます。</p><p>例えばFutureをASCII文字コードにすると70,117,116,117,114,101になります。</p><h1 id="暗号化と復号に利用する鍵"><a href="#暗号化と復号に利用する鍵" class="headerlink" title="暗号化と復号に利用する鍵"></a>暗号化と復号に利用する鍵</h1><p>公開鍵を利用して暗号化、秘密鍵を利用して復号できるってことは逆に秘密鍵を利用して暗号化、公開鍵を利用して復号もできるのでは？</p><p>はい。鍵を逆に利用してもできます。<br>重要なのは暗号化した鍵で復号できず、対となる鍵でしか復号できないことです。<br>詳細は割愛しますがこれは実際に電子署名で利用されています。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>エンジニアでなくともインターネットを利用する人であればHTTPSの裏などで身近に公開鍵暗号が意識することなく利用されてます。<br>暗号化の原理を知らずに利用していましたが調べてみると面白く、素晴らしさを実感できました。<br>暗号化、復号に利用される計算式は中学生までに習う足し算、引き算、かけ算(べき乗)、余り(mod)、素数だけで成り立っていることに驚きました。<br>RSA暗号の発明は難産だったようですが発明者って本当に頭が良いですね。</p><p>なお、この記事を作成する上で以下のページを参考にさせていただきました。<br><a href="https://persol-tech-s.co.jp/corporate/security/article.html?id=26" target="_blank" rel="noopener">https://persol-tech-s.co.jp/corporate/security/article.html?id=26</a><br><a href="https://qiita.com/YutaKase6/items/cd9e26d723809dc85928" target="_blank" rel="noopener">https://qiita.com/YutaKase6/items/cd9e26d723809dc85928</a><br><a href="https://qiita.com/jabba/items/e5d6f826d9a8f2cefd60" target="_blank" rel="noopener">https://qiita.com/jabba/items/e5d6f826d9a8f2cefd60</a></p><p>関連する記事:</p><ul><li><a href="https://future-architect.github.io/articles/20200121/">スロットリングとの付き合い方</a></li><li><a href="https://future-architect.github.io/articles/20191107/">インフラ入門vol.3(ネットワーク冗長化構成)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXチームの村瀬です。&lt;/p&gt;
&lt;p&gt;公開鍵暗号&lt;/p&gt;
&lt;figure class=&quot;highligh
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="暗号" scheme="https://future-architect.github.io/tags/%E6%9A%97%E5%8F%B7/"/>
    
      <category term="RSA暗号" scheme="https://future-architect.github.io/tags/RSA%E6%9A%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>JavaプログラマーのためのGo言語入門</title>
    <link href="https://future-architect.github.io/articles/20200311/"/>
    <id>https://future-architect.github.io/articles/20200311/</id>
    <published>2020-03-11T00:39:47.000Z</published>
    <updated>2020-03-12T01:44:02.223Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaプログラマーのためのGo言語入門"><a href="#JavaプログラマーのためのGo言語入門" class="headerlink" title="JavaプログラマーのためのGo言語入門"></a>JavaプログラマーのためのGo言語入門</h2><p>こちらは<a href="https://yourbasic.org/golang/go-java-tutorial/" target="_blank" rel="noopener">Java to Go in-depth tutorial</a>の日本語訳です<br>原文の著者に許諾を得て翻訳・公開いたします。</p><p>このチュートリアルは、JavaプログラマーがすばやくGo言語にキャッチアップできるようにすることを目的としています。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li><a href="./#Hello-stack1">Hello stack</a></li><li><a href="./#主な違い">主な違い</a></li><li><a href="./#シンタックス（文法">シンタックス（文法）</a></li><li><a href="./#定数">定数</a></li><li><a href="./#構造体">構造体</a></li><li><a href="./#ポインタ">ポインタ</a></li><li><a href="./#スライス">スライス</a></li><li><a href="./#値の作成">値の作成</a></li><li><a href="./#メソッドとインターフェース">メソッドとインターフェース</a></li><li><a href="./#エラー">エラー</a></li><li><a href="./#PanicとRecover">PanicとRecover</a></li><li><a href="./#ゴルーチンとチャネル">ゴルーチンとチャネル</a></li><li><a href="./#Hello-server">Hello server</a></li></ul><h2 id="Hello-stack1"><a href="#Hello-stack1" class="headerlink" title="Hello stack1"></a>Hello stack<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></h2><p>まずはじめに簡単な例を見ていきましょう。この例ではシンプルな抽象データ型をGoで実装しています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// collectionパッケージはstring型を格納できるスタックを実装している</span></span><br><span class="line"><span class="keyword">package</span> collection</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stackのゼロ値はすぐに使用できる空のスタック</span></span><br><span class="line"><span class="keyword">type</span> Stack <span class="keyword">struct</span> &#123;</span><br><span class="line">    data []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pushメソッドはスタックの一番上にxを追加する</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Stack)</span> <span class="title">Push</span><span class="params">(x <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    s.data = <span class="built_in">append</span>(s.data, x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Popメソッドは最後に追加された要素をスタックから削除しつつ、その要素を返す</span></span><br><span class="line"><span class="comment">// 空のスタックでPopメソッドを呼ぶとランタイムエラーが発生する</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Stack)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s.data) - <span class="number">1</span></span><br><span class="line">    res := s.data[n]</span><br><span class="line">    s.data[n] = <span class="string">""</span> <span class="comment">// メモリリークを避けるための処理</span></span><br><span class="line">    s.data = s.data[:n]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sizeメソッドはスタックの要素数を返す</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Stack)</span> <span class="title">Size</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s.data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最上位の宣言文の前に直接書かれているコメントはドキュメントコメントになります。ドキュメントコメントはプレーンテキストで書かれます。</li><li>変数を宣言するときは、変数名の後ろに型を書きます。</li><li>構造体( <code>struct</code> )はJavaでいうところのクラスに該当します。Goの構造体はメソッドをメンバに含めることはできません。変数のみを構造体のメンバに含めることができます。</li><li>コード上の <code>(s *Stach)</code> という部分でメソッドのレシーバーを宣言しています。これはJavaでいうところの <code>this</code> に該当します。</li><li><code>:=</code> という演算子は変数の宣言と初期化を同時に行ってくれます。変数の型は初期化式から自動で導かれます。</li></ul><p>以下のコードは、抽象データ型 <code>collection.Stack</code> を用いたHello worldプログラムです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> collection_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"go-for-java-programmers/collection"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleStack</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s collection.Stack</span><br><span class="line">    s.Push(<span class="string">"world!"</span>)</span><br><span class="line">    s.Push(<span class="string">"Hello, "</span>)</span><br><span class="line">    <span class="keyword">for</span> s.Size() &gt; <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Print(s.Pop())</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println()</span><br><span class="line">    <span class="comment">// Output: Hello, world!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>この <code>collection_test</code> というテストパッケージは <code>collection</code> パッケージと同じディレクトリに配置します。</li><li>1つめの<code>import</code> 文の <code>fmt</code> はGoの標準パッケージです。 2つめ <code>import</code> 文は“go-for-java-programmers/collection”ディレクトリのパッケージを使うことを示しています。</li><li>ソースコード上では <code>fmt</code> や <code>collection</code> という短い名前でこれらのパッケージにアクセスできます。</li></ul><p>NOTE: Goでスタックを実装する慣用的な方法は、スライスを直接使用することです。詳しくは<a href="https://yourbasic.org/golang/implement-stack/" target="_blank" rel="noopener">Implement a stack (LIFO)</a>を参照してください。</p><h2 id="主な違い"><a href="#主な違い" class="headerlink" title="主な違い"></a>主な違い</h2><h3 id="オブジェクト指向プログラミング"><a href="#オブジェクト指向プログラミング" class="headerlink" title="オブジェクト指向プログラミング"></a>オブジェクト指向プログラミング</h3><ul><li>Goにはコンストラクタを伴うクラスという概念がありません。インスタンスメソッド、クラスの継承構造、メソッドの動的ルックアップで実現したいことを、Goでは<a href="https://yourbasic.org/golang/structs-explained/" target="_blank" rel="noopener">struct</a>と<a href="https://yourbasic.org/golang/interfaces-explained/" target="_blank" rel="noopener">interface</a>を用いて実現します。</li><li>Goでは、どんな型に対しても<a href="https://yourbasic.org/golang/methods-explained/" target="_blank" rel="noopener">メソッド</a>を作成することができます。レシーバーをボックス化する必要もありません。レシーバーはJavaでいうところの <code>this</code> に対応します。レシーバーには値そのものかポインタが入ります。</li><li>Javaの <code>public</code>や <code>package-private</code> に似た２つのアクセスレベルがGoには存在します。トップレベルで宣言された<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>変数や関数の名前が大文字で始まる場合は <code>public</code> 、小文字で始まる場合は <code>package-private</code> のアクセスレベルになります。</li></ul><h3 id="関数型プログラミング"><a href="#関数型プログラミング" class="headerlink" title="関数型プログラミング"></a>関数型プログラミング</h3><ul><li>Goの関数は第一級オブジェクトです。<a href="https://yourbasic.org/golang/function-pointer-type-declaration/" target="_blank" rel="noopener">関数値</a>は他の値と同じように使用したり、関数の引数として渡すことができます。<a href="https://yourbasic.org/golang/anonymous-function-literal-lambda-closure/" target="_blank" rel="noopener">関数リテラル</a>は外側の関数で定義された変数を参照できます。</li></ul><h3 id="ポインタと参照"><a href="#ポインタと参照" class="headerlink" title="ポインタと参照"></a>ポインタと参照</h3><ul><li>Goは、オブジェクトや配列だけでなく、すべての型で<a href="https://yourbasic.org/golang/pointers-explained/" target="_blank" rel="noopener">ポインタ</a>を使用することができます。任意の型 <code>T</code> には対応するポインタ型 <code>*T</code> が存在します。これは型 <code>T</code> の値へのポインタを示しています。</li><li>Goでは無効なポインタに <code>nil</code> を使用しますが、Javaでは <code>null</code> を使用します。</li><li>Goの配列は値型です。配列が関数の引数として使用される場合、その関数は配列へのポインターではなく配列のコピーを受け取ります。実際には、配列ではなくスライスを関数の引数に渡すことがほとんどです。スライスは参照型です。</li><li>特定の型(マップ, スライス, チャネル)は値型ではなく、参照型です。つまり、マップを関数に渡してもマップはコピーされません。渡されたマップを関数内で変更した場合、変更は呼び出し元にも反映されます。Javaの用語を使うと、これはマップへの参照が行われているからだと説明できます。</li></ul><h3 id="組み込み型"><a href="#組み込み型" class="headerlink" title="組み込み型"></a>組み込み型</h3><ul><li>文字列型はGoの言語仕様として組み込まれています。<a href="https://yourbasic.org/golang/string-functions-reference-cheat-sheet/" target="_blank" rel="noopener">string</a> はbyte型のスライスのように振る舞いますが、イミュータブルです。</li><li>ハッシュテーブルはGoの言語自体に組み込まれています。Goでは<a href="https://yourbasic.org/golang/maps-explained/" target="_blank" rel="noopener">map</a>と呼びます。</li></ul><h3 id="エラーハンドリング"><a href="#エラーハンドリング" class="headerlink" title="エラーハンドリング"></a>エラーハンドリング</h3><ul><li>Goでは例外処理(exceptions)の代わりに、<a href="https://yourbasic.org/golang/errors-explained/" target="_blank" rel="noopener">error</a>を使用します。EOFなどのイベント、配列の範囲外の領域にアクセスしようとしたしたときのランタイム<a href="https://yourbasic.org/golang/recover-from-panic/" target="_blank" rel="noopener">パニック</a>はerrorで表現されます。</li></ul><h3 id="並行処理"><a href="#並行処理" class="headerlink" title="並行処理"></a>並行処理</h3><ul><li>Goでは個別に動く実行スレッドを<a href="https://yourbasic.org/golang/goroutines-explained/" target="_blank" rel="noopener">ゴルーチン</a>と呼びます。またゴルーチン間の通信は<a href="https://yourbasic.org/golang/channels-explained/" target="_blank" rel="noopener">チャネル</a>を使用します。これらは言語が提供しています。</li></ul><h3 id="用意されていない機能"><a href="#用意されていない機能" class="headerlink" title="用意されていない機能"></a>用意されていない機能</h3><ul><li>Goは暗黙的な型変換をサポートしていません。異なる型を混在させるような操作では、明示的な型変換が必要です。一方、数値型の定数を宣言するときには、型を指定せずに定数を宣言できます。この場合、宣言時の段階では、数値の上限は未確定になります。詳しくは<a href="https://yourbasic.org/golang/untyped-constants/" target="_blank" rel="noopener">Untyped numeric constants with no limits</a>を参照してください。</li><li>Goでは関数のオーバロードをサポートしていません。同じスコープ内の関数及びメソッドにはユニークな名前を付ける必要があります。代替手段としては<a href="https://yourbasic.org/golang/overload-overwrite-optional-parameter/" target="_blank" rel="noopener">Optional parameters and method overloading</a>を参照してください。</li><li>Goには組み込みのスライスやマップといったジェネリクス及び、<code>append</code> や <code>copy</code> といったジェネリクス用関数があります。しかし、ジェネリクス用関数を独自実装できる機構はありません。代替手段としては、<a href="https://yourbasic.org/golang/generics/" target="_blank" rel="noopener">Generics (alternatives and workarounds)</a>を参照してください。</li></ul><h2 id="シンタックス（文法）"><a href="#シンタックス（文法）" class="headerlink" title="シンタックス（文法）"></a>シンタックス（文法）</h2><h3 id="宣言"><a href="#宣言" class="headerlink" title="宣言"></a>宣言</h3><p>変数の宣言の仕方は、Javaと比べると逆になっています。Goでは変数名の後ろに型名を記述します。これによってGoのコンパイラが「変数××の型は○○である」と解釈しやすくなります。</p><table><thead><tr><th align="left">Goの書き方</th><th align="left">Javaでざっくりイコールな書き方</th></tr></thead><tbody><tr><td align="left">var v1 int</td><td align="left">int v1 = 0;</td></tr><tr><td align="left">var v2 *int</td><td align="left">Integer v2 = null;</td></tr><tr><td align="left">var v3 string</td><td align="left">String v3 = “”;</td></tr><tr><td align="left">var v4 [10]int</td><td align="left">int[] v4 = new int[10];  <br> (Arrays are values in Go.)</td></tr><tr><td align="left">var v5 []int</td><td align="left">int[] v5 = null;</td></tr><tr><td align="left">var v6 *struct{ a int }</td><td align="left">class C { int a; } <br> C v6 = null;</td></tr><tr><td align="left">var v7 map[string]int</td><td align="left">HashMap&lt;String, Integer&gt; v7; <br> v7 = null;</td></tr><tr><td align="left">var v8 func(a int) int</td><td align="left">interface F { <br> &nbsp;&nbsp;&nbsp;&nbsp;int f(int a); <br> } <br> F v8 = null;</td></tr></tbody></table><p>一般的に、宣言ではキーワードの後ろにオブジェクト<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>の名称が続きます。キーワードとは<code>const</code>、<code>type</code>、<code>var</code>や<code>func</code>などです。キーワードの後ろに括弧でまとめて宣言を書くこともできます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    n <span class="keyword">int</span></span><br><span class="line">    x <span class="keyword">float64</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>関数を定義する時、引数の名前の付け方は統一する必要があります。それぞれの引数に名前をつけるか、または全く名前をつけないかです。いずれかに名前をつけ、いずれかは省略するということはできません。複数の引数が同じ型の場合、グループ化することは可能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(i, j, k <span class="keyword">int</span>, s, t <span class="keyword">string</span>)</span></span></span><br></pre></td></tr></table></figure><p>変数は宣言の時に初期化することもできます。初期化も行う場合、変数の型を特定することもできますが、必須ではありません。型が特定されていない場合は、初期化式の右辺の値の型が設定されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v9 = *v2</span><br></pre></td></tr></table></figure><p>もしも変数が明示的に初期化されていない場合でも、型は指定する必要があります。この場合、初期値は暗黙的に<a href="https://yourbasic.org/golang/default-zero-value/" target="_blank" rel="noopener">ゼロ値</a>（0、<code>nil</code>、””など）が与えられます。Goの世界では初期化されていない変数は存在しません。</p><h3 id="宣言の省略形"><a href="#宣言の省略形" class="headerlink" title="宣言の省略形"></a>宣言の省略形</h3><p>関数の中では、<code>:=</code>で宣言を簡略化することもできます。例えばこの文は</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v10 := v1</span><br></pre></td></tr></table></figure><p>下の文と同様の意味を持ちます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v10 = v1</span><br></pre></td></tr></table></figure><h3 id="関数型"><a href="#関数型" class="headerlink" title="関数型"></a>関数型</h3><p>Goでは、関数は第一級オブジェクトに属しています。Goの世界では、引数と戻り値の型が同一の関数は全て同じ<a href="https://yourbasic.org/golang/function-pointer-type-declaration/" target="_blank" rel="noopener">関数型</a>をしているとみなされます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> binOp <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">op</span> <span class="title">binOp</span></span></span><br><span class="line"><span class="function"><span class="title">add</span> := <span class="title">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> i + j &#125;</span><br><span class="line"></span><br><span class="line">op = add</span><br><span class="line">n = op(<span class="number">100</span>, <span class="number">200</span>)  <span class="comment">// n = 100 + 200</span></span><br></pre></td></tr></table></figure><h3 id="複数割り当て"><a href="#複数割り当て" class="headerlink" title="複数割り当て"></a>複数割り当て</h3><p>Goでは代入で複数の値を割り当てることができます。右側の式は左側の被演算子に割り当てられる前に評価されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i, j = j, i  <span class="comment">// iとjを置き換える</span></span><br></pre></td></tr></table></figure><p>関数が複数の値を戻り値として返すこともできます。その場合括弧()の中に列挙して示します。戻り値を一度に複数の変数に保存することもできます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span> <span class="params">(i <span class="keyword">int</span>, pj *<span class="keyword">int</span>)</span></span> &#123; ... &#125;</span><br><span class="line">v1, v2 = f()</span><br></pre></td></tr></table></figure><h3 id="ブランク識別子"><a href="#ブランク識別子" class="headerlink" title="ブランク識別子"></a>ブランク識別子</h3><p><a href="https://yourbasic.org/golang/underscore/" target="_blank" rel="noopener">ブランク識別子</a>は<code>_</code>(アンダースコア）で表され、複数の戻り値が返ってくる式で値を無視したい場合に用いられます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1, _ = f()  <span class="comment">// f()の関数から返ってきた2つ目の値を無視する</span></span><br></pre></td></tr></table></figure><h3 id="セミコロンとフォーマット"><a href="#セミコロンとフォーマット" class="headerlink" title="セミコロンとフォーマット"></a>セミコロンとフォーマット</h3><p>セミコロンやフォーマットで悩む必要はありません。「gofmt」を使えば、唯一のスタンダードであるGoのスタイルに整形することができます。このスタイルは最初は違和感を感じるかもしれませんが、他のスタイルと同じように良く、また慣れてしまえば快適なものとなるでしょう。</p><p>実際、セミコロンを使う機会はGoではめったにありません。理論上、Goの全ての宣言はセミコロンで終わります。しかしGoは、行が明らかに処理途中のものでない限り、空白でない行の終わりに暗黙的にセミコロンを挿入します。これによって、場合によっては改行が許されないケースもでてくるのです。例えば、下のような書き方は許されません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;            <span class="comment">// 不正: "&#123;" は前の行に存在すべきである</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この場合、<code>g()</code> のすぐあとにセミコロンが挿入されてしまいます。その結果、関数を定義しているのではなく関数を宣言しているとみなされてしまいます。同様に、下のような書き方もできません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;       <span class="comment">// 不正: "else &#123;" は前の行に存在すべきである</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この場合、<code>else</code>の前の<code>}</code>の直後にセミコロンが挿入されてしまい、結果として文法エラーになります。</p><h3 id="if文（条件文）"><a href="#if文（条件文）" class="headerlink" title="if文（条件文）"></a>if文（条件文）</h3><p>Goではif文、for文の条件式、switch文の値を括弧()で囲みません。一方、if文やfor文のボディは中括弧{}で囲む必要があります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a &lt; b &#123; f() &#125;</span><br><span class="line"><span class="keyword">if</span> (a &lt; b) &#123; f() &#125;          <span class="comment">// 括弧は不要</span></span><br><span class="line"><span class="keyword">if</span> (a &lt; b) f()              <span class="comment">// 不正</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;&#125; <span class="comment">// 不正</span></span><br></pre></td></tr></table></figure><p>さらに、if文やswitch文ではオプショナルな初期化式を記述することもできます。多くの場合これはローカル変数を設定するときに用いられます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := file.Chmod(<span class="number">0664</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Print(err)</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="For文"><a href="#For文" class="headerlink" title="For文"></a>For文</h3><p>Goにはwhile文もdo-while文もありません。for文を単一の条件と一緒に用いることができ、これがwhile文と同様の動きになります。条件を完全に省略すると無限ループ文となります。</p><p><a href="https://yourbasic.org/golang/for-loop/" target="_blank" rel="noopener">for文</a>は文字列（<code>string</code>）、配列（<code>array</code>）、スライス（<code>slice</code>）、マップ（<code>map</code>）やチャネル（<code>channel</code>）を <code>range</code> 句に指定できます。通常であれば下のように書きますが、</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(a); i++ &#123; ... &#125;</span><br></pre></td></tr></table></figure><p><code>a</code>の各要素に対して繰り返して処理をしたい場合、下のように書くことができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> a &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>上の書き方では、<code>i</code>にインデックスが割り当てられ、<code>v</code>に配列やスライス、文字列などの要素の連続する値が割り当てられます。</p><ul><li>文字列の場合は、<code>i</code>はバイトごとのインデックスとなり、<code>v</code>は<code>rune</code>型のUnicodeのコードポイント<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>となります（<code>rune</code>は<code>int32</code>のエイリアスです）。</li><li>mapでの繰り返しはキー・バリューのペアの反復値を生成しますが、チャネルは反復値を１つだけ生成します。</li></ul><h3 id="BreakとContinue"><a href="#BreakとContinue" class="headerlink" title="BreakとContinue"></a>BreakとContinue</h3><p>Javaと同じように、Goでも<code>break</code>と<code>continue</code>でラベルを指定することができますが、for文、switch文、select文の中でラベルを参照する必要があります。</p><h3 id="Switch文"><a href="#Switch文" class="headerlink" title="Switch文"></a>Switch文</h3><p>Goの<a href="https://yourbasic.org/golang/switch-statement/" target="_blank" rel="noopener">switch文</a>では、<code>break</code>を書かなくても、<code>switch</code> から抜け出ることができます。コードブロックの最後に<code>fallthrough</code>文を置くことで、次の <code>case</code>に処理を回すことができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> n &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: <span class="comment">// caseの中身は空である</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    f() <span class="comment">// n == 0のときf()は呼ばれない</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>しかし、<code>case</code>は複数の値を持つことができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> n &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>, <span class="number">1</span>:</span><br><span class="line">    f() <span class="comment">// n == 0 または n == 1のときf()が呼ばれる</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>case</code>の中の値は、例えば文字列やポインタなど、等価比較演算子で扱うことのできるどんな型でも使えます。switch式がない場合、その式は<code>true</code>とみなされます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> n &lt; <span class="number">0</span>:</span><br><span class="line">    f1()</span><br><span class="line"><span class="keyword">case</span> n == <span class="number">0</span>:</span><br><span class="line">    f2()</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    f3()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="インクリメントとデクリメント"><a href="#インクリメントとデクリメント" class="headerlink" title="インクリメントとデクリメント"></a>インクリメントとデクリメント</h3><p><code>++</code>と<code>--</code>は後置演算子として文の中でのみ使うことができます。式の中で扱うことはできません。例えば、<code>n = i++</code>と書くことはできません。</p><h3 id="Defer文"><a href="#Defer文" class="headerlink" title="Defer文"></a>Defer文</h3><p><a href="https://yourbasic.org/golang/defer/" target="_blank" rel="noopener">defer文</a>を使うことで、呼び出し元の関数がreturnされたタイミングで実行されるべき処理を記述することができます。</p><ul><li>defer宣言された関数は、呼び出し元の関数がどのようにretrunされたかに関わらず実行されます。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></li></ul><ul><li>defer宣言された関数の引数は、defer宣言されたタイミングで計算され、実行時に使用されるまで保存されます。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f, err := os.Open(<span class="string">"filename"</span>)</span><br><span class="line"><span class="keyword">defer</span> f.Close() <span class="comment">// fはこの関数がreturnされたときに終了する</span></span><br></pre></td></tr></table></figure><h2 id="定数"><a href="#定数" class="headerlink" title="定数"></a>定数</h2><p>Goの定数は<a href="https://yourbasic.org/golang/untyped-constants/" target="_blank" rel="noopener">untypedな状態</a>にすることもできます<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>。このルールは下記に適用されます。</p><ul><li>数値リテラル、</li><li>型なしの定数のみを用いている式、</li><li>型が与えられていない、もしくは初期化式が型なしであるconst式</li></ul><p>型なしの定数の値は、型のある値が必要になったタイミングで型定義されます。これにより、Goでは明示的な型変換が行われないにも関わらず、定数を比較的自由に扱うことができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">uint</span></span><br><span class="line">f(a + <span class="number">1</span>)   <span class="comment">// 型の定義されていない数値1はuintとして型定義される</span></span><br><span class="line">f(a + <span class="number">1e3</span>) <span class="comment">// 1e3もuintとして定義される</span></span><br></pre></td></tr></table></figure><p>Go言語では型定義のない数値の定数に上限値は明確にされません。型が必要になったときにのみ上限は適用されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> huge = <span class="number">1</span> &lt;&lt; <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> n <span class="keyword">int</span> = huge &gt;&gt; <span class="number">98</span></span><br></pre></td></tr></table></figure><p>もしも変数宣言において型が定義されておらず、対応する式が型のない数値の定数だった場合、その数値は、値が文字列なのかintegerなのか浮動小数点なのか複素定数なのかによって<code>rune</code>、<code>int</code>、<code>float64</code>か<code>complex128</code>の型にそれぞれ変換されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c := <span class="string">'å'</span>    <span class="comment">// rune (int32のエイリアス)</span></span><br><span class="line">n := <span class="number">1</span> + <span class="number">2</span>  <span class="comment">// int</span></span><br><span class="line">x := <span class="number">2.7</span>    <span class="comment">// float64</span></span><br><span class="line">z := <span class="number">1</span> + <span class="number">2i</span> <span class="comment">// complex128</span></span><br></pre></td></tr></table></figure><p>Goでは列挙型を扱いません。その代わりに、連続して増え続ける値を唯一const宣言することができる<code>iota</code>という特別な名称をつけることができます。constの初期化式が省略された時は、先に定義された式が再利用されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    red = <span class="literal">iota</span> <span class="comment">// red == 0</span></span><br><span class="line">    blue       <span class="comment">// blue == 1</span></span><br><span class="line">    green      <span class="comment">// green == 2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="構造体"><a href="#構造体" class="headerlink" title="構造体"></a>構造体</h2><p><a href="https://yourbasic.org/golang/structs-explained/" target="_blank" rel="noopener">構造体</a>はJavaでいうクラスのようなものですが、構造体のメンバにはメソッドを含めることはできません。構造体は変数のみで構成されます。構造体のポインタは、Javaでいう参照変数のようなものです。Javaのクラスとは対照的に、Goの構造体は直接の値として定義することもできます。どちらの場合でも、構造体のメンバにアクセスするには<code>.</code>を用います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">    s <span class="keyword">string</span></span><br><span class="line">    n <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x MyStruct     <span class="comment">// x は MyStruct&#123;"", 0&#125; に初期化される</span></span><br><span class="line"><span class="keyword">var</span> px *MyStruct   <span class="comment">// px は nil に初期化される</span></span><br><span class="line">px = <span class="built_in">new</span>(MyStruct) <span class="comment">// px は新たに作られる MyStruct&#123;"", 0&#125; のポインタとなる</span></span><br><span class="line"></span><br><span class="line">x.s = <span class="string">"Foo"</span></span><br><span class="line">px.s = <span class="string">"Bar"</span></span><br></pre></td></tr></table></figure><p>Goでは、ユーザー定義型に対してメソッドを追加することができます。これは構造体をベースにしたユーザー定義型に限った話ではありません。詳しくは<a href="https://yourbasic.org/golang/go-java-tutorial/#methods-and-interfaces" target="_blank" rel="noopener">メソッドとインターフェース</a>をご参照ください。</p><h2 id="ポインタ"><a href="#ポインタ" class="headerlink" title="ポインタ"></a>ポインタ</h2><p>int, struct, arrayの代入操作は、オブジェクト実体をコピーすることを意味します。Javaでいう参照変数をGoで実現するためには<a href="https://yourbasic.org/golang/pointers-explained/" target="_blank" rel="noopener">ポインタ</a>を使用します。</p><p>任意の型Tには、対応するポインタ型 <code>*T</code> があり、型Tの値へのポインタを示します。</p><p>ポインタ変数が参照するメモリ領域を割り当てるには、組み込み関数 <code>new</code> を使用します。これは、型を引数として受け取り、割り当てられたストレージへのポインタを返す関数です。割り当てられたストレージ領域は、その型に対応するゼロ値で初期化されます。例えば、<code>new(int)</code> はint用にストレージの割り当てを新規で行い、その領域を値0で初期化し、そして <code>*int</code> 型を持つそのアドレスを返します。</p><p><code>T p = new T()</code> というJavaコードをGoコードに置き換えてみましょう。<code>T</code> は２つの <code>int</code> 型インスタンスを持つクラスだとします。これに対応するGoコードは次のとおりです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123; a, b <span class="keyword">int</span> &#125;</span><br><span class="line"><span class="keyword">var</span> p *T = <span class="built_in">new</span>(T)</span><br></pre></td></tr></table></figure><p>より慣用的には次のように書きます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p := <span class="built_in">new</span>(T)</span><br></pre></td></tr></table></figure><p> <code>var v T</code> は型Tの値を保持するための変数を宣言していますが、こういった宣言方法はJavaには存在しません。<br>複合リテラルを使用して値を初期化することもできます。例えば：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v := T&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>これは以下と同じです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v T</span><br><span class="line">v.a = <span class="number">1</span></span><br><span class="line">v.b = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>型Tの変数xの場合、アドレス演算子 <code>＆x</code> はxのアドレス(<code>*T</code> 型の値)を提供します。例えば：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p := &amp;T&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// pは型 *Tを持つ</span></span><br></pre></td></tr></table></figure><p>変数xがポインタ型変数の場合、ポインタの間接参照 <code>*x</code>は、xが指す値を示します。ポインタの間接指定はほとんど使用されません。GoはJavaと同様に、変数のアドレスを自動的に取得できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p := <span class="built_in">new</span>(T)</span><br><span class="line">p.a = <span class="number">1</span> <span class="comment">// (*p).a = 1 に等しい</span></span><br></pre></td></tr></table></figure><h2 id="スライス"><a href="#スライス" class="headerlink" title="スライス"></a>スライス</h2><p><a href="https://yourbasic.org/golang/slices-explained/" target="_blank" rel="noopener">スライス</a>は概念的には下記の3つのフィールドをもつ構造体です。</p><ul><li>配列に対するポインタ</li><li>長さ</li><li>容量</li></ul><p>スライスでは<code>[]</code>演算子を使ってスライス内部の配列の要素にアクセスします。</p><ul><li>組み込み関数である<code>len</code>関数はスライスの長さ(<code>length</code>)を返します。</li><li>組み込み関数である<code>cap</code>関数はスライスの容量(<code>capacity</code>)を返します。</li></ul><p>ある配列やスライス(例えば<code>a</code>)から新規のスライスを生成する場合、<code>a[i:j]</code>の形で生成することができます。この<code>a[i:j]</code>は</p><ul><li>インデックス<code>i</code>からインデックス<code>j</code>の手前までの<code>a</code>を参照したスライスになります。</li><li><code>j-i</code>の長さを持っています。</li><li><code>i</code>が省略されていた場合、スライスは0を起点とします。</li><li><code>j</code>が省略された場合、スライスはaの長さ（len(a)）までの長さとなります。</li></ul><p>新しくできたスライスは<code>a</code>が参照しているものと同一の配列を参照します。つまり、新しいスライスで要素が変更された場合、<code>a</code>の要素も同じように変更されます<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>。</p><p>新しいスライスの容量は、純粋に<code>a</code>から<code>i</code>を引いた差分となります。配列の容量と配列の長さはイコールです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">10</span>]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">s = a[:] <span class="comment">// s = a[0:len(a)]の短縮形</span></span><br></pre></td></tr></table></figure><p>もし、<code>[100]byte</code>型の値（<code>byte</code>100個分の配列、例えばバッファ）を作り、関数に参照渡しをしたいのであれば、<code>[]byte</code>型の引数を持つ関数を宣言し、配列をスライスに変えて、その引数に渡してあげるのが良いでしょう<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup>。スライスは、<a href="https://yourbasic.org/golang/go-java-tutorial/#making-values" target="_blank" rel="noopener">下記</a>に書いてあるような<code>make</code>関数でも作り出すことができます。</p><p>スライスには組み込み関数<code>append</code>が備え付けられており、Javaの<code>ArrayList</code>とほぼ同様の機能を持っています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s0 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">s1 := <span class="built_in">append</span>(s0, <span class="number">3</span>)     <span class="comment">// 要素を1つ追加する</span></span><br><span class="line">s2 := <span class="built_in">append</span>(s1, <span class="number">4</span>, <span class="number">5</span>)  <span class="comment">// 要素を複数追加する</span></span><br><span class="line">s3 := <span class="built_in">append</span>(s2, s0...) <span class="comment">// スライスを1つ追加する</span></span><br></pre></td></tr></table></figure><p>スライス構文は文字列と一緒に使うこともできます。文字列のスライスは、オリジナルの文字列の部分文字列を返します。</p><h2 id="値の作成"><a href="#値の作成" class="headerlink" title="値の作成"></a>値の作成</h2><p>Mapやチャネルの値は、組み込み関数である<code>make</code>関数によって割り当てられていなければなりません。例えば、</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br></pre></td></tr></table></figure><p>をコールすると、新しく<code>map[string]int</code>型で割り当てられた値が返ってきます。</p><p><code>new</code>とは対照的に、<code>make</code>はアドレスではなくオブジェクトそのものが返ってきます。これはMapやチャネルが参照型であるという事実に一致しています。</p><p>Mapの場合、<code>make</code>では第2オプション引数に容量ヒントを渡すことができます。</p><p>チャネルの場合は、第2オプション引数はチャネルのバッファの容量となります。デフォルトは<code>0</code>です。（バッファがない状態）</p><p><code>make</code>関数はスライスを割り当てる場合にも使用されます。この場合<code>make</code>関数は、スライスのもとになる配列にメモリを割り当て、それを参照するスライスを返します。必須の引数として、スライスの要素数を渡さなければなりません。第2オプション引数でスライスの容量を指定できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>, <span class="number">20</span>) <span class="comment">// new([20]int)[:10]と同意</span></span><br></pre></td></tr></table></figure><h2 id="メソッドとインターフェース"><a href="#メソッドとインターフェース" class="headerlink" title="メソッドとインターフェース"></a>メソッドとインターフェース</h2><p>メソッドは、レシーバーを持っていることを除いて、通常の関数定義のような見た目をしています。レシーバーは、Javaインスタンスメソッドのthis参照に似ています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyType <span class="keyword">struct</span> &#123; i <span class="keyword">int</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *MyType)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p.i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pm = <span class="built_in">new</span>(MyType)</span><br><span class="line"><span class="keyword">var</span> n = pm.Get()</span><br></pre></td></tr></table></figure><p>上記の例では、 <code>MyType</code> に関連付けられた <code>Get</code> メソッドを宣言しています。このメソッドの中で、レシーバーはpという名前を付けられています。</p><p>メソッドは定義済みの型に対して宣言されます。レシーバーを別の型に変換すると、変換後の新しい変数は変換前の型のメソッドではなく、変換後の型のメソッドを持つようになります。</p><p>組み込み型から派生した新しい型を宣言することにより、組み込み型にメソッドを定義できます。その新しい型は、もとの組み込み型とは全く別のものとなります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInt <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p MyInt)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">int</span>(p) <span class="comment">// intへの変換は必須</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> v MyInt</span><br><span class="line"></span><br><span class="line">v = v * v <span class="comment">// 派生元の演算子は引き続き使用できる</span></span><br><span class="line">f(<span class="keyword">int</span>(v)) <span class="comment">// int(v) には宣言されたメソッドがない</span></span><br><span class="line">f(v)      <span class="comment">// INVALID</span></span><br></pre></td></tr></table></figure><h3 id="インターフェース"><a href="#インターフェース" class="headerlink" title="インターフェース"></a>インターフェース</h3><p>Go<a href="https://yourbasic.org/golang/interfaces-explained/" target="_blank" rel="noopener">インターフェース</a>はJavaインターフェースに似ていますが、Goインターフェースの場合、インターフェースが要求するメソッド群を提供している型はみな、そのインターフェースの実装として扱われます。明示的な宣言は必要ありません。</p><p>以下のインターフェースが定義されているとします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">    Get() <span class="keyword">int</span></span><br><span class="line">    Set(i <span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MyType</code> はすでに <code>Get</code> メソッドを持っているので、 <code>Set</code> メソッドを追加することにより、 <code>MyType</code> が <code>MyInterface</code> を満たすようになります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *MyType)</span> <span class="title">Set</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    p.i = i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MyInterface</code> を引数にもつ関数は皆、 <code>*MyType</code> 型の変数を受け容れます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetAndSet</span><span class="params">(x MyInterface)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p MyType</span><br><span class="line">    GetAndSet(&amp;p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Javaの用語を使うとすると、 <code>*MyType</code> の <code>Set</code> および <code>Get</code> を定義すると、 <code>*MyType</code> が自動的に <code>MyInterface</code> を <code>implement</code> します。<br>型は複数のインターフェースを満たすことができます。これはダックタイピングの一種です。</p><blockquote><p>アヒルのように歩き、アヒルのように泳ぎ、アヒルのように鳴く鳥を見るとき、私はその鳥をアヒルと呼ぶ。<br>– James Whitcomb Riley</p></blockquote><h3 id="埋め込み（委譲）"><a href="#埋め込み（委譲）" class="headerlink" title="埋め込み（委譲）"></a>埋め込み（委譲）</h3><p>型を匿名フィールドとして埋め込むことで、派生型を実装することができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MySubType <span class="keyword">struct</span> &#123;</span><br><span class="line">    MyType</span><br><span class="line">    j <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *MySubType)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    p.j++</span><br><span class="line">    <span class="keyword">return</span> p.MyType.Get()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事実上、MySubTypeがMyTypeの派生型として実装されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p MySubType</span><br><span class="line">    GetAndSet(&amp;p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Set</code> メソッドは <code>MyType</code> 型から継承されます。これは匿名フィールドのメソッドが、派生型のメソッドへと昇格されるためです。</p><p>この場合、 <code>MySubType</code> には <code>MyType</code> 型の匿名フィールドがあるため、 <code>MyType</code> のメソッドは <code>MySubType</code> のメソッドになります。<code>Get</code> メソッドはオーバーライドされ、 <code>Set</code> メソッドは継承されています。</p><p>これはJavaのクラス継承と同じではなく、委譲という方式をとっています。匿名フィールドのメソッドが呼び出されたとき、そのメソッドのレシーバは、派生型(<code>MySubType</code>)の方ではなく、内包する匿名フィールド(<code>MyType</code>)になります。つまり、匿名フィールドのメソッドは動的に派生型のメソッドとしてディスパッチされません。Javaの動的メソッドルックアップに相当するものが必要な場合、<code>interface</code> を使用してください。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f3</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> v MyInterface</span><br><span class="line"></span><br><span class="line">    v = <span class="built_in">new</span>(MyType)</span><br><span class="line">    v.Get() <span class="comment">// *MyTypeのGetメソッドをコールしている</span></span><br><span class="line"></span><br><span class="line">    v = <span class="built_in">new</span>(MySubType)</span><br><span class="line">    v.Get() <span class="comment">// *MySubTypeのGetメソッドをコールしている</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="型アサーション"><a href="#型アサーション" class="headerlink" title="型アサーション"></a>型アサーション</h3><p>あるインターフェース型が実装されている変数は、<a href="https://yourbasic.org/golang/type-assertion-switch/" target="_blank" rel="noopener">型アサーション</a>を使用して、異なるインターフェース型を持つように変換できます。これは実行時に動的に変換されます。Javaとは異なり、2つのインターフェース間の関係を宣言する必要はありません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Printer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Print()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f4</span><span class="params">(x MyInterface)</span></span> &#123;</span><br><span class="line">    x.(Printer).Print() <span class="comment">// Printerへの型アサーション</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Printer</code> への変換は動的に行われます。xが <code>Print</code> メソッドを定義している限り機能します。</p><h2 id="エラー"><a href="#エラー" class="headerlink" title="エラー"></a>エラー</h2><p>Javaでは通常例外を使用するケースでも、Goでは2つの異なるメカニズムがあります。</p><ul><li>大抵の関数ではエラーを返します。</li><li>本当にリカバーできない状況のとき、例えば範囲外のインデックスだった場合などにのみ、実行時の例外を生み出します。</li></ul><p>Goでは複数の値を返すことができますが、それによって通常の戻り値に加え、詳細なエラーメッセージを返すことが簡単にできます。慣例的に、そのようなメッセージには、シンプルな組み込みインターフェースであるerror型が存在します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例えば<code>os.Open</code>関数は、ファイルを開くことができなかった場合、<code>nil</code>でないエラー値を返します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">(file *File, err error)</span></span></span><br></pre></td></tr></table></figure><p>下記のコードではファイルを開くために<code>os.Open</code>関数を用いています。エラーが生じた場合は、エラーメッセージをログに出力して処理を中断する<code>log.Fatal</code>関数を呼び出します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f, err := os.Open(<span class="string">"filename.ext"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// オープンされた*File型のfを使った何らかの処理を行う</span></span><br></pre></td></tr></table></figure><p>エラーのインターフェースは<code>Error</code>のメソッドのみ必要としますが、特定のエラーとなるとしばしばその他のメソッドも持っています。それによって、呼び出し側がエラーの詳細を検知することができます。</p><h2 id="PanicとRecover"><a href="#PanicとRecover" class="headerlink" title="PanicとRecover"></a>PanicとRecover</h2><p><a href="https://yourbasic.org/golang/recover-from-panic/" target="_blank" rel="noopener">panic</a>は、ゴルーチンのスタックを巻き戻し、途中でdefer宣言された関数を実行してからプログラムを停止するランタイムエラーです。</p><p>panicはJavaの例外処理(exceptions)に似ていますが、ランタイムエラーのみを対象としています。例えば、<code>nil</code> ポインタを参照しようとしたときや、配列の範囲外領域にインデックスしようとしたときにpanicが発生します。EOFなどエラーイベントを表現するために、Goプログラムは<a href="https://qiita.com/wagi0716/private/37c8fa3398717a4d6b3b#%E3%82%A8%E3%83%A9%E3%83%BC" target="_blank" rel="noopener">上記</a>の <code>error</code> という組み込み型を使用します。</p><p>組み込み関数<a href="https://yourbasic.org/golang/recover-from-panic/" target="_blank" rel="noopener">recover</a>を使用して、panic状態のゴルーチンの制御を取り戻し、通常の実行を再開できます。</p><ul><li><code>recover</code> を呼び出すとスタックの巻き戻しが停止します。<code>recover</code> は <code>panic</code> に渡した引数を返します。</li></ul><p>巻き戻し中に実行されるコードはdefer宣言された関数内のコードのみであるため、<code>recover</code> はdefer宣言された関数内でのみ有用です。ゴルーチンがパニックになっていない場合、<code>recover</code> は <code>nil</code> を返します。</p><h2 id="ゴルーチンとチャネル"><a href="#ゴルーチンとチャネル" class="headerlink" title="ゴルーチンとチャネル"></a>ゴルーチンとチャネル</h2><h3 id="ゴルーチン"><a href="#ゴルーチン" class="headerlink" title="ゴルーチン"></a>ゴルーチン</h3><p>Goでは、<code>go</code> 文を使用して、新たなスレッド(ゴルーチン)を立ち上げることができます。<code>go</code> 文に続く関数は新しく作成された<a href="https://yourbasic.org/golang/goroutines-explained/" target="_blank" rel="noopener">ゴルーチン</a>上で実行されます。 1つのプログラム内のすべてのゴルーチンは、同じアドレス空間を共有します。</p><p>ゴルーチンは軽量であり、スタック領域割り当て程度のコストしかかかりません。はじめはスタックの割り当てを小さく抑え、必要に応じてヒープストレージへの割り当てと解放を行いながら大きくしていきます。内部的にゴルーチンは、複数のオペレーティングシステムスレッド間で多重化されるコルーチンのように機能します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> list.Sort() <span class="comment">// list.Sort()はパラレルに実行される</span></span><br></pre></td></tr></table></figure><p>Goには関数リテラルがあります。関数リテラルは<a href="https://yourbasic.org/golang/anonymous-function-literal-lambda-closure/" target="_blank" rel="noopener">クロージャー</a>として機能し、 <code>go</code> 文と組み合わせると強力になります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// delayで指定した時間が立つと、Publish関数は標準出力にtextを書き出す</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Publish</span><span class="params">(text <span class="keyword">string</span>, delay time.Duration)</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(delay)</span><br><span class="line">        fmt.Println(text)</span><br><span class="line">    &#125;() <span class="comment">// 括弧をつけてください。go句直後の関数はコールする必要がある</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>変数 <code>text</code> および <code>delay</code> は、<code>Publish</code> 関数とその内部の関数リテラルの間で共有されます。</p><h3 id="チャネル"><a href="#チャネル" class="headerlink" title="チャネル"></a>チャネル</h3><p><a href="https://yourbasic.org/golang/channels-explained/" target="_blank" rel="noopener">チャネル</a>は、2つのゴルーチンの処理を同期させたり、通信させたりするメカニズムを提供します。 <code>&lt;-</code> 演算子は、チャネルの方向(送信または受信)を指定します。方向が指定されていない場合、そのチャネルは送受信可能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">chan</span> Sushi     <span class="comment">// Sushi型の値を送受信するために使用できる</span></span><br><span class="line"><span class="keyword">chan</span>&lt;- <span class="keyword">float64</span> <span class="comment">// float64型を送信するためにのみ使用できる</span></span><br><span class="line">&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>     <span class="comment">// int型を受信するためにのみ使用できる</span></span><br></pre></td></tr></table></figure><p>チャネルは参照型であり、<code>make</code> で作成することができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ic := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)       <span class="comment">// バッファを持たないint型のチャネル</span></span><br><span class="line">wc := <span class="built_in">make</span>(<span class="keyword">chan</span> *Work, <span class="number">10</span>) <span class="comment">// バッファを持つ*Work型のチャネル</span></span><br></pre></td></tr></table></figure><p>チャネルに値を送信するには、<code>&lt;-</code> を二項演算子のように使用します。チャネルから値を受信するには、<code>&lt;-</code> を単項演算子のように使用します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ic &lt;- <span class="number">3</span>      <span class="comment">// チャネルに3を送信する</span></span><br><span class="line">work := &lt;-wc <span class="comment">// チャネルから*Workを受信する</span></span><br></pre></td></tr></table></figure><ul><li>チャネルがバッファを持たない場合、受信チャネルから値を取り出すまでの間、送信チャネルは処理をブロックします。</li><li>チャネルがバッファを持つ場合、送信チャネルから渡される値がバッファに書き込まれる余地があるときは処理がブロックされません。逆に、バッファがいっぱいになっているときは、受信チャネルから値を取り出すまで、送信チャネルは処理をブロックします。</li><li>受信チャネルは取り出せる値が存在するまでの間、処理をブロックします。</li></ul><p><code>close</code> 関数はこれ以上チャネルに値を送信できないようにすることができます。</p><ul><li><code>close</code> 関数が呼び出されたとします。<code>close</code> 関数が呼び出されるまでの間にすでにチャネルに送信された値は問題なく受信チャネルから取り出すことができます。その後の受信処理ではブロックは発生されず、ゼロ値を返します。</li><li>受信チャネルからは値の他に、チャネルが閉じているかどうかの指標を取り出すことができます。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch &lt;- <span class="string">"Hello!"</span></span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(&lt;-ch) <span class="comment">// "Hello!"が表示される</span></span><br><span class="line">fmt.Println(&lt;-ch) <span class="comment">// ここではブロックされず、string型のゼロ値である""が表示される</span></span><br><span class="line">fmt.Println(&lt;-ch) <span class="comment">// もう一度""が表示される</span></span><br><span class="line">v, ok := &lt;-ch     <span class="comment">// vは"", okはfalseの値をとる</span></span><br></pre></td></tr></table></figure><p>次の例では <code>Publish</code> 関数がチャネルを返すようにします。 <code>text</code> が発行されたときにメッセージをブロードキャストするためにこのチャネルが使われます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// delayで指定した時間が経過したのち、Publish関数はtextを標準出力に書き出す</span></span><br><span class="line"><span class="comment">// textが表示されたタイミングでwaitチャネルをクローズする</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Publish</span><span class="params">(text <span class="keyword">string</span>, delay time.Duration)</span> <span class="params">(wait &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(delay)</span><br><span class="line">        fmt.Println(text)</span><br><span class="line">        <span class="built_in">close</span>(ch)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Publish関数はこのように使えます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wait := Publish(<span class="string">"important news"</span>, <span class="number">2</span> * time.Minute)</span><br><span class="line"><span class="comment">// ここに何らかの処理が入る</span></span><br><span class="line">&lt;-wait <span class="comment">// textが表示されるまで、ここで処理がブロックされる</span></span><br></pre></td></tr></table></figure><h3 id="select文"><a href="#select文" class="headerlink" title="select文"></a>select文</h3><p>select文はGoの重要な並行処理ツールキットの一つです。<code>select</code> は通信時に続行する処理を選択します。</p><ul><li>どの通信も成功し得るとき、そのうちの一つがランダム選択され、対応する処理が実行されます。</li><li>defaultのケースが存在しない場合、いずれかの通信が成功するまでselect文は処理をブロックします。</li></ul><p>以下のコードは、select文を使用した乱数ジェネレーターの実装例です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rand := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">for</span> &#123; <span class="comment">// ランダムで0か1のどちらかをを続けざまに送信している</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> rand &lt;- <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">case</span> rand &lt;- <span class="number">1</span>:</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>もう少し現実的な実装例を見てみましょう。次のコードはselect文をつかって、受信操作にタイムリミットを設けている例です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> news := &lt;-AFP:</span><br><span class="line">    fmt.Println(news)</span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(time.Minute):</span><br><span class="line">    fmt.Println(<span class="string">"Time out: no news in one minute."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>time.After</code> は標準ライブラリの関数です。一定時間たった後に、現在時刻を送信するチャネルを返す関数です。</p><h2 id="Hello-server"><a href="#Hello-server" class="headerlink" title="Hello server"></a>Hello server</h2><p>これまでのピースがどのようにはまっていくのかを、ちょっとした例でお見せして終わることにしましょう。<code>server</code>パッケージはチャネルを経由して<code>Work</code>リクエストを受け入れるサーバーを実装しています。</p><ul><li>リクエストごとに別々の<code>goroutine</code>で処理が行われます。</li><li><code>Work</code>の構造体それ自身は、結果を返すために用いられるチャンネルを含んでいます。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> server</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Newでreqチャネルを経由してWorkのリクエストを受け入れるサーバーを生成する</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span> <span class="params">(req <span class="keyword">chan</span>&lt;- *Work)</span></span> &#123;</span><br><span class="line">    wc := <span class="built_in">make</span>(<span class="keyword">chan</span> *Work)</span><br><span class="line">    <span class="keyword">go</span> serve(wc)</span><br><span class="line">    <span class="keyword">return</span> wc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Work <span class="keyword">struct</span> &#123;</span><br><span class="line">    Op    <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function">    <span class="title">A</span>, <span class="title">B</span>  <span class="title">int</span></span></span><br><span class="line"><span class="function">    <span class="title">Reply</span> <span class="title">chan</span> <span class="title">int</span> // <span class="title">Server</span>はこのチャネルに結果を返す</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">serve</span><span class="params">(wc &lt;-<span class="keyword">chan</span> *Work)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> w := <span class="keyword">range</span> wc &#123;</span><br><span class="line">        <span class="keyword">go</span> safelyDo(w)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">safelyDo</span><span class="params">(w *Work)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 実行中の他のgoroutineをkillしないように、パニック状態になっているgoroutineの制御を取り戻す</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Println(<span class="string">"work failed:"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    do(w)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">(w *Work)</span></span> &#123;</span><br><span class="line">    w.Reply &lt;- w.Op(w.A, w.B)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こんな風に使えるでしょう。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> server_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"server"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := server.New()</span><br><span class="line"></span><br><span class="line">    divideByZero := &amp;server.Work&#123;</span><br><span class="line">        Op:    <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> a / b &#125;,</span><br><span class="line">        A:     <span class="number">100</span>,</span><br><span class="line">        B:     <span class="number">0</span>,</span><br><span class="line">        Reply: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    s &lt;- divideByZero</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> res := &lt;-divideByZero.Reply:</span><br><span class="line">        fmt.Println(res)</span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(time.Second):</span><br><span class="line">        fmt.Println(<span class="string">"No result in one second."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 出力結果: No result in one second.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="さらに学びたい場合"><a href="#さらに学びたい場合" class="headerlink" title="さらに学びたい場合"></a>さらに学びたい場合</h3><p><a href="https://yourbasic.org/golang/tutorials/" target="_blank" rel="noopener">Tutorials</a>は初心者にも上級者にもためになるサイトです。ベストプラクティスや、本番環境に匹敵するコード例が揃っています。</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><p>Goに関連した連載企画があります。</p><ul><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">後入れ先出し（LIFO: Last In First Out; FILO: First In Last Out）の構造</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><code>{}</code> の中で宣言されていない変数・関数をトップレベルで宣言された変数・関数と読んでいる。import文はトップレベルで宣言されている。main packageのmain関数はトップレベルで宣言されている。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">Javaの世界で呼ばれる「オブジェクト」と同義です。</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;">Unicodeの<a href="https://ja.wikipedia.org/wiki/%E7%AC%A6%E5%8F%B7%E7%82%B9" target="_blank" rel="noopener">コードポイント</a>とは、全ての文字を4桁の16進数で一意に表現したコード体系の値です。</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;">panicが発生して、呼び出し元の関数が強制的にreturnされても、defer宣言された関数は実行されます。</span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;">サンプルコード ( <a href="https://play.golang.org/p/XDaWkZqEZ9K" target="_blank" rel="noopener">https://play.golang.org/p/XDaWkZqEZ9K</a> )</span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">7.</span><span style="display: inline-block; vertical-align: top;">untypedな状態の時は型が決まっておらず、式や代入の中でその定数が用いられる時、型が決定されます。</span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">8.</span><span style="display: inline-block; vertical-align: top;">サンプルコード ( <a href="https://play.golang.org/p/J3JBKvSmYJW" target="_blank" rel="noopener">https://play.golang.org/p/J3JBKvSmYJW</a> )</span><a href="#fnref:8" rev="footnote"> ↩</a></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">9.</span><span style="display: inline-block; vertical-align: top;">サンプルコード ( <a href="https://play.golang.org/p/jTKvVIBqwMa" target="_blank" rel="noopener">https://play.golang.org/p/jTKvVIBqwMa</a> )</span><a href="#fnref:9" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JavaプログラマーのためのGo言語入門&quot;&gt;&lt;a href=&quot;#JavaプログラマーのためのGo言語入門&quot; class=&quot;headerlink&quot; title=&quot;JavaプログラマーのためのGo言語入門&quot;&gt;&lt;/a&gt;JavaプログラマーのためのGo言語入門&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Java" scheme="https://future-architect.github.io/tags/Java/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="翻訳" scheme="https://future-architect.github.io/tags/%E7%BF%BB%E8%A8%B3/"/>
    
  </entry>
  
  <entry>
    <title> Goの標準ライブラリのコードリーディングのすすめ</title>
    <link href="https://future-architect.github.io/articles/20200310/"/>
    <id>https://future-architect.github.io/articles/20200310/</id>
    <published>2020-03-09T23:55:28.000Z</published>
    <updated>2020-03-10T00:02:00.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="標準パッケージのコードリーディング会のすすめ"><a href="#標準パッケージのコードリーディング会のすすめ" class="headerlink" title="標準パッケージのコードリーディング会のすすめ"></a>標準パッケージのコードリーディング会のすすめ</h1><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>2019年のアドベントカレンダーではGo言語がその7まで続いて <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> 、盛り上がりを見せたのは記憶に新しいです。当社でもGoを扱う案件が増えてきて、社内でもいろいろなメンバが趣味や業務でGoを書いています。日々新しいGopherが生まれています。</p><p>さて、GoをはじめようとA Tour of Goをやってみたが、Goらしいコードがわからない、Go言語をより深く学びたい、という方も多いのではないでしょうか。Go言語は一部を除いて言語自体がGoで書かれており、標準パッケージはGoらしい書き方のお手本とも言われたりします。</p><p>標準パッケージのコードリーディングをしてみたいという方も多いのではないでしょうか？しかし社内で標準パッケージのコードリーディング会を取り組んでいきたいけど難しそう、以下のような疑問があるかもしれません。</p><ul><li>進め方がわからない</li><li>どのパッケージを読んだらいいかわからない</li><li>1回あたりの粒度感はどれくらいが妥当なのかわからない</li></ul><p>そこで本記事では社内で取り組んでいるGoの標準コードリーディング会の取り組みを紹介しながら、上記のような質問に答えていきたいと思います。</p><p>なおコードリーディング自体のテクニックはインターネット上でもたくさん紹介されていると思いますので、本記事では省略します。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>そもそもこのGoの標準ライブラリのコードリーディング会をどういった目的で実施しているか説明します。</p><ul><li>標準パッケージの使い方を知る<ul><li>GoDocを読んで仕様を知る</li><li>テストコードを読んで仕様を知る</li></ul></li><li>Goらしいコードの書き方を知る<ul><li>コードを読んでGoの標準ライブラリのコードの書き方を知る</li></ul></li><li>Goのテストの書き方を知る<ul><li>テストコードを読んでGoのテストの書き方を知る</li></ul></li></ul><p>コードリーディング会では、コードを読むだけではなく、GoDocを読んだり、テストを読んだりして、そもそものパッケージの仕様や使い方をおさらいしています。例えばコマンドラインでのフラグを扱う <code>flag</code> パッケージは <code>-myflag=x</code> などとしてフラグ名を引数で指定することが多いと思います。ところがテストを見ると <code>--myflag=x</code> という <code>--</code> という形式でも引数を受け取けられることが分かります。仕様を確認した上で実装を読むことで、仕様を満たすためにGoの標準ライブラリはどのように実装しているのか、という実装そのものに着目することができます。</p><p>また、参加しているメンバは初心者からベテランまで幅広く参加しています。最大公約数的な形をとって、なるべく多くのメンバにとって役に立つようにしています。</p><h2 id="読んでいるパッケージ"><a href="#読んでいるパッケージ" class="headerlink" title="読んでいるパッケージ"></a>読んでいるパッケージ</h2><p>まず社内で読んでいるパッケージは以下です。全部で 12 回実施する予定です。現在(2020/03/02)のところ <code>path</code> パッケージまで実施しました。</p><table><thead><tr><th>#</th><th>パッケージ名</th></tr></thead><tbody><tr><td>1</td><td>io</td></tr><tr><td>2</td><td>errors</td></tr><tr><td>3</td><td>hash/maphash</td></tr><tr><td>4</td><td>context</td></tr><tr><td>5</td><td>flag</td></tr><tr><td>6</td><td>path</td></tr><tr><td>7</td><td>testing</td></tr><tr><td>8</td><td>iotest</td></tr><tr><td>9</td><td>sort</td></tr><tr><td>10</td><td>net/http (client)</td></tr><tr><td>11</td><td>net/http (server)</td></tr><tr><td>12</td><td>database/sql</td></tr></tbody></table><h3 id="パッケージの選定"><a href="#パッケージの選定" class="headerlink" title="パッケージの選定"></a>パッケージの選定</h3><p>そもそも、どのパッケージを読んだらいいんだろう？という疑問があると思います。上記のパッケージを選定した方法を紹介したいと思います。</p><p>読むパッケージの選定は有志のメンバ数名で一緒に決めました。</p><p>まずパッケージのステップ数を見てスクリーニングしています。<a href="https://github.com/hhatto/gocloc" target="_blank" rel="noopener">gocloc</a> というツールを使うと以下のフォーマットで簡単にステップ数を確認することができます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">$ gocloc archive</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Language                     files          blank        comment           code</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Go                              21            782           1511           9099</span><br><span class="line">Plain Text                       2              0              0              2</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">TOTAL                           23            782           1511           9101</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ gocloc io</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Language                     files          blank        comment           code</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Go                              12            353            480           2045</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">TOTAL                           12            353            480           2045</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ gocloc runtime</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Language                     files          blank        comment           code</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Go                             577          12182          21862          75117</span><br><span class="line">Assembly                       177           5102           7567          34766</span><br><span class="line">C                               47            599            498           2273</span><br><span class="line">Python                           1            135            103            366</span><br><span class="line">Markdown                         1             71              0            240</span><br><span class="line">C Header                         8             50            156            217</span><br><span class="line">BASH                             1              1              3             11</span><br><span class="line">Makefile                         1              1              3              1</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">TOTAL                          813          18141          30192         112991</span><br><span class="line">-------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><code>runtime</code> パッケージは極端な例ですが、コードの読む前に明らかにやばい、、、ということがわかるわけです。このような要領でまずは <code>$GOROOT/src/</code> 配下にあるパッケージの一覧に対して <code>gocloc</code> を実施し、パッケージの全体感を把握しました。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><p>12回やるっ！というのは決め打ちです。標準パッケージだけでも200近くあって<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>、もちろん全部を取り上げて読むことは難しいです。かといって目標を決めないと達成感を得られにくいと考えています。Futureでは技術書の社内輪読会を実施しています <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> が、技術書の場合は一冊を技術書を読了することで達成感を得ることができます。しかし、標準パッケージのコードリーディングの場合はどの範囲をとりあげるかは任意です。</p><p>そのため今回は予め12回は実施すると決め打ちしてパッケージを選んでいきました。キリの良い10回を考えていたのですが、読みたいパッケージがあり、最終的に少し増やして12回になりました。</p><p>次に具体的に読みたいパッケージを選びます。先程の <code>gocloc</code> で得たステップ数を踏まえながら、みんなで議論しています。例えば <code>io</code> パッケージはGoらしいインターフェースの使い方を学べるからおすすめ、とか <code>hash/maphash</code> は Go1.14 で新しく追加されるパッケージだからみんなで確認しておこう、やっぱり <code>net/http</code> のHTTPサーバ、クライアントの実装は読んでおきたいよね、じゃあダメ押しで <code>database/sql</code> もやりましょう、みたいな感じです。</p><p>標準パッケージ以外のパッケージ(たとえば <code>golang.org/x</code> などです)も検討したのですが、まずは標準パッケージのみに絞って実施することにしています。</p><h2 id="運営方針"><a href="#運営方針" class="headerlink" title="運営方針"></a>運営方針</h2><h3 id="開催頻度-時間"><a href="#開催頻度-時間" class="headerlink" title="開催頻度/時間"></a>開催頻度/時間</h3><p>発表するメンバと参加するメンバも負担にならないように、開催頻度と時間は以下のようにしています。</p><ul><li>開催頻度<ul><li>週1回</li><li>毎週水曜日の夕方</li></ul></li><li>時間<ul><li>1回あたり45分程度</li></ul></li></ul><h3 id="進め方"><a href="#進め方" class="headerlink" title="進め方"></a>進め方</h3><ul><li>発表<ul><li>予め決めた2名がまとめる</li></ul></li><li>資料<ul><li>非公開のQiita記事やGitHub Gist、Google slideにまとめる</li></ul></li></ul><p>各パッケージごとに発表するメンバを2名決めました。<code>io</code> パッケージなら A さんと B さん、<code>errors</code> は C さん、D さん、が内容をまとめて発表する要領です。事前に決めた2人が宿題形式でコードを読んで資料にまとめています。まとめた資料とGoのソースコードをもとに40分程度(1人あたり20分程度)で発表しています。パッケージのコードすべてを取り上げるのではなく、コアな部分や興味がある部分を取り上げて発表しています。2人で取り組むと、同じコードを読んでいても気づかなかったり、面白かったポイントも異なり、補完できるのでオススメです。</p><p>とはいえ進め方はやっぱり難しいと感じています。いろいろなバックグラウンドを持ったメンバが参加しているので、参加したメンバが満足いくような会になっているかは悩みポイントです。</p><p>このあたりは勉強会の運営に長けているメンバがアンケートを取ってくださり、フィードバックをもらいました。アンケートの一部を抜粋します。</p><img src="/images/20200310/photo_20200310_01.png"><img src="/images/20200310/photo_20200310_02.png"><h2 id="コードリーディング会の雰囲気"><a href="#コードリーディング会の雰囲気" class="headerlink" title="コードリーディング会の雰囲気"></a>コードリーディング会の雰囲気</h2><p>参加しているメンバは、はじめてGoをさわったメンバ、A Tour of Goはとりあえずやってみたメンバ、業務でGoをガンガン書いているメンバ、趣味でGoを書いているメンバ、Goに関する本を出版しているメンバなど様々です。</p><p>また参加方法も、会議室から参加しているメンバ、リモートから参加しているメンバなど様々です。</p><p>発表内容を聞きながら、気になることや良くわからなかったこと、疑問に思ったことなどわいわい議論しています。</p><h2 id="やってみて良かったこと"><a href="#やってみて良かったこと" class="headerlink" title="やってみて良かったこと"></a>やってみて良かったこと</h2><h3 id="Goのテクニックを学べる-議論できる"><a href="#Goのテクニックを学べる-議論できる" class="headerlink" title="Goのテクニックを学べる/議論できる"></a>Goのテクニックを学べる/議論できる</h3><p>以下は参加している/発表しているメンバが紹介していた内容の一部です。実用的なテクニックや、ライブラリ独特なテクニックまでいろいろあります。</p><ul><li>インターフェースがコンパイル時に型を満たしているかチェックする方法</li><li><code>[0]func()</code> のような比較不能な型を構造体のフィールドにもたせると構造体が <code>==</code> 演算子で比較ができなくなる</li><li><code>//go:linkname ...</code> とすると外部パッケージのプライベートな関数が呼び出せる</li><li>クローズされているチャネルを生成するために <code>init</code> 関数でチャネルをクローズしている</li><li><code>for range</code> 構文はチャネルにも使える</li><li>組み込み関数の <code>close</code> でチャネルをクローズすると、複数のゴルーチンが一斉に同じチャネルを Read することができる</li><li><code>context</code> パッケージでのインターフェースを部分実装方法</li><li><code>context</code> の <code>WithDeadline</code> 関数で <code>time.AfterFunc</code> 関数で使われている</li><li><code>map</code> に値が存在するかのチェック、第二引数 <code>ok</code> じゃないこともある</li><li><code>flag</code> パッケージや <code>path</code> パッケージでパース処理は丁寧に場合分けしたり、一文字ずつ文字列を解析したり細やか<ul><li>典型的な <a href="https://www.geeksforgeeks.org/simplify-directory-path-unix-like/" target="_blank" rel="noopener">アルゴリズムの問題</a></li></ul></li><li>テストで異常系と正常系を分けたほうが、テストコードがシンプルになりそう</li><li>異常系のテストの命名で <code>bad</code> という変数名を使っていてエラーになることが命名から明らか</li><li>標準出力を使うパッケージ <code>bytes.Buffer</code> でキャプチャして <code>buf.String()</code> で結果を取得してテストしている</li><li>テストで標準出力が不要であれば <code>ioutil.Discard</code> で捨てれば良い</li><li><code>ioutil.Discard</code> は <code>/dev/null</code> っぽいけどGoのコード上でのアナロジー</li><li><code>iota</code> のイディオムよく見る</li></ul><h3 id="Go以外のテクニックも学べる-議論できる"><a href="#Go以外のテクニックも学べる-議論できる" class="headerlink" title="Go以外のテクニックも学べる/議論できる"></a>Go以外のテクニックも学べる/議論できる</h3><ul><li><code>bytes/buffer.go</code> の Read では最小のバッファサイズが 512 バイトなんだけど、これって何？<ul><li>HDD の 1 セクタの容量 512 バイトにあわせているのではないか</li></ul></li><li><code>flag</code> の <code>ExitOnError</code> のとき <code>os.Exit(2)</code> を呼び出しているけど、<code>2</code> って何？<ul><li>Bash の <a href="https://ja.wikipedia.org/wiki/%E7%B5%82%E4%BA%86%E3%82%B9%E3%83%86%E3%83%BC%E3%82%BF%E3%82%B9" target="_blank" rel="noopener">終了ステータス</a> の <code>ビルトインコマンドの誤用</code> のことを指しているのではないか</li></ul></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>社内で取り組んでいるコードリーディング会の内容と運営方法を紹介しました。Goの標準ライブラリのコードリーディング会は標準ライブラリを学べ、またGoらしいコードを学べる良い会です。本記事がみなさんの会社でコードリーディング会を実施するときの参考になれば幸いです。</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><p>Goに関連した連載企画があります。</p><ul><li><a href="[DynamoDB×Go連載](https://future-architect.github.io/tags/DynamoDB%C3%97Go/)">DynamoDB×Go連載</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><code>go list std | grep -v vender | wc -l</code> で分かります。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">今回はパッケージの一番上の階層で集計しています。実際には例えば <code>runtime</code> パッケージなどは <code>runtime/debug</code>,  <code>runtime/pprof</code> など細かく分かれています。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">https://qiita.com/advent-calendar/2019/categories/programming_languages</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;">https://future-architect.github.io/articles/20190729/</span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;標準パッケージのコードリーディング会のすすめ&quot;&gt;&lt;a href=&quot;#標準パッケージのコードリーディング会のすすめ&quot; class=&quot;headerlink&quot; title=&quot;標準パッケージのコードリーディング会のすすめ&quot;&gt;&lt;/a&gt;標準パッケージのコードリーディング会のす
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="CodeReadomg" scheme="https://future-architect.github.io/tags/CodeReadomg/"/>
    
  </entry>
  
  <entry>
    <title>アイコンセット公開！その裏側を聞いてみた</title>
    <link href="https://future-architect.github.io/articles/20200309/"/>
    <id>https://future-architect.github.io/articles/20200309/</id>
    <published>2020-03-09T01:13:26.000Z</published>
    <updated>2020-03-11T00:50:34.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは！Technology Innovation Group（TIG）の千葉駿です！</p><p>今回はFuture Tech Blog『これさえあればサービス構成図がだいたい描けるアイコンセットを公開します！』の裏側を、企画発案者の木村優里さんへインタビューをお届けします。</p><p>私もアイコン作成に携わったのですが、華やかなアイコンの裏側の地道な苦労や、外部公開による知らない人にでも使ってもらえる喜びを感じました。</p><h1 id="インタビューした人-木村優里さん"><a href="#インタビューした人-木村優里さん" class="headerlink" title="インタビューした人 木村優里さん"></a>インタビューした人 木村優里さん</h1><img src="/images/20200308/写真①.JPG" class="img-middle-size"><blockquote><p>経営とITをデザインするフューチャー歴6年目。アーキテクトチームで業務を行う傍ら、Future発OSSのロゴデザインを担当し、2016年「これさえあればシステム構成図が大体描けるアイコンセット」をFuture Tech Blogにて公開する。あまり知られていないが、上記記事は弊社Tech Blogのはてブ数第1位。（2020年2月現在）社内外の後押しを受けてバージョンアップした「これさえあればサービス構成図がだいたい描けるアイコンセット」を2020年に公開。社内ではデザインの勉強会を幾度か開催している。</p></blockquote><h2 id="興味を伝えていたら、チャンスが巡ってきた"><a href="#興味を伝えていたら、チャンスが巡ってきた" class="headerlink" title="興味を伝えていたら、チャンスが巡ってきた"></a>興味を伝えていたら、チャンスが巡ってきた</h2><br><p>ーー そもそも2016年に公開されたアイコンセットはどのようなきっかけで作ろうと思われたのですか？</p><br><p>もともと私はデザインに興味があり、BPY（※）などの社内イベント向けの資料のデザインを担当させてもらっていました。ある時に社内ツールのアイコンを作成しようという話が持ち上がり、デザインを担当しないかと、私の元へ話が来たんですね。チーム内やグループのリーダーに <strong>私がデザインに興味があるという話が伝わっていたので、推薦してくれたんだと思います。</strong></p><blockquote><p><strong>※BPY（Best Project of the Year)</strong><br>年末に1年で最もフューチャーらしいプロジェクトを全社員の投票で決め、栄誉を称えるイベント</p></blockquote><p>社内ツールのアイコン作成が進むうちに、折角だからシステム構成図を書くために必要な <strong>他のアイコンも一通り作成しようよ</strong>、ということになりまして。それがアイコンセットを作成するに至った、最初のきっかけです。</p><img src="/images/20200308/写真②.JPG" class="img-middle-size"><p>それまではシステム構成図作成に必要なアイコンを探す手間があり、見つけてもテイストがバラバラで使いづらいということがあったので、<strong>このアイコンセットをダウンロードすれば必要なアイコンがだいたい一式そろえばいいな</strong>と思って作成しました。</p><h2 id="何はともあれアイコン制作してみる"><a href="#何はともあれアイコン制作してみる" class="headerlink" title="何はともあれアイコン制作してみる"></a>何はともあれアイコン制作してみる</h2><br><p>ーー 実際にアイコンを作成してみていかがでしたか？</p><br><p>当社はITコンサルの会社なので正直デザインに知見のある人は少なく、一人で手探りで進めるような状態でした。でも、興味のあったデザイン作成を会社としてやらせてもらえたので、そこは面白かったですね。</p><p>完成したアイコンセットは最初は社内ポータルで内部向けに公開し、提案書などで使ってもらっていたんですが、FutureがTech Blogを始めたタイミングで、折角なら外部へ公開しないかと提案があり、公開するに至りました。</p><p><a href="https://future-architect.github.io/articles/20160721/">https://future-architect.github.io/articles/20160721/</a></p><h2 id="お客様の資料に見覚えのある「あのアイコン」"><a href="#お客様の資料に見覚えのある「あのアイコン」" class="headerlink" title="お客様の資料に見覚えのある「あのアイコン」"></a>お客様の資料に見覚えのある「あのアイコン」</h2><br><p>ーー なるほど。私は2016年入社なので新人研修中にアイコンセットの公開記事をみて、なかなか異色だったので印象に残っています。今回はどのような経緯でバージョンアップに至ったのですか？<br><strong>お客様がアイコンを使っていた</strong>、という話をプロジェクトメンバーから聞いたことがきっかけですね。</p><br><p>フューチャーの誰かが宣伝したというわけではなく、たまたま使っていたようで。プロジェクトメンバーがミーティングの場でお客様が作成したシステム構成図に見覚えがあり、「<strong>これ、木村さんのアイコンでは？</strong>」となって、教えてくれました。<br>単純に使ってもらえているのが嬉しかったですし、前回作成から期間も経ちアイコン追加のリクエストもあったので、バージョンアップする話になりました。</p><img src="/images/20200308/図①.png" class="img-middle-size"><p>2016年に公開した作ったアイコン</p><p>前半はここまで。社外で使ってもらえているのは嬉しいですね。私もぜひ「これ自分の作ったあれでは？」の現場に遭遇したいです。</p><h2 id="後半はいよいよバージョンアップの裏側へ迫ります。新バージョンのアイコンに込められた思いについて聞きます。"><a href="#後半はいよいよバージョンアップの裏側へ迫ります。新バージョンのアイコンに込められた思いについて聞きます。" class="headerlink" title="後半はいよいよバージョンアップの裏側へ迫ります。新バージョンのアイコンに込められた思いについて聞きます。"></a>後半はいよいよバージョンアップの裏側へ迫ります。新バージョンのアイコンに込められた思いについて聞きます。</h2><br><p>ーー 今回のアイコンのバージョンアップにあたり、他との差別化など意識した点はありますか？例えばクラウドベンダーなどは公式のアイコンセットを公開していますが。</p><br><p>サービス構成図を書くためという大元の目的は前回と同様ですが、 <strong>より汎用性を持たせる点</strong> を意識しましたね。前回は社内ツールを基点としてアイコンを選定したんですが、今回は所属するTIG内でどのようなアイコンが欲しいかアンケートをとり、技術的に流行りのものや業務で使えるものを選定しています。</p><p>また社外でも汎用的に使いやすいように、<strong>46種類のアイコンを追加し、色違いを含めてトータルで107種類の様々なバリエーション</strong> のアイコンを、PNG形式とSVG形式で用意しました。</p><img src="/images/20200308/図②.png" class="img-middle-size"><p>今回新たに公開したアイコン<br>使い勝手を考え、人のデザインはカラーバリエーションを豊富に用意しています。例えば、企業カラーに合わせて使ってもらって、所属会社を区別するような感じで使えるかなと。業界や職種に合わせたデザインを用意する案もあったんですが、種類は無数に存在していて作成しきれないですし、汎用性にも欠けるのであえて色だけにしました。</p><p>また、様々なデバイスがインターネットに接続される時代ですので、自動車やスマートスピーカーなどといったバリエーションを増やしました。<br>それから、前回はシステムなどの静的なオブジェクトが多かったんですが、 <strong>今回はステータスなど動的な表現できるアイコンを用意</strong> しました。<br>より使いやすくなるよう心がけたので、<strong>ぜひ実務のスライドなどで使ってもらいたい</strong>と思います。</p><h2 id="チームでアイコン作成。ノウハウを横展開する"><a href="#チームでアイコン作成。ノウハウを横展開する" class="headerlink" title="チームでアイコン作成。ノウハウを横展開する"></a>チームでアイコン作成。ノウハウを横展開する</h2><br><p>ーー 前回からの違いといえば、今回はチームでアイコン作成をしましたよね。私もお手伝いしましたが、何かきっかけがあったんでしょうか？</p><br><p>もともとは前回と同様にひとりで作成する想定だったんですが、プロジェクトメンバーにアイコンバージョンアップの話をしたところ、人を募ってチームでやってみてはどうかと提案されました。デザインに興味あるけど、Illustratorなどのツール使ったことなく、 <strong>何から手をつければいいか分からない人たちに、きっかけを与えられるかもしれないから</strong>、と。</p><p>実際に周りに聞いてみると興味ある人がいたので、今回は人を募ってチームでやる形になりました。チームの全体ミーティングの場でメンバー募集してみたところ、 <strong>有志の活動にも関わらず何人も集まってくれて、嬉しかったですね。</strong></p><img src="/images/20200308/写真③.JPG" class="img-middle-size"><br><p>ーー なるほど、そういう経緯だったのですね。私もやってみたかったことなので、人を募ってもらってよかったです。実際にチームで進めるにあたり、注意した点などありますか？</p><br><p><strong>メンバーにはまずツールを使えるようになってもらいたかった</strong>ので、デザインは私が考えて、作成をメンバーに手伝ってもらうという形にしました。<br>とりあえず<strong>ツールが使えれば、あとは各々デザインが必要な時に進められる</strong>と思ったので。<br>今回はIllustratorを使いました。ハンズオンの資料を作って、<strong>Illustrator講座を開催するところから</strong>始めました。こちらで用意したサンプルを作ってもらいながら、Illustratorの操作方法を学んでもらう感じですね。</p><p>一通りアイコン作成に必要な操作を覚えたら、一人に数種類アイコンを割り当て、作成してもらいました。作業時間も黙々会のように時間の枠を設けて、みんなで会議室にあつまってやりました。各々空いた時間に作ってね、とすると、なかなか作らないと思ったので（笑）</p><p>作成作業自体も、各々に手を動かしてもらい、私は口頭でアドバイスするのみで、<strong>できるだけ効率よくメンバーのスキルが上がるように</strong>意識しました。<br>最後にメンバーが作ったアイコンのレビュー作業や、全体のバランスを整えたりしたんですが、これだけはチームでは出来ないので孤独な作業でしたね。対象となるファイル数がかなりの数だったので、地味だけどかなり大変でした。無事公開まで漕ぎ着けることができてよかったです。<br>また、今回の活動を通してIllustratorの使い方を学んだことで、個人的にIllustratorを購入してデザインを始めた人も出てきました。その話を聞いて、チームでやってよかったなと思いました。</p><h2 id="とりあえず始めたことが今後のキャリアへ"><a href="#とりあえず始めたことが今後のキャリアへ" class="headerlink" title="とりあえず始めたことが今後のキャリアへ"></a>とりあえず始めたことが今後のキャリアへ</h2><br><p>ーー 私もハンズオンではお世話になりました。そしてレビューお疲れさまでした。おかげさまで私も一人でデザイン作成を進められるようになりました。最後に、木村さんが今後やってみたいことや、チャレンジなどあればお聞かせください。</p><br><p>実は、これから大学で心理学を学ぼうかと思っています。<strong>デザインを学んでいくにつれて、人間の認知や思考のプロセスを意識すること</strong> が重要であると感じるようになりました。</p><p>面白いと思ったのが、<strong>作る側のプロセスも人それぞれ</strong>ということです。今回のアイコン作成のハンズオンでも、サンプルと同じ図を各メンバーに作ってもらったんですが、その際、詳細な作成手順は提示しませんでした。すると、形を完璧に作ってから色を乗せる人がいたり、全体像を作ってから微調整を繰り返す人がいたり、自然と完成までに個人ごとの手順がありました。<strong>こういった思考法の違いを深掘りしていければ、デザインによるアプローチもより効果的なものになるのでは</strong>、と考えています。</p><p>普段はITコンサルとしてシステムを作っていく仕事をしていますが、今後はより人間にも着目して視野を広げていきたいです。</p><img src="/images/20200308/写真⑤.JPG" class="img-middle-size"><p>インタビューを終えて、前例のないことに果敢にチャレンジした木村さんの姿は、フューチャーの「<strong>ないものはつくる</strong>」をまさに体現していた事例だと思いました。<br><strong>やりたいことを最後までやりきる熱意と未来のビジョン</strong>に私も刺激を受けました！</p><hr><img src="/images/20200308/インタビュア.jpg" class="img-middle-size"><hr><p>関連記事:</p><ul><li><a href="https://future-architect.github.io/articles/20200204/">これさえあればサービス構成図がだいたい描けるアイコンセットを公開します！</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは！Technology Innovation Group（TIG）の千葉駿です！&lt;/p&gt;
&lt;p&gt;今回はFuture
      
    
    </summary>
    
      <category term="インタビュー" scheme="https://future-architect.github.io/categories/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%93%E3%83%A5%E3%83%BC/"/>
    
    
      <category term="icon" scheme="https://future-architect.github.io/tags/icon/"/>
    
  </entry>
  
  <entry>
    <title>DynamoDB×Go#3 Go CDKでどこまでいける？機能を調べてみた</title>
    <link href="https://future-architect.github.io/articles/20200228/"/>
    <id>https://future-architect.github.io/articles/20200228/</id>
    <published>2020-02-28T01:13:26.000Z</published>
    <updated>2020-03-09T04:33:45.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG DXユニット<a href="https://twitter.com/laqiiz" target="_blank" rel="noopener">真野</a>です。この技術ブログの運営もしています。</p><p><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載</a>の第3弾目です。今までは <code>AWS SDK Go</code> やそれをラップした<code>guregu/dynamo</code> について説明していましたが、 <strong>Go CDK（Go Cloud Development Kit）</strong> を用いたDynamoDB操作について説明します。</p><h1 id="Go-CDKとは？"><a href="#Go-CDKとは？" class="headerlink" title="Go CDKとは？"></a>Go CDKとは？</h1><blockquote><p>Go CDKは2018/07 に Google の Go チームが立ち上げたプロジェクトで、Go アプリケーションを各クラウド間でポータブルにすることを目指して、実装されています。</p></blockquote><p>詳しくは <a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載企画</a> で全7回に渡って概要から各トピックについて説明しています。特に<a href="https://future-architect.github.io/articles/20191111/">第1回目</a> の概要説明から読むことがオススメです。 DynamoDBを含むDocStoreについては<a href="https://future-architect.github.io/articles/20191113/">第3回目</a>の記事を確認ください。</p><ul><li>Go CDK（公式）  <a href="https://gocloud.dev/" target="_blank" rel="noopener">https://gocloud.dev/</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載企画</a></li></ul><p>※名称の揺れについてはGo CDKの方が正式名称ですが、ググラビリティが悪いかなと思い（特にAWS CDKと似ている）、連載版は古い呼び方であるGo Cloudを使わせてもらっていました。</p><h1 id="記事の趣旨"><a href="#記事の趣旨" class="headerlink" title="記事の趣旨"></a>記事の趣旨</h1><p>ご存じの通り、DynamoDBはKVSと言われているものの、非常に多くの機能が存在します。KVSと名前だけ見ると、PK(Primary Key)に対してGet/Put/Deleteなどの基礎的なCRUD処理や、せいぜいそのBatch操作くらいしかできないイメージがありますよね。</p><p>しかし、実際のDynamoDBは遥かに高機能で <strong>Global Secondary Index</strong> や <strong>Local Secondary Index</strong> を用いたインデックスアクセスや、SortKeyを利用した範囲指定の<strong>スキャン</strong>、条件を指定した<strong>クエリ</strong>、<strong>ConditionExpression</strong> という用した既存レコードの有無といった条件付きの書き込み機能などが存在します。これらを組み合わせて<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/WorkingWithItems.html#WorkingWithItems.AtomicCounters" target="_blank" rel="noopener">アトミックカウンターを作る参考記事</a> も公式からでていたり、条件付きではありますが<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/transaction-apis.html" target="_blank" rel="noopener">トランザクション</a>を提供もしています。DynamoDBのクライアントアプリから直接操作することは少いでしょうが、DynamoDB StreamsやGlobal Tablesといった機能も便利ですよね。</p><p>一方で、Go CDKはこういったプロダクト固有の機能を隠蔽化・抽象化したAPIを提供するドライバなため、他のデータストアに切り替えたときでも利用可能なAPIしか提供しない設計になっています（はずです）。しかし、それは <strong>DynamoDBの機能を100%使い切れないということと同義</strong> なため、直感的にはリスクを避けるべくなるべくAWS公式のSDKを利用しようと考える方も多いのでは無いでしょうか？そういう短絡的な判断を避けるために、 <strong>Go CDKが現時点でどこまで機能を網羅しているのか</strong> 我々は知る必要があるでしょう。それがわかれば、この案件のユースケースではGo CDKの提供する機能で十分なため、Go CDKを利用しベンダーロックインのリスク低減を図ったり、Go CDKの提供する<code>memdocstore</code> といったモック機能を享受しようというより有意義な判断ができるはずです。</p><p>というわけで、どの程度DynamoDBの機能がGo CDKから利用できるのか調査していきます。なお、私はDynamoDBのプロフェッショナルではなくイチ開発者ですので色々漏れがあると思います。ぜひTwitterなどでフィードバックを頂ければと思います。</p><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>なお、Go CDKは進化が早いため今回対応していないと判断したものも、実は記事の公開後に実装されている可能性があります。差分については <a href="https://github.com/google/go-cloud/releases" target="_blank" rel="noopener">release-notes</a> などから適時確認ください。</p><ul><li>調査日: 2020/02/24</li><li>Go 1.13.4</li><li>Go CDK v0.19.0</li></ul><h1 id="調査結果"><a href="#調査結果" class="headerlink" title="調査結果"></a>調査結果</h1><p>調査観点は以下としました。それぞれ○が一通りの機能が利用できる、△が一部利用可能、☓は機能提供がされていないということを示しています。</p><table><thead><tr><th>#</th><th>Case</th><th>AWS SDK</th><th>Go CDK</th><th>Description</th></tr></thead><tbody><tr><td>1</td><td>基本的なCRUD</td><td>○</td><td>○</td><td>使いやすいAPIであるし、ハッシュキー、ソートキーともに利用できる</td></tr><tr><td>2</td><td>バッチ処理のCRUD</td><td>○</td><td>○</td><td>バッチ登録、バッチ検索など様々可能</td></tr><tr><td>3</td><td>条件付き書き込み</td><td>○</td><td>△</td><td>楽観的ロックを用いたデータ操作が可能</td></tr><tr><td>4</td><td>クエリ</td><td>○</td><td>○</td><td>WhereやOrderbyやLimitを実行できる</td></tr></tbody></table><p>詳細を説明していきます。</p><h1 id="実証コード"><a href="#実証コード" class="headerlink" title="実証コード"></a>実証コード</h1><p>それぞれGoのコードベースで記載方法をまとめていきます。</p><p>第1回の記事同様 DynamoDB Local を利用してローカル環境を準備します。<br><a href="https://future-architect.github.io/articles/20200225/">https://future-architect.github.io/articles/20200225/</a></p><h2 id="0-事前準備"><a href="#0-事前準備" class="headerlink" title="0. 事前準備"></a>0. 事前準備</h2><h3 id="SDKのセットアップ"><a href="#SDKのセットアップ" class="headerlink" title="SDKのセットアップ"></a>SDKのセットアップ</h3><p>セッション及びDynamoDBを操作するクライアントを生成します。</p><figure class="highlight go"><figcaption><span>クライアントの生成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create session.</span></span><br><span class="line">sess := session.Must(session.NewSessionWithOptions(session.Options&#123;</span><br><span class="line">SharedConfigState: session.SharedConfigEnable,</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create DynamoDB client</span></span><br><span class="line">db := dynamodb.New(sess, &amp;aws.Config&#123;Endpoint: aws.String(<span class="string">"http://localhost:8000"</span>)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open Collection via Go CDK</span></span><br><span class="line">coll, err := awsdynamodb.OpenCollection(db, <span class="string">"MyFirstTable"</span>, <span class="string">"MyHashKey"</span>, <span class="string">"MyRangeKey"</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> coll.Close()</span><br></pre></td></tr></table></figure><p>オプションの <code>SharedConfigState</code> に <code>SharedConfigEnable</code> を設定することで <code>~/.aws/config</code> 内を参照してくれるようになります。</p><p>DynamoDB clientを生成するまでは、公式SDK通りの手順となります。最後にテーブル名、ハッシュキー、ソートキーを指定して <code>OpenCollection</code> を呼ぶことで、Go CDK経由でドキュメントのCRUD操作を行える用になります。</p><p>この時、<strong>ハッシュキー</strong> と <strong>ソートキー</strong> の両方を指定していますが、もしソートキーが無ければ空文字を指定すればOKです。</p><h3 id="レコードを表現する構造体の定義"><a href="#レコードを表現する構造体の定義" class="headerlink" title="レコードを表現する構造体の定義"></a>レコードを表現する構造体の定義</h3><figure class="highlight go"><figcaption><span>構造体定義</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">MyHashKey  <span class="keyword">string</span> <span class="string">`docstore:"MyHashKey"`</span></span><br><span class="line">MyRangeKey <span class="keyword">int</span>    <span class="string">`docstore:"MyRangeKey"`</span></span><br><span class="line">MyText     <span class="keyword">string</span> <span class="string">`docstore:"MyText"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>docstore</code> というというタグを利用することで、DynamoDBのキーを指定して構造体とマッピングすることができます。省略した場合は構造体のキー名がそのまま利用されます</p><p>ほぼ、AWS SDKと同じですね。</p><h2 id="1-基本的なCRUD"><a href="#1-基本的なCRUD" class="headerlink" title="1. 基本的なCRUD"></a>1. 基本的なCRUD</h2><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><p>利用するメソッドは <code>Create</code> です。</p><figure class="highlight go"><figcaption><span>Create処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">write := Item&#123;MyHashKey: <span class="string">"00001"</span>, MyRangeKey: <span class="number">1</span>, MyText: <span class="string">"some text..."</span>&#125;</span><br><span class="line"><span class="keyword">if</span> err := coll.Create(ctx, &amp;write); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"create: %v"</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直感的だと思います。</p><h3 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h3><p>利用するメソッドは <code>Get</code>です。</p><figure class="highlight go"><figcaption><span>Read処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">read := Item&#123;MyHashKey: <span class="string">"00001"</span>, MyRangeKey: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">if</span> err := coll.Get(ctx, &amp;read); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"get: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"got: %+v\n"</span>, read)</span><br><span class="line"><span class="comment">// =&gt; get: &#123;MyHashKey:00001 MyRangeKey:1 MyText:some text...&#125;</span></span><br></pre></td></tr></table></figure><p>これも直感的です。</p><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>これはやや特殊です。<code>Update</code> を用いますが、更新する差分を <code>docstore.Mods</code> というmapに値をもたせます。</p><figure class="highlight go"><figcaption><span>Update処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">updateKey := Item&#123;MyHashKey: <span class="string">"00001"</span>, MyRangeKey: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">if</span> err := coll.Update(ctx, &amp;updateKey, docstore.Mods&#123;<span class="string">"MyText"</span>:<span class="string">"update text"</span>&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"update: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (補足) もう一度getすると以下のように書き換わっている</span></span><br><span class="line"><span class="comment">// &#123;MyHashKey:00001 MyRangeKey:1 MyText:update text&#125;</span></span><br></pre></td></tr></table></figure><p>Go CDKのUpdateは <code>Patch</code> のような動きをするので注意が必要です。もし、ドキュメント全体を置換したい場合は後述する <code>Replace</code> を利用します。　</p><p><code>Update</code> は存在しないレコードに対して行うとエラーになります。</p><figure class="highlight go"><figcaption><span>Update失敗</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">notFoundKey := Item&#123;MyHashKey: <span class="string">"99999"</span>, MyRangeKey: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">if</span> err := coll.Update(ctx, &amp;notFoundKey, docstore.Mods&#123;<span class="string">"MyText"</span>: <span class="string">"update text"</span>&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"not found: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// not found: docstore (code=FailedPrecondition):  ConditionalCheckFailedException: The conditional request failed</span></span><br><span class="line"><span class="comment">// status code: 400, request id: ab4aaa27-303a-4090-a457-94f42950d0bd</span></span><br></pre></td></tr></table></figure><p>エラーメッセージから推測すると、Go CDKのUpdateはDynamoDBのConditional Expressionsを利用していることがわかりますね。</p><h2 id="Replace"><a href="#Replace" class="headerlink" title="Replace"></a>Replace</h2><p>項目全体を置き換える場合です。存在しない場合はエラーになります。</p><figure class="highlight go"><figcaption><span>置換処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">replace := Item&#123;MyHashKey: <span class="string">"00001"</span>, MyRangeKey: <span class="number">1</span>, MyText: <span class="string">"replace"</span>&#125;</span><br><span class="line"><span class="keyword">if</span> err := coll.Replace(ctx, &amp;replace); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"replace: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (補足)もう一度getすると以下のように置換されている</span></span><br><span class="line"><span class="comment">// &#123;MyHashKey:00001 MyRangeKey:1 MyText:replace&#125;</span></span><br></pre></td></tr></table></figure><p>簡単ですね。</p><p>もし、存在しない場合は <code>Create</code>, 存在する場合は <code>Replace</code> をしたい場合は <code>Put</code> を使うようです。今回はあまりにコードがそのままなので省略します。</p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>利用するメソッドは <code>Delete</code> です。</p><figure class="highlight go"><figcaption><span>Delete処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deleteKey := Item&#123;MyHashKey: <span class="string">"00001"</span>, MyRangeKey: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">if</span> err := coll.Delete(ctx, &amp;deleteKey); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"delete: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (補足)もう一度getすると、not foundになる</span></span><br></pre></td></tr></table></figure><p>ここまでで一通りのCRUD操作ができることを確認できました。</p><h2 id="2-バッチ処理のCRUD"><a href="#2-バッチ処理のCRUD" class="headerlink" title="2. バッチ処理のCRUD"></a>2. バッチ処理のCRUD</h2><p>大量データを扱う場合は、1件1件データを登録するのではなくバッチ登録を行いたいケースは多いのでは無いでしょうか？</p><p>この場合は <code>Actions</code> を用います。</p><figure class="highlight go"><figcaption><span>バッチ登録</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create</span></span><br><span class="line">w1 := Item&#123;MyHashKey: <span class="string">"00001"</span>, MyRangeKey: <span class="number">1</span>, MyText: <span class="string">"some text1..."</span>&#125;</span><br><span class="line">w2 := Item&#123;MyHashKey: <span class="string">"00001"</span>, MyRangeKey: <span class="number">2</span>, MyText: <span class="string">"some text2..."</span>&#125;</span><br><span class="line">w3 := Item&#123;MyHashKey: <span class="string">"00001"</span>, MyRangeKey: <span class="number">3</span>, MyText: <span class="string">"some text3..."</span>&#125;</span><br><span class="line"><span class="keyword">if</span> err := coll.Actions().Create(&amp;w1).Create(&amp;w2).Create(&amp;w3).Do(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"actions: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (補足) バッチ登録した結果をgetすると以下の値が確認できる</span></span><br><span class="line"><span class="comment">// got: &#123;MyHashKey:00001 MyRangeKey:1 MyText:some text1...&#125;</span></span><br><span class="line"><span class="comment">// got: &#123;MyHashKey:00001 MyRangeKey:2 MyText:some text2...&#125;</span></span><br><span class="line"><span class="comment">// got: &#123;MyHashKey:00001 MyRangeKey:3 MyText:some text3...&#125;</span></span><br></pre></td></tr></table></figure><p>ActionsはCreateだけではなく、Get/Create/Replace/Put/Update/Delete の6つの操作を混在させて実行も可能です。</p><p>参考: <a href="https://godoc.org/gocloud.dev/docstore#hdr-Actions" target="_blank" rel="noopener">https://godoc.org/gocloud.dev/docstore#hdr-Actions</a></p><p>今回は関数をチェーンで登録しましたが、Actionsで <code>ActionList</code> が取得できるので、もちろんforループと合わせて追加もできます。</p><h2 id="3-条件付き書き込み"><a href="#3-条件付き書き込み" class="headerlink" title="3. 条件付き書き込み"></a>3. 条件付き書き込み</h2><p>Go CDKはドキュメントを読んだ限りは、条件付き書き込みはサポートされていないようです。しかし、Revisionsという機能があり、いわゆる楽観的ロックのような利用用途を公式でサポートされています。</p><ul><li><a href="https://godoc.org/gocloud.dev/docstore#hdr-Revisions" target="_blank" rel="noopener">https://godoc.org/gocloud.dev/docstore#hdr-Revisions</a></li></ul><p>内容は リビジョンフィールド (デフォルト: <code>DocstoreRevision</code>) を設定すると、このフィールドを用いてバージョンを確認し、<code>Put</code>、<code>Replace</code>、<code>Update</code>、<code>Delete</code> の操作を安全に行うことができます。</p><p>最初に定義した構造体にフィールドを追加します。</p><figure class="highlight go"><figcaption><span>リビジョンフィールドを追加した構造体</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">MyHashKey        <span class="keyword">string</span>       <span class="string">`docstore:"MyHashKey"`</span></span><br><span class="line">MyRangeKey       <span class="keyword">int</span>          <span class="string">`docstore:"MyRangeKey"`</span></span><br><span class="line">MyText           <span class="keyword">string</span>       <span class="string">`docstore:"MyText"`</span></span><br><span class="line">DocstoreRevision <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを用いて、楽観的ロックを行ってロックが行われているか確認します。どちらも同じドキュメントにUpdateし続けて様子を見てみます。</p><figure class="highlight go"><figcaption><span>楽観的ロック検出テスト</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 別のgoroutineでも無限書き込み</span></span><br><span class="line"><span class="keyword">go</span> UpdateLoop()</span><br><span class="line"><span class="comment">// メインスレッドでも無限書き込み</span></span><br><span class="line">UpdateLoop()</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; optimistic locking: docstore (code=FailedPrecondition): </span></span><br><span class="line"><span class="comment">// ConditionalCheckFailedException: The conditional request failed</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateLoop</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// (DynamoDB Clientを生成処理)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123; <span class="comment">// 無限にドキュメントを更新する処理</span></span><br><span class="line">read := Item&#123;MyHashKey: <span class="string">"00001"</span>, MyRangeKey: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">if</span> err := coll.Get(ctx, &amp;read); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"get: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := coll.Update(ctx, &amp;read, docstore.Mods&#123;<span class="string">"MyText"</span>: <span class="string">"update text: "</span> + time.Now().String()&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> gcerrors.Code(err) == gcerrors.FailedPrecondition &#123;</span><br><span class="line">log.Fatalf(<span class="string">"optimistic locking: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Fatalf(<span class="string">"update: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>すると、実行結果が <code>optimistic locking: docstore (code=FailedPrecondition): ConditionalCheckFailedException: The conditional request failed</code> が発生し、getしてupdateするまでの間に別のgoroutineが同じドキュメントを更新したことが検知できました。</p><p>DynamoDBのConditional Expressionsほど万能では無いですが、多くのユースケースはロックを実現したいことが多いと思うので、これで事足りるケースも多いのではないでしょうか？</p><p>ちなみに、Revisionフィールドですが、awscliでテーブルを検索すると、UUIDで実現されていました。最初はロック番号のような形式で実装されていると思ったので意外です</p><p>もし、更新回数などをアプリケーションとして持ちたい場合は、自分で属性を持つ必要があるのでご注意ください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;aws dynamodb scan --endpoint-url http://localhost:8000 --table-name MyFirstTable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"Items"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"DocstoreRevision"</span>: &#123;</span><br><span class="line">                <span class="string">"S"</span>: <span class="string">"3e38649b-d82c-46ab-a0fe-621f98104f75"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"MyHashKey"</span>: &#123;</span><br><span class="line">                <span class="string">"S"</span>: <span class="string">"00001"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"MyText"</span>: &#123;</span><br><span class="line">                <span class="string">"S"</span>: <span class="string">"update text: 2020-02-28 09:45:27.725097 +0900 JST m=+0.090001301"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"MyRangeKey"</span>: &#123;</span><br><span class="line">                <span class="string">"N"</span>: <span class="string">"1"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"Count"</span>: 1,</span><br><span class="line">    <span class="string">"ScannedCount"</span>: 1,</span><br><span class="line">    <span class="string">"ConsumedCapacity"</span>: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-クエリ"><a href="#4-クエリ" class="headerlink" title="4. クエリ"></a>4. クエリ</h2><p><a href="https://future-architect.github.io/articles/20191113/">Go Cloud#3 Go CloudのDocStoreを使う</a> の記事で説明されているように、Go CDKはクエリもサポートされています。<code>Where()</code>、<code>OrderBy()</code>、<code>Limit()</code> で、 Whereの演算子は <code>=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code> の5種類です。ほとんどやりたいことはできるのではないでしょうか？</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>使ってみた感想としてGo CDKのDocStoreは非常にリッチな機能を持っており、ベーシックなAWS SDKと遜色なく利用できました。Condition Expressionsで複雑な条件を利用しないなど、限られたユースケースであればむしろ生産性が高まるのではないでしょうか</li><li>Go CDKを用いればドライバ切り替えでmemstoreというモック切り替えも可能ですし、テスタビリティとしても有用です</li></ul><p>機能上はGo CDKもかなりガンバっていると感じます。DynamoDBアクセスする際の有力な選択肢となりうるのではないでしょうか？ぜひ、私達のチームでも機を見て実戦投入してみてチャレンジしてみたいと思います。</p><hr><p><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載企画</a>以外にも多くの連載企画があります。特にGo Cloud連載が今回のテーマに近いです。</p><ul><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a></li><li><a href="https://future-architect.github.io/tags/Auth0/">Auth0 連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG DXユニット&lt;a href=&quot;https://twitter.com/laqiiz&quot; target=&quot;_
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="DynamoDB×Go" scheme="https://future-architect.github.io/tags/DynamoDB%C3%97Go/"/>
    
  </entry>
  
</feed>
