<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2020-12-03T05:07:08.763Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GoがApple Siliconにネイティブ対応したのでベンチマークをとってみました</title>
    <link href="https://future-architect.github.io/articles/20201203/"/>
    <id>https://future-architect.github.io/articles/20201203/</id>
    <published>2020-12-02T15:00:00.000Z</published>
    <updated>2020-12-03T05:07:08.763Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://qiita.com/advent-calendar/2020/go5" target="_blank" rel="noopener">Goアドベントカレンダーその5</a>です。</p><p>ARMなMacが出るとWWDCで発表されてから首を長くしてまっていて、発表と同時にMacBook Proを買って、<a href="https://qiita.com/shibukawa/items/797b7cbb7e530842e6f7" target="_blank" rel="noopener">アプリケーションのARMネイティブ対応</a>がされているかいろいろインストールして試してみたりしています。まだ発売されて2週間足らずですが（といっても、みんな開発キットをつかって以前から準備したようですが）、動作しているアプリケーションは多いです。発売後にも、Erlang、Node.jsあたりはmasterブランチにパッチが入りました。Goも、<a href="https://github.com/golang/go/issues/38485" target="_blank" rel="noopener">昨日パッチがマージ</a>されました。</p><p>業務利用が多い言語のうちの一つということで、手元のPCで軽くベンチマークをとってみました。使った機種は3つです。</p><ul><li>2020モデルのM1のMacBook Pro</li><li>2020モデルの10th Gen Core i5のMacBook Air</li><li>Ryzen 9 4900HSのASUSのZephyrus G14</li></ul><p>前2つがTDP 10Wクラスの中、RyzenだけTDP 35Wでだいぶ上のクラスではあります。ベンチマークは<a href="https://github.com/SimonWaldherr/golang-benchmarks" target="_blank" rel="noopener">github.com/SimonWaldherr/golang-benchmarks</a>を利用しています。Goはmasterの<a href="https://github.com/golang/go/commit/0433845ad18a355413033bb3495ba3195f4c69ec" target="_blank" rel="noopener">0433845</a>をとってきて、Intel Mac上から、bootstrap.bashでarm64/darwin、amd64/darwin、amd64/windowsの3セット作って使いました。コア数はそれぞれ8(低速4+高速4)、8(物理4、論理8)、16(物理8、論理16)と構成に違いはあるものの、特にマルチスレッド性能を測るテストはなく、-cpuオプションを設定しても結果は違いがなかったので、デフォルト値で実行しています。</p><p>ベンチマークの数値の結果は<a href="https://docs.google.com/spreadsheets/d/1hzwyeWSNknyV3AhAnOJOifoR1f8UxQP_N9jMJv26Deg/edit?usp=sharing" target="_blank" rel="noopener">こちら</a>です。Goのベンチマークはタスクごとの経過時間で出てくるので、MacBook Airの結果を100として相対値をとってグラフにしたのが以下の図です（項目が多くてラベルが半分非表示になっていますが）。グラフは短いほど高速です。</p><p><img src="/images/20201203/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-12-03_13.06.21.png" alt=""></p><p>たまにハッシュ計算とかでかなり遅いものがありますが、おそらくCPUの命令を駆使して高速化、みたいなのがまだきちんと行われていない領域だと思うので、そこはコミットチャンスかと思います。あと、Boolのパースがなぜか遅い。といっても1.5nsと0.3nsとかなので割合でみるとすごい遅く見えますが、実際には影響は少ないかと。</p><p>大雑把にみると、MacBook AirのCore i5に比べて概ね1.5〜2倍ぐらい高速ですね。Ryzenに対してもかなり高速。この2機種とも、今年の頭のモデルで比較的新しくてそこまで遅くないのですけどね。ただ、Ryzen機が暖かいので（GeForceのGPUのおかげかもしれませんが）、寒い冬にはとても優しいので、個人的にはRyzen優勝にしたいと思います。</p><p>詳細な結果は以下の通り。単位はnsで、数字が小さいほど高速です。</p><table><thead><tr><th></th><th>M1</th><th>M1(rosetta)</th><th>Core i5-1030G7</th><th>Ryzen 9 4900HS</th></tr></thead><tbody><tr><td>BenchmarkBase64decode-8</td><td>75.52</td><td>124</td><td>113.6</td><td>112.8</td></tr><tr><td>BenchmarkBase64regex-8</td><td>13271</td><td>18101</td><td>22755</td><td>24957</td></tr><tr><td>BenchmarkNumberRegEx-8</td><td>8616</td><td>11622</td><td>15494</td><td>17492</td></tr><tr><td>BenchmarkFulltextRegEx-8</td><td>7098</td><td>9619</td><td>12552</td><td>13851</td></tr><tr><td>BenchmarkNumberParse-8</td><td>54.91</td><td>63.28</td><td>69.32</td><td>70.62</td></tr><tr><td>BenchmarkFulltextParse-8</td><td>783.4</td><td>949.1</td><td>1020</td><td>955.1</td></tr><tr><td>BenchmarkConcatString-8</td><td>23788</td><td>40679</td><td>48756</td><td>70460</td></tr><tr><td>BenchmarkConcatBuffer-8</td><td>4.792</td><td>7.568</td><td>8.636</td><td>6.425</td></tr><tr><td>BenchmarkConcatBuilder-8</td><td>2.662</td><td>3.659</td><td>4.594</td><td>2.595</td></tr><tr><td>BenchmarkContains-8</td><td>5.465</td><td>9.55</td><td>10.23</td><td>7.279</td></tr><tr><td>BenchmarkContainsNot-8</td><td>6.993</td><td>10.45</td><td>11.29</td><td>7.489</td></tr><tr><td>BenchmarkContainsBytes-8</td><td>6.198</td><td>10.21</td><td>11.55</td><td>8.718</td></tr><tr><td>BenchmarkContainsBytesNot-8</td><td>7.74</td><td>11.2</td><td>13.31</td><td>8.996</td></tr><tr><td>BenchmarkCompileMatch-8</td><td>80.4</td><td>121.3</td><td>111.1</td><td>111.1</td></tr><tr><td>BenchmarkCompileMatchNot-8</td><td>35.95</td><td>65.89</td><td>55.98</td><td>55.14</td></tr><tr><td>BenchmarkMatch-8</td><td>870.8</td><td>1261</td><td>1969</td><td>1745</td></tr><tr><td>BenchmarkMatchNot-8</td><td>837.3</td><td>1237</td><td>1875</td><td>1697</td></tr><tr><td>BenchmarkForMap-8</td><td>20.56</td><td>22.97</td><td>29.94</td><td>23.39</td></tr><tr><td>BenchmarkRangeMap-8</td><td>55.31</td><td>58.52</td><td>88.86</td><td>69.77</td></tr><tr><td>BenchmarkRangeSlice-8</td><td>3.8</td><td>3.865</td><td>3.758</td><td>2.619</td></tr><tr><td>BenchmarkRangeSliceKey-8</td><td>4.528</td><td>4.545</td><td>5.23</td><td>3.617</td></tr><tr><td>BenchmarkAdler32-8</td><td>764.9</td><td>830.3</td><td>1007</td><td>714.6</td></tr><tr><td>BenchmarkBlake2b256-8</td><td>2612</td><td>4930</td><td>2561</td><td>2105</td></tr><tr><td>BenchmarkBlake2b512-8</td><td>2626</td><td>4958</td><td>2580</td><td>2167</td></tr><tr><td>BenchmarkBlake3256-8</td><td>6339</td><td>エラー</td><td>3460</td><td>2782</td></tr><tr><td>BenchmarkMMH3-8</td><td>413.4</td><td>468.5</td><td>431</td><td>345</td></tr><tr><td>BenchmarkCRC32-8</td><td>1098</td><td>139.2</td><td>140.5</td><td>163.7</td></tr><tr><td>BenchmarkFnv128-8</td><td>4924</td><td>7617</td><td>3448</td><td>6084</td></tr><tr><td>BenchmarkMD5-8</td><td>3566</td><td>4345</td><td>3283</td><td>2635</td></tr><tr><td>BenchmarkSHA1-8</td><td>5789</td><td>4247</td><td>2924</td><td>2041</td></tr><tr><td>BenchmarkSHA256-8</td><td>10865</td><td>7832</td><td>6361</td><td>4346</td></tr><tr><td>BenchmarkSHA512-8</td><td>7801</td><td>3987</td><td>4685</td><td>2939</td></tr><tr><td>BenchmarkSHA3256-8</td><td>4575</td><td>6080</td><td>8312</td><td>9898</td></tr><tr><td>BenchmarkSHA3512-8</td><td>7929</td><td>10540</td><td>14666</td><td>17115</td></tr><tr><td>BenchmarkWhirlpool-8</td><td>35819</td><td>44605</td><td>59697</td><td>41050</td></tr><tr><td>BenchmarkMapStringKeys-8</td><td>82.45</td><td>104.4</td><td>107.5</td><td>132.5</td></tr><tr><td>BenchmarkMapIntKeys-8</td><td>49.72</td><td>73.35</td><td>74.43</td><td>87.11</td></tr><tr><td>BenchmarkJsonMarshal-8</td><td>1422</td><td>1981</td><td>3076</td><td>1907</td></tr><tr><td>BenchmarkJsonUnmarshal-8</td><td>5496</td><td>7963</td><td>10694</td><td>8788</td></tr><tr><td>BenchmarkMathInt8-8</td><td>0.3465</td><td>0.3442</td><td>0.342</td><td>0.2602</td></tr><tr><td>BenchmarkMathInt32-8</td><td>0.3505</td><td>0.3478</td><td>0.3656</td><td>0.29</td></tr><tr><td>BenchmarkMathInt64-8</td><td>0.3558</td><td>0.3552</td><td>0.3588</td><td>0.26</td></tr><tr><td>BenchmarkMathAtomicInt32-8</td><td>7.132</td><td>7.864</td><td>6.562</td><td>4.258</td></tr><tr><td>BenchmarkMathAtomicInt64-8</td><td>7.07</td><td>7.758</td><td>7.079</td><td>4.231</td></tr><tr><td>BenchmarkMathMutexInt-8</td><td>12.45</td><td>15.07</td><td>18.69</td><td>8.776</td></tr><tr><td>BenchmarkMathFloat32-8</td><td>0.3594</td><td>0.3636</td><td>0.377</td><td>0.3438</td></tr><tr><td>BenchmarkMathFloat64-8</td><td>0.3551</td><td>0.348</td><td>0.3946</td><td>0.2866</td></tr><tr><td>BenchmarkParseBool-8</td><td>1.598</td><td>0.3529</td><td>0.3532</td><td>0.3208</td></tr><tr><td>BenchmarkParseInt-8</td><td>12.31</td><td>13.28</td><td>20.09</td><td>14.93</td></tr><tr><td>BenchmarkParseFloat-8</td><td>72.39</td><td>80.48</td><td>137.3</td><td>101.6</td></tr><tr><td>BenchmarkMathRand-8</td><td>12.82</td><td>15.15</td><td>24.15</td><td>18.27</td></tr><tr><td>BenchmarkCryptoRand-8</td><td>109.9</td><td>147.7</td><td>202</td><td>285.2</td></tr><tr><td>BenchmarkCryptoRandString-8</td><td>119.1</td><td>146.1</td><td>202.5</td><td>175.8</td></tr><tr><td>BenchmarkMatchString-8</td><td>5371</td><td>7498</td><td>9923</td><td>10558</td></tr><tr><td>BenchmarkMatchStringCompiled-8</td><td>529.2</td><td>551.9</td><td>670.8</td><td>538.3</td></tr><tr><td>BenchmarkMatchStringGolibs-8</td><td>523.5</td><td>559.2</td><td>659.5</td><td>538.2</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://qiita.com/advent-calendar/2020/go5&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Goアドベントカレンダーその5&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;ARMなMacが出るとWWDCで発表されてから
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>DynamoDBのページング</title>
    <link href="https://future-architect.github.io/articles/20201130/"/>
    <id>https://future-architect.github.io/articles/20201130/</id>
    <published>2020-11-29T15:00:00.000Z</published>
    <updated>2020-11-30T04:01:51.140Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20201130/Screen_Shot_2020-11-30_at_5.34.55.png" alt=""></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG/DXユニットの棚井龍之介です。入社以来、Go × AWS でのバックエンド開発を担当しています。</p><p>AWSのDBといえば「RDS」が代表格ですが、近年のサーバレス普及に伴い「DynamoDB」が第一選択肢として選ばれる機会が増えています。私の所属するプロジェクトでは、API Gateway, Lambda, DynamoDBのAWSサーバレス3兄弟をメイン利用しているため、メンバーによっては「研修はSQL地獄だったけど、配属後はNoSQLオンリーだ！」という人もいます。</p><p>徐々に利用機会が増えているDynamoDBですが、いくつかの「初見殺し」があります。今回はその中での「ページング」について、DynamoDBのデータ格納状況と照らし合わせながら、基本的な仕組みを見ていこうと思います。</p><p>DynamoDBの操作経験がある方を想定しているため、まだ一度も触ったことのない方や基本操作に不安のある方は、<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/HowItWorks.CoreComponents.html" target="_blank" rel="noopener">公式docs</a>や冨山さんの書かれた<a href="https://future-architect.github.io/articles/20200818/">入門記事</a>をご覧ください。</p><h2 id="前提知識"><a href="#前提知識" class="headerlink" title="前提知識"></a>前提知識</h2><ul><li>プライマリーキー<ul><li>パーティションキーのみ</li><li>複合プライマリキー (パーティションキーとソートキー) </li></ul></li><li>DynamoDB API<ul><li>Scan</li><li>Query</li></ul></li></ul><h1 id="DynamoDBの1MB制約"><a href="#DynamoDBの1MB制約" class="headerlink" title="DynamoDBの1MB制約"></a>DynamoDBの1MB制約</h1><p>テーブル操作には大きく分けて「Read(読み込み)」と「Write(書き込み)」の2タイプがあります。</p><p>このうち、ReadのScanとQueryは、一度のDynamoDB API操作では <strong>1MBが取得上限</strong> です。1MB以上のデータを抜き出したい場合は、ページング処理が必要です。ページング処理の対応実装はシンプルであり、1度誰かが書いたコードをコピペで利用できるため、中身を深く理解せずとも使えてしまいます。(Goのサンプルコードは最後に掲載します)</p><p>しかし、詳細を理解しないコピペ実装だと、ちょっと手の込んだ実装などができなくなってしまうため、ページング処理を説明する前にDynamoDBのデータ格納方法を説明します。</p><h1 id="DynamoDBのデータ格納方法"><a href="#DynamoDBのデータ格納方法" class="headerlink" title="DynamoDBのデータ格納方法"></a>DynamoDBのデータ格納方法</h1><p>DynamoDBのテーブルにItemを格納する場合、プライマリーキーによって格納場所が決まります。</p><p>データ格納空間(Key Space)を00~FF、idをHash-Keyとした場合、各Itemは下図のように格納されます。プライマリーキーは重複できないため、新しいデータをid=1でPutItemした場合、データは上書きされます。</p><p>table</p><ul><li>Hash-Table<br>key</li><li>Hash-Key: id</li></ul><p><img src="/images/20201130/Screen_Shot_2020-11-30_at_5.36.09.png" alt=""></p><p>複合プライマリーキーの場合でも同様です。Hash-Keyによりいずれかのパーティションへ割り当てて、同一パーティションに含まれるItemはSort-Key順で格納されます。</p><p>table</p><ul><li>Hash-Sort-Table<br>key</li><li>Hash-Key: id</li><li>Sort-Key: order</li></ul><p><img src="/images/20201130/Screen_Shot_2020-11-30_at_5.36.19.png" alt=""></p><h1 id="格納場所を特定するKey"><a href="#格納場所を特定するKey" class="headerlink" title="格納場所を特定するKey"></a>格納場所を特定するKey</h1><p>DynamoDBは、全てのItemをプライマリーキーでソートした上で保持しています。</p><p>したがって、Hash-Tableの場合はプライマリーキーの値が分かれば、Hash-Sort-Tableの場合は複合プライマリーキーの値が分かれば、データの格納場所を一意に特定できます。DynamoDBから1MB以上データを取得するために、この一意となるキー情報を利用します。</p><h1 id="1MB以上のデータ取得"><a href="#1MB以上のデータ取得" class="headerlink" title="1MB以上のデータ取得"></a>1MB以上のデータ取得</h1><ul><li>プライマリーキー: Hash-Table</li><li>複合プライマリーキー: Hash-Sort-Table</li></ul><p>で分けて説明します。</p><h2 id="Hash-Table"><a href="#Hash-Table" class="headerlink" title="Hash-Table"></a>Hash-Table</h2><p>1MB以上のデータを持つテーブルへScanを実行した場合、テーブルの先頭から1MB分のデータと共に、LastEvaluatedKey(LK)が返されます。LKの値は、1MB分取得したデータの、最後のItemのプライマリーキーです。</p><p><img src="/images/20201130/Screen_Shot_2020-11-30_at_5.36.33.png" alt=""></p><p>1MB分データとLKを受け取った後、そのまま終わらせずにScanを再実行するのがポイントです<br>。<br>Scanの引数ExclusiveStartKey(SK)にLKを渡すと、LK地点から1MB分のデータが取得できます。EKはScanの開始位置をテーブルに伝えるため、プライマリーキーを渡すことにより、前回Scanの終了地点からデータ取得再開が可能となります。</p><p><img src="/images/20201130/Screen_Shot_2020-11-30_at_5.36.43.png" alt=""></p><p>2回目のScanでも、初回と同様に 1MB分のデータ+LK’ が返されます。再度LK’を渡してScanすることにより、次の1MB分データを取得できます。このループを繰り返して、最終的にLKが返ってこなかった(空のLKが返ってきた)とき、テーブルのScanが完了したことになります。</p><h2 id="Hash-Sort-Table"><a href="#Hash-Sort-Table" class="headerlink" title="Hash-Sort-Table"></a>Hash-Sort-Table</h2><p>複合プライマリーキーの場合も考え方は同じです。</p><p>キーによってデータの格納場所が一意に特定されるため</p><ul><li>Scanで1MB分のデータとLKを取得</li><li>次のScanでLKをEKに代入</li></ul><p>を繰り返すことで、全データを取得可能です。</p><p><img src="/images/20201130/Screen_Shot_2020-11-30_at_5.36.58.png" alt=""></p><p>以上で、図によるデータ取得方法の説明は終了です。<br>次は実装コードを見ていきましょう。</p><h1 id="実装コードのサンプル"><a href="#実装コードのサンプル" class="headerlink" title="実装コードのサンプル"></a>実装コードのサンプル</h1><p>GoでDynamoDBから1MB以上を取得するコードのサンプルです。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/session"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/service/dynamodb"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Full Scan Start."</span>)</span><br><span class="line"></span><br><span class="line">    ctx := context.Background()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ek <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">resp, lk, err := scanWithKey(ctx, ek)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1MB分取得データの処理</span></span><br><span class="line">        <span class="comment">// ex. データETL, csv保存</span></span><br><span class="line"></span><br><span class="line">ek = lk</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(ek) == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="comment">// LKが空で返ってきた -&gt; 最後のItemまでScan完了</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fmt.Println(<span class="string">"Full Scan Finish."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scanWithKey</span><span class="params">(ctx context.Context, lk <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue)</span> <span class="params">([]TableModel, <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue, error)</span></span> &#123;</span><br><span class="line">out, err := db.ScanWithContext(ctx, &amp;dynamodb.ScanInput&#123;</span><br><span class="line">ExclusiveStartKey: lk,</span><br><span class="line">TableName:         aws.String(tableName),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">"scan %s, %w"</span>, tableName, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> resp []TableModel</span><br><span class="line"><span class="keyword">if</span> err := dynamodbattribute.UnmarshalListOfMaps(out.Items, &amp;resp); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">"dynamodb attribute marshalling map: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> resp, out.LastEvaluatedKey, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初回Scanでは空のEKを渡して、2回目以降はLKを代入します。空のLKが返されるまでループを継続することで、Full Scanが完了します。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>DynamoDBから1MB以上のデータを取得する方法について、図を多用して説明しました。</p><p>データがどのように格納されているのか？をイメージできるようになれば</p><ul><li>テーブル設計力の向上</li><li>処理コードのボトルネック特定</li><li>公式ドキュメントのより詳細な理解</li></ul><p>につながると思います。</p><p>DynamoDBは難しいポイントが多いですが、一つずつ解決していきましょう。</p><p>最後まで読んでいただき、ありがとうございました！</p><h2 id="参照記事"><a href="#参照記事" class="headerlink" title="参照記事"></a>参照記事</h2><ul><li><a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Introduction.html" target="_blank" rel="noopener">Amazon DynamoDB とは</a></li><li><a href="https://www.slideshare.net/AmazonWebServicesJapan/20150805-aws-blackbeltdynamodb" target="_blank" rel="noopener">AWS Black Belt Tech シリーズ 2015 - Amazon DynamoDB</a></li><li><a href="https://future-architect.github.io/articles/20200818/">【入門】私を苦しめたDynamoDB</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20201130/Screen_Shot_2020-11-30_at_5.34.55.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめ
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="DynamoDB" scheme="https://future-architect.github.io/tags/DynamoDB/"/>
    
  </entry>
  
  <entry>
    <title>数字で振り返るフューチャー技術ブログ（2020）</title>
    <link href="https://future-architect.github.io/articles/20201127/"/>
    <id>https://future-architect.github.io/articles/20201127/</id>
    <published>2020-11-26T15:00:00.000Z</published>
    <updated>2020-11-27T06:36:29.453Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>技術ブログ運営の真野です。</p><p>フューチャー技術ブログですが、2020年を数値で振り返りたいと思います。</p><p>理由ですが、<a href="https://future-architect.github.io/articles/20200530/">フューチャー技術ブログの運営で心がけていること</a> で説明したとおり、ガラッと運営方針を変えたり、<a href="https://future-architect.github.io/articles/20200908/">フューチャー技術ブログで行っている連載企画が良いよって話</a> で説明したとおり、多くの企画を行ったのでその結果をまとめておきたいと思ったからです。他に有力な理由は年末に評価プレゼンする必要があり、どうせまとめるならブログ公開しちゃうか、という背景もあります。PVもあります。</p><img src="/images/20201127/browser-3614768_1280.png" class="img-middle-size"><p><a href="https://pixabay.com/ja/users/janjf93-3084263/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3614768" target="_blank" rel="noopener">janjf93</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3614768" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h2 id="集計期間"><a href="#集計期間" class="headerlink" title="集計期間"></a>集計期間</h2><p>フューチャー技術ブログは2016年2月より始まりました。5年弱（4年10ヶ月）の期間の記録です。この間に記事を削除したことは一度も無くありのままです。1年を振り返るといっても、そういえば今まで1度も過去を振り返ったことがないので折角の機会です。過去5年弱全部の数値をまとめていきたいと思います。</p><h2 id="投稿本数"><a href="#投稿本数" class="headerlink" title="投稿本数"></a>投稿本数</h2><p>まずは投稿数です。約5年で <strong>328記事</strong> が投稿されました。</p><p>平準化すると60記事/年（5記事/月）ほどです。しかし投稿年で表示すると下記のようにかなり偏りがあります。</p><p><img src="/images/20201127/image.png" alt=""></p><p>見たまんまですが、2016~2018は年間 <strong>約30記事</strong> くらいだったのが、2019年に<strong>75記事</strong>、2020年には11月時点で<strong>190記事</strong>と急速に増えています。2020年は52週なので、週3,4本をコンスタントに公開していたということです。かなりガンバっているのが数字からも分かります。実際ちょっと大変でした。寄稿してくれたり応援してくれたフューチャー社員みなさんのご厚意が見事に表現されているハートフルな結果だと認識しています。</p><p>正直最初は投稿頻度が高くてスゴイ！ってポジティブに褒めてくれた人も、だんだんとこいついつまでこのペースで続けるんだ？って目で見られていた気がします。ずっと褒め続けてほしかったのが本音です。倒れるときは前かがみがポリシーです。</p><h2 id="記事のカテゴリ"><a href="#記事のカテゴリ" class="headerlink" title="記事のカテゴリ"></a>記事のカテゴリ</h2><p>続いて記事のカテゴリです。カテゴリは運営が状況に合わせて統廃合するので流動的なのですが、大体の感じを掴むのにぴったりだと思っています。</p><p>割合を見ると、Programming、Infrastructure、Culture、DataScienceあたりの上位4枠で8割ほどを占有するという結果でした。想定通り。</p><p><img src="/images/20201127/image_2.png" alt=""></p><p>Programmingは非常に幅広いので、フロントエンド・バックエンドくらいは分けたほうが良かもしれません。意見があればぜひフィードバックください。</p><h2 id="寄稿者"><a href="#寄稿者" class="headerlink" title="寄稿者"></a>寄稿者</h2><p>寄稿者数は5年で<strong>130名</strong>でした。寄稿者は予想通りそれなりの偏りがあります。よく投稿してくれる人は月1程度のペースで寄稿していただけますし、年1の方もいらっしゃいます。</p><p>試しに過去5年のうち、投稿記事数ごとに割合を出してみました。グラフの見方ですが、例えば1記事だけ投稿した人は、328記事中34.1%を占めしているということです。</p><p><img src="/images/20201127/image_3.png" alt=""></p><p>ちなみに5記事以上だと4割程を占めしていて、11名で146記事です。4割ほどの記事は頻繁に投稿してくださる方々によって作られていることが分かりますので、リピーター大事ですね。逆に言えば、もう過半数は1~4記事といったたまに投稿してくれた方々に支えられて言います。記事のバリエーションは多くのニューカマーを呼び込めたことでも実現できているのかなと認識しています。</p><p>次に年単位で寄稿者（述べ人数ではなく関わってくれた人の数）をグラフ化しました。</p><p><img src="/images/20201127/image_4.png" alt=""></p><p>ブログ開始時は<strong>15名</strong>程度でしたが、2019年に<strong>40名</strong>、2020年には<strong>80名</strong>を超えるようになってきていることがわかります。記事数と同様多くの方に関わっていただけたことがわかって感謝です。</p><h2 id="PV遷移"><a href="#PV遷移" class="headerlink" title="PV遷移"></a>PV遷移</h2><p>PVチャートを大公開です。2019年6月ごろより増えてきました。2020年10月は<strong>6.1万ユーザ/月</strong>でした。PVだと<strong>10.7万PV/月</strong>でした。PVは追わない方針！と周囲には伝えていますが、こっそり2020年度中に10万PV/月を達成できたら嬉しいなと思っていたので、ちょっとうれしいです。</p><p><img src="/images/20201127/image_5.png" alt=""></p><p>ちなみに、ちょうど2018, 2019年の10月の数値も載せておきます。</p><ul><li>2018年10月<ul><li>ユーザ数: 0.5万</li><li>PV数：1.0万</li></ul></li><li>2019年10月<ul><li>ユーザ数: 2.8万</li><li>PV数: 4.7万</li></ul></li><li>2020年10月<ul><li>ユーザ数: 6.1万</li><li>PV数: 10.7万</li></ul></li></ul><p>ということで、2018年比較で10倍、2019年比較で2倍以上に成長できました。振り返ってみると2019年の進化が凄まじいですね。</p><p>以下は2019年11月～2020年11月までを、PV/日単位で出力しました。週末は基本的に新記事を公開しないのでかなり上げ下げがあります。ピンポイントでスパイクしているのは、何か記事がバズったんだと思います。</p><p><img src="/images/20201127/image_6.png" alt=""></p><p>なにはともあれ、この1年の変化が多少なりとも感じられて良かったです。</p><h2 id="PVで見る人気の記事"><a href="#PVで見る人気の記事" class="headerlink" title="PVで見る人気の記事"></a>PVで見る人気の記事</h2><p>2020年の1/1～11/25までのPV人気記事を紹介します。集計の都合上、1月に近い月で公開した記事が有利なのですが、社内やSNSで反響があった記事は大体ノミネートされているので参考になると思います。要望があったので隣にはてなブックマーク数も追加しました。調査日は2020/11/26です。</p><table><thead><tr><th>#</th><th>Link</th><th>PV数<br>[万]</th><th>はてぶ数</th></tr></thead><tbody><tr><td>1</td><td><a href="https://future-architect.github.io/articles/20191008/">本当に使ってよかったOpenAPI (Swagger) ツール</a></td><td>8.1</td><td>542</td></tr><tr><td>2</td><td><a href="https://future-architect.github.io/">トップページ</a></td><td>2.5</td><td>5</td></tr><tr><td>3</td><td><a href="https://future-architect.github.io/articles/20200501/">TypeScriptでReactをやるときは、小さいアプリでもReduxを最初から使ってもいいかもねというお話</a></td><td>2.4</td><td>307</td></tr><tr><td>5</td><td><a href="https://future-architect.github.io/articles/20200513/">仕事でPythonコンテナをデプロイする人向けのDockerfile (1): オールマイティ編</a></td><td>1.9</td><td>120</td></tr><tr><td>6</td><td><a href="https://future-architect.github.io/articles/20200429/">Reduxを分かりやすく解説してみた</a></td><td>1.4</td><td>9</td></tr><tr><td>7</td><td><a href="https://future-architect.github.io/articles/20180529/">データベースマイグレーション ～OracleからPostgreSQLへ～</a></td><td>1.3</td><td>34</td></tr><tr><td>8</td><td><a href="https://future-architect.github.io/articles/20191107/">インフラ入門vol.3(ネットワーク冗長化構成)</a></td><td>1.2</td><td>43</td></tr><tr><td>9</td><td><a href="https://future-architect.github.io/articles/20201013/">2020年秋にVue.jsのアプリケーションを作るなら、押さえておきたい5つのポイント</a></td><td>1.1</td><td>248</td></tr><tr><td>10</td><td><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></td><td>0.8</td><td>388</td></tr><tr><td>11</td><td><a href="https://future-architect.github.io/articles/20200428/">Vue.jsのslotの機能を初心者にわかるように解説してみた</a></td><td>1.1</td><td>6</td></tr><tr><td>12</td><td><a href="https://future-architect.github.io/articles/20200203/">チームで機能設計するためのPlantUML標準化</a></td><td>1.1</td><td>424</td></tr><tr><td>13</td><td><a href="https://future-architect.github.io/articles/20200709/">GoでWebアプリ開発時にあるあるだったレビューコメント</a></td><td>1</td><td>431</td></tr><tr><td>14</td><td><a href="https://future-architect.github.io/articles/20190530/">【合格記】GCP Professional Cloud Architect認定資格を振り返る</a></td><td>0.9</td><td>6</td></tr><tr><td>15</td><td><a href="https://future-architect.github.io/articles/20200409/">スキーマファースト開発のためのOpenAPI（Swagger）設計規約</a></td><td>0.9</td><td>94</td></tr><tr><td>16</td><td><a href="https://future-architect.github.io/articles/20200311/">JavaプログラマーのためのGo言語入門</a></td><td>0.9</td><td>341</td></tr><tr><td>17</td><td><a href="https://future-architect.github.io/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></td><td>0.9</td><td>398</td></tr><tr><td>18</td><td><a href="https://future-architect.github.io/articles/20190903/">Terraformのベストなプラクティスってなんだろうか</a></td><td>0.9</td><td>79</td></tr><tr><td>19</td><td><a href="https://future-architect.github.io/articles/20200318/">【Figma】を使ってチームでUI/UX設計するといいこと</a></td><td>0.9</td><td>8</td></tr><tr><td>20</td><td><a href="https://future-architect.github.io/articles/20190625/">Amazon Redshiftの仕様を調べてみた</a></td><td>0.9</td><td>8</td></tr></tbody></table><p>恐ろしきは、1位のOpenAPIの記事ですが、2019年10月に公開された記事でロングセラーです。著者の武田さんスゴイ。どれも珠玉の記事なので見逃している方はぜひチェックしていただければです。</p><p>PVとはてなブックマーク数は要望があって出してみたものの、連動しているようなしていないような、なんとも言えないなと思いました。なんとなくフロントエンドやUI/UXをテーマにすると検索されやすいのかな？と推測はできそうですが調査できていません。</p><h2 id="Facebookいいね数で見る人気の記事"><a href="#Facebookいいね数で見る人気の記事" class="headerlink" title="Facebookいいね数で見る人気の記事"></a>Facebookいいね数で見る人気の記事</h2><p>2020年に公開された記事で、良いね！数が多かったものを選出しました。こちらは上記のPVとはまた違った顔ぶれです。技術以外のネタも評価されるようですね。</p><table><thead><tr><th>#</th><th>Link</th><th>いいね数</th></tr></thead><tbody><tr><td>1</td><td><a href="https://future-architect.github.io/articles/20200613/">フューチャーの新人研修後の配属先にかける新人の思いを歌ってみた</a></td><td>75</td></tr><tr><td>2</td><td><a href="https://future-architect.github.io/articles/20200424/">社内勉強会で発表したGCP資料を公開します</a></td><td>67</td></tr><tr><td>3</td><td><a href="https://future-architect.github.io/articles/20200122/">Auth0 導入編</a></td><td>62</td></tr><tr><td>4</td><td><a href="https://future-architect.github.io/articles/20201105/">イノベーションの捉え方</a></td><td>59</td></tr><tr><td>5</td><td><a href="https://future-architect.github.io/articles/20200115/">打鍵テストをCIで回す：Cypress on GitHub Actions</a></td><td>52</td></tr><tr><td>6</td><td><a href="https://future-architect.github.io/articles/20200128/">Auth0のRulesを使って認証認可を自在にカスタマイズする</a></td><td>35</td></tr><tr><td>7</td><td><a href="https://future-architect.github.io/articles/20200205/">GCP連載#1 Stackdriver Loggingへ良い感じのログ出力方法を考える</a></td><td>33</td></tr><tr><td>8</td><td><a href="https://future-architect.github.io/articles/20201027/">Vulsの歴史</a></td><td>27</td></tr><tr><td>9</td><td><a href="https://future-architect.github.io/articles/20200715/">新人研修有志が初心者向けにバーチャルコンテストを実施しました &amp; Tips</a></td><td>22</td></tr><tr><td>10</td><td><a href="https://future-architect.github.io/articles/20200914/">GlyphFeeds連載を始めます！</a></td><td>21</td></tr><tr><td>10</td><td><a href="https://future-architect.github.io/articles/20200530/">フューチャー技術ブログの運営で心がけていること</a></td><td>21</td></tr></tbody></table><p>Facebook良いね数がこんなについていることを知らなかったので、フューチャー技術ブログでFacebookアカウントを作ったほうが良いんですかね？意見ある人はTwitterか何かでコメントいただければです。</p><h2 id="2020年いちばん寄稿してくれた人は？"><a href="#2020年いちばん寄稿してくれた人は？" class="headerlink" title="2020年いちばん寄稿してくれた人は？"></a>2020年いちばん寄稿してくれた人は？</h2><p>2020年1月1日～11/26で投稿数の多い人順でソートしました。ブログ運営はアナウンス系記事もあるのでズルい気がしますが、私がトップ。それを除くと澁川さんでした。<br>先程のPVランキングにも数多く登場するので、質量ともにフューチャー技術ブログを引っ張っていただいていることが分かりました。ありがとうございます！</p><table><thead><tr><th>#</th><th>名前</th><th>記事数</th><th>備考</th></tr></thead><tbody><tr><td>1</td><td>真野隼記</td><td>20</td><td>ブログ運営者1</td></tr><tr><td>2</td><td>澁川喜規</td><td>19</td><td></td></tr><tr><td>3</td><td>伊藤太斉</td><td>11</td><td>ブログ運営者2</td></tr><tr><td>4</td><td>伊藤真彦</td><td>10</td><td></td></tr><tr><td>5</td><td>辻大志郎</td><td>8</td><td></td></tr><tr><td>6</td><td>村田靖拓</td><td>7</td><td></td></tr><tr><td>7</td><td>村瀬善則</td><td>6</td><td></td></tr><tr><td>8</td><td>多賀聡一朗</td><td>6</td><td></td></tr><tr><td>9</td><td>栗田真</td><td>6</td><td></td></tr><tr><td>10</td><td>西田好孝</td><td>4</td><td></td></tr><tr><td>10</td><td>山田勇一</td><td>4</td><td></td></tr></tbody></table><h2 id="ベストブロガーオブザイヤー"><a href="#ベストブロガーオブザイヤー" class="headerlink" title="ベストブロガーオブザイヤー"></a>ベストブロガーオブザイヤー</h2><p>2020年はベストブロガーオブザイヤーを開催し、技術ブログ部門から3名を選出させていただきました。入賞すると粗品をプレゼントされるようです。</p><p>詳細は未来報の記事をお待ち下さい。</p><h2 id="2021年に向けて"><a href="#2021年に向けて" class="headerlink" title="2021年に向けて"></a>2021年に向けて</h2><p>2020年のペースは守れるか断言できませんが、150本以上目指していきたいと思います。</p><p>他にも、<a href="https://future-architect.github.io/articles/20201116/">TechCast</a> も継続したいのと、技術同人誌（FutureTechBook）も公開できたらなと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>フューチャー技術ブログの、投稿数・PV・人気の記事・よく投稿してくれる人を公開しました。</p><p>記事の途中でも書きましたが、運営上全くPVやらユーザ数は追っておらず、引き続き有益な技術情報を発信することをポリシーにしていきたいと思います。結果として何かしらの数値が良くなっていくと良いなと思っています。</p><p>2020年も後少しですが、引き続きよろしくおねがいします。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;技術ブログ運営の真野です。&lt;/p&gt;
&lt;p&gt;フューチャー技術ブログですが、2020年を数値で振り返りたいと思います。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="TechBlog" scheme="https://future-architect.github.io/tags/TechBlog/"/>
    
  </entry>
  
  <entry>
    <title>塗り絵の魚がすいすい泳ぐ？ ～子ども向けアトラクションを作ってみた～</title>
    <link href="https://future-architect.github.io/articles/20201126/"/>
    <id>https://future-architect.github.io/articles/20201126/</id>
    <published>2020-11-25T15:00:00.000Z</published>
    <updated>2020-11-26T11:32:26.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>当社では、年末に社内イベントとして、BPY（Best Project of the Year）と YEP(Year End Party) があり、YEPは社員だけでなくそのご家族も参加されます。</p><ul><li>BPYとYEPについては<a href="https://note.future.co.jp/n/n7b0e5de1b2bc" target="_blank" rel="noopener">未来報のこちらの記事</a>をご覧ください。</li></ul><p>BPYはかなり大掛かりなイベントで、想像を超える完成度で規模も非常に大きいです。2019年以前では会場は<a href="https://anaintercontinental-tokyo.jp/" target="_blank" rel="noopener">ANAインターコンチネンタルホテル東京</a>の大宴会場に溢れんばかりの人で、ご家族合わせて1000名以上参加されていたのではないかと思います。</p><p>2020年もそろそろBPY/YEPの季節となってきており、社内もその準備で慌ただしいです。一方でコロナ禍の影響でBPYはリモートを活用して密を防ぐ対応を、YEPについては開催が見送られてしまいました。代わりと言ってはなんですが、2019年のYEPで子ども向けのアトラクションを社内有志で制作したお話をしたいと思います。</p><h1 id="制作したもの"><a href="#制作したもの" class="headerlink" title="制作したもの"></a>制作したもの</h1><p>名付けて、「フューチャーアクアリウム」🐟🐠🐡🐙🐚です！ 脳の発育に良いとされる塗り絵と、ITを組み合わせたイノベーションです。アトラクションは食事に飽きたお子様がすぐ時間を潰せるようにという考えで大宴会場前のスペースに設置しました。</p><p><img src="/images/20201126/top.jpg" alt=""></p><p>正面から見るとこんな感じです。</p><p><img src="/images/20201126/screen.jpg" alt=""></p><p>アトラクションの流れとしては以下です。</p><ol><li>まず、子供たちに生き物の塗り絵をしてもらいます<ul><li>塗り絵はお魚さんをたくさん用意しました<br><img src="/images/20201126/nurie_template.png" alt=""></li></ul></li><li>書いてもらった絵をカメラで取り込みます<br><img src="/images/20201126/nurie.jpg" alt=""></li><li>その取り込んだ塗り絵の画像をプロジェクタで映し出したスクリーン（アクリル板）上にアニメーション付きで表示します</li><li>スクリーン上の任意の場所をタッチするとその位置を深度センサで検知し、生き物がその部分によってくるように移動させます<br><img src="/images/20201126/touch.jpg" alt=""><ul><li>そのままだと、投入された生き物で溢れかえってしまうので、ある程度増えたら、人間に釣られて消える仕組みも組み込みました。</li></ul></li></ol><p>自分の書いた絵がすぐに画面上に表示され、気持ちよさそうに泳ぐため、お子さまからは大好評でした。もちろん社員のお父さん・お母さんにも好評でした♪</p><h1 id="制作の裏側"><a href="#制作の裏側" class="headerlink" title="制作の裏側"></a>制作の裏側</h1><h2 id="スケジュールと体制"><a href="#スケジュールと体制" class="headerlink" title="スケジュールと体制"></a>スケジュールと体制</h2><p>開発期間は通常業務を行いながらの1ヶ月弱という、結構、タイトなスケジュールでした。そうです。ちょうど2019年の11月中旬（この記事が公開される頃）に、YEPの企画チームから依頼を受け、有志を募り開発をスタートさせたのでした。</p><p>画像などのコンテンツ担当3人、アプリの開発担当3人のチームで開発しました。</p><h2 id="ハードウェア構成"><a href="#ハードウェア構成" class="headerlink" title="ハードウェア構成"></a>ハードウェア構成</h2><p>ハードウェアの構成は、PC(<a href="https://www.intel.co.jp/content/www/jp/ja/products/boards-kits/nuc/kits/nuc8i5bek.html" target="_blank" rel="noopener">IntelのNUC</a>)に4Kプロジェクタ2台、深度センサ(<a href="https://www.intelrealsense.com/depth-camera-d435i/" target="_blank" rel="noopener">IntelのRealSense</a>)1台、USBカメラ1台、ポータブルモニタ1台を接続したものを２セット準備しました。</p><p><img src="/images/20201126/hardware_structure.png" alt=""></p><p>楽屋裏はこんな形でした。</p><p><img src="/images/20201126/back.jpg" alt=""></p><p>正面から見るとこういう感じに見えます。お魚さんがいないと寂しい感じです。</p><p><img src="/images/20201126/monitor.jpg" alt=""></p><p>4Kプロジェクタでスクリーン（アクリル板）に塗り絵の魚たちを表示し、指でタッチすると移動させたいので、イベントを拾うためRealSenseの深度センサを利用しています。</p><p><img src="/images/20201126/sensor.png" alt=""></p><p>USBカメラは塗り絵の撮影用です。</p><h2 id="ソフトウェア構成"><a href="#ソフトウェア構成" class="headerlink" title="ソフトウェア構成"></a>ソフトウェア構成</h2><p>ソフトウェアの開発は<a href="https://processing.org/" target="_blank" rel="noopener">Processing</a>で行いました。Processingが初めてな開発者もいましたが、ProcessingはJavaがベースとなっている言語でその開発者は元ゲーム系のC/C++プログラマーだったので、比較的すぐにキャッチアップし実装することができました。</p><p>まずは、一人の開発者が生き物の移動とアニメーションの基本的な処理を先に実装し、その後、別の開発者が各処理を統合しやすくフレームワーク的な作りを取り入れた後、生き物の画像データの取り込み、背景のアニメーション、深度センサによる位置検出などの処理を３人の開発者で分担・並行して開発を進めました。</p><p>生き物のアニメーションに関しては、某有名狩りゲーの魚の動きを参考に特定方向に対して速度を与えて減衰させる手法を取り、また、進行方向が左右に切り替わる際の反転アニメーションについては、既存のライブラリが存在しなかったため始めから作り込みました。</p><p>生き物の画像データの取り込みに関しては、リアルタイムに取り込むため、内部で特定フォルダにおけるファイル追加イベントを監視し、非同期で画像を読み込みアプリに表示できるようにしています。</p><h2 id="当日の様子"><a href="#当日の様子" class="headerlink" title="当日の様子"></a>当日の様子</h2><p>BPY/YEP当日が、我々にとってのリリース日です。子どもたちの笑顔のためにも失敗は許されません。</p><p>幸いなことに、ほぼ予定通りにアトラクションを開業・運営することができました。覚えている限りのトラブルは、本番の会場では開発時と照明環境が異なり、画像データの取り込みの際に切り抜き処理が少しうまくいかないことでした。それ自体はその場で微調整を行うことで、大きな問題にはなりませんでした。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>塗り絵の魚がすいすい泳ぐ、「フューチャーアクアリウム」🐟🐠🐡🐙🐚の解説でした。</p><p>来年こそはコロナ禍が去って、よりパワーアップしたアトラクションが登場してくることを期待したいと思います。</p><p>社員の方で、こういった装置に興味がある方や、パワーアップさせたい方がいましたら山本まで連絡ください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;当社では、年末に社内イベントとして、BPY（Best Project of the Year）と YEP(Year End 
      
    
    </summary>
    
    
      <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
      <category term="RealSense" scheme="https://future-architect.github.io/tags/RealSense/"/>
    
      <category term="Processing" scheme="https://future-architect.github.io/tags/Processing/"/>
    
  </entry>
  
  <entry>
    <title>Qiita Advent Calendar 2020 に参加します</title>
    <link href="https://future-architect.github.io/articles/20201125/"/>
    <id>https://future-architect.github.io/articles/20201125/</id>
    <published>2020-11-24T15:00:00.000Z</published>
    <updated>2020-11-26T01:32:15.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニット所属、技術ブログ編集部の<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤太斉</a>です。</p><p>師走と呼ばれる12月、忙しくなる季節が今年もやってまいりました。そんな12月にフューチャーは今年もQiita主催のアドベントカレンダーに参加します。</p><p><img src="/images/20201125/advent-calendar-1865325_1280.png" alt=""></p><p><a href="https://pixabay.com/ja/users/pixaline-1569622/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1865325" target="_blank" rel="noopener">Pixaline</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1865325" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h2 id="アドベントカレンダーとは"><a href="#アドベントカレンダーとは" class="headerlink" title="アドベントカレンダーとは"></a>アドベントカレンダーとは</h2><p>アドベントカレンダーとは12/1から12/25のクリスマスまでカウントダウンするものです。日数を数える窓をめくるたびにイラストやチョコレートなどのお菓子が入っているグッズもよく見かけますね。</p><p>IT技術ブログ界隈ではこれにならって25日までの間、リレー方式で記事投稿をおこないます（IT業界ではない人からは怪訝そうな目で見られることも多い気がしますが、個人的には面白い慣習だと思っています）。毎年、数多くのカレンダーが作成され、中には1人で25投稿する方もいるそうです。</p><p>その中でもQiitaアドベントカレンダーは有名です。エンジニアの知見、知識共有サイトの<a href="https://qiita.com/" target="_blank" rel="noopener">Qiita</a>が毎年主催している12月の企画です。カテゴリごとにフォロー数やLGTM数をスコアリングして盛り上げる機能もあり、色々な意味で祭典です。</p><p>フューチャーは2015年から参加しており、2020年の今回で6回目の参加です。</p><h2 id="フューチャーとアドベントカレンダー"><a href="#フューチャーとアドベントカレンダー" class="headerlink" title="フューチャーとアドベントカレンダー"></a>フューチャーとアドベントカレンダー</h2><p>さきほど申したとおり、フューチャー初回のアドベントカレンダーへの参加は<a href="https://qiita.com/advent-calendar/2015/future" target="_blank" rel="noopener">2015年</a>でした。それまではそういったイベントに参加した記録が無いので当時は割と画期的でした。</p><p>参加を決めたのは、同年の8月くらいに<a href="https://qiita.com/organizations/future" target="_blank" rel="noopener">Qiita Organization</a>を有志が勝手に作ったことがあり（事後報告でルールを策定しOKをもらう）、Qiitaに技術Tipsを投稿する人が増えたことがあり25枠埋められるんじゃない？ということで当時の担当者が勢いで作成しました。結果は半分くらいすぐ埋まったものの、控えめな正確な人が多かったのか3,4割が穴あき。焦った当時の担当者が知り合いにチャットDMを送りまくり参加者をかき集めたという逸話があります。それが2019年には2枠があっという間に埋まるまでに成長したので、会社の文化ってすぐ変わるんだなと感じています。</p><p>さて、2015年のアドベントカレンダーの話に戻りますが、当時はリレー形式で繋ぐスタイルがなぜか社内で盛り上がり、<a href="https://future-architect.github.io/articles/20160217/">LT大会でもしようよ</a> とVulsの神戸さんが口走ったのをキッカケに本当にやることにしました。トリガーは神戸さんですが準備は当時の担当者と同じなので大変でした。LT大会は今も続く社内イベントですので、色々な社内文化が起こるキッカケが、Qiitaとそのアドベントカレンダーを系譜としています。連続で参加記録を伸ばすたびに少し趣深いです。</p><h2 id="アドベントカレンダー2020"><a href="#アドベントカレンダー2020" class="headerlink" title="アドベントカレンダー2020"></a>アドベントカレンダー2020</h2><p>今年のアドベントカレンダーはこちらになります。例年通りQiitaに作成しています。</p><p><img src="/images/20201125/image.png" alt=""></p><ul><li><a href="https://qiita.com/advent-calendar/2020/future" target="_blank" rel="noopener">フューチャー Advent Calendar 2020</a></li></ul><p>今回の参加者の一部を紹介します。</p><ul><li>自分が誕生日だから記事を書く</li><li>毎年参加しているベテラン勢</li><li>今年新卒で入社した方</li></ul><p>などなど、濃いメンバーでお送りします。ちなみに、今年のカレンダーはスタートと終わりのメンバーの苗字が同じですが、別人物です。</p><h2 id="発表テーマ"><a href="#発表テーマ" class="headerlink" title="発表テーマ"></a>発表テーマ</h2><p>例年と同じく、IT技術であること以外はフリーテーマです。</p><p>ポリシーとしては基本的にはQiitaそのものに投稿していただくスタイルですが（順位も少し気にしています）、Qiitaの投稿規約に沿わない記事（エッセー過ぎるもの、プログラミングに関係ないもの）は技術ブログ側に投稿することもあります。このあたりの決めは各人にお願いしています。</p><p>その他、個人ブログへのリンクは非推奨で基本的にはNGとアナウンスしています。</p><h2 id="その2は作らないの？"><a href="#その2は作らないの？" class="headerlink" title="その2は作らないの？"></a>その2は作らないの？</h2><p>2019年は2枠作りましたが、今年は1枠です。</p><p>理由は2020年は<a href="https://future-architect.github.io/articles/20200908/">技術ブログ独自の連載企画</a>を月1ペースで行っていたため、社員の多くの方がすでにアウトプットを出している状態。だいぶガス抜きできたため、年にこの時期だけブログを書くという層をだいぶ減らせたからではないかなと思っているからです。</p><p>他にもいくつか理由があります。</p><ul><li>会社のアドベントカレンダーだけではなく他のコミュニティベースのアドベントカレンダーにも投稿して欲しい</li><li>毎日2記事以上を社内でシェアしても、読んでくれる人が減っている体感があるため、1本に絞りたい</li></ul><p>です。</p><h2 id="運営上の工夫"><a href="#運営上の工夫" class="headerlink" title="運営上の工夫"></a>運営上の工夫</h2><p>2020年は去年があっという間に枠が埋まって、気がついたときには2枠目すら申し込めなかったという声があったため、すこし募集方法を変えました。</p><p>今まではアドベントカレンダーが作成できると気がついたタイミングで担当者が勢いで作成し、部署Chatに流すスタイルでしたが、今回からは事前に全社アナウンスをかけて、公開日を固定化。その前段階でOrganizationに参加したい人がいないか事前申し込み期間も用意しました。そのかいあってか、2020年は応募タイミングによる不満の声はなくなったと思います。（勢いは若干減りましたが）。</p><h2 id="社員のみなさまへ"><a href="#社員のみなさまへ" class="headerlink" title="社員のみなさまへ"></a>社員のみなさまへ</h2><p>今年もご参加いただいた方、ありがとうございました。記事の作成をぜひお願いします！でも、Qiitaの規約に沿わないヤンチャは控えてくださいね。</p><p>また、今年参加を見送った方もQiita記事への投稿があればOrganizationに招待しますので、中の人にお声がけください。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>年末のイベントとしてすっかり定着したQiitaのアドベントカレンダーですが、より面白いネタが出てくるかと思いますので、良いと思った記事は是非LGTMしていただければと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXユニット所属、技術ブログ編集部の&lt;a href=&quot;https://twitter.com/kaede
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="TechBlog" scheme="https://future-architect.github.io/tags/TechBlog/"/>
    
      <category term="Qiita" scheme="https://future-architect.github.io/tags/Qiita/"/>
    
      <category term="AdventCalendar" scheme="https://future-architect.github.io/tags/AdventCalendar/"/>
    
      <category term="AdventCalendar2020" scheme="https://future-architect.github.io/tags/AdventCalendar2020/"/>
    
  </entry>
  
  <entry>
    <title>Auth0の出版記念に行ってきました！</title>
    <link href="https://future-architect.github.io/articles/20201124/"/>
    <id>https://future-architect.github.io/articles/20201124/</id>
    <published>2020-11-23T15:00:00.000Z</published>
    <updated>2020-11-24T15:49:20.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="出版記念懇親会"><a href="#出版記念懇親会" class="headerlink" title="出版記念懇親会"></a>出版記念懇親会</h1><p>Auth0さんより、クローズドの電子書籍出版記念にご招待いただき、Futureより3名で出席してまいりました。</p><ul><li>マンガでわかる！Auth0誕生の秘密とは<br><a href="https://auth0.co.jp/lp/manga/index.html" target="_blank" rel="noopener">公式ページ</a><br><a href="https://www.amazon.co.jp/dp/B08MZRCLTK" target="_blank" rel="noopener">ダウンロードページ</a></li></ul><h1 id="Auth0について"><a href="#Auth0について" class="headerlink" title="Auth0について"></a>Auth0について</h1><p><a href="https://auth0.com/jp/" target="_blank" rel="noopener">Auth0</a>は、認証・認可のサービスを提供するIDaaSの1つです。 </p><p><a href="https://github.com/auth0" target="_blank" rel="noopener">開発ライブラリ</a>が豊富でカスタマイズ性がとても高く、何よりデベロッパーフレンドリーな部分が開発者としてとても好きな部分です。</p><p>弊社でも複数の案件で採用し、そのご縁でAuth0さんの<a href="https://eventregist.com/e/DcdTqLuiWe2Z" target="_blank" rel="noopener">イベント</a>に登壇させていただいた他、<a href="https://future-architect.github.io/tags/Auth0/">当ブログ</a>でもいくつか記事を掲載していますので、是非ご覧ください。</p><h1 id="出版記念懇親会の流れ"><a href="#出版記念懇親会の流れ" class="headerlink" title="出版記念懇親会の流れ"></a>出版記念懇親会の流れ</h1><h3 id="1-Auth0-SVP-Internationalスティーブン・リー・プルマンさん挨拶"><a href="#1-Auth0-SVP-Internationalスティーブン・リー・プルマンさん挨拶" class="headerlink" title="1. Auth0 SVP Internationalスティーブン・リー・プルマンさん挨拶"></a>1. Auth0 SVP Internationalスティーブン・リー・プルマンさん挨拶</h3><p>Auth0 SVP Internationalのスティーブン・リー・プルマンさんによるスピーチで、日本市場に対しての抱負が語られました。<br>写真掲載はAuth0さんに許可を頂いております。</p><p>快くご提供いただき、ありがとうございました！</p><p><img src="/images/20201124/Steven-Rees-Pullman%E3%81%AE%E3%82%B3%E3%83%92%E3%82%9A%E3%83%BC.jpg" alt=""></p><ul><li>トピック<ul><li>Auth0として、日本語ローカライズにコミットすること</li><li>日本人スタッフを増やし、体制を強化すること</li><li>日本事業が好調で、2021年は大きな成長をめざしていること</li></ul></li></ul><p>利用していても、メニュー・サポートの日本語化はとてもニーズの高い内容だと感じているので、期待して待ちたいと思います。</p><h3 id="2-懇親会"><a href="#2-懇親会" class="headerlink" title="2. 懇親会"></a>2. 懇親会</h3><p>お酒を飲んでしまい、写真をほぼ取りそびれています。</p><p>辛うじて一緒に出席したメンバーが残した料理の写真です。</p><p><img src="/images/20201124/iOS_%E3%81%AE%E7%94%BB%E5%83%8F_(5).jpg" alt=""></p><h1 id="ノベルティ"><a href="#ノベルティ" class="headerlink" title="ノベルティ"></a>ノベルティ</h1><ul><li>書籍版の漫画<br>大本命の書籍です。<br>Auth0の誕生秘話が語られています。</li><li>事例集<br>８つの事例が紹介してあり、最近のAuth0さんの勢いを感じる内容でした。</li><li>Auth0マスク</li><li>Auth0カレー<br><img src="/images/20201124/iOS_%E3%81%AE%E7%94%BB%E5%83%8F_(4).jpg" alt=""></li></ul><h1 id="フォトジェニックスポット"><a href="#フォトジェニックスポット" class="headerlink" title="フォトジェニックスポット"></a>フォトジェニックスポット</h1><p>Auth0のCEO/CTOと写真の撮れるフォトジェニックスポットも用意されていました。<br>せっかくなので、出席メンバー個別に撮影。恐らく、一番はしゃいでた集団だったと思います。</p><p>※撮影時以外はマスクを着用しておりました。</p><p><img src="/images/20201124/iOS_%E3%81%AE%E7%94%BB%E5%83%8F_(2).jpg" alt=""></p><p><img src="/images/20201124/iOS_%E3%81%AE%E7%94%BB%E5%83%8F_(3).jpg" alt=""></p><p>どうも私です！  </p><p><img src="/images/20201124/iOS_%E3%81%AE%E7%94%BB%E5%83%8F_(1).jpg" alt=""></p><h1 id="なにはともあれ"><a href="#なにはともあれ" class="headerlink" title="なにはともあれ"></a>なにはともあれ</h1><p>出版おめでとうございます！</p><p>フューチャー技術ブログの<a href="https://future-architect.github.io/tags/Auth0/">Auth0連載</a>も盛り上げていきます。よろしくおねがいします。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;出版記念懇親会&quot;&gt;&lt;a href=&quot;#出版記念懇親会&quot; class=&quot;headerlink&quot; title=&quot;出版記念懇親会&quot;&gt;&lt;/a&gt;出版記念懇親会&lt;/h1&gt;&lt;p&gt;Auth0さんより、クローズドの電子書籍出版記念にご招待いただき、Futureより3名で出席してまい
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
  </entry>
  
  <entry>
    <title>CloudEndure Migration - 実践編</title>
    <link href="https://future-architect.github.io/articles/20201120/"/>
    <id>https://future-architect.github.io/articles/20201120/</id>
    <published>2020-11-19T15:00:00.000Z</published>
    <updated>2020-11-24T15:49:23.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。<br>2020年1月中途入社、TIGの八巻です。</p><p>前回記事「<a href="https://future-architect.github.io/articles/20201021/">CloudEndure Migration - 導入編</a>」の続きです。<br>今回は、実際にCloudEndure Migrationを使った移行を実践したいと思います。</p><p>初期設定や用語等は、前回記事をご確認ください。</p><h1 id="今回の環境構成図"><a href="#今回の環境構成図" class="headerlink" title="今回の環境構成図"></a>今回の環境構成図</h1><p>CloudEndure Migrationを実施する環境は以下の通りです。<br><img src="/images/20201120/CloudEndure-Diagram.png" alt=""></p><p>GCPに用意したGCEのVMインスタンスを、AWSへ移行してみます。<br>移行元のサーバーとして、以下のVMインスタンスを用意しました。</p><table><thead><tr><th>項目</th><th>値</th></tr></thead><tbody><tr><td>名前</td><td>cloudendure-source</td></tr><tr><td>OS</td><td>CentOS Linux release 7.8.2003 (Core)</td></tr><tr><td>マシンタイプ</td><td>e2-micro（vCPU x 2、メモリ 1 GB）</td></tr><tr><td>ゾーン</td><td>asia-northeast1-a</td></tr><tr><td>アプリケーション</td><td>WordPress 5.5.3</td></tr></tbody></table><p>AWSへ移行後、Wordpressにアクセスするまでを実践します。<br><img src="/images/20201120/GCE-Info(Care).jpg" alt=""><br><img src="/images/20201120/GCE-WordPress%E7%94%BB%E9%9D%A2.png" alt=""></p><h1 id="作業の流れ"><a href="#作業の流れ" class="headerlink" title="作業の流れ"></a>作業の流れ</h1><p>以下の流れで作業を実施します。</p><ol><li>要件の確認</li><li>CloudEnduereエージェントのインストール</li><li>データレプリケーション</li><li>ターゲットマシンの設定</li><li>ターゲットマシンの起動<ol><li>テストモード<ol><li>ターゲットマシン起動</li><li>起動後の設定修正</li></ol></li><li>カットオーバー<ol><li>ターゲットマシン起動</li><li>起動後の設定修正(テストモードと同じ内容のため、省略)</li></ol></li></ol></li><li>ターゲットマシンからエージェントのアンインストール</li></ol><h1 id="要件確認"><a href="#要件確認" class="headerlink" title="要件確認"></a>要件確認</h1><p>CloudEndureを利用する要件を満たしているか確認します。</p><h2 id="共通の要件確認"><a href="#共通の要件確認" class="headerlink" title="共通の要件確認"></a>共通の要件確認</h2><p>全OS共通で、以下の要件を満たしている必要があります。</p><table><thead><tr><th>項目</th><th>要件</th><th>備考</th></tr></thead><tbody><tr><td>仮想化タイプ</td><td>準仮想化タイプはサポート対象外</td><td></td></tr><tr><td>EBSのマルチアタッチ</td><td>EBSマルチアタッチ機能を使ったEC2インスタンスは、移行元のサーバーとしてサポート対象外</td><td>AWSからAWSへの移行を行う場合、確認が必要です。</td></tr></tbody></table><h3 id="仮想化タイプ"><a href="#仮想化タイプ" class="headerlink" title="仮想化タイプ"></a>仮想化タイプ</h3><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cloudendure-source ~]<span class="comment"># lscpu | grep "Virtualization type"</span></span><br><span class="line">Virtualization <span class="built_in">type</span>:   full</span><br></pre></td></tr></table></figure><p>完全仮想化のため、OKです。</p><h3 id="EBSのマルチアタッチ"><a href="#EBSのマルチアタッチ" class="headerlink" title="EBSのマルチアタッチ"></a>EBSのマルチアタッチ</h3><p>今回は、GCEのため対象外。</p><h2 id="LinuxOS固有の要件確認"><a href="#LinuxOS固有の要件確認" class="headerlink" title="LinuxOS固有の要件確認"></a>LinuxOS固有の要件確認</h2><p>LinuxOSは、以下の要件を満たしている必要があります。</p><table><thead><tr><th>項目</th><th>要件</th><th>備考</th></tr></thead><tbody><tr><td>カーネルバージョン</td><td>2.6.18-164以前のカーネルバージョンはサポート対象外</td><td></td></tr><tr><td>Pythonバージョン</td><td>2.4以上、もしくは3.0以上</td><td>エージェントのインストールに必要です。</td></tr><tr><td>ブートローダー</td><td>GRUBのみサポート</td><td></td></tr><tr><td>ファイルシステム</td><td>root もしくは、bootがXFS5タイプのファイルシステムの場合、サポート対象外</td><td>xfsがNGなのか不明のため、今回検証してみようと思います。</td></tr></tbody></table><h3 id="カーネルバージョン確認"><a href="#カーネルバージョン確認" class="headerlink" title="カーネルバージョン確認"></a>カーネルバージョン確認</h3><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cloudendure-source ~]<span class="comment"># uname -r</span></span><br><span class="line">3.10.0-1127.19.1.el7.x86_64</span><br></pre></td></tr></table></figure><p>2.6.18-164以降のため、OKです。</p><h3 id="Pythonバージョン"><a href="#Pythonバージョン" class="headerlink" title="Pythonバージョン"></a>Pythonバージョン</h3><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cloudendure-source ~]<span class="comment"># python --version</span></span><br><span class="line">Python 2.7.5</span><br></pre></td></tr></table></figure><p>2.4以上のため、OKです。</p><h3 id="ブートローダーの確認"><a href="#ブートローダーの確認" class="headerlink" title="ブートローダーの確認"></a>ブートローダーの確認</h3><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@cloudendure-source ~]<span class="comment"># ll /boot/grub2/grub.cfg </span></span><br><span class="line">-rw-r--r--. 1 root root 5323 Oct 13 05:43 /boot/grub2/grub.cfg</span><br></pre></td></tr></table></figure><p>ブートローダーはgrubのため、OKです。</p><h3 id="rootとbootのファイルシステム"><a href="#rootとbootのファイルシステム" class="headerlink" title="rootとbootのファイルシステム"></a>rootとbootのファイルシステム</h3><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@cloudendure-source ~]<span class="comment"># df -T</span></span><br><span class="line">Filesystem     Type     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">devtmpfs       devtmpfs    498744       0    498744   0% /dev</span><br><span class="line">tmpfs          tmpfs       506876       0    506876   0% /dev/shm</span><br><span class="line">tmpfs          tmpfs       506876    6900    499976   2% /run</span><br><span class="line">tmpfs          tmpfs       506876       0    506876   0% /sys/fs/cgroup</span><br><span class="line">/dev/sda2      xfs       20754432 3063128  17691304  15% /</span><br><span class="line">/dev/sda1      vfat        204580   11440    193140   6% /boot/efi</span><br><span class="line">tmpfs          tmpfs       101376       0    101376   0% /run/user/997</span><br><span class="line">tmpfs          tmpfs       101376       0    101376   0% /run/user/1000</span><br></pre></td></tr></table></figure><p><code>/dev/sda2      xfs       20754432 3063128  17691304  15% /</code><br>Typeにxfsとありますが、NGとなるか検証したいと思います。</p><h2 id="CentOS固有の要件・注意点確認"><a href="#CentOS固有の要件・注意点確認" class="headerlink" title="CentOS固有の要件・注意点確認"></a>CentOS固有の要件・注意点確認</h2><p>最後に、CentOS固有の要件を確認します。<br><img src="/images/20201120/CentOS-Note.png" alt=""></p><p>引用元： <a href="https://docs.cloudendure.com/Content/Getting_Started_with_CloudEndure/Supported_Operating_Systems/Supported_Operating_Systems.htm" target="_blank" rel="noopener">Supported Operating Systems</a></p><p>Note３とNote４、Note７を見ろとあるので、確認します。</p><blockquote><p>Note 3: Nitro instances (for example, the C5 and M5 family types) will work with RHEL 7.0+ and CentOS 7.0+ in AWS in a Linux environment and with Windows Server 2008 R2, Windows Server 2012 R2, Windows Server 2016, and Windows Server 2019 in a Windows environment. Certain newer AWS regions only support Nitro instances and therefore only support the previously mentioned operating systems.</p></blockquote><p>Nitroインスタンスが利用できるOSの種類について記載されています。<br>今回はCentOS7のため、Nitroインスタンスの利用がサポートされています。</p><blockquote><p>Note 4: Kernel versions 2.6.32-71 is not supported in RHEL 6.0 and CentOS 6.0 in AWS.</p></blockquote><p>RHEL6.0/CentOS6.0のカーネルバージョンが「「2.6.32-71」の場合、サポート対象外です。<br>今回はCentOS7のため、無関係です。</p><blockquote><p>Note 7: A pre-requirement for installing the CloudEndure Agent on RHEL8 and CentOS 8 is first running the following:<br>sudo yum install elfutils-libelf-devel</p></blockquote><p>RHEL8.0/CentOS8.0の場合、<code>sudo yum install elfutils-libelf-devel</code>の実行が必要とあります。<br>今回はCentOS7のため、無関係です。</p><p>事前確認は以上です。<br>rootのファイルシステムがxfsなのが気になりますが、移行できるか検証してみたいと思います。</p><h1 id="CloudEndureエージェントインストール"><a href="#CloudEndureエージェントインストール" class="headerlink" title="CloudEndureエージェントインストール"></a>CloudEndureエージェントインストール</h1><p>実際にCloudEndure Migrationを利用した移行を開始します。</p><h2 id="エージェントのインストール手順"><a href="#エージェントのインストール手順" class="headerlink" title="エージェントのインストール手順"></a>エージェントのインストール手順</h2><p>マシンの登録がない初期は、CloudEndureコンソールの「Machines」に記載があります。<br>また、画面上部にある「MACHINE ACTIONS…」の「Add Machines」からも確認が可能です。<br>※インストール用のTokenは、アカウント固有の情報のため伏せています。<br><img src="/images/20201120/AgentInstall%E6%96%B9%E6%B3%95.jpg" alt=""></p><h3 id="エージェントのインストーラーを取得"><a href="#エージェントのインストーラーを取得" class="headerlink" title="エージェントのインストーラーを取得"></a>エージェントのインストーラーを取得</h3><p>以下のコマンドを実行して、CloudEndureエージェントのインストーラーを取得します。<br>※wgetは事前にインストールしておいてください。<br><code>wget -O ./installer_linux.py https://console.cloudendure.com/installer_linux.py</code></p><figure class="highlight bash"><figcaption><span>実行結果例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@cloudendure-source ~]<span class="comment"># wget -O ./installer_linux.py https://console.cloudendure.com/installer_linux.py</span></span><br><span class="line">--2020-11-05 14:20:04--  https://console.cloudendure.com/installer_linux.py</span><br><span class="line">Resolving console.cloudendure.com (console.cloudendure.com)... 52.72.172.158</span><br><span class="line">Connecting to console.cloudendure.com (console.cloudendure.com)|52.72.172.158|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 7659 (7.5K) [application/octet-stream]</span><br><span class="line">Saving to: ‘./installer_linux.py’</span><br><span class="line">100%[=========================================================================&gt;] 7,659       --.-K/s   <span class="keyword">in</span> 0s      </span><br><span class="line">2020-11-05 14:20:05 (1.17 GB/s) - ‘./installer_linux.py’ saved [7659/7659]</span><br></pre></td></tr></table></figure><p>実行時のログにもありますが、「console.cloudendure.com」を名前解決して、<br>IPアドレス「52.72.172.158」に接続しています。<br>これは、CloudEndure Service ManagerのIPアドレスです。</p><p>インストーラーが取得できない場合は、<a href="https://future-architect.github.io/articles/20201021/">導入編</a>にも記載していますが、<br>ネットワーク要件を満たしているか確認してください。</p><h3 id="エージェントのインストーラーを実行"><a href="#エージェントのインストーラーを実行" class="headerlink" title="エージェントのインストーラーを実行"></a>エージェントのインストーラーを実行</h3><p>以下のコマンドを実行して、インストーラーを実行します。<br>※${インストール用Token}は、書き換えてください。<br><code>sudo python ./installer_linux.py -t ${インストール用のToken} --no-prompt</code></p><figure class="highlight bash"><figcaption><span>実行結果例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@cloudendure-source ~]<span class="comment"># sudo python ./installer_linux.py -t XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX-XXXX --no-prompt</span></span><br><span class="line">The installation of the CloudEndure Agent has started.</span><br><span class="line">Running the Agent Installer <span class="keyword">for</span> a 64 bit system...</span><br><span class="line">Connecting to CloudEndure Console... Finished.</span><br><span class="line">Identifying disks <span class="keyword">for</span> replication.</span><br><span class="line">Disk to replicate identified: /dev/sda of size 20.0 GiB</span><br><span class="line">All disks <span class="keyword">for</span> replication were successfully identified.</span><br><span class="line">Downloading CloudEndure Agent... Finished.</span><br><span class="line">Installing CloudEndure Agent... Finished.</span><br><span class="line">Adding the Source machine to CloudEndure Console... Finished.</span><br><span class="line">Instance ID: XXXXXXXXXXXXXXXXXXX.</span><br><span class="line">Installation finished successfully.</span><br></pre></td></tr></table></figure><p>デフォルトでは、エージェントのインストールが完了すると同時にデータのレプリケーションが開始されます。</p><p>複数台の移行元サーバーに対して、エージェントを同時にインストールする場合、<br>同時にレプリケーションが実行されるとネットワーク環境によっては、占有してしまう要因になります。</p><p>インストール完了直後にレプリケーションを開始させたくない場合は、<br>インストーラー実行時に<code>--no-replication</code>のオプションをつけることで防ぐことができます。</p><p><code>--no-replication</code>を使ってインストールが完了すると、CloudEnduereコンソールの「Machines」にマシンの登録のみ行われます。<br>レプリケーションを開始するには、「Machines」&gt; 「MACHINE ACTIONS」メニューから、「Start/resume Data Replication」をクリックすることで実施可能です。<br><img src="/images/20201120/DataReplicationStart.png" alt=""></p><h1 id="データのレプリケーション"><a href="#データのレプリケーション" class="headerlink" title="データのレプリケーション"></a>データのレプリケーション</h1><p>エージェントのインストール完了後、CloudEndureコンソールの「Machines」に登録され、レプリケーションが開始します。<br><img src="/images/20201120/Insrall%E7%9B%B4%E5%BE%8C.png" alt=""><br>また、AWSコンソールでは、レプリケーションサーバの起動が確認できます。※今回はt3.smallで起動<br><img src="/images/20201120/ReplicationServerStart.png" alt=""></p><p>登録されたマシンをクリックするとレプリケーションの状況が表示されます。<br>進捗状況は、パーセンテージと容量で表示されます。<br><img src="/images/20201120/Replication-8%.png" alt=""></p><p>補足ですが、登録されたマシン毎に、レプリケーションサーバーのスペックを変更することも可能です。<br>変更については「REPLICATION SETTINGS」から可能です。<br>今回は、レプリケーションサーバーのインスタンスタイプを「t3.medium」に変更してみます。<br><img src="/images/20201120/ReplicationSettings-Machines.png" alt=""></p><p>インスタンスタイプを変更して設定を保存すると、<br>指定したインスタンスタイプのレプリケーションサーバが起動されます。<br><img src="/images/20201120/AddReplicationServer.png" alt=""></p><p>変更後のレプリケーションサーバーの起動後、<br>変更前のインスタンスがレプリケーションで使用されていない場合、インスタンスは終了されます。</p><p>レプリケーションが完了すると以下のような画面が表示されます。<br><img src="/images/20201120/Replication-Finish.png" alt=""></p><p>ちなみに、インスタンスタイプがt3.small、EBSのボリュームタイプがStandardのレプリケーションサーバだと、レプリケーション完了まで約20分かかりました。また、インスタンスタイプがt3.medium、EBSのボリュームタイプがStandardのレプリケーションサーバだと、約17分でレプリケーションが完了しました。</p><p>レプリケーションの速さについては、以下のページに記載があります。</p><blockquote><p>The replication speed depends on 4 key factors:</p><p>The uplink speed from that server to the Replication Server and bandwidth available.<br>The overall disk storage.<br>The changes in the disk while it is replicating.<br>I/O speed of the storage itself.</p></blockquote><p>参考ページ：<a href="https://docs.cloudendure.com/#FAQ/Other_Troubleshooting_Topics/Understanding_Replication_Speed.htm?Highlight=Replication" target="_blank" rel="noopener">Understanding Replication Speed</a></p><p>レプリケーションの速さについては、<br>移行元サーバーからレプリケーションサーバーへの通信速度とその間の帯域幅や<br>ストレージのI/O速度等が影響するようです。</p><h1 id="ターゲットマシンの設定"><a href="#ターゲットマシンの設定" class="headerlink" title="ターゲットマシンの設定"></a>ターゲットマシンの設定</h1><p>データのレプリケーションが完了したら、ターゲットマシンの設定を行います。<br>登録されたマシンのページにある「BLUE PRINT」から設定を行います。<br><img src="/images/20201120/Machine-BLUE_PRINT.png" alt=""><br>AWSに移行後のEC2は、ここで設定した内容で起動されます。</p><p>EC2インスタンスを起動する際の設定項目と類似しているため、<br>設定する項目や値については、そこまで悩むことはないと思います。</p><table><thead><tr><th align="left">設定項目</th><th align="left">内容</th><th align="left">備考</th></tr></thead><tbody><tr><td align="left">MachineType</td><td align="left">EC２のインスタンスタイプを選択します。</td><td align="left"></td></tr><tr><td align="left">LaunchType</td><td align="left">オンデマンド、専有ホスト、専有インスタンスなど、起動するテナント属性を選択します。</td><td align="left"></td></tr><tr><td align="left">Subnet</td><td align="left">既存のサブネット、もしくは新しく作成するかを選択します。</td><td align="left"></td></tr><tr><td align="left">SecurityGroups</td><td align="left">セキュリティグループを設定します。新規に作成することも可能です。</td><td align="left">新規作成の場合、ポート80、443、22、および3389が許可されます。本番として起動する場合は、事前に作成したものを設定してください。</td></tr><tr><td align="left">PrivateIP</td><td align="left">プライベートIPアドレスを設定します。デフォルトでは、新規にプライベートIPが作成されます。</td><td align="left">起動するサブネット内の範囲であれば、特定のプライベートIPアドレスを明示的に設定することも可能です。</td></tr><tr><td align="left">Elastic IP</td><td align="left">Elastic IPアドレスを使用するか選択します。</td><td align="left">Create Newを選択することで、新規にElasticIPアドレスを作成することが可能です</td></tr><tr><td align="left">PublicIP(ephemeral)</td><td align="left">パブリックIPを使用するかどうかを選択します。</td><td align="left">サブネット構成に従ってパブリックIPを使用するオプションもあります。これは、ElasticIPの設定がnoneの場合にのみ適用されます。</td></tr><tr><td align="left">PlacementGroup</td><td align="left">プレイスメントグループを設定します。</td><td align="left">この項目はオプションです。</td></tr><tr><td align="left">IAMRole</td><td align="left">IAMRoleを設定します。</td><td align="left"></td></tr><tr><td align="left">Use Existing Instance ID</td><td align="left">既に作成済みのEC2インスタンスを選択します。</td><td align="left">この項目はオプションです。ほとんどのユースケースで使用しない項目です。</td></tr><tr><td align="left">Initial Target Instance State</td><td align="left">ターゲットマシンを起動した状態にするか、停止した状態にするか設定します。</td><td align="left"></td></tr><tr><td align="left">Tags</td><td align="left">ターゲットマシンのタグを設定します。</td><td align="left">この項目はオプションです。</td></tr><tr><td align="left">Disks</td><td align="left">ディスクタイプを選択します。Standard、SSD、またはProvisioned SSDを選択できます。</td><td align="left"></td></tr></tbody></table><p>参考ページ：<a href="https://docs.cloudendure.com/#Configuring_and_Running_Migration/Configuring_the_Target_Machine_Blueprint/Configuring_the_Target_Machine_Blueprint.htm#Configuring_a_Machine' target="_blank" rel="noopener"s_Blueprint_..61%3FTocPath%3DNavigation%7CConfiguring%2520and%2520Running%2520Migration%7CConfiguring%2520the%2520Target%2520Machine%2520Blueprint%7CConfiguring%2520a%2520Machine's%2520Blueprint%7C_____0">Configuring the Target Machine Blueprint</a></p><p>今回は、以下のように設定しました。</p><table><thead><tr><th align="left">設定項目</th><th align="left">設定値</th><th align="left">備考</th></tr></thead><tbody><tr><td align="left">MachineType</td><td align="left">t3.micro</td><td align="left"></td></tr><tr><td align="left">LaunchType</td><td align="left">On demand</td><td align="left"></td></tr><tr><td align="left">Subnet</td><td align="left">事前に作成したパブリックサブネット</td><td align="left"></td></tr><tr><td align="left">SecurityGroups</td><td align="left">Create New</td><td align="left"></td></tr><tr><td align="left">PrivateIP</td><td align="left">Create New</td><td align="left"></td></tr><tr><td align="left">Elastic IP</td><td align="left">None</td><td align="left"></td></tr><tr><td align="left">PublicIP(ephemeral)</td><td align="left">Yes</td><td align="left"></td></tr><tr><td align="left">PlacementGroup</td><td align="left">設定なし</td><td align="left"></td></tr><tr><td align="left">IAMRole</td><td align="left">設定なし</td><td align="left"></td></tr><tr><td align="left">Use Existing Instance ID</td><td align="left">設定なし</td><td align="left"></td></tr><tr><td align="left">Initial Target Instance State</td><td align="left">Started</td><td align="left">起動した状態にします。</td></tr><tr><td align="left">Tags</td><td align="left">Key:Name,Value:TargetMachine</td><td align="left">この項目はオプションです。</td></tr><tr><td align="left">Disks</td><td align="left">SSD</td><td align="left">SSDの場合、gp2です、</td></tr></tbody></table><h1 id="ターゲットマシン起動"><a href="#ターゲットマシン起動" class="headerlink" title="ターゲットマシン起動"></a>ターゲットマシン起動</h1><p>ターゲットマシンの起動は、テストモードとカットオーバーの2種類あります。</p><h2 id="テストモード"><a href="#テストモード" class="headerlink" title="テストモード"></a>テストモード</h2><p>テストモードでは、AWS環境で適切に起動できるかの検証が可能です。<br>少なくとも、本番切り替えの1週間前には、実施することが推奨されています。<br>テストモードで起動後、SSHやRDPでログインし、正しく起動できているか検証します。</p><h3 id="ターゲットマシン起動-1"><a href="#ターゲットマシン起動-1" class="headerlink" title="ターゲットマシン起動"></a>ターゲットマシン起動</h3><p>実際にテストモードでターゲットマシンを起動してみます。</p><p>「LAUNCH TARGET MACHINE」から、「Test Mode」をクリックする。<br><img src="/images/20201120/CloudEndure%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB-Launch(TestMode).png" alt=""><br>「CONTINUE」をクリックすると、ターゲットマシンが起動されます。<br><img src="/images/20201120/LaunchTarget(TestMode)%E7%A2%BA%E8%AA%8D.png" alt=""></p><p>CloudEndureコンソールの「JobProgress」を確認すると、開始していることがわかります。<br><img src="/images/20201120/JobProgress_Start.png" alt=""></p><p>CloudEndureの裏の動きについては、AWSコンソールを観察してみます。</p><p>まず、コンバーターサーバーが起動されます。<br><img src="/images/20201120/ConverterServer%E8%B5%B7%E5%8B%95.png" alt=""></p><p>コンバーターサーバーは、ディスクの変換処理を担っています。<br>変換処理が終わるとすぐに終了されます。<br><img src="/images/20201120/ConverterServer%E7%B5%82%E4%BA%86.png" alt=""></p><p>コンバーターサーバーの終了後、ターゲットマシンが起動されます<br><img src="/images/20201120/TargetMachine(TestMode)%E8%B5%B7%E5%8B%95.png" alt=""></p><p>ターゲットマシンは、起動直後に停止されます。<br>よく見ると、1GBのストレージがアタッチされています。<br><img src="/images/20201120/TargetMachine(TestMode)%E5%81%9C%E6%AD%A21GB.png" alt=""></p><p>停止されると、1GBのストレージがデタッチされ、インスタンスの情報からは見れなくなります。<br><img src="/images/20201120/TargetMachine(TestMode)%E5%81%9C%E6%AD%A2%E3%83%87%E3%82%BF%E3%83%83%E3%83%81.png" alt=""></p><p>最後にレプリケーション済みのボリュームがアタッチされた状態でインスタンスが起動されて完了です。<br><img src="/images/20201120/TargetMachine(TestMode)%E8%B5%B7%E5%8B%95%E6%88%90%E5%8A%9F.png" alt=""></p><p>CloudEndureコンソールの「JobProgress」を確認すると、終了していることがわかります。<br><img src="/images/20201120/JobProgress_Finish.png" alt=""></p><p>テストモードで起動したターゲットマシンに、SSHログインしてみます。<br><img src="/images/20201120/TargetMachine(TestMode)%E6%88%90%E5%8A%9FGIP.png" alt=""></p><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -i key-pair.pem yamaki@18.179.11.231</span><br><span class="line">〜〜〜〜〜中略〜〜〜〜〜</span><br><span class="line">Last login: Wed Nov  4 11:30:13 2020 from xx-xx-xx-xx.xx.xx.xx.xx.jp</span><br><span class="line">[yamaki@ip-192-168-2-77 ~]$ sudo su -</span><br><span class="line">最終ログイン: 2020/11/04 (水) 11:31:05 JST日時 pts/0</span><br><span class="line">[root@ip-192-168-2-77 ~]<span class="comment"># curl inet-ip.info</span></span><br><span class="line">18.179.11.231</span><br><span class="line">[root@ip-192-168-2-77 ~]<span class="comment"># ifconfig</span></span><br><span class="line">ens5: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 9001</span><br><span class="line">        inet 192.168.2.77  netmask 255.255.255.192  broadcast 192.168.2.127</span><br><span class="line">        inet6 fe80::43f:37ff:feb1:c202  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 06:3f:37:b1:c2:02  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 24939  bytes 7232780 (6.8 MiB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 20605  bytes 3369355 (3.2 MiB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 0  bytes 0 (0.0 B)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure><p>SSHログインできました。<br>rootのファイルシステムが「xfs」でも、問題ないようです。</p><h3 id="起動後の設定修正"><a href="#起動後の設定修正" class="headerlink" title="起動後の設定修正"></a>起動後の設定修正</h3><p>SSHでログインできたので、WordPress接続に向けた設定修正を行います。</p><p>ログインした状態を見た感じ、ホスト名が変更されてますが、<br>今回はWordPressにアクセスするまでを目的としている為、修正しません。<br>必要に応じて修正してください。</p><p>続けて、WordPressの設定をEC2のグローバルIPアドレスに更新して、アクセスしてみます。</p><p>まず、WordPressのサイトURLをEC2のグローバルIPアドレスに変更します。</p><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@ip-192-168-2-77 ~]<span class="comment"># mysql -u wordpress -p</span></span><br><span class="line">Enter password: </span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 20</span><br><span class="line">Server version: 5.5.65-MariaDB MariaDB Server</span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line">MariaDB [(none)]&gt; use wordpress</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line">Database changed</span><br><span class="line">MariaDB [wordpress]&gt; select * from wp_options <span class="built_in">where</span> option_name = <span class="string">'siteurl'</span>;</span><br><span class="line">+-----------+-------------+--------------------------------+----------+</span><br><span class="line">| option_id | option_name | option_value                   | <span class="built_in">autoload</span> |</span><br><span class="line">+-----------+-------------+--------------------------------+----------+</span><br><span class="line">|         1 | siteurl     | http://35.221.65.176/wordpress | yes      |</span><br><span class="line">+-----------+-------------+--------------------------------+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line">MariaDB [wordpress]&gt; update wp_options <span class="built_in">set</span> option_value = <span class="string">'http://18.179.11.231/wordpress'</span> <span class="built_in">where</span> option_name = <span class="string">'siteurl'</span>;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line">MariaDB [wordpress]&gt; select * from wp_options <span class="built_in">where</span> option_name = <span class="string">'siteurl'</span>;</span><br><span class="line">+-----------+-------------+--------------------------------+----------+</span><br><span class="line">| option_id | option_name | option_value                   | <span class="built_in">autoload</span> |</span><br><span class="line">+-----------+-------------+--------------------------------+----------+</span><br><span class="line">|         1 | siteurl     | http://18.179.11.231/wordpress | yes      |</span><br><span class="line">+-----------+-------------+--------------------------------+----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>Apacheを再起動して、WordPressにアクセス/ログインしてみます。<br><img src="/images/20201120/EC2-WordPress%E7%94%BB%E9%9D%A2.png" alt=""></p><p>アクセスできました。</p><p>テストモードで起動後、実際にサーバーに入って設定の修正が可能です。<br>本番切り替え前に、設定変更が必要な箇所の整理等に利用できます。</p><h2 id="カットオーバー"><a href="#カットオーバー" class="headerlink" title="カットオーバー"></a>カットオーバー</h2><p>テストが完了したら、カットオーバーを実施します。<br>カットオーバーすると、テストモードで起動したインスタンスは終了されます。</p><h3 id="ターゲットマシン起動-2"><a href="#ターゲットマシン起動-2" class="headerlink" title="ターゲットマシン起動"></a>ターゲットマシン起動</h3><p>テストモードのインスタンスを起動したまま、<br>カットオーバーを実施してみます。</p><p>カットオーバーの方法も、テストモードと同じです。</p><p>「LAUNCH TARGET MACHINE」から、「Cutover」をクリックする。<br><img src="/images/20201120/Launch_Target(CutOver)start.png" alt=""></p><p>「CONTINUE」をクリックすると、ターゲットマシンが起動されます。<br><img src="/images/20201120/Launch_Target(CutOver)%E7%A2%BA%E8%AA%8D.png" alt=""></p><p>CloudEndureコンソールの「JobProgress」を確認すると、CutOverが開始されていることがわかります。<br><img src="/images/20201120/JobProgress_Start(CutOver).png" alt=""></p><p>AWSのコンソールを確認すると、テストモードで起動したEC2インスタンスが終了後されていることがわかります。<br><img src="/images/20201120/TestMode_Machine%E7%B5%82%E4%BA%86.png" alt=""><br>（後続の動作は、テストモードと同一であるため、省略します。）</p><p>カットオーバーが完了しました。<br><img src="/images/20201120/Launch_Target(CutOver)%E6%88%90%E5%8A%9F.png" alt=""></p><h3 id="起動後の設定修正-1"><a href="#起動後の設定修正-1" class="headerlink" title="起動後の設定修正"></a>起動後の設定修正</h3><p>テストモードと同じく、SSHでログインして、<br>WordPressの設定を変更したあと、アクセスしてみます。<br>(作業内容はテストモードと同一であるため、省略します。)<br><img src="/images/20201120/EC2_WordPress(CutOver).png" alt=""><br>アクセスできました。</p><h1 id="ターゲットマシンからエージェントのアンインストール"><a href="#ターゲットマシンからエージェントのアンインストール" class="headerlink" title="ターゲットマシンからエージェントのアンインストール"></a>ターゲットマシンからエージェントのアンインストール</h1><p>カットオーバー完了後は、CloudEndureエージェントは不要となります。<br>ターゲットマシンからアンインストールを行います。</p><h2 id="エージェントの停止"><a href="#エージェントの停止" class="headerlink" title="エージェントの停止"></a>エージェントの停止</h2><p>以下のコマンドをrootで実行して、エージェントを停止します。<br><code>/var/lib/cloudendure/stopAgent.sh</code></p><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ /var/lib/cloudendure/stopAgent.sh</span><br><span class="line">Killing agent: 1569</span><br><span class="line">17818</span><br><span class="line">17819</span><br><span class="line">Killed Agent</span><br><span class="line">Killing tailer: 1566</span><br><span class="line">1668</span><br><span class="line">1670</span><br><span class="line">1672</span><br><span class="line">Killed Tailer</span><br><span class="line">Killing update_onprem_volumes: 1567</span><br><span class="line">1636</span><br><span class="line">1638</span><br><span class="line">1639</span><br><span class="line">Killed update_onprem_volumes</span><br><span class="line">Killing run_linux_migration_scripts_periodically: 1568</span><br><span class="line">1635</span><br><span class="line">1637</span><br><span class="line">1640</span><br><span class="line">Killed run_linux_migration_scripts_periodically</span><br><span class="line">Killing tail: 1691</span><br><span class="line">Killed tail</span><br></pre></td></tr></table></figure><h2 id="インストール時の設定削除"><a href="#インストール時の設定削除" class="headerlink" title="インストール時の設定削除"></a>インストール時の設定削除</h2><p>以下のコマンドをrootで実行することで、起動設定などを削除できます。<br><code>/var/lib/cloudendure/install_agent --remove</code></p><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ /var/lib/cloudendure/install_agent --remove</span><br><span class="line">--- installing new driver</span><br><span class="line">running: <span class="string">'which update-rc.d'</span></span><br><span class="line"><span class="built_in">which</span>: no update-rc.d <span class="keyword">in</span> (/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin)</span><br><span class="line">retcode: 256</span><br><span class="line">running: <span class="string">'which chkconfig'</span></span><br><span class="line">/sbin/chkconfig</span><br><span class="line">retcode: 0</span><br><span class="line">running: <span class="string">'chkconfig --del ce-agent'</span></span><br><span class="line">retcode: 0</span><br><span class="line">running: <span class="string">'chkconfig --del ce-convert'</span></span><br><span class="line">retcode: 0</span><br><span class="line">running: <span class="string">'which systemctl'</span></span><br><span class="line">/bin/systemctl</span><br><span class="line">retcode: 0</span><br><span class="line">running: <span class="string">'systemctl disable ce-agent.service'</span></span><br><span class="line">ce-agent.service is not a native service, redirecting to /sbin/chkconfig.</span><br><span class="line">Executing /sbin/chkconfig ce-agent off</span><br><span class="line">retcode: 0</span><br><span class="line">running: <span class="string">'systemctl disable ce-convert.service'</span></span><br><span class="line">ce-convert.service is not a native service, redirecting to /sbin/chkconfig.</span><br><span class="line">Executing /sbin/chkconfig ce-convert off</span><br><span class="line">retcode: 0</span><br><span class="line">running: <span class="string">'visudo -c -f /etc/tmpVciTv8'</span></span><br><span class="line">/etc/tmpVciTv8: parsed OK</span><br><span class="line">/etc/sudoers.d/google_sudoers: parsed OK</span><br><span class="line">retcode: 0</span><br></pre></td></tr></table></figure><p>あとは、インストーラーやCloudEndureのログファイルなど、適宜削除してください。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>2回に分けて、CloudEndureについて、記述しました。<br>移行元のサーバーを起動したまま、サーバーをまるごと移行できるのが<br>CloudEndure Migrationの強みです。</p><p>CloudEndure自体の利用は無料のため、試してみてはいかがでしょうか。</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><ul><li><a href="https://docs.cloudendure.com/CloudEndure%20Documentation.htm" target="_blank" rel="noopener">CloudEndureDocumentation</a></li><li><a href="https://dev.classmethod.jp/articles/planning-migration-cloudendure/" target="_blank" rel="noopener">[クラウド移行] CloudEndureを使ったEC2への移行を計画する前に考慮しておきたいポイント</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。&lt;br&gt;2020年1月中途入社、TIGの八巻です。&lt;/p&gt;
&lt;p&gt;前回記事「&lt;a href=&quot;https://f
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="移行ツール" scheme="https://future-architect.github.io/tags/%E7%A7%BB%E8%A1%8C%E3%83%84%E3%83%BC%E3%83%AB/"/>
    
      <category term="CloudEndure" scheme="https://future-architect.github.io/tags/CloudEndure/"/>
    
  </entry>
  
  <entry>
    <title>PythonistaがGo言語に入門してみた</title>
    <link href="https://future-architect.github.io/articles/20201119/"/>
    <id>https://future-architect.github.io/articles/20201119/</id>
    <published>2020-11-18T15:00:00.000Z</published>
    <updated>2020-11-19T01:12:47.560Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20201119/language-python.png" alt=""><br>The Gopher character is based on the Go mascot designed by <a href="http://reneefrench.blogspot.com/" target="_blank" rel="noopener">Renée French</a>.</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。TIG DXユニット所属の村上です。2020年4月にフューチャーに新卒入社しました。</p><p>私の所属しているプロジェクトでは、Go言語を使ってWeb APIを構築しています。私は元々Pythonを主に書いていましたが、Go言語を書くのは初めてでした。そんな私がPythonからGo言語へ入門する際に、苦労した経験や発見を共有したいと思います！</p><h1 id="自分のITスキルセット"><a href="#自分のITスキルセット" class="headerlink" title="自分のITスキルセット"></a>自分のITスキルセット</h1><ul><li>プログラミング言語 : Python, Java, PHP, C, アセンブリ</li><li>データサイエンス : 確率統計, 機械学習（特に深層強化学習）</li><li>ハードウェア : コンピュータアーキテクチャ, 自作PC</li></ul><p>研究室に配属されてからは機械学習に没頭していました。</p><h1 id="PythonとGoの違い"><a href="#PythonとGoの違い" class="headerlink" title="PythonとGoの違い"></a>PythonとGoの違い</h1><p>始めに大まかな違いについて、PythonとGoを対比して見ていこうと思います。</p><table><thead><tr><th align="left">項目</th><th align="left">Python</th><th align="left">Go</th></tr></thead><tbody><tr><td align="left">言語仕様</td><td align="left">オブジェクト指向</td><td align="left">非オブジェクト指向</td></tr><tr><td align="left">型付け</td><td align="left">動的</td><td align="left">静的</td></tr><tr><td align="left">クラス</td><td align="left">有</td><td align="left">無</td></tr><tr><td align="left">ポインタ</td><td align="left">無</td><td align="left">有</td></tr><tr><td align="left">関数定義</td><td align="left">def</td><td align="left">func</td></tr><tr><td align="left">ブロック定義</td><td align="left">インデント</td><td align="left">{}</td></tr></tbody></table><p>私が初めて習得したプログラミング言語はCだったため、上記のGoにあってPythonにない仕様についてはスッと理解できました。Pythonしか書いたことが無かったらかなり苦労したかもしれません。</p><p>また、補足ですがPythonは動的型付け言語でありながらも、Python3以降は型ヒントという機能があります。これによってある程度型を明示することができます。</p><h1 id="PythonからGoに入門してハマったこと"><a href="#PythonからGoに入門してハマったこと" class="headerlink" title="PythonからGoに入門してハマったこと"></a>PythonからGoに入門してハマったこと</h1><p>本記事のメインコンテンツです。今後Go言語に入門する方の参考になれば幸いです。</p><h2 id="1-ファイルのどこにも定義されていない変数が使われている"><a href="#1-ファイルのどこにも定義されていない変数が使われている" class="headerlink" title="1. ファイルのどこにも定義されていない変数が使われている"></a>1. ファイルのどこにも定義されていない変数が使われている</h2><p>所属プロジェクトのGithubリポジトリにあるGoのプログラムを見た時、まず不思議に思ったことは、そのファイルのどこにも宣言されていない変数がシレっと使われているのを発見したことです。実際のものとは異なりますが、次のような状況でした。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> mypackage</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   a := b + c</span><br><span class="line">   <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>変数b, cがファイル内のどこにも定義されていません。なのにエラーにならないのです。</p><p>実はGoでは同じpackage内のファイルで宣言されている変数や構造体などを、そのpackageのファイル全体でそのまま使うことができるのです！上記の例で説明すると、同じ<code>mypackage</code>内の他のファイルの変数や構造体をそのまま使うことができます。</p><p>Pythonは他のファイルで宣言されている変数やクラスを参照するためには、そのファイルのimportが必要になります。この違いは想定外だったので、はじめはびっくりしました。</p><h2 id="2-Goにインスタンスメソッドは存在しない"><a href="#2-Goにインスタンスメソッドは存在しない" class="headerlink" title="2. Goにインスタンスメソッドは存在しない"></a>2. Goにインスタンスメソッドは存在しない</h2><p>当たり前ですが、オブジェクト指向型言語ではないGoにはインスタンスの概念はありません。しかし、次のようなGoコードを見てください。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a := v.myfunc(b, c)</span><br></pre></td></tr></table></figure><p>Pythonistaはこのようなコードを見せられると、インスタンスvのインスタンスメソッドmyfuncを呼び出しているようにしか見えません。Goはオブジェクト指向型言語ではないので、vはインスタンスではないのですが、Pythonが抜けきっていない私はvのクラスを特定するために、インスタンス化されている部分を必死に探しました。しかし、vは構造体です。構造体にメソッドや関数の定義など存在しません。</p><p>これはレシーバと呼ばれるもので、vという構造体に対してmyfuncという関数を実行できるものです。さらに、myfuncは1で説明した通り、同じpackage内の任意のファイルに定義することができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Mystruct)</span> <span class="title">myfunc</span><span class="params">(a <span class="keyword">int</span>, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">   ret := a + b + v.sum</span><br><span class="line">   <span class="keyword">return</span> ret</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このように、vという構造体に対してのみ呼ぶことができる関数として定義され、vとmyfuncの引数を使って様々な処理を行うことができます。</p><h2 id="3-変数を宣言したら勝手に初期化される"><a href="#3-変数を宣言したら勝手に初期化される" class="headerlink" title="3. 変数を宣言したら勝手に初期化される"></a>3. 変数を宣言したら勝手に初期化される</h2><p>Pythonでは変数の<code>宣言</code>だけ行うことはできず、必ず初期値を指定して<code>初期化</code>する必要があります。しかし、Goでは<code>宣言</code>ができます。宣言だけ行うことは他の多くの言語でもできますが、宣言だけして値を代入せずに使っている部分を発見しました。次のようなコードです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !b &#123;</span><br><span class="line">  fmt.Print(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cを習得済みの私は焦りました。なぜならCでは変数を宣言した時点では、不定値が代入された状態になっているからです。なので上記のようなコードを見た瞬間、コードの動作に再現性が無いように見えました。</p><p>しかしGoでは変数を宣言した場合、デフォルトの初期値が勝手に代入される仕様になっています！</p><p>主要な型のデフォルト初期値は以下です。</p><table><thead><tr><th>型</th><th>初期値</th></tr></thead><tbody><tr><td>int</td><td>0</td></tr><tr><td>bool</td><td>false</td></tr><tr><td>float</td><td>0.0</td></tr><tr><td>string</td><td>“”</td></tr><tr><td>ポインタ</td><td>nil</td></tr></tbody></table><p>このため、上記のコードでは0が出力されます。</p><h2 id="4-bool値が微妙に違う"><a href="#4-bool値が微妙に違う" class="headerlink" title="4. bool値が微妙に違う"></a>4. bool値が微妙に違う</h2><p>PythonからGoに入門する際に、最も大きな壁はここと言っても過言ではないかもしれません。</p><p>Pythonにおけるbool値は<code>True</code>, <code>False</code>です。しかし、Goは<code>true</code>, <code>false</code>なんです。Goに入門してしばらく経ちますが、未だに<code>True</code>, <code>False</code>と書いてしまいます…最近では逆にPythonで<code>true</code>, <code>false</code>と書いてしまうことも…</p><p>早く慣れたいです（泣）</p><h2 id="5-配列に対するappendの仕方が微妙に違う"><a href="#5-配列に対するappendの仕方が微妙に違う" class="headerlink" title="5. 配列に対するappendの仕方が微妙に違う"></a>5. 配列に対するappendの仕方が微妙に違う</h2><p>Pythonでは配列（リスト）に対して要素を追加する際に、<code>append</code>というメソッドを使います。使い方は次のような感じです。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line">a.append(<span class="string">"apple"</span>)</span><br></pre></td></tr></table></figure><p>一方Goでは、可変長配列（スライス）というものがあり、同じように<code>append</code>を使って要素を追加できるのですが、使い方が微妙に違います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a []<span class="keyword">string</span></span><br><span class="line">a = <span class="built_in">append</span>(a, <span class="string">"apple"</span>)</span><br></pre></td></tr></table></figure><p>こちらも使い方がごちゃごちゃにならないように気を付けたいですね。</p><h2 id="6-変数の頭文字が大文字と小文字で意味が変わる"><a href="#6-変数の頭文字が大文字と小文字で意味が変わる" class="headerlink" title="6. 変数の頭文字が大文字と小文字で意味が変わる"></a>6. 変数の頭文字が大文字と小文字で意味が変わる</h2><p>Pythonの場合、変数名や関数名が大文字だろうが小文字だろうが動作に関係ありません。しかし、Goでは変数名や関数名、その他もろもろの頭文字が大文字か小文字かによって、動作が異なります！</p><p><a href="http://golang.jp/go_tutorial#index08" target="_blank" rel="noopener">golang.jp</a>に次のような記述があります。</p><blockquote><p>Go言語の情報の可視性についてのルールは単純です。名前(トップレベルの型名、関数名、メソッド名、定数名、変数名、構造体のフィールドおよびメソッド名)の先頭一文字が大文字になっていれば、パッケージの利用者側から参照可能となります。すなわち大文字にしなければ、それが定義されているパッケージ内からしか参照できません。</p></blockquote><p>つまり、Javaでいうところのprivateやpublicのような概念を、頭文字の大小で制御しています。実はこの仕様、気を付けないと危ない場面があります。例えばjsonをUnmarshalする時です。</p><p>Goでは次のように、構造体に対してjsonの中身を簡単に展開することができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"encoding/json"</span></span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PC <span class="keyword">struct</span> &#123;</span><br><span class="line">   Cpu    <span class="keyword">string</span> <span class="string">`json:"cpu"`</span></span><br><span class="line">   Gpu    <span class="keyword">string</span> <span class="string">`json:"gpu"`</span></span><br><span class="line">   Memory <span class="keyword">int</span>    <span class="string">`json:"memory"`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   spec := <span class="string">`&#123;"cpu":"6700K", "gpu":"2080Ti", "memory":16&#125;`</span></span><br><span class="line">   p := <span class="built_in">new</span>(PC)</span><br><span class="line">   _ = json.Unmarshal([]<span class="keyword">byte</span>(spec), p)</span><br><span class="line">   fmt.Printf(<span class="string">"%+v"</span>, p)</span><br><span class="line">   <span class="comment">// =&gt; &amp;&#123;Cpu:6700K Gpu:2080Ti Memory:16&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>しかし、次のように構造体のフィールド名の頭文字を小文字にすると、外部パッケージから参照できなくなるため、3で説明した初期値になってしまいます。<br>ここを間違えると意図しない動作になってしまうので、気を付けたいところです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">   <span class="string">"encoding/json"</span></span><br><span class="line">   <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PC <span class="keyword">struct</span> &#123;</span><br><span class="line">   cpu    <span class="keyword">string</span> <span class="string">`json:"cpu"`</span></span><br><span class="line">   gpu    <span class="keyword">string</span> <span class="string">`json:"gpu"`</span></span><br><span class="line">   memory <span class="keyword">int</span>    <span class="string">`json:"memory"`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">   spec := <span class="string">`&#123;"cpu":"6700K", "gpu":"2080Ti", "memory":16&#125;`</span></span><br><span class="line">   p := <span class="built_in">new</span>(PC)</span><br><span class="line">   _ = json.Unmarshal([]<span class="keyword">byte</span>(spec), p)</span><br><span class="line">   fmt.Printf(<span class="string">"%+v"</span>, p)</span><br><span class="line">   <span class="comment">// =&gt; &amp;&#123;cpu: gpu: memory:0&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><p><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a> という記事が非常に参考になります。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回はPythonをメインで触ってきた私がGoに入門して、躓いたことや苦労した部分をまとめてみました。</p><p>他にも、変数の後ろに型を書いて宣言するなど、Goには割と独特な仕様が多い印象です。</p><p>自分と同じように、これからGoを始める人の参考になれば幸いです！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20201119/language-python.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;The Gopher character is based on the Go mascot designed by &lt;a href=&quot;http://ren
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="入門" scheme="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
  </entry>
  
  <entry>
    <title>AWS S3をIP制限付きのファイルダウンロードリンクにする</title>
    <link href="https://future-architect.github.io/articles/20201118/"/>
    <id>https://future-architect.github.io/articles/20201118/</id>
    <published>2020-11-17T15:00:00.000Z</published>
    <updated>2020-11-18T13:44:36.366Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p>S3としてお馴染みの、Amazon Simple Storage Serviceは皆さんご存じだと思います。「シンプル」の命名とは裏腹に、静的サイトホスティングをS3で行ったりといった様々な利用形態が存在します。</p><p>また、アセットファイルの配置場所やSSL通信の証明書ストアとして何らかのサービスと組み合わせるような利用形態が多いサービスではないでしょうか。そんなS3を極々シンプルなファイル配布装置として使うノウハウは一周回って無くなっているな、と感じました。</p><p>つまりブラウザで任意のURLにアクセスすると、zipファイル等配布物をダウンロードできるような状態にすることが本記事で説明している内容です。</p><h2 id="S3バケットを作成する"><a href="#S3バケットを作成する" class="headerlink" title="S3バケットを作成する"></a>S3バケットを作成する</h2><p>まずは基本的なおさらいとして、S3バケットの作り方から説明します。</p><p>AWSコンソールにログインし、サービスからS3を選択します。<br><img src="/images/20201118/image.png" alt=""></p><p>バケットを作成をクリックし、任意の名称のS3バケットを作成します。<br>今回はsample-downloadにしました。<br>リージョンは何でもよいですがアジアパシフィック (東京) ap-northeast-1を選択するのが定番ですね。<br><img src="/images/20201118/image_2.png" alt=""></p><p>そのままバケットを作成ボタンをクリックして、デフォルト設定のバケットを作成できます。<br><img src="/images/20201118/image_3.png" alt=""></p><h2 id="S3バケットにファイルをアップロードする"><a href="#S3バケットにファイルをアップロードする" class="headerlink" title="S3バケットにファイルをアップロードする"></a>S3バケットにファイルをアップロードする</h2><p>作成したバケット名をクリックすることでS3の設定、ファイルの管理を行うメニューが表示されます。<br><img src="/images/20201118/image_4.png" alt=""></p><p>アップロードボタンでファイルをアップロードできます。<br>今回は試しにS3のアイコン画像をzipに圧縮したものをアップロードしてみます。<br><img src="/images/20201118/image_5.png" alt=""></p><p><img src="/images/20201118/image_6.png" alt=""></p><p>ファイルを追加、もしくはドラッグアンドドロップでアップロードできます。<br><img src="/images/20201118/image_7.png" alt=""><br>ストレージクラスの選択やサーバーサイド暗号化など選択項目がありますが、動作させる分にはデフォルト値で問題ありません。</p><p>強いて言うならバケットのバージョニングに関する同意にチェックをつけないとアップロードボタンを押してもエラーが表示されることが注意点です。<br><img src="/images/20201118/image_8.png" alt=""></p><p>アップロードボタンをクリックでファイルのアップロードは完了です。<br><img src="/images/20201118/image_9.png" alt=""></p><h2 id="アップロードしたファイルをダウンロード可能にする"><a href="#アップロードしたファイルをダウンロード可能にする" class="headerlink" title="アップロードしたファイルをダウンロード可能にする"></a>アップロードしたファイルをダウンロード可能にする</h2><p><img src="/images/20201118/image_10.png" alt=""><br>バケットの設定トップに戻ると先ほどのzipファイルが確認できます。</p><p><img src="/images/20201118/image_11.png" alt=""></p><p>ファイル名をクリックするとオブジェクトURLが確認できます。<br>しかし、このままではオブジェクトURLにブラウザでアクセスしてもzipファイルをダウンロードすることはできません。<br><img src="/images/20201118/image_12.png" alt=""><br>上記画像のようなエラーが表示されます。</p><p>バケットの設定でパブリックアクセスを許可する必要があります。</p><p><img src="/images/20201118/image_13.png" alt=""></p><p>設定画面のアクセス許可から、パブリックアクセスのブロックを解除します。<br><img src="/images/20201118/image_14.png" alt=""></p><p>編集するをクリックし、「パブリックアクセスを全てブロック」のチェックを解除します。<br><img src="/images/20201118/image_15.png" alt=""></p><p>この状態でアップロードしたzipファイルを確認すると、公開するボタンが押せるようになっています。<br><img src="/images/20201118/image_16.png" alt=""><br>公開ボタンをクリックしてから、オブジェクトURLにブラウザでアクセスすると、ファイルをダウンロードできるようになっています。</p><h2 id="アップロードしたファイルにIP制限をかける"><a href="#アップロードしたファイルにIP制限をかける" class="headerlink" title="アップロードしたファイルにIP制限をかける"></a>アップロードしたファイルにIP制限をかける</h2><p>さてこのままでは世界中のどこからアクセスしてもファイルをダウンロードできてしまいます。業務的にはIP制限である程度クローズドな状態にすることが求められると思います。そのような場合はバケットポリシーでIP制限をかけることが可能です。</p><p><img src="/images/20201118/image_17.png" alt=""></p><p>S3バケットの設定画面の、アクセス制限から、バケットポリシーを編集できます。<br>編集するボタンをクリックし、下記のようなポリシーを設定します。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line">    <span class="attr">"Id"</span>: <span class="string">"Policy20201101"</span>,</span><br><span class="line">    <span class="attr">"Statement"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"Sid"</span>: <span class="string">"sampleS3ip"</span>,</span><br><span class="line">            <span class="attr">"Effect"</span>: <span class="string">"Deny"</span>,</span><br><span class="line">            <span class="attr">"Principal"</span>: <span class="string">"*"</span>,</span><br><span class="line">            <span class="attr">"Action"</span>: <span class="string">"s3:*"</span>,</span><br><span class="line">            <span class="attr">"Resource"</span>: <span class="string">"arn:aws:s3:::バケット名/*"</span>,</span><br><span class="line">            <span class="attr">"Condition"</span>: &#123;</span><br><span class="line">                <span class="attr">"NotIpAddress"</span>: &#123;</span><br><span class="line">                    <span class="attr">"aws:SourceIp"</span>: [</span><br><span class="line">                        <span class="string">"許可するIPアドレス"</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>バケットポリシーのIDは何でも良いですが、迷ったら<a href="https://awspolicygen.s3.amazonaws.com/policygen.html" target="_blank" rel="noopener">ポリシージェネレーター</a>を利用すると良いでしょう。<br><img src="/images/20201118/image_18.png" alt=""></p><p>このように設定しました。</p><p>ここで大事なことは、<code>&quot;Resource&quot;</code>に記載するS3バケットのarnの末尾に<code>/*</code>を記載、もしくはオブジェクトのパスを明記することです。上記のような書き方をしない場合、配置したzipファイルにはバケットポリシーが反映されず、変わらず許可していないIPアドレスでもダウンロードできる状態になってしまいます。</p><p>唯一のハマりどころと言っても過言ではなく、この記事で一番言いたいことはここです。</p><p><img src="/images/20201118/image_19.png" alt=""></p><p>この状態で自分のIPアドレスを許可するIPに含めないと、オブジェクトURLにブラウザでアクセスしても上記画像のような状態になります。</p><p>なお一度IPアドレス許可に含めてから、検証のため再度許可するIPアドレスから外すと、キャッシュが残るのかしばらくはダウンロードできる場合があります。<br>別ブラウザやGoogle Chromeのシークレットウインドウなどで挙動を確認すると良いでしょう。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>S3バケットでファイルのダウンロードをする為にはパブリックアクセスを許可する</li><li>IP制限はバケットポリシーで行う</li></ul><p>単純な事ではありますが、単純故にこのようなユースケースでの案内が無いなと感じる部分でした、誰かのお役に立てば幸いです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;S3としてお馴染みの、Amazon Simple Storage Serviceは皆さんご存じだと思います。「シンプル」の命名とは裏腹に、静的サイトホスティングをS3で行ったりといった様々な利用形態が存在します。&lt;/p&gt;
&lt;p&gt;また、ア
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="S3" scheme="https://future-architect.github.io/tags/S3/"/>
    
  </entry>
  
  <entry>
    <title>Goのデバッグ環境 on VSCode</title>
    <link href="https://future-architect.github.io/articles/20201117/"/>
    <id>https://future-architect.github.io/articles/20201117/</id>
    <published>2020-11-16T15:00:00.000Z</published>
    <updated>2020-11-19T00:06:45.187Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20201117/image.png" alt=""></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG/DXユニットの富山です。</p><p>私の使用するテキストエディタはVim一択でしたが、最近はVSCodeに浮気気味です。（言わずもがな <a href="https://marketplace.visualstudio.com/items?itemName=vscodevim.vim" target="_blank" rel="noopener">Vimプラグイン</a>は入れています）</p><p>今回はVSCodeでGo言語用のデバッグ環境をテーマします！</p><h1 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h1><p>前提条件:</p><ol><li>VSCodeがインストール済であること</li><li>Goがインストール済であること</li></ol><h2 id="Step-1：プラグインのインストール"><a href="#Step-1：プラグインのインストール" class="headerlink" title="Step 1：プラグインのインストール"></a>Step 1：プラグインのインストール</h2><p>Googleが公開しているVSCode用のGoプラグインである、<a href="https://marketplace.visualstudio.com/items?itemName=golang.Go" target="_blank" rel="noopener">Go for Visual Studio Code</a>をインストールします。（2020年6月に開発管理がMicrosoftからGoogleのGo開発チームへ移管されました）。<br><img src="/images/20201117/image_2.png" alt=""></p><p>インストールが終わったら、Goプラグインに必要な各種ツールをインストールしていきます。</p><ol><li>コマンドパレットを開く（Windows: <code>Ctrl + Shift</code> + <code>p</code> / Mac: <code>Command</code> + <code>Shift</code> + <code>p</code> ）</li><li><code>&gt;Go: Install/Update Tools</code> と入力する。</li><li>表示されるツールから任意のツールにチェックを入れる。<br><img src="/images/20201117/image_3.png" alt=""></li><li><code>OK</code> ボタンを押下</li></ol><p>VSCode上のターミナルに下記表示がされたら成功です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Tools environment: GOPATH=C:\Users\username\go</span><br><span class="line">Installing 16 tools at C:\Users\username\go\bin in module mode.</span><br><span class="line">  gocode</span><br><span class="line">  gopkgs</span><br><span class="line">  go-outline</span><br><span class="line">  go-symbols</span><br><span class="line">  guru</span><br><span class="line">  gorename</span><br><span class="line">  gotests</span><br><span class="line">  gomodifytags</span><br><span class="line">  impl</span><br><span class="line">  fillstruct</span><br><span class="line">  goplay</span><br><span class="line">  godoctor</span><br><span class="line">  dlv</span><br><span class="line">  gocode-gomod</span><br><span class="line">  godef</span><br><span class="line">  golint</span><br><span class="line"></span><br><span class="line">Installing github.com/mdempsky/gocode (C:\Users\username\go\bin\gocode.exe) SUCCEEDED</span><br><span class="line">Installing github.com/uudashr/gopkgs/v2/cmd/gopkgs (C:\Users\username\go\bin\gopkgs.exe) SUCCEEDED</span><br><span class="line">Installing github.com/ramya-rao-a/go-outline (C:\Users\username\go\bin\go-outline.exe) SUCCEEDED</span><br><span class="line">Installing github.com/acroca/go-symbols (C:\Users\username\go\bin\go-symbols.exe) SUCCEEDED</span><br><span class="line">Installing golang.org/x/tools/cmd/guru (C:\Users\username\go\bin\guru.exe) SUCCEEDED</span><br><span class="line">Installing golang.org/x/tools/cmd/gorename (C:\Users\username\go\bin\gorename.exe) SUCCEEDED</span><br><span class="line">Installing github.com/cweill/gotests/... (C:\Users\username\go\bin\gotests.exe) SUCCEEDED</span><br><span class="line">Installing github.com/fatih/gomodifytags (C:\Users\username\go\bin\gomodifytags.exe) SUCCEEDED</span><br><span class="line">Installing github.com/josharian/impl (C:\Users\username\go\bin\impl.exe) SUCCEEDED</span><br><span class="line">Installing github.com/davidrjenni/reftools/cmd/fillstruct (C:\Users\username\go\bin\fillstruct.exe) SUCCEEDED</span><br><span class="line">Installing github.com/haya14busa/goplay/cmd/goplay (C:\Users\username\go\bin\goplay.exe) SUCCEEDED</span><br><span class="line">Installing github.com/godoctor/godoctor (C:\Users\username\go\bin\godoctor.exe) SUCCEEDED</span><br><span class="line">Installing github.com/go-delve/delve/cmd/dlv (C:\Users\username\go\bin\dlv.exe) SUCCEEDED</span><br><span class="line">Installing github.com/stamblerre/gocode (C:\Users\username\go\bin\gocode-gomod.exe) SUCCEEDED</span><br><span class="line">Installing github.com/rogpeppe/godef (C:\Users\username\go\bin\godef.exe) SUCCEEDED</span><br><span class="line">Installing golang.org/x/lint/golint (C:\Users\username\go\bin\golint.exe) SUCCEEDED</span><br><span class="line"></span><br><span class="line">All tools successfully installed. You are ready to Go :).</span><br></pre></td></tr></table></figure><h3 id="Step-2：デバッガツール-delve-のインストール"><a href="#Step-2：デバッガツール-delve-のインストール" class="headerlink" title="Step 2：デバッガツール delve のインストール"></a>Step 2：デバッガツール <code>delve</code> のインストール</h3><p>今回はGoのデバッグツールである、<a href="https://github.com/derekparker/delve" target="_blank" rel="noopener">delve</a> を使用します。</p><blockquote><p>Step1-3.　表示されるツールから任意のツールにチェックを入れる。</p></blockquote><p>にて、 <code>dlv</code> にチェックを入れている場合、VSCode側でインストールを行ってくれるので、このステップは飛ばして大丈夫です。</p><p>インストールを行うために、下記コマンドを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get -u github.com/derekparker/delve/cmd/dlv</span><br></pre></td></tr></table></figure><p>インストールが完了したら、ターミナル上で <code>dlv</code> コマンドが実行できることを確認してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ dlv version</span><br><span class="line">Delve Debugger</span><br><span class="line">Version: 1.5.0</span><br><span class="line">Build: <span class="variable">$Id</span>: ca5318932770ca063fc9885b4764c30bfaf8a199 $</span><br></pre></td></tr></table></figure><h1 id="使ってみた"><a href="#使ってみた" class="headerlink" title="使ってみた"></a>使ってみた</h1><p>それではVSCodeからデバッグを行ってみましょう。</p><p>手始めにVSCodeで簡単なGoプログラムを書いてみます。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">msg := <span class="string">"hello world"</span></span><br><span class="line">fmt.Println(msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="デバッグのセットアップ"><a href="#デバッグのセットアップ" class="headerlink" title="デバッグのセットアップ"></a>デバッグのセットアップ</h3><h4 id="launch-json-の作成"><a href="#launch-json-の作成" class="headerlink" title="launch.json の作成"></a><code>launch.json</code> の作成</h4><ol><li>VSCodeの <code>RUN</code> コンソール画面に移動</li><li><code>create a launch.json file.</code> を押下</li><li>VSCode中央上部に <code>Select Environment</code> と表示されるので、 <code>Go Dlv (Experimental)</code> を選択<br><img src="/images/20201117/image_4.png" alt=""></li></ol><p>上記 3終了後に <code>.vscode/launch.json</code> ファイルが生成されます。</p><p>デフォルトでは、<code>type</code>フィールドが <code>&quot;type&quot;: &quot;godlvdap&quot;</code> となっているので、<code>&quot;type&quot;: &quot;go&quot;</code> へ書き換えましょう。</p><figure class="highlight json"><figcaption><span>launch.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Launch"</span>,</span><br><span class="line">            <span class="comment">// "type": "godlvdap",</span></span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"go"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"mode"</span>: <span class="string">"auto"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;fileDirname&#125;"</span>,</span><br><span class="line">            <span class="attr">"env"</span>: &#123;&#125;,</span><br><span class="line">            <span class="attr">"args"</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちなみに、単体テストのデバッグを行う場合は、下記のように設定します。</p><figure class="highlight"><figcaption><span>launch.json(一部抜粋)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"mode": "test",</span><br><span class="line">"args": [</span><br><span class="line">    "-test.v",</span><br><span class="line">    "-test.run",</span><br><span class="line">    <span class="string">"TestYourFunc"</span></span><br><span class="line">],</span><br></pre></td></tr></table></figure><ol><li><code>args</code> に <code>-test.v</code> とすることで <code>verboseモード</code></li><li>テスト関数単位で実行する場合は <code>-test.run</code> と置き、対象とするテスト関数名を記載します（例だと <code>TestYourFunc</code>）</li></ol><p>今回は紹介しませんが、<code>launch.json</code> には他にも予約語の属性が存在するので、興味をお持ちの方は<a href="https://code.visualstudio.com/docs/editor/debugging#_launchjson-attributes" target="_blank" rel="noopener">こちら</a>をご参照ください。</p><h2 id="いざ、デバッグ"><a href="#いざ、デバッグ" class="headerlink" title="いざ、デバッグ"></a>いざ、デバッグ</h2><p>さぁ、実行してみましょう。</p><p>9行目にブレークポイントを設定してみます。（行番号の左側をクリックで設定）</p><p>赤丸が該当行左側に表示されたら、設定完了です。<br><img src="/images/20201117/image_5.png" alt=""></p><p>ブレークポイントの設定が終わったら、 <code>F5</code>キーで実行してみます。</p><p>RUNコンソールの<code>VARIABLES</code>部分にて、ブレークポイントで設定した行の変数の中身が確認できていますね。これは便利です。</p><p><img src="/images/20201117/image_6.png" alt=""><br>また、VSCode画面中央上部に表示されているパネルでContinueをはじめ、Restartなどの操作ができます。</p><h1 id="関連情報"><a href="#関連情報" class="headerlink" title="関連情報"></a>関連情報</h1><p>VSCodeのGo周りでは多賀さんの記事もオススメです。</p><ul><li><a href="https://future-architect.github.io/articles/20200707/">VSCode の Go extension でよく利用するコマンド 7選</a></li></ul><p>市川さんの記事のVSCodeの拡張機能の共有方法すると便利です。</p><ul><li><a href="https://future-architect.github.io/articles/20200828/">チームで推奨するVSCode拡張機能を共有するtips</a></li></ul><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>これでデバッグ用にPrint文を埋め込んだままcommitしてしまう自分にオサラバです👋</p><p>デバッグ機能をフル活用して快適な開発ライフを。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20201117/image.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="VSCode" scheme="https://future-architect.github.io/tags/VSCode/"/>
    
      <category term="デバッグ" scheme="https://future-architect.github.io/tags/%E3%83%87%E3%83%90%E3%83%83%E3%82%B0/"/>
    
  </entry>
  
  <entry>
    <title>Future Tech Cast をはじめました</title>
    <link href="https://future-architect.github.io/articles/20201116/"/>
    <id>https://future-architect.github.io/articles/20201116/</id>
    <published>2020-11-15T15:00:00.000Z</published>
    <updated>2020-11-18T00:09:25.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。技術ブログ運営の真野です。</p><p>この度、フューチャー技術ブログから派生して、<a href="https://anchor.fm/futuretechcast" target="_blank" rel="noopener">Future Tech Cast</a> という名前でポッドキャストを始めましたのでご報告です。</p><p><img src="/images/20201116/top.png" alt=""></p><p>▼Future Tech Cast<br><a href="https://anchor.fm/futuretechcast" target="_blank" rel="noopener">https://anchor.fm/futuretechcast</a></p><h1 id="ポッドキャストとは"><a href="#ポッドキャストとは" class="headerlink" title="ポッドキャストとは"></a>ポッドキャストとは</h1><blockquote><p>インターネット上で音声や動画のデータファイルを公開する方法の1つであり、オーディオやビデオでのウェブログ（ブログ）として位置付けられている。インターネットラジオ・インターネットテレビの一種である<br><a href="https://ja.wikipedia.org/wiki/ポッドキャスト" target="_blank" rel="noopener">https://ja.wikipedia.org/wiki/ポッドキャスト</a></p></blockquote><p>ポッドキャストはWikipediaにも載っている通り、テーマに基づいた対談などをインターネットで公開（ブロードキャスト）するところに由来しているそうです。定義としては動画を配信することもあるかと思いますが、Future Tech Castでは直近は音声のみを公開していこうと考えています。言ってしまえばラジオを録音したものを公開するイメージです。</p><p>なんとなくiPodやiPhoneなどのモバイルデバイスで聞くイメージがありますが、そういった縛りはなくPCでも聞くこともできます。</p><h1 id="なんで始めたのか"><a href="#なんで始めたのか" class="headerlink" title="なんで始めたのか"></a>なんで始めたのか</h1><p>理由の背景に技術ブログの運営が2名に増えて安定稼働してきて次の刺激が欲しかったということもありますが、<strong>様々な要因からリモートワークが推進される時代に、より適合して有益な情報をお届けしたい</strong>がありました。</p><p>フューチャーは以前からリアルイベントを多く開催しており、そこでフューチャー社員と話せて楽しかったといってくれる方も多くいました。現在ではリアルイベントを開催することが難しくなってきており、ウェビナーなどに移行しています。これはこれでピンチをチャンスに変えようという挑戦だと思います。すでにConpass上でも多くのイベントを開催していることがわかります。</p><ul><li><a href="https://future.connpass.com/" target="_blank" rel="noopener">https://future.connpass.com/</a></li></ul><p>一方、技術ブログは元からWebベースの配信だったこともあり特に新しい取り組みは行えていませんでした。上記のようなリモート勉強会の開催もやりたいと思っています。それとは別に技術ブログのストック型であるという良さを活かしつつ、もう一歩進んでポッドキャストという形で少しでも情報発信ができれば良いなと考えています。収録を通してだれかに情報を伝えるということの大切さやテクニックを社員が学べるのも、１億総配信時代の世の中にあって面白いんじゃないでしょうか。テックキャストの影響で私もちょっと良いコンデンサマイクを買ってしまい、けれど顧客から思いもよらず高評価をもらいました。</p><p>また、昨今の情勢でリモートワークが増えてきましたこともあり（実際フューチャーだとほとんどがリモートワークです）、ポッドキャストなどの音声をBGMとして仕事をしている人が増えていると聞きました。そういったニーズを少しでも拾えればなと思っています。</p><h1 id="Future-Tech-Castの名前について"><a href="#Future-Tech-Castの名前について" class="headerlink" title="Future Tech Castの名前について"></a>Future Tech Castの名前について</h1><p>フューチャーのオウンメディアとしては採用チームが運営する<a href="https://note.future.co.jp/" target="_blank" rel="noopener">未来報</a>がありますが、技術ブログ側は特に名前を付けておらず、そのままフューチャー技術ブログと名乗っています。</p><p>ポッドキャストするときのチャネル名も、フューチャーFMやフューチャンネルなど色々案が出ましたが、技術ブログ側がFuture Tech Blogと呼ばれるのと対比しやすいこともあり、Future Tech Castを名前にしました。発案者は伊藤太斉さんです。</p><p>広義ではポッドキャストもブログの一種だと思いますが、内部ではテキストの方を「技術ブログ」、音声配信の方を「テックキャスト」と呼んで使い分けています。</p><h1 id="どういった内容を話すのか"><a href="#どういった内容を話すのか" class="headerlink" title="どういった内容を話すのか"></a>どういった内容を話すのか</h1><p>技術軸での対談をテーマに配信します。フューチャー社内で用いられている技術は様々ですので、レギュラーを固定して話すのは不可能です。そのため、ホスト役（1名）とゲスト役（1,2名）で、ホスト役がゲスト役に対して「最近のIoT領域で変化していることは何ですか？」といった質問を投げかけ、ゲスト側の考えていることを引き出すスタイルで回そうと考えています。ホスト役もゲスト役もある程度固定化はするかと思いますが、適時入れ替えていきます。</p><p>初回は <a href="https://www.onecareer.jp/events/20204" target="_blank" rel="noopener">しゃべくりフューチャー</a> というGoogle Meet（Zoom）でのトーク配信で実績多数な村田さんをパーソナリティに、書籍やOSSやカンファレンス登壇など<a href="https://engineer-lab.findy-code.io/why-i-write" target="_blank" rel="noopener">アウトプットが多彩な澁川さん</a>をゲストとしてお招きして、楽しい技術トークに花を咲かせました。</p><p>その他として、技術ブログの記事のサマリを数分分で要約したポッドキャストをまず聞いて、良さそうであれば本文を読むという人もいる(!!!)と聞きました。こうした様々な要望にも対応していく必要があるなと感じています。全ての技術ブログのポッドキャストを収録するのは大変なので、評判が良かった記事の著者に月何人かにサマリヤ書いた背景についてインタビューするといった形式を考えています。</p><p>ブログからテックキャストに興味を持ってもらったりその逆であったり、相互補完な関係を気づければ良いなと思います。</p><h1 id="第1回目の紹介"><a href="#第1回目の紹介" class="headerlink" title="第1回目の紹介"></a>第1回目の紹介</h1><p>記念すべき第1回目です。ゲスト澁川さん、パーソナリティ村田さんでお届けします。</p><p><a href="https://anchor.fm/futuretechcast/episodes/Real-World-HTTP-eme2hg" target="_blank" rel="noopener">https://anchor.fm/futuretechcast/episodes/Real-World-HTTP-eme2hg</a></p><p>以下のテーマです。大体35分程度ですが、それぞれのテーマに依存はないのでざっと気になるところを見てもらえればです。</p><ol><li>ITコンサルが実装することの意義(4:00)</li><li>SIerとITコンサル(6:55)</li><li>BtoBとBtoCの違い(8:30)</li><li>技術の選び方の違い(10:35)</li><li>社内フレームワークの話(14:45)</li><li>エンプラでの技術選定における堅さについて(16:30)</li><li>プロジェクトの長さ(18:25)</li><li>澁川さんの技術セット(19:45)</li><li>デスクトップGUIがWebに近づくとは？(21:50)</li><li>Go言語(27:45)</li><li>技術の学び方(30:15)</li><li>技術はどこから学べば良いのか(35:55)</li></ol><h1 id="配信時間"><a href="#配信時間" class="headerlink" title="配信時間"></a>配信時間</h1><p>大体の目安を45分程度として作成していきます。ポッドキャストという性質上、おそらく1.N倍速などで聞かれる方も多いと思いますので、昼休みにさらっと聞ける量にしたいと思っています。これは運用していく中で調整していこうと考えています。</p><p>また、技術ブログに投稿された記事の内容サマリが欲しいという要望には、5分程での収録を想定しています。</p><h1 id="公開頻度"><a href="#公開頻度" class="headerlink" title="公開頻度"></a>公開頻度</h1><p>月1,2回を想定しています。あまり数が多いと録音や編集やレビューが大変じゃない？ということからです。<br>面白いネタがあればもっと頻度を上げていくことも考えていますので、SNSなどでフィードバックいただけると助かります。ドンドン社内の有益なネタは公開していければと考えています。</p><h1 id="利用媒体"><a href="#利用媒体" class="headerlink" title="利用媒体"></a>利用媒体</h1><p>現在はPodcast 配信アプリ<a href="https://anchor.fm/dashboard" target="_blank" rel="noopener">Anchor</a> を利用しています。利用してみてWeb上である程度収録内容の編集が行えるなど使い勝手が良かったからです。Podcast settings でページの説明文などを編集すると反映が遅い時があり、そこは少し操作性にクセがあるなと思っています。</p><h1 id="収録について"><a href="#収録について" class="headerlink" title="収録について"></a>収録について</h1><p>昨今の情勢だと対面で収録は難しいので、リモートで収録する必要があります。てっとり早くZoomの録音機能を用いて収録しています。</p><h1 id="機材について"><a href="#機材について" class="headerlink" title="機材について"></a>機材について</h1><p>人それぞれなのでなんともですが、私は<a href="https://www.amazon.co.jp/dp/B07R5P3JBH/" target="_blank" rel="noopener">コンデンサーマイク</a>を購入しました。音楽配信ではないので重厚な機材は不要かと思いますが、マイクだけはPC備え付けではないものを購入する人が多い気がします。</p><h1 id="音声の編集"><a href="#音声の編集" class="headerlink" title="音声の編集"></a>音声の編集</h1><p>録音した生の音声データに対して、</p><ol><li>無駄な間をカット（余分な会話の間などを削除。削ると1割くらい短くなるようです）</li><li>ジングル・パーソナリティ・ゲストの音量バランス調整</li></ol><p>といった、かなり細かな調整を行っています。1は村田さんがZoomで収録後にiMovieで音声のみ抽出&amp;全編聞きながらノイズだったり要らない部分をカットして対応。2に関してはジングルを作ってくれた伊藤さんが、CUBASEという作曲編曲で使うツールを用いて対応していただきました。</p><p>パーソナリティの準備や収録の進め方のコツは、もっと回数を重ねてナレッジが溜まりましたら共有していこうと思います。</p><h1 id="ジングル"><a href="#ジングル" class="headerlink" title="ジングル"></a>ジングル</h1><p>入社半年で技術ブログに8記事を書いたり、<a href="https://future-architect.github.io/articles/20201013/">2020年秋にVue.jsのアプリケーションを作るなら、押さえておきたい5つのポイント</a>でバズらせたりと、質量ともにアウトプットがすごい伊藤雅彦さんにジングル<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>を作ってもらいました。<a href="https://future-architect.github.io/articles/20200613/">この記事</a>といい、みんな多芸ですごい。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>みなさまのお役に立てるような有益な情報をドンドン発信していきたいと思っています。</p><p>ブログ以外でも皆さまに会えることを楽しみにしています。今後は技術ブログ・ポッドキャスト共々、よろしくおねがいします。</p><p>社内の皆様、ポッドキャスト配信者、パーソナリティ、運営してくれる方を募集しています。気軽に真野・伊藤太斉までDMください。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">ジングル（jingle）とは、ラジオ番組などで開始や終了などに挿入される短い音楽などの総称です。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。技術ブログ運営の真野です。&lt;/p&gt;
&lt;p&gt;この度、フューチャー技術ブログから派生して、&lt;a href=&quot;http
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="TechBlog" scheme="https://future-architect.github.io/tags/TechBlog/"/>
    
      <category term="TechCast" scheme="https://future-architect.github.io/tags/TechCast/"/>
    
  </entry>
  
  <entry>
    <title>LocalStackに向けてTerraformを実行する</title>
    <link href="https://future-architect.github.io/articles/20201113/"/>
    <id>https://future-architect.github.io/articles/20201113/</id>
    <published>2020-11-12T15:00:00.000Z</published>
    <updated>2020-11-16T01:35:24.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>フューチャーの棚井龍之介です。TIGグループのDXユニットに所属しています。</p><p>TerraformはLocalstackに対してもapplyできます。便利な方法なのに日本語のサイトが見当たらないので、技術ブログ化しました。</p><h1 id="この記事を読むとできるようになること"><a href="#この記事を読むとできるようになること" class="headerlink" title="この記事を読むとできるようになること"></a>この記事を読むとできるようになること</h1><ul><li>ローカル環境に立ち上げた localstack に向けて、terraform plan/apply/destroy を実行できる</li></ul><h1 id="LocalStackとTerraform"><a href="#LocalStackとTerraform" class="headerlink" title="LocalStackとTerraform"></a>LocalStackとTerraform</h1><p>みなさんは、<a href="https://github.com/localstack/localstack" target="_blank" rel="noopener">Localstack</a> や <a href="https://www.terraform.io/" target="_blank" rel="noopener">Terraform</a> を使っていますか？</p><p>アプリのローカル環境テストとしてLocalstackを、インフラ構築にTerraformを用いる開発スタイルは、今やそう珍しいものではないと思います。</p><p>しかしながら、「ローカル環境のLocalStackに向けて、Terraformを打ち込むことができる」というのは、あまり知られていないようです。Googleで「localstack terraform」で検索しても、この方法を説明する日本語の入門記事は見つかりませんでした。docker-composeで立ち上げたlocalstackに向けて terraform apply を実行する方法が分かったら、開発環境の作り方や、E2Eテストの方法が広がると思いませんか？</p><p>以降の内容では、localstackの立ち上げ → terraform plan/apply実行 までを説明します。</p><h1 id="Localstackに向けて、Terraformを打つ"><a href="#Localstackに向けて、Terraformを打つ" class="headerlink" title="Localstackに向けて、Terraformを打つ"></a>Localstackに向けて、Terraformを打つ</h1><p>以下の流れで説明します。</p><ol start="0"><li>今回のディレクトリ構造</li><li>docker-composeでlocalstack立ち上げ</li><li>terraformファイルを編集</li><li>localstackにterraform plan/apply</li></ol><p>また、作業では <code>docker-compose</code> と <code>terraform</code> と <code>awscli</code> を利用しますが、これらのコマンドは各自で用意済みの前提とします。</p><p>ローカル完結の作業であるため、各コマンドの実行環境が揃っていれば、<strong>AWSアカウントの準備はもちろん不要</strong>です。</p><p>参考までに、私が本ブログの執筆時に利用したバージョンはこちらです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose --version</span><br><span class="line">docker-compose version 1.27.4, build 40524192</span><br><span class="line"></span><br><span class="line">$ terraform --version</span><br><span class="line">Terraform v0.13.5</span><br><span class="line"></span><br><span class="line">$ aws --version</span><br><span class="line">aws-cli/1.18.166 Python/3.7.4 Darwin/19.6.0 botocore/1.19.6</span><br><span class="line"></span><br><span class="line">$ sw_vers -productName</span><br><span class="line">ProductName:Mac OS X</span><br></pre></td></tr></table></figure><h2 id="1-今回のディレクトリ構造"><a href="#1-今回のディレクトリ構造" class="headerlink" title="1. 今回のディレクトリ構造"></a>1. 今回のディレクトリ構造</h2><p>本記事は以下のディレクトリ構成での作業とします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sandbox/</span><br><span class="line">  ├ docker-compose.yml</span><br><span class="line">  ├ main.tf</span><br><span class="line">  ├ resources.tf</span><br><span class="line">  ├ hello.go</span><br><span class="line">  └ lambda.zip</span><br></pre></td></tr></table></figure><p>各ファイルは <code>$ touch &lt;filename&gt;</code> などを利用して生成してください、Lambdaの中身にまでは踏み込まないので、lambda.zip は 以下の hello.go を build &amp; zip化して生成お願いします</p><figure class="highlight go"><figcaption><span>hello.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"hello, world"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build, zipコマンド</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ GOOS=linux GOARCH=amd64 go build -o hello</span><br><span class="line">$ zip lambda.zip hello</span><br></pre></td></tr></table></figure><p>以上で、作業前の準備は完了です。</p><h2 id="2-docker-composeでLocalstack立ち上げ"><a href="#2-docker-composeでLocalstack立ち上げ" class="headerlink" title="2. docker-composeでLocalstack立ち上げ"></a>2. docker-composeでLocalstack立ち上げ</h2><p>docker-compose.ymlを編集して、Localstackの定義を追加します。</p><p>Localstackの定義は、本家サイトの記述を参照しています。<br><a href="https://github.com/localstack/localstack/blob/master/docker-compose.yml" target="_blank" rel="noopener">https://github.com/localstack/localstack/blob/master/docker-compose.yml</a></p><figure class="highlight yaml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.1'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">localstack:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">"$&#123;LOCALSTACK_DOCKER_NAME-localstack_main&#125;"</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">localstack/localstack:0.12.1</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:4566:4566/tcp</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVICES=$&#123;SERVICES-</span> <span class="string">&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DEBUG=$&#123;DEBUG-</span> <span class="string">&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DATA_DIR=$&#123;DATA_DIR-</span> <span class="string">&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">LAMBDA_EXECUTOR=$&#123;LAMBDA_EXECUTOR-</span> <span class="string">&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KINESIS_ERROR_PROBABILITY=$&#123;KINESIS_ERROR_PROBABILITY-</span> <span class="string">&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DOCKER_HOST=unix:///var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HOST_TMP_FOLDER=$&#123;TMPDIR&#125;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"$&#123;TMPDIR:-/tmp/localstack&#125;:/tmp/localstack"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"/var/run/docker.sock:/var/run/docker.sock"</span></span><br></pre></td></tr></table></figure><p>yamlファイルに追記完了したら、localstackを立ち上げます。<br><code>$ docker-compose ps</code> で起動が確認できたら、localstack側の準備は完了です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose -f docker-compose.yml up -d localstack</span><br><span class="line">Creating localstack_main ... <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">$ docker-compose ps</span><br><span class="line">     Name               Command          State                                                        Ports                                                     </span><br><span class="line">----------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">localstack_main   docker-entrypoint.sh   Up      127.0.0.1:4566-&gt;4566/tcp, 4567/tcp, 4568/tcp, 4569/tcp, 4570/tcp, 4571/tcp, 4572/tcp, 4573/tcp, 4574/tcp,      </span><br><span class="line">                                                 4575/tcp, 4576/tcp, 4577/tcp, 4578/tcp, 4579/tcp, 4580/tcp, 4581/tcp, 4582/tcp, 4583/tcp, 4584/tcp, 4585/tcp,  </span><br><span class="line">                                                 4586/tcp, 4587/tcp, 4588/tcp, 4589/tcp, 4590/tcp, 4591/tcp, 4592/tcp, 4593/tcp, 4594/tcp, 4595/tcp, 4596/tcp,  </span><br><span class="line">                                                 4597/tcp, 8080/tcp</span><br></pre></td></tr></table></figure><h2 id="3-Terraformファイルを編集"><a href="#3-Terraformファイルを編集" class="headerlink" title="3. Terraformファイルを編集"></a>3. Terraformファイルを編集</h2><p>Terraform定義に、Localstackへplan,applyを打ち込むための設定を記入します。</p><figure class="highlight sh"><figcaption><span>terraform main.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># backend</span></span><br><span class="line">terraform &#123;</span><br><span class="line">  backend <span class="string">"local"</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># provider</span></span><br><span class="line">provider <span class="string">"aws"</span> &#123;</span><br><span class="line">  region = <span class="string">"us-east-1"</span></span><br><span class="line"></span><br><span class="line">  access_key = <span class="string">"mock_access_key"</span></span><br><span class="line">  secret_key = <span class="string">"mock_secret_key"</span></span><br><span class="line"></span><br><span class="line">  s3_force_path_style         = <span class="literal">true</span></span><br><span class="line">  skip_credentials_validation = <span class="literal">true</span></span><br><span class="line">  skip_metadata_api_check     = <span class="literal">true</span></span><br><span class="line">  skip_requesting_account_id  = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  endpoints &#123;</span><br><span class="line">    iam      = <span class="string">"http://localhost:4566"</span></span><br><span class="line">    kinesis  = <span class="string">"http://localhost:4566"</span></span><br><span class="line">    lambda   = <span class="string">"http://localhost:4566"</span></span><br><span class="line">    s3       = <span class="string">"http://localhost:4566"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>providerは <code>aws</code> ですが、以下4つの引数をtrueに設定することで、terraformの向き先をローカル環境のMockに設定できます。</p><ul><li>s3_force_path_style</li><li>skip_credentials_validation</li><li>skip_metadata_api_check</li><li>skip_requesting_account_id</li></ul><p>また、ローカル完結作業のため、以下の引数は自由な値を入力して問題ありません。</p><ul><li>region（実在するregionに限る）</li><li>access_key</li><li>secret_key</li></ul><h3 id="endpointsについて"><a href="#endpointsについて" class="headerlink" title="endpointsについて"></a>endpointsについて</h3><p>providerがawsの場合、各awsサービスのendpointsをカスタマイズ可能です。endpointsの向き先を調整することにより、ローカル完結のterraform環境が実現可能という訳です。</p><p>localstackは <a href="https://github.com/localstack/localstack#announcements" target="_blank" rel="noopener">2020-09-15リリース</a> から </p><blockquote><p>all services are now exposed via the edge service (port 4566) only</p></blockquote><p>なので、endpointsのURLは全て <code>http://localhost:4566</code> になります。</p><p>各自でカスタマイズする場合は、terraform で apply 予定のリソース全てをendpoints定義に追加してください。利用可能なサービス一覧は、<a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/guides/custom-service-endpoints#available-endpoint-customizations" target="_blank" rel="noopener">こちら</a> に掲載されています。</p><h3 id="本記事でLocalstackに構築するもの"><a href="#本記事でLocalstackに構築するもの" class="headerlink" title="本記事でLocalstackに構築するもの"></a>本記事でLocalstackに構築するもの</h3><p>backendとproviderの定義は完了したので、次は各種リソースを追加しましょう。本記事では、サーバレス構成でよくある「Kinesisでデータを受けて、Lambdaで取得し、S3に永続化」のインフラ環境を、Terraformを使ってLocalstack内に構築します。</p><p><img src="/images/20201113/Screen_Shot_2020-10-29_at_15.12.54.png" alt=""></p><p>上記構成をterraform定義するのに必要なresourceはこちらです</p><ul><li>aws_kinesis_stream</li><li>aws_lambda_event_source_mapping</li><li>aws_lambda_function</li><li>aws_iam_role</li><li>aws_iam_policy</li><li>aws_iam_role_policy_attachment</li><li>aws_s3_bucket</li></ul><p>Terraform自体の説明は本記事の目的ではないので、一気に追加します</p><figure class="highlight sh"><figcaption><span>terraform resources.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_kinesis_stream"</span> <span class="string">"local_stream"</span> &#123;</span><br><span class="line">  name             = <span class="string">"local-stream"</span></span><br><span class="line">  shard_count      = 1</span><br><span class="line">  retention_period = 168</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_lambda_event_source_mapping"</span> <span class="string">"local_mapping"</span> &#123;</span><br><span class="line">  event_source_arn                   = aws_kinesis_stream.local_stream.arn</span><br><span class="line">  function_name                      = aws_lambda_function.local_lambda.arn</span><br><span class="line">  starting_position                  = <span class="string">"LATEST"</span></span><br><span class="line">  maximum_retry_attempts             = 1</span><br><span class="line">  batch_size                         = 100</span><br><span class="line">  maximum_batching_window_in_seconds = 5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_lambda_function"</span> <span class="string">"local_lambda"</span> &#123;</span><br><span class="line">  filename      = <span class="string">"lambda.zip"</span></span><br><span class="line">  function_name = <span class="string">"local-lambda"</span></span><br><span class="line">  role          = aws_iam_role.local_role.arn</span><br><span class="line">  handler       = <span class="string">"lambda"</span></span><br><span class="line">  runtime       = <span class="string">"go1.x"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_iam_role"</span> <span class="string">"local_role"</span> &#123;</span><br><span class="line">  name               = <span class="string">"local-role"</span></span><br><span class="line">  assume_role_policy = &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line"><span class="string">"Statement"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"Action"</span>: <span class="string">"sts:AssumeRole"</span>,</span><br><span class="line"><span class="string">"Principal"</span>: &#123;</span><br><span class="line"><span class="string">"Service"</span>: <span class="string">"lambda.amazonaws.com"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line"><span class="string">"Sid"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_iam_policy"</span> <span class="string">"local_policy"</span> &#123;</span><br><span class="line">  name   = <span class="string">"local-iam-policy"</span></span><br><span class="line">  policy = data.aws_iam_policy_document.local_policy_document.json</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">"aws_iam_policy_document"</span> <span class="string">"local_policy_document"</span> &#123;</span><br><span class="line">  statement &#123;</span><br><span class="line">    effect = <span class="string">"Allow"</span></span><br><span class="line">    actions = [</span><br><span class="line">      <span class="string">"s3:GetObject"</span>,</span><br><span class="line">      <span class="string">"s3:ListBucket"</span>,</span><br><span class="line">      <span class="string">"s3:PutBucketNotification"</span>,</span><br><span class="line">      <span class="string">"s3:PutObject"</span>,</span><br><span class="line">      <span class="string">"s3:DeleteObject"</span>,</span><br><span class="line">    ]</span><br><span class="line">    resources = [<span class="string">"*"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">  statement &#123;</span><br><span class="line">    effect = <span class="string">"Allow"</span></span><br><span class="line">    actions = [</span><br><span class="line">      <span class="string">"kinesis:DescribeStream"</span>,</span><br><span class="line">      <span class="string">"kinesis:GetShardIterator"</span>,</span><br><span class="line">      <span class="string">"kinesis:GetRecords"</span></span><br><span class="line">    ]</span><br><span class="line">    resources = [<span class="string">"*"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_iam_role_policy_attachment"</span> <span class="string">"local_poilcy_attachment"</span> &#123;</span><br><span class="line">  role       = aws_iam_role.local_role.name</span><br><span class="line">  policy_arn = aws_iam_policy.local_policy.arn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_s3_bucket"</span> <span class="string">"local_archive"</span> &#123;</span><br><span class="line">  bucket = <span class="string">"local-archive"</span></span><br><span class="line">  versioning &#123;</span><br><span class="line">    enabled = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上により、plan/apply の準備は完了です</p><h2 id="3-Localstackにterraform-plan-apply"><a href="#3-Localstackにterraform-plan-apply" class="headerlink" title="3. Localstackにterraform plan/apply"></a>3. Localstackにterraform plan/apply</h2><h3 id="まずは-terraform-init-から"><a href="#まずは-terraform-init-から" class="headerlink" title="まずは terraform init から"></a>まずは terraform init から</h3><p>新しいディレクトリでterraformを使う場合は、まずは <code>$ terraform init</code> して、backend と provider を設定します</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ terraform init</span><br><span class="line"></span><br><span class="line">Initializing the backend...</span><br><span class="line"></span><br><span class="line">Successfully configured the backend <span class="string">"local"</span>! Terraform will automatically</span><br><span class="line">use this backend unless the backend configuration changes.</span><br><span class="line"></span><br><span class="line">Initializing provider plugins...</span><br><span class="line">(略)</span><br><span class="line"></span><br><span class="line">Terraform has been successfully initialized!</span><br><span class="line">(略)</span><br></pre></td></tr></table></figure><p>terraform init が完了しました。</p><h2 id="Localstackに向けて、terraform-plan-を実行"><a href="#Localstackに向けて、terraform-plan-を実行" class="headerlink" title="Localstackに向けて、terraform plan を実行"></a>Localstackに向けて、terraform plan を実行</h2><p>Terraformの実行準備が完了したので、<code>$ terraform plan</code> を実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ terraform plan</span><br><span class="line">Refreshing Terraform state <span class="keyword">in</span>-memory prior to plan...</span><br><span class="line">The refreshed state will be used to calculate this plan, but will not be</span><br><span class="line">persisted to <span class="built_in">local</span> or remote state storage.</span><br><span class="line"></span><br><span class="line">data.aws_iam_policy_document.local_policy_document: Refreshing state...</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">An execution plan has been generated and is shown below.</span><br><span class="line">Resource actions are indicated with the following symbols:</span><br><span class="line">  + create</span><br><span class="line"></span><br><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">(略)</span><br><span class="line"></span><br><span class="line">Plan: 7 to add, 0 to change, 0 to destroy.</span><br><span class="line"></span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Note: You didn<span class="string">'t specify an "-out" parameter to save this plan, so Terraform</span></span><br><span class="line"><span class="string">can'</span>t guarantee that exactly these actions will be performed <span class="keyword">if</span></span><br><span class="line"><span class="string">"terraform apply"</span> is subsequently run.</span><br></pre></td></tr></table></figure><p>planも正しく実行できました。</p><h2 id="Localstackに向けて、terraform-apply-を実行"><a href="#Localstackに向けて、terraform-apply-を実行" class="headerlink" title="Localstackに向けて、terraform apply を実行"></a>Localstackに向けて、terraform apply を実行</h2><p><code>$ terraform apply</code><br>（なるべく短いログでapply状況を載せたかったので、–auto-approve を利用しています）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">$ terraform apply --auto-approve</span><br><span class="line">data.aws_iam_policy_document.local_policy_document: Refreshing state...</span><br><span class="line">aws_iam_policy.local_policy: Creating...</span><br><span class="line">aws_kinesis_stream.local_stream: Creating...</span><br><span class="line">aws_iam_role.local_role: Creating...</span><br><span class="line">aws_s3_bucket.local_archive: Creating...</span><br><span class="line">aws_iam_role.local_role: Creation complete after 0s [id=<span class="built_in">local</span>-role]</span><br><span class="line">aws_lambda_function.local_lambda: Creating...</span><br><span class="line">aws_iam_policy.local_policy: Creation complete after 0s [id=arn:aws:iam::000000000000:policy/<span class="built_in">local</span>-iam-policy]</span><br><span class="line">aws_iam_role_policy_attachment.local_poilcy_attachment: Creating...</span><br><span class="line">aws_iam_role_policy_attachment.local_poilcy_attachment: Creation complete after 0s [id=<span class="built_in">local</span>-role-20201029145646394900000001]</span><br><span class="line">aws_s3_bucket.local_archive: Creation complete after 1s [id=<span class="built_in">local</span>-archive]</span><br><span class="line">aws_lambda_function.local_lambda: Creation complete after 6s [id=<span class="built_in">local</span>-lambda]</span><br><span class="line">aws_kinesis_stream.local_stream: Still creating... [10s elapsed]</span><br><span class="line">aws_kinesis_stream.local_stream: Still creating... [20s elapsed]</span><br><span class="line">aws_kinesis_stream.local_stream: Still creating... [30s elapsed]</span><br><span class="line">aws_kinesis_stream.local_stream: Creation complete after 30s [id=arn:aws:kinesis:us-east-1:000000000000:stream/<span class="built_in">local</span>-stream]</span><br><span class="line">aws_lambda_event_source_mapping.local_mapping: Creating...</span><br><span class="line">aws_lambda_event_source_mapping.local_mapping: Creation complete after 0s [id=7029d656-c97d-4256-90bf-a3eb38c50e93]</span><br><span class="line"></span><br><span class="line">Apply complete! Resources: 7 added, 0 changed, 0 destroyed.</span><br><span class="line"></span><br><span class="line">The state of your infrastructure has been saved to the path</span><br><span class="line">below. This state is required to modify and destroy your</span><br><span class="line">infrastructure, so keep it safe. To inspect the complete state</span><br><span class="line">use the `terraform show` <span class="built_in">command</span>.</span><br><span class="line"></span><br><span class="line">State path: terraform.tfstate</span><br></pre></td></tr></table></figure><blockquote><p>Apply complete! Resources: 7 added, 0 changed, 0 destroyed.</p></blockquote><p>apply成功です！</p><p>awscliを用いて、各リソースの追加を確認することもできます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># S3</span></span><br><span class="line">$ aws --endpoint-url http://localhost:4566 s3 ls</span><br><span class="line">2020-10-29 14:51:17 <span class="built_in">local</span>-archive</span><br><span class="line"></span><br><span class="line"><span class="comment"># Kinesis</span></span><br><span class="line">$ aws --endpoint-url http://localhost:4566 kinesis list-streams</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"StreamNames"</span>: [</span><br><span class="line">        <span class="string">"local-stream"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Lambda</span></span><br><span class="line">$ aws --endpoint-url http://localhost:4566 lambda list-functions</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"Functions"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"FunctionName"</span>: <span class="string">"local-lambda"</span>,</span><br><span class="line">            <span class="string">"FunctionArn"</span>: <span class="string">"arn:aws:lambda:us-east-1:000000000000:function:local-lambda"</span>,</span><br><span class="line">            <span class="string">"Runtime"</span>: <span class="string">"go1.x"</span>,</span><br><span class="line">            <span class="string">"Role"</span>: <span class="string">"arn:aws:iam::000000000000:role/local-role"</span>,</span><br><span class="line">            <span class="string">"Handler"</span>: <span class="string">"lambda"</span>,</span><br><span class="line">            <span class="string">"CodeSize"</span>: 1035298,</span><br><span class="line">            <span class="string">"Description"</span>: <span class="string">""</span>,</span><br><span class="line">            <span class="string">"Timeout"</span>: 3,</span><br><span class="line">            <span class="string">"MemorySize"</span>: 128,</span><br><span class="line">            <span class="string">"LastModified"</span>: <span class="string">"2020-10-29T14:56:46.405+0000"</span>,</span><br><span class="line">            <span class="string">"CodeSha256"</span>: <span class="string">"0rECD6MUpCBF7jIrzT53RTSjH0D1iTBTUd6t+FfP7is="</span>,</span><br><span class="line">            <span class="string">"Version"</span>: <span class="string">"<span class="variable">$LATEST</span>"</span>,</span><br><span class="line">            <span class="string">"VpcConfig"</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">"TracingConfig"</span>: &#123;</span><br><span class="line">                <span class="string">"Mode"</span>: <span class="string">"PassThrough"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"RevisionId"</span>: <span class="string">"3fc0da3d-eb5e-471a-9d26-c0a7b3f98d90"</span>,</span><br><span class="line">            <span class="string">"State"</span>: <span class="string">"Active"</span>,</span><br><span class="line">            <span class="string">"LastUpdateStatus"</span>: <span class="string">"Successful"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで、ローカルに閉じた環境で、Terraformを好き放題使えますね！</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では、Localstackに向けてTerraformを実行する方法をご紹介しました。</p><p>この手法は何より <strong>AWSアカウントなしで実行可能</strong> なので、例えば…</p><ul><li>インフラ新規参入者向けのterraformコマンド練習環境として</li><li>社内規約でcredentialが発行できず、インフラタスクを振れないアルバイトさん向けの環境として</li><li>他人と絶対にconflictせず、好き勝手にdestroyできる自分だけの<strong>無料の環境</strong>として</li></ul><p>も利用可能です。</p><p>ここまで読んでいただいた皆様も、色々なリソースをterraformコマンドでLocalstackに構築してみてください！</p><h2 id="参照サイト"><a href="#参照サイト" class="headerlink" title="参照サイト"></a>参照サイト</h2><ul><li><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/guides/custom-service-endpoints#available-endpoint-customizations" target="_blank" rel="noopener">Terraform Registory Custom Service Endpoint Configuration</a></li><li><a href="https://www.hashicorp.com/resources/testing-infrastructure-as-code-on-localhost" target="_blank" rel="noopener">Testing Infrastructure as Code on Localhost</a></li><li><a href="https://spin.atomicobject.com/2020/02/03/localstack-terraform-circleci/" target="_blank" rel="noopener">LocalStack + Terraform + CircleCI for Lambda without AWS</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;フューチャーの棚井龍之介です。TIGグループのDXユニットに所属しています。&lt;/p&gt;
&lt;p&gt;TerraformはLocals
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
      <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
      <category term="LocalStack" scheme="https://future-architect.github.io/tags/LocalStack/"/>
    
  </entry>
  
  <entry>
    <title>GoでLambdaからLambdaを呼び出すときに気をつけたいポイント6選</title>
    <link href="https://future-architect.github.io/articles/20201112/"/>
    <id>https://future-architect.github.io/articles/20201112/</id>
    <published>2020-11-11T15:00:00.000Z</published>
    <updated>2020-11-18T00:09:21.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIGの辻です。サーバーレスなアプリケーションを開発するときにAWS LambdaやCloud RunといったFaaSはとても重宝します。デプロイする関数のコードは1つの関数がモノリシックな大きな関数にならないように、小さな関数を組み合わせて実装するのが基本です。いくつかのユースケースでAWS LambdaからAWS Lambdaを同期的に呼び出したいケースがあったのですが、開発者が意識しておいたほうがいいようなハマりどころがいくつかありました。</p><p>本記事ではGoで<a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/invocation-sync.html" target="_blank" rel="noopener">AWS LambdaからAWS Lambdaを同期的に呼び出すとき</a>のハマりどころやTipsを紹介します。以下のような構成です。</p><p><img src="/images/20201112/Lambda%E3%81%8B%E3%82%89Lambda.png" alt=""></p><ul><li>ライブラリのバージョン</li></ul><p>確認時のライブラリのバージョンは以下です。</p><table><thead><tr><th>#</th><th>ソフトウェア/ライブラリ</th><th>バージョン</th></tr></thead><tbody><tr><td>1</td><td>aws/aws-lambda-go</td><td>1.19.1</td></tr><tr><td>2</td><td>aws/aws-sdk-go</td><td>1.35.7</td></tr></tbody></table><p>またAWSのリージョンは、アジアパシフィック(東京) <code>ap-northeast-1</code> です。Lambda関数のランタイムは <code>Go 1.x</code> を使っています。</p><h1 id="ハマりどころ集"><a href="#ハマりどころ集" class="headerlink" title="ハマりどころ集"></a>ハマりどころ集</h1><h2 id="1-Lambda関数呼び出しのエラーハンドリング"><a href="#1-Lambda関数呼び出しのエラーハンドリング" class="headerlink" title="1. Lambda関数呼び出しのエラーハンドリング"></a>1. Lambda関数呼び出しのエラーハンドリング</h2><p>Lambda関数を呼び出す <code>InvokeWithContext</code> ですが <code>InvokeWithContext</code> は呼び出し先のLambda関数が正常に呼び出された場合は、以下の戻り値の <code>error</code> は常に <code>nil</code> になります。</p><p><code>func (c *Lambda) InvokeWithContext(ctx aws.Context, input *InvokeInput, opts ...request.Option) (*InvokeOutput, error)</code></p><p><code>InvokeInput</code> の関数名が間違っているなど、そもそも呼び出し先のLambda関数が呼び出せなかったときは <code>error</code> が <code>non-nil</code> になります。しかし、呼び出し先のLambda関数を呼び出せた場合は、呼び出し先の関数がエラーを返したどうかに関わらず、呼び出し元の戻り値の <code>error</code> は <code>nil</code> になります。Goは戻り値の <code>erorr</code> が <code>nil</code> かどうかでエラーをハンドリングするのが一般的です。しかし <code>InvokeWithContext</code> を使う場合のエラーハンドリングは、よくあるGoのエラーハンドリングの作法からは外れるので、注意が必要です。</p><p><code>InvokeWithContext</code> をつかってLambda関数を呼び出す場合に、呼び出し先のLambda関数のエラーをハンドリングしたい場合、以下のような実装は間違っています。(呼び出し先のLambda関数では <code>errors.New(&quot;invoked err&quot;)</code> の <code>errorString</code> を返却するようにしています)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Lambda関数呼び出し</span></span><br><span class="line">resp, err := lmd.InvokeWithContext(ctx, input)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常にLambda関数が呼び出せた場合は常にnilになります</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"invoke lambda, function name = %s: %w"</span>, functionName, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>呼び出し先のLambda関数でエラーが発生していても、呼び出し元の処理は正常終了しています。</p><p><img src="/images/20201112/image.png" alt=""></p><h3 id="修正例"><a href="#修正例" class="headerlink" title="修正例"></a>修正例</h3><p><strong><code>InvokeOutput</code> の <code>FunctionError</code> が <code>nil</code> かどうかで呼び出し先のLambda関数でエラーが発生したかチェックする</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Lambda関数呼び出し</span></span><br><span class="line">resp, err := lmd.InvokeWithContext(ctx, input)</span><br><span class="line">log.Printf(<span class="string">"invoke err: %v\n"</span>, err)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"invoke lambda, function name = %s: %w"</span>, functionName, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// resp変数のFunctionErrorがnilかどうかで呼び出し先のLambda関数でエラーが発生したかチェックします</span></span><br><span class="line"><span class="keyword">if</span> resp.FunctionError != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"invoke lambda response error, detail: %v: %v"</span>, <span class="keyword">string</span>(resp.Payload), aws.StringValue(resp.FunctionError))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>resp.FunctionError</code> を使ってエラーをチェックすれば、呼び出し先のLambda関数で発生したエラーをハンドリングできます。エラーの詳細は <code>resp.Payload</code> にJSONとして表現されています。今回の場合、呼び出し先のLambda関数で <code>errorString</code> のエラーが発生し、エラーの文字列として <code>&quot;invoked err&quot;</code> となっていることがわかります。</p><p><img src="/images/20201112/image_2.png" alt=""></p><h2 id="2-Contextでは値を伝播できない"><a href="#2-Contextでは値を伝播できない" class="headerlink" title="2. Contextでは値を伝播できない"></a>2. Contextでは値を伝播できない</h2><p>GoではContextという、APIやプロセス間で、処理のデッドラインを設定やリクエストスコープ内に閉じた値を伝播する機能があります。Contextを用いて値を伝播するときは<a href="https://golang.org/pkg/context/#WithValue" target="_blank" rel="noopener">context.WithValue</a>を使って、キーとバリューのセットでコンテキストに値を格納します。</p><details><summary>WithContextを利用する実装例</summary><div><p>通常Contextのキーは衝突を防ぐためにパッケージ内で非公開のキーとにしておき、Contextに値をセットしたり、Contextから値を取得したりする関数を用意することが一般的です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">readerKey = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Reader <span class="keyword">struct</span> &#123;</span><br><span class="line">Message <span class="keyword">string</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RetrieveReader</span><span class="params">(ctx context.Context)</span> <span class="params">(Reader, error)</span></span> &#123;</span><br><span class="line">r, ok := ctx.Value(readerKey).(Reader)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> Reader&#123;&#125;, errors.New(<span class="string">"not found Reader in the context"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SetReader</span><span class="params">(ctx context.Context, r Reader)</span> <span class="title">context</span>.<span class="title">Context</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> context.WithValue(ctx, readerKey, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ===================================================</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line"><span class="comment">// コンテキストに値を格納</span></span><br><span class="line">r := Reader&#123;Message: <span class="string">"hello context with value!"</span>&#125;</span><br><span class="line">ctx = SetReader(ctx, r)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 別の処理を呼び出し</span></span><br><span class="line">hoge(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hoge</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">r, error := RetrieveReader(ctx)</span><br><span class="line"><span class="keyword">if</span> error != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// コンテキストに値が含まれなかったときの処理</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(r)</span><br><span class="line"><span class="comment">// Output: &#123;hello context with value!&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>AWSが提供しているGoのSDK <a href="https://github.com/aws/aws-sdk-go" target="_blank" rel="noopener"><code>aws-sdk-go</code></a> では、Lambda関数を呼び出すために以下の3つのAPIが提供されています。(※DeprecatedになっているAPIは除きます。)</p><ul><li><code>func (c *Lambda) Invoke(input *InvokeInput) (*InvokeOutput, error)</code></li><li><code>func (c *Lambda) InvokeRequest(input *InvokeInput) (req *request.Request, output *InvokeOutput)</code></li><li><code>func (c *Lambda) InvokeWithContext(ctx aws.Context, input *InvokeInput, opts ...request.Option) (*InvokeOutput, error)</code></li></ul><p><code>InvokeWithContext</code> は <code>Context</code> を引数に受け取るため、<code>context.WithValue</code> でセットした値を呼び出し先のLambda関数に伝播できるのでは？と思うかもしれません。しかし、呼び出し元で <code>Context</code> に <code>context.WithValue</code> でセットしても値は呼び出し先のLambda関数に伝播されません。なぜなら <code>InvokeWithContext</code> における <code>Context</code> はリクエストのキャンセルするためのもので、値を伝播するためのものではないからです。</p><h3 id="解決策"><a href="#解決策" class="headerlink" title="解決策"></a>解決策</h3><p><strong><code>InvokeInput</code> 型の <code>Payload</code> フィールドを使う</strong></p><p><code>InvokeWithContext</code> を使ってLambdaを呼び出すときに、Inputの情報として <code>InvokeInput</code> を引数にセットします。<code>InvokeInput</code> は以下のような構造体です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> InvokeInput <span class="keyword">struct</span> &#123;</span><br><span class="line">ClientContext *<span class="keyword">string</span> <span class="string">`location:"header" locationName:"X-Amz-Client-Context" type:"string"`</span></span><br><span class="line">FunctionName *<span class="keyword">string</span> <span class="string">`location:"uri" locationName:"FunctionName" min:"1" type:"string" required:"true"`</span></span><br><span class="line">InvocationType *<span class="keyword">string</span> <span class="string">`location:"header" locationName:"X-Amz-Invocation-Type" type:"string" enum:"InvocationType"`</span></span><br><span class="line">LogType *<span class="keyword">string</span> <span class="string">`location:"header" locationName:"X-Amz-Log-Type" type:"string" enum:"LogType"`</span></span><br><span class="line">Payload []<span class="keyword">byte</span> <span class="string">`type:"blob" sensitive:"true"`</span></span><br><span class="line">Qualifier *<span class="keyword">string</span> <span class="string">`location:"querystring" locationName:"Qualifier" min:"1" type:"string"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Payload</code> フィールドにJSONエンコードしたバイト配列をセットすることで呼び出し先のLambda関数に値を伝播することができます。以下のようにして呼び出し先のLambda関数に値を渡すことができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 呼び出し先のLambdaに渡したい値</span></span><br><span class="line">r := Reader&#123;Message: <span class="string">"hello world!"</span>&#125;</span><br><span class="line"><span class="comment">// JSONにエンコード</span></span><br><span class="line">b, _ := json.Marshal(r)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lambda関数呼び出しのInput設定</span></span><br><span class="line">functionName := <span class="string">"invoked"</span></span><br><span class="line">input := &amp;lambda.InvokeInput&#123;</span><br><span class="line">FunctionName:   aws.String(functionName),</span><br><span class="line">InvocationType: aws.String(lambda.InvocationTypeRequestResponse),</span><br><span class="line"><span class="comment">// PayloadにJSONエンコードされた値をセット</span></span><br><span class="line">Payload:        b,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lambda関数呼び出し</span></span><br><span class="line">resp, err := lmd.InvokeWithContext(ctx, input)</span><br></pre></td></tr></table></figure><details><summary>呼び出し側のLambda関数実装例</summary><div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"></span><br><span class="line">mainlambda <span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/session"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/service/lambda"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">lmd *lambda.Lambda</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">lmd = lambda.New(session.Must(session.NewSession(&amp;aws.Config&#123;&#125;)))</span><br><span class="line">log.SetPrefix(<span class="string">"[DEBUG] "</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Lambda関数の実行</span></span><br><span class="line">mainlambda.Start(Handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handler</span><span class="params">(ctx context.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">log.Println(<span class="string">"hello caller lambda!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 呼び出し先のLambdaに渡したい値</span></span><br><span class="line">r := model.Reader&#123;Message: <span class="string">"hello world!"</span>&#125;</span><br><span class="line"><span class="comment">// JSONにエンコード</span></span><br><span class="line">b, _ := json.Marshal(r)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lambda関数呼び出しのInput設定</span></span><br><span class="line">functionName := <span class="string">"invoked"</span></span><br><span class="line">input := &amp;lambda.InvokeInput&#123;</span><br><span class="line">FunctionName:   aws.String(functionName),</span><br><span class="line">InvocationType: aws.String(lambda.InvocationTypeRequestResponse),</span><br><span class="line">Payload:        b,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Lambda関数呼び出し</span></span><br><span class="line">resp, err := lmd.InvokeWithContext(ctx, input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"invoke lambda, function name = %s: %w"</span>, functionName, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 呼び出し先のLambdaからのレスポンス</span></span><br><span class="line">log.Printf(<span class="string">"resp.StatusCode: %v\n"</span>, aws.Int64Value(resp.StatusCode))</span><br><span class="line">log.Printf(<span class="string">"resp.FunctionError: %v\n"</span>, aws.StringValue(resp.FunctionError))</span><br><span class="line">log.Printf(<span class="string">"resp.Payload: %v\n"</span>, <span class="keyword">string</span>(resp.Payload))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>model.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Reader <span class="keyword">struct</span> &#123;</span><br><span class="line">Message <span class="keyword">string</span> <span class="string">`json:"message"`</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>呼び出される側のLambda関数では、呼び出し時のペイロードはハンドラの引数として受け取ることができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ハンドラの第2引数として呼び出し元のペイロードと同じ構造体を含める</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handler</span><span class="params">(ctx context.Context, r model.Reader)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">"hello invoked lambda!, model.Reader=%#v\n"</span>, r)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details><summary>呼び出される側のLambda関数実装例</summary><div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"caller/model"</span></span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"></span><br><span class="line">mainlambda <span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/session"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/service/lambda"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">lmd *lambda.Lambda</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">region := os.Getenv(<span class="string">"AWS_REGION"</span>)</span><br><span class="line">lmd = lambda.New(session.Must(session.NewSession(&amp;aws.Config&#123;</span><br><span class="line">Region: aws.String(region),</span><br><span class="line">&#125;)))</span><br><span class="line">log.SetPrefix(<span class="string">"[DEBUG] "</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Lambda関数の実行</span></span><br><span class="line">mainlambda.Start(Handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ハンドラの第2引数として呼び出し元のペイロードと同じ構造体を含める</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handler</span><span class="params">(ctx context.Context, r model.Reader)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">"hello invoked lambda!, model.Reader=%#v\n"</span>, r)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><ul><li>実行結果(呼び出し元)</li></ul><p>実行するとLambda関数を呼び出したレスポンスが返ってきます。この場合は正常に実行されたことがわかります。なお、今回は呼び出し先のLambda関数にはレスポンスを設定していないため、呼び出し元のLambda関数の <code>resp.Payload</code> が <code>null</code> になっていますが、レスポンスを呼び出し元に渡すこともできます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] 2020/10/11 03:05:17 hello <span class="built_in">caller</span> lambda!</span><br><span class="line">[DEBUG] 2020/10/11 03:05:17 resp.StatusCode: 200</span><br><span class="line">[DEBUG] 2020/10/11 03:05:17 resp.FunctionError: &lt;nil&gt;</span><br><span class="line">[DEBUG] 2020/10/11 03:05:17 resp.Payload: null</span><br></pre></td></tr></table></figure><ul><li>実行結果(呼び出し先)</li></ul><p>またCloudwatch Logsの呼び出されたLambda関数のログを見るとLambda関数が呼び出されていることがわかります。また呼び出し時にセットされたペイロードが引数の値として含まれていることがわかります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] 2020/10/11 03:05:17 hello invoked lambda!, model.Reader=model.Reader&#123;Message:<span class="string">"hello world!"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="3-VPC-LambdaからVPC-LambdaはInternalな通信では呼び出せない"><a href="#3-VPC-LambdaからVPC-LambdaはInternalな通信では呼び出せない" class="headerlink" title="3. VPC LambdaからVPC LambdaはInternalな通信では呼び出せない"></a>3. VPC LambdaからVPC LambdaはInternalな通信では呼び出せない</h2><p>Transit Gatewayなどを使ってオンプレとクラウドを接続する場合など、いくつかのユースケースでLambda関数をVPC Lambdaとして配置したい場合があります。VPC内にあるLambda関数から(VPC Lambda・非VPC Lambda問わず)別のLambda関数を呼び出す場合には<del>Internalの通信で呼び出せないことに注意が必要です。(2020/10/13現在)</del> VPC Endpointを使ってInternalな通信で呼び出せるようになりました。</p><p>以下のようにLambda関数をVPC内に配置する場合です。サブネットはプライベートサブネットとします。(なお通常VPC Lambda関数は可用性の観点から複数のサブネットに配置します)</p><p><img src="/images/20201112/Lambda%E3%81%8B%E3%82%89Lambda-VPCLambda.png" alt=""></p><h3 id="VPCエンドポイントがなかった従来の場合"><a href="#VPCエンドポイントがなかった従来の場合" class="headerlink" title="VPCエンドポイントがなかった従来の場合"></a>VPCエンドポイントがなかった従来の場合</h3><p>同じVPCに含まれるLambda関数であるため、インターネットを経由せずにInternalな通信でLambda関数からLambda関数を呼び出せることを期待しますが、できません。<code>InvokeWithContext</code> で呼び出すと以下のようになります。</p><p><img src="/images/20201112/image_3.png" alt=""></p><p>ログには以下のように出力されており、Lambda関数自体の呼び出しに失敗しています。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] 2020/10/11 12:21:35 hello <span class="built_in">caller</span> lambda!</span><br><span class="line">[DEBUG] 2020/10/11 12:23:35 invoke err: RequestError: send request failed</span><br><span class="line">caused by: Post <span class="string">"https://lambda.ap-northeast-1.amazonaws.com/2015-03-31/functions/invoked/invocations"</span>: dial tcp 3.112.8.132:443: i/o timeout</span><br><span class="line">invoke lambda, <span class="keyword">function</span> name = invoked: RequestError: send request failed</span><br><span class="line">caused by: Post <span class="string">"https://lambda.ap-northeast-1.amazonaws.com/2015-03-31/functions/invoked/invocations"</span>: dial tcp 3.112.8.132:443: i/o timeout: wrapError</span><br></pre></td></tr></table></figure><p>AWSのサービスをSDKで呼び出す場合は、リクエストのエンドポイントは各サービスで提供されているエンドポイントを使用します。Lambdaの場合は <a href="https://docs.aws.amazon.com/ja_jp/general/latest/gr/lambda-service.html" target="_blank" rel="noopener">AWS Lambda エンドポイントとクォータ</a> にあるように、<code>lambda.ap-northeast-1.amazonaws.com</code> となります(リージョンが <code>ap-northeast-1</code> の場合)。ログからも <code>lambda.ap-northeast-1.amazonaws.com</code> となっていることがわかります。VPC LambdaからVPC Lambdaを呼び出す場合においても、サービスが提供しているエンドポイントを経由する必要があるため、SDKでLambda関数を呼び出す場合はインターネットへ抜けるネットワーク経路が必要になります。</p><h3 id="VPCエンドポイントを使う場合"><a href="#VPCエンドポイントを使う場合" class="headerlink" title="VPCエンドポイントを使う場合"></a>VPCエンドポイントを使う場合</h3><p>2020/10/20に公開されたブログにあるように、Lambda関数をVPCエンドポイント経由で呼び出せるようになりました。東京リージョン(<code>ap-northeast-1</code>)にも対応しています。待望のアップデートです。</p><p><a href="https://aws.amazon.com/jp/blogs/aws/new-use-aws-privatelink-to-access-aws-lambda-over-private-aws-network/" target="_blank" rel="noopener">https://aws.amazon.com/jp/blogs/aws/new-use-aws-privatelink-to-access-aws-lambda-over-private-aws-network/</a></p><ul><li>構築手順</li></ul><p>VPCエンドポイントを作成します。</p><p><img src="/images/20201112/image_4.png" alt=""></p><p>VPCエンドポイントの作成が完了すると、DNS名が払い出されます。払い出されたDNS名に対してリクエストするように実装します。</p><p><img src="/images/20201112/image_5.png" alt=""></p><p>以下のようにLambda関数を呼び出すためのクライアントのConfigにエンドポイントをVPCエンドポイントから払い出されたDNS名を指定します。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func init() &#123;</span><br><span class="line">lmd = lambda.New(session.Must(session.NewSession(&amp;aws.Config&#123;</span><br><span class="line"><span class="addition">+Endpoint: aws.String("vpce-08dbf550d5e0a2b01-bcnnllkp.lambda.ap-northeast-1.vpce.amazonaws.com"),</span></span><br><span class="line">&#125;)))</span><br><span class="line">log.SetPrefix("[DEBUG] ")</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再度ビルドしてLambda関数をデプロイします。Lambda関数を実行すると、Lambda関数呼び出しが成功するようになりました。</p><p><img src="/images/20201112/image_6.png" alt=""></p><p>従来は以下の解決策に記載しているような</p><ul><li>NAT Gatewayを構築してインターネットへのアウトバウントの経路を確保する</li><li>VPC Endpointを備えたPrivateなAPI Gatewayを経由してVPC Lambdaを呼び出す</li><li>PrivateなALBを経由してVPC Lambdaを呼び出す</li></ul><p>といった回避策が必要でした。NAT Gatewayが構築できないインフラ構成の場合、どうしても複雑な構成を取らざるを得ませんでした。今回VPC EndpointがLambda関数に対応したことで、プライベートなネットワーク環境内でLambda関数を使うユースケースも増えていくのではないかと思います。</p><h3 id="解決策-1"><a href="#解決策-1" class="headerlink" title="解決策"></a><del>解決策</del></h3><p><del><strong>プライベートなサブネットからインターネットに抜ける経路を構築する</strong></del></p><p><del>SDKでLambda関数を呼び出すためにはプライベートサブネットからインターネットに抜ける経路が必要であるため、プライベートサブネットにNAT Gatewayを構築します。また、パブリックサブネットやInternet Gatewayを構築、各種セキュリティグループやルートテーブルの設定を実施する必要があります。</del></p><p><del>その他の解決策としては、VPC Endpointを備えたPrivateなAPI Gatewayを経由してVPC Lambdaを呼び出す方法や、PrivateなALBを経由してVPC Lambdaを呼び出す方法などが考えられます。このような方法の場合はVPCにInternet Gatewayを備えていなくても、間接的にVPC Lambdaを呼び出せる、というメリットがあります。インフラ構成によっては十分有用な方法です。</del></p><p>2020/10/20現在、VPCエンドポイントがLambdaに対応したため、VPCエンドポイントを使う場合、上記の解決先は不要になりました。</p><h2 id="4-デフォルトでは同期呼び出し"><a href="#4-デフォルトでは同期呼び出し" class="headerlink" title="4. デフォルトでは同期呼び出し"></a>4. デフォルトでは同期呼び出し</h2><p>Lambda関数の呼び出しは2種類あります。1つは呼び出しのレスポンスを待つ同期型、もう一つは呼び出し時は即座に呼び出し元がレスポンスが返し、後で処理が実行される非同期型です。<code>InvokeWithContext</code> を使ってLambda関数を呼び出す場合はデフォルトだと同期型として呼び出します。呼び出し先のLambda関数が重い処理でレスポンスを返すまでに時間がかかる場合は非同期型を選択する場合もあるでしょう。呼び出し方法の選択は <code>InvokeInput</code> の <code>InvocationType</code> フィールドを用いて指定します。同期型の場合は <code>lambda.InvocationTypeRequestResponse</code> (<code>RequestResponse</code> の文字列)で非同期型の場合は <code>lambda.InvocationTypeEvent</code> (<code>Event</code>)となります。</p><p>以下のようにすると非同期としてLambda関数を呼び出します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">functionName := <span class="string">"invoked"</span></span><br><span class="line">input := &amp;lambda.InvokeInput&#123;</span><br><span class="line">FunctionName:   aws.String(functionName),</span><br><span class="line"><span class="comment">// 非同期型として呼び出すためにInvocationTypeにEventを設定します。</span></span><br><span class="line">InvocationType: aws.String(lambda.InvocationTypeEvent),</span><br><span class="line">Payload:        b,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-呼び出し先のLambdaの同時実行数以上の同期呼び出しは即座にエラーが返る"><a href="#5-呼び出し先のLambdaの同時実行数以上の同期呼び出しは即座にエラーが返る" class="headerlink" title="5. 呼び出し先のLambdaの同時実行数以上の同期呼び出しは即座にエラーが返る"></a>5. 呼び出し先のLambdaの同時実行数以上の同期呼び出しは即座にエラーが返る</h2><p>Lambda関数は「<a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/configuration-concurrency.html" target="_blank" rel="noopener">同時実行数</a>」という設定を使って、同時に実行できるLambda関数に制約を付与することができます。非同期型の呼び出しの場合は、呼び出し元には成功のステータスが返されます。Lambda関数はキューイング後、遅延して実行されます。しかし、同期型として呼び出す場合、同時実行数以上の数を呼び出した場合は即座に呼び出し元に <a href="https://pkg.go.dev/github.com/aws/aws-sdk-go@v1.35.7/service/lambda#TooManyRequestsException" target="_blank" rel="noopener"><code>TooManyRequestsException</code></a> のエラーが返ってきます。</p><p><img src="/images/20201112/image_7.png" alt=""></p><p>ログには以下のように出力されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] 2020/10/11 13:01:21 hello <span class="built_in">caller</span> lambda!</span><br><span class="line">[DEBUG] 2020/10/11 13:01:27 invoke err: TooManyRequestsException: Rate Exceeded.</span><br><span class="line">&#123;</span><br><span class="line">  RespMetadata: &#123;</span><br><span class="line">    StatusCode: 429,</span><br><span class="line">    RequestID: <span class="string">"11b45c8e-3e59-4ab7-8acb-80e1bfa5931f"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  Message_: <span class="string">"Rate Exceeded."</span>,</span><br><span class="line">  Reason: <span class="string">"ReservedFunctionConcurrentInvocationLimitExceeded"</span>,</span><br><span class="line">  Type: <span class="string">"User"</span></span><br><span class="line">&#125;</span><br><span class="line">invoke lambda, <span class="keyword">function</span> name = invoked: TooManyRequestsException: Rate Exceeded.</span><br><span class="line">&#123;</span><br><span class="line">  RespMetadata: &#123;</span><br><span class="line">    StatusCode: 429,</span><br><span class="line">    RequestID: <span class="string">"11b45c8e-3e59-4ab7-8acb-80e1bfa5931f"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  Message_: <span class="string">"Rate Exceeded."</span>,</span><br><span class="line">  Reason: <span class="string">"ReservedFunctionConcurrentInvocationLimitExceeded"</span>,</span><br><span class="line">  Type: <span class="string">"User"</span></span><br><span class="line">&#125;: wrapError</span><br><span class="line">null</span><br></pre></td></tr></table></figure><p>呼び出し先のLambda関数からのレスポンスが必要な場合は同期型として呼び出すことになりますが、即座にエラーになる点は注意が必要です。</p><h2 id="6-呼び出し先のLambdaに設定されている環境変数は使える"><a href="#6-呼び出し先のLambdaに設定されている環境変数は使える" class="headerlink" title="6. 呼び出し先のLambdaに設定されている環境変数は使える"></a>6. 呼び出し先のLambdaに設定されている環境変数は使える</h2><p>APIでLambda関数を呼び出した場合、呼び出し先の環境変数が使えなくなるのでは？と思う方もいるかもしれませんが、実は環境変数もちゃんとセットされます。</p><p>呼び出し先のLambda関数のハンドラは以下のようにしておきます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handler</span><span class="params">(ctx context.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">log.Println(<span class="string">"hello invoked lambda!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// InvokeWithContextで呼び出された場合でも環境変数はセットされる</span></span><br><span class="line">logLevel := os.Getenv(<span class="string">"LOG_LEVEL"</span>)</span><br><span class="line">log.Printf(<span class="string">"logLevel: %s\n"</span>, logLevel)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>またLambda関数に以下のように環境変数 <code>LOG_LEVEL</code> を設定しておきます。</p><p><img src="/images/20201112/image_8.png" alt=""></p><p><code>InvokeWithContext</code> を使って呼び出し元のLambda関数から呼び出し先の関数を呼び出したときのログ出力は以下です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] 2020/10/11 13:28:08 hello invoked lambda!</span><br><span class="line">[DEBUG] 2020/10/11 13:28:08 logLevel: INFO</span><br></pre></td></tr></table></figure><p>想定通り環境変数から設定される変数 <code>logLevel</code> の値がセットされていることがわかります。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>GoでLambda関数からLambda関数を同期的に呼び出すときのハマりどころやTipsを紹介しました。ドキュメントを隅々まで注意深く読んでいないと、はまりがちなポイントだと思いますので、きっと皆さんの役に立つのではないかなと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIGの辻です。サーバーレスなアプリケーションを開発するときにAWS LambdaやCloud RunといったFaaSはとて
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Lambda" scheme="https://future-architect.github.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>Parcel 2.0 beta.1を試す</title>
    <link href="https://future-architect.github.io/articles/20201111/"/>
    <id>https://future-architect.github.io/articles/20201111/</id>
    <published>2020-11-10T15:00:00.000Z</published>
    <updated>2020-11-11T02:16:52.666Z</updated>
    
    <content type="html"><![CDATA[<p>以前、TypeScriptのバンドラーとしてParcelの紹介をしました。</p><ul><li><a href="https://future-architect.github.io/articles/20200319/">今あえてTypeScriptのビルド＆バンドルツールを探してみる</a></li></ul><p>その後、6月ぐらいに2.0のbeta.1がリリースされていましたので試してみました。ウェブサイトも公開されています。</p><img src="/images/20201111/parcel.png" class="img-middle-size"><p><a href="https://v2.parceljs.org/" target="_blank" rel="noopener">https://v2.parceljs.org/</a></p><p>パッケージ名も変わり、今までparcel-bundlerだったのが、parcelになります。今はベータなので、次のコマンドでインストールする必要があります。正式リリース後は<code>@next</code>は不要になるはず。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install parcel@next</span><br></pre></td></tr></table></figure><h1 id="Parcel-2-0の新機能"><a href="#Parcel-2-0の新機能" class="headerlink" title="Parcel 2.0の新機能"></a>Parcel 2.0の新機能</h1><p>ブログにまとまっています。TreeShakingの性能があがったよ、とかsource mapの生成がめちゃくちゃ早くなったよ、とあります。</p><p><a href="https://medium.com/@devongovett/parcel-2-beta-1-improved-stability-tree-shaking-source-map-performance-and-more-78179779e8b7" target="_blank" rel="noopener">https://medium.com/@devongovett/parcel-2-beta-1-improved-stability-tree-shaking-source-map-performance-and-more-78179779e8b7</a></p><p>それ以外に、.parcelrcというファイルで設定できるようになりました。なくてもデフォルトで以前と同じように動作しますが、これを使ってプラグインを細かくカスタマイズできるようになります。以前もプラグインがありましたが、プラグインでデフォルトの動作を変更できるようになります。</p><h1 id="TypeScript機能の強化"><a href="#TypeScript機能の強化" class="headerlink" title="TypeScript機能の強化"></a>TypeScript機能の強化</h1><p>TypeScriptの開発でいうと、今までは@babel/preset-typescriptで型情報を切り落として出力するだけだったので、確かにビルドはできるだけど型チェックができませんでした。.parcelrcで設定することで、本家のtscを使うことでtsconfig.jsonで設定が必要な追加機能をすばやく導入したり、型チェックを有効化できるようになります。</p><p>tscを使うには次の設定を使います。</p><figure class="highlight json"><figcaption><span>.parcelrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: <span class="string">"@parcel/config-default"</span>,</span><br><span class="line">  <span class="attr">"transformers"</span>: &#123;</span><br><span class="line">    <span class="attr">"*.&#123;ts,tsx&#125;"</span>: [<span class="string">"@parcel/transformer-typescript-tsc"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>.parcelrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: <span class="string">"@parcel/config-default"</span>,</span><br><span class="line">  <span class="attr">"validators"</span>: &#123;</span><br><span class="line">    <span class="attr">"*.&#123;ts,tsx&#125;"</span>: [<span class="string">"@parcel/validator-typescript"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>後者の場合、tsconfig.jsonにも変更が必要な模様。</p><figure class="highlight json"><figcaption><span>tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"include"</span>: [<span class="string">"src/**/*"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>型チェックを試してみました。これの実行時には<a href="https://www.npmjs.com/package/@parcel/validator-typescript" target="_blank" rel="noopener">@parcel/validator-typescript</a>のインストールが必要ですが、latestでデフォルトでインストールされるalpha-3はエラーになるので、最新のnightlyを入れます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install @parcel/validator-typescript@2.0.0-nightly.430</span><br></pre></td></tr></table></figure><p>やった！これが見たかった！</p><p><img src="/images/20201111/Screen_Shot_2020-10-22_at_8.59.26.png" alt=""></p><h1 id="API-Proxy機能の導入"><a href="#API-Proxy機能の導入" class="headerlink" title="API Proxy機能の導入"></a>API Proxy機能の導入</h1><p>あとは、APIサーバーのプロキシも設定ファイルできるようになります。ファーストパーティクッキーを使ったり、corsなしでウェブにアクセスするために同じオリジンで動作させたいということがあります。</p><p>本番環境はCDNのリダレクト機能とかでAPIサーバーと静的HTMLを同じオリジンで提供されているように見せることができても、開発環境ではフロントエンドのビルドサーバーとAPIサーバーを別のポートで動かしているという人も多いのではないでしょうか。そのためだけにAPIサーバーにローカル開発用のモードを作るのも面倒ですし、12 FACTORS APPに反するでしょう。</p><p>APIサーバープロキシ機能を使って、Parcelの開発サーバーから特定のパス以下をローカルのAPIサーバーにフォワードすると便利です。</p><p>試しに自分のオリジンの/api以下に向けてリクエストを飛ばすようなコードを書いてみます。リクエスト先は今Parcelの開発サーバーが稼働しているlocalhost:1234です。</p><figure class="highlight js"><figcaption><span>tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    (<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">'/api/health'</span>);</span><br><span class="line">      <span class="keyword">if</span> (res.ok) &#123;</span><br><span class="line">        <span class="built_in">console</span>.info(<span class="keyword">await</span> res.json());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>test<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>サーバーはlocalhost:3000で稼働させます。go run main.goで起動します。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/go-chi/chi/v4"</span></span><br><span class="line"><span class="string">"github.com/go-chi/chi/v4/middleware"</span></span><br><span class="line"><span class="string">"github.com/rs/zerolog"</span></span><br><span class="line"><span class="string">"github.com/rs/zerolog/log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := chi.NewRouter()</span><br><span class="line">r.Use(middleware.Logger)</span><br><span class="line">r.Get(<span class="string">"/api/health"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">w.Write([]<span class="keyword">byte</span>(<span class="string">"ok"</span>))</span><br><span class="line">&#125;)</span><br><span class="line">zerolog.SetGlobalLevel(zerolog.InfoLevel)</span><br><span class="line">log.Info().Int(<span class="string">"port"</span>, <span class="number">3000</span>).Msg(<span class="string">"start watching"</span>)</span><br><span class="line">http.ListenAndServe(<span class="string">":3000"</span>, r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後にproxy設定を書きます。パスのリライトなどもできますが、いろいろ面倒なので個人的にはフロントから見えているパスとサーバーのパスは一致させるようにしてリライトしないようにしています。</p><figure class="highlight json"><figcaption><span>.proxyrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"/api"</span>: &#123;</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"http://localhost:3000/"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>起動してみると、きちんと:1234へのリクエストが:3000にプロキシされていることがわかります。</p><p><img src="/images/20201111/Screen_Shot_2020-10-22_at_9.36.47.png" alt=""></p><p>今までは<a href="https://stackoverflow.com/questions/53902896/is-there-a-way-to-proxy-requests-in-parcel-as-in-webpack" target="_blank" rel="noopener">Parcelのビルド機能とProxyの両方が入ったウェブサーバーを実装</a>するしか手がなかったのと比べると、とても簡単になりました。</p><h1 id="トラブルの回避"><a href="#トラブルの回避" class="headerlink" title="トラブルの回避"></a>トラブルの回避</h1><p>さて、以上の機能は問題なく動作していますが、まだまだベータですし、いろいろトラブルもありました。</p><h2 id="問題があったらまずは検索しよう"><a href="#問題があったらまずは検索しよう" class="headerlink" title="問題があったらまずは検索しよう"></a>問題があったらまずは検索しよう</h2><p>かなり活発に開発されていてユーザー数も多いので、issueにいろいろ報告されていたり、回答されていたりもします。エラーメッセージで雑にリポジトリを検索するだけでもだいたい回避できるんじゃないかと思います。</p><p><a href="https://github.com/parcel-bundler/parcel" target="_blank" rel="noopener">https://github.com/parcel-bundler/parcel</a></p><h2 id="Parcel-1は削除しよう"><a href="#Parcel-1は削除しよう" class="headerlink" title="Parcel 1は削除しよう"></a>Parcel 1は削除しよう</h2><p>同名のシリアライザが登録されていますよ、的なエラーメッセージが出ました。Parcel 1のパッケージのparcel-bundlerを削除して、node_moduelsと.cacheを消してインストールしなおしました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Name already registered with serializer</span><br></pre></td></tr></table></figure><h2 id="TypeScriptのビルドでエラーが出る"><a href="#TypeScriptのビルドでエラーが出る" class="headerlink" title="TypeScriptのビルドでエラーが出る"></a>TypeScriptのビルドでエラーが出る</h2><p>上記でもすでに書きましたが、2.0.0-nightly.430を入れたら直りました。コード上は修正済みでも、まだリリースされていなくて、バージョン指定で入れ直さないと解決しないことがたまにあります。エラー報告の前に、最新のパッケージで試してみましょう。</p><h2 id="アプリケーションの場合はpackage-jsonのmainは削除しよう"><a href="#アプリケーションの場合はpackage-jsonのmainは削除しよう" class="headerlink" title="アプリケーションの場合はpackage.jsonのmainは削除しよう"></a>アプリケーションの場合はpackage.jsonのmainは削除しよう</h2><p>Parcel2は、package.jsonの外部向けの情報を元に、ビルドの出力先を変更します。package.jsonのmainがあればnpm installしたときに読み込めるように、出力先をそのパスに自動設定しますし、typesがあればTypeScriptの型情報もそこに出力します。気が利いたやつです。</p><p>しかし、npm init -yでデフォルトで生成するpackage.jsonには<code>&quot;main&quot;: &quot;index.js&quot;</code>という項目があります。アプリケーションの場合、エントリーポイントはHTMLファイルにしているでしょうから、これと拡張子が合わない、というエラーが発生します。この項目を削除しておきましょう。</p><p><a href="https://github.com/parcel-bundler/parcel/issues/3500" target="_blank" rel="noopener">https://github.com/parcel-bundler/parcel/issues/3500</a></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>現時点で、多少の問題はあるかもしれませんが、十分に使えるかな、と思っています。少なくとも趣味コード開発には十分だし、1.0で不満だった型エラーがチェックできない、API Proxyを立てるのが不便という2大ポイントが解決されるのが個人的にはとてもありがたいです。</p><p>使ってみると多少不便なところとか問題が発生するかもしれませんし、使ってフィードバックすると良いのではないかと思います。僕もさっそくドキュメントの修正のPRを出しました。その際も、なるべく手元でできることはして、すでに報告されているのと同じものを報告して開発者の手を煩わせないように、ここで軽く紹介したようなトラブルシュートをしてみると良いかと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前、TypeScriptのバンドラーとしてParcelの紹介をしました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200319/&quot;&gt;今あえてTypeScriptのビルド＆バンド
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="TypeScript" scheme="https://future-architect.github.io/tags/TypeScript/"/>
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="Parcel" scheme="https://future-architect.github.io/tags/Parcel/"/>
    
  </entry>
  
  <entry>
    <title>GoのWebアプリ開発でフラットパッケージにした話</title>
    <link href="https://future-architect.github.io/articles/20201109/"/>
    <id>https://future-architect.github.io/articles/20201109/</id>
    <published>2020-11-08T15:00:00.000Z</published>
    <updated>2020-11-26T01:37:54.209Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20201109/carton-4399301_1280.png" class="img-middle-size"><p><a href="https://pixabay.com/ja/users/dapple-designers-7874104/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4399301" target="_blank" rel="noopener">digital designer</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4399301" target="_blank" rel="noopener">Pixabay</a>からの画像</p><p><strong>2020/11/13 「やってみてよかったことまとめ」、「やってみて困ったこと」、「外部モックサービスを使ったユニットテストの未来」の章を追記</strong><br><strong>2020/11/18 「やってみてよかったことまとめ」にSNSでもらったフィードバック内容を追記</strong></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG 真野です。<a href="https://future-architect.github.io/articles/20201026/">秋のブログ週間連載</a>の第9弾です。</p><p>1年弱ほどGo言語でWebAPIアプリケーション開発を行っていますが、かなり割り切った構成・テスト方針を採用しました。そろそろ1年弱になり機能開発も比較的落ち着き、保守運用フェーズの割合も徐々に増えてきた頃合いなので、やったこと・学び・反省といった振り返りを共有します。</p><h1 id="Goのパッケージ"><a href="#Goのパッケージ" class="headerlink" title="Goのパッケージ"></a>Goのパッケージ</h1><p>Goのパッケージ構成については澁川さんの以下の記事が社内でよく引用されます。</p><ul><li><a href="https://future-architect.github.io/articles/20200528/">あなたのGoアプリ/ライブラリのパッケージ構成もっとシンプルでよくない？</a></li></ul><p>記事でも触れられていますが、GoでWebAPIで開発するときのパッケージは <a href="https://github.com/golang-standards/project-layout" target="_blank" rel="noopener">golang-standards/project-layout</a>や、<a href="https://postd.cc/golang-clean-archithecture/" target="_blank" rel="noopener">Goでクリーンアーキテクチャを試す</a> の記事を目にすることが多いと思いますが、今回はこれを採用しませんでした。</p><p>代わりに澁川さん記事に影響を受けて色々削ぎ落としつつ、開発スタイルも色々と割り切りました。割り切りはトレードオフなので当然、対象ドメイン・規模・期間・要員などに依存してその都度の正解は変わってくると思います。一つの実験結果として見てもらえれば幸いです。</p><h1 id="採用したパッケージ構成"><a href="#採用したパッケージ構成" class="headerlink" title="採用したパッケージ構成"></a>採用したパッケージ構成</h1><p><a href="https://future-architect.github.io/articles/20200528/">澁川さん記事</a>でいう、いわゆる “最小構成” を採用しました。これを試してみたという記事は見当たらなかったのでレア度が高い記事かもしれません。チーム規模は3-5人程度がコンスタントに開発していました。内部ではこの構成をフラットパッケージと呼んでいます。</p><ul><li>実行ファイルは <code>cmd</code> フォルダ内にアプリケーション（今回はAWS LambdaとローカルでポートをListenするサーバアプリの2種類）<ul><li>2Wayな起動方法については、<a href="https://future-architect.github.io/articles/20200927/">辻さんの記事</a>や<a href="https://future-architect.github.io/articles/20200630/">この記事</a>に詳細説明があるのでぜひ確認ください</li></ul></li><li>自動生成系は generate の略で <code>gen</code> 配下に出力。アプリ本体と分離するためこちらはあえて分離</li><li><code>docs</code>, <code>testdata</code> などを除くと、後はフラット構成です</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;projectroot&gt;           <span class="comment"># projectrootパッケージ</span></span><br><span class="line">├── cmd</span><br><span class="line">│   ├── lambda          <span class="comment"># lambda用のmainパッケージ</span></span><br><span class="line">|   |   └── main.go</span><br><span class="line">│   └── server          <span class="comment"># ローカル起動用のmainパッケージ</span></span><br><span class="line">|   |   └── main.go</span><br><span class="line">├── gen                 <span class="comment"># 自動生成ファイル(go-swaggerの生成物)</span></span><br><span class="line">│   ├── models</span><br><span class="line">│   └── restapi</span><br><span class="line">├── docs                <span class="comment"># ドキュメント(Markdown, draw.io, PlantUML, etc)</span></span><br><span class="line">├── testdata            <span class="comment"># 単体テスト用のデータ</span></span><br><span class="line">|</span><br><span class="line">├── error.go                 <span class="comment"># 共通コード</span></span><br><span class="line">├── db.go                    <span class="comment"># 共通コード</span></span><br><span class="line">├── log.go                   <span class="comment"># 共通コード</span></span><br><span class="line">├── article_handler.go       <span class="comment"># article機能の制御コード</span></span><br><span class="line">├── article_handler_test.go  <span class="comment"># テストコード</span></span><br><span class="line">├── article_model.go         <span class="comment"># article機能のモデルコード</span></span><br><span class="line">├── article_model_test.go    <span class="comment"># テストコード</span></span><br><span class="line">├── article_db.go            <span class="comment"># article機能の永続化コード</span></span><br><span class="line">├── author_handler.go        <span class="comment"># article機能の制御コード</span></span><br><span class="line">├── author_handler_test.go   <span class="comment"># テストコード</span></span><br><span class="line">├── author_model.go          <span class="comment"># article機能のモデルコード</span></span><br><span class="line">├── author_model_test.go     <span class="comment"># テストコード</span></span><br><span class="line">├── author_db.go             <span class="comment"># article機能の永続化コード</span></span><br><span class="line">├── (省略)</span><br><span class="line">├── device_handler.go        <span class="comment"># device機能の制御コード</span></span><br><span class="line">├── device_handler_test.go   <span class="comment"># テストコード</span></span><br><span class="line">├── device_model.go          <span class="comment"># device機能のモデルコード</span></span><br><span class="line">├── device_model_test.go     <span class="comment"># テストコード</span></span><br><span class="line">└── device_db.go             <span class="comment"># device機能の永続化コード</span></span><br></pre></td></tr></table></figure><p>パット見、 <code>&lt;projectroot&gt;</code> の直下に Goファイルが増えすぎない？と思われた方もいると思いますが、そのとおりです。1年くらいで <code>ls -l | grep .go | wc -l</code> すると50ファイル弱と育っていました。</p><p>また、このパッケージ構成を採用するにいたり、同時にいくつかの <strong>割り切り</strong> を行っています。</p><h2 id="割り切り構成サマリ図"><a href="#割り切り構成サマリ図" class="headerlink" title="割り切り構成サマリ図"></a>割り切り構成サマリ図</h2><p>今回の構成図を示します。</p><p>同一パッケージとはいえ、Handler, Model, DBが存在します。それぞれファイル名の命名で縛り責務を分離しています。</p><img src="/images/20201109/flatpackage_go.png"><p>いくつか構成のポイントをあげます。</p><ul><li>Modelは独立させる</li><li>Handler, DBはModelを利用する（Modelを生成したり、関数の引数に取る）</li><li>DBのコードにのみデータアクセスライブラリをimportする（sqlパッケージやaws-sdkのコードはDB層にしか存在しないようにする）</li><li>Handlerはフレームワークの求めるStructを引数や戻り値に取る</li></ul><p>続いて割り切りポイントについて各レイヤーごとに説明していきます。</p><h2 id="dbインターフェースを作らないこと"><a href="#dbインターフェースを作らないこと" class="headerlink" title="dbインターフェースを作らないこと"></a>dbインターフェースを作らないこと</h2><p>パッケージ構成とは別の話になりますが、永続化層などをインターフェース化 &amp; 単体テストをモック化で素早くサイクルを回せるようにすることは良いプラクティスだと思います。しかし今回は採用しませんでした。理由は以下です。</p><ul><li>データ層をMock化すると、Mockコード開発の手間がある<ul><li>慣れれば余裕だと思いますが、毎月新規参画者が入れ替わる環境だったので手間を減らしたかった</li></ul></li><li>Mockでは上手く動いても、実サービス（今回だとDynamoDBや、過去の経験だとRDB）に接続すると動かないケースが過去あった<ul><li>実質的にモック環境と実サービス環境の2種類の動作確認が必要となり、すこし手間だなと感じた</li></ul></li><li><a href="https://github.com/localstack/localstack" target="_blank" rel="noopener">LocalStack</a> という外部モックサービスをフル活用することで、ローカルに閉じてテストは可能<ul><li>起動の手間はdocker-compose化することで抑えられる</li><li>結局モック用のデータを作るのと同様のテストデータ登録が発生するが、awscliなど永続化サービスの機能を経由することで、チームがデプロイ後の操作に早めに慣れることができる</li></ul></li></ul><p>これをやってみた感想を上げておきます（薄々やる前からわかることですが..）</p><ul><li>❌ LocalStackのテストデータ登録・削除がボトルネックになる<ul><li>外部サービスにテストが依存するので、並列でテスト実行が行えず make test待ちになることしばしばです（現在4分程度かかります）</li><li>go test -v -run CreateArticleTest などと開発対象を絞って実行しますが、デグレ防止で全テスト実行したいときは待ち時間が億劫になります。開発規模によっては部分的にモック化するとか、LocalStackのテストテーブルをテストごとに作成するなど工夫が必要になってくるかなと思います</li></ul></li><li>△ そこそこリソースがあるPCじゃないと、LocalStack起動が重い。メモリ16GBあれば問題なしですが、8GBとかだと厳しいと思います<ul><li>現在の社内支給PCだと問題にならなかったですが、4,5年くらい前だとスペック的に厳しい人もいたかも</li></ul></li><li>◎ インターフェースを作らない≒handlerとdb の紐付けは1:1になるので、mainパッケージなど外部からのインジェクションが不要になり、コードがスッキリする（体感的に何割か記述量が減って激減、見通しが良くなりました）</li></ul><h2 id="handler-db-はStruct化しない"><a href="#handler-db-はStruct化しない" class="headerlink" title="handler, db はStruct化しない"></a>handler, db はStruct化しない</h2><p>これもパッケージ構成とは別の話になりますが、handler, dbはStruct化しませんでした。あくまで呼び出す関数だけそのまま公開しています</p><p>例えばDB層は以下のような構成です。</p><figure class="highlight go"><figcaption><span>xxx_db.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> &lt;projectroot&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Store</span><span class="params">(ctx context.Context, a *Article)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="comment">// 略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetByID</span><span class="params">(ctx context.Context, id <span class="keyword">int64</span>)</span> <span class="params">(Article, error)</span></span> &#123;</span><br><span class="line">  <span class="comment">// 略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Update</span><span class="params">(ctx context.Context, ar *Article)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="comment">// 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DynamoDBなどのコネクションなどはどこで扱うかですが、db.goで初期化しています。</p><figure class="highlight go"><figcaption><span>db.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> &lt;projectroot&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db = dynamodb.New(session.Must(session.NewSession(&amp;aws.Config&#123;</span><br><span class="line">Region: aws.String(<span class="string">"&lt;AWS Region&gt;"</span>),</span><br><span class="line">&#125;)))</span><br></pre></td></tr></table></figure><p>この変数dbを、各xxx_db.go は直接参照しています</p><figure class="highlight go"><figcaption><span>xxx_db.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> &lt;projectroot&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Store</span><span class="params">(ctx context.Context, id <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  av, err := dynamodbattribute.MarshalMap(v)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"dynamodb attribute marshalling map: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">i := &amp;dynamodb.PutItemInput&#123;</span><br><span class="line">Item:      av,</span><br><span class="line">TableName: aws.String(<span class="string">"&lt;table name&gt;"</span>),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> _, err = db.PutItemWithContext(ctx, i); err != <span class="literal">nil</span> &#123;  # ★同一パッケージにあるdbを直接利用する</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"dynamodb put item: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>いわゆる 変数db はグローバル変数のように影響度が大き過ぎるかもしれませんが、実用上は非常に楽でした。</p><p>今までは変数dbの初期化をmainパッケージかそれに近いところで行い、<code>articleDB := NewArticleDB(db)</code> のような初期化を行っていましたが、そもそもDB層のインターフェースも辞めたのでStructを作る必要もなくなり、上記のような初期化コードもなくなり、さらにコード量が減りました。</p><p>これをやってみた感想を上げておきます。</p><ul><li>❌テストごとにdbを切り替えたいといった柔軟なことはやりにくい<ul><li>dbを切り替えると、アプリケーションの永続化層の全てが影響を受けるためです</li><li>例えば、あえて接続NGになるdbを設定して、異常系のテストを行うなどは行いにくいですし、今は行えていません</li></ul></li><li>◎永続化層の機能追加が、≒関数追加になるので、思考が楽<ul><li>関数を追加するための、Structを作って初期化して～などがなくなるで、思考のオーバーヘッドは楽になりました<ul><li>過去はこの辺を自動化するgeneratorを作っていましたが、それすら叩かなくて良いのも良いです</li></ul></li></ul></li><li>その他<ul><li>変数dbを書き換えたりといった、お作法破りの開発者は現れなかった</li><li>テスト時はLocalStack上のDynamoDB Localに代入するだけで楽（以下に例をあげます）</li></ul></li></ul><figure class="highlight go"><figcaption><span>article_handler_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> &lt;projectroot&gt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">db = dynamodb.New(session.Must(session.NewSession(&amp;aws.Config&#123;   <span class="comment">// そのまま書き換えるだけ</span></span><br><span class="line">Endpoint: aws.String(<span class="string">"http://localhost:4566"</span>),</span><br><span class="line">Region:   aws.String(endpoints.ApNortheast1RegionID),</span><br><span class="line">&#125;)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Usecase層を無くした"><a href="#Usecase層を無くした" class="headerlink" title="Usecase層を無くした"></a>Usecase層を無くした</h2><p>xxx_handler.go はフレームワークにロックインされる（echo, go-swaggerなどのパッケージが入るという意味）なので、usecaseという安全地帯を作ろうという考えも最初はありましたが、結局は廃しました。理由は以下です。</p><ul><li>フレームワークを切り替えるときは別途工数を取るとことで開発オーナーと合意</li><li>Goはhttptestなど標準ライブラリのテスト用のパッケージが存在し、仮にフレームワークを乗り換えたとしてもadaptorコードを書けばなんとか動きそう<ul><li>httptestを上手く使えば思ったよりポータブルなテストコードが作れた</li></ul></li><li>echo, go-swaggerなどGoのWebアプリケーションフレームワークは、handlerのテストをサポートしていて、テスタビリティはusecaseを切っても変わらない</li><li>メンバーがusecaseを利用した開発に慣れている訳でもない</li></ul><p>ここまでをまとめると、<code>handler(Endpoint) --&gt; usecase --&gt; repository</code> といったオーソドックスなスタイルではなく、 <code>handler(Endpoint) --&gt; dao的な何か</code> という流れになりました。</p><p>こうすると、usecaseを再利用するような場合に困るんじゃないのと思います。困るときも多いのですが対策としてはなるべく model にビジネスロジックを寄せるという対応を取っています。下手にusecaseが存在しないので、modelはよく真ん丸と天高く馬肥える秋です。</p><h1 id="やってみてよかったことまとめ"><a href="#やってみてよかったことまとめ" class="headerlink" title="やってみてよかったことまとめ"></a>やってみてよかったことまとめ</h1><p>すでにいくつか書いていますが、改めてよかった点をまとめます。</p><ul><li><strong>コード量が激減した</strong>（パッケージ、Struct、インターフェースを無くした効果）<ul><li>ボイラープレートコードが激減しました</li><li>当然、見通しもかなり良くなりまし、新規参画者の学習コストも下がりました</li><li>規模にもよりますが、ファイル数が100未満なら次も迷わずフラットパッケージ構成を採用したいと思っています<ul><li>.goのファイル数が200,300になるとサービスを分割しそうなので、サービス分割ポリシーと合わせればフラットパッケージでまず考えるのは悪くない選択肢かもしれません</li></ul></li></ul></li><li>パッケージでレイヤーを無くしただけで、論理的なレイヤーがあるため、可読性はそこまで下がらなかった（コード規模にも寄りそうですが）<ul><li>パッケージを切ったとしてもどのみち責務を守っているかのチェックは必要なので、さほどやることは変わらないという表現が正しいかもしれません</li></ul></li><li>テスト用のMockを手作りすることに比べて、インテグレーションのトラブルは無くなった<ul><li>副次的にAWS CLIなどの操作にメンバー全員が早期になれることができた</li><li>Mockコードをgo generate することもないので、開発規約が減った</li></ul></li><li>ある意味、よくも悪くも初心者のメンタルモデルにとって “自然な構成” であるため、学習コストが低く、即戦力化しやすい<ul><li>永続化コードの追加や呼び出しは本当にシンプル</li></ul></li></ul><h1 id="やってみて困ったこと"><a href="#やってみて困ったこと" class="headerlink" title="やってみて困ったこと"></a>やってみて困ったこと</h1><ul><li>関数宣言で、名前空間がかぶりがち<ul><li>Handlerで CreateArticle という関数を宣言したとき、 DBにも CreateArticle という関数を宣言しがちです。同一パッケージなのでバッティングするのは少し困るときがありました。今回はHandler側はHTTP Method名を先頭に付与するルールなので、 handlerはPostArticle、DBは CreateArticleと住み分けることにしました</li></ul></li><li><code>testdata</code> はフラットにしない方が良い<ul><li>実はtestdata以下のファイルもフラットにしていましたが、そちらは1テスト関数にN個のデータを作るので、現在150ファイル超えです</li><li>120~130ごろから探すのが面倒だなと思ってきます。そのため、testdata配下はフォルダを切った方が良いと思います</li></ul></li><li>なるべくmodelにロジックを寄せる（テストを寄せる）<ul><li>テストケースが増えるとどうしても実行時間が増えるのでビジネスロジックはmodel側に寄せる方針になりました</li></ul></li><li>handler, db, model内でのみ利用する関数を小文字始まりにするなど命名規約は最初に作ったほうが良さそう<ul><li>全て同一パッケージなので、関数のパッケージPrivateにしてもアクセスできてしまうためです</li></ul></li></ul><h1 id="外部モックサービスを使ったユニットテストの未来"><a href="#外部モックサービスを使ったユニットテストの未来" class="headerlink" title="外部モックサービスを使ったユニットテストの未来"></a>外部モックサービスを使ったユニットテストの未来</h1><p><a href="https://gocloud.dev/" target="_blank" rel="noopener">gocloud.dev</a>のGo CDKのような、外部アクセス周りのインターフェースを統合したソリューションを上手く使うと今回LocalStackを用いた苦しみは減ってくると思います。GoCDKではDynamoDBのようなKVSにアクセスを抽象化してくれますが、メモリアクセス版に切替可能です。コレクションとかテーブルにsuffixをつけて並行にテストを実行するとおそらく今の100倍くらいテスト時間を高速化できるのでは？と考えています。</p><p>Go CDKについては過去の連載があります。</p><ul><li><a href="https://future-architect.github.io/articles/20191113/">Go Cloud#3 Go CloudのDocStoreを使う</a></li></ul><p>私もこのあたりでDynamoDBアクセスについて調査しました。</p><ul><li><a href="https://future-architect.github.io/articles/20200228/">DynamoDB×Go#3 Go CDKでどこまでいける？機能を調べてみた</a></li></ul><p>単体テストの自動実行はメモリモード、通常の開発時はLocalStackにアクセスするなどの使い分けができると未来が広がりますね。</p><img src="/images/20201109/flatpackage-go.png"><p>Go CDKのDocStoreのインターフェースは少しクセがあるので乗りこなすまで準備が必要そうですが、それによって得られるメリットはモックコードを利用せずユニットテストの高速化が可能ということなので、次のチャレンジに期待ください。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>簡単にまとめです。</p><ul><li>.goのファイル数が100未満であれば、フラットパッケージ、オススメです</li><li>パッケージもシンプルにして、同時に極力Struct, Interfaceを排除した</li><li>handler(Endpoint) –&gt; usecase –&gt; repositoryといった流れで制御フローが流すことが世の中多そうだが、endpoint側にロジックを実装、repositoryは無くして直接db層の関数を呼び出した。初期化はdb.goにdbのclientを初期化してそれを使う</li><li>modelになるべくロジックを寄せたた</li><li>testはhandlerの関数単位で行う</li><li>DB層をインターフェースを経由せずに扱うことはLocalStackなど外部モックサービスを利用すれば問題にならなかった</li></ul><p>上記によって色々柔軟性は失われたかもしれませんが、少なくてもコード量はグッと減り開発スピードの向上に寄与できるかもしれません。<br>最後まで読んでもいただき、ありがとうございました！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20201109/carton-4399301_1280.png&quot; class=&quot;img-middle-size&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/dapple-designers-7874
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="設計" scheme="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/"/>
    
      <category term="秋ブログ週間" scheme="https://future-architect.github.io/tags/%E7%A7%8B%E3%83%96%E3%83%AD%E3%82%B0%E9%80%B1%E9%96%93/"/>
    
  </entry>
  
  <entry>
    <title>フューチャーOSS推進タスクフォース始めます</title>
    <link href="https://future-architect.github.io/articles/20201107/"/>
    <id>https://future-architect.github.io/articles/20201107/</id>
    <published>2020-11-06T15:00:00.000Z</published>
    <updated>2020-11-13T02:07:41.800Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20201107/hacker-1569744_1920.jpg" alt=""></p><p><a href="https://pixabay.com/ja/users/genesis3g-360463/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1569744" target="_blank" rel="noopener">Génesis Gabriella</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1569744" target="_blank" rel="noopener">Pixabay</a>からの画像</p><p><strong>2020/11/13修正: Vuls、Urushiの公開年を修正</strong></p><h1 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h1><p>フューチャーOSS推進タスクフォースを開始しました。実は7月に発足してから8月には活動の骨子が固まり、タスクフォース自体は始動していましたが、中身を作ってから告知した方が具体性があってブレも無くなり良いのでは？という話があり、少しタイミングをずらしてのご報告です。</p><p>何を目的とし、何をやっていくつもりなのかこれから説明していきます。活動ははじめましたが。まだまだ手探りな状態ですので運用などなどでアイデアがあればフィードバックをいただきたいのと、”思い”を共にできる方がいらしたら、どこかの勉強会などで意見公開できればなと思います。</p><h1 id="OSSとフューチャーの関わり"><a href="#OSSとフューチャーの関わり" class="headerlink" title="OSSとフューチャーの関わり"></a>OSSとフューチャーの関わり</h1><p>最初に今までのフューチャーとOSSの関わりについて説明します。</p><p>フューチャーは<a href="https://github.com/future-architect/vuls" target="_blank" rel="noopener">Vuls</a>, <a href="https://github.com/future-architect/cheetah-grid" target="_blank" rel="noopener">cheetah-grid</a>, <a href="https://github.com/future-architect/uroborosql" target="_blank" rel="noopener">UroboroSQL</a>を初め多くのプロダクトを公開してきました。</p><p>私が知る限りの年表は、フューチャー最初のOSSは2006年のRuby製非同期メッセージングの<a href="https://gihyo.jp/dev/feature/01/ap4r" target="_blank" rel="noopener">AP4R</a><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>です。2016年にVuls、同年に<a href="http://future-architect.github.io/urushi/ja-jp/">Urushi</a>というUIフレームワーク、2017年にUroboroSQLが公開され、同年に<a href="https://future-architect.github.io/articles/20170327/">OSSカンファレンス</a>に登壇&amp;出展しました。この頃から<a href="https://github.com/ota-meshi" target="_blank" rel="noopener">太田さん</a>がeslint-plugin-vueのコミッターになったりVue.jsチームメンバーになってます。現在は大小様々なライブラリやツールが公開され、2020/08/15時点では31（技術ブログやForkされたものは除く）のリポジトリが公開されています。</p><p>業務中であってもOSS活動は推奨されていて、テクノロジー部署を率いる宮原さん<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>とかは使っていたOSSがバグっていたら直してPull Request出したら？って言ってくれています。フューチャーがコアテクノロジーであると認識したモノに対しては、特に強くコントリビュートしてきています。上から言われなくてもコントリビュートする人は昔から一定数いて、思い出で深いのは、新人のときにfluentdのプラグインを探していて「これだ！」って思ったコードを書いていたAuthorが、日本人どころか隣に座っていた先輩だったって出来事です。他にもアイデアは面白いけどまだまだバギーなプロダクトをいつの間にか社内で実戦投入していて、見つけたバグをせっせとIssueに起票したり直せるのは直したりしている同期もいました。最近は色々なコミッターな人が入社されていて刺激をもらっています。</p><p>すでに色々活動はしてはいますが、さらに動きを加速させ、より広く深くOSSに貢献していくため、OSS推進タスクフォースを立ち上げました。</p><h1 id="OSSへの貢献とは"><a href="#OSSへの貢献とは" class="headerlink" title="OSSへの貢献とは"></a>OSSへの貢献とは</h1><p>OSSへの貢献と一口に言っても様々な活動があると認識しています。よく、Issueを上げてコードを読んでバグを直して..というイメージが強いですが、広い意味では様々な活動が含まれます。</p><ul><li>OSSのドキュメントを翻訳する、サンプルコードを公開といったブログ記事を書く</li><li>メーリングリストなどで仕様策定についてディスカッションする</li><li>OSSの利用実績を登壇で発表する</li><li>OSSを推進するコミュニティへの運営や、スタッフ手伝い、会場貸し出し、スポンサード</li><li>StackOverFlowやTeratailなどの質問サイトに回答する</li><li>他のだれかのIssueに回答する</li><li>etc.</li></ul><p>どれが偉いとか順位付けは無く、やれる範囲で貢献していくことが世の中を良くすることに繋がると考えています。</p><p>今まで外部露出も多く目立っていたのは技術ブログや勉強会でナレッジ公開していくことでしょう。登壇発表やブログ公開は広く見ればOSSエコシステムを形成する一種で、今後もドンドン推進します。今回のOSS推進タスクフォースでは、よりコードにより直接的な貢献を増やしきたいと考えています。</p><p>こちらの記事で、藤野さんが書いてあるような動きが理想の一つだと考えています。</p><ul><li><a href="https://future-architect.github.io/articles/20201106/">OSSコミュニティへのフィードバック</a></li></ul><h1 id="具体的な活動"><a href="#具体的な活動" class="headerlink" title="具体的な活動"></a>具体的な活動</h1><p>今、積極的に考えている活動は以下4つです。</p><h2 id="1-Bugバスター祭り"><a href="#1-Bugバスター祭り" class="headerlink" title="1. Bugバスター祭り"></a>1. Bugバスター祭り</h2><p>今までフューチャー技術ブログで癖があるツールやライブラリの回避方法を紹介した記事がいくつかもありますが、<strong>紹介すると同時にそのコードを直す</strong>ということを行います。<strong>コードで直接的な貢献を志向</strong>しています。Pull Requestにも色々な種類があるかと思います。</p><ol><li>ドキュメントやコメントなどのtypo</li><li>Bug Fix</li><li>新規機能の追加</li></ol><p>今回の活動は2の数を増やしたいと考えています。対象のプロダクトを選定し、<strong>Bugバスター祭り</strong> という名前の企画を随時開催して、チームとして楽しみながら貢献していこうと考えています。こうしか企画を通してコントリビュータを増やすことが活動の主軸の一つです。</p><p>Bugバスター祭りが出てきた理由ですが、OSSでBug Fixを行なうときの難しいところの１つに、Bugを見つけるという事があると思います。このBugバスター祭りはすでにIssueとして報告されているBugや機能要望をみんなで再現・実装していこうという企画のため、OSSを使い倒していないメンバーでも比較的とっつきやすいのでは？と考えています。まずはこういったイベントを何回かこなし、OSS貢献の能力を底上げしていきたいと思っています。</p><p>Bugバスター祭りの対象プロダクト選定は、適度にIssueがある・PullRequestが放置されていない・今チームで利用している（または利用しそう）といったモノで考えています。すでにいくつか候補が上がっており、実施結果はこのブログにて報告できると良いなと思っています。</p><p>このBugバスター祭りの話をすると、<a href="https://github.com/ota-meshi" target="_blank" rel="noopener">太田さん</a>から以下のようなコメントを貰いました。</p><blockquote><p>OSSに貢献するといえば、Issue書くPullRequest開く、はよく言われますが、他ユーザーのIssueにコメントすることでもコミュニティに貢献できます。具体的には、質問Issue見て解決策を知ってたら「それこうしたらうまくいくよ」って書くとかです。Issue書いた人は助かりますし、その後も同じ問題に遭遇した人も解決策を見つけて助かります。『君の解決策は自分の問題も解決した！ありがとう！』って書いてくれたりもします。感謝されたら自分も嬉しいですし、コミュニティ全体の助けになっているとわかるので嬉しいです。</p><p>僕は(eslint-plugin-vueの)メンバーになる前、PullRequestもしていましたが、当時からベビーユーザーで初歩的な問題の解決策に詳しかったのもあり、誰かのIssueに「こうしたらうまくいくよ」って書いたりしていました。みんな『ありがとう』って言ってくれるから嬉しく楽しくやってただけでしたが、メンバーに招待されたのはこの活動も見られていたからかなと思います。</p><p>今は自分もOSSメンテナしていて、質問に回答するだけですごく大変です。誰かがIssueに回答してくれるのはとても助かります。ただGitHubの活動履歴とかに残るわけではないので、それを外の組織から評価するのは難しいとは思うのですが、メンテナ・コミュニティの助けになるので、OSSへの恩返しって意味では、この活動も一緒にできるといいと思いました。</p></blockquote><p>これを聞いて、BugタグがついているIssueだけではなくQuestionなタグに回答していくのも活動の骨子に入れたいと思いました。Bugバスター祭りに入れるか別に切り出すか分かりませんが、一緒にやっても良いなと思います。</p><h2 id="2-future-commons"><a href="#2-future-commons" class="headerlink" title="2. future-commons"></a>2. future-commons</h2><p>これは今までもUroboroSQLなどでも行っていたことですが、プロジェクト（以下PJ）で困っていたり足りない・改善できるライブラリなどをOSSで開発します。まずは既存のプロダクトにコントリビュートして機能拡張しますが、ポリシーが合わない部分が多くなってくると独自開発していくと思っています。この数やスピードを上げていきます。</p><p>どちらかといえば、現場で出てきた要望ベースで作っていくので、小さなライブラリ群になっていくと思います。群と書きましたがライブラリ同士の依存はなるべく無くして単体だけでも使えるような思想で設計開発したいと思っています。</p><p>いま出ているアイデアは以下です。</p><ul><li>エラーコード管理</li><li>区分値管理</li><li>DynamoDBデータアクセス</li><li>OpenAPI Specification  Linter</li><li>OpenAPI Specification 3対応のCode generator</li></ul><h2 id="3-Future-Incubator"><a href="#3-Future-Incubator" class="headerlink" title="3. Future Incubator"></a>3. Future Incubator</h2><p>トップダウン的に比較的大きなプロダクトを開発していく活動です。トップダウンと言っても、現場から出てきた不満であったり課題を昇華させたもので、PoCコードで終わるのではなくもちろんプロダクション導入を前提としています。</p><p>今考えているのは例えば以下です。</p><ul><li>サーバレスなジョブ管理ツール</li><li>構造ログビューア</li></ul><p>こちらはどれが芽が出るのか（開発が継続できるのか）まだよく分からないため、いくつか種をまいて弾込めするところから始めています。こちらはコンセプトが重要なので <strong>天下一README武闘会</strong> という企画を通して、READMEで簡潔に魅力が伝わることや最低限動くコードを通して、継続したいプロダクトを選抜しています。</p><h2 id="4-OSS教育コンテンツ"><a href="#4-OSS教育コンテンツ" class="headerlink" title="4. OSS教育コンテンツ"></a>4. OSS教育コンテンツ</h2><p>Apache Way(ASFの指針みたいなの)などの考え方や、Contributeの第一手段などをまとめていきます。またこういった考えをフューチャーの若手からまず広げていこうと考えています。（コンテンツは適時公開していきます）。まずは敬意と感謝を持って、そしてOSSとそのコミュニティに貢献していきたい。</p><p>すでに記事がフューチャーブログからも出ていて、社内でもとても関心がある領域です。</p><ul><li><a href="https://future-architect.github.io/articles/20200821/">エンジニアが最低限理解しておくべきOSSライセンスの基礎知識</a></li></ul><p>OSSのライセンスというのは非常に重要ですが、中々小難しく感じます。そのため、まずは社内教育としてのコンテンツを作ろうと思っています。クイズ形式なんて良いんじゃないでしょうか？また、上記の記事は利用者視点に経ったものですが、開発者視点でどのライセンスを利用すべきかや、そのライセンスがどういう背景の人から生まれたかといった観点でもまとめていけると面白いのでは？と思っています。</p><h1 id="なんでやるのか？"><a href="#なんでやるのか？" class="headerlink" title="なんでやるのか？"></a>なんでやるのか？</h1><p>OSSと共に歩みたい。OSSカンパニーと名乗りたい。OSSにコードで恩返しをしたいと考えています</p><p>OSSカンパニーは何か？というと様々な定義があるかと思いますが、ここではOSS推進タスクフォースのリーダーである藤野さんが提唱した考え紹介します。</p><ol><li><strong>会社以外でコードの実績を社員みんなが持つこと</strong>。指標にはユーザがいるプロダクトのコミッター数などがあります<ul><li>単にコミッターの数を競うような指標は持ちたくないですが、結果として様々な組織配下のOSS（Linux FoundationやApache Foundation、Eclipse Foundationなど）のコミッターにフューチャーのITコンサルタントが入ることができれば嬉しいです</li></ul></li><li><strong>プロダクトにバグがあった時、ダーティハックして回避するのではなく本体を直す</strong> ことで、会社としてプロダクトに投資していくこと<ul><li>利用方法で回避するのではなく、、プロダクトを良くしていくことは大事です</li><li>同様に、機能が足りないので使うのやめるのではなく、足りないものは自分で機能を実装していくことができたら最高です</li><li>Bug報告も重要ですが、報告だけだとコミッターに対する負担は大きいため、できる限りコードを同時に書いていきたい</li></ul></li></ol><p>OSSへの恩返しについて。今まで個人的にも、もちろん会社（業務）としてもOSSの恩恵を大きく受けてきました。恩恵を受けてばかりの状態はやめにし、コードで直接的にOSSそのものをより良くしていくことに力を注いでいきます。これを恩返しと表現しました。</p><h1 id="技術戦略としてOSSの捉え方"><a href="#技術戦略としてOSSの捉え方" class="headerlink" title="技術戦略としてOSSの捉え方"></a>技術戦略としてOSSの捉え方</h1><p>フューチャーでは<a href="https://future-architect.github.io/articles/20190731/#%EF%BC%94%EF%BC%8D%EF%BC%91%EF%BC%8E%E5%AF%BE%E8%B1%A1%E6%8A%80%E8%A1%93%E8%A6%81%E7%B4%A0">Winner’s Circle</a>と呼ばれる技術戦略を立てており、簡単に言うと自分たちの開発案件で使っていく技術の選択肢を、領域別にまとめたものです。定期的にアップデートしながら選定しています。</p><p>その中には商用のプロプライエタリな技術も含みますが、OSSプロダクトも多く含まれます。OSS活動を通してフューチャーの利用する技術がこれからどういう機能を実装しようとしているかを中から知る、その方向でフューチャーの考えとマッチしているかを知る。フューチャーが数多くのPJでOSSプロダクトを導入していった結果を、コードやドキュメントとしてフィードバックしてより良いモノにしていきたい。フューチャーが使っているプロダクトはフューチャー自身もコントリビュートするので、結果的にフューチャーが選定したプロダクトを良いものだと言われるくらいサイクルを回したい。脆弱性などをいち早く知り、既存のPJに展開していきリードできるようにしたい、と考えています。</p><p>Winner’s Circleで選定したOSSにコントリビュートするのか、OSSにコントリビュートしたものが自然とWinner’s Circleになるのかですが、どちらの流れがあっても良いかなと思います。最初はコントリビュートしたいと思ったOSSから活動すると思うので、後者から入ることが多いのかな？と思っています。</p><h1 id="それって成り立つの？"><a href="#それって成り立つの？" class="headerlink" title="それって成り立つの？"></a>それって成り立つの？</h1><p>“OSSをビジネスにするには101”といったテーマで別記事に現在まとめています。社内では先行して読むことができるそうなので、先に読みたい人は声をかけてください。広義でのOSS活動のメリット/デメリットをなるべく経営目線で明文化した記事です。</p><p>フューチャーでは、すでにこのOSS活動を経営が理解しており、業務時間中に活動可能です（社内向けにいうとチャージコードがあります）。長期的に見て、採用・PR/ブランディング・技術力向上・自分たちが使っている技術自体に投資することで優位性を確立していくなど、ポジティブな結果につなげていきたいと思います。</p><h1 id="今後の進め方は？"><a href="#今後の進め方は？" class="headerlink" title="今後の進め方は？"></a>今後の進め方は？</h1><p>現状は兼業メンバーばかりなので、Bugバスター祭り、README武闘会といったイベント駆動で活動します。数値としてはOSS活動実績50件を目標にしています。</p><p>すでにSlack上でOSS活動をした場合に投稿するチャネルを作成して、実績をカウントし始めています。AWS SDKや、Go言語本体といった大きめのプロダクトにPull Requestを送るメンバーも出てきています。また、リーダーの藤野さんがあるプロジェクトで出てきた課題を解決するため、Apache Tomcatに新機能を実装した話もあり、こちらについては別記事で紹介したいと思います。</p><h1 id="来年に向けて目標"><a href="#来年に向けて目標" class="headerlink" title="来年に向けて目標"></a>来年に向けて目標</h1><ul><li>若手・新人に対するOSS教育（新人研修の卒業後研修に組み込みたい）</li><li>Apache Incubatorへの参画(プロジェクト活動開始/運営)<ul><li>手順の整理、プロダクトの検討等は2020年度に始めます</li></ul></li><li>OSS活動実績200件</li><li>OSSコミッタ就任1名以上</li><li>外部向けカンファレンスとして、フューチャーテックカンファレンス（仮）を開催したい<ul><li>少し趣旨が異なりますが、様々な技術的な活動を対外的にまとめて発表できる場も、この活動を通して作っていければと思っています</li></ul></li></ul><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><ul><li><strong>Q. カンファレンスの運営や登壇など、コミュニティへの貢献はしないの？</strong><ul><li>いいえ、今まで通り、運営の手伝いやスポンサード、状況が落ち着けば会場貸し出しなど色々な方法で貢献していきます。OSS活動≒コミュニティ活動として捉えていきます。自分たちのナレッジはなるべく外に公開していきたいのと、各領域のエキスパートの方々と意見交換して、刺激的なコミュニティになるよう貢献していきたいと思っています</li></ul></li><li><strong>Q. 利用するプログラミング言語の縛りはあるの？</strong><ul><li>いいえ。ただ主要メンバーにGo使いが多いので、最初はGo関連のプロダクトに対する活動が多いと思います。フューチャーとしてはJavaを用いるPJが多いので、ゆくゆくはJavaプロダクトへも活動を広げていければと思います。</li></ul></li><li><strong>Q. 自社OSS開発側の目標ってあるの？</strong><ul><li>将来的に達成したいこととしてApache Incubator、ゆくゆくはApache Project入りをするようなプロダクトを作りたいと思います。Apache Incubatorへの参画プロジェクトは2021年度を目標にしています</li></ul></li><li><strong>Q. インセンティブってつくっていますか？</strong><ul><li>（直接的には）いいえ。ただ、フューチャーと全く関係ないプロダクトに貢献するのではなく、利用度が高いあるいは、高くなる想定のプロダクトの優先度を高めるため、そのプロダクトを良くすると必然PJに対する貢献になるため、評価もおって得られます。また、コードを通してプロダクトを良くすることが、自分たちにもメリットがあるし、Coolで礼賛すべきことだとチームで認め合う文化を同時に育てていこうと思います。</li></ul></li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>フューチャー、OSS始めるってよ</li><li>今あるOSSへのコントリビュートをコードで直接的にやっていくよ。新しいプロダクトの開発を加速していくよ</li><li>継続するよう色々考えているよ</li></ul><p>まだまだ気持ちが先行していますが、大きな活動になるよう継続していきます。よろしくおねがいします。</p><p>フューチャー社員やグループの方で気になる方がいらっしゃいましたら、お気軽に連絡ください。実はSlackのオープンチャネルで活動しています</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">未来報の記事でVuls開発者の神戸さんが触れていますね: https://note.future.co.jp/n/n388bd4dd23d8</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">こんな記事を書いたりしてマネジメント寄り可と思いきや、やっぱり開発したいのか突然Slack Botツールを投入してくる人です。https://employment.en-japan.com/engineerhub/entry/2020/01/16/103000</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20201107/hacker-1569744_1920.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/genesis3g-360463/?utm_source=lin
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="TechBlog" scheme="https://future-architect.github.io/tags/TechBlog/"/>
    
      <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
  </entry>
  
  <entry>
    <title>OSSコミュニティへのフィードバック </title>
    <link href="https://future-architect.github.io/articles/20201106/"/>
    <id>https://future-architect.github.io/articles/20201106/</id>
    <published>2020-11-05T15:00:00.000Z</published>
    <updated>2020-11-26T01:36:05.821Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20201106/cat-3937880_1280.jpg" class="img-middle-size"><p><a href="https://pixabay.com/ja/users/pasja1000-6355831/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3937880" target="_blank" rel="noopener">pasja1000</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3937880" target="_blank" rel="noopener">Pixabay</a>からの画像</p><p>はじめまして。TIGの藤野です。</p><p>私はフューチャー入社前から長年OSS開発者として、ASF（Apache Software Foundation）のメンバ、Tomcatのコミッター／PMCメンバーを務めてきました。</p><p>今日は<a href="https://future-architect.github.io/articles/20201026/">秋のブログ週間連載</a>の第8弾として、私がプロジェクト案件対応を通じて行ったOSSコミュニティへフィードバックについての2つのお話をしたいと思います。</p><h2 id="①プロジェクトで出た問題をコミュニティへフィードバックした話"><a href="#①プロジェクトで出た問題をコミュニティへフィードバックした話" class="headerlink" title="①プロジェクトで出た問題をコミュニティへフィードバックした話"></a>①プロジェクトで出た問題をコミュニティへフィードバックした話</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>あるプロジェクト案件で以下の要件がありました。</p><ul><li>Tomcatをクラスタリングする</li><li>HTTPセッションをDBに格納する</li><li>但し、スティッキーセッションは使えない</li></ul><p>要件実現の為、開発チームはTomcatのセッション管理にPersistenceManagerを利用していました。</p><p>このPersistenceManagerは、定期的実行によるオンメモリの生存期間の長い古いセッションのバックアップや、オンメモリのセッション数が閾値を超えた場合にセッションをDBへ格納する為の機能で、クラスタリングされたTomcatでセッションの情報をDBを介して共有させることができます。</p><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>しかし、この案件では諸般の事情によりスティッキーセッションを採用していない為、リクエストの度にリクエストするTomcatが切り替わります。</p><p>そのためリクエストの度にDBから最新のセッション情報を取得する必要がありました。</p><p>上記の通り、PersistenceManagerは定期実行によってセッションをDBに格納する為、こういったリクエストの度に最新セッションを取得するような要件には対応していません。そこで開発チームは案件の要件を満たす為に、PersistenceManagerの定期実行間隔や、セッションがバックアップされるまでの期間を極端に短くするなど、かなり特異な設定で要件を無理やり実現させ、擬似的にセッションをDBに格納していました。もちろんこれは本来の使い方ではありません。</p><p>その結果、タイミングによって正しいセッションが取れなかったりするなどの不具合が発生していました。</p><h3 id="対応"><a href="#対応" class="headerlink" title="対応"></a>対応</h3><p>そこで、この問題の対応方法についての相談が私に来ました。私が詳細をヒアリングした際、開発チームは問題の原因をTomcatのソースコードレベルで把握しており、その対処方法を相談したいとのことでした。</p><p>したがって、私は対処方法として本来の使い方ではない特異な設定で無理やり要件を実現させるのではなく、PersistentValveの利用を提案しました。PersistentValveではスティッキーセッションが無効な状況下において、リクエスト時にセッション情報をDBから取得し、レスポンス時にDBに格納することができます。</p><p>このように対処方法は非常にシンプルでした。</p><h3 id="開発チームはPersistentValveを利用しなかったか？"><a href="#開発チームはPersistentValveを利用しなかったか？" class="headerlink" title="開発チームはPersistentValveを利用しなかったか？"></a>開発チームはPersistentValveを利用しなかったか？</h3><p>ではなぜ開発チームはPersistentValveを利用しなかったのでしょうか？</p><p>答えは単純で、PersistentValveはソースコード上は存在するものの、公式のドキュメントに関連するドキュメントが存在しなかった為です。ドキュメントが存在しないのであれば、開発チームは機能の存在を知ることなど到底出来ません。もちろんドキュメントが存在しないことは良い事ではないですが、ボランティアベースのコミュニティ開発では稀に存在するケースです。</p><p>私は、プロジェクトがこういったドキュメント化されていない機能を使うと、顧客から何やら秘密の珍しい機能を利用しているのではないかと思われてしまう可能性もあると思い、PersistentValveのドキュメントを作成し、コミュニティへフィードバックを行うことにしました。ドキュメント化することで特定の人のみが知っている秘密の機能ではなく、公式の機能として誰でも利用できるようになります。これでプロジェクトは、ごく一般的にドキュメンテーションされている機能を使っていることになりました。</p><h3 id="PersistentValveを利用する上で新たな要件が出てきた"><a href="#PersistentValveを利用する上で新たな要件が出てきた" class="headerlink" title="PersistentValveを利用する上で新たな要件が出てきた"></a>PersistentValveを利用する上で新たな要件が出てきた</h3><p>また、PersistentValveを利用する上で新たな要件が出てきました。</p><p>それはある特定のリクエストについてはDBからのセッション取得/格納を行いたくないケースが存在するというものでした。PersistentValveはセッションを利用する全てのリクエストに対してセッション取得/格納を行うため、そういった機能は実装していません。議論の後、特定のリクエストに対してはPersistentValveの機能をバイパスする処理を実装することにしました。</p><p>しかしその結果、プロジェクトの独自のおれおれパッチが適用されたPersistentValveになってしまい、本家のコミュニティ版のPersistentValveとは別ものになってしまいました。</p><p>そこで私は、案件用に実装したパッチをコミュニティにフィードバックすることを検討しました。検討する上で以下を判断材料にしました。</p><ul><li>追加する機能が、プロジェクト固有要件ではなく一般的に利用可能であるものか？</li><li>アップストリームに取り込んでも問題ない品質か？</li></ul><p>今回実装したパッチは両方を満たしていたので、コミュニティにフィードバックしました。</p><p>結果として、コミュニティ版とプロジェクト版で機能的に互換性が保たれていることになり、将来のバージョンアップ時にプロジェクト版をコミュニティ版に切り替えることも可能です。これにより、Tomcatの機能をカスタマイズしたおれおれパッチを永久的にメンテナンスする必要もなくなりました。こちらに関しては開発チームから大変喜ばれました。</p><h3 id="後日談"><a href="#後日談" class="headerlink" title="後日談"></a>後日談</h3><p>テストを進めるとマルチスレッド状況下でプロジェクトで拡張したPersistentValveでエラーが発生することが判明しました。</p><p>再び相談を受けた私は問題を調査し、発生しているエラーはプロジェクトが新規に取り込んだものではなく、Tomcatの既存バグであることが判明しました。</p><p>もちろん私はコミュニティとプロジェクトの両方に改修パッチをいれ、今でもコミュニティ版とプロジェクト版で互換性が保たれています。</p><h2 id="②複数プロジェクトで追加した機能をコミュニティへフィードバックした話"><a href="#②複数プロジェクトで追加した機能をコミュニティへフィードバックした話" class="headerlink" title="②複数プロジェクトで追加した機能をコミュニティへフィードバックした話"></a>②複数プロジェクトで追加した機能をコミュニティへフィードバックした話</h2><h3 id="問題-1"><a href="#問題-1" class="headerlink" title="問題"></a>問題</h3><p>構成は良くあるSpringBootをバックエンドにAPIサーバとする構成です。フロントエンドはバックエンドからのレスポンスはJSONを期待しています。</p><p>私は、このバックエンドのAPIサーバにある特定のリクエストを投げると、TomcatのデフォルトのエラーページがHTMLでレスポンスされてしまうという相談を受けました。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>調査した結果、エラーになること自体はTomcatの仕様通り、正確には特定のリクエストがRFC違反のリクエストなのでエラーになると回答しました。しかし、エラーになるのは仕方がないが、一部のエラーのみHTMLでレスポンスされるすっきりしない構成になってしまう為、HTMLを返却するのはなんとかしてほしいと追加依頼を受けました。</p><p>なお、エラーがHTMLが返却される原因は、通常、SpringBoot/アプリケーションレベルでのエラーは基本的にSpringBootの機能によってハンドリング可能です。つまり、基本的に全てJSONレスポンスで返却可能です。しかし、組込みTomcatのレベル、つまりSpringBootに組み込まれたTomcatでエラーとなってしまった場合には、SpringBootまでリクエストが届かない為、SpringBootの機能でエラーハンドリングできない。その結果、TomcatのデフォルトのエラーページがHTMLとして返却されるというものです。</p><h3 id="対応-1"><a href="#対応-1" class="headerlink" title="対応"></a>対応</h3><p>そこで私は、SpringBootの組込みTomcatのカスタマイズ処理で、エラーHTMLをレスポンスする処理をJSONを返却する処理に置き換えることで対応しました。<br>また、本ケースと同じような問題が別プロジェクトでもあり、私は同様の仕組みを採用しました。</p><p>この二つのプロジェクト案件で対応した機能はコミュニティにあっても良いものだと思ったので、私は、Tomcatコミュニティにフィードバックを行い、TomcatのデフォルトエラーページをJSONレスポンスとして返却する機能を追加することにしました。<br>その結果、将来的に設定を少し変えれば、プロジェクトのおれおれパッチからコミュニティ版へ切り替えることを可能にしています。</p><h3 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h3><p>今回は私が行ったプロジェクト案件からコミュニティへフィードバックを行った話を紹介させていただきました。</p><ul><li>特異な設定で頑張って機能を実現するのではなく、公開された機能でやりましょう</li><li>ドキュメントがないのであれば作りましょう</li><li>足りない機能はプロジェクトの独自実装で終わるのでなく、一般利用可能ならコミュニティへフィードバックしましょう。<br>そうすればコミュニティとプロジェクトで機能的で互換性が保たれるので、おれおれパッチのメンテナンスから解放されます</li><li>プロジェクト案件で作成した機能が良いものであれば、コミュニティへフィードバックしましょう</li></ul><p>私自身、OSS開発者として10年以上活動していますので、こういったOSS活動は慣れているのもあり行いやすいのかもしれません。ですがこういった活動が出来るITコンサルタントを増やしていくことで、会社としてOSSの貢献につながるのではと思います。会社もコミュニティもWin-Winになります。</p><p>これまでの単にOSSを利用し、その恩恵のみを受けるだけではなく、利用するOSSへの貢献することもやっていく。今は一部の人がやっているOSS活動をフューチャの多くのITコンサルタントが当たり前のように出来ているみたいに。フューチャがこれまで以上にOSS企業として成長していけてらよいなぁと思います。</p><p>そんなわけで、まだまだ駆け出しではありますが仲間達と社内にOSS活動タスクフォースを立ち上げました。こちらの詳細に関しては近日公開予定です。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20201106/cat-3937880_1280.jpg&quot; class=&quot;img-middle-size&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/pasja1000-6355831/?utm_s
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Java" scheme="https://future-architect.github.io/tags/Java/"/>
    
      <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
      <category term="秋ブログ週間" scheme="https://future-architect.github.io/tags/%E7%A7%8B%E3%83%96%E3%83%AD%E3%82%B0%E9%80%B1%E9%96%93/"/>
    
  </entry>
  
  <entry>
    <title>イノベーションの捉え方</title>
    <link href="https://future-architect.github.io/articles/20201105/"/>
    <id>https://future-architect.github.io/articles/20201105/</id>
    <published>2020-11-04T15:00:00.000Z</published>
    <updated>2020-11-26T01:36:15.048Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20201105/idea-5617893_1280.jpg" class="img-middle-size"><p><a href="https://pixabay.com/ja/users/tumisu-148124/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=5617893" target="_blank" rel="noopener">Tumisu</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=5617893" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。Strategic AI Groupの米谷です。以前に<a href="https://future-architect.github.io/">Future Tech Blog</a>で<a href="https://future-architect.github.io/articles/20170314/">「世論調査の内閣支持率を統計学的に解釈すると…?」</a>を書かせていただきました。</p><p>今回は、<a href="https://future-architect.github.io/articles/20201026/">秋のブログ週間</a>連載の第7弾の枠をいただいて、統計調査という繋がりで、イノベーションの捉え方に関する2つの調査を紹介させていただこうと思います。</p><p>皆さんはイノベーションという言葉からどのようなことをイメージされるでしょうか？何かが新しく登場してわれわれの生活を便利してくれることをイメージされるかもしれません。身近に当たり前のように普及してきている例で言えば、スマートフォン、Uber Eats、セルフレジ／セミセルフレジ、リモートワーク、ダイナミックプライシングといったことをイノベーションと思う人も少なくないでしょう。一方で、イノベーションという言葉は非常に曖昧かつ抽象的で、万人共通の定義がないことから、もしかすると人によってはこれらをイノベーションとは思わないかもしれません。</p><p>現在、イノベーションはカタカナ英語となっていますが、どちらかと言うとそれがまだ英語と強く認識されていた頃、私は当たり前のように“技術革新”と訳していました。私も含めて日本人がイノベーションを技術革新と訳す一因は、1956年の経済財政白書でそのような訳であるように「技術革新（イノベーション）」と記されたことによると言われています。一方で、イノベーションの定義として世界的によく知られているのは、シュンペーターの生産に関する物や力の非連続的な新結合で、それが対象とする5つのケースとして新しい財貨／生産方法／販路の開拓／原料等の供給源の獲得／組織の実現等が含まれています。シュンペーターの定義は、日本語訳の技術革新よりも広い概念で、このうち技術革新を伴わない新結合に対して日本人はイノベーションとは思わない傾向があるかもしれません。</p><p>本ブログでは、イノベーションの捉え方に関する2つの調査を紹介します。一つは、イノベーションに何も定義を置かずに、同一の事象に対してイノベーションと思うかどうかを日米独で比較した「『イノベーション』に対する認識の日米独比較」です。もう一つは、世界の60か国超でもオーソライズされているイノベーションの定義を使って、民間企業のイノベーションの実現状況を調査した政府統計（一般統計）の「全国イノベーション調査」です。</p><h1 id="「イノベーション」という言葉に対する認識の日米独比較"><a href="#「イノベーション」という言葉に対する認識の日米独比較" class="headerlink" title="「イノベーション」という言葉に対する認識の日米独比較"></a>「イノベーション」という言葉に対する認識の日米独比較</h1><p>まずは、イノベーションに何も定義を置かずに、その言葉に対する認識が国際間でどう違うかを調べた<a href="https://nistep.repo.nii.ac.jp/?action=repository_uri&item_id=4730&file_id=13&file_no=3" target="_blank" rel="noopener">「イノベーション」に対する認識の日米独比較</a><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>を紹介します。この調査は25個の事例を日本人、アメリカ人、ドイツ人に各言語で提示して、自身がイノベーションという言葉に対して持つイメージを基準に、各事例をどの程度イノベーションと思うかをウェブで調査したものです。</p><h3 id="イノベーションと思う程度の日米独比較調査結果"><a href="#イノベーションと思う程度の日米独比較調査結果" class="headerlink" title="イノベーションと思う程度の日米独比較調査結果"></a>イノベーションと思う程度の日米独比較調査結果</h3><p>例えば、以下の事例について、</p><blockquote><p><strong>(1)あるカメラフィルムメーカーが、世界で初めてカメラフィルムの技術を液晶ディスプレイの保護フィルムに使った</strong><br><img src="/images/20201105/image.png" alt=""></p></blockquote><p>日本人回答者の34.5%が「イノベーションと思う(青)」、44.5%が「どちらかと言えばイノベーションと思う(赤)」と回答したことに対して、アメリカ人はそれぞれ54.1%、32.4%、ドイツ人はそれぞれ46.4%、35.6%という結果が得られています。これも含めた全体の結果は以下で、25個の事例は、「イノベーションと思う」と「どちらかと言えばイノベーションと思う」の合計割合が全体的に高い事例から低い事例に並べられています。</p><p><strong>▼25個の事例それぞれに対して日本人、アメリカ人、ドイツ人がイノベーションと思う程度</strong>（<a href="https://nistep.repo.nii.ac.jp/?action=repository_uri&item_id=4730&file_id=13&file_no=3" target="_blank" rel="noopener">「イノベーション」に対する認識の日米独比較</a>から抜粋）<br><img src="/images/20201105/image_2.png" alt=""></p><p>25個の事例の調査結果について、「イノベーションと思う」と「どちらかと言えばイノベーションと思う」の合計割合が全体的に高い上の方には科学技術の進歩が伴う事例が集まり、下の方には製品やサービスの生産／提供方法、マーケティング方法、組織の変更が伴う事例が集まっているように見えます。これを踏まえると、技術革新を伴わないとイノベーションとは思わない傾向があるという仮説は、必ずしも日本人に限ったことではないと言えるかもしれません。</p><p>また、25個いずれの事例でも、日本の「イノベーションと思う(青)」と「どちらかと言えばイノベーションと思う(赤)」の合計割合が最も高くなる事例はありませんでした。その中で日本がアメリカとドイツよりも特に低い事例は、</p><blockquote><p><strong>(3)製品の省エネ化を継続的に進めているあるメーカーが、家庭用大型冷蔵庫の最新機種の年間消費電力量をさらに5%少なくした。</strong><br><img src="/images/20201105/image_3.png" alt=""></p></blockquote><blockquote><p><strong>(4)あるメーカーがお客様相談窓口の電話対応に自動音声案内を導入したところ、相談者の待ち時間が半分になった。</strong><br><img src="/images/20201105/image_4.png" alt=""></p></blockquote><blockquote><p><strong>(8)あるアンチウィルスソフトウェアの販売会社が新種のコンピュータウィルスに対応するウィルス定義ファイルを配信した。</strong><br><img src="/images/20201105/image_5.png" alt=""></p></blockquote><blockquote><p><strong>(15)ある企業が、中国企業との取引が増えたので中国語研修を始めた。</strong><br><img src="/images/20201105/image_6.png" alt=""></p></blockquote><p>です。ただ、必ずしも日本がアメリカとドイツと比べて低いわけでもなく、</p><blockquote><p><strong>(5)ある自動車メーカーが複数の車種で用いることができるように部品を共通化した。</strong><br><img src="/images/20201105/image_7.png" alt=""></p></blockquote><p>では、アメリカが日本とドイツと比べて低く、また</p><blockquote><p><strong>(9)同業他社でGPSが普及する中、あるタクシー会社もGPSを導入して、配車に必要な位置情報を自動的に把握できるようにした。</strong><br><img src="/images/20201105/image_8.png" alt=""></p></blockquote><p>では、ドイツが日本とアメリカと比べて低いという結果になっています。</p><p>実はこの調査は、私が前職で担当させていただいたものです。官でも民でもイノベーションに関する海外事例を参照する際に、そもそもイノベーションに対する認識の違いがあるのではないかという懸念は起こりえて、この調査結果はそれに対するエビデンスの一つと言えるかもしれません。一方で、いずれかの国が他の国よりもイノベーションに対する評価が厳しいといった一貫した結果は得られていません。その背景には少なくとも調査方法への懸念が2つあり、一つは、調査票上の日本語から英語やドイツ語への翻訳に懸念が指摘されていること、もう一つは具体的かつ共通の事例を文章で想起させることの限界があったのではないかということです。本blogでは、結果の解釈が非常に難しいことから、気軽な気持ちでの話題提供に留めさせていただければと思っています。</p><h1 id="統一した定義を使ったイノベーション調査"><a href="#統一した定義を使ったイノベーション調査" class="headerlink" title="統一した定義を使ったイノベーション調査"></a>統一した定義を使ったイノベーション調査</h1><p>これまで書いてきたようにイノベーションに対する認識は人によってバラバラである懸念がありますが、何かしらの定義を置いてそれを定量化しようという試みはあります。例えばイノベーションの源泉となる研究開発等に対する投資金額や、製品／サービスの市場導入前に取得される特許等の数がそれです。これらはイノベーションの代理指標になりますが、客観的データとして有効な定量化手段と考えられています。一方、本blogで紹介する方法は、主観が入る懸念はあるもののダイレクトに定量化する方法で、経済協力開発機構（OECD）の<a href="https://www.oecd.org/science/oslo-manual-2018-9789264304604-en.htm" target="_blank" rel="noopener">オスロ・マニュアル</a>によるものです。そして、文部科学省の科学技術・学術政策研究所が行っている政府統計（一般統計）の<a href="https://www.nistep.go.jp/research/rd-and-innovation/national-innovation-survey" target="_blank" rel="noopener">全国イノベーション調査</a>は、このマニュアルにあるイノベーションの定義を使っています。</p><h3 id="全国イノベーション調査とイノベーションの定義"><a href="#全国イノベーション調査とイノベーションの定義" class="headerlink" title="全国イノベーション調査とイノベーションの定義"></a>全国イノベーション調査とイノベーションの定義</h3><p>全国イノベーション調査では、従業者数10人以上の民間企業のイノベーション実現状況とその実現に向けた活動（イノベーション活動）について、標本調査を通じた母集団推計を行っています。具体的に、以下の定義と調査票によって①プロダクト・イノベーション、②プロセス・イノベーション、③組織イノベーション、④マーケティング・イノベーションの実現の有無が定量化されています。</p><p><strong>▼各イノベーションの定義</strong>（<a href="https://www.nistep.go.jp/wp/wp-content/uploads/3f1f11f0e05fca02b8509bb9d8976cc1.pdf" target="_blank" rel="noopener">全国イノベーション調査 2018年調査 調査票</a>の記載内容を筆者が要約）</p><p><strong>①プロダクト・イノベーション</strong><br>新しい又は改善した製品／サービスを市場に導入すること。新しい又は改善した製品／サービスとは、自社の以前の製品／サービスとはかなり異なるもので、他社が既に市場に導入していても良い。</p><p><strong>②プロセス・イノベーション</strong><br>新しい又は改善した、製品の生産方法、サービスの提供方法、製品やサービスのロジスティクス／配送方法／流通方法、情報処理又は情報伝達に関する方法、会計又は他の管理業務に関する方法を自社内に導入すること。新しい又は改善したこれらの方法とは、自社の以前のこれらの方法とはかなり異なるもので、他社が既に導入していても良い。</p><p><strong>③組織イノベーション</strong><br>新しい又は改善した、業務手順又は社外との関係を組織化するための業務慣行、職務責任／意思決定／人材マネジメントを組織化するための方法を自社内に導入すること。新しい又は改善したこれらの方法とは、自社の以前のこれらの方法とはかなり異なるもので、他社が既に導入していても良い。</p><p><strong>④マーケティング・イノベーション</strong><br>新しい又は改善した販売促進／価格設定／プロダクト・プレイスメント／アフターサービスに関するマーケティング方法を自社内に導入すること。新しい又は改善したこれらの方法とは、自社の以前のこれらの方法とはかなり異なるもので、他社が既に導入していても良い。</p><p><strong>▼各イノベーションの具体的な調査項目</strong>（<a href="https://www.nistep.go.jp/wp/wp-content/uploads/3f1f11f0e05fca02b8509bb9d8976cc1.pdf" target="_blank" rel="noopener">全国イノベーション調査 2018年調査 調査票</a>から抜粋）<br><img src="/images/20201105/image_9.png" alt=""></p><p>例えば、①プロダクト・イノベーションは、自社の以前の製品／サービスとはかなり異なる新しい又は改善した製品／サービスを市場に導入したことで、その他の②プロセス／③組織／④マーケティング・イノベーションも同様です。</p><h3 id="イノベーション調査の定義の2つのポイント"><a href="#イノベーション調査の定義の2つのポイント" class="headerlink" title="イノベーション調査の定義の2つのポイント"></a>イノベーション調査の定義の2つのポイント</h3><p>ポイントは少なくとも2つあって、一つはあくまでも「自社の以前のものとはかなり異なること」を満たしていれば、同様のものを他社が導入していても良いということです。つまり①プロダクト・イノベーションの定義は、少なくとも「自社にとって新しいプロダクト・イノベーション」ということです。そして、その内訳として「以前にいかなる競合他社も提供したことがない、市場にとって新しいプロダクト・イノベーション」と、「既に競合他社が提供している製品・サービスと同一又はよく類似した、自社にとってのみ新しいプロダクト・イノベーション」があるということになります。</p><p>もう一つは、「自社の以前のものとはかなり異なる」という主観性が残る懸念はあるものの、統一した基準でイノベーションを定量化できる点です。話は少し逸れますが、私はこの調査の第3回目（2012年調査（2013年初頭実施））を担当させていただき、今は調査する役所の立場から調査される民間企業の立場になりましたが、回答者としてフューチャーならどうなのかをぱっと答えるなら、いずれのイノベーションも実現していると回答します。しかし、厳密にどこの何をもってイノベーションを実現したとするとなると、社内でも回答者によってばらばらになりそうで、企業として正式に回答にはそのとりまとめにも労力が必要になりそうだと想像します（今もそうでしょうけど、主観性が残る懸念と、回答者負担は調査側だった当時の私も困ってました）。</p><h3 id="イノベーション調査の利用例"><a href="#イノベーション調査の利用例" class="headerlink" title="イノベーション調査の利用例"></a>イノベーション調査の利用例</h3><p>話は戻って、統一基準による定量化によって実現されている一つが、以下のOECDが2019年に行った国際比較です。</p><p><strong>▼2019年にOECDが収集した各国の各イノベーション実現割合の国際比較</strong>（プロダクト／プロセス／組織／マーケティング・イノベーションの実現割合、横軸が各国（国コード表示）で、<a href="https://www.oecd.org/sti/inno/2019%20Innovation%20Indicators%20Database%20(003).zip" target="_blank" rel="noopener">OECDが収集した各国の統計値</a>から筆者が独自に作成）<br><img src="/images/20201105/2019_Innovation_Indicators_Data.jpg" alt=""></p><p>この国際比較は各国の当時の最新結果が集められているのですが、日本のプロダクト／プロセス／組織／マーケティング・イノベーションの実現割合はそれぞれ16.1%、30.0%、13.9%、6.8%となっています。この結果を見て、経済大国としての日本のイノベーション実現割合が、諸外国と比べて低いと思われる方もおられるのではないかと思います。こういった数字を利活用してもらうためには、見る人の納得感も必要で、実際に私が調査を担当させていただいたときも、日本が相対的に低いのはおかしいという指摘がありました。関連して、前述のイノベーションに対する認識の違い、定義の「以前のものとはかなり異なる」への主観性、高い回答コストに起因する決して高くはない回答率と統計値の精度、非回答バイアス等の懸念が出てくるのも不思議ではありません。ただ、イノベーションに定義を置いて定量化したことで、既に紹介した国際比較、下記の国内での経年比較、これらにもとづいたイノベーションに関する議論ができるようになりつつあることは評価されるべきと思います。また、こうした懸念をなくして統計値の精度を高める取組（マニュアルの改訂、回答マニュアルの添付、非回答分析など）も並行して行われてることも事実です。</p><p><strong>▼国内の経年比較例</strong>（プロダクト・イノベーションの実現割合；<a href="https://nistep.repo.nii.ac.jp/?action=repository_uri&item_id=6651&file_id=13&file_no=3" target="_blank" rel="noopener">全国イノベーション調査 2018年調査統計報告</a><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>から抜粋）<br><img src="/images/20201105/image_10.png" alt=""></p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>本blogでは、イノベーションの捉え方に関する２つの調査を紹介しました。一つは、イノベーションという言葉に対する認識を国際間で比較した調査、もう一つはイノベーションに定義を置いた上での民間企業のその実現状況の調査でした。</p><p>特に後者は、マクロ視点でイノベーションの実現状況をモニタリングする上で有効な手段でしょう。一方で、モニタリング結果を踏まえてイノベーション実現に向けた施策を打つにしても、現場で起こっているイノベーションは様々で、有効な施策をマクロで作ることは難しそうです。私も、イノベーションを調査する役所から調査される民間企業に移った際に、「イノベーションを調査する人間から起こす人間になる」と意気込んでいましたが、ただ闇雲にイノベーションを起こそうと思っていたところがありました。しかし、当たり前のことかもしれませんが、新しく広く普及する技術、製品、サービス、方法は何かしらの課題を解決するために生まれているはずで、イノベーションは課題解決の副産物だと思うようになりました。したがって、イノベーションそのものを起こそうというよりも、課題を見つけてそれを解決したときにイノベーションが起こりうると思っています。これからもイノベーションの実現を期待して、課題を発見してそれを解決することをやっていきたいと思っています。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">米谷悠(2012) 「イノベーション」に対する認識の日米独比較, 調査資料-208, 文部科学省科学技術・学術政策研究所. URI: http://hdl.handle.net/11035/1142</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">「全国イノベーション調査 2018 年調査統計報告」，NISTEP REPORT, No.182，文部科学省科学技術・学術政策研究所．DOI: https://doi.org/10.15108/nr182</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20201105/idea-5617893_1280.jpg&quot; class=&quot;img-middle-size&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/tumisu-148124/?utm_sour
      
    
    </summary>
    
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="統計" scheme="https://future-architect.github.io/tags/%E7%B5%B1%E8%A8%88/"/>
    
      <category term="秋ブログ週間" scheme="https://future-architect.github.io/tags/%E7%A7%8B%E3%83%96%E3%83%AD%E3%82%B0%E9%80%B1%E9%96%93/"/>
    
      <category term="イノベーション" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%8E%E3%83%99%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3/"/>
    
      <category term="政府統計" scheme="https://future-architect.github.io/tags/%E6%94%BF%E5%BA%9C%E7%B5%B1%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>人工知能と神経科学</title>
    <link href="https://future-architect.github.io/articles/20201104/"/>
    <id>https://future-architect.github.io/articles/20201104/</id>
    <published>2020-11-03T15:00:00.000Z</published>
    <updated>2020-11-26T01:36:20.366Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20201104/brain-2029391_1280.png" class="img-middle-size"><p><a href="https://pixabay.com/ja/users/openclipart-vectors-30363/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2029391" target="_blank" rel="noopener">OpenClipart-Vectors</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2029391" target="_blank" rel="noopener">Pixabay</a>からの画像</p><p>2020年4月新卒入社、フューチャーアーキテクトの戸田です。</p><p>この記事は<a href="https://future-architect.github.io/articles/20201026/">秋のブログ週間連載</a>の第5弾です。他の秋のブログ週間連載と毛色が多少異なりますが、楽しんで貰えると幸いです。</p><p>秋の夜長に合う読み物、ということだったので、最近では身近になった「人工知能」とその隣人である「神経科学」について書こうと思います。私事ですが、筆者の学生時代の専門が「神経科学」であり、情報系ではなく生物系出身や色々な人がフューチャーに在籍しているよ、と伝えたく筆を取りました。</p><h2 id="1-神経科学（Neuroscience）とは"><a href="#1-神経科学（Neuroscience）とは" class="headerlink" title="1. 神経科学（Neuroscience）とは"></a>1. 神経科学（Neuroscience）とは</h2><p>名前の通り、生き物の体に張り巡らされる「神経（Neuro）」について研究を行う自然「科学（Sciense）」の一分野です。非常に簡単に言うと、生き物が感じ・考え・動くことを調べる分野のことを指します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">どのようにして私たちはものを見たり，聞いたりするのだろうか。</span><br><span class="line">快く感じることもあれば苦痛に感じることもあるのはなぜだろうか。</span><br><span class="line">どのようにして私たちは体を動かすのだろうか。 </span><br><span class="line">また， どのようにして私たちは推論し，学習し記憶し，そして忘れるのだろうか。</span><br><span class="line">怒りや狂気の本質は何だろうか。 このようなことに興味を抱くのは人間として自然である。 </span><br><span class="line">これらの謎を基礎的な神経科学の見地から解明する研究が始まっている。</span><br><span class="line">そして，これらの研究の成果が本書の主題である。</span><br></pre></td></tr></table></figure><p>（M.F.ベアー. ベアー・コノーズ・パラディーソ 神経科学：脳の探求 カラー版 より <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>）  </p><p>しかし、そんな生き物に関わる研究が、どのようにして情報系の分野である「人工知能」に影響を及ぼしたのか、同時に影響を及ぼされたのかを簡単にですが説明していこうと思います。</p><h2 id="2-「人工知能」と「神経科学」の歴史"><a href="#2-「人工知能」と「神経科学」の歴史" class="headerlink" title="2.「人工知能」と「神経科学」の歴史"></a>2.「人工知能」と「神経科学」の歴史</h2><p>AIという言葉が使われ、その歴史が始まったのは1956年のダートマス会議<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>のことですが、そこからすべての「人工知能（Artificial intelligence; AI）」の歴史についてここに記す事はできないため、「神経科学」とそれに関わりの深い「深層学習」に絞って話をしていきます。</p><h3 id="2-0-「深層学習」が脚光を浴びてから"><a href="#2-0-「深層学習」が脚光を浴びてから" class="headerlink" title="2.0. 「深層学習」が脚光を浴びてから"></a>2.0. 「深層学習」が脚光を浴びてから</h3><p>ご存じの方も多いでしょうが、「深層学習」は2012年のNIPS会議においてヒントンら<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>が画像解析での圧倒的な性能を示して以来、画像認識を始めとして、言語処理、音声認識など様々な分野において活躍を残しています<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>。</p><p>その「深層学習」において用いられる、「ニューラルネットワーク（Neural Network; NN）」は、日本語に無理やり直せば「神経回路網」となります。名前の通り、現在活躍する人工知能に関する手法の起源は神経科学にあります<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>。</p><p>それでは、「深層学習」と「神経科学」の歴史を辿っていきましょう。</p><h3 id="2-1-「形式ニューロン」と「全か無かの法則」"><a href="#2-1-「形式ニューロン」と「全か無かの法則」" class="headerlink" title="2.1. 「形式ニューロン」と「全か無かの法則」"></a>2.1. 「形式ニューロン」と「全か無かの法則」</h3><p>一番初めのNNモデルは1943年に、ピッツとマッカロック<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>が発表した「形式ニューロン」と呼ばれるものです。これは、神経科学において発見された「全か無かの法則」を数理的に表現したものでした。</p><p>「全か無かの法則」は、神経細胞（Neuron）の活動に関する法則で、神経細胞に一定上の入力がある場合には活動し、一定以下の入力には活動しないという法則です。つまり、「形式ニューロン」も入力値が一定を超えた場合に”1”を、超えなかった場合に”0”を出します(出力する値は定義次第ですが、今回はTrueとFalseを意識して1,0としました)。この「形式ニューロン」でどんな事ができるかというと、例えば、論理演算のANDを表現することが可能です。</p><h3 id="2-2-教師なし学習としての「ヘッブ則」"><a href="#2-2-教師なし学習としての「ヘッブ則」" class="headerlink" title="2.2.教師なし学習としての「ヘッブ則」"></a>2.2.教師なし学習としての「ヘッブ則」</h3><p>1949年にはヘッブが神経細胞間の関係について仮設を唱えました<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>。俗に「ヘッブ則」と呼ばれる法則です。「ヘッブ則」は、神経科学にも大きな影響を与えましたが、人工知能の分野にも大きな影響を与えました。</p><p>ヘッブは、その法則を以下のように表現しています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">「細胞Aの軸索が細胞Bを発火させるのに十分近くにあり、</span><br><span class="line">繰り返しあるいは絶え間なくその発火に参加するとき、</span><br><span class="line">いくつかの成長過程あるいは代謝変化が一方あるいは両方の細胞に起こり、</span><br><span class="line">細胞Bを発火させる細胞の1つとして細胞Aの効率が増加する。」</span><br></pre></td></tr></table></figure><p>（高橋 直矢, 池谷裕二, 松木則夫. ヘブ則. 脳科学辞典 より<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>)</p><p>ここで、<code>発火</code>は神経細胞、すなわちニューロンの活動のことを指し、<code>細胞Aの軸索が細胞Bを発火させるのに十分近くにあり</code>というのは細胞Aと細胞Bとの活動に関連があること、すなわち、ニューロン間に入力の関係があることを指します。</p><p>要約すれば、<code>ニューロンAの活動がニューロンBの活動を引き起こすと、ニューロンAの活動がニューロンBを活動させやすくなる</code>となります。これはつまり、教師となる外部の信号なしに、ニューロン同士の関係を変化させる、教師なし学習に関する最初のアイデア<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>でした。</p><h3 id="2-3-「形式ニューロン」をつなげた「パーセプトロン」"><a href="#2-3-「形式ニューロン」をつなげた「パーセプトロン」" class="headerlink" title="2.3. 「形式ニューロン」をつなげた「パーセプトロン」"></a>2.3. 「形式ニューロン」をつなげた「パーセプトロン」</h3><p>1958年にはローゼンブラッドがNNモデルである「パーセプトロン」を発表しました<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup>。節名の通り、「パーセプトロン」は「形式ニューロン」を複数つなげたものであり、一つの「形式ニューロン」で論理演算が可能であるのならば、複数個「形式ニューロン」をつなげればより複雑な入出力の関係を表現できるだろう、というアイデアでした。このときローゼンブラッドがパーセプトロンの学習則として使った方法が、前に説明したヘッブ則でした。</p><p>本筋とは関係ありませんが、この「パーセプトロン」では線形分離が出来ない問題が解けないということで下火になっていきました<sup id="fnref:10"><a href="#fn:10" rel="footnote">10</a></sup>。</p><p>実はさらに「形式ニューロン」をつなげる、つまり、層を増やせば線形分離が出来ない問題も解くことができることはわかっていましたが、ヘッブ則では層を増やした「パーセプトロン」を学習させることが出来ないことが問題でした。</p><h3 id="2-4-バックプロパゲーションの開発とその後の深層学習"><a href="#2-4-バックプロパゲーションの開発とその後の深層学習" class="headerlink" title="2.4.バックプロパゲーションの開発とその後の深層学習"></a>2.4.バックプロパゲーションの開発とその後の深層学習</h3><p>1986年に、前節で話した多層のパーセプトロンを学習させられない、という問題を解決できる「バックプロパゲーション」をランメルハルトらが発表しました<sup id="fnref:11"><a href="#fn:11" rel="footnote">11</a></sup>。彼らは、並列分散処理モデルの研究していた神経科学と認知科学者のグループでした<sup id="fnref:12"><a href="#fn:12" rel="footnote">12</a></sup>。さらに、その後ランメルハルトとともに「バックプロパゲーション」を発表した、ヒントンが研究を続け、2012年のNIPS会議へとつながっていきます。</p><p>並列分散処理モデルは、コネクショニズムとも呼ばれ、神経細胞群を抽象化された処理の単位（ユニット）とし、それのネットワークを用いて認知メカニズムを理解しようとするアプローチであり、現在のNNモデルと共通点も多くあります<sup id="fnref:13"><a href="#fn:13" rel="footnote">13</a></sup>。</p><p>並列分散処理モデルと神経科学は、人工知能の研究に色々なアイデアを提供しました<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>。現在の機械翻訳における、単語や文を分解して（ベクトルとして）表現できるという概念<sup id="fnref:14"><a href="#fn:14" rel="footnote">14</a></sup>や、視覚情報を処理する脳領域に関する実験<sup id="fnref:15"><a href="#fn:15" rel="footnote">15</a></sup>から発想を得た、畳み込みニューラルネットワークに見られる非線形変換・分割正規化・最大プーリング<sup id="fnref:16"><a href="#fn:16" rel="footnote">16</a></sup>などが例として挙げられます。</p><p>また、トレーニングデータに過剰に適合してしまう、過学習を防ぐために行われる正則化であるドロップアウトの開発も、ポワソン分布で活動する神経細胞の存在に動機づけられました<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>,<sup id="fnref:17"><a href="#fn:17" rel="footnote">17</a></sup>。さらに、強化学習も動物心理学における動物実験の研究に触発されています<sup id="fnref:18"><a href="#fn:18" rel="footnote">18</a></sup>。</p><p>一方で、強化学習の手法であるTD学習（Temporal difference learning）から得られた結果と生物の脳から計測された神経の活動はよく似ており、生物の脳がTD学習と類似した方法を用いていることが示唆されています<sup id="fnref:19"><a href="#fn:19" rel="footnote">19</a></sup>,<sup id="fnref:20"><a href="#fn:20" rel="footnote">20</a></sup>。</p><p>深層学習による、神経科学への影響はアルゴリズムに限りません。近年では、神経科学において処理するデータ量が飛躍的に増加しており解析手法として深層学習が用いられることも多いです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>「神経科学」とは、脳などの神経について研究を行う分野のことである。</li><li>「人工知能」と関係する「神経科学」という分野がある。</li><li>歴史的に「人工知能」と「神経科学」は影響を与えあってきた。</li></ul><p>過去から現在まで、簡単かつ駆け足ではありますが「人工知能」と「神経科学」の関係を書きました。</p><p>込み入った話を含めれば、さらに色々書くことはありますが、「神経科学」の知識がないと理解が難しいため比較的理解しやすいものを書いてみました。また機会があれば、現在の話やこれからの話についても書けたらいいなと考えています。</p><p>本記事は、ハサビスらの論文<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>とシュミットフーバーの論文<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>を中軸として書いたので気になる方は、原著も読んでみてください。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">加藤宏司, et al. &quot;ベアー コノーズ パラディーソ神経科学: 脳の探求: カラー版.&quot; (2007).</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">McCarthy, John, et al. &quot;A proposal for the dartmouth summer research project on artificial intelligence, august 31, 1955.&quot; AI magazine 27.4 (2006): 12-12.</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">Krizhevsky, Alex, Ilya Sutskever, and Geoffrey E. Hinton. &quot;ImageNet classification with deep convolutional neural networks.&quot; NIPS'12: Proceedings of the 25th International Conference on Neural Information Processing Systems(2012): 1097–1105.</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;">Schmidhuber, Jürgen. &quot;Deep learning in neural networks: An overview.&quot; Neural networks 61 (2015): 85-117.</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;">Hassabis, Demis, et al. &quot;Neuroscience-inspired artificial intelligence.&quot; Neuron 95.2 (2017): 245-258.</span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;">McCulloch, Warren S., and Walter Pitts. &quot;A logical calculus of the ideas immanent in nervous activity.&quot; The bulletin of mathematical biophysics 5.4 (1943): 115-133.</span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">7.</span><span style="display: inline-block; vertical-align: top;">Hebb, Donald Olding. &quot;The organization of behavior: a neuropsychological theory.&quot; J. Wiley; Chapman &amp; Hall, 1949.</span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">8.</span><span style="display: inline-block; vertical-align: top;">高橋 直矢, 池谷裕二, 松木則夫. &quot;ヘブ則&quot;. 脳科学辞典(2012), アクセス日 2020/11/04, https://bsd.neuroinf.jp/wiki/%E3%83%98%E3%83%96%E5%89%87</span><a href="#fnref:8" rev="footnote"> ↩</a></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">9.</span><span style="display: inline-block; vertical-align: top;">Rosenblatt, Frank. &quot;The perceptron: a probabilistic model for information storage and organization in the brain.&quot; Psychological review 65.6 (1958): 386.</span><a href="#fnref:9" rev="footnote"> ↩</a></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">10.</span><span style="display: inline-block; vertical-align: top;">Minsky, Marvin L., and Seymour A. Papert. &quot;Perceptrons: expanded edition.&quot; (1988).</span><a href="#fnref:10" rev="footnote"> ↩</a></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">11.</span><span style="display: inline-block; vertical-align: top;">Rumelhart, David E., Geoffrey E. Hinton, and Ronald J. Williams. &quot;Learning representations by back-propagating errors.&quot; nature 323.6088 (1986): 533-536.</span><a href="#fnref:11" rev="footnote"> ↩</a></li><li id="fn:12"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">12.</span><span style="display: inline-block; vertical-align: top;">Rumelhart, David E., Geoffrey E. Hinton, and Ronald J. Williams. Learning internal representations by error propagation. No. ICS-8506. California Univ San Diego La Jolla Inst for Cognitive Science, 1985.</span><a href="#fnref:12" rev="footnote"> ↩</a></li><li id="fn:13"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">13.</span><span style="display: inline-block; vertical-align: top;">都築誉史. &quot;コネクショニズム.&quot; 認知科学 8.3 (2001): 225-237.</span><a href="#fnref:13" rev="footnote"> ↩</a></li><li id="fn:14"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">14.</span><span style="display: inline-block; vertical-align: top;">John, Mark F. St, and James L. McClelland. &quot;Learning and applying contextual constraints in sentence comprehension.&quot; Artificial intelligence 46.1-2 (1990): 217-257.</span><a href="#fnref:14" rev="footnote"> ↩</a></li><li id="fn:15"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">15.</span><span style="display: inline-block; vertical-align: top;">Hubel, David H., and Torsten N. Wiesel. &quot;Receptive fields of single neurones in the cat's striate cortex.&quot; The Journal of physiology 148.3 (1959): 574.</span><a href="#fnref:15" rev="footnote"> ↩</a></li><li id="fn:16"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">16.</span><span style="display: inline-block; vertical-align: top;">Yamins, Daniel LK, and James J. DiCarlo. &quot;Using goal-driven deep learning models to understand sensory cortex.&quot; Nature neuroscience 19.3 (2016): 356-365.</span><a href="#fnref:16" rev="footnote"> ↩</a></li><li id="fn:17"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">17.</span><span style="display: inline-block; vertical-align: top;">Hinton, Geoffrey E., et al. &quot;Improving neural networks by preventing co-adaptation of feature detectors.&quot; arXiv preprint arXiv:1207.0580 (2012).</span><a href="#fnref:17" rev="footnote"> ↩</a></li><li id="fn:18"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">18.</span><span style="display: inline-block; vertical-align: top;">Sutton, Richard S., and Andrew G. Barto. Reinforcement learning: An introduction. MIT press, 2018.</span><a href="#fnref:18" rev="footnote"> ↩</a></li><li id="fn:19"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">19.</span><span style="display: inline-block; vertical-align: top;">O'Doherty, John P., et al. &quot;Temporal difference models and reward-related learning in the human brain.&quot; Neuron 38.2 (2003): 329-337.</span><a href="#fnref:19" rev="footnote"> ↩</a></li><li id="fn:20"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">20.</span><span style="display: inline-block; vertical-align: top;">Schultz, Wolfram, Peter Dayan, and P. Read Montague. &quot;A neural substrate of prediction and reward.&quot; Science 275.5306 (1997): 1593-1599.</span><a href="#fnref:20" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20201104/brain-2029391_1280.png&quot; class=&quot;img-middle-size&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/openclipart-vectors-30
      
    
    </summary>
    
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="秋ブログ週間" scheme="https://future-architect.github.io/tags/%E7%A7%8B%E3%83%96%E3%83%AD%E3%82%B0%E9%80%B1%E9%96%93/"/>
    
      <category term="人工知能" scheme="https://future-architect.github.io/tags/%E4%BA%BA%E5%B7%A5%E7%9F%A5%E8%83%BD/"/>
    
      <category term="神経科学" scheme="https://future-architect.github.io/tags/%E7%A5%9E%E7%B5%8C%E7%A7%91%E5%AD%A6/"/>
    
      <category term="深層学習" scheme="https://future-architect.github.io/tags/%E6%B7%B1%E5%B1%A4%E5%AD%A6%E7%BF%92/"/>
    
      <category term="強化学習" scheme="https://future-architect.github.io/tags/%E5%BC%B7%E5%8C%96%E5%AD%A6%E7%BF%92/"/>
    
  </entry>
  
  <entry>
    <title>フューチャーでjobsバイト、競プロ入社を経験して</title>
    <link href="https://future-architect.github.io/articles/20201102/"/>
    <id>https://future-architect.github.io/articles/20201102/</id>
    <published>2020-11-01T15:00:00.000Z</published>
    <updated>2020-11-26T01:36:28.433Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20201102/thumbnail.png" class="img-small-size"><p>SAIGの金子です。</p><p>この記事は<a href="https://future-architect.github.io/articles/20201026/">秋のブログ週間</a>連載の第5弾です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><h2 id="想定読者"><a href="#想定読者" class="headerlink" title="想定読者"></a>想定読者</h2><ul><li><a href="https://atcoder.jp/contests/future-contest-2021-qual" target="_blank" rel="noopener">HACK TO THE FUTURE</a>等でフューチャーに興味を持った競プロerの方</li><li>純粋培養競技プログラマが就職するとどうなるのかが気になる方。</li></ul><h2 id="自己紹介"><a href="#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h2><p>2020年4月に入社した金子と申します。大学は薬学部出身で、入社までは競技プログラミングやデータ分析コンペを通じてプログラミングを勉強していた純粋培養型？の競技プログラマです。普段競技プログラミングはアルゴ、データ分析の他にマラソンやゲームAIのコンペにも参加しています。</p><h2 id="フューチャー・SAIGについて"><a href="#フューチャー・SAIGについて" class="headerlink" title="フューチャー・SAIGについて"></a>フューチャー・SAIGについて</h2><p>フューチャーはITによる問題解決を行う独立系のITコンサルティングファームです。ITコンサルティングファームは経営戦略に基づくIT戦略の立案から、実際のシステムの企画やITインフラの構築までを行っており、特にフューチャーはベンダーのグループ会社に属さない中立の立場からコンサルティングを行っています。</p><p><a href="https://youtu.be/13QKht4SJcM" target="_blank" rel="noopener">フューチャーについての説明動画</a></p><p>フューチャーではプロジェクト毎にチームを作り業務を行っていますが、SAIGは複数のプロジェクトに渡って横断的にAIに取り組む人材を集めています。入社前に私はここでアルバイトをしていて、現在も<a href="https://jobs.atcoder.jp/offers/11" target="_blank" rel="noopener">AtCoderJobs</a>を通じて応募してくださったたくさんの競技プログラマが社員やアルバイトとして活躍しています。</p><h1 id="この記事の概要"><a href="#この記事の概要" class="headerlink" title="この記事の概要"></a>この記事の概要</h1><p>この記事ではまず私のフューチャーでの体験記を書き、次にフューチャーに興味のある方が気になりそうな項目について項目ごとにまとめていきます。</p><h1 id="アルバイト時代について"><a href="#アルバイト時代について" class="headerlink" title="アルバイト時代について"></a>アルバイト時代について</h1><p>入社前の約半年の間、私は内定者アルバイトを行っていました。</p><p>アルバイトの業務は私の競プロ特性に合わせて即戦力として働けるような業務が用意されていて、私は組み合わせ最適化でスケジューリングを行うエンジンの開発やデータ分析にとりくんでいました。</p><p>また競プロを業務に活かすだけでなく、業務で上長や他のアルバイトの書いた最適化のコードから技術を吸収することで競技プログラミングにおいても強くなることができました。</p><p>総じて、アルバイトは技術を磨いて活かすのにいい舞台だったと感じています。技術のサポート以外にもアルバイトでは月1で上長との1on1面談があり、就活や進路について相談もできるので、フューチャーの技術に興味のある学生は<a href="https://jobs.atcoder.jp/offers/11" target="_blank" rel="noopener">AtCoderJobsのページ</a>等を通じてカジュアルに相談を行ってみるといいと思います。</p><h1 id="入社・研修を経て"><a href="#入社・研修を経て" class="headerlink" title="入社・研修を経て"></a>入社・研修を経て</h1><p>Jobsバイトの時は競プロer向けに用意されたタスクを競プロerの社員やJobsバイトの仲間に囲まれて仕事をしていましたが、入社して競プロer以外との同期と接し、コンサルティング業務に関わる研修を受けるようになりました。</p><p>2020年に入社した100名超の社員の内プログラミング選考合格者は約3割で、その中には競プロ経験者が一定数いました。とはいえ大多数が非競プロerであり、かつフューチャーは(私から見て)体育会系の社員が多くいるので馴染めるかどうかが心配でした。</p><p>もし、競プロerの新人が私一人だったら趣味がよくわからないなんかヤベーやつで終わっていたかもしれません。</p><p>しかし、競プロerが複数同時期に入社したことで新人の間で「競技プログラミングとやらをきっかけに入社した集団がいるらしい」という事が広まっていきました。他の同期の競プロerの社会性は高く、研修内容について新人同士で教えあい、交流会を定期的に開催しているうちに新人内の競プロ認知率は100%になりました。今も入社してから競プロを始めたメンバーを含むチームで定期的にバチャコンを開催しています。</p><p><a href="https://note.future.co.jp/n/nda51c959f75a" target="_blank" rel="noopener">バチャコン</a><a href="https://note.future.co.jp/n/nda51c959f75a" target="_blank" rel="noopener">関連記事</a></p><h1 id="フューチャーの雰囲気について"><a href="#フューチャーの雰囲気について" class="headerlink" title="フューチャーの雰囲気について"></a>フューチャーの雰囲気について</h1><p>フューチャーの雰囲気については、プロジェクトごとに個性も変わって一概には言えないのですが、社全体としてイベント好きな空気を強く感じています。他人の好きなことを知りたい、自身の熱意を注いでいるものを伝えたいという社員が多く、この技術ブログの連載企画や競プロバチャ以外にも社内ではLT大会や勉強会等が頻繁に開催されています。</p><p>また、社内では年に一度<a href="https://note.future.co.jp/n/n7b0e5de1b2bc" target="_blank" rel="noopener">BPY(Best Project of the Year)</a>というイベントがあり、そこで自身の所属するプロジェクト以外が一年間なにをしてきていたかを知ることができます。</p><p>BPYは全社イベントですが、その他は任意イベントのため興味のあるイベントについてつまみ食いできるのが個人的にも好きなポイントです。</p><h1 id="技術以外で競プロが業務の役に立つことについて"><a href="#技術以外で競プロが業務の役に立つことについて" class="headerlink" title="技術以外で競プロが業務の役に立つことについて"></a>技術以外で競プロが業務の役に立つことについて</h1><p>フューチャーに入社してから仕事をするにあたって、気を付けるようになったことがあります。</p><p>AI案件についても初めから成果物の最終形が決まっている訳ではなく、顧客の要望から共に創り上げていくことが多いです。そのため、プロジェクトが始まった時はまず関連する書籍があれば読む、アプリ等があれば使う、店舗があれば実際に行くことを通してドメイン知識をひたすら集め、顧客やユーザーの視点を解像度高く持つことに気を付けるようになりました。</p><p>この作業は入社したての頃は苦手で、調査の仕方が分からず右往左往していました。ただ、この作業はデータ分析コンペでドメイン知識から予測対象のふるまいをモデル化する部分に通じるものがあり、アルゴリズムやテクニック以外で競プロの経験が活きる部分だと気づきました。業務と競プロは異なる部分が大きいのですが、楽しめる部分・活かせる要素は幅広くあると感じています。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>フューチャーで働き始めて約1年、社内に競プロが浸透しているおかげもあり楽しく業務に取り組めています。競プロで学んだ手法やスキルは業務に活用できる部分があり、かつ業務で学んだこと・興味を持ったことも競プロに活かせて良い循環を感じています。</p><p>一方でITコンサルティングには幅広いスキルが必要で、まだまだ自身の力不足勉強不足を日々痛感しています。社内には様々なスキルを持つ人がいるため、周囲のスキルを吸収しつつ社会にアルゴリズムで大きなインパクトを与えられるよう精進していけたらと思います。</p><p>ここまで読んでいただきありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20201102/thumbnail.png&quot; class=&quot;img-small-size&quot;&gt;

&lt;p&gt;SAIGの金子です。&lt;/p&gt;
&lt;p&gt;この記事は&lt;a href=&quot;https://future-architect.github.io/art
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="競技プログラミング" scheme="https://future-architect.github.io/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
      <category term="アルバイト" scheme="https://future-architect.github.io/tags/%E3%82%A2%E3%83%AB%E3%83%90%E3%82%A4%E3%83%88/"/>
    
      <category term="秋ブログ週間" scheme="https://future-architect.github.io/tags/%E7%A7%8B%E3%83%96%E3%83%AD%E3%82%B0%E9%80%B1%E9%96%93/"/>
    
  </entry>
  
</feed>
