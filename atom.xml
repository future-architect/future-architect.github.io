<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2021-02-22T02:19:23.563Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Auth0で認証成功後に任意のWebページを表示させたい</title>
    <link href="https://future-architect.github.io/articles/20210222/"/>
    <id>https://future-architect.github.io/articles/20210222/</id>
    <published>2021-02-21T15:00:00.000Z</published>
    <updated>2021-02-22T02:19:23.563Z</updated>
    
    <content type="html"><![CDATA[<p>TIG DX-Unit の先山です。</p><p><a href="https://auth0.com/jp/" target="_blank" rel="noopener">Auth0</a> を使ってアプリを構築しています。とある案件で、ユーザがログインした後に任意のページを表示させたいニーズがありました。こういった時はアプリ側でやってあげれなくもないのですが、複数のアプリが Auth0 で認証している場合には、アプリの数だけ改修が発生してしまいます。今回は context.redirect という Auth0 のユニークな機能を使って、改修を最小限に抑える方法を紹介します。</p><h1 id="Auth0とは？"><a href="#Auth0とは？" class="headerlink" title="Auth0とは？"></a>Auth0とは？</h1><img src="/images/20210222/top.png" class="img-middle-size"><p><a href="https://future-architect.github.io/articles/20200122/">Auth0導入編</a>をぜひ参照ください。他にも<a href="https://future-architect.github.io/tags/Auth0/">Auth0関連</a>の記事があります。</p><h1 id="context-redirect-機能紹介"><a href="#context-redirect-機能紹介" class="headerlink" title="context.redirect 機能紹介"></a>context.redirect 機能紹介</h1><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>Auth0 はユーザが認証成功時に任意の JavaScript スクリプトを実行する Rules を提供しています。引数の context に redirect パラメータをセットすることで、任意のWebページに画面遷移することが可能です。本来であれば redirect_uri にリダイレクトしてアプリケーションへ戻るのですが、その前に1つユーザアクションを介入させることができます。</p><p><a href="https://auth0.com/docs/rules/redirect-users" target="_blank" rel="noopener">Auth0公式ドキュメント - Redirect Users From Within Rules</a></p><p>全然関係ない URL にリダイレクトさせちゃうと、認証できなくなっちゃうんじゃないの？と思われるかもしれませんが。リダイレクト先にはクエリパラメータで <code>state={ハッシュ値}</code> が渡されます。この値を Auth0 側で管理しています。認証を再開するには Auth0テナントのドメインに <code>/continue?state={ハッシュ値}</code> という形式で画面遷移します。</p><h2 id="実装時の注意点"><a href="#実装時の注意点" class="headerlink" title="実装時の注意点"></a>実装時の注意点</h2><p>注意するべき点を紹介します。</p><ul><li>全ての Rules は2回実行されます。「context.redirect によってリダイレクトされる前」と「リダイレクトから戻ってきた後」の合計2回です。各 Rules が何度起動しても問題ないような実装をしましょう。</li><li>ある Rules で context.redirect にパラメータをセットしても、その Rules 終了後にリダイレクトが発生するわけではありません。全ての Rules の実行が終わってから context の中身が評価されリダイレクトが発生します。</li><li>context.redirect が有効なのは認証1回につき1度のみです。リダイレクトから戻ってきた後は、認証成功とともに callback_uri でアプリケーションへ戻ります。</li></ul><h2 id="ユースケース"><a href="#ユースケース" class="headerlink" title="ユースケース"></a>ユースケース</h2><p>Auth0 のドキュメントではユーザにパスワード更新を促す例が紹介されています。有効期限が短いトークンをクエリパラメータ経由で渡していますね。このやり方であればトークンが必要なAPIサーバとの通信もできますね。勉強になりました。これ以外にも、例えば利用規約の更新をユーザに表示させたい場合などにも使えそうです。</p><p><a href="https://auth0.com/docs/rules/redirect-users#force-password-change-example" target="_blank" rel="noopener">https://auth0.com/docs/rules/redirect-users#force-password-change-example</a></p><h1 id="サンプル実装"><a href="#サンプル実装" class="headerlink" title="サンプル実装"></a>サンプル実装</h1><p>ログイン画面で ID/Pass を入力成功した後、ある画面へ遷移させてユーザアクションを求め、ユーザがその画面で承諾しないと認証成功しないといったサンプルを実装します。Auth0 が提供する <a href="https://github.com/auth0-samples/auth0-vue-samples/tree/master/01-Login" target="_blank" rel="noopener">Vueのサンプル実装</a>を改造します。</p><h2 id="処理のフロー"><a href="#処理のフロー" class="headerlink" title="処理のフロー"></a>処理のフロー</h2><ul><li>アプリがログイン画面を開くいてログインを試行する</li><li>ログインが成功したら指定した localhost:3000/consent（以降、確認画面と呼びます）へリダイレクトして表示させる</li><li>確認画面でユーザが “Yes” をクリックしたら再び Auth0 の認証処理を再び実行させ、認証成功してアプリへ戻る</li><li>“Yes” と回答したユーザは、次回以降のログインではその確認はせず、認証を成功させる</li><li>（もし確認画面で “No” をクリックした場合は認証エラーにする）</li></ul><h2 id="Rules-実装"><a href="#Rules-実装" class="headerlink" title="Rules 実装"></a>Rules 実装</h2><p>まず１つ目の Rules です。ユーザメタデータに <code>{ agreed: &quot;yes&quot; }</code> が含まれているか否かでステータス管理を行います。もし <code>agreed</code> が定義されてなかったり違う値だったりした場合は、<code>context.redirect</code> に遷移先のURLを代入して確認画面へリダイレクトさせます。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> metadata = user.app_metadata || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// すでに規約同意している場合は何もせず終了</span></span><br><span class="line">  <span class="keyword">if</span> (metadata.agreed) &#123;</span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  context.redirect = &#123;</span><br><span class="line">    url: <span class="string">"http://localhost:3000/consent"</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>２つ目の Rules です。ここには確認画面から戻ってきた時の処理を書いています。確認画面から戻ってきた時のみ起動して欲しいので、 <code>context.protocol</code> の中身をチェックしてから実行するかの判定をしています。クエリパラメータからユーザの回答を受け取り、メタデータ更新を行ってから認証成功させてます。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// context.redirect からの再開でない場合は本処理を終了する</span></span><br><span class="line">  <span class="keyword">if</span> (context.protocol &amp;&amp; context.protocol !== <span class="string">"redirect-callback"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// クエリパラメータを取得</span></span><br><span class="line">  <span class="keyword">const</span> request = context.request || &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> query = request.query || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ユーザが同意すれば認証成功</span></span><br><span class="line">  <span class="keyword">if</span> (query.answer &amp;&amp; query.answer === <span class="string">"yes"</span>) &#123;</span><br><span class="line">    user.app_metadata = user.app_metadata || &#123;&#125;;</span><br><span class="line">    user.app_metadata.agreed = <span class="string">"yes"</span>;</span><br><span class="line">    auth0.users.updateAppMetadata(user.user_id, user.app_metadata)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        callback(<span class="literal">null</span>, user, context);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        callback(err);</span><br><span class="line">      &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ユーザが拒否すれば認証失敗</span></span><br><span class="line">  <span class="keyword">return</span> callback(<span class="keyword">new</span> UnauthorizedError(<span class="string">"同意しないと使えません"</span>), user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue-実装"><a href="#Vue-実装" class="headerlink" title="Vue 実装"></a>Vue 実装</h2><p>確認画面の実装はこんな感じです。Rules からこの画面にリダイレクトされた場合はクエリパラメータに <code>state=ハッシュ値</code> が付いています。なので <code>state</code> がない場合にはエラー画面へ遷移させちゃってます。ボタンをクリックしたら再び Auth0 へ遷移するように、<code>https://{Auth0ドメイン}/continue?state={ハッシュ値}</code> という URL を作成しています。</p><figure class="highlight html"><figcaption><span>vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>アプリケーションの利用を継続しますか？<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent</span>=<span class="string">"clickYes"</span> <span class="attr">class</span>=<span class="string">"button-a"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent</span>=<span class="string">"clickNo"</span> <span class="attr">class</span>=<span class="string">"button-a"</span>&gt;</span>No<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; domain &#125; <span class="keyword">from</span> <span class="string">"../../auth_config.json"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">"consent"</span>,</span></span><br><span class="line">  computed: &#123;</span><br><span class="line"><span class="actionscript">    query: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.$route.query;</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    state: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="keyword">this</span>.query &amp;&amp; <span class="keyword">this</span>.query.state) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">this</span>.query.state</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="literal">null</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    state: &#123;</span><br><span class="line"><span class="actionscript">      immediate: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">      handler: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (!<span class="keyword">this</span>.state) &#123;</span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.$router.replace(<span class="string">"/error"</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="actionscript">    clickYes: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      location.href = <span class="string">`https://<span class="subst">$&#123;domain&#125;</span>/continue?state=<span class="subst">$&#123;<span class="keyword">this</span>.state&#125;</span>&amp;answer=yes`</span>;</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    clickNo: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      location.href = <span class="string">`https://<span class="subst">$&#123;domain&#125;</span>/continue?state=<span class="subst">$&#123;<span class="keyword">this</span>.state&#125;</span>&amp;answer=no`</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="動かしてみる"><a href="#動かしてみる" class="headerlink" title="動かしてみる"></a>動かしてみる</h2><p>アプリケーションを起動して Login をクリックします。Google アカウントを使ってログインする画面が表示されたので、ログインを行います。</p><img src="/images/20210222/Screen_Shot_2021-02-17_at_21.45.47.png" style="border:solid 1px #000000"><p><code>Googleで続ける</code> をクリックしたら想定通り <code>localhost:3000/consent?status=...</code> にリダイレクトされ確認画面が表示しました。Yes をクリックして再び Auth0 での認証を継続します。</p><img src="/images/20210222/Screen_Shot_2021-02-17_at_21.48.01.png" style="border:solid 1px #000000"><p>同意ダイアログが表示しました。許可を押すとログインが完了します。（localhost で起動したアプリケーションは初回ログインで表示される仕様です。実際の Auth0 設定では audience をちゃんと指定して、Consent Skip を有効にしておけばこの画面はスキップされます）</p><img src="/images/20210222/Screen_Shot_2021-02-17_at_21.48.07.png" style="border:solid 1px #000000"><p>ログインが完了しました！プロフィール画面から IDトークンの中身を見ることができるので、無事に成功している様子です。</p><img src="/images/20210222/Screen_Shot_2021-02-17_at_21.48.48.png" style="border:solid 1px #000000"><p>ちなみに確認画面で No をクリックした場合は Rules で認証エラーにしてます。クエリパラメータに <code>error=unauthorized</code> <code>error_description=同意しないと使えません</code> でエラー内容を通知してます。</p><img src="/images/20210222/Screen_Shot_2021-02-17_at_21.49.36.png" style="border:solid 1px #000000"><h2 id="state-の有効期限"><a href="#state-の有効期限" class="headerlink" title="state の有効期限"></a>state の有効期限</h2><p>これはわかりませんでした。試しに 30 分待ってみたのですが、有効期限切れなどなく認証が継続できました。</p><h1 id="実際にあったトラブル"><a href="#実際にあったトラブル" class="headerlink" title="実際にあったトラブル"></a>実際にあったトラブル</h1><p>すでに稼働しているアプリケーションに context.redirect を適用する場合は、ちょっと注意が必要です。</p><p>これは私が実際にテストで検知したものです。現在、私がメンテしているアプリケーションは Vue.js と <a href="https://github.com/auth0/auth0-spa-js" target="_blank" rel="noopener">auth0-spa-js</a> で構築したものなのですが、context.redirect で画面遷移を追加したことにより、Auth0 の Silent Authentication でエラーが発生してしまいました。（しっかりテストを行って正解でした！）</p><p><a href="https://auth0.com/docs/authorization/configure-silent-authentication" target="_blank" rel="noopener">Silent Authentication</a> の詳細な説明は割愛しますが、「Auth0で設定した認証の有効期限内であれば、ログイン画面をスキップしてユーザを自動ログインさせる機能」と思ってください。</p><p>導入前のアプリの振る舞いは、ユーザが認証有効期限内であれば自動ログインを行うものでした。この改修によって、リダイレクト先画面でユーザアクションが必要になってしまったため、Silent Authentication は <code>interaction_required</code> を出力しました。原因は auth0-spa-js のバージョンが 1.8.0 と前バージョンのものだったため、このエラーをキャッチする処理が実装されていませんでした。最新版はエラーを網羅的にハンドリングしている習性が入っていたので、ライブラリをバージョンアップすることで解決しました。（ご参考までに、修正対応がされていたコードは<a href="https://github.com/auth0/auth0-spa-js/blob/v1.13.6/src/Auth0Client.ts#L593" target="_blank" rel="noopener">こちら</a>です）</p><h1 id="これ以外の実現方法の紹介"><a href="#これ以外の実現方法の紹介" class="headerlink" title="これ以外の実現方法の紹介"></a>これ以外の実現方法の紹介</h1><p>私が思いつく限りをあげてみます。</p><p><strong>Universal Login をカスタマイズする</strong></p><p>独自のhtmlを実装して、ログイン画面に利用規約を一緒に表示させる方法です。<br>ただし、この html ソースの管理やメンテナンスが発生するので、おすすめ度は中くらいです。</p><p><strong>アプリ側で制御する</strong></p><p>IDトークンに規約同意済フラグのようなパラメータを設けて、アプリ側でそのパラメータを見て利用規約を表示する・しないを制御する方法です。この方法でも実現は可能ですが、アプリごとに対応が必要であるため、メンテナンスが大変になります。運用するアプリが1つなど少ない場合には、context.redirect でコントロールするよりシンプルかもしれません。</p><p><strong>同意ダイアログに表示する</strong></p><p>3rdパーティアプリでログインさせるときに<a href="https://auth0.com/docs/authorization/user-consent-and-third-party-applications" target="_blank" rel="noopener">同意ダイアログ</a>を表示させることが可能です。ちょっと無理矢理ですが、この画面に任意の文字を表示することは可能であるため、それを利用します。しかし、3rdパーティのみに限定されてしまう点と、ダイアログという小さいエリアに向いていない使い方のため、おすすめ度は低いです。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200123/index.html" data-iframely-url="//cdn.iframe.ly/6rr8LwH?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200128/index.html" data-iframely-url="//cdn.iframe.ly/sNQz5Cd?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIG DX-Unit の先山です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://auth0.com/jp/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Auth0&lt;/a&gt; を使ってアプリを構築しています。とある案件で、ユーザがログインした後に任意の
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
  </entry>
  
  <entry>
    <title>リモートネイティブ世代が考えるリモートワーク設備</title>
    <link href="https://future-architect.github.io/articles/20210219/"/>
    <id>https://future-architect.github.io/articles/20210219/</id>
    <published>2021-02-18T15:00:00.000Z</published>
    <updated>2021-02-19T01:59:40.791Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20210118/">リモートワーク環境連載</a>の3弾目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG/DXユニットの富山です。</p><p>私は2020年4月新卒入社で、入社時からリモートワークが基本のリモートネイティブ世代です。自分なりに快適に仕事を行える自宅作業環境を入社してから少しづつ構築したのでご紹介します。</p><p>少しでも参考になれば嬉しいです！</p><h2 id="デスク構築の考え方"><a href="#デスク構築の考え方" class="headerlink" title="デスク構築の考え方"></a>デスク構築の考え方</h2><p>以下の3点を意識してアイテム選定・構築しました。</p><ol><li>必要最低限のものしかデスクに置かない</li><li>椅子には投資する</li><li>なるべくコードレスに</li></ol><h2 id="現在のデスク"><a href="#現在のデスク" class="headerlink" title="現在のデスク"></a>現在のデスク</h2><p>2021年1月末時点では、このようなデスクになっています。<br>今回は、下記①〜⑧について紹介します。<br><img src="/images/20210219/e9e7dec4-20b1-60a6-4952-e9da500e23e0.png" alt=""><br>① モニター・モニターアーム<br>② 椅子<br>③ 昇降式デスク<br>④ キーボード<br>⑤ トラックパッド<br>⑥ スピーカー<br>⑦ クラムシェル用PCスタンド<br>⑧ 空気清浄機</p><h3 id="①-モニター・モニターアーム"><a href="#①-モニター・モニターアーム" class="headerlink" title="① モニター・モニターアーム"></a>① モニター・モニターアーム</h3><h4 id="モニター"><a href="#モニター" class="headerlink" title="モニター"></a>モニター</h4><p>モニターは枚数が多ければ多いほどよいと思いますが、私は現在2枚のモニターを使用しています。</p><p>使用しているのは<a href="https://www.amazon.co.jp/%E3%83%87%E3%82%A3%E3%82%B9%E3%83%97%E3%83%AC%E3%82%A4-GW2780-%E3%83%96%E3%83%AB%E3%83%BC%E3%83%A9%E3%82%A4%E3%83%88%E8%BB%BD%E6%B8%9B-%E8%BC%9D%E5%BA%A6%E8%87%AA%E5%8B%95%E8%AA%BF%E6%95%B4B-I-%E6%8A%80%E8%A1%93%E6%90%AD%E8%BC%89-HDMI1-4/dp/B07D79519M/ref=sr_1_1?adgrpid=98159911085&dchild=1&gclid=Cj0KCQiAx9mABhD0ARIsAEfpavQkaDTaFXLEAXQ1nuNXn0uuasVLLJzwApKdwUzbtE9xvBegNAiX2i8aAtApEALw_wcB&hvadid=429994317584&hvdev=c&hvlocphy=1009309&hvnetw=g&hvqmt=e&hvrand=6386477162357026011&hvtargid=kwd-506728426505&hydadcr=9353_11298745&jp-ad-ap=0&keywords=%E3%83%99%E3%83%B3%E3%82%AD%E3%83%A5%E3%83%BC+27%E3%82%A4%E3%83%B3%E3%83%81&qid=1612096811&sr=8-1&tag=googhydr-22" target="_blank" rel="noopener">BenQ GW2780 27inch</a>です。BenQのコスパは最強です。<br><img src="/images/20210219/3abc1945-342b-326b-b7e3-bc144defba27.png" alt=""></p><h4 id="モニターアーム"><a href="#モニターアーム" class="headerlink" title="モニターアーム"></a>モニターアーム</h4><p>一般的に、モニターの台座はそこそこスペースを消費します。また、個人的にコードを読む時は縦画面のほうが表示できる行数が多くなり好みなので、柔軟にモニターを動かせるモニターアームの導入は必須でした。使用しているのは<a href="https://www.amazon.co.jp/gp/product/B07W3KK949/ref=ppx_yo_dt_b_asin_title_o01_s00?ie=UTF8&psc=1" target="_blank" rel="noopener">HUANUO ガススプリング式モニターアーム</a>です。少々ゴツいですが、最低限のスペースでしっかりとモニターを支えてくれています。<br><img src="/images/20210219/803579c2-c774-f57a-3ebc-9fb32fcc08a4.png" alt=""></p><p>※ モニターアームで使用したい場合、<a href="https://ja.wikipedia.org/wiki/VESA" target="_blank" rel="noopener">VESA規格</a>に対応しているモニターを用意する必要があります。これから導入される方はご注意ください。</p><h3 id="②-椅子"><a href="#②-椅子" class="headerlink" title="② 椅子"></a>② 椅子</h3><p>椅子は投資です（たぶん）。短期間で壊れることはそうないでしょうし、正しい姿勢に導いてもらうことにより、アウトプットの質があがります（たぶん）。<br>私が使用しているのは<a href="https://www.amazon.co.jp/%E3%83%8F%E3%83%BC%E3%83%9E%E3%83%B3%E3%83%9F%E3%83%A9%E3%83%BC-%E3%82%A2%E3%83%BC%E3%83%AD%E3%83%B3%E3%83%81%E3%82%A7%E3%82%A2-%E3%83%AA%E3%83%9E%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%89-%E3%83%9D%E3%82%B9%E3%83%81%E3%83%A3%E3%83%BC%E3%83%95%E3%82%A3%E3%83%83%E3%83%88SL-AER1B23DW/dp/B01MUZOWBH/ref=sr_1_1_sspa?dchild=1&keywords=%E3%82%A2%E3%83%BC%E3%83%AD%E3%83%B3%E3%83%81%E3%82%A7%E3%82%A2&qid=1612097772&sr=8-1-spons&psc=1&spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUFNNFRHRlNRRTg2TjYmZW5jcnlwdGVkSWQ9QTA3Mzg3MDNJWDVXREtDVTA1S1ImZW5jcnlwdGVkQWRJZD1BUTZQRFJJQ1pRSlNPJndpZGdldE5hbWU9c3BfYXRmJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==" target="_blank" rel="noopener">Herman Miller アーロンチェア</a>です。MoMAパーマネントコレクションに認定された、キングofデスクチェアです。（こういうのに弱い）</p><p>信じられない値段がしますが、将来の自分を信じて購入しました。</p><p>導入した結果としては最高です。身体がまったく痛くならならず、永遠に座っていられます。<br>アウトプットの質もあがった..はず…。<br><img src="/images/20210219/fb2e94ce-1e9c-acab-b1e0-e253a5452e91.png" alt=""></p><h3 id="③-昇降式デスク"><a href="#③-昇降式デスク" class="headerlink" title="③ 昇降式デスク"></a>③ 昇降式デスク</h3><p>椅子が最高と言っても自宅だと集中力が途切れてしまったり、体勢を変えたいシーンがあります。そんなときに昇降式デスクです。スタンディングでの作業は思いの外捗ります。使用しているのは<a href="amazon.co.jp/gp/product/B07HBWGGMH/ref=ppx_yo_dt_b_asin_title_o03_s00?ie=UTF8&psc=1">FlexiSpot 電動式スタンディングデスク</a>です。デスク脚のみ購入し、天板は好みのサイズの板を脚の上に乗せています。デスク脚だけにも関わらず結構いいお値段がしますが、満足しています。<br>余談ですが、組み立ての難易度が結構高いです。<br><img src="/images/20210219/241c76fa-6ca1-597d-ad22-ba276fdfe3b8.png" alt=""></p><h3 id="④-キーボード"><a href="#④-キーボード" class="headerlink" title="④ キーボード"></a>④ キーボード</h3><p>弊社ではしばしばキーボード宗教戦争や布教運動が起こりますが、私は<a href="https://www.amazon.co.jp/HHKB-Professional-HYBRID-%E7%84%A1%E5%88%BB%E5%8D%B0%EF%BC%8F%E5%A2%A8%EF%BC%88%E8%8B%B1%E8%AA%9E%E9%85%8D%E5%88%97%EF%BC%89-PD-KB800BNS/dp/B082TWFV9C/ref=pd_sbs_2?pd_rd_w=F45k5&pf_rd_p=10c006f1-d300-414f-a419-f9006b54dbbc&pf_rd_r=B50GGXATBN2230C1WGY0&pd_rd_r=3f13515c-273a-43a8-a493-7499e0cde68a&pd_rd_wg=M4Fzj&pd_rd_i=B082TWFV9C&psc=1" target="_blank" rel="noopener">HHKB Professional HYBRID Type-S</a>を使用しています。</p><p>実はHHKBは弊デスク2代目で、既に私の手はHHKB意外との互換性を持たなくなりました。無刻印の厨二病さに加え、コンパクトで打鍵感も最高です。ただBluetoothでの接続が基本なので、稀に入力が遅れたり、謎に連打されてしまう現象が起こります。（有線でも使えますが、「なるべくコードレスに」を遵守しているため我慢しています。）<br><img src="/images/20210219/4b48240c-1f98-3d5c-7287-19de1022e676.png" alt=""></p><h3 id="⑤-トラックパッド"><a href="#⑤-トラックパッド" class="headerlink" title="⑤ トラックパッド"></a>⑤ トラックパッド</h3><p><a href="https://www.amazon.co.jp/dp/B07DPGK3B3/ref=twister_B08V23SH6P?_encoding=UTF8&psc=1" target="_blank" rel="noopener">Apple Magic Tracpad2</a>を使用しています。単純にカッコいいという理由だけで使用しています。<br><img src="/images/20210219/163c170e-2849-f253-f31a-3f45b818f7ca.png" alt=""></p><h3 id="⑥-スピーカー"><a href="#⑥-スピーカー" class="headerlink" title="⑥ スピーカー"></a>⑥ スピーカー</h3><p>たまに音楽を聞きながら作業したくなるので、スピーカーも導入しています。<br>使用しているのは、<a href="https://www.amazon.co.jp/dp/B08PF4BDDG/ref=twister_B08T6YGDYN?_encoding=UTF8&psc=1" target="_blank" rel="noopener">Bose SoundLink Revolve II</a>です。コンパクトで音も素晴らしいので重宝しています。<br>もちろんBluetoothです。無線だとアウトドアにも使えるのでおすすめです。<br><img src="/images/20210219/31aace4b-85b0-7fbd-fd66-92cdb4546acd.png" alt=""></p><h3 id="⑦-クラムシェル用スタンド"><a href="#⑦-クラムシェル用スタンド" class="headerlink" title="⑦ クラムシェル用スタンド"></a>⑦ クラムシェル用スタンド</h3><p>私のデスクには2つのラップトップ（MBP 16・13インチそれぞれ1台ずつ)があり、平置きするとかなりの場所を消費します。幸いMacにはPCを閉じた状態でも諸条件をクリアすればデスクトップのように使用できるクラムシェルがあるため、ラップトップを立てられるスタンドを導入しています。おかげでかなりスペースを確保できましたが、ラップトップが熱を持ちやすくなってしまうため、解決策を模索中です…<br>使用しているのは<a href="https://www.amazon.co.jp/gp/product/B08LGWG21K/ref=ppx_yo_dt_b_asin_title_o01_s01?ie=UTF8&psc=1" target="_blank" rel="noopener">BECROWM 4in1</a>です。ラップトップ2台分のスタンドがあります。<br><img src="/images/20210219/24b8650c-760d-ff88-01e8-f154e2404ba3.png" alt=""></p><h3 id="⑧-空気清浄機"><a href="#⑧-空気清浄機" class="headerlink" title="⑧ 空気清浄機"></a>⑧ 空気清浄機</h3><p>どんなに良いデスク環境を整えても空気が悪いと身体によくありません。加湿器機能付きのものが個人的におすすめです。目を閉じればそこに木々と川が見えます。使用しているのは<a href="https://www.amazon.co.jp/%E3%82%B7%E3%83%A3%E3%83%BC%E3%83%97-%E7%A9%BA%E6%B0%97%E6%B8%85%E6%B5%84%E6%A9%9F%E3%80%90%E5%8A%A0%E6%B9%BF%E6%A9%9F%E8%83%BD%E4%BB%98%E3%80%91%EF%BC%88%E7%A9%BA%E6%B8%8523%E7%95%B3%E3%81%BE%E3%81%A7-%E3%83%9B%E3%83%AF%E3%82%A4%E3%83%88%E7%B3%BB%EF%BC%89SHARP-%E3%80%8C%E3%83%97%E3%83%A9%E3%82%BA%E3%83%9E%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%83%BC7000%E3%80%8D%E6%90%AD%E8%BC%89-KC-L50-W/dp/B07Z8PRD4W/ref=sr_1_15?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=3FG5TIIN7YR9D&dchild=1&keywords=sharp+%E3%83%97%E3%83%A9%E3%82%BA%E3%83%9E%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%83%BC&qid=1613054441&sprefix=sharp+%E3%83%97%E3%83%A9%E3%82%BA%E3%83%9E%2Caps%2C162&sr=8-15" target="_blank" rel="noopener">シャープ プラズマクラスター</a>です。<br>1日の大半を自室で過ごすので、満足度はかなり高いです。<br><img src="/images/20210219/0449d246-7657-4a66-9bf9-242a86e3bbc5.png" alt=""></p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>つらつらとリモートワークに使用しているアイテムをご紹介しましたが、結局は「気分がアガるモノを揃える」に尽きると思っています。</p><p>まだまだ完成形には程遠く、現在抱えている課題は ①配線問題（いまはデスクの裏に無理やりまとめている）②Webカメラが無い問題 です。また機会があったらアップデートしたデスクをご紹介させてください！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20210118/&quot;&gt;リモートワーク環境連載&lt;/a&gt;の3弾目です。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="リモートワーク" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/"/>
    
  </entry>
  
  <entry>
    <title>AWS SDK for Goのリトライアルゴリズムを差し替える方法</title>
    <link href="https://future-architect.github.io/articles/20210218/"/>
    <id>https://future-architect.github.io/articles/20210218/</id>
    <published>2021-02-17T15:00:00.000Z</published>
    <updated>2021-02-22T02:08:40.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>本記事では<a href="https://github.com/aws/aws-sdk-go" target="_blank" rel="noopener">AWS SDK for Go</a>を使ってAWSのAPIをコールする場合のリトライアルゴリズムを差し替える方法を紹介します。</p><h1 id="AWS-SDK-for-Go-のリトライ"><a href="#AWS-SDK-for-Go-のリトライ" class="headerlink" title="AWS SDK for Go のリトライ"></a><code>AWS SDK for Go</code> のリトライ</h1><img src="/images/20210218/awsgo.png" class="img-middle-size"><p><code>AWS SDK for Go</code> のバージョンは <a href="https://github.com/aws/aws-sdk-go/releases/tag/v1.37.6" target="_blank" rel="noopener"><code>v1.37.6</code></a> です。</p><p>まず <code>AWS SDK for Go</code> を使ってAPIをコールする場合は、デフォルトでリトライするようになっています<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。そのため <code>AWS SDK for Go</code> を使うアプリケーション側でリトライを実装する必要はありません。<code>AWS SDK for Go</code> 上の実装は <a href="https://github.com/aws/aws-sdk-go/blob/v1.37.6/aws/client/default_retryer.go#L12-L36" target="_blank" rel="noopener"><code>client.DefaultRetryer</code></a> がリトライを実施します。リトライ時の待ち時間である <code>time.Duration</code> を計算するアルゴリズムは <code>RetryRules</code> メソッドとして実装されています。</p><p>待ち時間を計算するアルゴリズムはExponential Backoff And Jitter<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>です。</p><ul><li>リトライの再試行の待ち時間を計算する <code>RetryRules</code> メソッド</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RetryRules returns the delay duration before retrying this request again</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d DefaultRetryer)</span> <span class="title">RetryRules</span><span class="params">(r *request.Request)</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// if number of max retries is zero, no retries will be performed.</span></span><br><span class="line"><span class="keyword">if</span> d.NumMaxRetries == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sets default value for retryer members</span></span><br><span class="line">d.setRetryerDefaults()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// minDelay is the minimum retryer delay</span></span><br><span class="line">minDelay := d.MinRetryDelay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> initialDelay time.Duration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">isThrottle := r.IsErrorThrottle()</span><br><span class="line"><span class="keyword">if</span> isThrottle &#123;</span><br><span class="line"><span class="keyword">if</span> delay, ok := getRetryAfterDelay(r); ok &#123;</span><br><span class="line">initialDelay = delay</span><br><span class="line">&#125;</span><br><span class="line">minDelay = d.MinThrottleDelay</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">retryCount := r.RetryCount</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// maxDelay the maximum retryer delay</span></span><br><span class="line">maxDelay := d.MaxRetryDelay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isThrottle &#123;</span><br><span class="line">maxDelay = d.MaxThrottleDelay</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> delay time.Duration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Logic to cap the retry count based on the minDelay provided</span></span><br><span class="line">actualRetryCount := <span class="keyword">int</span>(math.Log2(<span class="keyword">float64</span>(minDelay))) + <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> actualRetryCount &lt; <span class="number">63</span>-retryCount &#123;</span><br><span class="line">delay = time.Duration(<span class="number">1</span>&lt;&lt;<span class="keyword">uint64</span>(retryCount)) * getJitterDelay(minDelay)</span><br><span class="line"><span class="keyword">if</span> delay &gt; maxDelay &#123;</span><br><span class="line">delay = getJitterDelay(maxDelay / <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">delay = getJitterDelay(maxDelay / <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> delay + initialDelay</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/aws/aws-sdk-go/blob/d8a5a9febe5602f134648c18e9f83546284cda35/aws/client/default_retryer.go#L77-L123" target="_blank" rel="noopener">https://github.com/aws/aws-sdk-go/blob/d8a5a9febe5602f134648c18e9f83546284cda35/aws/client/default_retryer.go#L77-L123</a></p><h3 id="デフォルトの設定"><a href="#デフォルトの設定" class="headerlink" title="デフォルトの設定"></a>デフォルトの設定</h3><p>デフォルトのリトライの設定は以下のようになっています。</p><table><thead><tr><th align="center">No</th><th>項目</th><th>説明</th><th>デフォルト値(単位)</th></tr></thead><tbody><tr><td align="center">1</td><td><code>NumMaxRetries</code></td><td>最大リトライ回数</td><td>3 (回)</td></tr><tr><td align="center">2</td><td><code>MinRetryDelay</code></td><td>リトライ時の最小の待ち時間</td><td>30 (ミリ秒)</td></tr><tr><td align="center">3</td><td><code>MinThrottleDelay</code></td><td>リトライスロットリング<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>時の最小の待ち時間</td><td>300 (ミリ秒)</td></tr><tr><td align="center">4</td><td><code>MaxRetryDelay</code></td><td>リトライ時の最大の待ち時間</td><td>300 (秒)</td></tr><tr><td align="center">5</td><td><code>MaxThrottleDelay</code></td><td>リトライスロットリング時の最大の待ち時間</td><td>300 (秒)</td></tr></tbody></table><h1 id="RetryRules-を差し替える"><a href="#RetryRules-を差し替える" class="headerlink" title="RetryRules を差し替える"></a><code>RetryRules</code> を差し替える</h1><p>基本的にはSDKが提供するデフォルトのリトライを実施することで問題ないでしょう。差し替えたくなるケースの一つは、リトライ回数を増やしてリトライエラーを発生させたくないケースです。(ただし、リトラリ回数を増やすことでリトライエラーを速やかに解消できる場合に限ります。)リトライ回数が増えると待ち時間が大きくなり、デフォルトの設定の場合最大で300秒です。特定のケースではなるべく早くリトライを試行したい場合があるでしょう。このような場合にリトライアルゴリズムを差し替える方法が役に立ちます。</p><h2 id="差し替える方法"><a href="#差し替える方法" class="headerlink" title="差し替える方法"></a>差し替える方法</h2><p><code>Config</code> の <code>Retryer</code> フィールドに値をセットすることで差し替えることができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// Retryer guides how HTTP requests should be retried in case of</span></span><br><span class="line"><span class="comment">// recoverable failures.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// When nil or the value does not implement the request.Retryer interface,</span></span><br><span class="line"><span class="comment">// the client.DefaultRetryer will be used.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// When both Retryer and MaxRetries are non-nil, the former is used and</span></span><br><span class="line"><span class="comment">// the latter ignored.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// To set the Retryer field in a type-safe manner and with chaining, use</span></span><br><span class="line"><span class="comment">// the request.WithRetryer helper function:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   cfg := request.WithRetryer(aws.NewConfig(), myRetryer)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">Retryer RequestRetryer</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/aws/aws-sdk-go/blob/d8a5a9febe5602f134648c18e9f83546284cda35/aws/config.go#L94-L108" target="_blank" rel="noopener">https://github.com/aws/aws-sdk-go/blob/d8a5a9febe5602f134648c18e9f83546284cda35/aws/config.go#L94-L108</a></p><p><code>Retryer</code> は <code>request.Retryer</code> を満たす型です。<code>Retryer</code> の実装上は <code>RequestRetryer</code> 型で <code>interface{}</code> 型へのDefined typeになっていますが、<code>request.Retryer</code> を満たしていない場合は <code>DefaultRetryer</code> が使われます。</p><p><code>client.DefaultRetryer</code> 構造体を埋め込んで <code>RetryRules</code> メソッドを実装する方法がおすすめです。構造体の埋め込みを利用して、委譲したいメソッドだけを実装する手法はGoではよく使われます。リトライするかどうかの判断基準 (<code>ShouldRetry</code>) はデフォルトの実装のままで、リトライの待ち時間の計算アルゴリズムのみを差し替えることができます。以下の実装は <a href="https://github.com/jpillora/backoff" target="_blank" rel="noopener"><code>jpillora/backoff</code></a> のシンプルな上限付きExponential Backoff And Jitterを使った実装です。</p><ul><li>retryer.go</li></ul><figure class="highlight go"><figcaption><span>retryer.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sample</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/client"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/request"</span></span><br><span class="line"><span class="string">"github.com/jpillora/backoff"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> customRetryer <span class="keyword">struct</span> &#123;</span><br><span class="line">*backoff.Backoff</span><br><span class="line">client.DefaultRetryer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCustomRetryer</span><span class="params">(cfg *backoff.Backoff, numRetries <span class="keyword">int</span>)</span> *<span class="title">customRetryer</span></span> &#123;</span><br><span class="line">r := &amp;customRetryer&#123;Backoff: cfg&#125;</span><br><span class="line">r.NumMaxRetries = numRetries</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cr customRetryer)</span> <span class="title">RetryRules</span><span class="params">(req *request.Request)</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> cr.Backoff.Duration()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ request.Retryer = &amp;customRetryer&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>main.go</li></ul><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/endpoints"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/session"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/service/lambda"</span></span><br><span class="line"><span class="string">"github.com/d-tsuji/go-sandbox/customretry/sample"</span></span><br><span class="line"><span class="string">"github.com/jpillora/backoff"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">lmd         *lambda.Lambda</span><br><span class="line">maxRetryNum = <span class="number">10</span> <span class="comment">// リトライ上限回数は環境変数などから取得</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">lmd = lambda.New(session.Must(session.NewSession(&amp;aws.Config&#123;</span><br><span class="line">Region:     aws.String(endpoints.ApNortheast1RegionID),</span><br><span class="line">MaxRetries: aws.Int(maxRetryNum),</span><br><span class="line">Retryer: sample.NewCustomRetryer(&amp;backoff.Backoff&#123;</span><br><span class="line">Min:    <span class="number">10</span> * time.Millisecond,</span><br><span class="line">Max:    <span class="number">300</span> * time.Millisecond,</span><br><span class="line">Factor: <span class="number">2</span>,</span><br><span class="line">Jitter: <span class="literal">true</span>,</span><br><span class="line">&#125;, maxRetryNum),</span><br><span class="line">&#125;)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のようにリトライアルゴリズムを差し替えることができます。もちろん <code>client.DefaultRetryer</code> を使って、リトライの設定(<code>client.DefaultRetryer</code> の <code>MaxRetryDelay</code> など)を変えることによってリトライの待ち時間の計算に影響を及ぼすこともできます。<code>AWS SDK for Go</code> が提供するデフォルトのリトライアルゴリズム・設定ではパフォーマンス上の問題があるケースなど、リトライのアルゴリズムや設定を差し替えたい場合に本記事が参考になれば幸いです。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200121/index.html" data-iframely-url="//cdn.iframe.ly/raMwXJI?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20201112/index.html" data-iframely-url="//cdn.iframe.ly/l2eSPH0?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">https://docs.aws.amazon.com/ja_jp/general/latest/gr/api-retries.html</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">https://aws.amazon.com/jp/blogs/architecture/exponential-backoff-and-jitter/</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">リトライスロットリングが何かという説明は<a href="https://aws.amazon.com/jp/blogs/developer/introducing-retry-throttling/" target="_blank" rel="noopener">Introducing Retry Throttling</a>や<a href="https://future-architect.github.io/articles/20200121/">スロットリングとの付き合い方</a>を参照</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;本記事では&lt;a href=&quot;https://github.com/aws/aws-sdk-go&quot; target=&quot;_blan
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="リトライ" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%88%E3%83%A9%E3%82%A4/"/>
    
      <category term="aws" scheme="https://future-architect.github.io/tags/aws/"/>
    
  </entry>
  
  <entry>
    <title>プログラミング英会話 基礎</title>
    <link href="https://future-architect.github.io/articles/20210217/"/>
    <id>https://future-architect.github.io/articles/20210217/</id>
    <published>2021-02-16T15:00:00.000Z</published>
    <updated>2021-02-22T02:08:36.333Z</updated>
    
    <content type="html"><![CDATA[<h1 id="プログラミング英会話-基礎"><a href="#プログラミング英会話-基礎" class="headerlink" title="プログラミング英会話 [基礎]"></a>プログラミング英会話 [基礎]</h1><p>こんにちは！英語大好き優輝です。</p><p>今回はカナダの大学でコンピュータ・サイエンスを学んだ経験から、英語でIT会話をする基礎を書こうと思います。</p><p>プログラミングやIT表現を練習をしましょう！</p><img src="/images/20210217/giraffes-627031_1280.jpg"><p><a href="https://pixabay.com/ja/users/sponchia-443272/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=627031" target="_blank" rel="noopener">Christine Sponchia</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=627031" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h2 id="この記事について"><a href="#この記事について" class="headerlink" title="この記事について"></a>この記事について</h2><p>この記事は、「プログラミングを英語で話すこと」を目的として練習する記事です。</p><p>記事の中では日本語に対応する英語を隠してあるので、まず頭の中で日本語を英語に変換してみてから英訳をみてみてください。「読める」ことを目標にした場合はレベル感が落ちてしまうことを了承ください。「話せる」ことで世界のプログラマーと対話できるように練習しましょう！</p><h2 id="まずは試してみる"><a href="#まずは試してみる" class="headerlink" title="まずは試してみる"></a>まずは試してみる</h2><p>“What do you do?”（仕事何してるの）と聞かれたときに「プログラミングを職業にしていること」を伝える3種類の英文を次の条件にしたがって考えてみてください。</p><p>条件: ３つ全ての文にprogramという文字列を必ず含こと。</p><details><summary>解答例</summary><div><p>I program. (動詞の例)<br>I write programs. (名詞の例)<br>I am a programmer. (erを付けてプログラマーとしている例)<br>※他にも回答はあります</p></div></details><p>どうですか？</p><p>シンプルな英語ですが、自分がプログラマであることを表現できます。日本語もそうですが、単語の品詞を変えて英文を作るのが自由に英語を話すコツです。</p><h2 id="エクササイズ"><a href="#エクササイズ" class="headerlink" title="エクササイズ"></a>エクササイズ</h2><p>programの他にcodeという単語も同じ様に使います。</p><p>program[名][動]=プログラム/プログラムする<br>code[名][動]= コード/コーディングする</p><p>programもcodeも名詞の場合は加算です。文法に注意して英文を作ってみましょう。</p><h3 id="名詞扱いの例"><a href="#名詞扱いの例" class="headerlink" title="名詞扱いの例"></a>名詞扱いの例</h3><p>「私は１つプログラムを書いた。」</p><details><summary>英文表示</summary><div>I wrote a program.※数えられるので、1つだとaが付きます。</div></details><p>「私は２つプログラムを書いた。」</p><details><summary>英文表示</summary><div>I wrote two programs.※単数、複数も意識するとよいでしょう。</div></details><h3 id="動詞扱いの例"><a href="#動詞扱いの例" class="headerlink" title="動詞扱いの例"></a>動詞扱いの例</h3><p>「私はプログラミング/コーディングが好きだ。」</p><details><summary>英文表示</summary><div>I like programming.I like coding.※動詞なので現在分詞ingにして動名詞です。</div></details><p>「私は週末プログラミングする。」</p><details><summary>英文表示</summary><div>I program on the weekend.I code on the weekend.</div></details><p>「私は昨日アプリをプログラムした。」</p><details><summary>英文表示</summary><div>I programmed an app yesterday.※アプリはきっと一つ作っているので単数系、母音で始まる単語なのでanを使いましょう。</div></details><p>「私は３年間プログラミングしている。」</p><details><summary>英文表示</summary><div>I have been programming for three years.※動作系の動詞の現在完了進行系です。覚えてますか。※have + be + VingでずっとVしている。を表現します。</div></details><p>programが動詞として使われるということはもちろん、原形、過去形、過去分詞(ed)、現在分詞(ing)があるということです。</p><p>「このコードは彼女によってプログラムミングされた。」</p><details><summary>英文表示</summary><div>This code was programmed by her. </div></details><p>「彼は今プログラミングしている。」</p><details><summary>英文表示</summary><div>He is programming now.</div></details><p>programやcodeを動詞として使いこなせれば、色んな表現ができるようになります。</p><h2 id="ググる"><a href="#ググる" class="headerlink" title="ググる"></a>ググる</h2><p>次に、プログラムではないですがプログラマに必須の「ググる(インターネットで調べること)」についてみてみましょう。</p><p>プログラミングの勉強や開発で分からないことがあったとき、分かる人にを質問するシチュエーションです。</p><p>あなたが質問をします。<br>そうすると、聞かれた彼はこう答えます。<br>「それググった？」</p><details><summary>英文表示</summary><div>Did you google it?</div></details><p>そしてあなたはこう答えます。<br>「昨日何回もググったけど、なにもなかった。」</p><details><summary>英文表示</summary><div>I googled it many times yesterday, but there was nothing.※nothingは単数扱いなのでwasになっています。</div></details><p>日本人はGoogleを動詞化して「ググる」として使っていますが、<br>Googleはそのままgoogleという動詞使っていますね。</p><p>「今ググってるよ」と言いたければこんな感じです。</p><details><summary>英文表示</summary><div>I am googling it right now.</div></details><p>参考</p><details><summary>googleの活用</summary><div>google　ググる 原型googled　ググった　過去形googled　ググられた　過去分詞googling　ググってる　現在分詞</div></details><p>他にも<br>「インスタに投稿した。」</p><details><summary>英文表示</summary><div>I instagrammed.</div></details>「それツイートされてたよ。」<details><summary>英文表示</summary><div>That was tweeted.</div></details>など使われているのを聞くかもしれません。<h2 id="プログラミングを英語で言ってみる"><a href="#プログラミングを英語で言ってみる" class="headerlink" title="プログラミングを英語で言ってみる"></a>プログラミングを英語で言ってみる</h2><p>それではコードを見ながらプログラミング表現を英語で考えてみましょう。<br>サンプルコードはJavaです。<br>※ヒントを用意しましたが、まずはヒントなしで考えてみてください。<br>※主語が明示されていないときはIを主語で英訳を書いています。<br>例:「それを食べた」=&gt; I ate it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int score;</span><br></pre></td></tr></table></figure><details><summary>ヒント表示</summary><div>変数=variable [名]定義する=define [動]</div></details><p>「変数を定義する」</p><details><summary>英文表示</summary><div>I define a variable</div></details><p>「int型の変数を定義する」</p><details><summary>英文表示</summary><div>I define a variable of type int.</div></details><p>「scoreという名前の変数を定義する」</p><details><summary>英文表示</summary><div>I define a variable named "score".</div></details><p>「 scoreという名前の変数を定義した。」</p><details><summary>英文表示</summary><div>I defined a variable of type int named "score".</div></details><figure class="highlight java"><figcaption><span>Sample.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">90</span>;</span><br></pre></td></tr></table></figure><details><summary>ヒント表示</summary><div>代入する=assign [動]</div></details><p>「scoreに90を代入する」</p><details><summary>英文表示</summary><div>I assign ninety to the "score". </div></details><h2 id="オブジェクト系も英語で表現"><a href="#オブジェクト系も英語で表現" class="headerlink" title="オブジェクト系も英語で表現"></a>オブジェクト系も英語で表現</h2><figure class="highlight java"><figcaption><span>Cat.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Sample.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cat c = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure><details><summary>ヒント表示</summary><div>インスタンス化する=instantiate [動]</div></details><p>「Catクラスをインスタンス化する。」</p><details><summary>英文表示</summary><div>I instantiate the Cat class.</div></details><p>「Catクラスのオブジェクトを作る」</p><details><summary>英文表示</summary><div>I create an object of type Cat.</div></details><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class Cat extends Animal&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details><summary>ヒント表示</summary><div>継承する=inherit [動]子は英語でなんていう？</div></details><p>「CatクラスはAnimalクラスを継承している。」</p><details><summary>英文表示</summary><div>The Cat class inherits the Animal class.※三単現なので動詞にはsをつけます。</div></details><p>「CatクラスはAnimalクラスの子クラスである。」</p><details><summary>英文表示</summary><div>The Cat class is a child class of the Animal class.※a childをthe childにしても正しい英文ですが、その場合、CatクラスはAnimalクラスの唯一の子クラスという意味合いになります。（Animalクラスを継承しているクラスはCat以外にはないというニュアンスになる。）</div></details><p>「二分木の全ての親ノードは２つの子、２つの葉、または１つの子と１つの葉を持っている。」</p><details><summary>英文表示</summary><div>Every parent node of a binary tree has either two children, two leaves, or a child and a leaf.Every parent node of binary trees has either two children, two leaves, or a child and a leaf.</div></details><h1 id="encryptとencode"><a href="#encryptとencode" class="headerlink" title="encryptとencode"></a>encryptとencode</h1><p>最後にちょっとした最近の気付きを書こうと思います。<br>次の英単語を日本語にしてみてください。</p><p>encrypt</p><details><summary>日本語表示</summary><div>「暗号化する。」※encryptは動詞なので「暗号化」と訳すのは間違いです。※「暗号化は」encrypiting</div></details><p>encode</p><details><summary>日本語表示</summary><div>「記号化、符号化」「記号化する、符号化する。」※encodeは名詞でも動詞でも使えます。</div></details><p>decrypt</p><details><summary>日本語表示</summary><div>「復号する。」※decryptは動詞なので「復号」と訳すのは間違いです。</div></details><p>decode</p><details><summary>日本語表示</summary><div>「復号」「復号する。」※decodeは名詞でも動詞でも使えます。</div></details><p>気付きましたか？</p><details><summary>筆者が気付いたこと表示</summary><div>"暗号化"(encrypt)も"符号化"(encode)も、日本語だとその逆は"復号"(decrypt/decode)なんです。「暗号化する」<=>「復号する」「符号化する・記号化する」<=>「復号」</div></details>とても面白い。<p>使ってみましょう。<br>1.「コードのこの行はメッセージを暗号化する。」<br>2.「コードのこの行はメッセージを符号化する。」<br>3.「コードのこの行はメッセージを復号する。」</p><details><summary>英文表示</summary><div>1. This line of codes encrypts messages.2. This line of codes encodes messages.3. This line of codes decrypts/decodes messages.※コードは複数の行があって一つのプログラムになるので、複数形※This lineは単数なので、動詞には三単現のs※メッセージは加算かつ、１つしかメッセージを暗号化・記号化する訳ではないので複数系</div></details><h2 id="余談"><a href="#余談" class="headerlink" title="余談"></a>余談</h2><h4 id="「復号化」ではなく、「復号」と書く理由を考えてみる"><a href="#「復号化」ではなく、「復号」と書く理由を考えてみる" class="headerlink" title="「復号化」ではなく、「復号」と書く理由を考えてみる"></a>「復号化」ではなく、「復号」と書く理由を考えてみる</h4><p>日本語では「暗号」や「符号」はそれ自体、具体的な「モノを表す名詞」でしかないが、「復号」は抽象的な「動きを表す名詞」です。</p><p>「暗号」や「記号」=「モノを表す動詞」<br>「復号」=「動きを表す名詞」</p><p>「動きを表す動詞」に「〜する」をつけると動詞になります。<br>「動きを表す名詞」+「〜する」=「動詞」<br>「復号」+「〜する」=「復号する」</p><p>「モノを表す名詞」に「〜化」をつけると モノに変えるといったニュアンスの「動きを表す名詞」になります。<br>「モノを表す名詞」+「〜化」= 「動きを表す名詞」<br>「暗号」+「〜化」=「暗号化」<br>「記号」+「〜化」=「符号化」</p><p>ということは<br>「動きを表す名詞」+「〜する」=「動詞」<br>「暗号化」+「〜する」=「暗号化する」<br>「記号化」+「〜する」=「符号化する」<br>「復号」+「〜する」=「復号する」</p><p>ということで、復号はそもそも「動きを表す名詞」なので「〜化」をつけないのが正しいです。</p><details><summary>英語での対応一覧</summary><div><p>暗号 = cipher [名] / secret code [名]<br>暗号化 = to encrypt / encrypting [名]<br>暗号化する = encrypt [動]</p><p>符号 = code [名]<br>符号化 = encode / to encode / encoding [名]<br>符号化する = encode [動]</p><p>(暗号を)復号 = to decrypt / decrypting [名]<br>(暗号を)復号する = derypt [動]</p><p>(暗号を)復号 = decode / to decode / decoding [名]<br>(暗号を)復号する = decode [動]</p><p>※to Vで不定詞の名詞的用法、Vingで動名詞</p></div></details><p>余談でした。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>これからは仕事でも英語を使うやり取りも増えてくるかもしれません。<br>プログラミングを覚える中で英会話力も向上させてしまいましょう。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;プログラミング英会話-基礎&quot;&gt;&lt;a href=&quot;#プログラミング英会話-基礎&quot; class=&quot;headerlink&quot; title=&quot;プログラミング英会話 [基礎]&quot;&gt;&lt;/a&gt;プログラミング英会話 [基礎]&lt;/h1&gt;&lt;p&gt;こんにちは！英語大好き優輝です。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Java" scheme="https://future-architect.github.io/tags/Java/"/>
    
      <category term="英語" scheme="https://future-architect.github.io/tags/%E8%8B%B1%E8%AA%9E/"/>
    
      <category term="英会話" scheme="https://future-architect.github.io/tags/%E8%8B%B1%E4%BC%9A%E8%A9%B1/"/>
    
      <category term="プログラミング" scheme="https://future-architect.github.io/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
  </entry>
  
  <entry>
    <title>Service Worker開発で起きた不具合を振り返る</title>
    <link href="https://future-architect.github.io/articles/20210216/"/>
    <id>https://future-architect.github.io/articles/20210216/</id>
    <published>2021-02-15T15:00:00.000Z</published>
    <updated>2021-02-22T02:08:33.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIGの川端です。</p><p>先日、Vue.js + Service Worker開発案件が終わりました。その振り返りとして、Service Worker開発で起きた不具合と対応方法を記載します。</p><img src="/images/20210216/thumbnail.png" class="img-middle-size"><p><a href="https://pixabay.com/ja/users/templune-1493489/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2044932" target="_blank" rel="noopener">Diego Velázquez</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2044932" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h1 id="Service-Workerとは"><a href="#Service-Workerとは" class="headerlink" title="Service Workerとは"></a>Service Workerとは</h1><p>Service Workerは、ブラウザがWebページとは別にバックグラウンドで実行するJavaScriptになります。</p><h1 id="利用ブラウザ-バージョン情報など"><a href="#利用ブラウザ-バージョン情報など" class="headerlink" title="利用ブラウザ/バージョン情報など"></a>利用ブラウザ/バージョン情報など</h1><ul><li>Chrome v88.0.4324.146</li><li>Vue.js v2.6.11</li></ul><h1 id="起きた不具合その１"><a href="#起きた不具合その１" class="headerlink" title="起きた不具合その１"></a>起きた不具合その１</h1><h2 id="事象"><a href="#事象" class="headerlink" title="事象"></a>事象</h2><p>Service Worker上で、<code>setInterval</code>の処理を用意したところ、数分で止まるという報告が上がりました。<br><code>setInterval</code>は、バックグランド上で定期的にある処理をするために用意したものです。</p><figure class="highlight js"><figcaption><span>service-worker.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1秒ごとに処理を実行</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>調べてみるとService Workerの活動には制限があるようでした。</p><p>またブラウザのDevToolを起動している場合は、Service Workerは常時活動中となり、<code>setInterval</code>の処理が止まることはありません。開発中はブラウザのDevToolを常時起動中であったため、本件不具合に気づかないという事態になりました…</p><p><a href="https://w3c.github.io/ServiceWorker/#service-worker-lifetime" target="_blank" rel="noopener">参考：Service Worker Lifetime</a></p><h2 id="対応"><a href="#対応" class="headerlink" title="対応"></a>対応</h2><p><code>setInterval</code>の処理をService WorkerからVue.js側（Webアプリ側）に移動しました。</p><p>簡単な例ですが、下記のように実行したい画面のComponentに組み込みました。</p><figure class="highlight html"><figcaption><span>sample1.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 省略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'sample1'</span>,</span></span><br><span class="line">  created () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1秒ごとに処理を実行</span></span></span><br><span class="line">    &#125;, 1000)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="補足"><a href="#補足" class="headerlink" title="補足"></a>補足</h2><p>本記事は、<code>setInterval</code>に焦点を当てましたが、Service Worker側に用意したWebSocket受信処理も止まってしまったため、WebSocket受信処理もVue.js側に移動する対応も実施しました。</p><h1 id="起きた不具合その２"><a href="#起きた不具合その２" class="headerlink" title="起きた不具合その２"></a>起きた不具合その２</h1><h2 id="事象-1"><a href="#事象-1" class="headerlink" title="事象"></a>事象</h2><p>［Ctrl］＋［Shift］＋［R］キーでリロードすると、下記のエラーが出てVue.jsからService Workerへのメッセージ送信が失敗するという事象が起きました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught TypeError: Cannot read property &#39;postMessage&#39; of null</span><br></pre></td></tr></table></figure><h2 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h2><p>［Ctrl］＋［Shift］＋［R］キーでリロードすると、Service Workerが解除され、下記の<code>controller</code>が<code>null</code>になったことが原因でした。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.serviceWorker.controller.postMessage(&#123; msg &#125;)</span><br></pre></td></tr></table></figure><p><a href="https://w3c.github.io/ServiceWorker/#dom-serviceworkercontainer-controller" target="_blank" rel="noopener">Service Worker Controller</a>を確認すると、</p><blockquote><p>navigator.serviceWorker.controller returns null if the request is a force refresh (shift+refresh).</p></blockquote><p>の記載があり、［Ctrl］＋［Shift］＋［R］キーでリロードしたときに<code>controller</code>が<code>null</code>になるのは仕様でした。</p><h2 id="対応-1"><a href="#対応-1" class="headerlink" title="対応"></a>対応</h2><p>再度Service WorkerがWebアプリをコントロールする状態になるように下記を実施しました。<br>まずVue.js側に、Service Workerが<code>active</code>になったら、Service Worker側に<code>claim</code>するようにメッセージを送ります。</p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="built_in">window</span>.onload = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// Service Workerの登録</span></span><br><span class="line">    <span class="keyword">const</span> registration = <span class="keyword">await</span> navigator.serviceWorker.register(<span class="string">'/service-worker.js'</span>)</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Service Workerがactiveになったら、実行される</span></span><br><span class="line">    <span class="keyword">const</span> activeRegistration = <span class="keyword">await</span> navigator.serviceWorker.ready</span><br><span class="line">    <span class="comment">// この段階では、まだcontrollerはnullのため、active.postMessageでメッセージを送信</span></span><br><span class="line">    activeRegistration.active.postMessage(&#123; <span class="attr">action</span>: <span class="string">'claim'</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次にService Worker側で該当のメッセージを受け取ったら、<code>self.clients.claim()</code>を実施します。</p><figure class="highlight js"><figcaption><span>service-worker.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">self.onmessage = <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (message.data.action === <span class="string">'claim'</span>) &#123;</span><br><span class="line">    self.clients.claim()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここまで対応すると、Service WorkerがWebアプリをコントロールしている状態になります。<br>またService Workerがコントロールする状態になるまで、<code>navigator.serviceWorker.controller.postMessage</code>の処理は失敗します。<br>その失敗した処理のリカバリ方法として、下記のように画面をリロードして再実行するように対応しました。</p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="built_in">window</span>.onload = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// Service WorkerがWebアプリをコントロール開始</span></span><br><span class="line">    navigator.serviceWorker.oncontrollerchange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.location.reload()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> registration = <span class="keyword">await</span> navigator.serviceWorker.register(<span class="string">'/service-worker.js'</span>)</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> activeRegistration = <span class="keyword">await</span> navigator.serviceWorker.ready</span><br><span class="line">    activeRegistration.active.postMessage(&#123; <span class="attr">action</span>: <span class="string">'claim'</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h1><p>Service Worker開発で起きた不具合を２例紹介しました。</p><p>なかなか解決策が見つからず辛いと感じることもありましたが、こうして考えた解決策を公開することができて、大変嬉しく思っています。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20201013/index.html" data-iframely-url="//cdn.iframe.ly/SAxxrkF?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200428/index.html" data-iframely-url="//cdn.iframe.ly/2dHfIIG"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIGの川端です。&lt;/p&gt;
&lt;p&gt;先日、Vue.js + Service Worker開発案件が終わりました。その振り返りと
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="ServiceWorker" scheme="https://future-architect.github.io/tags/ServiceWorker/"/>
    
  </entry>
  
  <entry>
    <title>登が教えるSQL基礎</title>
    <link href="https://future-architect.github.io/articles/20210215/"/>
    <id>https://future-architect.github.io/articles/20210215/</id>
    <published>2021-02-14T15:00:00.000Z</published>
    <updated>2021-02-22T02:22:21.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>私はプロジェクトでシステムテスト、場合によっては本番稼働で起きる性能問題についてSQLチューニングを行ってきました。皆さんの中で、SQLチューニングは「専門的な知識」が必要とか「高レベルなスキル」を要求されると思っている方が居るかも？っと思い、このネタを扱いました。</p><p>確かにそういった内容もある事はあります。</p><p>ただ、多く（体感８割くらい）の性能問題については本当に単純なもので解決できます。特に昨今のFutureでは脱Oracleを掲げており、安価なDB製品を使う事による性能問題は如実に出てきています。そのため開発者一人一人が意識して性能問題を駆逐することにより、生産性・品質・コストに貢献できると考えこのお題にしました。</p><h1 id="テーブル設計の基本"><a href="#テーブル設計の基本" class="headerlink" title="テーブル設計の基本"></a>テーブル設計の基本</h1><img src="/images/20210215/database-schema-1895779_1280.png"><blockquote><p><a href="https://pixabay.com/ja/users/mcmurryjulie-2375405/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1895779" target="_blank" rel="noopener">mcmurryjulie</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1895779" target="_blank" rel="noopener">Pixabay</a>からの画像</p></blockquote><h2 id="なぜSQLの話でテーブル設計？"><a href="#なぜSQLの話でテーブル設計？" class="headerlink" title="なぜSQLの話でテーブル設計？"></a>なぜSQLの話でテーブル設計？</h2><p>何故SQLの話でテーブル設計の話が出るかというと、テーブル設計でSQLの構成が決まるからです。そのため、SQLを考える前にまずテーブル設計を考えてください。</p><h2 id="1POINT-これだけ意識して"><a href="#1POINT-これだけ意識して" class="headerlink" title="1POINT@これだけ意識して"></a>1POINT@これだけ意識して</h2><p>「<strong>参照（SELECT）しやすい設計</strong>」</p><p>これが基本です。何故SELECTを単純にするかというと、「登録（INSERT）・更新（UPDATE）は性能問題が発生する事が非常に少ない」ためです。あと付加的な利点として、「登録・更新機能（画面が特に）は複雑なのでスキルが高い人が割り当てられる」といった事もあり、開発者のスキル別に担当を割り当て易いといったこともあります。</p><p>それにSQLの複雑性が登録・更新に寄ったとしても難度が劇的に上がる事はそうそうなく、参照の方が難度上がりやすいです。</p><p>画面設計の例では</p><ol><li>単票画面 ＝ 1レコード</li><li>一覧画面の1行 ＝ 1レコード</li></ol><p>です。結合先のテーブルを含めてです。</p><p>実際にこう言った単純設計すると、こういった単純な形にならない事（特に一覧で）がありますが、単純な形にするために設計頑張って下さい。</p><p>コーディング・テストといったフェイズの工数が削減されます。</p><h1 id="SQLの基本"><a href="#SQLの基本" class="headerlink" title="SQLの基本"></a>SQLの基本</h1><h2 id="テーブル設計で完結できる？"><a href="#テーブル設計で完結できる？" class="headerlink" title="テーブル設計で完結できる？"></a>テーブル設計で完結できる？</h2><p>以下SQLの考慮点を書いてみたのですが、上記テーブル設計を完璧にこなした場合SQLは単純になり、ここで語る考慮点は不要になります。ただ、データ正規化や業務要件による抽出・表示情報の複雑性により、そう簡単にはいかないのがシステムです。</p><p>そのため、上記テーブル設計をした上で対応できない領域に対してSQLをどう構築するかを考える必要があります。</p><h2 id="1POINT-これだけ意識して-1"><a href="#1POINT-これだけ意識して-1" class="headerlink" title="1POINT@これだけ意識して"></a>1POINT@これだけ意識して</h2><p>「<strong>件数の少ないテーブルを駆動にする</strong>」</p><p>探索する場合駆動件数が増えると計算量が多くなり、SQLの実行結果取得に時間がかかります。</p><p>これは良く言われていますし、意識している人も多いと思いますが以下で考慮漏れが多いです。</p><ol><li>結合で件数が大きく膨れる</li><li>検索画面等の動的に抽出条件が変更される場合に網羅されていない。</li></ol><p>上記1のケースですが、結合した際に件数が増えた場合に最後に集約や絞り込みをかけるのではなく、クエリの途中で件数が膨らんだ直後に絞り込みを行いましょう。</p><p>この辺りの組み換えやインラインビュー化はデータ量を考慮する必要があるので、設計者が一番詳しいはずなので設計者が対応してほしい所です。</p><p>上記2のケースですが、基本は最も時間がかかる条件において最短で終わるように結合順を考えましょう。</p><p>最も時間がかかる条件というのが必須検索項目のみでの検索ですので、性能面で問題とならないよう<strong>業務要件を満たす最も件数が絞れる検索条件を必須項目となる設計をする</strong>ことが重要になってきます。このあたりを考慮して設計しないと後で性能問題となることが多いです。</p><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>過去のこれは…と思った例は以下です。</p><p><strong>とあるPJの帳票一覧画面の例</strong></p><ul><li>問題　：一覧の1行に紐付くテーブルが存在しない</li><li>詳細　：１行が複数の異なる帳票を束ねており、複数のテーブルのレコード有無とステータスを判定して、<br>　　　　行として表示するかと表示内容を決定している。</li><li>解決策：各テーブルの状態をサマリした状態管理用のテーブルを用意して、<br>　　　　帳票レコード作成・更新時に合わせて状態管理用のテーブルを更新する。</li></ul><p><strong>とあるPJの発注数初期値の例</strong></p><ul><li>問題　：発注数の初期値は各属性毎に設定可能で優先度も決まっている。<br>　　　　優先度は「商品＞サブクラス＞クラス＞ライン＞部門」と言った順になっており、<br>　　　　優先度の高いレコードが無ければ次の優先度といった形で決定される。<br>　　　　ただ、商品の属性の組み換えは行われるので各属性値のみを結合条件としている。<br>　　　　上位の属性に値が入っていれば結合は１回で済むが属性値が１つのみしか設定されていないので、<br>　　　　複数の結合条件で抽出しなければならない。</li><li>解決策：全てのカラムに値を入れる。商品の属性が変わったらそのタイミングで洗い替える。</li></ul><p>ここまで極端な例はそうそうないですが、、、</p><h1 id="宣伝（社内の人向け）"><a href="#宣伝（社内の人向け）" class="headerlink" title="宣伝（社内の人向け）"></a>宣伝（社内の人向け）</h1><p>社内の人だけが見れる社内動画サービスに動画をUpしています。</p><p>まだの人は是非ご覧ください！</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200605/index.html" data-iframely-url="//cdn.iframe.ly/0uvMWu3?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200616/index.html" data-iframely-url="//cdn.iframe.ly/tKbS2w1?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;私はプロジェクトでシステムテスト、場合によっては本番稼働で起きる性能問題についてSQLチューニングを行ってきました。皆さんの
      
    
    </summary>
    
    
      <category term="DB" scheme="https://future-architect.github.io/categories/DB/"/>
    
    
      <category term="SQL" scheme="https://future-architect.github.io/tags/SQL/"/>
    
      <category term="入門" scheme="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
      <category term="SQL入門" scheme="https://future-architect.github.io/tags/SQL%E5%85%A5%E9%96%80/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.16のsignal.NotifyContext()</title>
    <link href="https://future-architect.github.io/articles/20210212/"/>
    <id>https://future-architect.github.io/articles/20210212/</id>
    <published>2021-02-11T15:00:00.000Z</published>
    <updated>2021-02-12T00:23:35.264Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20210207/">Go 1.16リリース記念連載</a>の最終回は<code>signal.NotifyContext()</code>です。</p><p>ご存知のように、Go 1.7で<code>context.Context</code>が入ってから、少しずついろいろなAPIがContext対応になりました。</p><ul><li>1.7<ul><li><code>net</code>の<code>Dialer</code>が<code>DialContext()</code>メソッドを追加</li><li><code>net/http</code>の<code>http.Request</code>が<code>Context()</code>と<code>WithContext()</code>メソッドを追加。</li><li><code>os/exec</code>が<code>CommandContext</code>を追加</li></ul></li><li>1.8<ul><li><code>database/sql</code>が大幅に<code>context.Context</code>対応を追加</li><li><code>net/http</code>の<code>http.Server</code>が<code>Shutdown()</code>を追加</li><li><code>net</code>に<code>context.Context</code>に対応したリゾルバーを追加</li></ul></li><li>1.13<ul><li><code>net/http</code>の<code>NewRequestWithContext</code>と、<code>Request.Clone()</code>が追加</li></ul></li></ul><p>外部へのネットワークアクセスや、外部プロセス起動など、戻ってくる時間が未知数なものはContextを受け入れる口があります。</p><p>もともと<code>net.Conn</code>にはタイムアウトがありましたが、Contextを受け入れるAPIは共通インタフェースでタイムアウトの設定をしたり、外部呼び出しをキャンセルできるようになります。また、複数のAPIアクセスを並行して行う場合にも同じContextを渡すことで一括でタイムアウト設定したり、キャンセルできるようになります。</p><p>Goは例外処理（大域脱出による処理の中断と、それにともなうリソース開放）はありませんが、並行処理に対応した一括処理中断は、並行処理時代の例外処理と言えると思います。現代においては、外部API呼び出しやデータベースアクセス、外部プロセス起動を行うようなロジックを作成する場合、Contextを第一引数として取るように設計するのが紳士淑女の嗜みです。</p><p>すべてのキャンセル処理をContextで統一すると一括処理中断がしやすくなるので、異常処理が中央集権的になって、見通しが良くなります。Doneというメソッド名で終了判断のselect等で利用できてコードがみやすくなるので、僕は実行フローに関係するような非同期の情報伝達は全部Context化していました。</p><p>一方でユーザー主導のキャンセルのトリガーとなるシグナルはContextのAPIがなく、チャネルの提供でした。そのため、次のような関数を作ってContextに合わせるというのを1.15まではする必要がありました。</p><figure class="highlight go"><figcaption><span>1.15まででシグナルをContext化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">signalContext</span><span class="params">()</span> <span class="params">(context.Context, <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">signal.Notify(c, os.Interrupt, os.Kill)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-c:</span><br><span class="line">fmt.Fprintln(os.Stderr, <span class="string">"signal received"</span>)</span><br><span class="line">cancel()</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> ctx, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">signal.Stop(c)</span><br><span class="line">cancel()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.16では<code>signal.NotifyContext()</code>が入ったので、このような関数を手作りする必要がなくなりました。タイムアウトでもシグナルでも終了するような行儀の良いプログラムは次のように書けます。数値を変えてタイムアウトさせたり、正常終了させたり、シグナルを送ってみたり、いろいろ遊んでみてください。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"os/exec"</span></span><br><span class="line"><span class="string">"os/signal"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt)</span><br><span class="line"><span class="keyword">defer</span> stop()</span><br><span class="line">ctx, cancel := context.WithTimeout(ctx, time.Second*<span class="number">5</span>)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">cmd := exec.CommandContext(ctx, <span class="string">"sleep"</span>, <span class="string">"10"</span>)</span><br><span class="line">err := cmd.Run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ctx.Err() != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"error: %v\n"</span>, ctx.Err())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"error: %v\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>err</code>の周りの処理がif文が増えています。<code>cmd.Run()</code>のエラーは、タイムアウトでも必ずsignal: killedとなってしまいます。これはexec.CommandContextがタイムアウト時にプロセスにシグナルを送ってkillするためです。そのシグナルの理由が本当にユーザーが子プロセスに向けてKILLを送ったのか、Goのランタイムが送ったものなのかを区別するにはContext側のエラーを見る必要があります。</p><p><img src="/images/20210212/contxt-cancel.png" alt=""></p><p>Goが良く使われるようなウェブサービスをシグナルでgracefulにシャットダウンするのはこんな感じになるでしょうか</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"os/signal"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt)</span><br><span class="line"><span class="keyword">defer</span> stop()</span><br><span class="line"></span><br><span class="line">http.HandleFunc(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">io.WriteString(w, <span class="string">"hello world"</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server := &amp;http.Server&#123;</span><br><span class="line">Addr:    <span class="string">":8888"</span>,</span><br><span class="line">Handler: <span class="literal">nil</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">&lt;-ctx.Done()</span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), <span class="number">5</span>*time.Second)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line">server.Shutdown(ctx)</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(<span class="string">"start receiving at :8888"</span>)</span><br><span class="line">log.Fatal(server.ListenAndServe())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これまでシグナル処理をサボっていた人も、Contextはちょっと面倒と思っていた人も、ぜひ<code>signal.NotifyContext()</code>でぜひハッピーシグナルライフを送ってください。Goユーザーは行儀が良い、という評判をみんなで広めましょう。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210207/index.html" data-iframely-url="//cdn.iframe.ly/QsgsKHg?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20210207/&quot;&gt;Go 1.16リリース記念連載&lt;/a&gt;の最終回は&lt;code&gt;signal.NotifyContext()&lt;/code&gt;です。&lt;/p&gt;
&lt;p&gt;ご存知
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Go1.16" scheme="https://future-architect.github.io/tags/Go1-16/"/>
    
  </entry>
  
  <entry>
    <title>Go1.16からのio/ioutilパッケージ</title>
    <link href="https://future-architect.github.io/articles/20210210/"/>
    <id>https://future-architect.github.io/articles/20210210/</id>
    <published>2021-02-09T15:00:00.000Z</published>
    <updated>2021-02-22T02:08:22.003Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは、TIGの辻です。<a href="https://future-architect.github.io/articles/20210207/">Go 1.16連載</a>の3記事目です。</p><p>Go1.16でアップデートがあった <code>io/ioutil</code> パッケージが <code>&quot;deprecated&quot;</code> になる話題のまとめです。</p><h2 id="サマリ"><a href="#サマリ" class="headerlink" title="サマリ"></a>サマリ</h2><ul><li>Go1.16から <code>io/ioutil</code> パッケージの機能が <code>os</code> と <code>io</code> パッケージに移行した</li><li>これから新しく実装するコードは <code>io</code> や <code>os</code> パッケージの新しい関数を使うことが推奨される</li><li><code>io/ioutil</code> パッケージが <code>&quot;deprecated&quot;</code> になるが <code>&quot;deprecated&quot;</code> といっても将来壊れる、ということではない<ul><li>既存のコードは動作し続ける</li></ul></li><li><code>go fix</code> コマンドは未対応</li></ul><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>Go1.16から <code>io/ioutil</code> パッケージに含まれる関数が <code>&quot;deprecated&quot;</code> になります。関連するプロポーザルは <a href="https://github.com/golang/go/issues/40025" target="_blank" rel="noopener">#40025</a> と <a href="https://github.com/golang/go/issues/42026" target="_blank" rel="noopener">#42026</a> です。<a href="https://blog.golang.org/package-names" target="_blank" rel="noopener">Package names</a> で良くないパッケージ名として紹介されているように、一般的には <code>util</code> などというパッケージ名は、純粋にユーティリティを提供するパッケージではない限り避けるべき名前です。<code>io/ioutil</code> の命名に関しては <a href="https://github.com/golang/go/issues/19660" target="_blank" rel="noopener">#19660</a> にあるように以前から理解しにくいと言われていました。</p><p><code>io/ioutil</code> パッケージは主にパッケージのインポートサイクルを回避するために存在します。<a href="https://talks.golang.org/2016/refactor.article" target="_blank" rel="noopener">Codebase Refactoring</a> にあるようにGoの <code>io</code> パッケージは <code>os</code> パッケージに依存することはできません。<code>io/ioutil</code> パッケージが直接/間接的に <code>os</code> パッケージと <code>io</code> パッケージを参照することで、インポートサイクルを回避したということです。</p><img src="/images/20210210/package_dependency.svg" class="img-middle-size"><p>さて <code>io/ioutil</code> では以下の8つの型/関数がExportされています。</p><ul><li><code>Discard</code></li><li><code>NopCloser</code></li><li><code>ReadAll</code></li><li><code>ReadDir</code></li><li><code>ReadFile</code></li><li><code>TempDir</code></li><li><code>TempFile</code></li><li><code>WriteFile</code></li></ul><p>これらのすべての型/関数が <code>&quot;deprecated&quot;</code> になり、<code>io</code> パッケージと <code>os</code> パッケージに機能が移動します。</p><ul><li><code>io</code> パッケージに移動する型/関数<ul><li><code>Discard</code></li><li><code>NopCloser</code></li><li><code>ReadAll</code></li></ul></li><li><code>os</code> パッケージに移動する関数<ul><li><code>ReadDir</code></li><li><code>ReadFile</code></li><li><code>TempDir</code> -&gt; <code>MkdirTemp</code> (リネーム)</li><li><code>TempFile</code> -&gt; <code>CreateTemp</code> (リネーム)</li><li><code>WriteFile</code></li></ul></li></ul><h3 id="io-パッケージに移動する型-関数"><a href="#io-パッケージに移動する型-関数" class="headerlink" title="io パッケージに移動する型/関数"></a><code>io</code> パッケージに移動する型/関数</h3><p><code>io</code> パッケージに移動する型/関数は以下の3つです。</p><ul><li><code>Discard</code></li><li><code>NopCloser</code></li><li><code>ReadAll</code></li></ul><p><a href="https://github.com/golang/go/issues/40025" target="_blank" rel="noopener">#40025</a> によると <code>Discard</code> と <code>NopCloser</code> はたまたま <code>io/ioutil</code> パッケージに含まれてしまった、とのことです。<code>ReadAll</code> も本来であれば <code>Reader</code> や <code>Writer</code> のヘルパー関数が <code>io</code> パッケージで提供されていることにならって <code>io</code> パッケージに含まれる機能でしたが、<code>bytes.Buffer</code> にアクセスする実装となっていており、<code>bytes</code> パッケージが <code>os</code> パッケージに依存する関係で <code>io/ioutil</code> パッケージに追いやられました。</p><p>しかしながら <code>ReadAll</code> は <code>bytes.Buffer</code> を使う必要がないため、Go1.16の <code>ReadAll</code> の実装は <code>bytes</code> パッケージを使わない実装になっています。</p><ul><li>Go1.15の <code>ioutil.ReadAll</code> の実装(<a href="https://github.com/golang/go/blob/release-branch.go1.15/src/io/ioutil/ioutil.go#L16-L46" target="_blank" rel="noopener">io/ioutil/ioutil.go</a>)</li></ul><figure class="highlight go"><figcaption><span>io/ioutil/ioutil.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// readAll reads from r until an error or EOF and returns the data it read</span></span><br><span class="line"><span class="comment">// from the internal buffer allocated with a specified capacity.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readAll</span><span class="params">(r io.Reader, capacity <span class="keyword">int64</span>)</span> <span class="params">(b []<span class="keyword">byte</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line"><span class="comment">// If the buffer overflows, we will get bytes.ErrTooLarge.</span></span><br><span class="line"><span class="comment">// Return that as an error. Any other panic remains.</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">e := <span class="built_in">recover</span>()</span><br><span class="line"><span class="keyword">if</span> e == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> panicErr, ok := e.(error); ok &amp;&amp; panicErr == bytes.ErrTooLarge &#123;</span><br><span class="line">err = panicErr</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">int64</span>(<span class="keyword">int</span>(capacity)) == capacity &#123;</span><br><span class="line">buf.Grow(<span class="keyword">int</span>(capacity))</span><br><span class="line">&#125;</span><br><span class="line">_, err = buf.ReadFrom(r)</span><br><span class="line"><span class="keyword">return</span> buf.Bytes(), err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadAll reads from r until an error or EOF and returns the data it read.</span></span><br><span class="line"><span class="comment">// A successful call returns err == nil, not err == EOF. Because ReadAll is</span></span><br><span class="line"><span class="comment">// defined to read from src until EOF, it does not treat an EOF from Read</span></span><br><span class="line"><span class="comment">// as an error to be reported.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadAll</span><span class="params">(r io.Reader)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> readAll(r, bytes.MinRead)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Go1.16の <code>io.ReadAll</code> の実装(<a href="https://github.com/golang/go/blob/release-branch.go1.16/src/io/io.go#L622-L642" target="_blank" rel="noopener">io/io.go</a>)</li></ul><figure class="highlight go"><figcaption><span>io/io.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReadAll reads from r until an error or EOF and returns the data it read.</span></span><br><span class="line"><span class="comment">// A successful call returns err == nil, not err == EOF. Because ReadAll is</span></span><br><span class="line"><span class="comment">// defined to read from src until EOF, it does not treat an EOF from Read</span></span><br><span class="line"><span class="comment">// as an error to be reported.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadAll</span><span class="params">(r Reader)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">0</span>, <span class="number">512</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(b) == <span class="built_in">cap</span>(b) &#123;</span><br><span class="line"><span class="comment">// Add more capacity (let append pick how much).</span></span><br><span class="line">b = <span class="built_in">append</span>(b, <span class="number">0</span>)[:<span class="built_in">len</span>(b)]</span><br><span class="line">&#125;</span><br><span class="line">n, err := r.Read(b[<span class="built_in">len</span>(b):<span class="built_in">cap</span>(b)])</span><br><span class="line">b = b[:<span class="built_in">len</span>(b)+n]</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err == EOF &#123;</span><br><span class="line">err = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>バイトスライスの容量を拡張するときに一旦 <code>byte</code> 型のゼロ値0をバイトスライスにappendして容量を拡張し、長さは元のスライスの長さに戻すことでスライスの容量だけ予め拡張するオシャレな実装になっています。</p><p><code>io/ioutil</code> パッケージからは <code>io.ReadAll</code> に委譲するように実装されています。</p><ul><li>Go1.16の <code>ioutil.ReadAll</code> の実装(<a href="https://github.com/golang/go/blob/release-branch.go1.16/src/io/ioutil/ioutil.go#L20-L28" target="_blank" rel="noopener">io/ioutil/ioutil.go</a>)</li></ul><figure class="highlight go"><figcaption><span>io/ioutil/ioutil.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReadAll reads from r until an error or EOF and returns the data it read.</span></span><br><span class="line"><span class="comment">// A successful call returns err == nil, not err == EOF. Because ReadAll is</span></span><br><span class="line"><span class="comment">// defined to read from src until EOF, it does not treat an EOF from Read</span></span><br><span class="line"><span class="comment">// as an error to be reported.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// As of Go 1.16, this function simply calls io.ReadAll.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadAll</span><span class="params">(r io.Reader)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> io.ReadAll(r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="os-パッケージに移動する関数"><a href="#os-パッケージに移動する関数" class="headerlink" title="os パッケージに移動する関数"></a><code>os</code> パッケージに移動する関数</h3><p><code>os</code> パッケージに移行する関数は以下の5つです。<code>io/ioutil</code> パッケージに含まれていた下記の関数はOSファイルシステムのヘルパー関数です。</p><ul><li><code>ReadDir</code></li><li><code>ReadFile</code></li><li><code>TempDir</code> -&gt; <code>MkdirTemp</code> (リネーム)</li><li><code>TempFile</code> -&gt; <code>CreateTemp</code> (リネーム)</li><li><code>WriteFile</code></li></ul><h4 id="リネーム"><a href="#リネーム" class="headerlink" title="リネーム"></a>リネーム</h4><p><code>ioutil</code> の2つの関数がリネームになっています。<code>TempDir</code> 関数は既に <code>os</code> パッケージに存在します。<code>os.TempDir</code> 関数はOSのデフォルトの一時ディレクトリを返却するAPIです。<code>ioutil</code> パッケージの <code>TempFile</code> は今回移行した <code>os</code> パッケージでは <code>MkdirTemp</code> という関数になっています。また <code>MkdirTemp</code> との命名の整合をとるために <code>ioutil</code> パッケージに存在していた <code>TempFile</code> は <code>CreateTemp</code> という命名になっています。</p><h4 id="シグネチャ"><a href="#シグネチャ" class="headerlink" title="シグネチャ"></a>シグネチャ</h4><p><code>ReadDir</code> は返却するシグネチャが更新されています。移行後の <code>ReadDir</code> は <code>fs.FileInfo</code> ではなく <code>os.DirEntry</code> を返却するようになっています。</p><ul><li>Go1.16の <code>os.ReadDir</code> の実装(<a href="https://github.com/golang/go/blob/release-branch.go1.16/src/os/dir.go#L110-L125" target="_blank" rel="noopener">os/dir.go</a>)</li></ul><figure class="highlight go"><figcaption><span>os/dir.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReadDir reads the named directory,</span></span><br><span class="line"><span class="comment">// returning all its directory entries sorted by filename.</span></span><br><span class="line"><span class="comment">// If an error occurs reading the directory,</span></span><br><span class="line"><span class="comment">// ReadDir returns the entries it was able to read before the error,</span></span><br><span class="line"><span class="comment">// along with the error.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadDir</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">([]DirEntry, error)</span></span> &#123;</span><br><span class="line">f, err := Open(name)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">dirs, err := f.ReadDir(<span class="number">-1</span>)</span><br><span class="line">sort.Slice(dirs, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> dirs[i].Name() &lt; dirs[j].Name() &#125;)</span><br><span class="line"><span class="keyword">return</span> dirs, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Go1.16の <code>ioutil.ReadDir</code> の実装(<a href="https://github.com/golang/go/blob/release-branch.go1.16/src/io/ioutil/ioutil.go#L49-L70" target="_blank" rel="noopener">io/ioutil/ioutil.go</a>)</li></ul><figure class="highlight go"><figcaption><span>io/ioutil/ioutil.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReadDir reads the directory named by dirname and returns</span></span><br><span class="line"><span class="comment">// a list of fs.FileInfo for the directory's contents,</span></span><br><span class="line"><span class="comment">// sorted by filename. If an error occurs reading the directory,</span></span><br><span class="line"><span class="comment">// ReadDir returns no directory entries along with the error.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// As of Go 1.16, os.ReadDir is a more efficient and correct choice:</span></span><br><span class="line"><span class="comment">// it returns a list of fs.DirEntry instead of fs.FileInfo,</span></span><br><span class="line"><span class="comment">// and it returns partial results in the case of an error</span></span><br><span class="line"><span class="comment">// midway through reading a directory.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadDir</span><span class="params">(dirname <span class="keyword">string</span>)</span> <span class="params">([]fs.FileInfo, error)</span></span> &#123;</span><br><span class="line">f, err := os.Open(dirname)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">list, err := f.Readdir(<span class="number">-1</span>)</span><br><span class="line">f.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">sort.Slice(list, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> list[i].Name() &lt; list[j].Name() &#125;)</span><br><span class="line"><span class="keyword">return</span> list, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="quot-deprecated-quot-とは"><a href="#quot-deprecated-quot-とは" class="headerlink" title="&quot;deprecated&quot; とは"></a><code>&quot;deprecated&quot;</code> とは</h3><p><code>&quot;deprecated&quot;</code> とあるため、将来的に <code>ioutil</code> パッケージを使っているプログラムが動作しなくなるのでは？と思う方もいるかもしれません。<code>&quot;deprecated&quot;</code> が何を意味するのか Russ Cox 氏がツイートしています。</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Seeing discussion of io/ioutil deprecation in various places. <br><br>To be clear: in Go, “deprecated” means only “there is a better, preferred way.” It does not mean “will break in the future.”<br><br>Today’s programs using ioutil.ReadFile and friends will keep working forever. <a href="https://twitter.com/hashtag/golang?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#golang</a></p>&mdash; Russ Cox (@_rsc) <a href="https://twitter.com/_rsc/status/1351676094664110082?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">January 19, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>すわなち「より良い、好ましい方法がある」という意味で「将来的に壊れる」という意味ではない、ということです。<a href="https://golang.org/doc/go1compat" target="_blank" rel="noopener">Go 1 and the Future of Go Programs</a> にもあるように、少なくともGo1の間はソースレベルの後方互換性が保たれます。</p><p><code>ioutil</code> パッケージの関数はとても便利ですので、多くの実装で使用されていますが、<code>ioutil</code> パッケージを使っている既存の実装は引き続きそのまま動作します。新規に実装する場合は <code>os</code> パッケージや <code>io</code> パッケージに含まれる関数を利用するのが推奨されています。</p><h3 id="quot-deprecated-quot-になったパッケージの移行"><a href="#quot-deprecated-quot-になったパッケージの移行" class="headerlink" title="&quot;deprecated&quot; になったパッケージの移行"></a><code>&quot;deprecated&quot;</code> になったパッケージの移行</h3><p><a href="https://golang.org/cmd/fix/" target="_blank" rel="noopener"><code>go fix</code></a> を使うと、古いAPIを使用しているGoのプログラムを検出し、新しいAPIに書き換えることができます。馴染みがあるAPIだと <code>context</code> パッケージがあげられます。もともとは <code>golang.org/x</code> リポジトリ配下の準標準ライブラリとして実装されていた <code>context</code> パッケージですが、Go1.7以降は標準ライブラリに移行しています。以下のファイルがあった場合に <code>go tool fix -diff main.go</code> とすると新しいAPIに書き換えることができます。</p><ul><li>main.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"golang.org/x/net/context"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line">doSomething(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// doing something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Diffを確認できます。<code>-diff</code> オプションを除けば、ファイルを直接更新できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ go tool fix -diff main.go</span><br><span class="line">main.go: fixed context</span><br><span class="line">diff main.go fixed/main.go</span><br><span class="line">--- /tmp/go-fix572668930        2021-02-06 08:48:06.046862800 +0900</span><br><span class="line">+++ /tmp/go-fix017905529        2021-02-06 08:48:06.048069100 +0900</span><br><span class="line">@@ -1,6 +1,6 @@</span><br><span class="line"> package main</span><br><span class="line"></span><br><span class="line">-import <span class="string">"golang.org/x/net/context"</span></span><br><span class="line">+import <span class="string">"context"</span></span><br><span class="line"></span><br><span class="line"> func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">        ctx := context.Background()</span><br></pre></td></tr></table></figure><p><code>ioutil</code> パッケージの <code>go fix</code> に関して <a href="https://github.com/golang/go/issues/42026#issuecomment-749053679" target="_blank" rel="noopener">#42026</a> で言及されています。残念ながら <strong><a href="https://github.com/golang/go/issues/32816" target="_blank" rel="noopener">#32816</a> のプロポーザルには含まれない</strong> だろう、とコメントしています。将来的に <code>go fix</code> コマンド一発で既存の <code>ioutil</code> パッケージを使っているAPIから <code>io</code> パッケージや <code>os</code> パッケージのAPIへ移行ができると嬉しいですね。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://tip.golang.org/doc/go1.16#ioutil" target="_blank" rel="noopener">https://tip.golang.org/doc/go1.16#ioutil</a></li><li><a href="https://github.com/golang/go/issues/40025" target="_blank" rel="noopener">https://github.com/golang/go/issues/40025</a></li><li><a href="https://github.com/golang/go/issues/42026" target="_blank" rel="noopener">https://github.com/golang/go/issues/42026</a></li></ul><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210207/index.html" data-iframely-url="//cdn.iframe.ly/QsgsKHg?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは、TIGの辻です。&lt;a href=&quot;https://future-architect.github.io/articles/20210207/&quot;&gt;Go 1.16連載&lt;/a&gt;の3記事目です。&lt;/p&gt;
&lt;p&gt;Go1.16でアップデートがあった &lt;code&gt;io/iou
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Go1.16" scheme="https://future-architect.github.io/tags/Go1-16/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.16のgo installについて</title>
    <link href="https://future-architect.github.io/articles/20210209/"/>
    <id>https://future-architect.github.io/articles/20210209/</id>
    <published>2021-02-08T15:00:00.000Z</published>
    <updated>2021-02-15T05:34:26.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG真野です。</p><p><a href="https://future-architect.github.io/articles/20210207/">Go 1.16連載</a>の2つ目となるこの記事では、Go 1.16で機能追加された <code>go install</code> について説明します。</p><p><img src="/images/20210209/peach-3425656_1280.jpg" alt=""></p><blockquote><p><a href="https://pixabay.com/ja/users/dariasophia-9082096/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3425656" target="_blank" rel="noopener">dariasophia</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3425656" target="_blank" rel="noopener">Pixabay</a>からの画像</p></blockquote><h1 id="go-installの新機能"><a href="#go-installの新機能" class="headerlink" title="go installの新機能"></a>go installの新機能</h1><p>Go 1.16から <code>go install</code>に新機能が追加されました。<code>go install</code> 自体は従来から存在しているので全く新しいコマンドが増えたわけではなく、機能拡張されたイメージです。</p><ul><li>現時点のリリースノートの記載は<a href="https://tip.golang.org/doc/go1.16#tools" target="_blank" rel="noopener">こちら</a>、元のIssueは<a href="https://github.com/golang/go/issues/40276" target="_blank" rel="noopener">こちら</a>です。起票されてから半年弱でリリースに含まれました。</li></ul><p><code>go install</code>の機能拡張部分ですが簡単に言うと、<strong>バージョン指定できるようになりました</strong>。言ってみればそれだけです。嬉しいこととして、それによって<code>go.mod</code>の書き換え無しにツールなどのインストールを行いやすくなりました。ちなみに、インストールとはコードをコンパイルして、<code>$GOPATH/bin</code>とか<code>$HOME/go/bin</code>にビルドしたバイナリを配備してくれることです。</p><p>従来は<code>go get</code>でツールのインストールも行えていましたが、同時に<code>go.mod</code>も書き換わってしまいました。メインで開発するモジュールで利用するライブラリなら<code>go.mod</code>に追記されることが自然ですが、例えばGoのLanguage Serverである<code>gopls</code>や、<code>stringer</code> といった開発系のコマンドラインツールの場合は少し困りました。</p><p>どういうことかと言うと、メインで開発するモジュール本体の<code>go.mod</code>で、例えば<code>go get golang.org/x/tools/cmd/stringer</code>でインストールすると一時的に <code>go.mod</code> に追加されてしまうのです。もちろん、コードの中にはimportされていないため、<code>go mod tidy</code>すると消すことができますが、新規参画者の最初の環境構築で手順を間違えると不要な差分が出てきて少し手間でした。参画タイミングによって新しいバージョンが出たりすると、<code>go get</code>で<code>go.mod</code>のバージョンが書き換わるのもまた問題でした。また、逆に <code>go mod tidy</code> すると<code>go.mod</code>から削除されますが、つまり開発系ツール自体のバージョン管理ができなくなる問題もありました。そちらについては後述します。</p><p>今回追加された <code>go install</code> を用いればこういったストレスからは開放されるかと思います。なんとなく <code>go get</code>の機能が分割され、今後はGo Module追加編集のための<code>go get</code>、ツールなどのバイナリインストールの<code>go install</code>と住み分けることができそうです。</p><h1 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h1><p><code>go install example.com/cmd@v1.0.0</code> の形式で利用可能です。<code>go get</code>と同じ指定方法ですね。</p><p>例えば、stringerであれば</p><p><code>go get golang.org/x/tools/cmd/stringer@v0.1.0</code>です。バージョンは必須とのこと。最新で良い場合は<code>@latest</code>をつけます。</p><h1 id="動かしてみる"><a href="#動かしてみる" class="headerlink" title="動かしてみる"></a>動かしてみる</h1><p>Go 1.16のRelease Candidate1で<code>go install</code>を動かしてみます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;go version</span><br><span class="line">go version go1.16rc1 windows&#x2F;amd64</span><br></pre></td></tr></table></figure><p>適当なフォルダで <code>go mod init</code> して、<code>go get golang.org/x/tools/cmd/stringer@v0.1.0</code> と <code>go install golang.org/x/tools/cmd/stringer@v0.1.0</code> の実行結果を比較してみます。</p><figure class="highlight bash"><figcaption><span>go_get版</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;go get golang.org/x/tools/cmd/stringer@v0.1.0</span><br><span class="line">go get: added golang.org/x/tools v0.1.0</span><br><span class="line"></span><br><span class="line">&gt;<span class="built_in">type</span> go.mod</span><br><span class="line">module github.com/ma91n/go116</span><br><span class="line"></span><br><span class="line">go 1.14</span><br><span class="line"></span><br><span class="line">require golang.org/x/tools v0.1.0 // indirect</span><br><span class="line"></span><br><span class="line">&gt;stringer</span><br><span class="line">Usage of stringer:</span><br><span class="line">        stringer [flags] -<span class="built_in">type</span> T [directory]</span><br><span class="line">        stringer [flags] -<span class="built_in">type</span> T files... <span class="comment"># Must be a single package</span></span><br><span class="line">（省略）</span><br></pre></td></tr></table></figure><p>Go 1.16だとまだ <code>go get</code> でインストールもできるようですね。（将来的に消える可能性があるので注意です）</p><p>続いて、<code>go install</code> で動かしてみます。</p><figure class="highlight bash"><figcaption><span>go_install版</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;go install golang.org/x/tools/cmd/stringer@v0.1.0</span><br><span class="line"></span><br><span class="line">&gt;<span class="built_in">type</span> go.mod</span><br><span class="line">module github.com/ma91n/go116</span><br><span class="line"></span><br><span class="line">go 1.14</span><br><span class="line"></span><br><span class="line">&gt;stringer</span><br><span class="line">Usage of stringer:</span><br><span class="line">        stringer [flags] -<span class="built_in">type</span> T [directory]</span><br><span class="line">        stringer [flags] -<span class="built_in">type</span> T files... <span class="comment"># Must be a single package</span></span><br><span class="line">（省略）</span><br></pre></td></tr></table></figure><p>リリースノート通り、<code>go.mod</code> への副作用はありませんでした。</p><h1 id="ローカルリポジトリに対してのgo-install"><a href="#ローカルリポジトリに対してのgo-install" class="headerlink" title="ローカルリポジトリに対してのgo install"></a>ローカルリポジトリに対しての<code>go install</code></h1><p>こちらは従来どおり、そのまま利用可能です。</p><figure class="highlight go"><figcaption><span>mycmd.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Happy Go 1.16 !!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下のような適当なmainパッケージなファイルを作成してinstallします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ go install mycmd.go</span><br><span class="line">$ mycmd</span><br><span class="line">Happy Go 1.16 !!</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>ローカルリポジトリ及び、リモートリポジトリ両方に同じように操作ができるようになったと考えると、なんとなく直感的にうまくコマンドが整理されたのかなと感じました。正確にはGo 1.16時点でも使えたのですが、<code>go get</code>をヘビーユースして<code>go install</code>はほとんど使わなかった..。</p><h1 id="Go-Moduleで開発系ツールを管理するハックとの関係は？"><a href="#Go-Moduleで開発系ツールを管理するハックとの関係は？" class="headerlink" title="Go Moduleで開発系ツールを管理するハックとの関係は？"></a>Go Moduleで開発系ツールを管理するハックとの関係は？</h1><p><a href="https://qiita.com/nirasan/items/2bdbf0ada7b4182d56ce" target="_blank" rel="noopener">ここ</a>にあるように、開発系ツールをGo Modulesでバージョン管理するために、<code>// +build</code>のビルドタグ＋ブランクインポートするようなハックがありました。</p><figure class="highlight go"><figcaption><span>tools.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +build tools</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> _ <span class="string">"golang.org/x/tools/cmd/stringer"</span></span><br></pre></td></tr></table></figure><p>また、巷では、toolsフォルダをつくって、そこで<code>go mod init tools</code>して、上記の記事のようなブランクインポートする流派もあります。こうすると開発しているモジュールが依存するパッケージと、ツールのバージョン別に管理できるプラクティスとして一定の広がりがあったと思います。</p><p>どちらにしても開発ツールのバージョンを<code>go.mod</code>に記載し、そのディレクトリで<code>go install golang.org/x/tools/cmd/stringer</code> などとしていました。複数あるとそのまま複数個installコマンドを愚直に打つか、<code>cat tools.go | grep _ | awk -F&#39;&quot;&#39; &#39;{print $2}&#39; | xargs -tI % go install %</code> などでシェル技が炸裂していました。</p><p>Go 1.16での変化ですが、RC1時点だと <code>go get</code>でインストールはまだ行ってくれます。しかし将来的に使えなくなる可能性があるので、素直に <code>go install</code> を使いましょう。従来の<code>go install</code>はバージョン指定ができなかったため、わざわざGo Module管理するためにハックを繰り返していましたが、Go 1.16だとそもそも不要です。</p><p>素直に <code>make install</code> でセットアップするが正解になる気がします。</p><figure class="highlight makefile"><figcaption><span>Makefile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: install</span></span><br><span class="line"></span><br><span class="line"><span class="section">install:</span></span><br><span class="line">go install golang.org/x/tools/gopls@v0.6.5</span><br><span class="line">go install golang.org/x/tools/cmd/stringer@v0.1.0</span><br></pre></td></tr></table></figure><p>このあたりのプラクティスは、Go Wikiの<a href="https://github.com/golang/go/wiki/Modules#how-can-i-track-tool-dependencies-for-a-module" target="_blank" rel="noopener">How can I track tool dependencies for a module?</a>がどう変わるかをウォッチしていこうと思います。（多分、変わるはず..）</p><h1 id="go-generateディレクティブ"><a href="#go-generateディレクティブ" class="headerlink" title="//go:generateディレクティブ"></a><code>//go:generate</code>ディレクティブ</h1><p>Go Modules が導入されてから、公開されている Go 製のツールは go run によるダウンロード・ビルド・実行が一度にできるようになっていたのですが、Go1.16だと<code>go.mod</code>が自動で更新されない影響か、<code>//go:generate go run golang.org/x/tools/cmd/stringer -type=Pill</code> でインストール無しで <code>go generate</code> するだけでコード生成するハックが使えなくなりました。</p><figure class="highlight go"><figcaption><span>pill.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> generate</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:generate go run golang.org/x/tools/cmd/stringer -type=Pill</span></span><br><span class="line"><span class="keyword">type</span> Pill <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">Placebo Pill = <span class="literal">iota</span></span><br><span class="line">Aspirin</span><br><span class="line">Ibuprofen</span><br><span class="line">Paracetamol</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>上記のようにすると、各開発者が事前準備無しに<code>go generate</code>さえ実行するだけで済んだのですが、Go1.16だとこうなります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;go generate</span><br><span class="line">no required module provides package golang.org/x/tools/cmd/stringer; to add it:</span><br><span class="line">        go get golang.org/x/tools/cmd/stringer</span><br><span class="line">pill.go:3: running <span class="string">"go"</span>: <span class="built_in">exit</span> status 1</span><br></pre></td></tr></table></figure><p>同じ開発体験を守りたいなら、複数行に記載することになると思います。</p><figure class="highlight go"><figcaption><span>複数行に記載</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> generate</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:generate go install golang.org/x/tools/cmd/stringer@latest</span></span><br><span class="line"><span class="comment">//go:generate stringer -type=Pill</span></span><br><span class="line"><span class="keyword">type</span> Pill <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">Placebo Pill = <span class="literal">iota</span></span><br><span class="line">Aspirin</span><br><span class="line">Ibuprofen</span><br><span class="line">Paracetamol</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;go generate</span><br><span class="line"></span><br><span class="line">&gt;<span class="built_in">type</span> pill_string.go</span><br><span class="line">// Code generated by <span class="string">"stringer -type=Pill"</span>; DO NOT EDIT.</span><br><span class="line"></span><br><span class="line">package generate</span><br><span class="line"></span><br><span class="line">import <span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">_</span></span>() &#123;</span><br><span class="line">        // An <span class="string">"invalid array index"</span> compiler error signifies that the constant values have changed.</span><br><span class="line">        // Re-run the stringer <span class="built_in">command</span> to generate them again.</span><br><span class="line">        var x [1]struct&#123;&#125;</span><br><span class="line">        _ = x[Placebo-0](</span><br><span class="line">（省略）</span><br></pre></td></tr></table></figure><p>無事生成はできました。<code>//go:generate</code>ディレクティブに <code>go run</code> コマンドを書くのはちょっとしたハック感があって好きだったのですが、初見では混乱するので消えて良かったのかもしれませんね。</p><h1 id="余談"><a href="#余談" class="headerlink" title="余談"></a>余談</h1><p><code>go build</code>とか<code>go test</code>で自動的に<code>go.mod</code>が更新されない変わりに、<code>go mod tidy</code>してねってメッセージがでるようなりました。どのタイミングで表示してくれるのか細かくは良く分かりませんが、気がついたらバージョンを上げると良いかと思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li><code>go install</code>でバージョンを指定ができるようになった</li><li>いくつかのハックが陳腐化したり、使えなくなったが、試行錯誤した経験は我々の中にずっと残り続ける</li></ul><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210207/index.html" data-iframely-url="//cdn.iframe.ly/QsgsKHg?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG真野です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/ar
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Makefile" scheme="https://future-architect.github.io/tags/Makefile/"/>
    
      <category term="Go1.16" scheme="https://future-architect.github.io/tags/Go1-16/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.16からリリースされたgo:embedとは</title>
    <link href="https://future-architect.github.io/articles/20210208/"/>
    <id>https://future-architect.github.io/articles/20210208/</id>
    <published>2021-02-07T15:00:00.000Z</published>
    <updated>2021-02-12T00:23:04.030Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p>この記事は<a href="https://future-architect.github.io/articles/20210207/">Go 1.16連載</a>の1記事目です。</p><p>トップバッターとして<code>go:embed</code>について記事を書きます。</p><h2 id="go-embedとは"><a href="#go-embedとは" class="headerlink" title="go:embedとは"></a>go:embedとは</h2><p>プロポーザルとなるissueは<a href="https://github.com/golang/go/issues/41191" target="_blank" rel="noopener">こちら</a>、2020年9月のissue作成から約5ヶ月の時を経て<code>go:embed</code>がリリースに含まれることになりました。</p><p>embedとは埋め込みという意味です、その名の通りファイル埋め込みをサポートするためのパッケージです。ファイルを読み込むだけなら<code>os</code>や<code>io/ioutil</code>でも行うことが可能ですが、<code>go:embed</code>ならではの特徴を説明します。</p><p>ちなみに<code>io/ioutil</code>はGo 1.16で<code>deprecated</code>になりました、詳しくは連載の他の記事で説明します。</p><h2 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h2><p>手始めにサンプルコード、<code>main.go</code>を書いてみました。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_ <span class="string">"embed"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed sample.json</span></span><br><span class="line"><span class="keyword">var</span> sampleBytes []<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> sample <span class="keyword">struct</span> &#123;</span><br><span class="line">Key1 <span class="keyword">string</span> <span class="string">`json:"key1"`</span></span><br><span class="line">Key2 <span class="keyword">string</span> <span class="string">`json:"key2"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s sample</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(sampleBytes, &amp;s); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%+v\n"</span>, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他のパッケージと同様<code>import</code>して利用できます。<br>単一のファイルを埋め込みするだけなら<code>_ &quot;embed&quot;</code>として先頭に_をつけてインポートすることが推奨されています。</p><p>この<code>main.go</code>と同一のディレクトリに<code>sample.json</code>を配置します。</p><figure class="highlight json"><figcaption><span>sample.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"key1"</span>: <span class="string">"value1"</span>,</span><br><span class="line">    <span class="attr">"key2"</span>: <span class="string">"value2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このコードを実行するとsampleBytesにsample.jsonの中身が反映され、構造体sampleの中身が出力されます</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go run .\main.go</span><br><span class="line">&#123;Key1:value1 Key2:value2&#125;</span><br></pre></td></tr></table></figure><h2 id="何が起きているのか"><a href="#何が起きているのか" class="headerlink" title="何が起きているのか"></a>何が起きているのか</h2><p><code>go:embed</code>では一見コメントアウトに見える<code>//go:embed sample.json</code>が埋め込みファイルの場所を指示する記述として機能します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:embed sample.json</span></span><br><span class="line"><span class="keyword">var</span> sampleBytes []<span class="keyword">byte</span></span><br></pre></td></tr></table></figure><p>コメントアウト部分のファイル名を書き換えると参照するファイル名が変わることが確認できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:embed sampl.json</span></span><br><span class="line"><span class="keyword">var</span> sampleBytes []<span class="keyword">byte</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go run .\main.go</span><br><span class="line">main.go:9:12: pattern sampl.json: no matching files found</span><br></pre></td></tr></table></figure><p>同じことを<code>os</code>で実現しようとするとファイル読み込み～変数の格納までそれなりな行数を要するので、わずか2行でファイルを変数に格納することができるのは便利ですね。<br>勿論json以外でも埋め込み可能です、txt形式の文章や画像なども、バイナリファイルとして扱う事が可能です。</p><p>うっかり<code>//</code>の後に半角スペースを入れてしまうと本当にコメントアウトとして処理されてしまうのでご注意ください。<br>コメントアウトと埋め込みの違いがシンタックスハイライトとして反映できるようになると嬉しいかもしれませんね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// go:embed sampl.json</span></span><br><span class="line"><span class="keyword">var</span> sampleBytes []<span class="keyword">byte</span></span><br></pre></td></tr></table></figure><h2 id="その他具体的な利用方法"><a href="#その他具体的な利用方法" class="headerlink" title="その他具体的な利用方法"></a>その他具体的な利用方法</h2><h3 id="複数ファイルを埋め込む"><a href="#複数ファイルを埋め込む" class="headerlink" title="複数ファイルを埋め込む"></a>複数ファイルを埋め込む</h3><p><code>go:embed</code>は複数のファイルをまとめて埋め込む使い方が用意されています。<br><code>embed</code>パッケージを<code>_</code>無しでインポートして、<code>embed.FS</code>型のファイルシステムとして変数に埋め込みます。<br>この使い方で作成した変数<code>static</code>は<code>io/fs</code>パッケージでも取り扱う事ができました。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"embed"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/fs"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed README.md version.txt</span></span><br><span class="line"><span class="keyword">var</span> static embed.FS</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">b, err := static.ReadFile(<span class="string">"README.md"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, <span class="keyword">string</span>(b))</span><br><span class="line"></span><br><span class="line">b2, err := fs.ReadFile(static, <span class="string">"version.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"version: %s\n"</span>, <span class="keyword">string</span>(b2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行結果は下記のようになります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> go run .\main.go</span><br><span class="line">## README</span><br><span class="line"></span><br><span class="line">It is a sample of &#96;go:embed&#96;</span><br><span class="line">version: 1.0</span><br></pre></td></tr></table></figure><p><a href="https://tip.golang.org/pkg/net/http/#FS" target="_blank" rel="noopener">net/httpパッケージ</a>で提供されているファイルシステムとも互換性があるため。<br>WebAPIを開発する場合は大きなメリットとなる事が期待されています。</p><p>以下の15行程度の処理で簡易WEBサーバーを立てることができました。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"embed"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed index.html</span></span><br><span class="line"><span class="keyword">var</span> static embed.FS</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.Handle(<span class="string">"/"</span>, http.FileServer(http.FS(static)))</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>適当な<code>index.html</code>を用意し、ブラウザで<code>localhost:8080/index.html</code>にアクセスすることでHTMLを表示することができました。<br><img src="/images/20210208/image.png" alt=""></p><h3 id="別ディレクトリのファイルを参照する"><a href="#別ディレクトリのファイルを参照する" class="headerlink" title="別ディレクトリのファイルを参照する"></a>別ディレクトリのファイルを参照する</h3><p>ファイルがmain.go等実行ファイルと同じ場所にない場合は、パス名を指定することが可能です。<br><code>embed</code>という名称のアセット管理用フォルダを作成し、<code>sample.json</code>を格納した場合は下記のように記載します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:embed embed/sample.json</span></span><br><span class="line"><span class="keyword">var</span> sampleBytes []<span class="keyword">byte</span></span><br></pre></td></tr></table></figure><p>先頭に./等のカレントディレクトリを表す表記は不要です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:embed ./embed/sample.json</span></span><br><span class="line"><span class="keyword">var</span> sampleBytes []<span class="keyword">byte</span></span><br></pre></td></tr></table></figure><p>また、親ファイルまで遡って読み込みを行うような機能は現在サポートされていませんでした。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:embed ../embed/sample.json</span></span><br><span class="line"><span class="keyword">var</span> sampleBytes []<span class="keyword">byte</span></span><br></pre></td></tr></table></figure><p>いずれも<code>invalid pattern syntax</code>として処理されます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> go run .\main.go</span><br><span class="line">main.go:9:12: pattern ..&#x2F;embed&#x2F;sample.json: invalid pattern syntax</span><br></pre></td></tr></table></figure><h3 id="複数のファイルをまとめて埋め込む"><a href="#複数のファイルをまとめて埋め込む" class="headerlink" title="複数のファイルをまとめて埋め込む"></a>複数のファイルをまとめて埋め込む</h3><p><code>go:embed</code>ではワイルドカードが利用できるため、階層を掘り下げる形であれば複数ファイルをまとめて配置するようなことも可能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:embed static/*</span></span><br><span class="line"><span class="keyword">var</span> static embed.FS</span><br></pre></td></tr></table></figure><p>先ほどの簡易WEBサーバーを、ワイルドカードを利用して、<code>favicon.ico</code>と<code>index.html</code>をフォルダごと読み込み、展開するような構成に変更してみました。<br>ディレクトリ構成は以下のようなイメージです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">  ┣ main.go</span><br><span class="line">  ┗ static</span><br><span class="line">       ┗ public</span><br><span class="line">            ┣ index.html</span><br><span class="line">            ┗ favicon.ico</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"embed"</span></span><br><span class="line"><span class="string">"io/fs"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed static/*</span></span><br><span class="line"><span class="keyword">var</span> static embed.FS</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">public, err := fs.Sub(static, <span class="string">"static/public"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">http.Handle(<span class="string">"/"</span>, http.FileServer(http.FS(public)))</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>フューチャー技術ブログのfaviconを試しに読み込んでみました、無事に表示されています。</p><p><img src="/images/20210208/image_2.png" alt=""></p><p>ちなみに変数publicとしてファイルシステムの階層を適宜掘り下げたものを用意しないと読み込んだディレクトリがリンクとして表示されてしまいます。</p><p><img src="/images/20210208/image_3.png" alt=""></p><p>実際に開発を行う際はginやecho等のWEBフレームワークを理想されるケースが一般的と思われますが、それらAPIでも同様の事が可能です。</p><p>WEBサーバーに話が寄ってしまいましたが、設定やバージョン情報等の管理を<code>go:embed</code>を使って運用していくような事が期待できます。</p><h2 id="go-embedが使えないケース"><a href="#go-embedが使えないケース" class="headerlink" title="go:embedが使えないケース"></a>go:embedが使えないケース</h2><p><code>go:embed</code>での埋め込みは関数の内部など閉じたスコープで行うことができません。</p><p>必然的に広いスコープで扱いたい設定情報等が用途として想定されます。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"embed"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/fs"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//go:embed README.md version.txt</span></span><br><span class="line"><span class="keyword">var</span> static embed.FS</span><br><span class="line"></span><br><span class="line">b, err := static.ReadFile(<span class="string">"README.md"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, <span class="keyword">string</span>(b))</span><br><span class="line"></span><br><span class="line">b2, err := fs.ReadFile(static, <span class="string">"version.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"version: %s\n"</span>, <span class="keyword">string</span>(b2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行すると下記のようなエラーが発生します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go run .\main.go</span><br><span class="line"># command-line-arguments</span><br><span class="line">.\main.go:10:4: go:embed cannot apply to var inside func</span><br></pre></td></tr></table></figure><h2 id="go-embedによって何が嬉しいのか"><a href="#go-embedによって何が嬉しいのか" class="headerlink" title="go:embedによって何が嬉しいのか"></a>go:embedによって何が嬉しいのか</h2><p>記事の序盤でも書きましたが、単純に外部ファイルを読み込むだけなら<code>os</code>や<code>ioutil</code>でも行うことが可能です。<br><code>go:embed</code>で読み込んだファイルはビルドされたバイナリにも埋め込まれる、という点がその他の読み込み方法との決定的な違いになります。</p><p>最初に書いたサンプルコードの<code>os</code>バージョンを作りました。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> sample <span class="keyword">struct</span> &#123;</span><br><span class="line">Key1 <span class="keyword">string</span> <span class="string">`json:"key1"`</span></span><br><span class="line">Key2 <span class="keyword">string</span> <span class="string">`json:"key2"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">bytes, err := os.ReadFile(<span class="string">"./sample.json"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s sample</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(bytes, &amp;s); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%+v\n"</span>, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jsonファイルが適切に配置されていれば、同様にjsonファイルの中身が出力されます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go run .\main.go</span><br><span class="line">&#123;Key1:value1 Key2:value2&#125;</span><br></pre></td></tr></table></figure><p>では、<code>go:embed</code>を利用したものと、<code>os</code>を利用したもので、ビルドした実行バイナリの挙動の違いを確認してみます。</p><p><code>os</code>を利用したものでは、jsonファイルを削除してビルドしたバイナリを実行した場合、エラーが発生します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> .\main.exe</span><br><span class="line">panic: open .&#x2F;sample.json: The system cannot find the file specified.</span><br></pre></td></tr></table></figure><p>一方、最初に紹介した<code>go:embed</code>のサンプルコードは、jsonファイルを削除しても問題なく動作します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> .\main.exe</span><br><span class="line">&#123;Key1:value1 Key2:value2&#125;</span><br></pre></td></tr></table></figure><p><code>go:embed</code>で読み込んだファイルはビルドされたバイナリにも埋め込まれる、の意味がこのような挙動から体験できました。</p><p>これはGoの利点の一つである、単一の実行ファイルとしてビルドできることで、展開先の依存関係をシンプルに保つことができるという利点を強力に後押しします。設定ファイルや各種アセットをビルドに含めることで、バージョン管理やリリース作業を一層シンプルに整理できることが期待できます。</p><p>先ほど紹介した簡易WEBサーバーで例えると、WEBサーバーとコンテンツとなるHTML、CSS、Javascriptが分離している場合、ローカル環境で動いたものを実際の環境にデプロイする場合、実行バイナリと各種アセットをデプロイ対象の環境で適宜整理する必要があります。</p><p>これらを全て単一のバイナリに含めることができた場合、作業は実行バイナリを一つコピーして起動するだけになります。<br>新しいサーバーにデプロイする際の運用フローの整備や、プロダクション向けの構成でコンテナを構築するDockerfileを書いていく事を考えると、<code>go:embed</code>で極限まで簡略化できる部分が想像できるかもしれません。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p><code>go:embed</code>は外部ファイルを読み込むことができるパッケージです。単一のファイルの中身を簡単に読み込めます、ファイルシステムを提供することも可能です。ローカル変数で利用することは現段階ではできません。</p><p>今までのGoでは実行ファイルとアセットファイルに分割されてしまっていた部分を、一つにまとめることが可能になりました。</p><p>普段の業務で<code>go:embed</code>で解決できる部分が無いか、ぜひ探してみていただければと思います。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210207/index.html" data-iframely-url="//cdn.iframe.ly/QsgsKHg?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;この記事は&lt;a href=&quot;https://future-architect.github.io/articles/20210207/&quot;&gt;Go 1.16連載&lt;/a&gt;の1記事目です。&lt;/p&gt;
&lt;p&gt;トップバッターとして&lt;code&gt;go:e
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Go1.16" scheme="https://future-architect.github.io/tags/Go1-16/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.16連載が始まります</title>
    <link href="https://future-architect.github.io/articles/20210207/"/>
    <id>https://future-architect.github.io/articles/20210207/</id>
    <published>2021-02-06T15:00:00.000Z</published>
    <updated>2021-02-12T00:19:27.269Z</updated>
    
    <content type="html"><![CDATA[<p>毎年2月と8月はGoの新バージョンがリリースされます。2021年2月は1.16です。本ブログでは1.16のリリースを記念してGo 1.16の新機能を紹介する集中連載を行います。現時点のリリースノートは<a href="https://tip.golang.org/doc/go1.16" target="_blank" rel="noopener">こちら</a>。次のような内容を考えています。乞うご期待。</p><table><thead><tr><th>公開日</th><th>寄稿者</th><th>記事</th></tr></thead><tbody><tr><td>2月8日</td><td>伊藤真彦</td><td><a href="/articles/20210208/">Go 1.16からリリースされたgo:embedとは</a></td></tr><tr><td>2月9日</td><td>真野隼記</td><td><a href="/articles/20210209/">Go 1.16のgo installについて</a></td></tr><tr><td>2月10日</td><td>辻大志郎</td><td><a href="/articles/20210210/">Go1.16からのio/ioutilパッケージ</a></td></tr><tr><td>2月12日</td><td>澁川喜規</td><td><a href="/articles/20210212/">Go 1.16のsignal.NotifyContext()</a></td></tr></tbody></table><p>本エントリーは、これら以外にどんな変化があったのかをダイジェストで紹介します。</p><img src="/images/20210207/Go_Logo.png"><h1 id="アーキテクチャ対応-M1のmacに対応"><a href="#アーキテクチャ対応-M1のmacに対応" class="headerlink" title="アーキテクチャ対応: M1のmacに対応"></a>アーキテクチャ対応: M1のmacに対応</h1><p>今回も新しいアーキテクチャの追加が行われていますが、一番大きいのはApple Siliconの正式対応でしょう。2ヶ月ほど前に対応コードがmasterにマージされたタイミングで当ブログでもすでに紹介していました。</p><ul><li><a href="https://future-architect.github.io/articles/20201203/">GoがApple Siliconにネイティブ対応したのでベンチマークをとってみました</a></li></ul><p>もともとdarwin/arm64はiOS向けでしたが、これはios/arm64にリネームされました。c-archive, c-shared, pieモードも使えるし、race detectorも利用可能です。</p><p>すでに計測値を出していましたが、Rosetta以外をRC1で再計測してみました。M1は高速な結果から、さらに全体的にはすべての結果が1割近く改善していました。amd64は処理系が安定していて、差があっても誤差かな？というものが多かったです。いくつか、M1が他のCPUに負けていた項目だけピックアップしたのが次の表です。他のものより8倍遅かったCRC32は4倍改善され、2倍遅いぐらいで差が詰まっています。ParseBoolは1割ほど高速したものの、他との差は大きいですね。SHA1とSHA256は大幅改良で他を圧倒する速度を手に入れています。全体的に他のCPUとの差をさらに広げつつ、負けているところもかなり減ってきていますね。残っている大負けしているテストはrosetta2にも負けているということでGoのランタイムのコードが改善されたら治るはずで、M1のハードウェア起因ではなさそうですね。</p><table><thead><tr><th></th><th>M1 (12/3のmaster→RC1)</th><th>M1(rosetta)</th><th>Core i5-1030G7 (12/3のmaster→RC1)</th><th>Ryzen 9 4900HS (12/3のmaster→RC1)</th></tr></thead><tbody><tr><td>BenchmarkBlake3256-8</td><td>6339→5733</td><td>エラー</td><td>3460→3764</td><td>2782→2849</td></tr><tr><td>BenchmarkCRC32-8</td><td>1098→255.5</td><td>139.2</td><td>140.5→143.5</td><td>163.7→169.8</td></tr><tr><td>BenchmarkFnv128-8</td><td>4924→4465</td><td>7617</td><td>3448→3598</td><td>6084→6026</td></tr><tr><td>BenchmarkMD5-8</td><td>3566→3198</td><td>4345</td><td>3283→3209</td><td>2635→2603</td></tr><tr><td>BenchmarkSHA1-8</td><td>5789→899.9</td><td>4247</td><td>2924→3177</td><td>2041→2086</td></tr><tr><td>BenchmarkSHA256-8</td><td>10865→914.8</td><td>7832</td><td>6361→6473</td><td>4346→4612</td></tr><tr><td>BenchmarkSHA512-8</td><td>7801→6997</td><td>3987</td><td>4685→4816</td><td>2939→3224</td></tr><tr><td>BenchmarkMathAtomicInt32-8</td><td>7.132→6.888</td><td>7.864</td><td>6.562→6.015</td><td>4.258→4.149</td></tr><tr><td>BenchmarkMathAtomicInt64-8</td><td>7.07→6.918</td><td>7.758</td><td>7.079→5.890</td><td>4.231→4.167</td></tr><tr><td>BenchmarkMathMutexInt-8</td><td>12.45→13.68</td><td>15.07</td><td>18.69→15.58</td><td>8.776→8.589</td></tr><tr><td>BenchmarkParseBool-8</td><td>1.598→1.430</td><td>0.3529</td><td>0.3532→0.3147</td><td>0.3208→0.5364</td></tr></tbody></table><p>VSCodeも1.53でInsiderでない安定板もM1対応になりますし、GoLandもネイティブ版がリリースされました。Rosetta2でも快適だった環境はますます快適になっています。</p><p>それ以外だとlinux/riscv64対応が改良されていて、個人的には気になっています。</p><h1 id="ランタイムの変化"><a href="#ランタイムの変化" class="headerlink" title="ランタイムの変化"></a>ランタイムの変化</h1><p><a href="https://tip.golang.org/pkg/runtime/metrics/" target="_blank" rel="noopener">runtime/metrics</a>パッケージが導入されました。runtimeとかdebugとかさまざまな場所に散っていったメトリックス収集機能が集約されました。今サポートしているのはGC関連のメトリックスと、メモリ関連のメトリックス、goroutine数ですね。</p><p>あとは、GODEBUG環境変数にinittrace=1を設定すると、各パッケージの<code>init</code>で消費している時間やメモリの情報が標準出力に表示されます。Google App EngineやらCloud RunやらCloud FunctionsやらAWS Lambdaやらでインスタンス数ゼロからのコールドブート時間を減らしたいサーバーレス愛好家にとってはタピオカミルクティー🧋並に人気が出そうな新機能です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">init compress&#x2F;flate @1.2 ms, 0.027 ms clock, 4240 bytes, 7 allocs</span><br><span class="line">init hash&#x2F;crc32 @1.2 ms, 0.014 ms clock, 1024 bytes, 1 allocs</span><br><span class="line">init compress&#x2F;gzip @1.2 ms, 0.022 ms clock, 32 bytes, 2 allocs</span><br><span class="line">init runtime&#x2F;pprof @1.3 ms, 0.018 ms clock, 32 bytes, 2 allocs</span><br><span class="line">init crypto @1.3 ms, 0.019 ms clock, 160 bytes, 1 allocs</span><br><span class="line">init crypto&#x2F;md5 @1.3 ms, 0.001 ms clock, 0 bytes, 0 allocs</span><br><span class="line">init crypto&#x2F;sha1 @1.3 ms, 0 ms clock, 0 bytes, 0 allocs</span><br><span class="line">init crypto&#x2F;sha256 @1.4 ms, 0 ms clock, 0 bytes, 0 allocs</span><br><span class="line">init crypto&#x2F;sha512 @1.4 ms, 0 ms clock, 0 bytes, 0 allocs</span><br><span class="line">init math&#x2F;rand @1.4 ms, 0.059 ms clock, 5440 bytes, 3 allocs</span><br><span class="line">init golang.org&#x2F;x&#x2F;sys&#x2F;cpu @1.5 ms, 0 ms clock, 0 bytes, 0 allocs</span><br><span class="line">init github.com&#x2F;zeebo&#x2F;blake3&#x2F;internal&#x2F;consts @1.5 ms, 0 ms clock, 0 bytes, 0 allocs</span><br><span class="line">init golang.org&#x2F;x&#x2F;crypto&#x2F;blake2b @1.5 ms, 0.019 ms clock, 32 bytes, 2 allocs</span><br><span class="line">init golang.org&#x2F;x&#x2F;crypto&#x2F;sha3 @1.5 ms, 0 ms clock, 0 bytes, 0 allocs</span><br><span class="line">init main @1.5 ms, 0 ms clock, 0 bytes, 0 allocs</span><br></pre></td></tr></table></figure><h1 id="ツールの変化"><a href="#ツールの変化" class="headerlink" title="ツールの変化"></a>ツールの変化</h1><p>go.mod対応周りが大幅に変わったことと、embed対応が大きなトピックです。これはそれぞれの紹介のなかで詳しく説明されます。</p><p>1.15で加えられたリンカーの更新がELFベースのOS/amd64だけだったのが、ありとあらゆる環境に適用され、速度は20-25%高速に、メモリ使用量は5-15%ほど削減されています。</p><p>それ以外は比較的小さい変化で、go testで、os.Exit(0)もエラーとなるように変更されたりとかですかね。あとは-overlayでファイルのパスの読替のJSONを読み込ませることができ、ファイルの動的な置き換えが可能になるという変更もありますが、これは未セーブのファイルを別のパスに書き出しておいてデバッグ実行するといったように、エディタ側から使われることを意図しているようでした。</p><p>1.16で<a href="https://go.googlesource.com/proposal/+/refs/changes/78/248178/1/design/40724-register-calling.md" target="_blank" rel="noopener">レジスタベースの関数呼び出し規約</a>が入ってパフォーマンスアップというのを<a href="https://www.infoq.com/news/2020/08/go-register-calling-convention/" target="_blank" rel="noopener">報じるメディアもありました</a>が、それは<a href="https://github.com/golang/go/issues/40724" target="_blank" rel="noopener">1.17に先送りされた</a>ようです。次も楽しみですね。</p><h1 id="ライブラリの変化"><a href="#ライブラリの変化" class="headerlink" title="ライブラリの変化"></a>ライブラリの変化</h1><p>全部を紹介するのは細かすぎるので、気になるポイントだけピックアップします。</p><p>大きいのはembed追加に伴って導入されたio/fsと、io/ioutilが非推奨化されたことですね。リリースノートで大きく取り上げられています。また、いくつかのパッケージがio/fs対応で機能追加されています。</p><p>また、小さい関数追加の<code>signal.NotifyContext()</code>は個人的にうれしかったので連載で取り上げます。</p><p>netパッケージでは<code>ErrClosed</code>というエラーのインスタンスが追加されました。1.13でerrorsパッケージが更新されてエラーチェックの共通の方法として<code>errors.Is()</code>が導入されましたが、それとの比較が行いやすいように、いままで非公開だったエラーのインスタンスが公開されました。新しく提案された使い方に合わせて、全体が統一されていくのは良いですね。</p><p>strconvの<code>ParseFloat()</code>は新しいアルゴリズムを使うことで最大二倍高速になりました。これを使っている<code>encoding/json</code>も高速になるとのこと。</p><p>time/tzdataがスリムなデータ構造を使うようになってバンドルサイズが小さくなったとかもありました。</p><p>個人的に面白かったのがコードのパーサーのライブラリの更新で、Go 1.17で導入予定の新しいbuild constraintのコメント形式をサポートするというものです。Go 1.17のソースを処理するツールを今から書けますよ、とのこと。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 今の書き方</span></span><br><span class="line"><span class="comment">// +build syntax</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Go1.17の書き方</span></span><br><span class="line"><span class="comment">//go:build</span></span><br></pre></td></tr></table></figure><p>おまけで、<a href="https://emojipedia.org/unicode-13.0/" target="_blank" rel="noopener">Unicodeのバージョンが13</a>になりましたので、ランタイムのところに書いた↑タピオカミルクティーの絵文字🧋がGoで使えるようになりました。</p><h1 id="1-17以降の変更"><a href="#1-17以降の変更" class="headerlink" title="1.17以降の変更"></a>1.17以降の変更</h1><p>すでに説明した関数呼び出しのレジスタベースの関数呼び出しでパフォーマンスアップが計画されています。</p><p>注目度が高いジェネリクスは今のところ2022/02の1.18ぐらいになると言われていますが、ジェネリクスのプロポーザルが2/4に<a href="https://github.com/golang/proposal#likely-accept" target="_blank" rel="noopener">likely accept</a>フェーズになりました。Goのワークフロー的には「ディスカッションがコンセンサスに到達。最後のコメントを受け入れる期間」となっています。かなりリリースが近づいてきていますね。</p><p><strong>2/11更新</strong>: 1週間たって、ジェネリクスのプロポーザルが<a href="https://github.com/golang/proposal#accepted" target="_blank" rel="noopener">accepted</a>に<a href="https://github.com/golang/go/issues/43651#issuecomment-776944155" target="_blank" rel="noopener">なりました</a>。</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Generics in <a href="https://twitter.com/hashtag/golang?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#golang</a> has moved to &quot;likely accept&quot; phase...<a href="https://t.co/hmA4ofLztV" target="_blank" rel="noopener">https://t.co/hmA4ofLztV</a></p>&mdash; Brad Fitzpatrick (@bradfitz) <a href="https://twitter.com/bradfitz/status/1357032025362862080?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">February 3, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;毎年2月と8月はGoの新バージョンがリリースされます。2021年2月は1.16です。本ブログでは1.16のリリースを記念してGo 1.16の新機能を紹介する集中連載を行います。現時点のリリースノートは&lt;a href=&quot;https://tip.golang.org/doc/g
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Go1.16" scheme="https://future-architect.github.io/tags/Go1-16/"/>
    
  </entry>
  
  <entry>
    <title>Good First Issue から OSS へコントリビュートしてみた</title>
    <link href="https://future-architect.github.io/articles/20210205/"/>
    <id>https://future-architect.github.io/articles/20210205/</id>
    <published>2021-02-04T15:00:00.000Z</published>
    <updated>2021-02-05T01:03:46.381Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>TIG DXチームの多賀です。<a href="https://goodfirstissue.dev/" target="_blank" rel="noopener">Good First Issue</a> から、OSS (<a href="https://github.com/go-swagger/go-swagger" target="_blank" rel="noopener">go-swagger</a>) にコントリビュートしてみたので、経験談について記載してみます。</p><h2 id="Good-First-Issue-とは"><a href="#Good-First-Issue-とは" class="headerlink" title="Good First Issue とは"></a>Good First Issue とは</h2><p><a href="https://goodfirstissue.dev/" target="_blank" rel="noopener">Good First Issue</a> は、GitHub の <code>good first issue</code> ラベルの付いた Issue を一覧で参照できるサイトです。 <code>good first issue</code> ラベルとは、<a href="https://docs.github.com/en/github/managing-your-work-on-github/managing-labels#about-default-labels" target="_blank" rel="noopener">GitHub のデフォルト</a>で定義されており、初めてのコントリビュートに向いている Issue につけられるラベルです。</p><p>サイトは、コードレビューツールを開発されている <a href="https://deepsource.io/?ref=gfi" target="_blank" rel="noopener">deepsource</a> 社によって、運営されています。対象のGitHub リポジトリは、<a href="https://github.com/deepsourcelabs/good-first-issue#adding-a-new-project" target="_blank" rel="noopener">deepsourcelabs/good-first-issue</a> にて、<a href="https://github.com/deepsourcelabs/good-first-issue#adding-a-new-project" target="_blank" rel="noopener">コントリビュートしやすくするための条件</a>をクリアしたものだけが管理されています。<br>(PRを送ることで、リポジトリを追加することも歓迎されていそうです。)</p><p><img src="/images/20210205/image.png" alt=""></p><h2 id="OSS-コントリビュート"><a href="#OSS-コントリビュート" class="headerlink" title="OSS コントリビュート"></a>OSS コントリビュート</h2><p>今回のコントリビュートの経緯としては、<a href="https://future-architect.github.io/articles/20201107/">フューチャーOSS推進タスクフォース</a>  の活動があります。活動の一環として、OSS コントリビュートを増やしていければと考えています。筆者も少しお手伝いする中で、まずは自分がやってみようと思ったことがきっかけです。</p><p>以下は、筆者のコントリビュートまでの流れを、失敗も含めて経験談としてそのまま記載しています。少々冗長になってますが、流れがイメージできると良いかなと思ったので、そのままにしています。</p><h3 id="Issue-をみつけるまで"><a href="#Issue-をみつけるまで" class="headerlink" title="Issue をみつけるまで"></a>Issue をみつけるまで</h3><p>筆者は、OSS コントリビュートを普段から息をするようにしているタイプではないので、どうやったら簡単にできるのか調べながら実施しました。コントリビュートの方法は色々あると思いますが、筆者は GitHub の Issue を探す方法を取りました。そこからさらに調べてみた結果、初心者向けラベルがついた Issue を選べばよいのかなというところまでたどり着きましたが、実際に対象 Issue を決めかねていました。そんな中、以下の流れで  Issue を決めることができました。</p><ol><li><a href="https://goodfirstissue.dev/" target="_blank" rel="noopener">Good First Issue</a> で <a href="https://github.com/go-swagger/go-swagger" target="_blank" rel="noopener">go-swagger</a> を発見<ul><li>GitHub の Issue からのラベル絞り込みを試していましたが、対象も多くイマイチ決めきれていないところで、<a href="https://goodfirstissue.dev/" target="_blank" rel="noopener">Good First Issue</a>  を見つけました。<code>good first issue</code> を言語別に検索できるということで、 得意な <code>Go</code> 言語で絞り込んでみました。その結果、たまたま PJ 等でよく利用していた <a href="https://github.com/go-swagger/go-swagger" target="_blank" rel="noopener">go-swaggeer</a> が上位に出てきました。ライブラリの利用時にコードもある程度読んで、なんとなく理解していたので、これならわかるかもと思い Issue をいくつか見てみました。</li></ul></li><li>解決したいIssue を発見<ul><li>いくつか Issue を参照した中で、ひとつの Issue (<a href="https://github.com/go-swagger/go-swagger/issues/1924" target="_blank" rel="noopener">Can’t configure content type in generated client · Issue #1924 · go-swagger/go-swagger</a> )が目に止まりました。 Issue の詳細を読んでいく中で、「そういえば以前使った際に、生成された Client コードが使いづらかったな」ということを思い出し、 <strong>この機能欲しいな</strong> と思っていました。また、Issue をよく見ると <code>good first issue</code> がついているだけあって、作者から直しの方針がコードベースで記載されていて、後はこのコードを入れ込むだけでした。これなら、自分でもできると思い対応してみることにしました。</li></ul></li></ol><h3 id="Issue-を見つけて-PR-を送るまで"><a href="#Issue-を見つけて-PR-を送るまで" class="headerlink" title="Issue を見つけて PR を送るまで"></a>Issue を見つけて PR を送るまで</h3><p>対象 Issue を決めたので、修正範囲を特定するために、まずはリポジトリを clone してみました。ソースコードを眺めて print デバッグしながら修正箇所を特定していきました。詳細は本筋とずれるので割愛しますが、今回は以下2点の修正でした。</p><ul><li>Client テンプレートファイルの修正</li><li>swagger コマンドに含まれるテンプレートファイルの更新<ul><li>go-swagger では <a href="https://github.com/kevinburke/go-bindata" target="_blank" rel="noopener">kevinburke/go-bindata</a> を利用して、build 時にテンプレートファイルを含めるようになっていました (余談: Go 1.16 から変わるかもですね。)</li></ul></li></ul><p>修正して動作確認がとれたので、 master ブランチに commit しました。このままだと PR が送れないと気づいたので自分の GitHub アカウントに Fork して、remote を追加して git push しました。<br>PR を送ろうかと考えていたとき、 go-swagger のコントリビュート方針があるのではと気づいたので、リポジトリを探してみると、<code>.github</code> ディレクトリ以下に、 <a href="https://github.com/gmidorii/go-swagger/blob/master/.github/CONTRIBUTING.md" target="_blank" rel="noopener">CONTRIBUTING.md</a> がありました。<a href="https://github.com/gmidorii/go-swagger/blob/master/.github/CONTRIBUTING.md" target="_blank" rel="noopener">CONTRIBUTING.md</a> にリンクされる形で、 <a href="https://github.com/gmidorii/go-swagger/blob/master/docs/guidelines/README.md" target="_blank" rel="noopener">Guidelines to maintainers</a> を見つけました。</p><p>ガイドを読んでいると、<a href="https://github.com/gmidorii/go-swagger/blob/master/docs/guidelines/README.md" target="_blank" rel="noopener">Guidelines to maintainers</a> に、PR の Rule があり、 <code>Draft PR</code> を上げてレビュー前に CI チェックしても良いとあったので、テスト修正対象の特定をしたく、ひとまず <code>Draft PR</code> を作ってみました。すると、テスト以外の CI が失敗していました。 失敗した CI とガイドを再度見返すと 「<a href="https://git-scm.com/docs/git-commit#Documentation/git-commit.txt--s" target="_blank" rel="noopener">sign off</a>」を commit へ入れてくれと記載があることに気づきました。CI のエラーメッセージを参考にしつつ commit を amend して直してみたところ、おそらく rebase で HEAD から戻すコミット数をミスしており、commit の状態が壊れてしまいました (ここは未だに細かくわかっていないです)。</p><p>commit の状態を復元するのに時間を使うか、修正箇所が少ないので最初からやり直すか悩んだ末、最初からやり直すことにしました。<a href="https://github.com/go-swagger/go-swagger/pull/2500" target="_blank" rel="noopener">Draft PR</a> を Closeし、Fork した master ブランチを汚していたので一度削除して再 Fork しました。今度は master からブランチを切り、修正を sign off 付きで commit して、再度 <code>Draft PR</code> を上げました。 説明は <code>fixs #${issue 番号}</code> を入れてほしいと合ったので、Draft なこともあり、一旦その文言のみをいれて <a href="https://github.com/go-swagger/go-swagger/pull/2507" target="_blank" rel="noopener">PR</a> を発行しました。</p><p><img src="/images/20210205/Pasted_image_20210203191633.png" alt=""></p><p>あとで、説明を追加すればよいかと思い、1日程度置いていると、レビュワーの方から <code>Approve</code> されてました。レビュワーの方から「どうして Draft なのか ?」と聞かれていたので、「CIを見たかったから」と返しつつ <code>Approve</code> 出ているので良いだろうと思い、そのまま <code>Open</code> にしました。<br>また 1日後にみると、マージされていて、無事コントリビュートに成功しました。</p><h2 id="振り返り"><a href="#振り返り" class="headerlink" title="振り返り"></a>振り返り</h2><p>実際にコントリビュートしてみて、いくつか気づきがありました。</p><h3 id="Issue-選定"><a href="#Issue-選定" class="headerlink" title="Issue 選定"></a>Issue 選定</h3><p>コントリビュート初心者が選ぶ Issue として、個人的にですが以下2点が重要だと感じました。</p><ul><li>「利用したことがあるライブラリ/ツール」であること</li><li>Issue を見たときに「この機能欲しい/直したい」と思えること</li></ul><p>最初にコントリビュートするにあたって、「初めての壁」はどうしてもあります。壁突破の一つのやり方として、うまくモチベーション作る方法があるかなと思います。<br>この2点をクリアすることで、いい感じのモチベーションが生まれたなと思いました。</p><p>実際の手順に落とし込むと、以下の形が良さそうです。</p><ol><li><a href="https://goodfirstissue.dev/" target="_blank" rel="noopener">Good First Issue</a> 等のサイトを利用して、初心者でもできる Issue のみを参照</li><li>書きたい or 得意な言語を選定</li><li>利用したことがある ライブラリ/ツール がないか検索</li><li>Issue をいくつか眺めてみて、欲しい/直したいと最も思えるものを選択</li></ol><h3 id="改善点"><a href="#改善点" class="headerlink" title="改善点"></a>改善点</h3><p>3点ほど失敗していたので、どうしたら良かったのかについても考えてみました。</p><ol><li>CONTRIBUTING.md を最初に読む<br> ガイドの読み込み不足で、いくつかミスをしました。<a href="https://goodfirstissue.dev/" target="_blank" rel="noopener">Good First Issue</a> のリポジトリは CONTRIBUTING.md が必ずあるようなので、まず読んで見るべきでした。</li><li>master ブランチに直修正しない<br> Fork 先へ push するので問題ないかと思い master にしてましたが、Fork 元の master の状態がなくなり修正が効かなくなるので、ブランチは何かしら切ったほうが良さそうでした。その際、ブランチの切り方にルールがないかガイドを確認するべきですね。</li><li>Draft PR でも参照されるので説明を書く<br> レビュワーにもよりそうですが、Draft でも見られることがあるので、多少なりとも説明は書いておいたほうがより通りやすくなりそうです。<br> 今回は Issue 側に細かく書いてあったので、なくてもなんとかなったのかなと思いました。</li></ol><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>OSS コントリビュートしてみた経験談について記載してみました。</p><p>開発初心者みたいな恥ずかしい失敗もしてしまいましたが、結果マージまでされてよかったです。1回経験すると、2回目以降のハードルが下がったなと実感もしているので、またコントリビュートしていきたいと思いますし、輪を広げていけると良いなと思います。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200701/index.html" data-iframely-url="//cdn.iframe.ly/eYAtY3Z?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200522/index.html" data-iframely-url="//cdn.iframe.ly/UQdi94o?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;TIG DXチームの多賀です。&lt;a href=&quot;https://goodfirstissue.dev/&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
      <category term="go-swagger" scheme="https://future-architect.github.io/tags/go-swagger/"/>
    
  </entry>
  
  <entry>
    <title>JP1ジョブ設計のポイント（初級）</title>
    <link href="https://future-architect.github.io/articles/20210204/"/>
    <id>https://future-architect.github.io/articles/20210204/</id>
    <published>2021-02-03T15:00:00.000Z</published>
    <updated>2021-02-22T02:08:56.548Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>デジタルイノベーショングループ所属の朽方です。</p><p>私の携わったプロジェクトではJP1運用が多いのですが、「JP1ってどう設計したらよいかよくわからない…😣」とよく相談されるため、初級中級者向けにJP1のジョブ設計、簡単なポイントをまとめてみました。</p><p>JP1は自由度が高いため、設計者の個性が強く出ますが、運用管理としては好ましくないジョブ構成というものもありますので、設計の一助になれば幸いです。</p><h1 id="JP1とは"><a href="#JP1とは" class="headerlink" title="JP1とは"></a>JP1とは</h1><blockquote><p>JP1は日立製作所が開発・発売している日立オープンミドルウェアシリーズのひとつで、1994年に発売されたソフトウェア。統合システム運用管理ツールと位置付けられ、運用ツールとしての日本国内シェアは約27%でトップクラスである<br>出典: <a href="https://ja.wikipedia.org/wiki/JP1" target="_blank" rel="noopener">Wikipedia</a></p></blockquote><p>類似の製品には、富士通さんのSystemwalker、NTTデータさんのHinemosなどがあります。</p><p>ジョブのワークフロー管理機能だけ見ると、DigdagやApache Airflowとも似ていると思います。</p><h1 id="JP1導入パターン"><a href="#JP1導入パターン" class="headerlink" title="JP1導入パターン"></a>JP1導入パターン</h1><p>まず、JP1のジョブ設計をはじめる以前に最初に決定・確認しなければならないことがあります。</p><p>新システムのJP1をどこに構築し、誰が運用するか、そしてJP1設計ルールが準備済みかです。</p><p>パターンとしては、ざっくり以下２つになります。</p><h3 id="パターン1-専用JP1"><a href="#パターン1-専用JP1" class="headerlink" title="[パターン1] 専用JP1"></a>[パターン1] 専用JP1</h3><p><img src="/images/20210204/001.png" alt=""></p><p>ジョブ数が数万を超えるような大規模システムは、１システムで専用JP1を用意するケースが多いです。<br>メリットは、１システムでJP1を専有できるため、他システムのジョブ増大による影響（実行遅延等）を受けることが無い点です。</p><p>デメリットは、JP1ライセンスやサーバ運用費など、コストの増大です。災害対策等でサーバ構成を二重化する場合は、さらにコストが増えます。</p><h3 id="パターン2-相乗りJP1"><a href="#パターン2-相乗りJP1" class="headerlink" title="[パターン2] 相乗りJP1"></a>[パターン2] 相乗りJP1</h3><p><img src="/images/20210204/002.png" alt=""></p><p>ジョブ数が数百、数千程度の小・中規模システムであれば、既存JP1サーバに相乗りさせ一括管理も可能です。公式ドキュメントによると、１日の処理ジョブ数１万件以下（最大5万～10万件）、１時間当たりのジョブ量1,000件以下（最大5千件）が推奨されていますので、この範囲に収まるようであれば追加もありでしょう。</p><p>主たるメリットは、JP1ライセンスやサーバ運用費など、コストの削減です。また、運用・監視もあちこちのJP1サーバにログインする必要がなく、運用者に優しいです。</p><p>デメリットは、各種制約が増え、調整が多くなることです。細かいですが、いくつか具体例をあげてみます。</p><ul><li>運用部門が厳格なJP1設計ルールを設けておく必要があります。各システムのジョブ設計者が規約無く好き勝手にジョブ設計すると、バベルの塔のようなカオスジョブになります。</li><li>JP1 Viewerでログインすると、同時接続数上限に達しログインできなくなることがよくあります。各システム１、２名利用でも、数十システムもあると上限（デフォルト32）に達してしまいます。</li><li>共通ユーザが公開されている場合、（主にテスト環境で）A社システム担当者にB社システムのジョブが閲覧される懸念もありますし、その延長でジョブが誤って登録実行される事故もあります。<br>（スケジューラ毎に専用ユーザを作成する、ジョブ毎にアクセス権を設定する、等で回避は可能です。）</li><li>JP1カレンダを変更してスケジュールテストをする際、他システムが影響を受けるため、実施時間をずらすなどの調整が必要になることもあります。</li></ul><p>システム規模と運用監視体制を考慮し、しっかりと協議、決定しましょう。</p><p>当たり前ですが、パターン1、2いずれでもシステム拡張でジョブ数が増えるとサーバ性能要件も上がり、スケールアップ/スケールアウトさせる必要は出てきます。</p><p> </p><h1 id="JP1設計の進め方"><a href="#JP1設計の進め方" class="headerlink" title="JP1設計の進め方"></a>JP1設計の進め方</h1><h3 id="トップダウン型"><a href="#トップダウン型" class="headerlink" title="トップダウン型"></a>トップダウン型</h3><p>システム全体のジョブフローのイメージができており、各業務、組織間の依存関係が明快な場合に向いています。ジョブネットの上の階層から、順番にサブジョブネットを設計していきます。設計責任者がすごくしっかりしている場合か、小規模、単純なシステムの場合に向いています。（実際の現場では、そんな都合よく行くことは少ないですけど。。）</p><h3 id="ボトムアップ型"><a href="#ボトムアップ型" class="headerlink" title="ボトムアップ型"></a>ボトムアップ型</h3><p>システム全体のジョブフローが曖昧でとりあえず手探りで進めるような場合や、各業務、組織間の依存関係が複雑な場合に向いています。</p><p>CRUD等を元に枝葉のジョブを１ジョブネットで書き、ジョブネットにグルーピングしていくようなイメージです。DWHのように依存関係が複雑なシステムでよく見ます。</p><h1 id="JP1のジョブ設計ポイント"><a href="#JP1のジョブ設計ポイント" class="headerlink" title="JP1のジョブ設計ポイント"></a>JP1のジョブ設計ポイント</h1><p>それでは次に、本題のJP1ジョブ設計のポイントに移りましょう。</p><p>前述のパターン２の場合は、すでにJP1設計ルールがあるはずです。必ずルールに従って設計を行いましょう。</p><ul><li>ジョブの命名ルールは〇〇</li><li>ジョブネットは△△、□□単位でグルーピングすること</li><li>ジョブネットの階層数は最大N階層まで</li><li>■■機能は使用不可</li></ul><p>など。</p><p>個人的に考える設計ポイントは以下です。</p><ul><li>依存関係を意識して、ジョブネットを作成する</li><li>スケジュール（サイクル）によって、ジョブネットを分割する</li><li>ジョブの正規化に気をつける</li></ul><p>ボトムアップ工程での、簡単な例で説明していきましょう。<br>（あくまで説明用のジョブで、業務的な意味はないです）</p><h4 id="＜図1-1階層＞"><a href="#＜図1-1階層＞" class="headerlink" title="＜図1: 1階層＞"></a>＜図1: 1階層＞</h4><p><img src="/images/20210204/201.png" alt=""></p><p>中央でファイル監視1～5、取込1～5がパラレルで処理されています。</p><p>5セット程度であれば可読性に問題有りませんが、もし50セットの場合はどうでしょう？</p><h4 id="＜図2-1階層⇒サブジョブネット作成＞"><a href="#＜図2-1階層⇒サブジョブネット作成＞" class="headerlink" title="＜図2: 1階層⇒サブジョブネット作成＞"></a>＜図2: 1階層⇒サブジョブネット作成＞</h4><p><img src="/images/20210204/202.png" alt=""></p><p>ルートジョブネットがすっきりしましたね。可読性を上げるため、ジョブネットにまとめてしまいましょう。これにより依存線を引く回数も5×2本→1×2本まで減らせます。</p><p>その他に業務、処理、組織、システム等でジョブをグループ化し、可読性、生産性が高いジョブ設計を意識しましょう。</p><p>話がややこしくなるのは、１ジョブが複数のジョブと依存関係持っている場合です。</p><h4 id="＜図3-1階層（ジョブ追加）＞"><a href="#＜図3-1階層（ジョブ追加）＞" class="headerlink" title="＜図3: 1階層（ジョブ追加）＞"></a>＜図3: 1階層（ジョブ追加）＞</h4><p><img src="/images/20210204/203.png" alt=""></p><p>取込5のデータを使って、「重い処理」を先行して処理したい要件が追加された<br>とします。１階層で表現すると、上記のようになります。</p><p>ジョブネット化し可読性を上げる場合、いくつかパターンがあります。ジョブネット名の整合性、可読性、待ち時間等にトレードオフが発生しますので、４パターンほど見てみましょう。</p><p>※ジョブネットを跨ぐ関連線は設定できません</p><h2 id="対応パターン①"><a href="#対応パターン①" class="headerlink" title="対応パターン①"></a>対応パターン①</h2><p><img src="/images/20210204/204.png" alt=""><br>「ファイル取込」というグループにファイル取込5が含まれていません。例外が存在し、混乱を招きそうです。</p><h2 id="対応パターン②"><a href="#対応パターン②" class="headerlink" title="対応パターン②"></a>対応パターン②</h2><p><img src="/images/20210204/205.png" alt=""><br>「ファイル取込」というジョブネット名に合っていない「重い処理」が含まれることになります。こちらも運用で混乱を招きそうです。</p><h2 id="対応パターン③"><a href="#対応パターン③" class="headerlink" title="対応パターン③"></a>対応パターン③</h2><p><img src="/images/20210204/206.png" alt=""><br>ファイル5が取り込み終わっていても、ファイル取込1～4が終わっていない場合、「重い処理」が実行されません。無駄な待ち時間が発生してしまいます。</p><h2 id="対応パターン④"><a href="#対応パターン④" class="headerlink" title="対応パターン④"></a>対応パターン④</h2><p><img src="/images/20210204/207.png" alt=""><br>ジョブネット間の依存をイベント送受信で実現します。（青線部分）</p><p>ファイル取込はグループ化され、各種処理は同じルートジョブネット階層に配置されています。<br>（例は1階層の小さなジョブですので、そこまでするかという気もします。）</p><p>運用上は、パターン④が面倒なため、パターン①～③で楽をしてしまいがちです。</p><p>その他に、ジョブネットコネクタ連結、ファイル作成→ファイル監視等でも可能ですが、細かなバリエーションは無数にあるので割愛します。</p><h1 id="スケジュールによる分割とジョブの正規化"><a href="#スケジュールによる分割とジョブの正規化" class="headerlink" title="スケジュールによる分割とジョブの正規化"></a>スケジュールによる分割とジョブの正規化</h1><p>次に意識したいのはジョブの正規化です。<br><img src="/images/20210204/208.png" alt=""></p><p>上のサンプルですが、</p><ul><li>上段の平日ジョブは、社員が出社している日だけ実施します</li><li>中段の日次ジョブは、平日でも休日でも毎日行います</li><li>下段の休日ジョブは、社員が出社していない休日にのみ行うメンテナンス処理です</li></ul><p>スケジュールはジョブではなく、ジョブネットに設定するため、ジョブネットを作成しスケジュールを分ける必要があります。</p><h2 id="パターン①-2分割"><a href="#パターン①-2分割" class="headerlink" title="パターン①　2分割"></a>パターン①　2分割</h2><p>ルートジョブネット「平日ジョブ」（スケジュール：運用日）<br><img src="/images/20210204/209.png" alt=""></p><p>ルートジョブネット「休日ジョブ」（スケジュール：休業日）<br><img src="/images/20210204/210.png" alt=""><br>の２ジョブネット構成です。</p><h2 id="パターン②-3分割"><a href="#パターン②-3分割" class="headerlink" title="パターン②　3分割"></a>パターン②　3分割</h2><p>ルートジョブネット（スケジュール：絶対日）<br><img src="/images/20210204/211.png" alt=""></p><p>サブジョブネット「平日ジョブ」（スケジュール：運用日）<br><img src="/images/20210204/212.png" alt=""></p><p>サブジョブネット「休日ジョブ」（スケジュール：休業日）<br><img src="/images/20210204/213.png" alt=""><br>の３ジョブネット構成です。</p><p>違いがわかりますでしょうか。どちらが正解ということは無いのですが、パターン①の場合、「サーバ起動」などの日次ジョブが平日と休日の両ジョブネットで２重に定義されています。これは正規化という観点からは好ましく有りません。</p><p>仮にジョブ設定に修正が発生した場合、N箇所対応せねばならず、作業漏れなどが発生しがちです。ほぼ変更が発生しないようなジョブであれば、二重定義も有りかとは思いますが、ジョブ設計方針を確認の上で分割を検討しましょう。<br> <br>以上、初級中級者向けのJP1設計ポイントでした。</p><h1 id="参考資料：日立HPより"><a href="#参考資料：日立HPより" class="headerlink" title="参考資料：日立HPより"></a>参考資料：日立HPより</h1><ul><li><a href="http://itdoc.hitachi.co.jp/manuals/3020/30203S0332/AJSH0008.HTM" target="_blank" rel="noopener">設計ガイド（システム構築編）1.3 設計のポイント</a></li><li><a href="http://itdoc.hitachi.co.jp/manuals/3020/30203S0332/AJSH0008.HTM" target="_blank" rel="noopener">設計ガイド（業務設計編） 2.2.1　ジョブの実行順序を検討する</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;デジタルイノベーショングループ所属の朽方です。&lt;/p&gt;
&lt;p&gt;私の携わったプロジェクトではJP1運用が多いのですが、「JP1
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="JP1" scheme="https://future-architect.github.io/tags/JP1/"/>
    
      <category term="ジョブ設計" scheme="https://future-architect.github.io/tags/%E3%82%B8%E3%83%A7%E3%83%96%E8%A8%AD%E8%A8%88/"/>
    
  </entry>
  
  <entry>
    <title>WEB+DB PRESS Vol.120 最新Vue.js3入門を読んで</title>
    <link href="https://future-architect.github.io/articles/20210203/"/>
    <id>https://future-architect.github.io/articles/20210203/</id>
    <published>2021-02-02T15:00:00.000Z</published>
    <updated>2021-02-15T05:34:33.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Technology Innovation Group所属の久保です。</p><p>私はフロントエンドエンジニアとして約1年くらいVue2でのフロントエンド開発を行っています。そんなVue3を全く触ったことにのないエンジニアが読んだ｢WEB+DB PRESS Vol.120｣に掲載されている｢最新Vue.js3入門｣の記事感想文となります｡  </p><p>とても面白く良い雑誌なので是非定期購入をおすすめします｡</p><img src="/images/20210203/TH320_9784297118112.jpg" class="img-small-size"><ul><li><a href="https://gihyo.jp/magazine/wdpress/archive/2021/vol120" target="_blank" rel="noopener">https://gihyo.jp/magazine/wdpress/archive/2021/vol120</a></li></ul><h1 id="執筆陣"><a href="#執筆陣" class="headerlink" title="執筆陣"></a>執筆陣</h1><p>執筆陣に当社の太田がいたのが縁で、折角なので感想をブログで書こうとなった背景です。</p><ul><li>石井輝亜    グローバル・ブレイン(株)</li><li>太田洋介    フューチャー(株)</li></ul><h1 id="本記事のターゲット層"><a href="#本記事のターゲット層" class="headerlink" title="本記事のターゲット層"></a>本記事のターゲット層</h1><p>｢最新Vue.js3入門｣と謳っている通りVueの知識0でも読める記事となっています｡</p><p>もちろんVue2､Vue3の知識があっても楽しめる記事だと思います｡</p><h1 id="本書の目次"><a href="#本書の目次" class="headerlink" title="本書の目次"></a>本書の目次</h1><p>本書では5つの章で構成されており約30ページながらVueの歴史からVue2､Vue3でのTodoアプリケーション製作など､かなり濃厚な内容となっています｡</p><p>章立ては以下の通りです｡</p><p>1.Vue.js入門… 歴史､特徴､開発環境の構築<br>2.Vue.jsの基本的な使い方…Todoリストアプリケーションを作って学ぶ<br>3.Vue.コンポーネントの基本的な使い方…簡単な記述で使用できる部品を作る<br>4.Vue.js 3 の新機能…新しいコンポーネントの書き方､柔軟なテンプレート､Vue2からの移行<br>5.Vue.jsの公式プラグイン…ルーティング､ステート管理､リンタ､テスト､デバッグ</p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><h2 id="1章"><a href="#1章" class="headerlink" title="1章"></a>1章</h2><ul><li>Vueの歴史</li><li>Vueの特徴  <ul><li>HTMLベースでの制御について  </li><li>コンポーネントによる構成  </li></ul></li><li>環境構築<ul><li>VScode</li><li>Vite</li></ul></li></ul><h2 id="2章"><a href="#2章" class="headerlink" title="2章"></a>2章</h2><ul><li>ToDoリスト実装<ul><li>要件定義</li></ul></li><li>リスト表示部の実装<ul><li>単一項目の表示</li><li>複数項目の表示</li></ul></li><li>入力フォームとボタンの実装<ul><li>入力フォーム実装</li><li>ボタン実装</li><li>入力フォームとボタンの連動</li></ul></li><li>操作機能の実装<ul><li>ステータス毎の表示切り替え</li><li>フィルタ機能実装</li></ul></li><li>装飾<ul><li>styleブロックの書き方</li><li>クラスのバインディング方法</li></ul></li></ul><h2 id="3章"><a href="#3章" class="headerlink" title="3章"></a>3章</h2><ul><li>コンポーネント<ul><li>2章で実装したアプリケーションのコンポーネント化</li><li>コンポーネントの登録方法</li></ul></li><li>コンポーネントを使用するための定義<ul><li>props/emit</li><li>slot</li><li>provide/inject</li></ul></li><li>スコープ付きCSS</li><li>transition を使用したアニメーション<ul><li>transition コンポーネント</li><li>transition-group コンポーネント</li></ul></li></ul><h2 id="4章"><a href="#4章" class="headerlink" title="4章"></a>4章</h2><ul><li>Composition API<ul><li>Options API(Vue2)</li><li>Reactivity API(Vue3)</li><li>Reactivity APIの基本的な使い方</li><li>Reactivity APIを使用した開発の特徴</li><li>使用可能なライブラリの紹介</li></ul></li><li>teleport コンポーネント<ul><li>基本的な使い方</li></ul></li><li>Fragments<ul><li>基本的な使い方</li></ul></li><li>emits オプション<ul><li>基本的な使い方</li></ul></li><li>Vue 2からVue 3へのマイグレーション<ul><li>移行対象の機能</li><li>マイグレーションツールの紹介</li></ul></li></ul><h2 id="5章"><a href="#5章" class="headerlink" title="5章"></a>5章</h2><ul><li>Vue Router<ul><li>インストール</li><li>URLに対応するコンポーネント設定</li><li>Vue Routerの有効化</li><li>ページ遷移</li></ul></li><li>Vuex<ul><li>インストール</li><li>ストアの作成</li><li>Vuexの有効化</li><li>ストアの参照方法</li><li>ステートの更新</li></ul></li><li>他の公式プラグイン<ul><li>環境構築、拡張機能</li><li>リンタ、テスト、デバッグ</li><li>フレームワーク</li></ul></li></ul><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>約30ページながらVueの歴史や特徴､開発環境の構築からToDOアプリケーション実装、Vue3のプラグイン紹介までがかなり濃厚な内容となっています｡また本書はコーディングしながら読み進める構成となっており楽しみながら読める内容だとと思います｡</p><p>1章ではVueの環境構築からHello worldやv-if､コンポーネントの構成など書いてます。ページが少ないながら環境構築までしっかりと書いてあるのは初心者にとってありがたいと思いました｡  </p><p>2章ではVue2でのToDoアプリケーションの実装方法が書いてあります｡</p><p>要件定義から始まるのはさすがITコンサルタント！と思いました。またしっかりとソースコードも乗っておりHTML,JS,CSSも満遍なく勉強ができる内容で本記事のターゲット層に書いたとおりVueの知識0でもアプリケーションが作れます｡</p><p>3章では2章で実装したものをコンポーネント単位（部品単位）での分け方の紹介となっています｡</p><p>別コンポーネントへのデータの渡し方､アニメーション効果の実装方法などが記載されています｡このデータの渡し方が1パターンでなく（props/emit、slot、provide/inject）の複数のパターンで紹介しており、パターン毎のメリット､デメリットなど詳細に記載してありかなり勉強になりました。  </p><p>4章では今まで2-3章で実装したアプリケーションをVue3への移行方法､実装方法が書いてあります｡</p><p>2-3章で実装したVue2のコードと比較しVue3での実装例が数パターン紹介されています｡</p><p>またVue2ではなかった新機能も紹介されています。<br>以下一例の引用します。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">Vue3の新機能である <span class="symbol">&amp;lt;</span>teleport<span class="symbol">&amp;gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>= <span class="string">"body"</span>&gt;</span></span><br><span class="line">  ページ内の任意の箇所にテレポーテーションできます。</span><br><span class="line"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br><span class="line">を試しましょう</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上記のコードを実行すると以下のような表示になります</p><hr><p>Vue3の新機能である <teleport> を試しましょう<br>ページ内の任意の箇所にテレポーテーションできます。</p><hr><p>このように <code>&lt;teleport&gt;</code>のコンテンツがコンポーネントの中から別の場所に表示されるようになります。</p><p>この機能を活用することでVue2では大変だったモーダルウィンドウなどのZ-indexの表示問題を回避することができるようになります。（詳しくは本を読んでみましょう）</p><p>このような機能を知るとVue3すげー!やってみたい!という気持ちが奮い立ちます｡またVue2からVue3へのマイグレーションツールの紹介もあります｡Vue2で実装経験のある人には有益な情報だと思います。</p><p>5章では4章のVue3で実装したアプリケーションで使わなったもので代表的なプラグインが紹介されています｡まだRC版ですがVue2でアプリケーションを実装したことあるにも人は馴染み深いプラグインも多くあります｡今後の正式版リリースがたのしみですね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ターゲット層にも書きましたが知識0でもVue2では実装経験あるがVue3は使ったことない人でも楽しめる記事だと思います｡</p><p>私も手を動かしながらVue2との違いを楽しみながら読んでいたらあっという間に30ページ読み切っていました｡特に3章では勉強になることも多く内容の濃い記事となっていました｡</p><p>もちろんこの記事だけでなく他も面白い記事が沢山あるのでこれは買いですね!</p><ul><li><a href="https://gihyo.jp/magazine/wdpress/archive/2021/vol120" target="_blank" rel="noopener">https://gihyo.jp/magazine/wdpress/archive/2021/vol120</a></li></ul><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20201013/index.html" data-iframely-url="//cdn.iframe.ly/SAxxrkF?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200924/index.html" data-iframely-url="//cdn.iframe.ly/dsvZVOu?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200428/index.html" data-iframely-url="//cdn.iframe.ly/2dHfIIG"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、Technology Innovation Group所属の久保です。&lt;/p&gt;
&lt;p&gt;私はフロントエンドエンジニ
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="書籍" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
      <category term="書評" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/"/>
    
  </entry>
  
  <entry>
    <title>システム障害対応の心構えと対応</title>
    <link href="https://future-architect.github.io/articles/20210202/"/>
    <id>https://future-architect.github.io/articles/20210202/</id>
    <published>2021-02-01T15:00:00.000Z</published>
    <updated>2021-02-22T02:09:01.613Z</updated>
    
    <content type="html"><![CDATA[<h2 id="１．はじめに"><a href="#１．はじめに" class="headerlink" title="１．はじめに"></a>１．はじめに</h2><p>冬の寒い夜、シャワーからお湯が出なくなったり、雪の降った朝、車のエンジンが掛からなかったり、列車を待っていたら運転見合わせとなり、いつ帰れるのかわからなくなったり、普段の生活の中でも障害は突然発生します。</p><p>システムも同じで、昨日まで正常に動いていたのに、突然止まる、なんだか挙動がおかしいといったシステム障害が突然発生します。</p><p>この記事ではシステム障害が発生した際の心構え、対応についてご紹介します。なお、システム障害の定義は、『<a href="https://gihyo.jp/book/2020/978-4-297-11265-3" target="_blank" rel="noopener">システム障害対応の教科書</a>』の「リリース後のシステムにおいて、システムの不具合やユーザ側の操作ミスで、ユーザ業務に影響が出ている」と同義といたします。</p><p>この記事の想定している対象者は、システム障害対応に初めて参加される方です。システム開発、運用保守といった直接対応する方はもちろんですが、システムが関わる場面は多岐に渡りますので、利用者、開発依頼をされる方にもシステム障害の裏側を知っていただければ幸いです。</p><p>私の略歴です。これまで総合物流企業の事務経理システム刷新のお手伝い、ネット証券でのシステム企画開発、現職フューチャー・アーキテクトでは金融のお客様の運用保守のとりまとめをしています。</p><h2 id="２．システム障害発生"><a href="#２．システム障害発生" class="headerlink" title="２．システム障害発生"></a>２．システム障害発生</h2><img src="/images/20210202/siren-297289_1280.png" class="img-small-size"><blockquote><p><a href="https://pixabay.com/ja/users/clker-free-vector-images-3736/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=297289" target="_blank" rel="noopener">Clker-Free-Vector-Images</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=297289" target="_blank" rel="noopener">Pixabay</a>からの画像</p></blockquote><p>あなたが開発に関わった初めてのシステムは無事にカットオーバーを迎えました。おめでとうございます。</p><p>眉間のシワが深くなっているリーダー陣も少し冗談が言えるようになったことでしょう。</p><p>ある日、あなたが早めに出社したところ、部屋の奥にある<a href="https://isa-j.co.jp/keiko/products/" target="_blank" rel="noopener">パトランプ</a>が鳴っていることに気づきました。</p><p>周りには誰もいません。</p><p>パトランプの存在は知ってましたが先輩がサッと止めて何かコマンドを叩いて確認し、他のメンバと会話しているのを横目に見るぐらいでした。</p><p>このタイミングで何をするべきでしょう。</p><p>まずは、<strong>連絡</strong>です。</p><p>あなたの身近の先輩、リーダーなど連絡先を知っている人が出るまで総当たりで連絡しましょう。パトランプが鳴り響く恐怖からその場を離れたくなるかもしれませんが、勇気を持って、何かが起きていることを発信しましょう。緊張で話す内容がまとまらない時は、いったん深呼吸して、3つ数えて、心を落ち着かせましょう。焦らず、事実だけを話すことが大事です。</p><h2 id="３．システム障害対応"><a href="#３．システム障害対応" class="headerlink" title="３．システム障害対応"></a>３．システム障害対応</h2><p>システム障害の対応は初動がとても大事です。</p><p>先輩に連絡が付いたら、<strong>いつ</strong>、何に気づいたのか、<strong>誰に</strong>連絡をしたのか、話をしながらノートに<strong>書き留め</strong>ましょう。近くにホワイトボードがあれば持ってきて転記しましょう。</p><p>しばらくすると、出勤途中だった先輩が到着しました。</p><p>ホワイトボードを見てもらい、受け答えをしてみましょう。この時、他の方への連絡を依頼されるかもしれませんし、簡単な調査を依頼されるかもしれません。依頼されたこともホワイトボードに書いて、やってみましょう</p><p>気がつくと、現場にはたくさんの人が集まっているはずです。手が空いていれば発言に耳を傾け、調査結果や<strong>決定事項</strong>と思われることを<strong>時刻</strong>と共に<strong>記録</strong>していきましょう。</p><p>重苦しい空気の中、パトランプの音、キーボードを叩く音、どこかへ電話する声、様々な会話が飛び交います。言葉に耳を傾けると、影響はいまも出ている？、何時までに復旧しないとまずい？、あの人に連絡した？、ログを取って、エラーの出力箇所のプログラムを見て、ハードはみた？、前にあった事例に似ていない？、などなど情報が錯綜するでしょう。</p><p>長丁場の場合、リーダーからあなたへ食料の買い出しを求めらるかもしれません。コンビニに走っていかれると思いますが、参加人数×2個ぐらいのおにぎり、サンドイッチがいいでしょう。常温でも飲めるものも人数分買いましょう。お弁当を買ってしまうとレンジが必要になります。カップ麺はお湯が必要です。冷たかったり、温かくないとおいしく飲めないものは、すぐに食事できない人には不向きです。みなさんが交代で食事することを意識したものを用意するのがよいでしょう。長期戦かなと思ったら栄養ドリンクもあるとよいでしょう。</p><p>リーダーがお客様への定期的な報告をしているのを横で聞きながらメモを取っていると、お客様がとある操作の話をされました。</p><p>あなたが知っている画面でしたので、言われた操作をすると、普段なら正常に表示されるはずなのに、なぜかその操作ではエラーになります。その画面をリーダーに見せて、エラーの操作方法を説明しました。リーダーは、調査メンバを呼んで、あなたに再度操作するよう求めてきます。調査メンバはすばやくコンソールを叩きながらログを読み始めています。そして、あなたの操作で発生しているエラーから怪しい箇所が報告され、復旧に向けたプランが議論され始めました。やがて、リーダーとお客様の間で復旧手順の実施が承認され、実行に移されます。</p><p>狙い通りであれば、無事に復旧するはずです。</p><h2 id="４．システム障害終了"><a href="#４．システム障害終了" class="headerlink" title="４．システム障害終了"></a>４．システム障害終了</h2><p>システム障害が解消されたあと、何があったのか確認がされます。</p><p>その時にあなたのメモが効果を発揮します。紙やホワイトボードに手書きしているものを整理して、リーダーに共有しましょう。もしかすると、報告書の手伝いを依頼されるかもしれません。起きたことを思い出しながら事実を正確に書いてみましょう。システム障害対応中、たくさんの用語が飛び交い、初めて見る資料が大量に出てきたはずです。ツラい時間だったかもしれませんが、終わった瞬間、何かが見えた感覚を味わうかもしれません。</p><p>さて、あなたが初めて体験したシステム障害が無事、収束しました。</p><p>まずは家に帰って、39度ぐらいのぬるめのお風呂に10分ぐらいゆっくり使って、早めに寝ましょう。</p><h2 id="５．ふりかえり"><a href="#５．ふりかえり" class="headerlink" title="５．ふりかえり"></a>５．ふりかえり</h2><p>システム障害対応が終わり、翌日、振り返った時、何か気づきはなかったでしょうか。</p><p>最初にパトランプが鳴っていることを気づいたときに、誰に連絡したらいいか頭に浮かびましたか。もし、誰に連絡したらいいのかわからないときは、事前に確認をしておいた方がよいでしょう。今回は、ノートに書きながら記録を残しましたが、パソコンで記録を取っていたらメールに貼ったり、報告書に使いまわせたりしなかったでしょうか。ホワイトボードに発生時刻や起きていることを書きましたが、これもパソコンから接続可能なファイルをチームに共有できたらホワイトボードの大きさに依存せずに複数人で更新ができたでしょう。</p><p>いろんな人の会話もチャットに集合してもらってやりとりをしてもらうと、後から来た人への共有も楽になるでしょう。影響調査をするときに、事前に実施する内容を決めておけば、どこは大丈夫でどこがダメなのかある程度の影響範囲がわかるようになるでしょう。</p><p>今回の対応の記録を手順書にできれば、万が一同じことが起きた時により早く復旧できるでしょう。</p><h2 id="６．さいごに"><a href="#６．さいごに" class="headerlink" title="６．さいごに"></a>６．さいごに</h2><p>あなたがシステムと関わり続ける限り、システム障害は何度でも発生します。</p><p>「助けを借りたいときはいつでも言ってくれ」そんな台詞を言ってくれそうな仲間をたくさんみつけて、あなたも力を貸せるように一緒に精進しましょう。</p><h2 id="７．参考"><a href="#７．参考" class="headerlink" title="７．参考"></a>７．参考</h2><p>この記事で、システム障害対応の世界に興味を持たれたら、下記もお読みください。</p><p>Qiita</p><ul><li><a href="https://qiita.com/ko1/items/dc260b14d9b7e8a54bd6" target="_blank" rel="noopener">運用における障害対応の基本 - システム障害といかに向き合い、チームとして対処するか</a></li><li><a href="https://qiita.com/zaru/items/edb49d8d2a2a6981789a" target="_blank" rel="noopener">システム障害と僕達はいかにして戦えば良いのか、障害対応について考えた</a></li><li><a href="https://qiita.com/s_kozake/items/825348559e4b4e330fb5" target="_blank" rel="noopener">恥かどうかはともかく、そもそも逃げられない障害対応のお話</a></li></ul><p>書籍</p><ul><li><a href="https://gihyo.jp/book/2020/978-4-297-11265-3" target="_blank" rel="noopener">システム障害対応の教科書</a></li><li><a href="https://www.oreilly.co.jp/books/9784873117911/" target="_blank" rel="noopener">SRE サイトリライアビリティエンジニアリング</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;１．はじめに&quot;&gt;&lt;a href=&quot;#１．はじめに&quot; class=&quot;headerlink&quot; title=&quot;１．はじめに&quot;&gt;&lt;/a&gt;１．はじめに&lt;/h2&gt;&lt;p&gt;冬の寒い夜、シャワーからお湯が出なくなったり、雪の降った朝、車のエンジンが掛からなかったり、列車を待っていた
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="障害対応" scheme="https://future-architect.github.io/tags/%E9%9A%9C%E5%AE%B3%E5%AF%BE%E5%BF%9C/"/>
    
      <category term="障害対応方法" scheme="https://future-architect.github.io/tags/%E9%9A%9C%E5%AE%B3%E5%AF%BE%E5%BF%9C%E6%96%B9%E6%B3%95/"/>
    
      <category term="初心者" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>自宅仕事環境構築：指向性マイクの勧め</title>
    <link href="https://future-architect.github.io/articles/20210201/"/>
    <id>https://future-architect.github.io/articles/20210201/</id>
    <published>2021-01-31T15:00:00.000Z</published>
    <updated>2021-02-01T01:49:59.921Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20210118/">リモートワーク連載</a>の第2弾です。</p><ul><li>第1回: <a href="https://future-architect.github.io/articles/20210119/">プラントエンジニアのオレオレリモートワーク環境</a></li></ul><p>もともと、お仕事的には2019年にはリモートではあったのですが（仕事のカウンターが海外で、自社に出社しても、客先の日本のオフィスに行っても、テレビ会議とチャットで仕事していた）、2020年の3月からは自宅で仕事をすることになり、いろいろ整備しました。もともと自宅には書斎がなく、自分の机などもなく、本を書いたりOSSのコードを書いたりはしていたのですが、リビングでやるぐらいでした。仕事環境を作るために、タンスがいっぱいあって、洗濯物を干したりといった用途で使われていた部屋の一角に環境を作りました。築20年ぐらいの一軒家で、購入後6年ぐらい住んでいます。</p><p><img src="/images/20210201/PXL_20210126_055613291.jpg" alt=""></p><p>仕事スペースの間取りはこんな感じ。作業スペースは左端（窓側）です。右側は引き戸ですが、隙間があって防音性能は低いです。1階の子供達の声は聞こえてきます。</p><p><img src="/images/20210201/Screen_Shot_2021-01-25_at_17.16.23.png" alt=""></p><p>みなさん、それぞれこだわりの作業テーブルだったり、椅子だったり、モニターだったりがあると思うのですが、好みの問題とか体格によるマッチングもあるので、どれがいいかどうかは人それぞれかと思います。今日はマイクの話をします。</p><h1 id="マイクの購入と設置"><a href="#マイクの購入と設置" class="headerlink" title="マイクの購入と設置"></a>マイクの購入と設置</h1><p>もともと、PCの内蔵マイクで会議をしたりはしていましたが、キーボードの音が入ったりとかが気になっていました。昨年、<a href="https://future-architect.github.io/articles/20200910/">PyCon.jp 2020での発表のプロポーザルが通った</a>ので、せっかくなので、発表者に聞きやすいように良いものを、ということで知人が買っていたAmazonで安く売っている<a href="https://www.amazon.co.jp/dp/B07WKM5ZCS/" target="_blank" rel="noopener">マランツの888M</a>と、フリーハンドでマイクを口に近づけるための<a href="https://www.amazon.co.jp/dp/B07C5H4MJ2/" target="_blank" rel="noopener">マイクアーム</a>を購入しました。macではマイク付属のオーディオインタフェースがうまく動かないということで、<a href="https://www.amazon.co.jp/dp/B06XZY8JTZ/" target="_blank" rel="noopener">Sound Blasterの安いインタフェース</a>も買いました。Sound Blasterを冠する商品を買うのはBeOSプリインストールのぷらっとホームのショップブランドのパソコン（Celeron 300AMHz/メモリ64MB/HDD 6GB/ATi 3D Rage LT/SB AWE32あたり？）以来で22年ぶりですね。</p><p>マイクの指向性的には次のような感じの配置になっています。</p><p><img src="/images/20210201/Screen_Shot_2021-01-25_at_17.13.33.png" alt=""></p><p>音声出力はPCのスピーカー出力をそのまま使うので、パソコンに背を向ける方向で設置しました。キーボードの音も入りません。</p><p>家族がいる人や、夫婦でリモートワークをしている人は、環境音がどれだけ入るのかが気になると思うので、ちょっと実験してみました。meetで他の人につないで、どの程度聞こえるかの感想を聞きました。騒音源は10年ものの<a href="https://www.amazon.co.jp/dp/B003Z9KYRM" target="_blank" rel="noopener">ダイソンDC26</a>で、弱の強さで稼働させてみました。<a href="https://future-architect.github.io/articles/20210119/">家電ソムリエ</a>によると、最近のダイソンは静からしいですが、こいつは景気の良い音を出します。</p><p>結果としては、どの条件でもネットワークの向こうの伊藤さんには問題なく聞こえていました。掃除機を動かしているこちら側では向こうの声がかき消されて聞けないレベルではありましたが。階下で子供が大騒ぎで全力で遊んでも、問題はないですし、廊下で子供が遊んでいてもテレビ会議では相手に迷惑をかけることはないな、ということは分かりました。</p><table><thead><tr><th align="center">条件</th><th align="center">リモートでの感想</th><th align="center">ローカルでの感想</th></tr></thead><tbody><tr><td align="center">ダイソンを廊下に置く＆ドアを閉める</td><td align="center">聞こえない</td><td align="center">うるさい</td></tr><tr><td align="center">ダイソンを廊下に置く＆ドアを開ける</td><td align="center">ホワイトノイズ</td><td align="center">うるさくて仕事できないレベル</td></tr><tr><td align="center">ダイソンを室内（引き戸のそば）に置く</td><td align="center">ホワイトノイズ</td><td align="center">子供の喧嘩を真横で聞いているレベル</td></tr></tbody></table><p>試しにスマホで音楽をマイクの後ろで流しても、「かすかに聞こえる」レベルとのことでした。PCマイク　に切り替えてみると、バッチリ向こう側に聞こえていたらしいです。ここまで指向性があるのであれば、テレビ会議しながら発話者だけに音で伝えるのも可能そうではあります。これは勉強会などの発表をしつつ、発表者に対して音声で「あと5分」みたいな音声指示をマイクの裏で流すことは可能だったりしそうなので、うまく使えば、オンライン勉強会をよりスムーズに回せそうな気がします。</p><p>その後追試で音量を計測しました。Meet越しにiPhoneアプリの<a href="https://apps.apple.com/jp/app/sonic-tools-svm/id1245046029" target="_blank" rel="noopener">Sonic Tools SVM</a>で計測するみたいな簡単な計測方法です。Meetのアプリもノイズ抑制があったり、おそらくiPhoneアプリ側でも環境音を消すフィルターを持っているだろうな、みたいないろいろ変数がありすぎて評価が難しいところですが、ノイズ発生直後でもマイクで発話する声よりもだいぶ小さいノイズしか向こうには聞こえないということはお分りいただけると思います。その後の音量の下がり方はMeetが頑張って消しているんですかね。Meetすごい。</p><table><thead><tr><th align="center">条件</th><th align="center">マイク</th><th align="center">音量</th></tr></thead><tbody><tr><td align="center">無音（ノイズなし）</td><td align="center">外部マイク</td><td align="center">30dB</td></tr><tr><td align="center">会話（ノイズなし）</td><td align="center">外部マイク</td><td align="center">50dB</td></tr><tr><td align="center">室内でダイソン起動</td><td align="center">外部マイク</td><td align="center">（起動直後）35dB→30dB</td></tr><tr><td align="center">無音（ノイズなし）</td><td align="center">mac内蔵マイク</td><td align="center">30dB</td></tr><tr><td align="center">会話（ノイズなし）</td><td align="center">mac内蔵マイク</td><td align="center">50dB</td></tr><tr><td align="center">室内でダイソン起動</td><td align="center">mac内蔵マイク</td><td align="center">（起動直後）55dB→28dB</td></tr></tbody></table><p>マイクを変えてから、テレビ会議中に子供が部屋に入ってきて喋っても他の人には気づかれることはいまのところないので、マイクのおかげで生活音が会議の相手には伝わりにくくなっていることの裏付けは取れたと思います。</p><p>とはいえ、この生活音の伝搬については、きちんとした知識のある人に追試してほしいところではありますが。この手の測定は難しいですね。単に送信元の音量レベルを計測すればいいかというと、実際にネットワーク越しに聞く人の感性に近い数値を出そうとすると、Meetを通してそのノイズキャンセル機能も含めて測定したいところでありますし。夏休みの自由研究ネタに良さそう。</p><h1 id="その他の機材"><a href="#その他の機材" class="headerlink" title="その他の機材"></a>その他の機材</h1><p>今回買ったのはマイクとカメラ以外には、ディスプレイアーム、机とトラックボールぐらいですかね。</p><h2 id="ディスプレイ"><a href="#ディスプレイ" class="headerlink" title="ディスプレイ"></a>ディスプレイ</h2><p>Dellの4Kです。24インチぐらいですかね。知人からもらったものです。その知人にはガステーブルをあげたのでブツブツ交換ですかね。今時のUSB-Cで1本で繋がったりと比べると古いモデルですし、4Kで30Hzですが、困ってません。ゲームとかしないので。</p><h2 id="キーボード＆トラックボール"><a href="#キーボード＆トラックボール" class="headerlink" title="キーボード＆トラックボール"></a>キーボード＆トラックボール</h2><p><a href="https://www.amazon.co.jp/dp/B009ZNBJBM/" target="_blank" rel="noopener">Kinesis Freestyle 2</a>です。姿勢は大事(<a href="https://www.oreilly.co.jp/community/blog/2016/02/helthy-programmers-talk-training-part1.html" target="_blank" rel="noopener">Part 1</a>, <a href="https://www.oreilly.co.jp/community/blog/2016/03/helthy-programmers-talk-training-part2.html" target="_blank" rel="noopener">Part 2</a>)なのでセパレートです。前職の時から使っていて、前のプロジェクトで客先に持ち込んだりもしていたのでだいぶ長い付き合いであす。だいぶタッチが悪くなってきたので買い替えを検討中。シルバー軸のKinesis Freestyle Edgeか、Mistel MD770 Baroccoか。トラックボールは<a href="https://www.amazon.co.jp/dp/B004QJYBAG/" target="_blank" rel="noopener">ケンジントンのスリムブレード</a>です。ボールの大きさは正義。会社のロッカーには別のトラックボールもあったのですが、取りに行けなかったので。</p><h2 id="サンワサプライのデスク"><a href="#サンワサプライのデスク" class="headerlink" title="サンワサプライのデスク"></a>サンワサプライのデスク</h2><p>今回購入したのが、<a href="https://www.amazon.co.jp/dp/B0833KVS84/" target="_blank" rel="noopener">サンワサプライの折りたたみデスク</a>です。最終的な仕事のスペースをどこにするか決めていなかったので移動がしやすいように折りたたみにして、家の他の場所に移動しやすいように奥行きの浅いデスクにしました。浅いスペースでもキーボードをおく場所が狭くならないように、エルゴトロンOEMと言われている<a href="https://www.amazon.co.jp/dp/B00MIBN16O/" target="_blank" rel="noopener">Amazon Basicディスプレイアーム</a>でモニタを取り付けています。奥行き50cmでも狭くはないです。モニタの足部分が空くので、ケーブルの配線もしやすくなります。</p><p>ニトリの<a href="https://www.nitori-net.jp/ec/product/8732215s/" target="_blank" rel="noopener">マルチ収納Ｌワイド(オールホワイト)</a>がぴったりサイズ。あとは100円ショップで買ったスチールの網棚を天板の下に取り付けて電源ホルダーに（写真でちら見えしてますが）、本立てを取り付けてノートPCホルダーに。</p><h2 id="アーロンチェア"><a href="#アーロンチェア" class="headerlink" title="アーロンチェア"></a>アーロンチェア</h2><p>知人が椅子の買い替えをするということで、2マン円ほどで買い取ったものです。今回のリモートワークの前からリビングで使っていました。</p><p>だいぶ弱ってきてはいますが、これのおかげで長時間座り続けても健康を維持できています。もし壊れたら<a href="https://twitter.com/hiroki_niinuma" target="_blank" rel="noopener">握力王</a>オススメのバランスチェアにしたいと思い早数年ですが、なかなか壊れないですね。子供達の椅子は全部バランスチェアにしています。</p><h2 id="Google-Nest-mini"><a href="#Google-Nest-mini" class="headerlink" title="Google Nest mini"></a>Google Nest mini</h2><p>リモート会議を忘れないように、だいたい2分前に「オーケーグーグル、17:58にアラーム」みたいに言ってアラームを鳴らす専用機です。</p><h2 id="EOS-Kiss-X90"><a href="#EOS-Kiss-X90" class="headerlink" title="EOS Kiss X90"></a>EOS Kiss X90</h2><p>これもPyCon.jpの発表時のビデオ品質をアップさせようとCostcoで売っているセットを買ってきたものです。EOS WebCam Utilityで接続して発表しました。画質は確かにはるかに良いのですが、長時間使うと熱でダウンする？ まあ、もともとそういう用途ではないので仕方ない気がしますが、有識者によるとBetaが外れた正式版では30分制限があるとか。30分を超える動画撮影ができてしまうと輸出品目がカメラではなくビデオカメラになってしまって関税が変わってしまうので30分撮れない制限があるとかないといか、という噂も聞きました。Big SurとM1対応お待ちしているのですが、専用のウェブカメラの方が良いかもしれません。</p><h2 id="それ以外"><a href="#それ以外" class="headerlink" title="それ以外"></a>それ以外</h2><p>築20年だし、自宅のトイレx2がそこそこ古く、水量が多い古い機種だったのですよね。以前からトイレを新しくしたいという気持ちはありました。在宅というと自宅のトイレを使う回数も激増しますし、定額給付金が入金される前から、速攻で島忠に走って、トイレの改装をやりました。当時は中国からの流通が止まっていて選べる選択肢が少なかったので、店頭在庫でまずは1台改装し、在庫が復活したタイミングで、ちょっと良い機種を選んでもう1台のトイレも最新にしました。男女の人数非的に男性に偏りがちな職場が多かったからか、かつてどの職場でも、トイレの渋滞はいつもひどい感じでしたが、在宅ワークになって一番よかったのはトイレ待ちがない点ですね。</p><p>あとは、全然使っていない部屋でエアコンが壊れたままだったので、コジマで一番安いコロナのエアコンを導入しました。せっかくなので、今後は樹脂内窓のエコリフォームとかもやりたいと思っています。</p><p><a href="https://www.amazon.co.jp/dp/B07WKM5ZCS" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B07WKM5ZCS&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=shibukawayosh-22&language=ja_JP" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=shibukawayosh-22&language=ja_JP&l=li2&o=9&a=B07WKM5ZCS" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p><p><a href="https://www.amazon.co.jp/dp/B07C5H4MJ2" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B07C5H4MJ2&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=shibukawayosh-22&language=ja_JP" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=shibukawayosh-22&language=ja_JP&l=li2&o=9&a=B07C5H4MJ2" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p><p><a href="https://www.amazon.co.jp/dp/B06XZY8JTZ" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B06XZY8JTZ&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=shibukawayosh-22&language=ja_JP" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=shibukawayosh-22&language=ja_JP&l=li2&o=9&a=B06XZY8JTZ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p><p><a href="https://www.amazon.co.jp/dp/B0833KVS84" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B0833KVS84&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=shibukawayosh-22&language=ja_JP" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=shibukawayosh-22&language=ja_JP&l=li2&o=9&a=B0833KVS84" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p><p><a href="https://www.amazon.co.jp/dp/B00MIBN16O" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B00MIBN16O&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=shibukawayosh-22&language=ja_JP" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=shibukawayosh-22&language=ja_JP&l=li2&o=9&a=B00MIBN16O" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p><p><a href="https://www.amazon.co.jp/dp/B009ZNBJBM" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B009ZNBJBM&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=shibukawayosh-22&language=ja_JP" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=shibukawayosh-22&language=ja_JP&l=li2&o=9&a=B009ZNBJBM" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p><p><a href="https://www.amazon.co.jp/dp/B004QJYBAG" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B004QJYBAG&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=shibukawayosh-22&language=ja_JP" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=shibukawayosh-22&language=ja_JP&l=li2&o=9&a=B004QJYBAG" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20210118/&quot;&gt;リモートワーク連載&lt;/a&gt;の第2弾です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1回: &lt;a href=&quot;https://future-architect.
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="リモートワーク" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/"/>
    
      <category term="指向性マイク" scheme="https://future-architect.github.io/tags/%E6%8C%87%E5%90%91%E6%80%A7%E3%83%9E%E3%82%A4%E3%82%AF/"/>
    
  </entry>
  
  <entry>
    <title>Azure Event Hubs の EventProcessorClientを利用した Consumer 実装</title>
    <link href="https://future-architect.github.io/articles/20210129/"/>
    <id>https://future-architect.github.io/articles/20210129/</id>
    <published>2021-01-28T15:00:00.000Z</published>
    <updated>2021-02-09T00:55:22.232Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>Azure が提供されている Event Hubs の Consumer 処理実装の EventProcessorClient について調査する機会があったため、整理した内容を公開いたします。</p><img src="/images/20210129/EventHubs_logo.png" class="img-small-size"><blockquote><p><a href="https://docs.microsoft.com/ja-jp/azure/architecture/icons/" target="_blank" rel="noopener">Azure アーキテクチャ アイコン</a> からの画像</p></blockquote><h2 id="バージョン"><a href="#バージョン" class="headerlink" title="バージョン"></a>バージョン</h2><p>実装言語は Java を想定しています。</p><ul><li>azure-sdk-for-java<ul><li>com.azure:azure-messaging-eventhubs:5.3.1</li><li>com.azure:azure-messaging-eventhubs-checkpointstore-blob:1.3.1</li></ul></li></ul><h2 id="Event-Hubs-とは"><a href="#Event-Hubs-とは" class="headerlink" title="Event Hubs とは"></a>Event Hubs とは</h2><p>Azure が提供している、大規模データを貯めて配信することが可能な Pub/Sub モデルのマネージドサービスです。</p><p><a href="https://docs.microsoft.com/ja-jp/azure/event-hubs/event-hubs-about" target="_blank" rel="noopener">Azure Event Hubs とは - ビッグ データ インジェスト サービス - Azure Event Hubs | Microsoft Docs</a></p><p>Publisher からメッセージを受けて、 Subscriber(Consumer) へ配信する役割をします。<br>Event Hubs 構成としては、以下階層構造となっています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">namespace</span><br><span class="line">└── event hub</span><br><span class="line">└── partition</span><br></pre></td></tr></table></figure><p>まず namespace を作成し、作成したnamespace 内にevent hub を作成、作成したevent hub 内は partition 分割されています。</p><p>partition 数は <code>1 - 32</code> の間で指定します。</p><p>Publisher は namespace と  event hub を指定して、メッセージを送信し、Subscriber も同様にして、メッセージを受信します。</p><h2 id="Offset-管理"><a href="#Offset-管理" class="headerlink" title="Offset 管理"></a>Offset 管理</h2><p>Pub/Sub 系のサービスの、Consumer 実装を行う際に、メッセージをどこまで取得したかを管理すること(= offset 管理) が重要になります。<br>(アプリが突然止まったり、デプロイで停止したりと継続して取れ続けるとは限らないかなと思います。)<br>Event Hubs では offset は <code>Consumer group</code> の <code>partition</code> 単位で管理されます。</p><h3 id="Consumer-group"><a href="#Consumer-group" class="headerlink" title="Consumer group"></a>Consumer group</h3><p>Consumer group とは、複数の Consumer をまとめて扱う単位で、Event Hubs 側の設定で作成できます。Consumer group を設定する目的としては、複数の用途別にメッセージ取得をすることがあります。</p><p>例えば、メール配信用とSlack配信用で同一 Event Hub から別々に受信処理をしたい場合は、Consumer group Mail と Consumer group Slack と分けて作成することで実現できます。その際、offset 管理を別々に実施しないとメッセージが欠けたり重複したりしてしまいます。</p><p>そのため、offset の管理単位として Consumer group が利用されています。<br><img src="/images/20210129/azure_eventhubs_consumer_group.png" alt=""></p><blockquote><p><a href="https://docs.microsoft.com/ja-jp/azure/event-hubs/event-hubs-features#consumer-groups" target="_blank" rel="noopener">Azure アーキテクチャ アイコン-コンシューマーグループ</a> からの画像</p></blockquote><h2 id="EventProcessorClient"><a href="#EventProcessorClient" class="headerlink" title="EventProcessorClient"></a>EventProcessorClient</h2><p>Consumber group 別の offset 管理を行う実装として、 <code>EventProcessorClient</code> が一部 Azure SDK( <a href="https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/eventhubs/azure-messaging-eventhubs" target="_blank" rel="noopener">azure-messaging-eventhubs</a> )にて提供されています。こちらを利用することで、offset 管理をした上で漏れなくメッセージ取得処理を行うことができます。また他のメリットとして、複数台の Consumer 間で負荷を分散して、メッセージを重複することなく、取得する機能も持っています。処理のスケールのため Consumer の台数を増やしたいケースでは、Consumer 間で同じメッセージを取得しないような仕組みづくりが大変ですが、SDK側でよしなにやってくれて便利です。</p><p>ちなみに、旧版の<code>EventProcessorHost</code> (<code>azure-eventhubs</code> )でも同様のことができますが、他 API との実装の一貫性のために新版への移行が推奨されています。(<a href="https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/servicebus/azure-messaging-servicebus/migration-guide.md#migration-benefits" target="_blank" rel="noopener">参考</a>)</p><p>実際の動きとしては、各 Consumer ごとに partition を自動で割り当ててメッセージ取得処理をします。Consumer は 1 つ以上の partition を保持することができます。また、Consumer の増減にも対応し自動で再割り振りをしてくれます。注意点として、Consumer と partition が 1対n 対応する都合上、 Consumer と partition が同一数までしかスケールアウトせず、同一数以上に Consumer を増やしても、増やした Consumer はメッセージ受信処理をしません。</p><h3 id="どういった実装になっているのか？"><a href="#どういった実装になっているのか？" class="headerlink" title="どういった実装になっているのか？"></a>どういった実装になっているのか？</h3><p>実装としては、 ownership と checkpoint の2つの考え方を利用しています。</p><p>ownership は、各 Consumer がどの partition を担当するかを決める役割を担います。checkpoint は、 partition ごとにどの offset までメッセージを取得したかを保存する役割を担います。</p><p>Azure SDK (Java) で提供されている実装は、Blob Storage のメタデータを保存先として利用した実装になっています。</p><p><a href="https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-blob/src/main/java/com/azure/messaging/eventhubs/checkpointstore/blob/BlobCheckpointStore.java" target="_blank" rel="noopener">azure-sdk-for-java/BlobCheckpointStore.java at master · Azure/azure-sdk-for-java</a></p><p>Blob Storage への Blob の配置先は以下の通りで、partition_id ごとに Blob が作成されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ownership</span></span><br><span class="line">az://<span class="variable">$&#123;Blob名&#125;</span>/<span class="variable">$&#123;namespace&#125;</span>/<span class="variable">$&#123;event hub&#125;</span>/<span class="variable">$&#123;consumer group&#125;</span>/ownership/<span class="variable">$&#123;partition_id&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># checkpoint</span></span><br><span class="line">az://<span class="variable">$&#123;Blob名&#125;</span>/<span class="variable">$&#123;namespace&#125;</span>/<span class="variable">$&#123;event hub&#125;</span>/<span class="variable">$&#123;consumer group&#125;</span>/checkpoint/<span class="variable">$&#123;partition_id&#125;</span></span><br></pre></td></tr></table></figure><p>ownership の担当者ID、 checkpoint の offset値 は Blob のメタデータとして管理されています。</p><p>Azure SDK 内で、メタデータ値を参照/更新することで、複数台のConsumer 間で連携して処理を行うことができるようになっています。Azure SDK 側で提供されている処理は Blob Storage を利用していますが、 <code>Checkpointstore</code> interface として切り出されているため、他の Storage (S3, GCS, インメモリ) でも実装することは可能です。<br><a href="https://github.com/Azure/azure-sdk-for-java/blob/master/sdk/eventhubs/azure-messaging-eventhubs/src/main/java/com/azure/messaging/eventhubs/CheckpointStore.java" target="_blank" rel="noopener">azure-sdk-for-java/CheckpointStore.java at master · Azure/azure-sdk-for-java</a></p><h4 id="対応SDK"><a href="#対応SDK" class="headerlink" title="対応SDK"></a>対応SDK</h4><ul><li>.NET Core</li><li>Java</li><li>Python</li><li>JavaScript</li></ul><h4 id="Java-実装サンプル"><a href="#Java-実装サンプル" class="headerlink" title="Java 実装サンプル"></a>Java 実装サンプル</h4><p>サンプルの実装を記載します。その他、公式でサンプル実装が提供されています。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> eventProcessorClientBuilder = <span class="keyword">new</span> EventProcessorClientBuilder()</span><br><span class="line">        .connectionString(<span class="string">"$&#123;Connection String&#125;"</span>)</span><br><span class="line">        .checkpointStore(<span class="keyword">new</span> XXXCheckpointStore())</span><br><span class="line">        .consumerGroup(<span class="string">"$&#123;consumer group名&#125;"</span>)</span><br><span class="line">        .processEvent(eventContext -&gt; &#123;</span><br><span class="line">            <span class="comment">// メッセージ取得 成功処理</span></span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">"partition=&#123;&#125;, sequence number=&#123;&#125;, offset=&#123;&#125;, body:=&#123;&#125;"</span>,</span><br><span class="line">                    eventContext.getPartitionContext().getPartitionId(),</span><br><span class="line">                    eventContext.getEventData().getSequenceNumber(),</span><br><span class="line">                    eventContext.getEventData().getOffset(),</span><br><span class="line">                    eventContext.getEventData().getBodyAsString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 10 件に 1回 checkpoint を更新</span></span><br><span class="line">            <span class="keyword">if</span> (eventContext.getEventData().getSequenceNumber() % <span class="number">10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                eventContext.updateCheckpoint();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;).processError(errorContext -&gt; &#123;</span><br><span class="line">            <span class="comment">// メッセージ取得 失敗処理</span></span><br><span class="line"></span><br><span class="line">            log.error(<span class="string">"namespace=&#123;&#125;, eventhubName=&#123;&#125;, consumerGroup=&#123;&#125;, partitionId=&#123;&#125;"</span>,</span><br><span class="line">                    errorContext.getPartitionContext().getFullyQualifiedNamespace(),</span><br><span class="line">                    errorContext.getPartitionContext().getEventHubName(),</span><br><span class="line">                    errorContext.getPartitionContext().getConsumerGroup(),</span><br><span class="line">                    errorContext.getPartitionContext().getPartitionId(),</span><br><span class="line">                    errorContext.getThrowable());</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> eventProcessorClient = eventProcessorClientBuilder.buildEventProcessorClient();</span><br><span class="line"><span class="comment">// 別スレッドで client が起動</span></span><br><span class="line">eventProcessorClient.start();</span><br><span class="line"><span class="comment">// client を停止</span></span><br><span class="line">eventProcessorClient.stop();</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/eventhubs/azure-messaging-eventhubs/src/samples/java/com/azure/messaging/eventhubs" target="_blank" rel="noopener">azure-messaging-eventhubs</a></li><li><a href="https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/eventhubs/azure-messaging-eventhubs-checkpointstore-blob/src/samples/java/com/azure/messaging/eventhubs/checkpointstore/blob" target="_blank" rel="noopener">azure-messaging-eventhubs-checkpointstore-blob</a></li></ul><h2 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h2><p>その他、調査した結果を記載します。</p><h2 id="Apache-Kafka-との関係"><a href="#Apache-Kafka-との関係" class="headerlink" title="Apache Kafka との関係"></a>Apache Kafka との関係</h2><p>Event Hubs の実装は、 <strong>Kafka ではない</strong> とドキュメントに記載されています。</p><p>(用途が似ており、実態はマネージド Kafka だと勘違いしてました。)</p><p><a href="https://docs.microsoft.com/ja-jp/azure/event-hubs/apache-kafka-frequently-asked-questions" target="_blank" rel="noopener">https://docs.microsoft.com/ja-jp/azure/event-hubs/apache-kafka-frequently-asked-questions</a></p><p>ただ、Kafka API との互換性があるため、Pub/Sub の実装は Kafka のソースコードを利用することができます。</p><h2 id="接続プロトコル"><a href="#接続プロトコル" class="headerlink" title="接続プロトコル"></a>接続プロトコル</h2><p>複数のプロトコル(AMQP, Kafka, HTTPS)に対応していますが、Azure SDKを利用する場合は、AMQP を利用しています。</p><p>AMQP 利用時は、ポート 5671 と 5672 を開く必要があります。</p><p>参考: <a href="https://docs.microsoft.com/ja-jp/azure/service-bus-messaging/service-bus-amqp-protocol-guide" target="_blank" rel="noopener">Azure Service Bus と Event Hubs における AMQP 1.0 プロトコル ガイド - Azure Service Bus | Microsoft Docs</a></p><h2 id="認証・認可方式"><a href="#認証・認可方式" class="headerlink" title="認証・認可方式"></a>認証・認可方式</h2><p>Azure Active Directory 利用と 共有アクセス署名-SAS(Shared Access Signatures) 利用の 2パターンを使用可能です。<br>Connection String を払い出して接続する方式は、SAS 利用のパターンの理解です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Endpoint&#x3D;sb:&#x2F;&#x2F;&lt;namespace&gt;&#x2F;;SharedAccessKeyName&#x3D;&lt;KeyName&gt;;SharedAccessKey&#x3D;&lt;KeyValue&gt;;EntityPath&#x3D;&lt;event hub&gt;</span><br></pre></td></tr></table></figure><p>参考: <a href="https://docs.microsoft.com/ja-jp/azure/event-hubs/event-hubs-get-connection-string" target="_blank" rel="noopener">接続文字列を取得する - Azure Event Hubs - Azure Event Hubs | Microsoft Docs</a></p><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>Azure Event Hubs の EventProcessorClient について紹介いたしました。<br>Azure 系は、他クラウドサービスと比べ情報があまり調べても出てこないので、実装と公式ドキュメントをどれだけ見れるかで理解度が変わってくるなぁという印象でした。また他のサービスも触ってみたいです。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.microsoft.com/ja-jp/azure/event-hubs/event-processor-balance-partition-load" target="_blank" rel="noopener">複数のインスタンス間でパーティション負荷のバランスを取る - Azure Event Hubs - Azure Event Hubs | Microsoft Docs</a></li><li><a href="https://docs.microsoft.com/ja-jp/azure/service-bus-messaging/service-bus-amqp-protocol-guide?toc=https%3A%2F%2Fdocs.microsoft.com%2Fja-jp%2Fazure%2Fevent-hubs%2Ftoc.json&bc=https%3A%2F%2Fdocs.microsoft.com%2Fja-jp%2Fazure%2Fbread%2Ftoc.json" target="_blank" rel="noopener">Azure Service Bus と Event Hubs における AMQP 1.0 プロトコル ガイド - Azure Service Bus | Microsoft Docs</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;Azure が提供されている Event Hubs の Consumer 処理実装の EventProcessorClient について調査
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Java" scheme="https://future-architect.github.io/tags/Java/"/>
    
      <category term="Azure" scheme="https://future-architect.github.io/tags/Azure/"/>
    
  </entry>
  
  <entry>
    <title>Future Tech Night(第3弾：船舶IoT Platform編)を開催しました。</title>
    <link href="https://future-architect.github.io/articles/20210128/"/>
    <id>https://future-architect.github.io/articles/20210128/</id>
    <published>2021-01-27T15:00:00.000Z</published>
    <updated>2021-02-01T02:09:04.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの仲澤、矢野です。</p><p>2020/8/17にオンラインにてFuture Tech Nightという社外勉強会を開催しました。</p><p>今回は第3弾としてAWS＆DataPlatform を活用した、船舶IoTプロジェクトの事例を紹介しました。</p><ul><li><a href="https://future.connpass.com/event/177093/" target="_blank" rel="noopener">Future Tech Night #1 ~メディア業界変革編～</a></li><li><a href="https://future.connpass.com/event/179387/" target="_blank" rel="noopener">Future Tech Night #2 ～MaaS ビジネス編～</a></li><li><a href="https://future.connpass.com/event/185051/" target="_blank" rel="noopener">Future Tech Night #3 ～船舶IoT Platform編～                               </a>← 今回はここ</li><li><a href="https://future.connpass.com/event/188742/" target="_blank" rel="noopener">Future Tech Night #4 〜Go x AWS スマート工場編〜</a></li><li><a href="https://future.connpass.com/event/195568/" target="_blank" rel="noopener">Future Tech Night #5 〜AWS＆DataPlatform MaaSビジネス編〜</a></li></ul><p><img src="/images/20210128/%E3%83%95%E3%82%99%E3%83%AD%E3%82%AF%E3%82%99%EF%BC%BF%E5%9B%B31.png" alt=""></p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>勉強会は以下のような構成で行いました。</p><ol><li>FutureとTechnology Innovation Groupの紹介</li><li>顧客・業界の紹介</li><li>業界の課題とプロジェクトの提案</li><li>プロジェクトの概況</li></ol><p>FutureとTechnology Innovation Groupの紹介では、グループ全体の紹介を代表的なプロジェクトを取り上げて紹介しました。<br><img src="/images/20210128/image01.png" alt=""></p><p>顧客・業界の紹介では、業界の構造を説明した後に、業界が抱えている課題を定義し、<br><img src="/images/20210128/image02.png" alt=""></p><p>その課題を解決するためにプロジェクトが提案した内容を説明しました。<br><img src="/images/20210128/%E5%9B%B31.png" alt=""></p><p>プロジェクトの概況では、働き方や担当領域の紹介、プラットフォームの全体像と、設計事例、構築にあたって利用したシステムやサービスについて紹介をしました。</p><p><img src="/images/20210128/%E5%9B%B32.png" alt=""></p><p><img src="/images/20210128/%E5%9B%B33.png" alt=""></p><h1 id="登壇者からのコメント"><a href="#登壇者からのコメント" class="headerlink" title="登壇者からのコメント"></a>登壇者からのコメント</h1><p><strong>仲澤：</strong><br>普段、少人数でひっそりとプロジェクトをやっているので、今回の社外発信は、とても有意義でした。<br>海事産業はITへの投資は他業界と比較して、まだ進んでおらず、また効果が大きいと感じています。自分たちの手で海上の事故を減らし、業務の効率化ができることに、とてもやりがいを感じています。一緒にやってくれる仲間も募集しています！</p><p><strong>矢野：</strong><br>これから少しずつ成長していくサービスを作っている実感があります。実績ベースでお話をすることはできませんでしたが、今後にご期待ください。業界特有の癖のようなものがあり、技術的にも挑戦しがいがあります。技術的な面白さは当プロジェクトに限らず数多く存在しており、この勉強会ではそんな面白いプロジェクトの紹介が今後も行われる予定ですので、興味を持たれた方はぜひご参加ください。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ご参加頂いた方々、ありがとうございました。</p><p>FUTUREではFuture Tech Nightの他にも様々なイベントを開催しております。</p><ul><li><a href="https://future.connpass.com/" target="_blank" rel="noopener">https://future.connpass.com/</a></li></ul><p>今後も皆様のご参加をお待ちしております。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200925/index.html" data-iframely-url="//cdn.iframe.ly/YpB7olh?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20201228/index.html" data-iframely-url="//cdn.iframe.ly/RWuBJfe?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの仲澤、矢野です。&lt;/p&gt;
&lt;p&gt;2020/8/17にオンラインにてFuture Tech Nightとい
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>不調PCを介抱しつつWMIに思いを馳せる</title>
    <link href="https://future-architect.github.io/articles/20210127/"/>
    <id>https://future-architect.github.io/articles/20210127/</id>
    <published>2021-01-26T15:00:00.000Z</published>
    <updated>2021-02-09T00:55:42.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、TIGの加藤剛です。2013年キャリア入社で、現在はTIG内に複数あるチームの1つのリーダをしています。テクノロジー領域としてはインフラやデータベースが明るめの分野です。先日 納期間近の作業中に社用PC端末で少々トラブルがあり復帰対応を行ったのですが、今回はその際の話について、関連する技術要素を織り交ぜながら取り上げてみたいと思います。</p><h1 id="問題の概要"><a href="#問題の概要" class="headerlink" title="問題の概要"></a>問題の概要</h1><p>社用PCのパッチ自動適用後、一時期から音声・ディスプレイ周辺の動作不良が続いていました。デバイスドライバーを当て直したいところなのですが、調査の中でPC構成情報を見ようとsysteminfoコマンドを実行すると、そこで見慣れないエラー。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c:\ systeminfo</span><br><span class="line">オペレーティング システム情報を読み込んでいます...                    エラー: 無効なクラスです</span><br></pre></td></tr></table></figure><p>WindowsのApplicationイベントログにはWMIエラーが数回。<strong>Microsoft-Windows-WMIプロバイダーで イベントID 10 (Error: 0x80041010)</strong>、<code>//./root/CIMV2</code>の名前空間へのクエリが失敗していることがわかります。無視してドライバーをインストールしようとしても、同様のエラーでインストーラが止まり、ここから進めない状態です。納期が迫る中で立ち往生、ということでWMIの構成を修復していきました。</p><figure class="highlight plain"><figcaption><span>Windows-Eventlog（Application）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  + System </span><br><span class="line">  - Provider </span><br><span class="line">   [ Name]  Microsoft-Windows-WMI </span><br><span class="line">(中略)</span><br><span class="line">   EventID 10 </span><br><span class="line">   Version 2 </span><br><span class="line">   Level 2 </span><br><span class="line">   Task 0 </span><br><span class="line">   Opcode 0 </span><br><span class="line">   Keywords 0x8000000000000000 </span><br><span class="line">  - TimeCreated </span><br><span class="line">(中略)</span><br><span class="line">- UserData </span><br><span class="line">  - data_0x8000003F </span><br><span class="line">   Query &#x2F;&#x2F;.&#x2F;root&#x2F;CIMV2 </span><br><span class="line">   Namespace SELECT TargetInstance FROM __InstanceCreationEvent WITHIN 10 WHERE TargetInstance ISA &#39;Win32_Process&#39; AND TargetInstance.Name &#x3D; &#39;lync.exe&#39; </span><br><span class="line">   Error 0x80041010</span><br></pre></td></tr></table></figure><h2 id="原因はWMIリポジトリ破損"><a href="#原因はWMIリポジトリ破損" class="headerlink" title="原因はWMIリポジトリ破損"></a>原因はWMIリポジトリ破損</h2><p>パッチ自動適用の影響なのか真因は不明ながら、ある時点から<strong>WMIのリポジトリが破損</strong>していました。</p><p>尚これが原因で、前述のsysteminfo以外にもWMIベースでの実装されている情報収集機能系の機能は他も軒並みNGという状況でした。例えばmsinfo32のようなコマンド群や、ハードウェアメーカー製のアップデート管理ツールなど。</p><h1 id="WMI（Windows-Management-Instrumentation）とは"><a href="#WMI（Windows-Management-Instrumentation）とは" class="headerlink" title="WMI（Windows Management Instrumentation）とは"></a>WMI（Windows Management Instrumentation）とは</h1><p>そもそもWMIとは何でしょうか。超ざっくり要約すると<strong>Windows関連コンポーネントを管理するための汎用メカニズム</strong>です。<a href="https://ja.wikipedia.org/wiki/Windows_Management_Instrumentation" target="_blank" rel="noopener">Wikipedia</a>ではこのように説明されています。</p><blockquote><p>Windows Management Instrumentation (WMI) は、Windows Driver Modelへの拡張の一種で、システムの構成要素について情報収集と通知を行うオペレーティングシステム (OS) のインターフェースを提供する。WMI はDistributed Management Task Force (DMTF) の定めた Web-Based Enterprise Management (WBEM) と Common Information Model (CIM) 標準のマイクロソフトによる実装である。<br>WMI により、Windowsを搭載したパーソナルコンピュータやサーバをVBScriptやPowerShellのようなスクリプト言語で（ローカルでもリモートでも）管理できるようになる。WMIはWindows Vista、Windows Server 2003、Windows XP、Windows Me、Windows 2000に最初から実装されている。Windows 95およびWindows 98向けのWMIはダウンロード可能である[1]。<br>また、マイクロソフトはWMIのキャラクタユーザインターフェースとして Windows Management Instrumentation Command-line (WMIC) を提供している[2]。</p><p>^ [1] <a href="http://www.microsoft.com/downloads/details.aspx?familyid=98a4c5ba-337b-4e92-8c18-a63847760ea5&displaylang=en" target="_blank" rel="noopener">WMI Redistributable for Windows 95 and Windows 98</a><br>^ [2] <a href="http://support.microsoft.com/kb/290216" target="_blank" rel="noopener">Description of WMIC</a></p></blockquote><p>WMI (Windows Management Instrumentation) の Instrumentationという単語は「計器」や「計器による測定」を意味します。自動車の計器類がエンジンに関する情報を示すように、<strong>WMIはコンピュータシステムの内部状態に関する情報を示します</strong>。WMIでは、Windowsシステム内に検出されたディスクやプロセスなどのオブジェクトをモデリングすることにより、計器情報を提供します。</p><p>WMIによるシステムオブジェクトのモデリングには、<code>Win32_LogicalDisk</code> や <code>Win32_Process</code> などのクラスが使用されます。クラス名から推察できるように、<code>Win32_LogicalDisk</code> はコンピュータ上の論理ディスクをモデリングするクラス、<code>Win32_Process</code> はコンピュータ上で現在稼動している任意のプロセスをモデリングするクラスです。クラスは、Common Information Model (CIM) と呼ばれる拡張可能スキーマに基づいています。CIM スキーマは、<a href="http://www.dmtf.org" target="_blank" rel="noopener">Distributed Management Task Force</a> の公開規格です。</p><p>WMIには、上記のほか、イベント処理、リモート処理、クエリ処理、ビュー、スキーマのユーザー拡張、情報取得などの機能もあります。汎用メカニカズムですので、これに準拠することで<strong>全てのメーカーのハードウェアやソフトウェアで統一的に使える</strong>ようになります。</p><h2 id="WMIのアーキテクチャ"><a href="#WMIのアーキテクチャ" class="headerlink" title="WMIのアーキテクチャ"></a>WMIのアーキテクチャ</h2><p>続いて、WMIのアーキテクチャについて紐解いていきます。詳細はマイクロソフトの <a href="https://docs.microsoft.com/en-us/windows/win32/wmisdk/wmi-architecture" target="_blank" rel="noopener">WMI Architecture</a> に纏まっています。</p><p>WMIはコンピュータ、ネットワーク、ローカルまたはリモートのアプリケーションやスクリプトに対して、統一インターフェースを提供するわけですが、ポイントは<strong>WMIクライアントアプリケーションとスクリプトが多数のOS-APIを呼び出す必要がないように設計</strong>された点でしょう。 WMI以外の多くのAPIは、スクリプトやVBアプリケーションなどのオートメーションクライアントから呼び出すことはできず、リモートコンピュータも呼び出しません。WMIからデータを取得するには、WMIクラスにアクセスするクライアントスクリプトまたはアプリケーションを作成するか、WMIプロバイダーを作成してWMIにデータを提供します。 </p><ul><li>WMIアーキテクチャ構成図の概略と各層の役割を以下に示します。</li></ul><p><img src="/images/20210127/wmi-architecture.png" alt=""></p><h3 id="1-WMI-providers-and-managed-objects"><a href="#1-WMI-providers-and-managed-objects" class="headerlink" title="1.WMI providers and managed objects"></a>1.WMI providers and managed objects</h3><ul><li>WMIプロバイダー<ul><li>1つ以上の<strong>管理対象オブジェクトのWMIを監視するCOMオブジェクト</strong>です。</li><li>ドライバー同様に、プロバイダーはWMIに管理対象オブジェクトからのデータを提供し、WMIから管理対象オブジェクトへのメッセージを処理します。 DLLファイルと、プロバイダーがデータを返し、操作を実行するクラスを定義する管理対象オブジェクト形式（<a href="https://docs.microsoft.com/en-us//windows/win32/wmisdk/managed-object-format--mof-" target="_blank" rel="noopener">MOF</a>）ファイルで構成され、WMI C++アプリケーションなどのプロバイダーは、WMI用のCOMAPIを使用します。</li></ul></li><li>管理対象オブジェクト<ul><li>ハードディスクドライブ、ネットワークアダプター、データベースシステム、オペレーティングシステム、プロセス、サービスなどの<strong>論理的または物理的なエンタープライズコンポーネント</strong>です。</li><li>プロバイダーの例は、システムレジストリ内のデータにアクセスするプリインストールされたレジストリプロバイダーなどがあります。<br>プロバイダーによって、1クラス内のメソッドとプロパティの数的関係性は絶対のルールはなくマチマチです。</li></ul></li><li>物理構造体の特徴<ul><li>WMI MOFおよびDLLファイルは、Winmgmt.exeやMofcomp.exeなどのWMIコマンドラインツールとともに<code>%WINDIR%\System32\Wbem</code> に置かれます。<code>Win32_LogicalDisk</code> などのプロバイダークラスはMOFファイルで定義され、<strong>システムの起動時にWMIリポジトリにコンパイル</strong>されます。</li></ul></li></ul><h3 id="2-WMI-infrastructure"><a href="#2-WMI-infrastructure" class="headerlink" title="2. WMI infrastructure"></a>2. WMI infrastructure</h3><ul><li>WMIインフラストラクチャは<strong>WMIサービス（winmgmt）として知られるWindows OSコンポーネント</strong>で、 WMIリポジトリとWMIコアの2つのコンポーネントがあります。</li><li>WMIリポジトリ<ul><li><strong>WMI名前空間によって編成されます。名前空間はWMIサービスによってシステムの起動時に作成</strong>され、Win32クラス、WMIシステムクラスなどのクラス定義の既定のセットをプレインストールします。</li><li>システム起動時に作成される名前空間には、<code>root\default</code>、<code>root\cimv2</code>、<code>root\Subscription</code>などがあります。システムにある残りの名前空間は、オペレーティングシステムまたは製品の他の部分のプロバイダーによって作成されます。</li></ul></li><li>WMIコア<ul><li><strong>プロバイダー、管理アプリケーション、およびWMIリポジトリ間の仲介役</strong>として機能します。プロバイダーによって定義されたクラスなど、オブジェクトに関する静的データのみがリポジトリに保存されます。 WMIはクライアントが要求したときにプロバイダーからほとんどのデータを動的に取得します。</li><li>ちなみに上記は、マイクロソフトの説明原文（<a href="https://docs.microsoft.com/en-us/windows/win32/wmisdk/wmi-architecture" target="_blank" rel="noopener">WMI Architecture</a> ）では以下のようにWMIコアではなく「WMI service」の説明として記載されていますが、内容の整合性を踏まえるとWMIコアの役割に関する説明と読み取るのが妥当なのではと思われます。</li></ul></li></ul><blockquote><p><strong>The WMI service acts</strong> as an intermediary between the providers, management applications, and the WMI repository. Only static data about objects is stored in the repository, such as the classes defined by providers. WMI obtains most data dynamically from the provider when a client requests it. You also can set up subscriptions to receive event notifications from a provider. For more information, see Monitoring Events.</p></blockquote><h3 id="3-WMI-consumers-management-applications"><a href="#3-WMI-consumers-management-applications" class="headerlink" title="3. WMI consumers (management applications)"></a>3. WMI consumers (management applications)</h3><ul><li>WMIインフラストラクチャと対話する<strong>管理アプリケーションあるいはスクリプト</strong>です。</li><li>管理アプリケーションは、WMI用のCOMAPIまたはWMI用のScriptingAPIのいずれかを呼び出すことにより、クエリ、データの列挙、プロバイダーメソッドの実行、またはイベントのサブスクライブを行うことができます。ディスクドライブやサービスなどの管理対象オブジェクトで使用できるデータまたはアクションは、プロバイダーが提供するものだけとなります。</li></ul><h2 id="WMIを扱うためのWindows標準ツール"><a href="#WMIを扱うためのWindows標準ツール" class="headerlink" title="WMIを扱うためのWindows標準ツール"></a>WMIを扱うためのWindows標準ツール</h2><p>WMIによる情報取得や管理操作を行うのに利用できるWindows標準ツールには、以下のような方法があります。</p><table><thead><tr><th align="center">No</th><th align="left">ツール名</th><th align="left">概要説明</th></tr></thead><tbody><tr><td align="center">1</td><td align="left">WMICコマンド (<a href="https://docs.microsoft.com/ja-jp/windows-server/administration/windows-commands/wmic" target="_blank" rel="noopener">wmic</a>)</td><td align="left">Windows標準のCUIベースの情報走査ツール。コマンドラインからWMIにアクセスできる。データアクセスはWQLベースではない。外部記事によるコマンド具体例は<a href="https://qiita.com/Yorcna/items/119abffc89d01f67c111" target="_blank" rel="noopener">こちら</a>。アーキテクチャ階層の「WMI consumers」にあたる。</td></tr><tr><td align="center">2</td><td align="left">WMIテスト (<a href="https://docs.microsoft.com/ja-jp/mem/configmgr/develop/core/understand/introduction-to-wbemtest" target="_blank" rel="noopener">wbemtest</a>)</td><td align="left">Windows標準ツールのGUIベースの情報走査ツール。WQLエディターに相当。WMI名前空間への接続、クラス定義の確認、そしてクラスのメソッド実行をテストすることができる。また、MOFCOMPでCIMレポジトリに登録された情報を削除することも可能。アーキテクチャ階層の「WMI consumers」にあたる。</td></tr><tr><td align="center">3</td><td align="left">WMIコントロール (<a href="https://docs.microsoft.com/en-us/windows/win32/wmisdk/winmgmt" target="_blank" rel="noopener">wmimgmt.msc</a>)</td><td align="left">Windows標準のGUI管理ツール。WMIの構成と制御を行うツールで、WMIデータベースのバックアップと復元、WMIサービスに対するアクセスのセキュリティ設定を行うことができる。ただし、WMIデータにアクセスする機能はない。アーキテクチャ階層の「WMI infrastructure」にあたる。</td></tr></tbody></table><p>上記以外だと、以前はマイクロソフトのサイトで「WMI Administrative Tools」というWQLツールも配布されていたようですが、現在ではDLできないようになっています。WQLベースのツールとしては前述の表No.2の「wbemtest」と、軽量・簡易なフリーソフトとして、<a href="http://www.vector.co.jp/soft/winnt/util/se477357.html" target="_blank" rel="noopener">WMI Query</a>というものが知られています。</p><h2 id="補足：WQL-WMI-Query-Language）について"><a href="#補足：WQL-WMI-Query-Language）について" class="headerlink" title="補足：WQL (WMI Query Language）について"></a>補足：WQL (WMI Query Language）について</h2><p>最後に、WQLについて補足しておきます。</p><p><a href="https://docs.microsoft.com/en-us/windows/win32/wmisdk/querying-with-wql" target="_blank" rel="noopener">WQL(WMI Query Language)</a>は「SQL for WMI」と記載されることある、WMI特有の拡張機能を複数持つ構造化照会言語 (SQL) の単純化されたサブセットです。 WMIの情報を取得するには、WMIクラスのインスタンスを取得し、取得したWMIクラスの各インスタンスのプロパティから情報を取得するという流れで作業します。この操作をWQLと呼ばれるSQL文を使い取得することが可能です。<strong>SQL文の場合、通常はデータベースやテーブルを操作しますが、WQLではWMIクラスが対象</strong>となります。</p><p>冒頭に出てきたイベントログでも、以下のようになっていましたね。</p><figure class="highlight plain"><figcaption><span>Windows-EventLog（抜粋で再掲）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Query &#x2F;&#x2F;.&#x2F;root&#x2F;CIMV2 </span><br><span class="line">   Namespace SELECT TargetInstance FROM __InstanceCreationEvent WITHIN 10 WHERE TargetInstance ISA &#39;Win32_Process&#39; AND TargetInstance.Name &#x3D; &#39;lync.exe&#39;</span><br></pre></td></tr></table></figure><h1 id="発生していた問題への対処"><a href="#発生していた問題への対処" class="headerlink" title="発生していた問題への対処"></a>発生していた問題への対処</h1><p>ではここまでの内容を頭に置きつつ、以降は話を戻し、不調な我がPCを復帰させていきます。</p><p>結論から言うと、最終的にWMIを再構成することで解決しました。</p><p>手順は至ってシンプルで、<strong>WMIサービスを止めて、リポジトリを再作成するのみ</strong>です。今回は <del>ディスプレイ制御がおかしく仕方なく</del> カッコよく？GUIを使わずコマンドでやってみようということで、PowerShellのコマンドレットをベースに操作していきます。詳細は割愛しますがWindows標準コマンドのsc（sc.exe）も高機能でよく使うコマンドですので、もう忘れたという方は是非思い出してあげてください（というか、scでは簡単にできることでもPowerShellだと大変なことも割とあります）。</p><h2 id="WMIサービス状態と構成の確認"><a href="#WMIサービス状態と構成の確認" class="headerlink" title="WMIサービス状態と構成の確認"></a>WMIサービス状態と構成の確認</h2><p>まずはサービスの状態、設定を確認していきます。ここでは主にWMI（<code>Windows Management Instrumentation</code>サービス）の起動状態とサービス実名を確認しています。なお以降PowerShellは基本的に 「管理者として実行」 しています。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS C:\windows\system32&gt;  <span class="built_in">Get-Service</span> | <span class="built_in">Where-Object</span> &#123; <span class="variable">$_</span>.displayname <span class="operator">-eq</span> <span class="string">"Windows Management Instrumentation"</span>&#125;|<span class="built_in">select-object</span> status, starttype, name, displayname</span><br><span class="line"></span><br><span class="line"> Status StartType Name    DisplayName</span><br><span class="line"> ------ --------- ----    -----------</span><br><span class="line">Running Automatic Winmgmt Windows Management Instrumentation</span><br></pre></td></tr></table></figure><p>続いて依存関係も併せて確認していきます。コマンドレットのオプションの意味合いが少しわかりにくいのですが、意味は以下の通りです。</p><ul><li>-DependentServices：WinMgmt「に」依存しているサービス</li><li>-RequiredServices：WinMgmt「が」依存しているサービス</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\system32&gt; <span class="built_in">Get-Service</span> <span class="literal">-DependentServices</span> Winmgmt</span><br><span class="line">Status   Name               DisplayName</span><br><span class="line">------   ----               -----------</span><br><span class="line">Stopped  NcaSvc             Network Connectivity Assistant</span><br><span class="line">Running  iphlpsvc           IP Helper</span><br><span class="line"></span><br><span class="line">PS C:\Windows\system32&gt; <span class="built_in">Get-Service</span>  <span class="literal">-RequiredServices</span> Winmgmt</span><br><span class="line">Status   Name               DisplayName</span><br><span class="line">------   ----               -----------</span><br><span class="line">Running  RPCSS              Remote Procedure Call (RPC)</span><br></pre></td></tr></table></figure><p>小技ですが、上記は横着するとこんな感じで一度に取得することも可能です。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\System32&gt; <span class="built_in">Get-Service</span> <span class="literal">-Name</span> WinMgmt | <span class="built_in">Where-Object</span> &#123;<span class="variable">$_</span>.RequiredServices <span class="operator">-or</span> <span class="variable">$_</span>.DependentServices&#125; |</span><br><span class="line">  <span class="built_in">Format-Table</span> <span class="literal">-Property</span> Status, Name, RequiredServices, DependentServices <span class="literal">-auto</span></span><br><span class="line"></span><br><span class="line"> Status Name    RequiredServices DependentServices</span><br><span class="line"> ------ ----    ---------------- -----------------</span><br><span class="line">Running WinMgmt &#123;RPCSS&#125;          &#123;NcaSvc, iphlpsvc&#125;</span><br></pre></td></tr></table></figure><p>実はこの後のWMIリポジトリ再作成時に少しだけハマった部分なのですが、当該サービス、Windowsサービスの回復設定で停止検知後（正確にはエラー検知）に自動で再度立ち上がってくる設定になっていることがわかります。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\System32&gt; C:\Windows\System32\sc.exe qfailure Winmgmt</span><br><span class="line">[<span class="type">SC</span>] QueryServiceConfig2 SUCCESS</span><br><span class="line"></span><br><span class="line">SERVICE_NAME: Winmgmt</span><br><span class="line">        RESET_PERIOD (<span class="keyword">in</span> seconds)    : <span class="number">86400</span></span><br><span class="line">        REBOOT_MESSAGE               :</span><br><span class="line">        COMMAND_LINE                 :</span><br><span class="line">        FAILURE_ACTIONS              : RESTART -- 遅延 = <span class="number">120000</span> ミリ秒です。</span><br><span class="line">                                       RESTART -- 遅延 = <span class="number">300000</span> ミリ秒です。</span><br></pre></td></tr></table></figure><p>なお、PowerShellで <code>sc qfailure</code> 相当の自動回復設定の確認方法がパッとわからなかったため、ここでは少しズル？をして<code>sc</code>コマンドをコールしています。<code>sc.exe</code>をフルパスで呼んでいるのは、試したこのある方はニヤッとされるかもしれませんが、Powershellのコマンドレットである <code>sc (Set-Content)</code>のエイリアスと<code>sc.exe</code> の名前が重複して、<code>Set-Content</code> が優先されるためです。</p><h2 id="WMIサービスを停止"><a href="#WMIサービスを停止" class="headerlink" title="WMIサービスを停止"></a>WMIサービスを停止</h2><p>前述の手順で確認した通り、WMIサービスには依存関係のあるサービスがありますので<code>-Force</code>で強制停止します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\System32&gt; <span class="built_in">Stop-Service</span> <span class="literal">-Name</span> WinMgmt</span><br><span class="line"><span class="built_in">Stop-Service</span> : サービス <span class="string">'Windows Management Instrumentation (WinMgmt)'</span> には依存サービスが存在するため、停止できません。このサービスを停止できるのは、Force フラグが設定されている場合のみです。</span><br><span class="line">発生場所 行:<span class="number">1</span> 文字:<span class="number">1</span></span><br><span class="line">+ <span class="built_in">Stop-Service</span> <span class="literal">-Name</span> WinMgmt</span><br><span class="line">+ ~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : InvalidOperation: (System.ServiceProcess.ServiceController:ServiceController) [<span class="built_in">Stop-Service</span>]、ServiceCommandException</span><br><span class="line">    + FullyQualifiedErrorId : ServiceHasDependentServices,Microsoft.PowerShell.Commands.StopServiceCommand</span><br><span class="line"></span><br><span class="line">PS C:\Windows\System32&gt; <span class="built_in">Stop-Service</span> <span class="literal">-Force</span> <span class="literal">-Name</span> WinMgmt</span><br></pre></td></tr></table></figure><h2 id="リポジトリ情報フォルダをリネーム"><a href="#リポジトリ情報フォルダをリネーム" class="headerlink" title="リポジトリ情報フォルダをリネーム"></a>リポジトリ情報フォルダをリネーム</h2><p>リポジトリの実体は <code>%windir%\system32\repository</code> 配下にあり、以下のようなファイルが格納されます。今回はこれらをリネームし、WMIサービスを改めて起動することでリポジトリを再作成（＝プロバイダークラスをリコンパイル）していきます。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PS C:\windows\system32&gt; <span class="built_in">Set-Location</span> .\wbem\</span><br><span class="line">PS C:\windows\system32\wbem&gt; <span class="built_in">Get-ChildItem</span> C:\Windows\system32\wbem\repository\</span><br><span class="line"></span><br><span class="line">    ディレクトリ: C:\Windows\system32\wbem\repository</span><br><span class="line"></span><br><span class="line">Mode                LastWriteTime         Length Name</span><br><span class="line">----                -------------         ------ ----</span><br><span class="line"><span class="literal">-a</span>----       <span class="number">2021</span>/<span class="number">01</span>/<span class="number">18</span>     <span class="number">15</span>:<span class="number">36</span>        <span class="number">5562368</span> INDEX.BTR</span><br><span class="line"><span class="literal">-a</span>----       <span class="number">2021</span>/<span class="number">01</span>/<span class="number">18</span>     <span class="number">15</span>:<span class="number">36</span>          <span class="number">89108</span> MAPPING1.MAP</span><br><span class="line"><span class="literal">-a</span>----       <span class="number">2021</span>/<span class="number">01</span>/<span class="number">18</span>     <span class="number">15</span>:<span class="number">31</span>          <span class="number">88800</span> MAPPING2.MAP</span><br><span class="line"><span class="literal">-a</span>----       <span class="number">2021</span>/<span class="number">01</span>/<span class="number">18</span>     <span class="number">15</span>:<span class="number">31</span>          <span class="number">88892</span> MAPPING3.MAP</span><br><span class="line"><span class="literal">-a</span>----       <span class="number">2021</span>/<span class="number">01</span>/<span class="number">18</span>     <span class="number">15</span>:<span class="number">36</span>       <span class="number">26796032</span> OBJECTS.DATA</span><br></pre></td></tr></table></figure><p>モタモタしているとWMIサービスが自動起動で起き上がってきてリネームが失敗するので、クイックに。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PS C:\windows\system32\wbem&gt; <span class="built_in">Move-Item</span> <span class="literal">-Path</span> <span class="string">".\repository\"</span> .\repository.bk20210118A\</span><br></pre></td></tr></table></figure><p>既にWMIサービスが自動起動されている場合にはアクセス拒否が返されます。この場合は、前述のWMIサービス停止をもう一度行ってからすぐにリネームしましょう。正常に実行できると画面上は応答メッセージなしとなります。</p><h2 id="WMIサービス再起動、そして動作確認"><a href="#WMIサービス再起動、そして動作確認" class="headerlink" title="WMIサービス再起動、そして動作確認"></a>WMIサービス再起動、そして動作確認</h2><p>あとは手動でサービスを起動すれば終わりです。サービスが起動してくると、<code>%windir%\system32\wbem</code> 配下に新たにrepositoryフォルダが作成され、再構成が完了します。サービス回復による自動起動が働くため、タイミング次第では以下にように既に起動中といったことになりますが、<code>%windir%\system32\repository</code>フォルダが新たに作成されていることが確認できれば問題ありません。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Windows\System32&gt; <span class="built_in">Start-Service</span>  <span class="literal">-Name</span> WinMgmt</span><br><span class="line">PS C:\windows\system32&gt; <span class="built_in">Get-Service</span> <span class="literal">-Name</span> WInMgmt</span><br><span class="line"></span><br><span class="line">Status   Name               DisplayName</span><br><span class="line">------   ----               -----------</span><br><span class="line">Running  WInMgmt            Windows Management Instrumentation</span><br></pre></td></tr></table></figure><p>これで解決です。この後、本来やりたかったデバイスドライバーを再適用をしてハードウェア制御が正常に戻りました（よかった）。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PS C:\windows\system32&gt; systeminfo</span><br><span class="line"></span><br><span class="line">ホスト名:               **********</span><br><span class="line">OS 名:                  Microsoft Windows <span class="number">10</span> Pro</span><br><span class="line">OS バージョン:          <span class="number">10.0</span>.<span class="number">18363</span> N/A ビルド <span class="number">18363</span></span><br><span class="line">OS 製造元:              Microsoft Corporation</span><br><span class="line">OS 構成:                メンバー ワークステーション</span><br><span class="line">OS ビルドの種類:        Multiprocessor Free</span><br><span class="line">登録されている所有者:   Windows ユーザー</span><br><span class="line">(後略)</span><br></pre></td></tr></table></figure><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回は、普段よく扱っているサーバサイドではなく自分のPC端末でのトラブルを契機に、WMIについて取り上げてみました。自分のメインPCがおかしくなるのは、ある意味 サーバトラブルとはまた一味違った焦りがあるものですね。クラウド上のサーバと違って、壊れたらすぐに替えがきかない機器ということで、少し緊張感の高い作業でした。折角の機会なので久方ぶりのWindowsのコマンド操作の復習をしつつ、WMIのアーキテクチャ面の基礎を改めて整理をしてみましたので、どこかで誰かのご参考になればと思います。</p><p>ところで、普段動いているのが当たり前の機能やサービスが、何か想定外トラブルでダウンしてしまうことってそれなりにありますよね。私のメインの守備範囲の1つはインフラですが、インフラでいうとどこかのクラウドサービスがまた別のクラウドサービスをバックボーンに動いていて、大元のサービスが障害になった時に「あ、こういう関係性で動いていたんだ…」とその時になって気付くことがあります。また、こうしたケースでは依存先のサービスが公称されていないことが大半で、その影響は事前になかなかわからないものです。</p><p>今回のPC上でのトラブル程度でもいざ起こってみると案外色々な機能に影響が出て混乱しましたが、エンタープライズ領域のシステムにおける影響は、ある端末で起きたWMIエラーのようなかわいいものではすみません。普段のシステムデザインにおける考慮事項として、こういった可能性は常に頭において考えていきたいものですね。</p><p>ではまた！</p><h1 id="参考情報"><a href="#参考情報" class="headerlink" title="参考情報"></a>参考情報</h1><ul><li><a href="https://docs.microsoft.com/en-us/windows/win32/wmisdk/wmi-architecture" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/windows/win32/wmisdk/wmi-architecture</a></li><li><a href="https://docs.microsoft.com/ja-jp/powershell/scripting/samples/managing-services?view=powershell-7.1" target="_blank" rel="noopener">https://docs.microsoft.com/ja-jp/powershell/scripting/samples/managing-services?view=powershell-7.1</a></li><li><a href="https://docs.microsoft.com/ja-jp/windows-hardware/drivers/kernel/implementing-wmi" target="_blank" rel="noopener">https://docs.microsoft.com/ja-jp/windows-hardware/drivers/kernel/implementing-wmi</a></li><li><a href="https://www.manageengine.jp/products/OpManager/how-to-rebuild-wmi.html" target="_blank" rel="noopener">https://www.manageengine.jp/products/OpManager/how-to-rebuild-wmi.html</a></li><li><a href="https://websetnet.net/ja/how-to-repair-or-rebuild-the-wmi-repository-on-windows-10/" target="_blank" rel="noopener">https://websetnet.net/ja/how-to-repair-or-rebuild-the-wmi-repository-on-windows-10/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして、TIGの加藤剛です。2013年キャリア入社で、現在はTIG内に複数あるチームの1つのリーダをしています。テクノ
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="トラブルシュート" scheme="https://future-architect.github.io/tags/%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%88/"/>
    
      <category term="Windows" scheme="https://future-architect.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>July Tech Festa 2021 winterで発表しました</title>
    <link href="https://future-architect.github.io/articles/20210125/"/>
    <id>https://future-architect.github.io/articles/20210125/</id>
    <published>2021-01-24T15:00:00.000Z</published>
    <updated>2021-02-01T02:09:11.462Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p>先日<a href="https://techfesta.connpass.com/event/193966/" target="_blank" rel="noopener">July Tech Festa 2021 winter</a>に登壇させていただきました。  </p><p>昨今の情勢的に当然のごとくオンラインイベントでの参加です、手軽で良いのですが少し寂しさもあります。</p><img src="/images/20210125/photo_20210125_01.png"><h2 id="July-Tech-Festaとは"><a href="#July-Tech-Festaとは" class="headerlink" title="July Tech Festaとは"></a>July Tech Festaとは</h2><p>July Tech Festaは有志のボランティアにより開催されるイベントです。</p><p>システム管理者の日という記念日が七月であることに由来します。</p><blockquote><p>「 ITに関わる全ての人の知的好奇心を満たすお祭りを作りたい」ーー<br>その思いから July Tech Festa は生まれました。</p></blockquote><blockquote><p>興味のある技術に触れ、普段会えない人の話を聞き、<br>参加したエンジニアがスキルやキャリアについて考えるきっかけになる</p></blockquote><blockquote><p>そんな場を作ろうと、July Tech Festa 2021 winter を開催します。</p></blockquote><p>今回は朝10時からの60分枠で発表させていただけました、ありがとうございます。</p><h2 id="発表の内容"><a href="#発表の内容" class="headerlink" title="発表の内容"></a>発表の内容</h2><p>発表資料のダイジェスト版をアップロードしました。</p><script async class="speakerdeck-embed" data-id="958c38fb19314907aa93bf91e2f0c562" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>一足先に<a href="/articles/20210107/">Electronの使い方 Web開発の技術でデスクトップアプリを作ろう</a>というタイトルで入門記事を技術ブログでも書きました。</p><p>その内容と重複する部分もありますが、発表ではサンプルアプリケーションのコードを深堀りして、どのようにフレームワークが動いているかをお話しさせていただきました。</p><img src="/images/20210125/photo_20210125_02.png"><p>July Tech Festaは元々システム管理、インフラエンジニア向けのイベントであるという側面を意識し、<br>業務観点でのデスクトップアプリケーションとクラウドインフラの構築における工夫についても発表しました。</p><img src="/images/20210125/photo_20210125_03.png"><p>ITコンサルタントとしての働き方、アルバイトが驚異的に優秀である文化といった会社のカルチャーも自己紹介として少し長めに説明させていただきました。<br>フューチャーって結局どんな会社なんだろう、と思った方はぜひ<a href="https://www.youtube.com/channel/UCKLoUvohjwyohYzKTRyeUBQ" target="_blank" rel="noopener">アーカイブ動画</a>を見ていただければと思います。</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>実は25分枠でも60分枠でもどちらでもOK，というスタンスで応募したのですが、めでたく60分枠を頂きました。<br>60分の長尺に耐えられるコンテンツになるかが正直不安でしたが、結果的にはちょうど良い尺で終わることができました。</p><p>クライアント証明書の利用方法など、初めて知った、知らなかったという反応を頂けました。<br>つぶやきとして感想をリアルタイムで得ることができるとモチベーションが上がります、今後も業務で得た学びは外部発信していければと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;先日&lt;a href=&quot;https://techfesta.connpass.com/event/193966/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;July Tech Festa 2021 winter&lt;/a
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
      <category term="Electron" scheme="https://future-architect.github.io/tags/Electron/"/>
    
  </entry>
  
</feed>
