<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2021-03-08T02:21:55.631Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Auth0 Rulesのユニットテストを書きたい</title>
    <link href="https://future-architect.github.io/articles/20210308/"/>
    <id>https://future-architect.github.io/articles/20210308/</id>
    <published>2021-03-07T15:00:00.000Z</published>
    <updated>2021-03-08T02:21:55.631Z</updated>
    
    <content type="html"><![CDATA[<p>TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> アルバイトの小林です。</p><p>案件で認証プラットフォームである<a href="https://auth0.com/jp/">Auth0</a>を利用していますが、Auth0の機能の中でもRulesと呼ばれるユーザ認証時にJavaScriptの関数を走らせる事が出来る機能は非常に強力で様々なニーズに対応することが可能になります。</p><p>その中でJavaScriptの関数で書けるRulesに対して、ユニットテストを書く事が出来れば、Ruleの質も担保出来ます。</p><p>Auth0テナントへのRulesのexport、importには<a href="https://github.com/auth0/auth0-deploy-cli">auth0-deploy-cli</a>を利用出来ますが、Ruleの記述方法が</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">anyRule</span>(<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">    callback(<span class="literal">null</span>,user,context)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>の様な名前付き関数の形式なのでユニットテストの実現には工夫が必要となります。</p><p>今回はその<code>工夫</code>の部分について書いていきたいと思います。</p><h1 id="Auth0について"><a href="#Auth0について" class="headerlink" title="Auth0について"></a>Auth0について</h1><p><img src="/images/20210308/image.png" alt=""></p><p>Auth0の概要については<a href="https://future-architect.github.io/articles/20200122/">Auth0 導入編</a>を、<br>Auth0 Rulesについては<a href="https://future-architect.github.io/articles/20200128/">Auth0のRulesを使って認証認可を自在にカスタマイズする</a>をそれぞれご参照ください。</p><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>検証に利用したマシンのNode.jsのバージョンは<code>v12.15.0</code>です。</p><h2 id="検証に使うRule"><a href="#検証に使うRule" class="headerlink" title="検証に使うRule"></a>検証に使うRule</h2><p>以下の二つのRuleをテストしたいことにします。</p><ul><li>IDトークンのクレームに<code>&#123;&quot;https://example.com/color&quot;: &quot;blue&quot;&#125;</code>を追加する、<code>add-claims.js</code></li></ul><figure class="highlight js"><figcaption><span>add-claims.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClaim</span>(<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> idTokenClaims = context.idToken || &#123;&#125;;</span><br><span class="line">    idTokenClaims[<span class="string">&quot;https://example.com/color&quot;</span>] = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">    context.idToken = idTokenClaims;</span><br><span class="line"></span><br><span class="line">    callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>http://example.com/some/api</code>にGETリクエストを送信して上手く行った場合はレスポンスをIDトークンの<br><code>http://example.com/data</code>キーに入れる、<code>request-example.js</code></li><li>このRuleはリクエストのレスポンスが200以外の場合にログインエラーとする。</li></ul><figure class="highlight js"><figcaption><span>request-example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">requestExample</span>(<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios@0.19.2&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios(&#123;</span><br><span class="line">        url: <span class="string">`http://example.com/some/api`</span>,</span><br><span class="line">        method: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// リクエストのレスポンスが200以外の場合にログインエラーとする。</span></span><br><span class="line">    <span class="keyword">if</span> (response <span class="keyword">instanceof</span> <span class="built_in">Error</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> e = <span class="string">&#x27;Failed to fetch data&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> callback(<span class="keyword">new</span> UnauthorizedError(<span class="string">`<span class="subst">$&#123;e&#125;</span>: <span class="subst">$&#123;response.data&#125;</span>`</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> idTokenClaims = context.idToken || &#123;&#125;;</span><br><span class="line">    idTokenClaims[<span class="string">&quot;http://example.com/data&quot;</span>] = response.data;</span><br><span class="line"></span><br><span class="line">    context.idToken = idTokenClaims;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details><summary>コードについての補足</summary><div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">requestExample</span>(<span class="params">user, context, callback</span>) </span>&#123;</span><br></pre></td></tr></table></figure><p>Auth0 Rulesではトップレベルのasyncは<code>許可</code>されています。</p><ul><li>参考: <a href="https://community.auth0.com/t/is-it-possible-to-use-async-await-in-rules/50235">Is it possible to use async await in rules? - Auth0 Community</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios@0.19.2&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Auth0 Rulesではいくつかのライブラリが利用可能です。</p><p>利用可能なライブラリのリストはこちらに記載されています。</p><ul><li><a href="https://auth0-extensions.github.io/canirequire/">Can I require? - Search which node modules you can use in webtask.io</a></li></ul></div></details><h2 id="テスト環境"><a href="#テスト環境" class="headerlink" title="テスト環境"></a>テスト環境</h2><p>以下の様なNode.jsを用いたテスト環境を前提とします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:.</span><br><span class="line">│  add-claim.js</span><br><span class="line">│  package.json</span><br><span class="line">│  request-example.js</span><br><span class="line">│</span><br><span class="line">└─tests</span><br><span class="line">        add-claim.test.js</span><br><span class="line">        request-example.test.js</span><br></pre></td></tr></table></figure><p>それではこれらの前提を元に様々な手段について書いていきます。</p><p>記事中では引数のcallbackやスタブ化したrequireに適当なコードを書いていますが、実際にテストコードを書く際は引数のcallbackやスタブ化したaxiosをモック関数(jestでの<code>jest.fn()</code>)にすることで動作の保証範囲をより広くすることが出来ます。</p><h2 id="fsでスクリプトを文字列として取ってvmを利用して取り出す。"><a href="#fsでスクリプトを文字列として取ってvmを利用して取り出す。" class="headerlink" title="fsでスクリプトを文字列として取ってvmを利用して取り出す。"></a>fsでスクリプトを文字列として取ってvmを利用して取り出す。</h2><p>Auth0 docsに書かれている<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>方法です。</p><p>add-claim.jsのRuleを呼び出すコードを書くとこのようになります。</p><figure class="highlight js"><figcaption><span>add-claim.test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> context = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script =  fs.readFileSync(<span class="string">&#x27;./add-claim.js&#x27;</span>) <span class="comment">// =&gt; func addClaim...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> runCode = <span class="string">`</span></span><br><span class="line"><span class="string">  f = () =&gt; &#123;</span></span><br><span class="line"><span class="string">    return <span class="subst">$&#123;script&#125;</span>;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  f() // =&gt; addClaimが関数として得られる。</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rule = vm.runInThisContext(</span><br><span class="line">    runCode, &#123;</span><br><span class="line">        <span class="comment">// filename for stack traces</span></span><br><span class="line">        filename: <span class="string">&#x27;add-claim.js&#x27;</span>,</span><br><span class="line">        displayErrors: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">rule(</span><br><span class="line">    user,</span><br><span class="line">    context,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Complete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(context); <span class="comment">// =&gt; &#123; idToken: &#123; &#x27;https://example.com/color&#x27;: &#x27;blue&#x27; &#125; &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>テストしたいRuleのJavaScriptのソースコードを文字列として取得して、<code>vm.runInThisContext</code>を使ってサンドボックス上に<code>テスト対象のメソッドが返るコード</code>を実行します。先述の通り<code>vm.runInThisContext</code>がテスト対象である<code>addClaimメソッド</code>を返し、そのメソッドに(user,context,callback)を入れて呼び出しをしている形となります。</p><p>今回はコードを少しでも読みやすくするため、少し冗長な書き方をしていますが、コードが少し分かりにくいことを除けば比較的短いコードで記述することが可能になります。</p><h3 id="requireモックについて"><a href="#requireモックについて" class="headerlink" title="requireモックについて"></a>requireモックについて</h3><p>axiosモジュールを利用している<code>request-example.js</code>テストについて考えます。</p><p>HTTPリクエストが必要なユニットテストではクライアントライブラリをスタブにして様々なレスポンスが来た場合についてテストすることが品質向上に対して有効です。</p><p>そこで、<code>require</code>モジュールをスタブにすることで<code>axios</code>では無く、独自のメソッドを利用出来る様にします。</p><p>嬉しいことに、<code>vm</code> モジュールの仕様は外部のライブラリを利用するメソッドにおいても都合が良く、<code>context</code>は同一であっても<code>scopeは同一で無い</code>仕様があります。これにより、<code>runInThisContext内ではrequireは未定義</code>になります。</p><p>requireに何か代入してaxiosモジュールのモック化を試みましょう。</p><h4 id="・contextを新たに作成する。"><a href="#・contextを新たに作成する。" class="headerlink" title="・contextを新たに作成する。"></a>・contextを新たに作成する。</h4><p><code>runInThisContext</code>で目的のメソッドを取り出していましたが、<code>require</code>が別の機能を果たす様な<code>context</code>を別途作成して、それを利用します。</p><p>まとめると以下のコードで実現可能になります。</p><figure class="highlight js"><figcaption><span>request-example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> context = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script =  fs.readFileSync(<span class="string">&#x27;./request-example.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> runCode = <span class="string">`</span></span><br><span class="line"><span class="string">  f = () =&gt; &#123;</span></span><br><span class="line"><span class="string">    return <span class="subst">$&#123;script&#125;</span>;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  f()</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> runContext = vm.createContext(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">require</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// require()が返すメソッド</span></span><br><span class="line">            <span class="keyword">return</span> <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// axios()が返すレスポンス</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;axios called:&quot;</span>, ctx);</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    data: <span class="string">&quot;mock response&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rule = vm.runInContext(</span><br><span class="line">    runCode, runContext,&#123;</span><br><span class="line">        <span class="comment">// filename for stack traces</span></span><br><span class="line">        filename: <span class="string">&#x27;./request-example.js&#x27;</span>,</span><br><span class="line">        displayErrors: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(rule);</span><br><span class="line"></span><br><span class="line">rule(</span><br><span class="line">    user,</span><br><span class="line">    context,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Complete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(context); <span class="comment">// =&gt; &#123; idToken: &#123; &#x27;http://example.com/data&#x27;: &#x27;mock response&#x27; &#125; &#125;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>ここまでがAuth0 Docsに記載されているユニットテストの実現方法です。</p><h2 id="rewire-を利用する方法"><a href="#rewire-を利用する方法" class="headerlink" title="rewire を利用する方法"></a>rewire を利用する方法</h2><p>他には<a href="https://www.npmjs.com/package/rewire">rewire</a>を利用すると、<code>vm</code>+<code>fs</code>よりは裏ワザ感少な目で<br>テストコードを実行出来ます。</p><p>それでは早速<code>add-claim.js</code>のメソッドを呼び出すコードを書いていきます。</p><figure class="highlight js"><figcaption><span>add-claim.test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rewire = <span class="built_in">require</span>(<span class="string">&#x27;rewire&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// テスト対象のスクリプトを取得</span></span><br><span class="line"><span class="keyword">const</span> script = rewire(<span class="string">&#x27;./../add-claim.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// テスト対象のメソッド名を指定してメソッドを取得</span></span><br><span class="line"><span class="keyword">const</span> rule = script.__get__(<span class="string">&#x27;addClaim&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> context = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> callback = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Complete&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">rule(user,context,callback);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(context); <span class="comment">// =&gt; &#123; idToken: &#123; &#x27;https://example.com/color&#x27;: &#x27;blue&#x27; &#125; &#125;</span></span><br></pre></td></tr></table></figure><p>何をやっているかは圧倒的に分かりやすいと思います。</p><p>続いて<code>request-example.test.js</code>の呼び出しを進めていくのですが、<code>rewire</code>はモック機能を持つので、<br>先程の<code>vm</code>+<code>fs</code>の組み合わせの時と同様に<code>require</code>をモックすることで、<code>axios</code>をモックします。</p><figure class="highlight js"><figcaption><span>request-example.test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rewire = <span class="built_in">require</span>(<span class="string">&#x27;rewire&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// テスト対象のスクリプトを取得</span></span><br><span class="line"><span class="keyword">const</span> script = rewire(<span class="string">&#x27;./../request-example.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line">script.__set__(<span class="string">&#x27;require&#x27;</span>, <span class="function">()  =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;axios called&#x27;</span>,ctx);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            data: <span class="string">&quot;mock response&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// テスト対象のメソッド名を指定してメソッドを取得</span></span><br><span class="line"><span class="keyword">const</span> rule = script.__get__(<span class="string">&#x27;requestExample&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> context = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> callback = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Complete&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> rule(user,context,callback).then(</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(context); <span class="comment">// =&gt; &#123; idToken: &#123; &#x27;http://example.com/data&#x27;: &#x27;mock response&#x27; &#125; &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>相変わらず<code>require</code>のモックは泥臭いですが、ある程度は見やすくなったかと思います。</p><h1 id="その他調査したもの"><a href="#その他調査したもの" class="headerlink" title="その他調査したもの"></a>その他調査したもの</h1><h2 id="auth0-test-harness"><a href="#auth0-test-harness" class="headerlink" title="auth0-test-harness"></a>auth0-test-harness</h2><p><a href="https://github.com/tawawa/auth0-rules-testharness">auth0-rules-testharness</a>を用いてwebtask上でRuleを実行させることが<strong>出来てた様です。</strong></p><details><summary>webtaskとは</summary><div>Auth0 Inc.が持つ`Node.jsをweb上で実行できるサービス`です。HTTPエンドポイントが作成されるため、コードを書くだけでサーバを動かす事が可能でした。<p>webtaskはAuth0 Rulesの実行環境としても使われており、webtaskの作成するサンドボックス上でRuleが実行されます。</p></div></details><p>私も早速試してみようと思ったのですが、publicなwebtaskのサービスが終了している様子<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>のため、検証を断念したいと思います。</p><h2 id="auth0-local-test-harness"><a href="#auth0-local-test-harness" class="headerlink" title="auth0-local-test-harness"></a>auth0-local-test-harness</h2><p><a href="https://github.com/auth0/auth0-rules-local-testharness">auth0-rules-local-testharness</a>は<code>auth0-rules-testharnessのwebtaskを使う所をlocalにした</code>物です。</p><p>コードをよく見ると、<code>fs</code>+<code>vm</code>でサンドボックス上で実行している物に<a href="https://github.com/auth0/auth0-authz-rules-api">auth0-authz-rules-api</a>が定義しているcontextを流し込んでいる様に見えます。</p><p>手元のマシンがNode.js v12.15で、Auth0 Rulesで使われるNode.jsのバージョンも執筆当時12.20.1<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup><sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>ですが、手元でのnpm installが失敗するのと、npmパッケージが2年前から更新されていないことを考慮して断念します。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回は以下の4つの方法についてテスト方法の調査を行いました。</p><ul><li>Auth0 Docsに載っている方法</li><li>rewireを利用した方法</li><li>auth0-test-harnessを利用した方法</li><li>auth0-local-test-harnessを利用</li></ul><p>上二つが現実的な実装案になると考えていますが、<br>Auth0 Docsに載っている方法は<code>fs</code>と<code>vm</code>のシンプルな構成で利用可能な代わりに、コードが少し類雑、<br>rewireを利用した方法はシンプルに書けるが別途パッケージのインストールが必要と一長一短の様に見えます。</p><p>また、今回の調査においてはrequireのスタブ化が出来ても、ほぼ無理やり感は否めません。</p><p>一つのRuleが利用するモジュールが2つ以上の場合に置いて、与えられた引数から何を返すか場合分けで記述する必要があり、少し複雑です。</p><p>この辺りは今後の課題として、引き続き調査出来ればと思います。</p><h1 id="Auth0の新機能-Actionsについて"><a href="#Auth0の新機能-Actionsについて" class="headerlink" title="Auth0の新機能 Actionsについて"></a>Auth0の新機能 Actionsについて</h1><p>執筆当時(2021/03/03)はBETA版機能ですが、認証認可を自由自在にカスタマイズする手段として、<strong>Rules</strong>,<strong>Hook</strong> に加えて<strong>Actions</strong>が存在します。</p><p><strong>Actions</strong>はRulesと同様ログイン時に何らかのスクリプトを走らせることが出来る機能です。</p><p>沢山の追加機能があるのですが、一部抜粋すると、</p><ul><li>バージョン管理の実装</li><li>コードエディタの進化(コード補完、クイックヒント機能の搭載)</li><li>任意のnpmパッケージが利用可能</li><li><strong>スクリプトの記述方法がRulesと異なる</strong></li></ul><p>です。 </p><p>詳しくはAuth0の公式ブログ: <a href="https://auth0.com/blog/introducing-auth0-actions/">Introducing Auth0 Actions</a> をご参照ください。</p><p>この記事で特筆すべき点は<strong>スクリプトの記述方法がRulesと異なる</strong>点です。</p><p>Actionは以下の形式で表記されています。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type <span class="type">&#123;PostLoginAction&#125;</span> </span>*/</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Rulesとは異なり、Actionは<strong>module.exportsが記載されています</strong>。</p><p>つまり、<strong>rewireやfsを使わずともテスト対象のメソッドのインポートが出来ます</strong>。</p><p>インポート先でのrequireは、<a href="https://www.npmjs.com/package/proxyquire">proxyquire</a>などを利用することでスタブ化が出来るため、これらを利用することでActionsの単体テストが実装可能になると考えられます。</p><p>まだBeta版であり、Auth0 Deploy CLIのSupported Featuresには記載されていませんが、Rulesよりも幅広い機能を持ち、改善されている点も多々あるため、今後はRulesの代わりにActionsの利用を視野に入れると良いと思います。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">TIG: Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。DXユニット: TIGの中にありデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="https://auth0.com/docs/best-practices/rules-testing-best-practices">Rules Testing Best Practices</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="https://community.auth0.com/t/future-of-rules-without-webtask-io/48554/2">Future of rules without webtask.io - Auth0 Community</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="https://webtask.io/">Webtask</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;"><a href="https://auth0.com/docs/product-lifecycle/deprecations-and-migrations/migrate-to-nodejs-12">Migrate to Node.js 12</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;"><a href="https://auth0-extensions.github.io/canirequire/">Can I require? - Search which node modules you can use in webtask.io</a>に記載</span><a href="#fnref:6" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIG DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; アルバイトの小林です。&lt;/p&gt;
&lt;p&gt;案件で認証プラットフォームである&lt;a href=&quot;https://auth0.com/jp/&quot;
      
    
    </summary>
    
    
      <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
      <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
      <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
      <category term="ユニットテスト" scheme="https://future-architect.github.io/tags/%E3%83%A6%E3%83%8B%E3%83%83%E3%83%88%E3%83%86%E3%82%B9%E3%83%88/"/>
    
  </entry>
  
  <entry>
    <title>インフラ入門ーインフラ要件定義編ー</title>
    <link href="https://future-architect.github.io/articles/20210305/"/>
    <id>https://future-architect.github.io/articles/20210305/</id>
    <published>2021-03-04T15:00:00.000Z</published>
    <updated>2021-03-06T05:35:36.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="１．はじめに"><a href="#１．はじめに" class="headerlink" title="１．はじめに"></a>１．はじめに</h1><p>こんにちは。テクノロジーイノベーショングループ所属の長澤です。<br><a href="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E5%85%A5%E9%96%80/">インフラ入門</a>な連載記事を久々に書くべく、今回筆を取りました。<br><br>これまでのインフラ入門記事は、</p><ul><li><a href="https://future-architect.github.io/articles/20170109/">インフラ概要と当社でのインフラエンジニア像</a></li><li><a href="https://future-architect.github.io/articles/20170704/">ネットワークその１</a></li><li><a href="https://future-architect.github.io/articles/20191107/">ネットワークその２</a></li><li><a href="https://future-architect.github.io/articles/20200414/">ストレージ</a></li></ul><p>といった流れで来ていますが、今回はあえてピンポイントな内容から離れて、<strong>「インフラ要件定義」</strong>をテーマに書いてみたいと思います。</p><p>個人的な考え方・意見に基づくものが大半ですが、何かのお役に立てれば幸いです。</p><h1 id="２．インフラ要件定義・・・その前に"><a href="#２．インフラ要件定義・・・その前に" class="headerlink" title="２．インフラ要件定義・・・その前に"></a>２．インフラ要件定義・・・その前に</h1><img src="/images/20210305/building-blocks-659158_1280.jpg" class="img-middle-size"><p><a href="https://pixabay.com/ja/users/barni1-773830/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=659158" target="_blank" rel="noopener">Bernd Hildebrandt</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=659158" target="_blank" rel="noopener">Pixabay</a>からの画像</p><p>私は、インフラの要件定義のゴールは、以下の3つだと思っています。</p><p><strong>1. インフラでの提供機能・構成を固めること</strong><br><strong>2. システムの非機能要件を固めること</strong><br><strong>3. お買い物リスト・見積をまとめること</strong></p><p>進め方としては、1番と2番を並行で固めていき、最後に3番と基本設計フェーズの進め方をお客様と合意します。</p><p>そのうち、初めに手を付ける1番と2番のベースとなるのは、<strong>「システムで為したいこと」</strong>となります。<br>すなわち、1番と2番のアウトプットは、<strong>お客様の業務・経営課題の解決</strong>や、<strong>お客様の更なる成長</strong>といったような目的を、<strong>最良の形で達成するもの</strong>となっている必要があります。</p><p>要件定義フェーズでは、アプリケーションチームとインフラチームが分かれ、それぞれの対面のお客様と話して要件を詰めていくことが多いと思います。<br>その際、インフラ側は業務・アプリケーションを脇に置いて、インフラだけの実装・コストや採用技術にこだわってしまう・・・みたいなことがままあります。<br>その結果できあがるのは、お客様がシステムで為したいことから乖離した、例えば <strong>「性能的に業務にならない」</strong> とか、<strong>「スカスカでToo Much」</strong> のような残念なインフラです。</p><p>では、こういった残念な結果を回避するために、限られた時間の中で我々インフラチームはどうすべきか。</p><p>マネジャー層任せでなく、 <strong>アプリケーションチームと自ら積極的にコミュニケーション</strong>を取り、<strong>業務要件や機能要件をなるべく頭に入れておくこと</strong>に尽きると、私は思っています。</p><p>コーディング以外の全てを担当するインフラチーム、特にそのリーダは、アプリケーションチームの代弁者も担い、お客様のインフラチームに、<strong>「業務・機能要件に基づき、このインフラである」</strong>といったような説明ができるようになるべきです。<br>その説明が、いわゆる<strong>「システム化方針」</strong>の一部になります。</p><p>少し話はそれますが、お客様のアプリケーションチームとインフラチーム間の考え方や課題意識の相違や、コミュニケーション不全も「あるある」です。<br>上述のようなアプリケーションチームとの積極的なコミュニケーションは、その橋渡しを担い、プロジェクト全体が一枚岩となる一助にもなると思います。</p><p>ということで、インフラ要件定義のスタートラインは、<strong>アプリケーションチームとインフラチーム、すなわちプロジェクト全体のベクトルを合わせること</strong>であり、その結果として、プロジェクト全体が納得できるシステム化方針ができあがると、私は思っています。<br>（自分もまだまだできてないなぁと自戒しつつ・・・。）</p><p><strong>「業務アプリケーションのコードになる部分以外は全て自分のタスク」</strong>という意識で、自ら動いていきましょう。</p><h1 id="３．インフラ要件定義（前半戦）"><a href="#３．インフラ要件定義（前半戦）" class="headerlink" title="３．インフラ要件定義（前半戦）"></a>３．インフラ要件定義（前半戦）</h1><p>いよいよインフラ要件定義が始まります。</p><p>インフラ要件定義では、まずは要件定義のゴールに向け、</p><ul><li>インフラとして提供しなければいけない機能として何があるか（※本稿では、 <strong>「インフラ機能要件」</strong> と題します）</li><li>インフラとしてどのような構成・レベル感で作っていくべきか（※本稿では、<strong>「インフラ非機能要件」</strong> と題します）</li></ul><p>といった部分の仮説を立てます。</p><p>これらは、 <strong>「システムとして為したいこと」</strong> に基づく必要があるのは、前述の通りです。<br>そのため、アプリケーションチームの要件定義を受けて具体化や肉付け、または軌道修正等も発生するため、初めから精緻なものは不要です。</p><p>一方で、自分の中にゴールイメージがないと、首尾一貫した内容にならなかったり、そもそもお客様との会話にならなかったりもするので、<strong>要件定義を始める頃には何かしら仮説を持っておくことが必要</strong>です。</p><p>インフラ要件定義では、セッションの回数や濃度等も踏まえて、そうして作った仮説を適切な議論の単位（テーマ）に分割した上で、それぞれお客様と議論していきます。</p><h2 id="３－１．インフラ機能要件定義"><a href="#３－１．インフラ機能要件定義" class="headerlink" title="３－１．インフラ機能要件定義"></a>３－１．インフラ機能要件定義</h2><p>インフラ機能要件定義では、<strong>「業務アプリケーションが担う処理以外にどんな機能が必要か」</strong>といったところを明文化していきます。<br>その際、</p><ul><li>現在の持ち物で転用・相乗りできるもの</li><li>現在の持ち物で利用が必須のもの</li><li>現在の持ち物で不足しているもの</li></ul><p>なども明らかにしていきます。</p><p>例えば、</p><ul><li>既に認証基盤を持っているから、その認証基盤とSSOできるようにしてほしい</li><li>データベースはリッチなものを持っているので相乗りしてほしい</li><li>新たに全社の統合ジョブ基盤として使えるジョブ基盤を作ってほしい</li></ul><p>などでしょうか。</p><p>構成面や処理方式に関わることはもちろんですが、非機能面で引きずられる部分があったり、現行他システムへの影響を気にしなければいけなかったりもするので、<strong>「他システムと一緒に」</strong>系のお話には注意が必要です。（上の例は全部そうですね。）</p><p>また、<strong>「インフラ=業務アプリケーション以外全て」</strong>と捉えると、インフラ機能要件定義を抜け漏れなくやりきるのは難しいことです。<br>ゆえに、なるべく抜け漏れなく対応するための一助として、<strong>各種構成図（ハードウェア、ネットワーク、ソフトウェア、アーキテクチャなど）を早めに作成すべき</strong>と、私は考えています。<br>視覚的に訴えるものがあれば、自分たち・お客様ともに抜け漏れや流用資産の有無なども気づきやすいですし、ある程度網羅感を持って話ができるためです。</p><p>こちらも、Factとして既におさえている部分以外は仮説ベースで作り、ブラッシュアップしていければかまいません。<br>ただし、<strong>最終的なアウトプット資料の仮バージョン</strong>として作り、<strong>セッションのための資料</strong>はなるべく作らないようにしましょう。<br>これは「要件定義だから」というお話ではありませんが、有限の作業時間において最終的に捨てる資料を作るのは非効率です。<br>（もちろん、説明のための補足資料などはその限りではありません。）</p><p>ちなみに、当然ながら、お客様毎に構成や所有資産、欲しい機能などは異なるので、機能要件定義の方がよりお客様とのコミュニケーションが大切になるような気がします。</p><h3 id="３－２．インフラ非機能要件定義"><a href="#３－２．インフラ非機能要件定義" class="headerlink" title="３－２．インフラ非機能要件定義"></a>３－２．インフラ非機能要件定義</h3><p>一方のインフラ非機能要件定義については、整理のために便利なツールが既に存在します。<br>皆さん良くご存じの、<strong><a href="https://www.ipa.go.jp/sec/softwareengineering/std/ent03-b.html" target="_blank" rel="noopener">非機能要求グレード2018(IPA)</a></strong>です。</p><p>非機能要件を網羅的に整理できることはもちろんですが、公開されている指標に基づいてスムースに議論することができるので、非常に有用性が高い代物です。<br>個人的には、非機能要件定義のベースはこれが全てと捉えても、事足りるかなとも思っています。<br>（逆に非機能要求グレードと全く違う軸で要件定義をしている方がいれば、教示いただけると幸いです。）</p><p>さて、非機能要求グレードをおさらいすると、大きく6つに分割して定義されています。</p><ul><li><strong>可用性</strong><ul><li>継続してサービスを提供し続けられるか</li></ul></li><li><strong>性能・拡張性</strong><ul><li>ピーク時や将来も見越して、パフォーマンスを維持できるか</li></ul></li><li><strong>運用・保守性</strong><ul><li>安定・安心してシステムを使い続けられるか</li></ul></li><li><strong>移行性</strong><ul><li>安全にローンチできるか</li></ul></li><li><strong>セキュリティ</strong><ul><li>様々なセキュリティリスクに対応できるか</li></ul></li><li><strong>環境・エコロジー</strong><ul><li>環境関連の制約や守るべき条約などがあるか</li></ul></li></ul><p>大項目の中身については本稿では触れませんが、各大項目に更に細分化された小項目が定義されており、様々な要求・要件を網羅的に明確化できます。</p><p>ただ、網羅的である一方で、細かすぎる部分や、似通った内容を複数箇所で定義することになっている部分もあります。<br>そのため、最初から最後まで須らく議論の俎上に載せると、おそらく要件定義フェーズのセッションが全てその議論で埋まってしまいます。</p><p>また、お客様の興味の大部分は、<strong>「システムを使って何を為すか」</strong>と、<strong>「そのために、なぜこの非機能レベルなのか」</strong>という部分なので、全ての項目を議論の俎上に載せることは、お客様からするとあまり意味がありません。</p><p>それにも関わらず、全ての項目に対して全力で議論をしようとすると、お客様に<strong>「この人は今回のシステムで重要視すべき点がわかってないのでは？」</strong>といった不信感を与えることにもなり得ます。<br>（多忙なスケジュールの中で調整したにも関わらず、ドキュメントを見れば済むような話を何時間も聞かされるストレスも想像に容易いですよね。。。）</p><p>そのような考えの元、私が非機能要求グレードを用いる場合は、 </p><p><strong>1.大項目レベルでの方針を立てて認識を合わせる</strong><br><strong>2.ポイントになると考えられる部分と、後々認識齟齬のダメージが大きそうなものを小項目レベルでピックアップして議論する</strong></p><p>といった2段構えの対応で要件を明確化するように、心がけています。</p><p>大項目レベルの方針は小項目の調整・相談などの際にも立ち戻れる軸となるように、以後ぶれないような形で定義・合意します。<br>また、小項目のうち、お客様にとってポイントとなるような部分については、方針の中にも文言を含めることが多いです。</p><p>一方、小項目レベルにおいては、お客様にとってポイントとなるようなものに加え、例えば性能面など後工程で調整・相談が入る可能性があるといった申し送り事項含め、合意することが大切です。<br>後は、「SLAなのかSLOなのか」といった、曖昧にしていると、後で双方が不幸になるような部分についてもしっかり合意します。</p><p>なお、議論の場で取り扱わなかった部分も、<strong>原則としてドキュメントベースでお客様とレベル感とその理由を共通認識化すること</strong>は並行で行います。<br>ドキュメントでのやり取りの中で、些末な部分含め、認識齟齬を抑制することが目的です。</p><p>ただし、例外もあります。<br>お客様の工数も有限なので、「ドキュメントベースでも確認不要」ということがお客様と合意できる項目は、そちらは割愛してしまってもかまわないと考えています。<br>（経験上、「環境・エコロジー」の大項目は、よくその対象になる気がします。）</p><p>お客様のインフラチームの方々は、全社のシステムを横断で見ていることがままあり、現行システムの運用保守対応や他案件の対応などで多忙なこともあります。<br>お互いの合意の元、正しく濃淡をつけて推進するように心がけます。</p><h2 id="４．インフラ要件定義（後半線）"><a href="#４．インフラ要件定義（後半線）" class="headerlink" title="４．インフラ要件定義（後半線）"></a>４．インフラ要件定義（後半線）</h2><p>インフラ要件定義の前半戦で、要件はほぼ固まっているので、後半戦ではお買い物リストや見積をまとめます。<br>今回は、<strong>オンプレミス環境</strong>の場合と、<strong>パブリッククラウド</strong>の場合で分けて記載したいと思います。</p><p>なお、ソフトウェアについては、どちらの場合も大きく差異はなく、お買い物リスト（ソフトウェア一覧）をまとめ、ライセンスやサポート料金などの見積を取得する形となります。</p><p>これらは比較的納期も短いので、調達含め大きな問題になることはないのですが、<strong>ライセンス体系や必要数</strong>については注意する必要があります。<br>ソフトウェアによっては、オンプレミスの物理マシンと、仮想マシンやパブリッククラウドでライセンスの必要数が変わってくるものがあります。</p><p>また、クライアント側のライセンスについても、手配を忘れないように注意が必要です。<br>加えて、既にお客様が持っているもので事足りる可能性もあるので、今一度ライセンス体系とお客様が本当に所有していないのかを確認します。</p><h3 id="４－１．オンプレミス環境の場合"><a href="#４－１．オンプレミス環境の場合" class="headerlink" title="４－１．オンプレミス環境の場合"></a>４－１．オンプレミス環境の場合</h3><p>オンプレミス環境でのシステム構築の場合、作成した構成案からお買い物リスト（ハードウェア一覧）をまとめ、見積を取得します。</p><p>なお、在庫状況によっては<strong>納期が数か月</strong>かかることもあるので、余裕を持って見積を取り、そして発注することが必要です。<br>（詳細設計・構築の棲み分けの考え方や案件規模にもよりますが、）個人的には、基本設計フェーズの早めのタイミングで発注プロセスが回せていないと、構築スケジュールへの影響が心配になります。</p><p>また、その納期の都合もあり、予定稼働期間（※5年or7年が多いです）の間、要件を満たせるハードウェアを発注する必要があります。<br>ゆえに、多くの場合は、<strong>現在のビジネス規模に対しては過剰なリソースを持つハードウェアや、十二分にリスクに備えたハードウェア</strong>を購入します。</p><p>その特性上、あまりにリッチな要件をベースにしてしまうと、予算をオーバーするだけでなく、基盤更改時にもリソースが過剰に余っていたという残念なことにもなり得るので、要件の妥当性について、よりしっかりとチェックする必要があると思います。</p><p>その妥当性を考えるときに立ち返るのも、 <strong>「システムを使って何を為すか」</strong>です。</p><ul><li>企業の基幹業務を担うシステムだから、可用性の面では妥協できないが、業務のピーク性があるわけでもないので性能・拡張性は、目をつぶれる。</li><li>業務側で運用回避できるから、可用性の面は妥協できるが、セキュアな情報を扱っているからセキュリティ面は妥協できない。</li></ul><p>などなど、お客様毎、そしてシステム毎に、本当に重要な部分は違うはずです。<br>そのあたりを汲み取り、お客様にとってコスト面も含めた最適・最良の構成で合意し、見積を取得するようにします。<br><br></p><p>余談にはなりますが、業務系と直接関係ない<strong>メンテナンス用などのネットワーク回線の引き込み</strong>に関しての見積・調達プロセスは、忘れがちな気がするので注意しましょう。</p><p>（実際はそんなにかからないことが多いですが、）納期として2か月程度見込んでおく必要があり、手配が漏れると、構築期間中ずっとデータセンタに行って作業することになります。</p><p>ハードウェアレイヤの作業は当然現地作業が必要ですが、例えばミドルウェアやソフトウェアの設定作業などは、必ずしも現地でやる必要はないはずです。<br>にもかかわらず、わざわざデータセンタに出向いて作業するとなると、移動時間の工数などもバカになりません。</p><h3 id="４－２．パブリッククラウド環境の場合"><a href="#４－２．パブリッククラウド環境の場合" class="headerlink" title="４－２．パブリッククラウド環境の場合"></a>４－２．パブリッククラウド環境の場合</h3><p>一方、パブリッククラウド環境の場合は、クラウドベンダーの見積ツールが公開されているので、作成した構成案を元にそちらで見積を行います。</p><blockquote><p>○AWSの場合・・・<a href="https://calculator.aws/#/" target="_blank" rel="noopener">AWS Pricing Calculator</a><br>○Azureの場合・・・<a href="https://azure.microsoft.com/ja-jp/pricing/calculator/" target="_blank" rel="noopener">料金計算ツール</a><br>○GCPの場合・・・<a href="https://cloud.google.com/products/calculator?hl=ja" target="_blank" rel="noopener">Google Cloud Pricing Calculator</a></p></blockquote><p>予約インスタンスを使うのか、従量課金インスタンスを使うのかといった部分や、各インスタンスの稼働時間をどれくらいと想定するか等、インフラ要件定義前半戦で議論が漏れていたものがあれば、お客様と追加で認識合わせをします。</p><p>なお、パブリッククラウド環境においても、要件の妥当性をチェックする必要はあります。<br>ただ、必要に応じてリソースを追加したり、リスクに備えたサービスを追加したりということが可能なので、<strong>予定稼働期間を見越した要件</strong>と、<strong>初回稼働日時点での要件</strong>を分けて整理し、それぞれの構成案を考えることで、少なくとも初回稼働日時点でToo Muchな基盤となることは抑止できるはずです。</p><h2 id="５．さいごに"><a href="#５．さいごに" class="headerlink" title="５．さいごに"></a>５．さいごに</h2><p><strong>「インフラ要件定義」</strong>をテーマに、その中で行う作業や、個人的に意識していることや考えていることを、つらつらと書きました。</p><p>要件定義は、お客様のために何が最良なのかを考え抜き、そしてお客様と共に現実のものにしていく最初の数歩のフェーズです。</p><p>フワフワしたものを形にしていくフェーズなので難しい部分もありますが、<strong>「システムを使って何を為すか」</strong> を念頭に置きながら、関係者と活発にコミュニケーションをとり、プロジェクト全体で納得できる要件定義ができるように頑張りたいものです。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;１．はじめに&quot;&gt;&lt;a href=&quot;#１．はじめに&quot; class=&quot;headerlink&quot; title=&quot;１．はじめに&quot;&gt;&lt;/a&gt;１．はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。テクノロジーイノベーショングループ所属の長澤です。&lt;br&gt;&lt;a href=&quot;https://fu
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="入門" scheme="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
      <category term="infrastructure" scheme="https://future-architect.github.io/tags/infrastructure/"/>
    
      <category term="要件定義" scheme="https://future-architect.github.io/tags/%E8%A6%81%E4%BB%B6%E5%AE%9A%E7%BE%A9/"/>
    
  </entry>
  
  <entry>
    <title>mxGraphで階層グラフを可視化する</title>
    <link href="https://future-architect.github.io/articles/20210304/"/>
    <id>https://future-architect.github.io/articles/20210304/</id>
    <published>2021-03-03T15:00:00.000Z</published>
    <updated>2021-03-04T01:30:08.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGコアテクノロジーユニットの平岡です。</p><p>この記事は、<a href="/articles/20210303/">Vis Networkで階層グラフを可視化する</a>の続編となります。未読の方は、是非そちらの記事もご覧下さい。</p><p>前回の記事では、JavaScript製のグラフ可視化ライブラリについて概観しました。また、その1つであるVis Networkについて紹介し、階層グラフの可視化を行いました。</p><p>Vis Networkはcanvasでの高速な描画が可能で<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>、階層グラフをライトに表示・加工する場合は非常に有用ですが、大きな階層グラフを表示する場合にエッジの交差が多くなってしまうという課題があることを見てきました。</p><p>この記事では上述の課題を解決するために<a href="https://github.com/jsGraph/mxgraph" target="_blank" rel="noopener">mxGraph</a>を用いて階層グラフの可視化を行います。mxGraphは階層グラフのレイアウト計算にSugiyama Algorithm<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>を利用しており、階層グラフを綺麗に表示することが可能です。下の画像は前回の記事で描画した階層グラフを両ライブラリ間で比較したものですが、mxGraphの方がエッジの交差が少なく見やすいレイアウトになっていることがわかります。</p><p><img src="/images/20210304/image1.png" alt="vis-vs-mxgraph.png"></p><h1 id="mxGraphとは"><a href="#mxGraphとは" class="headerlink" title="mxGraphとは"></a>mxGraphとは</h1><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>mxGraphには以下のような特徴があります。</p><ul><li>JavaScript製のグラフ可視化ライブラリ</li><li>描画方式はSVG</li><li><a href="https://www.diagrams.net/" target="_blank" rel="noopener">diagrams.net(旧 draw.io)</a>で利用されています</li><li>Apache License 2.0</li><li>自動レイアウト計算にSugiyama Algorithmを利用しており、綺麗な階層グラフを表示できます</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><a href="https://github.com/jgraph/mxgraph" target="_blank" rel="noopener">本家</a>は2020年11月9日にメンテ終了し、<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>現在は<a href="https://github.com/jsGraph/mxgraph" target="_blank" rel="noopener">有志</a>がメンテを行っているようです。</p><h1 id="mxGraphの使い方"><a href="#mxGraphの使い方" class="headerlink" title="mxGraphの使い方"></a>mxGraphの使い方</h1><h2 id="階層グラフの描画"><a href="#階層グラフの描画" class="headerlink" title="階層グラフの描画"></a>階層グラフの描画</h2><p>mxGraphの自動レイアウト計算を利用して階層グラフを描画してみましょう。</p><ul><li>紹介するソースコードの全体は<a href="https://jsfiddle.net/85pLye7h/" target="_blank" rel="noopener">Edit fiddle - JSFiddle - Code Playground</a>で確認できます。こちらと比較しながら読み進めると良いです。</li><li>より詳しく知りたい方は、本家の以下コンテンツをご覧になってみてください。<ul><li><a href="https://jgraph.github.io/mxgraph/docs/manual.html" target="_blank" rel="noopener">mxGraph User Manual - JavaScript Client</a> - mxGraphのマニュアルです。</li><li><a href="https://jgraph.github.io/mxgraph/javascript/index.html" target="_blank" rel="noopener">JavaScript Diagram Editor</a> - mxGraphを利用したサンプルページが豊富に紹介されています。</li><li><a href="https://jgraph.github.io/mxgraph/docs/js-api/files/index-txt.html" target="_blank" rel="noopener">API Specification</a> - mxGraphのAPIドキュメントです。</li></ul></li></ul><p>まずは、グラフを表示する領域を確保し、<code>mxGraph</code>のインスタンスを生成します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// グラフを表示する領域を確保</span></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>)</span><br><span class="line"><span class="comment">// グラフのインスタンス生成</span></span><br><span class="line"><span class="keyword">const</span> graph = <span class="keyword">new</span> mxGraph(container)</span><br></pre></td></tr></table></figure><p><code>graph.getDefaultParent()</code>はノードやエッジを追加する際に必要(後述)なので取得しておきます。また、階層グラフを自動レイアウトで計算するために、<code>mxHierarchicalLayout</code>のインスタンスを生成します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// グラフにノードやエッジを追加する際に必要</span></span><br><span class="line"><span class="keyword">const</span> parent = graph.getDefaultParent()</span><br><span class="line"><span class="comment">// 今回は階層グラフを自動レイアウトで描画したいため、レイアウトのインスタンスを生成</span></span><br><span class="line"><span class="keyword">const</span> layout = <span class="keyword">new</span> mxHierarchicalLayout(graph)</span><br></pre></td></tr></table></figure><p>最後に、ノードやエッジの追加とレイアウト計算を行いましょう。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// グラフの形状やデザインの変更を行う(グラフモデルを変更する)際は</span></span><br><span class="line"><span class="comment">// beginUpdate -&gt; グラフモデル変更 -&gt; endUpdate の順に行う</span></span><br><span class="line">graph.getModel().beginUpdate()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// tryブロックの中でグラフの形状やデザインの変更を行う</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// ノード追加</span></span><br><span class="line"><span class="keyword">const</span> v1 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'1'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v2 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'2'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v3 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'3'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v4 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'4'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v5 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'5'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v6 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'6'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v7 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'7'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v8 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'8'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v9 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'9'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v10 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'10'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v11 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'11'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v12 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'12'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// エッジ追加</span></span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v1, v3, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v1, v2, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v2, v4, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v2, v5, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v3, v6, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v3, v8, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v6, v7, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v6, v9, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v4, v10, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v4, v11, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v5, v12, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v3, v4, <span class="literal">null</span>)</span><br><span class="line"><span class="comment">// 追加したノード・エッジに基づいてレイアウトの自動計算を行う</span></span><br><span class="line">layout.execute(parent)</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">graph.getModel().endUpdate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tryブロックの中身を詳しく見てみましょう。ノードの追加は</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> v1 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'1'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p>のように行います。各引数の説明は以下のとおりです。</p><ul><li>第1引数：先程取得した<code>parent</code></li><li>第2引数：ノードを一意に識別するためのID(指定なしの場合は自動的に割り当て)</li><li>第3引数：ノードのラベル</li><li>第4,5引数：ノードのx座標・y座標(後でレイアウト自動計算する場合はダミーの値でOK)</li><li>第6,7引数：ノードの幅・高さ</li><li>第8引数：ノードのスタイル</li></ul><p>また、エッジの追加は</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v1, v3, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p>のように行います。各引数の説明は以下のとおりです。</p><ul><li>第1引数：先程取得した<code>parent</code></li><li>第2引数：エッジを一意に識別するためのID(指定なしの場合は自動的に割り当て)</li><li>第3引数：エッジのラベル</li><li>第4,5引数：エッジの始点・終点</li><li>第6引数：エッジのスタイル</li></ul><p>最後に、レイアウト計算を呼び出します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 追加したノード・エッジに基づいてレイアウトの自動計算を行う</span></span><br><span class="line">layout.execute(parent)</span><br></pre></td></tr></table></figure><p>以上で、画像のように階層グラフが描画できました。</p><p><img src="/images/20210304/image2.png" alt="graph.png"></p><h2 id="ノードの形状や色の変更"><a href="#ノードの形状や色の変更" class="headerlink" title="ノードの形状や色の変更"></a>ノードの形状や色の変更</h2><p>続いて、ノードの形状や色をカスタマイズしてみましょう。<br>(紹介するソースコード全体は<a href="https://jsfiddle.net/4qnz1c7g/" target="_blank" rel="noopener">Edit fiddle - JSFiddle - Code Playground</a>で確認できます。)</p><p><code>graph.insertVertex()</code>の第8引数でノードのstyleを指定できます。また、styleに名前を付けて適用させることも可能です。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ノード追加</span></span><br><span class="line"><span class="keyword">const</span> v1 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'1'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">'shape=cylinder'</span>)</span><br><span class="line"><span class="keyword">const</span> v2 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'2'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">'shape=triangle'</span>)</span><br><span class="line"><span class="keyword">const</span> v3 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'3'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">'shape=cloud'</span>)</span><br><span class="line"><span class="keyword">const</span> v4 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'4'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">'shape=hexagon'</span>)</span><br><span class="line"><span class="keyword">const</span> v5 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'5'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">'shape=rectangle'</span>)</span><br><span class="line"><span class="keyword">const</span> v6 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'6'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">'shape=ellipse'</span>)</span><br><span class="line"><span class="keyword">const</span> v7 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'7'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">'shape=doubleEllipse'</span>)</span><br><span class="line"><span class="keyword">const</span> v8 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'8'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">'shape=rhombus'</span>)</span><br><span class="line"><span class="keyword">const</span> v9 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'9'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">'fillColor=orange'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// styleに名前をつけることもできる</span></span><br><span class="line"><span class="keyword">const</span> defaultNodeStyle = graph.getStylesheet().getDefaultVertexStyle()</span><br><span class="line"><span class="keyword">const</span> style = mxUtils.clone(defaultNodeStyle)</span><br><span class="line">style[<span class="string">'shape'</span>] = <span class="string">'actor'</span></span><br><span class="line">graph.getStylesheet().putCellStyle(<span class="string">'myFavoriteStyle'</span>, style)</span><br><span class="line"><span class="keyword">const</span> v10 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'10'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">'myFavoriteStyle'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v11 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'11'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v12 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">'12'</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/20210304/image3.png" alt="image.png"></p><h2 id="tooltip"><a href="#tooltip" class="headerlink" title="tooltip"></a>tooltip</h2><p>次は、ノードやエッジにマウスを当てた際にtooltipを表示させてみましょう。</p><p>(紹介するソースコード全体は<a href="https://jsfiddle.net/9a8cd50w/" target="_blank" rel="noopener">Edit fiddle - JSFiddle - Code Playground</a>で確認できます。)</p><p>まずは、tooltipを有効にしましょう。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tooltipを有効にします</span></span><br><span class="line">graph.setTooltips(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>すると、ノードのラベルがtooltipで表示されました。</p><p><img src="/images/20210304/image4.png" alt="tooltip-default.png"></p><p>ラベル以外のテキストをtooltipで表示させたい場合は、<code>graph.getTooltipForCell</code>メソッドをoverrideすれば良いです。<br>(mxGraphでは、ノードやエッジを<code>mxCell</code>クラスで扱います。<code>graph.getTooltipForCell</code>は、この<code>mxCell</code>を引数として表示したいtooltipを返すメソッドです。デフォルトでは先程のようにラベルがtooltipで表示されます)</p><p><code>cell</code>がエッジか否かの判定は、<code>graph.getModel().isEdge(cell)</code>で行うことができます。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tooltipで表示させたい内容を設定します</span></span><br><span class="line">graph.getTooltipForCell = <span class="function"><span class="params">cell</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (graph.getModel().isEdge(cell)) &#123;</span><br><span class="line">    <span class="keyword">const</span> srcNodeLabel = cell.source.getValue()</span><br><span class="line">    <span class="keyword">const</span> dstNodeLabel = cell.target.getValue()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`this edge is directed from node <span class="subst">$&#123;srcNodeLabel&#125;</span> to node <span class="subst">$&#123;dstNodeLabel&#125;</span>`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> nodeLabel = cell.getValue()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`node <span class="subst">$&#123;nodeLabel&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/20210304/image5.gif" alt="tooltip.gif"></p><h2 id="イベント"><a href="#イベント" class="headerlink" title="イベント"></a>イベント</h2><p>イベント処理の例として、クリックしたノードの色をオレンジに変更してみましょう。</p><p>(紹介するソースコード全体は<a href="https://jsfiddle.net/5p6wnfsv/" target="_blank" rel="noopener">Edit fiddle - JSFiddle - Code Playground</a>で確認できます。)</p><p><code>graph.addListener</code>メソッドでイベント発火時の処理を設定することができます。<br>イベント一覧は<a href="https://jgraph.github.io/mxgraph/docs/js-api/files/util/mxEvent-js.html" target="_blank" rel="noopener">mxEvent</a>に記載されています。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// クリックしたノードをオレンジ色に変更します</span></span><br><span class="line">graph.addListener(<span class="string">'click'</span>, (sender, evt) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> cell = evt.getProperty(<span class="string">'cell'</span>)</span><br><span class="line">  <span class="keyword">if</span> (graph.getModel().isVertex(cell)) &#123;</span><br><span class="line">    graph.setCellStyles(<span class="string">'fillColor'</span>, <span class="string">'orange'</span>, [cell])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/images/20210304/image6.gif" alt="event.gif"></p><h2 id="SVG形式でexport"><a href="#SVG形式でexport" class="headerlink" title="SVG形式でexport"></a>SVG形式でexport</h2><p>描画したグラフをexportすることができます。<br>SVG形式でexportする例を<a href="https://jsfiddle.net/2jLvt46e/" target="_blank" rel="noopener">Edit fiddle - JSFiddle - Code Playground</a>で確認できます。</p><p>ブラウザ上で描画したグラフをファイルとして保存できるのは凄く便利ですね。<br>SVG形式なので、業務で扱うような大きいグラフでも潰れずに表示することができるのも良いです。<br>(Vis Networkの場合はcanvasで描画しているため、ファイル出力してもブラウザで見えている範囲だけの画像となり、大きなグラフを鮮明に表示することが難しかったです)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// グラフをexportするためのボタンを配置します</span></span><br><span class="line"><span class="keyword">const</span> button = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</span><br><span class="line">mxUtils.write(button, <span class="string">'export'</span>)</span><br><span class="line">mxEvent.addListener(button, <span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">  exportGraph()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'export-button'</span>).appendChild(button)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exportGraph</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> svg = createSvg()</span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([svg], &#123;</span><br><span class="line">    <span class="string">'type'</span>: <span class="string">'svg/plain'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>)</span><br><span class="line">  link.href = <span class="built_in">window</span>.URL.createObjectURL(blob)</span><br><span class="line">  link.download = <span class="string">'graph.svg'</span></span><br><span class="line">  link.click()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSvg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> bounds = graph.getGraphBounds()</span><br><span class="line">  <span class="keyword">const</span> offset = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// SVGのルート要素を作る</span></span><br><span class="line">  <span class="keyword">const</span> root = mxUtils.createXmlDocument().createElementNS(mxConstants.NS_SVG, <span class="string">'svg'</span>)</span><br><span class="line">  root.setAttribute(<span class="string">'xmlns'</span>, mxConstants.NS_SVG)</span><br><span class="line">  root.setAttribute(<span class="string">'xmlns:xlink'</span>, mxConstants.NS_XLINK)</span><br><span class="line">  root.setAttribute(<span class="string">'width'</span>, <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.ceil(bounds.width) + <span class="number">2</span>*offset&#125;</span>px`</span>)</span><br><span class="line">  root.setAttribute(<span class="string">'height'</span>, <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.ceil(bounds.height) + <span class="number">2</span>*offset&#125;</span>px`</span>)</span><br><span class="line">  root.setAttribute(<span class="string">'version'</span>, <span class="string">'1.1'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> svgCanvas = <span class="keyword">new</span> mxSvgCanvas2D(root)</span><br><span class="line">  <span class="comment">// グラフが端に寄らないように平行移動する</span></span><br><span class="line">  svgCanvas.translate(offset, offset)</span><br><span class="line">  <span class="keyword">const</span> imgExport = <span class="keyword">new</span> mxImageExport()</span><br><span class="line">  <span class="comment">// グラフを記述</span></span><br><span class="line">  imgExport.drawState(graph.getView().getState(graph.getModel().root), svgCanvas)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mxUtils.getPrettyXml(root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Vis-Network-vs-mxGraph"><a href="#Vis-Network-vs-mxGraph" class="headerlink" title="Vis Network vs mxGraph"></a>Vis Network vs mxGraph</h1><p>業務でVis NetworkとmxGraphを両方使ってみて大きく異なっていた点を紹介します。</p><h2 id="階層グラフのエッジ間の交差"><a href="#階層グラフのエッジ間の交差" class="headerlink" title="階層グラフのエッジ間の交差"></a>階層グラフのエッジ間の交差</h2><p>冒頭で書いたとおりです。mxGraphの方がエッジ間の交差が少なく、見やすいレイアウトになっています。</p><p><img src="/images/20210304/image7.png" alt="vis-vs-mxgraph.png"></p><h2 id="エッジがノードを貫通する場合"><a href="#エッジがノードを貫通する場合" class="headerlink" title="エッジがノードを貫通する場合"></a>エッジがノードを貫通する場合</h2><p>下の画像はVis Networkの自動レイアウトで階層グラフを描画したものです。<br>(ソースコードは<a href="https://jsfiddle.net/jyzb864e/" target="_blank" rel="noopener">こちら</a>)</p><p>このグラフのオレンジ色のエッジに注目してみましょう。</p><p>一見すると、ノード1からノード3へ伸びるエッジとノード3からノード10へ伸びるエッジがあるように見えます。<br>しかし、ソースコードを見ると分かる通り、実際には後者のエッジはノード1からノード10へ伸びたものです。道中でノード3を貫通しているために、あたかもノード3から伸びているように見えてしまいます。<br>このように、Vis Networkにおいてエッジがノードを貫通する場合にはエッジの始点がどこなのか判別しにくくなるという課題があります。</p><p><img src="/images/20210304/image8.png" alt="image.png"></p><p>mxGraphの場合はどうでしょうか。下の画像は、上と同じ階層グラフをmxGraphの自動レイアウトで描画したものです。レイアウト計算が賢いため、そもそもエッジがノードに重ならずに描画されました。(ソースコードは<a href="https://jsfiddle.net/gtprnuow/" target="_blank" rel="noopener">こちら</a>)</p><p><img src="/images/20210304/image9.png" alt="image.png"></p><p>比較のために、mxGraphで自動レイアウトを使わずに描画し、エッジがノードと重なる例を見てみます。<br>以下のグラフはノード1からノード2、ノード1からノード3へのエッジが出ています。ノード1からノード3へのエッジは道中でノード2の上を通るので、エッジの始点の判別がしやすいことがわかります。<br>(ソースコードは<a href="https://jsfiddle.net/hgdez7y1/" target="_blank" rel="noopener">こちら</a>)</p><p><img src="/images/20210304/image10.png" alt="image.png"></p><h2 id="描画速度"><a href="#描画速度" class="headerlink" title="描画速度"></a>描画速度</h2><p>描画速度はどうでしょうか？<br>Vis Networkはcanvas, mxGraphはSVGで描画しているため、Vis Networkの方が速いことが予想されます。以下では簡単に性能比較を行ってみます。</p><ul><li>下記のような一本道のグラフを自動レイアウトで描画するために要する時間を色々なノード数(10個,100個,1000個,2000個,4000個の5種類)に対して計測する</li></ul><p><img src="/images/20210304/image11.png" alt="image.png"></p><ul><li>計測値は、3回測定して平均を取ったもの(単位：ミリ秒)を採用する</li></ul><p>計測結果は以下のようになりました。</p><table><thead><tr><th align="right">ノード数</th><th align="right"><a href="https://jsfiddle.net/8qmn6fyw/" target="_blank" rel="noopener">Vis NetWork</a></th><th align="right"><a href="https://jsfiddle.net/f35o29pu/" target="_blank" rel="noopener">mxGraph</a></th></tr></thead><tbody><tr><td align="right">10</td><td align="right">33.40</td><td align="right">43.12</td></tr><tr><td align="right">100</td><td align="right">103.52</td><td align="right">181.98</td></tr><tr><td align="right">1000</td><td align="right">742.94</td><td align="right">1491.80</td></tr><tr><td align="right">2000</td><td align="right">1429.83</td><td align="right">2906.09</td></tr><tr><td align="right">4000</td><td align="right">-</td><td align="right">6900.84</td></tr></tbody></table><p>ノード数が2000以下の範囲では、Vis Networkの方が概ね2倍程度速く描画できることがわかりました。</p><p>なお、Vis Networkでノード数4000の場合は<code>Maximum call stack size exceeded</code>エラーが出たため空欄になっています。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p><p>mxGraphの描画速度を改善することはできないのでしょうか？<br>実は、何行かコードに追加するだけで、ある程度の改善が可能です。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></p><p>追加したコードとその周辺を以下に載せます。次の2つの改善を行っています。</p><ul><li>グラフモデルの更新が完了したときに初めて描画を行うようにする</li><li><code>ignoreStringSize</code>を有効にする</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高速化その1：グラフモデル更新中は描画をOFFにする</span></span><br><span class="line">graph.getView().setRendering(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高速化その2：ignoreStringSizeを有効にする</span></span><br><span class="line">mxText.prototype.ignoreStringSize = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// グラフの形状やデザインの変更を行う(グラフモデルを変更する)際は</span></span><br><span class="line"><span class="comment">// beginUpdate -&gt; グラフモデル変更 -&gt; endUpdate の順に行う</span></span><br><span class="line">graph.getModel().beginUpdate()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// tryブロックの中でグラフの形状やデザインの変更を行う</span></span><br><span class="line">  <span class="comment">// (中略)</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  graph.getModel().endUpdate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 描画をオンに戻す</span></span><br><span class="line">graph.getView().setRendering(<span class="literal">true</span>)</span><br><span class="line">graph.refresh()</span><br></pre></td></tr></table></figure><p>高速化を施したmxGraphも含めて、計測結果を再掲します。Vis Networkの1.5倍程度まで改善することができました。</p><table><thead><tr><th align="right">ノード数</th><th align="right"><a href="https://jsfiddle.net/8qmn6fyw/" target="_blank" rel="noopener">Vis NetWork</a></th><th align="right"><a href="https://jsfiddle.net/f35o29pu/" target="_blank" rel="noopener">mxGraph(高速化なし)</a></th><th align="right"><a href="https://jsfiddle.net/n0Lduaz2/" target="_blank" rel="noopener">mxGraph(高速化あり)</a></th></tr></thead><tbody><tr><td align="right">10</td><td align="right">33.40</td><td align="right">43.12</td><td align="right">31.78</td></tr><tr><td align="right">100</td><td align="right">103.52</td><td align="right">181.98</td><td align="right">144.06</td></tr><tr><td align="right">1000</td><td align="right">742.94</td><td align="right">1491.80</td><td align="right">1128.03</td></tr><tr><td align="right">2000</td><td align="right">1429.83</td><td align="right">2906.09</td><td align="right">2122.71</td></tr><tr><td align="right">4000</td><td align="right">-</td><td align="right">6900.84</td><td align="right">3477.48</td></tr></tbody></table><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>mxGraphの自動レイアウトを用いて階層グラフの可視化を行い、複雑な階層グラフが綺麗に描画できることを紹介しました。</p><p>また、Vis NetworkとmxGraphの両方を業務で扱ってみて得た知見についても紹介しました。</p><p>コアテクノロジーユニットでは、現在チームメンバーを募集しています。<br>私たちと一緒にテクノロジーで設計、開発、テストの高品質・高生産性を実現する仕組みづくりをしませんか？</p><p>興味がある方はお気軽に技術ブログTwitterや会社採用HPへ、連絡をお待ちしております。</p><p><a href="https://www.future.co.jp/recruit/" target="_blank" rel="noopener">https://www.future.co.jp/recruit/</a></p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210303/index.html" data-iframely-url="//cdn.iframe.ly/UYpIJsS?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200901/index.html" data-iframely-url="//cdn.iframe.ly/MB3R2AH?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">フューチャー発のOSSであるCheetah Gridも高速に描画するためにcanvasを使用しています。興味がある方は<a href="/articles/20200901/">Vue.jsで最速に始めるCheetah Grid</a>や<a href="/articles/20200924/">CheetahGrid+Vue.jsをエンプラで使ってみた</a>を御覧ください</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="http://www.orsj.or.jp/archive2/or63-1/or63_1_20.pdf" target="_blank" rel="noopener">階層グラフの可視化</a>や <a href="https://en.wikipedia.org/wiki/Layered_graph_drawing" target="_blank" rel="noopener">Layered graph drawing - Wikipedia</a>などに詳しい説明があります。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">アーカイブされ、issueが閲覧できなくなってしまいました…</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;">実装の詳細は確認できていませんが、自動レイアウト計算の実装で再帰関数を使っており、再帰の深さが一定値を超えたためエラーが出たと推測されます。</span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;">この記事で紹介する改善策は以前に本家のissueで見かけて知ったのですが、現在は閲覧できなくなってしまいました...</span><a href="#fnref:6" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGコアテクノロジーユニットの平岡です。&lt;/p&gt;
&lt;p&gt;この記事は、&lt;a href=&quot;/articles/20
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
      <category term="可視化" scheme="https://future-architect.github.io/tags/%E5%8F%AF%E8%A6%96%E5%8C%96/"/>
    
      <category term="mxGraph" scheme="https://future-architect.github.io/tags/mxGraph/"/>
    
  </entry>
  
  <entry>
    <title>Vis Networkで階層グラフを可視化する</title>
    <link href="https://future-architect.github.io/articles/20210303/"/>
    <id>https://future-architect.github.io/articles/20210303/</id>
    <published>2021-03-02T15:00:00.000Z</published>
    <updated>2021-03-05T14:42:05.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、TIG コアテクノロジーユニットの山田です。</p><p>だいぶ前のことですが業務で階層グラフを可視化する機会があったので、<strong>階層グラフの可視化方法</strong> について共有させていただこうと思います。</p><blockquote><p>グラフとは関係を抽象化したもので、線グラフや棒グラフなどのチャートとは異なる概念です。グラフはノードとエッジで表現され、例えばSNSでのつながりを表すソーシャルグラフや関数の呼び出し関係を表すコールグラフなど様々な関係をグラフで表現できます。<br>（詳細は<a href="https://ja.wikipedia.org/wiki/%E3%82%B0%E3%83%A9%E3%83%95_(%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0)" target="_blank" rel="noopener">グラフ (データ構造) - Wikipedia</a>を御覧ください）</p></blockquote><p>グラフの可視化ツールと言えば<a href="https://graphviz.org/" target="_blank" rel="noopener">Graphviz</a>が有名ですが、サーバ側にバイナリ入れてプロセス起動する形になってしまうのでWebアプリでの利用には少し不向きです。</p><p>Webアプリで利用しやすい、JavaScript製のライブラリの代表的なプロダクトは例えば以下があります。</p><table><thead><tr><th></th><th><a href="https://github.com/visjs/vis-network" target="_blank" rel="noopener">vis-network</a></th><th><a href="https://github.com/jsGraph/mxgraph" target="_blank" rel="noopener">mxGraph</a></th><th><a href="https://d3js.org/" target="_blank" rel="noopener">D3.js</a></th><th><a href="https://mermaid-js.github.io/mermaid/#/" target="_blank" rel="noopener">mermaid</a></th></tr></thead><tbody><tr><td>描画方式</td><td>canvas</td><td>SVG</td><td>canvas / SVG</td><td>SVG</td></tr><tr><td>特徴</td><td>高性能</td><td>diagrams.net (旧 draw.io) で使われている</td><td>多機能</td><td>GitLabで標準利用可</td></tr><tr><td>ライセンス</td><td>Apache License 2.0 / MIT License</td><td>Apache License 2.0</td><td>修正BSDライセンス</td><td>MIT License</td></tr></tbody></table><p>この中で、本記事でははVis Networkを用いて階層グラフを表示する方法をご紹介します。</p><p>mxGraphについて<a href="/articles/20210304/">次の記事</a>で紹介する予定ですのでお楽しみに。</p><h2 id="Vis-Networkとは"><a href="#Vis-Networkとは" class="headerlink" title="Vis Networkとは"></a>Vis Networkとは</h2><p>vis.jsという可視化ライブラリに含まれるグラフ可視化ライブラリです。その中でもVis Networkはグラフの可視化に特化したライブラリで、<a href="https://visjs.github.io/vis-network/examples/" target="_blank" rel="noopener">Vis Network Examples</a>にあるように様々なグラフを描画することができます。Vis Networkはcanvasに描画するため描画が高速で、パフォーマンスが要求される場面に有用です。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><h1 id="Vis-Networkの使い方"><a href="#Vis-Networkの使い方" class="headerlink" title="Vis Networkの使い方"></a>Vis Networkの使い方</h1><p>Vis Networkでは表示するグラフの元となるノード、エッジ、オプションを定義する必要があります。</p><h2 id="ノード定義"><a href="#ノード定義" class="headerlink" title="ノード定義"></a>ノード定義</h2><p>下記のようにノードを定義することができます。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nodes = <span class="keyword">new</span> vis.DataSet([</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">label</span>: <span class="string">'1'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">label</span>: <span class="string">'2'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">label</span>: <span class="string">'3'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">label</span>: <span class="string">'4'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">label</span>: <span class="string">'5'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">label</span>: <span class="string">'6'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">label</span>: <span class="string">'7'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">label</span>: <span class="string">'8'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">9</span>, <span class="attr">label</span>: <span class="string">'9'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">'10'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">11</span>, <span class="attr">label</span>: <span class="string">'11'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">label</span>: <span class="string">'12'</span> &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>ノードに設定可能な属性一覧は<a href="https://visjs.github.io/vis-network/docs/network/nodes.html" target="_blank" rel="noopener">vis.js - Nodes documentation.</a>をご参照ください。</p><h2 id="エッジ定義"><a href="#エッジ定義" class="headerlink" title="エッジ定義"></a>エッジ定義</h2><p><code>from</code>, <code>to</code>で指定したノードIDをつなぐエッジを作成します。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> edges = <span class="keyword">new</span> vis.DataSet([</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">1</span>, <span class="attr">to</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">1</span>, <span class="attr">to</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">2</span>, <span class="attr">to</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">2</span>, <span class="attr">to</span>: <span class="number">5</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">3</span>, <span class="attr">to</span>: <span class="number">6</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">3</span>, <span class="attr">to</span>: <span class="number">8</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">6</span>, <span class="attr">to</span>: <span class="number">7</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">6</span>, <span class="attr">to</span>: <span class="number">9</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">4</span>, <span class="attr">to</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">4</span>, <span class="attr">to</span>: <span class="number">11</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">5</span>, <span class="attr">to</span>: <span class="number">12</span> &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>エッジに設定可能な属性一覧は<a href="https://almende.github.io/vis/docs/network/edges.html" target="_blank" rel="noopener">vis.js - Edges documentation.</a>をご参照ください。</p><h2 id="オプション定義"><a href="#オプション定義" class="headerlink" title="オプション定義"></a>オプション定義</h2><p>階層グラフを表示する場合、layoutオプションを指定する必要があります。その際、下記のように<code>sortMethod: &#39;directed&#39;</code>を指定することでグラフの形状から各ノードのレベルを自動計算してくれるので、ライトに可視化したい場合にはこのオプションを使用することをおすすめします。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    layout: &#123;</span><br><span class="line">        hierarchical: &#123;</span><br><span class="line">            sortMethod: <span class="string">'directed'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>オプションに設定可能な属性一覧は<a href="https://almende.github.io/vis/docs/network/" target="_blank" rel="noopener">vis.js - Network documentation.</a>をご参照ください。</p><h2 id="可視化"><a href="#可視化" class="headerlink" title="可視化"></a>可視化</h2><p>上記のノード定義、エッジ定義、オプション定義を元に可視化することができます。実際に可視化した例です。</p><p><img src="/images/20210303/2021-01-19_14h29_14.png" alt=""><br>ソースコードは <a href="https://jsfiddle.net/0bxLo6wt/" target="_blank" rel="noopener">Edit fiddle - JSFiddle - Code Playground</a> にて確認できます。</p><p>これだけでは寂しいので、少しグラフを加工していきましょう。</p><h2 id="ノードの形状"><a href="#ノードの形状" class="headerlink" title="ノードの形状"></a>ノードの形状</h2><p>ノード定義にshape属性を追加することで、ノードにラベルを表示することが出来ます。なお、ここでは紹介しませんでしたが<code>shape: image</code>を指定することで任意の画像を表示することもできます。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nodes = <span class="keyword">new</span> vis.DataSet([</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">label</span>: <span class="string">'1'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">label</span>: <span class="string">'2'</span>, <span class="attr">shape</span>: <span class="string">'database'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">label</span>: <span class="string">'3'</span>, <span class="attr">shape</span>: <span class="string">'box'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">label</span>: <span class="string">'4'</span>, <span class="attr">shape</span>: <span class="string">'text'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">label</span>: <span class="string">'5'</span>, <span class="attr">shape</span>: <span class="string">'triangle'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">label</span>: <span class="string">'6'</span>, <span class="attr">shape</span>: <span class="string">'diamond'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">label</span>: <span class="string">'7'</span>, <span class="attr">shape</span>: <span class="string">'dot'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">label</span>: <span class="string">'8'</span>, <span class="attr">shape</span>: <span class="string">'star'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">9</span>, <span class="attr">label</span>: <span class="string">'9'</span>, <span class="attr">shape</span>: <span class="string">'triangle'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">'10'</span>, <span class="attr">shape</span>: <span class="string">'triangleDown'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">11</span>, <span class="attr">label</span>: <span class="string">'11'</span>, <span class="attr">shape</span>: <span class="string">'hexagon'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">label</span>: <span class="string">'12'</span>, <span class="attr">shape</span>: <span class="string">'square'</span> &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p><img src="/images/20210303/2021-01-19_14h31_46.png" alt=""><br>ソースコードは <a href="https://jsfiddle.net/3nkac917/" target="_blank" rel="noopener">Edit fiddle - JSFiddle - Code Playground</a> にて確認できます。</p><h2 id="tooltip"><a href="#tooltip" class="headerlink" title="tooltip"></a>tooltip</h2><blockquote><p>tooltip（ツールチップ）とは、マウスオーバーした際に表示される枠内の補足説明などのことです。詳細は<a href="https://ja.wikipedia.org/wiki/%E3%83%84%E3%83%BC%E3%83%AB%E3%83%81%E3%83%83%E3%83%97" target="_blank" rel="noopener">こちら</a>の記事などを参考ください。</p></blockquote><p>ノード定義にtitle属性を追加することでtooltipを表示することが出来ます。ドキュメントによるとHTMLを含む文字列を直接セット出来ると書かれていますが、XSS対策<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>のため9.0.0からできなくなっています。</p><p>tooltipでHTMLを表示したい場合は<a href="https://visjs.github.io/vis-network/examples/network/other/popups.html" target="_blank" rel="noopener">Vis Network | Other | Popups</a>のように HTML Element を直接セットする必要があります。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nodes = <span class="keyword">new</span> vis.DataSet([</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">label</span>: <span class="string">'1'</span>, <span class="attr">title</span>: <span class="string">'tooltip\ntest'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">label</span>: <span class="string">'2'</span>, <span class="attr">shape</span>: <span class="string">'database'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">label</span>: <span class="string">'3'</span>, <span class="attr">shape</span>: <span class="string">'box'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">label</span>: <span class="string">'4'</span>, <span class="attr">shape</span>: <span class="string">'text'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">label</span>: <span class="string">'5'</span>, <span class="attr">shape</span>: <span class="string">'triangle'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">label</span>: <span class="string">'6'</span>, <span class="attr">shape</span>: <span class="string">'diamond'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">label</span>: <span class="string">'7'</span>, <span class="attr">shape</span>: <span class="string">'dot'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">label</span>: <span class="string">'8'</span>, <span class="attr">shape</span>: <span class="string">'star'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">9</span>, <span class="attr">label</span>: <span class="string">'9'</span>, <span class="attr">shape</span>: <span class="string">'triangle'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">'10'</span>, <span class="attr">shape</span>: <span class="string">'triangleDown'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">11</span>, <span class="attr">label</span>: <span class="string">'11'</span>, <span class="attr">shape</span>: <span class="string">'hexagon'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">label</span>: <span class="string">'12'</span>, <span class="attr">shape</span>: <span class="string">'square'</span> &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p><img src="/images/20210303/2021-01-19_14h34_43.png" alt=""><br>ソースコードは <a href="https://jsfiddle.net/rg50c2jh/" target="_blank" rel="noopener">Edit fiddle - JSFiddle - Code Playground</a> にて確認できます。</p><h2 id="イベント"><a href="#イベント" class="headerlink" title="イベント"></a>イベント</h2><p><code>on</code>メソッドで指定したイベントを処理するCallbackを登録することが出来ます。<br>下記のサンプルではクリックしたノードの<code>color</code>属性を変更します。</p><p><img src="/images/20210303/%E3%83%8E%E3%83%BC%E3%83%89%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88.gif" alt=""><br>ソースコードは <a href="https://jsfiddle.net/hu2kts5y/" target="_blank" rel="noopener">Edit fiddle - JSFiddle - Code Playground</a> にて確認できます。</p><p>イベント一覧は <a href="https://almende.github.io/vis/docs/network/#Events" target="_blank" rel="noopener">vis.js - Network documentation.</a> に記載されています。<br>イベント発生時に渡されるパラメータの中身を確認したり、実際にイベント発生させて試したい場合は <a href="https://visjs.github.io/vis-network/examples/network/events/interactionEvents.html" target="_blank" rel="noopener">Vis Network | Events | Interaction events</a> がおすすめです。</p><h2 id="dot言語からのインポート"><a href="#dot言語からのインポート" class="headerlink" title="dot言語からのインポート"></a>dot言語からのインポート</h2><p>Vis NetworkではGephiからエクスポートしたデータやdot言語をインポートすることができます。今回は私が先日Graphvizを用いて可視化したグラフ<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>をVis Networkで表示してみます。</p><p><img src="/images/20210303/%E5%90%8D%E7%A7%B0%E6%9C%AA%E8%A8%AD%E5%AE%9A2.png" alt=""></p><p>ソースコードは <a href="https://jsfiddle.net/kon2cL8r/10/" target="_blank" rel="noopener">Edit fiddle - JSFiddle - Code Playground</a> にて確認できます。</p><p>Graphvizほど洗練されたレイアウトにはなりませんが、非常に簡単にdot言語をインポートすることができました。</p><p>※ 上記画像ではVis Networkのノードやエッジのラベルが読み取れない状態になっていますが、Canvas上で拡大することでラベルを読み取ることが出来ます</p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>開発中にバージョンアップしたときに何も表示されなくなる不具合<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>に遭遇したことがありました。このようなわかりやすい不具合ならまだいいですが、細かいところで挙動が変わってしまっている可能性もあるのでバージョンアップの際には十分な検証が必要かなと思います。（どのソフトウェアにも言えることではありますが…）</p><h1 id="課題"><a href="#課題" class="headerlink" title="課題"></a>課題</h1><p>当初Vis Networkを使用していましたが、大きめの階層グラフを表示するとエッジの交差が非常に多くなってしまうことがわかりました。例えば下図はこれまでサンプルとして表示していたグラフにオレンジのエッジを一本追加しただけなのですが、エッジの交差が必要以上に多くなってしまっています。</p><p><img src="/images/20210303/2021-01-21_10h44_39.png" alt=""></p><p>ソースコードは <a href="https://jsfiddle.net/2801wrud/2/" target="_blank" rel="noopener">Edit fiddle - JSFiddle - Code Playground</a> にて確認できます。</p><p>私の所属しているプロジェクトでは比較的大きな階層グラフを表示する必要があり、この課題を解消するためmxGraphに乗り換えました。mxGraphではこのようにエッジの交差を減らすことができます。</p><p><img src="/images/20210303/image_(4).png" alt=""></p><p>次回の記事ではmxGraphをご紹介いたします。</p><ul><li>続きの記事も<a href="/articles/20210303/">こちら</a>に公開されました。併せて確認してもらえると嬉しいです！</li></ul><p>階層グラフのレイアウト問題そのものに興味がある方は <a href="http://www.orsj.or.jp/archive2/or63-1/or63_1_20.pdf" target="_blank" rel="noopener">階層グラフの可視化</a> などを見ると楽しめるかなと思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>vis.jsを使い、ライトに階層グラフを表示・加工出来ることがわかりました。残念ながら私達の用途には合いませんでしたが、適切なシーンで使用すればとても有用なライブラリだと思います。</p><p>コアテクノロジーユニットでは、現在チームメンバーを募集しています。興味がある方はお気軽に技術ブログTwitterや会社採用HPへ、連絡をお待ちしております。</p><p><a href="https://www.future.co.jp/recruit/" target="_blank" rel="noopener">https://www.future.co.jp/recruit/</a></p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200901/index.html" data-iframely-url="//cdn.iframe.ly/MB3R2AH?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200203/index.html" data-iframely-url="//cdn.iframe.ly/J3rUEhc?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">フューチャー発のOSSであるCheetah Gridも高速に描画するためにcanvasを使用しています。興味がある方は<a href="https://future-architect.github.io/articles/20200901/">Vue.jsで最速に始めるCheetah Grid | フューチャー技術ブログ</a>や<a href="https://future-architect.github.io/articles/20200924/">CheetahGrid+Vue.jsをエンプラで使ってみた | フューチャー技術ブログ</a>を御覧ください</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="https://github.com/visjs/vis-network/pull/1275" target="_blank" rel="noopener">fix(xss)!: don't set popup content via innerHTML by Thomaash · Pull Request #1275 · visjs/vis-network · GitHub</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="https://qiita.com/tanzaku/items/d21ce5c61505a8710fbe#%E8%A7%A3%E6%9E%90%E7%B5%90%E6%9E%9C-%E3%81%9D%E3%81%AE3%E3%82%A8%E3%83%B3%E3%83%89%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%AE%E3%83%8E%E3%83%BC%E3%83%89%E3%82%92%E8%BF%BD%E5%8A%A0" target="_blank" rel="noopener">Goでコールグラフを自作してみた - Qiita</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="https://github.com/visjs/vis-network/issues/183" target="_blank" rel="noopener">None of the examples work on 6.2.0? · Issue #183 · visjs/vis-network · GitHub</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして、TIG コアテクノロジーユニットの山田です。&lt;/p&gt;
&lt;p&gt;だいぶ前のことですが業務で階層グラフを可視化する機
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
      <category term="vis.js" scheme="https://future-architect.github.io/tags/vis-js/"/>
    
      <category term="可視化" scheme="https://future-architect.github.io/tags/%E5%8F%AF%E8%A6%96%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Auth0でADをユーザDBにし、SalesforceとのSSOを確認する</title>
    <link href="https://future-architect.github.io/articles/20210302/"/>
    <id>https://future-architect.github.io/articles/20210302/</id>
    <published>2021-03-01T15:00:00.000Z</published>
    <updated>2021-03-08T02:20:27.602Z</updated>
    
    <content type="html"><![CDATA[<p>エンタープライズの領域ではAD認証が多く利用されており、また同時にCRMとしてSalesforceが導入されているケースが多くあります。<br>この場合、社内システムにおける「統合認証」の要件として、これらを繋げてログインする必要が出てきます。</p><p>これらの要求に対応するため、以下2点を確認し、Active Directory（以降AD）を中心とした統合認証を試してみます。</p><ol><li>Auth0のApplicationsでAD認証ができることを確認</li><li>SalesforceのSSO機能を利用し、Auth0経由でAD認証かつSSOができることを確認</li></ol><h1 id="Auth0とは？"><a href="#Auth0とは？" class="headerlink" title="Auth0とは？"></a>Auth0とは？</h1><img src="/images/20210222/top.png" class="img-middle-size"><p><a href="https://future-architect.github.io/articles/20200122/">Auth0導入編</a>をぜひ参照ください。他にも<a href="https://future-architect.github.io/tags/Auth0/">Auth0関連</a>の記事があります。</p><h1 id="Auth0に「Active-Directory-LDAP」Connectorを追加"><a href="#Auth0に「Active-Directory-LDAP」Connectorを追加" class="headerlink" title="Auth0に「Active Directory / LDAP」Connectorを追加"></a>Auth0に「Active Directory / LDAP」Connectorを追加</h1><h3 id="設定追加"><a href="#設定追加" class="headerlink" title="設定追加"></a>設定追加</h3><p><code>メニュー　-&gt; Connections -&gt; Enterprise -&gt; Active Directory / LDAP -&gt; CREATE CONNECTION</code><br>メニューからConnectorを追加し、今回は2つのオプションを有効にしています</p><ul><li>Use Windows Integrated Auth (Kerberos)<br>Auth0はWindows統合認証（Kerberos認証）に対応しており、WindowsでAD認証でログインしており、かつ <code>IP Ranges</code> のIPでログインすると認証をスキップできます。  </li><li>Sync user profile attributes at each login<br>こちらはシンプルに認証時に最新のプロファイルをADから取得できる設定となっています。</li></ul><img src="/images/20210302/スクリーンショット_2021-02-24_10.03.37.png"  style="border:solid 1px #000000"><h1 id="ADサーバーの設定"><a href="#ADサーバーの設定" class="headerlink" title="ADサーバーの設定"></a>ADサーバーの設定</h1><h3 id="Connector設定確認"><a href="#Connector設定確認" class="headerlink" title="Connector設定確認"></a>Connector設定確認</h3><p>追加済みのConnectorより、「Setup」タブを確認し <code>Ticket Url</code> を控えておきます。<br><strong>この<code>Ticket Url</code>がADサーバーの設定に必要となります。</strong></p><img src="/images/20210302/スクリーンショット_2021-02-24_10.06.35.png"  style="border:solid 1px #000000"><h3 id="ADサーバーにAD-LDAP-Connectorをインストール"><a href="#ADサーバーにAD-LDAP-Connectorをインストール" class="headerlink" title="ADサーバーにAD LDAP Connectorをインストール"></a>ADサーバーにAD LDAP Connectorをインストール</h3><p><a href="https://auth0.com/docs/extensions/ad-ldap-connector/install-configure-ad-ldap-connector">インストール手順</a>を参考に、ウィザードに従ってインストールしてください。<br>インストール時に前述の手順で控えた<code>Ticket Url</code>が必要になります。</p><h3 id="AD-LDAP-Connectorの設定を変更"><a href="#AD-LDAP-Connectorの設定を変更" class="headerlink" title="AD LDAP Connectorの設定を変更"></a>AD LDAP Connectorの設定を変更</h3><p>Auht0らしく、AD LDAP Connectorの設定をスクリプトで変更できる部分があります。<br>ProfileMapper（ADのユーザプロファイルとAuth0のユーザプロファイルのマッピング）のタブが、スクリプトで記載できる設定になっており、今回は詰められる情報を最大まで詰めてみました。<br>ここで設定したプロファイルがログイン時にAuth0に送信される情報となります。</p><img src="/images/20210302/スクリーンショット_2020-09-11_17.49.51.png"  style="border:solid 1px #000000"><h3 id="ADとAuth0が接続できていることを確認"><a href="#ADとAuth0が接続できていることを確認" class="headerlink" title="ADとAuth0が接続できていることを確認"></a>ADとAuth0が接続できていることを確認</h3><p>Auth0側の<code>Connections</code>の表示が、<code>Offline</code>から<code>Online</code>に変化します。</p><img src="/images/20210302/スクリーンショット_2020-09-11_9.36.28.png"  style="border:solid 1px #000000"><h1 id="Applicationsでログイン確認"><a href="#Applicationsでログイン確認" class="headerlink" title="Applicationsでログイン確認"></a>Applicationsでログイン確認</h1><h3 id="Applicationsの設定変更"><a href="#Applicationsの設定変更" class="headerlink" title="Applicationsの設定変更"></a>Applicationsの設定変更</h3><h3 id="ApplicationsでConnectionsを有効化"><a href="#ApplicationsでConnectionsを有効化" class="headerlink" title="ApplicationsでConnectionsを有効化"></a>Applicationsで<code>Connections</code>を有効化</h3><p>Applicationsの設定で<code>Connections</code>タブを開き、設定済みのADを有効化します。</p><img src="/images/20210302/スクリーンショット_2021-02-22_18.59.51.png"  style="border:solid 1px #000000"><h3 id="ログインを確認"><a href="#ログインを確認" class="headerlink" title="ログインを確認"></a>ログインを確認</h3><p>サンプルアプリケーションを利用し、ログイン後のプロファイルを確認します。<br>ここで、ADで設定済みのプロファイルが見えれば連携成功です。</p><img src="/images/20210302/スクリーンショット_2020-09-11_15.33.11.png"  style="border:solid 1px #000000"><h3 id="プロファイルが取れるか確認"><a href="#プロファイルが取れるか確認" class="headerlink" title="プロファイルが取れるか確認"></a>プロファイルが取れるか確認</h3><p>Auth0のRulesでプロファイルの取得を入れ込み、結果を見ます。</p><img src="/images/20210302/スクリーンショット_2020-09-11_17.59.05.png"  style="border:solid 1px #000000"><p>ADサーバーのAD LDAP Connectorで指定した情報が取れていることがわかります。<br>なお、ここまで確認できればAuth0上でユーザ情報を自由に扱えそうだと判断できます。<br>例えば、ログイン時にADからユーザ情報を透過的に移行するなどの対応も考えられます。</p><p><img src="/images/20210302/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-09-11_15.38.32.png" alt=""></p><p><img src="/images/20210302/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-09-11_15.38.48.png" alt=""></p><h1 id="Salesforceの外部認証にAuth0を設定"><a href="#Salesforceの外部認証にAuth0を設定" class="headerlink" title="Salesforceの外部認証にAuth0を設定"></a>Salesforceの外部認証にAuth0を設定</h1><h3 id="Salesforceのアカウント準備"><a href="#Salesforceのアカウント準備" class="headerlink" title="Salesforceのアカウント準備"></a>Salesforceのアカウント準備</h3><p>SSOの前提として、Auth0のドメイン設定を行う必要があります。</p><h3 id="Salesforce側にADとSSOさせたいユーザを作成"><a href="#Salesforce側にADとSSOさせたいユーザを作成" class="headerlink" title="Salesforce側にADとSSOさせたいユーザを作成"></a>Salesforce側にADとSSOさせたいユーザを作成</h3><p><strong>SalesforceのSSOでは、Salesforce側に事前にSSOしたユーザの登録が必要です。</strong><br>また、SSOさせる場合にSalesforceのユーザとADのユーザで、SSOに利用する属性情報を一致させる必要があります。<br>とはいえ、Auth0のログイン画面を使う場合、ADとSalesforceで一致させる属性はEmailが最善です。<br>今回はこの青枠ユーザをSSOで利用します。</p><img src="/images/20210302/スクリーンショット_2021-02-22_19.33.57.png"  style="border:solid 1px #000000"><h3 id="Saleforceのドメイン設定"><a href="#Saleforceのドメイン設定" class="headerlink" title="Saleforceのドメイン設定"></a>Saleforceのドメイン設定</h3><p><a href="https://help.salesforce.com/articleView?id=sf.domain_name_overview.htm&type=5">SSOにはドメイン設定が必要になるため、設定しておきます。</a><br>ここでAuth0に移ります。</p><h3 id="auth0にSalesforce用のSSO設定を追加"><a href="#auth0にSalesforce用のSSO設定を追加" class="headerlink" title="auth0にSalesforce用のSSO設定を追加"></a>auth0にSalesforce用のSSO設定を追加</h3><p><code>SSO Integrations</code>から<code>CREATE SSO INTEGRATION</code>を選択し、SalesforceのSSO設定を追加します<br>Salesforce側のドメインが必要になるので、<a href="https://auth0.com/docs/protocols/saml-configuration-options/configure-salesforce-as-saml-identity-provider">Auth0の設定ページ</a>を確認しつつSalesforceから情報を取得してください。</p><img src="/images/20210302/スクリーンショット_2021-02-22_18.59.24.png"  style="border:solid 1px #000000"><p>Salesforceのドメインに<code>https://</code>をつけたものが<code>Entity ID</code>になります。</p><img src="/images/20210302/スクリーンショット_2021-02-22_18.59.45.png"  style="border:solid 1px #000000"><p>追加設定として、認証先をADに変更します。</p><img src="/images/20210302/スクリーンショット_2021-02-22_18.59.51_2.png"  style="border:solid 1px #000000"><p>ここで、Salesforceに移ります。</p><h3 id="SaleforceのSSO設定追加"><a href="#SaleforceのSSO設定追加" class="headerlink" title="SaleforceのSSO設定追加"></a>SaleforceのSSO設定追加</h3><p>メニューの<code>ID-&gt;シングルサインオン設定</code>を選択し、<code>新規</code>から接続設定を作ります。</p><p><img src="/images/20210302/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-02-22_19.09.12.png" alt=""></p><p>Auth0のSalesforce設定ページにチュートリアルページあるので、手順に従い必須項目を埋めます。<br><code>IDはattribute要素にあります</code>を選択し、<code>email</code>を入力することを忘れないでください。<br>設定した<code>email</code>が、ADとSalesforceでSSOさせるユーザの一致属性となります。</p><img src="/images/20210302/スクリーンショット_2021-02-22_19.44.06.png"  style="border:solid 1px #000000"><h3 id="SSOの確認"><a href="#SSOの確認" class="headerlink" title="SSOの確認"></a>SSOの確認</h3><p>これでようやく設定完了です。<br>追加したSSOのログインボタンが現れますので、自ドメインの認証画面からSSOユーザでログインしてください。</p><p><img src="/images/20210302/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-09-14_12.52.42.png" alt=""></p><p>ログインできれば成功です。<br>お疲れ様でした。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="padding-bottom: 35.9551%; padding-top: 120px;"><a href="https://future-architect.github.io/articles/20210222/index.html" data-iframely-url="//cdn.iframe.ly/MKovoVl"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200123/index.html" data-iframely-url="//cdn.iframe.ly/6rr8LwH?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;エンタープライズの領域ではAD認証が多く利用されており、また同時にCRMとしてSalesforceが導入されているケースが多くあります。&lt;br&gt;この場合、社内システムにおける「統合認証」の要件として、これらを繋げてログインする必要が出てきます。&lt;/p&gt;
&lt;p&gt;これらの要求に
      
    
    </summary>
    
    
      <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
      <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
      <category term="Salesforce" scheme="https://future-architect.github.io/tags/Salesforce/"/>
    
      <category term="SSO" scheme="https://future-architect.github.io/tags/SSO/"/>
    
      <category term="ActiveDirectory" scheme="https://future-architect.github.io/tags/ActiveDirectory/"/>
    
  </entry>
  
  <entry>
    <title>【登壇しました】アレクサアプリを開発してみたら中々大変だった話</title>
    <link href="https://future-architect.github.io/articles/20210301/"/>
    <id>https://future-architect.github.io/articles/20210301/</id>
    <published>2021-02-28T15:00:00.000Z</published>
    <updated>2021-03-01T01:30:46.331Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p><a href="https://future-architect.github.io/articles/20210226/">澁川さん記事</a>と同じく2/25の<a href="https://nodejs.connpass.com/event/203464/" target="_blank" rel="noopener">東京Node学園</a>で発表させていただきました。</p><script async class="speakerdeck-embed" data-id="65008f9c75ad473096207bda6809b69f" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><h2 id="Alexaスキルを作ってみた"><a href="#Alexaスキルを作ってみた" class="headerlink" title="Alexaスキルを作ってみた"></a>Alexaスキルを作ってみた</h2><p><a href="https://www.amazon.co.jp/dp/B08W1XTQVF/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&dchild=1&keywords=%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E4%BC%9A%E8%AD%B0&qid=1612535863&s=digital-skills&sr=1-1" target="_blank" rel="noopener">リモート会議リマインダー</a>というAlexaスキルを開発しました。<br><img src="/images/20210301/image.png" alt=""></p><blockquote><p>リモート会議に特化したリマインダーです、会議時刻を話すと10分前と1分前にリマインダーをセットしてくれます。</p></blockquote><p>是非使っていただけると嬉しいです。<br>その際に得た知見を共有するものとして発表させていただきました。</p><h2 id="発表内容"><a href="#発表内容" class="headerlink" title="発表内容"></a>発表内容</h2><p>体験談のスタイルをとりつつ、Alexaスキルの仕組み、開発の流れを簡単に説明しました。<br>詳細についてはぜひスライドを読んでいただければと思います。<br><a href="https://www.youtube.com/watch?v=BnRMmzBbu-M" target="_blank" rel="noopener">動画アーカイブ</a>でも発表の内容を確認できます。</p><h2 id="何が大変だったのか"><a href="#何が大変だったのか" class="headerlink" title="何が大変だったのか"></a>何が大変だったのか</h2><p><img src="/images/20210301/image_2.png" alt=""></p><p><img src="/images/20210301/image_3.png" alt=""></p><p>理解しておくべきトピックが多いため、うまく動かない場合の原因の切り分けに苦労するのがAlexaスキル開発の特徴です。<br>マイナー、ないし先進的なジャンルの開発ではよくあることですが、調べても有益な情報が出てこない事が開発の難易度を大きく上げているかなと感じました。<br>今後もノウハウを共有していくことができればと思います。</p><h2 id="東京Node学園の今後"><a href="#東京Node学園の今後" class="headerlink" title="東京Node学園の今後"></a>東京Node学園の今後</h2><p>本イベントは今後もリモート開催を続けていく予定です。</p><p>イベント情報は<a href="https://nodejs.connpass.com/" target="_blank" rel="noopener">conpass</a>で確認できます、次回の開催が楽しみですね。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210226/index.html" data-iframely-url="//cdn.iframe.ly/ZMlnZ2M?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200907/index.html" data-iframely-url="//cdn.iframe.ly/qWUf2Wl?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20210226/&quot;&gt;澁川さん記事&lt;/a&gt;と同じく2/25の&lt;a href=&quot;https://nodejs.connpass.co
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Node.js" scheme="https://future-architect.github.io/tags/Node-js/"/>
    
      <category term="Alexa" scheme="https://future-architect.github.io/tags/Alexa/"/>
    
      <category term="VUI" scheme="https://future-architect.github.io/tags/VUI/"/>
    
  </entry>
  
  <entry>
    <title>アクセシビリティ情報を使った壊れにくいE2Eテスト</title>
    <link href="https://future-architect.github.io/articles/20210226/"/>
    <id>https://future-architect.github.io/articles/20210226/</id>
    <published>2021-02-25T15:00:00.000Z</published>
    <updated>2021-03-06T12:53:51.820Z</updated>
    
    <content type="html"><![CDATA[<p>2/25の<a href="https://nodejs.connpass.com/event/203464/">東京Node学園</a>で発表してきました。</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vShjxNOc81VhSwY5vDmH2pY6Opc05ZJuY3aemnQ0dmLc10ppBYxJYfKK9DcHLVxp_dQ0u6FUgaL_I_o/embed?start=false&loop=false&delayms=3000" frameborder="0" width="100%" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><p>E2Eテストはみんなしていますか？正直言うと、僕はあんまり好きじゃなかったです。お仕事では他の人が入れてくれたものが回っていたりしますが。前職で、SikuliXを使って社内向けのデスクトップアプリケーションのE2Eテストにトライしたことがあるんですが、すぐに壊れて動かなくなるので、費用対効果が出せなくてあきらめました（一人プロジェクトだったのもあります）。</p><ul><li>絵でマッチングを行うのでボタン画像をいっぱいスクショをとっていく必要がある</li><li>OCR機能はOSネイティブボタンの背景のグラデーションとかとの相性もあってあまりうまくいかず・・・自分で学習させるのも情報が少なかった。</li><li>ちょっとツールバーに新しいボタンを追加したりすると、絵が変わって動作しなくなる</li><li>ボタンを画像で置くが、QtはOSごとにネイティブなルック＆フィールで描画するので、macOS用に書いたテストがWindowsで失敗する。両対応は2倍大変</li><li>macOSはDPIの違いがあっても常に二倍の解像度でスクリーンショットが取得できる(これをダウンスケールして表示してるみたい）ので問題が出にくいが、WindowsはDPI違いで取れるスクリーンショットの解像度が変わるので違うマシンで実行すると動かなくなる</li><li>多言語化しても死ぬ</li></ul><p>SikuliXをはじめとしたE2EテストのフレームワークはRPAみたいな自動化を後付けするのと同じような技術セットなので、すでに完成したアプリケーションに対して自動化をしたい、みたいな用途であればつまずく回数も減ってよかったのかもしれませんが、開発しながら利用するとメンテ工数が無限に消費されてしまいます。有名どころのGUIフレームワークに対応したfroglogic社の<a href="https://www.froglogic.com/squish/">Squish</a>を使うと良かったのかもしれませんが、一人プロジェクトの社内ツール向けに稟議をあげるのはちょっと難易度が高い価格。</p><p>この気持ちはいつか克服しないとな、と思っていたところで、この技術ブログで枇榔さんの記事でCypressを知って試してみました。Vue.jsのプロジェクトであれば、プロジェクト作成の時にオプションで入れられますし、自分で入れるとしてもnpm一発でインストールというのが良いですね。導入が面倒というのだけでもプロジェクトで統一的に使うときに放置されがちなので。</p><ul><li><a href="https://future-architect.github.io/articles/20200115/">打鍵テストをCIで回す：Cypress on GitHub Actions</a></li></ul><h1 id="ここがよかったCypress"><a href="#ここがよかったCypress" class="headerlink" title="ここがよかったCypress"></a>ここがよかったCypress</h1><p>インストールの容易性、CIへの組み込みのしやすさなどは上記のエントリーでも十分に語られています。動画やスクリーンショットを残してくれたりするところも良いですし、テストランナーがそれぞれのシーケンスの途中経過を全て残してくれて、問題の分析がしやすいところも良いです。</p><p>「使いやすいテストランナー」はサーバー通信の記録も全て残してくれます。それだけではなく、モック機能を使って読み書きをハックすることも可能です。現在は裏のサーバーはDockerで認証のKeycloak、AWSエミュレータのlocalstackともども起動してE2Eテストしていますが、それでもテストしにくい部分はそのうちチャレンジしてみたいですね。</p><h1 id="E2EテストはDOMのテストじゃない"><a href="#E2EテストはDOMのテストじゃない" class="headerlink" title="E2EテストはDOMのテストじゃない"></a>E2EテストはDOMのテストじゃない</h1><p>いくつか不満はあります。環境設定でたくさんディレクトリとかファイルを置く必要があるもののそのサポートがない（vue-cliで作ったテンプレートから引っこ抜くのが一番楽）だったり（cypress init欲しいissueはあった）、Electron対応が途中で放棄されていたりとか・・・</p><p>一番大きいところは、やはりDOMを意識したテストにならざるを得ないという点ですね。<br>基本的にはSeleinumとかと同等で、タグのツリーをたどってテストする感じです。SikuliXの画像でやるよりは壊れにくいのですが、E2Eテストは「機能」のテストであって、DOMの単体テストではないはず。</p><p>人間がウェブサイトを見るときは「よしログインボタンを押そう」と判断しているわけで、「ヘッダーの中のclass=”login”な最初のDOM要素を探してきてクリックイベントを発行しよう」と思っているわけではなく、このギャップがE2Eテストの見通しの悪さに繋がっているんじゃないかと常々思っており、テストケースはもっと抽象的であるべき、と思っていて、「これはなんか違う」と思っていました。SikuliXの画像とかを大量に用意するテストよりははるかに情報量（バイト数）は少なく済むものの、まだまだ情報は圧縮されるべき。</p><p>E2Eテストは、人間以外の別のエージェントがブラウザ経由でウェブサイトを利用する、というユースケースです。で、本物のウェブサイトをブラウザの上から扱うエージェントというのがすでにあります。スクリーンリーダーです。じゃあ、アクセシビリティ情報を利用してテストを書けばより抽象度が高く、シンプルでわかりやすくて壊れにくいテストになるんじゃないかと思ったわけです。で作ってみました。</p><p>これを考えているときにたまたま読んでいたのが<a href="https://amzn.to/3aA6ZLz">ウェブアクセシビリティ</a>の本でした。視覚障害者の人たちが使うスクリーンリーダーとE2Eテストのテストランナーは似ており、ブラウザを操作するエージェントがいて、ユーザーはそれを操作します。スクリーンリーダー向けにメタ情報を提供するWAI-ARIAの拡張属性をE2Eテストでも活用すれば、E2Eテストの抽象度をあげることができるのではないかと考えました。</p><p><img src="/images/20210226/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-02-21_20.26.25.png" alt=""></p><h1 id="WAI-ARIAとは"><a href="#WAI-ARIAとは" class="headerlink" title="WAI-ARIAとは"></a>WAI-ARIAとは</h1><p>HTMLはどんどんデザインの比率が上がってきており、タグ=意味の構造、CSS=デザインという本来の役割を守り切るのは難しく、UIデザインのためにdivタグやらspanタグを追加することはよくあるでしょう。そのようなデザイン重視のウェブサイトを、本来のセマンティックHTMLに近づける属性がWAI-ARIAです。ウェブサイトにアクセシビリティを導入する一連のタグ属性やルールなどです。</p><p>視覚障害者が利用するスクリーンリーダーは例えるなら、CSSを全部オフにした状態でウェブサイトを閲覧するようなものだと思います（僕は利用してないので想像ですが）。タグ構造にデザイン用の要素が満載なこの時代に、スクリーンリーダーというブラウザを外から操作する機械向けにいろいろな情報を教えてあげるルールを規定するのがWAI-ARIAです。</p><p>本来は<code>&lt;button&gt;</code>タグとテキストで表現されれば何も問題はないのですが、画像を使ったり、<code>&lt;div&gt;</code>タグを使ったりすることもあります。本来の役割（<code>role</code>）と、役割に対するラベル（<code>aria-label</code>）をあとから付与できます。これ以外にも、<code>aria-selected</code>（選択されていることを示す）とか<code>aria-hidden</code>（視覚要素でスクリーンリーダーからは隠したい要素）とか、さまざまな属性が定義されています。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>異議あり<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;異議あり&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span>意義あり<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;異議あり&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;objection.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">&quot;button&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;objection.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;異議あり&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">&quot;objection-label&quot;</span>&gt;</span>異議あり<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">aria-labelledby</span>=<span class="string">&quot;objection-label&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;objection.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="実装してみたCypressプラグイン"><a href="#実装してみたCypressプラグイン" class="headerlink" title="実装してみたCypressプラグイン"></a>実装してみたCypressプラグイン</h1><p>WAI-ARIAでは単に「ボタン」と表現されていても、↑のように実際のDOMの表現はさまざまです。それぞれごとにバリエーションを網羅してあげる必要があります。こんな感じでロールと名前を使って該当する要素をとってくるライブラリを作りました。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.aria(<span class="string">&#x27;button.異議あり&#x27;</span>).click();</span><br></pre></td></tr></table></figure><p>一瞬業務コードに入れて使ってみましたが、かなり便利でした。<a href="https://gitlab.com/osaki-lab/cypress-aria">リポジトリを作って</a>、button, textbox, slider, radio, checkbox, linkあたりのロールに対応し、これからもっと増やすぞ、と思っていた時に事件は起こりました。</p><h1 id="Testing-Library"><a href="#Testing-Library" class="headerlink" title="Testing Library"></a>Testing Library</h1><p>実用的に使える機能を作り上げて、会社のGLとかにこんなの作ったぞ、と自慢した一週間後に、ほぼ同じようなことをするライブラリを見つけました。</p><p><img src="/images/20210226/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-02-21_11.13.43.png" alt=""></p><p><a href="https://testing-library.com/">https://testing-library.com/</a></p><p>これはDOMに対して要素を探し出したり、イベントを起動するというライブラリです。jQueryからDOMの編集機能を取っ払った感じですが、アクセシビリティの情報を使ってDOM要素をピックアップできます。このライブラリは多彩なアダプターがあり、ReactやReact Native、Vue.jsのユニットテストもできそうです。Enzyme + JSDOMみたいな感じで使えそうです。まだ使っていないけど今後使ってみたい。</p><p>このアダプターの1つにCypressアダプターがあります。いろいろコマンドが提供されていますが、<code>findByRole()</code>だけでほぼ済む気がします。というかこれしか使ってない。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.findByRole(<span class="string">&quot;button&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;意義あり&quot;</span> &#125;).click();</span><br></pre></td></tr></table></figure><p>この書き方で、前述のどのタグにでもヒットします。<code>aria-labelledby</code>はなんかヒットしたりしなかったり不安定ですが・・・</p><h1 id="Cypress-Testing-Library導入の効果"><a href="#Cypress-Testing-Library導入の効果" class="headerlink" title="Cypress + Testing Library導入の効果"></a>Cypress + Testing Library導入の効果</h1><p>かつて一世を風靡したかもしれないCucumberほどではないけど、ほぼほぼDSLのようなレベルになっていると思います。”button”とか”dialog”とロール名を書くところで、TypeScriptのコード補完が効かなかったのですが、<a href="https://github.com/testing-library/cypress-testing-library/pull/173">型定義ファイルに対してpull request送って</a>、それがマージされた新バージョンがすでにリリースされていますので、今はゴキゲンにテストが書けます。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cy.findByRole(<span class="string">&quot;button&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;編集&quot;</span> &#125;).click();</span><br><span class="line">cy.findByRole(<span class="string">&quot;dialog&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;ユーザー名編集&quot;</span>).should(<span class="string">&quot;exist&quot;</span>);</span><br><span class="line">cy.findByRole(<span class="string">&quot;textbox&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;ユーザー名入力&quot;</span>).type(<span class="string">&quot;yosuke furukawa&quot;</span>);</span><br><span class="line">cy.findByRole(<span class="string">&quot;button&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;保存&quot;</span> &#125;).click();</span><br><span class="line">cy.findByRole(<span class="string">&quot;cell&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;ユーザー名&quot;</span> &#125;).should(<span class="string">&quot;have.value&quot;</span>, <span class="string">&quot;yosuke furukawa&quot;</span>);</span><br></pre></td></tr></table></figure><p>Cypressの中にはjQueryが内蔵されており、多種多様なセレクターが使えます。jQuery、最近は蛇蝎のごとく嫌われている風潮もありますが、便利で広く使われていた裏返しではあると思いますし、DOMを変更したりしないで文字通りクエリーのために使うにはいまだに便利です。Cypressもまさにその使い方です。</p><p>ただし、単にjQueryを使うだけではなく、SPA固有の挙動に最初から対応しており、ほとんどのケースで「処理待ち」のウェイトを入れなくても、タイムアウト（デフォルト4秒）するまで自動リトライしてくれるようになっていて、時間跨ぎのコードにもかかわらず、awaitなどを書かなくても良いし、時間稼ぎもしなくてよいAPIになっています。テストコードの中にワークアラウンドが顔を出してくるようなことがあまりなく（ゼロではないですが）、これもテストの見通しのよさに寄与しています。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.findByRole(<span class="string">&quot;button&quot;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;異議あり&quot;</span> &#125;).click();</span><br><span class="line">   <span class="comment">// ↑ボタンが見つかるまで自動リトライ</span></span><br><span class="line">                                            <span class="comment">// ↑見つかったら初めて実行</span></span><br></pre></td></tr></table></figure><h1 id="テストのTips"><a href="#テストのTips" class="headerlink" title="テストのTips"></a>テストのTips</h1><h2 id="アクセシビリティ属性が必要なことをきちんと伝える"><a href="#アクセシビリティ属性が必要なことをきちんと伝える" class="headerlink" title="アクセシビリティ属性が必要なことをきちんと伝える"></a>アクセシビリティ属性が必要なことをきちんと伝える</h2><p>ウェブのデザインとフロントエンドのコーディングで担当を分けて行うことも多いでしょう。デザイナーの人には「アクセシビリティの情報は消さないで！」「なるべくセマンティックHTMLにして！」と伝えた方が良いですね。</p><p>マウスオーバーでCSSのみでふわっとボタンがポップアップしてくるテクニックはJSを使うよりもクールな気がします。また、テキストをCSSで差し込むとかもよくやるテクニックですね。しかし、アクセシビリティを考えると要注意です。Cypressでも:hoverで出てくる要素の存在テストってできないので。きっとスクリーンリーダーも苦手なんじゃないかと。</p><p>このあたりはデザインロールの人と丁寧にやっていく必要がありそうな気がします。</p><h2 id="最初に存在チェックのテストを書く"><a href="#最初に存在チェックのテストを書く" class="headerlink" title="最初に存在チェックのテストを書く"></a>最初に存在チェックのテストを書く</h2><p>存在チェックのテストをまず書いておくと、テストコードを書く速度があがります。</p><p>まず、このテストが通ることで、セレクターが間違ってないことが確認できます。「宣言的」は宣言が間違っていたときのフィードバックが弱いことが多いです。まず要素一覧を確認するテストがあると、実際に動くテストを書こうとして、期待通りに動かなかった場合の問題追跡がしやすくなります。指差し呼称ですね。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&quot;コンソールに必要な要素がある&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.findByRole(<span class="string">&#x27;button&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;ディバイディングドライバー射出&quot;</span> &#125;).should(<span class="string">&#x27;exist&#x27;</span>)</span><br><span class="line">  cy.findByRole(<span class="string">&#x27;button&#x27;</span>, &#123; <span class="attr">name</span>: <span class="string">&quot;ファイナルフュージョン承認&quot;</span> &#125;).should(<span class="string">&#x27;exist&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>あと、登場人物がすべてリストアップされていると、挙動のテストを書くときに、ここに書かれている要素をコピーして書けば良いので楽ですね。</p><p>なお、あとで使うからといって変数に入れても正しくは動きません。</p><h2 id="ホットスポットのロールをどうするか"><a href="#ホットスポットのロールをどうするか" class="headerlink" title="ホットスポットのロールをどうするか"></a>ホットスポットのロールをどうするか</h2><p>サーバーからとってきた動的な値を表示するテキストって、DOM上は単なるテキストなのでロールを持っていないのですよね。テスト上はここにロールがあって要素取得できるととても助かる。</p><p>次のどちらかな、と思っているのですが、どちらの方がスクリーンリーダーユーザーにとって自然なロール指定のかはちょっとわかってません。とりあえず前者にしています。</p><ul><li>role=”cell”でテーブルのようにしてしまう</li><li>role=”textbox”で読み込み専用テキストボックスにする</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="comment">/* role=cellでアクセス */</span> &#125;</span><br><span class="line">&lt;div role=<span class="string">&quot;cell&quot;</span>&gt;&#123;userName&#125;&lt;/div&gt;</span><br><span class="line">&#123; <span class="comment">/* role=textboxでアクセス */</span> &#125;</span><br><span class="line">&lt;input readonly&gt;&#123;userName&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>E2Eのテストコードは、「もっと短く表現できるはず」と昔から考えていましたが、それに近いものがCypress + Testing Libraryで実現できました。</p><p>アクセシビリティは、直接人間に対して効果を発揮するわけではなく、人間を補助するエージェントへの情報を増やすことで、結果的に人間を助ける、というのが今のウェブのアクセシビリティです。その特性はE2Eテストにも恩恵があります。</p><p>極端な例をあげれば、ボタンの名前が維持されれば、ボタンの位置がヘッダーにあろうが、サイドバーにあろうが、テストは壊れないのですよね。そのぐらい抽象度があげやすくなります。今まで、「E2Eテストは書く手間が大きく、なおかつ壊れやすく、コストパフォーマンスが悪い」と思っていましたが、だいぶ心理的な負担は下がり、最初からやっておけば、と思うようになりました。</p><p>当初は40分ぐらい発表できるネタとして考えていましたが、発表希望者多数により10分となってしまい、発表もだいぶ駆け足になってしまいました。後日、フューチャーの社外向け勉強会の<a href="https://future.connpass.com/">Future Tech Night</a>で改めて、Cypressについて初心者でもわかるように説明できれば、と思って企画中です。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200115/index.html" data-iframely-url="//cdn.iframe.ly/uGST3JI?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2/25の&lt;a href=&quot;https://nodejs.connpass.com/event/203464/&quot;&gt;東京Node学園&lt;/a&gt;で発表してきました。&lt;/p&gt;
&lt;iframe src=&quot;https://docs.google.com/presentation/d/e
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
      <category term="Cypress" scheme="https://future-architect.github.io/tags/Cypress/"/>
    
      <category term="E2Eテスト" scheme="https://future-architect.github.io/tags/E2E%E3%83%86%E3%82%B9%E3%83%88/"/>
    
      <category term="HTML" scheme="https://future-architect.github.io/tags/HTML/"/>
    
      <category term="accessibility" scheme="https://future-architect.github.io/tags/accessibility/"/>
    
  </entry>
  
  <entry>
    <title>DynamoDBから効率的に大量のデータを取得する方法</title>
    <link href="https://future-architect.github.io/articles/20210225/"/>
    <id>https://future-architect.github.io/articles/20210225/</id>
    <published>2021-02-24T15:00:00.000Z</published>
    <updated>2021-03-02T02:20:30.215Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20210225/title.png" alt=""></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニット所属の村上です。<br>最近データ分析絡みでDynamoDBを触る機会が多く、DynamoDBが体の一部みたいになってきました。<br>本記事の結論はこれです。</p><p><strong>大量に取得したいデータに共通して存在する値の属性をGSIとして設定しよう</strong></p><p>予備知識から順に解説していきます。</p><h1 id="ScanとQuery"><a href="#ScanとQuery" class="headerlink" title="ScanとQuery"></a>ScanとQuery</h1><p>DynamoDBにはScanとQueryという操作が存在します。それぞれ簡単に説明すると、以下のようになります。</p><ul><li>Scan：DB全体を取得する操作</li><li>Query：指定した属性に指定した値を持つデータのみを抽出して取得する操作</li></ul><p>取得したいデータがDBに存在するほとんど全てのデータであれば、Scanで取得するのが効率的なのですが、必ずしもそのような状況であるとは限りません。Queryによって、特定の値を持つデータのみを取得したい場合もあると思います。</p><p>今回は後者の場合を想定し、Queryによって特定の値を持つ大量のデータを効率的に取得する方法について解説します。</p><h1 id="DynamoDBの制限"><a href="#DynamoDBの制限" class="headerlink" title="DynamoDBの制限"></a>DynamoDBの制限</h1><p>DynamoDBから効率的にデータを取得するにあたり、DynamoDBに存在する制限を知っておかなければなりません。今回対象とするQuery操作には、<code>1度のQuery操作での取得サイズ上限は1MB</code>という制限が存在します。詳しくは<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/Query.html" target="_blank" rel="noopener">公式ドキュメント</a>をご覧ください。</p><p>この制限を超えるサイズのデータを取得する場合、Query操作を繰り返し行うことによって全てのデータを取得することになります。従って、大量のデータを取得する場合は1回当たりのQueryで上限の1MBをしっかりと使い切ることが、効率的なデータの取得につながります。</p><h1 id="GSI（グローバル・セカンダリ・インデックス）を工夫する"><a href="#GSI（グローバル・セカンダリ・インデックス）を工夫する" class="headerlink" title="GSI（グローバル・セカンダリ・インデックス）を工夫する"></a>GSI（グローバル・セカンダリ・インデックス）を工夫する</h1><p>DynamoDBから特定の条件を満たすデータを大量に取得する場合は、GSIを工夫することが重要となります。これについて順に解説していきます。</p><h2 id="GSIの特徴"><a href="#GSIの特徴" class="headerlink" title="GSIの特徴"></a>GSIの特徴</h2><p>GSIには重複が許されるという特徴があります。実際にDBを操作しながら見ていきたいと思います。</p><p>今回の実験では最近愛用している<code>NoSQL Workbench</code>というアプリを使います。これはクラウドやローカルのDynamoDBをGUIで操作、可視化できるツールで、AWS公式から配布されています。ダウンロードは<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/workbench.settingup.html" target="_blank" rel="noopener">こちら</a>。</p><h3 id="パーティションキーとソートキー"><a href="#パーティションキーとソートキー" class="headerlink" title="パーティションキーとソートキー"></a>パーティションキーとソートキー</h3><p>DynamoDBにはパーティションキーとソートキーという概念があります。GSIのパーティションキー、ソートキーと呼び方を区別するために、本記事ではプライマリパーティションキー、プライマリソートキーと呼ぶことにします。<br>基本的にはこれらの値の組み合わせが重複することは許されません。例えば以下のような設定と内容のテーブルに対してこれらが重複したデータを追加しようとしたらどうなるか試してみます。</p><h4 id="テーブル設定"><a href="#テーブル設定" class="headerlink" title="テーブル設定"></a>テーブル設定</h4><table><thead><tr><th align="center">データ項目</th><th align="center">キー</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">PK</td></tr><tr><td align="center">name</td><td align="center">SK</td></tr><tr><td align="center">brand</td><td align="center">GSI PK</td></tr><tr><td align="center">process</td><td align="center">GSI SK</td></tr></tbody></table><p>※PK：パーティションキー、SK：ソートキー</p><h4 id="テーブル内容"><a href="#テーブル内容" class="headerlink" title="テーブル内容"></a>テーブル内容</h4><img src="/images/20210225/image.png" style="border:solid 1px #000000"><h4 id="実験"><a href="#実験" class="headerlink" title="実験"></a>実験</h4><p>既存のデータと同じキー値</p><ul><li>id：003</li><li>name：3800X</li></ul><p>に対して、brandだけ違う値にしてPutItem操作を実行してみます。</p><img src="/images/20210225/image_2.png" style="border:solid 1px #000000"><p>PutItem操作実行後のテーブルの様子です。データ数は変わらず、同じキー値を持つデータが<code>上書き</code>されています。</p><img src="/images/20210225/スクリーンショット_2021-02-14_173302.png" style="border:solid 1px #000000"><p>このように、プライマリパーティションキーとプライマリソートキーの同じ組み合わせに対する重複は許されておらず、同じキー値でデータを追加しようとすると、そのデータが<code>上書き</code>されます。</p><h3 id="GSIのパーティションキーとソートキー"><a href="#GSIのパーティションキーとソートキー" class="headerlink" title="GSIのパーティションキーとソートキー"></a>GSIのパーティションキーとソートキー</h3><p>一方GSIのパーティションキーとソートキーの組み合わせに対しては、重複が許されています。従って、先ほどのテーブルで1行目と2行目のデータのbrandとprocessは全く同じですが、brand、processをそれぞれGSIのパーティションキー、ソートキーに設定しても、片方のデータが消えることはありません。テーブル設定に記載の通り、すでにこれらのGSI設定は適用済みです。</p><p>ここにさらにbrandとprocessが重複するデータを追加してみたいと思います。</p><img src="/images/20210225/スクリーンショット_2021-02-14_174037.png" style="border:solid 1px #000000"><p>PutItem操作実行後のテーブルの様子です。データが<code>上書き</code>されることなく、<code>追加</code>されている様子が確認できると思います。</p><img src="/images/20210225/image_3.png" style="border:solid 1px #000000"><h2 id="GSIの大量データ取得への応用"><a href="#GSIの大量データ取得への応用" class="headerlink" title="GSIの大量データ取得への応用"></a>GSIの大量データ取得への応用</h2><p>以上の実験により、以下のことがわかりました。</p><ul><li>プライマリパーティションキー、プライマリソートキーの組み合わせの重複は許されない</li><li>GSIパーティションキー、GSIソートキーの組み合わせの重複は許される</li></ul><p>これらの性質より、<strong>大量に取得したいデータに共通して存在する値の属性をGSIとして設定する</strong>ことで、欲しいデータをごっそり取得することが可能となります。<br>実際にこの性質を利用してQueryしてみたいと思います。<br>GSIパーティションキーである<code>brand</code>に<code>Intel</code>、GSIソートキーである<code>process</code>に<code>14nm</code>を指定します。</p><img src="/images/20210225/image_4.png" style="border:solid 1px #000000"><p>Query操作の実行結果です。</p><img src="/images/20210225/image_5.png" style="border:solid 1px #000000"><p>指定した値を持つデータを1発で全て取得することができました。</p><p>今回の例ではそもそものデータ数が少ないため、1度のQueryで目的のデータを全て取得できましたが、実際には大量のデータを取得することを想定していますので、冒頭で説明したQueryの1MB制限に引っ掛かることが前提となります。よって、Queryを繰り返し行って目的のデータを全て取得することになります。この時、1MB制限を上限いっぱいまで使うことができるため、効率的であると言えます。</p><h2 id="備考"><a href="#備考" class="headerlink" title="備考"></a>備考</h2><p>そもそもプライマリパーティションキー、プライマリソートキー自体が「大量に取得したいデータに共通して存在する値の属性」であれば問題ないのですが、一般的にDynamoDBでプライマリパーティションキーとプライマリソートキーをこのような観点から設計することはあまりないと思います。また、GSIは後から追加することができるという拡張性の高さからも、GSIの工夫が重要となります。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回はDynamoDBから特定のデータを効率的に大量に取得する方法について解説しました。</p><p>他にも「こんな方法があるよ」などのご意見ありましたら是非教えていただけると嬉しいです！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://future-architect.github.io/articles/20201130/">DynamoDBのページング</a></li><li><a href="https://future-architect.github.io/articles/20200818/">【入門】私を苦しめたDynamoDB</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20210225/title.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="データ分析" scheme="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90/"/>
    
      <category term="DynamoDB" scheme="https://future-architect.github.io/tags/DynamoDB/"/>
    
  </entry>
  
  <entry>
    <title>GCPで構築するサーバーレスデータレイク①</title>
    <link href="https://future-architect.github.io/articles/20210224/"/>
    <id>https://future-architect.github.io/articles/20210224/</id>
    <published>2021-02-23T15:00:00.000Z</published>
    <updated>2021-03-06T08:55:50.664Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GCPで構築するサーバーレスデータレイク①"><a href="#GCPで構築するサーバーレスデータレイク①" class="headerlink" title="GCPで構築するサーバーレスデータレイク①"></a>GCPで構築するサーバーレスデータレイク①</h1><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIG中神です。</p><p>GCPで構築するサーバーレスデータレイクの連載第1弾の記事となります。GCPでデータレイクを構築する場合のポイントについて連載形式でご紹介していければと思います。</p><h2 id="データレイクとは"><a href="#データレイクとは" class="headerlink" title="データレイクとは"></a>データレイクとは</h2><p>まずはデータレイクがどのようなものなのか整理していきましょう。</p><h3 id="データレイクとは？"><a href="#データレイクとは？" class="headerlink" title="データレイクとは？"></a>データレイクとは？</h3><p>そもそもデータレイクとはどのような定義になるでしょうか。</p><p>Wikipediaでは<a href="https://ja.wikipedia.org/wiki/データレイク" target="_blank" rel="noopener">データレイク</a>は以下のように定義されていますね。</p><blockquote><p>データレイク (Data lake) は構造化/非構造化データやバイナリ等のファイル含めたデータを一元的に格納するデータリポジトリ。<br>一般的に、データレイクはレポート、可視化、分析、機械学習に利用されるエンタープライズのデータのコピーや返還後のデータを一カ所に集約する。<br>データレイクはリレーショナルデータベースの構造化データ（列と行）や、半構造化データ（CSV、ログ、XML、JSON）、非構造化データ（Eメール、ドキュメント、PDF）、バイナリデータ（画像、音声、映像）を含めることができる。<br>適切に管理されておらず、ユーザが意図するデータへのアクセシビリティが低く、小さな価値しか提供できない低品質のデータレイクはデータの沼と表現される。</p></blockquote><p>その他、主要なクラウドベンダーも以下のように定義しています。<br><a href="https://cloud.google.com/solutions/data-lake?hl=ja" target="_blank" rel="noopener">(GCP) データレイクのモダナイゼーション</a><br><a href="https://aws.amazon.com/jp/big-data/datalakes-and-analytics/what-is-a-data-lake/" target="_blank" rel="noopener">(AWS) データレイクとは - Amazon Web Services (AWS)</a><br><a href="https://azure.microsoft.com/ja-jp/solutions/data-lake/" target="_blank" rel="noopener">(Azure) Data Lake | Microsoft Azure</a></p><p>各引用元の内容を要約すると以下のような特徴が浮かび上がってきます。<br>これらの条件を満たすものをデータレイクとして位置づけることが出来ると思います。</p><ul><li>構造化データ、半構造化データ、非構造化データなどデータのフォーマットに関わらず一元的にデータを保存する。</li><li>保存したデータは分析、機械学習など様々な用途で利用される。</li><li>データマートやデータウェアハウスとはアプローチが異なる。</li></ul><h4 id="データレイクで管理されるデータ群"><a href="#データレイクで管理されるデータ群" class="headerlink" title="データレイクで管理されるデータ群"></a>データレイクで管理されるデータ群</h4><table><thead><tr><th align="left">データ種別</th><th align="left">例</th></tr></thead><tbody><tr><td align="left">構造化データ</td><td align="left">RDBMS、CSVなどの行列データ</td></tr><tr><td align="left">半構造化データ</td><td align="left">XML、JSONなど</td></tr><tr><td align="left">非構造化データ</td><td align="left">画像、音声、映像やPDFデータなど</td></tr></tbody></table><h3 id="データレイクアプローチ"><a href="#データレイクアプローチ" class="headerlink" title="データレイクアプローチ"></a>データレイクアプローチ</h3><p>データレイクの特徴の一つに「データマートやデータウェアハウスとはアプローチが異なる」というものがありましたが具体的にはどのような事なのか記載します。</p><p>データレイクの検討を進めるにあたり大きな考え方として、トップダウン的な考え方とボトムアップ的な考え方の2種類があるのでご紹介します。</p><p><img src="/images/20210224/image.png" alt=""></p><h4 id="それぞれのアプローチによる違い"><a href="#それぞれのアプローチによる違い" class="headerlink" title="それぞれのアプローチによる違い"></a>それぞれのアプローチによる違い</h4><ul><li>トップダウン的なアプローチの特徴<ul><li>企画時点で利用目的がはっきりしており、要件や目的に基づいて具体化していく。</li><li>半面、用途がはっきりしている分アドホックな作りになり拡張性が損なわれやすいリスクもあり。</li><li>企画時点で第3者に導入効果を説明しやすい。</li><li>要件や目的に基づいて具体化するため導入効果が早めに出やすい。</li></ul></li><li>ボトムアップ的なアプローチの特徴<ul><li>企画時点でどのようにデータ活用するか明確ではないため、まずはデータ収集して観察や仮説に基づき具体化していく。</li><li>半面、検討に正解がないため品質や利用価値の低いデータレイク（泥沼化）となるリスクもある。</li><li>企画時点で第3者に導入効果を説明しにくい。</li><li>運用の中でPoCや拡張を継続的に行って検証していく必要があるため導入効果が出るまで時間がかかる。</li></ul></li></ul><h4 id="どちらかのアプローチが望ましいのか？"><a href="#どちらかのアプローチが望ましいのか？" class="headerlink" title="どちらかのアプローチが望ましいのか？"></a>どちらかのアプローチが望ましいのか？</h4><p>アプローチとしてはどちらも正しいと言えます。ただし、企画時点の状況や最終的な目標をどこに置くのかによって柔軟にアプローチを変化させる必要があると考えます。<br>例えば、特定の利用に限定したDWHやデータマートで十分なのであればアドホックなシステムとしてトップダウンアプローチで検討していけばいいと思いますし、幅広いデータを保存するデータレイクを検討したいのであればボトムアップアプローチで検討を進めていければいいと思います。</p><p>ただ、現実的には下記で言う真ん中のパターン（ハイブリッド）が多いと思いますので、それぞのアプローチの特性や、将来像などを加味してバランスを取りながら検討を進めていく事が重要であると考えます。</p><ul><li>トップダウン的なアプローチが適している<ul><li>特定の利用に限定したDWHやデータマートで十分</li></ul></li><li>トップダウンとボトムアップアプローチのハイブリッドが適している<ul><li>企画時点では特定の利用限定で大丈夫だが最終的にはデータレイクとして拡張していきたい</li></ul></li><li>ボトムアップ的なアプローチが適している<ul><li>幅広いデータを保存するデータレイクを検討したい</li></ul></li></ul><h2 id="データレイクのシステム化"><a href="#データレイクのシステム化" class="headerlink" title="データレイクのシステム化"></a>データレイクのシステム化</h2><p>前置きが長くなりましたが、上記のような検討を経て、実際にどのようにシステム化するかというところですがデータレイクの特性上、どの程度のデータ量を扱うのか？どの程度のクエリが実行されるのか？あらかじめ定義することが難しいので拡張性の高いクラウドプラットフォームを活用していく事が基本的な方針になるかと思います。</p><p>その中でもGoogle Cloud Platform（以下、GCP）を使うと、比較的容易にさらにサーバーレスでデータレイクを構築することができるため小規模・低コストで進めて徐々に規模を拡大していきたいような要望の場合は特に適しているのではないかと思います。</p><h3 id="データレイクのサービスレベル"><a href="#データレイクのサービスレベル" class="headerlink" title="データレイクのサービスレベル"></a>データレイクのサービスレベル</h3><p>また、サーバーレスでデータレイクを構築していくにおいても、通常のシステムと同じようにどの程度のサービスレベルで提供するかという検討が非常に重要になります。内容はいわゆる非機能の定義とほぼ同じですが、データレイクで特に重要なポイントとしては以下のようなところがあげられます。</p><ul><li>可用性<ul><li>システムの重要度（データレイク停止による業務影響など）、サービス継続性、メンテンナス時間の確保</li><li>BCP対策の有無、バックアップなど</li></ul></li><li>性能/拡張性<ul><li>可能な限りオートスケール構成とする</li><li>おおよその処理量やデータ量の見込みをたてる（処理量やデータ量を明確に定義することは難しいが可能な範囲で）</li><li>利用するプロダクトの制約・制限の把握など</li></ul></li><li>セキュリティ<ul><li>企業や業界で準拠すべき規約やルール、個人情報の取り扱い有無、インターネットアクセスなど</li></ul></li><li>運用性<ul><li>監視、認証など既存のシステムとの連携</li><li>データレイク導入後のデータ追加や利用者追加などの運用作業項目や運用体制の確立</li><li>運用作業は極力汎化してシンプルなものにしておくなど（特定業務向けの作業や人依存になるような運用は避ける）</li></ul></li></ul><h3 id="データレイクの構成要素"><a href="#データレイクの構成要素" class="headerlink" title="データレイクの構成要素"></a>データレイクの構成要素</h3><p>それでは次にデータレイクを構成するためにどのような要素が必要なのか見ていきましょう。</p><p>以下はGoogleの<a href="https://services.google.com/fh/files/misc/principles_best_practices_for_data-governance.pdf?hl=ja" target="_blank" rel="noopener">Principles and best practices for data governance in the world</a>でも使用されている概念でGartner社により定義されたデータガバナンスのフレームワーク（Gartner, Applying Effective Data Governance to Secure Your Data Lake, Sanjeev Mohan, April 17, 2018）です。</p><p><img src="/images/20210224/image_2.png" alt=""></p><p>それぞれの要素で必要になる機能は概ね以下のようなところでしょうか。<br>これらをGCPのプロダクトを使って構成していく事になります。</p><table><thead><tr><th align="left">構成要素</th><th align="left">機能群</th></tr></thead><tbody><tr><td align="left">Ingestion</td><td align="left">取り込み</td></tr><tr><td align="left">Data Discovery and Curation</td><td align="left">収集、分類、履歴、準備、品質管理</td></tr><tr><td align="left">Data Management</td><td align="left">データ管理、メタデータ管理、カタログ管理、マスタデータ管理、アーカイブ管理、品質管理</td></tr><tr><td align="left">Data Privacy, Security and Access Management</td><td align="left">データセキュリティ、物理的セキュリティ、暗号化、アクセス管理、監査</td></tr><tr><td align="left">Consumption</td><td align="left">利用</td></tr></tbody></table><h3 id="GCPを用いたデータレイク"><a href="#GCPを用いたデータレイク" class="headerlink" title="GCPを用いたデータレイク"></a>GCPを用いたデータレイク</h3><p>これらのことを踏まえてGCPでデータレイクを構築する場合、以下のようなプロダクトの組み合わせで実現可能です。<br>特殊な要件がない限りはサーバーレスで実現可能ですので、インフラもコード化による構成管理がしやすい状態を保てると思います。<br>また、データマートやデータ分析はGCP以外の場所で行うといったようにマルチクラウドな構成に柔軟に発展させることも可能です。<br>※特殊な機能やカスタマイズが必要な場合は仮想サーバーやコンテナが必要になることもあります。</p><p>以下は、<a href="https://cloud.google.com/solutions/smart-analytics?hl=ja" target="_blank" rel="noopener">Google Cloud スマート アナリティクス ソリューション</a>で定義されているGCPのデータ分析関連のプロダクトになります。<br><img src="/images/20210224/image_3.png" alt=""></p><p>プロダクトの選択肢はいろいろありますが、データレイク関連で特に注目したいプロダクトの概要やポイントを以下に記載します。<br>※一部、上記の図に記載されていないプロダクトもあります。</p><ul><li><strong><a href="https://cloud.google.com/data-catalog?hl=ja" target="_blank" rel="noopener">Data Catalog</a></strong><ul><li>フルマネージドでスケーラビリティの高いデータ検出およびメタデータ管理サービス</li><li>構造化データ、半構造化データ、非構造化データに対するメタデータ（テクニカル、ビジネスメタデータ）の管理やタグ付けが可能</li><li>DLPとの連携で個人情報に対するタグ付けも可能</li></ul></li><li><strong><a href="https://cloud.google.com/data-fusion?hl=ja" target="_blank" rel="noopener">Cloud Data Fusion</a></strong><ul><li>フルマネージドでクラウドネイティブなデータをあらゆる規模で統合可能</li><li>GUIでETL/ELTパイプラインの作成およびデプロイが可能</li><li>OSSのCDAPがベースであり互換性がある</li><li>事前構成されたライブラリ群を利用してGUIでパイプラインを作成可能</li><li>パイプラインはDataprocで実行される</li><li>パイプラインの中でGCS、BigQueryはもちろん、AWS、Azure、Snowflakeなど外部サービスと連携する事も可能</li></ul></li><li><strong><a href="https://dataform.co/" target="_blank" rel="noopener">Dataform</a></strong><ul><li>DWH内のSQLベースの変換処理の順次実行定義が可能</li><li>Googleのプロダクト以外にもAWS Redshift、Snowflake、Azure SQL Data Warehouseなどに対しても利用することが可能</li></ul></li><li><strong><a href="https://cloud.google.com/dlp?hl=ja" target="_blank" rel="noopener">Cloud Data Loss Prevention</a></strong><ul><li>機密性の高いデータを検出、分類、保護するためのフルマネージドサービス</li><li>個人情報を含むデータを自動検出してマスクすることも可能</li><li>Cloud KMSなどと組み合わせて柔軟な鍵管理を行う事も可能</li></ul></li><li><strong><a href="https://cloud.google.com/storage?hl=ja" target="_blank" rel="noopener">Cloud Storage</a></strong><ul><li>高耐久でスケーラブルなオブジェクトストレージ</li><li>バケット単位でクラス、ライフサイクル、アクセス権限を設定することができ、データを層で管理したい場合に有用</li></ul></li><li><strong><a href="https://cloud.google.com/bigquery?hl=ja" target="_blank" rel="noopener">BigQuery</a></strong><ul><li>サーバーレスでスケーラビリティと費用対効果に優れたマルチクラウド データウェアハウス</li><li>ANSI SQL を使用してペタバイト規模のデータを極めて高速に分析可能</li><li>柔軟性の高いマルチクラウド分析ソリューションで、AWSなどクラウドをまたいだデータによる分析が可能</li><li>また、カラム単位でアクセス制御など細かい単位でアクセス制御を行うことが可能</li></ul></li><li><strong><a href="https://cloud.google.com/looker?hl=ja" target="_blank" rel="noopener">Looker</a></strong><ul><li>ビジネス インテリジェンス、データ アプリケーション、組み込み型アナリティクス向けのエンタープライズプラットフォーム</li><li>データへのアクセスポイントを一元化することで保存データ利用におけるガバナンスを利かせることが可能</li><li>Google Cloud、AWS、Azure、オンプレミスのデータベースなど分散されたデータを統合的に管理することも可能</li></ul></li></ul><h3 id="リファレンスアーキテクチャ（ミニマム構成）と構成ポイント"><a href="#リファレンスアーキテクチャ（ミニマム構成）と構成ポイント" class="headerlink" title="リファレンスアーキテクチャ（ミニマム構成）と構成ポイント"></a>リファレンスアーキテクチャ（ミニマム構成）と構成ポイント</h3><p>これらのGCPプロダクトを用いたリファレンスアーキテクチャを以下に記載します。</p><p>記載するアーキテクチャはミニマム構成となりますので、必要に応じてカスタマイズする事を前提とした構成になります。また、構成のパターンとしては大きくETLモデルとELTモデルに分かれますので状況に応じて使い分けることを想定しています。</p><h4 id="ETLモデル"><a href="#ETLモデル" class="headerlink" title="ETLモデル"></a>ETLモデル</h4><p>Extract（抽出） Transform（変換） Load（書き出し）を行うモデル。</p><p>データ収集後に、各種変換を行ってからデータベースに格納するモデル。<br>半構造化や非構造化データがある場合に適したモデル。</p><p><img src="/images/20210224/image_4.png" alt=""></p><h4 id="ELTモデル"><a href="#ELTモデル" class="headerlink" title="ELTモデル"></a>ELTモデル</h4><p>Extract（抽出） Load（書き出し）Transform（変換）を行うモデル。<br>データ収集後に、データベースに格納しデータベース上で各種変換等を行うモデル。<br>構造化データのみ扱う場合やSQLのみで加工や変換が完結する場合に適したモデル。</p><p><img src="/images/20210224/image_5.png" alt=""></p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>いかがでしたでしょうか？</p><p>GCPを用いると比較的容易にデータレイクの構築ができるので、本来の目的であるデータ活用に重きを置いた検討が出来るのではと思います。今後もデータレイクの構成要素（データ収集、データ管理、データセキュリティ、データ利用）毎に、より詳細な部分を記事化していければと考えています。（不定期）</p><p>特にボトムアップ的なアプローチとなる場合は、泥沼化させずにどうデータを運用管理していくか？といった部分が非常に重要になってきますのでそのようなポイントに触れるような感じで記事化できればと思っています。</p><h2 id="参考資料"><a href="#参考資料" class="headerlink" title="参考資料"></a>参考資料</h2><p><strong>[Google資料]</strong></p><ul><li><a href="https://cloud.google.com/solutions/data-lake?hl=ja" target="_blank" rel="noopener">データレイクのモダナイゼーション</a></li><li><a href="https://cloud.google.com/solutions/build-a-data-lake-on-gcp/?hl=ja" target="_blank" rel="noopener">データレイクとしてのCloud Storage</a></li><li><a href="https://cloud.google.com/solutions/smart-analytics?hl=ja" target="_blank" rel="noopener">Google Cloud スマート アナリティクス ソリューションでイノベーションを促進する</a></li><li><a href="https://services.google.com/fh/files/misc/principles_best_practices_for_data-governance.pdf?hl=ja" target="_blank" rel="noopener">Principles and best practices for data governance in the world</a></li><li><a href="https://cloud.google.com/storage?hl=ja" target="_blank" rel="noopener">Cloud Storage</a></li><li><a href="https://cloud.google.com/data-catalog?hl=ja" target="_blank" rel="noopener">Data Catalog</a></li><li><a href="https://cloud.google.com/data-fusion?hl=ja" target="_blank" rel="noopener">Cloud Data Fusion</a></li><li><a href="https://cloud.google.com/dlp?hl=ja" target="_blank" rel="noopener">Cloud Data Loss Prevention</a></li><li><a href="https://cloud.google.com/bigquery?hl=ja" target="_blank" rel="noopener">BigQuery</a></li><li><a href="https://cloud.google.com/looker?hl=ja" target="_blank" rel="noopener">Looker</a></li><li><a href="https://dataform.co/" target="_blank" rel="noopener">Dataform</a></li></ul><p>以下は参照するためにユーザー登録が必要なります。</p><ul><li><a href="https://cloudonair.withgoogle.com/events/solution-data-analytics?talk=analytics-session1-2" target="_blank" rel="noopener">Google Cloud Smart Analytics ソリューションの方向性と最新アップデート情報</a></li><li><a href="https://cloudonair.withgoogle.com/events/solution-data-analytics?talk=analytics-session2-2" target="_blank" rel="noopener">GCP のデータパイプライン サービスの紹介と選び方</a></li><li><a href="https://cloud.withgoogle.com/next/sf/sessions?gate=true&session=DA100-JP#data-analytics" target="_blank" rel="noopener">Google Cloudでデータレイクを構築</a></li></ul><p><strong>[その他資料]</strong></p><ul><li><a href="https://ja.wikipedia.org/wiki/データレイク" target="_blank" rel="noopener">データレイク - Wikipedia</a></li><li><a href="https://aws.amazon.com/jp/big-data/datalakes-and-analytics/what-is-a-data-lake/" target="_blank" rel="noopener">(AWS) データレイクとは - Amazon Web Services (AWS)</a></li><li><a href="https://azure.microsoft.com/ja-jp/solutions/data-lake/" target="_blank" rel="noopener">(Azure) Data Lake | Microsoft Azure</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;GCPで構築するサーバーレスデータレイク①&quot;&gt;&lt;a href=&quot;#GCPで構築するサーバーレスデータレイク①&quot; class=&quot;headerlink&quot; title=&quot;GCPで構築するサーバーレスデータレイク①&quot;&gt;&lt;/a&gt;GCPで構築するサーバーレスデータレイク①&lt;/
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="データレイク" scheme="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%AC%E3%82%A4%E3%82%AF/"/>
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="設計" scheme="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/"/>
    
      <category term="要件定義" scheme="https://future-architect.github.io/tags/%E8%A6%81%E4%BB%B6%E5%AE%9A%E7%BE%A9/"/>
    
  </entry>
  
  <entry>
    <title>Auth0で認証成功後に任意のWebページを表示させたい</title>
    <link href="https://future-architect.github.io/articles/20210222/"/>
    <id>https://future-architect.github.io/articles/20210222/</id>
    <published>2021-02-21T15:00:00.000Z</published>
    <updated>2021-03-08T02:19:43.454Z</updated>
    
    <content type="html"><![CDATA[<p>TIG DX-Unit の先山です。</p><p><a href="https://auth0.com/jp/">Auth0</a> を使ってアプリを構築しています。とある案件で、ユーザがログインした後に任意のページを表示させたいニーズがありました。こういった時はアプリ側でやってあげれなくもないのですが、複数のアプリが Auth0 で認証している場合には、アプリの数だけ改修が発生してしまいます。今回は context.redirect という Auth0 のユニークな機能を使って、改修を最小限に抑える方法を紹介します。</p><h1 id="Auth0とは？"><a href="#Auth0とは？" class="headerlink" title="Auth0とは？"></a>Auth0とは？</h1><img src="/images/20210222/top.png" class="img-middle-size"><p><a href="https://future-architect.github.io/articles/20200122/">Auth0導入編</a>をぜひ参照ください。他にも<a href="https://future-architect.github.io/tags/Auth0/">Auth0関連</a>の記事があります。</p><h1 id="context-redirect-機能紹介"><a href="#context-redirect-機能紹介" class="headerlink" title="context.redirect 機能紹介"></a>context.redirect 機能紹介</h1><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>Auth0 はユーザが認証成功時に任意の JavaScript スクリプトを実行する Rules を提供しています。引数の context に redirect パラメータをセットすることで、任意のWebページに画面遷移することが可能です。本来であれば redirect_uri にリダイレクトしてアプリケーションへ戻るのですが、その前に1つユーザアクションを介入させることができます。</p><p><a href="https://auth0.com/docs/rules/redirect-users">Auth0公式ドキュメント - Redirect Users From Within Rules</a></p><p>全然関係ない URL にリダイレクトさせちゃうと、認証できなくなっちゃうんじゃないの？と思われるかもしれませんが。リダイレクト先にはクエリパラメータで <code>state=&#123;ハッシュ値&#125;</code> が渡されます。この値を Auth0 側で管理しています。認証を再開するには Auth0テナントのドメインに <code>/continue?state=&#123;ハッシュ値&#125;</code> という形式で画面遷移します。</p><h2 id="実装時の注意点"><a href="#実装時の注意点" class="headerlink" title="実装時の注意点"></a>実装時の注意点</h2><p>注意するべき点を紹介します。</p><ul><li>全ての Rules は2回実行されます。「context.redirect によってリダイレクトされる前」と「リダイレクトから戻ってきた後」の合計2回です。各 Rules が何度起動しても問題ないような実装をしましょう。</li><li>ある Rules で context.redirect にパラメータをセットしても、その Rules 終了後にリダイレクトが発生するわけではありません。全ての Rules の実行が終わってから context の中身が評価されリダイレクトが発生します。</li><li>context.redirect が有効なのは認証1回につき1度のみです。リダイレクトから戻ってきた後は、認証成功とともに callback_uri でアプリケーションへ戻ります。</li></ul><h2 id="ユースケース"><a href="#ユースケース" class="headerlink" title="ユースケース"></a>ユースケース</h2><p>Auth0 のドキュメントではユーザにパスワード更新を促す例が紹介されています。有効期限が短いトークンをクエリパラメータ経由で渡していますね。このやり方であればトークンが必要なAPIサーバとの通信もできますね。勉強になりました。これ以外にも、例えば利用規約の更新をユーザに表示させたい場合などにも使えそうです。</p><p><a href="https://auth0.com/docs/rules/redirect-users#force-password-change-example">https://auth0.com/docs/rules/redirect-users#force-password-change-example</a></p><h1 id="サンプル実装"><a href="#サンプル実装" class="headerlink" title="サンプル実装"></a>サンプル実装</h1><p>ログイン画面で ID/Pass を入力成功した後、ある画面へ遷移させてユーザアクションを求め、ユーザがその画面で承諾しないと認証成功しないといったサンプルを実装します。Auth0 が提供する <a href="https://github.com/auth0-samples/auth0-vue-samples/tree/master/01-Login">Vueのサンプル実装</a>を改造します。</p><h2 id="処理のフロー"><a href="#処理のフロー" class="headerlink" title="処理のフロー"></a>処理のフロー</h2><ul><li>アプリがログイン画面を開くいてログインを試行する</li><li>ログインが成功したら指定した localhost:3000/consent（以降、確認画面と呼びます）へリダイレクトして表示させる</li><li>確認画面でユーザが “Yes” をクリックしたら再び Auth0 の認証処理を再び実行させ、認証成功してアプリへ戻る</li><li>“Yes” と回答したユーザは、次回以降のログインではその確認はせず、認証を成功させる</li><li>（もし確認画面で “No” をクリックした場合は認証エラーにする）</li></ul><h2 id="Rules-実装"><a href="#Rules-実装" class="headerlink" title="Rules 実装"></a>Rules 実装</h2><p>まず１つ目の Rules です。ユーザメタデータに <code>&#123; agreed: &quot;yes&quot; &#125;</code> が含まれているか否かでステータス管理を行います。もし <code>agreed</code> が定義されてなかったり違う値だったりした場合は、<code>context.redirect</code> に遷移先のURLを代入して確認画面へリダイレクトさせます。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> metadata = user.app_metadata || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// すでに規約同意している場合は何もせず終了</span></span><br><span class="line">  <span class="keyword">if</span> (metadata.agreed) &#123;</span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  context.redirect = &#123;</span><br><span class="line">    url: <span class="string">&quot;http://localhost:3000/consent&quot;</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>２つ目の Rules です。ここには確認画面から戻ってきた時の処理を書いています。確認画面から戻ってきた時のみ起動して欲しいので、 <code>context.protocol</code> の中身をチェックしてから実行するかの判定をしています。クエリパラメータからユーザの回答を受け取り、メタデータ更新を行ってから認証成功させてます。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// context.redirect からの再開でない場合は本処理を終了する</span></span><br><span class="line">  <span class="keyword">if</span> (context.protocol &amp;&amp; context.protocol !== <span class="string">&quot;redirect-callback&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// クエリパラメータを取得</span></span><br><span class="line">  <span class="keyword">const</span> request = context.request || &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> query = request.query || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ユーザが同意すれば認証成功</span></span><br><span class="line">  <span class="keyword">if</span> (query.answer &amp;&amp; query.answer === <span class="string">&quot;yes&quot;</span>) &#123;</span><br><span class="line">    user.app_metadata = user.app_metadata || &#123;&#125;;</span><br><span class="line">    user.app_metadata.agreed = <span class="string">&quot;yes&quot;</span>;</span><br><span class="line">    auth0.users.updateAppMetadata(user.user_id, user.app_metadata)</span><br><span class="line">      .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        callback(<span class="literal">null</span>, user, context);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        callback(err);</span><br><span class="line">      &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ユーザが拒否すれば認証失敗</span></span><br><span class="line">  <span class="keyword">return</span> callback(<span class="keyword">new</span> UnauthorizedError(<span class="string">&quot;同意しないと使えません&quot;</span>), user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue-実装"><a href="#Vue-実装" class="headerlink" title="Vue 実装"></a>Vue 実装</h2><p>確認画面の実装はこんな感じです。Rules からこの画面にリダイレクトされた場合はクエリパラメータに <code>state=ハッシュ値</code> が付いています。なので <code>state</code> がない場合にはエラー画面へ遷移させちゃってます。ボタンをクリックしたら再び Auth0 へ遷移するように、<code>https://&#123;Auth0ドメイン&#125;/continue?state=&#123;ハッシュ値&#125;</code> という URL を作成しています。</p><figure class="highlight html"><figcaption><span>vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>アプリケーションの利用を継続しますか？<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;clickYes&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button-a&quot;</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;clickNo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;button-a&quot;</span>&gt;</span>No<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; domain &#125; <span class="keyword">from</span> <span class="string">&quot;../../auth_config.json&quot;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  name: <span class="string">&quot;consent&quot;</span>,</span></span><br><span class="line">  computed: &#123;</span><br><span class="line"><span class="javascript">    query: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="built_in">this</span>.$route.query;</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    state: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="built_in">this</span>.query &amp;&amp; <span class="built_in">this</span>.query.state) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.query.state</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">null</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    state: &#123;</span><br><span class="line"><span class="javascript">      immediate: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      handler: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!<span class="built_in">this</span>.state) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">this</span>.$router.replace(<span class="string">&quot;/error&quot;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    clickYes: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      location.href = <span class="string">`https://<span class="subst">$&#123;domain&#125;</span>/continue?state=<span class="subst">$&#123;<span class="built_in">this</span>.state&#125;</span>&amp;answer=yes`</span>;</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    clickNo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      location.href = <span class="string">`https://<span class="subst">$&#123;domain&#125;</span>/continue?state=<span class="subst">$&#123;<span class="built_in">this</span>.state&#125;</span>&amp;answer=no`</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="動かしてみる"><a href="#動かしてみる" class="headerlink" title="動かしてみる"></a>動かしてみる</h2><p>アプリケーションを起動して Login をクリックします。Google アカウントを使ってログインする画面が表示されたので、ログインを行います。</p><img src="/images/20210222/Screen_Shot_2021-02-17_at_21.45.47.png" style="border:solid 1px #000000"><p><code>Googleで続ける</code> をクリックしたら想定通り <code>localhost:3000/consent?status=...</code> にリダイレクトされ確認画面が表示しました。Yes をクリックして再び Auth0 での認証を継続します。</p><img src="/images/20210222/Screen_Shot_2021-02-17_at_21.48.01.png" style="border:solid 1px #000000"><p>同意ダイアログが表示しました。許可を押すとログインが完了します。（localhost で起動したアプリケーションは初回ログインで表示される仕様です。実際の Auth0 設定では audience をちゃんと指定して、Consent Skip を有効にしておけばこの画面はスキップされます）</p><img src="/images/20210222/Screen_Shot_2021-02-17_at_21.48.07.png" style="border:solid 1px #000000"><p>ログインが完了しました！プロフィール画面から IDトークンの中身を見ることができるので、無事に成功している様子です。</p><img src="/images/20210222/Screen_Shot_2021-02-17_at_21.48.48.png" style="border:solid 1px #000000"><p>ちなみに確認画面で No をクリックした場合は Rules で認証エラーにしてます。クエリパラメータに <code>error=unauthorized</code> <code>error_description=同意しないと使えません</code> でエラー内容を通知してます。</p><img src="/images/20210222/Screen_Shot_2021-02-17_at_21.49.36.png" style="border:solid 1px #000000"><h2 id="state-の有効期限"><a href="#state-の有効期限" class="headerlink" title="state の有効期限"></a>state の有効期限</h2><p>これはわかりませんでした。試しに 30 分待ってみたのですが、有効期限切れなどなく認証が継続できました。</p><h1 id="実際にあったトラブル"><a href="#実際にあったトラブル" class="headerlink" title="実際にあったトラブル"></a>実際にあったトラブル</h1><p>すでに稼働しているアプリケーションに context.redirect を適用する場合は、ちょっと注意が必要です。</p><p>これは私が実際にテストで検知したものです。現在、私がメンテしているアプリケーションは Vue.js と <a href="https://github.com/auth0/auth0-spa-js">auth0-spa-js</a> で構築したものなのですが、context.redirect で画面遷移を追加したことにより、Auth0 の Silent Authentication でエラーが発生してしまいました。（しっかりテストを行って正解でした！）</p><p><a href="https://auth0.com/docs/authorization/configure-silent-authentication">Silent Authentication</a> の詳細な説明は割愛しますが、「Auth0で設定した認証の有効期限内であれば、ログイン画面をスキップしてユーザを自動ログインさせる機能」と思ってください。</p><p>導入前のアプリの振る舞いは、ユーザが認証有効期限内であれば自動ログインを行うものでした。この改修によって、リダイレクト先画面でユーザアクションが必要になってしまったため、Silent Authentication は <code>interaction_required</code> を出力しました。原因は auth0-spa-js のバージョンが 1.8.0 と前バージョンのものだったため、このエラーをキャッチする処理が実装されていませんでした。最新版はエラーを網羅的にハンドリングしている習性が入っていたので、ライブラリをバージョンアップすることで解決しました。（ご参考までに、修正対応がされていたコードは<a href="https://github.com/auth0/auth0-spa-js/blob/v1.13.6/src/Auth0Client.ts#L593">こちら</a>です）</p><h1 id="これ以外の実現方法の紹介"><a href="#これ以外の実現方法の紹介" class="headerlink" title="これ以外の実現方法の紹介"></a>これ以外の実現方法の紹介</h1><p>私が思いつく限りをあげてみます。</p><p><strong>Universal Login をカスタマイズする</strong></p><p>独自のhtmlを実装して、ログイン画面に利用規約を一緒に表示させる方法です。<br>ただし、この html ソースの管理やメンテナンスが発生するので、おすすめ度は中くらいです。</p><p><strong>アプリ側で制御する</strong></p><p>IDトークンに規約同意済フラグのようなパラメータを設けて、アプリ側でそのパラメータを見て利用規約を表示する・しないを制御する方法です。この方法でも実現は可能ですが、アプリごとに対応が必要であるため、メンテナンスが大変になります。運用するアプリが1つなど少ない場合には、context.redirect でコントロールするよりシンプルかもしれません。</p><p><strong>同意ダイアログに表示する</strong></p><p>3rdパーティアプリでログインさせるときに<a href="https://auth0.com/docs/authorization/user-consent-and-third-party-applications">同意ダイアログ</a>を表示させることが可能です。ちょっと無理矢理ですが、この画面に任意の文字を表示することは可能であるため、それを利用します。しかし、3rdパーティのみに限定されてしまう点と、ダイアログという小さいエリアに向いていない使い方のため、おすすめ度は低いです。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200123/index.html" data-iframely-url="//cdn.iframe.ly/6rr8LwH?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200128/index.html" data-iframely-url="//cdn.iframe.ly/sNQz5Cd?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIG DX-Unit の先山です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://auth0.com/jp/&quot;&gt;Auth0&lt;/a&gt; を使ってアプリを構築しています。とある案件で、ユーザがログインした後に任意のページを表示させたいニーズがありました。こういった時はアプリ側
      
    
    </summary>
    
    
      <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
      <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
  </entry>
  
  <entry>
    <title>リモートネイティブ世代が考えるリモートワーク設備</title>
    <link href="https://future-architect.github.io/articles/20210219/"/>
    <id>https://future-architect.github.io/articles/20210219/</id>
    <published>2021-02-18T15:00:00.000Z</published>
    <updated>2021-02-24T03:58:59.010Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20210118/">リモートワーク環境連載</a>の3弾目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG/DXユニットの富山です。</p><p>私は2020年4月新卒入社で、入社時からリモートワークが基本のリモートネイティブ世代です。自分なりに快適に仕事を行える自宅作業環境を入社してから少しづつ構築したのでご紹介します。</p><p>少しでも参考になれば嬉しいです！</p><h2 id="デスク構築の考え方"><a href="#デスク構築の考え方" class="headerlink" title="デスク構築の考え方"></a>デスク構築の考え方</h2><p>以下の3点を意識してアイテム選定・構築しました。</p><ol><li>必要最低限のものしかデスクに置かない</li><li>椅子には投資する</li><li>なるべくコードレスに</li></ol><h2 id="現在のデスク"><a href="#現在のデスク" class="headerlink" title="現在のデスク"></a>現在のデスク</h2><p>2021年1月末時点では、このようなデスクになっています。<br>今回は、下記①〜⑧について紹介します。<br><img src="/images/20210219/e9e7dec4-20b1-60a6-4952-e9da500e23e0.png" alt=""><br>① モニター・モニターアーム<br>② 椅子<br>③ 昇降式デスク<br>④ キーボード<br>⑤ トラックパッド<br>⑥ スピーカー<br>⑦ クラムシェル用PCスタンド<br>⑧ 空気清浄機</p><h3 id="①-モニター・モニターアーム"><a href="#①-モニター・モニターアーム" class="headerlink" title="① モニター・モニターアーム"></a>① モニター・モニターアーム</h3><h4 id="モニター"><a href="#モニター" class="headerlink" title="モニター"></a>モニター</h4><p>モニターは枚数が多ければ多いほどよいと思いますが、私は現在2枚のモニターを使用しています。</p><p>使用しているのは<a href="https://www.amazon.co.jp/%E3%83%87%E3%82%A3%E3%82%B9%E3%83%97%E3%83%AC%E3%82%A4-GW2780-%E3%83%96%E3%83%AB%E3%83%BC%E3%83%A9%E3%82%A4%E3%83%88%E8%BB%BD%E6%B8%9B-%E8%BC%9D%E5%BA%A6%E8%87%AA%E5%8B%95%E8%AA%BF%E6%95%B4B-I-%E6%8A%80%E8%A1%93%E6%90%AD%E8%BC%89-HDMI1-4/dp/B07D79519M/ref=sr_1_1?adgrpid=98159911085&dchild=1&gclid=Cj0KCQiAx9mABhD0ARIsAEfpavQkaDTaFXLEAXQ1nuNXn0uuasVLLJzwApKdwUzbtE9xvBegNAiX2i8aAtApEALw_wcB&hvadid=429994317584&hvdev=c&hvlocphy=1009309&hvnetw=g&hvqmt=e&hvrand=6386477162357026011&hvtargid=kwd-506728426505&hydadcr=9353_11298745&jp-ad-ap=0&keywords=%E3%83%99%E3%83%B3%E3%82%AD%E3%83%A5%E3%83%BC+27%E3%82%A4%E3%83%B3%E3%83%81&qid=1612096811&sr=8-1&tag=googhydr-22" target="_blank" rel="noopener">BenQ GW2780 27inch</a>です。BenQのコスパは最強です。<br><img src="/images/20210219/3abc1945-342b-326b-b7e3-bc144defba27.png" alt=""></p><h4 id="モニターアーム"><a href="#モニターアーム" class="headerlink" title="モニターアーム"></a>モニターアーム</h4><p>一般的に、モニターの台座はそこそこスペースを消費します。また、個人的にコードを読む時は縦画面のほうが表示できる行数が多くなり好みなので、柔軟にモニターを動かせるモニターアームの導入は必須でした。使用しているのは<a href="https://www.amazon.co.jp/gp/product/B07W3KK949/ref=ppx_yo_dt_b_asin_title_o01_s00?ie=UTF8&psc=1" target="_blank" rel="noopener">HUANUO ガススプリング式モニターアーム</a>です。少々ゴツいですが、最低限のスペースでしっかりとモニターを支えてくれています。<br><img src="/images/20210219/803579c2-c774-f57a-3ebc-9fb32fcc08a4.png" alt=""></p><p>※ モニターアームで使用したい場合、<a href="https://ja.wikipedia.org/wiki/VESA" target="_blank" rel="noopener">VESA規格</a>に対応しているモニターを用意する必要があります。これから導入される方はご注意ください。</p><h3 id="②-椅子"><a href="#②-椅子" class="headerlink" title="② 椅子"></a>② 椅子</h3><p>椅子は投資です（たぶん）。短期間で壊れることはそうないでしょうし、正しい姿勢に導いてもらうことにより、アウトプットの質があがります（たぶん）。<br>私が使用しているのは<a href="https://www.amazon.co.jp/%E3%83%8F%E3%83%BC%E3%83%9E%E3%83%B3%E3%83%9F%E3%83%A9%E3%83%BC-%E3%82%A2%E3%83%BC%E3%83%AD%E3%83%B3%E3%83%81%E3%82%A7%E3%82%A2-%E3%83%AA%E3%83%9E%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%89-%E3%83%9D%E3%82%B9%E3%83%81%E3%83%A3%E3%83%BC%E3%83%95%E3%82%A3%E3%83%83%E3%83%88SL-AER1B23DW/dp/B01MUZOWBH/ref=sr_1_1_sspa?dchild=1&keywords=%E3%82%A2%E3%83%BC%E3%83%AD%E3%83%B3%E3%83%81%E3%82%A7%E3%82%A2&qid=1612097772&sr=8-1-spons&psc=1&spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUFNNFRHRlNRRTg2TjYmZW5jcnlwdGVkSWQ9QTA3Mzg3MDNJWDVXREtDVTA1S1ImZW5jcnlwdGVkQWRJZD1BUTZQRFJJQ1pRSlNPJndpZGdldE5hbWU9c3BfYXRmJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==" target="_blank" rel="noopener">Herman Miller アーロンチェア</a>です。MoMAパーマネントコレクションに認定された、キングofデスクチェアです。（こういうのに弱い）</p><p>信じられない値段がしますが、将来の自分を信じて購入しました。</p><p>導入した結果としては最高です。身体がまったく痛くならならず、永遠に座っていられます。<br>アウトプットの質もあがった..はず…。<br><img src="/images/20210219/fb2e94ce-1e9c-acab-b1e0-e253a5452e91.png" alt=""></p><h3 id="③-昇降式デスク"><a href="#③-昇降式デスク" class="headerlink" title="③ 昇降式デスク"></a>③ 昇降式デスク</h3><p>椅子が最高と言っても自宅だと集中力が途切れてしまったり、体勢を変えたいシーンがあります。そんなときに昇降式デスクです。スタンディングでの作業は思いの外捗ります。使用しているのは<a href="amazon.co.jp/gp/product/B07HBWGGMH/ref=ppx_yo_dt_b_asin_title_o03_s00?ie=UTF8&psc=1">FlexiSpot 電動式スタンディングデスク</a>です。デスク脚のみ購入し、天板は好みのサイズの板を脚の上に乗せています。デスク脚だけにも関わらず結構いいお値段がしますが、満足しています。<br>余談ですが、組み立ての難易度が結構高いです。<br><img src="/images/20210219/241c76fa-6ca1-597d-ad22-ba276fdfe3b8.png" alt=""></p><h3 id="④-キーボード"><a href="#④-キーボード" class="headerlink" title="④ キーボード"></a>④ キーボード</h3><p>弊社ではしばしばキーボード宗教戦争や布教運動が起こりますが、私は<a href="https://www.amazon.co.jp/HHKB-Professional-HYBRID-%E7%84%A1%E5%88%BB%E5%8D%B0%EF%BC%8F%E5%A2%A8%EF%BC%88%E8%8B%B1%E8%AA%9E%E9%85%8D%E5%88%97%EF%BC%89-PD-KB800BNS/dp/B082TWFV9C/ref=pd_sbs_2?pd_rd_w=F45k5&pf_rd_p=10c006f1-d300-414f-a419-f9006b54dbbc&pf_rd_r=B50GGXATBN2230C1WGY0&pd_rd_r=3f13515c-273a-43a8-a493-7499e0cde68a&pd_rd_wg=M4Fzj&pd_rd_i=B082TWFV9C&psc=1" target="_blank" rel="noopener">HHKB Professional HYBRID Type-S</a>を使用しています。</p><p>実はHHKBは弊デスク2代目で、既に私の手はHHKB意外との互換性を持たなくなりました。無刻印の厨二病さに加え、コンパクトで打鍵感も最高です。ただBluetoothでの接続が基本なので、稀に入力が遅れたり、謎に連打されてしまう現象が起こります。（有線でも使えますが、「なるべくコードレスに」を遵守しているため我慢しています。）<br><img src="/images/20210219/4b48240c-1f98-3d5c-7287-19de1022e676.png" alt=""></p><h3 id="⑤-トラックパッド"><a href="#⑤-トラックパッド" class="headerlink" title="⑤ トラックパッド"></a>⑤ トラックパッド</h3><p><a href="https://www.amazon.co.jp/dp/B07DPGK3B3/ref=twister_B08V23SH6P?_encoding=UTF8&psc=1" target="_blank" rel="noopener">Apple Magic Tracpad2</a>を使用しています。単純にカッコいいという理由だけで使用しています。<br><img src="/images/20210219/163c170e-2849-f253-f31a-3f45b818f7ca.png" alt=""></p><h3 id="⑥-スピーカー"><a href="#⑥-スピーカー" class="headerlink" title="⑥ スピーカー"></a>⑥ スピーカー</h3><p>たまに音楽を聞きながら作業したくなるので、スピーカーも導入しています。<br>使用しているのは、<a href="https://www.amazon.co.jp/dp/B08PF4BDDG/ref=twister_B08T6YGDYN?_encoding=UTF8&psc=1" target="_blank" rel="noopener">Bose SoundLink Revolve II</a>です。コンパクトで音も素晴らしいので重宝しています。<br>もちろんBluetoothです。無線だとアウトドアにも使えるのでおすすめです。<br><img src="/images/20210219/31aace4b-85b0-7fbd-fd66-92cdb4546acd.png" alt=""></p><h3 id="⑦-クラムシェル用スタンド"><a href="#⑦-クラムシェル用スタンド" class="headerlink" title="⑦ クラムシェル用スタンド"></a>⑦ クラムシェル用スタンド</h3><p>私のデスクには2つのラップトップ（MBP 16・13インチそれぞれ1台ずつ)があり、平置きするとかなりの場所を消費します。幸いMacにはPCを閉じた状態でも諸条件をクリアすればデスクトップのように使用できるクラムシェルがあるため、ラップトップを立てられるスタンドを導入しています。おかげでかなりスペースを確保できましたが、ラップトップが熱を持ちやすくなってしまうため、解決策を模索中です…<br>使用しているのは<a href="https://www.amazon.co.jp/gp/product/B08LGWG21K/ref=ppx_yo_dt_b_asin_title_o01_s01?ie=UTF8&psc=1" target="_blank" rel="noopener">BECROWM 4in1</a>です。ラップトップ2台分のスタンドがあります。<br><img src="/images/20210219/24b8650c-760d-ff88-01e8-f154e2404ba3.png" alt=""></p><h3 id="⑧-空気清浄機"><a href="#⑧-空気清浄機" class="headerlink" title="⑧ 空気清浄機"></a>⑧ 空気清浄機</h3><p>どんなに良いデスク環境を整えても空気が悪いと身体によくありません。加湿器機能付きのものが個人的におすすめです。目を閉じればそこに木々と川が見えます。使用しているのは<a href="https://www.amazon.co.jp/%E3%82%B7%E3%83%A3%E3%83%BC%E3%83%97-%E7%A9%BA%E6%B0%97%E6%B8%85%E6%B5%84%E6%A9%9F%E3%80%90%E5%8A%A0%E6%B9%BF%E6%A9%9F%E8%83%BD%E4%BB%98%E3%80%91%EF%BC%88%E7%A9%BA%E6%B8%8523%E7%95%B3%E3%81%BE%E3%81%A7-%E3%83%9B%E3%83%AF%E3%82%A4%E3%83%88%E7%B3%BB%EF%BC%89SHARP-%E3%80%8C%E3%83%97%E3%83%A9%E3%82%BA%E3%83%9E%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%83%BC7000%E3%80%8D%E6%90%AD%E8%BC%89-KC-L50-W/dp/B07Z8PRD4W/ref=sr_1_15?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=3FG5TIIN7YR9D&dchild=1&keywords=sharp+%E3%83%97%E3%83%A9%E3%82%BA%E3%83%9E%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%83%BC&qid=1613054441&sprefix=sharp+%E3%83%97%E3%83%A9%E3%82%BA%E3%83%9E%2Caps%2C162&sr=8-15" target="_blank" rel="noopener">シャープ プラズマクラスター</a>です。<br>1日の大半を自室で過ごすので、満足度はかなり高いです。<br><img src="/images/20210219/0449d246-7657-4a66-9bf9-242a86e3bbc5.png" alt=""></p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>つらつらとリモートワークに使用しているアイテムをご紹介しましたが、結局は「気分がアガるモノを揃える」に尽きると思っています。</p><p>まだまだ完成形には程遠く、現在抱えている課題は ①配線問題（いまはデスクの裏に無理やりまとめている）②Webカメラが無い問題 です。また機会があったらアップデートしたデスクをご紹介させてください！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20210118/&quot;&gt;リモートワーク環境連載&lt;/a&gt;の3弾目です。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="リモートワーク" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/"/>
    
  </entry>
  
  <entry>
    <title>AWS SDK for Goのリトライアルゴリズムを差し替える方法</title>
    <link href="https://future-architect.github.io/articles/20210218/"/>
    <id>https://future-architect.github.io/articles/20210218/</id>
    <published>2021-02-17T15:00:00.000Z</published>
    <updated>2021-02-24T10:26:18.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>本記事では<a href="https://github.com/aws/aws-sdk-go" target="_blank" rel="noopener">AWS SDK for Go</a>を使ってAWSのAPIをコールする場合のリトライアルゴリズムを差し替える方法を紹介します。</p><h1 id="AWS-SDK-for-Go-のリトライ"><a href="#AWS-SDK-for-Go-のリトライ" class="headerlink" title="AWS SDK for Go のリトライ"></a><code>AWS SDK for Go</code> のリトライ</h1><img src="/images/20210218/awsgo.png" class="img-middle-size"><p><code>AWS SDK for Go</code> のバージョンは <a href="https://github.com/aws/aws-sdk-go/releases/tag/v1.37.6" target="_blank" rel="noopener"><code>v1.37.6</code></a> です。</p><p>まず <code>AWS SDK for Go</code> を使ってAPIをコールする場合は、デフォルトでリトライするようになっています<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。そのため <code>AWS SDK for Go</code> を使うアプリケーション側でリトライを実装する必要はありません。<code>AWS SDK for Go</code> 上の実装は <a href="https://github.com/aws/aws-sdk-go/blob/v1.37.6/aws/client/default_retryer.go#L12-L36" target="_blank" rel="noopener"><code>client.DefaultRetryer</code></a> がリトライを実施します。リトライ時の待ち時間である <code>time.Duration</code> を計算するアルゴリズムは <code>RetryRules</code> メソッドとして実装されています。</p><p>待ち時間を計算するアルゴリズムはExponential Backoff And Jitter<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>です。</p><ul><li>リトライの再試行の待ち時間を計算する <code>RetryRules</code> メソッド</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RetryRules returns the delay duration before retrying this request again</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d DefaultRetryer)</span> <span class="title">RetryRules</span><span class="params">(r *request.Request)</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// if number of max retries is zero, no retries will be performed.</span></span><br><span class="line"><span class="keyword">if</span> d.NumMaxRetries == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Sets default value for retryer members</span></span><br><span class="line">d.setRetryerDefaults()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// minDelay is the minimum retryer delay</span></span><br><span class="line">minDelay := d.MinRetryDelay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> initialDelay time.Duration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">isThrottle := r.IsErrorThrottle()</span><br><span class="line"><span class="keyword">if</span> isThrottle &#123;</span><br><span class="line"><span class="keyword">if</span> delay, ok := getRetryAfterDelay(r); ok &#123;</span><br><span class="line">initialDelay = delay</span><br><span class="line">&#125;</span><br><span class="line">minDelay = d.MinThrottleDelay</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">retryCount := r.RetryCount</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// maxDelay the maximum retryer delay</span></span><br><span class="line">maxDelay := d.MaxRetryDelay</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isThrottle &#123;</span><br><span class="line">maxDelay = d.MaxThrottleDelay</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> delay time.Duration</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Logic to cap the retry count based on the minDelay provided</span></span><br><span class="line">actualRetryCount := <span class="keyword">int</span>(math.Log2(<span class="keyword">float64</span>(minDelay))) + <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> actualRetryCount &lt; <span class="number">63</span>-retryCount &#123;</span><br><span class="line">delay = time.Duration(<span class="number">1</span>&lt;&lt;<span class="keyword">uint64</span>(retryCount)) * getJitterDelay(minDelay)</span><br><span class="line"><span class="keyword">if</span> delay &gt; maxDelay &#123;</span><br><span class="line">delay = getJitterDelay(maxDelay / <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">delay = getJitterDelay(maxDelay / <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> delay + initialDelay</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/aws/aws-sdk-go/blob/d8a5a9febe5602f134648c18e9f83546284cda35/aws/client/default_retryer.go#L77-L123" target="_blank" rel="noopener">https://github.com/aws/aws-sdk-go/blob/d8a5a9febe5602f134648c18e9f83546284cda35/aws/client/default_retryer.go#L77-L123</a></p><h3 id="デフォルトの設定"><a href="#デフォルトの設定" class="headerlink" title="デフォルトの設定"></a>デフォルトの設定</h3><p>デフォルトのリトライの設定は以下のようになっています。</p><table><thead><tr><th align="center">No</th><th>項目</th><th>説明</th><th>デフォルト値(単位)</th></tr></thead><tbody><tr><td align="center">1</td><td><code>NumMaxRetries</code></td><td>最大リトライ回数</td><td>3 (回)</td></tr><tr><td align="center">2</td><td><code>MinRetryDelay</code></td><td>リトライ時の最小の待ち時間</td><td>30 (ミリ秒)</td></tr><tr><td align="center">3</td><td><code>MinThrottleDelay</code></td><td>リトライスロットリング<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>時の最小の待ち時間</td><td>300 (ミリ秒)</td></tr><tr><td align="center">4</td><td><code>MaxRetryDelay</code></td><td>リトライ時の最大の待ち時間</td><td>300 (秒)</td></tr><tr><td align="center">5</td><td><code>MaxThrottleDelay</code></td><td>リトライスロットリング時の最大の待ち時間</td><td>300 (秒)</td></tr></tbody></table><h1 id="RetryRules-を差し替える"><a href="#RetryRules-を差し替える" class="headerlink" title="RetryRules を差し替える"></a><code>RetryRules</code> を差し替える</h1><p>基本的にはSDKが提供するデフォルトのリトライを実施することで問題ないでしょう。差し替えたくなるケースの一つは、リトライ回数を増やしてリトライエラーを発生させたくないケースです。(ただし、リトライ回数を増やすことでリトライエラーを速やかに解消できる場合に限ります。)リトライ回数が増えると待ち時間が大きくなり、デフォルトの設定の場合最大で300秒です。特定のケースではなるべく早くリトライを試行したい場合があるでしょう。このような場合にリトライアルゴリズムを差し替える方法が役に立ちます。</p><h2 id="差し替える方法"><a href="#差し替える方法" class="headerlink" title="差し替える方法"></a>差し替える方法</h2><p><code>Config</code> の <code>Retryer</code> フィールドに値をセットすることで差し替えることができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// Retryer guides how HTTP requests should be retried in case of</span></span><br><span class="line"><span class="comment">// recoverable failures.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// When nil or the value does not implement the request.Retryer interface,</span></span><br><span class="line"><span class="comment">// the client.DefaultRetryer will be used.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// When both Retryer and MaxRetries are non-nil, the former is used and</span></span><br><span class="line"><span class="comment">// the latter ignored.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// To set the Retryer field in a type-safe manner and with chaining, use</span></span><br><span class="line"><span class="comment">// the request.WithRetryer helper function:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   cfg := request.WithRetryer(aws.NewConfig(), myRetryer)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">Retryer RequestRetryer</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/aws/aws-sdk-go/blob/d8a5a9febe5602f134648c18e9f83546284cda35/aws/config.go#L94-L108" target="_blank" rel="noopener">https://github.com/aws/aws-sdk-go/blob/d8a5a9febe5602f134648c18e9f83546284cda35/aws/config.go#L94-L108</a></p><p><code>Retryer</code> は <code>request.Retryer</code> を満たす型です。<code>Retryer</code> の実装上は <code>RequestRetryer</code> 型で <code>interface{}</code> 型へのDefined typeになっていますが、<code>request.Retryer</code> を満たしていない場合は <code>DefaultRetryer</code> が使われます。</p><p><code>client.DefaultRetryer</code> 構造体を埋め込んで <code>RetryRules</code> メソッドを実装する方法がおすすめです。構造体の埋め込みを利用して、委譲したいメソッドだけを実装する手法はGoではよく使われます。リトライするかどうかの判断基準 (<code>ShouldRetry</code>) はデフォルトの実装のままで、リトライの待ち時間の計算アルゴリズムのみを差し替えることができます。以下の実装は <a href="https://github.com/jpillora/backoff" target="_blank" rel="noopener"><code>jpillora/backoff</code></a> のシンプルな上限付きExponential Backoff And Jitterを使った実装です。</p><ul><li>retryer.go</li></ul><figure class="highlight go"><figcaption><span>retryer.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sample</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/client"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/request"</span></span><br><span class="line"><span class="string">"github.com/jpillora/backoff"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> customRetryer <span class="keyword">struct</span> &#123;</span><br><span class="line">*backoff.Backoff</span><br><span class="line">client.DefaultRetryer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewCustomRetryer</span><span class="params">(cfg *backoff.Backoff, numRetries <span class="keyword">int</span>)</span> *<span class="title">customRetryer</span></span> &#123;</span><br><span class="line">r := &amp;customRetryer&#123;Backoff: cfg&#125;</span><br><span class="line">r.NumMaxRetries = numRetries</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(cr customRetryer)</span> <span class="title">RetryRules</span><span class="params">(req *request.Request)</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> cr.Backoff.Duration()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ request.Retryer = &amp;customRetryer&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>main.go</li></ul><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/endpoints"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/session"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/service/lambda"</span></span><br><span class="line"><span class="string">"github.com/d-tsuji/go-sandbox/customretry/sample"</span></span><br><span class="line"><span class="string">"github.com/jpillora/backoff"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">lmd         *lambda.Lambda</span><br><span class="line">maxRetryNum = <span class="number">10</span> <span class="comment">// リトライ上限回数は環境変数などから取得</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">lmd = lambda.New(session.Must(session.NewSession(&amp;aws.Config&#123;</span><br><span class="line">Region:     aws.String(endpoints.ApNortheast1RegionID),</span><br><span class="line">MaxRetries: aws.Int(maxRetryNum),</span><br><span class="line">Retryer: sample.NewCustomRetryer(&amp;backoff.Backoff&#123;</span><br><span class="line">Min:    <span class="number">10</span> * time.Millisecond,</span><br><span class="line">Max:    <span class="number">300</span> * time.Millisecond,</span><br><span class="line">Factor: <span class="number">2</span>,</span><br><span class="line">Jitter: <span class="literal">true</span>,</span><br><span class="line">&#125;, maxRetryNum),</span><br><span class="line">&#125;)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のようにリトライアルゴリズムを差し替えることができます。もちろん <code>client.DefaultRetryer</code> を使って、リトライの設定(<code>client.DefaultRetryer</code> の <code>MaxRetryDelay</code> など)を変えることによってリトライの待ち時間の計算に影響を及ぼすこともできます。<code>AWS SDK for Go</code> が提供するデフォルトのリトライアルゴリズム・設定ではパフォーマンス上の問題があるケースなど、リトライのアルゴリズムや設定を差し替えたい場合に本記事が参考になれば幸いです。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200121/index.html" data-iframely-url="//cdn.iframe.ly/raMwXJI?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20201112/index.html" data-iframely-url="//cdn.iframe.ly/l2eSPH0?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">https://docs.aws.amazon.com/ja_jp/general/latest/gr/api-retries.html</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">https://aws.amazon.com/jp/blogs/architecture/exponential-backoff-and-jitter/</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">リトライスロットリングが何かという説明は<a href="https://aws.amazon.com/jp/blogs/developer/introducing-retry-throttling/" target="_blank" rel="noopener">Introducing Retry Throttling</a>や<a href="https://future-architect.github.io/articles/20200121/">スロットリングとの付き合い方</a>を参照</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;本記事では&lt;a href=&quot;https://github.com/aws/aws-sdk-go&quot; target=&quot;_blan
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="リトライ" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%88%E3%83%A9%E3%82%A4/"/>
    
  </entry>
  
  <entry>
    <title>プログラミング英会話 基礎</title>
    <link href="https://future-architect.github.io/articles/20210217/"/>
    <id>https://future-architect.github.io/articles/20210217/</id>
    <published>2021-02-16T15:00:00.000Z</published>
    <updated>2021-02-22T02:48:13.057Z</updated>
    
    <content type="html"><![CDATA[<h1 id="プログラミング英会話-基礎"><a href="#プログラミング英会話-基礎" class="headerlink" title="プログラミング英会話 [基礎]"></a>プログラミング英会話 [基礎]</h1><p>こんにちは！英語大好き優輝です。</p><p>今回はカナダの大学でコンピュータ・サイエンスを学んだ経験から、英語でIT会話をする基礎を書こうと思います。</p><p>プログラミングやIT表現を練習をしましょう！</p><img src="/images/20210217/giraffes-627031_1280.jpg"><p><a href="https://pixabay.com/ja/users/sponchia-443272/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=627031" target="_blank" rel="noopener">Christine Sponchia</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=627031" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h2 id="この記事について"><a href="#この記事について" class="headerlink" title="この記事について"></a>この記事について</h2><p>この記事は、「プログラミングを英語で話すこと」を目的として練習する記事です。</p><p>記事の中では日本語に対応する英語を隠してあるので、まず頭の中で日本語を英語に変換してみてから英訳をみてみてください。「読める」ことを目標にした場合はレベル感が落ちてしまうことを了承ください。「話せる」ことで世界のプログラマーと対話できるように練習しましょう！</p><h2 id="まずは試してみる"><a href="#まずは試してみる" class="headerlink" title="まずは試してみる"></a>まずは試してみる</h2><p>“What do you do?”（仕事何してるの）と聞かれたときに「プログラミングを職業にしていること」を伝える3種類の英文を次の条件にしたがって考えてみてください。</p><p>条件: ３つ全ての文にprogramという文字列を必ず含こと。</p><details><summary>解答例</summary><div><p>I program. (動詞の例)<br>I write programs. (名詞の例)<br>I am a programmer. (erを付けてプログラマーとしている例)<br>※他にも回答はあります</p></div></details><p>どうですか？</p><p>シンプルな英語ですが、自分がプログラマであることを表現できます。日本語もそうですが、単語の品詞を変えて英文を作るのが自由に英語を話すコツです。</p><h2 id="エクササイズ"><a href="#エクササイズ" class="headerlink" title="エクササイズ"></a>エクササイズ</h2><p>programの他にcodeという単語も同じ様に使います。</p><p>program[名][動]=プログラム/プログラムする<br>code[名][動]= コード/コーディングする</p><p>programもcodeも名詞の場合は加算です。文法に注意して英文を作ってみましょう。</p><h3 id="名詞扱いの例"><a href="#名詞扱いの例" class="headerlink" title="名詞扱いの例"></a>名詞扱いの例</h3><p>「私は１つプログラムを書いた。」</p><details><summary>英文表示</summary><div>I wrote a program.※数えられるので、1つだとaが付きます。</div></details><p>「私は２つプログラムを書いた。」</p><details><summary>英文表示</summary><div>I wrote two programs.※単数、複数も意識するとよいでしょう。</div></details><h3 id="動詞扱いの例"><a href="#動詞扱いの例" class="headerlink" title="動詞扱いの例"></a>動詞扱いの例</h3><p>「私はプログラミング/コーディングが好きだ。」</p><details><summary>英文表示</summary><div>I like programming.I like coding.※動詞なので現在分詞ingにして動名詞です。</div></details><p>「私は週末プログラミングする。」</p><details><summary>英文表示</summary><div>I program on the weekend.I code on the weekend.</div></details><p>「私は昨日アプリをプログラムした。」</p><details><summary>英文表示</summary><div>I programmed an app yesterday.※アプリはきっと一つ作っているので単数系、母音で始まる単語なのでanを使いましょう。</div></details><p>「私は３年間プログラミングしている。」</p><details><summary>英文表示</summary><div>I have been programming for three years.※動作系の動詞の現在完了進行系です。覚えてますか。※have + be + VingでずっとVしている。を表現します。</div></details><p>programが動詞として使われるということはもちろん、原形、過去形、過去分詞(ed)、現在分詞(ing)があるということです。</p><p>「このコードは彼女によってプログラムミングされた。」</p><details><summary>英文表示</summary><div>This code was programmed by her. </div></details><p>「彼は今プログラミングしている。」</p><details><summary>英文表示</summary><div>He is programming now.</div></details><p>programやcodeを動詞として使いこなせれば、色んな表現ができるようになります。</p><h2 id="ググる"><a href="#ググる" class="headerlink" title="ググる"></a>ググる</h2><p>次に、プログラムではないですがプログラマに必須の「ググる(インターネットで調べること)」についてみてみましょう。</p><p>プログラミングの勉強や開発で分からないことがあったとき、分かる人にを質問するシチュエーションです。</p><p>あなたが質問をします。<br>そうすると、聞かれた彼はこう答えます。<br>「それググった？」</p><details><summary>英文表示</summary><div>Did you google it?</div></details><p>そしてあなたはこう答えます。<br>「昨日何回もググったけど、なにもなかった。」</p><details><summary>英文表示</summary><div>I googled it many times yesterday, but there was nothing.※nothingは単数扱いなのでwasになっています。</div></details><p>日本人はGoogleを動詞化して「ググる」として使っていますが、<br>Googleはそのままgoogleという動詞使っていますね。</p><p>「今ググってるよ」と言いたければこんな感じです。</p><details><summary>英文表示</summary><div>I am googling it right now.</div></details><p>参考</p><details><summary>googleの活用</summary><div>google　ググる 原型googled　ググった　過去形googled　ググられた　過去分詞googling　ググってる　現在分詞</div></details><p>他にも<br>「インスタに投稿した。」</p><details><summary>英文表示</summary><div>I instagrammed.</div></details>「それツイートされてたよ。」<details><summary>英文表示</summary><div>That was tweeted.</div></details>など使われているのを聞くかもしれません。<h2 id="プログラミングを英語で言ってみる"><a href="#プログラミングを英語で言ってみる" class="headerlink" title="プログラミングを英語で言ってみる"></a>プログラミングを英語で言ってみる</h2><p>それではコードを見ながらプログラミング表現を英語で考えてみましょう。<br>サンプルコードはJavaです。<br>※ヒントを用意しましたが、まずはヒントなしで考えてみてください。<br>※主語が明示されていないときはIを主語で英訳を書いています。<br>例:「それを食べた」=&gt; I ate it.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int score;</span><br></pre></td></tr></table></figure><details><summary>ヒント表示</summary><div>変数=variable [名]定義する=define [動]</div></details><p>「変数を定義する」</p><details><summary>英文表示</summary><div>I define a variable</div></details><p>「int型の変数を定義する」</p><details><summary>英文表示</summary><div>I define a variable of type int.</div></details><p>「scoreという名前の変数を定義する」</p><details><summary>英文表示</summary><div>I define a variable named "score".</div></details><p>「 scoreという名前の変数を定義した。」</p><details><summary>英文表示</summary><div>I defined a variable of type int named "score".</div></details><figure class="highlight java"><figcaption><span>Sample.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">score = <span class="number">90</span>;</span><br></pre></td></tr></table></figure><details><summary>ヒント表示</summary><div>代入する=assign [動]</div></details><p>「scoreに90を代入する」</p><details><summary>英文表示</summary><div>I assign ninety to the "score". </div></details><h2 id="オブジェクト系も英語で表現"><a href="#オブジェクト系も英語で表現" class="headerlink" title="オブジェクト系も英語で表現"></a>オブジェクト系も英語で表現</h2><figure class="highlight java"><figcaption><span>Cat.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>Sample.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cat c = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure><details><summary>ヒント表示</summary><div>インスタンス化する=instantiate [動]</div></details><p>「Catクラスをインスタンス化する。」</p><details><summary>英文表示</summary><div>I instantiate the Cat class.</div></details><p>「Catクラスのオブジェクトを作る」</p><details><summary>英文表示</summary><div>I create an object of type Cat.</div></details><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class Cat extends Animal&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details><summary>ヒント表示</summary><div>継承する=inherit [動]子は英語でなんていう？</div></details><p>「CatクラスはAnimalクラスを継承している。」</p><details><summary>英文表示</summary><div>The Cat class inherits the Animal class.※三単現なので動詞にはsをつけます。</div></details><p>「CatクラスはAnimalクラスの子クラスである。」</p><details><summary>英文表示</summary><div>The Cat class is a child class of the Animal class.※a childをthe childにしても正しい英文ですが、その場合、CatクラスはAnimalクラスの唯一の子クラスという意味合いになります。（Animalクラスを継承しているクラスはCat以外にはないというニュアンスになる。）</div></details><p>「二分木の全ての親ノードは２つの子、２つの葉、または１つの子と１つの葉を持っている。」</p><details><summary>英文表示</summary><div>Every parent node of a binary tree has either two children, two leaves, or a child and a leaf.Every parent node of binary trees has either two children, two leaves, or a child and a leaf.</div></details><h1 id="encryptとencode"><a href="#encryptとencode" class="headerlink" title="encryptとencode"></a>encryptとencode</h1><p>最後にちょっとした最近の気付きを書こうと思います。<br>次の英単語を日本語にしてみてください。</p><p>encrypt</p><details><summary>日本語表示</summary><div>「暗号化する。」※encryptは動詞なので「暗号化」と訳すのは間違いです。※「暗号化は」encrypiting</div></details><p>encode</p><details><summary>日本語表示</summary><div>「記号化、符号化」「記号化する、符号化する。」※encodeは名詞でも動詞でも使えます。</div></details><p>decrypt</p><details><summary>日本語表示</summary><div>「復号する。」※decryptは動詞なので「復号」と訳すのは間違いです。</div></details><p>decode</p><details><summary>日本語表示</summary><div>「復号」「復号する。」※decodeは名詞でも動詞でも使えます。</div></details><p>気付きましたか？</p><details><summary>筆者が気付いたこと表示</summary><div>"暗号化"(encrypt)も"符号化"(encode)も、日本語だとその逆は"復号"(decrypt/decode)なんです。「暗号化する」<=>「復号する」「符号化する・記号化する」<=>「復号」</div></details>とても面白い。<p>使ってみましょう。<br>1.「コードのこの行はメッセージを暗号化する。」<br>2.「コードのこの行はメッセージを符号化する。」<br>3.「コードのこの行はメッセージを復号する。」</p><details><summary>英文表示</summary><div>1. This line of codes encrypts messages.2. This line of codes encodes messages.3. This line of codes decrypts/decodes messages.※コードは複数の行があって一つのプログラムになるので、複数形※This lineは単数なので、動詞には三単現のs※メッセージは加算かつ、１つしかメッセージを暗号化・記号化する訳ではないので複数系</div></details><h2 id="余談"><a href="#余談" class="headerlink" title="余談"></a>余談</h2><h4 id="「復号化」ではなく、「復号」と書く理由を考えてみる"><a href="#「復号化」ではなく、「復号」と書く理由を考えてみる" class="headerlink" title="「復号化」ではなく、「復号」と書く理由を考えてみる"></a>「復号化」ではなく、「復号」と書く理由を考えてみる</h4><p>日本語では「暗号」や「符号」はそれ自体、具体的な「モノを表す名詞」でしかないが、「復号」は抽象的な「動きを表す名詞」です。</p><p>「暗号」や「記号」=「モノを表す動詞」<br>「復号」=「動きを表す名詞」</p><p>「動きを表す動詞」に「〜する」をつけると動詞になります。<br>「動きを表す名詞」+「〜する」=「動詞」<br>「復号」+「〜する」=「復号する」</p><p>「モノを表す名詞」に「〜化」をつけると モノに変えるといったニュアンスの「動きを表す名詞」になります。<br>「モノを表す名詞」+「〜化」= 「動きを表す名詞」<br>「暗号」+「〜化」=「暗号化」<br>「記号」+「〜化」=「符号化」</p><p>ということは<br>「動きを表す名詞」+「〜する」=「動詞」<br>「暗号化」+「〜する」=「暗号化する」<br>「記号化」+「〜する」=「符号化する」<br>「復号」+「〜する」=「復号する」</p><p>ということで、復号はそもそも「動きを表す名詞」なので「〜化」をつけないのが正しいです。</p><details><summary>英語での対応一覧</summary><div><p>暗号 = cipher [名] / secret code [名]<br>暗号化 = to encrypt / encrypting [名]<br>暗号化する = encrypt [動]</p><p>符号 = code [名]<br>符号化 = encode / to encode / encoding [名]<br>符号化する = encode [動]</p><p>(暗号を)復号 = to decrypt / decrypting [名]<br>(暗号を)復号する = derypt [動]</p><p>(暗号を)復号 = decode / to decode / decoding [名]<br>(暗号を)復号する = decode [動]</p><p>※to Vで不定詞の名詞的用法、Vingで動名詞</p></div></details><p>余談でした。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>これからは仕事でも英語を使うやり取りも増えてくるかもしれません。<br>プログラミングを覚える中で英会話力も向上させてしまいましょう。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;プログラミング英会話-基礎&quot;&gt;&lt;a href=&quot;#プログラミング英会話-基礎&quot; class=&quot;headerlink&quot; title=&quot;プログラミング英会話 [基礎]&quot;&gt;&lt;/a&gt;プログラミング英会話 [基礎]&lt;/h1&gt;&lt;p&gt;こんにちは！英語大好き優輝です。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Java" scheme="https://future-architect.github.io/tags/Java/"/>
    
      <category term="入門" scheme="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
      <category term="英語" scheme="https://future-architect.github.io/tags/%E8%8B%B1%E8%AA%9E/"/>
    
      <category term="英会話" scheme="https://future-architect.github.io/tags/%E8%8B%B1%E4%BC%9A%E8%A9%B1/"/>
    
  </entry>
  
  <entry>
    <title>Service Worker開発で起きた不具合を振り返る</title>
    <link href="https://future-architect.github.io/articles/20210216/"/>
    <id>https://future-architect.github.io/articles/20210216/</id>
    <published>2021-02-15T15:00:00.000Z</published>
    <updated>2021-02-22T02:08:33.488Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIGの川端です。</p><p>先日、Vue.js + Service Worker開発案件が終わりました。その振り返りとして、Service Worker開発で起きた不具合と対応方法を記載します。</p><img src="/images/20210216/thumbnail.png" class="img-middle-size"><p><a href="https://pixabay.com/ja/users/templune-1493489/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2044932" target="_blank" rel="noopener">Diego Velázquez</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2044932" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h1 id="Service-Workerとは"><a href="#Service-Workerとは" class="headerlink" title="Service Workerとは"></a>Service Workerとは</h1><p>Service Workerは、ブラウザがWebページとは別にバックグラウンドで実行するJavaScriptになります。</p><h1 id="利用ブラウザ-バージョン情報など"><a href="#利用ブラウザ-バージョン情報など" class="headerlink" title="利用ブラウザ/バージョン情報など"></a>利用ブラウザ/バージョン情報など</h1><ul><li>Chrome v88.0.4324.146</li><li>Vue.js v2.6.11</li></ul><h1 id="起きた不具合その１"><a href="#起きた不具合その１" class="headerlink" title="起きた不具合その１"></a>起きた不具合その１</h1><h2 id="事象"><a href="#事象" class="headerlink" title="事象"></a>事象</h2><p>Service Worker上で、<code>setInterval</code>の処理を用意したところ、数分で止まるという報告が上がりました。<br><code>setInterval</code>は、バックグランド上で定期的にある処理をするために用意したものです。</p><figure class="highlight js"><figcaption><span>service-worker.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1秒ごとに処理を実行</span></span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>調べてみるとService Workerの活動には制限があるようでした。</p><p>またブラウザのDevToolを起動している場合は、Service Workerは常時活動中となり、<code>setInterval</code>の処理が止まることはありません。開発中はブラウザのDevToolを常時起動中であったため、本件不具合に気づかないという事態になりました…</p><p><a href="https://w3c.github.io/ServiceWorker/#service-worker-lifetime" target="_blank" rel="noopener">参考：Service Worker Lifetime</a></p><h2 id="対応"><a href="#対応" class="headerlink" title="対応"></a>対応</h2><p><code>setInterval</code>の処理をService WorkerからVue.js側（Webアプリ側）に移動しました。</p><p>簡単な例ですが、下記のように実行したい画面のComponentに組み込みました。</p><figure class="highlight html"><figcaption><span>sample1.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 省略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'sample1'</span>,</span></span><br><span class="line">  created () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 1秒ごとに処理を実行</span></span></span><br><span class="line">    &#125;, 1000)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="補足"><a href="#補足" class="headerlink" title="補足"></a>補足</h2><p>本記事は、<code>setInterval</code>に焦点を当てましたが、Service Worker側に用意したWebSocket受信処理も止まってしまったため、WebSocket受信処理もVue.js側に移動する対応も実施しました。</p><h1 id="起きた不具合その２"><a href="#起きた不具合その２" class="headerlink" title="起きた不具合その２"></a>起きた不具合その２</h1><h2 id="事象-1"><a href="#事象-1" class="headerlink" title="事象"></a>事象</h2><p>［Ctrl］＋［Shift］＋［R］キーでリロードすると、下記のエラーが出てVue.jsからService Workerへのメッセージ送信が失敗するという事象が起きました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught TypeError: Cannot read property &#39;postMessage&#39; of null</span><br></pre></td></tr></table></figure><h2 id="原因-1"><a href="#原因-1" class="headerlink" title="原因"></a>原因</h2><p>［Ctrl］＋［Shift］＋［R］キーでリロードすると、Service Workerが解除され、下記の<code>controller</code>が<code>null</code>になったことが原因でした。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.serviceWorker.controller.postMessage(&#123; msg &#125;)</span><br></pre></td></tr></table></figure><p><a href="https://w3c.github.io/ServiceWorker/#dom-serviceworkercontainer-controller" target="_blank" rel="noopener">Service Worker Controller</a>を確認すると、</p><blockquote><p>navigator.serviceWorker.controller returns null if the request is a force refresh (shift+refresh).</p></blockquote><p>の記載があり、［Ctrl］＋［Shift］＋［R］キーでリロードしたときに<code>controller</code>が<code>null</code>になるのは仕様でした。</p><h2 id="対応-1"><a href="#対応-1" class="headerlink" title="対応"></a>対応</h2><p>再度Service WorkerがWebアプリをコントロールする状態になるように下記を実施しました。<br>まずVue.js側に、Service Workerが<code>active</code>になったら、Service Worker側に<code>claim</code>するようにメッセージを送ります。</p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="built_in">window</span>.onload = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// Service Workerの登録</span></span><br><span class="line">    <span class="keyword">const</span> registration = <span class="keyword">await</span> navigator.serviceWorker.register(<span class="string">'/service-worker.js'</span>)</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Service Workerがactiveになったら、実行される</span></span><br><span class="line">    <span class="keyword">const</span> activeRegistration = <span class="keyword">await</span> navigator.serviceWorker.ready</span><br><span class="line">    <span class="comment">// この段階では、まだcontrollerはnullのため、active.postMessageでメッセージを送信</span></span><br><span class="line">    activeRegistration.active.postMessage(&#123; <span class="attr">action</span>: <span class="string">'claim'</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次にService Worker側で該当のメッセージを受け取ったら、<code>self.clients.claim()</code>を実施します。</p><figure class="highlight js"><figcaption><span>service-worker.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">self.onmessage = <span class="function">(<span class="params">message</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (message.data.action === <span class="string">'claim'</span>) &#123;</span><br><span class="line">    self.clients.claim()</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここまで対応すると、Service WorkerがWebアプリをコントロールしている状態になります。<br>またService Workerがコントロールする状態になるまで、<code>navigator.serviceWorker.controller.postMessage</code>の処理は失敗します。<br>その失敗した処理のリカバリ方法として、下記のように画面をリロードして再実行するように対応しました。</p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">'serviceWorker'</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="built_in">window</span>.onload = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// Service WorkerがWebアプリをコントロール開始</span></span><br><span class="line">    navigator.serviceWorker.oncontrollerchange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">window</span>.location.reload()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> registration = <span class="keyword">await</span> navigator.serviceWorker.register(<span class="string">'/service-worker.js'</span>)</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> activeRegistration = <span class="keyword">await</span> navigator.serviceWorker.ready</span><br><span class="line">    activeRegistration.active.postMessage(&#123; <span class="attr">action</span>: <span class="string">'claim'</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h1><p>Service Worker開発で起きた不具合を２例紹介しました。</p><p>なかなか解決策が見つからず辛いと感じることもありましたが、こうして考えた解決策を公開することができて、大変嬉しく思っています。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20201013/index.html" data-iframely-url="//cdn.iframe.ly/SAxxrkF?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200428/index.html" data-iframely-url="//cdn.iframe.ly/2dHfIIG"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIGの川端です。&lt;/p&gt;
&lt;p&gt;先日、Vue.js + Service Worker開発案件が終わりました。その振り返りと
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="ServiceWorker" scheme="https://future-architect.github.io/tags/ServiceWorker/"/>
    
  </entry>
  
  <entry>
    <title>登が教えるSQL基礎</title>
    <link href="https://future-architect.github.io/articles/20210215/"/>
    <id>https://future-architect.github.io/articles/20210215/</id>
    <published>2021-02-14T15:00:00.000Z</published>
    <updated>2021-02-22T02:22:21.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>私はプロジェクトでシステムテスト、場合によっては本番稼働で起きる性能問題についてSQLチューニングを行ってきました。皆さんの中で、SQLチューニングは「専門的な知識」が必要とか「高レベルなスキル」を要求されると思っている方が居るかも？っと思い、このネタを扱いました。</p><p>確かにそういった内容もある事はあります。</p><p>ただ、多く（体感８割くらい）の性能問題については本当に単純なもので解決できます。特に昨今のFutureでは脱Oracleを掲げており、安価なDB製品を使う事による性能問題は如実に出てきています。そのため開発者一人一人が意識して性能問題を駆逐することにより、生産性・品質・コストに貢献できると考えこのお題にしました。</p><h1 id="テーブル設計の基本"><a href="#テーブル設計の基本" class="headerlink" title="テーブル設計の基本"></a>テーブル設計の基本</h1><img src="/images/20210215/database-schema-1895779_1280.png"><blockquote><p><a href="https://pixabay.com/ja/users/mcmurryjulie-2375405/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1895779" target="_blank" rel="noopener">mcmurryjulie</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1895779" target="_blank" rel="noopener">Pixabay</a>からの画像</p></blockquote><h2 id="なぜSQLの話でテーブル設計？"><a href="#なぜSQLの話でテーブル設計？" class="headerlink" title="なぜSQLの話でテーブル設計？"></a>なぜSQLの話でテーブル設計？</h2><p>何故SQLの話でテーブル設計の話が出るかというと、テーブル設計でSQLの構成が決まるからです。そのため、SQLを考える前にまずテーブル設計を考えてください。</p><h2 id="1POINT-これだけ意識して"><a href="#1POINT-これだけ意識して" class="headerlink" title="1POINT@これだけ意識して"></a>1POINT@これだけ意識して</h2><p>「<strong>参照（SELECT）しやすい設計</strong>」</p><p>これが基本です。何故SELECTを単純にするかというと、「登録（INSERT）・更新（UPDATE）は性能問題が発生する事が非常に少ない」ためです。あと付加的な利点として、「登録・更新機能（画面が特に）は複雑なのでスキルが高い人が割り当てられる」といった事もあり、開発者のスキル別に担当を割り当て易いといったこともあります。</p><p>それにSQLの複雑性が登録・更新に寄ったとしても難度が劇的に上がる事はそうそうなく、参照の方が難度上がりやすいです。</p><p>画面設計の例では</p><ol><li>単票画面 ＝ 1レコード</li><li>一覧画面の1行 ＝ 1レコード</li></ol><p>です。結合先のテーブルを含めてです。</p><p>実際にこう言った単純設計すると、こういった単純な形にならない事（特に一覧で）がありますが、単純な形にするために設計頑張って下さい。</p><p>コーディング・テストといったフェイズの工数が削減されます。</p><h1 id="SQLの基本"><a href="#SQLの基本" class="headerlink" title="SQLの基本"></a>SQLの基本</h1><h2 id="テーブル設計で完結できる？"><a href="#テーブル設計で完結できる？" class="headerlink" title="テーブル設計で完結できる？"></a>テーブル設計で完結できる？</h2><p>以下SQLの考慮点を書いてみたのですが、上記テーブル設計を完璧にこなした場合SQLは単純になり、ここで語る考慮点は不要になります。ただ、データ正規化や業務要件による抽出・表示情報の複雑性により、そう簡単にはいかないのがシステムです。</p><p>そのため、上記テーブル設計をした上で対応できない領域に対してSQLをどう構築するかを考える必要があります。</p><h2 id="1POINT-これだけ意識して-1"><a href="#1POINT-これだけ意識して-1" class="headerlink" title="1POINT@これだけ意識して"></a>1POINT@これだけ意識して</h2><p>「<strong>件数の少ないテーブルを駆動にする</strong>」</p><p>探索する場合駆動件数が増えると計算量が多くなり、SQLの実行結果取得に時間がかかります。</p><p>これは良く言われていますし、意識している人も多いと思いますが以下で考慮漏れが多いです。</p><ol><li>結合で件数が大きく膨れる</li><li>検索画面等の動的に抽出条件が変更される場合に網羅されていない。</li></ol><p>上記1のケースですが、結合した際に件数が増えた場合に最後に集約や絞り込みをかけるのではなく、クエリの途中で件数が膨らんだ直後に絞り込みを行いましょう。</p><p>この辺りの組み換えやインラインビュー化はデータ量を考慮する必要があるので、設計者が一番詳しいはずなので設計者が対応してほしい所です。</p><p>上記2のケースですが、基本は最も時間がかかる条件において最短で終わるように結合順を考えましょう。</p><p>最も時間がかかる条件というのが必須検索項目のみでの検索ですので、性能面で問題とならないよう<strong>業務要件を満たす最も件数が絞れる検索条件を必須項目となる設計をする</strong>ことが重要になってきます。このあたりを考慮して設計しないと後で性能問題となることが多いです。</p><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>過去のこれは…と思った例は以下です。</p><p><strong>とあるPJの帳票一覧画面の例</strong></p><ul><li>問題　：一覧の1行に紐付くテーブルが存在しない</li><li>詳細　：１行が複数の異なる帳票を束ねており、複数のテーブルのレコード有無とステータスを判定して、<br>　　　　行として表示するかと表示内容を決定している。</li><li>解決策：各テーブルの状態をサマリした状態管理用のテーブルを用意して、<br>　　　　帳票レコード作成・更新時に合わせて状態管理用のテーブルを更新する。</li></ul><p><strong>とあるPJの発注数初期値の例</strong></p><ul><li>問題　：発注数の初期値は各属性毎に設定可能で優先度も決まっている。<br>　　　　優先度は「商品＞サブクラス＞クラス＞ライン＞部門」と言った順になっており、<br>　　　　優先度の高いレコードが無ければ次の優先度といった形で決定される。<br>　　　　ただ、商品の属性の組み換えは行われるので各属性値のみを結合条件としている。<br>　　　　上位の属性に値が入っていれば結合は１回で済むが属性値が１つのみしか設定されていないので、<br>　　　　複数の結合条件で抽出しなければならない。</li><li>解決策：全てのカラムに値を入れる。商品の属性が変わったらそのタイミングで洗い替える。</li></ul><p>ここまで極端な例はそうそうないですが、、、</p><h1 id="宣伝（社内の人向け）"><a href="#宣伝（社内の人向け）" class="headerlink" title="宣伝（社内の人向け）"></a>宣伝（社内の人向け）</h1><p>社内の人だけが見れる社内動画サービスに動画をUpしています。</p><p>まだの人は是非ご覧ください！</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200605/index.html" data-iframely-url="//cdn.iframe.ly/0uvMWu3?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200616/index.html" data-iframely-url="//cdn.iframe.ly/tKbS2w1?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;私はプロジェクトでシステムテスト、場合によっては本番稼働で起きる性能問題についてSQLチューニングを行ってきました。皆さんの
      
    
    </summary>
    
    
      <category term="DB" scheme="https://future-architect.github.io/categories/DB/"/>
    
    
      <category term="SQL" scheme="https://future-architect.github.io/tags/SQL/"/>
    
      <category term="入門" scheme="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
      <category term="SQL入門" scheme="https://future-architect.github.io/tags/SQL%E5%85%A5%E9%96%80/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.16のsignal.NotifyContext()</title>
    <link href="https://future-architect.github.io/articles/20210212/"/>
    <id>https://future-architect.github.io/articles/20210212/</id>
    <published>2021-02-11T15:00:00.000Z</published>
    <updated>2021-03-06T12:58:37.838Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20210207/">Go 1.16リリース記念連載</a>の最終回は<code>signal.NotifyContext()</code>です。</p><p>ご存知のように、Go 1.7で<code>context.Context</code>が入ってから、少しずついろいろなAPIがContext対応になりました。</p><ul><li>1.7<ul><li><code>net</code>の<code>Dialer</code>が<code>DialContext()</code>メソッドを追加</li><li><code>net/http</code>の<code>http.Request</code>が<code>Context()</code>と<code>WithContext()</code>メソッドを追加。</li><li><code>os/exec</code>が<code>CommandContext</code>を追加</li></ul></li><li>1.8<ul><li><code>database/sql</code>が大幅に<code>context.Context</code>対応を追加</li><li><code>net/http</code>の<code>http.Server</code>が<code>Shutdown()</code>を追加</li><li><code>net</code>に<code>context.Context</code>に対応したリゾルバーを追加</li></ul></li><li>1.13<ul><li><code>net/http</code>の<code>NewRequestWithContext</code>と、<code>Request.Clone()</code>が追加</li></ul></li></ul><p>外部へのネットワークアクセスや、外部プロセス起動など、戻ってくる時間が未知数なものはContextを受け入れる口があります。</p><p>もともと<code>net.Conn</code>にはタイムアウトがありましたが、Contextを受け入れるAPIは共通インタフェースでタイムアウトの設定をしたり、外部呼び出しをキャンセルできるようになります。また、複数のAPIアクセスを並行して行う場合にも同じContextを渡すことで一括でタイムアウト設定したり、キャンセルできるようになります。</p><p>Goは例外処理（大域脱出による処理の中断と、それにともなうリソース開放）はありませんが、並行処理に対応した一括処理中断は、並行処理時代の例外処理と言えると思います。現代においては、外部API呼び出しやデータベースアクセス、外部プロセス起動を行うようなロジックを作成する場合、Contextを第一引数として取るように設計するのが紳士淑女の嗜みです。</p><p>すべてのキャンセル処理をContextで統一すると一括処理中断がしやすくなるので、異常処理が中央集権的になって、見通しが良くなります。Doneというメソッド名で終了判断のselect等で利用できてコードがみやすくなるので、僕は実行フローに関係するような非同期の情報伝達は全部Context化していました。</p><p>一方でユーザー主導のキャンセルのトリガーとなるシグナルはContextのAPIがなく、チャネルの提供でした。そのため、次のような関数を作ってContextに合わせるというのを1.15まではする必要がありました。</p><figure class="highlight go"><figcaption><span>1.15まででシグナルをContext化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">signalContext</span><span class="params">()</span> <span class="params">(context.Context, <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">ctx, cancel := context.WithCancel(context.Background())</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">signal.Notify(c, os.Interrupt, os.Kill)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-c:</span><br><span class="line">fmt.Fprintln(os.Stderr, <span class="string">&quot;signal received&quot;</span>)</span><br><span class="line">cancel()</span><br><span class="line"><span class="keyword">case</span> &lt;-ctx.Done():</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> ctx, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">signal.Stop(c)</span><br><span class="line">cancel()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.16では<code>signal.NotifyContext()</code>が入ったので、このような関数を手作りする必要がなくなりました。タイムアウトでもシグナルでも終了するような行儀の良いプログラムは次のように書けます。数値を変えてタイムアウトさせたり、正常終了させたり、シグナルを送ってみたり、いろいろ遊んでみてください。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line"><span class="string">&quot;os/signal&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt)</span><br><span class="line"><span class="keyword">defer</span> stop()</span><br><span class="line">ctx, cancel := context.WithTimeout(ctx, time.Second*<span class="number">5</span>)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">cmd := exec.CommandContext(ctx, <span class="string">&quot;sleep&quot;</span>, <span class="string">&quot;10&quot;</span>)</span><br><span class="line">err := cmd.Run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> ctx.Err() != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;error: %v\n&quot;</span>, ctx.Err())</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;error: %v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>err</code>の周りの処理がif文が増えています。<code>cmd.Run()</code>のエラーは、タイムアウトでも必ずsignal: killedとなってしまいます。これはexec.CommandContextがタイムアウト時にプロセスにシグナルを送ってkillするためです。そのシグナルの理由が本当にユーザーが子プロセスに向けてKILLを送ったのか、Goのランタイムが送ったものなのかを区別するにはContext側のエラーを見る必要があります。</p><p><img src="/images/20210212/contxt-cancel.png" alt=""></p><p>Goが良く使われるようなウェブサービスをシグナルでgracefulにシャットダウンするのはこんな感じになるでしょうか</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/signal&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt)</span><br><span class="line"><span class="keyword">defer</span> stop()</span><br><span class="line"></span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">io.WriteString(w, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">server := &amp;http.Server&#123;</span><br><span class="line">Addr:    <span class="string">&quot;:8888&quot;</span>,</span><br><span class="line">Handler: <span class="literal">nil</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">&lt;-ctx.Done()</span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), <span class="number">5</span>*time.Second)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line">server.Shutdown(ctx)</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(<span class="string">&quot;start receiving at :8888&quot;</span>)</span><br><span class="line">log.Fatal(server.ListenAndServe())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これまでシグナル処理をサボっていた人も、Contextはちょっと面倒と思っていた人も、ぜひ<code>signal.NotifyContext()</code>でぜひハッピーシグナルライフを送ってください。Goユーザーは行儀が良い、という評判をみんなで広めましょう。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210207/index.html" data-iframely-url="//cdn.iframe.ly/QsgsKHg?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20210207/&quot;&gt;Go 1.16リリース記念連載&lt;/a&gt;の最終回は&lt;code&gt;signal.NotifyContext()&lt;/code&gt;です。&lt;/p&gt;
&lt;p&gt;ご存知
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Go1.16" scheme="https://future-architect.github.io/tags/Go1-16/"/>
    
  </entry>
  
  <entry>
    <title>Go1.16からのio/ioutilパッケージ</title>
    <link href="https://future-architect.github.io/articles/20210210/"/>
    <id>https://future-architect.github.io/articles/20210210/</id>
    <published>2021-02-09T15:00:00.000Z</published>
    <updated>2021-03-06T03:18:07.381Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは、TIGの辻です。<a href="https://future-architect.github.io/articles/20210207/">Go 1.16連載</a>の3記事目です。</p><p>Go1.16でアップデートがあった <code>io/ioutil</code> パッケージが <code>&quot;deprecated&quot;</code> になる話題のまとめです。</p><h2 id="サマリ"><a href="#サマリ" class="headerlink" title="サマリ"></a>サマリ</h2><ul><li>Go1.16から <code>io/ioutil</code> パッケージの機能が <code>os</code> と <code>io</code> パッケージに移行した</li><li>これから新しく実装するコードは <code>io</code> や <code>os</code> パッケージの新しい関数を使うことが推奨される</li><li><code>io/ioutil</code> パッケージが <code>&quot;deprecated&quot;</code> になるが <code>&quot;deprecated&quot;</code> といっても将来壊れる、ということではない<ul><li>既存のコードは動作し続ける</li></ul></li><li><code>go fix</code> コマンドは未対応</li></ul><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>Go1.16から <code>io/ioutil</code> パッケージに含まれる関数が <code>&quot;deprecated&quot;</code> になります。関連するプロポーザルは <a href="https://github.com/golang/go/issues/40025" target="_blank" rel="noopener">#40025</a> と <a href="https://github.com/golang/go/issues/42026" target="_blank" rel="noopener">#42026</a> です。<a href="https://blog.golang.org/package-names" target="_blank" rel="noopener">Package names</a> で良くないパッケージ名として紹介されているように、一般的には <code>util</code> などというパッケージ名は、純粋にユーティリティを提供するパッケージではない限り避けるべき名前です。<code>io/ioutil</code> の命名に関しては <a href="https://github.com/golang/go/issues/19660" target="_blank" rel="noopener">#19660</a> にあるように以前から理解しにくいと言われていました。</p><p><code>io/ioutil</code> パッケージは主にパッケージのインポートサイクルを回避するために存在します。<a href="https://talks.golang.org/2016/refactor.article" target="_blank" rel="noopener">Codebase Refactoring</a> にあるようにGoの <code>io</code> パッケージは <code>os</code> パッケージに依存することはできません。<code>io/ioutil</code> パッケージが直接/間接的に <code>os</code> パッケージと <code>io</code> パッケージを参照することで、インポートサイクルを回避したということです。</p><img src="/images/20210210/package_dependency.svg" class="img-middle-size"><p>さて <code>io/ioutil</code> では以下の8つの型/関数がExportされています。</p><ul><li><code>Discard</code></li><li><code>NopCloser</code></li><li><code>ReadAll</code></li><li><code>ReadDir</code></li><li><code>ReadFile</code></li><li><code>TempDir</code></li><li><code>TempFile</code></li><li><code>WriteFile</code></li></ul><p>これらのすべての型/関数が <code>&quot;deprecated&quot;</code> になり、<code>io</code> パッケージと <code>os</code> パッケージに機能が移動します。</p><ul><li><code>io</code> パッケージに移動する型/関数<ul><li><code>Discard</code></li><li><code>NopCloser</code></li><li><code>ReadAll</code></li></ul></li><li><code>os</code> パッケージに移動する関数<ul><li><code>ReadDir</code></li><li><code>ReadFile</code></li><li><code>TempDir</code> -&gt; <code>MkdirTemp</code> (リネーム)</li><li><code>TempFile</code> -&gt; <code>CreateTemp</code> (リネーム)</li><li><code>WriteFile</code></li></ul></li></ul><h3 id="io-パッケージに移動する型-関数"><a href="#io-パッケージに移動する型-関数" class="headerlink" title="io パッケージに移動する型/関数"></a><code>io</code> パッケージに移動する型/関数</h3><p><code>io</code> パッケージに移動する型/関数は以下の3つです。</p><ul><li><code>Discard</code></li><li><code>NopCloser</code></li><li><code>ReadAll</code></li></ul><p><a href="https://github.com/golang/go/issues/40025" target="_blank" rel="noopener">#40025</a> によると <code>Discard</code> と <code>NopCloser</code> はたまたま <code>io/ioutil</code> パッケージに含まれてしまった、とのことです。<code>ReadAll</code> も本来であれば <code>Reader</code> や <code>Writer</code> のヘルパー関数が <code>io</code> パッケージで提供されていることにならって <code>io</code> パッケージに含まれる機能でしたが、<code>bytes.Buffer</code> にアクセスする実装となっていており、<code>bytes</code> パッケージが <code>os</code> パッケージに依存する関係で <code>io/ioutil</code> パッケージに追いやられました。</p><p>しかしながら <code>ReadAll</code> は <code>bytes.Buffer</code> を使う必要がないため、Go1.16の <code>ReadAll</code> の実装は <code>bytes</code> パッケージを使わない実装になっています。</p><ul><li>Go1.15の <code>ioutil.ReadAll</code> の実装(<a href="https://github.com/golang/go/blob/release-branch.go1.15/src/io/ioutil/ioutil.go#L16-L46" target="_blank" rel="noopener">io/ioutil/ioutil.go</a>)</li></ul><figure class="highlight go"><figcaption><span>io/ioutil/ioutil.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// readAll reads from r until an error or EOF and returns the data it read</span></span><br><span class="line"><span class="comment">// from the internal buffer allocated with a specified capacity.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readAll</span><span class="params">(r io.Reader, capacity <span class="keyword">int64</span>)</span> <span class="params">(b []<span class="keyword">byte</span>, err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line"><span class="comment">// If the buffer overflows, we will get bytes.ErrTooLarge.</span></span><br><span class="line"><span class="comment">// Return that as an error. Any other panic remains.</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">e := <span class="built_in">recover</span>()</span><br><span class="line"><span class="keyword">if</span> e == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> panicErr, ok := e.(error); ok &amp;&amp; panicErr == bytes.ErrTooLarge &#123;</span><br><span class="line">err = panicErr</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">int64</span>(<span class="keyword">int</span>(capacity)) == capacity &#123;</span><br><span class="line">buf.Grow(<span class="keyword">int</span>(capacity))</span><br><span class="line">&#125;</span><br><span class="line">_, err = buf.ReadFrom(r)</span><br><span class="line"><span class="keyword">return</span> buf.Bytes(), err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadAll reads from r until an error or EOF and returns the data it read.</span></span><br><span class="line"><span class="comment">// A successful call returns err == nil, not err == EOF. Because ReadAll is</span></span><br><span class="line"><span class="comment">// defined to read from src until EOF, it does not treat an EOF from Read</span></span><br><span class="line"><span class="comment">// as an error to be reported.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadAll</span><span class="params">(r io.Reader)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> readAll(r, bytes.MinRead)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Go1.16の <code>io.ReadAll</code> の実装(<a href="https://github.com/golang/go/blob/release-branch.go1.16/src/io/io.go#L622-L642" target="_blank" rel="noopener">io/io.go</a>)</li></ul><figure class="highlight go"><figcaption><span>io/io.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReadAll reads from r until an error or EOF and returns the data it read.</span></span><br><span class="line"><span class="comment">// A successful call returns err == nil, not err == EOF. Because ReadAll is</span></span><br><span class="line"><span class="comment">// defined to read from src until EOF, it does not treat an EOF from Read</span></span><br><span class="line"><span class="comment">// as an error to be reported.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadAll</span><span class="params">(r Reader)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">0</span>, <span class="number">512</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(b) == <span class="built_in">cap</span>(b) &#123;</span><br><span class="line"><span class="comment">// Add more capacity (let append pick how much).</span></span><br><span class="line">b = <span class="built_in">append</span>(b, <span class="number">0</span>)[:<span class="built_in">len</span>(b)]</span><br><span class="line">&#125;</span><br><span class="line">n, err := r.Read(b[<span class="built_in">len</span>(b):<span class="built_in">cap</span>(b)])</span><br><span class="line">b = b[:<span class="built_in">len</span>(b)+n]</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err == EOF &#123;</span><br><span class="line">err = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>バイトスライスの容量を拡張するときに一旦 <code>byte</code> 型のゼロ値0をバイトスライスにappendして容量を拡張し、長さは元のスライスの長さに戻すことでスライスの容量だけ予め拡張するオシャレな実装になっています。</p><p><code>io/ioutil</code> パッケージからは <code>io.ReadAll</code> に委譲するように実装されています。</p><ul><li>Go1.16の <code>ioutil.ReadAll</code> の実装(<a href="https://github.com/golang/go/blob/release-branch.go1.16/src/io/ioutil/ioutil.go#L20-L28" target="_blank" rel="noopener">io/ioutil/ioutil.go</a>)</li></ul><figure class="highlight go"><figcaption><span>io/ioutil/ioutil.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReadAll reads from r until an error or EOF and returns the data it read.</span></span><br><span class="line"><span class="comment">// A successful call returns err == nil, not err == EOF. Because ReadAll is</span></span><br><span class="line"><span class="comment">// defined to read from src until EOF, it does not treat an EOF from Read</span></span><br><span class="line"><span class="comment">// as an error to be reported.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// As of Go 1.16, this function simply calls io.ReadAll.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadAll</span><span class="params">(r io.Reader)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> io.ReadAll(r)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="os-パッケージに移動する関数"><a href="#os-パッケージに移動する関数" class="headerlink" title="os パッケージに移動する関数"></a><code>os</code> パッケージに移動する関数</h3><p><code>os</code> パッケージに移行する関数は以下の5つです。<code>io/ioutil</code> パッケージに含まれていた下記の関数はOSファイルシステムのヘルパー関数です。</p><ul><li><code>ReadDir</code></li><li><code>ReadFile</code></li><li><code>TempDir</code> -&gt; <code>MkdirTemp</code> (リネーム)</li><li><code>TempFile</code> -&gt; <code>CreateTemp</code> (リネーム)</li><li><code>WriteFile</code></li></ul><h4 id="リネーム"><a href="#リネーム" class="headerlink" title="リネーム"></a>リネーム</h4><p><code>ioutil</code> の2つの関数がリネームになっています。<code>TempDir</code> 関数は既に <code>os</code> パッケージに存在します。<code>os.TempDir</code> 関数はOSのデフォルトの一時ディレクトリを返却するAPIです。<code>ioutil</code> パッケージの <code>TempFile</code> は今回移行した <code>os</code> パッケージでは <code>MkdirTemp</code> という関数になっています。また <code>MkdirTemp</code> との命名の整合をとるために <code>ioutil</code> パッケージに存在していた <code>TempFile</code> は <code>CreateTemp</code> という命名になっています。</p><h4 id="シグネチャ"><a href="#シグネチャ" class="headerlink" title="シグネチャ"></a>シグネチャ</h4><p><code>ReadDir</code> は返却するシグネチャが更新されています。移行後の <code>ReadDir</code> は <code>fs.FileInfo</code> ではなく <code>os.DirEntry</code> を返却するようになっています。</p><ul><li>Go1.16の <code>os.ReadDir</code> の実装(<a href="https://github.com/golang/go/blob/release-branch.go1.16/src/os/dir.go#L110-L125" target="_blank" rel="noopener">os/dir.go</a>)</li></ul><figure class="highlight go"><figcaption><span>os/dir.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReadDir reads the named directory,</span></span><br><span class="line"><span class="comment">// returning all its directory entries sorted by filename.</span></span><br><span class="line"><span class="comment">// If an error occurs reading the directory,</span></span><br><span class="line"><span class="comment">// ReadDir returns the entries it was able to read before the error,</span></span><br><span class="line"><span class="comment">// along with the error.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadDir</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">([]DirEntry, error)</span></span> &#123;</span><br><span class="line">f, err := Open(name)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">dirs, err := f.ReadDir(<span class="number">-1</span>)</span><br><span class="line">sort.Slice(dirs, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> dirs[i].Name() &lt; dirs[j].Name() &#125;)</span><br><span class="line"><span class="keyword">return</span> dirs, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Go1.16の <code>ioutil.ReadDir</code> の実装(<a href="https://github.com/golang/go/blob/release-branch.go1.16/src/io/ioutil/ioutil.go#L49-L70" target="_blank" rel="noopener">io/ioutil/ioutil.go</a>)</li></ul><figure class="highlight go"><figcaption><span>io/ioutil/ioutil.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReadDir reads the directory named by dirname and returns</span></span><br><span class="line"><span class="comment">// a list of fs.FileInfo for the directory's contents,</span></span><br><span class="line"><span class="comment">// sorted by filename. If an error occurs reading the directory,</span></span><br><span class="line"><span class="comment">// ReadDir returns no directory entries along with the error.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// As of Go 1.16, os.ReadDir is a more efficient and correct choice:</span></span><br><span class="line"><span class="comment">// it returns a list of fs.DirEntry instead of fs.FileInfo,</span></span><br><span class="line"><span class="comment">// and it returns partial results in the case of an error</span></span><br><span class="line"><span class="comment">// midway through reading a directory.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadDir</span><span class="params">(dirname <span class="keyword">string</span>)</span> <span class="params">([]fs.FileInfo, error)</span></span> &#123;</span><br><span class="line">f, err := os.Open(dirname)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">list, err := f.Readdir(<span class="number">-1</span>)</span><br><span class="line">f.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">sort.Slice(list, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> list[i].Name() &lt; list[j].Name() &#125;)</span><br><span class="line"><span class="keyword">return</span> list, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="quot-deprecated-quot-とは"><a href="#quot-deprecated-quot-とは" class="headerlink" title="&quot;deprecated&quot; とは"></a><code>&quot;deprecated&quot;</code> とは</h3><p><code>&quot;deprecated&quot;</code> とあるため、将来的に <code>ioutil</code> パッケージを使っているプログラムが動作しなくなるのでは？と思う方もいるかもしれません。<code>&quot;deprecated&quot;</code> が何を意味するのか Russ Cox 氏がツイートしています。</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Seeing discussion of io/ioutil deprecation in various places. <br><br>To be clear: in Go, “deprecated” means only “there is a better, preferred way.” It does not mean “will break in the future.”<br><br>Today’s programs using ioutil.ReadFile and friends will keep working forever. <a href="https://twitter.com/hashtag/golang?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#golang</a></p>&mdash; Russ Cox (@_rsc) <a href="https://twitter.com/_rsc/status/1351676094664110082?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">January 19, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>すわなち「より良い、好ましい方法がある」という意味で「将来的に壊れる」という意味ではない、ということです。<a href="https://golang.org/doc/go1compat" target="_blank" rel="noopener">Go 1 and the Future of Go Programs</a> にもあるように、少なくともGo1の間はソースレベルの後方互換性が保たれます。</p><p><code>ioutil</code> パッケージの関数はとても便利ですので、多くの実装で使用されていますが、<code>ioutil</code> パッケージを使っている既存の実装は引き続きそのまま動作します。新規に実装する場合は <code>os</code> パッケージや <code>io</code> パッケージに含まれる関数を利用するのが推奨されています。</p><h3 id="quot-deprecated-quot-になったパッケージの移行"><a href="#quot-deprecated-quot-になったパッケージの移行" class="headerlink" title="&quot;deprecated&quot; になったパッケージの移行"></a><code>&quot;deprecated&quot;</code> になったパッケージの移行</h3><p><a href="https://golang.org/cmd/fix/" target="_blank" rel="noopener"><code>go fix</code></a> を使うと、古いAPIを使用しているGoのプログラムを検出し、新しいAPIに書き換えることができます。馴染みがあるAPIだと <code>context</code> パッケージがあげられます。もともとは <code>golang.org/x</code> リポジトリ配下の準標準ライブラリとして実装されていた <code>context</code> パッケージですが、Go1.7以降は標準ライブラリに移行しています。以下のファイルがあった場合に <code>go tool fix -diff main.go</code> とすると新しいAPIに書き換えることができます。</p><ul><li>main.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"golang.org/x/net/context"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line">doSomething(ctx)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line"><span class="comment">// doing something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Diffを確認できます。<code>-diff</code> オプションを除けば、ファイルを直接更新できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ go tool fix -diff main.go</span><br><span class="line">main.go: fixed context</span><br><span class="line">diff main.go fixed/main.go</span><br><span class="line">--- /tmp/go-fix572668930        2021-02-06 08:48:06.046862800 +0900</span><br><span class="line">+++ /tmp/go-fix017905529        2021-02-06 08:48:06.048069100 +0900</span><br><span class="line">@@ -1,6 +1,6 @@</span><br><span class="line"> package main</span><br><span class="line"></span><br><span class="line">-import <span class="string">"golang.org/x/net/context"</span></span><br><span class="line">+import <span class="string">"context"</span></span><br><span class="line"></span><br><span class="line"> func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">        ctx := context.Background()</span><br></pre></td></tr></table></figure><p><code>ioutil</code> パッケージの <code>go fix</code> に関して <a href="https://github.com/golang/go/issues/42026#issuecomment-749053679" target="_blank" rel="noopener">#42026</a> で言及されています。残念ながら <strong><a href="https://github.com/golang/go/issues/32816" target="_blank" rel="noopener">#32816</a> のプロポーザルには含まれない</strong> だろう、とコメントしています。将来的に <code>go fix</code> コマンド一発で既存の <code>ioutil</code> パッケージを使っているAPIから <code>io</code> パッケージや <code>os</code> パッケージのAPIへ移行ができると嬉しいですね。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://tip.golang.org/doc/go1.16#ioutil" target="_blank" rel="noopener">https://tip.golang.org/doc/go1.16#ioutil</a></li><li><a href="https://github.com/golang/go/issues/40025" target="_blank" rel="noopener">https://github.com/golang/go/issues/40025</a></li><li><a href="https://github.com/golang/go/issues/42026" target="_blank" rel="noopener">https://github.com/golang/go/issues/42026</a></li></ul><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210207/index.html" data-iframely-url="//cdn.iframe.ly/QsgsKHg?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは、TIGの辻です。&lt;a href=&quot;https://future-architect.github.io/articles/20210207/&quot;&gt;Go 1.16連載&lt;/a&gt;の3記事目です。&lt;/p&gt;
&lt;p&gt;Go1.16でアップデートがあった &lt;code&gt;io/iou
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Go1.16" scheme="https://future-architect.github.io/tags/Go1-16/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.16のgo installについて</title>
    <link href="https://future-architect.github.io/articles/20210209/"/>
    <id>https://future-architect.github.io/articles/20210209/</id>
    <published>2021-02-08T15:00:00.000Z</published>
    <updated>2021-02-15T05:34:26.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG真野です。</p><p><a href="https://future-architect.github.io/articles/20210207/">Go 1.16連載</a>の2つ目となるこの記事では、Go 1.16で機能追加された <code>go install</code> について説明します。</p><p><img src="/images/20210209/peach-3425656_1280.jpg" alt=""></p><blockquote><p><a href="https://pixabay.com/ja/users/dariasophia-9082096/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3425656" target="_blank" rel="noopener">dariasophia</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3425656" target="_blank" rel="noopener">Pixabay</a>からの画像</p></blockquote><h1 id="go-installの新機能"><a href="#go-installの新機能" class="headerlink" title="go installの新機能"></a>go installの新機能</h1><p>Go 1.16から <code>go install</code>に新機能が追加されました。<code>go install</code> 自体は従来から存在しているので全く新しいコマンドが増えたわけではなく、機能拡張されたイメージです。</p><ul><li>現時点のリリースノートの記載は<a href="https://tip.golang.org/doc/go1.16#tools" target="_blank" rel="noopener">こちら</a>、元のIssueは<a href="https://github.com/golang/go/issues/40276" target="_blank" rel="noopener">こちら</a>です。起票されてから半年弱でリリースに含まれました。</li></ul><p><code>go install</code>の機能拡張部分ですが簡単に言うと、<strong>バージョン指定できるようになりました</strong>。言ってみればそれだけです。嬉しいこととして、それによって<code>go.mod</code>の書き換え無しにツールなどのインストールを行いやすくなりました。ちなみに、インストールとはコードをコンパイルして、<code>$GOPATH/bin</code>とか<code>$HOME/go/bin</code>にビルドしたバイナリを配備してくれることです。</p><p>従来は<code>go get</code>でツールのインストールも行えていましたが、同時に<code>go.mod</code>も書き換わってしまいました。メインで開発するモジュールで利用するライブラリなら<code>go.mod</code>に追記されることが自然ですが、例えばGoのLanguage Serverである<code>gopls</code>や、<code>stringer</code> といった開発系のコマンドラインツールの場合は少し困りました。</p><p>どういうことかと言うと、メインで開発するモジュール本体の<code>go.mod</code>で、例えば<code>go get golang.org/x/tools/cmd/stringer</code>でインストールすると一時的に <code>go.mod</code> に追加されてしまうのです。もちろん、コードの中にはimportされていないため、<code>go mod tidy</code>すると消すことができますが、新規参画者の最初の環境構築で手順を間違えると不要な差分が出てきて少し手間でした。参画タイミングによって新しいバージョンが出たりすると、<code>go get</code>で<code>go.mod</code>のバージョンが書き換わるのもまた問題でした。また、逆に <code>go mod tidy</code> すると<code>go.mod</code>から削除されますが、つまり開発系ツール自体のバージョン管理ができなくなる問題もありました。そちらについては後述します。</p><p>今回追加された <code>go install</code> を用いればこういったストレスからは開放されるかと思います。なんとなく <code>go get</code>の機能が分割され、今後はGo Module追加編集のための<code>go get</code>、ツールなどのバイナリインストールの<code>go install</code>と住み分けることができそうです。</p><h1 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h1><p><code>go install example.com/cmd@v1.0.0</code> の形式で利用可能です。<code>go get</code>と同じ指定方法ですね。</p><p>例えば、stringerであれば</p><p><code>go get golang.org/x/tools/cmd/stringer@v0.1.0</code>です。バージョンは必須とのこと。最新で良い場合は<code>@latest</code>をつけます。</p><h1 id="動かしてみる"><a href="#動かしてみる" class="headerlink" title="動かしてみる"></a>動かしてみる</h1><p>Go 1.16のRelease Candidate1で<code>go install</code>を動かしてみます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;go version</span><br><span class="line">go version go1.16rc1 windows&#x2F;amd64</span><br></pre></td></tr></table></figure><p>適当なフォルダで <code>go mod init</code> して、<code>go get golang.org/x/tools/cmd/stringer@v0.1.0</code> と <code>go install golang.org/x/tools/cmd/stringer@v0.1.0</code> の実行結果を比較してみます。</p><figure class="highlight bash"><figcaption><span>go_get版</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;go get golang.org/x/tools/cmd/stringer@v0.1.0</span><br><span class="line">go get: added golang.org/x/tools v0.1.0</span><br><span class="line"></span><br><span class="line">&gt;<span class="built_in">type</span> go.mod</span><br><span class="line">module github.com/ma91n/go116</span><br><span class="line"></span><br><span class="line">go 1.14</span><br><span class="line"></span><br><span class="line">require golang.org/x/tools v0.1.0 // indirect</span><br><span class="line"></span><br><span class="line">&gt;stringer</span><br><span class="line">Usage of stringer:</span><br><span class="line">        stringer [flags] -<span class="built_in">type</span> T [directory]</span><br><span class="line">        stringer [flags] -<span class="built_in">type</span> T files... <span class="comment"># Must be a single package</span></span><br><span class="line">（省略）</span><br></pre></td></tr></table></figure><p>Go 1.16だとまだ <code>go get</code> でインストールもできるようですね。（将来的に消える可能性があるので注意です）</p><p>続いて、<code>go install</code> で動かしてみます。</p><figure class="highlight bash"><figcaption><span>go_install版</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;go install golang.org/x/tools/cmd/stringer@v0.1.0</span><br><span class="line"></span><br><span class="line">&gt;<span class="built_in">type</span> go.mod</span><br><span class="line">module github.com/ma91n/go116</span><br><span class="line"></span><br><span class="line">go 1.14</span><br><span class="line"></span><br><span class="line">&gt;stringer</span><br><span class="line">Usage of stringer:</span><br><span class="line">        stringer [flags] -<span class="built_in">type</span> T [directory]</span><br><span class="line">        stringer [flags] -<span class="built_in">type</span> T files... <span class="comment"># Must be a single package</span></span><br><span class="line">（省略）</span><br></pre></td></tr></table></figure><p>リリースノート通り、<code>go.mod</code> への副作用はありませんでした。</p><h1 id="ローカルリポジトリに対してのgo-install"><a href="#ローカルリポジトリに対してのgo-install" class="headerlink" title="ローカルリポジトリに対してのgo install"></a>ローカルリポジトリに対しての<code>go install</code></h1><p>こちらは従来どおり、そのまま利用可能です。</p><figure class="highlight go"><figcaption><span>mycmd.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Happy Go 1.16 !!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下のような適当なmainパッケージなファイルを作成してinstallします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ go install mycmd.go</span><br><span class="line">$ mycmd</span><br><span class="line">Happy Go 1.16 !!</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>ローカルリポジトリ及び、リモートリポジトリ両方に同じように操作ができるようになったと考えると、なんとなく直感的にうまくコマンドが整理されたのかなと感じました。正確にはGo 1.16時点でも使えたのですが、<code>go get</code>をヘビーユースして<code>go install</code>はほとんど使わなかった..。</p><h1 id="Go-Moduleで開発系ツールを管理するハックとの関係は？"><a href="#Go-Moduleで開発系ツールを管理するハックとの関係は？" class="headerlink" title="Go Moduleで開発系ツールを管理するハックとの関係は？"></a>Go Moduleで開発系ツールを管理するハックとの関係は？</h1><p><a href="https://qiita.com/nirasan/items/2bdbf0ada7b4182d56ce" target="_blank" rel="noopener">ここ</a>にあるように、開発系ツールをGo Modulesでバージョン管理するために、<code>// +build</code>のビルドタグ＋ブランクインポートするようなハックがありました。</p><figure class="highlight go"><figcaption><span>tools.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +build tools</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> _ <span class="string">"golang.org/x/tools/cmd/stringer"</span></span><br></pre></td></tr></table></figure><p>また、巷では、toolsフォルダをつくって、そこで<code>go mod init tools</code>して、上記の記事のようなブランクインポートする流派もあります。こうすると開発しているモジュールが依存するパッケージと、ツールのバージョン別に管理できるプラクティスとして一定の広がりがあったと思います。</p><p>どちらにしても開発ツールのバージョンを<code>go.mod</code>に記載し、そのディレクトリで<code>go install golang.org/x/tools/cmd/stringer</code> などとしていました。複数あるとそのまま複数個installコマンドを愚直に打つか、<code>cat tools.go | grep _ | awk -F&#39;&quot;&#39; &#39;{print $2}&#39; | xargs -tI % go install %</code> などでシェル技が炸裂していました。</p><p>Go 1.16での変化ですが、RC1時点だと <code>go get</code>でインストールはまだ行ってくれます。しかし将来的に使えなくなる可能性があるので、素直に <code>go install</code> を使いましょう。従来の<code>go install</code>はバージョン指定ができなかったため、わざわざGo Module管理するためにハックを繰り返していましたが、Go 1.16だとそもそも不要です。</p><p>素直に <code>make install</code> でセットアップするが正解になる気がします。</p><figure class="highlight makefile"><figcaption><span>Makefile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: install</span></span><br><span class="line"></span><br><span class="line"><span class="section">install:</span></span><br><span class="line">go install golang.org/x/tools/gopls@v0.6.5</span><br><span class="line">go install golang.org/x/tools/cmd/stringer@v0.1.0</span><br></pre></td></tr></table></figure><p>このあたりのプラクティスは、Go Wikiの<a href="https://github.com/golang/go/wiki/Modules#how-can-i-track-tool-dependencies-for-a-module" target="_blank" rel="noopener">How can I track tool dependencies for a module?</a>がどう変わるかをウォッチしていこうと思います。（多分、変わるはず..）</p><h1 id="go-generateディレクティブ"><a href="#go-generateディレクティブ" class="headerlink" title="//go:generateディレクティブ"></a><code>//go:generate</code>ディレクティブ</h1><p>Go Modules が導入されてから、公開されている Go 製のツールは go run によるダウンロード・ビルド・実行が一度にできるようになっていたのですが、Go1.16だと<code>go.mod</code>が自動で更新されない影響か、<code>//go:generate go run golang.org/x/tools/cmd/stringer -type=Pill</code> でインストール無しで <code>go generate</code> するだけでコード生成するハックが使えなくなりました。</p><figure class="highlight go"><figcaption><span>pill.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> generate</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:generate go run golang.org/x/tools/cmd/stringer -type=Pill</span></span><br><span class="line"><span class="keyword">type</span> Pill <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">Placebo Pill = <span class="literal">iota</span></span><br><span class="line">Aspirin</span><br><span class="line">Ibuprofen</span><br><span class="line">Paracetamol</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>上記のようにすると、各開発者が事前準備無しに<code>go generate</code>さえ実行するだけで済んだのですが、Go1.16だとこうなります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;go generate</span><br><span class="line">no required module provides package golang.org/x/tools/cmd/stringer; to add it:</span><br><span class="line">        go get golang.org/x/tools/cmd/stringer</span><br><span class="line">pill.go:3: running <span class="string">"go"</span>: <span class="built_in">exit</span> status 1</span><br></pre></td></tr></table></figure><p>同じ開発体験を守りたいなら、複数行に記載することになると思います。</p><figure class="highlight go"><figcaption><span>複数行に記載</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> generate</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:generate go install golang.org/x/tools/cmd/stringer@latest</span></span><br><span class="line"><span class="comment">//go:generate stringer -type=Pill</span></span><br><span class="line"><span class="keyword">type</span> Pill <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">Placebo Pill = <span class="literal">iota</span></span><br><span class="line">Aspirin</span><br><span class="line">Ibuprofen</span><br><span class="line">Paracetamol</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;go generate</span><br><span class="line"></span><br><span class="line">&gt;<span class="built_in">type</span> pill_string.go</span><br><span class="line">// Code generated by <span class="string">"stringer -type=Pill"</span>; DO NOT EDIT.</span><br><span class="line"></span><br><span class="line">package generate</span><br><span class="line"></span><br><span class="line">import <span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">_</span></span>() &#123;</span><br><span class="line">        // An <span class="string">"invalid array index"</span> compiler error signifies that the constant values have changed.</span><br><span class="line">        // Re-run the stringer <span class="built_in">command</span> to generate them again.</span><br><span class="line">        var x [1]struct&#123;&#125;</span><br><span class="line">        _ = x[Placebo-0](</span><br><span class="line">（省略）</span><br></pre></td></tr></table></figure><p>無事生成はできました。<code>//go:generate</code>ディレクティブに <code>go run</code> コマンドを書くのはちょっとしたハック感があって好きだったのですが、初見では混乱するので消えて良かったのかもしれませんね。</p><h1 id="余談"><a href="#余談" class="headerlink" title="余談"></a>余談</h1><p><code>go build</code>とか<code>go test</code>で自動的に<code>go.mod</code>が更新されない変わりに、<code>go mod tidy</code>してねってメッセージがでるようなりました。どのタイミングで表示してくれるのか細かくは良く分かりませんが、気がついたらバージョンを上げると良いかと思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li><code>go install</code>でバージョンを指定ができるようになった</li><li>いくつかのハックが陳腐化したり、使えなくなったが、試行錯誤した経験は我々の中にずっと残り続ける</li></ul><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210207/index.html" data-iframely-url="//cdn.iframe.ly/QsgsKHg?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG真野です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/ar
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Makefile" scheme="https://future-architect.github.io/tags/Makefile/"/>
    
      <category term="Go1.16" scheme="https://future-architect.github.io/tags/Go1-16/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.16からリリースされたgo:embedとは</title>
    <link href="https://future-architect.github.io/articles/20210208/"/>
    <id>https://future-architect.github.io/articles/20210208/</id>
    <published>2021-02-07T15:00:00.000Z</published>
    <updated>2021-02-12T00:23:04.030Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p>この記事は<a href="https://future-architect.github.io/articles/20210207/">Go 1.16連載</a>の1記事目です。</p><p>トップバッターとして<code>go:embed</code>について記事を書きます。</p><h2 id="go-embedとは"><a href="#go-embedとは" class="headerlink" title="go:embedとは"></a>go:embedとは</h2><p>プロポーザルとなるissueは<a href="https://github.com/golang/go/issues/41191" target="_blank" rel="noopener">こちら</a>、2020年9月のissue作成から約5ヶ月の時を経て<code>go:embed</code>がリリースに含まれることになりました。</p><p>embedとは埋め込みという意味です、その名の通りファイル埋め込みをサポートするためのパッケージです。ファイルを読み込むだけなら<code>os</code>や<code>io/ioutil</code>でも行うことが可能ですが、<code>go:embed</code>ならではの特徴を説明します。</p><p>ちなみに<code>io/ioutil</code>はGo 1.16で<code>deprecated</code>になりました、詳しくは連載の他の記事で説明します。</p><h2 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h2><p>手始めにサンプルコード、<code>main.go</code>を書いてみました。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_ <span class="string">"embed"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed sample.json</span></span><br><span class="line"><span class="keyword">var</span> sampleBytes []<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> sample <span class="keyword">struct</span> &#123;</span><br><span class="line">Key1 <span class="keyword">string</span> <span class="string">`json:"key1"`</span></span><br><span class="line">Key2 <span class="keyword">string</span> <span class="string">`json:"key2"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s sample</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(sampleBytes, &amp;s); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%+v\n"</span>, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他のパッケージと同様<code>import</code>して利用できます。<br>単一のファイルを埋め込みするだけなら<code>_ &quot;embed&quot;</code>として先頭に_をつけてインポートすることが推奨されています。</p><p>この<code>main.go</code>と同一のディレクトリに<code>sample.json</code>を配置します。</p><figure class="highlight json"><figcaption><span>sample.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"key1"</span>: <span class="string">"value1"</span>,</span><br><span class="line">    <span class="attr">"key2"</span>: <span class="string">"value2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このコードを実行するとsampleBytesにsample.jsonの中身が反映され、構造体sampleの中身が出力されます</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go run .\main.go</span><br><span class="line">&#123;Key1:value1 Key2:value2&#125;</span><br></pre></td></tr></table></figure><h2 id="何が起きているのか"><a href="#何が起きているのか" class="headerlink" title="何が起きているのか"></a>何が起きているのか</h2><p><code>go:embed</code>では一見コメントアウトに見える<code>//go:embed sample.json</code>が埋め込みファイルの場所を指示する記述として機能します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:embed sample.json</span></span><br><span class="line"><span class="keyword">var</span> sampleBytes []<span class="keyword">byte</span></span><br></pre></td></tr></table></figure><p>コメントアウト部分のファイル名を書き換えると参照するファイル名が変わることが確認できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:embed sampl.json</span></span><br><span class="line"><span class="keyword">var</span> sampleBytes []<span class="keyword">byte</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go run .\main.go</span><br><span class="line">main.go:9:12: pattern sampl.json: no matching files found</span><br></pre></td></tr></table></figure><p>同じことを<code>os</code>で実現しようとするとファイル読み込み～変数の格納までそれなりな行数を要するので、わずか2行でファイルを変数に格納することができるのは便利ですね。<br>勿論json以外でも埋め込み可能です、txt形式の文章や画像なども、バイナリファイルとして扱う事が可能です。</p><p>うっかり<code>//</code>の後に半角スペースを入れてしまうと本当にコメントアウトとして処理されてしまうのでご注意ください。<br>コメントアウトと埋め込みの違いがシンタックスハイライトとして反映できるようになると嬉しいかもしれませんね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// go:embed sampl.json</span></span><br><span class="line"><span class="keyword">var</span> sampleBytes []<span class="keyword">byte</span></span><br></pre></td></tr></table></figure><h2 id="その他具体的な利用方法"><a href="#その他具体的な利用方法" class="headerlink" title="その他具体的な利用方法"></a>その他具体的な利用方法</h2><h3 id="複数ファイルを埋め込む"><a href="#複数ファイルを埋め込む" class="headerlink" title="複数ファイルを埋め込む"></a>複数ファイルを埋め込む</h3><p><code>go:embed</code>は複数のファイルをまとめて埋め込む使い方が用意されています。<br><code>embed</code>パッケージを<code>_</code>無しでインポートして、<code>embed.FS</code>型のファイルシステムとして変数に埋め込みます。<br>この使い方で作成した変数<code>static</code>は<code>io/fs</code>パッケージでも取り扱う事ができました。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"embed"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/fs"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed README.md version.txt</span></span><br><span class="line"><span class="keyword">var</span> static embed.FS</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">b, err := static.ReadFile(<span class="string">"README.md"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, <span class="keyword">string</span>(b))</span><br><span class="line"></span><br><span class="line">b2, err := fs.ReadFile(static, <span class="string">"version.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"version: %s\n"</span>, <span class="keyword">string</span>(b2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行結果は下記のようになります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> go run .\main.go</span><br><span class="line">## README</span><br><span class="line"></span><br><span class="line">It is a sample of &#96;go:embed&#96;</span><br><span class="line">version: 1.0</span><br></pre></td></tr></table></figure><p><a href="https://tip.golang.org/pkg/net/http/#FS" target="_blank" rel="noopener">net/httpパッケージ</a>で提供されているファイルシステムとも互換性があるため。<br>WebAPIを開発する場合は大きなメリットとなる事が期待されています。</p><p>以下の15行程度の処理で簡易WEBサーバーを立てることができました。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"embed"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed index.html</span></span><br><span class="line"><span class="keyword">var</span> static embed.FS</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.Handle(<span class="string">"/"</span>, http.FileServer(http.FS(static)))</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>適当な<code>index.html</code>を用意し、ブラウザで<code>localhost:8080/index.html</code>にアクセスすることでHTMLを表示することができました。<br><img src="/images/20210208/image.png" alt=""></p><h3 id="別ディレクトリのファイルを参照する"><a href="#別ディレクトリのファイルを参照する" class="headerlink" title="別ディレクトリのファイルを参照する"></a>別ディレクトリのファイルを参照する</h3><p>ファイルがmain.go等実行ファイルと同じ場所にない場合は、パス名を指定することが可能です。<br><code>embed</code>という名称のアセット管理用フォルダを作成し、<code>sample.json</code>を格納した場合は下記のように記載します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:embed embed/sample.json</span></span><br><span class="line"><span class="keyword">var</span> sampleBytes []<span class="keyword">byte</span></span><br></pre></td></tr></table></figure><p>先頭に./等のカレントディレクトリを表す表記は不要です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:embed ./embed/sample.json</span></span><br><span class="line"><span class="keyword">var</span> sampleBytes []<span class="keyword">byte</span></span><br></pre></td></tr></table></figure><p>また、親ファイルまで遡って読み込みを行うような機能は現在サポートされていませんでした。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:embed ../embed/sample.json</span></span><br><span class="line"><span class="keyword">var</span> sampleBytes []<span class="keyword">byte</span></span><br></pre></td></tr></table></figure><p>いずれも<code>invalid pattern syntax</code>として処理されます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> go run .\main.go</span><br><span class="line">main.go:9:12: pattern ..&#x2F;embed&#x2F;sample.json: invalid pattern syntax</span><br></pre></td></tr></table></figure><h3 id="複数のファイルをまとめて埋め込む"><a href="#複数のファイルをまとめて埋め込む" class="headerlink" title="複数のファイルをまとめて埋め込む"></a>複数のファイルをまとめて埋め込む</h3><p><code>go:embed</code>ではワイルドカードが利用できるため、階層を掘り下げる形であれば複数ファイルをまとめて配置するようなことも可能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:embed static/*</span></span><br><span class="line"><span class="keyword">var</span> static embed.FS</span><br></pre></td></tr></table></figure><p>先ほどの簡易WEBサーバーを、ワイルドカードを利用して、<code>favicon.ico</code>と<code>index.html</code>をフォルダごと読み込み、展開するような構成に変更してみました。<br>ディレクトリ構成は以下のようなイメージです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">  ┣ main.go</span><br><span class="line">  ┗ static</span><br><span class="line">       ┗ public</span><br><span class="line">            ┣ index.html</span><br><span class="line">            ┗ favicon.ico</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"embed"</span></span><br><span class="line"><span class="string">"io/fs"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed static/*</span></span><br><span class="line"><span class="keyword">var</span> static embed.FS</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">public, err := fs.Sub(static, <span class="string">"static/public"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">http.Handle(<span class="string">"/"</span>, http.FileServer(http.FS(public)))</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">":8080"</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>フューチャー技術ブログのfaviconを試しに読み込んでみました、無事に表示されています。</p><p><img src="/images/20210208/image_2.png" alt=""></p><p>ちなみに変数publicとしてファイルシステムの階層を適宜掘り下げたものを用意しないと読み込んだディレクトリがリンクとして表示されてしまいます。</p><p><img src="/images/20210208/image_3.png" alt=""></p><p>実際に開発を行う際はginやecho等のWEBフレームワークを理想されるケースが一般的と思われますが、それらAPIでも同様の事が可能です。</p><p>WEBサーバーに話が寄ってしまいましたが、設定やバージョン情報等の管理を<code>go:embed</code>を使って運用していくような事が期待できます。</p><h2 id="go-embedが使えないケース"><a href="#go-embedが使えないケース" class="headerlink" title="go:embedが使えないケース"></a>go:embedが使えないケース</h2><p><code>go:embed</code>での埋め込みは関数の内部など閉じたスコープで行うことができません。</p><p>必然的に広いスコープで扱いたい設定情報等が用途として想定されます。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"embed"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/fs"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//go:embed README.md version.txt</span></span><br><span class="line"><span class="keyword">var</span> static embed.FS</span><br><span class="line"></span><br><span class="line">b, err := static.ReadFile(<span class="string">"README.md"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, <span class="keyword">string</span>(b))</span><br><span class="line"></span><br><span class="line">b2, err := fs.ReadFile(static, <span class="string">"version.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"version: %s\n"</span>, <span class="keyword">string</span>(b2))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行すると下記のようなエラーが発生します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go run .\main.go</span><br><span class="line"># command-line-arguments</span><br><span class="line">.\main.go:10:4: go:embed cannot apply to var inside func</span><br></pre></td></tr></table></figure><h2 id="go-embedによって何が嬉しいのか"><a href="#go-embedによって何が嬉しいのか" class="headerlink" title="go:embedによって何が嬉しいのか"></a>go:embedによって何が嬉しいのか</h2><p>記事の序盤でも書きましたが、単純に外部ファイルを読み込むだけなら<code>os</code>や<code>ioutil</code>でも行うことが可能です。<br><code>go:embed</code>で読み込んだファイルはビルドされたバイナリにも埋め込まれる、という点がその他の読み込み方法との決定的な違いになります。</p><p>最初に書いたサンプルコードの<code>os</code>バージョンを作りました。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> sample <span class="keyword">struct</span> &#123;</span><br><span class="line">Key1 <span class="keyword">string</span> <span class="string">`json:"key1"`</span></span><br><span class="line">Key2 <span class="keyword">string</span> <span class="string">`json:"key2"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">bytes, err := os.ReadFile(<span class="string">"./sample.json"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s sample</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(bytes, &amp;s); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%+v\n"</span>, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>jsonファイルが適切に配置されていれば、同様にjsonファイルの中身が出力されます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go run .\main.go</span><br><span class="line">&#123;Key1:value1 Key2:value2&#125;</span><br></pre></td></tr></table></figure><p>では、<code>go:embed</code>を利用したものと、<code>os</code>を利用したもので、ビルドした実行バイナリの挙動の違いを確認してみます。</p><p><code>os</code>を利用したものでは、jsonファイルを削除してビルドしたバイナリを実行した場合、エラーが発生します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> .\main.exe</span><br><span class="line">panic: open .&#x2F;sample.json: The system cannot find the file specified.</span><br></pre></td></tr></table></figure><p>一方、最初に紹介した<code>go:embed</code>のサンプルコードは、jsonファイルを削除しても問題なく動作します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> .\main.exe</span><br><span class="line">&#123;Key1:value1 Key2:value2&#125;</span><br></pre></td></tr></table></figure><p><code>go:embed</code>で読み込んだファイルはビルドされたバイナリにも埋め込まれる、の意味がこのような挙動から体験できました。</p><p>これはGoの利点の一つである、単一の実行ファイルとしてビルドできることで、展開先の依存関係をシンプルに保つことができるという利点を強力に後押しします。設定ファイルや各種アセットをビルドに含めることで、バージョン管理やリリース作業を一層シンプルに整理できることが期待できます。</p><p>先ほど紹介した簡易WEBサーバーで例えると、WEBサーバーとコンテンツとなるHTML、CSS、Javascriptが分離している場合、ローカル環境で動いたものを実際の環境にデプロイする場合、実行バイナリと各種アセットをデプロイ対象の環境で適宜整理する必要があります。</p><p>これらを全て単一のバイナリに含めることができた場合、作業は実行バイナリを一つコピーして起動するだけになります。<br>新しいサーバーにデプロイする際の運用フローの整備や、プロダクション向けの構成でコンテナを構築するDockerfileを書いていく事を考えると、<code>go:embed</code>で極限まで簡略化できる部分が想像できるかもしれません。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p><code>go:embed</code>は外部ファイルを読み込むことができるパッケージです。単一のファイルの中身を簡単に読み込めます、ファイルシステムを提供することも可能です。ローカル変数で利用することは現段階ではできません。</p><p>今までのGoでは実行ファイルとアセットファイルに分割されてしまっていた部分を、一つにまとめることが可能になりました。</p><p>普段の業務で<code>go:embed</code>で解決できる部分が無いか、ぜひ探してみていただければと思います。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210207/index.html" data-iframely-url="//cdn.iframe.ly/QsgsKHg?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;この記事は&lt;a href=&quot;https://future-architect.github.io/articles/20210207/&quot;&gt;Go 1.16連載&lt;/a&gt;の1記事目です。&lt;/p&gt;
&lt;p&gt;トップバッターとして&lt;code&gt;go:e
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Go1.16" scheme="https://future-architect.github.io/tags/Go1-16/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.16連載が始まります</title>
    <link href="https://future-architect.github.io/articles/20210207/"/>
    <id>https://future-architect.github.io/articles/20210207/</id>
    <published>2021-02-06T15:00:00.000Z</published>
    <updated>2021-02-12T00:19:27.269Z</updated>
    
    <content type="html"><![CDATA[<p>毎年2月と8月はGoの新バージョンがリリースされます。2021年2月は1.16です。本ブログでは1.16のリリースを記念してGo 1.16の新機能を紹介する集中連載を行います。現時点のリリースノートは<a href="https://tip.golang.org/doc/go1.16" target="_blank" rel="noopener">こちら</a>。次のような内容を考えています。乞うご期待。</p><table><thead><tr><th>公開日</th><th>寄稿者</th><th>記事</th></tr></thead><tbody><tr><td>2月8日</td><td>伊藤真彦</td><td><a href="/articles/20210208/">Go 1.16からリリースされたgo:embedとは</a></td></tr><tr><td>2月9日</td><td>真野隼記</td><td><a href="/articles/20210209/">Go 1.16のgo installについて</a></td></tr><tr><td>2月10日</td><td>辻大志郎</td><td><a href="/articles/20210210/">Go1.16からのio/ioutilパッケージ</a></td></tr><tr><td>2月12日</td><td>澁川喜規</td><td><a href="/articles/20210212/">Go 1.16のsignal.NotifyContext()</a></td></tr></tbody></table><p>本エントリーは、これら以外にどんな変化があったのかをダイジェストで紹介します。</p><img src="/images/20210207/Go_Logo.png"><h1 id="アーキテクチャ対応-M1のmacに対応"><a href="#アーキテクチャ対応-M1のmacに対応" class="headerlink" title="アーキテクチャ対応: M1のmacに対応"></a>アーキテクチャ対応: M1のmacに対応</h1><p>今回も新しいアーキテクチャの追加が行われていますが、一番大きいのはApple Siliconの正式対応でしょう。2ヶ月ほど前に対応コードがmasterにマージされたタイミングで当ブログでもすでに紹介していました。</p><ul><li><a href="https://future-architect.github.io/articles/20201203/">GoがApple Siliconにネイティブ対応したのでベンチマークをとってみました</a></li></ul><p>もともとdarwin/arm64はiOS向けでしたが、これはios/arm64にリネームされました。c-archive, c-shared, pieモードも使えるし、race detectorも利用可能です。</p><p>すでに計測値を出していましたが、Rosetta以外をRC1で再計測してみました。M1は高速な結果から、さらに全体的にはすべての結果が1割近く改善していました。amd64は処理系が安定していて、差があっても誤差かな？というものが多かったです。いくつか、M1が他のCPUに負けていた項目だけピックアップしたのが次の表です。他のものより8倍遅かったCRC32は4倍改善され、2倍遅いぐらいで差が詰まっています。ParseBoolは1割ほど高速したものの、他との差は大きいですね。SHA1とSHA256は大幅改良で他を圧倒する速度を手に入れています。全体的に他のCPUとの差をさらに広げつつ、負けているところもかなり減ってきていますね。残っている大負けしているテストはrosetta2にも負けているということでGoのランタイムのコードが改善されたら治るはずで、M1のハードウェア起因ではなさそうですね。</p><table><thead><tr><th></th><th>M1 (12/3のmaster→RC1)</th><th>M1(rosetta)</th><th>Core i5-1030G7 (12/3のmaster→RC1)</th><th>Ryzen 9 4900HS (12/3のmaster→RC1)</th></tr></thead><tbody><tr><td>BenchmarkBlake3256-8</td><td>6339→5733</td><td>エラー</td><td>3460→3764</td><td>2782→2849</td></tr><tr><td>BenchmarkCRC32-8</td><td>1098→255.5</td><td>139.2</td><td>140.5→143.5</td><td>163.7→169.8</td></tr><tr><td>BenchmarkFnv128-8</td><td>4924→4465</td><td>7617</td><td>3448→3598</td><td>6084→6026</td></tr><tr><td>BenchmarkMD5-8</td><td>3566→3198</td><td>4345</td><td>3283→3209</td><td>2635→2603</td></tr><tr><td>BenchmarkSHA1-8</td><td>5789→899.9</td><td>4247</td><td>2924→3177</td><td>2041→2086</td></tr><tr><td>BenchmarkSHA256-8</td><td>10865→914.8</td><td>7832</td><td>6361→6473</td><td>4346→4612</td></tr><tr><td>BenchmarkSHA512-8</td><td>7801→6997</td><td>3987</td><td>4685→4816</td><td>2939→3224</td></tr><tr><td>BenchmarkMathAtomicInt32-8</td><td>7.132→6.888</td><td>7.864</td><td>6.562→6.015</td><td>4.258→4.149</td></tr><tr><td>BenchmarkMathAtomicInt64-8</td><td>7.07→6.918</td><td>7.758</td><td>7.079→5.890</td><td>4.231→4.167</td></tr><tr><td>BenchmarkMathMutexInt-8</td><td>12.45→13.68</td><td>15.07</td><td>18.69→15.58</td><td>8.776→8.589</td></tr><tr><td>BenchmarkParseBool-8</td><td>1.598→1.430</td><td>0.3529</td><td>0.3532→0.3147</td><td>0.3208→0.5364</td></tr></tbody></table><p>VSCodeも1.53でInsiderでない安定板もM1対応になりますし、GoLandもネイティブ版がリリースされました。Rosetta2でも快適だった環境はますます快適になっています。</p><p>それ以外だとlinux/riscv64対応が改良されていて、個人的には気になっています。</p><h1 id="ランタイムの変化"><a href="#ランタイムの変化" class="headerlink" title="ランタイムの変化"></a>ランタイムの変化</h1><p><a href="https://tip.golang.org/pkg/runtime/metrics/" target="_blank" rel="noopener">runtime/metrics</a>パッケージが導入されました。runtimeとかdebugとかさまざまな場所に散っていったメトリックス収集機能が集約されました。今サポートしているのはGC関連のメトリックスと、メモリ関連のメトリックス、goroutine数ですね。</p><p>あとは、GODEBUG環境変数にinittrace=1を設定すると、各パッケージの<code>init</code>で消費している時間やメモリの情報が標準出力に表示されます。Google App EngineやらCloud RunやらCloud FunctionsやらAWS Lambdaやらでインスタンス数ゼロからのコールドブート時間を減らしたいサーバーレス愛好家にとってはタピオカミルクティー🧋並に人気が出そうな新機能です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">init compress&#x2F;flate @1.2 ms, 0.027 ms clock, 4240 bytes, 7 allocs</span><br><span class="line">init hash&#x2F;crc32 @1.2 ms, 0.014 ms clock, 1024 bytes, 1 allocs</span><br><span class="line">init compress&#x2F;gzip @1.2 ms, 0.022 ms clock, 32 bytes, 2 allocs</span><br><span class="line">init runtime&#x2F;pprof @1.3 ms, 0.018 ms clock, 32 bytes, 2 allocs</span><br><span class="line">init crypto @1.3 ms, 0.019 ms clock, 160 bytes, 1 allocs</span><br><span class="line">init crypto&#x2F;md5 @1.3 ms, 0.001 ms clock, 0 bytes, 0 allocs</span><br><span class="line">init crypto&#x2F;sha1 @1.3 ms, 0 ms clock, 0 bytes, 0 allocs</span><br><span class="line">init crypto&#x2F;sha256 @1.4 ms, 0 ms clock, 0 bytes, 0 allocs</span><br><span class="line">init crypto&#x2F;sha512 @1.4 ms, 0 ms clock, 0 bytes, 0 allocs</span><br><span class="line">init math&#x2F;rand @1.4 ms, 0.059 ms clock, 5440 bytes, 3 allocs</span><br><span class="line">init golang.org&#x2F;x&#x2F;sys&#x2F;cpu @1.5 ms, 0 ms clock, 0 bytes, 0 allocs</span><br><span class="line">init github.com&#x2F;zeebo&#x2F;blake3&#x2F;internal&#x2F;consts @1.5 ms, 0 ms clock, 0 bytes, 0 allocs</span><br><span class="line">init golang.org&#x2F;x&#x2F;crypto&#x2F;blake2b @1.5 ms, 0.019 ms clock, 32 bytes, 2 allocs</span><br><span class="line">init golang.org&#x2F;x&#x2F;crypto&#x2F;sha3 @1.5 ms, 0 ms clock, 0 bytes, 0 allocs</span><br><span class="line">init main @1.5 ms, 0 ms clock, 0 bytes, 0 allocs</span><br></pre></td></tr></table></figure><h1 id="ツールの変化"><a href="#ツールの変化" class="headerlink" title="ツールの変化"></a>ツールの変化</h1><p>go.mod対応周りが大幅に変わったことと、embed対応が大きなトピックです。これはそれぞれの紹介のなかで詳しく説明されます。</p><p>1.15で加えられたリンカーの更新がELFベースのOS/amd64だけだったのが、ありとあらゆる環境に適用され、速度は20-25%高速に、メモリ使用量は5-15%ほど削減されています。</p><p>それ以外は比較的小さい変化で、go testで、os.Exit(0)もエラーとなるように変更されたりとかですかね。あとは-overlayでファイルのパスの読替のJSONを読み込ませることができ、ファイルの動的な置き換えが可能になるという変更もありますが、これは未セーブのファイルを別のパスに書き出しておいてデバッグ実行するといったように、エディタ側から使われることを意図しているようでした。</p><p>1.16で<a href="https://go.googlesource.com/proposal/+/refs/changes/78/248178/1/design/40724-register-calling.md" target="_blank" rel="noopener">レジスタベースの関数呼び出し規約</a>が入ってパフォーマンスアップというのを<a href="https://www.infoq.com/news/2020/08/go-register-calling-convention/" target="_blank" rel="noopener">報じるメディアもありました</a>が、それは<a href="https://github.com/golang/go/issues/40724" target="_blank" rel="noopener">1.17に先送りされた</a>ようです。次も楽しみですね。</p><h1 id="ライブラリの変化"><a href="#ライブラリの変化" class="headerlink" title="ライブラリの変化"></a>ライブラリの変化</h1><p>全部を紹介するのは細かすぎるので、気になるポイントだけピックアップします。</p><p>大きいのはembed追加に伴って導入されたio/fsと、io/ioutilが非推奨化されたことですね。リリースノートで大きく取り上げられています。また、いくつかのパッケージがio/fs対応で機能追加されています。</p><p>また、小さい関数追加の<code>signal.NotifyContext()</code>は個人的にうれしかったので連載で取り上げます。</p><p>netパッケージでは<code>ErrClosed</code>というエラーのインスタンスが追加されました。1.13でerrorsパッケージが更新されてエラーチェックの共通の方法として<code>errors.Is()</code>が導入されましたが、それとの比較が行いやすいように、いままで非公開だったエラーのインスタンスが公開されました。新しく提案された使い方に合わせて、全体が統一されていくのは良いですね。</p><p>strconvの<code>ParseFloat()</code>は新しいアルゴリズムを使うことで最大二倍高速になりました。これを使っている<code>encoding/json</code>も高速になるとのこと。</p><p>time/tzdataがスリムなデータ構造を使うようになってバンドルサイズが小さくなったとかもありました。</p><p>個人的に面白かったのがコードのパーサーのライブラリの更新で、Go 1.17で導入予定の新しいbuild constraintのコメント形式をサポートするというものです。Go 1.17のソースを処理するツールを今から書けますよ、とのこと。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 今の書き方</span></span><br><span class="line"><span class="comment">// +build syntax</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Go1.17の書き方</span></span><br><span class="line"><span class="comment">//go:build</span></span><br></pre></td></tr></table></figure><p>おまけで、<a href="https://emojipedia.org/unicode-13.0/" target="_blank" rel="noopener">Unicodeのバージョンが13</a>になりましたので、ランタイムのところに書いた↑タピオカミルクティーの絵文字🧋がGoで使えるようになりました。</p><h1 id="1-17以降の変更"><a href="#1-17以降の変更" class="headerlink" title="1.17以降の変更"></a>1.17以降の変更</h1><p>すでに説明した関数呼び出しのレジスタベースの関数呼び出しでパフォーマンスアップが計画されています。</p><p>注目度が高いジェネリクスは今のところ2022/02の1.18ぐらいになると言われていますが、ジェネリクスのプロポーザルが2/4に<a href="https://github.com/golang/proposal#likely-accept" target="_blank" rel="noopener">likely accept</a>フェーズになりました。Goのワークフロー的には「ディスカッションがコンセンサスに到達。最後のコメントを受け入れる期間」となっています。かなりリリースが近づいてきていますね。</p><p><strong>2/11更新</strong>: 1週間たって、ジェネリクスのプロポーザルが<a href="https://github.com/golang/proposal#accepted" target="_blank" rel="noopener">accepted</a>に<a href="https://github.com/golang/go/issues/43651#issuecomment-776944155" target="_blank" rel="noopener">なりました</a>。</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">Generics in <a href="https://twitter.com/hashtag/golang?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#golang</a> has moved to &quot;likely accept&quot; phase...<a href="https://t.co/hmA4ofLztV" target="_blank" rel="noopener">https://t.co/hmA4ofLztV</a></p>&mdash; Brad Fitzpatrick (@bradfitz) <a href="https://twitter.com/bradfitz/status/1357032025362862080?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">February 3, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;毎年2月と8月はGoの新バージョンがリリースされます。2021年2月は1.16です。本ブログでは1.16のリリースを記念してGo 1.16の新機能を紹介する集中連載を行います。現時点のリリースノートは&lt;a href=&quot;https://tip.golang.org/doc/g
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Go1.16" scheme="https://future-architect.github.io/tags/Go1-16/"/>
    
  </entry>
  
</feed>
