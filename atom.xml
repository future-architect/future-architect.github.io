<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2021-05-21T13:52:35.873Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AWS Glueの開発環境の構築(2021)</title>
    <link href="https://future-architect.github.io/articles/20210521a/"/>
    <id>https://future-architect.github.io/articles/20210521a/</id>
    <published>2021-05-20T15:00:00.000Z</published>
    <updated>2021-05-21T13:52:35.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>Glueの環境構築は以前の記事（ <a href="/articles/20191206/">AWS Glueの単体テスト環境の構築手順</a>、<a href="/articles/20191101/">AWS Glueの開発エンドポイントがそこそこお高いのでローカル開発環境を用意しました</a> ）にあるのですが、公式のDocker imageが案内されているので改めて、構築してみます。</p><p>なお、Glueの公式イメージでもJupyter Notebookは利用できるのですが、使い勝手を考慮し、Jupyterlabに差し替えています。</p><h1 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h1><ol><li><a href="#Dockerfile">Dockerfile作成</a></li><li><a href="#docker-compose-yml">docker-compose.yml作成</a></li><li><a href="#%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D%EF%BC%88%E6%BA%96%E5%82%99%EF%BC%89">動作確認</a></li></ol><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><p><code>PySpark</code>のオプションを設定しつつ、<code>gluepyspark</code>を実行していますが、<code>gluepyspark</code>が<code>PySpark</code>のwrapperになっているため、こちらの設定で問題なく動作しています。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ベースとなる公式イメージ</span></span><br><span class="line"><span class="keyword">FROM</span> amazon/aws-glue-libs:glue_libs_1.<span class="number">0.0</span>_image_01</span><br><span class="line"></span><br><span class="line"><span class="comment"># jupyterlabインストール</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install jupyterlab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  起動スクリプト</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> jupyter_start.sh /home/jupyter</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod 775 /home/jupyter/jupyter_start.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:/home/aws-glue-libs/bin/:/usr/share/maven/bin:$&#123;SPARK_HOME&#125;/bin/</span><br><span class="line"><span class="keyword">ENV</span> PYTHONPATH $PYTHONPATH:/home/jupyter/jupyter_default_dir</span><br><span class="line"></span><br><span class="line"><span class="comment"># PySparkからjupyter labを起動するためのオプション設定</span></span><br><span class="line"><span class="keyword">ENV</span> PYSPARK_DRIVER_PYTHON jupyter</span><br><span class="line"><span class="keyword">ENV</span> PYSPARK_DRIVER_PYTHON_OPTS <span class="string">&#x27; lab --allow-root --NotebookApp.token=&quot;&quot; --NotebookApp.password=&quot;&quot; --no-browser --ip=0.0.0.0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dummy</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir ~/.aws</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> aws/config /root/.aws</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod 600  ~/.aws/config</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> aws/credentials /root/.aws</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod 600  ~/.aws/credentials</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Dockerfileでコピーしているファイル</p><figure class="highlight shell"><figcaption><span>jupyter_start.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">/home/aws-glue-libs/bin/gluepyspark</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>.aws/config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[default]</span><br><span class="line">region &#x3D; ap-northeast-1</span><br><span class="line">output &#x3D; json</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>.aws/credentials</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[default]</span><br><span class="line">aws_access_key_id &#x3D; xxx</span><br><span class="line">aws_secret_access_key &#x3D; xxx</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h1><p><code>line10</code> で、jupyterlabのdefaultのWorkspaceにlocalをマウントしています。<br>S3(localstack)にアップロードするファイルやソースコードの同期を取ります。</p><figure class="highlight yml"><figcaption><span>docker-compsoe.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.5&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">glue.dev.summary:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">glue.dev</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">./</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">./Dockerfile</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># jupyterlabのdefaultのWorkspaceにlocalファイルをマウントします。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./:/home/jupyter/jupyter_default_dir</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment"># dummy configure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_DEFAULT_REGION=ap-northeast-1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_DEFAULT_OUTPUT=json</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_ACCESS_KEY_ID=xxx</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_SECRET_ACCESS_KEY=xxx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># jupyterlabのポート</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8888</span><span class="string">:8888</span></span><br><span class="line">      <span class="comment"># spark uiのポート</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">4040</span><span class="string">:4040</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">glue.dev.network</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/home/jupyter/jupyter_start.sh</span></span><br><span class="line">  <span class="attr">glue.dev.s3.local:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">localstack/localstack:0.12.8</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVICES=s3</span></span><br><span class="line">      <span class="comment"># dummy configure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_DEFAULT_REGION=ap-northeast-1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_DEFAULT_OUTPUT=json</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_ACCESS_KEY_ID=xxx</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_SECRET_ACCESS_KEY=xxx</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">glue.dev.network</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">glue.dev.network:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">glue.dev.network</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Docker-起動"><a href="#Docker-起動" class="headerlink" title="Docker 起動"></a>Docker 起動</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up --build</span><br></pre></td></tr></table></figure><h1 id="動作確認（準備）"><a href="#動作確認（準備）" class="headerlink" title="動作確認（準備）"></a>動作確認（準備）</h1><p>Glue/localstack(s3)を初期化し、dynamic frameで取り込んだファイルをdata frameに変換して、spark sqlを実行します。<br>こちらのスクリプトをjupyterlabで動かします。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">from</span> pyspark.context <span class="keyword">import</span> SparkContext</span><br><span class="line"><span class="keyword">from</span> awsglue.context <span class="keyword">import</span> GlueContext</span><br><span class="line"><span class="keyword">from</span> awsglue.job <span class="keyword">import</span> Job</span><br><span class="line"><span class="keyword">from</span> awsglue.dynamicframe <span class="keyword">import</span> DynamicFrame</span><br><span class="line"><span class="keyword">from</span> botocore.client <span class="keyword">import</span> Config</span><br><span class="line"></span><br><span class="line"><span class="comment"># glue Initialize</span></span><br><span class="line">os.environ[<span class="string">&quot;TEST_S3_ENDPOINT_URL&quot;</span>] = <span class="string">&quot;http://gule.dev.s3.local:4566&quot;</span></span><br><span class="line">glueContext = GlueContext(sc)</span><br><span class="line">spark = glueContext.spark_session</span><br><span class="line">job = Job(glueContext)</span><br><span class="line">job.init(<span class="string">&quot;JobName&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set S3 with localstack parameters</span></span><br><span class="line">sc._jsc.hadoopConfiguration().<span class="built_in">set</span>(<span class="string">&quot;fs.s3a.endpoint&quot;</span>, <span class="string">&quot;http://gule.dev.s3.local:4566&quot;</span>)</span><br><span class="line">sc._jsc.hadoopConfiguration().<span class="built_in">set</span>(<span class="string">&quot;fs.s3a.path.style.access&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">sc._jsc.hadoopConfiguration().<span class="built_in">set</span>(<span class="string">&quot;fs.s3a.signing-algorithm&quot;</span>, <span class="string">&quot;S3SignerType&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># S3 init</span></span><br><span class="line">s3 = boto3.resource(</span><br><span class="line">    <span class="string">&quot;s3&quot;</span>,</span><br><span class="line">    endpoint_url=os.environ[<span class="string">&quot;TEST_S3_ENDPOINT_URL&quot;</span>],</span><br><span class="line">    region_name=<span class="string">&quot;ap-northeast-1&quot;</span>,</span><br><span class="line">    use_ssl=<span class="literal">False</span>,</span><br><span class="line">    config=Config(s3=&#123;<span class="string">&quot;addressing_style&quot;</span>: <span class="string">&quot;path&quot;</span>&#125;),</span><br><span class="line">)</span><br><span class="line">bucket_name = <span class="string">&quot;test-csv-bucket&quot;</span></span><br><span class="line">bucket = s3.Bucket(bucket_name)</span><br><span class="line">bucket.create(ACL=<span class="string">&quot;public-read-write&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get dynamic frame and data frame convert</span></span><br><span class="line">bucket.upload_file(<span class="string">&quot;tests/data/sample.json&quot;</span>, <span class="string">&quot;sample/sample.json&quot;</span>)</span><br><span class="line">p = <span class="string">&quot;s3://test-csv-bucket/sample/&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;input-tables&quot;</span>, <span class="string">f&quot;sample.json&quot;</span>)</span><br><span class="line">df = glueContext.create_dynamic_frame.from_options(</span><br><span class="line">    connection_type=<span class="string">&quot;s3&quot;</span>,</span><br><span class="line">    connection_options=&#123;<span class="string">&quot;paths&quot;</span>: [p]&#125;,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&quot;json&quot;</span>,</span><br><span class="line">).toDF()</span><br><span class="line">df.count()</span><br><span class="line">df.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># spark sql exec</span></span><br><span class="line">df.createOrReplaceTempView(<span class="string">&quot;sample&quot;</span>)</span><br><span class="line">spark.sql(<span class="string">&quot;show tables&quot;</span>).show()</span><br><span class="line">spark.sql(<span class="string">&quot;select count(*) from sample&quot;</span>).show()</span><br><span class="line">spark.sql(<span class="string">&quot;select * from sample&quot;</span>).show()</span><br></pre></td></tr></table></figure><h1 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h1><p>ブラウザより、<code>http://localhost:8888</code> を実装し、jupyterlabで動かします。</p><p><code>docker-compose.yml</code> でマウントしたlocalストレージに<code>tests/data/sample.json</code>を用意して、実行してみます。<br>せっかくなので、処理ブロック単位に動かします。</p><img src="/images/20210521a/gluesample.gif" alt="jupyterlabでの操作動画" width="640" height="480" loading="lazy"><h1 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h1><p>ローカルでAWSに依存せず、GlueのAPIをインタラクティブに確認できるので、開発効率としては良いのではないでしょうか。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;Glueの環境構築は以前の記事（ &lt;a href=&quot;/articles/20191206/&quot;&gt;AWS Glueの単体テスト環境の構築手順&lt;/</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="Glue" scheme="https://future-architect.github.io/tags/Glue/"/>
    
    <category term="JupyterNotebook" scheme="https://future-architect.github.io/tags/JupyterNotebook/"/>
    
  </entry>
  
  <entry>
    <title>コンテナイメージ内の実行ファイルをupxで圧縮するべきか</title>
    <link href="https://future-architect.github.io/articles/20210520b/"/>
    <id>https://future-architect.github.io/articles/20210520b/</id>
    <published>2021-05-19T15:00:01.000Z</published>
    <updated>2021-05-20T06:12:42.623Z</updated>
    
    <content type="html"><![CDATA[<h1 id="コンテナイメージ内の実行ファイルをupxで圧縮するべきか"><a href="#コンテナイメージ内の実行ファイルをupxで圧縮するべきか" class="headerlink" title="コンテナイメージ内の実行ファイルをupxで圧縮するべきか"></a>コンテナイメージ内の実行ファイルをupxで圧縮するべきか</h1><p>福田（<a href="https://twitter.com/knqyf263">@knqyf263</a>）と申します。過去にフューチャー発OSSのVuls開発を手伝っていましたが、現在はフューチャーで働いているわけでもなく完全に部外者です。今回は社員の澁川さんの推薦もあり、ブログの寄稿をさせて頂くことになりました。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>その理由の前に少し背景を説明しますが、自分はTrivyというOSSの脆弱性スキャナーのメンテナをやっていまして先日Goバイナリの脆弱性検知をする機能をリリースしました。</p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fknqyf263.hatenablog.com%2Fentry%2F2021%2F04%2F30%2F061147" style="border: 0; width: 100%; height: 190px;" allowfullscreen scrolling="no"></iframe><p>例えばコンテナイメージ内にGoでビルドしたバイナリを1つだけ置いている場合などにも検知が出来るためとても便利です（自画自賛）。stripなどでシンボルを落としていてもセクションヘッダにモジュール情報が残っているため検知は動作するのですが、upxでバイナリを圧縮している場合には動きません。</p><p>upxというのは実行ファイルを圧縮するためのツールで色々なOSのファイル形式に対応しており展開も高速なので広く使われています。多くのプラットフォームで内部的にLZMAを利用しており圧縮率もzip/gzipより高いと謳っています。</p><p><a href="hhttps://github.com/upx/upx/blob/8d42b12117130b944023335cc2b76072c145db4d/doc/upx.pod" alt="upx/upx"><img src="https://gh-card.dev/repos/upx/upx.svg"></a></p><p>実行時にupxが自分で自分を展開してそのまま実行してくれるので、ユーザの方で一度展開してから実行するといった処理は必要ありません。単にバイナリのサイズが小さくなるイメージです。</p><p>実行ファイルのサイズが小さければダウンロードも速いですしいくつかの利点が得られるため、こういった圧縮ツールを使っている人も多いかと思います。ではコンテナイメージ内に置くような実行ファイルでも圧縮するべきかどうか、というのが今回のブログのネタになります。</p><p>コンテナイメージのサイズは小さい方が良い、というのは聞いたことがある人が多いと思うので当然圧縮するべきだろうと思うかもしれませんが、コンテナイメージはレイヤー単位でgzipで圧縮されDocker Hubなどのコンテナレジストリに格納されます。単にイメージのサイズだけで考えるのではなく実際にpullする時にどう影響が出るのかについて考えるほうが良さそうであるというのは以前雑に述べていたりしました。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">自分もデバッグ大変になるの嫌なのであまりまとめないことが多いです。ただイメージサイズ変わらなくてもpullする時はlayer単位でtar.gzになるのでまとめると圧縮が効いてかなり小さくなるとかはありますかね。一方で並列度が上がる利点もありますが。<a href="https://t.co/KqEVsDwxDJ">https://t.co/KqEVsDwxDJ</a></p>&mdash; イスラエルいくべぇ (@knqyf263) <a href="https://twitter.com/knqyf263/status/1352123800784142336?ref_src=twsrc%5Etfw">January 21, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>というような雑談をSlackでしていたところ、フューチャー社員の渋川さん（ @shibu_jp ）からupxでサイズ小さくすることにどのぐらいの意味があるのか？という疑問が出ました。</p><p><img src="/images/20210520b/Slack___tsuda_knqyf263___Cyber_Security_Innovation_Group.png" alt="Slack___tsuda_knqyf263___Cyber_Security_Innovation_Group.png"></p><p>ちなみに渋川さんはフューチャー技術ブログで数多くの素晴らしいブログを執筆されています。</p><ul><li><a href="https://future-architect.github.io/authors/%E6%BE%81%E5%B7%9D%E5%96%9C%E8%A6%8F/">澁川喜規 | フューチャー技術ブログ</a></li></ul><p>確かにレイヤーをgzipで圧縮したらupxによる圧縮と差はそこまで大きくならないんじゃないか、という気がしたので検証してみました。upxの方は圧縮したあとに再度gzipで圧縮することになるので二度目のgzip圧縮率はかなり低いと考えられます。渋川さんから出た疑問だったのでフューチャーのブログに載せようということで今回寄稿することになりました。</p><h1 id="検証（macho）"><a href="#検証（macho）" class="headerlink" title="検証（macho）"></a>検証（macho）</h1><p>upxは様々なOSの実行ファイル形式に対応していますが、自分はmacOSを使っているためまずmachoで試してみます。</p><h2 id="upxで圧縮しない場合"><a href="#upxで圧縮しない場合" class="headerlink" title="upxで圧縮しない場合"></a>upxで圧縮しない場合</h2><p>まずは普通にupxせずにDockerイメージを作ってみます。</p><h3 id="バイナリのビルド"><a href="#バイナリのビルド" class="headerlink" title="バイナリのビルド"></a>バイナリのビルド</h3><p>TrivyをmacOS上でビルドしてみます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ go build -o trivy cmd/trivy/main.go</span><br><span class="line">$ du -bh trivy</span><br><span class="line">41M     trivy</span><br></pre></td></tr></table></figure><p>バイナリのサイズは41MBでした。今回は <code>ldflags &#39;-w -s&#39;</code>などのオプションは付けていないためDWARFやシンボルテーブルは残っています。</p><h3 id="イメージのbuild-push"><a href="#イメージのbuild-push" class="headerlink" title="イメージのbuild/push"></a>イメージのbuild/push</h3><p>レジストリに置いたらどのぐらいのサイズなのか？というのは実際にpushしてしまうほうが早いと思うのでbuildしてレジストリにpushします。まずビルドします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t knqyf263/trivy:macho-nonupx .</span><br><span class="line">Sending build context to Docker daemon  49.69MB</span><br><span class="line">Step 1/5 : FROM alpine:3.13</span><br><span class="line"> ---&gt; 6dbb9cc54074</span><br><span class="line">Step 2/5 : RUN apk --no-cache add ca-certificates git</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 079d3d306dcd</span><br><span class="line">Step 3/5 : COPY trivy /usr/<span class="built_in">local</span>/bin/trivy</span><br><span class="line"> ---&gt; 98973bc45fe2</span><br><span class="line">Step 4/5 : COPY contrib/*.tpl contrib/</span><br><span class="line"> ---&gt; e09be4486dd5</span><br><span class="line">Step 5/5 : ENTRYPOINT [<span class="string">&quot;trivy&quot;</span>]</span><br><span class="line"> ---&gt; Running <span class="keyword">in</span> 9bc4e9b607c9</span><br><span class="line">Removing intermediate container 9bc4e9b607c9</span><br><span class="line"> ---&gt; 1be57dd63281</span><br><span class="line">Successfully built 1be57dd63281</span><br><span class="line">Successfully tagged knqyf263/trivy:macho-upx</span><br></pre></td></tr></table></figure><p>Step 3を見てもらえば分かりますが、単にホスト側にあるバイナリをCOPYで置いています。machoのバイナリをコピーしているせいで動かないのですがサイズの検証なので気にせず進めていきます。</p><p>そしてこのイメージをpushします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker push knqyf263/trivy:macho-nonupx</span><br><span class="line">The push refers to repository [docker.io/knqyf263/trivy]</span><br><span class="line">27289a563633: Pushed</span><br><span class="line">f8edd4bba8b2: Pushed</span><br><span class="line">464f5bb1fc11: Layer already exists</span><br><span class="line">b2d5eeeaba3a: Layer already exists</span><br><span class="line">macho-nonupx: digest: sha256:5fc7352ecd65e3f2eada6f251ef91c721c685d61046c2c948ebfabfec52f8582 size: 1159</span><br></pre></td></tr></table></figure><p>無事にpushできました。</p><h3 id="レイヤーサイズの確認"><a href="#レイヤーサイズの確認" class="headerlink" title="レイヤーサイズの確認"></a>レイヤーサイズの確認</h3><p>ではレジストリにあるレイヤーのサイズを確認してみます。craneというツールを使います。Googleのgo-containerregistryというライブラリに付随しているCLIツールになります。</p><p><a href="https://github.com/google/go-containerregistry/tree/main/cmd/crane">https://github.com/google/go-containerregistry/tree/main/cmd/crane</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ crane manifest knqyf263/trivy:macho-nonupx</span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;schemaVersion&quot;</span>: 2,</span><br><span class="line">   <span class="string">&quot;mediaType&quot;</span>: <span class="string">&quot;application/vnd.docker.distribution.manifest.v2+json&quot;</span>,</span><br><span class="line">   <span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;mediaType&quot;</span>: <span class="string">&quot;application/vnd.docker.container.image.v1+json&quot;</span>,</span><br><span class="line">      <span class="string">&quot;size&quot;</span>: 2264,</span><br><span class="line">      <span class="string">&quot;digest&quot;</span>: <span class="string">&quot;sha256:3b2add278b7f6df5e72f0d6592ece9cbb22c859fc01e6d8932e036d335f6074c&quot;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">&quot;layers&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">&quot;mediaType&quot;</span>: <span class="string">&quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;</span>,</span><br><span class="line">         <span class="string">&quot;size&quot;</span>: 2811969,</span><br><span class="line">         <span class="string">&quot;digest&quot;</span>: <span class="string">&quot;sha256:540db60ca9383eac9e418f78490994d0af424aab7bf6d0e47ac8ed4e2e9bcbba&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">&quot;mediaType&quot;</span>: <span class="string">&quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;</span>,</span><br><span class="line">         <span class="string">&quot;size&quot;</span>: 6664328,</span><br><span class="line">         <span class="string">&quot;digest&quot;</span>: <span class="string">&quot;sha256:8e566f9a0cb95716b962ba9e17b0c0e3f1b970c51424032dcb7c660dce3d5ee6&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">&quot;mediaType&quot;</span>: <span class="string">&quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;</span>,</span><br><span class="line">         <span class="string">&quot;size&quot;</span>: 18900731,</span><br><span class="line">         <span class="string">&quot;digest&quot;</span>: <span class="string">&quot;sha256:cdcee5fd7ec2508ee27e439924a888be100e6f2cd08e8a9c89ee43911c2dd655&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">&quot;mediaType&quot;</span>: <span class="string">&quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;</span>,</span><br><span class="line">         <span class="string">&quot;size&quot;</span>: 4052,</span><br><span class="line">         <span class="string">&quot;digest&quot;</span>: <span class="string">&quot;sha256:cbcc716d57451836029ade124851f09b7474aee4ca711741086cd54194d73102&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下から二番目のレイヤーがバイナリを置いたレイヤーなので18.03MB（ <code>=18900731/(1024*1024)</code> )になっています。</p><h3 id="Docker-Hubで確認"><a href="#Docker-Hubで確認" class="headerlink" title="Docker Hubで確認"></a>Docker Hubで確認</h3><p>念のためDocker HubのUIでも確認します。</p><p><img src="/images/20210520b/Untitled.png" alt="/Untitled.png"></p><p>確かに18.03MBになっています。一応リンクも貼っておきます。</p><p><a href="https://hub.docker.com/layers/knqyf263/trivy/macho-nonupx/images/sha256-5fc7352ecd65e3f2eada6f251ef91c721c685d61046c2c948ebfabfec52f8582?context=repo">https://hub.docker.com/layers/knqyf263/trivy/macho-nonupx/images/sha256-5fc7352ecd65e3f2eada6f251ef91c721c685d61046c2c948ebfabfec52f8582?context=repo</a></p><h3 id="サイズ比較"><a href="#サイズ比較" class="headerlink" title="サイズ比較"></a>サイズ比較</h3><p>ということで上記の結果をまとめると以下のようになります。</p><ul><li>バイナリのサイズ：41MB</li><li>レイヤーのサイズ：18.03MB</li></ul><p>バイナリのサイズは41MBもあったのにレイヤーに置いてgzipすると18MBまで減っています。</p><h2 id="upxで圧縮する場合"><a href="#upxで圧縮する場合" class="headerlink" title="upxで圧縮する場合"></a>upxで圧縮する場合</h2><p>先程ビルドしたバイナリがあるのでこれをupxで圧縮します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ upx ./trivy</span><br><span class="line">                       Ultimate Packer <span class="keyword">for</span> eXecutables</span><br><span class="line">                          Copyright (C) 1996 - 2020</span><br><span class="line">UPX 3.96        Markus Oberhumer, Laszlo Molnar &amp; John Reiser   Jan 23rd 2020</span><br><span class="line"></span><br><span class="line">        File size         Ratio      Format      Name</span><br><span class="line">   --------------------   ------   -----------   -----------</span><br><span class="line">  42502160 -&gt;  19062800   44.85%   macho/amd64   trivy</span><br><span class="line"></span><br><span class="line">Packed 1 file.</span><br></pre></td></tr></table></figure><p>upxは圧縮レベルが1から10まであり、512 KiB以下だと8が使われて大きいサイズだと7が使われるようです。10も試してみたのですが（厳密には <code>--best</code>）、今回の検証ではあまりサイズが変わらなかったのでとりあえず7の結果について書いています。</p><p>上のupxの出力で19MBぐらいになってサイズが44.85%になったと書いてあります。念のため確認しておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ du -h trivy</span><br><span class="line">19M     trivy</span><br></pre></td></tr></table></figure><p>やはり19MBです。</p><h3 id="イメージのbuild-push-1"><a href="#イメージのbuild-push-1" class="headerlink" title="イメージのbuild/push"></a>イメージのbuild/push</h3><p>ここは先程と同様にイメージのbuild/pushをします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker build -t knqyf263/trivy:macho-upx .</span><br><span class="line">$ docker push knqyf263/trivy:macho-upx</span><br><span class="line">The push refers to repository [docker.io/knqyf263/trivy]</span><br><span class="line">d2fb9e0dd8ea: Pushed</span><br><span class="line">d9a3ad8f3256: Pushed</span><br><span class="line">464f5bb1fc11: Layer already exists</span><br><span class="line">b2d5eeeaba3a: Layer already exists</span><br><span class="line">macho-upx: digest: sha256:de09d822301411eb563b0e1b6fd014a0b1017eac941bb62e7bc159012b4732de size: 1159</span><br></pre></td></tr></table></figure><h3 id="レイヤーサイズの確認-1"><a href="#レイヤーサイズの確認-1" class="headerlink" title="レイヤーサイズの確認"></a>レイヤーサイズの確認</h3><p>先程同様に確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">$ ./crane manifest knqyf263/trivy:macho-upx</span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">&quot;schemaVersion&quot;</span>: 2,</span><br><span class="line">   <span class="string">&quot;mediaType&quot;</span>: <span class="string">&quot;application/vnd.docker.distribution.manifest.v2+json&quot;</span>,</span><br><span class="line">   <span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;mediaType&quot;</span>: <span class="string">&quot;application/vnd.docker.container.image.v1+json&quot;</span>,</span><br><span class="line">      <span class="string">&quot;size&quot;</span>: 2267,</span><br><span class="line">      <span class="string">&quot;digest&quot;</span>: <span class="string">&quot;sha256:ea6eb68a192d77914019c840ab46e9e56ea69f8aa8eef27befbaca5a623bbb39&quot;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">&quot;layers&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">&quot;mediaType&quot;</span>: <span class="string">&quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;</span>,</span><br><span class="line">         <span class="string">&quot;size&quot;</span>: 2811969,</span><br><span class="line">         <span class="string">&quot;digest&quot;</span>: <span class="string">&quot;sha256:540db60ca9383eac9e418f78490994d0af424aab7bf6d0e47ac8ed4e2e9bcbba&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">&quot;mediaType&quot;</span>: <span class="string">&quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;</span>,</span><br><span class="line">         <span class="string">&quot;size&quot;</span>: 6664328,</span><br><span class="line">         <span class="string">&quot;digest&quot;</span>: <span class="string">&quot;sha256:8e566f9a0cb95716b962ba9e17b0c0e3f1b970c51424032dcb7c660dce3d5ee6&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">&quot;mediaType&quot;</span>: <span class="string">&quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;</span>,</span><br><span class="line">         <span class="string">&quot;size&quot;</span>: 18719684,</span><br><span class="line">         <span class="string">&quot;digest&quot;</span>: <span class="string">&quot;sha256:d1471d88b38fce964464adabe62c9e2819cf66c62d0683567b9fcc090de76055&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">&quot;mediaType&quot;</span>: <span class="string">&quot;application/vnd.docker.image.rootfs.diff.tar.gzip&quot;</span>,</span><br><span class="line">         <span class="string">&quot;size&quot;</span>: 4080,</span><br><span class="line">         <span class="string">&quot;digest&quot;</span>: <span class="string">&quot;sha256:2fe2f7d7b9e2e83ce09db2a8599908864a8d9d3433bcfb8dce7aed35138ca3f4&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今回は17.85MBになっています。</p><h3 id="Docker-Hubで確認-1"><a href="#Docker-Hubで確認-1" class="headerlink" title="Docker Hubで確認"></a>Docker Hubで確認</h3><p>やはりサイズは17.85MBです。</p><p><img src="/images/20210520b/Untitled1.png" alt="Untitled%201.png"></p><p><a href="https://hub.docker.com/layers/knqyf263/trivy/macho-upx/images/sha256-de09d822301411eb563b0e1b6fd014a0b1017eac941bb62e7bc159012b4732de?context=repo">https://hub.docker.com/layers/knqyf263/trivy/macho-upx/images/sha256-de09d822301411eb563b0e1b6fd014a0b1017eac941bb62e7bc159012b4732de?context=repo</a></p><h3 id="サイズ比較-1"><a href="#サイズ比較-1" class="headerlink" title="サイズ比較"></a>サイズ比較</h3><p>上記の結果をまとめると以下になります。</p><ul><li>バイナリサイズ：19MB</li><li>レイヤーサイズ：17.85MB</li></ul><h2 id="サイズ比較まとめ"><a href="#サイズ比較まとめ" class="headerlink" title="サイズ比較まとめ"></a>サイズ比較まとめ</h2><p>ではupxによって圧縮した場合としない場合のサイズを比べてみます。</p><ul><li>upx圧縮しない場合<ul><li>バイナリサイズ：41MB</li><li>レイヤーサイズ：18.03MB</li></ul></li><li>upx圧縮した場合<ul><li>バイナリサイズ：19MB</li><li>レイヤーサイズ：17.85MB</li></ul></li></ul><p>ということで差は0.18MB程度になりました。予想通り、upxによる圧縮はレイヤー圧縮と比較して著しく効果があるわけではなさそうです。ELFでも検証してみます。</p><h1 id="検証（ELF）"><a href="#検証（ELF）" class="headerlink" title="検証（ELF）"></a>検証（ELF）</h1><p>Linuxでコンテナイメージを使うケースが大多数だと思うので、ELF形式の場合の検証もしてみます。</p><h2 id="upxで圧縮しない場合-1"><a href="#upxで圧縮しない場合-1" class="headerlink" title="upxで圧縮しない場合"></a>upxで圧縮しない場合</h2><h3 id="バイナリのビルド-1"><a href="#バイナリのビルド-1" class="headerlink" title="バイナリのビルド"></a>バイナリのビルド</h3><p>linux/amd64向けにビルドします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ GOOS=linux GOARCH=amd64 go build -o trivy cmd/trivy/main.go</span><br><span class="line">$ du -h trivy</span><br><span class="line">41M     trivy</span><br></pre></td></tr></table></figure><p>machoの時と同じく41MBでした。</p><h3 id="Docker-Hubで確認-2"><a href="#Docker-Hubで確認-2" class="headerlink" title="Docker Hubで確認"></a>Docker Hubで確認</h3><p>machoの時と同じくイメージをbuild/pushし、今回は直接Docker Hubで確認してみます。</p><p><img src="/images/20210520b/Untitled2.png" alt="Untitled%202.png"></p><p>18.25MBでした。</p><p><a href="https://hub.docker.com/layers/knqyf263/trivy/elf-nonupx/images/sha256-cea16479687eaa610bf0bfec96e415f791aea1ca19e7e26fa6240ed5a8448b75?context=repo">https://hub.docker.com/layers/knqyf263/trivy/elf-nonupx/images/sha256-cea16479687eaa610bf0bfec96e415f791aea1ca19e7e26fa6240ed5a8448b75?context=repo</a></p><h2 id="サイズ比較-2"><a href="#サイズ比較-2" class="headerlink" title="サイズ比較"></a>サイズ比較</h2><ul><li>バイナリのサイズ：41MB</li><li>レイヤーのサイズ：18.25MB</li></ul><h2 id="upxで圧縮する場合-1"><a href="#upxで圧縮する場合-1" class="headerlink" title="upxで圧縮する場合"></a>upxで圧縮する場合</h2><h3 id="バイナリのビルド-2"><a href="#バイナリのビルド-2" class="headerlink" title="バイナリのビルド"></a>バイナリのビルド</h3><p>upxで圧縮します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ upx ./trivy</span><br><span class="line">                       Ultimate Packer <span class="keyword">for</span> eXecutables</span><br><span class="line">                          Copyright (C) 1996 - 2020</span><br><span class="line">UPX 3.96        Markus Oberhumer, Laszlo Molnar &amp; John Reiser   Jan 23rd 2020</span><br><span class="line"></span><br><span class="line">        File size         Ratio      Format      Name</span><br><span class="line">   --------------------   ------   -----------   -----------</span><br><span class="line">  42878967 -&gt;  20087380   46.85%   linux/amd64   trivy</span><br><span class="line"></span><br><span class="line">Packed 1 file.</span><br><span class="line">$ du -h ./trivy</span><br><span class="line">20M     ./trivy</span><br></pre></td></tr></table></figure><p>20MBになりました。</p><h3 id="Docker-Hubで確認-3"><a href="#Docker-Hubで確認-3" class="headerlink" title="Docker Hubで確認"></a>Docker Hubで確認</h3><p>18.64MBでした。</p><p><img src="/images/20210520b/Untitled3.png" alt="Untitled%203.png"></p><h3 id="サイズ比較-3"><a href="#サイズ比較-3" class="headerlink" title="サイズ比較"></a>サイズ比較</h3><p>ELFバイナリをupxした場合のサイズ比較は以下になります。</p><ul><li>バイナリのサイズ：20MB</li><li>レイヤーのサイズ：18.64MB</li></ul><h2 id="サイズ比較まとめ-1"><a href="#サイズ比較まとめ-1" class="headerlink" title="サイズ比較まとめ"></a>サイズ比較まとめ</h2><ul><li>upx圧縮しない場合<ul><li>バイナリサイズ：41MB</li><li>レイヤーサイズ：18.25MB</li></ul></li><li>upx圧縮した場合<ul><li>バイナリサイズ：20MB</li><li>レイヤーサイズ：18.64MB</li></ul></li></ul><p>恐ろしいことが起きています。サイズが逆転しました。upx圧縮した場合のほうが、0.39MBもレイヤーサイズが増えています。先程machoで削減したのが0.18MBだったことを考えるとかなり増えている印象です。</p><p>upxは内部でLZMAを使っておりgzipよりも圧縮率が高いことを謳っているので、なぜこんな事が起きるのかと思いますがupxは実行ファイル形式を保つために展開プログラムもバイナリに埋め込んでいるため、単純なgzipと比較すると大きくなってしまうことがあるのかもしれません。レイヤーは丸ごとgzipされ展開されてから利用される前提で、upxは実行ファイルのまま圧縮して実行時に展開する想定なので戦っている土俵が違う感じがあります。レイヤーgzipの場合は展開プログラムはレイヤーの外にあります。実行時に展開できる形でgzipを使うとupxに劣るという意味で、gzipよりも圧縮率が高いと言っているのかもしれません。あくまで推測なので厳密なところは分かっていません。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回はupxで圧縮した実行ファイルをコンテナイメージに置いた場合のサイズ削減率について検証しました。元からコンテナイメージはレイヤー単位でgzip圧縮されるため、upxで圧縮してもそこまで大きなサイズの削減は得られませんでした。</p><p>これはもちろんプラットフォームやアーキテクチャによっても異なると思いますしプロジェクトによっても異なります。TrivyのELFの例では増えてしまいましたが、フューチャーが提供しているVulsというOSSではELFでも0.1MB程度サイズが小さくなりました。stripしたりldflagsを付けたりすることで結果が変わってくる可能性もあります。</p><p>レイヤーに他のバイナリが存在したらgzipがさらに有利になる可能性もありますし、Goのバイナリ以外は検証していないのでupxの方が有利になる可能性もあります。</p><p>サイズの比較だけをしてきましたが、upxは当然実行時の展開コストもあります。以下は古いCPUにおける値なので今はもっと速いと思いますが、それでもバイナリが大きくなれば展開コストはある程度大きくなってきます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- very fast decompression: about 10 MiB&#x2F;sec on an ancient Pentium 133,</span><br><span class="line">    about 200 MiB&#x2F;sec on an Athlon XP 2000+.</span><br></pre></td></tr></table></figure><p>他にもイメージビルド時に圧縮の時間もかかるためCI/CDの時間は増加します。 <code>--best</code> をつけるとTrivyの41MBのELF実行ファイルをupxで圧縮するのに5分かかりました。イメージビルドの時間を5分増加させて0.1MBの削減だった場合にそれが見合っているのかどうかは考える必要があると思います。5分増加させた挙げ句にサイズも増えていると最悪です。</p><p>そもそもupxの導入にかかるコストもあります。Dockerfileを修正したりCI/CDの設定をしたりが必要になってきます。</p><p>今回のブログでは必ずupxするべきだ、絶対にupxするべきではない、ということは言っていません。ただ盲目的にupxで圧縮しておけば良いわけではないことを知ってもらえればと思い書いています。もし本当にイメージサイズを削減したいならきちんと検証して比較することをおすすめします。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;コンテナイメージ内の実行ファイルをupxで圧縮するべきか&quot;&gt;&lt;a href=&quot;#コンテナイメージ内の実行ファイルをupxで圧縮するべきか&quot; class=&quot;headerlink&quot; title=&quot;コンテナイメージ内の実行ファイルをupxで圧縮するべきか&quot;&gt;&lt;/a&gt;コン</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
    <category term="upx" scheme="https://future-architect.github.io/tags/upx/"/>
    
    <category term="外部寄稿" scheme="https://future-architect.github.io/tags/%E5%A4%96%E9%83%A8%E5%AF%84%E7%A8%BF/"/>
    
  </entry>
  
  <entry>
    <title>エンジニアが持っておくと幸せになれるビジネス視点</title>
    <link href="https://future-architect.github.io/articles/20210520a/"/>
    <id>https://future-architect.github.io/articles/20210520a/</id>
    <published>2021-05-19T15:00:00.000Z</published>
    <updated>2021-05-20T01:58:51.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="本エントリーの目的"><a href="#本エントリーの目的" class="headerlink" title="本エントリーの目的"></a>本エントリーの目的</h1><p>もしあなたがテックリード（または志している）エンジニアであれば、きっとこんな風に感じた経験があるのではないでしょうか。</p><p>「世界にはイカした新技術（しかもオープンなのに！）がこんなにたくさんあるのに、なぜどれだけ主張しても採用が叶わないのだろう」と。</p><p>それが原因で上司と衝突したり、あるいはその場を去るきっかけになった方もいるかもしれません。</p><p>そんな悩めるエンジニアが、ここぞという時に突破するための大切な「ビジネス視点」の話をします。</p><p>システム導入プロジェクトでなされる様々な意思決定のツボを知ることで、一段高い視座での技術的リーダーシップ発揮へ役立てていただければ幸いです。</p><h2 id="なぜエンジニアにビジネス視点が必要か"><a href="#なぜエンジニアにビジネス視点が必要か" class="headerlink" title="なぜエンジニアにビジネス視点が必要か"></a>なぜエンジニアにビジネス視点が必要か</h2><p>答えはシンプルです。趣味や学術研究領域のエンジニアでない限り、我々は基本的に「ビジネスの世界でエンジニアリングを生業としている」からです。</p><p>平たく言うと、お給料をもらっているエンジニアであれば、そのお金の元をたどれば必ず何らかの事業活動（＝ビジネス）があるはずなのです。</p><p>ビジネス視点を持てば、事業活動が見えてくる。そうすれば、エンジニア自身の立ち振る舞いにも何らか活かせるような気がしますよね。</p><p>ここでいう「ビジネス視点」とは、一言でいうと何か。<br>それは「経済合理性」です。</p><h2 id="ビジネスで重視される「経済合理性」とは"><a href="#ビジネスで重視される「経済合理性」とは" class="headerlink" title="ビジネスで重視される「経済合理性」とは"></a>ビジネスで重視される「経済合理性」とは</h2><p>さて、ビジネス視点を紐解いていきましょう。</p><p>企業のシステム導入プロジェクトではよく「IT投資」という表現を使います。割となんとなく見過ごしがちなのですが、この「投資」という言葉が重要です。</p><p>そう。企業にとって、システム導入は「投資」なのです。</p><p>個人でいえば、株や不動産を買って資産を増やす、あれです。<br>資本を投じ、リスクを取って、リターンを期待する、あれです。</p><p>企業も一緒です。</p><p>資金や人的リソースを投じ、様々なリスクを取って、何らかのリターンを期待する。その期待できるリターンが投入資本やリスクよりも大きいからこそ、構想したプロジェクト企画に対して経営者がGOを出すのです。</p><p>この関係性は、分かりやすく式で表現することができます。</p><p>　<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="19.709ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 8711.6 950" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">リ</text><text data-variant="normal" transform="translate(600, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">タ</text><text data-variant="normal" transform="translate(1200, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">ー</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">ン</text><use xlink:href="#MJX-1-TEX-N-3E" transform="translate(2400, 0)"></use><text data-variant="normal" transform="translate(3178, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">投</text><text data-variant="normal" transform="translate(3778, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">入</text><text data-variant="normal" transform="translate(4378, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">資</text><text data-variant="normal" transform="translate(4978, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">本</text></g><g data-mml-node="mo" transform="translate(5855.8, 0)"><use xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mo" transform="translate(6911.6, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">リ</text><text data-variant="normal" transform="translate(600, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">ス</text><text data-variant="normal" transform="translate(1200, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">ク</text></g></g></g></svg></mjx-container></p><p>では、IT投資に期待される「リターン」とは何か。</p><p>ここにビジネスで重視される「経済合理性」がクッキリと表れてきます。</p><h2 id="IT投資に期待される５つのリターン"><a href="#IT投資に期待される５つのリターン" class="headerlink" title="IT投資に期待される５つのリターン"></a>IT投資に期待される５つのリターン</h2><p>次の図をご覧ください。</p><img src="/images/20210520a/5つのリターン.png" alt="1.売上を伸ばす、2.売上を下げない、3業務効率化、4.システムコスト削減、5.コンプライアンス・リスク対応" width="1572" height="882" loading="lazy"><p>「事業継続」というのは、「やらないとどうしようもない」投資なので、実施自体が投資の目的です。それ以外の４つは、「売上」を何とかするか、「コスト」を何とかするか。</p><p>すなわちたいていの場合、投資対効果というのは「利益の拡大」、すなわち「儲かるかどうか」が要点です。先述の式にあてはめれば、リスクを差っ引いても、投入資本よりも利益を拡大できることが、経済合理性がある、ということです。</p><p>これはビジネス視点では、非常に強い前提事項です。個人の投資に例えれば・・・説明不要ですよね。</p><p>さて、最初の疑問に戻りましょう。</p><p>「世界にはイカした新技術（しかもオープンなのに！）がこんなにたくさんあるのに、なぜどれだけ主張しても採用が叶わないのだろう」</p><h2 id="ビジネスサイドが新技術を採用しない主な理由と対策"><a href="#ビジネスサイドが新技術を採用しない主な理由と対策" class="headerlink" title="ビジネスサイドが新技術を採用しない主な理由と対策"></a>ビジネスサイドが新技術を採用しない主な理由と対策</h2><h3 id="【理由１】リターン起因：新技術を採用しても「別に儲からない」と思われているから"><a href="#【理由１】リターン起因：新技術を採用しても「別に儲からない」と思われているから" class="headerlink" title="【理由１】リターン起因：新技術を採用しても「別に儲からない」と思われているから"></a>【理由１】リターン起因：新技術を採用しても「別に儲からない」と思われているから</h3><p>極めて残念な帰結です。先に述べた「５つのリターン」に対し、候補技術の必要性・効能が伝わっていないということです。技術トレンドだけでは、ましてやロマンやムードだけでは、ビジネス判断は動かないのです。（逆に、技術トレンドやムードのみでされるような技術選定は、ビジネス視点で非常に危ういものということもできます）</p><p>この場合、候補技術が「売上」「コスト」観点でいかに寄与するか、ロジックを組み立てるのが有効です。</p><p>劇的に開発生産性が向上するのであれば分かりやすいですが、たいていの場合、新技術はキャッチアップコストがかかります。中長期のメンテナンスコスト効果、変化対応力向上（エコシステムの将来性含む）等を主軸に置くとよいでしょう。</p><p>なお、有償の開発プラットフォーム（SaaS、ローコード等）は逆の注意が必要です。短期的にコスト削減効果が大きくても、中長期踏まえてIT投資の目的に寄与するか・足枷にならないかどうか、保守運用観点で吟味しましょう。</p><h3 id="【理由２】リスク起因：新技術を採用すると「デリバリリスクが高まる」と思われているから"><a href="#【理由２】リスク起因：新技術を採用すると「デリバリリスクが高まる」と思われているから" class="headerlink" title="【理由２】リスク起因：新技術を採用すると「デリバリリスクが高まる」と思われているから"></a>【理由２】リスク起因：新技術を採用すると「デリバリリスクが高まる」と思われているから</h3><p>先ほどの式を思い出してください。</p><p>　<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.452ex" xmlns="http://www.w3.org/2000/svg" width="19.709ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 8711.6 950" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path><path id="MJX-1-TEX-N-2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mo"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">リ</text><text data-variant="normal" transform="translate(600, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">タ</text><text data-variant="normal" transform="translate(1200, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">ー</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">ン</text><use xlink:href="#MJX-1-TEX-N-3E" transform="translate(2400, 0)"></use><text data-variant="normal" transform="translate(3178, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">投</text><text data-variant="normal" transform="translate(3778, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">入</text><text data-variant="normal" transform="translate(4378, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">資</text><text data-variant="normal" transform="translate(4978, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">本</text></g><g data-mml-node="mo" transform="translate(5855.8, 0)"><use xlink:href="#MJX-1-TEX-N-2B"></use></g><g data-mml-node="mo" transform="translate(6911.6, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">リ</text><text data-variant="normal" transform="translate(600, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">ス</text><text data-variant="normal" transform="translate(1200, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">ク</text></g></g></g></svg></mjx-container></p><p>技術選定には、リターンだけでなく、リスク観点も重要になります。経験済の方も多いのではと思いますが、一般的に、未経験の技術要素を含む場合、プロジェクトデリバリの難易度は高まります。そのため、ビジネスサイドは、社内外に実績豊富な技術採用をしやすい傾向があります。</p><p>新技術を提案する際には、入念に調査・準備をし、リスクヘッジとその説明に努めましょう。もちろん、「作って終わり」ではなく、保守運用観点のリスク対応も忘れずに。</p><p>実績づくりとして、スモールサクセスを積み重ねることも有効です。調査研究ネタをテックブログの記事にするのもイイですね。</p><h2 id="目的が大事"><a href="#目的が大事" class="headerlink" title="目的が大事"></a>目的が大事</h2><p>ここまで、技術選定を例に「経済合理性」というビジネス視点の役立て方を説明してきました。</p><p>さて、もう一つ大切な視点をお伝えして締めたいと思います。</p><p>それは、「技術＝手段」であり「目的が大事」ということです。</p><p>技術に生きるものとして、自ら手掛けるモノのクオリティにこだわるのは当然です。しかし、最初に述べた通り、あくまで「事業活動のための技術活用」です。</p><img src="/images/20210520a/問題解決のために大切なこと.png" alt="目的＞方針＞手段。方針策定の事実の関係図" width="1567" height="882" loading="lazy"><p>ビジネスに限らず、すべての活動において重要なのは「目的を見失わない」こと。目的を定め、必要な事実（ファクト）をしっかりと収集する。そして、「目的」と「手段」をつなぐために「方針」として言語化する。「方針」を明確にすると、「手段」の選択肢を比較検討し、その中から最適解を効率的に選ぶことができる。</p><p>テックリードは「目的」をしっかりと見据えつつ、「方針」を打ち出すことが重要な役割です。</p><p>「手段」としての技術の選択肢を追うだけではなく、「何のためのシステム開発なのか」を技術視点で語れることが重要と思います。「業務要件を決めてもってきて」と線引き・下請けするのではなく、「IT投資の目的に照らすとこの方針を取るべし」と仮説を立てることが成功のカギです。</p><p>スマートに目的達成できるエンジニア、ステキだと思います。</p><h2 id="余談：経済合理性の功罪"><a href="#余談：経済合理性の功罪" class="headerlink" title="余談：経済合理性の功罪"></a>余談：経済合理性の功罪</h2><p>ちなみに、あまり経済合理性ばかり追求しすぎるのも、中長期目線では考えものです。</p><p>組織開発・人材育成はメンバーのモチベーション・感性によるところが大きいこともあり、経済合理性ばかり追求するとうまくいかないといわれています。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>今回は新技術の選定・採用検討を例に、なぜエンジニアにビジネス視点が必要か、「経済合理性」というビジネス視点の役立て方を紹介しました。そして、問題解決のためには「目的を見失わない」ことの重要性を述べました。</p><p>ちょっと毛色の違うエントリーでしたが、ここまで読んでいただき、ありがとうございました。日々の業務のどこかで役立てていただければ幸いです。</p><p>以上、「エンジニアが持っておくと幸せになれるビジネス視点」でした。「経済合理性」はビジネス視点のほんの一部に過ぎないので、ぜひ技術・ビジネスとシームレスに、興味関心を持ってみてください。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;本エントリーの目的&quot;&gt;&lt;a href=&quot;#本エントリーの目的&quot; class=&quot;headerlink&quot; title=&quot;本エントリーの目的&quot;&gt;&lt;/a&gt;本エントリーの目的&lt;/h1&gt;&lt;p&gt;もしあなたがテックリード（または志している）エンジニアであれば、きっとこんな風に感じ</summary>
      
    
    
    
    <category term="Business" scheme="https://future-architect.github.io/categories/Business/"/>
    
    
    <category term="ビジネス" scheme="https://future-architect.github.io/tags/%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Flutter ウィジェットテスト入門</title>
    <link href="https://future-architect.github.io/articles/20210519a/"/>
    <id>https://future-architect.github.io/articles/20210519a/</id>
    <published>2021-05-18T15:00:00.000Z</published>
    <updated>2021-05-21T12:25:59.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの村田です。<br><a href="https://future-architect.github.io/articles/20210510a/">Dart/Flutter連載</a>の最終日ということで、今回はFlutterでのウィジェットテストについてご紹介したいと思います。</p><h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h1><p>環境構築は<a href="https://flutter.dev/docs/get-started/install">こちら</a>に沿って実施します。私はmacOSを利用していますが、利用しているOSごとに丁寧に手順が準備されているので、それに従って環境構築を進めればOKです。</p><p>本記事の前提となるFlutterのバージョンは <code>2.0.6</code> です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ flutter --version</span><br><span class="line">Flutter 2.0.6 • channel stable • https://github.com/flutter/flutter.git</span><br><span class="line">Framework • revision 1d9032c7e1 (3 weeks ago) • 2021-04-29 17:37:58 -0700</span><br><span class="line">Engine • revision 05e680e202</span><br><span class="line">Tools • Dart 2.12.3</span><br></pre></td></tr></table></figure><p>ちなみに今回 channel の設定が <code>stable</code> となっているんですが、ちょうど1年くらい前(2020.06)に書いた<a href="https://future-architect.github.io/articles/20200603/">この記事</a>では、Flutter Web を使うためには channel は <code>beta</code> である必要がありました。進歩ですね。喜ばしい限りです。</p><p>さて、Flutterはコマンドでデフォルトのアプリを作成できてしまうのでさくっと作ります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ flutter create app</span><br></pre></td></tr></table></figure><p>作成された tester ディレクトリの中に入り、早速アプリを立ち上げてみます。起動デバイスはどれでも良いですが、本記事では Flutter web を利用することとします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> app</span><br><span class="line">$ flutter run -d chrome</span><br></pre></td></tr></table></figure><p>するとおなじみのデフォルトアプリが立ち上がります。</p><img src="/images/20210519a/image.png" alt="デフォルトのカウンタアプリ" width="1142" height="1160" loading="lazy"><p>画面右下の FloatingActionButton を押下すると画面中央のカウンタがインクリメントされていく、というシンプルな作りになっています。</p><p>ここまで出来たら事前準備は完了です。</p><h1 id="ウィジェットテストを実施する"><a href="#ウィジェットテストを実施する" class="headerlink" title="ウィジェットテストを実施する"></a>ウィジェットテストを実施する</h1><p>ここからが本題です。皆さんは Flutter の create コマンドを利用してアプリを作成するとテストのコードも一緒に生成されることをご存知でしょうか？</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app</span><br><span class="line">  L android</span><br><span class="line">  L ios</span><br><span class="line">  L lib</span><br><span class="line">  L <span class="built_in">test</span></span><br><span class="line">    L widget_test.dart</span><br></pre></td></tr></table></figure><p>詳細なディレクトリ構成は割愛しますが、上記のような形で生成されたものの中に <code>test</code> というディレクトリがあり、その配下に <code>widget_test.dart</code> というファイルが存在します。</p><figure class="highlight dart"><figcaption><span>widget_test.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is a basic Flutter widget test.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// To perform an interaction with a widget in your test, use the WidgetTester</span></span><br><span class="line"><span class="comment">// utility that Flutter provides. For example, you can send tap and scroll</span></span><br><span class="line"><span class="comment">// gestures. You can also use WidgetTester to find child widgets in the widget</span></span><br><span class="line"><span class="comment">// tree, read text, and verify that the values of widget properties are correct.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_test/flutter_test.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:tester/main.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  testWidgets(<span class="string">&#x27;Counter increments smoke test&#x27;</span>, (WidgetTester tester) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// Build our app and trigger a frame.</span></span><br><span class="line">    <span class="keyword">await</span> tester.pumpWidget(MyApp());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Verify that our counter starts at 0.</span></span><br><span class="line">    expect(find.text(<span class="string">&#x27;0&#x27;</span>), findsOneWidget);</span><br><span class="line">    expect(find.text(<span class="string">&#x27;1&#x27;</span>), findsNothing);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Tap the &#x27;+&#x27; icon and trigger a frame.</span></span><br><span class="line">    <span class="keyword">await</span> tester.tap(find.byIcon(Icons.add));</span><br><span class="line">    <span class="keyword">await</span> tester.pump();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Verify that our counter has incremented.</span></span><br><span class="line">    expect(find.text(<span class="string">&#x27;0&#x27;</span>), findsNothing);</span><br><span class="line">    expect(find.text(<span class="string">&#x27;1&#x27;</span>), findsOneWidget);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Flutter のテストは以下のコマンドで実行でき、成功すると <code>All tests passed!</code> と表示されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ flutter <span class="built_in">test</span> <span class="built_in">test</span>/widget_test.dart</span><br><span class="line">00:02 +1: All tests passed!</span><br></pre></td></tr></table></figure><p>これだけだと何が起きているのか分からないので、テストファイルの中身を順繰りに見ていくことにします。</p><h2 id="pubspec-yaml-の定義"><a href="#pubspec-yaml-の定義" class="headerlink" title="pubspec.yaml の定義"></a>pubspec.yaml の定義</h2><p>まず、それとなく実行したテストですが、そもそもテスト実行のためには <code>flutter_test</code> パッケージが必要となります。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dev_dependencies:</span></span><br><span class="line">  <span class="attr">flutter_test:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br></pre></td></tr></table></figure><p>上記は pubspec.yaml の記載ですが、Flutter の create コマンドを使ってアプリを作成すると自動的にこの依存関係が記載されます。もし自分で pubspec.yaml を書き上げる場合には <code>flutter_test</code> パッケージへの依存を追記してあげる必要があります。</p><h2 id="testWidgets"><a href="#testWidgets" class="headerlink" title="testWidgets"></a>testWidgets</h2><p>次にテストファイルの中身を見ていきます。先頭で使用されているのが <code>testWidgets()</code> という関数です。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  testWidgets(<span class="string">&#x27;Counter increments smoke test&#x27;</span>, (WidgetTester tester) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これは <code>flutter_test</code> パッケージで定義されている関数で、ウィジェットテストを実施したい時に使うものです。 <code>WidgetTester</code> というヘルパークラスが用意されており、実際のテストコードはこの <code>WidgetTester</code> を活用しつつ記述します。</p><h2 id="pumpWidget"><a href="#pumpWidget" class="headerlink" title="pumpWidget"></a>pumpWidget</h2><p>次は <code>pumpWidget()</code> についてです。 <code>testWidgets()</code> の先頭に登場する関数です。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  testWidgets(<span class="string">&#x27;Counter increments smoke test&#x27;</span>, (WidgetTester tester) <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="comment">// Build our app and trigger a frame.</span></span><br><span class="line">    <span class="keyword">await</span> tester.pumpWidget(MyApp());</span><br></pre></td></tr></table></figure><p><code>pumpWidget()</code> は対象の Widget のインスタンスを生成し、その生成処理が問題なく完了することをチェックします。今回は <code>MyApp</code> が指定されているので、 main.dart にて StatelessWidget として定義されている <code>MyApp</code> がチェック対象です。</p><h2 id="pump"><a href="#pump" class="headerlink" title="pump"></a>pump</h2><p><code>pump()</code> は Widget の再生成を促すメソッドです。通常UI操作により描画対象に変更が加わった際には自動的に Widget が再生成されます。</p><p>例えば以下の画面。右下のボタンを2回押下したのですが、画面中央の数字がボタン押下に合わせて増えています。ユーザの操作に合わせて Widget の再生成が行われています。</p><img src="/images/20210519a/image_2.png" alt="pump()の動作確認のためのアプリ画像" width="1130" height="1148" loading="lazy"><p>この自動的な Widget の再生成がテスト実行環境では行われません。そのため、テストコードの中で明示的に Widget 再生成の指示を出す必要があり、それがこの <code>pump()</code> というわけです。</p><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>さて、UIコンポーネントを含むテストで一番大変なのは、テスト対象のオブジェクトをテストプログラム上で特定することではないでしょうか？これが簡単にできるように整備されていればいるほどテスタビリティが高いので、個人的にはとてもうれしいポイントです。</p><p><code>find()</code> は <code>flutter_test</code> パッケージが提供するトップレベルの関数で、文字やアイコンなどを元に該当する Widget を特定する Finder として機能します。</p><p>今回参照しているテストの中でも数箇所で登場します。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// // Verify that our counter starts at 0.</span></span><br><span class="line">expect(find.text(<span class="string">&#x27;0&#x27;</span>), findsOneWidget);</span><br><span class="line">expect(find.text(<span class="string">&#x27;1&#x27;</span>), findsNothing);</span><br><span class="line"></span><br><span class="line"><span class="comment">// // Tap the &#x27;+&#x27; icon and trigger a frame.</span></span><br><span class="line"><span class="keyword">await</span> tester.tap(find.byIcon(Icons.add));</span><br></pre></td></tr></table></figure><p><code>find.text(&#39;0&#39;)</code> というのが Finder で、<code>0</code> の文字列を含む Widget を Widget ツリーの中から探索します。今回は画面中央に表示されるカウンターがヒットします。</p><p>また、 <code>find.byIcon(Icons.add) </code> ではアイコンを起点に Widget を探索します。今回は画面右下に表示されるプラスマークの書かれた青いボタンがヒットします。</p><h2 id="expect"><a href="#expect" class="headerlink" title="expect"></a>expect</h2><p><code>expects()</code> は Matcher と一緒に用いることで、Widget が期待通りに生成されているか否かを検証します。</p><p>今回だとまずは以下の部分。初期描画時は画面中央のカウンターは <code>0</code> と表記されているはずです。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// // Verify that our counter starts at 0.</span></span><br><span class="line">expect(find.text(<span class="string">&#x27;0&#x27;</span>), findsOneWidget);</span><br><span class="line">expect(find.text(<span class="string">&#x27;1&#x27;</span>), findsNothing);</span><br></pre></td></tr></table></figure><p>次に以下の部分。ボタンを1回押下するので、カウンターの数値は <code>0</code> から <code>1</code> に変わっているはずです。ちなみに、先程記載したようにボタン押下後には Widget 再生成が行われないので <code>pump()</code> をコールしています。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// // Tap the &#x27;+&#x27; icon and trigger a frame.</span></span><br><span class="line"><span class="keyword">await</span> tester.tap(find.byIcon(Icons.add));</span><br><span class="line"><span class="keyword">await</span> tester.pump();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Verify that our counter has incremented.</span></span><br><span class="line">expect(find.text(<span class="string">&#x27;0&#x27;</span>), findsNothing);</span><br><span class="line">expect(find.text(<span class="string">&#x27;1&#x27;</span>), findsOneWidget);</span><br></pre></td></tr></table></figure><p>これでテストファイルの中身はすべて触れることができました。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>Flutter で実施するウィジェットテストについてご紹介しました。 <code>expect()</code> を使って期待値との比較を行うのはどのテストフレームワークでも似たようなものと思いますので、 <code>flutter_test</code> パッケージや <code>WidgetTester</code> クラスを活用していつものテストを Flutter でもサクッとこなせるようになりたいなと思いました。</p><p><a href="/articles/20210510a/">Dart/Flutter連載</a>は完走です！皆様お付き合い頂きありがとうございました。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの村田です。&lt;br&gt;&lt;a href=&quot;https://future-architect.github.io</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="テスト" scheme="https://future-architect.github.io/tags/%E3%83%86%E3%82%B9%E3%83%88/"/>
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>HTTP検索条件、GETにするか？POSTにするか？</title>
    <link href="https://future-architect.github.io/articles/20210518a/"/>
    <id>https://future-architect.github.io/articles/20210518a/</id>
    <published>2021-05-17T15:00:00.000Z</published>
    <updated>2021-05-19T00:31:16.306Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>真野です。</p><p>RESTfullとかRESTishな方針でWebAPIの横断検索を設計する際にチーム内で方針について議論したやり取りの備忘記事です。</p><p>注意としてB2C向けなWebAPIを提供するというよりは、主に企業間または企業内部で使われるようなAPIの設計のバイアスがあると思います。LSUDs（Large Set of Unknown Developers）かSSKDs（Small Set of Known Developers）で言えば、確実にSSKDs脳で記事が書かれています。</p><h2 id="REST-API"><a href="#REST-API" class="headerlink" title="REST API"></a>REST API</h2><p>広く使われているため日本語記事も多数です。<a href="https://www.infoq.com/jp/articles/designing-restful-http-apps-roth/">実践RESTful HTTP - InfoQ</a> や、<a href="https://qiita.com/masato44gm/items/dffb8281536ad321fb08">0からREST APIについて調べてみた</a> など良さそうな記事が沢山でてくるの読むと良いかなと思います。一般的な設計方法はやや古いですが<a href="https://www.oreilly.co.jp/books/9784873116860/">Web API: The Good Parts</a>の書籍が短くまとまっているためサクッと目を通す人が多いかなと思います。</p><h2 id="背景と論点"><a href="#背景と論点" class="headerlink" title="背景と論点"></a>背景と論点</h2><img src="/images/20210518a/choice-2692575_640.jpg" alt="アイキャッチ" width="640" height="237" loading="lazy"><p><a href="https://pixabay.com/ja/users/geralt-9301/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2692575">Gerd Altmann</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2692575">Pixabay</a>からの画像</p><p>やりたいことの背景です。</p><ul><li><strong>WebAPIで横断的な検索条件を指定したい</strong><ul><li>アプリケーションドメインとしてネストを含む構造化が必要<ul><li>JSONで指定できるようにしたい</li></ul></li></ul></li><li>URLのクエリパラメータにすることも考えたが、検索条件だけURLエンコードにするのは特殊すぎるので避けたい<ul><li>あと、最大URL長を超える可能性がゼロではないので避けておきたい</li></ul></li><li>既存はRESTishなWebAPIであるため、ここだけgRPCとかGraphQLにするのは状況的に不可</li></ul><p>このため、 <strong>検索条件はリクエストボディにJSONで指定する</strong> ことにします。リクエストボディにJSONをもたせること自体は、OpenAPIでも普通に記述できますし一般的でしょう。</p><p>その前提で論点として掲題にあるGET/POSTの議論がでてきました。それぞれの主張はです。</p><ol><li>実現したいことはデータ取得であるため、<strong>WebのセマンティックスとしてHTTPのGETメソッドを利用</strong> しリクエストボディを付けて指定すべき</li><li><strong>HTTP GETメソッドにリクエストボディをもたせるのは違和感がある</strong>。POSTの方がまだ自然ではないか</li></ol><p>この話が3年で3回くらい周囲で発生したのでまとめます。</p><h2 id="よくある議論の流れ"><a href="#よくある議論の流れ" class="headerlink" title="よくある議論の流れ"></a>よくある議論の流れ</h2><p>それぞれの主張について補足していきます。大体の会話の流れを楽しんで貰えればです。</p><h3 id="GETでリクエストボディを使うことの是非"><a href="#GETでリクエストボディを使うことの是非" class="headerlink" title="GETでリクエストボディを使うことの是非"></a>GETでリクエストボディを使うことの是非</h3><p>まずは概念的なあるべき論。</p><ul><li>検索（参照）の処理なのにPOSTメソッドを利用するのは分かりにくいのではないか？</li><li>例えば、ElasticsearchはGETメソッドにリクエストボディを指定している（POSTにフォールバックもしています）<ul><li>Issueの<a href="https://github.com/elastic/elasticsearch/issues/16024">ここ</a>でそれってどうなの？っていう議論がある</li><li>GETにリクエストボディを置くこと自体は、実プロダクトでも事例がある</li></ul></li><li>GETにリクエストボディって、RFCに違反していない？<ul><li><a href="https://tools.ietf.org/html/rfc7231">RFC7231 Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</a>だと、明示的に違反とは書かれていなさそう。GET（とDELETE）でリクエストボディを含めると、実装によってはリクエストが拒否されるかもよという記述</li><li>微妙な記述だが、GETにリクエストボディを指定することを禁じているというわけではなさそう</li></ul></li></ul><blockquote><p>A payload within a GET request message has no defined semantics;<br>sending a payload body on a GET request might cause some existing implementations to reject the request.<br>A payload within a DELETE request message has no defined semantics;<br>sending a payload body on a DELETE request might cause some existing<br>implementations to reject the request.</p></blockquote><h3 id="周辺ツールの対応状況"><a href="#周辺ツールの対応状況" class="headerlink" title="周辺ツールの対応状況"></a>周辺ツールの対応状況</h3><p>続いて実務的な話へ議論が進むことが多いです。</p><ul><li>そもそもGETにリクエストボディを指定するって、ツールが対応しているの？<ul><li>curlは指定できる<ul><li><code>curl -X GET http://localhost:8000/search --data &#39;&#123;&quot;q&quot;:&quot;example&quot;&#125;&#39;</code></li></ul></li><li>VS Codeの<a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client">Rest Client</a> の対応状況<ul><li>対応している</li></ul></li><li><a href="https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop/related">Postman</a>では不可じゃないか？<ul><li>裏技があるかもしれないけど、GETのときはタブが無効化されていて指定できない</li></ul></li></ul></li><li>OpenAPIで指定できるの？<ul><li>OpenAPI Specification v2（Swagger）だと指定可能<ul><li>少なくてもgo-swaggerのコード生成は対応していそう</li></ul></li><li>OpenAPI Specification v3だと仕様的に <strong>不可</strong><ul><li><code>GET, DELETE and HEAD are no longer allowed to have request body because it does not have defined semantics as per RFC 7231.</code> と書かれている</li><li><a href="https://swagger.io/docs/specification/describing-request-body/">https://swagger.io/docs/specification/describing-request-body/</a></li></ul></li></ul></li><li>ライブラリ対応しているのか？<ul><li>AxiosだとGETでBodyを送ってくれないようだ。<a href="https://github.com/axios/axios/issues/787">Issue</a>にその話がある<ul><li>フロントエンドがAxiosに依存していると厳しい..</li></ul></li></ul></li><li><a href="https://qiita.com/uhooi/items/e82c8d294a8465a3e6f3">GETメソッドでリクエストボディを指定してはいけない(Swift) - Qiita</a><ul><li>iOSがクライアントにいるとマズイかも</li></ul></li><li>AWSのCloudFrontは<a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#RequestCustom-get-body">GETリクエストでリクエストボディを含むと403(Forbidden)を返す</a><ul><li><code>If a viewer GET request includes a body, CloudFront returns an HTTP status code 403 (Forbidden) to the viewer.</code> とドキュメントに書いています</li></ul></li></ul><p>概念的なあるべき論が落ち着いた後、GETにリクエストボディの設定は、OpenAPI v3でNGだったり、各種ライブラリで利用不可だったりで茨の道だという結論になりがちです。</p><p>私もあるべき論は置いておいて、業務ではPOSTメソッドで検索APIを設計する方向で舵を切るようになりました。</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><ol><li>GET/POSTの両方用意したら良いのでは？<ul><li>LSUDsとかOSSツールならそれの方が良い気がします</li><li>SSKDsだと、誤ってGET版を触って動かないんだけどなんで？とか問い合わせを受けそうなので、利用者側の設計の余地を狭めるためにどっちか片方だけ（POSTだけ）の提供にしたいと思っています</li></ul></li></ol><h2 id="HTTP-SEARCH-メソッドの提案がある"><a href="#HTTP-SEARCH-メソッドの提案がある" class="headerlink" title="HTTP SEARCH メソッドの提案がある"></a>HTTP SEARCH メソッドの提案がある</h2><p>2021/05/01時点ではDraftフェーズですが、何度かHTTP SEARCH メソッドの仕様検討があるようです。</p><p>簡単に言うと、GETのように参照（検索）の意味を持つSEARCHメソッドで、条件はPOSTのようにリクエストボディに記載することができます</p><ul><li><a href="https://tools.ietf.org/html/draft-snell-search-method-02">https://tools.ietf.org/html/draft-snell-search-method-02</a><ul><li>Expiresが2021/03/06なので、もう無効になっているので注意です。過去には00, 01版もあり定期的に検討されていそう</li></ul></li><li>あまり詳しくないですが、次はこちらのトラッカーで議論がされていそう<ul><li><a href="https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/?include_text=1">https://datatracker.ietf.org/doc/draft-ietf-httpbis-safe-method-w-body/?include_text=1</a></li></ul></li></ul><p>SEARCH自体はWebDAV（サーバー上のファイルを読み取りや編集をWebブラウザ上で行えるようにする仕組み）の<a href="https://tools.ietf.org/html/rfc5323">RFC5323</a> で存在するので、互換性について検討中とのこと。SEARCHじゃなくてQUERYやFETCHなどにする話もあるらしいです。</p><ul><li><a href="https://httptoolkit.tech/blog/http-search-method/">https://httptoolkit.tech/blog/http-search-method/</a></li></ul><p>もし、本当にSEARCHが実現したとすると、この記事であるような議論が出ることもなくなると思いますので期待です。</p><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><ul><li>ネストを含む構造化した検索条件の指定は、POSTメソッドで設計しておくのが無難</li><li>Webのセマンティクス的にはGETかもしれないが、エコシステム側が対応していないケースがあり、変なハマりを生む可能性があるので業務では避けたほうが無難<ul><li>GETのフォールバック先でPOSTを用意する、ElasticSearchのようなパターンもありかもしれないが、特にSSKDsなWebAPIの場合はPOSTのみ準備することが良さそう<ul><li>保守対象のエンドポイントを少しでも減らすのと、下手にGETを用意してツールでハマる利用者もいるかもしれないので</li></ul></li></ul></li><li>HTTP SEARCHメソッドの標準化に期待</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/978061/http-get-with-request-body">https://stackoverflow.com/questions/978061/http-get-with-request-body</a></li><li><a href="https://dev.classmethod.jp/articles/cloudfront-return-403-for-get-method-with-message-body/">https://dev.classmethod.jp/articles/cloudfront-return-403-for-get-method-with-message-body/</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Group（TIG）は、「最先端、且つ先進的なテクノロジーのプロフェッショナル集団」、「プロジェクト品質と生産性の向上」、「自社サービス事業の立ち上げ」を主なミッションとする、技術部隊です。DXユニットとはデジタルトランスフォーメーションを推進するチームで、IoTやらMaaSなどのテクノロジーカットでビジネス転換を行っています。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;TIG DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Web" scheme="https://future-architect.github.io/tags/Web/"/>
    
    <category term="HTTP" scheme="https://future-architect.github.io/tags/HTTP/"/>
    
    <category term="WebAPI" scheme="https://future-architect.github.io/tags/WebAPI/"/>
    
  </entry>
  
  <entry>
    <title>FlutterでMONETマーケットプレイスAPIを使ってみた</title>
    <link href="https://future-architect.github.io/articles/20210517a/"/>
    <id>https://future-architect.github.io/articles/20210517a/</id>
    <published>2021-05-16T15:00:00.000Z</published>
    <updated>2021-05-21T12:25:50.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの越島と申します。</p><p><a href="/articles/20210510a/">Dart/Flutter連載</a>の6記事目　兼　<a href="/tags/MONET%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%88%E3%83%97%E3%83%AC%E3%82%A4%E3%82%B9/">MONETマーケットプレイスAPIを使ってみた連載</a>の2記事目として、<strong>MONETマーケットプレイスで購入したAPI</strong>と<strong>Flutter</strong>を使って簡単なスマホアプリを作ってみます。</p><p>MONETマーケットプレイスAPIを使ってみた連載の第1弾では<a href="/articles/20210404/">MONETマーケットプレイスAPIを使ってみた#1 ～概要説明と購入編～</a>のとして、プラットフォームの概要やAPIを購入するまでの手順について書かれています。</p><h1 id="MONETマーケットプレイスとは"><a href="#MONETマーケットプレイスとは" class="headerlink" title="MONETマーケットプレイスとは"></a>MONETマーケットプレイスとは</h1><img src="/images/20210517a/top_page_20210316.png" alt="MONETマーケットプレイストップページ" width="1200" height="554" loading="lazy"><p>MONETマーケットプレイスAPIを使ってみた連載の<a href="https://future-architect.github.io/articles/20210404/">第1弾</a>でも触れていますが、ここでもう一度MONETマーケットプレイスのおさらいをします。</p><p><a href="https://developer.monet-technologies.co.jp/">MONETマーケットプレイス</a>は、MaaSビジネスの実現に必要なソリューションをAPIとして提供しているサービスです。オンデマンドバスの配車システムをはじめ、多様な業界・業種の企業から提供されるデータやシステムのAPIを購入して、新たなサービスの開発に活用することができます。</p><h1 id="APIの利用"><a href="#APIの利用" class="headerlink" title="APIの利用"></a>APIの利用</h1><p>MONETマーケットプレイスでは、APIを利用するために、APIキー（<strong>X-MONET-APIKey</strong>）を用いて認証を行う必要があります。MONETマーケットプレイスでは一つのキーを使って、提供されているAPIを横断的に利用できます。この特徴を生かして複数サービスを組み合わせた独自サービスの提供が容易に実現できるようになっています。</p><p><strong>X-MONET-APIKey</strong>を用いたAPIの認証ができていれば、あとは各商品ページのエンドポイントの情報を元にAPIを利用していくだけです。<br>（APIの利用・認証の詳しい手順については、MONETマーケットプレイスの<a href="https://developer.monet-technologies.co.jp/docs?tab=service-2">ディベロッパーガイド</a>を参照ください。）<br><img src="/images/20210517a/api_endpoint.png" alt="API定義画面" width="532" height="552" loading="lazy"></p><h1 id="APIを使ってアプリを作成"><a href="#APIを使ってアプリを作成" class="headerlink" title="APIを使ってアプリを作成"></a>APIを使ってアプリを作成</h1><p>今回はデモアプリとして、現在地周辺の観光地情報を検索して、そこまでのルート表示ができる<strong>観光地図アプリ</strong>を<strong>Flutter</strong>で作成しました。MONETマーケットプレイスで提供されているAPIは「<strong>るるぶDATA 観光API</strong>」と「<strong>いつもNAVI API</strong>」を利用し、地図データは「<strong>OpenStreetMap</strong>」を利用しています。</p><h2 id="アプリデモ"><a href="#アプリデモ" class="headerlink" title="アプリデモ"></a>アプリデモ</h2><img src="/images/20210517a/app_gif.gif" alt="アプリデモ" width="329" height="593" loading="lazy"><h2 id="アプリ詳細"><a href="#アプリ詳細" class="headerlink" title="アプリ詳細"></a>アプリ詳細</h2><img src="/images/20210517a/app_flow.png" alt="アプリ画面遷移図" width="1122" height="490" loading="lazy"><p>今回作成したアプリの利用の流れと、各画面で用いているAPI・サービスは上記のようになっています。<br>APIは以下のように利用しています。</p><ul><li><strong>るるぶDATA 観光API</strong><ul><li>周辺の観光施設情報の取得に利用</li><li>スマホから取得できる緯度/経度に加えて、半径とジャンルを指定して絞り込み検索</li></ul></li><li><strong>いつもNAVI API</strong><ul><li>設定した目的地までのルート情報の取得に利用</li><li>観光施設の緯度経度と現在地の緯度経度をインプットに、徒歩と車でのルートを取得して、地図に描画</li></ul></li></ul><p>APIリクエストは、Flutter公式の<a href="https://flutter.dev/docs/cookbook/networking/fetch-data">Cookbook</a>を参考にして、以下のような形で実装しています。<br>（下記は<strong>るるぶDATA 観光API</strong>の場合の例）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Future loadSights(SearchPageArgument args) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> baseURL = <span class="string">&#x27;https://gw-api.monet-technologies.co.jp/jtbp/appif/sight?responsetype=json&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> query = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (args.latitude != <span class="keyword">null</span>) &#123;</span><br><span class="line">    query = query + <span class="string">&#x27;&amp;latitude=&#x27;</span> + args.latitude;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (args.longitude != <span class="keyword">null</span>) &#123;</span><br><span class="line">    query += <span class="string">&#x27;&amp;longitude=&#x27;</span> + args.longitude;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (args.radius != <span class="keyword">null</span>) &#123;</span><br><span class="line">    query += <span class="string">&#x27;&amp;radius=&#x27;</span> + args.radius;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (args.lgenre != <span class="keyword">null</span>) &#123;</span><br><span class="line">    query += <span class="string">&#x27;&amp;lgenre=&#x27;</span> + args.lgenre;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> response = <span class="keyword">await</span> http.<span class="keyword">get</span>(</span><br><span class="line">      baseURL + query,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;X-MONET-APIKey&quot;</span>: <span class="string">&quot;XXXXXXXXXXXXXXX&quot;</span>, <span class="comment">//APIキーが入る</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">final</span> jsonResponse = json.decode(response.body);</span><br><span class="line">    <span class="keyword">return</span> jsonResponse;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> Exception(<span class="string">&#x27;Failed to load sights&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="まとめと感想"><a href="#まとめと感想" class="headerlink" title="まとめと感想"></a>まとめと感想</h1><p><a href="/articles/20210510a/">Dart/Flutter連載</a>の6記事目　兼　<a href="/tags/MONET%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%88%E3%83%97%E3%83%AC%E3%82%A4%E3%82%B9/">MONETマーケットプレイスAPIを使ってみた連載</a>の2記事目として、<br>MONETマーケットプレイスで購入したAPIを使って簡単なスマホアプリを作ってみました。</p><p>MONETマーケットプレイスのAPIを利用してみた感想としては、適切にAPIを組み合わせることができれば、比較的スピード感を持ってそれなりのユースケースに対応したアプリを作ることができそうだなという実感です。また、複数のAPIの契約・認証が統一できるので、複数のAPIを組み合わせたアプリ開発のハードルが管理的な面でも、心理的な面でも下がるのがメリットかなと思いました。</p><p>Flutterを触ってみた感想としては、Flutterは<strong>何も無い状態からプロトタイプを作るまでのモチベーションが保ちやすいフレームワーク</strong>だと感じました。このモチベーションの保ちやすさは、①マテリアルデザインとの親和性の高さと、②Hot Reload/Restartの速さ、が大きな要因なんじゃないかと思っています。Flutterではマテリアルデザインの原則に沿ったWidgetが多く用意されていて、マテリアルデザインベースでアプリを組むと効率良く、「ちゃんとスマホアプリっぽい」画面が作れます。個人的には、アプリの見た目が早い段階で整うと、その後のモチベーションが保ちやすいです。それに加えて、再ビルドをせずにソースコードへの変更を反映できるHot Reload機能が備わっているので、実装と確認のサイクルを速く回せます。ビルドを待っている間にスマホを触り始めて集中力が切れちゃうことが少ないので、結果的にモチベーションが保てた気がします。</p><p>明日は村田さんの<a href="/articles/20210519a/">Flutter ウィジェットテスト入門</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの越島と申します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/20210510a/&quot;&gt;Dart/</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="モバイルアプリ" scheme="https://future-architect.github.io/tags/%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA/"/>
    
    <category term="MaaS" scheme="https://future-architect.github.io/tags/MaaS/"/>
    
    <category term="MONETマーケットプレイス" scheme="https://future-architect.github.io/tags/MONET%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%88%E3%83%97%E3%83%AC%E3%82%A4%E3%82%B9/"/>
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="Flutter連載" scheme="https://future-architect.github.io/tags/Flutter%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Flutterで技術ブログRSSリーダー</title>
    <link href="https://future-architect.github.io/articles/20210514a/"/>
    <id>https://future-architect.github.io/articles/20210514a/</id>
    <published>2021-05-13T15:00:01.000Z</published>
    <updated>2021-05-21T12:25:48.744Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>真野です。</p><p><a href="/articles/20210510a/">Dart/Flutter連載</a>の5日目です。昨日は鶴巻さんの<a href="/articles/20210513b/">Flutterレイアウト入門</a>でした。</p><p>この記事ではFlutterでRSSを用いてフューチャー技術ブログリーダーを作ろうと思います。</p><h2 id="RSSとは"><a href="#RSSとは" class="headerlink" title="RSSとは"></a>RSSとは</h2><blockquote><p>RSS（RDF Site Summary/Rich Site Summary）はXMLを応用したデータ形式の一種で、Webサイト内の新着ページや更新ページのタイトルやURL、更新日時、要約などを一覧形式で記述することができる。</p><ul><li><a href="https://e-words.jp/w/RSS%E3%83%95%E3%82%A3%E3%83%BC%E3%83%89.html">IT用語辞典</a></li></ul></blockquote><p>新着記事などの把握のためにサイトが配信しているXMLファイルのことですね。フューチャー技術ブログでは<a href="https://future-architect.github.io/atom.xml">atom.xml</a>を配信しています。</p><p>さきほどのatom.xmlのリンクを開いた人はほとんどいないと思いますが、<code>Atom 1.0</code> という一般的な形式で、記事数は <code>20件</code> を上限にして生成しています。本ブログは静的サイトジェネレータに<a href="https://hexo.io/">Hexo</a>を使っていて、atom.xmlの生成にはメジャーそうだった<a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a>のデフォルトで出力しています。今の所この設定に運営の意思は働いていないので、要望/アドバイスがあればTwitterでコメント下さい。今回開発するリーダーではこれを入力に利用します。</p><h2 id="インプットを怠けてしまう"><a href="#インプットを怠けてしまう" class="headerlink" title="インプットを怠けてしまう"></a>インプットを怠けてしまう</h2><p>話は変わりますが、ITエンジニアにとってインプットを行わないと、<code>今までの知識や経験のみで判断することになり、新たな技術でより効率的なやり方を発想できなくなる</code> そうです。<a href="https://qiita.com/kotakanbe@github/items/32cf4eb3de1741af26fb">究極のIT系最新技術情報収集用Slackチーム公開</a>の記事に書いてありました。インプット大事ですよね。</p><p>モヒカンSlackチームは良いものですが、ワークスペース設定の宿命でデータが消えてしまい悲しいです。そこで自分のペースで自由自在にインプトットできるツールを欲する人は意外と多いのではないでしょうか。</p><p>そのため個人的な様々な要求に耐えられるRSSリーダーを作ろうと思いました。今回は左右のスワイプでスキップ・既読の操作を行えると気持ちが良いと思ったので記事の表示＋スワイプ操作ができることまでを題材とします。</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p><a href="https://flutter.dev/docs/get-started/install">get-started/install</a> に従い構築します。</p><p>自分の環境では以下です。</p><figure class="highlight bash"><figcaption><span>環境情報</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;flutter doctor</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[√] Flutter (Channel stable, 2.0.6, on Microsoft Windows [Version 10.0.19043.964], locale ja-JP)</span><br><span class="line">[√] Android toolchain - develop <span class="keyword">for</span> Android devices (Android SDK version 30.0.3)</span><br><span class="line">[√] Chrome - develop <span class="keyword">for</span> the web</span><br><span class="line">[√] Android Studio</span><br><span class="line">[√] IntelliJ IDEA Community Edition (version 2020.2)</span><br><span class="line">[√] VS Code (version 1.56.0)</span><br><span class="line">[√] Connected device (2 available)</span><br></pre></td></tr></table></figure><p>わたしの開発はIntelliJで行っていますが、VSCodeでも十分開発できるそうです。</p><h2 id="Widget開発"><a href="#Widget開発" class="headerlink" title="Widget開発"></a>Widget開発</h2><p>StatelessWidgetで作っていきます</p><p><code>lib/main.dart</code> に実装します。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() =&gt; runApp(App());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">        title: <span class="string">&#x27;Future Tech Blog Reader&#x27;</span>,</span><br><span class="line">        theme: ThemeData(</span><br><span class="line">          primaryColor: Colors.white,</span><br><span class="line">        ),</span><br><span class="line">        home: TechBlog());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TechBlog</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _TechBlogState createState() =&gt; _TechBlogState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TechBlogState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">TechBlog</span>&gt; </span>&#123;</span><br><span class="line">  <span class="comment">// 次から実装していきます。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次章から <code>_TechBlogState</code> にメインのロジックを詰めていきます。</p><h2 id="RSSフィードの取得"><a href="#RSSフィードの取得" class="headerlink" title="RSSフィードの取得"></a>RSSフィードの取得</h2><p>まずはatom.xmlを取得しないと始まらないので、ファイルをダウンロードします。</p><p><a href="https://pub.dev/packages/http">http</a>パッケージを利用します。<code>pubspec.yaml</code>に以下を追記します。</p><figure class="highlight yml"><figcaption><span>pubspec.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">http:</span> <span class="string">^0.13.3</span></span><br></pre></td></tr></table></figure><p>Dartのコードでは以下のようにアクセスします。<code>response.body</code>で直接String型が取得できますが、利用している文字コードが不正なのか文字化けするので、<code>dart:convert</code> パッケージを用いて自前でUTF-8でデコードします。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;dart:convert&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/http.dart&#x27;</span> <span class="keyword">as</span> http;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_TechBlogState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">TechBlog</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    fetchFeed();</span><br><span class="line">    setState(() &#123;&#125;);</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> fetchFeed() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> response = <span class="keyword">await</span> http</span><br><span class="line">        .<span class="keyword">get</span>(<span class="built_in">Uri</span>.parse(<span class="string">&#x27;https://future-architect.github.io/atom.xml&#x27;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (response.statusCode != <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> Exception(<span class="string">&#x27;Failed to fetch atom.xml&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    debugPrint(utf8.decode(response.bodyBytes))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここでXMLが問題なく表示できていれば、フィードの解析に進みます。</p><h2 id="RSSフィード解析"><a href="#RSSフィード解析" class="headerlink" title="RSSフィード解析"></a>RSSフィード解析</h2><p>atom.xml パース用の<a href="https://pub.dev/packages/webfeed">webfeed</a>と呼ばれるパッケージを利用します。 <code>_articles</code>のリストに結果を追加します。</p><figure class="highlight yml"><figcaption><span>pubspec.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">http:</span> <span class="string">^0.13.3</span></span><br><span class="line">  <span class="attr">webfeed:</span> <span class="string">^0.7.0</span></span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> _articles = &lt;AtomItem&gt;[];</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> fetchFeed() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="comment">// 中略</span></span><br><span class="line">  <span class="keyword">final</span> atomFeed = AtomFeed.parse(utf8.decode(response.bodyBytes));</span><br><span class="line">  atomFeed.items!.forEach((item) =&gt; &#123;_articles.add(item)&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AtomFeed.parseで解析結果はドキュメントに書いてあるとおり、一通り必要な要素が入っています。必ずしも要素が入っているか保証されていないので、<code>String?</code> 型でした。</p><figure class="highlight dart"><figcaption><span>atom_item.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AtomItem</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String?</span> id;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String?</span> title;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">DateTime?</span> updated;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;AtomPerson&gt;? authors;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;AtomLink&gt;? links;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;AtomCategory&gt;? categories;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;AtomPerson&gt;? contributors;</span><br><span class="line">  <span class="keyword">final</span> AtomSource? source;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String?</span> published;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String?</span> content;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String?</span> summary;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String?</span> rights;</span><br><span class="line">  <span class="keyword">final</span> Media? media;</span><br><span class="line">  <span class="comment">// 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここの<code>id</code>が記事のURLになります。他には<code>title</code>、<code>published</code>のフィールドを利用します。</p><h2 id="リストの作成"><a href="#リストの作成" class="headerlink" title="リストの作成"></a>リストの作成</h2><p>先程取得した、_articleのリストをListViewに変換します。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Scaffold(</span><br><span class="line">    appBar: AppBar(</span><br><span class="line">      title: Text(<span class="string">&#x27;Future Tech Blog Reader&#x27;</span>),</span><br><span class="line">    ),</span><br><span class="line">    body: ListView.builder(</span><br><span class="line">      itemCount: _articles.length,</span><br><span class="line">      itemBuilder: (context, index) &#123;</span><br><span class="line">          <span class="keyword">return</span> ListTile(</span><br><span class="line">            leading: Text(_articles[index].published.toString()),</span><br><span class="line">            title: Text(_articles[index].title.toString()),</span><br><span class="line">            onTap: () =&gt; &#123;_launchURL(_articles[index].id.toString())&#125;,</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>URLを開くためには、<code>package:url_launcher/url_launcher.dart</code> パッケージを利用したヘルパー関数を用意すると良さそうです。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> _launchURL(<span class="built_in">String</span> _url) <span class="keyword">async</span> =&gt; <span class="keyword">await</span> canLaunch(_url)</span><br><span class="line">    ? <span class="keyword">await</span> launch(_url)</span><br><span class="line">    : <span class="keyword">throw</span> <span class="string">&#x27;Could not launch <span class="subst">$_url</span>&#x27;</span>;</span><br></pre></td></tr></table></figure><p>これでスワイプなしで、技術ブログの記事をひらけるようになりました。</p><p>Androidの場合はブラウザの起動に権限設定が必要です。</p><figure class="highlight xml"><figcaption><span>AndroidManifest.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.QUERY_ALL_PACKAGES&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>エミュレータで動かしてみるとこんな感じです。</p><img src="/images/20210514a/Animation.gif" alt="モバイルアプリで実行例" wight="469" height="842" loading="lazy"><h2 id="スワイプでリストを閉じる"><a href="#スワイプでリストを閉じる" class="headerlink" title="スワイプでリストを閉じる"></a>スワイプでリストを閉じる</h2><p>次はスワイプで既読を管理する機能です。</p><p>需要が多いのか公式ドキュメントのCookbookに<a href="https://flutter.dev/docs/cookbook/gestures/dismissible">実装例</a>が照会されています。</p><p>さきほどのitemBuilderを<code>Dismissible</code>ウィジェットで拡張します。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">itemBuilder: (context, index) &#123;</span><br><span class="line">  <span class="keyword">final</span> item = _articles[index];</span><br><span class="line">  <span class="keyword">return</span> Dismissible(</span><br><span class="line">    key: Key(item.title.toString()),</span><br><span class="line">    onDismissed: (direction) &#123;</span><br><span class="line">      setState(() &#123;</span><br><span class="line">        _articles.removeAt(index);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    background: Container(color: Colors.red),</span><br><span class="line">    secondaryBackground: Container(color: Colors.blue),</span><br><span class="line">    child: ListTile(</span><br><span class="line">      leading: Text(item.published.toString()),</span><br><span class="line">      title: Text(item.title.toString()),</span><br><span class="line">      onTap: () =&gt; &#123;_launchURL(item.id.toString())&#125;,</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>background</code> が右スワイプ時の色、<code>secondaryBackground</code>が左スワイプ時の色です。</p><p><code>onDismissed</code> でスワイプ時のアクションを決められます。今回はスワイプされたらリストから除外するシンプルな実装をあげます。</p><p>動かしてみると以下のような使い勝手です。</p><img src="/images/20210514a/スワイプ.gif" alt="スワイプ動作イメージ" wight="469" height="842" loading="lazy"><p>気持ち良いですね…！！</p><p>デモ上はタイトルだけで判断して捨てていますが、本来はクリックして記事を一読してからスワイプするイメージです。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>RSSを読み込んでスワイプで記事を管理できるシンプルなリーダーを作りました。</p><p>今回はフューチャー技術ブログのみを対象としましたが、他のお気に入りのサイトを追加したり、左右のスワイプごとに別の機能を付けたり（後で読むとか）、新着を通知させたり色々アイデアを実装させてお楽しみいただけると幸いです。</p><p>初めてのFlutterでしたが、大きなハマりもなくレイアウトをXMLではなく、コードで記載することは新鮮でした。</p><p><a href="/articles/20210510a/">Dart/Flutter連載</a>の5日目でした。次は越島さんの <a href="/articles/20210517a/">FlutterでMONETマーケットプレイスAPIを使ってみた</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Group（TIG）は、「最先端、且つ先進的なテクノロジーのプロフェッショナル集団」、「プロジェクト品質と生産性の向上」、「自社サービス事業の立ち上げ」を主なミッションとする、技術部隊です。DXユニットとはデジタルトランスフォーメーションを推進するチームで、IoTやらMaaSなどのテクノロジーカットでビジネス転換を行っています。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="Flutter連載" scheme="https://future-architect.github.io/tags/Flutter%E9%80%A3%E8%BC%89/"/>
    
    <category term="RSS" scheme="https://future-architect.github.io/tags/RSS/"/>
    
  </entry>
  
  <entry>
    <title>Flutterレイアウト入門</title>
    <link href="https://future-architect.github.io/articles/20210513b/"/>
    <id>https://future-architect.github.io/articles/20210513b/</id>
    <published>2021-05-12T15:00:01.000Z</published>
    <updated>2021-05-21T12:25:47.376Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20210510a/">Dart/Flutter連載</a>の4記事目は、Flutterでの画面レイアウトの入門です。</p><p>Flutterを触ったことがない方にも「こんな感じで画面が作れるんだな」というイメージがつくようお伝えできればと思います。また、私がつまずいたWidgetのサイズ調整についても記載します。</p><h2 id="Scaffold-Widgetでベースとなるレイアウト構造を作成"><a href="#Scaffold-Widgetでベースとなるレイアウト構造を作成" class="headerlink" title="Scaffold Widgetでベースとなるレイアウト構造を作成"></a>Scaffold Widgetでベースとなるレイアウト構造を作成</h2><p>FlutterのUIは、Widgetと呼ばれる部品を組み合わせて構築します。</p><p>画面のベースとなるレイアウト構造は、Scaffold Widgetで定義します。Scaffold Widgetには、appBar, body, botomNavigationBar等のプロパティが用意されており、それぞれに各Widgetを配置することでページ上部のAppBarや下部のナビゲーションバー等を簡単に配置できます。ページのメインコンテンツはbodyに定義します。</p><p>FAB(フローティングアクションボタン)と呼ばれる、スマホアプリのUIでよく見かける画面上の浮いているようなボタンについても、Scaffoldプロパティに用意されており、配置位置も簡単に定義できます。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Scaffold(</span><br><span class="line">  <span class="comment">//　AppBarの表示</span></span><br><span class="line">  appBar: AppBar(</span><br><span class="line">    title: Text(<span class="string">&#x27;Flutter Demo&#x27;</span>),</span><br><span class="line">  ),</span><br><span class="line">  <span class="comment">// ページのメインコンテンツ</span></span><br><span class="line">  body: ...,</span><br><span class="line">  <span class="comment">// フッターのナビゲーション</span></span><br><span class="line">  bottomNavigationBar: ...,</span><br><span class="line">  <span class="comment">// FAB(フローティングアクションボタン)</span></span><br><span class="line">  floatingActionButton: ...,</span><br><span class="line">  <span class="comment">// FABの位置</span></span><br><span class="line">  floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><img src="/images/20210513b/c319f243-8175-36f6-f541-de4ec59fb7d9.png" alt="フローティングアクションボタン" class="img-small-size" width="428" height="704"><h2 id="Widgetの配置に必須のColumn-Row-Widget"><a href="#Widgetの配置に必須のColumn-Row-Widget" class="headerlink" title="Widgetの配置に必須のColumn, Row Widget"></a>Widgetの配置に必須のColumn, Row Widget</h2><p>Widgetを垂直に並べたいときは、Column Widget, 水平に並べたいときはRow Widgetを用いて配置します。メイン軸方向にどのように配置するかを<code>mainAxisAlignment</code>プロパティで定義することができ、Column Widgetの場合は垂直方向、Row Widgetの場合は水平方向を指します。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">body: Column(</span><br><span class="line">  mainAxisAlignment: MainAxisAlignment.start, <span class="comment">// ここで配置の仕方を定義</span></span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Card(color: Colors.yellow, child: Text(<span class="string">&#x27;text01&#x27;</span>, style: TextStyle(fontSize: <span class="number">40</span>))),</span><br><span class="line">    Card(color: Colors.teal, child: Text(<span class="string">&#x27;text01&#x27;</span>, style: TextStyle(fontSize: <span class="number">40</span>))),</span><br><span class="line">    Card(color: Colors.blueAccent, child: Text(<span class="string">&#x27;text01&#x27;</span>, style: TextStyle(fontSize: <span class="number">40</span>))),</span><br><span class="line">  ],</span><br><span class="line">),</span><br></pre></td></tr></table></figure><img src="/images/20210513b/b1e35360-8fa9-84dc-8b0f-9df591516120.png" alt="mainAxisAlignmentのstart,center,spaceEvenly設定の表示位置" width="949" height="546" loading="lazy"><h2 id="意外と難しいWidgetのサイズ調整"><a href="#意外と難しいWidgetのサイズ調整" class="headerlink" title="意外と難しいWidgetのサイズ調整"></a>意外と難しいWidgetのサイズ調整</h2><p>Widgetのサイズは、直接的には指定せずにFlutterの自動調整に任せる場合も多く、異なる画面サイズにも柔軟に対応できて便利です。ただし明示的に指定していないため、意図しないサイズになってしまい戸惑うことがよくありました。</p><p>Widgetは、親Widgetから与えられた幅・高さの最大値と最小値をもとに、自身のサイズを決定します。<br><a href="https://flutter.dev/docs/development/ui/layout/constraints">https://flutter.dev/docs/development/ui/layout/constraints</a></p><p>ただし、与えられた最大値・最小値からどのようにサイズを決定するかは、Widgetによって異なり、またWidgetの親子関係によっても変わってきます。各Widgetのサイズ決定については私自身まだ理解できていない部分が多くありますが、一例としてContainer Widgetのサイズの挙動について紹介します。Container Widgetは明示的にサイズを指定することも可能ですが、今回は直接的な指定は行わない場合のサイズの挙動・調整について記載します。</p><h3 id="Container-Widgetのサイズ"><a href="#Container-Widgetのサイズ" class="headerlink" title="Container Widgetのサイズ"></a>Container Widgetのサイズ</h3><p>Container Widgetのサイズは、子要素の有無で違ってきます。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子要素がない場合は可能な限り最大サイズになる</span></span><br><span class="line">body: Container(color: Colors.yellow),</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子要素がある場合は子要素に応じた最小限のサイズになる</span></span><br><span class="line">body: Container(color: Colors.yellow, child: Text(<span class="string">&#x27;text&#x27;</span>)),</span><br></pre></td></tr></table></figure><img src="/images/20210513b/914c4dba-d8c4-700c-1aa0-35231a59c4b2.png" alt="mainAxisAlignmentのstart,center,spaceEvenly設定の表示位置" class="img-middle-size" width="1098" height="964" loading="lazy"><h3 id="Column-Widgetでラップした際のContainer-Widgetのサイズ"><a href="#Column-Widgetでラップした際のContainer-Widgetのサイズ" class="headerlink" title="Column Widgetでラップした際のContainer Widgetのサイズ"></a>Column Widgetでラップした際のContainer Widgetのサイズ</h3><p>単純にColumn Widgetでラップした場合は、最小限のサイズになります。</p><p>さらにContainer WidgetをExpanded Widgetでラップすると、メイン軸方向(Columnの場合は垂直方向）にサイズを拡張してくれます。また、Expanded Widgetの<code>Flex</code>プロパティで、各Widgetを均等な大きさにしたり大きさの割合を指定できます。</p><p>垂直方向へのサイズの拡張は、Column Widgetの<code>CrossAxisAlignment</code>プロパティにCrossAxisAlignment.stretchを指定することで可能になります。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Column Widgetのみ</span></span><br><span class="line">body: Column(</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Container(color: Colors.yellow, child: Text(<span class="string">&#x27;text&#x27;</span>, style: TextStyle(fontSize: <span class="number">40</span>))),</span><br><span class="line">    Container(color: Colors.teal, child: Text(<span class="string">&#x27;text&#x27;</span>, style: TextStyle(fontSize: <span class="number">40</span>))),</span><br><span class="line">  ],</span><br><span class="line">),</span><br><span class="line"></span><br><span class="line"><span class="comment">// Column Widget + Expanded Widget</span></span><br><span class="line">body: Column(</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Expanded(flex: <span class="number">1</span>, child: Container(color: Colors.yellow, child: Text(<span class="string">&#x27;text&#x27;</span>, style: TextStyle(fontSize: <span class="number">40</span>)))),</span><br><span class="line">    Expanded(flex: <span class="number">1</span>, child: Container(color: Colors.teal, child: Text(<span class="string">&#x27;text&#x27;</span>, style: TextStyle(fontSize: <span class="number">40</span>)))),</span><br><span class="line">  ],</span><br><span class="line">),</span><br><span class="line"></span><br><span class="line"><span class="comment">// Column Widget + Expanded Widget + CrossAxisAlignment.stretch</span></span><br><span class="line">body: Column(</span><br><span class="line">  crossAxisAlignment: CrossAxisAlignment.stretch,</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    Expanded(flex: <span class="number">1</span>, child: Container(color: Colors.yellow, child: Text(<span class="string">&#x27;text&#x27;</span>, style: TextStyle(fontSize: <span class="number">40</span>)))),</span><br><span class="line">    Expanded(flex: <span class="number">1</span>, child: Container(color: Colors.teal, child: Text(<span class="string">&#x27;text&#x27;</span>, style: TextStyle(fontSize: <span class="number">40</span>)))),</span><br><span class="line">  ],</span><br><span class="line">),</span><br></pre></td></tr></table></figure><img src="/images/20210513b/524888ee-5362-c8d3-5260-e01df14a038c.png" alt="mainAxisAlignmentのstart,center,spaceEvenly設定の表示位置" width="1200" height="727" loading="lazy"><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>Flutterの画面構築は細かく位置やサイズを指定しなくても、それらしいUIが作れるため、かなりスピーディーに開発ができる印象です。その反面、Widgetのサイズ決定の理解に難しさも感じています。</p><p>今回はレイアウト作成の導入的な記事となりましたが、より理解が進んだ後にWidgetのサイズ決定についても記事化できればと思います。</p><p><a href="/articles/20210510a/">Dart/Flutter連載</a>の4記事目でした。明日は真野さんの<a href="/articles/20210514a/">Flutterで技術ブログRSSリーダー</a>の記事です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20210510a/&quot;&gt;Dart/Flutter連載&lt;/a&gt;の4記事目は、Flutterでの画面レイアウトの入門です。&lt;/p&gt;
&lt;p&gt;Flutterを触ったことがない方にも「こんな感じで画面が作れるんだな」というイメージがつくようお伝え</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="Flutter連載" scheme="https://future-architect.github.io/tags/Flutter%E9%80%A3%E8%BC%89/"/>
    
    <category term="モバイル" scheme="https://future-architect.github.io/tags/%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB/"/>
    
  </entry>
  
  <entry>
    <title>背が高いエンジニアが考えるリモートワーク環境</title>
    <link href="https://future-architect.github.io/articles/20210513a/"/>
    <id>https://future-architect.github.io/articles/20210513a/</id>
    <published>2021-05-12T15:00:00.000Z</published>
    <updated>2021-05-21T12:25:44.874Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210513a/IMG_0030.jpg" alt="おしゃれな自宅デスク画像" width="1200" height="800">※写真は実際の私のデスク環境です<p>こんにちは。TIGの<a href="https://twitter.com/kaedemalu">伊藤太斉</a>です。<a href="/articles/20210118/">リモートワーク連載</a>の6本目です。</p><p>リモートワークになって以来、私も多くの方と同じようにリモートワーク環境を整えてきました。将来の投資と自分に言い聞かせながらかなり投資してしまいましたが、満足した環境ができたのでこの記事で紹介します。</p><p>そんな私のリモートワーク環境ですが、「自分の体格に合わせる」という他の方とちょっと違う観点で環境構築してみたので、体格が平均から大きく離れている方は、ぜひこの記事を参考にしていただければと思います。この記事は購入したものの紹介もしますが、デスク設計の上で「何故そうしたか」も書いていきます。</p><h2 id="私のプロフィール"><a href="#私のプロフィール" class="headerlink" title="私のプロフィール"></a>私のプロフィール</h2><p>はじめに、私の体格やら住んでいる部屋について書いていきます。</p><ul><li>身長188cmの痩せ型</li><li>10畳1Kのマンション（角部屋なので2面採光）</li><li>駅から徒歩15分</li></ul><h2 id="自宅で環境を整備できる良さ"><a href="#自宅で環境を整備できる良さ" class="headerlink" title="自宅で環境を整備できる良さ"></a>自宅で環境を整備できる良さ</h2><p>会社で自分の環境を整えるとなると、</p><ul><li>キーボード</li><li>マウス</li><li>（モニター）</li></ul><p>くらいかなと思いますが、自宅であればそれに加えて、</p><ul><li>デスク</li><li>椅子</li><li>etc…</li></ul><p>と際限なく環境を整えることができます。特に会社だと制約のあるデスクと椅子についてはオフィスでは一般的な体格に合わせて作られているため、人と極端に体格が違うと負荷も大きくなります。体の負荷を軽減するという意味で仕事環境にまつわる全てを好きな物を用意できるというのは自宅ならではだと思います。</p><h2 id="リモートワークになるに当たって買ったもの一覧"><a href="#リモートワークになるに当たって買ったもの一覧" class="headerlink" title="リモートワークになるに当たって買ったもの一覧"></a>リモートワークになるに当たって買ったもの一覧</h2><p>ここから実際にリモートワークを始めて買ったものを紹介します。まずはじめに一覧です。</p><ul><li>27インチ4Kモニター</li><li>コンデンサーマイク</li><li>Webカメラ</li><li>キーボード2種類</li><li>スタンディングデスク</li><li>オフィスチェア</li><li>PCスタンド</li><li>モニターアーム</li></ul><p>書き上げてみたらほぼフルセット買っていたことに気がついてしまいました笑。</p><h3 id="モニタ"><a href="#モニタ" class="headerlink" title="モニタ"></a>モニタ</h3><p>モニタは27インチの4Kモニターを買いました。会社で4Kモニターを使って以来フルHDに戻れなくなってしまったこと、PCとの接続はThunderbolt1つで、モニターをハブとして使えることから<a href="https://www.amazon.co.jp/gp/product/B085TWLMF9">DELLのモニター</a>を買いました。接続するものが多い方にはハブ、もしくはハブ機能を有するモニターをお勧めします。一度に表示できるコードが多い方が効率面から考えても良いです。<br>お気に入りポイントはケーブル１本でPCとの接続を管理できるところです。プライベート環境もiMacからMacBookに変えてデスク環境を組み直したので、プライベートと仕事をケーブル一つで切り替えできるのはやはり楽です。</p><h3 id="コンデンサーマイク"><a href="#コンデンサーマイク" class="headerlink" title="コンデンサーマイク"></a>コンデンサーマイク</h3><p>カンファレンス運営で声の出演をすることもあり、その時にマイクを買いました。リモートだとカメラの画質よりも声で印象が決まりやすい（と思う）ので、買っておいて良かったと思っています。近頃はもう少し良いマイクに変えても良い気もしてきました。沼ですね。<br>現状使っているマイクは品薄な時に買った7000円くらいのUSBタイプのマイクです。</p><h3 id="Webカメラ"><a href="#Webカメラ" class="headerlink" title="Webカメラ"></a>Webカメラ</h3><p>本来はノートPCのカメラで事足りるので割と悩んだものではありますが、モニターは外部モニター1枚あれば十分なので、PCを閉じて使うために買いました。購入したのは<a href="https://www.amazon.co.jp/gp/product/B07QQR6G5N">Logicoolのカメラ</a>です。<br>Webカメラを導入したことにもいくつか意図はあり、目線の高さにカメラがあることで、</p><ul><li>顔が暗くなりにくい</li><li>カメラを見て話せる（目を見て話す状態に近づけられる）</li></ul><p>といった印象に関わる部分もよりよくすることができます。<br>また、登壇などよりきれいに写したい場合には、Canonの一眼レフを接続して利用いています。</p><h3 id="キーボード2種類"><a href="#キーボード2種類" class="headerlink" title="キーボード2種類"></a>キーボード2種類</h3><p>キーボードは気分転換も込めて2種類を行き来して使っています。使っているのは</p><ul><li>Corne Cherry</li><li>Realforce for Mac</li></ul><p>です。<br>Realforce（アイキャッチ画像参照）は全然買うつもりがなかったのですが、後述するCorne Cherryで失ったファンクションキーなど、本来キーボードが有しているであろうキーが必要な時もあることに気がついたので買いました。使い心地は言うまでもなく最高です。今では、時々入れ替えながら使ってリフレッシュしています。<br><del>最近、比較的キーが揃った分割を買えばいいのではということに気がつきました。</del><br>Corne Cherryを買う（作る）経緯については、昔話があります。</p><p>前職から<a href="https://ergodox-ez.com/">Ergodox</a>という分割キーボードを使っていたので、リモートワークになって以来、家でも継続して使っていました。しかし、会社が自由出社になり、これを持ち運ぶとしても身体への負担が大きいことを感じました（あとキースイッチの音が少々うるさい）。そこで小さい分割キーボードが欲しくなったのですが、既製品では希望に沿うものがなかったのでCorne Cherryを作ることにしました。作った時のことは<a href="https://kaedem-dev.hatenablog.com/entry/2020/11/23/155602">個人ブログ</a>に書いてあるのでぜひ読んでみてください。買ったところはみなさん大好きな<a href="https://yushakobo.jp/">遊舎工房</a>さんです。ちなみに、大きさ比較をしましたが、差は歴然でした。</p><img src="/images/20210513a/IMG_7341.jpg" alt="分割キーボード" width="1200" height="800" loading="lazy"><p>ここで、分割キーボードを使うことと、極端にキーが少ないことについて疑問を感じる方もいると思いますのでそこについての考えを書きます。</p><h4 id="分割キーボードを使うこと"><a href="#分割キーボードを使うこと" class="headerlink" title="分割キーボードを使うこと"></a>分割キーボードを使うこと</h4><p>分割キーボードを使うことは単に「身体のため」と思って使っています。通常のキーボードだと胸が塞がる姿勢になり、猫背になりやすくなります。結果、肩こりなど不調をきたすことにつながります。特に肩幅も少しあったり、体格が大きい方はこの塞ぎ込みがよりキツくなることもあり、私は早々に分割キーボードに手を出しました。初めは全く慣れなくて作業効率ガタ落ちでしたが、今ではなくてはならない仕事のお供になりました。</p><h4 id="キー数が少ないこと"><a href="#キー数が少ないこと" class="headerlink" title="キー数が少ないこと"></a>キー数が少ないこと</h4><p>Ergodoxを使っていた時に思っていたのが「1日1回も押さないキー」があることでした。利用しないところに場所を取られているのは非常にもったいないことですし、先述した出社も重なり、キー数を削る決断をしました。本来必要なキーすらも削っているのですが、良かったことは指を伸ばし切らなくても全部のキーを触れることです。そのため、指が疲れにくくなった気がします。また、Ergodoxを使っていた時に感じていた不要なキーについても見事にクリアされ、押さないキーはなくなりました。</p><h3 id="スタンディングデスク"><a href="#スタンディングデスク" class="headerlink" title="スタンディングデスク"></a>スタンディングデスク</h3><p>これはあまり買うつもりがなかったのですが、座り続けていることのデメリットも叫ばれる中、身体のためと思って買いました。<br>買ったのはこれも有名なFlexiSpotの<a href="https://flexispot.jp/desk/height-adjustable-desks/e3-set.html">E3</a>を買いました。理由としてはFlexiSpotの中で一番高いところまでデスクを上げられるため選びました。午後の眠い時やリフレッシュしたい時にはとても重宝しています。<br>購入の際に、<a href="https://flexispot.jp/desk/height-adjustable-desks/ej2-set.html">EJ2</a>という少し安めなデスクも候補にあり、相当悩みました。最大の悩みポイントは昇降範囲で、購入したE3の方がより高く設定できます。ただ、私でも上限まで使うことがなかったため、よっぽどのことがない限りEJ2の方が選択肢としては良いかもしれません（何より値段と重量が上がることがネックです。。）。<br>FlexiSpotは天板と脚が別売りなのですが、天板も公式から140x70cmの広めのサイズを購入しました。PCを2つおいても余裕が持てるので結果としては良かったです。そして、部屋の中に占めるデスクの圧迫感も増しました。</p><h3 id="オフィスチェア"><a href="#オフィスチェア" class="headerlink" title="オフィスチェア"></a>オフィスチェア</h3><p>オフィスチェアはずっと憧れていたハーマンミラーの<a href="https://store.hermanmiller.co.jp/c/chairs/office_chairs/AS1YA23/AS1YA23HAN265BBRO829112">セイルチェア</a>を買いました。良かったところは</p><ul><li><strong>オシャレ</strong></li><li>ハーマンミラーの中でも比較的安価</li><li>機能が多すぎない</li></ul><p>です。給付金がセイルチェアになりましたが、スタイリッシュなデスクの一助になっています。ハーマンミラーのオフィスチェアの設計で多く使われている、背もたれを前傾にする機能は集中したい時に役立っています。毎日使うものなのでお気に入りの家具として気分を上げてくれるものになりました。</p><h3 id="モニターアーム"><a href="#モニターアーム" class="headerlink" title="モニターアーム"></a>モニターアーム</h3><p>一番こだわりのないところがモニターアームですが、買ってみて納得する良さもありました。</p><ul><li>付属のスタンドより高く設定できる</li><li>デスクにホコリがたまりにくくなった（掃除がしやすい）</li></ul><p>良さを上げるとするとこれくらいですが、ちゃんと使い込めば、モニターの位置を変えることも簡単だというところも良さですが、ほとんど使わない機能なのであまり恩恵を享受していません。</p><p>モニターの位置をしっかり設定できることは大きなメリットがあると考えています。モニターを覗き込む姿勢は、猫背になったり、ストレートネックの原因になると散々言われていることなので、この辺は元々気をつけいていました。また、効率面を考えても広い画面を使いたいので、モニターは必須です。<br>モニターの高さは一般的には目線がモニターの上辺に来るようにと言うのがよく言われているため、私もその高さで設定しています。</p><h3 id="おまけ：マウス"><a href="#おまけ：マウス" class="headerlink" title="おまけ：マウス"></a>おまけ：マウス</h3><p>エンジニアになって初めて買ったのがLogicoolの<a href="https://www.amazon.co.jp/dp/B074Z71C2M">トラックボールマウス</a>ですが、diagrams.netを使うときや、プライベートで写真を編集する時などの細かい作業にはとても向いていました。<br>加えて、Macの操作をより良くするトラックパッドも入れ替えながら使っています。トラックパッドについては<a href="/articles/20210219/">富山さんの記事</a>でも触れているのでぜひ見てください。</p><h2 id="完成形"><a href="#完成形" class="headerlink" title="完成形"></a>完成形</h2><p>そして、（今のところの）完成形を撮影しました。</p><img src="/images/20210513a/IMG_0854.JPG" alt="おしゃれな自宅デスクの完成形" width="1200" height="800" loading="lazy"><p>どこかのプロデューサーさんみたいなデスクになっていますが、好きなものに囲まれながら作り込んだデスクなので、楽しく仕事できています。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>家で環境を作り込める、ということは、好きなものを取り入れることはもちろんですが、自分の身体に合わせて設計できることだと思っているので、並外れて体格の異なる方はぜひ身体を合わせずに、道具を自身に合わせて健康に働けるようにしましょう！</p><p><a href="/articles/20210118/">リモートワーク連載</a>に他のリモートワーク環境構築例がありますので、探してもらえると嬉しいです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210513a/IMG_0030.jpg&quot; alt=&quot;おしゃれな自宅デスク画像&quot; width=&quot;1200&quot; height=&quot;800&quot;&gt;
※写真は実際の私のデスク環境です

&lt;p&gt;こんにちは。TIGの&lt;a href=&quot;https://twit</summary>
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="リモートワーク" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/"/>
    
  </entry>
  
  <entry>
    <title>Goのサーバーの管理画面をFlutter Webで作ってみるための調査</title>
    <link href="https://future-architect.github.io/articles/20210512a/"/>
    <id>https://future-architect.github.io/articles/20210512a/</id>
    <published>2021-05-11T15:00:00.000Z</published>
    <updated>2021-05-14T05:17:15.427Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20210510a/">Dart/Flutter連載</a>の3本目はFlutter Webを紹介します。</p><p>Flutter 2になって、Web向けに出力する機能もStableになりました。</p><p>Flutter for Webは標準のHTMLにするHTMLレンダラーと、CanvasKitレンダラーと2種類あります。後者はSkiaという2DグラフィックスのライブラリをWebAssembly化したものを使います。Skiaはウェブ向けではないFlutterでも使っているため、モバイルとの互換性の高さが期待されます。</p><p>現状では明示的に指定しなければauto（モバイルはHTMLレンダラー、PCはCanvasKitレンダラー）になりますが、明示的に指定もできます。これらの違いはまた後で触れますが、せっかくウェブが出せるようになったので、ウェブフロントエンドをFlutterで作ってみるための色々調査をしてみました。React/Vue/Angularを一通り業務で使ってみましたし、フロントエンド開発周りもここ5-6年ぐらい、書き方が違うぐらいでやっていることはあんまり変わらなくて個人的に飽きてきたこともあります。</p><h1 id="ウェブアプリといえばRouter"><a href="#ウェブアプリといえばRouter" class="headerlink" title="ウェブアプリといえばRouter"></a>ウェブアプリといえばRouter</h1><p>SPAで管理画面を作っていく上で、最低限必要なことはRouterと呼ばれる機能です。VueやAngularだと標準で用意されています。Reactは標準はないですが、使うときはだいたい何かしら入れるでしょう。</p><p>FlutterはデフォルトでNavigotorというクラスがあります。以下のページがめちゃくちゃまとまっていますので、詳細はこちらをご覧ください。</p><p><a href="https://medium.com/flutter/learning-flutters-new-navigation-and-routing-system-7c9068155ade">https://medium.com/flutter/learning-flutters-new-navigation-and-routing-system-7c9068155ade</a></p><p>ウェブアプリケーションユーザー目線で、いくつか知っておくべきポイントがあります。</p><ul><li>1.0と2.0と大きく2種類に分かれる（ここでは2を扱います）ので、ウェブを検索して出てきた内容を参考にするには利用バージョンと同じかどうか注意が必要</li><li>サンプルの一番シンプルな書き方だと、URLのパスを決めるのではなく、その場でウィジェットを上書きする（pushする）モードで、ウェブのよくある挙動とは違う動きになる</li><li>named navigator routesという、ウェブのRouterに近い、パスのルールとその時の表示するウィジェットのマッピングを定義するモードもある（ネストもできる）</li><li>named navigator routesでデフォルトはハッシュを挟んだパスになる（AngularでいうところのHashLocationStrategy）が、PathLocationStrategyも設定可能</li><li>パスの一部をパラメータとして利用しようとすると面倒</li></ul><p>あとは次のあたりも僕がFlutterを学び始めたときにちょっと悩んだポイントです。</p><ul><li>statefulとstatelessでウィジェットを作り分ける必要がある</li><li>buildメソッドはReactのrender</li><li>builderという言葉はVueのslot的な、特定のライフサイクルで呼ばれてビューの一部を返す何か←某握力王の人に教えてもらいました</li><li>debug(）関数でconsole.logに出力できる</li></ul><h2 id="最小のRouter"><a href="#最小のRouter" class="headerlink" title="最小のRouter"></a>最小のRouter</h2><p>次のコードが↑に書いてあるnamed navigator routesを使った最小のコードです。2つの画面の間の遷移をします。まず、ルートのMaterialAppに、routesの引数でURLとページのマップを定義します。あとは、Navigatorクラスを使って、pushNamed()メソッドや、pop()メソッドを使ってページ遷移ができます。よくあるSPAと変わらないですね。</p><figure class="highlight dart"><figcaption><span>lib/main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  configureApp();</span><br><span class="line">  runApp(MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      routes: &#123;</span><br><span class="line">        <span class="string">&#x27;/&#x27;</span>: (context) =&gt; HomeScreen(),</span><br><span class="line">        <span class="string">&#x27;/details&#x27;</span>: (context) =&gt; DetailScreen(),</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: TextButton(</span><br><span class="line">          child: Text(<span class="string">&#x27;View Details&#x27;</span>),</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            Navigator.pushNamed(context, <span class="string">&#x27;/details&#x27;</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailScreen</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: TextButton(</span><br><span class="line">          child: Text(<span class="string">&#x27;Pop!&#x27;</span>),</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            Navigator.pop(context);</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらができあがりです。Android Studioで作った環境でウェブで表示してみたものになります。</p><img src="/images/20210512a/スクリーンショット_2021-05-11_8.49.21.png" alt="Routerのデモをウェブ表示" width="1200" height="1659"  loading="lazy"><p>なお、URLの一部がエンティティのIDとしてパスパラメータとして使いたい場合は、RouteInformationParserを継承したクラスを作ってアプリに渡す必要があります。上記のmediumのページの中でRouteInformationParserで検索して見てみれば書き方がわかりますが、面倒です。ここはそのうち改善されるのでは、ということを期待しています。</p><h2 id="ハッシュがURLに入ってしまうのをやめる"><a href="#ハッシュがURLに入ってしまうのをやめる" class="headerlink" title="ハッシュがURLに入ってしまうのをやめる"></a>ハッシュがURLに入ってしまうのをやめる</h2><p>PathLocationStrategy相当への切り替え方法については次のページで説明されています。</p><p><a href="https://flutter.dev/docs/development/ui/navigation/url-strategies">https://flutter.dev/docs/development/ui/navigation/url-strategies</a></p><p>まず、依存パッケージにflutter_web_pluginsを追加します。</p><figure class="highlight yaml"><figcaption><span>pubspec.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">flutter_web_plugins:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br></pre></td></tr></table></figure><p>次に、main関数の中で、URLのルールを変更します。↑のページには、Web向けとそれ以外向けでルールを切り替える方法も紹介されていますが、ここではウェブでしか使わない前提でシンプルにmainに書いてしまっています。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_web_plugins/flutter_web_plugins.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    setUrlStrategy(PathUrlStrategy());</span><br><span class="line"></span><br><span class="line">    runApp(MyApp());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これでパスにハッシュが入ることがなくなりました。</p><img src="/images/20210512a/スクリーンショット_2021-05-11_8.56.50.png" alt="URLにハッシュが入っていないデモ画面" width="1006" height="260"  loading="lazy"><h1 id="Goのアプリケーションに組み込む"><a href="#Goのアプリケーションに組み込む" class="headerlink" title="Goのアプリケーションに組み込む"></a>Goのアプリケーションに組み込む</h1><p>Goで作ったサーバーの管理画面をFlutterで作る前提で、go:embedでアプリにバンドルしてみます。以前、本技術ブログでVueで行ったことをFlutterでもやってみます。</p><p><a href="https://future-architect.github.io/articles/20210408/">https://future-architect.github.io/articles/20210408/</a></p><p>まずビルドします。<a href="https://recruit.gmo.jp/engineer/jisedai/blog/flutter2-canvaskit-performance/">CanvasKitのほうが描画性能は高いとのこと</a>ですが、たぶん、レンダラーはHTMLが良いかと思います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ flutter build web --web-renderer=html --source-maps</span><br></pre></td></tr></table></figure><p>ビルドオプションには–releaseをつけることができます。つけるとビルドは遅くなります（M1 MacBook Proで20秒ほど。つけないと0.3秒）。</p><p>ビルド結果は<code>build/web</code>フォルダに出力されます。</p><p>一見、CanvasKitもHTMLもファイルサイズがほとんど変わらない（3.4MBと3.5MB)のですが、CanvasKitでビルドすると、CanvasKitの本体のwasmのビルド済みのファイルをネット越しにダウンロードしているようです。これが2MBぐらいあるみたいですし、もしかしたらプロキシが必要なイントラネットで利用とか考えると、外部依存はないに越したことはありません。</p><figure class="highlight js"><figcaption><span>main.dart.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14151</span>:$<span class="number">2</span>:<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span><span class="string">&quot;https://unpkg.com/canvaskit-wasm@0.25.1/bin/&quot;</span>+a&#125;,</span><br><span class="line"><span class="number">41865</span>:s($,<span class="string">&quot;ae9&quot;</span>,<span class="string">&quot;a2x&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">&quot;https://unpkg.com/canvaskit-wasm@0.25.1/bin/canvaskit.js&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>Goのファイルをいくつか作成します。go:embedが、今いるフォルダよりも子供のフォルダしか読み込めないので、Flutterのルートのフォルダでgo mod init flutter_with_goを叩いて、go.modを作成します。</p><p>ファイルを参照するgo:embedは次のように書きます。</p><figure class="highlight go"><figcaption><span>asest.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> flutter_with_go</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;embed&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed build/web/*</span></span><br><span class="line"><span class="keyword">var</span> assets embed.FS</span><br></pre></td></tr></table></figure><p>NotFoundHandlerハンドラーは<a href="https://future-architect.github.io/articles/20210408/">前回の記事のファイルの配信のハンドラー</a>で紹介したコードとほぼ同じです。ファイルの置き場をプロジェクトルートにしてみたのと、パスがbuild/webになったぐらいです。main関数もほぼ以前と同じです。</p><p>無事、GoでもFlutter Webのビルド結果をホストできました。</p><img src="/images/20210512a/スクリーンショット_2021-05-11_18.15.39.png" alt="GoでもFlutter Webのビルド結果をホストしたデモ表示" width="1200" height="1398"  loading="lazy"><p>今回のフォルダ構成は次の通りです。Goのコードはserverみたいなサブパッケージを作って入れてもよかったかも。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">├── README.md</span><br><span class="line">├── android</span><br><span class="line">├── asset.go</span><br><span class="line">├── cmd</span><br><span class="line">│   └── flutter_with_go</span><br><span class="line">│       └── main.go</span><br><span class="line">├── flutter_with_go.iml</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── ios</span><br><span class="line">├── lib</span><br><span class="line">│   └── main.dart</span><br><span class="line">├── notfound.go</span><br><span class="line">├── pubspec.lock</span><br><span class="line">├── pubspec.yaml</span><br><span class="line">└── web</span><br><span class="line">    ├── favicon.png</span><br><span class="line">    ├── icons</span><br><span class="line">    │   ├── Icon-192.png</span><br><span class="line">    │   └── Icon-512.png</span><br><span class="line">    ├── index.html</span><br><span class="line">    └── manifest.json</span><br></pre></td></tr></table></figure><h1 id="サーバーへのHTTPアクセス"><a href="#サーバーへのHTTPアクセス" class="headerlink" title="サーバーへのHTTPアクセス"></a>サーバーへのHTTPアクセス</h1><p>静的HTMLを表示するだけでは管理画面にはなりませんので、HTTPアクセスを行ってみます。より高度なサービスになると、昨日のエントリーの<a href="https://future-architect.github.io/articles/20210511b/">Swaggerを使ったサーバーアクセス</a>や、GraphQLやgRPCを使いたくなるかもしれません。今時なプロトコルはどれでも利用できるのも、Flutterの良いところですが、今回はシンプルなHTTPアクセスをします。</p><p>題材としては今話題沸騰のイケてるWeb APIである<a href="https://kenall.jp/">ケンオール</a>にアクセスしてみます。</p><img src="/images/20210512a/スクリーンショット_2021-05-11_20.34.54.png" alt="ケンオールのサイト画面" width="1200" height="952"  loading="lazy"><p>ケンオールはアカウント登録するとAPIキーが発行され、これを使ってアクセスします。サンプルと言えど、APIキーはフロントエンドに置きたくないので、サーバー側で中継することとします。</p><h2 id="サーバー側の実装"><a href="#サーバー側の実装" class="headerlink" title="サーバー側の実装"></a>サーバー側の実装</h2><p><code>/api/postal/&#123;code&#125;</code>にアクセスしたら、住所情報を返すAPIをGoで実装しました。APIキーは環境変数で渡します。Vue.jsのときのサンプルの差分だけ表示します。</p><figure class="highlight go"><figcaption><span>cmd/flutter_with_go/main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">type</span> Env <span class="keyword">struct</span> &#123;</span><br><span class="line">Port         <span class="keyword">uint16</span> <span class="string">`envconfig:&quot;PORT&quot; default:&quot;8000&quot;`</span></span><br><span class="line">KenAllAPIKey <span class="keyword">string</span> <span class="string">`envconfig:&quot;KENALL_API_KEY&quot; required:&quot;true&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newHandler</span><span class="params">(apiKey <span class="keyword">string</span>)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line">router := chi.NewRouter()</span><br><span class="line"></span><br><span class="line">router.Route(<span class="string">&quot;/api&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(r chi.Router)</span></span> &#123;</span><br><span class="line">r.Get(<span class="string">&quot;/postal/&#123;code&#125;&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">code := chi.URLParam(r, <span class="string">&quot;code&quot;</span>)</span><br><span class="line">req, _ := http.NewRequestWithContext(r.Context(), <span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://api.kenall.jp/v1/postalcode/&quot;</span>+code, <span class="literal">nil</span>)</span><br><span class="line">req.Header.Set(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Token &quot;</span>+apiKey)</span><br><span class="line">res, err := http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> res.Body.Close()</span><br><span class="line">io.Copy(w, res.Body)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.NotFound(flutter_with_go.NotFoundHandler)</span><br><span class="line"><span class="keyword">return</span> router</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// これの前後は同じ</span></span><br><span class="line">server := &amp;http.Server&#123;</span><br><span class="line">Addr:    <span class="string">&quot;:&quot;</span> + strconv.FormatUint(<span class="keyword">uint64</span>(env.Port), <span class="number">10</span>),</span><br><span class="line">Handler: newHandler(env.KenAllAPIKey),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ビルドしたら試しにcurlでこのサーバーAPIを叩いてみます。バッチリですね(長いのでレスポンスは短くしてます)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">% curl http://localhost:8000/api/postal/1410032</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;2021-04-30&quot;</span>,</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;postal_code&quot;</span>: <span class="string">&quot;1410032&quot;</span>,</span><br><span class="line">      <span class="string">&quot;prefecture_kana&quot;</span>: <span class="string">&quot;トウキョウト&quot;</span>,</span><br><span class="line">      <span class="string">&quot;city_kana&quot;</span>: <span class="string">&quot;シナガワク&quot;</span>,</span><br><span class="line">      <span class="string">&quot;town_kana&quot;</span>: <span class="string">&quot;オオサキ&quot;</span>,</span><br><span class="line">      <span class="string">&quot;prefecture&quot;</span>: <span class="string">&quot;東京都&quot;</span>,</span><br><span class="line">      <span class="string">&quot;city&quot;</span>: <span class="string">&quot;品川区&quot;</span>,</span><br><span class="line">      <span class="string">&quot;town&quot;</span>: <span class="string">&quot;大崎&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="フロント側の実装"><a href="#フロント側の実装" class="headerlink" title="フロント側の実装"></a>フロント側の実装</h2><p>フロント側からはサーバーアクセスをさせたいと思います。状態をもつのでstatefulなウィジェットとします。</p><figure class="highlight dart"><figcaption><span>lib/main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">&#x27;KenAll Sample&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">        body: Center(</span><br><span class="line">          child: KenAll(),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KenAll</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _KenAllState createState() =&gt; _KenAllState();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実サーバーアクセスと表示を行う部分はこちらです。フィールドの入力が7文字になったらサーバーアクセスを行い、取得してきた情報をStateに入れています。</p><figure class="highlight dart"><figcaption><span>lib/main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_KenAllState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">KenAll</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _formKey = GlobalKey&lt;FormState&gt;();</span><br><span class="line">  <span class="built_in">String</span> prefecture = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="built_in">String</span> city = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="built_in">String</span> town = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="built_in">String</span> koaza = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="built_in">String</span> kyoto_street = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="built_in">String</span> building = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="built_in">String</span> floor = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Form(</span><br><span class="line">      key: _formKey,</span><br><span class="line">      child: Column(</span><br><span class="line">        children: [</span><br><span class="line">          TextFormField(</span><br><span class="line">            decoration: InputDecoration(</span><br><span class="line">              filled: <span class="keyword">true</span>,</span><br><span class="line">              hintText: <span class="string">&#x27;Enter a postal code...&#x27;</span>,</span><br><span class="line">              labelText: <span class="string">&#x27;Postal Code&#x27;</span>,</span><br><span class="line">            ),</span><br><span class="line">            onChanged: (value) <span class="keyword">async</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (value.length == <span class="number">7</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> response = <span class="keyword">await</span> http.<span class="keyword">get</span>(<span class="built_in">Uri</span>.parse(<span class="string">&#x27;/api/postal/<span class="subst">$&#123;value&#125;</span>&#x27;</span>));</span><br><span class="line">                debugPrint(response.body);</span><br><span class="line">                <span class="keyword">if</span> (response.statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">                  <span class="keyword">final</span> json = jsonDecode(response.body);</span><br><span class="line">                  <span class="keyword">final</span> body = json[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>];</span><br><span class="line">                  <span class="built_in">print</span>(body);</span><br><span class="line">                  setState(() &#123;</span><br><span class="line">                    prefecture = body[<span class="string">&#x27;prefecture&#x27;</span>];</span><br><span class="line">                    city = body[<span class="string">&#x27;city&#x27;</span>];</span><br><span class="line">                    town = body[<span class="string">&#x27;town&#x27;</span>];</span><br><span class="line">                    koaza = body[<span class="string">&#x27;koaza&#x27;</span>];</span><br><span class="line">                    kyoto_street = body[<span class="string">&#x27;kyoto_street&#x27;</span>];</span><br><span class="line">                    building = body[<span class="string">&#x27;building&#x27;</span>];</span><br><span class="line">                    floor = body[<span class="string">&#x27;floor&#x27;</span>];</span><br><span class="line">                  &#125;);</span><br><span class="line">                  <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              setState(() &#123;</span><br><span class="line">                prefecture = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                city = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                town = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                koaza = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                kyoto_street = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                building = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                floor = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">          Expanded(</span><br><span class="line">            child:  ListView(</span><br><span class="line">              children: [</span><br><span class="line">                ListTile(</span><br><span class="line">                  leading: Text(<span class="string">&#x27;Prefecture&#x27;</span>),</span><br><span class="line">                  title: Text(prefecture),</span><br><span class="line">                ),</span><br><span class="line">                ListTile(</span><br><span class="line">                  leading: Text(<span class="string">&#x27;City&#x27;</span>),</span><br><span class="line">                  title: Text(city),</span><br><span class="line">                ),</span><br><span class="line">                ListTile(</span><br><span class="line">                  leading: Text(<span class="string">&#x27;Town&#x27;</span>),</span><br><span class="line">                  title: Text(town),</span><br><span class="line">                ),</span><br><span class="line">                ListTile(</span><br><span class="line">                  leading: Text(<span class="string">&#x27;Koaza&#x27;</span>),</span><br><span class="line">                  title: Text(koaza),</span><br><span class="line">                ),</span><br><span class="line">                ListTile(</span><br><span class="line">                  leading: Text(<span class="string">&#x27;Kyoto Street&#x27;</span>),</span><br><span class="line">                  title: Text(kyoto_street),</span><br><span class="line">                ),</span><br><span class="line">                ListTile(</span><br><span class="line">                  leading: Text(<span class="string">&#x27;Building&#x27;</span>),</span><br><span class="line">                  title: Text(building),</span><br><span class="line">                ),</span><br><span class="line">                ListTile(</span><br><span class="line">                  leading: Text(<span class="string">&#x27;Floor&#x27;</span>),</span><br><span class="line">                  title: Text(floor),</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ]</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このHTTPアクセスには外部パッケージが必要なため、pubspec.yamlとHTTPリクエストを送っているコードへのimportの追加を行いま。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dependencies:</span><br><span class="line"> http: ^0.13.3</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#39;package:http&#x2F;http.dart&#39; as http;</span><br></pre></td></tr></table></figure><p>無事動いたようです。</p><img src="/images/20210512a/スクリーンショット_2021-05-11_22.32.50.png" alt="ケンオールAPIを利用したFlutter画面" width="1200" height="1371"  loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>そろそろReact/Vue/Angularに飽きてきたかも？な人の新たなおもちゃとしてFlutter Webの紹介をしました。機能的には以下の3つを紹介しました</p><ul><li>Router周り</li><li>ビルドした成果物がどうなっていて他の言語(Go)のサーバーにどう組み込めばいいのか</li><li>サーバーへのHTTPアクセス</li></ul><p>モバイルアプリ開発案件じゃなくてもFlutterができてしまうので、スカンクワークスにぴったりですね。用途が広くていつの間にかシェアを広げていた黎明期のGoと同じように、上司に内緒でこっそり導入に最適です。</p><p><a href="/articles/20210510a/">Dart/Flutter連載</a>の3記事目でした。次回は鶴巻さんの<a href="/articles/20210513b/">Flutterレイアウト入門</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20210510a/&quot;&gt;Dart/Flutter連載&lt;/a&gt;の3本目はFlutter Webを紹介します。&lt;/p&gt;
&lt;p&gt;Flutter 2になって、Web向けに出力する機能もStableになりました。&lt;/p&gt;
&lt;p&gt;Flutter f</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="SPA" scheme="https://future-architect.github.io/tags/SPA/"/>
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="Flutter連載" scheme="https://future-architect.github.io/tags/Flutter%E9%80%A3%E8%BC%89/"/>
    
    <category term="ケンオール" scheme="https://future-architect.github.io/tags/%E3%82%B1%E3%83%B3%E3%82%AA%E3%83%BC%E3%83%AB/"/>
    
  </entry>
  
  <entry>
    <title>Flutter Swagger統合</title>
    <link href="https://future-architect.github.io/articles/20210511b/"/>
    <id>https://future-architect.github.io/articles/20210511b/</id>
    <published>2021-05-10T15:00:01.000Z</published>
    <updated>2021-05-21T12:25:39.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/articles/20210510a/">Dart/Flutter連載</a>の2記事目です。</p><p>はじめまして、TIGの宮崎将太です。</p><p>突然ですがみなさん、Swagger使いたいですよね。当社でもGo言語などでSwaggerを用いてREST APIサーバ/クライアントコードを生成する機会が増えています。</p><p>たまたま Flutter+Rails でアプリケーション構築をする機会があったので、今回Flutterのみに着目してSwagger(OpenAPISpec)を使用する方法をコード付きで解説していきます。(Railsは需要があったら書こうと思いますので、SNSでリアクションもらえるとです！)</p><h1 id="Swaggerとは？"><a href="#Swaggerとは？" class="headerlink" title="Swaggerとは？"></a>Swaggerとは？</h1><p>Swagger(OpenAPISpec)とはREST API仕様をyamlやjsonベースで定義できるフォーマットを定めたツールで、定義書を書くとAPI仕様書やサーバ、クライアントコードを生成できちゃう優れものです。</p><p>2系、3系いろいろありますが、今回はエコシステムが充実している2系を使用していきます。</p><p>Swaggerの詳しい説明は、敬愛する武田さんが以前記載してくださっているので、そちらをチェックしてください。m(__)m</p><p><a href="https://future-architect.github.io/articles/20191008/">https://future-architect.github.io/articles/20191008/</a></p><h1 id="0からクライアントコード実装までやってみる"><a href="#0からクライアントコード実装までやってみる" class="headerlink" title="0からクライアントコード実装までやってみる"></a>0からクライアントコード実装までやってみる</h1><p>百聞は一見に如かず。</p><p>0の状態からクライアントコード実装までやってみます。</p><p>なお、flutter/dartはインストール済みの前提として進めます。まだの方は<a href="https://flutter.dev/docs/get-started/install">公式</a>にインストール方法がありますので、準備してからやってみてください。</p><p>各バージョン情報は以下の通りです。</p><ul><li>開発機OS: Mac Catalina</li><li>Flutter: 2.0.4</li><li>Dart: 2.12.2</li><li>Swagger: 2.0</li></ul><h2 id="openapi-generatorインストール"><a href="#openapi-generatorインストール" class="headerlink" title="openapi-generatorインストール"></a>openapi-generatorインストール</h2><p>後ほどSwaggerからコードを生成するので、まずは生成ツールである<code>openapi-generator</code>をインストールします。</p><p>生成ツールはjar、dockerなどいろいろな形式で提供されていますが、今回は楽にHomebrew経由でインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install openapi-generator</span><br></pre></td></tr></table></figure><p>その他の形式については下記参考に導入してください。<br><a href="https://openapi-generator.tech/docs/installation/">https://openapi-generator.tech/docs/installation/</a></p><h2 id="Flutterプロジェクト作成"><a href="#Flutterプロジェクト作成" class="headerlink" title="Flutterプロジェクト作成"></a>Flutterプロジェクト作成</h2><p>ツール導入が完了したので、プロジェクトを作成。<br><code>flutter_swagger</code>という名称でプロジェクトを作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create flutter_swagger</span><br></pre></td></tr></table></figure><p>以下のようなプロジェクトが生成されるはずです。</p><p>あくまでAPIリクエスト実行までを実装するので、今回いじるのは<code>pubspec.yaml</code>と<code>lib/main.dart</code>のみです。</p><p>※Flutter基本的なディレクトリ構造に関しての説明は今回は割愛します。</p><img src="/images/20210511b/image.png" alt="ディレクトリ構成" width="580" height="758" loading="lazy"><h2 id="swagger-yaml配置"><a href="#swagger-yaml配置" class="headerlink" title="swagger.yaml配置"></a>swagger.yaml配置</h2><p>プロジェクト作成が完了したので、プロジェクトルートに<code>swagger.yaml</code>を作成します。<br>swaggerはヘルスチェックに対して200OKを返すのみの簡単なもの。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger:</span> <span class="string">&quot;2.0&quot;</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">&quot;api&quot;</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">&quot;0.0.1-SNAPSHOT&quot;</span></span><br><span class="line"><span class="comment"># host: &quot;localhost:8080&quot;</span></span><br><span class="line"><span class="attr">basePath:</span> <span class="string">/api/v1</span></span><br><span class="line"><span class="attr">schemes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">http</span></span><br><span class="line"><span class="attr">consumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;application/json&quot;</span></span><br><span class="line"><span class="attr">produces:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&quot;application/json&quot;</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">System</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;システム共通機能&quot;</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/health:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">tags:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">System</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">200:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">OK</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">&quot;#/definitions/health&quot;</span></span><br><span class="line"><span class="attr">definitions:</span></span><br><span class="line">  <span class="attr">health:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">enum:</span> [<span class="string">OK</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="APIクライアントコード生成"><a href="#APIクライアントコード生成" class="headerlink" title="APIクライアントコード生成"></a>APIクライアントコード生成</h2><p><code>swagger.yaml</code>の配置が終わったので<code>openapi-generator</code>でAPIクライアントコードを生成します。</p><p>dartのクライアントコードはパッケージ形式で生成されるので、<code>lib</code>配下には生成せず別ディレクトリに生成（<code>client</code>配下）し、後ほどimportします。</p><p>terminalにて以下を実行してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openapi-generator generate -i ./swagger.yaml -g dart -o ./client</span><br></pre></td></tr></table></figure><p>各オプションは以下の通りです。</p><ul><li><code>i</code>: swagger.yamlへのパス</li><li><code>g</code>: 生成コードの形式(≒言語)を指定します。様々な形式での生成ができるので以下参考にしてください。（dartも別形式である<code>dart-dio</code>を指定可能。）<br><a href="https://openapi-generator.tech/docs/generators/">https://openapi-generator.tech/docs/generators/</a></li><li><code>o</code>: 生成コードの出力先パス</li></ul><p>クライアントコードの生成が完了すると、以下のように<code>client</code>配下に別パッケージが確認できます。</p><p>※コンパイルエラーが発生している場合は<code>client</code>配下で<code>flutter pub get</code>を実行して依存ライブラリを解決してください。</p><img src="/images/20210511b/image_2.png" alt="openapi-generatorでの生成先ディレクトリ" width="554" height="1102"  loading="lazy"><p>主たる生成コードの役割は以下の通りです。</p><ul><li><code>lib/api/xxx_api.dart</code>: swaggerの<code>tag</code>ごとに生成されます。APIレスポンスのモデルバインド等を実行するAPIクライアントラッパーが定義されます。</li><li><code>lib/auth/xxx.dart</code>: 認証系の生成コードです。APIキー認証、basic認証、Bearer認証、OAuth認証が可能。今回は使用しません。</li><li><code>lib/model/xxx.dart</code>: swaggerの<code>definition</code>ディレクティブで定義するAPIリクエスト/レスポンスがモデルクラスとして生成されます。</li><li><code>lib/api_client.dart</code>: APIクライアントが定義されます。</li></ul><h2 id="openapiパッケージの導入"><a href="#openapiパッケージの導入" class="headerlink" title="openapiパッケージの導入"></a>openapiパッケージの導入</h2><p>生成されたコードは<code>openapi</code>という名称のパッケージになっているので、プロジェクトルートの<code>pubspec.yaml</code>にて依存定義を記載します。</p><p>以下、最後2行を<code>pubspec.yaml</code>に記載後、プロジェクトルートにて<code>flutter pub get</code>を実行してください。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">flutter:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># The following adds the Cupertino Icons font to your application.</span></span><br><span class="line">  <span class="comment"># Use with the CupertinoIcons class for iOS style icons.</span></span><br><span class="line">  <span class="attr">cupertino_icons:</span> <span class="string">^1.0.2</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 以下2行追記</span></span><br><span class="line">  <span class="attr">openapi:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./client/</span></span><br></pre></td></tr></table></figure><h2 id="APIリクエスト実行"><a href="#APIリクエスト実行" class="headerlink" title="APIリクエスト実行"></a>APIリクエスト実行</h2><p>ここまででようやくAPIリクエストを実行する準備が整いました。</p><p>あとは通常通り<code>openapi</code>パッケージをimportし、<code>main.dart</code>など任意の箇所にコーディングするだけです。</p><p>以下、参考コードになります。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:openapi/api.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/http.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ① ベースとなるAPIクライアント生成</span></span><br><span class="line"><span class="keyword">var</span> client = ApiClient(basePath: <span class="string">&quot;http://localhost:8080&quot;</span>);</span><br><span class="line"><span class="comment">// ヘッダを追加したい場合はクライアントに設定可能</span></span><br><span class="line">client.addDefaultHeader(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ② APIクライアントラッパーを生成</span></span><br><span class="line"><span class="comment">// APIレスポンスをモデルに変換してくれる</span></span><br><span class="line"><span class="keyword">var</span> api = SystemApi(client);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ③ レスポンスボディのみが欲しい場合は$&#123;パス名+HTTPメッソド名&#125;のメソッドをcall</span></span><br><span class="line">Health health = <span class="keyword">await</span> api.healthGet();</span><br><span class="line"><span class="built_in">print</span>(health.value); <span class="comment">// =&gt; OK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ④ HTTPステータスや、その他ヘッダ情報が欲しい場合は$&#123;パス名+HTTPメッソド名&#125;WithHttpInfoのメソッドをcall</span></span><br><span class="line">Response res = <span class="keyword">await</span> api.healthGetWithHttpInfo();</span><br><span class="line"><span class="built_in">print</span>(res.statusCode); <span class="comment">// =&gt; 200</span></span><br><span class="line"><span class="built_in">print</span>(res.headers); <span class="comment">// =&gt; HTTPヘッダーMap</span></span><br><span class="line"><span class="built_in">print</span>(res.body); <span class="comment">// =&gt; OK</span></span><br></pre></td></tr></table></figure><ol><li>ベースとなるAPIクライアント生成<br><code>ApiClient</code>をインスタンス化しています。アクセスの設定や共通ヘッダを実装したい場合は此処に実装することになります。<br><code>ApiClient</code>の定義は<code>client/lib/api_client.dart</code>に生成されます。</li><li>APIクライアントラッパーを生成<br>swaggerの<code>tag</code>ごとに生成されるクラスです。APIレスポンスのモデルへバインド等を実行します。swaggerの<code>path</code>一つにつき後述の3と4の2メソッドが生成されます。クラス定義は<code>client/lib/api/xxx_api.dart</code>に生成されます。</li><li>リクエスト発行（レスポンスボディのみが欲しい場合）<br>単純にレスポンスボディのみが欲しい場合は<code>$&#123;パス名+HTTPメッソド名&#125;</code>のメソッドをcallします。（この場合は<code>healthGet</code>）。HTTPステータスが400以上の場合やレスポンスボディがnullの場合は例外(<code>ApiException</code>)をthrowしてくれます。</li><li>リクエスト発行（ヘッダも含めて欲しい場合）<br>③のメソッドではHTTPヘッダ情報が取得できなかったり、HTTPステータスが400以上の場合には例外をthrowしてしまうので、この挙動が嫌な場合は<code>$&#123;パス名+HTTPメッソド名&#125;WithHttpInfo</code>をcallします。（例の場合は<code>healthGetWithHttpInfo</code>）<br>ただし、返り値は<code>http/http.dart</code>パッケージの<code>Response</code>インスタンスとなるので、レスポンスボディのモデルバインドは自前で実装する必要がある点に注意してください。生成コード的には③の中で④をcallするような構造になっています。</li></ol><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>お手軽にSwaggerからAPIクライアントコードの生成&amp;実装ができました。</p><p>今回はスキップしましたが、認証機構も生成されていたり、APIクライアントのカスタマイズも可能なので自動生成コードの中身は是非見てみてください。</p><p>Flutterに関しては他にもいろいろ知見を深めることができたので、別の機会があれば記事にできればと。m(__)m</p><h1 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h1><p>需要があるかわかりませんが、サンプルとして載せたSwaggerから生成されたコードを載せておきます。<br>コード見てみたいけど手元に環境がない、なんて方の参考になればと。</p><details><summary>▽Swaggerから生成したコード（クリックで開けます）</summary><div><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// client/lib/api/sytem_api.dart</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">part</span> of openapi.api;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SystemApi</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> ApiClient apiClient;</span><br><span class="line"></span><br><span class="line">  SystemApi([ApiClient apiClient]) : apiClient = apiClient ?? defaultApiClient;</span><br><span class="line"></span><br><span class="line">  <span class="comment">///  <span class="markdown">with HTTP info returned</span></span></span><br><span class="line">  Future&lt;Response&gt; healthGetWithHttpInfo() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span> postBody;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// verify required params are set</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// create path and map variables</span></span><br><span class="line">    <span class="built_in">String</span> path = <span class="string">&quot;/health&quot;</span>.replaceAll(<span class="string">&quot;&#123;format&#125;&quot;</span>,<span class="string">&quot;json&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// query params</span></span><br><span class="line">    <span class="built_in">List</span>&lt;QueryParam&gt; queryParams = [];</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; headerParams = &#123;&#125;;</span><br><span class="line">    <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; formParams = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; contentTypes = [];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span> nullableContentType = contentTypes.isNotEmpty ? contentTypes[<span class="number">0</span>] : <span class="keyword">null</span>;</span><br><span class="line">    <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; authNames = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(nullableContentType != <span class="keyword">null</span> &amp;&amp; nullableContentType.startsWith(<span class="string">&quot;multipart/form-data&quot;</span>)) &#123;</span><br><span class="line">      <span class="built_in">bool</span> hasFields = <span class="keyword">false</span>;</span><br><span class="line">      MultipartRequest mp = MultipartRequest(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">      <span class="keyword">if</span>(hasFields)</span><br><span class="line">        postBody = mp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> response = <span class="keyword">await</span> apiClient.invokeAPI(path,</span><br><span class="line">                                             <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">                                             queryParams,</span><br><span class="line">                                             postBody,</span><br><span class="line">                                             headerParams,</span><br><span class="line">                                             formParams,</span><br><span class="line">                                             nullableContentType,</span><br><span class="line">                                             authNames);</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;Health&gt; healthGet() <span class="keyword">async</span> &#123;</span><br><span class="line">    Response response = <span class="keyword">await</span> healthGetWithHttpInfo();</span><br><span class="line">    <span class="keyword">if</span>(response.statusCode &gt;= <span class="number">400</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ApiException(response.statusCode, _decodeBodyBytes(response));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(response.body != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> apiClient.deserialize(_decodeBodyBytes(response), <span class="string">&#x27;Health&#x27;</span>) <span class="keyword">as</span> Health;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// client/lib/model/health.dart</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">part</span> of openapi.api;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Health</span> </span>&#123;</span><br><span class="line">  <span class="comment">/// <span class="markdown">The underlying value of this enum member.</span></span></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> value;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Health._internal(<span class="keyword">this</span>.value);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> Health oK_ = <span class="keyword">const</span> Health._internal(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> Health fromJson(<span class="built_in">String</span> value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HealthTypeTransformer().decode(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">List</span>&lt;Health&gt; listFromJson(<span class="built_in">List</span>&lt;<span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">    <span class="keyword">return</span> json == <span class="keyword">null</span> ? <span class="keyword">new</span> <span class="built_in">List</span>&lt;Health&gt;() : json.map((value) =&gt; Health.fromJson(value)).toList();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HealthTypeTransformer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">dynamic</span> encode(Health data) &#123;</span><br><span class="line">    <span class="keyword">return</span> data.value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Health decode(<span class="built_in">dynamic</span> data) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (data) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;OK&quot;</span>: <span class="keyword">return</span> Health.oK_;</span><br><span class="line">      <span class="keyword">default</span>: <span class="keyword">throw</span>(<span class="string">&#x27;Unknown enum value to decode: <span class="subst">$data</span>&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// client/lib/api_client.dart</span></span><br><span class="line"><span class="keyword">part</span> of openapi.api;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryParam</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">String</span> value;</span><br><span class="line"></span><br><span class="line">  QueryParam(<span class="keyword">this</span>.name, <span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> basePath;</span><br><span class="line">  <span class="keyword">var</span> client = Client();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; _defaultHeaderMap = &#123;&#125;;</span><br><span class="line">  <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Authentication&gt; _authentications = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> _regList = <span class="built_in">RegExp</span>(<span class="string">r&#x27;^List&lt;(.*)&gt;$&#x27;</span>);</span><br><span class="line">  <span class="keyword">final</span> _regMap = <span class="built_in">RegExp</span>(<span class="string">r&#x27;^Map&lt;String,(.*)&gt;$&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  ApiClient(&#123;<span class="keyword">this</span>.basePath = <span class="string">&quot;http://localhost/api/v1&quot;</span>&#125;) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> addDefaultHeader(<span class="built_in">String</span> key, <span class="built_in">String</span> value) &#123;</span><br><span class="line">     _defaultHeaderMap[key] = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">dynamic</span> _deserialize(<span class="built_in">dynamic</span> value, <span class="built_in">String</span> targetType) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> (targetType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;String&#x27;</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&#x27;<span class="subst">$value</span>&#x27;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;int&#x27;</span>:</span><br><span class="line">          <span class="keyword">return</span> value <span class="keyword">is</span> <span class="built_in">int</span> ? value : <span class="built_in">int</span>.parse(<span class="string">&#x27;<span class="subst">$value</span>&#x27;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;bool&#x27;</span>:</span><br><span class="line">          <span class="keyword">return</span> value <span class="keyword">is</span> <span class="built_in">bool</span> ? value : <span class="string">&#x27;<span class="subst">$value</span>&#x27;</span>.toLowerCase() == <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;double&#x27;</span>:</span><br><span class="line">          <span class="keyword">return</span> value <span class="keyword">is</span> <span class="built_in">double</span> ? value : <span class="built_in">double</span>.parse(<span class="string">&#x27;<span class="subst">$value</span>&#x27;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Health&#x27;</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> HealthTypeTransformer().decode(value);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="built_in">Match</span> match;</span><br><span class="line">            <span class="keyword">if</span> (value <span class="keyword">is</span> <span class="built_in">List</span> &amp;&amp;</span><br><span class="line">                (match = _regList.firstMatch(targetType)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">var</span> newTargetType = match[<span class="number">1</span>];</span><br><span class="line">              <span class="keyword">return</span> value.map((v) =&gt; _deserialize(v, newTargetType)).toList();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">is</span> <span class="built_in">Map</span> &amp;&amp;</span><br><span class="line">                (match = _regMap.firstMatch(targetType)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">var</span> newTargetType = match[<span class="number">1</span>];</span><br><span class="line">              <span class="keyword">return</span> <span class="built_in">Map</span>.fromIterables(value.keys,</span><br><span class="line">                  value.values.map((v) =&gt; _deserialize(v, newTargetType)));</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">on</span> Exception <span class="keyword">catch</span> (e, stack) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ApiException.withInner(<span class="number">500</span>, <span class="string">&#x27;Exception during deserialization.&#x27;</span>, e, stack);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> ApiException(<span class="number">500</span>, <span class="string">&#x27;Could not find a suitable class for deserialization&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">dynamic</span> deserialize(<span class="built_in">String</span> json, <span class="built_in">String</span> targetType) &#123;</span><br><span class="line">    <span class="comment">// Remove all spaces.  Necessary for reg expressions as well.</span></span><br><span class="line">    targetType = targetType.replaceAll(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (targetType == <span class="string">&#x27;String&#x27;</span>) <span class="keyword">return</span> json;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> decodedJson = jsonDecode(json);</span><br><span class="line">    <span class="keyword">return</span> _deserialize(decodedJson, targetType);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">String</span> serialize(<span class="built_in">Object</span> obj) &#123;</span><br><span class="line">    <span class="built_in">String</span> serialized = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="keyword">null</span>) &#123;</span><br><span class="line">      serialized = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      serialized = json.encode(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> serialized;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We don&#x27;t use a Map&lt;String, String&gt; for queryParams.</span></span><br><span class="line">  <span class="comment">// If collectionFormat is &#x27;multi&#x27; a key might appear multiple times.</span></span><br><span class="line">  Future&lt;Response&gt; invokeAPI(<span class="built_in">String</span> path,</span><br><span class="line">                             <span class="built_in">String</span> method,</span><br><span class="line">                             <span class="built_in">Iterable</span>&lt;QueryParam&gt; queryParams,</span><br><span class="line">                             <span class="built_in">Object</span> body,</span><br><span class="line">                             <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; headerParams,</span><br><span class="line">                             <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; formParams,</span><br><span class="line">                             <span class="built_in">String</span> nullableContentType,</span><br><span class="line">                             <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; authNames) <span class="keyword">async</span> &#123;</span><br><span class="line"></span><br><span class="line">    _updateParamsForAuth(authNames, queryParams, headerParams);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ps = queryParams</span><br><span class="line">      .where((p) =&gt; p.value != <span class="keyword">null</span>)</span><br><span class="line">      .map((p) =&gt; <span class="string">&#x27;<span class="subst">$&#123;p.name&#125;</span>=<span class="subst">$&#123;Uri.encodeQueryComponent(p.value)&#125;</span>&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span> queryString = ps.isNotEmpty ?</span><br><span class="line">                         <span class="string">&#x27;?&#x27;</span> + ps.join(<span class="string">&#x27;&amp;&#x27;</span>) :</span><br><span class="line">                         <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">String</span> url = basePath + path + queryString;</span><br><span class="line"></span><br><span class="line">    headerParams.addAll(_defaultHeaderMap);</span><br><span class="line">    <span class="keyword">if</span> (nullableContentType != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">final</span> contentType = nullableContentType;</span><br><span class="line">      headerParams[<span class="string">&#x27;Content-Type&#x27;</span>] = contentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(body <span class="keyword">is</span> MultipartRequest) &#123;</span><br><span class="line">      <span class="keyword">var</span> request = MultipartRequest(method, <span class="built_in">Uri</span>.parse(url));</span><br><span class="line">      request.fields.addAll(body.fields);</span><br><span class="line">      request.files.addAll(body.files);</span><br><span class="line">      request.headers.addAll(body.headers);</span><br><span class="line">      request.headers.addAll(headerParams);</span><br><span class="line">      <span class="keyword">var</span> response = <span class="keyword">await</span> client.send(request);</span><br><span class="line">      <span class="keyword">return</span> Response.fromStream(response);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> msgBody = nullableContentType == <span class="string">&quot;application/x-www-form-urlencoded&quot;</span> ? formParams : serialize(body);</span><br><span class="line">      <span class="keyword">final</span> nullableHeaderParams = (headerParams.isEmpty)? <span class="keyword">null</span>: headerParams;</span><br><span class="line">      <span class="keyword">switch</span>(method) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">          <span class="keyword">return</span> client.post(url, headers: nullableHeaderParams, body: msgBody);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;PUT&quot;</span>:</span><br><span class="line">          <span class="keyword">return</span> client.put(url, headers: nullableHeaderParams, body: msgBody);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;DELETE&quot;</span>:</span><br><span class="line">          <span class="keyword">return</span> client.delete(url, headers: nullableHeaderParams);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;PATCH&quot;</span>:</span><br><span class="line">          <span class="keyword">return</span> client.patch(url, headers: nullableHeaderParams, body: msgBody);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;HEAD&quot;</span>:</span><br><span class="line">          <span class="keyword">return</span> client.head(url, headers: nullableHeaderParams);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">return</span> client.<span class="keyword">get</span>(url, headers: nullableHeaderParams);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="markdown">Update query and header parameters based on authentication settings.</span></span></span><br><span class="line">  <span class="comment">/// <span class="markdown">@param authNames The authentications to apply</span></span></span><br><span class="line">  <span class="keyword">void</span> _updateParamsForAuth(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; authNames, <span class="built_in">List</span>&lt;QueryParam&gt; queryParams, <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; headerParams) &#123;</span><br><span class="line">    authNames.forEach((authName) &#123;</span><br><span class="line">      Authentication auth = _authentications[authName];</span><br><span class="line">      <span class="keyword">if</span> (auth == <span class="keyword">null</span>) <span class="keyword">throw</span> ArgumentError(<span class="string">&quot;Authentication undefined: &quot;</span> + authName);</span><br><span class="line">      auth.applyToParams(queryParams, headerParams);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  T getAuthentication&lt;T <span class="keyword">extends</span> Authentication&gt;(<span class="built_in">String</span> name) &#123;</span><br><span class="line">    <span class="keyword">var</span> authentication = _authentications[name];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> authentication <span class="keyword">is</span> T ? authentication : <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p><a href="/articles/20210510a/">Dart/Flutter連載</a>の2記事目でした。次回は澁川さんの <a href="/articles/20210512a/">Goのサーバーの管理画面をFlutter Webで作ってみるための調査</a> です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;/articles/20210510a/&quot;&gt;Dart/Flutter連載&lt;/a&gt;の2記事目です。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Swagger" scheme="https://future-architect.github.io/tags/Swagger/"/>
    
    <category term="OpenAPI" scheme="https://future-architect.github.io/tags/OpenAPI/"/>
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="Flutter連載" scheme="https://future-architect.github.io/tags/Flutter%E9%80%A3%E8%BC%89/"/>
    
    <category term="Dart" scheme="https://future-architect.github.io/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>技育祭登壇しました。これから機械学習を学びたい方向けへの自分の経験談とおすすめの本、サイトの紹介もします</title>
    <link href="https://future-architect.github.io/articles/20210511a/"/>
    <id>https://future-architect.github.io/articles/20210511a/</id>
    <published>2021-05-10T15:00:00.000Z</published>
    <updated>2021-05-12T00:44:58.657Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210511a/geeksai_logo.png" alt="geeksai_logo" width="640" height="602"><p>TIGの玉木です。去年の12月までは主に機械学習エンジニアとして機械学習案件を任されていましたが、今年の1月からはITコンサルタントとして業務の幅が広くなりいろいろやっています。</p><p>先月技育祭<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>と呼ばれるイベントの勉強会という枠で、同僚の上野さんと一緒に「初心者必見！機械学習エンジニアがあれこれ話します。〜基礎から実社会応用まで〜」というタイトルで発表しました。この記事では技育祭の簡単な紹介と、当日あったこれから機械学習学びたい方向けへの本、サイトの紹介をします。</p><h2 id="技育祭とは"><a href="#技育祭とは" class="headerlink" title="技育祭とは"></a>技育祭とは</h2><p>公式サイト<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>から引用させていただくと、</p><blockquote><p>技育祭は「技術者を育てる」ことを目的としたエンジニアを目指す学生のための日本最大のテックカンファレンスです</p></blockquote><p>とのことです。元2ちゃんねる管理人のひろゆきさんや、東京大学の松尾豊先生など、豪華なゲストの方々が参加され、学生向けにためになる話をしてくれるイベントでした。講演セッションが3つ、勉強会セッションが2つ同時に進み、我々が話した勉強会セッションの裏ではRuby開発者のまつもとゆきひろさん、AtCoder社長のchokudaiさん、株式会社ドワンゴの川上量生さんが話されていました。こんな豪華なメンツが講演している中勉強会きてくれる人いるのかと不安だったのですが、当日は50人超の学生の方々が参加してくれました。</p><h2 id="当日の内容"><a href="#当日の内容" class="headerlink" title="当日の内容"></a>当日の内容</h2><img src="/images/20210511a/スクリーンショット_2021-04-27_15.54.35.png" alt="当日の発表スライド_ワクチン開発における教師あり学習" width="1200" height="863" loading="lazy"><p>「初心者必見！機械学習エンジニアがあれこれ話します。〜基礎から実社会応用まで〜」と、かなり抽象的なタイトルで話しました。私は教師あり学習について少し説明したあと、以前ブログに書いたワクチンの話<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>を簡単に紹介し、word2vecなどの事前学習モデルについて説明したあと、それを使った案件への応用を紹介しました。上記の図は当日話したスライドの1部で、自然言語処理のタスクの1つである感情分析の説明をしたあと、ワクチン候補を見つけるのも感情分析と同じ枠組みで解けることを説明している図になります。上野さんは主に画像処理での案件への応用を紹介していました。</p><p>当日はチャットが大いに盛り上がりました(書き込んでくれた皆様ありがとうございました！)。よくあった質問が「どうやって機械学習勉強しましたか？」「おすすめの参考になる本などありますか？」という質問でした。その場で口頭で答えたものの、初心者向けの本、サイトを紹介するというのは一定の需要がありそうなので、この記事では</p><ul><li>私がどうやって機械学習を学んだか</li><li>今ならどうやって機械学習を学ぶか</li></ul><p>を紹介しようと思います。これから機械学習関係の研究室に入ってガッツリ学ぶ方向けというよりは、当日勉強会に参加していた、機械学習ちょっと学んでみたいぐらいのレベル感の方に向けてこの記事を書きます。</p><h2 id="私がどうやって機械学習を学んだか"><a href="#私がどうやって機械学習を学んだか" class="headerlink" title="私がどうやって機械学習を学んだか"></a>私がどうやって機械学習を学んだか</h2><p>私は大学院から自然言語処理の研究室に入り、現職では自然言語処理の案件や、ワクチンの案件に配属されて、機械学習のデータを作ったり、機械学習モデルを作ったりしていました。Kaggleと呼ばれる機械学習のコンペティションサイトではKaggle Expertぐらいの実力です(凄くないです)。<br>私が入った大学院の研究室はできたばかりの研究室だったこともあり、多くの部分を独学で学びました。最初に参考にしたサイトは、東京都立大学の小町先生が書かれた「自然言語処理を独習したい人のために」、「自然言語処理を学ぶ推薦書籍」というサイトです。当時非常に参考になりました。</p><ul><li><a href="http://cl.sd.tmu.ac.jp/prospective/prerequisite">自然言語処理を独習したい人のために</a></li><li><a href="http://cl.sd.tmu.ac.jp/prospective/readings">自然言語処理を学ぶ推薦書籍</a></li></ul><p>上記のサイトは私が学生のときにはすでにあり、現在も更新されています。実際に当時私が読んで役に経ったなと思っている本は</p><ul><li><a href="https://www.coronasha.co.jp/np/isbn/9784339027518/">言語処理のための機械学習入門</a></li><li><a href="https://book.impress.co.jp/books/1120101017">Python 機械学習プログラミング</a></li></ul><p>の2つです。「言語処理のための機械学習入門」は今はあまり使われないようなモデルも紹介されていますが、大学院で研究をする上での基礎になりました。「Python 機械学習プログラミング」はコードを書いて結果が出るので、その分楽しく読めた記憶があります。本ではありませんが、</p><ul><li>courseraのAndrew Ng先生の「<a href="https://ja.coursera.org/learn/machine-learning">Machine Learning</a>」</li><li>PFN海野さん、東工大岡崎先生といった方々が公開されている論文紹介の資料</li><li>論文</li></ul><p>を見たり読んだりして知識をつけました。courseraのAndrew Ng先生の「Machine Learning」は英語に抵抗がなければおすすめします。最近は<a href="https://ja.coursera.org/specializations/deep-learning">Deep Learning用の別の講座</a>もできていて、そちらを見るのがいいのかなと思います。かなり時間がかかるのがネックですが、内容はとても良いです。Andrew Ng先生のYouTubeに上がっている授業の方は結構難しいのですが、courseraの授業は易しめだと思います。</p><p>実験面や機械学習のコードに関して最も参考になったのが、<a href="https://www.kaggle.com/">Kaggle</a>と呼ばれる機械学習のコンペティションサイトです。当時<a href="https://www.kaggle.com/c/quora-question-pairs">Quora Question Pairs</a>というコンペが開催されており、データや内容に興味があったため参加しました。その後もぼちぼち興味のあるコンペティションに参加し、知見を得ています。またその他に、kerasやchainerのサンプルコードや、論文の実装を参考にして当時は機械学習のコードの書き方を学んでいきました。</p><h2 id="今ならどうやって機械学習を学ぶか"><a href="#今ならどうやって機械学習を学ぶか" class="headerlink" title="今ならどうやって機械学習を学ぶか"></a>今ならどうやって機械学習を学ぶか</h2><p>今もし1から自分が機械学習を学び直すとしたら、Kaggleでたくさん実験するところから始めると思います。本をただ読むよりも、コードを実際に動かして、実行結果がわかることが自分の好みというのがあります。そのような方に特にKaggleがおすすめできます。Kaggleはある程度データや環境がすでに用意されており、いきなりコードを書き始めることができます。公開されているデータの種類も多岐にわたります。余談ですが、弊社もコンペティションではないですが、データの公開を行っています<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。Kaggle上でGPUやTPUも制限付きで使うことができます。参考になるコードや議論も公開されています。Kaggle上に公開されている内容が全くわからないと最初はなると思います。その中でおすすめなのが以下の2つです。</p><ul><li><a href="https://developers.google.com/machine-learning/crash-course">Machine Learning Crash Course</a></li><li><a href="https://www.kspub.co.jp/book/detail/5190067.html">実践Data Scienceシリーズ PythonではじめるKaggleスタートブック</a></li></ul><p>Machine Learning Crash Courseは前述のcourseraの授業に比べて量もそんなに多くなく、最初に学ぶ内容として必要なことが一通り揃っているように思います。<br>PythonではじめるKaggleスタートブックが出たときすでに自分はKaggleに出たことがあったのでこの本は読んだことがないのに紹介してしまい申し訳ないのですが、本の紹介、レビューを見る限り良さそうだなと思います。当社ブログでも紹介しています<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>。</p><p>上記2冊に比べて内容は難しくなりますが、</p><ul><li><a href="https://gihyo.jp/book/2019/978-4-297-10843-4">Kaggleで勝つデータ分析の技術</a></li></ul><p>もおすすめします。機械学習モデルの精度をあげる工夫ももちろん載っているのですが、正しくモデルを評価する、データを変換するといった基礎的なことも学べます。実務で機械学習をやっていても、この点難しいと感じることが多いのですが、Kaggleで勝つデータ分析の技術は一通りまとまっていて今でも参考にしてます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>技育祭でよくあった質問の「どうやって機械学習勉強しましたか？」「おすすめの参考になる本などありますか？」に対する答えとなる記事を書きました。現在もKaggle上でいくつかコンペティションが開催されているので、機械学習に興味のある方は参加してみてはいかがでしょうか。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://talent.supporterz.jp/geeksai/2021/">https://talent.supporterz.jp/geeksai/2021/</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="/articles/20201208/">https://future-architect.github.io/articles/20201208/</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="/articles/20200801/">https://future-architect.github.io/articles/20200801/</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="/articles/20200615/">https://future-architect.github.io/articles/20200615/</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210511a/geeksai_logo.png&quot; alt=&quot;geeksai_logo&quot; width=&quot;640&quot; height=&quot;602&quot;&gt;

&lt;p&gt;TIGの玉木です。去年の12月までは主に機械学習エンジニアとして機械学習案件を任されていま</summary>
      
    
    
    
    <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="書籍" scheme="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/"/>
    
    <category term="機械学習" scheme="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/"/>
    
    <category term="技育祭" scheme="https://future-architect.github.io/tags/%E6%8A%80%E8%82%B2%E7%A5%AD/"/>
    
  </entry>
  
  <entry>
    <title>Dart入門</title>
    <link href="https://future-architect.github.io/articles/20210510b/"/>
    <id>https://future-architect.github.io/articles/20210510b/</id>
    <published>2021-05-09T15:00:01.000Z</published>
    <updated>2021-05-21T12:25:34.891Z</updated>
    
    <content type="html"><![CDATA[<p>この記事は<a href="/articles/20210510a/">Dart/Flutter連載</a>の1記事目です。</p><p>TIGの伊藤真彦です。</p><p>Dart/Flutter入門に参加します、DartといえばFlutterの話が必ずついてくるものですが、今回は連載1記事目として、敢えてプログラミング言語としてのDartに焦点を絞った記事にします。</p><h1 id="Dartとは"><a href="#Dartとは" class="headerlink" title="Dartとは"></a>Dartとは</h1><img src="/images/20210510b/logo_lockup_dart_horizontal.png" alt="dart horizontal logo" width="560" height="202"><p>DartはGoogleによって開発されたウェブ向けのプログラミング言語です、正式発表された時期は2011年です。</p><p>元々はJavaScriptの代替となることを目的に作られましたが、Javascriptのようにブラウザに統合される事なく今日まで至ります。JavaScriptの代替、という概念では競合にあたるTypeScriptが今ではGoogle社内の標準プログラミング言語として承認されています。</p><p>しかし、2018年にDart2として再起動、モバイルアプリケーション向けフレームワークである<code>Flutter</code>の基本ライブラリでDartが採用される事により、近年注目度が上昇しています。今iOS/Androidのクロスプラットフォームでのアプリケーション開発を行うならDartが熱い、という事ですね。</p><h1 id="技術的特徴"><a href="#技術的特徴" class="headerlink" title="技術的特徴"></a>技術的特徴</h1><p>Dartはクラスベースのオブジェクト指向言語です、単一継承のみがサポートされていますが、Mixinを利用することも可能です。</p><p>静的型付け言語としての型アノテーションが存在しつつも、dynamic型と呼ばれる特徴的な型により、動的型付け言語のようにも扱うことが可能です。上記の特徴により、大規模システムでも耐えられる堅牢さ、高パフォーマンスを維持しつつ、時には柔軟性を持つこともできる言語として設計されています。</p><p>JavaScriptトランスパイラにより、作成したコードをJavascriptに変換することが可能です。デバッグビルドでのみ動作する<code>assert</code>という構文があるのも特徴です。</p><h1 id="Dartのインストール"><a href="#Dartのインストール" class="headerlink" title="Dartのインストール"></a>Dartのインストール</h1><p><a href="https://dart.dev/get-dart">公式サイト</a>にOSごとのインストールの方法がまとめられています、MACでのインストールが一番簡単です。</p><p>インストールに成功したら<code>dart --version</code>コマンドでバージョンを確認できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ dart --version</span><br><span class="line">Dart SDK version: 2.12.4 (stable) (Thu Apr 15 12:26:53 2021 +0200) on <span class="string">&quot;macos_x64&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Dartの実行"><a href="#Dartの実行" class="headerlink" title="Dartの実行"></a>Dartの実行</h1><p><code>dart ファイル名</code>で作成したDARTファイルを実行できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ dart hello.dart</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure><p>拡張子は<code>.dart</code>が一般的なようですが、dartコマンドに渡す分には他の拡張子でも読み込み、実行できました。</p><h1 id="Dartの基礎文法"><a href="#Dartの基礎文法" class="headerlink" title="Dartの基礎文法"></a>Dartの基礎文法</h1><p>基本的な文法を紹介する形でDartに触れてみます。</p><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Hello World!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dartはmain関数に実行したい処理を書く形式で単一ファイルでとして実行可能です。</p><h2 id="コマンドライン引数"><a href="#コマンドライン引数" class="headerlink" title="コマンドライン引数"></a>コマンドライン引数</h2><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello <span class="subst">$&#123;args[<span class="number">0</span>]&#125;</span>!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ % dart hello.dart Dart</span><br><span class="line">Hello Dart!</span><br></pre></td></tr></table></figure><p>main関数に引数を持たせることでコマンドライン引数を受け取ることができます。</p><p>Goの<code>flag.Parse()</code>、Rubyの<code>ARGV</code>のようなコマンドライン引数を取り扱うための独自な手法が無い。引数の書き方が<code>型名 変数名</code>の順番である、などgoに慣れた状態で触れると異文化を感じます。文字列への変数展開はJavaScriptであれば``で囲った文字列である必要があるところを’’でも問題ないあたりも細かい作法が異なりますね。</p><h2 id="変数宣言"><a href="#変数宣言" class="headerlink" title="変数宣言"></a>変数宣言</h2><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = args[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello <span class="subst">$&#123;name&#125;</span>!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新しい変数は<code>var 変数名 = 値</code>の形式で宣言します。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">    <span class="built_in">String</span> name = args[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello <span class="subst">$&#123;name&#125;</span>!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>変数の型を明示的に指定することも可能です。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="built_in">dynamic</span> obj = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span> + obj);</span><br><span class="line">    obj = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1&quot;</span> + obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~$ dart main.dart</span><br><span class="line">2</span><br><span class="line">11</span><br></pre></td></tr></table></figure><p>特定の形を期待しない場合は<code>dynamic</code>を型アノテーションとして付けることができます。<br>どのような型でも再代入可能になる一方で、<code>dynamic obj = 1;</code>をそのまま<code>&quot;1&quot; + obj</code>でString型の文字列と結合することはできません。</p><p><a href="https://dart.dev/guides/language/effective-dart/style">スタイルガイド</a>によると、ローカル変数には型アノテーション無しの<code>var</code>を、公開APIの引数等で型アノテーションを書くようにするような用法が推奨されています。</p><h3 id="デフォルト値"><a href="#デフォルト値" class="headerlink" title="デフォルト値"></a>デフォルト値</h3><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="built_in">String</span> s;</span><br><span class="line">    s = <span class="string">&#x27;Hello Dart!&#x27;</span>;</span><br><span class="line">    <span class="built_in">print</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~ % dart main.dart</span><br><span class="line">Hello Dart!</span><br></pre></td></tr></table></figure><p>値を決めずに変数を宣言することが可能です。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="built_in">String</span> s;</span><br><span class="line">    <span class="built_in">print</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dart main.dart</span><br><span class="line">main.dart:3:11: Error: Non-nullable variable <span class="string">&#x27;s&#x27;</span> must be assigned before it can be used.</span><br><span class="line">    <span class="built_in">print</span>(s);</span><br></pre></td></tr></table></figure><p>変数のデフォルト値はどのような型であってもnullです、nullを許容しない型の変数を代入しないまま参照するとコンパイルエラーが発生します。</p><h2 id="定数"><a href="#定数" class="headerlink" title="定数"></a>定数</h2><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">String</span> s = <span class="string">&quot;Hello Dart!&quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>const</code>を先頭に付与することで定数として宣言することも可能です。<br>定数の値を変更しようとするとコンパイルエラー<code>Can&#39;t assign to the const variable</code>が発生します。</p><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="built_in">String</span> s = <span class="string">&quot;Hello Dart!&quot;</span>;</span><br><span class="line">    <span class="built_in">print</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dartには<code>final</code>という修飾子も存在します。<br>finalを使って宣言した変数を変更しようとするとコンパイルエラー<code>Can&#39;t assign to the final variable</code>が発生します。</p><p>使い方が似ていますが、<code>const</code>はコンパイル時に評価され、<code>final</code>は実行段階で評価されるという違いがあります。</p><p>例えばコンパイル段階で計算できない実行時の時刻を<code>const</code>で宣言することはできません。</p><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">final</span> now = <span class="built_in">DateTime</span>.now();</span><br><span class="line">    <span class="built_in">print</span>(now);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このコードは正常に動作します。</p><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="built_in">DateTime</span>.now();</span><br><span class="line">    <span class="built_in">print</span>(now);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>constに置き換えると下記のエラーが発生します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Error compiling to JavaScript:</span><br><span class="line">Warning: Interpreting this as package URI, <span class="string">&#x27;package:dartpad_sample/main.dart&#x27;</span>.</span><br><span class="line">lib/main.dart:2:26:</span><br><span class="line">Error: Cannot invoke a non-<span class="string">&#x27;const&#x27;</span> constructor <span class="built_in">where</span> a const expression is expected.</span><br><span class="line">    const now = DateTime.now();</span><br><span class="line">                         ^^^</span><br><span class="line">Error: Compilation failed.</span><br></pre></td></tr></table></figure><p>このような多様な修飾子の存在はコンパイル速度のパフォーマンスチューニングに貢献しますが、若干難易度が高い印象ですね。</p><p>Dart 2.12から<code>late</code>修飾子も追加されています。</p><figure class="highlight dart"><figcaption><span>late.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">late</span> <span class="built_in">String</span> description;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  description = <span class="string">&#x27;Feijoada!&#x27;</span>;</span><br><span class="line">  <span class="built_in">print</span>(description);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>late</code>修飾子には主に2つのメリットがあります。</p><ul><li>変数がnullを許容しない</li><li>変数を遅延評価することでパフォーマンスを改善する</li></ul><p>条件分岐によっては利用しない値を<code>late</code>修飾子付きで宣言するような使い方が期待できます。</p><h2 id="組み込み型"><a href="#組み込み型" class="headerlink" title="組み込み型"></a>組み込み型</h2><p>Dartには下記の組み込み型が用意されています。</p><ul><li>Numbers (int, double)</li><li>Strings (String)</li><li>Booleans (bool)</li><li>Lists (List, also known as arrays)</li><li>Sets (Set)</li><li>Maps (Map)</li><li>Runes (Runes; often replaced by the characters API)</li><li>Symbols (Symbol)</li><li>The value null (Null)</li></ul><p>特徴的なものは<code>List</code>、<code>Set</code>の違いでしょうか。<br><code>List</code>はお馴染みの配列であるのに対し、<code>Set</code>は重複した値を持たないコレクション型です。</p><p><code>String</code>型の変数はシングルクオート、またはダブルクオート文字列を作成することが可能です。<br>シングルクオートとダブルクオートでは特殊文字のエスケープのルールが異なります。</p><figure class="highlight dart"><figcaption><span>string.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">&#x27;Single quotes.&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">&quot;Double quotes.&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> s3 = <span class="string">&#x27;It\&#x27;s easy to escape the string delimiter.&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> s4 = <span class="string">&quot;It&#x27;s even easier to use the other delimiter.&quot;</span>;</span><br></pre></td></tr></table></figure><p><code>トリプルクオート</code>で複数行の文字列を書くことができるのが特徴的です。</p><figure class="highlight dart"><figcaption><span>string.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">You can create</span></span><br><span class="line"><span class="string">multi-line strings like this one.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = <span class="string">&quot;&quot;&quot;This is also a</span></span><br><span class="line"><span class="string">multi-line string.&quot;&quot;&quot;</span>;</span><br></pre></td></tr></table></figure><p>Dartにおける<code>Symbol</code>はコンパイル時常数として扱われる、文字列から生成できるデータ型です。<br>コンパイル時に難読化なれないため、ライブラリのメタデータの整理などに利用されますが。<br>ユーザー目線ではほぼ使わないようです。</p><h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3><figure class="highlight dart"><figcaption><span>enum.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">enum</span> Color &#123;</span><br><span class="line">   red,</span><br><span class="line">   blue,</span><br><span class="line">   green</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="built_in">print</span>(Color.red);</span><br><span class="line">  <span class="built_in">print</span>(Color.green.index);</span><br><span class="line">  <span class="built_in">print</span>(Color.values);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~$ dart enum.dart</span><br><span class="line">Color.red</span><br><span class="line">2</span><br><span class="line">[Color.red, Color.blue, Color.green]</span><br></pre></td></tr></table></figure><p>Dartではバージョン1.8からenumがサポートされています。<br>比較的素朴な仕組みで、インデックスを1から始めたり飛ばしたり、文字列に変換するような機能はありません。</p><h2 id="条件分岐"><a href="#条件分岐" class="headerlink" title="条件分岐"></a>条件分岐</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">    <span class="keyword">if</span> (args[<span class="number">0</span>] == <span class="string">&quot;Dart&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello Dart!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (args[<span class="number">0</span>] == <span class="string">&quot;Flutter&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Welcome Flutter!&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;bye&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if文は特に違和感のないシンプルなスタイルです。<br>JavaScriptでは比較演算子に<code>===</code>がありましたが、現在のDartでは存在しません。(初期のDartには存在していたようです)</p><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (args[<span class="number">0</span>]) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;Dart&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Hello Dart!&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;Flutter&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Welcome Flutter!&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;bye&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>switch文も存在します。<br>各case毎にbreak文を設置しないと次のcaseが実行される<code>fall through</code>形式でありつつ、case内部で何かを実行したのにbreakしないとコンパイルエラーが発生するという若干癖のある仕様になっています。</p><p>つまり下記のコードはbreakが存在しないためエラーになります。</p><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (args[<span class="number">0</span>]) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;Dart&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Hello Dart!&#x27;</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;Flutter&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Welcome Flutter!&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;bye&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello.dart:3:5: Error: Switch <span class="keyword">case</span> may fall through to the next <span class="keyword">case</span>.</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;Dart&#x27;</span>:</span><br></pre></td></tr></table></figure><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (args[<span class="number">0</span>]) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;Dart&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;Flutter&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;bye&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>空のケースのみ<code>fall through</code>することで複数条件のケース文を実現するような用途が想定されています。</p><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (args[<span class="number">0</span>]) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;Dart&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Hello Dart!&#x27;</span>);</span><br><span class="line">    <span class="keyword">continue</span> bye;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;Flutter&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Hello Flutter!&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    bye:</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;bye&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>何か処理を実行してから<code>fall through</code>することはラベルを利用することで実現できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~$ dart hello.dart Dart</span><br><span class="line">Hello Dart!</span><br><span class="line"><span class="built_in">bye</span></span><br></pre></td></tr></table></figure><h2 id="ループ処理"><a href="#ループ処理" class="headerlink" title="ループ処理"></a>ループ処理</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; args.length; i++)&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Hello <span class="subst">$&#123;args[i]&#125;</span>!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初期化文、条件式、後処理文の古典的なfor文が利用可能です。</p><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">    args.forEach((<span class="built_in">String</span> arg)&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Hello <span class="subst">$&#123;arg&#125;</span>!&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>forEach文でループを処理することも可能です。</p><h3 id="item-in-list"><a href="#item-in-list" class="headerlink" title="item in list"></a>item in list</h3><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> arg <span class="keyword">in</span> args)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello <span class="subst">$&#123;arg&#125;</span>!&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Dartでは上記２種類に加えPython系のテイストを感じる書き方でもループを回すことが可能です。</p><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= args.length)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Hello <span class="subst">$&#123;args[index]&#125;</span>!&#x27;</span>);</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h3><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Hello <span class="subst">$&#123;args[index]&#125;</span>!&#x27;</span>);</span><br><span class="line">        index++;</span><br><span class="line">    &#125; <span class="keyword">while</span>(index &lt; args.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>while文、do~while分も存在します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~$ dart hello.dart Dart Flutter</span><br><span class="line">Hello Dart!</span><br><span class="line">Hello Flutter!</span><br></pre></td></tr></table></figure><h2 id="関数"><a href="#関数" class="headerlink" title="関数"></a>関数</h2><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  hello(<span class="string">&#x27;Dart&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> hello(<span class="built_in">String</span> name) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello <span class="subst">$&#123;name&#125;</span>!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>関数を定義、実行することが可能です。<br>関数および関数が受け取る引数の型アノテーションは<a href="https://dart.dev/guides/language/effective-dart/style">スタイルガイド</a>で推奨されていますが、必須ではありません。</p><h2 id="非同期処理"><a href="#非同期処理" class="headerlink" title="非同期処理"></a>非同期処理</h2><p>Dartは非同期処理をサポートしています。</p><figure class="highlight dart"><figcaption><span>async.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;<span class="built_in">String</span>&gt; asyncFunction() &#123;</span><br><span class="line">  <span class="keyword">return</span> Future&lt;<span class="built_in">String</span>&gt;.value(<span class="string">&quot;it is Asynchronous processing&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">final</span> resp = asyncFunction();</span><br><span class="line">  resp.then((value) =&gt; <span class="built_in">print</span>(value));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ dart aync.dart</span><br><span class="line">it is Asynchronous processing</span><br></pre></td></tr></table></figure><p><code>Future&lt;型名&gt;</code>という型アサーションで非同期処理を定義できます。<br>Future社員としては使いこなすモチベーションが無駄に高まります。</p><figure class="highlight dart"><figcaption><span>async.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Future&lt;<span class="built_in">String</span>&gt; asyncFunction() &#123;</span><br><span class="line">  <span class="keyword">return</span> Future&lt;<span class="built_in">String</span>&gt;.value(<span class="string">&quot;it is Asynchronous processing&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> resp = <span class="keyword">await</span> asyncFunction();</span><br><span class="line">  <span class="built_in">print</span>(resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Javascriptのように、<code>async</code>、<code>await</code>の構文も利用可能です。</p><figure class="highlight dart"><figcaption><span>async.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> resp = <span class="keyword">await</span> <span class="keyword">new</span> Future(()&#123;</span><br><span class="line">    <span class="built_in">String</span> s = <span class="string">&#x27;it is Asynchronous processing&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">print</span>(resp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のように無名関数をそのまま書いていく事も可能です。</p><h2 id="クラス"><a href="#クラス" class="headerlink" title="クラス"></a>クラス</h2><p>Dartはオブジェクト指向言語であるため、クラスが存在します。</p><p>インスタンス変数、コンストラクタ、メソッドを指定して、クラスを定義することが可能です。Personクラスの定義の内部にPerson()を定義する形でコンストラクタを設定します。<br>コンストラクタの定義には様々なパターンが存在します。</p><p>常数コンストラクタ、ファクトリ・コンストラクタなど高度な定義方法もありますが、ひとまずは基礎的なクラス定義を紹介します。</p><h3 id="Generative-Constructors"><a href="#Generative-Constructors" class="headerlink" title="Generative Constructors"></a>Generative Constructors</h3><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> yamada = <span class="keyword">new</span> Person();</span><br><span class="line">  yamada.name = <span class="string">&#x27;yamada&#x27;</span>;</span><br><span class="line">  <span class="built_in">print</span>(yamada.hello());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name;</span><br><span class="line"></span><br><span class="line">  Person()&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  hello() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>コンストラクタでは引数を受け取らず適当な初期値を入力し、インスタンス生成後にメンバ変数を指定するシンプルな方式です。</p><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> yamada = <span class="keyword">new</span> Person(<span class="string">&#x27;yamada&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(yamada.hello());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name;</span><br><span class="line"></span><br><span class="line">  Person(<span class="built_in">String</span> name)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  hello() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ dart hello.dart</span><br><span class="line">Hello, My name is yamada</span><br></pre></td></tr></table></figure><p>コンストラクタに引数を定義し、初期化時に受け取る方式です。</p><h3 id="Automatic-field-initialization"><a href="#Automatic-field-initialization" class="headerlink" title="Automatic field initialization"></a>Automatic field initialization</h3><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> yamada = <span class="keyword">new</span> Person(<span class="string">&#x27;yamada&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(yamada.hello());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name;</span><br><span class="line"></span><br><span class="line">  Person(<span class="keyword">this</span>.name);</span><br><span class="line"></span><br><span class="line">  hello() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ dart hello.dart</span><br><span class="line">Hello, My name is yamada</span><br></pre></td></tr></table></figure><p>コンストラクタの記述をシンプルに定義可能な方式です。</p><h3 id="Named-Constructors"><a href="#Named-Constructors" class="headerlink" title="Named Constructors"></a>Named Constructors</h3><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> yamada = <span class="keyword">new</span> Person.asConsultant(<span class="string">&#x27;yamada&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(yamada.hello());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name;</span><br><span class="line">  <span class="keyword">var</span> job;</span><br><span class="line"></span><br><span class="line">  Person(<span class="keyword">this</span>.name, <span class="keyword">this</span>.job);</span><br><span class="line"></span><br><span class="line">  Person.asConsultant(<span class="built_in">String</span> name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.job = <span class="string">&#x27;IT Consultant&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  hello() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, I am <span class="subst">$&#123;<span class="keyword">this</span>.job&#125;</span>&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ dart hello.dart</span><br><span class="line">Hello, My name is yamada, I am IT Consultant</span><br></pre></td></tr></table></figure><p>特定条件付きのコンストラクタを定義可能です。</p><h3 id="Redirecting-Constructors"><a href="#Redirecting-Constructors" class="headerlink" title="Redirecting Constructors"></a>Redirecting Constructors</h3><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> yamada = <span class="keyword">new</span> Person.asConsultant(<span class="string">&#x27;yamada&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(yamada.hello());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name;</span><br><span class="line">  <span class="keyword">var</span> job;</span><br><span class="line"></span><br><span class="line">  Person(<span class="keyword">this</span>.name, <span class="keyword">this</span>.job);</span><br><span class="line"></span><br><span class="line">  Person.asConsultant(<span class="built_in">String</span> name) : <span class="keyword">this</span>(name, <span class="string">&quot;IT Consultant&quot;</span>);</span><br><span class="line"></span><br><span class="line">  hello() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, I am <span class="subst">$&#123;<span class="keyword">this</span>.job&#125;</span>&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ dart hello.dart</span><br><span class="line">Hello, My name is yamada, I am IT Consultant</span><br></pre></td></tr></table></figure><p>他のコンストラクタの定義を再利用する方式です。</p><h3 id="クラスの継承"><a href="#クラスの継承" class="headerlink" title="クラスの継承"></a>クラスの継承</h3><figure class="highlight dart"><figcaption><span>hello.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> yamada = <span class="keyword">new</span> ITConsultant(<span class="string">&#x27;yamada&#x27;</span>);</span><br><span class="line">  <span class="built_in">print</span>(yamada.hello());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name;</span><br><span class="line"></span><br><span class="line">  Person(<span class="keyword">this</span>.name);</span><br><span class="line"></span><br><span class="line">  hello() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ITConsultant</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  ITConsultant(<span class="built_in">String</span> name) : <span class="keyword">super</span>(name);</span><br><span class="line">  hello() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello, My name is <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, I am IT Consultant&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ dart hello.dart</span><br><span class="line">Hello, My name is yamada, I am IT Consultant</span><br></pre></td></tr></table></figure><p>他のオブジェクト指向言語同様クラスは継承することができます。</p><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>一通り基礎部分をさらってみましたが、豊富な表現力と適度な硬さの両立を目指そうとしている印象を受けました。</p><p>その辺りの思想と肌感覚がマッチすればハマる言語かもしれません。</p><p>破壊的な変更により今では動かないシンタックスが検索結果の上位に散見しているので、学習障壁を高めてしまうかなと感じました。<br>今回の連載で有用な記事を増やして盛り上げていきたいですね。</p><p><a href="/articles/20210510a/">Dart/Flutter連載</a>の1記事目ででした。次は宮崎さんの<a href="/articles/20210511b/">Flutter Swagger統合</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;この記事は&lt;a href=&quot;/articles/20210510a/&quot;&gt;Dart/Flutter連載&lt;/a&gt;の1記事目です。&lt;/p&gt;
&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;Dart/Flutter入門に参加します、DartといえばFlutterの話が必ずついてくるもの</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Flutter連載" scheme="https://future-architect.github.io/tags/Flutter%E9%80%A3%E8%BC%89/"/>
    
    <category term="Dart" scheme="https://future-architect.github.io/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>Dart/Flutter連載始めます</title>
    <link href="https://future-architect.github.io/articles/20210510a/"/>
    <id>https://future-architect.github.io/articles/20210510a/</id>
    <published>2021-05-09T15:00:00.000Z</published>
    <updated>2021-05-19T00:34:15.782Z</updated>
    
    <content type="html"><![CDATA[<p>2021年3月に「Flutter 2.0」のリリースが発表されました！</p><p>そして、本ブログ初のDart/Flutterをテーマにした連載を行います。内容は次のようになっています。</p><table><thead><tr><th>公開日</th><th>執筆者</th><th>タイトル</th></tr></thead><tbody><tr><td>5月10日</td><td>伊藤真彦</td><td><a href="/articles/20210510b/">Dart入門</a></td></tr><tr><td>5月11日</td><td>宮崎将太</td><td><a href="/articles/20210511b/">Flutter Swagger統合</a></td></tr><tr><td>5月12日</td><td>澁川喜規</td><td><a href="/articles/20210512a/">Goのサーバーの管理画面をFlutter Webで作ってみるための調査</a></td></tr><tr><td>5月13日</td><td>鶴巻彩夏</td><td><a href="/articles/20210513b/">Flutterレイアウト入門</a></td></tr><tr><td>5月14日</td><td>真野隼記</td><td><a href="/articles/20210514a/">Flutterで技術ブログRSSリーダー</a></td></tr><tr><td>5月17日</td><td>越島亮介</td><td><a href="/articles/20210517a/">FlutterでMONETマーケットプレイスAPIを使ってみた</a></td></tr><tr><td>5月18日</td><td>村田靖拓</td><td><a href="/articles/20210519a/">Flutter ウィジェットテスト入門</a></td></tr></tbody></table><p>本記事では、Flutterの概要についてお伝えします。</p><h2 id="Flutter-モバイル・Web・デスクトップ対応のフレームワーク"><a href="#Flutter-モバイル・Web・デスクトップ対応のフレームワーク" class="headerlink" title="Flutter = モバイル・Web・デスクトップ対応のフレームワーク"></a>Flutter = モバイル・Web・デスクトップ対応のフレームワーク</h2><img src="/images/20210510a/logo_lockup_flutter_horizontal.png" alt="flutter horizontal logo" width="700px" height="196px"><p>FlutterはGoogle製フレームワークで、単一のソースコードでモバイル・Web・デスクトップ対応可能なアプリケーションを開発することができます。言語はDartで、こちらもGoogle製です。</p><p>今までは、iOS/Androidの両OSに対応したモバイルアプリケーション開発機能のみが安定版として提供されていましたが、「Flutter 2.0」のリリースで、Webアプリケーション開発機能がベータ版から安定版となりました。</p><p>Windows/Mac/Linux対応のデスクトップアプケーション開発機能は現在ベータ版で、「early release flag付き」で安定版でも利用可能となっています。<a href="https://medium.com/flutter/whats-new-in-flutter-2-0-fe8e95ecc65">Flutterの技術ブログ</a>によると、 デスクトップアプリケーションについても今年後半に安定版がリリースされるようです。</p><p>弊社では、モバイルアプリケーション開発においてFlutterの採用事例があります。</p><p>今後はあらゆるプラットフォームで選択肢となる可能性があり、今後が楽しみです。</p><h2 id="Googleトレンドによる国内・海外での動向"><a href="#Googleトレンドによる国内・海外での動向" class="headerlink" title="Googleトレンドによる国内・海外での動向"></a>Googleトレンドによる国内・海外での動向</h2><p>Googleトレンドで、Flutterとモバイルやクロスプラットフォーム対応フレームワークについて「日本」と「すべての国」で比較してみました。Flutter 1.0がリリースされた2018年12月を始点としています。Googleトレンド上では、国内ではじわじわとFlutterの検索が増えており、海外ではすでに他の言語・フレームワークを超えてFlutterが盛り上がっているようです。</p><ul><li>日本<img src="/images/20210510a/flutter_google_treand_in_japan.png" alt="Flutter Google Trend in Japan" width="1191" height="564" loading="lazy"></li><li>すべての国<img src="/images/20210510a/flutter_google_treand_in_global.png" alt="Flutter Google Trend in Globa" width="1178" height="560" loading="lazy"></li></ul><h2 id="特徴"><a href="#特徴" class="headerlink" title="特徴"></a>特徴</h2><p>Flutterの特徴として、公式サイトでは以下の3つが挙げられています。</p><p><strong>特徴①： 「高速ホットリロード」と「豊富なウィジェット」による高速なアプリ開発体験</strong><br>開発時にコードの変更をすぐにエミュレータや実機に反映することができ、フラストレーションなく開発を行うことができます。また、ボタンやリスト、カード、モーダルなど予め豊富なUI部品が用意されているので、簡単に画面を構築することができます。</p><p>フロントエンド開発の経験があまりない私は、モバイルアプリケーションにはさらに高いハードルを感じていましたが、Flutterでスマホアプリの画面をスムーズに作ることができ、とても魅力を感じました。</p><p><strong>特徴②： 表現力豊かで柔軟なユーザインタフェース</strong><br>開発者はエンドユーザの体験に重点を置いた機能を素早く開発することができます。<br>Flutterの階層的なアーキテクチャーにより、複雑なUIにも対応することが可能で、<br>非常に高速なレンダリングと表現力豊かで柔軟なデザインを実現できます。</p><p><strong>特徴③: ネイティブなパフォーマンス</strong><br>Flutterのコードはマシンコードにコンパイルされ、ネイティブアプリ同等のパフォーマンスを提供します。Flutterの独自レンダリングの仕組みもパフォーマンスが高い理由の1つのようです。</p><p><strong>公式サイトのトップページで、Flutterのソースコードを動かしてみることができるので、ぜひ触って体感してみてください！</strong></p><h2 id="Flutter-2-0"><a href="#Flutter-2-0" class="headerlink" title="Flutter 2.0"></a>Flutter 2.0</h2><p>今年3月にリリースされた「Flutter 2.0」は様々なアップデートがありますが、特に下記の2つが大きなトピックだと思います。</p><p><strong>・Webアプリケーション開発機能が安定版となった</strong><br><strong>・デスクトップアプリケーション開発機能がearly release付きで安定版で使用可能になった</strong></p><p>また、Googleの<a href="https://developers.googleblog.com/2021/03/announcing-flutter-2.html">Flutter 2.0リリース記事</a>には、各企業と協力している取り組みにも言及されており、とても興味深いです。詳細が気になる方は、ぜひご確認ください。</p><p><strong>・Canonicalと連携したLinuxデスクトップアプリケーション開発機能のサポート</strong><br><strong>・Microsoftと連携したWindowsアプリケーション開発と折りたたみデバイス(Surface Duo等)アプリケーション開発のサポート</strong><br><strong>・トヨタが車載システムにFlutterを導入する計画を発表</strong></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>Flutter 2.0がリリースされ、これから様々なプラットフォームで使われていくことが期待されます。</p><p>Flutter連載もぜひお楽しみください！</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210112/index.html" data-iframely-url="//cdn.iframe.ly/P7BPs3C?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2021年3月に「Flutter 2.0」のリリースが発表されました！&lt;/p&gt;
&lt;p&gt;そして、本ブログ初のDart/Flutterをテーマにした連載を行います。内容は次のようになっています。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;公開日&lt;/th&gt;
&lt;th</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="Flutter連載" scheme="https://future-architect.github.io/tags/Flutter%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Goでバッチ登録するときのイディオム</title>
    <link href="https://future-architect.github.io/articles/20210430b/"/>
    <id>https://future-architect.github.io/articles/20210430b/</id>
    <published>2021-04-29T15:00:01.000Z</published>
    <updated>2021-05-12T13:36:41.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>真野です。</p><p>個人利用など、ごく小さなサービスなどでない限り、複数件のレコードを一括でデータストア層へ登録する必要は出てくると思います。この時1件ずつループ処理で登録するのではなく、効率性などの観点で各データストアが提供する一括登録の仕組みを利用すると思います。</p><p>RDBであればバルク（Bulk Insert）とかバッチ（Batch Insert）の登録手段が存在すると思います。PostgreSQLであればCopy句で、OracleであればSQL*Loaderを使ってCSVを直接読み込ませる方法があります。</p><p>この記事ではCSVなどの一括登録ではなく、Batch Insertの実装について触れていきます。タイトルはバッチ登録ですがバッチ検索でもバッチ削除でも同じように役立つ内容かと思います。</p><h2 id="バッチ登録を行う側で気をつけること"><a href="#バッチ登録を行う側で気をつけること" class="headerlink" title="バッチ登録を行う側で気をつけること"></a>バッチ登録を行う側で気をつけること</h2><p>例えばAWS DynamoDBであればバッチ登録（<a href="https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html">BatchWriteItem</a>）では1操作で最大25項目までしか対応していません<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。（RDBであればこうした分かりやすい数値的な上限はないかと思いますが、クライアントとDBサーバ側の主にメモリ資源を使いすぎないように、例えば1000件ずつなど小分けして登録することが多いかと思います）</p><p>つまり、DynamoDBであれば120件のデータをBatchWriteItemで登録するためには、最低でも5回（25件×4回＋20件×1回）の操作が必要です。</p><p>こうした、1操作で登録しきれない件数のバッチ登録（Batch Put）するときの実装方法ですが、書く人によって色々種類があることに気が付きました。すこし面白かったので本記事ではまとめます。データストアはDynamoDBを利用しますが、どのデータストアでも伝わる部分があると思います。DynamoDBって何か気になって先に進めない方は、富山さんの<a href="/articles/20200818/">【入門】私を苦しめたDynamoDB</a>記事がおすすめです。</p><p>コードは<a href="https://github.com/ma91n/go-batch-put-idioms">こちら</a>にまとめました。</p><h2 id="各イディオムで用いる共通部分"><a href="#各イディオムで用いる共通部分" class="headerlink" title="各イディオムで用いる共通部分"></a>各イディオムで用いる共通部分</h2><p>各イディオムに入る前に永続化に用いる関数を用意します。ローカルでも動かせるようにLocakStackを利用します。これの実装は本題じゃないので読み飛ばし推奨です。</p><ul><li><code>func BatchWrite(ctx context.Context, writes[]Forum) error</code></li></ul><details><summary>BatchWriteの実装についての詳細(※👈クリックで開く。読み飛ばしてもOK)</summary><div><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LocalStackを用いるための初期化部分（読み飛ばしOK）</span></span><br><span class="line"><span class="keyword">var</span> dy = dynamodb.New(session.Must(session.NewSession(&amp;aws.Config&#123;</span><br><span class="line">Endpoint: aws.String(<span class="string">&quot;http://localhost:4566&quot;</span>),        <span class="comment">// LocalStack</span></span><br><span class="line">Region:   aws.String(endpoints.ApNortheast1RegionID), <span class="comment">// Tokyo Region</span></span><br><span class="line">&#125;)))</span><br></pre></td></tr></table></figure><p><code>dy</code> を用いて以下の永続化用の関数を用意します。25件以上であるときはエラーにしていること以外は、UnprocessedItemsの救済の為に少し処理を追加しています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 永続化関数（読み飛ばしOK）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BatchWrite</span><span class="params">(ctx context.Context, writes[]Forum)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(writes) &gt; <span class="number">25</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;batch write size is within 25 items&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">items := <span class="built_in">make</span>([]*dynamodb.WriteRequest, <span class="number">0</span>, <span class="built_in">len</span>(writes))</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> writes&#123;</span><br><span class="line">av, _ := dynamodbattribute.MarshalMap(v) <span class="comment">// エラーハンドリングは省略</span></span><br><span class="line">items = <span class="built_in">append</span>(items, &amp;dynamodb.WriteRequest&#123;</span><br><span class="line">PutRequest: &amp;dynamodb.PutRequest&#123;</span><br><span class="line">Item: av,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(items) &gt; <span class="number">0</span> &#123;</span><br><span class="line">out, err := dy.BatchWriteItemWithContext(ctx, &amp;dynamodb.BatchWriteItemInput&#123;</span><br><span class="line">RequestItems: <span class="keyword">map</span>[<span class="keyword">string</span>][]*dynamodb.WriteRequest&#123;</span><br><span class="line"><span class="string">&quot;forum&quot;</span>: items,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;batch write to %s: %w&quot;</span>, <span class="string">&quot;forum&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">items = <span class="built_in">append</span>(items[:<span class="number">0</span>] , out.UnprocessedItems[<span class="string">&quot;forum&quot;</span>]...) <span class="comment">// スライスを初期化して未処理のitemsがあれば追加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>永続化対象の <code>Forum</code> テーブルを示すモデルですが、AWS SDK for Goのドキュメントに書いていた構造です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 永続化対象のモデル（読み飛ばしOK）</span></span><br><span class="line"><span class="keyword">type</span> Forum <span class="keyword">struct</span> &#123;</span><br><span class="line">Name     <span class="keyword">string</span></span><br><span class="line">Category <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="①素朴なバッチ登録実装"><a href="#①素朴なバッチ登録実装" class="headerlink" title="①素朴なバッチ登録実装"></a>①素朴なバッチ登録実装</h2><p>本題のイディオムです。まずは素朴にループを回す実装です。何も考えずに実装すると多くの人が最初にこのコードを実装するのではないでしょうか？ <code>LoadForums</code> は<code>[]Forum</code>を返す、数百～数千件くらいのCSVを読み取るような処理をイメージください。</p><figure class="highlight go"><figcaption><span>素朴な実装</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line">loadForums := LoadForums() <span class="comment">// 数千件くらいのそこそこ大きいデータ</span></span><br><span class="line"></span><br><span class="line">batch := <span class="built_in">make</span>([]Forum, <span class="number">0</span>, <span class="number">25</span>)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> loadForums &#123;</span><br><span class="line"></span><br><span class="line">batch = <span class="built_in">append</span>(batch, v) <span class="comment">// 1行毎にスライスに追加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(batch) &gt;= <span class="number">25</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := BatchWrite(ctx, batch); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">batch = batch[:<span class="number">0</span>] <span class="comment">// スライスをクリア</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(batch) &gt; <span class="number">0</span> &#123;  <span class="comment">// 25の剰余が1~24の場合の救済</span></span><br><span class="line"><span class="keyword">if</span> err := BatchWrite(context.Background(), batch); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;finished&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最初のfor文で1行ずつスライスに要素を追加し、指定件数（今回だと25件）になったタイミングで <code>BatchWrite</code> を呼び出し永続化します。最後の if文のブロックでは、1件以上かつ25件未満のケースを救済しています。</p><p>便宜上、素朴と表現しましたが、IteratorパターンのようにHasNext/NextしかAPIを公開されておらず次のレコードの有無がわからない場合はこういったアプローチを取るしか無い場合もあるので、利用シーンも少なからずあるかと思います。</p><h2 id="②すこし進化したバッチ登録"><a href="#②すこし進化したバッチ登録" class="headerlink" title="②すこし進化したバッチ登録"></a>②すこし進化したバッチ登録</h2><p>さきほど書いた素朴なコードですが、少し冗長な部分があります。for文とif文の<code>BatchWrite</code>呼び出し部分が重複しており冗長ですね。ここをスッキリさせたバージョンが次です。</p><figure class="highlight go"><figcaption><span>すこしスッキリさせた実装</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx  := context.Background()</span><br><span class="line">forums := LoadForums()</span><br><span class="line"></span><br><span class="line">batch := <span class="built_in">make</span>([]Forum, <span class="number">0</span>, <span class="number">25</span>)</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> forums &#123;</span><br><span class="line"></span><br><span class="line">batch = <span class="built_in">append</span>(batch, v) <span class="comment">// 1行枚にスライスに追加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(batch) &gt;= <span class="number">25</span> || i == <span class="built_in">len</span>(forums) <span class="number">-1</span> &#123; <span class="comment">// 25個になったか、最終行の場合</span></span><br><span class="line"><span class="keyword">if</span> err := BatchWrite(ctx, batch); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">batch = batch[:<span class="number">0</span>] <span class="comment">// スライスをクリア</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;finished&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for文の中のif文で、<code>BatchWrite</code> を呼び出す条件を変えました。スライスが25件に達した時に加え、 <strong>最終行の場合にも</strong> 分岐を通すようにします。for文の後にあった <code>BatchWrite</code> の分岐を消せました。かなりスッキリです。</p><p>今回は、処理対象のレコードがすべてスライスになっている（メモリに読み込んでいる）状態ですが、これが巨大なCSVファイルを入力とするケースでは、1, 2の実装のように逐次的な処理をする必要があると思います。</p><h2 id="③少しエレガント実装"><a href="#③少しエレガント実装" class="headerlink" title="③少しエレガント実装"></a>③少しエレガント実装</h2><p>新規にスライスを宣言せず、読み取ったスライスから部分スライスを作成する実装です。少しトリッキーに見えるかもしれませんが、そんなに難しいことをしていないです。ポイントはループ変数 <code>i</code>　～ <code>i+25(end)</code> で部分スライスをループ毎に作るというアプローチでしょうか。</p><figure class="highlight go"><figcaption><span>スライスを新規に配置しないケース</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line">forums := LoadForums()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(forums); i += <span class="number">25</span> &#123;</span><br><span class="line">end := i + <span class="number">25</span></span><br><span class="line"><span class="keyword">if</span> end &gt; <span class="built_in">len</span>(forums) &#123;</span><br><span class="line">end = <span class="built_in">len</span>(forums)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := BatchWrite(ctx, forums[i:end]); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;finished&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>イメージしにくい方のために、バッチサイズを5、処理対象のレコード数が13での動作イメージを書きました。</p><img src="/images/20210430b/batch_slice.png" alt="バッチ化の動作イメージ" width="741" height="291" loading="lazy"><p>もしも、最初から <code>BatchWrite</code> したいレコードがスライスの状態にある（メモリに載っている）のであれば、この実装方法が可読性もそこまで落ちず、かつ最も効率が良さそうです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>バッチ登録のイディオムはいくつかパターンがある</li><li>メモリに載っている場合は、③のように元のスライスからサブスライスを作る方法が良さそう</li><li>入力データが巨大な場合は、①、②のような逐次的な処理を入れる必要が出てきそう</li></ul><p>Goだとgoroutineとチャネルを利用してこうした複数チャンクに分割しつつ、並列にデータ登録することも容易にできそうですね。そのあたりも機会があれば書いていこうと思います。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Group（TIG）は、「最先端、且つ先進的なテクノロジーのプロフェッショナル集団」、「プロジェクト品質と生産性の向上」、「自社サービス事業の立ち上げ」を主なミッションとする、技術部隊です。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html">https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchWriteItem.html</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="DynamoDB" scheme="https://future-architect.github.io/tags/DynamoDB/"/>
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="バッチ処理" scheme="https://future-architect.github.io/tags/%E3%83%90%E3%83%83%E3%83%81%E5%87%A6%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Go Conference 2021 Springに登壇しました</title>
    <link href="https://future-architect.github.io/articles/20210430a/"/>
    <id>https://future-architect.github.io/articles/20210430a/</id>
    <published>2021-04-29T15:00:00.000Z</published>
    <updated>2021-05-21T12:25:26.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、辻です。先日開催されました <a href="https://gocon.jp/">Go Conference 2021 spring</a> にTIGから渋川、辻の計2名が登壇しました。</p><img src="/images/20210430a/logo_text.png" alt="gopher忍者" width="1200" height="558"><blockquote><p>The Gopher character is based on the Go mascot designed by Renée French.</p></blockquote><p><a href="https://sendai.gocon.jp/">Go Conference’20 in Autumn</a>ではオンラインとオフラインのハイブリッドな構成でしたが、今回はGo Conference史上初となるフルオンラインでの開催となりました。今回のカンファレンスでは事前録画したビデオによる発表もサポートされていました。またオンラインでのリアルタイム登壇にあたって、リハーサルを始め手厚いサポートをいただき、安心して発表することができました。運営の皆様、ありがとうございました！</p><h3 id="実務で役立つTCPクライアントの作り方"><a href="#実務で役立つTCPクライアントの作り方" class="headerlink" title="実務で役立つTCPクライアントの作り方"></a>実務で役立つTCPクライアントの作り方</h3><p>発表資料は以下です。</p><script async class="speakerdeck-embed" data-id="340854fb6cf14990bfe4daa1d1c11efb" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>発表内容は、TCPクライアントを実装するときの考慮点をまとめたものです。普段HTTPなどを用いて通信するときはGoの標準ライブラリである <code>net/http</code> パッケージのAPIを使います。自前で <code>net</code> パッケージを使ってTCPクライアントを実装する必要はありません。しかし標準ライブラリではサポートされていないTCP上の独自のプロトコルで通信する必要がある場合や、通信したいプロトコルがOSSとして公開されているライブラリでは不足がある場合などは、自前でTCPクライアントを実装する必要があります。Go Conferenceの他のセッションでも、金融系のプロトコルである<a href="https://ja.wikipedia.org/wiki/ISO_8583">ISO8583</a>をTCPで扱っている例が紹介されており、実は身近なところで独自のTCPクライアントが必要になるかもしれません。</p><p>Goでは <code>net</code> パッケージを使うと簡単にTCPクライアントを実装できますが、プロダクションレディなTCPクライアントに仕上げていくにはいくつか考慮点があります。</p><ul><li>タイムアウト</li><li>コネクションプーリング</li><li>エラーハンドリング</li><li>リトライ</li></ul><p>といったポイントを紹介しています。</p><p>セッションを見ていただいた皆様、twitterでコメントくださった皆様、ありがとうございました！</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Goでソケットを直接触る機会、ありそうでなかなかないのでこういった知識の復習大事 <a href="https://twitter.com/hashtag/gocon?src=hash&amp;ref_src=twsrc%5Etfw">#gocon</a> <a href="https://twitter.com/hashtag/goconA?src=hash&amp;ref_src=twsrc%5Etfw">#goconA</a></p>&mdash; castaneai (@castanea) <a href="https://twitter.com/castanea/status/1385837483384995841?ref_src=twsrc%5Etfw">April 24, 2021</a></blockquote><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">コネクションプーリングしていてそのコネクションが悪くなっていることがあるって怖いね。<a href="https://twitter.com/hashtag/gocon?src=hash&amp;ref_src=twsrc%5Etfw">#gocon</a> <a href="https://twitter.com/hashtag/goconA?src=hash&amp;ref_src=twsrc%5Etfw">#goconA</a></p>&mdash; Kabo (@kabochapo) <a href="https://twitter.com/kabochapo/status/1385841331365310464?ref_src=twsrc%5Etfw">April 24, 2021</a></blockquote><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">TCP面白かったです！！！<a href="https://twitter.com/hashtag/gocon?src=hash&amp;ref_src=twsrc%5Etfw">#gocon</a> <a href="https://twitter.com/hashtag/goconA?src=hash&amp;ref_src=twsrc%5Etfw">#goconA</a></p>&mdash; luccafort (@luccafort) <a href="https://twitter.com/luccafort/status/1385841179648872452?ref_src=twsrc%5Etfw">April 24, 2021</a></blockquote><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、辻です。先日開催されました &lt;a href=&quot;https://gocon.jp/&quot;&gt;Go Conference </summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Cypress - 書きやすいテストの秘密と独自コマンドの実装</title>
    <link href="https://future-architect.github.io/articles/20210428d/"/>
    <id>https://future-architect.github.io/articles/20210428d/</id>
    <published>2021-04-27T15:00:04.000Z</published>
    <updated>2021-05-21T13:53:33.413Z</updated>
    
    <content type="html"><![CDATA[<p>@testing-library/cypressの存在を知らずに、それっぽいものを作ろうとしたときにいろいろ調査した記録です。Cypressにはテストコードが縦と横に短くなる工夫がされており、そのメカニズムにしたがった独自コマンドを実装するにはコツが必要です。</p><p>実装は次のところにありますが、@testing-library/cypressの方がメンテされているので、こちらは実際には使わないのをお勧めします。</p><p><a href="https://gitlab.com/osaki-lab/cypress-aria">https://gitlab.com/osaki-lab/cypress-aria</a></p><h1 id="Cypressのテストが縦横に短く書けるわけ"><a href="#Cypressのテストが縦横に短く書けるわけ" class="headerlink" title="Cypressのテストが縦横に短く書けるわけ"></a>Cypressのテストが縦横に短く書けるわけ</h1><p>CypressはWebDriver系(Selenium)やChrome DevTool Protocol系（Puppeteer)のツールとAPIの粒度が異なります。Seleniumはそもそもウェブサイトのタイトルに「Browser Automation Tool」とありますし、PuppeteerのAPIもそれに近いです。ソースコードに書かれているコードと、ブラウザ上で動作する挙動に違いはありません。</p><p>Cypressは一言で要素探索のAPI呼び出しといっても、検索とパターンマッチを裏で高速に繰り返します。デフォルトのタイムアウトは4秒で、その間、100mS間隔ぐらいでリクエストを繰り返します。これの何がよいかというと、最近のReactやVueやAngularといった仮想DOMやIncremental DOMなソリューションと相性が良い点です。</p><p>これらのフロントエンドでは、何かしらのボタン操作やその結果のAPIアクセスの結果で、非同期で画面が更新されます。いつ画面の更新処理が終わったのか通知が来るわけではありません。例えば、ウェブサーバーに問い合わせをして、その結果を受けて画面表示する場合、WebDriverやCDP系ツールでは自分でウェイトを置いて、0.1秒待つ、といったことをします。</p><p>Cypressは次のようなメソッドチェーンの命令になっており、<code>should(&quot;exist&quot;)</code>が成功するまでタイムアウト時間（デフォルト4秒）までの間、100mSぐらいことに<code>find(&quot;button.ok&quot;)</code>を繰り返します。<code>find()</code>の関数の呼び出し結果にこのDOM要素が入ってくるわけではなく、これらのAPIの裏で複雑な動きをします。そもそもJSなのに<code>await</code>を使わないで済むのはこれが実際の命令と一対一に対応していないからです。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.find(<span class="string">&quot;button.ok&quot;</span>).should(<span class="string">&quot;exist&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/images/20210428d/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-04-24_8.14.01.png" alt="Cypressがawaitを使わなくて済むことの説明図"></p><p>明示的なwaitを書かずに済むことで、処理時間と成功率のトレードオフを考えなくても済むというメリットがあります。</p><p>まず、逐次処理のパターンではテストが失敗しないためには余裕を持った大きめの待ち時間をテストコードに書く必要があります。テストの時間を短くしようとして50パーセンタイルな時間を書けば50%は失敗するということです。そして、たいてい99パーセンタイルは50パーセンタイルよりも遥かに大きな値であることが往々にしてあります。</p><p>Cypressでは成功次第次の処理が実行されるため、毎回待ち時間の最大値で待つのに比べて、実行時間が短縮されますし、待ち時間が足りなくてテストがランダムに壊れるのを防ぐためにウェイトを調整するといった不毛な作業が減ります。また、待ち時間を忘れてテストが失敗するというわかりにくい不具合も減ります。</p><p>また、ウェイトを自分で入れる必要性があまりないのでコードが縦に短くなります。表示を待つだけならNightwatchでもSeleniumできますが、待つための余計なコードを書く必要がなく、クリックなどもすべてリトライしてくれるところがCypressの良いところです。また、逐次処理ではなく、期待する状態の宣言なので、<code>await</code>などがいらないので横も短くなります。</p><p>ただし、waitが100%不要になるかというと、部分的には必要です。例えばレビューの星の数を設定して数が変化するテストを書こうとしているとします。星の数が設定されて更新されるまでにタイムラグがあるとすると、find()は変更前の状態で早々にマッチしてしまうため、処理が先に進んでしまいます。この場合はエラーになってしまうので処理の完了を待つ<code>cy.wait()</code>が必要となります。</p><p>それ以外に、E2Eテストとして信頼できるテストが書けるための機能としては、きちんと人が操作できるかどうかをCSSや属性も見てチェックしてくれる点もポイントです。ブラウザの見た目の完全なシミュレートではないのですが、テストが成功したのに手動でテストしたらバグっている、みたいなことが減ります。</p><ul><li>要素がvisibleなのか？</li><li>disabledな要素を操作しようとしていないか？</li><li>readonlyがついているのにタイプしようとしてないか？　</li><li>親要素のスクロールとかoverflowとかで隠れていないか？</li><li>他の要素に隠されていないか？</li></ul><h1 id="Cypressのリトライポリシーに従ったコマンドの作り方"><a href="#Cypressのリトライポリシーに従ったコマンドの作り方" class="headerlink" title="Cypressのリトライポリシーに従ったコマンドの作り方"></a>Cypressのリトライポリシーに従ったコマンドの作り方</h1><p>同じ複雑なセレクターを何度も繰り返し書くのを楽にしてあげるだけであれば、コマンドを作って、その中で<code>cy.get()</code>や<code>cy.find()</code>を使ってあげればOKです。</p><p>しかし、AまたBを取得、みたいなケースではうまく書かないと、Aの取得でタイムアウト、Bの取得でもタイムアウトと2倍時間がかかって、リトライの挙動が他のコマンドと違う動きになってしまいます。リトライポリシーに準拠するには、Cypressの作法に従って書く必要があります。</p><p>公式ドキュメントにはここを参上にするように、と書かれていますがピンポイントで参考にするのはちょっと難しい実装でした。これだけ見ても実装方法がよくわからなかったのでこれを読み解いた＆モダンなTypeScriptの書き方を紹介していきます。</p><p><a href="https://github.com/cypress-io/cypress-xpath/pull/12/files">https://github.com/cypress-io/cypress-xpath/pull/12/files</a></p><p>ここで紹介する以外にもボタンなどさまざまな要素取得を実装したのがこちらのパッケージです。</p><p><a href="https://gitlab.com/osaki-lab/cypress-aria">https://gitlab.com/osaki-lab/cypress-aria</a></p><p>ただ、@testing-library/cypressというもっと前から開発されているパッケージがあるので、これを使う必要はありませんので、参考実装としてみていただければと思います。</p><h2 id="これから作るコマンドの要件"><a href="#これから作るコマンドの要件" class="headerlink" title="これから作るコマンドの要件"></a>これから作るコマンドの要件</h2><p>aria属性に従って要素取得を実装したときは、「aria-labelがあればそれを名前とする、aria-labelledbyがあれば、参照先のDOMのテキストを名前とする、親が<code>&lt;label&gt;</code>で<code>for=</code>で自分の要素のIDがついていたらそちらを名前とする、みたいなOR条件で要素を取得します。</p><p>まずはコマンドの枠組みです。ここに追加していきます。</p><figure class="highlight ts"><figcaption><span>index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line">Cypress.Commands.add( <span class="comment">// ポイント1: コマンド登録</span></span><br><span class="line">    <span class="string">&#x27;ariaLink&#x27;</span>,</span><br><span class="line">    &#123; <span class="attr">prevSubject</span>: [<span class="string">&#x27;optional&#x27;</span>, <span class="string">&#x27;element&#x27;</span>, <span class="string">&#x27;document&#x27;</span>] &#125;,</span><br><span class="line">    aria</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ポイント2: asyncな関数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">async</span> <span class="title">ariaLink</span>(<span class="params">subject, selector, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> resolveValue = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> value = なんらかの処理();</span><br><span class="line">        <span class="keyword">return</span> cy.verifyUpcomingAssertions(value, options, &#123;</span><br><span class="line">            onRetry: resolveValue, <span class="comment">// ポイント3: 自分自身をretry対象にしつつassetする関数を定義</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> resolveValue()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ポイントはコード中に書いた3箇所です。</p><h2 id="コマンドのコンテキスト"><a href="#コマンドのコンテキスト" class="headerlink" title="コマンドのコンテキスト"></a>コマンドのコンテキスト</h2><p>Cypress.Commands.addを呼び出すところはすでに紹介しました。名前と実際に呼び出される関数以外に実行コンテキストのオプションがあります。</p><p>prevSubjectはcy.の直後に呼ばれるべきか、他のコマンドで絞り込んだあとに呼ぶのか、どちらを想定しているのかという指定です。trueなら他のコマンドの後限定、falseなら先頭限定、’optional’なら両方です。また、element/document/windowで、他のコマンドの結果としてもらえる要素を設定できます。</p><p><code>cy.get</code>は<code>&#123;prevSubject: false&#125;</code>, <code>cy.find</code>は<code>&#123;prevSubject: true&#125;</code>ですね。</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cypress.Commands.add(</span><br><span class="line">    <span class="string">&#x27;mycommand&#x27;</span>,</span><br><span class="line">    &#123; <span class="attr">prevSubject</span>: [<span class="string">&#x27;optional&#x27;</span>, <span class="string">&#x27;element&#x27;</span>, <span class="string">&#x27;document&#x27;</span>] &#125;,</span><br><span class="line">    mycommand</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="コンテキストの取得"><a href="#コンテキストの取得" class="headerlink" title="コンテキストの取得"></a>コンテキストの取得</h2><p>コマンドは次の形式をしています。前述のコンテキストの元になるのがsubjectです。selectorは1つの文字列です。追加のオプションはオブジェクトの形式で渡します。</p><figure class="highlight js"><figcaption><span>src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mycommand</span>(<span class="params">subject, selector, options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>前の設定でprevSubjectに”element”を渡したり、trueを設定した場合はsubjectからコンテキストを取り出します。コマンドの関数の先頭でcontextNodeを初期化します。要素探索を実装する場合はこのcontextNodeの中から探すようにしていけばOKです。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// コンテキストの取得</span></span><br><span class="line"><span class="keyword">let</span> contextNode;</span><br><span class="line"><span class="keyword">let</span> withinSubject = cy.state(<span class="string">&#x27;withinSubject&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (Cypress.dom.isElement(subject)) &#123;</span><br><span class="line">    contextNode = subject[<span class="number">0</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Cypress.dom.isDocument(subject)) &#123;</span><br><span class="line">    contextNode = subject;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (withinSubject) &#123;</span><br><span class="line">    contextNode = withinSubject[<span class="number">0</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    contextNode = cy.state(<span class="string">&#x27;window&#x27;</span>).document;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>コンテキストに対応しない（常にグローバルからの取得）であればここは書かなくても良いです。</p><h2 id="要素の取得"><a href="#要素の取得" class="headerlink" title="要素の取得"></a>要素の取得</h2><p>実際の要素の取得の処理はjQueryを使います。cy.find()やcy.get()は非同期なリトライ付きの取得でしたが、プリミティブな同期的な要素の取得はjQueryです。jQueryは動的なウェブサイトの作成ではいろいろネガティブな話も出てきていますが、DOMを変化させない、要素の取得に限定すればまだまだ便利です。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = Cypress.$(<span class="string">&#x27;a, *[role=&quot;link&quot;]&#x27;</span>, contextNode);</span><br><span class="line"><span class="keyword">if</span> (selector) &#123;</span><br><span class="line">    value = value.filter(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> self = Cypress.$(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// aria-label属性で検索</span></span><br><span class="line">        <span class="keyword">if</span> (self.attr(<span class="string">&#x27;aria-label&#x27;</span>) === selector) &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// aria-labelledby属性で検索</span></span><br><span class="line">        <span class="keyword">const</span> labelledBy = self.attr(<span class="string">&#x27;aria-labelledby&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (labelledBy &amp;&amp; Cypress.$(<span class="string">`#<span class="subst">$&#123;labelledBy&#125;</span>`</span>).text() === selector) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// テキストを見て検索</span></span><br><span class="line">        <span class="keyword">if</span> (self.text().trim() === selector) &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 画像のalt属性を見て検索</span></span><br><span class="line">        <span class="keyword">const</span> images = self.find(<span class="string">`img[alt=&quot;<span class="subst">$&#123;selector&#125;</span>&quot;]`</span>);</span><br><span class="line">        <span class="keyword">return</span> images.length &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここでは、4パターンの検索を実行して返す実装になっています。一つのセレクターの一筆書きで書けないような複雑な検索処理が行えます。</p><p>上記のresolveValue()の中身は最終的にはこうなります。</p><figure class="highlight ts"><figcaption><span>resolveValue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// コンテキストの取得</span></span><br><span class="line"><span class="keyword">let</span> contextNode;</span><br><span class="line"><span class="keyword">let</span> withinSubject = cy.state(<span class="string">&#x27;withinSubject&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (Cypress.dom.isElement(subject)) &#123;</span><br><span class="line">    contextNode = subject[<span class="number">0</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (Cypress.dom.isDocument(subject)) &#123;</span><br><span class="line">    contextNode = subject;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (withinSubject) &#123;</span><br><span class="line">    contextNode = withinSubject[<span class="number">0</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    contextNode = cy.state(<span class="string">&#x27;window&#x27;</span>).document;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jQueryを使って要素を取得</span></span><br><span class="line"><span class="keyword">let</span> value = Cypress.$(<span class="string">&#x27;a, *[role=&quot;link&quot;]&#x27;</span>, contextNode);</span><br><span class="line"><span class="keyword">if</span> (selector) &#123;</span><br><span class="line">    value = value.filter(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> self = Cypress.$(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// aria-label属性で検索</span></span><br><span class="line">        <span class="keyword">if</span> (self.attr(<span class="string">&#x27;aria-label&#x27;</span>) === selector) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// aria-labelledby属性で検索</span></span><br><span class="line">        <span class="keyword">const</span> labelledBy = self.attr(<span class="string">&#x27;aria-labelledby&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (labelledBy &amp;&amp; Cypress.$(<span class="string">`#<span class="subst">$&#123;labelledBy&#125;</span>`</span>).text() === selector) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// テキストを見て検索</span></span><br><span class="line">        <span class="keyword">if</span> (self.text().trim() === selector) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 画像のalt属性を見て検索</span></span><br><span class="line">        <span class="keyword">const</span> images = self.find(<span class="string">`img[alt=&quot;<span class="subst">$&#123;selector&#125;</span>&quot;]`</span>);</span><br><span class="line">        <span class="keyword">return</span> images.length &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cy.verifyUpcomingAssertions(value, options, &#123;</span><br><span class="line">    onRetry: resolveValue,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="ログ出力"><a href="#ログ出力" class="headerlink" title="ログ出力"></a>ログ出力</h2><p>最後ですが、必要に応じて探索中の情報のログを出しておくと、TestRunnerで問題追跡がしやすくなりますなぜ見つからなかったのか、途中経過はマッチしていたが、この情報でマッチしなくなったとか。宣言的な書き方は、失敗した時のフィードバックが弱いのでこの手のログを出してあげるのは良いと思います。</p><p>ログの出力はCypress.logで行います。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 成功したらログを出す</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> resolveValue()</span><br><span class="line"><span class="keyword">if</span> (options.log !== <span class="literal">false</span>) &#123;</span><br><span class="line">    Cypress.log(&#123;</span><br><span class="line">        name: <span class="string">&#x27;aria&#x27;</span>,</span><br><span class="line">        message: selector,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Cypressの中身で、書きやすく効率の良いテストを実現する重要な要素であるリトライポリシーについて紹介し、そのリトライポリシーに従ったプラグインの書き方も紹介しました。</p><ul><li>逐次処理なら通常のAPIを列挙すればOK</li><li>取得のロジックはasyncな関数に納める</li><li>jQueryを使って要素を取得</li><li>cy.verifyUpcomingAssertions()にとってきた要素を渡して後段のアサーションを実行</li><li>cy.verifyUpcomingAssertions()にはこの関数自身をonRetryに渡す<br>リトライは繰り返し行われるが、ループを自分で書くのではなく、CypressのAPIにonRetryに渡すことで再起的にループが行われる</li><li>要素の探索する場所（コンテキスト）の処理をしたり、ログを出せば完璧</li></ul><h1 id="補足"><a href="#補足" class="headerlink" title="補足"></a>補足</h1><p>本記事は、<a href="https://future.connpass.com/event/208056/presentation/">Future Tech Night #8</a>というイベントでお話した内容を記事化したものです。<br>同イベントの他の発表も記事として投稿されてますので、ぜひご覧ください！</p><ul><li><a href="/articles/20210428a/">Cypress入門～初心者でも簡単にE2Eテストが作れる～</a></li><li><a href="/articles/20210428b/">Cypress - 設定編</a></li><li><a href="/articles/20210428c/">保守・拡張をしやすいカプセル化したCypress</a></li><li>Cypress - 書きやすいテストの秘密と独自コマンドの実装（この記事です）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;@testing-library/cypressの存在を知らずに、それっぽいものを作ろうとしたときにいろいろ調査した記録です。Cypressにはテストコードが縦と横に短くなる工夫がされており、そのメカニズムにしたがった独自コマンドを実装するにはコツが必要です。&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="Cypress" scheme="https://future-architect.github.io/tags/Cypress/"/>
    
    <category term="E2Eテスト" scheme="https://future-architect.github.io/tags/E2E%E3%83%86%E3%82%B9%E3%83%88/"/>
    
    <category term="TechNight" scheme="https://future-architect.github.io/tags/TechNight/"/>
    
  </entry>
  
  <entry>
    <title>保守・拡張をしやすいカプセル化したCypress</title>
    <link href="https://future-architect.github.io/articles/20210428c/"/>
    <id>https://future-architect.github.io/articles/20210428c/</id>
    <published>2021-04-27T15:00:03.000Z</published>
    <updated>2021-05-21T13:53:47.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一行まとめ"><a href="#一行まとめ" class="headerlink" title="一行まとめ"></a>一行まとめ</h1><p>壊れやすい上に読みにくくなりがちなE2Eテストは、cypressのCustom Commandsなどでカプセル化すると読みやすくなおしやすい。</p><h1 id="CypressでE2Eテスト"><a href="#CypressでE2Eテスト" class="headerlink" title="CypressでE2Eテスト"></a>CypressでE2Eテスト</h1><p><a href="https://future.connpass.com/event/208056/presentation/">Future Tech Night #8</a> というイベントで、E2EテストをCypressで快適に行う方法を紹介しました。文字起こし兼補足として投稿します。</p><p>同イベントの他の発表も記事として投稿されてますので、こちらもご覧いただければ。</p><ul><li><a href="/articles/20210428a/">Cypress入門～初心者でも簡単にE2Eテストが作れる～</a></li><li><a href="/articles/20210428b/">Cypress - 設定編</a></li><li>保守・拡張をしやすいカプセル化したCypress(この記事)</li><li><a href="/articles/20210428d/">Cypress - 書きやすいテストの秘密と独自コマンドの実装</a></li></ul><h1 id="E2Eテストは壊れやすい"><a href="#E2Eテストは壊れやすい" class="headerlink" title="E2Eテストは壊れやすい"></a>E2Eテストは壊れやすい</h1><p>まずはE2Eテストとユニットテストを比較して、それぞれの特長をみてみましょう。</p><p>ユニットテストは基本的に開発するときに部品単位でつくられて、リポジトリにpushする前にサクッと動かしてテスト通るか確認する、という使い方をします。</p><p>対して、E2Eテストは画面単位でつくられて、ユーザの視点から画面を叩いて動くかどうかを検証するという使い方をします。つまり、ユーザの視点から見て、あからさまにおかしいなと感じるバグが見つかりやすい。結果としてクレームや問い合わせが減りやすくなります。</p><p><img src="/images/20210428c/Slide_-_6.png" alt="E2E、統合、ユニットテストのピラミッド図"></p><p>しかしながら、E2Eテストは壊れやすいのも特徴。</p><p>ユニットテストと比べてカバーする範囲が大きくなるので、どこかに変更があるとすぐ動かなくなってしまいます。例えば日本語の説明文に変更があったとかinputのnameが変わったとか、ちょっとしたことですぐ動かなくなってしまいます。</p><p>そして、画面の要素をidとかclassとかのセレクタで指定するため、どのセレクタがどのボタンを押してるのか追っていく必要があり、後から見たときに直しにくいのも難点。そのため、E2Eテストをつくるときは壊れることを前提に作っていくことが大事になってきます。特アジャイル的な開発をしているなら、機能追加の度にどこか動かなくなるという気持ちでいきましょう。</p><h1 id="壊れたときに直しやすいように可読性をあげる"><a href="#壊れたときに直しやすいように可読性をあげる" class="headerlink" title="壊れたときに直しやすいように可読性をあげる"></a>壊れたときに直しやすいように可読性をあげる</h1><p>頻繁に壊れるということはコードを読み返すことも多くなるということ。壊れても直しやすいようにテストコードの可読性を上げていくことがメンテナンスを続けていくために大事になっていきます。</p><p>具体的な例としてToDoアプリを考えてみましょう。<br>Webアプリのチュートリアルによく出てくる、ToDoの追加と削除ができるページに対して Cypressでテストを行ってみます。<br><img src="/images/20210428c/image_10.png" alt="ToDoの追加と削除ができるページ"></p><p>このToDoアプリに対して追加と削除が正常に動作しているか確認するE2Eテストを書いていきましょう。「Todo1」「Todo2」「Todo3」を追加して、2つ目を削除、残ってるTodoを確認する、というテストをCypressで実現すると以下のようになります。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;add 3 todo and delete middle todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// todo1を追加</span></span><br><span class="line">   cy.get(<span class="string">&#x27;#new-todo&#x27;</span>)</span><br><span class="line">     .type(<span class="string">&#x27;todo1&#x27;</span>).should(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;todo1&#x27;</span>)</span><br><span class="line">     .type(<span class="string">&#x27;&#123;enter&#125;&#x27;</span>, &#123; <span class="attr">delay</span>: <span class="number">100</span> &#125;);</span><br><span class="line">   cy.get(<span class="string">&#x27;#new-todo&#x27;</span>).should(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">   cy.get(<span class="string">&#x27;.todo-item&#x27;</span>).contains(<span class="string">&#x27;todo1&#x27;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// todo2を追加</span></span><br><span class="line">   cy.get(<span class="string">&#x27;#new-todo&#x27;</span>)</span><br><span class="line">     .type(<span class="string">&#x27;todo2&#x27;</span>).should(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;todo2&#x27;</span>)</span><br><span class="line">     .type(<span class="string">&#x27;&#123;enter&#125;&#x27;</span>, &#123; <span class="attr">delay</span>: <span class="number">100</span> &#125;);</span><br><span class="line">   cy.get(<span class="string">&#x27;#new-todo&#x27;</span>).should(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">   cy.get(<span class="string">&#x27;.todo-item&#x27;</span>).contains(<span class="string">&#x27;todo2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// todo3を追加</span></span><br><span class="line">   cy.get(<span class="string">&#x27;#new-todo&#x27;</span>)</span><br><span class="line">     .type(<span class="string">&#x27;todo3&#x27;</span>).should(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;todo3&#x27;</span>)</span><br><span class="line">     .type(<span class="string">&#x27;&#123;enter&#125;&#x27;</span>, &#123; <span class="attr">delay</span>: <span class="number">100</span> &#125;);</span><br><span class="line">   cy.get(<span class="string">&#x27;#new-todo&#x27;</span>).should(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">   cy.get(<span class="string">&#x27;.todo-item&#x27;</span>).contains(<span class="string">&#x27;todo3&#x27;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 2つ目を削除</span></span><br><span class="line">   cy.get(<span class="string">&#x27;.todo-item:nth(1)&#x27;</span>).contains(<span class="string">&#x27;DEL&#x27;</span>).click();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 残アイテムの確認</span></span><br><span class="line">   cy.get(<span class="string">&#x27;.todo-item&#x27;</span>).contains(<span class="string">&#x27;todo1&#x27;</span>);</span><br><span class="line">   cy.get(<span class="string">&#x27;.todo-item&#x27;</span>).contains(<span class="string">&#x27;todo2&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>);</span><br><span class="line">   cy.get(<span class="string">&#x27;.todo-item&#x27;</span>).contains(<span class="string">&#x27;todo3&#x27;</span>);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>Cypressを使ったことない、という方でも上のコードが何をしているかがなんとなくはわかってもらえるかなと。それくたいCypressの学習コストは低め。jQueryやCSSなどをかじっていてDOM要素を指定する知識があれば、Webアプリのベテランでなくてもすぐに書けるかなと思っています。</p><p>しかしながら、DOM要素を指定するためにセレクタを書いていくと、段々と読みにくいコードになっていきます。</p><p>例えば、動的に追加された要素やインポートした外部ライブラリのDOM要素を指定する際に、<code>nth</code> や <code>&gt;</code> などで掘っていって指定する複雑なセレクタが書かれがちになります。そうすると後で見返したときに、どこをどう直せばテストが通るようになるのか判断するために画面のDOMと見比べて追っていく必要が出てきます。</p><p>後で見返したときにわかりやすいように、テストコードの可読性をあげていきたい。</p><p>もちろん、コメントで 「ToDoを追加する」「ToDoを削除する」と書いて 分割してまとめておくのも見やすくする一つの案なのですが、Cypressの場合、Custom Commandsを使うと、分割して見やすくしたコードをカプセル化し、より読みやすいコードに仕立て上げることができます。</p><h1 id="Custom-Commands"><a href="#Custom-Commands" class="headerlink" title="Custom Commands"></a>Custom Commands</h1><p>Custom Commands、名前の通り自分でコマンドをつくれるという機能です。<br><a href="https://docs.cypress.io/api/cypress-api/custom-commands">https://docs.cypress.io/api/cypress-api/custom-commands</a></p><p>自分の欲しいコマンドを cy.containsやcy.getといったCypressに用意されているコマンドと同じように作ることができます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cypress.Commands.add(name, callbackFn)</span><br></pre></td></tr></table></figure><p>このCustom Commandsで上記のTodoアプリのテストを整理してみましょう。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">it(<span class="string">&#x27;add 3 todo and delete middle todo&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// todo1を追加</span></span><br><span class="line">  cy.addTodo(<span class="string">&#x27;todo1&#x27;</span>);</span><br><span class="line">  <span class="comment">// todo2を追加</span></span><br><span class="line">  cy.addTodo(<span class="string">&#x27;todo2&#x27;</span>);</span><br><span class="line">  <span class="comment">// todo3を追加</span></span><br><span class="line">  cy.addTodo(<span class="string">&#x27;todo3&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2つ目を削除</span></span><br><span class="line">  cy.deleteTodo(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 残アイテムの確認</span></span><br><span class="line">  cy.get(<span class="string">&#x27;.todo-item&#x27;</span>).contains(<span class="string">&#x27;todo1&#x27;</span>);</span><br><span class="line">  cy.get(<span class="string">&#x27;.todo-item&#x27;</span>).contains(<span class="string">&#x27;todo2&#x27;</span>).should(<span class="string">&#x27;not.exist&#x27;</span>);</span><br><span class="line">  cy.get(<span class="string">&#x27;.todo-item&#x27;</span>).contains(<span class="string">&#x27;todo3&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>「ToDoを追加する」「ToDoを削除する」とコメントした箇所をまとめてカスタムコマンドにしました。<br>後から見返しやすいコードになりましたね。</p><p>cy.addTodoとcy.deleteTodoの実態は以下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./cypress/support/commands.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// TODOの追加 cy.addTodo(&#x27;todo1&#x27;);</span></span><br><span class="line">Cypress.Commands.add(<span class="string">&#x27;addTodo&#x27;</span>, <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">&#x27;#new-todo&#x27;</span>)</span><br><span class="line">    .type(value).should(<span class="string">&#x27;have.value&#x27;</span>, value)</span><br><span class="line">    .type(<span class="string">&#x27;&#123;enter&#125;&#x27;</span>, &#123; <span class="attr">delay</span>: <span class="number">100</span> &#125;);</span><br><span class="line">  cy.get(<span class="string">&#x27;#new-todo&#x27;</span>).should(<span class="string">&#x27;have.value&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  cy.get(<span class="string">&#x27;.todo-item&#x27;</span>).contains(value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// TODOの削除 cy.deleteTodo(0);</span></span><br><span class="line">Cypress.Commands.add(<span class="string">&#x27;deleteTodo&#x27;</span>, <span class="function">(<span class="params">nth</span>) =&gt;</span> &#123;</span><br><span class="line">  cy.get(<span class="string">`.todo-item:nth(<span class="subst">$&#123;nth&#125;</span>)`</span>).contains(<span class="string">&#x27;DEL&#x27;</span>).click();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>addTodoは共通部分をまとめたのですっきり書けるようになったパターン、deleteTodoは <code>todo-item:nth</code> という画面のDOMを追っていかないと何してるか理解しにくい部分にCustom Commandsとして名前をつけてあげることで後から読み返しやすくなるというパターンです。</p><p>ひとつCustom Commandsをつくるといろんな場所で似たような操作を簡単に書けるようになります。</p><p>お気づきの通り、このCustom CommandsはReactやVueといったコンポーネント指向のライブラリと相性抜群。</p><p>書くのも簡単になり、読むときも理解しやすい。同じ処理が別のspecファイルにあるというときもコピペせずに済む。そして、コンポーネントに変更があった場合もCustom Commandsだけ修正すればOK、という場面が増えます。</p><h1 id="デメリット"><a href="#デメリット" class="headerlink" title="デメリット"></a>デメリット</h1><p>もちろんデメリットもあります。</p><p>テストケースの書き方が不味く「ToDoを追加する」という段階でinputがdisabledでTodoが追加できなかった、といったエラーが出た場合、specファイルの中ではなく、カスタムコマンドを定義しているファイルの該当部分を出します。そのため、どのaddTodoでエラーが起きたのかわかりづらい、呼び出し元がわかりにくいということがときたまあります。</p><p>そういった場合は引数をユニークなものにしておくと一旦の解決策になります。おなじTodoを3つ作成するのではなく、「todo1」・「todo2」・「todo3」としておくと、どのtodoを作成するタイミングでエラーが起きたのかが把握しやすくなります。</p><p>また、Custom Commandsの数が増えてきた際に名前の衝突が起きる可能性が高まります。こちらはある程度の命名規則があれば回避できるかなと思っています。以前登録したCustom Commandsが見つけやすいように <code>cypress\support\commands.js</code> を分割するのも手です。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>E2Eテストは壊れやすい上に読みにくくなりがちなので、CypressのCustom Commandsを上手く利用して、書きやすく読みやすく直しやすいテストコードにしていきましょう。</p><p>とはいえ、Cypressをまだ触ったことないよという方は、ここまで考えずまずは使ってみてください。containsとclickだけ覚えればそこそこのテストが書けます。</p><p>Cypressをしばらく使ってテストコード見返すのが辛くなり始めたら、Custom Commandsで一連の流れを固めてカプセル化するなどして、後から見返しやすいコードにできないか検討してみてください。</p><p>続いて、 <a href="/articles/20210428d/">Cypress - 書きやすいテストの秘密と独自コマンドの実装</a> 記事を参照ください。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一行まとめ&quot;&gt;&lt;a href=&quot;#一行まとめ&quot; class=&quot;headerlink&quot; title=&quot;一行まとめ&quot;&gt;&lt;/a&gt;一行まとめ&lt;/h1&gt;&lt;p&gt;壊れやすい上に読みにくくなりがちなE2Eテストは、cypressのCustom Commandsなどでカプセル化する</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="Cypress" scheme="https://future-architect.github.io/tags/Cypress/"/>
    
    <category term="E2Eテスト" scheme="https://future-architect.github.io/tags/E2E%E3%83%86%E3%82%B9%E3%83%88/"/>
    
    <category term="TechNight" scheme="https://future-architect.github.io/tags/TechNight/"/>
    
  </entry>
  
  <entry>
    <title>Cypress - 設定編</title>
    <link href="https://future-architect.github.io/articles/20210428b/"/>
    <id>https://future-architect.github.io/articles/20210428b/</id>
    <published>2021-04-27T15:00:02.000Z</published>
    <updated>2021-05-21T13:53:58.802Z</updated>
    
    <content type="html"><![CDATA[<p>Cypressの設定周りについて紹介します。</p><p>何も手を加えないデフォルトでも動作します。</p><h1 id="Cypressの設定"><a href="#Cypressの設定" class="headerlink" title="Cypressの設定"></a>Cypressの設定</h1><h2 id="フォルダ構成とTypeScript化"><a href="#フォルダ構成とTypeScript化" class="headerlink" title="フォルダ構成とTypeScript化"></a>フォルダ構成とTypeScript化</h2><p>まず、Cypressのデフォルトのフォルダ構成がこちらです。何も指定しないと、プロジェクトルートにcypressフォルダがあって、その中に関連ファイル（テストケース、プラグインなど）が置かれるのが基本パターンです。</p><figure class="highlight text"><figcaption><span>Cypressのフォルダ構成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cypress</span><br><span class="line">├── fixtures</span><br><span class="line">│   └── users.json</span><br><span class="line">├── integration</span><br><span class="line">│   ├── textbox.html</span><br><span class="line">│   └── textbox.spec.js</span><br><span class="line">├── plugins</span><br><span class="line">│   └── index.js</span><br><span class="line">├── screenshots</span><br><span class="line">├── support</span><br><span class="line">│   ├── commands.js</span><br><span class="line">│   └── index.js</span><br><span class="line">└── videos</span><br></pre></td></tr></table></figure><p>Cypressは<code>npm install cypress</code>で必要なツールをまとめてインストールできます。</p><p>初回実行時にこの<code>cypress</code>フォルダと<code>cypress.json</code>が作られます。設定やテスト、ヘルパー関数などはこの雛形の中に書いていきます。</p><p>デフォルトで生成される設定ファイルはJavaScriptのコードですが、TypeScript化にも対応しています。TS化したいときは次のことを行います。</p><ul><li><code>npm i -D typescript @types/node</code></li><li><code>tsconfig.json</code>を作成</li></ul><p><code>tsconfig.json</code>は通常、プロジェクトのルートの<code>package.json</code>があるフォルダに置きますが、プロジェクトの<code>tsconfig.json</code>とは別にこのフォルダ内にCypress専用<code>tsconfig.json</code>を置くこともできます。</p><p>あとはこのフォルダ内部の<code>.js</code>を<code>.ts</code>に置換していけば型が書けます。</p><p>↓細かいところはこちらを参照してください。</p><p><a href="https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/fundamentals__typescript">https://github.com/cypress-io/cypress-example-recipes/tree/master/examples/fundamentals__typescript</a></p><p>今時はみんなTypeScript使うでしょうし、この説明では全部TS化する前提で話を進めます。といってもJSのまま使うにはデフォルトのままで大丈夫なので、特に考慮することなくこのエントリーの説明を読み進めていけます。</p><h2 id="テストのカスタマイズポイント"><a href="#テストのカスタマイズポイント" class="headerlink" title="テストのカスタマイズポイント"></a>テストのカスタマイズポイント</h2><p>テスト時の動作のカスタマイズ項目は次のページに書かれています。動画の自動のキャプチャ機能や失敗時のスクリーンショット機能をオフにしたり、テストランナーでの実行時にテストファイルの変更を監視して自動テストを行う（watch）機能を無効にしたり、フォルダ位置を変えたりといったことが変更可能です。</p><p><a href="https://docs.cypress.io/guides/references/configuration">https://docs.cypress.io/guides/references/configuration</a></p><p>基本的に5種類のカスタマイズ方法があります。</p><ul><li>ルートのcypress.json</li><li>cypress.env.json</li><li>環境変数</li><li>CLIのオプション</li><li>cypress/plugins/index.ts</li></ul><p>現在のテストが読み込んでいる設定が、どの項目から読み込まれたのかはテストランナーのSettingsメニューで確認できます。</p><p><img src="/images/20210428b/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-04-07_23.44.00.png" alt="CypressテストランナーのSettingsメニュー"></p><p><code>env</code>の項目で設定した値は、テストコード中からアクセスできるため、テストのパラメータを外部から変更できるようにすることもできます。</p><h2 id="フォルダ構成の詳細"><a href="#フォルダ構成の詳細" class="headerlink" title="フォルダ構成の詳細"></a>フォルダ構成の詳細</h2><p>最初にデフォルトのフォルダ構成を紹介しました。それぞれのフォルダの役割は次の通りです。</p><ul><li>fixtures: テスト中で使いたいデータファイル置き場</li><li>integration: テストコード置き場</li><li>plugins: プラグインの登録や設定の変更</li><li>support: ちょっとしたコマンド追加など</li><li>videos: 実行中に記録された動画ファイル置き場</li><li>screenshots: 実行中に記録されたスクリーンショット置き場</li></ul><p>これらのフォルダは<code>cypress.json</code>でフォルダの位置を変えたりできます。また、最初に呼び出される設定ファイル（基本は<code>cypress/plugins/index.js</code>、このパスも変更できる)でフォルダ構成の変更もできます。</p><p>詳しくは設定の説明を読むと良いでしょう。</p><p><a href="https://docs.cypress.io/guides/references/configuration">https://docs.cypress.io/guides/references/configuration</a></p><h2 id="cypress-support-index-ts"><a href="#cypress-support-index-ts" class="headerlink" title="cypress/support/index.ts"></a>cypress/support/index.ts</h2><p>npm installしたプラグインのうち、ただコマンドを足すだけのシンプルなものを登録したり、自作のコマンドの登録をしたりする設定置き場です。コマンドはcommands.tsに書いて、このファイルにはimport文を書いて参照する方法が一般的なようです（という構成の設定がデフォルトで作られる）。</p><figure class="highlight ts"><figcaption><span>cypress/support/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;@testing-library/cypress/add-commands&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@cypress/code-coverage/support&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./commands&quot;</span></span><br></pre></td></tr></table></figure><p>コマンドの作り方は後述します</p><h2 id="cypress-plugins-index-ts"><a href="#cypress-plugins-index-ts" class="headerlink" title="cypress/plugins/index.ts"></a>cypress/plugins/index.ts</h2><p>Cypress内部のイベントを受け取る必要のあるプラグインの初期化や、設定の上書きなどを行います。</p><figure class="highlight ts"><figcaption><span>cypress/plugins/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = (</span><br><span class="line">        on: Cypress.PluginEvents,</span><br><span class="line">        config: Cypress.PluginConfigOptions</span><br><span class="line">    ) =&gt; &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&quot;@cypress/code-coverage/task&quot;</span>)(on, config)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        ...config,</span><br><span class="line">        integrationFolder: <span class="string">&quot;cypress/specs&quot;</span>,</span><br><span class="line">     &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>最低限のcypress.jsonは空でもいいのですが、baseUrlだけ設定しておくと、cy.visit()とかcy.request()のパスにprefixとしてつくので、テストコードがポートやホスト名にハードコードされなくなります。ちょっと変更に強くなります。ローカルと、リモートのテストの両方で使う場合はbaseUrlを外から変えればいけるようになるので、基本的には設定しておくべきでしょう。npm run serveなどで起動するテストサーバーや、go runで起動するサーバーに向けておきます。</p><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;http://localhost:3000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vue-cliで自動生成すると、ちょっと違うフォルダに入ります。また、vue-cliで実行した場合は、npm run serveして、そのURLをcypressに渡すところまでやってくれるので便利です。</p><p>Cypressの設定は画面からみれます。どこで設定された値なのかが一目瞭然ですごく親切。</p><p>Cypressが起動時に読み込むファイルは次の通り</p><ol><li>cypress.jsonでフォルダの場所などを読み取り</li><li>pluginとsupportの読み込み(設定なければcypress/plugins/index.jsとcypress/support/index.jsなど)</li><li>テストケースの読み込み(設定なければcypress/integrations)</li><li>openモードでなければそのままテストを実行、openモードの場合はIDEを起動</li></ol><p>pluginsというフォルダ名ではあるものの、設定を変えたりします。次のサンプルはコードカバレッジを有効化しつつ、テストの置き場のフォルダを変更しています。WebPackの設定を変更したりするのはこちらです。</p><figure class="highlight ts"><figcaption><span>cypress/plugins/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">on: Cypress.PluginEvents, config: Cypress.PluginConfigOptions</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&quot;@cypress/code-coverage/task&quot;</span>)(on, config)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        ...config,</span><br><span class="line">        integrationFolder: <span class="string">&quot;cypress/specs&quot;</span>,</span><br><span class="line">     &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>これら以外にも、環境変数で値を渡したり、コマンドライン引数で値を設定したりといった機能があります。</p><h2 id="Vue-js以外の実行の流れ"><a href="#Vue-js以外の実行の流れ" class="headerlink" title="Vue.js以外の実行の流れ"></a>Vue.js以外の実行の流れ</h2><p>基本的な流れは次の通りです。</p><ol><li>E2Eテスト対象のサーバーを起動します<br>ウェブサーバーやフロントエンドの開発サーバーが該当します。静的HTMLならホスティングもCypressだけでできます。4/6にリリースされた7.0ではStorybook的にReact/Vueコンポーネントのテストが<br>直接書ける</li><li><code>cypress run</code>でヘッドレス実行、あるいは、<code>cypress open</code>でGUI Test Runnerを起動してテストします。<br>cypress runでヘッドレス実行、あるいは、cypress openでGUI Test Runnerを起動してテストします。テストの中でcy.visit(“接続先URL”)で1で起動したテスト対象のページにアクセスします。cypress.jsonなどでbaseUrlを指定すれば、ここからの相対パスで次のようにテストをシンプルにできます。また、ローカル、stg環境など複数の環境でテストを再利用したい場合に便利です。</li></ol><ul><li><code>cy.visit(“http://localhost:3000/”)</code> # 愚直に書く</li><li><code>cy.visit(“/”)</code>                      # baseUrlからの相対パス</li></ul><figure class="highlight json"><figcaption><span>cypress.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;baseUrl&quot;</span>: <span class="string">&quot;http://localhost:3000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Vue-jsの実行の流れ"><a href="#Vue-jsの実行の流れ" class="headerlink" title="Vue.jsの実行の流れ"></a>Vue.jsの実行の流れ</h2><p>CypressをVue.jsのプロジェクトに導入するのは簡単です。</p><p>インストール時にE2Eを選択し、その後の選択でCypressを選択するとインストールされます。また、作成済みのプロジェクトであれば<code>vue add e2e-cypress</code>を実行すれば追加できます。</p><p>Vueの場合、テストはすべてtest/e2e以下に格納するようになっています。</p><p>実行すると開発サーバー実行と、それをbaseUrlに設定して起動するところまでvue-cli-serviceがやってくれます。</p><h2 id="CypressとJest"><a href="#CypressとJest" class="headerlink" title="CypressとJest"></a>CypressとJest</h2><p>Cypressはmocha + chaiベースでテストを書きます。ユニットテストで現在一番人気はJestですが、Jestとmocha, chaiでキーワードがいろいろ衝突します。特にchaiとJestのexpectが大きいです。全然違うなら問題ないのですが、似ているようで微妙にメソッドが違ったりと、微妙な差のため、「こちらは動くのに、こちらは全然動かない」という微妙な落とし穴位になりがちです。</p><p>公式サイトで紹介されている方法はプロジェクトのルートのtsconfig.jsonと、cypress/tsconfig.jsonを使い分けて回避する方法です。まずルートの方のプロジェクトですが、プロジェクトに必要な設定と、型に”jest”を入れておきます。また、<code>include</code>でCypress以外の設定も入れておきましょう。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; expect &#125; <span class="keyword">from</span> <span class="string">&#x27;@jest/globals&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>/tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es5&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;lib&quot;</span>: [<span class="string">&quot;ES2015&quot;</span>, <span class="string">&quot;DOM&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;types&quot;</span>: [<span class="string">&quot;jest&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;include&quot;</span>: [<span class="string">&quot;src/*.ts&quot;</span>],</span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span>: [<span class="string">&quot;src/*.test.ts&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらはCypress側の設定です。<code>extends</code>で親フォルダの設定を読み込み、必要な箇所だけ追加します。ここではtypesに<code>cypress</code>を足しています。これで”jest”との衝突を防げます。</p><figure class="highlight json"><figcaption><span>/cypress/tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;extends&quot;</span>: <span class="string">&quot;../tsconfig.json&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;types&quot;</span>: [<span class="string">&quot;cypress&quot;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;include&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;../node_modules/cypress&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./**/*.ts&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CypressのMochaはGUIのテストにしか使ってはいけないわけではなく、単純なユニットテストに使っても良いといえば良いのですが、動画撮影機能とか失敗時のスクリーンショット機能のせいでシンプルなテストほどオーバーヘッドが大きい（全部オフにすれば普通になりますが）ですし、ふたつ使い分ける方が良いでしょう。</p><p>手元の環境ではJestとCypressのカバレッジを統合するのがうまくいかず、いっそのことCypressに寄せる、というのも考えたりはしたのですが、Node.js（というかElectron）の機能を使ったテストが実行できないなど、欠点もあって、それが受容できるかどうか次第ですね。</p><p>簡単に済ませるのであれば、<code>expect()</code>のmatcherの挙動が違うだけなので、cypressとjestを両方tsconfig.jsonに入れてしまって、明示的にimportしてあげれば2つ作らなくても対応可能です。仕事のプロジェクトではこれを書くようにしちゃっています。</p><h1 id="コマンドの作り方"><a href="#コマンドの作り方" class="headerlink" title="コマンドの作り方"></a>コマンドの作り方</h1><p>テストコードを書いていると、同じような命令が繰り返し登場することがあります。例えば、ログインを毎回行っている、特定のページに遷移する、データの登録を行ってデータがある前提のテストに備えるなどなど。</p><p>テストはなるべく構造化しないで、愚直に書いた方が良いことの方が多いのですが、準備コードが長くなりすぎるのもフォーカスがぼやけてしまってよくないです。その場合にテストコードを短くして見通しを改善する方法は主に2つあります。</p><ul><li>同一のファイルのテスト間ではbeforeEach()を使って実装をまとめる</li><li>ファイルを跨いだり、横断的に使う場合はカスタムコマンドを作成する</li></ul><p>ここでは後者の方法について軽く紹介します。ただし、短くしすぎて見にくくならないようにすることが大事です。テストコードの読解のためにたくさんの関数の中身を調べないといけない、というのはよくないテストコードです。多少冗長でも読みやすくて意味が把握しやすければ問題ありません。またこの独自コマンドを活用する方法はびろうさんが詳しく紹介してくれます。また、たんなる公開APIの列挙ではない、よりCypressの内部に突っ込んだ独自コマンドの実装方法も別のエントリーで紹介します。</p><p>追加コマンドの定義箇所はsupportフォルダ以下です。</p><p>npmインストールした追加のコマンドを増やすのは<code>support/index.ts</code>に書きます。プロジェクトで作成するコマンドはここから読み込まれる<code>command.ts</code>に入れておきます。</p><figure class="highlight ts"><figcaption><span>cypress/support/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;@testing-library/cypress/add-commands&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@cypress/code-coverage/support&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./commands&quot;</span></span><br></pre></td></tr></table></figure><p>コマンドはログインだったり、一連の動作を連続実行するのに便利な仕組みです。中ではcypressのテストを書くための一般的なAPIを呼び出します。次のコマンドはログインを一発で行うコマンドを追加した例です。</p><figure class="highlight ts"><figcaption><span>cypress/support/commands.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cypress.Commands.add(<span class="string">&quot;login&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  cy.visit(<span class="string">&quot;/&quot;</span>, &#123; <span class="attr">timeout</span>: <span class="number">10000</span> &#125;);</span><br><span class="line">  cy.url().should(<span class="string">&quot;match&quot;</span>, <span class="regexp">/auth/</span>);</span><br><span class="line">  cy.get(<span class="string">&quot;#user&quot;</span>).type(<span class="string">&quot;testuser1&quot;</span>);</span><br><span class="line">  cy.get(<span class="string">&quot;#passwd&quot;</span>).type(<span class="string">&quot;testuser1-password&quot;</span>);</span><br><span class="line">  cy.get(<span class="string">&quot;#login&quot;</span>).click();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>追加したコマンドは、cyオブジェクトの追加メソッドのように見えます。このままではTypeScriptから識別されず、TypeScriptのコンパイルでエラーになってしまいますし、コード補完もできませんので、型定義ファイルを用意します。</p><figure class="highlight ts"><figcaption><span>cypress/support/index.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;cypress&quot; /&gt;</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> Cypress &#123;</span><br><span class="line">  <span class="keyword">interface</span> Chainable &#123;</span><br><span class="line">    login();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Cypressの設定周りの構造と初期化周りの挙動と、コマンドの登録について簡単に紹介しました。</p><h1 id="補足"><a href="#補足" class="headerlink" title="補足"></a>補足</h1><p>本記事は、<a href="https://future.connpass.com/event/208056/presentation/">Future Tech Night #8</a>というイベントでお話した内容を記事化したものです。<br>同イベントの他の発表も記事として投稿されてますので、ぜひご覧ください！</p><ol><li><a href="/articles/20210428a/">Cypress入門～初心者でも簡単にE2Eテストが作れる～</a></li><li>Cypress - 設定編（この記事です）</li><li><a href="/articles/20210428c/">保守・拡張をしやすいカプセル化したCypress</a></li><li><a href="/articles/20210428d/">Cypress - 書きやすいテストの秘密と独自コマンドの実装</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Cypressの設定周りについて紹介します。&lt;/p&gt;
&lt;p&gt;何も手を加えないデフォルトでも動作します。&lt;/p&gt;
&lt;h1 id=&quot;Cypressの設定&quot;&gt;&lt;a href=&quot;#Cypressの設定&quot; class=&quot;headerlink&quot; title=&quot;Cypressの設定&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="Cypress" scheme="https://future-architect.github.io/tags/Cypress/"/>
    
    <category term="E2Eテスト" scheme="https://future-architect.github.io/tags/E2E%E3%83%86%E3%82%B9%E3%83%88/"/>
    
    <category term="TechNight" scheme="https://future-architect.github.io/tags/TechNight/"/>
    
  </entry>
  
  <entry>
    <title>Cypress入門～初心者でも簡単にE2Eテストが作れる～</title>
    <link href="https://future-architect.github.io/articles/20210428a/"/>
    <id>https://future-architect.github.io/articles/20210428a/</id>
    <published>2021-04-27T15:00:01.000Z</published>
    <updated>2021-05-21T13:54:09.103Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。踊るエンジニア、木戸俊輔です。</p><p>2021年4月で社会人2年目になりましたが、総出社回数は3回です。コロナで外出できないのは残念ですが、自宅で安全に業務に取り組むことができる現代の環境には感謝ですね。</p><p>さて、皆さんは普段どのようにE2Eテストを行っていますか？忍耐強く手動でポチポチ画面を触って…というのはなかなかにしんどいですよね。自動化ツールを使って楽したいけど難しくてよくわからない、という方もいらっしゃると思います。</p><p>本記事では、テスト自動化ツールを全く使ったことのなかった私が、テスト自動化ツールである<a href="https://www.cypress.io/">Cypress</a>の導入から基本的な使い方までをご紹介していきます。</p><p>対象：</p><ul><li>Webサービスのテスト自動化に興味がある人</li><li>自動テスト初心者</li><li>Cypressを触ってみたい人</li></ul><h2 id="テストは大事"><a href="#テストは大事" class="headerlink" title="テストは大事"></a>テストは大事</h2><p>当たり前ですが、システムを納品/リリースする際、動作や性能のテストは必須です。もしテストが不十分だと、バグや想定外の挙動が発生し、</p><ul><li>システム納品先からの信頼消失</li><li>再開発のためにコスト増加</li><li>サービスの廃止</li></ul><p>などなど、恐ろしい事態に繋がる可能性があります。</p><h2 id="E2Eテストとは"><a href="#E2Eテストとは" class="headerlink" title="E2Eテストとは"></a>E2Eテストとは</h2><p>E2Eテストとは、「End To Endテスト」の略であり、ユーザが利用するのと同じようにシステム全体をテストします。</p><p>抜け漏れなくテストする必要があるため、かかる労力は膨大です。また、テスト者の未成熟などによりテストが正しく行われない可能性もあります。</p><p>Cypressを用いて自動化することで、コスト削減＆品質向上を狙います。</p><h1 id="Cypressとは"><a href="#Cypressとは" class="headerlink" title="Cypressとは"></a>Cypressとは</h1><p><a href="https://www.cypress.io/">Cypress</a>とはWebテスト用に構築されたJava Scriptライブラリです。</p><p><img src="/images/20210428a/image.png" alt="Cypressロゴ"></p><p>特徴として、以下のができます。</p><ul><li>単体テストからE2Eテストまで広く使える</li><li>テスト構築、実行、バグ検知まで全て行える</li><li>コマンドごとに画面のスナップショットを見返せる</li><li>テスト一連の様子をビデオとして保存できる</li><li>各種CIとの連携が可能である</li></ul><h2 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h2><p>Cypressによるテストを構築したいディレクトリ下で、以下のコマンドを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cypress</span><br></pre></td></tr></table></figure><p>これだけです。5~10分くらいで簡単にインストールできます。<br>（Java Scriptライブラリなので、node.jsはいれておいてください。）</p><h2 id="実行してみよう"><a href="#実行してみよう" class="headerlink" title="実行してみよう"></a>実行してみよう</h2><p>とりあえず実行してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx cypress open</span><br></pre></td></tr></table></figure><p>を実行すると、Cypressの管理画面が開きます。また、インストールしてから1回目の実行時には、いくつかのサンプルテストを生成してくれます。</p><p><img src="/images/20210428a/image_2.png" alt="サンプルテスト"></p><p>管理画面ではspecファイルごとにテストが並んでおり、実行したいファイルをクリックすると、記述されたテストが自動で実行されていきます。</p><p>試しに、サンプルテストの1つ、<code>actions.spec.js</code>を実行してみましょう。</p><p><img src="/images/20210428a/image_3.png" alt="actions.spec.jsの実行例"></p><p>画面右側で、Cypressが実際にどのようなWeb上操作を行っているかが確認できます。また、画面左側では、記述したテストの進行状況やチェック項目の可否が表示されています。失敗したテストがあれば、該当箇所をアラートで教えてくれます。</p><h2 id="Cypressの基本的な使い方"><a href="#Cypressの基本的な使い方" class="headerlink" title="Cypressの基本的な使い方"></a>Cypressの基本的な使い方</h2><p>Cypressではspecファイルにテストを記述していきます。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">context(<span class="string">&#x27;カテゴリ名&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  it(<span class="string">&#x27;シナリオ名1&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    Cypressコマンドによる処理入力</span><br><span class="line">             ┋</span><br><span class="line">  &#125;)</span><br><span class="line">  it(<span class="string">&#x27;シナリオ名2&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    Cypressコマンドによる処理入力</span><br><span class="line">             ┋</span><br><span class="line">  &#125;)</span><br><span class="line">             ┋</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>CypressではWeb上でのアクションに相当する様々なコマンドが用意されています。</p><p>ここでは、よく使う基本的なコマンドをいくつか紹介します。</p><h3 id="Webサイトを訪れる"><a href="#Webサイトを訪れる" class="headerlink" title="Webサイトを訪れる"></a>Webサイトを訪れる</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.visit(<span class="string">&#x27;URL&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="DOMを取得する"><a href="#DOMを取得する" class="headerlink" title="DOMを取得する"></a>DOMを取得する</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;DOMのタグ&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cy.contains(<span class="string">&#x27;探したい文字列&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>get()</code>と<code>contains()</code>どちらを使ってもDOMを取得することができます。</p><p><code>contains()</code>は、引数として与えた文字列を探してくれるので、非常に簡単に記述することができます。しかし、同画面上に対象の文字列が複数存在する場合や、表示される文字列が変更されうる場合には注意が必要です。</p><h3 id="DOMを操作する"><a href="#DOMを操作する" class="headerlink" title="DOMを操作する"></a>DOMを操作する</h3><p><code>get()</code>や<code>contains()</code>でDOMを取得し、DOMに対してコマンドを実行します。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cy.click()   <span class="comment">// クリック</span></span><br><span class="line"></span><br><span class="line">cy.type(<span class="string">&#x27;入力&#x27;</span>)    <span class="comment">// 文字入力</span></span><br></pre></td></tr></table></figure><p>例えば、「検索フォームに文字を打ち込んで検索する」操作は、</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy.get(<span class="string">&#x27;input[title=&quot;検索&quot;]&#x27;</span>).type(<span class="string">&#x27;Cypressの使い方&#x27;</span>);</span><br><span class="line">cy.contains(<span class="string">&#x27;Google 検索&#x27;</span>).click();</span><br></pre></td></tr></table></figure><p>などといった記述で実行することができます。</p><h3 id="チェックする"><a href="#チェックする" class="headerlink" title="チェックする"></a>チェックする</h3><p>画面の表示は適切か、ボタンはクリックできるか、といったテスト項目をCypressに確認させましょう。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cy.should(<span class="string">&#x27;テストタイプ&#x27;</span>)</span><br><span class="line">cy.should(<span class="string">&#x27;テストタイプ&#x27;</span>, 比較値)</span><br></pre></td></tr></table></figure><p>例：指定の文字列が表示されていることをチェックする</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cy.contains(<span class="string">&#x27;Gogle&#x27;</span>).should(<span class="string">&#x27;exist&#x27;</span>);</span><br></pre></td></tr></table></figure><p>テストが失敗していた場合はCypressが教えてくれます。<br><img src="/images/20210428a/image_4.png" alt="エラーログ"></p><h2 id="テストの動画を保存する"><a href="#テストの動画を保存する" class="headerlink" title="テストの動画を保存する"></a>テストの動画を保存する</h2><p>CYpressでは、テスト実行中の画面の様子を動画として保存できます。</p><p>ユーザ登録を行うことで、過去の動画の見返しや他者との共有が可能です。</p><ol><li>Cypressを実行し、開いた管理画面の<code>Runs</code>タブからユーザ登録を行う。</li><li>Record Keyが発行される。表示されたコマンドでCypressを実行する。<br><img src="/images/20210428a/image_5.png" alt="動画保存コマンド"></li><li>管理画面の<code>Runs</code>タブに、テストシナリオごとの実行ビデオが表示される。各ビデオファイルごとに保存や共有が可能である。</li></ol><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>Cypressを用いたE2Eテストの基本的な実行&amp;管理方法を紹介しました。</p><p>画面操作を自動化するだけでなく、バグフィクス、エビデンスとしても役立てることができる優れものですが、私のような初心者でも簡単に構築出来ちゃいます。まだまだ紹介しきれていない機能もありますので、本記事の紹介で気軽にチャレンジしていただければ幸いです。</p><p>ぜひ快適なテストライフを！</p><h1 id="補足"><a href="#補足" class="headerlink" title="補足"></a>補足</h1><p>本記事は、<a href="https://future.connpass.com/event/208056/presentation/">Future Tech Night #8</a>というイベントでお話した内容を記事化したものです。<br>同イベントの他の発表も記事として投稿されてますので、ぜひご覧ください！</p><ul><li>Cypress入門～初心者でも簡単にE2Eテストが作れる～（この記事です）</li><li><a href="/articles/20210428b/">Cypress - 設定編</a></li><li><a href="/articles/20210428c/">保守・拡張をしやすいカプセル化したCypress</a></li><li><a href="/articles/20210428d/">Cypress - 書きやすいテストの秘密と独自コマンドの実装</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。踊るエンジニア、木戸俊輔です。&lt;/p&gt;
&lt;p&gt;2021年4月で社会人2年目になりましたが、総出社回数は3回です。</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
    <category term="Cypress" scheme="https://future-architect.github.io/tags/Cypress/"/>
    
    <category term="E2Eテスト" scheme="https://future-architect.github.io/tags/E2E%E3%83%86%E3%82%B9%E3%83%88/"/>
    
    <category term="TechNight" scheme="https://future-architect.github.io/tags/TechNight/"/>
    
  </entry>
  
</feed>
