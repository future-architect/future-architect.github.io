<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2020-09-29T01:02:47.218Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>k3sを知る、動かす、感じる</title>
    <link href="https://future-architect.github.io/articles/20200929/"/>
    <id>https://future-architect.github.io/articles/20200929/</id>
    <published>2020-09-28T15:00:00.000Z</published>
    <updated>2020-09-29T01:02:47.218Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20200929/k3s.png" alt=""></p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG/DXチームの<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤太斉</a>です。本記事は<a href="/articles/20200928/">CNCF連載</a>の第1弾になります。</p><p>アプリケーションをコンテナ化することが主流になった昨今、エッジコンピューティングでもコンテナを利用する機会が出てきました。そのため、サーバー上でKubernetesを利用して、コンテナをオーケストレーションをするのと同じようにエッジデバイスでもコンテナを管理する機能が求められるようになってきました。</p><p>ここで、本記事では2020年の8月にCNCF入りを果たしたk3sについて触れていきます。</p><h2 id="k3sとは"><a href="#k3sとは" class="headerlink" title="k3sとは"></a>k3sとは</h2><p>k3sは元々<a href="https://rancher.com/" target="_blank" rel="noopener">Rancher Labs</a>(本社：アメリカ フロリダ州クパチーノ)で開発されていたOSSで2019年の2月に発表されました。発表当初はKubernetesの公式ディストリビューションであること、バイナリが40MB以下であることから話題にもなりました。エンタープライズでKubernetesを利用している企業が、エッジデバイスでもコンテナを利用できるようにし、さらに拡張したKubernetes as a Service(KaaS)基盤の運用・監視などを一元化することが可能になります。そのため、最適な用途としては以下が挙げられています。</p><ul><li>エッジコンピューティング</li><li>CI</li><li>ARM環境</li><li>IoT</li><li>開発環境</li><li>組み込みKubernetes</li></ul><h3 id="k3sの5つの変更"><a href="#k3sの5つの変更" class="headerlink" title="k3sの5つの変更"></a>k3sの5つの変更</h3><p>k3sの名前の由来はKubernetes(k8s)から5つの変更が入っていることに由来します。<br><img src="/images/20200929/k3s_architecture.png" alt=""><br>(引用: <a href="https://k3s.io/" target="_blank" rel="noopener">https://k3s.io/</a>)</p><h4 id="1-データストアの変更"><a href="#1-データストアの変更" class="headerlink" title="1. データストアの変更"></a>1. データストアの変更</h4><p>Kubernetesのマスターにあるデータストアはデフォルトではetcdですが、k3sではSQLiteに置き換えられています。ただ、もちろん固定ではなく、MySQL、PostgreSQL、etcdなどのデータストアも利用可能です。</p><h4 id="2-コンポーネントのシングルバイナリ化"><a href="#2-コンポーネントのシングルバイナリ化" class="headerlink" title="2. コンポーネントのシングルバイナリ化"></a>2. コンポーネントのシングルバイナリ化</h4><p>Kubernetesのコントロールプレーンが動くために必要なコンポーネントが１つのバイナリ、プロセスにまとまっています。その分、煩雑なクラスター操作(証明書の配布など)を自動化できるメリットがあります。</p><h4 id="3-外部との依存を最小化"><a href="#3-外部との依存を最小化" class="headerlink" title="3. 外部との依存を最小化"></a>3. 外部との依存を最小化</h4><p>k3sに必要な以下のパッケージをのぞいて、全て外部との依存を最小限に抑えています。</p><ul><li>containerd</li><li>Flannel</li><li>CoreDNS</li><li>ホストユーティリティ</li></ul><h4 id="4-機能の組み込み"><a href="#4-機能の組み込み" class="headerlink" title="4. 機能の組み込み"></a>4. 機能の組み込み</h4><p>k3sのベースの機能としてHelmコントローラー、Traefikイングレスコントローラーなど、k3s単体で利用できるようになっています。</p><h4 id="5-プラグインの削除"><a href="#5-プラグインの削除" class="headerlink" title="5. プラグインの削除"></a>5. プラグインの削除</h4><p>Kubernetesにはストレージや各クラウドプロバイダーへのプラグインが存在していましたが、k3sではこれらが取り除かれています。</p><p>Kubernetesからの変更点をみてみると、改めて比較的コンピューティングリソースが少ない環境でも利用できるようにしていることがわかります。</p><h2 id="いざ実際に動かしてみる"><a href="#いざ実際に動かしてみる" class="headerlink" title="いざ実際に動かしてみる"></a>いざ実際に動かしてみる</h2><p>前提の知識を得ることも大事ですが、実際に触ってみることも大事ですよね。ということで、大好きなGCPでk3sを動かしてみたいと思います。今回はk3sが動く最低限として、</p><ul><li>RAM:最小512MB</li><li>CPU:最低1CPU</li></ul><p>とされているので、Server側をn1-standard-1（vCPU x 1、メモリ 3.75 GB）、Agent側をf1-micro（vCPU x 1、メモリ 0.6 GB）で動かしてみることにします。またOSはUbuntu18.04としています。</p><h3 id="ファイアウォール"><a href="#ファイアウォール" class="headerlink" title="ファイアウォール"></a>ファイアウォール</h3><p>Serverへ外部からアクセスができるように</p><ul><li>Inbound: 0.0.0.0/0</li><li>tcp:6443</li></ul><p>で開けましょう</p><h3 id="Serverのインストール"><a href="#Serverのインストール" class="headerlink" title="Serverのインストール"></a>Serverのインストール</h3><p>インスタンス名を<code>k3s-server</code>としています。はじめにServer側のインストールを行います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=<span class="string">"--disable-agent"</span> K3S_KUBECONFIG_MODE=<span class="string">"644"</span> sh -</span><br></pre></td></tr></table></figure><p>今回、agentは別のサーバーに入れるので<code>INSTALL_K3S_EXEC=&quot;--disable-agent&quot;</code>を追加、またkubeconfigを読めるようにするために<code>K3S_KUBECONFIG_MODE=&quot;644&quot;</code>を追加しています。</p><p>インストールまで済んだらagentに登録するトークンを出力しましょう</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat /var/lib/rancher/k3s/server/node-token</span><br></pre></td></tr></table></figure><h3 id="Agentのインストール"><a href="#Agentのインストール" class="headerlink" title="Agentのインストール"></a>Agentのインストール</h3><p>インスタンス名を<code>k3s-agent-x</code>として立てています。Agent側は以下でインストールを行います。事前にcatしたトークン、Serverの外部IPを使うので準備してください</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -sfL https://get.k3s.io | K3S_TOKEN=[server_token] K3S_URL=https://[server_external_ip]:6443 sh -</span><br></pre></td></tr></table></figure><p>ここまで来ればnode(Agent)の確認ができると思うので、Server側で確認してみましょう</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ k3s kubectl get nodes</span><br></pre></td></tr></table></figure><p>また、<code>/etc/rancher/k3s/k3s.yaml</code>配下のファイルを手元のPCに持ってくるとローカルからもnodeの確認ができます</p><figure class="highlight yaml"><figcaption><span>/etc/rancher/k3s/k3s.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">clusters:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cluster:</span></span><br><span class="line">    <span class="attr">certificate-authority-data:</span> <span class="string">secret</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">https://[server_external_ip]:6443</span> <span class="comment"># ここをServerの外部IPに書き換え</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">contexts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">context:</span></span><br><span class="line">    <span class="attr">cluster:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">user:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">current-context:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Config</span></span><br><span class="line"><span class="attr">preferences:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">users:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxxxxxxxxxxxx</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure><h3 id="サンプルを動かす"><a href="#サンプルを動かす" class="headerlink" title="サンプルを動かす"></a>サンプルを動かす</h3><p>k3sクラスターを立てることができたので、簡単なサンプルを利用して、動くかみてみたいと思います。<br>今回使うサンプルは公式の<a href="https://rancher.com/learning-paths/how-to-deploy-your-application-to-kubernetes/" target="_blank" rel="noopener">Kubernetes Deployment: How to Run a Containerized Workload on a Cluster</a>から借りています。<br>はじめに、以下をapplyします。</p><figure class="highlight yaml"><figcaption><span>testdeploy.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">mysite</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">mysite</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">mysite</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">mysite</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">mysite</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">kellygriffin/hello:v1</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>applyが完了したら、podの起動を確認して、以下のコマンドでcurlしましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl <span class="built_in">exec</span> -it [container_name] curl localhost</span><br></pre></td></tr></table></figure><p>実行すると以下が返ってくるかと思います。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World This is Version 1 of our Application<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>次にスケールさせるためにReplicaを4にしてみましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl scale --replicas=4 deploy/mysite</span><br></pre></td></tr></table></figure><p>スケールしていることを確認しましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods</span><br><span class="line">NAME                      READY   STATUS    RESTARTS   AGE</span><br><span class="line">mysite-5bc4c5898d-8s448   1/1     Running   0          11m</span><br><span class="line">mysite-5bc4c5898d-5d68q   1/1     Running   0          2m11s</span><br><span class="line">mysite-5bc4c5898d-2zcpp   1/1     Running   0          3s</span><br><span class="line">mysite-5bc4c5898d-nc6pc   1/1     Running   0          3s</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>実利用がかなり浸透してきているKubernetesですが、k3sはさらに舞台を広げてくれるものだなと改めて思いました。</p><p>動かしている途中で感じたことですが、KubernetesではMasterとNodeでしたが、k3sはServerとAgentという風に呼び方を変えています。ここについては、Serverは本当にコントロールプレーンとしてサーバー上において、Agentはエッジデバイスに置くといった感じで、クラウド飲みではなく、環境が異なってもクラスター管理できるのかなと感じました。別パターンとして、組み込みKubernetesであればクラスタ毎埋めることもできたりしそうですね(Agentを合わせる、別にするというオプションが取れるので)。</p><p>ここまで書いてきたk3sですが、試すのもお手軽なので、是非一度試して簡単さを実感してみてください。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://rancher.com/docs/k3s/latest/en/" target="_blank" rel="noopener">英語の公式ドキュメント</a></li><li><a href="https://www.rancher.co.jp/pdfs/K3s-eBook4Styles0507.pdf" target="_blank" rel="noopener">日本語ドキュメント</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20200929/k3s.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIG/D
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Kubernetes" scheme="https://future-architect.github.io/tags/Kubernetes/"/>
    
      <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
      <category term="k3s" scheme="https://future-architect.github.io/tags/k3s/"/>
    
  </entry>
  
  <entry>
    <title>CNCF連載始めます</title>
    <link href="https://future-architect.github.io/articles/20200928/"/>
    <id>https://future-architect.github.io/articles/20200928/</id>
    <published>2020-09-27T15:00:00.000Z</published>
    <updated>2020-09-28T01:15:31.341Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20200928/cncf-color.png" alt=""></p><p>こんにちは。技術ブログ運営の<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤太斉</a>です。</p><p>今回は、<a href="https://www.cncf.io/" target="_blank" rel="noopener">CloudNative Computing Foundation(CNCF)</a>がホストしているOSSを取り扱った連載を全6回で行います。この記事では連載のイントロとCNCFのプロジェクトについて軽く触れます。</p><h2 id="CNCFとは"><a href="#CNCFとは" class="headerlink" title="CNCFとは"></a>CNCFとは</h2><p>Cloud Native Computing Foundationの略であり、Linux Foundationのプロジェクトの1つでもあります。代表のOSSとしては、今やコンテナオーケストレーションツールのデファクトスタンダードになっているKubernetesがあり、その辺りのOSSが数多くホストされています。指針はコンテナ技術の発展としており、現在もホストするプロジェクトが増えています。</p><h2 id="プロジェクトについて"><a href="#プロジェクトについて" class="headerlink" title="プロジェクトについて"></a>プロジェクトについて</h2><p>CNCFでは大きくプロジェクトを成熟度レベル別に3つ分類しています。</p><ul><li><strong>Graduated</strong><ul><li>「成熟した」プロジェクトとして認められたものについてはGraduatedになります。ここ最近だとTiKVやHarborといったプロジェクトがGraduatedにあがりました。</li></ul></li><li><strong>Incubating</strong><ul><li>Sandboxから利用数などが増加するとIncubatingになります。よく使われているIncubatingプロジェクトではArgo CDやgRPCなどが挙げられます。</li></ul></li><li><strong>Sandbox</strong><ul><li>CNCFのプロジェクトとしては「early stage」として位置付けられています。2020/08のKubeCon EUでは、k3sが新たに入ったことが話題になりました。</li></ul></li></ul><p><img src="/images/20200928/image.png" alt=""><br><a href="https://www.cncf.io/projects/" target="_blank" rel="noopener">https://www.cncf.io/projects/</a></p><h2 id="スケジュール"><a href="#スケジュール" class="headerlink" title="スケジュール"></a>スケジュール</h2><p>今回は、CNCFでホストしているOSSの中から特にIncubating、Sandboxプロジェクトについて取り扱います。一部Graduatedがありますが、企画段階ではIncubatingでした。</p><p>連載は以下のメンバーで行いますので、気になる記事がありましたらぜひ読んでみてください。</p><table><thead><tr><th>日付</th><th>執筆者</th><th>取り扱うプロジェクト</th></tr></thead><tbody><tr><td>9/28</td><td>伊藤太斉</td><td>このページ</td></tr><tr><td>9/29</td><td>伊藤太斉</td><td>k3s</td></tr><tr><td>9/30</td><td>真野隼記</td><td>Open Policy Agent</td></tr><tr><td>10/1</td><td>村田靖拓</td><td>Linkerd</td></tr><tr><td>10/2</td><td>澁川喜規</td><td>Dex</td></tr><tr><td>10/5</td><td>伊藤真彦</td><td>TiKV</td></tr></tbody></table><p>※正確な取り扱うプロジェクト、掲載順はそのときにより前後しますが、ご了承ください。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>今回は社内でも取り扱いの少ない部分の連載で、触ってみた系が今回は圧倒的に多いですが、第2弾を行うときはTipsや本番運用した知見などを出せればと思いますので是非ご期待ください！</p><p>他にも<a href="https://future-architect.github.io/articles/20200908/">連載企画</a>がざくざくあります。ぜひ、気になるテーマの記事をCHECK! いただけると幸いです。</p><ul><li><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a></li><li><a href="/tags/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E5%85%A5%E9%96%80/">インフラ入門</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoTips%E9%80%A3%E8%BC%89/">Go Tips連載</a></li><li><a href="/tags/GoCDK/">Go Cloud</a></li><li><a href="/tags/Auth0/">Auth0</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/">フロントエンド記事集中投稿</a></li><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li><li><a href="/tags/夏休み自由研究/">夏休み自由研究</a></li><li><a href="/tags/GlyphFeeds/">GlyphFeeds連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20200928/cncf-color.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;こんにちは。技術ブログ運営の&lt;a href=&quot;https://twitter.com/kaedemalu&quot; target=&quot;_blank&quot; rel=&quot;noop
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
      <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
  </entry>
  
  <entry>
    <title>LambdaとGoを使ったサーバーレスWebAPI開発実践入門</title>
    <link href="https://future-architect.github.io/articles/20200927/"/>
    <id>https://future-architect.github.io/articles/20200927/</id>
    <published>2020-09-26T15:00:00.000Z</published>
    <updated>2020-09-28T04:23:11.576Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの辻です。</p><p>業務アプリケーションのビジネスロジックをサーバーレスで実装することも増えてきました。<a href="https://future-architect.github.io/articles/20200722/">AWSサービストリガによるLambda関数起動</a>の記事にもあるようにAPI GatewayとLambda関数を組み合わせてHTTPサーバを提供することも容易にできます。バックエンドのWebAPIをLambda関数で動かすユースケースがよくあるパターンです。Lambda関数とアプリケーションロジックの実装は密結合になりやすいですが、HTTPサーバで動作するように実装して、Lambda関数として組み込むと、従来のHTTPサーバを実装するノウハウを活かしつつ、サーバレスで動作するバックエンドのWebAPIを構築できます。</p><p>本記事ではGoを用いてサーバレスなWebAPIサーバをAWS上に1から構築するチュートリアルです。</p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>AWS上に構築するインフラはこんな感じです。シンプル。</p><p><img src="/images/20200927/%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AC%E3%82%B9Go.png" alt=""></p><p>最初に本チュートリアルで使用しているバージョンを記載します。以下のとおりです。</p><ul><li>各種ソフトウェアバージョン</li></ul><table><thead><tr><th>#</th><th>ソフトウェア/ライブラリ</th><th>バージョン</th></tr></thead><tbody><tr><td>1</td><td>AWS CLI</td><td>2.0.48</td></tr><tr><td>2</td><td>LocalStack</td><td>0.11.5</td></tr><tr><td>3</td><td>Terraform</td><td>0.13.2</td></tr></tbody></table><ul><li>Goの主要ライブラリのバージョン</li></ul><table><thead><tr><th>#</th><th>ソフトウェア/ライブラリ</th><th>バージョン</th></tr></thead><tbody><tr><td>1</td><td>go-swagger/go-swagger</td><td>0.25.0</td></tr><tr><td>2</td><td>guregu/dynamo</td><td>1.19.1</td></tr></tbody></table><ul><li>LocalStackの起動</li></ul><p>ローカル開発にはDockerを使ってLocalStackを動かしていきます。LocalStackはバージョン <code>0.11.0</code> からすべてのサービスに <code>4566</code> ポートを使います。<code>0.10.x</code> 以下のバージョンと使用するポートが異なるため、古いバージョンを利用している方は注意してください。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -it -p 4566:4566 -e SERVICES&#x3D;dynamodb -e DEFAULT_REGION&#x3D;ap-northeast-1 localstack&#x2F;localstack:0.11.5</span><br></pre></td></tr></table></figure><ul><li>AWS CLIのインストール、設定</li></ul><p>また、Lambda関数のデプロイなどに <code>aws</code> コマンドを使いますので、<a href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/install-cliv2.html" target="_blank" rel="noopener">AWS CLI バージョン 2 のインストール</a>を参考にAWS CLIをインストールしましょう。使っているOSのインストール手順に従ってインストールしてください。</p><p>以下のように出力されれば成功です。(以下はWindowsの例)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ aws --version</span><br><span class="line">aws-cli&#x2F;2.0.48 Python&#x2F;3.7.7 Windows&#x2F;10 exe&#x2F;AMD64</span><br></pre></td></tr></table></figure><p>CLIでAWSのリソースにアクセスできるように設定しておきましょう。デフォルトのプロファイルとして設定しています。必要に応じてプロファイル名を指定することができます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ aws configure</span><br><span class="line">AWS Access Key ID [None]: access-key-ID</span><br><span class="line">AWS Secret Access Key [None]: secret-access-key</span><br><span class="line">Default region name [None]: ap-notrheast-1</span><br><span class="line">Default output format [None]: json</span><br></pre></td></tr></table></figure><p>テスト用にダミー用の <code>local</code> プロファイルも設定しておきましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ aws configure --profile local</span><br><span class="line">AWS Access Key ID [None]: dummy</span><br><span class="line">AWS Secret Access Key [None]: dummy</span><br><span class="line">Default region name [None]: ap-notrheast-1</span><br><span class="line">Default output format [None]: json</span><br></pre></td></tr></table></figure><h1 id="インフラ構築"><a href="#インフラ構築" class="headerlink" title="インフラ構築"></a>インフラ構築</h1><p>AWS上に構築するインフラはTerraformで使います。一時的な動作確認で使うリソースの場合GUIでポチポチリソースを作成しても問題ないですが、業務でインフラを構築する場合はAWS CloudFormationやTerraformを使うことが一般的です。GUIでポチポチする際に暗黙的に作成されるリソースもしっかり把握していきましょう。</p><p>Terraformに関しては</p><ul><li><a href="https://future-architect.github.io/articles/20190816/">はじめてのTerraform 0.12 ～環境構築～</a></li><li><a href="https://future-architect.github.io/articles/20190816/">はじめてのTerraform 0.12 ～実践編～</a></li></ul><p>の記事もあわせて見てみてください。その他にも技術ブログに<a href="https://future-architect.github.io/tags/Terraform/">Terraform</a>に関する記事がたくさんあります。</p><p>またHashiCorp Learnのドキュメントも参考になります。</p><ul><li><a href="https://learn.hashicorp.com/tutorials/terraform/lambda-api-gateway" target="_blank" rel="noopener">Serverless Applications with AWS Lambda and API Gateway</a></li></ul><p>Terraformは<a href="https://learn.hashicorp.com/tutorials/terraform/install-cli" target="_blank" rel="noopener">Install Terraform</a>を参考に2020年9月にリリースしたv0.13.2をインストールしておきます。v0.12.xでも問題ないです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ terraform -v</span><br><span class="line">Terraform v0.13.2</span><br></pre></td></tr></table></figure><p>今回はローカルPCから <code>terraform</code> コマンドを実行してAWSにリソースを作っていきます。</p><p>最終的なファイル構成は以下のようになります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── api_gateway_deployment.tf</span><br><span class="line">├── api_gateway_integration.tf</span><br><span class="line">├── api_gateway_method.tf</span><br><span class="line">├── api_gateway_resource.tf</span><br><span class="line">├── api_gateway_rest_api.tf</span><br><span class="line">├── assume_role</span><br><span class="line">│   └── Lambda.json</span><br><span class="line">├── dummy_function.zip</span><br><span class="line">├── dynamodb_table.tf</span><br><span class="line">├── iam_policy.tf</span><br><span class="line">├── iam_policy_document.tf</span><br><span class="line">├── iam_role.tf</span><br><span class="line">├── iam_role_policy_attachment.tf</span><br><span class="line">├── Lambda_function.tf</span><br><span class="line">├── Lambda_permission.tf</span><br><span class="line">└── provider.tf</span><br></pre></td></tr></table></figure><p>まずはプロバイダの設定をしておきます。</p><ul><li>provider.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">provider <span class="string">"aws"</span> &#123;</span><br><span class="line">  region = <span class="string">"ap-northeast-1"</span></span><br><span class="line">  <span class="built_in">alias</span> = <span class="string">"ap-northeast-1"</span></span><br><span class="line">  version = <span class="string">"&gt;= 3.7.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>provider.tf</code> を記述したら <code>terraform init</code> をしましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ terraform init</span><br><span class="line">Initializing the backend...</span><br><span class="line"></span><br><span class="line">Initializing provider plugins...</span><br><span class="line">- Finding hashicorp&#x2F;aws versions matching &quot;&gt;&#x3D; 3.7.0&quot;...</span><br><span class="line">- Installing hashicorp&#x2F;aws v3.7.0...</span><br><span class="line">- Installed hashicorp&#x2F;aws v3.7.0 (signed by HashiCorp)</span><br><span class="line"></span><br><span class="line">Terraform has been successfully initialized!</span><br><span class="line"></span><br><span class="line">You may now begin working with Terraform. Try running &quot;terraform plan&quot; to see</span><br><span class="line">any changes that are required for your infrastructure. All Terraform commands</span><br><span class="line">should now work.</span><br><span class="line"></span><br><span class="line">If you ever set or change modules or backend configuration for Terraform,</span><br><span class="line">rerun this command to reinitialize your working directory. If you forget, other</span><br><span class="line">commands will detect it and remind you to do so if necessary.</span><br></pre></td></tr></table></figure><p>続いてAPI GatewayとLambda関数を実装します。まずはLambda関数とAPI Gatewayで必要なIAMを記述します。API GatewayはLambda関数を呼び出す操作、Lambda関数ではCloudWatch Logsにログを書き込む操作、DynamoDBを操作するIAMを定義します。</p><ul><li>iam_policy_document.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">data <span class="string">"aws_iam_policy_document"</span> <span class="string">"example_api_policy"</span> &#123;</span><br><span class="line">  statement &#123;</span><br><span class="line">    effect = <span class="string">"Allow"</span></span><br><span class="line">    principals &#123;</span><br><span class="line">      <span class="built_in">type</span> = <span class="string">"*"</span></span><br><span class="line">      identifiers = [</span><br><span class="line">      <span class="string">"*"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    actions = [</span><br><span class="line">      <span class="string">"execute-api:Invoke"</span></span><br><span class="line">    ]</span><br><span class="line">    resources = [</span><br><span class="line">      <span class="string">"arn:aws:execute-api:ap-northeast-1:*:*/*/*"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data <span class="string">"aws_iam_policy_document"</span> <span class="string">"example_lambda"</span> &#123;</span><br><span class="line">  statement &#123;</span><br><span class="line">    effect = <span class="string">"Allow"</span></span><br><span class="line">    actions = [</span><br><span class="line">      <span class="string">"logs:CreateLogGroup"</span>,</span><br><span class="line">      <span class="string">"logs:CreateLogStream"</span>,</span><br><span class="line">      <span class="string">"logs:PutLogEvents"</span></span><br><span class="line">    ]</span><br><span class="line">    resources = [</span><br><span class="line">    <span class="string">"arn:aws:logs:*:*:*"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のポリシードキュメントをIAMポリシーとして定義します。</p><ul><li>iam_policy.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_iam_policy"</span> <span class="string">"example_lambda"</span> &#123;</span><br><span class="line">  name   = <span class="string">"example-lambda"</span></span><br><span class="line">  policy = data.aws_iam_policy_document.example_lambda.json</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IAMロールを定義します。</p><ul><li>iam_role.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_iam_role"</span> <span class="string">"example_lambda"</span> &#123;</span><br><span class="line">  name               = <span class="string">"example-lambda"</span></span><br><span class="line">  assume_role_policy = file(<span class="string">"assume_role/lambda.json"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>信頼ポリシーは以下のようになります。</p><ul><li>assume_role/lambda.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line">  <span class="attr">"Statement"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"Action"</span>: <span class="string">"sts:AssumeRole"</span>,</span><br><span class="line">      <span class="attr">"Principal"</span>: &#123;</span><br><span class="line">        <span class="attr">"Service"</span>: <span class="string">"lambda.amazonaws.com"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">      <span class="attr">"Sid"</span>: <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先程記述したIAMロールにIAMポリシーをアタッチします。</p><ul><li>iam_role_policy_attachment.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_iam_role_policy_attachment"</span> <span class="string">"example_api"</span> &#123;</span><br><span class="line">  role       = aws_iam_role.example_lambda.name</span><br><span class="line">  policy_arn = aws_iam_policy.example_lambda.arn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IAMの設定は以上で完了です。</p><p>続いてAPI GatewayのRESTのリソースを作っていきましょう。先程作成したIAMポリシードキュメントを使います。</p><ul><li>api_gateway_rest_api.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_api_gateway_rest_api"</span> <span class="string">"example_api"</span> &#123;</span><br><span class="line">  name        = <span class="string">"example-api"</span></span><br><span class="line">  description = <span class="string">"example serverless api"</span></span><br><span class="line">  policy      = data.aws_iam_policy_document.example_api_policy.json</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>api_gateway_resource.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_api_gateway_resource"</span> <span class="string">"example_api"</span> &#123;</span><br><span class="line">  rest_api_id = aws_api_gateway_rest_api.example_api.id</span><br><span class="line">  parent_id   = aws_api_gateway_rest_api.example_api.root_resource_id</span><br><span class="line">  path_part   = <span class="string">"&#123;proxy+&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>APIリクエストに対する認可はなしにします。必要な場合は <code>authorization</code> パラメータを用いて設定します。</p><ul><li>api_gateway_method.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_api_gateway_method"</span> <span class="string">"example_api_get"</span> &#123;</span><br><span class="line">  authorization = <span class="string">"NONE"</span></span><br><span class="line">  http_method   = <span class="string">"GET"</span></span><br><span class="line">  resource_id   = aws_api_gateway_resource.example_api.id</span><br><span class="line">  rest_api_id   = aws_api_gateway_rest_api.example_api.id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_api_gateway_method"</span> <span class="string">"example_api_post"</span> &#123;</span><br><span class="line">  authorization = <span class="string">"NONE"</span></span><br><span class="line">  http_method   = <span class="string">"POST"</span></span><br><span class="line">  resource_id   = aws_api_gateway_resource.example_api.id</span><br><span class="line">  rest_api_id   = aws_api_gateway_rest_api.example_api.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambdaプロキシ統合のGETリクエストを実装する場合においても <code>integration_http_method</code> パラメータは <code>POST</code> と設定する必要があります。</p><ul><li>api_gateway_integration.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_api_gateway_integration"</span> <span class="string">"example_api_get"</span> &#123;</span><br><span class="line">  rest_api_id             = aws_api_gateway_rest_api.example_api.id</span><br><span class="line">  resource_id             = aws_api_gateway_method.example_api_get.resource_id</span><br><span class="line">  http_method             = aws_api_gateway_method.example_api_get.http_method</span><br><span class="line">  <span class="comment"># "GET"ではなく"POST"にする必要がある</span></span><br><span class="line">  integration_http_method = <span class="string">"POST"</span></span><br><span class="line">  <span class="built_in">type</span>                    = <span class="string">"AWS_PROXY"</span></span><br><span class="line">  uri                     = aws_lambda_function.example_api.invoke_arn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">"aws_api_gateway_integration"</span> <span class="string">"example_api_post"</span> &#123;</span><br><span class="line">  rest_api_id             = aws_api_gateway_rest_api.example_api.id</span><br><span class="line">  resource_id             = aws_api_gateway_method.example_api_post.resource_id</span><br><span class="line">  http_method             = aws_api_gateway_method.example_api_post.http_method</span><br><span class="line">  integration_http_method = <span class="string">"POST"</span></span><br><span class="line">  <span class="built_in">type</span>                    = <span class="string">"AWS_PROXY"</span></span><br><span class="line">  uri                     = aws_lambda_function.example_api.invoke_arn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>api_gateway_deployment.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_api_gateway_deployment"</span> <span class="string">"example_api"</span> &#123;</span><br><span class="line">  depends_on = [</span><br><span class="line">    aws_api_gateway_integration.example_api_get,</span><br><span class="line">    aws_api_gateway_integration.example_api_post,</span><br><span class="line">  ]</span><br><span class="line">  rest_api_id       = aws_api_gateway_rest_api.example_api.id</span><br><span class="line">  stage_name        = <span class="string">"test"</span></span><br><span class="line">  stage_description = <span class="string">"test stage"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GETリクエストやPOSTリクエストを呼び出したときに起動するLambda関数のリソースを定義していないため、上記のtfファイルはエラーになります。Lambda関数のリソースを作ります。</p><p>Lambda関数はアプリケーション側からデプロイできるようにTerraform側ではLambda関数の初期構築時のみ使用するダミーのzipファイルを使って構築するのがおすすめです。</p><p>Lambdaの <code>handler</code> パラメータは、ビルドして生成した実行可能なファイル名と同じである必要があります。</p><ul><li>lambda_function.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_lambda_function"</span> <span class="string">"example_api"</span> &#123;</span><br><span class="line">  filename      = <span class="string">"dummy_function.zip"</span></span><br><span class="line">  function_name = <span class="string">"example-api"</span></span><br><span class="line">  role          = aws_iam_role.example_lambda.arn</span><br><span class="line">  handler       = <span class="string">"lambda"</span></span><br><span class="line">  runtime       = <span class="string">"go1.x"</span></span><br><span class="line"></span><br><span class="line">  memory_size = 128</span><br><span class="line">  timeout     = 900</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambda関数をAPI Gatewayから呼び出せるように明示的に許可します。</p><ul><li>lambda_permission.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_lambda_permission"</span> <span class="string">"example_apigateway_lambda"</span> &#123;</span><br><span class="line">  action        = <span class="string">"lambda:InvokeFunction"</span></span><br><span class="line">  function_name = aws_lambda_function.example_api.function_name</span><br><span class="line">  principal     = <span class="string">"apigateway.amazonaws.com"</span></span><br><span class="line"></span><br><span class="line">  source_arn = <span class="string">"<span class="variable">$&#123;aws_api_gateway_rest_api.example_api.execution_arn&#125;</span>/*/*/*"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dummy_function.zip</code> はビルド可能な適当な <code>main.go</code> を <code>dummy_function</code> に格納してzip化しておきます。ファイルが存在しないとエラーになります。</p><ul><li>dummy_function/main.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello world!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>API GatewayとLambda関数のリソースを作成する準備が整いました。<code>terraform plan</code> <code>terraform apply</code> をしてリソースを作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ terraform apply</span><br><span class="line">...</span><br><span class="line">(省略)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="Goのアプリケーション開発"><a href="#Goのアプリケーション開発" class="headerlink" title="Goのアプリケーション開発"></a>Goのアプリケーション開発</h1><p>WebAPI開発です。今回はサンプルアプリケーションなのでGETとPOSTだけ対応している以下の2つのパスを用意します。</p><table><thead><tr><th>メソッド</th><th>パス</th><th>説明</th></tr></thead><tbody><tr><td>GET</td><td><code>/v1/users</code></td><td>登録されているユーザ一覧を返却します</td></tr><tr><td>POST</td><td><code>/v1/users</code></td><td>ユーザを登録します</td></tr></tbody></table><p>それでは <code>go mod init</code> として開発を始めていきましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go mod init example</span><br></pre></td></tr></table></figure><h2 id="API定義"><a href="#API定義" class="headerlink" title="API定義"></a>API定義</h2><p>GoのWebアプリケーションフレームワークはEchoやGinやchiやgo-swaggerなどいろいろありますが、今回はgo-swaggerを用いることにします。どのWebアプリケーションフレームワークを使うかはGopherの間でも意見が分かれるところなので、使い慣れたWebアプリケーションフレームがあれば、それを使うのもよしです。上記のメソッドとパスをSwaggerで記述していきます。<code>swagger.yaml</code> にすると以下のようになります。ちなみにSwaggerの書き方・規約は<a href="https://future-architect.github.io/articles/20200409/">スキーマファースト開発のためのOpenAPI（Swagger）設計規約</a> の記事がオススメです。</p><details><summary>swagger.yaml</summary><div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger:</span> <span class="string">"2.0"</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">"1.0.0"</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">"Example app"</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">"A Example app for serverless api"</span></span><br><span class="line"><span class="attr">host:</span> <span class="string">"localhost:18888"</span></span><br><span class="line"><span class="attr">basePath:</span> <span class="string">"/v1"</span></span><br><span class="line"><span class="attr">schemes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"http"</span></span><br><span class="line"><span class="attr">consumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"application/json"</span></span><br><span class="line"><span class="attr">produces:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"application/json"</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">user</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">ユーザAPI</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/users:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">ユーザ一覧取得</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">getUsers</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">'200':</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Success</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/users'</span></span><br><span class="line">        <span class="attr">'400':</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Bad</span> <span class="string">Request</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/Error'</span></span><br><span class="line">        <span class="attr">'500':</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Internal</span> <span class="string">Server</span> <span class="string">Error</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/Error'</span></span><br><span class="line">    <span class="attr">post:</span></span><br><span class="line">      <span class="attr">summary:</span> <span class="string">ユーザ登録</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">postUsers</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">in:</span> <span class="string">body</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">postUsers</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/user'</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">登録するユーザ情報</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">'200':</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Success</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/user'</span></span><br><span class="line">        <span class="attr">'400':</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Bad</span> <span class="string">Request</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/Error'</span></span><br><span class="line">        <span class="attr">'500':</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">Internal</span> <span class="string">Server</span> <span class="string">Error</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="string">$ref:</span> <span class="string">'#/definitions/Error'</span></span><br><span class="line"><span class="attr">definitions:</span></span><br><span class="line">  <span class="attr">users:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">users</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">array</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">ユーザ一覧</span></span><br><span class="line">    <span class="attr">items:</span></span><br><span class="line">      <span class="string">$ref:</span> <span class="string">'#/definitions/user'</span></span><br><span class="line">  <span class="attr">user:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">User</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">ユーザ</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">user_id:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">x-omitempty:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">ユーザID</span></span><br><span class="line">      <span class="attr">name:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">x-omitempty:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">ユーザ名</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">user_id</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">name</span></span><br><span class="line">  <span class="attr">Error:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">Error</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">エラー</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">message:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">エラーメッセージ</span></span><br></pre></td></tr></table></figure></div></details><p><code>go-swagger</code> は<a href="https://goswagger.io/install.html" target="_blank" rel="noopener">Installing</a>を参考にインストールします。今回は2020/09/23現在の最新バージョンである <code>0.25.0</code> をインストールします。以下のように出力されていればOKです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ swagger version</span><br><span class="line">version: v0.25.0</span><br><span class="line">commit: f032690aab0634d97e2861a708d8fd9365ba77d2</span><br></pre></td></tr></table></figure><h2 id="データストア"><a href="#データストア" class="headerlink" title="データストア"></a>データストア</h2><p>ユーザの情報を格納するDynamoDBのテーブル名は <code>users</code> としておきます。スキーマは以下です。</p><table><thead><tr><th>論理名</th><th>物理名</th><th align="center">キー</th></tr></thead><tbody><tr><td>ユーザID</td><td>user_id</td><td align="center">ハッシュキー</td></tr><tr><td>ユーザ名</td><td>user_name</td><td align="center">-</td></tr></tbody></table><p>ついでにTerraformを用いてAWS上にリソースを作成しましょう。キャパシティはオンデマンドモードにしておきます。</p><ul><li>dynamodb_table.tf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">"aws_dynamodb_table"</span> <span class="string">"example_users"</span> &#123;</span><br><span class="line">  name         = <span class="string">"example-users"</span></span><br><span class="line">  billing_mode = <span class="string">"PAY_PER_REQUEST"</span></span><br><span class="line"></span><br><span class="line">  hash_key = <span class="string">"user_id"</span></span><br><span class="line"></span><br><span class="line">  attribute &#123;</span><br><span class="line">    name = <span class="string">"user_id"</span></span><br><span class="line">    <span class="built_in">type</span> = <span class="string">"S"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lambda関数の環境変数からDynamoDBのテーブル名を取得できるようにLambda関数の環境変数に追加しておきます。環境変数でDynamoDBのテーブル名を設定できるようにしておくと、ローカルでのテストする際にAWS上に構築するテーブル名と別の名前を指定でき、便利です。</p><ul><li>lambda_function.tf</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">resource "aws_lambda_function" "example_api" &#123;</span><br><span class="line">  filename      = "dummy_function.zip"</span><br><span class="line">  function_name = "example-api"</span><br><span class="line">  role          = aws_iam_role.example_lambda.arn</span><br><span class="line">  handler       = "lambda"</span><br><span class="line">  runtime       = "go1.x"</span><br><span class="line"></span><br><span class="line">  memory_size = 128</span><br><span class="line">  timeout     = 900</span><br><span class="line"></span><br><span class="line"><span class="addition">+  environment &#123;</span></span><br><span class="line"><span class="addition">+    variables = &#123;</span></span><br><span class="line"><span class="addition">+      DYNAMO_TABLE_USERS: aws_dynamodb_table.example_users.name</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">data "aws_iam_policy_document" "example_lambda_policy" &#123;</span><br><span class="line"><span class="addition">+  statement &#123;</span></span><br><span class="line"><span class="addition">+    effect = "Allow"</span></span><br><span class="line"><span class="addition">+    actions = [</span></span><br><span class="line"><span class="addition">+      "dynamodb:*"</span></span><br><span class="line"><span class="addition">+    ]</span></span><br><span class="line"><span class="addition">+    resources = [</span></span><br><span class="line"><span class="addition">+      "*"]</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line">  statement &#123;</span><br><span class="line">    effect = "Allow"</span><br><span class="line">    actions = [</span><br><span class="line">      "logs:CreateLogGroup",</span><br><span class="line">      "logs:CreateLogStream",</span><br><span class="line">      "logs:PutLogEvents"</span><br><span class="line">    ]</span><br><span class="line">    resources = [</span><br><span class="line">      "arn:aws:logs:*:*:*"]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新しいリソースを定義したら <code>terraform apply</code> しておきます。</p><h2 id="パッケージ構成"><a href="#パッケージ構成" class="headerlink" title="パッケージ構成"></a>パッケージ構成</h2><p>ちょっとしたLambda関数であれば <code>main.go</code> の1ファイルで良い場合もありますが、バックエンドのWebAPIを提供するとなるとそうはいかないでしょう。Goのパッケージ構成は悩みポイントの一つです。プロジェクトの規模や開発メンバのスキルセットなどにもよると思いますが、個人的にはフラットなパッケージ構成を導入することが多い気がします。<a href="https://future-architect.github.io/articles/20200528/">あなたのGoアプリ/ライブラリのパッケージ構成もっとシンプルでよくない？</a>や<a href="https://future-architect.github.io/articles/20200630/">go-swaggerを用いたWebアプリケーション開発Tips19選</a>の記事を参考にしてみてください。今回は以下のようなフラットパッケージとします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Makefile                 <span class="comment"># タスク定義</span></span><br><span class="line">├── README.md</span><br><span class="line">├── cmd/lambda/main.go       <span class="comment"># Lambda関数を起動するmainファイル</span></span><br><span class="line">├── db.go                    <span class="comment"># DynamoDBの接続</span></span><br><span class="line">├── gen                      <span class="comment"># go-swaggerで自動生成するファイル</span></span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── swagger.yaml             <span class="comment"># swagger spec</span></span><br><span class="line">├── testdata                 <span class="comment"># テスト</span></span><br><span class="line">├── user_handler.go          <span class="comment"># ハンドラの実装</span></span><br><span class="line">├── user_handler_db.go       <span class="comment"># 永続化層へのアクセスファイル</span></span><br><span class="line">└── user_handler_test.go     <span class="comment"># ハンドラのテスト</span></span><br></pre></td></tr></table></figure><p>以下のようにディレクトリを作っておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p %GOPATH%\src\github.com\d-tsuji\example</span><br><span class="line">$ <span class="built_in">cd</span> example</span><br><span class="line">$ mkdir cmd\lambda gen testdata</span><br></pre></td></tr></table></figure><h2 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h2><p>ビルドなどのタスクはMakefileに記述しておきます。</p><ul><li>Makefile</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">.PHONY: deps</span><br><span class="line">deps:</span><br><span class="line">go mod download</span><br><span class="line">go mod tidy</span><br><span class="line"></span><br><span class="line">.PHONY: build</span><br><span class="line">build: deps</span><br><span class="line">GOOS=linux GOARCH=amd64 go build -ldflags=<span class="string">"-s -w"</span> -trimpath -o bin/lambda cmd/lambda/main.go</span><br><span class="line"></span><br><span class="line">.PHONY: <span class="built_in">test</span></span><br><span class="line"><span class="built_in">test</span>:</span><br><span class="line"><span class="built_in">export</span> DYNAMO_TABLE_USERS=local_users;\</span><br><span class="line">go <span class="built_in">test</span> -race -v -count=1 ./</span><br><span class="line"></span><br><span class="line">.PHONY: generate-server</span><br><span class="line">generate-server:</span><br><span class="line">rm -rf ./gen/models ./gen/restapi/operations</span><br><span class="line">swagger generate server --exclude-main -f ./swagger.yaml -t gen</span><br><span class="line"></span><br><span class="line">.PHONY: zip</span><br><span class="line">zip: build</span><br><span class="line">zip -j bin/lambda.zip bin/lambda</span><br><span class="line"></span><br><span class="line">.PHONY: deploy</span><br><span class="line">deploy: zip</span><br><span class="line">aws lambda update-function-code --region ap-northeast-1 --<span class="keyword">function</span>-name example-api --zip-file fileb://bin/lambda.zip</span><br></pre></td></tr></table></figure><p>先程作成した <code>swagger.yml</code> のAPI定義を元に <code>make generate-server</code> で <code>go-swagger</code> でコードを生成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ make generate-server</span><br><span class="line">swagger generate server --exclude-main -f ./swagger.yaml -t gen</span><br><span class="line">2020/09/15 22:17:26 validating spec C:\Users\dramt\go\src\github.com\d-tsuji\example\swagger.yaml</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">2020/09/15 22:17:27 executed template asset:serverDoc</span><br><span class="line">2020/09/15 22:17:27 Generation completed!</span><br><span class="line"></span><br><span class="line">For this generation to compile you need to have some packages <span class="keyword">in</span> your GOPATH:</span><br><span class="line"></span><br><span class="line">        * github.com/go-openapi/runtime</span><br><span class="line">        * github.com/jessevdk/go-flags</span><br><span class="line"></span><br><span class="line">You can get these now with: go get -u -f gen/...</span><br></pre></td></tr></table></figure><p><code>go-swagger</code> で生成したファイルでビルドに必要なモジュールを <code>go.mod</code> に追加します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/go-openapi/runtime</span><br><span class="line">$ go get github.com/jessevdk/go-flags</span><br></pre></td></tr></table></figure><h2 id="ハンドラ実装"><a href="#ハンドラ実装" class="headerlink" title="ハンドラ実装"></a>ハンドラ実装</h2><p>準備が整ったので、ハンドラの実装をしていきましょう。</p><p>まずは <code>db.go</code> を実装してDynamoDBに接続します。ローカルでの開発の場合は <code>4566</code> ポートで起動しているLocalStackに接続します。DynamoDBのGoのクライアントライブラリは</p><ul><li><a href="https://github.com/aws/aws-sdk-go" target="_blank" rel="noopener"><code>aws/aws-sdk-go</code></a></li><li><a href="https://github.com/guregu/dynamo" target="_blank" rel="noopener"><code>guregu/dynamo</code></a></li><li><a href="https://github.com/google/go-cloud" target="_blank" rel="noopener"><code>google/go-cloud</code></a></li></ul><p>などがあります。個人的なおすすめは <code>guregu/dynamo</code> です。本チュートリアルでは <code>guregu/dynamo</code> を利用することにします。<code>guregu/dynamo</code> の使い方については「<a href="https://future-architect.github.io/articles/20200225/">DynamoDB×Go連載#1 GoでDynamoDBでおなじみのguregu/dynamoを利用する</a>」の記事も見てみてください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/guregu/dynamo</span><br></pre></td></tr></table></figure><ul><li>db.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/session"</span></span><br><span class="line"><span class="string">"github.com/guregu/dynamo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">gdb    *dynamo.DB</span><br><span class="line">region <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">usersTable <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">region = os.Getenv(<span class="string">"AWS_REGION"</span>)</span><br><span class="line"></span><br><span class="line">usersTable = os.Getenv(<span class="string">"DYNAMO_TABLE_USERS"</span>)</span><br><span class="line"><span class="keyword">if</span> usersTable == <span class="string">""</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">"missing env variable: DYNAMO_TABLE_USERS"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gdb = dynamo.New(session.Must(session.NewSession(&amp;aws.Config&#123;</span><br><span class="line">Region: aws.String(region),</span><br><span class="line">&#125;)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>続いてハンドラの実装します。まずは以下の <code>GET</code> を扱うハンドラから実装していきます。</p><table><thead><tr><th>メソッド</th><th>パス</th><th>説明</th></tr></thead><tbody><tr><td>GET</td><td><code>/v1/users</code></td><td>登録されているユーザ一覧を返却します</td></tr></tbody></table><p>DynamoDBから登録されているすべてのユーザを取得する処理を実装します。</p><p>DynamoDBとマッピングするモデルは以下です。</p><ul><li>dynamo_model.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">UserID   <span class="keyword">string</span> <span class="string">`dynamo:"user_id,hash"`</span></span><br><span class="line">UserName <span class="keyword">string</span> <span class="string">`dynamo:"user_name"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>テーブルから全アイテム取得するためにScanを行います。</p><ul><li>user_handler_db.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/guregu/dynamo"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scanUsers</span><span class="params">(ctx context.Context)</span> <span class="params">([]User, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> resp []User</span><br><span class="line">table := gdb.Table(usersTable)</span><br><span class="line"><span class="keyword">if</span> err := table.Scan().AllWithContext(ctx, &amp;resp); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// 0件の場合も正常とします</span></span><br><span class="line"><span class="keyword">if</span> errors.Is(err, dynamo.ErrNotFound) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resp, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resp, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>続いて上記を使ったハンドラを実装します。</p><ul><li>user_handler.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/d-tsuji/example/gen/models"</span></span><br><span class="line"><span class="string">"github.com/d-tsuji/example/gen/restapi/operations"</span></span><br><span class="line"><span class="string">"github.com/go-openapi/runtime/middleware"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUsers</span><span class="params">(p operations.GetUsersParams)</span> <span class="title">middleware</span>.<span class="title">Responder</span></span> &#123;</span><br><span class="line">ctx := p.HTTPRequest.Context()</span><br><span class="line">users, err := scanUsers(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> operations.NewGetUsersInternalServerError().WithPayload(&amp;models.Error&#123;</span><br><span class="line">Message: fmt.Sprintf(<span class="string">"scan users error: %v"</span>, err),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> resp models.Users</span><br><span class="line"><span class="keyword">for</span> _, u := <span class="keyword">range</span> users &#123;</span><br><span class="line">u := u</span><br><span class="line">resp = <span class="built_in">append</span>(resp, &amp;models.User&#123;</span><br><span class="line">UserID: &amp;u.UserID,</span><br><span class="line">Name:   &amp;u.UserName,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> operations.NewGetUsersOK().WithPayload(resp)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ハンドラのテストも実装しましょう。テスト時はDynamoDBの接続先をLocalStackに上書きして、テスト用の設定にします。パッケージ構成によっては接続先の値は関数の引数で渡す、などが必要になるでしょう。</p><p>単体テストは実装の詳細をテストしないように、粒度を粗めにしておきます。ハンドラのリクエストに対して想定するJSONのレスポンスが取得できているかどうか確認します。テストファイルは <code>want_get_users_1.json</code> <code>want_get_users_2.json</code> としておきます。</p><ul><li>user_handler_test.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http/httptest"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/session"</span></span><br><span class="line"><span class="string">"github.com/d-tsuji/example/gen/models"</span></span><br><span class="line"><span class="string">"github.com/d-tsuji/example/gen/restapi/operations"</span></span><br><span class="line"><span class="string">"github.com/go-openapi/runtime"</span></span><br><span class="line"><span class="string">"github.com/guregu/dynamo"</span></span><br><span class="line"><span class="string">"github.com/nsf/jsondiff"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">dbEndpoint := <span class="string">"http://localhost:4566"</span></span><br><span class="line">sess := session.Must(session.NewSessionWithOptions(session.Options&#123;</span><br><span class="line">Profile:           <span class="string">"local"</span>,</span><br><span class="line">SharedConfigState: session.SharedConfigEnable,</span><br><span class="line">Config: aws.Config&#123;</span><br><span class="line">Endpoint:   aws.String(dbEndpoint),</span><br><span class="line">DisableSSL: aws.Bool(<span class="literal">true</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;))</span><br><span class="line">gdb = dynamo.New(sess)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestGetUsers</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name           <span class="keyword">string</span></span><br><span class="line">input          <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span></span><br><span class="line">wantStatusCode <span class="keyword">int</span></span><br><span class="line">want           <span class="keyword">string</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">"複数件のユーザの取得"</span>,</span><br><span class="line">input: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">err := gdb.CreateTable(usersTable, User&#123;&#125;).Provision(<span class="number">1</span>, <span class="number">1</span>).RunWithContext(context.TODO())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"dynamo create table %s: %v"</span>, usersTable, err)</span><br><span class="line">&#125;</span><br><span class="line">inputUsers := []User&#123;&#123;UserID: <span class="string">"001"</span>, UserName: <span class="string">"gopher"</span>&#125;, &#123;UserID: <span class="string">"002"</span>, UserName: <span class="string">"rubyist"</span>&#125;&#125;</span><br><span class="line"><span class="keyword">for</span> _, u := <span class="keyword">range</span> inputUsers &#123;</span><br><span class="line"><span class="keyword">if</span> err := gdb.Table(usersTable).Put(u).RunWithContext(context.TODO()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"dynamo input user %v: %v"</span>, u, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">wantStatusCode: <span class="number">200</span>,</span><br><span class="line">want:           <span class="string">"./testdata/want_get_users_1.json"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">"ユーザ0件"</span>,</span><br><span class="line">input: <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">err := gdb.CreateTable(usersTable, User&#123;&#125;).Provision(<span class="number">1</span>, <span class="number">1</span>).RunWithContext(context.TODO())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">"dynamo create table %s: %v"</span>, usersTable, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">wantStatusCode: <span class="number">200</span>,</span><br><span class="line">want:           <span class="string">"./testdata/want_get_users_2.json"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">tt.input(t)</span><br><span class="line">t.Cleanup(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err := gdb.Table(usersTable).DeleteTable().RunWithContext(context.TODO()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"dynamo delete table %s: %v"</span>, usersTable, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p := operations.NewGetUsersParams()</span><br><span class="line">p.HTTPRequest = httptest.NewRequest(<span class="string">"GET"</span>, <span class="string">"/v1/users"</span>, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">resp := GetUsers(p)</span><br><span class="line"></span><br><span class="line">w := httptest.NewRecorder()</span><br><span class="line">resp.WriteResponse(w, runtime.JSONProducer())</span><br><span class="line"></span><br><span class="line">want, err := ioutil.ReadFile(tt.want)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">"want file read: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> w.Result().StatusCode != tt.wantStatusCode &#123;</span><br><span class="line">t.Errorf(<span class="string">"status got %v, but want %v"</span>, w.Result().StatusCode, tt.wantStatusCode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">opt := jsondiff.DefaultConsoleOptions()</span><br><span class="line"><span class="keyword">if</span> d, s := jsondiff.Compare(w.Body.Bytes(), want, &amp;opt); d != jsondiff.FullMatch &#123;</span><br><span class="line">t.Errorf(<span class="string">"unmatch, got=%s, want=%s, diff=%s"</span>, <span class="keyword">string</span>(w.Body.Bytes()), <span class="keyword">string</span>(want), s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>testdata/want_get_users_1.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"user_id"</span>: <span class="string">"001"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"gopher"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"user_id"</span>: <span class="string">"002"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"rubyist"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>testdata/want_get_users_2.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]</span><br></pre></td></tr></table></figure><p>Goのテストを実行するとPASSすることがわかります。ハンドラの実装ができました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ make <span class="built_in">test</span></span><br><span class="line"><span class="built_in">export</span> DYNAMO_TABLE_USERS=local_users;\</span><br><span class="line">        go <span class="built_in">test</span> -race -v -count=1 ./</span><br><span class="line">=== RUN   TestGetUsers</span><br><span class="line">=== RUN   TestGetUsers/複数件のユーザの取得</span><br><span class="line">=== RUN   TestGetUsers/ユーザ0件</span><br><span class="line">--- PASS: TestGetUsers (0.39s)</span><br><span class="line">    --- PASS: TestGetUsers/複数件のユーザの取得 (0.30s)</span><br><span class="line">    --- PASS: TestGetUsers/ユーザ0件 (0.09s)</span><br><span class="line">PASS</span><br><span class="line">ok      github.com/d-tsuji/example      0.428s</span><br></pre></td></tr></table></figure><p>POSTのハンドラも同様に実装・テストできますが、本チュートリアルでは省略します。本チュートリアルの内容はGitHubにコミットしてあるので、そちらを参照ください。</p><p><code>go-swagger</code> はハンドラの実装とHTTPリクエストのパスのマッピングを自動生成したファイルの中に記述します。今回の場合は <code>configure_example_app.go</code> です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This file is safe to edit. Once it exists it will not be overwritten</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> restapi</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">configureAPI</span><span class="params">(api *operations.ExampleAppAPI)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="comment">// configure the api here</span></span><br><span class="line">api.ServeError = errors.ServeError</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set your custom logger if needed. Default one is log.Printf</span></span><br><span class="line"><span class="comment">// Expected interface func(string, ...interface&#123;&#125;)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Example:</span></span><br><span class="line"><span class="comment">// api.Logger = log.Printf</span></span><br><span class="line"></span><br><span class="line">api.JSONConsumer = runtime.JSONConsumer()</span><br><span class="line"></span><br><span class="line">api.JSONProducer = runtime.JSONProducer()</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==================================================================================</span></span><br><span class="line"><span class="comment">// userハンドラ</span></span><br><span class="line"><span class="comment">// 以下のように実装したハンドラをHTTPサーバに紐付けます。</span></span><br><span class="line">api.GetUsersHandler = operations.GetUsersHandlerFunc(example.GetUsers)</span><br><span class="line">api.PostUsersHandler = operations.PostUsersHandlerFunc(example.PostUsers)</span><br><span class="line"><span class="comment">// ==================================================================================</span></span><br><span class="line"></span><br><span class="line">api.PreServerShutdown = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">api.ServerShutdown = <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> setupGlobalMiddleware(api.Serve(setupMiddlewares))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><h2 id="Lambda関数インテグレーション"><a href="#Lambda関数インテグレーション" class="headerlink" title="Lambda関数インテグレーション"></a>Lambda関数インテグレーション</h2><p>go-swaggerで実装したWebアプリケーションサーバをLambda関数として動かすようにします。GoのLambda関数として有効なシグネチャは以下の通りです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- func ()</span><br><span class="line">- func () error</span><br><span class="line">- func (TIn), error</span><br><span class="line">- func () (TOut, error)</span><br><span class="line">- func (context.Context) error</span><br><span class="line">- func (context.Context, TIn) error</span><br><span class="line">- func (context.Context) (TOut, error)</span><br><span class="line">- func (context.Context, TIn) (TOut, error)</span><br></pre></td></tr></table></figure><p><code>TIn</code> や <code>TOut</code> は <code>encoding/json</code> でエンコード・デコードできる型を指定できます。</p><p>Lambda関数はAPI Gatewayのリクエストをトリガーに起動します。Lambda関数のAPI Gatewayのリクエスト <code>events.APIGatewayProxyResponse</code> をGoのHTTPサーバで扱えるような <code>*http.Request</code> に変換する必要があります。</p><ul><li><a href="https://github.com/awslabs/aws-lambda-go-api-proxy" target="_blank" rel="noopener">awslabs/aws-lambda-go-api-proxy</a></li></ul><p>を用いると簡単に変換することができます。もちろん <code>go-swagger</code> だけでなく主要なGoのWebアプリケーションフレームに対応しています。</p><ul><li>cmd/lambda/main.go</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/events"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line"><span class="string">"github.com/awslabs/aws-lambda-go-api-proxy/httpadapter"</span></span><br><span class="line"><span class="string">"github.com/d-tsuji/example/gen/restapi"</span></span><br><span class="line"><span class="string">"github.com/d-tsuji/example/gen/restapi/operations"</span></span><br><span class="line"><span class="string">"github.com/go-openapi/loads"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> httpAdapter *httpadapter.HandlerAdapter</span><br><span class="line"></span><br><span class="line"><span class="comment">// Handler handles API requests</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Handler</span><span class="params">(ctx context.Context, req events.APIGatewayProxyRequest)</span> <span class="params">(events.APIGatewayProxyResponse, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> httpAdapter == <span class="literal">nil</span> &#123;</span><br><span class="line">swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">api := operations.NewExampleAppAPI(swaggerSpec)</span><br><span class="line">server := restapi.NewServer(api)</span><br><span class="line">server.ConfigureAPI()</span><br><span class="line"></span><br><span class="line"><span class="comment">// see https://github.com/go-swagger/go-swagger/issues/962#issuecomment-478382896</span></span><br><span class="line">httpAdapter = httpadapter.New(server.GetHandler())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> httpAdapter.ProxyWithContext(ctx, req)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(Handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ビルド-デプロイ"><a href="#ビルド-デプロイ" class="headerlink" title="ビルド/デプロイ"></a>ビルド/デプロイ</h1><p>準備は整いました！Goのファイルをビルドしzip化してAWS Lambda関数にデプロイしましょう。デプロイのコマンドはMakefileにタスクとして記述していました。</p><ul><li>Makefile</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">deploy: zip</span></span><br><span class="line">aws lambda update-function-code --region ap-northeast-1 --function-name example-api --zip-file fileb://bin/lambda.zip</span><br></pre></td></tr></table></figure><p>それではビルドしてデプロイします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ make deploy</span><br><span class="line">go mod download</span><br><span class="line">go mod tidy</span><br><span class="line">GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags=<span class="string">"-s -w"</span> -trimpath -o bin/lambda cmd/lambda/main.go</span><br><span class="line">zip -j bin/lambda.zip bin/lambda</span><br><span class="line">updating: lambda (deflated 67%)</span><br><span class="line">aws lambda update-function-code --region ap-northeast-1 --<span class="keyword">function</span>-name example-api --zip-file fileb://bin/lambda.zip</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"FunctionName"</span>: <span class="string">"example-api"</span>,</span><br><span class="line">    <span class="string">"FunctionArn"</span>: <span class="string">"arn:aws:lambda:ap-northeast-1:123456789012:function:example-api"</span>,</span><br><span class="line">    <span class="string">"Runtime"</span>: <span class="string">"go1.x"</span>,</span><br><span class="line">    <span class="string">"Role"</span>: <span class="string">"arn:aws:iam::123456789012:role/example-lambda"</span>,</span><br><span class="line">    <span class="string">"Handler"</span>: <span class="string">"lambda"</span>,</span><br><span class="line">    <span class="string">"CodeSize"</span>: 5517317,</span><br><span class="line">    <span class="string">"Description"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="string">"Timeout"</span>: 900,</span><br><span class="line">    <span class="string">"MemorySize"</span>: 128,</span><br><span class="line">    <span class="string">"LastModified"</span>: <span class="string">"2020-09-22T08:56:19.019+0000"</span>,</span><br><span class="line">    <span class="string">"CodeSha256"</span>: <span class="string">"bV+3mzysyD5226diZpvjfpE+Qz6o5ZHT8y35fAB3I/M="</span>,</span><br><span class="line">    <span class="string">"Version"</span>: <span class="string">"<span class="variable">$LATEST</span>"</span>,</span><br><span class="line">    <span class="string">"Environment"</span>: &#123;</span><br><span class="line">        <span class="string">"Variables"</span>: &#123;</span><br><span class="line">            <span class="string">"DYNAMO_TABLE_USERS"</span>: <span class="string">"example-users"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"TracingConfig"</span>: &#123;</span><br><span class="line">        <span class="string">"Mode"</span>: <span class="string">"PassThrough"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"RevisionId"</span>: <span class="string">"26888c1b-bfa2-4e67-960e-3fd8212e29f2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のように出力されていればデプロイは完了です。継続的なデプロイを実施したい場合はdevelopブランチなどにPRがマージされたタイミングで開発環境にLambda関数をデプロイするといった内容をGitHub ActionsやCircleCIの設定に組み込むとよいでしょう。</p><p>さてCLIでDynamoDBにデータをPutして、APIのレスポンスを確認してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ aws dynamodb put-item --table-name example-users --item <span class="string">'&#123;"user_id": &#123;"S": "001"&#125;, "user_name": &#123;"S": "Gopher"&#125;&#125;'</span></span><br></pre></td></tr></table></figure><p>今回はお手軽にcurlでAPIにリクエストしてレスポンスを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ curl -i https://<span class="variable">$&#123;rest-api-id&#125;</span>.execute-api.ap-northeast-1.amazonaws.com/<span class="built_in">test</span>/v1/users</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 36</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Date: Mon, 21 Sep 2020 10:58:25 GMT</span><br><span class="line">x-amzn-RequestId: 89f88ada-ea48-4a60-a8ef-2b58df4309d1</span><br><span class="line">x-amz-apigw-id: TNoUxEJlNjMFdxg=</span><br><span class="line">X-Amzn-Trace-Id: Root=1-5f688751-c31c0c580cbe0f64d179578a;Sampled=0</span><br><span class="line">X-Cache: Miss from cloudfront</span><br><span class="line">Via: 1.1 48bf5adc2925386f020a8608d1c7edbe.cloudfront.net (CloudFront)</span><br><span class="line">X-Amz-Cf-Pop: NRT20-C3</span><br><span class="line">X-Amz-Cf-Id: GfDUO8SfL5POKkIVFVs5L-hJ8KkjwLCLf22xZmNWFiVkIQaHR2H4oA==</span><br><span class="line"></span><br><span class="line">[&#123;<span class="string">"name"</span>:<span class="string">"Gopher"</span>,<span class="string">"user_id"</span>:<span class="string">"001"</span>&#125;]</span><br></pre></td></tr></table></figure><p>API Gatewayから想定通りのレスポンスが返ってきました！本チュートリアルでは <code>/v1/users</code> へのGETリクエストのサンプルだけでしたが、新しいAPI定義が必要な場合 <code>swagger.yaml</code> に追加して本チュートリアルのようにすすめていけば容易に拡張することができます。</p><p>チュートリアルのすべてのサンプルはGitHubの以下のリポジトリにおいてあります。</p><table><thead><tr><th align="center">#</th><th>項目</th><th>リポジトリ</th></tr></thead><tbody><tr><td align="center">1</td><td>GoによるWebAPIの実装</td><td><a href="https://github.com/d-tsuji/serverless-api-go-tutorial" target="_blank" rel="noopener">d-tsuji/serverless-api-go-tutorial</a></td></tr><tr><td align="center">2</td><td>Terraformによるインフラ実装</td><td><a href="https://github.com/d-tsuji/serverless-api-infra-tutorial" target="_blank" rel="noopener">d-tsuji/serverless-api-infra-tutorial</a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの辻です。&lt;/p&gt;
&lt;p&gt;業務アプリケーションのビジネスロジックをサーバーレスで実装することも増えてきまし
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
      <category term="go-swagger" scheme="https://future-architect.github.io/tags/go-swagger/"/>
    
      <category term="サーバレス" scheme="https://future-architect.github.io/tags/%E3%82%B5%E3%83%BC%E3%83%90%E3%83%AC%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>CheetahGrid+Vue.jsをエンプラで使ってみた</title>
    <link href="https://future-architect.github.io/articles/20200924/"/>
    <id>https://future-architect.github.io/articles/20200924/</id>
    <published>2020-09-23T15:00:00.000Z</published>
    <updated>2020-09-24T05:35:54.525Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200924/top.png" class="img-small-size"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは！信田です。</p><p><a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>＋<a href="https://jp.vuejs.org/index.html" target="_blank" rel="noopener">Vue.js</a>でエンプラ系システム<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>を構築した際の、採用した理由と実装のポイントのご紹介をします。<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>について存じ上げないよーとか、触ったことがないよーという方は、<a href="https://future-architect.github.io/articles/20200901/">入門編</a>も御覧ください。</p><p>初めての投稿ですが、最後までお付き合いいただければ嬉しいです。</p><h2 id="ちょっとした自己紹介"><a href="#ちょっとした自己紹介" class="headerlink" title="ちょっとした自己紹介"></a>ちょっとした自己紹介</h2><ul><li>新卒で今の会社（<a href="https://www.future.co.jp/" target="_blank" rel="noopener">Future株式会社</a>）に入社して2020年時点で9年目</li><li>物流（5年）、公共インフラ（半年）、アパレル（3年）といった業界のお客様を経験</li><li>大規模プロジェクト（ピーク時100+名）に所属することが多い</li><li>エンプラアプリの要件定義～構築～運用保守を経験。主に、バックエンド系の経験が多くJavaやSQLでの開発経験を積む</li><li>並行して、開発環境の整備やアプリ実行環境の整備・運用といったインフラ寄りのミドルウェア領域を担当</li><li>現在は社内の技術系組織（<a href="https://www.future.co.jp/recruit/new/about/tech/engineers_corps/" target="_blank" rel="noopener">TIG</a>）に所属</li><li>フロントエンドの経験を積みたくなり、今回のプロジェクトにジョイン</li></ul><h1 id="CheetahGrid-Vue-jsの採用に至るまでの経緯"><a href="#CheetahGrid-Vue-jsの採用に至るまでの経緯" class="headerlink" title="CheetahGrid+Vue.jsの採用に至るまでの経緯"></a>CheetahGrid+Vue.jsの採用に至るまでの経緯</h1><h2 id="プロジェクト概要"><a href="#プロジェクト概要" class="headerlink" title="プロジェクト概要"></a>プロジェクト概要</h2><p><a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>＋<a href="https://jp.vuejs.org/index.html" target="_blank" rel="noopener">Vue.js</a>を採用した今回のプロジェクトをさらっとご紹介します。</p><ul><li>アパレルのお客様向けソリューションのフレームワーク刷新プロジェクト</li><li>業務ロジックの変更は基本的に行わない</li><li>旧は約10年前に構築し、JSF2（Primefaces）を採用</li><li>新ではVue.jsを採用</li><li>DBなどの他のミドルウェアもOSS利用に変更</li></ul><h2 id="課題"><a href="#課題" class="headerlink" title="課題"></a>課題</h2><p>今回の刷新をする上で、課題となっていたのは以下のような点です。</p><h3 id="画面描画のパフォーマンス問題"><a href="#画面描画のパフォーマンス問題" class="headerlink" title="画面描画のパフォーマンス問題"></a>画面描画のパフォーマンス問題</h3><p>様々な業界のエンプラシステムを構築する上で、必ず一度は苦しむであろうパフォーマンスチューニング。アパレル業界のお客様でも同様でした。例えば、「配分<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>」と呼ばれるディストリビューター業務があり、一覧部の項目数は店舗✕SKU<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>でかなりの数になります。結果として、JSFベースの画面では項目分だけ部品が描画されるなどHTMLが膨れ上がり、画面がもさっとしてしまっていました。実際に毎日業務で利用する人にとってはかなりのストレスになります。</p><p>この対応策として、</p><ul><li>必須の検索条件を増やして検索結果が膨らまないようにする</li><li>表示できる検索結果件数に制限を設ける（500件以上検索された場合はエラーにしたりアラートにしたり）</li><li>ページングや遅延ロードによって一度に表示する件数を減らす</li><li>遅いことを受け入れてもらう（←　運用回避という最終手段）</li></ul><p>といったことをしていました。</p><p>パフォーマンスが出ない画面で商用ライブラリを利用したこともありますが、「開発できる人が限られ、後々の運用にコストがかかる」、「ライセンス条項を気にする必要がある」など、商用ライブラリ特有の問題が発生したりしていました。</p><h3 id="Excel中心の業務設計"><a href="#Excel中心の業務設計" class="headerlink" title="Excel中心の業務設計"></a>Excel中心の業務設計</h3><p>エンプラでシステム化する際によく遭遇するのは、システム化前に利用していた仕組みの呪縛です。その中でも、システム化前にExcelで管理している業務は多く、マクロや関数などを利用して独自の進化を遂げ、一子相伝の秘伝のタレ化している業務に出会うことが多々あります。この問題点は、属人化だけではなく、VBAのバージョンによって動かなくなってしまうといった問題も孕んでいます。</p><p>昨今のシステムWeb化の流れがある中で、Excel業務が残っていてはWebだけでは完結できずシステム外の仕組みも残ってしまい、いつまでも業務的な負債を抱えた状態が続いてしまうことになります。</p><p>これらの課題を解決すべく候補として挙がったのが、<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>でした。</p><h1 id="実装例"><a href="#実装例" class="headerlink" title="実装例"></a>実装例</h1><p>今回のプロジェクトにおける<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>を用いた実装をいくつか紹介します。</p><h2 id="開発環境"><a href="#開発環境" class="headerlink" title="開発環境"></a>開発環境</h2><ul><li>Node.js(v14.4.0)</li><li>npm(6.14.5)</li><li>Nuxt.js(v2.13.3)</li><li>Cheetah Grid(0.22.3)</li></ul><p>npmでCheetah Gridを使用するには、下記のコマンドを実行してください。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -S cheetah-grid</span><br></pre></td></tr></table></figure><p>※開発環境については、<a href="https://future-architect.github.io/articles/20200901/">入門編の開発環境</a>に倣っています。</p><h2 id="実装した画面と全体ソース"><a href="#実装した画面と全体ソース" class="headerlink" title="実装した画面と全体ソース"></a>実装した画面と全体ソース</h2><p>今回実装した画面は以下です。<br><img src="/images/20200924/2020-09-23_20h26_14.png" alt=""><br>この画面全体のソースコードは以下です。</p><figure class="highlight html"><figcaption><span>sample.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 500px; border: solid 1px #ddd; margin: 50px;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputAllColumn1"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">        カラム1</span><br><span class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"inputAllColumn1"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">v-model</span>=<span class="string">"inputAllColumn1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">name</span>=<span class="string">"一括反映"</span></span></span><br><span class="line"><span class="tag">              @<span class="attr">click</span>=<span class="string">"onClickInputAllColumn1"</span>&gt;</span></span><br><span class="line">        一括反映</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">             <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">        行追加ボタン（最後尾に追加）</span><br><span class="line">      <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">name</span>=<span class="string">"行追加"</span></span></span><br><span class="line"><span class="tag">              @<span class="attr">click</span>=<span class="string">"onClickAddRow"</span>&gt;</span></span><br><span class="line">        行追加</span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">c-grid</span> <span class="attr">ref</span>=<span class="string">"grid"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:data</span>=<span class="string">"records"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:frozen-col-count</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">:allow-range-paste</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">              @<span class="attr">changed-value</span>=<span class="string">"onChangedValueRec($event)"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c-grid-column</span> <span class="attr">field</span>=<span class="string">"id"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">width</span>=<span class="string">"50"</span>&gt;</span></span><br><span class="line">          ID</span><br><span class="line">        <span class="tag">&lt;/<span class="name">c-grid-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c-grid-column</span> <span class="attr">width</span>=<span class="string">"50"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">:icon</span>=<span class="string">"getDeleteIcon"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">:action</span>=<span class="string">"onDelete"</span>&gt;</span></span><br><span class="line">          削除</span><br><span class="line">        <span class="tag">&lt;/<span class="name">c-grid-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c-grid-link-column</span> <span class="attr">href</span>=<span class="string">"link"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">:icon</span>=<span class="string">"getLinkIcon"</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">width</span>=<span class="string">"50"</span>&gt;</span></span><br><span class="line">          詳細</span><br><span class="line">        <span class="tag">&lt;/<span class="name">c-grid-link-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c-grid-input-column</span> <span class="attr">field</span>=<span class="string">"column1"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">width</span>=<span class="string">"auto"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">:message</span>=<span class="string">"validateNumCol"</span></span></span><br><span class="line"><span class="tag">                             @<span class="attr">changed-value</span>=<span class="string">"onChangedValueRec($event)"</span>&gt;</span></span><br><span class="line">          カラム1（数値1-4桁）</span><br><span class="line">        <span class="tag">&lt;/<span class="name">c-grid-input-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c-grid-input-column</span> <span class="attr">field</span>=<span class="string">"column2"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">width</span>=<span class="string">"auto"</span>&gt;</span></span><br><span class="line">          カラム2</span><br><span class="line">        <span class="tag">&lt;/<span class="name">c-grid-input-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">c-grid-input-column</span> <span class="attr">field</span>=<span class="string">"column3"</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">width</span>=<span class="string">"auto"</span>&gt;</span></span><br><span class="line">          カラム3</span><br><span class="line">        <span class="tag">&lt;/<span class="name">c-grid-input-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">c-grid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"grid-sample"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> * <span class="keyword">as</span> cGridAll <span class="keyword">from</span> <span class="string">'vue-cheetah-grid'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'service'</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">        ...cGridAll</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.setRecord()</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">          inputAllColumn1: <span class="literal">null</span>,</span></span><br><span class="line">          records: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 一覧に表示するデータを作成する</span><br><span class="line"><span class="actionscript">         * @<span class="keyword">return</span> &#123;<span class="keyword">void</span>&#125;</span></span><br><span class="line">         */</span><br><span class="line">        setRecord () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> vm = <span class="keyword">this</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span></span><br><span class="line">              vm.records.push(</span><br><span class="line">                &#123;</span><br><span class="line">                  id: i + 1,</span><br><span class="line"><span class="javascript">                  column1: <span class="string">`カラム1-<span class="subst">$&#123;i+<span class="number">1</span>&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">                  column2: <span class="string">`カラム2-<span class="subst">$&#123;i+<span class="number">1</span>&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">                  column3: <span class="string">`カラム3-<span class="subst">$&#123;i+<span class="number">1</span>&#125;</span>`</span>,</span></span><br><span class="line">                &#125;</span><br><span class="line">              )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 削除ボタン押下イベント</span><br><span class="line">         * @param &#123;object&#125; rec 行データ</span><br><span class="line"><span class="actionscript">         * @<span class="keyword">return</span> &#123;<span class="keyword">void</span>&#125;</span></span><br><span class="line">         */</span><br><span class="line">        onDelete (rec) &#123; </span><br><span class="line"><span class="actionscript">            <span class="keyword">const</span> vm = <span class="keyword">this</span></span></span><br><span class="line"><span class="actionscript">            vm.$<span class="keyword">delete</span>(vm.records, vm.records.indexOf(rec));</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 行追加ボタン押下イベント</span><br><span class="line"><span class="actionscript">         * @<span class="keyword">return</span> &#123;<span class="keyword">void</span>&#125;</span></span><br><span class="line">         */</span><br><span class="line">        onClickAddRow () &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">const</span> vm = <span class="keyword">this</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> maxId = <span class="number">0</span></span></span><br><span class="line"><span class="javascript">          vm.records.forEach(<span class="function"><span class="params">rec</span> =&gt;</span> &#123;</span></span><br><span class="line">            if( rec.id &gt; maxId ) &#123;</span><br><span class="line">              maxId = rec.id</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">          vm.records.push(</span><br><span class="line">            &#123;</span><br><span class="line">              id: maxId + 1,</span><br><span class="line"><span class="javascript">              column1: <span class="string">`カラム1-<span class="subst">$&#123;maxId+<span class="number">1</span>&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">              column2: <span class="string">`カラム2-<span class="subst">$&#123;maxId+<span class="number">1</span>&#125;</span>`</span>,</span></span><br><span class="line"><span class="javascript">              column3: <span class="string">`カラム3-<span class="subst">$&#123;maxId+<span class="number">1</span>&#125;</span>`</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          )</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 行変更イベント処理</span><br><span class="line">         * @param &#123;object&#125; event イベントオブジェクト</span><br><span class="line"><span class="actionscript">         * @returns &#123;<span class="keyword">void</span>&#125;</span></span><br><span class="line">         */</span><br><span class="line">        onChangedValueRec (event) &#123;</span><br><span class="line"><span class="actionscript"><span class="comment">//          alert(`カラムの値が変わったよ：$&#123;event.value&#125;`)</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        /**</span><br><span class="line">         * カラム1一括反映ボタンクリックイベント</span><br><span class="line"><span class="actionscript">         * @returns &#123;<span class="keyword">void</span>&#125;</span></span><br><span class="line">         */</span><br><span class="line">        onClickInputAllColumn1 () &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">const</span> vm = <span class="keyword">this</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; vm.records.length ; i++ ) &#123;</span></span><br><span class="line">            vm.records[i].column1 = vm.inputAllColumn1</span><br><span class="line">          &#125;</span><br><span class="line"><span class="actionscript">          <span class="comment">// 再描画</span></span></span><br><span class="line">          vm.$refs.grid.invalidate()</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 数値カラムのバリデーションメソッド</span><br><span class="line">         * @param &#123;object&#125; rec 一行データ</span><br><span class="line"><span class="javascript">         * @returns &#123;<span class="built_in">String</span>&#125; メッセージ</span></span><br><span class="line">         */</span><br><span class="line">        validateNumCol (rec) &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> !rec.column1.match(<span class="string">'^[0-9]&#123;1,4&#125;$'</span>) ? <span class="string">'エラー：1から4桁の数値を入力してください。'</span> : <span class="string">''</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 遷移用アイコンを取得する</span><br><span class="line"><span class="actionscript">         * @<span class="keyword">return</span> &#123;object&#125; アイコン情報</span></span><br><span class="line">         */</span><br><span class="line">        getLinkIcon () &#123;</span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">                className: <span class="string">'material-icons'</span>,</span></span><br><span class="line"><span class="actionscript">                content: <span class="string">'link'</span>,</span></span><br><span class="line"><span class="actionscript">                color: <span class="string">'cornflowerblue'</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 削除用アイコンを取得する</span><br><span class="line"><span class="actionscript">         * @<span class="keyword">return</span> &#123;object&#125; アイコン情報</span></span><br><span class="line">         */</span><br><span class="line">        getDeleteIcon () &#123;</span><br><span class="line"><span class="actionscript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">            className: <span class="string">'material-icons'</span>,</span></span><br><span class="line"><span class="actionscript">            content: <span class="string">'delete'</span>,</span></span><br><span class="line"><span class="actionscript">            color: <span class="string">'deepskyblue'</span></span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="範囲ペースト機能"><a href="#範囲ペースト機能" class="headerlink" title="範囲ペースト機能"></a>範囲ペースト機能</h2><p>まずは範囲ペースト機能です。クリップボードにコピーしたTSVデータを貼り付けてGrid上に反映することができます。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c-grid</span> <span class="attr">ref</span>=<span class="string">"grid"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:data</span>=<span class="string">"records"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:frozen-col-count</span>=<span class="string">"3"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:allow-range-paste</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">changed-value</span>=<span class="string">"onChangedValueRec($event)"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>範囲ペーストを有効化するには<code>c-grid</code>に<code>:allow-range-paste=&quot;true&quot;</code>を指定するだけです！</p><p>以下のようなExcel上のデータをコピーし、</p><img src="/images/20200924/2020-09-22_00h23_27.png" class="img-small-size"><p><code>Ctrl+V</code>でペーストして反映します。</p><p><img src="/images/20200924/capture-range-paste_(1).gif" alt=""></p><p>また、以下のようにExcel操作でよく使う<code>Ctrl+down</code>で全選択してコピーするような一括ペーストも<code>c-grid</code>上で可能になっています。</p><p><img src="/images/20200924/capture-copy-and-paste-row_(1).gif" alt=""></p><p>この範囲ペースト機能を利用すればWeb上でExcelライクな操作が可能となり、既存の仕組みがExcel運用だったとしても<code>c-grid</code>へ置き換えることも現実的な選択肢となりうると思います。</p><p>実際に今回のプロジェクトにおいてはExcel運用をやめ、<code>c-grid</code>を利用したWeb上での運用に置き換えを行いました。</p><h2 id="一括反映"><a href="#一括反映" class="headerlink" title="一括反映"></a>一括反映</h2><p>一括反映は<code>c-gird</code>の外から値を反映するための仕組みの一例として紹介します。</p><p>範囲ペースト機能を利用して列単位に一括して反映でも同じ効果を得られますが、こちらを利用すればすべてがWeb上のみ（クリップボードも利用しない）で完結させることが可能になります。</p><figure class="highlight html"><figcaption><span>templateタグ内</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"inputAllColumn1"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br><span class="line">  カラム1</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"inputAllColumn1"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">type</span>=<span class="string">"text"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">v-model</span>=<span class="string">"inputAllColumn1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"一括反映"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">click</span>=<span class="string">"onClickInputAllColumn1"</span>&gt;</span></span><br><span class="line">  一括反映</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>scriptタグ内</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * カラム1一括反映ボタンクリックイベント</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">onClickInputAllColumn1 () &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; vm.records.length ; i++ ) &#123;</span><br><span class="line">    vm.records[i].column1 = vm.inputAllColumn1</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 再描画</span></span><br><span class="line">  vm.$refs.grid.invalidate()</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="/images/20200924/capture-inpute-all.gif" alt=""></p><p>仕組みは簡単で、一括反映ボタンの<code>click</code>イベントにて<code>c-grid</code>で表示しているデータセットの値を<code>c-gird</code>外の<code>inputAllColumn1</code>で置き換えています。<br>ここでミソなのが、<strong>再描画</strong>（<code>vm.$refs.grid.invalidate()</code>）です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      inputAllColumn1: null,</span><br><span class="line">      records: []</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>records: []</code>で定義しているため、<code>records</code>の各要素はリアクティブな変更の対象となりません。<br>そこで、JavaScriptで変更した値を<code>c-grid</code>で表示させるために<code>c-grid</code>の<a href="https://future-architect.github.io/cheetah-grid/documents/api/vue/components/CGrid.html#methods">invalidate API</a>を利用して、変更後の<code>records</code>で再描画させています。<br>※<code>vm.$refs.grid.invalidate()</code>をコメントアウトすると、一括反映ボタンを押下しても見た目には何も起こりませんが、<code>records</code>の値は変更された状態になります。</p><p><code>records</code>の値を設定する際に<code>$set</code>でリアクティブにしたりすることも可能ではあります。ただし、エンプラで利用する際にはサーバ側の検索APIを叩いてその結果が<code>records</code>に入ることになり、検索結果の件数によってはパフォーマンス悪化の要因になりえますし、返却する項目名も変わる可能性があります。そのため、今回の実装のように再描画を一度やってしまう方が全体的なパフォーマンスとしては良いものになるのではないかと思います。なんと言っても、<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>は描画がめちゃくちゃ早いので再描画でもストレスはありません😎</p><h3 id="行追加"><a href="#行追加" class="headerlink" title="行追加"></a>行追加</h3><p>エンプラでの利用シーンとしては、明細行を追加したい場合などで、アパレルでは材料メーカーへの支払明細の追加などが例として挙げられます。</p><figure class="highlight plain"><figcaption><span>templateタグ内</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;label for&#x3D;&quot;&quot;</span><br><span class="line">       type&#x3D;&quot;text&quot;&gt;</span><br><span class="line">  行追加ボタン（最後尾に追加）</span><br><span class="line">&lt;&#x2F;label&gt;</span><br><span class="line">&lt;button type&#x3D;&quot;button&quot;</span><br><span class="line">        name&#x3D;&quot;行追加&quot;</span><br><span class="line">        @click&#x3D;&quot;onClickAddRow&quot;&gt;</span><br><span class="line">  行追加</span><br><span class="line">&lt;&#x2F;button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>scriptタグ内</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 行追加ボタン押下イベント</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">onClickAddRow () &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="keyword">this</span></span><br><span class="line">  <span class="keyword">let</span> maxId = <span class="number">0</span></span><br><span class="line">  vm.records.forEach(<span class="function"><span class="params">rec</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>( rec.id &gt; maxId ) &#123;</span><br><span class="line">      maxId = rec.id</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  vm.records.push(</span><br><span class="line">    &#123;</span><br><span class="line">      id: maxId + <span class="number">1</span>,</span><br><span class="line">      column1: <span class="string">`カラム1-<span class="subst">$&#123;maxId+<span class="number">1</span>&#125;</span>`</span>,</span><br><span class="line">      column2: <span class="string">`カラム2-<span class="subst">$&#123;maxId+<span class="number">1</span>&#125;</span>`</span>,</span><br><span class="line">      column3: <span class="string">`カラム3-<span class="subst">$&#123;maxId+<span class="number">1</span>&#125;</span>`</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="/images/20200924/capture-add-row_(1).gif" alt=""><br>実装としては、IDの最大値＋１を計算し、<code>records</code>へ追加しています。これだけで<code>c-grid</code>に新たな行を追加することが可能です。</p><h3 id="入力データのバリデーション"><a href="#入力データのバリデーション" class="headerlink" title="入力データのバリデーション"></a>入力データのバリデーション</h3><p>エンプラ以外でも必須の機能と言っても過言ではない画面入力値のバリデーション実装です。</p><figure class="highlight plain"><figcaption><span>templateタグの実装（c-grid内の各カラム）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;c-grid-input-column field&#x3D;&quot;column1&quot;</span><br><span class="line">                     width&#x3D;&quot;auto&quot;</span><br><span class="line">                     :message&#x3D;&quot;validateNumCol&quot;</span><br><span class="line">                     @changed-value&#x3D;&quot;onChangedValueRec($event)&quot;&gt;</span><br><span class="line">  カラム1（数値1-4桁）</span><br><span class="line">&lt;&#x2F;c-grid-input-column&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>scriptタグの実装（c-grid内の各カラム）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数値カラムのバリデーションメソッド</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> </span>rec 一行データ</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;String&#125;</span> </span>メッセージ</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">validateNumCol (rec) &#123;</span><br><span class="line">  <span class="keyword">return</span> !rec.column1.match(<span class="string">'^[0-9]&#123;1,4&#125;$'</span>) ? <span class="string">'エラー：1から4桁の数値を入力してください。'</span> : <span class="string">''</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><img src="/images/20200924/2020-09-23_21h08_40.png" class="img-small-size"><p><code>:message=&quot;validateNumCol&quot;</code>にてバリデーション用の関数を呼び出し、エラーの場合にエラーメッセージを返却するように実装します。カラム1のいずれかに4桁以内の数字<strong>以外</strong>を入力した場合にエクスクラメーションマークが表示されることが確認できるでしょう。</p><p>引数には一行データ（rec）がバインドされるようになっているので、他のカラムとの相関バリデーションも実装することができます。</p><h3 id="イベント処理"><a href="#イベント処理" class="headerlink" title="イベント処理"></a>イベント処理</h3><p>カラムの値が変わった場合やフォーカスした場合など、何かしらのイベント処理を行う場合の実装です。<br><strong>※<code>alert(&#39;カラムの値が変わったよ&#39;)</code>のコメントアウトを外してください。</strong></p><figure class="highlight plain"><figcaption><span>templateタグの実装（c-grid内の各カラム）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;c-grid-input-column field&#x3D;&quot;column1&quot;</span><br><span class="line">                     width&#x3D;&quot;auto&quot;</span><br><span class="line">                     :message&#x3D;&quot;validateNumCol&quot;</span><br><span class="line">                     @changed-value&#x3D;&quot;onChangedValueRec($event)&quot;&gt;</span><br><span class="line">  カラム1（数値1-4桁）</span><br><span class="line">&lt;&#x2F;c-grid-input-column&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><figcaption><span>scriptタグの実装（c-grid内の各カラム）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 行変更イベント処理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;object&#125;</span> </span>event イベントオブジェクト</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="type">&#123;void&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">onChangedValueRec (event) &#123;</span><br><span class="line">  alert(<span class="string">`カラムの値が変わったよ：<span class="subst">$&#123;event.value&#125;</span>`</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><img src="/images/20200924/2020-09-23_21h14_26.png" class="img-middle-size"><p>今回は各<code>c-grid</code>コンポーネントの<code>changed-value</code>イベントの関数（<code>onChangedValueNumCol($event)</code>）内でダイアログ表示するようにしています。</p><p>カラム入力値は<code>event.value</code>、一行データは<code>event.record</code>のようにイベントオブジェクトから取得でき、関数内で利用することが可能です。</p><p>また、<code>c-grid</code>自体にもイベントのバインドが可能です。</p><figure class="highlight plain"><figcaption><span>templateタグの実装（c-grid全体）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;c-grid ref&#x3D;&quot;grid&quot;</span><br><span class="line">        :data&#x3D;&quot;records&quot;</span><br><span class="line">        :frozen-col-count&#x3D;&quot;3&quot;</span><br><span class="line">        :allow-range-paste&#x3D;&quot;true&quot;</span><br><span class="line">        @changed-value&#x3D;&quot;onChangedValueRec($event)&quot;&gt;</span><br></pre></td></tr></table></figure><p>他にもバインド可能なイベントは用意されていますが、各<code>c-grid-*</code>コンポーネントによって利用できるイベントも異なるので<a href="https://future-architect.github.io/cheetah-grid/documents/api/vue/components/">コンポーネント一覧ページ</a>より利用可能なイベントを確認して実装してみてください。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><h2 id="恩恵"><a href="#恩恵" class="headerlink" title="恩恵"></a>恩恵</h2><p>今回のプロジェクトにおいては<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>を利用することで画面描画までの速度が大幅に改善しました。今回のフレームワーク刷新に伴って開発時に新旧画面を比較しつつ実装するわけですが、同じデータ量で比べた場合に旧で30秒くらい待っていたのが、新では数秒で描画できてしまうのを体感すると本当に感動します。（<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>の速度について詳しくは<a href="https://future-architect.github.io/cheetah-grid/documents/introduction/">こちら</a>）</p><p>上記のサンプルコードでも画面表示してもらえるとわかりますが、6カラムを1,000レコード描画するのにかかる時間はトータル1～2秒ほどでした。（ちなみに、6カラム✕100,000レコードでも1.5秒ほどです。）</p><p>この圧倒的な速さの恩恵を<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>を採用するだけで得られるのです。</p><p>また、Excelライクな操作について今回はコピー＆ペイストについてご紹介しましたが、「入力データのバリデーション」でご紹介したとおり各イベントのバインドが可能であり呼び出す関数内でJavaScriptを実行できることから、Excelの機能、ましてや、Excelでは実現が難しい機能でも実装できる、という業務をWeb上で完結させる可能性も垣間見れたのではないでしょうか。</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>見ていただいたとおり<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>は描画は非常に早いのですが、イベント処理やバリデーションロジックの実装は開発者の腕次第です。よって、場合にによっては描画以外の部分で時間がかかり、全体として遅くなってしまいます。例えば、毎回全データのチェックが走るような書き方をしてしまうと、カラムクリックや入力のたびに画面がもっさりしてしまうので、ボタン押下時だけにチェックを寄せるなどのロジックの最適化は必要になります。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>弊社内でも<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>＋<a href="https://jp.vuejs.org/index.html" target="_blank" rel="noopener">Vue.js</a>の組み合わせで本格的に業務システムを作成した初のプロジェクトだったこともあり手探りでの開発ではありましたが、これまでのエンプラのフロントエンド開発で苦労した点がほとんど問題にならず、使ってみてホントに良いなと思いました。</p><p>ある先輩は、「お客様は我々と業務要件を詰めることはできるが、パフォーマンスはお客様にはどうしようもない。だけど、使ってみて実は一番気になるのは動作が遅かった場合だし遅いと使ってくれない。だからこそプロとしてパフォーマンスに妥協してはいけない。」のようなことを言っていて感銘を受けたものです。それもあって私自身もいくつかのプロジェクトで遅い画面というものに出会うことは少なくなく毎回考えを振り絞ってきたわけですが、<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>を利用すればそれらのいくつかの解になり得るものだと思いました。</p><p>チューニングによってパフォーマンスが改善していくのも気持ちがいいものでその機会が減ってしまうのはちょっぴり悲しさもありますが😅、最初から速いに越したことはないですよね！</p><p>パフォーマンスが遅くて困っている方、<a href="https://future-architect.github.io/cheetah-grid/">CheetahGrid</a>ぜひ試してみてください！</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">配分：各店舗の売上や在庫、納品の管理や分析を行い、どの店舗にどのような商品をどれだけ割り振るかを決める業務</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">SKU：Stock Keeping Unit。商品の管理単位。アパレルではブランド・商品番号・サイズ・カラーの組み合わせとすることが多い</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">エンタプライズ系システムのこと。 https://www.ipa.go.jp/sec/softwareengineering/std/ent.html</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200924/top.png&quot; class=&quot;img-small-size&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こ
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
      <category term="CheetahGrid" scheme="https://future-architect.github.io/tags/CheetahGrid/"/>
    
      <category term="エンタープライズ" scheme="https://future-architect.github.io/tags/%E3%82%A8%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%97%E3%83%A9%E3%82%A4%E3%82%BA/"/>
    
  </entry>
  
  <entry>
    <title>久しぶりに社内LT大会を開催しました。2020 Summer</title>
    <link href="https://future-architect.github.io/articles/20200923/"/>
    <id>https://future-architect.github.io/articles/20200923/</id>
    <published>2020-09-22T15:00:00.000Z</published>
    <updated>2020-09-23T01:28:20.962Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200923/couple_kimodameshi.png" class="img-small-size"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>2020年8月28日(金）に社内LT大会を（久しぶりに）開催しました。</p><ul><li>過去のLT大会の開催記事は<a href="https://future-architect.github.io/tags/LT/">こちら</a>に書いています。</li></ul><p>どれくらい久しぶりかと言うと、2016年は5回・2017年は4回・2018年に1回・2019年は0回という頻度で分かるように、最初に面白がって連発したものの、途中で息切れしフェードアウトしちゃったので、約1.5年ぶりの復活です。</p><p>今後は年2回というサステナビリティあふれる設計にしようと運営メンバーで決めました。名前にSummer・Winterと付けるとカッコいいよねということで季節縛りで開催して行こうと思っています。</p><p>このあたりの復活の経緯などは未来報に記事を書かれる予定です。</p><h1 id="LT大会とは"><a href="#LT大会とは" class="headerlink" title="LT大会とは"></a>LT大会とは</h1><p>LT(Lightning Talk)とは5分程度の短いプレゼンテーションと言われています。ライトニングトークの略なのですが、IT界隈ではエルティーと略す人が多いかなと思います。</p><p>何人集まったらLT”大会”になるのかは諸説あるかと思いますが、6人くらい集まれば大会なんじゃないでしょうか。</p><h1 id="LTテーマ"><a href="#LTテーマ" class="headerlink" title="LTテーマ"></a>LTテーマ</h1><p>LT 大会 Summerということで以下3つのテーマで募集しています。</p><ol><li>肝試し</li><li>夏休みの自由研究したこと</li><li>リモートワークにオススメすること、開発環境</li></ol><p>今回のLT大会は、だいたい150人以上が常に視聴してくれていたり、一度でもログインしてくれた人もいれると180名近くでした。新卒採用チームの盛岡さんが魅力的に呼びかけた結果、そのうち100名ほどが内定者の方だったのが驚きでした。（社員より多い！笑）</p><h1 id="資料"><a href="#資料" class="headerlink" title="資料"></a>資料</h1><p>公開されている資料たちです。OPトークには技術部門トップの宮原さんや、SAIG塚本さんが自由研究や肝試しのテーマで話してくれました。OPトークは10分枠とLTではなかったのですが、さすがの安定感で全員すぐ引き込まれました。</p><h2 id="Talk1-村田さん-引きこもって作ってみた！おうちKubernetes-with-ラズパイ"><a href="#Talk1-村田さん-引きこもって作ってみた！おうちKubernetes-with-ラズパイ" class="headerlink" title="Talk1 村田さん: 引きこもって作ってみた！おうちKubernetes with ラズパイ"></a>Talk1 村田さん: 引きこもって作ってみた！おうちKubernetes with ラズパイ</h2><script async class="speakerdeck-embed" data-id="2d88a8b0c5b340b4864a73dc04231452" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><h2 id="Talk2-平本さん-自作キーボードの紹介をする予定です。在宅だからこそ据え置きキーボードにこだわろう！"><a href="#Talk2-平本さん-自作キーボードの紹介をする予定です。在宅だからこそ据え置きキーボードにこだわろう！" class="headerlink" title="Talk2 平本さん:  自作キーボードの紹介をする予定です。在宅だからこそ据え置きキーボードにこだわろう！"></a>Talk2 平本さん:  自作キーボードの紹介をする予定です。在宅だからこそ据え置きキーボードにこだわろう！</h2><iframe src="//www.slideshare.net/slideshow/embed_code/key/3m1cPJf3QMANGH" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/KazutoshiHiramoto/handmade-keyboard-238360094" title="Handmade keyboard" target="_blank">Handmade keyboard</a> </strong> from <strong><a href="https://www.slideshare.net/KazutoshiHiramoto" target="_blank">KazutoshiHiramoto</a></strong> </div><h2 id="Talk3-伊藤さん-kaggle、競プロやりませんか、両方始めてみたので両方の魅力を比較"><a href="#Talk3-伊藤さん-kaggle、競プロやりませんか、両方始めてみたので両方の魅力を比較" class="headerlink" title="Talk3 伊藤さん: kaggle、競プロやりませんか、両方始めてみたので両方の魅力を比較"></a>Talk3 伊藤さん: kaggle、競プロやりませんか、両方始めてみたので両方の魅力を比較</h2><script async class="speakerdeck-embed" data-id="771ff91e97ea4d13a4497148b6884329" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><h2 id="Talk4-澁川さん-gobotでGUIアプリを作ってみる"><a href="#Talk4-澁川さん-gobotでGUIアプリを作ってみる" class="headerlink" title="Talk4 澁川さん: gobotでGUIアプリを作ってみる"></a>Talk4 澁川さん: gobotでGUIアプリを作ってみる</h2><script async class="speakerdeck-embed" data-id="341ddd45a53141b289b8f0e2f3cda4cb" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><h2 id="Talk6-藤さん-コスパ最強エクササイズ-1日4分でできるHIITバーピーのすすめ"><a href="#Talk6-藤さん-コスパ最強エクササイズ-1日4分でできるHIITバーピーのすすめ" class="headerlink" title="Talk6 藤さん: コスパ最強エクササイズ　1日4分でできるHIITバーピーのすすめ"></a>Talk6 藤さん: コスパ最強エクササイズ　1日4分でできるHIITバーピーのすすめ</h2><script async class="speakerdeck-embed" data-id="763ac07f4ee946ad9660361ac28bf3f3" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><h2 id="Talk7-仁木さん-リモート新人研修下で競技プログラミングのバーチャルコンテストを実施した話"><a href="#Talk7-仁木さん-リモート新人研修下で競技プログラミングのバーチャルコンテストを実施した話" class="headerlink" title="Talk7 仁木さん: リモート新人研修下で競技プログラミングのバーチャルコンテストを実施した話"></a>Talk7 仁木さん: リモート新人研修下で競技プログラミングのバーチャルコンテストを実施した話</h2><iframe src="//www.slideshare.net/slideshow/embed_code/key/EZaqcb8UU9PwT6" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/MiraiNiki/ss-238398972" title="リモート新人研修下で競技プログラミングのバーチャルコンテストを実施した話" target="_blank">リモート新人研修下で競技プログラミングのバーチャルコンテストを実施した話</a> </strong> from <strong><a href="https://www.slideshare.net/MiraiNiki" target="_blank">MiraiNiki</a></strong> </div><h2 id="Talk8-井上さん-本当は怖い、フリーWiFiの話"><a href="#Talk8-井上さん-本当は怖い、フリーWiFiの話" class="headerlink" title="Talk8 井上さん: 本当は怖い、フリーWiFiの話"></a>Talk8 井上さん: 本当は怖い、フリーWiFiの話</h2><iframe src="//www.slideshare.net/slideshow/embed_code/key/FSYFL3VNjHJukI" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/hogehuga/wifilt" title="本当は怖いフリーWiFi(社内怪談LT)" target="_blank">本当は怖いフリーWiFi(社内怪談LT)</a> </strong> from <strong><a href="https://www.slideshare.net/hogehuga" target="_blank">hogehuga</a></strong> </div><h1 id="復活した-Future-LT-大会はここが変わった"><a href="#復活した-Future-LT-大会はここが変わった" class="headerlink" title="復活した Future LT 大会はここが変わった"></a>復活した Future LT 大会はここが変わった</h1><p>運営の裏話的なところになりますが、仕切り直しという意味で色々運営ポリシーを変えました。</p><ul><li>フルリモート開催になりました<ul><li>Zoomをフル活用しています</li><li>フルリモートなので当然、飲食🍕🍻を出すことは無くなりました</li></ul></li><li>テーマは技術色一本で<ul><li>従来はマイホーム住宅ローンや、ハイキック（物理）の話も許容していましたが、真面目に技術テーマと混ぜると聞いていてよく分からなくなるので、基本テックネタに限ることにしました（運営から応募選考する時にあまりにも面白そうなら通すことはあります）</li></ul></li><li>景品<ul><li>豪華景品（2~3万円くらいのキーボードとか）を出していましたが、配送が大変だったり経費精算が大変すぎるので辞めました</li><li>やはり金銭的な報酬は原資に限りがあるのと、豪華な景品だからといって登壇者の量・質が上がるわけではないのと、換金性の高い景品は監査的に問題があったり（そもそも社内審査が降りない）など、運営不可も大きいので辞めました</li><li>優勝者には豪華景品として、みんなで拍手と次回LT大会での宣伝枠を与えるという、何物にも代えがたいモノを与えることにしました</li></ul></li></ul><p>よりLTに集中できるように色々余計なものを削ぎ落として改善しました（運営にも優しい！）。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>次回2021年2月にLT大会 Winterを開催予定です。</p><p>次はグループ会社の方に呼びかけてさらに盛り上げたり、縁がある社外の人も呼び込みたい構え！グループの皆さん、見ていたら住田さんに連絡してください！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200923/couple_kimodameshi.png&quot; class=&quot;img-small-size&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="culture" scheme="https://future-architect.github.io/categories/culture/"/>
    
    
      <category term="LT" scheme="https://future-architect.github.io/tags/LT/"/>
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>フューチャーのインターンEngineer Campに参加した話</title>
    <link href="https://future-architect.github.io/articles/20200921/"/>
    <id>https://future-architect.github.io/articles/20200921/</id>
    <published>2020-09-20T15:00:00.000Z</published>
    <updated>2020-09-18T11:54:58.943Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20200921/%E5%9B%B32.png" alt=""></p><h1 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h1><p>はじめまして。フューチャーのインターンEngineer Campに参加させていただいた岡部です。</p><p>今回はタイトルにもある通り、2020年エンジニアキャンプのインターンの内容、学びについてお話しさせていただきます。</p><p><a href="https://www.future.co.jp/" target="_blank" rel="noopener">フューチャー</a>は様々な業界でITコンサルティングを行っている企業であり、今回はそのITの部分を主に体験するエンジニア向けインターンEngineer Campについてのお話です。</p><h1 id="インターン参加まで"><a href="#インターン参加まで" class="headerlink" title="インターン参加まで"></a>インターン参加まで</h1><h2 id="参加動機"><a href="#参加動機" class="headerlink" title="参加動機"></a>参加動機</h2><p>このコロナ禍で家からも出にくい中、せっかくの長期休暇を有意義に使いたいな～ということで以下の基準でインターンシップを探していました。</p><ul><li>ある程度の期間しっかりと開発に取り組める</li><li>自分の技術力を高めることにつながる</li><li>実際の仕事の雰囲気を味わえる</li><li><del>お金がもらえる💰</del></li></ul><p>そんな中、このEngineer Campのインターンは自分の希望を全て満たしていると考えたため応募しました。</p><h2 id="参加前のスキル"><a href="#参加前のスキル" class="headerlink" title="参加前のスキル"></a>参加前のスキル</h2><p>今回のインターンシップ参加前は、IT系企業のアルバイトでPythonを、競技プログラミングのコンテストへの参加でC++を書いていた程度でいわゆるすごい成果物やカッコいいスキルを持っているわけではありませんでした。</p><p>とりあえずダメ元で応募したのを覚えています。</p><h2 id="インターン参加までの流れ"><a href="#インターン参加までの流れ" class="headerlink" title="インターン参加までの流れ"></a>インターン参加までの流れ</h2><p>エントリーシートの提出後、コーディングテストとオンライン面接を受けました。社内に競技プログラミング部があるということで、コーディングテストはバランスの取れた難易度でした。また面接も標準的な内容でしたが、話す際にこちらの発言に対して細かいリアクションをいただけたためとても話しやすかったのが印象的でした。</p><p>結果として合格をいただき、「⑥モビリティサービスプラットフォーム開発🚗」のプロジェクトに関わらせていただくことになりました。</p><p>今回のEngineer Campでは私が参加したもの以外にも様々なコースが用意されていました。どれも面白そうな内容なので、<a href="https://future-architect.github.io/articles/20200606/">こちら</a>のインターン募集記事や<a href="https://future-architect.github.io/articles/20200913/">別プロジェクトの方の参加記</a>もぜひご覧下さい。</p><p>また、今回のインターンは社会情勢の影響もありフルリモートでの開催となりました。私のような地方在住の人間にとっては大都会東京へ行く貴重な機会を失ってしまうこととなり非常に残念でしたが、そんな中でもストレスなく働くことが出来るよう開催前から多大なサポートをいただきました。具体的には、作業用のPCの貸与や受入先プロジェクトの方との面談を行っていただいたため、作業の空気感を掴んだ状態で開始当日を迎えることが出来ました。</p><h1 id="インターン本番"><a href="#インターン本番" class="headerlink" title="インターン本番"></a>インターン本番</h1><h2 id="インターンでしたこと"><a href="#インターンでしたこと" class="headerlink" title="インターンでしたこと"></a>インターンでしたこと</h2><p>今回のインターンでは、あるAPIを用いてVue.jsでアプリケーションを1つ立案から実装まで4週間で行うことを目標にしました。</p><p>制作するアプリケーションについて大まかなテーマは与えられていましたが、具体的な機能や構成などは社員の方々と相談して作り上げていく必要がありました。そのため、最初の1週間は市場調査や現行のサービスの良い点と改善出来る点を洗い出すことにほとんどを費やしました。自分達が作るものについてここまで真剣に議論する機会は今まで無かったため、難しさもありましたが非常に刺激的で良い経験になったと思います。</p><h2 id="インターン生の1日"><a href="#インターン生の1日" class="headerlink" title="インターン生の1日"></a>インターン生の1日</h2><p>期間中、1日の流れは以下のようになっていました。</p><p><strong>9:30～ 作業開始</strong><br>貸与PCを立ち上げて作業を開始します。<br>Slackに今日やる予定のタスクを書きだし、メールや社内チャットを確認してから業務に移ります。<br><strong>10:30～ 朝会</strong><br>プロジェクト内のメンバー同士で、自分の前日までの進捗と今日行う予定の内容を共有します。<br>プロジェクト全体の予定の調整など、仕事のリアルな空気感の一端に触れることが出来ます。もちろん自分の予定なども発言するので、困っている部分があれば共有してすぐに助けていただくことも可能でした。<br><strong>12:00～ お昼休憩</strong><br>1時間の休憩を取ります。リモートでの開催なので、ご飯を食べたり家事をしたりとかなり自由に過ごしていました。インターン生同士のランチ会も開催されており、オンラインでも他の参加者の方との親睦を深めることが出来ました。<br><strong>13:00～ 午後の作業</strong><br>休憩でリフレッシュしたら、午後の作業に取り掛かります。<br>分からないことがあればSlackで質問するとメンターの方がすぐに飛んできて一緒に解決策を考えていただけます。リモートワークで画面を見せて手元で説明できないなど難しい点もありましたが、いくつかの区切りでオンライン会議を開きアプリのデモなどを行いながら途中経過を報告する機会を作っていただけました。<br>また、インターン生に向けて各部門のトップの方が行う講義も開催されました。どの登壇者の方もそれぞれ強烈な個性があり、これからに向けて非常に大きな刺激となりました。<br><strong>18:30～ 作業終了</strong><br>その日の内容を日報に書き、社員の方に報告して1日の作業終了です。<br>日によってはこの後にオンライン飲みや競技プログラミングのバーチャルコンテストが開催され、他の参加者の方や社員の方と交流します。</p><p><img src="/images/20200921/vc.jpg" alt=""></p><h2 id="インターンでの学び"><a href="#インターンでの学び" class="headerlink" title="インターンでの学び"></a>インターンでの学び</h2><p>今回のインターンでは技術面、ビジネス面の両面で成長することが出来たように感じます。</p><h3 id="技術面"><a href="#技術面" class="headerlink" title="技術面"></a>技術面</h3><p>まず、技術面ではVue.js未経験の状態から1つアプリケーションを作り上げることが出来るところまで進歩することが出来ました。当初は「コンポーネント？？ライフサイクル？？」という状態でしたが、メンターの方のサポートなどを通じて少しずつ内容を理解することができ、インターン後半は新しい機能をサポートなしで素早く実装することが出来るようになりました。Vue CLIなどで簡単にプロジェクトを始めることができ、単一ファイルコンポーネントなどコード構成の見通しが良くなる仕組みが詰まったフレームワークなので、これからも積極的に触れていきたいと思います。</p><h3 id="ビジネス面"><a href="#ビジネス面" class="headerlink" title="ビジネス面"></a>ビジネス面</h3><p>次に、ビジネス面では市場の現状を捉えてそこからどのように新しい価値を生み出していくかについて深く知ることが出来たと感じています。既存のものをより発展させたアイデアや今まで無かった掛け合わせを取り入れたアイデアなどを現役のITコンサルティングに携わる方と議論する時間はとても楽しく、個人で開発を行っているとなかなかできない経験をさせていただきました。<br>さらに今回はMaaS(Mobility as a Service)事業に携わることで、過密、過疎地における交通などの社会問題やそれをITの力で解決する方法について考えるきっかけになりました。コロナ禍で人の移動に様々な制限が課せられる中、より良い交通システムを生み出す重要性を感じました。</p><h3 id="成果発表とフィードバック"><a href="#成果発表とフィードバック" class="headerlink" title="成果発表とフィードバック"></a>成果発表とフィードバック</h3><p><img src="/images/20200921/%E6%88%90%E6%9E%9C%E7%99%BA%E8%A1%A8.png" alt=""></p><p>また、インターン終了直前に行った最終発表では発表をするだけでなく4週間を通じてのフィードバックもいただくことが出来ます。リモートで大変な状況の中でしたが、自分のアイデアや実装内容についてポジティブな声をいただけた時は非常に嬉しかったです。</p><p>さらに全く別のプロジェクトに関わるインターン生の方の発表も聞くことになります。多岐に渡る分野の話が聞け、どれも興味深かったです。私の実力不足で内容が分からない部分もあったので今後もがんばろうという刺激になりました。</p><h2 id="感想、結び"><a href="#感想、結び" class="headerlink" title="感想、結び"></a>感想、結び</h2><p>今回のEngineer Campは、リモートながらインターンとしてのクオリティの高さや参加者同士の交流などを平常時同様にしようとしてくださる工夫を随所に感じる非常に楽しいインターンでした。</p><p>他のインターン生の方だけではなく、社員の方も忙しい中でしっかりと学習やそれらのアウトプットをされている方ばかりだったので、良い影響を受けることができこれからにつながるインターンだったと感じています。</p><p>最後になりますが、受入先のプロジェクトの皆様はもちろん、この期間を通じて私と関わってくださった皆様、ありがとうございました！</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><ul><li><a href="https://future-architect.github.io/articles/20200920/">Future Engineer Camp 2020 参加記</a></li><li><a href="https://future-architect.github.io/articles/20200919/">Engineer CampでSQLフォーマッタを開発しました</a></li><li><a href="https://future-architect.github.io/articles/20200913/">フューチャーの2020 夏季インターンに参加してみた</a></li></ul><h2 id="画像について"><a href="#画像について" class="headerlink" title="画像について"></a>画像について</h2><ul><li><a href="https://www.irasutoya.com/2017/07/blog-post_41.html" target="_blank" rel="noopener">立ち乗り二輪車に乗る人のイラスト（女性）</a>｜いらすとや </li><li><a href="https://www.irasutoya.com/2017/07/blog-post_86.html" target="_blank" rel="noopener">立ち乗り二輪車に乗る人のイラスト（男性）</a>｜いらすとや</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20200921/%E5%9B%B32.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初めに&quot; class=&quot;headerlink&quot; title=&quot;初めに&quot;&gt;&lt;/a&gt;初めに&lt;/h1&gt;&lt;p&gt;はじめまして。フ
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="インターン" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/"/>
    
      <category term="採用" scheme="https://future-architect.github.io/tags/%E6%8E%A1%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Future Engineer Camp 2020 参加記</title>
    <link href="https://future-architect.github.io/articles/20200920/"/>
    <id>https://future-architect.github.io/articles/20200920/</id>
    <published>2020-09-19T15:00:00.000Z</published>
    <updated>2020-09-18T10:17:48.496Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200920/factory-3550550_1280.png"><p><a href="https://pixabay.com/ja/users/ArtsyBee-462611/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3550550" target="_blank" rel="noopener">Oberholster Venita</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3550550" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。Future Engineer Camp 2020に参加しました齋藤です。<br>インターンシップやその前のできごとを書いていきます。</p><p>なお、今回隣のチームのインターン生だった中山さんの記事が既に技術ブログにあります。そちらもぜひ参考にしてください。</p><ul><li><a href="https://future-architect.github.io/articles/20200913/">フューチャーの2020 夏季インターンに参加してみた</a></li></ul><h2 id="インターンシップ参加前の技術経験"><a href="#インターンシップ参加前の技術経験" class="headerlink" title="インターンシップ参加前の技術経験"></a>インターンシップ参加前の技術経験</h2><p>インターンシップに参加する前の技術経験は次の通りです。</p><ul><li>使用言語: <ul><li>C++: 競技プログラミング、研究、授業</li><li>Python3: 趣味、授業</li><li>Go: 入門書を一通り終えた</li></ul></li><li>開発経験: 技術系アルバイト、インターン一切なし</li><li>資格: 応用情報技術者</li></ul><p>このように、開発を業務として行ったことはない状態でした。</p><h2 id="インターン前"><a href="#インターン前" class="headerlink" title="インターン前"></a>インターン前</h2><h3 id="参加するきっかけ"><a href="#参加するきっかけ" class="headerlink" title="参加するきっかけ"></a>参加するきっかけ</h3><p>私は競技プログラミング（競プロ）に取り組んでおり、競プロサイトAtCoderと就活支援サイトであるサポーターズ共催のインターン説明会イベントに参加しました。いくつかの企業の説明を受けた上で、フューチャーが</p><ul><li>ITコンサルながら、開発、実装、運用まで行っており、高い技術力を持った方が多数在籍していること</li><li>「初めてに挑戦する」「ないものはつくる」といった理念に惹かれたこと</li><li>インターンが4週間と結構長く、学びが多そうと感じたこと</li></ul><p>などの理由でフューチャーのインターンに参加したいと思いました。</p><h3 id="インターン選考"><a href="#インターン選考" class="headerlink" title="インターン選考"></a>インターン選考</h3><p>インターンの説明はこちらをご覧ください。<br><a href="https://future-architect.github.io/articles/20200606/">フューチャー夏のインターン2020。リモート開催予定です</a></p><p>技術系のインターンEngineer Campは10個のコースに分かれており、②スマート工場IoT設計開発を選択しました。理由としてはバックエンド開発に興味があり、また、研究がIoTに関係していたからです。</p><p>選考はES+コーディング試験→オンライン面接1回でした。面接は受入プロジェクトから2名が面接官で、研究や技術的な話が中心でした。また、雰囲気は終始和やかで、殺伐な雰囲気は感じませんでした。<br>コーディング試験はほぼ競プロらしい問題で、しかも、後半の問題は結構な難易度だと感じました。フューチャーが競プロの活用に積極的なのは承知していましたが、それでも意外でした。ただ、インターン中に競プロの活用理由として「既存のライブラリやツールの活用では解決できない時に、競プロの力が活きてくる」といった旨の発言を聞き、なるほどと思いました。</p><p>無事合格になり、インターンに参加することが決まりました。</p><h3 id="インターン中"><a href="#インターン中" class="headerlink" title="インターン中"></a>インターン中</h3><p>インターンシップは終始リモートで、4週間行われました。実施時間は平日に1日8時間でした。<br>社員の方々もリモートワークでした。社員さんの中には「プロジェクトの他の社員と実際に会ったことがない」という方もいらっしゃって、リモートワークに完全に対応できていると感じました。Slackやビデオ会議ツールを活用して、業務に取り組みました。</p><h4 id="開発概要"><a href="#開発概要" class="headerlink" title="開発概要"></a>開発概要</h4><p>プロジェクトは工場システムの開発で、物流の状況や製造計画情報を作業員の端にはいったアプリ上で管理・閲覧できることです。私が行ったのは工場システムのアプリのバックエンド開発で、概要は以下の通りです。</p><ul><li>Swaggerを用いたREST API定義</li><li>DynamoDBのテーブルの設計</li><li>ハンドラや、DB操作をGoで実装</li><li>テストの実装、実施　</li></ul><h4 id="使用技術"><a href="#使用技術" class="headerlink" title="使用技術"></a>使用技術</h4><p>次の技術を使用しました。</p><ul><li>Go言語</li><li>Swagger (go-swagger)</li><li>AWS<ul><li>DynamoDB</li><li>Lambda</li><li>API Gateway</li></ul></li></ul><p>また、開発環境として、次のものを使用しました。</p><ul><li>Git / GitHub</li><li>CircleCI</li></ul><h4 id="学んだこと"><a href="#学んだこと" class="headerlink" title="学んだこと"></a>学んだこと</h4><p>4週間で多くのことを、技術面、開発面のそれぞれで学べたと思います。まずは技術面から。</p><ul><li>Go言語での開発のお作法（エラーハンドリング等）<ul><li>コードレビューを受けたり、既存のコードを読んだりして、身に付けました</li></ul></li><li>Table Driven Test(TDT)の仕方<ul><li>コードが書きやすいし、読みやすい</li></ul></li><li>DynamoDBや、LambdaなどのAWS技術の理解<ul><li>DynamoDB(NoSQL）のキーの種類、特徴</li></ul></li></ul><p>綺麗なコーディングや、テストは、趣味での開発ではおろそかになりがちですが、しっかりと学べたと思います。<br>続いて、開発面です。</p><ul><li>GitHubを用いた開発手法</li><li>ドキュメント整備<ul><li>GitHubにdocs/にまとめられていて、随時更新</li></ul></li><li>Circle CIを用いたテストの設定方法</li><li>Slackでのコミュニケーション</li></ul><p>チーム開発の流れや、コミュニケーションツールの活用方法を学べましたし、今後も活用できると感じました。</p><h3 id="感想・振り返り"><a href="#感想・振り返り" class="headerlink" title="感想・振り返り"></a>感想・振り返り</h3><p>インターン全体を通して、次のことを感じました。</p><ul><li>バックエンド開発を実際に近い業務ができ、業務のイメージが掴めた</li><li>Go言語は書きやすいし、読みやすい<ul><li>今後も学んでいきたい言語</li></ul></li><li>決められた時間内に仕事を行うことの大変さ<ul><li>だらけずに時間内にパフォーマンスを発揮する重要性を感じました</li></ul></li><li>タスクの割り当てが親切で、成長を実感できた<ul><li>タスクが修正→実装→設計＋実装とステップアップしていくのが良かったです</li></ul></li><li>Future Tech Blogがとても参考になった<ul><li>開発で困って検索したときにトップに出ることがよくありました</li><li>積極的な技術発信は好印象でした</li></ul></li></ul><p>まずはバックエンド開発の主要な技術や、開発について、多数の学びがありました。社員さんからのコメントなどからの収穫も多く、インターンに参加して良かったと感じました。<br>また、コミュニケーションの重要性も感じました。ドキュメントが十分に整っていても、新たに機能を追加するときなどには社員さんとのやりとりは必要不可欠でしたし、特にわからないことを明確にすることが重要だと感じました。</p><p>今回のインターンで多方面のことで多くの学び、気づきがあったと実感しました。</p><h2 id="今後に向けて"><a href="#今後に向けて" class="headerlink" title="今後に向けて"></a>今後に向けて</h2><p>次のことを今後取り組みたいと思っています。</p><ul><li>開発でのコミュニケーション能力を磨く<ul><li>作業ログの作成等を積極的に行う（特にリモートワークで重要）</li><li>分からないこと・行ったことを明確にして伝える</li></ul></li><li>学んだ技術を個人で一から使ってみる<ul><li>swaggerの環境構築など</li><li>インフラ面の理解も深めたい</li></ul></li></ul><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>実際の開発業務の形で様々なタスクを取り組み、様々なコメントを頂いたことは大きな学びになりました。</p><p>受け入れてくれたプロジェクトのみなさま、HRのみなさま本当にありがとうござました。</p><img src="/images/20200920/発表.png"><img src="/images/20200920/集合.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200920/factory-3550550_1280.png&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/ArtsyBee-462611/?utm_source=link-attribution
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="工場" scheme="https://future-architect.github.io/tags/%E5%B7%A5%E5%A0%B4/"/>
    
      <category term="インターン" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Engineer CampでSQLフォーマッタを開発しました</title>
    <link href="https://future-architect.github.io/articles/20200919/"/>
    <id>https://future-architect.github.io/articles/20200919/</id>
    <published>2020-09-18T15:00:00.000Z</published>
    <updated>2020-09-18T09:01:12.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。フューチャーのインターン”Engineer Camp”に参加した中村と申します。</p><p>フューチャーのインターンについては<a href="https://future-architect.github.io/articles/20200606/">こちらの記事</a>をご覧ください！</p><p>この記事では、今回のインターンで私が取り組んだ内容を紹介します。</p><h1 id="SQLフォーマッタとは"><a href="#SQLフォーマッタとは" class="headerlink" title="SQLフォーマッタとは"></a>SQLフォーマッタとは</h1><p>今回のインターンで私は、SQLフォーマッタの作成に取り組みました。<br>SQLフォーマッタとは以下のようにSQLのインデントなど整形するツールのことです。</p><img src="/images/20200919/formatter.jpg" class="img-middle-size"><p>SQLフォーマッタを用いることで、SQLの見た目を整える手間を削減したり、チームで統一感があるコーディングを実現できます。</p><h1 id="取り組んだ課題"><a href="#取り組んだ課題" class="headerlink" title="取り組んだ課題"></a>取り組んだ課題</h1><p>もともとフューチャーではuroboroSQL formatterというSQLフォーマッタが開発されていました。（このフォーマッタについては<a href="https://future-architect.github.io/articles/20170228/">こちらの記事</a>をご覧ください！）</p><p>しかし、このフォーマッタはPythonベースで書かれていたため、（現在広く使われているエディタである）VSCodeの拡張機能として動かすことが困難でした。</p><p>そこで、uroboroSQL formatterの後継として、新しいフォーマッタを作成しようと今回のプロジェクトが始まりました。</p><p>新しいフォーマッタが満たすべき条件として、次の3つがあります：</p><ul><li>VSCode上で動く</li><li>2-Way SQL<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>のフォーマットに対応している（≒式中にコメントが入ってもフォーマットが崩れない）</li><li>カラムやAS句等の縦ぞろえに対応している</li></ul><p>これらの条件を満たすフォーマッタを作成することが、今回のインターンでの課題でした。</p><h1 id="使用したOSS"><a href="#使用したOSS" class="headerlink" title="使用したOSS"></a>使用したOSS</h1><p>今回の開発では、すべてのコードを一から書くことはせず、利用できるツールは使っていく方針を取りました。具体的には、以下に示す2つのOSSを使いました。</p><h2 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h2><p>PrettierとはVSCodeなど様々なエディタで動作する、OSSのコードフォーマッタです。Prettier単体でもHTMLやCSSといった言語をフォーマットできるのですが、プラグインを作成することで、フォーマット可能な言語をさらに増やすことができます。</p><p>今回のSQLフォーマッタは、このPrettierプラグインとして開発を行いました。このようにすることで、VSCodeからフォーマット対象のコードを取得する処理や、フォーマットしたコードをVSCode上に反映する処理などをPrettierが代わりに行ってくれるため、フォーマット処理に集中して開発を行うことができます。また、Prettierが動作する他のエディタに対しても、今回作成したフォーマッタが使えるというメリットもあります。</p><h2 id="ANTLR"><a href="#ANTLR" class="headerlink" title="ANTLR"></a>ANTLR</h2><p>ANTLRはパーサ（構文解析器）を生成するためのOSSです。パーサとは、コードの処理構造を解析し、結果をASTという表現で出力するプログラムです。（ANTLRやパーサに関する詳しい説明は<a href="https://future-architect.github.io/articles/20200903/">こちらの記事</a>をご覧ください）<br>今回のフォーマッタではパーサとプリンタという二つのプログラムを使用するのですが、そのうちの一つをANTLRで自動生成してしまおう！という作戦です。</p><h1 id="フォーマッタの構成"><a href="#フォーマッタの構成" class="headerlink" title="フォーマッタの構成"></a>フォーマッタの構成</h1><p>今回作成したフォーマッタによる、フォーマット処理の流れを下図に示します。</p><p><img src="/images/20200919/format-flow1.PNG" alt=""></p><p>フォーマット処理は2つのステップからなり、パーサとプリンタという2つのプログラムを用います。</p><p>第1ステップでは、パーサがフォーマット対象のSQLコードを受け取り、コードをASTという表現に変換します。</p><p><img src="/images/20200919/format-flow2.PNG" alt=""></p><p>第2ステップでは、プリンタがASTを受け取り、ASTの情報をもとにフォーマットされたコードを出力します。</p><p><img src="/images/20200919/format-flow3.PNG" alt=""></p><p>この2ステップを組み合わせることで、SQLを入力として受け取り、成形したものを出力するという、フォーマッタの動作が実現できます！</p><p><img src="/images/20200919/format-flow4.PNG" alt=""></p><h1 id="行った作業"><a href="#行った作業" class="headerlink" title="行った作業"></a>行った作業</h1><h2 id="プリンタの開発"><a href="#プリンタの開発" class="headerlink" title="プリンタの開発"></a>プリンタの開発</h2><p>今回のインターンで、私は主にプリンタ（受け取ったASTをもとに、コードを成型して出力するプログラム）の開発を行いました。<br>PrettierプラグインとしてSQLフォーマッタの開発を行ったので、基本的な部分は他のプラグインを参考にすることができたのですが、縦ぞろえや式中コメントへの対応といった独自の機能については、一から実装を行いました。</p><h2 id="ANTLRの高速化"><a href="#ANTLRの高速化" class="headerlink" title="ANTLRの高速化"></a>ANTLRの高速化</h2><p>開発をしていく中で、SQLのパース処理にかかる時間がありえないほど長いという問題が発生しました。<br>メンターの方と調査を行った結果、ANTLR内部の実装にミスがあることが判明し、ANTLRのリポジトリにissueが立つという一幕がありました。</p><p><img src="/images/20200919/image_(2).png" alt=""></p><p>現在は<a href="https://github.com/antlr/antlr4/pull/2905" target="_blank" rel="noopener">修正</a>されているのですが、この修正で今まで90分かけても終わらなかった処理が20秒で終わるようになり、特定の条件下において、約270倍（！）の高速化を行うことができました。</p><h1 id="フォーマット結果"><a href="#フォーマット結果" class="headerlink" title="フォーマット結果"></a>フォーマット結果</h1><p>今回作成したフォーマッタでのフォーマット結果を以下に示します。</p><p>フォーマット前のSQLコードです。とても見にくい…。</p><img src="/images/20200919/before.jpg" class="img-middle-size"><p>フォーマット後のSQLコードです。見やすい！</p><img src="/images/20200919/after.jpg" class="img-middle-size"><p>各カラムや条件式が整えられ、見やすくなっています。また、最後のWHERE句のような、式中にコメントがある場合もうまくフォーマットが行われています。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回作成したSQLフォーマッタは基本的な構文にしか対応しておらず、実際の業務で使えるレベルにはまだ達していません。<br>それでも、実際にVSCode上で動作するフォーマッタを開発できたことはとても嬉しく、今後の糧になるような経験でした。<br>今回は私が行ったタスクの話が中心になってしまいましたが、Engineer Campでは業務以外にも次のような沢山のイベントがありました:</p><ul><li>社内競技プログラミング部主催のバーチャルコンテスト</li><li>コミュ会・ランチ会（インターン生同士が集まり、ざっくばらんに話す会）</li><li>社内ベテランエンジニアの方々による講義</li><li>インターン生主催のzoom飲み会</li></ul><p>こういったイベントがあったため、リモートであっても実際にフューチャー社でインターンをしているんだという実感が持てました。</p><p>また、業務においても、ペアプログラミングや夕会（一日の終わりに集まり、今日の進捗や明日やることを共有する場）をしていただけたため、たくさんの知見を得ることができたと感じています。</p><p>総じて本当に楽しいインターンで、一か月があっという間でした。</p><p>受け入れ先プロジェクトの方々やフューチャーHRの皆さん、本当にありがとうございました！</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><p><a href="https://prettier.io/" target="_blank" rel="noopener">https://prettier.io/</a><br><a href="https://www.antlr.org/" target="_blank" rel="noopener">https://www.antlr.org/</a></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">2-Way SQLの詳細については<a href="https://future-architect.github.io/uroborosql-doc/background/">こちら</a>のドキュメントをご参照ください。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして。フューチャーのインターン”Engineer Camp”に参加した中村と申します。&lt;/p&gt;
&lt;p&gt;フューチャーの
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="SQL" scheme="https://future-architect.github.io/tags/SQL/"/>
    
      <category term="インターン" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/"/>
    
      <category term="VSCode" scheme="https://future-architect.github.io/tags/VSCode/"/>
    
      <category term="構文解析" scheme="https://future-architect.github.io/tags/%E6%A7%8B%E6%96%87%E8%A7%A3%E6%9E%90/"/>
    
      <category term="Antlr" scheme="https://future-architect.github.io/tags/Antlr/"/>
    
  </entry>
  
  <entry>
    <title>SpringBootでDIを駆使したルールエンジン開発</title>
    <link href="https://future-architect.github.io/articles/20200918/"/>
    <id>https://future-architect.github.io/articles/20200918/</id>
    <published>2020-09-17T15:00:00.000Z</published>
    <updated>2020-09-18T01:41:53.476Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20200914/">GlyphFeeds連載企画</a>第5弾の記事となります。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、2018年新卒入社の渡邉です。</p><p>第5弾はGlyphFeedsCMSにおけるSpringを駆使したルールエンジンについてです！</p><p>新聞業界の多種多様に変化する業務体系に対してどのようにシステムを構築したかご紹介致します。</p><h1 id="新聞社の業務について"><a href="#新聞社の業務について" class="headerlink" title="新聞社の業務について"></a>新聞社の業務について</h1><p>ニュース（＝コンテンツ）を世の中に配信していく過程において、新聞社には大きく次のアクターが関わります。</p><ul><li><strong>記者</strong>：取材活動を元に記事を書く、写真・動画を撮影する</li><li><strong>デスク</strong>：記者から連携された記事や写真・動画を確認し出稿する</li><li><strong>校閲</strong>：記者やデスクから連携された素材に誤りがないか（誤字脱字・事実関係）を確認する</li><li><strong>紙面制作担当</strong>：新聞制作においてレイアウトを調整する</li><li><strong>デジタル配信担当</strong>：デジタルサイト（各社ニュースサイト、スマホアプリなど）向けにコンテンツを編集・配信する</li></ul><p>記者がニュース記事となる素材(テキストや写真)を生み出し、デスクや校閲と渡って紙面制作担当まで届き、</p><p>新聞やニュースサイトに組み上げられるという大枠でのワークフローはあります。</p><p><img src="/images/20200918/%E6%8A%80%E8%A1%93%E3%83%95%E3%82%99%E3%83%AD%E3%82%AF%E3%82%99%E7%B4%A0%E6%9D%901.png" alt=""></p><p>ベースのワークフローをシステムで担保することは当然ですが、</p><p>新聞社では選挙やオリンピックといったイベント事に対して、専用のチーム（≒組織）が組成され、<strong>通常のフローとはことなるワークフローをまわす</strong>ことがよくあります。</p><p><img src="/images/20200918/%E6%8A%80%E8%A1%93%E3%83%95%E3%82%99%E3%83%AD%E3%82%AF%E3%82%99%E7%B4%A0%E6%9D%902.png" alt=""></p><p>各素材に対してアクターがどんなアクションをしたか、素材の属性情報（新聞社では1素材に対して約500程の属性がある）によって全く異なるフロー・処理を行う必要があります。ここで示したフローはごく一部であり、実際の業務では時と場合により<strong>様々な素材に対して様々なワークフローでニュース記事が作られます。</strong></p><p>つまり、まともにシステムを構築しようとすると、莫大なパターンの業務ロジックを実装しないといけない、しかもそのパターンがシステム稼動後も組織変更や業務変更によって増減してしまいます。</p><p>上記のような複雑な業務に対応するため、ビジネスロジックを部品化して自由に組み合わせることができる<strong>ルールエンジン</strong>という仕組みで実現しました。</p><h1 id="ルールエンジンの概要"><a href="#ルールエンジンの概要" class="headerlink" title="ルールエンジンの概要"></a>ルールエンジンの概要</h1><p>GlyphFeedsのルールエンジンの全体概要は以下の図のようになっています。</p><p><img src="/images/20200918/overview.png" alt=""></p><p>GlyphFeedsで管理する素材データに対し、画面などから特定のアクション（例えば保存や出稿など）が実行されると、そのアクションに対応する各条件に素材データがマッチするか判定し、マッチした条件に対応する処理グループが実行されます。</p><p>処理グループ内では、複数の定義済ルールエンジン処理を自由に組み合わせることができ、これによって自動化したい操作を実現しています。</p><h3 id="処理グループ"><a href="#処理グループ" class="headerlink" title="処理グループ"></a>処理グループ</h3><p>処理グループの部分について、実際にはさらにメイン処理グループとサブ処理グループに分かれています。</p><p>メイン処理グループは１つの条件に対して１つ、サブ処理グループは複数定義することができ、サブ処理グループには追加で判定条件を指定できます。メイン処理グループは基本的に同期で、サブ処理グループは非同期で実行されます。メイン処理グループから非同期に設定することも可能です。</p><p><img src="/images/20200918/procgroup.png" alt=""></p><h3 id="処理の定義方法"><a href="#処理の定義方法" class="headerlink" title="処理の定義方法"></a>処理の定義方法</h3><p>上述した内容はすべてRDS登録されたルールエンジン定義に従います。</p><p>各アクション別の処理条件、条件一致した際に実行される処理、各処理に渡すパラメータなどが定義されています。定義アップロード時にファイル内容を解析し、RDS上のテーブルにデータを格納しています。</p><h1 id="どう実現したか？"><a href="#どう実現したか？" class="headerlink" title="どう実現したか？"></a>どう実現したか？</h1><p>さて、ここからはこのルールエンジンが具体的にどのように実装されているのかについて掻い摘んで説明させていただきます。</p><p>以下の図で示す通り、実装上はルールエンジン実行とメイン処理実行、サブ処理実行、処理グループ実行、個別処理に分かれています。画面などで素材に対してアクションが実行されると、ルールエンジン実行のREST APIが呼び出されそこから個別処理が開始します。</p><p><img src="/images/20200918/architecture.png" alt=""></p><h3 id="ルールエンジン実行"><a href="#ルールエンジン実行" class="headerlink" title="ルールエンジン実行"></a>ルールエンジン実行</h3><p>個別処理の実行を担うREST APIです。</p><p>素材の情報と実行に必要なパラメータを受け取り、ルールエンジン定義を読み込んで条件判定を行い実行すべき処理を特定します。そこから、メイン処理実行とサブ処理実行が呼び出されます。</p><h3 id="メイン処理実行・サブ処理実行"><a href="#メイン処理実行・サブ処理実行" class="headerlink" title="メイン処理実行・サブ処理実行"></a>メイン処理実行・サブ処理実行</h3><p>メイン処理実行とサブ処理実行はSpring BootのAsyncスレッドを利用して実装されています。</p><p>長くなってしまうのでここでは詳細は割愛しますが、AsyncスレッドとJava標準のCompletableFutureを組み合わせており、非同期実行でありながらメイン処理実行部分は同期的にレスポンスを返すことができるようになっています。</p><h3 id="処理グループ実行・ルールエンジン個別処理"><a href="#処理グループ実行・ルールエンジン個別処理" class="headerlink" title="処理グループ実行・ルールエンジン個別処理"></a>処理グループ実行・ルールエンジン個別処理</h3><p>ここではSpringのDI（Dependency Injection）の仕組みを利用して、定義に従い実行時に動的に処理を切り替えます。</p><p>各処理グループ内には最大で10個までの処理を定義することができ、定義された順にSpringのDIコンテナから対応するルールエンジン個別処理のBeanを取得して処理を実行していきます。</p><p>各ルールエンジン個別処理の実装クラスは共通のインターフェースをimplementしており、コンテナ登録時のBean IDをルールエンジン定義のIDと紐づけることにより取得するBeanを特定し、定義ベースでのDIを実現しています。これにより、ソースコードに一切手を加えることなく定義のみで柔軟に実行する処理を切り替えることが可能となります。</p><p>ルールエンジン個別処理と処理グループ実行部分の依存関係が疎（動的）になっているため、新たにルールエンジン個別処理を追加するケースでも、1つルールエンジン個別処理を実装し、それをルールエンジン定義に指定するだけですぐに使えるようになりメンテナンス性が高い仕組みとなっています。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p>各処理には共通のデータコンテキストが渡され、処理間のデータのやり取りはすべてコンテキストを通して行われます。</p><p>細かい部分はお見せできなくて申し訳ないのですが、少しでもイメージが沸くようにルールエンジン個別処理のインターフェース定義と個別処理、処理グループ実行処理の実装サンプル（大枠だけですが💦）を掲載します。</p><figure class="highlight java"><figcaption><span>WfInstructedProcess.java（個別処理のインターフェース） </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WfInstructedProcess</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BaseProcessParam</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// パラメータチェックおよび解析用のメソッド</span></span><br><span class="line"><span class="function">T <span class="title">prepareParam</span><span class="params">(WfProcessContext context, WfDefProcess process)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 処理実行用のメソッド</span></span><br><span class="line"><span class="function">WfResult <span class="title">execute</span><span class="params">(WfProcessContext context, T param)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>SampleProcess.java（個別処理の実装クラス） </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"Proc01"</span>) <span class="comment">// Bean IDにルールエンジン定義と対応する処理IDを指定</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleProcess</span> <span class="keyword">implements</span> <span class="title">WfInstructedProcess</span>&lt;<span class="title">SampleParam</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SampleParam <span class="title">prepareParam</span><span class="params">(WfProcessContext context, WfDefProcess process)</span> </span>&#123;</span><br><span class="line"><span class="comment">// WfDefProcessにはルールエンジン定義の情報が格納されています</span></span><br><span class="line"><span class="comment">// ルールエンジン定義にはパラメータ1～10までの定義欄があり、その値を各処理専用のパラメータクラスに詰めなおします</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SampleParam(process.getParam1(), process.getParam2());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WfResult <span class="title">execute</span><span class="params">(WfProcessContext context, SampleParam param)</span> </span>&#123;</span><br><span class="line"><span class="comment">// paramにはprepareParamで作成したパラメータが格納されています</span></span><br><span class="line"><span class="comment">// 戻り値のWfResultは処理結果を示すenum型で、処理フローを制御します（処理グループ実行を途中で止めるetc）</span></span><br><span class="line"><span class="keyword">return</span> WfResult.NORMAL_END;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>ProcessGroupExecLogic.java（処理グループ実行ロジック） </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessGroupExecLogic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指定された処理グループ内に定義されている処理を順次実行する</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> param パラメータ</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 処理結果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ProcessGroupExecResult <span class="title">execute</span><span class="params">(ProcessGroupExecParam param)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ProcessGroupExecResult groupResult = <span class="keyword">new</span> ProcessGroupExecResult();</span><br><span class="line"><span class="comment">/** 処理グループ実行処理結果の初期化など */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// コンテキストに対象素材データなどを格納</span></span><br><span class="line">WfProcessContext context = <span class="keyword">new</span> WfProcessContext();</span><br><span class="line">context.setData(param.getData());</span><br><span class="line"><span class="comment">/** （中略） */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 処理グループに定義されている処理を順次実行</span></span><br><span class="line"><span class="keyword">for</span> (WfDefProcess defProc : param.getDefProcessList()) &#123;</span><br><span class="line"><span class="comment">// コンテナから実行する個別処理のBeanを取得</span></span><br><span class="line">WfInstructedProcess&lt;BaseProcessParam&gt; instructedProcess = springContext.getBean(defProc.getProcCd(), WfInstructedProcess<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BaseProcessParam procParam;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// パラメータのチェック、解析</span></span><br><span class="line">procParam = instructedProcess.prepareParam(context, defProc);</span><br><span class="line">&#125; <span class="keyword">catch</span> (WfParamInvalidException e) &#123;</span><br><span class="line"><span class="comment">/** パラメータ不正時の処理 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** （中略） */</span></span><br><span class="line"><span class="comment">// ルールエンジン個別処理の実行</span></span><br><span class="line">WfResult result = instructedProcess.execute(context, procParam);</span><br><span class="line"><span class="keyword">if</span> (result == ERROR_END) &#123;</span><br><span class="line"><span class="comment">/** 異常終了時処理 */</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** （中略） */</span></span><br><span class="line"><span class="keyword">if</span> (result == NORMAL_END_STOP) &#123;</span><br><span class="line"><span class="comment">/** 処理中断 */</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">/** 例外発生時処理 */</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** （中略） */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> groupResult;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GlyphFeedsはサービスとして展開しており、ユーザ企業単位の個別カスタマイズが入ることがあります。</p><p>そういったケースでも個別処理の追加はWfInstructedProcessの実装クラス（とその処理のパラメータクラス）を作成してルールエンジン定義を変更するだけ。既存のエンジン部分などには手を加える必要がないので処理追加の要望はもう怖くありません😀</p><p>余談ですが、標準でAWS Lambda実行のルールエンジン個別処理も用意されており、簡易な処理であればそちらを利用することも可能です。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回はGlyphFeedsの根幹部分を担っているといっても過言ではない、ルールエンジンについて、仕組みと実装方法の概要をご説明させていただきました。</p><p>Springの機能を活用することで、メンテナンス性の高いルールベースエンジン処理を比較的簡単に実現することができますので、少しでも参考になれば幸いです。</p><p>さて、GlyphFeedsではこれまでの4回でご紹介してきた内容以外にもさまざまな技術要素が含まれています。また機会がありましたらそれらについてもご紹介させていただきますので、次回のGlyphFeeds連載企画までお待ちください！</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">実際にはルールエンジン定義の取り込み部分などでもう少し追加で実装が必要となる箇所があります。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200914/&quot;&gt;GlyphFeeds連載企画&lt;/a&gt;第5弾の記事となります。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Java" scheme="https://future-architect.github.io/tags/Java/"/>
    
      <category term="ルールエンジン" scheme="https://future-architect.github.io/tags/%E3%83%AB%E3%83%BC%E3%83%AB%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3/"/>
    
      <category term="SpringBoot" scheme="https://future-architect.github.io/tags/SpringBoot/"/>
    
      <category term="Spring" scheme="https://future-architect.github.io/tags/Spring/"/>
    
      <category term="DI" scheme="https://future-architect.github.io/tags/DI/"/>
    
  </entry>
  
  <entry>
    <title>デスクトップWebアプリのモバイル化における考え方・Tips</title>
    <link href="https://future-architect.github.io/articles/20200917/"/>
    <id>https://future-architect.github.io/articles/20200917/</id>
    <published>2020-09-16T15:00:00.000Z</published>
    <updated>2020-09-17T02:46:03.548Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20200914/">GlyphFeeds連載企画</a>第4弾の記事となります。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、2019年入社、TIGメディアユニット所属の中村立基です。</p><p>今回はメディア業界向けクラウドサービスGlyphFeedsCMSのモバイル化を例に、Webアプリケーションをモバイル化する際の考え方や手法について書きます。</p><p>Webアプリケーションをモバイル化する際の参考になれば幸いです。</p><h1 id="モバイル化の方針"><a href="#モバイル化の方針" class="headerlink" title="モバイル化の方針"></a>モバイル化の方針</h1><p>昨今「モバイルファースト」という言葉が広まる中、スマートフォンを始めとするモバイル端末利用の風潮は強まっています。それに伴いWebアプリケーションもモバイル端末での利用シーンが拡大しています。</p><p>しかし、ただ既存のWebアプリケーションをモバイル端末で表示するだけではアプリの機能などを十分に利用できない場合が多い為、適切にアプリケーションに手を加える必要があります。</p><p>今回GlyphFeedsCMSでは、以下の考え方の下、モバイル化を行いました。</p><p><strong>1. アプリケーションのユーザを再定義、業務フロー・要件の明確化</strong><br><strong>2. デバイスの特性を考慮した機能設計</strong><br><strong>3. シンプルで誰にでも使いやすいデザイン</strong></p><h2 id="1-アプリケーションのユーザを再定義、業務フロー・要件の明確化"><a href="#1-アプリケーションのユーザを再定義、業務フロー・要件の明確化" class="headerlink" title="1. アプリケーションのユーザを再定義、業務フロー・要件の明確化"></a>1. アプリケーションのユーザを再定義、業務フロー・要件の明確化</h2><p>GlyphFeedsCMSは元来新聞社向けの基幹システムとして開発されました。そこで今回モバイル化するにあたり、ユーザを「記者」に設定して、記者が取材し、記事を執筆、送稿するといったユーザが行う業務シナリオから検討することで、必要な要件を定義しました。その中で、</p><ul><li><strong>移動中での記事の執筆が可能になること</strong></li><li><strong>取材・インタビューしながらそのまま記事を作成できること</strong></li><li><strong>緊急時の取材への対応速度向上が見込めること</strong></li></ul><p>といったユーザが享受できるメリットも明確化することができました。<br>同じアプリケーションと言えど、<strong>デバイス毎にユーザが変わる事を想定して利用シーンや必要な機能を再検討する</strong>ことが重要です。</p><h2 id="2-デバイスの特性を考慮した機能設計"><a href="#2-デバイスの特性を考慮した機能設計" class="headerlink" title="2. デバイスの特性を考慮した機能設計"></a>2. デバイスの特性を考慮した機能設計</h2><p>既存のWebアプリケーションをモバイル化する際には幾つか問題点があります。デスクトップアプリで行っていた業務をモバイル端末で行おうとすると機能的な制約が多々発生します。</p><p>例えば、画面の大きさが極端に小さくなることや、メモリー容量・バッテリー駆動時間などを考慮した機能設計にしなければなりません。その為下記の例に挙げる様にモバイル端末の持つ特徴に合わせて機能設計しました。</p><ul><li><strong>バッテリー駆動時間</strong>：アプリケーションの標準テーマにダークモードを採用し、バッテリーの消費電力抑制</li><li><strong>メモリ容量・通信速度</strong>：デスクトップと比較して大容量のデータ通信には不向きな為、モバイル端末で不要な機能の削減</li></ul><h2 id="3-シンプルで誰にでも使いやすいデザイン"><a href="#3-シンプルで誰にでも使いやすいデザイン" class="headerlink" title="3. シンプルで誰にでも使いやすいデザイン"></a>3. シンプルで誰にでも使いやすいデザイン</h2><p>モバイル化において特に重視した点は<strong>UI/UXデザイン</strong>です。</p><p>キーボードとマウスで操作するデスクトップアプリに比べて、モバイル端末ではタッチ操作が基本となります。その為、<strong>「シンプルで誰にでも使いやすい」</strong>ことをコンセプトに、より直感的に操作できるように画面設計を行いました。<br>下記は特に考慮したポイントです。</p><ul><li>画面上に表示されるアイコンや入力項目の要素を極力削減し、<strong>ユーザが押すアイコンを間違えないような配慮</strong></li><li>マテリアル・デザインを踏襲した<strong>ユーザがより直感的に操作できる画面レイアウト</strong></li><li><strong>「ディスプレイを長時間見続けても目が疲れにくい」「利用頻度の高いオブジェクトを目立たせる」</strong>等に留意した統一感のある配色<br><img src="/images/20200917/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E7%B4%A0%E6%9D%904.png" alt=""></li></ul><h1 id="モバイル化の手法"><a href="#モバイル化の手法" class="headerlink" title="モバイル化の手法"></a>モバイル化の手法</h1><p>一口にモバイル化と言っても、その手法によって下記の様に3つのパターンが存在します。</p><p><strong>1. 動的配信</strong><br><strong>2. レスポンシブWebデザイン</strong><br><strong>3. アダプティブデザイン</strong></p><p>それぞれ特徴を簡単に説明します。</p><h2 id="1-動的配信"><a href="#1-動的配信" class="headerlink" title="1. 動的配信"></a>1. 動的配信</h2><p>サーバーサイドでPC・スマートフォン・タブレットなどのユーザエージェント情報を検出し、対応する個別のテンプレートをHTML、CSSで組み立てて配信する方法です。デバイス毎に適切なデザインのコンテンツ配信が可能ですが、エラー対応やテンプレートの調整等の開発コストが大きい側面があります。</p><p><img src="/images/20200917/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E7%B4%A0%E6%9D%901.png" alt=""></p><h2 id="2-レスポンシブWebデザイン"><a href="#2-レスポンシブWebデザイン" class="headerlink" title="2. レスポンシブWebデザイン"></a>2. レスポンシブWebデザイン</h2><p>主にCSSのメディアクエリを用いてスクリーンサイズや条件に応じて表示を最適化する方法です。<br>デバイスによる画面幅によって、要素の表示/非表示等のレイアウトを切り替えます。モバイル端末で表示する場合、デスクトップ用画面を読み込む為表示速度が遅くなる場合があります。<br><img src="/images/20200917/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E7%B4%A0%E6%9D%902.png" alt=""></p><h2 id="3-アダプティブデザイン"><a href="#3-アダプティブデザイン" class="headerlink" title="3. アダプティブデザイン"></a>3. アダプティブデザイン</h2><p>デバイスやコンテクストに応じてコンテンツを最適なデザインで提供する方法です。JavaScriptなどを利用してクライアントサイドで最適化したページを表示することが可能で、デスクトップ・モバイルそれぞれに合わせた専用要素を持つのでデバイスの特性を生かしたデザインや機能が実装できます。</p><p><img src="/images/20200917/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E7%B4%A0%E6%9D%903.png" alt=""></p><p>GlyphFeedsCMSのモバイル化にはアダプティブデザインを採用しています。<br>下記の様にモバイル画面用アプリ配下にある共通SDKを読み込むことで、モバイルに適した専用要素を切り出して実装できる構造になっています。</p><p><img src="/images/20200917/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E7%B4%A0%E6%9D%906.png" alt=""><br>この様な構造を取ることで、共通化している部分のメンテナンスコストを抑えつつ、デスクトップ・モバイルそれぞれの画面に適したデザインでアプリケーションを実装することができます。より具体的な実装方法やパターンなどに関しては、また別の機会でより深堀できればと思います。</p><p><img src="/images/20200917/%E6%8A%80%E8%A1%93%E3%83%96%E3%83%AD%E3%82%B0%E7%B4%A0%E6%9D%908.png" alt=""></p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回はGlyphFeedsCMSを例にデスクトップ用Webアプリケーションをモバイル化する際の方針や手法を紹介しました。<br>デバイス毎にユーザの利用する用途やシーンが異なることを意識して、適切にリデザインすることが重要であるということを少しでも伝えることができていたら幸いです。</p><p>今後より深いテーマについて理解していければと思います。ここまで読んで頂きありがとうございました。</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><p><a href="https://webtan.impress.co.jp/e/2017/09/07/26299" target="_blank" rel="noopener">これからのスマホ対応。アダプティブデザイン、レスポンシブWebデザイン、動的配信</a><br><a href="https://material.io/design" target="_blank" rel="noopener">Design - Material Design</a></p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><p><a href="https://future-architect.github.io/articles/20200318/">【Figma】を使ってチームでUI/UX設計するといいこと</a><br><a href="https://future-architect.github.io/articles/20200511/">PJでUIデザインにAtomic Designを導入したらどうだったのか</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200914/&quot;&gt;GlyphFeeds連載企画&lt;/a&gt;第4弾の記事となります。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;h
      
    
    </summary>
    
    
      <category term="Design" scheme="https://future-architect.github.io/categories/Design/"/>
    
    
      <category term="設計" scheme="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/"/>
    
      <category term="モバイルアプリ" scheme="https://future-architect.github.io/tags/%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA/"/>
    
      <category term="UI" scheme="https://future-architect.github.io/tags/UI/"/>
    
  </entry>
  
  <entry>
    <title>素材受信インターフェースにSQSを活用してみた ～標準キュー vs FIFOキュー～</title>
    <link href="https://future-architect.github.io/articles/20200916/"/>
    <id>https://future-architect.github.io/articles/20200916/</id>
    <published>2020-09-15T15:00:00.000Z</published>
    <updated>2020-09-16T02:18:13.027Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/articles/20200914/">GlyphFeeds連載企画</a>3つ目の記事です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、2017年新卒入社、TIG所属の出口です。</p><p>今回は、GlyphFeedsの素材受信インターフェース構築を介してAmazon Simple Queue Service (SQS) の検証について紹介します。</p><h1 id="素材受信インターフェースとは"><a href="#素材受信インターフェースとは" class="headerlink" title="素材受信インターフェースとは"></a>素材受信インターフェースとは</h1><p>今回紹介する素材受信インターフェースについて簡易ですが説明します。</p><h2 id="役割"><a href="#役割" class="headerlink" title="役割"></a>役割</h2><p>GlyphFeedsにおいて、素材受信インターフェースは、外部システムから受信した素材をコンテンツマネジメントシステム (CMS)に連携する役割を担います。</p><p>ここで言う素材とは、主に以下の2種類です。</p><ul><li>記事素材：タイトル、本文、その他様々な情報 (Jsonファイル)</li><li>画像素材：画像、キャプション、その他様々な情報 (Jsonファイル＋画像ファイル)</li></ul><p>新聞業界、メディア業界では、日夜大量の素材が生み出されています。</p><p>そのため、受信インターフェースは分間数百件の素材を受信するような状況を想定する必要があります。</p><p>SQSを使用することで、素材を一度キューイングした後でCMSに連携する形をとることができます。</p><h2 id="構成概要"><a href="#構成概要" class="headerlink" title="構成概要"></a>構成概要</h2><p>今回構成した素材受信インターフェースの構成概要図は以下になります。<br><img src="/images/20200916/%E5%9B%B31.png" alt=""></p><p>大まかな流れとしては、</p><ol><li>外部システムからSFTP経由でS3バケットに素材が送られる</li><li>S3からSQSに連携し、素材を示すメッセージがキューに積まれる</li><li>定期実行LambdaがSQSからメッセージを取得し、CMSの素材受信用APIを叩く</li></ol><h1 id="比較検証：標準キュー-vs-FIFOキュー"><a href="#比較検証：標準キュー-vs-FIFOキュー" class="headerlink" title="比較検証：標準キュー vs FIFOキュー"></a>比較検証：標準キュー vs FIFOキュー</h1><p>SQSは標準キューとFIFOキューの2種類あります。<br>今回、素材受信インターフェースを構築するにあたり、標準キューとFIFOキューのどちらが適しているか検証を行っています。</p><h2 id="各キューの特徴"><a href="#各キューの特徴" class="headerlink" title="各キューの特徴"></a>各キューの特徴</h2><p>今回の素材受信インターフェースの実装に関連のある、各キューの特徴は以下になります。</p><table><thead><tr><th></th><th>標準キュー</th><th>FIFOキュー</th></tr></thead><tbody><tr><td>順序</td><td>順序保証なし</td><td>First In First Out</td></tr><tr><td>S3イベント連携</td><td>あり</td><td>なし</td></tr></tbody></table><p>FIFOキューは名前の通り、最初に入ったメッセージが最初に取り出されるように順序保証されます。</p><p>素材受信で更新が発生する場合を考慮すると、順序保証によって巻き戻りが起こらないので、順序においてはFIFOキューが本ケースに関しては優位です。</p><p>ただし、<a href="https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/NotificationHowTo.html" target="_blank" rel="noopener">FIFOキューを使用する場合は、S3から直接SQSに連携できない</a>ので一工夫必要です。</p><h2 id="FIFOキューでS3～SQS連携する工夫"><a href="#FIFOキューでS3～SQS連携する工夫" class="headerlink" title="FIFOキューでS3～SQS連携する工夫"></a>FIFOキューでS3～SQS連携する工夫</h2><p>素材受信インターフェース構築当時は、S3イベント通知の送信先として、SQSの標準キューは選択できましたが、FIFOキューは選択できませんでした。そのため、FIFOキューではSQSに連携するのに一工夫いるため、標準キューかFIFOキューかによって、S3～SQS間の構成は下図のように異なります。<br><img src="/images/20200916/%E5%9B%B32.png" alt=""></p><p>FIFOキューの場合は、S3オブジェクトputをトリガーにLambdaを実行し、その処理でFIFOキューにメッセージを積んでいきます。</p><h2 id="検証概要：ロスト率の比較"><a href="#検証概要：ロスト率の比較" class="headerlink" title="検証概要：ロスト率の比較"></a>検証概要：ロスト率の比較</h2><p>PoCでは、素材が取り込まれるまでの時間や、短時間で大量に受信した場合の性能等、様々な観点でテストを行いました。</p><p>今回は標準キューとFIFOキューのどちらを採用するかの決め手となった、S3オブジェクトputされた数に対して、SQSに連携されなかった数の割合：ロスト率のテスト結果を紹介します。</p><p>テストの概要としては、</p><ul><li>S3バケットに素材をputする頻度（受信頻度）を変えて何通りか試行</li><li>各施行において、S3オブジェクトputした数、SQSに連携された数を記録</li></ul><p><a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/s3-verify-event-notification/" target="_blank" rel="noopener">AWS公式情報</a>で、「ごくまれに、イベントが失われることもあります。」とあります。<br>実際にどの程度ロストするのか、S3を監視して自動リカバリする機能を用意すれば補える程度に少ないか等、確認する必要がありました。</p><h2 id="ロスト率の差異"><a href="#ロスト率の差異" class="headerlink" title="ロスト率の差異"></a>ロスト率の差異</h2><p>標準キューとFIFOキューそれぞれを使用した場合のロスト率を確認したところ、想定以上に明確な差異が見られました。</p><p><img src="/images/20200916/%E5%9B%B33.png" alt=""></p><p>(※FIFOキューでは常にロスト率0%だったのでグラフは省きます。)</p><p>今回のケースでは標準キューを使用した構成と相性が悪かったのか、受信頻度が高いとロスト率が十%を超える結果に…</p><p>一方でFIFOキューでは受信頻度が高くても、常にロスト率0%という結果になりました。</p><p>これが決め手となり、FIFOキューを採用することになりました。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>GlyphFeedsの素材受信インターフェースの構築を例にSQSの標準キュー、FIFOキューの比較検証の話を紹介させていただきました。</p><p>個人的には、”ごくまれに”が検証するとケース次第で数十%にもなることが意外でした。今回の話を通じて、実際に検証することの重要さを感じていただければと思います。</p><p>FIFOキューではS3イベント連携できないからと、標準キューのみに候補を絞らず、手の届いていない連携箇所を上手く解消してFIFOキューを候補に残したからこそ、今回の意外な結果が得られました。</p><p>サービスをただ使うのではなく、手の届かない箇所は解消方法を考えて活用することで、より適したサービスを用いた、良いシステムの実現に繋がるのではないかと思いました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200914/&quot;&gt;GlyphFeeds連載企画&lt;/a&gt;3つ目の記事です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="sqs" scheme="https://future-architect.github.io/tags/sqs/"/>
    
  </entry>
  
  <entry>
    <title>メディア向けCMSサービスのインフラ構成のポイント</title>
    <link href="https://future-architect.github.io/articles/20200915/"/>
    <id>https://future-architect.github.io/articles/20200915/</id>
    <published>2020-09-14T15:00:00.000Z</published>
    <updated>2020-09-15T00:46:23.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="https://future-architect.github.io/articles/20200914/">GlyphFeeds</a>連載企画第2弾の記事となります。</p><p>はじめまして、TIG中神です。</p><p>メディア向けCMSクラウドサービス（以下、GlyphFeedsサービス）のインフラを設計・構築を行いました。メディアならではの特性や構成における重要なポイントについていくつかご紹介します。</p><h2 id="メディアCMSの特性"><a href="#メディアCMSの特性" class="headerlink" title="メディアCMSの特性"></a>メディアCMSの特性</h2><p>メディアCMSサービスに求められる非機能要件の中で、特に重要なものとしては以下の3点があげられます。これらの要件はクラウドとの親和性が高いことからGlyphFeedsサービスではクラウドベースのサービスとして設計・構築を行っています。</p><ul><li><strong>①高速なコンテンツ検索ができること</strong></li><li><strong>②24時間365日稼働し、不慮のサービス停止によるダウンタイムを極力短くすること</strong></li><li><strong>③処理量のスパイクに対応できて、かつ柔軟にスケール出来ること</strong></li></ul><h2 id="①高速なコンテンツ検索"><a href="#①高速なコンテンツ検索" class="headerlink" title="①高速なコンテンツ検索"></a>①高速なコンテンツ検索</h2><p>GlyphFeedsサービスの全体像としてはこのようなになっていて、大きく下記のサービス群で構成しています。</p><ol><li>画面を提供するサービス</li><li>APIを提供するサービス</li><li>非同期処理を行うサービス</li><li>コンテンツの加工を行うサービス</li><li>コンテンツデータの蓄積、検索、ステータスの更新を行うサービス</li></ol><p>このうちコンテンツの高速検索においては上記の1、2、3、5のサービス群で実現しています。<br>これらのサービスを、<strong>EC2、ELB、Elasticsearch、DynamoDBといったマネージドサービス</strong>をベースに、なるべくディスクアクセスが入らないように設計・構築しています。<br>性能を引き出すために複数のレイヤーでチューニングを行っていますが、最後の最後までチューニングに苦労したコンピューティングの部分について記載します。</p><p><img src="/images/20200915/image.png" alt=""></p><h3 id="なぜコンテナ（ECS）ではなく仮想サーバー（EC2）を採用したか？"><a href="#なぜコンテナ（ECS）ではなく仮想サーバー（EC2）を採用したか？" class="headerlink" title="なぜコンテナ（ECS）ではなく仮想サーバー（EC2）を採用したか？"></a>なぜコンテナ（ECS）ではなく仮想サーバー（EC2）を採用したか？</h3><p>コンピューティングの部分は、当初コンテナ利用を検討していましたが、導入前の性能テストにて、コンテナよりも仮想サーバーの方がインスンスの性能を使い切れるという結果となり、最終的には仮想サーバーを採用しました。</p><p>以下に検証の概要を記載します。<br>どのような場合もこの結果になるわけではなく、構成や処理特性・ワークロードにより結果は異なってくると思います。</p><h4 id="■検証時の構成"><a href="#■検証時の構成" class="headerlink" title="■検証時の構成"></a>■検証時の構成</h4><p>EC2(Gatling) =&gt; ALB =&gt; <strong>コンピューティング①</strong> =&gt; NLB =&gt; <strong>コンピューティング②</strong> =&gt; Elasticsearch or DynamoDB</p><ul><li>Gatlingを動かすサーバーがボトルネックにならないように無理のないインスタンスタイプを選択して、念のため<a href="https://gatling.io/docs/current/general/operations/" target="_blank" rel="noopener">GatlingのOS Tuning</a>も行っておきます。</li><li><strong>コンピューティング①②</strong>は下記の構成を基準にをベースに「インスタンス数の変更、インスタンスタイプの変更、CPUユニット、メモリの割り当ての変更、JVMヒープ値の変更、コンピューティング①のみEC2構成またはその逆のパターンなど」を様々な組み合わせとなるように変動していいきます。</li></ul><p><strong>コンピューティング①の構成</strong></p><table><thead><tr><th>構成</th><th>インスタンスタイプ</th><th align="center">数量</th><th>OS</th><th>稼働アプリケーション</th></tr></thead><tbody><tr><td>ECSの場合</td><td>m4.large(2vCPU 8GiB)</td><td align="center">2</td><td>ECS-optimized AMI(Linux)</td><td>Spring Bootコンテナ<br>・FROM amazonlinux:2 <br> ・割当500CPUユニット 1500MB <br>・各インスタンスで1つずつ稼働</td></tr><tr><td>EC2の場合</td><td>m4.large(2vCPU 8GiB)</td><td align="center">2</td><td>Amazon Linux 2</td><td>Spring Bootアプリケーション <br>・各インスタンスで1つずつ稼働</td></tr></tbody></table><p><strong>コンピューティング②の構成</strong></p><table><thead><tr><th>構成</th><th>インスタンスタイプ</th><th align="center">数量</th><th>OS</th><th>稼働アプリケーション</th></tr></thead><tbody><tr><td>ECSの場合</td><td>m4.large(2vCPU 8GiB)</td><td align="center">2</td><td>ECS-optimized AMI(Linux)</td><td>gRPCコンテナ<br>・FROM alpine:3.4 <br> ・割当500CPUユニット 1500MB <br>・各インスタンスで1つずつ稼働</td></tr><tr><td>EC2の場合</td><td>m4.large(2vCPU 8GiB)</td><td align="center">2</td><td>Amazon Linux 2</td><td>gRPCアプリケーション <br>・各インスタンスで1つずつ稼働</td></tr></tbody></table><h4 id="■検証結果"><a href="#■検証結果" class="headerlink" title="■検証結果"></a>■検証結果</h4><p>下記は検証結果のグラフの線形のイメージです。当然どちらの構成でも、処理の多重度があがると処理時間も増加してきますが、同等のインスタンスのスペックで見た場合、ECS構成の方が処理多重度が増えると処理時間の劣化が大きいという結論になりました。</p><p>平常時は大きな性能差はありませんが、高負荷時に処理時間が大きく劣化する可能性があるという結論のため仮想サーバー（EC2）構成の採用に至っています。</p><p>なお、ボトルネック調査のためネットワーク・OSの性能情報や処理のトレースなど各種情報を確認しましたが、処理の多重度があがるとコンテナ上のAPIが実行されるまでのタイムラグが徐々に大きくなっているようでした。ネットワークやホストOS側では異常値などは出ていなかったのですが、状況的にはDockerエンジン部分がボトルネックになっている可能性が想定されました。</p><p><img src="/images/20200915/image_2.png" alt=""></p><p>最近だとコンテナ構成の選択肢が増えたので、どのパターンが最もインスタンス性能を使い切れるのか、性能維持やスケールしやすいのか、性能が頭打ちになった場合の挙動はどうなるのか、フットプリントの軽いベースOSに変えた場合の差など機会があれば検証してみたいですね。</p><ul><li>Docker on EC2</li><li>ECS on EC2</li><li>ECS on Fargate</li><li>EKS</li><li>Anthos GKE on AWS </li></ul><h2 id="②できる限りダウンタイムを短くする"><a href="#②できる限りダウンタイムを短くする" class="headerlink" title="②できる限りダウンタイムを短くする"></a>②できる限りダウンタイムを短くする</h2><p>GlyphFeedsサービスでは、マルチAZ構成を取り各インスタンスは必ず冗長構成を取るようにしています。<br>さらにマルチリージョン構成を採用し、単一のリージョン障害に対する可用性を高めています。<br>このように可用性を高める構成を採用していますが、冗長構成を取っても絶対に停止しないわけではないので、OS上のサービスの自動復旧やEC2のAuto Recoveryなどリソースが落ちたらすぐに復旧するような方式を採用し極力ダウンタイムを短くするアプローチとしています。</p><p>■GlyphFeedsサービスにおける主要な要素</p><table><thead><tr><th>カテゴリ</th><th>マネージドサービス</th><th>用途</th></tr></thead><tbody><tr><td>コンピューティング</td><td>EC2</td><td>WEB、API、非同期処理、コンテンツ加工、データ操作API</td></tr><tr><td>コンピューティング</td><td>Lambda</td><td>マネージドサービス間連携、時刻起動処理など</td></tr><tr><td>データベース</td><td>DynamoDB</td><td>コンテンツ（テキスト）格納</td></tr><tr><td>データベース</td><td>RDS</td><td>アプリケーションマスタ格納</td></tr><tr><td>分析</td><td>Elasticsearch Service</td><td>検索エンジン</td></tr><tr><td>ストレージ</td><td>S3</td><td>コンテンツオブジェクト格納</td></tr></tbody></table><h3 id="どのような障害まで想定するか？"><a href="#どのような障害まで想定するか？" class="headerlink" title="どのような障害まで想定するか？"></a>どのような障害まで想定するか？</h3><p>AWSだと、Well-Architectedフレームワークやベストプラクティスに沿って設計/構築するだけで比較的容易にAZ障害に対する対障害性を確保できます。また、東京リージョンを見ても複数のAZで構成されており、自然災害などの物理障害に対しては極めて高い耐性があると思います。</p><p>では、ダウンタイム最少化のためにどのような障害まで想定するか？というところですがAWSでいうと多少検索するだけで過去にどんな障害があったか検索できます。</p><p>過去にマネージドサービスが長時間停止する障害が数回発生していますね。また、それらは単一リージョンに閉じた論理障害です。<br>（センター内の物理的な障害が起因して論理障害になったパターンもあるようですが）</p><p>そのため、複数のリージョンでサービスが稼働する構成の場合は、サービスを継続できていた可能性が高いと想定されます。GlyphFeedsサービスでは単一のリージョンダウンまでは発生しうると想定し、マルチリージョン構成を取ることにより、リージョン停止レベルの大障害が発生しても別リージョンに切り替えることによりダウンタイムを最小化しています。</p><h3 id="構成のポイント"><a href="#構成のポイント" class="headerlink" title="構成のポイント"></a>構成のポイント</h3><p>上記のようにマルチリージョン構成を取ることにより可用性は向上します。</p><p>では、具体的にどのような構成にするか？というところですがDRシナリオにも複数のパターンがありGlyphFeedsサービスでは、コストと効果のバランスを取り、パイロットライトとウォームスタンバイの間くらいの可用性になるように設計し、データのリカバリポイントは5分以内、切替/切戻は60分程度というサービスレベルになっています。</p><img src="/images/20200915/image_3.png" class="img-middle-size"><p>設計やバックアップサイトへの切替についても様々な方式があるので、サービスに適した方式を採用することで切替自体は比較的容易に実現することが可能です。</p><p>どのDRシナリオにしてもポイントになってくるのは非機能要件とクラウド利用料などコストを考慮して最もバランスの良い構成をとること、とデータも含めてメインサイトへの切戻ができることがあげられます。</p><p>より高可用な構成としてマルチクラウドによる構成なども考えられますが、果たしてサービスレベルはあがるのか？意図したように切戻も出来るのか？などこちらも機会があれば検証を行ってみたいですね。</p><h2 id="③柔軟なスケール"><a href="#③柔軟なスケール" class="headerlink" title="③柔軟なスケール"></a>③柔軟なスケール</h2><p>メディアCMS特有かもしれませんが、上の方で記載した特性の中で最も要件として定義が難しく、ぶれやすいのが、処理量のスパイクやデータ量の増加をどう見るか？という点です。メディアCMSでは繁忙期・閑散期というような概念はほぼなく、開催されるイベントの大きさによって著しく処理量や連携データ量（記事、写真、音声、動画などの数量）が増加します。さらに年々の機材の進化で取り扱うデータそのもの（写真、音声、動画など）のサイズが爆発的に大きくなってきています。</p><p>このように外部要因を含めてのサイジング難易度が高いことから、柔軟に自動でスケール出来るマネージドサービスを最大限に活用します。人手を介さず自動でスケールしてくれるという点で多大なメリットがありますがいくつか注意点もあります。</p><h3 id="オートスケールの注意点"><a href="#オートスケールの注意点" class="headerlink" title="オートスケールの注意点"></a>オートスケールの注意点</h3><p>マネージドサービスの裏側ではコンテナやインスタンスが起動してくるので起動が完了するまでの待ち時間が発生します。待ち時間はマネージドサービスにより変わってくると思いますがマネージドサービスによってはスケールが完了するまで数分のタイムラグが発生します。</p><p>短い時間（数分など）に想定の何倍もの処理量が発生するような場合はスケールが追い付かなく、スロットリングが発生しその後タイムアウトや処理遅延が発生する可能性があります。<br>以下のような線形が発生し、あと数回スパイクが発生したら処理のタイムアウトが発生すると思います。<br><img src="/images/20200915/image_4.png" alt=""></p><p>システムのスパイク特性やベースの性能をどう定義するか？スケール条件の閾値をどう定義するか？オートスケールを利用する場合でも完全に任せきりではなく、事前のシミュレーションや性能検証によるチューニングが必要だということになります。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>当社の中では、自社サービスを展開しながら運用保守で上がってきた課題をダイナミックに改善していくという機会はなかなかないので貴重な経験となりました。設計してきたものが想定通り動いているのか？どの部分が乖離しやすいのか？なぜ乖離したのか？どう改善するか？などは長期的な視点が必要となるのでプロジェクトベースの仕事とは異なる知見が得られたと思いました。</p><p>また、システム特性を見極めることや、非機能要件を定義しどうコントロールしていくかというのは結局オンプレでもクラウドでも同じだなーと改めて思いました。</p><h2 id="参考資料"><a href="#参考資料" class="headerlink" title="参考資料"></a>参考資料</h2><ul><li><a href="https://gatling.io/docs/current/general/operations/" target="_blank" rel="noopener">Gatling OS Tuning</a></li><li><a href="https://aws.amazon.com/jp/about-aws/global-infrastructure/" target="_blank" rel="noopener">AWSグローバルインフラストラクチャ</a></li><li><a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-2018-aws-wellarchitected-framework" target="_blank" rel="noopener">AWS Black Belt Online Seminar 2018 AWS Well-Architected Framework</a></li><li><a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-awsdisaster-recovery" target="_blank" rel="noopener">AWS Black Belt Online Seminar AWSで実現するDisaster Recovery</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20200914/
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="GlyphFeeds" scheme="https://future-architect.github.io/tags/GlyphFeeds/"/>
    
      <category term="CMS" scheme="https://future-architect.github.io/tags/CMS/"/>
    
      <category term="基幹システム" scheme="https://future-architect.github.io/tags/%E5%9F%BA%E5%B9%B9%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0/"/>
    
  </entry>
  
  <entry>
    <title>GlyphFeeds連載を始めます！</title>
    <link href="https://future-architect.github.io/articles/20200914/"/>
    <id>https://future-architect.github.io/articles/20200914/</id>
    <published>2020-09-13T15:00:00.000Z</published>
    <updated>2020-09-18T02:52:09.799Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。2012年新卒入社の山上です。TIGメディアユニットのリーダーを務めています。</p><p>AWSをフル活用した<strong>コンテンツマネジメントシステム（以下、CMS）</strong>を中核に持つクラウドサービス<strong>「GlyphFeeds」</strong>を開発し、様々なクライアントへの導入をリードしています。</p><p>今回の連載では、<strong>GlyphFeeds</strong>の技術について紹介していきます。1日目の今回は、<strong>GlyphFeeds</strong>について簡単に紹介します。</p><h1 id="CMSとは"><a href="#CMSとは" class="headerlink" title="CMSとは"></a>CMSとは</h1><p>新聞社向けのCMSは、記者が取材して書く記事やカメラマンが撮影した写真を管理し、新聞紙面やデジタルサイト・ニュースアプリ等にニュースを届けるためのシステムです。CMSが止まればみなさまのスマホアプリにニュースが届くことはありません。</p><p>つまり新聞社にとって非常に重要な基幹システムであり、ある意味ミッションクリティカルなシステムです。</p><p><img src="/images/20200914/%E5%8E%9F%E7%A8%BF.gif" alt=""></p><p><img src="/images/20200914/%E7%94%BB%E5%83%8F%E7%B7%A8%E9%9B%86.gif" alt=""></p><h1 id="GlyphFeedsとは"><a href="#GlyphFeedsとは" class="headerlink" title="GlyphFeedsとは"></a>GlyphFeedsとは</h1><p><img src="/images/20200914/GlyphFeedsLogo.jpg" alt=""></p><p>GlyphFeedsは、<a href="https://prtimes.jp/main/html/rd/p/000000324.000004374.html" target="_blank" rel="noopener">毎日新聞社プロジェクト</a>でゼロから構築したCMS（システム名：MIRAI）をベースに、<br>新聞業界、メディア業界の標準サービスとして展開可能な形に進化させたクラウドサービスです👍<br><img src="/images/20200914/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-09-08_18.11.19.png" alt=""></p><p>新聞社の心臓部とも言えるCMS（＝基幹システム）を<strong>AWSフルクラウド</strong>＆<strong>Webアーキテクチャ</strong>で実装しました。<br>システム完成までには様々な苦労があり💪、5日間の連載では表現しきれない程多くの技術的チャレンジを行ってきましたが、特徴的な部分を中心にぎゅぎゅっと凝縮してGlyphFeedsの技術についてお届けします！！</p><h2 id="連載スケジュール"><a href="#連載スケジュール" class="headerlink" title="連載スケジュール"></a>連載スケジュール</h2><p>連載スケジュールは下記を予定しています。</p><table><thead><tr><th align="left">日にち</th><th align="left">執筆者</th><th align="left">記事テーマ</th><th align="left">キーワード</th></tr></thead><tbody><tr><td align="left">9/14（月）</td><td align="left">山上燦</td><td align="left">GlyphFeedsとは</td><td align="left">クラウドサービス,AWS,CMS</td></tr><tr><td align="left">9/15（火）</td><td align="left">中神孝士</td><td align="left"><a href="/articles/20200915/">メディア向けCMSサービスのインフラ構成のポイント</a></td><td align="left">AWS,infrastructure,CMS,クラウドサービス,基幹システム</td></tr><tr><td align="left">9/16（水）</td><td align="left">出口豊</td><td align="left"><a href="/articles/20200916/">素材受信インターフェースにSQSを活用してみた_～標準キュー_vs_FIFOキュー～</a></td><td align="left">AWS,SQS</td></tr><tr><td align="left">9/17（木）</td><td align="left">中村立基</td><td align="left"><a href="/articles/20200917/">デスクトップwebアプリのモバイル化における考え方・Tips</a></td><td align="left">UI,設計,Webアプリケーション,モバイルアプリ</td></tr><tr><td align="left">9/18（金）</td><td align="left">渡邉拓</td><td align="left"><a href="/articles/20200918/">SpringBootでDIを駆使したルールエンジン開発</a></td><td align="left">Spring,DI,ルールエンジン</td></tr></tbody></table><p>※正確なタイトルは直前で変更するかも知れませんが、ご了承ください！</p><h1 id="参考-関連リンク"><a href="#参考-関連リンク" class="headerlink" title="参考/関連リンク"></a>参考/関連リンク</h1><p>GlyphFeedsで採用している技術要素たち。</p><ul><li><a href="https://future-architect.github.io/articles/20170605/">ES2015 Web componentsと国産Web componentsフレームワークUrushi</a></li><li><a href="https://future-architect.github.io/articles/20170828/">uroboroSQL x Spring BootによるWebアプリケーション開発</a></li><li><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載企画</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして。2012年新卒入社の山上です。TIGメディアユニットのリーダーを務めています。&lt;/p&gt;
&lt;p&gt;AWSをフル活用
      
    
    </summary>
    
    
      <category term="Product" scheme="https://future-architect.github.io/categories/Product/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="GlyphFeeds" scheme="https://future-architect.github.io/tags/GlyphFeeds/"/>
    
      <category term="CMS" scheme="https://future-architect.github.io/tags/CMS/"/>
    
      <category term="基幹システム" scheme="https://future-architect.github.io/tags/%E5%9F%BA%E5%B9%B9%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0/"/>
    
  </entry>
  
  <entry>
    <title>フューチャーの2020 夏季インターンに参加してみた</title>
    <link href="https://future-architect.github.io/articles/20200913/"/>
    <id>https://future-architect.github.io/articles/20200913/</id>
    <published>2020-09-12T15:00:00.000Z</published>
    <updated>2020-09-15T01:33:55.952Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20200913/pixel-cells-3974186_1280.png" alt=""></p><p><a href="https://pixabay.com/ja/users/manfredsteger-1848497/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3974186" target="_blank" rel="noopener">Manfred Steger</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3974186" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h1 id="導入"><a href="#導入" class="headerlink" title="導入"></a>導入</h1><p>はじめまして。フューチャーのインターンシップに参加していた中山です。<br>私が参加したインターンシップであるEngineer Campの経験を話します。</p><h1 id="インターン参加前の状況"><a href="#インターン参加前の状況" class="headerlink" title="インターン参加前の状況"></a>インターン参加前の状況</h1><h2 id="インターンで経験したいと思っていたこと"><a href="#インターンで経験したいと思っていたこと" class="headerlink" title="インターンで経験したいと思っていたこと"></a>インターンで経験したいと思っていたこと</h2><p>今回のインターン参加前、自分が経験したいと考えていたことは以下の通りです。</p><ul><li>サーバサイドのプログラミングを経験する</li><li>インフラ周りの設定、環境構築、設計などを学ぶ</li><li>チーム開発の流れを経験する</li></ul><h2 id="自分の技術スタック"><a href="#自分の技術スタック" class="headerlink" title="自分の技術スタック"></a>自分の技術スタック</h2><p>また、今回のインターンに参加する前の自分の技術スタックは以下でした。</p><ul><li>フロント：React</li><li>サーバ：Go, Node.js, Ruby</li><li>DB：MySQL, SQLite3</li><li>OS：MacOS, Linux</li><li>その他言語：c++, Python, Scala</li></ul><p>C++, Node.js, Rubyは授業や趣味で少し触れたことがある程度、インフラ周りは名前しか分からないという感じでした。<br>情報系の学生で、IT系のアルバイトやインターンなどに参加したことが無い学生の典型的なスキルセットだったと思います。</p><h1 id="参加したインターン"><a href="#参加したインターン" class="headerlink" title="参加したインターン"></a>参加したインターン</h1><p>上記のような希望を持っていた私は、Engineer Campの中から「③IoTプラットフォームバックエンド開発🏭」を選択しました。<br>このインターンの特徴は募集ページには以下のように書かれており、IoTのバックエンド周りを実装することです。<br><a href="https://future-architect.github.io/articles/20200606/">フューチャー夏のインターン2020。リモート開催予定です</a></p><blockquote><p>実際に稼働している、ミッションクリティカル（高い信頼性が求められるシステム）のバックエンドシステムを開発します。フューチャーでは貴重な広域・大規模な接続数（数十万規模）であり、多くの課題が山積みなので一緒に解決に導きましょう。</p></blockquote><p>未来報にもインターン記事があるので、興味がある方は確認ください。</p><ul><li><a href="https://note.future.co.jp/n/n3d3b635c4c1b" target="_blank" rel="noopener">https://note.future.co.jp/n/n3d3b635c4c1b</a></li></ul><h1 id="インターン参加までの流れ"><a href="#インターン参加までの流れ" class="headerlink" title="インターン参加までの流れ"></a>インターン参加までの流れ</h1><p>正直に話すと、私は就業型のインターンで給料のもらえるアルバイトを色々と探していたため、フューチャーはサポーターズのイベントで見た時にとりあえず応募してみようという思いでした。</p><p>おそらくほとんどの人が最初に思うように、私もフューチャーのインターンの受け入れ先の種類の多さに驚きました。10種類もある受け入れ先の中から、技術的な応募条件と自分のスキルセットが合うものを探し、今回参加した③IoTプラットフォームバックエンド開発🏭を選択しました。</p><p>インターン合格までに受けた面接は、コーディング試験＋オンライン面接1回のみでした。オンライン面接では、実際に参加したプロジェクトの現役開発メンバーの方2名が面接官となり、開発経験、技術スタック、そもそもなんで今回応募したのか、今まででの開発で大変だったことエピソードなど定番の質問を受けました。</p><p>一方で、コーディング試験の手応えはあまりなく、今年のインターンはコロナの影響もあり全国的にオンライン開催となり、学生側が気軽に応募しやすい関係から、倍率が上がるという話が噂されていたことに加え、就業型で給料のもらえるインターンは人気が高いと思っていたため、あまり受かるとは思っていませんでした。</p><p>蓋を開けてみると、結果は合格、話を聞くと作業用のPCまで貸与、さらに最新モデルのMac Book Proという素晴らしい環境を用意していただいたので非常にうれしかったです。</p><h1 id="インターンに参加してみて"><a href="#インターンに参加してみて" class="headerlink" title="インターンに参加してみて"></a>インターンに参加してみて</h1><p>まず前提として、今年はコロナの影響もあり、インターン自体が完全オンライン開催でした。プロジェクトのメンバーの方達も基本的に全員在宅ワークという形であり、Google Meet, Slackなどを利用して活発に連絡をやりとりしている状況でした。</p><h2 id="インターンでやったこと"><a href="#インターンでやったこと" class="headerlink" title="インターンでやったこと"></a>インターンでやったこと</h2><p>実際のインターンでは、まず初日に環境構築から始まります。</p><p>インターン参加学生には全員フューチャーから作業用PCが与えられ、このセットアップから行います。環境構築のはじめにやることは、インターン中は常にVPNを利用してフューチャーのプライベートネットワークにつないでいるため、プロキシ周りの設定になります。プロキシの設定後、プロジェクトで利用しているGoやDockerなど必要な物をインストールします。環境構築完了後は既存のテストを走らせ、通れば作業開始です！</p><p>環境構築後、インターン中に実際にやったことは以下のようなタスクです。</p><ul><li>Swaggerを用いてAPIの設計</li><li>APIのエンドポイントに対応したハンドラの作成</li><li>テスト</li><li>DB操作系の実装</li><li>Goを使ってCSV,Excelファイルの処理</li><li>少しだけDB設計</li></ul><h2 id="採用技術"><a href="#採用技術" class="headerlink" title="採用技術"></a>採用技術</h2><p>今回参加したプロジェクトは以下のような技術を採用していました。</p><ul><li>フロントエンド： Vue.js</li><li>バックエンド：Go、Swagger</li><li>DB: DynamoDB</li><li>インフラ：AWS、Terraform</li><li>その他：GitHub, CircleCI, draw.io, Slack, etc.</li></ul><p>このうち、バックエンドを中心に開発しました。</p><h2 id="インターン中の1日"><a href="#インターン中の1日" class="headerlink" title="インターン中の1日"></a>インターン中の1日</h2><p>ここでは3週間のインターン中どのような1日を過ごしていたかまとめました。<br><strong>10:00～ 朝会に参加</strong>👪<br>参加したプロジェクトは毎日午前10時から30分ほどで前日の進捗と、当日の予定をスプレッドシートに記入、報告するミーティングがあり、それに参加していました。<br><strong>10:30～ 作業開始</strong>🏭<br>任されたタスクの作業をはじめます。<br>基本的に、GitHubのIssueページ、リポジトリ内のドキュメントを読みながら実装を進めます。<br>実装用件などで分からないところがあれば、メンターさんにSlackで質問しながら進めます。<br><strong>12:30～ 昼休憩</strong>☕<br>基本的にお昼は12:00～13:00ですが、リモートワークで家で作業ということもあり、こっそりと12時半まで作業してから1時間休むことで、13時を過ぎてもまだ休んでいていいという優越感にひたるライフハックです。<br>毎週月曜日はインターンに参加している他の学生とランチ会がありました。<br><strong>13:30～ 作業再開</strong>🏭<br>作業に詰まっていると、メンターさんとGoogle Meetを用いて1on1で相談をしたりすることもありました。<br>参加したプロジェクトではSlackのチャンネル内に作業スレを立て、自分の現在行っている作業を書き連ねることで、自分の仕事状況を見える化する試みが行われていました。別途私は日記をつけて、作業ログを残していましたが、作業の途中で前日どのように実装したかなどを振り返るのにも便利でした。<br>また、今回のインターンでは数回フューチャーの各部門のトップの方が30分時間を取ってくださり、それぞれ働き方のマインドや事業の紹介などいろいろなことを講義してくれる日がありました。<br><strong>19:00~ 作業終了</strong>📄<br>インターンの振り返りを日報に書き、その日働いた分の勤務報告を記入しPCを落としてその日のインターンは終了です。</p><h2 id="インターンから学んだこと"><a href="#インターンから学んだこと" class="headerlink" title="インターンから学んだこと"></a>インターンから学んだこと</h2><p>インターン自体からは非常に多くのことを学びましたが、振り返って思いつく内容は以下のような内容です。</p><ul><li>Swaggerが便利！<ul><li>swagger generateでRequest/Response系の自動生成されるコードがたくさん！</li></ul></li><li>TDT(Table Driven Test)が便利！<ul><li>テストケースの増減のしやすさ</li><li>テストコードの可読性の高さ</li></ul></li><li>Go言語書きやすい！<ul><li>型がある安心感とスライスなどの柔軟な記述性</li></ul></li><li>プロキシ周りの設定は大変。<ul><li>Docker for Macのプロキシ設定箇所どこ・・・</li><li>Docker内のgoはなぜ大文字のHTTP_PROXYしか受け取れないのか・・・</li></ul></li><li>チーム開発におけるREADMEなどによる開発手法・設計・データ構造の定義などの明文化の大切さ</li></ul><p>やはり開発現場に入って初めて気付けることは多く、便利な新しい技術に出会えるのはもちろん、途中参加者のキャッチアップのための充実したドキュメントの大切さなど多くのものを学びました。</p><p>特に、インターン参加前にGoでサーバサイドのコードを記述していた際には、ginを利用しており、Response, Request共に構造体を何度も書き、bindの記述を書いていましたが、swaggerでそれらのコードが自動生成されるのを見ると感動しました。</p><h2 id="インターンを振り返ってみて"><a href="#インターンを振り返ってみて" class="headerlink" title="インターンを振り返ってみて"></a>インターンを振り返ってみて</h2><p>自分のコードがマージされたときは最高の気分！！Slackでも祝ってもらえます。<br><img src="/images/20200913/初マージ！.png" class="img-middle-size"></p><p>インターンを全体的に振り返ると以下のようなことを思いました。</p><ul><li>参加前にインターンで学びたいことは概ね達成<ul><li>サーバサイドプログラミングの体験</li><li>Gitを用いたチーム開発の経験</li><li>実際の業務に参加し、キャッチアップしながら開発を経験</li></ul></li><li>改めてITエンジニアの大変さを知る<ul><li>プロジェクトの連携企業との連携の大変さ</li><li>納期の遅れ</li></ul></li><li>プロキシの設定が非常に大変。。</li><li>日を跨いだタスクの持ち越しは精神的に辛い。<ul><li>レポートや卒論に追われているときに似た感覚</li></ul></li><li>インターン自体はタスクも面白く、楽しかった</li></ul><p>個人的な都合で当初の4週間から3週間に期間が縮まった影響もあり、インフラ周りにまで手を出せなかったのは残念でしたが、Swaggerという新しいフレームワークを学べたり、様々な質問をする中でAPI設計の思想など今回のようなインターンで直接現場の方に熱心に教えていただかなければ中々知ることができないことを学べたのが大きかったと思います。</p><p>一方で、与えられるタスクには実装のために必要な資料や背景情報が足りていない場合もあり、そういった場合には質問を重ねる必要があるため、Slackなどで積極的にコミュニケーションを取る必要があるように感じられました。そのため、プログラミング力だけでなく、ある程度自主的に考え、動く力を求められるインターンでもあったと感じました。</p><p>そうした環境だったからこそ、与えられるタスクのIssueの要件そのままに実装するのではなく、今回の実装が何を解決するためのものなのかを考え、時に問題の内容を抽象化、具体化するなどの訓練を積むことができたのではないかと思います。</p><p>単純にプログラミング能力を鍛えるだけでなく、働き方自体を学ぶことができるインターンであったと思います。</p><h1 id="今後に向けて"><a href="#今後に向けて" class="headerlink" title="今後に向けて"></a>今後に向けて</h1><p>今回学んだ</p><ul><li>Gitを利用したチーム開発の流れ</li><li>Swaggerの便利さ</li></ul><p>などを今後の就活、アルバイト、趣味、研究などに生かしていきたいと思います！</p><h1 id="結び"><a href="#結び" class="headerlink" title="結び"></a>結び</h1><p>自分の都合により、本来4週間のインターンを3週間に削ってもらい参加する形となりましたが、様々なタスクを経験させて頂いたり、インターン期間中に色々サポートを頂いたりしました。<br>受け入れ先のプロジェクトのみなさん、フューチャーのHRのみなさんありがとうございました。</p><p><img src="/images/20200913/%E9%9B%86%E5%90%88%E5%86%99%E7%9C%9F.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20200913/pixel-cells-3974186_1280.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/manfredsteger-1848497/?utm_
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="インターン" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/"/>
    
      <category term="採用" scheme="https://future-architect.github.io/tags/%E6%8E%A1%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>いぶし銀なインフラ機能「テープバックアップ／リストア」を語る</title>
    <link href="https://future-architect.github.io/articles/20200911/"/>
    <id>https://future-architect.github.io/articles/20200911/</id>
    <published>2020-09-10T15:00:00.000Z</published>
    <updated>2020-09-11T01:13:46.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、2018年新卒入社の中本です。</p><p>掲題の通り、本稿ではテープバックアップ/リストアについてご紹介したいと思います。なぜこのクラウドネイティブな時代にテープバックアップ/リストア！？という意見もあるかと思われますが、影を潜めつつあるテープバックアップ/リストアを振り返り、</p><p>ご存じの方は<strong><em>ノスタルジー</em></strong>を、知らない方は<strong><em>テクノロジー</em></strong>を感じていただければ幸いです。</p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>以下の順で進めていきます。</p><ul><li><strong><em>テープバックアップ/リストアとは</em></strong></li><li><strong><em>主なバックアップソフトウェア</em></strong></li><li><strong><em>テープバックアップ/リストアのメリット/デメリット</em></strong></li><li><strong><em>テープリストアの流れ</em></strong></li><li><strong><em>主なリストアコマンド</em></strong></li><li><strong><em>個人的にハマったポイント</em></strong></li></ul><h1 id="テープバックアップ-リストアとは？"><a href="#テープバックアップ-リストアとは？" class="headerlink" title="テープバックアップ/リストアとは？"></a>テープバックアップ/リストアとは？</h1><p>テープバックアップ/リストアとはその名の通り磁気テープを利用した長期保存・大容量・低コストなバックアップ/手法の一つです。</p><p><img src="/images/20200911/%E3%83%86%E3%83%BC%E3%83%97%E8%A3%85%E7%BD%AE.png" alt=""></p><blockquote><p><code>HPE StoreEver MSL2024 テープライブラリ</code></p></blockquote><p>テープマガジンを取り出し、都度テープを入れ替えることでバックアップを取得していきます。<br>※オートローダのテープ装置では、ロボットが自動的にバックアップ用テープを読込み、バックアップを自動化します。</p><p><img src="/images/20200911/%E3%83%86%E3%83%BC%E3%83%97.png" alt=""></p><blockquote><p><code>HPE StoreEver MSL2024 テープマガジン</code></p></blockquote><p>オフラインでバックアップを行うため、ウイルス感染や人為的なオペミスによるバックアップ領域への影響などの懸念はありません。<br>また、磁気テープ規格であるLTOのストレージ容量は2020年現在で2.5TB～最大30TBまであり、将来的には数百TBにまで拡張するロードマップも公表されています。</p><blockquote><p>＜ご参考＞<br>LTO6：非圧縮容量2.5TB、圧縮容量6.25TB<br>LTO7：非圧縮容量6TB、圧縮容量15TB<br>LTO8：非圧縮時12TB、最大30TB</p></blockquote><h1 id="主なバックアップソフトウェア"><a href="#主なバックアップソフトウェア" class="headerlink" title="主なバックアップソフトウェア"></a>主なバックアップソフトウェア</h1><p>テープバックアップを支える主なバックアップソフトウェアです。</p><ul><li>Data Protector（HPE）</li><li>NetBackup（VERITAS）</li><li>Backup Exec（VERITAS）</li><li>ARCSERVE BACKUP(arcserve)</li><li>NetVault Backup(Quest Software)</li></ul><p>本稿では、<strong><em><code>NetBackup</code></em></strong>をベースにテープバックアップ/リストアについてご紹介いたします。</p><h1 id="テープバックアップ-リストアのメリット-デメリット"><a href="#テープバックアップ-リストアのメリット-デメリット" class="headerlink" title="テープバックアップ/リストアのメリット/デメリット"></a>テープバックアップ/リストアのメリット/デメリット</h1><table><thead><tr><th>メリット</th><th>デメリット</th></tr></thead><tbody><tr><td>テープメディアの容量単価が安い</td><td>磁気ヘッドなどのゴミ除去の定期メンテナンスが必要</td></tr><tr><td>電力消費がディスクより少ない</td><td>物理的なテープ交換などの人的コストが掛かる</td></tr><tr><td>記録容量が大きい</td><td>磁気テープのためランダムアクセスできない</td></tr><tr><td>遠隔地バックアップなど可搬性に優れている</td><td>遠隔地で送付・保管する諸々のコストが掛かる</td></tr><tr><td>耐久性に優れている</td><td>テープ装置が必要なため環境に依存する</td></tr><tr><td>-</td><td>ファイル単位での個別リストアに不向き</td></tr><tr><td>-</td><td>クラウド化に伴い知見が少ない</td></tr></tbody></table><p><strong><em>「リストアする頻度は限りなく少なく、仮に戻したとしても即時性を要求しないので、大容量データを安価でバックアップしたい」</em></strong>といったデータの二次的な保管に向いているように思えます。</p><h1 id="でも、戻せないと意味がない"><a href="#でも、戻せないと意味がない" class="headerlink" title="でも、戻せないと意味がない"></a>でも、戻せないと意味がない</h1><p>安価で大容量のバックアップを可能にするのがテープバックアップということは理解しました。ただ、バックアップとして保管する以上、リストア出来なければバックアップ装置として意味がありません。</p><p><strong><em>障害時にリストアしようとしたが、データを復旧できなかった</em></strong>といったことにならないように、テープのリストアの流れとハマったポイントについて確認し、今後の参考にしていただければと思います。</p><h1 id="テープリストアフロー"><a href="#テープリストアフロー" class="headerlink" title="テープリストアフロー"></a>テープリストアフロー</h1><ol><li><strong><em>テープスロットにあるテープの一覧取得</em></strong><br> →　スロットに装填されているテープの一覧情報を取得し、対象テープの情報を取得する。</li><li><strong><em>指定テープのデータ情報を取得（IMPORTフェーズ1）</em></strong><br> →　テープメディア情報のカタログエントリのリストを作成する。</li><li><strong><em>テープデータのインポート（IMPORTフェーズ2）</em></strong><br> →　フェーズ1で作成したイメージのリストから、インポートするイメージを選択する。</li><li><strong><em>リストア（全量、もしくはファイル単位）</em></strong></li></ol><h1 id="主なリストアコマンド"><a href="#主なリストアコマンド" class="headerlink" title="主なリストアコマンド"></a>主なリストアコマンド</h1><h3 id="VMQUERY"><a href="#VMQUERY" class="headerlink" title="VMQUERY"></a>VMQUERY</h3><p>テープスロットに挿入されているテープメディア情報を取得するコマンド</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$/usr/openv/volmgr/bin/vmquery -pn プール名 -b</span><br><span class="line">================================================================================</span><br><span class="line">media   media  robot  robot  robot  side/  optical  <span class="comment"># mounts/      last</span></span><br><span class="line"> ID     <span class="built_in">type</span>   <span class="built_in">type</span>     <span class="comment">#    slot   face   partner  cleanings    mount time </span></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">1161L4  HCART  TLD      0       2     -       -           1     2017/07/03 08:59</span><br><span class="line">1168L4  HCART  TLD      0       7     -       -           1     2017/10/02 08:21</span><br><span class="line">1174L4  HCART  TLD      0       5     -       -           1     2018/01/08 09:39</span><br><span class="line">1181L4  HCART  TLD      0       4     -       -           1     2018/04/02 07:54</span><br></pre></td></tr></table></figure><p><code>※プール名での問い合わせが可能な[pn]オプション</code><br><code>※ボリューム情報が簡易形式で出力される[b]オプション</code></p><h3 id="BPIMPORT"><a href="#BPIMPORT" class="headerlink" title="BPIMPORT"></a>BPIMPORT</h3><p>テープメディア情報のカタログエントリの作成（Phase1）、データのインポート（Phase2）を行うコマンド<code>VMQUERY</code>で確認したmediaIDを指定する。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/openv/netbackup/bin/admincmd/bpimport -id [mediaID]</span><br><span class="line">Import phase 1 started 2020年07月13日 11時13分46秒</span><br><span class="line">11:13:46 INF - Create DB information <span class="keyword">for</span> media id [mediaID].</span><br><span class="line">11:13:46 INF - Initiation of bptm process to phase 1 import media id [mediaID] was successful.</span><br><span class="line">11:13:49 INF - Waiting <span class="keyword">for</span> mount of media id [mediaID] on server XXXXXXX <span class="keyword">for</span> reading.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">Import phase 2 started 2020年07月13日 11時23分49秒</span><br><span class="line">11:23:51 INF - If Media id [mediaID] is not <span class="keyword">in</span> a robotic library administrative interaction may be required to satisfy this mount request.</span><br><span class="line">11:23:53 INF - Waiting <span class="keyword">for</span> mount of media id [mediaID] on server XXXXXXX  <span class="keyword">for</span> reading.</span><br><span class="line">11:25:01 INF - Waiting <span class="keyword">for</span> positioning of media id [mediaID] on server XXXXXXX  <span class="keyword">for</span> reading.</span><br><span class="line">11:25:02 INF - Beginning import on server XXXXXXX of client XXXXXXX .</span><br></pre></td></tr></table></figure><h3 id="BPLIST"><a href="#BPLIST" class="headerlink" title="BPLIST"></a>BPLIST</h3><p>テープ内のファイルを確認するコマンド<br><code>※上記でテープ情報のインポートが完了している対象のみ実行可能</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/openv/netbackup/bibplist -C ＜クライアント名＞ -R -s ＜検索範囲開始日時＞ -e ＜検索範囲終了日次＞ ＜検索対象パス＞</span><br><span class="line">-rw-r----- 200       200         24884756K  3月 20  2019 /XXX/XXX/XXX</span><br><span class="line">-rw-r----- 200       200         24884756K  3月 20  2019 /XXX/XXX/XXX</span><br><span class="line">-rw-r----- 200       200         24884756K  3月 20  2019 /XXX/XXX/XXX</span><br><span class="line">-rw-r----- 200       200         24884756K  3月 20  2019 /XXX/XXX/XXX</span><br></pre></td></tr></table></figure><h3 id="BPRESTORE"><a href="#BPRESTORE" class="headerlink" title="BPRESTORE"></a>BPRESTORE</h3><p>テープ内のファイルをオリジナルと同一のパスへ上書きリストアを行うコマンド</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/openv/netbackup/bin/bprestore -C ＜バックアップ元クライアント名＞ -D ＜バックアップ先クライアント名＞ -s ＜検索範囲開始日時＞ -e ＜検索範囲終了日次＞ </span><br><span class="line">11:10:40 (43724.xxx) Restore job id 43724 will require 1 image.</span><br><span class="line">11:10:40 (43724.xxx) Media id [mediaID] is needed <span class="keyword">for</span> the restore.</span><br><span class="line"></span><br><span class="line">11:11:14 (43724.001) Restoring from image created 2020年07月14日 08時14分33秒</span><br><span class="line">11:11:15 (43724.001) TAR STARTED</span><br><span class="line">11:11:15 (43724.001) INF - If Media id [mediaID] is not <span class="keyword">in</span> a robotic library administrative interaction may be required to satisfy this mount request.</span><br><span class="line">11:11:17 (43724.001) INF - Waiting <span class="keyword">for</span> mount of media id [mediaID] on server XXXXXXX <span class="keyword">for</span> reading.</span><br><span class="line">11:12:25 (43724.001) INF - Waiting <span class="keyword">for</span> positioning of media id [mediaID] on server XXXXXXX <span class="keyword">for</span> reading.</span><br><span class="line">11:12:26 (43724.001) INF - Beginning restore from server XXXXXXX to client XXXXXXX.</span><br></pre></td></tr></table></figure><p><code>※[R]オプション + ＜リストア先対象パス＞で別のパスにリストア可能</code></p><h1 id="個人的にハマったポイント"><a href="#個人的にハマったポイント" class="headerlink" title="個人的にハマったポイント"></a>個人的にハマったポイント</h1><p>上記コマンドがあればテープからローカルサーバへのリストアは最低限可能です。ここからは個人的にハマった箇所について共有したいと思います。</p><blockquote><p>＜テープリストアをするに至った経緯＞<br>基盤更改後の稼働していない旧オンプレミス基盤にて、テープバックアップにより長期保管されている過去10年分の特定データを抽出。<br>テープ装置がマウントされているバックアップサーバにてCUIベースでリストアを行い、抽出したデータをバックアップサーバから外部メディア（DVD等）にエクスポートという抽出作業を実施。（テープ → バックアップサーバ → 外部メディア）</p></blockquote><h2 id="テープメディア内のファイルを表示するBPLISTコマンドはIMPORTフェーズを終えてからでないと、正しく表示されない。"><a href="#テープメディア内のファイルを表示するBPLISTコマンドはIMPORTフェーズを終えてからでないと、正しく表示されない。" class="headerlink" title="テープメディア内のファイルを表示するBPLISTコマンドはIMPORTフェーズを終えてからでないと、正しく表示されない。"></a>テープメディア内のファイルを表示するBPLISTコマンドはIMPORTフェーズを終えてからでないと、正しく表示されない。</h2><p>多くのテープメディアから特定のファイルを探したいときに最も利用したいと考えるのが、テープメディア内のファイル情報を取得するBPLISTコマンドだと思います。しかし、<code>BPLIST</code>コマンドは<strong><em>テープメディア情報のカタログエントリを作成するインポート作業（BPIMPORT）を経てからでないと、実行結果が正常に返ってきません。</em></strong><br>コマンド実行してもリストが取得できない原因がわからず少しハマってしまいましたが、原因判明後も20～30分程度要するIMPORT作業がテープ単位で必要ということを知り、さらにへこんでしまいました。</p><h2 id="大容量ファイルをリストアしようとするとリストア時のメモリ確保に失敗し、処理が中断される。"><a href="#大容量ファイルをリストアしようとするとリストア時のメモリ確保に失敗し、処理が中断される。" class="headerlink" title="大容量ファイルをリストアしようとするとリストア時のメモリ確保に失敗し、処理が中断される。"></a>大容量ファイルをリストアしようとするとリストア時のメモリ確保に失敗し、処理が中断される。</h2><p><code>BPRESTORE</code>コマンドを利用して、oracleDBから作成されたフルバックアップのdmpファイル（80GB程度）のリストアを試みたところ、以下のエラーメッセージが出て、処理が中断されてしまいました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valoc failed <span class="keyword">for</span> hp_save_area_errno(12) (cannot allocate memory)</span><br></pre></td></tr></table></figure><p>どうやらリストアを開始するに差し当たって、最初にメモリを確保してから、リストア作業を開始するようなので、ファイル容量が10GB程度のものでも試行してみましたが、こちらもダメ。オンプレミス環境でメモリ増強対応も不可能であったため、メモリを食わずに本エラーを解消する手段がないか確認するためサポートへ問合せしたところ、サポートからの回答は、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">リストア時のメモリ確保に失敗したと推察されます。</span><br><span class="line">メーカナレッジを確認した所、Linux環境にて同様にメモリ確保に失敗する以下のバグが確認されています。</span><br><span class="line">BUG REPORT: During some restores on Linux clients using VERITAS NetBackup (tm) 6.5 or 6.5.1, a memory leak can occur, causing the restore to fail.</span><br><span class="line"></span><br><span class="line">お客様ご利用のバージョンは6.5GA(パッチ無し)となっておりましたので、上記でご案内したBugに該当していると考えられます。</span><br><span class="line"></span><br><span class="line">回避方法は、パッチ適用かバージョンアップ以外には確認できませんでしたが、6.5はかなり古いバージョンのため、メーカサイト上には見つけられず、パッチの入手が困難となっております。</span><br></pre></td></tr></table></figure><p>とのこと。既存バグで回避はパッチ適用のみだが、利用バージョンが古くパッチが入手不可という結果に。。<br>結果的にギリギリエラーが出ない2～3GB程度に分割されたdmpファイルが偶然見つかったので、そちらでなんとかリストアは出来ましたが、一時はどうなることやらとかなり肝を冷やしました。。<br>※コマンド実行からメモリ不足エラーが出るまで、1時間から長くて5時間程度要してしまうのも悩みの種でした。。</p><blockquote><p>＜実行環境＞<br>対象サーバ：HP Proliant DL 385 G5（バックアップサーバ）<br>搭載メモリ：8GB<br>プロダクト：Veritas<br>製品名：NetBackup 6.5</p></blockquote><h2 id="複数テープを連続的にリストアしようとすると、「Restore-Started」のメッセージ出力されて以降、処理が開始されないことがある。"><a href="#複数テープを連続的にリストアしようとすると、「Restore-Started」のメッセージ出力されて以降、処理が開始されないことがある。" class="headerlink" title="複数テープを連続的にリストアしようとすると、「Restore Started」のメッセージ出力されて以降、処理が開始されないことがある。"></a>複数テープを連続的にリストアしようとすると、「<code>Restore Started</code>」のメッセージ出力されて以降、処理が開始されないことがある。</h2><p>複数テープのリストアを続けて実行しようとしたところ、1本目では「<code>Restore Started</code>」のメッセージ後即座にリストアが開始されたのですが、2本目になると「<code>Restore Started</code>」後、後続処理が開始されず、リストアjobの状態も「<code>Queued</code>」から変化なし。</p><p>何度か様々なパターンで試行しましたが、2本目で本事象が高頻度で発生するため、サポートに問い合わせをしました。<br>サポートからの回答は、</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">リストアジョブがアクティブになるまでにかかる時間は、主に復元されるファイルの数によって異なります。リストアするファイルの数が多いほど、ジョブがQueued状態に留まる時間が長くなります。</span><br><span class="line"> </span><br><span class="line">リストアジョブのStateが「Queued」は、マスターサーバー（CPU、メモリ、およびイメージカタログを保持するディスク）の仕様と、ファイルのリストを作成している間にリストアジョブで使用できるリソース量にも依存します。</span><br><span class="line">マスターサーバーが頻繁にスワップしている場合や、マスターサーバーで他の多くのジョブが実行されている場合は、ジョブがQueued状態に留まる時間が大幅に増加します。</span><br></pre></td></tr></table></figure><p>・・・。<br>釈然としない回答でしたが、時間を空けてコマンド再実行を行うと事象としては解消されました。<br>複数テープの連続的リストアを行うためにシェルスクリプト等で自動化を図る場合には、別途策を講じる必要がありそうです。</p><p>以上、私がテープリストア時にハマったポイントでした。</p><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>上記で上げたハマりポイントなど不便なところはたくさんありますが、一方で、安価で大容量なテープメディアや可搬性に優れている点などから磁気テープによるオフラインでのバックアップ/リストアは近年再評価されていると言われています。</p><p>テープ装置での運用を導入する際には、メモリ依存で処理エラーが発生するバグなども念頭に置き、本番運用を想定したリストアのテストも抜かりなく実施できればと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、2018年新卒入社の中本です。&lt;/p&gt;
&lt;p&gt;掲題の通り、本稿ではテープバックアップ/リストアについてご紹介した
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="バックアップ" scheme="https://future-architect.github.io/tags/%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97/"/>
    
      <category term="リストア" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%82%B9%E3%83%88%E3%82%A2/"/>
    
      <category term="テープ装置" scheme="https://future-architect.github.io/tags/%E3%83%86%E3%83%BC%E3%83%97%E8%A3%85%E7%BD%AE/"/>
    
      <category term="NetBackup" scheme="https://future-architect.github.io/tags/NetBackup/"/>
    
      <category term="Veritas" scheme="https://future-architect.github.io/tags/Veritas/"/>
    
  </entry>
  
  <entry>
    <title>「2020年代のコンテナ時代のPythonアーキテクチャ&amp;デプロイ」というテーマでPyCon.jp 2020で発表してきました</title>
    <link href="https://future-architect.github.io/articles/20200910/"/>
    <id>https://future-architect.github.io/articles/20200910/</id>
    <published>2020-09-09T15:00:00.000Z</published>
    <updated>2020-09-10T00:42:08.476Z</updated>
    
    <content type="html"><![CDATA[<p>初のオンライン＆Python 2サポートが終了したあとのPyCon.jpという節目のイベントで発表してきました。</p><p><img src="/images/20200910/IMG_0039.PNG" alt=""></p><p>発表資料はこちらになります。</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vTpZWvGItGIoj4hEX9enLZOf4y1vKWGRmbNxDfmD_tyS4U4D4lYXLtzMuXva_HhJ6mzOAtZOJNAoaow/embed?start=false&loop=false&delayms=3000" frameborder="0" width="100%" height="569px" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><p>日英表記にした関係で表現をだいぶシンプルに削ることになったりしたので、口頭での説明のみ行ったこととか、その後のTwitterの感想を見て思ったことなどを軽く補足します。</p><h2 id="コンテナの時代"><a href="#コンテナの時代" class="headerlink" title="コンテナの時代"></a>コンテナの時代</h2><p>コンテナのカバレッジが広がっている事例としてはDensoのMisakiとか戦闘機にKubernetesを載せてみました、とかもあります。</p><ul><li><a href="https://www.publickey1.jp/blog/20/kubernetesmisaki.html" target="_blank" rel="noopener">https://www.publickey1.jp/blog/20/kubernetesmisaki.html</a></li><li><a href="https://www.publickey1.jp/blog/20/kubernetesf-16.html" target="_blank" rel="noopener">https://www.publickey1.jp/blog/20/kubernetesf-16.html</a></li></ul><p>なお、この説明ではDockerをベースにしていますが、世の中にはランタイムもビルドツールも、Docker以外もたくさんあります。ビルドのレイヤーをどうするのかの問題とかはDockerの設計によって発生した新しい問題な気もしますし、Debianとかのベースイメージも外部でビルドした内容をただファイルコピーしているだけだったりするので、Dockerfileのみのイミュータブルインフラという考え方も別に天地ができたころからのルールというわけではなく、今後は外部ツールとのハイブリッドとかが出てこないともいえないし、ここに書いているベストプラクティスが今後いつまでも続くわけではなく、そのうち知識のアップデートが必要になる可能性もあります。</p><h2 id="コンテナの仕組み"><a href="#コンテナの仕組み" class="headerlink" title="コンテナの仕組み"></a>コンテナの仕組み</h2><p>ここの図はいくつか簡略化しています。</p><ul><li>ここでは仮想化の図はVirtualBoxとかVMWareとかを使った完全仮想化を想定した図になっています。準仮想化であっても、ホストOSの中の対象アプリを直接見れるわけではない、という点ではこの説明の範疇ではあります。</li><li>コンテナも、Linuxを使ってLinuxイメージを動かした想定の図です。WindowsやmacOSの場合は、ホストOSのカーネルとは別にLinuxカーネルを動作させて、その中でDockerを動かしますので、やや事情が異なります。</li></ul><p>macOSのDockerの場合はまず、この仮想PCのつかうCPUコア数やメモリ、ストレージを設定します。ストレージは可変長ストレージなので細かいことは気にしなくても良いのですが、macでコンテナが遅い場合はメモリやCPUの調整が必要です。</p><p>Windowsは以前はmacOSと同じでしたが、WSL2をつかうバックエンドにすると、LinuxからオンデマンドでWindowsの持っているCPUやメモリを自由に割当できるようになり、macより柔軟になりました。Windowsの使えるコアのすべてと、メモリの80%がLinuxから利用可能なメモリに見え、必要に応じてLinux側にメモリとCPUを渡します。実装としてはVMの中で動いているのですが、使い勝手としてはLinuxに近くなりました。もちろん、使いすぎないように<a href="https://docs.microsoft.com/ja-jp/windows/wsl/release-notes#build-18945" target="_blank" rel="noopener">あらかじめMaxのCPUとメモリを制限しておく</a>こともできます。</p><p>しかし、<a href="https://github.com/microsoft/WSL/issues/4166#issuecomment-662705705" target="_blank" rel="noopener">現時点では使い終わったメモリがうまくWindowsに返らず、対症療法としてメモリ制限が50%にされる変更があったり</a>もろもろ混乱は続いています。早く解決して欲しい。</p><p><a href="https://qiita.com/yoichiwo7/items/e3e13b6fe2f32c4c6120" target="_blank" rel="noopener">https://qiita.com/yoichiwo7/items/e3e13b6fe2f32c4c6120</a></p><p>なお、Pythonの発表なので説明はしませんでしたが、Java 8の場合はDockerが用意する壁を突き抜けてメモリを確保しにいってしまうというバグ？があるらしいので、もしJavaを使っている人はJava 8 update 212（ライセンスが変わったあとのバージョンなので注意）か、Java 11以降をつかうようにしましょう。</p><ul><li><a href="https://blog.softwaremill.com/docker-support-in-new-java-8-finally-fd595df0ca54" target="_blank" rel="noopener">https://blog.softwaremill.com/docker-support-in-new-java-8-finally-fd595df0ca54</a></li></ul><h2 id="コンテナの利用法"><a href="#コンテナの利用法" class="headerlink" title="コンテナの利用法"></a>コンテナの利用法</h2><p><img src="/images/20200910/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-08-28_12.04.23%EF%BC%883%EF%BC%89.png" alt=""></p><p>ここではいろいろなコンテナの開発での利用方法について紹介しました。まず注意点として、ホストのフォルダをマウントする方式の場合、Linuxのようなただ同一ファイルシステムを別の視点で見せている場合は問題ありませんが、macOSやWindowsのような仮想PCが絡む場合は、ゲストのOS側のファイルシステムにファイルを転送する必要があります。そのため、転送量が大きくなるとパフォーマンスが著しく落ちる可能性があります。macでは新しいマウント方式が入って改善されようとしていたりしますが、<a href="https://github.com/docker/for-mac/issues/1592" target="_blank" rel="noopener">Mutagenが入るぞ、やっぱりやめるぞ</a>とか現在進行形でいろいろ話がされています。</p><p>ゲスト環境の中に潜り込んで編集してくれるような開発環境があれば解決しますが、現時点ではVisual Studio Codeのみがこれに対応しています。PyCharmなどのJetBrains製のツールなどはこれに対応しておらず、Linux版のアプリを使ってホストのX ServerにGUIを飛ばすとかしなければいけません。VSCodeを使うか、マウントの速度ペナルティを負うか、画面を飛ばすか、処理系を動かすのを諦める変わりにツールの自由を得るか、などいろいろトレードオフが現時点ではあります。JetBrainsの方でもissueとしては上がっています。今後の開発ツールは仮想環境内部のバックエンドと、開発ツールのUIのフロントエンドを分離して仮想環境に対応していく、ということで解決されてくると思います。</p><ul><li><a href="https://youtrack.jetbrains.com/issue/JBR-2310" target="_blank" rel="noopener">https://youtrack.jetbrains.com/issue/JBR-2310</a></li></ul><p>そんな感じで、VSCodeが現状は自由度が高いので、コンテナ活用の絵はVSCodeにしていたのでした。僕はこの絵の一番右のスタイルでやることが多いです。Python、Go、Node.jsのどの言語もマルチプラットフォームはきちんとしているので、現在進行形で編集しているコードを動かすものはOSネイティブで動かし、JetBrains系のIDEを使っています。</p><p>これと同じような問題は、WindowsとWSL2間でもあったりします。あっちの方がさらに複雑だったりしますので、そのうち別のエントリーを書くかもしれません。</p><h2 id="コンテナ時代のアーキテクチャ"><a href="#コンテナ時代のアーキテクチャ" class="headerlink" title="コンテナ時代のアーキテクチャ"></a>コンテナ時代のアーキテクチャ</h2><p>古きよきUNIX世界のアーキテクチャに先祖帰りしているぞ、という話をしました</p><ul><li>1つのプロセスが1つのタスクを</li><li>環境変数で設定を変更</li><li>TCP/UDPのソケットを使って外部へのサービスの提供（HTTPサーバー含む）</li><li>ファイルなどの保存もTCP/UDPのソケットを使ってリクエスト</li><li>ログは標準出力へ</li><li>シグナルでプロセスの終了</li></ul><p>シグナルの話はとくに発表では触れませんでしたが、Pythonでは余計なことをしなければ自然と対応できる気がします。</p><p>オンプレで動かしていたサービスをとりあえずコンテナ化してしまうとやりがちなのが、systemdとかを入れて、サービスモリモリのコンテナを作ってしまうというものがあります。systemdなどを使わずに、デーモンなども作らずに、コンテナ中でフォアグラウンドプロセスとしてすべて起動するようにします。そのコンテナを複数束ねてサービスを実現するようにします。お子様ランチのようなワンプレートで全部乗せではなく、1品1品別皿に盛られて、量を増やしたい場合は同一種の皿を増やす回転寿司スタイルがコンテナです。</p><p>ログ出力はサイドカーよりも標準出力で、というのはコンテナのログドライバーとかでそういうものができるようになってきた、という段階で、まだ100%そうだ、とは言えないとは思います。ですが、アプリケーションにログの出力先を教えてあげないといけない、というのは設計思想的にはコンテナっぽくはないので、ログドライバー経由が今後は増えてくるでしょう。</p><p>ちなみに、OpenCensus/OpenTelemetryでぐぐると僕の書いた<a href="https://future-architect.github.io/articles/20190604/">弊社の技術ブログの記事</a>が上位に出てきます。Chromeのシークレットウインドウで検索をすると日本語では1位、英語でも10位以内でした。自慢です。</p><h2 id="コンテナ時代のPythonアーキテクチャ"><a href="#コンテナ時代のPythonアーキテクチャ" class="headerlink" title="コンテナ時代のPythonアーキテクチャ"></a>コンテナ時代のPythonアーキテクチャ</h2><p>前節の話をPythonで実現するには、といった解説です。Dockerのベストプラクティスなどによると、プロセスマネージャなどは利用せずにアプリケーションを直接起動するように書いています。プロセスマネージャというと、PythonではWSGIのgunicorn、uwsgiですね。Rubyだとrackのunicorn、puma、Node.jsだとpm2とかが該当します。ただ、Pythonの場合はFlaskやDjangoなども、組み込みのウェブサーバーはデバッグ用で、そもそもシングルスレッドで1つの処理でブロッキングしたりと性能をまったく<br>重視しない環境だったりします。各フレームワークもgunicornなどの利用を進めていたりしますので、Pythonの場合はgunicornに最低限のワーカーをぶら下げたものをコンテナとするのが良いでしょう。</p><h3 id="アプリケーションフレームワークとパフォーマンス"><a href="#アプリケーションフレームワークとパフォーマンス" class="headerlink" title="アプリケーションフレームワークとパフォーマンス"></a>アプリケーションフレームワークとパフォーマンス</h3><p>僕の周りのPythonistaの中でちょっと話題になるのがこのプレゼンで紹介したStarletteです。あとは、この<a href="https://www.starlette.io/" target="_blank" rel="noopener">Starlette</a>の上に構築されたAPIサーバーのためのフレームワークの<a href="https://fastapi.tiangolo.com/" target="_blank" rel="noopener">fastapi</a>です。せっかくPython2がなくなったので、Python3の性能を活用するこれらのフレームワークの利用が増えると面白く仕事ができるんじゃないかな、と思います。フューチャー社内でPython案件で何か質問とかあれば僕に問い合わせてもらいたいのですが、これらのフレームワークを使うヘルプであればさらに大歓迎です。</p><p>Flaskで作ってみたアプリケーションは以下の通りです。たいてい、外部のサービスに問い合わせてその結果をマッシュアップして返すということで、urllibを使ってマシン内部に起動したnginxのコンテナにリクエストを投げ、その結果をそのまま返すというコードです。</p><figure class="highlight python"><figcaption><span>app.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, jsonify</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span><span class="params">()</span>:</span></span><br><span class="line">    j = json.load(urllib.request.urlopen(<span class="string">"http://nginx/index.json"</span>))</span><br><span class="line">    <span class="keyword">return</span> jsonify(j)</span><br></pre></td></tr></table></figure><p>Dockerfileはこんな感じです。<a href="https://future-architect.github.io/articles/20200513/">仕事でPythonコンテナをデプロイする人向けのDockerfile (1): オールマイティ編</a>で紹介したエッセンスがいろいろ入っています。今後はマルチステージビルド必須です。BuildKitといったビルド高速化のソリューションもマルチステージビルドをしなければほぼ意味がありません。Docker力を鍛えるにはまずマルチステージビルドです。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>-slim-buster</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> APP_HOME /app</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> <span class="variable">$APP_HOME</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.txt .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r requirements.txt</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"><span class="keyword">ENV</span> PYTHONUNBUFFERED=TRUE</span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> gunicorn --<span class="built_in">bind</span> :8000 --workers 1 app:app</span></span><br></pre></td></tr></table></figure><p>Starletteのコードはこんな感じです。asyncioのセッションとかが出てくるのでちょっと冗長ですが、やっていることはそんなに難しくはないでしょう。<a href="https://www.starlette.io/routing/" target="_blank" rel="noopener">routes配列</a>を利用して、パスごとに別のハンドラを設定というのも当然できます。デコレータを使うAPIの方がお洒落に見えますが、まあこっちもそんなに大変ではないかと思います。</p><p>こちらも同じNginxにリクエストを投げていますが、asyncioを生かしたaiohttpを使ったリクエストを投げています。</p><figure class="highlight python"><figcaption><span>main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> starlette.applications <span class="keyword">import</span> Starlette</span><br><span class="line"><span class="keyword">from</span> starlette.responses <span class="keyword">import</span> UJSONResponse</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">app</span><span class="params">(scope, receive, send)</span>:</span></span><br><span class="line">    session = aiohttp.ClientSession()</span><br><span class="line">    resp = <span class="keyword">await</span> session.get(<span class="string">"http://nginx/index.json"</span>)</span><br><span class="line">    response = UJSONResponse(<span class="keyword">await</span> resp.json())</span><br><span class="line">    <span class="keyword">await</span> response(scope, receive, send)</span><br><span class="line">    <span class="keyword">await</span> session.close()</span><br></pre></td></tr></table></figure><p>Dockerfileは以下のような感じです。こちらは<a href="https://future-architect.github.io/articles/20200514/">仕事でPythonコンテナをデプロイする人向けのDockerfile (2): distroless編</a>で紹介したDistrolessを使っています。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>-slim-buster as builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> requirements.lock /opt/app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -r requirements.lock</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> gcr.io/distroless/python3-debian10 as runner</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /usr/<span class="built_in">local</span>/lib/python3.7/site-packages /root/.<span class="built_in">local</span>/lib/python3.7/site-packages</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /usr/<span class="built_in">local</span>/bin/gunicorn /opt/app/gunicorn</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> main.py /opt/app/main.py</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/app/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PYTHONUNBUFFERED=TRUE</span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"./gunicorn"</span>, <span class="string">"-w"</span>, <span class="string">"1"</span>, <span class="string">"-k"</span>, <span class="string">"uvicorn.workers.UvicornWorker"</span>, <span class="string">"--log-level"</span>, <span class="string">"warning"</span>, <span class="string">"--bind"</span>, <span class="string">":8000"</span>, <span class="string">"main:app"</span>]</span></span><br></pre></td></tr></table></figure><p>これらのコンテナを1コアのCPUに割当て、いろいろ属性を変えつつabで計測してみました。なんかMacBook Airは発熱してくると速度が落ちてくるのか安定はしないので具体的な数値を出して議論するような結果は得られませんでしたが、Starletteの方が倍以上高速でした。並列をかなり増加させると、Flaskの方はどんどんパフォーマンスが落ちてきてしまいましたが、Starletteは並列数によらず一定のリクエストを毎秒捌いていました。またワーカー数やスレッド数を1-3あたりで変更して計測しても、Starletteの速度の安定性は変わらずでした。Flaskはスレッドを2にすると少し上がるところもありましたが、ベストプラクティスの3（コア数x2 + 1）にするとかえって落ちたりと安定せずでした。</p><p>ただ、CPUバウンドかI/Oバウンドか、タスクの特性がどちらかにどの程度寄っているかはアプリケーションによって違います。オライリージャパンから出版されたばかりの<a href="https://www.oreilly.co.jp/books/9784873119175/" target="_blank" rel="noopener">Effective Python第2版</a>の項目63あたりのasyncioのセクションではasyncioのイベントループの中でブロッキングする処理を入れてしまうと全体として応答性が下がってしまう話などが書かれています。時間がかかるがレスポンスを返したあとに処理しても構わないもの（バックグラウンドプロセスへのタスクの移譲など）の場合は項目64で紹介されている<code>concurrent.futures</code>を利用するなどした方が良いかもしれません。</p><p>非同期I/Oということで特性はNode.jsやGoに近くなると思いますが、チューニングポイントが減って、リソースをどれだけ増やせばどれだけ捌けるのかが見通しやすい非同期I/Oの特性は、インフラを担当する人にはフレンドリーで助かるんじゃないかと思います。</p><h3 id="ログ"><a href="#ログ" class="headerlink" title="ログ"></a>ログ</h3><p>構造化ロギングについて紹介しました。構造化ロギングは次のリポジトリでPython/Java/Node.js/Go/PHPの実装方法が紹介されています。もしRubyとか他の言語のユーザーの人はPRを送ってみると良いと思います。</p><p><a href="https://github.com/ymotongpoo/cloud-logging-configurations/blob/master/python/structlog/main.py" target="_blank" rel="noopener">https://github.com/ymotongpoo/cloud-logging-configurations/blob/master/python/structlog/main.py</a></p><p>クラウドサービスにつながって便利になるものの、ローカルでは残念ながらそこまで利便性は高くはない、というか検索とかはgrepでやるなら特に普通のログと変わるところはないのですが、たいていどのロガーもカラフルにして出力する機能があったりします。ログの視認性はかなり上がるので、ローカルであっても使ってみると良いのではないでしょうか？これとは別にローカルのビューアーはあってもいいな、と思って少し作り始めて見たりもしています。</p><p>ちょうどPyCon直後に開催されたゲーム開発者のカンファレンスのCEDECでも、任天堂の方がリングフィットアドベンチャーの話をされていて、その中で構造化ロギングの話も出ていました。構造化ロギング来ています。</p><ul><li><a href="https://www.famitsu.com/news/202009/06205314.html" target="_blank" rel="noopener">https://www.famitsu.com/news/202009/06205314.html</a></li></ul><h3 id="イメージ選定補足"><a href="#イメージ選定補足" class="headerlink" title="イメージ選定補足"></a>イメージ選定補足</h3><p>イメージ選定においては、Debian系が無難ですよというのと、Debian系の変種のdistrolessについて紹介しました。</p><p>1点、手元で試したものの検証できなかったのがGPU対応です。Pythonでウェブサービスというと機械学習も関係してくることが多いです。で、Dockerイメージで機械学習のアプリのデプロイというのも事例として良く聞く気がします。</p><p>この辺りをみながら、手元のGeForce RTX 2060のノートでWSL2でDocker GPUというのにチャレンジしてみました。</p><p><a href="https://docs.nvidia.com/cuda/wsl-user-guide/index.html#getting-started" target="_blank" rel="noopener">https://docs.nvidia.com/cuda/wsl-user-guide/index.html#getting-started</a></p><p>一応、ベンチマークは実行できてDockerの中でGPUも認識したのですが、ここに出てくる<code>nvidia-container-cli info</code>コマンドなどは実行できず・・・</p><p><a href="https://blog.amedama.jp/entry/docker-nvidia-container-toolkit" target="_blank" rel="noopener">https://blog.amedama.jp/entry/docker-nvidia-container-toolkit</a></p><p>ここの説明によると、<code>--gpus</code>オプションをつけるとコンテナ内部にホスト側にインストールされているコマンドやライブラリがマウントされてコンテナ内部からも使えるようになるらしいのですが手元では確認できませんでした。<a href="https://hub.docker.com/r/nvidia/cuda" target="_blank" rel="noopener">NVIDIA公式CUDAイメージ</a>はUbuntuとCentOSここで紹介されているのはなんの変哲もないUbuntuイメージで実行していました。原理原則からすればDebianでもいいと思われますが・・・ちょっと機械学習周りはそのうちしっかり調べたいです。</p><h2 id="その他のお話"><a href="#その他のお話" class="headerlink" title="その他のお話"></a>その他のお話</h2><p>この発表では、ビルドイメージのサイズ以外に、ビルド時間も大切であると話をしました。その際にビルド時間にストレートに聞いてくる要素としてビルドのコンテキストについて紹介しました。どのファイルがDockerサーバーへの送信対象になっているかを確認するには以下のDockerfileをビルドして実行してみると分かります。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile.ctx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /context</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . ./</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"du"</span>, <span class="string">"-h"</span>]</span></span><br></pre></td></tr></table></figure><p>何も設定しないと、.gitフォルダなども送信対象になってしまうので、.gitフォルダが数100MBとかあると、それだけで毎回ビルド時間が数10秒伸びてしまいます。</p><p>.gitignoreと同じフォーマットの.dockerignoreファイルを置くことでDockerに無視されるファイルを指定できます。.git以外に、Dockerの中でビルドし直すようなビルド結果のファイルなどは除外しておくべきです。基本的には.gitignoreのファイルをコピーして.gitを足すぐらいで良いかと思います。</p><p>.gitをコンテキストに含まなければならないケースが1つあり、現在のGitのハッシュ値をとってきてビルド結果にどのコミット断面でビルドしたかの情報を入れたい場合です。あるあるですね。Node.jsのパッケージではありますが、<a href="https://www.npmjs.com/package/next-build-id" target="_blank" rel="noopener">next-build-id</a>みたいなツールが該当しますが、これを実行するためには.gitフォルダもコンテキストに含める必要があります。</p><p>これの高速化のテクととしては、リポジトリの全ファイル履歴が格納されている巨大な.git/objectsフォルダにファイルの実態がいなくても<code>git rev-parse HEAD</code>コマンドは利用できます。ビルドの中でこのコマンドを使っているようなリポジトリの場合は、.git/objectsを.dockerignoreに追加することで、.gitフォルダを指定するのと99.9%同じ結果が得られます（他のフォルダは誤差）。ただし、このフォルダ自体は必要なので、.git/objectsを<code>RUN mkdir .git/objects</code>で作るようにしましょう。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Dockerコンテナがどういうものかを紹介しつつ、それにあったPythonのアーキテクチャの紹介をしてきました。口頭で説明したような内容はこのブログエントリーでだいぶ補完できたんじゃないかと思います。</p><p>技術ブログではGo色が強いのですが、フューチャーの中で一番人材豊富なのはJavaですし、個人的にはPythonも仕事でやりたいので、もし御用命あればお待ちしております。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;初のオンライン＆Python 2サポートが終了したあとのPyCon.jpという節目のイベントで発表してきました。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/20200910/IMG_0039.PNG&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;発表資料はこちらになります。&lt;/p
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>キーボードを組み立ててみた話</title>
    <link href="https://future-architect.github.io/articles/20200909/"/>
    <id>https://future-architect.github.io/articles/20200909/</id>
    <published>2020-09-08T15:00:00.000Z</published>
    <updated>2020-09-09T00:39:54.809Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。<br>CSIGの井上です。</p><p>08/28に社内で「ITエンジニア怪談 ～背筋も凍る、ゾッとする話Night～ #3」というものがありました(後で公開されると思います)。その中で「自作キーボードの紹介」のLTがあり、キーボード作りたい熱が高まったので、翌日に作ってみた話をします。</p><p>本記事は、これからキーボード作りたいなぁ、という人を後押しするための記事です。<br>予算は <strong>25,000 - 30,000円</strong> 位を見ておくとよいです。</p><h1 id="前提知識や技術"><a href="#前提知識や技術" class="headerlink" title="前提知識や技術"></a>前提知識や技術</h1><p>基本的には作りながら学ぶことで、ほぼ前提知識は不要です。<br>しかしながら、「作り方が細かく説明してあるキーボードキット」を選んだほうがよいです。 </p><ul><li>「作り方が細かく説明してある」ものがよい<ul><li>初心者向けに注意点がある程度細かく書いてあるもの、がお勧めです。WEB上で作成者が組立て手順を公開しているので、買う前に確認しておきましょう。</li><li>中級者向けに一般的な作法（組立て順番とか）が省略されているものは、慣れてからのほうが良いです。</li><li>パーツ売りの物もありますが、自作キット（キースイッチやキーキャップ <strong>以外</strong> がそろっている）をお勧めします。</li></ul></li><li>はんだ付け経験は必要<ul><li>キーボードコントロール用のProMicroのはんだ付けは、慣れが必要かもしれません。</li><li>これ以外は、普通のはんだ付けができれば問題ないと思います。</li><li>はんだ付け自体不要の物も存在するので、不安がある場合は詳しい人に相談しましょう。</li><li>ProMicroは下に示した物です。キーサイズと比べて、自身のはんだ力（経験値）が足りるか検討してください。無理そうな場合は、まずは <a href="https://yushakobo.jp/product-tag/%E3%83%9E%E3%82%AF%E3%83%AD%E3%83%91%E3%83%83%E3%83%89/" target="_blank" rel="noopener">マクロパッド</a> <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>と呼ばれる少数のキースイッチが付いたものを作ってみるのがよいと思います。失敗しても懐の痛みが少ないですし。<br><img src="/images/20200909/ProMicro.jpg" alt=""></li></ul></li><li>英語キーが基本<ul><li>販売されているキーキャップは英語配列のものが大半です。</li><li>一応日本語キーキャップもありますが、キースイッチとの合わせ/キーボードのキー数などと組み合わせの検討が必要です。</li></ul></li></ul><p>尚、私のキーボード遍歴は以下の通りです。そんなに拘りは無いです。</p><ul><li>大学でSlackwareやTureboLinuxなどを使っていたころは、インストール時は英語キーボードから変更ができなかった。キーレイアウトを変更するのが面倒だった為、英語キーボードを利用していました。</li><li>HappyHackingKeybord（初代）発売当時、3台買って使っていました。別々のPCに接続していた為、車用塗料でケースに色を付けていました（未塗装の白、三菱の緑、本田の赤、の塗料）。</li><li>BTC 5100Cキーボードが最高。15年は使ってるかもしれません（2台持っています）。</li><li>80%キーボード<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>好きで、おおよそ12台くらい持っていました。</li><li>トラックボール<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>派なので、トラックボール付きキーボードは見つけ次第買いますが、どれも低品質で泣きを見ます。</li><li>自作キーボードは、riconkenの <a href="https://riconken.bitbucket.io/hifumi/" target="_blank" rel="noopener">hifumi</a>（6キーのマクロパッド）を作った程度です。</li></ul><h1 id="組立ててみた"><a href="#組立ててみた" class="headerlink" title="組立ててみた"></a>組立ててみた</h1><p>08/28(Fri)に <strong>急速にキーボード作りたい欲が高まった</strong> ので、08/29(Sat)に秋葉原の <a href="https://yushakobo.jp/" target="_blank" rel="noopener">遊舎工房</a> に様子を見に行きました。<br>翌日には組立て終わり、利用開始しています。はんだ付けスピード次第で3-4時間あれば作れます。</p><h2 id="買いに行く"><a href="#買いに行く" class="headerlink" title="買いに行く"></a>買いに行く</h2><h3 id="組み立てるキーボードを選定する"><a href="#組み立てるキーボードを選定する" class="headerlink" title="組み立てるキーボードを選定する"></a>組み立てるキーボードを選定する</h3><p>「60%キーボード 、矢印キーがある、千鳥配列 <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> 、左右分割 <sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup> という条件で検討したところ、<a href="https://eucalyn.shop/shop/kits/mint60-starter" target="_blank" rel="noopener">Mint60</a> に決定。</p><p>60%キーボード初めて作るのであれば、個人的には以下がお勧めです。</p><ul><li>左右分割であれば、Mint60は <a href="http://eucalyn.hatenadiary.jp/entry/how-to-build-mint60" target="_blank" rel="noopener">組立て手順</a> も詳しく、お勧めです。</li><li>左右分割でなくてよい場合は、<a href="https://yushakobo.jp/shop/dz60-rgb-v2/" target="_blank" rel="noopener">DZ60</a> がお勧めです。<ul><li>GH60互換キーボードとして複数のメーカーからパーツが出ています。</li><li>ダイオード接続済み、キースイッチははめ込み式のものもあり、はんだ付けが苦手でも作れそうです。</li></ul></li></ul><h3 id="付帯部品を買う"><a href="#付帯部品を買う" class="headerlink" title="付帯部品を買う"></a>付帯部品を買う</h3><p>キーボード本体以外にも、以下のものが必要です。</p><ul><li>キースイッチ<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup><ul><li>私は、重すぎずカチカチ鳴る（打鍵感覚が分かりやすい）ものが好きなので、Gateron青軸（1個45円程度）にしました。</li></ul></li><li>キーキャップ<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>、スタビライザー[^stabilizer]<ul><li>プロファイル[^profile]等いろいろあるので、TAI-HAO社のものを選択。</li></ul></li><li>TRRSケーブル<ul><li>左右のキーボードをつなぐ、3.5mmのステレオプラグです。オーディオレベルのものは不要です。</li><li>このケーブルの自作キットもあるようです。</li></ul></li><li>MicroUSB <sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup> - USB-Aケーブル<ul><li>ProMicroはMicroUSBなので、PCにつなぐケーブルが必要です。何でもよいと思います。</li></ul></li></ul><p>全部でこんな感じになります。<br><img src="/images/20200909/Mint60FullSet.jpg" alt=""></p><h2 id="組立てる"><a href="#組立てる" class="headerlink" title="組立てる"></a>組立てる</h2><h3 id="組立ての記録"><a href="#組立ての記録" class="headerlink" title="組立ての記録"></a>組立ての記録</h3><p>Mint60を買って組み立てた。</p><ul><li>ダイオードのはんだ付け</li><li>リセットスイッチ/TRRSコネクタのはんだ付け</li><li>スタビライザーの設置</li><li>キースイッチのはんだ付け</li><li>ProMicroのはんだ付け</li><li>LEDテープのはんだ付け</li><li>ケース収納</li></ul><p>LEDテープは追加の絶縁が必須で、微妙にケースサイズに合っていない気がするので移設を決意しました。</p><h3 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h3><p>LEDテープは端子が出ていない場所に移設したほうが安全です。<br>今回はProMicroの横が空いているので、ここに移設しました。</p><ul><li>ProMicroの横の空間に入る程度に、LEDテープを切る</li><li>両面テープでLEDテープを固定する</li><li>配線を延長する</li></ul><p>安全にLED点灯できた。<br><img src="/images/20200909/LEDRemove.jpg" alt=""></p><h3 id="ファームウェアの書き込み"><a href="#ファームウェアの書き込み" class="headerlink" title="ファームウェアの書き込み"></a>ファームウェアの書き込み</h3><p>組み立てキットの場合、ProMicroにはMint60用のファームウェアは書かれていません。故に、組み上げただけではキーボードとしては使えません。</p><p>全体として以下のように進めます。</p><ul><li>キーマップの準備<ul><li>キーマップを用意する</li><li>必要に応じて更新する</li><li>キーマップをhexファイルにコンパイルする</li></ul></li><li>ProMicroにキーマップを送り込む<ul><li>書き込み用ソフトを用意する</li><li>キーボード接続後にリセットを行い、ファームウェアを送り込む</li></ul></li></ul><h4 id="キーマップの準備"><a href="#キーマップの準備" class="headerlink" title="キーマップの準備"></a>キーマップの準備</h4><p>WEBサービスの<a href="https://config.qmk.fm/" target="_blank" rel="noopener">QMK Configurator</a>を利用します。</p><ul><li>“KEYBOARD”で”mint60”を選択すると、標準のキー設定が読み込まれる</li><li>“KEYMAP NAME”に適当な設定を入れ、画面を見ながら必要に応じてキー配列を変更する</li><li>変更が終わったら、右上の”COMPILE”を押し、hexファイルを回収する</li></ul><h4 id="ファームウェアの書き込み-1"><a href="#ファームウェアの書き込み-1" class="headerlink" title="ファームウェアの書き込み"></a>ファームウェアの書き込み</h4><p>Windowsの場合は<a href="https://github.com/qmk/qmk_toolbox/releases" target="_blank" rel="noopener">QMK Toolbox</a>を利用するのが一番簡単です。</p><ul><li>QMK Toolboxをダウンロードし、起動する</li><li>”Local file”に先ほどダウンロードしたhexファイルを指定する</li><li>右上の”Flash when ready”にチェックを入れる</li><li>キーボードを接続し、リセットボタンを押す<ul><li>リセットボタンを押すとCOMポート接続され、ファームウェアが転送される</li></ul></li><li>notepadなどでキー入力を確認する</li></ul><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>完成です。<br>利用しながら使いやすいようにキーマップを変えるとよいでしょう。<br><img src="/images/20200909/mint60complete.jpg" alt=""></p><p>暫く使いましたが、いろいろ思うところが出てきました。</p><ul><li>「ESCは左上にある」が体に染みついているので、ちょっと不便<ul><li>もう20年以上Vimmerなので…</li></ul></li><li>最下段のキーが多すぎる<ul><li>無効にすればよいけど、物理的になくてもいいのでは？</li></ul></li><li>「6と^」のキーは左手で押したい<ul><li>基盤を自分で作らない限り、この要望は満たせなさそう</li></ul></li><li>作ってる時の写真を撮っていなかった<ul><li>作るだけのつもり、、ですからね…</li></ul></li></ul><p>そして、「技術ブログに投稿しないか」という話を頂いたので、翌週に新たにもう一つ買ってきました。。</p><h2 id="組立てる（自作キーボードMk-II）"><a href="#組立てる（自作キーボードMk-II）" class="headerlink" title="組立てる（自作キーボードMk.II）"></a>組立てる（自作キーボードMk.II）</h2><p>今度は <a href="https://yushakobo.jp/shop/choco60/" target="_blank" rel="noopener">Choco60</a> というキーボードを購入しました。</p><ul><li>青軸のキースイッチは必須<ul><li>会社で使う場合は騒音問題になるので、イヤホンで自分の耳を塞ぎ、なかったことにします。</li><li>今は在宅勤務なので、心おきなく打鍵音を出せます。やったね。</li></ul></li><li>矢印キーは存在しないので、レイヤーで対応する必要がある（Functionキーとの組み合わせ）<ul><li>人によっては、カーソルキーは物理であったほうが使いやすい人もいます。好みに合わせましょう。</li></ul></li><li>左上ESCだが、代わりに「~と`」のキーが右上に来た<ul><li>当面は「~/`」キーをBackspaceと押し間違えるリスクがありますが、ESCを物理で連打できる利点があるので目を瞑ります。</li></ul></li><li>かなりシンプルで、左右を結合すると非分割キーボードのようになる<ul><li>気分的に分割ではないように使えます。但し、左右接続のケーブルは必須なのであまり意味はありません。</li></ul></li><li>残念ながらLEDは利用できない<ul><li>初めて作るなら、LEDの見た目も良いので Mint60やDZ60をお勧めします。</li></ul></li></ul><h3 id="リードベンダを作る"><a href="#リードベンダを作る" class="headerlink" title="リードベンダを作る"></a>リードベンダを作る</h3><p>基盤にダイオードを接続する際に、コの字にダイオードを曲げておく必要があります。<br>「手で曲げる/ペンチを利用して曲げる/市販のリードベンダを買う」こともできますが、今回は家に3Dプリンタもあるので作ってしまいます。</p><ul><li>ダイオード本体は3.5mm程度</li><li>リードは0.5mm程度</li><li>曲げたリード間は、今回は7.5-8.0mmくらいが適当のようだ</li><li>適当にプロトタイプを作り <sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup> 、実機確認して微調整をしたら完成</li></ul><p>6個ずつ曲げて作れます。<br><img src="/images/20200909/3dprinter.jpg" alt=""></p><p><img src="/images/20200909/LeadVendor.jpg" alt=""></p><h3 id="はんだ付けをする"><a href="#はんだ付けをする" class="headerlink" title="はんだ付けをする"></a>はんだ付けをする</h3><p>曲げたダイオードをスルーホールに通し、はんだ付けします。<br>リードはあまり残さない形で切ってしまいます（私は、はんだ付け後に後で切る派です）。<br><img src="/images/20200909/DiodeLead.jpg" alt=""></p><p>キースイッチもはんだ付けします（今回はトッププレートは付けていません）。<br><img src="/images/20200909/keyswitch.jpg" alt=""></p><h3 id="ファームウェアを焼きこむ"><a href="#ファームウェアを焼きこむ" class="headerlink" title="ファームウェアを焼きこむ"></a>ファームウェアを焼きこむ</h3><p>今回のキーボードは矢印キーが無いので、Functionと組み合わせて利用します。</p><ul><li>Vimmer向けとして、Function（以下Fn）とhjklで左上下右に割当が違和感がない</li><li>Home/Endも同様に時々使うので、hjklの右である;’に割当</li><li>左上ESCはデフォルトで問題ない</li><li>Fnは頻繁に使えるように、右親指直下とする</li><li>時々使うDeleteは Fn+Backspace だと辛いので、レイヤー0で割当</li><li>弊社から割当られたPCは日本語版キーボードなので、一工夫<ul><li>英語キーボードを日本語キーボードのPCに接続すると、キー数の不足から入力できない文字が発生する</li><li>代表的なものは「￥」キー <sup id="fnref:10"><a href="#fn:10" rel="footnote">10</a></sup> であるため、このキーを割り当てると、英語キーボードを日本語PCに接続しても使える可能性が高まる</li></ul></li><li>Ejectは用意しよう</li><li>特殊入力はあまりいらないので、Fnは1つだけとする<ul><li>Fnキーは一般的に1種類ですが、MO(Modifier)0, MO1, MO2, と複数登録が可能</li><li>また、MO0とMO1の同時押し、のような設定も可能</li><li>頑張って複数のModifierを設定すると、訳が分からなくなる可能性が高い</li></ul></li></ul><p>Layer0は、標準の入力状態を示します。MOはModiferキーで、所謂Fnキーです。<br><img src="/images/20200909/keymap0.png" alt=""></p><p>Layer1は、Layer0の「MO0」と同時押しで入力できます。<br><img src="/images/20200909/keymap1.png" alt=""></p><h1 id="得られた知見"><a href="#得られた知見" class="headerlink" title="得られた知見"></a>得られた知見</h1><p>勢いでキーボードを2台作りましたが、私としては以下の知見を得られました。</p><ul><li>知らない領域の知識を得ることは、自己の成長になる<ul><li>知らないことを調べる、必要な知識を必要な時間で得る、等の練習になる</li><li>身軽に動く訓練になるため、自分の活動範囲が広がる</li></ul></li><li>ないものは作るのは、すごく楽しい<ul><li>治具が無ければ作ればいいし、キー配置が気に食わなければ自分で作ればいい</li><li>「6」キーｍ。が左に欲しい問題を解決するために、基盤を設計する…かもしれません</li></ul></li></ul><p>キーボードは難しい/練習したい　という場合は、例えばRiconkenのhifumiｋ（6キー）を作ってみるのがよいかもしれません。ProMicroを使っているので、キーの数以外は仕組みがほぼ同じです。楽にキーボードを作りたければ、DZ60でLED結線済み、キースイッチはソケット型を使うと簡単に作れます。</p><p><img src="/images/20200909/riconken.png" alt=""></p><p>もしキーボード自作に興味があるようなら、まずは行動を起こしてみるのがよいと思います。</p><p>以上</p><hr><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">マクロパッド：テンキーパッド以下サイズの小さい入力装置。構成自体はキーボードと同じであるため、お手軽に構造を理解するには最適。ProMicroを使っているものであれば、レイヤーやLEDコントロールの練習になる。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">80%キーボード：テンキー付きのおおよそ100個のキーが付いたものをフルキーボード（100%）と呼称する。テンキーが無くなるとおおよそ80-75%、さらにFunctionキーが無くなると65-60%、数字キーが無くなるとおおよそ40%、スペースキーもなくなり3列になったものが30%、と称される。60%キーボード辺りから入力キーが足りなくなるので、Modifierキーとの組み合わせで利用することになる。30%キーボードは <a href="https://yushakobo.jp/shop/nomu30kit/" target="_blank" rel="noopener">このような</a> もので、利用には相当な修練が必要になるが、普通のキーボードに戻れなくなる可能性がある。所謂、沼。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">トラックボール：ボールそれ自体を手で転がすポインティングデバイス。マウスのように移動の場所を取らず、20世紀には「デザイナーなどが使う」といわれていた。トラックボールの名器といえば、古くは<a href="https://pc.watch.impress.co.jp/docs/article/971020/ms.htm" target="_blank" rel="noopener">Microsoft IntelliMouse TrackBall</a>があり、販売終了時に涙した者も多い。現在はKensingtonのトラックボールが最適と考えられる。細かな操作を必要とする場合、ボールは大きいに越したことはない。尚、マウスと異なりボールが脱落しやすい構造の為、ボールを紛失して再購入、というパターンが存在する。</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;">千鳥配列：一般的なキーボードは列がずれており、Row Staggerd Layoutと呼ばれている。自作きーぼど界隈では、格子状にキーを配置したOrtholinear Layout（格子レイアウト）と呼ばれているものが多数存在する。曰く、「運指が直線的で最短であり、合理的」との事。RowStaggedに慣れていると、格子配列を使うには訓練が必要な事が多い。</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;">左右分割：私がこの記事を書くきっかけになった「自作キーボードLT」で、「左右分割キーボードは肩こりに良い」と説明されていた。確かに、非分割キーボードを使うと、左右の方とキーボードで三角形の形になり、猫背の原因になりそうだ。分割キーボードなら左右を話して配置できるので、猫背は回避できそうだ。尚、左右分割キーボードは、左右をつなぐTRRSケーブルが必要になる。左右各キーボードにProMicroを載せており、同じファームウェアを焼きこんで利用する。</span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;">キースイッチ：かなりの種類あります。利用者の趣味や用途により決まる、キーボードの性格が決まる部分。主に、推した時の重さ、ストローク量、クリック音の有無などにより変わる。音や打鍵感は 青軸 &gt; 茶軸 &gt; 赤軸 が一般的。ゲーミング用にストロークを短くしたものもある。尚、キースイッチは沼であり、「紫、銀、黄、クリア、橙、ピンク、緑、といったマイナーなもの」「異なるスイッチを合体させた「キメラ」」「潤滑剤を塗る「ルブ」」「キーフィルムやOリングを使ったカスタム」などの謎の単語が頻出した。キースイッチ怖い。</span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">7.</span><span style="display: inline-block; vertical-align: top;">キーキャップ：キーボードの文字が印字されている部分。キースイッチの軸の種類（Cherry MX互換軸、等）に合わせて、後述のプロファイルを選択して買うことになる。また、英語キーのものは流通しているが、日本語キーはほぼ流通していないと思われる（無いわけではない）。[^stabilizer]: スタビライザー：横に長いキーボードを安定して推すための補助機器。ShiftキーやEnter、Spaceなどで使われている。[^profile]: プロファイル：キーキャップの形状のこと。<a href="https://buildersbox.corp-sansan.com/entry/2019/08/16/110000" target="_blank" rel="noopener">ここ</a>にまとまってる。これは好みに依存すると思われる。OEMなどのプロファイルでキーキャップでキーボードの傾斜をつけることもできるが、ケースを傾けるように改造するとよい場合もある。</span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">8.</span><span style="display: inline-block; vertical-align: top;">MicroUSB：Micoro USBは耐久性が無いので、頻繁に抜挿する運用には向かない。市販キーボードでもMicro USBが壊れて使えなくなったものは何個もある。自作キーボードの場合はUSB端子はProMicroに接続されているため、ProMicroを交換する（か、ProMicroのMicro USBメスを付け替える）ことで延々と利用できると思われる。また、ProMicro Type-Cというものもあり、これはProMicroの端子がUSB Type-Cになっているようだ。Type-Cの方が耐久性は高いので、予算があればこちらを使うのも良い。</span><a href="#fnref:8" rev="footnote"> ↩</a></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">9.</span><span style="display: inline-block; vertical-align: top;">プロトタイプ：今回のような簡単なオブジェクトであれば <a href="https://www.tinkercad.com/" target="_blank" rel="noopener">THINKERCAD</a> で十分モデルを作れます。これをスライサーにかけてしまえば、あとは印刷するだけ。プロトタイプを作る場合は、調整不要な部分は極力なくし、できるだけ必要最小限で作ると開発スピードが上がります。</span><a href="#fnref:9" rev="footnote"> ↩</a></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">10.</span><span style="display: inline-block; vertical-align: top;">￥キー：日本語キーマップのWindowsに 英語キーボードをつなぐと、キー数の問題で入力不能なキーが発生する。特に「￥（半角）」と「\」は扱いがひどい（詳細は省略）。Windowsでファイルサーバにアクセスする際は「￥(ﾊﾝｶｸ)」を使うことになり、「IMEで&quot;えん&quot;を変換して￥を入力し、それをコピーして&quot;￥￥ファイルサーバ名&quot;などで利用する」ということが発生する。キーコード自体が違うので、何らかの手段を用意しないと入力困難になるので注意が必要。尚、英語キーボードの場合は、漢字/変換などのキーが無いため、シンプルである。日本語入力は &quot;ALT + `&quot; 等で利用可能。古くからの*nixユーザは、Shift+SpaceをIME ON/OFFに割り当てていることも多い（Chrome OSでは CTRL+Spaceで、これも使いづらい）。</span><a href="#fnref:10" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。&lt;br&gt;CSIGの井上です。&lt;/p&gt;
&lt;p&gt;08/28に社内で「ITエンジニア怪談 ～背筋も凍る、ゾッとする話Night～ #3」というものがありました(後で公開されると思います)。その中で「自作キーボードの紹介」のLTがあり、キーボード作りたい熱が高まったので
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="電子工作" scheme="https://future-architect.github.io/tags/%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="自作キーボード" scheme="https://future-architect.github.io/tags/%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89/"/>
    
  </entry>
  
  <entry>
    <title>フューチャー技術ブログで行っている連載企画が良いよって話</title>
    <link href="https://future-architect.github.io/articles/20200908/"/>
    <id>https://future-architect.github.io/articles/20200908/</id>
    <published>2020-09-07T15:00:00.000Z</published>
    <updated>2020-09-07T23:25:59.933Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20200908/goose-908291_1280.jpg" alt=""></p><p><a href="https://pixabay.com/ja/users/Skitterphoto-324082/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=908291" target="_blank" rel="noopener">Rudy and Peter Skitterians</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=908291" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、技術ブログ運営の真野です。ブログ開設から4年半ほど運営を続けています。</p><p>運営のナレッジは<a href="https://future-architect.github.io/articles/20200530/">フューチャー技術ブログの運営で心がけていること</a>に書きましたが、”ブログ連載”という企画がかなり有益だと気がついたのと、ナレッジも溜まってきたのでまとめます。</p><p>フューチャー技術ブログでは2019年から連載企画と称して、 <strong>ある技術テーマに沿った記事を様々な人が集中的に公開する</strong> というイベントを開催しています。数えてみると思ったより多かったので表にまとめました。</p><table><thead><tr><th>No</th><th>テーマ</th><th>記事数</th><th>初投稿</th><th>概要</th></tr></thead><tbody><tr><td>1</td><td><a href="/tags/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E5%85%A5%E9%96%80/">インフラ入門</a></td><td>4</td><td>2017/1/9</td><td>業務・アプリ実装からすると影のイメージがあるインフラについて、この領域をやりたいと思う人を増やしたいというアツ思いから開始</td></tr><tr><td>2</td><td><a href="/tags/GoCDK/">Go Cloud</a></td><td>7</td><td>2019/11/11</td><td>日本でGoCloud（GoCDK）について触れている記事が少ないから、今なら天下が取れると某さんが先導して開始</td></tr><tr><td>3</td><td><a href="/tags/Auth0/">Auth0</a></td><td>3</td><td>2020/1/22</td><td>導入実績が増えたAuth0についてだいぶナレッジが溜まってきたので開始</td></tr><tr><td>4</td><td><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></td><td>10</td><td>2020/2/5</td><td>GCPの採用実績が増えてきたので良い機会だと開始</td></tr><tr><td>5</td><td><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></td><td>3</td><td>2020/2/25</td><td>最初はAWS×Goネタで開始しようとしたところ、書きたいと言ったメンバー全員がDynamoDBについて苦労した話で盛り上がったので範囲を狭めた</td></tr><tr><td>6</td><td><a href="/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/">フロントエンド記事集中投稿</a></td><td>7</td><td>2020/3/16</td><td>記事がバックエンドに寄り過ぎじゃね？と気がついたため、社内事情とバランスを取るために発動した企画。Vue.js使いが社内で激増したことも追い風に</td></tr><tr><td>7</td><td><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></td><td>6</td><td>2020/3/23</td><td>社内チャットで盛り上がった勢いで開始</td></tr><tr><td>8</td><td><a href="/tags/GoTips%E9%80%A3%E8%BC%89/">Go Tips連載</a></td><td>8</td><td>2020/5/18</td><td>社内チャットで盛り上がった勢いで開始。2020/05/18現在連載中。</td></tr><tr><td>9</td><td><a href="https://future-architect.github.io/articles/20200529/">春の入門まつり</a></td><td>21</td><td>2020/6/1</td><td>新人研修空けのフレッシュマンがあふれる時期に開催しようということで社内チャットで広く募集した企画型</td></tr><tr><td>10</td><td><a href="https://future-architect.github.io/tags/Zuora/">Zuora連載</a></td><td>4</td><td>2020/7/6</td><td>サブスクリプションプラットフォームZuoraのナレッジをまとめるレンライ</td></tr><tr><td>11</td><td><a href="https://future-architect.github.io/articles/20200726/">夏休み自由研究</a></td><td>15</td><td>2020/8/1</td><td>自分が好きな技術や興味があるテーマ について 自由に研究（執筆）する</td></tr></tbody></table><p>この記事が公開された後にも、👪組織軸での連載や、🐳<a href="https://www.cncf.io/" target="_blank" rel="noopener">CNCF</a>のプロダクト、春の入門・夏の自由研究に続き、🍁秋のブログ週間という”いつもより考え方や技術論”に比重を高めた連載も予定されています。</p><p>まだまだ手探りの面も多いですが、10以上の連載をこなして色々ナレッジが溜まったり、純粋に企画して良かったと感じています。何が良かったのかについて説明していきます。</p><h1 id="ブログの連載企画とは"><a href="#ブログの連載企画とは" class="headerlink" title="ブログの連載企画とは"></a>ブログの連載企画とは</h1><p>ブログの連載企画といっても、おそらく一般的な定義はないと思います。ただ、フューチャー技術ブログでは以下の条件を満たすと社内で連載だよねって呼ばれます。</p><ul><li><strong>あるテーマ</strong>を定める。技術であったり、組織であったり、記事の方向性など</li><li><strong>複数人</strong>で<strong>まとめて</strong>投稿する</li><li>記事数が <strong>最低3本</strong>以上になる</li><li><strong>集中的に投稿する期間</strong>を決める</li></ul><p>今の所、1人でブログ連載を始めたい！っていう猛者は現れていません。今後は出てくることに期待ですね。</p><p>ブログ執筆は割と孤独かと思いますが、この手の連載は興味がある人を広く募集して行なうので、ちょっとしたお祭り感がでてきます。連載一覧を見て分かる通り、テーマはかなり広く設定することが多いです。そのため各人によって記事の内容にバラつきがあり、投稿者同士で応援しあえるのも良いポイントかなと思います。</p><h1 id="ブログ連載の始め方"><a href="#ブログ連載の始め方" class="headerlink" title="ブログ連載の始め方"></a>ブログ連載の始め方</h1><p>テーマはかなり緩いです。「GCPやGo言語やあるライブラリについて知見や思いがある方、一緒に書きませんか？」といったスタート方法が多いです。基本的にはGoogle Formに応募してもらっていますが、この人に書いて欲しいと思ったら運営側からDMを飛ばすこともあります。嘘です。常にDMはかなりの数を飛ばします。DMを送るのを躊躇わないことがとても重要です。</p><p>募集の段階でやっておいたほうが良いのは以下です。</p><ol><li><strong>開催時期を明確に決める</strong>（10月2週目～ではなく、10/12(月)~10/16(金)といった日付単位で決めましょう）<ul><li>みんな本業が忙しいのでバランスが取れるか判断してもらえるようにです</li><li>ブログ連載が連続すると大変なので、なるべく1ヶ月くらいは空けた方が良いと思います（特にターゲットとなる寄稿者が被りそうな場合）</li><li>1.5~2.5ヶ月前くらいが適当かなと思います</li></ul></li><li><strong>応募期限を決める</strong><ul><li>大体2週間くらい。土日が2回あると、ネタを仕込んでくれる人もいます</li></ul></li><li><strong>テーマを決める</strong>（例：GCPについてなら何でもOK！とか緩くても良いかと思います）<ul><li>こういう記事を読みたい！という読み手の気持ちは大事ですが、その前にまず自分がそのテーマで書きたいか、書けるのか？という視点が大事だと思います<ul><li>どんなに良い企画を思いついても、記事が集まらなければ意味がないので、有志運営の企業ブログは書き手視点が本当に大事です</li></ul></li><li>日本語記事も（何なら英語記事も）少ないので、先行者利益を狙っていこうよ！とか少しストレッチ気味のテーマもたまに入れると良いかなと思います</li></ul></li><li><strong>予め書いてくれそうな人が確定してから募集</strong>する<ul><li>これは運営ナレッジなのですが、広く募集しても一向に人が集まらないと心臓に悪いです（1時間おきにGoogle Formの結果を見ちゃいます）。そのため、最初から6,7割の寄稿者を集めておくととても気持ちが楽です。つまり、社内一般募集を開始するときにはほぼ戦いは終わっているのです</li><li>自主的に応募してくれる人はいつも限られる（毎回同じメンバーになりますよね？）ので、いかに在野（といっても社内ですが）の人材を発掘できるかが勝負です。大丈夫です、どの会社でも有能な人材は沢山、本当に沢山眠っています。見つからない場合は過去の寄稿者で最近投稿していない人に声をかけたりもします</li><li>起点はなんだかんだ、Slackなどチャットベースで共通の興味関心があったときに、2人以上が賛同してくれた場合に企画が着火するケースが多かったです</li></ul></li><li><strong>補欠制度</strong>を考える<ul><li>これも運営ナレッジなのですが、突然の業務都合で記事を書けないとか、PCが壊れたと言った理由で、予定通りに入稿されないケースがあります。アドベントカレンダーと違って、毎日投稿にこだわっているわけではないですが、あまり続くと心臓に悪いです。特にインデックス記事で、こういう連載をおこないます！と宣言していると最悪です</li><li>大体、1~3人の補欠を設けると精神的に楽なのでオススメです</li><li>募集の際に毎回連載に名を連ねるのは申し訳ないかも？という奥ゆかしい方がいらっしゃるので、募集のGoogle Formにも人数が多ければ補欠で良いという選択を設けると良いかなと思います</li></ul></li></ol><p>人数が集まらなかった場合も、3人集まれば連載だと思うのでライトに始めます。それすら集まらなくてボツになった企画案もいくつかありますが、2,3個くらいと今のところは成功率の方が高いです。</p><h1 id="12月以外に行なうAdvent-Calendarですか？"><a href="#12月以外に行なうAdvent-Calendarですか？" class="headerlink" title="12月以外に行なうAdvent Calendarですか？"></a>12月以外に行なうAdvent Calendarですか？</h1><p>はい、ほぼほぼそのとおりです。</p><p>違いがあるとすると、枠が25固定ではない・毎日投稿するとは限らない（平日だけですし、週3の場合もある）という点でしょう。</p><p>フューチャーもここ5年くらい（<a href="http://qiita.com/advent-calendar/2019/future" target="_blank" rel="noopener">2019</a>、<a href="http://qiita.com/advent-calendar/2018/future" target="_blank" rel="noopener">2018</a>、 <a href="http://qiita.com/advent-calendar/2017/future" target="_blank" rel="noopener">2017</a>、<a href="http://qiita.com/advent-calendar/2016/future" target="_blank" rel="noopener">2016</a>、<a href="http://qiita.com/advent-calendar/2015/future" target="_blank" rel="noopener">2015</a>）アドベントカレンダーイベントに参加していて感覚に慣れている人が多いので、そのカジュアル版という捉え方をしている人が多いと思います。</p><p>開催時期こそアドベントカレンダーと異なりますが、バトンで連載を繋ぐスタイルは同じなので、さきほど述べたように寄稿者同士で連帯感がでたり、読みてからも注目しやすいといったメリットは同じだと思います。</p><p>なお、春・夏の連載は終わった後にリモート打ち上げをしましたが、あまり人が集まらなかったことを白状します。連帯感どこ行った。</p><h1 id="ブログ連載企画やってみて良かったこと"><a href="#ブログ連載企画やってみて良かったこと" class="headerlink" title="ブログ連載企画やってみて良かったこと"></a>ブログ連載企画やってみて良かったこと</h1><p>書き手側の気持ちでは、みんなで投稿していくのが楽しいよってことですし、運営側としてはご推察の通り、一定の記事数が稼げてウハウハってことですが、他にもいくつかプッシュさせてください。</p><h2 id="①１人だと書ききれない幅と量でかける"><a href="#①１人だと書ききれない幅と量でかける" class="headerlink" title="①１人だと書ききれない幅と量でかける"></a>①１人だと書ききれない幅と量でかける</h2><p>1本だけのTips、入門的な開発環境構築だと、これくらいならブログにするのはちょっと分量が足りないかな…っと躊躇する人も多いと思います。しかし連載企画で集中連載していると、<strong>全体を通して一つの記事</strong>のようなものになるので、むしろそういった幅が広がる記事が歓迎されていました。</p><p>王道的に、「ある技術の背景や導入部分」を書く人もいれば、特定のユーザにしか刺さらないような「マニアックなネタ」を書く人がいて、もちろん「入門的なやってみた」記事もある。お互いをお互い補完しあう関係になれるのは強い気がします。「概要部分」は1本目の記事を読んでください、といった紹介リンクは特によく見られる光景でした。<strong>いろいろな興味・仕事のメンバーを集めたことで、それぞれの興味がオーバーラップして、紹介記事としてのカバレッジをあげることができました。</strong> とはとあるメンバーの発言ですが、まさにその通りの効果が出しやすい作戦だと思います。</p><h2 id="②みんなでやるなら期限を守りやすい"><a href="#②みんなでやるなら期限を守りやすい" class="headerlink" title="②みんなでやるなら期限を守りやすい"></a>②みんなでやるなら期限を守りやすい</h2><p>あるテーマについてやろうと思いながら、日々の忙しさもあり中々手が進まないときも多いと思います。その時、連載企画という<strong>期限</strong>と<strong>他の参加者</strong>があると、<strong>適度な緊張感</strong> で臨むことができます。何かしらアウトプットを出す良いマイルストーンにしやすいです。一部メンバーは週末リモートモクモク会と称して、お互いブログ記事を書いていたりもしていて、目に見えて手を動かす理由付けになるようでした。ついサボりがちな私自身も、自分を追い込む良い理由にできてよかったです。</p><h2 id="③あるテーマについて集中投稿していると外部に宣伝しやすい"><a href="#③あるテーマについて集中投稿していると外部に宣伝しやすい" class="headerlink" title="③あるテーマについて集中投稿していると外部に宣伝しやすい"></a>③あるテーマについて集中投稿していると外部に宣伝しやすい</h2><p>勉強会や採用面接などで、自社が最近注目している技術について話す機会って意外とあると思います。そういったときに、ある技術テーマで集中連載しているという話は意外と食いつきがよく、自社の考え方や興味を表すのに便利だなと感じました。また、この辺の記事とURLをいくつかシェアするより、連載企画のついたタグのURLをシェアできるのでお手軽です。</p><p>また、これは最後のGoTips連載の例ですが、コミュニティのアカウントに紹介していただけました。ありがとうございます。</p><p><a href="https://twitter.com/golangjp/status/1264117466520682497?s=19" target="_blank" rel="noopener">https://twitter.com/golangjp/status/1264117466520682497?s=19</a></p><p>注目度が集まりやすいということに関連して、ニッチなテーマであっても1人ではなくチームで連載をすると、組織として注目しているだという印象を与えやすいと思います。（実際に複数人が記事を書けるという事実はあるので嘘ではないのですが）。個人・企業が運営する技術ブログの数は非常に多いので、その中でも目立たせるため連載記事を通して特徴付けするのが悪くない作戦かなと思います。</p><h2 id="④参画障壁が下がる"><a href="#④参画障壁が下がる" class="headerlink" title="④参画障壁が下がる"></a>④参画障壁が下がる</h2><p>連載企画ですが必ずしもその技術に習熟した人だけが参加するのではなく、<strong>一度もちゃんと触ったことがない人</strong>でも参加することがありました。そういった方には連載企画の執筆陣同志でレビューして教え合ったりすることもあり、良いきっかけづくりになったと思います。また、例えばまだ社内的に実績が無かった技術に関しては、全員が初心者🔰 といった状態もありました。その時は全員がドキュメントを読み、内部のコードを読み、使い方を考えながらキャッチアップしたり、アウトプットをお互いに発表したりで、<strong>個人ではなくチームで学習するサイクル</strong>を持てたと思います。</p><p>また、連載企画を開始するときにメンバーを募集しますが、そのときに今までブログを書いたことがないメンバーも多く手を上げてくれました。1人で何のネタでブログを書くか考えて手を動かすのは敷居が高いけど、<strong>決められたテーマでネタをつくる方が取り組みやすい人もいる</strong>ようです。連載企画の技術テーマ軸でコミュニティを作れるというのも良い側面だと思います。</p><h1 id="ブログ連載企画やってみて失敗したこと"><a href="#ブログ連載企画やってみて失敗したこと" class="headerlink" title="ブログ連載企画やってみて失敗したこと"></a>ブログ連載企画やってみて失敗したこと</h1><p>失敗したなと思ったのは、春の入門祭りは人数が21名と非常に多かったこと、それにより期間もほぼ1ヶ月と長かったことです。（社内でも飽きていた人がいるかも？）。応募者が多数だったとしても、人数は最大15名（平日のみで3週間）がMaxだと思います。それ以上は読み手も運営も大変なので分割した方が良いとは思いました。</p><p>明確な失敗ではないですが改善だなと思うこともあげます。</p><p>春の入門祭り、夏休み自由研究、秋のブログ週間のような特定の技術テーマでない連載は最初は面白がってくれるものの、記載する技術要素は自由です。フリーテーマだと回数をこなすほど集客に難がある気がする（もう少し特化したほうがDMで募集もしやすい）ので、季節モノの連載テーマはもう少し改善が必要だと思っています。具体的に言うと、夏休み自由研究は比較的イメージが湧きやすい（小学校教育の勝利を感じます）ですが、「秋のブログ週間」はこのテーマだと何を書けば良いかわからないので苦戦しました。</p><p>また、春の入門祭りは誰にとっての入門かという点を明示しなかったため、本当の初心者（Futureに新卒入社する若手の平均レベル）からすると技術ハードルが高い記事が混在していた問題もありました。このカオス感はこれはこれで良いという意見もありますし、明示すると書き手の募集にマイナスなのとハードルが上がるので簡単ではないですが、もう少し良いテーマ設定があるとは感じています。</p><h1 id="今後やりたいこと"><a href="#今後やりたいこと" class="headerlink" title="今後やりたいこと"></a>今後やりたいこと</h1><p>来年も継続しようと思っているのは、以下の季節モノは定常化させようと思っています。冬はアドベントカレンダーがあるので開催しません。</p><ul><li>春の入門祭り</li><li>夏休み自由研究</li><li>秋のブログ週間</li></ul><p>個人的にはFlutter連載など、今社内で多少事例はあるけどそこまで広く使われていない技術の連載も増やしたいと思っています。</p><p>また、純粋な技術以外にも、</p><ul><li>アーキテクチャ設計やらかし失敗連載</li><li>システム運用Tips連載</li><li>データ移行連載</li></ul><p>など、設計/運用/移行といった、システム視点の連載も増やしていきたいなと思っています。</p><h1 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h1><p>連載企画について社内でよく聞かれる（聞かれた）ことです。</p><ul><li>(Q1)すでに終わった連載企画に記事を追加することは良いの？<ul><li>はい。希望があればご自由にです。Serverless連載は実はちょくちょく追加されています。 </li></ul></li><li>(Q2)同じ連載企画をもう一度始めたいんだけど..<ul><li>連続で3名以上が投稿するなら、第2弾目の連載企画として初めて、初回は第1弾としちゃおうかなと運営内で話しています。Serverless連載2021とか年号をつけるとカッコいいかもとかありますよね</li></ul></li><li>(Q3)自分たちの部署やプロジェクトでも始めたいんだけど、どういうフローで承認されるの？<ul><li>連載したい時期を運営（真野か伊藤太斉）までSlackかGoogle Chatで連絡いただけたらノー審査で承認します！</li></ul></li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>フューチャー技術ブログでは比較的、新しい取り組みである「連載企画」について話しました。他の企業技術ブログでも実質的に同じような取り組みをすでに行っているよーというところも多いかと思いますが、その事自体の記事をあまり見たことが無かったので今回まとめました。</p><p>名前はさておき、連載企画という考え方や動きが広まることを祈っています。</p><p>本ブログの更新はTwitterでもお知らせしますので、良ければフォローください！励みになります。</p><ul><li><a href="https://twitter.com/future_techblog" target="_blank" rel="noopener">https://twitter.com/future_techblog</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/20200908/goose-908291_1280.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/Skitterphoto-324082/?utm_source=li
      
    
    </summary>
    
    
      <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
      <category term="TechBlog" scheme="https://future-architect.github.io/tags/TechBlog/"/>
    
      <category term="運営" scheme="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/"/>
    
  </entry>
  
  <entry>
    <title>親子でプログラミング学習　Alexaスキルを作ろう</title>
    <link href="https://future-architect.github.io/articles/20200907/"/>
    <id>https://future-architect.github.io/articles/20200907/</id>
    <published>2020-09-06T15:00:00.000Z</published>
    <updated>2020-09-07T01:26:29.032Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20200907/toys-3644073_1280.png"><p><a href="https://pixabay.com/ja/users/pencilparker-7519217/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3644073" target="_blank" rel="noopener">pencil parker</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3644073" target="_blank" rel="noopener">Pixabay</a>からの画像</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXチームの村瀬です。</p><p>今年から小学校でプログラミング教育が必修化になったとのことですが、プログラミングと聞くとまだまだ「難しい」、「私には無理」と言った苦手意識を持つ子供や親も多いのではないでしょうか？そこで今回は幼児～小学校低学年の子供とその親を対象として一家に一台はあるであろうスマートスピーカーのAlexaを使ったプログラミングをすることで、プログラミングが楽しいと思ってもらえるようにブログを書かせてもらいました。<br>※あくまで楽しいと思ってもらえるところまでがゴールなので分岐や繰り返しの話はしません。</p><h1 id="なぜAlexa"><a href="#なぜAlexa" class="headerlink" title="なぜAlexa"></a>なぜAlexa</h1><p>一家に一台ありますよね？というのは半分冗談で、プログラミング学習のためのツールは多々ありますがやれることが多く、全てを消化できずに終わったり、またプログラミングとは外れたこと(例えばキャラクターの絵を描くこと)に集中してしまい結局プログラミング教育にならなかったということが起きえます。であれば、できることが限られるツールを利用して満足度を高めるほうがファーストステップとしては良いのではないかと考えた次第です。</p><p>また幼児の場合、文字の読み書きはできないけど会話はできるし、既にAlexaが家庭にあり、子供に親しまれているものを使うことで興味を持ちやすいってのもありますね。</p><h1 id="Alexaスキル"><a href="#Alexaスキル" class="headerlink" title="Alexaスキル"></a>Alexaスキル</h1><p>AmazonのスマートスピーカーであるAlexa。音声を利用して天気やさまざまな情報を教えてくれたりする機能のことをAlexaスキルと呼びます。既に数多くの便利なスキルが提供されていますが、実は誰でもスキルを作成することができるんです。</p><p>不安を取り除くため、先にいくつかQ &amp; Aの形で情報をお知らせします。</p><p>Q1. Alexaスキルを作るのにお金かかるの？<br>A1. Alexaとパソコン、インターネット環境さえあれば個人で少し遊ぶ程度ではお金はかかりません。</p><p>Q2. 作ったAlexaスキルが公開されるのは嫌なんですけど。<br>A2. 全世界に公開されず、自分のAlexa(アカウント)でのみ動作させることが可能です。</p><h1 id="開発環境の準備"><a href="#開発環境の準備" class="headerlink" title="開発環境の準備"></a>開発環境の準備</h1><p><a href="https://developer.amazon.com/ja/blogs/alexa/post/31c9fd71-f34f-49fc-901f-d74f4f20e28d/alexatraining-firstskill" target="_blank" rel="noopener">Alexaスキル開発トレーニングシリーズ第1回: 初めてのスキル開発</a> のページの「準備. Amazon 開発者アカウントの作成」に則って進めると簡単にできます。それなりに時間を要するので子供と一緒に作業する前にあらかじめ用意しておくことを推奨します。子供の集中力は長くは持たず、プログラミングする前から飽きられてしまいかねません。<br>※入力項目の一つである「開発者名」は公開した際にAlexaストア上に表示される名前になり、後から変更できませんが、公開せず個人で開発する分にはあまり気にしなくて大丈夫です。</p><h1 id="最低限抑えておきたいポイント"><a href="#最低限抑えておきたいポイント" class="headerlink" title="最低限抑えておきたいポイント"></a>最低限抑えておきたいポイント</h1><p>Alexaスキルを作る上で最低限抑えておきたいポイントが4つあります。<br>1.呼び出し名<br>2.インテント<br>3.発話<br>4.バックエンド処理<br>順に説明します。</p><h2 id="1-呼び出し名"><a href="#1-呼び出し名" class="headerlink" title="1.呼び出し名"></a>1.呼び出し名</h2><p>Alexaスキルを起動させる為のキーワードです。Alexa、〇〇を開いての〇〇の部分。</p><h2 id="2-インテント"><a href="#2-インテント" class="headerlink" title="2.インテント"></a>2.インテント</h2><p>インテントというのはユーザがAlexaに話しかけた際に何として受け取るかの定義です。音楽プレーヤーに例えて説明すると再生、停止、早送り、巻き戻しと言った機能名にあたる部分です。</p><h2 id="3-発話"><a href="#3-発話" class="headerlink" title="3.発話"></a>3.発話</h2><p>インテントに対する設定として何と言ったら再生するかを定義する必要があります。<br>「音楽を再生して」、「曲をかけて」、「開始」、「スタート」と言ったところでしょうか。これらを発話と言います。</p><h2 id="4-バックエンド処理"><a href="#4-バックエンド処理" class="headerlink" title="4.バックエンド処理"></a>4.バックエンド処理</h2><p>呼び出されたインテントに対して何をするかの部分です(※発話に対して処理をするわけ<strong><em>ではない</em></strong>のがポイントです)。</p><p>再生インテントの際には音楽を再生したりする処理ですね。※正式な名称はバックエンド処理ではありませんが、この記事の中ではわかりやすさを優先してこのように呼ぶことにします。</p><p>発話、インテント、バックエンド処理の関係を整理すると下図のようになります。</p><p><img src="/images/20200907/%E9%96%A2%E4%BF%82.png" alt=""></p><h1 id="子供と一緒に楽しく作る"><a href="#子供と一緒に楽しく作る" class="headerlink" title="子供と一緒に楽しく作る"></a>子供と一緒に楽しく作る</h1><p>実際にうちの子供(4歳)とやってみた方法を紹介します。</p><p>ふみくん(子供の名前)のスキルを作ろうか？ハローって言ったらふみくんのことお話してもらおうか？と子供に質問しながらどんなスキルを作るか決めていきました。</p><p>呼び出し名と発話、バックエンド処理が決まったら早速作ってみましょう。</p><p>私と子供で作ったスキルの説明を参考として記載します。</p><dl>  <dt>呼び出し名</dt>  <dd>ふみくん</dd>  <dt>動作(発話とバックエンド処理)</dt>  <dd>「ハロー」と言うと「ふみくんは4歳だよ。好きな食べ物はメロンだよ」と返し、「ばいばい」と言うと「ばいばい。また遊んでね。」と返し終了する</dd></dl> <h2 id="Alexaスキルの作成"><a href="#Alexaスキルの作成" class="headerlink" title="Alexaスキルの作成"></a>Alexaスキルの作成</h2><p><a href="https://developer.amazon.com/alexa/console/ask" target="_blank" rel="noopener">Alexa Developer Console</a>にアクセスし「スキルの作成」ボタンをクリックします。<br>スキル名に作成するスキル名を入力し「スキルを作成」ボタンをクリックします。特段のこだわりがなければスキル名に呼び出し名を入力してください。スキル名に入力した値が呼び出し名のデフォルト値になります。<br>次の画面ではHello Worldスキルが選択された状態で「テンプレートで続ける」ボタンをクリックします。</p><p><img src="/images/20200907/%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%81%A7%E7%B6%9A%E3%81%91%E3%82%8B.png" alt=""></p><p>約1分ほど待つとスキルが作成されます。ここで作成されるスキルはHello Worldのテンプレートから作成されたスキルなので、この状態から編集することで、目的のスキルを作成します。</p><h2 id="インテント、発話の編集"><a href="#インテント、発話の編集" class="headerlink" title="インテント、発話の編集"></a>インテント、発話の編集</h2><p>左のメニューから「対話モデル」をクリックし、表示されるメニューから「インテント」をクリックします。<br><img src="/images/20200907/%E3%83%A1%E3%83%8B%E3%83%A5%E3%83%BC.png" alt=""></p><p>「HelloWorldIntent」をクリックし、発話を編集します。今回私が作成するスキルはハローと言ったら応答をするものなのでインテント、サンプル発話は編集せず、そのまま利用することにします。必要に応じてインテントの追加とサンプル発話の追加をしてください。</p><p><img src="/images/20200907/%E3%82%A4%E3%83%B3%E3%83%86%E3%83%B3%E3%83%88.png" alt=""></p><p>続いて、「AMAZON.StopIntent」をクリックしてサンプル発話に「ばいばい」を追加します。これで「ばいばい」と言うと、これから編集する「AMAZON.StopIntent」の処理が実行されるようになります。</p><p><img src="/images/20200907/stop.png" alt=""></p><p>編集が終わったら「モデルを保存」、「モデルをビルド」をクリックしてください。</p><h2 id="バックエンド処理の編集"><a href="#バックエンド処理の編集" class="headerlink" title="バックエンド処理の編集"></a>バックエンド処理の編集</h2><p>「コードエディタ」をクリックするとバックエンド処理のプログラムが表示されます。ようやくプログラミングっぽい画面が表示されましたね。このプログラムもHello Worldのテンプレートから作成されたものなので必要な個所を修正していきます。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HelloWorldIntentHandler = &#123;</span><br><span class="line">    canHandle(handlerInput) &#123;</span><br><span class="line">        <span class="keyword">return</span> Alexa.getRequestType(handlerInput.requestEnvelope) === <span class="string">'IntentRequest'</span></span><br><span class="line">            &amp;&amp; Alexa.getIntentName(handlerInput.requestEnvelope) === <span class="string">'HelloWorldIntent'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    handle(handlerInput) &#123;</span><br><span class="line">        <span class="keyword">const</span> speakOutput = <span class="string">'Hello World!'</span>;</span><br><span class="line">        <span class="keyword">return</span> handlerInput.responseBuilder</span><br><span class="line">            .speak(speakOutput)</span><br><span class="line">            <span class="comment">//.reprompt('add a reprompt if you want to keep the session open for the user to respond')</span></span><br><span class="line">            .getResponse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>HelloWorldIntentHandlerの</p><p><code>&#39;Hello World!&#39;</code>の部分を<code>&#39;ふみくんは4歳だよ。好きな食べ物はメロンだよ&#39;</code>に変更し、<code>//.reprompt(&#39;add a reprompt if you want to keep the session open for the user to respond&#39;)</code>の部分を<code>.reprompt(speakOutput)</code>に変更します。repromptの方は最初はコメントアウト、つまり何も処理しない状態からrepromptを有効にします。有効にしない場合、「ハロー」と言うと「ふみくんは4歳だよ。好きな食べ物はメロンだよ」と返すとスキルが終了してしまいますが、スキルを終了しないようにします。()の中の値はユーザーからの返事がなかった時にAlexaがしゃべる文章になります。ユーザーからの返事がなかった時には「ふみくんは4歳だよ。好きな食べ物はメロンだよ」ともう一度しゃべります。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CancelAndStopIntentHandler = &#123;</span><br><span class="line">    canHandle(handlerInput) &#123;</span><br><span class="line">        <span class="keyword">return</span> Alexa.getRequestType(handlerInput.requestEnvelope) === <span class="string">'IntentRequest'</span></span><br><span class="line">            &amp;&amp; (Alexa.getIntentName(handlerInput.requestEnvelope) === <span class="string">'AMAZON.CancelIntent'</span></span><br><span class="line">                || Alexa.getIntentName(handlerInput.requestEnvelope) === <span class="string">'AMAZON.StopIntent'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    handle(handlerInput) &#123;</span><br><span class="line">        <span class="keyword">const</span> speakOutput = <span class="string">'Goodbye!'</span>;</span><br><span class="line">        <span class="keyword">return</span> handlerInput.responseBuilder</span><br><span class="line">            .speak(speakOutput)</span><br><span class="line">            .getResponse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>続いてCancelAndStopIntentHandlerも同様に<code>&#39;Goodbye!&#39;</code>の部分を<code>&#39;ばいばい。また遊んでね。&#39;</code>に変更します。</p><p>こちらはスキルを終了するので<code>.reprompt(speakOutput)</code>は最初から存在しません。編集が終わったら「保存」、「デプロイ」をクリックしてください。</p><p>「テスト」をクリックして「非公開」になっているステータスを「開発中」に変更すると作成したスキルがお手持ちのAlexaで利用できるようになります。</p><h1 id="Alexaで確認する"><a href="#Alexaで確認する" class="headerlink" title="Alexaで確認する"></a>Alexaで確認する</h1><p>Alexaに「アレクサ、ふみくんを開いて」と言うと、先ほど作成したばかりのスキルが利用できます。起動時のバックエンド処理を変更していなかったのでHelloWorldテンプレートで作成された返答がされてしまいましたが、これは後で直すことにしましょう。ハローやばいばいと言ってみてください。自分で作成した返答がされるはずです。</p><h2 id="飽きさせないように"><a href="#飽きさせないように" class="headerlink" title="飽きさせないように"></a>飽きさせないように</h2><p>PCでの動作確認も可能ですが、実際にAlexaがしゃべってるように感じてもらえるよう都度都度Alexaで確認しました。こうすることで興味を持ってもらえ集中力が切れずにAlexaスキルを完成することができました。毎回同じ言葉を返すと飽きてくるので途中で文章を変更するなどしても良いかもしれません。</p><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><p>最近うちの子は逆さ言葉にハマっているのですが、そのスキルを作成しようともしたのですが、Alexaスキルだけでは上手く行きませんでした。</p><p>何が上手く行かなかったかと言うとユーザが発話した言葉は日本語であれば漢字が含まれた文字列としてバックエンドに連携されるので文字列を単純に反対に入れ替えたとしても意図した動作にできませんでした。漢字が含まれた文章をひらがな(またはカタカナ)に変換する外部APIを利用すればできなくはないのですが、そもそもAlexaスキルの思想としてユーザが発話した言葉を直接取り扱うことは推奨してないようです。思わぬ落とし穴にハマらないようにしましょう。</p><p>また作った本人達からすると何と問いかければ良いかはわかるのですが、他の人に使ってもらうにはその辺の説明が必要です。起動時の説明やヘルプで使い方を説明させると親切ですね。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>分岐も繰り返しも使いませんでしたが子供と楽しく一緒にプログラミングできました。家族に披露したところ、Alexaスキルを作ろうと誘っても見向きもしなかった長男(7歳)も次は僕もやってみたいと興味深々でした。読み書きができる子であれば簡単な設計書(呼び出し名と何と言ったら何と応答するか)を書いてもらうのも良いかもしれませんね。</p><p>IT技術者不足が叫ばれる昨今、一人でも多くの人がプログラムに興味を持ちIT業界で働いてくれることを願っております。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20200907/toys-3644073_1280.png&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/pencilparker-7519217/?utm_source=link-attributi
      
    
    </summary>
    
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
      <category term="Alexa" scheme="https://future-architect.github.io/tags/Alexa/"/>
    
      <category term="プログラミング教育" scheme="https://future-architect.github.io/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E6%95%99%E8%82%B2/"/>
    
  </entry>
  
  <entry>
    <title>ANTLRを業務で活用した話</title>
    <link href="https://future-architect.github.io/articles/20200903/"/>
    <id>https://future-architect.github.io/articles/20200903/</id>
    <published>2020-09-02T15:00:00.000Z</published>
    <updated>2020-09-03T02:28:27.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG コアテクノロジーユニットの平岡です。</p><p>コアテクノロジーユニットはフューチャーグループ全体のビジネスを支えるコアとなる技術をグループ横断で提供することをミッションにしています。またOSS活動も活発に行っています。コアテクノロジーユニットのメンバーが以前に投稿した記事をいくつか紹介しておきますので、是非そちらもご覧ください。</p><ul><li><a href="https://future-architect.github.io/articles/20190620/">RedmineからGoogle Hangouts Chat へ連携するプラグインを作成しました！</a></li><li><a href="https://future-architect.github.io/articles/20181031/">その問い合わせ、AIが解決します！～Redmineチケットレコメンドシステムのご紹介～</a></li><li><a href="https://future-architect.github.io/articles/20170228/">SQL開発者を幸せにする！？ Sublime Text 3でも使える uroboroSQL Formatter を公開しました</a></li></ul><h1 id="ANTLRとは"><a href="#ANTLRとは" class="headerlink" title="ANTLRとは"></a>ANTLRとは</h1><p>皆さんは<a href="https://www.antlr.org/" target="_blank" rel="noopener">ANTLR</a>をご存知でしょうか？ANTLRとはparser(構文解析器)を生成するためのツール(パーサジェネレータ)で、以下のような特徴があります。</p><ul><li>grammar(解析したいテキストの構造に関するルールを定義したもの)を元に、parserを自動生成できる</li><li>解析対象をparserに渡した後に構成されるAST(抽象構文木)をトラバースすることで、目的に合った解析を行うことができる</li><li>様々なプログラミング言語のgrammarが<a href="https://github.com/antlr/grammars-v4" target="_blank" rel="noopener">公式</a>で整備されている<ul><li>もちろん、自分でgrammarを作ることもできる</li></ul></li><li>ターゲット言語(生成されるparserの実装に使用可能な言語)はJava, JavaScript, Pythonなど主要なものをサポートしている(<a href="https://github.com/antlr/antlr4/blob/master/doc/targets.md" target="_blank" rel="noopener">詳細</a>)<ul><li>Javaで開発をしない人向けに：ただし、ANTLRはJavaで実装されているため、Java以外の言語で実装されたparser生成にもJavaが必要となる(<a href="https://github.com/antlr/antlr4/blob/master/doc/getting-started.md" target="_blank" rel="noopener">Javaコマンドでparser生成したい場合の手順</a>)</li></ul></li></ul><p>このように非常に汎用性の高いツールであり、応用先は多岐にわたるようです。公式サイトによると、Twitterの検索機能にも使われているという記述がありました。</p><p>パーサジェネレータや構文解析に関連した他のトピックもいくつか紹介しておきましょう。</p><ul><li>ANTLR以外のパーサジェネレータの例としては、<a href="https://github.com/javacc/javacc" target="_blank" rel="noopener">JavaCC</a>(Java), <a href="https://github.com/pegjs/pegjs" target="_blank" rel="noopener">PEG.js</a>(JavaScript), <a href="https://www.gnu.org/software/bison/" target="_blank" rel="noopener">Bison</a>(C)などが有名ですが、いずれもターゲット言語=実装言語です。一方で、ANTLRはターゲット言語の種類が多いという特徴を持ちます。</li><li>同じコアテクノロジーユニットのメンバーである<a href="https://github.com/ota-meshi" target="_blank" rel="noopener">太田さん</a>(Vue.jsのコミッターです！)がメンテしている<a href="https://github.com/vuejs/eslint-plugin-vue" target="_blank" rel="noopener">eslint-plugin-vue</a>では、ANTLRは使っていませんがASTに基づいた構文解析を行っています。</li></ul><p>この記事では、まずシンプルな例を通してANTLRの概要を説明します。その後、ANTLRを使って業務で生じた課題を解決した時の話について述べたいと思います。</p><h1 id="ANTLRの概要"><a href="#ANTLRの概要" class="headerlink" title="ANTLRの概要"></a>ANTLRの概要</h1><h2 id="lexerとparser"><a href="#lexerとparser" class="headerlink" title="lexerとparser"></a>lexerとparser</h2><p>ANTLRはgrammarを元にparserを自動生成できることを上で述べましたが、より正確には、解析対象のテキストをparserに渡すために必要なlexer(字句解析器)も生成します。ここでは、<code>123 + 456</code>のような2個の整数を足す式を構文解析する例を通してlexer, parserの役割について説明します。</p><p>まず、解析対象がlexerを経由してparserに渡るイメージを見てみましょう。</p><p><img src="/images/20200903/antlr_flow.png" alt=""></p><p>lexerの役割は、解析対象を読んでトークン(1つの意味を持つ最小単位)の列に分解することです。この例では、2個の整数を足す式<code>123 + 456</code>を3つのトークン<code>123</code>,<code>+</code>,<code>456</code>に分解しています。なお、<code>123 + 456</code>には空白が含まれていますが、grammarを上手く設定すると読み飛ばすことができます(後述)。</p><p>parserの役割は、トークンの列を読んでAST(抽象構文木)を構成することです。listenerやvisitor(後述)を実装してASTをトラバースすることで、目的に合った解析処理を行うことができます。</p><p>lexer, parserを生成するためにgrammarには何を記述すれば良いのでしょうか？<br>基本的には、<code>ルール名:ルール定義;</code>の形式でルールを列挙します。実際に例を見てみましょう。</p><figure class="highlight java"><figcaption><span>SampleLexer.g4</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * lexer用grammar</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">lexer grammar SampleLexer;</span><br><span class="line"></span><br><span class="line">NUM</span><br><span class="line">: [<span class="number">0</span>-<span class="number">9</span>]+</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">PLUS</span><br><span class="line">: <span class="string">'+'</span></span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 空白は読み飛ばす</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SPACE</span><br><span class="line">: <span class="string">' '</span> -&gt; skip</span><br><span class="line">;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>SampleParser.g4</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * parser用grammar</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser grammar SampleParser;</span><br><span class="line"></span><br><span class="line">options &#123; tokenVocab=SampleLexer; &#125;</span><br><span class="line"></span><br><span class="line">sum</span><br><span class="line">: NUM PLUS NUM</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>VSCodeをお使いの場合は、<a href="https://marketplace.visualstudio.com/items?itemName=mike-lischke.vscode-antlr4" target="_blank" rel="noopener">ANTLR4 grammar syntax support</a>という拡張を導入するとシンタックスハイライトが使えて見やすくなります。また、この拡張はgrammarの構造を可視化する機能も備えており(<a href="https://github.com/mike-lischke/vscode-antlr4/blob/master/doc/grammar-debugging.md#live-graphical-parse-tree" target="_blank" rel="noopener">詳しくはこちら</a>)、非常に便利です。</p><p><img src="/images/20200903/image.png" alt=""></p><p>grammarの説明に戻りましょう。</p><p>lexer用とparser用のgrammarを分割して記載していますが、同一ファイルで記述することもできます。保守性を考慮する場合は、分割するのが良いでしょう。</p><p>lexerとparserのルールを区別するために、lexerの場合はルール名は大文字始まり、parserの場合はルール名は小文字始まりで記述する必要があります。</p><p>lexerのルール定義について見てみましょう。例えば、整数を表すトークンNUMの定義は、<code>[0-9]+</code>ですが、これは数字1個以上からなる文字列を最長一致でマッチさせてNUMというトークンに割り当てることを意味します。</p><p>parserのルール定義について見てみましょう。sumというルールは、<code>NUM</code>,<code>PLUS</code>,<code>NUM</code>という3つのトークンから構成される列(つまり、足し算の式)であるという定義です。sumのようなルール名はASTの節点に対応し、<code>NUM</code>, <code>PLUS</code>, <code>NUM</code>のようなルール定義を構成する要素はルール名に対応する節点の子に対応しています。</p><p>lexer用grammarのSPACEでは、skipコマンドを使うことで空白を読み飛ばしています。skipコマンドを使わないで空白をケアする場合は、parser用grammarのsumの定義が下記のように複雑になってしまいます。このように、lexerの定義次第でparserの定義が複雑になり得るので注意が必要です。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sum</span><br><span class="line">: SPACE* NUM SPACE* PLUS SPACE* NUM</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>grammarの詳細については、<a href="https://github.com/antlr/antlr4/blob/4.6/doc/index.md" target="_blank" rel="noopener">公式ドキュメント</a>を参照して下さい。</p><p>では、上に載せたgrammarを元に、mavenでparserを生成してみましょう。<br><a href="https://www.antlr.org/api/maven-plugin/latest/index.html" target="_blank" rel="noopener">ANTLR v4 Maven plugin</a>のデフォルトの動作の特徴は次の通りです。</p><ul><li><code>src/main/antlr4</code>以下に配置されたgrammarファイル(.g4ファイル)を参照してparser等を生成する</li><li>生成されるparser等のパッケージ構造は、<code>src/main/antlr4</code>から見た相対パスを元に自動で設定される</li></ul><p><code>jp.co.future.antlr.parser</code>パッケージにparser等を格納したい場合は下記のようにgrammarを配置すれば良いです(参照するgrammarや設定したいパッケージ名をpom.xml内で明示的に指定することもできます)。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├─main</span><br><span class="line">│  ├─antlr4</span><br><span class="line">│  │  └─jp</span><br><span class="line">│  │      └─co</span><br><span class="line">│  │          └─future</span><br><span class="line">│  │              └─antlr</span><br><span class="line">│  │                  └─parser</span><br><span class="line">│  │                          SampleLexer.g4</span><br><span class="line">│  │                          SampleParser.g4</span><br><span class="line">│  │</span><br><span class="line">(省略)</span><br></pre></td></tr></table></figure><p>また、pom.xmlに以下のように追記します。</p><figure class="highlight xml"><figcaption><span>pom.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- (省略) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.antlr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>antlr4-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;antlr.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- grammarの配置場所がsrc/main/antlr4/xxx/Grammar.g4の場合、src/main/java/xxx配下にparser等のファイルが生成される) --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- listenerを生成したい場合 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">listener</span>&gt;</span>true<span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- visitorを生成したい場合 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">visitor</span>&gt;</span>true<span class="tag">&lt;/<span class="name">visitor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>antlr-generate<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- mvn antlr4:antlr4 を実行するとparser等が生成される --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>antlr4<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.antlr<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>antlr4-runtime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;antlr.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用したいANTLRのバージョンを指定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">antlr.version</span>&gt;</span>4.8-1<span class="tag">&lt;/<span class="name">antlr.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>mvn antlr4:antlr4</code>を実行すると、下記のようにparser等が生成されました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├─main</span><br><span class="line">│  ├─antlr4</span><br><span class="line">│  │  └─jp</span><br><span class="line">│  │      └─co</span><br><span class="line">│  │          └─future</span><br><span class="line">│  │              └─antlr</span><br><span class="line">│  │                  └─parser</span><br><span class="line">│  │                          SampleLexer.g4</span><br><span class="line">│  │                          SampleParser.g4</span><br><span class="line">│  │</span><br><span class="line">│  └─java</span><br><span class="line">│      │  SampleLexer.tokens</span><br><span class="line">│      │  SampleParser.tokens</span><br><span class="line">│      │</span><br><span class="line">│      └─jp</span><br><span class="line">│          └─co</span><br><span class="line">│              └─future</span><br><span class="line">│                  └─antlr</span><br><span class="line">│                      │  App.java</span><br><span class="line">│                      │</span><br><span class="line">│                      └─parser</span><br><span class="line">│                              SampleLexer.interp</span><br><span class="line">│                              SampleLexer.java</span><br><span class="line">│                              SampleParser.interp</span><br><span class="line">│                              SampleParser.java</span><br><span class="line">│                              SampleParserBaseListener.java</span><br><span class="line">│                              SampleParserBaseVisitor.java</span><br><span class="line">│                              SampleParserListener.java</span><br><span class="line">│                              SampleParserVisitor.java</span><br><span class="line">(省略)</span><br></pre></td></tr></table></figure><h2 id="listenerとvisitor"><a href="#listenerとvisitor" class="headerlink" title="listenerとvisitor"></a>listenerとvisitor</h2><p>grammarを元にparserを生成できました。<br>ここからは、parserから得られるASTをトラバース(ASTのノードを深さ優先探索で順番に訪問)し、目的に合った解析を行う方法について見ていきましょう。</p><p>今回は、+の右側の整数を取得したいという目的があるとしましょう(例えば、<code>123 + 456</code>が入力の場合は<code>456</code>を出力)。<br>ASTをトラバースするためには、listenerもしくはvisitorを実装する必要があります。<br>まずは、listenerの実装例を見てみましょう。</p><figure class="highlight java"><figcaption><span>ExtractRhsNumListener.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jp.co.future.antlr.parser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtractRhsNumListener</span> <span class="keyword">extends</span> <span class="title">SampleParserBaseListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Integer rhsNum;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitSum</span><span class="params">(SampleParser.SumContext ctx)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 2つ目のNUM、つまり+の右側の整数をセットする</span></span><br><span class="line">setRhsNum(<span class="keyword">new</span> Integer(ctx.NUM(<span class="number">1</span>).getText()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getRhsNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rhsNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRhsNum</span><span class="params">(Integer rhsNum)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.rhsNum = rhsNum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>App.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jp.co.future.antlr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jp.co.future.antlr.parser.ExtractRhsNumListener;</span><br><span class="line"><span class="keyword">import</span> jp.co.future.antlr.parser.SampleLexer;</span><br><span class="line"><span class="keyword">import</span> jp.co.future.antlr.parser.SampleParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.CharStream;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.CharStreams;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.CommonTokenStream;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.ParseTreeWalker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">extractRhsNumByListener();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * listenerで"123 + 456"の+の右側の整数を抽出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">extractRhsNumByListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 文字列からCharStreamを生成</span></span><br><span class="line">CharStream cs = CharStreams.fromString(<span class="string">"123 + 456"</span>);</span><br><span class="line"><span class="comment">// CharStreamをlexerに渡す</span></span><br><span class="line">SampleLexer lexer = <span class="keyword">new</span> SampleLexer(cs);</span><br><span class="line"><span class="comment">// lexerでトークン列に分解</span></span><br><span class="line">CommonTokenStream tokens = <span class="keyword">new</span> CommonTokenStream(lexer);</span><br><span class="line"><span class="comment">// トークン列をparserに渡し、ASTを作る</span></span><br><span class="line">SampleParser parser = <span class="keyword">new</span> SampleParser(tokens);</span><br><span class="line"><span class="comment">// listenerでASTをトラバース</span></span><br><span class="line">ParseTreeWalker walker = ParseTreeWalker.DEFAULT;</span><br><span class="line">ExtractRhsNumListener listener = <span class="keyword">new</span> ExtractRhsNumListener();</span><br><span class="line">walker.walk(listener, parser.sum());</span><br><span class="line">System.out.println(listener.getRhsNum());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">456</span><br></pre></td></tr></table></figure><p>listenerの特徴は以下の通りです。</p><ul><li>ASTの全ノードを訪問する</li><li>ノードに入るタイミング(<code>enterXXX</code>メソッド)・ノードを抜けるタイミング(<code>exitXXX</code>メソッド)に行う処理を目的に合わせてOverrideする</li><li>Overrideするメソッドは返り値を持たないため、欲しい値はフィールドで保持する必要がある</li></ul><p>上の実装例の<code>ExtractRhsNumListener#enterSum</code>は、ASTでsumノードを最初に訪問した時に2番目のNUM(つまり、+の右側の整数)をセットする処理を行っています。<br><code>enterSum</code>ではなく<code>exitSum</code>でOverrideしても同様の実行結果が得られます。</p><p>続いて、visitorの実装例を見てみましょう。</p><figure class="highlight java"><figcaption><span>ExtractRhsNumVisitor.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jp.co.future.antlr.parser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtractRhsNumVisitor</span> <span class="keyword">extends</span> <span class="title">SampleParserBaseVisitor</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">visitSum</span><span class="params">(SampleParser.SumContext ctx)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Integer(ctx.NUM(<span class="number">1</span>).getText());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>App.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jp.co.future.antlr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jp.co.future.antlr.parser.ExtractRhsNumVisitor;</span><br><span class="line"><span class="keyword">import</span> jp.co.future.antlr.parser.SampleLexer;</span><br><span class="line"><span class="keyword">import</span> jp.co.future.antlr.parser.SampleParser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.CharStream;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.CharStreams;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.CommonTokenStream;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.ParseTree;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">extractRhsNumByVisitor();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * visitorで"123 + 456"の+の右側の整数を抽出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">extractRhsNumByVisitor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 文字列からCharStreamを生成</span></span><br><span class="line">CharStream cs = CharStreams.fromString(<span class="string">"123 + 456"</span>);</span><br><span class="line"><span class="comment">// CharStreamをlexerに渡す</span></span><br><span class="line">SampleLexer lexer = <span class="keyword">new</span> SampleLexer(cs);</span><br><span class="line"><span class="comment">// lexerでトークン列に分解</span></span><br><span class="line">CommonTokenStream tokens = <span class="keyword">new</span> CommonTokenStream(lexer);</span><br><span class="line"><span class="comment">// トークン列をparserに渡し、ASTを作る</span></span><br><span class="line">SampleParser parser = <span class="keyword">new</span> SampleParser(tokens);</span><br><span class="line"><span class="comment">// visitorでASTをトラバース</span></span><br><span class="line">ParseTree tree = parser.sum();</span><br><span class="line">System.out.println(<span class="keyword">new</span> ExtractRhsNumVisitor().visit(tree));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">456</span><br></pre></td></tr></table></figure><p>visitorの特徴は以下の通りです。</p><ul><li>ASTの全ノードを訪問するとは限らない</li><li>ノードに入った時(<code>visitXXX</code>メソッド)に行う処理を目的に合わせてOverrideする</li><li>Overrideするメソッドは返り値を持つため、欲しい値をフィールドで保持しなくてよい</li></ul><p>上の実装例の<code>ExtractRhsNumVisitor#visitSum</code>は、ASTでsumノードを最初に訪問した時に2番目のNUM(つまり、+の右側の整数)を返す処理を行っています。</p><p>listenerでは自動的にASTの全ノードを訪問するのに対し、visitorの場合は今いるノードの部分木を訪問したい場合は明示的に実装する必要があるという大きな違いがあります。</p><h1 id="業務で生じた課題"><a href="#業務で生じた課題" class="headerlink" title="業務で生じた課題"></a>業務で生じた課題</h1><p>以降では、業務で生じた課題をANTLRで解決した話について述べたいと思います。課題の概要は以下の通りです。</p><p>以下のような<code>&lt;template&gt;</code>, <code>&lt;script&gt;</code>, <code>&lt;style&gt;</code>ブロックから構成されるvueファイルが与えられます。</p><figure class="highlight html"><figcaption><span>input.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; greeting &#125;&#125; World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      greeting: <span class="string">'Hello'</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">p &#123;</span><br><span class="line">    font-size: 2em;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>このとき、以下のように<code>&lt;script&gt;</code>ブロックの中身を抽出する処理をJavaで実装して下さい。</p><figure class="highlight js"><figcaption><span>output.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      greeting: <span class="string">'Hello'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解決策"><a href="#解決策" class="headerlink" title="解決策"></a>解決策</h1><ul><li>正規表現では難しい<ul><li><code>&lt;script&gt;(.*)&lt;/script&gt;</code>で良さそうに見えるが、以下のようなコメントがある場合に対応できない</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;script&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// (省略)</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>DOMやNekoHTMLなどのJavaで動作するXML用parserでは正しくparseできない場合があった</li><li>当時はANTLRについて調査するタスクも担当していたため、ANTLRで対応を試みた<ul><li>Vue.js用のgrammarは公式で用意されていなかったが、<code>&lt;script&gt;</code>ブロックの中身を取り出せれば十分なので、grammarを自作することにした </li></ul></li></ul><h1 id="コード"><a href="#コード" class="headerlink" title="コード"></a>コード</h1><details><summary>lexer用grammarを表示</summary><div><figure class="highlight java"><figcaption><span>SimpleVueLexer.g4</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * vueファイルから&lt;script&gt;ブロックの中身を抽出するためのlexer用grammar</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">lexer grammar SimpleVueLexer;</span><br><span class="line"></span><br><span class="line">HtmlComment</span><br><span class="line">    : <span class="string">'&lt;!--'</span> .*? <span class="string">'--&gt;'</span> -&gt; skip</span><br><span class="line">    ; </span><br><span class="line"></span><br><span class="line">WhiteSpaces</span><br><span class="line">    : [\t\u000B\u000C\u0020\u00A0]+ -&gt; skip</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">LineTerminator</span><br><span class="line">    : [\r\n\u2028\u2029] -&gt; skip</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// このトークンを検出した場合、TEMPLATEモードに遷移する</span></span><br><span class="line">TemplateOpen</span><br><span class="line">    : <span class="string">'&lt;template'</span> .*? <span class="string">'&gt;'</span> -&gt; pushMode(TEMPLATE)</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// このトークンを検出した場合、SCRIPTモードに遷移する</span></span><br><span class="line">ScriptOpen</span><br><span class="line">    : <span class="string">'&lt;script'</span> .*? <span class="string">'&gt;'</span> -&gt; pushMode(SCRIPT)</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// このトークンを検出した場合、STYLEモードに遷移する</span></span><br><span class="line">StyleOpen</span><br><span class="line">    : <span class="string">'&lt;style'</span> .*? <span class="string">'&gt;'</span> -&gt; pushMode(STYLE)</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;template&gt;ブロックの中身を読んでいる時</span></span><br><span class="line">mode TEMPLATE;</span><br><span class="line"></span><br><span class="line">CommentInTemplate</span><br><span class="line">    : <span class="string">'&lt;!--'</span> .*? <span class="string">'--&gt;'</span> -&gt; skip</span><br><span class="line">    ; </span><br><span class="line"></span><br><span class="line">TemplateClose</span><br><span class="line">    : .* <span class="string">'&lt;/template&gt;'</span> -&gt; popMode</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;script&gt;ブロックの中身を読んでいる時</span></span><br><span class="line">mode SCRIPT;</span><br><span class="line"></span><br><span class="line">MultiLineComment</span><br><span class="line">    : <span class="string">'/*'</span> .*? <span class="string">'*/'</span></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">SingleLineComment</span><br><span class="line">    : <span class="string">'//'</span> ~[\r\n\u2028\u2029]*</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">ScriptClose</span><br><span class="line">    : <span class="string">'&lt;/script&gt;'</span> -&gt; popMode</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line"><span class="comment">//「&lt;/」や「//」や「/*」で始まらない</span></span><br><span class="line">ScriptText</span><br><span class="line">    : (~[&lt;/] | '&lt;' ~'/' | '/' ~[*/])+</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;style&gt;ブロックの中身を読んでいる時</span></span><br><span class="line">mode STYLE;</span><br><span class="line"></span><br><span class="line">CommentInStyle</span><br><span class="line">    : <span class="string">'&lt;!--'</span> .*? <span class="string">'--&gt;'</span> -&gt; skip</span><br><span class="line">    ; </span><br><span class="line"></span><br><span class="line">StyleClose</span><br><span class="line">    : .* <span class="string">'&lt;/style&gt;'</span> -&gt; popMode</span><br><span class="line">    ;</span><br></pre></td></tr></table></figure></div></details><details><summary>parser用grammarを表示</summary><div><figure class="highlight java"><figcaption><span>SimpleVueParser.g4</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * vueファイルから&lt;script&gt;ブロックの中身を抽出するためのparser用grammar</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser grammar SimpleVueParser;</span><br><span class="line"></span><br><span class="line">options &#123; tokenVocab=SimpleVueLexer; &#125;</span><br><span class="line"></span><br><span class="line">parse</span><br><span class="line">: templateElement? scriptElement styleElement?</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">templateElement</span><br><span class="line">: TemplateOpen TemplateClose</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">scriptElement</span><br><span class="line">: ScriptOpen scriptBody ScriptClose</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 今回取得したい部分</span></span><br><span class="line">scriptBody</span><br><span class="line">: (SingleLineComment</span><br><span class="line">| MultiLineComment</span><br><span class="line">| ScriptText)+</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">styleElement</span><br><span class="line">: StyleOpen StyleClose</span><br><span class="line">;</span><br></pre></td></tr></table></figure></div></details><details><summary>抽出用listenerを表示</summary><div><figure class="highlight java"><figcaption><span>JavaScriptExtractorListener.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jp.co.future.antlr.parser;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jp.co.future.antlr.parser.SimpleVueParser.ScriptElementContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.CharStream;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.CharStreams;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.CommonTokenStream;</span><br><span class="line"><span class="keyword">import</span> org.antlr.v4.runtime.tree.ParseTreeWalker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaScriptExtractorListener</span> <span class="keyword">extends</span> <span class="title">SimpleVueParserBaseListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 抽出した文字列 */</span></span><br><span class="line"><span class="keyword">private</span> String scriptBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽出実行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> filePath</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">(String filePath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"><span class="comment">// 指定したファイルからCharStreamを生成</span></span><br><span class="line">CharStream cs = CharStreams.fromPath(Paths.get(filePath));</span><br><span class="line"><span class="comment">// CharStreamをlexerに渡す</span></span><br><span class="line">SimpleVueLexer lexer = <span class="keyword">new</span> SimpleVueLexer(cs);</span><br><span class="line"><span class="comment">// lexerでトークン列に分解</span></span><br><span class="line">CommonTokenStream tokens = <span class="keyword">new</span> CommonTokenStream(lexer);</span><br><span class="line"><span class="comment">// トークン列をparserに渡し、ASTを作る</span></span><br><span class="line">SimpleVueParser parser = <span class="keyword">new</span> SimpleVueParser(tokens);</span><br><span class="line"><span class="comment">// ASTをトラバースして文字列を抽出する</span></span><br><span class="line">ParseTreeWalker walker = ParseTreeWalker.DEFAULT;</span><br><span class="line">walker.walk(<span class="keyword">this</span>, parser.parse());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enterScriptElement</span><span class="params">(ScriptElementContext ctx)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 抽出する文字列をセット</span></span><br><span class="line">scriptBody = ctx.scriptBody().getText();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽出した文字列を取得する</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getScriptBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> scriptBody;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>この記事に掲載したコードをGitHub上でもご確認頂けます。<br><a href="https://github.com/f-t-hiraoka/antlr-sample" target="_blank" rel="noopener">https://github.com/f-t-hiraoka/antlr-sample</a></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>正規表現や既存のparserでは対応が難しい課題をANTLRを利用して解決しました。文字列の処理で困ったときは、選択肢の1つとして検討してみてはいかがでしょうか。</p><p>コアテクノロジーユニットでは、現在チームメンバーを募集しています。<br>私たちと一緒にテクノロジーで設計、開発、テストの高品質・高生産性を実現する仕組みづくりをしませんか？</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.antlr.org/" target="_blank" rel="noopener">ANTLR公式</a></li><li><a href="https://tomassetti.me/antlr-mega-tutorial/" target="_blank" rel="noopener">The ANTLR Mega Tutorial</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG コアテクノロジーユニットの平岡です。&lt;/p&gt;
&lt;p&gt;コアテクノロジーユニットはフューチャーグループ全体の
      
    
    </summary>
    
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Java" scheme="https://future-architect.github.io/tags/Java/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
      <category term="ANTLR4" scheme="https://future-architect.github.io/tags/ANTLR4/"/>
    
      <category term="構文解析" scheme="https://future-architect.github.io/tags/%E6%A7%8B%E6%96%87%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
</feed>
