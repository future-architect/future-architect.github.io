<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  <icon>https://future-architect.github.io/feed_icon.png</icon>
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2022-01-24T06:01:09.221Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker Desktop有償化！どのライセンス契約する？</title>
    <link href="https://future-architect.github.io/articles/20220124a/"/>
    <id>https://future-architect.github.io/articles/20220124a/</id>
    <published>2022-01-23T15:00:00.000Z</published>
    <updated>2022-01-24T06:01:09.221Z</updated>
    
    <content type="html"><![CDATA[<p>大きな組織でのDocker Desktop有料化が発表されて、いよいよFreeからの切り替え期限が今月末に迫っています。「Docker DesktopだからLinux版は無償だからWSL2に入れれば無料」みたいな解説もされていますが、Linux版のDocker Desktopもすでにベータリリースされており、そのうちLinux版も遅かれ早かれ有償化されるかと思います。</p><p>で、ライセンスもいくつかあるけど、どれを選べばよいのかを検討した記録を公開します。なお、2022/01時点の情報を元に書いており、最新情報はDockerのサイトをご覧ください。</p><p><a href="https://www.docker.com/pricing">https://www.docker.com/pricing</a></p><h1 id="有償ライセンスは3種類"><a href="#有償ライセンスは3種類" class="headerlink" title="有償ライセンスは3種類"></a>有償ライセンスは3種類</h1><p>Freeはフューチャーの規模では使えませんので、除外してみると、Pro, Team, Businessがあります。2022年1月時点の一人/月あたりの金額は以下の通りです。</p><img src="/images/20220124a/image.png" alt="ライセンス一覧" width="1200" height="725" loading="lazy"><div class="scroll"><table><thead><tr><th>Type</th><th align="center">年契約</th><th align="center">月契約</th><th align="left">メモ</th></tr></thead><tbody><tr><td>Pro</td><td align="center">$5</td><td align="center">$7</td><td align="left">個人ごとの契約？</td></tr><tr><td>Team</td><td align="center">$7</td><td align="center">$9</td><td align="left">シート数契約。組織に人を追加したり外したりは比較的自由にできそう。最初の5ユーザーはProと同じ金額。</td></tr><tr><td>Business</td><td align="center">$21</td><td align="center">$21</td><td align="left">おそらくTeam同様？ボリュームディスカウントがあるらしい</td></tr></tbody></table></div><p>外部公開しないのであれば、イメージを置いておく機能とか権限管理とかはまああんまり大事じゃないというか、AWSを使うならECR、GCPを使うならGCRと、コンテナレジストリは代替があるし、実際にクラウド環境にサービスデプロイするならどうせそっちを使うことになりますし、大きな会社だとNexusとかを社内に立ててたりもするでしょう。GitHubのもありますし。なのであんまり大事じゃなさそうです。もちろん、そのあたりは会社のビジネスにもよるのでそこは各自判断で。</p><p>Proアカウントはボタンを押すといきなりクレジットカード入力画面が出てきます。個人ごとにチャージですので、会社で全員が各自ぽちぽち購入申請を上げて・・・みたいなのが必要です。全員がコーポレートカード持っているとかであればこれでもいいかもしれません。</p><img src="/images/20220124a/image_2.png" alt="支払い方法" width="951" height="719" loading="lazy"><p>Teamは組織名を決めて、人数（シート数、最小5ライセンス）を入れて、その後クレジットカード番号を入れることになります。複数人数分まとめて支払える点がProよりも良いですね。ただ、組織名はユニークでなければならず、チームごとに決済を分けたい、となるとチーム名も分かれることになるし、複数チームに所属する人はその分お金がかかるというのはデメリットです。まあDocker Hubにイメージをpushしたり、そこでプロジェクトのイメージ管理をしようとかしないで、ローカルでDocker Desktop使うだけなら、仕事上は複数チームでも1つのTeamに所属してお金を払っていたらまあ問題はないかと思います。大きなチーム（org）を内部でチームに分けることは可能っぽく、その場合は複数チームに入ってもお金は重複してかからなそうなので、なるべく多くのチームにして支払いをまとめたほうがよさそうです。プロジェクト按分とかを事後に行う必要があると思いますが。</p><p>なお、マニュアルを見ると、Teamではシート数が固定で、だれを入れるかは自由にあとから変更できるので、プロジェクトのメンバー入れ替えとかにも対応できそうです。シート数の増減は可能（増加は日割りで元の契約期間にプラス、減少は次回の支払い時にその分減額、月払い、年払い混在は不可）みたいな感じのようです。</p><p><a href="https://docs.docker.com/subscription/add-seats/">https://docs.docker.com/subscription/add-seats/</a></p><img src="/images/20220124a/image_3.png" alt="組織設定" width="952" height="673" loading="lazy"><p>Businessは試してないですが、おそらく営業とやりとりして見積して・・・という流れになるかと思います。請求書払いができるってのがBusinessのメリットしてあげられていますね。あとは、長らくComing Soonだったシングルサインオンが1/7ぐらいに突然やってきたので、それがあったほうが管理が楽、というのがあればBusinessがいいんじゃないでしょうか。</p><p>フューチャーのうちの部署ではとりあえず組織とかプロジェクト（フューチャーグループ各社をまたぐ場合）ごとに申請しよう、ということになったので、各プロジェクトごとにTeamでの申請かな、と思っているところです。実運用始まって実際にアカウント数とか見えてきたらどのぐらいディスカウントしてもらえるか問い合わせたうえでBusinessにアップグレードでもいいかもしれません。</p><h1 id="プロジェクト参画のリードタイムを減らすために"><a href="#プロジェクト参画のリードタイムを減らすために" class="headerlink" title="プロジェクト参画のリードタイムを減らすために"></a>プロジェクト参画のリードタイムを減らすために</h1><p>プロジェクトに参画してすぐで購入申請のリードタイムとか考えると、Dockerなしでもできる手立ては用意した方がいいのかな、と思っています。今のところは候補としてはpodmanですかね。BUILDKITは使えないようですが、docker-composeが使えるようにDocker互換性がさらに増えていますし、Kubernetesのマニフェストも食えます。</p><p><a href="https://rheb.hatenablog.com/entry/podman3_docker_compose">https://rheb.hatenablog.com/entry/podman3_docker_compose</a></p><p>もちろん、podmanを最初から全員使うという手もあるかもしれませんが、どうしても情報がまだまだ少ないし、まずは安定していて知見もたまっているDockerを使いつつ、アプリ本体をビルドとか開発環境整備用途ではなくて、ビルド済みのミドルウェアの起動、アプリはローカルネイティブに起動ぐらいの用途にとどめておこうかな、と考えているところです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;大きな組織でのDocker Desktop有料化が発表されて、いよいよFreeからの切り替え期限が今月末に迫っています。「Docker DesktopだからLinux版は無償だからWSL2に入れれば無料」みたいな解説もされていますが、Linux版のDocker</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
    <category term="ライセンス" scheme="https://future-architect.github.io/tags/%E3%83%A9%E3%82%A4%E3%82%BB%E3%83%B3%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Best Blogger of the Year 2021 受賞者を発表します</title>
    <link href="https://future-architect.github.io/articles/20220121a/"/>
    <id>https://future-architect.github.io/articles/20220121a/</id>
    <published>2022-01-20T15:00:00.000Z</published>
    <updated>2022-01-22T02:20:27.473Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220121a/badge-gf28962ed1_640.png" alt="" width="640" height="320"><p>こんにちは。技術ブログ運営の伊藤です。</p><p>今回は、社内の取り組みであるBest Blogger of the Yearの紹介と、2021年の受賞者を発表します。</p><h2 id="Best-Blogger-of-the-Year（べすぶろ）とは"><a href="#Best-Blogger-of-the-Year（べすぶろ）とは" class="headerlink" title="Best Blogger of the Year（べすぶろ）とは"></a>Best Blogger of the Year（べすぶろ）とは</h2><p>Best Blogger of the Year（べすぶろ）は、社外に影響を与えた記事を執筆した人を表彰する仕組みとして2020年より開催しています。べすぶろは技術ブログ部門と<a href="https://note.future.co.jp/">未来報</a>（フューチャーの人を紹介するオウンドメディア）との共催で開催します。<br>記事の選定基準は、</p><ul><li><strong>品質</strong>：読者が望む内容を適切に文章に落とし込んで価値ある記事である。</li><li><strong>ユニーク</strong>：記事の固有性がある。唯一無二の記事になっている。</li><li><strong>記事数</strong>：発信に積極的に取り組んでいる。数多くの記事を出している。</li><li><strong>影響度</strong>：記事によって何らかの影響が可視化される。（多く閲覧された（PV）、行動変容があった（内定承諾に影響した、ビジネス展開に影響した）等）</li></ul><p>の4つを基準とし、3名選出しました。</p><p>選出された3名の中での順位はつけてはいないです。2021年は105名の寄稿者がいましたので、選出されるためにはよっぽど目立った記事を書くか、定期的なアウトプットが求められたのかなと思います。</p><h2 id="2021年受賞者の発表"><a href="#2021年受賞者の発表" class="headerlink" title="2021年受賞者の発表"></a>2021年受賞者の発表</h2><p>さて、2021年のべすぶろ受賞者を発表します。寄稿数順に記載しています。</p><div class="scroll"><table><thead><tr><th>名前</th><th>寄稿数</th><th>代表記事</th><th>選出理由</th></tr></thead><tbody><tr><td>澁川喜規</td><td>32</td><td><a href="/articles/20210611a/">サーバーアプリ開発環境(Python／FastAPI)</a></td><td>今年1番記事を寄稿いただき、数々の記事ではてブのランキング入りを果たした。GoやPythonの特定の言語だけでなく、近年盛り上がりをみせるFlutterの記事も複数公開し、技術の幅を魅せるきっかけにもなっている。</td></tr><tr><td>伊藤真彦</td><td>31</td><td><a href="/articles/20210812a/">Go 1.17のtesting新機能</a></td><td>特定の分野の記事に問わず、AWSやGo言語、さらには自作OSSなどのネタも投稿。技術ブログ主催の連載にも数多く参加し、資格の合格体験記やイベントの登壇レポートなど、フューチャーとしての技術力の向上にも寄与していたため。</td></tr><tr><td>枇榔晃裕</td><td>2</td><td><a href="/articles/20210621a/">どうしてHTML5が廃止されたのか</a></td><td>フロントエンド連載にて寄稿いただいた、HTML5の廃止を題材とした記事は、連日にわたってはてブへのランクインし、技術ブログのはてブ数では歴代1位になった。また、Twitterのトレンド入りも果たし、業界の中でも話題になった。</td></tr></tbody></table></div><p>2021年はこの3記事を選出しました。いずれもはてブのランク入りを果たしたり、Twitterで話題になった記事なので、皆さんも1度は読んだ記事も上がっているのではないでしょうか？</p><h2 id="2020年受賞者に付いて"><a href="#2020年受賞者に付いて" class="headerlink" title="2020年受賞者に付いて"></a>2020年受賞者に付いて</h2><p>2020年も社内では表彰していたものの記事として公開はしていなかったため、こちらも本記事で合わせて公開します。全体の寄稿者は81名でした。</p><div class="scroll"><table><thead><tr><th>名前</th><th>寄稿数</th><th>代表記事</th><th>選出理由</th></tr></thead><tbody><tr><td>澁川喜規</td><td>21</td><td><a href="/articles/20200513/">仕事でPythonコンテナをデプロイする人向けのDockerfile (1): オールマイティ編 </a> など多数</td><td><a href="/articles/20200910/">イベント登壇</a>から技術ブログの各種関連記事まで幅広いジャンルで記事投稿があり、記事に対する反響も大きくSNSでシェアなど拡散がみられる。寄稿数がトップ。PVも2万超えのものもあり、認知度向上に寄与している。</td></tr><tr><td>多賀聡一朗</td><td>6</td><td>AirFlow記事全般</td><td><a href="/tags/Airflow/">AirFlow記事</a>は日本語トップの検索結果になるものが多く。影響力が大きい。<a href="/articles/20200708/">Zuora記事</a>は社外パートナー推進のきっかけにもなり、ビジネスにも影響があった。</td></tr><tr><td>ヴーホアン・ミン</td><td>1</td><td><a href="/articles/20200203/">PlantUML規約</a></td><td>おそらく世界初のPlantUML規約を公開し、エポックメーキングとなった。GitHubに<a href="https://github.com/future-architect/puml-themes">OSS</a>としても公開している。幅広い人に向けてフューチャーの知名度と、良い意味での技術へのこだわりをアピールできた。</td></tr></tbody></table></div><p>なんと、澁川さんが2年連続での受賞となります！</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>フューチャー技術ブログは社員の有志という形で寄稿されて成り立っているので、今後もこういった称える仕組みを継続していければと思います。<br>また、皆さんが気になった記事はコメントやシェアをしていただくと、励みにもなりますので、今後ともよろしくお願いいたします！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220121a/badge-gf28962ed1_640.png&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;320&quot;&gt;

&lt;p&gt;こんにちは。技術ブログ運営の伊藤です。&lt;/p&gt;
&lt;p&gt;今回は、社内の取り組みであるBest</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="TechBlog" scheme="https://future-architect.github.io/tags/TechBlog/"/>
    
    <category term="運営" scheme="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/"/>
    
    <category term="ベスブロ" scheme="https://future-architect.github.io/tags/%E3%83%99%E3%82%B9%E3%83%96%E3%83%AD/"/>
    
  </entry>
  
  <entry>
    <title>数字と振り返るフューチャー技術ブログ（2021）</title>
    <link href="https://future-architect.github.io/articles/20220120a/"/>
    <id>https://future-architect.github.io/articles/20220120a/</id>
    <published>2022-01-19T15:00:00.000Z</published>
    <updated>2022-01-23T07:00:56.866Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220120a/top.png" alt="" width="600" height="441" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>技術ブログ運営の真野です。年があけましたが、<a href="/articles/20201127/">2020年</a>に引き続き2021年の技術ブログの振り返りをお届けしたいと思います。</p><h2 id="キーメトリクスについて"><a href="#キーメトリクスについて" class="headerlink" title="キーメトリクスについて"></a>キーメトリクスについて</h2><p>この技術ブログ運営の指標としてPVやSNSでのリアクション数などは追っていません。理由は次です。</p><ol><li>PVを真面目にあげようとすると、タイトル釣りやエッセー的な内容を増やしたくなり、趣旨であるフューチャーのITコンサルティング業務を通して得た知見を共有するという趣旨が薄まる恐れがある</li><li>PVが少なくても、特定の領域を追っている人に刺さる記事は重要であると認識していること</li><li>一般ウケしない記事を書いてしまっても次回作以降で、バズる記事を書いてくれる人もいる。あまりそこに囚われないようにしたい</li><li>運営上、PVやSNSでのリアクションを追わないけど、バズった場合はチームで礼賛すれば良い</li></ol><p>そのため、このブログで気にしているのは以下です。</p><ul><li><strong>記事の投稿数/月</strong></li><li><strong>寄稿者のユニークユーザ（UU）数/年</strong></li><li><strong>連載企画の本数および、それぞれの参加人数</strong></li></ul><p>投稿数がある程度活発であれば、IT技術組織的な活動がある一面ではヘルシーに行われていると思うからです。さらに寄稿者UUですが、寄稿者が増えれば増えるほど様々な観点の記事が増えるためユニークな媒体になると考えており、広く当社の技術的な成果を伝えられるのでは？と考えています。連載企画も発信内容の偏りを意思入れで散らすことや、単発だと出てこないようなテーマを拾い上げるキッカケにしたいため、企画本数やそこに参加しているメンバーの数にはこだわっていきたいと思っていました。</p><p>年間目標はなんとなく300本にしました。実績は281本で届きませんでしたが、2020年から1.5倍になっており大健闘かとおもっています。</p><div class="scroll"><table><thead><tr><th>year</th><th>objectives</th><th>results</th></tr></thead><tbody><tr><td>2021</td><td>300</td><td>281</td></tr><tr><td>2020</td><td>48</td><td>190</td></tr><tr><td>2019</td><td>24</td><td>75</td></tr></tbody></table></div><p>月別で見てもコンスタントに公開できており、2022年もこのペースを守りたいと思っています。</p><img src="/images/20220120a/月別投稿数.png" alt="月別投稿数.png" width="1200" height="387" loading="lazy"><p>寄稿者UU数ですが、2021年は105名。これもかなりがんばれたと思います。フューチャーは1000名を超えるITコンサルタントが所属しているため、このうち1割程度が関わったということでしょうか。2022年は130名を目指したいと思います。</p><img src="/images/20220120a/寄稿者数の推移.png" alt="寄稿者数の推移.png" width="1200" height="245" loading="lazy"><p>連載企画は<a href="/articles/20210112/">技術ブログの2021年の連載予定を発表します </a>にある通り、14本開催できました。CNCFは惜しくも開催できませんでした。2022年は月1ペースでの開催を行う予定。スポットで2,3本増やしていく予定です。今の運営的には月2開催だとかなり厳しいので、月1程度がサステナブルです。</p><p>なお、繰り返しですがSNSなどで盛り上がった記事についてはできる限り社内で褒め合えるようにシェアしています。</p><h2 id="PV数"><a href="#PV数" class="headerlink" title="PV数"></a>PV数</h2><p>PVを追っていないと言いながらも共有です。上がると嬉しいですね。6月はスパイクして32万PV/月を声、2021年下期は12～14万PV/月でした。2020年と比較すると、記事のストック効果もあり1~2割成長しているのかな？と思っています。</p><img src="/images/20220120a/PV.png" alt="PV.png" width="1200" height="206" loading="lazy"><p>6月スパイクの要員は <a href="/articles/20210621a/">どうしてHTML5が廃止されたのか </a> の記事がバズったからです。素晴らしい吸引力。</p><h2 id="ベストブロガーオブザイヤー"><a href="#ベストブロガーオブザイヤー" class="headerlink" title="ベストブロガーオブザイヤー"></a>ベストブロガーオブザイヤー</h2><p>年1ペースで、技術ブログからは3名、発信力があった方を讃えています。ギフト券をプレゼントもしているようです。</p><p>2020年に引き続き、<a href="https://future-architect.github.io/authors/%E6%BE%81%E5%B7%9D%E5%96%9C%E8%A6%8F/">澁川さん</a>が素晴らしい貢献をしてくれています。社外にもファンが多数いらっしゃるということも理解できるほど、良記事を大量にアウトプットされていて尊敬します。これについては<a href="/articles/20220121a/">別の記事</a>で紹介しています。</p><h2 id="人気の記事分析"><a href="#人気の記事分析" class="headerlink" title="人気の記事分析"></a>人気の記事分析</h2><p>PVで見る人気の記事や、2020年いちばん寄稿してくれた人は？といった調査を2020年は行いましたが、これはブログの機能として実装したので、だれでも簡単に見ることができるようになりましたので、今年はスキップします。</p><h2 id="記事・寄稿者を増やす取り組み"><a href="#記事・寄稿者を増やす取り組み" class="headerlink" title="記事・寄稿者を増やす取り組み"></a>記事・寄稿者を増やす取り組み</h2><p>ブログ連載自体に、地道に改善を続けています。</p><h3 id="1-Bar-Techblogの開催"><a href="#1-Bar-Techblogの開催" class="headerlink" title="1. Bar Techblogの開催"></a>1. Bar Techblogの開催</h3><img src="/images/20220120a/bar_techblogの募集ページ.png" alt="bar_techblogの募集ページ" width="959" height="523" loading="lazy"><p>社内向けで技術ブログの運営についての意見吸い上げや、寄稿に悩んでいる人の相談室を2回開催しました。ブログ機能についても色々フィードバックをもらい、機能上はかなり強化できたので、ユーザーの声を聞く大事さを学びました。</p><p>このかっこいい画像はもうひとりの技術ブログ運営の伊藤太斉が作ってくれて、企画もぜんぶやってくれました。</p><h3 id="2-ブログ機能のアップグレード"><a href="#2-ブログ機能のアップグレード" class="headerlink" title="2. ブログ機能のアップグレード"></a>2. ブログ機能のアップグレード</h3><p>記事数がここ2年で3倍以上になっているため、記事を探しやすくする工夫や、回遊率を上げるための施策をかなり増やしました。</p><ol><li>記事検索ボックスの追加</li><li>Google AnalyticsのPVから、<a href="https://future-architect.github.io/#popular">人気の記事を週・月・年別</a>に追加</li><li>各記事に対して、タグ情報から関連する記事を表示</li><li>ブログ内で被リンクされている記事を表示</li><li>著者による記事の絞り込み</li><li>著者ページに投稿頻度のグラフなどメトリクス表示</li><li><a href="https://future-architect.github.io/authors/">著者一覧に投稿数のランキング</a>を表示</li><li>最近投稿された記事に NEW ラベルを表示</li><li>トップページの表示件数を10→25に変更</li><li>記事のサイドバーに目次（toc）を表示</li></ol><p>他にも様々な対応（CSS調整、アクセシビリティ、数式表示の最適化、記事のタグ付け改善）などを継続的に行っています。</p><p>Lighthouseによる検査も定期的にチェックしています（ユーザー補助がちょっと下がっていることにこの記事を書いていて気が付きました）。</p><img src="/images/20220120a/lighthouse結果.png" alt="lighthouse結果.png" width="1200" height="280" loading="lazy"><p>最適化の余地はまだまだ多分に残っていますが、ある程度快適に参照できるようにはなっているのではないでしょうか。</p><h3 id="3-Future-Tech-Night（勉強会）との連動"><a href="#3-Future-Tech-Night（勉強会）との連動" class="headerlink" title="3. Future Tech Night（勉強会）との連動"></a>3. Future Tech Night（勉強会）との連動</h3><p><a href="https://future.connpass.com/">connpassのフューチャーページ</a> で募集している勉強会との連動を強化しました。できる限り毎回、登壇者レポートを記載してもらうようにしています。勉強会を開催して終わりではなく、登壇資料・登壇レポートの添付で、資料の添付も2021年だけで40ほど増えました。引き続きよりオープンな運営を目指したいと思います。次は動画撮影しYoutubeでの公開も目指しています。</p><h3 id="4-連載のインデックス記事"><a href="#4-連載のインデックス記事" class="headerlink" title="4. 連載のインデックス記事"></a>4. 連載のインデックス記事</h3><p>ブログ連載のインデックス記事を丁寧に作成するようにしました。<a href="/articles/20210112/">インデックスをまとめたインデックス記事</a>もあります。本数ベースでいくと水増しですが、こういった丁寧な運用をすると、リンクのシェアなども行いやすくなるので、記事数が増えてきて初見の人からすると記事を相対的に見つけにくくなっていることを踏まえ、おまとめページもできる限り同期をとってメンテナンスしていきます。</p><h2 id="2022年に向けて"><a href="#2022年に向けて" class="headerlink" title="2022年に向けて"></a>2022年に向けて</h2><p>数を追ってもということはあるのですが、ブログ本数300本、著者UU数130人を目指したいと思っております。社員のみなさまの協力を、、なにとぞお願いします🙏</p><p>7/18にテックカンファレンスを開催したいと思っており、こちらも技術ブログ側にレポートや動画を載せていきたいです。</p><p>技術ブログでの発信を通して、このブログを見てくださる皆まさに少しでもお役に立ちたいと思っています。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>2021年は順調に運営できた。ブログ自体の機能も強化し改善サイクルを回せた。<br>2022年も地道な改善を回し続けることと、カンファレンス開催とコラボレーションしていきます。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220120a/top.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;441&quot; loading=&quot;lazy&quot;&gt;


&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="TechBlog" scheme="https://future-architect.github.io/tags/TechBlog/"/>
    
    <category term="運営" scheme="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/"/>
    
    <category term="PV" scheme="https://future-architect.github.io/tags/PV/"/>
    
  </entry>
  
  <entry>
    <title>DatoCMSでポートフォリオをサクッとつくる</title>
    <link href="https://future-architect.github.io/articles/20220119a/"/>
    <id>https://future-architect.github.io/articles/20220119a/</id>
    <published>2022-01-18T15:00:00.000Z</published>
    <updated>2022-01-19T11:11:55.157Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220119a/color_full_logo.png" alt="" width="1200" height="371" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG/DXユニット所属の宮永です。</p><p>今回はタイトルの通り、Headless CMSサービスである<a href="https://www.datocms.com/">DatoCMS</a>をつかってポートフォリオをサクッと作成する方法をご紹介します。</p><p>この記事をお読みの皆様はご自身のポートフォリオサイトはお持ちでしょうか？</p><p>GitHubPagesやWordPressなど、コーディングを行わずともWebサイトを作成できるサービスはたくさんあります。上記のようなサービスは比較的低コストで簡単にウェブサイトを作成ができる一方で拡張性やフロントエンドの自由度は高くありません。フロントエンドを自力でカスタマイズしつつ、お手軽にサイトを作りたいと思ったとき、次に考えるサービスはHeadless CMSの類いであると思います。今回紹介する<a href="https://www.datocms.com/">DatoCMS</a>もHeadless CMSサービスの一つです。</p><p>本記事では<a href="https://www.datocms.com/">DatoCMS</a>を使用してポートフォリオサイトを作成する方法をハンズオン形式で紹介します。</p><p>サービス登録に必要なのはGitHubアカウントとメールアドレスだけなので、記事を読み進めながら取り組んでいただければと思います。</p><h1 id="Headless-CMSとは"><a href="#Headless-CMSとは" class="headerlink" title="Headless CMSとは"></a>Headless CMSとは</h1><p>Headless CMSについての解説が和製Headless CMSサービスである<a href="https://blog.microcms.io/what-is-headlesscms/">microCMSのブログ記事</a>に記載されていたので以下引用します。</p><blockquote><p>ヘッドレスの「ヘッド」は、ビュー（表示する画面）を指します。ヘッドレスなので、ビューの無いCMSということになります。<br>ビューがないとはどういう事でしょうか？<br>そもそもCMSとはContent Management Systemの略で、つまりはコンテンツ管理システムを指します。従来のCMSはコンテンツを入稿するシステムとコンテンツを表示するビューが合わさったものでした。<br>最も代表的な例としてはWordPressが挙げられます。また、はてなブログやQiita、NoteなどもCMSです。<br>CMSのビュー（見た目）には以下の三種類があります。<br>サービス固有の画面（Qiita、Note、Mediumなど）<br>テンプレートを選択できるもの（WordPress、はてなブログなど）<br>自由に作成可能なもの（WordPress）<br>※ はてなブログ等もCSSの範囲であれば自由に見た目を変更可能<br>※ WordPressはHTMLの骨組みから自由に作成可能<br>このビューに当たる部分が無いのがヘッドレスCMSです。</p></blockquote><p>例えば、ブログサイトの作成を考えるとき、入稿システムはHeadless CMSに預けて、ビューの管理をコーディング（Vue.jsやNuxt.jsなど）で作成するといった事例が考えられます。バックエンドの開発を自分で行わずともブログサイトを作成できるのはとても便利ですね。</p><h1 id="DatoCMSをはじめる"><a href="#DatoCMSをはじめる" class="headerlink" title="DatoCMSをはじめる"></a>DatoCMSをはじめる</h1><p>それでは早速<a href="https://www.datocms.com/">DatoCMS</a>をはじめましょう。こちらの<a href="https://dashboard.datocms.com/signup">リンク</a>からサービスの登録ができます。</p><p>なんと登録するときにクレジットカードその他個人情報の登録は不要です。メールアドレスと名前を用意すればすぐにサービスを始めることができます。</p><img src="/images/20220119a/image.png" alt="ユーザ登録" width="1200" height="631" loading="lazy"><p>登録が完了したら、下記のページに遷移します。[New project]で新規プロジェクトを作成しましょう。</p><img src="/images/20220119a/image_2.png" alt="New project" width="1174" height="909" loading="lazy"><p>新規プロジェクトを作成すると、スクラッチから作成する「Blank project」と「Demo project」の2つを選択することができます。<br>「Demo project」にはフレームワークや用途に沿って複数のスタータープロジェクトが用意されています。</p><img src="/images/20220119a/image_3.png" alt="Demo project" width="991" height="1007" loading="lazy"><p>今回は「サクッと」ポートフォリオを作成したいので<a href="https://www.datocms.com/marketplace/starters/vue-js-profile-card">Vue.js Profile Card Website</a>を選択します。</p><p>[Start project]を選択すると以下のようなポップアップ画面が立ち上がります。ホスティングサービスはNetliftyとVercelを選ぶことができます。今回はNetliftyを選択します。</p><p>プロジェクト名とホスティングサービスの入力が完了したら、ご自身のGitHubアカウントとNetliftyとを連携します。</p><img src="/images/20220119a/Screenshot_from_2022-01-15_15-20-56.png" alt="Create demo project" width="957" height="610" loading="lazy"><p>[Create project]を選択すると、スタータープロジェクトのフォークとNetlifyへのデプロイがはじまります。</p><img src="/images/20220119a/image_4.png" alt="Netlifyデプロイ" width="946" height="607" loading="lazy"><p>プロジェクトの作成が完了すると以下のような画面に切り替わります。この時点でサイトはデプロイされています。</p><p>自身のGitHubリポジトリにフォークされたプロジェクトからフロントエンドを編集することができます。</p><img src="/images/20220119a/image_5.png" alt="GitHubリポジトリにフォークされたプロジェクト" width="952" height="587" loading="lazy"><p>以下がデフォルトのサイトの画面です。</p><p><a href="https://vuejs-datocms-demo.netlify.app/">https://vuejs-datocms-demo.netlify.app/</a></p><img src="/images/20220119a/image_6.png" alt="image.png" width="1200" height="612" loading="lazy"><p>すでにかっこいいですね。</p><p>もちろんレスポンシブにも対応しています。</p><img src="/images/20220119a/responsive.png" alt="responsive" width="791" height="632" loading="lazy"><p>それでは、このスタータープロジェクトをベースにカスタマイズしていきます。</p><p>まずはローカルでクローンしたプロジェクトを開き、<code>.env</code>に<code>API_KEY</code>を格納します。<br>このとき、キャッシュがクリアされていないと<code>.gitignore</code>に<code>.env</code>が記載されていてもリモートにアップロードされてしまうので注意してください。🙅</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>を実行したあと、以下コマンドでサーバーを起動します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p><code>http://192.168.10.108:8080/</code>で確認ができると思います。</p><p>まずはコーディングは行わず、スタータープロジェクトで実装されたモデルを変更していきます。</p><p>プロジェクトにログインすると下記画像のような編集画面に遷移します。<br><code>Profile</code>、<code>Theme</code>、<code>Social</code>は初期設定で実装されているものです。<code>Product</code>は私が新規に作成しました。</p><p>下記の画面では<code>Profile</code>を選択しています。初期設定では<code>Photo</code>にRebeccaさんの写真が登録されています。</p><p>写真や名前などプロフィール欄を変更します。</p><img src="/images/20220119a/image_7.png" alt="プロフィール" width="1200" height="610" loading="lazy"><p>同様にして、<code>Theme</code>、<code>Social</code>も変更して[Save]を押下します。正しく登録ができており、<code>API_KEY</code>が設定されていれば下図のようにローカルで変更を確認することができます。</p><p>余談ですが、背景画像は<a href="https://unsplash.com/">Unsplash</a>から<a href="https://unsplash.com/@sumaidsingh?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Sumaid pal Singh Bakshi</a>さんの写真を使用しています。</p><img src="/images/20220119a/image_8.png" alt="背景画像" width="1200" height="610" loading="lazy"><p>次に新規にモデルを作成します。</p><p>「Settings」に遷移し、画面下部のプラスマークからモデルを追加できます。</p><img src="/images/20220119a/image_9.png" alt="Settings画面" width="1200" height="609" loading="lazy"><p><code>Product</code>の中身は<code>Name</code>、<code>URL</code>、<code>Image</code>としています。</p><img src="/images/20220119a/image_10.png" alt="Product" width="1200" height="611" loading="lazy"><p>「Content」に再度遷移するとメニューアイテムに<code>Product</code>が追加されています。<br><code>Product collection</code>に成果物を追加していきます。</p><img src="/images/20220119a/image_11.png" alt="Product collection" width="1200" height="609" loading="lazy"><p>編集画面は下図のようになります。</p><img src="/images/20220119a/image_12.png" alt="Product編集画面" width="1200" height="772" loading="lazy"><p>次にコーディングに移ります。</p><p><code>src/</code>配下の<code>App.vue</code>のクエリ文に以下を追記します。</p><figure class="highlight js"><figcaption><span>graphql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">products</span>: allProducts &#123;</span><br><span class="line">    name</span><br><span class="line">    url</span><br><span class="line">    image &#123;</span><br><span class="line">      <span class="attr">productImage</span>: <span class="function"><span class="title">responsiveImage</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        imgixParams: &#123; w: <span class="number">100</span>, h: <span class="number">100</span>, fit: crop, crop: faces, auto: format &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">      </span>)</span> &#123;</span><br><span class="line">        ...imageFields</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>v-forで配列を表示するようにします。</p><figure class="highlight html"><figcaption><span>vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">&quot;profile in data.products&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;link&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:href</span>=<span class="string">&quot;profile.url&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">&quot;profile.name&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">      pt-4</span></span></span><br><span class="line"><span class="string"><span class="tag">      text-base</span></span></span><br><span class="line"><span class="string"><span class="tag">      font-bold</span></span></span><br><span class="line"><span class="string"><span class="tag">      flex</span></span></span><br><span class="line"><span class="string"><span class="tag">      items-center</span></span></span><br><span class="line"><span class="string"><span class="tag">      justify-center</span></span></span><br><span class="line"><span class="string"><span class="tag">      lg:justify-start</span></span></span><br><span class="line"><span class="string"><span class="tag">    &quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    &#123;&#123; profile.name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lg:w-2/5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">datocms-image</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:data</span>=<span class="string">&quot;profile.image.productImage&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;rounded-none lg:rounded-lg shadow-2xl hidden&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ここまでコーディングしたら、保存して<code>http://192.168.10.108:8080/</code>にアクセスします。</p><p>実装が正しければ新たに追加した<code>Product</code>の情報が反映されているはずです。</p><img src="/images/20220119a/image_13.png" alt="image.png" width="1200" height="629" loading="lazy"><p>きちんと反映されていますね。 🎉</p><p>あとはモデルを追加しつつ、コーディングを進めればオリジナルのウェブサイトを作成することができます。今回はここまでとします。</p><p>実装したコードはこちらに格納しています。</p><p><a href="https://github.com/orangekame3/datocms-orangekame3-portfolio">https://github.com/orangekame3/datocms-orangekame3-portfolio</a></p><p>また、今回作成したポートフォリオは<a href="https://orangekame3.blog/">こちら</a>です</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回はHeadless CMSサービスである<a href="https://www.datocms.com/">DatoCMS</a>を使用して、ポートフォリオを「サクッと」作成する方法をハンズオン形式で紹介しました。</p><p>DatoCMSの機能は今回全く紹介できていないので、また機会を見て記事にまとめられればと思います。DatoCMSには各種フレームワークに沿ったスタータープロジェクトが充実していたため、低コストで見栄えの良いものを作成できました。</p><p>ご自身のポートフォリオを作成する手段の一つとしてDatoCMSを試してみてはいかがでしょうか。</p><p>最後までお付き合いいただきありがとうございました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220119a/color_full_logo.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;371&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
    <category term="CMS" scheme="https://future-architect.github.io/tags/CMS/"/>
    
    <category term="HeadlessCMS" scheme="https://future-architect.github.io/tags/HeadlessCMS/"/>
    
    <category term="DatoCMS" scheme="https://future-architect.github.io/tags/DatoCMS/"/>
    
  </entry>
  
  <entry>
    <title>2022年のテック勉強会スケジュールを発表します</title>
    <link href="https://future-architect.github.io/articles/20220118a/"/>
    <id>https://future-architect.github.io/articles/20220118a/</id>
    <published>2022-01-17T15:00:00.000Z</published>
    <updated>2022-01-23T07:01:15.537Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220118a/top.jpeg" alt="" title="Alexandra_KochPixabayによるPixabayからの画像" width="640" height="421" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。 <a href="/articles/20210314/">2021年</a>に続きまして、2022年のフューチャーが主催するIT技術系の勉強会について発表いたします。</p><div class="scroll"><table><thead><tr><th>#</th><th>Date</th><th>Category</th><th>Name</th><th>Memo</th></tr></thead><tbody><tr><td>2</td><td>01/14(金)</td><td>connpass</td><td><a href="https://future.connpass.com/event/235852/">Go ReleaseNotes 読む会</a></td><td>澁川、真野、辻、伊藤m</td></tr><tr><td>3</td><td>01/28(金)</td><td>connpass</td><td><a href="https://future.connpass.com/event/236138/">AWS CodePipelineと新聞向けCMS構築事例</a></td><td>渡邉、岡田、原</td></tr><tr><td>4</td><td>02/17(木)</td><td>connpass</td><td>Terraform</td><td>伊藤t、TBD</td></tr><tr><td>5</td><td>02/25(金)</td><td>社内イベント</td><td>LT2022 Winter</td><td>TBD×6名</td></tr><tr><td>6</td><td>03/17(木)</td><td>connpass</td><td>GCP</td><td>TBD、TBD</td></tr><tr><td>7</td><td>04/21(木)</td><td>connpass</td><td>Flutter</td><td>宮崎、藤田</td></tr><tr><td>8</td><td>05/19(木)</td><td>connpass</td><td>【公募】Goで自分で作ったOSSを自慢会</td><td>公募</td></tr><tr><td>9</td><td>06/16(木)</td><td>connpass</td><td>Svelte</td><td>TBD、TBD</td></tr><tr><td>10</td><td>07/18(月)</td><td>Youtube配信</td><td>Future Tech Conference</td><td>30本の動画配信を予定</td></tr><tr><td>11</td><td>07/28(木)</td><td>connpass</td><td>Go言語</td><td>TBD、TBD</td></tr><tr><td>12</td><td>08/18(木)</td><td>connpass</td><td>データレイク</td><td>TBD、TBD</td></tr><tr><td>13</td><td>08/26(金)</td><td>社内イベント</td><td>LT2022 Summer</td><td>TBD×6名</td></tr><tr><td>14</td><td>09/22(木)</td><td>connpass</td><td>Java/Java18</td><td>藤野、星</td></tr><tr><td>15</td><td>10/20(木)</td><td>connpass</td><td>Reactのドキュメントを読む会</td><td>澁川、TBD</td></tr><tr><td>16</td><td>11/24(木)</td><td>connpass</td><td>AWS</td><td>TBD、TBD</td></tr></tbody></table></div><p>2021年は、<a href="/articles/20211004a/">ナイルさん</a>と<a href="/articles/20211014a/">トップゲート</a>さんと合同LTイベントを企画しました。こういった合同勉強会もオープンに開催したいと考えています。フューチャーの本社がある東京都品川区の大崎にも、Go言語をよく使っている会社さんが増えているということで、osaki.go のようなイベントも開催できたらね、と話しています。</p><p>※ LTは視聴者枠で一般募集も検討していますので一応掲載しました。</p><h2 id="Future-TechNight"><a href="#Future-TechNight" class="headerlink" title="Future TechNight"></a>Future TechNight</h2><p><a href="https://future.connpass.com/">connpass</a> で募集している技術系のイベントは、Future Tech Nightという名称で月1程度のペースで開催しています。「フューチャーが業務を通して得た技術的な知見やナレッジを共有する勉強会」がテーマです。なるべく<a href="https://future.connpass.com/presentation/">発表資料</a>はすぐに公開すること、<a href="/tags/TechNight/">登壇レポート</a>も1ヶ月以内で公開することを目標にしていました。2022年はYoutubeに動画も公開するように運営を整えていますので、時間が合わなくて参加できない！といった方にも好きな時間で視聴できるように環境を整えていきます。connpassは約2週間からオープンするようにしますので、フォローよろしくおねがいします。（2021年初期では300名ほどでしたが、2022年には1300名を超えて運営として喜んでいます。）</p><p>また、「Go ReleaseNotes 読む会」のようにフューチャー社内の雰囲気が伝わるような、より双方向な勉強会の開催頻度も増やしていこうと考えています（本番は緊張しますが、準備は楽できますのでもっと開催頻度を増やせるかも知れません！）。</p><p>ハッシュタグは引き続き <a href="https://twitter.com/search?q=%23future_tech_night">#future_tech_nigth</a> です。</p><h2 id="Future-Tech-Conference"><a href="#Future-Tech-Conference" class="headerlink" title="Future Tech Conference"></a>Future Tech Conference</h2><p>2022年初の試みです。30名の登壇者がそれぞれの技術テーマで、25分枠で全Youtube配信を行おうと考えています。現在企画を進めていますのでご期待ください。</p><p><a href="https://www.youtube.com/channel/UCJUSwYYd0CkGgmEKAW7QVpw">https://www.youtube.com/channel/UCJUSwYYd0CkGgmEKAW7QVpw</a></p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>勉強会についてもフューチャー社員一同、良い情報を発信してみなさまのお役にたてるようにがんばって行きます。どうぞよろしくお願いします。新卒・キャリア採用ともに積極的に募集していますので、興味がある方はご気軽にお問い合わせください！</p><p><a href="https://www.future.co.jp/recruit/">https://www.future.co.jp/recruit/</a></p><p>社員のみなさまへ：</p><ul><li>TBDの登壇者、積極的に募集しています。ちょっと自信が無いけど..といった方も声をかけてもらえると嬉しいです！（支援します！）</li><li>こういった勉強会もやりたい！という方も真野隼記 or 伊藤太斉まで連絡をいただけるとです。</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220118a/top.jpeg&quot; alt=&quot;&quot; title=&quot;Alexandra_KochPixabayによるPixabayからの画像&quot; width=&quot;640&quot; height=&quot;421&quot; loading=&quot;lazy&quot;&gt;


&lt;h2</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="TechNight" scheme="https://future-architect.github.io/tags/TechNight/"/>
    
    <category term="スケジュール" scheme="https://future-architect.github.io/tags/%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB/"/>
    
  </entry>
  
  <entry>
    <title>2022年のブログ連載予定を発表します</title>
    <link href="https://future-architect.github.io/articles/20220117a/"/>
    <id>https://future-architect.github.io/articles/20220117a/</id>
    <published>2022-01-16T15:00:00.000Z</published>
    <updated>2022-01-23T07:01:23.990Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220117a/calendar.jpeg" alt="" title="Andreas LischkaPixabayからの画像" width="640" height="426" loading="lazy"><p>あけましておめでとうございます。本年もどうぞよろしくおねがいします。TIG真野です。</p><p>2022年に計画しているブログ連載について紹介します。</p><h2 id="連載計画を発表する背景"><a href="#連載計画を発表する背景" class="headerlink" title="連載計画を発表する背景"></a>連載計画を発表する背景</h2><p><a href="/articles/20210112/">2021年</a>の記事でも説明しましたが、追加でいくつかの理由があります。</p><ul><li>企画が増えてくると、寄稿者を募集するスケジューリングが忘れがちになるため備忘にしたい<ul><li>スプレッドシート管理はファイルがどこにいったか分からなくなりがち</li></ul></li><li>寄稿者の幅を広げたい<ul><li>リモートワークになってからの他チームにジョインしたメンバーなどに少しでも届くように</li></ul></li></ul><h2 id="2022年の計画"><a href="#2022年の計画" class="headerlink" title="2022年の計画"></a>2022年の計画</h2><div class="scroll"><table><thead><tr><th>#</th><th>Title</th><th>Memo</th><th>Link</th></tr></thead><tbody><tr><td>1月</td><td>ー</td><td>ー</td><td></td></tr><tr><td>2月</td><td>Go 1.18</td><td>Go 1.18のリリースノートからテーマをピックアップして深堀りする連載</td><td>公開予定</td></tr><tr><td>3月</td><td>Flutter連載</td><td>Flutterの開発ネタ</td><td>2022、<a href="/articles/20210510a/">2021</a></td></tr><tr><td></td><td>電子工作</td><td>電子工作、IoT、自作キーボードなど</td><td>公開予定</td></tr><tr><td>4月</td><td>春の入門祭り</td><td>初心者向けに入門記事を書いてみようという連載</td><td>2022、<a href="/articles/20210414a/">2021</a>、<a href="/articles/20200529/">2020</a></td></tr><tr><td>5月</td><td>Svelte</td><td>JSフレームワーク、Svelteをテーマにした連載</td><td>公開予定</td></tr><tr><td>6月</td><td>サービス間通信</td><td>gRPC、GraphQL、OpenAPIなどをテーマにした連載</td><td>公開予定</td></tr><tr><td></td><td>技術書評</td><td>技術書の書評を書いていく連載</td><td>公開予定</td></tr><tr><td>7月</td><td>認証認可</td><td>Auth0、KeyCloackやWebAuthなどの技術周りについての連載</td><td>公開予定</td></tr><tr><td>8月</td><td>Go 1.19</td><td>Go 1.19のリリースノートからテーマをピックアップして深堀りする連載</td><td>公開予定</td></tr><tr><td></td><td>夏休み自由研究</td><td>夏休みに行った自由研究と銘うって、個人的に関心があることを深堀りして調べる連載</td><td>2022、<a href="/articles/20210823a/">2021</a>、<a href="/articles/20200726/">2020</a></td></tr><tr><td>9月</td><td>Terraform</td><td>Terraformをテーマにした連載</td><td>公開予定</td></tr><tr><td>10月</td><td>秋のブログ週間</td><td>秋の夜長に楽しめるように、いつもより文章が多めな読み物をテーマにした連載</td><td>2022、<a href="/articles/20211027a/">2021</a>、<a href="/articles/20201026/">2020</a></td></tr><tr><td>11月</td><td>Python 3.11</td><td>Python 3.11が出ることを記念して、Python全般をテーマにした連載</td><td>2022、<a href="/articles/20210927b/">2021</a></td></tr><tr><td>12月</td><td>アドベントカレンダー2022</td><td>Qiitaさんのアドベントカレンダーのイベントに乗っかる連載</td><td>2022、<a href="http://qiita.com/advent-calendar/2021/future">2021</a>、<a href="http://qiita.com/advent-calendar/2020/future">2020</a>、<a href="http://qiita.com/advent-calendar/2019/future">2019</a>、<a href="http://qiita.com/advent-calendar/2018/future">2018</a>、<a href="http://qiita.com/advent-calendar/2017/future">2017</a>、<a href="http://qiita.com/advent-calendar/2016/future">2016</a>、<a href="http://qiita.com/advent-calendar/2015/future">2015</a></td></tr></tbody></table></div><p>同月に複数実施することもありますが、並列に走らないようにする予定です。</p><p>2020～2021年実施した、GCP・サーバレス連載は寄稿者の集客がいまいちだったため本年は行わない予定です。代わりに、電子工作・サービス間通信・技術書評・Terraformテーマを新規に行います。Auth0は認証認可と少しスコープを広げて行う予定。フロントエンド連載はテーマが広すぎたため、Svelteに絞って行います。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>これまでの経緯を踏まえテーマをブラッシュアップしています。2022年も皆様にとって有益な情報発信を活発にしていきますので、応援よろしくおねがいします！</p><p>社員の皆さんへ：</p><ul><li><a href="/articles/20200908/">フューチャー技術ブログで行っている連載企画が良いよって話</a> でも記載しましたが、読み手にとっても、書き手にとっても色々とメリットがあります。興味があるけどブログに載せるほどのネタになるか不安という声はよく聞きます。どういうレベル感の記事を書くべきかにも相談を承っています。ハードルは限りなく低いので、DMなどで連絡いただけるとです。お気軽に参加いただけるとです。だいたい2～4週間前に寄稿者募集を投げるためレスポンスをいただけると助かります。</li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220117a/calendar.jpeg&quot; alt=&quot;&quot; title=&quot;Andreas LischkaPixabayからの画像&quot; width=&quot;640&quot; height=&quot;426&quot;</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="TechBlog" scheme="https://future-architect.github.io/tags/TechBlog/"/>
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="運営" scheme="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/"/>
    
    <category term="スケジュール" scheme="https://future-architect.github.io/tags/%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB/"/>
    
  </entry>
  
  <entry>
    <title>Minikubeでk8s学習を進めるためのヒント</title>
    <link href="https://future-architect.github.io/articles/20220112a/"/>
    <id>https://future-architect.github.io/articles/20220112a/</id>
    <published>2022-01-11T15:00:00.000Z</published>
    <updated>2022-01-12T01:33:37.626Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220112a/minikube.png" alt="" width="1000" height="519"><h1 id="k8s学習環境が欲しい"><a href="#k8s学習環境が欲しい" class="headerlink" title="k8s学習環境が欲しい"></a>k8s学習環境が欲しい</h1><p>こんにちはTIG鈴木です。</p><p>以前チームの輪読会で<a href="https://www.amazon.co.jp/Kubernetes%E5%AE%8C%E5%85%A8%E3%82%AC%E3%82%A4%E3%83%89-%E7%AC%AC2%E7%89%88-Top-Gear-%E9%9D%92%E5%B1%B1/dp/4295009792">Kuberntes完全ガイド</a>(以下k8s本)を読みました。 k8s本は、GKEを例にしながら、k8sのCLIツールだったりマニフェストのyamlファイルを丁寧に紹介しており、実践的に勉強するの適しています。</p><p>そのため、手を動かしつつ勉強したいところですが、クラウドプロバイダーが提供するマネージドk8sはコストが高めで気分的にほいほい使えないところがあります。となるとローカル環境でk8sを用意したくなります。</p><p>k8s完全ガイドでは<a href="https://github.com/kubernetes/minikube">minikube</a>だったり<a href="https://kind.sigs.k8s.io/">kind</a>だったりが紹介されています</p><h1 id="ローカル環境もそれなりにめんどくさい"><a href="#ローカル環境もそれなりにめんどくさい" class="headerlink" title="ローカル環境もそれなりにめんどくさい"></a>ローカル環境もそれなりにめんどくさい</h1><p>ところがminikubeだとGKEとは使い勝手が違っていて、k8s本通りに検証できない部分があり、初学者の私は混乱してしまいました。</p><p>ということで、私がひっかかったポイント（おもにServiceまわり）を踏まえて、k8s学習を進めるためのいくつかTipsを紹介します。</p><h1 id="minikubeとは"><a href="#minikubeとは" class="headerlink" title="minikubeとは"></a>minikubeとは</h1><p>ローカルk8sクラスタをを簡単に構築できる定番のツールです。DockerやVirtualBoxで仮想マシンが立ち上がりその上にk8sが構築されます。</p><p>下の様にオプションなしで起動した場合、筆者環境ではDockerコンテナとして起動します。デフォルトでは1 nodeで構築されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ minikube start</span><br><span class="line">...</span><br><span class="line">🏄  Done! kubectlisnow configuredtouse <span class="string">&quot;minikube&quot;</span> clusterand <span class="string">&quot;default&quot;</span> namespacebydefault</span><br><span class="line"></span><br><span class="line">$ kubectl get nodes</span><br><span class="line">NAME           STATUS   ROLES                  AGE   VERSION</span><br><span class="line">minikube       Ready    control-plane,master   90m   v1.22.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># ノードはdockerコンテナとして起動している</span></span><br><span class="line">$ docker ps</span><br><span class="line">CONTAINERID   IMAGE                                 COMMAND                  CREATEDSTATUS              PORTS</span><br><span class="line">NAMES</span><br><span class="line">362ee8fb5198   gcr.io/k8s-minikube/kicbase:v0.0.26   <span class="string">&quot;/usr/local/bin/entr…&quot;</span>   2 hours ago   Up 2 hours   127.0.0.1:49177-&gt;22/tcp, 127.0.0.1:49176-&gt;2376/tcp, 127.0.0.1:49175-&gt;5000/tcp, 127.0.0.1:49174-&gt;8443/tcp, 127.0.0.1:49173-&gt;32443/tcp   minikube</span><br></pre></td></tr></table></figure><h1 id="Serviceまわり"><a href="#Serviceまわり" class="headerlink" title="Serviceまわり"></a>Serviceまわり</h1><p><strong>NodePort</strong>は&lt;ノードのIP&gt;:&lt; Port &gt;への通信をPodに転送する形で、アプリケーションの外部疎通性を確保するリソースです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create deployment test-deployment --image=nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># NodePortを作成</span></span><br><span class="line">$ kubectl expose deployment test-deployment --port=80 --<span class="built_in">type</span>=NodePort</span><br><span class="line">$ kubectl get service test-deployment</span><br><span class="line">NAME              TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">test-deployment   NodePort   10.107.114.198   &lt;none&gt;        80:31307/TCP   4m21s</span><br></pre></td></tr></table></figure><p>上記Deploymentにアクセスするには、ノードのIPアドレスを調べる必要があります。minikubeではコマンドが用意されており、<code>minikube ip</code> で調べられます。  実態はminikubeノードとして起動しているDockerコンテナのアドレスです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ minikube ip</span><br><span class="line">192.168.49.2</span><br><span class="line"></span><br><span class="line">$ docker <span class="built_in">exec</span> -it minikube ip -4 a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">69: eth0@if70: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default  link-netnsid 0</span><br><span class="line">    inet 192.168.49.2/24 brd 192.168.49.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>curlをしてみれば、疎通できることがわかります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  curl 192.168.49.2:31307</span><br></pre></td></tr></table></figure><p><strong>LoadBalancer</strong>を使う場合は<code>minikube tunnel</code> で EXTERNAL-IPを払い出し、ホストサーバからEXTERNAL-IPへルートを確保します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl expose deployment test-deployment --<span class="built_in">type</span>=LoadBalancer --port=80</span><br><span class="line"></span><br><span class="line">$ kubectl get service test-deployment</span><br><span class="line">NAME              TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">test-deployment   LoadBalancer   10.108.139.68   &lt;pending&gt;     80:31284/TCP   70s</span><br><span class="line"></span><br><span class="line">$ minikube tunnel</span><br><span class="line"></span><br><span class="line"><span class="comment"># EXTERNAL-IPが払い出されている</span></span><br><span class="line">$ kubectl get service test-deployment</span><br><span class="line">NAME              TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)        AGE</span><br><span class="line">test-deployment   LoadBalancer   10.108.139.68   10.108.139.68   80:31284/TCP   2m35s</span><br></pre></td></tr></table></figure><p><code>curl 10.108.139.68:80</code> で疎通が確認できます。</p><h1 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h1><p>Ingressを使う場合は、Ingressコントローラをデプロイする必要があります。<br>minikubeではそのためのaddonが用意されています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ minikube addons <span class="built_in">enable</span> ingress</span><br><span class="line"><span class="comment"># nginx ingress controllerがデプロイされている</span></span><br><span class="line">$ kubectl get pods -n ingress-nginx</span><br><span class="line">NAME                                        READY   STATUS      RESTARTS   AGE</span><br><span class="line">ingress-nginx-admission-create-2mjhv        0/1     Completed   0          5m34s</span><br><span class="line">ingress-nginx-admission-patch-pj8jv         0/1     Completed   0          5m34s</span><br><span class="line">ingress-nginx-controller-5d88495688-grssn   1/1     Running     0          5m35s</span><br></pre></td></tr></table></figure><p>以下のマニフェストでingressを作成してみます。</p><figure class="highlight yaml"><figcaption><span>ing.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-ingress</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">&quot;nginx&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">test-deployment</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f ing.yaml</span><br></pre></td></tr></table></figure><p>下のようにIngressが作成されたことがわかります。 <code>ADDRESS</code> に対してリクエストを送ればアプリケーションにアクセスできます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get ingress</span><br><span class="line">NAME            CLASS    HOSTS   ADDRESS        PORTS   AGE</span><br><span class="line">test-ingress    &lt;none&gt;   *       192.168.49.2   80      13m</span><br></pre></td></tr></table></figure><p><a href="https://minikube.sigs.k8s.io/docs/handbook/addons/ingress-dns/">ingress-dns</a> addonを使えば、Ingressで設定したホスト名をホストサーバから解決することが可能らしいです。ちょっと試せていないですが、参考までに。</p><h1 id="Horizontal-Pod-Autoscaler"><a href="#Horizontal-Pod-Autoscaler" class="headerlink" title="Horizontal Pod Autoscaler"></a>Horizontal Pod Autoscaler</h1><p>Horizontal Pod Autoscaler(HPA)はCPUやメモリ消費に基づいてPodをスケールさせる機能です。HPAを使うためには、Podの消費するリソースをmetricsとして取得できる必要があります。minikubeではaddonとしてmetrics-serverを有効化します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ minikube addons <span class="built_in">enable</span> metrics-server</span><br><span class="line">    ▪ Using image k8s.gcr.io/metrics-server/metrics-server:v0.4.2</span><br></pre></td></tr></table></figure><p>metrics-serverを有効化したので、<code>kubectl top</code> でpodのリソース消費を確認できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl top pod test-nginx</span><br><span class="line">NAME         CPU(cores)   MEMORY(bytes)</span><br><span class="line">test-nginx   0m           1Mi</span><br></pre></td></tr></table></figure><p>この状態であれば、<a href="https://kubernetes.io/ja/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/">HPAのチュートリアル</a>で、HPAが機能することを確認できます。</p><h1 id="Multi-Node-Clusterとスケジューリング"><a href="#Multi-Node-Clusterとスケジューリング" class="headerlink" title="Multi-Node Clusterとスケジューリング"></a>Multi-Node Clusterとスケジューリング</h1><p>minikubeはデフォルトで1 nodeで起動します。なのでそのままでは、Node AffinityやPod Affinityなど高度なスケジューリング機能の検証ができません。</p><p>ですが、minikubeでは<code>--nodes</code> オプションで複数ノードでクラスタを作成可能です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ minikube start --nodes 2</span><br><span class="line">$ kubectl get node</span><br><span class="line">NAME           STATUS   ROLES                  AGE     VERSION</span><br><span class="line">minikube       Ready    control-plane,master   9m53s   v1.22.1</span><br><span class="line">minikube-m02   Ready    &lt;none&gt;                 9m35s   v1.22.1</span><br></pre></td></tr></table></figure><p>下のマニフェストでPod Anti Affinityを使ってみます。このDeploymentでは2つのPodが作成されますが、別々のノードに配置される設定になっています。</p><figure class="highlight yaml"><figcaption><span>pod-antiaffinity.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">100</span><span class="string">%</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">hello</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">hello</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="comment"># ⬇⬇⬇ This ensures pods will land on separate hosts</span></span><br><span class="line">        <span class="attr">podAntiAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">labelSelector:</span></span><br><span class="line">              <span class="attr">matchExpressions:</span> [&#123; <span class="attr">key:</span> <span class="string">app</span>, <span class="attr">operator:</span> <span class="string">In</span>, <span class="attr">values:</span> [<span class="string">hello</span>] &#125;]</span><br><span class="line">            <span class="attr">topologyKey:</span> <span class="string">&quot;kubernetes.io/hostname&quot;</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello-from</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">pbitty/hello-from:latest</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">            <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Podが異なるノードに配置されていることがわかります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE     IP           NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">hello-7db79cdc77-68mvs   1/1     Running   0          4m23s   10.244.0.3   minikube       &lt;none&gt;           &lt;none&gt;</span><br><span class="line">hello-7db79cdc77-gkpwm   1/1     Running   0          4m23s   10.244.1.5   minikube-m02   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>minikubeでk8sを学習していく際のTipsをご紹介しました。minikube以外にも<a href="https://microk8s.io/">microk8s</a>, <a href="https://kind.sigs.k8s.io/">kind</a>などローカルk8sクラスタ構築ツールの選択肢はありますし、VMとkubeadmで構築するのも勉強になると思います。<br>入門者のお役に立てれば幸いです！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220112a/minikube.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;519&quot;&gt;

&lt;h1 id=&quot;k8s学習環境が欲しい&quot;&gt;&lt;a href=&quot;#k8s学習環境が欲しい&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="入門" scheme="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
    <category term="Kubernetes" scheme="https://future-architect.github.io/tags/Kubernetes/"/>
    
    <category term="環境構築" scheme="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/"/>
    
    <category term="Minikube" scheme="https://future-architect.github.io/tags/Minikube/"/>
    
  </entry>
  
  <entry>
    <title>Step Functions を利用して感じた Airflow との比較</title>
    <link href="https://future-architect.github.io/articles/20220111a/"/>
    <id>https://future-architect.github.io/articles/20220111a/</id>
    <published>2022-01-10T15:00:00.000Z</published>
    <updated>2022-01-14T11:30:44.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Step-Functions-を利用して感じた-Airflow-との比較"><a href="#Step-Functions-を利用して感じた-Airflow-との比較" class="headerlink" title="Step Functions を利用して感じた Airflow との比較"></a>Step Functions を利用して感じた Airflow との比較</h1><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>TIG 所属の多賀です。</p><p>AWS 上でのワークフロー構築のため、Step Functions を直近で導入しました。</p><p>筆者は Airflow (MWAA) の経験が長く、いくつかブログも書いています。 (<a href="/tags/Airflow/">過去ブログ一覧</a>)。今回、両サービスを利用してみた上での比較を整理したく記事化しました。</p><p>前提として、どちらも素晴らしいサービスで、ユースケースに合わせて選定していくことが大事かと思います。</p><h2 id="サービス概要"><a href="#サービス概要" class="headerlink" title="サービス概要"></a>サービス概要</h2><p>各サービスについて、概要を整理しました。</p><p>※ Airflow は AWS 上でマネージドサービスとして提供されている Amazon Managed Workflows for Apache Airflow (以下 MWAA) をベースに記載します。</p><div class="scroll"><table><thead><tr><th align="left"></th><th align="left"><a href="https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html">MWAA</a></th><th align="left"><a href="https://aws.amazon.com/jp/step-functions/?step-functions.sort-by=item.additionalFields.postDateTime&step-functions.sort-order=desc">Step Functions</a></th></tr></thead><tbody><tr><td align="left"></td><td align="left"><img src="/images/20220111a/image.png" alt="MWAAフロー" width="1200" height="764" loading="lazy"></td><td align="left"><img src="/images/20220111a/stepfunction.png" alt="stepfunctionフロー" width="922" height="908" loading="lazy">  <br> <a href="https://aws.amazon.com/jp/blogs/news/new-aws-step-functions-workflow-studio-a-low-code-visual-tool-for-building-state-machines/">新機能 – AWS Step Functions ワークフロースタジオ – ステートマシンを構築するためのローコードのビジュアルツール - Amazon Web Services ブログ</a> 参照</td></tr><tr><td align="left">サービス概要</td><td align="left">OSS である <a href="https://airflow.apache.org/">Airflow</a> をマネージドサービスとして提供</td><td align="left">AWS 独自実装のビジュアルワークフローサービス</td></tr><tr><td align="left">一言で</td><td align="left">ワークフローにソースコードベース管理の概念を取入れアプリケーション化したサービス (※ Airflow について)</td><td align="left">各種 AWS サービスをパイプラインとして実行するサービス</td></tr><tr><td align="left">特徴</td><td align="left">・Pure Python ベースでワークフローを実装可能 <br> ・独自のブラウザベース UI を提供 <br> ・DAG(有向非巡回グラフ)ベースのワークフロー定義</td><td align="left">・Amazon States Language(JSON/YAML) ベースでワークフロー(=State Macine)を実装 <br> ・AWSコンソール上でドラッグ&amp;ドロップでワークフローを作成可能 (<a href="https://docs.aws.amazon.com/step-functions/latest/dg/workflow-studio.html">Workflow Studio</a>) <br> ・200を超える AWS サービスのサポート(<a href="https://aws.amazon.com/jp/about-aws/whats-new/2021/09/aws-step-functions-200-aws-sdk-integration/">参考</a> )</td></tr><tr><td align="left">コスト</td><td align="left"><a href="https://aws.amazon.com/jp/managed-workflows-for-apache-airflow/pricing/">料金 - Amazon Managed Workflows for Apache Airflow (MWAA)</a> <br><br> ・時間単位のインスタンス使用量課金 <br> ・ストレージ使用量課金 <br></td><td align="left"><a href="https://aws.amazon.com/jp/step-functions/pricing/">料金 - AWS Step Functions AWS</a> <br><br>・実行毎課金(状態遷移毎)</td></tr></tbody></table></div><h2 id="サービス比較"><a href="#サービス比較" class="headerlink" title="サービス比較"></a>サービス比較</h2><p>各サービス別に、Good/Challenge に分けて記載しています。</p><h3 id="Good"><a href="#Good" class="headerlink" title="Good"></a>Good</h3><h4 id="MWAA"><a href="#MWAA" class="headerlink" title="MWAA"></a>MWAA</h4><ul><li>Pythonで実現できることは基本すべて実装可能で、実装の制約が少ない</li><li>UI が充実しており、実行履歴、ログ、実行時間等の様々な情報を参照することが可能</li><li>UI 上でワークフローの任意の位置からリトライ可能</li><li>各種クラウドSDK/OSS API を呼び出しを簡易化するための provider がサードパーティ提供されている<ul><li><a href="https://airflow.apache.org/docs/apache-airflow-providers/packages-ref.html#">Providers packages reference — apache-airflow-providers Documentation</a></li><li>provider を pip でインストール後、各 provider に実装されている operator 関数を呼び出すことで実現可能</li></ul></li></ul><h4 id="Step-Functions"><a href="#Step-Functions" class="headerlink" title="Step Functions"></a>Step Functions</h4><ul><li>AWS サービスの呼び出しをローコード(パラメータ指定程度)で実現可能</li><li>Workflow Studio を利用した AWS コンソール上でのワークフロー組み上げが可能<ul><li>Amazon States Language を直接書くことなく定義することができる</li></ul></li><li>パラメータ指定(JSON形式)でワークフロー実行可能</li><li>AWS サービスの呼び出しごとにログが出力されており、各 SDK の呼び出し結果を確認可能</li></ul><h3 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h3><h4 id="MWAA-1"><a href="#MWAA-1" class="headerlink" title="MWAA"></a>MWAA</h4><ul><li>ソースコードベースであることから実装コストはある程度見込む必要あり<ul><li>初期構築等で、デフォルトで用意されていなければ、単純なクラウド SDK 呼び出しをするだけの処理を Python で都度実装が必要になる</li></ul></li><li>UI 上からパラメータ指定での実行がしづらい<ul><li>厳密には実行可能な方法があるが、UI 上でサポートされていない or ジョブの実行画面外に存在しており、運用しづらくなっている</li><li>(2022/01/07時点で <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/airflow-versions.html#airflow-versions-latest">MWAA 未サポート</a>) Aiflow version 2.1.0 以上でパラメータ指定(<code>Trigger Dag w/ config</code>)でワークフローを実行可能となっている</li><li>デフォルトで<a href="https://airflow.apache.org/docs/apache-airflow/stable/templates-ref.html#variables">実行時間等</a>はワークフローへ渡されるため、時間ベースでの実行の場合は特段困らない</li></ul></li><li>運用コスト面では、EC2等と同様に起動時間課金であり、基本は立ち上げたままで運用されることから、Step Functions よりコストは高くなる</li><li>ソースコードを実装するため単体テストを実装したいが、外部 API 呼び出し等が多くなる場合はモック化含めてコストは高くなる</li><li>VPC の構築が必須<ul><li>MWAA 向けのネットワーク要件が存在するため、VPC 構築時に合わせて確認しておく必要がある</li><li><a href="https://docs.aws.amazon.com/ja_jp/mwaa/latest/userguide/networking-about.html">Amazon MWAA でのネットワーキングについて - Amazon Managed Workflows for Apache Airflow</a></li></ul></li><li>マネージドサービスのため直接意識することは少ないが、Airflow の構成について学習するコストはかかる</li></ul><h4 id="Step-Functions-1"><a href="#Step-Functions-1" class="headerlink" title="Step Functions"></a>Step Functions</h4><ul><li>ワークフロー途中からの実行が未サポート<ul><li>初期構築等で失敗しながら動かしていく際に、毎回最初からになって効率が悪かった</li><li>運用上は、リトライ単位 = 1 State Macine の原則で構築すれば問題なし</li></ul></li><li>Workflow Studio で作成した定義を IaC 管理化に置きたい場合は、環境情報(本番、開発..)等の一部修正が必須<ul><li>「Workflow Studio で基本作成→JSONをダウンロード→IaC 管理下へ配置」の作成フロー</li></ul></li><li><a href="https://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/amazon-states-language-intrinsic-functions.html">組み込み関数</a>でできることがあまりないため、入力を少し加工をしたい等で Lambda の実装が必要</li><li>API の実行結果が非同期で成功する場合(インスタンス作成等)に、成功を待ち受けるためのループ処理を都度実装する必要がある<ul><li><a href="https://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/sample-project-job-poller.html">Job ステータスのポーリング (Lambda、AWS Batch) - AWS Step Functions</a></li></ul></li><li>各 State の入出力を扱うための、Input/Output/ResultPath,ResultSelector等の学習コストは低くはない<ul><li>同一のパラメータをワークフロー全体で引き回したいケースで実装に考慮が必要<ul><li>OutputPath を指定して、Input がすべて上書きされる問題に直面した</li></ul></li><li>最終的に、ResultSelector で残したいレスポンス情報を選定して、ResultPath で追加する形式を取ることが多かった</li><li>参考: <a href="https://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/concepts-input-output-filtering.html">Step Functions の入出力処理 - AWS Step Functions</a></li></ul></li></ul><h2 id="選定方針"><a href="#選定方針" class="headerlink" title="選定方針"></a>選定方針</h2><p>各ケースごとに細かい要件等があるかと思いますが、大まかな方針としては以下の通りと考えています。</p><ul><li>MWAA (Airflow)<ul><li>ワークフローの複雑度(※ 実行するタスクの量が指標) が高い</li><li>実行する 処理時間の長いタスクが複数連続している (リトライ観点)</li><li>単純な AWS SDK や API Call で処理が完結しない (※ 設計としてワークフローにロジックをもたせる可否は要検討)</li><li>初期構築にコストをかけることができる</li></ul></li><li>Step Functions<ul><li>複雑度が低くAWS の各種 SDK を呼び出すのみの単純なワークフロー</li><li>ワークフローの実行頻度が低い</li><li>手動でのパラメータ指定必須</li></ul></li></ul><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>Step Functions を本格的に利用したのは初めてだったので、同じワークフロー系サービスとして経験のあった Airflow との比較をしてみました。</p><p>実際に AWS 上でワークフローを構築しようとする際は、まずはこの2つのサービス比較から入ることが今後は多くなってくるのではと思いますので、参考になりましたら幸いです。</p><p>Airflow は 2.0 がリリースされて以降も、月1程度で継続的にリリースがされていてますので、引き続きウォッチしていていきたいと考えてます。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://airflow.apache.org/docs/apache-airflow/stable/index.html">Apache Airflow Documentation — Airflow Documentation</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/mwaa/latest/userguide/what-is-mwaa.html">Amazon Managed Workflows for Apache Airflow (MWAA) とは - Amazon Managed Workflows for Apache Airflow</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/welcome.html">AWS Step Functions とは - AWS Step Functions</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;Step-Functions-を利用して感じた-Airflow-との比較&quot;&gt;&lt;a href=&quot;#Step-Functions-を利用して感じた-Airflow-との比較&quot; class=&quot;headerlink&quot; title=&quot;Step Functions</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="技術選定" scheme="https://future-architect.github.io/tags/%E6%8A%80%E8%A1%93%E9%81%B8%E5%AE%9A/"/>
    
    <category term="Airflow" scheme="https://future-architect.github.io/tags/Airflow/"/>
    
    <category term="StepFunctions" scheme="https://future-architect.github.io/tags/StepFunctions/"/>
    
  </entry>
  
  <entry>
    <title>Future社員が使っているWindows便利ツール（新人さん向け）</title>
    <link href="https://future-architect.github.io/articles/20220107a/"/>
    <id>https://future-architect.github.io/articles/20220107a/</id>
    <published>2022-01-06T15:00:00.000Z</published>
    <updated>2022-01-10T11:00:51.095Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。2020年4月入社の青柳です。タイトルにある通り便利ツールをまとめてみました。</p><p>今回は、新入社員や入社前の大学生をターゲットに、誰でもすぐに使えるツールを紹介しているので、まだ使っていないツールがあればぜひ使ってみて下さい。<br>※前提としてwindowsの方向けなので、Macの方はごめんなさい🙇🏼</p><h1 id="everything"><a href="#everything" class="headerlink" title="everything"></a>everything</h1><img src="/images/20220107a/everything.gif" alt="everything" width="1160" height="428" loading="lazy"><p><a href="https://forest.watch.impress.co.jp/library/software/everything/">https://forest.watch.impress.co.jp/library/software/everything/</a></p><p>ファイルやフォルダを超高速で検索できるツール。</p><p>あのファイルどこにあったっけ？？の問題が一瞬で解消できます。私も初めて使った際は、検索のスピードの早さに驚きました。</p><p>しかも設定すればファイルサーバーの中も検索できます。</p><p>もはや必須ツールですね。</p><h1 id="cribor"><a href="#cribor" class="headerlink" title="cribor"></a>cribor</h1><img src="/images/20220107a/cribor1.gif" alt="cribor1" width="1200" height="372" loading="lazy"><p><a href="https://forest.watch.impress.co.jp/library/software/clibor/">https://forest.watch.impress.co.jp/library/software/clibor/</a></p><p>簡単にコピーと貼り付けができるツール。</p><p>クリップボードの履歴を呼び出して、以前にコピーした文章も貼り付けれる。定型文も登録できる。</p><p>いたってシンプルな機能ですが、一度使うとすぐに便利さがわかると思います。</p><h1 id="Tablacus-Explorer"><a href="#Tablacus-Explorer" class="headerlink" title="Tablacus Explorer"></a>Tablacus Explorer</h1><img src="/images/20220107a/TablacusExplorer.gif" alt="TablacusExplorer.gif" width="862" height="451" loading="lazy"><p><a href="https://tablacus.github.io/explorer.html">https://tablacus.github.io/explorer.html</a></p><p>ついついたくさん開きがちなエクスプローラをタブで管理可能。</p><p>似たようなツールで「QTTabBar」もあるが、個人的にはこちらがおすすめ。アドイン機能も充実しているので、好きなようにカスタマイズもできます。</p><h1 id="orchis-launcher"><a href="#orchis-launcher" class="headerlink" title="orchis launcher"></a>orchis launcher</h1><img src="/images/20220107a/orchislauncher.gif" alt="orchislauncher.gif" width="768" height="348" loading="lazy"><p><a href="https://forest.watch.impress.co.jp/library/software/orchis/">https://forest.watch.impress.co.jp/library/software/orchis/</a></p><p>ポップアップメニューでよく使うファイルやフォルダを、素早く簡単に起動。</p><p>私の先輩も使っていますが、これを使いこなしてるだけで仕事できる感が半端ない。</p><p>みなさんもカッコよく使いこなして！</p><h1 id="OneNote"><a href="#OneNote" class="headerlink" title="OneNote"></a>OneNote</h1><img src="/images/20220107a/ScreenToGif_2.gif" alt="ScreenToGif.gif" width="1200" height="604" loading="lazy"><p><a href="https://www.microsoft.com/ja-jp/microsoft-365/onenote/digital-note-taking-app">https://www.microsoft.com/ja-jp/microsoft-365/onenote/digital-note-taking-app</a></p><p>メモとして使えたりキャプチャを張り付けたりと、画面に情報を効率よく集約。</p><p>他のテキストツールだと、画像の貼付やイラストの挿入とかができないですが、OneNoteだと自由自在。</p><p>まさにノートのような使い方ができて非常に便利です。</p><h1 id="ScreenToGif"><a href="#ScreenToGif" class="headerlink" title="ScreenToGif"></a>ScreenToGif</h1><img src="/images/20220107a/ScreenToGif.gif" alt="ScreenToGif.gif" width="469" height="72" loading="lazy"><p><a href="https://www.screentogif.com/">https://www.screentogif.com/</a></p><p>簡単な動画ならこちらのツールで簡単に作成可能。この記事にあるGif動画もこのツールで撮影しました。</p><p>自分のパソコンの動きをそのまま記録できるので、手順を他の人に共有する時とか便利そう。</p><p>工夫次第で使い道はいくらでもありそうなので、一度使ってみて欲しいです。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>テレワークだと先輩社員の仕事を直接見れず、どんなツールを使っているのか知る機会が少ないですよね。</p><p>そこで、便利ツールの一覧とかあったら嬉しいかなという気持ちで書きました。</p><p>参考にしていただければ幸いです。</p><p>上記以外にも色々なツールを紹介して頂きましたが、今回は誰でもすぐに使えそうなものを厳選しました。</p><p>より開発向けのツールについては、どなたか続編をお願いします🙇🏼</p><p>以上、お読みいただきありがとうございました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="環境構築" scheme="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/"/>
    
    <category term="便利ツール" scheme="https://future-architect.github.io/tags/%E4%BE%BF%E5%88%A9%E3%83%84%E3%83%BC%E3%83%AB/"/>
    
    <category term="新入社員" scheme="https://future-architect.github.io/tags/%E6%96%B0%E5%85%A5%E7%A4%BE%E5%93%A1/"/>
    
  </entry>
  
  <entry>
    <title>アジャイル開発を2年弱実践した開発者目線で語るアジャイルソフトウェア開発</title>
    <link href="https://future-architect.github.io/articles/20220106a/"/>
    <id>https://future-architect.github.io/articles/20220106a/</id>
    <published>2022-01-05T15:00:00.000Z</published>
    <updated>2022-01-06T01:20:02.518Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220106a/concept-gbe000bf93_640.jpg" alt="" width="640" height="426"><h1 id="自己紹介"><a href="#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h1><p>2018年4月新卒入社、TIG所属の関です。</p><p>現在、私は大手メーカ様の社内システムを対象に、アジャイル開発を行っています。<br>基本的には、プロダクトの全体設計に加えてコアや複雑な部分を担当する開発者として参画していますが、改善提案やPOの補佐的な役回りをすることもある立ち位置です。</p><p>このプロジェクトには2年弱入っていますが、開発したシステムは利用ユーザも増え、さらなる拡大を狙う企画も出てきているため、このプロジェクトとしては成功しており、ありがたいことに複数の別プロダクトも担当してもらいたいとの声もいただきました。<br>2年程度の期間、継続してそれなりの成功を収めることができているため、アジャイル開発をテーマに記事を書くことにしました。</p><p>この記事では、アジャイル(ソフトウェア)開発とはそもそも何なのか？どのような時に採用すべきものなのか？といったことについて述べたいと思います。</p><p>今後も不定期にアジャイルについての記事を出していきたいなと考えており、今回はその第一弾です。</p><p>また、当社では私以外にもアジャイル開発に取り組んでいるメンバーもおり、そこで得た知見は<a href="https://future-architect.github.io/articles/20211117a/">JFPUGオープンセミナー2021 DX時代のプロジェクトのあり方で登壇しました</a>などの”<a href="https://future-architect.github.io/tags/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB/">アジャイル</a>“タグのついた過去記事で取り上げられております。アジャイルはチームを単位として機能し、各々のチームが置かれた状況によってアプローチも変わってくるため、見比べてみても面白いかもしれません。</p><h1 id="アジャイルが注目されているのはなぜか？"><a href="#アジャイルが注目されているのはなぜか？" class="headerlink" title="アジャイルが注目されているのはなぜか？"></a>アジャイルが注目されているのはなぜか？</h1><p>実際の定義に入る前に、なぜ注目されているのかを軽く触れておきましょう。</p><p>“アジャイル”という言葉が注目されるようになって、しばらくの期間が経っているように思います。<br>実際、アジャイル経営、アジャイル組織、アジャイル型製品開発、etc.ソフトウェア開発以外にも様々な文脈で”アジャイル”が取り上げられることも増えているようです。<br>なぜ、”アジャイル”が注目されているのでしょうか？<br>昨今のビジネス環境は急激に変化しており、それに対する変化対応力が大きく問われています。<br>この変化対応力に大きな価値を置くのが、”アジャイル”になります。<br>その起源はアジャイルソフトウェア開発で、そこから輸入される形で様々な分野で取り入れられるようになっています。</p><h1 id="アジャイルソフトウェア開発とは？"><a href="#アジャイルソフトウェア開発とは？" class="headerlink" title="アジャイルソフトウェア開発とは？"></a>アジャイルソフトウェア開発とは？</h1><p>アジャイルソフトウェア開発宣言にで示された価値観に基づき実践されるソフトウェア開発のことです。具体的には、「下記の4つに価値を置く」という価値観です。</p><ul><li>個人と対話</li><li>動くソフトウェア</li><li>顧客との協調</li><li>変化への対応</li></ul><p>具体的な開発プロセスや手法ではなく、あくまでこれらの価値観に基づくものであるというのが重要です。<br>また、これらの価値観にはそれを支える12の原理・原則が存在します。</p><p>これらの価値観は、<a href="http://agilemanifesto.org/iso/ja/manifesto.html">アジャイルソフトウェア開発宣言</a>（ないしアジャイルマニフェスト）として、原理・原則は<a href="http://agilemanifesto.org/iso/ja/principles.html">アジャイル宣言の背後にある原則</a>としてまとめられており、日本語を含む各国語に翻訳されています。原理主義的ではありますが、<a href="http://agilemanifesto.org/iso/ja/manifesto.html">アジャイルソフトウェア開発宣言</a>がアジャイル開発の起源、原典、聖書であるため、この記事を読み進める前にリンクに飛んで目を通していただけると良いと思います。</p><h1 id="アジャイルソフトウェア開発宣言はどのような経緯で生まれたのか？"><a href="#アジャイルソフトウェア開発宣言はどのような経緯で生まれたのか？" class="headerlink" title="アジャイルソフトウェア開発宣言はどのような経緯で生まれたのか？"></a>アジャイルソフトウェア開発宣言はどのような経緯で生まれたのか？</h1><p>アジャイルソフトウェア開発宣言が生まれた会議の発起人の一人であり、誕生の瞬間の立会人でもあるRobert C.Martinが著した書籍: CleanAgileによると、概ね下記の経緯で生まれたようです。</p><ul><li>1970年代前半から30年にわたり、ソフトウェア開発プロセスはウォータフォールが主流であった。</li><li>ウォータフォールは、コマンド&amp;コントロールを基礎とするトップダウンな科学的な管理法である。</li><li>科学的管理法が適するのは、「変更コストは高くてもよい代わりに、目標が具体的であり、明確に定義された問題」である。</li><li>しかし、ソフトウェア開発はそうではなく、(少なくとも著者の周りでは)うまくいってなかった。</li><li>ケントベックのエクストリームプログラミング等に刺激を受けた筆者を含む2名が「軽量級プロセスのサミット」を開催。</li><li>その会議にて、宣言に記載された価値が特定された。</li></ul><p>アジャイルソフトウェア開発宣言は「事前に詳細な分析を行い計画を立て、それをもとに入念な設計を行い、それに基づき実装する」というウォーターフォールに対するアンチテーゼとして生まれました。</p><h1 id="アジャイル開発を成功させるには？"><a href="#アジャイル開発を成功させるには？" class="headerlink" title="アジャイル開発を成功させるには？"></a>アジャイル開発を成功させるには？</h1><p>アジャイル開発を成功させるあたって、考えるべき問題が2つあります。</p><ul><li>そもそもアジャイル開発を採用すべきか？</li><li>どうやってアジャイルの価値を具現化するのか？</li></ul><p>この記事では、「そもそもアジャイルを採用すべきか？」をどう判断するかをメインに書きたいと思います。</p><h2 id="そもそもアジャイルを採用すべきか、どう判断したら良い？"><a href="#そもそもアジャイルを採用すべきか、どう判断したら良い？" class="headerlink" title="そもそもアジャイルを採用すべきか、どう判断したら良い？"></a>そもそもアジャイルを採用すべきか、どう判断したら良い？</h2><p>先ほど見たように、アジャイルは具体的な手法に基づくものではなく、アジャイルソフトウェア開発宣言で述べられた価値観に基づき行う開発です。<br>まずは、今やろうとしている事に対して、アジャイルの価値観がマッチするかをよく考えましょう。</p><p>価値観と対極にあるものが求められているのであれば、ほぼ確実に失敗するでしょう。それでもアジャイルで進めるというのであれば、まずはプロジェクトの責任者、開発者が価値観を理解し、責任者はステークホルダからの理解を得る必要があります。<br>より具体的には、下記が求められるのであれば、まずはその要求自体を排除する必要があります。</p><ul><li>開発者の要求の具体例<ul><li>言われたことだけ、決まったことだけやりたい。</li><li>自分の責任で何かを決めたくない、考えたくない、その責任も負いたくない。</li><li>ビジネス的にどのように役に立つのか興味がないから技術のことだけ考えたい。</li></ul></li><li>プロジェクトの責任者やステークホルダの要求の具体例<ul><li>計画やスケジュールは既に固定されたものなので、その遵守を必須とする。</li><li>目的が忘れ去られた不要にリードタイムの長いプロセスがあり、その遵守が必須（無駄に煩雑な承認フロー、意思決定や合意プロセスなど）とする。</li><li>機能スコープとスケジュールの両方は事前に決めて、削除や変更をしたくない。（が、追加はしたい）</li><li>最初から完璧なものができないと満足できない。</li></ul></li></ul><p>特に、最後に記載した「機能スコープとスケジュールが変更できない」という要求はアジャイルの「変化への対応」という価値観と決して相入れません。この要求を満たすことが必須の場合は、そもそもの出発点から求めていない事になるので、無理して採用すべきではないと言えます。</p><p>人間誰しも、自身が本当に望むものはわかっていないものです。明言されていないからといって要求がないわけではない、ということも認識しておいた方が良いでしょう。組織的な構造やプロセスが問題で要求が避けられない場合もあります。</p><p>例えば、直接のステークホルダにさらにステークホルダ（以降、”間接のステークホルダ”と記載）がいる場合を考えてみましょう。間接のステークホルダが、「機能スコープとスケジュールの厳格な遵守」を強く求めており、力関係が「直接のステークホルダ &lt; 間接のステークホルダ」になっていると、「機能スコープとスケジュールの厳格な遵守」は避けられなくなります。このような場合、間接のステークホルダから理解を得られないといずれうまくいかなくなります。</p><p>また、誰しも魅力的で都合の良い部分ばかり目に入り、不都合なことは顕在化するまで気づかないものです。アジャイルの採用を検討している段階であるなら、「実は、アジャイルマニフェストの左側の価値観(計画に従う事など)の方が求められているのではないか？」は必ず疑ってみましょう。「流行っているからやってみたい」みたいな理由で安易に採用すると、組織構造などの気付いていなかった思わぬ制約に阻まれて痛い目を見るでしょう。</p><p>「よく考えたら実は不要だった」ということも往々にしてあるものです。いずれの場合でも、本当はどうなのかをよく考えて判断する必要があります。<br>例えば、「最初から完璧なものができないと満足できない。」という要求については、多くの場合は排除して良いのではないでしょうか？「システムを導入しその恩恵を受ける」ことが目的であるなら、恩恵を受けられるようになった段階で多少の不便には目を瞑り、利用を開始することで恩恵を受け、それ以後改善と拡張を行う進め方でも問題ないはずです。</p><p>逆に、価値観にマッチするような状況であるならば、大きな価値を発揮してくれるでしょう。<br>これらを踏まえた上で、まずは責任者、開発者、ステークホルダの間でアジャイルの価値観を共有しましょう。プロジェクトを進めるための土台となります。</p><h2 id="どうやってアジャイルの価値を具現化するのか？"><a href="#どうやってアジャイルの価値を具現化するのか？" class="headerlink" title="どうやってアジャイルの価値を具現化するのか？"></a>どうやってアジャイルの価値を具現化するのか？</h2><p>ここまで、””価値観””という少し曖昧なものをメインで見てきましたが、どのように実践し価値を受け取るにはどうすれば良いでしょうか？<br>まずは、<a href="http://agilemanifesto.org/iso/ja/principles.html">アジャイル宣言の背後にある原則</a>を念頭に置き、可能な限り実践すると良いでしょう。<br>また、アジャイルソフトウェア開発は、典型的なプロジェクトの進め方、プラクティス、フレームワークが先人たちによって提唱されており、多くのプロジェクトはこれらのどれかを基礎として進めることが多いです。</p><p>しかしながら、大切なのはこれらの遵守ではなく価値観に基づき、価値を体現することです。宣言の「プロセスやツールより個人と対話」という文言にあるように、「採用したプロセスを遵守していれば良い」という類のものではないことは肝に銘じなければなりません。</p><p>これらの典型的な進め方について、踏み込んだ内容は次回以降でお送りしたいと思います。</p><h1 id="2年弱アジャイル開発を実践して得た所感"><a href="#2年弱アジャイル開発を実践して得た所感" class="headerlink" title="2年弱アジャイル開発を実践して得た所感"></a>2年弱アジャイル開発を実践して得た所感</h1><p>ソフトウェアやシステム開発を自身で行うと痛感しますが、事前にわからないことは思った以上に多いです。次のような経験をしている方も多いのではないでしょうか？</p><ul><li>ちょっとした拡張がしたいが、利用しているライブラリに期待する機能がないから自作する必要が出た。</li><li>（特にUIで）微調整に想像以上に時間がかかる。</li><li>前提として与えられた情報の誤りが判明、修正を余儀なくされる。</li><li>前任の書いたコードが酷く、変更に一々時間がかかるから改善してから取り組みたい。</li></ul><p>一方で、次のような絶対に抑えなければならない項目もあります。</p><ul><li>全体アーキテクチャ</li><li>データモデル</li></ul><p>アジャイルは、事前に入念な計画を練るのではなく、必要な時に必要な分だけ行って、実際の進行具合を見て柔軟に計画を変更することで、継続的に現実の複雑さ、変化、問題に対処し、”その時点での最大価値”を目指す考え方です。”必要な時に必要な分だけ”というのがキーワードですが、単に詰んでいるのを”必要になった!”と誤認している方もいるようです。簡単なように見えて実は難しく、意外にも準備はとても重要です。</p><p>お客様を含む周囲に恵まれたことに加えて、現実に即した考え方を好み、単純に開発が好きという自身の特性が上手く噛み合ったことで、2年弱の間、開発したシステムの価値が向上していったのではないかなと考えています。</p><p>次回以降は、自身の経験を踏まえた、アジャイルソフトウェア開発の全体の流れや、どんな人や環境がマッチするのか、”こんな時にはこう対処する!”といったもう少し踏み込んだエピソード、よくある誤解などについても記載していきたいと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220106a/concept-gbe000bf93_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;426&quot;&gt;

&lt;h1 id=&quot;自己紹介&quot;&gt;&lt;a href=&quot;#自己紹介&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="アジャイル" scheme="https://future-architect.github.io/tags/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB/"/>
    
  </entry>
  
  <entry>
    <title>FlutterをElectronと組み合わせる</title>
    <link href="https://future-architect.github.io/articles/20211228a/"/>
    <id>https://future-architect.github.io/articles/20211228a/</id>
    <published>2021-12-27T15:00:00.000Z</published>
    <updated>2021-12-28T01:55:04.832Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p>最近はFlutterの研究を進めており、一人Flutter連載のような動きをしています。</p><h1 id="FlutterをElectronと組み合わせる"><a href="#FlutterをElectronと組み合わせる" class="headerlink" title="FlutterをElectronと組み合わせる"></a>FlutterをElectronと組み合わせる</h1><ul><li><a href="/articles/20211221a/">入門記事</a>: Flutterであればデスクトップアプリケーションを構築することができることを説明しました</li><li><a href="/articles/20210107/">Electronの入門記事</a>: これも私が書きましたが、Electronもクロスプラットフォームのデスクトップアプリケーションを開発できるライブラリです</li></ul><p>ElectronはHTML、Javascriptをアセットとして利用してデスクトップアプリケーションとして動かすことができます、結論としてはFlutterアプリケーションをWEB向けにビルドして、その成果物をElectronアプリケーションとしてビルドすることができました。</p><p>なぜそのような事を行うかというポイントですが2点あります。</p><ul><li>Flutter on Desktop未対応の機能を使いたい</li><li>Electron向けの資産を活かしたい</li></ul><h3 id="Flutter-on-Desktop未対応の機能を使いたい"><a href="#Flutter-on-Desktop未対応の機能を使いたい" class="headerlink" title="Flutter on Desktop未対応の機能を使いたい"></a>Flutter on Desktop未対応の機能を使いたい</h3><p>Flutter on Desktopはまだまだリリースから間もないため、安心して利用できるか見極めながら開発していく必要があります。<br>またFlutter向けパッケージのいくつかはFlutter on Desktopに対応していないものもあります。</p><p>例えば<a href="/articles/20211224a/">先日の記事</a>で技術検証した<a href="https://pub.dev/packages/google_maps_flutter">google_maps_flutter</a>を利用したアプリケーションをデスクトップ向けにビルドすると、執筆時点ではアラートが表示され正常に動作しません。</p><img src="/images/20211228a/image.png" alt="ビルドエラー" width="1200" height="937" loading="lazy"><p>同じソースコードをWEB向けにビルドし、Electronに組み込むと問題なく動作します。</p><img src="/images/20211228a/image_2.png" alt="ElectronでMap表示" width="1200" height="949" loading="lazy"><p>Flutter on Desktopのエコシステムが充実するまでの繋ぎとしてこのような手法をとることができます。</p><h3 id="Electron向けの資産を活かしたい"><a href="#Electron向けの資産を活かしたい" class="headerlink" title="Electron向けの資産を活かしたい"></a>Electron向けの資産を活かしたい</h3><p>ビジネス要件的にどうしても必要な、Electronに向け最適化されたJavaScript、TypeScript製モジュールがありました。これらの資産をDart向けに作り直す必要をなくす、という意味でFlutter on Electronという組み合わせが実現できないかな、という検証を行ったという背景もあります。</p><p>あまり頼りすぎるとFlutter on Desktopに本格移行する難易度が跳ね上がりますが、この組み合わせであれば既存の資産や豊富なnpmモジュールを活用することができます。</p><h1 id="Flutter-on-Desktopのおさらい"><a href="#Flutter-on-Desktopのおさらい" class="headerlink" title="Flutter on Desktopのおさらい"></a>Flutter on Desktopのおさらい</h1><p>Flutterアプリケーションをデスクトップアプリケーションとして動かすことはとても簡単にできます。</p><p>起動時、ビルド時のターゲットを指定するだけです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flutter create myapp</span><br><span class="line"><span class="built_in">cd</span> myapp</span><br><span class="line">flutter run -d macos</span><br></pre></td></tr></table></figure><img src="/images/20211228a/image_3.png" alt="Flutter on Desktopおさらい" width="1200" height="933" loading="lazy"><p>設定でデスクトップ向けのビルドが有効化されていない場合は<code>config</code>コマンドで有効化します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter config --enable-macos-desktop</span><br></pre></td></tr></table></figure><p>既存のプロジェクトで有効化する場合は<code>config</code>で有効化した後にカレントディレクトリで<code>create</code>コマンドを実行すると、対象のプラットフォーム向けの設定ファイルが用意されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create .</span><br></pre></td></tr></table></figure><p>この辺りの手軽さはやはり素晴らしいと感じますね。</p><h1 id="FlutterアプリケーションをElectronと組み合わせる"><a href="#FlutterアプリケーションをElectronと組み合わせる" class="headerlink" title="FlutterアプリケーションをElectronと組み合わせる"></a>FlutterアプリケーションをElectronと組み合わせる</h1><p>さて本題です。</p><p>やる事自体はFlutterアプリケーションは素直にFlutter on the WEBとして開発し、ビルド成果物を組み込むElectronライブラリを用意する形です。作成したmyappフォルダと同じ階層にElectron部分を用意するフォルダを作成します、名前は<code>nodejs</code>フォルダにしておきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">project</span><br><span class="line">  ├ myapp</span><br><span class="line">  └ nodejs</span><br></pre></td></tr></table></figure><p><code>nodejs</code>フォルダで諸々準備をするとElectronアプリケーションが利用できるようになります。</p><ul><li>依存モジュールのインストール</li><li>package.jsonの編集</li><li>必要なファイルの配置</li></ul><h3 id="依存モジュールのインストール"><a href="#依存モジュールのインストール" class="headerlink" title="依存モジュールのインストール"></a>依存モジュールのインストール</h3><p><code>nodejs</code>フォルダで<code>npm init</code>コマンドを実行し、Electronを導入します。<a href="https://www.electron.build/">electron-builder</a>が「Yarn is strongly recommended instead on npm」と強く訴えているので、Yarnを使って依存モジュールを導入します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nodejs</span><br><span class="line">npm init -y</span><br><span class="line">yarn</span><br><span class="line">yarn add electron --dev</span><br><span class="line">yarn add electron-builder --dev</span><br></pre></td></tr></table></figure><h3 id="package-jsonの編集"><a href="#package-jsonの編集" class="headerlink" title="package.jsonの編集"></a>package.jsonの編集</h3><p>インストールが完了したら必要なファイルやコマンドを整備します。まずは<code>package.json</code>に下記の内容を追加します。</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;main&quot;</span>: <span class="string">&quot;src/background.js&quot;</span>,</span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;cd ../myapp flutter run&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;electron:start&quot;</span>: <span class="string">&quot;bash ../build.sh &amp;&amp; electron src/background.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;electron:build&quot;</span>: <span class="string">&quot;bash ../build.sh &amp;&amp; electron-builder&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>start</code>コマンドはピュアにFlutterアプリとして動かしたい場合にいちいちフォルダを移動するのが面倒なのでオマケのようなノリで追加しています。</p><h3 id="必要なファイルの配置"><a href="#必要なファイルの配置" class="headerlink" title="必要なファイルの配置"></a>必要なファイルの配置</h3><p>追加したコマンドはElectronアプリケーションを起動、またはビルドする前にFlutterのビルドコマンドを記載したシェルを叩く、という仕組みにしています。</p><p><code>build.sh</code>は下記のような内容です。</p><figure class="highlight sh"><figcaption><span>build.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># flutterアプリをビルド</span></span><br><span class="line"><span class="built_in">cd</span> ../mymap</span><br><span class="line">flutter build web</span><br><span class="line"><span class="comment"># ビルド成果物をコピー</span></span><br><span class="line">cp -r ./build/web/ ../nodejs/src/</span><br><span class="line"><span class="comment"># electronで動かすためhtmlの内容を修正</span></span><br><span class="line">sed -i -e <span class="string">&#x27;s/base href=\&quot;\/\&quot;/base href=\&quot;\&quot;/&#x27;</span> ../nodejs/src/index.html</span><br></pre></td></tr></table></figure><p>Flutter on the Webには<code>index.html</code>に記載された<code>base</code>タグを参照してJavascriptのモジュールが動く仕組みになっています。</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  If you are serving your web app in a path other than the root, change the</span></span><br><span class="line"><span class="comment">  href value below to reflect the base path you are serving from.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  The path provided below has to start and end with a slash &quot;/&quot; in order for</span></span><br><span class="line"><span class="comment">  it to work correctly.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  For more details:</span></span><br><span class="line"><span class="comment">  * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  This is a placeholder for base href that will be replaced by the value of</span></span><br><span class="line"><span class="comment">  the `--base-href` argument provided to `flutter build`.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;$FLUTTER_BASE_HREF&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>このbaseタグはビルド時のオプションで変更できます。<br>Webアプリとしてビルドする時に、デプロイする先のドメインを柔軟に変更できるためのオプションです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter build web --base-href <span class="string">&quot;/myapp/&quot;</span></span><br></pre></td></tr></table></figure><p>デフォルト値は<code>/</code>になっています。Electronで利用する場合、<code>base</code>タグの値は空文字が都合が良いのですが、オプションで空文字を指定するとエラーが起きてしまいます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ flutter build web --base-href <span class="string">&quot;&quot;</span></span><br><span class="line">base-href should start and end with /</span><br></pre></td></tr></table></figure><p>仕方がないので一旦オプション無しでビルドして、sedコマンドで編集しています。</p><p><code>index.html</code>のテンプレートを変更してしまっても良いですが、Flutter側の変更は控えることでElectronとFlutterの関係性をなるべく疎結合なものに保ちたい意図があります。ともかくこれだけの変更でFlutter on the WEB向けにビルドしたファイルがElectronのアセットファイルとして利用できます。</p><p>あとは<code>package.json</code>に追加したコマンドで指定している場所(nodejs/src)に<code>background.js</code>を配置しておきます。中身はよくあるElectron向けの起動スクリプトです。個人的にはVue.js向けのElectronプラグインが生成してくれるファイルが一番気が利いていると感じているのですが、MacOSでのエッジケース向けの挙動などはそこから拝借しています。</p><figure class="highlight js"><figcaption><span>background.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = electron.app;</span><br><span class="line"><span class="keyword">const</span> BrowserWindow = electron.BrowserWindow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isDevelopment = process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Keep a global reference of the window object, if you don&#x27;t, the window will</span></span><br><span class="line"><span class="comment">// be closed automatically when the JavaScript object is garbage collected.</span></span><br><span class="line"><span class="keyword">let</span> win</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Create the browser window.</span></span><br><span class="line">  win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    <span class="attr">autoHideMenuBar</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">useContentSize</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="number">1280</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="attr">nodeIntegration</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">contextIsolation</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  win.loadURL(<span class="string">&#x27;file://&#x27;</span> + __dirname + <span class="string">&#x27;/index.html&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quit when all windows are closed.</span></span><br><span class="line">app.on(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  app.quit()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">&#x27;activate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// On macOS it&#x27;s common to re-create a window in the app when the</span></span><br><span class="line">  <span class="comment">// dock icon is clicked and there are no other windows open.</span></span><br><span class="line">  <span class="keyword">if</span> (BrowserWindow.getAllWindows().length === <span class="number">0</span>) createWindow()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// This method will be called when Electron has finished</span></span><br><span class="line"><span class="comment">// initialization and is ready to create browser windows.</span></span><br><span class="line"><span class="comment">// Some APIs can only be used after this event occurs.</span></span><br><span class="line">app.on(<span class="string">&#x27;ready&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  createWindow()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exit cleanly on request from parent process in development mode.</span></span><br><span class="line"><span class="keyword">if</span> (isDevelopment) &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.platform === <span class="string">&#x27;win32&#x27;</span>) &#123;</span><br><span class="line">    process.on(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (data === <span class="string">&#x27;graceful-exit&#x27;</span>) &#123;</span><br><span class="line">        app.quit()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    process.on(<span class="string">&#x27;SIGTERM&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      app.quit()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>パスはElectronをVue.jsと組み合わせた場合一般的にここになる、という意図でsrcに配置しています、名前が<code>main.js</code>になっても<code>package.json</code>に記載した内容と齟齬がなければ問題なく動きます。</p><p>Flutter on the Web向けのファイルをビルドすると<code>main.dart.js</code>というファイルが生成されますが、今後アップデートによる挙動の変化があってもFlutter側の成果物と名称がぶつからない名前にしておくと良いでしょう。<code>background.js</code>という名称もVue.js向けプラグインが生成するファイルに倣っています。</p><p>上記の準備を終えるとElectronアプリケーションとしてFlutterのデモアプリが動きます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nodejs</span><br><span class="line">yarn electron:start</span><br></pre></td></tr></table></figure><img src="/images/20211228a/image_4.png" alt="Flutter on Electron" width="1200" height="769" loading="lazy"><p>Flutter on Desktopとして起動したものと比較すると、微妙にフォントが変わるなどの違いが発生しますが、どちらも快適に動作します(右がFlutter on Desktopです)。ウィンドウのリサイズ時の挙動などはFlutter on Desktopの方がスムーズです、この辺りは仕組み上仕方がないかな、といった印象です。</p><img src="/images/20211228a/image_5.png" alt="Flutter on Desktopとの表示の違い" width="1200" height="465" loading="lazy"><p>今回の仕組みではFlutterアプリケーション自体は素直にFlutterアプリケーションとして開発できているので、Flutter on Desktopでも問題なければフットワーク軽めに移行できます。</p><p>デスクトップ対応は魅力的だけど、欲しい機能がまだ動かなかったので見送る、というパターンの時の選択肢としてはオススメできるかなと思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>Flutter on Desktop未対応のパッケージはまだ存在する</li><li>Flutter on the WEBとElectronの組み合わせは簡単に実現できる</li></ul><p>なかなかトリッキーな試みでブログ記事にするか迷いましたが、面白いという意見をいただけたのと意外と需要があるかも…?ということで記事にしてみました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;最近はFlutterの研究を進めており、一人Flutter連載のような動きをしています。&lt;/p&gt;
&lt;h1 id=&quot;FlutterをElectronと組み合わせる&quot;&gt;&lt;a href=&quot;#FlutterをElectronと組み合わせる&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="Dart" scheme="https://future-architect.github.io/tags/Dart/"/>
    
    <category term="Electron" scheme="https://future-architect.github.io/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>科目等履修生はいいぞ</title>
    <link href="https://future-architect.github.io/articles/20211227a/"/>
    <id>https://future-architect.github.io/articles/20211227a/</id>
    <published>2021-12-26T15:00:00.000Z</published>
    <updated>2021-12-27T01:55:12.369Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20211227a/education-g3f9d86844_640.jpg" alt="" width="640" height="404"><p>TIG DXユニット所属の中川旭です。</p><p>昔から興味がありCS(Computer Science)に触れてはきましたが、大学では非CSの学部に行ったため体系的な知識を持っているのか不安を持ちながら過ごしてきました。<br>働き始めてお金に余裕が生まれたこと、そして優秀なメンバーに囲まれ学習意欲が湧いてきたことからふと私は思い立ちました。</p><p><strong>よし！大学院行くぞ！</strong></p><p>でも、社会人コースであったとしてもいきなり修士課程に入学するのはハードルが高い。<br>入学を決める前に、社会人学生になるとどのような生活をすることになるか知っておきたい。<br>そんな私が見つけたのが「科目等履修生制度」でした。</p><h2 id="科目等履修生とは"><a href="#科目等履修生とは" class="headerlink" title="科目等履修生とは"></a>科目等履修生とは</h2><p>科目等履修生とは、「正規生でない、大学や大学院の科目を履修する者」のことです。<br>日本の大学/大学院の多くが科目等履修生制度を採用しています。<br><a href="https://www.niad.ac.jp/n_gakui/application/kamokutou/">大学改革支援・学位授与機構のページ</a> に一覧があるので、気になる大学を調べてみましょう。</p><h2 id="科目等履修生の特徴"><a href="#科目等履修生の特徴" class="headerlink" title="科目等履修生の特徴"></a>科目等履修生の特徴</h2><p>科目等履修生には、以下のような特徴があります。</p><ul><li>一つの科目から履修が可能である</li><li>履修した科目の単位を正式に認定される</li><li>授業料は履修する単位数の分だけ支払う（そのほか、検定料や入学料がかかります）</li></ul><p>このため、「この分野について学んでみたいけど、まだ知らないから入学は決意できない」という方や「この先生の講義を受けてみたい！」という方に最適な制度です。</p><p>そしてなんと、単位が正式に認定されるため、もし大学や大学院に入学する場合に取得済みの単位として認められる場合があります。※事前によく調べましょう。</p><h3 id="ちなみに料金"><a href="#ちなみに料金" class="headerlink" title="ちなみに料金"></a>ちなみに料金</h3><p>大学によって異なるかと思いますが、私が科目を履修しているJAIST東京社会人コースでは以下のようになっています。<br>在学期間満了日から2年以内であれば授業料のみでまた履修が可能で、検定料と入学料を再度支払う必要はありません。</p><p><a href="https://www.jaist.ac.jp/education/non-degree/">https://www.jaist.ac.jp/education/non-degree/</a></p><ul><li>検定料 9800円</li><li>入学料 28,200円</li><li>授業料 14,800円 / 1単位</li></ul><p>※各大学の最新の情報を参照してください。</p><h3 id="社会人向けの情報系コースがある大学院"><a href="#社会人向けの情報系コースがある大学院" class="headerlink" title="社会人向けの情報系コースがある大学院"></a>社会人向けの情報系コースがある大学院</h3><p>こちらのブログを読んでいる人はIT業界の方が多そう、ということで情報系のコースで社会人が勤務しながらでも通いやすいように配慮されている大学院について書いておきます。私が調べた範囲なので網羅できているわけではありません。</p><ul><li><a href="https://www.jaist.ac.jp/satellite/sate/">北陸先端科学技術大学院大学(JAIST) 東京社会人コース</a><br><a href="https://www.jaist.ac.jp/education/non-degree/">科目等履修生制度のページ</a><br>「東京社会人コース」とある通り、社会人向けのコースが存在します。講義は基本的に土日に行われるため、スケジュールの調整がしやすいことが特徴です。<br>私もJAISTの東京サテライトの講義を受講しています。</li><li><a href="https://aiit.ac.jp/">東京都立産業技術大学院大学(AIIT)</a><br><a href="https://aiit.ac.jp/admission/credited_student/">AIIT単位バンク制度(科目等履修生制度)のページ</a><br>社会人学生が約8割を占める、社会人が通いやすい大学院です。<br>講義の多くが土日と平日夜間に行われており、平日日中に仕事をしながらでも受講しやすくなっています。</li></ul><h2 id="科目等履修生をやってよかったこと"><a href="#科目等履修生をやってよかったこと" class="headerlink" title="科目等履修生をやってよかったこと"></a>科目等履修生をやってよかったこと</h2><h3 id="自分の生活にあった負荷で履修できる"><a href="#自分の生活にあった負荷で履修できる" class="headerlink" title="自分の生活にあった負荷で履修できる"></a>自分の生活にあった負荷で履修できる</h3><p>3か月で社会人コースの1科目2単位を履修しており、平日に適度に課題をこなす状態をキープできています。<br>〇年間で△単位といった決まりがないため、次はもう少し増やそう、減らそう、と調節ができるのは科目等履修生の非常に大きなメリットです。</p><h3 id="興味のある科目を履修できる"><a href="#興味のある科目を履修できる" class="headerlink" title="興味のある科目を履修できる"></a>興味のある科目を履修できる</h3><p>自分にとって大学生時代の履修の目的は「学位を取得すること」でしたが、科目等履修生としての履修の目的は「その科目の学習をすること」であると強く自覚できており、楽しみながら講義を受け課題に取り組むことができています。</p><p>私が履修しているのは「並列処理」という講義です。この講義では処理能力向上のためにハードウェア・ソフトウェアの両面からどのような工夫がされてきたか学ぶことができます。実習では講義の内容を生かしたプログラムを作成し、なんとJAISTのスーパーコンピューターで実行することもできます。スパコンを使えるなんて、これだけでもコスパがいいですね！</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>技術の進歩が非常に早いこともあり、IT業界には他の業界よりも社会人学生や働いてから大学や大学院に行く例が多いように見えます。しかしまだまだ周囲からの理解が得られないこともあるかと思います。</p><p>科目等履修生という選択肢の存在がもっと広く知られ、もともと興味のあった分野や仕事を通じて興味を持ったことについて多くの人が気軽に学べるようになるといいなと思っています。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20211227a/education-g3f9d86844_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;404&quot;&gt;

&lt;p&gt;TIG</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="大学院" scheme="https://future-architect.github.io/tags/%E5%A4%A7%E5%AD%A6%E9%99%A2/"/>
    
    <category term="科目等履修生" scheme="https://future-architect.github.io/tags/%E7%A7%91%E7%9B%AE%E7%AD%89%E5%B1%A5%E4%BF%AE%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>FlutterでGoogleマップを表示してみる</title>
    <link href="https://future-architect.github.io/articles/20211224a/"/>
    <id>https://future-architect.github.io/articles/20211224a/</id>
    <published>2021-12-23T15:00:00.000Z</published>
    <updated>2021-12-24T03:04:34.581Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です</p><p>先日<a href="/articles/20211221a/">入門記事</a>を書いたFlutterですが、実践的なアプリケーションの作り込みも試してみました。</p><h1 id="FlutterでGoogleマップを表示したい"><a href="#FlutterでGoogleマップを表示したい" class="headerlink" title="FlutterでGoogleマップを表示したい"></a>FlutterでGoogleマップを表示したい</h1><p>FlutterではGoogleマップを表示するためのウィジェットが存在するため、どのくらい簡単に実現できるか検証してみました。</p><h1 id="実装の準備"><a href="#実装の準備" class="headerlink" title="実装の準備"></a>実装の準備</h1><p><a href="https://developers.google.com/maps/documentation?hl=ja">Google Maps Platform</a>を活用することで、任意のアプリケーションからGoogleマップの機能を利用することができます。<br>アプリケーションの実装の前に、GCPアカウントを用意し、<code>Maps JavaScript API</code>など必要な機能を有効化し、APIを実行するためのキーを払い出す必要があります。</p><h1 id="google-maps-flutter"><a href="#google-maps-flutter" class="headerlink" title="google_maps_flutter"></a>google_maps_flutter</h1><p>Flutterでは<a href="https://pub.dev/packages/google_maps_flutter">google_maps_flutter</a>というパッケージが存在します。Flutterチームのオフィシャルプラグインで安心感が高いです。このプラグインの機能を試してみます。</p><p>今回もFlutter on the Webで検証します。</p><h2 id="パッケージの導入"><a href="#パッケージの導入" class="headerlink" title="パッケージの導入"></a>パッケージの導入</h2><p>環境構築、Hello Worldアプリケーションの用意は<a href="https://future-architect.github.io/articles/20211221a/">環境構築の記事</a>を参照してください。<br>アプリケーションの用意ができたらパッケージをインストールします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter pub add google_maps_flutter</span><br></pre></td></tr></table></figure><p>Flutter on the Webでは<a href="https://pub.dev/packages/google_maps_flutter_web">google_maps_flutter_web</a>も導入します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter pub add google_maps_flutter_web</span><br></pre></td></tr></table></figure><p>導入するとGoogleMapウィジェットが使えるようになります。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:google_maps_flutter/google_maps_flutter.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> GoogleMap(</span><br><span class="line">      mapType: MapType.normal,</span><br><span class="line">      initialCameraPosition: _kGooglePlex,</span><br><span class="line">      markers: _markers,</span><br><span class="line">      polylines: _lines,</span><br><span class="line">      onMapCreated: (GoogleMapController controller) &#123;</span><br><span class="line">        _controller.complete(controller);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Flutter on the Webでは<code>index.html</code>のヘッダー部分にGoogle MapsのJavascriptを追加するとウィジェットが正常に動作します。</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://maps.googleapis.com/maps/api/js?key=MyApiKey&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ウィジェットを組み込む"><a href="#ウィジェットを組み込む" class="headerlink" title="ウィジェットを組み込む"></a>ウィジェットを組み込む</h2><p><a href="https://pub.dev/packages/google_maps_flutter/example">公式example</a>は中々壮大な例となっており、最小限の機能を抜粋するのが逆に難しいくらいです.<br><a href="https://github.com/flutter/plugins/tree/master/packages/google_maps_flutter/google_maps_flutter">GitHubのREADME</a>には比較的ミニマムな実装が用意されています。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:google_maps_flutter/google_maps_flutter.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Google Maps Demo&#x27;</span>,</span><br><span class="line">      home: MapSample(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapSample</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;MapSample&gt; createState() =&gt; MapSampleState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapSampleState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MapSample</span>&gt; </span>&#123;</span><br><span class="line">  Completer&lt;GoogleMapController&gt; _controller = Completer();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> CameraPosition _kGooglePlex = CameraPosition(</span><br><span class="line">    target: LatLng(<span class="number">37.42796133580664</span>, <span class="number">-122.085749655962</span>),</span><br><span class="line">    zoom: <span class="number">14.4746</span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> CameraPosition _kLake = CameraPosition(</span><br><span class="line">      bearing: <span class="number">192.8334901395799</span>,</span><br><span class="line">      target: LatLng(<span class="number">37.43296265331129</span>, <span class="number">-122.08832357078792</span>),</span><br><span class="line">      tilt: <span class="number">59.440717697143555</span>,</span><br><span class="line">      zoom: <span class="number">19.151926040649414</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      body: GoogleMap(</span><br><span class="line">        mapType: MapType.hybrid,</span><br><span class="line">        initialCameraPosition: _kGooglePlex,</span><br><span class="line">        onMapCreated: (GoogleMapController controller) &#123;</span><br><span class="line">          _controller.complete(controller);</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton.extended(</span><br><span class="line">        onPressed: _goToTheLake,</span><br><span class="line">        label: Text(<span class="string">&#x27;To the lake!&#x27;</span>),</span><br><span class="line">        icon: Icon(Icons.directions_boat),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; _goToTheLake() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> GoogleMapController controller = <span class="keyword">await</span> _controller.future;</span><br><span class="line">    controller.animateCamera(CameraUpdate.newCameraPosition(_kLake));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main.dart</code>を上記コードに置き換えてアプリケーションを起動すると画像のような状態になります。</p><img src="/images/20211224a/image.png" alt="Google Mapサンプルアプリ" width="628" height="719" loading="lazy"><p>実際のアプリケーションではGoogleMapウィジェットを全画面に表示するだけのものを作ることにはならないと思います。<br>サンプルの様々な部分を参考に何らかの機能を追加したり、他のウィジェットと組み合わせたりと拡張していきましょう。</p><p>例えば他の情報を表示する余白を作るためにContainerウィジェットでGoogleMapウィジェットをラッピングするようなことができます。<br><img src="/images/20211224a/image_2.png" alt="ウィジェットを用いてラッピングしたマップ" width="1200" height="1278" loading="lazy"></p><p>README記載のサンプルで表示される地図の場所はGoogle本社オフィスのようです、近くにゴルフ場やコンピュータ歴史博物館があるんですね、楽しそうです。</p><h1 id="地図のプロパティを変更する"><a href="#地図のプロパティを変更する" class="headerlink" title="地図のプロパティを変更する"></a>地図のプロパティを変更する</h1><p>GoogleMapウィジェットのプロパティを設定する事で地図の描画スタイルや機能の有無など様々な変更ができます。<br><a href="https://pub.dev/documentation/google_maps_flutter/latest/google_maps_flutter/GoogleMap-class.html">ドキュメント</a>を参考に変更してみましょう。</p><p>例えば<code>mapType</code>プロパティをnormalに変更することで、地図の描画が航空写真から地図らしい描画に切り替わります。</p><figure class="highlight dart"><figcaption><span>dart main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GoogleMap(</span><br><span class="line">  mapType: MapType.normal,</span><br><span class="line">  <span class="comment">// 以下省略</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><img src="/images/20211224a/image_3.png" alt="地図画像" width="1200" height="909" loading="lazy"><h1 id="地図にマーカーを表示する"><a href="#地図にマーカーを表示する" class="headerlink" title="地図にマーカーを表示する"></a>地図にマーカーを表示する</h1><p>独自のアプリケーションを作り込むからには、任意の地点を地図に表示したい要望が出てくるでしょう。GoogleMapウィジェットの<a href="https://pub.dev/documentation/google_maps_flutter/latest/google_maps_flutter/GoogleMap/markers.html">markersプロパティ</a>に<code>Set&lt;Marker&gt;</code>の適切なデータを追加することでマーカーが表示されます。</p><p><a href="https://pub.dev/documentation/google_maps_flutter_platform_interface/latest/google_maps_flutter_platform_interface/Marker-class.html">Markerクラス</a>は位置情報、アイコンなどのプロパティの他、オンクリックイベントのコールバック関数などを設定することができます。マーカーの位置情報である<a href="https://pub.dev/documentation/google_maps_flutter_platform_interface/latest/google_maps_flutter_platform_interface/LatLng-class.html">LatLngクラス</a>は緯度経度の情報です。</p><p>infoWindowでマーカーの名称や情報を追加できます。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span>&lt;Marker&gt; _markers = &#123;</span><br><span class="line">  Marker(</span><br><span class="line">    markerId: MarkerId(<span class="string">&quot;marker1&quot;</span>),</span><br><span class="line">    position: LatLng(<span class="number">37.4224411</span>,<span class="number">-122.0884808</span>),</span><br><span class="line">    infoWindow: InfoWindow(title: <span class="string">&quot;フューチャー株式会社&quot;</span>),</span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">GoogleMap(</span><br><span class="line">  markers: _markers,</span><br><span class="line">  <span class="comment">// 以下省略</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><img src="/images/20211224a/image_4.png" alt="地図上にマーカー" width="1200" height="616" loading="lazy"><h1 id="地図に線を引く"><a href="#地図に線を引く" class="headerlink" title="地図に線を引く"></a>地図に線を引く</h1><p>GoogleMapウィジェットは<a href="https://pub.dev/documentation/google_maps_flutter/latest/google_maps_flutter/GoogleMap/polylines.html">polylinesプロパティ</a>で２点間のルート情報を表示することもできます。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span>&lt;Marker&gt; _markers = &#123;</span><br><span class="line">  Marker(</span><br><span class="line">    markerId: MarkerId(<span class="string">&quot;marker1&quot;</span>),</span><br><span class="line">    position: LatLng(<span class="number">37.42246006639176</span>, <span class="number">-122.08409675340478</span>),</span><br><span class="line">    infoWindow: InfoWindow(title: <span class="string">&quot;Google本社&quot;</span>),</span><br><span class="line">  ),</span><br><span class="line">  Marker(</span><br><span class="line">    markerId: MarkerId(<span class="string">&quot;marker2&quot;</span>),</span><br><span class="line">    position: LatLng(<span class="number">37.42747752203552</span>, <span class="number">-122.08057852883495</span>),</span><br><span class="line">    infoWindow: InfoWindow(title: <span class="string">&quot;ショアライン・アンフィシアター&quot;</span>),</span><br><span class="line">  ),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Set</span>&lt;Polyline&gt; _lines = &#123;</span><br><span class="line">  Polyline(</span><br><span class="line">    polylineId: PolylineId(<span class="string">&quot;line1&quot;</span>),</span><br><span class="line">    points: [</span><br><span class="line">      LatLng(<span class="number">37.42246006639176</span>, <span class="number">-122.08409675340478</span>),</span><br><span class="line">      LatLng(<span class="number">37.42747752203552</span>, <span class="number">-122.08057852883495</span>),</span><br><span class="line">    ],</span><br><span class="line">    color: Colors.blue,</span><br><span class="line">  ),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">GoogleMap(</span><br><span class="line">  markers: _markers,</span><br><span class="line">  polylines: _lines,</span><br><span class="line">  <span class="comment">// 以下省略</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>Set&lt;Polyline&gt;</code>のデータを用意することで青い線を引くことができました。</p><img src="/images/20211224a/image_5.png" alt="2点間で線を引く" width="1200" height="770" loading="lazy"><p>しかしこれではスタートとゴールの間に山があろうと谷があろうと乗り越え直進するという無茶なルートしか表示できません。</p><h2 id="Directions-APIを活用する"><a href="#Directions-APIを活用する" class="headerlink" title="Directions APIを活用する"></a>Directions APIを活用する</h2><p>これまで紹介したGoogle MapのAPIは地図の描画に専念して用意されたAPIです。経路探索や距離の計算は別のAPIとして公開されています。</p><p><a href="https://developers.google.com/maps/documentation/directions/overview?hl=ja">Directions API</a>を利用することで、任意の２点間の現実的で最適な経路を取得することができます。  <code>Directions API</code>も<code>Javascript API</code>のようにGCPの管理画面で機能を有効化する必要があります。</p><p><code>Directions API</code>を実行するDartパッケージとして<a href="https://pub.dev/packages/flutter_polyline_points">flutter_polyline_points</a>が存在しますが、執筆時点ではレスポンスのパース処理に不具合があったため、愚直に<code>Directions API</code>を実行し、レスポンスのパースは<a href="https://pub.dev/packages/google_polyline_algorithm">google_polyline_algorithm</a>で行いました。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:google_polyline_algorithm/google_polyline_algorithm.dart&#x27;</span>;</span><br><span class="line">Future&lt;<span class="built_in">List</span>&lt;LatLng&gt;&gt; getPolylineResult(</span><br><span class="line">  LatLng origin,</span><br><span class="line">  LatLng destination,</span><br><span class="line">  <span class="built_in">List</span>&lt;LatLng&gt; wayPoints) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> params = &#123;</span><br><span class="line">    <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;<span class="subst">$&#123;origin.latitude&#125;</span>,<span class="subst">$&#123;origin.longitude&#125;</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;destination&quot;</span>: <span class="string">&quot;<span class="subst">$&#123;destination.latitude&#125;</span>,<span class="subst">$&#123;destination.longitude&#125;</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;driving&quot;</span>,</span><br><span class="line">    <span class="string">&quot;avoidHighways&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">    <span class="string">&quot;avoidFerries&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">    <span class="string">&quot;avoidTolls&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;MyApiKey&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (wayPoints.isNotEmpty) &#123;</span><br><span class="line">    <span class="built_in">List</span> wayPointsArray = [];</span><br><span class="line">    wayPoints.forEach((point) &#123;</span><br><span class="line">      <span class="built_in">String</span> encoded = encodePolyline([[point.latitude.toDouble(), point.longitude.toDouble()]]);</span><br><span class="line">      wayPointsArray.add(<span class="string">&quot;enc:<span class="subst">$&#123;encoded&#125;</span>:&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">String</span> wayPointsString = wayPointsArray.join(<span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">    params.addAll(&#123;<span class="string">&quot;waypoints&quot;</span>: wayPointsString&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Uri</span> uri = <span class="built_in">Uri</span>.https(<span class="string">&quot;maps.googleapis.com&quot;</span>, <span class="string">&quot;maps/api/directions/json&quot;</span>, params);</span><br><span class="line">  <span class="keyword">var</span> response = <span class="keyword">await</span> http.<span class="keyword">get</span>(uri);</span><br><span class="line">  <span class="built_in">List</span>&lt;LatLng&gt; polylineCoordinates = [];</span><br><span class="line">  <span class="keyword">if</span> (response.statusCode != <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> parsedJson = json.decode(response.body);</span><br><span class="line">  <span class="keyword">if</span> (parsedJson[<span class="string">&quot;status&quot;</span>]?.toLowerCase() != <span class="string">&quot;ok&quot;</span> || parsedJson[<span class="string">&quot;routes&quot;</span>] == <span class="keyword">null</span> || parsedJson[<span class="string">&quot;routes&quot;</span>].isEmpty) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">num</span>&gt;&gt; points = decodePolyline(parsedJson[<span class="string">&quot;routes&quot;</span>][<span class="number">0</span>][<span class="string">&quot;overview_polyline&quot;</span>][<span class="string">&quot;points&quot;</span>]);</span><br><span class="line">  points.forEach((point) &#123;</span><br><span class="line">    polylineCoordinates.add(LatLng(point[<span class="number">0</span>].toDouble(), point[<span class="number">1</span>].toDouble()));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> polylineCoordinates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>パッケージを導入すると使えるようになる<code>decodePolyline()</code>はレスポンスにあるエンコードされた経路情報をデコードして緯度経度の配列にする関数です。</p><p>曲がり角の情報だけでなく、線を道に沿って表示するにはどこを繋ぐとよいのか、という詳細な緯度経度情報の配列が取得できます。<a href="https://developers.google.com/maps/documentation/utilities/polylinealgorithm">エンコードされた緯度軽度の圧縮アルゴリズム</a>はドキュメントとして公開されているため、仕様に則ってデコードするだけですが、中々難しいことをしています。</p><p><code>Drection API</code>の実行結果を地図に反映させると画像のようになります。完璧なルートが出力されました、当たり前のように使ってるGoogleマップって改めて考えると凄いなと感じますね。</p><img src="/images/20211224a/image_6.png" alt="image.png" width="1200" height="1337" loading="lazy"><p>なおFlutter on the Webとして動かす場合、<code>maps.googleapis.com</code>へのGETリクエストはCORS設定の都合で失敗してしまいます。ウェブサイトとして完成させるには同一ドメインで<code>maps.googleapis.com</code>へのリクエストを代行してくれるプロキシ的なバックエンドを作る必要があります。単にローカルでは一旦ブラウザで動かしたい、という場合は<code>chromium</code>をインストールして、オプション付きで起動すると動作します。</p><p>下記のようなシェルスクリプトを用意します。</p><figure class="highlight sh"><figcaption><span>google-chrome-unsafe.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/chromium --disable-web-security --user-data-dir=<span class="string">&quot;A-TEMP-LOCATION&quot;</span> $*</span><br></pre></td></tr></table></figure><p>環境変数<code>CHROME_EXECUTABLE</code>でFlutterが起動するブラウザの起動設定をカスタマイズできます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CHROME_EXECUTABLE=`<span class="built_in">pwd</span>`/google-chrome-unsafe.sh flutter run</span><br></pre></td></tr></table></figure><p>Flutter on the Webは、対象プラットフォームがモバイルアプリだけだった頃に作られたライブラリがCORS対策の問題などで上手く動かない、という可能性があるかもしれません。</p><h1 id="アプリケーションとして整備する"><a href="#アプリケーションとして整備する" class="headerlink" title="アプリケーションとして整備する"></a>アプリケーションとして整備する</h1><p>最低限やれることはわかってきました。ウィジェットとしてリファクタリングする、データの取得と画面描画をリファクタリングする、オンクリックイベントの実装などアプリケーションとして作り込んでいきます。サンプルアプリケーションを見るとGoogleMapウィジェットはExpandウィジェットなどと組み合わせて利用されています。今回はColumnウィジェットの一要素としてGoogleMapウィジェットを読み込んでみるスタイルにしてみます。Columnウィジェットに積み込む他のウィジェットは適当にflutterロゴを出してみます。</p><img src="/images/20211224a/image_7.png" alt="image.png" width="1200" height="730" loading="lazy"><p>オンクリックイベントの実験と、infoWindowより自由度の高いUIを実現したい、という観点で、マーカーをタップするとサイドバーが表示されるような作り込みもしてみました。</p><img src="/images/20211224a/image_8.png" alt="image.png" width="1200" height="728" loading="lazy"><p>サンプルを試していた時にはマーカーやルートの位置情報をソースコードに愚直に書きましたが、実際にアプリケーションとして作り込むにあたっては、ウィジェットのレイアウトとビジネスロジックはなるべく切り分けたいですね。</p><p>表示したい情報の取得は一般的にサーバーサイドへアクセスする処理を非同期な関数で実装する事になることを想定しています。律儀にデータの取得完了を待ってから<a href="https://api.flutter.dev/flutter/widgets/FutureBuilder-class.html">FutureBuilderウィジェット</a>を利用して描画する手法も試してみましたが、地図に描画するデータの更新ではマーカーやルートを取得して差し替えた際に地図そのものの再描画は発生せず綺麗に動くため、素直に<code>setState</code>を利用した方が快適に動きました。</p><p>上記の作り込みをまとめると下記のようになります。</p><p>今回は大掛かりなファイル分割は行わず、<code>main.dart</code>と<code>service.dart</code>の2ファイルに分けて、GoogleMap用のトークンを書き換えたら動くような形にしました。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:google_maps_flutter/google_maps_flutter.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./service.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Google Maps Demo&#x27;</span>,</span><br><span class="line">      home: MapSample(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapSample</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;MapSample&gt; createState() =&gt; MapSampleState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapSampleState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MapSample</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _scaffoldKey = GlobalKey&lt;ScaffoldState&gt;();</span><br><span class="line">  Completer&lt;GoogleMapController&gt; _controller = Completer();</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> CameraPosition _kGooglePlex = CameraPosition(</span><br><span class="line">    target: LatLng(<span class="number">37.42796133580684</span>, <span class="number">-122.085749655962</span>),</span><br><span class="line">    zoom: <span class="number">14.4746</span>,</span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">Set</span>&lt;Polyline&gt; _lines = &#123;&#125;;</span><br><span class="line">  <span class="built_in">Set</span>&lt;Marker&gt; _markers = &#123;&#125;;</span><br><span class="line">  <span class="built_in">String</span> _drawer_name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="built_in">String</span> _drawer_info = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="built_in">String</span> _drawer_lat = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="built_in">String</span> _drawer_lng = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    createPolylines();</span><br><span class="line">    createMarkers();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        FlutterLogo(),</span><br><span class="line">        MapContainer(),</span><br><span class="line">        FlutterLogo(),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  MapContainer() &#123;</span><br><span class="line">    <span class="keyword">return</span> Expanded(</span><br><span class="line">      child: Container(</span><br><span class="line">        width: <span class="number">1000</span>,</span><br><span class="line">        height: <span class="number">900</span>,</span><br><span class="line">        child: Scaffold(</span><br><span class="line">          key: _scaffoldKey,</span><br><span class="line">          resizeToAvoidBottomInset: <span class="keyword">false</span>,</span><br><span class="line">          drawer: MapDrawer(),</span><br><span class="line">          body: GoogleMap(</span><br><span class="line">            mapType: MapType.normal,</span><br><span class="line">            initialCameraPosition: _kGooglePlex,</span><br><span class="line">            markers: _markers,</span><br><span class="line">            polylines: _lines,</span><br><span class="line">            onMapCreated: (GoogleMapController controller) &#123;</span><br><span class="line">              _controller.complete(controller);</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  MapDrawer() &#123;</span><br><span class="line">    <span class="keyword">return</span> Drawer(</span><br><span class="line">      child: ListView(</span><br><span class="line">        padding: EdgeInsets.zero,</span><br><span class="line">        children: [</span><br><span class="line">          ListTile(</span><br><span class="line">            title: Text(<span class="string">&quot;name: <span class="subst">$&#123;_drawer_name&#125;</span>&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">          ListTile(</span><br><span class="line">            title: Text(<span class="string">&quot;info: <span class="subst">$&#123;_drawer_info&#125;</span>&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">          ListTile(</span><br><span class="line">            title: Text(<span class="string">&quot;latitude: <span class="subst">$&#123;_drawer_lat&#125;</span>&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">          ListTile(</span><br><span class="line">            title: Text(<span class="string">&quot;longitude: <span class="subst">$&#123;_drawer_lng&#125;</span>&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  marker_tapped(Place place)&#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _drawer_name = place.name;</span><br><span class="line">      _drawer_info = place.info;</span><br><span class="line">      _drawer_lat= place.latlng.latitude.toString();</span><br><span class="line">      _drawer_lng= place.latlng.longitude.toString();</span><br><span class="line">    &#125;);</span><br><span class="line">    _scaffoldKey.currentState?.openDrawer();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> createMarkers() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">Set</span>&lt;Marker&gt; markers = <span class="keyword">await</span> getMarkers(marker_tapped);</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _markers = markers;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> createPolylines() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">Set</span>&lt;Polyline&gt; lines = <span class="keyword">await</span> getLines();</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _lines = lines;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><figcaption><span>service.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/http.dart&#x27;</span> <span class="keyword">as</span> http;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:google_maps_flutter/google_maps_flutter.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:google_polyline_algorithm/google_polyline_algorithm.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">String</span> apiKey = <span class="string">&quot;MyApiKey&quot;</span>;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="built_in">Set</span>&lt;Marker&gt;&gt; getMarkers(<span class="keyword">void</span> <span class="built_in">Function</span>(Place) callback) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">Set</span>&lt;Place&gt; places = <span class="keyword">await</span> getPlaces();</span><br><span class="line">  <span class="built_in">Set</span>&lt;Marker&gt; markers = &#123;&#125;;</span><br><span class="line">  places.toList().asMap().forEach((k, v) &#123;</span><br><span class="line">    markers.add(Marker(</span><br><span class="line">      markerId: MarkerId(k.toString()),</span><br><span class="line">      position: v.latlng,</span><br><span class="line">      onTap: () =&gt; callback(v),</span><br><span class="line">    ));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> markers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DBから取得する想定</span></span><br><span class="line">Future&lt;<span class="built_in">Set</span>&lt;Place&gt;&gt; getPlaces() <span class="keyword">async</span> &#123;</span><br><span class="line">  LatLng latLng1 = LatLng(<span class="number">37.42747752203552</span>, <span class="number">-122.08057852883495</span>);</span><br><span class="line">  LatLng latLng2 = LatLng(<span class="number">37.42246006639176</span>, <span class="number">-122.08409675340478</span>);</span><br><span class="line">  LatLng latLng3 = LatLng(<span class="number">37.41746006639176</span>, <span class="number">-122.08409675340478</span>);</span><br><span class="line">  LatLng latLng4 = LatLng(<span class="number">37.42546006639176</span>, <span class="number">-122.09809675340478</span>);</span><br><span class="line">  <span class="built_in">Set</span>&lt;Place&gt; places = &#123;&#125;;</span><br><span class="line">  [latLng1, latLng2, latLng3, latLng4].asMap().forEach((<span class="built_in">int</span> i, LatLng v) &#123;</span><br><span class="line">    places.add(</span><br><span class="line">      Place(</span><br><span class="line">        name: <span class="string">&quot;place<span class="subst">$&#123;i&#125;</span>&quot;</span>,</span><br><span class="line">        info: <span class="string">&quot;it is place <span class="subst">$&#123;i&#125;</span>&quot;</span>,</span><br><span class="line">        latlng: v,</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> places;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="built_in">Set</span>&lt;Polyline&gt;&gt; getLines() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">Set</span>&lt;MapRoute&gt; routes = <span class="keyword">await</span> getRoutes();</span><br><span class="line">  <span class="built_in">Set</span>&lt;Polyline&gt; lines = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; routes.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> route = routes.elementAt(i);</span><br><span class="line">    <span class="built_in">List</span>&lt;LatLng&gt; polylineCoordinates = [];</span><br><span class="line">    polylineCoordinates.add(route.origin);</span><br><span class="line">    <span class="built_in">List</span>&lt;LatLng&gt; result = <span class="keyword">await</span> getPolylineResult(</span><br><span class="line">      route.origin,</span><br><span class="line">      route.destination,</span><br><span class="line">      route.wayPoints</span><br><span class="line">    );</span><br><span class="line">    polylineCoordinates.addAll(result);</span><br><span class="line">    polylineCoordinates.add(route.destination);</span><br><span class="line">    lines.add(</span><br><span class="line">      Polyline(</span><br><span class="line">        polylineId: PolylineId(i.toString()),</span><br><span class="line">        jointType: JointType.round,</span><br><span class="line">        points: polylineCoordinates,</span><br><span class="line">        color: Colors.blue,</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> lines;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DBから取得する想定</span></span><br><span class="line">Future&lt;<span class="built_in">Set</span>&lt;MapRoute&gt;&gt; getRoutes() <span class="keyword">async</span> &#123;</span><br><span class="line">  LatLng latLng1 = LatLng(<span class="number">37.42747752203552</span>, <span class="number">-122.08057852883495</span>);</span><br><span class="line">  LatLng latLng2 = LatLng(<span class="number">37.42246006639176</span>, <span class="number">-122.08409675340478</span>);</span><br><span class="line">  LatLng latLng3 = LatLng(<span class="number">37.41746006639176</span>, <span class="number">-122.08409675340478</span>);</span><br><span class="line">  LatLng latLng4 = LatLng(<span class="number">37.42546006639176</span>, <span class="number">-122.09809675340478</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    MapRoute(</span><br><span class="line">      origin: latLng1,</span><br><span class="line">      destination: latLng2,</span><br><span class="line">    ),</span><br><span class="line">    MapRoute(</span><br><span class="line">      origin: latLng1,</span><br><span class="line">      destination: latLng2,</span><br><span class="line">      wayPoints: [</span><br><span class="line">        latLng3,</span><br><span class="line">        latLng4,</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="built_in">List</span>&lt;LatLng&gt;&gt; getPolylineResult(</span><br><span class="line">  LatLng origin,</span><br><span class="line">  LatLng destination,</span><br><span class="line">  <span class="built_in">List</span>&lt;LatLng&gt; wayPoints) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> params = &#123;</span><br><span class="line">    <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;<span class="subst">$&#123;origin.latitude&#125;</span>,<span class="subst">$&#123;origin.longitude&#125;</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;destination&quot;</span>: <span class="string">&quot;<span class="subst">$&#123;destination.latitude&#125;</span>,<span class="subst">$&#123;destination.longitude&#125;</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;driving&quot;</span>,</span><br><span class="line">    <span class="string">&quot;avoidHighways&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">    <span class="string">&quot;avoidFerries&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">    <span class="string">&quot;avoidTolls&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: apiKey</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (wayPoints.isNotEmpty) &#123;</span><br><span class="line">    <span class="built_in">List</span> wayPointsArray = [];</span><br><span class="line">    wayPoints.forEach((point) &#123;</span><br><span class="line">      <span class="built_in">String</span> encoded = encodePolyline([[point.latitude.toDouble(), point.longitude.toDouble()]]);</span><br><span class="line">      wayPointsArray.add(<span class="string">&quot;enc:<span class="subst">$&#123;encoded&#125;</span>:&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">String</span> wayPointsString = wayPointsArray.join(<span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">    params.addAll(&#123;<span class="string">&quot;waypoints&quot;</span>: wayPointsString&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Uri</span> uri = <span class="built_in">Uri</span>.https(<span class="string">&quot;maps.googleapis.com&quot;</span>, <span class="string">&quot;maps/api/directions/json&quot;</span>, params);</span><br><span class="line">  <span class="keyword">var</span> response = <span class="keyword">await</span> http.<span class="keyword">get</span>(uri);</span><br><span class="line">  <span class="built_in">List</span>&lt;LatLng&gt; polylineCoordinates = [];</span><br><span class="line">  <span class="keyword">if</span> (response.statusCode != <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> parsedJson = json.decode(response.body);</span><br><span class="line">  <span class="keyword">if</span> (parsedJson[<span class="string">&quot;status&quot;</span>]?.toLowerCase() != <span class="string">&quot;ok&quot;</span> || parsedJson[<span class="string">&quot;routes&quot;</span>] == <span class="keyword">null</span> || parsedJson[<span class="string">&quot;routes&quot;</span>].isEmpty) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">num</span>&gt;&gt; points = decodePolyline(parsedJson[<span class="string">&quot;routes&quot;</span>][<span class="number">0</span>][<span class="string">&quot;overview_polyline&quot;</span>][<span class="string">&quot;points&quot;</span>]);</span><br><span class="line">  points.forEach((point) &#123;</span><br><span class="line">    polylineCoordinates.add(LatLng(point[<span class="number">0</span>].toDouble(), point[<span class="number">1</span>].toDouble()));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> polylineCoordinates;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Place</span> </span>&#123;</span><br><span class="line">  LatLng latlng;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">String</span> info;</span><br><span class="line">  Place(&#123;<span class="keyword">this</span>.name = <span class="string">&quot;&quot;</span>, <span class="keyword">this</span>.info = <span class="string">&quot;&quot;</span>, <span class="keyword">this</span>.latlng = <span class="keyword">const</span> LatLng(<span class="number">0</span>, <span class="number">0</span>)&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapRoute</span> </span>&#123;</span><br><span class="line">  LatLng origin;</span><br><span class="line">  LatLng destination;</span><br><span class="line">  <span class="built_in">List</span>&lt;LatLng&gt; wayPoints;</span><br><span class="line">  MapRoute(&#123;<span class="keyword">this</span>.origin = <span class="keyword">const</span> LatLng(<span class="number">0</span>, <span class="number">0</span>), <span class="keyword">this</span>.destination = <span class="keyword">const</span> LatLng(<span class="number">0</span>,<span class="number">0</span>), <span class="keyword">this</span>.wayPoints = <span class="keyword">const</span> []&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>Flutterにはチーム公式のGoogleMapライブラリが存在する</li><li>ルートの計算を行うにはDirections APIを活用する</li><li>Flutter on the WebはCORS対策の必要性がある</li><li>ウィジェットの組み合わせなどは公式サンプルが参考になる</li></ul><p>特にウィジェットの組み合わせに頭を悩ませる時間が最初のうちはあると思います、OSSパッケージやサンプルコードなど様々な事例を参考にすると良いと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;TIGの伊藤真彦です&lt;/p&gt;
&lt;p&gt;先日&lt;a href=&quot;/articles/20211221a/&quot;&gt;入門記事&lt;/a&gt;を書いたFlutterですが、実践的なアプリケーションの作り込みも試してみました。&lt;/p&gt;
&lt;h1</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="Dart" scheme="https://future-architect.github.io/tags/Dart/"/>
    
    <category term="GoogleMapsAPI" scheme="https://future-architect.github.io/tags/GoogleMapsAPI/"/>
    
  </entry>
  
  <entry>
    <title>TFLintを使ってみる（GCP×Terraform）</title>
    <link href="https://future-architect.github.io/articles/20211223a/"/>
    <id>https://future-architect.github.io/articles/20211223a/</id>
    <published>2021-12-22T15:00:00.000Z</published>
    <updated>2021-12-23T00:38:50.660Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20211223a/top.png" alt="" width="800" height="431"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><code>terraform validate</code>や<code>terraform plan</code>では検知できないエラーを見つけるために、TFLintを利用してみました。TFLintを用いれば、例えばインスタンスタイプの誤りや命名規約違反を検知できます。</p><p>本記事では、インストールから利用方法までを記載しています。</p><h1 id="TFLintとは？"><a href="#TFLintとは？" class="headerlink" title="TFLintとは？"></a>TFLintとは？</h1><p>いわゆるTerraformのためのLinter。JavaScriptでいうと、ESLintのようなものです。構文やパラメータがルールに違反していないかをチェックしてくれるツールです。</p><h1 id="環境やバージョン"><a href="#環境やバージョン" class="headerlink" title="環境やバージョン"></a>環境やバージョン</h1><p>今回利用した環境です。</p><ul><li>Windows10</li><li><a href="https://github.com/terraform-linters/tflint">tflint v0.34.0</a></li><li><a href="https://github.com/terraform-linters/tflint-ruleset-google">tflint-ruleset-google v0.15.0</a></li><li><a href="https://www.terraform.io/">terraform v1.1.0</a><ul><li>※Terraformがなくてもtflintは動作するので、Terraformは必須ではない</li></ul></li><li>Google Cloud</li></ul><h1 id="tflintをインストール"><a href="#tflintをインストール" class="headerlink" title="tflintをインストール"></a>tflintをインストール</h1><ol><li><a href="https://github.com/terraform-linters/tflint/releases">tflint/releases</a>から<code>tflint_windows_amd64.zip</code>をダウンロード</li><li><code>tflint_windows_amd64.zip</code>を解凍</li><li><code>tflint.exe</code>をパスが通ってるところに配置</li><li>以下を実行し、バージョン情報が出たら成功</li></ol><figure class="highlight bash"><figcaption><span>PowerShell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ tflint --version</span><br><span class="line"></span><br><span class="line">TFLint version 0.34.0</span><br></pre></td></tr></table></figure><p>※他OSでのインストール手順は以下を参照ください。</p><ul><li><a href="https://github.com/terraform-linters/tflint#installation">tflint installation</a></li></ul><h1 id="tflint-hclの作成"><a href="#tflint-hclの作成" class="headerlink" title=".tflint.hclの作成"></a>.tflint.hclの作成</h1><p><code>.tflint.hcl</code> とは、Pluginをインストールするための設定ファイルです。</p><p>今回は、GCPの RuleSet Pluginをインストールする例を記載します。</p><ul><li><code>.tflint.hcl</code>はホームディレクトリか、カレントディレクトリに配置する必要がある<ul><li>今回は、ホームディレクトリに配置とする</li></ul></li></ul><figure class="highlight js"><figcaption><span>.tflint.hcl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plugin <span class="string">&quot;google&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">  version = <span class="string">&quot;0.15.0&quot;</span></span><br><span class="line">  source  = <span class="string">&quot;github.com/terraform-linters/tflint-ruleset-google&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>※参考</p><ul><li><a href="https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/config.md">Configuring TFLint</a></li><li><a href="https://github.com/terraform-linters/tflint-ruleset-google#installation">tflint-ruleset-google installation</a></li></ul><h1 id="tflint-–initの実施"><a href="#tflint-–initの実施" class="headerlink" title="tflint –initの実施"></a>tflint –initの実施</h1><p><code>.tflint.hcl</code> を記載したあとに、Pluginをインストールするために、以下のコマンドを実行します。初回のみ実施で問題ないです。</p><figure class="highlight bash"><figcaption><span>PowerShell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tflint --init</span><br></pre></td></tr></table></figure><h1 id="tflintの動作確認をしてみる"><a href="#tflintの動作確認をしてみる" class="headerlink" title="tflintの動作確認をしてみる"></a>tflintの動作確認をしてみる</h1><ol><li><code>google_compute_instance</code>の<code>machine_type</code>に存在しないインスタンスタイプを記載してみます。</li></ol><figure class="highlight js"><figcaption><span>example.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;google_compute_instance&quot;</span> <span class="string">&quot;gce_test&quot;</span> &#123;</span><br><span class="line">  project      = <span class="string">&quot;testest&quot;</span></span><br><span class="line">  name         = <span class="string">&quot;testtest-gce001&quot;</span></span><br><span class="line">  zone         = <span class="string">&quot;asia-northeast1-a&quot;</span></span><br><span class="line">  # ここで存在しないインスタンスタイプを指定</span><br><span class="line">  machine_type = <span class="string">&quot;n2-standard-200&quot;</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>tflintを実行してみる。そうするとエラーがでます</li></ol><figure class="highlight bash"><figcaption><span>PowerShell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ tflint</span><br><span class="line"></span><br><span class="line">1 issue(s) found:</span><br><span class="line"></span><br><span class="line">Error: <span class="string">&quot;n2-standard-200&quot;</span> is an invalid as machine <span class="built_in">type</span> (google_compute_instance_invalid_machine_type)</span><br><span class="line"></span><br><span class="line">  on main.tf line 6:</span><br><span class="line">   6:   machine_type = <span class="string">&quot;n2-standard-200&quot;</span></span><br></pre></td></tr></table></figure><h1 id="応用：moduleも対象とする"><a href="#応用：moduleも対象とする" class="headerlink" title="応用：moduleも対象とする"></a>応用：moduleも対象とする</h1><p>Terraformにはmoduleと呼ばれるカスタムリソースを作る機能があります。詳しくは<a href="/articles/20211029a/">Terraformerとしてコードを書いて思うこと</a>を参照ください。</p><p>これをTFLintでチェックするためには、<a href="https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/module-inspection.md">Module Inspection</a>に記載がある通り、<code>.tflint.hcl</code>に<code>module = true</code>を追記するだけです。</p><figure class="highlight sh"><figcaption><span>.tflint.hcl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># add</span></span><br><span class="line">config &#123;</span><br><span class="line">  module = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plugin <span class="string">&quot;google&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">  version = <span class="string">&quot;0.15.0&quot;</span></span><br><span class="line">  <span class="built_in">source</span>  = <span class="string">&quot;github.com/terraform-linters/tflint-ruleset-google&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="応用：ルールを有効化する"><a href="#応用：ルールを有効化する" class="headerlink" title="応用：ルールを有効化する"></a>応用：ルールを有効化する</h1><p>TFLintに多くのチェックルールが予め用意されています。どんなルールがあって、どれがデフォルトで有効になっているかは以下に記載があるので確認すると良いでしょう。</p><ul><li><a href="https://github.com/terraform-linters/tflint/blob/master/docs/rules/README.md">TFLint Rules</a></li><li><a href="https://github.com/terraform-linters/tflint-ruleset-google/blob/master/docs/rules/README.md">TFLint Rules Google</a></li></ul><p>今回は例として、「terraform_unused_declarations」を有効化してみます。内容としては、「使っていないlocalsを検知できる」というルールです。</p><p>チェックするために、 先程の <code>.tflint.hcl</code> に <code>terraform_unused_declarations</code>を追記します。</p><figure class="highlight sh"><figcaption><span>.tflint.hcl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">config &#123;</span><br><span class="line">  module = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plugin <span class="string">&quot;google&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">  version = <span class="string">&quot;0.15.0&quot;</span></span><br><span class="line">  <span class="built_in">source</span>  = <span class="string">&quot;github.com/terraform-linters/tflint-ruleset-google&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># add</span></span><br><span class="line">rule terraform_unused_declarations &#123;</span><br><span class="line">   enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使っていないlocalsを宣言したtfファイルを追加します。</p><figure class="highlight js"><figcaption><span>example-valiable.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  unused = <span class="string">&quot;test&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これに対して、TFLint実行します。ルール違反を検知したことがわかります。どのファイルの何行目に違反があったか表示してくれていますね。</p><figure class="highlight bash"><figcaption><span>PowerShell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ tflint</span><br><span class="line"></span><br><span class="line">1 issue(s) found:</span><br><span class="line"></span><br><span class="line">Warning: local.unused is declared but not used (terraform_unused_declarations)</span><br><span class="line"></span><br><span class="line">  on example-valiable.tf line 2:</span><br><span class="line"> 168:   unused = <span class="string">&quot;test&quot;</span></span><br><span class="line"></span><br><span class="line">Reference: https://github.com/terraform-linters/tflint/blob/v0.34.0/docs/rules/terraform_unused_declarations.md</span><br></pre></td></tr></table></figure><h1 id="利用上の注意点"><a href="#利用上の注意点" class="headerlink" title="利用上の注意点"></a>利用上の注意点</h1><p>TFLintを使っていくなかで、注意しなければと思ったものをあげていきます。</p><h2 id="1-Local-Valuesは評価されない"><a href="#1-Local-Valuesは評価されない" class="headerlink" title="1. Local Valuesは評価されない"></a>1. Local Valuesは評価されない</h2><p><a href="https://github.com/terraform-linters/tflint/issues/571">TFLint skips expressions that reference static local values #571</a>にも記載があります。以下のように不正なインスタンスタイプをlocalsで定義してもエラーにならないです。</p><figure class="highlight js"><figcaption><span>example.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  machine_type = <span class="string">&quot;n2-standard-200&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;google_compute_instance&quot;</span> <span class="string">&quot;gce_test&quot;</span> &#123;</span><br><span class="line">  project      = <span class="string">&quot;testest&quot;</span></span><br><span class="line">  name         = <span class="string">&quot;testtest-gce001&quot;</span></span><br><span class="line">  zone         = <span class="string">&quot;asia-northeast1-a&quot;</span></span><br><span class="line">  machine_type = local.machine_type</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>tflintの実行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tflint</span><br><span class="line"><span class="comment"># ルール違反を検知できない</span></span><br></pre></td></tr></table></figure><h2 id="2-利用しているTerraformのバージョンとTFLintを揃える必要がある"><a href="#2-利用しているTerraformのバージョンとTFLintを揃える必要がある" class="headerlink" title="2. 利用しているTerraformのバージョンとTFLintを揃える必要がある"></a>2. 利用しているTerraformのバージョンとTFLintを揃える必要がある</h2><p><a href="https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/compatibility.md">Compatibility with Terraform</a>のドキュメントに記載がある通り、TFLintはTerraformを内蔵しています。そのため、利用しているTerraformのバージョンに合わせて、該当バージョンのTFLintを利用する必要がある</p><p>直近のバージョン対応表をあげます。</p><div class="scroll"><table><thead><tr><th align="center">Terraform</th><th align="center">TFLint</th></tr></thead><tbody><tr><td align="center">v1.1.0</td><td align="center">v0.34.0</td></tr><tr><td align="center">v1.0.0</td><td align="center">v0.30.0~v0.33.2</td></tr><tr><td align="center">v0.15.0</td><td align="center">v0.27.0~v0.29.1</td></tr><tr><td align="center">v0.14.9</td><td align="center">v0.26.0</td></tr><tr><td align="center">v0.14.7</td><td align="center">v0.25.0</td></tr></tbody></table></div><p>※参考</p><ul><li><a href="https://dev.classmethod.jp/articles/install-tflint-with-fixed-version/">Version固定でTFLintをインストールする</a></li></ul><h2 id="3-Deep-Checkingを利用する場合の注意事項"><a href="#3-Deep-Checkingを利用する場合の注意事項" class="headerlink" title="3. Deep Checkingを利用する場合の注意事項"></a>3. Deep Checkingを利用する場合の注意事項</h2><p><a href="https://github.com/terraform-linters/tflint-ruleset-google/blob/master/docs/deep_checking.md">Deep Checking</a>は、GCPのAPIを利用してより厳密なチェックを行うことができるオプションです。</p><p>以下のように<code>deep_check = true</code>を追加することで、Deep Checkingが有効になります。ただし、<code>serviceusage.googleapis.com</code>が有効になっている必要があります。つまり、PJ作成時(APIが有効になっていない状態)にtflintを実行するとエラーになってしまうのでご注意ください。</p><figure class="highlight sh"><figcaption><span>.tflint.hcl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">plugin <span class="string">&quot;google&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">  version = <span class="string">&quot;0.15.0&quot;</span></span><br><span class="line">  <span class="built_in">source</span>  = <span class="string">&quot;github.com/terraform-linters/tflint-ruleset-google&quot;</span></span><br><span class="line">  <span class="comment"># add</span></span><br><span class="line">  deep_check = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>※Projectは、providerのprojectを参照している</p><figure class="highlight sh"><figcaption><span>example.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">provider <span class="string">&quot;google&quot;</span> &#123;</span><br><span class="line">  project = <span class="string">&quot;testtest&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="tflint-hcl-のサンプルを用意したので、TFLintを動かしてみよう"><a href="#tflint-hcl-のサンプルを用意したので、TFLintを動かしてみよう" class="headerlink" title=".tflint.hcl のサンプルを用意したので、TFLintを動かしてみよう"></a>.tflint.hcl のサンプルを用意したので、TFLintを動かしてみよう</h1><p>全ルールをenableにした<code>.tflint.hcl</code> をサンプルとして用意しました。全ルールとは以下に記載のあるルールです。</p><ul><li><a href="https://github.com/terraform-linters/tflint/blob/master/docs/rules/README.md">TFLint Rules</a></li><li><a href="https://github.com/terraform-linters/tflint-ruleset-google/blob/master/docs/rules/README.md">TFLint Rules Google</a><ul><li>※Deep Checkingの<code>google_disabled_api</code>は除いています</li></ul></li></ul><figure class="highlight js"><figcaption><span>.tflint.hcl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">config &#123;</span><br><span class="line">  <span class="built_in">module</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">plugin <span class="string">&quot;google&quot;</span> &#123;</span><br><span class="line">  enabled    = <span class="literal">true</span></span><br><span class="line">  version    = <span class="string">&quot;0.15.0&quot;</span></span><br><span class="line">  source     = <span class="string">&quot;github.com/terraform-linters/tflint-ruleset-google&quot;</span></span><br><span class="line">  deep_check = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;terraform_comment_syntax&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;terraform_deprecated_index&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;terraform_deprecated_interpolation&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;terraform_documented_outputs&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;terraform_documented_variables&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;terraform_module_pinned_source&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;terraform_module_version&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;terraform_naming_convention&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;terraform_required_providers&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;terraform_required_version&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;terraform_standard_module_structure&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;terraform_typed_variables&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;terraform_unused_declarations&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;terraform_unused_required_providers&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;terraform_workspace_remote&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;google_composer_environment_invalid_machine_type&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;google_compute_instance_invalid_machine_type&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;google_compute_instance_template_invalid_machine_type&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;google_compute_reservation_invalid_machine_type&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;google_container_cluster_invalid_machine_type&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;google_container_node_pool_invalid_machine_type&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;google_dataflow_job_invalid_machine_type&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;google_project_iam_audit_config_invalid_member&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;google_project_iam_binding_invalid_member&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;google_project_iam_member_invalid_member&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule <span class="string">&quot;google_project_iam_policy_invalid_member&quot;</span> &#123;</span><br><span class="line">  enabled = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実運用上は利用しないルールを、個別にdisableにし、検知結果に対して運用が回るように調整していくことが重要かなと思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>TFLintを使うことで、<code>terraform validate</code>や<code>terraform plan</code>で検知できないエラーを見つけることができました。</p><p>RuleSetに限りがあるので全エラーを検知できるとまでいきませんが、TFLintを導入することで<code>terraform apply</code>で失敗するケースが減っていくと考えています。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20211223a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;431&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="TFLint" scheme="https://future-architect.github.io/tags/TFLint/"/>
    
  </entry>
  
  <entry>
    <title>Flutterの使いかた、環境構築から実装、ビルドまで</title>
    <link href="https://future-architect.github.io/articles/20211221a/"/>
    <id>https://future-architect.github.io/articles/20211221a/</id>
    <published>2021-12-20T15:00:00.000Z</published>
    <updated>2021-12-21T02:08:01.918Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p>フロントエンドアプリケーションの開発においてVue、Reactと触ってきましたがFlutterの開発も始めました。モバイルアプリ、WEBアプリ、更にはデスクトップアプリへの高いポータビリティが期待できる、Adobe XDでのデザインを高速にアプリケーションに反映できる、といった期待値が高いことが選定の理由です。</p><p>フューチャーでは<a href="/articles/20210510a/">Dart/Flutter連載</a>で様々なネタを取り上げましたが、汎用的なハウツー記事が意外と少なかったため書いてみました。</p><h1 id="Flutterとは"><a href="#Flutterとは" class="headerlink" title="Flutterとは"></a>Flutterとは</h1><p>FlutterはDart言語で実装されたアプリケーションフレームワークです。</p><p>元々はAndroid、iOS向けのモバイルアプリケーションを実装するためのSDKでしたが、<a href="https://flutter.dev/multi-platform/web">Flutter on the web</a>、<a href="https://flutter.dev/multi-platform/desktop">Flutter on Desktop</a>の公開により、Flutterで作っておけばどのようなプラットフォームであってもアプリケーションをリリースできる、という環境が整備されました。</p><p>執筆時点の2021年末ではFlutter on Desktopはまだリリースから日が浅いですが、モバイルでもPCでも使える共通コンポーネントを作りたい、というニーズを強力にサポートしてくれる事が期待できます。</p><h1 id="Flutterのインストール"><a href="#Flutterのインストール" class="headerlink" title="Flutterのインストール"></a>Flutterのインストール</h1><p>Flutterは<a href="https://flutter.dev/?gclid=Cj0KCQiAnuGNBhCPARIsACbnLzrdf197SlPULqzczv4M2p5mNGCENYpEki6GWdiN1kdeKzzJ_KishTcaAuDLEALw_wcB&gclsrc=aw.ds">公式サイト</a>からSDKをインストールすることで<code>flutter</code>コマンドが利用できるようになります。<code>flutter</code>コマンドはアプリケーションの初期構築、起動、依存モジュールの管理を行うことができます、<code>npm</code>コマンド+任意のフレームワークのCLIコマンドのような存在ですね。</p><p><a href="https://docs.flutter.dev/get-started/install">インストールページ</a>から各OS向けのSDKがダウンロードできます。2021年現在ではリッチなインストーラではなく、ダウンロードしたファイル一式を解凍後、任意の場所に配置し、自力でパスを通す必要があります。</p><p>下記のようなコマンドを<code>.bash_profile</code>等のファイルに記載してください。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=&quot;$PATH:[flutterフォルダが格納されているディレクトリ]/flutter/bin&quot;</span><br></pre></td></tr></table></figure><p>ファイルの中身は単一のバイナリではなく、サンプルコードやREADMEなど一式揃っており一瞬驚きますが、それら全てが必要です。</p><p>パスを通すと<code>flutter</code>コマンドが利用できるようになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ flutter --version</span><br><span class="line">Flutter 2.5.3 • channel stable • https://github.com/flutter/flutter.git</span><br><span class="line">Framework • revision 18116933e7 (9 weeks ago) • 2021-10-15 10:46:35 -0700</span><br><span class="line">Engine • revision d3ea636dc5</span><br><span class="line">Tools • Dart 2.14.4</span><br></pre></td></tr></table></figure><h1 id="doctorコマンドの利用"><a href="#doctorコマンドの利用" class="headerlink" title="doctorコマンドの利用"></a>doctorコマンドの利用</h1><p>Flutterにはdoctorコマンドというものが存在します。これは各プラットフォームにおける環境構築が終わっているかを確認できるコマンドです。</p><p>Flutterでモバイルアプリケーションを開発する場合、iOSではXcode、AndroidではAndroid Studioを利用してアプリケーションをビルド、デバッグすることになります。これら必要な開発ツールが揃っているかを確認し、何が必要かを教えてくれるのが<code>doctor</code>コマンドです。</p><p>flutterのインストールが終わったら、<code>doctor</code>コマンドを実行し、開発したいプラットフォーム向けの準備が終わっているかを確認しましょう。私はAndroid, iOS向けアプリケーションの開発経験が既にあったため、Android StudioのConfigを少し変更するだけで下記のように全ての準備が終わりました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ flutter doctor</span><br><span class="line">Doctor summary (to see all details, run flutter doctor -v):</span><br><span class="line">[✓] Flutter (Channel stable, 2.5.3, on Mac OS X 10.15.7 19H15 darwin-x64, locale ja-JP)</span><br><span class="line">[✓] Android toolchain - develop for Android devices (Android SDK version 30.0.3)</span><br><span class="line">[✓] Xcode - develop for iOS and macOS</span><br><span class="line">[✓] Chrome - develop for the web</span><br><span class="line">[✓] Android Studio (version 4.2)</span><br><span class="line">[✓] VS Code (version 1.62.3)</span><br><span class="line">[✓] Proxy Configuration</span><br><span class="line">[✓] Connected device (1 available)</span><br></pre></td></tr></table></figure><h1 id="アプリケーションを新規作成する"><a href="#アプリケーションを新規作成する" class="headerlink" title="アプリケーションを新規作成する"></a>アプリケーションを新規作成する</h1><p>環境構築が終わったら、アプリケーションを作成します。</p><p>どのような開発経験の方でも手早く試せるため、Flutter on the Webでの開発前提で説明します。Flutterは<code>flutter create</code>コマンドで、アプリケーションの雛形を生成することができます。<br>Flutterのプロジェクト名は<code>-</code>を含めることができません。</p><p>Androidアプリケーションとして公開する際の<code>applicationId</code>の命名規約に抵触することから<code>-</code>が利用できないようです。多くのflutter向けOSSパッケージは<code>_</code>区切りのスネークケースなので、それに倣うのが良いでしょう。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create hello_world</span><br></pre></td></tr></table></figure><p>コマンドを実行すると様々なファイルが自動生成され、下記のような案内が表示されます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">All done!</span><br><span class="line">In order to run your application, type:</span><br><span class="line"></span><br><span class="line">  $ cd hello_world</span><br><span class="line">  $ flutter run</span><br><span class="line"></span><br><span class="line">Your application code is in hello_world/lib/main.dart.</span><br></pre></td></tr></table></figure><p>指示通りにコマンドを実行するとサンプルアプリケーションが起動します。<br>Flutter on the Webが存在するおかげで、Xcode、Android Studioが無い状態でもとりあえず動かすことは可能です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd hello_world</span><br><span class="line">$ flutter run</span><br></pre></td></tr></table></figure><p>よくある公式ロゴ入りのHello Worldページではなく、ボタンを押すとカウンタの数が増えるというインタラクティブなデモアプリが起動するのが特徴的です。</p><img src="/images/20211221a/image.png" alt="サンプルアプリ画像" width="400" height="444" loading="lazy"><p>VueやReactに慣れていると<code>localhost:3000</code>や<code>localhost:8080</code>で起動しないのが違和感を覚えますが、Flutter on the Webの場合空いている適当なポートで起動します。</p><p>ポート番号を指定することも可能です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter run --web-port 8080</span><br></pre></td></tr></table></figure><p>モバイル、デスクトップの開発環境が整備されている場合、<code>-d</code>オプションで起動するプラットフォームを選択できます。<code>all</code>で実行可能な全てのプラットフォーム向けに同時起動できます、楽しいですね。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter run -d all</span><br></pre></td></tr></table></figure><h1 id="アプリケーションを開発するための知識"><a href="#アプリケーションを開発するための知識" class="headerlink" title="アプリケーションを開発するための知識"></a>アプリケーションを開発するための知識</h1><p>アプリケーションを起動することができたら、デモアプリケーションを編集し、任意のアプリケーションを開発していきます。</p><p><code>lib/main.dart</code>を編集することでアプリケーションを開発できます。</p><p>生成されたアプリケーションの<code>main.dart</code>を見てみます。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This widget is the root of your application.</span></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">      theme: ThemeData(</span><br><span class="line">        <span class="comment">// This is the theme of your application.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Try running your application with &quot;flutter run&quot;. You&#x27;ll see the</span></span><br><span class="line">        <span class="comment">// application has a blue toolbar. Then, without quitting the app, try</span></span><br><span class="line">        <span class="comment">// changing the primarySwatch below to Colors.green and then invoke</span></span><br><span class="line">        <span class="comment">// &quot;hot reload&quot; (press &quot;r&quot; in the console where you ran &quot;flutter run&quot;,</span></span><br><span class="line">        <span class="comment">// or simply save your changes to &quot;hot reload&quot; in a Flutter IDE).</span></span><br><span class="line">        <span class="comment">// Notice that the counter didn&#x27;t reset back to zero; the application</span></span><br><span class="line">        <span class="comment">// is not restarted.</span></span><br><span class="line">        primarySwatch: Colors.blue,</span><br><span class="line">      ),</span><br><span class="line">      home: <span class="keyword">const</span> MyHomePage(title: <span class="string">&#x27;Flutter Demo Home Page&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyHomePage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyHomePage(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.title&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This widget is the home page of your application. It is stateful, meaning</span></span><br><span class="line">  <span class="comment">// that it has a State object (defined below) that contains fields that affect</span></span><br><span class="line">  <span class="comment">// how it looks.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// This class is the configuration for the state. It holds the values (in this</span></span><br><span class="line">  <span class="comment">// case the title) provided by the parent (in this case the App widget) and</span></span><br><span class="line">  <span class="comment">// used by the build method of the State. Fields in a Widget subclass are</span></span><br><span class="line">  <span class="comment">// always marked &quot;final&quot;.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;MyHomePage&gt; createState() =&gt; _MyHomePageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyHomePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> _counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _incrementCounter() &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      <span class="comment">// This call to setState tells the Flutter framework that something has</span></span><br><span class="line">      <span class="comment">// changed in this State, which causes it to rerun the build method below</span></span><br><span class="line">      <span class="comment">// so that the display can reflect the updated values. If we changed</span></span><br><span class="line">      <span class="comment">// _counter without calling setState(), then the build method would not be</span></span><br><span class="line">      <span class="comment">// called again, and so nothing would appear to happen.</span></span><br><span class="line">      _counter++;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// This method is rerun every time setState is called, for instance as done</span></span><br><span class="line">    <span class="comment">// by the _incrementCounter method above.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The Flutter framework has been optimized to make rerunning build methods</span></span><br><span class="line">    <span class="comment">// fast, so that you can just rebuild anything that needs updating rather</span></span><br><span class="line">    <span class="comment">// than having to individually change instances of widgets.</span></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        <span class="comment">// Here we take the value from the MyHomePage object that was created by</span></span><br><span class="line">        <span class="comment">// the App.build method, and use it to set our appbar title.</span></span><br><span class="line">        title: Text(widget.title),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        <span class="comment">// Center is a layout widget. It takes a single child and positions it</span></span><br><span class="line">        <span class="comment">// in the middle of the parent.</span></span><br><span class="line">        child: Column(</span><br><span class="line">          <span class="comment">// Column is also a layout widget. It takes a list of children and</span></span><br><span class="line">          <span class="comment">// arranges them vertically. By default, it sizes itself to fit its</span></span><br><span class="line">          <span class="comment">// children horizontally, and tries to be as tall as its parent.</span></span><br><span class="line">          <span class="comment">//</span></span><br><span class="line">          <span class="comment">// Invoke &quot;debug painting&quot; (press &quot;p&quot; in the console, choose the</span></span><br><span class="line">          <span class="comment">// &quot;Toggle Debug Paint&quot; action from the Flutter Inspector in Android</span></span><br><span class="line">          <span class="comment">// Studio, or the &quot;Toggle Debug Paint&quot; command in Visual Studio Code)</span></span><br><span class="line">          <span class="comment">// to see the wireframe for each widget.</span></span><br><span class="line">          <span class="comment">//</span></span><br><span class="line">          <span class="comment">// Column has various properties to control how it sizes itself and</span></span><br><span class="line">          <span class="comment">// how it positions its children. Here we use mainAxisAlignment to</span></span><br><span class="line">          <span class="comment">// center the children vertically; the main axis here is the vertical</span></span><br><span class="line">          <span class="comment">// axis because Columns are vertical (the cross axis would be</span></span><br><span class="line">          <span class="comment">// horizontal).</span></span><br><span class="line">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class="line">          children: &lt;Widget&gt;[</span><br><span class="line">            <span class="keyword">const</span> Text(</span><br><span class="line">              <span class="string">&#x27;You have pushed the button this many times:&#x27;</span>,</span><br><span class="line">            ),</span><br><span class="line">            Text(</span><br><span class="line">              <span class="string">&#x27;<span class="subst">$_counter</span>&#x27;</span>,</span><br><span class="line">              style: Theme.of(context).textTheme.headline4,</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: _incrementCounter,</span><br><span class="line">        tooltip: <span class="string">&#x27;Increment&#x27;</span>,</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.add),</span><br><span class="line">      ), <span class="comment">// This trailing comma makes auto-formatting nicer for build methods.</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Flutterアプリケーションは最初に説明した通りDartで実装されたアプリケーションであり、更にはそれがFlutterアプリとして抽象化されているため、慣れるまでは少し時間がかかるかもしれません。</p><p>まずは雰囲気で最初に表示された画面のコンポーネントと、画面の状態を管理するステート、ボタンを操作した際にカウンタをインクリメントする関数が書いてあることを感じてみるくらいの所からスタートすることになるかなと思います。</p><p>ここからDartの文法、Flutterのお作法を学んでいきましょう。</p><h2 id="Widgetについて"><a href="#Widgetについて" class="headerlink" title="Widgetについて"></a>Widgetについて</h2><p>Flutterアプリケーションは画面のコンポーネントをWidgetという単位で開発します。</p><p>モバイルアプリが出自であるため、Vue、ReactなどHTMLを意識したコンポーネントの書き方に慣れたWEBフロントエンジニア出身の人よりはSwiftのようなモバイルアプリ開発に慣れている方の方が親しみを覚えやすい書き方をする事になります。</p><p><a href="https://docs.flutter.dev/development/ui/widgets">Flutter公式ドキュメント</a>からどのようなWidgetが存在しているのかを一通り眺めておくとやりたい事と出来る事のイメージが掴みやすいです。<a href="https://docs.flutter.dev/development/ui/widgets/basics">Basics</a>、<a href="https://docs.flutter.dev/development/ui/widgets/layout">Layout</a>、<a href="https://docs.flutter.dev/development/ui/widgets/text">Text</a>あたりから攻めてみて、サーバーサイドから取得した情報を取得したい、といった要望に応えるために<a href="https://docs.flutter.dev/development/ui/widgets/async">Async Widgets</a>あたりに早期に触れるような流れが自然でしょうか。</p><p><a href="https://future-architect.github.io/articles/20210513b/">Flutterレイアウト入門</a>、<a href="https://future-architect.github.io/articles/20210519a/">Flutter ウィジェットテスト入門</a>も合わせてお読みください。</p><h2 id="Stateについて"><a href="#Stateについて" class="headerlink" title="Stateについて"></a>Stateについて</h2><p>他のフレームワークでのフロントエンドアプリケーションの開発で馴染みがある人がいるかもしれませんが、Stateは日本語にすると「状態」を意味します。WidgetのStateとは文字通りWidgetが持っている状態の変化を管理するための概念です。ユーザーの操作によって変更が起こりうる要素、外部APIから取得したデータなど、動的に変化する情報をStateとして扱い、管理します。</p><p>デモアプリではユーザーがボタンを押した時に画面中央のカウントが更新される部分が該当します。<code>int _counter = 0;</code>で宣言した変数<code>_counter</code>にカウント情報を保存し、状態を更新し、画面を再描画するために、<code>setState()</code>関数の内部で変数の値を更新する関数、<code>_incrementCounter()</code>が実装されています。</p><p>Reactなど近年のフロントエンド フレームワークでは、画面の状態を管理することで、状態が更新された場合コンポーネント単位での再描画を行う、更新のないコンポーネントは再描画しない、という必要最小限の画面更新を行う仕組みでアプリケーションのパフォーマンスが高くなるように設計されています。Flutterもその仕組みを採用しており、状態管理を行っているということですね。FlutterではStateを持たない<code>StatelessWidget</code>、State管理の仕組みを備えた<code>StatefulWidget</code>の２種類のWidgetが存在します。</p><p>状態管理については武田さんのアドベントカレンダー記事に詳しいです。</p><ul><li><a href="https://qiita.com/datake914/items/f91acf30a640447c57c8">【2021年版】Flutterの状態管理パターン総まとめ - Qiita</a></li></ul><h2 id="パッケージ管理について"><a href="#パッケージ管理について" class="headerlink" title="パッケージ管理について"></a>パッケージ管理について</h2><p>デモアプリから発展して高度なアプリケーションを開発するにあたり、何らかのライブラリを導入する事になるでしょう。</p><p>FlutterではFlutterに向けて作られたものは勿論、Dart向けのライブラリをインポートできます。Flutterアプリでは依存モジュールを<code>pubspec.yaml</code>というファイルで管理しています。Node.jsでいうところの<code>package.json</code>、Goでいうところの<code>go.mod</code>のようなファイルです。ライブラリを追加、削除するには<code>flutter pub</code>コマンドを利用します。</p><p>例えばFlutterでは拡大、縮小可能な画像を表示する<a href="https://pub.dev/packages/photo_view">photo_viewパッケージ</a>があります。インポートするだけで画像をカッコよく表示するWidgetが使えるようになります。</p><p><code>flutter pub add</code>コマンドでパッケージをインストールします。Dartパッケージのサイトでは簡単なコマンドであっても<a href="https://pub.dev/packages/photo_view/install">インストールの手法</a>、<a href="https://pub.dev/packages/photo_view/example">実装サンプル</a>が整備されています。</p><p>サンプルだけでなく、<a href="https://pub.dev/documentation/photo_view/latest/">APIリファレンス</a>も見れば使い方は概ね分かると思います。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ flutter pub add photo_view</span><br></pre></td></tr></table></figure><p>パッケージをインストールし、import行を追加することで、パッケージの機能やWidgetが使えるようになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;package:photo_view/photo_view.dart&#x27;;</span><br></pre></td></tr></table></figure><p><code>photo_view</code>をimportするとWidgetとして<code>PhotoView()</code>を利用できるようになります。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@override</span></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> PhotoView(imageProvider: AssetImage(<span class="string">&quot;assets/large-image.jpg&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実際にはレイアウトを調整するため他のWidgetと組み合わせて使うことになると思いますが、Flutterではこのような形でサードパーティのモジュールを簡単に導入することができます。</p><p>導入したパッケージを削除する場合は<code>remove</code>コマンドが利用できます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dart pub remove photo_view</span><br></pre></td></tr></table></figure><p>他の人が作成したFlutterアプリケーションをgit cloneするなどの形で開発する場合は、<code>flutter pub get</code>コマンドで依存モジュールをダウンロードできます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter pub get</span><br></pre></td></tr></table></figure><h1 id="アプリケーションのビルド"><a href="#アプリケーションのビルド" class="headerlink" title="アプリケーションのビルド"></a>アプリケーションのビルド</h1><p>アプリケーションが完成したら、対象のプラットフォーム向けにビルドします。</p><p>ビルドにおいてもスマートフォンアプリとしてビルドする場合はXcode, Android Studioでの環境構築が必要です。ここでもFlutter on the Webでの例を記載します。</p><p>アプリケーションのビルドは<code>flutter build</code>コマンドで行います。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter build web</span><br></pre></td></tr></table></figure><p>対象プラットフォームを指定してビルドコマンドを実行すると、ビルドが開始されます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ flutter build web</span><br><span class="line"></span><br><span class="line">💪 Building with sound null safety 💪</span><br><span class="line"></span><br><span class="line">Compiling lib/main.dart for the Web...</span><br></pre></td></tr></table></figure><p>コマンド実行が成功すると<code>build</code>フォルダに成果物がビルドされます。</p><img src="/images/20211221a/image_2.png" alt="image.png" width="1120" height="382" loading="lazy"><p>webフォルダの中身には<code>index.html</code>をはじめ各種ファイルが生成されています。</p><img src="/images/20211221a/image_3.png" alt="image.png" width="1106" height="548" loading="lazy"><p>これら一式を<a href="https://firebase.google.com/?hl=ja">Firebase</a>や<a href="https://docs.github.com/ja/pages/getting-started-with-github-pages/about-github-pages">GitHub Pages</a>静的サイトとしてホスティングできるサービスにそのまま配置するような使い方でFlutterアプリをデプロイできます。</p><p>ビルドされた<code>index.html</code>をそのままダブルクリックしてブラウザで開いても正常に動作しません。これは<code>main.dart.js</code>がサーバーでホストされている前提で動こうとするためです。</p><p>実際にデプロイしてみても良いですが、環境を用意するのが面倒な場合は、<a href="/articles/20210512a/">Goのサーバーの管理画面をFlutter Webで作ってみるための調査</a>の「Goのアプリケーションに組み込む」のように<code>localhost</code>でホスティングするような手法で試すこともできます。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Flutterの環境構築から開発手法、ビルドまでの流れを紹介しました。</p><p>高度なアプリケーション開発のtipsやAndroid、 iOS向け、更には各OSのデスクトップアプリでの環境構築、ビルド、リリース手法など深堀りする余地はたくさんありますが、ひとまず流れとしては以上になります。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;フロントエンドアプリケーションの開発においてVue、Reactと触ってきましたがFlutterの開発も始めました。モバイルアプリ、WEBアプリ、更にはデスクトップアプリへの高いポータビリティが期待できる、Adobe</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="環境構築" scheme="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/"/>
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="Dart" scheme="https://future-architect.github.io/tags/Dart/"/>
    
    <category term="flutter_web" scheme="https://future-architect.github.io/tags/flutter-web/"/>
    
  </entry>
  
  <entry>
    <title>JavaのDockerイメージ何選ぶ？</title>
    <link href="https://future-architect.github.io/articles/20211220a/"/>
    <id>https://future-architect.github.io/articles/20211220a/</id>
    <published>2021-12-19T15:00:00.000Z</published>
    <updated>2021-12-20T03:18:17.004Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20211220a/top.png" alt="" width="1000" height="514"><p><a href="https://qiita.com/advent-calendar/2021/java">Javaアドベントカレンダー</a>にエントリーした記事になります。</p><p>Javaのイメージを作る上で、どのDockerイメージをベースに選べばいいのか、というのを軽く調べ始めたら、選択肢がたくさんでてきたので、ちょっと突っ込んで調べてみました。</p><p>以前、<a href="/articles/20200513/">仕事でPythonコンテナをデプロイする人向けのDockerfile (1): オールマイティ編</a>で書いたOS名とかは今回は紹介しませんので、busterとかalpineとかwindowsservercoreってなによ？というお話はそちらの記事を参照してください。一点アップデートがあるのは、Debian 11がリリースされて、イメージとしてbullseyeというのが追加された点ですね。あとはfocal=Ubuntu 20.04LTSというのを覚えてもらえれば。</p><h1 id="JDK周りのニュース"><a href="#JDK周りのニュース" class="headerlink" title="JDK周りのニュース"></a>JDK周りのニュース</h1><p>Oracle JDKが無償配布をやめて、無償利用としてはOpenJDKを、という案内を出したのち、Java 17のときにまた無償配布を再開した、というのが大きなニュースですね。</p><p><a href="https://www.publickey1.jp/blog/21/oracle_jdkjava_17.html">https://www.publickey1.jp/blog/21/oracle_jdkjava_17.html</a></p><p>その間、いくつかのOpenJDKのディストリビューションが発表されました。AmazonとMicrosoftですね。</p><p>OpenJDK回りのトピックといえば、<a href="https://www.infoq.com/jp/news/2020/06/adoptopenjdk-eclipse-adoptium/">AdoptOpenJDKがEclipseに移管</a>となったというのがあります。AdoptOpenJDKはDocker公式イメージがありましたが、現在ではdeprecatedになっています。</p><p>OpenJDKでパッチも上流のプロジェクトで管理されているのでいまのところ大きな違いはなさそうです。独自にサポート期間を延ばしたりという違いがあったりします。</p><h1 id="DockerのJDKディストリビューション"><a href="#DockerのJDKディストリビューション" class="headerlink" title="DockerのJDKディストリビューション"></a>DockerのJDKディストリビューション</h1><p>今、きちんとメンテナンスされていそうな公式イメージ系は次の5つかと思います</p><ul><li><a href="https://hub.docker.com/_/eclipse-temurin">https://hub.docker.com/_/eclipse-temurin</a></li><li><a href="https://hub.docker.com/_/openjdk">https://hub.docker.com/_/openjdk</a></li><li><a href="https://hub.docker.com/_/maven">https://hub.docker.com/_/maven</a></li><li><a href="https://hub.docker.com/_/amazoncorretto">https://hub.docker.com/_/amazoncorretto</a></li><li><a href="https://hub.docker.com/_/ibmjava">https://hub.docker.com/_/ibmjava</a></li></ul><p>あとはGCR側にある注目すべきものとしてはdistrolessのJavaもあります。</p><ul><li>gcr.io/distroless/java11-debian11</li><li>gcr.io/distroless/java17-debian11</li></ul><p>Docker officialではなくて、verfied publisherのJDKだと、本家OracleやMicrosoftのもありました。</p><ul><li><a href="https://hub.docker.com/_/oracle-jdk">https://hub.docker.com/_/oracle-jdk</a></li><li><a href="https://hub.docker.com/_/microsoft-java-jdk">https://hub.docker.com/_/microsoft-java-jdk</a></li></ul><p>GraalVMはGitHubのコンテナレジストリにありました。</p><ul><li><a href="https://github.com/graalvm/container/pkgs/container/graalvm-ce/versions">https://github.com/graalvm/container/pkgs/container/graalvm-ce/versions</a></li></ul><h2 id="Eclipse-Temurin"><a href="#Eclipse-Temurin" class="headerlink" title="Eclipse Temurin"></a>Eclipse Temurin</h2><p>Adoptiumがプロジェクト名で、Temurinがソフトウェア名ですかね？ RedHat, IBM, Microsoftが母体となって作ったAdoptOpenJDKがEclipseに移管されたものがこれです。もともとはEclipse OpenJ9という別バージョンのJVMがあったりと細かくバリエーションがあったのは、少し整理されて減っているように思います。</p><p>Javaのバージョンとしては8, 11, 16, 17を提供しており、8と11のみJREも提供されています。</p><p>OS名をつけないデフォルトがWindowsServerCoreでサイズが圧縮されて6GBという富豪な感じです。ベースのOSはWindows系が充実していてNanoServerとかもあります。LinuxはUbuntuとAlpineでDebianはなし。</p><h2 id="OpenJDK"><a href="#OpenJDK" class="headerlink" title="OpenJDK"></a>OpenJDK</h2><p>Dockerコミュニティがメンテナンスしているイメージです。<code>https://hub.docker.com/_/java</code>というURLでアクセスしてもここにリダイレクトされます。12以降はOracleがビルドしたOpenJDKをバンドルと説明には書かれています。</p><p>Javaのバージョンとしては8から19(途中9とかLTSでないのはいくつか欠番)と一番充実しています。JREは8と11にのみ提供されています。</p><p>ベースのOSはDebian系で、OracleLinux7/8、WindowsServerCore、Alpineもあります。</p><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>個人がメンテナーなオフィシャルイメージです。Mavenが主ですが、バンドルするJDKがOpenJDK/Amazon Corretto、　Eclipse　Temurin、IBM Javaと多様です。</p><p>ベースのOSはDebian系で、Alpineもあります。</p><h2 id="Amazon-Corretto"><a href="#Amazon-Corretto" class="headerlink" title="Amazon Corretto"></a>Amazon Corretto</h2><p>Amazonが独自にサポート期間を延長してサポートしていることで話題になったのがAmazon Correttoです。</p><p>JavaのバージョンはLTSの8, 11, 17です。8だけJREも提供されています。</p><p>OSはベースはAmazon Linuxで、Alpineも提供されています。</p><h2 id="IBM-Java"><a href="#IBM-Java" class="headerlink" title="IBM Java"></a>IBM Java</h2><p>昔からJavaでは名を馳せていたIBMです。OpenJ9はIBMの成果ですが、ここではなくてAdoptOpenJDK側での提供となっています（そちらはDeprecatedですが)。</p><p>Javaのバージョンは8, 9, 11で、なぜか9が入っています。それぞれJDKとJREを提供しているほか、Small Footprint JRE（SFJ）というさらにコンパクトなJREが提供されているのが特徴です。</p><p>ベースのOSとしてはUbuntuとAlpineです。</p><h2 id="Distroless"><a href="#Distroless" class="headerlink" title="Distroless"></a>Distroless</h2><p>シェルがなくて中に入れないのでセキュアというのでお馴染みのDistrolessです。</p><p>提供バージョンは8と11のみで、JREのみです。対応OSはDebian11のみというシンプル構成です。</p><p>なお、:debugタグをつけるとBusyBoxによるシェルのログインできるようになりますが、JDKもインストールされるようになります。他のDistrolessだとBusyBoxの容量の違いしかないのに、なぜか容量が2倍違うという。</p><h2 id="OracleJDK"><a href="#OracleJDK" class="headerlink" title="OracleJDK"></a>OracleJDK</h2><p>ページを見るとタグ情報がなく、名前と連絡先を入れるContact Formに入力しないと詳しく知れない謎イメージです。説明を見ると、JDK 11の有料時代のものっぽいのですが、17になった後の更新は行われていない？詳しく見ていないです。</p><h2 id="Microsoft-OpenJDK"><a href="#Microsoft-OpenJDK" class="headerlink" title="Microsoft OpenJDK"></a>Microsoft OpenJDK</h2><p>Azul Zulu for Azureという、早口言葉？というのが正式名称のMicrosoftのOpenJDKビルドです。イメージ自体はA独自のコンテナレジストリに登録されています。”Microsoft Azure, Azure Functions (anywhere), Azure Stack, or Microsoft SQL Server”で使う前提とのことです。</p><p>Javaバージョンが広く、7から17までサポートしており、それぞれでJDK, JRE, Headless JRE, Maven, Tomcat付きなど幅広いです。17のJREは他では見当たらないので貴重ですね。</p><p>OSもWindowsServerCore、NanoServerは当然のこと、Linuxサポートが手厚く、Ubuntu 18.04, 20.04, Debian 8/9/10, CentOS、Alpineもサポートしています。DebianはSlimがいないのが残念。</p><h2 id="GraalVM"><a href="#GraalVM" class="headerlink" title="GraalVM"></a>GraalVM</h2><p>PolyglotなJVMかつネイティブ化をサポートしたGraalVMです。</p><p>こちらは8, 11, 17のバージョンが提供されております。また、ネイティブ化のためのツールであるnative imageのパッケージ（イメージ）も提供されています。</p><p>OSとしてはOracle Linux7/8です。</p><h1 id="どのイメージを使うか？"><a href="#どのイメージを使うか？" class="headerlink" title="どのイメージを使うか？"></a>どのイメージを使うか？</h1><p>結構書き出してみたら特徴が色々だったので、ニーズが明確であれば選びやすいんじゃないか、と思いました。</p><p>今回、CPUアーキテクチャは紹介しませんでしたが、特殊なアーキテクチャやOSを使いたい、ということであればそれで絞られるでしょう。例えば、AWSで動かすからAmazon Linuxがいい、とかがあれば、Corretto一択になります。そんな感じで絞れると思います。</p><p>それ以外だと、今時はマルチステージビルドが当たり前の選択になると思います。Javaの場合はJDKがビルドイメージで、実行イメージはJREになると思うので、そのペアが提供されているかどうかでかなり絞れます。というか、Javaのバージョンまで結構限定されちゃいますね。DistrolessとMicrosoft以外は8, 11のLTS以外は基本的にJREはないので・・・それ以外でマルチステージビルドをしたいのであればMicrosoftのJDK一択ですね。</p><p>Distrolessを使いたい場合も最終イメージは一意に決まります。ビルドイメージはOpenJDKですね。MicrosoftはDebian 11がないので。</p><p>GraalVMの場合はネイティブイメージになるのでその後はランタイムなしのイメージでも動くのかどうか、ちょっと実験したいところです。あるいはdebian-slim系とかDistrolessで行けるかどうか。</p><p>それ以外の場合はなんでも良さそうですが、<a href="/articles/20200513/#Python%E3%81%AE%E3%83%99%E3%83%BC%E3%82%B9%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E9%81%B8%E3%81%B3">PythonではAlpineを使うとパフォーマンスが大幅に落ちる</a>ということを紹介したのですが、<a href="https://medium.com/rocket-travel/alpine-vs-debian-images-for-java-jvm-builds-b8f8e1cc58a8">Alpineでメモリ回りが遅いのはJavaも同様</a>とのことなので、Alpineは外しても良いと思います。</p><p>個人的には2021年末現在だとこんな感じかな、と思っています。OSバージョンを指定しないとうっかりメジャーバージョンアップは影響が大きいので、bullseyeは省略しない方向で。OpenJDKのbullseyeな11/17あたりのJDKでビルドして、デプロイもシェルが必要ならOpenJDKのbullseye-slimのJRE、シェルがなければDistrolessあたりの組み合わせが無難でいいんじゃないかな、と思いました。面白みはないですが。17のJREというと、提供はMicrosoftしかないのですが、Azure用みたいに書いてあるので、その前提で。</p><div class="scroll"><table><thead><tr><th align="left">構成</th><th align="left">ビルド用イメージ</th><th align="left">実行用イメージ</th></tr></thead><tbody><tr><td align="left">11</td><td align="left">oopenjdk:11-jdk-slim-bullseye</td><td align="left">openjdk:11-jre-slim-bullseye</td></tr><tr><td align="left">11 distroless</td><td align="left">openjdk:11-jdk-slim-bullseye</td><td align="left">gcr.io/distroless/java11-debian11</td></tr><tr><td align="left">17 (Azure用)</td><td align="left">mcr.microsoft.com/java/jdk:17-zulu-debian10</td><td align="left">mcr.microsoft.com/java/jre-headless:17-zulu-debian10</td></tr><tr><td align="left">17 distroless</td><td align="left">oopenjdk:17-jdk-slim-bullseye</td><td align="left">gcr.io/distroless/java11-debian17</td></tr></tbody></table></div><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="/articles/20200513/">仕事でPythonコンテナをデプロイする人向けのDockerfile (1): オールマイティ編</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20211220a/top.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;514&quot;&gt;

&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Java" scheme="https://future-architect.github.io/tags/Java/"/>
    
    <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
    <category term="コンテナビルド" scheme="https://future-architect.github.io/tags/%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%83%93%E3%83%AB%E3%83%89/"/>
    
  </entry>
  
  <entry>
    <title>Software Design 2022年1月号に短期連載「Cypressで作る&quot;消耗しない&quot;E2Eテスト環境」を寄稿しました</title>
    <link href="https://future-architect.github.io/articles/20211218a/"/>
    <id>https://future-architect.github.io/articles/20211218a/</id>
    <published>2021-12-17T15:00:00.000Z</published>
    <updated>2021-12-17T07:41:36.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。CSIG所属、踊るエンジニア木戸です。<br>12/18発売の、<a href="https://gihyo.jp/magazine/SD/archive/2022/202201">Software Design 2022年1月号</a>に短期連載「Cypressで作る”消耗しない”E2Eテスト環境」を寄稿しました！</p><img src="/images/20211218a/image.png" alt="" width="500" height="713" loading="lazy"><p>連載は1月号から3月号に渡って計3回掲載予定であり、1月号は木戸、2月号はCSIG枇榔さん、3月号はTIG渋川さんが、テストツールCypressについて詳しく紹介します。1月号発売に伴って、簡単に宣伝させていただきます。</p><h1 id="コンテンツ"><a href="#コンテンツ" class="headerlink" title="コンテンツ"></a>コンテンツ</h1><p>連載では、E2Eテストのフレームワークである「<a href="https://www.cypress.io/">Cypress</a>」の基本的な使い方やその特徴、さらにはよりアドバンスドな使い方までを紹介します。</p><p>E2Eテストとは、「End To Endテスト」の略であり、ユーザが利用するのと同じようにシステム全体をテストします。</p><p>抜け漏れなくテストする必要があるため、かかる労力は膨大です。また、テスト者の未成熟などによりテストが正しく行われない可能性もあります。自動化することでコスト削減＆品質向上を狙おう、ということで、E2Eテストを快適にしてくれる「Cypress」の出番です。</p><p><a href="/tags/Cypress/">Future Tech Blogでも何度か取り上げて</a>おり、注目を集めているツールですので、連載が皆様のお役に立てること間違いなしです！</p><p>連載第1回目である1月号では次のようなコンテンツを含んでいます。</p><ul><li>E2Eテストとは何か</li><li>テスト自動化のメリット・デメリット</li><li>E2Eテストを自動化するツールの比較</li><li>Cypressの説明・使い方<ul><li>テスト構築編</li><li>テスト記述編</li><li>テスト実行編</li><li>デバック編</li></ul></li></ul><p>記事を読んだ読者が、「Cypressを使って簡単なE2Eテストの自動化ができる状態である」ことを目標に丁寧に解説していますので、ぜひご購読ください！</p><p>また、連載第2回目では「メンテナンス性の高いテストコードを書くコツや並列での実行といったCypressをより活用する方法」について、連載第3回目では「よりE2Eテストの”ストレスを減らす”基本機能」について、解説・紹介する予定ですので、こちらもこうご期待ください！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。CSIG所属、踊るエンジニア木戸です。&lt;br&gt;12/18発売の、&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="出版" scheme="https://future-architect.github.io/tags/%E5%87%BA%E7%89%88/"/>
    
    <category term="SoftwareDesign" scheme="https://future-architect.github.io/tags/SoftwareDesign/"/>
    
    <category term="Cypress" scheme="https://future-architect.github.io/tags/Cypress/"/>
    
  </entry>
  
  <entry>
    <title>画面の解像度の要件定義の話</title>
    <link href="https://future-architect.github.io/articles/20211207a/"/>
    <id>https://future-architect.github.io/articles/20211207a/</id>
    <published>2021-12-06T15:00:00.000Z</published>
    <updated>2021-12-12T13:33:00.817Z</updated>
    
    <content type="html"><![CDATA[<p>最近、企業内システムのウェブサービス開発や、B2B2B案件とかでウェブの画面を作るケース、Flutterでスマートフォンアプリを開発するときに、画面の要件をどうしましょう、という話が出てくることが多く、毎回似たような説明をしている気がするので、時間節約のためにまとめておきます。</p><p>単にパソコンやモニターのカタログスペックを持ってくるだけじゃだめだということがお分かりいただければ大丈夫です。</p><h1 id="解像度の論理と物理"><a href="#解像度の論理と物理" class="headerlink" title="解像度の論理と物理"></a>解像度の論理と物理</h1><p>AppleがRetinaを世に出すまでは、基本的にコンピュータが想定するdpi値はほぼ同じでした。dpiというのはインチあたりのドット数で、10ポイントのフォント、といった文字の表示の時の基準になる単位です。同じポイントのテキストであれば、ピクセルサイズの絵として画面に表示されていました。</p><p>iPhoneは2010年のiPhone 4から2倍解像度になってRetinaと名付けられたディスプレイが搭載されました。MacBook Proも2012年から搭載されていました。人間の目には今の解像度は荒すぎるので、人間の目が知覚できるよりも細かいドットにすると、最高の表示になるぞ、という理屈でした。Windowsも対抗して最近は解像度が上がってきています。Windows 10/11になってこのあたりもだいぶこなれてきたように思います。</p><p>解像度が上がりましたが、表示される情報量がそのまま増えたわけではありません。ここで出てきたのがスケーリングという考えです。200%であれば、縦横2倍の解像度で表示されます。テキストとしては2倍の大きさでレンダリングされます。絵にすると次のような感じです。点の数は縦横2倍になっているが、内部で2倍の大きさにして表示するので、見た目の大きさは変わらないぞ、と。</p><img src="/images/20211207a/a.png" alt="a.png" width="434" height="214" loading="lazy"><p>ソフトウェアとしては、スケーリングの比率で割り算した少ない方のピクセル数でレイアウトをしていきます。OSや絵を作るライブラリはこのピクセル数の描画指示に対して、表示用の高いピクセル数の絵を作って表示します。低い方の解像度がこのエントリーで論理解像度と呼んでいるもので、CSS解像度とも呼ばれます。ウェブの世界やFlutterとかでも、だいたいこの解像度を基準にしてレイアウトを行います。</p><h1 id="デフォルトはどうなっているのか？"><a href="#デフォルトはどうなっているのか？" class="headerlink" title="デフォルトはどうなっているのか？"></a>デフォルトはどうなっているのか？</h1><p>デスクトップは条件が変わりすぎるので、ノートパソコン前提で考えてみます。近年はかなり低スペックなメモリ4GB最低価格PCでない限りは、エントリークラスでもFullHDな機種が増えてきました。Dellサイトを見ても、執筆時点では法人向けで見ても344機種中23機種で6.6%ぐらいしかFullHD未満の解像度の機種がありません。個人向けだと301機種中6機種で2%ですね。</p><p>とはいえ、論理解像度がどうなっているかを見てみないことには油断はできません。手元の各種ノートパソコンのデフォルト設定はこんな感じですね。まあ僕はまず最初に等倍にしてしまいますがね（老眼でないアピール）。MacBook Pro13/15はデフォルトは同じなの面白いですね。</p><div class="scroll"><table><thead><tr><th align="left">機種</th><th align="center">物理解像度</th><th align="center">デフォルトスケール</th><th align="center">推奨論理解像度</th></tr></thead><tbody><tr><td align="left">MacBook Pro 13(2020), MacBook Air(2020 Early)</td><td align="center">2560x1600</td><td align="center">177%</td><td align="center">1440x900</td></tr><tr><td align="left">MacBook Pro 15(2014)</td><td align="center">2880x1800</td><td align="center">200%</td><td align="center">1440x900</td></tr><tr><td align="left">ASUS Zephyrus G14(2020)</td><td align="center">2560x1440</td><td align="center">200%</td><td align="center">1280x720</td></tr><tr><td align="left">HP Chromebook x360 14</td><td align="center">1920x1080</td><td align="center">125%</td><td align="center">1536x864</td></tr><tr><td align="left">HP Elitebook 830</td><td align="center">1920x1080</td><td align="center">150%</td><td align="center">1280x720</td></tr><tr><td align="left">外部モニタ(4K, 24インチ)</td><td align="center">3840x2160</td><td align="center">200%</td><td align="center">1920x1080</td></tr><tr><td align="left">テレビ(4K, 55インチ)</td><td align="center">3840x2160</td><td align="center">200%</td><td align="center">1920x1080</td></tr></tbody></table></div><p>論理解像度は設定のディスプレイの中にいます。下の例はElitebookですが、しっかりと「推奨」って書いてありますね。どうやら、プラグアンドプレイで取得したディスプレイの画面サイズと解像度から計算されているようです。</p><img src="/images/20211207a/image.png" alt="image.png" width="696" height="340" loading="lazy"><p>macはスケーリングの割合は出てこないのですが、ディスプレイの設定で擬似解像度として表示されていますので計算可能です。</p><img src="/images/20211207a/スクリーンショット_2021-12-03_19.11.32.png" alt="スクリーンショット_2021-12-03_19.11.32.png" width="1200" height="880" loading="lazy"><p>だいたいOSが違っても、実解像度が変わっても論理解像度はそれほど差がないことが分かります（テレビ以外）。スケーリングの話は、アップル以外のカタログスペックには載ってないのですが、画面を作る時の基準はこれぐらいにしておくと無難であることが分かります。視力の都合で大きくする方は、まあ自己責任というか、その分大きなモニターを導入してくださいね、という話にできるかと思います。テレビは遠くから見るということで荒めになっているのですかね。</p><p>お客さんと話をするときは最低スペックは論理解像度で1280x720、スケーリングは推奨値、という情報も添えて話ができればいいかと思います。もちろん、デスクトップや外付けディスプレイで、論理解像度がFullHDという環境もあると思います。その場合はもちろん、それに合わせます。論理解像度で話ができなければ、現時点でノートパソコンの市販のPCがほぼFullHDなので、物理解像度でFullHDで話をしてしまってもいいかと思います（ただし、スケーリングは推奨値ということはry）。</p><p>開発する側としては、ターゲットをきちんと論理解像度で押さえておき、開発時の検証を行う必要があります。</p><h1 id="OSの最低解像度"><a href="#OSの最低解像度" class="headerlink" title="OSの最低解像度"></a>OSの最低解像度</h1><p>参考までに、OSの最低解像度も調べておきました。</p><p><a href="https://www.microsoft.com/ja-jp/windows/windows-10-specifications">Windows 10</a>は800x600となっています。スケーリング情報はないですが、最低限なのでスケーリング100%かと思います。とはいえ、この解像度だとタスクバーの分を引くとかなり狭いです。Windows 11は横は決まってませんが、<a href="https://www.microsoft.com/en-us/windows/windows-11-specifications">縦は720p</a>です。まあ1280x720を想定すればいいかと思います。安いのはたいてい16:9でしょうし。</p><p>macはRetina対応してないMacBook Air 11(Mid 2012)が<a href="https://endoflife.date/macos">現在サポートされているmacOS 10.15</a>がサポートする中で最低解像度の機種ですので、最低でも1366×768ですかね。問題はなさそうですね。現行機種では13インチMacBook Pro/Airで1440x900です。</p><h1 id="スマートフォンの話"><a href="#スマートフォンの話" class="headerlink" title="スマートフォンの話"></a>スマートフォンの話</h1><h2 id="解像度"><a href="#解像度" class="headerlink" title="解像度"></a>解像度</h2><p>スマートフォンはかなり昔からスケーリング解像度を使っていました。iPhoneの初期は320x480で、iPhone最初期のAndroidとかも480x854で実質320x569でスケーリング150%な機種が多かった記憶があります。</p><p>解像度はそれからFull HDになったり、数倍の解像度になっていますが、4インチ強で320x480ぐらいという論理解像度のサイズ感は変わっていません。5-6インチに大きくなったのでその分大きくなった感じです。</p><div class="scroll"><table><thead><tr><th align="left">機種</th><th align="center">論理解像度</th></tr></thead><tbody><tr><td align="left">iPod touch 7th</td><td align="center">320x568</td></tr><tr><td align="left">iPhone SE 2nd</td><td align="center">375x667</td></tr><tr><td align="left">iPhone 13 mini</td><td align="center">375x812</td></tr><tr><td align="left">iPhone 13 (Pro)</td><td align="center">390x844</td></tr><tr><td align="left">iPhone 13 (Pro) Max</td><td align="center">428x926</td></tr><tr><td align="left">Pixel 4a/5</td><td align="center">393x851</td></tr><tr><td align="left">Pixel 4 XL</td><td align="center">412x869</td></tr><tr><td align="left">AQUOS sense 3 basic</td><td align="center">360x720</td></tr></tbody></table></div><p>AQUOS sense 3 basicは国産＆お手頃で業務機としてよく使われてそう＆チームで検証機で持っていたので計測値を入れています。</p><p>企業のシステムの場合は社用端末がある程度絞られるので、それらの端末を元に絞るのは可能でしょう。B2CやB2Bの場合には端末が絞れなくなりますので、ある程度想定が必要となります。</p><p>とりあえず最大のサイズはiPhone 13 Maxを想定しておけば良い、ということで問題はないでしょう。下限はスマートフォンであれば横はAQUOSの360、縦はiPhone SE 2ndの667にしておけば多くの場合は問題ないでしょう。ユニクロの定員さんとかファミレスとかでiPod touchを使っているのを見かけたことがありますが、iPod touchが要件として入ったら、これに合わせて下限を下げる、とかでいいかと思います。iPod touch、アップデートして欲しいですが・・・</p><p>ただし、ちょっと前のAndroidは、3ボタンナビゲーション（戻る、ホームなど）が常に最下部に表示されており、少し縦が削られるケースがありますので、要注意です。とはいっても、Android 10以降はもうなくなったと思うので今後の新規開発では考えなくてもいいかもしれません。</p><p><a href="http://k-tai.sharp.co.jp/appli/useful/navigationbar.html">http://k-tai.sharp.co.jp/appli/useful/navigationbar.html</a></p><p>参考までに、だいたいのCSSのメディアクエリーはスマートフォンは320-480の幅という想定になっていますね。</p><h2 id="回転"><a href="#回転" class="headerlink" title="回転"></a>回転</h2><p>スマートフォンには端末の傾きによって縦と横がローテーションする機能があります。Flutterでは<a href="https://stackoverflow.com/questions/50322054/flutter-how-to-set-and-lock-screen-orientation-on-demand">回転させないようにロック</a>できますし、ネイティブアプリなら要件として縦画面か横画面か決めておけば問題ないでしょう。</p><p>ブラウザの場合は回転を通知するAPIはありますが、向きを固定することはできません。開発コストを押させるなら、縦持ちのみサポートする（横は画面が崩れても対応しない）という要件は入れておく必要があるでしょう。</p><h1 id="大は小を兼ねない"><a href="#大は小を兼ねない" class="headerlink" title="大は小を兼ねない"></a>大は小を兼ねない</h1><p>当然のことですが、1280x720向けに画面デザインをしてしまうと、よっぽどのことがなければ1920x1080で表示しても問題はなく表示をできますが、メニューが一部に寄ってしまって空白が大きくなったりバランスが悪くなります。</p><p>かといって、大きいサイズに合わせて最適化しようとすると、小さい解像度で使いにくくなったりしますので、必ず決まった解像度で議論をした方がブレがでなくていいかと思います。</p><p>リアクティブなデザインを作る（≒いろんな解像度の仕様検討やテストを増やす）のも手間暇かかる話なので、バランスをとる必要があるでしょう。</p><p>特定の解像度をターゲットにするにしても、より大きい解像度でも検証して問題がおきないか、ぐらいの検証はしてもいいでしょう。</p><h1 id="フォントサイズ"><a href="#フォントサイズ" class="headerlink" title="フォントサイズ"></a>フォントサイズ</h1><p>以前のデスクトップOS設定だと、Windowsでもなんでも細かくフォントのポイント数などが変更できたと思いますが、現在ではスケーリングを主に使わせたいように見えます。個別のフォント設定はありません。macOSもスケーリングとブラウザのズーム機能を<a href="https://support.apple.com/ja-jp/guide/mac-help/mchld786f2cd/mac">案内</a>しています。なので、スケーリングのことをきちんと考慮しておけば大丈夫でしょう。</p><p>Windowsもデスクトップのフォントサイズのみをアピアランスの一環として変更する機能はありませんが、アクセシビリティ機能の中に文字サイズだけを大きくするオプションがあります。こちらを使われてしまうとレイアウトのバランスが崩れてしまいますので、特記事項がなければ標準サイズ（拡大なし）が良いと思われます。</p><p>スマートフォンにはiOSもAndroidもフォントサイズがあります。こちらもとりあえずデフォルトサイズで、という合意をとっておくと良いでしょう。</p><p>年配の方が多いなどで文字サイズを大きくしたい、という要件がある場合は、OS設定の自由度を許可すると検証項目が増えるのでアプリケーション側で単一の大きい文字で、とした方が開発工数は減ると思いますが、</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>物理解像度があてにならない時代</li><li>パソコン向けのウェブであればスケーリングは推奨でという条件を入れる<ul><li>デスクトップ向けとか外部ディスプレイ前提とか条件があるのであれば、その事情に合わせる</li><li>そうでなくても、論理解像度1280x720ぐらいを目安に実装すれば、ノートパソコンでもなんでも問題ないと思う</li><li>Windowsの最低サポート物理解像度が800x600だからといってそれを採用しない(常用されるHD, FullHDとの違いが大きくてかなりきつい）</li><li>Windowsにはアクセシビリティ機能でフォントサイズがあるが、意志がなければ標準サイズ、という要件を入れておく。</li></ul></li><li>スマートフォンも今どきは安い端末もFullHD+になってきているが、論理的な解像度はまた別<ul><li>利用するデバイスが特定できるなら、それに合わせて要件を決める</li><li>特に指定がなければ360x667〜428x926あたりで仕様化すれば良さそう。</li><li>フォントサイズ、画面の回転の要件もきちんと合意しておく</li></ul></li><li>大は小を兼ねないので、1366x768以上、みたいな書き方はせずに、想定解像度は1つに定めて、そこに最適化するといった決定をした方がデザインやテストのコストは下がるが、もちろん、それ以上の解像度のときに操作不能になったり情報が隠れたりしないように最低限の動作保証はする、という感じにするのがおすすめ</li></ul><h1 id="参考-レンダリング解像度"><a href="#参考-レンダリング解像度" class="headerlink" title="(参考)レンダリング解像度"></a>(参考)レンダリング解像度</h1><p>ゲームの場合はピクセルごとに複雑な計算をします。ピクセルごとに距離や当たっている光エネルギーを計算して物理ベースレンダリング、とかが今時ですので、ピクセルあたりの計算量が増えます。ゲームの場合は、パフォーマンスのために内部解像度（レンダリング解像度）を下げて、最後にスケーリングで表示解像度を物理ディスプレイ解像度に合わせます。これも単にスケールするのではなくて、最近は各社<a href="https://www.4gamer.net/games/022/G002210/20211115083/">AIを使ったスケーリング</a>が盛んで、超解像度技術によってスケールするので、内部解像度が低いからといって最初から解像度の低いモニタを使うのよりも画面がきれいになります。</p><p>なお、レンダリング解像度が別に設定されているのは少し前のiPhoneもそうですね。これはおそらく、iPhone 6 Plusあたりは414x736を3倍の1242x2208でレンダリングしてから画面に合わせて縮小して1080x1920のディスプレイに表示しています。</p><ul><li>物理的な解像度は人間の目との関係で決める（Retina: 網膜というぐらいですし）</li><li>ただ、物理的な解像度がソフトウェア的には中途半端なので計算しにくい</li><li>ソフトウェア的に都合が良い解像度でレンダリングしてからスケーリングして表示しちゃえ</li></ul><p>ということかな、と思います。Appleの中の人ではないので想像ですが。ゲームと違って、内部解像度が高めになっています。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;最近、企業内システムのウェブサービス開発や、B2B2B案件とかでウェブの画面を作るケース、Flutterでスマートフォンアプリを開発するときに、画面の要件をどうしましょう、という話が出てくることが多く、毎回似たような説明をしている気がするので、時間節約のためにまとめておきま</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="要件定義" scheme="https://future-architect.github.io/tags/%E8%A6%81%E4%BB%B6%E5%AE%9A%E7%BE%A9/"/>
    
    <category term="画面" scheme="https://future-architect.github.io/tags/%E7%94%BB%E9%9D%A2/"/>
    
  </entry>
  
  <entry>
    <title>Redmine_single_mailプラグインを開発しました！</title>
    <link href="https://future-architect.github.io/articles/20211203a/"/>
    <id>https://future-architect.github.io/articles/20211203a/</id>
    <published>2021-12-02T15:00:00.000Z</published>
    <updated>2021-12-12T13:33:00.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</a></li><li><a href="#%E4%B8%BB%E3%81%AA%E4%BB%95%E6%A7%98">主な仕様</a></li><li><a href="#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%A8%E8%A8%AD%E5%AE%9A">インストールと設定</a></li><li><a href="#%E5%AE%9F%E8%A3%85%E3%81%AE%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88">実装のポイント</a></li><li><a href="#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB">おわりに</a></li></ul><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIGコアテクノロジーユニットの高橋・小松です。</p><p>最近はRedmine3系から4系へのバージョンアップ検証を進めています。<br>その中でRedmine4系からメール送信仕様が変わっていることが判明しました。</p><div class="scroll"><table><thead><tr><th>バージョン</th><th>メール送信仕様</th></tr></thead><tbody><tr><td>Redmine3系</td><td>チケット作成/更新時に<strong>全ての関係者を宛先にした単一メールを送信</strong></td></tr><tr><td>Redmine4系</td><td>チケット作成/更新時に<strong>全ての関係者「ごと」にそれぞれメールを送信</strong></td></tr></tbody></table></div><p>4系の仕様はセキュリティに配慮してのことかと考えられますが弊社環境では以下のような問題が懸念されます。</p><ul><li>特定アカウントのメールアドレスにメーリングリストを設定することでメール数を減らしている場合、メーリングリストと個人宛のメールを2重に受け取ることになってしまう</li><li>メールが今までよりも多く送信されることになりメールサーバへの負荷が増大する</li><li><a href="https://support.google.com/a/topic/28609?hl=ja&ref_topic=9202">Gmailの送受信上限</a>に達しやすくなる</li></ul><p>そこで3系と同等のメール送信方式となるような<a href="https://github.com/future-architect/redmine_single_mail">Redmine_single_mailプラグイン</a>を開発しましたので紹介させていただきます。</p><p><a href="https://github.com/future-architect/redmine_single_mail">https://github.com/future-architect/redmine_single_mail</a></p><p>なお、以下のチケットでも話し合いが行われており参考にさせていただきました。<br><a href="https://redmine.tokyo/issues/1083">https://redmine.tokyo/issues/1083</a></p><h2 id="主な仕様"><a href="#主な仕様" class="headerlink" title="主な仕様"></a>主な仕様</h2><p>メールサーバへの負荷が懸念されることからユーザごとの設定ではなくRedmine全体で宛先をまとめて設定した単一メールが送信されるようにしました。</p><p>チケットの作成/更新時は3系同様ウォッチャーにもccでメールを送信するようにしています。</p><h2 id="インストールと設定"><a href="#インストールと設定" class="headerlink" title="インストールと設定"></a>インストールと設定</h2><p>インストール方法については特殊な部分はありませんのでプラグインのReadmeを参照ください。</p><p>プラグインのインストール後に設定画面で以下のようにチェックを入れることで設定できます。</p><img src="/images/20211203a/インストール設定画面.png" alt="インストール設定画面.png" width="633" height="288" loading="lazy"><h2 id="実装のポイント"><a href="#実装のポイント" class="headerlink" title="実装のポイント"></a>実装のポイント</h2><p>Redmine4系のメール通知送信処理では、クラスメソッドdeliver_XXX(機能)_YYY(操作)とインスタンスメソッドXXX(機能)_YYY(操作)のセットでメール通知を行っています。</p><p>例えば、チケット作成のメール通知処理は、クラスメソッドdeliver_issue_addとインスタンスメソッドissue_addで構成されています。</p><p>クラスメソッドdeliver_issue_addは、メール通知対象ユーザの分だけループする役割を担当しています。そしてインスタンスメソッドissue_addは、実際のメール作成とメール送信の役割を担当しています。</p><figure class="highlight php"><figcaption><span>Redmineソースからの抜粋</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Notifies users about a new issue.</span></span><br><span class="line">def <span class="built_in">self</span>.deliver_issue_add(issue)</span><br><span class="line">    users = issue.notified_users | issue.notified_watchers</span><br><span class="line">    users.each <span class="keyword">do</span> |user|</span><br><span class="line">        issue_add(user, issue).deliver_later</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment"># Builds a mail for notifying user about a new issue</span></span><br><span class="line">def issue_add(user, issue)</span><br><span class="line">    redmine_headers <span class="string">&#x27;Project&#x27;</span> =&gt; issue.project.identifier,</span><br><span class="line">                    <span class="string">&#x27;Issue-Tracker&#x27;</span> =&gt; issue.tracker.name,</span><br><span class="line">                    <span class="string">&#x27;Issue-Id&#x27;</span> =&gt; issue.id,</span><br><span class="line">                    <span class="string">&#x27;Issue-Author&#x27;</span> =&gt; issue.author.login</span><br><span class="line">    redmine_headers <span class="string">&#x27;Issue-Assignee&#x27;</span> =&gt; issue.assigned_to.login <span class="keyword">if</span> issue.assigned_to</span><br><span class="line">    message_id issue</span><br><span class="line">    references issue</span><br><span class="line">    @author = issue.author</span><br><span class="line">    @issue = issue</span><br><span class="line">    @user = user</span><br><span class="line">    @issue_url = url_for(:controller =&gt; <span class="string">&#x27;issues&#x27;</span>, :action =&gt; <span class="string">&#x27;show&#x27;</span>, :id =&gt; issue)</span><br><span class="line">    subject = <span class="string">&quot;[#&#123;issue.project.name&#125; - #&#123;issue.tracker.name&#125; ##&#123;issue.id&#125;]&quot;</span></span><br><span class="line">    subject += <span class="string">&quot; (#&#123;issue.status.name&#125;)&quot;</span> <span class="keyword">if</span> Setting.show_status_changes_in_mail_subject?</span><br><span class="line">    subject += <span class="string">&quot; #&#123;issue.subject&#125;&quot;</span></span><br><span class="line">    mail :to =&gt; user,</span><br><span class="line">    :subject =&gt; subject</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>一方Redmine_single_mailプラグインでは、クラスメソッドdeliver_issue_addで通知対象ユーザをループせずに、直接メール送信メソッドissue_addに処理させます。<br>そしてインスタンスメソッドissue_addで、toの関連ユーザとccのウォッチャーユーザをそれぞれ設定し、単一メールで送信を行います。</p><figure class="highlight php"><figcaption><span>Redmine_single_mailプラグインソースの抜粋</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Notifies users about a new issue.</span></span><br><span class="line">def deliver_issue_add(issue)</span><br><span class="line">    <span class="keyword">if</span> !!Setting.plugin_redmine_single_mail[:single_mail]</span><br><span class="line">        issue_add(User.current, issue).deliver_later</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        super(issue)</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="comment"># Builds a mail for notifying user about a new issue</span></span><br><span class="line">def issue_add(user, issue)</span><br><span class="line">    msg = super(user, issue)</span><br><span class="line">    <span class="keyword">if</span> !!Setting.plugin_redmine_single_mail[:single_mail]</span><br><span class="line">        to_users = issue.notified_users</span><br><span class="line">        cc_users = issue.notified_watchers - issue.notified_users</span><br><span class="line">        mail :to =&gt; to_users, :cc =&gt; cc_users, :subject =&gt; msg.subject</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        msg</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>例えばチケットの更新、ニュースの追加、Wikiページの追加等の操作も上記であげたチケット作成と同様の実装で対応できます。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>Redmineのバージョンアップによるメール送信仕様変更は日本の企業ユースでは中々許容しにくいものに感じました。</p><p>もし似たようなお悩みを抱えている方がいらっしゃいましたら<a href="https://github.com/future-architect/redmine_single_mail">Github</a>からダウンロード可能ですのでぜひお試しください。Pull Requestもお待ちしております。</p><p>今回開発したプラグインがどなたかのお役に立てば幸いです。</p><hr><p><strong>TIGコアテクノロジーユニット</strong></p><p>TIGコアテクノロジーユニットでは、現在チームメンバーを募集しています。私たちと一緒にテクノロジーで設計、開発、テストの高品質・高生産性を実現する仕組みづくりをしませんか？</p><p>興味がある方はお気軽に技術ブログTwitterや会社採用HPへ、連絡をお待ちしております。<br><a href="https://www.future.co.jp/recruit/">https://www.future.co.jp/recruit/</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;目次&quot;&gt;&lt;a href=&quot;#目次&quot; class=&quot;headerlink&quot; title=&quot;目次&quot;&gt;&lt;/a&gt;目次&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Redmine" scheme="https://future-architect.github.io/tags/Redmine/"/>
    
    <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
    <category term="コアテク" scheme="https://future-architect.github.io/tags/%E3%82%B3%E3%82%A2%E3%83%86%E3%82%AF/"/>
    
  </entry>
  
  <entry>
    <title>AB Open社と提携してRISC-V PCを開発しました</title>
    <link href="https://future-architect.github.io/articles/20211202a/"/>
    <id>https://future-architect.github.io/articles/20211202a/</id>
    <published>2021-12-01T15:00:00.000Z</published>
    <updated>2021-12-12T13:33:00.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>この度、フューチャーはAB Open社と協力し、無料のオープンソースであるRISC-Vアーキテクチャを活用した独自PCを開発しましたのでご報告します。</p><p>ITコンサルティング企業のフューチャーがなぜRISC-VベースのPC開発に携わっているのか疑問をお持ちの方も多いかと思いますので、経緯にも触れます。</p><h2 id="RISC-Vとは"><a href="#RISC-Vとは" class="headerlink" title="RISC-Vとは"></a>RISC-Vとは</h2><p>RISC-VはCPU命令セットアーキテクチャ（Instruction Set Architecture: ISA）の一種で、日本語では「リスクファイブ」と呼ぶこと多いです。Intelのx86/x64系やArm系と異なるのは、使用料がかからないOSSライセンスで提供されていることでしょう。近年RISC-V準拠CPUコアや開発環境などが活発に開発され広がりを見せており、今後普及が進むと予想されているアーキテクチャの一つです。</p><ul><li>参考: <a href="https://ja.wikipedia.org/wiki/RISC-V">RISC-V - Wikipedia</a></li></ul><h2 id="開発した-RISC-V-パーソナルコンピュータについて"><a href="#開発した-RISC-V-パーソナルコンピュータについて" class="headerlink" title="開発した RISC-V パーソナルコンピュータについて"></a>開発した RISC-V パーソナルコンピュータについて</h2><img src="/images/20211202a/future_rvpc_promo_1.jpg" alt="future_rvpc_promo_1.jpg" width="1200" height="802" loading="lazy"><img src="/images/20211202a/future_rvpc_promo_4.jpg" alt="future_rvpc_promo_4.jpg" width="1200" height="802" loading="lazy"><img src="/images/20211202a/future_rvpc_promo_3.jpg" alt="future_rvpc_promo_3.jpg" width="1200" height="802" loading="lazy"><p>開発したPCは、RISC-VのパイオニアであるSiFive社のHiFive Unmatchedを使用しています。CPUはSiFive U740 SoC、メモリは16GBという構成です。最初の写真を見てわかるように、フロントパネルを持っていることが大きな特徴で、ど真ん中に「フューチャー」のロゴが印字されていています！</p><ul><li><a href="https://www.sifive.com/boards/hifive-unmatched">HiFive Unmatched</a></li><li>SiFive U740 SoC（64bit 4コア+1コア）</li><li>DDR4 16GB</li><li>NVIDIA GeForceGT710</li><li>NVMe 1TB</li><li>GNU/Linuxベース</li><li>Wi-Fi接続機能</li><li>カスタム設計されたOLEDディスプレイ</li></ul><p>フロントパネルには、Pythonアプリケーションを介しての表示が可能です。CPUとメモリの使用状況、コンポーネントの温度などを含むシステム統計が一目でわかるので、PCの状態を常に監視できます。</p><img src="/images/20211202a/future_rvpc_promo_5.jpg" alt="future_rvpc_promo_5.jpg" width="1200" height="802" loading="lazy"><p>このOLEDディスプレイのハードウェア設計とPythonを含むコードはGitHubでも公開しています。</p><ul><li><a href="https://github.com/abopen/hifive-unmatched-front-panel">https://github.com/abopen/hifive-unmatched-front-panel</a></li></ul><p>今回の共同開発で、RISC-Vアーキテクチャをゲームからハイエンドな組み込みシステムまで多様なユースケースへの導入の道筋を作るキッカケにできたと考えています。</p><h2 id="AB-Open社さんとの出会い"><a href="#AB-Open社さんとの出会い" class="headerlink" title="AB Open社さんとの出会い"></a>AB Open社さんとの出会い</h2><p><a href="https://abopen.com/">AB Open</a>さんは英国ハリファックスを拠点とする、オープンハードウェアおよび技術コミュニティのコンサルティングを得意とする企業です。</p><p>出会いのキッカケですが、完全なRISC-V PCを世界で最初に組み立てた企業の1つとして有名だったAB Open社に、以前からRISC-Vに高い関心をもっていた当社副社長CSOの石橋さんが声をかけたことから始まり、意気投合してプロジェクトが始まりました。それぞれのモノづくりへの強い思いとこだわりを示しながら開発が進められたそうです。</p><p>AB Open社のマネージングディレクターであるAndrew Backさんは「RISC-Vアーキテクチャへの関心は日々高まっているため、このプロジェクトはRISC-Vのポテンシャルを示すのに役に立つと思います。最新テクノロジーを採用するフューチャーと一緒にできたことを光栄に思います」と話しており、良い協力関係が築けたかなと感じています。</p><h2 id="なぜ開発にしようと考えたか"><a href="#なぜ開発にしようと考えたか" class="headerlink" title="なぜ開発にしようと考えたか"></a>なぜ開発にしようと考えたか</h2><p>フューチャーには、「ないものはつくる」というカルチャーがあります。ソフトウェアだけではなく、必要ならばハードウェアも開発するという踏み込んだITコンサルティングを、1989年の創業から一貫して行ってきました。</p><p>今回RISC-Vに着目したのは、数多くのアプリケーション領域において、RISC-Vアーキテクチャによりイノベーションのスピードが加速されるのではないかと考えたからです。こうした領域でも業界をリードすべく、最初のステップとして高い性能を持ったフロントパネル付きのPCを開発しました。プロダクトのコンセプト・仕様面は当社が中心となって設計しました。コロナ禍、部品の収集にはとても苦労しましたが、こうして形になり、非常に嬉しく思っています。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>フューチャーは、AIやロボット工学などの最新技術の知識と実行能力を強みにイノベーションを促進し、クライアントに新しい価値を創造することで社会に貢献することを目指しています。引き続きABOpen社と協力しRISC-Vを活用していこうと考えており、最終ゴールは、RISC-Vの国産マイクロプロセッサを目指しています！</p><p>また、RISC-Vサミットが2021年の12/6~12/8にサンフランシスコで開催されます。盛り上げていきましょう！<br><a href="https://events.linuxfoundation.org/riscv-summit/">https://events.linuxfoundation.org/riscv-summit/</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://abopen.com/news/future-corporation-partners-with-ab-open-for-unique-risc-v-pc-project/">https://abopen.com/news/future-corporation-partners-with-ab-open-for-unique-risc-v-pc-project/</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;この度、フューチャーはAB</summary>
        
      
    
    
    
    <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
    <category term="RISC-V" scheme="https://future-architect.github.io/tags/RISC-V/"/>
    
    <category term="ISA" scheme="https://future-architect.github.io/tags/ISA/"/>
    
    <category term="HW" scheme="https://future-architect.github.io/tags/HW/"/>
    
  </entry>
  
</feed>
