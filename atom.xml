<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2021-03-22T16:10:00.944Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Cloud Spannerのローカル開発環境をdocker-composeでサクッと立ち上げる</title>
    <link href="https://future-architect.github.io/articles/20210323/"/>
    <id>https://future-architect.github.io/articles/20210323/</id>
    <published>2021-03-22T15:00:00.000Z</published>
    <updated>2021-03-22T16:10:00.944Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの齋場です。<a href="/articles/20210307/">GCP連載2021</a>の第11弾です。</p><p>本記事では、Cloud Spannerのローカル開発環境をdocker-composeでサクッと立ち上げる手順を紹介します。Cloud Spannerを用いた開発を行う方、また興味あるから少し触ってみたいという方にもおすすめです。</p><h1 id="Cloud-Spannerとは"><a href="#Cloud-Spannerとは" class="headerlink" title="Cloud Spannerとは"></a>Cloud Spannerとは</h1><p>簡単にCloud Spanner (以下「Spanner」と記載)について紹介させていただきます。</p><p>Spannerは、Google Cloudが提供する”強力な一貫性と水平方向の拡張性を兼ね備えた唯一のリレーショナルデータベースサービス” です。</p><p>以下公式ドキュメントの抜粋です。</p><blockquote><p>・無制限のスケーリングによって、リレーショナル セマンティクスと SQL のすべてのメリットを享受<br>・任意のサイズで開始し、ニーズの拡大に応じて制限なしでスケーリング<br>・計画的ダウンタイムのない、オンラインでのスキーマ変更で高可用性を実現<br>・リージョンや大陸全体にわたる強整合性で高性能のトランザクションを提供<br>・自動シャーディングなどの機能により手動のタスクを排除し、イノベーションに注力</p></blockquote><p>夢のようなデータベースサービスですね。でも、となるとやっぱりお高そう..料金は以下ような感じです。</p><h4 id="１ノードあたりの料金（すべてのレプリケーションを含む）"><a href="#１ノードあたりの料金（すべてのレプリケーションを含む）" class="headerlink" title="１ノードあたりの料金（すべてのレプリケーションを含む）"></a>１ノードあたりの料金（すべてのレプリケーションを含む）</h4><table><thead><tr><th>構成</th><th>リージョン</th><th>$/時間</th><th>$/月 (100%稼働)</th></tr></thead><tbody><tr><td>リージョン</td><td>asia-northeast1 (東京)</td><td>1.17</td><td>842.4</td></tr><tr><td>マルチリージョン</td><td>asia1 (東京+大阪)</td><td>3.9</td><td>2808</td></tr></tbody></table><p>最小構成のリージョン+1ノード構成でも、なかなかのコストが掛かりますね。</p><h1 id="開発環境どうするか"><a href="#開発環境どうするか" class="headerlink" title="開発環境どうするか"></a>開発環境どうするか</h1><p>コストが高いので、開発環境用に気軽にインスタンスを立ち上げるのは難しそうです。<br>ということで、本記事ではGCPが公式で提供してくれている <a href="https://cloud.google.com/spanner/docs/emulator?hl=ja">Spanner エミュレータ</a> を使って開発環境を立ち上げます！(エミューレータあってよかったありがとう!)</p><p>gcloud CLIとdockerイメージでの提供がありますが、今回はdocker-composeで利用する例を紹介します。<br>サンプルコードはこちら: <a href="https://github.com/tarosaiba/compose-spanner"><strong>tarosaiba/compose-spanner</strong></a></p><p>以下2点工夫したポイントです。</p><ul><li>通常、Spannerエミュレータ起動後にインスタンスの作成手順(<code>gcloud spanner instances create</code>)が必要になりますが、docker-compose立ち上げ時に自動でインスタンス作成されるようにしています</li><li>DBの初期化処理(テーブル作成&amp;データ投入)のために、事前に用意したDDL/DMLをdocker-compose立ち上げ時に自動で実行されるようにしています</li></ul><p>ということで早速手順を紹介します。</p><h1 id="要件"><a href="#要件" class="headerlink" title="要件"></a>要件</h1><ul><li>docker &gt;= 19.03.0+</li><li>docker-compose &gt;= 1.27.0+</li></ul><h1 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h1><h2 id="クイックスタート"><a href="#クイックスタート" class="headerlink" title="クイックスタート"></a>クイックスタート</h2><ul><li>リポジトリをクローン <a href="https://github.com/tarosaiba/compose-spanner">https://github.com/tarosaiba/compose-spanner</a></li><li>ディレクトリに移動  <code>cd compoose-spanner</code></li><li>docker-compose起動 <code>docker-compose up -d</code></li></ul><p>手順は以上です!</p><h2 id="spanner-cliによるSpanner接続方法"><a href="#spanner-cliによるSpanner接続方法" class="headerlink" title="spanner-cliによるSpanner接続方法"></a>spanner-cliによるSpanner接続方法</h2><p>さっそくcliで接続してみましょう。<br>※ インスタンス、データベースが作成されるまで十数秒待つ必要があります</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose exec spanner-cli spanner-cli -p test-project -i test-instance -d test-database</span><br><span class="line">Connected.</span><br><span class="line">spanner&gt;</span><br></pre></td></tr></table></figure><p>接続できました！では、テーブルを確認してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">spanner&gt; show tables;</span><br><span class="line">+-------------------------+</span><br><span class="line">| Tables_in_test-database |</span><br><span class="line">+-------------------------+</span><br><span class="line">| Singers                 |</span><br><span class="line">| Albums                  |</span><br><span class="line">+-------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">spanner&gt; select * from Singers;</span><br><span class="line">+----------+------------+----------+------------+</span><br><span class="line">| SingerId | FirstName  | LastName | SingerInfo |</span><br><span class="line">+----------+------------+----------+------------+</span><br><span class="line">| 13       | Russell    | Morales  | NULL       |</span><br><span class="line">| 15       | Dylan      | Shaw     | NULL       |</span><br><span class="line">| 12       | Melissa    | Garcia   | NULL       |</span><br><span class="line">| 14       | Jacqueline | Long     | NULL       |</span><br><span class="line">+----------+------------+----------+------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (800.4us)</span><br></pre></td></tr></table></figure><p>テーブルとデータも確認することができました。</p><h2 id="アプリケーションからの接続方法"><a href="#アプリケーションからの接続方法" class="headerlink" title="アプリケーションからの接続方法"></a>アプリケーションからの接続方法</h2><p>開発するアプリケーションで <code>SPANNER_EMULATOR_HOST=localhost:9010</code> 設定すればOKです。各クライアントライブラリごとのサンプルは<a href="https://cloud.google.com/spanner/docs/emulator">こちらの公式ドキュメント</a>を参照してください。</p><h2 id="エミュレータの制限事項と相違点"><a href="#エミュレータの制限事項と相違点" class="headerlink" title="エミュレータの制限事項と相違点"></a>エミュレータの制限事項と相違点</h2><p>ここで注意点ですが、<a href="https://cloud.google.com/spanner/docs/emulator?hl=ja#limitations_and_differences">公式ドキュメント</a>にある通りエミュレータは以下のような制限事項および、相違点があります。以下を理解して利用しましょう。</p><h4 id="制限事項"><a href="#制限事項" class="headerlink" title="制限事項"></a>制限事項</h4><blockquote><ul><li>TLS/HTTPS、認証、IAM、権限、ロール。</li><li>PLAN または PROFILE クエリモード。 NORMAL のみがサポートされます。</li><li>監査ログとモニタリング ツール。</li></ul></blockquote><h4 id="相違点"><a href="#相違点" class="headerlink" title="相違点"></a>相違点</h4><blockquote><ul><li>エミュレータのパフォーマンスとスケーラビリティは、本番環境サービスと同等ではありません。</li><li>読み取り/書き込みトランザクションとスキーマ変更は、完了するまでデータベース全体を排他的にのみアクセスできるようにロックします。</li><li>パーティション化 DML とパーティション クエリはサポートされていますが、エミュレータはステートメントが分割可能かどうかは確認しません。つまり、パーティション化 DML またはパーティション クエリ ステートメントがエミュレータで実行される場合でも、本番環境ではパーティション化できないステートメント エラーにより失敗する可能性があります。</li></ul></blockquote><h1 id="解説"><a href="#解説" class="headerlink" title="解説"></a>解説</h1><p>ざっくりサンプルコードの解説をさせていただきます</p><h3 id="ファイル構成"><a href="#ファイル構成" class="headerlink" title="ファイル構成"></a>ファイル構成</h3><p><img src="/images/20210323/image.png"></p><ul><li><strong>docker-compose.yaml</strong> : docker-composeファイルです。これを立ち上げます</li><li><strong>migrations</strong> : DB初期化時に適用するDDL&amp;DMLを配置します</li></ul><h3 id="利用しているDockerイメージ"><a href="#利用しているDockerイメージ" class="headerlink" title="利用しているDockerイメージ"></a>利用しているDockerイメージ</h3><table><thead><tr><th>Docker Image</th><th>説明</th><th>用途</th></tr></thead><tbody><tr><td>gcr.io/cloud-spanner-emulator/emulator</td><td>GCP提供のSpannerエミュレータ<a href="https://cloud.google.com/spanner/docs/emulator">公式ドキュメント</a></td><td>・Spannerエミュレータ本体</td></tr><tr><td>gcr.io/google.com/cloudsdktool/cloud-sdk:slim</td><td>GCP利用のためのツールとライブラリ<a href="https://cloud.google.com/sdk/docs/downloads-docker">公式ドキュメント</a></td><td>・インスタンスの作成</td></tr><tr><td>mercari/wrench</td><td>SpannerのSchemaマネジメントツール <a href="https://github.com/cloudspannerecosystem/wrench">Github</a></td><td>・テーブル作成 ・データ投入</td></tr><tr><td>sjdaws/spanner-cli</td><td>SpannerのCLIツール <a href="https://github.com/cloudspannerecosystem/spanner-cli">Github</a></td><td>・CLIアクセス</td></tr></tbody></table><p>※<code>wrench</code> および、<code>spanner-cli</code> は <a href="https://github.com/cloudspannerecosystem">Cloud Spanner Ecosystem</a>で公開されています<br>※MercariさんはSpannerのツールや知見を惜しみなく公開してくれており、非常に感謝です..!!</p><h3 id="コンテナ構成のイメージとdocker-compose-yamlの内容"><a href="#コンテナ構成のイメージとdocker-compose-yamlの内容" class="headerlink" title="コンテナ構成のイメージとdocker-compose.yamlの内容"></a>コンテナ構成のイメージとdocker-compose.yamlの内容</h3><p><img src="/images/20210323/image_2.png"></p><p>Spannerエミュレータ本体<code>spanner</code>とCLIアクセス用の<code>spanner-cli</code>は常駐プロセスとして起動し続け、それ以外のコンテナはコマンド実行後に正常終了します</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Spanner</span></span><br><span class="line">    <span class="attr">spanner:</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">gcr.io/cloud-spanner-emulator/emulator</span></span><br><span class="line">     <span class="attr">ports:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">&quot;9010:9010&quot;</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">&quot;9020:9020&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Init (Create Instance)</span></span><br><span class="line">    <span class="attr">gcloud-spanner-init:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">gcr.io/google.com/cloudsdktool/cloud-sdk:slim</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&gt;</span></span><br><span class="line">       <span class="string">bash</span> <span class="string">-c</span> <span class="string">&#x27;gcloud config configurations create emulator &amp;&amp;</span></span><br><span class="line"><span class="string">               gcloud config set auth/disable_credentials true &amp;&amp;</span></span><br><span class="line"><span class="string">               gcloud config set project $$&#123;PROJECT_ID&#125; &amp;&amp;</span></span><br><span class="line"><span class="string">               gcloud config set api_endpoint_overrides/spanner $$&#123;SPANNER_EMULATOR_URL&#125; &amp;&amp;</span></span><br><span class="line"><span class="string">               gcloud config set auth/disable_credentials true &amp;&amp;</span></span><br><span class="line"><span class="string">               gcloud spanner instances create $$&#123;INSTANCE_NAME&#125; --config=emulator-config --description=Emulator --nodes=1&#x27;</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">PROJECT_ID:</span> <span class="string">&quot;test-project&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_EMULATOR_URL:</span> <span class="string">&quot;http://spanner:9020/&quot;</span></span><br><span class="line">        <span class="attr">INSTANCE_NAME:</span> <span class="string">&quot;test-instance&quot;</span></span><br><span class="line">        <span class="attr">DATABASE_NAME:</span> <span class="string">&quot;test-database&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># DB Migration (Create Table)</span></span><br><span class="line">    <span class="attr">wrench-crearte:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">mercari/wrench</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&quot;create --directory /ddl&quot;</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">SPANNER_PROJECT_ID:</span> <span class="string">&quot;test-project&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_INSTANCE_ID:</span> <span class="string">&quot;test-instance&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_DATABASE_ID:</span> <span class="string">&quot;test-database&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_EMULATOR_HOST:</span> <span class="string">&quot;spanner:9010&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_EMULATOR_URL:</span> <span class="string">&quot;http://spanner:9020/&quot;</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./migrations/ddl:/ddl</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># DB Migration (Insert data)</span></span><br><span class="line">    <span class="attr">wrench-apply:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">mercari/wrench</span></span><br><span class="line">      <span class="attr">command:</span> <span class="string">&quot;apply --dml /dml/dml.sql&quot;</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">SPANNER_PROJECT_ID:</span> <span class="string">&quot;test-project&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_INSTANCE_ID:</span> <span class="string">&quot;test-instance&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_DATABASE_ID:</span> <span class="string">&quot;test-database&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_EMULATOR_HOST:</span> <span class="string">&quot;spanner:9010&quot;</span></span><br><span class="line">        <span class="attr">SPANNER_EMULATOR_URL:</span> <span class="string">&quot;http://spanner:9020/&quot;</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./migrations/dml:/dml</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">on-failure</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># CLI</span></span><br><span class="line">    <span class="attr">spanner-cli:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">sjdaws/spanner-cli:latest</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">SPANNER_EMULATOR_HOST:</span> <span class="string">&quot;spanner:9010&quot;</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>, <span class="string">&#x27;echo this container keep running &amp;&amp; tail -f /dev/null&#x27;</span>]</span><br></pre></td></tr></table></figure><p>以下、補足になります</p><ul><li>wrenchコンテナは<code>restart: on-failure</code>と設定しています<ul><li>wrenchはSpannerインスタンス作成後に実行したいのですが、docker-composeの起動制御が複雑になるので、失敗→再起動→再実行 するようになっています</li></ul></li><li>spanner-cliコンテナは、<code>tail -f /dev/null</code> でコンテナ起動状態を保つようにしています<ul><li><code>docker-exec</code>でコマンドを実行するためです</li><li>※spanner-cliは、go getでもローカルPCにインストール可能 (筆者はローカルにインストールするのが面倒だった)</li></ul></li></ul><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>SpannerはNewSQLと称されるだけあり MySQLやPostgresと比較すると情報も乏しいですが、日本でも採用事例は増えてきていて今後増々期待できるデータベースサービスかと思います！</p><p>今回は、Spannerのローカル開発環境を立ち上げる方法を紹介させていただきました。宣言的に定義することで、立ち上げの手順もシンプルにできていると思います。興味のある方はぜひ立ち上げて触ってみてください。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの齋場です。&lt;a href=&quot;/articles/20210307/&quot;&gt;GCP連載2021&lt;/a&gt;の第11</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="DockerCompose" scheme="https://future-architect.github.io/tags/DockerCompose/"/>
    
    <category term="Spanner" scheme="https://future-architect.github.io/tags/Spanner/"/>
    
  </entry>
  
  <entry>
    <title>Migrate for Anthos を基礎から学ぶ</title>
    <link href="https://future-architect.github.io/articles/20210322/"/>
    <id>https://future-architect.github.io/articles/20210322/</id>
    <published>2021-03-21T15:00:00.000Z</published>
    <updated>2021-03-22T16:07:46.743Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの<a href="https://twitter.com/famipapamart">村田</a>です。</p><p><a href="https://future-architect.github.io/articles/20210307/">GCP連載2021</a>の第10弾です。<a href="https://future-architect.github.io/articles/20210319/">前回</a>は越島さんによる分かりやすい Anthos 概要紹介記事でしたが、今回も前回に続いての Anthos ネタです。</p><p>※本記事の情報は 2021.03.21 時点での情報であり、サービスの対応状況などは更新される可能性があります。</p><h1 id="前説"><a href="#前説" class="headerlink" title="前説"></a>前説</h1><p>さて、昨今 DX だとかなんだとか飛び交う単語は色々ありますが、個人的に思う今求められるポイントはズバリ「変更容易性」なんじゃないかなと日々思いながら仕事をしています。（もちろん他にも大切な要素はたくさんありますし、文脈によって優先すべきポイントが変わるのというのは前提で）</p><p>それこそいま世界で走っている様々なプロジェクトはこの変更容易性を意識した設計・実装になっている、あるいはそうなるように推進されているかなと思います。新規実装であればそれでよいです。でも既存システムの場合はどうでしょう？既存システムは必ずしも変更が容易な形で作られているとは限りません。でも2025年の崖なんて言葉もそろそろ浸透しつつある中、なんとかこのタイミングで将来を見据えたシステムにアップグレードしたいと思っている企業はたくさんあります。例えば既存システムをコンテナ基盤に移行したいという要望もその一つです。しかし先に述べたように既存システムをコンテナ基盤に移行したいと言っても簡単にはいかなかったりします。</p><p>そんな悩みを解決してくれそうなサービスが最近私の視界の端っこでチラチラとサイドステップしているので、今回は皆さんに紹介したいと思います。</p><h1 id="Migrate-for-Anthosとは"><a href="#Migrate-for-Anthosとは" class="headerlink" title="Migrate for Anthosとは"></a>Migrate for Anthosとは</h1><p>Migrate for Anthos とは Google Cloud が提供するサービスのひとつで、端的に言えば <strong>仮想マシン上で動くアプリケーションをまるごとコンテナ化</strong> してくれます。</p><p>より詳細に言えば、 VMware オンプレミス・AWS・Azure のいずれか、または GCP 上の Compute Engine に存在するワークロードを、 Google Kubernetes Engine（GKE）または Anthos 上で動作するコンテナに変換することができます。</p><h1 id="Migrate-for-Anthos-の機能"><a href="#Migrate-for-Anthos-の機能" class="headerlink" title="Migrate for Anthos の機能"></a>Migrate for Anthos の機能</h1><h2 id="Migrate-できるものとできないもの"><a href="#Migrate-できるものとできないもの" class="headerlink" title="Migrate できるものとできないもの"></a>Migrate できるものとできないもの</h2><p>まずは<a href="https://cloud.google.com/migrate/anthos/docs/compatible-os-versions">互換性のある VM オペレーティングシステム</a>を公式サイトにて確認しておきましょう。Linux、Windows それぞれ対応している OS およびそのバージョンが記載されています。</p><p>Linux については GCP・AWS・Azure 上の VM インスタンスもしくは VMWare インスタンスが対象となっているのに対し、 Windows は GCE のみの対応でオンプレミスなどからの移行には現状対応していません。</p><h2 id="Migrate-に必要なもの"><a href="#Migrate-に必要なもの" class="headerlink" title="Migrate に必要なもの"></a>Migrate に必要なもの</h2><p>Migrate for Anthos のコンポーネントを実行するためには GKE あるいは Anthos クラスタが必要です。</p><blockquote><p>You can use a Google Kubernetes Engine (GKE) or Anthos processing cluster <strong>located in the Google Cloud or on-prem.</strong></p></blockquote><p><a href="https://cloud.google.com/migrate/anthos/docs/setting-up-overview">公式Doc</a>では上記のように記載がありますが、 <a href="https://cloud.google.com/migrate/anthos/docs/migration-prerequisites-aws">Anthos clusters on AWS への移行</a>もプレビュー状態ですが公開されているので、 Anthos clusters on ◯◯ に順次対応していくだろうと予測しています。</p><p>前項で対応している VM ソースプラットフォームについて言及しましたが、おそらくこの仕様に引っ張られる形で対応するプラットフォームが決まってるのではと思います。つまり、 Anthos clusters の展開に合わせて対応する移行元プラットフォームが増えていくと期待され、 昨年GAとなった Anthos clusters on bare metal まで対応が進んでいけば Migrate 対象の自由度は今後もっと上がっていくのではないかと妄想しています。</p><h2 id="Migrate-の概要"><a href="#Migrate-の概要" class="headerlink" title="Migrate の概要"></a>Migrate の概要</h2><p>Migrate プロセスは大きく分けて3つのプロセスに分かれます。</p><ul><li>移行元の特定</li><li>移行処理クラスタの作成</li><li>移行したワークロードのデプロイ</li></ul><p>各々について次項以降でそれぞれ説明していきます。</p><h1 id="Migrate-に向けた準備の具体的なステップ"><a href="#Migrate-に向けた準備の具体的なステップ" class="headerlink" title="Migrate に向けた準備の具体的なステップ"></a>Migrate に向けた準備の具体的なステップ</h1><h2 id="移行元の特定"><a href="#移行元の特定" class="headerlink" title="移行元の特定"></a>移行元の特定</h2><p>ワークロードの移行元プラットフォームに応じて必要なものが変わってくるので、まずは移行元を確認することから始めます。</p><table><thead><tr><th align="center">移行対象OS</th><th align="center">移行元</th><th align="center">移行先</th><th align="center">必要なもの</th></tr></thead><tbody><tr><td align="center">Linux / Windows</td><td align="center">GCE</td><td align="center">GKE / Anthos on Google Cloud</td><td align="center">Migrate for Anthos</td></tr><tr><td align="center">Linux</td><td align="center">VMware / AWS/ Azure</td><td align="center">GKE / Anthos on Google Cloud</td><td align="center">Migrate for Compute Engine と Migrate for Anthos</td></tr><tr><td align="center">Linux</td><td align="center">VMware</td><td align="center">Anthos clusters on VMware</td><td align="center">Migrate for Anthos</td></tr><tr><td align="center">Linux</td><td align="center">AWS</td><td align="center">Anthos clusters on AWS</td><td align="center">Migrate for Anthos</td></tr><tr><td align="center">Windows</td><td align="center">GCE以外</td><td align="center">GKE / Anthos on ◯◯</td><td align="center">Migrate for Compute Engineを使って一旦GCE化</td></tr></tbody></table><h2 id="ワークロードの-Migrate-適正診断"><a href="#ワークロードの-Migrate-適正診断" class="headerlink" title="ワークロードの Migrate 適正診断"></a>ワークロードの Migrate 適正診断</h2><p>Migrate のために必須というわけでは無いのですが、事前にワークロードのコンテナ移行に対する適合性をセルフ診断できるツールが提供されています。ツールは Linux 向けと Windows 向けでそれぞれ用意されていますが、現状はそれぞれの動作が微妙に異なるようです。</p><h3 id="Linux-向け診断ツール"><a href="#Linux-向け診断ツール" class="headerlink" title="Linux 向け診断ツール"></a>Linux 向け診断ツール</h3><p>Linux 向け診断ツールは以下の2フェーズに分かれています。</p><ul><li>収集フェーズ</li><li>分析フェーズ</li></ul><p>収集フェーズでは移行対象の VM に関する情報を収集し、分析フェーズでは収集した情報をもとに 0~10 の適合性スコアと詳細なレポートを出力してくれます。移行対象の VM がたくさんある場合は、収集ツールを各 VM で実行の上、すべての収集データを一括で分析することができます。</p><p>詳細なスコアの見方は<a href="https://cloud.google.com/migrate/anthos/docs/linux-assessment-tool">このページ</a>に記載がありますが、例えばスコアが 0 の場合は Migrate には適合してないことになり、逆に 10 の場合は適合度が高いです。</p><p>※ちなみに、公式ドキュメントでは例えばスコアが 7~8 の場合に <code>手動での作業が若干必要になります</code> との記載がありましたが、これが移行前準備における手動作業を指すのか移行後の作業を指すのかが紐解ききれませんでした…分かる方いたらコメントくださいmm</p><h3 id="Windows-向け診断ツール"><a href="#Windows-向け診断ツール" class="headerlink" title="Windows 向け診断ツール"></a>Windows 向け診断ツール</h3><p>Windows 向けの診断ツールは Linux 向けに比べて簡素に結果を判定してくれます。診断後は、その VM が移行に適しているかどうかを示す zip ファイルが出力されるのですが、不適合な VM の場合はファイル名に <code>NOFIT</code> と表記され、適正のある VM の場合にはその文字列はありません。</p><h2 id="移行処理クラスタの作成"><a href="#移行処理クラスタの作成" class="headerlink" title="移行処理クラスタの作成"></a>移行処理クラスタの作成</h2><p>Migrate for Anthos の実処理を行う GKE あるいは Anthos クラスタの設定を進めていきます。<br><img src="/images/20210322/setting-up-workflow.png"></p><p>※図は<a href="https://cloud.google.com/migrate/anthos/docs/setting-up-overview">こちらの公式Doc</a>から拝借しました</p><p>基本は1本道ですが、1箇所だけフローに分岐があります。 Migrate for Compute Engine のセットアップをするかどうかです。</p><blockquote><p>VMware、AWS または Azure から移行する場合は、Migrate for Compute Engine コンポーネントを設定します</p></blockquote><p><a href="https://cloud.google.com/migrate/anthos/docs/setting-up-overview">公式Doc</a>では上記のような記載があり、GCP以外の環境から移行したい場合には Migrate for Compute Engine のセットアップが必要だと分かります。ただ、これは文字通りワークロードを GCE へ Migrate したい場合に使うものであり、Migrate が各プラットフォームの Anthos clusters 内で完結する場合には設定不要です。</p><h3 id="移行環境ごとの前提条件確認"><a href="#移行環境ごとの前提条件確認" class="headerlink" title="移行環境ごとの前提条件確認"></a>移行環境ごとの前提条件確認</h3><p>OS および VM ソースプラットフォームがサポートされているものかどうか確認し、必要に応じて Migrate for Compute Engine を設定します。</p><p>また、 GCP 以外のプラットフォームにて処理クラスタを構築する場合（Anthos clusters for ◯◯ を使う場合）はクラスタの構成に関していくつかの条件があるので要確認です。 Anthos clusters と Google Cloud を繋ぐ <a href="https://cloud.google.com/anthos/multicluster-management/connect/overview">Connect</a> のインストールは必須ではないですが、インストールしておけば移行時に Cloud Console のロギングおよびモニタリング機能を使うことができます。</p><h3 id="データリポジトリの準備"><a href="#データリポジトリの準備" class="headerlink" title="データリポジトリの準備"></a>データリポジトリの準備</h3><p>Migrate for Anthos は、移行に際して以下2種のデータリポジトリに対してデータ書き込みが発生します。</p><ul><li>Docker イメージファイルレジストリ</li><li>移行アーティファクトリポジトリ</li></ul><p>Docker イメージファイルレジストリには、移行された Linux VM の情報が Docker イメージファイルとして Docker レジストリに書き込まれます。これは Windows VM のワークロードを移行する際には必要ありません。また、移行アーティファクトリポジトリには、移行されたワークロードをデプロイするための YAML ファイルなどが配置されます。</p><p>これらのデータリポジトリは、処理クラスタの作成プラットフォームに応じて変化します。</p><table><thead><tr><th align="center">プラットフォーム</th><th align="center">Docker イメージファイルレジストリ</th><th align="center">移行アーティファクトリポジトリ</th></tr></thead><tbody><tr><td align="center">GKE/ Anthos on Google Cloud</td><td align="center">デフォルトは GCR</td><td align="center">デフォルトは GCS</td></tr><tr><td align="center">Anthos clusters on VMware</td><td align="center">GCR または任意の Docker レジストリを指定する</td><td align="center">GCS または S3 を指定する</td></tr><tr><td align="center">Anthos clusters on AWS</td><td align="center">ECRを指定する</td><td align="center">GCS または S3 を指定する</td></tr></tbody></table><p>各データリポジトリの実体の作成は後述の migctl コマンド経由で行うので、この段階では何を使うかのみ決めておけばOKです。</p><h3 id="Google-サービス-API-の有効化とサービスアカウントの設定"><a href="#Google-サービス-API-の有効化とサービスアカウントの設定" class="headerlink" title="Google サービス API の有効化とサービスアカウントの設定"></a>Google サービス API の有効化とサービスアカウントの設定</h3><p>Google Cloud のリソースへのアクセスが発生するパターンでの Migrate を実施する際には、 Google サービス API の有効化およびサービスアカウントの設定が必要です。</p><p>Google Cloud への Migrate を行う場合に有効化する Google サービス API は以下です。</p><ul><li>Service Management API</li><li>Service Control API</li><li>Cloud Resource Manager API</li><li>Compute Engine API</li><li>Kubernetes Engine API</li><li>Google Container Registry API</li><li>Cloud Build API</li></ul><p>また、以下の場合には該当するサービスアカウントの作成も必要になります。</p><ul><li>データリポジトリにGCRあるいはGCSを利用する場合<ul><li>Container Registry と Cloud Storage へのアクセスで使用するサービスアカウント</li></ul></li><li>移行元ソースとしてGCEを利用する場合<ul><li>Compute Engine へのアクセスで使用するサービスアカウント</li></ul></li></ul><h3 id="Migrate-for-Compute-Engineの設定"><a href="#Migrate-for-Compute-Engineの設定" class="headerlink" title="Migrate for Compute Engineの設定"></a>Migrate for Compute Engineの設定</h3><p>先述の通りですが、Google Cloud 以外のプラットフォームから Google Cloud への Migrate を実施したい場合には、この Migrate for Compute Engine の設定が必要になります。このパートでは細かい設定手順は割愛しますが、<a href="https://cloud.google.com/migrate/compute-engine/docs/4.11/getting-started">公式Doc</a>に従って Migrate for Compute Engine Manager のインストールを完了させます。</p><h3 id="処理クラスタの作成"><a href="#処理クラスタの作成" class="headerlink" title="処理クラスタの作成"></a>処理クラスタの作成</h3><p>利用するプラットフォームごとに必要な設定が異なるので、移行要件に沿って適切な手順を選択します。どの手順を選んだとしても、必要な設定を組み込んだ GKE クラスタあるいは Anthos クラスタを作成する流れとなります。</p><h4 id="Linux-VM-を移行する場合"><a href="#Linux-VM-を移行する場合" class="headerlink" title="Linux VM を移行する場合"></a>Linux VM を移行する場合</h4><ul><li><a href="https://cloud.google.com/migrate/anthos/docs/configuring-a-cluster">処理クラスタとして <strong>GKE または Anthos on Google Cloud</strong> を使用する場合</a></li><li><a href="https://cloud.google.com/migrate/anthos/docs/configuring-onprem-cluster">処理クラスタとして <strong>Anthos clusters on VMware</strong> を使用する場合</a></li><li><a href="https://cloud.google.com/migrate/anthos/docs/configuring-aws-cluster">処理クラスタとして <strong>Anthos clusters on AWS</strong> を使用する場合</a></li></ul><h4 id="Windows-VM-を移行する場合"><a href="#Windows-VM-を移行する場合" class="headerlink" title="Windows VM を移行する場合"></a>Windows VM を移行する場合</h4><ul><li><a href="https://cloud.google.com/migrate/anthos/docs/configuring-win-cluster">処理クラスタとして GKE クラスタを使用する場合</a></li></ul><h3 id="Migrate-for-Anthos-のインストール"><a href="#Migrate-for-Anthos-のインストール" class="headerlink" title="Migrate for Anthos のインストール"></a>Migrate for Anthos のインストール</h3><p>migctl コマンドを使用して、作成済みの処理クラスタへ Migrate for Anthos コンポーネントをインストールします。</p><table><thead><tr><th align="center">プラットフォーム</th><th align="center">migctl の実行方法</th></tr></thead><tbody><tr><td align="center">GKE/ Anthos on Google Cloud</td><td align="center">Cloud Shell で実行可能</td></tr><tr><td align="center">Anthos clusters on VMware</td><td align="center">管理ワークステーションにコマンドをインストールする</td></tr><tr><td align="center">Anthos clusters on AWS</td><td align="center">管理ワークステーションにコマンドをインストールする</td></tr></tbody></table><h4 id="migctl-とは"><a href="#migctl-とは" class="headerlink" title="migctl とは"></a>migctl とは</h4><p>migctl は Migrate for Anthos 移行環境の設定と管理を行うコマンドラインツールで、例えば以下のようなオペレーションを実行できます。</p><table><thead><tr><th align="center">コマンド</th><th align="center">説明</th></tr></thead><tbody><tr><td align="center">artifacts-repo</td><td align="center">アーティファクト リポジトリを構成する</td></tr><tr><td align="center">docker-registry</td><td align="center">Docker レジストリを構成する</td></tr><tr><td align="center">doctor</td><td align="center">Migrate for Anthos のデプロイ ステータスと関連する構成の確認</td></tr><tr><td align="center">migration</td><td align="center">移行オペレーション</td></tr><tr><td align="center">setup</td><td align="center">Migrate for Anthos のインストール / アンインストール</td></tr></tbody></table><h4 id="migctl-のインストール"><a href="#migctl-のインストール" class="headerlink" title="migctl のインストール"></a>migctl のインストール</h4><p>GCP 外の環境の場合にはまず以下コマンドで管理ワークステーションに migctl コマンドをインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://anthos-migrate-release.storage.googleapis.com/v1.6.2/linux/amd64/migctl</span><br><span class="line">$ sudo cp migctl /usr/<span class="built_in">local</span>/bin/</span><br><span class="line">$ sudo chmod +x /usr/<span class="built_in">local</span>/bin/migctl</span><br><span class="line">$ . &lt;(migctl completion bash)</span><br></pre></td></tr></table></figure><p>GCP 環境では Cloud Shell にて migctl コマンドを実行可能なためこの手順はスキップできます。</p><h4 id="Migrate-fot-Anthos-コンポーネントのインストール"><a href="#Migrate-fot-Anthos-コンポーネントのインストール" class="headerlink" title="Migrate fot Anthos コンポーネントのインストール"></a>Migrate fot Anthos コンポーネントのインストール</h4><p>次に以下コマンドで処理クラスタにコンポーネントの実体をインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ migctl setup install --&lt;Your Target Platform&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;Your Target Platform&gt;</code> の部分は例えば AWS の場合は <code>gke-on-aws</code> となります。</p><p>インストール後には <code>doctor</code> コマンドでインストールの進捗状況を確認することができます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ migctl doctor</span><br><span class="line">  [✓] Deployment</span><br><span class="line">  [!] Docker registry</span><br><span class="line">  [!] Artifacts repo</span><br><span class="line">  [!] Source Status</span><br></pre></td></tr></table></figure><p><strong>データリポジトリの準備</strong> の章で記載しましたが、処理クラスタに応じてデータリポジトリを定義する必要があり、<a href="https://cloud.google.com/migrate/anthos/docs/data-repos">手順</a>に沿ってデータリポジトリを migctl コマンド経由で作成していきます。</p><p>データリポジトリ設定後に期待される <code>doctor</code> コマンドの応答は以下です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ migctl doctor</span><br><span class="line">  [✓] Deployment</span><br><span class="line">  [✓] Docker registry</span><br><span class="line">  [✓] Artifacts repo</span><br><span class="line">  [!] Source Status</span><br></pre></td></tr></table></figure><h1 id="ワークロードの-Migration-とデプロイ"><a href="#ワークロードの-Migration-とデプロイ" class="headerlink" title="ワークロードの Migration とデプロイ"></a>ワークロードの Migration とデプロイ</h1><p>※本章では Linux VM の移行を前提として記載を進めます。</p><h2 id="ワークロードの-Migration"><a href="#ワークロードの-Migration" class="headerlink" title="ワークロードの Migration"></a>ワークロードの Migration</h2><p><img src="/images/20210322/image.png"></p><p>※図は<a href="https://cloud.google.com/migrate/anthos/docs/migrating-linux-vm-overview">こちらの公式Doc</a>から拝借しました</p><p>移行作業自体は migctl を順繰りに叩いていくことになりますが、大きくは上図に記載された5つのステップに分割されます。</p><ul><li>移行元を追加する（Add a migration source）</li><li>移行を作成する（Create a migration）</li><li>移行計画をカスタマイズする（Customize the migration plan）</li><li>移行を実行する（Execute the migration）</li><li>移行をモニタリングする（Monitor the migration）</li></ul><p>移行作業のゴールは、移行元から抽出したアプリケーションを元にアーティファクトを作成することです。具体的には以下の2つが実行されます。</p><ul><li>抽出したワークロードから Docker イメージを作成し、 Docker イメージファイルレジストリ（ex.GCR）へコピーする</li><li>デプロイする際に使用する構成ファイル（YAML ファイル）を作成し、移行アーティファクトリポジトリ（ex.GCS）へコピーする</li></ul><p>一連の作業はひとつの <code>migration</code> プロセスとして管理され、 <code>migctl migration create</code> コマンドで作成されます。このコマンドの引数では例えばステートレスやステートフルなどの「移行対象のVMの性質」を指定することができ、それにより後に作成される構成ファイル（Kubernetes manifest）にてアプリを Deployment として定義するか Statefulset として定義するかが決定されることになります。</p><p>最終的に以下のようにアーティファクト生成の完了が確認できれば成功です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ migctl migration status my-migration</span><br><span class="line"></span><br><span class="line">NAME            CURRENT-OPERATION       PROGRESS        STEP            STATUS    AGE</span><br><span class="line">my-migration    GenerateArtifacts       [1/1]           ExtractImage    Completed 14m23s</span><br></pre></td></tr></table></figure><p>作成されたアーティファクトは以下コマンドでダウンロードできます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ migctl migration get-artifacts my-migration</span><br></pre></td></tr></table></figure><p>ダウンロードすると3種のファイルを取得できます。</p><ul><li>deployment_spec.yaml</li><li>Dockerfile</li><li>migration.yaml</li></ul><p>migration.yaml は migctl 上で管理される <code>migration</code> の設定が保存されており、このファイルを見ることでどのような <code>migration</code> を作成したか確認することができます。 Dockerfile はイメージビルドに使用されたものです。 deployment_spec.yaml はデプロイ時に使用する manifest ファイルで、 <code>migration</code> の設定が反映された構成になっています。</p><h2 id="ワークロードのデプロイ"><a href="#ワークロードのデプロイ" class="headerlink" title="ワークロードのデプロイ"></a>ワークロードのデプロイ</h2><p>ここまで来ればデプロイまではあと一歩です。</p><p>デプロイ先のクラスタが Docker イメージファイルレジストリへの読み取りアクセス権を有していることを確認したら、以下コマンドでデプロイを実施します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f deployment_spec.yaml</span><br></pre></td></tr></table></figure><p>ワークロードのデプロイ先は GKE もしくは Anthos なので、以降は通常の Kubernetes クラスタ上のアプリケーションと同様に kubectl コマンドを用いて操作・確認が可能となります。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>さて、ここまで Migrate for Anthos を基礎から学んで来ましたが、おそらく皆さんもお気づきの通り後はもう実際にやってみるに尽きます。理論上どのようなプロセスで実施可能かは分かりましたが、移行元および移行先のプラットフォームごとに勝手が異なり、また、移行対象が Linux か Windows かでも手順および使用するツールが変わってきます。</p><p>公式に <a href="https://cloud.google.com/migrate/anthos/docs/quickstart">クイックスタート</a> や <a href="https://google.qwiklabs.com/focuses/10268?parent=catalog">Qwiklabs</a> が準備されているためまずはこれにチャレンジしてみようと思いますが、どちらも見た感じ GCE をソースとして GKE を処理クラスタとして使う構成のようです。この構成は数種類ある Migrate for Anthos の方式の中でも一番シンプルで簡単なものであり、例えば処理クラスタとして Anthos clusters on VMware を使用し、自前で Docker イメージファイルレジストリを登録するパターンなどはもっと複雑で、ネットワーク周りの問題など様々な躓きポイントがあるであろうことが容易に想像できます。。。ワクワクしますね！！</p><p>この記事が Migrate for Anthos に初めて触れる方のガイドラインになれば幸いです。</p><p>明日はついにGCP連載2021のラスト、齋場さんによる <a href="/articles/20210323/">Cloud Spannerのローカル開発環境をdocker-composeでサクッと立ち上げる</a> 記事です。お楽しみに！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの&lt;a href=&quot;https://twitter.com/famipapamart&quot;&gt;村田&lt;/a&gt;です。</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="Anthos" scheme="https://future-architect.github.io/tags/Anthos/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="クラウドマイグレーション" scheme="https://future-architect.github.io/tags/%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%83%9E%E3%82%A4%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3/"/>
    
    <category term="コンテナ" scheme="https://future-architect.github.io/tags/%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A/"/>
    
  </entry>
  
  <entry>
    <title>Anthosの話についていくための最低限の知識をまとめてみた</title>
    <link href="https://future-architect.github.io/articles/20210319/"/>
    <id>https://future-architect.github.io/articles/20210319/</id>
    <published>2021-03-18T15:00:00.000Z</published>
    <updated>2021-03-22T04:05:47.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの越島と申します。</p><p><a href="/articles/20210307">GCP連載2021</a>第9弾です。今回技術ブログに初参加させていただきます。テーマはAnthosです。</p><p>Anthosは2019年にGoogleが発表した、「ハイブリッドクラウド・マルチクラウド環境に対応したアプリケーション管理プラットフォーム」です。発表から2年ほど経って、エンタープライズ向けのシステム構成を検討する際に名前が挙がることも増えてきている実感があります。そんなAnthosですが、構成要素が多くて中々全体像が掴みきれない人も多いのではないかと思います。</p><p>今回は、「Anthosって何だかよく分からん」という人が、Anthosの話題についていくための最低限の知識をまとめてみようと思います。この記事を読んだ方が、次どこかでAnthosの話題が出たときに、「あ〜はいはいAnthosね」とある程度自信を持って言えるようになることを目指しています。</p><h1 id="企業向けシステムとクラウドを取り巻く事情"><a href="#企業向けシステムとクラウドを取り巻く事情" class="headerlink" title="企業向けシステムとクラウドを取り巻く事情"></a>企業向けシステムとクラウドを取り巻く事情</h1><p>Anthosが徐々に注目を集めている理由と、Googleが注力している理由を知るために、まずは昨今の企業の情報システムとクラウドを取り巻く事情について見てみましょう。</p><p>Googleによって行われた調査によると、調査対象の73%の組織がクラウドを何らかの形で利用しているのに対して、実際にシステムの処理をクラウドに移しているのは10%にしか満たないとのことです。また、80%の組織がクラウドにシステムの処理を移した後、運用コスト等を理由にそれをオンプレ環境に移し戻しているとのことです。AWS、GCP、Azureなどのクラウドサービスの成長が著しいので、クラウド全盛の時代！という感じでクラウドへの移行がどんどん進んでいるイメージを持っている人も多いと思いますが、実態としてはオンプレへの需要も根強いというところでしょうか。</p><p>こういった事情から、ここ数年特に注目されているのが、クラウドとオンプレを上手く組み合わせる、「ハイブリッドクラウド」です。データの機密性に応じてオンプレ環境とクラウド環境を使い分けたり、高負荷になったときだけクラウド側に負荷分散をさせて定常的なコストを抑えながらシステムが落ちるリスクも減らしたり等、適材適所でシステムを組むことで得られるメリットは大きいです。また、複数のクラウドサービスを用いる「マルチクラウド」という考え方も、一つのサービスに依存する危険性を減らすという意味で注目されています。</p><p>しかし、ハイブリッドクラウドやマルチクラウドはシステム構成や運用が複雑になりがちという課題もあります。ハイブリッドクラウド・マルチクラウド構成のそのような課題を解決し、柔軟なシステム構成と統合的な管理を実現するためのGoogle流のソリューションがAnthosです。</p><h1 id="Anthosの構成要素"><a href="#Anthosの構成要素" class="headerlink" title="Anthosの構成要素"></a>Anthosの構成要素</h1><p><img src="/images/20210319/Anthos_Diagram_(3).png"></p><p>Anthosはいくつかの技術要素を組み合わせて、ハイブリッド/マルチクラウドを一元管理するためのプラットフォームを提供しています。ここでは、Anthosの構成要素・提供機能の中でも特に重要な以下の3つについて説明します。</p><ol><li>クラスタ管理（Anthos Clusters）</li><li>サービス管理（Anthos Service Mesh）</li><li>ポリシー管理（Anthos Config Management）</li></ol><h2 id="クラスタ管理-Anthos-Clusters"><a href="#クラスタ管理-Anthos-Clusters" class="headerlink" title="クラスタ管理 (Anthos Clusters)"></a>クラスタ管理 (Anthos Clusters)</h2><p>Anthosでは、オンプレ・クラウドを統合してクラスタ管理を行うための機能が提供されています。</p><h3 id="KubernetesとGKEのおさらい"><a href="#KubernetesとGKEのおさらい" class="headerlink" title="KubernetesとGKEのおさらい"></a>KubernetesとGKEのおさらい</h3><p>（KubernetesとGKEのおさらいは、関さんのGKE Autopilotを触ってみた記事でも行われていますが、この記事でも手短に説明します。）</p><p>Kubernetesはコンテナオーケストレーションのためのツールで、数百〜数千といった膨大な数のコンテナを管理、協調させるために使われます。コンテナは環境差異の影響を最小限にできたり、高速なアプリケーション配信・デプロイが可能な点が利点ですが、運用管理の観点からは様々な課題が存在しています。本番運用に耐えうる冗長性の確保や負荷分散、オートスケーリングなどを実現する管理レイヤを提供するのがコンテナオーケストレーションで、そのデファクトスタンダードとなっているのがKubernetesです。</p><p>Kubernetesのコンポーネントは、コンテナの実行ホストを提供する「ワーカーノード」と、それを管理する「マスターノード（コントロールプレーン）」の2つに分かれます。</p><p>GKE（Google Kubernetes Engine）は、GoogleがGCPのプロダクトの一つとして提供しているKubernetesのマネージドサービスです。GKEはユーザーが自前で構築、運用するのが特に難しい部分である「マスターノード」をGoogleが管理してくれたり、Kubernetesのアップデートがしやすい等のメリットがあります。</p><h3 id="Anthosが提供するもの（Anthos-Clusters）"><a href="#Anthosが提供するもの（Anthos-Clusters）" class="headerlink" title="Anthosが提供するもの（Anthos Clusters）"></a>Anthosが提供するもの（Anthos Clusters）</h3><p><img src="/images/20210319/Anthos_Diagram_(4).png"></p><p>Anthosでは、前述したGKEに加えて、GCP以外の環境で動くGKEベースのKubernetesサービスを提供することで、環境によらずにオンプレ・クラウドで統一的にコンテナを管理する仕組みを作っています。<br>GCP以外の環境で動くGKEベースのKubernetesサービスは、現在は、オンプレ環境用の<strong>Anthos Clusters for VMware(GKE On-Prem)<strong>、</strong>Anthos Clusters on bare metal</strong>と、AWS上で動く**Anthos Clusters for AWS(GKE on AWS)**が提供されています。これらを導入すると、全ての環境のKubernetesがGCPコンソール上から一元的に管理・操作できたり、他のGCPサービス（Cloud Build、Container Registry、Audit Loggingなど）との連携がしやすくなります。</p><p>※余談ですが、Anthosはまだ発展中の部分が多いため、サービスや機能の呼び名がちらほら変わることがあります。以前、<strong>GKE On-Prem</strong>が<strong>Anthos GKE</strong>という名前に変わったことがありましたが、今は<strong>Anthos Clusters for VMWare</strong>、<strong>Anthos Clusters on bare metal</strong>といった呼び方に変わっているようです。</p><h2 id="サービス管理（Anthos-Service-Mesh）"><a href="#サービス管理（Anthos-Service-Mesh）" class="headerlink" title="サービス管理（Anthos Service Mesh）"></a>サービス管理（Anthos Service Mesh）</h2><p>Anthosが提供する2つ目の機能がサービス管理です。</p><h3 id="サービスメッシュのおさらい"><a href="#サービスメッシュのおさらい" class="headerlink" title="サービスメッシュのおさらい"></a>サービスメッシュのおさらい</h3><p>サービスメッシュはマイクロサービスが抱える問題解決のための1つのアプローチです。<br>そもそも、マイクロサービスが抱える課題とは何でしょうか？</p><p><img src="/images/20210319/Anthos_Diagram-Page-2.png"></p><p>それぞれの機能が密結合している「モノリシック・アーキテクチャ」に比べて、アプリケーションが独立した複数のコンポーネントとして構築される「マイクロサービス・アーキテクチャ」では、各モジュールが疎結合になるため、スケール・冗長化が容易だったり改修の際に他機能におよぼす影響を低減できるメリットがあります。その反面、疎結合にした各モジュール間のやりとりで考慮すべきことが増えるという側面もあります。</p><p><img src="/images/20210319/Anthos_Diagram-Copy_of_Page-2_(3).png"></p><p>サービスメッシュは、こうしたマイクロサービス・アーキテクチャになることで必要となるネットワーク機能とビジネスロジックを分解して、アプリケーション開発者がビジネスロジックの開発に専念できるようにするのが狙いです。Kubernetesでは、主となるコンテナと共にそれを補助する役割を果たすコンテナを持つ構成（サイドカーパターン）を作ることでこれを実現するのが一般的になっています。サイドカープロキシを経由し、すべてのサービスがメッシュ状に接続されることから、「サービスメッシュ」と呼ばれています。</p><p><img src="/images/20210319/Anthos_Diagram-Copy_of_Copy_of_Page-2_(2).png"></p><h3 id="Anthosが提供するもの（Anthos-Service-Mesh）"><a href="#Anthosが提供するもの（Anthos-Service-Mesh）" class="headerlink" title="Anthosが提供するもの（Anthos Service Mesh）"></a>Anthosが提供するもの（Anthos Service Mesh）</h3><p><img src="/images/20210319/Anthos_Diagram-Copy_of_Page-1.png"></p><p>前述したサービスメッシュを実現するソフトウェアはいくつかありますが、最も有名かつAnthosで採用されているのがIstioです。Istioは、大きく分けて、サイドカーコンテナとして対象のPodに入るEnvoyプロキシから成るデータプレーンと、それらを管理するコントロールプレーンの2つに分類できます。Anthos Service Meshは、マネージド版のIstioで、コントロールプレーンがGoogle管理となります。</p><h2 id="ポリシー管理（Anthos-Config-Management）"><a href="#ポリシー管理（Anthos-Config-Management）" class="headerlink" title="ポリシー管理（Anthos Config Management）"></a>ポリシー管理（Anthos Config Management）</h2><p><img src="/images/20210319/Anthos_Diagram-Copy_of_Copy_of_Page-1.png"></p><p>最後に説明するAnthos Config Managementは、Kubernetesの構成やポリシー等を一箇所でまとめて管理し、オンプレ・クラウドにまたがる複数環境に適用するためのGitOpsスタイルのツールです。こういった管理面でも一つの場所で一言管理できる仕組みを提供することで、ハイブリッド/マルチクラウドの運用を簡易化するのが狙いです。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Anthosの話についていくための最低限の知識をまとめてみました。これまでAnthosの前提知識が全くなかった方でも、「Anthos…?」という状態からは抜け出せたのではないでしょうか。</p><p>それぞれの技術要素の詳細や、Anthosの他の提供機能など、この記事ではカバーしきれなかった内容は勿論たくさんありますが、この記事を読んだ方が今後公式ドキュメントなどを見たときに「なんかスッと入ってくるぞ！」と思ってもらえたら嬉しいです。</p><p>次回は村田さんの <a href="/articles/20210322/">Migrate for Anthos を基礎から学ぶ</a> です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの越島と申します。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/20210307&quot;&gt;GCP連載20</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="Kubernetes" scheme="https://future-architect.github.io/tags/Kubernetes/"/>
    
    <category term="Anthos" scheme="https://future-architect.github.io/tags/Anthos/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="Istio" scheme="https://future-architect.github.io/tags/Istio/"/>
    
  </entry>
  
  <entry>
    <title>GKE Autopilotを触ってみた</title>
    <link href="https://future-architect.github.io/articles/20210318/"/>
    <id>https://future-architect.github.io/articles/20210318/</id>
    <published>2021-03-17T15:00:00.000Z</published>
    <updated>2021-03-19T00:43:27.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの関と申します。<a href="/articles/20210307">GCP連載2021</a>第8弾です。</p><p>今回技術ブログに初参加させていただきます。テーマは、2021年2月24日に公開されたGKE Autopilotです。<br>この記事は、Kubernetesに触ったことがない方でもわかるように、最も簡単な構成で試してみました。<br>Kubernetesを触ったことがない方にもみていただけるとありがたく思います。</p><h1 id="KubernetesとGKEのおさらい"><a href="#KubernetesとGKEのおさらい" class="headerlink" title="KubernetesとGKEのおさらい"></a>KubernetesとGKEのおさらい</h1><p>まずは、GKEとKubernetesについて簡単に導入をしたいと思います。</p><h2 id="Kubernetesとは？"><a href="#Kubernetesとは？" class="headerlink" title="Kubernetesとは？"></a>Kubernetesとは？</h2><p>Kubernetesはコンテナオーケストレーションのためのツールで、数百〜数千といった膨大な数のコンテナを管理、協調させることができます。</p><p>一つ以上のマシンを組み合わせたクラスタを構成し、それを単位とした分散システムとして動作します。論理的には”コントロールプレーン”と”ワーカーノード”という2つの構成要素からなります。</p><p>デプロイされたコンテナが動作するのはワーカーノード上です。そして、ワーカーノードは複数のマシンで構成することができます。このため、ノードの構成を工夫すれば、比較的簡単にコンテナが動作しているマシンを分散させることができ、サービスとしての信頼性や実行効率を上げることができます。<br>地理的に分散させれば、データセンターレベル障害に対しても耐性を持たせることも可能です。</p><p>Kubernetesへのデプロイは、一つ以上のコンテナをひとまとめにしたPodと呼ばれる単位で行われます。<br>なので、「複数のコンテナで一つのサービスとして動作させたい」といったニーズにも答えることができます。<br>基本的に、Kubernetesにのせるサービスの開発者は、Podの構成は自分たちで考えることになります。</p><h2 id="GKEとは？"><a href="#GKEとは？" class="headerlink" title="GKEとは？"></a>GKEとは？</h2><p>GKE(Google Kubernetes Engine)とは、GoogleがGCPのプロダクトの一つとして提供しているKubernetesのマネージドサービスです。</p><p>これまでのGKEは上記で説明したコントロールプレーンについて、Googleが管理してくれていました。<br>利用者は、ワーカノードの構成を考えてクラスタを作成することで、コントロールプレーンの管理をすることなくKubernetesを利用することができます。</p><h1 id="GKE-Autopilot"><a href="#GKE-Autopilot" class="headerlink" title="GKE Autopilot"></a>GKE Autopilot</h1><img src="/images/20210318/aircraft.jpg"><blockquote><p><a href="https://pixabay.com/ja/users/fotosforyou_rk-2368449/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1327820">Ralph Klein</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1327820">Pixabay</a>からの画像</p></blockquote><p>さて、ここからが本題です。</p><h2 id="GKE-Autopilotとは？"><a href="#GKE-Autopilotとは？" class="headerlink" title="GKE Autopilotとは？"></a>GKE Autopilotとは？</h2><p>GKE AutopilotはGKEの新しい運用モードです。</p><p>これまでのGKEとの大きな違いは、Googleがワーカーノードの基本的な管理を担ってくれるということです。</p><p>これまでは、ワーカーノードの管理は基本的に利用者側で行う必要がありました。ワーカーノードの管理では次に示すような様々なことを考える必要があります。それなり運用コストがあり、Kubernetesの利点を最大限に得るには構成を十分に練る必要がありました。</p><ul><li>用意するインスタンスのグレードは？</li><li>どれくらいの数のインスタンスを用意するか？</li><li>どのPodをどのノードにのせて、どのノードにのせるべきではないのか？</li><li>インスタンスの利用効率を上げるための最適な構成は？</li><li>利用者が複数のチームに分かれている場合の利用ルールは？</li></ul><p>Autopilotを使うことで、Googleがワーカーノードの管理、最適化を行ってくれるためこれらの考慮が不要になります。</p><p>利用者はインフラであるノードの構成をほとんど意識せずに「Podをどのように構成するか」という、より高レイヤーの問題に集中できるようになります。アプリ開発者としては嬉しいですね。</p><p>デプロイされたPodに割り当てるリソースは、Podの仕様と負荷をに基づきAutopilotが自動でプロビジョニング、スケーリングしてくれます。また、料金計算、SLAはPod単位で行われます。</p><p>その他の詳細情報については、公式ドキュメントが詳しいのでそちらを参照してください。</p><ul><li><a href="https://cloud.google.com/kubernetes-engine/docs/concepts/autopilot-overview?hl=ja">Autopilotの概要</a></li><li><a href="https://cloud.google.com/blog/ja/products/containers-kubernetes/introducing-gke-autopilot">GKE Autopilot のご紹介: マネージド Kubernetes における革命</a></li></ul><h1 id="GKE-Autopilotを触ってみる"><a href="#GKE-Autopilotを触ってみる" class="headerlink" title="GKE Autopilotを触ってみる"></a>GKE Autopilotを触ってみる</h1><p>公式でもチュートリアルがありますが、今回は初心者向けにもう少し簡単な構成を試してみようと思います。<br>Kuberntesを触ったことがない方でも、なんとなく雰囲気は掴めるはずです。</p><h2 id="クラスタの作成"><a href="#クラスタの作成" class="headerlink" title="クラスタの作成"></a>クラスタの作成</h2><p>クラスタを作りましょう。Autopilotの設定はクラスタを作る際に行えます。<br>新機能ですし、ここではGUIでどのように設定できるのかをみていきましょう。</p><p><img src="/images/20210318/image.png"><br>作成を押します。<br>ポップアップが出て、モードを選択できるようになっていました。<br>もちろん、Autopilotを選択します。<br><img src="/images/20210318/image_2.png"></p><p>ネットワーキングオプションなど、選択項目もありますが、今回はひとまず触るのが目的なため、デフォルトのまま変更しないことにします。<br>画面下方の”コマンドライン”のリンクを押すとgcloudコマンドを表示可能です。記録を残したりするのに使えそう。<br><img src="/images/20210318/image_3.png"></p><p>作成を押します。クラスタの作成が始まります。<br>5min以上待つ必要があります。<br><img src="/images/20210318/image_4.png"></p><h2 id="gcloudコマンドを導入する"><a href="#gcloudコマンドを導入する" class="headerlink" title="gcloudコマンドを導入する"></a>gcloudコマンドを導入する</h2><p><a href="https://cloud.google.com/sdk/docs/quickstart-macos?hl=ja">公式ドキュメント</a>に沿って導入しましょう。<br>この記事ではクラスタの情報を取得することだけに使うため、出番少なめです。</p><h2 id="kubectlコマンドを導入する"><a href="#kubectlコマンドを導入する" class="headerlink" title="kubectlコマンドを導入する"></a>kubectlコマンドを導入する</h2><p>macでHomebrewを使っているならコマンド一発です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install kubectl</span><br></pre></td></tr></table></figure><p>Kubernetes公式のインストール方法は<a href="https://kubernetes.io/ja/docs/tasks/tools/install-kubectl/">こちら</a></p><h2 id="kubectlにクラスタの情報を読み込ませる"><a href="#kubectlにクラスタの情報を読み込ませる" class="headerlink" title="kubectlにクラスタの情報を読み込ませる"></a>kubectlにクラスタの情報を読み込ませる</h2><p>Kubernetesの操作はkubectlコマンドで行います。<br>そのためには、kubectlコマンドにどのクラスタを対象にするのか教えてあげる必要があります。</p><p>まずは、gcloudコマンドでログインします。<br><code>gcloud auth login</code>だとエラーが出たので、その表示に従い下記のコマンドを実行。<br>画面の指示に従いログイン完了まで行います。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud auth login --no-launch-browser</span><br></pre></td></tr></table></figure><p>GCPのコンソール に戻ります。<br>こちらの”接続”を選択します。<br><img src="/images/20210318/image_5.png"></p><p>コマンドが表示されるので、それをターミナルに貼り付けて実行します。<br><img src="/images/20210318/image_6.png"></p><p>今回の場合、こんな感じ。実行すると、kubectlコマンドの対象クラスタがこのクラスタに切り替わってくれます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud container clusters get-credentials autopilot-cluster-1 --region us-central1 --project high-tribute-307823</span><br></pre></td></tr></table></figure><h2 id="クラスタの情報をみてみる"><a href="#クラスタの情報をみてみる" class="headerlink" title="クラスタの情報をみてみる"></a>クラスタの情報をみてみる</h2><p>ひとまず、nodeの情報でもみてみましょう。<br>node1つが1つのVMであり、これまでのGKEだとGCEインスタンスを作成してノードとして利用していました。<br>nodeの情報をみるには<code>kubectl get node</code>コマンドを使います。<code>-o wide</code>すると詳細情報含めて表示してくれます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node -o wide</span><br></pre></td></tr></table></figure><p>実行結果<br>Autopilotでは利用者側で管理することはないですが、nodeの情報を取得するのは通常通りできるようです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NAME                                                 STATUS   ROLES    AGE   VERSION             INTERNAL-IP   EXTERNAL-IP    OS-IMAGE                             KERNEL-VERSION   CONTAINER-RUNTIME</span><br><span class="line">gk3-autopilot-cluster-1-default-pool-80d33c8f-xbzz   Ready    &lt;none&gt;   44m   v1.18.12-gke.1210   10.128.0.4    34.71.253.60   Container-Optimized OS from Google   5.4.49+          containerd:&#x2F;&#x2F;1.4.1</span><br><span class="line">gk3-autopilot-cluster-1-default-pool-da3faeda-70qd   Ready    &lt;none&gt;   44m   v1.18.12-gke.1210   10.128.0.5    34.66.97.220   Container-Optimized OS from Google   5.4.49+          containerd:&#x2F;&#x2F;1.4.1</span><br></pre></td></tr></table></figure><h2 id="Depoloymentを作成してみる"><a href="#Depoloymentを作成してみる" class="headerlink" title="Depoloymentを作成してみる"></a>Depoloymentを作成してみる</h2><p>さて、ようやくですが、Pod(コンテナ)をデプロイしてみましょう。</p><p>今回はnginxを用いたPodをデプロイしてみます。</p><p>Kubernetesを実運用する際には、マニフェストファイルと呼ばれるファイルにリソースの情報を書き、それをもとにkubectlコマンドでクラスタにリソースを作成する流れになります。実運用に沿った形で、マニフェストを作成して、それを適用していきましょう。</p><p>まずはマニフェストファイルの作成です。自身の内部にデータを保持しないステートレスアプリケーションの場合、Deploymentリソースを使います。<br>下記のファイルを作成し、<code>deployment.yaml</code>というファイル名で保存します。</p><p>こちらは<a href="https://kubernetes.io/ja/docs/concepts/workloads/controllers/deployment/#creating-a-deployment">Kubernetesの公式</a>から拝借しています。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.14.2</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure><p>軽く説明をしておきます。<br><code>.spec.template.spec</code>に書かれているのがPodの仕様です。nginxのコンテナが一つだけの構成ですね。80番ポートでlistenしています。<code>containers</code>と書かれているのは、一つのPodに複数のコンテナを含めることができるからです。同一Podのコンテナはlocalhost内で通信できます。今回は特に使わないですがPod内で通信する時に必要なマメ知識です。</p><p><code>.spec.replicas</code>の”3”は、「Podを3つデプロイする」という意味です。Podの冗長性を持たせるために通常は複数個にします。負荷分散や対障害性を持たせることができます。</p><p>次に、マニフェストファイルをもとに、Kubernetesリソースを作成します。<br><code>kubectl apply</code>コマンドを使います。<code>kubectl create</code>コマンドもありますが、マニフェストを更新した時などで想定外の挙動をすることがあるのでこちらが推奨です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># -f &#123;path&#125;　で対象のマニフェストを指定する。</span><br><span class="line">kubectl apply -f deployment.yaml</span><br></pre></td></tr></table></figure><p>さて、Podが起動していることを確認しましょう。<br>GCPコンソールで、サイドメニューのワークロードを選択するとみれます。<br>エラーになっていますね、、、<br>あれこれ試しているうちに、ワーカーノードのリソースが小さくなってしまったのかもしれません。<br><img src="/images/20210318/image_7.png"><br>しばらく待ってみましょう。</p><p>しばらくして、「nodeどうなっているんだろう？」という疑問が湧いてきました。<br>おもむろに<code>kubectl get node</code>します。なんと、nodeが増えていました。<br>自動でリソースを拡充してくれているようです。これは期待できる。。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NAME                                                 STATUS   ROLES    AGE     VERSION             INTERNAL-IP   EXTERNAL-IP     OS-IMAGE                             KERNEL-VERSION   CONTAINER-RUNTIME</span><br><span class="line">gk3-autopilot-cluster-1-default-pool-80d33c8f-03kr   Ready    &lt;none&gt;   3m53s   v1.18.12-gke.1210   10.128.0.8    35.224.63.159   Container-Optimized OS from Google   5.4.49+          containerd:&#x2F;&#x2F;1.4.1</span><br><span class="line">gk3-autopilot-cluster-1-default-pool-80d33c8f-xbzz   Ready    &lt;none&gt;   69m     v1.18.12-gke.1210   10.128.0.4    34.71.253.60    Container-Optimized OS from Google   5.4.49+          containerd:&#x2F;&#x2F;1.4.1</span><br><span class="line">gk3-autopilot-cluster-1-default-pool-da3faeda-70qd   Ready    &lt;none&gt;   68m     v1.18.12-gke.1210   10.128.0.5    34.66.97.220    Container-Optimized OS from Google   5.4.49+          containerd:&#x2F;&#x2F;1.4.1</span><br><span class="line">gk3-autopilot-cluster-1-default-pool-da3faeda-7hlr   Ready    &lt;none&gt;   3m53s   v1.18.12-gke.1210   10.128.0.6    34.122.151.81   Container-Optimized OS from Google   5.4.49+          containerd:&#x2F;&#x2F;1.4.1</span><br><span class="line">gk3-autopilot-cluster-1-default-pool-da3faeda-ndl1   Ready    &lt;none&gt;   3m49s   v1.18.12-gke.1210   10.128.0.7    35.223.252.22   Container-Optimized OS from Google   5.4.49+          containerd:&#x2F;&#x2F;1.4.1</span><br></pre></td></tr></table></figure><p>少し待ったところ、、、<br><img src="/images/20210318/image_8.png"></p><p>できました！！！リソース作成成功です！！！</p><p>ちなみに、<code>kubectl get pod</code>コマンドでもPodの情報をみることができます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod</span><br></pre></td></tr></table></figure><p>実行結果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment-69c549b4bb-4r8hs   1&#x2F;1     Running   0          26m</span><br><span class="line">nginx-deployment-69c549b4bb-68lww   1&#x2F;1     Running   0          26m</span><br><span class="line">nginx-deployment-69c549b4bb-fv7bx   1&#x2F;1     Running   0          26m</span><br></pre></td></tr></table></figure><h2 id="LoadBalancer-Serviceを作成してみる。"><a href="#LoadBalancer-Serviceを作成してみる。" class="headerlink" title="LoadBalancer Serviceを作成してみる。"></a>LoadBalancer Serviceを作成してみる。</h2><p>Podを作っただけだといまいち実感が沸かないという方のために、外部からアクセスできるようにしてみます。<br>LoadBalancer Serviceリソースを作ることで、GCPのロードバランサーを構成し、それ経由で外部からのアクセスを受け付けることができます。</p><p>まずはマニフェストファイルを作成します。<code>service.yaml</code>という名前で保存します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: sample-lb</span><br><span class="line">spec:</span><br><span class="line">  type: LoadBalancer</span><br><span class="line">  ports:</span><br><span class="line">    - name: &#39;http-port&#39;</span><br><span class="line">      protocol: &#39;TCP&#39;</span><br><span class="line">      port: 80</span><br><span class="line">      targetPort: 80</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br></pre></td></tr></table></figure><p>こちらも軽く説明しておきます。<br><code>.spec.ports</code>でポートの設定をします。<code>targetPort</code>がコンテナがlistenしているポート番号、<code>port</code>はロードバランサがlistenするポート番号です。<code>.spec.selector</code>でどのPodに対してルーティングするかを指定します。<code>deployment.yaml</code>で指定したlabelの<code>app: nginx</code>を指定しています。</p><p>次に、マニフェストファイルをもとに、kubectlコマンドでリソースを作成します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f service.yaml</span><br></pre></td></tr></table></figure><p>作成されたサービスの情報をみてみましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get service</span><br></pre></td></tr></table></figure><p>実行結果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NAME         TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes   ClusterIP      10.8.128.1     &lt;none&gt;        443&#x2F;TCP        109m</span><br><span class="line">sample-lb    LoadBalancer   10.8.130.152   34.70.67.75   80:31465&#x2F;TCP   88s</span><br></pre></td></tr></table></figure><p>EXTERNAL-IPと書かれているのが、LoadBalancerのIPです。</p><p>LoadBalancer Serviceを作成すると、コントロールプレーンでそれを認識し、GCPのロードバランサを自動で作成してくれます。これはAutopilot限定の機能ではなく、これまでも可能だった機能です。</p><p>ロードバランサができていることをGCPコンソールで確認してみましょう。<br><img src="/images/20210318/image_9.png"></p><p>いかにも自動生成な名前でロードバランサが作成されているのがわかります。</p><p>さて、先ほどのEXTERNAL-IPにブラウザからアクセスしてみましょう。<br>もちろん、インターネットオーバーでのアクセスです。</p><p><img src="/images/20210318/image_10.png"></p><p>できました！！！</p><h2 id="リソースの削除"><a href="#リソースの削除" class="headerlink" title="リソースの削除"></a>リソースの削除</h2><p>ここからはお片付けです。</p><p>次のようにして、<code>kubectl delete</code>コマンドで削除できます。特に、LoadBalancer Serviceの削除をサボると自動生成されたLoadBalancerが削除されないままになるので注意が必要です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete -f deployment.yaml</span><br><span class="line">kubectl delete -f service.yaml</span><br></pre></td></tr></table></figure><h2 id="クラスタを破棄します"><a href="#クラスタを破棄します" class="headerlink" title="クラスタを破棄します"></a>クラスタを破棄します</h2><p>クラスタの再構成がなされるので、完了まで待ちましょう。<br>次のように、削除を選択し、しばらく待てばクラスタが削除できます。<br><img src="/images/20210318/image_11.png"></p><h2 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h2><p>これ以外にも、作成するPodの数を増やしてみたり、公式チュートリアルをやったり、いろいろ触ってみました。<br>リソースが足りなくなると、新しくNodeを確保して、ちょっと待つとPodがスケジューリングされる様子をみることができ、まさしく”Autopilot”という名にふさわしい挙動でした。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>公式の説明通り、ノードの設定を特にせずとも使え、一度作ったあとの使い方には大きな差がなく普通に使いやすいと感じました。</p><p>シンプルに、ワーカーノードのことを一切考えなくて良くなるのは魅力です。<br>インフラの最適化を自動でやってくれるので、リソースとしてのノードの過不足を気にせずにマニフェストに集中できるので、ワーカーノードの運用の難しさやそれに伴う導入障壁を感じているのであれば、恩恵を受けられると思います。</p><p>さて、明日は越島さんの<a href="/articles/20210319/">Anthosの話についていくための最低限の知識をまとめてみた</a>です。お楽しみに！</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20191025/index.html" data-iframely-url="//cdn.iframe.ly/GSevbOV?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの関と申します。&lt;a href=&quot;/articles/20210307&quot;&gt;GCP連載2021&lt;/a&gt;第8弾</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="Kubernetes" scheme="https://future-architect.github.io/tags/Kubernetes/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="GKE" scheme="https://future-architect.github.io/tags/GKE/"/>
    
  </entry>
  
  <entry>
    <title>Google Cloud BuildpacksとCloud Runで簡単コンテナアプリ開発</title>
    <link href="https://future-architect.github.io/articles/20210317/"/>
    <id>https://future-architect.github.io/articles/20210317/</id>
    <published>2021-03-16T15:00:00.000Z</published>
    <updated>2021-03-18T00:52:40.733Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。TIGの<a href="https://twitter.com/kaedemalu">伊藤太斉</a>です。<br><a href="/articles/20210307">GCP連載2021</a>第7弾です。</p><img src="/images/20210317/GCP_Containers_Kubernetes.png"><blockquote><p><a href="https://cloud.google.com/blog/ja/products/containers-kubernetes/google-cloud-now-supports-buildpacks">https://cloud.google.com/blog/ja/products/containers-kubernetes/google-cloud-now-supports-buildpacks</a> より</p></blockquote><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>みなさん、コンテナを利用してアプリケーション開発していますか？最近は新規開発するとなったら大体アーキテクチャを検討する段階で「アプリケーションをコンテナ化するか」と話題になっているのではないでしょうか？単純にコンテナをデプロイして利用するだけならまだしも、Kubernetesをベースとしてアプリケーションを動かすとなると、</p><ul><li>Kubernetesへの理解が追いつかない</li><li>運用まで乗せることが大変</li><li>そもそもDockerfile書くのもしんどい</li><li>etc…</li></ul><p>といった感じで採用までに立ちはだかる壁は大きく分厚いものかと思います。</p><p>また、既存のアプリをできるだけコストを抑えつつコンテナ化したい、なんていう声もありますよね？今はVMで稼働させているけど、とりあえずモダンなことしてみたい、などと言われることもあります。そんな方々への福音になるのがCloud Native Buildpacks（CN Buildpacks）です。</p><p>今回は、さらにGoogleでホストしているGoogle Cloud Buildpacks（GC Buildpacks）を利用しながらCloud Runへのデプロイを行って、簡単にアプリのコンテナ化をしていこうと思います。</p><p>CN Buildpacksについて実際に検証を行っている記事もありますので、こちらもご覧ください。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20201002/index.html" data-iframely-url="//cdn.iframe.ly/api/iframe?url=https%3A%2F%2Ffuture-architect.github.io%2Farticles%2F20201002%2F&key=42622142e53a4cc5ab36703bcee5415f"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><h2 id="環境について"><a href="#環境について" class="headerlink" title="環境について"></a>環境について</h2><ul><li>Dockerがインストールされていること</li><li>CN Buildpacksがインストールされていること<ul><li>インストール方法は<a href="https://buildpacks.io/docs/tools/pack/">こちら</a>を参照</li></ul></li><li>Google Cloud SDKをインストールして、設定済みであること<ul><li>本記事執筆時点では <code>331.0.0</code>を利用しています</li></ul></li></ul><h2 id="Google-Cloud-Buildpacksについて"><a href="#Google-Cloud-Buildpacksについて" class="headerlink" title="Google Cloud Buildpacksについて"></a>Google Cloud Buildpacksについて</h2><p>冒頭でも触れていますが、今回、CNCFがホストしているCN BuildpacksとGoogleでホストしているGC Buildpacksがあります。GC BuildpacksはV3をベースとしています。今現在はCloud FunctionsやApp Engineの裏側のビルドに用いられるようになっている、GCPの中でサービスではないものの重要な部分を担っているものの一つです。</p><p>ベースのイメージにはUbuntu 18.04が採用されており、定期的にパッチを当てていたり脆弱性に対しても積極的にフォローしています。</p><p>Buildpacksにはアプリケーションの言語を検知する機能を有しており、言語ごと合わせてコンテナ化されていきます。現在GC Buildpacksでサポートしている言語は、</p><ul><li>Go</li><li>Java</li><li>Node.js</li><li>Python</li><li>.NET</li></ul><p>が利用できます。Cloud Run自体はRubyアプリなども乗せることはできますが、ここはGC Buildpacksの今後の発展に期待ですね。</p><h2 id="Cloud-Native-Buildpacksを使ってみる"><a href="#Cloud-Native-Buildpacksを使ってみる" class="headerlink" title="Cloud Native Buildpacksを使ってみる"></a>Cloud Native Buildpacksを使ってみる</h2><p>ここからは<a href="https://github.com/GoogleCloudPlatform/buildpack-samples">Google Cloud公式のチュートリアル</a>を使いながら実際にCloud Runを利用するところまで実行してみます。今回はnodeのアプリケーションを利用します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/GoogleCloudPlatform/buildpack-samples.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> buildpack-samples/sample-node</span></span><br></pre></td></tr></table></figure><p>Cloneまでできたらまずはローカルで動かしましょう。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm start</span></span><br></pre></td></tr></table></figure><p><a href="http://localhost:3000/">http://localhost:3000</a> にアクセスして<code>hello, world</code>が表示されることを確認しましょう。まずはコンテナになる前に動くことがわかったので次はBuildpacksを使ってコンテナ化して動かしましょう。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pack build --builder=gcr.io/buildpacks/builder node</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -it -ePORT=8080 -p8080:8080 node</span></span><br></pre></td></tr></table></figure><p>こちらでも同じように<code>hello, world</code>が表示されたかと思います。コンテナ化しても同じ動きを確認したので、次は実際にCloud Runを使って確認してみましょう。<br>Cloud Runにデプロイする時はContainer Registryからデプロイを行いますが、ローカル環境からのデプロイ方法として2種類あります。</p><ol><li>Cloud BuildでコンテナをビルドしてContainer Registryへ保存する</li><li>ローカルでビルドしてContainer Registryへpushする。</li></ol><p><img src="/images/20210317/builcpack.png"></p><p>１の方がローカルを汚さずに済んだり、ローカルPCの能力に依存せずにビルドできるので、今回は前者で進めます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcloud alpha builds submit --pack image=gcr.io/[project-id]/node</span></span><br></pre></td></tr></table></figure><p>この１行で自動的にビルドから保存まで実行してくれます。この時、引数に<code>--pack</code>をつけることでBuildpacksを使うことを指定しています。ここまでくればあとはデプロイコマンドを１行実行するだけです。</p><h3 id="Cloud-Runへのデプロイを行う"><a href="#Cloud-Runへのデプロイを行う" class="headerlink" title="Cloud Runへのデプロイを行う"></a>Cloud Runへのデプロイを行う</h3><p>ここでCloud Runにデプロイを行います。とはいえ、コマンド1行で実行完了するので、あっという間です。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcloud run deploy --image=gcr.io/[project-id]/node --platform managed</span></span><br></pre></td></tr></table></figure><p>このコマンドを実行すると、</p><ul><li>サービス名</li><li>リージョン</li><li>認証されていないものを許可するか</li></ul><p>と選択肢に出てくるので各々お好みのものを選択しましょう。<br>これでデプロイが終わればコンソールからCloud Runの画面に遷移して、URLをクリックすると、ローカルで見ていた画面と同じく<code>hello, world</code>が出力されているかと思います。<br>これで、ローカル、コンテナアプリ、Cloud Runの３つの状態で同じアプリを利用できました。</p><p><img src="/images/20210317/image.png"></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Cloud Runが発表された2019年のGoogle Cloud Nextはかなり盛り上がったことを今でも覚えていて、その時はなんとかして知ろう、早く使おう、みたいな気持ちがあったことを思い出しました。それから2年が経とうとしていますが、IaaS畑が中心だった私はコンテナをガッツリ触ることなくここまで来ました。</p><p>クラウドリフト＆シフトという言葉がよく使われるようになってきて、今後もその流れは続くと思います。そのときに、ただオンプレミス環境からIaaSレベルであげるのではなく、コンテナ化するという選択肢が取れるだけで、アプリケーションのリフトする選択肢が大きく増えるのではないでしょうか？</p><p>基本的にどんなアプリでもコンテナにしてくれるBuildpacks、そして簡単にコンテナを実行してくれるCloud Runから、「<strong>考えるな、感じろ！！</strong>」な精神を垣間見た気がしました。使って楽しかったプロダクトたちなのでもっと広めて行こうと思います。</p><p>明日は、関さんの<a href="/articles/20210318/">GKE Autopilotを触ってみた</a>です。何がくるかお楽しみに！！</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210307/index.html" data-iframely-url="//cdn.iframe.ly/api/iframe?url=https%3A%2F%2Ffuture-architect.github.io%2Farticles%2F20210307%2F&key=42622142e53a4cc5ab36703bcee5415f"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。TIGの&lt;a href=&quot;https://twitter.com/kaedemalu&quot;&gt;伊藤太斉&lt;/a&gt;です。&lt;br&gt;&lt;a href=&quot;/articles/20210307&quot;&gt;GCP連載2021&lt;/a&gt;第7弾です。&lt;/p&gt;
&lt;img src=&quot;/images/2</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="Docker" scheme="https://future-architect.github.io/tags/Docker/"/>
    
    <category term="CloudRun" scheme="https://future-architect.github.io/tags/CloudRun/"/>
    
    <category term="コンテナデプロイ" scheme="https://future-architect.github.io/tags/%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="Buildpacks" scheme="https://future-architect.github.io/tags/Buildpacks/"/>
    
  </entry>
  
  <entry>
    <title>Firebaseで取得したログをBigQueryに連携してユーザー操作をトラッキングする</title>
    <link href="https://future-architect.github.io/articles/20210316/"/>
    <id>https://future-architect.github.io/articles/20210316/</id>
    <published>2021-03-15T15:00:00.000Z</published>
    <updated>2021-03-16T16:13:03.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/articles/20210307/">GCP連載2021</a>も折り返しの6本目です！</p><p>陽光麗らかなある春の日、ITコンサルタントのあなたの元に、ユーザーからの問い合わせが入りました。</p><p>「すみません、モバイルアプリの調子が悪いので確認してもらえませんか。」<br>「承知しました。起きている問題と、何時頃どのような操作をされたか教えていただけますか。」<br>「問題は~~で、いつもと同じ操作をしていたのですが…。」<br>「なるほど…。」</p><p>こんな時、特定ユーザーのアプリ操作をトラッキングできれば…と思うかもしれません。</p><p>今回は、そんな悩みをFirebaseとBigQueryの合わせ技で解決していきます。</p><h1 id="Firebaseとは"><a href="#Firebaseとは" class="headerlink" title="Firebaseとは"></a>Firebaseとは</h1><p><strong>mBaaS (mobile Backend as a Service)</strong> を提供するGCPサービスのひとつです。<br>より一般的なBaaSのモバイルアプリ向けのイメージで、開発者はログ送信やDBアクセスなどのインフラ設定を気にする必要なく、アプリのコアな機能の開発に専念できます。</p><p>一口にFirebaseと言っても様々な機能の集合体で構成されており、NoSQL DBを提供するCloud Firestore、クライアントアプリへのメッセージ送信機能であるFirebase Cloud Messagingなどプロダクトの数は18に及んでいます(2021.03.12現在)。<br>本ブログでもFirebaseのサービスの一つであるCrashlyticsを紹介していました。</p><ul><li><a href="https://future-architect.github.io/articles/20200330/">Serverless連載4: Firebase CrashlyticsでAndroidアプリのエラーログをさくっと収集する</a></li></ul><p>各機能はFirebase Consoleを介してGUIで閲覧、操作することが可能です。<br>今回はその中の<code>Google Analytics for Firebase</code>を用いてAndroidアプリの操作ログを取得していきます。</p><h1 id="Google-Analytics-for-Firebaseとは"><a href="#Google-Analytics-for-Firebaseとは" class="headerlink" title="Google Analytics for Firebaseとは"></a>Google Analytics for Firebaseとは</h1><p><img src="/images/20210316/image.png"></p><p>実態はGoogleのサービス<code>Google Analytics</code> (GA)をFirebaseで利用できるようにしたものです。<br><a href="https://firebase.google.com/docs/analytics/get-started?hl=ja&platform=android">公式ドキュメント</a>では以下のように紹介されています。</p><blockquote><p>Google アナリティクスは、ウェブ、iOS アプリ、Android アプリがどのように使用されているかを把握するのに役立ちます。<br>この SDK は主に次の 2 種類の情報を記録します。</p></blockquote><ul><li>イベント: ユーザーの操作、システム イベント、エラーなど、アプリで起こっていること。</li><li>ユーザー プロパティ: 言語や地域など、ユーザー層を示す属性。自由に定義できます。</li></ul><p>任意の情報をカスタム設定して取得できますが、<strong>一部の値は特にコードの記述なく<a href="https://support.google.com/firebase/answer/9234069">自動的に収集されます。</a></strong><br>位置情報やアプリを使用しているデバイス情報などサクッと取れるのは非常に便利です。</p><p>取得した情報はログとしてFirebase Console上で閲覧できます。<br>その際、ユーザー操作のトラッキングの観点で以下の課題が生じます。</p><ul><li>取得したログが<strong>サマリーされて</strong>表示されてしまう。</li><li>時系列のトラッキング機能も過去<strong>1時間分ほどしかない、かつ抜粋された状態</strong>で表示される。</li></ul><p>これらが課題となるのは、今回がメジャーな利用方法からややずれる使い方のためかもしれません。<br>王道のマーケティング利用する場合はおそらくFirebase Consoleで抜群の使いやすさを発揮してくれるのだと思います。<br>サマリー前の全てのログはFirebaseが持っているため、今回はそのデータをBigQueryへ連携させて、<strong>抜け漏れなくログを追いかける</strong>ことを目指します。</p><p>BigQueryの他にも、Crashlytics, FCM, Firebase Remote ConfigなどとGAを連携させることができます。<br>ちなみに、BigQueryへのデータ連携は昨年のGCP連載でも話題になっていましたね。</p><ul><li><a href="https://future-architect.github.io/articles/20200210/">GCP連載#4 Cloud Life Sciencesを見てみた</a></li><li><a href="https://future-architect.github.io/articles/20200214/">GCP連載#7 GCPのData Transfer Serviceを使って簡単にS3からBigQueryにデータ転送をしてみる</a></li></ul><h1 id="試してみる"><a href="#試してみる" class="headerlink" title="試してみる"></a>試してみる</h1><p>以下の手順を踏んで実際に手を動かしながら、Androidアプリにおけるユーザー操作のトラッキングを実現していきます。</p><ol><li>Firebaseでログを取得する</li><li>BigQueryへログを連携する</li><li>BigQueryでクエリを実行する</li></ol><p>※そもそもの、アプリへのFirebaseの追加は<a href="https://firebase.google.com/docs/android/setup?hl=en">公式ドキュメント</a>を参照いただければと思います。</p><h2 id="1-Firebaseでログを取得する"><a href="#1-Firebaseでログを取得する" class="headerlink" title="1. Firebaseでログを取得する"></a>1. Firebaseでログを取得する</h2><p>Androidアプリのソースに必要なコードを追記していきます。<br>まず、Activityごとの下準備は以下の2点です。</p><ul><li><code>FirebaseAnalytics</code>のオブジェクトを宣言</li><li><code>onCreate</code>メソッド内で初期化</li></ul><figure class="highlight java"><figcaption><span>test_activity.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...(省略)...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.firebase.analytics.FirebaseAnalytics;  <span class="comment">// 1. まずFirebaseAnalyticsクラスをimport</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...(省略)...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> FirebaseAnalytics mFirebaseAnalytics;   <span class="comment">// 1. FirebaseAnalyticsのオブジェクトを宣言</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//...(省略)...</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...(省略)...</span></span><br><span class="line"></span><br><span class="line">        mFirebaseAnalytics = FirebaseAnalytics.getInstance(<span class="keyword">this</span>);  <span class="comment">// 2. onCreateメソッド内で初期化</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>ここまでで、Firebaseが自動的に収集するログはすでに取得できるようになっています。<br>続いて、以下の記述を入れることで、ソースコード上の任意の位置でのログを取得できるようになります。</p><figure class="highlight java"><figcaption><span>test_activity.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ログを取得したい任意の箇所で</span></span><br><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">bundle.putString(param1, value1);</span><br><span class="line">bundle.putString(param2, value2);</span><br><span class="line">mFirebaseAnalytics.logEvent(event_name, bundle);</span><br></pre></td></tr></table></figure><p><code>bundle</code> で送りたいログの型を作り、Firebaseの<code>logEvent</code>メソッドでログを送信しています。<br>Firebaseで扱うログはオブジェクト形式をしており、上記ログを送信すると以下のようなイメージのJSONが送られます。</p><figure class="highlight json"><figcaption><span>送信されるログのイメージ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;event_name&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;param1&quot;</span>: <span class="string">&quot;value1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;param2&quot;</span>: <span class="string">&quot;value2&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>※実際にはデフォルトのパラメータも含まれるため、paramの数はもっと多いです。またevent_nameと並列で、timestampなど諸々の値もデフォルトで送信されます。</p><p>paramやevent_nameは任意に指定することもできますし、Firebaseが用意している定数クラスを用いることもできます。</p><ul><li><a href="https://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics.Param?hl=ja">Paramの一覧</a></li><li><a href="https://firebase.google.com/docs/reference/android/com/google/firebase/analytics/FirebaseAnalytics.Event?hl=ja">Eventの一覧</a></li></ul><p>また、bundleに対しても <code>putXxx</code>のメソッドを利用することで、String型以外にも様々な型のvalueを指定可能です。<br>非常に自由度高くログの送信ができるとわかりましたが、**使用できるeventの数や値の長さには<a href="https://support.google.com/firebase/answer/9237506?hl=en">上限がある</a>**ため、注意が必要です。</p><p>ここまでで、アプリのログはFirebase Console上で閲覧できるようになっています。<br>サマリー情報で十分な場合はこれで十分強さを発揮するでしょう。。<br>今回のようにFirebaseログの生データにアクセスしたい場合はさらにBigQueryとの連携を進めます。</p><p>以下は、Firebase Consoleの一例です。使用状況をグラフ化して確認できたり(上)、event_nameごとの発生回数がサマリ表示されていたりします(下)。<br><img src="/images/20210316/image_2.png"><br><img src="/images/20210316/image_3.png"></p><h2 id="2-BigQueryへログを連携する"><a href="#2-BigQueryへログを連携する" class="headerlink" title="2. BigQueryへログを連携する"></a>2. BigQueryへログを連携する</h2><p><a href="https://support.google.com/firebase/answer/6318765?hl=en">こちらのドキュメント</a>を参照しつつ、設定します。<br>全てFirebase Consoleからの操作で可能です。</p><p>Firebase Consoleの設定画面から、<code>Integrations</code>タブを選択します。<br>そこで表示される、各種連携可能なカードから、<code>BigQuery</code>を選択します。<br>※参考画像ではすでに連携済みのため「Manage」となっていますが、初回設定の場合は「Link」と表示されます。<br><img src="/images/20210316/image_4.png"></p><p>Linkが開始されると、「どのサービスのデータをBigQueryに連携するか」を選択できるようになります。<br>今回は<code>Google Analytics</code>にチェックを入れます。<br>他にも、CrashlyticsやCloud Messagingなどのデータも連携できるようです。<br><img src="/images/20210316/image_5.png"></p><p>ここまでの設定で、BigQueryへFirebaseのデータが連携されます。<br>GCP Consoleから確認してみると、プロジェクトフォルダの配下に、<code>analytics_XXXX</code>というフォルダ名でFirebaseからのデータが連携されています。(XXXXはGAのProperty ID です)<br>当日のデータは<code>events_intraday_YYYYMMDD</code>というテーブル名称で格納されています。翌日になると <code>events_YYYYMMDD</code>の名称に変化します。<br><img src="/images/20210316/image_6.png"></p><p>「プレビュー」タブを参照すると、1つの<code>event_name</code>に紐付く<code>params</code>のkey/valueペアの形でデータが格納されていることが確認できます。<br>ただしこのままではFirebaseデフォルトのログと入り混じって見にくい、かつ複数のユーザーのログが混じっている、のでクエリを作成して可読性を上げます。</p><h2 id="3-BigQueryでクエリを実行する"><a href="#3-BigQueryでクエリを実行する" class="headerlink" title="3. BigQueryでクエリを実行する"></a>3. BigQueryでクエリを実行する</h2><p>可読性を向上させてトラッキングを実現するため、クエリを作成します。</p><p>純粋なRDBではないBigQueryでは、ネストされたparamsをそのままWHERE句に指定することができません。</p><p>そこで、<code>UNNEST</code>でネスト構造を解除してWHERE句でフィルタリングしたのちに<code>ARRAY</code>で再びネスト構造に戻す、という手順を踏んでいます。この処理は全てSELECT句の中で実施しています。<br>今回は、ネストされた<code>event_params.key</code>と<code>event_params.value</code>、<code>user_properties</code>に対して、不要なパラメータを除外しています。</p><p>また、WHERE句にトラッキングしたいユーザーIDを設定して、特定ユーザーの操作のみ出力させます。<br><code>event_name: user_engagement</code> はFirebaseデフォルトのevent_nameで、今回は不要のため除外しています。</p><p>以下に作成したクエリを記載しています。<br>※洗練されたクエリではないですが、ユーザー操作のトラッキングが目的のため、ご容赦いただきたいです。</p><figure class="highlight sql"><figcaption><span>実行するクエリ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> tracking_operation <span class="keyword">AS</span> (</span><br><span class="line">      <span class="keyword">SELECT</span></span><br><span class="line">            event_timestamp,</span><br><span class="line">            FORMAT_TIMESTAMP(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>, TIMESTAMP_SECONDS(<span class="keyword">cast</span>(<span class="keyword">floor</span>(event_timestamp/<span class="number">1000000</span>) <span class="keyword">as</span> int64)), <span class="string">&#x27;Asia/Tokyo&#x27;</span>) <span class="keyword">as</span> event_date,</span><br><span class="line">            event_name,</span><br><span class="line">            <span class="built_in">ARRAY</span>(</span><br><span class="line">                  <span class="keyword">SELECT</span></span><br><span class="line">                        ep.key <span class="keyword">as</span> <span class="keyword">key</span></span><br><span class="line">                  <span class="keyword">FROM</span></span><br><span class="line">                        <span class="keyword">UNNEST</span>(event_params) <span class="keyword">as</span> ep</span><br><span class="line">                  <span class="keyword">WHERE</span></span><br><span class="line">                        ep.key <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;ga_session_id&#x27;</span>, <span class="string">&#x27;ga_session_number&#x27;</span>, <span class="string">&#x27;timestamp&#x27;</span>, <span class="string">&#x27;firebase_event_origin&#x27;</span>, <span class="string">&#x27;session_engaged&#x27;</span>,<span class="string">&#x27;engaged_session_event&#x27;</span>, <span class="string">&#x27;firebase_screen_id&#x27;</span>, <span class="string">&#x27;firebase_previous_id&#x27;</span>, <span class="string">&#x27;entrances&#x27;</span>, <span class="string">&#x27;engaged_session_event&#x27;</span>, <span class="string">&#x27;engagement_time_msec&#x27;</span>)</span><br><span class="line">            ) <span class="keyword">as</span> event_params_key,</span><br><span class="line">            <span class="built_in">ARRAY</span>(</span><br><span class="line">                  <span class="keyword">SELECT</span></span><br><span class="line">                        ep.value.string_value <span class="keyword">as</span> <span class="keyword">value</span></span><br><span class="line">                  <span class="keyword">FROM</span></span><br><span class="line">                        <span class="keyword">UNNEST</span>(event_params) <span class="keyword">as</span> ep</span><br><span class="line">                  <span class="keyword">WHERE</span></span><br><span class="line">                        ep.key <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;ga_session_id&#x27;</span>, <span class="string">&#x27;ga_session_number&#x27;</span>, <span class="string">&#x27;timestamp&#x27;</span>, <span class="string">&#x27;firebase_event_origin&#x27;</span>, <span class="string">&#x27;session_engaged&#x27;</span>,<span class="string">&#x27;engaged_session_event&#x27;</span>, <span class="string">&#x27;firebase_screen_id&#x27;</span>, <span class="string">&#x27;firebase_previous_id&#x27;</span>, <span class="string">&#x27;entrances&#x27;</span>, <span class="string">&#x27;engaged_session_event&#x27;</span>, <span class="string">&#x27;engagement_time_msec&#x27;</span>) <span class="keyword">and</span> ep.value.string_value <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">            ) <span class="keyword">as</span> event_params_value,</span><br><span class="line">            (</span><br><span class="line">                  <span class="keyword">SELECT</span></span><br><span class="line">                        up.value.string_value <span class="keyword">as</span> user_id</span><br><span class="line">                  <span class="keyword">FROM</span></span><br><span class="line">                        <span class="keyword">UNNEST</span>(user_properties) <span class="keyword">as</span> up</span><br><span class="line">                  <span class="keyword">WHERE</span> up.key = <span class="string">&#x27;user_id&#x27;</span></span><br><span class="line">            ) <span class="keyword">as</span> user_id,</span><br><span class="line">            device.mobile_os_hardware_model <span class="keyword">as</span> mobile_os_hardware_model,</span><br><span class="line">            device.operating_system <span class="keyword">as</span> operating_system,</span><br><span class="line">            device.operating_system_version <span class="keyword">as</span> operating_system_version,</span><br><span class="line">            geo.country <span class="keyword">as</span> country,</span><br><span class="line">            geo.region <span class="keyword">as</span> region,</span><br><span class="line">            geo.city <span class="keyword">as</span> city,</span><br><span class="line">            app_info.version <span class="keyword">as</span> app_version</span><br><span class="line">      <span class="keyword">FROM</span></span><br><span class="line">            <span class="string">`analytics_XXXX.events_202004*`</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">      *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">      tracking_operation</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">      event_name != <span class="string">&#x27;user_engagement&#x27;</span> <span class="keyword">and</span> user_id = <span class="string">&#x27;トラッキングしたいユーザーIDを入力&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">      event_timestamp</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>このクエリを実行すると、特定のuser_idをもつユーザーの2020年4月の操作ログを時系列で確認できます．</p><p>その結果が以下の写真です。不要なeventやparamsを除外したので、可読性もだいぶ向上しました。WHERE句にevent_timestampの条件を加えることで、さらに細かく時刻で絞り込むことも可能です。</p><p>ちなみに、<code>screen_view</code>は自動的に取得されるevent_nameで、その他は1.の手順でカスタムで設定しています。</p><p>この<code>screen_view</code>は自動で遷移前後の画面名を取得してくれるので、非常に便利です。</p><p>端末の戻るボタンが押されて遷移した場合も検知してくれます。<br><img src="/images/20210316/image_7.png"></p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>FirebaseとBigQueryの合わせ技で、モバイルアプリのユーザー操作のトラッキングを実現しました。<br>これで障害やユーザー問い合わせにも安心して対応できます。<br>もちろん、トラッキング対象を別のパラメータ(例えば特定の商品データなど)に変えて応用もできるかと思います。</p><p>最終的に<a href="https://datastudio.google.com/overview">DataStudio</a>など連携させればGUIで綺麗に表示させることができそうです。<br>複数のサービスを組み合わせれば痒いところにも手が届く、それがGCPの魅力のひとつかもしれません。</p><p>明日はTechBlogの編集もされている伊藤さんの<a href="/articles/20210317/">Google Cloud BuildpacksとCloud Runで簡単コンテナアプリ開発</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;/articles/20210307/&quot;&gt;GCP連載2021&lt;/a&gt;も折り返しの6本目です！&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Java" scheme="https://future-architect.github.io/tags/Java/"/>
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="BigQuery" scheme="https://future-architect.github.io/tags/BigQuery/"/>
    
    <category term="Firebase" scheme="https://future-architect.github.io/tags/Firebase/"/>
    
    <category term="Android" scheme="https://future-architect.github.io/tags/Android/"/>
    
    <category term="GoogleAnalytics" scheme="https://future-architect.github.io/tags/GoogleAnalytics/"/>
    
  </entry>
  
  <entry>
    <title>Cloud Build を知ってみよう</title>
    <link href="https://future-architect.github.io/articles/20210315/"/>
    <id>https://future-architect.github.io/articles/20210315/</id>
    <published>2021-03-14T15:00:00.000Z</published>
    <updated>2021-03-15T15:11:08.724Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、ゆるふわエンジニアの前原です。</p><p><a href="/articles/20210307/">GCP連載2021</a>です！</p><p>本記事では、ビルド周りをよしなにやってくれるCloud Build について紹介したいと思います。</p><h1 id="CI-CD-ツールの選択"><a href="#CI-CD-ツールの選択" class="headerlink" title="CI/CD ツールの選択"></a>CI/CD ツールの選択</h1><p>CI/CD 環境作るときに何を使うか迷う時があると思うんですよね（これに限らずですが）</p><p>世の中には、たくさんのツールが溢れてます。</p><p>例えば、以下のようなものがあります。</p><ul><li>自前で用意する系<ul><li>GitLab（クラウド版もある）</li><li>Jenkins</li></ul></li><li>クラウド系<ul><li>Cloud Build</li><li>CircleCI</li><li>Travis CI</li><li>Code Build</li><li>GitHub</li></ul></li></ul><p>要件や取り巻く環境によって選択は変わってくるかと思います。</p><p>とはいえ、GCP やAWS を利用している場合は、それらのサービスを利用した方が楽な面が多いです。</p><p>例えば、GCP を利用していてCircleCI などの他サービスを利用する場合は、サービスアカウントの発行や、キーの管理などが必要となります。個人的には、ノックアウト要件がない限りは、クラウドサービスに寄せて良いと思っています。</p><h2 id="Cloud-Build-とは"><a href="#Cloud-Build-とは" class="headerlink" title="Cloud Build とは"></a>Cloud Build とは</h2><p>Cloud Build は、GCP が提供するビルドを行うサービスです。</p><p>様々なサービスからソースコードを取得し、ビルドを行い、アーティファクトを生成します。</p><h1 id="構成について"><a href="#構成について" class="headerlink" title="構成について"></a>構成について</h1><p>以下の図のようにCloud Build は、ソース、ビルド、デプロイから構成されています。<br>ソースやデプロイは、例として記載しています。</p><p><img src="/images/20210315/image.png"></p><h2 id="ソース"><a href="#ソース" class="headerlink" title="ソース"></a>ソース</h2><p>例えば、ソースは、以下から選択することが可能です。</p><p>基本的にGitHub 連携が良いと思います。また、Cloud Source Repositories をメインのソース管理として利用することも可能ですが、機能面で劣るので利用ケースは少ないと思っています。</p><ul><li>GitHub（プルリクやPush をトリガに起動可能）</li><li>Bitbucket + Cloud Source Repositories</li><li>GitHub + Cloud Source Repositories</li></ul><h2 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h2><p>ビルドは、ユーザが自由にビルドステップを作成して実行することも可能ですし、Cloud Build やコミュニティが提供するビルドステップを利用することができます。</p><ul><li><a href="https://github.com/GoogleCloudPlatform/cloud-builders">Cloud Build が提供するビルドステップ</a></li><li><a href="https://github.com/GoogleCloudPlatform/cloud-builders-community">コミュニティが提供するビルドステップ</a></li></ul><p>ビルドの構成ファイルは、YAML またはJSON で記述することができます。</p><h3 id="ビルドステップ"><a href="#ビルドステップ" class="headerlink" title="ビルドステップ"></a>ビルドステップ</h3><p>ビルドステップは、Cloud Build に実行させたいアクションを定義します。<br>構成ファイル名は、デフォルト<code>cloudbuild.yaml</code>ですが、ビルドコマンド実行時にオプション<code>-config</code>で任意のファイル名を指定することも可能です。<br>以下にサンプルを記載します。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;gcr.io/cloud-builders/kubectl&#x27;</span></span><br><span class="line">  <span class="attr">args:</span> [<span class="string">&#x27;set&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="string">&#x27;deployment/mydepl&#x27;</span>, <span class="string">&#x27;my-image=gcr.io/my-project/myimage&#x27;</span>]</span><br><span class="line">  <span class="attr">env:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;CLOUDSDK_COMPUTE_ZONE=us-east4-b&#x27;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&#x27;CLOUDSDK_CONTAINER_CLUSTER=my-cluster&#x27;</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;gcr.io/cloud-builders/docker&#x27;</span></span><br><span class="line">  <span class="attr">args:</span> [<span class="string">&#x27;build&#x27;</span>, <span class="string">&#x27;-t&#x27;</span>, <span class="string">&#x27;gcr.io/my-project-id/myimage&#x27;</span>, <span class="string">&#x27;.&#x27;</span>]</span><br></pre></td></tr></table></figure><p>ざっくりですが、解説します。</p><ul><li>steps: ビルドステップの定義</li><li>name: クラウドビルダーの指定（Docker..etc）</li><li>args: ビルダーに渡す引数を指定</li><li>env: 環境変数の指定</li></ul><p>他のフィールドを知りたい場合は、<a href="https://cloud.google.com/build/docs/build-config?hl=ja#structure_of_a_build_config_file">ビルド構成ファイルの構造</a>を参照してください。</p><h3 id="高速ビルドの実現"><a href="#高速ビルドの実現" class="headerlink" title="高速ビルドの実現"></a>高速ビルドの実現</h3><p>Cloud Build は、キャッシュ機能を備えています。<br>ちなみに、AWS のCode Build にもローカルキャッシュ、S3 キャッシュがありますね。</p><p>Cloud Build は、高速にビルドするためにKaniko キャッシュの機能を備えています。<br>Kaniko を利用することで、2回目以降のビルドを高速に行うことができます。<br><a href="https://github.com/GoogleContainerTools/kaniko">Kaniko</a> は、コンテナイメージをビルドするGoogle のOSS です。</p><p>以下のようにビルド構成ファイルにKaniko を組み込むことができます。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;gcr.io/kaniko-project/executor:latest&#x27;</span></span><br><span class="line">  <span class="attr">args:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">--destination=gcr.io/$PROJECT_ID/image</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">--cache=true</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">--cache-ttl=XXh</span></span><br></pre></td></tr></table></figure><ul><li>–cache=true: Kaniko キャッシュの有効化</li><li>–cache-ttl=XXh: キャッシュの有効期間の設定</li></ul><h3 id="Docker-Hub-のRate-Limit-の回避"><a href="#Docker-Hub-のRate-Limit-の回避" class="headerlink" title="Docker Hub のRate Limit の回避"></a>Docker Hub のRate Limit の回避</h3><p>ビルドする際に、Docker Hub のRate Limit に引っかかったことはありますか？</p><p>私は、AWS のCode Build を利用していた時に引っかかっていました。理由は、無料アカウントで利用していたため、IP アドレスに基づいて制限されていました。<br>Code Build が利用しているIP = 不特定多数の人が利用している結果、Rate Limit が発生していました。</p><p>結局、Code Build を<a href="https://docs.aws.amazon.com/ja_jp/codebuild/latest/userguide/vpc-support.html">VPC 接続</a>させ、NAT Gateway 経由でアクセスすることで回避しました。他にも有料 Docker Hub アカウントにする方法やECR を利用する方法もあります。</p><p>脱線してしまいましたが、Cloud Build は、VPC 接続させることはできないため、以下の２つが対応策となります。</p><ul><li>有料のDocker Hub にアップグレード</li><li>Container Registry への切り替え</li></ul><h4 id="有料のDocker-Hub-にアップグレード"><a href="#有料のDocker-Hub-にアップグレード" class="headerlink" title="有料のDocker Hub にアップグレード"></a>有料のDocker Hub にアップグレード</h4><p>主なやることをザックリ記載すると以下です。</p><ul><li>Docker Hub アカウントのアップグレード対応</li><li>Docker Hub にログインするための認証情報をSecret Manger に保存</li><li>ビルド構成ファイルにDocker Hub へのログインステップを記述</li></ul><h4 id="Container-Registry-への切り替え"><a href="#Container-Registry-への切り替え" class="headerlink" title="Container Registry への切り替え"></a>Container Registry への切り替え</h4><p>以下を参考にDocker Hub からContainer Registry に移行する必要があります。<br>個人的には、移行コストなどや運用コストを考えるとDocker Hub のアップグレードが良いと思ってます。</p><ul><li><a href="https://cloud.google.com/container-registry/docs/migrate-external-containers">サードパーティ レジストリからのコンテナの移行</a></li></ul><p>Rate Limit に困っている場合は、どちらがベストな対応かを検討し、導入してみてはいかがでしょうか。</p><h2 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h2><p>Cloud Build は、以下のサービスに対してデプロイを行うことができます。</p><ul><li><a href="https://cloud.google.com/build/docs/deploying-builds/deploy-gke?hl=ja">GKE</a></li><li><a href="https://cloud.google.com/build/docs/deploying-builds/deploy-cloud-run?hl=ja">Cloud Run</a></li><li><a href="https://cloud.google.com/build/docs/deploying-builds/deploy-appengine?hl=ja">App Engin</a></li><li><a href="https://cloud.google.com/build/docs/deploying-builds/deploy-functions?hl=ja">Cloud Functions</a></li><li><a href="https://cloud.google.com/build/docs/deploying-builds/deploy-firebase?hl=ja">Firebase</a></li></ul><h2 id="構成パターン"><a href="#構成パターン" class="headerlink" title="構成パターン"></a>構成パターン</h2><p>ここではGKE へのデプロイをベースに以下の２つのパターンを例に紹介します。</p><ul><li>CIOps パターン</li><li>GitOpsパターン</li></ul><h3 id="CIOps-パターン"><a href="#CIOps-パターン" class="headerlink" title="CIOps パターン"></a>CIOps パターン</h3><p>Cloud Build のトリガは、GitHub トリガによる自動実行で行われます。</p><p>Cloud Build は、GitHub からソースを取得し、ビルドを実行し、コンテナイメージをContainer Registry にPush します。GKE をデプロイする際は、Cloud Build からkubectl でデプロイします。</p><p><img src="/images/20210315/image_2.png"></p><h3 id="GitOps-パターン"><a href="#GitOps-パターン" class="headerlink" title="GitOps パターン"></a>GitOps パターン</h3><p>CIOps と同様にビルドを実行し、Container Registry にコンテナイメージにPush するところは同様の流れです。アプリのリポジトリの変更を検知して、マニフェストリポジトリにプルリクを行います。</p><p>Argo CD は、ポーリングもしくはWebhook により、反映を行います。</p><p><img src="/images/20210315/image_3.png"></p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>いかがでしたでしょうか？</p><p>Cloud Build を用いてどういった構成をとれるのかをイメージすることができたら幸いです。</p><p>明日は、松井さんによる <a href="/articles/20210316/">Firebaseで取得したログをBigQueryに連携してユーザー操作をトラッキングする</a> です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、ゆるふわエンジニアの前原です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/20210307/&quot;&gt;GCP</summary>
      
    
    
    
    <category term="CI/CD" scheme="https://future-architect.github.io/categories/CI-CD/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="GitOps" scheme="https://future-architect.github.io/tags/GitOps/"/>
    
    <category term="CI/CD" scheme="https://future-architect.github.io/tags/CI-CD/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="CloudBuild" scheme="https://future-architect.github.io/tags/CloudBuild/"/>
    
  </entry>
  
  <entry>
    <title>テックイベント2021＠フューチャーのご紹介</title>
    <link href="https://future-architect.github.io/articles/20210314/"/>
    <id>https://future-architect.github.io/articles/20210314/</id>
    <published>2021-03-13T15:00:00.000Z</published>
    <updated>2021-03-15T15:03:32.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG真野です。この記事ではフューチャーのIT技術系の勉強会についてご紹介します。</p><h2 id="2021年の計画"><a href="#2021年の計画" class="headerlink" title="2021年の計画"></a>2021年の計画</h2><p><img src="/images/20210314/space-1951858_1280.png"></p><blockquote><p><a href="https://pixabay.com/ja/users/onuromeryavuz-4180408/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1951858">Onur Ömer Yavuz</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1951858">Pixabay</a>からの画像</p></blockquote><p>2021年に<strong>Future Tech Night</strong>という勉強会を15回開催する予定です。2021/03/16時点だと#6回開催しました。</p><p>大体2週間前に各イベントは<a href="https://future.connpass.com/">connpass</a>経由で募集します。気になる方はグループメンバーになって頂けると嬉しいです。</p><table><thead><tr><th>No</th><th>日付</th><th>テーマ</th><th>登壇者(確定分)</th></tr></thead><tbody><tr><td>#06</td><td>01/29(金)</td><td><a href="https://future.connpass.com/event/201478/">GCP×インフラ構築編</a></td><td>西田、村田</td></tr><tr><td>#07</td><td>03/19(金)</td><td><a href="https://future.connpass.com/event/206387/">Go勉強会1</a></td><td>澁川、多賀、真野</td></tr><tr><td>#08</td><td>04/09(金)</td><td>E2Eテスト/cypress勉強会</td><td>木戸、澁川、枇榔</td></tr><tr><td>#09</td><td>04/16(金)</td><td>AWS勉強会1</td><td>木村、久保</td></tr><tr><td>#10</td><td>05/14(金)</td><td>Java勉強会</td><td>藤野、菅原</td></tr><tr><td>#11</td><td>05/28(金)</td><td>AI勉強会1</td><td>貞光、玉木</td></tr><tr><td>#12</td><td>06/11(金)</td><td>Vue.js勉強会</td><td></td></tr><tr><td>#13</td><td>06/25(金)</td><td>（調整中）</td><td></td></tr><tr><td>#14</td><td>07/16(金)</td><td>Auth0勉強会</td><td>先山、亀井</td></tr><tr><td>#15</td><td>08/20(金)</td><td>GCP勉強会</td><td></td></tr><tr><td>#16</td><td>08/27(金)</td><td>データベース勉強会</td><td>杉江</td></tr><tr><td>#17</td><td>09/17(金)</td><td>開発プロセス勉強会</td><td></td></tr><tr><td>#18</td><td>10/15(金)</td><td>AWS勉強会2</td><td></td></tr><tr><td>#19</td><td>10/29(金)</td><td>AI勉強会2</td><td></td></tr><tr><td>#20</td><td>11/19(金)</td><td>Go勉強会2</td><td></td></tr></tbody></table><blockquote><p>※実際の勉強会名はもっと楽しげなものに変わると思います！基本的に日程は変えないですが何かしらの都合で突然変更になる場合もゼロではないです。その場合はご了承ください。</p></blockquote><p>2021年以降はFUTURE LIVEなどの会社説明会よりのイベントはconnpassでの募集はしない方向になり、ほぼIT技術系のイベント告知専門という運用になったので、ノイズが気になる方も安心してご参加できると思います。（まだ試行錯誤しているので一部新卒採用イベントなどを入る可能性もあるかもです。）</p><h2 id="Future-Tech-Nightについて"><a href="#Future-Tech-Nightについて" class="headerlink" title="Future Tech Nightについて"></a>Future Tech Nightについて</h2><p>当社はフューチャーという会社名ですので、何かに付けてイベントの先頭にFutureをつける文化があります。例えば社内で月次に開かれる全社朝会はFuture Morning Sessionで、略してFMS（エフエムエス）って呼ばれています。外部の勉強会も Future Tech Night と自然に名付けられました。</p><p>Future Tech Night の運営ポリシーですが、フューチャーが業務を通して得た技術的な知見やナレッジを包み隠さず共有する、ということをテーマにしています。フューチャーは特定の技術に特化しているわけではなく、中立の立場から様々なプロダクトを広く利用しています。そういった知見を公開していこうという趣旨です。</p><p>今のところはWeb技術寄りが多いですが、Strategic AI Group（SAIG）というデータサイエンスな部隊も2回の開催予定です。Vulsが有名なセキュリティ部隊もいますし、インダストリーに特化した事業部もあります。他にもマネジメントノウハウに絡めた勉強会ができないかといった、有益で面白そうなテーマを常に社内でディスカッションしています。</p><h2 id="過去に開催された様子"><a href="#過去に開催された様子" class="headerlink" title="過去に開催された様子"></a>過去に開催された様子</h2><p>いくつか技術ブログでも開催レポートを公開しています。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210128/index.html" data-iframely-url="//cdn.iframe.ly/Bk93w9x?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200925/index.html" data-iframely-url="//cdn.iframe.ly/YpB7olh?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20201228/index.html" data-iframely-url="//cdn.iframe.ly/RWuBJfe?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210306/index.html" data-iframely-url="//cdn.iframe.ly/eMzQMKM?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><p>今後も開催レポートを通して、当日の様子や頂いた質問をシェアしていきますので、残念ながら都合が付かない場合も安心できるように運営していきます。笑　（公開コンテンツは表現が丸められていたり非公開にする場合もあるので、参加がおすすめではありますす！）</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>フューチャーは技術ブログやOSS活動以外にも、勉強会を開催して少しでも役立てる情報を発信したいと考えています。</p><p>他にもコーディング規約（記事ではJava8ですが、Java11まである。SQL版もあります）も公開しています。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20160902/index.html" data-iframely-url="//cdn.iframe.ly/BeHBTMM"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><p>たまに社内外から、無料で公開してよいの！？って驚かれる「仕事で使えるTypeScript」という教育コンテンツも公開しています。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20190612/index.html" data-iframely-url="//cdn.iframe.ly/gC0UEQX?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><p>SNSなどで反応頂けるとメンテナンスしているメンバーの励みになりますので、利用報告は歓迎しています。</p><p>それでは良い勉強会ライフを！</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><p>ブログ連載の年間計画も公開されています。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210112/index.html" data-iframely-url="//cdn.iframe.ly/P7BPs3C?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG真野です。この記事ではフューチャーのIT技術系の勉強会についてご紹介します。&lt;/p&gt;
&lt;h2 id=&quot;2021年の計画</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="勉強会" scheme="https://future-architect.github.io/tags/%E5%8B%89%E5%BC%B7%E4%BC%9A/"/>
    
    <category term="TechNight" scheme="https://future-architect.github.io/tags/TechNight/"/>
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>CloudNative Days Spring 2021 ONLINEに登壇しました</title>
    <link href="https://future-architect.github.io/articles/20210313/"/>
    <id>https://future-architect.github.io/articles/20210313/</id>
    <published>2021-03-12T15:00:00.000Z</published>
    <updated>2021-03-14T02:43:06.937Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。TIGの伊藤太斉です。<br>今回は先日開催されました、<a href="https://event.cloudnativedays.jp/cndo2021">CloudNative Days Spring 2021 ONLINE</a>に登壇しましたので、その内容について書いていきます。</p><p><img src="/images/20210313/CNDO2021@2x.png"></p><h2 id="CloudNative-Daysについて"><a href="#CloudNative-Daysについて" class="headerlink" title="CloudNative Daysについて"></a>CloudNative Daysについて</h2><p>はじめにイベントの概要について簡単に説明します。<br><a href="https://event.cloudnativedays.jp/cndt2020">前回の公式</a>から引用すると、</p><blockquote><p>CloudNative Days はコミュニティ、企業、技術者が一堂に会し、クラウドネイティブムーブメントを牽引することを目的としたテックカンファレンスです。<br>最新の活用事例や先進的なアーキテクチャを学べるのはもちろん、ナレッジの共有やディスカッションの場を通じて登壇者と参加者、参加者同士の繋がりを深め、初心者から熟練者までが共に成長できる機会を提供します。</p></blockquote><p>とあるように、モダンアーキテクチャを学ぶ場であったり、これからインフラのモダナイゼーションを行う方にとってディスカッションの場として提供するテックカンファレンスです。<br>前回は登壇者は自宅、配信会場どちらかを選んで登壇しましたが、今回は全員事前に動画を提出し、配信会場にはオペレーションを行う一部の人のみとしています。またプラットフォームも独自で開発しているものであり、オンラインカンファレンスとしては初の試みの多い内容になっています。<br>今回は、前回に引き続き私は運営として参加しております。</p><h2 id="登壇内容について"><a href="#登壇内容について" class="headerlink" title="登壇内容について"></a>登壇内容について</h2><p>登壇資料はこちらになります。</p><script async class="speakerdeck-embed" data-id="f9d34e658df049bd992ba11c212a7a5f" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>今回は、CNCFのプロジェクトの中から<a href="https://www.openpolicyagent.org/">Open Policy Agent</a>（以下、OPA）について話しました。OPAは、CNCFのプロジェクトの中で一番最近Graduatedプロジェクトになりました。</p><blockquote class="twitter-tweet"><p lang="en" dir="ltr">[NEWS] Cloud Native Computing Foundation Announces Open Policy Agent Graduation 🤗<a href="https://t.co/36yiIhCYvc">https://t.co/36yiIhCYvc</a> <a href="https://t.co/EquYZUqBbu">pic.twitter.com/EquYZUqBbu</a></p>&mdash; CNCF (@CloudNativeFdn) <a href="https://twitter.com/CloudNativeFdn/status/1357373603633848322?ref_src=twsrc%5Etfw">February 4, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>そんな勢いのあるOPAを、今回はTerraformのコード規約として使えないかということで検証という意味でも使ってみた話です。</p><h3 id="Open-Policy-Agentについて"><a href="#Open-Policy-Agentについて" class="headerlink" title="Open Policy Agentについて"></a>Open Policy Agentについて</h3><p>簡単にOPAについて説明します。<br>OPAはPolicy as Code（PaC）を実現するツールです。CNCFでホストされているのでKubernetesにしか利用できない、というわけではなく、JSON、YAMLなど様々なデータを扱ってポリシーで管理することができます。<br>記述する際にはRegoという独自言語で実装します。サンプルなどは後述します。</p><h3 id="Infrastructure-as-Codeの横展開で起こりうる話"><a href="#Infrastructure-as-Codeの横展開で起こりうる話" class="headerlink" title="Infrastructure as Codeの横展開で起こりうる話"></a>Infrastructure as Codeの横展開で起こりうる話</h3><p>Infrastructure as Code（以下、IaC）を実践することで以下のメリットがあるかと思います。</p><ul><li>パラメーターシートとして利用できる</li><li>Gitなどで管理されることで常に最新の状態が分かる</li><li>可搬性があるので、プロジェクトを跨いで同じコードを利用できる</li><li>HCLも含めて比較的読みやすい言語で書かれているため入門しやすい</li></ul><p>特に可搬性については大きなメリットであり、新しく社内でプロジェクトが立ち上がったときにはコードの共有を行うことで、開発の高速化も望めます。</p><p><img src="/images/20210313/CNDO_1.png"></p><p>このようにメリットの大きいIaCですが、浸透が進むにあたり、デメリットも生じます。</p><ul><li>コードの流派が異なる</li><li>コードの規約が異なる</li></ul><p>といったように上記の２つは少ないようにみえて、エンジニアの負荷を大きくあげる原因になりかねないデメリットです。将来的に普及が進んだ後にこれらを統制することはかなり大変になるのでないかと懸念されました。そのため、社内で共通の言語としての規約、が必要だと感じました。そのためのPaCのツールとしてOPAを利用することを検討しました。</p><h3 id="OPAを実際に利用してみる"><a href="#OPAを実際に利用してみる" class="headerlink" title="OPAを実際に利用してみる"></a>OPAを実際に利用してみる</h3><p>今回はTerraformのリソース名を<code>-</code>区切りではなく<code>_</code>区切りで書くことを強制したいと思います。<br>利用するTerraformとRegoは以下になります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">provider &quot;aws&quot; &#123;</span><br><span class="line">    region &#x3D; &quot;us-west-1&quot;</span><br><span class="line">&#125;</span><br><span class="line">resource &quot;aws_instance&quot; &quot;web_instance&quot; &#123;</span><br><span class="line">  instance_type &#x3D; &quot;t2.micro&quot;</span><br><span class="line">  ami &#x3D; &quot;ami-09b4b74c&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource &quot;aws_instance&quot; &quot;mail-instance&quot; &#123;</span><br><span class="line">  instance_type &#x3D; &quot;t2.micro&quot;</span><br><span class="line">  ami &#x3D; &quot;ami-09b4b74c&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> test</span><br><span class="line">                              </span><br><span class="line">lint[msg] &#123;</span><br><span class="line">    resource := input.resource_changes[index]</span><br><span class="line">    resource.<span class="keyword">type</span> == <span class="string">&quot;aws_instance&quot;</span></span><br><span class="line">    </span><br><span class="line">    result := count(split(resource.name, <span class="string">&quot;-&quot;</span>)) == <span class="number">1</span></span><br><span class="line">    msg := sprintf(<span class="string">&quot;Test result of %v.%v is %v&quot;</span>, [resource.<span class="keyword">type</span>, resource.name, result])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Terraformの中身は単純なインスタンスを2台作成するもの、Regoの中身は、<code>-</code>が含まれる場合にはsplitして、その総計を数えるようにしています。総計が1（分かれていない状態）であればtrue、総計が2以上であればfalseを返します。<br>ここからは実際にコマンドを実行しながら確認します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Plan結果をバイナリに吐き出す</span></span><br><span class="line">$ tf plan -out tfplan.binary</span><br><span class="line"><span class="comment"># バイナリをJSONに吐き出して、jqコマンドで整形する</span></span><br><span class="line">$ tf show -json tfplan.binary | jq . &gt; tfplan.json</span><br><span class="line"><span class="comment"># Regoを使ってJSONを評価する</span></span><br><span class="line">$ opa <span class="built_in">eval</span> --format json --data test.rego --input tfplan.json <span class="string">&quot;data.test.lint&quot;</span></span><br></pre></td></tr></table></figure><p>最後のコマンドの実行結果は以下になります。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;result&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;expressions&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;value&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;Test result of aws_instance.mail-instance is false&quot;</span>, # ハイフン区切りは<span class="literal">false</span>になる</span><br><span class="line">            <span class="string">&quot;Test result of aws_instance.web_instance is true&quot;</span> # アンダースコア区切りは<span class="literal">true</span>になる</span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;data.test.lint&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;location&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;row&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">&quot;col&quot;</span>: <span class="number">1</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想定通り、mailインスタンスについてはfalsem、webインスタンスについてはtrueになりました。</p><h3 id="実際に触ってみた感触とこれから"><a href="#実際に触ってみた感触とこれから" class="headerlink" title="実際に触ってみた感触とこれから"></a>実際に触ってみた感触とこれから</h3><p>今回、OPAを触ってみて、得意なところ、できないところがなんとなくですが見えてきました。</p><h4 id="出来ること"><a href="#出来ること" class="headerlink" title="出来ること"></a>出来ること</h4><p>JSONで出力できる範囲ならかなり強力に押さえ込むことができることを感じました。例えば、</p><ul><li>インスタンスに対しては特定のタグを必須とする</li><li>リージョンは東京リージョンのみに制限する</li><li>インスタンスタイプは<code>t3.medium</code>のみに制限する</li></ul><p>などの制限は可能なので、プロジェクトごと制約をかけたい場合に有用です。</p><h4 id="出来ないこと"><a href="#出来ないこと" class="headerlink" title="出来ないこと"></a>出来ないこと</h4><p>一方出来ないことも見えてきました。</p><ul><li>Terraformのソースコードチェック<ul><li>countの配置箇所</li><li>Linterのような動かし方</li></ul></li></ul><p>結局JSONなどのデータを扱うため、元のTerraformのソースコード自体をみることはありません。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>OPAはリソースを使用する範囲を決めるという文脈ではかなり強力に制限してくれることを感じました。一方、Terraformそのままのコードを制限するためにはLinterなどの別のツールが必要だと思いました。単一のツールではなくて、複合的に利用していくことで、出来上がるリソース、記述するコードの両方を整えられると考えました。<br>社内のIaCの平和を守るために、まだ考え始めた段階ですが、規約は作って浸透させるまでが仕事だと思うので、まだまだ先は長いです。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200930/index.html" data-iframely-url="//cdn.iframe.ly/api/iframe?url=https%3A%2F%2Ffuture-architect.github.io%2Farticles%2F20200930&amp;key=42622142e53a4cc5ab36703bcee5415f"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200928/index.html" data-iframely-url="//cdn.iframe.ly/api/iframe?url=https%3A%2F%2Ffuture-architect.github.io%2Farticles%2F20200928&amp;key=42622142e53a4cc5ab36703bcee5415f"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。TIGの伊藤太斉です。&lt;br&gt;今回は先日開催されました、&lt;a href=&quot;https://event.cloudnativedays.jp/cndo2021&quot;&gt;CloudNative Days Spring 2021 ONLINE&lt;/a&gt;に登壇しましたので、その</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
    <category term="CNCF" scheme="https://future-architect.github.io/tags/CNCF/"/>
    
    <category term="CloudNative" scheme="https://future-architect.github.io/tags/CloudNative/"/>
    
    <category term="OpenPolicyAgent" scheme="https://future-architect.github.io/tags/OpenPolicyAgent/"/>
    
  </entry>
  
  <entry>
    <title>Text-to-Speechを試してみる</title>
    <link href="https://future-architect.github.io/articles/20210312/"/>
    <id>https://future-architect.github.io/articles/20210312/</id>
    <published>2021-03-11T15:00:00.000Z</published>
    <updated>2021-03-14T13:40:14.806Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIGの村瀬です。</p><p><a href="/articles/20200218/">昨年</a>に続き<a href="/articles/20210307/">GCP連載</a>企画の参加です。私個人としてはGCPはほとんど利用したことがないので、せっかくだから面白そうなことを試してみようと思い、今回はText-to-Speechについて試してみることにしました。</p><h1 id="Text-to-Speechとは"><a href="#Text-to-Speechとは" class="headerlink" title="Text-to-Speechとは"></a>Text-to-Speechとは</h1><img src="/images/20210312/Cloud_Text-to-Speech.png"><blockquote><p><a href="https://cloud.google.com/blog/ja/products/ai-machine-learning/cloud-text-to-speech-expands-its-number-of-voices-now-covering-33-languages-and-variants">https://cloud.google.com/blog/ja/products/ai-machine-learning/cloud-text-to-speech-expands-its-number-of-voices-now-covering-33-languages-and-variants</a> より</p></blockquote><p>読んで字のごとくですがテキストを自然な音声に変換するサービスで、40以上の言語と方言で220種類以上の音声から選択できます。話す速度や声の高さも変更することができます。</p><p>本記事ではAPIを利用して音声ファイルを作成するところまでを紹介しますが、APIを利用せずどんなものか確認するのであれば<a href="https://cloud.google.com/text-to-speech/?hl=ja#section-2">このページ</a>の <strong>Text-to-Speech を試してみましょう</strong>  のところで確認できます。あなたがロボットでなければ。</p><h1 id="料金"><a href="#料金" class="headerlink" title="料金"></a>料金</h1><p>無料枠があり、最初の400万文字/月は無料。それを越した場合でも100万文字あたり$4.00でお安いですね。<br>詳細は<a href="https://cloud.google.com/text-to-speech/pricing?hl=ja">公式ページ</a>を参照ください。</p><h1 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h1><p><a href="https://cloud.google.com/text-to-speech/docs/quickstart-protocol?hl=ja">クイックスタート: コマンドラインの使用のページ</a>を参考に準備をします。</p><h2 id="1-新しいプロジェクトの作成"><a href="#1-新しいプロジェクトの作成" class="headerlink" title="1.新しいプロジェクトの作成"></a>1.新しいプロジェクトの作成</h2><img src="/images/20210312/00create_prj.png" class="img-middle-size" style="border:solid 1px #000000"><p>適当にプロジェクト名を入力して作成します。</p><h2 id="2-Cloud-Text-to-Speech-APIの有効化"><a href="#2-Cloud-Text-to-Speech-APIの有効化" class="headerlink" title="2.Cloud Text-to-Speech APIの有効化"></a>2.Cloud Text-to-Speech APIの有効化</h2><p><a href="https://cloud.google.com/text-to-speech/docs/quickstart-protocol?hl=ja">クイックスタート ページ内</a>のAPIを有効にするボタン]をクリックして有効にします。</p><img src="/images/20210312/01pre.png" class="img-middle-size" style="border:solid 1px #000000"><h2 id="3-認証の設定"><a href="#3-認証の設定" class="headerlink" title="3.認証の設定"></a>3.認証の設定</h2><p>必要なロールはありませんということなのでロールを選択せず作成します。</p><img src="/images/20210312/02pre.png" class="img-large-size" style="border:solid 1px #000000"><img src="/images/20210312/03pre.png" class="img-large-size" style="border:solid 1px #000000"><img src="/images/20210312/04pre.png" class="img-middle-size" style="border:solid 1px #000000"><img src="/images/20210312/05pre.png" class="img-middle-size" style="border:solid 1px #000000"><p>JSONファイルがダウンロードされるので適切な場所に保存します。のちにこのJSONファイルのパスを環境変数に設定することになります。</p><h2 id="4-Cloud-SDK-をインストールして初期化します。"><a href="#4-Cloud-SDK-をインストールして初期化します。" class="headerlink" title="4.Cloud SDK をインストールして初期化します。"></a>4.Cloud SDK をインストールして初期化します。</h2><p><a href="https://cloud.google.com/sdk/docs/install?hl=ja">このページ</a>に則りインストールします。</p><img src="/images/20210312/05sdk.png" class="img-middle-size" style="border:solid 1px #000000"><img src="/images/20210312/06sdk.png" class="img-middle-size" style="border:solid 1px #000000"><img src="/images/20210312/07sdk.png" class="img-middle-size" style="border:solid 1px #000000"><img src="/images/20210312/08sdk.png" class="img-middle-size" style="border:solid 1px #000000"><p>環境にもよると思いますが割と時間かかります。コーヒーでも飲んで待ちましょう。</p><p><img src="/images/20210312/09sdk.png"></p><p>コマンドプロンプトが起動するのでYを入力します。</p><p><img src="/images/20210312/13sdk.png"></p><p><img src="/images/20210312/14sdk.png"></p><p>ブラウザが起動するのでアクセスを許可します。</p><img src="/images/20210312/15sdk.png" style="border:solid 1px #000000"><p>無事に完了しました。</p><h2 id="5-環境変数の設定"><a href="#5-環境変数の設定" class="headerlink" title="5.環境変数の設定"></a>5.環境変数の設定</h2><p>他のブログをみるとLinux,macOSの記事が多かったので今回はあえてWindowsのPowerShellでやってみます。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$env:GOOGLE_APPLICATION_CREDENTIALS</span>=<span class="string">&quot;C:\xxx\Text-to-Speech-123456789012.json&quot;</span></span><br></pre></td></tr></table></figure><h1 id="テキストから音声へ変換"><a href="#テキストから音声へ変換" class="headerlink" title="テキストから音声へ変換"></a>テキストから音声へ変換</h1><h2 id="ファイルの用意"><a href="#ファイルの用意" class="headerlink" title="ファイルの用意"></a>ファイルの用意</h2><p>音声に変換したい文字列や必要となる情報を記載したJSONファイルを用意します。ここではクイックスタートに習ってrequest.jsonとします。日本語の音声を確認したかったので以下の様にしました。</p><figure class="highlight json"><figcaption><span>request.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;input&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;text&quot;</span>:<span class="string">&quot;経営とITをデザインするフューチャーアーキテクト&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;voice&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;languageCode&quot;</span>:<span class="string">&quot;ja-JP&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>:<span class="string">&quot;ja-JP-Standard-C&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;ssmlGender&quot;</span>:<span class="string">&quot;MALE&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;audioConfig&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;audioEncoding&quot;</span>:<span class="string">&quot;MP3&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>設定可能な言語、音声は<a href="https://cloud.google.com/text-to-speech/docs/voices?hl=ja">こちら</a>を参照</p><h2 id="APIの実行"><a href="#APIの実行" class="headerlink" title="APIの実行"></a>APIの実行</h2><p>クイックスタートに載ってるコマンドを実行します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cred</span> = gcloud auth application<span class="literal">-default</span> print<span class="literal">-access</span><span class="literal">-token</span></span><br><span class="line"><span class="variable">$headers</span> = <span class="selector-tag">@</span>&#123; <span class="string">&quot;Authorization&quot;</span> = <span class="string">&quot;Bearer <span class="variable">$cred</span>&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Invoke-WebRequest</span> `</span><br><span class="line">  <span class="literal">-Method</span> POST `</span><br><span class="line">  <span class="literal">-Headers</span> <span class="variable">$headers</span> `</span><br><span class="line">  <span class="literal">-ContentType</span>: <span class="string">&quot;application/json; charset=utf-8&quot;</span> `</span><br><span class="line">  <span class="literal">-InFile</span> request.json `</span><br><span class="line">  <span class="literal">-Uri</span> <span class="string">&quot;https://texttospeech.googleapis.com/v1/text:synthesize&quot;</span> | <span class="built_in">Select-Object</span> <span class="literal">-Expand</span> Content</span><br></pre></td></tr></table></figure><p>実行すると以下のエラーが発生しました。</p><p><img src="/images/20210312/16err.png"></p><p><a href="https://qiita.com/ponsuke0531/items/4629626a3e84bcd9398f">このページ</a>を参考にしてエラーを解消します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> <span class="literal">-ExecutionPolicy</span> RemoteSigned <span class="literal">-Scope</span> <span class="keyword">Process</span></span><br></pre></td></tr></table></figure><p>再度実行すると無事mp3が返却…されません。<br>代わりにmp3を生成する基となるbase64を含むJSONが返却されます。</p><p>mp3が返却されないのはAPIの応答は全てJSONに統一されているからでしょうか？<br>なお、返却されたJSONの中のbase64の文字列をのちに利用するので応答をファイル出力しておくと便利です。</p><h2 id="base64からmp3への変換"><a href="#base64からmp3への変換" class="headerlink" title="base64からmp3への変換"></a>base64からmp3への変換</h2><p>JSONからaudioContentの値を抜き出してファイル(base64.txt)に保存します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;NExAAQyMGEAEpMTESE+SE5ANiIShEJiQnQNsNoEC9RqUkR48hbOz0pScWztOrVZkyAwcbMmAtFg2aBypBqg0A+b1hwy79PSYfpNP&#x2F;9BsyqPp4vaY45jkmOOY5Jjhlm&#x2F;&#x2F;NExA8SWKoMAMvQTMu2EYFwLghioqxp9DzQNBDEMAUBoDQPBQ93&#x2F;d3REIMQIBkPsKAgD4XB8P&#x2F;XW+QL4w4c&#x2F;&#x2F;7&#x2F;&#x2F;&#x2F;+r&#x2F;8MVPM7NMRAzURAQgDK4ecpYZTFUqxVirtYi&#x2F;&#x2F;NExBgYKNIUAVoYAdZcl&#x2F;Y1LrWX4cs0oZmOdytbJSVYzCoGnGcd2p&#x2F;lrqbpXfFQAPdsY3HYb4&#x2F;Pmbp9fzlX7Yvr++78FtaQ&#x2F;p3d+5BHa8vdpytb5er8feb8LGqKfxqF&#x2F;&#x2F;NExAoVEdqsAYZAAF+kDatk&#x2F;smJhOv44cjW+76m3ilDwYeJyYHEgsNDxO7&#x2F;EpZSQ8IHR+MDqP&#x2F;&#x2F;x3acPoWM7ohDv7laILJpKi&#x2F;+keRUOJCCFmlzJkAGal08aA4w54zG&#x2F;&#x2F;NExAgTuXaoAc9AANzJCY4EXGL71T2+bf+YfWem&#x2F;4v4l+miWQ7NfUcowoLQpgijRh3VNDVxU9Q2OGSNsKCgyi4YTFYJDQmdf&#x2F;6I7ZNe+nbdsLPRtWaEXqhVDST5MuCZ&#x2F;&#x2F;NExAwUiYKsAMFSlHLETDim3bO7gHuzxBlhxpDtECUPnYjAG3qNAuNhUTxwVttPJBc4FxW2usetNHOcmM7GtrIOkggQL0h1RAUCBM4j&#x2F;&#x2F;&#x2F;1fRSq7uCgrIwTcyUMz2nK&#x2F;&#x2F;NExAwToYa0AMoYlQWm8+EpC74gD+RU&#x2F;KLTzKxYzgv86pJGnknBLPx5AYnuSi2sOT1UoZEIsXWpoqmLH15&#x2F;qrfYZgZulWS82d1Zpf21Xar&#x2F;47w9DehG5ak9E0Bik8No&#x2F;&#x2F;NExBAT4Yq8AMGYlY&#x2F;0FIfikM5t9i72njDWjDTI0UDr3x6IY7geEVBiMSyb8VTQSC4Xm0hwUocbhyFuFqrcDNoGnY2o40Tqy&#x2F;RMObr9XYgUhpNs+MJ16ZMCLNMk4wPP&#x2F;&#x2F;NExBMUGYq8AMIYlTJIpXYm32SlGVsNhIcxIoTih7EbBIIgdEgplcunBXTjiQBwSHxyccrS0s5BfOt9MdcT9EsS1Voa7F7MfVMV5YCxdOkQUCcHky6HsjvoEk4iegkb&#x2F;&#x2F;NExBUR8YrEAJFSlJT0M+pTuZx7FVYEbaYZHRPNQ+gMko0IBAW1k&#x2F;Jqc6qMN3bvxjuTXhBN749hJrHf&#x2F;&#x2F;&#x2F;&#x2F;rf&#x2F;U2FgqjwzjYVi5+GVCyYtAojofKJfKZqlToeoUQ&#x2F;bx&#x2F;&#x2F;NExCASkYbAAMCYlOgTP4FxkXz&#x2F;Gi6kRtRnKtlbE8&#x2F;s1gp3ZSKrsGv2XJllrRrV4Okv&#x2F;&#x2F;&#x2F;&#x2F;5hXPXKyMhMfUfpS7BQPH7qVITviK+hLoX6kOpnKHtj1MsKQMEwycmNzI&#x2F;&#x2F;NExCgSUZK8AMHWlFiSDRMWseSQyq3M+1vh5ziDCX5UQ7GQ1I5aj&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;5BW5a7eC4EZI3KZOgCDX1rVVRwBlqJBo40RdqsztRm1etxQ64TAooXgVFRcmhCQ98HRD&#x2F;&#x2F;NExDERyYq8AMFQlD1Qp&#x2F;&#x2F;5ruVkYidjBLJKxVEub&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;Wq6xQ4OrJVQroLuoqDuCj4TbjW4h4h43xO+iJRtFgOB+dNCJDpSIQhvYNi9+nX6v8pN9UvJ0OaUW6XnH2f&#x2F;&#x2F;NExDwRWZK8AJlWlP&#x2F;&#x2F;TXk84tv&#x2F;RXXoho4UlIjUwKED+NUkBPQcfEl+a&#x2F;Obu3M8g6iWyGsBGYlRfKXAi3cRaanc8m7CishEykwUOexUl0f&#x2F;&#x2F;9W6rO0f9Kr&#x2F;&#x2F;EhNJgcq&#x2F;&#x2F;NExEkQSZa8AJKUlFh8RUIXWcsWlhC9B4TcgfkPj3yfyfSTC4lIBjjTH64aSQY&#x2F;KxBfyt+n&#x2F;qHfyWW1VHzv2at&#x2F;Tr&#x2F;&#x2F;&#x2F;68hKPo&#x2F;XhmV7&#x2F;3Sqq&#x2F;vZRPiOhWC3hmh6JZm&#x2F;&#x2F;NExFoSAaa4AMqWlAu8b9R7xl8r5UvyeUbIBdBgUmUOE+yawk5KoLjAalGrazTnC61jMoryTIK8oEsuG&#x2F;&#x2F;&#x2F;&#x2F;lzsfvUS&#x2F;1YJVf&#x2F;V0kiuPcEUzflJKPGsvAE2qHvjx9SH&#x2F;&#x2F;NExGUTSZK4AMnalMediXx4l5kBPWhpEkj67s+4t9J8r5r4bFnfxJn&#x2F;1m3mRui78qZhQuuVLGr259GcIv&#x2F;&#x2F;&#x2F;37yybP+PpX&#x2F;5XGDSZexaeAwdRY2tZqDpAo+MAJfuG&#x2F;3&#x2F;&#x2F;NExGoUIZK4AMKelA+vyC68gf+MD3hD0ZfKuCEF5xlSIBa3k&#x2F;xUJa+4aXmxrLlj4gMtfhga63yp3lI9G1Rb0xuap37x9f&#x2F;&#x2F;&#x2F;QeaAlGTwIA7&#x2F;jUkjr1Kp+7gowCEDqL3&#x2F;&#x2F;NExGwYmaKwAMoelNQeSlfP8VULcmZc4R76ZSzwK59sa3f0Uv1CG5wedNWprHcgqu6k+qz9jOFQUjPWKPuJd9j43X4zal8S43AispfmZjpDVMHYFFG&#x2F;&#x2F;&#x2F;+SYJakzxP&#x2F;&#x2F;&#x2F;NExFwX6Y6wAMpelIq0BU27zccALFWZ1VHzjF7q3UlnFmIK2e4nt9x39RtcFf9F87SIBgiRiUNggKqREj0LlgMEQLC6BPy1Be+55W&#x2F;a2NMVK0hOuxJBK4Lr6w5&#x2F;&#x2F;&#x2F;&#x2F;Q&#x2F;&#x2F;NExE8UaZa0AMLSlJa4YssfbmDfowfmiYS4k+FhRpPJ1ZFWryT&#x2F;l1eoQ1eYsqGEm6NAwBHOU8Poa9wH4jxVghNWzwer+D1&#x2F;Nfz&#x2F;nq9hUfpihDU1VReW&#x2F;&#x2F;&#x2F;+ScrTLf+l&#x2F;&#x2F;NExFAUGZawAMLWlDW+7NIFipWggLHUqjLQDNhiLTTWosKqK2vlHdTrTMLX5V&#x2F;NMUHRoPBEAlVh1YK2cSGQVr8b&#x2F;&#x2F;&#x2F;+HekxHYBGWCh67&#x2F;&#x2F;&#x2F;89+Jf7CyOAOjFQkCjRKO&#x2F;&#x2F;NExFISKYKYAMIGlJgYGYaOEw+kSxYCkhaxHbFFBgRq5i+qCa0sjzJgw4CGDl4IScgq688Sxh7+d0J76rf9d6W9tBH&#x2F;&#x2F;3+mPYw0VGNAZcMJjSlz&#x2F;rlfqU8cBXChyhx&#x2F;&#x2F;&#x2F;NExFwQ8Lo0ANvGTENQ8kVDQFCbAeNCqHsE1D3bsX2qusyjDJuHZiGaB7Xm&#x2F;jEBqGmXGn2kX61CnUbqveXDSvR0BDv+1Lw6ifH&#x2F;csQ3Kv3B8A4VAaAL&#x2F;gwCs8G5ABgt&#x2F;&#x2F;NExGsRkDIgAVkYAD&#x2F;56EB5QNQ5FhYG3&#x2F;4NBwuaCsIxZhosLB1&#x2F;&#x2F;h4KGQkmDmVh8CD&#x2F;&#x2F;+HYfiI+HYf2iqo0OWGiQn&#x2F;&#x2F;&#x2F;+nMpzK9Kg0rYaHQNjmxb&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;xSgaB5iibv&#x2F;&#x2F;NExHcgYyqcAZhAAL3+UzElLKCsjfFq3jjKiBRh7uxV6wZUZxbaRaVF5IJpeXFbH5&#x2F;dM7kipTYig0DlAnONEf2V&#x2F;&#x2F;9f8ffV10aNdbFn1Wg10MWtyKaSzm0cEJc0VAr&#x2F;&#x2F;&#x2F;NExEgS6Wq0AdlYAP&#x2F;&#x2F;&#x2F;1Xn5xAdsYJK3gf45XB4SRUjRRLqXW7RKAMOlJsBFB7xstIZ8XCa5ebdNur361dBLUdW1ZQJHR9SLWFzOcJQORqRU401kVsw8027f&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;NExE8VwoKsAMyOufo6mlTopYUnw&#x2F;KUgYtPG&#x2F;ci5vRtB+agQBwEFYphZwLqqRBAmgEaJIkAGIyqirqZ9SP&#x2F;5&#x2F;lv5ZuWFV5Bub7kC15YPB7RYvUBh0TiJ5X&#x2F;&#x2F;&#x2F;&#x2F;rLA+A&#x2F;&#x2F;NExEsTUVqwAM0QlIXFVefy0ZyM&#x2F;htN0MuhWNkvcegOsk9B&#x2F;dSrBggQdMqE2ktDqdmuVSUPrz9XP&#x2F;8O&#x2F;++f&#x2F;uv4v&#x2F;&#x2F;9+0zBhp22xsux5S7IAZid2VVoCwPhZ7v&#x2F;&#x2F;&#x2F;9y&#x2F;&#x2F;NExFAU+W6sAM4MlNJo01Ln&#x2F;dNNC&#x2F;&#x2F;s&#x2F;JjsdXABet2m6MaIrZ5x5IuGq&#x2F;Qt4IzzUrBM1X803Cn7+5&#x2F;v&#x2F;d5&#x2F;qZyc7IBxpggD7iQ2ggF4nPQa8ZgqONQWTcqO6Etf&#x2F;&#x2F;&#x2F;u&#x2F;&#x2F;NExE8VKY6sAM4UlKIheo6ozWzAAcUMOuIcyiHgZgV5gDUguM0Z8LKk0ygCcG7rJsJEMWcFCBz3mZtqJjoMcarigtRQXn0EDcf44X4z2JNPBLmPy9H&#x2F;&#x2F;&#x2F;vW2mL1KuoB&#x2F;&#x2F;NExE0SiY64AJSOlKXDyjfZZgC9KnqN8VWtpEjqfKrNf7gk5xnMYdV95UG6as5&#x2F;5v4hO+MLvcDD39fyn8p7+Pyj75FJnKJwbs&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;T6YAwS3UH9DQ60wRrPeGGKL7W&#x2F;&#x2F;NExFUQuXrAAIvQlOCnpvl6ov8Lp3&#x2F;pw+9MRlXrl4j6XAPJ0Gpeh4NPUeCUPa4z1fncr45ZBSmgmaTlnf&#x2F;&#x2F;&#x2F;76a1f&#x2F;cwFWQJn6HManfqW4xTo5QNqAo7QV4k&#x2F;fzNUBh&#x2F;&#x2F;NExGUR0Ya8AJvOlHXVLV3ZBAnwxUyJZ&#x2F;IIOoVJ0&#x2F;N7mMlsMptPfzT3qlr77Op2Gmrd&#x2F;&#x2F;&#x2F;&#x2F;6u&#x2F;qShf7a5V0QQ12f43LXK2wno&#x2F;R+X26P&#x2F;q2+ZcDKnFERU2syKWejiBK&#x2F;&#x2F;NExHARwY68AMFWlFbak3KZsaxdR6dYTSbgrUsethAl&#x2F;&#x2F;&#x2F;9PXePZ&#x2F;yoBevL8VVzNRLuzD680gqXuHPzffPz9fyX6n9lKNFjZIaTMBn30KZLSKSHEj6Brq6RPVZsl6WC&#x2F;&#x2F;NExHwSAZK0AMCSlBPeSgayLP&#x2F;&#x2F;&#x2F;&#x2F;Ete+WAq&#x2F;ra4UIkVY8y5wzGjOxlWxtoiXVd91btL&#x2F;8wyF&#x2F;&#x2F;&#x2F;&#x2F;jMzH9lgpYCNfCkeuupMfV8ybaOvtYBQVt+s7&#x2F;&#x2F;5Z55sO4asEro&#x2F;&#x2F;NExIcSEZakAMBSlJZYOjrkkx8CLpmNJoCsEHw4Ng9xYJdXBwyIFKmZ3mNX7vUqlt+ZRJTBZJUZFh8Y08dKu6ZauxC6NxX1Nqb522tyYmU19HtQyjXVOEiGQBERexFG&#x2F;&#x2F;NExJEQOZZ8AMhGlFEPxKxTy+&#x2F;nXFC4ZONyaShU9tU4++gTEB7dcjPIqWwY9yVkvT03oOIu0BmpzXp6KUWLu6ki982qPMOe4G4ITcribiMzA0IOR3EbGHHmQSiPvheB&#x2F;&#x2F;NExKMRiNYoANiEcIQlBzk8vG5V83TRL5uXSVQHYMF+PQuGiCELaPUJ6GJxNv5femnQHuXSTIRENC&#x2F;&#x2F;0GTTepk1rc0nymUh9&#x2F;&#x2F;Tsn2My+blwyKMYhkSaCKYnhwe&#x2F;&#x2F;&#x2F;l&#x2F;&#x2F;NExK8QCDocAVoAAMZNNy4gz0zRuTTFZsXx4HURqHgMiRhM6jUzMBrg0QB0IL0rDrFwFQ3dabq7dBn7f&#x2F;uP&#x2F;+f2qIshDn1Edi7MF4KaWZBwCgQfANDOZD8fCFg3LGTB&#x2F;&#x2F;NExMEhUyqIAZFoAMUuNF&#x2F;4r&#x2F;&#x2F;+9rpWbhmlZ&#x2F;&#x2F;&#x2F;9tf&#x2F;2fiJ+Z+7umih0Yu82WZwLzEt36ZqyxrN1MnUSdmq8YMUaiy+7W5PCdC8hepvNnes628tzXyQTnz8Qx2u2vaM&#x2F;&#x2F;NExI4Y4qKkAdNAAU5voJq0MzEMyWsLKll8&#x2F;OzNYdEgRByEFQeRH5rIXDjv&#x2F;&#x2F;+oICAkcjDgJGBMHla1IYEwyAhCKJrRJoDwUiZ5MhwIulV6Pv0bQ7o&#x2F;Z+nX20OGpEwR&#x2F;&#x2F;NExH0YIYqoAMiYlASQXCUOAHiQXjgVAUExIeByNh4HAcEx7igHojA+EQWg+G5w4DgJjBwsTGpZ0t&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;7M7ZmyuzoxzNt0stUno6rKyFth1gH6JJFIPgDjUt+fr&#x2F;&#x2F;NExG8YQvawAJnOuTFy&#x2F;&#x2F;&#x2F;efwlfs1iRAJAKVMIMWWgJA04gMCaJOTkiJygkE0ycnPAkB5GWnCl0jRn&#x2F;&#x2F;&#x2F;40i3abaFyrF9McWCaUqst1l8hJJbleCoNf9TvzfD1&#x2F;r&#x2F;5f&#x2F;&#x2F;NExGETMYq0AJhSlP7&#x2F;aUvaJnowEGWcUEZKggadNGFzytkYVZYgDCK1wckowgaWSUVf&#x2F;&#x2F;&#x2F;9Tb7YloN&#x2F;zI4RiibTDFgF2lRMdADRSuuW+Dly9dcv&#x2F;nJmcrOYa1xILKW&#x2F;&#x2F;&#x2F;NExGcR8Y60AMBSlC1oTZ3cOV36yffhUMVtC4TTl1OUYt17p9x&#x2F;&#x2F;&#x2F;&#x2F;0u+dc7+aWaUZq&#x2F;V0quYDc28QYuza3LOfH69G16e39ubzMtX&#x2F;Cu39Cea0mB&#x2F;4BNW31IUX&#x2F;4tRz&#x2F;&#x2F;NExHIREZK0AJhYlAHa99gzXvsFi3Sy2HwUd&#x2F;&#x2F;&#x2F;9jjz8KRLb0ZRBhKq&#x2F;7gooeF2ShUYc6loHIx&#x2F;Max8qBXIul8yGO767fNIFwXpNsqDIUYjK9OiWdzS3dVyG4anp2GU&#x2F;&#x2F;NExIASYYKwAMCYlFBfaTk8&#x2F;&#x2F;&#x2F;&#x2F;+v+t3&#x2F;DpQrX91AapxLcdMRJyUrYaDLN2L9vlKi07WJaEQBc+Bx7nGn2Ki0OQuZiRNGl1JTEJBOUt3x3fVVGGQnN656pW4BkQOdFT&#x2F;&#x2F;NExIkRWYK4AMBSlH&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;+tXmUdEK7a9uAEWisrDi8&#x2F;MF8PPlI&#x2F;a4PqlS3wZR9nE+Up7H3a0Hfx9&#x2F;GP+uhdBbEjWDM+jd8Q1FDVDzyCzrDpQ9&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;oX+WhpLU7DC&#x2F;&#x2F;NExJYSUWa4AMISlNDlT3RnYmbOqxckZcFxH1B&#x2F;BgrIcCsPGRRJFnMDbQ7&#x2F;q06dS5CqJmnEnnMaMUggBc7UFBZxIFAj&#x2F;&#x2F;&#x2F;&#x2F;+giq&#x2F;tIZYUlZwRdNRwiko8axXKAmqhcK&#x2F;&#x2F;NExJ8RIW60AMvKlGiZBUyAdB4ABmPBMCbhz05bs1b9tfx&#x2F;4&#x2F;evz5y0NcmjLp7yiMuKyhBH4Z+eVMEJS7&#x2F;&#x2F;&#x2F;&#x2F;okqsaNVQ2EVeI8KNg4lQwRFHS4mzSUMOxYTbGzAUXi&#x2F;&#x2F;NExK0RCWq0AMRKlIrxYjtM8mo3l8&#x2F;p5ZGb3r&#x2F;mv9t9q&#x2F;&#x2F;&#x2F;9P22CKtnP23vOaaj3JVTkYcFyqeNNyqMBcZmg4ULBwxGTzaK2pQ4omLRs7KLQCCqOtpxWSxuUYwzLKGK&#x2F;&#x2F;NExLsSkXawAMNMlETYbDDITikHMS40zc2sxreq67rzJb3CwIm7bv&#x2F;1jrFYRJLM+3Iw+fOiVTRHc0s2AwciIHDTxGKAEVIkwFCcqqSv22ihstjBbi5yXGYKRFzGkZu4&#x2F;&#x2F;NExMMSkYaoAMvMlBxODYLEfhylf3xzBwA3PEfkTV&#x2F;84OQRAZsi5P&#x2F;&#x2F;5gTBUIuRcrkM&#x2F;&#x2F;&#x2F;GYNBmCcQIoeNyf&#x2F;&#x2F;&#x2F;&#x2F;Jsrm70GTJ8hhEDP&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;IubpmZuOYOYaEERTHMI&#x2F;&#x2F;NExMsScJJgAVx4ASFSHCAUGIngLGQTCkLoF0xGWZYZi1iCSLS1Gt3F1u&#x2F;AVyefODG3szyNEjsrKzyJdNsCUZEPS+ITxDBKRy4R0MBhAIAhkBOOD&#x2F;V8EkOck6yz0A1A&#x2F;&#x2F;NExNQgsypoAZuYAMQ&#x2F;lJM321fT&#x2F;ceOwOCkUFVA6lTaw&#x2F;S6ovX&#x2F;&#x2F;NMOr6z&#x2F;&#x2F;&#x2F;Oc1s1BX&#x2F;94qsVGjWam&#x2F;pp9kjjFrA5ioCaxcX6T2NsBcYGjDqn21e1Z19uMiquRlp8v&#x2F;&#x2F;NExKQgYcakAZl4AIMgWy8fc3&#x2F;s3Xu+bfnj0VcX8Zc4SfCgKbpzKny7qWVMxlEaMjgpDXIVRtOcs9A7dJTIH0nsIpD1aLboZVPROctNbl1xYR&#x2F;qziWpI2teOt9bnJd2&#x2F;&#x2F;NExHUf6YqYAdrAAMgyeFv&#x2F;&#x2F;&#x2F;1NdQldypQqTKBseEk63HiAzt+HrA4qnjzN7JJV9jiYV+4THtttVhc5Vaq21ziQjTcz+JW0hGhGyCkyT8Mu0WQtxxqcXiLBgk8ISICh&#x2F;&#x2F;NExEgauYqkANPelG3NKsbn8jFDjPZIrLOyuKvUr9cMTCzwZo7W&#x2F;VzNMqp5LLuQ1XIHvbMGAMVW2yCkUdc1HktKSw3Oj3O2wnlxESM7Hl0e1lSkFTa16YD72l1m3uEo&#x2F;&#x2F;NExDATMPqwAMGYcPniS7c6BVnUYaKmQ0JVBUFRY9V&#x2F;&#x2F;&#x2F;&#x2F;+v&#x2F;5Mufie8YVB9nwA1PyQnDsvqpxbX&#x2F;Q5GrU5Zz1MLKNgHC7OXteY1c1UOr&#x2F;&#x2F;&#x2F;&#x2F;9P&#x2F;&#x2F;&#x2F;+lX0&#x2F;&#x2F;&#x2F;p7+09q&#x2F;&#x2F;NExDYS4xqkAHnKvL7nJPlPFBEPi5oqKDWICYiw11QeMorLUH0n1WiFQb7PAZIc9X+83VmY6K5DcjAinAAAAIRf6Xk+tF9eT7f&#x2F;6v&#x2F;1&#x2F;&#x2F;&#x2F;dk&#x2F;&#x2F;7&#x2F;9evPU5GSWV7orUs&#x2F;&#x2F;NExD0R+wawAHiEucUiMcYzmFMHLVUx&#x2F;HIKBVrwlZaypMO8BkTN+BAJv1EgmYnP17ZwWFdzhZKkG4lujoJcJw2fvxsP39E659D9xBoB7xCKv9P5&#x2F;KaaEHAAjBA+S&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;NExEgSiWq4AMMGlP&#x2F;1Kv7A7Bt6kQs8IEA62S7cIzMk5Hlh95wCziWYSqJSzVqdv4yh35RATXoTL+TFe3y5jfnfWXdHwoicDl1bRNQ+azPj9&#x2F;mNmn&#x2F;4hUtWqv+LsC&#x2F;t&#x2F;&#x2F;NExFASkXrEAH4MlZeh4tdxBWalNgOGfnqUk&#x2F;bjLmxVI&#x2F;wlNrEquaNMRzGXi+IsexSeuaYt5AkMkiTdEln83&#x2F;7&#x2F;eG8tDbm8qCCUeF&#x2F;69f&#x2F;GLlKr+a+GI5XxgCttjamA&#x2F;&#x2F;NExFgRmW7EAHvMlWJ3mCrrfB+xfhrr+1RreBG371rrC8hUbA8UWRIdRZRug0OpFBQRoc8dvdcU9fdfB3kCNw6W7FLpVf&#x2F;ajpGrdxDtFKlwVJNW+Aee0Qm44SzC+nXr&#x2F;&#x2F;NExGQSUZK8AMPQldDtkWxohFOyBGKUCZpdAJtnpmCAgqEIbs55s9zIZuwx+z1mIusW&#x2F;&#x2F;&#x2F;&#x2F;6GIYn&#x2F;oopcsZUYEDXrMNll5NqAlE4O7NiRyAObGGeNMYjap&#x2F;&#x2F;&#x2F;n75mzB&#x2F;&#x2F;NExG0ScYq4AMHSlMHJApsD0btAKcgcTF0RXWNeqqM1BouGczAktMl&#x2F;&#x2F;&#x2F;&#x2F;95B&#x2F;+ipLlKv7SGTVNdQ5qZT9YRAMmzwkOEAbO1RZ6Fqj77f&#x2F;&#x2F;&#x2F;yebRguAqIwRoysHIaEU&#x2F;&#x2F;NExHYSSZKwAMFMlFbFzhU0mN0cmaHucxKrblZxhf&#x2F;&#x2F;&#x2F;2X1ZYUb&#x2F;maDFe&#x2F;mYSDjUKpceEY4jQqQdjlmoOzqjONMwMtN7b&#x2F;&#x2F;+qIwqeEADiRgmPcUCW6ECWLklGZSGaSs&#x2F;&#x2F;NExH8SWY6sAMlQlDU2PmmSk&#x2F;&#x2F;&#x2F;&#x2F;6Pw&#x2F;en&#x2F;K3uWzqNHNn5s8dBuKBt52BqGd1EuQmCRACPEKIDlRjUVjnaptU3vY7q5qQKi4MOmBKPKCll72dv&#x2F;+3x2r3W7nmiKJr&#x2F;&#x2F;&#x2F;&#x2F;NExIgReY6kANHOlP&#x2F;aqmTFVPR&#x2F;WsOjKrMjCgYdAVlACxI0AVUKoCqHCQDTxxXtmsvGWxCYp9JHtxLjwkPfqpedlChwaPtHqrbFnsWz1TLoD3sinOr2V5C&#x2F;&#x2F;0f3MZjG&#x2F;&#x2F;NExJUTUY6gAMlMlLlEo&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;7JRiUQwIxwbB05&#x2F;GnSR4SiUBcJSFox1xsWbmdMs3zlum6tuD73YYYNosGXcVPXgaXLLyiRKKkEEC+NrNfs59qNNTnG5ZXl&#x2F;f&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;NExJoYepKQANsEuP&#x2F;fI3p9m+S76NO6NISr6f+&#x2F;37sQzsjWzst1Di0ZT0A0kIwc6qdCFOBjFZuGDXgHujqjS9pbQ2pV3LL61q4KiI4qRFWctmZA8AwdOK3ut0Z9m2Sv&#x2F;&#x2F;NExIsYUxKQANJEuav+yNb8P&#x2F;WVe7nzay&#x2F;fr+GVm1co7uR8clltxyfvJ3v8PuXsN1K6v2tk00k1nNxRtPSJA+bNRIGSUjJB9cfIGRgUDAsnSM28PoLTQ0AhISI14JhK&#x2F;&#x2F;NExHweeyKUAMFSvF&#x2F;&#x2F;5WuiAcxESZyl&#x2F;6TkD9THr&#x2F;&#x2F;27&#x2F;7f9elb+vtR2shu7OY557oeh08cHHWUcxyxNSpBRgbFBIceEdSY+UFCiWggcZEUSCw0EzjqETqv+D&#x2F;9ZR7G&#x2F;&#x2F;NExFUTcx6kAAhOvGhv+ZnXnyC7831&#x2F;&#x2F;7f&#x2F;&#x2F;X8nvrPdndb3rZRczXUrVKNEkM51YkYLCUOnh8Ph844pnIUhosHw4NOMYWKBAUwYUQMJvdMl1U4tt0JTJVP3EKgIMIRm&#x2F;&#x2F;NExFoSKx6wAAhKvCldqO7T3fp6f&#x2F;&#x2F;&#x2F;3&#x2F;&#x2F;&#x2F;3rmNqyydNlndj1sUxWVUtotSOmNqhyIaKdUcIyGBFKYpApnYcKQWCQEyruYBfGsyBJADBQgEFDDSz36eETNu&#x2F;d60dkx5&#x2F;&#x2F;NExGQSKx60ABFEvEUDpiQIIMLaCAEBA7&#x2F;4tUND4RPlDn8s9qioKnf&#x2F;0aavoUPOwMJemvm0bwrqB1VzHAia4AwY8JdXcOSKnyq6xnufTzmGJzC+wjPzomrRIBcSgySL&#x2F;&#x2F;NExG4QYKK0AHoMTNLA7Lq&#x2F;oG3rKDhoqn6lM+9r1P3q69nMfa0V4ULakxGuRqWWVv6xtYFqKkScFairebwhmBLpphUY4QAgZNJAmwg6aSqZJBbhQ6806I6D0h3GTjkk&#x2F;&#x2F;NExH8VMX6oAVhgAXmA5hUEKABQDwtjkigCZFhGWIgcD1hYjEkQvkyLonjpmWyqbizSqMcQEc0nUUexPnJ5JAoi5SYGNFklUu2o9A6bldk7JLRRUl&#x2F;9bv7epJaKKkjJ&#x2F;&#x2F;NExH0h8np8AZuAAB&#x2F;&#x2F;&#x2F;&#x2F;NUSPaDX&#x2F;+iQQAZYKIDPDBhMENGLF6wM2bY5K42QR83UdR&#x2F;CIBSRl4oZqSyWPJuFNhlT&#x2F;43H4TpHhPZQq+KI2LjgUTkMviz&#x2F;wO1JZj+v5CV&#x2F;&#x2F;NExEghUXacAZrAAEq14fp5mtXWpJqGk&#x2F;FrUQgCjiEcnZfDDvQ6&#x2F;e4AdCIOXK69Jk&#x2F;kUceN09gLBUDkAm1eb6XX&#x2F;&#x2F;5ejAfnKEqquOESsIKsNIUTlCTCBKZzMoUrCOLS&#x2F;&#x2F;NExBUXiXaoAdl4Ac3FtV7eNemy1OU1AxWwyPlIfr5eHIj1KnHzA9fPnj549fOSFxC9G07PpKxsMep4sasvntFs14fw3F3IhL5TqKVvxHzFnvGqHP3V5UJaMUjREVEq&#x2F;&#x2F;NExAkTqW6sAMMSlCBkvCWdoxYXZR7B7rcU4tokjbVnqc6Xk8aA+CggmqJ7LtPOWYtaiMcoUB2aA&#x2F;ScKp+3vTi6NyKq4Hzp4gKPYdRlmDwbn0rUZBxZMK4ZtqPPbOsa&#x2F;&#x2F;NExA0UaXKkAMvSlSIhLpLz4ztG+I&#x2F;i5fxdP5nkR+n3Wi7lorE0ySOUmn1qxtWpiJaIqEy4lPEPpdWEpX+neRlOlk5ImSIyToUGqqWVZoZmxcoMPH4qVWgcKhojInmn&#x2F;&#x2F;NExA4ScU6cAMJKlKsOjc1IsCKSLs1NRqkSTKJURGgSBUCRKsTfPl+5eqqwiClDor9C19DSsxpjGEg8FR4KgIq0kO&#x2F;&#x2F;&#x2F;&#x2F;+qTbyyjaB+pFGcXZf2GqbL97Zs7N7Ys82L&#x2F;&#x2F;NExBcPsNKcAMGQcDAUiCoXMIYyt0vn&#x2F;HFhYCvHHzCtcmtb&#x2F;metG131&#x2F;&#x2F;&#x2F;OIfV+UlKVvk0QaEwkztUJajmNt7meYKDogAwmxuLNgzOk7CJN&#x2F;LLTlTzKZ5GL0gcq4cMS&#x2F;&#x2F;NExCsRaS6YADFGcJCC0rQs21SFffv&#x2F;VlkDumww4gXEB9S1D658wgOrwsrEQAfH42N2BSBXd3fFgzBTIAgWxIDF0OKid4QcGZ9Z4qACJc+laq3e85vavcnl0OpGMf67&#x2F;&#x2F;NExDgQUO6gABhGcNJiRqiQShBthSoMKd13sRf&#x2F;MpN993z71HPR5gdGzUlARMxH2kTL0sulbmu8Piw2wmLpSLhtLZ8XSTpWP&#x2F;+mtbK+cc5zyEnsvFGlzxU4WEdIQGJE&#x2F;&#x2F;NExEkROS6kABBMcIdBMn1HO&#x2F;&#x2F;pT6Ts7+jBhVaiQRA5j66EMkAfA0rMyIF4TEWLSkn4&#x2F;+Oz+5kceqcA78NOtcrX6P6fj91kjyNvWZLKhhRQGTW2ycIZHgYZ&#x2F;m&#x2F;jGVJl&#x2F;&#x2F;NExFcRGU6gAEiSlN1&#x2F;Pw&#x2F;8&#x2F;yw17Pvj4+5iIpi1lY5D+Mi1MuNzAyHQPI+j2sZPVPycYw4xZ6Z96WmetRysencKUAQrMeKCjQGyzHRVCVbjWpFdhV0nW8mcZyuU1Jdp&#x2F;&#x2F;NExGUReVqcAVhYAfXbdWl1Ylcvq0nasoqym9S09trZbstnjEW0LgsEpYZdIEFIBC0H5YkqSHKZPpEpAE48afZTFO5q7&#x2F;O9PMAchqM&#x2F;AD8QuLtKeLGW3bE0sM0WF16K&#x2F;&#x2F;NExHIg2aKIAZrAAFOsP&#x2F;&#x2F;&#x2F;&#x2F;s7OZUQ&#x2F;&#x2F;&#x2F;&#x2F;6NDfyqqowNMp+y31dH1vhVCQcNWKtjmtd+5z+Y91n35v7e3e+v6rCxe+8Vg9uPT4loCIfS+OyEWWVnx2a3e17IbXrWNM6&#x2F;&#x2F;NExEER0VKcAdhgAZaOue8XLurGyTiw4KMpBqZA6OHx0CQQRHbe8Tg3OrhiCKWxQM+5CMeKAwTEBNAuqVm5dUrAbDxMJQaWRwRxTzp+8uHS9wxaCzoo4EmAIx+qrraM&#x2F;&#x2F;NExEwSIU6cAMpSlb6jbBAAHB1E6LcVEmuSGkZJ0JXqARyJKmG8TjB1TBXSlLecygQx8XhTi5Jod4NYOuEWjcvSqR4r5JHS6UiJmTg91M2jQkeMmIiU1LbVXmsMFawn&#x2F;&#x2F;NExFYcEX6MANPelBinwsTGch8BJqOM1&#x2F;D&#x2F;OYktxU&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;7FMCKap+qOhDpuUz1zDJ43JswoAAFyK4X7orS6IhDUvZ2ZrRDArl25Nzihx+RdFeSZjFOO9QKdGQV1HbF&#x2F;&#x2F;NExDggGpKYANPUuIeqxOQoLmiFE2KQsKw2k&#x2F;rCNx0x4cMVOFg4gFQ0sMR8bHBDjgUAIwLycfiEEISB4IggKjcmUgMPt&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;V+YyHvJDy7&#x2F;&#x2F;VWrK4segojOwvA7&#x2F;&#x2F;NExAoTuVaoAMJMlMmtzwyAWNzUqX9ot8rjyFmNoWeVM3QVBm9LG3KoZ+rk0jlTKjtaqpq3e+Z&#x2F;+8zhxKWJBQdEqRUQgqIv&#x2F;&#x2F;&#x2F;&#x2F;USCrFu&#x2F;&#x2F;0lVnHRIMtghY0Fixe1lD&#x2F;&#x2F;NExA4R8LJ4AVgYAMjXp+M4ZZb5rL9d&#x2F;&#x2F;9j&#x2F;KNqGHAQTjMTCRrYloFYe&#x2F;+BRIDoiErB+EqkICj1gJSf&#x2F;zz4wC&#x2F;QyAk57loDGlixs&#x2F;aZcUk2Zv7p1yZxjAuAn5jHqD4B&#x2F;&#x2F;NExBkYAyqIAYw4ACKCPz56MccPDYRfyCnn2HweiMXGw7&#x2F;Rt7kjSArOcp&#x2F;9s+xlhgqPFhkfH&#x2F;&#x2F;7v9uaUJlCAlkiw6NHL&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;58myCQQJlFQbk3f+eb&#x2F;yN6unff6Nqr&#x2F;&#x2F;NExAwVQo68AcEoAf76M5F8jc7XU9ziEhFcQEAQUdlOcPoUgEYw5XhwIB05xcUAc7iYfMxLOzs7lc5zlnRFE853dchS5EU9RTK849Kf9Xl5B5nAOBqFUQElKEAYNqO5&#x2F;&#x2F;NExAoRmcbEAEiElAEjZ9T&#x2F;Vf&#x2F;Qk9Rmd2Zbv3o9zk7fzdryPMY5HAjM5qGVmlRjHEsFAIGQmCoa7l4iz3arfKlQ0o9qPOuQSRX&#x2F;23QujFbM2nWptGp9YMmW0FtH2POP&#x2F;&#x2F;NExBYSgYbEAMPMlGxDatsajgVvm1cv7Zu&#x2F;fwH6fUbA&#x2F;hUgxd3lx6N1MouxhZ3zWPfHhn37btmXy3T0xUaVhmj&#x2F;IgwtdumRGNxWsHw5xWIGojpWsaB4fBdTX11Ylvzv&#x2F;&#x2F;NExB8SiZbAAHvQlK30mSutgz2q+Nu97kQG4JS7MO4CcuLFB7Y1r6H3unyUzOKFcCxtZDQ1DlUq2HKCrdZGB6rpoB+LJwADZwxMFWUvwbhH&#x2F;nog&#x2F;g9S8eY2TK3iClf&#x2F;&#x2F;&#x2F;NExCcRcYLAAIvKlDb87YwdjA2g0CWODcFNs+dtR2MPcgLuPitX&#x2F;&#x2F;&#x2F;tkaLYUOC6dh9B40XI8MLH46ADySKh9AH01nQ2Yg1g&#x2F;xtKYWXjtRYNHMWUWOZpc2c9mva5NvUE&#x2F;&#x2F;NExDQSWXK8AIxSlSzRAJdyZaVdbfa+epx9IH+0b&#x2F;HdhPXgxgvbg&#x2F;LiHLlYlQaXMRjgeaSjQN5UsYwN9QQFrFeTcYwNVH6COx7QFeMeQUzgZ5wC0EWxFpBA1Xeolxp1&#x2F;&#x2F;NExD0RMWbAAGyKlHED1P&#x2F;&#x2F;&#x2F;&#x2F;+hbCBFdo4BbLTFXPkB8HFtqAXCTeUL9U4ahnzWSA4VTE3BGjGxbmCLUH3RapbTNqi4XTVAuJJJm5qs8UOlBKC5kQAI0aS7&#x2F;&#x2F;&#x2F;&#x2F;+hX5&#x2F;&#x2F;NExEsSUSLEAGvacG4cBDqqcV53DU57RqEgLewJwO5FvUkSkTJqPkkzM1NpOoSROMdCiVC+nnK8m8+ltk6k8UnzNIRsHWFsV5zLs9V8xRRID&#x2F;&#x2F;&#x2F;&#x2F;qrV1KegYyjurUi2&#x2F;&#x2F;NExFQSkWq8AHvGlF9m+nllGGEWxD2Yg8cKwYTG0KFqRbAdkZWK0CggGAsTFKM5Q12dn192aYtWICAkRYK9oickHmf&#x2F;&#x2F;&#x2F;&#x2F;0qseQENElgEt1prSnkMwfsRuD&#x2F;WWtfDVk&#x2F;&#x2F;NExFwRCQq8AHvOcJYavMbEx+J2ImA2B7lEoif0psunZTOyC1UmdaFSRuZDZYP3XLl3Jos&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;TNX4yATuO10NvdSZuO14s4k74UTXBAeHzid5NodxJ3sYsjJVj4Ks&#x2F;&#x2F;NExGoRKQLEAHvacP6Nlyx6uX8f8OHLYMROS0NGx4YTsIt&#x2F;0+meIp0wNp&#x2F;&#x2F;&#x2F;&#x2F;ZDdy3&#x2F;ANy2rkfvCNtrYzrQwk6u2OwIK0YQLdNDJo&#x2F;oEIVT5eCwptT5zeTfh&#x2F;5tv4r8&#x2F;&#x2F;NExHgScW68AHvGlM+fevzDi5ltu8eqHl3CUAAJAFU0hd&#x2F;&#x2F;&#x2F;&#x2F;9CvmQNPUioPK9EK+HA4oDelEoyizGWn2ouUCo7wsTVQw5GIxOC8juOGB9zp5qtbaK6+ijWfdI4pdLx&#x2F;&#x2F;NExIER6SLAAHvecBPjHljwlu&#x2F;&#x2F;&#x2F;&#x2F;7q+SpRseUh1bOk6mamu1dOpiDeP62NRRZQhCqVOgkAp26zNi5JZ4UiXsL7OvfgSBHPCBIGpWvOIQKZteq2rWWMspqlarcltuvj&#x2F;&#x2F;NExIwRYRLAAU9oAMx7f3hUpZicnpunocIBrxbDvMcuXre8M9Xr2dq&#x2F;co4&#x2F;rvN&#x2F;&#x2F;&#x2F;&#x2F;4d1&#x2F;&#x2F;&#x2F;&#x2F;V4GjX4w55X6&#x2F;8qQf9A2ruLkFPIddBALFbyi0uiSOjZ3wFBMZg4LhBp&#x2F;&#x2F;NExJkfoca4AZjAABXysYGM3FkafSmJmI0HMb0YA6U5ihawgw4zqvdsj5iYnj4nno5z3m1em3cBmaGuIwQ4DVaSXUudX9t1gzPXs1fAzFi5mMhAaSF+j&#x2F;&#x2F;7gwp4mGiF&#x2F;&#x2F;NExG0boX6sAdh4AGFa7ockJ5qDBECdp0EzbDCG1pklCEvgtCeQ0w08py&#x2F;mqu1ePUhVxcjGP8OINI6wxQyTQRsRQQWWakbbO0rkEntUik4iJjSEMtxQrRQx9XkJ5mbK&#x2F;&#x2F;NExFEbsYqkAMPSlKUpSWiyVtlO2Q+DAfY8wj&#x2F;&#x2F;4kaERUEw0BQEFBJOJqOWAoyJrCC0y9oKSGikNtdxaSy1hKTeKyNaSTEmnIirjonPrTl1aSWykBIG3lo1VNTC7Ks1&#x2F;&#x2F;NExDUUoaKYAMMGlNSqrQoxN8Mof&#x2F;wy&#x2F;&#x2F;VfjcY4KPJoGHHv&#x2F;&#x2F;8rcHXCWjOMEAYSKEFF6kTWKwEw6pGr9s3hxEk0nB&#x2F;WKoMlaERE50tUOXSJPwmwkpsHWS3adZaWq9wF&#x2F;&#x2F;NExDUSmNZMAMpecB7oLMDt3&#x2F;0hoKtehl&#x2F;&#x2F;&#x2F;&#x2F;rSMatMWTU5E84x0GCjKlIAiL81YzQ&#x2F;dxy3lWjXMN6v8LG3XpfESCI+5dhprIwRLM4ikdkmwRIS5p2uStZZBKkTETKj&#x2F;&#x2F;NExD0SYGIkAVoYAHQSmmml91BhXbZFFpWtXDae4oNG+iHf7DQ4Yqjz&#x2F;m5PPkwniE4k&#x2F;+aHCefekSNpN&#x2F;&#x2F;l+gaHCUH4QSJCjp&#x2F;&#x2F;x3jvJ4eA8EwEcKiQIjBAgljn&#x2F;&#x2F;8d&#x2F;&#x2F;NExEYgOyqYAYhYAGTx0EgsJ5ufJgiDscCAO8+CYO02&#x2F;&#x2F;&#x2F;&#x2F;NGPf&#x2F;s+yhhNa2t7JSS&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;4p77Yxj3v&#x2F;84sg+ykzWgpcub2Fr75Kf9qqRrd6a&#x2F;2+j06omqFeqHQDuUE&#x2F;&#x2F;NExBgRgdawAcIQAA3cjMs4Rx2dgpimu7ux3NeRbDIQDIsXDIQFnbFeyihKFsmx7lhdEiLzRRhSDJMag6InabVb&#x2F;hMOYfyCvll4mUhbfwm5SonY6Xtn+1WM7UBEMuq&#x2F;&#x2F;&#x2F;NExCUSEfKkADhGmRrKv7GpXp&#x2F;swr&#x2F;Cn&#x2F;1VibEqK6KjRZRXeTPynYG3Oaf&#x2F;&#x2F;&#x2F;HiqgDogNzxcBBi4QZI2T0fV1&#x2F;V6t&#x2F;7lW&#x2F;T+2ZPdU0X6qlOaVFR9k6VuVet&#x2F;LKiwqnM&#x2F;&#x2F;NExC8Qgf5QAVQQAFYseUesWWcEiUJkSISrwkLka+vnVh3zHIHZH9dxz1CFgP92JyUPt+OhEnjvVJ3+BGDteyQSjEz&#x2F;+SeAYTR1pk43AADH&#x2F;8QBvZLL2GBqCCNBQbf&#x2F;&#x2F;&#x2F;NExEAiGyqQAZhYAO4485L96ROOQUof&#x2F;&#x2F;oEwvimJn1Ss1Ye4Osr&#x2F;&#x2F;&#x2F;83uCQTLk+mb2O8k1pNzripcpv&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;L2E9A4fe+r7QOeTEbsbUHJ3B8lGxtX8wClgssRTg5kC&#x2F;&#x2F;NExAoR+VasAdhIAZSwgxCbnE5FYvX952MN71veU9hVwq9i34TtSMWYIx0sAU0uxEYVXNMCgjLiUXRqdOUIQhP1flmwpNd0dohUuTIRSFrwQibhAcPF2nMp2dX5Uksj&#x2F;&#x2F;NExBUSaWqkAMGSlRuOjJWs3r7Ltr5NNU6ixMJIQWBIGwZEIhwdNIEZYQoTZKhhKUY5ny6lK&#x2F;ubGNSkmFkRiWvtXRnooDEQosyaoUJKO0fAQYGGcxgJH0dDat&#x2F;7+b&#x2F;H&#x2F;&#x2F;NExB4QgQp4AHiScCNfiI1QqOoBVFmRCgNOFRVNhosWVIzp2RTCrjpZ8FSX&#x2F;&#x2F;&#x2F;&#x2F;lThnsVPDGwIUAwcGJhJrP9L2U3K&#x2F;01W9+Pe5ZZZd1l2bt+1ubP&#x2F;ZZFKRQVbUkEwU&#x2F;&#x2F;NExC8Q0NYsAVswALw0n7Hdd+R21ehu7&#x2F;usf0fuc79KFZqLDIEjJf&#x2F;EShbQHz+h7mMAl3GmK0HYGAgcDAsR8TQUuOYJQAWSgEJAMebA0Yf5FRxkHLxUBtqGNiYELCn&#x2F;&#x2F;&#x2F;NExD4g6yp4AY+gAJOIppuxuMqShOk0Tf9Tb5SLJcJkvE+Uv+huyHPEQE4CtC6cKqlf&#x2F;&#x2F;77IVWmiRscPGn&#x2F;&#x2F;rdNC2&#x2F;8xLxgM2ThqpygZlw0RPoFYBxZP8Wg0w0ZNy&#x2F;X&#x2F;&#x2F;NExA0SAZaoAchQANM54qRlB6FMgFQBoLJQGwVRDzEk6TF7O35&#x2F;X&#x2F;&#x2F;++je56KsujHgNBQMO9WrSpxz1oNa6nRzq48TqJrKrDZDoIsgl70WSeo&#x2F;9V9qsDAQMSBAxgKAT&#x2F;&#x2F;NExBgREYagAGjElKrtrqJLUrf+Urf+hn&#x2F;8pnKVgwEBQLJcqGrYiK8qd7WQ1g1UebrBWzh3LBqHajqJUyEUBIAzVCJFVqkRl3ZTGaX+U1Nvtn8st&#x2F;38GJUgzAUk97n4&#x2F;&#x2F;NExCYQwIo4AVsYAJe6p&#x2F;9nspf6&#x2F;blnq55giEoaTW4GXViLuDfdZsrqGwmKgsQoBl27gHoB+fiZjMd7gZ0yBlyYEhfvwOGxAknDVABwv&#x2F;yDkTAOEB5QtP&#x2F;&#x2F;AOKBi8LT&#x2F;&#x2F;NExDYgIypYAZKgAMLFBQ4gH&#x2F;&#x2F;kAFyFocwcwnB3f&#x2F;&#x2F;iChIG6jQQXFjIoGJ&#x2F;&#x2F;&#x2F;&#x2F;xjhAAXIQQqFIQEGQC5gkIlD&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;FwHhQAhQdgfIJQIgI8NDQi5eJyjjWy4hIhdEn&#x2F;&#x2F;NExAgUWeqwAY9QAHeJ0W1Tj0WhCBqwvjIYgXRKNgbBgCwBQGAgnQShZc4Bt557EJpjap8ekqGmponzz+3KOzuYps88xtd7Hf&#x2F;&#x2F;5QjwK0n&#x2F;+6dFyiE1TjT6EAU8CoBc&#x2F;&#x2F;NExAkUCWacAZiAATLy1TKlZtIYB1m7GsbBEAi1CCibg+4eiBSErC5sN&#x2F;EyI4omMipVMpEGoW6Xb9ajpqYrZIpFMuUGSVpHEKVEpGaLH0lmZ8ARqkwy9SzQMMzZzUvk&#x2F;&#x2F;NExAsVCWqQAZmAAch2RQXFMEKEp8gcdDR9VjhkEMiClgFoMujDEpCaldIyNpEiq6RN6d9JdS1fqSOkBIapaBwpm3UmYqJocpFkXKxUJ8unzSZpGUVVMInNIhAxaHd3&#x2F;&#x2F;NExAkTyU5sAZqgAAxAEsFYbRfzpSP4ZdcHLY1QS4DWMwM6QDYwCRAbUWloojHDnFZX+oyRZX&#x2F;ooyiLNFDdSy7+WBSQpcc43LqNIxR+d&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;UqFJMtWzODE37mleP0&#x2F;&#x2F;NExAwP6MIEAc8YACVqasV+&#x2F;kg5hV3vBlcGwlyoa7CHjWBRUqVVYKh26MFVXLNVCxA1Qb&#x2F;r76mzqm&#x2F;1Jd&#x2F;&#x2F;&#x2F;NUFkJYtqhgIdHTsxFGAEBhIoKBTxpI8ackaiaqqsiUu&#x2F;&#x2F;NExB8SoK3YAHmMTF8OtE5IFSUrYWJKApK9p4KwkBQK67IhIGQKp&#x2F;uf4u7URJM+WLEmdMsn6fj1TEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMu&#x2F;&#x2F;NExCcAAANIAAAAADEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVKUNWMgWg&#x2F;&#x2F;NExHoAAANIAAAAACHliEMM0k5K0caDKo4TELJC5sQGQuiDCokLvQZPahTC7ZAyjSYUyZ8IOwGCEBxwBXj5dNCdXhOaZ&#x2F;xKYQhFDEf&#x2F;YsjSYT2&#x2F;uEeQeWd&#x2F;6HkSyP&#x2F;&#x2F;&#x2F;&#x2F;NExKwAAANIAAAAAIgRwJ7O&#x2F;85ZCzP&#x2F;9yKdJtUR0ngxhgmoLcf5LTuBkAxOGUmo+NoVjQKgAixpFRJ8&#x2F;a6dE5ZGEiwLkgoFQEDpFlQFBERBo87JEQmEgL2hUBAYkzUV&#x2F;&#x2F;NExKwAAANIAAAAACJI8&#x2F;tPBIf61liTPSROv+MGIQhwio7C3oYf6IP8&#x2F;GB&#x2F;APQWRJCSzCaC0SQkUKFkE1JCQwUKCdDlj&#x2F;+TWTzJla2ORqyggVBMy7&#x2F;WyaBkVFg8aCoo&#x2F;&#x2F;NExP8aEXHAAHpGld&#x2F;9QsKzISF2dnWz8VFFTEFNRTMuMTAwVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMu&#x2F;&#x2F;NExOkVMLXgAHpMTDEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVTEFNRTMu&#x2F;&#x2F;NExOcToSlIAHmGcDEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVOz6bk8c3&#x2F;&#x2F;NExKwAAANIAAAAAOA9Vlrz3nL8PiYT4+EUiz2Sd6PDul84zL7jCNqeNZJ184S0WDkeIDOVMMk5RC7Dj3S3ODRkg2YXHzIZXlMW08gzUh&#x2F;zPRDQM+oEQz5RNTPAIQM1&#x2F;&#x2F;NExKwAAANIAAAAAJLvMk42YweTFDHKIpMpEUQyzgjzLfAtMtoOgyuRvTI+LGMNM10yOjfTNJK2M&#x2F;ocs0PQ3DRSBONEsVk0IiUDOrNTMnI+BVVzCk0jW+uRYjOFMEHC&#x2F;&#x2F;NExKwAAANIAAAAAOOmG48&#x2F;U5E3&#x2F;i82KYUhBBCBDCED1i3ibi5lzUb9+r1BE9HjI8pr+Gr0PQ9D1fH1Dfq9Xq9&#x2F;uj9+&#x2F;fv3fR3064s65zd&#x2F;0QQiIiO4cDeJ&#x2F;ET9z&#x2F;6+&#x2F;&#x2F;NExP8nYLQMAPe8TInxERERz&#x2F;ruf&#x2F;T90RERET9z4XoW7u7uiIiIW6BABQYsFVTKRyRlMQ0zVKkAypWIxWah63yVS5uNJRK45lUboR0HKPUTogw9RCjqhq2ZOmioXr1h&#x2F;&#x2F;NExLQfov3oAMPGuXurQWFWva4hPnz17WvtCjbtbea11a2rPo1t&#x2F;FlgqgIDAIUpfxjVgYCJ6qxS&#x2F;1AVYCFGuzfxj43PjMwEBF681X&#x2F;Zj+qX&#x2F;6hQFS&#x2F;9S4zMf7M2oVkG&#x2F;&#x2F;NExIghsx3oAMPGvNBaROBXx+FeXk6k6FQeA8QEZARlC50ougDhJISKFCQIsw8w8wosRhkBC4qK7f&#x2F;FRUUFjQ8VlgWFhcVDLuFRUUFjT+oWFxVMQU1FMy4xMDBVVVVV&#x2F;&#x2F;NExFQRwJkwAHpMTFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV</span><br></pre></td></tr></table></figure><p>今回はしませんが繰り返し利用するのであればスクリプト組んでおくと便利ですね。</p><p>そしてbase64をmp3に変換します。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil <span class="literal">-decode</span> base64.txt future.mp3</span><br></pre></td></tr></table></figure><p>テキストから生成した音声はこちらになります。</p><p><br><br></p><audio controls>  <source src="/images/20210312/future.mp3"></audio><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>慣れないツールを利用したせいかところどころ躓きましたが無事テキストから音声を生成することができました。<br>難しい設定も不要でお手軽に自然な音声が生成できるのは素晴らしいですね。音声を生成する時間も早いと感じました。Webページにデモもありどんなものか試せる点も良いですね。</p><p>高音域まで聞こえるスピーカーで聞くと若干ノイズが気になりますが、電話を通じた音声に利用したりするには十分かと思います。</p><p>公式によるユースケースは<a href="https://cloud.google.com/text-to-speech?hl=ja#section-6">こちら</a>を参照</p><p>今回作成したプロジェクトを削除して終わりです。</p><p>明日は前原さんの<a href="/articles/20210315/">Cloud Build を知ってみよう</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIGの村瀬です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/20200218/&quot;&gt;昨年&lt;/a&gt;に続き</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="TextToSpeech" scheme="https://future-architect.github.io/tags/TextToSpeech/"/>
    
  </entry>
  
  <entry>
    <title>PythonでCloud Operationsの機能を使ってみる</title>
    <link href="https://future-architect.github.io/articles/20210311/"/>
    <id>https://future-architect.github.io/articles/20210311/</id>
    <published>2021-03-10T15:00:00.000Z</published>
    <updated>2021-03-16T16:26:02.899Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20210307/">GCP連載</a>の第3回目はCloud Operationsの機能を試してみます。DebuggerとProfilerを試してみます。本当は仕事で使っているGoでやってみようと思ったのですが、Debuggerのドキュメントをみたら、現時点でGoはまだ実験的サポートで、Cloud Runは非対応、Goのバージョンも1.9以下という状況でしたので、サポートが手厚いPythonで試しました。</p><h1 id="gcloudコマンドの設定"><a href="#gcloudコマンドの設定" class="headerlink" title="gcloudコマンドの設定"></a>gcloudコマンドの設定</h1><p>まずGCPの環境で、gcloudコマンドを入れます。M1 macには入れていなかったので入れてみたのですが、<a href="https://mager.co/posts/2021-01-21-gcloud-mac-m1/">こちら</a>に従ってやりました。普通のインストールでは途中でエラーになり、この紹介記事と同じく、最後にinstall.shを自分で叩く必要がありました。</p><p>プロジェクトIDは自分で入力する名前に何か数値が後ろについたようなやつです。プロジェクト一覧に出てくるserverless-12345のようなものがIDです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初期化とプロジェクトの選択</span></span><br><span class="line">$ gcloud auth login</span><br><span class="line">$ gcloud config <span class="built_in">set</span> project [プロジェクトID]</span><br></pre></td></tr></table></figure><h1 id="プロジェクトを作る"><a href="#プロジェクトを作る" class="headerlink" title="プロジェクトを作る"></a>プロジェクトを作る</h1><p>Cloud Runで試しで動かすプロジェクトを作ってみます。Poetryを使ってFastAPIなプロジェクトを作ってみましょう。作ったアプリケーションはCloud Runで実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一度だけやるPoetryのインストール</span></span><br><span class="line">$ python -m pip install --user poetry</span><br><span class="line"><span class="comment"># .venvはIDEが探しやすいようにプロジェクトローカルに作って欲しい</span></span><br><span class="line">$ poetry config virtualenvs.in-project <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># プロジェクトを作る(python-cloud-debugがプロジェクト名)</span></span><br><span class="line">$ poetry new python-cloud-debug</span><br><span class="line">$ <span class="built_in">cd</span> python-cloud-debug</span><br></pre></td></tr></table></figure><h2 id="開発環境の設定"><a href="#開発環境の設定" class="headerlink" title="開発環境の設定"></a>開発環境の設定</h2><p>まず、ライブラリを追加します。なお、uvicornですが、最近になって、uvloopとhttptools、websocketといった依存ライブラリは明示的にインストールしないと実行時にエラーになるように変わったみたいです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry add fastapi uvicorn uvloop httptools</span><br></pre></td></tr></table></figure><p>ここで.venvフォルダができ、ライブラリ類はそこにインストールされます。処理系がそこをみてくれるように設定すれば、コード補完とかが効きます。PyCharmであれば設定で検索ウインドウにvenvとタイプするとインタプリタ選択がでるので、追加してプロジェクトフォルダの.venv以下を設定します。</p><p><img src="/images/20210311/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-05_21.29.31.png"></p><p>VSCodeは特になにもしなくてもよさそうです。開くだけで.venvフォルダを認識してオープンしてくれました。</p><p><img src="/images/20210311/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-05_21.45.41.png"></p><h2 id="アプリケーションを作ってみる"><a href="#アプリケーションを作ってみる" class="headerlink" title="アプリケーションを作ってみる"></a>アプリケーションを作ってみる</h2><p>FastAPIのサンプルを持ってきました。</p><figure class="highlight py"><figcaption><span>python_cloud_debug/main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Optional</span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_root</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;hello&quot;</span>: <span class="string">&quot;world&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_item</span>(<span class="params">item_id: <span class="built_in">int</span>, q: Optional[<span class="built_in">str</span>] = <span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id, <span class="string">&quot;q&quot;</span>: q&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>次のように実行するとローカルの８０００番ポートで起動します。ブラウザでlocalhost:8000にアクセスしたらJSONが表示ができることを確認します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry run uvicorn python_cloud_debug.main:app --reload</span><br></pre></td></tr></table></figure><h2 id="コンテナを作ってpushする"><a href="#コンテナを作ってpushする" class="headerlink" title="コンテナを作ってpushする"></a>コンテナを作ってpushする</h2><p>Dockerfileは以下の通りです。ちょびっと工夫したのは以下の2点</p><ul><li>実行イメージでpip installするとイメージサイズが50MBぐらい違いますし、ネイティブコンパイルが必要なパッケージだと実行イメージにコンパイラを入れないといけないので、site-packagesをコピーする手法を選択</li><li>Cloud Runの作法にはPORT環境変数でポートを変えよ、というものがあります。それをsh -cで実現しましたが、今度はCtrl+Cでシャットダウンが効かなかったので、execをつけたところうまくいきました（@moriyoshit さんに教えてもらいました）。</li></ul><p>あとは、Python 3.7じゃないとうまくいかなかったので3.7にしています。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>-buster as builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install poetry</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> pyproject.toml poetry.lock /opt/app/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> poetry <span class="built_in">export</span> -f requirements.txt &gt; requirements.txt</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.7</span>-slim-buster as runner</span><br><span class="line"><span class="keyword">ENV</span> PORT=<span class="number">8000</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/app/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /usr/<span class="built_in">local</span>/lib/python3.7/site-packages /usr/<span class="built_in">local</span>/lib/python3.7/site-packages</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /usr/<span class="built_in">local</span>/bin/uvicorn /usr/<span class="built_in">local</span>/bin/uvicorn</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> python_cloud_debug /opt/app/</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/app/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PYTHONUNBUFFERED=TRUE</span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [ <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;exec /usr/local/bin/uvicorn --host 0.0.0.0 --port <span class="variable">$PORT</span> main:app&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>ローカルでビルドしてうまく動くことを確認したらpushします。リポジトリに入れてクラウドビルドをする方法も最近は使えます。とりあえず手元で動かしてプッシュしてみます。M1 macの場合は–platform linux/amd64が必要です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ビルド</span></span><br><span class="line">$ docker build --platform linux/amd64 -t gcr.io/[プロジェクトID]/[プロジェクト名]:latest .</span><br><span class="line"><span class="comment"># ローカルで実行</span></span><br><span class="line">$ docker run --rm -it -p 8000:8000 gcr.io/[プロジェクトID]/[プロジェクト名]:latest</span><br><span class="line"><span class="comment"># push</span></span><br><span class="line">$ docker push gcr.io/[プロジェクトID]/[プロジェクト名]:latest</span><br></pre></td></tr></table></figure><p>これを使ってCloud Runに登録して実行してみても良いでしょう。アプリケーション名を入れて、このpushしたイメージ名を選択して外部公開してあげれば簡単に起動できます。それ以外にはリポジトリと連携してCloud Buildする方法も選べます。デバッガーではソースコードを別にpushしないといけないのでそっちの方がいいかも？</p><p><img src="/images/20210311/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-06_9.38.35.png"></p><h1 id="デバッガーを使ってみる"><a href="#デバッガーを使ってみる" class="headerlink" title="デバッガーを使ってみる"></a>デバッガーを使ってみる</h1><p>それでは本題のGCPのAPIを使ってみます。必要なライブラリを足しつつ、先程のコードの<code>app = FastAPI()</code>の前に次の内容を入れます。ローカルでは外部依存なく気軽にテストしたいので、poetryの依存に入れず、実行イメージの中でのみ追加して、LOCAL=trueという環境変数があればロードしないようにします。</p><p>pip3の行を次のように書き換えます。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install poetry google-python-cloud-debugger</span></span><br></pre></td></tr></table></figure><p>アプリへの追加はこれだけです。</p><figure class="highlight py"><figcaption><span>python-cloud-debug/main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;LOCAL&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> os.environ:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> googleclouddebugger</span><br><span class="line">        googleclouddebugger.enable(breakpoint_enable_canary=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span> (ValueError, NotImplementedError) <span class="keyword">as</span> exc:</span><br><span class="line">        print(exc)</span><br></pre></td></tr></table></figure><p>これをビルドしてCloud Runを実行してみたらDebuggerの画面を開きます。まず開くと、ソースコードをアップロード白、と出てくるのでpython_cloud_debugフォルダを選択してアップしました。クラウドビルドだとこの手間なくできるみたいですね。</p><p>スナップショットを設定すると、その行が実行されたときにローカル変数やコールスタックが表示されます。またログポイントでログ出力を挟み込むこともできます。実行環境にそのまま差し込めるのは便利ですね。</p><p><img src="/images/20210311/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-06_0.24.24.png"></p><h1 id="プロファイラを使ってみる"><a href="#プロファイラを使ってみる" class="headerlink" title="プロファイラを使ってみる"></a>プロファイラを使ってみる</h1><p>せっかくなのでプロファイラも使ってみます。こちらはPythonであっても、Cloud Runはまだサポートされていません。ドキュメントにはグーグルのサービスではCompute Engine、GKE、GAEのみが対象となっています。ただ、自分でクレデンシャルを設定したらGCP外からも使えるとは書かれていて、<a href="https://cloud.google.com/profiler/docs/profiling-external">この手順</a>を試して成功したのですが、やっていることはプロファイラのエージェントのロールを付与しているだけなので、Cloud Run実行のサービスアカウントにプロファイラエージェントのロールをつければいけます。</p><p><img src="/images/20210311/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-06_12.51.21.png"></p><p>先程のDockerfileにプロファイラのライブラリのインストールも追加します。また、先ほど作ったクレデンシャルのファイルも登録して、そのファイルのパスを環境変数に設定します。本当は環境変数でファイルの内容を渡して、Pythonコードでそれをまずファイルに落としてあげる、環境変数はCloud Runの設定に入れてDockerイメージに入れない、みたいなことをやった方がセキュアな気がしますが、手取り早くファイルを足してしまいます。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> pip3 install poetry google-python-cloud-debugger google-cloud-profiler</span></span><br></pre></td></tr></table></figure><p>デバッガーの設定のところでプロファイラを開始する関数の呼び出しを追加します。</p><figure class="highlight py"><figcaption><span>python-cloud-debug/main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;LOCAL&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> os.environ:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">import</span> googleclouddebugger</span><br><span class="line">        <span class="keyword">import</span> googlecloudprofiler</span><br><span class="line">        googleclouddebugger.enable(breakpoint_enable_canary=<span class="literal">True</span>)</span><br><span class="line">        googlecloudprofiler.start(</span><br><span class="line">            service=<span class="string">&#x27;python-cloud-debug&#x27;</span>,</span><br><span class="line">            service_version=<span class="string">&#x27;1.0.1&#x27;</span>,</span><br><span class="line">            <span class="comment"># 0-error, 1-warning, 2-info, 3-debug</span></span><br><span class="line">            verbose=<span class="number">3</span>,</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">except</span> (ValueError, NotImplementedError) <span class="keyword">as</span> exc:</span><br><span class="line">        print(exc)</span><br></pre></td></tr></table></figure><p>プロファイル画面をみてみたら、フレームグラフが出ました。ちょっとスリープを挟んでみても、自分で書いたコードのフレームが出てこないのですが、きっとCPUヘビーなコードが出てきたらすぐにわかるんじゃないですかね。すくなくとも、time.sleep()でも、asyncio.sleep()でも結果には出てきませんでした。</p><p><img src="/images/20210311/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-06_10.41.02.png"></p><p>CPU時間のグラフはこんな感じです。きっとプログラムがヘビーになったら活躍してくれるはず。</p><p><img src="/images/20210311/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-03-06_10.26.38.png"></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>StackdriverあらためCloud OperationsのDebuggerとProfilerを試してみました。Goサポートがまだだったり、Cloud Run対応がまだだったりとかはありますが、OpenCensus/OpenTelemetryなみに頑張らなくてもちょっとmainのところにコードを足すだけで本番環境の中身を覗いたりプロファイルが取れるのは面白いですね。そのうち、ローカルのデバッグよりもリモートの方が簡単、みたいになってくれそうな気がしました。</p><p>明日は村瀬さんの<a href="/articles/20210312/">Text To Speech</a>です。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20210307/&quot;&gt;GCP連載&lt;/a&gt;の第3回目はCloud Operationsの機能を試してみます。DebuggerとProfilerを試してみます。本当は仕事で使っているGoでやってみようと思ったのですが、Debuggerのドキ</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="Monitoring" scheme="https://future-architect.github.io/tags/Monitoring/"/>
    
    <category term="OpenCensus" scheme="https://future-architect.github.io/tags/OpenCensus/"/>
    
    <category term="CloudRun" scheme="https://future-architect.github.io/tags/CloudRun/"/>
    
    <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="CloudOperations" scheme="https://future-architect.github.io/tags/CloudOperations/"/>
    
  </entry>
  
  <entry>
    <title>本番データが急に欲しくなったアナタに贈る、CloudSQLのサーバレスエクスポートを試してみた</title>
    <link href="https://future-architect.github.io/articles/20210310/"/>
    <id>https://future-architect.github.io/articles/20210310/</id>
    <published>2021-03-09T15:00:00.000Z</published>
    <updated>2021-03-14T13:41:31.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG 市川です。<a href="/articles/20210307/">GCP連載2021</a>の2日目です。</p><p>本番運用しているデータをサクッと引っこ抜いてCSV錬金したり、DWHなどに連携していないデータを元にDataStudioでコネコネしたり・・・（負荷を気にせず）気軽にやりたいなぁ・・・というアナタに贈る記事になります。</p><h2 id="おことわり"><a href="#おことわり" class="headerlink" title="おことわり"></a>おことわり</h2><ul><li>実際のシステムにおける本番データは正しく取り扱いましょう。運用ポリシー・セキュリティポリシーに従い、機密情報などを気軽に引っこ抜いてはいけません</li></ul><h2 id="サーバレスエクスポートとは？"><a href="#サーバレスエクスポートとは？" class="headerlink" title="サーバレスエクスポートとは？"></a>サーバレスエクスポートとは？</h2><img src="/images/20210310/serverless_export.png"><blockquote><p><a href="https://cloud.google.com/blog/products/databases/introducing-cloud-sql-serverless-exports">https://cloud.google.com/blog/products/databases/introducing-cloud-sql-serverless-exports</a> より引用</p></blockquote><p>データベースからデータをエクスポートすることは運用上起こりえるタスクではありますが、その実、エクスポートの仕方を誤ると本番のワークロードに影響を及ぼす可能性があります。</p><p>しかし、データのすべてはデータベースに入っていて、欲しい、今すぐ分析したい・・・という時もあると思います。</p><p>我々エンジニアは可能な限り手間は省きたい生き物です。</p><ul><li>別途データベースを建てたくない</li><li>わざわざGCEやローカルPCからSQLクエリ打ちたくない</li><li>データをGCSに持って行くのも面倒</li><li>本番ワークロード影響はあってはならない</li></ul><p>などなどのワガママに対応したのが、このサーバレスエクスポートです。CloudSQLではデータベースからのエクスポートは対応していましたが、2020年9月にサーバレスエクスポートに対応しました！</p><p>サーバレスエクスポートでは<strong>エクスポート専用の一時的なインスタンス</strong>を建て、そこからデータを抜くことで本番ワークロードに一切の影響を与えず、GCSにファイルをアップロードしてくれる優れものです。その上、SQL形式とCSV形式に対応し、カスタムSQLで狙ったデータだけ抜くこともできるかゆいところに手が届くサービスになっています。</p><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>今回のケースでは特に準備することはありません。グローバルIPを持ったCloudSQLを建てたのみです。あとはエクスポート先のGCSバケットさえあればよいのです。</p><p>データベースはMySQLとPostgreSQLでサポートしています。（今回はPostgreSQLで試しました）</p><p>今回、データはPostgreSQLの<a href="https://sp.postgresqltutorial.com/wp-content/uploads/2019/05/dvdrental.zip">サンプルデータベース</a>を利用します。CloudShellなどで接続し、pg_restoreを使ってサクッとインポートしましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DB作成</span></span><br><span class="line">$ gcloud sql connect serverless-demo-db --user=postgres --quiet</span><br><span class="line">postgres=&gt; CREATE DATABASE dvdrental;</span><br><span class="line">postgres=&gt; \q</span><br><span class="line"></span><br><span class="line"><span class="comment"># サンプルデータベースのダウンロード&amp;インポート</span></span><br><span class="line">$ wget https://sp.postgresqltutorial.com/wp-content/uploads/2019/05/dvdrental.zip</span><br><span class="line">$ unzip dvdrental.zip</span><br><span class="line">$ pg_restore -h 34.123.239.237 -U postgres -d dvdrental ./dvdrental.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># データの確認</span></span><br><span class="line">$ gcloud sql connect serverless-demo-db --user=postgres --quiet --database=dvdrental</span><br><span class="line">dvdrental=&gt; \dt</span><br><span class="line">             List of relations</span><br><span class="line"> Schema |     Name      | Type  |  Owner</span><br><span class="line">--------+---------------+-------+----------</span><br><span class="line"> public | actor         | table | postgres</span><br><span class="line"> public | address       | table | postgres</span><br><span class="line"> public | category      | table | postgres</span><br><span class="line"> public | city          | table | postgres</span><br><span class="line"> public | country       | table | postgres</span><br><span class="line"> public | customer      | table | postgres</span><br><span class="line"> public | film          | table | postgres</span><br><span class="line"> public | film_actor    | table | postgres</span><br><span class="line"> public | film_category | table | postgres</span><br><span class="line"> public | inventory     | table | postgres</span><br><span class="line"> public | language      | table | postgres</span><br><span class="line"> public | payment       | table | postgres</span><br><span class="line"> public | rental        | table | postgres</span><br><span class="line"> public | staff         | table | postgres</span><br><span class="line"> public | store         | table | postgres</span><br><span class="line">(15 rows)</span><br></pre></td></tr></table></figure><h2 id="クエリの作成"><a href="#クエリの作成" class="headerlink" title="クエリの作成"></a>クエリの作成</h2><p>さて、では2007年03月の担当者別売上げ（っぽい）クエリを作ってみます。</p><p>今回は分析用にこのデータがすごく欲しいと仮定します。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> staff_detail <span class="keyword">as</span> (</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">    staff.staff_id,</span><br><span class="line">    staff.first_name || <span class="string">&#x27; &#x27;</span> || staff.last_name <span class="keyword">as</span> staff_name,</span><br><span class="line">    store.store_id</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">    staff</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    <span class="keyword">store</span></span><br><span class="line">  <span class="keyword">ON</span></span><br><span class="line">    store.store_id = staff.store_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  staff_detail.staff_id,</span><br><span class="line">  staff_detail.staff_name,</span><br><span class="line">  staff_detail.store_id,</span><br><span class="line">  payment.payment_date,</span><br><span class="line">  payment.amount,</span><br><span class="line">  payment.customer_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  payment</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">  staff_detail</span><br><span class="line"><span class="keyword">ON</span></span><br><span class="line">  payment.staff_id = staff_detail.staff_id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="string">&#x27;2007/03/01&#x27;</span>::<span class="built_in">timestamp</span> &lt;= payment_date <span class="keyword">and</span> payment_date &lt; <span class="string">&#x27;2007/03/31&#x27;</span>::<span class="built_in">timestamp</span>;</span><br></pre></td></tr></table></figure><h2 id="データのサーバレスエクスポート実践！"><a href="#データのサーバレスエクスポート実践！" class="headerlink" title="データのサーバレスエクスポート実践！"></a>データのサーバレスエクスポート実践！</h2><p>CLIからももちろん可能ですが、今回は画面からエクスポートを行ってみます。<br><img src="/images/20210310/2021-03-09_13h46_23.png"  style="border:solid 1px #000000"></p><p>SQLクエリ部分に先ほど記載したSQLをおもむろに貼り付けます。</p><img src="/images/20210310/2021-03-09_13h49_22.png"  style="border:solid 1px #000000"><p><strong>一時インスタンスへのエクスポートをオフロードする</strong>にチェックを入れます。</p><img src="/images/20210310/2021-03-09_13h49_40.png"  style="border:solid 1px #000000"><p>エクスポートが開始されると概要画面に戻りぐるぐる回ります。</p><img src="/images/20210310/2021-03-09_13h50_11.png"  style="border:solid 1px #000000"><p>が、WITH句には対応していませんでした・・・<br><img src="/images/20210310/2021-03-09_13h57_31.png"></p><p>気を取り直してサブクエリ版のSQLを作成します。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    staff_detail.staff_id,</span><br><span class="line">    staff_detail.staff_name,</span><br><span class="line">    staff_detail.store_id,</span><br><span class="line">    payment.payment_date,</span><br><span class="line">    payment.amount,</span><br><span class="line">    payment.customer_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    payment</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span>(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        staff.staff_id,</span><br><span class="line">        staff.first_name || <span class="string">&#x27; &#x27;</span> || staff.last_name <span class="keyword">as</span> staff_name,</span><br><span class="line">        store.store_id</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        staff</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">        <span class="keyword">store</span></span><br><span class="line">    <span class="keyword">ON</span></span><br><span class="line">        store.store_id = staff.store_id</span><br><span class="line">    ) <span class="keyword">AS</span> staff_detail</span><br><span class="line"><span class="keyword">ON</span></span><br><span class="line">    payment.staff_id = staff_detail.staff_id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="string">&#x27;2007/03/01&#x27;</span>::<span class="built_in">timestamp</span> &lt;= payment_date <span class="keyword">and</span> payment_date &lt; <span class="string">&#x27;2007/03/31&#x27;</span>::<span class="built_in">timestamp</span>;</span><br></pre></td></tr></table></figure><p>そして改めてエクスポートを行い、GCSを確認すると・・・</p><img src="/images/20210310/2021-03-09_14h12_59.png"  style="border:solid 1px #000000"><p>エクスポートされていますね！</p><p>サーバレスエクスポートでは一時インスタンスを建てるため、最低でも5分程度時間を要します。後はデータ量によってエクスポートまでの時間がかかります。今回はきっかり5分程度で終わりました。</p><p>この間、本番サーバではSQLの呼び出しなどは行われず、一切の影響なしにデータが抜けました！</p><p>なんてお手軽！</p><p>作成されたCSVはヘッダなしのカンマ区切りで作成されます。</p><p><img src="/images/20210310/2021-03-09_15h28_29.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> -i Cloud_SQL_Export_2021-03-09-14-07-39.csv</span><br><span class="line">Cloud_SQL_Export_2021-03-09-14-07-39.csv: text/plain; charset=us-ascii</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>非常に簡単に本番影響を出さないデータエクスポートができました！</p><p>もちろん無料というわけにはいきませんが、ちょっとしたデータ集計や検証の為に利用価値が高いのではないでしょうか。</p><p>本番データを見たいけど、影響が。。。という方、是非試してみてください。</p><p>明日は澁川さんの<a href="/articles/20210311/">20210311_PythonでCloud_Operationsの機能を使ってみる</a>です。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.google.com/blog/ja/products/databases/introducing-cloud-sql-serverless-exports">Google Cloud blog Japan</a><br><a href="https://cloud.google.com/sql/docs/mysql/import-export/exporting?hl=ja">Google公式ドキュメント</a></p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200207/index.html" data-iframely-url="//cdn.iframe.ly/EECbx6H?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20190820/index.html" data-iframely-url="//cdn.iframe.ly/pdma83U?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIG 市川です。&lt;a href=&quot;/articles/20210307/&quot;&gt;GCP連載2021&lt;/a&gt;の2日目</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="SQL" scheme="https://future-architect.github.io/tags/SQL/"/>
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="CloudSQL" scheme="https://future-architect.github.io/tags/CloudSQL/"/>
    
  </entry>
  
  <entry>
    <title>PubSubのメッセージスキーマを試してみる</title>
    <link href="https://future-architect.github.io/articles/20210309/"/>
    <id>https://future-architect.github.io/articles/20210309/</id>
    <published>2021-03-08T15:00:00.000Z</published>
    <updated>2021-03-14T13:42:15.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット真野です。</p><p><a href="/articles/20210307/">GCP連載2021</a>の1日目です。2020年のGCP連載でも<a href="https://future-architect.github.io/articles/20200205/">Cloud Loggingネタでトップバッター</a>、2021年も先陣を切ることができて光栄です。</p><p>本記事では2021年3月に発表されたCloud PubSubのメッセージスキーマを試します。</p><ul><li><a href="https://cloud.google.com/pubsub/docs/schemas">Creating and managing schemas</a></li></ul><p>なお、2021/03/07時点では<strong>プレビュー</strong>であるのでご注意ください。今後フィードバックにより挙動なり設定方法が変更される可能性があります。</p><h1 id="Cloud-PubSubとは"><a href="#Cloud-PubSubとは" class="headerlink" title="Cloud PubSubとは"></a>Cloud PubSubとは</h1><p><img src="/images/20210309/cps_integration.png"></p><p>公式ドキュメントから引用します。</p><blockquote><p>Pub/Sub は、イベントを処理するサービスとイベントを生成するサービスを切り離す非同期メッセージング サービスです。メッセージング指向のミドルウェア（ストリーミング分析パイプラインにイベントの取り込みと配信を行う）として、Pub/Sub を使用できます。<br><a href="https://cloud.google.com/pubsub/docs/overview">https://cloud.google.com/pubsub/docs/overview</a></p></blockquote><p>メッセージングということで、当然1:N（ファンアウト）、N:1（ファンイン）、N:Nなどの通信が可能です。書き込み側をPublisher、読み込み側をSubscriberと呼びます。あとはAt-Least-Onceな配信（つまりSubscriber側が重複したメッセージを受け取ってしまうことがある）であるといったことが重要事項でしょうか。</p><p>この技術ブログでは、<a href="https://future-architect.github.io/articles/20191112/">Go Cloud#2 Pub/Subの概要紹介</a>や、<a href="https://future-architect.github.io/articles/20191128/">Go Cloud#7 PubSubドライバー(pubだけ)を実装してみる</a> といった関連記事があります。</p><h1 id="PubSubのメッセージスキーマ機能とは"><a href="#PubSubのメッセージスキーマ機能とは" class="headerlink" title="PubSubのメッセージスキーマ機能とは"></a>PubSubのメッセージスキーマ機能とは</h1><p>PubSubのあるトピックに対してスキーマを紐付け、Publishする時に検証を行うことができるようになりました。（待望の機能ですね！）</p><p>今のところは、以下のスキーマが利用できるとのこと。</p><ol><li><a href="https://avro.apache.org/docs/current/spec.html#schemas">Apache Avro</a></li><li><a href="https://developers.google.com/protocol-buffers/docs/overview">Protocol Buffer</a></li></ol><p>個人的には、JSON Schemaが欲しかったところですが、エンコーディングをJSONにすれば、JSONの検証も可能です。今後の拡張に期待しましょう。</p><p>Apache AvroはConfluent Schema Registryを意識しているからでしょうか。Kakfaユーザも乗り換えがしやすいかもしれませんね。Protocol Bufferでの検証が可能ということですが、PubSubはgRPCインターフェースでのPublishが可能です。つまり指定されたProtocol Bufferのスキーマで検証しつつ、gRPCでのやり取りもできそうです。凄い。</p><h1 id="スキーマで嬉しいこと"><a href="#スキーマで嬉しいこと" class="headerlink" title="スキーマで嬉しいこと"></a>スキーマで嬉しいこと</h1><p>従来のPubSubは（AWS Kinesis DataStreamsなどでも）以下のようにどんなメッセージでもバイナリ形式で登録可能でした。</p><figure class="highlight go"><figcaption><span>pubsubのサンプル.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">topic, err := pubsubClient.CreateTopic(context.Background(), <span class="string">&quot;&lt;トピック名&gt;&quot;</span>)</span><br><span class="line"></span><br><span class="line">res := topic.Publish(ctx, &amp;pubsub.Message&#123;Data: []<span class="keyword">byte</span>(<span class="string">&quot;&lt;任意のバイナリ&gt;&quot;</span>)&#125;)</span><br></pre></td></tr></table></figure><p>なんでもとりあえずPublishできるので楽なのですが、Subscribe側では困ったことになりがちです。<br>例えば、Subscribe側でスキーマ付きのデータストア（BigQueryやCloudSQLなど）に永続化する場合に、登録が失敗するようなレイアウト違反のデータを扱う必要があります。具体的には、Dead Letter Queue（DLQ）に登録したり、エラーログを出してシステムリカバリ運用に乗せたりを検討する必要がありました。</p><p><img src="/images/20210309/pubsub_schema.png"></p><p>これがHTTPのAPIであれば、HTTPレスポンスでエラーメッセージを応答することで、クライアント（今回だとPublisher）側に通知することができましたが、PubSubを経由すると、Enterprise Integration Patternでいう<a href="https://www.enterpriseintegrationpatterns.com/patterns/messaging/RequestReply.html">Request-Reply</a>を実装するのであれば別ですが、これはこれで両者がアプリケーションレベルで密結合になりますし、実装もそう簡単ではありません。</p><p>今回のメッセージスキーマ機能を用いると、Publisher側が明らかに契約違反のメッセージを連携した場合に早期にNGを返すことができるので、今後はこの手の考慮事項を減らすことできます。嬉しいですね。</p><h1 id="試してみる"><a href="#試してみる" class="headerlink" title="試してみる"></a>試してみる</h1><p>GCPプロジェクトは<a href="https://cloud.google.com/resource-manager/docs/creating-managing-projects">こちら</a>の手順に従い作成します。また、gcloudコマンドも<a href="https://cloud.google.com/sdk/docs/install">こちら</a>に従いインストールしておきます。</p><p>今回はAvroスキーマを利用します。コードは<a href="https://github.com/ma91n/pubsubschema">こちら</a>に上げています。</p><h2 id="①スキーマ付きトピックの作成"><a href="#①スキーマ付きトピックの作成" class="headerlink" title="①スキーマ付きトピックの作成"></a>①スキーマ付きトピックの作成</h2><ol><li><a href="https://console.cloud.google.com/iam-admin/serviceaccounts">IAMと管理</a>からPubSubの管理者権限を付与したサービスアカウントを作成し、鍵（JSONファイル）をダウロードします</li><li><a href="https://cloud.google.com/docs/authentication/getting-started">ここ</a>の手順に従い、取得した鍵のパスに環境変数を通します<ul><li><code>export GOOGLE_APPLICATION_CREDENTIALS=&lt;ダウンロードパス&gt;.json</code></li></ul></li><li>gcloudコマンドからトピックと、スキーマを作成します</li></ol><figure class="highlight bash"><figcaption><span>avroスキーマ作成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcloud beta pubsub schemas create avroschema1 \</span><br><span class="line">    --<span class="built_in">type</span>=AVRO \</span><br><span class="line">    --definition=&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;record&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Avro&quot;</span>,<span class="string">&quot;fields&quot;</span>:[&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;StringField&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;string&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;FloatField&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;float&quot;</span>&#125;,&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;BooleanField&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;boolean&quot;</span>&#125;]&#125;</span><br></pre></td></tr></table></figure><p>続いてトピックを作成します。管理コンソールからだと以下のように、<strong>スキーマを使用する</strong> のチェックボックスが増えていました。</p><p><img src="/images/20210309/image.png"></p><p>今回はgcloud経由で作成します。<a href="https://cloud.google.com/pubsub/docs/admin#gcloud">こちら</a>の説明に従いオプションを追加します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;gcloud beta pubsub topics create avrotopic \</span><br><span class="line">        --message-encoding=JSON \</span><br><span class="line">        --schema=avroschema1</span><br><span class="line">Created topic [projects/&lt;YOUR PROJECT ID&gt;/topics/avrotopic].</span><br></pre></td></tr></table></figure><p>登録内容をgcloud経由で確認すると、以下の用に設定されています。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># トピックの情報</span></span><br><span class="line">$ gcloud pubsub topics describe avrotopic</span><br><span class="line">name: projects/&lt;YOUR PROJECT ID&gt;/topics/avrotopic</span><br><span class="line">schemaSettings:</span><br><span class="line">  encoding: JSON</span><br><span class="line">  schema: projects/&lt;YOUR PROJECT ID&gt;/schemas/avroschema1</span><br><span class="line"></span><br><span class="line"><span class="comment"># スキーマの状態</span></span><br><span class="line">&gt;gcloud beta pubsub schemas describe avroschema1</span><br><span class="line">definition: <span class="string">&#x27;&#123;&quot;type&quot;:&quot;record&quot;,&quot;name&quot;:&quot;Avro&quot;,&quot;fields&quot;:[&#123;&quot;name&quot;:&quot;StringField&quot;,&quot;type&quot;:&quot;string&quot;&#125;,&#123;&quot;name&quot;:&quot;FloatField&quot;,&quot;type&quot;:&quot;float&quot;&#125;,&#123;&quot;name&quot;:&quot;BooleanField&quot;,&quot;type&quot;:&quot;boolean&quot;&#125;]&#125;&#x27;</span></span><br><span class="line">name: projects/&lt;YOUR PROJECT ID&gt;/schemas/avroschema1</span><br><span class="line"><span class="built_in">type</span>: AVRO</span><br></pre></td></tr></table></figure><h2 id="②Publishしてみる"><a href="#②Publishしてみる" class="headerlink" title="②Publishしてみる"></a>②Publishしてみる</h2><p>Go SDK経由でPublishしてみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;cloud.google.com/go/pubsub&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">c, err := pubsub.NewClient(ctx, <span class="string">&quot;&lt;YOUR PROJECT ID&gt;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">topic := c.Topic(<span class="string">&quot;avrotopic&quot;</span>) <span class="comment">// 今回作成したトピック名</span></span><br><span class="line"></span><br><span class="line">data := []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">`&#123;&quot;StringField&quot;:&quot;hello&quot;, &quot;FloatField&quot;:123.45, &quot;BooleanField&quot;:true&#125;`</span>,</span><br><span class="line"><span class="string">`&#123;&quot;StringField&quot;:&quot;world&quot;, &quot;FloatField&quot;:0, &quot;BooleanField&quot;:false&#125;`</span>,</span><br><span class="line"><span class="string">`&#123;&quot;NGField&quot;:&quot;dummy&quot;&#125;`</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> data &#123;</span><br><span class="line">res := topic.Publish(ctx, &amp;pubsub.Message&#123;</span><br><span class="line">Data: []<span class="keyword">byte</span>(v),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> _, err := res.Get(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;success publish&quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>動かしてみると、登録したAvroスキーマ違反な3番目の入力をPublishする時にエラーになります。まだ、go-sdk側にメッセージスキーマのエラーハンドリンクが組み込まれていないのか、色気がない内容ですね。</p><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;go run main.go</span><br><span class="line">success publish &#123;<span class="string">&quot;StringField&quot;</span>:<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;FloatField&quot;</span>:123.45, <span class="string">&quot;BooleanField&quot;</span>:<span class="literal">true</span>&#125;</span><br><span class="line">success publish &#123;<span class="string">&quot;StringField&quot;</span>:<span class="string">&quot;world&quot;</span>, <span class="string">&quot;FloatField&quot;</span>:0, <span class="string">&quot;BooleanField&quot;</span>:<span class="literal">false</span>&#125;</span><br><span class="line">2021/03/07 16:20:20 rpc error: code = InvalidArgument desc = Request contains an invalid argument.</span><br></pre></td></tr></table></figure><p>エラーメッセージの表示内容はさておき、メッセージスキーマによってPublisher側が良からぬメッセージを連携してしまうことは防ぐことができました。</p><h1 id="Avroスキーマの検証"><a href="#Avroスキーマの検証" class="headerlink" title="Avroスキーマの検証"></a>Avroスキーマの検証</h1><p>Avroスキーマの動作検証ですが、gcloudコマンドの<code>pubsub schemas validate-message</code>で検証することができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正常なケース</span></span><br><span class="line">&gt; gcloud beta pubsub schemas validate-message \</span><br><span class="line">        --message-encoding=json \</span><br><span class="line">        --message=&#123;<span class="string">&quot;StringField&quot;</span>:<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;FloatField&quot;</span>:123.45,<span class="string">&quot;BooleanField&quot;</span>:<span class="literal">true</span>&#125; ^</span><br><span class="line">        --schema-name=avroschema1</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 明らかにNGなケース</span></span><br><span class="line">&gt; gcloud beta pubsub schemas validate-message \</span><br><span class="line">        --message-encoding=json \</span><br><span class="line">        --message=&#123;<span class="string">&quot;NGField&quot;</span>:<span class="string">&quot;dummy&quot;</span>&#125; \</span><br><span class="line">        --schema-name=avroschema1</span><br><span class="line">ERROR: (gcloud.beta.pubsub.schemas.validate-message) INVALID_ARGUMENT: Request contains an invalid argument.</span><br></pre></td></tr></table></figure><p>こちらもエラーメッセージに優しさは無いので、今後の拡張に期待です。</p><p>どの程度ちゃんとスキーマを検証してくれるかもう少し細かく突っ込んでみます。<code>BooleanField</code>を文字列<code>xxx</code>を入れてみます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;gcloud beta pubsub schemas validate-message \</span><br><span class="line">     --message-encoding=json \</span><br><span class="line">     --message=&#123;<span class="string">&quot;StringField&quot;</span>:<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;FloatField&quot;</span>:123.45,<span class="string">&quot;BooleanField&quot;</span>:<span class="string">&quot;xxx&quot;</span>&#125; \</span><br><span class="line">     --schema-name=avroschema1</span><br><span class="line">ERROR: (gcloud.beta.pubsub.schemas.validate-message) INVALID_ARGUMENT: Request contains an invalid argument.</span><br></pre></td></tr></table></figure><p>無事エラーになりました。同様に<code>FloatField</code>に数値以外の文字列を入れてもエラー担ってくれました。</p><p>スキーママイグレーションの前方互換性で重要そうな、スキーマに存在しないフィールド<code>extra</code>を追加してみます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;gcloud beta pubsub schemas validate-message \</span><br><span class="line">        --message-encoding=json \</span><br><span class="line">        --message=&#123;<span class="string">&quot;StringField&quot;</span>:<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;FloatField&quot;</span>:123.45,<span class="string">&quot;BooleanField&quot;</span>:<span class="literal">true</span>,<span class="string">&quot;extra&quot;</span>:<span class="string">&quot;aaa&quot;</span>&#125; \</span><br><span class="line">        --schema-name=avroschema1</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>これは実行結果が<code>&#123;&#125;</code>なので問題ないようです。</p><h2 id="エンコードにバイナリを指定する"><a href="#エンコードにバイナリを指定する" class="headerlink" title="エンコードにバイナリを指定する"></a>エンコードにバイナリを指定する</h2><p>続いて、スキーマのエンコードに<code>バイナリ</code>を指定します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;gcloud beta pubsub topics create avrotopic2 \</span><br><span class="line">        --message-encoding=BINARY \</span><br><span class="line">        --schema=avroschema1</span><br><span class="line">Created topic [projects/&lt;YOUR PROJECT ID&gt;/topics/avrotopic2].</span><br></pre></td></tr></table></figure><p>GoでAvroを利用するために、<code>github.com/linkedin/goavro/v2</code> を利用します</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="comment">// 略</span></span><br><span class="line"><span class="string">&quot;github.com/linkedin/goavro/v2&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Goのデータ構造をAvro形式に変換するコーデック</span></span><br><span class="line"><span class="keyword">var</span> codec, _ = goavro.NewCodec(<span class="string">`</span></span><br><span class="line"><span class="string">   &#123;</span></span><br><span class="line"><span class="string"> &quot;type&quot; : &quot;record&quot;,</span></span><br><span class="line"><span class="string"> &quot;name&quot; : &quot;Avro&quot;,</span></span><br><span class="line"><span class="string"> &quot;fields&quot; : [</span></span><br><span class="line"><span class="string">   &#123;&quot;name&quot; : &quot;StringField&quot;, &quot;type&quot; : &quot;string&quot;&#125;,</span></span><br><span class="line"><span class="string">   &#123;&quot;name&quot; : &quot;FloatField&quot;, &quot;type&quot; : &quot;float&quot;&#125;,</span></span><br><span class="line"><span class="string">   &#123;&quot;name&quot; : &quot;BooleanField&quot;, &quot;type&quot; : &quot;boolean&quot;&#125;</span></span><br><span class="line"><span class="string"> ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span>)</span><br></pre></td></tr></table></figure><p>これを用いて実行します。登録は <code>map[string]interface&#123;&#125;</code> を先程作成した<code>codec</code>で変換して登録します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line">c, err := pubsub.NewClient(ctx, <span class="string">&quot;&lt;YOUR PROJECT ID&gt;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">topic := c.Topic(<span class="string">&quot;avrotopic2&quot;</span>) <span class="comment">// 先程作成したトピック</span></span><br><span class="line"></span><br><span class="line">data := []<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">&#123;<span class="string">&quot;StringField&quot;</span>: <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;FloatField&quot;</span>: <span class="number">123.45</span>, <span class="string">&quot;BooleanField&quot;</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;NGField&quot;</span>: <span class="string">&quot;dummy&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> data &#123;</span><br><span class="line">binary, err := codec.BinaryFromNative(<span class="literal">nil</span>, v)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;codec.BinaryFromNative&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res := topic.Publish(ctx, &amp;pubsub.Message&#123;</span><br><span class="line">Data: binary,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> _, err := res.Get(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;success publish&quot;</span>, v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事項すると、1つ目の入力はOK、2つ目はクライアント側のAvro形式への変換でエラーで落ちました。クライアントサイドで落ちた方がエラーメッセージは切り分けしやすいですね。</p><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;go run main.go</span><br><span class="line">success publish map[BooleanField:<span class="literal">true</span> FloatField:123.45 StringField:hello]</span><br><span class="line">2021/03/07 16:48:41 codec.BinaryFromNativecannot encode binary record <span class="string">&quot;Avro&quot;</span> field <span class="string">&quot;StringField&quot;</span>: schema does not specify default value and no value provided</span><br></pre></td></tr></table></figure><p>念の為、不正なバイナリ値を送信してみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line">c, err := pubsub.NewClient(ctx, <span class="string">&quot;&lt;YOUR PROJECT ID&gt;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res := c.Topic(<span class="string">&quot;avrotopic2&quot;</span>).Publish(ctx, &amp;pubsub.Message&#123;</span><br><span class="line">Data: []<span class="keyword">byte</span>(<span class="string">&quot;dummy payload&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> _, err := res.Get(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;success publish&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;go run main.go</span><br><span class="line">2021/03/07 16:55:04 rpc error: code = InvalidArgument desc = Request contains an invalid argument.</span><br></pre></td></tr></table></figure><p>こちらもシンプルな例外メッセージですが、メッセージスキーマで不正なPublishを防ぐことに成功しています。</p><h1 id="スキーママイグレーションについて"><a href="#スキーママイグレーションについて" class="headerlink" title="スキーママイグレーションについて"></a>スキーママイグレーションについて</h1><p>メッセージスキーマを付与した後に、アプリケーション要件の変化に併せてスキーマもアップデートしたいものです。2021/03/07時点では、一度作成したスキーマを変更する機能も、トピックに紐づくスキーマを変更する機能も存在しないようです。このあたりの機能追加や利用者側のナレッジも蓄積できると良いですね。</p><p>また、現状はスキーマをPub/Subの設定に紐付けるような形式なようです。スキーマはPublish/Subscribeのどちらにも公開されるべきものなので、Schema Registryのマネージドサービスが待ち遠しいですね。現状はGCSにもスキーマファイルを配備するなど、一工夫の設計余地がありそうだなと思いました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Cloud Pub/SubでメッセージスキーマでPublish時のペイロードの検証ができるようになりました。今の所、AvroとProtocol Buffersで定義可能で、エンコードJSONにすれば、テキストJSONも検証できます。</p><p>スキーマファイルは今の所GCSなどの連携ができず、Pub/Sub側に直接定義するようです。</p><p>まだまだ発展途上な機能だと思いますが、不正なデータがPub/Subトピックに混入されることを防ぐことができるのは画期的だと思いますので、ぜひ利用を検討したいと思います。</p><p>明日は市川さんの<a href="/articles/20210310/">20210310_本番データが急に欲しいアナタに贈る、CloudSQLのサーバレスエクスポートを試してみた</a>です。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><ul><li><a href="/articles/20210307/">GCP連載2021</a></li><li><a href="/articles/20200205/">GCP連載2020</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG DXユニット真野です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/20210307/&quot;&gt;GCP連載2021</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="PubSub" scheme="https://future-architect.github.io/tags/PubSub/"/>
    
    <category term="スキーマ" scheme="https://future-architect.github.io/tags/%E3%82%B9%E3%82%AD%E3%83%BC%E3%83%9E/"/>
    
    <category term="Avro" scheme="https://future-architect.github.io/tags/Avro/"/>
    
  </entry>
  
  <entry>
    <title>Auth0 Rulesのユニットテストを書きたい</title>
    <link href="https://future-architect.github.io/articles/20210308/"/>
    <id>https://future-architect.github.io/articles/20210308/</id>
    <published>2021-03-07T15:00:00.000Z</published>
    <updated>2021-03-16T16:30:28.041Z</updated>
    
    <content type="html"><![CDATA[<p>TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> アルバイトの小林です。</p><p>案件で認証プラットフォームである<a href="https://auth0.com/jp/">Auth0</a>を利用していますが、Auth0の機能の中でもRulesと呼ばれるユーザ認証時にJavaScriptの関数を走らせる事が出来る機能は非常に強力で様々なニーズに対応することが可能になります。</p><p>その中でJavaScriptの関数で書けるRulesに対して、ユニットテストを書く事が出来れば、Ruleの質も担保出来ます。</p><p>Auth0テナントへのRulesのexport、importには<a href="https://github.com/auth0/auth0-deploy-cli">auth0-deploy-cli</a>を利用出来ますが、Ruleの記述方法が</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">anyRule</span>(<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">    callback(<span class="literal">null</span>,user,context)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>の様な名前付き関数の形式なのでユニットテストの実現には工夫が必要となります。</p><p>今回はその<code>工夫</code>の部分について書いていきたいと思います。</p><h1 id="Auth0について"><a href="#Auth0について" class="headerlink" title="Auth0について"></a>Auth0について</h1><p><img src="/images/20210308/image.png"></p><p>Auth0の概要については<a href="https://future-architect.github.io/articles/20200122/">Auth0 導入編</a>を、<br>Auth0 Rulesについては<a href="https://future-architect.github.io/articles/20200128/">Auth0のRulesを使って認証認可を自在にカスタマイズする</a>をそれぞれご参照ください。</p><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>検証に利用したマシンのNode.jsのバージョンは<code>v12.15.0</code>です。</p><h2 id="検証に使うRule"><a href="#検証に使うRule" class="headerlink" title="検証に使うRule"></a>検証に使うRule</h2><p>以下の二つのRuleをテストしたいことにします。</p><ul><li>IDトークンのクレームに<code>&#123;&quot;https://example.com/color&quot;: &quot;blue&quot;&#125;</code>を追加する、<code>add-claims.js</code></li></ul><figure class="highlight js"><figcaption><span>add-claims.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClaim</span>(<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> idTokenClaims = context.idToken || &#123;&#125;;</span><br><span class="line">    idTokenClaims[<span class="string">&quot;https://example.com/color&quot;</span>] = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">    context.idToken = idTokenClaims;</span><br><span class="line"></span><br><span class="line">    callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>http://example.com/some/api</code>にGETリクエストを送信して上手く行った場合はレスポンスをIDトークンの<br><code>http://example.com/data</code>キーに入れる、<code>request-example.js</code></li><li>このRuleはリクエストのレスポンスが200以外の場合にログインエラーとする。</li></ul><figure class="highlight js"><figcaption><span>request-example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">requestExample</span>(<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios@0.19.2&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">await</span> axios(&#123;</span><br><span class="line">        url: <span class="string">`http://example.com/some/api`</span>,</span><br><span class="line">        method: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// リクエストのレスポンスが200以外の場合にログインエラーとする。</span></span><br><span class="line">    <span class="keyword">if</span> (response <span class="keyword">instanceof</span> <span class="built_in">Error</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> e = <span class="string">&#x27;Failed to fetch data&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> callback(<span class="keyword">new</span> UnauthorizedError(<span class="string">`<span class="subst">$&#123;e&#125;</span>: <span class="subst">$&#123;response.data&#125;</span>`</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> idTokenClaims = context.idToken || &#123;&#125;;</span><br><span class="line">    idTokenClaims[<span class="string">&quot;http://example.com/data&quot;</span>] = response.data;</span><br><span class="line"></span><br><span class="line">    context.idToken = idTokenClaims;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><details><summary>コードについての補足</summary><div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">requestExample</span>(<span class="params">user, context, callback</span>) </span>&#123;</span><br></pre></td></tr></table></figure><p>Auth0 Rulesではトップレベルのasyncは<code>許可</code>されています。</p><ul><li>参考: <a href="https://community.auth0.com/t/is-it-possible-to-use-async-await-in-rules/50235">Is it possible to use async await in rules? - Auth0 Community</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios@0.19.2&#x27;</span>);</span><br></pre></td></tr></table></figure><p>Auth0 Rulesではいくつかのライブラリが利用可能です。</p><p>利用可能なライブラリのリストはこちらに記載されています。</p><ul><li><a href="https://auth0-extensions.github.io/canirequire/">Can I require? - Search which node modules you can use in webtask.io</a></li></ul></div></details><h2 id="テスト環境"><a href="#テスト環境" class="headerlink" title="テスト環境"></a>テスト環境</h2><p>以下の様なNode.jsを用いたテスト環境を前提とします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">C:.</span><br><span class="line">│  add-claim.js</span><br><span class="line">│  package.json</span><br><span class="line">│  request-example.js</span><br><span class="line">│</span><br><span class="line">└─tests</span><br><span class="line">        add-claim.test.js</span><br><span class="line">        request-example.test.js</span><br></pre></td></tr></table></figure><p>それではこれらの前提を元に様々な手段について書いていきます。</p><p>記事中では引数のcallbackやスタブ化したrequireに適当なコードを書いていますが、実際にテストコードを書く際は引数のcallbackやスタブ化したaxiosをモック関数(jestでの<code>jest.fn()</code>)にすることで動作の保証範囲をより広くすることが出来ます。</p><h2 id="fsでスクリプトを文字列として取ってvmを利用して取り出す。"><a href="#fsでスクリプトを文字列として取ってvmを利用して取り出す。" class="headerlink" title="fsでスクリプトを文字列として取ってvmを利用して取り出す。"></a>fsでスクリプトを文字列として取ってvmを利用して取り出す。</h2><p>Auth0 docsに書かれている<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>方法です。</p><p>add-claim.jsのRuleを呼び出すコードを書くとこのようになります。</p><figure class="highlight js"><figcaption><span>add-claim.test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> context = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script =  fs.readFileSync(<span class="string">&#x27;./add-claim.js&#x27;</span>) <span class="comment">// =&gt; func addClaim...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> runCode = <span class="string">`</span></span><br><span class="line"><span class="string">  f = () =&gt; &#123;</span></span><br><span class="line"><span class="string">    return <span class="subst">$&#123;script&#125;</span>;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  f() // =&gt; addClaimが関数として得られる。</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rule = vm.runInThisContext(</span><br><span class="line">    runCode, &#123;</span><br><span class="line">        <span class="comment">// filename for stack traces</span></span><br><span class="line">        filename: <span class="string">&#x27;add-claim.js&#x27;</span>,</span><br><span class="line">        displayErrors: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">rule(</span><br><span class="line">    user,</span><br><span class="line">    context,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Complete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(context); <span class="comment">// =&gt; &#123; idToken: &#123; &#x27;https://example.com/color&#x27;: &#x27;blue&#x27; &#125; &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>テストしたいRuleのJavaScriptのソースコードを文字列として取得して、<code>vm.runInThisContext</code>を使ってサンドボックス上に<code>テスト対象のメソッドが返るコード</code>を実行します。先述の通り<code>vm.runInThisContext</code>がテスト対象である<code>addClaimメソッド</code>を返し、そのメソッドに(user,context,callback)を入れて呼び出しをしている形となります。</p><p>今回はコードを少しでも読みやすくするため、少し冗長な書き方をしていますが、コードが少し分かりにくいことを除けば比較的短いコードで記述することが可能になります。</p><h3 id="requireモックについて"><a href="#requireモックについて" class="headerlink" title="requireモックについて"></a>requireモックについて</h3><p>axiosモジュールを利用している<code>request-example.js</code>テストについて考えます。</p><p>HTTPリクエストが必要なユニットテストではクライアントライブラリをスタブにして様々なレスポンスが来た場合についてテストすることが品質向上に対して有効です。</p><p>そこで、<code>require</code>モジュールをスタブにすることで<code>axios</code>では無く、独自のメソッドを利用出来る様にします。</p><p>嬉しいことに、<code>vm</code> モジュールの仕様は外部のライブラリを利用するメソッドにおいても都合が良く、<code>context</code>は同一であっても<code>scopeは同一で無い</code>仕様があります。これにより、<code>runInThisContext内ではrequireは未定義</code>になります。</p><p>requireに何か代入してaxiosモジュールのモック化を試みましょう。</p><h4 id="・contextを新たに作成する。"><a href="#・contextを新たに作成する。" class="headerlink" title="・contextを新たに作成する。"></a>・contextを新たに作成する。</h4><p><code>runInThisContext</code>で目的のメソッドを取り出していましたが、<code>require</code>が別の機能を果たす様な<code>context</code>を別途作成して、それを利用します。</p><p>まとめると以下のコードで実現可能になります。</p><figure class="highlight js"><figcaption><span>request-example.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm = <span class="built_in">require</span>(<span class="string">&#x27;vm&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> context = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> script =  fs.readFileSync(<span class="string">&#x27;./request-example.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> runCode = <span class="string">`</span></span><br><span class="line"><span class="string">  f = () =&gt; &#123;</span></span><br><span class="line"><span class="string">    return <span class="subst">$&#123;script&#125;</span>;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  f()</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> runContext = vm.createContext(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">require</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// require()が返すメソッド</span></span><br><span class="line">            <span class="keyword">return</span> <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// axios()が返すレスポンス</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;axios called:&quot;</span>, ctx);</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    data: <span class="string">&quot;mock response&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rule = vm.runInContext(</span><br><span class="line">    runCode, runContext,&#123;</span><br><span class="line">        <span class="comment">// filename for stack traces</span></span><br><span class="line">        filename: <span class="string">&#x27;./request-example.js&#x27;</span>,</span><br><span class="line">        displayErrors: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(rule);</span><br><span class="line"></span><br><span class="line">rule(</span><br><span class="line">    user,</span><br><span class="line">    context,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Complete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(context); <span class="comment">// =&gt; &#123; idToken: &#123; &#x27;http://example.com/data&#x27;: &#x27;mock response&#x27; &#125; &#125;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>ここまでがAuth0 Docsに記載されているユニットテストの実現方法です。</p><h2 id="rewire-を利用する方法"><a href="#rewire-を利用する方法" class="headerlink" title="rewire を利用する方法"></a>rewire を利用する方法</h2><p>他には<a href="https://www.npmjs.com/package/rewire">rewire</a>を利用すると、<code>vm</code>+<code>fs</code>よりは裏ワザ感少な目で<br>テストコードを実行出来ます。</p><p>それでは早速<code>add-claim.js</code>のメソッドを呼び出すコードを書いていきます。</p><figure class="highlight js"><figcaption><span>add-claim.test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rewire = <span class="built_in">require</span>(<span class="string">&#x27;rewire&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// テスト対象のスクリプトを取得</span></span><br><span class="line"><span class="keyword">const</span> script = rewire(<span class="string">&#x27;./../add-claim.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// テスト対象のメソッド名を指定してメソッドを取得</span></span><br><span class="line"><span class="keyword">const</span> rule = script.__get__(<span class="string">&#x27;addClaim&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> context = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> callback = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Complete&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">rule(user,context,callback);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(context); <span class="comment">// =&gt; &#123; idToken: &#123; &#x27;https://example.com/color&#x27;: &#x27;blue&#x27; &#125; &#125;</span></span><br></pre></td></tr></table></figure><p>何をやっているかは圧倒的に分かりやすいと思います。</p><p>続いて<code>request-example.test.js</code>の呼び出しを進めていくのですが、<code>rewire</code>はモック機能を持つので、<br>先程の<code>vm</code>+<code>fs</code>の組み合わせの時と同様に<code>require</code>をモックすることで、<code>axios</code>をモックします。</p><figure class="highlight js"><figcaption><span>request-example.test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rewire = <span class="built_in">require</span>(<span class="string">&#x27;rewire&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// テスト対象のスクリプトを取得</span></span><br><span class="line"><span class="keyword">const</span> script = rewire(<span class="string">&#x27;./../request-example.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line">script.__set__(<span class="string">&#x27;require&#x27;</span>, <span class="function">()  =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;axios called&#x27;</span>,ctx);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            data: <span class="string">&quot;mock response&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// テスト対象のメソッド名を指定してメソッドを取得</span></span><br><span class="line"><span class="keyword">const</span> rule = script.__get__(<span class="string">&#x27;requestExample&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> context = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> callback = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Complete&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> rule(user,context,callback).then(</span><br><span class="line">    () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(context); <span class="comment">// =&gt; &#123; idToken: &#123; &#x27;http://example.com/data&#x27;: &#x27;mock response&#x27; &#125; &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>相変わらず<code>require</code>のモックは泥臭いですが、ある程度は見やすくなったかと思います。</p><h1 id="その他調査したもの"><a href="#その他調査したもの" class="headerlink" title="その他調査したもの"></a>その他調査したもの</h1><h2 id="auth0-test-harness"><a href="#auth0-test-harness" class="headerlink" title="auth0-test-harness"></a>auth0-test-harness</h2><p><a href="https://github.com/tawawa/auth0-rules-testharness">auth0-rules-testharness</a>を用いてwebtask上でRuleを実行させることが<strong>出来てた様です。</strong></p><details><summary>webtaskとは</summary><div>Auth0 Inc.が持つ`Node.jsをweb上で実行できるサービス`です。HTTPエンドポイントが作成されるため、コードを書くだけでサーバを動かす事が可能でした。<p>webtaskはAuth0 Rulesの実行環境としても使われており、webtaskの作成するサンドボックス上でRuleが実行されます。</p></div></details><p>私も早速試してみようと思ったのですが、publicなwebtaskのサービスが終了している様子<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>のため、検証を断念したいと思います。</p><h2 id="auth0-local-test-harness"><a href="#auth0-local-test-harness" class="headerlink" title="auth0-local-test-harness"></a>auth0-local-test-harness</h2><p><a href="https://github.com/auth0/auth0-rules-local-testharness">auth0-rules-local-testharness</a>は<code>auth0-rules-testharnessのwebtaskを使う所をlocalにした</code>物です。</p><p>コードをよく見ると、<code>fs</code>+<code>vm</code>でサンドボックス上で実行している物に<a href="https://github.com/auth0/auth0-authz-rules-api">auth0-authz-rules-api</a>が定義しているcontextを流し込んでいる様に見えます。</p><p>手元のマシンがNode.js v12.15で、Auth0 Rulesで使われるNode.jsのバージョンも執筆当時12.20.1<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup><sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>ですが、手元でのnpm installが失敗するのと、npmパッケージが2年前から更新されていないことを考慮して断念します。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回は以下の4つの方法についてテスト方法の調査を行いました。</p><ul><li>Auth0 Docsに載っている方法</li><li>rewireを利用した方法</li><li>auth0-test-harnessを利用した方法</li><li>auth0-local-test-harnessを利用</li></ul><p>上二つが現実的な実装案になると考えていますが、<br>Auth0 Docsに載っている方法は<code>fs</code>と<code>vm</code>のシンプルな構成で利用可能な代わりに、コードが少し類雑、<br>rewireを利用した方法はシンプルに書けるが別途パッケージのインストールが必要と一長一短の様に見えます。</p><p>また、今回の調査においてはrequireのスタブ化が出来ても、ほぼ無理やり感は否めません。</p><p>一つのRuleが利用するモジュールが2つ以上の場合に置いて、与えられた引数から何を返すか場合分けで記述する必要があり、少し複雑です。</p><p>この辺りは今後の課題として、引き続き調査出来ればと思います。</p><h1 id="Auth0の新機能-Actionsについて"><a href="#Auth0の新機能-Actionsについて" class="headerlink" title="Auth0の新機能 Actionsについて"></a>Auth0の新機能 Actionsについて</h1><p>執筆当時(2021/03/03)はBETA版機能ですが、認証認可を自由自在にカスタマイズする手段として、<strong>Rules</strong>,<strong>Hook</strong> に加えて<strong>Actions</strong>が存在します。</p><p><strong>Actions</strong>はRulesと同様ログイン時に何らかのスクリプトを走らせることが出来る機能です。</p><p>沢山の追加機能があるのですが、一部抜粋すると、</p><ul><li>バージョン管理の実装</li><li>コードエディタの進化(コード補完、クイックヒント機能の搭載)</li><li>任意のnpmパッケージが利用可能</li><li><strong>スクリプトの記述方法がRulesと異なる</strong></li></ul><p>です。</p><p>詳しくはAuth0の公式ブログ: <a href="https://auth0.com/blog/introducing-auth0-actions/">Introducing Auth0 Actions</a> をご参照ください。</p><p>この記事で特筆すべき点は<strong>スクリプトの記述方法がRulesと異なる</strong>点です。</p><p>Actionは以下の形式で表記されています。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type <span class="type">&#123;PostLoginAction&#125;</span> </span>*/</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (event, context) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Rulesとは異なり、Actionは<strong>module.exportsが記載されています</strong>。</p><p>つまり、<strong>rewireやfsを使わずともテスト対象のメソッドのインポートが出来ます</strong>。</p><p>インポート先でのrequireは、<a href="https://www.npmjs.com/package/proxyquire">proxyquire</a>などを利用することでスタブ化が出来るため、これらを利用することでActionsの単体テストが実装可能になると考えられます。</p><p>まだBeta版であり、Auth0 Deploy CLIのSupported Featuresには記載されていませんが、Rulesよりも幅広い機能を持ち、改善されている点も多々あるため、今後はRulesの代わりにActionsの利用を視野に入れると良いと思います。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">TIG: Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。DXユニット: TIGの中にありデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="https://auth0.com/docs/best-practices/rules-testing-best-practices">Rules Testing Best Practices</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="https://community.auth0.com/t/future-of-rules-without-webtask-io/48554/2">Future of rules without webtask.io - Auth0 Community</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="https://webtask.io/">Webtask</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;"><a href="https://auth0.com/docs/product-lifecycle/deprecations-and-migrations/migrate-to-nodejs-12">Migrate to Node.js 12</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;"><a href="https://auth0-extensions.github.io/canirequire/">Can I require? - Search which node modules you can use in webtask.io</a>に記載</span><a href="#fnref:6" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TIG DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; アルバイトの小林です。&lt;/p&gt;
&lt;p&gt;案件で認証プラットフォームである&lt;a href=&quot;https://auth0.com/jp/&quot;</summary>
      
    
    
    
    <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
    <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
    <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
    <category term="ユニットテスト" scheme="https://future-architect.github.io/tags/%E3%83%A6%E3%83%8B%E3%83%83%E3%83%88%E3%83%86%E3%82%B9%E3%83%88/"/>
    
  </entry>
  
  <entry>
    <title>GCP連載2021を始めます</title>
    <link href="https://future-architect.github.io/articles/20210307/"/>
    <id>https://future-architect.github.io/articles/20210307/</id>
    <published>2021-03-06T15:00:00.000Z</published>
    <updated>2021-03-22T16:08:43.868Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。TIGの<a href="https://twitter.com/kaedemalu">伊藤太斉</a>です。</p><p>タイトル通り、GCP連載をテーマに連載を行います。</p><h2 id="GCP連載について"><a href="#GCP連載について" class="headerlink" title="GCP連載について"></a>GCP連載について</h2><img src="/images/20210307/gcp_global.png"><p>今年は<a href="/tags/GCP%E9%80%A3%E8%BC%89/">昨年の連載</a>に引き続き2度目の開催です。</p><p>GCPはフューチャー社内でも利用を始めたり、検討を行っている案件も増えてきました。また世間でもパブリッククラウドの選択肢として、GCPを入れるという企業が昨年より増えているかと思います。</p><h1 id="連載スケジュール"><a href="#連載スケジュール" class="headerlink" title="連載スケジュール"></a>連載スケジュール</h1><p>今年も参加者が取り扱いたいテーマを取り扱っています。</p><table><thead><tr><th>日程</th><th>メンバー</th><th>内容</th></tr></thead><tbody><tr><td>3/8</td><td>伊藤太斉</td><td>Index（この記事）</td></tr><tr><td>3/9</td><td>真野隼記</td><td><a href="/articles/20210309/">PubSubのメッセージスキーマを試してみる</a></td></tr><tr><td>3/10</td><td>市川諒</td><td><a href="/articles/20210310/">本番データが急に欲しいアナタに贈る、CloudSQLのサーバレスエクスポートを試してみた</a></td></tr><tr><td>3/11</td><td>澁川喜規</td><td><a href="/articles/20210311/">PythonでCloud Operationsの機能を使ってみる</a></td></tr><tr><td>3/12</td><td>村瀬善則</td><td><a href="/articles/20210312/">Text-to-Speechを試してみる</a></td></tr><tr><td>3/15</td><td>前原応光</td><td><a href="/articles/20210315/">Cloud Build を知ってみよう</a></td></tr><tr><td>3/16</td><td>松井宇宙</td><td><a href="/articles/20210316/">Firebaseで取得したログをBigQueryに連携してユーザー操作をトラッキングする</a></td></tr><tr><td>3/17</td><td>伊藤太斉</td><td><a href="/articles/20210317/">Google Cloud BuildpacksとCloud Runで簡単コンテナアプリ開発</a></td></tr><tr><td>3/18</td><td>関靖秀</td><td><a href="/articles/20210318/">GKE Autopilotを触ってみた</a></td></tr><tr><td>3/19</td><td>越島亮介</td><td><a href="/articles/20210319/">Anthosの話についていくための最低限の知識をまとめてみた</a></td></tr><tr><td>3/22</td><td>村田靖拓</td><td><a href="/articles/20210322/">Migrate for Anthos を基礎から学ぶ</a></td></tr><tr><td>3/23</td><td>齋場俊太朗</td><td><a href="/articles/20210323/">Cloud Spannerのローカル開発環境をdocker-composeでサクッと立ち上げる</a></td></tr></tbody></table><p>※記事の順が前後したり、取り扱う内容が変わることがありますが、ご了承ください。</p><p><strong>2021/03/23追記: 無事完走しました。ありがとうございます！</strong></p><h2 id="2021年の連載"><a href="#2021年の連載" class="headerlink" title="2021年の連載"></a>2021年の連載</h2><p>2021年の連載を以下の記事で紹介しておりますので、こちらもご覧ください、</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210118/index.html" data-iframely-url="//cdn.iframe.ly/4PM4Q7E"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>2021年は昨年より記事数を増やしてお送りします！GCPも活用事例が増えてきて導入、利用を検討されている方も多くなってきたと思います。是非こちらの連載を参考にしていただければと思います。</p><ul><li><a href="https://future-architect.github.io/articles/20200529/">春の入門祭り</a></li><li><a href="/tags/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E5%85%A5%E9%96%80/">インフラ入門</a></li><li><a href="/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a></li><li><a href="/tags/GoTips%E9%80%A3%E8%BC%89/">Go Tips連載</a></li><li><a href="/tags/GoCDK/">Go Cloud</a></li><li><a href="/tags/Auth0/">Auth0</a></li><li><a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go</a></li><li><a href="/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E8%A8%98%E4%BA%8B%E9%9B%86%E4%B8%AD%E6%8A%95%E7%A8%BF/">フロントエンド記事集中投稿</a></li><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">Serverless連載</a></li><li><a href="/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/">夏休み自由研究</a></li><li><a href="/tags/GlyphFeeds/">GlyphFeeds連載</a></li><li><a href="/tags/CNCF/">CNCF連載</a></li><li><a href="/articles/20201026/">秋の読書週間連載</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。TIGの&lt;a href=&quot;https://twitter.com/kaedemalu&quot;&gt;伊藤太斉&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;タイトル通り、GCP連載をテーマに連載を行います。&lt;/p&gt;
&lt;h2 id=&quot;GCP連載について&quot;&gt;&lt;a href=&quot;#GCP連載について</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Future Tech Night(第6弾：GCP x インフラ構築編)を開催しました</title>
    <link href="https://future-architect.github.io/articles/20210306/"/>
    <id>https://future-architect.github.io/articles/20210306/</id>
    <published>2021-03-05T15:00:00.000Z</published>
    <updated>2021-03-14T13:37:38.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの西田、村田です。先日2021.01.29にオンラインにてFuture Tech Nightという社外勉強会を開催しました。第6弾はGCP×インフラというテーマで事例を紹介しました。</p><ol><li><a href="https://future.connpass.com/event/177093/">メディア業界変革編</a></li><li><a href="https://future.connpass.com/event/179387/">MaaS ビジネス編</a></li><li><a href="https://future.connpass.com/event/185051/">船舶IoT Platform編</a></li><li><a href="https://future.connpass.com/event/188742/">Go x AWS スマート工場編</a></li><li><a href="https://future.connpass.com/event/195568/">AWS＆DataPlatform MaaSビジネス編</a></li><li><a href="https://future.connpass.com/event/201478/">GCP x インフラ構築編</a> <strong>←今回はここです</strong></li></ol><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><img src="/images/20210306/hero-cloud-infrastructure.png"><blockquote><p><a href="https://cloud.google.com/training/cloud-infrastructure">https://cloud.google.com/training/cloud-infrastructure</a> より</p></blockquote><p>勉強会は以下の2部構成で開催しました。</p><ol><li>目指せ生産性世界一へ！超スケールへの挑戦！（TIG西田）</li><li>しくじり先生 絶対に油断しちゃいけないマネージドサービス（TIG村田）</li></ol><p>続いて各パートの振り返りです。</p><h2 id="①目指せ生産性世界一へ！超スケールへの挑戦！"><a href="#①目指せ生産性世界一へ！超スケールへの挑戦！" class="headerlink" title="①目指せ生産性世界一へ！超スケールへの挑戦！"></a>①目指せ生産性世界一へ！超スケールへの挑戦！</h2><p><a href="/authors/%E8%A5%BF%E7%94%B0%E5%A5%BD%E5%AD%9D/">西田</a>からは、GCP のエンプラ利用、という体で発表しました。GCP というとML/データ分析などの印象が強く、その文脈でのGCP活用事例はよく目にしますが、エンプラ領域での活用は少ないんじゃないかと思っています。</p><p>まずはエンプラ領域で求められる要件を説明しました。システムの数が膨大なので、（セキュリティ監査などの対応も相まって）管理する方の視点が強く出てきます。</p><img src="/images/20210306/2021-03-10_103811.png" style="border:solid 1px #000000"><p>上記に対して設計例をベースにお話し、まとめとしてGCPできちんと構築が可能であるということを説明しました。</p><img src="/images/20210306/2021-03-10_103053.png" style="border:solid 1px #000000"><p>前半のエンプラ領域の課題設定がどこまで聞いてくださった方に伝わったのか心配ではありましたが、アンケート的には満足頂けた方が多く、とても嬉しかったです。聴いてくださった方、本当にありがとうございました:blush:</p><p>他にも GCP に関して、<a href="/articles/20200813/">ネットワークにピンポイントで深堀りしている記事</a>や、<a href="/articles/20200902/">資格関連の記事</a>も掲載しておりますので、よろしければ閲覧頂けると幸いです。</p><h2 id="②しくじり先生-絶対に油断しちゃいけないマネージドサービス"><a href="#②しくじり先生-絶対に油断しちゃいけないマネージドサービス" class="headerlink" title="②しくじり先生 絶対に油断しちゃいけないマネージドサービス"></a>②しくじり先生 絶対に油断しちゃいけないマネージドサービス</h2><p>このパートは<a href="/authors/%E6%9D%91%E7%94%B0%E9%9D%96%E6%8B%93/">村田</a>が担当しました。</p><p>タイトルを若干盛っているのは否めないですが(笑)、皆さんもお世話になっているマネージドサービスをネタに、私のしくじり体験を紹介しました。</p><img src="/images/20210306/image.png" style="border:solid 1px #000000"><p>GKEのPrivateクラスタ作成時にはVPC Peeringが自動的に作成されるんですが、そのPeeringはGCPコンソール上でユーザが編集・削除できてしまうので気をつけなければならない、というお話でした。</p><img src="/images/20210306/image_2.png" style="border:solid 1px #000000"><p>事の経緯は<a href="https://qiita.com/famipapamart/items/1a207f90d7dd9ec85d5d">Qiita：あなたの大切なGKEクラスタを崩壊させてしまう前に</a>にもまとめてあります。詳細興味湧いた方はぜひ覗いてみてください。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ご参加いただいた方々、ありがとうございました！</p><p>フューチャーでは引き続きFuture Tech Nightを中心に<a href="https://future.connpass.com/">様々なイベントを開催</a>しております。今後も皆様のご参加をお待ちしております。</p><p>connpassのフューチャーグループイベントのメンバー登録やTwitter(@future_recruit_)のフォローもお忘れなく📝</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200925/index.html" data-iframely-url="//cdn.iframe.ly/YpB7olh?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20201228/index.html" data-iframely-url="//cdn.iframe.ly/RWuBJfe?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの西田、村田です。先日2021.01.29にオンラインにてFuture Tech Nightという社外勉強</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="勉強会" scheme="https://future-architect.github.io/tags/%E5%8B%89%E5%BC%B7%E4%BC%9A/"/>
    
    <category term="TechNight" scheme="https://future-architect.github.io/tags/TechNight/"/>
    
    <category term="開催レポート" scheme="https://future-architect.github.io/tags/%E9%96%8B%E5%82%AC%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
  </entry>
  
  <entry>
    <title>インフラ入門ーインフラ要件定義編ー</title>
    <link href="https://future-architect.github.io/articles/20210305/"/>
    <id>https://future-architect.github.io/articles/20210305/</id>
    <published>2021-03-04T15:00:00.000Z</published>
    <updated>2021-03-14T02:43:06.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="１．はじめに"><a href="#１．はじめに" class="headerlink" title="１．はじめに"></a>１．はじめに</h1><p>こんにちは。テクノロジーイノベーショングループ所属の長澤です。<br><a href="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%95%E3%83%A9%E5%85%A5%E9%96%80/">インフラ入門</a>な連載記事を久々に書くべく、今回筆を取りました。<br><br>これまでのインフラ入門記事は、</p><ul><li><a href="https://future-architect.github.io/articles/20170109/">インフラ概要と当社でのインフラエンジニア像</a></li><li><a href="https://future-architect.github.io/articles/20170704/">ネットワークその１</a></li><li><a href="https://future-architect.github.io/articles/20191107/">ネットワークその２</a></li><li><a href="https://future-architect.github.io/articles/20200414/">ストレージ</a></li></ul><p>といった流れで来ていますが、今回はあえてピンポイントな内容から離れて、<strong>「インフラ要件定義」</strong>をテーマに書いてみたいと思います。</p><p>個人的な考え方・意見に基づくものが大半ですが、何かのお役に立てれば幸いです。</p><h1 id="２．インフラ要件定義・・・その前に"><a href="#２．インフラ要件定義・・・その前に" class="headerlink" title="２．インフラ要件定義・・・その前に"></a>２．インフラ要件定義・・・その前に</h1><img src="/images/20210305/building-blocks-659158_1280.jpg" class="img-middle-size"><p><a href="https://pixabay.com/ja/users/barni1-773830/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=659158">Bernd Hildebrandt</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=659158">Pixabay</a>からの画像</p><p>私は、インフラの要件定義のゴールは、以下の3つだと思っています。</p><p><strong>1. インフラでの提供機能・構成を固めること</strong><br><strong>2. システムの非機能要件を固めること</strong><br><strong>3. お買い物リスト・見積をまとめること</strong></p><p>進め方としては、1番と2番を並行で固めていき、最後に3番と基本設計フェーズの進め方をお客様と合意します。</p><p>そのうち、初めに手を付ける1番と2番のベースとなるのは、<strong>「システムで為したいこと」</strong>となります。<br>すなわち、1番と2番のアウトプットは、<strong>お客様の業務・経営課題の解決</strong>や、<strong>お客様の更なる成長</strong>といったような目的を、<strong>最良の形で達成するもの</strong>となっている必要があります。</p><p>要件定義フェーズでは、アプリケーションチームとインフラチームが分かれ、それぞれの対面のお客様と話して要件を詰めていくことが多いと思います。<br>その際、インフラ側は業務・アプリケーションを脇に置いて、インフラだけの実装・コストや採用技術にこだわってしまう・・・みたいなことがままあります。<br>その結果できあがるのは、お客様がシステムで為したいことから乖離した、例えば <strong>「性能的に業務にならない」</strong> とか、<strong>「スカスカでToo Much」</strong> のような残念なインフラです。</p><p>では、こういった残念な結果を回避するために、限られた時間の中で我々インフラチームはどうすべきか。</p><p>マネジャー層任せでなく、 <strong>アプリケーションチームと自ら積極的にコミュニケーション</strong>を取り、<strong>業務要件や機能要件をなるべく頭に入れておくこと</strong>に尽きると、私は思っています。</p><p>コーディング以外の全てを担当するインフラチーム、特にそのリーダは、アプリケーションチームの代弁者も担い、お客様のインフラチームに、<strong>「業務・機能要件に基づき、このインフラである」</strong>といったような説明ができるようになるべきです。<br>その説明が、いわゆる<strong>「システム化方針」</strong>の一部になります。</p><p>少し話はそれますが、お客様のアプリケーションチームとインフラチーム間の考え方や課題意識の相違や、コミュニケーション不全も「あるある」です。<br>上述のようなアプリケーションチームとの積極的なコミュニケーションは、その橋渡しを担い、プロジェクト全体が一枚岩となる一助にもなると思います。</p><p>ということで、インフラ要件定義のスタートラインは、<strong>アプリケーションチームとインフラチーム、すなわちプロジェクト全体のベクトルを合わせること</strong>であり、その結果として、プロジェクト全体が納得できるシステム化方針ができあがると、私は思っています。<br>（自分もまだまだできてないなぁと自戒しつつ・・・。）</p><p><strong>「業務アプリケーションのコードになる部分以外は全て自分のタスク」</strong>という意識で、自ら動いていきましょう。</p><h1 id="３．インフラ要件定義（前半戦）"><a href="#３．インフラ要件定義（前半戦）" class="headerlink" title="３．インフラ要件定義（前半戦）"></a>３．インフラ要件定義（前半戦）</h1><p>いよいよインフラ要件定義が始まります。</p><p>インフラ要件定義では、まずは要件定義のゴールに向け、</p><ul><li>インフラとして提供しなければいけない機能として何があるか（※本稿では、 <strong>「インフラ機能要件」</strong> と題します）</li><li>インフラとしてどのような構成・レベル感で作っていくべきか（※本稿では、<strong>「インフラ非機能要件」</strong> と題します）</li></ul><p>といった部分の仮説を立てます。</p><p>これらは、 <strong>「システムとして為したいこと」</strong> に基づく必要があるのは、前述の通りです。<br>そのため、アプリケーションチームの要件定義を受けて具体化や肉付け、または軌道修正等も発生するため、初めから精緻なものは不要です。</p><p>一方で、自分の中にゴールイメージがないと、首尾一貫した内容にならなかったり、そもそもお客様との会話にならなかったりもするので、<strong>要件定義を始める頃には何かしら仮説を持っておくことが必要</strong>です。</p><p>インフラ要件定義では、セッションの回数や濃度等も踏まえて、そうして作った仮説を適切な議論の単位（テーマ）に分割した上で、それぞれお客様と議論していきます。</p><h2 id="３－１．インフラ機能要件定義"><a href="#３－１．インフラ機能要件定義" class="headerlink" title="３－１．インフラ機能要件定義"></a>３－１．インフラ機能要件定義</h2><p>インフラ機能要件定義では、<strong>「業務アプリケーションが担う処理以外にどんな機能が必要か」</strong>といったところを明文化していきます。<br>その際、</p><ul><li>現在の持ち物で転用・相乗りできるもの</li><li>現在の持ち物で利用が必須のもの</li><li>現在の持ち物で不足しているもの</li></ul><p>なども明らかにしていきます。</p><p>例えば、</p><ul><li>既に認証基盤を持っているから、その認証基盤とSSOできるようにしてほしい</li><li>データベースはリッチなものを持っているので相乗りしてほしい</li><li>新たに全社の統合ジョブ基盤として使えるジョブ基盤を作ってほしい</li></ul><p>などでしょうか。</p><p>構成面や処理方式に関わることはもちろんですが、非機能面で引きずられる部分があったり、現行他システムへの影響を気にしなければいけなかったりもするので、<strong>「他システムと一緒に」</strong>系のお話には注意が必要です。（上の例は全部そうですね。）</p><p>また、<strong>「インフラ=業務アプリケーション以外全て」</strong>と捉えると、インフラ機能要件定義を抜け漏れなくやりきるのは難しいことです。<br>ゆえに、なるべく抜け漏れなく対応するための一助として、<strong>各種構成図（ハードウェア、ネットワーク、ソフトウェア、アーキテクチャなど）を早めに作成すべき</strong>と、私は考えています。<br>視覚的に訴えるものがあれば、自分たち・お客様ともに抜け漏れや流用資産の有無なども気づきやすいですし、ある程度網羅感を持って話ができるためです。</p><p>こちらも、Factとして既におさえている部分以外は仮説ベースで作り、ブラッシュアップしていければかまいません。<br>ただし、<strong>最終的なアウトプット資料の仮バージョン</strong>として作り、<strong>セッションのための資料</strong>はなるべく作らないようにしましょう。<br>これは「要件定義だから」というお話ではありませんが、有限の作業時間において最終的に捨てる資料を作るのは非効率です。<br>（もちろん、説明のための補足資料などはその限りではありません。）</p><p>ちなみに、当然ながら、お客様毎に構成や所有資産、欲しい機能などは異なるので、機能要件定義の方がよりお客様とのコミュニケーションが大切になるような気がします。</p><h3 id="３－２．インフラ非機能要件定義"><a href="#３－２．インフラ非機能要件定義" class="headerlink" title="３－２．インフラ非機能要件定義"></a>３－２．インフラ非機能要件定義</h3><p>一方のインフラ非機能要件定義については、整理のために便利なツールが既に存在します。<br>皆さん良くご存じの、**<a href="https://www.ipa.go.jp/sec/softwareengineering/std/ent03-b.html">非機能要求グレード2018(IPA)</a>**です。</p><p>非機能要件を網羅的に整理できることはもちろんですが、公開されている指標に基づいてスムースに議論することができるので、非常に有用性が高い代物です。<br>個人的には、非機能要件定義のベースはこれが全てと捉えても、事足りるかなとも思っています。<br>（逆に非機能要求グレードと全く違う軸で要件定義をしている方がいれば、教示いただけると幸いです。）</p><p>さて、非機能要求グレードをおさらいすると、大きく6つに分割して定義されています。</p><ul><li><strong>可用性</strong><ul><li>継続してサービスを提供し続けられるか</li></ul></li><li><strong>性能・拡張性</strong><ul><li>ピーク時や将来も見越して、パフォーマンスを維持できるか</li></ul></li><li><strong>運用・保守性</strong><ul><li>安定・安心してシステムを使い続けられるか</li></ul></li><li><strong>移行性</strong><ul><li>安全にローンチできるか</li></ul></li><li><strong>セキュリティ</strong><ul><li>様々なセキュリティリスクに対応できるか</li></ul></li><li><strong>環境・エコロジー</strong><ul><li>環境関連の制約や守るべき条約などがあるか</li></ul></li></ul><p>大項目の中身については本稿では触れませんが、各大項目に更に細分化された小項目が定義されており、様々な要求・要件を網羅的に明確化できます。</p><p>ただ、網羅的である一方で、細かすぎる部分や、似通った内容を複数箇所で定義することになっている部分もあります。<br>そのため、最初から最後まで須らく議論の俎上に載せると、おそらく要件定義フェーズのセッションが全てその議論で埋まってしまいます。</p><p>また、お客様の興味の大部分は、<strong>「システムを使って何を為すか」</strong>と、<strong>「そのために、なぜこの非機能レベルなのか」</strong>という部分なので、全ての項目を議論の俎上に載せることは、お客様からするとあまり意味がありません。</p><p>それにも関わらず、全ての項目に対して全力で議論をしようとすると、お客様に<strong>「この人は今回のシステムで重要視すべき点がわかってないのでは？」</strong>といった不信感を与えることにもなり得ます。<br>（多忙なスケジュールの中で調整したにも関わらず、ドキュメントを見れば済むような話を何時間も聞かされるストレスも想像に容易いですよね。。。）</p><p>そのような考えの元、私が非機能要求グレードを用いる場合は、 </p><p><strong>1.大項目レベルでの方針を立てて認識を合わせる</strong><br><strong>2.ポイントになると考えられる部分と、後々認識齟齬のダメージが大きそうなものを小項目レベルでピックアップして議論する</strong></p><p>といった2段構えの対応で要件を明確化するように、心がけています。</p><p>大項目レベルの方針は小項目の調整・相談などの際にも立ち戻れる軸となるように、以後ぶれないような形で定義・合意します。<br>また、小項目のうち、お客様にとってポイントとなるような部分については、方針の中にも文言を含めることが多いです。</p><p>一方、小項目レベルにおいては、お客様にとってポイントとなるようなものに加え、例えば性能面など後工程で調整・相談が入る可能性があるといった申し送り事項含め、合意することが大切です。<br>後は、「SLAなのかSLOなのか」といった、曖昧にしていると、後で双方が不幸になるような部分についてもしっかり合意します。</p><p>なお、議論の場で取り扱わなかった部分も、<strong>原則としてドキュメントベースでお客様とレベル感とその理由を共通認識化すること</strong>は並行で行います。<br>ドキュメントでのやり取りの中で、些末な部分含め、認識齟齬を抑制することが目的です。</p><p>ただし、例外もあります。<br>お客様の工数も有限なので、「ドキュメントベースでも確認不要」ということがお客様と合意できる項目は、そちらは割愛してしまってもかまわないと考えています。<br>（経験上、「環境・エコロジー」の大項目は、よくその対象になる気がします。）</p><p>お客様のインフラチームの方々は、全社のシステムを横断で見ていることがままあり、現行システムの運用保守対応や他案件の対応などで多忙なこともあります。<br>お互いの合意の元、正しく濃淡をつけて推進するように心がけます。</p><h2 id="４．インフラ要件定義（後半線）"><a href="#４．インフラ要件定義（後半線）" class="headerlink" title="４．インフラ要件定義（後半線）"></a>４．インフラ要件定義（後半線）</h2><p>インフラ要件定義の前半戦で、要件はほぼ固まっているので、後半戦ではお買い物リストや見積をまとめます。<br>今回は、<strong>オンプレミス環境</strong>の場合と、<strong>パブリッククラウド</strong>の場合で分けて記載したいと思います。</p><p>なお、ソフトウェアについては、どちらの場合も大きく差異はなく、お買い物リスト（ソフトウェア一覧）をまとめ、ライセンスやサポート料金などの見積を取得する形となります。</p><p>これらは比較的納期も短いので、調達含め大きな問題になることはないのですが、<strong>ライセンス体系や必要数</strong>については注意する必要があります。<br>ソフトウェアによっては、オンプレミスの物理マシンと、仮想マシンやパブリッククラウドでライセンスの必要数が変わってくるものがあります。</p><p>また、クライアント側のライセンスについても、手配を忘れないように注意が必要です。<br>加えて、既にお客様が持っているもので事足りる可能性もあるので、今一度ライセンス体系とお客様が本当に所有していないのかを確認します。</p><h3 id="４－１．オンプレミス環境の場合"><a href="#４－１．オンプレミス環境の場合" class="headerlink" title="４－１．オンプレミス環境の場合"></a>４－１．オンプレミス環境の場合</h3><p>オンプレミス環境でのシステム構築の場合、作成した構成案からお買い物リスト（ハードウェア一覧）をまとめ、見積を取得します。</p><p>なお、在庫状況によっては<strong>納期が数か月</strong>かかることもあるので、余裕を持って見積を取り、そして発注することが必要です。<br>（詳細設計・構築の棲み分けの考え方や案件規模にもよりますが、）個人的には、基本設計フェーズの早めのタイミングで発注プロセスが回せていないと、構築スケジュールへの影響が心配になります。</p><p>また、その納期の都合もあり、予定稼働期間（※5年or7年が多いです）の間、要件を満たせるハードウェアを発注する必要があります。<br>ゆえに、多くの場合は、<strong>現在のビジネス規模に対しては過剰なリソースを持つハードウェアや、十二分にリスクに備えたハードウェア</strong>を購入します。</p><p>その特性上、あまりにリッチな要件をベースにしてしまうと、予算をオーバーするだけでなく、基盤更改時にもリソースが過剰に余っていたという残念なことにもなり得るので、要件の妥当性について、よりしっかりとチェックする必要があると思います。</p><p>その妥当性を考えるときに立ち返るのも、 <strong>「システムを使って何を為すか」</strong>です。</p><ul><li>企業の基幹業務を担うシステムだから、可用性の面では妥協できないが、業務のピーク性があるわけでもないので性能・拡張性は、目をつぶれる。</li><li>業務側で運用回避できるから、可用性の面は妥協できるが、セキュアな情報を扱っているからセキュリティ面は妥協できない。</li></ul><p>などなど、お客様毎、そしてシステム毎に、本当に重要な部分は違うはずです。<br>そのあたりを汲み取り、お客様にとってコスト面も含めた最適・最良の構成で合意し、見積を取得するようにします。<br><br></p><p>余談にはなりますが、業務系と直接関係ない<strong>メンテナンス用などのネットワーク回線の引き込み</strong>に関しての見積・調達プロセスは、忘れがちな気がするので注意しましょう。</p><p>（実際はそんなにかからないことが多いですが、）納期として2か月程度見込んでおく必要があり、手配が漏れると、構築期間中ずっとデータセンタに行って作業することになります。</p><p>ハードウェアレイヤの作業は当然現地作業が必要ですが、例えばミドルウェアやソフトウェアの設定作業などは、必ずしも現地でやる必要はないはずです。<br>にもかかわらず、わざわざデータセンタに出向いて作業するとなると、移動時間の工数などもバカになりません。</p><h3 id="４－２．パブリッククラウド環境の場合"><a href="#４－２．パブリッククラウド環境の場合" class="headerlink" title="４－２．パブリッククラウド環境の場合"></a>４－２．パブリッククラウド環境の場合</h3><p>一方、パブリッククラウド環境の場合は、クラウドベンダーの見積ツールが公開されているので、作成した構成案を元にそちらで見積を行います。</p><blockquote><p>○AWSの場合・・・<a href="https://calculator.aws/#/">AWS Pricing Calculator</a><br>○Azureの場合・・・<a href="https://azure.microsoft.com/ja-jp/pricing/calculator/">料金計算ツール</a><br>○GCPの場合・・・<a href="https://cloud.google.com/products/calculator?hl=ja">Google Cloud Pricing Calculator</a></p></blockquote><p>予約インスタンスを使うのか、従量課金インスタンスを使うのかといった部分や、各インスタンスの稼働時間をどれくらいと想定するか等、インフラ要件定義前半戦で議論が漏れていたものがあれば、お客様と追加で認識合わせをします。</p><p>なお、パブリッククラウド環境においても、要件の妥当性をチェックする必要はあります。<br>ただ、必要に応じてリソースを追加したり、リスクに備えたサービスを追加したりということが可能なので、<strong>予定稼働期間を見越した要件</strong>と、<strong>初回稼働日時点での要件</strong>を分けて整理し、それぞれの構成案を考えることで、少なくとも初回稼働日時点でToo Muchな基盤となることは抑止できるはずです。</p><h2 id="５．さいごに"><a href="#５．さいごに" class="headerlink" title="５．さいごに"></a>５．さいごに</h2><p><strong>「インフラ要件定義」</strong>をテーマに、その中で行う作業や、個人的に意識していることや考えていることを、つらつらと書きました。</p><p>要件定義は、お客様のために何が最良なのかを考え抜き、そしてお客様と共に現実のものにしていく最初の数歩のフェーズです。</p><p>フワフワしたものを形にしていくフェーズなので難しい部分もありますが、<strong>「システムを使って何を為すか」</strong> を念頭に置きながら、関係者と活発にコミュニケーションをとり、プロジェクト全体で納得できる要件定義ができるように頑張りたいものです。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;１．はじめに&quot;&gt;&lt;a href=&quot;#１．はじめに&quot; class=&quot;headerlink&quot; title=&quot;１．はじめに&quot;&gt;&lt;/a&gt;１．はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。テクノロジーイノベーショングループ所属の長澤です。&lt;br&gt;&lt;a href=&quot;https://fu</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="入門" scheme="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
    <category term="要件定義" scheme="https://future-architect.github.io/tags/%E8%A6%81%E4%BB%B6%E5%AE%9A%E7%BE%A9/"/>
    
    <category term="infrastructure" scheme="https://future-architect.github.io/tags/infrastructure/"/>
    
  </entry>
  
  <entry>
    <title>mxGraphで階層グラフを可視化する</title>
    <link href="https://future-architect.github.io/articles/20210304/"/>
    <id>https://future-architect.github.io/articles/20210304/</id>
    <published>2021-03-03T15:00:00.000Z</published>
    <updated>2021-03-14T02:43:06.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGコアテクノロジーユニットの平岡です。</p><p>この記事は、<a href="/articles/20210303/">Vis Networkで階層グラフを可視化する</a>の続編となります。未読の方は、是非そちらの記事もご覧下さい。</p><p>前回の記事では、JavaScript製のグラフ可視化ライブラリについて概観しました。また、その1つであるVis Networkについて紹介し、階層グラフの可視化を行いました。</p><p>Vis Networkはcanvasでの高速な描画が可能で<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>、階層グラフをライトに表示・加工する場合は非常に有用ですが、大きな階層グラフを表示する場合にエッジの交差が多くなってしまうという課題があることを見てきました。</p><p>この記事では上述の課題を解決するために<a href="https://github.com/jsGraph/mxgraph">mxGraph</a>を用いて階層グラフの可視化を行います。mxGraphは階層グラフのレイアウト計算にSugiyama Algorithm<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>を利用しており、階層グラフを綺麗に表示することが可能です。下の画像は前回の記事で描画した階層グラフを両ライブラリ間で比較したものですが、mxGraphの方がエッジの交差が少なく見やすいレイアウトになっていることがわかります。</p><p><img src="/images/20210304/image1.png" alt="vis-vs-mxgraph.png"></p><h1 id="mxGraphとは"><a href="#mxGraphとは" class="headerlink" title="mxGraphとは"></a>mxGraphとは</h1><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>mxGraphには以下のような特徴があります。</p><ul><li>JavaScript製のグラフ可視化ライブラリ</li><li>描画方式はSVG</li><li><a href="https://www.diagrams.net/">diagrams.net(旧 draw.io)</a>で利用されています</li><li>Apache License 2.0</li><li>自動レイアウト計算にSugiyama Algorithmを利用しており、綺麗な階層グラフを表示できます</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p><a href="https://github.com/jgraph/mxgraph">本家</a>は2020年11月9日にメンテ終了し、<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>現在は<a href="https://github.com/jsGraph/mxgraph">有志</a>がメンテを行っているようです。</p><h1 id="mxGraphの使い方"><a href="#mxGraphの使い方" class="headerlink" title="mxGraphの使い方"></a>mxGraphの使い方</h1><h2 id="階層グラフの描画"><a href="#階層グラフの描画" class="headerlink" title="階層グラフの描画"></a>階層グラフの描画</h2><p>mxGraphの自動レイアウト計算を利用して階層グラフを描画してみましょう。</p><ul><li>紹介するソースコードの全体は<a href="https://jsfiddle.net/85pLye7h/">Edit fiddle - JSFiddle - Code Playground</a>で確認できます。こちらと比較しながら読み進めると良いです。</li><li>より詳しく知りたい方は、本家の以下コンテンツをご覧になってみてください。<ul><li><a href="https://jgraph.github.io/mxgraph/docs/manual.html">mxGraph User Manual - JavaScript Client</a> - mxGraphのマニュアルです。</li><li><a href="https://jgraph.github.io/mxgraph/javascript/index.html">JavaScript Diagram Editor</a> - mxGraphを利用したサンプルページが豊富に紹介されています。</li><li><a href="https://jgraph.github.io/mxgraph/docs/js-api/files/index-txt.html">API Specification</a> - mxGraphのAPIドキュメントです。</li></ul></li></ul><p>まずは、グラフを表示する領域を確保し、<code>mxGraph</code>のインスタンスを生成します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// グラフを表示する領域を確保</span></span><br><span class="line"><span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;container&#x27;</span>)</span><br><span class="line"><span class="comment">// グラフのインスタンス生成</span></span><br><span class="line"><span class="keyword">const</span> graph = <span class="keyword">new</span> mxGraph(container)</span><br></pre></td></tr></table></figure><p><code>graph.getDefaultParent()</code>はノードやエッジを追加する際に必要(後述)なので取得しておきます。また、階層グラフを自動レイアウトで計算するために、<code>mxHierarchicalLayout</code>のインスタンスを生成します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// グラフにノードやエッジを追加する際に必要</span></span><br><span class="line"><span class="keyword">const</span> parent = graph.getDefaultParent()</span><br><span class="line"><span class="comment">// 今回は階層グラフを自動レイアウトで描画したいため、レイアウトのインスタンスを生成</span></span><br><span class="line"><span class="keyword">const</span> layout = <span class="keyword">new</span> mxHierarchicalLayout(graph)</span><br></pre></td></tr></table></figure><p>最後に、ノードやエッジの追加とレイアウト計算を行いましょう。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// グラフの形状やデザインの変更を行う(グラフモデルを変更する)際は</span></span><br><span class="line"><span class="comment">// beginUpdate -&gt; グラフモデル変更 -&gt; endUpdate の順に行う</span></span><br><span class="line">graph.getModel().beginUpdate()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// tryブロックの中でグラフの形状やデザインの変更を行う</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// ノード追加</span></span><br><span class="line"><span class="keyword">const</span> v1 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;1&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v2 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;2&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v3 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;3&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v4 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;4&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v5 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;5&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v6 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;6&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v7 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;7&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v8 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;8&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v9 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;9&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v10 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;10&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v11 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;11&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v12 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;12&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line">  </span><br><span class="line"><span class="comment">// エッジ追加</span></span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v1, v3, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v1, v2, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v2, v4, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v2, v5, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v3, v6, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v3, v8, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v6, v7, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v6, v9, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v4, v10, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v4, v11, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v5, v12, <span class="literal">null</span>)</span><br><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v3, v4, <span class="literal">null</span>)</span><br><span class="line"><span class="comment">// 追加したノード・エッジに基づいてレイアウトの自動計算を行う</span></span><br><span class="line">layout.execute(parent)</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">graph.getModel().endUpdate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tryブロックの中身を詳しく見てみましょう。ノードの追加は</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> v1 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;1&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p>のように行います。各引数の説明は以下のとおりです。</p><ul><li>第1引数：先程取得した<code>parent</code></li><li>第2引数：ノードを一意に識別するためのID(指定なしの場合は自動的に割り当て)</li><li>第3引数：ノードのラベル</li><li>第4,5引数：ノードのx座標・y座標(後でレイアウト自動計算する場合はダミーの値でOK)</li><li>第6,7引数：ノードの幅・高さ</li><li>第8引数：ノードのスタイル</li></ul><p>また、エッジの追加は</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph.insertEdge(parent, <span class="literal">null</span>, <span class="literal">null</span>, v1, v3, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p>のように行います。各引数の説明は以下のとおりです。</p><ul><li>第1引数：先程取得した<code>parent</code></li><li>第2引数：エッジを一意に識別するためのID(指定なしの場合は自動的に割り当て)</li><li>第3引数：エッジのラベル</li><li>第4,5引数：エッジの始点・終点</li><li>第6引数：エッジのスタイル</li></ul><p>最後に、レイアウト計算を呼び出します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 追加したノード・エッジに基づいてレイアウトの自動計算を行う</span></span><br><span class="line">layout.execute(parent)</span><br></pre></td></tr></table></figure><p>以上で、画像のように階層グラフが描画できました。</p><p><img src="/images/20210304/image2.png" alt="graph.png"></p><h2 id="ノードの形状や色の変更"><a href="#ノードの形状や色の変更" class="headerlink" title="ノードの形状や色の変更"></a>ノードの形状や色の変更</h2><p>続いて、ノードの形状や色をカスタマイズしてみましょう。<br>(紹介するソースコード全体は<a href="https://jsfiddle.net/4qnz1c7g/">Edit fiddle - JSFiddle - Code Playground</a>で確認できます。)</p><p><code>graph.insertVertex()</code>の第8引数でノードのstyleを指定できます。また、styleに名前を付けて適用させることも可能です。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ノード追加</span></span><br><span class="line"><span class="keyword">const</span> v1 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;1&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">&#x27;shape=cylinder&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> v2 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;2&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">&#x27;shape=triangle&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> v3 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;3&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">&#x27;shape=cloud&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> v4 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;4&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">&#x27;shape=hexagon&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> v5 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;5&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">&#x27;shape=rectangle&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> v6 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;6&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">&#x27;shape=ellipse&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> v7 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;7&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">&#x27;shape=doubleEllipse&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> v8 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;8&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">&#x27;shape=rhombus&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> v9 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;9&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">&#x27;fillColor=orange&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// styleに名前をつけることもできる</span></span><br><span class="line"><span class="keyword">const</span> defaultNodeStyle = graph.getStylesheet().getDefaultVertexStyle()</span><br><span class="line"><span class="keyword">const</span> style = mxUtils.clone(defaultNodeStyle)</span><br><span class="line">style[<span class="string">&#x27;shape&#x27;</span>] = <span class="string">&#x27;actor&#x27;</span></span><br><span class="line">graph.getStylesheet().putCellStyle(<span class="string">&#x27;myFavoriteStyle&#x27;</span>, style)</span><br><span class="line"><span class="keyword">const</span> v10 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;10&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="string">&#x27;myFavoriteStyle&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> v11 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;11&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">const</span> v12 = graph.insertVertex(parent, <span class="literal">null</span>, <span class="string">&#x27;12&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="literal">null</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/20210304/image3.png" alt="image.png"></p><h2 id="tooltip"><a href="#tooltip" class="headerlink" title="tooltip"></a>tooltip</h2><p>次は、ノードやエッジにマウスを当てた際にtooltipを表示させてみましょう。</p><p>(紹介するソースコード全体は<a href="https://jsfiddle.net/9a8cd50w/">Edit fiddle - JSFiddle - Code Playground</a>で確認できます。)</p><p>まずは、tooltipを有効にしましょう。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tooltipを有効にします</span></span><br><span class="line">graph.setTooltips(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>すると、ノードのラベルがtooltipで表示されました。</p><p><img src="/images/20210304/image4.png" alt="tooltip-default.png"></p><p>ラベル以外のテキストをtooltipで表示させたい場合は、<code>graph.getTooltipForCell</code>メソッドをoverrideすれば良いです。<br>(mxGraphでは、ノードやエッジを<code>mxCell</code>クラスで扱います。<code>graph.getTooltipForCell</code>は、この<code>mxCell</code>を引数として表示したいtooltipを返すメソッドです。デフォルトでは先程のようにラベルがtooltipで表示されます)</p><p><code>cell</code>がエッジか否かの判定は、<code>graph.getModel().isEdge(cell)</code>で行うことができます。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tooltipで表示させたい内容を設定します</span></span><br><span class="line">graph.getTooltipForCell = <span class="function"><span class="params">cell</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (graph.getModel().isEdge(cell)) &#123;</span><br><span class="line">    <span class="keyword">const</span> srcNodeLabel = cell.source.getValue()</span><br><span class="line">    <span class="keyword">const</span> dstNodeLabel = cell.target.getValue()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`this edge is directed from node <span class="subst">$&#123;srcNodeLabel&#125;</span> to node <span class="subst">$&#123;dstNodeLabel&#125;</span>`</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> nodeLabel = cell.getValue()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`node <span class="subst">$&#123;nodeLabel&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/20210304/image5.gif" alt="tooltip.gif"></p><h2 id="イベント"><a href="#イベント" class="headerlink" title="イベント"></a>イベント</h2><p>イベント処理の例として、クリックしたノードの色をオレンジに変更してみましょう。</p><p>(紹介するソースコード全体は<a href="https://jsfiddle.net/5p6wnfsv/">Edit fiddle - JSFiddle - Code Playground</a>で確認できます。)</p><p><code>graph.addListener</code>メソッドでイベント発火時の処理を設定することができます。<br>イベント一覧は<a href="https://jgraph.github.io/mxgraph/docs/js-api/files/util/mxEvent-js.html">mxEvent</a>に記載されています。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// クリックしたノードをオレンジ色に変更します</span></span><br><span class="line">graph.addListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">sender, evt</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> cell = evt.getProperty(<span class="string">&#x27;cell&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (graph.getModel().isVertex(cell)) &#123;</span><br><span class="line">    graph.setCellStyles(<span class="string">&#x27;fillColor&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, [cell])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/images/20210304/image6.gif" alt="event.gif"></p><h2 id="SVG形式でexport"><a href="#SVG形式でexport" class="headerlink" title="SVG形式でexport"></a>SVG形式でexport</h2><p>描画したグラフをexportすることができます。<br>SVG形式でexportする例を<a href="https://jsfiddle.net/2jLvt46e/">Edit fiddle - JSFiddle - Code Playground</a>で確認できます。</p><p>ブラウザ上で描画したグラフをファイルとして保存できるのは凄く便利ですね。<br>SVG形式なので、業務で扱うような大きいグラフでも潰れずに表示することができるのも良いです。<br>(Vis Networkの場合はcanvasで描画しているため、ファイル出力してもブラウザで見えている範囲だけの画像となり、大きなグラフを鮮明に表示することが難しかったです)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// グラフをexportするためのボタンを配置します</span></span><br><span class="line"><span class="keyword">const</span> button = <span class="built_in">document</span>.createElement(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">mxUtils.write(button, <span class="string">&#x27;export&#x27;</span>)</span><br><span class="line">mxEvent.addListener(button, <span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  exportGraph()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;export-button&#x27;</span>).appendChild(button)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exportGraph</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> svg = createSvg()</span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([svg], &#123;</span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;svg/plain&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  link.href = <span class="built_in">window</span>.URL.createObjectURL(blob)</span><br><span class="line">  link.download = <span class="string">&#x27;graph.svg&#x27;</span></span><br><span class="line">  link.click()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSvg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> bounds = graph.getGraphBounds()</span><br><span class="line">  <span class="keyword">const</span> offset = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// SVGのルート要素を作る</span></span><br><span class="line">  <span class="keyword">const</span> root = mxUtils.createXmlDocument().createElementNS(mxConstants.NS_SVG, <span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">  root.setAttribute(<span class="string">&#x27;xmlns&#x27;</span>, mxConstants.NS_SVG)</span><br><span class="line">  root.setAttribute(<span class="string">&#x27;xmlns:xlink&#x27;</span>, mxConstants.NS_XLINK)</span><br><span class="line">  root.setAttribute(<span class="string">&#x27;width&#x27;</span>, <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.ceil(bounds.width) + <span class="number">2</span>*offset&#125;</span>px`</span>)</span><br><span class="line">  root.setAttribute(<span class="string">&#x27;height&#x27;</span>, <span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.ceil(bounds.height) + <span class="number">2</span>*offset&#125;</span>px`</span>)</span><br><span class="line">  root.setAttribute(<span class="string">&#x27;version&#x27;</span>, <span class="string">&#x27;1.1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> svgCanvas = <span class="keyword">new</span> mxSvgCanvas2D(root)</span><br><span class="line">  <span class="comment">// グラフが端に寄らないように平行移動する</span></span><br><span class="line">  svgCanvas.translate(offset, offset)</span><br><span class="line">  <span class="keyword">const</span> imgExport = <span class="keyword">new</span> mxImageExport()</span><br><span class="line">  <span class="comment">// グラフを記述</span></span><br><span class="line">  imgExport.drawState(graph.getView().getState(graph.getModel().root), svgCanvas)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mxUtils.getPrettyXml(root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Vis-Network-vs-mxGraph"><a href="#Vis-Network-vs-mxGraph" class="headerlink" title="Vis Network vs mxGraph"></a>Vis Network vs mxGraph</h1><p>業務でVis NetworkとmxGraphを両方使ってみて大きく異なっていた点を紹介します。</p><h2 id="階層グラフのエッジ間の交差"><a href="#階層グラフのエッジ間の交差" class="headerlink" title="階層グラフのエッジ間の交差"></a>階層グラフのエッジ間の交差</h2><p>冒頭で書いたとおりです。mxGraphの方がエッジ間の交差が少なく、見やすいレイアウトになっています。</p><p><img src="/images/20210304/image7.png" alt="vis-vs-mxgraph.png"></p><h2 id="エッジがノードを貫通する場合"><a href="#エッジがノードを貫通する場合" class="headerlink" title="エッジがノードを貫通する場合"></a>エッジがノードを貫通する場合</h2><p>下の画像はVis Networkの自動レイアウトで階層グラフを描画したものです。<br>(ソースコードは<a href="https://jsfiddle.net/jyzb864e/">こちら</a>)</p><p>このグラフのオレンジ色のエッジに注目してみましょう。</p><p>一見すると、ノード1からノード3へ伸びるエッジとノード3からノード10へ伸びるエッジがあるように見えます。<br>しかし、ソースコードを見ると分かる通り、実際には後者のエッジはノード1からノード10へ伸びたものです。道中でノード3を貫通しているために、あたかもノード3から伸びているように見えてしまいます。<br>このように、Vis Networkにおいてエッジがノードを貫通する場合にはエッジの始点がどこなのか判別しにくくなるという課題があります。</p><p><img src="/images/20210304/image8.png" alt="image.png"></p><p>mxGraphの場合はどうでしょうか。下の画像は、上と同じ階層グラフをmxGraphの自動レイアウトで描画したものです。レイアウト計算が賢いため、そもそもエッジがノードに重ならずに描画されました。(ソースコードは<a href="https://jsfiddle.net/gtprnuow/">こちら</a>)</p><p><img src="/images/20210304/image9.png" alt="image.png"></p><p>比較のために、mxGraphで自動レイアウトを使わずに描画し、エッジがノードと重なる例を見てみます。<br>以下のグラフはノード1からノード2、ノード1からノード3へのエッジが出ています。ノード1からノード3へのエッジは道中でノード2の上を通るので、エッジの始点の判別がしやすいことがわかります。<br>(ソースコードは<a href="https://jsfiddle.net/hgdez7y1/">こちら</a>)</p><p><img src="/images/20210304/image10.png" alt="image.png"></p><h2 id="描画速度"><a href="#描画速度" class="headerlink" title="描画速度"></a>描画速度</h2><p>描画速度はどうでしょうか？<br>Vis Networkはcanvas, mxGraphはSVGで描画しているため、Vis Networkの方が速いことが予想されます。以下では簡単に性能比較を行ってみます。</p><ul><li>下記のような一本道のグラフを自動レイアウトで描画するために要する時間を色々なノード数(10個,100個,1000個,2000個,4000個の5種類)に対して計測する</li></ul><p><img src="/images/20210304/image11.png" alt="image.png"></p><ul><li>計測値は、3回測定して平均を取ったもの(単位：ミリ秒)を採用する</li></ul><p>計測結果は以下のようになりました。</p><table><thead><tr><th align="right">ノード数</th><th align="right"><a href="https://jsfiddle.net/8qmn6fyw/">Vis NetWork</a></th><th align="right"><a href="https://jsfiddle.net/f35o29pu/">mxGraph</a></th></tr></thead><tbody><tr><td align="right">10</td><td align="right">33.40</td><td align="right">43.12</td></tr><tr><td align="right">100</td><td align="right">103.52</td><td align="right">181.98</td></tr><tr><td align="right">1000</td><td align="right">742.94</td><td align="right">1491.80</td></tr><tr><td align="right">2000</td><td align="right">1429.83</td><td align="right">2906.09</td></tr><tr><td align="right">4000</td><td align="right">-</td><td align="right">6900.84</td></tr></tbody></table><p>ノード数が2000以下の範囲では、Vis Networkの方が概ね2倍程度速く描画できることがわかりました。</p><p>なお、Vis Networkでノード数4000の場合は<code>Maximum call stack size exceeded</code>エラーが出たため空欄になっています。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p><p>mxGraphの描画速度を改善することはできないのでしょうか？<br>実は、何行かコードに追加するだけで、ある程度の改善が可能です。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></p><p>追加したコードとその周辺を以下に載せます。次の2つの改善を行っています。</p><ul><li>グラフモデルの更新が完了したときに初めて描画を行うようにする</li><li><code>ignoreStringSize</code>を有効にする</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 高速化その1：グラフモデル更新中は描画をOFFにする</span></span><br><span class="line">graph.getView().setRendering(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 高速化その2：ignoreStringSizeを有効にする</span></span><br><span class="line">mxText.prototype.ignoreStringSize = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// グラフの形状やデザインの変更を行う(グラフモデルを変更する)際は</span></span><br><span class="line"><span class="comment">// beginUpdate -&gt; グラフモデル変更 -&gt; endUpdate の順に行う</span></span><br><span class="line">graph.getModel().beginUpdate()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// tryブロックの中でグラフの形状やデザインの変更を行う</span></span><br><span class="line">  <span class="comment">// (中略)</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  graph.getModel().endUpdate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 描画をオンに戻す</span></span><br><span class="line">graph.getView().setRendering(<span class="literal">true</span>)</span><br><span class="line">graph.refresh()</span><br></pre></td></tr></table></figure><p>高速化を施したmxGraphも含めて、計測結果を再掲します。Vis Networkの1.5倍程度まで改善することができました。</p><table><thead><tr><th align="right">ノード数</th><th align="right"><a href="https://jsfiddle.net/8qmn6fyw/">Vis NetWork</a></th><th align="right"><a href="https://jsfiddle.net/f35o29pu/">mxGraph(高速化なし)</a></th><th align="right"><a href="https://jsfiddle.net/n0Lduaz2/">mxGraph(高速化あり)</a></th></tr></thead><tbody><tr><td align="right">10</td><td align="right">33.40</td><td align="right">43.12</td><td align="right">31.78</td></tr><tr><td align="right">100</td><td align="right">103.52</td><td align="right">181.98</td><td align="right">144.06</td></tr><tr><td align="right">1000</td><td align="right">742.94</td><td align="right">1491.80</td><td align="right">1128.03</td></tr><tr><td align="right">2000</td><td align="right">1429.83</td><td align="right">2906.09</td><td align="right">2122.71</td></tr><tr><td align="right">4000</td><td align="right">-</td><td align="right">6900.84</td><td align="right">3477.48</td></tr></tbody></table><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>mxGraphの自動レイアウトを用いて階層グラフの可視化を行い、複雑な階層グラフが綺麗に描画できることを紹介しました。</p><p>また、Vis NetworkとmxGraphの両方を業務で扱ってみて得た知見についても紹介しました。</p><p>コアテクノロジーユニットでは、現在チームメンバーを募集しています。<br>私たちと一緒にテクノロジーで設計、開発、テストの高品質・高生産性を実現する仕組みづくりをしませんか？</p><p>興味がある方はお気軽に技術ブログTwitterや会社採用HPへ、連絡をお待ちしております。</p><p><a href="https://www.future.co.jp/recruit/">https://www.future.co.jp/recruit/</a></p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210303/index.html" data-iframely-url="//cdn.iframe.ly/UYpIJsS?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200901/index.html" data-iframely-url="//cdn.iframe.ly/MB3R2AH?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">フューチャー発のOSSであるCheetah Gridも高速に描画するためにcanvasを使用しています。興味がある方は<a href="/articles/20200901/">Vue.jsで最速に始めるCheetah Grid</a>や<a href="/articles/20200924/">CheetahGrid+Vue.jsをエンプラで使ってみた</a>を御覧ください</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="http://www.orsj.or.jp/archive2/or63-1/or63_1_20.pdf">階層グラフの可視化</a>や <a href="https://en.wikipedia.org/wiki/Layered_graph_drawing">Layered graph drawing - Wikipedia</a>などに詳しい説明があります。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">アーカイブされ、issueが閲覧できなくなってしまいました…</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;">実装の詳細は確認できていませんが、自動レイアウト計算の実装で再帰関数を使っており、再帰の深さが一定値を超えたためエラーが出たと推測されます。</span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;">この記事で紹介する改善策は以前に本家のissueで見かけて知ったのですが、現在は閲覧できなくなってしまいました...</span><a href="#fnref:6" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGコアテクノロジーユニットの平岡です。&lt;/p&gt;
&lt;p&gt;この記事は、&lt;a href=&quot;/articles/20</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
    <category term="可視化" scheme="https://future-architect.github.io/tags/%E5%8F%AF%E8%A6%96%E5%8C%96/"/>
    
    <category term="mxGraph" scheme="https://future-architect.github.io/tags/mxGraph/"/>
    
  </entry>
  
  <entry>
    <title>Vis Networkで階層グラフを可視化する</title>
    <link href="https://future-architect.github.io/articles/20210303/"/>
    <id>https://future-architect.github.io/articles/20210303/</id>
    <published>2021-03-02T15:00:00.000Z</published>
    <updated>2021-03-14T02:43:06.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、TIG コアテクノロジーユニットの山田です。</p><p>だいぶ前のことですが業務で階層グラフを可視化する機会があったので、<strong>階層グラフの可視化方法</strong> について共有させていただこうと思います。</p><blockquote><p>グラフとは関係を抽象化したもので、線グラフや棒グラフなどのチャートとは異なる概念です。グラフはノードとエッジで表現され、例えばSNSでのつながりを表すソーシャルグラフや関数の呼び出し関係を表すコールグラフなど様々な関係をグラフで表現できます。<br>（詳細は<a href="https://ja.wikipedia.org/wiki/%E3%82%B0%E3%83%A9%E3%83%95_(%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0)">グラフ (データ構造) - Wikipedia</a>を御覧ください）</p></blockquote><p>グラフの可視化ツールと言えば<a href="https://graphviz.org/">Graphviz</a>が有名ですが、サーバ側にバイナリ入れてプロセス起動する形になってしまうのでWebアプリでの利用には少し不向きです。</p><p>Webアプリで利用しやすい、JavaScript製のライブラリの代表的なプロダクトは例えば以下があります。</p><table><thead><tr><th></th><th><a href="https://github.com/visjs/vis-network">vis-network</a></th><th><a href="https://github.com/jsGraph/mxgraph">mxGraph</a></th><th><a href="https://d3js.org/">D3.js</a></th><th><a href="https://mermaid-js.github.io/mermaid/#/">mermaid</a></th></tr></thead><tbody><tr><td>描画方式</td><td>canvas</td><td>SVG</td><td>canvas / SVG</td><td>SVG</td></tr><tr><td>特徴</td><td>高性能</td><td>diagrams.net (旧 draw.io) で使われている</td><td>多機能</td><td>GitLabで標準利用可</td></tr><tr><td>ライセンス</td><td>Apache License 2.0 / MIT License</td><td>Apache License 2.0</td><td>修正BSDライセンス</td><td>MIT License</td></tr></tbody></table><p>この中で、本記事でははVis Networkを用いて階層グラフを表示する方法をご紹介します。</p><p>mxGraphについて<a href="/articles/20210304/">次の記事</a>で紹介する予定ですのでお楽しみに。</p><h2 id="Vis-Networkとは"><a href="#Vis-Networkとは" class="headerlink" title="Vis Networkとは"></a>Vis Networkとは</h2><p>vis.jsという可視化ライブラリに含まれるグラフ可視化ライブラリです。その中でもVis Networkはグラフの可視化に特化したライブラリで、<a href="https://visjs.github.io/vis-network/examples/">Vis Network Examples</a>にあるように様々なグラフを描画することができます。Vis Networkはcanvasに描画するため描画が高速で、パフォーマンスが要求される場面に有用です。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><h1 id="Vis-Networkの使い方"><a href="#Vis-Networkの使い方" class="headerlink" title="Vis Networkの使い方"></a>Vis Networkの使い方</h1><p>Vis Networkでは表示するグラフの元となるノード、エッジ、オプションを定義する必要があります。</p><h2 id="ノード定義"><a href="#ノード定義" class="headerlink" title="ノード定義"></a>ノード定義</h2><p>下記のようにノードを定義することができます。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nodes = <span class="keyword">new</span> vis.DataSet([</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">label</span>: <span class="string">&#x27;1&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">label</span>: <span class="string">&#x27;2&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">label</span>: <span class="string">&#x27;3&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">label</span>: <span class="string">&#x27;4&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">label</span>: <span class="string">&#x27;5&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">label</span>: <span class="string">&#x27;6&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">label</span>: <span class="string">&#x27;7&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">label</span>: <span class="string">&#x27;8&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">9</span>, <span class="attr">label</span>: <span class="string">&#x27;9&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">&#x27;10&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">11</span>, <span class="attr">label</span>: <span class="string">&#x27;11&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">label</span>: <span class="string">&#x27;12&#x27;</span> &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>ノードに設定可能な属性一覧は<a href="https://visjs.github.io/vis-network/docs/network/nodes.html">vis.js - Nodes documentation.</a>をご参照ください。</p><h2 id="エッジ定義"><a href="#エッジ定義" class="headerlink" title="エッジ定義"></a>エッジ定義</h2><p><code>from</code>, <code>to</code>で指定したノードIDをつなぐエッジを作成します。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> edges = <span class="keyword">new</span> vis.DataSet([</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">1</span>, <span class="attr">to</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">1</span>, <span class="attr">to</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">2</span>, <span class="attr">to</span>: <span class="number">4</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">2</span>, <span class="attr">to</span>: <span class="number">5</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">3</span>, <span class="attr">to</span>: <span class="number">6</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">3</span>, <span class="attr">to</span>: <span class="number">8</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">6</span>, <span class="attr">to</span>: <span class="number">7</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">6</span>, <span class="attr">to</span>: <span class="number">9</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">4</span>, <span class="attr">to</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">4</span>, <span class="attr">to</span>: <span class="number">11</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">from</span>: <span class="number">5</span>, <span class="attr">to</span>: <span class="number">12</span> &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>エッジに設定可能な属性一覧は<a href="https://almende.github.io/vis/docs/network/edges.html">vis.js - Edges documentation.</a>をご参照ください。</p><h2 id="オプション定義"><a href="#オプション定義" class="headerlink" title="オプション定義"></a>オプション定義</h2><p>階層グラフを表示する場合、layoutオプションを指定する必要があります。その際、下記のように<code>sortMethod: &#39;directed&#39;</code>を指定することでグラフの形状から各ノードのレベルを自動計算してくれるので、ライトに可視化したい場合にはこのオプションを使用することをおすすめします。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    layout: &#123;</span><br><span class="line">        hierarchical: &#123;</span><br><span class="line">            sortMethod: <span class="string">&#x27;directed&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>オプションに設定可能な属性一覧は<a href="https://almende.github.io/vis/docs/network/">vis.js - Network documentation.</a>をご参照ください。</p><h2 id="可視化"><a href="#可視化" class="headerlink" title="可視化"></a>可視化</h2><p>上記のノード定義、エッジ定義、オプション定義を元に可視化することができます。実際に可視化した例です。</p><p><img src="/images/20210303/2021-01-19_14h29_14.png"><br>ソースコードは <a href="https://jsfiddle.net/0bxLo6wt/">Edit fiddle - JSFiddle - Code Playground</a> にて確認できます。</p><p>これだけでは寂しいので、少しグラフを加工していきましょう。</p><h2 id="ノードの形状"><a href="#ノードの形状" class="headerlink" title="ノードの形状"></a>ノードの形状</h2><p>ノード定義にshape属性を追加することで、ノードにラベルを表示することが出来ます。なお、ここでは紹介しませんでしたが<code>shape: image</code>を指定することで任意の画像を表示することもできます。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nodes = <span class="keyword">new</span> vis.DataSet([</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">label</span>: <span class="string">&#x27;1&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">label</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;database&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">label</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;box&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">label</span>: <span class="string">&#x27;4&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;text&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">label</span>: <span class="string">&#x27;5&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;triangle&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">label</span>: <span class="string">&#x27;6&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;diamond&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">label</span>: <span class="string">&#x27;7&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;dot&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">label</span>: <span class="string">&#x27;8&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;star&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">9</span>, <span class="attr">label</span>: <span class="string">&#x27;9&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;triangle&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">&#x27;10&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;triangleDown&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">11</span>, <span class="attr">label</span>: <span class="string">&#x27;11&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;hexagon&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">label</span>: <span class="string">&#x27;12&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;square&#x27;</span> &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p><img src="/images/20210303/2021-01-19_14h31_46.png"><br>ソースコードは <a href="https://jsfiddle.net/3nkac917/">Edit fiddle - JSFiddle - Code Playground</a> にて確認できます。</p><h2 id="tooltip"><a href="#tooltip" class="headerlink" title="tooltip"></a>tooltip</h2><blockquote><p>tooltip（ツールチップ）とは、マウスオーバーした際に表示される枠内の補足説明などのことです。詳細は<a href="https://ja.wikipedia.org/wiki/%E3%83%84%E3%83%BC%E3%83%AB%E3%83%81%E3%83%83%E3%83%97">こちら</a>の記事などを参考ください。</p></blockquote><p>ノード定義にtitle属性を追加することでtooltipを表示することが出来ます。ドキュメントによるとHTMLを含む文字列を直接セット出来ると書かれていますが、XSS対策<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>のため9.0.0からできなくなっています。</p><p>tooltipでHTMLを表示したい場合は<a href="https://visjs.github.io/vis-network/examples/network/other/popups.html">Vis Network | Other | Popups</a>のように HTML Element を直接セットする必要があります。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nodes = <span class="keyword">new</span> vis.DataSet([</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">label</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;tooltip\ntest&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">label</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;database&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">label</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;box&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">label</span>: <span class="string">&#x27;4&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;text&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">label</span>: <span class="string">&#x27;5&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;triangle&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">label</span>: <span class="string">&#x27;6&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;diamond&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">label</span>: <span class="string">&#x27;7&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;dot&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">label</span>: <span class="string">&#x27;8&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;star&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">9</span>, <span class="attr">label</span>: <span class="string">&#x27;9&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;triangle&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">&#x27;10&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;triangleDown&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">11</span>, <span class="attr">label</span>: <span class="string">&#x27;11&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;hexagon&#x27;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">label</span>: <span class="string">&#x27;12&#x27;</span>, <span class="attr">shape</span>: <span class="string">&#x27;square&#x27;</span> &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p><img src="/images/20210303/2021-01-19_14h34_43.png"><br>ソースコードは <a href="https://jsfiddle.net/rg50c2jh/">Edit fiddle - JSFiddle - Code Playground</a> にて確認できます。</p><h2 id="イベント"><a href="#イベント" class="headerlink" title="イベント"></a>イベント</h2><p><code>on</code>メソッドで指定したイベントを処理するCallbackを登録することが出来ます。<br>下記のサンプルではクリックしたノードの<code>color</code>属性を変更します。</p><p><img src="/images/20210303/%E3%83%8E%E3%83%BC%E3%83%89%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88.gif"><br>ソースコードは <a href="https://jsfiddle.net/hu2kts5y/">Edit fiddle - JSFiddle - Code Playground</a> にて確認できます。</p><p>イベント一覧は <a href="https://almende.github.io/vis/docs/network/#Events">vis.js - Network documentation.</a> に記載されています。<br>イベント発生時に渡されるパラメータの中身を確認したり、実際にイベント発生させて試したい場合は <a href="https://visjs.github.io/vis-network/examples/network/events/interactionEvents.html">Vis Network | Events | Interaction events</a> がおすすめです。</p><h2 id="dot言語からのインポート"><a href="#dot言語からのインポート" class="headerlink" title="dot言語からのインポート"></a>dot言語からのインポート</h2><p>Vis NetworkではGephiからエクスポートしたデータやdot言語をインポートすることができます。今回は私が先日Graphvizを用いて可視化したグラフ<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>をVis Networkで表示してみます。</p><p><img src="/images/20210303/%E5%90%8D%E7%A7%B0%E6%9C%AA%E8%A8%AD%E5%AE%9A2.png"></p><p>ソースコードは <a href="https://jsfiddle.net/kon2cL8r/10/">Edit fiddle - JSFiddle - Code Playground</a> にて確認できます。</p><p>Graphvizほど洗練されたレイアウトにはなりませんが、非常に簡単にdot言語をインポートすることができました。</p><p>※ 上記画像ではVis Networkのノードやエッジのラベルが読み取れない状態になっていますが、Canvas上で拡大することでラベルを読み取ることが出来ます</p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>開発中にバージョンアップしたときに何も表示されなくなる不具合<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>に遭遇したことがありました。このようなわかりやすい不具合ならまだいいですが、細かいところで挙動が変わってしまっている可能性もあるのでバージョンアップの際には十分な検証が必要かなと思います。（どのソフトウェアにも言えることではありますが…）</p><h1 id="課題"><a href="#課題" class="headerlink" title="課題"></a>課題</h1><p>当初Vis Networkを使用していましたが、大きめの階層グラフを表示するとエッジの交差が非常に多くなってしまうことがわかりました。例えば下図はこれまでサンプルとして表示していたグラフにオレンジのエッジを一本追加しただけなのですが、エッジの交差が必要以上に多くなってしまっています。</p><p><img src="/images/20210303/2021-01-21_10h44_39.png"></p><p>ソースコードは <a href="https://jsfiddle.net/2801wrud/2/">Edit fiddle - JSFiddle - Code Playground</a> にて確認できます。</p><p>私の所属しているプロジェクトでは比較的大きな階層グラフを表示する必要があり、この課題を解消するためmxGraphに乗り換えました。mxGraphではこのようにエッジの交差を減らすことができます。</p><p><img src="/images/20210303/image_(4).png"></p><p>次回の記事ではmxGraphをご紹介いたします。</p><ul><li>続きの記事も<a href="/articles/20210303/">こちら</a>に公開されました。併せて確認してもらえると嬉しいです！</li></ul><p>階層グラフのレイアウト問題そのものに興味がある方は <a href="http://www.orsj.or.jp/archive2/or63-1/or63_1_20.pdf">階層グラフの可視化</a> などを見ると楽しめるかなと思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>vis.jsを使い、ライトに階層グラフを表示・加工出来ることがわかりました。残念ながら私達の用途には合いませんでしたが、適切なシーンで使用すればとても有用なライブラリだと思います。</p><p>コアテクノロジーユニットでは、現在チームメンバーを募集しています。興味がある方はお気軽に技術ブログTwitterや会社採用HPへ、連絡をお待ちしております。</p><p><a href="https://www.future.co.jp/recruit/">https://www.future.co.jp/recruit/</a></p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200901/index.html" data-iframely-url="//cdn.iframe.ly/MB3R2AH?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200203/index.html" data-iframely-url="//cdn.iframe.ly/J3rUEhc?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">フューチャー発のOSSであるCheetah Gridも高速に描画するためにcanvasを使用しています。興味がある方は<a href="https://future-architect.github.io/articles/20200901/">Vue.jsで最速に始めるCheetah Grid | フューチャー技術ブログ</a>や<a href="https://future-architect.github.io/articles/20200924/">CheetahGrid+Vue.jsをエンプラで使ってみた | フューチャー技術ブログ</a>を御覧ください</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="https://github.com/visjs/vis-network/pull/1275">fix(xss)!: don't set popup content via innerHTML by Thomaash · Pull Request #1275 · visjs/vis-network · GitHub</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="https://qiita.com/tanzaku/items/d21ce5c61505a8710fbe#%E8%A7%A3%E6%9E%90%E7%B5%90%E6%9E%9C-%E3%81%9D%E3%81%AE3%E3%82%A8%E3%83%B3%E3%83%89%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%AE%E3%83%8E%E3%83%BC%E3%83%89%E3%82%92%E8%BF%BD%E5%8A%A0">Goでコールグラフを自作してみた - Qiita</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="https://github.com/visjs/vis-network/issues/183">None of the examples work on 6.2.0? · Issue #183 · visjs/vis-network · GitHub</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして、TIG コアテクノロジーユニットの山田です。&lt;/p&gt;
&lt;p&gt;だいぶ前のことですが業務で階層グラフを可視化する機</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
    <category term="vis.js" scheme="https://future-architect.github.io/tags/vis-js/"/>
    
    <category term="可視化" scheme="https://future-architect.github.io/tags/%E5%8F%AF%E8%A6%96%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Auth0でADをユーザDBにし、SalesforceとのSSOを確認する</title>
    <link href="https://future-architect.github.io/articles/20210302/"/>
    <id>https://future-architect.github.io/articles/20210302/</id>
    <published>2021-03-01T15:00:00.000Z</published>
    <updated>2021-03-14T02:43:06.709Z</updated>
    
    <content type="html"><![CDATA[<p>エンタープライズの領域ではAD認証が多く利用されており、また同時にCRMとしてSalesforceが導入されているケースが多くあります。<br>この場合、社内システムにおける「統合認証」の要件として、これらを繋げてログインする必要が出てきます。</p><p>これらの要求に対応するため、以下2点を確認し、Active Directory（以降AD）を中心とした統合認証を試してみます。</p><ol><li>Auth0のApplicationsでAD認証ができることを確認</li><li>SalesforceのSSO機能を利用し、Auth0経由でAD認証かつSSOができることを確認</li></ol><h1 id="Auth0とは？"><a href="#Auth0とは？" class="headerlink" title="Auth0とは？"></a>Auth0とは？</h1><img src="/images/20210222/top.png" class="img-middle-size"><p><a href="https://future-architect.github.io/articles/20200122/">Auth0導入編</a>をぜひ参照ください。他にも<a href="https://future-architect.github.io/tags/Auth0/">Auth0関連</a>の記事があります。</p><h1 id="Auth0に「Active-Directory-LDAP」Connectorを追加"><a href="#Auth0に「Active-Directory-LDAP」Connectorを追加" class="headerlink" title="Auth0に「Active Directory / LDAP」Connectorを追加"></a>Auth0に「Active Directory / LDAP」Connectorを追加</h1><h3 id="設定追加"><a href="#設定追加" class="headerlink" title="設定追加"></a>設定追加</h3><p><code>メニュー　-&gt; Connections -&gt; Enterprise -&gt; Active Directory / LDAP -&gt; CREATE CONNECTION</code><br>メニューからConnectorを追加し、今回は2つのオプションを有効にしています</p><ul><li>Use Windows Integrated Auth (Kerberos)<br>Auth0はWindows統合認証（Kerberos認証）に対応しており、WindowsでAD認証でログインしており、かつ <code>IP Ranges</code> のIPでログインすると認証をスキップできます。  </li><li>Sync user profile attributes at each login<br>こちらはシンプルに認証時に最新のプロファイルをADから取得できる設定となっています。</li></ul><img src="/images/20210302/スクリーンショット_2021-02-24_10.03.37.png"  style="border:solid 1px #000000"><h1 id="ADサーバーの設定"><a href="#ADサーバーの設定" class="headerlink" title="ADサーバーの設定"></a>ADサーバーの設定</h1><h3 id="Connector設定確認"><a href="#Connector設定確認" class="headerlink" title="Connector設定確認"></a>Connector設定確認</h3><p>追加済みのConnectorより、「Setup」タブを確認し <code>Ticket Url</code> を控えておきます。<br><strong>この<code>Ticket Url</code>がADサーバーの設定に必要となります。</strong></p><img src="/images/20210302/スクリーンショット_2021-02-24_10.06.35.png"  style="border:solid 1px #000000"><h3 id="ADサーバーにAD-LDAP-Connectorをインストール"><a href="#ADサーバーにAD-LDAP-Connectorをインストール" class="headerlink" title="ADサーバーにAD LDAP Connectorをインストール"></a>ADサーバーにAD LDAP Connectorをインストール</h3><p><a href="https://auth0.com/docs/extensions/ad-ldap-connector/install-configure-ad-ldap-connector">インストール手順</a>を参考に、ウィザードに従ってインストールしてください。<br>インストール時に前述の手順で控えた<code>Ticket Url</code>が必要になります。</p><h3 id="AD-LDAP-Connectorの設定を変更"><a href="#AD-LDAP-Connectorの設定を変更" class="headerlink" title="AD LDAP Connectorの設定を変更"></a>AD LDAP Connectorの設定を変更</h3><p>Auht0らしく、AD LDAP Connectorの設定をスクリプトで変更できる部分があります。<br>ProfileMapper（ADのユーザプロファイルとAuth0のユーザプロファイルのマッピング）のタブが、スクリプトで記載できる設定になっており、今回は詰められる情報を最大まで詰めてみました。<br>ここで設定したプロファイルがログイン時にAuth0に送信される情報となります。</p><img src="/images/20210302/スクリーンショット_2020-09-11_17.49.51.png"  style="border:solid 1px #000000"><h3 id="ADとAuth0が接続できていることを確認"><a href="#ADとAuth0が接続できていることを確認" class="headerlink" title="ADとAuth0が接続できていることを確認"></a>ADとAuth0が接続できていることを確認</h3><p>Auth0側の<code>Connections</code>の表示が、<code>Offline</code>から<code>Online</code>に変化します。</p><img src="/images/20210302/スクリーンショット_2020-09-11_9.36.28.png"  style="border:solid 1px #000000"><h1 id="Applicationsでログイン確認"><a href="#Applicationsでログイン確認" class="headerlink" title="Applicationsでログイン確認"></a>Applicationsでログイン確認</h1><h3 id="Applicationsの設定変更"><a href="#Applicationsの設定変更" class="headerlink" title="Applicationsの設定変更"></a>Applicationsの設定変更</h3><h3 id="ApplicationsでConnectionsを有効化"><a href="#ApplicationsでConnectionsを有効化" class="headerlink" title="ApplicationsでConnectionsを有効化"></a>Applicationsで<code>Connections</code>を有効化</h3><p>Applicationsの設定で<code>Connections</code>タブを開き、設定済みのADを有効化します。</p><img src="/images/20210302/スクリーンショット_2021-02-22_18.59.51.png"  style="border:solid 1px #000000"><h3 id="ログインを確認"><a href="#ログインを確認" class="headerlink" title="ログインを確認"></a>ログインを確認</h3><p>サンプルアプリケーションを利用し、ログイン後のプロファイルを確認します。<br>ここで、ADで設定済みのプロファイルが見えれば連携成功です。</p><img src="/images/20210302/スクリーンショット_2020-09-11_15.33.11.png"  style="border:solid 1px #000000"><h3 id="プロファイルが取れるか確認"><a href="#プロファイルが取れるか確認" class="headerlink" title="プロファイルが取れるか確認"></a>プロファイルが取れるか確認</h3><p>Auth0のRulesでプロファイルの取得を入れ込み、結果を見ます。</p><img src="/images/20210302/スクリーンショット_2020-09-11_17.59.05.png"  style="border:solid 1px #000000"><p>ADサーバーのAD LDAP Connectorで指定した情報が取れていることがわかります。<br>なお、ここまで確認できればAuth0上でユーザ情報を自由に扱えそうだと判断できます。<br>例えば、ログイン時にADからユーザ情報を透過的に移行するなどの対応も考えられます。</p><p><img src="/images/20210302/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-09-11_15.38.32.png"></p><p><img src="/images/20210302/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-09-11_15.38.48.png"></p><h1 id="Salesforceの外部認証にAuth0を設定"><a href="#Salesforceの外部認証にAuth0を設定" class="headerlink" title="Salesforceの外部認証にAuth0を設定"></a>Salesforceの外部認証にAuth0を設定</h1><h3 id="Salesforceのアカウント準備"><a href="#Salesforceのアカウント準備" class="headerlink" title="Salesforceのアカウント準備"></a>Salesforceのアカウント準備</h3><p>SSOの前提として、Auth0のドメイン設定を行う必要があります。</p><h3 id="Salesforce側にADとSSOさせたいユーザを作成"><a href="#Salesforce側にADとSSOさせたいユーザを作成" class="headerlink" title="Salesforce側にADとSSOさせたいユーザを作成"></a>Salesforce側にADとSSOさせたいユーザを作成</h3><p><strong>SalesforceのSSOでは、Salesforce側に事前にSSOしたユーザの登録が必要です。</strong><br>また、SSOさせる場合にSalesforceのユーザとADのユーザで、SSOに利用する属性情報を一致させる必要があります。<br>とはいえ、Auth0のログイン画面を使う場合、ADとSalesforceで一致させる属性はEmailが最善です。<br>今回はこの青枠ユーザをSSOで利用します。</p><img src="/images/20210302/スクリーンショット_2021-02-22_19.33.57.png"  style="border:solid 1px #000000"><h3 id="Saleforceのドメイン設定"><a href="#Saleforceのドメイン設定" class="headerlink" title="Saleforceのドメイン設定"></a>Saleforceのドメイン設定</h3><p><a href="https://help.salesforce.com/articleView?id=sf.domain_name_overview.htm&type=5">SSOにはドメイン設定が必要になるため、設定しておきます。</a><br>ここでAuth0に移ります。</p><h3 id="auth0にSalesforce用のSSO設定を追加"><a href="#auth0にSalesforce用のSSO設定を追加" class="headerlink" title="auth0にSalesforce用のSSO設定を追加"></a>auth0にSalesforce用のSSO設定を追加</h3><p><code>SSO Integrations</code>から<code>CREATE SSO INTEGRATION</code>を選択し、SalesforceのSSO設定を追加します<br>Salesforce側のドメインが必要になるので、<a href="https://auth0.com/docs/protocols/saml-configuration-options/configure-salesforce-as-saml-identity-provider">Auth0の設定ページ</a>を確認しつつSalesforceから情報を取得してください。</p><img src="/images/20210302/スクリーンショット_2021-02-22_18.59.24.png"  style="border:solid 1px #000000"><p>Salesforceのドメインに<code>https://</code>をつけたものが<code>Entity ID</code>になります。</p><img src="/images/20210302/スクリーンショット_2021-02-22_18.59.45.png"  style="border:solid 1px #000000"><p>追加設定として、認証先をADに変更します。</p><img src="/images/20210302/スクリーンショット_2021-02-22_18.59.51_2.png"  style="border:solid 1px #000000"><p>ここで、Salesforceに移ります。</p><h3 id="SaleforceのSSO設定追加"><a href="#SaleforceのSSO設定追加" class="headerlink" title="SaleforceのSSO設定追加"></a>SaleforceのSSO設定追加</h3><p>メニューの<code>ID-&gt;シングルサインオン設定</code>を選択し、<code>新規</code>から接続設定を作ります。</p><p><img src="/images/20210302/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2021-02-22_19.09.12.png"></p><p>Auth0のSalesforce設定ページにチュートリアルページあるので、手順に従い必須項目を埋めます。<br><code>IDはattribute要素にあります</code>を選択し、<code>email</code>を入力することを忘れないでください。<br>設定した<code>email</code>が、ADとSalesforceでSSOさせるユーザの一致属性となります。</p><img src="/images/20210302/スクリーンショット_2021-02-22_19.44.06.png"  style="border:solid 1px #000000"><h3 id="SSOの確認"><a href="#SSOの確認" class="headerlink" title="SSOの確認"></a>SSOの確認</h3><p>これでようやく設定完了です。<br>追加したSSOのログインボタンが現れますので、自ドメインの認証画面からSSOユーザでログインしてください。</p><p><img src="/images/20210302/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2020-09-14_12.52.42.png"></p><p>ログインできれば成功です。<br>お疲れ様でした。</p><h1 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h1><div class="iframely-embed"><div class="iframely-responsive" style="padding-bottom: 35.9551%; padding-top: 120px;"><a href="https://future-architect.github.io/articles/20210222/index.html" data-iframely-url="//cdn.iframe.ly/MKovoVl"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200123/index.html" data-iframely-url="//cdn.iframe.ly/6rr8LwH?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;エンタープライズの領域ではAD認証が多く利用されており、また同時にCRMとしてSalesforceが導入されているケースが多くあります。&lt;br&gt;この場合、社内システムにおける「統合認証」の要件として、これらを繋げてログインする必要が出てきます。&lt;/p&gt;
&lt;p&gt;これらの要求に</summary>
      
    
    
    
    <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
    <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
    <category term="SSO" scheme="https://future-architect.github.io/tags/SSO/"/>
    
    <category term="Salesforce" scheme="https://future-architect.github.io/tags/Salesforce/"/>
    
    <category term="ActiveDirectory" scheme="https://future-architect.github.io/tags/ActiveDirectory/"/>
    
  </entry>
  
</feed>
