<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2021-04-26T02:37:54.020Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go 1.16のembedとgo-swaggerを組み合わせてフルスタック自動生成フレームワークを作る</title>
    <link href="https://future-architect.github.io/articles/20210426b/"/>
    <id>https://future-architect.github.io/articles/20210426b/</id>
    <published>2021-04-25T15:00:01.000Z</published>
    <updated>2021-04-26T02:37:54.020Z</updated>
    
    <content type="html"><![CDATA[<p>TIGの伊藤真彦です。</p><p>渋川さんが投稿された</p><ul><li><a href="https://future-architect.github.io/articles/20210408/">Go 1.16のembedとchiとSingle Page Application</a></li><li><a href="https://future-architect.github.io/articles/20210409/">Go 1.16のgo:embedとNext.jsの相性が悪い問題と戦う</a><br>に近い研究記事です。</li></ul><h2 id="やりたいこと"><a href="#やりたいこと" class="headerlink" title="やりたいこと"></a>やりたいこと</h2><img src="/images/20210426b/go_vue_logo.png" class="img-middle-size"><p>私の最近の仕事はgo-swaggerによるバックエンドAPI開発です。本流はバックエンドですが、必要に応じてクラウドインフラを弄ったり、ちょっとしたフロントエンドアプリケーションを作ったりといった動き方で働いています。</p><p>ある時、go-swaggerで作ったバックエンドAPIの資産を使って、ちょっとした開発者向けアプリケーションを作りたくなりました。</p><p>ローカル環境でサーバーとフロントエンドアプリケーションを両方起動すると、サーバーが<code>localhost:3000</code> フロントエンドが<code>localhost:8080</code>を占拠してしまいます。また、フロントエンドとバックエンドのポートが異なることにより、フロントエンドからのリクエストを処理するためにはCORSの設定が必要になってしまいます。そして単純に2つのアプリケーションを起動するのが面倒だなと感じました。</p><p>そこで、go-swaggerが生成するものをハックして、フロントエンドの成果物と今まで作ってきたバックエンドAPIを同じポートで抱えつつ、APIを叩くクライアントサイドのコードもswagger.yamlから自動生成するようなアプリケーション開発に挑戦してみました。</p><h2 id="バックエンド開発"><a href="#バックエンド開発" class="headerlink" title="バックエンド開発"></a>バックエンド開発</h2><p>説明のために、まずはバックエンドの資産を作ります。</p><p>詳しい作り方、説明は<a href="https://future-architect.github.io/articles/20200824/">go-swaggerでhello world</a>をお読みください。</p><p>今回はこのようなディレクトリ構成でアプリケーションを作ります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">swagger.yaml</span><br><span class="line">server</span><br><span class="line">  ├─gen</span><br><span class="line">　└─get_greeting_handler.go</span><br></pre></td></tr></table></figure><figure class="highlight yml"><figcaption><span>swagger.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">swagger:</span> <span class="string">&#x27;2.0&#x27;</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Greeting</span> <span class="string">Server</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/hello:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">produces:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">text/plain</span></span><br><span class="line">      <span class="attr">parameters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">name</span></span><br><span class="line">          <span class="attr">required:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">          <span class="attr">in:</span> <span class="string">query</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">defaults</span> <span class="string">to</span> <span class="string">World</span> <span class="string">if</span> <span class="string">not</span> <span class="string">given</span></span><br><span class="line">      <span class="attr">operationId:</span> <span class="string">getGreeting</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">200:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">returns</span> <span class="string">a</span> <span class="string">greeting</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">              <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">              <span class="attr">description:</span> <span class="string">contains</span> <span class="string">the</span> <span class="string">actual</span> <span class="string">greeting</span> <span class="string">as</span> <span class="string">plain</span> <span class="string">text</span></span><br></pre></td></tr></table></figure><p><a href="https://future-architect.github.io/articles/20200824/">上記記事</a>と同じswagger.yamlを用意して、serverパッケージを生成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">swagger generate server -a factory -A factory -t server/gen -f ./ swagger.yaml</span><br></pre></td></tr></table></figure><p>get_greeting_handler.goはログ出力だけ少し追加しました。</p><figure class="highlight go"><figcaption><span>get_greeting_handler.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetGreeting</span><span class="params">(p factory.GetGreetingParams)</span> <span class="title">middleware</span>.<span class="title">Responder</span></span> &#123;</span><br><span class="line">payload := <span class="string">&quot;hello go&quot;</span></span><br><span class="line"><span class="keyword">if</span> p.Name != <span class="literal">nil</span> &#123;</span><br><span class="line">payload = *p.Name</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;GetGreeting is called, return %s\n&quot;</span>, payload)</span><br><span class="line"><span class="keyword">return</span> factory.NewGetGreetingOK().WithPayload(payload)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>localhost:3000/hello</code>でapiが動くことを確認します。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> server</span><br><span class="line">go run .\gen\<span class="built_in">cmd</span>\factory-server\main.go --host <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span> --port <span class="number">3000</span></span><br></pre></td></tr></table></figure><img src="/images/20210426b/image.png" style="border:solid 1px #000000"><h2 id="フロンエンド開発"><a href="#フロンエンド開発" class="headerlink" title="フロンエンド開発"></a>フロンエンド開発</h2><p>バックエンドの用意ができたら、上記のAPIを叩くためのサンプルアプリケーションを作ります。<br>まずはVue.jsでのHello Worldアプリケーションを生成します。<br>こちらも過去記事<a href="https://future-architect.github.io/articles/20210107/">Electronの使い方 Web開発の技術でデスクトップアプリを作ろう</a>で詳しく説明しています。</p><p>フロントエンドアプリケーションを下記の構成で生成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">swagger.yaml</span><br><span class="line">app</span><br><span class="line">  └─frontend</span><br><span class="line">server</span><br><span class="line">  ├─gen</span><br><span class="line">　└─get_greeting_handler.go</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">mkdir app</span><br><span class="line"><span class="built_in">cd</span> app</span><br><span class="line">vue create frontend</span><br></pre></td></tr></table></figure><p>アプリケーションを起動し、<code>localhost://8080</code>でフロントエンドアプリケーションが起動することを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> frontend</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><img src="/images/20210426b/image_2.png" style="border:solid 1px #000000"><h2 id="フロントエンドにAPI-Clientを実装する"><a href="#フロントエンドにAPI-Clientを実装する" class="headerlink" title="フロントエンドにAPI Clientを実装する"></a>フロントエンドにAPI Clientを実装する</h2><p>作成したフロントエンドアプリケーション向けに、TypeScriptのAPIクライアントを自動生成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> app</span><br><span class="line">npx -p @openapitools/openapi-generator-cli@cli-4.1.3 openapi-generator generate -g typescript-axios -i ../../swagger.yaml -o ./frontend/src/client-axios -p modelPropertyNaming=snake_case --enable-post-process-file</span><br></pre></td></tr></table></figure><p><code>/frontend/src/client-axios</code>ディレクトリにコードが生成されます。<br><code>.eslintignore</code>に追加するなど、linterの設定を適宜追加してエラーが起きないようにすることを推奨します。</p><p>生成したコードを利用するように<code>app\frontend\src\App.vue</code>を更新します。</p><figure class="highlight html"><figcaption><span>App.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./assets/logo.png&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; Component, Vue &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-property-decorator&#x27;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; DefaultApi &#125; <span class="keyword">from</span> <span class="string">&#x27;./client-axios&#x27;</span></span></span><br><span class="line"></span><br><span class="line">@Component(&#123;&#125;)</span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">  message = <span class="string">&quot;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  mounted():<span class="keyword">void</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> api = <span class="keyword">new</span> DefaultApi().getGreeting(<span class="string">&quot;hello Vue + Go + OpenAPI&quot;</span>);</span></span><br><span class="line"><span class="javascript">    api.then(<span class="function">(<span class="params">resp: any</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.message = resp.data;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#app</span> &#123;</span></span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#2c3e50</span>;</span></span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>app\frontend\src\client-axios\base.ts</code>でAPIの接続先を設定できるので、任意のポート、パスに書き換えます。</p><p><img src="/images/20210426b/image_3.png"></p><p>このまま<code>npm run serve</code>でアプリケーションを起動すると、存在しないAPIにアクセスし、通信に失敗する状態になります。</p><img src="/images/20210426b/image_4.png" style="border:solid 1px #000000"><p><img src="/images/20210426b/image_5.png"></p><p>この状態のアプリケーションを、バックエンドAPIと繋ぎこみます。</p><h2 id="フロントエンドとバックエンドAPIを統合する"><a href="#フロントエンドとバックエンドAPIを統合する" class="headerlink" title="フロントエンドとバックエンドAPIを統合する"></a>フロントエンドとバックエンドAPIを統合する</h2><p>まずは作成したフロントエンドアプリケーションをビルドし、アセットファイルを準備します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> app/frontend</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p><code>app\frontend\dist</code>ディレクトリに成果物一式が生成されます。</p><p>生成したファイルを<code>go:embed</code>で埋め込み起動するような<code>main.go</code>を下記の構成で作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">swagger.yaml</span><br><span class="line">app</span><br><span class="line">  ├─frontend</span><br><span class="line">  └─main.go</span><br><span class="line">server</span><br><span class="line">  ├─gen</span><br><span class="line">　└─get_greeting_handler.go</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;embed&quot;</span></span><br><span class="line"><span class="string">&quot;io/fs&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/go-openapi/loads&quot;</span></span><br><span class="line">flags <span class="string">&quot;github.com/jessevdk/go-flags&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;regexp&quot;</span></span><br><span class="line"><span class="string">&quot;server/gen/restapi&quot;</span></span><br><span class="line"><span class="string">&quot;server/gen/restapi/factory&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxyRegexp = regexp.MustCompile(<span class="string">`^/api`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed frontend/dist/*</span></span><br><span class="line"><span class="keyword">var</span> static embed.FS</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">api := factory.NewFactoryAPI(swaggerSpec)</span><br><span class="line">server := restapi.NewServer(api)</span><br><span class="line"><span class="keyword">defer</span> server.Shutdown()</span><br><span class="line"></span><br><span class="line">parser := flags.NewParser(server, flags.Default)</span><br><span class="line">parser.ShortDescription = <span class="string">&quot;Greeting Server&quot;</span></span><br><span class="line">parser.LongDescription = swaggerSpec.Spec().Info.Description</span><br><span class="line">server.ConfigureFlags()</span><br><span class="line"><span class="keyword">for</span> _, optsGroup := <span class="keyword">range</span> api.CommandLineOptionsGroups &#123;</span><br><span class="line">_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err := parser.Parse(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">code := <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> fe, ok := err.(*flags.Error); ok &#123;</span><br><span class="line"><span class="keyword">if</span> fe.Type == flags.ErrHelp &#123;</span><br><span class="line">code = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">os.Exit(code)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// serve swagger api server.</span></span><br><span class="line">server.ConfigureAPI()</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/api/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// remove &quot;/api&quot; fron api path for swagger api</span></span><br><span class="line">r.URL.Path = proxyRegexp.ReplaceAllString(r.URL.Path, <span class="string">&quot;&quot;</span>)</span><br><span class="line">server.GetHandler().ServeHTTP(w, r)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// serve frontend HTML.</span></span><br><span class="line">public, err := fs.Sub(static, <span class="string">&quot;frontend/dist&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">http.Handle(<span class="string">&quot;/&quot;</span>, http.FileServer(http.FS(public)))</span><br><span class="line"></span><br><span class="line">log.Println(<span class="string">&quot;listening on localhost:3000...&quot;</span>)</span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> if you want to use another port, you also have to modify app\frontend\src\client-axios\base.ts</span></span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;:3000&quot;</span>, <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>※そのまま使用すると<code>server</code>パッケージのimportに失敗します、ご自身の環境での適切なパスに指定するか、<code>go.mod</code>でreplaceしてください”<br>このファイルは、自動生成された<code>server\gen\cmd\factory-server\main.go</code>をベースに拡張したファイルです。</p><p>生成したフロントエンドのコードを<code>go:embed</code>で埋め込みます。<br>詳しくは<a href="https://future-architect.github.io/articles/20210208/">Go 1.16からリリースされたgo:embedとは</a>をお読みください。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:embed frontend/dist/*</span></span><br><span class="line"><span class="keyword">var</span> static embed.FS</span><br></pre></td></tr></table></figure><p>埋め込んだファイルを利用できるようにHTTPハンドラを設定します。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// serve frontend HTML.</span></span><br><span class="line">public, err := fs.Sub(static, <span class="string">&quot;frontend/dist&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">http.Handle(<span class="string">&quot;/&quot;</span>, http.FileServer(http.FS(public))</span><br></pre></td></tr></table></figure><p>一方、go-swaggerで生成したバックエンドAPIのロジックは<code>api/hello</code>のパスでアクセスできるように退避させつつ読み込みます。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// serve swagger api server.</span></span><br><span class="line">server.ConfigureAPI()</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/api/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// remove &quot;/api&quot; fron api path for swagger api</span></span><br><span class="line">r.URL.Path = proxyRegexp.ReplaceAllString(r.URL.Path, <span class="string">&quot;&quot;</span>)</span><br><span class="line">server.GetHandler().ServeHTTP(w, r)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>本来であれば<code>server.Serve()</code>でポート番号の指定などを解釈しつつ、バックエンドAPIが起動するところを、上記の方法でうまく利用することができました。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxyRegexp = regexp.MustCompile(<span class="string">`^/api`</span>)</span><br></pre></td></tr></table></figure><p>パスに<code>api/</code>の文字列が存在するとバックエンドAPIが元々期待しているパスパターンと一致しないため、正規表現を用いて除外しています。<br>余談ですが正規表現の<code>MustCompile</code>は関数内で行うと、呼び出されるたびに毎回コンパイルが走るため、グローバル変数に持たせる事が推奨されています。</p><h2 id="アプリケーションの起動"><a href="#アプリケーションの起動" class="headerlink" title="アプリケーションの起動"></a>アプリケーションの起動</h2><p>これでアプリケーションが完成しました。<br>完成したアプリケーションを起動してみます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> app</span><br><span class="line">go run main.go</span><br></pre></td></tr></table></figure><img src="/images/20210426b/image_6.png" style="border:solid 1px #000000"><p>無事にアプリケーションが起動し、バックエンドAPIからのレスポンスを表示することができました。</p><p><img src="/images/20210426b/image_7.png"></p><p>ブラウザのデバックコンソールでバックエンドAPIとの疎通に成功している事が確認できます。<br>あとは出来上がったファイルを<code>go build</code>すれば単一バイナリで動くフルスタックWebアプリケーションの完成です。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>go-swaggerで生成したバックエンドサーバーと、任意のフロントエンドWebアプリケーションを同じポートで起動することは可能。</li><li>クライアントサイドからバックエンドに繋ぐためのAPIクライアントも自動生成できる。</li><li><code>go:embed</code>を利用することで、単一バイナリとしてビルドすることが可能。</li></ul><p>大規模アプリケーションをこの構成で作成するには若干邪道な雰囲気を感じますが、手早くアプリケーションを開発したいGopherのみなさんにおススメの手法でした。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;渋川さんが投稿された&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://future-architect.github.io/articles/20210408/&quot;&gt;Go 1.16のembedとchiとSingle Page </summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
    <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
    <category term="Go1.16" scheme="https://future-architect.github.io/tags/Go1-16/"/>
    
  </entry>
  
  <entry>
    <title>AWS CLIで用いるMFAをちょっとだけ便利に扱えるツールを公開しました</title>
    <link href="https://future-architect.github.io/articles/20210426a/"/>
    <id>https://future-architect.github.io/articles/20210426a/</id>
    <published>2021-04-25T15:00:00.000Z</published>
    <updated>2021-04-26T02:22:38.463Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210426a/access-3579221_640.jpg" class="img-middle-size"><blockquote><p><a href="https://pixabay.com/ja/users/mohamed_hassan-5229782/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3579221">mohamed Hassan</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3579221">Pixabay</a>からの画像</p></blockquote><p>こんにちは、辻です。</p><p>AWSのIAMユーザのセキュリティ上、IAMユーザにMFA(他要素認証)を導入するケースがあります。MFAを有効にしているIAMユーザでGUI経由でログインする場合は、ログイン時に認証情報が求められて、MFAデバイスが出力するトークンを入力することでログインできます。一方AWS CLIを用いてリソースにアクセス場合はコマンド発行時に認証情報は求められません。代わりに以下のような記事にかかれているような、一時的な認証情報を発行することがよく行われます。</p><ul><li><a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/authenticate-mfa-cli/">MFA トークンを使用して、AWS CLI 経由で AWS リソースへのアクセスを認証する方法を教えてください。</a></li></ul><p><code>get-session-token</code> コマンドを発行することで一時的な認証情報を発行する、ということです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ aws sts get-session-token --serial-number arn-of-the-mfa-device --token-code code-from-token --profile my-login-profile</span><br></pre></td></tr></table></figure><p>コマンドが成功すると、以下のようなJSONがレスポンスとして返ってきます。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Credentials&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;SecretAccessKey&quot;</span>: <span class="string">&quot;secret-access-key&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;SessionToken&quot;</span>: <span class="string">&quot;temporary-session-token&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Expiration&quot;</span>: <span class="string">&quot;expiration-date-time&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;AccessKeyId&quot;</span>: <span class="string">&quot;access-key-id&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返ってきたレスポンス <code>SecretAccessKey</code>, <code>SessionToken</code> を <code>~/.aws/credentials</code> に記述したり、あるいは環境変数を更新する必要があります。</p><p>上記のJSONの値を <code>~/.aws/credentials</code> に記述することでリソースにアクセスできるようになったものの、<code>get-session-token</code> コマンドを発行した認証情報は最大で129600秒(=36時間)です。一時的な認証情報という意味では妥当ですが、AWS CLIは頻繁に利用するため、ほぼ毎日 <code>get-session-token</code> コマンドで出力したJSONの値を <code>~/.aws/credentials</code> に貼り付ける作業が発生するようになりました。これはちょっと面倒です。</p><p>そこで <a href="https://github.com/future-architect/awsmfa">future-architect/awsmfa</a> というAWS CLIでMFAを扱うときにちょっとだけ便利にMFAを扱うコマンドラインツールを作りました。</p><h2 id="future-architect-awsmfa"><a href="#future-architect-awsmfa" class="headerlink" title="future-architect/awsmfa"></a><code>future-architect/awsmfa</code></h2><p><a href="https://github.com/future-architect/awsmfa"><img src="https://gh-card.dev/repos/future-architect/awsmfa.svg" alt="future-architect/awsmfa - GitHub"></a></p><h3 id="何ができるのか"><a href="#何ができるのか" class="headerlink" title="何ができるのか"></a>何ができるのか</h3><ul><li>AWSの <code>config</code> ファイルや <code>credential</code> ファイルにMFA用の名前付きプロファイルを生成</li><li>MFAに使用する値を、コマンド実行時に自動で更新</li></ul><h3 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h3><p><code>sts get-session-token</code> と同じ要領で <code>awsmfa</code> コマンドを実行するだけです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ awsmfa --serial-number arn:aws:iam::123456789012:mfa/my-login-role --profile my-login-profile code-from-token</span><br></pre></td></tr></table></figure><p>MFAの認証情報を扱うプロファイル名はデフォルトで <code>mfa</code> としています。(別のプロファイル名で保存したい場合はオプションに <code>--mfa-profile-name</code> を指定します。)上記の <code>awsfma ...</code> コマンドを実行すると以下のように <code>mfa</code> のプロファイル名が追加されます。2回目以降は <code>~/.aws/credentials</code> の <code>mfa</code> プロファイル名の値を更新するようになっています。</p><ul><li><code>~/.aws/config</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[default]</span></span><br><span class="line"><span class="attr">region</span> = us-east-<span class="number">1</span></span><br><span class="line"><span class="attr">output</span> = json</span><br><span class="line"></span><br><span class="line">[profile mfa] &lt;- このプロファイル名が追加されます</span><br></pre></td></tr></table></figure><ul><li><code>~/.aws/credentials</code></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[default]</span></span><br><span class="line"><span class="attr">aws_access_key_id</span>     = ABCDEFGHIJKLMNOPQRST</span><br><span class="line"><span class="attr">aws_secret_access_key</span> = ChEXAMPLEraRNW5iy8XgDyR4QNRT44kKRPmKEGQT</span><br><span class="line"></span><br><span class="line">[mfa] &lt;- このプロファイル名が追加されます。2回目以降は自動でこのプロファイルの中身を更新します</span><br><span class="line"><span class="attr">aws_access_key_id</span>     = AKIAIOSFODNN7EXAMPLE</span><br><span class="line"><span class="attr">aws_secret_access_key</span> = wJalrXUtnFEMI/K7MDENG/bPxRfiCYzEXAMPLEKEY</span><br><span class="line"><span class="attr">aws_session_token</span>     = AQoEXAMPLEH4aoAH0gNCAPyJxz4BlCFFxWNE1OPTgk5TthT+FvwqnKwRcOIfrRh3c/LTo6UDdyJwOOvEVPvLXCrrrUtdnniCEXAMPLE/IvU1dYUg2RVAJBanLiHb4IgRmpRV3zrkuWJOgQs8IZZaIv2BXIa2R4OlgkBN9bkUDNCJiBeb/AXlzBBko7b15fjrBs2+cTQtpZ3CYWFXG8C5zqx37wnOE49mRl/+OtkIKGO7fAE</span><br></pre></td></tr></table></figure><h3 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h3><p>Linuxの場合はシェルスクリプト一発でローカル環境にインストールできます。このコマンドラインツールはGoで書かれており、マルチプラットフォーム向けにシングルバイナリを簡単に提供できます。インストールが簡単に行えるのはとても良いですね。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -sfL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;future-architect&#x2F;awsmfa&#x2F;master&#x2F;install.sh | sudo sh -s -- -b &#x2F;usr&#x2F;local&#x2F;bin</span><br></pre></td></tr></table></figure><p>Windowsの場合は <a href="https://github.com/future-architect/awsmfa/releases">Releases</a> から最新のバイナリを取得して、パスが通っているディレクトリにバイナリを配備してください。</p><h3 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h3><p>AWS CLIで用いるMFAの運用をちょっとだけ楽にするツールを作りました。</p><p>やろうと思えばシェル芸でもできそうですし、<code>99designs/aws-vault</code> や <code>broamski/aws-mfa</code> などのよりリッチなOSSもあります。今回は自分たちのユースケースのために作ったツールを公開しました。</p><p>さっそくプルリクエストもいただきました。社外の方からも使っていただき嬉しく思います。</p><p><a href="https://github.com/future-architect/awsmfa/pull/9">https://github.com/future-architect/awsmfa/pull/9</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210426a/access-3579221_640.jpg&quot; class=&quot;img-middle-size&quot;&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/mohamed_</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="OSS推進タスクフォース" scheme="https://future-architect.github.io/tags/OSS%E6%8E%A8%E9%80%B2%E3%82%BF%E3%82%B9%E3%82%AF%E3%83%95%E3%82%A9%E3%83%BC%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>実世界データの特徴と処理方法</title>
    <link href="https://future-architect.github.io/articles/20210423b/"/>
    <id>https://future-architect.github.io/articles/20210423b/</id>
    <published>2021-04-22T15:00:01.000Z</published>
    <updated>2021-04-23T02:24:48.050Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。TIG DXユニットの村上です。</p><p>私は大学時代から深層強化学習の研究をしていますが、分野的にほとんど実世界のデータを扱うことがありませんでした。そんな私ですが、実務で実世界データの分析を行う機会があり、その違いに多くの学びがありました。</p><p>実世界データのデータ分析を行った結果見えてきた、実世界データの特徴と欠損値や不正データの処理について解説しようと思います。</p><p>簡易的ですがソースコードも示していますので、参考になれば幸いです。</p><h1 id="実世界データとは"><a href="#実世界データとは" class="headerlink" title="実世界データとは"></a>実世界データとは</h1><img src="/images/20210423b/search-4083722_640.jpg" class="img-middle-size"><blockquote><p><a href="https://pixabay.com/ja/users/mohamed_hassan-5229782/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4083722">mohamed Hassan</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4083722">Pixabay</a>からの画像</p></blockquote><p>内容に入る前に、本記事での実世界データの定義を行っておきます。ここでは以下2点を満たすものを実世界データと呼ぶことにします。</p><ul><li>もともとはアナログデータである</li><li>データ品質を高める処理が行われていない生のデータ</li></ul><p>例えば身近なものだと、温度計や湿度計から取得されたデータは実世界データとなります。これらに欠損値補完<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>などのデータ品質を高める処理を施した後は実世界データと呼ばないことにします。</p><p>また、機械学習用のデータセットや、システムのモニタリングデータなどは実世界データではありません。</p><h1 id="実世界データの品質"><a href="#実世界データの品質" class="headerlink" title="実世界データの品質"></a>実世界データの品質</h1><p>実世界データのデータ品質は基本的に<code>悪い</code>です。欠損値が含まれていたり、不正なデータが存在するのが当たり前です。主な理由は物理的、人間の意志的な影響を受けるからです。これらの作用により、主に以下2ケースのデータ品質悪化が起こります。</p><ol><li><a href="#%E2%91%A0%E6%AC%A0%E6%90%8D%E5%80%A4%E3%81%8C%E7%99%BA%E7%94%9F%E3%81%99%E3%82%8B">欠損値が発生する</a></li><li><a href="#%E2%91%A1%E4%B8%8D%E6%AD%A3%E3%81%AA%E3%83%87%E3%83%BC%E3%82%BF%E3%81%8C%E6%B7%B7%E5%85%A5%E3%81%99%E3%82%8B">不正なデータが混入する</a></li></ol><p>これらの発生原因と対処法について解説します。</p><h2 id="①欠損値が発生する"><a href="#①欠損値が発生する" class="headerlink" title="①欠損値が発生する"></a>①欠損値が発生する</h2><p>例えば、データの発生源であるIoTデバイスが屋外に設置されている場合、気象の影響を受けます。台風の時に固いものが飛んできてIoTデバイスに直撃、データを送信できなくなるなんてことも有り得ます。また、単純に電波不良などでデータがサーバに到達しなかったという状況も十分あり得ます。</p><p>このように挙げたらきりがありませんが、実世界ではデータがが発生したにも関わらずそれが取得できないことがよくあります。</p><h2 id="欠損値処理"><a href="#欠損値処理" class="headerlink" title="欠損値処理"></a>欠損値処理</h2><p>欠損値の処理に関しては、そのデータを使ってどのような分析を行うかで適切な処理の仕方が変わってきます。ここでは様々な処理方法とそのユースケースを解説します。</p><h3 id="欠損値を削除する"><a href="#欠損値を削除する" class="headerlink" title="欠損値を削除する"></a>欠損値を削除する</h3><p>欠損値が無視できるものであれば、削除してしまうのが手っ取り早いです。ではどのような時に無視しても良いのかですが、以下のケースがそれにあたります。</p><ol><li>後続のデータ分析で利用しない</li><li>データ数が減っても問題ない</li></ol><p>1番は分りやすいと思いますが、2番は要注意です。極端な例ではありますが、以下のような天気と気温のデータがあるとします。</p><p>見ての通り、データの発生源である温度計は雨が降ると高確率でデータを取得できない残念な仕様になっていたとします。</p><table><thead><tr><th align="center">データ</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th></tr></thead><tbody><tr><td align="center"><strong>天気</strong></td><td align="center">晴れ</td><td align="center">晴れ</td><td align="center">晴れ</td><td align="center">雨</td><td align="center">雨</td><td align="center">雨</td><td align="center">曇り</td><td align="center">曇り</td><td align="center">曇り</td></tr><tr><td align="center"><strong>気温</strong></td><td align="center">25℃</td><td align="center">24℃</td><td align="center">26℃</td><td align="center"></td><td align="center"></td><td align="center">18℃</td><td align="center">18℃</td><td align="center">20℃</td><td align="center">19℃</td></tr></tbody></table><p>このような温度計から得られたデータに対して欠損値削除を行い、気温から天気を予測するモデルを構築するとしたらどうなるでしょうか？おそらくそのモデルの予測結果は晴れか曇りのみになります。雨のデータがほとんど存在しないので、とりあえず晴れか曇りと予測しておけば正答率は高くなるということです。このように、データ数が減ること自体が問題になるケースが存在します。</p><p>以上を踏まえて、欠損値を削除しても問題ない場合はpandasを用いて簡単に削除することができます。<br>例として、以下のデータに対して欠損値削除を行います。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">         name gender  profession</span><br><span class="line"><span class="number">0</span>  Goodfellow    man         NaN</span><br><span class="line"><span class="number">1</span>        Mnih    man  researcher</span><br><span class="line"><span class="number">2</span>      Graves    NaN  researcher</span><br><span class="line"><span class="number">3</span>         NaN    NaN         NaN</span><br></pre></td></tr></table></figure><ul><li>全ての項目が欠損値の場合にその行を削除</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.dropna(how=<span class="string">&#x27;all&#x27;</span>)</span><br><span class="line">         name gender  profession</span><br><span class="line"><span class="number">0</span>  Goodfellow    man         NaN</span><br><span class="line"><span class="number">1</span>        Mnih    man  researcher</span><br><span class="line"><span class="number">2</span>      Graves    NaN  researcher</span><br></pre></td></tr></table></figure><ul><li>1つでも欠損値があればその行を削除</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.dropna(how=<span class="string">&#x27;any&#x27;</span>)</span><br><span class="line">   name gender  profession</span><br><span class="line"><span class="number">1</span>  Mnih    man  researcher</span><br></pre></td></tr></table></figure><h3 id="特定の値で補完する"><a href="#特定の値で補完する" class="headerlink" title="特定の値で補完する"></a>特定の値で補完する</h3><p>欠損値が削除できない場合、何らかの値で補完します。どのような値で補完するかはそのデータに対してどのような分析を行うかに依存するため、目的をよく考えて補完する値を選ぶ必要があります。補完する値の候補と主なユースケースは以下です。</p><ul><li>固定値：その項目に表れる値があらかじめ決まっている場合</li><li>平均値：その項目の値の分散が小さい場合</li><li>中央値：その項目の値の分散が大きい場合</li></ul><p>例えば平均値による補完を行う場合は次のようになります。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">    age</span><br><span class="line"><span class="number">0</span>  <span class="number">20.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">21.0</span></span><br><span class="line"><span class="number">2</span>   NaN</span><br><span class="line"><span class="number">3</span>  <span class="number">22.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.fillna(b.mean())</span><br><span class="line">    age</span><br><span class="line"><span class="number">0</span>  <span class="number">20.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">21.0</span></span><br><span class="line"><span class="number">2</span>  <span class="number">21.0</span></span><br><span class="line"><span class="number">3</span>  <span class="number">22.0</span></span><br></pre></td></tr></table></figure><h3 id="一定のアルゴリズムに従って補完する"><a href="#一定のアルゴリズムに従って補完する" class="headerlink" title="一定のアルゴリズムに従って補完する"></a>一定のアルゴリズムに従って補完する</h3><p>欠損値が一定のアルゴリズムに従って推定できる場合、以下の補完方法が有効です。</p><ul><li>線形補完：前後のデータ間の中間の値で補完</li><li>スプライン補完：スプライン曲線を用いて値を推定</li></ul><p>例えば線形補完をする場合は以下のようになります。今回は分りやすいようにmethodを明示的に指定していますが、デフォルトで<code>linear</code>なので、線形補完する場合はmethodの指定は省略可能です。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">    age</span><br><span class="line"><span class="number">0</span>  <span class="number">20.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">21.0</span></span><br><span class="line"><span class="number">2</span>   NaN</span><br><span class="line"><span class="number">3</span>  <span class="number">22.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.interpolate(method=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line">    age</span><br><span class="line"><span class="number">0</span>  <span class="number">20.0</span></span><br><span class="line"><span class="number">1</span>  <span class="number">21.0</span></span><br><span class="line"><span class="number">2</span>  <span class="number">21.5</span></span><br><span class="line"><span class="number">3</span>  <span class="number">22.0</span></span><br></pre></td></tr></table></figure><p>これら以外にも様々な補完アルゴリズムが存在します。いずれもpandasで簡単に行うことができるので、<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.interpolate.html">公式ドキュメント</a>を参考にしてみてください。</p><h2 id="②不正なデータが混入する"><a href="#②不正なデータが混入する" class="headerlink" title="②不正なデータが混入する"></a>②不正なデータが混入する</h2><p>このケースはデータの生成過程で人間による入力が存在する場合、容易に発生し得るものです。また、データの生成過程に人間が介入しないとしても、何らかの事情でデータを手動で作成して差し込む場合もあります。</p><p>このケースの厄介な点は、それが正しいデータなのか、不正なデータなのかの判断が難しいことです。理論上有り得ないデータであればバリデーションチェックを行うことで正確に判断できるのですが、そうでない場合は不正なデータであることに気づくことが困難です。仮に怪しいデータを発見したとしても、それが不正なデータである裏付けを取るためには、そのデータの生成過程を精査する必要があり、多くの手間がかかります。</p><h3 id="不正データの検出方法"><a href="#不正データの検出方法" class="headerlink" title="不正データの検出方法"></a>不正データの検出方法</h3><p>次に不正なデータの検出方法を説明します。以下のフローチャートに従ってデータをチェックするのが効率的です。</p><p><img src="/images/20210423b/flow_chart.png"></p><p>①番、②番について詳しく見ていきます。</p><h4 id="①理論上有り得るデータかチェック（バリデーションチェック）"><a href="#①理論上有り得るデータかチェック（バリデーションチェック）" class="headerlink" title="①理論上有り得るデータかチェック（バリデーションチェック）"></a>①理論上有り得るデータかチェック（バリデーションチェック）</h4><p>この段階では確実に不正であるデータを検出します。そのために、まずは正しいデータとはどのようなデータかをしっかりと定義する必要があります。この定義に間違いがあると、本当は正しいデータでも不正なデータとして検出されてしまう可能性があります。さらに、そのデータの発生源に対して何らかのシステム的、人間の意思決定的な側面から変更が加わる場合、同時に正しいデータの定義にも変更が必要な可能性があります。</p><p>従って、正しいデータの定義は一度決めたらそれで終了ではなく、適時変更が入ることを前提とするのがベターです。</p><p>次にバリデーションチェックのやり方ですが、これはpandera<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>というpandasの拡張ライブラリを使うのがおすすめです。以下のように正しいデータの値域などを定義し、定義を満たさないものを検出することができます。</p><p>以下は<a href="https://pandera.readthedocs.io/en/stable/">pandera公式ドキュメント</a>からの引用です。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pandera <span class="keyword">import</span> Column, DataFrameSchema, Int, Check</span><br><span class="line"></span><br><span class="line">simple_schema = DataFrameSchema(&#123;</span><br><span class="line">    <span class="string">&quot;column1&quot;</span>: Column(</span><br><span class="line">        Int, Check(<span class="keyword">lambda</span> x: <span class="number">0</span> &lt;= x &lt;= <span class="number">10</span>, element_wise=<span class="literal">True</span>,  <span class="comment"># ここで正しいデータを定義</span></span><br><span class="line">                   error=<span class="string">&quot;range checker [0, 10]&quot;</span>))  <span class="comment"># 弾かれた際のメッセージも定義できる</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># データをDataFrameに入力</span></span><br><span class="line">fail_check_df = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&quot;column1&quot;</span>: [-<span class="number">20</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">30</span>],  <span class="comment"># 0 &lt;= x &lt;= 10 が正しいデータなので、-20と30は不正データ</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">simple_schema(fail_check_df)  <span class="comment"># バリデーションチェックを実行</span></span><br></pre></td></tr></table></figure><p>バリデーションチェックの実行結果は次のようになります。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">...</span><br><span class="line">SchemaError: &lt;Schema Column: <span class="string">&#x27;column1&#x27;</span> <span class="built_in">type</span>=<span class="built_in">int</span>&gt; failed element-wise validator <span class="number">0</span>:</span><br><span class="line">&lt;Check &lt;<span class="keyword">lambda</span>&gt;: <span class="built_in">range</span> checker [<span class="number">0</span>, <span class="number">10</span>]&gt;</span><br><span class="line">failure cases:</span><br><span class="line">   index  failure_case</span><br><span class="line"><span class="number">0</span>      <span class="number">0</span>           -<span class="number">20</span></span><br><span class="line"><span class="number">1</span>      <span class="number">3</span>            <span class="number">30</span></span><br></pre></td></tr></table></figure><h4 id="②データの分布から逸脱していないかチェック"><a href="#②データの分布から逸脱していないかチェック" class="headerlink" title="②データの分布から逸脱していないかチェック"></a>②データの分布から逸脱していないかチェック</h4><p>①番で弾かれなかったデータは必ず正しいデータという訳ではありません。理論上有り得るデータだが、入力ミスなどで真のデータと少し異なってしまうケースもあります。</p><p>このような、バリデーションチェックで検出できなかったデータから不正データを見つけるのはものによりますが、一般的には難しいと思います。ここではデータの分布という観点から、不正データの検出手法を解説します。</p><h5 id="データをソートして検出"><a href="#データをソートして検出" class="headerlink" title="データをソートして検出"></a>データをソートして検出</h5><p>一番簡単な方法として、データを昇順や降順に並べ替えて、明らかに他のデータの値から逸脱しているものを検出するというものがあります。エクセルでも簡単に行うことができるため、まずはこの方法から入ると良いかもしれません。</p><p>この手法はお手軽に行うことができる一方で、統計学的妥当性はありません。本質的には人間の感覚による判断になっているため、注意が必要です。</p><h5 id="正規分布による外れ値検出"><a href="#正規分布による外れ値検出" class="headerlink" title="正規分布による外れ値検出"></a>正規分布による外れ値検出</h5><p>データが正規分布<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>に従う場合、この手法が有効です。正規分布では <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.489ex" xmlns="http://www.w3.org/2000/svg" width="6.553ex" height="1.995ex" role="img" focusable="false" viewBox="0 -666 2896.4 882" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path><path id="MJX-1-TEX-N-B1" d="M56 320T56 333T70 353H369V502Q369 651 371 655Q376 666 388 666Q402 666 405 654T409 596V500V353H707Q722 345 722 333Q722 320 707 313H409V40H707Q722 32 722 20T707 0H70Q56 7 56 20T70 40H369V313H70Q56 320 56 333Z"></path><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D707"></use></g><g data-mml-node="mo" transform="translate(825.2, 0)"><use xlink:href="#MJX-1-TEX-N-B1"></use></g><g data-mml-node="mn" transform="translate(1825.4, 0)"><use xlink:href="#MJX-1-TEX-N-32"></use></g><g data-mml-node="mi" transform="translate(2325.4, 0)"><use xlink:href="#MJX-1-TEX-I-1D70E"></use></g></g></g></svg></mjx-container> 以内にデータの約95%、 <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.489ex" xmlns="http://www.w3.org/2000/svg" width="6.553ex" height="1.995ex" role="img" focusable="false" viewBox="0 -666 2896.4 882" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path><path id="MJX-1-TEX-N-B1" d="M56 320T56 333T70 353H369V502Q369 651 371 655Q376 666 388 666Q402 666 405 654T409 596V500V353H707Q722 345 722 333Q722 320 707 313H409V40H707Q722 32 722 20T707 0H70Q56 7 56 20T70 40H369V313H70Q56 320 56 333Z"></path><path id="MJX-1-TEX-N-33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path id="MJX-1-TEX-I-1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D707"></use></g><g data-mml-node="mo" transform="translate(825.2, 0)"><use xlink:href="#MJX-1-TEX-N-B1"></use></g><g data-mml-node="mn" transform="translate(1825.4, 0)"><use xlink:href="#MJX-1-TEX-N-33"></use></g><g data-mml-node="mi" transform="translate(2325.4, 0)"><use xlink:href="#MJX-1-TEX-I-1D70E"></use></g></g></g></svg></mjx-container> 以内に約99.7%が含まれることが知られています。※ <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.489ex" xmlns="http://www.w3.org/2000/svg" width="1.364ex" height="1.489ex" role="img" focusable="false" viewBox="0 -442 603 658" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D707" d="M58 -216Q44 -216 34 -208T23 -186Q23 -176 96 116T173 414Q186 442 219 442Q231 441 239 435T249 423T251 413Q251 401 220 279T187 142Q185 131 185 107V99Q185 26 252 26Q261 26 270 27T287 31T302 38T315 45T327 55T338 65T348 77T356 88T365 100L372 110L408 253Q444 395 448 404Q461 431 491 431Q504 431 512 424T523 412T525 402L449 84Q448 79 448 68Q448 43 455 35T476 26Q485 27 496 35Q517 55 537 131Q543 151 547 152Q549 153 557 153H561Q580 153 580 144Q580 138 575 117T555 63T523 13Q510 0 491 -8Q483 -10 467 -10Q446 -10 429 -4T402 11T385 29T376 44T374 51L368 45Q362 39 350 30T324 12T288 -4T246 -11Q199 -11 153 12L129 -85Q108 -167 104 -180T92 -202Q76 -216 58 -216Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D707"></use></g></g></g></svg></mjx-container> は平均、 <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.292ex" height="1ex" role="img" focusable="false" viewBox="0 -431 571 442" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-I-1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><use xlink:href="#MJX-1-TEX-I-1D70E"></use></g></g></g></svg></mjx-container> は標準偏差</p><p><img src="/images/20210423b/image.png"></p><p>引用：<a href="https://ai-trend.jp/basic-study/normal-distribution/normal-distribution/">https://ai-trend.jp/basic-study/normal-distribution/normal-distribution/</a></p><p>従って、これらを逸脱したデータを不正データの可能性有りとみなすのは、一定の統計学的妥当性があります。</p><p>実装例として、<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="2.423ex" height="1.532ex" role="img" focusable="false" viewBox="0 -666 1071 677" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-1-TEX-N-32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path id="MJX-1-TEX-I-1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mn"><use xlink:href="#MJX-1-TEX-N-32"></use></g><g data-mml-node="mi" transform="translate(500, 0)"><use xlink:href="#MJX-1-TEX-I-1D70E"></use></g></g></g></svg></mjx-container>を越えたものが検出される様子を以下に示します。10番目の<code>10000</code>のデータが外れ値（不正データ）の想定です。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">    price</span><br><span class="line"><span class="number">0</span>     <span class="number">100</span></span><br><span class="line"><span class="number">1</span>     <span class="number">200</span></span><br><span class="line"><span class="number">2</span>     <span class="number">100</span></span><br><span class="line"><span class="number">3</span>      <span class="number">50</span></span><br><span class="line"><span class="number">4</span>     <span class="number">120</span></span><br><span class="line"><span class="number">5</span>     <span class="number">200</span></span><br><span class="line"><span class="number">6</span>     <span class="number">150</span></span><br><span class="line"><span class="number">7</span>     <span class="number">100</span></span><br><span class="line"><span class="number">8</span>      <span class="number">80</span></span><br><span class="line"><span class="number">9</span>      <span class="number">20</span></span><br><span class="line"><span class="number">10</span>  <span class="number">10000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mean = df.mean()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>std = df.std()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df[<span class="string">&#x27;price&#x27;</span>] &gt; (mean + <span class="number">2</span> * std).values[<span class="number">0</span>]</span><br><span class="line"><span class="number">0</span>     <span class="literal">False</span></span><br><span class="line"><span class="number">1</span>     <span class="literal">False</span></span><br><span class="line"><span class="number">2</span>     <span class="literal">False</span></span><br><span class="line"><span class="number">3</span>     <span class="literal">False</span></span><br><span class="line"><span class="number">4</span>     <span class="literal">False</span></span><br><span class="line"><span class="number">5</span>     <span class="literal">False</span></span><br><span class="line"><span class="number">6</span>     <span class="literal">False</span></span><br><span class="line"><span class="number">7</span>     <span class="literal">False</span></span><br><span class="line"><span class="number">8</span>     <span class="literal">False</span></span><br><span class="line"><span class="number">9</span>     <span class="literal">False</span></span><br><span class="line"><span class="number">10</span>     <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>10番目のデータがTrueになり、外れ値（不正データ）が検出できています。</p><h3 id="不正データの再発防止"><a href="#不正データの再発防止" class="headerlink" title="不正データの再発防止"></a>不正データの再発防止</h3><p>不正データを検出し、それらに対して削除などの対応を行った場合、それで終わりではまた再発する可能性があります。</p><p>例えば、不正データの発生原因が人間の介入によるものであった場合、人間が介入する割合を最小限に抑えるようシステム化を進める、人間が介入した際はそのデータのチェックを2人以上で行うなど、人間の作業フローを交えて不正データが発生しない仕組み作りを行う必要があります。</p><p>また、不正データの発生原因がシステムの故障によるものである場合、そのシステムを監視し、異常が検知された場合はその期間のデータを別の場所に隔離するなどの対応が必要になると思います。</p><p>このように、不正データを検知した際は、恒久、暫定的な再発防止策を早急に考える必要があります。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回は実世界データの品質が悪いことと、その対処法について解説しました。</p><p>これからの時代は増々データの品質が重視されると思いますので、引き続きデータに対する知識を深めていきたいと思います！</p><p>最後まで読んでくださり、ありがとうございました！</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">欠損値補完： <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.interpolate.html">https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.interpolate.html</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">pandera： <a href="https://pandera.readthedocs.io/en/stable/">https://pandera.readthedocs.io/en/stable/</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">正規分布の性質： <a href="https://ai-trend.jp/basic-study/normal-distribution/normal-distribution/">https://ai-trend.jp/basic-study/normal-distribution/normal-distribution/</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。TIG DXユニットの村上です。&lt;/p&gt;
&lt;p&gt;私は大学時代から深層強化学習の研究をしていますが、分野的にほとんど実世界のデータを扱うことがありませんでした。そんな私ですが、実務で実世界データの分析を行う機会があり、その違いに多くの学びがありました。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
    <category term="データ分析" scheme="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90/"/>
    
    <category term="データ品質" scheme="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E5%93%81%E8%B3%AA/"/>
    
    <category term="欠損値" scheme="https://future-architect.github.io/tags/%E6%AC%A0%E6%90%8D%E5%80%A4/"/>
    
  </entry>
  
  <entry>
    <title>はじめてのリーダー論 ～もしも「明日からリーダーやって」と言われたら～</title>
    <link href="https://future-architect.github.io/articles/20210423a/"/>
    <id>https://future-architect.github.io/articles/20210423a/</id>
    <published>2021-04-22T15:00:00.000Z</published>
    <updated>2021-04-23T02:16:22.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、そして、初めまして！フューチャーに2015年に新卒で入社しました<strong>大野恭兵（おおのきょうへい）</strong>と申します。</p><p>技術ブログの中でも異色（！？）の「リーダー論」を、私の具体的なエピソードを交えつつお話します。</p><h2 id="この記事が想定する読者"><a href="#この記事が想定する読者" class="headerlink" title="この記事が想定する読者"></a>この記事が想定する読者</h2><p>主に <strong>「初めてリーダーになったはいいが、正直何をすればよいか分からない」</strong> というようなリーダーの初心者の方に向けて参考になると思います。</p><p>※ここで言うリーダーとは、チームリーダー（チームの責任者）という意味で用いています。</p><p>私くらいの年次（入社6年目）になりますと、リーダーポジションにつく機会が増えます。で、そうなったときに必ずぶつかる壁というのが、<strong>メンバーからリーダーへのポジションが変わったことによる、思考・アクションの変化への対応です。</strong></p><p>ポジションが変わると、考えるべきことも変わります。</p><p>ですので、この記事では <strong>リーダーになった初手の初手にまず何を考えれば良いか？</strong> という内容を私の経験を元に書かせていただきます！</p><p>将棋で言うところの「序盤」に当たる部分、と考えていただければと思います。</p><h2 id="私のリーダー経験について"><a href="#私のリーダー経験について" class="headerlink" title="私のリーダー経験について"></a>私のリーダー経験について</h2><img src="/images/20210423a/achievement-5597527_640.png" class="img-middle-size"><blockquote><p><a href="https://pixabay.com/ja/users/mediamodifier-1567646/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=5597527">Mediamodifier</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=5597527">Pixabay</a>からの画像</p></blockquote><p><strong>じゃあアンタはどんな経験をしてきたんだよ？</strong> という疑問が浮かんでいるかと思いますので、私のリーダー経験を少しお話します。</p><p>主に大規模プロジェクト内のチームリーダーを <strong>1年間以上</strong> 経験。チーム規模は<strong>10～30名</strong>。一筋縄ではいかないプロジェクトの推進がメインでした。</p><p>ただし、上記は私が進んで「リーダーやります！」と立候補したわけではなく、「明日からリーダーをやってね」と言われてのものでした。コンサルティング業界は仕事のスピード感が違う！と方方で言われていますが、このときほど「スピード感」を実感したときはありませんでした。</p><p>とはいえ、こうしたリーダーになるという経験は業界ではさほど珍しくないかと思いますし、成長へのチャンスです。こういった、一見すると無茶振りとも言うべき要望にどう答えていったのか…をこれから紹介していこうと思います。</p><h2 id="リーダー就任の「序盤」に考えたこと"><a href="#リーダー就任の「序盤」に考えたこと" class="headerlink" title="リーダー就任の「序盤」に考えたこと"></a>リーダー就任の「序盤」に考えたこと</h2><p>私が最初に考えたことは以下３つです。</p><ol><li><strong>リーダーとして達成すべき目標を確認しておく</strong></li><li><strong>チームの置かれている現状を把握する</strong></li><li><strong>チームのメンバーと仲良くなっておく</strong></li></ol><p>これらを具体的に説明したいと思います。</p><h3 id="1-リーダーとして達成すべき目標を確認しておく"><a href="#1-リーダーとして達成すべき目標を確認しておく" class="headerlink" title="1. リーダーとして達成すべき目標を確認しておく"></a>1. リーダーとして達成すべき目標を確認しておく</h3><p>いきなりですが、すべてのタスクには目標があります。</p><p>例えば、コーディング。１行１行見やすく、品質高く納期通りに仕上げる、みたいな目標は割と見えやすいですよね。実はここはリーダーも同じです。<strong>あなたがリーダーになったからには、リーダーとして達成すべき「目標」があるはずです。</strong></p><p>そしてあなたをリーダーにした上司は、それを達成してくれるはずだ！という期待を込めてあなたをリーダーにしています。</p><p>ですので、リーダーとして最初に考えるべきは</p><ul><li><strong>「自分が何を期待されているのか（達成すべき目標は何か）」</strong></li><li><strong>「そのために自分がすべきタスクは何か」</strong><br>かなと思います。</li></ul><p>ここがまずズレると、シビアな話ですが上司があなたに期待していた動きと違うことになり、評価を落とすことになってしまいます。</p><p>そして、出来れば自分で考えた答えを上司とすり合わせることもやっておくべきだと思います。</p><p>私の場合は、主にチームの立て直しがメインでしたので、</p><ul><li>「プロジェクトのマイルストン（例えば、開発フェーズ）の終わりが●月末なので、ここまでに全機能の開発を完了する」</li><li>「そのために自分はチームをマネジメントして、開発完了できるような計画・作戦立てをします」<br>みたいなことを考えて、実際にすり合わせしていました。</li></ul><h3 id="2-チームの置かれている現状を把握する"><a href="#2-チームの置かれている現状を把握する" class="headerlink" title="2. チームの置かれている現状を把握する"></a>2. チームの置かれている現状を把握する</h3><p>私はヘルプでチームリーダーになる機会が多かったので、現状を把握することも必要でした。</p><p>私が確認していたのは</p><ul><li>チームメンバーには誰がいるのか</li><li>メンバーそれぞれが持っているタスクは何か？</li><li>それぞれのタスクの優先度・期日は？</li><li>大変そうな人（タスク過多）はいないか？</li></ul><p>でした。</p><p>チームとして持っているリソースの確認と、それぞれのメンバーの持ち物（タスク）を出来得る限りすべて把握する。そして、それぞれの優先度・期日を改めて確認する。</p><p>こうすることで、<strong>実はやらなくてもよいタスクをやっている可能性を潰すことが出来ます。</strong>そして、その空いた時間で優先度の高いタスクを実施してもらう。</p><p>1.で設定した目標を達成するために、今やっていることは本当に「今やるべきこと」なのか？ということを再確認する。そういう意味で、現状把握はとても重要です。</p><h3 id="3-チームのメンバーと仲良くなっておく"><a href="#3-チームのメンバーと仲良くなっておく" class="headerlink" title="3. チームのメンバーと仲良くなっておく"></a>3. チームのメンバーと仲良くなっておく</h3><p><strong>実はこれが一番重要かもしれません。</strong></p><p>世の中には定量的マネジメント手法が多く溢れていますね。たしかに、定量的に物事を見るというのは大事な要素で欠かすことのできないものです。</p><p>ただし、実際にタスクを進めるのは「人」です。数字では語れない要素を数多く持っています。</p><p>人は感情を持つ生き物ですので、正味な話、やりたくない仕事とかやる気が出ないとかあるはずです。（かくいう私だってそうです）</p><p>そういった一人ひとりのメンバーの趣味・嗜好、モチベーションを知る。それをすることで、<strong>「この人はこういうタスクでモチベーションが上がってバリューを出してくれるから、このタスクを振ろう」</strong> という考え方がいずれ出来ます。</p><p>そういう動きができる第一歩として、まずはメンバーと仲良くなることは有効かなと思います。私はお酒が飲めませんので飲みニュケーションは出来ませんでしたが、（傍から見れば）くだらない雑談を多くすることで相手の本音を色々聞き出したりしていました。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>さて、少し雑多に書いてしまいましたがいかがでしたか。</p><p>正直な話、リーダーなんてなってみないと分からないところが多くあります。と同時に、その経験から得られるものも多いです。</p><p>この記事が「初めてのリーダー」となる方に役立つものになればこれ幸い、ということでシメとさせていただきます！</p><p>ここまで読んで頂きありがとうございました！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、そして、初めまして！フューチャーに2015年に新卒で入社しました&lt;strong&gt;大野恭兵（おおのきょうへい）&lt;/</summary>
      
    
    
    
    <category term="Management" scheme="https://future-architect.github.io/categories/Management/"/>
    
    
    <category term="マネジメント" scheme="https://future-architect.github.io/tags/%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88/"/>
    
    <category term="リーダーシップ" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%BC%E3%83%80%E3%83%BC%E3%82%B7%E3%83%83%E3%83%97/"/>
    
  </entry>
  
  <entry>
    <title>CircleCIでMarkdownのリンク切れを自動検知する</title>
    <link href="https://future-architect.github.io/articles/20210422b/"/>
    <id>https://future-architect.github.io/articles/20210422b/</id>
    <published>2021-04-21T15:00:01.000Z</published>
    <updated>2021-04-22T02:03:14.451Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20210422b/chain-312403_640.png" class="img-small-size"><blockquote><p><a href="https://pixabay.com/ja/users/clker-free-vector-images-3736/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=312403">Clker-Free-Vector-Images</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=312403">Pixabay</a>から</p></blockquote><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>フューチャー棚井龍之介です。</p><p>私のチームでは、「システムの設計情報」や「実装に関わる業務知識」などを、<code>README.md</code> に整理して GitHub 管理しています。</p><p>設計資料や業務系のドキュメントが蓄積され、何度も更新され続けることに伴い、「あれ、この資料のリンクが切れてる。オリジナルのファイルはどこだっけ？」と探す機会が増えてきました。</p><p>本来ならば PullRequest のレビュー時に気付くべきですが、ファイル名のちょっとしたスペルミスや資料パスの変更などだと、目視でのチェックには限界があります。</p><p>こういった状況への対応として「<strong>リンク切れを自動検知する</strong>」ために、CircleCI で Markdown ファイルのリンク切れを検知できるようにしました。</p><h2 id="完成版コード"><a href="#完成版コード" class="headerlink" title="完成版コード"></a>完成版コード</h2><p><a href="https://github.com/r-ryu/markdown-link-checker"><img src="https://github-link-card.s3.ap-northeast-1.amazonaws.com/r-ryu/markdown-link-checker.png" width="460px"></a></p><p><a href="https://github.com/r-ryu/markdown-link-checker">https://github.com/r-ryu/markdown-link-checker</a></p><h1 id="使うツール"><a href="#使うツール" class="headerlink" title="使うツール"></a>使うツール</h1><p>Markdown チェックのために、<a href="https://github.com/tcort/markdown-link-check">markdown-link-check</a> を利用します。<br>Markdown テキストからリンクを抽出し、各リンクが生きている（200 OK）か死んでいるかをチェックします。</p><blockquote><p>markdown-link-check<br>Extracts links from markdown texts and checks whether each link is alive (200 OK) or dead.</p></blockquote><p>node のツールなので、<a href="https://github.com/tcort/markdown-link-check#installation">npm でインストール</a>すれば、任意の環境でリンクチェックできます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Usage: markdown-link-check [options] [filenameOrUrl]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -p, --progress         show progress bar</span><br><span class="line">  -c, --config [config]  apply a config file (JSON), holding e.g. url specific header configuration</span><br><span class="line">  -q, --quiet            displays errors only</span><br><span class="line">  -v, --verbose          displays detailed error information</span><br><span class="line">  -a, --alive &lt;code&gt;     comma separated list of HTTP code to be considered as alive</span><br><span class="line">  -r, --retry            retry after the duration indicated <span class="keyword">in</span> <span class="string">&#x27;retry-after&#x27;</span> header when HTTP code is 429</span><br><span class="line">  -h, --<span class="built_in">help</span>             display <span class="built_in">help</span> <span class="keyword">for</span> <span class="built_in">command</span></span><br></pre></td></tr></table></figure><h1 id="CircleCIへの記述"><a href="#CircleCIへの記述" class="headerlink" title="CircleCIへの記述"></a>CircleCIへの記述</h1><p>CircleCI の jobs 内で、markdown-link-check を呼び出します。</p><p><a href="https://github.com/tcort/markdown-link-check#check-links-from-a-local-markdown-folder-recursive">ツール本家の README</a> に記載された <code>$ find . -name \*.md -exec markdown-link-check &#123;&#125; \;</code> による実行方法は、CircleCI で実行した際に欲しい挙動が得られません。リンク切れが1つでも存在したら Task failed で落として欲しいのですが、<code>-exec</code> による方法では「最初にチェックされたファイルに、リンク切れがある場合のみ」Task failed で落ちます。2つ目以降のファイルにリンク切れが存在しても、CircleCI は検知してくれません。</p><p>CircleCI のチェックで、リンク切れファイルが<strong>1つでも</strong>存在する場合は Task failed で落としてもらうために、<code>xargs</code> を利用します。xargs を利用することで、対象ファイル全てに一括でリンターチェックが適用できます。（-exec の場合、1ファイルごとに処理されます。）</p><ul><li>引用: <a href="https://future-architect.github.io/articles/20210331/">今さらながらfindパイセンについてまとめてみた（‐execオプション）</a></li></ul><figure class="highlight bash"><figcaption><span>-execとxargsの違い</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -exex</span></span><br><span class="line">$ find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.txt&quot;</span> -<span class="built_in">exec</span> <span class="built_in">echo</span> <span class="string">&quot;ファイル名: &#123;&#125;&quot;</span> \;</span><br><span class="line">ファイル名: ./test01.txt</span><br><span class="line">ファイル名: ./test02.txt</span><br><span class="line">ファイル名: ./test03.txt</span><br><span class="line">ファイル名: ./test04.txt</span><br><span class="line">ファイル名: ./test05.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># xargs</span></span><br><span class="line">$ find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.txt&quot;</span> | xargs <span class="built_in">echo</span> <span class="string">&quot;ファイル名: &quot;</span></span><br><span class="line">ファイル名:  ./test01.txt ./test02.txt ./test03.txt ./test04.txt ./test05.txt</span><br></pre></td></tr></table></figure><p>CircleCI で markdown-link-check を xargs により実行させるコートはこちらです。<br>ツール自体が node 製なので、プライマリイメージには <code>cimg/node:15.11.0</code> を利用しています。</p><figure class="highlight yml"><figcaption><span>config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="number">2.1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">markdown_link_check:</span></span><br><span class="line">    <span class="attr">docker:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">cimg/node:15.11.0</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">checkout</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Markdown-Link-Check</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">sudo</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">markdown-link-check</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Markdown-Link-Check</span></span><br><span class="line">          <span class="attr">command:</span> <span class="string">find</span> <span class="string">.</span> <span class="string">-name</span> <span class="string">\*.md</span> <span class="string">|</span> <span class="string">xargs</span> <span class="string">--max-lines=1</span> <span class="string">markdown-link-check</span></span><br><span class="line"></span><br><span class="line"><span class="attr">workflows:</span></span><br><span class="line">  <span class="attr">workflow:</span></span><br><span class="line">    <span class="attr">jobs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">markdown_link_check</span></span><br></pre></td></tr></table></figure><p>あとは CircleCI を回せば、リポジトリ内のリンク切れを全て検知してくれます。</p><h2 id="大量のリンク切れを検知したときは"><a href="#大量のリンク切れを検知したときは" class="headerlink" title="大量のリンク切れを検知したときは"></a>大量のリンク切れを検知したときは</h2><p>長期間メンテナンスされていないリポジトリの場合、markdown-link-check が大量のリンク切れを検知します。<br><code>.circleci/config.yml</code> に定義ファイルが追加された時点で、CircleCI が落ち続けてしまうので、まずはローカル実行でリンク切れ状況をチェックしましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ circleci <span class="built_in">local</span> execute --job markdown_link_check</span><br><span class="line">（略）</span><br><span class="line"></span><br><span class="line"><span class="comment">###############</span></span><br><span class="line"><span class="comment"># リンク切れあり</span></span><br><span class="line"><span class="comment">###############</span></span><br><span class="line">ERROR: 1 dead links found!</span><br><span class="line">[✖] ../docs/環境構築/README.md → Status: 400</span><br><span class="line"></span><br><span class="line">Task failed</span><br><span class="line">Error: task failed</span><br><span class="line"></span><br><span class="line"><span class="comment">###############</span></span><br><span class="line"><span class="comment"># リンク切れなし</span></span><br><span class="line"><span class="comment">###############</span></span><br><span class="line">[✓] ../../docs/環境構築/README.md</span><br><span class="line"></span><br><span class="line">Success!</span><br></pre></td></tr></table></figure><h2 id="特定のリンクは対象外にしたいとき"><a href="#特定のリンクは対象外にしたいとき" class="headerlink" title="特定のリンクは対象外にしたいとき"></a>特定のリンクは対象外にしたいとき</h2><p>正規表現で <code>ignorePatterns</code> を設定すれば、特定のリンクをチェック対象外に指定できます。</p><p>例えば、別サイトへのリンクをチェック対象外にしたい場合、<code>config.json</code> に以下設定を追加します。</p><figure class="highlight json"><figcaption><span>config.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;ignorePatterns&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;pattern&quot;</span>: <span class="string">&quot;^http&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>-c</code> オプションで、config.jsonを渡します。</p><figure class="highlight yml"><figcaption><span>config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">run:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Markdown-Link-Check</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">find</span> <span class="string">.</span> <span class="string">-name</span> <span class="string">&#x27;*.md&#x27;</span> <span class="string">|</span> <span class="string">xargs</span> <span class="string">--max-lines=1</span> <span class="string">markdown-link-check</span> <span class="string">-c</span> <span class="string">config.json</span></span><br></pre></td></tr></table></figure><p>その他、config.json の設定次第で様々な動作調整が可能です。<br>詳細は <a href="https://github.com/tcort/markdown-link-check#config-file-format">Config file format</a> をご参照ください。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>ドキュメントの増加やメンバーの入れ替えなどにより、徐々に資料の陳腐化が進んでしまうのはあるあるだと思います。資料パスのリンク切れは自動検知可能なので、こういった作業は自動化・仕組み化して、エンジニアは開発に集中しましょう。</p><p>今回は「CircleCI で Markdown チェックを自動化する」方法でした。</p><p>この方法が、読んでいただいた方の役に立てたら幸いです。</p><h2 id="参照記事"><a href="#参照記事" class="headerlink" title="参照記事"></a>参照記事</h2><ul><li><a href="https://github.com/tcort/markdown-link-check#config-file-format">markdown-link-check</a></li><li><a href="https://future-architect.github.io/articles/20210331/">今さらながらfindパイセンについてまとめてみた</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/images/20210422b/chain-312403_640.png&quot; class=&quot;img-small-size&quot;&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://pixabay.com/ja/users/clker-free-</summary>
      
    
    
    
    <category term="CI/CD" scheme="https://future-architect.github.io/categories/CI-CD/"/>
    
    
    <category term="Document" scheme="https://future-architect.github.io/tags/Document/"/>
    
    <category term="CircleCI" scheme="https://future-architect.github.io/tags/CircleCI/"/>
    
    <category term="Markdown" scheme="https://future-architect.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Technical Credibilityを築くということ</title>
    <link href="https://future-architect.github.io/articles/20210422a/"/>
    <id>https://future-architect.github.io/articles/20210422a/</id>
    <published>2021-04-21T15:00:00.000Z</published>
    <updated>2021-04-22T02:16:30.961Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20210414a/">春の入門連載2021</a>の7日目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIGの須田です。</p><p>私は新卒でフューチャーへ入社しITの世界でのキャリアが始まりました。その後、一度フューチャーを離れIoTプラットフォーマーのソリューションアーキテクトとして多くのお客様へ自社サービスの導入支援やIoTシステムの設計や構築の支援をしておりました。そうしたソリューションアーキテクトとしてのロールを通じて、多くの経験や学びを得ることができたのですが、その中でも特にTechnical Credibilityというキーワードについて自分の経験を交えて本ブログにて書いてみたいと思います。</p><p>本ブログのシリーズが、春の入門記事＆新人だった頃の自分に伝えたい内容を書こう、というテーマであったので迷わずこのテーマについて取り上げようと決めました。</p><h2 id="Technical-Credibilityとはなにか"><a href="#Technical-Credibilityとはなにか" class="headerlink" title="Technical Credibilityとはなにか"></a>Technical Credibilityとはなにか</h2><img src="/images/20210422a/climbing-4514507_640.jpg" class="img-middle-size"><blockquote><p><a href="https://pixabay.com/ja/users/rappellingusa-13786882/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4514507">Rappellingusa</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4514507">Pixabay</a>からの画像</p></blockquote><p>Technical Credibilityとは無理やり日本語に訳すと技術的信頼？信頼度？となります。Technical Credibilityの厳密な説明や定義が少ししにくいのですが、技術力やそのナレッジを通して信頼を得ていくこと、そのプロセス、と自分は解釈しています。</p><p>私はこの言葉をソリューションアーキテクトとして活動していた際に初めて知りました。ソリューションアーキテクトというロールはお客様の抱える課題や実現したいことに対して、主にテクニカルサイドからどのようにそれらを解決・実現できるかについて具体的なアドバイスやご支援するものです。そうしたロールであることからも、技術的なアドバイスを求められることが大きく期待されています。</p><p>こうした技術的なやり取りを通じてお客さんの信頼を得ていくプロセスをTechnical Credibilityを得る、とここでは表現したいと思います。</p><p>ソリューションアーキテクトの仕事そのものについてはこちらのエントリがとても参考になります。またこちらのエントリにもTechnical Credibilityの大切さについての言及があるのでこちらもぜひおすすめです。</p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fimai-factory.hatenablog.com%2Fentry%2F2017%2F12%2F12%2F192439" style="border: 0; width: 100%; height: 190px;" allowfullscreen scrolling="no"></iframe><p>フューチャーは経営とITをデザインするという言葉が示す通り、ソフトウェアエンジニアであってもお客様の業務を理解し、一緒にシステムを作り上げていくことが求められます。そのためTechnical Credibilityの考え方が同じく重要だと考えています。</p><p>ここからはTechnical Credibilityを築くことの重要性や、その際にどのような考えやアクションが重要になってくるのか、またその中でのちょっとしたTipsなんかにふれていきたいと思います。</p><h2 id="Technical-Credibilityがなぜ大事なのか"><a href="#Technical-Credibilityがなぜ大事なのか" class="headerlink" title="Technical Credibilityがなぜ大事なのか"></a>Technical Credibilityがなぜ大事なのか</h2><p>ITの世界に限らずTechnical Credibilityは私たちの日常のいたるところで適用できる考え方だと思っています。例えば体調が優れないときは病院へ行き専門医に原因や対処法を診察してもらいますし、何か資産運用を始めたいとなった際にFPに相談される方もいらっしゃると思います。こうしたシーンにおいて、私たちが知らないことやより深く知りたいことを、その知識や経験を有している専門家に相談しアドバイスをもらうという観点では私たちITコンサルタントに期待される役割と同様です。</p><p>まず初めに、こうした特別な事情を有した相談は誰にでもできるものではありません。そうした経験を有している方へアドバイスを求めることが自然です。そうした際にまず大事になってくるのが、この人に相談ができる・したいと認知してもらえていることです。私たちも期待した答えが得られなさそうだったり、詳しくない人に専門的なアドバイスを求めようとはまず思わないですよね。（あえて専門家以外の方にフラットな意見を聞くことが重視されているようなシーンでは話は変わるかもしれません）</p><p>こうしたアドバイスをもらう際に、その一連のやり取りの中でこれぞまさに求めていたアドバイスだ！といった助言をいただけたとします。そうすると、また似たような悩みや関連する相談事があった際に、ぱっとその人の顔が思い浮かび、また相談してみようかしらと考えるのは自然なことではないでしょうか。そうした体験を繰り返すことで、最初はさしあたった相談や課題が主だったのが、より多くのことについてもまずこの人に相談にのってもらいたい、この人なら何かアイデアがあるんではないだろうかと大きな信頼へと変わっていきます。</p><p>このプロセスこそがTechnical Credibilityが築かれることでもたらされる好循環で、こうした信頼がうまれることでより多くの機会を創出することにつながります。特にビジネスの世界ではこうした些細な相談事から大きなプロジェクトへつながったり、はたまた一緒に大きな仕事をしていこうという機会にもつながってきます。</p><p>それではTechnical Credibilityを築くためにはどうしたらよいのでしょうか。このアプローチは人それぞれあると思いますが、私自身の経験や私自身がこの人はとてもTechnical Credibilityを築くのが上手だなと思える人たちの振る舞いを見て学んだポイントについてふれていきたいと思います。</p><h2 id="Technical-Credibilityを築くには"><a href="#Technical-Credibilityを築くには" class="headerlink" title="Technical Credibilityを築くには"></a>Technical Credibilityを築くには</h2><h3 id="自分の経験・知識を還元できそうな領域を見つける"><a href="#自分の経験・知識を還元できそうな領域を見つける" class="headerlink" title="自分の経験・知識を還元できそうな領域を見つける"></a>自分の経験・知識を還元できそうな領域を見つける</h3><p>まずは自分が提供できる専門性や得意な領域を見つけることがとても大事です。これについて、何かの専門家である必要はなく、自分の経験に裏付けされた何かアドバイスができる、といったそういったもので十分かと考えています。例えば、DynamoDBを使ったデータモデルの設計実装経験とその過程で得られた知見や、ライブラリの選定を通じて得た各プロダクトの特徴や適したユースケースを理解している、はたまた倉庫業務のアプリケーション開発を通じて得られた倉庫業務の知識そのもの、特定の産業用途に特化した独自プロトコルのフォーマットのパース処理を通じて得られプロトコル仕様、こうした人それぞれの経験がまさに価値を生んでいきます。こうしたナレッジは誰しも持っているものではありません。さらに、商用環境での導入などを通じてより実践に即したノウハウなどは、やってみたの域を超えた高い付加価値を有しています。</p><p>こうした経験はこれから同じチャレンジをする人たちや、今まさにはまっている人たちにとってはとても有益な情報となります。このように、まずは自分がこれまで経験をその中で培ったナレッジから何か貢献できることから始めていくことで、その人のTechnical Credibilityを築いていくことができるのではないでしょうか。こうした過程を重ねていくことで、○○のことなら前にｘｘさんが教えてくれたからまた相談してみよう、ぜひメンバとして一緒にやってもらいたいといったラベリングができあがり、より大きな相談事をもらえたり、チャンスへつながっていくのではないでしょうか。とにもかくにも、自分の経験や知識を惜しげもなくシェアしていくことが大事な一歩かと考えます。</p><p>例えばこのように普段使っている便利な小技だったり、やってみて分かったはまりどころ、がっつり業務導入した知見などを技術ブログとして共有することも社内、社外問わず自分のラベリングを作るのに効果的な手法ですね。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200116/index.html" data-iframely-url="//cdn.iframe.ly/AJ0a9bh?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200803/index.html" data-iframely-url="//cdn.iframe.ly/vWZNkTt?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20201013/index.html" data-iframely-url="//cdn.iframe.ly/SAxxrkF?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><h3 id="常に最新の情報をキャッチアップする"><a href="#常に最新の情報をキャッチアップする" class="headerlink" title="常に最新の情報をキャッチアップする"></a>常に最新の情報をキャッチアップする</h3><p>個別の技術要素を正しく理解することが全ての基本です。これがやりたかったらこのAPIを使えばよさそうですねとか、このクラウドサービスとこの機能を組みあわせれば実現できそうですね、など様々な技術要素を考慮しながら具体的な課題へのアプローチを提示できることがまずは重要です。特に、昨今のクラウドサービスの拡充やそれらのサービスの成長スピードなんかを考えると、つい昨日までしてた苦労が実はマネージドサービスやSaaSとして提供されていたり、新しい機能が使えることでよりシンプルな実装になったりというのはよくあることとなってきました。そのため、最新の情報を常にキャッチアップしておくことも、不要な苦労を避けてもらうためにも非常に重要となってきます。</p><p>こうした個別の技術要素を正しく理解しながら、自分の引き出しを増やして、いざという時にすっとアイデアや解決策そのものを引き出せるようにしておくこともとても大事なスキルとなってきます。</p><p>情報収集の仕方についてはみなさん好みのやり方があると思うのでここではふれませんが、すぐに試せる環境を手元に用意しておくことをおすすめします。最近ではDockerコンテナなどでたいていの実行環境はdocker pullで利用できますし、試すだけの環境構築の敷居はかなり下がっていると感じます。また様々な機能がクラウドサービスやSaaSとしても提供されるようになり、何かを確認したい・知りたい時は自分で手を動かして理解する方がよほど早くなってきているとも思います。前述したように、昨今における機能の充実速度はとても速いです。たくさんの利便性を享受できる一方で、理解しなくてはいけない事柄も同時に増えてきているとも言えます。こうした状況では実際に手を動かしてプロダクトを理解し、想定通りの挙動がとれた・できなかったという経験を通じたキャッチアップや理解の方が結果的に効率的なことが多いです。特に自分で手を動かすことで、ただ知っている状態より深みが増します。さきほど書いた通り、自分が実際に体験した事柄が価値を生んでいきます。そのため、手元ですぐに試して確認したり失敗したりできる環境をメンテナンスしておくが非常に大事です。さてやってみるか、となった際にその初速を高められる準備をしておくことをおすすめします。</p><p>また最近では<a href="https://www.oreilly.com/">O’Reilly Media</a>のように、書籍を横断したキーワード検索ができるものもあり、短期間でよりピンポイントでの深堀をしたい際はこうしたサービスを活用していくのもおすすめです。</p><h3 id="課題の本質を考える"><a href="#課題の本質を考える" class="headerlink" title="課題の本質を考える"></a>課題の本質を考える</h3><p>ある悩みや課題に対して、具体的な解決策を説得力をもってぱっと提示できることの重要性についてはさきほど記載した通りです。</p><p>一方で、その課題やゴールが果たして適切なものなのかを一歩立ち止まって考えられることも、相談相手のためにも重要なことが多いです。例えば、実はその課題の本質には別の根本的な課題があって、そちらにアプローチするのがより効果が高いといったシーンです。専門家へ相談するようなシーンにおいては、相談者自身も何が課題になっているかが分からない、把握が難しいケースも多いです。特に初めての取り組みや、ナレッジの取得が難しいような課題に取り組む際に私たちも何が分からないのか分からない、といった経験が一度はあるのではないでしょうか。こうした状況下で設定した課題やゴールについて、相談を受ける側はいい意味で第三者的な見方ができます。あれ、これって本当に実現したいことなのかな、という事が浮かんだら投げかけてみることで相談者にも新たな気付きをもらすことができますし、何よりもこれこそがアドバイスの神髄ではないのでしょうか。</p><p>またITの世界では、同じ課題感であっても属する業種業態などによってもとらえ方やアプローチが変わってくることもあります。そのため、技術要素しか興味がないので、、と食わず嫌いせずに、その課題が置かれている業界背景などにも目を向けてみることで得られるものもたくさんあります。</p><p>こうしたいわゆるドメインへの理解をどう行っていくかですが、一般的な知識であれば今では色んな情報が簡単に手に入るのではないでしょうか。私はよく就職活動なんかで使われるような業界本なんかも最初は読んだりします。よりテクニカルなトピックについては、最近だと動画コンテンツが充実してきています。例えば、既に活用されている方も多いかもしれませんが<a href="https://www.udemy.com/">Udemy</a>もおすすめで、ITコンテンツ以外の業界に特化した技術コンテンツなども充実しています。例として、製造業ですと様々なフィールドネットワークのためのプロトコル技術や、PLCといった機器操作方法などのコンテンツもたくさんあり、体系だった理解を効率的に進められます。またYouTubeにもこうした多くの動画が公開されており、短い時間で体系だったキャッチアップが必要な際にとても有用なコンテンツとなっています。まずは気になるワードなどで検索してみることをおすすめします。</p><p>例えば私はIoT関連のプロジェクトを担当することが多いのですが、その際に専門的な機器設備の仕組みなどをキャッチアップするのにこのYouTubeチャンネルにお世話になってます。</p><p><a href="https://www.youtube.com/c/Theengineeringmindset/featured">https://www.youtube.com/c/Theengineeringmindset/featured</a></p><p>ちなみに実機を使った何か確認がしたい！という場合はヤフオクだと専門的なデバイスも入手しやすいのでこちらもおすすめです。</p><h3 id="どうしてそうするのか・したのかを蓄積する"><a href="#どうしてそうするのか・したのかを蓄積する" class="headerlink" title="どうしてそうするのか・したのかを蓄積する"></a>どうしてそうするのか・したのかを蓄積する</h3><p>どんなシステムや技術課題、業種業態の話であっても、実現したいことやそのポイントには多くの共通点があることが多いです。そのため、どうしてそのような判断をしたのか、どのようなアドバイスのステップや検討を経由したのか、といったログを残しておくことも非常に重要です。これは前述した引き出しから適したアドバイスを素早く引き出せることにもつながります。</p><p>Architecture Decision Records(以下ADRs)をご存じでしょうか。私はロール上、システムアーキテクトとして実現したい仕組みや解決したい課題へのアプローチを立案することも多いのですが、ADRsのアプローチは非常に有用です。どういう過程を経由したのか、その各過程ではどういった考えあったのか、を形として残すことでなぜそうするのかを第三者にもステップを追ってシェアすることができます。どんなに解決策やアプローチが優れていたとしても、そこに納得感が伴わないとなかなか行動に移しにくのも確かです。そういった観点でもこういったログを一緒に作る、というアクションもこれまでの考えをより納得感をもった理解を促すためにも非常に大事なのではないでしょうか。</p><p>具体的なADRの例ですがADRの具体的な作り方はこちらがとても分かりやすく整理されていておすすめです。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://scrapbox.io/kawasima/%25E5%25AE%259F%25E8%25B7%25B5ADR" data-iframely-url="//cdn.iframe.ly/ca2LjZK"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>新卒でフューチャーへ入社した際はいわゆるIT未経験だったこともあり、テクニカルな側面でのキャッチアップや研磨にとにかくがむしゃらだったことを今でも覚えています。</p><p>それを正しく人に伝え、そこからさらなる価値を生み出していくこと、そのためにより広い視野で食わず嫌いせずにキャッチアップを続けることの大事さを新人だったころに自分に伝えてあげたい、、、ぜひ自分の得意な領域に磨きをかけつつも、色々な技術に実際に触れてみて、みなさんしか作れないTechnical Credibilityの源泉を蓄えていってください！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20210414a/&quot;&gt;春の入門連載2021&lt;/a&gt;の7日目です。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こん</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="春の入門連載" scheme="https://future-architect.github.io/tags/%E6%98%A5%E3%81%AE%E5%85%A5%E9%96%80%E9%80%A3%E8%BC%89/"/>
    
    <category term="新人向け" scheme="https://future-architect.github.io/tags/%E6%96%B0%E4%BA%BA%E5%90%91%E3%81%91/"/>
    
    <category term="技術的信頼" scheme="https://future-architect.github.io/tags/%E6%8A%80%E8%A1%93%E7%9A%84%E4%BF%A1%E9%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>The Apache Wayのお話</title>
    <link href="https://future-architect.github.io/articles/20210421b/"/>
    <id>https://future-architect.github.io/articles/20210421b/</id>
    <published>2021-04-20T15:00:01.000Z</published>
    <updated>2021-04-21T03:54:26.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、<a href="/articles/20201107/">フューチャーOSS推進タスクフォース</a>の藤野です。</p><p>私が現在参加している<a href="https://www.apache.org/">The Apache Software Foundation（ASF）</a>の基本理念の一つである<a href="https://www.apache.org/theapacheway/">The Apache Way</a>について紹介します。</p><p>The Apache Wayを通して、ASFのことを少しでも知ってもらえたらと思います。</p><h2 id="The-Apache-Wayとは？"><a href="#The-Apache-Wayとは？" class="headerlink" title="The Apache Wayとは？"></a>The Apache Wayとは？</h2><p>この記事を読んでいる多くの方は、開発者や利用者等、様々な立場でOSSに何らかの形で関わりを持っていると思いますので、The Apache Software Foundationやそこで開発されているのOSSについていくつか程度の差はあれどご存知かと思われます。</p><p>The Apache Software Foundation とは、HTTPDやTomcat等、数多くのOSSプロジェクトの開発を支援している非営利団体で、世界で成功しているOSSコミュニティの一つです。</p><p>The Apache Wayとは、このThe Apache Software Foundationがどのようにプロジェクトを統治するのか、コミュニティ運営の基本指針のようなもので、ASFプロジェクトで長年にわたって使用されているコミュニティの振る舞いや運用方法のガバナンスモデルを提供します。</p><p>そしてこのThe Apache Wayは、コミュニティメンバによって其々捉え方が異なり、多くの解釈があります。<br>今日は、このThe Apache Wayの（私的な）解釈をまとめてみました。</p><h2 id="The-Apache-Wayの主要コンセプト"><a href="#The-Apache-Wayの主要コンセプト" class="headerlink" title="The Apache Wayの主要コンセプト"></a>The Apache Wayの主要コンセプト</h2><p>The Apache Wayを紐解くと4つに分割できます。そしてそのコンセプトは其々次の通りです。</p><ul><li><strong>MERITOCRACY（成果・実績主義）</strong><br>成果・実績によって評価され、統治され、その影響力は、公的に獲得したMerit、つまりコミュニティに貢献することに基づいています。</li><li><strong>Community</strong><br>組織ではなく、個人がASFに参加します。<br>相互に信頼し、互いに尊敬します。<br>BDFL（Benevolent Dictators For Life）は許可されません。</li><li><strong>Collaborative Development</strong><br>ASFのProjectは共同開発によって行われます。<br>コミュニティはコラボレーションなしでは成長できません。<br>コミュニティ全体で技術的な方向性を決定します。</li><li><strong>Open Communications</strong><br>Codeと意思決定に関連するすべての議論はPublicにアクセス可能でなければなりません。</li></ul><p>この4つの主要コンセプトをそれぞれ深堀りしてみましょう。</p><h2 id="MERITOCRACY"><a href="#MERITOCRACY" class="headerlink" title="MERITOCRACY"></a>MERITOCRACY</h2><p>まずは、MERITOCRACY（成果・実績主義）です。</p><p>ASFでは、すべての個人に対して参加する機会が与えられますが、その影響力は、公的に得られたMerit、つまりコミュニティに貢献した実績に基づいています。</p><p>では、そのMeritとは何でしょうか？Meritとは、コミュニティにとって有用な目に見える作業の実績です。そして、そのMeritはコード実績だけではありません。ほとんどのコミュニティは、ドキュメント、Webサイト、インフラストラクチャ、メーリングリストのヘルプ、およびバグレポートの等の貢献も高く評価しています。つまり、様々なロールのユーザがコミュニティに貢献することが出来ます。</p><p>また、Meritには様々な側面があります。</p><ul><li><strong>Meritは所属に関係なく個人にあります</strong><br>重要なのは、「あなたが誰であるかではなく、あなたが何をするか」です。<br>Meritは貢献者の所属する組織や企業には全く影響を受けません。</li><li><strong>Meritには有効期限がありません</strong><br>貢献者が、コミュニティへの参加をしばらくの間やめていたとしても、そのMeritは消えることはありません。後でコミュニティに戻ってきても、通常はコミュニティ内でのMeritを維持します。</li><li><strong>Meritは譲渡できません</strong><br>あるコミュニティで得られたMeritは、必ずしも別のコミュニティで評価されるとは限りません。Meritの認識は、コミュニティによって大きく異なります。</li><li><strong>より多くMeritを持っている人は、より多くの責任を得ます</strong><br>これはMeritの最も重要な側面のひとつです。貢献者のMeritに対する最も明白な報酬は、そのコミュニティ内のコミッターになることです。また、コミッターは、プロジェクトのリポジトリへの書き込みアクセス権を持っているので、コード、Webサイト等に直接貢献することが出来ます。 Meritを提供し続けているコミッターは、PMCになれる場合があります。<br>つまり、誰でもコミュニティに貢献することは出来ますが、全ての貢献者がコミッタになれるわけではありません。私自身もコミッタになる前は3桁以上のパッチを提出しています。コミッタからPMCになるにも2年以上活動を継続しました。<br>今コミュニティにいるコミッタやPMCは皆それぞれコミュニティへの大きな貢献によって、その地位にいます。</li></ul><h2 id="Community"><a href="#Community" class="headerlink" title="Community"></a>Community</h2><p>次は、Communityです。ASFでは、Communityの定義について厳格に定められています。</p><p>ASFでは、取締役会、他の役員、コミッター、およびメンバーを含むすべての参加者は、個人として参加しています。決して、企業からの参加であってはなりません。</p><p>これは、ASFの強みの1つであり、完全なベンダーの中立性を保障します。しかしながら、実際、一部の企業には雇われコミッタのような方もいますが、そうったコミッタに関しても企業として参加しているのではなく、あくまで個人参加となります。その貢献実績は個人にのみあります。前述したMERITOCRACYにあるように、個人の貢献実績によってコミュニティ内の役割が決まるので、一部の企業が自由にそのプロジェクトのコミッタを追加することはできません。</p><p>では、あるOSSプロダクトをASFに寄与する場合（Apache Incubator）はどうでしょうか？この場合、開発者が特定の企業から構成されていることは良くあることです。そのような場合においても、Apache Incubatorの卒業要件（TLPへの昇格要件）としてコミッタの多様性、つまり、コミッタが様々な企業からであることを示さなければなりません。</p><p>また、コミュニティ内では参加者全員が相互に信頼し、互いに尊敬することを期待します。そして、<a href="http://apache.org/foundation/policies/conduct.html">その行動規範</a>も明確に定義しています。</p><p>ASFのフラットな構造は、役職に関係なく参加者は同じ発言力を持ち、平等であるべきとされています。専門知識は高く評価されている一方で、BDFL（Benevolent Dictators For Life）は許可されていません。</p><p>そして、このCommunityにおいて、もっとも重要なコンセプトは「Community over Code」です。「Community over Code」とは、ASF内で非常に良く引用される格言で、健全なコミュニティが優れたコードよりもはるかに重要であることを明言しています。</p><p>優れたソフトウェアを創造することを目的とするASFが、その作り出されたプログラムコードそのものよりも、コミュニティ自体を大事にするASFの最も重要な特徴として強調されています。</p><h2 id="Collaborative-Development"><a href="#Collaborative-Development" class="headerlink" title="Collaborative Development"></a>Collaborative Development</h2><p>ASFの各プロジェクトは共同開発によって行われています。</p><p>コミュニティ全体によって方向性を決定しするため、主要な決定事項については、コンセンサスを得ようと努めています。この際に行われる意思決定は怠惰なコンセンサスアプローチ（lazy consensus approach）で行われます。これは以下のような数字による投票で行います。</p><ul><li>+1　賛成票</li><li> 0　棄権、意見なし</li><li>-1　反対票</li></ul><p>コンセンサスは100％の合意を意味するものではなく、 コミュニティの合意には、-1の投票が無く、いくつかの+1の投票を獲得するだけで十分です。反対票には代替案または反対票の理由の詳細な説明を含める必要があります。また、投票は通常72時間(3日)ルールで行われます。</p><p>これはさまざまなタイムゾーンのプロジェクト参加者が意思決定に参加できるように、十分な時間（少なくとも72時間）の投票が可能であることを保障します。</p><h2 id="Open-Communications"><a href="#Open-Communications" class="headerlink" title="Open Communications"></a>Open Communications</h2><p>ASFでは、その技術的な仕事はオープンに行われなければなりません。つまり、コードや技術的決定に関連するすべてのコミュニケーションが公開メーリングリストで行われる必要があります。メーリングリスト外の対談や会議でのディスカッションはすべての参加者がディスカッションして決定できるように、適切なメーリングリストに戻す必要があります。</p><p>コードや技術的決定に関連するプライベートな決定は許可されていません。私自身もApacheCon（ASF主催の国際カンファレンス）で他のコミッタ達とF2Fで議論することがあるのですが、そこで決めたことは、必ずその後開発用のメーリングリストに共有することを行っています。</p><p>もちろん、プロジェクトに非公開なメーリングリストはあります。しかしながら、ASFのすべての非公開メーリングリストには、セキュリティ問題など非公開にする特定の理由があります。</p><p>パブリックの場でできるだけ多くの仕事をするという概念は、The Apache Wayの基本であり、 オープンコミュニケーションは、誰もが自由にコミュニティに参加することを保障します。技術的な議論、コンセンサス、コードとドキュメントの作業をすべてオープンに行うことで、新しいユーザはメーリングリスト、アーカイブからプロジェクトの過去、現在、そして未来の方向性を知ることが出来ます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>The Apache Wayの主要なコンセプトを述べました。</p><p>これまでをまとめると、The Apache Wayとは、</p><p>「ASFの各プロジェクトでは、個人参加の原則により、ベンダーの中立性を促進し、特定の企業からの過度の影響を防ぎます。メンバーはその貢献実績により評価され、影響力は完全に平等です。プログラムコードや技術的な意思決定等の議論は全てのオープンで透過的でコンセンサスベースで行われます。」</p><p>と言い表せます。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>今回は私の解釈によるThe Apache Wayを述べました。</p><p>The Apache Wayは常に変化しフレキシブルで成長しています。</p><p>「There is no “one way” to The Apache Way. 」という言葉があります。</p><p>The Apache Wayは基本的な原則ではありますが、どう解釈するかは人それぞれです。このThe Apache Wayからも分かるように、ASFはコミュニティのガバナンスがしっかりしています。</p><p>そのため、これからコミュニティに参加しようと思っている人にとっては入り易いコミュニティだと思います。</p><p>ぜひ、参加してみてはいかがでしょう。</p><ul><li><a href="https://community.apache.org/gettingStarted/101.html">入門ページへ</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、&lt;a href=&quot;/articles/20201107/&quot;&gt;フューチャーOSS推進タスクフォース&lt;/a&gt;の藤野で</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
    <category term="OSS推進タスクフォース" scheme="https://future-architect.github.io/tags/OSS%E6%8E%A8%E9%80%B2%E3%82%BF%E3%82%B9%E3%82%AF%E3%83%95%E3%82%A9%E3%83%BC%E3%82%B9/"/>
    
    <category term="ApacheWay" scheme="https://future-architect.github.io/tags/ApacheWay/"/>
    
  </entry>
  
  <entry>
    <title>情報の民主化のために発信しましょう</title>
    <link href="https://future-architect.github.io/articles/20210421a/"/>
    <id>https://future-architect.github.io/articles/20210421a/</id>
    <published>2021-04-20T15:00:00.000Z</published>
    <updated>2021-04-21T01:08:15.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、<a href="https://www.inspace.co.jp/">フューチャーインスペース株式会社</a>の柴尾です。<a href="/articles/20210414a/">春の入門連載2021</a>の6日目です。</p><p>複数のプロジェクトでルーターやスイッチといった物理的な装置の設定から、パブリッククラウド（主にAWS, GCP）まで設計、構築、保守運用、それらのクラウド業務の請求が複雑なのでバックオフィス部門との調整を行っています。</p><h1 id="新人のころを思い出してみて"><a href="#新人のころを思い出してみて" class="headerlink" title="新人のころを思い出してみて"></a>新人のころを思い出してみて</h1><p>私は2010年4月にフューチャーインスペース株式会社の前身である株式会社アセンディアへ大学卒業後入社しました。</p><p>忘れもしない出来事として当時東京採用・大阪採用・福岡採用・大分採用が定期的にWeb会議で会話していたものの、私も出身の地元である大分から3月31日に東京本社で初めて一同に介して、「明日からこのメンバーで研修か、こなせるのかな？」などと不安と期待と感情が混ざっている中で、研修の受け入れ担当から「明日から研修はフューチャーグループ合同でやるから」と衝撃の一言がありました（笑）</p><p>青天の霹靂とはまさにこのことで当時は誰も予想していなかった、</p><ul><li>フューチャーアーキテクト株式会社</li><li>フューチャーワン株式会社（当時は株式会社エルム）</li><li>フューチャーインスペース株式会社（当時は株式会社アセンディア）</li></ul><p>合同研修を初めて行いました。</p><p>研修の内容はこのブログ趣旨とは外れるので割愛しますが、この研修の体験は色々な意味でよかったと思います。</p><h1 id="新人の時に知りたかったあの知識"><a href="#新人の時に知りたかったあの知識" class="headerlink" title="新人の時に知りたかったあの知識"></a>新人の時に知りたかったあの知識</h1><p>さて、ブログの主題としては今の私が思うのはズバリ「 <strong>情報の発信による効果</strong> 」です。</p><p>私はAWSを触れるようになったのは最近なのですが、公式のドキュメントや他の企業ブログ、個人ブログを見るだけで自分の中に落とし込むことができませんでした。</p><p>そのような中で、JapanAWS-UserGroupこと<a href="https://jaws-ug.jp/">JAWS-UG</a> に出会い、衝撃を受けました。</p><p>利用者側が主導してコミュニティの運営、イベントの運営含め自主的に動いていることだけではなく、参加者側がただただ参加してハイ終わりではなく、参加して聞いた内容をブログにまとめ上げる、それも早い人はイベント終わった瞬間に、そういったインプットからアウトプットまでのスピード感に驚かされました。</p><p>AWS公式漫画でも紹介されていますので、引用させていただきます。</p><p><a href="https://aws.amazon.com/jp/campaigns/manga/vol11-2/">https://aws.amazon.com/jp/campaigns/manga/vol11-2/</a></p><p>COVID19によりオンライン会議が以前に比べて活発になった昨今では、AWS、JAWS-UGだけではなく様々な企業、コミュニティによるオンラインイベントが行われています。もしこの記事を見ていただいている方の同時刻にもイベントが行われているかもしれません。</p><p>話を戻して、そういった中で個人的に感じた、 <strong>発信すること</strong> については、一般的なPDCAに当てはめることができて以下のような効果があると思っています。</p><table><thead><tr><th>Step</th><th>想定される効果</th></tr></thead><tbody><tr><td>Plan</td><td>発信する内容の整理する過程で知識を落とし込める、自分の理解が曖昧な部分を洗い出せる</td></tr><tr><td>Do</td><td>実際に発信する</td></tr><tr><td>Check</td><td>目に触れた人から反応がある（コメント、あるいはフィードバック）</td></tr><tr><td>Action</td><td>自分だけではカバーできなかった範囲でさらに視野が広がる</td></tr></tbody></table><p>例えば、以前私が参加したとある講座があり参加してきました。正直私自身、データベースをそこまで詳しいエンジニアではなかったものの、必死になってリアルタイムでまとめて即公開をチャレンジしてみました。<br>（それも分からないところを書いて丸投げする形で）</p><p><img src="/images/20210421a/%E6%83%85%E5%A0%B1%E5%85%B1%E6%9C%89__3.png"></p><p>すると、以下のように偶然時間が空いた人や少し経ってからポツポツとコメントを頂くようになって、</p><p><img src="/images/20210421a/%E6%83%85%E5%A0%B1%E5%85%B1%E6%9C%89__3_2.png"></p><p>自分の足りなかった範囲を補うコメントであったり、タイプミス部分含めて指摘が貰えて、結果的に理解がより深まるようになりました。</p><p><img src="/images/20210421a/%E6%83%85%E5%A0%B1%E5%85%B1%E6%9C%89__3_3.png"></p><h1 id="なぜ、そう思ったのか（思うようになったか）"><a href="#なぜ、そう思ったのか（思うようになったか）" class="headerlink" title="なぜ、そう思ったのか（思うようになったか）"></a>なぜ、そう思ったのか（思うようになったか）</h1><p>正直、私は積極的に情報公開するタイプではありませんでした。</p><p>ただ私が研修後に入った始めてのプロジェクトで積極的に内部に情報を展開する文化があり、その展開された情報に対して、誰かが反応するという様子を見ていたことから、自然と敷居が低くなっていったのかもしれません。</p><p>2010年当時は今ほどチャットツールが活発ではなくメールベースでしたが、そのような行為があったことを忘れないように今でもメールを保存しています。<br><img src="/images/20210421a/sample.jpg"></p><p>また、それほど瞬発的に情報を整理できるタイプでもなかったため、相手に伝える情報を整理してから、伝えることを繰り返して訓練を積みました。</p><p>自分の幅を広げようと技術系のセミナーに行くと知らないことばかりで衝撃を受けて、それらをメモして調べていく中でまとめるといった行為に繋がり、繰り返していくことでそれまで散り散りになっていた知識が紐付いてきて、結果として身に着けてきたかなと思います。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>私の新人の時に知りたかったあの知識「 <strong>情報を発信すること</strong> 」でした。</p><p>直接、知識というものではなく意識に近いものですが、結果的に知識へ繋がるものだと思います。</p><ul><li>情報の発信することは怖いですよね？</li><li>出す情報が間違っていない？</li><li>この情報を出しても意味ある？</li></ul><p>…と考えるより、とりあえず発信しましょう。<br>発信することから得られることのほうが結果的に大きいです。</p><p>間違えていれば、誰かが指摘してくれます。素直に受け止めて次につなげましょう。ただただダメじゃんというFBしてくる一定の層がいますが、批判することに価値を見出している勢は、そういった視点があるという新しい学びと考えることにしましょう。</p><p>出している情報に価値を見出すのは自分ではなく他の人です。出さない情報には価値が付けられません。実は他にも同じことを知りたくて困っている人がいるかもしれないと考えることにしましょう。</p><p>エンジニアの知識は教科書どおり前から順に定着することが難しいものです。でも、きっと繰り返し継続して行っていくことで、ある日弾けるようにそれまでの知識が繋がっていくでしょう。</p><p>ぜひ今を楽しんでください。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、&lt;a href=&quot;https://www.inspace.co.jp/&quot;&gt;フューチャーインスペース株式会社&lt;/a</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="新人向け" scheme="https://future-architect.github.io/tags/%E6%96%B0%E4%BA%BA%E5%90%91%E3%81%91/"/>
    
    <category term="情報発信" scheme="https://future-architect.github.io/tags/%E6%83%85%E5%A0%B1%E7%99%BA%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>議事メモ作成の心得</title>
    <link href="https://future-architect.github.io/articles/20210420a/"/>
    <id>https://future-architect.github.io/articles/20210420a/</id>
    <published>2021-04-19T15:00:00.000Z</published>
    <updated>2021-04-22T01:42:42.186Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。2020年10月入社の江口小夏です。<a href="/articles/20210414a/">春の入門連載2021</a>の5日目です。</p><p>新入社員の皆様、入社おめでとうございます！🌸</p><p>私は入社して約半年が経ちましたが、配属当初最も大変だと感じたのは議事メモ作成でした。この記事を読んでくださっている新入社員の方でも、議事録／議事メモ作成に時間を割いている方は多いのではないでしょうか？</p><p>私もまだまだ勉強途中ですが、少しでも議事録／議事メモを取る方の参考になればと思い筆を執りました。<br>ひとつの参考にしていただければ嬉しいです！</p><p>↓その他の議事メモ関連の記事はこちらから！↓</p><ul><li><a href="https://qiita.com/RuyPKG/items/abf72dde739e52364bcf">新人でも、楽がしたい！ ～議事録の準備～</a></li><li><a href="https://future-architect.github.io/articles/20210327/">議事録をサッと準備する</a></li></ul><h2 id="議事録-vs-議事メモ"><a href="#議事録-vs-議事メモ" class="headerlink" title="議事録 vs 議事メモ"></a>議事録 vs 議事メモ</h2><p><img src="/images/20210420a/writing.jpg"></p><p><a href="https://pixabay.com/photos/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1149962">Free-Photos</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1149962">Pixabay</a>からの画像</p><p>企業やプロジェクトによって「議事録」をとるか、「議事メモ」をとるか変わると思います。<br>本ブログで扱う言葉を定義するためにも、議事録と議事メモの違いを確認しておきます。</p><p>議事録は、</p><blockquote><p>会議の内容や発言者を正確に記録し、会議の進行に沿って記載する。品質が重要で表現なども正確に記録する。</p></blockquote><p>一方で、議事メモは、</p><blockquote><p>会議の内容や発言者を正確に記録することはもちろんだが、サマリや決定事項、ToDoを明確にすることが最も重要。品質よりもスピード優先。</p></blockquote><p>自分自身の経験を踏まえて、本ブログでは<strong>議事メモ</strong>を取る場合を想定して書いていきます！</p><h2 id="議事メモ作成の目的"><a href="#議事メモ作成の目的" class="headerlink" title="議事メモ作成の目的"></a>議事メモ作成の目的</h2><p>皆さまご存知かと思いますが、念のため議事メモをとる目的を確認します。<br>（目的は、議事録でも同じ。）</p><p>主な目的は、</p><ul><li><strong>決定事項とToDoの確認と承認を得る → 認識齟齬防止</strong></li><li><strong>会議不参加者が会議内容を理解できるようにする</strong></li></ul><p>です。</p><p>特に一つ目は非常に重要なため、発言者や決定事項に対して承認を得たかはしっかり記載しておく必要があります。</p><hr><p>さてここまでで議事メモとは何か？をおさらいしました。<br>ここからは、議事メモをとる際の私なりのマインド面についてお話していきます。</p><h2 id="議事メモ作成を楽しむために"><a href="#議事メモ作成を楽しむために" class="headerlink" title="議事メモ作成を楽しむために"></a>議事メモ作成を楽しむために</h2><p>最初は「大変だな…」と感じていた議事メモ作成でしたが、徐々に議事メモを作成するのが楽しくなってきました。<br>その理由は以下のとおりです。</p><p><strong>1.議事メモとることで会議の内容を自然とおさらいできる</strong><br><strong>2.重要書類を作成するという責任感を感じる</strong></p><p>それぞれ説明していきます。</p><hr><p><strong>1. 会議の内容を自然とおさらいできる</strong></p><p>新入社員の頃は「会議の内容がさっぱり分からない…」なんてこともあるかもしれません。<br>そんな状態で会議中に議事メモ作成は大変かもしれませんが、以下のような良いこともあるかと思います。</p><ul><li><strong>議事メモ作成過程において、分からない内容や単語を再度復習・確認できる</strong></li><li><strong>発言の背景から、発言者の意図を読み取ることができる</strong></li></ul><p>結果として、会議をおさらいして自分の糧にできます。<br>キャッチアップ方法の一つとして是非議事メモを活用してみてください！</p><p><strong>2. 重要書類をつくっている責任感を感じる</strong></p><p>（「責任感＝楽しい」かどうかは人それぞれかもしれませんが…）</p><p>先ほど<a href="#%E8%AD%B0%E4%BA%8B%E3%83%A1%E3%83%A2%E4%BD%9C%E6%88%90%E3%81%AE%E7%9B%AE%E7%9A%84">議事メモ作成の目的</a>でも述べた通り、議事メモは<strong>「内容の承認を得て、認識齟齬を防止する」</strong>役割があります。これは議事メモが会議において非常に重要な書類である、ということです。</p><p>例えばスポーツでも、責任感のあるエースポジションを任されたらプレッシャーもありますが、終えたときの達成感や喜びもひとしおですよね。議事メモに対してそのようなイメージを持って、自分は楽しんでいます。</p><hr><p>これまで私なりの議事メモの楽しみ方をご紹介しました。</p><p>次に、議事メモをとる場合のコツやポイントをお伝えします。</p><p>意識するポイントなどは人それぞれですので、参考になる部分をご覧になっていただければと思います。</p><h2 id="コツ・手法"><a href="#コツ・手法" class="headerlink" title="コツ・手法"></a>コツ・手法</h2><h3 id="議事メモ作成ではここを意識しよう"><a href="#議事メモ作成ではここを意識しよう" class="headerlink" title="議事メモ作成ではここを意識しよう"></a>議事メモ作成ではここを意識しよう</h3><p>議事メモを作成するときに意識しているポイントを書いていきます。</p><hr><ul><li><strong>最低限、発言者と大まかな発言内容は確実に記録する</strong></li></ul><p>会議が進行する中で発言を一言一句漏らさずに書こうとすると、記載が間に合わないこともあります。<br>そんな時は、少なくとも<strong>発言者</strong>と<strong>何についてどんな意見を</strong>言っているのかに集中して書くと、議事メモに記載すべき最低限の内容をおさえることができます。</p><ul><li><strong>「～ため」「～ので」を聞き逃さない</strong></li></ul><p>ほとんどの発言には背景や意図、目的があります。なぜその発言があったかを、会議に出席していない人が理解するためにも重要なため、意識して聞きましょう。</p><ul><li><strong>ToDoを明確にする</strong></li></ul><p>会議で挙がったタスクやToDo事項は正確に記載する必要があります。期限やアウトプットの方法など不明点があれば、先輩など会議参加者に確認するのがベターです。</p><ul><li><strong>論点を意識して会議に臨む</strong></li></ul><p>議事メモ作成者だけに限りませんが、「この会議では何を決めなければいけないのか」を意識しておくことが大切です。</p><p>特に新入社員の頃は、会議が進行するにつれて、会議の内容に頭が追いついていけなくなることもあるかと思います。<br>しかし、会議で決めなければいけないことを頭に置いておけば、迷子になってしまったときも立ち返る基準になるはずです。</p><ul><li><strong>決定事項の合意がとれているかを確認する</strong></li></ul><p>決めなければならないことに対して顧客の合意がとれているかは非常に重要です。認識齟齬を防止するためにも、議事メモを記載するときは合意が取れているかを意識しておくと良いかと思います。</p><ul><li><strong>議事メモへの記載は時系列に沿うことよりも分かりやすさが重要</strong></li></ul><p>会議では議論が行ったり来たりすることも多々あります。</p><p>そのとき時系列順にすべて記載していると、見返したときに議事メモの内容が分かりづらくなることがあります。議論が進む中で、同じトピックに戻ったときは、時系列が違っていても同じ章に記載すると分かりやすくなります。</p><h3 id="議事メモチェックポイント"><a href="#議事メモチェックポイント" class="headerlink" title="議事メモチェックポイント"></a>議事メモチェックポイント</h3><p>会議終了後に議事メモを修正・清書するときのチェックポイントをいくつか挙げてみます。</p><hr><ul><li><strong>文章に主語があるか？</strong></li></ul><p>日本語は主語が省略されがちです。何／誰についての発言かを明確にするためにも、主語がない場合は補填しましょう。</p><ul><li><strong>分かりやすい日本語／シンプルな文章になっているか？</strong></li></ul><p>議事メモを読んで、すんなりと内容を理解できる状態にする必要があります。修正し終わった後に、顧客の会議不参加者になったつもりで議事メモを読み返してみると修正箇所が見えてきます。</p><ul><li><strong>誤字脱字、表記ゆれがないか？</strong></li></ul><p>誤字・脱字や同じ単語を別表現にしない、用語は正式名称で記載できている（略語を使っていない）かは最終チェックとして確認しましょう。</p><blockquote><p>例：プロジェクト／PJ</p></blockquote><ul><li><strong>名称は正式なものになっているか？</strong></li></ul><p>企業名や用語は略語などを使わず正式に書きましょう。</p><blockquote><p>NG:　フューチャー<br>OK： フューチャー株式会社</p></blockquote><ul><li><strong>口語が残っていないか？</strong></li></ul><p>口語体や崩れた日本語表現は適当な文章に直しましょう。</p><blockquote><p>NG:　XXXって思ってるんですよね<br>OK:　XXXと考えている。</p></blockquote><blockquote><p>NG:　XXXみたいな感じかな<br>OK:　XXXのようなイメージをしている。</p></blockquote><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>私もまだまだ勉強中の身ですが、教わったこと・学んだことをまとめてみました。<br>気を付けるべき点は会社やプロジェクトによって異なると思いますので、ひとつの参考にしていただければ幸いです。</p><p>最後まで読んでいただきありがとうございました！</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><p><a href="https://qiita.com/RuyPKG/items/abf72dde739e52364bcf">新人でも、楽がしたい！ ～議事録の準備～</a><br><a href="https://future-architect.github.io/articles/20210327/">議事録をサッと準備する</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。2020年10月入社の江口小夏です。&lt;a href=&quot;/articles/20210414a/&quot;&gt;春の入門連載2021&lt;/a&gt;の5日目です。&lt;/p&gt;
&lt;p&gt;新入社員の皆様、入社おめでとうございます！🌸&lt;/p&gt;
&lt;p&gt;私は入社して約半年が経ちましたが、配属当初最</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="議事録" scheme="https://future-architect.github.io/tags/%E8%AD%B0%E4%BA%8B%E9%8C%B2/"/>
    
    <category term="春の入門連載" scheme="https://future-architect.github.io/tags/%E6%98%A5%E3%81%AE%E5%85%A5%E9%96%80%E9%80%A3%E8%BC%89/"/>
    
    <category term="新人向け" scheme="https://future-architect.github.io/tags/%E6%96%B0%E4%BA%BA%E5%90%91%E3%81%91/"/>
    
  </entry>
  
  <entry>
    <title>GUI GitツールのRebase, Cherry pick</title>
    <link href="https://future-architect.github.io/articles/20210420b/"/>
    <id>https://future-architect.github.io/articles/20210420b/</id>
    <published>2021-04-19T15:00:00.000Z</published>
    <updated>2021-04-20T01:28:50.505Z</updated>
    
    <content type="html"><![CDATA[<p>Gitを使っての開発で、指定のツールや好みのGitクライアントを使っていると思います。</p><p>ターミナルの黒画面でGitコマンドを使うのはちょっと不安、GUI画面から画面を確認しながらGitを操作したい方向けの記事です。</p><p>GitのBranch作成やCheckout, Commit, Pushまで使えた方向けに、次の段階としてRebase, Cherry Pickなどの実行方法を説明します。</p><h2 id="紹介するツール"><a href="#紹介するツール" class="headerlink" title="紹介するツール"></a>紹介するツール</h2><ul><li><a href="https://www.sourcetreeapp.com/">Sourcetree</a></li><li><a href="https://code.visualstudio.com/">Visual Studio Code</a> with <a href="https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph">Git Graphプラグイン</a></li><li><a href="https://www.jetbrains.com/idea/">IntelliJ IDEA</a></li></ul><h2 id="Git操作イメージ"><a href="#Git操作イメージ" class="headerlink" title="Git操作イメージ"></a>Git操作イメージ</h2><p>説明にあたりGitツリーが以下の状態であることを前提としています。<br><code>feature</code> ブランチは個人の開発ブランチです。<code>master</code> ブランチは状況により <code>develop</code> ブランチなどに適宜読みかえください。</p><h3 id="初期状態"><a href="#初期状態" class="headerlink" title="初期状態"></a>初期状態</h3><p><img src="/images/20210420b/commit_base.png"></p><h3 id="masterブランチへRebase"><a href="#masterブランチへRebase" class="headerlink" title="masterブランチへRebase"></a>masterブランチへRebase</h3><p><code>git rebase master</code> に相当<br><img src="/images/20210420b/commit_rebase_master.png"></p><h3 id="コミットをまとめる-Squash"><a href="#コミットをまとめる-Squash" class="headerlink" title="コミットをまとめる(Squash)"></a>コミットをまとめる(Squash)</h3><p><code>git rebase -i</code> に相当<br><img src="/images/20210420b/commit_rebase_squash.png"></p><h3 id="別ブランチのコミットを持ってくる-Cherry-pick"><a href="#別ブランチのコミットを持ってくる-Cherry-pick" class="headerlink" title="別ブランチのコミットを持ってくる(Cherry-pick)"></a>別ブランチのコミットを持ってくる(Cherry-pick)</h3><p><code>git cherry-pick</code> に相当<br><img src="/images/20210420b/2021-03-26-16-34-37.png"></p><h2 id="Sourcetree"><a href="#Sourcetree" class="headerlink" title="Sourcetree"></a>Sourcetree</h2><h3 id="masterブランチへRebase-1"><a href="#masterブランチへRebase-1" class="headerlink" title="masterブランチへRebase"></a>masterブランチへRebase</h3><ol><li>リベースしたい元(featureブランチ)をチェックアウト</li><li>リベースしたい先(masterブランチ)で右クリックし、「リベース…」を選択</li><li>「リベースの確認」ダイアログが立ち上がり、「OK」をクリック</li><li>featureブランチがmasterブランチから生えていることを確認<br><img src="/images/20210420b/sourcetree_rebase_master.gif"></li></ol><h3 id="コミットをまとめる-Squash-1"><a href="#コミットをまとめる-Squash-1" class="headerlink" title="コミットをまとめる(Squash)"></a>コミットをまとめる(Squash)</h3><ol><li>リベースしたいブランチ(featureブランチ)をチェックアウト</li><li>まとめたいコミットの1つ前のコミット(今回はmaster Bコミット)を右クリック</li><li>右クリックメニューから「xxxxの子とインタラクティブなりベースを行う…」を選択、</li><li>リベースダイアログが立ち上がる。1つ目のコミット(feature E)を選択し、「前のコミットとスカッシュ」を選択</li><li>コミットがまとまったことを確認し「メッセージを編集」ボタンをクリック</li><li>コミットメッセージを編集し「OK」ボタンを押し、メッセージが変更されたことを確認</li><li>「OK」ボタンを押してリベースを確定する</li><li>Sourcetree画面に反映されない場合には「F5」を押し更新<br><img src="/images/20210420b/sourcetree_rebase_squash.gif"></li></ol><h3 id="別ブランチのコミットを持ってくる-Cherry-pick-1"><a href="#別ブランチのコミットを持ってくる-Cherry-pick-1" class="headerlink" title="別ブランチのコミットを持ってくる(Cherry-pick)"></a>別ブランチのコミットを持ってくる(Cherry-pick)</h3><ol><li>チェリーピックしたい先(featureブランチ)をチェックアウト</li><li>持ってきたいコミット(今回はmaster Dコミット)を右クリック</li><li>「チェリーピック」を選択</li><li>チェリーピックダイアログが立ち上がる。「OK」を選択</li><li>featureブランチに持ってきたコミットが追加されてることを確認<br><img src="/images/20210420b/sourcetree_cherrypick.gif"></li></ol><h2 id="Visual-Studio-Code-with-Git-Graphプラグイン"><a href="#Visual-Studio-Code-with-Git-Graphプラグイン" class="headerlink" title="Visual Studio Code with Git Graphプラグイン"></a>Visual Studio Code with Git Graphプラグイン</h2><h3 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h3><ol><li>以下のプラグインをインストール<br> <a href="https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph">Git Graph - Visual Studio Marketplace</a></li><li>Git Graph画面を開く<br><img src="/images/20210420b/gitgraph_open.gif"></li></ol><h3 id="masterブランチへRebase-2"><a href="#masterブランチへRebase-2" class="headerlink" title="masterブランチへRebase"></a>masterブランチへRebase</h3><ol><li>リベースしたい元(featureブランチ)をチェックアウト</li><li>リベースしたい先(masterブランチ)で右クリックし、「Rebase current branch on this Commit…」を選択</li><li>ダイアログが立ち上がり、「Yes, rebase」をクリック</li><li>featureブランチがmasterブランチから生えていることを確認<br><img src="/images/20210420b/gitgraph_rebase_master.gif"></li></ol><h3 id="コミットをまとめる-Squash-2"><a href="#コミットをまとめる-Squash-2" class="headerlink" title="コミットをまとめる(Squash)"></a>コミットをまとめる(Squash)</h3><p><a href="https://github.com/mhutchie/vscode-git-graph/issues/410">Issue</a>が上がっているが、GUI単独では現時点でできない。<br>リベース選択時に「Launch Interactive Rebase in new Terminal」を選択することにより一部CUIを併用することで実現可能。</p><h3 id="別ブランチのコミットを持ってくる-Cherry-pick-2"><a href="#別ブランチのコミットを持ってくる-Cherry-pick-2" class="headerlink" title="別ブランチのコミットを持ってくる(Cherry-pick)"></a>別ブランチのコミットを持ってくる(Cherry-pick)</h3><ol><li>チェリーピックしたい先(featureブランチ)をチェックアウト</li><li>持ってきたいコミット(今回はmaster Dコミット)を右クリック</li><li>「Cherry Pick…」を選択</li><li>ダイアログが立ち上がり、「Yes, cherry pick」を選択</li><li>featureブランチに持ってきたコミットが追加されてることを確認<br><img src="/images/20210420b/gitgraph_cherrypick.gif"></li></ol><h2 id="IntelliJ-IDEA"><a href="#IntelliJ-IDEA" class="headerlink" title="IntelliJ IDEA"></a>IntelliJ IDEA</h2><h3 id="事前準備-1"><a href="#事前準備-1" class="headerlink" title="事前準備"></a>事前準備</h3><p>「View」メニューから「Tool Windows」⇒「Git」と選択しGitの画面を表示する<br><img src="/images/20210420b/intellij_open.gif"></p><h3 id="masterブランチへRebase-3"><a href="#masterブランチへRebase-3" class="headerlink" title="masterブランチへRebase"></a>masterブランチへRebase</h3><ol><li>リベースしたい元(featureブランチ)をチェックアウト</li><li>左のブランチ一覧からリベースしたい先(masterブランチ)で右クリックし、「Rebase Current onto Selected」を選択</li><li>featureブランチがmasterブランチから生えていることを確認<br><img src="/images/20210420b/intellij_rebase_master.gif"></li></ol><h3 id="コミットをまとめる-Squash-3"><a href="#コミットをまとめる-Squash-3" class="headerlink" title="コミットをまとめる(Squash)"></a>コミットをまとめる(Squash)</h3><ol><li>リベースしたいブランチ(featureブランチ)をチェックアウト</li><li>まとめたいコミットの最初(今回はmaster Cコミット)を右クリック</li><li>右クリックメニューから「Interactively Rebase from Here…」を選択、</li><li>リベースダイアログが立ち上がる。1つ目のコミット(feature E)を選択し、「Squash」を選択</li><li>コミットメッセージを編集しエディタ外をクリックし、メッセージが変更されたことを確認</li><li>「Start Rebasing」ボタンを押してリベースを確定する</li><li>コミットがまとまったことを確認<br><img src="/images/20210420b/intellij_rebase_squash.gif"></li></ol><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>私は普段IntelliJのGo言語特化版のGolandで開発をメインに行ってます。</p><p>本記事は、開発メンバがGitの使い方に苦労しているのを見たり、相談が来て生まれました。できるだけ視覚的に理解できるよう、記事を書いたつもりです。</p><p>本記事を通し、少しでもGitの操作の苦手意識を減らし、理解を深めることができたら幸いです。(この記事を書くにあたり<code>git reflog</code>コマンドが非常に役立ちました。)</p><p>紹介したツールや実行方法は一例です。</p><p>自分にあったツールやコマンドを使い、良いGitライフを！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Gitを使っての開発で、指定のツールや好みのGitクライアントを使っていると思います。&lt;/p&gt;
&lt;p&gt;ターミナルの黒画面でGitコマンドを使うのはちょっと不安、GUI画面から画面を確認しながらGitを操作したい方向けの記事です。&lt;/p&gt;
&lt;p&gt;GitのBranch作成やCh</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="VSCode" scheme="https://future-architect.github.io/tags/VSCode/"/>
    
    <category term="Git" scheme="https://future-architect.github.io/tags/Git/"/>
    
    <category term="IntelliJ" scheme="https://future-architect.github.io/tags/IntelliJ/"/>
    
    <category term="SourceTree" scheme="https://future-architect.github.io/tags/SourceTree/"/>
    
  </entry>
  
  <entry>
    <title>IT初学者がカラムナデータベースを勉強してみた</title>
    <link href="https://future-architect.github.io/articles/20210419b/"/>
    <id>https://future-architect.github.io/articles/20210419b/</id>
    <published>2021-04-18T15:00:01.000Z</published>
    <updated>2021-04-18T06:23:02.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。2020年4月に入社した牛尾です。<a href="/articles/20210414a/">春の入門連載2021</a>の4日目です。</p><p>私はITについては初学者の状態で入社しました。フューチャーの同期社員や、OJTでご指導くださった先輩社員の技術への知見の深さや広さ、また社会人としての諸々の能力の高さにただただ尊敬する毎日です。</p><p>IT初学者の私が入社してから1年間学んできたIT分野のなかで、特に楽しかった技術を抜粋してご紹介します。</p><p>私のようにIT初学者で、エンジニア、ITコンサルタントを志望している皆さんの楽しい社会人生活のキャリアを描く一助となれたら嬉しく思います！</p><h1 id="紹介するトピック"><a href="#紹介するトピック" class="headerlink" title="紹介するトピック"></a>紹介するトピック</h1><p>本記事では <strong>カラムナデータベース</strong> を紹介いたします。</p><p>私は入社してから初めてデータベースを学び、研修当初は一般的な <strong>リレーショナルデータベース</strong> を学んできましたが、今は <strong>カラムナデータベース</strong> やKVSデータベースなど勉強しています。</p><p>IT初学者の自分が学んで楽しかった内容の紹介です。もし、技術への知見の深い方はこちらの記事などを参照してもらえればです。</p><blockquote><ul><li><a href="/articles/20190821/">システム開発で得たRedis利用ノウハウ</a></li><li><a href="/articles/20190718/">— 脱RDB脳 — Cassandraのデータモデルについて考えてみる</a></li><li><a href="/articles/20210412a/">KVSと二年間向き合って得たナレッジを還元する時がきた</a></li><li><a href="/articles/20190625/">Amazon Redshiftの仕様を調べてみた</a></li></ul></blockquote><h2 id="データベースとは"><a href="#データベースとは" class="headerlink" title="データベースとは"></a>データベースとは</h2><p>定義づけを確認すると、Oracleのサイトでは以下のように書かれています。</p><blockquote><p><strong>「データベースとは、構造化した情報またはデータの組織的な集合」</strong><br><a href="https://www.oracle.com/jp/database/what-is-database/">https://www.oracle.com/jp/database/what-is-database/</a></p></blockquote><p>前述したとおり自分が入社して初めて学んだのはリレーショナルデータベースでした。ここでは細かい部分のリレーショナルデータベースの説明を省略させていただきます。SQLやデータ設計については、当ブログでも参考になる記事がありますので参考ください。</p><blockquote><ul><li><a href="/articles/20210416b/">(新卒で役にたつ！)SQL小技集</a></li><li><a href="/articles/20210215/">登が教えるSQL基礎</a></li><li><a href="/articles/20200616/">レシートで学ぶデータモデリング入門</a></li></ul></blockquote><h2 id="カラムナデータベース"><a href="#カラムナデータベース" class="headerlink" title="カラムナデータベース"></a>カラムナデータベース</h2><p>通常のOracle、Postgre、MySQLなどの<strong>リレーショナルデータベースでは、データを 行(レコード)単位で扱っているのに対して、カラムナデータベースではデータを列(カラム)方向</strong>で扱います。</p><p>例えば、とあるアパレル店での日付ごとに営業担当者の販売実績などを管理していたとして、列方向と行方向でのデータの扱い方は以下のようになります。</p><p><img src="/images/20210419b/%E8%A1%8C%E3%81%A8%E5%88%97%E3%83%87%E3%83%BC%E3%82%BF.jpg"></p><ul><li><strong>行方向</strong> : 日付、支店、営業担当者等をセットとして、 <strong>1行でデータを扱う</strong></li><li><strong>列方向</strong> : 日付データ、支店データなどの項目ごとに、 <strong>1列でデータを扱う</strong></li></ul><h2 id="カラムナデータベースのメリット①"><a href="#カラムナデータベースのメリット①" class="headerlink" title="カラムナデータベースのメリット①"></a>カラムナデータベースのメリット①</h2><p>カラムナデータベースの1つ目のメリットは <strong>データの圧縮効率がよくなる</strong> ことです。</p><p>データの圧縮効率がよくなるというのはデータを列方向に保持していると<strong>データの定義情報や、値が同一のデータを格納しているので圧縮効率をあげやすいため</strong>です。</p><p>先ほどのアパレル店での表データの例を見ていきましょう。</p><h3 id="a-行方向-リレーショナルデータベース"><a href="#a-行方向-リレーショナルデータベース" class="headerlink" title="a) 行方向(リレーショナルデータベース)"></a>a) 行方向(リレーショナルデータベース)</h3><p>データは全て一意になるように格納されています。(一意にデータを格納することでデータ整合性を保証できるなどは大きなメリットです。)</p><p>日付、支店、担当者などをキーとして1行のデータが <strong>完全一致していない別々のデータ</strong>なので、カラムナデータベースと比較したときに、<strong>データの圧縮はしづらい</strong>という特徴があるのです 。</p><p><strong>リレーショナルデータベースの場合でも</strong>ストレージコストの削減やディスクI/Oを減らすことによるパフォーマンスの向上を目的として<strong>データの圧縮を実施する場合は多々あります</strong>。OracleではOLTP表圧縮などの圧縮機能が用意されているので、興味のある方は<a href="https://www.oracle.com/jp/a/tech/docs/technical-resources/0315-1100-compression.pdf">こちら</a>を参照してみてください。</p><p><img src="/images/20210419b/%E8%A1%8C%E6%96%B9%E5%90%91%E3%83%87%E3%83%BC%E3%82%BF.jpg"></p><h3 id="b-列方向-カラムナデータベース"><a href="#b-列方向-カラムナデータベース" class="headerlink" title="b) 列方向(カラムナデータベース)"></a>b) 列方向(カラムナデータベース)</h3><p>列データの値を見てみると、<strong>「支店」は全て大阪の値</strong>、<strong>「商品カテゴリ」は紳士服と婦人服</strong>であったりと<strong>重複</strong> が見られます。</p><p>データを圧縮するときに「大阪5」などで表せば <strong>効率的にデータを圧縮</strong> できる気が直感的にするのではないでしょうか。(実際の圧縮はそのように単純にはおこなっていませんが、今回は分かりやすくするために、そのような表現をしました)</p><p><img src="/images/20210419b/%E3%82%AB%E3%83%A9%E3%83%A0%E6%96%B9%E5%90%91%E3%83%87%E3%83%BC%E3%82%BF.jpg"></p><h2 id="カラムナデータベースのメリット②"><a href="#カラムナデータベースのメリット②" class="headerlink" title="カラムナデータベースのメリット②"></a>カラムナデータベースのメリット②</h2><p>2つ目のメリットは <strong>大量のデータに対してのアドホックな分析処理が高速になる</strong> (OLAP実装を得意とする)ことです。</p><p>先ほどの表データを例に行方向と列方向のデータベースの場合を見ていきましょう。</p><p>例えば、支店が「大阪」の販売金額の合計を集計したいとします。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(販売金額) <span class="keyword">FROM</span> 表 <span class="keyword">WHERE</span> 支店 = <span class="string">&#x27;大阪&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="a-行方向-リレーショナルデータベース-1"><a href="#a-行方向-リレーショナルデータベース-1" class="headerlink" title="a) 行方向(リレーショナルデータベース)"></a>a) 行方向(リレーショナルデータベース)</h3><p>行方向のデータベースでは行全体にアクセスをして、「支店」項目が大阪かを判別した後に「販売金額」の列データを抜き出してきます。先頭の行から順にアクセスをしているので、その分　<strong>「日付」や「営業担当者」等の必要のない項目にもアクセス</strong>　をしています。</p><p><img src="/images/20210419b/%E8%A1%8C%E6%96%B9%E5%90%91%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9.jpg"></p><h3 id="b-列方向-カラムナデータベース-1"><a href="#b-列方向-カラムナデータベース-1" class="headerlink" title="b) 列方向(カラムナデータベース)"></a>b) 列方向(カラムナデータベース)</h3><p>列方向では、 <strong>必要のある「支店」「販売金額」の項目のみにアクセスをする</strong> ことで、必要最小限のディスクI/Oが実現できます。</p><p>データベースの処理速度が遅くなる原因は <strong>ディスクI/O</strong> が増加することなので(ディスクの処理速度が遅いため)不要なアクセスを避けることで <strong>処理が高速</strong> になります。</p><p><img src="/images/20210419b/%E5%88%97%E6%96%B9%E5%90%91%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9.jpg"></p><h2 id="カラムナデータベースのデメリット"><a href="#カラムナデータベースのデメリット" class="headerlink" title="カラムナデータベースのデメリット"></a>カラムナデータベースのデメリット</h2><p>今までカラムナデータベースのメリットをみてきましたが、<strong>OLTPの実装には向かない</strong> という特徴が存在します。<br>データの圧縮、展開で <strong>オーバーヘッドが発生</strong> するので、データの新規追加、更新、削除などの<strong>トランザクション処理は苦手</strong> です。</p><p>例えば、先ほどの表データに1行データを追加したいとします。行方向のデータベースでは、行データをまとめて追加すればよいですが、列方向の場合は、圧縮したデータを一度展開して、各列項目を読み込んで追加したうえで、再度圧縮してあげるという処理が発生します。</p><p><img src="/images/20210419b/%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E5%B1%95%E9%96%8B%E5%9C%A7%E7%B8%AE.jpg"></p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>ここでは紹介しきれませんでしたが、データベースにはまだまだKVS型やXML型、JSON型、NoSQLなど色々な種類があります。データベース以外にも機会学習でCNNを簡易ながらも作ってみたり、暗号技術を勉強したりする日々はとても楽しいです。</p><p>これからも多くの技術書を業務内外で読みふけり、全力でITを楽しもうと思います。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>以下他サイトでの参照記事です。興味のある方は参照してみてください。</p><ul><li><a href="https://www.techcrowd.jp/nosql/column/">https://www.techcrowd.jp/nosql/column/</a></li><li><a href="https://www.slideshare.net/InsightTechnology/c31hirama">https://www.slideshare.net/InsightTechnology/c31hirama</a></li><li><a href="https://www.publickey1.jp/blog/11/post_175.html">https://www.publickey1.jp/blog/11/post_175.html</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。2020年4月に入社した牛尾です。&lt;a href=&quot;/articles/20210414a/&quot;&gt;春の入門連載20</summary>
      
    
    
    
    <category term="DB" scheme="https://future-architect.github.io/categories/DB/"/>
    
    
    <category term="DB" scheme="https://future-architect.github.io/tags/DB/"/>
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="春の入門連載" scheme="https://future-architect.github.io/tags/%E6%98%A5%E3%81%AE%E5%85%A5%E9%96%80%E9%80%A3%E8%BC%89/"/>
    
    <category term="カラムナ型DB" scheme="https://future-architect.github.io/tags/%E3%82%AB%E3%83%A9%E3%83%A0%E3%83%8A%E5%9E%8BDB/"/>
    
  </entry>
  
  <entry>
    <title>ブラサカ活動報告~ストーンフリープロジェクト編~</title>
    <link href="https://future-architect.github.io/articles/20210419a/"/>
    <id>https://future-architect.github.io/articles/20210419a/</id>
    <published>2021-04-18T15:00:00.000Z</published>
    <updated>2021-04-18T05:43:38.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。ブラサカチームの中井です。</p><p>Tokyo2020のブラインドサッカーチームでVRを駆使したフィットネスアプリを制作しました。活動・成果を報告します。</p><h2 id="フューチャーのTokyo2020チームとは？"><a href="#フューチャーのTokyo2020チームとは？" class="headerlink" title="フューチャーのTokyo2020チームとは？"></a>フューチャーのTokyo2020チームとは？</h2><p>「東京2020大会に向けてテクノロジーとアイデアでFuture Group発の価値を作る」という目的のもと、若手メンバが中心となり主に以下４つの非営利活動を行っている有志です。</p><blockquote><ol><li>ブラインドサッカーVR体験</li><li>晴海選手村地区開発</li><li>キッズ企画（アイデアソン・ハッカソン）</li><li>ラグビー観戦</li></ol></blockquote><p>私たちブラインドサッカーチームは、①の<a href="https://www.fif.jp/kidsyouth/report/olypara2019.html">ブラインドサッカーVR体験</a>を行っています。</p><p>主な活動として…</p><blockquote><ul><li>ブラインドサッカーを疑似体験できるアプリの開発・提供</li><li>ブラインドサッカーの認知度を上げるためのIT施策の検討・立案</li><li>小学校に向けたスポ育事業</li></ul></blockquote><p>を行っています。</p><p>Tokyo2020の過去の活動を以下記事で紹介しています。興味のある方はぜひご覧ください。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="/articles/20190925/index.html" data-iframely-url="//cdn.iframe.ly/KtSwerZ?iframe=card-small"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script><p>また、昨年は小学生向けのスポーツ教育の推進も行い、品川区立日野学園にて実施したブラインドサッカーの体験授業が、文部科学省「青少年の体験活動推進企業表彰」奨励賞を受賞しました！</p><ul><li><a href="https://www.fif.jp/MEXTCSRaward_release_210312.pdf">フューチャーのＣＳＲ事業 フューチャー イノベーション フォーラム（ＦＩＦ） 文部科学省 「青少年の体験活動推進企業表彰」 ２年連続受賞</a></li></ul><p>このように日々活動領域を広げながら活動をしています。</p><h2 id="ストーンフリープロジェクトの発足"><a href="#ストーンフリープロジェクトの発足" class="headerlink" title="ストーンフリープロジェクトの発足"></a>ストーンフリープロジェクトの発足</h2><p>2020年までは上述の通り盛んに活動していました。しかし、新型コロナウイルスの影響で今まで通り活動ができない状況。コロナ渦で何かできることはないか、VRを活かして状況を少しでも変えることができないか、チーム内で議論を重ねました。</p><p>「以前よりもジムに行きづらくなった」、「リモートワークにより通勤が無くなり、運動不足となっている」という意見が多数でたことから、 <strong>VR×フィットネス</strong> というテーマでアプリを制作することにしました。</p><br><p>題して、『<strong>ストーンフリープロジェクト</strong>』。</p><br><p>このプロジェクトの行く末はどうなるのか、果たしてチームメンバの運動不足は解消されるのでしょうか….</p><p>（※ストーンフリーは『ジョジョの奇妙な冒険』第6部に出てくるスタンド名が由来となっています。第6部の刑務所から脱獄するストーリーから、コロナの困難な状況から脱出することを祈り、命名しました。）</p><h2 id="VR×フィットネス"><a href="#VR×フィットネス" class="headerlink" title="VR×フィットネス"></a>VR×フィットネス</h2><p>ブラサカチームの渡辺です。VRフィットネスの現状と、私たちのチームの『ストーンフリープロジェクト』での取り組みを紹介します。</p><h2 id="VRフィットネスの現状"><a href="#VRフィットネスの現状" class="headerlink" title="VRフィットネスの現状"></a>VRフィットネスの現状</h2><p>近年一般に普及したVRシステムが有する、ヘッドマウントディスプレイ：HMD（頭部）やコントローラー・トラッカー（手）の位置・姿勢計測を利用して、リズムゲームやスポーツなど体全体を動かすタイトルが多数リリースされています。その運動量の大きさから、VRゲームはしばしばフィットネス効果が注目され、さらにVRとゲームの親和性から、遊びながら体を動かせるという有効性を生み出しています。</p><p>Oculus Questでは、各タイトル毎に消費カロリーなどが可視化されるOculus Move<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>がリリースされ、プラットフォームの開発も進んでいます。一方、主にトレーニングジムでの利用を意識して、本格的なフィットネスマシンと組み合わせたVRシステムも開発されています<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p><p>ICAROSでは、四つん這いでマシンに乗り、体感トレーニングを行いながら鳥のように空を飛ぶ体験ができます。またVRボートトレーニングでは、ローイング（ボート漕ぎ運動）マシンを用いて、様々な環境でのボート漕ぎが体験できます。</p><p>これらのフィットネス器具を用いたシステムは、フィットネス効率向上だけでなく、ICAROSの乗り物（モーションプラットフォーム）による移動感覚提示や、ローイングマシンによるハプティック（力触覚）フィードバックといった、VR体験としての臨場感向上というメリットがあります。</p><p>しかし、大型マシンであるが故に設置面積が大きく、一般的に高価なため、家庭で楽しむハードルは高いと言わざるを得ません。また、ジムで使用されるフィットネスマシンは、特定のフィットネス用途に特化されており、これ一つで様々な種類の運動ができないという点で、汎用性の無さがデメリットであると考えられます。</p><p><img src="/images/20210419a/img2.jpg"><br> ICAROS　　　　　　　　　　　　　　　VRボートトレーニング</p><h2 id="VRTuber"><a href="#VRTuber" class="headerlink" title="VRTuber"></a>VRTuber</h2><p>そこで私たちのチームは、</p><blockquote><ul><li>遊びながら、フィットネス効果を生み出す</li><li>家庭でも、気軽に運動を楽しめる</li><li>フィットネス器具により、効率的でまた汎用的な運動を可能とする</li><li>フィットネス器具によるハプティックフィードバックなどを生かし、VRフィットネスゲームとしての体験をより楽しいものとする</li></ul></blockquote><p>…というポイントを満たすVR×フィットネスとして、 <strong>VRTuber（VR×Tube）</strong> の開発を行いました。</p><p><img src="/images/20210419a/img3.jpg"></p><p>チューブを用いたトレーニング方法は多岐にわたり、かつ安価で収納も容易です。今回はVRTuberの第一弾として、ローイングをトリガーにしたシューティングゲームの開発を行いました。</p><p>使用した機材はOculus Quest<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>、手首に装着できるリストバンド付きチューブ<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>です。チューブを装着しながらOculus Touch（コントローラー）を持てるようにすることで、Oculus Touchの位置計測を利用して、ユーザが行うローイングを検出します。</p><p>HMDに表示する映像はUnityで作成しました。弾を打つ方向はOculus Touchのスティックで変更可能で、ローイングにより放った弾によりボクセルアニマルを倒す事ができます。ユーザのHPや、ボクセルアニマルの出現頻度・速度といったパラメータは変更可能です。</p><p><img src="/images/20210419a/VRTuber2.gif"></p><p>このゲームを体験した主観的感想としては、ゲームとしてはそれなりに楽しめましたが、ローイングで弾を打つことについては、コントローラーのボタン同様ある種の約束事（例：×ボタンを押すと銃を打つ）の存在は拭えませんでした。</p><p>この点からも、チューブによるハプティックフィードバックを、Virtual Worldからの自然なフィードバックとして利用できているとは言い難いです。</p><p>今回はチューブトレーニングによる動きをトリガーにして、まずゲームを作ってみようということで作成しましたが、正しいコンテンツ選択と作りこみをすることで、チューブによるハプティックフィードバックも十分に生かし、よりリアルな体験が可能と考えています。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>このようにブラサカチームでは、2020年を過ぎた現在も活動を行っています。</p><p>少しでも私たちの活動を面白いと思っていただけた方は、<a href="https://www.future.co.jp/contact_us/">お問い合わせ</a> か<a href="https://twitter.com/future_techblog">Twitter</a>にて、ぜひご連絡ください。</p><p>お待ちしています！！</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Oculus Move: <a href="https://www.youtube.com/watch?v=qiL4HvldAec">Oculus Move: VR Fitness Tracking | Oculus - Youtube</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">funandbody: <a href="http://www.funandbody.com/">http://www.funandbody.com/</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">Oculus Quest2: <a href="https://www.oculus.com/quest-2/">https://www.oculus.com/quest-2/</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;">チューブ: <a href="https://www.amazon.co.jp/-/en/Training-Fitness-Exercise-Dieting-Strength/dp/B01EYFSNLE">https://www.amazon.co.jp/-/en/Training-Fitness-Exercise-Dieting-Strength/dp/B01EYFSNLE</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。ブラサカチームの中井です。&lt;/p&gt;
&lt;p&gt;Tokyo2020のブラインドサッカーチームでVRを駆使したフィットネ</summary>
      
    
    
    
    <category term="VR" scheme="https://future-architect.github.io/categories/VR/"/>
    
    
    <category term="Unity" scheme="https://future-architect.github.io/tags/Unity/"/>
    
    <category term="活動報告" scheme="https://future-architect.github.io/tags/%E6%B4%BB%E5%8B%95%E5%A0%B1%E5%91%8A/"/>
    
    <category term="スポーツ×IT" scheme="https://future-architect.github.io/tags/%E3%82%B9%E3%83%9D%E3%83%BC%E3%83%84%C3%97IT/"/>
    
    <category term="VR" scheme="https://future-architect.github.io/tags/VR/"/>
    
    <category term="フィットネス" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%82%A3%E3%83%83%E3%83%88%E3%83%8D%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>(新卒で役にたつ！)SQL小技集</title>
    <link href="https://future-architect.github.io/articles/20210416b/"/>
    <id>https://future-architect.github.io/articles/20210416b/</id>
    <published>2021-04-15T15:00:01.000Z</published>
    <updated>2021-04-16T02:54:29.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><img src="/images/20210416b/top.jpg"><p>Photo taken by <a href="https://twitter.com/kaedemalu">@kaedemalu</a></p><p><a href="/articles/20210414a/">春の入門連載2021</a>の3日目です。</p><p>今回は業界歴の比較的浅い方々をターゲットに、覚えておくと現場で役立ちそうなSQLの小技をいくつか紹介したいと思います。</p><p>知らなくても困らないけど、知っているとちょっと仕事を効率化できそうなもの、考え方に触れれば比較的簡単に応用ができそうなものをピックアップしてみました。</p><p>紹介しているサンプルはPostgreSQLを前提とした記述しています。多少構文が異なるケースはあるものの、どのプロダクトでも同様の事ができます。</p><h2 id="メタデータの利用"><a href="#メタデータの利用" class="headerlink" title="メタデータの利用"></a>メタデータの利用</h2><p>一般的にデータベースは、内部でオブジェクト(テーブル、インデックス、ストアドプログラムなど)をはじめとしたデータベース構成要素の定義情報を持っており、それらは「メタデータ」や「ディクショナリ」と呼ばれています。条件付きではありますが、データベース内で発生した「出来事」の情報も保持しています。</p><p>メタデータを上手くを活用すると、例えば簡単なケースでは、後述するような環境のクリーニング(全テーブルのデータを一括削除)であったり、テーブルのレコード件数の確認だったりといった、日常のちょっとした機械的な作業の手数を減らす事ができます。</p><p>その他にも、「〇〇カラムってどのテーブルで持ってたんだっけ」といった、設計ドキュメントを見れば分かるけれど、それを探して開くのが面倒くさいような、ちょっとした調べ事をSQLの発行で代替できます。</p><p>応用性が非常に高い領域ですので、まずは簡単な事から初めつつ、引き出しを増やしていってみてください。</p><h3 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h3><p><strong>特定環境の全テーブルを削除するSQLをSQLで作成</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="string">&#x27;TRUNCATE TABLE &#x27;</span> || table_schema || <span class="string">&#x27;.&#x27;</span> || table_name || <span class="string">&#x27;;&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    information_schema.tables   <span class="comment">/* Oracleの場合はDBA_TABLES、USER_TABLESなど、プロダクトに応じて変えてください */</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    table_schema = <span class="string">&#x27;sample&#x27;</span> <span class="comment">/* 対象スキーマを限定するなど、状況に応じて指定してください */</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure><p><strong>特定文字を含むカラム名を持つテーブルの調査</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    table_name,</span><br><span class="line">    column_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    information_schema.columns</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    column_name <span class="keyword">LIKE</span> <span class="string">&#x27;%uriage%&#x27;</span> <span class="comment">/* 「uriage(売上)」という文字が含まれる */</span></span><br><span class="line">;</span><br></pre></td></tr></table></figure><h2 id="SELECT句のみSQL"><a href="#SELECT句のみSQL" class="headerlink" title="SELECT句のみSQL"></a>SELECT句のみSQL</h2><p>一般的にSELECT文はFROM句とセットで記述すると習うのではないかと思います。<br>しかしながら、PostgreSQLなどのDBプロダクトではFROM句のないSELECT文が構文として許容されています(OracleなどはNGです)。</p><p>「FROM句のないSELECT文を書くケースなんてあるのか？」という疑問を抱かれるでしょうが、初めて利用する関数の挙動確認などを行う場合など、デバッグやカジュアルな検証を行う際に便利です。わざわざテストテーブルを作成し、テスト用ダミーデータを入れてといった手間を省く事ができます。</p><h3 id="Sample-1"><a href="#Sample-1" class="headerlink" title="Sample"></a>Sample</h3><p><strong>SQL版Hello World!</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;Hello World!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Oracleの場合はFROM句省略は不可ですが、DUAL表(1カラムだけ定義され、1レコードだけ入っているビルドインのテーブル)</span></span><br><span class="line"><span class="comment"> を利用すれば同様の事が実施可能 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;Hello World!&#x27;</span> <span class="keyword">FROM</span> dual;</span><br></pre></td></tr></table></figure><p><strong>組み込み関数の挙動確認</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 「 UPPER(小文字を大文字に変換して返す))」なる関数が便利そうだが、想定する結果を返してくれるか？ */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">UPPER</span>(<span class="string">&#x27;AbCdE&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 文字列型 → 日付型への型変換で指定するフォーマットは合っているだろうか？ */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TO_DATE</span>(<span class="string">&#x27;2021/04/16&#x27;</span>, <span class="string">&#x27;YYYY/MM/DD&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="JOINのコーディング量削減-※限定利用推奨"><a href="#JOINのコーディング量削減-※限定利用推奨" class="headerlink" title="JOINのコーディング量削減 ※限定利用推奨"></a>JOINのコーディング量削減 ※限定利用推奨</h2><p>新人研修などでも「内部結合と外部結合の理解は必須」などと言われるかと思いますが、データベース(RDBMS)を利用する場合、JOINは日常的に書く事になります。</p><p>コピー &amp; ペーストである程度楽できるとはいえ、結合する両テーブルのカラムを指定したり、「=」や「AND」、半角スペースを入れたりと、キーボードを叩く手数は少なくありません。</p><p>システム内でのコーディングスタイルの一貫性が損なわれる可能性がある(ONとUSINGが混在すると)といったような理由のため、アプリケーションに組み込むSQLで利用する事は推奨しませんが、結合するテーブル間で結合キーの物理名が同じ場合には(条件が整っていれば)「USING」句を利用する記述方法で、コーディング量を1/2以下に減らす事ができます。</p><h3 id="Sample-2"><a href="#Sample-2" class="headerlink" title="Sample"></a><strong>Sample</strong></h3><p><strong>USINGとONの比較</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USING */</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    table_1</span><br><span class="line">        <span class="keyword">JOIN</span> table_2    <span class="comment">/* 内部結合の場合は「INNER」も省略してしましょう */</span></span><br><span class="line">            <span class="keyword">USING</span> (join_key1, join_key2)</span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ON */</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    table_1</span><br><span class="line">        <span class="keyword">JOIN</span> table_2</span><br><span class="line">            <span class="keyword">ON</span>      table_1.join_key1 = table_2.join_key1</span><br><span class="line">                <span class="keyword">AND</span> table_1.join_key2 = table_2.join_key2</span><br><span class="line">;</span><br></pre></td></tr></table></figure><h2 id="コメント化-解除ショートカットキー"><a href="#コメント化-解除ショートカットキー" class="headerlink" title="コメント化/解除ショートカットキー"></a>コメント化/解除ショートカットキー</h2><p>SQLに限った話ではないですが、普段利用するツールのショートカットキーを把握しておく事は作業の効率化に繋がります。SQLの場合、ショートカットキーの中でも特に利用頻度が多いのが行単位でコメント化/解除(行の先頭に「– 」を挿入する/消す)を行うものです。</p><p>ツールによって異なりますが、私の知る限りは「Ctrl + /」が割り当てられているケースが多いです。<br>本当によく利用するので知っていると便利です。</p><h3 id="Sample-3"><a href="#Sample-3" class="headerlink" title="Sample"></a><strong>Sample</strong></h3><p><strong>WHERE句の条件指定を色々と変えながらデータを探す</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    table_1</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">        xxx_month = <span class="string">&#x27;202104&#x27;</span></span><br><span class="line"> <span class="comment">--   AND yyyy_code = &#x27;0001&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>研修や入門書では触れられなさそうな、地味な「小技」を紹介してみました。</p><p>SQLに限らず実施頻度が多い作業はなるべく効率化を検討し、生産性を上げていきましょう。</p><h2 id="関連記事"><a href="#関連記事" class="headerlink" title="関連記事"></a>関連記事</h2><ul><li><a href="/articles/20191121/">「脱Oracle」の背景にある、Oracle Databaseの価値を改めて考える</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;img src=&quot;/images/20210416b/top.jpg&quot;&gt;

&lt;p&gt;Photo taken by &lt;a href=</summary>
      
    
    
    
    <category term="DB" scheme="https://future-architect.github.io/categories/DB/"/>
    
    
    <category term="SQL" scheme="https://future-architect.github.io/tags/SQL/"/>
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="春の入門連載" scheme="https://future-architect.github.io/tags/%E6%98%A5%E3%81%AE%E5%85%A5%E9%96%80%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>リモートワーク連載：社用機と私用機に同じモニタ3台を使う話</title>
    <link href="https://future-architect.github.io/articles/20210416a/"/>
    <id>https://future-architect.github.io/articles/20210416a/</id>
    <published>2021-04-15T15:00:00.000Z</published>
    <updated>2021-04-16T01:45:26.610Z</updated>
    
    <content type="html"><![CDATA[<p>この記事は <a href="/articles/20210118/">リモートワーク連載</a> の第 5 弾です。</p><hr><p>20 年 4 月新卒入社から 1 年が経った SAIG 佐藤です。</p><p>私は入社前後からコロナ禍に襲われ、入社後ずっと自宅から勤務を行っています。</p><p>……これは大学院時代、特に家から一歩も出ずに修論を書いていた頃と何も変わりません。</p><p>就職以来社会人としてのマネーが加わり最近ではどんどん環境が整ってきました。</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul><li>私用 PC が置いてある自室で勤務する</li><li>勤務でもプライベートでもモニタを 3 枚使う</li><li>可能な限り配線を <del>減らす</del> <strong>見えなくする</strong></li></ul><h2 id="デスク環境"><a href="#デスク環境" class="headerlink" title="デスク環境"></a>デスク環境</h2><p><img src="/images/20210416a/DSC_0283.JPG"></p><h3 id="配線図"><a href="#配線図" class="headerlink" title="配線図"></a>配線図</h3><p><img src="/images/20210416a/%E3%83%91%E3%83%AF%E3%83%9D%E6%9C%BA%E7%B5%B5_0326.png"></p><h3 id="メインモニタ-LG-24GL600F-B"><a href="#メインモニタ-LG-24GL600F-B" class="headerlink" title="メインモニタ ( LG 24GL600F-B )"></a>メインモニタ ( LG 24GL600F-B )</h3><p>昨今モニタと言えば高解像度よりも高リフレッシュレートが求められています <mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.283ex" xmlns="http://www.w3.org/2000/svg" width="4.023ex" height="1.131ex" role="img" focusable="false" viewBox="0 -375 1778 500" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><path id="MJX-3-TEX-N-5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path><path id="MJX-3-TEX-N-5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></defs><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mstyle" transform="scale(0.5)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><use xlink:href="#MJX-3-TEX-N-5B"></use></g><g data-mml-node="mo" transform="translate(278, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">要</text><text data-variant="normal" transform="translate(600, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">　</text><text data-variant="normal" transform="translate(1200, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">出</text><text data-variant="normal" transform="translate(1800, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">　</text><text data-variant="normal" transform="translate(2400, 0) matrix(1 0 0 -1 0 0)" font-size="773.5px" font-family="serif">典</text></g><g data-mml-node="mo" transform="translate(3278, 0)"><use xlink:href="#MJX-3-TEX-N-5D"></use></g></g></g></g></g></svg></mjx-container>。<br>訳：ゲームをするので高リフレッシュレートのモニタを買いました。</p><p>仕事ではただの 24’ モニタです。</p><h3 id="サブモニタ1-HP-E243d"><a href="#サブモニタ1-HP-E243d" class="headerlink" title="サブモニタ1 ( HP E243d )"></a>サブモニタ1 ( HP E243d )</h3><p>モニタとは名ばかり、カメラ内蔵 Thunderbolt3 ドックとしての役割が強いです。</p><p>社用マシンに対して 60 W 給電を行うことで電源ケーブルを一本減らすことができます。代わりに巨大な AC アダプタが足元に置かれることとなりましたが、机の上からはケーブルが減ったので良しとします。<br>このモニタに RJ45 を繋ぐこともできますが、たまに瞬断するのでマシンに直接つないでいます。</p><p>プライベートではただの 24’ モニタです。<br>内臓カメラの映像も USB-C 経由でないと受け取れず、私用マシン用に別のwebカメラを設置しています。</p><h3 id="サブモニタ2-Dell-P2317H-amp-ergotron-LX-45-241-224"><a href="#サブモニタ2-Dell-P2317H-amp-ergotron-LX-45-241-224" class="headerlink" title="サブモニタ2 (Dell P2317H &amp; ergotron LX 45-241-224 )"></a>サブモニタ2 (Dell P2317H &amp; ergotron LX 45-241-224 )</h3><p>視界の端にあるモニタで、凝視はしないが常時表示しておきたいターミナルや pdf の書類を置いておくのに丁度よいです。<br>縦にもできるので、pdfの1ページを丸ごと無駄なく表示することができます。</p><p>プライベートでは tweetdeck が常駐しています。<del>勤務中も特に開くものが無いときは私用マシンから deck が表示されています</del></p><h3 id="KVMスイッチ-サンワサプライ-400-sw032"><a href="#KVMスイッチ-サンワサプライ-400-sw032" class="headerlink" title="KVMスイッチ ( サンワサプライ 400-sw032 )"></a>KVMスイッチ ( サンワサプライ 400-sw032 )</h3><p>V を共有しないので KM スイッチ<br>物理キーではなくてキーボード操作でスイッチできる素晴らしいスイッチです。操作部を手元に置く必要がないので、スイッチ本体ごと配線をモニタの裏に隠すことができます。</p><p>デフォルトで「左 ctrl 2 連打」でスイッチします。頻繁に誤爆するので「ScrLck 2 連打」の方がよいです。<br>ScrLck は ScrLck で、Excel が変な挙動をすると思えば ScrollLock がオンになっていがち。</p><h2 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h2><h3 id="キーボード-Logicool-K740"><a href="#キーボード-Logicool-K740" class="headerlink" title="キーボード ( Logicool K740 )"></a>キーボード ( Logicool K740 )</h3><p>まだ 1 年強ですが既に Enter キーにガタが来ていて、いつひしゃげてもおかしくありません。保証書をどこかへ失くしたため 3 年保証はなかったことになりました。</p><p>そのうち買い替えます。</p><h3 id="マウス-BUFFALO-BSMBU19"><a href="#マウス-BUFFALO-BSMBU19" class="headerlink" title="マウス ( BUFFALO BSMBU19 )"></a>マウス ( BUFFALO BSMBU19 )</h3><p>5 ボタンマウスはいいぞ。</p><p>マウスは消耗品と割り切っているのですが思ったより長持ちしています。</p><h3 id="ゲーミングオフィスチェア-AKRacing-Premium"><a href="#ゲーミングオフィスチェア-AKRacing-Premium" class="headerlink" title="ゲーミングオフィスチェア ( AKRacing Premium )"></a>ゲーミングオフィスチェア ( AKRacing Premium )</h3><p><img src="/images/20210416a/61iHLVP0bKL._AC_SX425_.jpg"></p><p>ゲーミングチェアブランドの最上位機種がオフィスチェアなのでゲーミングオフィスチェア</p><p>リモートが長引く読みで初任給を費やして買いました。大正解です。</p><h2 id="他にほしいもの"><a href="#他にほしいもの" class="headerlink" title="他にほしいもの"></a>他にほしいもの</h2><h3 id="オーディオインターフェース"><a href="#オーディオインターフェース" class="headerlink" title="オーディオインターフェース"></a>オーディオインターフェース</h3><p>私用マシンには Steinberg CI1 を繋いでいますが、社用マシンはうまく繋げられず、未だに内蔵スピーカ（秘匿性の高い会議のときは有線イヤホン）から音声を出しています。<br>うまくミックスして同じヘッドホンから音を出せるようにしたい……。</p><h3 id="マイク"><a href="#マイク" class="headerlink" title="マイク"></a>マイク</h3><p>今使っている Sony ECM-PCV80U はいい加減古い &amp; 入力音量が小さい (らしい) ので、↑と合わせて新調したい</p><h3 id="ホワイトボード"><a href="#ホワイトボード" class="headerlink" title="ホワイトボード"></a>ホワイトボード</h3><p>ほしいけど部屋に置く場所がない</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>いつでも快適な仕事ができるので、デスク周りへの投資は投資対効果がかなり高いです。<br><del>いつでも快適な昼寝ができるよう、</del>次は机の後ろにあるベッドをグレードアップしようと思います。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20210118/index.html" data-iframely-url="//cdn.iframe.ly/I5k143p"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;この記事は &lt;a href=&quot;/articles/20210118/&quot;&gt;リモートワーク連載&lt;/a&gt; の第 5 弾です。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;20 年 4 月新卒入社から 1 年が経った SAIG 佐藤です。&lt;/p&gt;
&lt;p&gt;私は入社前後からコロナ禍に襲われ、入社後ずっと自</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
  </entry>
  
  <entry>
    <title>Web会議で意識したい「コミュニケーション環境」をリモート環境アップデートで向上させた話</title>
    <link href="https://future-architect.github.io/articles/20210415b/"/>
    <id>https://future-architect.github.io/articles/20210415b/</id>
    <published>2021-04-14T15:00:01.000Z</published>
    <updated>2021-04-15T04:18:07.968Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。TIG（テクノロジーイノベーショングループ）の久保です。採用活動などの社外イベントなどでは <strong>#技術も好きだけど業務の方が好き</strong> と掲げているTIGでは珍しいITコンサルタントです。<br><code>注：弊社はITコンサルタント集団なので、IT面でも業務面でもプロのコンサルタント集団ですが「どちらかといえば」業務の方が好きという話です。</code></p><p>本題ですが、2020年、コロナの影響によりリモートワークが推奨され、弊社も第一回目の緊急事態宣言前には完全リモートワークとなっていました。同じように完全リモートワーク。あるいは週の半分以上はリモートワークの方も多いのではないでしょうか。</p><p><a href="/articles/20210118/">リモートワーク連載</a>の4本目は、ワークスタイルがリモートワークとなりデスク周りの環境も変わる中で、 <strong>#技術も好きだけど業務の方が好き</strong> な私が揃えていった設備を本記事で紹介していきます（特別業務特化というわけではないので、技術・業務のどちらが好きでも参考になるかと思います）</p><h1 id="この記事を読んで得られること"><a href="#この記事を読んで得られること" class="headerlink" title="この記事を読んで得られること"></a>この記事を読んで得られること</h1><ul><li>ITコンサルタントのリモートデスク環境例を知ることができる。</li><li>リモート会議をする時に相手が気になるポイントを知ることができる。</li></ul><h1 id="リモートデスク環境を整える上で意識したこと"><a href="#リモートデスク環境を整える上で意識したこと" class="headerlink" title="リモートデスク環境を整える上で意識したこと"></a>リモートデスク環境を整える上で意識したこと</h1><p>リモートワークとなり、私が１番変わったと感じたのはコミュニケーション方法でした。<br>日々の小さな情報共有が「相手の隣に行って声をかける」から「チャットツール」に変わり、チームの意思決定や業務連絡が「会議室」から「Web会議」に変わりました。</p><p>↓イメージ図↓<br><img src="/images/20210415b/image.png"></p><p>この変化の大きな特徴は、相手の顔やリアクションから感情を感じにくくなったことではないでしょうか。</p><p>コロナ前は、相手の表情から言葉の裏ではどんなことを考えているのか想像したり、雰囲気から意思を理解したりすることができました。また、聞きたい・伝えたいことがあればすぐに伝えることもできました。</p><p>しかし、リモートになったことで以前までは当たり前だった「相手の表情や雰囲気を読み取ること」「問い合わせに対する回答の迅速さ」が難しくなりました。</p><p>リモートワークが当たり前になるにつれ、私がそう思うのであれば相手も同じことを思っているのではないか。という私の中での懸念が日々大きくなり、私は相手に<strong>自身の表情や機微が見えるようにしよう</strong>また<strong>できるだけオフラインと同じ状況を作ろう</strong>意識してデスク周りを整えて行きました。</p><h1 id="構築したリモートデスク環境の説明"><a href="#構築したリモートデスク環境の説明" class="headerlink" title="構築したリモートデスク環境の説明"></a>構築したリモートデスク環境の説明</h1><p>「<strong>自身の表情や機微が見えるようにしよう</strong>」「<strong>できるだけオフラインと同じ状況を作ろう</strong>」の考えから、具体的には以下のポイントでデスク周りを整えて行きました。</p><ul><li>私自身の表情や感情が伝わる・見える環境</li><li>コミュニケーションを取りやすくする</li></ul><p>上記２点を意識して整えたデスク環境を説明していきます。</p><h2 id="環境概要"><a href="#環境概要" class="headerlink" title="環境概要"></a>環境概要</h2><p>下の写真は、私のデスクトップ周りになります。<br><img src="/images/20210415b/image_2.png"></p><p>デスクに置いていある機材（PCは除く）</p><ul><li>ディスプレイ</li><li>ディスプレイアーム</li><li>ウェブカメラ</li><li>リングライト</li><li>タブレットアーム</li><li>タブレット（iPad）</li><li>PCスタンド【番外編】</li><li>アーモンド【番外編】</li></ul><h2 id="機材とアップデート順番"><a href="#機材とアップデート順番" class="headerlink" title="機材とアップデート順番"></a>機材とアップデート順番</h2><p>デスク周りに追加していった機材を購入順に紹介していきます。</p><h3 id="【購入順１】ディスプレイ（本記事の議題「意識したこと」とは関係ないです）"><a href="#【購入順１】ディスプレイ（本記事の議題「意識したこと」とは関係ないです）" class="headerlink" title="【購入順１】ディスプレイ（本記事の議題「意識したこと」とは関係ないです）"></a>【購入順１】ディスプレイ（本記事の議題「意識したこと」とは関係ないです）</h3><p>最初から申し訳ないのですが、「意識したこと」とは関係ないですがリモート環境下になり一番最初に購入しました。ディスプレイがあると作業と参照が同時にできる（厳密には１画面内でウィンドウ分割するので3~4ワークできる）ので、会社では使っていたけど家には無い人はぜひ購入を検討してみてください。Macの場合は画面切り替え・ウィンドウ切り替えが高性能ですが、やはり素のディスプレイ利用には敵わないと個人的には思っています。</p><h3 id="【購入順2-3】ディスプレイアーム＆ウェブカメラ"><a href="#【購入順2-3】ディスプレイアーム＆ウェブカメラ" class="headerlink" title="【購入順2,3】ディスプレイアーム＆ウェブカメラ"></a>【購入順2,3】ディスプレイアーム＆ウェブカメラ</h3><p><img src="/images/20210415b/image_3.png"><br><strong>購入目的</strong></p><ul><li>Web会議で相手と目を合わせたい。<ul><li>Web会議中はディスプレイを見て会話することが多いため、PCの純正カメラだと相手と目が合わない。ウェブカメラとディスプレイの位置を高くするディスプレイアームで視点の高さを実現。</li></ul></li><li>Web会議で自分の顔だけでなく広く見せたい。<ul><li>PCの純正カメラだと画角が狭いので、ほとんど顔しか写らない。雰囲気も感じて欲しいので画角の広いカメラにした。</li></ul></li></ul><p>PC内蔵カメラとウェブカメラの見え方の違いをイメージにしました。<br><img src="/images/20210415b/image_4.png"><br>PC内蔵カメラの場合、ディスプレイに資料を投影している方は会議の相手に目線が合いません。一方でウェブカメラの場合は目線を合わせることができる上に、見える範囲が大きく違うことがわかります。</p><h3 id="【購入順4】リングライト"><a href="#【購入順4】リングライト" class="headerlink" title="【購入順4】リングライト"></a>【購入順4】リングライト</h3><p><img src="/images/20210415b/image_5.png"><br><strong>購入目的</strong></p><ul><li>顔の表情を明るく見せたい。<ul><li>日中はPC裏の窓から明かりが入るが、夜間は逆光で顔が暗くなってしまうため正面から顔を照らす。</li></ul></li></ul><h3 id="【購入順5】タブレットアーム＆iPad（iPadは元々持っていた）"><a href="#【購入順5】タブレットアーム＆iPad（iPadは元々持っていた）" class="headerlink" title="【購入順5】タブレットアーム＆iPad（iPadは元々持っていた）"></a>【購入順5】タブレットアーム＆iPad（iPadは元々持っていた）</h3><p><img src="/images/20210415b/image_6.png"><br><strong>購入目的</strong></p><ul><li>通知に即レスしたい。<ul><li>顧客環境によってはチャットツールを複数使いこなすこともあり（現在はSlackとGoogleChat）、ワーク用の画面とは別で用意したかった。基本的には通知を見る用で、レス自体は手元のPCで返します。Excelなど集中して作り込んでいるとPCだけではなかなか気づけないです。</li></ul></li><li>（iPadですが）ホワイトボードを使いたい。<ul><li>オフラインではディスカッション時にアイデアを列挙する際やイメージを絵で表したい時にホワイトボードを使っていたため、オンラインでイメージを伝えるのにiPad（zoomのホワイトボード機能やJamboardなど）を利用しています。</li></ul></li></ul><h1 id="整えたリモートデスク環境でできるようになったこと"><a href="#整えたリモートデスク環境でできるようになったこと" class="headerlink" title="整えたリモートデスク環境でできるようになったこと"></a>整えたリモートデスク環境でできるようになったこと</h1><p>上記の機材を揃えることによって、以下が改善されました。</p><ul><li>Web会議中、相手は久保の目を見て会話することができる。</li><li>Web会議中、相手は久保の表情やリアクションを感じることができる。</li><li>Web会議中、ホワイトボードを用いてイメージを伝えることができる。</li><li>業務時、問い合わせに対する反応をすぐに返せる。</li></ul><h1 id="整えたリモートデスク環境の評価"><a href="#整えたリモートデスク環境の評価" class="headerlink" title="整えたリモートデスク環境の評価"></a>整えたリモートデスク環境の評価</h1><p>上で述べた環境を整えた後に、同僚とウェブ会議を実施し感想を聞いたことがあります。</p><ul><li>表情や身振り手振りが見えるので安心する。</li><li>いつでも表情が明るくハキハキしているように見える。</li></ul><p>この２点は、ウェブカメラやでディスプレイアーム、リングライトを設置することで、得られた結果だと思っています。</p><p>また、昨年推進したプロジェクトのパートナー様からは、プロジェクト完了時に<strong>「質問に対する返信が早く安心できた。会議では我々の心配を払拭してくれるような話し方で信頼できた。」</strong>と言葉をいただきました。<br>この言葉は、上記であげた機材やリモートワーク下でのコミュニケーション方法に不安を感じ、相手の気持ちになって整備した結果だと思っています。</p><p>しかし、同僚からは他にも「たまに電車の音がする」などの声もあるため、現状に満足せず相手がマイナス方面に気になってしまうことは、できるだけ取り除いていきたいと思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>私は<strong>自身の表情や機微が見えるようにする</strong>、<strong>できるだけオフラインと同じ状況を作る</strong>を意識してデスク周りを整えました。<br>購入した機材を効果別にまとめると以下になります。</p><table><thead><tr><th>購入機材</th><th>カテゴリ</th><th>成果</th></tr></thead><tbody><tr><td>ディスプレイアーム＆ウェブカメラ</td><td>会議中の意思疎通</td><td>・相手から自身の表情が見えるようになった</td></tr><tr><td>リングライト</td><td>会議中の意思疎通</td><td>・相手から自身の表情が見えるようになった</td></tr><tr><td>タブレットアーム＆iPad</td><td>コミュニケーション改善</td><td>・自身に対する問い合わせへの反応が早くなった <br> ・イメージを伝えやすくなった</td></tr></tbody></table><p>リモートワークになり、コミュニケーションについて不満に思ったり心配になったことは、皆さんも一度はあると思います。</p><p>ITコンサルタントのデスクとなると、プログラムが書きやすいように画面が複数あったり、縦長だったりを思い浮かべる思いますが、私はリモート環境下でまず初めに他者とコミュニケーションを円滑にすることを目的にデスク周りを整えました。</p><p>ぜひ、この記事を読まれた方は自分の作業のしやすさだけではなく、一緒に仕事をする仲間とのコミュニケーションが上手にとれる環境になっているか、もう一度見直してみてください。</p><h1 id="番外編"><a href="#番外編" class="headerlink" title="番外編"></a>番外編</h1><h2 id="デスクに置いてあるその他①：PCスタンド"><a href="#デスクに置いてあるその他①：PCスタンド" class="headerlink" title="デスクに置いてあるその他①：PCスタンド"></a>デスクに置いてあるその他①：PCスタンド</h2><p>画像では見難かったですが、MacbookはPCスタンドの上に置いて画面をできるだけ高い位置に置いています。</p><p>理由は２つあり、１つ目はWeb会議中の手元のPCを見る際の目線の位置があまり下がらないようにすること。<br>そして、２つ目が最大の理由なのですが、PCを１日触っていると肩こりになりやすいことです。</p><p>誰もが抱えていると思われるこの肩こりの原因は、PCの画面が低いことで頭の方向が下方になり、スマホ首と同じような状態になるからだそうです。スマホ首を維持し続けると、頭の重量の傾きで首から肩にかけて必要以上に筋肉が硬直し血流が悪くなることから発生します。</p><p>そのため、できるだけ画面の位置を高くすることで、スマホ首にならない良い姿勢を保つようにしています。</p><h2 id="デスクに置いてあるその他②：アーモンド"><a href="#デスクに置いてあるその他②：アーモンド" class="headerlink" title="デスクに置いてあるその他②：アーモンド"></a>デスクに置いてあるその他②：アーモンド</h2><p>アーモンドが健康に良いとされている理由は様々な記事に書いてあります。</p><p>説明するにはかなりマニアックになるので、気になる方は別途調べてみてください。</p><p>私はふるさと納税で１年分まとめ買いをしました。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。TIG（テクノロジーイノベーショングループ）の久保です。採用活動などの社外イベントなどでは &lt;strong&gt;#技術も好きだけど業務の方が好き&lt;/strong&gt; と掲げているTIGでは珍しいITコンサルタントです。&lt;br&gt;&lt;code&gt;注：弊社はITコンサルタント集</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="会議" scheme="https://future-architect.github.io/tags/%E4%BC%9A%E8%AD%B0/"/>
    
    <category term="リモートワーク" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/"/>
    
  </entry>
  
  <entry>
    <title>実務で扱う未経験技術を効率良く習得するために考えたこと／経験別入社前にやっておくといいこと</title>
    <link href="https://future-architect.github.io/articles/20210415a/"/>
    <id>https://future-architect.github.io/articles/20210415a/</id>
    <published>2021-04-14T15:00:00.000Z</published>
    <updated>2021-04-16T02:48:22.591Z</updated>
    
    <content type="html"><![CDATA[<p>2020年の４月に新卒入社した２年目の仁木です。<a href="/articles/20210414a/">春の入門連載2021</a>の2日目です。</p><p>実務でいきなり新しい技術に触る機会が増え、うまくキャッチアップしたり、実務で使うもの以外でも今後使える技術を増やしていくにはどうしたらいいかなと考えていて、３パターンにわけて実践していることをまとめてみました。</p><p>抽象的な内容となりますが、入社を考えている方や、これから入社される方に入社２年目の人はこんなこと考えているのかと参考になればと思います。</p><h1 id="実務で扱う未経験技術3パターン"><a href="#実務で扱う未経験技術3パターン" class="headerlink" title="実務で扱う未経験技術3パターン"></a>実務で扱う未経験技術3パターン</h1><img src="/images/20210415a/top.jpg"><p>Photo taken by <a href="https://twitter.com/kaedemalu">@kaedemalu</a></p><ol><li><strong>1ヶ月以上前から扱うことが分かっているパターン</strong><br>研修後のOJT直後でプロジェクトにアサインされてまもない頃や、次フェーズで使う技術と設計がだいたい固まってきた時などにこのパターンでした。実務で使うまで１ヶ月以上の学習時間があります。分野を広く、興味があるところまで広げて好きに勉強できるので個人的に一番好きなパターンです。この時期はプロトタイプを作ってみるだけでなく、関連する言語やサービスの記事をなるべく広くインプットして、興味があるものや先輩社員やTwitterなどで流行りそうな技術はアプリ化したり、資格取得に繋げたりしています。この時期は視野が広くなるので次に来そうな技術を予想するのが楽しいです。</li><li><strong>直前に分かるパターン</strong><br>言語変更や仕様がより固まって予想してなかった技術が必要となったパターンです。あまりインプットの時間がないので短期的に見て必要な知識だけを効率よく身につけなければならない状態です。実装に必要な最低限の知識だけを効率よくキャッチアップするために小さいプロトタイプを素早く組み立てます。慣れるまで短い時間でたくさん立ち止まって調べなければならないので、最初はしんどいです。技術選択などは視野が狭くならないように知っている人に聞いた方がいい場合もあり、自力と他力のバランスを取るのが難しいです。現実を見ずに広めの好きなキャッチアップをしないように「時間がない」ことを忘れないように気をつけています。</li><li><strong>自力で間に合わなかったパターン</strong><br>インプットの時間が足りなくて、よくわからないうちにほぼレビューの力やアドバイスを借りて遂行したパターンです。1,2で時間不足、準備不足のものの一部がこれになります。時間がないので自力でできることが限られていて早めに諦めて人を頼る必要があります。人に教えてもらってコードが完成した後も次またすぐ使う技術かどうかでどこまで深追いするかは見極めが必要と思っています。理解が浅いと何回も同じ質問をしてしまいかねないので何度も出て来そうなものは汎化できるまで深掘りできるのが理想です。<br>とはいえ質問の共通部分まで辿るのは経験上難しくて、同じ質問をしてから気づくことが多いです。聞いている方は細かく見過ぎていて（聞かれている方から見て）同じ質問か分かってない時があるので、先輩社員になって同じ質問をしてくる後輩がいたら、共通部分の指摘ができるようになろうと思っています。</li></ol><h1 id="プログラミング経験者・未経験者別。入社前にやっておくといいこと"><a href="#プログラミング経験者・未経験者別。入社前にやっておくといいこと" class="headerlink" title="プログラミング経験者・未経験者別。入社前にやっておくといいこと"></a>プログラミング経験者・未経験者別。入社前にやっておくといいこと</h1><ul><li><strong>プログラミング経験者</strong><br>１言語以上ある程度すらすらかける人は入社後に興味のある技術を希望できる機会があるのでそれに向けてどんどん手を動かして見るといいと思います。何をやろうか思い浮かばないという人はTechBlogで興味のある技術を見つけてそれをやってみるとか、なんとなく怖くて手が出せなかった技術について調べてみるでもいいと思います。</li><li><strong>プログラミング未経験者</strong><br>未経験者に限らず、自分にも言い聞かせていることなのですが、本を読むだけ、コードを見るだけで理解しようとしたり、写経してやった気にならないようにしようと心がけていて、まず、自分で考える時間を作って、自分で書いてコードがどういう意味をしているかを考えるような時間があるといいと思います。<br>興味のある技術についても広めに勉強をしてもいいのかと思いますが、インプットが多くなりがちになってしまうので、まずは１つの言語をしっかり身につけて応用していくまたは、小さくてもアウトプットをたくさんしていくほうが実践力は付くと思います。</li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>いかがでしたでしょうか。パターン別に未経験技術のキャッチアップ方法で考えていることをまとめてみました。実務が一番技術力がつくと思っているので、それに合わせて目の前のことだけでなく、長期的に広く、新しい技術を身につけたいと考えながら仕事や勉強をしています。入社ちょうど1年経過した人はこんなこと考えているのかと参考になれば嬉しいです。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2020年の４月に新卒入社した２年目の仁木です。&lt;a href=&quot;/articles/20210414a/&quot;&gt;春の入門連載2021&lt;/a&gt;の2日目です。&lt;/p&gt;
&lt;p&gt;実務でいきなり新しい技術に触る機会が増え、うまくキャッチアップしたり、実務で使うもの以外でも今後使える技術</summary>
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="春の入門連載" scheme="https://future-architect.github.io/tags/%E6%98%A5%E3%81%AE%E5%85%A5%E9%96%80%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>春だから学ぶシステム連携</title>
    <link href="https://future-architect.github.io/articles/20210414b/"/>
    <id>https://future-architect.github.io/articles/20210414b/</id>
    <published>2021-04-13T15:00:01.000Z</published>
    <updated>2021-04-14T03:06:28.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG真野です。<a href="/articles/20210414a/">春の入門連載2021</a>の1日目です。</p><p>システム間のデータ連携は業務システムでは不可欠な要素ですが、初心者にはとっつきにくい概念です。けれどシステムとしての付加価値はデータを繋げることで生まれることが多く、非常に重要です。</p><p>本記事ではそんなデータ連携について、具体的なパターンを例に上げて説明します。</p><p><img src="/images/20210414b/flamingos-1835649_1280.jpg"></p><blockquote><p><a href="https://pixabay.com/ja/users/pexels-2286921/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1835649">Pexels</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1835649">Pixabay</a>からの画像</p></blockquote><h2 id="システム間のデータ連携とは"><a href="#システム間のデータ連携とは" class="headerlink" title="システム間のデータ連携とは"></a>システム間のデータ連携とは</h2><p>システム間のデータ連携とは、システム間である共有したいデータの受け渡しを行うことです。データ交換と言うこともありますし、システムI/F（システムアイエフ）と呼ぶことも多いです。</p><p><img src="/images/20210414b/image.png"></p><p>この共有データのやり取りのために幾つかの取り決めが必要です。<strong>いつ</strong>・<strong>どのような項目</strong>を、<strong>どのようなプロトコル</strong>で渡すかといったことを両者で合意する必要があります。一般的にはデータを渡す側を配信（送信）、受け取る側を集信（受信、Import）と呼びます。配信と集信を合わせて集配信と呼ぶこともあります。</p><p>共有データのよく利用される形式の一つは、<strong>ファイル</strong> 形式や、何かしらの<strong>WebAPI</strong>や<strong>RPC</strong>で提供される事が多いです。</p><p>データ連携の分野では、<a href="https://www.amazon.co.jp/Enterprise-Integration-Patterns-Designing-Addison-Wesley/dp/0321200683">Enterprise Integration Patterns</a>という名著があり、共有データといった呼び方はそちらに揃えていますので、少しお高いですが興味がある人は読んで見ると一段上に上がれるかもしれません。</p><h2 id="システムI-Fはなぜ必要か？"><a href="#システムI-Fはなぜ必要か？" class="headerlink" title="システムI/Fはなぜ必要か？"></a>システムI/Fはなぜ必要か？</h2><p>システム連携がなぜ必要か、ここにピンと来ない人も以外と多いです。簡単に説明します。</p><p>例えば、システムAをA社、システムBをB社の業務システムとします。</p><p>A 社と B 社は業務上取引があり、もともとは「TEL で注文を行い、請求書を郵送でやり取りすること」で取引を行っていましたが、これでは取引回数が増える度に人員を増やさないと業務が継続できそうにありません。なんせ一回で 15 分程度は、お互いの事務処理を動かす必要があります。しかも TEL なので、TEL が集中する時間とそうでない時間があり需要の見極めには長年の経験と勘が求められました</p><p><img src="/images/20210414b/image_2.png"></p><p>電話だと大変なので、やり取りをメールに寄せ請求書や帳票をPDF添付するといったこともあるでしょう。これでもTELで同期的に処理するより属人性が減りかなり楽になりました。</p><p><img src="/images/20210414b/image_3.png"></p><p>しかし、システムからPDFを出力しメール添付で送信したり、メールからPDFを取り出しシステムに入力したりといった業務はなくなりません。PDFに記載されている項目のチェック作業や、万が一取引ができない場合にお断りを入れたりする業務も作業負荷としてはかなりのものです。</p><p>そのため人間を介在させること無く、システム同士でデータをやり取りさせたいという要求が生まれるわけです。どうせシステムからデータを抽出して、相手方に渡して、<br>相手方はそれをシステムに入力するのであれば直接システム同士でデータ連係させた方が間違いもなく確実じゃないかということです。</p><p><img src="/images/20210414b/image_4.png"></p><p>システム A に入力したデータは、B 社のシステム B に自動で連携されるので、もはや B 側ではデータの受付処理を人間が行う必要がなくなります。現実的には何か人間の意志入れが必要な場面は残るかと思いますが、大部分の業務は簡略化できました。</p><p>やや極端な例を示しましたが、なるべく人が考えなくても済む部分はシステムに任せたいという背景は理解できたと思います。</p><p>また、今回はシステムA、システムBで事業会社が異なりましたが、社内システムであっても同じような要求がでてくるので考え方は同じです。</p><h2 id="連携パターン"><a href="#連携パターン" class="headerlink" title="連携パターン"></a>連携パターン</h2><p>さて共有データ（先程の例だと注文データ）はどのような形式で連携されるかです。</p><p>Enterprise Integration Patterns本では、ファイル・DB・RPC（Remote Procedure CAll）・メッセージングの4つで分類分けされています。大別するとシステム連携はこの4パターンのいずれかで行われているということです。それぞれの特徴を説明します。</p><h3 id="ファイル"><a href="#ファイル" class="headerlink" title="ファイル"></a>ファイル</h3><p><img src="/images/20210414b/image_5.png"></p><p>ファイル連係はその名の通り、やりとりしたい共有データをファイルによって行う方式です。</p><p>ファイル連係は見方を変えればストレージを共有するとも言い換えられます。そのため、共有するストレージが単一障害点にならないように設計する必要があります</p><p>ストレージは、AWSだとS3といったオブジェクトストレージが利用されることが多いでしょう。SFTPなども依然としてよく使われるプロトコルです。</p><p>仮にS3を利用する場合は、利用するS3バケットはどちらの所有であるべきか、などはよく議論になるポイントです。</p><p>また、処理済みの場合はオブジェクトのタグ付けで <code>status:complete</code> を付与してステータス管理したり、二重取り込みを禁止するために最初にリネームするなどの工夫がよく見られます。</p><p>ある程度のデータ規模になるとファイル形式が採用される事が多く、1日分の処理データや、ある断面でのマスタデータなどを連携したいときによく用いられます。</p><h3 id="API-RPC"><a href="#API-RPC" class="headerlink" title="API/RPC"></a>API/RPC</h3><p><img src="/images/20210414b/image_6.png"></p><p>RPC のプロトコルとしてよく使われるのが REST-API（JSON Over HTTP）です。最近であればgRPC（Protocol Buffers over HTTP/2）も採用実績が増えています。どちらもマイクロサービシーなシステムを構築する際にもよく使われる技術でもあります。</p><p>ファイル連係に比べてよりリアルタイムな連係が可能ですが、比較的大量データの連係には不得意です。システム間連係ではある程度上限が決まっているデータの連係に用いましょう。</p><h3 id="DB"><a href="#DB" class="headerlink" title="DB"></a>DB</h3><p><img src="/images/20210414b/image_7.png"></p><p>DB連携は、データベースを共有しあるテーブルに書き込まれているデータを共有する方法です。抽出条件は日付カラムやらステータスカラムやらを用意することが多いでしょう。<br>こちらもファイル連携と同じく、配信・集信のどちらかのデータベースを利用するかでパターンが分かれます。</p><p>DB連携はデータ反映の鮮度が早く確実、大量データの連携も可能ですが、依存関係が密結合になってしまうのが難点です。<br>昨今はマイクロサービスなど疎結合なアーキテクチャを採用することが多く、DBを共有してしまうと自システムの都合でインフラのメンテナンスを行いにくくなったり、データ連携で負荷が生じ、予期せぬ障害連鎖にも繋がりかねません。また、一度密結合になった連携を、疎結合に戻すのは一般的に難しいためできるなら避けたい法式です。</p><h3 id="メッセージング"><a href="#メッセージング" class="headerlink" title="メッセージング"></a>メッセージング</h3><p><img src="/images/20210414b/image_8.png"></p><p>RPC と異なり、配信側はメッセージを送信した後、集信側の処理結果を待たずに配信を完了とする方式です。パブリッシュ・サブスクライブ（Publish-Subscribe）方式が代表的で、配信：集信＝１：N の場合には有効な手法です。プロダクトとしては、Apache Active MQ や ZeroMQ、Apache Kafka などが有名です</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>システムのデータ連携は、糊付けの部分でかなり地味。されどできる便利だしユーザ目線からすると超重要です</li><li>連携法式は大分類で捉えると理解しやすい<ul><li>静止点がとれ、ある一定のデータ量になるデータ交換を目的とするシステム I/F ではまずファイル連携の利用を検討しましょう</li><li>リアルタイム性を求められるなど要件が出てきた段階で RPC やメッセージングの利用を検討しましょう</li><li>逆に、イベントの通知を目的とする場合はファイル連携ではなく、RPC やメッセージングの利用を検討しましょう</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG真野です。&lt;a href=&quot;/articles/20210414a/&quot;&gt;春の入門連載2021&lt;/a&gt;の1日</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="入門" scheme="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/"/>
    
    <category term="初心者向け" scheme="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/"/>
    
    <category term="システム連携" scheme="https://future-architect.github.io/tags/%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E9%80%A3%E6%90%BA/"/>
    
    <category term="春の入門連載" scheme="https://future-architect.github.io/tags/%E6%98%A5%E3%81%AE%E5%85%A5%E9%96%80%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>春の入門連載2021を始めます</title>
    <link href="https://future-architect.github.io/articles/20210414a/"/>
    <id>https://future-architect.github.io/articles/20210414a/</id>
    <published>2021-04-13T15:00:00.000Z</published>
    <updated>2021-04-22T01:45:41.903Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。技術ブログ運営の<a href="https://twitter.com/kaedemalu">伊藤太斉</a>です。2021年も春の入門連載を開催します。</p><p><img src="/images/20210414a/IMG_0722.JPG"><br>Photo taken by <a href="https://twitter.com/kaedemalu">@kaedemalu</a></p><h2 id="春の入門連載について"><a href="#春の入門連載について" class="headerlink" title="春の入門連載について"></a>春の入門連載について</h2><p>4月になり、どの会社も新卒社員を迎え活気がましていると思います。フューチャーも多くの新卒を迎え、日々研修に励んでいます。また、節目ということもあり、新しいことを始め流きっかけにもなりやすいのではないでしょうか？</p><p>この春の入門連載は今年で2年目の企画となりますが、今回は参加者を募集するにあたり</p><ul><li>新人が参画にする時に知っておいて欲しいこと</li><li>自分が新人の時に知っておきたかったこと</li></ul><p>をテーマとして組みました。フューチャーでも新人研修を卒業したら、様々な案件に参画しますが、その時の一助となるような記事が集まっています。</p><h2 id="投稿スケジュール・タイトル"><a href="#投稿スケジュール・タイトル" class="headerlink" title="投稿スケジュール・タイトル"></a>投稿スケジュール・タイトル</h2><p>本連載は以下のスケジュールで進みます。気になる記事、読んでみたい記事はぜひ読んでいただいたりシェアしていただけると嬉しいです。</p><table><thead><tr><th>日付</th><th>執筆者</th><th>タイトル</th></tr></thead><tbody><tr><td>4/14</td><td>真野隼記</td><td><a href="/articles/20210414b/">春だから学ぶシステム連携</a></td></tr><tr><td>4/15</td><td>仁木美来</td><td><a href="/articles/20210415a/">実務で扱う未経験技術を効率良く習得するために考えたこと／経験別入社前にやっておくといいこと</a></td></tr><tr><td>4/16</td><td>中山祐一</td><td><a href="/articles/20210416b/">(新卒で役にたつ！)SQL小技集</a></td></tr><tr><td>4/19</td><td>牛尾夏輝</td><td><a href="/articles/20210419b/">IT初学者がカラムナデータベースを勉強してみた</a></td></tr><tr><td>4/20</td><td>江口小夏</td><td><a href="/articles/20210420a/">議事メモ作成の心得</a></td></tr><tr><td>4/21</td><td>柴尾哲也</td><td><a href="/articles/20210421a/">情報の民主化のために発信しましょう</a></td></tr><tr><td>4/22</td><td>須田桂伍</td><td><a href="/articles/20210422a/">Technical Credibilityを築くということ</a></td></tr></tbody></table><p>※公開日、タイトルなどは変更になる可能性があります。ご了承ください。</p><h2 id="2021の連載について"><a href="#2021の連載について" class="headerlink" title="2021の連載について"></a>2021の連載について</h2><p><a href="/articles/20210112/">技術ブログの年間連載予定を発表します</a>で紹介しているように複数の連載企画が立ち上がっています。すでにGo1.16連載、GCP連載、シェルスクリプト連載などを実施済みです。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>今回の連載の記事も力作揃いですので楽しみにお待ちください！</p><p>2020年の入門連載も合わせて読んでみてください。</p><div class="iframely-embed"><div class="iframely-responsive" style="height: 140px; padding-bottom: 0;"><a href="https://future-architect.github.io/articles/20200529/index.html" data-iframely-url="//cdn.iframe.ly/api/iframe?url=https%3A%2F%2Ffuture-architect.github.io%2Farticles%2F20200529%2F&key=42622142e53a4cc5ab36703bcee5415f"></a></div></div><script async src="//cdn.iframe.ly/embed.js" charset="utf-8"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;こんにちは。技術ブログ運営の&lt;a href=&quot;https://twitter.com/kaedemalu&quot;&gt;伊藤太斉&lt;/a&gt;です。2021年も春の入門連載を開催します。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/20210414a/IMG_0722.JPG&quot;&gt;&lt;br</summary>
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="春の入門連載" scheme="https://future-architect.github.io/tags/%E6%98%A5%E3%81%AE%E5%85%A5%E9%96%80%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>KMSで暗号化してLambdaで復号化する</title>
    <link href="https://future-architect.github.io/articles/20210413a/"/>
    <id>https://future-architect.github.io/articles/20210413a/</id>
    <published>2021-04-12T15:00:00.000Z</published>
    <updated>2021-04-15T01:32:44.958Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/20210413a/Screen_Shot_2021-03-24_at_2.18.57.png"></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>フューチャーの棚井龍之介です。</p><p>認証情報を Lambda の環境変数に渡す要件が発生し、</p><ul><li>Lambda は環境変数を含めて Terraform 管理配下にある</li><li>コードは全て GitHub で履歴管理している</li><li>生の認証情報はリポジトリに Push すべきでない</li></ul><p>となったため、認証情報を KMS で暗号化して、リポジトリには暗号化した値を登録し、Lambda 内で復号化する構成を取りました。</p><p>認証情報のコード管理について、Terraform 作業とローカル作業を組み合わせて対応できたため、備忘録も兼ねて手順をブログ化しました。</p><h2 id="KMS-とは"><a href="#KMS-とは" class="headerlink" title="KMS とは"></a>KMS とは</h2><p>公式: <a href="https://aws.amazon.com/jp/kms/">AWS Key Management Service (KMS)</a></p><p>AWS の提供する、データの暗号化・復号化サービスです。共通鍵暗号の仕組みを使い、データベースの接続キーや認証情報の暗号化・復号化機能を提供します。他サービスと組み合わせることにより、KMS でアクセスキーで暗号化して、EC2 から RDS への接続時にのみ復号化する、といった柔軟な対応も可能です。</p><p>KMS の仕組み自体は、Classmethod さんの書かれた「<a href="https://dev.classmethod.jp/articles/10minutes-kms/">10分でわかる！Key Management Serviceの仕組み</a>」が詳しいのです。</p><h2 id="Terraform-とは"><a href="#Terraform-とは" class="headerlink" title="Terraform とは"></a>Terraform とは</h2><p>公式: <a href="https://www.terraform.io/">Terraform</a></p><p>HashiCorp 社により開発されている、OSS のクラウド管理ツールです。AWS や GCP などのクラウドサービスに対して、リソースの作成・削除や、各種パラメータの調整機能をコードベースで提供します。オペレーターになどよる GUI 操作や AWS CLI コマンド操作を排除し、インフラリソース管理を Terraform に一本集中することで、煩雑なリソース管理作業を簡略化することができます。</p><p>Future の技術ブログでは、<a href="/tags/Terraform/">Terraform 関連の投稿</a>がありますので、こちらも合わせてご覧ください。</p><p>Terraform やってみたいという方は、以下の記事がオススメです。</p><ul><li><a href="/articles/20190816/">はじめてのTerraform 0.12 ～環境構築～</a></li><li><a href="/articles/20200624/">春の入門祭り🌸 #18 Terraform 101</a></li></ul><h1 id="本記事の流れ"><a href="#本記事の流れ" class="headerlink" title="本記事の流れ"></a>本記事の流れ</h1><p>KMS の暗号化・復号化操作を、以下の流れで説明します。</p><ul><li>Terraform で KMS マスターキーの生成</li><li>AWS CLI で暗号化・復号化</li><li>Lambda で KMS 操作</li></ul><p>また、本記事では一部 Terraform による操作を前提としていますが、基本的な Terraform 操作の説明は省略しています。</p><h1 id="Terraform-で-KMS-マスターキーの生成"><a href="#Terraform-で-KMS-マスターキーの生成" class="headerlink" title="Terraform で KMS マスターキーの生成"></a>Terraform で KMS マスターキーの生成</h1><p>Terraform で KMS リソースを作成します。</p><p>KMS マスターキーの定義だけでなく、エイリアスも同時に定義します。</p><p>マスターキーの値は <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> のような値であり非常に判別しづらいため、別名（エイリアス）として <code>alias/demo-alias</code> のように任意の識別名を付与します。</p><p>マスターキーの値と Alias の関係は <strong>マスターキー : Alias = 1 : n</strong> なので、1つのマスターキーには複数の Alias が設定可能です。逆に、1つの Alias を複数のマスターキーに紐づけることはできません。</p><p>公式: <a href="https://docs.aws.amazon.com/ja_jp/kms/latest/developerguide/kms-alias.html">エイリアスの使用</a></p><figure class="highlight go"><figcaption><span>kms</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_kms_key&quot;</span> <span class="string">&quot;demo&quot;</span> &#123;</span><br><span class="line">  description             = <span class="string">&quot;for demo&quot;</span></span><br><span class="line">  key_usage               = <span class="string">&quot;ENCRYPT_DECRYPT&quot;</span></span><br><span class="line">  enable_key_rotation     = <span class="literal">true</span></span><br><span class="line">  deletion_window_in_days = <span class="number">7</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_kms_alias&quot;</span> <span class="string">&quot;demo&quot;</span> &#123;</span><br><span class="line">  name          = <span class="string">&quot;alias/demo-alias&quot;</span></span><br><span class="line">  target_key_id = aws_kms_key.demo.id</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Terraform 定義パラメータ</p><ul><li><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/kms_key">aws_kms_key</a></li><li><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/kms_alias">aws_kms_alias</a></li></ul><p>リソース定義を追加後、<code>$ terraform plan/apply</code> により KMS マスターキーと Alias を作成します。</p><h1 id="AWS-CLI-で暗号化・復号化"><a href="#AWS-CLI-で暗号化・復号化" class="headerlink" title="AWS CLI で暗号化・復号化"></a>AWS CLI で暗号化・復号化</h1><p>作成した Alias を用いて、テキスト情報の暗号化・復号化作業を実施してみます。</p><p>暗号化作業で <code>AliasArn</code> の値を使うため、環境変数 <strong>$KEYID</strong> に登録します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># KEYID に登録</span></span><br><span class="line">$ <span class="built_in">export</span> KEYID=$(aws kms list-aliases \</span><br><span class="line">--query <span class="string">&#x27;Aliases[?AliasName==`alias/demo-alias`]&#x27;</span> | jq -r <span class="string">&#x27;.[].AliasArn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 確認</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$KEYID</span></span><br><span class="line">arn:aws:kms:ap-northeast-1:&#123;aws-account&#125;:<span class="built_in">alias</span>/demo-alias</span><br></pre></td></tr></table></figure><h2 id="暗号化"><a href="#暗号化" class="headerlink" title="暗号化"></a>暗号化</h2><p>ローカルに <code>PlaintextFile</code> の名前でファイルを生成して、認証情報の平文を保存します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ vim PlaintextFile</span><br><span class="line"></span><br><span class="line">$ cat PlaintextFile</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><p>続いて、AWS CLI コマンドにより <code>PlaintextFileの中身（=平文）</code> を暗号化します。</p><p>コマンド実行後、KMS により暗号化された認証情報が <code>CiphertextBlob</code> として取得できます。CiphertextBlob の実態は、認証情報を暗号化して Base64 エンコードした値です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ aws kms encrypt \</span><br><span class="line">  --key-id <span class="variable">$KEYID</span> \</span><br><span class="line">  --plaintext fileb://PlaintextFile</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;KeyId&quot;</span>: <span class="string">&quot;arn:aws:kms:ap-northeast-1:&#123;aws-account&#125;:key/&#123;key-id&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;CiphertextBlob&quot;</span>: <span class="string">&quot;&#123;暗号文&#125;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上で「平文を暗号化して、暗号文を取得するまで」が完了です。</p><h2 id="復号化"><a href="#復号化" class="headerlink" title="復号化"></a>復号化</h2><p>暗号文 <code>CiphertextBlob</code> の値を復号化してみましょう。</p><p>先ほどの操作で生成した暗号文 <code>CiphertextBlob</code> を、<code>CiphertextFile</code> に保存します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ aws kms encrypt \</span><br><span class="line">  --key-id <span class="variable">$KEYID</span> \</span><br><span class="line">  --plaintext fileb://PlaintextFile \</span><br><span class="line">  --query CiphertextBlob \</span><br><span class="line">  --output text | base64 --decode &gt; CiphertextFile</span><br></pre></td></tr></table></figure><p>復号化コマンドを実行すると、最初に暗号化した平文が取得できます。<br>暗号文自体に KEYID の情報が格納されているので、復号化のコマンドには <code>--key-id $KEYID</code> の指定が不要です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ aws kms decrypt \</span><br><span class="line">  --ciphertext-blob fileb://CiphertextFile \</span><br><span class="line">  --query Plaintext \</span><br><span class="line">  --output text | base64 --decode</span><br><span class="line">Hello, World!</span><br></pre></td></tr></table></figure><p>以上で「暗号文の復号化」が完了しました。</p><h1 id="Lambda-で-KMS-操作"><a href="#Lambda-で-KMS-操作" class="headerlink" title="Lambda で KMS 操作"></a>Lambda で KMS 操作</h1><p>KMS で生成した暗号文を、Lambda の中で復号化します。</p><p>先ほどの暗号化作業で作成した <code>CiphertextBlob</code> の値を、Lambda 内で復号化します。</p><p>KMS の復号化には <code>kms:Decrypt</code> のポリシーが必須なので、demo 用の Lambda に以下のインラインポリシーを追加します。</p><figure class="highlight json"><figcaption><span>KMS復号化用のインラインポリシー</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Statement&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;Sid&quot;</span>: <span class="string">&quot;AllowDecryptKmsKey&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;Action&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;kms:Decrypt&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;Resource&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;arn:aws:kms:ap-northeast-1:&#123;aws-account&#125;:key/&#123;key-id&#125;&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Terraformでのlambdaのリソース構築設定に<code>kms_key_arn</code>を追記することで、lambdaはデフォルトのAWS KMSキーではなく作成したKMSのキーを利用するようになります。</p><figure class="highlight go"><figcaption><span>lambda</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_lambda_function&quot;</span> <span class="string">&quot;kms_lambda&quot;</span> &#123;</span><br><span class="line">  filename      = <span class="string">&quot;lambda_initial_script.zip&quot;</span></span><br><span class="line">  function_name = <span class="string">&quot;kms-lambda&quot;</span></span><br><span class="line">  role          = aws_iam_role.lambdarole.arn</span><br><span class="line">  handler       = <span class="string">&quot;lambda&quot;</span></span><br><span class="line">  runtime       = <span class="string">&quot;go1.x&quot;</span></span><br><span class="line">  memory_size   = <span class="number">1024</span></span><br><span class="line">  timeout       = <span class="number">900</span></span><br><span class="line">  kms_key_arn   = aws_kms_key.demo.arn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手動で設定を行う場合は環境変数の設定から暗号化設定を有効化します。<br><img src="/images/20210413a/lambda.png"></p><h2 id="Lambda-で復号化"><a href="#Lambda-で復号化" class="headerlink" title="Lambda で復号化"></a>Lambda で復号化</h2><p>以下のコードを Lambda にデプロイして、復号化結果を取得してみます。<br><code>encryptedKey</code> には、<code>CiphertextBlob</code> の値を直接代入しています。</p><figure class="highlight go"><figcaption><span>kms-demo-lambda</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-lambda-go/lambda&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/aws/session&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/service/kms&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// CiphertextBlob</span></span><br><span class="line"><span class="keyword">var</span> encryptedKey = <span class="string">&quot;(CiphertextBlobの値)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> svc = kms.New(session.Must(session.NewSession()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(HandleRequest)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleRequest</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">decryptedKey, err := decryptKey(encryptedKey)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;Decrypted text is: %s&quot;</span>, decryptedKey), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">decryptKey</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">v, err := base64.StdEncoding.DecodeString(key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">in := kms.DecryptInput&#123;</span><br><span class="line">CiphertextBlob: v,</span><br><span class="line">&#125;</span><br><span class="line">out, err := svc.Decrypt(&amp;in)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> strings.Replace(<span class="keyword">string</span>(out.Plaintext), <span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="number">-1</span>), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>コマンドで動作確認<br>invoke を実行して、関数のレスポンスを取得</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ aws lambda invoke \</span><br><span class="line">  --function-name kms-demo-lambda outfile.txt</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;StatusCode&quot;</span>: 200,</span><br><span class="line">    <span class="string">&quot;ExecutedVersion&quot;</span>: <span class="string">&quot;<span class="variable">$LATEST</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$ cat outfile.txt</span><br><span class="line"><span class="string">&quot;Decrypted text is: Hello, World!&quot;</span></span><br></pre></td></tr></table></figure><p>暗号化されていた <code>CiphertextBlob</code> の値が、正しく復号化されたことを確認できました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>本記事では、KMS のマスターキー生成を Terraform で行い、暗号化は AWS CLI で手動実施するというハイブリッド方式をご紹介しました。</p><p><code>CiphertextBlob</code> の値は KMS で暗号化済みのため、Terraform やアプリケーションコードに直接追記しても問題ありません（Lambdaで利用するならば、ハードコードではなく環境変数に追記すべきですが）。GitHub 管理するコード上には暗号文のまま登録して、呼び出し先で復号化する機能配置ならば、生の認証情報がリポジトリに残らないようにできます。</p><p>以上、長文にお付き合いいただき、ありがとうございました。</p><h2 id="参照記事"><a href="#参照記事" class="headerlink" title="参照記事"></a>参照記事</h2><ul><li><a href="https://dev.classmethod.jp/articles/decrypt-sensitive-data-with-kms-on-lambda-invocation/">KMSで認証情報を暗号化しLambda実行時に復号化する</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/images/20210413a/Screen_Shot_2021-03-24_at_2.18.57.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="Lambda" scheme="https://future-architect.github.io/tags/Lambda/"/>
    
    <category term="KMS" scheme="https://future-architect.github.io/tags/KMS/"/>
    
  </entry>
  
  <entry>
    <title>チケットごとにSlackスレッドを分けて通知するRedmineプラグインを作成しました！</title>
    <link href="https://future-architect.github.io/articles/20210413b/"/>
    <id>https://future-architect.github.io/articles/20210413b/</id>
    <published>2021-04-12T15:00:00.000Z</published>
    <updated>2021-04-13T04:51:56.741Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li><a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに</a></li><li><a href="#%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%AE%E6%A6%82%E8%A6%81">プラグイン概要</a></li><li><a href="#%E5%AE%9F%E8%A3%85%E3%81%AE%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88">実装のポイント</a></li><li><a href="#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%A8%E8%A8%AD%E5%AE%9A">インストールと設定</a></li><li><a href="#%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D">動作確認</a></li><li><a href="#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB">おわりに</a></li></ul><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>​<br>こんにちは、TIGコアテクノロジーユニットの高橋・小松です。</p><p>皆さん、Slack使っていますか？<br>​<br>Futureでは約一年前にコミュニケーションツールとして採用され社内外のコミュニケーションにSlackを使うことも増えました。そしてプロジェクト管理で利用しているRedmineは相変わらず現役です。個人的にはRedmine4.2のリリースを心待ちにしています。</p><p>さて、そうなるとRedmineからSlackへ通知したくなりますね。</p><p>以前<a href="https://future-architect.github.io/articles/20190620/">RedmineからGoogle Hangouts Chatへ連携するプラグイン</a>を紹介しましたが今回そのSlack版を作成しましたので紹介します！</p><h3 id="既存redmine-slackプラグインとの違い"><a href="#既存redmine-slackプラグインとの違い" class="headerlink" title="既存redmine slackプラグインとの違い"></a>既存redmine slackプラグインとの違い</h3><p>Github上に<a href="https://github.com/sciyoshi/redmine-slack">redmine-slack</a>プラグインがすでに公開されていますが、題名にもある通り今回開発したRedmine Slack IntegrationプラグインはRedmineチケットごとにSlackスレッドを分けて通知してくれます。</p><p>これによりスレッド内で過去の更新を確認でき、議論しやすくなります。またプロジェクトやユーザごとに通知を無効化できる機能もつけています。<br>​<br>Redmineでチケット起票や更新のイベントが発生した際に、自動的にSlackチャンネルにメッセージが送信されます。</p><h3 id="主な機能"><a href="#主な機能" class="headerlink" title="主な機能"></a>主な機能</h3><ol><li>RedmineチケットごとにSlackスレッドを分けてチケットの内容/各ステータス更新を通知します。</li><li>プロジェクト単位で、Slack通知先チャンネルの設定ができます。</li><li>見落とし防止のため、Slackチャンネル通知(Also send to)も行います。</li><li>親子関係プロジェクトで、指定した子プロジェクトだけのチケット更新を通知対象外として設定できます。</li><li>指定したユーザのチケット更新を通知対象外として設定できます。</li></ol><h2 id="実装のポイント"><a href="#実装のポイント" class="headerlink" title="実装のポイント"></a>実装のポイント</h2><p>Google HangoutsとSlackではスレッドIDの管理方法が少々異なります。<br>Google Hangoutsは任意の値をスレッドIDとすることができるためRedmineチケットURLのハッシュ値をスレッドIDとしました。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Google Hangouts通知のスレッドIDの設定部分抜粋</span></span><br><span class="line">thread_key = Digest::MD5.hexdigest(issue_url)</span><br><span class="line">thread_url = webhook_url + <span class="string">&quot;&amp;thread_key=&quot;</span> + thread_key</span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Hangouts通知部分抜粋</span></span><br><span class="line">client.post_async url, &#123;<span class="symbol">:body</span> =&gt; data.to_json, <span class="symbol">:header</span> =&gt; &#123;<span class="string">&#x27;Content-Type&#x27;</span> =&gt; <span class="string">&#x27;application/json&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>一方SlackはスレッドIDをRedmine側から指定することができずSlack側で生成されたスレッドIDを取得する必要があります。</p><p>そのためSlackApp(インストール方法は後述)からスレッドIDの戻り値を取得しRedmineチケットのカスタムフィールドでスレッドIDを管理することにしました。</p><p>これによりチケット新規作成時はスレッドIDを取得するため同期http通信となりますがチケット更新時は非同期http通信でSlackへ連携することでパフォーマンスが落ちにくくなります。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Slack通知部分抜粋</span></span><br><span class="line"><span class="keyword">if</span> thread_ts.blank?</span><br><span class="line">  res = client.post slack_api_url, &#123;<span class="symbol">:body</span> =&gt; data.to_json, <span class="symbol">:header</span> =&gt; header&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  client.post_async slack_api_url, &#123;<span class="symbol">:body</span> =&gt; data.to_json, <span class="symbol">:header</span> =&gt; header&#125;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SlackスレッドID取得抜粋</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  res_body = JSON.parse(res.http_body.content)</span><br><span class="line"><span class="keyword">rescue</span> Exception =&gt; e</span><br><span class="line">  Rails.logger.warn(<span class="string">&quot;Cannot parse JSON string: <span class="subst">#&#123;res.http_body.content&#125;</span>&quot;</span>)</span><br><span class="line">  Rails.logger.warn(e)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span> <span class="keyword">if</span> res_body.<span class="literal">nil</span>?</span><br><span class="line"><span class="keyword">return</span> res_body[<span class="string">&#x27;ts&#x27;</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​</p><h2 id="インストールと設定"><a href="#インストールと設定" class="headerlink" title="インストールと設定"></a>インストールと設定</h2><h3 id="1-インストール"><a href="#1-インストール" class="headerlink" title="1. インストール"></a>1. インストール</h3><p>​<br><a href="https://github.com/future-architect/redmine_slack_integration/blob/master/README.md">README</a>を参照してください。</p><p>(フューチャー社内連絡)利用の際はコンシェルジュで依頼ください</p><h3 id="2-Slack-APP新規作成"><a href="#2-Slack-APP新規作成" class="headerlink" title="2. Slack APP新規作成"></a>2. Slack APP新規作成</h3><ol><li><p>前提条件</p><ul><li>Slack APP作成するユーザはSlackチャンネルに書き込みの権限が必要です。</li></ul></li><li><p>Slack URLを開く</p><ul><li><a href="https://api.slack.com/apps/">https://api.slack.com/apps/</a></li></ul></li><li><p>Slack App作成</p><ul><li>画面右上の「Create New App」をクリックしてください。<br><img src="/images/20210413b/20210302_050412_MUu9IrrIbg7w.png" alt="2021-03-02_17h02_40.png"></li></ul></li><li><p>Slack App基本情報の入力</p><ul><li>立ち上がったポップアップへ以下情報を入力して、「Create App」をクリックして、保存してください。<table><thead><tr><th align="left">項目名</th><th align="left">値</th><th align="left">説明</th></tr></thead><tbody><tr><td align="left">App Name</td><td align="left">Slack App名</td><td align="left"></td></tr><tr><td align="left">Development Slack Workspace</td><td align="left">連携するSlackチャンネルのワークスペース</td><td align="left"></td></tr></tbody></table></li></ul><p><img src="/images/20210413b/20210311_061735_szaJQUXknPxD.png" alt="2021-03-02_17h35_28.png"></p></li><li><p>「OAuth &amp; Permissions」画面を開く</p><ul><li>画面の左側メニューの「Features」-&gt;「OAuth &amp; Permissions」をクリックしてください。<br><img src="/images/20210413b/20210311_061919_Y8ExQo1I03HK.png" alt="2021-03-02_20h17_33.png"></li></ul></li><li><p>Scopes追加</p><ul><li>画面の中央に「Scopes」-&gt;「Bot Token Scopes」-&gt;「Add an OAuth Scope」をクリックして、chat:write、chat:write.customize、chat:write.publicのscopeを追加してください。<br><img src="/images/20210413b/20210302_083053_jNMHi35XtJ4D.png" alt="2021-03-02_20h30_16.png"></li></ul></li><li><p>Bot User OAuth Token作成</p><ul><li>画面の上に「OAuth Tokens &amp; Redirect URLs」-&gt;「Install to Workspace」をクリックしてください。<br><img src="/images/20210413b/20210302_084904_6h6zUh2LRNeE.png" alt="2021-03-02_20h39_02.png"><br>立ち上がったポップアップの「許可する」をクリックして、Bot User OAuth Tokenを作成します。<br><img src="/images/20210413b/20210311_062417_BXwWoDuY3G67.png" alt="2021-03-02_20h53_11.png"></li></ul></li><li><p>Bot User OAuth Tokenをコピー</p><ul><li>「OAuth Tokens for Your Team」-&gt; 「Bot User OAuth Token」のトークン内容をメモしてください。（「Copy」をクリック）<br><img src="/images/20210413b/20210302_090112_KthIlVZmu6RK.png" alt="2021-03-02_20h56_42.png"></li></ul></li></ol><p>​</p><h3 id="3-Redmine設定​"><a href="#3-Redmine設定​" class="headerlink" title="3. Redmine設定​"></a>3. Redmine設定​</h3><p>​</p><h4 id="3-1-Redmineプロジェクト設定"><a href="#3-1-Redmineプロジェクト設定" class="headerlink" title="3-1. Redmineプロジェクト設定"></a>3-1. Redmineプロジェクト設定</h4><ol><li>Redmineプロジェクト管理者権限があるアカウントでログインしてください。</li><li>プロジェクトの「設定」-&gt; 「情報」の画面を開いてください。</li><li>「Slack Channel」にSlack通知先チャンネル名を入力してください。</li><li>「Slack Token」にコピーしたトークン内容を貼り付けてください。</li><li>「Slack Disabled」を「いいえ」に選択してください。</li><li>「保存」をクリックして、設定内容を保存してくだくさい。</li></ol><p><img src="/images/20210413b/20210311_063301_O4jfcZ1FSAny.png" alt="2021-03-03_16h38_35.png"></p><h4 id="3-2-特定子プロジェクトだけ通知を無効"><a href="#3-2-特定子プロジェクトだけ通知を無効" class="headerlink" title="3-2. 特定子プロジェクトだけ通知を無効"></a>3-2. 特定子プロジェクトだけ通知を無効</h4><p>親子関係のRedmineプロジェクトで、子プロジェクトのSlack通知設定情報は親プロジェクトから継承できるため、親プロジェクトでの設定されたSlackチャンネルも通知できます。</p><p>一方、特定子プロジェクトだけ通知を無効にすることもできます。</p><ol><li>Redmineプロジェクト管理者権限があるアカウントでログインしてください。</li><li>プロジェクトの「設定」-&gt; 「情報」の画面を開いてください。</li><li>「Slack Disabled」を「はい」に選択してください。</li><li>「保存」をクリックして、設定内容を保存してください。</li></ol><p><img src="/images/20210413b/20210311_063536_RFkCB7QcO9e8.png" alt="2021-03-04_11h11_29.png"></p><h4 id="3-3-特定ユーザだけ通知を無効"><a href="#3-3-特定ユーザだけ通知を無効" class="headerlink" title="3-3. 特定ユーザだけ通知を無効"></a>3-3. 特定ユーザだけ通知を無効</h4><p>特定ユーザからのチケット更新の通知を無効にしたい場合は「個人設定」の「Slack Disabled」を「はい」にしてください。</p><p>例えば、ビルドユーザで大量のREST-APIを利用するシーンなどを想定しています。</p><p>設定はビルドユーザでログインしてビルドユーザの個人設定画面で行ってください。<br>​<br><img src="/images/20210413b/20210304_111712_yt9XAeY0BE7p.png" alt="2021-03-04_11h14_25.png"></p><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>​</p><h3 id="チケット新規起票"><a href="#チケット新規起票" class="headerlink" title="チケット新規起票"></a>チケット新規起票</h3><p><img src="/images/20210413b/20210311_064251_fBozRNNlpJMZ.png" alt="2021-03-04_11h32_12.png"></p><h3 id="チケット更新"><a href="#チケット更新" class="headerlink" title="チケット更新"></a>チケット更新</h3><p><img src="/images/20210413b/20210311_064454_UEQgnwhbNw6p.png" alt="2021-03-04_11h48_25.png"></p><h3 id="Slackスレッドで議論"><a href="#Slackスレッドで議論" class="headerlink" title="Slackスレッドで議論"></a>Slackスレッドで議論</h3><p>​一例ですが、Redmineの更新を受けてSlackスレッドで議論することで対応をスムーズに進めることができます。</p><p><img src="/images/20210413b/20210316_034609_GO1fXyegzuce.png" alt="2021-03-16_15h18_43.png"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>我々のチームではRedmine Slack IntegrationプラグインでSlackのスレッドがとても管理しやすくなりました。</p><p>Githubからダウンロード可能ですのでぜひお試しください。Pull Requestもお待ちしております。</p><p>このプラグインがスムーズなプロジェクト運営の一助になれば幸いです。</p><hr><p><strong>TIGコアテクノロジーユニット</strong></p><p>TIGコアテクノロジーユニットでは、現在チームメンバーを募集しています。</p><p>私たちと一緒にテクノロジーで設計、開発、テストの高品質・高生産性を実現する仕組みづくりをしませんか？</p><p>興味がある方はお気軽に技術ブログTwitterや会社採用HPへ、連絡をお待ちしております。</p><p><a href="https://www.future.co.jp/recruit/">https://www.future.co.jp/recruit/</a></p><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目次&quot;&gt;&lt;a href=&quot;#目次&quot; class=&quot;headerlink&quot; title=&quot;目次&quot;&gt;&lt;/a&gt;目次&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB&quot;&gt;はじめに&lt;/a&gt;&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Redmine" scheme="https://future-architect.github.io/tags/Redmine/"/>
    
    <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
    <category term="Slack" scheme="https://future-architect.github.io/tags/Slack/"/>
    
  </entry>
  
</feed>
