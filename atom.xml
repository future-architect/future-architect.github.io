<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  <icon>https://future-architect.github.io/feed_icon.png</icon>
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2022-04-14T06:31:32.776Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WordPressの脆弱性への攻撃とセキュリティ対策の実施</title>
    <link href="https://future-architect.github.io/articles/20220414a/"/>
    <id>https://future-architect.github.io/articles/20220414a/</id>
    <published>2022-04-13T15:00:00.000Z</published>
    <updated>2022-04-14T06:31:32.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>2021年7月入社の八田です。現在はCSIG（Cyber Security Innovation Group）に所属しています。CSIGは、リスクアセスメントやセキュリティ対策支援を行うコンサルティングチームと、FutureVulsの開発を行っているチームがあり、私は前者のコンサルティングチームに所属しています。今回はIT未経験で入社した私が技術面のキャッチアップとして取り組んだ、脆弱性への攻撃および対策方法を共有したいと思います。</p><p>本記事で、読者の皆さんのセキュリティ分野への関心・理解を深められたり、「文系・IT未経験でも入社半年でこのレベルのことができるようになるのだ！」ということを伝えられたら嬉しいです。</p><h1 id="WordPressプラグインの脆弱性CVE-2020-25213"><a href="#WordPressプラグインの脆弱性CVE-2020-25213" class="headerlink" title="WordPressプラグインの脆弱性CVE-2020-25213"></a>WordPressプラグインの脆弱性CVE-2020-25213</h1><p>今回扱ったのは、WordPressのプラグインFile Managerの脆弱性で、CVE-2020-25213が割り当てられているものです。</p><p>ご存知の方も多いかもしれませんが、WordPressというのは簡単にホームページが作成できるCMS（Contents Management System）であり、File ManagerはWordPress上のフォルダやファイルの管理ができるプラグインのことです。その利便性が故に、File Managerは非常に人気のプラグインでダウンロードは70万を超えているようです。</p><p>そんな大人気のプラグインFile Managerですが、2020年に重大な脆弱性が発覚しました。<br>この脆弱性を利用することで、認証不要でファイルのアップロードができます。WebShellをアップロードすることで、任意のコードを実行することができます。</p><p>この脆弱性を利用すれば、Webサーバからの情報漏洩やサイトの改ざんが可能です。また、具体的な方法は後述しますが攻撃が非常に容易であるのもこの脆弱性の特徴で、誰でも利用できてしまいます。（今回のキャッチアップでこの脆弱性を選んだのも攻撃が容易だったというのが理由です。）</p><p>また、米国のサイバーセキュリティやインフラの安全に関わるアドバイザリーを行う政府機関のCISA（Cybersecurity and Infrastructure Security Agency）が発表している脆弱性リスト「Known Exploited Vulnerabilities Catalog（KEV Catalog）」にも登録されていることから、悪用される危険性が非常に高い脆弱性ということがわかります。</p><h1 id="攻撃方法"><a href="#攻撃方法" class="headerlink" title="攻撃方法"></a>攻撃方法</h1><p>今回確認したPoCは、攻撃対象のWordPressサーバとは別のホストから攻撃を仕掛け、攻撃対象のWordPressサーバに格納されたテストファイルの削除や新たにファイル配置を行うというものです。</p><p>攻撃対象サーバ構築では、以下のものを使用しました。</p><p><strong>環境情報（攻撃対象サーバ）</strong></p><ul><li>CentOS 7.9</li><li>Apache 2.4.6</li><li>MariaDB 10.6</li><li>PHP 8.0</li><li>WordPress 5.9.1</li><li>File Manager 6.0</li></ul><p>一般的な構築手順のためインストール作業の詳細は省略しますが、以下の流れで進めました。</p><ol><li>Apache、MariaDB、PHPインストール</li><li>WordPressインストール</li><li>File Managerインストール</li><li>テストファイル（testfile）作成</li></ol><p><strong>環境情報（攻撃クライアント）</strong></p><ul><li>CentOS 7.9（攻撃対象サーバとは別に用意）</li><li>Python 2.7</li><li>pip 20.3.4</li><li>requests 2.6.0</li></ul><p>検証に使うPoCは<a href="https://github.com/w4fz5uck5/wp-file-manager-0day/blob/master/elFinder.py">こちら</a>で公開されているコードを使用しました。</p><p>このPoCは、攻撃対象サーバのconnector.minimal.phpというファイルに対してPOSTし、connector.minimal.phpを介してelFinder（サーバ内のファイルを扱うもの）インスタンスを呼び出すことで、x.phpというWebShellを配置します。そして配置したx.phpに対して任意のコマンドを送ります。<br><img src="/images/20220414a/攻撃仕組み4_2022-04-08_085527.png" alt="攻撃仕組み4_2022-04-08_085527.png" width="934" height="631" loading="lazy"></p><p>したがって、今回のFile Managerの脆弱性はconnector.minimal.phpが外部から実行できてしまうことに原因があると言えるでしょう。</p><h2 id="攻撃実行"><a href="#攻撃実行" class="headerlink" title="攻撃実行"></a>攻撃実行</h2><p>攻撃対象サーバに対して攻撃をしていきます。<br><code>./vul.py http //192.168.10.6/wordpress</code><br>まず、攻撃クライアント構築で作成したファイルを実行します。これにより、攻撃側が用意したPHPファイルが攻撃対象サーバへ格納され、任意のコマンド実行が可能な状態となります。</p><p>その後、任意のコマンドを入力できるようになるので、攻撃対象サーバ内で実行させたい任意のコマンドを入力します。</p><p>今回実行したコマンドは順に、</p><ol><li>既存ファイルの削除<br><code>rm -f /var/www/html/testfile</code></li><li>ファイルの配置<br><code>touch /var/www/html/wordpress/testfile2</code></li><li>ファイルへの書き込み<br><code>echo Hello &gt;&gt; /var/www/html/wordpress/testfile2</code></li></ol><p>の3つです。</p><p>※上の黒いウィンドウが攻撃対象（192.168.10.6）、下の青いウィンドウが攻撃クライアントです。<br><img src="/images/20220414a/攻撃実行タイトルフレーム付_0408.gif" alt="攻撃実行タイトルフレーム付_0408" width="959" height="984" loading="lazy"></p><p>このように、非常に簡単にWordPressサーバ内のファイル配置や削除、変更が可能であることがわかります。<br>これを利用すれば、WordPress関連の設定ファイルの改ざんや悪意のあるスクリプトが記載されたファイルをアップロードするといった不正が行われてしまいます。</p><h1 id="対策方法"><a href="#対策方法" class="headerlink" title="対策方法"></a>対策方法</h1><p>攻撃に対してどのように検知・防御できるかを検討しました。</p><p>脆弱性に対する対策として、ソフトウェアのアップデートを行うことが最も効果的です。</p><p>しかし、他のソフトウェアとの互換性がなくなってしまう、などの事情でアップデートできない場合も考えられます。そこで今回は、他に行うことができる対策として複数のセキュリティツールで対策を行う、多層防御を実施しました。<br><img src="/images/20220414a/対策図_2022-04-08_104452.png" alt="対策図_2022-04-08_104452" width="837" height="478" loading="lazy"></p><p>複数の層で対策をすることで、一か所の防御が破られても他のレイヤでカバーできセキュリティレベルが高まります。</p><p>実際に行った対策は以下の通りです。</p><ol><li>改ざん検知</li><li>脆弱性検知・管理</li><li>侵入防御</li><li>アクセス制御</li><li>ログ監視・通知</li></ol><p>実施した各対策について説明していきたいと思います。</p><h2 id="1-改ざん検知"><a href="#1-改ざん検知" class="headerlink" title="1. 改ざん検知"></a>1. 改ざん検知</h2><p>今回の攻撃では、攻撃用のPHPファイルが追加されたり既存のファイルが削除されたりと、攻撃対象サーバ内でのファイルの不審な動きが多かったため、ファイルの変更監視を行うTripwireというツールを使用して改ざん検知および間接的な不正侵入検知を行いました。</p><p>Tripwireとはホスト型IDSで、あらかじめ作成したベースラインデータベースと現行システム上のファイル・ディレクトリの状態を照合（整合性チェック）することで、差分検知を行います。また、不正に改ざんされたり意図せず破損してしまったりした場合には元の状態に戻すこともできます。</p><p>こちらを使って、実施した攻撃の一つのテストファイルの削除を検知しました。</p><h3 id="検知の実施"><a href="#検知の実施" class="headerlink" title="検知の実施"></a>検知の実施</h3><p>差分検知には、監査対象および監査ルールを定義するポリシーファイルとベースラインデータベースの作成が必要です。まず、ポリシーファイルを作成します。<br>デフォルトのポリシーファイルの内容を今回の環境に最適化するため、ファイルを書き換えました。<br>新しいポリシーファイルを基にベースラインとなるデータベースを作成します。<br><code>tripwire -m i -s -c /etc/tripwire/tw.cfg</code></p><p>データベースが作成できたら、攻撃クライアントから攻撃対象サーバ内のテストファイルを削除し、攻撃対象サーバで差分検知をします。<br><code>tripwire -m c -s -c /etc/tripwire/tw.cfg</code><br>レポートを見てみるとテストファイルがなくなっていることがわかります。<em>➀<br>また、Modifiedの欄にあるPHPファイルが攻撃クライアントから送られてきたものです。</em>➁（何度も攻撃しているのでModified欄に入っていますが、攻撃初回はAddedの欄に表示されると思います。）<br><img src="/images/20220414a/TWレポート_再_2022-04-01_102943_(4).png" alt="TWレポート_再" width="686" height="342" loading="lazy"></p><p>今回は手動で差分検知を実施しましたが、cronで設定することで定期的な自動検知が可能となります。<br>また、ポリシーファイル内でEmailアドレスを設定すれば、ルール違反が発生した際に通知が送信されるので、更に管理が容易になり被害を抑える迅速な対応が可能となるでしょう。</p><h2 id="2-脆弱性検知・管理"><a href="#2-脆弱性検知・管理" class="headerlink" title="2. 脆弱性検知・管理"></a>2. 脆弱性検知・管理</h2><p>日頃から自分が扱う環境に脆弱性が存在するか確認し、パッチを適用しておけば未然に被害を防ぐことができます。今回はFile Managerに潜む脆弱性の検知を行うためFutureVulsというサービスを使いました。</p><p>FutureVulsとは、2016年にフューチャーの神戸氏が開発・公開し世界的に話題になった脆弱性検知ツールOSS Vulsの商用版です。<br>OSS Vulsは管理下のシステムに入っているOSパッケージやライブラリなどのソフトウェア情報を収集し、公開されている脆弱性データベースの情報と関連付け、自システムに内在する脆弱性情報のみをメールやSlack等で関係者に通知できます。OSS Vulsの導入により脆弱性管理を効率化できます。<br>また、商用版のFutureVulsは、スキャン結果をグラフィカルに表示するダッシュボード機能、検知した脆弱性を漏れなく管理できるチケット管理機能、複数の事業部での脆弱性管理が可能なグループ横断管理機能など、OSS Vulsと比較するとより運用・管理を意識した機能が充実しています。</p><p>OSS Vuls および FutureVulsの歴史についてはこちらの記事で詳しく説明されています。</p><p><a href="https://future-architect.github.io/articles/20201027/">https://future-architect.github.io/articles/20201027/</a></p><p>今回は機能がより充実したFutureVulsを使用しました。</p><h3 id="検知の実施-1"><a href="#検知の実施-1" class="headerlink" title="検知の実施"></a>検知の実施</h3><p>対象のサーバにスキャナをインストールし、スキャンを実施します。<br>WordPressプラグインの脆弱性ということで、WordPress関連の脆弱性情報を2万件以上持つwpscan.comの脆弱性データベースを利用したWordPressスキャンを行います。</p><p>スキャンはスキャナのインストール後5分毎に行われますが、手動でも可能です。今回は手動でスキャンしてみました。<br><code>/opt/vuls-saas/vuls-saas.sh</code><br>スキャン後しばらくするとポータルサイトにスキャン結果が表示されました。<br>CVE-2020-25213が検知されていることが確認できます。<br><img src="/images/20220414a/FV_ポータルサイト1_2022-03-25_092729.png" alt="FV_ポータルサイト1" width="1200" height="542" loading="lazy"><br>管理画面では検知された脆弱性情報がまとめられています。<br><img src="/images/20220414a/FV_脆弱性詳細タブ_2022-04-01_112205.png" alt="FV_脆弱性詳細タブ" width="1200" height="636" loading="lazy"></p><p>冒頭で触れましたが、CVE-2020-25213が重大なリスクのある脆弱性としてCISAのKEVに登録されていることが詳細タブからも確認できます。<em>➀<br>また、どこから攻撃可能なのかを表す攻撃元区分や攻撃の複雑さといったCVSSの評価も表示されます。</em>➁　今回の脆弱性では攻撃の複雑さが「低」となっており、攻撃が容易であるということが推測できます。</p><p>脆弱性検知後は管理画面「タスク」タブからチケットによるタスク管理が可能です。対応に応じて各タスクのステータスを変更したりコメントを投稿して他ユーザと情報共有が行えたりします。パッチが適用されたら次回スキャンでステータスが自動で「PATCH_APPLIED」となります。</p><p>その他の機能についてはこちらから確認できます。</p><p><a href="https://help.vuls.biz/">https://help.vuls.biz/</a></p><h2 id="3-侵入防御"><a href="#3-侵入防御" class="headerlink" title="3. 侵入防御"></a>3. 侵入防御</h2><p>攻撃方法の箇所で触れましたが、今回の脆弱性の原因はconnector.minimal.phpが外部から実行できてしまう点にありました。なので、攻撃用PHPファイルをconnector.minimal.phpファイルに対してPOSTするアクセスをブロックできれば攻撃を防ぐことができます。攻撃クライアントから送られるパケットの中身を確認し不正なアクセス防御を行うためCloud One Workload Securityを使いました。</p><p>Cloud One Workload Securityとは、以前Deep Securityという名称で販売されていたもので、サーバ周りの様々なセキュリティ対策が可能な商用サービスです。今回はWAFと同等の機能である侵入防御機能を利用しましたが、他にも以下の機能が利用可能です。</p><ul><li>不正プログラム対策</li><li>Webレピュテーション</li><li>アクティビティ監視</li><li>変更監視</li><li>アプリケーションコントロール</li><li>ファイアウォール</li><li>セキュリティログ監視</li></ul><p>本サービスは、エージェントを対象サーバに導入することで利用でき、ポータルサイトで結果を一括で管理できます。<br>また、脆弱性検知と管理を行うFutureVulsと連携が可能となっており、FutureVulsで検知した脆弱性情報をもとに関連する侵入防御ポリシーを適用することができます。</p><h3 id="防御の実施"><a href="#防御の実施" class="headerlink" title="防御の実施"></a>防御の実施</h3><p>まず、攻撃対象サーバ上でCloud Oneのエージェント（ds_agent）のステータスがactiveになっていることを確認します。その後、攻撃クライアントから攻撃を仕掛けると、エラーが出て攻撃対象サーバに接続することができません。<br><img src="/images/20220414a/WS_攻撃失敗_2022-03-25_140743.png" alt="WS_攻撃失敗" width="1200" height="520" loading="lazy"></p><p>Workload Securityのポータルサイトの侵入防御イベントを見てみると、不正なアクセスが検知されブロックしたことが確認できました。<em>➀　イベントを選択し関連する情報を見てみると、CVE-2020-25213の脆弱性を理由に侵入防御されていることがわかります。</em>➁<br><img src="/images/20220414a/WS_侵入防御イベント_2022-04-01_121633.png" alt="WS_侵入防御イベント" width="1200" height="633" loading="lazy"></p><h2 id="4-アクセス制御"><a href="#4-アクセス制御" class="headerlink" title="4. アクセス制御"></a>4. アクセス制御</h2><p>次に、アクセス制御です。<br>今回の検証では、攻撃クライアントで入力したコマンドが対象サーバ/var/www/html下のファイルやディレクトリに対して実行されてしまう、というものでした。幸いなことに、Linuxにはリソースへのアクセスが指定された条件通りかどうかを監視・制御するSELinuxという仕組みが存在するため、こちらを使用してアクセス制御を行ってみました。</p><p>SELinuxにはaudit logへのログ記録のみが行えるPermissiveモードと、ログの記録に加えて不正アクセスをブロックするEnforcingモードがあります。ログに関しては次章で触れるので、ここではEnforcingモードでブロックをしてみたいと思います。</p><h3 id="検知・防御の実施"><a href="#検知・防御の実施" class="headerlink" title="検知・防御の実施"></a>検知・防御の実施</h3><p>まず、現在設定されているモードを<code>getenforce</code>コマンドで確認し、Permissiveであれば<code>setenforce 1</code>でEnforcingモードに切り替えます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# setenforce 1</span><br><span class="line">[root@localhost ~]# getenforce</span><br><span class="line">Enforcing</span><br></pre></td></tr></table></figure><p>これで準備ができたので、攻撃をしていきます。<br><img src="/images/20220414a/Enforcing_攻撃失敗確認.gif" alt="Enforcing_攻撃失敗確認" width="959" height="987" loading="lazy"><br>ファイルが削除されていないことが確認できました。<br>SELinuxのEnforcingモードを使うことによって、リモートからのコマンドを防御することができました。</p><h2 id="5-ログの監視"><a href="#5-ログの監視" class="headerlink" title="5. ログの監視"></a>5. ログの監視</h2><p>前章ではSELinuxのEnforcingモードでルール違反のアクセスブロックを行いました。しかし、実際にはEnforcingモードを有効にすると正常なアクセスも拒否されることを懸念しPermissiveモードに留め、ログ記録のみ行っている環境も多いかと思います。ということで今回は、Permissiveモードで取得したログを攻撃防御に役立てるために、Elasticsearchというサービスを使用してログの集約・検索をしてみました。<br>出力されたログの監視を行うことで攻撃の早期発見・対応に繋げられ、結果的に被害の拡大を防ぐことができるでしょう。<br>Elasticsearchとは拡張性に優れた全文検索エンジンのことです。他Elastic製品と組み合わせることで、取得したログを集約、検索、分析、検知、アラート、通知、レポートなどに活用することができます。<br>Elasticsearchに関する用語の説明やインストール方法はこちらの記事で詳しく解説されています。</p><p><a href="https://future-architect.github.io/articles/20200623/">https://future-architect.github.io/articles/20200623/</a></p><p>今回は検索を行うElasticsearch、データをグラフィカルに可視化するKibana、特定のログを収集するFilebeat Moduleを使用しaudit logおよびApacheのエラーログの確認を行いました。</p><h3 id="検知・防御の実施-1"><a href="#検知・防御の実施-1" class="headerlink" title="検知・防御の実施"></a>検知・防御の実施</h3><figure class="highlight plaintext"><figcaption><span>0```でSELinuxをPermissiveモードにしアクセス可否のログが記録されるようにしておきます。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">[root@localhost ~]# setenforce 0</span><br><span class="line">[root@localhost ~]# getenforce</span><br><span class="line">Permissive</span><br></pre></td></tr></table></figure><p>攻撃クライアントから攻撃をし、テストファイルが削除されていることを確認後、ブラウザからKibanaへアクセスします。<br>Analytics → Dashboardと進み、検索から[Filebeat Auditd]Audit Events ECSのタイトルを選択します。</p><p>SELinuxによるアクセス制御の動作はAVC(Access-Vector-Cache)というフィールドを見れば確認できます。<br>avcがdeniedとなっており、アクセス拒否のログが出力されたことがわかります。Permissiveなので実際にアクセスはブロックされずテストファイルは削除されています。<br><img src="/images/20220414a/ES_KibanaAVCdenied_2022-03-29_153632.png" alt="ES_KibanaAVCdenied" width="1200" height="609" loading="lazy"></p><p>ちなみにEnforcingモードの場合は実際にアクセスをブロックするため、audit logに加えApacheのエラーログも出力されます。<br>Analytics → Dashboardより確認してみると、Apacheのエラーが出ていることがわかります。<br><img src="/images/20220414a/ES_Apacheerrorlogcheck_2022-03-30_114834.png" alt="ES_Apacheerrorlogcheck" width="1200" height="570" loading="lazy"></p><p>このように、Elasticsearch、Kibana、Filebeat Moduleを導入することによって、確認したいログをダッシュボードで視覚的に表示することができます。</p><p>今回はKibanaでのログ確認のみを実施しましたが、章の冒頭で述べたようにPermissiveの設定の場合、不正な挙動の早期発見・対応を行うにはログを監視する必要があります。そこでおすすめなのが、X-Packという拡張機能です。<br>X-Packはアラート、モニタリング、レポートなどの機能を含むパッケージで、不正行為をリアルタイムに検知しアラート・通知させることができます。<br>例えば、今回収集した「audit logのavcの値がdeniedだった場合」「Apacheのエラーログが検出された場合」に「アラート・通知する」と設定しておけばすぐに攻撃に気づくことができるでしょう。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>本記事では、WordPressプラグインの脆弱性への攻撃～対策を実施・解説しました。</p><p>上記で示したように、アップデートができない場合でも、複数のツール・サービスを組み合わせて多層防御を行うことでより堅牢なセキュリティ対策が行えるため攻撃被害を軽減する可能性が高まります。例えば、ゼロデイ攻撃を受けた場合、Workload Securityでは未対応のため侵入防御できないことがありますが、ファイルの変更監視を行うTripwireを併せて使っていればゼロデイ攻撃への対応有無に関係なく検知ができ、不正ファイルの削除するなどの対応に繋げられます。<br>このように、一か所の対策が破られても他のものでカバーでき、甚大な被害を避けられる可能性が高まるため、異なる特徴をもつ対策を併用することをおすすめします。</p><p>また、有識者の方々に半年間根気強くサポートしていただけたおかげで、「Linuxって何？」なレベルから、仮想サーバ構築～セキュリティ対策までできるレベルに成長することができました。この記事で、「フューチャーにはチャレンジする者を応援する環境が整っている」ということが伝わっていれば幸いです。</p><p>最後までお付き合い頂きありがとうございました！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;2021年7月入社の八田です。現在はCSIG（Cyber Security Innovation</summary>
        
      
    
    
    
    <category term="Security" scheme="https://future-architect.github.io/categories/Security/"/>
    
    
    <category term="Vuls" scheme="https://future-architect.github.io/tags/Vuls/"/>
    
    <category term="WordPress" scheme="https://future-architect.github.io/tags/WordPress/"/>
    
    <category term="静寂性" scheme="https://future-architect.github.io/tags/%E9%9D%99%E5%AF%82%E6%80%A7/"/>
    
    <category term="FutureVuls" scheme="https://future-architect.github.io/tags/FutureVuls/"/>
    
  </entry>
  
  <entry>
    <title>cuDNN の CUDA API の紹介</title>
    <link href="https://future-architect.github.io/articles/20220413a/"/>
    <id>https://future-architect.github.io/articles/20220413a/</id>
    <published>2022-04-12T15:00:00.000Z</published>
    <updated>2022-04-13T06:37:18.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、2021年新卒入社の SAIG 松崎功也です。Tech Blog 初投稿です。</p><p>NVIDIA 社が提供するディープラーニング用の GPGPU ライブラリ「cuDNN」の CUDA API を紹介します。</p><p>cuDNN は TensorFlow や Keras で学習や推論を高速化するためのバックエンドとしてよく使われていますが、CUDA API を直接たたいたことがある方は少ないのではないでしょうか？</p><p>個人的に作成したアプリケーションで CUDA API を叩く機会があり、社内の技術勉強会で紹介したところ好評だったため、こちらにも寄稿します。</p><img src="/images/20220413a/ファイル名.png" alt="システム概念図" width="1200" height="591" loading="lazy"><h1 id="cuDNN-を叩くことになったきっかけ"><a href="#cuDNN-を叩くことになったきっかけ" class="headerlink" title="cuDNN を叩くことになったきっかけ"></a>cuDNN を叩くことになったきっかけ</h1><p>私はレトロゲームを遊ぶことが多いのですが、解像度が低いため 4K ディスプレイだと拡大した際に非常に粗が目立ってしまいます。これをなんとかしたかったのがきっかけです。<br>最終的には以下の手法で解決することにしました。</p><ol><li>Windows API でゲームウィンドウをキャプチャ</li><li><a href="%22https://github.com/nagadomi/waifu2x%22">waifu2x</a> という CNN の超解像モデルでキレイに拡大</li><li>ウィンドウをもう一枚作り、拡大後の画像を表示</li></ol><p>この一連のフローをリアルタイムで行います。Python でもできないことはないのですが、今回はパフォーマンスチューニングのしやすさを考慮して CUDA を選択しました。</p><p>この記事では、1., 3. の部分の説明は行いません。3. において使用した cuDNN API にのみ焦点を当てて紹介します。</p><h1 id="cuDNN-で畳込みを行う流れ"><a href="#cuDNN-で畳込みを行う流れ" class="headerlink" title="cuDNN で畳込みを行う流れ"></a>cuDNN で畳込みを行う流れ</h1><p>流れは以下の通りです。</p><p>次の章で、1項目ずつコードと一緒に紹介していきます。なお、コードは正確に書くと量が多くなりすぎるためある程度端折って掲載しています。そのため、単純にコピペしてつなげても動きませんのでご了承ください。</p><ol><li>cuDNN ライブラリの初期化</li><li>モデルのフィルタの重みをRAM（ホスト）に読み込む</li><li>RAM（ホスト）に読み込んだフィルタの重みを VRAM へ転送する</li><li>フィルタ記述子（フィルターのサイズなどを定義）の準備</li><li>バイアス記述子の準備</li><li>畳込み記述子（パディング、ストライドなどを定義）の準備</li><li>活性化関数の記述子（ReLU, Swish などの係数を含めて定義）の準備</li><li>畳込みの内部アルゴリズムを設定する</li><li>拡大したい画像データをRAM（ホスト）→ VRAM へ転送</li><li>畳込みを行う</li></ol><h2 id="1-cuDNN-ライブラリの初期化"><a href="#1-cuDNN-ライブラリの初期化" class="headerlink" title="1. cuDNN ライブラリの初期化"></a>1. cuDNN ライブラリの初期化</h2><p>ライブラリの初期化は以下のように行います。</p><figure class="highlight c++"><figcaption><span>cuDNN の初期化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ハンドルを表す変数を用意</span></span><br><span class="line">cudnnHandle_t cudnn_handle = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="comment">// ハンドルのポインタを渡してハンドルを受け取る</span></span><br><span class="line"><span class="built_in">cudnnCreate</span>(&amp;cudnn_handle);</span><br></pre></td></tr></table></figure><h2 id="2-モデルのフィルタの重みをRAM（ホスト）に読み込む"><a href="#2-モデルのフィルタの重みをRAM（ホスト）に読み込む" class="headerlink" title="2. モデルのフィルタの重みをRAM（ホスト）に読み込む"></a>2. モデルのフィルタの重みをRAM（ホスト）に読み込む</h2><p>今回は JSON 形式で保存されているモデルのフィルタの重みを、<a href="%22https://github.com/kazuho/picojson%22">picojson</a> で読込みました。</p><img src="/images/20220413a/0cda6e32-95a9-385b-22fb-726db27156b6.png" alt="モデルをRAMに読み込む概念図" width="1089" height="523" loading="lazy"><figure class="highlight c++"><figcaption><span>重みの読込み</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// picojson で kernels に JSON ファイルを読込んでおく　</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; layer.nOutputPlane_; i++) &#123;</span><br><span class="line">    <span class="keyword">auto</span>&amp; kernel = kernels[i].<span class="built_in">get</span>&lt;picojson::array&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; layer.nInputPlane_; j++) &#123;</span><br><span class="line">        <span class="keyword">auto</span>&amp; mat = kernel[j].<span class="built_in">get</span>&lt;picojson::array&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; layer.kH_; k++) &#123;</span><br><span class="line">            <span class="keyword">auto</span>&amp; row = mat[k].<span class="built_in">get</span>&lt;picojson::array&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; layer.kW_; l++) &#123;</span><br><span class="line">                layer.host_weight_[</span><br><span class="line">                    i * (layer.nInputPlane_ * layer.kH_ * layer.kW_)</span><br><span class="line">                        + j * (layer.kH_ * layer.kW_)</span><br><span class="line">                        + k * layer.kW_</span><br><span class="line">                        + l</span><br><span class="line">                ] = row[l].<span class="built_in">get</span>&lt;<span class="type">double</span>&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-RAM（ホスト）に読み込んだフィルタの重みを-VRAM-へ転送する"><a href="#3-RAM（ホスト）に読み込んだフィルタの重みを-VRAM-へ転送する" class="headerlink" title="3. RAM（ホスト）に読み込んだフィルタの重みを VRAM へ転送する"></a>3. RAM（ホスト）に読み込んだフィルタの重みを VRAM へ転送する</h2><p>VRAM のメモリを確保して、読み込んだモデルのフィルタを VRAM へ転送します。<br>メモリ管理はスマートポインタで行っているので、それに合わせたラッパーを自作し使用しています（cuda_memory_allocate）。<br><img src="/images/20220413a/ファイル名_2.png" alt="VRAMへ転送する" width="1200" height="454" loading="lazy"></p><figure class="highlight c++"><figcaption><span>VRAM へ重みを転送する</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// VRAM のメモリを確保</span></span><br><span class="line">layer.device_weight_ptr_ = <span class="built_in">cuda_memory_allocate</span>(<span class="built_in">sizeof</span>(<span class="type">float</span>) * layer.host_weight_.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// RAM（ホスト）のデータを VRAM へ転送する。転送の方向は引数の最後で指定する。</span></span><br><span class="line"><span class="built_in">cudaMemcpy</span>(layer.device_weight_ptr_.<span class="built_in">get</span>(), layer.host_weight_.<span class="built_in">data</span>(),</span><br><span class="line">           <span class="built_in">sizeof</span>(<span class="type">float</span>) * layer.host_weight_.<span class="built_in">size</span>(), cudaMemcpyKind::cudaMemcpyHostToDevice);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>cuda_memory_allocate（自作のメモリ確保ラッパー）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解放処理</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cuda_device_memory_delete</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">void</span>* ptr)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cudaFree</span>(ptr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11 のスマートポインタを使ってみる</span></span><br><span class="line"><span class="keyword">using</span> device_unique_ptr = std::unique_ptr&lt;<span class="type">void</span>, cuda_device_memory_delete&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function">device_unique_ptr <span class="title">cuda_memory_allocate</span><span class="params">(<span class="type">size_t</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">void</span>* ptr = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="built_in">cudaMalloc</span>(&amp;ptr, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">device_unique_ptr</span>(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-フィルタ記述子（フィルターのサイズなどを定義）の準備"><a href="#4-フィルタ記述子（フィルターのサイズなどを定義）の準備" class="headerlink" title="4. フィルタ記述子（フィルターのサイズなどを定義）の準備"></a>4. フィルタ記述子（フィルターのサイズなどを定義）の準備</h2><p>フィルタ記述子では、フィルタの枚数やサイズなどを設定します。<br><img src="/images/20220413a/ファイル名_3.png" alt="フィルタ記述子" width="1200" height="577" loading="lazy"></p><figure class="highlight c++"><figcaption><span>フィルタ記述子の準備</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生のフィルタ記述子を作成</span></span><br><span class="line">cudnnFilterDescriptor_t temp_filter_desc;</span><br><span class="line"><span class="built_in">cudnnCreateFilterDescriptor</span>(&amp;temp_filter_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// スマートポインタに移管</span></span><br><span class="line">filter_desc_.<span class="built_in">reset</span>(temp_filter_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2番目以降の引数は、「データ型」、「データの配置順番」、「出力枚数」、「入力枚数」、「フィルターのサイズ」</span></span><br><span class="line"><span class="built_in">cudnnSetFilter4dDescriptor</span>(filter_desc_.<span class="built_in">get</span>(), CUDNN_DATA_FLOAT, CUDNN_TENSOR_NCHW, nOutputPlane_, nInputPlane_, kH_, kW_);</span><br></pre></td></tr></table></figure><h2 id="5-バイアス記述子の準備"><a href="#5-バイアス記述子の準備" class="headerlink" title="5. バイアス記述子の準備"></a>5. バイアス記述子の準備</h2><p>畳込み処理後に加算するバイアスの準備を行います。バイアスは1次元ベクトルなので、テンソルの記述子を流用します。</p><img src="/images/20220413a/バイアス.png" alt="バイアス" width="1200" height="409" loading="lazy"><figure class="highlight c++"><figcaption><span>バイアス記述子の準備</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生のテンソル記述子の準備</span></span><br><span class="line">cudnnTensorDescriptor_t temp_bias_desc;</span><br><span class="line">(<span class="built_in">cudnnCreateTensorDescriptor</span>(&amp;temp_bias_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// スマートポインタに移管</span></span><br><span class="line">bias_desc_.<span class="built_in">reset</span>(temp_bias_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1次元ベクトルとして、バイアスを設定する</span></span><br><span class="line"><span class="built_in">cudnnSetTensor4dDescriptor</span>(bias_desc_.<span class="built_in">get</span>(), CUDNN_TENSOR_NCHW, CUDNN_DATA_FLOAT, <span class="number">1</span>, nOutputPlane, <span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="6-畳込み記述子（パディング、ストライドなどを定義）の準備"><a href="#6-畳込み記述子（パディング、ストライドなどを定義）の準備" class="headerlink" title="6. 畳込み記述子（パディング、ストライドなどを定義）の準備"></a>6. 畳込み記述子（パディング、ストライドなどを定義）の準備</h2><p>畳込み記述子では、フィルタの動かし方（パディング、ストライド、ディレーションなど）を設定します。</p><figure class="highlight c++"><figcaption><span>畳込み記述子の準備</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生の畳込み記述子を作成</span></span><br><span class="line">cudnnConvolutionDescriptor_t temp_conv_desc;</span><br><span class="line">(<span class="built_in">cudnnCreateConvolutionDescriptor</span>(&amp;temp_conv_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// スマートポインタに移管</span></span><br><span class="line">conv_desc_.<span class="built_in">reset</span>(temp_conv_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2番目以降の引数は、「パディング」、「ストライド」、「ディレーション」、「畳込みのタイプ」、「データ型」</span></span><br><span class="line"><span class="built_in">cudnnSetConvolution2dDescriptor</span>(conv_desc_.<span class="built_in">get</span>(), padH, padW, dH, dW, <span class="number">1</span>, <span class="number">1</span>, cudnnConvolutionMode_t::CUDNN_CONVOLUTION, cudnnDataType_t::CUDNN_DATA_FLOAT);</span><br></pre></td></tr></table></figure><h2 id="7-活性化関数の記述子の準備"><a href="#7-活性化関数の記述子の準備" class="headerlink" title="7. 活性化関数の記述子の準備"></a>7. 活性化関数の記述子の準備</h2><p>cuDNN ではデフォルトで ReLU や Swish などの活性化関数が準備されています（<a href="%22https://docs.nvidia.com/deeplearning/cudnn/api/index.html#cudnnActivationMode_t%22">提供されている活性化関数の一覧</a>）。</p><p>ただ、waifu2x で使用されている leakyReLU は cuDNN では提供されていないため、自前で準備する必要があります。</p><p>そのため、活性化関数には IDENTITY（何もしない恒等関数）を指定し、CUDA で leakyReLU を実装しました。</p><img src="/images/20220413a/ファイル名_4.png" alt="活性化関数の記述子" width="1200" height="679" loading="lazy"><figure class="highlight c++"><figcaption><span>活性化関数の記述子の準備</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生の活性化関数の記述子を作成</span></span><br><span class="line">cudnnActivationDescriptor_t temp_activation_desc;</span><br><span class="line"><span class="built_in">cudnnCreateActivationDescriptor</span>(&amp;temp_activation_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">//スマートポインタに移管</span></span><br><span class="line">activation_desc_.<span class="built_in">reset</span>(temp_activation_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2番目以降の引数は、「活性化関数」、「NaN を伝播させるかどうか」、「活性化関数の係数」（無い場合は適当な数値を入れておけばOK）</span></span><br><span class="line"><span class="built_in">cudnnSetActivationDescriptor</span>(activation_desc_.<span class="built_in">get</span>(), cudnnActivationMode_t::CUDNN_ACTIVATION_IDENTITY,, cudnnNanPropagation_t::CUDNN_PROPAGATE_NAN, <span class="number">0.0</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>leakyReLU.cu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">leakyRelu_</span><span class="params">(<span class="type">float</span>* vec, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = blockIdx.x * blockDim.x + threadIdx.x;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; n)</span><br><span class="line">        vec[i] = <span class="number">0.1f</span> * <span class="built_in">fminf</span>(vec[i], <span class="number">0.f</span>) + <span class="built_in">fmaxf</span>(vec[i], <span class="number">0.f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-畳込みの内部アルゴリズムを設定する"><a href="#8-畳込みの内部アルゴリズムを設定する" class="headerlink" title="8. 畳込みの内部アルゴリズムを設定する"></a>8. 畳込みの内部アルゴリズムを設定する</h2><p>cuDNN では畳込みの内部アルゴリズムがいくつか用意されていて、それぞれメモリ使用量や計算速度にトレードオフがあります（<a href="%22https://docs.nvidia.com/deeplearning/cudnn/api/index.html#cudnnConvolutionFwdAlgo_t%22">提供されている内部アルゴリズムの一覧</a>）。</p><p>これまで設定してきたフィルタ記述子や畳込み記述子の情報を使用して、cuDNN に自動で選択させることもできます。</p><p>ただ、同じ記述子を使用した場合でも、実行のたびに自動選択されるアルゴリズムが異なることがありました。そのため、使用するメモリ使用量や処理時間に再現性が欲しい場合は自分で指定するのが吉です。</p><figure class="highlight c++"><figcaption><span>畳込みの内部アルゴリズムの設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内部アルゴリズムを自動で設定する場合</span></span><br><span class="line"><span class="built_in">cudnnFindConvolutionForwardAlgorithm</span>(handle, src, filter_desc_.<span class="built_in">get</span>(), conv_desc_.<span class="built_in">get</span>(), dst, <span class="number">1</span>, &amp;nAlgos, &amp;forward_algo_);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部アルゴリズムを手動で設定する場合</span></span><br><span class="line">forward_algo_.algo = cudnnConvolutionFwdAlgo_t::CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMP_GEMM;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部アルゴリズムの作業領域のサイズを計算する</span></span><br><span class="line"><span class="built_in">cudnnGetConvolutionForwardWorkspaceSize</span>(handle, src, filter_desc_.<span class="built_in">get</span>(), conv_desc_.<span class="built_in">get</span>(), dst, forward_algo_.algo, &amp;workspace_size);</span><br></pre></td></tr></table></figure><h2 id="9-拡大したい画像データをRAM（ホスト）→-VRAM-へ転送"><a href="#9-拡大したい画像データをRAM（ホスト）→-VRAM-へ転送" class="headerlink" title="9. 拡大したい画像データをRAM（ホスト）→ VRAM へ転送"></a>9. 拡大したい画像データをRAM（ホスト）→ VRAM へ転送</h2><p>あともう一息です。</p><p>拡大したい画像データを VRAM へ転送します。</p><figure class="highlight c++"><figcaption><span>画像の転送</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// VRAM を確保</span></span><br><span class="line"><span class="keyword">auto</span> image0 = <span class="built_in">cuda_memory_allocate</span>(image_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// image_float にはウィンドウをキャプチャしたデータが入っている</span></span><br><span class="line"><span class="built_in">cudaMemcpy</span>(image0.<span class="built_in">get</span>(), image_float.<span class="built_in">data</span>(), <span class="built_in">sizeof</span>(<span class="type">float</span>) * image_float.<span class="built_in">size</span>(), cudaMemcpyKind::cudaMemcpyHostToDevice);</span><br></pre></td></tr></table></figure><h2 id="10-畳込みを行う"><a href="#10-畳込みを行う" class="headerlink" title="10. 畳込みを行う"></a>10. 畳込みを行う</h2><p>最後にここまで設定してきた記述子を元に、VRAM へコピーした画像データに畳込み処理を行います。<br>関数名から分かるように、畳込み、バイアスの加算、活性化関数の適用を一気に行います。</p><figure class="highlight c++"><figcaption><span>畳込みを行う</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cudnnConvolutionBiasActivationForward</span>(</span><br><span class="line">        handle,</span><br><span class="line">        &amp;one, src, src_data,</span><br><span class="line">        filter_desc_.<span class="built_in">get</span>(), device_weight_ptr_.<span class="built_in">get</span>(),</span><br><span class="line">        conv_desc_.<span class="built_in">get</span>(), forward_algo_.algo,</span><br><span class="line">        workspace, workspace_size,</span><br><span class="line">        &amp;zero, dst, dst_data,</span><br><span class="line">        bias_desc_.<span class="built_in">get</span>(), device_bias_ptr_.<span class="built_in">get</span>(),</span><br><span class="line">        activation_desc_.<span class="built_in">get</span>(),</span><br><span class="line">        dst, dst_data</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>cuDNN の CUDA API による畳込みの流れを紹介しました。</p><p>普段なかなか見ることのないバックエンド側の API でしたが、興味を持ってもらえるきっかけになればうれしいです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、2021年新卒入社の SAIG 松崎功也です。Tech Blog 初投稿です。&lt;/p&gt;
&lt;p&gt;NVIDIA</summary>
        
      
    
    
    
    <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
    <category term="CUDA" scheme="https://future-architect.github.io/tags/CUDA/"/>
    
    <category term="GPGPU" scheme="https://future-architect.github.io/tags/GPGPU/"/>
    
    <category term="cuDNN" scheme="https://future-architect.github.io/tags/cuDNN/"/>
    
  </entry>
  
  <entry>
    <title>Blazor WebAssembly入門</title>
    <link href="https://future-architect.github.io/articles/20220412a/"/>
    <id>https://future-architect.github.io/articles/20220412a/</id>
    <published>2022-04-11T15:00:00.000Z</published>
    <updated>2022-04-12T03:50:18.769Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>FutureOne株式会社 テクノロジー本部の清水です。</p><p>FutureOneはフューチャーグループの中で、中堅・中小企業様向けのERPパッケージを展開している会社となります。<br>弊社ERPパッケージの特色の1つとしては、弊社独自開発プラットフォームにより、中小企業様でも各企業様のビジネス・商習慣に合わせた柔軟なカスタマイズが可能な点があります。定型的な業務にはパッケージ標準機能にて効率化を図り、競争力・工夫が求められる業務にはお客様の要望をカスタマイズにて提供可能な、ハイブリッドなERPパッケージとなっています。</p><p>今回は、新たに弊社ERPパッケージのクラウド型提供で追加される、WebおよびモバイルインターフェースのプロトタイプアプリをBlazor WebAssemblyを用いて開発した経験を通して感じたことなどを簡単に紹介したいと思います。</p><h2 id="Blazor-WebAssemblyとは"><a href="#Blazor-WebAssemblyとは" class="headerlink" title="Blazor WebAssemblyとは"></a>Blazor WebAssemblyとは</h2><p>まず始めに、<code>WebAssembly</code>の基本について紹介します。<br><code>WebAssembly</code>とは、Webブラウザ上でネイティブコードに近い実行速度で高速に実行できるバイナリフォーマットです。<br>W3CのWebAssembly Working Groupによって2019年12月5日に勧告され、正式なWeb標準仕様となりました。詳細は以下で確認できます。</p><ul><li><a href="https://www.w3.org/2019/12/pressrelease-wasm-rec.html.en">World Wide Web Consortium (W3C) brings a new language to the Web as WebAssembly becomes a W3C Recommendation | W3C</a></li><li><a href="https://developer.mosnapcrab_devtools-localhost7065_2022-3-29_10-24-46_no-00zilla.org/ja/docs/WebAssembly/Concepts">WebAssembly の概要 | mdn web docs</a></li><li><a href="https://www.publickey1.jp/blog/19/webassemblyw3cwebassembly_core_specification_webassembly_web_apiwebassembly_javascript_interface_3.html">WebAssemblyがW3Cの勧告に到達。「WebAssembly Core Specification 」「WebAssembly Web API」「WebAssembly JavaScript Interface 」の3つ | Publickey</a></li></ul><p>現在は、C言語、C++、Rust、Go、Kotlin/Native、C#などが対応しています。</p><p>Blazor WebAssemblyは、.NETランタイムやアプリケーションコードが全て<code>WebAssembly</code>にコンパイルされ、コンパイル結果（アセンブリ）をダウンロードしたブラウザ上で実行するフレームワークです。</p><p>アプリケーション開発者は、従来JavaScriptを用いて記述していたフロントエンド側のスクリプト処理を、C#言語を用いて開発することができるのです。また、このフレームワークで開発されたアプリケーションは <strong>Single Page Application（SPA）</strong> でもあります。<br>Blazorには「Blazor WebAssembly」と「Blazor Sever」の２種類ありますが、今回は前者に焦点を充てて紹介します。</p><h2 id="プロトタイプアプリの概要"><a href="#プロトタイプアプリの概要" class="headerlink" title="プロトタイプアプリの概要"></a>プロトタイプアプリの概要</h2><p>今回の取り組みの発端は、弊社のERPパッケージはリッチクライアント画面となっているのですが、そこに冒頭のWebおよびモバイルインターフェースを追加するといった自分も含めた色んな人の要望から始まりました。</p><p>1stステップのアプリケーションの要件を簡単にまとめると以下のようになりました。</p><ul><li>まずは既存のERPパッケージのデータベースを参照し、売上情報などの情報を見れるようにしたい。</li><li>モバイルやPCなどクロスプラットフォームとしたい。</li></ul><h2 id="Blazor-WebAssembly採用の背景とメリット・デメリット"><a href="#Blazor-WebAssembly採用の背景とメリット・デメリット" class="headerlink" title="Blazor WebAssembly採用の背景とメリット・デメリット"></a>Blazor WebAssembly採用の背景とメリット・デメリット</h2><p>Blazor WebAssemblyを採用した背景としては、面白そうな技術要素で、かつ開発に時間をかけずにクイックに動くものを見せて欲しいという依頼がリーダーからあり、私が通常業務でC#を扱っている点や弊社内には.NET系のエンジニアが多数在籍している点からBlazor WebAssemblyを選択しました。</p><p>ざっくりとBlazor WebAssemblyのメリットとデメリットを主観含め挙げます。</p><ul><li>メリット（弊社にとって馴染みのある技術が利用できる）<ul><li>フロントエンド（のスクリプト処理）およびバックエンドをC#で記述できる。<ul><li>もちろんHTML、CSSの知識は必要です。</li></ul></li><li>Visual Studioさえあれば開発可能である。<ul><li>何ならIISやAzure App ServiceへVisual Studioから直接デプロイできる。</li></ul></li><li>Azure App Service（Azure のWebアプリホスティングサービス）がBlazor WebAssemblyへ対応している。</li><li>SPAで避けて通れないユーザ認証サービスとして、Azure Active Directoryが対応している。<ul><li>また、実装方法に関する公式ドキュメントが、Microsoft社に依頼せずともオープンに充実している。</li></ul></li><li>Microsoft社が今推しのフレームワークで、積極的に開発が進んでいる。<ul><li>ASP.NET Web Forms アプリからの移行先候補の一つでもある。</li></ul></li></ul></li><li>デメリット（まだ新しい）<ul><li>登場したばかり。採用実績に乏しい。</li><li>標準のUIコンポーネントが圧倒的に少ない。</li><li>OSSのUIコンポーネントも圧倒的に少ない。</li><li>アセンブリのダウンロードに時間がかかる。</li></ul></li></ul><p>メリットについては、要はクイックなプロトタイプ開発、その後の保守の観点で弊社でやり易い点なのですが、デメリットについては、新規フレームワークということで、エコシステム界隈が充実してない点にある印象です。</p><h2 id="開発の始め方"><a href="#開発の始め方" class="headerlink" title="開発の始め方"></a>開発の始め方</h2><p>では、ここからはBlazor WebAssemblyのアプリケーション開発方法を簡単に紹介します。<br>次のコマンドを実行すると、プロジェクトテンプレートに基づき、プロジェクトファイル一式が作成されます。<br>※もちろんコマンドプロンプトからでなくVisual StudioのGUIから作成できます。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;dotnet new blazorwasm -ho -o future_one_demo</span><br><span class="line">テンプレート &quot;Blazor WebAssembly App&quot; が正常に作成されました。</span><br><span class="line">このテンプレートには、Microsoft 以外のパーティのテクノロジが含まれています。詳しくは、https://aka.ms/aspnetcore/<span class="number">6</span>.<span class="number">0</span>-third-party-notices をご覧ください。</span><br><span class="line"></span><br><span class="line">作成後の操作を処理しています...</span><br><span class="line"><span class="function">D:\<span class="title">xxx</span>\<span class="title">future_one_demo</span>\<span class="title">future_one_demo.sln</span> で &#x27; <span class="title">dotnet</span> <span class="title">restore</span> &#x27; を実行しています...</span></span><br><span class="line"><span class="function">  復元対象のプロジェクトを決定しています...</span></span><br><span class="line"><span class="function">  <span class="title">D</span>:\<span class="title">xxx</span>\<span class="title">future_one_demo</span>\<span class="title">Shared</span>\<span class="title">future_one_demo.Shared.csproj</span> を復元しました (95 <span class="title">ms</span>)。</span></span><br><span class="line"><span class="function">  <span class="title">D</span>:\<span class="title">xxx</span>\<span class="title">future_one_demo</span>\<span class="title">Client</span>\<span class="title">future_one_demo.Client.csproj</span> を復元しました (1.71 <span class="title">sec</span>)。</span></span><br><span class="line"><span class="function">  <span class="title">D</span>:\<span class="title">xxx</span>\<span class="title">future_one_demo</span>\<span class="title">Server</span>\<span class="title">future_one_demo.Server.csproj</span> を復元しました (1.71 <span class="title">sec</span>)。</span></span><br><span class="line"><span class="function">正常に復元されました。</span></span><br></pre></td></tr></table></figure><h2 id="プロジェクト構成"><a href="#プロジェクト構成" class="headerlink" title="プロジェクト構成"></a>プロジェクト構成</h2><p>作成されたプロジェクトを見てみます。<br>以下のように<code>Client/Server/Share</code>と役割が容易に分かるようにプロジェクトが構成されています。<br>フロントエンドとバックエンドで開発部署が分かれているの場合などに好ましい構成ですね。</p><img src="/images/20220412a/プロジェクト構成.png" alt="プロジェクト構成.png" width="302" height="760" loading="lazy"><p><code>Client</code>フォルダはフロントエンドのプロジェクトです。拡張子が<code>.razor</code>のファイルがありますが、これはRazorコンポーネントと呼ばれており、コンポーネントを組み合わせてWebページを作成するイメージとなります。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p><code>Server</code>フォルダはバックエンドのプロジェクトです。Blazor WebAssembly専用とかではなく、純粋なASP.NET Core WebAPIアプリケーションです。<br><code>Microsoft.AspNetCore.Mvc.ControllerBase</code>を継承したコントローラクラスを定義します。<br>お馴染みですね。</p><p><code>Shared</code>フォルダは<code>Client</code>と<code>Server</code>で共通するコードを定義するプロジェクトです。<br>デフォルトでは<code>Client</code>と<code>Server</code>の間でHTTPリクエスト／レスポンスでやり取りするデータクラスが定義されています。<br>Vue.jsなどで起こりがちな<code>Client</code>と<code>Server</code>でデータクラスを個々に定義せざるを得ない問題を防げるという点もBlazor WebAssemblyのメリットの一つかもしれません。</p><h2 id="実行してみる"><a href="#実行してみる" class="headerlink" title="実行してみる"></a>実行してみる</h2><p>アプリを起動してみます。左がデスクトップPCの表示。右はモバイル端末の表示です。<br>デフォルトでレスポンシブデザインが採用されている点も良いです。</p><img src="/images/20220412a/アプリ.png" alt="アプリ.png" width="1200" height="749" loading="lazy"><p>アプリを起動した直後、ブラウザのDevToolsで見たネットワークの状態です。<br><code>System.xxx.dll</code>という.NETランタイムのアセンブリ群がダウンロードされていることが分かります。全体のサイズで約4MBでした。（参考：.NET SDK v6.0.201）</p><p>モバイルなど非力な端末の場合、ネックになるかもしれません。</p><img src="/images/20220412a/DevTools.png" alt="DevTools.png" width="954" height="710" loading="lazy"><p>ただし、２回目以降に起動した際はダウンロードは発生しません。ランタイム関係のアセンブリはキャッシュストレージへ保存され、キャッシュしたものが使われているようです。この辺りは工夫がされているのですね。</p><img src="/images/20220412a/DevTools_2.png" alt="DevTools.png" width="872" height="724" loading="lazy"><p>DevToolsのソースを見てます。<br><code>_framework</code>コンテンツ内に複数の<code>.js</code>ファイルがあります。<br>また、<code>wasm</code>内には<code>WebAssembly</code>のテキストコードのようなものがあります。<br>この辺りは深追いしておりませんが、本格的に仕組みを理解したい場合はこの辺りを研究する必要がありそうです。</p><img src="/images/20220412a/DevTools_3.png" alt="DevTools.png" width="956" height="850" loading="lazy"><h2 id="開発ポイント"><a href="#開発ポイント" class="headerlink" title="開発ポイント"></a>開発ポイント</h2><p>ここからはBlazor WebAssmblyの開発で理解しておいた方が良いポイントを挙げてゆきます。<br>なお、RazorコンポーネントはRazor構文という独自の文法でコードを記述しますが、文法の詳細については割愛します。</p><h3 id="ライフサイクルイベント"><a href="#ライフサイクルイベント" class="headerlink" title="ライフサイクルイベント"></a>ライフサイクルイベント</h3><p>Blazorは基本的にイベント駆動型で、イベントハンドラに処理を実装してゆきます。<br>その中で重要なのがRazorコンポーネントのライフサイクルイベントです。</p><ul><li><code>SetParametersAsync</code>：パラメーターが設定されるタイミングに呼び出されます。</li><li><code>OnInitialized&#123;Async&#125;</code>：コンポーネントの初期化時に呼び出されます。</li><li><code>OnParametersSet&#123;Async&#125;</code>：パラメーターが設定された後に呼び出されます。</li><li><code>OnAfterRender&#123;Async&#125;</code>：コンポーネントのレンダリング後に呼び出されます。</li></ul><p>必要に応じてコンポーネントの初期化やパラメタの受け渡し時の処理を実装する必要があります。</p><p>以下の公式ドキュメントが参考になります。<br><a href="https://docs.microsoft.com/ja-jp/aspnet/core/blazor/components/lifecycle?view=aspnetcore-6.0">ASP.NET Core Razor コンポーネントのライフサイクル | Microsoft Docs</a></p><h3 id="画面の状態更新"><a href="#画面の状態更新" class="headerlink" title="画面の状態更新"></a>画面の状態更新</h3><p>Razorコンポーネントには画面のコンポーネントの状態変更を通知するための<code>StateHasChanged</code>メソッドというものがあります。<br>以下のシナリオにおいて<code>StateHasChanged</code>メソッドの呼び出しが必要になる場合があります。</p><ol><li>非同期I/O呼び出し（HTTPリクエストなど）の結果を受け取って画面へ結果を反映する。</li><li>UIスレッド以外のスレッド上から画面の要素を更新する。</li><li>あるシングルトンなインスタンスを複数コンポーネントが参照し状態変更を観察（Subscribe）する。そのシングルトンインスタンスの状態を参照する全画面へ反映する。<ul><li>次のMicrosoft Docsの中で紹介されているコードで<code>StateHasChanged</code>メソッド呼び出しをコメントアウトすると、期待通り動きません。<ul><li><a href="https://docs.microsoft.com/ja-jp/aspnet/core/blazor/state-management?view=aspnetcore-6.0&pivots=webassembly#in-memory-state-container-service-wasm">メモリ内状態コンテナー サービス | Microsoft Docs</a></li></ul></li></ul></li><li>上記以外にもあるかもしれません。</li></ol><p>以下は「2. UIスレッド以外のスレッド上から画面の要素を更新する」の例です。<br>UIスレッド外のタイマから１秒ごとに現在時刻を画面へ反映する処理です。（実際にこのような機能を必要とするかどうかは別ですが。）<br><code>Elapsed</code>イベントハンドラ内で<code>StateHasChanged</code>メソッドを呼び出していますが、この行をコメントアウトすると期待通りに動きません。（現在時刻が変わりません。）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@page <span class="string">&quot;/timersample&quot;</span></span><br><span class="line">&lt;p&gt;Now Time: [@_nowTime]&lt;/p&gt;</span><br><span class="line">@code &#123;</span><br><span class="line">    <span class="keyword">private</span> Timer _timer = <span class="keyword">new</span> Timer(<span class="number">1000</span>);</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInitialized</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _timer.Elapsed += (sender, e) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            _nowTime = DateTime.Now.ToString();</span><br><span class="line">            StateHasChanged(); <span class="comment">//コメントアウトすると動きません。</span></span><br><span class="line">        &#125;;</span><br><span class="line">        _timer.Start();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>アプリケーション開発者が「<code>StateHasChanged</code>メソッドの呼び出しの必要性を判断しなければならない」という点はBlazor WebAssemblyのデメリットの一つかもしれません。<br>私が調べた範囲ではVue.jsはこのような配慮が必要ではないため、イケてないなぁという印象です。</p><h3 id="状態管理について"><a href="#状態管理について" class="headerlink" title="状態管理について"></a>状態管理について</h3><p>SPAにて度々議題にあがる（と私が思っている）「アプリケーションの状態管理」についててす。<br>先述した<a href="https://docs.microsoft.com/ja-jp/aspnet/core/blazor/state-management?view=aspnetcore-6.0&pivots=webassembly#in-memory-state-container-service-wasm">メモリ内状態コンテナー サービス | Microsoft Docs</a>で、Microsoft社の解説があります。</p><p>以下のようなコンテナクラスを定義します。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StateContainer.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StateContainer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span>? savedString;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Property</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> =&gt; savedString ?? <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            savedString = <span class="keyword">value</span>;</span><br><span class="line">            NotifyStateChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action? OnChange;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">NotifyStateChanged</span>()</span> =&gt; OnChange?.Invoke();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>状態を観察するコンポーネント側は以下のような感じです。このようなコンポーネントが複数あるイメージです。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Pages/StateContainerExample.razor</span></span><br><span class="line">@page <span class="string">&quot;/state-container-example&quot;</span></span><br><span class="line">@implements IDisposable</span><br><span class="line">@inject StateContainer StateContainer</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;State Container Example component&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;State Container component Property: &lt;b&gt;@StateContainer.Property&lt;/b&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;button @onclick=<span class="string">&quot;ChangePropertyValue&quot;</span>&gt;</span><br><span class="line">        Change the Property <span class="keyword">from</span> the State Container Example component</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;Nested /&gt;</span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInitialized</span>()</span></span><br><span class="line">     =&gt;  StateContainer.OnChange += StateHasChanged;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ChangePropertyValue</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        StateContainer.Property = <span class="string">&quot;New value set in the State &quot;</span> +</span><br><span class="line">            <span class="string">$&quot;Container Example component: <span class="subst">&#123;DateTime.Now&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">     =&gt; StateContainer.OnChange -= StateHasChanged;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般的には「Fluxアーキテクチャ」が提唱されており、Vue.jsではVuex、RactではReduxといったライブラリが有名かと思います。<br>Blazor WebAssemblyでの「Fluxアーキテクチャ」のライブラリも存在するようです。<br><a href="https://github.com/mrpmorris/Fluxor">mrpmorris/Fluxor | Github</a></p><p>今回のプロトタイプアプリではFluxorの採用は見送りました。<br>詳細は省きますがMicrosoft社さんの解説手法にひと工夫をした形で採用することとしました。<br>この辺りについては今後研究の余地がありそうです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>最後に簡単にまとめます。</p><ul><li>Blazor WebAssmblyではC#を使いWebアプリケーションが開発できる。</li><li>Visual Studioから開発が簡単にできる。</li><li>Razorコンポーネントのライフサイクルイベントや<code>StateHasChanged</code>の仕組みは理解した方が良い。</li><li>一方で<code>WebAssembly</code>の内部的な仕組みを理解せずともWebアプリケーションが開発可能である。</li></ul><p>特に最後の点について、<code>WebAssembly</code>だからといってその仕様や機械語レベルの理解する必要は殆どなく、<br>高級言語から機械語への翻訳はコンパイラに全てお任せ、開発者は馴染みのある高級言語でWebアプリ開発に注力でき、Blazor WebAssemblyはC#を用いてWebアプリケーションを開発できる点が一番のメリットなのかなぁと感じました。<br>Blazor WebAssmblyを今後使用される方の一助になれば幸いです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">BlazorではなくRazorです。紛らわしいですがそういうものらしいです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;FutureOne株式会社</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Blazor" scheme="https://future-architect.github.io/tags/Blazor/"/>
    
    <category term="WebAssembly" scheme="https://future-architect.github.io/tags/WebAssembly/"/>
    
    <category term="C#" scheme="https://future-architect.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Google Cloud Professional Cloud Architectの再認定に合格しました</title>
    <link href="https://future-architect.github.io/articles/20220411a/"/>
    <id>https://future-architect.github.io/articles/20220411a/</id>
    <published>2022-04-10T15:00:00.000Z</published>
    <updated>2022-04-11T02:06:38.857Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。TIGの伊藤太斉です。<br>今回は、受験から日が空いてしまいましたが、2022/2/4にGoogle CloudのProfessional Cloud Architectの再認定に合格したので、前回受験からの差分や受験にあたっての勉強について書いていきます。</p><h2 id="以前の記事"><a href="#以前の記事" class="headerlink" title="以前の記事"></a>以前の記事</h2><p>技術ブログでは以前に合格体験記をいくつか出しているので、そちらも是非みていただければと思います。</p><ul><li><a href="/articles/20210625a/">Associate Cloud Engineer</a></li><li><a href="/articles/20190530/">Professional Cloud Architect</a> <strong>※今回はこちらの再認定記事になります</strong></li><li><a href="/articles/20211013a/">Professional Data Engineer</a></li><li><a href="/articles/20200902/">Professional Network Engineer</a></li></ul><h2 id="試験について"><a href="#試験について" class="headerlink" title="試験について"></a>試験について</h2><p>有効期限が迫ってくると、メールで再認定を受ける旨が送られてきます。メールには受験時に<strong>半額になるクーポンコード</strong>があるので、申し込み時にはしっかり利用しましょう。<br>その上で、試験概要は</p><ul><li>試験時間: 2 時間</li><li>登録料: 200 米ドル　-&gt; <strong>100 米ドル（クーポンコード利用時）</strong></li><li>言語: 英語、日本語</li><li>受験方法: テストセンターもしくは自宅での遠隔監視のオンライン試験</li></ul><h2 id="試験前の勉強"><a href="#試験前の勉強" class="headerlink" title="試験前の勉強"></a>試験前の勉強</h2><p>試験準備自体は2週間前くらいから、大体1日30分くらいで以下の内容をやっていました。</p><h3 id="公式の模擬試験"><a href="#公式の模擬試験" class="headerlink" title="公式の模擬試験"></a>公式の模擬試験</h3><p>何はともあれ、公式の模擬試験（Google Forms形式）を受験し、自分自身の分野の理解度を確認しました。また、2年前に比べて内容も変わっているので、その意味も込めて一度は試した方が良いと感じました。</p><h3 id="新しいサービスの学習"><a href="#新しいサービスの学習" class="headerlink" title="新しいサービスの学習"></a>新しいサービスの学習</h3><p>公式の模擬試験をもとに、新しいサービスへの理解が足りないと感じたので、以下の2つを特に重点的に勉強しました。</p><ul><li>Identity Aware Proxy<ul><li>IAPの設定について</li><li>ゼロトラストな考え方のもと、どのようにサービスを組み合わせるか</li></ul></li><li>VPC Service Controls<ul><li>境界内部のサービスへのアクセスの仕方</li><li>境界面の適切な作り方</li></ul></li></ul><p>これらは私が最初に受験した時(2020/2)時点では試験には取り入れられていなかったのですが、初回受験後にどちらも実際に触ったことがあったので、そこまで大きな負担にはならなかったです。</p><h3 id="書籍"><a href="#書籍" class="headerlink" title="書籍"></a>書籍</h3><p>PCAの受験には誰もが重宝する<a href="https://www.amazon.co.jp/dp/4822257908">Google Cloud Platform エンタープライズ設計ガイド</a>を読み返していました。とはいえ、この書籍も現在の試験範囲を全てカバーは出来ないので、普遍的な部分のみを再確認といった感じで見返す程度でした。</p><h3 id="公式ドキュメント"><a href="#公式ドキュメント" class="headerlink" title="公式ドキュメント"></a>公式ドキュメント</h3><p>なんといっても公式ドキュメントを読むのが一番ですね。<br>前回受験時では、StackDriver xxと呼ばれていた監視系のサービス群がCloud xxと呼び名が変わっていたりすることもあり、特に差分が大きそうだと思っているところをいくつか読みました。</p><h2 id="受験"><a href="#受験" class="headerlink" title="受験"></a>受験</h2><p>受験当日は、家のきちんと試験仕様にする自信がなかったので、自宅からではなくテストセンターで受験しました。<br>当日は問題を解いている途中は落ちる感じは全くしなかったものの、油断も出来ない状態でしたが、無事合格し、再認定となりました。<br><a href="https://googlecloudcertified.credential.net/?name=taisei%20ito">https://googlecloudcertified.credential.net/?name=taisei%20ito</a></p><h2 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h2><p>再認定であっても、試験合格後のノベルティはもらえるみたいで、一部ですが以下の中から選べるようになっていました。(2022/3月現在)<br>$100で受験できて、ノベルティまでもらえるのは、もしかしたらノベルティの方が高いのかもしれません。<br>私は、リュックを選びました。Google Cloudﾁｮｯﾄﾜｶﾙことが背中から知られるようになります。</p><img src="/images/20220411a/スクリーンショット_2022-03-29_18.42.30.png" alt="ノベルティ" width="1200" height="434" loading="lazy"><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回はPCAの再認定についてまとめました。<br>しばらく実務ではGoogle Cloudから離れていたので、それなりの不安はあったものの、定着している部分も大きく、改めて力試しにはなりました。<br>これから再認定の時期がやってくる方も、安く受けることができるので、是非失効させずに受けてみてはいかがでしょうか？</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;こんにちは。TIGの伊藤太斉です。&lt;br&gt;今回は、受験から日が空いてしまいましたが、2022/2/4にGoogle CloudのProfessional Cloud</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="合格記" scheme="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>元日に92%引きで叩き売りされていた変形ホームロボットを買ったのでScalaから叩いてみた</title>
    <link href="https://future-architect.github.io/articles/20220408a/"/>
    <id>https://future-architect.github.io/articles/20220408a/</id>
    <published>2022-04-07T15:00:00.000Z</published>
    <updated>2022-04-13T06:37:20.663Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20220404a/">電子工作/IoT連載</a> の5本目です</p><h1 id="リベンジ"><a href="#リベンジ" class="headerlink" title="リベンジ"></a>リベンジ</h1><p>2019年に<a href="https://www.google.com/search?q=%E3%83%97%E3%83%AA%E3%83%A1%E3%82%A4%E3%83%89AI">某ロボット</a>が85%引きで叩き売りされましたが、その時はウェーブに乗り遅れてしまい、入手できず悔しい思いをした経験があったのですが、今年の正月、それを超える値引率である<a href="https://store.shopping.yahoo.co.jp/misaonet/cerevo-tipron.html">92%引きで叩き売りされていた変形ホームロボット</a>を購入することができました。今回はウェーブに乗ることができたのでとりあえずそれだけで非常に満足でした。</p><h1 id="今回入手した変形ホームロボットについて"><a href="#今回入手した変形ホームロボットについて" class="headerlink" title="今回入手した変形ホームロボットについて"></a>今回入手した変形ホームロボットについて</h1><p>以前叩き売りされていた某ロボットは25軸でしたが、今回の変形ホームロボットは3軸+2輪となります。<br>ロボットの名前は<a href="https://cerevo.com/">Cerevo社</a>の「Tipron」と言い、<a href="https://info-blog.cerevo.com/2016/01/05/1712/">6年前のCESでもお披露目されていた</a>ロボです。<br>ルンバはお掃除ロボットですが、このTipronはプロジェクターロボットになります。わざわざ、部屋の真ん中にプロジェクターを手で運ばなくても、プロジェクター自身が自分で部屋の真ん中まで自動で移動して映画などを映してくれるというものです。</p><div class="scroll"><table><thead><tr><th>変形前</th><th>変形後</th></tr></thead><tbody><tr><td><img src="/images/20220408a/fold.png" alt="fold" width="998" height="1331" loading="lazy"></td><td><img src="/images/20220408a/extend.png" alt="extend" width="990" height="1320" loading="lazy"></td></tr></tbody></table></div><h1 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h1><p>Scalaを今使うならやっぱりフレッシュな3を使いたいですよね。<br>ただし、現状のsbt(Scalaのビルドツール）はJava18だとエラーが出るので、Java17で実行したいと思います。</p><figure class="highlight bash"><figcaption><span>macOS/Linuxなどでの手順例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;curl -s <span class="string">&quot;https://get.sdkman.io&quot;</span> | bash</span><br><span class="line">&gt;<span class="built_in">source</span> <span class="string">&quot;<span class="variable">$HOME</span>/.sdkman/bin/sdkman-init.sh&quot;</span></span><br><span class="line">&gt;sdk install java 17-open</span><br><span class="line">&gt;sdk install sbt 1.6.2</span><br></pre></td></tr></table></figure><p>次の各ファイル、フォルダを作成します。</p><figure class="highlight scala"><figcaption><span>project/build.properties</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbt.version=<span class="number">1.6</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><figure class="highlight scala"><figcaption><span>project.sbt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scalaVersion := <span class="string">&quot;3.1.1&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight scala"><figcaption><span>tipron.scala</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jp.co.future.example.tipron</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net._</span><br><span class="line"><span class="keyword">import</span> java.nio._</span><br><span class="line"><span class="keyword">import</span> java.nio.channels._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Tipron</span> <span class="keyword">extends</span> <span class="title">App</span></span>:</span><br><span class="line">  <span class="keyword">val</span> <span class="type">TIPRON_IP</span> = <span class="string">&quot;Tipron本体のIPアドレス&quot;</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">SENDER_ADDR</span> = <span class="keyword">new</span> <span class="type">InetSocketAddress</span>(<span class="number">9999</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">RECIEVER_ADDR</span> = <span class="keyword">new</span> <span class="type">InetSocketAddress</span>(<span class="type">TIPRON_IP</span>, <span class="number">9999</span>)</span><br><span class="line">  <span class="keyword">val</span> channel = <span class="type">DatagramChannel</span>.open()</span><br><span class="line">  channel.socket().bind(<span class="type">SENDER_ADDR</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sendMsg</span></span>(msg: <span class="type">String</span>) =</span><br><span class="line">    <span class="keyword">val</span> buff = <span class="type">ByteBuffer</span>.allocate(msg.length)</span><br><span class="line">    buff.clear()</span><br><span class="line">    buff.put(msg.getBytes)</span><br><span class="line">    buff.flip()</span><br><span class="line">    <span class="keyword">val</span> result = channel.send(buff, <span class="type">RECIEVER_ADDR</span>)</span><br><span class="line">    result</span><br><span class="line"></span><br><span class="line">  sendMsg(<span class="string">&quot;&quot;&quot;&#123;&quot;clearQueue&quot;:false,&quot;commandId&quot;:1,&quot;commandName&quot;:&quot;turnLeft&quot;,&quot;commandValue&quot;:&quot;-90&quot;&#125;&quot;&quot;&quot;</span>)</span><br><span class="line">  <span class="type">Thread</span>.sleep(<span class="number">5000</span>)</span><br><span class="line">  sendMsg(<span class="string">&quot;&quot;&quot;&#123;&quot;clearQueue&quot;:false,&quot;commandId&quot;:1,&quot;commandName&quot;:&quot;turnLeft&quot;,&quot;commandValue&quot;:&quot;90&quot;&#125;&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="叩いてみる"><a href="#叩いてみる" class="headerlink" title="叩いてみる"></a>叩いてみる</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;sbt run</span><br></pre></td></tr></table></figure><p>実行すると、右旋回を少し行なった後、同じ角度分、左旋回を行なって元の向きに戻ります。<br><img src="/images/20220408a/run.gif" alt="run" width="270" height="480" loading="lazy"></p><h1 id="今後の展望"><a href="#今後の展望" class="headerlink" title="今後の展望"></a>今後の展望</h1><p>Tipronの標準バッテリーだとプロジェクターの連続稼働時間が心許ないので、手元のお小遣いに余裕ができてきたら、追加のバッテリーを買って空いているバッテリー格納スペースに入れたいと思っています。</p><h1 id="参考サイト"><a href="#参考サイト" class="headerlink" title="参考サイト"></a>参考サイト</h1><p>本記事は次のサイトを参考しました。</p><ul><li><a href="https://gist.github.com/yoneken/03561a831344c08eda9a2f37a8d56bcb">GitHub Gist: yoneken/cam_stream.py</a></li><li><a href="https://tech-blog.cerevo.com/archives/8795/">Cerevo TechBlog: 変形するロボットプロジェクターをスクリプトで自由自在に動かす（絶賛決算セール中！）</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20220404a/&quot;&gt;電子工作/IoT連載&lt;/a&gt; の5本目です&lt;/p&gt;
&lt;h1 id=&quot;リベンジ&quot;&gt;&lt;a href=&quot;#リベンジ&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
    <category term="Scala" scheme="https://future-architect.github.io/tags/Scala/"/>
    
    <category term="Tipron" scheme="https://future-architect.github.io/tags/Tipron/"/>
    
  </entry>
  
  <entry>
    <title>TinkerBoard 2S：AWS Greengrass v1をインストールする</title>
    <link href="https://future-architect.github.io/articles/20220407a/"/>
    <id>https://future-architect.github.io/articles/20220407a/</id>
    <published>2022-04-06T15:00:00.000Z</published>
    <updated>2022-04-07T03:16:30.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220407a/tinker.png" alt="tinker.png" width="945" height="287" loading="lazy"><p><a href="/articles/20220404a/">電子工作/IoT連載</a> の4本目です</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIG所属の宮永です。</p><p>ASUSが販売しているシングルボードコンピュータTinekr Board2SにAWS Greengrassの環境を構築したので記事にまとめました。</p><p>シングルボードコンピュータと聞くと真っ先に思い浮かべるのはRaspberryPiでしょうか。私も初めて触ったシングルボードコンピュータはRaspberryPiでした。</p><p>マザーボードなどで有名なASUSが販売しているシングルボードコンピュータの性能はとても気になります。</p><p>ネット上でもTinker Board2Sの記事はRaspberryPiに比べると非常に少ないため、本記事の構成も前半はTinker Boardの初期セットアップ、後半をAWS Greengrassの環境構築との章立てとしています。</p><p>本記事がTinker Board2S購入検討をしている方の役にたてば幸いです。</p><h2 id="Tinker-Board2Sとは"><a href="#Tinker-Board2Sとは" class="headerlink" title="Tinker Board2Sとは"></a>Tinker Board2Sとは</h2><p>ASUSが販売するArmベースのシングルボードコンピュータです。<br>商品についての公式ページは<a href="https://tinker-board.asus.com/jp/product/tinker-board-2s.html">こちら</a>です。<br>まずは外観から観察します。</p><h3 id="外観"><a href="#外観" class="headerlink" title="外観"></a>外観</h3><p>一際目を惹くのはでっかいヒートシンクですね。😳<br>このヒートシンクは付属品です。</p><img src="/images/20220407a/tinker.JPG" alt="外観" width="1200" height="676" loading="lazy"><p>手前にピンヘッダーが40個確認できます。着色してあるため非常に便利です。<br>RaspberryPiだと上から一つずつ数えていかなければ行けないのでこの仕様はとてもありがたいですね。</p><p>外部インタフェースを見ていきます。<br><img src="/images/20220407a/usb.JPG" alt="外部インターフェース" width="1200" height="676" loading="lazy"></p><p>3.2USB Gen1 Type-Aが3つ、3.2USB Gen1 Type-Cが１つ付属しています。有線LANも接続できるようになっています。</p><img src="/images/20220407a/DSC_0559.JPG" alt="USB周り" width="1200" height="676" loading="lazy">側面です。一番左にあるのは電源端子その隣がHDMI端子です。HDMIの横にMIDI DSI(Mobile Industry Processor Interface Display Serial Interface)も確認できます。こちらの端子はディスプレイモジュールを扱う際に使用します。<img src="/images/20220407a/DSC_0560.JPG" alt="HDMI" width="1200" height="676" loading="lazy"><p>最後に前面(背面？)です。<br>手前に見えている端子はMIPI CSI(Mobile Industry Processor Interfa Camera Serial Interface)です。こちらの端子はカメラモジュールを取り付ける際に使用します。</p><p>その右側には小さいですがLEDが3つついています。<br>左から電源用LEDランプ、ディスクアクティビティLEDランプ、プログラマブルLEDです。<br>外観の観察もほどほどにOSのインストールをします。</p><h3 id="OSインストール"><a href="#OSインストール" class="headerlink" title="OSインストール"></a>OSインストール</h3><p>Tinker Boardは専用のOSが<a href="https://tinker-board.asus.com/jp/download-list.html?product=tinker-board-2s">公式ページ</a>で配布されています。<br>まずはOSをデスクトップPCにダウンロードします。<br>筆者のデスクトップ環境はUbuntu22.04ですのでセットアップもそれに準じたものとなっています。<br>以下Ubuntu22.04がインストールされた母艦PCをデスクトップPCと呼称しています。</p><p>デバイスをUSB経由でPCに接続しデスクトップPCでの正常に認識されているかを確認します。<br><code>lsusb</code>で接続デバイスを確認することができます。</p><p><strong>Tinker Board接続前</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">❯❯❯ lsusb</span><br><span class="line">Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class="line">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 001 Device 031: ID 08bb:27c4 Texas Instruments PCM2704C stereo audio DAC</span><br><span class="line">Bus 001 Device 005: ID 05e3:0608 Genesys Logic, Inc. Hub</span><br><span class="line">Bus 001 Device 003: ID 0b05:1939 ASUSTek Computer, Inc. AURA LED Controller</span><br><span class="line">Bus 001 Device 043: ID 0d8c:016c C-Media Electronics, Inc.</span><br><span class="line">Bus 001 Device 042: ID 2be8:0001  USB 2.0 Hub [Safe]</span><br><span class="line">Bus 001 Device 041: ID 046d:c52b Logitech, Inc. Unifying Receiver</span><br><span class="line">Bus 001 Device 040: ID 1a40:0101 Terminus Technology Inc. Hub</span><br><span class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br></pre></td></tr></table></figure><p><strong>Tinker Board接続後</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">❯❯❯ lsusb</span><br><span class="line">Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class="line">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 001 Device 031: ID 08bb:27c4 Texas Instruments PCM2704C stereo audio DAC</span><br><span class="line">Bus 001 Device 005: ID 05e3:0608 Genesys Logic, Inc. Hub</span><br><span class="line">Bus 001 Device 003: ID 0b05:1939 ASUSTek Computer, Inc. AURA LED Controller</span><br><span class="line"><span class="addition">+Bus 001 Device 047: ID 0b05:7820 ASUSTek Computer, Inc. USB download gadget</span></span><br><span class="line">Bus 001 Device 043: ID 0d8c:016c C-Media Electronics, Inc. USB download gadget</span><br><span class="line">Bus 001 Device 042: ID 2be8:0001  USB 2.0 Hub [Safe]</span><br><span class="line">Bus 001 Device 041: ID 046d:c52b Logitech, Inc. Unifying Receiver</span><br><span class="line">Bus 001 Device 040: ID 1a40:0101 Terminus Technology Inc. Hub</span><br><span class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br></pre></td></tr></table></figure><p>デバイスが1つ増えていますね。</p><p>書き込みは<a href="https://www.balena.io/etcher/">Ethcer</a>を使用します。<br>デバイスを認識した状態でOSイメージをTinkerOSで選択します<br>私の場合はこのタイミングで書き込み先も自動的にTinkerBoardが登録されました。</p><img src="/images/20220407a/image.png" alt="Ethcer" width="890" height="579" loading="lazy"><p>書き込まれるのを待つだけです。</p><img src="/images/20220407a/image_2.png" alt="Ethcer書き込み中" width="801" height="503" loading="lazy"><p>イメージの書き込みが完了したら再度電源を入れます。<br>起動するとリブートが始まり、以下の画面が立ち上がります。<br><img src="/images/20220407a/Screenshot_from_2022-02-04_22-29-32.png" alt="起動画面" width="1200" height="676" loading="lazy"></p><p>有線LANを接続した状態で引き続きセットアップを行います。</p><p>SSH接続します。<br>ログイン名linaroとなっているので</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh linaro@&lt;IPaddress&gt;</span><br></pre></td></tr></table></figure><p>で接続ができます。Passwordを要求されるのでlinaroと入力すると接続ができます。<br>AWS Greengrassの環境構築はssh接続できれば問題ありませんので、Tinker Boardの初期セットアップは以上で完了とします。</p><h2 id="AWS-Greengrassのインストール"><a href="#AWS-Greengrassのインストール" class="headerlink" title="AWS Greengrassのインストール"></a>AWS Greengrassのインストール</h2><p>AWS Greengrassは2022年4月現在v1とv2の２つあります。<br>今回はCPU　ARM64 【AArch64】環境でdockerを使用したかったためv1の環境構築を行います。<br>v2では　ARM64 【AArch64】のdocker環境はサポートされていないようです。</p><p>なお、以下の環境構築ではTinker Board上にdocker及び、docker-composeがインストールされていることを想定しています。</p><p>環境構築は以下の公式の開発者ガイドに沿って行います。<br><a href="https://docs.aws.amazon.com/ja_jp/greengrass/v1/developerguide/what-is-gg.html">https://docs.aws.amazon.com/ja_jp/greengrass/v1/developerguide/what-is-gg.html</a></p><h3 id="Greengrassのグループ作成"><a href="#Greengrassのグループ作成" class="headerlink" title="Greengrassのグループ作成"></a>Greengrassのグループ作成</h3><p>まずはAWS Greengrassのグループを作成します。<br>デフォルトの設定でグループを作成します。<br>AWS IoTコンソール画面左のタブから「クラシック＞グループ」を選択します.<br>画面遷移後「グループを作成」を選択すると下図のようになるので「デフォルト作成を使用」を選択します。</p><img src="/images/20220407a/image_3.png" alt="Greengrassのグループ作成" width="241" height="107" loading="lazy"><img src="/images/20220407a/image_4.png" alt="Greengrassのグループ作成のグループ名" width="879" height="620" loading="lazy">適当にグループ名をつけて「次へ」を選択します。<img src="/images/20220407a/image_5.png" alt="Greengrassのグループ作成のグループ名" width="878" height="481" loading="lazy">こちらも同様にして「次へ」を選択します。<img src="/images/20220407a/image_6.png" alt="次へ" width="867" height="477" loading="lazy"><p>グループの作成が完了すると証明書が発行されます。<br>この証明書は後ほど使用するためデスクトップPCにダウンロードしておきます。</p><img src="/images/20220407a/image_7.png" alt="証明書の発行" width="910" height="859" loading="lazy"><p>次に先程発行した証明書を使用してGreengrassコンテナを起動します。<br>必要なDockerfileなどは<a href="https://docs.aws.amazon.com/ja_jp/greengrass/v1/developerguide/what-is-gg.html?icmpid=docs_gg_mktg#gg-docker-download">こちら</a>からダウンロードすることができます。</p><p>私はバージョン1.10を使用しました。<br><img src="/images/20220407a/image_8.png" alt="バージョン1.10" width="1197" height="181" loading="lazy"></p><p>ダウンロードした圧縮ファイルはデスクトップPCからTinker Boardに転送します。<br>以下のコマンドTinker Boardのhomeに転送することができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r aws-greengrass-docker-1.11.0.tar.gz linaro@&lt;IPaddress&gt;:~/</span><br></pre></td></tr></table></figure><p>先程ダウンロードした証明書も転送してしまいましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r xxxxxx-setup.tar.gz linaro@&lt;IPaddress&gt;:~/</span><br></pre></td></tr></table></figure><p>それではsshでTinker Boardに接続してコンテナを起動します。</p><p>sshで接続します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh linaro@&lt;IPaddress&gt;</span><br></pre></td></tr></table></figure><p>ディレクトリ構成ですが私はhome直下にgreengrassというディレクトリを作成し、そこに先程の2つのファイルを格納しました。<br>下記のような構成です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">linaro@linaro-alip:~/greengrass$ tree</span><br><span class="line">.</span><br><span class="line">├── xxxxxxx-setup.tar.gz</span><br><span class="line">└── aws-greengrass-docker-1.11.0.tar.gz</span><br></pre></td></tr></table></figure><p>まずはaws-greengrass-docker-1.11.0.tar.gzを同一ディレクトリに解凍します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf aws-greengrass-docker-1.11.0.tar.gz</span><br></pre></td></tr></table></figure><p>次に証明書の圧縮ファイルを解凍したフォルダの中に解凍します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf xxxxxxx-setup.tar.gz -C aws-greengrass-docker-1.11.0/</span><br></pre></td></tr></table></figure><p>この状態でディレクトリ構成は以下のようになります。<br>certsとconfigは証明書の圧縮ファイルを解凍して生成されたものです。<br>本記事で解説している方法は解凍ファイル中のREADME.mdに全て記載されています。<br>RaspberryPiを使用される方はarmv7l についての環境構築方法も記載されているため、ぜひご覧になってください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">linaro@linaro-alip:~/greengrass/aws-greengrass-docker-1.11.0$ <span class="built_in">ls</span></span><br><span class="line">Dockerfile                          config</span><br><span class="line">Dockerfile.alpine-aarch64           deployment</span><br><span class="line">Dockerfile.alpine-aarch64.template  docker-compose.alpine-aarch64.yml</span><br><span class="line">Dockerfile.alpine-armv7l            docker-compose.alpine-armv7l.yml</span><br><span class="line">Dockerfile.alpine-armv7l.template   docker-compose.alpine-x86-64.yml</span><br><span class="line">Dockerfile.alpine-x86_64            docker-compose.yml</span><br><span class="line">Dockerfile.alpine-x86_64.template   greengrass-entrypoint.sh</span><br><span class="line">README.md                           greengrass-license-v1.pdf</span><br><span class="line">certs</span><br></pre></td></tr></table></figure><h3 id="コンテナの起動"><a href="#コンテナの起動" class="headerlink" title="コンテナの起動"></a>コンテナの起動</h3><p>開発ガイドにはLinuxをコアデバイスとするときに以下のコマンドを入力するように記載されていますので、それに従います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/fs/protected_hardlinks</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/fs/protected_symlinks</span><br></pre></td></tr></table></figure><p>また、<code>/etc/sysctl.conf</code>に以下の記載をした後に<code>sudo sysctl -p</code>を端末に入力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure><p>それでは用意されているdocekr-composeからイメージをビルドします。<br>docker-compose.ymlはCPUアーキテクチャ毎に用意されているので使用するプラットフォームに合わせてファイルを指定します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose -f docker-compose.alpine-aarch64.yml build</span><br></pre></td></tr></table></figure><p>ビルドが終了したら、コンテナを起動します。<br>コンテナの起動の前にルート証明書が必要なのでcertsディレクトに移動して以下のコマンドを入力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O root.ca.pem https://www.amazontrust.com/repository/AmazonRootCA1.pem</span><br></pre></td></tr></table></figure><p>certs配下にroot.ca.pemがダウンロードされていることを確認してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">linaro@linaro-alip:~/greengrass/aws-greengrass-docker-1.11.0/certs$ tree</span><br><span class="line">.</span><br><span class="line">├── xxxxxxxxxx.cert.pem</span><br><span class="line">├── xxxxxxxxxx.private.key</span><br><span class="line">├── xxxxxxxxxx.public.key</span><br><span class="line">└── root.ca.pem</span><br></pre></td></tr></table></figure><p>ここまでできたらコンテナを起動します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose -f docker-compose.alpine-aarch64.yml up</span><br></pre></td></tr></table></figure><p>起動しました🎉</p><img src="/images/20220407a/image_9.png" alt="起動画面" width="1167" height="167" loading="lazy"><h3 id="Lambda関数の準備"><a href="#Lambda関数の準備" class="headerlink" title="Lambda関数の準備"></a>Lambda関数の準備</h3><p>次にマネジメントコンソールからLambda関数をコンテナに向けてデプロイします。</p><p>Lambda関数を作成するのに必要なGreengrassのPython SDKは<a href="https://github.com/aws/aws-greengrass-core-sdk-python/">ここから</a>ダウンロードすることができます。</p><p><a href="https://docs.aws.amazon.com/ja_jp/greengrass/v1/developerguide/create-lambda.html">開発者ガイド</a>に記載の通り<br>Helloフォルダにgreengrasssdkをコピーしてzipファイルに圧縮します。<br><a href="https://github.com/aws/aws-greengrass-core-sdk-python/">ここから</a>ダウンロードしたファイルのexamplesにHelloフォルダがあるので以下の構成で<br>圧縮ファイルを作成します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">~/Downloads/aws-greengrass-core-sdk-python-master/examples/HelloWorld</span><br><span class="line">❯❯❯ tree</span><br><span class="line">.</span><br><span class="line">├── greengrasssdk</span><br><span class="line">│   ├── IoTDataPlane.py</span><br><span class="line">│   ├── Lambda.py</span><br><span class="line">│   ├── SecretsManager.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── client.py</span><br><span class="line">│   ├── stream_manager</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── data</span><br><span class="line">│   │   │   └── __init__.py</span><br><span class="line">│   │   ├── exceptions.py</span><br><span class="line">│   │   ├── streammanagerclient.py</span><br><span class="line">│   │   ├── util.py</span><br><span class="line">│   │   └── utilinternal.py</span><br><span class="line">│   └── utils</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       └── testing.py</span><br><span class="line">└── greengrassHelloWorld.py</span><br></pre></td></tr></table></figure><p>圧縮コマンドは以下の通りです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r hello_world_python_lambda.zip greengrasssdk greengrassHelloWorld.py</span><br></pre></td></tr></table></figure><p>それでは、AWSクラウド上にLambdda関数をデプロイします。<br>マネジメントコンソールで適当な名前をつけてLambda関数を作成します。</p><img src="/images/20220407a/image_10.png" alt="Lambdaデプロイ" width="1200" height="450" loading="lazy"><p>先程のzipファイルを直接アップロードしてハンドラの名前を編集します。</p><img src="/images/20220407a/image_11.png" alt="Lambdaのハンドラ設定" width="774" height="639" loading="lazy"><p>開発者ガイドに沿ってバージョンとエイリアスも設定します。</p><img src="/images/20220407a/image_12.png" alt="Lambdaのエイリアス" width="813" height="369" loading="lazy"><p>クラウド上へのLambda関数のデプロイが完了したらコンテナに向けてコードの更新を行います。<br>Greengrassのグループから「Lambdaの追加」を選択します。</p><img src="/images/20220407a/image_13.png" alt="Lambda追加" width="930" height="806" loading="lazy"><p>すでにLambda関数はデプロイしていますので「既存のLambdaの使用」を選択します。</p><img src="/images/20220407a/image_14.png" alt="既存のLambdaの使用ボタン" width="906" height="456" loading="lazy"><p>関数を追加したらLambdaの設定画面に移動して<br>「タイムアウト」とLambdaの「ライフサイクル」を下記のように設定します。<br>他の設定はデフォルトのままで「更新」を選択します。</p><img src="/images/20220407a/image_15.png" alt="Lambdaの実行時の設定画面" width="923" height="741" loading="lazy"><p>グループの設定画面に戻り「最初のサブスクリプションの追加」を選択します。</p><img src="/images/20220407a/image_16.png" alt="Greengrassの最初のサブスクリプションの追加" width="920" height="605" loading="lazy"><p>「サブスクリプションの作成」画面ではメッセージの送信元(ソース)と受信先（ターゲット）を選択します。<br>AWS IoTではMQTTをPub/Subすることができます。<br>以前RaspberryPiとAWS IoT CoreでPub/Subした記事をいかにまとめていますのでよろしければご覧になってください。</p><p><a href="https://future-architect.github.io/articles/20210929a/">GoでMQTT!!　～温湿度マイスターbotの作成～(前編)</a><br><a href="https://future-architect.github.io/articles/20210930a/">GoでMQTT!!　～温湿度マイスターbotの作成～(後編)</a></p><p>トピックのフィルターに「hello/world」と入力して「次へ」を選択します。</p><img src="/images/20220407a/image_17.png" alt="image.png" width="936" height="567" loading="lazy"><p>それではコアデバイスにLambda関数をデプロイします。<br>作成したHelloWorldグループ画面で「アクション＞デプロイ」を選択します。<br>デプロイする前にコアデバイスでGreengrassが起動していることを再度確認しましょう。</p><img src="/images/20220407a/image_18.png" alt="トピックのフィルタリング" width="931" height="476" loading="lazy"><p>「自動検出」を選択するとデプロイが開始します。</p><img src="/images/20220407a/image_19.png" alt="自動検出" width="924" height="476" loading="lazy"><p>デプロイが正常に終了するとステータスが緑色になります。</p><img src="/images/20220407a/image_20.png" alt="ステータス" width="904" height="480" loading="lazy"><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>AWS IoTのマネジメントコンソールの「テスト＞MQTTテストクライアント」からトピックをサブスクライブします。</p><img src="/images/20220407a/image_21.png" alt="動作確認" width="244" height="103" loading="lazy"><p>トピックのフィルターはhello/worldとして、各種設定を以下のようにします。</p><img src="/images/20220407a/image_22.png" alt="トピックの設定" width="899" height="548" loading="lazy"><p>サブスクライブを選択すると、MQTTの受信が始まります。</p><p>コアデバイスが正常に動作していると下図のようにコアデバイスから設定したメッセージが届きます🎉</p><img src="/images/20220407a/image_23.png" alt="MQTT受信" width="1200" height="556" loading="lazy"><p>コアデバイスのLambda関数はクラウド上から関数を更新、グループの設定から再デプロイを行うことでいつでも更新することができます。とても便利ですね。</p><p>今回はTinker BoardにGreengrassの環境を構築して終わりましたが、次回はエッジデバイスでの加工処理なども行いたいと思います。<br>最後までお付き合いいただきありがとうございました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220407a/tinker.png&quot; alt=&quot;tinker.png&quot; width=&quot;945&quot; height=&quot;287&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a</summary>
        
      
    
    
    
    <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
    <category term="TinkerBoard2S" scheme="https://future-architect.github.io/tags/TinkerBoard2S/"/>
    
    <category term="AWSGreengrass" scheme="https://future-architect.github.io/tags/AWSGreengrass/"/>
    
  </entry>
  
  <entry>
    <title>プロトタイピングの勧め</title>
    <link href="https://future-architect.github.io/articles/20220406a/"/>
    <id>https://future-architect.github.io/articles/20220406a/</id>
    <published>2022-04-05T15:00:00.000Z</published>
    <updated>2022-04-06T05:17:46.224Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20220404a/">電子工作/IoT連載</a> の3本目です。</p><h1 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h1><p>こんにちわ。フューチャーの井上です。<br>過去にこんな記事を書いています。</p><ul><li><a href="/articles/20200909/">自作キーボードを組み立てた話</a></li><li><a href="/articles/20211101a/">キーボードを、基盤から自作してみた</a></li></ul><p>今回は、M5Stackというマイコンモジュールを使って、「バイクの各種情報を簡単に表示できたらいいな」という”思い付きを形にしていく過程”を記事にしようと思います。</p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>結果として、車両データロガーのようなものを作りました。</p><img src="/images/20220406a/image.png" alt="車両データを表示したM5Stack" width="600" height="322" loading="lazy"><p>車でレースをする人のにはなじみ深い、いわゆるデータロガーで取るようなデータの一部を表示します。モックアップとしてM5Stackで実装し、実際に実装する際に考慮すべき点などをこれで確認しました。</p><p>以下のような流れで制作しています。これは、仕事で何かを作る際にやることと一緒だと思います。</p><h2 id="やりたいことを決める"><a href="#やりたいことを決める" class="headerlink" title="やりたいことを決める"></a>やりたいことを決める</h2><p>現在、私はバイクを3台所有しています（HONDA GROM/HONDA V-Twin Magna/HONDA CB150R）。以前私は車でレースをしていたのですが、バイクは市販のままだと車両データがほとんど見れないのです。ある程度同じような情報が見たいな、と思っていました。</p><p>四輪のレース時は、以下のような情報を取っていました。</p><ul><li>加速度（旋回/加速の強度を見れる）</li><li>傾き（地形の影響を見れる、操作の滑らかさを確認できる）</li><li>エンジン状態（回転数、燃料消費量、スロットル開度、etc…）</li></ul><p>四輪の車においてはOBD2という自動車診断規格があり、そこから車内ネットワークであるCAN Busにアクセスして情報を取得することができます。</p><blockquote><p>CAN（Controller Area Network）とは、（ざっくりと説明すると）車載機器に使われるネットワークのことです。CANプロトコルを使い、車載機器間の通信を行います。例えばエンジンからは回転数情報を取得することができ、メーターがこの値を表示することで例えば「運転席のメーターにエンジン回転数が表示される」ようになります。逆に言うと、偽のデータを送り付けることで車両に異常を起こすことが可能です（セキュリティの領域）。</p></blockquote><blockquote><p>OBD2は、自動車診断企画です。上記CANはOBD2で使用されるプロトコルの一つで、故障診断用端末を接続しデータを吸い出すことを主な目的としています。日本では、四輪車量は2008年以降の新車に義務付け、二輪車両は2020年12月以降の新車に義務付けがされました。最近車両を買った方がいれば、ダッシュボードや運転席前部にコネクタが隠されているはずです。尚、適当に触ってしまうと機器故障と判断され、ディーラー持ち込み修理になる可能性があるのでお勧めはしません。</p></blockquote><p>私が最近買ったバイク（GROM）にはOBD2が装備されているらしいことを知ったので、そこから情報を取得して、記事にしようと思います。<br>四輪でのOBD2経由でデータ取得/書き換えの記事は世の中にあふれていますが、二輪のものはあまりありません。何ができるのか、辺りを調べることは良いアウトプットになりそうです。</p><p>以下をゴールにしようと思います。</p><ul><li>バイクに設置する、データロガーを作ろう<ul><li>以下の機能を実装する<ul><li>傾斜を表示する（ロール/ピッチ）</li><li>加速度を表示する（X/Y軸の加速度）</li><li>エンジン状態を表示する（OBD2経由で取得・四輪なら取得できる）<ul><li>燃料消費量<ul><li>100kmでの燃料消費量（L/100km）</li><li>1時間での消費量（L/h）</li><li>燃料圧力（kPa）</li></ul></li><li>車速（km/h）</li><li>ブースト圧（bar）</li><li>回転数（rpm）</li></ul></li></ul></li></ul></li></ul><h2 id="最初の躓き"><a href="#最初の躓き" class="headerlink" title="最初の躓き"></a>最初の躓き</h2><p>データが取得できることをまずは確かめたいので、このようなプロジェクトで使いやすいM5Stackというマイコンモジュールを使います。</p><blockquote><p>M5Stackとは、WiFiやBlutoothの機能を備えたCPUに、液晶ディスプレイやボタンや入出力ピンなどを一通り搭載した、小型のマイコンモジュールです。”Stack”と名前がついているように、専用モジュールを積み重ねて機能拡張ができます。</p></blockquote><p><a href="https://m5stack.com/">https://m5stack.com/</a></p><p>M5Stackを使ってバイクのCAN-Bus情報を見ようと思ったのですが、なんと、<br>M5Stack用の <strong>CAN Busユニットが売り切れ</strong> でした。</p><p>本企画の根幹を揺る問題ですが、この記事は書かないといけません。<br>故に、OBD2を使わずに車両状況を見るものを作ってみます。</p><p>M5Stackを使うと以下の情報が単体で取得できます。また、追加のセンサーがUnitとして販売されているので、今回はGPS Unitを使ってみようと思います。</p><ul><li>M5Stack本体<ul><li>M5StickC Plus</li><li>内蔵センサ<ul><li>6軸IMU<ul><li>加速度（X/Y/Z軸）</li><li>傾斜角度（ピッチ/ロール）</li></ul></li></ul></li><li>表示機能<ul><li>液晶（135 x 240）</li><li>LED x1</li></ul></li></ul></li><li>追加のUnit<ul><li>GPS Unit<ul><li>経度緯度</li><li>速度、コース</li><li>時刻</li></ul></li></ul></li></ul><img src="/images/20220406a/image_2.png" alt="M5Stack" width="600" height="382" loading="lazy"><p>当初の実装目標を変更し、以下を実現できるものにしようと思います。</p><ul><li>取得する/表示するもの<ul><li>加速度(X/Y軸)<ul><li>急な加減速は安全運転ではない、レース時は同じ場所で同じような加減速をすることでタイムが安定する）</li></ul></li><li>傾斜角度（ピッチ/ロール）<ul><li>ロール不足は車両の能力を生かし切れていない、ピッチが大きい場合はサスペンションセッティングの変更が必要</li><li>山道などでどの程度の坂なのか、が判別できる（燃費に影響）</li></ul></li><li>現在時刻<ul><li>時刻は見えた方が良いよね（バイクのメーターにも表示されているけど）</li></ul></li><li>車速<ul><li>今は使わないけど、サーキットでは位置情報などと合わせて安定した周回ができているかの判断になる</li></ul></li><li>GPS情報<ul><li>補足している衛星数とGPS受信ステータスは見えたほうが良い</li></ul></li></ul></li><li>取らないもの<ul><li>加速度（Z軸）<ul><li>Z軸（上下動）はジャンプでもしない限り不要なので実装しない</li></ul></li><li>緯度経度情報<ul><li>M5Stackの制約を考えると、プロトタイプなので、まだ要らない<ul><li>利用するM5StickC PlusにはSDカードなどの記録媒体が無いので、ローカル記録ができない</li><li>画面表示領域が狭い、経度緯度を見ても人間には分かりづらい（要PCでのデータ加工）</li></ul></li></ul></li></ul></li></ul><img src="/images/20220406a/image_3.png" alt="加速度、ピッチのイメージ" width="801" height="429" loading="lazy"><h2 id="どのように「見せるか」を決める"><a href="#どのように「見せるか」を決める" class="headerlink" title="どのように「見せるか」を決める"></a>どのように「見せるか」を決める</h2><p>M5StackC Plusの液晶（125 x 240）は小さいので、表示方法を考えないといけません。</p><div class="scroll"><table><thead><tr><th align="left">項目</th><th align="left">数値必須</th><th align="left">見やすくする必要性</th></tr></thead><tbody><tr><td align="left">加速度</td><td align="left">None</td><td align="left">数値自体より、推移を見たい</td></tr><tr><td align="left">傾斜度</td><td align="left">None</td><td align="left">数値自体より、推移を見たい</td></tr><tr><td align="left">現在時刻</td><td align="left">Yes</td><td align="left">なくてもいいけど…</td></tr><tr><td align="left">車速</td><td align="left">Yes</td><td align="left">汎用的に言えば、数字出しておけばいいのでは</td></tr><tr><td align="left">GPS:補足衛星数</td><td align="left">Yes</td><td align="left">デバッグ的に見れれば良さそう</td></tr><tr><td align="left">GPS:ステータス</td><td align="left">None</td><td align="left">デバッグ的に見れれば良さそう</td></tr></tbody></table></div><p>グラフと数値の組み合わせで表現をすれば良さそうなので、一旦イメージを書き出してみます。</p><img src="/images/20220406a/image_4.png" alt="M5Stackに表示するレイアウトイメージ" width="801" height="536" loading="lazy"><p>運転しながら見えるサイズなのかは少し疑問ですが、とりあえずは実装してみましょう。</p><h2 id="実装する"><a href="#実装する" class="headerlink" title="実装する"></a>実装する</h2><p>M5Stackは、UIFlow/microPythonかArudino IDEで開発する必要があります。<br>今回はプログラミング知識が少なくてもできるように、UIFlowを使います。UIFlowは各ブロックを組み合わせてプログラミングすることができるツールです。ブラウザでのオンライン利用も可能なので、実機が無くても一部試してみることは可能です。</p><p><a href="https://flow.m5stack.com/">https://flow.m5stack.com/</a></p><img src="/images/20220406a/image_5.png" alt="UIFlow" width="600" height="259" loading="lazy"><p>まずは、画面を設計します。</p><ul><li>左側のハードウェア風の画像で、テキストボックス（Label）や線などを配置していきます。<ul><li>バーグラフは、線を位置を指定して再描画することで表現します。</li><li>水平儀の位置は、赤い色の円のオブジェクトを再描画して表現します。</li></ul></li></ul><p>次に、データを取得できるようにし、表示位置のラベルに記載するようにします。</p><ul><li>定期的に更新されるように Timer オブジェクトを利用します。</li><li>電源を切りやすいように、AボタンにPowerOffを割り当てます。</li></ul><p>できたものが以下のです。<br>ブロック構成で、日本語でアクションが書かれているので、プログラミングの知識が無くても理解できそう/作れそう ですね。</p><img src="/images/20220406a/image_6.png" alt="ブロック構成" width="1200" height="762" loading="lazy"><p>UIFlowで作ったものを、microPythonに変換することもできます。<br>但し、UIFlowとmicroPythonは交互に行き来はできない為、microPythonで修正を行うとUIFlowに反映することはできず、以降はmicroPythonで構築することになります。<br><img src="/images/20220406a/image_7.png" alt="microPython" width="1200" height="762" loading="lazy"></p><h2 id="試用する"><a href="#試用する" class="headerlink" title="試用する"></a>試用する</h2><p>センサやプログラムの設計はできたので、さっそく実車で使用してみます。</p><p>まずはバイク（V-TwinMagna）のETCカードホルダに乗せてみましたが、ちょっと水平が取れてないので修正が必要ですね。<br>あと、絶望的に見辛いです。表示面を運転者側に傾けても、結構距離があるので文字が小さいので見えません。<br><img src="/images/20220406a/image_8.png" alt="バイクに取り付けたM5Stack" width="500" height="667" loading="lazy"></p><p>次に別のバイク（GROM）に乗せてみます。ETCアンテナベースをミラーステーに付け、そこに養生用のテープで巻きつけます。<br>これもやっぱり、見辛いですね。高さの関係で見えはするのですが、文字サイズ的に読み取るのは難しいですね。<br>（画像を拡大すると、表示されている部分が見えます。）<br><img src="/images/20220406a/image_9.png" alt="別のバイクに取り付けたM5Stack" width="600" height="800" loading="lazy"></p><p>視認性が悪いですね。ですが、動作は問題なく行われました（運転中に撮影はできないので画像はありません）。</p><h2 id="改善案"><a href="#改善案" class="headerlink" title="改善案"></a>改善案</h2><p>実際に屋外で使ってみたことで、（分かってはいたけど）以下の問題が明確に判明しました</p><ul><li>視認性の問題<ul><li>設置角度が運転者方向に向いていないので、のぞき込む必要がある。<ul><li>表示器を分離する必要がある。</li><li>M5Stack自体を傾ける場合、内蔵センサの補正が必要で、制度が下がる。外付けの加速度センサで水平を出す必要がある。</li></ul></li><li>輝度が足りず、日照下では見えない。<ul><li>7Segment LEDなどを使うか、屋外用のディスプレイを使う必要がある = 表示器とセンサは分離する。</li><li>電子ペーパーなら視認性は良いが、紫外線耐久性や表示更新頻度で不安がある。</li></ul></li></ul></li><li>データ誤差があると推定される<ul><li>センサーを水平に保てていない場合、加速度等低く見積もられる = センサー設置時の水平確認</li></ul></li><li>データが記録できない<ul><li>MicroSD等が使えるものを使う</li></ul></li><li>エンジン情報が取れない<ul><li>CAN Busへのアクセスが必要 = 部品を買おう（売り切れ）</li></ul></li></ul><p>以上から、今後は以下のように更新していく予定です。</p><ul><li>表示機能を別に用意する<ul><li>LEDテープや7Segment LEDの方が見やすいものもある</li></ul></li><li>センサーは内臓ではなく、別部品で用意する<ul><li>設置自由度も上がる</li></ul></li><li>記録媒体が使えるデバイスに置き換える<ul><li>M5StickC Plusではなく、M5Stack（Basic等）などのMicroSDが使える筐体を利用する</li><li>Raspberry Piに乗り換える</li></ul></li><li>CAN Busに接続する<ul><li>バイクの診断ポートをOBD2変換し、OBD2経由でアクセスする</li><li><strong>部品を買う</strong></li></ul></li></ul><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>こんな感じでプロトタイプ作って改善していくのは楽しいですね。<br>思い付きを形にすることが最近は簡単にできるので、やってみましょう！</p><ul><li>M5Stackは簡単にプログラムできるし、いろいろなセンサ（UNIT）がそろっているので、思い付きを形にしやすいですね！</li></ul><p>弊社ではデバイスの開発をするプロジェクトもあり、おそらくこのように「やりたい事」「プロトタイプ」「改善」を回して開発をしていると思われます（私はそのようなプロジェクトにまだ参加していませんのですが…）。<br>ここまで読んだ方なら興味があると思いますので、ぜひ採用担当者等にご相談ください。関連する方を紹介してもらえるかもしれません。</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><ul><li>M5Stack<ul><li><a href="https://m5stack.com/">https://m5stack.com/</a><ul><li>用途に合わせて色々なシリーズがあります。</li><li>基本的にGPIOと表示系とボタンがあり、単体で活用しやすいモジュール構成になっています。</li><li>プログラミングは、UIFlow/MicroPythonかArudinoのものを利用します。</li></ul></li><li>同様なものに micro:bit - <a href="https://microbit.org/ja/">https://microbit.org/ja/</a> があります。</li></ul></li><li>UIFlow<ul><li><a href="https://m5stack.com/uiflow">https://m5stack.com/uiflow</a><ul><li><code>Get Started FREE</code>　<a href="https://flow.m5stack.com/">ボタン</a>から試すことができます。<code>APIキー</code> は指定せず、<code>Device:</code> は適当なものを指定すれば使えます。</li></ul></li></ul></li><li>CAN Bus<ul><li>O’REILLYの「カーハッカーズ・ハンドブック –車載システムの仕組み・分析・セキュリティ–」辺りが参考になります。<ul><li><a href="https://www.oreilly.co.jp/books/9784873118239/">https://www.oreilly.co.jp/books/9784873118239/</a></li></ul></li></ul></li><li>売っている店<ul><li><a href="https://www.marutsu.co.jp/">マルツオンライン</a> や <a href="https://www.switch-science.com/">スイッチサイエンス</a> 辺りで通販することが多いですね。</li><li><a href="https://www.marutsu.co.jp/pc/static/shop/akihabara">マルツ秋葉原本店</a> で実物を見ながら検討するのもよいでしょう</li></ul></li><li>ホンダ<ul><li><a href="https://www.honda.co.jp/GROM/">GROM</a></li><li><a href="https://www.honda.co.jp/news/1994/2940603.html">V-TwinMagna</a></li><li><a href="https://www.thaihonda.co.th/honda/motorcycle/neo-sport-cafe/new-cb150r-2021">CB150R</a></li></ul></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20220404a/&quot;&gt;電子工作/IoT連載&lt;/a&gt; の3本目です。&lt;/p&gt;
&lt;h1 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初めに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="IoT" scheme="https://future-architect.github.io/tags/IoT/"/>
    
    <category term="電子工作" scheme="https://future-architect.github.io/tags/%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C/"/>
    
    <category term="M5Stick" scheme="https://future-architect.github.io/tags/M5Stick/"/>
    
    <category term="CAN" scheme="https://future-architect.github.io/tags/CAN/"/>
    
    <category term="UIFlow" scheme="https://future-architect.github.io/tags/UIFlow/"/>
    
    <category term="microPython" scheme="https://future-architect.github.io/tags/microPython/"/>
    
    <category term="OBD2" scheme="https://future-architect.github.io/tags/OBD2/"/>
    
  </entry>
  
  <entry>
    <title>雀を見守るカメラを作ってみた</title>
    <link href="https://future-architect.github.io/articles/20220405a/"/>
    <id>https://future-architect.github.io/articles/20220405a/</id>
    <published>2022-04-04T15:00:00.000Z</published>
    <updated>2022-04-05T03:26:54.744Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20220404a/">電子工作/IoT連載</a> の2本目です。</p><h1 id="背景、はじめに。"><a href="#背景、はじめに。" class="headerlink" title="背景、はじめに。"></a>背景、はじめに。</h1><p>みなさんこんにちは。フューチャーの矢野です。</p><p>もう春ですね。この季節になると実家の壁に雀が巣を作ることがあります。</p><p>今年も雀が巣を作ったなら、それを見守れたら楽しいなと思います。</p><p>そこで、雀を見守るためのカメラを試作してみました。</p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>作ったのがこれです。(<a href="#%E3%83%87%E3%83%A2">デモ</a>)<br><img src="/images/20220405a/image.png" alt="デモ" width="1200" height="717" loading="lazy"></p><p>今回実現したのは下記です。</p><ol><li>LAN内ならカメラの映像が確認できる</li><li>雀がいない間はカメラの電源を落とすことで節電</li><li>カメラが起動したら通知が届く</li><li>かわいい雀の写真がLINEに通知される</li><li>カメラの設定はスマホからできる</li></ol><h2 id="フロー図"><a href="#フロー図" class="headerlink" title="フロー図"></a>フロー図</h2><img src="/images/20220405a/TF_Blog2022-ページ2.drawio.png" alt="フロー図" width="697" height="843" loading="lazy"><p>人感センサーに反応があると、カメラに電源が入ります。<br>カメラは起動するとまずWiFiに接続を試みて、失敗したらAPモードになり、APに接続することでWiFi設定などができるようになります。設定が終了したら、再起動して、またWiFiの接続を試みます。WiFiの接続に成功したらば、まずLINEに通知を飛ばします。飛ばせない場合は、黙ってカメラのサーバーを立ち上げます。３０秒以上センサーに反応がない場合は、カメラの電源が落ちます。ここのロジックはATTiny202のマイコン側でやっていますが、ESP32-CAMだけで実現できると思います。</p><h2 id="使用の想定"><a href="#使用の想定" class="headerlink" title="使用の想定"></a>使用の想定</h2><img src="/images/20220405a/TF_Blog2022-ページ3.drawio.png" alt="使用の想定" width="854" height="399" loading="lazy"><p>カメラがアクセスするWiFiなどの設定はスマホからできるようにしました。カメラへのアクセスはLAN内に限定しました。インターネット越しに雀を見守ることはできません。</p><p>今回の想定は、ユーザー（私）がLINEの通知をみたあと、同じWiFi内にいるにスマホでカメラに接続する想定です。</p><h2 id="回路図"><a href="#回路図" class="headerlink" title="回路図"></a>回路図</h2><img src="/images/20220405a/image_2.png" alt="回路図" width="1200" height="513" loading="lazy"><p>常時人感センサーだけ給電されていて、人感センサーに反応があると、ほかのモジュールにも電源がいくようになっています。NchMOSFETとPchMOSFETを組み合わせて電源を入れる処理は実現しました。電源が入ったATTiny202がQ2のゲートを開けます。</p><p>これによって電源が切れないようなります。電源を切るときはQ2のゲートを閉じます。</p><p>ブレッドボードだとこうなります。<br><img src="/images/20220405a/FTBlog_ブレッドボード.png" alt="ブレッドボード" width="1200" height="845" loading="lazy"><br>一枚のブレッドボードでサクッと作れるのは気持ちがいいですね。</p><h2 id="パーツリスト"><a href="#パーツリスト" class="headerlink" title="パーツリスト"></a>パーツリスト</h2><p>今回の工作で使ったパーツと、購入できるページを載せておきます。<br>ブレッドボードやジャンパーピンは省略します。</p><div class="scroll"><table><thead><tr><th></th><th>名称</th><th>購入先例</th></tr></thead><tbody><tr><td>U1</td><td>焦電型赤外線センサーモジュール（焦電人感センサ）</td><td><a href="https://akizukidenshi.com/catalog/g/gM-14064/">秋月電子</a></td></tr><tr><td>U2</td><td>ＡＶＲマイコン　ＡＴＴＩＮＹ２０２－ＳＳＮＲ</td><td><a href="https://akizukidenshi.com/catalog/g/gI-15731/">秋月電子</a></td></tr><tr><td>U3</td><td>ESPカメラモジュール [ESP32-CAM-K]</td><td><a href="https://www.aitendo.com/product/19515">www.aitendo.com</a></td></tr><tr><td>Q1,Q2</td><td>ＮｃｈＭＯＳＦＥＴ　３０Ｖ５Ａ　ＩＲＬＭＬ６３４４ＴＲＰＢＦＴＲ</td><td><a href="https://akizukidenshi.com/catalog/g/gI-06049/">秋月電子</a></td></tr><tr><td>Q3</td><td>ＰｃｈＭＯＳＦＥＴ　ＩＲＬＭＬ２２４６ＴＲＰＢＦ</td><td><a href="https://akizukidenshi.com/catalog/g/gI-06048/">秋月電子</a></td></tr><tr><td>R1,R4,R5</td><td>100kΩ抵抗</td><td>秋月電子等</td></tr><tr><td>R2</td><td>39kΩ抵抗</td><td>秋月電子等</td></tr><tr><td>R3</td><td>100Ω抵抗</td><td>秋月電子等</td></tr><tr><td>LED1</td><td>何かしらのLED</td><td>秋月電子等</td></tr></tbody></table></div><p>MOSFETやATTiny202などの表面実装パッケージをブレッドボードに差し込むために下記の基板を使いました。</p><div class="scroll"><table><thead><tr><th></th><th>名称</th><th>購入先例</th></tr></thead><tbody><tr><td>ATTiny202用</td><td>ＳＯＴ－２３－３　ＤＩＰ化基板　（５枚入）</td><td><a href="https://akizukidenshi.com/catalog/g/gP-05154/">秋月電子</a></td></tr><tr><td>MOSFET用</td><td>ＳＯＰ８（１．２７ｍｍ）ＤＩＰ変換基板　金フラッシュ　（９枚入）</td><td><a href="https://akizukidenshi.com/catalog/g/gP-14298/">秋月電子</a></td></tr></tbody></table></div><h2 id="ソースコード"><a href="#ソースコード" class="headerlink" title="ソースコード"></a>ソースコード</h2><p>ソースコードは下記です。<br>ESP32のスケッチ例、CameraWebServerに下記のような変更を加えたものです。</p><ol><li>WiFi接続時に<a href="https://github.com/zhouhan0126/WIFIMANAGER-ESP32">WiFiManager</a>を用いることで、WiFi設定をスマホからできるようにした。</li><li>HTTPClientを用いて、LINE NotifyのAPIを叩くようにした。</li></ol><p>画像をHTTPClientを用いてLINEにPOSTするのですが、<a href="https://qiita.com/dzonesasaki/items/1417b917751443994ffc">この記事</a>が大変参考になりました。</p><figure class="highlight c"><figcaption><span>camera_server.ino</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;esp_camera.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;DNSServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WebServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFiManager.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;HTTPClient.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CAMERA_MODEL_AI_THINKER</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;camera_pins.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">startCameraServer</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LINE_ACCESS_TOKEN <span class="string">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BOUNDARY <span class="string">&quot;CHUNCHUNNOTICE20220327&quot;</span></span></span><br><span class="line">HTTPClient http;</span><br><span class="line"><span class="type">int32_t</span> <span class="title function_">linePost</span><span class="params">( <span class="type">camera_fb_t</span> *fb )</span> &#123;</span><br><span class="line">  String RequestURL=<span class="string">&quot;https://notify-api.line.me/api/notify&quot;</span>;</span><br><span class="line">  http.begin(RequestURL);</span><br><span class="line">  <span class="keyword">if</span> (fb)</span><br><span class="line">  &#123;</span><br><span class="line">    String stConType =<span class="string">&quot;multipart/form-data; boundary=&quot;</span>;</span><br><span class="line">    stConType+=BOUNDARY;</span><br><span class="line">    http.addHeader(<span class="string">&quot;Content-Type&quot;</span>, stConType);</span><br><span class="line">    String authorization = <span class="string">&quot;Bearer &quot;</span>;</span><br><span class="line">    authorization += LINE_ACCESS_TOKEN;</span><br><span class="line">    http.addHeader(<span class="string">&quot;Authorization&quot;</span>, authorization);</span><br><span class="line"></span><br><span class="line">    String stMHead=<span class="string">&quot;--&quot;</span>;</span><br><span class="line">    stMHead += BOUNDARY;</span><br><span class="line">    stMHead += <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    stMHead += <span class="string">&quot;Content-Disposition: form-data; name=\&quot;message\&quot;;\r\n\r\n&quot;</span>;</span><br><span class="line">    stMHead += <span class="string">&quot;Camera: http://&quot;</span>;</span><br><span class="line">    stMHead += WiFi.localIP().toString();</span><br><span class="line">    stMHead += <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    stMHead += <span class="string">&quot;--&quot;</span>;</span><br><span class="line">    stMHead += BOUNDARY;</span><br><span class="line">    stMHead += <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">    stMHead += <span class="string">&quot;Content-Disposition: form-data; name=\&quot;imageFile\&quot;; filename=\&quot;./a.jpg\&quot; \r\n&quot;</span>;</span><br><span class="line">    stMHead += <span class="string">&quot;Content-Type: image/jpeg \r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    stMHead += <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">    <span class="type">uint32_t</span> iNumMHead = stMHead.length();</span><br><span class="line"></span><br><span class="line">    String stMTail=<span class="string">&quot;\r\n--&quot;</span>;</span><br><span class="line">    stMTail += BOUNDARY;</span><br><span class="line">    stMTail += <span class="string">&quot;--\r\n\r\n&quot;</span>;</span><br><span class="line">    <span class="type">uint32_t</span> iNumMTail = stMTail.length();</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> iNumTotalLen = iNumMHead + iNumMTail + fb-&gt;len;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> *uiB = (<span class="type">uint8_t</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">uint8_t</span>)*iNumTotalLen);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> uilp=<span class="number">0</span>;uilp&lt;iNumMHead;uilp++)</span><br><span class="line">      uiB[<span class="number">0</span>+uilp]=stMHead[uilp];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> uilp=<span class="number">0</span>;uilp&lt;fb-&gt;len;uilp++)</span><br><span class="line">      uiB[iNumMHead+uilp]=(fb-&gt;buf)[uilp];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> uilp=<span class="number">0</span>;uilp&lt;iNumMTail;uilp++)</span><br><span class="line">      uiB[iNumMHead+fb-&gt;len+uilp]=stMTail[uilp];</span><br><span class="line"></span><br><span class="line">    <span class="type">int32_t</span> httpResponseCode = (<span class="type">int32_t</span>)http.POST(uiB,iNumTotalLen);</span><br><span class="line">    http.end();</span><br><span class="line">    <span class="built_in">free</span>(uiB);</span><br><span class="line">    Serial.print(<span class="string">&quot;Response Code:&quot;</span>);</span><br><span class="line">    Serial.println(httpResponseCode);</span><br><span class="line">    Serial.print(<span class="string">&quot;Response Body:&quot;</span>);</span><br><span class="line">    Serial.println(http.getString());</span><br><span class="line">    <span class="keyword">return</span> (httpResponseCode);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">takePhoto</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">camera_fb_t</span> * fb = <span class="literal">NULL</span>;</span><br><span class="line">    fb = esp_camera_fb_get();</span><br><span class="line">    <span class="keyword">if</span>(!fb) Serial.println(<span class="string">&quot;Camera capture failed&quot;</span>);</span><br><span class="line">    linePost(fb);</span><br><span class="line">    esp_camera_fb_return(fb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  Serial.setDebugOutput(<span class="literal">true</span>);</span><br><span class="line">  Serial.println();</span><br><span class="line"></span><br><span class="line">  <span class="type">camera_config_t</span> config;</span><br><span class="line">  config.ledc_channel = LEDC_CHANNEL_0;</span><br><span class="line">  config.ledc_timer = LEDC_TIMER_0;</span><br><span class="line">  config.pin_d0 = Y2_GPIO_NUM;</span><br><span class="line">  config.pin_d1 = Y3_GPIO_NUM;</span><br><span class="line">  config.pin_d2 = Y4_GPIO_NUM;</span><br><span class="line">  config.pin_d3 = Y5_GPIO_NUM;</span><br><span class="line">  config.pin_d4 = Y6_GPIO_NUM;</span><br><span class="line">  config.pin_d5 = Y7_GPIO_NUM;</span><br><span class="line">  config.pin_d6 = Y8_GPIO_NUM;</span><br><span class="line">  config.pin_d7 = Y9_GPIO_NUM;</span><br><span class="line">  config.pin_xclk = XCLK_GPIO_NUM;</span><br><span class="line">  config.pin_pclk = PCLK_GPIO_NUM;</span><br><span class="line">  config.pin_vsync = VSYNC_GPIO_NUM;</span><br><span class="line">  config.pin_href = HREF_GPIO_NUM;</span><br><span class="line">  config.pin_sscb_sda = SIOD_GPIO_NUM;</span><br><span class="line">  config.pin_sscb_scl = SIOC_GPIO_NUM;</span><br><span class="line">  config.pin_pwdn = PWDN_GPIO_NUM;</span><br><span class="line">  config.pin_reset = RESET_GPIO_NUM;</span><br><span class="line">  config.xclk_freq_hz = <span class="number">20000000</span>;</span><br><span class="line">  config.pixel_format = PIXFORMAT_JPEG;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if PSRAM IC present, init with UXGA resolution and higher JPEG quality</span></span><br><span class="line">  <span class="comment">//                      for larger pre-allocated frame buffer.</span></span><br><span class="line">  <span class="keyword">if</span>(psramFound())&#123;</span><br><span class="line">    config.frame_size = FRAMESIZE_UXGA;</span><br><span class="line">    config.jpeg_quality = <span class="number">10</span>;</span><br><span class="line">    config.fb_count = <span class="number">2</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    config.frame_size = FRAMESIZE_SVGA;</span><br><span class="line">    config.jpeg_quality = <span class="number">12</span>;</span><br><span class="line">    config.fb_count = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CAMERA_MODEL_ESP_EYE)</span></span><br><span class="line">  pinMode(<span class="number">13</span>, INPUT_PULLUP);</span><br><span class="line">  pinMode(<span class="number">14</span>, INPUT_PULLUP);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// camera init</span></span><br><span class="line">  <span class="type">esp_err_t</span> err = esp_camera_init(&amp;config);</span><br><span class="line">  <span class="keyword">if</span> (err != ESP_OK) &#123;</span><br><span class="line">    Serial.<span class="built_in">printf</span>(<span class="string">&quot;Camera init failed with error 0x%x&quot;</span>, err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">sensor_t</span> * s = esp_camera_sensor_get();</span><br><span class="line">  <span class="comment">// initial sensors are flipped vertically and colors are a bit saturated</span></span><br><span class="line">  <span class="keyword">if</span> (s-&gt;id.PID == OV3660_PID) &#123;</span><br><span class="line">    s-&gt;set_vflip(s, <span class="number">1</span>); <span class="comment">// flip it back</span></span><br><span class="line">    s-&gt;set_brightness(s, <span class="number">1</span>); <span class="comment">// up the brightness just a bit</span></span><br><span class="line">    s-&gt;set_saturation(s, <span class="number">-2</span>); <span class="comment">// lower the saturation</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// drop down frame size for higher initial frame rate</span></span><br><span class="line">  s-&gt;set_framesize(s, FRAMESIZE_QVGA);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CAMERA_MODEL_M5STACK_WIDE) || defined(CAMERA_MODEL_M5STACK_ESP32CAM)</span></span><br><span class="line">  s-&gt;set_vflip(s, <span class="number">1</span>);</span><br><span class="line">  s-&gt;set_hmirror(s, <span class="number">1</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  WiFiManager wifiManager;</span><br><span class="line">  wifiManager.setConfigPortalTimeout(<span class="number">30</span>);</span><br><span class="line">  <span class="keyword">if</span> (!wifiManager.autoConnect(<span class="string">&quot;BirdWatcher&quot;</span>,<span class="string">&quot;hogehoge&quot;</span>)) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;failed to connect and hit timeout&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  takePhoto();</span><br><span class="line">  startCameraServer();</span><br><span class="line"></span><br><span class="line">  Serial.print(<span class="string">&quot;Camera Ready! Use &#x27;http://&quot;</span>);</span><br><span class="line">  Serial.print(WiFi.localIP());</span><br><span class="line">  Serial.println(<span class="string">&quot;&#x27; to connect&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// put your main code here, to run repeatedly:</span></span><br><span class="line">  delay(<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ATTINY202側のコードです。人感センサーが反応してから30秒間電源が落ちないように0pin(NchMOSFETに繋がっている)をオンにします。こちらもArduinoのブートローダーを書き込んでArduinoIDEで開発してます。</p><figure class="highlight c"><figcaption><span>attiny202.ino</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  PowerController for tiny 202</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">keepPassive</span><span class="params">(<span class="type">int</span> digiin,<span class="type">int</span> interval)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;interval; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (digitalRead(digiin) == HIGH) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    delay(<span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  pinMode(<span class="number">0</span>, OUTPUT); <span class="comment">// POWER FLAG</span></span><br><span class="line">  pinMode(<span class="number">1</span>, INPUT); <span class="comment">// POWER BUTTON</span></span><br><span class="line">  digitalWrite(<span class="number">0</span>, HIGH);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> ( digitalRead(<span class="number">1</span>)==LOW &amp;&amp; keepPassive(<span class="number">1</span>, <span class="number">30</span>) ) digitalWrite(<span class="number">0</span>, LOW);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="デモ"><a href="#デモ" class="headerlink" title="デモ"></a>デモ</h1><img src="/images/20220405a/demo.gif" alt="demo.gif" width="200" height="433" loading="lazy">消費電力はテスターで測れる範囲で測った結果が下記です。電源の電圧は5Vです。<div class="scroll"><table><thead><tr><th>状態</th><th>電流</th></tr></thead><tbody><tr><td>人感センサのみ</td><td>0.0mA以下（※0.0mA以下をテスターで計測することができませんでした）</td></tr><tr><td>人感センサ反応後、WiFi起動時</td><td>190mA前後</td></tr><tr><td>サーバー起動、待機中</td><td>120mA前後</td></tr><tr><td>カメラ起動、配信開始</td><td>200mA以上（※テスターでは200mA以上の測定ができませんでした）</td></tr></tbody></table></div><p>上記の通り、カメラを常時起動させているよりは電気を節約できていそうですね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>これでかわいい雀が巣を作っても見守れますね。今回はカメラ部分だけ作りました。</p><p>実際に雀を見守るとなると、巣箱と、カメラを動かす電源が必要になります。</p><p>電源にはソーラーパネルと鉛蓄電池を使おうかなと思っています。</p><p>ありがとうございました。</p><h1 id="利用ツール・参考"><a href="#利用ツール・参考" class="headerlink" title="利用ツール・参考"></a>利用ツール・参考</h1><ol><li><a href="https://app.diagrams.net/">diagrams.net(フロー図、利用想定図作成)</a></li><li><a href="https://www.kicad.org/">KiCad(回路図作成)</a></li><li><a href="https://fritzing.org/">fritzing(ブレッドボードの図作成)</a></li><li><a href="https://ffmpeg.org/">ffmpeg(デモ動画変換)</a></li><li><a href="https://support.apple.com/ja_JP/downloads/quicktime">QuickTime Player + iPhone(デモ動画撮影)</a></li><li><a href="https://qiita.com/dzonesasaki/items/1417b917751443994ffc">Arduino HTTPClientでファイルのバイナリ送信</a></li><li><a href="https://notify-bot.line.me/doc/ja/">LINE Notify API Document([POST] /api/notify)</a></li></ol>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20220404a/&quot;&gt;電子工作/IoT連載&lt;/a&gt; の2本目です。&lt;/p&gt;
&lt;h1 id=&quot;背景、はじめに。&quot;&gt;&lt;a href=&quot;#背景、はじめに。&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
    <category term="電子工作" scheme="https://future-architect.github.io/tags/%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C/"/>
    
    <category term="ESP32-CAM" scheme="https://future-architect.github.io/tags/ESP32-CAM/"/>
    
    <category term="Arduino" scheme="https://future-architect.github.io/tags/Arduino/"/>
    
    <category term="人感センサー" scheme="https://future-architect.github.io/tags/%E4%BA%BA%E6%84%9F%E3%82%BB%E3%83%B3%E3%82%B5%E3%83%BC/"/>
    
  </entry>
  
  <entry>
    <title>スマートLED（Philips Hue）にFlutterでBLEアクセスしてみた</title>
    <link href="https://future-architect.github.io/articles/20220404b/"/>
    <id>https://future-architect.github.io/articles/20220404b/</id>
    <published>2022-04-03T15:00:01.000Z</published>
    <updated>2022-04-05T13:59:28.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット真野です。<a href="/articles/20220404a/">電子工作/IoT連載</a>は電子工作らしく、LEDをLチカ（LEDをチカチカさせる）する記事です。</p><p>普通のLEDだと面白くないので、<a href="https://www.amazon.co.jp/dp/B0848YBKGW/">Philips HueのLED</a>を購入しました。Philipsと言えば電動歯ブラシなどのイメージが強いかもしれませんが、スマートLED界では非常に有名で、ON/OFFはもちろんのこと、1600万色以上のカラー制御ができるので気分や何かしらの状態に合わせて照明の色を変えるなどのお楽しみができます。パリピになりたいですね。</p><p>接続ですが、Bluetooth（BLE: Bluetooth Low Energy）で接続可能。Hueブリッジと呼ばれるIoTゲートウェイ（Webサーバ的なもの）を経由してWeb API連携も可能という、いたせりつくせりです。Hueから各デバイスはZigBeeが用いられているということでいかした感じがします。Hueブリッジを経由する例は、Pythonを始め多くの自動化を試みる日本語記事も多く見かけます。今回は先週までブログ連載を開催していた<a href="/articles/20220315a/">Flutter</a>を用いて、Hueブリッジを用いずBLEで直接LEDの操作をします。</p><h2 id="FlutterでBLE"><a href="#FlutterでBLE" class="headerlink" title="FlutterでBLE"></a>FlutterでBLE</h2><p>FlutterでBLEのライブラリはいくつか存在しますが、<a href="https://github.com/PhilipsHue/flutter_reactive_ble">PhilipsHue/flutter_reactive_ble</a> を利用します。理由は以下の記事をパット見てメンテナンスがされていそうだからということです。</p><ul><li><a href="https://medium.com/flutter-community/bluetooth-low-energy-in-flutter-an-overview-937d0a68bc41">https://medium.com/flutter-community/bluetooth-low-energy-in-flutter-an-overview-937d0a68bc41</a></li></ul><p>flutter_reactive_bleはPhilips社が開発元なので、Hue LEDとの接続性もバッチリかと思いましたが、特段それに特化しているわけではなくBLE全般をあつかうライブラリのようです。</p><h2 id="Hue-LEDのBLE仕様"><a href="#Hue-LEDのBLE仕様" class="headerlink" title="Hue LEDのBLE仕様"></a>Hue LEDのBLE仕様</h2><p>Hue LEDのBluetoothの仕様ですが公式は存在しないようです。そのため有志の人が調査した（？）gistや、Python製のライブラリの実装を参考にします。</p><ul><li><a href="https://gist.github.com/shinyquagsire23/f7907fdf6b470200702e75a30135caf3">https://gist.github.com/shinyquagsire23/f7907fdf6b470200702e75a30135caf3</a></li><li><a href="https://github.com/npaun/philble">https://github.com/npaun/philble</a></li></ul><p>1つ目のgistを見てもBLEをよくしらない人からするとサッパリだと思うので補足します。BLE論理的な構造は以下のように、あるDeviceには複数のServiceが紐づいており、その配下にCharacteristicと呼ばれる構造で管理されています。この構成によってデータのやり取りを行います。ServiceもCharacteristicも特定のためにUUIDを用いています。</p><img src="/images/20220404b/ble_strucutre.png" alt="ble_strucutre.png" width="791" height="441" loading="lazy"><p>さきほどのgistを確認すると、Service <code>932c32bd-0000-47a2-835a-a8d455b859dd</code> に、電源ON/OFFをする <code>932c32bd-0002-47a2-835a-a8d455b859dd</code> というCharacteristicがあり、そちらに 1/0 のバイナリを送信すると、LEDがついたり消えたりするわけです。何に使うかわからないCharacteristicもいくつかありますが、ライトの操作は大まかこのシートから推測して行うことができます。Python側のライブラリは補足情報としてあつかうと良いかなと思います。</p><h2 id="Flutter実装"><a href="#Flutter実装" class="headerlink" title="Flutter実装"></a>Flutter実装</h2><p>さきほど紹介したPhilipsHue/flutter_reactive_bleを用いてBLE通信を行います。<code>scanForDevices()</code> が周囲のBLE端末を検出するAPIです。デバイスの特定ですが、device名が <code>Hue Lamp</code> だったのでそれで特定しています。複数のLED操作を行う際はそれぞれ別名で管理するなど工夫すると良いでしょう。実際にデバイスに接続するためには<code>connectToDevice()</code> を用います。</p><p>実際の処理は <code>QualifiedCharacteristic()</code> で送信データを作成し、 <code>writeCharacteristicWithoutResponse()</code> でBLEに通信しています。途中で出ているUUIDはgistのシートを参考にしました。製品固定です。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> initState() &#123;</span><br><span class="line">  <span class="keyword">super</span>.initState();</span><br><span class="line"></span><br><span class="line">  Future(() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ble = FlutterReactiveBle();</span><br><span class="line">    <span class="keyword">var</span> device = <span class="keyword">await</span> FlutterReactiveBle().scanForDevices(withServices: [], scanMode: ScanMode.lowLatency).firstWhere((device) =&gt; device.name == <span class="string">&quot;Hue Lamp&quot;</span>);</span><br><span class="line">    _deviceName = device.name;</span><br><span class="line"></span><br><span class="line">    ble.connectToDevice(id: device.id, servicesWithCharacteristicsToDiscover: &#123;&#125;, connectionTimeout: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>)).listen((state) <span class="keyword">async</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;State: <span class="subst">$&#123;state.toString()&#125;</span>&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (state.connectionState == DeviceConnectionState.connected) &#123;</span><br><span class="line">        <span class="keyword">var</span> services = <span class="keyword">await</span> ble.discoverServices(device.id);</span><br><span class="line">        <span class="keyword">var</span> service = services;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>;; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (_color) &#123;</span><br><span class="line">            <span class="keyword">const</span> colors = [</span><br><span class="line">              <span class="comment">// RGB color</span></span><br><span class="line">              [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">              [<span class="number">128</span>, <span class="number">51</span>, <span class="number">51</span>],</span><br><span class="line">              [<span class="number">128</span>, <span class="number">128</span>, <span class="number">51</span>],</span><br><span class="line">              [<span class="number">51</span>, <span class="number">128</span>, <span class="number">51</span>],</span><br><span class="line">              [<span class="number">51</span>, <span class="number">128</span>, <span class="number">128</span>],</span><br><span class="line">              [<span class="number">128</span>, <span class="number">70</span>, <span class="number">70</span>]</span><br><span class="line">            ];</span><br><span class="line">            <span class="keyword">final</span> colorControl = QualifiedCharacteristic(</span><br><span class="line">                serviceId: Uuid.parse(<span class="string">&quot;932c32bd-0000-47a2-835a-a8d455b859dd&quot;</span>), characteristicId: Uuid.parse(<span class="string">&quot;932c32bd-0005-47a2-835a-a8d455b859dd&quot;</span>), deviceId: device.id);</span><br><span class="line">            <span class="keyword">await</span> ble.writeCharacteristicWithoutResponse(colorControl, value: [<span class="number">1</span>, ...colors[i % <span class="number">5</span>]]);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_onOff) &#123;</span><br><span class="line">            <span class="keyword">final</span> lightControl = QualifiedCharacteristic(</span><br><span class="line">                serviceId: Uuid.parse(<span class="string">&quot;932c32bd-0000-47a2-835a-a8d455b859dd&quot;</span>), characteristicId: Uuid.parse(<span class="string">&quot;932c32bd-0002-47a2-835a-a8d455b859dd&quot;</span>), deviceId: device.id);</span><br><span class="line">            <span class="keyword">await</span> ble.writeCharacteristicWithoutResponse(lightControl, value: [i % <span class="number">2</span>]);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_temperature) &#123;</span><br><span class="line">            <span class="comment">// Index ranges from 153 (bluest) to 454 (bluest), or 500 on some models</span></span><br><span class="line">            <span class="keyword">final</span> temperatureControl = QualifiedCharacteristic(</span><br><span class="line">                serviceId: Uuid.parse(<span class="string">&quot;932c32bd-0000-47a2-835a-a8d455b859dd&quot;</span>), characteristicId: Uuid.parse(<span class="string">&quot;932c32bd-0004-47a2-835a-a8d455b859dd&quot;</span>), deviceId: device.id);</span><br><span class="line">            <span class="keyword">await</span> ble.writeCharacteristicWithoutResponse(temperatureControl, value: [<span class="number">50</span>, i % <span class="number">255</span>]); <span class="comment">// sample value</span></span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_brightness) &#123;</span><br><span class="line">            <span class="keyword">final</span> brightnessControl = QualifiedCharacteristic(</span><br><span class="line">                serviceId: Uuid.parse(<span class="string">&quot;932c32bd-0000-47a2-835a-a8d455b859dd&quot;</span>), characteristicId: Uuid.parse(<span class="string">&quot;932c32bd-0003-47a2-835a-a8d455b859dd&quot;</span>), deviceId: device.id);</span><br><span class="line">            <span class="keyword">await</span> ble.writeCharacteristicWithoutResponse(brightnessControl, value: [i % <span class="number">2</span> == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">254</span>]); <span class="comment">// 1~254</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">await</span> Future.delayed(<span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, onError: (<span class="built_in">dynamic</span> error) &#123;</span><br><span class="line">      <span class="built_in">print</span>(error.toString());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全文は次に載せています。</p><p><a href="https://github.com/ma91n/flutter-hue-led-sample">https://github.com/ma91n/flutter-hue-led-sample</a></p><h2 id="動かしてみた"><a href="#動かしてみた" class="headerlink" title="動かしてみた"></a>動かしてみた</h2><p>さきほどのFlutterで作成したアプリから、LEDを操作してみます。</p><h3 id="ON-OFF"><a href="#ON-OFF" class="headerlink" title="ON/OFF"></a>ON/OFF</h3><p>Lチカです。照明のON/OFFでカメラのフォーカスが変わってしまっていますが、ついたり消えたりしているのがわかります。手ブレですが、撮影中に飼い猫がじゃれついてきているためにいつもより多めに発生しています。</p><p><video src="/images/20220404b/Lチカ.mp4" controls width="50%"></video></p><h3 id="色変更"><a href="#色変更" class="headerlink" title="色変更"></a>色変更</h3><p>適当にRGBで指定した色に変更するようにしてています。</p><p><video src="/images/20220404b/色変更.mp4" controls width="50%"></video></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>BLEで操作する概念のとっかりが難しかったですが、Lチカが無事できて良かったです。BLEがたまにdisconnectになるなど、実用性はまだまだであるため、精度を上げるためには実験を繰り返しながらのトライが必要そうです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG DXユニット真野です。&lt;a</summary>
        
      
    
    
    
    <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="Lチカ" scheme="https://future-architect.github.io/tags/L%E3%83%81%E3%82%AB/"/>
    
    <category term="BLE" scheme="https://future-architect.github.io/tags/BLE/"/>
    
  </entry>
  
  <entry>
    <title>電子工作/IoT連載をはじめます</title>
    <link href="https://future-architect.github.io/articles/20220404a/"/>
    <id>https://future-architect.github.io/articles/20220404a/</id>
    <published>2022-04-03T15:00:00.000Z</published>
    <updated>2022-04-08T01:40:19.564Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220404a/bulb-gffed9c0de_640.png" alt=""  width="600" height="640"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>フューチャー電子工作部の真野です。</p><p>フューチャーには会社公認のクラブ活動（FACTS）があり、野球部、テニス部、ゴルフ部など、趣味を通じて和気あいあいと活動しています。この記事ではその中でもやや異色な存在である電子工作部＋αの有志で、ブログ連載を行います。</p><p>電子工作部自体は <a href="https://future-architect.github.io/tags/Future%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C%E9%83%A8/">#Future電子工作部</a> で発信しようと2019年ごろから<a href="https://future-architect.github.io/articles/20191018/">ラインレーサー</a>を企画したり起動に乗ろうとしていたところ、あいにくの情勢下で活動が難しくなり、主にチャット上で購入したデバイスについて自慢したり、<a href="https://speakerdeck.com/fumimaker/dian-zi-gong-zuo-falsetamefalsedian-qi-hui-lu-ji-chu-jiang-zuo">良質な教材をもとにみんなで勉強したり</a>、<a href="https://www.youtube.com/watch?v=1L_MBAwDqXc">おもしろ動画</a>を共有するといった緩い繋がりのコミュニティでした。</p><p>とはいえさすがに休止期間が長いので、何か技術ブログで発信していこうという活動を取ることにしました。</p><h2 id="スケジューリング"><a href="#スケジューリング" class="headerlink" title="スケジューリング"></a>スケジューリング</h2><p>電子工作やIoTのテーマで、6名のメンバーで開催します。</p><div class="scroll"><table><thead><tr><th>Date</th><th>Title</th><th>Author</th></tr></thead><tbody><tr><td>4月4日</td><td><a href="/articles/20220404b/">スマートLED照明に接続にしてみた</a></td><td>真野隼記</td></tr><tr><td>4月5日</td><td><a href="/articles/20220405a/">雀を見守るカメラを作ってみた</a></td><td>矢野颯太</td></tr><tr><td>4月6日</td><td><a href="/articles/20220406a/">プロトタイピングの勧め</a></td><td>井上圭</td></tr><tr><td>4月7日</td><td><a href="/articles/20220407a/">TinkerBoard 2S：AWS Greengrass v1をインストールする</a></td><td>宮永崇史</td></tr><tr><td>4月8日</td><td><a href="/articles/20220408a/">元日に92%引きで叩き売りされていた変形ホームロボットを買ったのでScalaから叩いてみた</a></td><td>山本力世</td></tr></tbody></table></div><p>実はメンバーが集まらず、企画が流れるかなと思いましたが、矢野さんや井上さんが急遽参画いただけて助かりました。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>この情勢下で中々外出が難しい、リモートワークになり在宅率が高い状況下ですので、電子工作・IoTの力で少しでも快適に過ごせるヒントに慣ればと思います。このブログを読んだ社員の人で電子工作/IoTに興味がある方はお気軽にメンバーまで連絡をいただければです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220404a/bulb-gffed9c0de_640.png&quot; alt=&quot;&quot;  width=&quot;600&quot; height=&quot;640&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
    <category term="IoT" scheme="https://future-architect.github.io/tags/IoT/"/>
    
    <category term="Future電子工作部" scheme="https://future-architect.github.io/tags/Future%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C%E9%83%A8/"/>
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>アジャイル開発を2年弱実践した開発者目線で語るアジャイルソフトウェア開発 2（日常編）</title>
    <link href="https://future-architect.github.io/articles/20220401a/"/>
    <id>https://future-architect.github.io/articles/20220401a/</id>
    <published>2022-03-31T15:00:00.000Z</published>
    <updated>2022-04-01T03:34:51.423Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自己紹介"><a href="#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h1><p>2018年4月新卒入社、TIG所属の関です。<br>アジャイルソフトウェア開発をテーマに不定期で記事を書いており、今回はその第2弾です。</p><p>過去記事はこちら</p><ul><li><a href="/articles/20220106a/">アジャイル開発を2年弱実践した開発者目線で語るアジャイルソフトウェア開発</a></li></ul><p>今回は、「日常編」と題して、 <strong>アジャイルソフトウェア開発において普段行われていること</strong> をテーマにします。未経験の人が実際の開発現場をイメージできるように、私のチームでの典型的なやりとりや、具体例を厚めに取り入れました。</p><p>当社では私以外にもアジャイル開発に取り組んでいるメンバーもおり、そこで得た知見は<a href="/articles/20211117a/">JFPUGオープンセミナー2021 DX時代のプロジェクトのあり方で登壇しました</a>などの<a href="/tags/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB/">アジャイル</a>タグのついた過去記事で取り上げられております。アジャイルはチームを単位として機能し、各々のチームが置かれた状況によってアプローチも変わってくるため、見比べてみても面白いかもしれません。</p><h1 id="前回のおさらい"><a href="#前回のおさらい" class="headerlink" title="前回のおさらい"></a>前回のおさらい</h1><p><a href="/articles/20220106a/">前回の記事</a>では、近年注目を浴びているアジャイルソフトウェア開発の起源と定義について触れました。ここでおさらいも兼ねて少しまとめておきます。</p><p><a href="http://agilemanifesto.org/iso/ja/manifesto.html">アジャイルソフトウェア開発</a>と<a href="http://agilemanifesto.org/iso/ja/principles.html">その原則</a>によると、アジャイルソフトウェア開発とは、下記の価値観に基づくソフトウェア開発でした。</p><ul><li>個人と対話</li><li>動くソフトウェア</li><li>顧客との協調</li><li>変化への対応</li></ul><p>大まかに内容をまとめると、次のようになると思います。</p><ul><li>顧客、開発者、ステークホルダのコミュニケーションによる信頼関係と協力関係を重んじる。</li><li>ビジネス側と開発者からなるチームは互いを尊重し、仕事を完遂するための適切な権限与え、責任をはたす。</li><li>現在わかっている全ての情報を、プロセスや計画にフィードバックし続けることで、改善と変化への対応を継続的に実施する。</li><li>最終成果物であるソフトウェアが利用され、継続的に価値を与え続ける状態を目指し、維持する。</li><li>直接的に問題を解決するシンプルなプロセス、設計を良しとし、無駄は徹底的に省く。</li></ul><p><strong>管理や技術面だけでなく、人間的な側面にも大きな価値を置いている</strong> というのがウォータフォールを含むフェーズ型プロセスとの大きな違いとわかるでしょう。</p><p>これらの考え方について、より詳しく知りたい方はケントベックの<a href="https://www.ohmsha.co.jp/book/9784274217623/">エクストリームプログラミング</a>が詳しいので参照してみると良いかと思います。</p><p>この記事では、アジャイルソフトウェア開発を具体的にイメージするため、普段どのように開発を進めているのかを説明しようと思います。</p><h1 id="アジャイルソフトウェア開発の進め方の概要"><a href="#アジャイルソフトウェア開発の進め方の概要" class="headerlink" title="アジャイルソフトウェア開発の進め方の概要"></a>アジャイルソフトウェア開発の進め方の概要</h1><p>この記事では、アジャイルソフトウェア開発において普段行われている活動をメインテーマとして取り上げますが、その前により大きなスパンでの流れを見てみましょう。大まかに下記の流れで進みます。<br><img src="/images/20220401a/agile-overview.drawio.png" alt="agile-overview.drawio.png" width="901" height="871" loading="lazy"></p><ol><li>「ビジネス側」と呼ばれる人たちが、 <strong>誰の、何の課題を解決するのか？</strong> を明確化します。この際、具体的な手段は後で検討するため必要以上に踏み込まないようにします。そして、経営層含む関係者に説明した上で予算などの必要リソースを調達します。</li><li>開発者を集めて、チームを結成し、1で明確化した 「誰の、何の課題を解決するのか？」 を共有します。ビジネス側の人もチームの一員です。</li><li>やりたいことを、 <strong>ストーリ</strong> ないし <strong>プロダクトバックログ</strong> と呼ばれる単位に分割します。（以降、 <strong>プロダクトバックログ</strong> と呼ぶことにします。）</li><li>ビジネス的な価値に基づき、プロダクトバックログを優先度付けして、四半期等長めのスパンの計画を立てます。</li><li>この計画を元に、 <strong>スプリント</strong> ないし <strong>イテレーション</strong> と呼ばれる一定期間ごとに区切られた開発活動を行います。（以降、 <strong>スプリント</strong> と呼ぶことにします）チームが普段行う活動はこれになります。</li><li>一連の開発活動のどこかで、ソフトウェアの利用開始に必要なプロダクトバックログが揃います。これ以降の早いタイミングで利用が開始され、具体的な価値を受け取れるようになります。</li><li>計画は実態に合わせて更新され、目的が達成されるか予算が尽きるまで開発を行います。</li></ol><h2 id="フェーズ型プロセスとの違い"><a href="#フェーズ型プロセスとの違い" class="headerlink" title="フェーズ型プロセスとの違い"></a>フェーズ型プロセスとの違い</h2><p>ウォータフォールのようなフェーズ型プロセスとの大きな違いは次の2つです。</p><ul><li>利用開始タイミング</li><li>作業の進め方</li></ul><h3 id="利用開始タイミング"><a href="#利用開始タイミング" class="headerlink" title="利用開始タイミング"></a>利用開始タイミング</h3><p>最終工程の完了を持って利用を開始するフェーズ型プロセスと異なり、アジャイルは <strong>優先度の高いものから一連の開発サイクルを回して実装を進め、可能な限り早いタイミングで利用を開始します。</strong></p><p>「アジャイルを使うと高速な開発ができるようになる」といった言説の真の意味がこれです。<br><strong>アジャイルを使うと開発のスループット（単位時間当たりの開発量）が増えるのではありません。</strong> アジャイルでは、現実に基づくフィードバックを活用し、価値を受け取るために必要なことを継続的に捉え続けます。これにより、不要なものを作らない、不要なことをしないようにします。その結果、利用開始タイミングが早まります。</p><p>実際のところ、（利用されるかどうかは別として）単純なコード行数という意味でのスループットは、フェーズ型のプロセスの方が大きくなる可能性があります。アジャイルではチームの人数をあまり増減させないのに対して、フェーズ型のプロセスは開発フェーズに大量に人員を投下し並列で開発を進めるためです。前工程の成果物の質が高く、過不足を十分に抑えられ、最低限の利用開始に必要な機能が多い場合は、フェーズ型も有効なアプローチということです。</p><p>一方でアジャイルが重視しているのは、 <strong>利用を開始して価値を受け取るタイミングを早め、フィードバックを受け取れるようにすること</strong> です。フィードバックを活用することで、無駄な開発物を減り、コンパクトだが変化に強く価値のあるプロダクトが生まれ、その状態を維持することで継続的に価値を提供します。</p><h3 id="作業の進め方"><a href="#作業の進め方" class="headerlink" title="作業の進め方"></a>作業の進め方</h3><p>次の大きな違いは、フェーズが進むと前工程に戻ることはないフェーズ型に対して、アジャイルでは <strong>プロダクトバックログに必要なすべての作業がオンデマンドで継続的に行われる</strong> ということです。</p><p>具体的には、設計が挙げられるでしょう。フェーズ型における設計で重視されるのは、「開発コストを下げること」にあるでしょう。そのために、要求仕様をソフトウェアに確実に変化させるために必要な概念を洗い出し、リスクを下げ、実装者にその内容と構造を伝えるための文書を作ります。このため、仕様、設計は凍結されるべきものであり、変更は手戻りとなるため、よしとされません。「納期までに全てのフェーズを完了させること」が至上命題であるため、開発済みのコードの変更もよしとされません。</p><p>一方、アジャイルでは、 <strong>ソフトウェアを構成する要素が有益に関連した構造を生むことで、変化に強い状態が継続的に維持されていること</strong> を重要視します。このため、設計は実装の前段階だけで行われる活動ではありません。実装により分かった情報をフィードバックすることで設計を改善することもあります。最善の方法がわからない場合、いくつかのプロダクトバックログを実装し、その結果を踏まえて再検討を行い、設計に反映させていきます。</p><h1 id="スプリントにおける活動"><a href="#スプリントにおける活動" class="headerlink" title="スプリントにおける活動"></a>スプリントにおける活動</h1><p>このセクションでは、前節に記載した流れのうち、5の「スプリント内でどのような活動を行なっているのか」を説明します。開発がどのように進んでいくのかの実際のイメージが湧くようになるはずです。</p><p>1から4のプロジェクト開始の準備については、後日取り上げたいと思います。</p><h2 id="用語説明"><a href="#用語説明" class="headerlink" title="用語説明"></a>用語説明</h2><p>特有の用語が多く出てくるために、ここで説明をしておきます。</p><ul><li>スプリント<ul><li>アジャイルソフトウェア開発において進捗を測る際に用いる固定した期間のこと。<ul><li>1週間 or 2週間で固定することが多い。</li></ul></li><li>この単位で成果物を届け、計画から成果物の披露、反省までのフィードバックサイクルを回す。</li></ul></li><li>プロダクトバックログ<ul><li>プロジェクトで開発するソフトウェアを、ユーザ視点で切り分けた機能のこと。<ul><li>「ストーリ」、「フィーチャ」と呼ばれることもある。</li></ul></li><li>どのような背景で、誰が何をするのかがユーザ視点で書かれているのが特徴。<ul><li>「誰々が何々できる。その背景はxxxだからだ。」といった形式の簡潔なものになる。</li><li>一般的な機能一覧に記載されるような詳細な説明は必要になるまで保留されるため書かない。</li></ul></li><li>ビジネス側はプロダクトバックログに優先度をつけて管理する。<ul><li>優先度の高いものから順番に実装を進め、並行着手は最低限にする。</li><li>優先度は主に下記の観点で設定すると良い。<ul><li>価値が高いもの。</li><li>リスクが大きいもの。</li><li>効率化が見込めるもの。</li></ul></li></ul></li></ul></li><li>スプリントバックログ<ul><li>スプリント内で実施するアクションのリスト。</li><li>各アクションは、半日から2日程度で実施できる単位になるまで分解する。<ul><li>プロダクトバックログが小さい場合はそのままスプリントバックログになる。</li><li>そうでない場合は、プロダクトバックログを分解して複数のスプリントバックログを作る。<ul><li>「分割を行うこと」自体をスプリントバックログにすることもある。</li></ul></li></ul></li></ul></li></ul><h2 id="スプリントの進み方"><a href="#スプリントの進み方" class="headerlink" title="スプリントの進み方"></a>スプリントの進み方</h2><h3 id="大まかな流れ"><a href="#大まかな流れ" class="headerlink" title="大まかな流れ"></a>大まかな流れ</h3><img src="/images/20220401a/image.png" alt="image.png" width="1200" height="383" loading="lazy"><p>私のチームが行っている活動を例にして、大まかな流れを説明した後、個別にどんな内容が行われるのか解説します。これはあくまで例であって、各々のチームの都合により部分的に入れ替えたりしても良いと思います。スプリントは次の流れで進みます。（）内は私の所属するチーム内で使っている略称です。</p><ol><li>Refinement(リファインメント)</li><li>Planning（プランニング）</li><li>Daily（デイリー）× スプリントの日数</li><li>Review（レビュー）</li><li>Retrospective（レトロ）</li></ol><p>RefinementとPlanningがスプリントの準備段階です。Refinementでは、前スプリントで明らかになった情報と現状を踏まえて、ビジネス側と開発者の認識合わせ、計画の修正、Backlogの優先度見直しと次スプリントの内容の決定をします。その後、Planningにて開発側にて、Planningで追加されたBacklogの詳細見積もりを行い、最終的な目標を決定の上、ビジネス側に報告します。</p><p>その後、日々の開発作業がスタートします。毎朝決まった時間でDailyと呼ばれる会議を開きます。ここでは、前日何をやったのか？困っていることはないか？今日何やるのか？といった進捗の管理などを行い、日々の作業を開始します。</p><p>スプリントの終わりがReviewとRetrospectiveです。Reviewでは、そのスプリントの成果をチーム + ステークホルダに報告します。フィードバックがもらえた場合は記録し、次のRefinementでアクションを決めます。Retrospectiveは大雑把に言えば反省会です。振り返りのフレームワークなどを使い、良かったところや改善できるところをチーム全員で話し合い、次のスプリントに繋げます。</p><p>ここからは、各々の会議について詳細を見ていきます。</p><h2 id="Refinement"><a href="#Refinement" class="headerlink" title="Refinement"></a>Refinement</h2><h3 id="目的と参加者"><a href="#目的と参加者" class="headerlink" title="目的と参加者"></a>目的と参加者</h3><p>この会議の目的は、 <strong>現状分かっているすべての情報を計画にフィードバックして精度を上げたり、実現可能なものに改善すること</strong> です。アジャイルソフトウェア開発における計画とは、大雑把な見積もりと優先度がついたバックログのリストとそれを元に設定した対応スコープです。なので、必要なことが判明した新たなバックログを追加したり、既存のバックログの優先度を見直したりします。</p><p>会議の参加者は、「ビジネス側 + 開発者」で構成される全チームメンバです。必要に応じて、チーム外のステークホルダを一時的に呼ぶこともあります。会議のファリシリテータはビジネス側が担当します。これは、会議の目的が、計画の管理と、プロジェクトを方向性をより現実的なものにすることというビジネス側が担当するべき、ものだからです。</p><h3 id="アジェンダ"><a href="#アジェンダ" class="headerlink" title="アジェンダ"></a>アジェンダ</h3><p>アジェンダは次のようなものになります。</p><ul><li>前スプリントでもらったフィードバックをどのようなアクションにつなげるのか。</li><li>ビジネス側で外部チームや組織とのやり取りで明らかになった情報の共有。</li><li>開発側で前スプリントで明らかになった、リスクや実施が必要なアクション、改善提案の共有。</li><li>上記明らかになった情報を元にして、詳細未定だったバックログに対する追加の議論。</li><li>計画のアップデート</li></ul><p><strong>双方で分かった情報をチーム全体に共有し、チーム内に存在するあらゆる知見をもって議論を進めます。</strong> 隠し事はなしです。ビジネス側は見積もりを抑えるために要件を小出しにしたりするようなことは許されず、開発側は失敗、わからないこと、進捗の遅れを隠蔽することは許されません。これらは、信頼関係の崩壊につながる邪悪で許されない行為だということをチーム全員が認識しておきましょう。不手際は双方で起こり得るため、思ったように進まず厳しい状況になることもありますが、すべてを白日の元にさらし、真実に目を向けて、チームとして解決策を模索します。</p><h3 id="プロダクトバックログについての議論の流れ"><a href="#プロダクトバックログについての議論の流れ" class="headerlink" title="プロダクトバックログについての議論の流れ"></a>プロダクトバックログについての議論の流れ</h3><p>プロダクトバックログはいくつかに分類できます。</p><ul><li>完全に新規である程度の規模の開発が必要なもの。</li><li>既存機能の流用で実装できるもの。</li><li>フィードバックに基づく軽微な改善。</li><li>etc.</li></ul><p>完全新規の場合が最も難しいため、この時の典型的な流れを具体例として見てみましょう。初期段階では次のようなやりとりがなされることが多いです。</p><ul><li>ビジネス側: 「このプロダクトバックログはどれくらいでできそうですか？」</li><li>開発側: 「完全新規なため単位が大きすぎるのと前提条件が不足しているため見積もれません。前提条件を揃えることから始めませんか？」</li><li>ビジネス側: 「わかりました。ビジネス側からはこの辺りの情報集めて連携すれば良いですか？」</li><li>開発側: 「性能などの非機能の検討で必要なので、追加でxxxも調べて連携して欲しいです。後、yyyあたりの技術を使うことになりそうですが、チーム内でわかる人がいないので、調査しないとわからないです。」</li><li>ビジネス側: 「わかりました、調査用のスプリントバックログ用意します。具体的な目的と受け入れのための要件を設定しましょう。」</li><li>開発側: 「ありがとうございます。次回、ビジネス側とこちらで分かった情報を合わせて、再度議論ですね。yyyについては、zzzのあたりを中心に調べれば良いと思います。大体aa日くらいかかるイメージですかね。」</li><li>（以下、スプリントバックログの詳細議論へ。。。）</li></ul><p><strong>ビジネス側も開発側も、実装に必要な情報や知見がすべて集まっていることは極めて稀といって良いです。</strong> そのため、完全新規のプロダクトバックログの実装にあたってはこのような感じで、前提条件を出すためのスプリントバックログを設定します。この試みは、「スパイク」と呼ばれることもあります。その後の典型的な流れとしては、前提条件を元にプロダクトバックログを、1日から2日で実施可能なレベルのスプリントバックログに分解します。この分解自体が一仕事である時は、状況に応じて「分解そのもの」を目的にしたスプリントバックログを実施したりもします。スプリントバックログが出揃ったら本格的な実装開始になります。</p><p>私のチームでは次のような感じで実装を進めることが多いです。まず、初期ではハリボテレベルの実装でも良いのでとにかくデプロイ可能な状態にもっていきます。その際、インフラなどの設定も可能な限り行い、可能な限り早く統合された状態にします。そして、詳細実装は後回しにした上で骨組みとなるクラスや関数を仮実装で作成し、各々のクラスや関数がテストしやすい状態になったのを確認して、リスクの高い部分から各々テスト駆動で実装します。最後に、再度全体確認してあるべき設計になっているなら完成とします。この流れで、1日から2日で終わるようにスプリントバックログを設定するイメージです。この一連の流れがうまくいけば、その時点で最善の設計になっている最優先の機能が実装されたプロダクトが出来上がります。</p><p>統合を早め、テスト駆動で行うことにより、失敗のリスクを可能な限り前倒しにすることで、コストの削減を狙っています。</p><p>完全新規ではなく、既存の機能の流用やフィードバックを元にした改善のようなバックログはここまで大袈裟にはなりません。プロダクトの設計があるべき姿になっており、前提を覆すような内容が含まれていなければ、この手の変更は1回のスプリントでも複数実施できることも多いです。アジャイルの目標とする「変化対応力」の高いソフトウェアが構築されている場合、既存機能をうまく組み合わせるだけで価値が創出ることもあり、次第に開発が加速する感覚が得られることもあります。逆に、変更するたびにかかる時間が増えている場合は設計があるべきではないのかもしれません。時間をとって考察する時間が必要になるでしょう。</p><h3 id="スプリントバックログの選び方"><a href="#スプリントバックログの選び方" class="headerlink" title="スプリントバックログの選び方"></a>スプリントバックログの選び方</h3><p>スプリントバックログはどのように選べば良い良いのでしょうか？<br>まずは、最優先のプロダクトバックログに紐づくもののうち、 <strong>価値に直結するもの、リスクの高い部分をより最優先に選択します。</strong> ただし、全てをそのプロダクトバックログから選ぶのはお勧めしません。アジャイルにおける計画は「ありうる未来」にすぎず、「保証されるもの」ではありません。このため、 <strong>現実に即した計画にするためには、 ある程度のゆとりを持たせる必要があります。</strong> ゆとりを持たせるためには、「そんなに優先度は高くないけど、確実にメリットはある」ようなアクションを入れると良いです。具体的には、開発環境の改善や、作業の自動化、スキル向上を目指す勉強会などのチームとしてのステータス向上を行う施策です。この工夫を行うことで、チームの生産性向上を行いながら、継続的にプロダクトを届ける流れが生まれます。恒常的に効果を発揮するような施策も多いので、黎明期は意図的に増やした方が良いと考えられます。20%程度はステータス向上に使えると理想的と思います。</p><p>また、アジャイルソフトウェア開発で重視される価値として、 <strong>チームの自律性</strong> があります。その際に大切なのは、詳細やHowにばかり目を向けるのではなく、 <strong>バックログの背景、つまり「なぜそれが必要となるのか？」に目を向け続けることです。</strong> 背景や理由がわかれば、優秀なチームは自律的に方針を考案し、実施し、その結果を元にさらなる解決策を導き出すでしょう。これらは、ビジネス側が積極的に発信し、開発側はそれにしっかりと耳を傾ける必要があります。</p><h2 id="Planning"><a href="#Planning" class="headerlink" title="Planning"></a>Planning</h2><h3 id="目的と参加者-1"><a href="#目的と参加者-1" class="headerlink" title="目的と参加者"></a>目的と参加者</h3><p>この会議の目的は、 <strong>スプリントバックログを効率的な進め方を検討しながらさらに細かいタスクに分割し、詳細見積もりを実施して、今回のスプリントの目標を設定すること</strong> です。</p><p>参加者は開発者全員で、ビジネス側の方は参加しません。これは、見積もり権限を持つのは開発者のみで、ビジネス側はその見積もりに対して口出しすることはできないためです。ビジネス側に許されているのは、提示されたコストを元に、バックログの優先度を入れ替えるか、開発者をクビにして交代するかのどちらかです。</p><h3 id="会議の進め方"><a href="#会議の進め方" class="headerlink" title="会議の進め方"></a>会議の進め方</h3><p>この会議の進め方は、チームが採用しているタスクの割り当て方法によって異なると思います。重要な原則は、 <strong>実際にタスクを行う人が見積もり、他の人はより効率的に進めるための進め方のアドバイスのみを行う</strong> ということです。我々のチームでは、「手空きの人が最優先のバックログの空きタスクを取る」という方式を基本方針としているため、見積もりは典型的なレベルの人が実施したケースを想定した全員の投票制で行っています。ただし、最近では利用技術が幅広くなってきた状況から、ある程度の分担が生まれているため、実際にタスクを実施する人のみ投票するといった方式も取り入れています。杓子定規に考えるのではなく、実情に合わせて原則が守られるようにするのが良いと思います。</p><p>見積もりが終わったら、ビジネス側に連絡し、OKだったらそのままスタート、ビジネス側の想定よりもコストが高い場合は優先順位入れ替えなどが発生します。この時、ビジネス側に許されるのは <strong>コストがかかる理由の説明を受けること</strong> と、 <strong>優先順位を入れ替えること</strong> のみです。 説明を受けて、作業の進め方の工夫を提案することはできますが、<strong>見積もりが高いからという理由のみで下げるように要求することはできません。</strong></p><h3 id="見積もり精度についての考え方"><a href="#見積もり精度についての考え方" class="headerlink" title="見積もり精度についての考え方"></a>見積もり精度についての考え方</h3><p>見積もりの精度ですが、チーム結成初期はハッキリ言って適当です。そもそも、見積もりが正確に機能するには次のような前提が揃う必要があります。</p><ul><li>プロセス、実施内容が標準化され、明確に定まっている。</li><li>作業者間の差異が十分に小さいか、最終的に平均値に落ち着くことが期待される程度に期間や実施数が大きい。</li><li>信頼可能な実データに基づいている。</li></ul><p>これらの前提は全て満たされていません。つまり、見積もりを行ったとしてもその正確性には根拠がありません。</p><ul><li>プロセスは定められていますが、実施内容の詳細の決定は実施直前まで戦略的に延期されます。</li><li>チームは少人数です。そして、開発者の能力のバラつきは極めて大きく、10倍以上差があることもザラです。<ul><li>開発者一人に注目しても、得意分野とそうでない分野の差は極めて大きいです。</li></ul></li><li>チーム結成時にはデータが存在しません。</li></ul><p>これらに加えて、次の理由からも正確な見積もりはそもそも不可能です。</p><ul><li>人間は（能力の低い分野において特に）自己の能力を過大評価する傾向にある。<ul><li><a href="https://ja.wikipedia.org/wiki/%E3%83%80%E3%83%8B%E3%83%B3%E3%82%B0%EF%BC%9D%E3%82%AF%E3%83%AB%E3%83%BC%E3%82%AC%E3%83%BC%E5%8A%B9%E6%9E%9C">ダニング=クルーガー効果</a>としてよく知られている現象です。</li><li>「できる」の基準は主観的なもので、実際に働いて成果を出すまで信用できません。<ul><li>「Aさんの”完全に理解した” &lt;&lt; Bさんの”チョットデキル”」は頻繁に起きます。</li><li>これに伴い、想定外の教育コストが発生することがあります。</li></ul></li></ul></li><li>タスクの所要時間、品質は、担当者、チームの能力に大きく左右される。<ul><li>シニアとジュニアでは10倍以上の差があることはザラと思っておいた方が良いでしょう。</li></ul></li><li>チーム黎明期は見ず知らずのメンバーも多い。</li></ul><p>このため、アジャイルソフトウェア開発においては、 <strong>スプリントごとに計画と実績を比較し、フィードバックを活用することで見積もり精度を向上させる</strong> アプローチをとります。計画は、「一度立てたら遵守する」という固定的なものではなく、「毎週振り返りにより改善することで実態を表すもの」へと役割を変えています。ビジネス側も開発側も、前回の予実を元に、次の計画を改善するように振る舞うようにします。</p><p>また、チーム結成初期は適当だった見積もりも、「このチームでやるとしたらこんなものかな？」という「おおよその感覚」ができてきます。そのような状態までいくと、未経験分野についても過去の流れを参考にして「だいたいこの程度の範囲に収まりそう」といった見積もりができるようになってきます。</p><h2 id="Daily"><a href="#Daily" class="headerlink" title="Daily"></a>Daily</h2><h3 id="目的と参加者-2"><a href="#目的と参加者-2" class="headerlink" title="目的と参加者"></a>目的と参加者</h3><p>この会議の目的は、 <strong>前日までの進捗の確認と、チームの力を借りた効率化、その日の予定を立てること</strong> です。</p><p>参加者は開発者全員で、ビジネス側の方は任意で、基本的に参加しません。確実に全員集まるタイミングであるため緊急の相談などの際に参加することがあります。</p><h3 id="他メンバーとの連携"><a href="#他メンバーとの連携" class="headerlink" title="他メンバーとの連携"></a>他メンバーとの連携</h3><p>この会議で大切なのは、 <strong>アウトプットを出すために、いかにして他メンバーの力を有効活用するか</strong> です。一部のメンバーに仕事が偏るのはダメですが、最終的にはチームとしてアウトプットを出すので、効率よく進めるために他メンバーを有効活用は推進するべきことです。</p><p>例えば、タスクを効率よく進められるように、取り組む前に、以前その機能を担当していたメンバーからインプットをもらう段取りをします。また、タスクを進めるうちに、「これ、有識者いるのでは？」や「自分の力では無理そう。。。」といったことが起こります。そのような際には、この場で打ち上げて、他メンバーの力を借りたり、あるいは要員交代でより強力なメンバーに入ってもらったりといった対策が取られることになります。</p><p>このように、直接的な知見を求める他、参考になる情報を知っていないか、複数人いると効率化されるタスクへの応援を求める、といった工夫が実施されることもあります。</p><p>悩ましいのが、負担が偏りがちになることです。一般に、開発者のレベルは経験年数、学習速度、学習への熱意等の要因でかなりのバラつきを見せます。他メンバーのヘルプで優秀な開発者の時間が潰れると、高難易度タスクが進まなくなったり、不満が溜まったりといった弊害が発生します。そのため、効率良い学習方法をプロジェクトの資産として事前に残して自己解決できるようにしたり、直近で同様の対応を行ったメンバーが復習も兼ねて指導したり、といった工夫も必要です。</p><p>また、チーム内に必要なスキルが足りている人が圧倒的に不足していることが判明するといったトラブルも出てきます。その際には、とりあえず対処できそうなメンバーをぶつけて片付けた後、RetrospectiveやRefinementなどでその旨ビジネス側に打ち上げ、別途講義や勉強会を行ったりといった学習用のスプリントバックログを実施してチームとしてのパワーアップを狙った対策をとります。</p><h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><h3 id="目的と参加者-3"><a href="#目的と参加者-3" class="headerlink" title="目的と参加者"></a>目的と参加者</h3><p>この会議の目的は、 <strong>そのスプリントの成果をチーム内外に向けて発信し、フィードバックを受けること</strong> です。チーム外への発信はもちろん、チーム内で他メンバーが当たっていたスプリントバックログの成果も確認し、全員の認識の一致も確認します。</p><p>参加者は、ビジネス側含むチーム全体に加えて、チーム外ステークホルダです。</p><h3 id="発表の形式"><a href="#発表の形式" class="headerlink" title="発表の形式"></a>発表の形式</h3><p>私のチームでは、まず最初に、ステークホルダと面識のあるビジネス側が今回のスプリントのテーマを含む軽い導入を行った後、開発者側がファシリテートする形式で進行しています。</p><p>発表の形式はチームや参加者に合わせてカスタマイズするのが良いと思います。ですが、「ソフトウェアを開発し価値を得ること」が目的なので、準備に時間をかけすぎるのは本末転倒です。できるだけ簡略に行うようにします。時間のかかるきれいな図やスライドは用意せず必要最小限の簡潔なものに留めます。説明事項を箇条書きにしたWikiを見せつつ開発物のデモを行ったり、準備が主目的のスプリントバックログの場合はその成果報告と今後の展望を共有します。開発チームが出す成果物は「動くソフトウェアとそれから得られる価値」であり、断じて「見栄えがよくかっこいい資料」ではありません。このことを参加者全員に周知し、決して忘れないようにします。</p><h3 id="参加者からフィードバックを受けたら"><a href="#参加者からフィードバックを受けたら" class="headerlink" title="参加者からフィードバックを受けたら"></a>参加者からフィードバックを受けたら</h3><p>この会議で得たフィードバックは <strong>ビジネス側の責任で記録、管理します。</strong> そして、その後のRetrospectiveやPlanningで議題にあげて、次のアクションを検討します。開発側ではなく、 ビジネス側がフィードバック内容を管理するのは <strong>ビジネス側がプロジェクトの方向性に関する責任を負っている</strong> からです。フィードバックの内容によっては、コストメリットが薄すぎるなどの理由で却下することもありますが、基本的には前向きに対応する方向で進むことが多いです。</p><h2 id="Retrospective"><a href="#Retrospective" class="headerlink" title="Retrospective"></a>Retrospective</h2><h3 id="目的と参加者-4"><a href="#目的と参加者-4" class="headerlink" title="目的と参加者"></a>目的と参加者</h3><p>この会議の目的は、 <strong>スプリントの進み方を振り返り、次のスプリントをより良いものにするための自主的なフィードバックをすること</strong> と、 <strong>自他の活躍について承認することで信頼関係をより確かにすること</strong> です。改善だけでなく、各人のチームへの貢献を承認し、信頼関係、協力関係をより強固なものにするというのが、一般的な反省会との違いになるかなと思います。</p><p>参加者は開発者全員で、ビジネス側の方は任意とすることが多いようです。私の所属するチームではビジネス側の方も積極的に参加してくださっています。直接対面していないステークホルダからのフィードバック共有や、翌日のRefinementの頭出しを含むコミュニケーションができるため個人的には参加していただくのは良いことだと思っています。</p><h3 id="進め方"><a href="#進め方" class="headerlink" title="進め方"></a>進め方</h3><p>振り返りのフレームワークを使うと良いでしょう。よくあるのだと、<strong>Fun/Done/Learn</strong> や <strong>KPT</strong> などがあるでしょう。私の所属するチームでは、他者への承認が行いやすいため、Fun/Done/Learnを使うことが多いです。散々な結果に終わり、KPTを使うこともあります(笑)。</p><h3 id="改善系の議題"><a href="#改善系の議題" class="headerlink" title="改善系の議題"></a>改善系の議題</h3><p>改善系の具体的な内容だと、「一部のメンバーに負担が偏っていたり、ボトルネックになってしまっている場合に、その状況を緩和するにはどうするか考える」といったものがあります。特定のスキルがその人にしかないのであれば、「それを獲得する方法を整理し、他メンバーに習得させる」、「そのメンバーは誰でもできるタスクを実行せずに他メンバーに依頼できるようにする」といった対策が取れるでしょう。</p><h3 id="メンバーの貢献に対する承認"><a href="#メンバーの貢献に対する承認" class="headerlink" title="メンバーの貢献に対する承認"></a>メンバーの貢献に対する承認</h3><p>信頼関係、協力関係のために、まず最初にやるべきなのは、 <strong>誰かのアイデアがより良い解決策に繋がったり、予想以上の成果をあげる場面があったら、承認すること</strong> です。アイデアにより問題が驚くほど簡単に解決したり、実はそもそも問題ではないことに気づくといった場面は時折あります。仮に、他の人からすると大したことない成果であっても、その人に対する期待を上回っていたら、承認するのが良いでしょう。自分のアイデアがチームをより良い方向に導きそれが認められるというのは、大半の人にとって明確な成功体験であり、それを承認することはその人にとっても、他のメンバーにとっても良い影響を与えます。</p><p>ヘルプの可視化をしても良いでしょう。その際は、ヘルプを受けた人はヘルプしてくれた人に対して感謝の意を述べ、ヘルプした人は相手の成長に気がついた場合はそれを承認し、改善点があればフィードバックしたりします。ヘルプする側の負担はそれなりにあるため、その間はその人の進捗は止まります。ですが、このやりとりにより埋れがちな他者へのフォローは他の人にも見えるようになります。また、ヘルプされた側の基礎体力があるなら、その知見を吸収できるはずです。次回以降はその人も有識者として扱えることがチーム全体に共有されるなどの効果も見込めます。</p><p>あくまで、 <strong>良い行いを承認し信頼関係・協力関係を育むこと</strong> が目的です。チームメンバーは互いに対等であるため、忖度する必要はなく、無理やり捻りだす必要もないです。これらは信頼や協力とは対局にある態度です。</p><h3 id="失敗の共有"><a href="#失敗の共有" class="headerlink" title="失敗の共有"></a>失敗の共有</h3><p>その他だと、自己のやらかしや失敗を共有するというのがあります。未知の領域を扱う場合、 <strong>最初は無知やしょうもないミスが原因となり、ある程度のロスが発生するのは避けることができません。</strong> ある程度の失敗を踏み抜いて初めて安定は得られます。このような失敗の共有は、他の人が同じミスをしないようにしたり、有識者として認識してもらうことで他チームメンバーのロスを軽減につながる可能性につながります。個人的には、単独なんでもできる人こそ、この手の共有をやるべきと考えています。他の人から見ると初めから全部できるように見える人も、単にドキュメントをしっかり読んでいるだけだったり、トライアンドエラーが凄まじく早いだけだったり、しょうもないミスで時間使ったりしているものです。単独でも成果を上げられる人は、他メンバーのフォローを行う機会も多く、一方的に持ち出しているような感覚に陥りがちです。これらの経験を共有し、他の方にもできる気にさせたり、あるいは他の方に自分も手伝えるかもと思ってもらえたりでき、他の方からも協力を得やすくなるかなと思います。</p><p>ちなみにですが、これらの失敗を共有が反省会でなされている場合、露骨に同じ失敗を繰り返している場合を除いて糾弾はしない方が良いです。糾弾された側からすると、そのようなリスクをとる意味は全くないので、同じ試みは二度と行われません。有力なメンバーの協力が得られなくなることはプロジェクトの死に直結します。</p><h3 id="雑談"><a href="#雑談" class="headerlink" title="雑談"></a>雑談</h3><p>「ワクチン3発目打った、体調崩れてキツかった！みなさんはいつ受ける？」「こんな勉強した！」みたいな本題には関係ない雑談をすることもあります。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>この記事なかなか書き終わらないなと思っていたら、原稿用紙30枚分以上の大作になっていました。ここに記載した内容は、現在も実際に活動しているアジャイルソフトウェア開発チームの日常を、そのメンバーが記載したものです。アジャイルソフトウェア開発がどのように進むのかについて、具体的なイメージを抱くには十分なボリュームになっていると思います。</p><p>この記事が、未経験の方のアジャイルソフトウェア開発の具体的イメージにつながり、誤解によるアジャイルプロジェクトの失敗を防ぎ、ひいては成功につながると嬉しいなと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;自己紹介&quot;&gt;&lt;a href=&quot;#自己紹介&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="DevOps" scheme="https://future-architect.github.io/categories/DevOps/"/>
    
    
    <category term="アジャイル" scheme="https://future-architect.github.io/tags/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB/"/>
    
  </entry>
  
  <entry>
    <title>FutureTechNight#20 Stateの分割戦略 〜ModulesとWorkspacesを利用して〜</title>
    <link href="https://future-architect.github.io/articles/20220331a/"/>
    <id>https://future-architect.github.io/articles/20220331a/</id>
    <published>2022-03-30T15:00:00.000Z</published>
    <updated>2022-03-31T03:09:57.175Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。TIGの伊藤太斉です。<br>今回は2022/2/17に開催したFuture Tech Night #20で登壇した内容のサマリと、当日はお伝えしきれなかったことについて触れていきます。</p><h2 id="スライド"><a href="#スライド" class="headerlink" title="スライド"></a>スライド</h2><p>今回の登壇の際のスライドはこちらです。</p><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/b4d6453f61534bffb7ce472ecf87f028" title="20220214_Future Tech Night" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 315px;" data-ratio="1.7777777777777777"></iframe><h2 id="動画"><a href="#動画" class="headerlink" title="動画"></a>動画</h2><p>今回のTech NightのYouTube動画はこちらです。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/fpSAwLWnfFo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TerraformのStateは、これを扱う上で非常に重要な役割を果たします。実際のリソースと、Terraformソースコードとの差異を確認するためにも、リソースをTerraformの管理下とするためにも必要不可欠なコンポーネントになってきます。<br>Stateの管理分掌は</p><ul><li>責任の分かれ目</li><li>管理の分かれ目</li></ul><p>を目指して設計、実装を進めていくことが望ましいと考えています。そのためにState管理はどうあるべきかを考えてみました。</p><h2 id="サマリ"><a href="#サマリ" class="headerlink" title="サマリ"></a>サマリ</h2><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><ul><li>Modulesの原則は共に使うリソース群の「まとまり」であること</li><li>アーキテクチャを踏まえた構成でModulesを構成すること（クラウドサービスごとではない）</li><li>Stateは<strong>単一</strong>になる<ul><li>権限分離はディレクトリごとになる</li><li>ディレクトリ単位でStateが生成されるため</li><li>＝操作する人によってディレクトリを決定づけることができる</li></ul></li><li>サービス群（Modules単位）で設定ができる<ul><li>Workspacesより柔軟にサービスの切り分け、増減が可能になる</li></ul></li></ul><h3 id="Workspaces"><a href="#Workspaces" class="headerlink" title="Workspaces"></a>Workspaces</h3><ul><li>Stateに名前をつけてリソースの管理を分割する機能<ul><li>Terraformでの管理が分かれる</li><li>リソースの依存関係も分けられる</li><li>環境面におけるリソースの差異が少ない時に向いている</li></ul></li></ul><h3 id="組み合わせて使う時場合"><a href="#組み合わせて使う時場合" class="headerlink" title="組み合わせて使う時場合"></a>組み合わせて使う時場合</h3><ul><li>リソースの特性を考えて使い分ける<ul><li>ネットワーキング系リソース<ul><li><strong>Workspaces向きのリソース</strong></li><li>環境によるリソース差異がすくない（レプリケーションで済むため）</li></ul></li><li>コンピュート系・運用系<ul><li>Modules向きのリソース</li><li>環境差異が生まれやすい（数やスペックなど）</li></ul></li></ul></li></ul><h2 id="質問など"><a href="#質問など" class="headerlink" title="質問など"></a>質問など</h2><p>当日いただいた質問の中で改めて回答ができるものについて、こちらで触れます</p><blockquote><p>modulesの例だとLBを2回書かないといけない（service_a, service_b両方分）のが少し手間だなあと思ったのですが、AWSリソース単位ではmoduleを作成しない理由をもう少し詳しくお伺いしたいです</p></blockquote><img src="/images/20220331a/2022_0217_Future_Tech_Night_20.png" alt="2022_0217_Future_Tech_Night_#20" width="960" height="540" loading="lazy"><p>(登壇スライドより引用)</p><p>例えば、service_a、service_bで利用するLBが共にALBであった場合にはひとつのModulesとしても良いかと思いますが、LBの種類が異なるのであればTerraformとして書くパラメータもそれなりに変わるので、サービス単位で包含した方が取り扱う変数が減るため、運用としては簡単になるかと思います。<br>また、LBはバックエンドに何が入るかによって、ある程度扱いが変わることも理由のひとつとなります。</p><blockquote><p>ブランチ戦略について</p></blockquote><p>特段、環境ごとにリリースするブランチを分けて利用は今まで深く考えずに利用していましたが、Modulesのみを利用していた時にはmainブランチ1本で利用をしていました。これは、環境ごと変数を書き込むディレクトリが異なるため、ある程度権限分離までなされるためです。<br>一方、Workspacesであれば、全ての環境で同一のコードを読みに行くので、</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">topic(変更) -&gt; release(検証リリース) -&gt; main(本番リリース)</span><br></pre></td></tr></table></figure><p>とすることもできるかと考えています。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Terraformは誰もがベストプラクティスを探りながら書いたり運用したりしているかと思いますが、組織に合わせた権限分離をすることで、事故の軽減などができるのではないかと考えています。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;こんにちは。TIGの伊藤太斉です。&lt;br&gt;今回は2022/2/17に開催したFuture Tech Night #20で登壇した内容のサマリと、当日はお伝えしきれなかったことについて触れていきます。&lt;/p&gt;
&lt;h2 id=&quot;スライド&quot;&gt;&lt;a href=&quot;#スライド&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="TechNight" scheme="https://future-architect.github.io/tags/TechNight/"/>
    
  </entry>
  
  <entry>
    <title>FutureTechNight#20 TerraformState縛りの勉強会に登壇しました</title>
    <link href="https://future-architect.github.io/articles/20220330a/"/>
    <id>https://future-architect.github.io/articles/20220330a/</id>
    <published>2022-03-29T15:00:00.000Z</published>
    <updated>2022-03-30T01:59:25.472Z</updated>
    
    <content type="html"><![CDATA[<h1 id="勉強会に登壇しました"><a href="#勉強会に登壇しました" class="headerlink" title="勉強会に登壇しました"></a>勉強会に登壇しました</h1><p>こんにちは。<br>TIGの棚井龍之介です。</p><p>2022年2月17日（木）に、Terraform stateをテーマにした勉強会「<a href="https://future.connpass.com/event/237902/">Future Tech Night #20 Terraform State縛りの勉強会</a>」が開かれました。私は後半パートで<strong>クラウドリソース自体をdestroy/createdせずに、Terraformリソース定義の記述場所を変更する方法</strong>について話しました。</p><p>登壇に向けた宣伝文がいい感じに背景を説明しているため、以下に全文を記載します。</p><blockquote><p>クラウドサービス上で稼働するリソースには一切手を付けずに、Terraformの定義記載場所だけを変更する方法を話します。</p><p>Terraformを利用していると「このディレクトリ配置じゃダメだ。配置変えしたいのだけれど、リソースの再作成はできない。次にインフラ設計するときは、〇〇に注意しよう」という運用ナレッジが貯まると思います。スタート時点で完璧なTerraformディレクトリ設計ができれば御の字ですが、それが不可能なことは、この分野でベストプラクティスが確立されていないことにより証明されています。</p><p>本パートでは「Terraformのディレクトリ配置には定石がないのだから、運用状況に合わせて柔軟に配置換えすべき」という観点から、「動作中リソースに影響なく、Terraform定義箇所を移植する方法」について話します。</p></blockquote><p>こういった前提のもと、<strong>terraform state mv pull push</strong> を利用した、Terraformリソースのディレクトリ移動方法を発表しました。</p><p>簡単に内容を説明すると</p><p>①Terraformを運用していると、↓画像のように「.tfファイルの場所を移動」したくなることがあります。何も考えずに移動すると、リソースはdestroy/createdされてしまうのですが、データベースや24/365の稼働要件があるリソースはdestroyすべきではありません。</p><img src="/images/20220330a/Screen_Shot_2022-03-28_at_23.03.47.png" alt="リソースを再作成せずTerraform記述を移動する" width="1200" height="588" loading="lazy"><p>②そんな時は、terraform stateコマンドを活用することで、実リソースに手をつけることなく定義場所のディレクトリ移動ができます。さらに、↓画像のモデルをベースとすれば、リソース操作状況を視覚的にイメージしながら作業ができます。</p><img src="/images/20220330a/Screen_Shot_2022-03-28_at_23.00.36.png" alt=".tfstateの移植操作" width="1200" height="586" loading="lazy"><p>という内容でした。</p><p>「state操作を図で表現する」というのが推しポイントだったのですが、勉強会後のツイートで Terraformの「moved block」という方法を教えて頂きました。実際に使ってみたことろ、terraform mvと同様の操作を、私が勉強会で説明した方法よりも安全に実行できると感じたため、この方法について以下で説明します。</p><h1 id="moved-blockを試す"><a href="#moved-blockを試す" class="headerlink" title="moved blockを試す"></a>moved blockを試す</h1><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>まずは、こちらの記事「<a href="https://future-architect.github.io/articles/20201113/">LocalStackに向けてTerraformを実行する</a>」に沿って環境構築を進めて、ローカル環境でTerraformが操作できるようにします。</p><p>moved blockは <a href="https://github.com/hashicorp/terraform/releases/tag/v1.1.0">v1.1.0</a> により追加された機能のため、Terraformは最新バージョンを入れます。</p><p>私は <a href="https://github.com/tfutils/tfenv">tfenv</a> を利用し、v1.1.7 を入れました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ tfenv install 1.1.7</span><br><span class="line">Installing Terraform v1.1.7</span><br><span class="line">Downloading release tarball from https://releases.hashicorp.com/terraform/1.1.7/terraform_1.1.7_darwin_amd64.zip</span><br><span class="line"><span class="comment">############################################################################################################################################################################################################# 100.0%</span></span><br><span class="line">Downloading SHA <span class="built_in">hash</span> file from https://releases.hashicorp.com/terraform/1.1.7/terraform_1.1.7_SHA256SUMS</span><br><span class="line">No keybase install found, skipping OpenPGP signature verification</span><br><span class="line">Archive:  /var/folders/0r/3y_v9zrd75n9dgv2f0cy6qq40000gn/T/tfenv_download.XXXXXX.qdVCVbhE/terraform_1.1.7_darwin_amd64.zip</span><br><span class="line">  inflating: /Users/tanai3022/.anyenv/envs/tfenv/versions/1.1.7/terraform</span><br><span class="line">Installation of terraform v1.1.7 successful. To make this your default version, run <span class="string">&#x27;tfenv use 1.1.7&#x27;</span></span><br><span class="line"></span><br><span class="line">$ tfenv use 1.1.7</span><br><span class="line">Switching default version to v1.1.7</span><br><span class="line">Switching completed</span><br><span class="line"></span><br><span class="line">$ terraform version</span><br><span class="line">Terraform v1.1.7</span><br><span class="line">on darwin_amd64</span><br></pre></td></tr></table></figure><p>作業用ディレクトリを用意し、以下のようにファイルを配置します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">└── main.tf</span><br><span class="line"></span><br><span class="line">0 directories, 2 files</span><br></pre></td></tr></table></figure><p>今回の動作検証には、Terraform の <a href="https://registry.terraform.io/providers/hashicorp/null/latest/docs/resources/resource">null_resource</a> を利用します。</p><figure class="highlight sh"><figcaption><span>main.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;null_resource&quot;</span> <span class="string">&quot;resource_A&quot;</span> &#123;&#125;</span><br><span class="line">resource <span class="string">&quot;null_resource&quot;</span> <span class="string">&quot;resource_B&quot;</span> &#123;&#125;</span><br><span class="line">resource <span class="string">&quot;null_resource&quot;</span> <span class="string">&quot;resource_C&quot;</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>作業ディレクトリで terraform init / plan / apply を実行して、null_resource を作成します。<br>これにより、stateファイル（<code>terraform.tfstate</code>） が作成されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── main.tf</span><br><span class="line">└── terraform.tfstate</span><br><span class="line"></span><br><span class="line">0 directories, 3 files</span><br></pre></td></tr></table></figure><p>stateファイルを直接覗いて見ると、<br>3つのリソース「resource_A」「resource_B」「resource_C」が作成されていることが分かります。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">$ cat terraform.tfstate</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;terraform_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.1.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;serial&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lineage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ea534414-b327-eee0-bd9c-b6374db37db2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;outputs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;resources&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;managed&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;null_resource&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;resource_A&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;provider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;provider[\&quot;registry.terraform.io/hashicorp/null\&quot;]&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;instances&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;schema_version&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;attributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;592263413744525319&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;triggers&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;sensitive_attributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bnVsbA==&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;managed&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;null_resource&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;resource_B&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;provider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;provider[\&quot;registry.terraform.io/hashicorp/null\&quot;]&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;instances&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;schema_version&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;attributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;5369048601034101090&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;triggers&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;sensitive_attributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bnVsbA==&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;managed&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;null_resource&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;resource_C&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;provider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;provider[\&quot;registry.terraform.io/hashicorp/null\&quot;]&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;instances&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;schema_version&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;attributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3453046184153615927&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;triggers&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;sensitive_attributes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bnVsbA==&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>terraform state list でも、リソース名を確認できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ terraform state list</span><br><span class="line">null_resource.resource_A</span><br><span class="line">null_resource.resource_B</span><br><span class="line">null_resource.resource_C</span><br></pre></td></tr></table></figure><p>以上で準備は完了です。</p><h2 id="moved-blockでリソースを改名する"><a href="#moved-blockでリソースを改名する" class="headerlink" title="moved blockでリソースを改名する"></a>moved blockでリソースを改名する</h2><p>さっそく、moved block を利用して、terraform mv と同様に「リソース名の変更」を実施してみましょう。</p><p>まずは、同一ディレクトリに <code>moved.tf</code> を追加します。</p><figure class="highlight sh"><figcaption><span>moved.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">moved &#123;</span><br><span class="line">  from = null_resource.resource_A</span><br><span class="line">  to   = null_resource.resource_X</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このタイミングで、すぐに terraform plan してみると…</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ terraform plan</span><br><span class="line">null_resource.resource_X: Refreshing state... [<span class="built_in">id</span>=592263413744525319]</span><br><span class="line">null_resource.resource_B: Refreshing state... [<span class="built_in">id</span>=5369048601034101090]</span><br><span class="line">null_resource.resource_C: Refreshing state... [<span class="built_in">id</span>=3453046184153615927]</span><br><span class="line">╷</span><br><span class="line">│ Error: Moved object still exists</span><br><span class="line">│</span><br><span class="line">│   on moved.tf line 1:</span><br><span class="line">│    1: moved &#123;</span><br><span class="line">│</span><br><span class="line">│ This statement declares a move from null_resource.resource_A, but that resource is still declared at main.tf:1,1.</span><br><span class="line">│</span><br><span class="line">│ Change your configuration so that this resource will be declared as null_resource.resource_X instead.</span><br><span class="line">╵</span><br></pre></td></tr></table></figure><p>「<code>null_resource.resource_X</code>に改名しようとしていますが、main.tf には<code>null_resource.resource_A</code>のままで残っていますよ。Terraform の定義を変更してください」</p><p>と、丁寧なエラー文で通知してくれます。<br>terraform state mv でリソースを改名する場合、state操作に集中するあまり、Terraform本体側コードの書き換えを忘れがちですが、moved blockを使うと事前に通知してくれるのが嬉しい。</p><p>main.tf を正しく書き換えて、再度 plan してみます。</p><figure class="highlight sh"><figcaption><span>main.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;null_resource&quot;</span> <span class="string">&quot;resource_X&quot;</span> &#123;&#125; <span class="comment"># renamed resource_A to resource_X</span></span><br><span class="line">resource <span class="string">&quot;null_resource&quot;</span> <span class="string">&quot;resource_B&quot;</span> &#123;&#125;</span><br><span class="line">resource <span class="string">&quot;null_resource&quot;</span> <span class="string">&quot;resource_C&quot;</span> &#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ terraform plan</span><br><span class="line">null_resource.resource_B: Refreshing state... [<span class="built_in">id</span>=5369048601034101090]</span><br><span class="line">null_resource.resource_C: Refreshing state... [<span class="built_in">id</span>=3453046184153615927]</span><br><span class="line">null_resource.resource_X: Refreshing state... [<span class="built_in">id</span>=592263413744525319]</span><br><span class="line"></span><br><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># null_resource.resource_A has moved to null_resource.resource_X</span></span><br><span class="line">    resource <span class="string">&quot;null_resource&quot;</span> <span class="string">&quot;resource_X&quot;</span> &#123;</span><br><span class="line">        <span class="built_in">id</span> = <span class="string">&quot;592263413744525319&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 0 to add, 0 to change, 0 to destroy.</span><br><span class="line"></span><br><span class="line">───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────</span><br><span class="line"></span><br><span class="line">Note: You didn<span class="string">&#x27;t use the -out option to save this plan, so Terraform can&#x27;</span>t guarantee to take exactly these actions <span class="keyword">if</span> you run <span class="string">&quot;terraform apply&quot;</span> now.</span><br></pre></td></tr></table></figure><blockquote><p># null_resource.resource_A has moved to null_resource.resource_X</p></blockquote><p>というメッセージで、「どこが変わるのか」が分かりますね。<br>applyして、変化後の状況を確認してみます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$ terraform apply</span><br><span class="line">null_resource.resource_X: Refreshing state... [<span class="built_in">id</span>=592263413744525319]</span><br><span class="line">null_resource.resource_B: Refreshing state... [<span class="built_in">id</span>=5369048601034101090]</span><br><span class="line">null_resource.resource_C: Refreshing state... [<span class="built_in">id</span>=3453046184153615927]</span><br><span class="line"></span><br><span class="line">Terraform will perform the following actions:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># null_resource.resource_A has moved to null_resource.resource_X</span></span><br><span class="line">    resource <span class="string">&quot;null_resource&quot;</span> <span class="string">&quot;resource_X&quot;</span> &#123;</span><br><span class="line">        <span class="built_in">id</span> = <span class="string">&quot;592263413744525319&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">Plan: 0 to add, 0 to change, 0 to destroy.</span><br><span class="line"></span><br><span class="line">Do you want to perform these actions?</span><br><span class="line">  Terraform will perform the actions described above.</span><br><span class="line">  Only <span class="string">&#x27;yes&#x27;</span> will be accepted to approve.</span><br><span class="line"></span><br><span class="line">  Enter a value: <span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Apply complete! Resources: 0 added, 0 changed, 0 destroyed.</span><br><span class="line"></span><br><span class="line">$ terraform state list</span><br><span class="line">null_resource.resource_B</span><br><span class="line">null_resource.resource_C</span><br><span class="line">null_resource.resource_X</span><br></pre></td></tr></table></figure><p>リソース名が、resource_A から resource_X に変化しています。<br>これにより <code>moved.tf</code> ファイルは役目を果たしたので、削除しても以降の plan / apply には影響しません。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">rm</span> moved.tf <span class="comment"># delete moved.tf file</span></span><br><span class="line">$ terraform plan</span><br><span class="line">null_resource.resource_X: Refreshing state... [<span class="built_in">id</span>=592263413744525319]</span><br><span class="line">null_resource.resource_C: Refreshing state... [<span class="built_in">id</span>=3453046184153615927]</span><br><span class="line">null_resource.resource_B: Refreshing state... [<span class="built_in">id</span>=5369048601034101090]</span><br><span class="line"></span><br><span class="line">No changes. Your infrastructure matches the configuration.</span><br><span class="line"></span><br><span class="line">Terraform has compared your real infrastructure against your configuration and found no differences, so no changes are needed.</span><br></pre></td></tr></table></figure><p>以上で、moved block を利用したTerraformリソースの改名作業は終了です。</p><p>Terraformのリファクタリングには「①stateファイルの操作」と「②Terraformコード自体の操作」の2つが必要であり、①に集中することで②を忘れてしまうことがありますが、moved block を利用すればそれを防げそうです。</p><p>私の中では、Terraform stateファイルの操作には「terraform stateコマンドしかない」と思っていましたが、今回の勉強会に参加することで、結果的に新しい方法を知ることができました。改めて、継続的な技術インプット &amp; 定期的なアウトプットが重要だなと実感した勉強会でした。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;勉強会に登壇しました&quot;&gt;&lt;a href=&quot;#勉強会に登壇しました&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
    <category term="TechNight" scheme="https://future-architect.github.io/tags/TechNight/"/>
    
  </entry>
  
  <entry>
    <title>【Flutter/Riverpod】グローバルなプログレスインジケータを実装する</title>
    <link href="https://future-architect.github.io/articles/20220329a/"/>
    <id>https://future-architect.github.io/articles/20220329a/</id>
    <published>2022-03-28T15:00:00.000Z</published>
    <updated>2022-04-01T03:29:51.849Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20220315a/">Dart/Flutter連載2022</a>の8日目、最後です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>アプリケーションを開発していて、下記のようなプログレスインジケータを表示したいケースがあるかと思います。<br>今回はこのようなインジケータをページ共通的に制御することを目的として、その実装方法を説明していきます。</p><img src="/images/20220329a/Flutter-Global-Loader-Demo.gif" alt="プログレスインジケータのデモ" width="1200" height="675" loading="lazy"><p>なお、アプリケーションによっては、ユーザの一切の操作を受け付けないオーバーレイインジケーター自体がそもそも好ましくないという意見もあると思いますが、インジケータのあるべきについては本記事の論点とはしません。</p><h2 id="実現したいこと"><a href="#実現したいこと" class="headerlink" title="実現したいこと"></a>実現したいこと</h2><ul><li>HTTP通信など時間のかかる非同期処理中にインジケータを表示する。</li><li>インジケータの表示中はオーバーレイUIを用いて、画面操作を不可能とする。</li><li>インジケータのUIおよび、表示・非表示のロジックは共通化し、各画面での実装コストを可能な限り下げる。</li><li>インジケータの表示が二重に行われないよう制御する。</li></ul><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><p>今回は状態管理としてRiverpodを利用していますが、Riverpodを利用せずとも実装は可能です。</p><ul><li>Flutter 2.10.3</li><li>flutter_riverpod 1.0.3</li></ul><h2 id="UIの実装方針"><a href="#UIの実装方針" class="headerlink" title="UIの実装方針"></a>UIの実装方針</h2><p>インジケータの実装を調べると、下記ようなパターンで実装しているケースが多そうです。</p><h3 id="1-Dialog-Pattern"><a href="#1-Dialog-Pattern" class="headerlink" title="1. Dialog Pattern"></a>1. Dialog Pattern</h3><p>標準の<code>showDialog</code>メソッドを利用して、インジケータを表示するパターンです。<br><code>showDialog</code>メソッド内部では<code>Navigator.push()</code>を用いてページをスタックしているため、インジケータを非表示にする場合は<code>Navigaror.pop()</code>を使います。</p><p>この方式はオーバーレイが自動で有効になるため、インジケータ部分のみを実装すればOKです。<br>今回インジケータには標準の<code>CircularProgressIndicator</code>を利用します。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DialogPatternPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> DialogPatternPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&#x27;Dialog Pattern&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: ElevatedButton(</span><br><span class="line">          child: <span class="keyword">const</span> Text(<span class="string">&#x27;Show Loader&#x27;</span>),</span><br><span class="line">          onPressed: () <span class="keyword">async</span> &#123;</span><br><span class="line">            <span class="comment">// Present the indicator.</span></span><br><span class="line">            showDialog(</span><br><span class="line">              context: context,</span><br><span class="line">              builder: (context) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">const</span> Center(</span><br><span class="line">                  <span class="comment">// Default Indicator.</span></span><br><span class="line">                  <span class="comment">// https://api.flutter.dev/flutter/material/CircularProgressIndicator-class.html</span></span><br><span class="line">                  child: CircularProgressIndicator(),</span><br><span class="line">                );</span><br><span class="line">              &#125;,</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="comment">// Asynchronous processing such as API calls.</span></span><br><span class="line">              <span class="keyword">await</span> Future.delayed(<span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">3</span>));</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">              <span class="comment">// Dismiss the indicator.</span></span><br><span class="line">              Navigator.of(context).pop();</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Stack-Widget-Pattern"><a href="#2-Stack-Widget-Pattern" class="headerlink" title="2. Stack Widget Pattern"></a>2. Stack Widget Pattern</h3><p>Stack Widgetを用いて、状態（ローディング中かどうか）の変化の場合にインジケータを表示するパターンです。<br>Stateful Widgetとしてピュアに実装すると下記のようなイメージになります。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackWidgetPatternPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> StackWidgetPatternPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;StatefulWidget&gt; createState() &#123;</span><br><span class="line">    <span class="keyword">return</span> StackWidgetPatternPageState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackWidgetPatternPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">StackWidgetPatternPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> isLoading = <span class="keyword">false</span>;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Stack(</span><br><span class="line">      children: [</span><br><span class="line">        Scaffold(</span><br><span class="line">          appBar: AppBar(</span><br><span class="line">            title: <span class="keyword">const</span> Text(<span class="string">&#x27;Stack Widget Pattern&#x27;</span>),</span><br><span class="line">          ),</span><br><span class="line">          body: Center(</span><br><span class="line">            child: ElevatedButton(</span><br><span class="line">              child: <span class="keyword">const</span> Text(<span class="string">&#x27;Show Loader&#x27;</span>),</span><br><span class="line">              onPressed: () <span class="keyword">async</span> &#123;</span><br><span class="line">                <span class="comment">// Present the indicator.</span></span><br><span class="line">                setState(() &#123;</span><br><span class="line">                  isLoading = <span class="keyword">true</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="comment">// Asynchronous processing such as API calls.</span></span><br><span class="line">                  <span class="keyword">await</span> Future.delayed(<span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">3</span>));</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                  <span class="comment">// Dismiss the indicator.</span></span><br><span class="line">                  setState(() &#123;</span><br><span class="line">                    isLoading = <span class="keyword">false</span>;</span><br><span class="line">                  &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">        <span class="comment">// Stack.</span></span><br><span class="line">        <span class="keyword">if</span> (isLoading)</span><br><span class="line">          <span class="keyword">const</span> ColoredBox(</span><br><span class="line">            color: Colors.black54,</span><br><span class="line">            child: Center(</span><br><span class="line">              <span class="comment">// Default Indicator.</span></span><br><span class="line">              <span class="comment">// https://api.flutter.dev/flutter/material/CircularProgressIndicator-class.html</span></span><br><span class="line">              child: CircularProgressIndicator(),</span><br><span class="line">            ),</span><br><span class="line">          )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Riverpod-AsyncValue-Pattern"><a href="#3-Riverpod-AsyncValue-Pattern" class="headerlink" title="3. Riverpod AsyncValue Pattern"></a>3. Riverpod AsyncValue Pattern</h3><p>Riverpodの<a href="https://riverpod.dev/ja/docs/providers/future_provider/">AsyncValue</a>を利用して、ローディング状態をハンドリングするパターンです。<br>このパターンは基本的に各画面での制御が必要となるため、グローバルな制御には不向きであると判断し、割愛します。</p><h3 id="どちらを採用するか"><a href="#どちらを採用するか" class="headerlink" title="どちらを採用するか"></a>どちらを採用するか</h3><p>ソースコードを見てわかる通り、1のDialog Patternが「命令的」にインジケータを表示しているのに対し、2のStack Widget Patternは状態の変化に応じて「宣言的」にインジケータを表示しています。<br>Flutter自体が「宣言的UIのフレームワーク」と言われているように、ダイアログの表示も「宣言的」に行う<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>方が筆者としては自然に感じます。</p><p>Dialog Patternの場合は、Navigatorに依存しており、ダイアログの非表示を<code>Navigator.pop()</code>で行わなければならない点が意図しない挙動を生む可能性があると考えています。なぜなら<code>Navigator.pop()</code>はスタックに積まれた一番上のページをpopしているだけであり、インジケータを閉じることを保証している訳ではないからです。</p><p>これが問題になる具体的なケースとして、ページA（/home/A）とページB（/home/A/B）のようにURLが階層階層構造を持つページが存在し、両方のページで初期化時にインジケータを表示しているようなケースが考えられます。<br>Flutterの仕様<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>として、ディープリンクなどを介して直接ページBに到達したような場合でも、戻るボタンなどで親画面に戻れるよう上位階層のページAのビルドが同タイミングで実行されるため、ページBのローディング中に、ページAで（初期処理時にエラーが発生するなどして）何かしらのダイアログをNavigatorのスタックに新たに積むようなケースでは、ロード完了時に適切にインジケータが非表示にならないでしょう。</p><h2 id="ロジックの共通化"><a href="#ロジックの共通化" class="headerlink" title="ロジックの共通化"></a>ロジックの共通化</h2><p>Riverpodを利用してインジケータ制御のための共通的なサービスをProviderとして提供します。<br>この辺りの実装はお好きなようにという感じですが、ポイントは下記の2点です。</p><ul><li>Futureオブジェクトをラップするメソッドを提供することで、非同期処理の開始と終了時にローディングの状態を変化させている。</li><li>インジケータの2重表示を防止するため、内部的にはローディングが要求された回数をカウントしておき、最後の要求が終了して始めてローディング状態をfalseにしている。</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> loadingServiceProvider =</span><br><span class="line">    StateNotifierProvider&lt;LoadingService, <span class="built_in">bool</span>&gt;((ref) &#123;</span><br><span class="line">  <span class="keyword">return</span> LoadingService();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">LoadingService represents interfaces to control the progress indicator.</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoadingService</span> <span class="keyword">extends</span> <span class="title">StateNotifier</span>&lt;<span class="title">bool</span>&gt; </span>&#123;</span><br><span class="line">  LoadingService() : <span class="keyword">super</span>(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> _count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/// <span class="language-markdown">Wrap the a future completed value and show / hide the loader before and after processing.</span></span></span><br><span class="line">  Future&lt;T&gt; wrap&lt;T&gt;(Future&lt;T&gt; future) <span class="keyword">async</span> &#123;</span><br><span class="line">    _present();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">await</span> future;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      _dismiss();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _present() &#123;</span><br><span class="line">    _count = _count + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// Set the state to true.</span></span><br><span class="line">    state = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> _dismiss() &#123;</span><br><span class="line">    _count = _count - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// Set the state to false only if all processing requiring a loader has been completed.</span></span><br><span class="line">    <span class="keyword">if</span> (_count == <span class="number">0</span>) &#123;</span><br><span class="line">      state = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UIの共通化"><a href="#UIの共通化" class="headerlink" title="UIの共通化"></a>UIの共通化</h2><p>先ほどの例でみたパターン2のStack Widget Patternでは個々のページにStack Widgetを定義しなければなりませんでした。<br>これを共通化するためにMaterialApp Widgetの<code>builder</code>プロパティを利用することで、MaterialAppの配下かつ、Navigatorよりも上層に共通的にWidgetを定義することができます。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// Wrap the provide scope.</span></span><br><span class="line">    <span class="keyword">return</span> ProviderScope(</span><br><span class="line">      child: MaterialApp(</span><br><span class="line">        builder: (context, child) &#123;</span><br><span class="line">          <span class="keyword">return</span> Stack(</span><br><span class="line">            children: [</span><br><span class="line">              <span class="keyword">if</span> (child != <span class="keyword">null</span>) child,</span><br><span class="line">              <span class="comment">// Indicator.</span></span><br><span class="line">              Consumer(builder: (context, ref, child) &#123;</span><br><span class="line">                <span class="keyword">final</span> isLoading = ref.watch(loadingServiceProvider);</span><br><span class="line">                <span class="keyword">if</span> (isLoading) &#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="keyword">const</span> ColoredBox(</span><br><span class="line">                    color: Colors.black54,</span><br><span class="line">                    child: Center(</span><br><span class="line">                      <span class="comment">// Default Indicator.</span></span><br><span class="line">                      <span class="comment">// https://api.flutter.dev/flutter/material/CircularProgressIndicator-class.html</span></span><br><span class="line">                      child: CircularProgressIndicator(),</span><br><span class="line">                    ),</span><br><span class="line">                  );</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">const</span> SizedBox.shrink();</span><br><span class="line">              &#125;),</span><br><span class="line">            ],</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">        home: <span class="keyword">const</span> GlobalIndicatorDemoPage(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="個々のページの実装"><a href="#個々のページの実装" class="headerlink" title="個々のページの実装"></a>個々のページの実装</h2><p>最終的な個々のページの実装は下記のとおり、かなりすっきりとしたのではないでしょうか。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GlobalIndicatorDemoPage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> GlobalIndicatorDemoPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&#x27;Global Indicator Demo&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Consumer(builder: (context, ref, child) &#123;</span><br><span class="line">          <span class="keyword">return</span> ElevatedButton(</span><br><span class="line">            child: <span class="keyword">const</span> Text(<span class="string">&#x27;Show Loader&#x27;</span>),</span><br><span class="line">            onPressed: () <span class="keyword">async</span> &#123;</span><br><span class="line">              ref.read(loadingServiceProvider.notifier).wrap(</span><br><span class="line">                    Future.delayed(<span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">3</span>)),</span><br><span class="line">                  );</span><br><span class="line">            &#125;,</span><br><span class="line">          );</span><br><span class="line">        &#125;),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>いかがでしたでしょうか。<br>全ての実装については下記のリポジトリで公開しています。<br><a href="https://github.com/datake914/flutter_global_indicator_demo">https://github.com/datake914/flutter_global_indicator_demo</a></p><p>インジケータの制御を共通化したいという想いから色々試行錯誤してこのような実装にたどり着きましたが、もっとスマートな方法があるよって方は是非コメントいただければと思います。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">Navigator2.0で宣言的なナビゲーションが可能になりましたが、ダイアログ表示は依然として命令的になります</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">cf. <a href="https://github.com/flutter/flutter/issues/33566">https://github.com/flutter/flutter/issues/33566</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20220315a/&quot;&gt;Dart/Flutter連載2022&lt;/a&gt;の8日目、最後です。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="Riverpod" scheme="https://future-architect.github.io/tags/Riverpod/"/>
    
  </entry>
  
  <entry>
    <title>fromJsonをNamed ConstructorsでもStaticメソッドでもなく、factoryコンストラクタで書く理由</title>
    <link href="https://future-architect.github.io/articles/20220328a/"/>
    <id>https://future-architect.github.io/articles/20220328a/</id>
    <published>2022-03-27T15:00:00.000Z</published>
    <updated>2022-03-28T03:43:16.940Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220328a/Dart_programming_language_logo.svg.png" alt="" width="1024" height="320"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG真野です。<a href="/articles/20220315a/">Dart/Flutter連載2022</a>の7日目です。</p><p>Dartはコンストラクタがたくさんパターンがありますが、公式ドキュメントはもとより、国内外の様々なブログ記事で使い分けが紹介されており、先人による高速道路が整理されていると実感できます。</p><ul><li><a href="https://dart.dev/guides/language/language-tour#constructors">Language tour | Dart の Constructorの章</a></li><li><a href="https://dev.classmethod.jp/articles/about_dart_constructors/">Dartのコンストラクタについて | DevelopersIO</a></li><li><a href="https://zenn.dev/kaleidot725/articles/2021-11-13-dart-constructor">Dart のコンストラクタの基本 (できることまとめ) | Zenn</a></li></ul><p>一方で、慣れてくると自然だと感じてきますが、<a href="https://docs.flutter.dev/cookbook/networking/fetch-data">Flutterサンプルコードにある fromJson</a> がfactoryコンストラクタであることが、最初はピンと来ませんでした。なぜ、staticメソッドではダメか、Named Constructorじゃダメなんだっけと悩みました。</p><figure class="highlight dart"><figcaption><span>「Fetch data from the internet」に書いてあるサンプルコード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Album</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> userId;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> id;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> title;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Album(&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.userId,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.id,</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">this</span>.title,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 【疑問】なぜfactoryコンストラクタなんだっけ❓</span></span><br><span class="line">  <span class="keyword">factory</span> Album.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">    <span class="keyword">return</span> Album(</span><br><span class="line">      userId: json[<span class="string">&#x27;userId&#x27;</span>],</span><br><span class="line">      id: json[<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">      title: json[<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こうした悩みはネットにもちらほら見かけますが、ドンピシャなものがなかったのでこの機会に説明します。</p><ul><li><a href="https://stackoverflow.com/questions/63628741/flutter-when-should-the-factory-constructor-be-used">https://stackoverflow.com/questions/63628741/flutter-when-should-the-factory-constructor-be-used</a></li><li><a href="https://medium.com/nerd-for-tech/named-constructor-vs-factory-constructor-in-dart-ba28250b2747">https://medium.com/nerd-for-tech/named-constructor-vs-factory-constructor-in-dart-ba28250b2747</a></li><li><a href="https://teratail.com/questions/288071">Flutter : factoryコンストラクタはどのような場面で使うべきか</a></li></ul><p>なお、JSONのシリアライズ・デシリアライズの細かい実装はいくつか流派がありますが、今回は<a href="https://docs.flutter.dev/development/data-and-backend/json">JSON and serialization</a>でいう manual serialization で説明します（サンプルコードがそれだからです）。その他の実装手法については触れません。</p><h2 id="Static-Methodで無い理由"><a href="#Static-Methodで無い理由" class="headerlink" title="Static Methodで無い理由"></a>Static Methodで無い理由</h2><p>Static Methodで実装した例です。呼び出され方は変わりませんし、ほぼstaticがついたくらいの変更でしょうか。（正確にはAlbumとfromJsonの間はドットからスペースに変わりましたが）</p><figure class="highlight dart"><figcaption><span>Static Methodの例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Album fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">  <span class="keyword">return</span> Album(</span><br><span class="line">    userId: json[<span class="string">&#x27;userId&#x27;</span>],</span><br><span class="line">    id: json[<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">    title: json[<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://stackoverflow.com/questions/62014117/dart-named-constructor-vs-static-method-what-to-prefer">StackOverFlow</a>でもStatic MethodとNamed Constructorのどっちが良いのか？という似たような議論がありました。詳細はそれらに譲るとして、通常インスタンスを提供する目的であれば、コンストラクタで準備しておくほうがユーザーにとって自然でしょう。DartのLinterルールにも<a href="https://dart-lang.github.io/linter/lints/prefer_constructors_over_static_methods.html">prefer_constructors_over_static_methods</a> とあり、あえて独自ルールを作ることも無いと思います。</p><p>というわけで、fromJsonをStatic Methodで実装することはまぁ無いよね、ということはすぐにわかりました。</p><p>では Named Constructorsにしなかったのはなぜでしょうか。</p><h2 id="Albumのフィールドが全てfinalであることをまず強調したい"><a href="#Albumのフィールドが全てfinalであることをまず強調したい" class="headerlink" title="Albumのフィールドが全てfinalであることをまず強調したい"></a>Albumのフィールドが全てfinalであることをまず強調したい</h2><p>まず前提について補足させてください。DartではJavaのようにコンストラクタの引数違いでオーバーライドができず、代わりに「コンストラクタ名.任意名称」という形で別名を付けて複数のインスタンス生成方法を提供していきます。これをNamed Constructorsと言います。</p><p>finalなフィールドの初期化ですが、次のようにNamed Constructorsで素直に実装するとコンパイルエラーになってしまいます。</p><figure class="highlight dart"><figcaption><span>NamedConstructorsで書いた例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  Album.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">    <span class="keyword">this</span>.userId = json[<span class="string">&#x27;userId&#x27;</span>];</span><br><span class="line">    <span class="keyword">this</span>.id = json[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    <span class="keyword">this</span>.title = json[<span class="string">&#x27;title&#x27;</span>] ;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// &#x27;userId&#x27; can&#x27;t be used as a setter because it&#x27;s final. (ドキュメント)  Try finding a different setter, or</span></span><br><span class="line"><span class="comment">// making &#x27;userId&#x27; non-final.</span></span><br></pre></td></tr></table></figure><p>これを回避するためにはいくつかの手段があります。最もてっとり早く、IntelliJ IDEAあたりのIDEが勧めてくるのはfinalを外すことです。</p><p>ただ、これはしないことにします。fromJson()で生成するくらいなので、Read Onlyであることが大体のケースで期待されるからです。</p><p>finalを外す以外に、2つほどfinalなフィールドを初期化する実装方法が思いつきます。</p><h3 id="finalの初期化方法1-initializing-formalを用いる"><a href="#finalの初期化方法1-initializing-formalを用いる" class="headerlink" title="finalの初期化方法1: initializing formalを用いる"></a>finalの初期化方法1: initializing formalを用いる</h3><p>Albumの生成的コンストラクタ（generative constructor）は <code>this</code> キーワードで定義（<a href="https://dart-lang.github.io/linter/lints/prefer_initializing_formals.html">initializing formal</a>）されています。念のための補足ですが、Albumの生成的コンストラクタは以下の部分です。</p><figure class="highlight dart"><figcaption><span>Albumの生成的コンストラクタ</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Album(&#123;</span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">this</span>.userId,</span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">this</span>.id,</span><br><span class="line">  <span class="keyword">required</span> <span class="keyword">this</span>.title,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>これを利用するとNamed Constructorsからもフィールドを初期化できます。「:」はリダイレクトコンストラクタ（Redirect constructor）の定義で、thisは生成的コンストラクタを指します。ちょっとややこしいですが、Named Constructors→生成的コンストラクタへ引数をパスするようなイメージです。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OK 「:」で生成的コンストラクタへリダイレクトする</span></span><br><span class="line">Album.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) : <span class="keyword">this</span>(userId: json[<span class="string">&#x27;userId&#x27;</span>], id: json[<span class="string">&#x27;id&#x27;</span>], title: json[<span class="string">&#x27;title&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// NG Java脳だとこんな感じで書けると思いましたがダメでした</span></span><br><span class="line">Album.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">  <span class="keyword">this</span>(userId: json[<span class="string">&#x27;userId&#x27;</span>], id: json[<span class="string">&#x27;id&#x27;</span>], title: json[<span class="string">&#x27;title&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初見はなんだコレと思いましたが、慣れるとよくできていると思わなくもないです。</p><h3 id="finalの初期化方法2-Initializer-list"><a href="#finalの初期化方法2-Initializer-list" class="headerlink" title="finalの初期化方法2: Initializer list"></a>finalの初期化方法2: Initializer list</h3><p>コンストラクタの後に「:」を記載し、ここでフィールドに代入ができます。Initializer listと呼びます。Java経験者の方向けにはインスタンス初期化子みたいな感じといったほうが早いかもしれません。コンストラクタが動く前に動作するようで、finalなフィールドへの代入ができます。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Album.fromJson(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json)</span><br><span class="line">    : userId = json[<span class="string">&#x27;userId&#x27;</span>],</span><br><span class="line">      id = json[<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">      title = json[<span class="string">&#x27;title&#x27;</span>];</span><br></pre></td></tr></table></figure><p>さて、1,2の2つの手法を紹介しました。今回のAlbumのfromJson()では、Named Constructorsでも実装可能でした。ただ、ちょっと細かい手段を使わないとfinalフィールドの初期化ができないため、サンプルコード上はfactoryコンストラクタを採用したのかなと邪推します。flutter.dev にでてくるサンプルコードの中には、<a href="https://docs.flutter.dev/development/data-and-backend/json#serializing-json-inside-model-classes">2の手法で書いた例</a> もあるので、正直どっちでも良いのかなと思います。</p><h2 id="factoryコンストラクタを使うメリット"><a href="#factoryコンストラクタを使うメリット" class="headerlink" title="factoryコンストラクタを使うメリット"></a>factoryコンストラクタを使うメリット</h2><p>A tour of the Dart languageの<a href="https://dart.dev/guides/language/language-tour#factory-constructors">factoryコンストラクタの章</a>には以下のように書かれています。</p><blockquote><p>Use the factory keyword when implementing a constructor that doesn’t always create a new instance of its class. For example, a factory constructor might return an instance from a cache, or it might return an instance of a subtype.<br>（意訳） factoryクラスのキャッシュから取得するなど新しいインスタンスを常に作成するとは限らない場合や、サブクラスインスタンスを返すときに利用する。</p></blockquote><p>今回の Album.fromJson()はキャッシュするロジックを入れることは無いでしょう。一方で入力となるJSON（をパースした結果である、Map&lt;String, dynamic&gt;型のjson）に対して、入力チェックや特定の入力で固定値を返すといったことは十分ありえると思います。</p><figure class="highlight dart"><figcaption><span>factoryコンストラクタにパースロジックを追記した例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">factory</span> Album.fromJsonNest(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">dynamic</span>&gt; json) &#123;</span><br><span class="line">  <span class="keyword">if</span> (json[<span class="string">&quot;error&quot;</span>] != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> Exception(<span class="string">&quot;json has error fields: <span class="subst">$&#123;json[<span class="string">&quot;error&quot;</span>]&#125;</span>&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (json[<span class="string">&quot;userId&quot;</span>] == <span class="number">99999</span>) &#123; <span class="comment">// 特定のアカウントの場合はダミーデータを返す</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const</span> Album(</span><br><span class="line">      userId: <span class="number">99999</span>,</span><br><span class="line">      id: <span class="number">99999</span>,</span><br><span class="line">      title: <span class="string">&quot;テストデータ99999&quot;</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Album(</span><br><span class="line">    userId: json[<span class="string">&#x27;userId&#x27;</span>],</span><br><span class="line">    id: json[<span class="string">&#x27;id&#x27;</span>],</span><br><span class="line">    title: json[<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他にも実装例には上げていませんがネストしたオブジェクトをパースしたり、あるJSONフィールドを1:N個に分割したい時、あるいはUTC→JSTに変換したいなど様々な処理が考えられます。もちろん、どこまでをコンストラクタ側で行うかは一考の余地があるとは思います。大事なのはfactoryを用いるとこの手の拡張ポイントを差し込むことができ、動的にインスタンスを生成できるということです。</p><p>これは全フィールドにfinalがつけられ、不変なインスタンスを初期化する時においては大きな差分でしょう。</p><p>これらの違いから、とりあえずHTTPレスポンスボディのJSONからインスタンスを生成するコードは、拡張性を考えてサンプルコード的にはfactoryで作っておくのも一手としてはありかなと思います。将来の拡張性を考えて予め備えておく考えは、個人的には余り好きでははないですが（意図が読めないので）、factoryに関してはコード量もほぼ変わらないので、そこに躓く人は少ないと思うからです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>Album.fromJson()の例だと、リダイレクトやInitializer listを用いると Named Constructorでも実装でき、factoryコンストラクタと大差ないのでどっちでも良い</li><li>JSON周りの取り扱いで、入力チェックや項目編集をコンストラクト無いで行うのであればfactoryコンストラクタを利用する必要がある（正確にはヘルパー関数を用いればNamed Constructorでも実装できなくも無い）</li><li><a href="https://docs.flutter.dev/cookbook/networking/fetch-data">Fetch data from the internet</a>のドキュメントを参照する人が多そうなので、どっちでも良い場合に、どちらがいいか強いて選択するのであれば、factoryコンストラクタ側に寄せようかな、というレベル<ul><li>全てのWeb APIアクセスがフラットで簡単な構造のJSONであるならともかく、そうでないならfactoryに寄せるのもあり。とはいえ、寄せても寄せなくても呼び出され方は同じであるため、あえてルールを増やさなくても良いとは思います</li></ul></li></ul><p>他にもご意見があればいただきたくです。最後まで読んでいただきありがとうございました！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220328a/Dart_programming_language_logo.svg.png&quot; alt=&quot;&quot; width=&quot;1024&quot; height=&quot;320&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="コーディング規約" scheme="https://future-architect.github.io/tags/%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E8%A6%8F%E7%B4%84/"/>
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="Dart" scheme="https://future-architect.github.io/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>FlutterFlowを触ってみる</title>
    <link href="https://future-architect.github.io/articles/20220325a/"/>
    <id>https://future-architect.github.io/articles/20220325a/</id>
    <published>2022-03-24T15:00:00.000Z</published>
    <updated>2022-03-25T04:51:35.698Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220325a/image.png" alt="image.png" width="1200" height="675" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIGの宮崎将太です。</p><p><a href="/articles/20220315a/">Flutter連載6回目</a>としてFlutterFlowについて調べてみました。<br>※2022年3月時点でFreeプランで検証しています。</p><h1 id="What’s-Flutter-Flow"><a href="#What’s-Flutter-Flow" class="headerlink" title="What’s Flutter Flow"></a>What’s Flutter Flow</h1><p>GoogleI/O’21でFlutterFlowというFlutterのノーコードのサービスが発表されました。</p><p>GUIだけでグリグリアプリが作れちゃうという例のアレですね。</p><p>個人的にノーコードツールに懐疑的な印象を持っているので、実際に現場に適用できそうかという観点で調べてみました。</p><h1 id="機能-amp-料金体型"><a href="#機能-amp-料金体型" class="headerlink" title="機能&amp;料金体型"></a>機能&amp;料金体型</h1><p>出落ちになりますが、プラン別の機能と料金体系です。</p><div class="scroll"><table><thead><tr><th align="left"><strong>機能</strong></th><th align="left"><strong>説明</strong></th><th align="center"><strong>Free Plan</strong></th><th align="center"><strong>Standard Plan</strong></th><th align="center"><strong>Pro Plan</strong></th></tr></thead><tbody><tr><td align="left"><strong>標準コンポーネント</strong></td><td align="left">Flutter Flowで事前定義されたコンポーネントの使用可否です。<br>簡素なモバイルアプリであれば標準コンポーネントのみで構築も可能なくらい多くの部品が事前定義されています。</td><td align="center">○</td><td align="center">○</td><td align="center">○</td></tr><tr><td align="left"><strong>カスタムWidget</strong></td><td align="left">カスタムコンポーネントの作成可否です。<br>全プランでGUIベース、コードベースの双方でコンポーネントを作成可能です。</td><td align="center">○</td><td align="center">○</td><td align="center">○</td></tr><tr><td align="left"><strong>カスタムFuctiion</strong></td><td align="left">自作関数作成可否です。<br>関数として登録しておくと、複数画面で処理を使い回すことができます。</td><td align="center">○</td><td align="center">○</td><td align="center">○</td></tr><tr><td align="left"><strong>画面テンプレート</strong></td><td align="left">50以上の画面テンプレートの利用可否。<br>よくあるアプリケーションデザインがテンプレート化されており、これを使うだけでもある程度見れる見た目になります。</td><td align="center">○</td><td align="center">○</td><td align="center">○</td></tr><tr><td align="left"><strong>アプリケーション実行</strong></td><td align="left">FlutterFlow上でのアプリケーション実行可否です。<br>設定にエラーがなければweb上でアプリケーションを実行できます。</td><td align="center">○</td><td align="center">○</td><td align="center">○</td></tr><tr><td align="left"><strong>Firebaseとの統合</strong></td><td align="left">全環境でbackendとしてFirebaseを統合的に使用できます。<br>プロジェクト作成時か、後からFirebaseプロジェクトをFlutter Flowプロジェクト側に登録することで利用が可能になります。<br>※Firebase側でFlutterFlowアカウントに対して権限を付与する必要があります。</td><td align="center">○</td><td align="center">○</td><td align="center">○</td></tr><tr><td align="left"><strong>3rd Partyライブラリとの統合</strong></td><td align="left">pub.devから依存ライブラリをDLしてきて参照できます。<br>通常のFlutter開発相当のことができると考えてOKです。</td><td align="center">○</td><td align="center">○</td><td align="center">○</td></tr><tr><td align="left"><strong>チーム共有</strong></td><td align="left">FlutterFlowプロジェクトに対してメールアドレスを登録することで共同編集が可能です。</td><td align="center">○</td><td align="center">○</td><td align="center">○</td></tr><tr><td align="left"><strong>サンプルアプリ</strong></td><td align="left">Standardプラン以上だと作成済みのサンプルアプリを動作させることができます。<br>※Freeプランでもサンプルプロジェクトを動かすことはできましたが、アプリとして動作させようとするとエラーが発生していました。</td><td align="center"></td><td align="center">○</td><td align="center">○</td></tr><tr><td align="left"><strong>APKダウンロード</strong></td><td align="left">Standartdプラン以上であればAPKダウンロードが可能です。</td><td align="center"></td><td align="center">○</td><td align="center">○</td></tr><tr><td align="left"><strong>ソースコードダウンロード</strong></td><td align="left">Standartdプラン以上であればFlutterプロジェクトとしてダウンロードが可能です。<br>Freeプランでもコンポーネント単位でのソース閲覧は可能ですが、プロジェクト丸ごとのDLは不可でした。</td><td align="center"></td><td align="center">○</td><td align="center">○</td></tr><tr><td align="left"><strong>AppStore/PlayStoreへのデプロイ</strong></td><td align="left">Proプランでのみ、直接アプリをストアにデプロイできるとのこと。</td><td align="center"></td><td align="center"></td><td align="center">○</td></tr><tr><td align="left"><strong>カスタムAPI</strong></td><td align="left">Proプランのみ任意のAPIコールを可能とのこと。<br>※試せていませんが、FreeとStandadだと相当カスタマイズしない限りFirebase固定になるかも？</td><td align="center"></td><td align="center"></td><td align="center">○</td></tr><tr><td align="left"><strong>Githubとの統合</strong></td><td align="left">ProプランのみソースコードをGithubリポジトリベースで管理できるとのこと。<br>FlutterFlowにもバージョンの概念はありますが、アプリ全体で断面を切るくらいしかできませんでした。</td><td align="center"></td><td align="center"></td><td align="center">○</td></tr><tr><td align="left"><strong>Firebase ContentMangeer</strong></td><td align="left">ProプランのみFirestoreデータをFlutterFlowGUI上で編集できるようになるとのこと。</td><td align="center"></td><td align="center"></td><td align="center">○</td></tr><tr><td align="left"><strong>料金</strong></td><td align="left">per month</td><td align="center">0$</td><td align="center">30$</td><td align="center">70$</td></tr></tbody></table></div><h1 id="使い方"><a href="#使い方" class="headerlink" title="使い方"></a>使い方</h1><p>FlutterFlowアカウント自体は無料で作成が可能です。<br><a href="https://app.flutterflow.io/create-account">https://app.flutterflow.io/create-account</a></p><p>以降はアカウントを作成した前提で話を進めます。</p><h2 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h2><p>テンプレートからプロジェクトを作成するかblankプロジェクトを作成するか選択可能です。<br>Freeプランで利用可能なテンプレートは現時点で8種類あり、大半がFirebase利用を前提としていました。</p><img src="/images/20220325a/ec121a83-71d8-4a99-c03a-edc8e266c128.png" alt="プロジェクト作成の流れ1" width="1200" height="931" loading="lazy"><img src="/images/20220325a/ad4b708f-b9d3-769c-2fb4-645c88d5d69f.png" alt="プロジェクト作成の流れ2" width="848" height="620" loading="lazy"><img src="/images/20220325a/909972bf-5d96-3dc5-4a1e-22fc212e209d.png" alt="プロジェクト作成の流れ3" width="816" height="646" loading="lazy"><h2 id="画面デザイン"><a href="#画面デザイン" class="headerlink" title="画面デザイン"></a>画面デザイン</h2><p>メインのデザイン画面はこんな感じです</p><img src="/images/20220325a/image_2.png" alt="画面デザイン" width="1200" height="563" loading="lazy"><p>コンポーネント選択パネルから部品をDrag&amp;Dropで画面に配置することができます。<br>TextやColumn、RowなどおなじみのWigdetがデフォルトで登録されています。<br>配置された部品はプロパティ設定パネルで細かな調整が可能です。<br>ざっと見た感じWidgetコンストラクタの属性がそのままGUIで設定可能なように見受けられました。<br>ちなみに、デバイス選択ではiPhone/AndroidのほかにiPadとMac/Windowsも選択可能です。<br>右上のRunボタンでweb上でアプリ実行もできます。</p><p>ナビゲーションバーでタブを切り替えると画面ごとの表示やWidgetのツリー表示も可能です。</p><img src="/images/20220325a/image_3.png" alt="画面ごとの表示やWidgetのツリー表示" width="354" height="906" loading="lazy"><h2 id="Action設定"><a href="#Action設定" class="headerlink" title="Action設定"></a>Action設定</h2><p>配置した部品にGUIでActionを設定することができます。<br>設定可能なActionはデフォルトで用意されているものとカスタムで作成できるものがあり、Navigatorの使用やAlertなんかはデフォルトで用意されています。</p><img src="/images/20220325a/image_4.png" alt="GUIを用いたAction設定" width="1200" height="515" loading="lazy"><h2 id="コンポーネント作成"><a href="#コンポーネント作成" class="headerlink" title="コンポーネント作成"></a>コンポーネント作成</h2><p>GUIとコードベースでコンポーネントを作成できます。<br>部品として永続化してDRYに書くことは問題なくできそうです。<br>※コンポーネントとは別にCustom Widgetという概念もありますが、こちらはコードベースで作成するコンポーネントを指すようです。</p><img src="/images/20220325a/ezgif.com-gif-maker.gif" alt="コンポーネント作成のGifどうが" width="800" height="544" loading="lazy"><h2 id="LocalState"><a href="#LocalState" class="headerlink" title="LocalState"></a>LocalState</h2><p>アプリケーショングローバルな値をLocalStateとして設定しておけます。<br>ローカルDBへの永続化も可能です。<br>ActionやCustomFunctionから適宜参照、設定ができます。</p><img src="/images/20220325a/image_5.png" alt="アプリケーショングローバルな値をLocalStateとして設定" width="1200" height="734" loading="lazy"><h2 id="APICall"><a href="#APICall" class="headerlink" title="APICall"></a>APICall</h2><p>ここが残念なところ….<br>FreePlan/Standardでは任意のAPICall設定ができません。Backendを簡単に使用する場合はFirebaseを使うことが縛りになってしまうよう。<br>※CustomFunctionとしてAPICallをコーディングしておけばなんとでもなる気がするけど、そこまでやるとFlutterFlowを使用する理由が消失する。</p><img src="/images/20220325a/image_6.png" alt="API呼び出し" width="1200" height="745" loading="lazy"><h2 id="生成ソースコード"><a href="#生成ソースコード" class="headerlink" title="生成ソースコード"></a>生成ソースコード</h2><p>最後に、FreePlanでも画面のソース閲覧は可能です。（プロジェクト全体のダウンロードやGithub接続は不可）<br>ちょっとコードを眺めてみましょう。</p><img src="/images/20220325a/image_7.png" alt="コード出力ボタン" width="1154" height="376" loading="lazy">↓<img src="/images/20220325a/image_8.png" alt="生成されたコード" width="1200" height="518" loading="lazy"><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../backend/api_requests/api_calls.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../department_highlights_page/department_highlights_page_widget.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../flutter_flow/flutter_flow_theme.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../flutter_flow/flutter_flow_util.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../search_results_page/search_results_page_widget.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:google_fonts/google_fonts.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomePageWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> HomePageWidget(&#123;Key key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _HomePageWidgetState createState() =&gt; _HomePageWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_HomePageWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">HomePageWidget</span>&gt; </span>&#123;</span><br><span class="line">  TextEditingController textController;</span><br><span class="line">  <span class="keyword">final</span> scaffoldKey = GlobalKey&lt;ScaffoldState&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    textController = TextEditingController();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      key: scaffoldKey,</span><br><span class="line">      backgroundColor: FlutterFlowTheme.of(context).secondaryColor,</span><br><span class="line">      body: SingleChildScrollView(</span><br><span class="line">        child: Column(</span><br><span class="line">          mainAxisSize: MainAxisSize.max,</span><br><span class="line">          children: [</span><br><span class="line">            Stack(</span><br><span class="line">              children: [</span><br><span class="line">                Align(</span><br><span class="line">                  alignment: AlignmentDirectional(<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">                  child: Image.asset(</span><br><span class="line">                    <span class="string">&#x27;assets/images/home_image.png&#x27;</span>,</span><br><span class="line">                    width: <span class="built_in">double</span>.infinity,</span><br><span class="line">                    height: <span class="number">255</span>,</span><br><span class="line">                    fit: BoxFit.cover,</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">                Align(</span><br><span class="line">                  alignment: AlignmentDirectional(<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">                  child: Padding(</span><br><span class="line">                    padding: EdgeInsetsDirectional.fromSTEB(<span class="number">20</span>, <span class="number">60</span>, <span class="number">20</span>, <span class="number">0</span>),</span><br><span class="line">                    child: Column(</span><br><span class="line">                      mainAxisSize: MainAxisSize.max,</span><br><span class="line">                      children: [</span><br><span class="line">                        Padding(</span><br><span class="line">                          padding: EdgeInsetsDirectional.fromSTEB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">17</span>),</span><br><span class="line">                          child: Image.asset(</span><br><span class="line">                            <span class="string">&#x27;assets/images/logo_flutterMet_white.png&#x27;</span>,</span><br><span class="line">                            width: <span class="number">120</span>,</span><br><span class="line">                            fit: BoxFit.cover,</span><br><span class="line">                          ),</span><br><span class="line">                        ),</span><br><span class="line">                        Text(</span><br><span class="line">                          <span class="string">&#x27;Your place for searching ART.&#x27;</span>,</span><br><span class="line">                          style: FlutterFlowTheme.of(context)</span><br><span class="line">                              .bodyText1</span><br><span class="line">                              .override(</span><br><span class="line">                                fontFamily: <span class="string">&#x27;Playfair Display&#x27;</span>,</span><br><span class="line">                                color:</span><br><span class="line">                                    FlutterFlowTheme.of(context).secondaryColor,</span><br><span class="line">                                fontSize: <span class="number">16</span>,</span><br><span class="line">                                fontStyle: FontStyle.italic,</span><br><span class="line">                              ),</span><br><span class="line">                        ),</span><br><span class="line">                        Padding(</span><br><span class="line">                          padding: EdgeInsetsDirectional.fromSTEB(<span class="number">0</span>, <span class="number">27</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">                          child: Container(</span><br><span class="line">                            width: <span class="built_in">double</span>.infinity,</span><br><span class="line">                            height: <span class="number">52</span>,</span><br><span class="line">                            decoration: BoxDecoration(</span><br><span class="line">                              color: Colors.white,</span><br><span class="line">                              borderRadius: BorderRadius.circular(<span class="number">8</span>),</span><br><span class="line">                            ),</span><br><span class="line">                            child: Padding(</span><br><span class="line">                              padding:</span><br><span class="line">                                  EdgeInsetsDirectional.fromSTEB(<span class="number">15</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">0</span>),</span><br><span class="line">                              child: Row(</span><br><span class="line">                                mainAxisSize: MainAxisSize.max,</span><br><span class="line">                                children: [</span><br><span class="line">                                  InkWell(</span><br><span class="line">                                    onTap: () <span class="keyword">async</span> &#123;</span><br><span class="line">                                      <span class="keyword">await</span> Navigator.push(</span><br><span class="line">                                        context,</span><br><span class="line">                                        MaterialPageRoute(</span><br><span class="line">                                          builder: (context) =&gt;</span><br><span class="line">                                              SearchResultsPageWidget(</span><br><span class="line">                                            searchTerm: textController.text,</span><br><span class="line">                                          ),</span><br><span class="line">                                        ),</span><br><span class="line">                                      );</span><br><span class="line">                                      <span class="keyword">await</span> GetDepartmentsCall.call();</span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    child: Icon(</span><br><span class="line">                                      Icons.search,</span><br><span class="line">                                      color: FlutterFlowTheme.of(context)</span><br><span class="line">                                          .tertiaryColor,</span><br><span class="line">                                      size: <span class="number">24</span>,</span><br><span class="line">                                    ),</span><br><span class="line">                                  ),</span><br><span class="line">                                  Expanded(</span><br><span class="line">                                    child: Padding(</span><br><span class="line">                                      padding: EdgeInsetsDirectional.fromSTEB(</span><br><span class="line">                                          <span class="number">5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>),</span><br><span class="line">                                      child: TextFormField(</span><br><span class="line">                                        controller: textController,</span><br><span class="line">                                        obscureText: <span class="keyword">false</span>,</span><br><span class="line">                                        decoration: InputDecoration(</span><br><span class="line">                                          hintText:</span><br><span class="line">                                              <span class="string">&#x27;Search artist, maker, department...&#x27;</span>,</span><br><span class="line">                                          enabledBorder: UnderlineInputBorder(</span><br><span class="line">                                            borderSide: BorderSide(</span><br><span class="line">                                              color: Color(<span class="number">0x00000000</span>),</span><br><span class="line">                                              width: <span class="number">1</span>,</span><br><span class="line">                                            ),</span><br><span class="line">                                            borderRadius:</span><br><span class="line">                                                <span class="keyword">const</span> BorderRadius.only(</span><br><span class="line">                                              topLeft: Radius.circular(<span class="number">4.0</span>),</span><br><span class="line">                                              topRight: Radius.circular(<span class="number">4.0</span>),</span><br><span class="line">                                            ),</span><br><span class="line">                                          ),</span><br><span class="line">                                          focusedBorder: UnderlineInputBorder(</span><br><span class="line">                                            borderSide: BorderSide(</span><br><span class="line">                                              color: Color(<span class="number">0x00000000</span>),</span><br><span class="line">                                              width: <span class="number">1</span>,</span><br><span class="line">                                            ),</span><br><span class="line">                                            borderRadius:</span><br><span class="line">                                                <span class="keyword">const</span> BorderRadius.only(</span><br><span class="line">                                              topLeft: Radius.circular(<span class="number">4.0</span>),</span><br><span class="line">                                              topRight: Radius.circular(<span class="number">4.0</span>),</span><br><span class="line">                                            ),</span><br><span class="line">                                          ),</span><br><span class="line">                                        ),</span><br><span class="line">                                        style: FlutterFlowTheme.of(context)</span><br><span class="line">                                            .bodyText1</span><br><span class="line">                                            .override(</span><br><span class="line">                                              fontFamily: <span class="string">&#x27;Playfair Display&#x27;</span>,</span><br><span class="line">                                              fontSize: <span class="number">16</span>,</span><br><span class="line">                                            ),</span><br><span class="line">                                      ),</span><br><span class="line">                                    ),</span><br><span class="line">                                  ),</span><br><span class="line">                                ],</span><br><span class="line">                              ),</span><br><span class="line">                            ),</span><br><span class="line">                          ),</span><br><span class="line">                        ),</span><br><span class="line">                        Align(</span><br><span class="line">                          alignment: AlignmentDirectional(<span class="number">-1</span>, <span class="number">0</span>),</span><br><span class="line">                          child: Padding(</span><br><span class="line">                            padding:</span><br><span class="line">                                EdgeInsetsDirectional.fromSTEB(<span class="number">10</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">20</span>),</span><br><span class="line">                            child: Text(</span><br><span class="line">                              <span class="string">&#x27;Museum Departments&#x27;</span>,</span><br><span class="line">                              style: FlutterFlowTheme.of(context)</span><br><span class="line">                                  .bodyText1</span><br><span class="line">                                  .override(</span><br><span class="line">                                    fontFamily: <span class="string">&#x27;Playfair Display&#x27;</span>,</span><br><span class="line">                                    fontSize: <span class="number">12</span>,</span><br><span class="line">                                    fontWeight: FontWeight.w600,</span><br><span class="line">                                  ),</span><br><span class="line">                            ),</span><br><span class="line">                          ),</span><br><span class="line">                        ),</span><br><span class="line">                        FutureBuilder&lt;ApiCallResponse&gt;(</span><br><span class="line">                          future: GetDepartmentsCall.call(),</span><br><span class="line">                          builder: (context, snapshot) &#123;</span><br><span class="line">                            <span class="comment">// Customize what your widget looks like when it&#x27;s loading.</span></span><br><span class="line">                            <span class="keyword">if</span> (!snapshot.hasData) &#123;</span><br><span class="line">                              <span class="keyword">return</span> Center(</span><br><span class="line">                                child: SizedBox(</span><br><span class="line">                                  width: <span class="number">50</span>,</span><br><span class="line">                                  height: <span class="number">50</span>,</span><br><span class="line">                                  child: CircularProgressIndicator(</span><br><span class="line">                                    color: FlutterFlowTheme.of(context)</span><br><span class="line">                                        .primaryColor,</span><br><span class="line">                                  ),</span><br><span class="line">                                ),</span><br><span class="line">                              );</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">final</span> gridViewGetDepartmentsResponse =</span><br><span class="line">                                snapshot.data;</span><br><span class="line">                            <span class="keyword">return</span> Builder(</span><br><span class="line">                              builder: (context) &#123;</span><br><span class="line">                                <span class="keyword">final</span> departments = (getJsonField(</span><br><span class="line">                                          (gridViewGetDepartmentsResponse</span><br><span class="line">                                                  ?.jsonBody ??</span><br><span class="line">                                              <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">                                          <span class="string">r&#x27;&#x27;&#x27;$.departments&#x27;&#x27;&#x27;</span>,</span><br><span class="line">                                        )?.toList() ??</span><br><span class="line">                                        [])</span><br><span class="line">                                    .take(<span class="number">30</span>)</span><br><span class="line">                                    .toList();</span><br><span class="line">                                <span class="keyword">return</span> GridView.builder(</span><br><span class="line">                                  padding: EdgeInsets.zero,</span><br><span class="line">                                  gridDelegate:</span><br><span class="line">                                      SliverGridDelegateWithFixedCrossAxisCount(</span><br><span class="line">                                    crossAxisCount: <span class="number">2</span>,</span><br><span class="line">                                    crossAxisSpacing: <span class="number">10</span>,</span><br><span class="line">                                    mainAxisSpacing: <span class="number">10</span>,</span><br><span class="line">                                    childAspectRatio: <span class="number">1.6</span>,</span><br><span class="line">                                  ),</span><br><span class="line">                                  primary: <span class="keyword">false</span>,</span><br><span class="line">                                  shrinkWrap: <span class="keyword">true</span>,</span><br><span class="line">                                  scrollDirection: Axis.vertical,</span><br><span class="line">                                  itemCount: departments.length,</span><br><span class="line">                                  itemBuilder: (context, departmentsIndex) &#123;</span><br><span class="line">                                    <span class="keyword">final</span> departmentsItem =</span><br><span class="line">                                        departments[departmentsIndex];</span><br><span class="line">                                    <span class="keyword">return</span> InkWell(</span><br><span class="line">                                      onTap: () <span class="keyword">async</span> &#123;</span><br><span class="line">                                        <span class="keyword">await</span> Navigator.push(</span><br><span class="line">                                          context,</span><br><span class="line">                                          MaterialPageRoute(</span><br><span class="line">                                            builder: (context) =&gt;</span><br><span class="line">                                                DepartmentHighlightsPageWidget(</span><br><span class="line">                                              departmentId: getJsonField(</span><br><span class="line">                                                departmentsItem,</span><br><span class="line">                                                <span class="string">r&#x27;&#x27;&#x27;$.departmentId&#x27;&#x27;&#x27;</span>,</span><br><span class="line">                                              ),</span><br><span class="line">                                              displayName: getJsonField(</span><br><span class="line">                                                departmentsItem,</span><br><span class="line">                                                <span class="string">r&#x27;&#x27;&#x27;$.displayName&#x27;&#x27;&#x27;</span>,</span><br><span class="line">                                              ).toString(),</span><br><span class="line">                                            ),</span><br><span class="line">                                          ),</span><br><span class="line">                                        );</span><br><span class="line">                                      &#125;,</span><br><span class="line">                                      child: Card(</span><br><span class="line">                                        clipBehavior:</span><br><span class="line">                                            Clip.antiAliasWithSaveLayer,</span><br><span class="line">                                        color: Colors.white,</span><br><span class="line">                                        elevation: <span class="number">4</span>,</span><br><span class="line">                                        shape: RoundedRectangleBorder(</span><br><span class="line">                                          borderRadius:</span><br><span class="line">                                              BorderRadius.circular(<span class="number">8</span>),</span><br><span class="line">                                        ),</span><br><span class="line">                                        child: Align(</span><br><span class="line">                                          alignment: AlignmentDirectional(<span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">                                          child: Padding(</span><br><span class="line">                                            padding:</span><br><span class="line">                                                EdgeInsetsDirectional.fromSTEB(</span><br><span class="line">                                                    <span class="number">5</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>),</span><br><span class="line">                                            child: Text(</span><br><span class="line">                                              getJsonField(</span><br><span class="line">                                                departmentsItem,</span><br><span class="line">                                                <span class="string">r&#x27;&#x27;&#x27;$.displayName&#x27;&#x27;&#x27;</span>,</span><br><span class="line">                                              ).toString(),</span><br><span class="line">                                              textAlign: TextAlign.center,</span><br><span class="line">                                              style:</span><br><span class="line">                                                  FlutterFlowTheme.of(context)</span><br><span class="line">                                                      .title1,</span><br><span class="line">                                            ),</span><br><span class="line">                                          ),</span><br><span class="line">                                        ),</span><br><span class="line">                                      ),</span><br><span class="line">                                    );</span><br><span class="line">                                  &#125;,</span><br><span class="line">                                );</span><br><span class="line">                              &#125;,</span><br><span class="line">                            );</span><br><span class="line">                          &#125;,</span><br><span class="line">                        ),</span><br><span class="line">                      ],</span><br><span class="line">                    ),</span><br><span class="line">                  ),</span><br><span class="line">                ),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ],</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>テンプレート画面をそのまま出力したこともあり、<code>Scaffold</code>の中にゴリゴリ実装されていますね。<br>コンポーネントをうまく使えばもうちょっとプロダクト寄りの実装にはなりそうです。<br>ただし、素で<code>StatefulWidget</code>を使用している部分はどうにもならなそうで、このままコピペは難しそう。<br>あくまでデザイン部分の参考程度の使い道にな理想です。<br>ちなみに、テーマはFlutterFlowプロジェクトでグローバル設定が可能で、<code>FlutterFlowTheme</code>はその設定にアクセスしているものと思われます。</p><h1 id="使い所"><a href="#使い所" class="headerlink" title="使い所"></a>使い所</h1><p>軽く触ってみた感触と料金体系を見た感じ、以下の感触でした。</p><ul><li>ProPlanであればPoCプロジェクトは十分に回せそう。ただし、状態管理などより作りを意識する必要があるプロダクト版開発はProPlanでも限定的な使い方になる。（デザイン部分だけをFlutterFlowで作るなど。）</li><li>Firebase前提でプロトタイプのみを作成するのであればStandardPlanが適当。ソースダウンロードができるので、どこかのリポジトリに保存しておけばプロジェクト終了後も月額費を払い続けるということは必要なし。</li><li>FreePlanはデザインコードの参考程度の使い道。画面単位でソースコード表示はできるので、部分的にコピペすることで若干開発は早くなるか。</li></ul><p>有料プランでも14日間は使用ができそうなので、次はProPlanを試してみようと思います。<br>正直FreeとStandardでは実プロジェクトへの導入はなかなか難しそう..<br>Proでも料金は70$/月程度なので、プロジェクトで数アカウントだけ取るのはギリギリありかどうか..？といったところです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220325a/image.png&quot; alt=&quot;image.png&quot; width=&quot;1200&quot; height=&quot;675&quot; loading=&quot;lazy&quot;&gt;


&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="ローコード" scheme="https://future-architect.github.io/tags/%E3%83%AD%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89/"/>
    
    <category term="FlutterFlow" scheme="https://future-architect.github.io/tags/FlutterFlow/"/>
    
    <category term="Design" scheme="https://future-architect.github.io/tags/Design/"/>
    
    <category term="ノーコード" scheme="https://future-architect.github.io/tags/%E3%83%8E%E3%83%BC%E3%82%B3%E3%83%BC%E3%83%89/"/>
    
  </entry>
  
  <entry>
    <title>Flutter でプッシュ通知するときに知っておきたいこと</title>
    <link href="https://future-architect.github.io/articles/20220323a/"/>
    <id>https://future-architect.github.io/articles/20220323a/</id>
    <published>2022-03-22T15:00:00.000Z</published>
    <updated>2022-03-23T01:27:05.646Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIGの越島です。<br><a href="/articles/20220315a/">Dart/Flutter連載</a> の5日目のお題は<strong>Flutterでプッシュ通知</strong>です。</p><p>Flutter製のスマホアプリにプッシュ通知機能をつけるとなったときに「最初に教えてもらってたら楽だったな〜」という情報をまとめてみました。また、最後に具体例としてFlutter x Firebase Cloud Messaging x Amazon Pinpointを組み合わせた場合の実現方法も簡単にご紹介します。</p><h1 id="プッシュ通知の基礎知識"><a href="#プッシュ通知の基礎知識" class="headerlink" title="プッシュ通知の基礎知識"></a>プッシュ通知の基礎知識</h1><p>まずはプッシュ通知について、基本からおさらいをしていきましょう。</p><h2 id="ローカル通知とリモート通知"><a href="#ローカル通知とリモート通知" class="headerlink" title="ローカル通知とリモート通知"></a>ローカル通知とリモート通知</h2><p>プッシュ通知には大きく分けて以下の2種類があります。</p><ol><li>ローカル通知</li><li>リモート通知</li></ol><p><strong>ローカル通知</strong>は、デバイスの内部で完結するプッシュ通知で、インターネット接続を必要としないものになります。リマインダーアプリで決まった日時に通知を飛ばす等、外部のサーバ（アプリのバックエンド等）からの通知リクエストを送る必要がない通知に利用されます。</p><p><strong>リモート通知</strong>は、インターネットを通してスマホの端末外から届けられるプッシュ通知で、バックエンド側の何かしらのイベントの発生を受けてデバイスに送信されるプッシュ通知はリモート通知となります。LINEでメッセージを受信したときの通知や、SNSのいいね！の通知などはこちらにあたります。<br><img src="/images/20220323a/notification-Page-2.drawio_(3).png" alt="ローカル、リモートそれぞれのプッシュアーキテクチャの構成" width="1200" height="763" loading="lazy"></p><h2 id="プッシュ通知配信サービス"><a href="#プッシュ通知配信サービス" class="headerlink" title="プッシュ通知配信サービス"></a>プッシュ通知配信サービス</h2><p>リモート通知をAndroid/iOSのデバイスに対して送るためには、<strong>プッシュ通知配信サービス</strong>を利用します。</p><p>プッシュ通知配信サービスの代表的なものは、Googleが提供する <strong>Firebase Cloud Messaging (FCM)</strong> と、Appleが提供する <strong>Apple Push Notification Service (APNs)</strong> です。中国ではグレートファイアウォール等の事情でGoogleのサービスが使えないので、Baidu等が提供する同様のプッシュ通知配信サービスを使う必要があるようですが、そういった事情が無い限り、スマホへのリモート通知は<strong>FCM</strong>か<strong>APNs</strong>のどちらかで実現することになるでしょう。</p><p>FCMはAndroidとiOSのどちらにも通知を送信することができますが、APNsはiOSへの通知送信のみをサポートする仕様となっています。よって、<strong>FlutterでAndroid/iOSの両対応を行う場合、FCMを利用すればプッシュ通知配信サービスも1つに集約できる</strong>ことになります。</p><h2 id="プッシュ通知運用支援サービス"><a href="#プッシュ通知運用支援サービス" class="headerlink" title="プッシュ通知運用支援サービス"></a>プッシュ通知運用支援サービス</h2><p>プッシュ通知の運用方法として、FCMやAPNsと直接やりとりしてプッシュ通知を送る方法がひとつの方法です。それ以外の方法として、プッシュ通知の管理・配信に役立つ機能を提供する<strong>プッシュ通知運用支援サービス</strong>を利用する方法もあります。</p><p>こういったサービスは、アプリ運用者とプッシュ通知配信サービスの間に立って、ABテストや配信結果の分析、ユーザーの行動に基づいた配信など、自前で整えようと思うと色々とコストがかかる便利機能を提供するサービスです。Amazon Pinpointは、こういったサービスの1つです。</p><p>プッシュ通知を配信するために必要な基盤を提供するFCM等のサービスと、プッシュ通知の運用支援を行うPinpoint等のサービスが、ネット上だとどちらも「プッシュ通知サービス」と表現されていることが多く、混乱しやすいので注意しましょう。この記事では区別のために、前者を<strong>プッシュ通知配信サービス</strong>、後者を<strong>プッシュ通知運用支援サービス</strong>と呼びます。</p><h2 id="リモート通知が届くまでの流れ"><a href="#リモート通知が届くまでの流れ" class="headerlink" title="リモート通知が届くまでの流れ"></a>リモート通知が届くまでの流れ</h2><p>次にリモート通知がデバイスに届くまでの一連の流れもおさらいしておきます。ここでは、<strong>プッシュ通知運用支援サービスを挟まず、プッシュ通知配信サービス(FCM)と直接やりとりをする構成</strong>で説明をします。</p><h3 id="デバイストークンの発行と保持"><a href="#デバイストークンの発行と保持" class="headerlink" title="デバイストークンの発行と保持"></a>デバイストークンの発行と保持</h3><p>まず、通知を送る前の準備として必要なのが、デバイストークンの発行と保持です。</p><p><strong>デバイストークン</strong>はプッシュ通知配信サービスが通知を送るデバイスを特定するために利用する端末の識別子です。デバイストークンはプッシュ通知を送るときに絶対に必要になるもので、プッシュ通知配信サービス側で発行されます。デバイストークンの発行と保持の一般的な流れは下図のようになります。<br><img src="/images/20220323a/notification-Page-3.drawio.png" alt="デバイストークンの発行と保持" width="1200" height="682" loading="lazy"></p><p>実際のアプリでプッシュ通知を出す場合は、LINEのメッセージ受信のように、アプリの特定のユーザに対してプッシュ通知を送りたいという場合が多いと思います。しかし、プッシュ通知配信サービスが管理してくれるのはデバイストークン（とそれが表す端末）のみです。そのため、<strong>アプリ上のユーザと、そのユーザのデバイスに対して払い出されたデバイストークンの対応関係は何らかの形で管理する必要があります。</strong> Amazon Pinpoint等のプッシュ通知運用支援サービスには、ここの対応関係の保持をしてくれるものも多く存在します。</p><h3 id="プッシュ通知の送信"><a href="#プッシュ通知の送信" class="headerlink" title="プッシュ通知の送信"></a>プッシュ通知の送信</h3><p>デバイストークンの発行と保持ができたら、リモート通知を送る準備はOKです。</p><p>あとは、アプリのバックエンドで発生したイベントに応じて、通知を送りたいユーザのデバイストークン情報をプッシュ通知サービスに与えて、プッシュ通知を要求すれば、リモート通知がデバイスに送られます。<br><img src="/images/20220323a/notification-Page-4.drawio.png" alt="プッシュ通知の送信" width="1200" height="761" loading="lazy"></p><h1 id="Flutter-x-FCM-x-Amazon-Pinpoint-でプッシュ通知"><a href="#Flutter-x-FCM-x-Amazon-Pinpoint-でプッシュ通知" class="headerlink" title="Flutter x FCM x Amazon Pinpoint でプッシュ通知"></a>Flutter x FCM x Amazon Pinpoint でプッシュ通知</h1><p>最後に、具体例としてプッシュ通知配信サービスに <strong>Firebase Cloud Messaging（FCM）</strong>、プッシュ通知運用支援サービスに <strong>Amazon Pinpoint</strong> を使ってFlutterアプリにプッシュ通知送信をする仕組みを作る場合の構成や、大まかな実装の流れを説明します。</p><h3 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h3><p>全体の構成は以下のようになります。</p><img src="/images/20220323a/notification-4.png" alt="Flutter x FCM x Amazon Pinpointのシステム構成" width="1081" height="961" loading="lazy"><p>アプリバックエンドとプッシュ通知配信サービス（FCM）の間にAmazon Pinpointが入っています。デバイストークンとユーザIDの対応関係の保持はAmazon Pinpointで行います。特定ユーザに対するプッシュ通知の送信は以下のような流れとなります。</p><ol><li><strong>アプリバックエンド→Pinpoint：</strong> ユーザIDを指定してプッシュ通知送信要求</li><li><strong>Pinpoint→FCM：</strong> 指定されたユーザIDに紐づくデバイストークンへのプッシュ通知要求を行う</li></ol><h3 id="実装の流れ"><a href="#実装の流れ" class="headerlink" title="実装の流れ"></a>実装の流れ</h3><p>設定・実装の流れは以下のようになります。設定の細かいやり方は1、2年で割と変わってしまうので、この記事では示しません。できるだけ公式ドキュメントを確認しながら進めていくことを推奨します。（参考になりそうなドキュメントを一部貼っておきます）</p><ol><li>FlutterとFirebaseプロジェクトを新規作成して接続設定をする（<a href="https://firebase.flutter.dev/docs/overview">参考1</a>・<a href="https://firebase.flutter.dev/docs/messaging/overview">参考2</a>）<br>※iOSとAndroidでそれぞれ設定が必要です</li><li>Firebase→Flutterで通知送信できるように実装（<a href="https://firebase.flutter.dev/docs/messaging/usage">参考</a>・<a href="https://github.com/FirebaseExtended/flutterfire/tree/master/packages/firebase_messaging/firebase_messaging/example">サンプル実装</a>）</li><li>Pinpointプロジェクトの作成・プッシュ通知設定をしてFCMと接続（<a href="https://docs.aws.amazon.com/ja_jp/pinpoint/latest/userguide/gettingstarted.html">参考1</a>・<a href="https://docs.aws.amazon.com/ja_jp/pinpoint/latest/userguide/settings-push.html">参考2</a>・<a href="https://docs.aws.amazon.com/ja_jp/pinpoint/latest/userguide/messages-mobile.html">参考3</a>）</li><li>Pinpointとアプリバックエンドでやりとりする以下の処理を実装<ol><li>エンドポイント（デバイストークン）登録（<a href="https://docs.aws.amazon.com/ja_jp/pinpoint/latest/apireference/apps-application-id-endpoints-endpoint-id.html#apps-application-id-endpoints-endpoint-idput">参考</a>）</li><li>ユーザID指定でプッシュ通知を送信（<a href="https://docs.aws.amazon.com/ja_jp/pinpoint/latest/apireference/apps-application-id-users-messages.html#apps-application-id-users-messagespost">参考</a>）</li></ol></li></ol><p>Flutterは同じソースでAndroidとiOSを一気に対応できるところが魅力ですが、プッシュ通知はそれぞれのOS固有の仕様が深く関わってくる部分となるため、各OSに対して別々の対応が必要となる部分が出てきます。よって、<strong>それぞれの設定や実装が、①全体用(両方のOS用)のものか　②Android用のものか　③iOS用のものか、を整理して進めていくと混乱が起きづらいです。</strong></p><p>例えば、Firebaseのプロジェクト上ではAndroidアプリとiOSアプリを別々で登録し、それぞれについてFlutterアプリ側から接続する設定を行う必要があります。Firebaseから見ると、iOSとAndroidで別々でアプリがあり、それぞれに対してプッシュ通知を送るような形になっているということです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIGの越島です。&lt;br&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Firebase" scheme="https://future-architect.github.io/tags/Firebase/"/>
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="FirebaseCloudMessaging" scheme="https://future-architect.github.io/tags/FirebaseCloudMessaging/"/>
    
    <category term="Pinpoint" scheme="https://future-architect.github.io/tags/Pinpoint/"/>
    
  </entry>
  
  <entry>
    <title>TensorFlow Liteを使ったFlutterによるモバイル画像識別器を作ってみた</title>
    <link href="https://future-architect.github.io/articles/20220321a/"/>
    <id>https://future-architect.github.io/articles/20220321a/</id>
    <published>2022-03-20T15:00:00.000Z</published>
    <updated>2022-03-21T12:01:01.304Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>初めまして、2022年中途入社でTIG所属の岸下です。<br>本記事は<a href="/articles/20220315a/">Flutter連載</a>の5記事目になり、FlutterとTensorFlow Liteを使ったモバイル画像識別について執筆させて頂きます。</p><h1 id="TensorFlow-Liteとは"><a href="#TensorFlow-Liteとは" class="headerlink" title="TensorFlow Liteとは"></a>TensorFlow Liteとは</h1><p>近年ではご存じの方も多くなってきたかと思いますが、<a href="https://www.tensorflow.org/?hl=ja">TensorFlow</a>はGoogle社が開発を行っているディープラーニングを行うためのフレームワークの1種です。<br>TensorFlowを使えば、</p><ul><li>画像識別</li><li>物体検出</li><li>姿勢推定</li><li>…</li></ul><p>などのAI処理を手軽に行うことができます。</p><p>ただ、TensorFlowそのままだと計算コストが非常に高く、リアルタイムで推論を行うにはGPUが必須となってきます。そこで、TensorFlowには<a href="https://www.tensorflow.org/lite?hl=ja">TensorFlow Lite</a>（TFLite）と呼ばれるエッジデバイス・モバイル向けのフレームワークが公開されております。</p><p>TFLiteはCPU上で演算を行うことに特化しており、スマホなどのモバイル端末上でもほぼリアルタイム（CPU次第）でAI処理を行うことが可能となります。</p><h1 id="なぜTFLiteだとCPU上で演算可能なのか"><a href="#なぜTFLiteだとCPU上で演算可能なのか" class="headerlink" title="なぜTFLiteだとCPU上で演算可能なのか"></a>なぜTFLiteだとCPU上で演算可能なのか</h1><p>主にTFLiteでは<strong>量子化</strong>されたAIモデルを推論に用います。</p><p>AIモデルの中身では入力された特徴量に対して重み付け演算して、その結果を伝搬するためのネットワークが構築されております。この演算の際に本来であれば32bitの浮動小数点精度（float32）が用いられるのですが、それを8bitまで精度を落とすことで高速化を狙います。</p><p>これをint8量子化と呼び、TFLiteには他にもfloat16量子化や重み量子化などのオプションが存在します。簡単に言えば予測精度を若干犠牲にして、推論速度を高めようというのがモデルの量子化になります。（もちろん、量子化によって精度がガタ落ちするパターンもあります。）</p><p>詳しくは、<a href="https://www.tensorflow.org/lite/performance/quantization_spec?hl=ja">TensorFlow Lite 8ビット量子化の仕様</a>を読まれるとわかりやすいと思います。</p><h1 id="FlutterとTFLiteを用いてホットドッグ識別器を作ってみる"><a href="#FlutterとTFLiteを用いてホットドッグ識別器を作ってみる" class="headerlink" title="FlutterとTFLiteを用いてホットドッグ識別器を作ってみる"></a>FlutterとTFLiteを用いてホットドッグ識別器を作ってみる</h1><img src="/images/20220321a/eca77278-952d-59c0-aa1b-97aa98a5d453.png" alt="ホットドッグ画像" width="533" height="1113" loading="lazy"><p>前置きはここまでにして、早速本題へ入っていきましょう！<br>元ネタは海外ドラマの<a href="https://www.amazon.co.jp/gp/video/detail/B07D43SV5F/ref=atv_dp_season_select_s4">シリコンバレー</a>です。<br>ぜひドラマも見てみてください。</p><h2 id="モデルの準備"><a href="#モデルの準備" class="headerlink" title="モデルの準備"></a>モデルの準備</h2><p>モデルはPythonを使って学習し、量子化しました。<br>モデルの学習は<a href="https://www.tensorflow.org/tutorials/images/transfer_learning">転移学習と微調整</a>を参考に学習しています。<br>モデルの量子化は<a href="https://www.tensorflow.org/lite/performance/post_training_quantization?hl=ja">トレーニング後の量子化</a>を参考にpbモデルから.tfliteへint8量子化を行っています。</p><h3 id="assetsファイルの準備"><a href="#assetsファイルの準備" class="headerlink" title="assetsファイルの準備"></a>assetsファイルの準備</h3><p>Flutterのプロジェクトファイルに<code>assets</code>ディレクトリを作って、tfliteファイルを入れましょう。<br><code>pubspec.yaml</code>の変更も忘れずに。</p><figure class="highlight yaml"><figcaption><span>pubspec.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">tflite_img_recognition</span></span><br><span class="line"><span class="comment">#...途中省略</span></span><br><span class="line"><span class="attr">flutter:</span></span><br><span class="line"><span class="comment">#...途中省略</span></span><br><span class="line">  <span class="attr">assets:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">assets/hotdog.tflite</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">assets/labels.txt</span></span><br></pre></td></tr></table></figure><h2 id="使用ライブラリ"><a href="#使用ライブラリ" class="headerlink" title="使用ライブラリ"></a>使用ライブラリ</h2><ul><li><a href="https://pub.dev/packages/tflite_flutter">tflite_flutter</a>^0.9.0<ul><li>TFLiteの演算処理を担ってくれます。</li></ul></li><li><a href="https://pub.dev/packages/tflite_flutter_helper">tflite_flutter_helper</a>^0.3.1<ul><li>TFLiteモデルに入力するための画像前処理など便利ツール詰め合わせです。</li></ul></li><li><a href="https://pub.dev/packages/image_picker">image_picker</a>^0.8.4+10<ul><li>カメラやフォトライブラリから画像を取得するために使います。</li></ul></li><li><a href="https://pub.dev/packages/google_fonts/install">google_fonts</a>^2.3.1<ul><li>UIにそれっぽいフォントが欲しかったので使いました。</li></ul></li></ul><h2 id="tflite-flutterの注意点"><a href="#tflite-flutterの注意点" class="headerlink" title="tflite_flutterの注意点"></a>tflite_flutterの注意点</h2><p>tflite_flutterを使用する前にTFliteの動的ライブラリをワークフォルダにインストールする必要があります。<br><a href="https://pub.dev/packages/tflite_flutter#important-initial-setup--add-dynamic-libraries-to-your-app">Initial setup : Add dynamic libraries to your app</a></p><p>使用PCがLinuxであれば<code>install.sh</code>、windowsであれば<code>install.bat</code>を↑のpub.devページからダウンロードして、Flutterのプロジェクトフォルダに置いてください。置いた後、コマンドラインから<code>sh install.sh</code>や<code>insatall.bat</code>を入力してファイルの実行を行ってください。あとはよしなにやってくれます。</p><h2 id="画像識別クラス（classifier-dart）"><a href="#画像識別クラス（classifier-dart）" class="headerlink" title="画像識別クラス（classifier.dart）"></a>画像識別クラス（classifier.dart）</h2><p>画像を識別するためのClassifierクラスを作っていきます。</p><p>重要そうな部分だけ解説を入れていきます。</p><p>全体コードは<a href="https://github.com/bigface0202/Hotdog_or_NotHotdog/tree/master/tflite_img_recognition/lib">こちら</a>から参考にしてください。</p><h3 id="変数の宣言"><a href="#変数の宣言" class="headerlink" title="変数の宣言"></a>変数の宣言</h3><figure class="highlight dart"><figcaption><span>classifier.dart（変数の宣言）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推論エンジン</span></span><br><span class="line"><span class="keyword">late</span> Interpreter _interpreter;</span><br><span class="line"><span class="comment">// 推論用のオプション</span></span><br><span class="line"><span class="comment">// 例えば推論に使うCPUのスレッド数やAndroid/iOS用の特殊なライブラリの使用などを指定できる</span></span><br><span class="line"><span class="keyword">late</span> InterpreterOptions _interpreterOptions;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入力画像サイズ</span></span><br><span class="line"><span class="keyword">late</span> <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; _inputShape;</span><br><span class="line"><span class="comment">// 出力画像サイズ</span></span><br><span class="line"><span class="keyword">late</span> <span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; _outputShape;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出力結果格納バッファ</span></span><br><span class="line"><span class="keyword">late</span> TensorBuffer _outputBuffer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入力の型</span></span><br><span class="line"><span class="keyword">late</span> TfLiteType _inputType;</span><br><span class="line"><span class="comment">// 出力の型</span></span><br><span class="line"><span class="keyword">late</span> TfLiteType _outputType;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重みファイル名</span></span><br><span class="line"><span class="keyword">late</span> <span class="keyword">final</span> <span class="built_in">String</span> _modelName;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前処理に使用する正規化オプション</span></span><br><span class="line"><span class="keyword">final</span> NormalizeOp _preProcessNormalizeOp = NormalizeOp(<span class="number">0</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>まずは推論に使われる変数の宣言を行っています。<br>中身はコード内のコメントの通りで、注意する点としては</p><ul><li>コンストラクタ内で後から変数の初期化を行うため<code>late</code>を指定</li><li>出力結果の格納用に<code>TensorBuffer</code>を用意する必要</li></ul><p>などがあります。<br>他にも<code>NormalizeOp</code>は正規化オプションで、入力画像の正規化に使われます。<br>ちなみに<code>NormalizeOp</code>に入力する値は<code>NormalizeOp(mean, stddev)</code>になっています。平均と標準偏差ですね。</p><h3 id="コンストラクタ、モデルのロード"><a href="#コンストラクタ、モデルのロード" class="headerlink" title="コンストラクタ、モデルのロード"></a>コンストラクタ、モデルのロード</h3><figure class="highlight dart"><figcaption><span>classifier.dart（コンストラクタ、モデルのロード）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* コンストラクタ */</span></span><br><span class="line">Classifier(<span class="keyword">this</span>._modelName) &#123;</span><br><span class="line">  _interpreterOptions = InterpreterOptions();</span><br><span class="line">  _interpreterOptions.threads = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  loadModel();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* モデルのロード */</span></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; loadModel() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    _interpreter =</span><br><span class="line">        <span class="keyword">await</span> Interpreter.fromAsset(_modelName, options: _interpreterOptions);</span><br><span class="line"></span><br><span class="line">    _inputShape = _interpreter.getInputTensor(<span class="number">0</span>).shape;</span><br><span class="line">    _inputType = _interpreter.getInputTensor(<span class="number">0</span>).type;</span><br><span class="line">    _outputShape = _interpreter.getOutputTensor(<span class="number">0</span>).shape;</span><br><span class="line">    _outputType = _interpreter.getOutputTensor(<span class="number">0</span>).type;</span><br><span class="line"></span><br><span class="line">    _outputBuffer = TensorBuffer.createFixedSize(_outputShape, _outputType);</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Successfully model file is loaded.&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Something is happened during loading the models: <span class="subst">$e</span>&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>コンストラクタ内では<code>modelName</code>、<code>labelName</code>、<code>labelsLength</code>を受け取り、変数の初期化を行います。<br>また、モデルのロードを行います。</p><p><code>loadModel</code>では.tflite形式の重みファイルをロードします。ロードを待つために非同期の<code>await</code>が指定されていますね。<br>また、ロードしたモデルから<code>_inputShape</code>などの入力・出力サイズとデータの型（intやfloatなど）の情報を取得します。<br>今回は入力画像サイズが160x160で、int8量子化されたモデルを使うので型はuint8になります。<br>また、出力を格納する<code>_outputBuffer</code>もここで出力サイズと型を指定します。</p><h3 id="画像の前処理と推論"><a href="#画像の前処理と推論" class="headerlink" title="画像の前処理と推論"></a>画像の前処理と推論</h3><figure class="highlight dart"><figcaption><span>classifier.dart（画像から推論）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 画像の前処理 */</span></span><br><span class="line">TensorImage preProcess(TensorImage inputImage) &#123;</span><br><span class="line">  <span class="comment">// クロップサイズの指定</span></span><br><span class="line">  <span class="comment">// 入力画像の高さと幅のうち、小さい方が入力画像のクロップサイズとなる</span></span><br><span class="line">  <span class="built_in">int</span> cropSize = min(inputImage.height, inputImage.width);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 画像の前処理を行う</span></span><br><span class="line">  <span class="keyword">return</span> ImageProcessorBuilder()</span><br><span class="line">      .add(ResizeWithCropOrPadOp(cropSize, cropSize))</span><br><span class="line">      .add(ResizeOp(</span><br><span class="line">          _inputShape[<span class="number">1</span>], _inputShape[<span class="number">2</span>], ResizeMethod.NEAREST_NEIGHBOUR))</span><br><span class="line">      .add(_preProcessNormalizeOp)</span><br><span class="line">      .build()</span><br><span class="line">      .process(inputImage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 推論処理 */</span></span><br><span class="line"><span class="built_in">double</span> predict(Image image) &#123;</span><br><span class="line">  <span class="comment">// 入力の型を使ってTensorImageを初期化</span></span><br><span class="line">  TensorImage inputImage = TensorImage(_inputType);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 画像をロード</span></span><br><span class="line">  inputImage.loadImage(image);</span><br><span class="line">  <span class="comment">// inputImageに対して前処理を行う</span></span><br><span class="line">  inputImage = preProcess(inputImage);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 推論処理</span></span><br><span class="line">  _interpreter.run(inputImage.buffer, _outputBuffer.getBuffer());</span><br><span class="line">  <span class="keyword">return</span> _outputBuffer.getDoubleList()[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 推論エンジンのDestroy */</span></span><br><span class="line"><span class="keyword">void</span> close() &#123;</span><br><span class="line">  _interpreter.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここでは画像の前処理と推論処理を行います。</p><p>AIモデルの中では、画像の色合いや配色パターンの特徴から「この画像はホットドッグ」、もしくは「そうではない」の判断を下します。</p><p>そこで特徴を際立たせたり、無意味な特徴をかき消したりするなどの前処理を行うことによって推論の精度を高めることができます。<br>また、入力できる画像のサイズが決まっていたり、<code>TensorImage</code>の型で画像を入力する必要があったりするので、入力画像サイズを変更したり、<code>Image</code>型を<code>TensorImage</code>型でキャストしたりする必要があります。そのための前処理となります。前処理が行われた画像は推論エンジンへ入力されて、<code>_outputBuffer</code>へ結果が入力されます。</p><p><code>_outputBuffer</code>へは画像がホットドッグかどうかの確率が0～1（1だったらホットドッグで、0だったらホットドッグではない）の値で入力されています。</p><p>推論エンジンをDestroyする場合は、<code>close()</code>でいけます。</p><h2 id="画面の構築と画像の取得（main-dart-index-scree-dart-image-input-dart）"><a href="#画面の構築と画像の取得（main-dart-index-scree-dart-image-input-dart）" class="headerlink" title="画面の構築と画像の取得（main.dart, index_scree.dart, image_input.dart）"></a>画面の構築と画像の取得（main.dart, index_scree.dart, image_input.dart）</h2><p>画像を取得するための<code>image_input.dart</code>と画面を作っていきます。<br>重要そうな部分だけ解説を入れていきます。<br>画面の全体コードは<a href="https://github.com/bigface0202/Hotdog_or_NotHotdog/tree/master/tflite_img_recognition/lib">こちら</a>から参考にしてください。</p><h3 id="画像の取得とinitState"><a href="#画像の取得とinitState" class="headerlink" title="画像の取得とinitState"></a>画像の取得とinitState</h3><figure class="highlight dart"><figcaption><span>image_input.dart（画像の取得と初期化）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 取得した画像ファイル</span></span><br><span class="line">File? _storedImage;</span><br><span class="line"><span class="comment">// ImagePickerのインスタンス</span></span><br><span class="line"><span class="keyword">final</span> picker = ImagePicker();</span><br><span class="line"><span class="comment">// 推論結果のテキスト</span></span><br><span class="line"><span class="built_in">String</span> resultText = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">// ホットドッグかどうか</span></span><br><span class="line"><span class="built_in">bool</span> isHotdog = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">// 推論済みかどうか</span></span><br><span class="line"><span class="built_in">bool</span> isPredicted = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">// Classifierのインストラクタ</span></span><br><span class="line"><span class="keyword">late</span> Classifier _classifier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* カメラから画像を取得 */</span></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; _takePicture() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> imageFile = <span class="keyword">await</span> picker.pickImage(</span><br><span class="line">    source: ImageSource.camera,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (imageFile == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  setState(() &#123;</span><br><span class="line">    _storedImage = File(imageFile.path);</span><br><span class="line">  &#125;);</span><br><span class="line">  predict();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ギャラリーから画像を取得 */</span></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; _getImageFromGallery() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">final</span> imageFile = <span class="keyword">await</span> picker.pickImage(</span><br><span class="line">    source: ImageSource.gallery,</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (imageFile == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  setState(() &#123;</span><br><span class="line">    _storedImage = File(imageFile.path);</span><br><span class="line">  &#125;);</span><br><span class="line">  predict();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* initState */</span></span><br><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> initState() &#123;</span><br><span class="line">  <span class="keyword">super</span>.initState();</span><br><span class="line">  _classifier = Classifier(<span class="string">&#x27;hotdog.tflite&#x27;</span>, <span class="string">&#x27;assets/labels.txt&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>画像を取得するための<code>ImagePicker</code>や推論を行うための<code>Classifer</code>を事前に変数として定義しておきます。</p><p>また、image_pickerを使って画像の取得を行います。<br>カメラで画像を撮るのも、ギャラリーから取得するのも<code>source</code>が違うだけで処理は同じです。<br><code>setState</code>で<code>_storedImage</code>に<code>File</code>を代入し、この段階で<code>predict()</code>を呼び出して推論を行います。<br><code>predict()</code>は後ほど説明します。</p><p>また、<code>initState()</code>内で<code>Classifier</code>のコンストラクタを呼び出し、初期化します。</p><h3 id="推論"><a href="#推論" class="headerlink" title="推論"></a>推論</h3><figure class="highlight dart"><figcaption><span>image_input.dart（推論）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 推論処理 */</span></span><br><span class="line"><span class="keyword">void</span> predict() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="comment">// classifierへの入力はImage型なので、Image型にデコード</span></span><br><span class="line">  img.Image inputImage = img.decodeImage(_storedImage!.readAsBytesSync())!;</span><br><span class="line">  <span class="comment">// 推論を行う</span></span><br><span class="line">  <span class="built_in">double</span> confidence = _classifier.predict(inputImage);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 推論結果から識別を行う</span></span><br><span class="line">  <span class="keyword">if</span> (confidence &lt; <span class="number">0.5</span>) &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      isPredicted = <span class="keyword">true</span>;</span><br><span class="line">      isHotdog = <span class="keyword">true</span>;</span><br><span class="line">      resultText = <span class="string">&quot;Hotdog&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      isPredicted = <span class="keyword">true</span>;</span><br><span class="line">      isHotdog = <span class="keyword">false</span>;</span><br><span class="line">      resultText = <span class="string">&quot;Not Hotdog&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここでは、入力された画像に対して<code>_classifier</code>を用いて推論を行います。</p><p>入力画像は<code>Image</code>型なので、デコードを行います。ここで<code>_storedImage</code>はnull許容型として定義しているため、<code>!</code>をつけることでnullではないことを明記します。推論結果からは<code>confidence</code>（確信度）を取り出します。</p><p>今回の場合だと、0.5をしきい値としてホットドッグかそうではないかを判断しています。学習に使った画像数が数十枚なので、かなりガバガバです笑。</p><p>ホットドッグであれば、<code>isPredicted</code>を<code>true</code>にして、<code>resultText</code>には<code>Hotdog</code>を入れます。そうでなければ逆となります。</p><p>これでインタラクティブに推論できるように構築できました。レイアウトは適当なので、色々変えてみてもいいかもしれません。</p><h1 id="推論してみる"><a href="#推論してみる" class="headerlink" title="推論してみる"></a>推論してみる</h1><img src="/images/20220321a/fa8d1a39-a1b8-044e-4faa-04523e5bf10f.gif" alt="" width="532" height="1118" loading="lazy"><p>お！うまくホットドッグを識別できていますね！</p><p>推論処理自体は大体80～90msで結構スムーズに動いてそうです！<br>原作通りいけば、これで僕にもベンチャーキャピタルから話が…</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>TFLiteを使えばFlutterでもDeepLearningができます！</p><p>今回は2クラス分類でしたが、多クラス分類であれば<a href="https://github.com/am15h/tflite_flutter_helper/tree/master/example/image_classification">ライブラリ側が公開しているデモ</a>が参考になりそうですね。</p><p>ただ、多クラス分類になると後処理（confidenceが高い配列を抽出する、confidenceからラベルを選択するなど）が追加されるのでそこだけ注意です。</p><p>flutter_tfliteを使いましたが、まだver.1.0がリリースされていないので業務で使うには少し怖いかもですね🙄<br>というか、TFLiteもFlutterもGoogle謹製なので早くFlutter向けTFLite公式版を出してほしいところです🤔</p><p>また、null safetyが実装されたFlutter2.0リリース後のFlutterは初だったので<code>late</code>の存在や、変数宣言時の初期化等にかなり四苦八苦してしまいました…</p><p>機会があれば、次はFlutterでの物体検出や姿勢推定についてやってみたいと思います！</p><p>今回使用したコードはこちら：<a href="https://github.com/bigface0202/Hotdog_or_NotHotdog">https://github.com/bigface0202/Hotdog_or_NotHotdog</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;初めまして、2022年中途入社でTIG所属の岸下です。&lt;br&gt;本記事は&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="TensorFlow" scheme="https://future-architect.github.io/tags/TensorFlow/"/>
    
    <category term="画像処理" scheme="https://future-architect.github.io/tags/%E7%94%BB%E5%83%8F%E5%87%A6%E7%90%86/"/>
    
    <category term="tflite" scheme="https://future-architect.github.io/tags/tflite/"/>
    
  </entry>
  
  <entry>
    <title>Flutter Windows開発を試す</title>
    <link href="https://future-architect.github.io/articles/20220318a/"/>
    <id>https://future-architect.github.io/articles/20220318a/</id>
    <published>2022-03-17T15:00:00.000Z</published>
    <updated>2022-03-18T03:56:13.287Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20220315a/">Dart/Flutter連載</a> の3本目です。</p><p>FlutterのWindows対応が正式版になったので軽く試してみました。</p><h1 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h1><p>Flutterのいつものインストール手順でインストールします。</p><ul><li><a href="https://docs.flutter.dev/get-started/install">https://docs.flutter.dev/get-started/install</a></li></ul><p>手順としては次の通り</p><ul><li>Flutterのサイトからstableのzipをダウンロード</li><li>適当なフォルダーに展開してflutter/binフォルダにパスを通す（今回は<code>%USERPROFILE%/flutter/bin</code>でアクセスするようにしました）</li><li><code>flutter upgrade</code>で最新版にしてから、あとは<code>flutter doctor</code>でどんどん足りないコンポーネントを入れていく</li></ul><p>他の環境と違うのは、Visual Studio（Codeじゃない方）が必要なことですね。インストーラを起動したらC++を使ったデスクトップ開発を選択してインストールします。</p><img src="/images/20220318a/スクリーンショット_2022-03-06_092832.png" alt="スクリーンショット_2022-03-06_092832.png" width="1200" height="675" loading="lazy"><p>今回の検証ではなくてもよいのですが、IDEとしてはAndroid Studioが便利なのでそれも入れました。FlutterとDartのプラグインも入れます。全部緑色になると気持ち良いですね。</p><img src="/images/20220318a/image.png" alt="Visual Studioインストール" width="1200" height="311" loading="lazy"><h1 id="Windowsデスクトップの有効化"><a href="#Windowsデスクトップの有効化" class="headerlink" title="Windowsデスクトップの有効化"></a>Windowsデスクトップの有効化</h1><p>CLI上でflutterコマンドを使って有効化します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ flutter config --enable-windows-desktop</span><br><span class="line">Setting <span class="string">&quot;enable-windows-desktop&quot;</span> value to <span class="string">&quot;true&quot;</span>.</span><br><span class="line"></span><br><span class="line">You may need to restart any open editors <span class="keyword">for</span> them to <span class="built_in">read</span> new settings.</span><br></pre></td></tr></table></figure><p>既存のプロジェクトでは次のコマンドでWindowsデスクトップのターゲットを追加できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; flutter create --platforms=windows .</span><br><span class="line">Recreating project ....</span><br><span class="line">:</span><br><span class="line">All <span class="keyword">done</span>!</span><br><span class="line">In order to run your application, <span class="built_in">type</span>:</span><br><span class="line"></span><br><span class="line">  $ <span class="built_in">cd</span> .</span><br><span class="line">  $ flutter run</span><br><span class="line"></span><br><span class="line">Your application code is <span class="keyword">in</span> .\lib\main.dart.</span><br></pre></td></tr></table></figure><h1 id="プロジェクトの作成とビルド"><a href="#プロジェクトの作成とビルド" class="headerlink" title="プロジェクトの作成とビルド"></a>プロジェクトの作成とビルド</h1><p>Android Studioでプロジェクトを作ります。New Flutter Pojectでプロジェクトを作成します。僕はターゲットの追加でLinuxとかmacOSも試しに追加してみたのでいろいろプラットフォームが多いですが、いくらつけてもAndroid Studio上で選択できるわけではありません。クロスコンパイルとかできると便利なんですけどね。</p><img src="/images/20220318a/image_2.png" alt="Android Studioプロジェクト作成" width="862" height="660" loading="lazy"><p>プロジェクトができたら、上段から<code>Windows (Desktop)</code>を選んで実行すればWindowsのアプリがビルドされます。</p><img src="/images/20220318a/image_3.png" alt="Windows (Desktop)の選択" width="462" height="203" loading="lazy"><p>サンプルにテキストフィールドだけ追加してみた感じのものがこちらです。何事もなく普通ですね。IMEも普通に使える。<code>flutter build windows</code>でプロダクションビルドをしてみました。</p><p>Qt(Widgets)だとランタイム入れて50MBぐらいになったと思うのですが、<code>build/Release/runner</code>だと21MBですね。フォントが1.5MB、アイコンが280KB、ランタイムが14MB、app.soというDartコードをビルドして作られたモジュールらしきものが4MB。ランチャーが75KB。zip圧縮すると8MBぐらいなので配布も楽勝ですね。Electronだと展開後は数100MB、圧縮しても1環境ごとに50MB（macOSのユニバーサルバイナリとかWindowsの32/64ビット両対応をやると2倍）なので1/10ぐらい。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ du -h</span><br><span class="line">1.9M    ./data/flutter_assets</span><br><span class="line">6.5M    ./data</span><br><span class="line">21M     .</span><br></pre></td></tr></table></figure><img src="/images/20220318a/image_4.png" alt="デモ画面" width="750" height="478" loading="lazy"><p>リソース使用量はかなり少ないですね。GPUはモバイルのRyzen 4900HSの内蔵GPUなのでそこまで強いわけじゃないですが、負荷はかなり小さいです。メモリ使用量もQt並み。そのうちソフトウェアの二酸化炭素排出量が・・・みたいな話になったらFlutterは良さそう。</p><img src="/images/20220318a/image_5.png" alt="PCリソース利用量" width="1200" height="178" loading="lazy"><h1 id="ついでにLinuxのコードも見てみる"><a href="#ついでにLinuxのコードも見てみる" class="headerlink" title="ついでにLinuxのコードも見てみる"></a>ついでにLinuxのコードも見てみる</h1><p>安定版になったのはWindowsだけですが、Linuxも興味本位で覗いてみました。ビルド設定ファイルを見ると、GTKを使っていているようですね。GLFWでOpenGLベースのものも選べると。GTKなのでUbuntuとかのLinuxデスクトップであればIME対応も問題なさそうです。</p><p><a href="https://github.com/flutter/engine">https://github.com/flutter/engine</a></p><figure class="highlight sh"><figcaption><span>/main/shell/platform/linux/BUILD.gn</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">group(<span class="string">&quot;linux&quot;</span>) &#123;</span><br><span class="line">  deps = [</span><br><span class="line">    <span class="string">&quot;:flutter_linux_gtk&quot;</span>,</span><br><span class="line">    <span class="string">&quot;:publish_headers_linux&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">if</span> (build_glfw_shell) &#123;</span><br><span class="line">    deps += [</span><br><span class="line">      <span class="string">&quot;:flutter_linux_glfw&quot;</span>,</span><br><span class="line">      <span class="string">&quot;//flutter/shell/platform/glfw:publish_headers_glfw&quot;</span>,</span><br><span class="line">      <span class="string">&quot;//flutter/shell/platform/glfw/client_wrapper:publish_wrapper_glfw&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ライブラリ対応"><a href="#ライブラリ対応" class="headerlink" title="ライブラリ対応"></a>ライブラリ対応</h1><p>なお、Flutterのライブラリはマルチプラットフォーム対応はパッケージごとにだいぶ差がありますし、Windowsデスクトップ対応はその中でもかなり少ないです。例えば、人気のWebViewのパッケージの<a href="https://pub.dev/packages/webview_flutter">webview_flutter</a>とか<a href="https://pub.dev/packages/flutter_inappwebview">flutter_inappwebview</a>は非対応ですが、flutter.dev公式の<a href="https://pub.dev/packages/webview_flutter_platform_interface">webview_flutter_platform_interface</a>なんかもでてきていて、ちょっとずつ使えるライブラリなんかも増えていくんじゃないかなと思います。</p><h1 id="他のフレームワークとの比較"><a href="#他のフレームワークとの比較" class="headerlink" title="他のフレームワークとの比較"></a>他のフレームワークとの比較</h1><p>QtとかElectronだと、ウインドウとは独立して「アプリケーション」やら「メインプロセス」といったものがあり、ウインドウはその付属物という世界観となっています。DelphiとかWin32の直利用とかもみんなそうですね。なので1つのアプリケーションで多数のウィンドウを持つMDIみたいなのもあったりはしますが、Flutterは元々がモバイルの世界観なのか、アプリケーション==ウインドウというところはちょっと違うなという感じがありますが、それはまあそういうもんだな、という感じで受け入れられそうな気はします。</p><p>Visual Studioだけじゃなくて、QtみたいにWindows SDKも使えたり、クロスプラットフォームビルドもできたりするといいのになぁ、と思ったりはしますが、なにより、使いやすい言語で開発できて、クロスプラットフォームでAndroidやiOSにも展開できて、というのは魅力的です。類似のソリューションもいくつかありますが、バイナリも小さくメモリ使用量も少ないところがよさそうですね。<a href="https://tauri.studio/docs/about/intro">Tauri</a>も面白そうですけどね。</p><p>ウェブサービスを開発しつつ、コンパニオンアプリをモバイルのついでにデスクトップ版も作るよ、というケースや、長時間動かしたあとの安定性とかはわかりませんがキオスク端末とかのWindows IoTみたいな長く使うOS環境で少ないメモリで動かすには良いかもしれません。</p><h1 id="タスクトレイ常駐型アプリを作ってみる"><a href="#タスクトレイ常駐型アプリを作ってみる" class="headerlink" title="タスクトレイ常駐型アプリを作ってみる"></a>タスクトレイ常駐型アプリを作ってみる</h1><p>ほとんどのシステムがウェブブラウザをインタフェースとして利用するウェブアプリケーションという時代にあって、ローカルでアプリケーションをわざわざ作る理由というのは、単体アプリケーションとして使えるほうが便利というもの以外に、システムに統合される便利UIを追加で提供する、みたいな理由があります。例えば、Google Driveはデスクトップ版のツールを入れたりするとローカルとの同期を取ったりできますし、AdobeやJetBrainsはアプリケーションの更新をダウンロードするインタフェースとして常駐プログラムを提供していたりします。</p><p>Flutterは使用するリソースがマルチプラットフォームな環境の割には少なそうなので、この手の常駐アプリにはよさそうです。常駐アプリでリソースを食いまくるのはみんな嫌がりますしね。</p><p>まず、Flutterはアプリ＝ウインドウ＝アクティブなので、ウインドウ非表示のままアプリを実行し続けるということがデフォルトではできません。そこは、パッケージの<a href="https://pub.dev/documentation/bitsdojo_window/latest/">bitsdojo_window</a>の力を借りる必要があります。また、システムトレイは<a href="https://pub.dev/packages/system_tray">system_tray</a>を利用しました。こちらはシステムトレイにアイコンを表示しつつ、コンテキストメニューを表示したり、アイコンを動的に切り替えたりといったことができます。</p><p>今回はWindowsに特化して説明しますが、各ライブラリはmacOSやLinuxにも対応しています。そちらは紹介しませんので興味のある方はそれぞれのライブラリのドキュメントを参照してください。</p><p>まずライブラリを追加します。</p><figure class="highlight yaml"><figcaption><span>pubspec.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">system_tray:</span> <span class="string">^0.1.0</span></span><br><span class="line">  <span class="attr">bitsdojo_window:</span> <span class="string">^0.1.1+1</span></span><br></pre></td></tr></table></figure><p>まずは、bitsdojo_window側からやっていきます。WindowsであればWindows用のmain.cppの先頭に次の2行を足します。これでデフォルトでウインドウが非表示になります。サンプルだとCUSTOM_FRAMEだかもつけていますが、これをするとウインドウタイトルが消えて終了が面倒なので消しました。</p><figure class="highlight cpp"><figcaption><span>windows/runner/main.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitsdojo_window_windows/bitsdojo_window_plugin.h&gt;</span></span></span><br><span class="line"><span class="keyword">auto</span> bdw = <span class="built_in">bitsdojo_window_configure</span>(BDW_HIDE_ON_STARTUP);</span><br></pre></td></tr></table></figure><p>ウインドウが表示される際のサイズなどを設定します。サンプルだと最後にappWindow.show()をしていますが、常駐なのでそこの行は消しました。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:bitsdojo_window/bitsdojo_window.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line"></span><br><span class="line">  doWhenWindowReady(() &#123;</span><br><span class="line">    <span class="keyword">final</span> initialSize = Size(<span class="number">600</span>, <span class="number">450</span>);</span><br><span class="line">    appWindow.minSize = initialSize;</span><br><span class="line">    appWindow.size = initialSize;</span><br><span class="line">    appWindow.alignment = Alignment.center;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この後はappWindow経由でウインドウを消したり表示したりができます。</p><p>次にsystem_tray周りのコードを追加します。まずはimportを足します。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:system_tray/system_tray.dart&#x27;</span>;</span><br></pre></td></tr></table></figure><p>ウインドウのステートのクラス、あるいはstatelessであればそのウィジェットそのものに以下のコードを足します。ここではコンテキストメニューは消していますが、サンプルにはコンテキストメニューの使い方もあります。ここはクリックされたらウインドウを表示しているだけですが、本来ならメインウインドウの閉じるが押されたらhide()する、表示時にアイコンをクリックしたらhide()するといったコードも必要でしょう（前者をどうやるかはまだ調べてません）。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@overrideclass</span> _MyHomePageState <span class="keyword">extends</span> State&lt;MyHomePage&gt; &#123;</span><br><span class="line"><span class="keyword">final</span> SystemTray _systemTray = SystemTray(); <span class="comment">// システムトレイ</span></span><br><span class="line"><span class="keyword">final</span> AppWindow _appWindow = AppWindow();    <span class="comment">// ウインドウ表示で使う</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> initState() &#123;</span><br><span class="line">  <span class="keyword">super</span>.initState();</span><br><span class="line">  initSystemTray();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; initSystemTray() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">String</span> path = <span class="string">&#x27;assets/idea.ico&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> _systemTray.initSystemTray(</span><br><span class="line">    title: <span class="string">&quot;system tray&quot;</span>,</span><br><span class="line">    iconPath: path,</span><br><span class="line">    toolTip: <span class="string">&quot;How to use system tray with Flutter&quot;</span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  _systemTray.registerSystemTrayEventHandler((eventName) &#123;</span><br><span class="line">    <span class="keyword">if</span> (eventName == <span class="string">&quot;leftMouseDown&quot;</span>) &#123;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (eventName == <span class="string">&quot;leftMouseUp&quot;</span>) &#123;</span><br><span class="line">      _appWindow.<span class="keyword">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>アイコンはこちら↓のを使わせていただいております。Creative Commons By-SAです。いつも通り、pubspec.yamlにアセットとして追加します。</p><p><a href="https://www.flaticon.com/free-icons/professions-and-jobs">Professions and jobs icons created by Yogi Aprelliyanto - Flaticon</a></p><p>ビルドして動かしてみると、以下のようにアイコンがトレイに表示され、クリックしたら表示されることがわかります。</p><img src="/images/20220318a/image_6.png" alt="アイコン" width="229" height="104" loading="lazy"><p>うまく用途にあうニーズが見つけられればFlutterでやろう！というのは説得できそうな感じがします。使えるチャンスをうかがっていきたいですね。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20220315a/&quot;&gt;Dart/Flutter連載&lt;/a&gt; の3本目です。&lt;/p&gt;
&lt;p&gt;FlutterのWindows対応が正式版になったので軽く試してみました。&lt;/p&gt;
&lt;h1 id=&quot;インストール&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="Windows" scheme="https://future-architect.github.io/tags/Windows/"/>
    
    <category term="デスクトップアプリ" scheme="https://future-architect.github.io/tags/%E3%83%87%E3%82%B9%E3%82%AF%E3%83%88%E3%83%83%E3%83%97%E3%82%A2%E3%83%97%E3%83%AA/"/>
    
  </entry>
  
  <entry>
    <title>VSCode DevToolsによるWidget Buildタイムラインの確認</title>
    <link href="https://future-architect.github.io/articles/20220317a/"/>
    <id>https://future-architect.github.io/articles/20220317a/</id>
    <published>2022-03-16T15:00:00.000Z</published>
    <updated>2022-03-18T01:48:29.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIGの藤田です。<br><a href="/articles/20220315a/">Dart/Flutter連載</a> の2日目として、VSCodeの<a href="https://docs.flutter.dev/development/tools/devtools/overview">DevTools</a>を使用したWidget Buildの可視化についてご紹介します。</p><p>Flutterアプリの開発では、Widgetのビルド単位を考えてコードを記述/改修すると思います。<br><a href="https://docs.flutter.dev/development/tools/android-studio#show-performance-data">AndroidStudioのPerformance機能</a>を使ってWidgetのリビルドを確認している例は見かけるのですが、VSCodeでの確認方法を見かけなかったため調べてみました。予想以上に高機能で、今回使わなかった機能も含めて活用どころがありそうです。</p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>１. <a href="#vscode-dart-devtools">VSCode Dart DevTools</a><br>２. <a href="#widget-build%E3%82%92%E3%82%BF%E3%82%A4%E3%83%A0%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%A7%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B">Widget Buildをタイムラインで確認する</a><br>３. <a href="#%E5%AE%9F%E8%A3%85%E3%81%AEwidget-build%E3%81%B8%E3%81%AE%E5%BD%B1%E9%9F%BF%E3%82%92%E7%A2%BA%E8%AA%8D">実装のWidget Buildへの影響を確認</a></p><h1 id="VSCode-Dart-DevTools"><a href="#VSCode-Dart-DevTools" class="headerlink" title="VSCode Dart DevTools"></a>VSCode Dart DevTools</h1><p>Flutter公式の<a href="https://docs.flutter.dev/development/tools/devtools/overview">DevTools</a>は、VSCodeの<a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.dart-code">Dart Extension</a>, <a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter">Flutter Extension</a>のインストールと共にインストールされます。レイアウト構造を可視化/編集できる<a href="https://docs.flutter.dev/development/tools/devtools/inspector">Flutter Inspector</a> がよく使われると思いますが、他にもCPUやメモリ、Networkの可視化など多機能です。今回は、<a href="https://docs.flutter.dev/development/tools/devtools/performance">Performance view</a>機能を使ってWidget Buildをタイムラインで確認してみます。</p><h1 id="Widget-Buildをタイムラインで確認する"><a href="#Widget-Buildをタイムラインで確認する" class="headerlink" title="Widget Buildをタイムラインで確認する"></a>Widget Buildをタイムラインで確認する</h1><ol><li>devTools起動: <a href="https://docs.flutter.dev/development/tools/devtools/vscode">公式手順</a>に従って、アプリの起動後にDevToolsを起動します。</li><li>DevToolsのPerformanceタブを開きます。<img src="/images/20220317a/performance_tab.png" alt="performance_tab.png" width="1200" height="355" loading="lazy"></li><li>「Enhance Tracing」から、Widget Builds, Layouts, PaintsをTrackするように設定します。<img src="/images/20220317a/EnhanceTracing.png" alt="EnhanceTracing.png" width="797" height="262" loading="lazy"></li><li>アプリを実行すると、タイムラインにFrameごとの処理時間が表示されます（#１）。Frame Time(UI)は、Dart VM内でビルドされるLayer treeと描画コマンドを含む軽量オブジェクトの作成時間を表しています。これらオブジェクトがGPUに渡されることでレンダリングが行われ、その実行時間が、Frame Time(Raster)になります。</li><li>バーグラフをクリックすると、UIイベント, Raster(GPU)イベントそれぞれの内訳を確認することができます。UIイベントは、実装Dartコードを直接反映していて、Widgetレベルで実行イベントを確認できます。（#2）</li><li>Raster(GPU)イベント（#3）は、UIイベントから作成されます。アプリのパフォーマンスを考える上では、UIグラフに課題がなくても、GPUグラフに課題があることもあります。</li><li>「Performance Overlay」ボタン（#4）をONにすると、アプリ画面に重ねる形で、UIグラフとGPUグラフを確認できます。</li></ol><p>【補足】 公式ページに紹介される<a href="https://docs.flutter.dev/perf/rendering/ui-performance#diagnosing-performance-problems">パフォーマンス診断</a>では、UIスレッドとGPUスレッドのプロファイルから実装に落とし込んで対処することを説明しており、実機を使用した<a href="https://docs.flutter.dev/testing/build-modes#profile">profile mode</a>にて行うことを前提としています。今回はiOSシミュレータにて、DevToolsの使い方と、ソースコードがプロファイルに与える影響の確認方法を見てみたいと思います。</p><img src="/images/20220317a/image.png" alt="image.png" width="963" height="749" loading="lazy"><h1 id="実装のWidget-Buildへの影響を確認"><a href="#実装のWidget-Buildへの影響を確認" class="headerlink" title="実装のWidget Buildへの影響を確認"></a>実装のWidget Buildへの影響を確認</h1><p>例として、アニメーションの実装方法によるWidget Buildパタンの違いをタイムラインで確認します。今回はiOSシミュレータ（iPhone 13）を使用しています。</p><p>１） 全体ビルド（アンチパタン）<br>bodyのアニメーションのためにsetState()することで、レイアウト全体をビルドしてしまっています。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(App());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Page(),</span><br><span class="line">      checkerboardOffscreenLayers: <span class="keyword">true</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  PageState createState() =&gt; PageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Page</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">late</span> <span class="keyword">final</span> _controller = AnimationController(vsync: <span class="keyword">this</span>, duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _controller.addListener(() =&gt; setState(() &#123;&#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&#x27;test animation&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Opacity(</span><br><span class="line">          opacity: _controller.value,</span><br><span class="line">          child: Image.asset(<span class="string">&#x27;assets/dash.png&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          _controller</span><br><span class="line">            ..reset()</span><br><span class="line">            ..forward();</span><br><span class="line">        &#125;,</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.refresh),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>画面はこのようになります。Overlayされたグラフの上段がRaster(GPU)スレッド, 下段がUIスレッドを表しています。16msおきに補助ラインが引かれていますが、<a href="https://docs.flutter.dev/perf/rendering/ui-performance#interpreting-the-graphs">おおよそ16msを超えるFrameは描画されずにJankとなります</a>。UIスレッド側に多くのJankが見られることから、この実装には課題がありそうだと分かります。</p><img src="/images/20220317a/83854e5c-c719-6331-6f55-ef03e48c3359.gif" alt="" width="560" height="2000" loading="lazy"><p>Frame実行時間のタイムラインを見ても、UIグラフに赤色のJank（slow frame）が多くなっています。<br><img src="/images/20220317a/test1.png" alt="test1.png" width="1200" height="141" loading="lazy"></p><p>UIイベントの内訳を見てみましょう。連続する2Frameをクローズアップしていますが、アニメーションには関係のないAppBarやFloatingActionButtonも、Frame毎にビルドしてしまっていることが分かります。今回はビルド対象が小さいですが、対象が大きければ更にコストがかかりそうです。</p><img src="/images/20220317a/test1_ui.png" alt="test1_ui.png" width="1200" height="457" loading="lazy"><p>GPUイベントも確認してみます。こちらは、赤いグラフが見られなかったことからも大きな課題はなさそうです。</p><img src="/images/20220317a/test1_raster.png" alt="test1_raster.png" width="1200" height="339" loading="lazy"><p>２） コードの改善<br>Frame毎のビルド範囲をアニメーション部分に限定するには<a href="https://api.flutter.dev/flutter/widgets/AnimatedBuilder-class.html">AnimatedBuilder</a>等を用いる方法があります。ただし今回のケースは、以下のように<a href="https://api.flutter.dev/flutter/widgets/Image-class.html">Image</a> widgetを使用することで、Frame毎のビルドをなくすことができます。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(App());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Page(),</span><br><span class="line">      checkerboardOffscreenLayers: <span class="keyword">true</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  PageState createState() =&gt; PageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Page</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">late</span> <span class="keyword">final</span> _controller = AnimationController(vsync: <span class="keyword">this</span>, duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>));</span><br><span class="line">  <span class="keyword">late</span> <span class="keyword">final</span> _animation = CurvedAnimation(parent: _controller, curve: Curves.easeIn);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: <span class="keyword">const</span> Text(<span class="string">&#x27;test animation&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Image.asset(</span><br><span class="line">          <span class="string">&#x27;assets/dash.png&#x27;</span>,</span><br><span class="line">          opacity: _animation,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          _controller</span><br><span class="line">            ..reset()</span><br><span class="line">            ..forward();</span><br><span class="line">        &#125;,</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.refresh),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>アプリ画面は以下になります。下段UIスレッドから、Jankがほぼなくなりました。少し見にくいですが、各グラフに平均実行時間が表示されていて、GPUスレッドは5.4ms/frame, UIスレッドは7.9ms/frameとなっています。（改修前は、GPUスレッドが4.1ms/frame, UIスレッドが19.7ms/frameでした。）<br><img src="/images/20220317a/5538b10a-158a-bd17-b27f-09f0f4c22222.gif" alt="" width="480" height="1000" loading="lazy"></p><p>Frame実行時間のタイムラインを見ても、UIグラフに赤色のJank（slow frame）が見られません。平均43FPSとなっており、改修前の28FPSより改善しています。<br><img src="/images/20220317a/test4.png" alt="test4.png" width="1200" height="129" loading="lazy"></p><p>UIイベントの内訳を見てみると、Frame毎の「Build」処理自体がなくなっていることが分かります。<br><img src="/images/20220317a/test4_ui.png" alt="test4_ui.png" width="1200" height="455" loading="lazy"></p><p>GPUイベントについては、画面Overlayグラフからもわかるように、改修前より少し実行時間が増えていますが、Jankは見られず課題はなさそうです。<br><img src="/images/20220317a/test4_raster.png" alt="test4_raster.png" width="1200" height="320" loading="lazy"></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>VSCodeのDevToolsを使って、Dart VM上のDartコード実行によるビルド（UIスレッド）と、GPU上のレンダリング(Rasterスレッド)のFrame毎の実行時間をタイムラインで可視化できます。</li><li>Jank　Frameを１つの指標として、UIスレッド(Dartコード)の内訳を確認することで、実装コードの改善に利用できます。</li><li>効果的なパフォーマンス改善には、他の観点も必要となります。<ul><li>I/O処理（IOスレッド）は、パフォーマンス上コストが高くUIスレッドやGPUスレッドをブロックするため、その考慮が必要。</li><li>CPUやメモリメトリクスの考慮（DevToolsのうち、今回取り上げていない機能）</li><li>実機（ユーザーが使用し得る一番遅いデバイス）での確認</li></ul></li><li>パフォーマンス改善については、<a href="https://docs.flutter.dev/perf">公式ページ</a>も参考に、今回紹介できなかった機能も活用していきたいところです。</li></ul><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><ul><li><a href="https://docs.flutter.dev/perf/rendering">Improving rendering performance</a><ul><li>Flutter公式サイトにおける、レンダリングパフォーマンスのページ。</li></ul></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIGの藤田です。&lt;br&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="Flutter" scheme="https://future-architect.github.io/tags/Flutter/"/>
    
    <category term="VSCode" scheme="https://future-architect.github.io/tags/VSCode/"/>
    
  </entry>
  
</feed>
