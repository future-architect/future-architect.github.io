<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Future Tech Blog - フューチャーアーキテクト</title>
  
  <subtitle>フューチャー開発者ブログ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2020-03-23T01:11:28.783Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SAMを使ったローカルテスト（Go編）</title>
    <link href="https://future-architect.github.io/articles/20200323/"/>
    <id>https://future-architect.github.io/articles/20200323/</id>
    <published>2020-03-23T00:56:50.000Z</published>
    <updated>2020-03-23T01:11:28.783Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載</a> の第1弾です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG/DXチームの栗田です。AWSのLambdaに代表されるサーバレスアプリは実行時のみ稼働するため、サーバー稼働によるあらゆるコストから解放され、システム開発の工数を減らすことができます。例えば何らかのAPIを提供する場合でも、API GatewayとLambdaを組み合わせることで提供可能です。</p><p>一方で、サーバーレスアプリを開発するとき、ローカルでのテストが課題となります。例えばLambda + DynamoDBであれば、<a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">先の連載</a>の手法を参考に、テストコードを書くことで解決します。一方で…</p><ul><li>API GatewayからLambdaの着火もテストした上でDynamoDBまで書き込ませたい</li><li>なんならAPI Gaweway自体もLambdaで叩きたい</li></ul><p>となると、少々ハードルがあがります。この問題を解決してくれるのが、<a href="https://docs.aws.amazon.com/ja_jp/serverless-application-model/latest/developerguide/what-is-sam.html" target="_blank" rel="noopener">AWS Serverless Application Model(AWS SAM)</a>です。SAMはローカルにLambda実行用のdockerを立ち上げ、<code>127.0.0.1:3000</code>を叩くと指定した実行ファイルをdocker上で動作させることができるツールです。今回はSAMを使って API Gateway + Lambda (Go) + DynamoDBのローカルテストをする手法を紹介します。</p><p>なお、今回ターゲットとする構成は、Lambda→AWS Gateway→Lambda→DynamoDBのような構成です。例えばKinesisやS3から非同期な入力をトリガーにLambdaを着火し、特定のAPIを叩くようなケースです。便宜上、API Gatewayを叩くのをLambda A、API Gatewayから呼び出されるのをLambda Bとします。</p><img src="/images/20200323/photo_20200323_01.png" class="img-middle-size"><p>これをSAMとDynamoDB localを使ってテストしますが、想定する最終的なテスト環境としては以下のような形になります。青で示した<code>lambda_b.go</code>から127.0.0.1:8000を叩くのが、前述した<a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">先の連載</a>の手法です。<code>lambda_a.go</code>から<code>127.0.0.1:3000</code>を叩くのもGoから特定のAPIを叩く処理になるので、ここでは割愛します。つまり、今回記述するのは<code>127.0.0.1:3000</code>を叩いたらLambdaが着火し、DynamoDBに書き込むまでの部分になります。</p><img src="/images/20200323/photo_20200323_02.png" class="img-middle-size"><h1 id="環境とターゲット"><a href="#環境とターゲット" class="headerlink" title="環境とターゲット"></a>環境とターゲット</h1><p>今回は、下記の環境で動かしました。</p><table><thead><tr><th align="left">項目</th><th align="left">バージョン等</th><th align="left">入手方法</th></tr></thead><tbody><tr><td align="left">OS</td><td align="left">macOS Mojave 10.15.5</td><td align="left"></td></tr><tr><td align="left">awscli</td><td align="left">1.16.209</td><td align="left"><code>$ pip install awscli</code>。テストだけなら無くても動くかも。</td></tr><tr><td align="left">aws-sam-cli</td><td align="left">0.43.0</td><td align="left"><code>$ pip install aws-sam-cli</code></td></tr><tr><td align="left">Docker</td><td align="left">19.03.5 build 633a0ea</td><td align="left"></td></tr><tr><td align="left">go</td><td align="left">1.13.5</td><td align="left"></td></tr></tbody></table><p>WebAPIのリターンとして、下記を期待することにします。（ただし処理はベタ書きです）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"Company"</span>: <span class="string">"Future"</span>, <span class="attr">"Year"</span>: <span class="string">"1989"</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="構築"><a href="#構築" class="headerlink" title="構築"></a>構築</h1><h2 id="ディレクトリ構成"><a href="#ディレクトリ構成" class="headerlink" title="ディレクトリ構成"></a>ディレクトリ構成</h2><p>次のような構成とします。最初に宣言したとおり、今回APIを叩くLambdaについては触れません。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apigw  </span><br><span class="line">  ├─Makefile</span><br><span class="line">  ├─lambdab</span><br><span class="line">  |   ├─lambdab.go          <span class="comment"># APIから呼ばれるLambdaのコード</span></span><br><span class="line">  |   └─lambdab_test.go     <span class="comment"># テストコード</span></span><br><span class="line">  ├─template.yaml</span><br><span class="line">  └─testdata</span><br><span class="line">      └─db_table.json       <span class="comment"># DBテーブル作成用のコード</span></span><br></pre></td></tr></table></figure><h2 id="AWS-SAMプロジェクトの用意"><a href="#AWS-SAMプロジェクトの用意" class="headerlink" title="AWS SAMプロジェクトの用意"></a>AWS SAMプロジェクトの用意</h2><p>SAMのコマンドを使用して、Templatesを用意します。独自のテンプレートを用意してくることも可能ですが、今回は簡単かつシンプルにということでAWS Quick Start Templatesを使用します。<br>先の構成のディレクトリ内で、作業を進めます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ sam init --runtime go1.x --name apigw</span><br><span class="line">Which template <span class="built_in">source</span> would you like to use?</span><br><span class="line">        1 - AWS Quick Start Templates</span><br><span class="line">        2 - Custom Template Location</span><br><span class="line">Choice: 1</span><br><span class="line"></span><br><span class="line">Cloning app templates from https://github.com/awslabs/aws-sam-cli-app-templates.git</span><br><span class="line"></span><br><span class="line">-----------------------</span><br><span class="line">Generating application:</span><br><span class="line">-----------------------</span><br><span class="line">Name: apigw</span><br><span class="line">Runtime: go1.x</span><br><span class="line">Dependency Manager: mod</span><br><span class="line">Application Template: hello-world</span><br><span class="line">Output Directory: .</span><br><span class="line"></span><br><span class="line">Next steps can be found <span class="keyword">in</span> the README file at ./apigw/README.md</span><br><span class="line">$ ls</span><br><span class="line">apigw</span><br><span class="line">$ ls apigw/</span><br><span class="line">Makefile      README.md     hello-world   template.yaml</span><br><span class="line">$ ls apigw/hello-world/</span><br><span class="line">go.mod       main.go      main_test.go</span><br></pre></td></tr></table></figure><p>色々とできましたが、同梱されているREADME.mdに必要なことは記載してあります。そこから抜粋しますが、例えばファイル構造は以下のようになっています。</p><figure class="highlight bash"><figcaption><span>README.md（抜粋）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">（前略）</span><br><span class="line">.</span><br><span class="line">├── Makefile                    <span class="comment"># &lt;-- Make to automate build</span></span><br><span class="line">├── README.md                   <span class="comment"># &lt;-- This instructions file</span></span><br><span class="line">├── hello-world                 <span class="comment"># &lt;-- Source code for a lambda function</span></span><br><span class="line">│   ├── main.go                 <span class="comment"># &lt;-- Lambda function code</span></span><br><span class="line">│   └── main_test.go            <span class="comment"># &lt;-- Unit tests</span></span><br><span class="line">└── template.yaml</span><br><span class="line">（以下略）</span><br></pre></td></tr></table></figure><h2 id="Lambda（Go）の記述"><a href="#Lambda（Go）の記述" class="headerlink" title="Lambda（Go）の記述"></a>Lambda（Go）の記述</h2><p>最初に必要なパッケージをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go get -u github.com/aws/aws-lambda-go/lambda</span><br><span class="line">$ go get -u github.com/aws/aws-lambda-go/events</span><br></pre></td></tr></table></figure><p>続いて、必要なパス構成にしていきます。<br><code>sam init</code>で自動生成された実行ファイルは<code>hello-world</code>以下に入っています。<br>せっかくなので、これをオリジナルな名前にします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> apigw</span><br><span class="line">$ mv hello-world lambdab</span><br></pre></td></tr></table></figure><p>パス構造が変わったので、<code>Makefile</code>と<code>template.yaml</code>に変更を加えます。</p><figure class="highlight plain"><figcaption><span>Makefile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PHONY: deps clean build</span><br><span class="line"></span><br><span class="line">deps:</span><br><span class="line">go get -u ./...</span><br><span class="line"></span><br><span class="line">clean: </span><br><span class="line">rm -rf ./lambdab/lambdab # 変更</span><br><span class="line"></span><br><span class="line">build:</span><br><span class="line">GOOS=linux GOARCH=amd64 go build -o lambdab/lambdab ./lambdab/main.go # 変更</span><br></pre></td></tr></table></figure><p><code>template.yaml</code>への変更において、</p><figure class="highlight yaml"><figcaption><span>template.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">AWSTemplateFormatVersion:</span> <span class="string">'2010-09-09'</span></span><br><span class="line"><span class="attr">Transform:</span> <span class="attr">AWS::Serverless-2016-10-31</span></span><br><span class="line"><span class="attr">Description:</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">  apigw</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  Sample SAM Template for apigw</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst</span></span><br><span class="line"><span class="string"></span><span class="attr">Globals:</span></span><br><span class="line"><span class="attr">  Function:</span></span><br><span class="line"><span class="attr">    Timeout:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Resources:</span></span><br><span class="line"><span class="attr">  HelloWorldFunction:</span></span><br><span class="line"><span class="attr">    Type:</span> <span class="attr">AWS::Serverless::Function</span> <span class="comment"># More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction</span></span><br><span class="line"><span class="attr">    Properties:</span></span><br><span class="line"><span class="attr">      CodeUri:</span> <span class="string">lambdab/</span> <span class="comment"># 変更</span></span><br><span class="line"><span class="attr">      Handler:</span> <span class="string">lambdab</span> <span class="comment"># 変更</span></span><br><span class="line"><span class="attr">      Runtime:</span> <span class="string">go1.x</span></span><br><span class="line"><span class="attr">      Tracing:</span> <span class="string">Active</span> <span class="comment"># https://docs.aws.amazon.com/lambda/latest/dg/lambda-x-ray.html</span></span><br><span class="line"><span class="attr">      Events:</span></span><br><span class="line"><span class="attr">        CatchAll:</span></span><br><span class="line"><span class="attr">          Type:</span> <span class="string">Api</span> <span class="comment"># More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api</span></span><br><span class="line"><span class="attr">          Properties:</span></span><br><span class="line"><span class="attr">            Path:</span> <span class="string">/apigw</span> <span class="comment"># 変更</span></span><br><span class="line"><span class="attr">            Method:</span> <span class="string">GET</span></span><br><span class="line"><span class="attr">      Environment:</span> <span class="comment"># More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object</span></span><br><span class="line"><span class="attr">        Variables:</span></span><br><span class="line"><span class="attr">          PARAM1:</span> <span class="string">VALUE</span></span><br></pre></td></tr></table></figure><p><code>template.yaml</code>の内容について補足すると、これはCloudFormationの形式になっています。<br>このまま<code>sam</code>のみでdeployすることも可能ですが、今回はテストのみなので、注記がいれてある場所のみ変更しました。<br>この設定で <code>sam</code> を立ち上げると、 <code>http://127.0.0.1:3000/apigw</code> にGETすると、<code>./lambdab/lambdab</code> が実行されることを示しています。</p><p>それでは<code>main.go</code> に変更を加えます。今回は、 <code>events.APIGatewayProxyResponse</code> のBodyと、それに応じて少しだけコードをいじっただけでほぼほぼ自動生成されたものになります。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/events"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CompanyResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Company <span class="keyword">string</span> <span class="string">`json:"company"`</span></span><br><span class="line">Year    <span class="keyword">string</span> <span class="string">`json:"year"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(request events.APIGatewayProxyRequest)</span> <span class="params">(events.APIGatewayProxyResponse, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">response := CompanyResponse&#123;</span><br><span class="line">Company: <span class="string">"Future"</span>,</span><br><span class="line">Year:    <span class="string">"1989"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonBytes, _ := json.Marshal(response)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> events.APIGatewayProxyResponse&#123;</span><br><span class="line">Body:       <span class="keyword">string</span>(jsonBytes),</span><br><span class="line">StatusCode: <span class="number">200</span>,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="build"><a href="#build" class="headerlink" title="build"></a>build</h2><p>諸々設定ができたら、buildして準備は完了です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ make build</span><br><span class="line">GOOS=linux GOARCH=amd64 go build -o lambdab/lambdab ./lambdab/main.go <span class="comment"># 変更</span></span><br><span class="line">$ ls lambdab/</span><br><span class="line">go.mod       go.sum       lambdab      main.go      main_test.go</span><br></pre></td></tr></table></figure><h1 id="ローカルでAPIを動かしてテスト"><a href="#ローカルでAPIを動かしてテスト" class="headerlink" title="ローカルでAPIを動かしてテスト"></a>ローカルでAPIを動かしてテスト</h1><p>コマンドを叩けばOKです。動き出したAPI（今回の場合 <code>http://127.0.0.1:3000/apigw</code>）にアクセスすると、コンテナイメージが呼び出され、実行結果が帰ってきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ sam <span class="built_in">local</span> start-api</span><br><span class="line">Mounting HelloWorldFunction at http://127.0.0.1:3000/apigw [GET]</span><br><span class="line">You can now browse to the above endpoints to invoke your <span class="built_in">functions</span>. You <span class="keyword">do</span> not need to restart/reload SAM CLI <span class="keyword">while</span> working on your <span class="built_in">functions</span>, changes will be reflected instantly/automatically. You only need to restart SAM CLI <span class="keyword">if</span> you update your AWS SAM template</span><br><span class="line">2020-03-09 22:05:33  * Running on http://127.0.0.1:3000/ (Press CTRL+C to quit)</span><br><span class="line">Invoking lambdab (go1.x)</span><br><span class="line"></span><br><span class="line">Fetching lambci/lambda:go1.x Docker container image......</span><br><span class="line">Mounting /Users/kurita/[パス情報なので省略]/apigw/lambdab as /var/task:ro,delegated inside runtime container</span><br><span class="line">START RequestId: f2fd9e5a-f031-10c7-3340-25e3997c6dd1 Version: <span class="variable">$LATEST</span></span><br><span class="line">END RequestId: f2fd9e5a-f031-10c7-3340-25e3997c6dd1</span><br><span class="line">REPORT RequestId: f2fd9e5a-f031-10c7-3340-25e3997c6dd1  Init Duration: 131.05 ms        Duration: 4.07 ms       Billed Duration: 100 ms Memory Size: 128 MBMax Memory Used: 21 MB</span><br><span class="line">No Content-Type given. Defaulting to <span class="string">'application/json'</span>.</span><br><span class="line">2020-03-09 22:05:38 127.0.0.1 - - [09/Mar/2020 22:05:38] <span class="string">"GET /apigw HTTP/1.1"</span> 200 -</span><br><span class="line">2020-03-09 22:05:39 127.0.0.1 - - [09/Mar/2020 22:05:39] <span class="string">"GET /favicon.ico HTTP/1.1"</span> 403 -</span><br></pre></td></tr></table></figure><p>ブラウザでAPI叩くと、ちゃんと返ってきているのがわかります。</p><img src="/images/20200323/photo_20200323_03.png" class="img-middle-size"><p>AWS SAMを利用することで、ローカルでもAPI Gatewayを意識したLambda を動作させることができました。数が少ないなら一つずつ試しても良いですし、APIを適宜叩くツールを用意すれば、自動にテストを行うこともできます。</p><h1 id="DynamoDB-localとの連携"><a href="#DynamoDB-localとの連携" class="headerlink" title="DynamoDB localとの連携"></a>DynamoDB localとの連携</h1><p>続いて、SAM上で動かすLambdaからDynamoDB localにアクセスします。<br>注意事項として、DynamoDB localはdocker上で動くので、SAMとDynamoDB localを同じdocker-networkにする必要があります。</p><h2 id="DynamoDB-localの準備"><a href="#DynamoDB-localの準備" class="headerlink" title="DynamoDB localの準備"></a>DynamoDB localの準備</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># AWS profile(初回のみ)</span></span><br><span class="line"><span class="comment"># localのDynamoDB</span></span><br><span class="line">$ aws configure <span class="built_in">set</span> aws_access_key_id dummy     --profile <span class="built_in">local</span></span><br><span class="line">$ aws configure <span class="built_in">set</span> aws_secret_access_key dummy --profile <span class="built_in">local</span></span><br><span class="line">$ aws configure <span class="built_in">set</span> region ap-northeast-1       --profile <span class="built_in">local</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DynamoDBに必要なテーブル作成(初回のみ)</span></span><br><span class="line">$ docker network create lambda-local-test</span><br><span class="line">$ docker run -d --network lambda-local-test --name dynamoTest -p 8000:8000 amazon/dynamodb-local:1.12.0 -jar DynamoDBLocal.jar -sharedDb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止コマンド</span></span><br><span class="line"><span class="comment"># docker stop dynamoTest</span></span><br></pre></td></tr></table></figure><p>これでテスト用のdynamoDBができました。ここにテスト用のテーブルを切ります。テーブルは<code>aws-cli</code>を使います。</p><figure class="highlight json"><figcaption><span>testdata/db_local.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"TableName"</span>: <span class="string">"local_company_table"</span>,</span><br><span class="line">    <span class="attr">"KeySchema"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"AttributeName"</span>: <span class="string">"company"</span>,</span><br><span class="line">        <span class="attr">"KeyType"</span>: <span class="string">"HASH"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"AttributeName"</span>: <span class="string">"year"</span>,</span><br><span class="line">        <span class="attr">"KeyType"</span>: <span class="string">"RANGE"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"AttributeDefinitions"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"AttributeName"</span>: <span class="string">"company"</span>,</span><br><span class="line">        <span class="attr">"AttributeType"</span>: <span class="string">"S"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"AttributeName"</span>: <span class="string">"year"</span>,</span><br><span class="line">        <span class="attr">"AttributeType"</span>: <span class="string">"S"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"ProvisionedThroughput"</span>: &#123;</span><br><span class="line">      <span class="attr">"ReadCapacityUnits"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"WriteCapacityUnits"</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>テーブルを切ります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ aws dynamodb --profile local --endpoint-url http://localhost:8000 create-table --cli-input-json file://./testdata/db_local.json</span><br><span class="line">（出力略）</span><br></pre></td></tr></table></figure><h2 id="Goのコード修正"><a href="#Goのコード修正" class="headerlink" title="Goのコード修正"></a>Goのコード修正</h2><p>先程はAPIアクセスに対してレスポンスを返すだけでしたが、今度は同じ内容をDynamoDBに書き込むように修正します。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/events"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-lambda-go/lambda"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/aws/session"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/service/dynamodb"</span></span><br><span class="line"><span class="string">"github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> db *dynamodb.DynamoDB</span><br><span class="line"><span class="keyword">var</span> dbEndpoint = <span class="string">"http://dynamoTest:8000"</span></span><br><span class="line"><span class="keyword">var</span> region = <span class="string">"ap-northeast-1"</span></span><br><span class="line"><span class="keyword">var</span> testTable = <span class="string">"local_company_table"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CompanyResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Company <span class="keyword">string</span> <span class="string">`json:"company"`</span></span><br><span class="line">Year    <span class="keyword">string</span> <span class="string">`json:"year"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">write</span><span class="params">(ctx context.Context, tableName <span class="keyword">string</span>, v <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">av, err := dynamodbattribute.MarshalMap(v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"dynamodb attribute marshalling map: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">i := &amp;dynamodb.PutItemInput&#123;</span><br><span class="line">Item:      av,</span><br><span class="line">TableName: aws.String(tableName),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err = db.PutItemWithContext(ctx, i); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"dynamodb put item: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(ctx context.Context, request events.APIGatewayProxyRequest)</span> <span class="params">(events.APIGatewayProxyResponse, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">sess := session.Must(session.NewSession(&amp;aws.Config&#123;</span><br><span class="line">Endpoint: aws.String(dbEndpoint),</span><br><span class="line">Region:   aws.String(region),</span><br><span class="line">&#125;))</span><br><span class="line">db = dynamodb.New(sess)</span><br><span class="line"></span><br><span class="line">response := CompanyResponse&#123;</span><br><span class="line">Company: <span class="string">"Future"</span>,</span><br><span class="line">Year:    <span class="string">"1989"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonBytes, _ := json.Marshal(response)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := write(ctx, testTable, response); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Print(<span class="string">"%s"</span>, err)</span><br><span class="line"><span class="keyword">return</span> events.APIGatewayProxyResponse&#123;</span><br><span class="line">Body:       <span class="keyword">string</span>(jsonBytes),</span><br><span class="line">StatusCode: <span class="number">500</span>,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> events.APIGatewayProxyResponse&#123;</span><br><span class="line">Body:       <span class="keyword">string</span>(jsonBytes),</span><br><span class="line">StatusCode: <span class="number">200</span>,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SAMによるテスト"><a href="#SAMによるテスト" class="headerlink" title="SAMによるテスト"></a>SAMによるテスト</h2><p>SAMを実行するとき、docker-networkを指定します。これで、SAMで起動したdockerとDynamoDB localが同じネットワーク上に入ります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make build</span><br><span class="line">$ sam <span class="built_in">local</span> start-api --docker-network lambda-local-test</span><br></pre></td></tr></table></figure><p>もう一つターミナルを立ち上げてコマンドを打ちます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先程作ったテーブルは未だ空です。これからここに書き込みます。</span></span><br><span class="line">$ aws dynamodb scan --table-name local_company_table --profile <span class="built_in">local</span> --endpoint-url http://localhost:8000</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"Items"</span>: [],</span><br><span class="line">    <span class="string">"Count"</span>: 0,</span><br><span class="line">    <span class="string">"ScannedCount"</span>: 0,</span><br><span class="line">    <span class="string">"ConsumedCapacity"</span>: null</span><br><span class="line">&#125;</span><br><span class="line">$ curl localhost:3000/apigw</span><br><span class="line">&#123;<span class="string">"Company"</span>:<span class="string">"Future"</span>,<span class="string">"Year"</span>:<span class="string">"1989"</span>&#125;</span><br><span class="line"><span class="comment"># 作ったテーブルに必要な項目が入っている</span></span><br><span class="line">$ aws dynamodb scan --table-name local_company_table --profile <span class="built_in">local</span> --endpoint-url http://localhost:8000</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"Items"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"year"</span>: &#123;</span><br><span class="line">                <span class="string">"S"</span>: <span class="string">"1989"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"company"</span>: &#123;</span><br><span class="line">                <span class="string">"S"</span>: <span class="string">"Future"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"Count"</span>: 1,</span><br><span class="line">    <span class="string">"ScannedCount"</span>: 1,</span><br><span class="line">    <span class="string">"ConsumedCapacity"</span>: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>確かに、テーブルの中に値が格納されました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回SAMを使ったテストができました。あとは必要に応じてAPIを叩くLambdaを作ったり、あるいはAPI Gatewayから呼び出されるLambdaを適宜増やしていくことで、目的とするシステムの開発が行なえます。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://dev.classmethod.jp/cloud/aws/aws-lambda-supports-go/" target="_blank" rel="noopener">AWS Lambda で Go が使えるようになったので試してみた</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/go-programming-model-handler-types.html" target="_blank" rel="noopener">Go の AWS Lambda 関数ハンドラー</a></li><li><a href="https://qiita.com/shunp/items/52ee20278e02e29ef3e8" target="_blank" rel="noopener">Go+Lambdaで最速サーバーレスチュートリアル</a> </li></ul><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><p>Goに関連した連載企画があります。</p><ul><li><a href="/tags/Serverless%E9%80%A3%E8%BC%89/">サーバレス連載</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;/tags/Serverless%E9%80%A3%E8%BC%89/&quot;&gt;サーバレス連載&lt;/a&gt; の第1弾です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;は
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="Serverless" scheme="https://future-architect.github.io/tags/Serverless/"/>
    
      <category term="Serverless連載" scheme="https://future-architect.github.io/tags/Serverless%E9%80%A3%E8%BC%89/"/>
    
      <category term="DynamoDB" scheme="https://future-architect.github.io/tags/DynamoDB/"/>
    
      <category term="Lambda" scheme="https://future-architect.github.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>今あえてTypeScriptのビルド＆バンドルツールを探してみる</title>
    <link href="https://future-architect.github.io/articles/20200319/"/>
    <id>https://future-architect.github.io/articles/20200319/</id>
    <published>2020-03-19T01:12:40.000Z</published>
    <updated>2020-03-19T01:18:52.766Z</updated>
    
    <content type="html"><![CDATA[<p>ちょっとしたフロントエンドの開発で、TypeScriptに最初から対応していて、簡単に使えるものは何かないかな、と調べてみたメモです。React/Vue/Angularの場合はそれぞれの初期化コマンドで何から何まで用意してくれます。Next.js、Nuxt.js、Gatsbyなども、これらのビルドのステップを簡略化するコマンドを提供しています。基本的にこれらのウェブフロントエンドを開発するときには、小規模・中規模ぐらいならあんまり気にしなくておまかせでもいいと思います。</p><p>今回は、それらのフレームワーク固有のビルドツールとは別に環境を作りたい人で、TypeScriptの環境が欲しい、ウェブの開発がしたい、という前提でいろいろ探してみました。</p><p>今回試してみたのは次の4つです。</p><ul><li>Parcel</li><li>Fusebox</li><li>ncc</li><li>Rome.js</li></ul><h1 id="JavaScriptのビルドツールとは"><a href="#JavaScriptのビルドツールとは" class="headerlink" title="JavaScriptのビルドツールとは"></a>JavaScriptのビルドツールとは</h1><p>JavaScriptでビルドといっても、いろいろなステップがあります。</p><ol><li>TypeScriptやBabelを使って、ターゲットとなるバージョンのJavaScriptに変換</li><li>SCSSとかPostCSSを使ってブラウザにない機能を使って書かれたCSSを素のCSSに変換</li><li>webpackなどを使って、1つのJavaScriptファイル、もしくは遅延ロードをするJSファイル群を生成</li></ol><p>まあ実際にはこんなに綺麗にステップが分かれることはなくて、webpackがimport文を追跡しつつファイルを探し、.tsを見つけてはTypeScriptで処理して（コンパイル）、コード中にSCSSを見つけてはSCSSの処理系に投げて、一つのファイルにまとめる（バンドル）・・みたいな工程を行ったりきたりしながらビルドします。以前は、これにJake、Gulp、Gruntなどのタスクランナーも組み合わせてやってましたが、今はwebpack単体にts-loaderなどを組み合わせる感じで一通りできます。webpackが<a href="https://www.jetbrains.com/lp/devecosystem-2019/javascript/" target="_blank" rel="noopener">シェア80%</a>で一強ですね。</p><p>なお、これにファイルの変更検知を行って、変更時に変更部分だけをビルド（ウォッチ）、読み込んでいるブラウザに変更したことを伝えてリロードを行わせる開発サーバーとよぶサーバーも加えると、世間で「JavaScriptのビルドツール」と呼ぶ機能はだいたい網羅されるんじゃないですかね。</p><h1 id="Parcel"><a href="#Parcel" class="headerlink" title="Parcel"></a>Parcel</h1><p><a href="https://parceljs.org/" target="_blank" rel="noopener">Parcel</a>はゼロコンフィグを目指したバンドラーです。TypeScriptも最初からサポートしています。エントリーポイントを指定するだけでビルドしてくれます。tsconfig.jsonがあればそれを拾って解釈してくれますし、なくても動きます。単にtsファイルをエントリーポイントとしてわたしてあげれば、そのままTypeScriptの処理系をインストールしつつビルドしてくれます。最初のビルドも高速ですし、キャッシュもしてくれて2回目以降も速いです。TreeShakingとかの生成されたファイルの最適化機構も入っているとのこと。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D parcel-bundler</span><br><span class="line">$ npx parcel build src/index.ts</span><br></pre></td></tr></table></figure><p>エントリーポイントにHTMLファイルを指定できて、フロントエンド開発の開発サーバーも付いている。これは無敵！と思いきや・・・わざと型を間違ったTypeScriptのファイルを入力しても何もエラーも出ません。</p><p>これは現在は意図した動作らしく、Parcelは最速でバンドルするだけを目指しており、設計方針としてエラーは出さないとのこと。もしかしたら、TypeScriptで開発し、Visual Studio CodeとかWebStorm上でエラーが出てくるなら問題ないとも言えるかもしれません。とはいえ、せっかくのチェック機構をまったく無視するのはTypeScriptを使うメリットがだいぶ削られてしまいます。また、別途CIなりを整備するのもちょっと手間ですよね。まあ、TypeScriptとかが流行る前は型チェックなんてなかったわけで、ちょっと昔の感覚を思い出しました。</p><p><a href="https://github.com/parcel-bundler/parcel/issues/1378" target="_blank" rel="noopener">Parcel 2系になったらTypeScriptのエラーを報告しない問題に対応するよ</a>、と昨年のコメントにはあるものの、次の<a href="https://github.com/parcel-bundler/parcel/projects/5" target="_blank" rel="noopener">2.0のリリースまでのハードルはかなり高そう</a>。2.0が出てさえくれれば設定のかんたんさとかは抜群なので、期待しています。</p><h1 id="FuseBox"><a href="#FuseBox" class="headerlink" title="FuseBox"></a>FuseBox</h1><p><a href="https://fuse-box.org/" target="_blank" rel="noopener">FuseBox</a>はそこそこ歴史はあるツールですが、ここで紹介する他のツールと違い、CLIを提供しません。JavaScriptかTypeScriptでビルドの設定ファイルを作ります。現状は3系ですが、これも新バージョンの4系が開発中で、<code>@next</code>をつけてインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D fuse-box@next</span><br></pre></td></tr></table></figure><p>4系の最小は以下の通りです。これはデバッグビルドのための開発サーバーを立ち上げて開発支援をする、という設定ファイルです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123; fusebox &#125; from &apos;fuse-box&apos;;</span><br><span class="line">fusebox(&#123;</span><br><span class="line">  target: &apos;browser&apos;,</span><br><span class="line">  entry: &apos;src/index.tsx&apos;,</span><br><span class="line">  webIndex: &#123;</span><br><span class="line">    template: &apos;src/index.html&apos;,</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: true,</span><br><span class="line">&#125;).runDev();</span><br></pre></td></tr></table></figure><p>テンプレートのところのHTMLはこんな感じで、CSSとJavaScriptの成果物を$なプレースホルダーに埋め込むようになっています。　</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    $css</span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    $bundles</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>とはいっても、デバッグ実行だけがしたいわけじゃなくて、productionビルドもしたいわけで、そうなるとたくさん書かないといけない。一応、<a href="https://github.com/fuse-box/react-example/blob/master/fuse.ts" target="_blank" rel="noopener">フルセットのサンプルとして以下のようなコード</a>が提示されています（今回はReactを作りたいわけではないので.tsxは.tsに書き換えました）。ここまで書かないといけないのであれば、CLIツールも一緒に提供してほしい気が・・・</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fusebox, sparky &#125; <span class="keyword">from</span> <span class="string">"fuse-box"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">  runServer;</span><br><span class="line">  getConfig = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">    fusebox(&#123;</span><br><span class="line">      target: <span class="string">"browser"</span>,</span><br><span class="line">      entry: <span class="string">"src/index.ts"</span>,</span><br><span class="line">      webIndex: &#123;</span><br><span class="line">        template: <span class="string">"src/index.html"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      cache : <span class="literal">true</span>,</span><br><span class="line">      devServer: <span class="keyword">this</span>.runServer</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123; task &#125; = sparky&lt;Context&gt;(Context);</span><br><span class="line"></span><br><span class="line">task(<span class="string">"default"</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.runServer = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">const</span> fuse = ctx.getConfig();</span><br><span class="line">  <span class="keyword">await</span> fuse.runDev();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">task(<span class="string">"preview"</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.runServer = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">const</span> fuse = ctx.getConfig();</span><br><span class="line">  <span class="keyword">await</span> fuse.runProd(&#123; <span class="attr">uglify</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">task(<span class="string">"dist"</span>, <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.runServer = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">const</span> fuse = ctx.getConfig();</span><br><span class="line">  <span class="keyword">await</span> fuse.runProd(&#123; <span class="attr">uglify</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ビルドは高速で快適です。tsconfig.jsonがなくても実行できます。なお、Node.js 10.xや11.xのバージョンではまだexperimentalなworker_threadパッケージを使っているので、12以降を使うか、<code>--experimental-worker</code>オプションが必要です。開発サーバーもあり、HMRもできて、ウェブフロントエンド開発でTypeScriptでやりたい人には良いですね。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">% npm start </span><br><span class="line"></span><br><span class="line">&gt; fuse-box-test@1.0.0 start /Users/shibukawa/fuse-box-test</span><br><span class="line">&gt; ts-node -T fuse</span><br><span class="line"></span><br><span class="line">  [ default ] Starting</span><br><span class="line"></span><br><span class="line">  ⚙  FuseBox 4.0.0-next.411</span><br><span class="line">     Mode: development</span><br><span class="line">     Entry: /Users/shibukawa/fuse-box-test/src/index.ts</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   SUCCESS   Completed without build issues <span class="keyword">in</span> 128ms</span><br><span class="line"></span><br><span class="line">  [ default ] Completed <span class="keyword">in</span> 138ms</span><br><span class="line">  development Development server is running at http://localhost:4444</span><br></pre></td></tr></table></figure><h1 id="ncc"><a href="#ncc" class="headerlink" title="ncc"></a>ncc</h1><p>npmにアップロードするコードをシンプルにする、超快適に開発する、というのを目指して作られているのが<a href="https://www.npmjs.com/package/@zeit/ncc" target="_blank" rel="noopener">ncc</a>です。ある意味browserifyの後継な感じを受けます。簡単。ひたすら簡単。Next.jsで有名なZeitが開発しています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -D @zeit/ncc</span><br></pre></td></tr></table></figure><p>npmのサイズを小さくするという目標を体現しているツールで、それ自身もTypeScript内臓だけど、インストールは一瞬で終わります。他への依存もなく、パッケージがとても小さい。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ du -h</span><br><span class="line">9.8M./node_modules/@zeit</span><br></pre></td></tr></table></figure><p>コマンド体系はGoを目指していて、ncc build [script]でビルドができます。ncc run [script]で実行ができます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">% npx ncc run -q test.ts</span><br><span class="line">ncc: Using typescript@3.7.5 (ncc built-in)</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>ts-nodeは実行にtypescriptパッケージが必要で、ts-nodeとtypescriptをインストールするとそれだけで52MBぐらいになってしまうので、ncc runをts-nodeがわりにするのも良さそうです。tsconfig.jsonは必要です。</p><p>コマンドは基本的にbuildとrunだけなので使い方は迷うことはないと思います。<code>--watch</code>で監視しつつビルドしたり、<code>--minify</code>で小さくしたり。</p><p>一方、ウェブフロントエンドの開発を手助けしてくれる開発サーバーはありません。ExpressとかでAPIサーバーを実装するには良さそうです。</p><h1 id="Rome-js"><a href="#Rome-js" class="headerlink" title="Rome.js"></a>Rome.js</h1><ul><li><a href="https://romejs.dev/" target="_blank" rel="noopener">https://romejs.dev/</a></li></ul><p>こちらは超新進気鋭のビルドツールです。日本Node.jsユーザグループの会長に「かいちょー、何かJSのバンドラー兼ビルドサーバーまわりで、なんか新しげな良いのないですか」と聞いて教えてもらいました。</p><p>Babelの作者とかが関わっているツールです。コンパイラ、Linter、フォーマッター、テスト、バンドラーなどを全部まとめて持っていて、外部依存がないのがウリとのこと。なお、ウェブサイトはありますが、それよりも<a href="https://github.com/facebookexperimental/rome" target="_blank" rel="noopener">GitHubのREADME</a>の方がいろいろプロジェクトの背景等が詳しく書かれていたりします（実行の仕方の説明はREADMEは古くて動かないですが）。</p><p>npmにも上がっていないので、git cloneするところから。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --depth 1 https://github.com/facebookexperimental/rome</span><br><span class="line">$ <span class="built_in">pushd</span> rome</span><br><span class="line">$ ./scripts/build-release dist</span><br><span class="line">$ <span class="built_in">popd</span></span><br><span class="line">$ <span class="built_in">cd</span> rome-test</span><br><span class="line">$ npm install -D ../rome/dist</span><br></pre></td></tr></table></figure><p>このヘルプメッセージから溢れ出るexperimental感。残念ながら、開発サーバーとかはないようです。Facebookなので、ウェブフロントエンドだけではなくて、React Nativeとかもターゲットに考えているのかもしれないし、そこのあたりはよくわかりません。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">% npx rome --<span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"> Usage ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line"></span><br><span class="line">  $ rome [<span class="built_in">command</span>] [flags]</span><br><span class="line"></span><br><span class="line"> Global Flags ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line"></span><br><span class="line">  --benchmark                   no description found</span><br><span class="line">  --benchmark-iterations &lt;num&gt;  no description found</span><br><span class="line">  --collect-markers             no description found</span><br><span class="line">  --cwd &lt;input&gt;                 no description found</span><br><span class="line">  --fieri                       no description found</span><br><span class="line">  --focus &lt;input&gt;               no description found</span><br><span class="line">  --grep &lt;input&gt;                no description found</span><br><span class="line">  --<span class="built_in">help</span>                        show this <span class="built_in">help</span> screen</span><br><span class="line">  --inverse-grep                no description found</span><br><span class="line">  --<span class="built_in">log</span>-path &lt;input&gt;            no description found</span><br><span class="line">  --logs                        no description found</span><br><span class="line">  --<span class="built_in">log</span>-workers                 no description found</span><br><span class="line">  --markers-path &lt;input&gt;        no description found</span><br><span class="line">  --max-diagnostics &lt;num&gt;       no description found</span><br><span class="line">  --no-profile-workers          no description found</span><br><span class="line">  --no-show-all-diagnostics     no description found</span><br><span class="line">  --profile                     no description found</span><br><span class="line">  --profile-path &lt;input&gt;        no description found</span><br><span class="line">  --profile-sampling &lt;num&gt;      no description found</span><br><span class="line">  --profile-timeout &lt;num&gt;       no description found</span><br><span class="line">  --rage                        no description found</span><br><span class="line">  --rage-path &lt;input&gt;           no description found</span><br><span class="line">  --resolver-mocks              no description found</span><br><span class="line">  --resolver-scale &lt;num&gt;        no description found</span><br><span class="line">  --silent                      no description found</span><br><span class="line">  --temporary-daemon            no description found</span><br><span class="line">  --verbose                     no description found</span><br><span class="line">  --verbose-diagnostics         no description found</span><br><span class="line">  --watch                       no description found</span><br><span class="line"></span><br><span class="line"> Commands ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</span><br><span class="line"></span><br><span class="line">  Code Quality Commands</span><br><span class="line">  - ci run lint and tests</span><br><span class="line">  - lint run lint against a <span class="built_in">set</span> of files</span><br><span class="line">  - <span class="built_in">test</span> run tests</span><br><span class="line"></span><br><span class="line">  Internal Commands</span><br><span class="line">  - evict evict a file from the memory cache</span><br><span class="line">  - format TODO</span><br><span class="line">  - logs TODO</span><br><span class="line">  - rage TODO</span><br><span class="line"></span><br><span class="line">  Process Management Commands</span><br><span class="line">  - develop TODO</span><br><span class="line">  - restart restart daemon</span><br><span class="line">  - start start daemon (<span class="keyword">if</span> none running)</span><br><span class="line">  - status get the current daemon status</span><br><span class="line">  - stop stop a running daemon <span class="keyword">if</span> one exists</span><br><span class="line"></span><br><span class="line">  Project Management Commands</span><br><span class="line">  - config Modify a project config</span><br><span class="line">  - init create a project config</span><br><span class="line">  - publish TODO</span><br><span class="line">  - run TODO</span><br><span class="line"></span><br><span class="line">  Source Code Commands</span><br><span class="line">  - analyzeDependencies analyze and dump the dependencies of a file</span><br><span class="line">  - bundle build a standalone js bundle <span class="keyword">for</span> a package</span><br><span class="line">  - compile compile a single file</span><br><span class="line">  - parse parse a single file and dump its ast</span><br><span class="line">  - resolve resolve a file</span><br></pre></td></tr></table></figure><p><code>rome run test.ts</code>で実行はできましたが、残念ながら、現段階ではこれもParcel同様型情報を削ぎ落としているだけっぽくて、TypeScriptの型チェックのエラーは出ませんでした。READMEには”Don’t use loose types such as <code>any</code>“と強く書かれているので、型には厳しくなっていくと思われます。</p><p>基本方針の中には、修正方法を開発者に伝えないようなエラーメッセージはなくしていく、とか、「トークン」みたいなコンパイラ内部用語（ジャーゴン）が外に出ないようにして、コンパイラ視点ではなくて、プログラマー視点の用語の「文字」を出すようにしていく、みたいなことも書いてあるのは面白いなと思いました。単にTypeScriptとかに変換処理を投げるだけじゃなくて、その出力もラップして、開発者にとって使いやすい処理系を目指しています。なかなかに野心的なプロジェクトです。</p><p>・・・人に紹介するにはまだまだexperimentalすぎる感じはありますが。会長曰く「僕も試してないです。渋川さんなら一番早く書籍にしてくれるはず」とのこと。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>まだ正式リリースしていないバージョンも含めて、TypeScriptに最初から対応しているビルド・バンドルツールをいくつか紹介してきました。webpack一強だからこそ、そのwebpackにはない強みを出そうと活発に開発されています。このあたりのエコシステムの活発さはNode.js界隈はやはり強いですね。</p><p>まあ、お金をいただいてやる仕事はまだまだwebpackでいいかな・・・と思いつつ、手元でちょっと新しいライブラリを試行錯誤する時とかに、新しいものも使ってみようと思います。とりあえず、FuseBox@nextと、nccはすでに実用に耐えられるレベルかな、と思います。今回はウェブフロントエンド開発をするという前提で開発サーバーの有無とかも紹介しましたが、そうなるとFuseBoxは良さそうです。本当は使い捨てのサンプルで活用したかったので、そのユースケースにいちばんマッチしているParcel 2もリリースされたら使ってみようと思います。Rome.jsも新しい開発体験を目指していそうだし、開発者が強い人たちなので楽しみです。</p><hr><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20200318/">【Figma】を使ってチームでUI/UX設計するといいこと</a></li><li><a href="https://future-architect.github.io/articles/20200317/">SPA + Tableau Online + Auth0 SSO</a></li><li><a href="/articles/20200316/">その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li><li><a href="https://future-architect.github.io/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ちょっとしたフロントエンドの開発で、TypeScriptに最初から対応していて、簡単に使えるものは何かないかな、と調べてみたメモです。React/Vue/Angularの場合はそれぞれの初期化コマンドで何から何まで用意してくれます。Next.js、Nuxt.js、Gatsb
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
      <category term="TypeScript" scheme="https://future-architect.github.io/tags/TypeScript/"/>
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
  </entry>
  
  <entry>
    <title>【Figma】を使ってチームでUI/UX設計するといいこと</title>
    <link href="https://future-architect.github.io/articles/20200318/"/>
    <id>https://future-architect.github.io/articles/20200318/</id>
    <published>2020-03-18T03:33:18.000Z</published>
    <updated>2020-03-18T03:43:03.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p><strong>Figma</strong>とは何か、何ができるのか、<strong>チーム</strong>でシステムデザイン設計するときにFigmaを使うと何がいいのかを初心者向けにざっくり紹介していきます。<br>「〇〇するにはどうすれば？」といった具体的な疑問はyoutubeに動画がたくさん上がっているので見てください。</p><img src="/images/20200318/photo_20200318_01.png"><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul><li>Figmaとは何か</li><li>画面の作り方</li><li>チーム設計でFigmaを使うメリット</li><li>Figmaを利用してみて</li><li>まとめ</li></ul><h1 id="Figmaとは何か"><a href="#Figmaとは何か" class="headerlink" title="Figmaとは何か"></a>Figmaとは何か</h1><p><strong>Figma</strong>はユーザーインターフェース（UI）のデザインを<strong>ブラウザ上</strong>で簡単に作れるデザインツールです。<br>デザインツールといえば<strong>デスクトップアプリ</strong>のAdobe XDやSketchが有名どころですが、Figmaも負けず劣らずの操作性と利便性を兼ね備えています。また、エディターが<strong>２名までなら無料</strong>で使うことができるので１人での利用だけでなくチームでの利用にも始めやすいツールです。<br>本記事でFigmaの利便性を紹介していく前に、Figmaでは何が作れるのか簡単にお見せします。</p><p>　クリック👉　<a href="https://www.figma.com/proto/jnVOYln5pumAQOkpL2nBT7/Untitled?node-id=351%3A174&scaling=scale-down" target="_blank" rel="noopener">Figmaでできるもの</a></p><p>このワイヤーフレーム（以下、見本）は約1時間ほどで作成しました。Figmaはこのようなワイヤーフレームや、UIを構成する画面・部品を作成することができます。</p><p>以下で、具体的な作り方を説明していきます。</p><h1 id="画面の作り方"><a href="#画面の作り方" class="headerlink" title="画面の作り方"></a>画面の作り方</h1><p>Figmaの画面設計は<strong>フレーム</strong>と部品（<strong>コンポーネント</strong>）を組み合わせることで作ることができます。作成手順は以下２ステップです。</p><ol><li>画面フレームを作成する</li><li>部品を作る</li></ol><p>最後に作成した画面に対して実行操作を行うことで、上記でお見せしたような画面の操作感を実際に触って確認することができます。</p><h2 id="１．画面フレームを作成する"><a href="#１．画面フレームを作成する" class="headerlink" title="１．画面フレームを作成する"></a>１．画面フレームを作成する</h2><p>画面のテンプレートとなるフレームを選択します。<br>フレームは設計者自身でサイズを設定することもできますが、デフォルトでスマートフォンやタブレット、PCの規格が用意されています。<br>イチから形を定義し調整する必要はなく、自チームが作成するアプリケーションに合わせて選択することができます。</p><img src="/images/20200318/photo_20200318_02.gif"><p>ここでは見本と同じようにiPhone11 ProMaxを選択して作成していきます。<br>次に、フレームにUIの根幹となる部品を作成します。</p><h2 id="２．部品を作成する"><a href="#２．部品を作成する" class="headerlink" title="２．部品を作成する"></a>２．部品を作成する</h2><p>Figmaの部品の作り方はパワーポイントと似ているため直感的で扱いやすいです。</p><p>①オブジェクトを配置<br>②サイズを決め<br>③色をつける（又はテキスト入力する）</p><p>この３ステップを繰り返すことで部品を作成し、フレームの上に配置していきます。</p><img src="/images/20200318/photo_20200318_03.gif"><p>フレームの上に部品を作成・配置し終えたら実際に操作感を試してみます。</p><h2 id="実行操作を行う"><a href="#実行操作を行う" class="headerlink" title="実行操作を行う"></a>実行操作を行う</h2><p>フレーム・部品を作り終えたら右上の <strong>（▶）</strong> を押下するだけです。</p><img src="/images/20200318/photo_20200318_04.gif"><p>説明では省きましたが、<strong>Prototype</strong>機能で部品とフレームを紐づけることでアニメーションをつけることができます。<br>細かく設定を行うことで、画面遷移時の動き等をより実際のUIに近づけたイメージを作成することも可能です。<br>この時、最初にフレームで設定した端末（ここではiPhone11 ProMax）風に表示してくれる点も<strong>ポイント！</strong></p><h1 id="チーム設計でFigmaを使うメリット"><a href="#チーム設計でFigmaを使うメリット" class="headerlink" title="チーム設計でFigmaを使うメリット"></a>チーム設計でFigmaを使うメリット</h1><p>簡単にFigmaでのUIの作り方を紹介しました。<br>ここまででも、Figmaがいかに簡単にデザイン設計できるかは伝わったと思いますが、「なぜチームで使うと良いの？」と思う方のために、次はチーム設計で便利な機能を紹介します。<br>キーワードは以下の４点です。</p><p><strong>👆チームで使いたいFigmaの機能👆</strong></p><ul><li><strong>コンポーネント化</strong></li><li><strong>定義の共有</strong></li><li>レビュー</li><li>豊富なライブラリ</li></ul><h2 id="コンポーネント化"><a href="#コンポーネント化" class="headerlink" title="コンポーネント化"></a>コンポーネント化</h2><p>この機能はチーム設計で必須の機能といって大袈裟ではないくらい重要な機能です。</p><p>チームでデザイン設計をしていると、「あの画面では日付を入力する方法は直接入力だったのに、この画面では選択式だ」のように、設計者によってバラつきが生まれてしまうことがあります。<br>これまでであれば、使用する部品はpowerpointやexcel等のドキュメントに一覧化して定義することで、設計者による差異を潰してUIの統一化を図ってきたかもしれません。</p><p>しかし、Figmaでは部品を<strong>コンポーネント化</strong>することで、一度作成した部品を<strong>共有</strong>・<strong>再利用</strong>することができます。<br><img src="/images/20200318/photo_20200318_05.png"><br>作成したコンポーネントを１か所にまとめておくことで、各設計者は（基本的には）<strong>既存のコンポーネント</strong>を利用して設計するため同じ目的を果たす部品が増えることはありません。</p><p>またコンポーネント（以下、親）から生成した子コンポーネント（以下、子）は親の情報を引き継ぐため、親に修正が入ったら子にも反映される。子が様々な場所で使われ、後でコンポーネントに改修が入っても全ての子に反映されるためメンテナンスも簡単にできます。<br><img src="/images/20200318/photo_20200318_06.gif"></p><h2 id="定義の共有"><a href="#定義の共有" class="headerlink" title="定義の共有"></a>定義の共有</h2><p>コンポーネントを紹介しましたが、UIのデザインを統一するためにFigmaが提供しているのはコンポーネントだけではありません。<br>カラーパレットやフォントスタイルも定義することができるため、設計者ごとの差異をより極小化することができます。<br><img src="/images/20200318/photo_20200318_07.gif"></p><p><strong>コンポーネント</strong>・<strong>カラーパレット</strong>・<strong>フォントスタイル</strong>はチーム内のみならず、その設計者が属している<strong>全てのチーム</strong>でも利用することができます。<br>そのため定義の共有・統一化は、単一チームの枠にとわられず複数のチーム・組織で利用することが可能となります。</p><h2 id="レビュー"><a href="#レビュー" class="headerlink" title="レビュー"></a>レビュー</h2><p>Figmaではチームに属しているメンバーに対して、コメントできます。<br>この機能のすごいところは、オブジェクトに紐づけてコメントすることができるため、レビュアーと設計者はより視覚的に対象箇所を認識・修正することができます。<br><img src="/images/20200318/photo_20200318_08.gif"></p><p>また、コメントは一覧化されるため、レビューに対する修正も漏れなく潰しこんでいくことができます。</p><h2 id="豊富なライブラリ"><a href="#豊富なライブラリ" class="headerlink" title="豊富なライブラリ"></a>豊富なライブラリ</h2><p>Figmaでは様々なライブラリが提供されています。<br><img src="/images/20200318/photo_20200318_09.png"></p><p>皆がよく使うアイコンセットもとても充実しており、コピペで簡単に使用できるため設計の大きな助けとなります。</p><p>　クリック👉<a href="https://www.figma.com/resources/assets/material-icons-outline/" target="_blank" rel="noopener">マテリアルアイコンセット</a></p><h1 id="Figmaを利用してみて"><a href="#Figmaを利用してみて" class="headerlink" title="Figmaを利用してみて"></a>Figmaを利用してみて</h1><p>私は約１か月の間、設計者３名体制でFigmaを利用しスマートフォンアプリのデザイン設計を行ってきました。</p><p>先行設計者としてアプリ内で利用するコンポーネント作成を最優先として着手しました。その結果、後続で参入してきたメンバーは既存のコンポーネントを組み合わせて設計することでチーム内でのイメージの揺らぎを極小化し良い品質のシステムデザインができたと思っています。</p><p>一方で、実際に業務で使ってみると事前に定義しておく対象範囲の絞り込みが難しく、コンポーネントの作成からコンポーネント間の余白等、必要と思う定義をあげればキリがありません。定義に時間をかけていくと<strong>本来のUI/UXデザインの目的</strong>に時間をかけることができません。</p><p>このような問題を解決するには小規模なチーム毎に定義を作っていては時間が足りません。定義対象の範囲を絞り込む一方で、利用できる定義は汎用化し、<strong>チームにとどまらずより</strong>上位の組織として定義・共有することが効率性や統一性を踏まえても重要だと感じました。</p><p>現在、社内でもFigmaによるデザイン性の統一化を図り汎用的なライブラリ化を目指して絶賛作成中です！！</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>業務上まだまだ設計書が必要な場面はたくさんありますが、Figmaでは設計した画面を画像ファイルとして保存することもできるため、設計書に貼るキャプチャをFigmaで作るだけでスピーディかつ高品質な画面設計ができます。</p><p>Figmaを使う理由は様々ですが、何よりFigmaでのシステムデザイン設計はとても楽しいです。</p><p>余談ですが、作成したデザインを実際のスマホ画面で確認すること等もできるため、ぜひ触ってみてください！</p><hr><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20200317/">SPA + Tableau Online + Auth0 SSO</a></li><li><a href="/articles/20200316/">その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li><li><a href="https://future-architect.github.io/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Figma&lt;/strong&gt;とは何か、何ができるのか、&lt;strong&gt;チーム&lt;/strong&gt;でシステムデザイン設計するとき
      
    
    </summary>
    
      <category term="Design" scheme="https://future-architect.github.io/categories/Design/"/>
    
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="UI" scheme="https://future-architect.github.io/tags/UI/"/>
    
      <category term="Figma" scheme="https://future-architect.github.io/tags/Figma/"/>
    
  </entry>
  
  <entry>
    <title>SPA + Tableau Online + Auth0 SSO</title>
    <link href="https://future-architect.github.io/articles/20200317/"/>
    <id>https://future-architect.github.io/articles/20200317/</id>
    <published>2020-03-17T01:59:27.000Z</published>
    <updated>2020-03-17T02:33:50.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><ul><li>プロジェクトでTableauダッシュボードを組み込んだSPAを開発しています。</li><li>その際にPoCを実施したので、こちらで簡単にお試しできる手順を共有させていただきます。</li></ul><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li>Tableau OnlineダッシュボードのSPA埋め込み with Auth0 SSOを最短でお試しできる手順になります。</li></ul><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>事前にTableauアカウントと、Auth0アカウント および テナント作成は行なっているものとします。</li></ul><h2 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h2><h4 id="1-Auth0-login-URL、メタデータ取得"><a href="#1-Auth0-login-URL、メタデータ取得" class="headerlink" title="1. Auth0 login URL、メタデータ取得"></a>1. Auth0 login URL、メタデータ取得</h4><p>Auth0のSAML Protocol URL(login URL)、メタデータを取得します。<br>メタデータはDLしておいてください。</p><img src="/images/20200317/photo_20200317_01.png" style="border:solid 1px #000000"><h4 id="2-Tableau設定"><a href="#2-Tableau設定" class="headerlink" title="2. Tableau設定"></a>2. Tableau設定</h4><ol><li>サイトでのSAML認証の有効化</li><li>TableauへのAuth0メタデータ(手順3で取得済)をインポート</li><li>iFrame の埋め込みの有効化</li><li>ユーザー追加(auth0 SSO有効)</li></ol><img src="/images/20200317/photo_20200317_02.png" style="border:solid 1px #000000"><img src="/images/20200317/photo_20200317_03.png" style="border:solid 1px #000000"><h4 id="3-Tableauメタデータ取得"><a href="#3-Tableauメタデータ取得" class="headerlink" title="3. Tableauメタデータ取得"></a>3. Tableauメタデータ取得</h4><p>Auth0の設定に使用する値が含まれたメタデータを取得します。</p><img src="/images/20200317/photo_20200317_04.png" style="border:solid 1px #000000"><h4 id="4-Auth0設定"><a href="#4-Auth0設定" class="headerlink" title="4. Auth0設定"></a>4. Auth0設定</h4><p>Applicationsを作成します。<br>Applications → Regular Web Applications → Create</p><img src="/images/20200317/photo_20200317_05.png" style="border:solid 1px #000000"><p>作成したApplicationのAddonsを設定します</p><img src="/images/20200317/photo_20200317_06.png" style="border:solid 1px #000000"><p>Application Callback URL: <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> を設定<br>Setteingsは下記を設定</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"audience"</span>: 前工程で取得したメタデータのentityIDを設定,</span><br><span class="line">    <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">        <span class="attr">"user_id"</span>: <span class="string">"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier"</span>,</span><br><span class="line">        <span class="attr">"email"</span>: <span class="string">"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"logout"</span>: &#123;</span><br><span class="line">        <span class="attr">"callback"</span>: 前工程で取得したメタデータのSingleLogoutServiceを設定,</span><br><span class="line">        <span class="attr">"slo_enabled"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-Tableauの埋め込みコード取得"><a href="#5-Tableauの埋め込みコード取得" class="headerlink" title="5. Tableauの埋め込みコード取得"></a>5. Tableauの埋め込みコード取得</h4><p>対象のダッシュボードへ移動 → 共有 → 埋め込みコードのコピー</p><img src="/images/20200317/photo_20200317_07.png"><h4 id="6-サンプルアプリ組み込み"><a href="#6-サンプルアプリ組み込み" class="headerlink" title="6. サンプルアプリ組み込み"></a>6. サンプルアプリ組み込み</h4><p>サンプルアプリへ実際に組み込みます</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="comment"># サンプルアプリを自動生成します</span></span><br><span class="line">$ <span class="comment"># 任意のディレクトリで実行</span></span><br><span class="line">$ npx create-next-app my-app</span><br></pre></td></tr></table></figure><p>手順5で取得した埋め込みコードを整形します。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">※ 次の工程でTableauのJSライブラリをロード時に読み込むように切り出す↓↓↓</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"text/javascript"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">src</span>=<span class="string">"https://us-west-2b.online.tableau.com/javascripts/api/viz_v1.js"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">※ 次の工程でTableauのJSライブラリをロード時に読み込むように切り出す↑↑↑</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tableauPlaceholder"</span> <span class="attr">style</span>=<span class="string">"width: 1440px; height: 712px;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">object</span> <span class="attr">class</span>=<span class="string">"tableauViz"</span> <span class="attr">width</span>=<span class="string">"1440"</span> <span class="attr">height</span>=<span class="string">"712"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span></span></span><br><span class="line"><span class="tag">        &gt;</span><span class="tag">&lt;<span class="name">param</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"host_url"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">value</span>=<span class="string">"https%3A%2F%2Fus-west-2b.online.tableau.com%2F"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"embed_code_version"</span> <span class="attr">value</span>=<span class="string">"3"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"site_root"</span> <span class="attr">value</span>=<span class="string">"&amp;#47;t&amp;#47;samltest3"</span>/&gt;</span><span class="tag">&lt;<span class="name">param</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"name"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">value</span>=<span class="string">"Superstore&amp;#47;Overview"</span>/&gt;</span><span class="tag">&lt;<span class="name">param</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"tabs"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">value</span>=<span class="string">"yes"</span>/&gt;</span><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"toolbar"</span> <span class="attr">value</span>=<span class="string">"yes"</span>/&gt;</span><span class="tag">&lt;<span class="name">param</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"showAppBanner"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">value</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上記の埋め込みコードを少し修正して、pages/index.jsに貼り付けます  </p><ol><li>ロード時にTableauライブラリ読み込み</li><li>styleに <code>position: &quot;absolute&quot;</code> を追加</li><li>styleに <code>display: &quot;none&quot;</code> を追加</li><li>ログインボタンを追加</li></ol><figure class="highlight javascript"><figcaption><span>my-app/pages/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ① ロード時にTableauのJSライブラリを読み込み↓↓↓</span></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">        script.src =</span><br><span class="line">            <span class="string">"https://us-west-2b.online.tableau.com/javascripts/api/viz_v1.js"</span>;</span><br><span class="line">        script.async = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">    &#125;, []);</span><br><span class="line">    <span class="comment">// ① ロード時にTableauのJSライブラリを読み込み↑↑↑</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &#123;<span class="comment">/* ④ ログインボタンを追加 */</span>&#125;</span><br><span class="line">            &lt;button</span><br><span class="line">                onClick=&#123;() =&gt; &#123;</span><br><span class="line">                    <span class="built_in">window</span>.location =</span><br><span class="line">            &#123;<span class="comment">/* 手順3のSAML Protocol URLを設定 */</span>&#125;</span><br><span class="line">            <span class="string">"https://xxxxxx.auth0.com/samlp/xxxxxxxxxxxxxxxxxxxxxx"</span>;</span><br><span class="line">                &#125;&#125;</span><br><span class="line">            &gt;</span><br><span class="line">                login</span><br><span class="line">            &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &#123;/</span>* ② styleにposition: <span class="string">"absolute"</span>を追加 *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">            &lt;div</span></span><br><span class="line"><span class="regexp">                class="tableauPlaceholder"</span></span><br><span class="line"><span class="regexp">                style=&#123;&#123; width: "100%", height: "100%", position: "absolute" &#125;&#125;</span></span><br><span class="line"><span class="regexp">            &gt;</span></span><br><span class="line"><span class="regexp">                &#123;/</span>* ③ style=&#123;&#123; <span class="attr">display</span>: <span class="string">"none"</span> &#125;&#125;を追加 *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">                &lt;object</span></span><br><span class="line"><span class="regexp">                    class="tableauViz"</span></span><br><span class="line"><span class="regexp">                    width="1440"</span></span><br><span class="line"><span class="regexp">                    height="670"</span></span><br><span class="line"><span class="regexp">                    style=&#123;&#123; display: "none" &#125;&#125;</span></span><br><span class="line"><span class="regexp">                &gt;</span></span><br><span class="line"><span class="regexp">                    &lt;param</span></span><br><span class="line"><span class="regexp">                        name="host_url"</span></span><br><span class="line"><span class="regexp">                        value="https%3A%2F%2Fus-west-2b.online.tableau.com%2F"</span></span><br><span class="line"><span class="regexp">                    /</span>&gt;</span><br><span class="line">                    &lt;param name=<span class="string">"embed_code_version"</span> value=<span class="string">"3"</span> /&gt;</span><br><span class="line">                    &lt;param name=<span class="string">"site_root"</span> value=<span class="string">"&amp;#47;t&amp;#47;samltest3"</span> /&gt;</span><br><span class="line">                    &lt;param name=<span class="string">"name"</span> value=<span class="string">"Superstore&amp;#47;Overview"</span> /&gt;</span><br><span class="line">                    &lt;param name=<span class="string">"tabs"</span> value=<span class="string">"yes"</span> /&gt;</span><br><span class="line">                    &lt;param name=<span class="string">"toolbar"</span> value=<span class="string">"yes"</span> /&gt;</span><br><span class="line">                    &lt;param name=<span class="string">"showAppBanner"</span> value=<span class="string">"false"</span> /&gt;</span><br><span class="line">                &lt;<span class="regexp">/object&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Home;</span></span><br></pre></td></tr></table></figure><h4 id="7-アクセス"><a href="#7-アクセス" class="headerlink" title="7. アクセス"></a>7. アクセス</h4><p>① サンプルアプリ起動</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> my-app</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><p>② localhost:3000にアクセス<br>③ ログインボタンを押下<br>④ Auth0 ログイン画面に遷移するのでログイン</p><img src="/images/20200317/photo_20200317_08.png"><p>localhostにリダイレクトされ、埋め込みのTableauダッシュボードが表示されました！🎉</p><img src="/images/20200317/photo_20200317_09.png"><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><ul><li>プロジェクトではこの後、cloudfront + S3の環境にデプロイしています。</li><li>また、SPA自体の認証もAuth0 SSOで行っており、  session、token管理をauth0のライブラリを使用して行っています。</li><li>こちらに関しては、機会がありましたら別途、紹介させていただけたらと思います。</li></ul><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://auth0.com/blog/jp-how-saml-authentication-works/" target="_blank" rel="noopener">https://auth0.com/blog/jp-how-saml-authentication-works/</a>  <ul><li>(SAML 認証はどのように機能するか？)</li></ul></li><li><a href="https://help.tableau.com/current/online/ja-jp/saml_config_site.htm" target="_blank" rel="noopener">https://help.tableau.com/current/online/ja-jp/saml_config_site.htm</a>  <ul><li>(サイトでの SAML 認証の有効化)</li></ul></li></ul><hr><p>関連記事：</p><ul><li><a href="/articles/20200316/">その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li><li><a href="https://future-architect.github.io/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;プロジェクトでTableauダッシュボードを組み込んだSPAを開発しています。&lt;/li&gt;
&lt;li&gt;その際にPoC
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="Auht0" scheme="https://future-architect.github.io/tags/Auht0/"/>
    
  </entry>
  
  <entry>
    <title>その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～</title>
    <link href="https://future-architect.github.io/articles/20200316/"/>
    <id>https://future-architect.github.io/articles/20200316/</id>
    <published>2020-03-16T02:49:57.000Z</published>
    <updated>2020-03-16T02:57:03.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="その値、Vue-jsは監視していますか？～Vue-jsで値が更新されないときに気をつけるところ～"><a href="#その値、Vue-jsは監視していますか？～Vue-jsで値が更新されないときに気をつけるところ～" class="headerlink" title="その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～"></a>その値、Vue.jsは監視していますか？～Vue.jsで値が更新されないときに気をつけるところ～</h1><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIG コアテクノロジーチーム竹林です。<br>こちらのブログでは前回 <a href="https://future-architect.github.io/articles/20181031/">その問い合わせ、AIが解決します！～Redmineチケットレコメンドシステムのご紹介～</a> を書かせていただきました。</p><p>この記事を書いてから早くも1年半が経ち、間もなく社会人4年目を迎えようとしております。<br>新人の後輩たちや、競技プログラミング上級者なキャリア入社の凄腕な皆さんもチームメンバに加わり、個性豊かな楽しい職場になってまいりました。</p><p>ちなみに<a href="https://future-architect.github.io/articles/20181031/">前回の記事</a>はAI(自然言語処理によるレコメンドシステム開発)に関するものです。まだご覧になっていない方はよろしければどうぞ！<br>さて、今回はAIではなくフロントエンド(Vue.js)の話です。</p><h2 id="コアテクノロジーチームについて"><a href="#コアテクノロジーチームについて" class="headerlink" title="コアテクノロジーチームについて"></a>コアテクノロジーチームについて</h2><p>私が所属するコアテクノロジーチームでは、Futureの各プロジェクトでの生産性・品質向上および設計開発プロセスの標準化を目標に、内製ライブラリ・フレームワーク・インフラ等の提供を行っております。</p><p><a href="https://jobs.qiita.com/employers/future/development_teams/57" target="_blank" rel="noopener">フューチャー株式会社 コアテクノロジーチーム - Qiita Jobs</a></p><p>そんな内製フレームワークの一部として採用されているのがVue.jsです。</p><p>フレームワーク自体の設計開発を行う一方、顧客・プロジェクト向け画面の開発を行うために、自分たちもそのフレームワークを用いた開発を行う機会がありました。</p><p>今回はそんなとある画面開発をするにあたって、私がVue.jsをキャッチアップしていく過程の中で遭遇したトラブルに関する解決方法を共有します。</p><h2 id="Vue-jsで値が更新されないとき？"><a href="#Vue-jsで値が更新されないとき？" class="headerlink" title="Vue.jsで値が更新されないとき？"></a>Vue.jsで値が更新されないとき？</h2><h3 id="事象について"><a href="#事象について" class="headerlink" title="事象について"></a>事象について</h3><p>Vue.jsで何かしらのAPIをaxios等で入手し、テーブル描画などの外部ライブラリと連携した際、外部ライブラリ側で値を書き換えてもうまく更新した値が取得できないケースが有りました。</p><p>私の場合、DB上のあるテーブルの一覧を<a href="https://github.com/future-architect/cheetah-grid" target="_blank" rel="noopener">cheetah-grid</a>を用いて表に描画し、<a href="https://www.npmjs.com/package/vue-cheetah-grid#available-vue-component-tag-names" target="_blank" rel="noopener"><code>&lt;c-grid-check-column&gt;</code>コンポーネント</a>によりチェック欄を設けてそのtrue/falseを取得しようとした際にうまく値が反映されておらず「あれ？おかしいぞ？」となりました。</p><h3 id="DBにあるデータ"><a href="#DBにあるデータ" class="headerlink" title="DBにあるデータ"></a>DBにあるデータ</h3><p>ダミーのテーブルで例を示します。</p><table><thead><tr><th>名前</th><th>職場</th><th>説明</th></tr></thead><tbody><tr><td>Aさん</td><td>東京</td><td>フロントエンドエンジニア</td></tr><tr><td>Bさん</td><td>名古屋</td><td>バックエンドエンジニア</td></tr><tr><td>Cさん</td><td>大分</td><td>インフラエンジニア</td></tr></tbody></table><h3 id="画面で見せたいデータ"><a href="#画面で見せたいデータ" class="headerlink" title="画面で見せたいデータ"></a>画面で見せたいデータ</h3><p>DB上のテーブルを取得した上に、フロントエンド側でチェックカラムを追加します。<br>デフォルト値はfalseを入れておきます。</p><ul><li><a href="https://github.com/future-architect/cheetah-grid" target="_blank" rel="noopener">cheetah-grid</a>では、<a href="https://www.npmjs.com/package/vue-cheetah-grid#available-vue-component-tag-names" target="_blank" rel="noopener"><code>&lt;c-grid-check-column&gt;</code>コンポーネント</a>を利用するとチェックカラムを簡単に用意することが出来ます。</li></ul><table><thead><tr><th>(★追加)チェックカラム</th><th>名前</th><th>職場</th><th>説明</th></tr></thead><tbody><tr><td>true/false(デフォルト:false)</td><td>Aさん</td><td>東京</td><td>フロントエンドエンジニア</td></tr><tr><td>true/false(デフォルト:false)</td><td>Bさん</td><td>名古屋</td><td>バックエンドエンジニア</td></tr><tr><td>true/false(デフォルト:false)</td><td>Cさん</td><td>大分</td><td>インフラエンジニア</td></tr></tbody></table><p>ユーザがレコードごとのチェックカラムを操作し、その変更を検知できるかどうかを見てみます。</p><h3 id="正しい例"><a href="#正しい例" class="headerlink" title="正しい例"></a>正しい例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ユーザ一覧<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- テーブル --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c-grid</span> <span class="attr">:data</span>=<span class="string">"users"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">c-grid-check-column</span> <span class="attr">field</span>=<span class="string">"check"</span>&gt;</span><span class="tag">&lt;/<span class="name">c-grid-check-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">c-grid-column</span> <span class="attr">field</span>=<span class="string">"name"</span>&gt;</span>名前<span class="tag">&lt;/<span class="name">c-grid-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">c-grid-column</span> <span class="attr">field</span>=<span class="string">"workplace"</span>&gt;</span>職場<span class="tag">&lt;/<span class="name">c-grid-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">c-grid-column</span> <span class="attr">field</span>=<span class="string">"note"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">width</span>=<span class="string">"200px"</span>&gt;</span>説明<span class="tag">&lt;/<span class="name">c-grid-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">c-grid</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 値の更新を確認するため、テーブルの中身をそのまま出力してみる --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>テーブルの中身: &#123;&#123; users &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">// import箇所省略</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: 'users',</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      users: [] // cheetah-gridにバインドされる変数</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mounted () &#123;</span><br><span class="line">    const vm = this</span><br><span class="line">    vm.onLoad()</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    /**</span><br><span class="line">     * ユーザ一覧取得</span><br><span class="line">     *</span><br><span class="line">     * @returns &#123;void&#125;</span><br><span class="line">     */</span><br><span class="line">    onLoad () &#123;</span><br><span class="line">      const vm = this</span><br><span class="line"></span><br><span class="line">      // バックエンドサーバからユーザ一覧データを取得</span><br><span class="line">      vm.axios.get('/api/v1/users').then(response =&gt; &#123;</span><br><span class="line">        vm.users = response.data.map(e =&gt; &#123;</span><br><span class="line">          // チェックカラム用、デフォルトはfalse</span><br><span class="line">          e.check = false</span><br><span class="line">          return e</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>画面での出力:</p><p>下図のように、テーブルとデバッグ用にテーブルの中身がそれぞれ出力されます。<br><img src="/images/20200316/photo_20200316_01.png"></p><p>チェックカラムをクリックすると、チェックが付きます。<br>デバッグ用に出力したテーブルの中身データにも反映されています。<br><img src="/images/20200316/photo_20200316_02.png"></p><h3 id="うまくいかない例"><a href="#うまくいかない例" class="headerlink" title="うまくいかない例"></a>うまくいかない例</h3><p>当初、私は<code>forEach()</code>ループを用いた代入操作を行っていました。</p><ul><li><code>onLoad()</code>メソッド以外共通のため省略</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">onLoad () &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// バックエンドサーバからユーザ一覧データを取得</span></span><br><span class="line">  vm.axios.get(<span class="string">'/api/v1/users'</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    vm.users = response.data</span><br><span class="line">    vm.users.forEach(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// チェックカラム用、デフォルトはfalse</span></span><br><span class="line">      e.check = <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>画面での出力:</p><p>チェックカラムをクリックしても、デバッグ用に出したデータは書き換わっていません。<br><img src="/images/20200316/photo_20200316_03.png"></p><h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>配列の各要素ごとの直接操作をやめ、代わりに<code>Array.prototype.map()</code>などを用いて<strong>新しい配列インスタンス</strong>を生成してあげるようにしましょう。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">onLoad () &#123;</span><br><span class="line">  <span class="keyword">const</span> vm = <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">  vm.axios.get(<span class="string">'/api/v1/files'</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ★Array.prototype.map()でインスタンスを新規生成</span></span><br><span class="line">    vm.users = response.data.map(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      e.check = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">return</span> e</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="なぜ配列の各要素ごとに直接操作すると値が更新されないのか"><a href="#なぜ配列の各要素ごとに直接操作すると値が更新されないのか" class="headerlink" title="なぜ配列の各要素ごとに直接操作すると値が更新されないのか"></a>なぜ配列の各要素ごとに直接操作すると値が更新されないのか</h2><p>公式マニュアルの <a href="https://jp.vuejs.org/v2/guide/list.html" target="_blank" rel="noopener">リストレンダリング</a> に詳しく書かれています。</p><p>以下、 <a href="https://jp.vuejs.org/v2/guide/list.html#オブジェクトの変更検出の注意" target="_blank" rel="noopener">https://jp.vuejs.org/v2/guide/list.html#オブジェクトの変更検出の注意</a> からの引用です。</p><blockquote><p>再度になりますが、現代の JavaScript の制約のため、Vue は<strong>プロパティの追加や削除を検出することはできません</strong>。(中略)<br>Vue はすでに作成されたインスタンスに新しいルートレベルのリアクティブプロパティを動的に追加することはできません。</p></blockquote><p>また、公式マニュアルの <a href="https://jp.vuejs.org/v2/guide/reactivity.html" target="_blank" rel="noopener">リアクティブの探求</a>も併せて参照してください。</p><p>配列の中に新たなプロパティを生やそうとしても、Vue.jsはそれを監視していないため、値の更新検知や再描画ができないよ。新しくインスタンスを作ってあげてね。ということでした。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>今回のトラブルを通じてVue.jsの仕組みについてより理解が深まりました。<br>Vue.jsは便利で手軽ですが、このあたりの内部的な仕組みもしっかりと把握しておきたいですね。</p><hr><p>関連記事：</p><ul><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li><li><a href="https://future-architect.github.io/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;その値、Vue-jsは監視していますか？～Vue-jsで値が更新されないときに気をつけるところ～&quot;&gt;&lt;a href=&quot;#その値、Vue-jsは監視していますか？～Vue-jsで値が更新されないときに気をつけるところ～&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>公開鍵暗号(非対称鍵暗号)の仕組みをわかりやすく解説してみる</title>
    <link href="https://future-architect.github.io/articles/20200312/"/>
    <id>https://future-architect.github.io/articles/20200312/</id>
    <published>2020-03-12T01:34:17.000Z</published>
    <updated>2020-03-12T01:52:57.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXチームの村瀬です。</p><p>公開鍵暗号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">公開鍵で暗号化されたデータは対応する秘密鍵でしか復号できない。</span><br></pre></td></tr></table></figure><p>最初にこの説明を聞いた時にそんな鍵がありえるのか？と疑問に思いました。<br>技術力もなかった当時は不思議で仕方ありませんでした。自分で利用することもないし、知識として覚えておこうぐらいの感覚でいたのですがある程度技術力がついた今日では、常日頃からHTTPSやSSHで利用していることにふと気が付き自分の理解のため仕組みについて公開鍵暗号の一つであるRSA暗号について調べてみることにしました。<br>RSA暗号を解説しているページはたくさんありますが、この記事では極力簡単な内容になることを心がけてみました。</p><h1 id="暗号化、復号の概要"><a href="#暗号化、復号の概要" class="headerlink" title="暗号化、復号の概要"></a>暗号化、復号の概要</h1><p>図で表すとこんな感じです。</p><img src="/images/20200312/photo_20200312_01.png" class="img-middle-size"><h1 id="暗号化式と復号式"><a href="#暗号化式と復号式" class="headerlink" title="暗号化式と復号式"></a>暗号化式と復号式</h1><p>RSA暗号ではべき乗と余り(mod)を利用します。<br>暗号化する際はとある数EとNを利用します。</p><p>$$暗号文=平文^E \quad mod \quad N$$</p><p>復号する際も式は同様ですがEの代わりにDを利用します。</p><p>$$平文=暗号文^D \quad mod \quad N$$</p><p>式から暗号文を削除すると以下の式が成り立ちます。</p><p>$$平文=平文^{ED} \quad mod \quad N$$</p><h1 id="とりあえずだまされたと思って確認"><a href="#とりあえずだまされたと思って確認" class="headerlink" title="とりあえずだまされたと思って確認"></a>とりあえずだまされたと思って確認</h1><p>平文を5,とある数E,D,Nを3,7,33として確認してみます。</p><p>暗号化</p><p>$$5^3 \quad mod \quad 33 = 125 \quad mod \quad 33 = 26$$</p><p>復号</p><p>$$26^7 \quad mod \quad 33 = 8031810176 \quad mod \quad 33\quad = 5$$</p><p>平文の5が暗号化することで26になり、26を復号することで5に戻りましたね。<br>modが33なので平文が1～32の整数であれば同様に暗号化、復号すれば元の平文に戻すことができます。</p><h1 id="E-D-Nの求め方"><a href="#E-D-Nの求め方" class="headerlink" title="E,D,Nの求め方"></a>E,D,Nの求め方</h1><p>暗号化、複合に用いたE,D,Nはどんな数字でも良いわけではありません。<br>では、暗号化、復号が成り立つE,D,Nはどのような数なのでしょうか？</p><p>任意の正の整数a,nと、相違なる素数p、qにおいて以下の式が成り立ちます。<br>どうして成り立つのかは省略しますがRSA暗号の発明者が発見したぐらいに思ってください。</p><p>$$a^{(p−1)(q−1)n+1} ≡ a \quad mod \quad pq$$</p><p>RSA暗号の肝はこの数式です。<br>NからE,Dを探せばRSAで暗号化、復号ができます。</p><p>先の例ではNが33でしたのでそれを素因数分解してp,qは3,11です。ここからE,Dを求めます。</p><p>$$ED = (p−1)(q−1)n+1=(3-1)(11-1)×1+1=2*10+1 =21$$</p><p>ここまで触れていませんでしたがE,Dは素数である必要があります。素数同士のかけ算で21になるE,Dの組み合わせは3,7※ですね。<br>※説明のためにしれっと素因数分解していますが、実際の鍵生成ではEを固定値にすることで容易にDを求めています。</p><h1 id="秘密鍵が容易に特定されるのでは？"><a href="#秘密鍵が容易に特定されるのでは？" class="headerlink" title="秘密鍵が容易に特定されるのでは？"></a>秘密鍵が容易に特定されるのでは？</h1><p>今回の場合、暗号する為には秘密鍵として3,33の数字の組が必要で、複合する為に公開鍵として7,33の数字の組が必要です。<br>上記のE,D,Nの求め方の計算方法を用いれば公開鍵がわかれば秘密鍵も簡単にわかってしまいそうです。<br>では、実際に私たちが利用している秘密鍵はなぜ特定が困難なのでしょうか？</p><p>それは素因数分解が容易にできないことを利用し特定を困難にしています。<br>二桁程度の素因数分解は人間でも瞬時に計算できますが、数百桁の素因数分解はコンピュータを利用しても容易には計算できません。<br>ですので実際に利用されている鍵はとても大きな数を利用しています。</p><h1 id="数字が暗号化出来るのはわかったけど文字列を暗号化したいんだけど？"><a href="#数字が暗号化出来るのはわかったけど文字列を暗号化したいんだけど？" class="headerlink" title="数字が暗号化出来るのはわかったけど文字列を暗号化したいんだけど？"></a>数字が暗号化出来るのはわかったけど文字列を暗号化したいんだけど？</h1><p>コンピュータで取り扱われる文字は文字コードで成り立っています。文字コードは一つ一つの文字が数値から成り立っているので数値として扱われます。<br>それを一文字ずつ暗号化しているので文字列でも暗号化できます。</p><p>例えばFutureをASCII文字コードにすると70,117,116,117,114,101になります。</p><h1 id="暗号化と復号に利用する鍵"><a href="#暗号化と復号に利用する鍵" class="headerlink" title="暗号化と復号に利用する鍵"></a>暗号化と復号に利用する鍵</h1><p>公開鍵を利用して暗号化、秘密鍵を利用して復号できるってことは逆に秘密鍵を利用して暗号化、公開鍵を利用して復号もできるのでは？</p><p>はい。鍵を逆に利用してもできます。<br>重要なのは暗号化した鍵で復号できず、対となる鍵でしか復号できないことです。<br>詳細は割愛しますがこれは実際に電子署名で利用されています。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>エンジニアでなくともインターネットを利用する人であればHTTPSの裏などで身近に公開鍵暗号が意識することなく利用されてます。<br>暗号化の原理を知らずに利用していましたが調べてみると面白く、素晴らしさを実感できました。<br>暗号化、復号に利用される計算式は中学生までに習う足し算、引き算、かけ算(べき乗)、余り(mod)、素数だけで成り立っていることに驚きました。<br>RSA暗号の発明は難産だったようですが発明者って本当に頭が良いですね。</p><p>なお、この記事を作成する上で以下のページを参考にさせていただきました。<br><a href="https://persol-tech-s.co.jp/corporate/security/article.html?id=26" target="_blank" rel="noopener">https://persol-tech-s.co.jp/corporate/security/article.html?id=26</a><br><a href="https://qiita.com/YutaKase6/items/cd9e26d723809dc85928" target="_blank" rel="noopener">https://qiita.com/YutaKase6/items/cd9e26d723809dc85928</a><br><a href="https://qiita.com/jabba/items/e5d6f826d9a8f2cefd60" target="_blank" rel="noopener">https://qiita.com/jabba/items/e5d6f826d9a8f2cefd60</a></p><p>関連する記事:</p><ul><li><a href="https://future-architect.github.io/articles/20200121/">スロットリングとの付き合い方</a></li><li><a href="https://future-architect.github.io/articles/20191107/">インフラ入門vol.3(ネットワーク冗長化構成)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXチームの村瀬です。&lt;/p&gt;
&lt;p&gt;公開鍵暗号&lt;/p&gt;
&lt;figure class=&quot;highligh
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="暗号" scheme="https://future-architect.github.io/tags/%E6%9A%97%E5%8F%B7/"/>
    
      <category term="RSA暗号" scheme="https://future-architect.github.io/tags/RSA%E6%9A%97%E5%8F%B7/"/>
    
  </entry>
  
  <entry>
    <title>JavaプログラマーのためのGo言語入門</title>
    <link href="https://future-architect.github.io/articles/20200311/"/>
    <id>https://future-architect.github.io/articles/20200311/</id>
    <published>2020-03-11T00:39:47.000Z</published>
    <updated>2020-03-12T01:44:02.223Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaプログラマーのためのGo言語入門"><a href="#JavaプログラマーのためのGo言語入門" class="headerlink" title="JavaプログラマーのためのGo言語入門"></a>JavaプログラマーのためのGo言語入門</h2><p>こちらは<a href="https://yourbasic.org/golang/go-java-tutorial/" target="_blank" rel="noopener">Java to Go in-depth tutorial</a>の日本語訳です<br>原文の著者に許諾を得て翻訳・公開いたします。</p><p>このチュートリアルは、JavaプログラマーがすばやくGo言語にキャッチアップできるようにすることを目的としています。</p><h2 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h2><ul><li><a href="./#Hello-stack1">Hello stack</a></li><li><a href="./#主な違い">主な違い</a></li><li><a href="./#シンタックス（文法">シンタックス（文法）</a></li><li><a href="./#定数">定数</a></li><li><a href="./#構造体">構造体</a></li><li><a href="./#ポインタ">ポインタ</a></li><li><a href="./#スライス">スライス</a></li><li><a href="./#値の作成">値の作成</a></li><li><a href="./#メソッドとインターフェース">メソッドとインターフェース</a></li><li><a href="./#エラー">エラー</a></li><li><a href="./#PanicとRecover">PanicとRecover</a></li><li><a href="./#ゴルーチンとチャネル">ゴルーチンとチャネル</a></li><li><a href="./#Hello-server">Hello server</a></li></ul><h2 id="Hello-stack1"><a href="#Hello-stack1" class="headerlink" title="Hello stack1"></a>Hello stack<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></h2><p>まずはじめに簡単な例を見ていきましょう。この例ではシンプルな抽象データ型をGoで実装しています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// collectionパッケージはstring型を格納できるスタックを実装している</span></span><br><span class="line"><span class="keyword">package</span> collection</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stackのゼロ値はすぐに使用できる空のスタック</span></span><br><span class="line"><span class="keyword">type</span> Stack <span class="keyword">struct</span> &#123;</span><br><span class="line">    data []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pushメソッドはスタックの一番上にxを追加する</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Stack)</span> <span class="title">Push</span><span class="params">(x <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    s.data = <span class="built_in">append</span>(s.data, x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Popメソッドは最後に追加された要素をスタックから削除しつつ、その要素を返す</span></span><br><span class="line"><span class="comment">// 空のスタックでPopメソッドを呼ぶとランタイムエラーが発生する</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Stack)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    n := <span class="built_in">len</span>(s.data) - <span class="number">1</span></span><br><span class="line">    res := s.data[n]</span><br><span class="line">    s.data[n] = <span class="string">""</span> <span class="comment">// メモリリークを避けるための処理</span></span><br><span class="line">    s.data = s.data[:n]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sizeメソッドはスタックの要素数を返す</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Stack)</span> <span class="title">Size</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s.data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>最上位の宣言文の前に直接書かれているコメントはドキュメントコメントになります。ドキュメントコメントはプレーンテキストで書かれます。</li><li>変数を宣言するときは、変数名の後ろに型を書きます。</li><li>構造体( <code>struct</code> )はJavaでいうところのクラスに該当します。Goの構造体はメソッドをメンバに含めることはできません。変数のみを構造体のメンバに含めることができます。</li><li>コード上の <code>(s *Stach)</code> という部分でメソッドのレシーバーを宣言しています。これはJavaでいうところの <code>this</code> に該当します。</li><li><code>:=</code> という演算子は変数の宣言と初期化を同時に行ってくれます。変数の型は初期化式から自動で導かれます。</li></ul><p>以下のコードは、抽象データ型 <code>collection.Stack</code> を用いたHello worldプログラムです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> collection_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"go-for-java-programmers/collection"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ExampleStack</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> s collection.Stack</span><br><span class="line">    s.Push(<span class="string">"world!"</span>)</span><br><span class="line">    s.Push(<span class="string">"Hello, "</span>)</span><br><span class="line">    <span class="keyword">for</span> s.Size() &gt; <span class="number">0</span> &#123;</span><br><span class="line">        fmt.Print(s.Pop())</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println()</span><br><span class="line">    <span class="comment">// Output: Hello, world!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>この <code>collection_test</code> というテストパッケージは <code>collection</code> パッケージと同じディレクトリに配置します。</li><li>1つめの<code>import</code> 文の <code>fmt</code> はGoの標準パッケージです。 2つめ <code>import</code> 文は“go-for-java-programmers/collection”ディレクトリのパッケージを使うことを示しています。</li><li>ソースコード上では <code>fmt</code> や <code>collection</code> という短い名前でこれらのパッケージにアクセスできます。</li></ul><p>NOTE: Goでスタックを実装する慣用的な方法は、スライスを直接使用することです。詳しくは<a href="https://yourbasic.org/golang/implement-stack/" target="_blank" rel="noopener">Implement a stack (LIFO)</a>を参照してください。</p><h2 id="主な違い"><a href="#主な違い" class="headerlink" title="主な違い"></a>主な違い</h2><h3 id="オブジェクト指向プログラミング"><a href="#オブジェクト指向プログラミング" class="headerlink" title="オブジェクト指向プログラミング"></a>オブジェクト指向プログラミング</h3><ul><li>Goにはコンストラクタを伴うクラスという概念がありません。インスタンスメソッド、クラスの継承構造、メソッドの動的ルックアップで実現したいことを、Goでは<a href="https://yourbasic.org/golang/structs-explained/" target="_blank" rel="noopener">struct</a>と<a href="https://yourbasic.org/golang/interfaces-explained/" target="_blank" rel="noopener">interface</a>を用いて実現します。</li><li>Goでは、どんな型に対しても<a href="https://yourbasic.org/golang/methods-explained/" target="_blank" rel="noopener">メソッド</a>を作成することができます。レシーバーをボックス化する必要もありません。レシーバーはJavaでいうところの <code>this</code> に対応します。レシーバーには値そのものかポインタが入ります。</li><li>Javaの <code>public</code>や <code>package-private</code> に似た２つのアクセスレベルがGoには存在します。トップレベルで宣言された<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>変数や関数の名前が大文字で始まる場合は <code>public</code> 、小文字で始まる場合は <code>package-private</code> のアクセスレベルになります。</li></ul><h3 id="関数型プログラミング"><a href="#関数型プログラミング" class="headerlink" title="関数型プログラミング"></a>関数型プログラミング</h3><ul><li>Goの関数は第一級オブジェクトです。<a href="https://yourbasic.org/golang/function-pointer-type-declaration/" target="_blank" rel="noopener">関数値</a>は他の値と同じように使用したり、関数の引数として渡すことができます。<a href="https://yourbasic.org/golang/anonymous-function-literal-lambda-closure/" target="_blank" rel="noopener">関数リテラル</a>は外側の関数で定義された変数を参照できます。</li></ul><h3 id="ポインタと参照"><a href="#ポインタと参照" class="headerlink" title="ポインタと参照"></a>ポインタと参照</h3><ul><li>Goは、オブジェクトや配列だけでなく、すべての型で<a href="https://yourbasic.org/golang/pointers-explained/" target="_blank" rel="noopener">ポインタ</a>を使用することができます。任意の型 <code>T</code> には対応するポインタ型 <code>*T</code> が存在します。これは型 <code>T</code> の値へのポインタを示しています。</li><li>Goでは無効なポインタに <code>nil</code> を使用しますが、Javaでは <code>null</code> を使用します。</li><li>Goの配列は値型です。配列が関数の引数として使用される場合、その関数は配列へのポインターではなく配列のコピーを受け取ります。実際には、配列ではなくスライスを関数の引数に渡すことがほとんどです。スライスは参照型です。</li><li>特定の型(マップ, スライス, チャネル)は値型ではなく、参照型です。つまり、マップを関数に渡してもマップはコピーされません。渡されたマップを関数内で変更した場合、変更は呼び出し元にも反映されます。Javaの用語を使うと、これはマップへの参照が行われているからだと説明できます。</li></ul><h3 id="組み込み型"><a href="#組み込み型" class="headerlink" title="組み込み型"></a>組み込み型</h3><ul><li>文字列型はGoの言語仕様として組み込まれています。<a href="https://yourbasic.org/golang/string-functions-reference-cheat-sheet/" target="_blank" rel="noopener">string</a> はbyte型のスライスのように振る舞いますが、イミュータブルです。</li><li>ハッシュテーブルはGoの言語自体に組み込まれています。Goでは<a href="https://yourbasic.org/golang/maps-explained/" target="_blank" rel="noopener">map</a>と呼びます。</li></ul><h3 id="エラーハンドリング"><a href="#エラーハンドリング" class="headerlink" title="エラーハンドリング"></a>エラーハンドリング</h3><ul><li>Goでは例外処理(exceptions)の代わりに、<a href="https://yourbasic.org/golang/errors-explained/" target="_blank" rel="noopener">error</a>を使用します。EOFなどのイベント、配列の範囲外の領域にアクセスしようとしたしたときのランタイム<a href="https://yourbasic.org/golang/recover-from-panic/" target="_blank" rel="noopener">パニック</a>はerrorで表現されます。</li></ul><h3 id="並行処理"><a href="#並行処理" class="headerlink" title="並行処理"></a>並行処理</h3><ul><li>Goでは個別に動く実行スレッドを<a href="https://yourbasic.org/golang/goroutines-explained/" target="_blank" rel="noopener">ゴルーチン</a>と呼びます。またゴルーチン間の通信は<a href="https://yourbasic.org/golang/channels-explained/" target="_blank" rel="noopener">チャネル</a>を使用します。これらは言語が提供しています。</li></ul><h3 id="用意されていない機能"><a href="#用意されていない機能" class="headerlink" title="用意されていない機能"></a>用意されていない機能</h3><ul><li>Goは暗黙的な型変換をサポートしていません。異なる型を混在させるような操作では、明示的な型変換が必要です。一方、数値型の定数を宣言するときには、型を指定せずに定数を宣言できます。この場合、宣言時の段階では、数値の上限は未確定になります。詳しくは<a href="https://yourbasic.org/golang/untyped-constants/" target="_blank" rel="noopener">Untyped numeric constants with no limits</a>を参照してください。</li><li>Goでは関数のオーバロードをサポートしていません。同じスコープ内の関数及びメソッドにはユニークな名前を付ける必要があります。代替手段としては<a href="https://yourbasic.org/golang/overload-overwrite-optional-parameter/" target="_blank" rel="noopener">Optional parameters and method overloading</a>を参照してください。</li><li>Goには組み込みのスライスやマップといったジェネリクス及び、<code>append</code> や <code>copy</code> といったジェネリクス用関数があります。しかし、ジェネリクス用関数を独自実装できる機構はありません。代替手段としては、<a href="https://yourbasic.org/golang/generics/" target="_blank" rel="noopener">Generics (alternatives and workarounds)</a>を参照してください。</li></ul><h2 id="シンタックス（文法）"><a href="#シンタックス（文法）" class="headerlink" title="シンタックス（文法）"></a>シンタックス（文法）</h2><h3 id="宣言"><a href="#宣言" class="headerlink" title="宣言"></a>宣言</h3><p>変数の宣言の仕方は、Javaと比べると逆になっています。Goでは変数名の後ろに型名を記述します。これによってGoのコンパイラが「変数××の型は○○である」と解釈しやすくなります。</p><table><thead><tr><th align="left">Goの書き方</th><th align="left">Javaでざっくりイコールな書き方</th></tr></thead><tbody><tr><td align="left">var v1 int</td><td align="left">int v1 = 0;</td></tr><tr><td align="left">var v2 *int</td><td align="left">Integer v2 = null;</td></tr><tr><td align="left">var v3 string</td><td align="left">String v3 = “”;</td></tr><tr><td align="left">var v4 [10]int</td><td align="left">int[] v4 = new int[10];  <br> (Arrays are values in Go.)</td></tr><tr><td align="left">var v5 []int</td><td align="left">int[] v5 = null;</td></tr><tr><td align="left">var v6 *struct{ a int }</td><td align="left">class C { int a; } <br> C v6 = null;</td></tr><tr><td align="left">var v7 map[string]int</td><td align="left">HashMap&lt;String, Integer&gt; v7; <br> v7 = null;</td></tr><tr><td align="left">var v8 func(a int) int</td><td align="left">interface F { <br> &nbsp;&nbsp;&nbsp;&nbsp;int f(int a); <br> } <br> F v8 = null;</td></tr></tbody></table><p>一般的に、宣言ではキーワードの後ろにオブジェクト<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>の名称が続きます。キーワードとは<code>const</code>、<code>type</code>、<code>var</code>や<code>func</code>などです。キーワードの後ろに括弧でまとめて宣言を書くこともできます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">    n <span class="keyword">int</span></span><br><span class="line">    x <span class="keyword">float64</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>関数を定義する時、引数の名前の付け方は統一する必要があります。それぞれの引数に名前をつけるか、または全く名前をつけないかです。いずれかに名前をつけ、いずれかは省略するということはできません。複数の引数が同じ型の場合、グループ化することは可能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(i, j, k <span class="keyword">int</span>, s, t <span class="keyword">string</span>)</span></span></span><br></pre></td></tr></table></figure><p>変数は宣言の時に初期化することもできます。初期化も行う場合、変数の型を特定することもできますが、必須ではありません。型が特定されていない場合は、初期化式の右辺の値の型が設定されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v9 = *v2</span><br></pre></td></tr></table></figure><p>もしも変数が明示的に初期化されていない場合でも、型は指定する必要があります。この場合、初期値は暗黙的に<a href="https://yourbasic.org/golang/default-zero-value/" target="_blank" rel="noopener">ゼロ値</a>（0、<code>nil</code>、””など）が与えられます。Goの世界では初期化されていない変数は存在しません。</p><h3 id="宣言の省略形"><a href="#宣言の省略形" class="headerlink" title="宣言の省略形"></a>宣言の省略形</h3><p>関数の中では、<code>:=</code>で宣言を簡略化することもできます。例えばこの文は</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v10 := v1</span><br></pre></td></tr></table></figure><p>下の文と同様の意味を持ちます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v10 = v1</span><br></pre></td></tr></table></figure><h3 id="関数型"><a href="#関数型" class="headerlink" title="関数型"></a>関数型</h3><p>Goでは、関数は第一級オブジェクトに属しています。Goの世界では、引数と戻り値の型が同一の関数は全て同じ<a href="https://yourbasic.org/golang/function-pointer-type-declaration/" target="_blank" rel="noopener">関数型</a>をしているとみなされます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> binOp <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">var</span> <span class="title">op</span> <span class="title">binOp</span></span></span><br><span class="line"><span class="function"><span class="title">add</span> := <span class="title">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> i + j &#125;</span><br><span class="line"></span><br><span class="line">op = add</span><br><span class="line">n = op(<span class="number">100</span>, <span class="number">200</span>)  <span class="comment">// n = 100 + 200</span></span><br></pre></td></tr></table></figure><h3 id="複数割り当て"><a href="#複数割り当て" class="headerlink" title="複数割り当て"></a>複数割り当て</h3><p>Goでは代入で複数の値を割り当てることができます。右側の式は左側の被演算子に割り当てられる前に評価されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i, j = j, i  <span class="comment">// iとjを置き換える</span></span><br></pre></td></tr></table></figure><p>関数が複数の値を戻り値として返すこともできます。その場合括弧()の中に列挙して示します。戻り値を一度に複数の変数に保存することもできます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span> <span class="params">(i <span class="keyword">int</span>, pj *<span class="keyword">int</span>)</span></span> &#123; ... &#125;</span><br><span class="line">v1, v2 = f()</span><br></pre></td></tr></table></figure><h3 id="ブランク識別子"><a href="#ブランク識別子" class="headerlink" title="ブランク識別子"></a>ブランク識別子</h3><p><a href="https://yourbasic.org/golang/underscore/" target="_blank" rel="noopener">ブランク識別子</a>は<code>_</code>(アンダースコア）で表され、複数の戻り値が返ってくる式で値を無視したい場合に用いられます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1, _ = f()  <span class="comment">// f()の関数から返ってきた2つ目の値を無視する</span></span><br></pre></td></tr></table></figure><h3 id="セミコロンとフォーマット"><a href="#セミコロンとフォーマット" class="headerlink" title="セミコロンとフォーマット"></a>セミコロンとフォーマット</h3><p>セミコロンやフォーマットで悩む必要はありません。「gofmt」を使えば、唯一のスタンダードであるGoのスタイルに整形することができます。このスタイルは最初は違和感を感じるかもしれませんが、他のスタイルと同じように良く、また慣れてしまえば快適なものとなるでしょう。</p><p>実際、セミコロンを使う機会はGoではめったにありません。理論上、Goの全ての宣言はセミコロンで終わります。しかしGoは、行が明らかに処理途中のものでない限り、空白でない行の終わりに暗黙的にセミコロンを挿入します。これによって、場合によっては改行が許されないケースもでてくるのです。例えば、下のような書き方は許されません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">g</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;            <span class="comment">// 不正: "&#123;" は前の行に存在すべきである</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この場合、<code>g()</code> のすぐあとにセミコロンが挿入されてしまいます。その結果、関数を定義しているのではなく関数を宣言しているとみなされてしまいます。同様に、下のような書き方もできません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;       <span class="comment">// 不正: "else &#123;" は前の行に存在すべきである</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この場合、<code>else</code>の前の<code>}</code>の直後にセミコロンが挿入されてしまい、結果として文法エラーになります。</p><h3 id="if文（条件文）"><a href="#if文（条件文）" class="headerlink" title="if文（条件文）"></a>if文（条件文）</h3><p>Goではif文、for文の条件式、switch文の値を括弧()で囲みません。一方、if文やfor文のボディは中括弧{}で囲む必要があります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a &lt; b &#123; f() &#125;</span><br><span class="line"><span class="keyword">if</span> (a &lt; b) &#123; f() &#125;          <span class="comment">// 括弧は不要</span></span><br><span class="line"><span class="keyword">if</span> (a &lt; b) f()              <span class="comment">// 不正</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;&#125; <span class="comment">// 不正</span></span><br></pre></td></tr></table></figure><p>さらに、if文やswitch文ではオプショナルな初期化式を記述することもできます。多くの場合これはローカル変数を設定するときに用いられます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err := file.Chmod(<span class="number">0664</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Print(err)</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="For文"><a href="#For文" class="headerlink" title="For文"></a>For文</h3><p>Goにはwhile文もdo-while文もありません。for文を単一の条件と一緒に用いることができ、これがwhile文と同様の動きになります。条件を完全に省略すると無限ループ文となります。</p><p><a href="https://yourbasic.org/golang/for-loop/" target="_blank" rel="noopener">for文</a>は文字列（<code>string</code>）、配列（<code>array</code>）、スライス（<code>slice</code>）、マップ（<code>map</code>）やチャネル（<code>channel</code>）を <code>range</code> 句に指定できます。通常であれば下のように書きますが、</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(a); i++ &#123; ... &#125;</span><br></pre></td></tr></table></figure><p><code>a</code>の各要素に対して繰り返して処理をしたい場合、下のように書くことができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> a &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>上の書き方では、<code>i</code>にインデックスが割り当てられ、<code>v</code>に配列やスライス、文字列などの要素の連続する値が割り当てられます。</p><ul><li>文字列の場合は、<code>i</code>はバイトごとのインデックスとなり、<code>v</code>は<code>rune</code>型のUnicodeのコードポイント<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>となります（<code>rune</code>は<code>int32</code>のエイリアスです）。</li><li>mapでの繰り返しはキー・バリューのペアの反復値を生成しますが、チャネルは反復値を１つだけ生成します。</li></ul><h3 id="BreakとContinue"><a href="#BreakとContinue" class="headerlink" title="BreakとContinue"></a>BreakとContinue</h3><p>Javaと同じように、Goでも<code>break</code>と<code>continue</code>でラベルを指定することができますが、for文、switch文、select文の中でラベルを参照する必要があります。</p><h3 id="Switch文"><a href="#Switch文" class="headerlink" title="Switch文"></a>Switch文</h3><p>Goの<a href="https://yourbasic.org/golang/switch-statement/" target="_blank" rel="noopener">switch文</a>では、<code>break</code>を書かなくても、<code>switch</code> から抜け出ることができます。コードブロックの最後に<code>fallthrough</code>文を置くことで、次の <code>case</code>に処理を回すことができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> n &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: <span class="comment">// caseの中身は空である</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    f() <span class="comment">// n == 0のときf()は呼ばれない</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>しかし、<code>case</code>は複数の値を持つことができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> n &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>, <span class="number">1</span>:</span><br><span class="line">    f() <span class="comment">// n == 0 または n == 1のときf()が呼ばれる</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>case</code>の中の値は、例えば文字列やポインタなど、等価比較演算子で扱うことのできるどんな型でも使えます。switch式がない場合、その式は<code>true</code>とみなされます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> n &lt; <span class="number">0</span>:</span><br><span class="line">    f1()</span><br><span class="line"><span class="keyword">case</span> n == <span class="number">0</span>:</span><br><span class="line">    f2()</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    f3()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="インクリメントとデクリメント"><a href="#インクリメントとデクリメント" class="headerlink" title="インクリメントとデクリメント"></a>インクリメントとデクリメント</h3><p><code>++</code>と<code>--</code>は後置演算子として文の中でのみ使うことができます。式の中で扱うことはできません。例えば、<code>n = i++</code>と書くことはできません。</p><h3 id="Defer文"><a href="#Defer文" class="headerlink" title="Defer文"></a>Defer文</h3><p><a href="https://yourbasic.org/golang/defer/" target="_blank" rel="noopener">defer文</a>を使うことで、呼び出し元の関数がreturnされたタイミングで実行されるべき処理を記述することができます。</p><ul><li>defer宣言された関数は、呼び出し元の関数がどのようにretrunされたかに関わらず実行されます。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></li></ul><ul><li>defer宣言された関数の引数は、defer宣言されたタイミングで計算され、実行時に使用されるまで保存されます。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f, err := os.Open(<span class="string">"filename"</span>)</span><br><span class="line"><span class="keyword">defer</span> f.Close() <span class="comment">// fはこの関数がreturnされたときに終了する</span></span><br></pre></td></tr></table></figure><h2 id="定数"><a href="#定数" class="headerlink" title="定数"></a>定数</h2><p>Goの定数は<a href="https://yourbasic.org/golang/untyped-constants/" target="_blank" rel="noopener">untypedな状態</a>にすることもできます<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>。このルールは下記に適用されます。</p><ul><li>数値リテラル、</li><li>型なしの定数のみを用いている式、</li><li>型が与えられていない、もしくは初期化式が型なしであるconst式</li></ul><p>型なしの定数の値は、型のある値が必要になったタイミングで型定義されます。これにより、Goでは明示的な型変換が行われないにも関わらず、定数を比較的自由に扱うことができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">uint</span></span><br><span class="line">f(a + <span class="number">1</span>)   <span class="comment">// 型の定義されていない数値1はuintとして型定義される</span></span><br><span class="line">f(a + <span class="number">1e3</span>) <span class="comment">// 1e3もuintとして定義される</span></span><br></pre></td></tr></table></figure><p>Go言語では型定義のない数値の定数に上限値は明確にされません。型が必要になったときにのみ上限は適用されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> huge = <span class="number">1</span> &lt;&lt; <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> n <span class="keyword">int</span> = huge &gt;&gt; <span class="number">98</span></span><br></pre></td></tr></table></figure><p>もしも変数宣言において型が定義されておらず、対応する式が型のない数値の定数だった場合、その数値は、値が文字列なのかintegerなのか浮動小数点なのか複素定数なのかによって<code>rune</code>、<code>int</code>、<code>float64</code>か<code>complex128</code>の型にそれぞれ変換されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c := <span class="string">'å'</span>    <span class="comment">// rune (int32のエイリアス)</span></span><br><span class="line">n := <span class="number">1</span> + <span class="number">2</span>  <span class="comment">// int</span></span><br><span class="line">x := <span class="number">2.7</span>    <span class="comment">// float64</span></span><br><span class="line">z := <span class="number">1</span> + <span class="number">2i</span> <span class="comment">// complex128</span></span><br></pre></td></tr></table></figure><p>Goでは列挙型を扱いません。その代わりに、連続して増え続ける値を唯一const宣言することができる<code>iota</code>という特別な名称をつけることができます。constの初期化式が省略された時は、先に定義された式が再利用されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    red = <span class="literal">iota</span> <span class="comment">// red == 0</span></span><br><span class="line">    blue       <span class="comment">// blue == 1</span></span><br><span class="line">    green      <span class="comment">// green == 2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="構造体"><a href="#構造体" class="headerlink" title="構造体"></a>構造体</h2><p><a href="https://yourbasic.org/golang/structs-explained/" target="_blank" rel="noopener">構造体</a>はJavaでいうクラスのようなものですが、構造体のメンバにはメソッドを含めることはできません。構造体は変数のみで構成されます。構造体のポインタは、Javaでいう参照変数のようなものです。Javaのクラスとは対照的に、Goの構造体は直接の値として定義することもできます。どちらの場合でも、構造体のメンバにアクセスするには<code>.</code>を用います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyStruct <span class="keyword">struct</span> &#123;</span><br><span class="line">    s <span class="keyword">string</span></span><br><span class="line">    n <span class="keyword">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x MyStruct     <span class="comment">// x は MyStruct&#123;"", 0&#125; に初期化される</span></span><br><span class="line"><span class="keyword">var</span> px *MyStruct   <span class="comment">// px は nil に初期化される</span></span><br><span class="line">px = <span class="built_in">new</span>(MyStruct) <span class="comment">// px は新たに作られる MyStruct&#123;"", 0&#125; のポインタとなる</span></span><br><span class="line"></span><br><span class="line">x.s = <span class="string">"Foo"</span></span><br><span class="line">px.s = <span class="string">"Bar"</span></span><br></pre></td></tr></table></figure><p>Goでは、ユーザー定義型に対してメソッドを追加することができます。これは構造体をベースにしたユーザー定義型に限った話ではありません。詳しくは<a href="https://yourbasic.org/golang/go-java-tutorial/#methods-and-interfaces" target="_blank" rel="noopener">メソッドとインターフェース</a>をご参照ください。</p><h2 id="ポインタ"><a href="#ポインタ" class="headerlink" title="ポインタ"></a>ポインタ</h2><p>int, struct, arrayの代入操作は、オブジェクト実体をコピーすることを意味します。Javaでいう参照変数をGoで実現するためには<a href="https://yourbasic.org/golang/pointers-explained/" target="_blank" rel="noopener">ポインタ</a>を使用します。</p><p>任意の型Tには、対応するポインタ型 <code>*T</code> があり、型Tの値へのポインタを示します。</p><p>ポインタ変数が参照するメモリ領域を割り当てるには、組み込み関数 <code>new</code> を使用します。これは、型を引数として受け取り、割り当てられたストレージへのポインタを返す関数です。割り当てられたストレージ領域は、その型に対応するゼロ値で初期化されます。例えば、<code>new(int)</code> はint用にストレージの割り当てを新規で行い、その領域を値0で初期化し、そして <code>*int</code> 型を持つそのアドレスを返します。</p><p><code>T p = new T()</code> というJavaコードをGoコードに置き換えてみましょう。<code>T</code> は２つの <code>int</code> 型インスタンスを持つクラスだとします。これに対応するGoコードは次のとおりです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123; a, b <span class="keyword">int</span> &#125;</span><br><span class="line"><span class="keyword">var</span> p *T = <span class="built_in">new</span>(T)</span><br></pre></td></tr></table></figure><p>より慣用的には次のように書きます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p := <span class="built_in">new</span>(T)</span><br></pre></td></tr></table></figure><p> <code>var v T</code> は型Tの値を保持するための変数を宣言していますが、こういった宣言方法はJavaには存在しません。<br>複合リテラルを使用して値を初期化することもできます。例えば：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v := T&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure><p>これは以下と同じです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v T</span><br><span class="line">v.a = <span class="number">1</span></span><br><span class="line">v.b = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>型Tの変数xの場合、アドレス演算子 <code>＆x</code> はxのアドレス(<code>*T</code> 型の値)を提供します。例えば：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p := &amp;T&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// pは型 *Tを持つ</span></span><br></pre></td></tr></table></figure><p>変数xがポインタ型変数の場合、ポインタの間接参照 <code>*x</code>は、xが指す値を示します。ポインタの間接指定はほとんど使用されません。GoはJavaと同様に、変数のアドレスを自動的に取得できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p := <span class="built_in">new</span>(T)</span><br><span class="line">p.a = <span class="number">1</span> <span class="comment">// (*p).a = 1 に等しい</span></span><br></pre></td></tr></table></figure><h2 id="スライス"><a href="#スライス" class="headerlink" title="スライス"></a>スライス</h2><p><a href="https://yourbasic.org/golang/slices-explained/" target="_blank" rel="noopener">スライス</a>は概念的には下記の3つのフィールドをもつ構造体です。</p><ul><li>配列に対するポインタ</li><li>長さ</li><li>容量</li></ul><p>スライスでは<code>[]</code>演算子を使ってスライス内部の配列の要素にアクセスします。</p><ul><li>組み込み関数である<code>len</code>関数はスライスの長さ(<code>length</code>)を返します。</li><li>組み込み関数である<code>cap</code>関数はスライスの容量(<code>capacity</code>)を返します。</li></ul><p>ある配列やスライス(例えば<code>a</code>)から新規のスライスを生成する場合、<code>a[i:j]</code>の形で生成することができます。この<code>a[i:j]</code>は</p><ul><li>インデックス<code>i</code>からインデックス<code>j</code>の手前までの<code>a</code>を参照したスライスになります。</li><li><code>j-i</code>の長さを持っています。</li><li><code>i</code>が省略されていた場合、スライスは0を起点とします。</li><li><code>j</code>が省略された場合、スライスはaの長さ（len(a)）までの長さとなります。</li></ul><p>新しくできたスライスは<code>a</code>が参照しているものと同一の配列を参照します。つまり、新しいスライスで要素が変更された場合、<code>a</code>の要素も同じように変更されます<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>。</p><p>新しいスライスの容量は、純粋に<code>a</code>から<code>i</code>を引いた差分となります。配列の容量と配列の長さはイコールです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">10</span>]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">s = a[:] <span class="comment">// s = a[0:len(a)]の短縮形</span></span><br></pre></td></tr></table></figure><p>もし、<code>[100]byte</code>型の値（<code>byte</code>100個分の配列、例えばバッファ）を作り、関数に参照渡しをしたいのであれば、<code>[]byte</code>型の引数を持つ関数を宣言し、配列をスライスに変えて、その引数に渡してあげるのが良いでしょう<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup>。スライスは、<a href="https://yourbasic.org/golang/go-java-tutorial/#making-values" target="_blank" rel="noopener">下記</a>に書いてあるような<code>make</code>関数でも作り出すことができます。</p><p>スライスには組み込み関数<code>append</code>が備え付けられており、Javaの<code>ArrayList</code>とほぼ同様の機能を持っています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s0 := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">s1 := <span class="built_in">append</span>(s0, <span class="number">3</span>)     <span class="comment">// 要素を1つ追加する</span></span><br><span class="line">s2 := <span class="built_in">append</span>(s1, <span class="number">4</span>, <span class="number">5</span>)  <span class="comment">// 要素を複数追加する</span></span><br><span class="line">s3 := <span class="built_in">append</span>(s2, s0...) <span class="comment">// スライスを1つ追加する</span></span><br></pre></td></tr></table></figure><p>スライス構文は文字列と一緒に使うこともできます。文字列のスライスは、オリジナルの文字列の部分文字列を返します。</p><h2 id="値の作成"><a href="#値の作成" class="headerlink" title="値の作成"></a>値の作成</h2><p>Mapやチャネルの値は、組み込み関数である<code>make</code>関数によって割り当てられていなければなりません。例えば、</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br></pre></td></tr></table></figure><p>をコールすると、新しく<code>map[string]int</code>型で割り当てられた値が返ってきます。</p><p><code>new</code>とは対照的に、<code>make</code>はアドレスではなくオブジェクトそのものが返ってきます。これはMapやチャネルが参照型であるという事実に一致しています。</p><p>Mapの場合、<code>make</code>では第2オプション引数に容量ヒントを渡すことができます。</p><p>チャネルの場合は、第2オプション引数はチャネルのバッファの容量となります。デフォルトは<code>0</code>です。（バッファがない状態）</p><p><code>make</code>関数はスライスを割り当てる場合にも使用されます。この場合<code>make</code>関数は、スライスのもとになる配列にメモリを割り当て、それを参照するスライスを返します。必須の引数として、スライスの要素数を渡さなければなりません。第2オプション引数でスライスの容量を指定できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>, <span class="number">20</span>) <span class="comment">// new([20]int)[:10]と同意</span></span><br></pre></td></tr></table></figure><h2 id="メソッドとインターフェース"><a href="#メソッドとインターフェース" class="headerlink" title="メソッドとインターフェース"></a>メソッドとインターフェース</h2><p>メソッドは、レシーバーを持っていることを除いて、通常の関数定義のような見た目をしています。レシーバーは、Javaインスタンスメソッドのthis参照に似ています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyType <span class="keyword">struct</span> &#123; i <span class="keyword">int</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *MyType)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p.i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pm = <span class="built_in">new</span>(MyType)</span><br><span class="line"><span class="keyword">var</span> n = pm.Get()</span><br></pre></td></tr></table></figure><p>上記の例では、 <code>MyType</code> に関連付けられた <code>Get</code> メソッドを宣言しています。このメソッドの中で、レシーバーはpという名前を付けられています。</p><p>メソッドは定義済みの型に対して宣言されます。レシーバーを別の型に変換すると、変換後の新しい変数は変換前の型のメソッドではなく、変換後の型のメソッドを持つようになります。</p><p>組み込み型から派生した新しい型を宣言することにより、組み込み型にメソッドを定義できます。その新しい型は、もとの組み込み型とは全く別のものとなります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInt <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p MyInt)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">int</span>(p) <span class="comment">// intへの変換は必須</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> v MyInt</span><br><span class="line"></span><br><span class="line">v = v * v <span class="comment">// 派生元の演算子は引き続き使用できる</span></span><br><span class="line">f(<span class="keyword">int</span>(v)) <span class="comment">// int(v) には宣言されたメソッドがない</span></span><br><span class="line">f(v)      <span class="comment">// INVALID</span></span><br></pre></td></tr></table></figure><h3 id="インターフェース"><a href="#インターフェース" class="headerlink" title="インターフェース"></a>インターフェース</h3><p>Go<a href="https://yourbasic.org/golang/interfaces-explained/" target="_blank" rel="noopener">インターフェース</a>はJavaインターフェースに似ていますが、Goインターフェースの場合、インターフェースが要求するメソッド群を提供している型はみな、そのインターフェースの実装として扱われます。明示的な宣言は必要ありません。</p><p>以下のインターフェースが定義されているとします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInterface <span class="keyword">interface</span> &#123;</span><br><span class="line">    Get() <span class="keyword">int</span></span><br><span class="line">    Set(i <span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MyType</code> はすでに <code>Get</code> メソッドを持っているので、 <code>Set</code> メソッドを追加することにより、 <code>MyType</code> が <code>MyInterface</code> を満たすようになります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *MyType)</span> <span class="title">Set</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    p.i = i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MyInterface</code> を引数にもつ関数は皆、 <code>*MyType</code> 型の変数を受け容れます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetAndSet</span><span class="params">(x MyInterface)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p MyType</span><br><span class="line">    GetAndSet(&amp;p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Javaの用語を使うとすると、 <code>*MyType</code> の <code>Set</code> および <code>Get</code> を定義すると、 <code>*MyType</code> が自動的に <code>MyInterface</code> を <code>implement</code> します。<br>型は複数のインターフェースを満たすことができます。これはダックタイピングの一種です。</p><blockquote><p>アヒルのように歩き、アヒルのように泳ぎ、アヒルのように鳴く鳥を見るとき、私はその鳥をアヒルと呼ぶ。<br>– James Whitcomb Riley</p></blockquote><h3 id="埋め込み（委譲）"><a href="#埋め込み（委譲）" class="headerlink" title="埋め込み（委譲）"></a>埋め込み（委譲）</h3><p>型を匿名フィールドとして埋め込むことで、派生型を実装することができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MySubType <span class="keyword">struct</span> &#123;</span><br><span class="line">    MyType</span><br><span class="line">    j <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *MySubType)</span> <span class="title">Get</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    p.j++</span><br><span class="line">    <span class="keyword">return</span> p.MyType.Get()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事実上、MySubTypeがMyTypeの派生型として実装されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> p MySubType</span><br><span class="line">    GetAndSet(&amp;p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Set</code> メソッドは <code>MyType</code> 型から継承されます。これは匿名フィールドのメソッドが、派生型のメソッドへと昇格されるためです。</p><p>この場合、 <code>MySubType</code> には <code>MyType</code> 型の匿名フィールドがあるため、 <code>MyType</code> のメソッドは <code>MySubType</code> のメソッドになります。<code>Get</code> メソッドはオーバーライドされ、 <code>Set</code> メソッドは継承されています。</p><p>これはJavaのクラス継承と同じではなく、委譲という方式をとっています。匿名フィールドのメソッドが呼び出されたとき、そのメソッドのレシーバは、派生型(<code>MySubType</code>)の方ではなく、内包する匿名フィールド(<code>MyType</code>)になります。つまり、匿名フィールドのメソッドは動的に派生型のメソッドとしてディスパッチされません。Javaの動的メソッドルックアップに相当するものが必要な場合、<code>interface</code> を使用してください。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f3</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> v MyInterface</span><br><span class="line"></span><br><span class="line">    v = <span class="built_in">new</span>(MyType)</span><br><span class="line">    v.Get() <span class="comment">// *MyTypeのGetメソッドをコールしている</span></span><br><span class="line"></span><br><span class="line">    v = <span class="built_in">new</span>(MySubType)</span><br><span class="line">    v.Get() <span class="comment">// *MySubTypeのGetメソッドをコールしている</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="型アサーション"><a href="#型アサーション" class="headerlink" title="型アサーション"></a>型アサーション</h3><p>あるインターフェース型が実装されている変数は、<a href="https://yourbasic.org/golang/type-assertion-switch/" target="_blank" rel="noopener">型アサーション</a>を使用して、異なるインターフェース型を持つように変換できます。これは実行時に動的に変換されます。Javaとは異なり、2つのインターフェース間の関係を宣言する必要はありません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Printer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Print()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f4</span><span class="params">(x MyInterface)</span></span> &#123;</span><br><span class="line">    x.(Printer).Print() <span class="comment">// Printerへの型アサーション</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Printer</code> への変換は動的に行われます。xが <code>Print</code> メソッドを定義している限り機能します。</p><h2 id="エラー"><a href="#エラー" class="headerlink" title="エラー"></a>エラー</h2><p>Javaでは通常例外を使用するケースでも、Goでは2つの異なるメカニズムがあります。</p><ul><li>大抵の関数ではエラーを返します。</li><li>本当にリカバーできない状況のとき、例えば範囲外のインデックスだった場合などにのみ、実行時の例外を生み出します。</li></ul><p>Goでは複数の値を返すことができますが、それによって通常の戻り値に加え、詳細なエラーメッセージを返すことが簡単にできます。慣例的に、そのようなメッセージには、シンプルな組み込みインターフェースであるerror型が存在します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例えば<code>os.Open</code>関数は、ファイルを開くことができなかった場合、<code>nil</code>でないエラー値を返します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">(file *File, err error)</span></span></span><br></pre></td></tr></table></figure><p>下記のコードではファイルを開くために<code>os.Open</code>関数を用いています。エラーが生じた場合は、エラーメッセージをログに出力して処理を中断する<code>log.Fatal</code>関数を呼び出します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f, err := os.Open(<span class="string">"filename.ext"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// オープンされた*File型のfを使った何らかの処理を行う</span></span><br></pre></td></tr></table></figure><p>エラーのインターフェースは<code>Error</code>のメソッドのみ必要としますが、特定のエラーとなるとしばしばその他のメソッドも持っています。それによって、呼び出し側がエラーの詳細を検知することができます。</p><h2 id="PanicとRecover"><a href="#PanicとRecover" class="headerlink" title="PanicとRecover"></a>PanicとRecover</h2><p><a href="https://yourbasic.org/golang/recover-from-panic/" target="_blank" rel="noopener">panic</a>は、ゴルーチンのスタックを巻き戻し、途中でdefer宣言された関数を実行してからプログラムを停止するランタイムエラーです。</p><p>panicはJavaの例外処理(exceptions)に似ていますが、ランタイムエラーのみを対象としています。例えば、<code>nil</code> ポインタを参照しようとしたときや、配列の範囲外領域にインデックスしようとしたときにpanicが発生します。EOFなどエラーイベントを表現するために、Goプログラムは<a href="https://qiita.com/wagi0716/private/37c8fa3398717a4d6b3b#%E3%82%A8%E3%83%A9%E3%83%BC" target="_blank" rel="noopener">上記</a>の <code>error</code> という組み込み型を使用します。</p><p>組み込み関数<a href="https://yourbasic.org/golang/recover-from-panic/" target="_blank" rel="noopener">recover</a>を使用して、panic状態のゴルーチンの制御を取り戻し、通常の実行を再開できます。</p><ul><li><code>recover</code> を呼び出すとスタックの巻き戻しが停止します。<code>recover</code> は <code>panic</code> に渡した引数を返します。</li></ul><p>巻き戻し中に実行されるコードはdefer宣言された関数内のコードのみであるため、<code>recover</code> はdefer宣言された関数内でのみ有用です。ゴルーチンがパニックになっていない場合、<code>recover</code> は <code>nil</code> を返します。</p><h2 id="ゴルーチンとチャネル"><a href="#ゴルーチンとチャネル" class="headerlink" title="ゴルーチンとチャネル"></a>ゴルーチンとチャネル</h2><h3 id="ゴルーチン"><a href="#ゴルーチン" class="headerlink" title="ゴルーチン"></a>ゴルーチン</h3><p>Goでは、<code>go</code> 文を使用して、新たなスレッド(ゴルーチン)を立ち上げることができます。<code>go</code> 文に続く関数は新しく作成された<a href="https://yourbasic.org/golang/goroutines-explained/" target="_blank" rel="noopener">ゴルーチン</a>上で実行されます。 1つのプログラム内のすべてのゴルーチンは、同じアドレス空間を共有します。</p><p>ゴルーチンは軽量であり、スタック領域割り当て程度のコストしかかかりません。はじめはスタックの割り当てを小さく抑え、必要に応じてヒープストレージへの割り当てと解放を行いながら大きくしていきます。内部的にゴルーチンは、複数のオペレーティングシステムスレッド間で多重化されるコルーチンのように機能します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> list.Sort() <span class="comment">// list.Sort()はパラレルに実行される</span></span><br></pre></td></tr></table></figure><p>Goには関数リテラルがあります。関数リテラルは<a href="https://yourbasic.org/golang/anonymous-function-literal-lambda-closure/" target="_blank" rel="noopener">クロージャー</a>として機能し、 <code>go</code> 文と組み合わせると強力になります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// delayで指定した時間が立つと、Publish関数は標準出力にtextを書き出す</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Publish</span><span class="params">(text <span class="keyword">string</span>, delay time.Duration)</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(delay)</span><br><span class="line">        fmt.Println(text)</span><br><span class="line">    &#125;() <span class="comment">// 括弧をつけてください。go句直後の関数はコールする必要がある</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>変数 <code>text</code> および <code>delay</code> は、<code>Publish</code> 関数とその内部の関数リテラルの間で共有されます。</p><h3 id="チャネル"><a href="#チャネル" class="headerlink" title="チャネル"></a>チャネル</h3><p><a href="https://yourbasic.org/golang/channels-explained/" target="_blank" rel="noopener">チャネル</a>は、2つのゴルーチンの処理を同期させたり、通信させたりするメカニズムを提供します。 <code>&lt;-</code> 演算子は、チャネルの方向(送信または受信)を指定します。方向が指定されていない場合、そのチャネルは送受信可能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">chan</span> Sushi     <span class="comment">// Sushi型の値を送受信するために使用できる</span></span><br><span class="line"><span class="keyword">chan</span>&lt;- <span class="keyword">float64</span> <span class="comment">// float64型を送信するためにのみ使用できる</span></span><br><span class="line">&lt;-<span class="keyword">chan</span> <span class="keyword">int</span>     <span class="comment">// int型を受信するためにのみ使用できる</span></span><br></pre></td></tr></table></figure><p>チャネルは参照型であり、<code>make</code> で作成することができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ic := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)       <span class="comment">// バッファを持たないint型のチャネル</span></span><br><span class="line">wc := <span class="built_in">make</span>(<span class="keyword">chan</span> *Work, <span class="number">10</span>) <span class="comment">// バッファを持つ*Work型のチャネル</span></span><br></pre></td></tr></table></figure><p>チャネルに値を送信するには、<code>&lt;-</code> を二項演算子のように使用します。チャネルから値を受信するには、<code>&lt;-</code> を単項演算子のように使用します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ic &lt;- <span class="number">3</span>      <span class="comment">// チャネルに3を送信する</span></span><br><span class="line">work := &lt;-wc <span class="comment">// チャネルから*Workを受信する</span></span><br></pre></td></tr></table></figure><ul><li>チャネルがバッファを持たない場合、受信チャネルから値を取り出すまでの間、送信チャネルは処理をブロックします。</li><li>チャネルがバッファを持つ場合、送信チャネルから渡される値がバッファに書き込まれる余地があるときは処理がブロックされません。逆に、バッファがいっぱいになっているときは、受信チャネルから値を取り出すまで、送信チャネルは処理をブロックします。</li><li>受信チャネルは取り出せる値が存在するまでの間、処理をブロックします。</li></ul><p><code>close</code> 関数はこれ以上チャネルに値を送信できないようにすることができます。</p><ul><li><code>close</code> 関数が呼び出されたとします。<code>close</code> 関数が呼び出されるまでの間にすでにチャネルに送信された値は問題なく受信チャネルから取り出すことができます。その後の受信処理ではブロックは発生されず、ゼロ値を返します。</li><li>受信チャネルからは値の他に、チャネルが閉じているかどうかの指標を取り出すことができます。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch &lt;- <span class="string">"Hello!"</span></span><br><span class="line">    <span class="built_in">close</span>(ch)</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(&lt;-ch) <span class="comment">// "Hello!"が表示される</span></span><br><span class="line">fmt.Println(&lt;-ch) <span class="comment">// ここではブロックされず、string型のゼロ値である""が表示される</span></span><br><span class="line">fmt.Println(&lt;-ch) <span class="comment">// もう一度""が表示される</span></span><br><span class="line">v, ok := &lt;-ch     <span class="comment">// vは"", okはfalseの値をとる</span></span><br></pre></td></tr></table></figure><p>次の例では <code>Publish</code> 関数がチャネルを返すようにします。 <code>text</code> が発行されたときにメッセージをブロードキャストするためにこのチャネルが使われます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// delayで指定した時間が経過したのち、Publish関数はtextを標準出力に書き出す</span></span><br><span class="line"><span class="comment">// textが表示されたタイミングでwaitチャネルをクローズする</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Publish</span><span class="params">(text <span class="keyword">string</span>, delay time.Duration)</span> <span class="params">(wait &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(delay)</span><br><span class="line">        fmt.Println(text)</span><br><span class="line">        <span class="built_in">close</span>(ch)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Publish関数はこのように使えます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wait := Publish(<span class="string">"important news"</span>, <span class="number">2</span> * time.Minute)</span><br><span class="line"><span class="comment">// ここに何らかの処理が入る</span></span><br><span class="line">&lt;-wait <span class="comment">// textが表示されるまで、ここで処理がブロックされる</span></span><br></pre></td></tr></table></figure><h3 id="select文"><a href="#select文" class="headerlink" title="select文"></a>select文</h3><p>select文はGoの重要な並行処理ツールキットの一つです。<code>select</code> は通信時に続行する処理を選択します。</p><ul><li>どの通信も成功し得るとき、そのうちの一つがランダム選択され、対応する処理が実行されます。</li><li>defaultのケースが存在しない場合、いずれかの通信が成功するまでselect文は処理をブロックします。</li></ul><p>以下のコードは、select文を使用した乱数ジェネレーターの実装例です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rand := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">for</span> &#123; <span class="comment">// ランダムで0か1のどちらかをを続けざまに送信している</span></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> rand &lt;- <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">case</span> rand &lt;- <span class="number">1</span>:</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>もう少し現実的な実装例を見てみましょう。次のコードはselect文をつかって、受信操作にタイムリミットを設けている例です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> news := &lt;-AFP:</span><br><span class="line">    fmt.Println(news)</span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(time.Minute):</span><br><span class="line">    fmt.Println(<span class="string">"Time out: no news in one minute."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>time.After</code> は標準ライブラリの関数です。一定時間たった後に、現在時刻を送信するチャネルを返す関数です。</p><h2 id="Hello-server"><a href="#Hello-server" class="headerlink" title="Hello server"></a>Hello server</h2><p>これまでのピースがどのようにはまっていくのかを、ちょっとした例でお見せして終わることにしましょう。<code>server</code>パッケージはチャネルを経由して<code>Work</code>リクエストを受け入れるサーバーを実装しています。</p><ul><li>リクエストごとに別々の<code>goroutine</code>で処理が行われます。</li><li><code>Work</code>の構造体それ自身は、結果を返すために用いられるチャンネルを含んでいます。</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> server</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Newでreqチャネルを経由してWorkのリクエストを受け入れるサーバーを生成する</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span> <span class="params">(req <span class="keyword">chan</span>&lt;- *Work)</span></span> &#123;</span><br><span class="line">    wc := <span class="built_in">make</span>(<span class="keyword">chan</span> *Work)</span><br><span class="line">    <span class="keyword">go</span> serve(wc)</span><br><span class="line">    <span class="keyword">return</span> wc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Work <span class="keyword">struct</span> &#123;</span><br><span class="line">    Op    <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span></span></span><br><span class="line"><span class="function">    <span class="title">A</span>, <span class="title">B</span>  <span class="title">int</span></span></span><br><span class="line"><span class="function">    <span class="title">Reply</span> <span class="title">chan</span> <span class="title">int</span> // <span class="title">Server</span>はこのチャネルに結果を返す</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">serve</span><span class="params">(wc &lt;-<span class="keyword">chan</span> *Work)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> w := <span class="keyword">range</span> wc &#123;</span><br><span class="line">        <span class="keyword">go</span> safelyDo(w)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">safelyDo</span><span class="params">(w *Work)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 実行中の他のgoroutineをkillしないように、パニック状態になっているgoroutineの制御を取り戻す</span></span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Println(<span class="string">"work failed:"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    do(w)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">(w *Work)</span></span> &#123;</span><br><span class="line">    w.Reply &lt;- w.Op(w.A, w.B)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こんな風に使えるでしょう。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> server_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"server"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s := server.New()</span><br><span class="line"></span><br><span class="line">    divideByZero := &amp;server.Work&#123;</span><br><span class="line">        Op:    <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> a / b &#125;,</span><br><span class="line">        A:     <span class="number">100</span>,</span><br><span class="line">        B:     <span class="number">0</span>,</span><br><span class="line">        Reply: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>),</span><br><span class="line">    &#125;</span><br><span class="line">    s &lt;- divideByZero</span><br><span class="line"></span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> res := &lt;-divideByZero.Reply:</span><br><span class="line">        fmt.Println(res)</span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(time.Second):</span><br><span class="line">        fmt.Println(<span class="string">"No result in one second."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 出力結果: No result in one second.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="さらに学びたい場合"><a href="#さらに学びたい場合" class="headerlink" title="さらに学びたい場合"></a>さらに学びたい場合</h3><p><a href="https://yourbasic.org/golang/tutorials/" target="_blank" rel="noopener">Tutorials</a>は初心者にも上級者にもためになるサイトです。ベストプラクティスや、本番環境に匹敵するコード例が揃っています。</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><p>Goに関連した連載企画があります。</p><ul><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">後入れ先出し（LIFO: Last In First Out; FILO: First In Last Out）の構造</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><code>{}</code> の中で宣言されていない変数・関数をトップレベルで宣言された変数・関数と読んでいる。import文はトップレベルで宣言されている。main packageのmain関数はトップレベルで宣言されている。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">Javaの世界で呼ばれる「オブジェクト」と同義です。</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;">Unicodeの<a href="https://ja.wikipedia.org/wiki/%E7%AC%A6%E5%8F%B7%E7%82%B9" target="_blank" rel="noopener">コードポイント</a>とは、全ての文字を4桁の16進数で一意に表現したコード体系の値です。</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;">panicが発生して、呼び出し元の関数が強制的にreturnされても、defer宣言された関数は実行されます。</span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;">サンプルコード ( <a href="https://play.golang.org/p/XDaWkZqEZ9K" target="_blank" rel="noopener">https://play.golang.org/p/XDaWkZqEZ9K</a> )</span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">7.</span><span style="display: inline-block; vertical-align: top;">untypedな状態の時は型が決まっておらず、式や代入の中でその定数が用いられる時、型が決定されます。</span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">8.</span><span style="display: inline-block; vertical-align: top;">サンプルコード ( <a href="https://play.golang.org/p/J3JBKvSmYJW" target="_blank" rel="noopener">https://play.golang.org/p/J3JBKvSmYJW</a> )</span><a href="#fnref:8" rev="footnote"> ↩</a></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">9.</span><span style="display: inline-block; vertical-align: top;">サンプルコード ( <a href="https://play.golang.org/p/jTKvVIBqwMa" target="_blank" rel="noopener">https://play.golang.org/p/jTKvVIBqwMa</a> )</span><a href="#fnref:9" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JavaプログラマーのためのGo言語入門&quot;&gt;&lt;a href=&quot;#JavaプログラマーのためのGo言語入門&quot; class=&quot;headerlink&quot; title=&quot;JavaプログラマーのためのGo言語入門&quot;&gt;&lt;/a&gt;JavaプログラマーのためのGo言語入門&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Java" scheme="https://future-architect.github.io/tags/Java/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="翻訳" scheme="https://future-architect.github.io/tags/%E7%BF%BB%E8%A8%B3/"/>
    
  </entry>
  
  <entry>
    <title> Goの標準ライブラリのコードリーディングのすすめ</title>
    <link href="https://future-architect.github.io/articles/20200310/"/>
    <id>https://future-architect.github.io/articles/20200310/</id>
    <published>2020-03-09T23:55:28.000Z</published>
    <updated>2020-03-10T00:02:00.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="標準パッケージのコードリーディング会のすすめ"><a href="#標準パッケージのコードリーディング会のすすめ" class="headerlink" title="標準パッケージのコードリーディング会のすすめ"></a>標準パッケージのコードリーディング会のすすめ</h1><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>2019年のアドベントカレンダーではGo言語がその7まで続いて <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> 、盛り上がりを見せたのは記憶に新しいです。当社でもGoを扱う案件が増えてきて、社内でもいろいろなメンバが趣味や業務でGoを書いています。日々新しいGopherが生まれています。</p><p>さて、GoをはじめようとA Tour of Goをやってみたが、Goらしいコードがわからない、Go言語をより深く学びたい、という方も多いのではないでしょうか。Go言語は一部を除いて言語自体がGoで書かれており、標準パッケージはGoらしい書き方のお手本とも言われたりします。</p><p>標準パッケージのコードリーディングをしてみたいという方も多いのではないでしょうか？しかし社内で標準パッケージのコードリーディング会を取り組んでいきたいけど難しそう、以下のような疑問があるかもしれません。</p><ul><li>進め方がわからない</li><li>どのパッケージを読んだらいいかわからない</li><li>1回あたりの粒度感はどれくらいが妥当なのかわからない</li></ul><p>そこで本記事では社内で取り組んでいるGoの標準コードリーディング会の取り組みを紹介しながら、上記のような質問に答えていきたいと思います。</p><p>なおコードリーディング自体のテクニックはインターネット上でもたくさん紹介されていると思いますので、本記事では省略します。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>そもそもこのGoの標準ライブラリのコードリーディング会をどういった目的で実施しているか説明します。</p><ul><li>標準パッケージの使い方を知る<ul><li>GoDocを読んで仕様を知る</li><li>テストコードを読んで仕様を知る</li></ul></li><li>Goらしいコードの書き方を知る<ul><li>コードを読んでGoの標準ライブラリのコードの書き方を知る</li></ul></li><li>Goのテストの書き方を知る<ul><li>テストコードを読んでGoのテストの書き方を知る</li></ul></li></ul><p>コードリーディング会では、コードを読むだけではなく、GoDocを読んだり、テストを読んだりして、そもそものパッケージの仕様や使い方をおさらいしています。例えばコマンドラインでのフラグを扱う <code>flag</code> パッケージは <code>-myflag=x</code> などとしてフラグ名を引数で指定することが多いと思います。ところがテストを見ると <code>--myflag=x</code> という <code>--</code> という形式でも引数を受け取けられることが分かります。仕様を確認した上で実装を読むことで、仕様を満たすためにGoの標準ライブラリはどのように実装しているのか、という実装そのものに着目することができます。</p><p>また、参加しているメンバは初心者からベテランまで幅広く参加しています。最大公約数的な形をとって、なるべく多くのメンバにとって役に立つようにしています。</p><h2 id="読んでいるパッケージ"><a href="#読んでいるパッケージ" class="headerlink" title="読んでいるパッケージ"></a>読んでいるパッケージ</h2><p>まず社内で読んでいるパッケージは以下です。全部で 12 回実施する予定です。現在(2020/03/02)のところ <code>path</code> パッケージまで実施しました。</p><table><thead><tr><th>#</th><th>パッケージ名</th></tr></thead><tbody><tr><td>1</td><td>io</td></tr><tr><td>2</td><td>errors</td></tr><tr><td>3</td><td>hash/maphash</td></tr><tr><td>4</td><td>context</td></tr><tr><td>5</td><td>flag</td></tr><tr><td>6</td><td>path</td></tr><tr><td>7</td><td>testing</td></tr><tr><td>8</td><td>iotest</td></tr><tr><td>9</td><td>sort</td></tr><tr><td>10</td><td>net/http (client)</td></tr><tr><td>11</td><td>net/http (server)</td></tr><tr><td>12</td><td>database/sql</td></tr></tbody></table><h3 id="パッケージの選定"><a href="#パッケージの選定" class="headerlink" title="パッケージの選定"></a>パッケージの選定</h3><p>そもそも、どのパッケージを読んだらいいんだろう？という疑問があると思います。上記のパッケージを選定した方法を紹介したいと思います。</p><p>読むパッケージの選定は有志のメンバ数名で一緒に決めました。</p><p>まずパッケージのステップ数を見てスクリーニングしています。<a href="https://github.com/hhatto/gocloc" target="_blank" rel="noopener">gocloc</a> というツールを使うと以下のフォーマットで簡単にステップ数を確認することができます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">$ gocloc archive</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Language                     files          blank        comment           code</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Go                              21            782           1511           9099</span><br><span class="line">Plain Text                       2              0              0              2</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">TOTAL                           23            782           1511           9101</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ gocloc io</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Language                     files          blank        comment           code</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Go                              12            353            480           2045</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">TOTAL                           12            353            480           2045</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">$ gocloc runtime</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Language                     files          blank        comment           code</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Go                             577          12182          21862          75117</span><br><span class="line">Assembly                       177           5102           7567          34766</span><br><span class="line">C                               47            599            498           2273</span><br><span class="line">Python                           1            135            103            366</span><br><span class="line">Markdown                         1             71              0            240</span><br><span class="line">C Header                         8             50            156            217</span><br><span class="line">BASH                             1              1              3             11</span><br><span class="line">Makefile                         1              1              3              1</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">TOTAL                          813          18141          30192         112991</span><br><span class="line">-------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><code>runtime</code> パッケージは極端な例ですが、コードの読む前に明らかにやばい、、、ということがわかるわけです。このような要領でまずは <code>$GOROOT/src/</code> 配下にあるパッケージの一覧に対して <code>gocloc</code> を実施し、パッケージの全体感を把握しました。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><p>12回やるっ！というのは決め打ちです。標準パッケージだけでも200近くあって<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>、もちろん全部を取り上げて読むことは難しいです。かといって目標を決めないと達成感を得られにくいと考えています。Futureでは技術書の社内輪読会を実施しています <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> が、技術書の場合は一冊を技術書を読了することで達成感を得ることができます。しかし、標準パッケージのコードリーディングの場合はどの範囲をとりあげるかは任意です。</p><p>そのため今回は予め12回は実施すると決め打ちしてパッケージを選んでいきました。キリの良い10回を考えていたのですが、読みたいパッケージがあり、最終的に少し増やして12回になりました。</p><p>次に具体的に読みたいパッケージを選びます。先程の <code>gocloc</code> で得たステップ数を踏まえながら、みんなで議論しています。例えば <code>io</code> パッケージはGoらしいインターフェースの使い方を学べるからおすすめ、とか <code>hash/maphash</code> は Go1.14 で新しく追加されるパッケージだからみんなで確認しておこう、やっぱり <code>net/http</code> のHTTPサーバ、クライアントの実装は読んでおきたいよね、じゃあダメ押しで <code>database/sql</code> もやりましょう、みたいな感じです。</p><p>標準パッケージ以外のパッケージ(たとえば <code>golang.org/x</code> などです)も検討したのですが、まずは標準パッケージのみに絞って実施することにしています。</p><h2 id="運営方針"><a href="#運営方針" class="headerlink" title="運営方針"></a>運営方針</h2><h3 id="開催頻度-時間"><a href="#開催頻度-時間" class="headerlink" title="開催頻度/時間"></a>開催頻度/時間</h3><p>発表するメンバと参加するメンバも負担にならないように、開催頻度と時間は以下のようにしています。</p><ul><li>開催頻度<ul><li>週1回</li><li>毎週水曜日の夕方</li></ul></li><li>時間<ul><li>1回あたり45分程度</li></ul></li></ul><h3 id="進め方"><a href="#進め方" class="headerlink" title="進め方"></a>進め方</h3><ul><li>発表<ul><li>予め決めた2名がまとめる</li></ul></li><li>資料<ul><li>非公開のQiita記事やGitHub Gist、Google slideにまとめる</li></ul></li></ul><p>各パッケージごとに発表するメンバを2名決めました。<code>io</code> パッケージなら A さんと B さん、<code>errors</code> は C さん、D さん、が内容をまとめて発表する要領です。事前に決めた2人が宿題形式でコードを読んで資料にまとめています。まとめた資料とGoのソースコードをもとに40分程度(1人あたり20分程度)で発表しています。パッケージのコードすべてを取り上げるのではなく、コアな部分や興味がある部分を取り上げて発表しています。2人で取り組むと、同じコードを読んでいても気づかなかったり、面白かったポイントも異なり、補完できるのでオススメです。</p><p>とはいえ進め方はやっぱり難しいと感じています。いろいろなバックグラウンドを持ったメンバが参加しているので、参加したメンバが満足いくような会になっているかは悩みポイントです。</p><p>このあたりは勉強会の運営に長けているメンバがアンケートを取ってくださり、フィードバックをもらいました。アンケートの一部を抜粋します。</p><img src="/images/20200310/photo_20200310_01.png"><img src="/images/20200310/photo_20200310_02.png"><h2 id="コードリーディング会の雰囲気"><a href="#コードリーディング会の雰囲気" class="headerlink" title="コードリーディング会の雰囲気"></a>コードリーディング会の雰囲気</h2><p>参加しているメンバは、はじめてGoをさわったメンバ、A Tour of Goはとりあえずやってみたメンバ、業務でGoをガンガン書いているメンバ、趣味でGoを書いているメンバ、Goに関する本を出版しているメンバなど様々です。</p><p>また参加方法も、会議室から参加しているメンバ、リモートから参加しているメンバなど様々です。</p><p>発表内容を聞きながら、気になることや良くわからなかったこと、疑問に思ったことなどわいわい議論しています。</p><h2 id="やってみて良かったこと"><a href="#やってみて良かったこと" class="headerlink" title="やってみて良かったこと"></a>やってみて良かったこと</h2><h3 id="Goのテクニックを学べる-議論できる"><a href="#Goのテクニックを学べる-議論できる" class="headerlink" title="Goのテクニックを学べる/議論できる"></a>Goのテクニックを学べる/議論できる</h3><p>以下は参加している/発表しているメンバが紹介していた内容の一部です。実用的なテクニックや、ライブラリ独特なテクニックまでいろいろあります。</p><ul><li>インターフェースがコンパイル時に型を満たしているかチェックする方法</li><li><code>[0]func()</code> のような比較不能な型を構造体のフィールドにもたせると構造体が <code>==</code> 演算子で比較ができなくなる</li><li><code>//go:linkname ...</code> とすると外部パッケージのプライベートな関数が呼び出せる</li><li>クローズされているチャネルを生成するために <code>init</code> 関数でチャネルをクローズしている</li><li><code>for range</code> 構文はチャネルにも使える</li><li>組み込み関数の <code>close</code> でチャネルをクローズすると、複数のゴルーチンが一斉に同じチャネルを Read することができる</li><li><code>context</code> パッケージでのインターフェースを部分実装方法</li><li><code>context</code> の <code>WithDeadline</code> 関数で <code>time.AfterFunc</code> 関数で使われている</li><li><code>map</code> に値が存在するかのチェック、第二引数 <code>ok</code> じゃないこともある</li><li><code>flag</code> パッケージや <code>path</code> パッケージでパース処理は丁寧に場合分けしたり、一文字ずつ文字列を解析したり細やか<ul><li>典型的な <a href="https://www.geeksforgeeks.org/simplify-directory-path-unix-like/" target="_blank" rel="noopener">アルゴリズムの問題</a></li></ul></li><li>テストで異常系と正常系を分けたほうが、テストコードがシンプルになりそう</li><li>異常系のテストの命名で <code>bad</code> という変数名を使っていてエラーになることが命名から明らか</li><li>標準出力を使うパッケージ <code>bytes.Buffer</code> でキャプチャして <code>buf.String()</code> で結果を取得してテストしている</li><li>テストで標準出力が不要であれば <code>ioutil.Discard</code> で捨てれば良い</li><li><code>ioutil.Discard</code> は <code>/dev/null</code> っぽいけどGoのコード上でのアナロジー</li><li><code>iota</code> のイディオムよく見る</li></ul><h3 id="Go以外のテクニックも学べる-議論できる"><a href="#Go以外のテクニックも学べる-議論できる" class="headerlink" title="Go以外のテクニックも学べる/議論できる"></a>Go以外のテクニックも学べる/議論できる</h3><ul><li><code>bytes/buffer.go</code> の Read では最小のバッファサイズが 512 バイトなんだけど、これって何？<ul><li>HDD の 1 セクタの容量 512 バイトにあわせているのではないか</li></ul></li><li><code>flag</code> の <code>ExitOnError</code> のとき <code>os.Exit(2)</code> を呼び出しているけど、<code>2</code> って何？<ul><li>Bash の <a href="https://ja.wikipedia.org/wiki/%E7%B5%82%E4%BA%86%E3%82%B9%E3%83%86%E3%83%BC%E3%82%BF%E3%82%B9" target="_blank" rel="noopener">終了ステータス</a> の <code>ビルトインコマンドの誤用</code> のことを指しているのではないか</li></ul></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>社内で取り組んでいるコードリーディング会の内容と運営方法を紹介しました。Goの標準ライブラリのコードリーディング会は標準ライブラリを学べ、またGoらしいコードを学べる良い会です。本記事がみなさんの会社でコードリーディング会を実施するときの参考になれば幸いです。</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><p>Goに関連した連載企画があります。</p><ul><li><a href="[DynamoDB×Go連載](https://future-architect.github.io/tags/DynamoDB%C3%97Go/)">DynamoDB×Go連載</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><code>go list std | grep -v vender | wc -l</code> で分かります。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">今回はパッケージの一番上の階層で集計しています。実際には例えば <code>runtime</code> パッケージなどは <code>runtime/debug</code>,  <code>runtime/pprof</code> など細かく分かれています。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">https://qiita.com/advent-calendar/2019/categories/programming_languages</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;">https://future-architect.github.io/articles/20190729/</span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;標準パッケージのコードリーディング会のすすめ&quot;&gt;&lt;a href=&quot;#標準パッケージのコードリーディング会のすすめ&quot; class=&quot;headerlink&quot; title=&quot;標準パッケージのコードリーディング会のすすめ&quot;&gt;&lt;/a&gt;標準パッケージのコードリーディング会のす
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="CodeReadomg" scheme="https://future-architect.github.io/tags/CodeReadomg/"/>
    
  </entry>
  
  <entry>
    <title>アイコンセット公開！その裏側を聞いてみた</title>
    <link href="https://future-architect.github.io/articles/20200309/"/>
    <id>https://future-architect.github.io/articles/20200309/</id>
    <published>2020-03-09T01:13:26.000Z</published>
    <updated>2020-03-11T00:50:34.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは！Technology Innovation Group（TIG）の千葉駿です！</p><p>今回はFuture Tech Blog『これさえあればサービス構成図がだいたい描けるアイコンセットを公開します！』の裏側を、企画発案者の木村優里さんへインタビューをお届けします。</p><p>私もアイコン作成に携わったのですが、華やかなアイコンの裏側の地道な苦労や、外部公開による知らない人にでも使ってもらえる喜びを感じました。</p><h1 id="インタビューした人-木村優里さん"><a href="#インタビューした人-木村優里さん" class="headerlink" title="インタビューした人 木村優里さん"></a>インタビューした人 木村優里さん</h1><img src="/images/20200308/写真①.JPG" class="img-middle-size"><blockquote><p>経営とITをデザインするフューチャー歴6年目。アーキテクトチームで業務を行う傍ら、Future発OSSのロゴデザインを担当し、2016年「これさえあればシステム構成図が大体描けるアイコンセット」をFuture Tech Blogにて公開する。あまり知られていないが、上記記事は弊社Tech Blogのはてブ数第1位。（2020年2月現在）社内外の後押しを受けてバージョンアップした「これさえあればサービス構成図がだいたい描けるアイコンセット」を2020年に公開。社内ではデザインの勉強会を幾度か開催している。</p></blockquote><h2 id="興味を伝えていたら、チャンスが巡ってきた"><a href="#興味を伝えていたら、チャンスが巡ってきた" class="headerlink" title="興味を伝えていたら、チャンスが巡ってきた"></a>興味を伝えていたら、チャンスが巡ってきた</h2><br><p>ーー そもそも2016年に公開されたアイコンセットはどのようなきっかけで作ろうと思われたのですか？</p><br><p>もともと私はデザインに興味があり、BPY（※）などの社内イベント向けの資料のデザインを担当させてもらっていました。ある時に社内ツールのアイコンを作成しようという話が持ち上がり、デザインを担当しないかと、私の元へ話が来たんですね。チーム内やグループのリーダーに <strong>私がデザインに興味があるという話が伝わっていたので、推薦してくれたんだと思います。</strong></p><blockquote><p><strong>※BPY（Best Project of the Year)</strong><br>年末に1年で最もフューチャーらしいプロジェクトを全社員の投票で決め、栄誉を称えるイベント</p></blockquote><p>社内ツールのアイコン作成が進むうちに、折角だからシステム構成図を書くために必要な <strong>他のアイコンも一通り作成しようよ</strong>、ということになりまして。それがアイコンセットを作成するに至った、最初のきっかけです。</p><img src="/images/20200308/写真②.JPG" class="img-middle-size"><p>それまではシステム構成図作成に必要なアイコンを探す手間があり、見つけてもテイストがバラバラで使いづらいということがあったので、<strong>このアイコンセットをダウンロードすれば必要なアイコンがだいたい一式そろえばいいな</strong>と思って作成しました。</p><h2 id="何はともあれアイコン制作してみる"><a href="#何はともあれアイコン制作してみる" class="headerlink" title="何はともあれアイコン制作してみる"></a>何はともあれアイコン制作してみる</h2><br><p>ーー 実際にアイコンを作成してみていかがでしたか？</p><br><p>当社はITコンサルの会社なので正直デザインに知見のある人は少なく、一人で手探りで進めるような状態でした。でも、興味のあったデザイン作成を会社としてやらせてもらえたので、そこは面白かったですね。</p><p>完成したアイコンセットは最初は社内ポータルで内部向けに公開し、提案書などで使ってもらっていたんですが、FutureがTech Blogを始めたタイミングで、折角なら外部へ公開しないかと提案があり、公開するに至りました。</p><p><a href="https://future-architect.github.io/articles/20160721/">https://future-architect.github.io/articles/20160721/</a></p><h2 id="お客様の資料に見覚えのある「あのアイコン」"><a href="#お客様の資料に見覚えのある「あのアイコン」" class="headerlink" title="お客様の資料に見覚えのある「あのアイコン」"></a>お客様の資料に見覚えのある「あのアイコン」</h2><br><p>ーー なるほど。私は2016年入社なので新人研修中にアイコンセットの公開記事をみて、なかなか異色だったので印象に残っています。今回はどのような経緯でバージョンアップに至ったのですか？<br><strong>お客様がアイコンを使っていた</strong>、という話をプロジェクトメンバーから聞いたことがきっかけですね。</p><br><p>フューチャーの誰かが宣伝したというわけではなく、たまたま使っていたようで。プロジェクトメンバーがミーティングの場でお客様が作成したシステム構成図に見覚えがあり、「<strong>これ、木村さんのアイコンでは？</strong>」となって、教えてくれました。<br>単純に使ってもらえているのが嬉しかったですし、前回作成から期間も経ちアイコン追加のリクエストもあったので、バージョンアップする話になりました。</p><img src="/images/20200308/図①.png" class="img-middle-size"><p>2016年に公開した作ったアイコン</p><p>前半はここまで。社外で使ってもらえているのは嬉しいですね。私もぜひ「これ自分の作ったあれでは？」の現場に遭遇したいです。</p><h2 id="後半はいよいよバージョンアップの裏側へ迫ります。新バージョンのアイコンに込められた思いについて聞きます。"><a href="#後半はいよいよバージョンアップの裏側へ迫ります。新バージョンのアイコンに込められた思いについて聞きます。" class="headerlink" title="後半はいよいよバージョンアップの裏側へ迫ります。新バージョンのアイコンに込められた思いについて聞きます。"></a>後半はいよいよバージョンアップの裏側へ迫ります。新バージョンのアイコンに込められた思いについて聞きます。</h2><br><p>ーー 今回のアイコンのバージョンアップにあたり、他との差別化など意識した点はありますか？例えばクラウドベンダーなどは公式のアイコンセットを公開していますが。</p><br><p>サービス構成図を書くためという大元の目的は前回と同様ですが、 <strong>より汎用性を持たせる点</strong> を意識しましたね。前回は社内ツールを基点としてアイコンを選定したんですが、今回は所属するTIG内でどのようなアイコンが欲しいかアンケートをとり、技術的に流行りのものや業務で使えるものを選定しています。</p><p>また社外でも汎用的に使いやすいように、<strong>46種類のアイコンを追加し、色違いを含めてトータルで107種類の様々なバリエーション</strong> のアイコンを、PNG形式とSVG形式で用意しました。</p><img src="/images/20200308/図②.png" class="img-middle-size"><p>今回新たに公開したアイコン<br>使い勝手を考え、人のデザインはカラーバリエーションを豊富に用意しています。例えば、企業カラーに合わせて使ってもらって、所属会社を区別するような感じで使えるかなと。業界や職種に合わせたデザインを用意する案もあったんですが、種類は無数に存在していて作成しきれないですし、汎用性にも欠けるのであえて色だけにしました。</p><p>また、様々なデバイスがインターネットに接続される時代ですので、自動車やスマートスピーカーなどといったバリエーションを増やしました。<br>それから、前回はシステムなどの静的なオブジェクトが多かったんですが、 <strong>今回はステータスなど動的な表現できるアイコンを用意</strong> しました。<br>より使いやすくなるよう心がけたので、<strong>ぜひ実務のスライドなどで使ってもらいたい</strong>と思います。</p><h2 id="チームでアイコン作成。ノウハウを横展開する"><a href="#チームでアイコン作成。ノウハウを横展開する" class="headerlink" title="チームでアイコン作成。ノウハウを横展開する"></a>チームでアイコン作成。ノウハウを横展開する</h2><br><p>ーー 前回からの違いといえば、今回はチームでアイコン作成をしましたよね。私もお手伝いしましたが、何かきっかけがあったんでしょうか？</p><br><p>もともとは前回と同様にひとりで作成する想定だったんですが、プロジェクトメンバーにアイコンバージョンアップの話をしたところ、人を募ってチームでやってみてはどうかと提案されました。デザインに興味あるけど、Illustratorなどのツール使ったことなく、 <strong>何から手をつければいいか分からない人たちに、きっかけを与えられるかもしれないから</strong>、と。</p><p>実際に周りに聞いてみると興味ある人がいたので、今回は人を募ってチームでやる形になりました。チームの全体ミーティングの場でメンバー募集してみたところ、 <strong>有志の活動にも関わらず何人も集まってくれて、嬉しかったですね。</strong></p><img src="/images/20200308/写真③.JPG" class="img-middle-size"><br><p>ーー なるほど、そういう経緯だったのですね。私もやってみたかったことなので、人を募ってもらってよかったです。実際にチームで進めるにあたり、注意した点などありますか？</p><br><p><strong>メンバーにはまずツールを使えるようになってもらいたかった</strong>ので、デザインは私が考えて、作成をメンバーに手伝ってもらうという形にしました。<br>とりあえず<strong>ツールが使えれば、あとは各々デザインが必要な時に進められる</strong>と思ったので。<br>今回はIllustratorを使いました。ハンズオンの資料を作って、<strong>Illustrator講座を開催するところから</strong>始めました。こちらで用意したサンプルを作ってもらいながら、Illustratorの操作方法を学んでもらう感じですね。</p><p>一通りアイコン作成に必要な操作を覚えたら、一人に数種類アイコンを割り当て、作成してもらいました。作業時間も黙々会のように時間の枠を設けて、みんなで会議室にあつまってやりました。各々空いた時間に作ってね、とすると、なかなか作らないと思ったので（笑）</p><p>作成作業自体も、各々に手を動かしてもらい、私は口頭でアドバイスするのみで、<strong>できるだけ効率よくメンバーのスキルが上がるように</strong>意識しました。<br>最後にメンバーが作ったアイコンのレビュー作業や、全体のバランスを整えたりしたんですが、これだけはチームでは出来ないので孤独な作業でしたね。対象となるファイル数がかなりの数だったので、地味だけどかなり大変でした。無事公開まで漕ぎ着けることができてよかったです。<br>また、今回の活動を通してIllustratorの使い方を学んだことで、個人的にIllustratorを購入してデザインを始めた人も出てきました。その話を聞いて、チームでやってよかったなと思いました。</p><h2 id="とりあえず始めたことが今後のキャリアへ"><a href="#とりあえず始めたことが今後のキャリアへ" class="headerlink" title="とりあえず始めたことが今後のキャリアへ"></a>とりあえず始めたことが今後のキャリアへ</h2><br><p>ーー 私もハンズオンではお世話になりました。そしてレビューお疲れさまでした。おかげさまで私も一人でデザイン作成を進められるようになりました。最後に、木村さんが今後やってみたいことや、チャレンジなどあればお聞かせください。</p><br><p>実は、これから大学で心理学を学ぼうかと思っています。<strong>デザインを学んでいくにつれて、人間の認知や思考のプロセスを意識すること</strong> が重要であると感じるようになりました。</p><p>面白いと思ったのが、<strong>作る側のプロセスも人それぞれ</strong>ということです。今回のアイコン作成のハンズオンでも、サンプルと同じ図を各メンバーに作ってもらったんですが、その際、詳細な作成手順は提示しませんでした。すると、形を完璧に作ってから色を乗せる人がいたり、全体像を作ってから微調整を繰り返す人がいたり、自然と完成までに個人ごとの手順がありました。<strong>こういった思考法の違いを深掘りしていければ、デザインによるアプローチもより効果的なものになるのでは</strong>、と考えています。</p><p>普段はITコンサルとしてシステムを作っていく仕事をしていますが、今後はより人間にも着目して視野を広げていきたいです。</p><img src="/images/20200308/写真⑤.JPG" class="img-middle-size"><p>インタビューを終えて、前例のないことに果敢にチャレンジした木村さんの姿は、フューチャーの「<strong>ないものはつくる</strong>」をまさに体現していた事例だと思いました。<br><strong>やりたいことを最後までやりきる熱意と未来のビジョン</strong>に私も刺激を受けました！</p><hr><img src="/images/20200308/インタビュア.jpg" class="img-middle-size"><hr><p>関連記事:</p><ul><li><a href="https://future-architect.github.io/articles/20200204/">これさえあればサービス構成図がだいたい描けるアイコンセットを公開します！</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは！Technology Innovation Group（TIG）の千葉駿です！&lt;/p&gt;
&lt;p&gt;今回はFuture
      
    
    </summary>
    
      <category term="インタビュー" scheme="https://future-architect.github.io/categories/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%93%E3%83%A5%E3%83%BC/"/>
    
    
      <category term="icon" scheme="https://future-architect.github.io/tags/icon/"/>
    
  </entry>
  
  <entry>
    <title>DynamoDB×Go#3 Go CDKでどこまでいける？機能を調べてみた</title>
    <link href="https://future-architect.github.io/articles/20200228/"/>
    <id>https://future-architect.github.io/articles/20200228/</id>
    <published>2020-02-28T01:13:26.000Z</published>
    <updated>2020-03-09T04:33:45.468Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG DXユニット<a href="https://twitter.com/laqiiz" target="_blank" rel="noopener">真野</a>です。この技術ブログの運営もしています。</p><p><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載</a>の第3弾目です。今までは <code>AWS SDK Go</code> やそれをラップした<code>guregu/dynamo</code> について説明していましたが、 <strong>Go CDK（Go Cloud Development Kit）</strong> を用いたDynamoDB操作について説明します。</p><h1 id="Go-CDKとは？"><a href="#Go-CDKとは？" class="headerlink" title="Go CDKとは？"></a>Go CDKとは？</h1><blockquote><p>Go CDKは2018/07 に Google の Go チームが立ち上げたプロジェクトで、Go アプリケーションを各クラウド間でポータブルにすることを目指して、実装されています。</p></blockquote><p>詳しくは <a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載企画</a> で全7回に渡って概要から各トピックについて説明しています。特に<a href="https://future-architect.github.io/articles/20191111/">第1回目</a> の概要説明から読むことがオススメです。 DynamoDBを含むDocStoreについては<a href="https://future-architect.github.io/articles/20191113/">第3回目</a>の記事を確認ください。</p><ul><li>Go CDK（公式）  <a href="https://gocloud.dev/" target="_blank" rel="noopener">https://gocloud.dev/</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載企画</a></li></ul><p>※名称の揺れについてはGo CDKの方が正式名称ですが、ググラビリティが悪いかなと思い（特にAWS CDKと似ている）、連載版は古い呼び方であるGo Cloudを使わせてもらっていました。</p><h1 id="記事の趣旨"><a href="#記事の趣旨" class="headerlink" title="記事の趣旨"></a>記事の趣旨</h1><p>ご存じの通り、DynamoDBはKVSと言われているものの、非常に多くの機能が存在します。KVSと名前だけ見ると、PK(Primary Key)に対してGet/Put/Deleteなどの基礎的なCRUD処理や、せいぜいそのBatch操作くらいしかできないイメージがありますよね。</p><p>しかし、実際のDynamoDBは遥かに高機能で <strong>Global Secondary Index</strong> や <strong>Local Secondary Index</strong> を用いたインデックスアクセスや、SortKeyを利用した範囲指定の<strong>スキャン</strong>、条件を指定した<strong>クエリ</strong>、<strong>ConditionExpression</strong> という用した既存レコードの有無といった条件付きの書き込み機能などが存在します。これらを組み合わせて<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/WorkingWithItems.html#WorkingWithItems.AtomicCounters" target="_blank" rel="noopener">アトミックカウンターを作る参考記事</a> も公式からでていたり、条件付きではありますが<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/transaction-apis.html" target="_blank" rel="noopener">トランザクション</a>を提供もしています。DynamoDBのクライアントアプリから直接操作することは少いでしょうが、DynamoDB StreamsやGlobal Tablesといった機能も便利ですよね。</p><p>一方で、Go CDKはこういったプロダクト固有の機能を隠蔽化・抽象化したAPIを提供するドライバなため、他のデータストアに切り替えたときでも利用可能なAPIしか提供しない設計になっています（はずです）。しかし、それは <strong>DynamoDBの機能を100%使い切れないということと同義</strong> なため、直感的にはリスクを避けるべくなるべくAWS公式のSDKを利用しようと考える方も多いのでは無いでしょうか？そういう短絡的な判断を避けるために、 <strong>Go CDKが現時点でどこまで機能を網羅しているのか</strong> 我々は知る必要があるでしょう。それがわかれば、この案件のユースケースではGo CDKの提供する機能で十分なため、Go CDKを利用しベンダーロックインのリスク低減を図ったり、Go CDKの提供する<code>memdocstore</code> といったモック機能を享受しようというより有意義な判断ができるはずです。</p><p>というわけで、どの程度DynamoDBの機能がGo CDKから利用できるのか調査していきます。なお、私はDynamoDBのプロフェッショナルではなくイチ開発者ですので色々漏れがあると思います。ぜひTwitterなどでフィードバックを頂ければと思います。</p><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>なお、Go CDKは進化が早いため今回対応していないと判断したものも、実は記事の公開後に実装されている可能性があります。差分については <a href="https://github.com/google/go-cloud/releases" target="_blank" rel="noopener">release-notes</a> などから適時確認ください。</p><ul><li>調査日: 2020/02/24</li><li>Go 1.13.4</li><li>Go CDK v0.19.0</li></ul><h1 id="調査結果"><a href="#調査結果" class="headerlink" title="調査結果"></a>調査結果</h1><p>調査観点は以下としました。それぞれ○が一通りの機能が利用できる、△が一部利用可能、☓は機能提供がされていないということを示しています。</p><table><thead><tr><th>#</th><th>Case</th><th>AWS SDK</th><th>Go CDK</th><th>Description</th></tr></thead><tbody><tr><td>1</td><td>基本的なCRUD</td><td>○</td><td>○</td><td>使いやすいAPIであるし、ハッシュキー、ソートキーともに利用できる</td></tr><tr><td>2</td><td>バッチ処理のCRUD</td><td>○</td><td>○</td><td>バッチ登録、バッチ検索など様々可能</td></tr><tr><td>3</td><td>条件付き書き込み</td><td>○</td><td>△</td><td>楽観的ロックを用いたデータ操作が可能</td></tr><tr><td>4</td><td>クエリ</td><td>○</td><td>○</td><td>WhereやOrderbyやLimitを実行できる</td></tr></tbody></table><p>詳細を説明していきます。</p><h1 id="実証コード"><a href="#実証コード" class="headerlink" title="実証コード"></a>実証コード</h1><p>それぞれGoのコードベースで記載方法をまとめていきます。</p><p>第1回の記事同様 DynamoDB Local を利用してローカル環境を準備します。<br><a href="https://future-architect.github.io/articles/20200225/">https://future-architect.github.io/articles/20200225/</a></p><h2 id="0-事前準備"><a href="#0-事前準備" class="headerlink" title="0. 事前準備"></a>0. 事前準備</h2><h3 id="SDKのセットアップ"><a href="#SDKのセットアップ" class="headerlink" title="SDKのセットアップ"></a>SDKのセットアップ</h3><p>セッション及びDynamoDBを操作するクライアントを生成します。</p><figure class="highlight go"><figcaption><span>クライアントの生成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create session.</span></span><br><span class="line">sess := session.Must(session.NewSessionWithOptions(session.Options&#123;</span><br><span class="line">SharedConfigState: session.SharedConfigEnable,</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create DynamoDB client</span></span><br><span class="line">db := dynamodb.New(sess, &amp;aws.Config&#123;Endpoint: aws.String(<span class="string">"http://localhost:8000"</span>)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Open Collection via Go CDK</span></span><br><span class="line">coll, err := awsdynamodb.OpenCollection(db, <span class="string">"MyFirstTable"</span>, <span class="string">"MyHashKey"</span>, <span class="string">"MyRangeKey"</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> coll.Close()</span><br></pre></td></tr></table></figure><p>オプションの <code>SharedConfigState</code> に <code>SharedConfigEnable</code> を設定することで <code>~/.aws/config</code> 内を参照してくれるようになります。</p><p>DynamoDB clientを生成するまでは、公式SDK通りの手順となります。最後にテーブル名、ハッシュキー、ソートキーを指定して <code>OpenCollection</code> を呼ぶことで、Go CDK経由でドキュメントのCRUD操作を行える用になります。</p><p>この時、<strong>ハッシュキー</strong> と <strong>ソートキー</strong> の両方を指定していますが、もしソートキーが無ければ空文字を指定すればOKです。</p><h3 id="レコードを表現する構造体の定義"><a href="#レコードを表現する構造体の定義" class="headerlink" title="レコードを表現する構造体の定義"></a>レコードを表現する構造体の定義</h3><figure class="highlight go"><figcaption><span>構造体定義</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">MyHashKey  <span class="keyword">string</span> <span class="string">`docstore:"MyHashKey"`</span></span><br><span class="line">MyRangeKey <span class="keyword">int</span>    <span class="string">`docstore:"MyRangeKey"`</span></span><br><span class="line">MyText     <span class="keyword">string</span> <span class="string">`docstore:"MyText"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>docstore</code> というというタグを利用することで、DynamoDBのキーを指定して構造体とマッピングすることができます。省略した場合は構造体のキー名がそのまま利用されます</p><p>ほぼ、AWS SDKと同じですね。</p><h2 id="1-基本的なCRUD"><a href="#1-基本的なCRUD" class="headerlink" title="1. 基本的なCRUD"></a>1. 基本的なCRUD</h2><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><p>利用するメソッドは <code>Create</code> です。</p><figure class="highlight go"><figcaption><span>Create処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">write := Item&#123;MyHashKey: <span class="string">"00001"</span>, MyRangeKey: <span class="number">1</span>, MyText: <span class="string">"some text..."</span>&#125;</span><br><span class="line"><span class="keyword">if</span> err := coll.Create(ctx, &amp;write); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"create: %v"</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直感的だと思います。</p><h3 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h3><p>利用するメソッドは <code>Get</code>です。</p><figure class="highlight go"><figcaption><span>Read処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">read := Item&#123;MyHashKey: <span class="string">"00001"</span>, MyRangeKey: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">if</span> err := coll.Get(ctx, &amp;read); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"get: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"got: %+v\n"</span>, read)</span><br><span class="line"><span class="comment">// =&gt; get: &#123;MyHashKey:00001 MyRangeKey:1 MyText:some text...&#125;</span></span><br></pre></td></tr></table></figure><p>これも直感的です。</p><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>これはやや特殊です。<code>Update</code> を用いますが、更新する差分を <code>docstore.Mods</code> というmapに値をもたせます。</p><figure class="highlight go"><figcaption><span>Update処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">updateKey := Item&#123;MyHashKey: <span class="string">"00001"</span>, MyRangeKey: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">if</span> err := coll.Update(ctx, &amp;updateKey, docstore.Mods&#123;<span class="string">"MyText"</span>:<span class="string">"update text"</span>&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"update: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (補足) もう一度getすると以下のように書き換わっている</span></span><br><span class="line"><span class="comment">// &#123;MyHashKey:00001 MyRangeKey:1 MyText:update text&#125;</span></span><br></pre></td></tr></table></figure><p>Go CDKのUpdateは <code>Patch</code> のような動きをするので注意が必要です。もし、ドキュメント全体を置換したい場合は後述する <code>Replace</code> を利用します。　</p><p><code>Update</code> は存在しないレコードに対して行うとエラーになります。</p><figure class="highlight go"><figcaption><span>Update失敗</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">notFoundKey := Item&#123;MyHashKey: <span class="string">"99999"</span>, MyRangeKey: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">if</span> err := coll.Update(ctx, &amp;notFoundKey, docstore.Mods&#123;<span class="string">"MyText"</span>: <span class="string">"update text"</span>&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"not found: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// not found: docstore (code=FailedPrecondition):  ConditionalCheckFailedException: The conditional request failed</span></span><br><span class="line"><span class="comment">// status code: 400, request id: ab4aaa27-303a-4090-a457-94f42950d0bd</span></span><br></pre></td></tr></table></figure><p>エラーメッセージから推測すると、Go CDKのUpdateはDynamoDBのConditional Expressionsを利用していることがわかりますね。</p><h2 id="Replace"><a href="#Replace" class="headerlink" title="Replace"></a>Replace</h2><p>項目全体を置き換える場合です。存在しない場合はエラーになります。</p><figure class="highlight go"><figcaption><span>置換処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">replace := Item&#123;MyHashKey: <span class="string">"00001"</span>, MyRangeKey: <span class="number">1</span>, MyText: <span class="string">"replace"</span>&#125;</span><br><span class="line"><span class="keyword">if</span> err := coll.Replace(ctx, &amp;replace); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"replace: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (補足)もう一度getすると以下のように置換されている</span></span><br><span class="line"><span class="comment">// &#123;MyHashKey:00001 MyRangeKey:1 MyText:replace&#125;</span></span><br></pre></td></tr></table></figure><p>簡単ですね。</p><p>もし、存在しない場合は <code>Create</code>, 存在する場合は <code>Replace</code> をしたい場合は <code>Put</code> を使うようです。今回はあまりにコードがそのままなので省略します。</p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>利用するメソッドは <code>Delete</code> です。</p><figure class="highlight go"><figcaption><span>Delete処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deleteKey := Item&#123;MyHashKey: <span class="string">"00001"</span>, MyRangeKey: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">if</span> err := coll.Delete(ctx, &amp;deleteKey); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"delete: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (補足)もう一度getすると、not foundになる</span></span><br></pre></td></tr></table></figure><p>ここまでで一通りのCRUD操作ができることを確認できました。</p><h2 id="2-バッチ処理のCRUD"><a href="#2-バッチ処理のCRUD" class="headerlink" title="2. バッチ処理のCRUD"></a>2. バッチ処理のCRUD</h2><p>大量データを扱う場合は、1件1件データを登録するのではなくバッチ登録を行いたいケースは多いのでは無いでしょうか？</p><p>この場合は <code>Actions</code> を用います。</p><figure class="highlight go"><figcaption><span>バッチ登録</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create</span></span><br><span class="line">w1 := Item&#123;MyHashKey: <span class="string">"00001"</span>, MyRangeKey: <span class="number">1</span>, MyText: <span class="string">"some text1..."</span>&#125;</span><br><span class="line">w2 := Item&#123;MyHashKey: <span class="string">"00001"</span>, MyRangeKey: <span class="number">2</span>, MyText: <span class="string">"some text2..."</span>&#125;</span><br><span class="line">w3 := Item&#123;MyHashKey: <span class="string">"00001"</span>, MyRangeKey: <span class="number">3</span>, MyText: <span class="string">"some text3..."</span>&#125;</span><br><span class="line"><span class="keyword">if</span> err := coll.Actions().Create(&amp;w1).Create(&amp;w2).Create(&amp;w3).Do(ctx); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"actions: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (補足) バッチ登録した結果をgetすると以下の値が確認できる</span></span><br><span class="line"><span class="comment">// got: &#123;MyHashKey:00001 MyRangeKey:1 MyText:some text1...&#125;</span></span><br><span class="line"><span class="comment">// got: &#123;MyHashKey:00001 MyRangeKey:2 MyText:some text2...&#125;</span></span><br><span class="line"><span class="comment">// got: &#123;MyHashKey:00001 MyRangeKey:3 MyText:some text3...&#125;</span></span><br></pre></td></tr></table></figure><p>ActionsはCreateだけではなく、Get/Create/Replace/Put/Update/Delete の6つの操作を混在させて実行も可能です。</p><p>参考: <a href="https://godoc.org/gocloud.dev/docstore#hdr-Actions" target="_blank" rel="noopener">https://godoc.org/gocloud.dev/docstore#hdr-Actions</a></p><p>今回は関数をチェーンで登録しましたが、Actionsで <code>ActionList</code> が取得できるので、もちろんforループと合わせて追加もできます。</p><h2 id="3-条件付き書き込み"><a href="#3-条件付き書き込み" class="headerlink" title="3. 条件付き書き込み"></a>3. 条件付き書き込み</h2><p>Go CDKはドキュメントを読んだ限りは、条件付き書き込みはサポートされていないようです。しかし、Revisionsという機能があり、いわゆる楽観的ロックのような利用用途を公式でサポートされています。</p><ul><li><a href="https://godoc.org/gocloud.dev/docstore#hdr-Revisions" target="_blank" rel="noopener">https://godoc.org/gocloud.dev/docstore#hdr-Revisions</a></li></ul><p>内容は リビジョンフィールド (デフォルト: <code>DocstoreRevision</code>) を設定すると、このフィールドを用いてバージョンを確認し、<code>Put</code>、<code>Replace</code>、<code>Update</code>、<code>Delete</code> の操作を安全に行うことができます。</p><p>最初に定義した構造体にフィールドを追加します。</p><figure class="highlight go"><figcaption><span>リビジョンフィールドを追加した構造体</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">MyHashKey        <span class="keyword">string</span>       <span class="string">`docstore:"MyHashKey"`</span></span><br><span class="line">MyRangeKey       <span class="keyword">int</span>          <span class="string">`docstore:"MyRangeKey"`</span></span><br><span class="line">MyText           <span class="keyword">string</span>       <span class="string">`docstore:"MyText"`</span></span><br><span class="line">DocstoreRevision <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを用いて、楽観的ロックを行ってロックが行われているか確認します。どちらも同じドキュメントにUpdateし続けて様子を見てみます。</p><figure class="highlight go"><figcaption><span>楽観的ロック検出テスト</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 別のgoroutineでも無限書き込み</span></span><br><span class="line"><span class="keyword">go</span> UpdateLoop()</span><br><span class="line"><span class="comment">// メインスレッドでも無限書き込み</span></span><br><span class="line">UpdateLoop()</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; optimistic locking: docstore (code=FailedPrecondition): </span></span><br><span class="line"><span class="comment">// ConditionalCheckFailedException: The conditional request failed</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateLoop</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// (DynamoDB Clientを生成処理)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123; <span class="comment">// 無限にドキュメントを更新する処理</span></span><br><span class="line">read := Item&#123;MyHashKey: <span class="string">"00001"</span>, MyRangeKey: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">if</span> err := coll.Get(ctx, &amp;read); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">"get: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := coll.Update(ctx, &amp;read, docstore.Mods&#123;<span class="string">"MyText"</span>: <span class="string">"update text: "</span> + time.Now().String()&#125;); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> gcerrors.Code(err) == gcerrors.FailedPrecondition &#123;</span><br><span class="line">log.Fatalf(<span class="string">"optimistic locking: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Fatalf(<span class="string">"update: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>すると、実行結果が <code>optimistic locking: docstore (code=FailedPrecondition): ConditionalCheckFailedException: The conditional request failed</code> が発生し、getしてupdateするまでの間に別のgoroutineが同じドキュメントを更新したことが検知できました。</p><p>DynamoDBのConditional Expressionsほど万能では無いですが、多くのユースケースはロックを実現したいことが多いと思うので、これで事足りるケースも多いのではないでしょうか？</p><p>ちなみに、Revisionフィールドですが、awscliでテーブルを検索すると、UUIDで実現されていました。最初はロック番号のような形式で実装されていると思ったので意外です</p><p>もし、更新回数などをアプリケーションとして持ちたい場合は、自分で属性を持つ必要があるのでご注意ください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;aws dynamodb scan --endpoint-url http://localhost:8000 --table-name MyFirstTable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"Items"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"DocstoreRevision"</span>: &#123;</span><br><span class="line">                <span class="string">"S"</span>: <span class="string">"3e38649b-d82c-46ab-a0fe-621f98104f75"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"MyHashKey"</span>: &#123;</span><br><span class="line">                <span class="string">"S"</span>: <span class="string">"00001"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"MyText"</span>: &#123;</span><br><span class="line">                <span class="string">"S"</span>: <span class="string">"update text: 2020-02-28 09:45:27.725097 +0900 JST m=+0.090001301"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"MyRangeKey"</span>: &#123;</span><br><span class="line">                <span class="string">"N"</span>: <span class="string">"1"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"Count"</span>: 1,</span><br><span class="line">    <span class="string">"ScannedCount"</span>: 1,</span><br><span class="line">    <span class="string">"ConsumedCapacity"</span>: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-クエリ"><a href="#4-クエリ" class="headerlink" title="4. クエリ"></a>4. クエリ</h2><p><a href="https://future-architect.github.io/articles/20191113/">Go Cloud#3 Go CloudのDocStoreを使う</a> の記事で説明されているように、Go CDKはクエリもサポートされています。<code>Where()</code>、<code>OrderBy()</code>、<code>Limit()</code> で、 Whereの演算子は <code>=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code> の5種類です。ほとんどやりたいことはできるのではないでしょうか？</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>使ってみた感想としてGo CDKのDocStoreは非常にリッチな機能を持っており、ベーシックなAWS SDKと遜色なく利用できました。Condition Expressionsで複雑な条件を利用しないなど、限られたユースケースであればむしろ生産性が高まるのではないでしょうか</li><li>Go CDKを用いればドライバ切り替えでmemstoreというモック切り替えも可能ですし、テスタビリティとしても有用です</li></ul><p>機能上はGo CDKもかなりガンバっていると感じます。DynamoDBアクセスする際の有力な選択肢となりうるのではないでしょうか？ぜひ、私達のチームでも機を見て実戦投入してみてチャレンジしてみたいと思います。</p><hr><p><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載企画</a>以外にも多くの連載企画があります。特にGo Cloud連載が今回のテーマに近いです。</p><ul><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a></li><li><a href="https://future-architect.github.io/tags/Auth0/">Auth0 連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG DXユニット&lt;a href=&quot;https://twitter.com/laqiiz&quot; target=&quot;_
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="DynamoDB×Go" scheme="https://future-architect.github.io/tags/DynamoDB%C3%97Go/"/>
    
  </entry>
  
  <entry>
    <title>DynamoDB×Go連載#2 AWS SDKによるDynamoDBの基本操作</title>
    <link href="https://future-architect.github.io/articles/20200227/"/>
    <id>https://future-architect.github.io/articles/20200227/</id>
    <published>2020-02-26T23:25:12.000Z</published>
    <updated>2020-03-11T00:50:37.789Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の武田です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載企画</a>第2弾の記事となります。<br><a href="https://future-architect.github.io/articles/20200225/">DynamoDB×Go連載#1 GoでDynamoDBでおなじみのguregu/dynamoを利用する</a> では <a href="https://github.com/guregu/dynamo" target="_blank" rel="noopener">guregu/dynamo</a> を利用したDynamoDBの基本操作をご紹介しました。</p><p>本記事ではサードパーティ製のライブラリを利用せずaws-sdkを素で利用した場合のDynamoDBの基本操作について見ていきましょう。<br>なお、公式のドキュメントは下記になりますので、より詳細な情報はこちらを参照してください。<br><a href="https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/welcome.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/welcome.html</a></p><h2 id="環境情報"><a href="#環境情報" class="headerlink" title="環境情報"></a>環境情報</h2><ul><li>Go: 1.13.8</li><li>aws-sdk-go: v1.29.10</li></ul><h2 id="検証環境の準備"><a href="#検証環境の準備" class="headerlink" title="検証環境の準備"></a>検証環境の準備</h2><p>第1回の記事同様 <code>DynamoDB Local</code> を利用してローカル環境を準備します。<br><a href="https://future-architect.github.io/articles/20200225/">https://future-architect.github.io/articles/20200225/</a></p><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><h3 id="SDKのセットアップ"><a href="#SDKのセットアップ" class="headerlink" title="SDKのセットアップ"></a>SDKのセットアップ</h3><p>セッション及びDynamoDBを操作するクライアントを作成します。</p><figure class="highlight go"><figcaption><span>クライアントの生成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create session.</span></span><br><span class="line">sess := session.Must(session.NewSessionWithOptions(session.Options&#123;</span><br><span class="line">SharedConfigState: session.SharedConfigEnable,</span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">// Create DynamoDB client.</span></span><br><span class="line">db := dynamodb.New(sess, &amp;aws.Config&#123;Endpoint: aws.String(<span class="string">"http://localhost:8000"</span>)&#125;)</span><br></pre></td></tr></table></figure><p>オプションの <code>SharedConfigState</code> に <code>SharedConfigEnable</code> を設定することで <code>~/.aws/config</code> 内を参照してくれるようになります。</p><h3 id="レコードを表現する構造体の定義"><a href="#レコードを表現する構造体の定義" class="headerlink" title="レコードを表現する構造体の定義"></a>レコードを表現する構造体の定義</h3><figure class="highlight go"><figcaption><span>構造体定義</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">MyHashKey  <span class="keyword">string</span> <span class="string">`dynamodbav:"MyHashKey"`</span></span><br><span class="line">MyRangeKey <span class="keyword">int</span>    <span class="string">`dynamodbav:"MyRangeKey"`</span></span><br><span class="line">MyText     <span class="keyword">string</span> <span class="string">`dynamodbav:"MyText"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dynamodbav</code> というタグを利用することで、DynamoDBのキーを指定して構造体とマッピングすることができます。<br>省略した場合は構造体のキー名がそのまま利用されます。</p><h2 id="基本的なCRUD"><a href="#基本的なCRUD" class="headerlink" title="基本的なCRUD"></a>基本的なCRUD</h2><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><p>利用するメソッドは <code>PutItem</code> です。</p><figure class="highlight go"><figcaption><span>Create処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">item := Item&#123;</span><br><span class="line">MyHashKey:  <span class="string">"00001"</span>,</span><br><span class="line">MyRangeKey: <span class="number">1</span>,</span><br><span class="line">MyText:     <span class="string">"some text..."</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Convert item to dynamodb attribute.</span></span><br><span class="line">av, err := dynamodbattribute.MarshalMap(item)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Create an input.</span></span><br><span class="line">input := &amp;dynamodb.PutItemInput&#123;</span><br><span class="line">TableName: aws.String(<span class="string">"MyFirstTable"</span>),</span><br><span class="line">Item:      av,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Execute.</span></span><br><span class="line">_, err = db.PutItem(input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dynamodbattribute.MarshalMap</code> を利用して構造体を <code>dynamodb attribute</code> に変換する必要がある点がポイントです。</p><h3 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h3><p>利用するメソッドは <code>GetItem</code> です。</p><figure class="highlight go"><figcaption><span>Read処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create an input.</span></span><br><span class="line">input := &amp;dynamodb.GetItemInput&#123;</span><br><span class="line">TableName: aws.String(<span class="string">"MyFirstTable"</span>),</span><br><span class="line">Key: <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue&#123;</span><br><span class="line"><span class="string">"MyHashKey"</span>: &#123;</span><br><span class="line">S: aws.String(<span class="string">"00001"</span>),</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"MyRangeKey"</span>: &#123;</span><br><span class="line">N: aws.String(<span class="string">"1"</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Execute.</span></span><br><span class="line">result, err := db.GetItem(input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Convert the dynamodb result to a struct.</span></span><br><span class="line">item := Item&#123;&#125;</span><br><span class="line">err = dynamodbattribute.UnmarshalMap(result.Item, &amp;item)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(item) <span class="comment">// &#123;00001 1 some text...&#125;</span></span><br></pre></td></tr></table></figure><p><code>GetItemInput</code> を作成する際に、キー属性を指定する必要があります。<br>取得した結果は <code>dynamodbattribute.UnmarshalMap</code> を利用して任意の構造体にマッピングできます。</p><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><p>利用するメソッドは <code>UpdateItem</code> です。<br>どのキーをどの値に更新するかを指定する必要があるため、少しコードが複雑になります。 </p><figure class="highlight go"><figcaption><span>Update処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create an expression for update.</span></span><br><span class="line">update := expression.UpdateBuilder&#123;&#125;.Set(expression.Name(<span class="string">"MyText"</span>), expression.Value(<span class="string">"updated text"</span>))</span><br><span class="line">expr, err := expression.NewBuilder().WithUpdate(update).Build()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Create an input.</span></span><br><span class="line">input := &amp;dynamodb.UpdateItemInput&#123;</span><br><span class="line">TableName: aws.String(<span class="string">"MyFirstTable"</span>),</span><br><span class="line">Key: <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue&#123;</span><br><span class="line"><span class="string">"MyHashKey"</span>: &#123;</span><br><span class="line">S: aws.String(<span class="string">"00001"</span>),</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"MyRangeKey"</span>: &#123;</span><br><span class="line">N: aws.String(<span class="string">"1"</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">ExpressionAttributeNames:  expr.Names(),</span><br><span class="line">ExpressionAttributeValues: expr.Values(),</span><br><span class="line">UpdateExpression:          expr.Update(),</span><br><span class="line">ConditionExpression:       expr.Condition(),</span><br><span class="line">ReturnValues:              aws.String(dynamodb.ReturnValueAllNew),</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Execute.</span></span><br><span class="line">_, err = db.UpdateItem(input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>UpdateBuilder</code>, <code>ExpressionBuilder</code> を利用して、更新式を作成します。<br><code>ConditionBuilder</code> を利用して更新条件を指定することもできます。</p><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>利用するメソッドは <code>UpdateItem</code> です。</p><figure class="highlight go"><figcaption><span>Delete処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create an input.</span></span><br><span class="line">input := &amp;dynamodb.DeleteItemInput&#123;</span><br><span class="line">TableName: aws.String(<span class="string">"MyFirstTable"</span>),</span><br><span class="line">Key: <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue&#123;</span><br><span class="line"><span class="string">"MyHashKey"</span>: &#123;</span><br><span class="line">S: aws.String(<span class="string">"00001"</span>),</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"MyRangeKey"</span>: &#123;</span><br><span class="line">N: aws.String(<span class="string">"1"</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Execute.</span></span><br><span class="line">_, err := db.DeleteItem(input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="guregu-dynamo-との比較"><a href="#guregu-dynamo-との比較" class="headerlink" title="guregu/dynamo との比較"></a>guregu/dynamo との比較</h2><p>コードを見てわかるとおり、aws-sdkを素で利用する方が筋力が必要になります。<br>ただし筆者はメンテナンス性を考慮し、極力サードパーティ性のライブラリには依存したくない（特にアプリのコアとなる部分は）という思いもあり、aws-sdkのみを利用する方針をとっています。</p><p>とはいえ <code>attribute</code> や <code>expression</code> を極力書きたくない、書かせたくないという思いもあり、<br>汎用的な処理については共通メソッドを構えるようにしていました。</p><p>例えばGETのイメージは下記の感じです。</p><figure class="highlight go"><figcaption><span>共通的なメソッド</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(repo *BaseRepository)</span> <span class="title">get</span><span class="params">(req, res domain.Domain, consistent <span class="keyword">bool</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">key, err := repo.KeyAttributes(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Wrap(err, <span class="string">"failed to get DynamoDB key attributes"</span>)</span><br><span class="line">&#125;</span><br><span class="line">input := &amp;dynamodb.GetItemInput&#123;</span><br><span class="line">TableName:      repo.Table(),</span><br><span class="line">Key:            key,</span><br><span class="line">ConsistentRead: aws.Bool(consistent),</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Execute.</span></span><br><span class="line">output, err := repo.DB.GetItem(input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Wrapf(err, <span class="string">"failed to execute DynamoDB Get API to %s"</span>, *repo.Table())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(output.Item) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> exception.NewNotFoundError(<span class="string">""</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err = dynamodbattribute.UnmarshalMap(output.Item, &amp;res); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Wrap(err, <span class="string">"failed to DynamoDB unmarshal"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// KeyAttributes returns a map of *dymanodb.AttributeValue that is dynamodb table key from the passed struct.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(repo *BaseRepository)</span> <span class="title">KeyAttributes</span><span class="params">(domain <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(<span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> repo.attributes(domain, <span class="function"><span class="keyword">func</span><span class="params">(tag reflect.StructTag)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">_, ok := tag.Lookup(<span class="string">"dynamodbkey"</span>)</span><br><span class="line"><span class="keyword">return</span> ok</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(repo *BaseRepository)</span> <span class="title">attributes</span><span class="params">(domain <span class="keyword">interface</span>&#123;&#125;, condition <span class="keyword">func</span>(tag reflect.StructTag)</span> <span class="title">bool</span>) <span class="params">(<span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue, error)</span></span> &#123;</span><br><span class="line">rv := reflect.Indirect(reflect.ValueOf(domain))</span><br><span class="line"><span class="keyword">if</span> rv.Kind() != reflect.Struct &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"domain must be a struct"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Create dynamodb attributes.</span></span><br><span class="line">attr, err := dynamodbattribute.MarshalMap(rv.Interface())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Delete attributes by condition.</span></span><br><span class="line"><span class="keyword">var</span> deleteAttr <span class="function"><span class="keyword">func</span><span class="params">(rv reflect.Value)</span></span></span><br><span class="line"><span class="function"><span class="title">deleteAttr</span> = <span class="title">func</span><span class="params">(rv reflect.Value)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i, rt := <span class="number">0</span>, rv.Type(); i &lt; rv.NumField(); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> rv.Field(i).Kind() == reflect.Struct &amp;&amp; rt.Field(i).Anonymous &#123;</span><br><span class="line">deleteAttr(rv.Field(i))</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">name, tag := rt.Field(i).Name, rt.Field(i).Tag</span><br><span class="line"><span class="keyword">if</span> !condition(tag) &#123;</span><br><span class="line"><span class="keyword">if</span> dynamodbav := tag.Get(<span class="string">"dynamodbav"</span>); dynamodbav != <span class="string">""</span> &#123;</span><br><span class="line"><span class="built_in">delete</span>(attr, strings.Split(dynamodbav, <span class="string">","</span>)[<span class="number">0</span>])</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">delete</span>(attr, name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">deleteAttr(rv)</span><br><span class="line"><span class="keyword">return</span> attr, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同様にUpdate, Create, Deleteも汎化することで、呼び出し元の実装は極めてシンプルにすることができてました。<br>もちろんより複雑なことをやろうとするとコードも煩雑になり、それこそ <code>dynamodb/guregu</code> 相当のものを再開発することになりかねません。<br>ある程度の制約を設けるなどしてDynamoDBの利用シーンをシンプルにできるのであるのであれば、筆者はaws-sdkのみの利用を推奨します。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>第2段の記事はいかがだったでしょうか。<br>gureguなどサードパーティ製のライブラリの利用と迷っている方の参考になれば幸いです。</p><p>それでは、明日の投稿もお楽しみに。</p><p><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載企画</a>以外にも多くの連載企画があります。特にGo Cloud連載が今回のテーマに近いです。</p><ul><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a></li><li><a href="https://future-architect.github.io/tags/Auth0/">Auth0 連載</a><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。その中でもDXチームは特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。TIG DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;の武田です。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="DynamoDB×Go" scheme="https://future-architect.github.io/tags/DynamoDB%C3%97Go/"/>
    
  </entry>
  
  <entry>
    <title>DynamoDB×Go連載#1 GoでDynamoDBでおなじみのguregu/dynamoを利用する</title>
    <link href="https://future-architect.github.io/articles/20200225/"/>
    <id>https://future-architect.github.io/articles/20200225/</id>
    <published>2020-02-25T01:32:43.000Z</published>
    <updated>2020-03-09T04:33:45.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、村田です。Go言語でWebサーバを実装していた際にDynamoDBを扱うライブラリとしてGregさんの <a href="https://github.com/guregu/dynamo" target="_blank" rel="noopener">https://github.com/guregu/dynamo</a> を使っていました。（2年ほど稼働していますが、特に問題も出ていません）</p><p>当時Go初心者だった私は「go dynamo」とすぐさまGoogle先生に問い合わせ、「guregu/dynamoがオススメ」とのエントリーを多数発見しました。オブジェクトの取り回しが隠蔽化されていてとにかく実装が簡単だと記事にも書いてありましたし、私自身も実際そう感じました。</p><p>すでにタイトルからお察しかと思いますが、本記事は連載第1回目です。時代の移ろいに合わせてDynamoDB×Go界隈の事情も刻一刻と変化しています。まずは私の利用していたSDK(guregu/dynamo)についてから本連載をスタートします。</p><h1 id="SDK-guregu-dynamo-を使ってDynamoDBへアクセスする"><a href="#SDK-guregu-dynamo-を使ってDynamoDBへアクセスする" class="headerlink" title="SDK(guregu/dynamo)を使ってDynamoDBへアクセスする"></a>SDK(guregu/dynamo)を使ってDynamoDBへアクセスする</h1><h2 id="ローカルの検証環境を準備"><a href="#ローカルの検証環境を準備" class="headerlink" title="ローカルの検証環境を準備"></a>ローカルの検証環境を準備</h2><p>ソースコードに触る前にまずは環境の準備から。<br>DynamoDB LocalをDocker上で動かすのが楽なので今回はそちらを使います。</p><figure class="highlight bash"><figcaption><span>DynamoDB-Localのインストール</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull amazon/dynamodb-local</span><br><span class="line">$ docker run -d --name dynamodb -p 8000:8000 amazon/dynamodb-local</span><br></pre></td></tr></table></figure><p>DynamoDB Localへのアクセスはaws cliを利用するのでそちらも準備します。アクセス時はEndpointのURLを引数で指定してあげる必要があります。</p><figure class="highlight bash"><figcaption><span>AWSCLIのテスト_失敗</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ aws dynamodb list-tables --endpoint-url http://localhost:8000 --region ap-northeast-1</span><br><span class="line">Unable to locate credentials. You can configure credentials by running <span class="string">"aws configure"</span>.</span><br></pre></td></tr></table></figure><p>怒られちゃいました…<br>FakeでもいいのでCredentialを指定しなければならないので <code>aws configure</code> を使って指定します。</p><figure class="highlight bash"><figcaption><span>デフォルトのProfile作成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ aws configure</span><br><span class="line">AWS Access Key ID [None]: fake</span><br><span class="line">AWS Secret Access Key [None]: fake</span><br><span class="line">Default region name [None]: ap-northeast-1</span><br><span class="line">Default output format [None]: json</span><br></pre></td></tr></table></figure><p>…ということで気を取り直して、</p><figure class="highlight bash"><figcaption><span>AWSCLIのテスト_成功</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ aws dynamodb list-tables --endpoint-url http://localhost:8000</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"TableNames"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OKそうですね。あとはテーブルを作成したら準備OKです。<br>今回は以下のようなスキーマでテーブルを作成します。</p><ul><li>テーブル名<ul><li><code>MyFirstTable</code></li></ul></li><li>HashKey<ul><li><code>MyHashKey</code> - <code>S</code></li></ul></li><li>RangeKey<ul><li><code>MyRangeKey</code> - <code>N</code></li></ul></li></ul><figure class="highlight bash"><figcaption><span>DynamoDBテーブル作成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">$ aws dynamodb create-table --endpoint-url http://localhost:8000 --table-name MyFirstTable --attribute-definitions AttributeName=MyHashKey,AttributeType=S AttributeName=MyRangeKey,AttributeType=N --key-schema AttributeName=MyHashKey,KeyType=HASH AttributeName=MyRangeKey,KeyType=RANGE --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"TableDescription"</span>: &#123;</span><br><span class="line">        <span class="string">"TableArn"</span>: <span class="string">"arn:aws:dynamodb:ddblocal:000000000000:table/MyFirstTable"</span>,</span><br><span class="line">        <span class="string">"AttributeDefinitions"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"AttributeName"</span>: <span class="string">"MyHashKey"</span>,</span><br><span class="line">                <span class="string">"AttributeType"</span>: <span class="string">"S"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"AttributeName"</span>: <span class="string">"MyRangeKey"</span>,</span><br><span class="line">                <span class="string">"AttributeType"</span>: <span class="string">"N"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"ProvisionedThroughput"</span>: &#123;</span><br><span class="line">            <span class="string">"NumberOfDecreasesToday"</span>: 0,</span><br><span class="line">            <span class="string">"WriteCapacityUnits"</span>: 1,</span><br><span class="line">            <span class="string">"LastIncreaseDateTime"</span>: 0.0,</span><br><span class="line">            <span class="string">"ReadCapacityUnits"</span>: 1,</span><br><span class="line">            <span class="string">"LastDecreaseDateTime"</span>: 0.0</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"TableSizeBytes"</span>: 0,</span><br><span class="line">        <span class="string">"TableName"</span>: <span class="string">"MyFirstTable"</span>,</span><br><span class="line">        <span class="string">"TableStatus"</span>: <span class="string">"ACTIVE"</span>,</span><br><span class="line">        <span class="string">"KeySchema"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"KeyType"</span>: <span class="string">"HASH"</span>,</span><br><span class="line">                <span class="string">"AttributeName"</span>: <span class="string">"MyHashKey"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"KeyType"</span>: <span class="string">"RANGE"</span>,</span><br><span class="line">                <span class="string">"AttributeName"</span>: <span class="string">"MyRangeKey"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"ItemCount"</span>: 0,</span><br><span class="line">        <span class="string">"CreationDateTime"</span>: xxxxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちなみにですが、DynamoDB Localの場合は設定したCapacity Unitは考慮されないので適当な値を設定しても問題ありません。</p><h2 id="ソースコード書いていきます"><a href="#ソースコード書いていきます" class="headerlink" title="ソースコード書いていきます"></a>ソースコード書いていきます</h2><p>※ソースは全て <a href="https://github.com/mura123yasu/go-guregu-dynamo" target="_blank" rel="noopener">https://github.com/mura123yasu/go-guregu-dynamo</a> にアップしているので適宜参考にしてください。</p><h3 id="クライアントを準備"><a href="#クライアントを準備" class="headerlink" title="クライアントを準備"></a>クライアントを準備</h3><p>環境変数から諸々の値を取得するようにしつつ、クライアントを生成します。<br>テーブル名は先程作成した <code>MyFirstTable</code> を設定します。</p><figure class="highlight go"><figcaption><span>クライアント生成</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// クライアントの設定</span></span><br><span class="line">dynamoDbRegion := os.Getenv(<span class="string">"AWS_REGION"</span>)</span><br><span class="line">disableSsl := <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DynamoDB Localを利用する場合はEndpointのURLを設定する</span></span><br><span class="line">dynamoDbEndpoint := os.Getenv(<span class="string">"DYNAMO_ENDPOINT"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(dynamoDbEndpoint) != <span class="number">0</span> &#123;</span><br><span class="line">disableSsl = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// デフォルトでは東京リージョンを指定</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(dynamoDbRegion) == <span class="number">0</span> &#123;</span><br><span class="line">dynamoDbRegion = <span class="string">"ap-northeast-1"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db := dynamo.New(session.New(), &amp;aws.Config&#123;</span><br><span class="line">Region:     aws.String(dynamoDbRegion),</span><br><span class="line">Endpoint:   aws.String(dynamoDbEndpoint),</span><br><span class="line">DisableSSL: aws.Bool(disableSsl),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">table := db.Table(<span class="string">"MyFirstTable"</span>)</span><br><span class="line"><span class="comment">// (以下略)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="単純なCRUD"><a href="#単純なCRUD" class="headerlink" title="単純なCRUD"></a>単純なCRUD</h3><p>ここからはCRUD処理の実装を進めます。</p><h4 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h4><p>Createで利用するメソッドは <code>Put</code> です。</p><p>Put対象のitemを準備して渡すだけで簡単ですが1点注意事項があります。itemはPut先テーブルのKeyをすべて含むものでなければなりません。今回であれば <code>MyHashKey</code> と <code>MyRangeKey</code> です。</p><figure class="highlight go"><figcaption><span>Create処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// (略)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 単純なCRUD - Create</span></span><br><span class="line">item := Item&#123;</span><br><span class="line">MyHashKey:  <span class="string">"MyHash"</span>,</span><br><span class="line">MyRangeKey: <span class="number">1</span>,</span><br><span class="line">MyText:     <span class="string">"My First Text"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := table.Put(item).Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Failed to put item[%v]\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (略)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h4><p>Readで利用するメソッドは <code>Get</code> です。他にも <code>Scan</code> も使えるので用途に合わせて色々試してみて下さい。</p><p>私達が実装したWebサーバでは、DynamoDBに対するアクセスはキーアクセスのみに限定していたため、Getの利用で事足りました。</p><figure class="highlight go"><figcaption><span>Read処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// (略)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 単純なCRUD - Read</span></span><br><span class="line"><span class="keyword">var</span> readResult Item</span><br><span class="line">err = table.Get(<span class="string">"MyHashKey"</span>, item.MyHashKey).Range(<span class="string">"MyRangeKey"</span>, dynamo.Equal, item.MyRangeKey).One(&amp;readResult)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Failed to get item[%v]\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (略)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><p>利用するメソッドは <code>Update</code> です。</p><p>少し余談にはなるのですが、Webサーバ実装時はUpdateは使いませんでした。常にPut処理を行っており、全体シーケンスを検討する中で冪等性を保つためにそのような設計にしていました。</p><figure class="highlight go"><figcaption><span>Update処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// (略)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 単純なCRUD - Update</span></span><br><span class="line"><span class="keyword">var</span> updateResult Item</span><br><span class="line">err = table.Update(<span class="string">"MyHashKey"</span>, item.MyHashKey).Range(<span class="string">"MyRangeKey"</span>, item.MyRangeKey).Set(<span class="string">"MyText"</span>, <span class="string">"My Second Text"</span>).Value(&amp;updateResult)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Failed to update item[%v]\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (略)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h4><p>利用するメソッドは <code>Delete</code> です。</p><p>Keyさえ指定していれば問題ないのは他メソッドと変わりません。</p><figure class="highlight go"><figcaption><span>Delete処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// (略)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 単純なCRUD - Delete</span></span><br><span class="line">err = table.Delete(<span class="string">"MyHashKey"</span>, item.MyHashKey).Range(<span class="string">"MyRangeKey"</span>, item.MyRangeKey).Run()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Failed to delete item[%v]\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (略)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Conditional-Check"><a href="#Conditional-Check" class="headerlink" title="Conditional Check"></a>Conditional Check</h3><p>これはもうゴリゴリに使い倒しました。以下の例はとてもシンプルなものですが、実際には <code>If(&quot;MyText = ?&quot;, &quot;some word&quot;)</code> の部分に様々な条件を記載します。書き方は色々あるので必要に応じて確認してみてください。</p><figure class="highlight go"><figcaption><span>ConditionalCheck処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// (略)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Conditional Check</span></span><br><span class="line">err = table.Delete(<span class="string">"MyHashKey"</span>, item.MyHashKey).Range(<span class="string">"MyRangeKey"</span>, item.MyRangeKey).If(<span class="string">"MyText = ?"</span>, <span class="string">"some word"</span>).Run()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Failed to delete item with conditional check[%v]\n"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// (略)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要件を満たすためにほぼほぼマストで必要だったConditional Checkですが、しっかり設計しておかないと一番泣きを見ることになる部分になります。</p><p>例えば、開発当時ロックの機構をこのConditional Checkで実現しており、ロック取得者以外がレコードを更新できないようになど制御をかけていたのですが、一連のシーケンスの中で予期しない割り込みが発生すると永遠に更新できないレコードが登場し…もちろん設計ミスによるものですが、とても苦しみました。（原因究明の時間は非常に楽しかった記憶もありますが笑）</p><h3 id="一連のソースを実行してみる"><a href="#一連のソースを実行してみる" class="headerlink" title="一連のソースを実行してみる"></a>一連のソースを実行してみる</h3><p>さて、紹介してきた一連の動作を最後に実行してみましょう。DynamoDB Localを使用する場合は環境変数にて <code>DYNAMO_ENDPOINT</code> だけ指定してRunするだけ。簡単ですね。</p><figure class="highlight sh"><figcaption><span>実行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout https://github.com/mura123yasu/go-guregu-dynamo.git</span><br><span class="line">$ <span class="built_in">export</span> DYNAMO_ENDPOINT=http://localhost:8000</span><br><span class="line">$ go run main.go</span><br></pre></td></tr></table></figure><p>※ちなみにコミットしているソースはConditional CheckのUpdateだけが失敗しますが、想定通りなので問題ありません。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>連載初日の記事はいかがだったでしょうか？レベル的には初学者の方に向けた内容だったかなと思います。「まずはGo言語でDynamoDBをつついてみたい」という方が本記事を通じて簡単にチャレンジできたら幸いです。</p><p>続きはこちらです。</p><ul><li><a href="https://future-architect.github.io/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載企画</a></li></ul><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><p>DynamoDB×Go以外にも多くの連載企画があります。特にGo Cloud連載が今回のテーマに近いです。</p><ul><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud 連載</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a></li><li><a href="https://future-architect.github.io/tags/Auth0/">Auth0 連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、村田です。Go言語でWebサーバを実装していた際にDynamoDBを扱うライブラリとしてGregさんの &lt;a h
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="DynamoDB×Go" scheme="https://future-architect.github.io/tags/DynamoDB%C3%97Go/"/>
    
  </entry>
  
  <entry>
    <title>GCP連載#10 Terraform ではなくCloud Deployment Manager を使ってみよう</title>
    <link href="https://future-architect.github.io/articles/20200219/"/>
    <id>https://future-architect.github.io/articles/20200219/</id>
    <published>2020-02-19T01:05:30.000Z</published>
    <updated>2020-02-19T01:12:15.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP 連載</a>もいよいよ最終日です！</p><p>普段は、Terraform を使っているのですが、ふとCloud Deployment Manager を使ったことないことに気づきました。そこで、Cloud Deployment Manager について紹介したいと思います。</p><h2 id="Cloud-Deployment-Manager-とは"><a href="#Cloud-Deployment-Manager-とは" class="headerlink" title="Cloud Deployment Manager とは"></a>Cloud Deployment Manager とは</h2><p><a href="https://cloud.google.com/deployment-manager" target="_blank" rel="noopener">Cloud Deployment Manager</a> とは、GCP のリソースをYAML で宣言的に記述し、デプロイできるサービスです。要は、AWS のCloudFormation などにあたるサービスです。</p><p>ちなみにですが、Cloud Deployment Manager は、テンプレートをPython やJinja2 を使って、パラメータ化することもできます。ざっくりですが、以下にCloud Deployment Manager と似たサービスをクラウド毎に記載します。</p><table><thead><tr><th></th><th>GCP</th><th>AWS</th><th>AWS</th><th>Alibaba Cloud</th></tr></thead><tbody><tr><td>Management tools</td><td>Cloud Deployment Manager</td><td>AWS CloudFormation</td><td>Cloud Development Kit (CDK)</td><td>Resource Orchestration Service</td></tr><tr><td>Format</td><td>JSON, YAML, Python, Jinja2</td><td>JSON, YAML</td><td>TypeScript, Python, Java, C#</td><td>JSON</td></tr></tbody></table><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>事前に以下は実施済みであることを前提とします。</p><ul><li>プロジェクト作成</li><li><a href="https://cloud.google.com/sdk/docs/quickstarts?hl=ja" target="_blank" rel="noopener">gcloud</a> コマンドが使える状態</li></ul><p>まず、Deployment Manager のAPI を有効化し、次にgcloud コマンドでログインし、プロジェクトを指定します。<br>[MY_PROJECT]にあらかじめ作成したプロジェクトのID を指定します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud auth login</span><br><span class="line">$ gcloud config <span class="built_in">set</span> project [MY_PROJECT]</span><br></pre></td></tr></table></figure><h2 id="Cloud-Deployment-Manager-事始め"><a href="#Cloud-Deployment-Manager-事始め" class="headerlink" title="Cloud Deployment Manager 事始め"></a>Cloud Deployment Manager 事始め</h2><p>まずは、GCE を作成して慣れてみたいと思います。</p><h3 id="定義ファイルの作成"><a href="#定義ファイルの作成" class="headerlink" title="定義ファイルの作成"></a>定義ファイルの作成</h3><p>YAML でリソースを定義します。</p><figure class="highlight yaml"><figcaption><span>vm.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">compute.v1.instance</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">test-vm</span></span><br><span class="line"><span class="attr">  properties:</span></span><br><span class="line"><span class="attr">    zone:</span> <span class="string">asia-northeast1-a</span></span><br><span class="line"><span class="attr">    machineType:</span> <span class="attr">https://www.googleapis.com/compute/v1/projects/[MY_PROJECT]/zones/asia-northeast1-a/machineTypes/f1-micro</span></span><br><span class="line"><span class="attr">    disks:</span></span><br><span class="line"><span class="attr">    - deviceName:</span> <span class="string">boot</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">PERSISTENT</span></span><br><span class="line"><span class="attr">      boot:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      autoDelete:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      initializeParams:</span></span><br><span class="line"><span class="attr">        sourceImage:</span> <span class="attr">https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/family/debian-9</span></span><br><span class="line"><span class="attr">    networkInterfaces:</span></span><br><span class="line"><span class="attr">    - network:</span> <span class="attr">https://www.googleapis.com/compute/v1/projects/[MY_PROJECT]/global/networks/default</span></span><br><span class="line"><span class="attr">      accessConfigs:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">External</span> <span class="string">NAT</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">ONE_TO_ONE_NAT</span></span><br></pre></td></tr></table></figure><p>定義ファイルの設定内容を以下に記載します。</p><ul><li>name: インスタンス名を指定</li><li>zone: 作成するゾーンを指定</li><li>machineType: インスタンスタイプを指定</li></ul><p>また、[MY_PROJECT]は、作成したプロジェクトのID を指定します。</p><h3 id="リソースのデプロイ"><a href="#リソースのデプロイ" class="headerlink" title="リソースのデプロイ"></a>リソースのデプロイ</h3><p>リソースのデプロイは、<code>gcloud</code>をコマンドを使用してデプロイします。</p><p>まずは、プレビューで作成したいと思います。プレビューを指定すると作成や更新前にどのような変化をもたらすかを確認することができます。要は、dry-run 的な用途で使えるオプションです。</p><h4 id="コマンドの構成について"><a href="#コマンドの構成について" class="headerlink" title="コマンドの構成について"></a>コマンドの構成について</h4><p>コマンドの構成について以下に記載します。<br>詳細は、<a href="https://cloud.google.com/sdk/gcloud/reference/deployment-manager/deployments" target="_blank" rel="noopener">こちら</a>を参考にしてください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deployment-manager deployments COMMAND DEPLOYMENT_NAME --config [FILE_PATH] --preview</span><br></pre></td></tr></table></figure><ul><li>COMMAND: create, delete, update などを指定</li><li>DEPLOYMENT_NAME: デプロイの名前を指定（任意の名前）</li><li>FILE_PATH: 先ほど作成したリソース定義ファイルのパスを指定</li><li>–preview: dry-run 的に実行したい時に指定</li></ul><p>それでは実際に<a href="https://cloud.google.com/sdk/gcloud/reference/deployment-manager/deployments/create" target="_blank" rel="noopener">create</a>コマンドを実行したいと思います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deployment-manager deployments create <span class="built_in">test</span> --config vm.yaml --preview</span><br><span class="line">The fingerprint of the deployment is xxx</span><br><span class="line">Waiting <span class="keyword">for</span> create [xxx]...<span class="keyword">done</span>.</span><br><span class="line">Create operation xxx completed successfully.</span><br><span class="line">NAME     TYPE                 STATE       ERRORS  INTENT</span><br><span class="line"><span class="built_in">test</span>-vm  compute.v1.instance  IN_PREVIEW  []      CREATE_OR_ACQUIRE</span><br></pre></td></tr></table></figure><p>実行結果のステータスが、<code>IN_PREVIEW</code>であることからプレビュー状態であることがわかります。<br>プレビュー実行後にブラウザで確認すると以下のように構成などを確認することができます。</p><img src="/images/20200219/photo_20200219_01.png"><p>ブラウザ上からデプロイすることも可能ですが、<code>gcloud</code>コマンドから実行したいと思います。<br><a href="https://cloud.google.com/sdk/gcloud/reference/deployment-manager/deployments/update" target="_blank" rel="noopener">update</a>を指定し、<code>DEPLOYMENT_NAME</code>を指定します（ここではtest）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deployment-manager deployments update <span class="built_in">test</span></span><br><span class="line">The fingerprint of the deployment is xxx==</span><br><span class="line">Waiting <span class="keyword">for</span> update [xxx]...<span class="keyword">done</span>.</span><br><span class="line">Update operation xxx completed successfully.</span><br><span class="line">NAME     TYPE                 STATE      ERRORS  INTENT</span><br><span class="line"><span class="built_in">test</span>-vm  compute.v1.instance  COMPLETED  []</span><br></pre></td></tr></table></figure><p>実行結果から先ほどまでは<code>IN_PREVIEW</code>だったが、<code>COMPLETED</code>に変わっていることがわかります。</p><p>また、以下のブラウザからもプレビューからデプロイに変わっていることがわかります。</p><p>実際に、GCE コンソールに遷移すると作成されていることが確認できます。</p><img src="/images/20200219/photo_20200219_02.png"><p>その他のコマンドを紹介したいと思います。<br><a href="https://cloud.google.com/sdk/gcloud/reference/deployment-manager/deployments/list" target="_blank" rel="noopener">list</a>コマンドでデプロイの一覧を表示することができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deployment-manager deployments list</span><br><span class="line">NAME  LAST_OPERATION_TYPE  STATUS  DESCRIPTION  MANIFEST  ERRORS</span><br><span class="line"><span class="built_in">test</span>  preview              DONE                           []</span><br></pre></td></tr></table></figure><p><a href="https://cloud.google.com/sdk/gcloud/reference/deployment-manager/deployments/describe" target="_blank" rel="noopener">describe</a>コマンドでデプロイの詳細情報を確認することができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deployment-manager deployments describe <span class="built_in">test</span></span><br><span class="line">---</span><br><span class="line">fingerprint: xxx==</span><br><span class="line">id: <span class="string">'xxx'</span></span><br><span class="line">insertTime: <span class="string">'xxx'</span></span><br><span class="line">manifest: manifest-xxx</span><br><span class="line">name: <span class="built_in">test</span></span><br><span class="line">operation:</span><br><span class="line">  endTime: <span class="string">'xxx'</span></span><br><span class="line">  name: xxx</span><br><span class="line">  operationType: update</span><br><span class="line">  progress: 100</span><br><span class="line">  startTime: <span class="string">'xxx'</span></span><br><span class="line">  status: DONE</span><br><span class="line">  user: xxx</span><br><span class="line">NAME     TYPE                 STATE      INT</span><br><span class="line"><span class="built_in">test</span>-vm  compute.v1.instance  COMPLETED</span><br></pre></td></tr></table></figure><p>もし、デプロイを削除したい場合は、<a href="https://cloud.google.com/sdk/gcloud/reference/deployment-manager/deployments/delete" target="_blank" rel="noopener">delete</a>コマンドを使用します。<br><code>Do you want to continue (y/N)?</code>は、<code>y</code>と入力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deployment-manager deployments delete <span class="built_in">test</span></span><br><span class="line">The following deployments will be deleted:</span><br><span class="line">- <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">Do you want to <span class="built_in">continue</span> (y/N)?  y</span><br><span class="line"></span><br><span class="line">Waiting <span class="keyword">for</span> delete [xxx]...<span class="keyword">done</span>.</span><br><span class="line">Delete operation xxx completed successfully.</span><br></pre></td></tr></table></figure><p>これでGCE の作成から削除までの一連の操作を行いました。</p><h2 id="複数のVM-インスタンスを作成"><a href="#複数のVM-インスタンスを作成" class="headerlink" title="複数のVM インスタンスを作成"></a>複数のVM インスタンスを作成</h2><p>先ほど作成した定義ファイルを複製するかたちで作成します。<br>ファイル名は、<code>vms.yaml</code>とします。</p><figure class="highlight yaml"><figcaption><span>vms.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">compute.v1.instance</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">test-vm-01</span></span><br><span class="line"><span class="attr">  properties:</span></span><br><span class="line"><span class="attr">    zone:</span> <span class="string">asia-northeast1-a</span></span><br><span class="line"><span class="attr">    machineType:</span> <span class="attr">https://www.googleapis.com/compute/v1/projects/[MY_PROJECT]/zones/asia-northeast1-a/machineTypes/f1-micro</span></span><br><span class="line"><span class="attr">    disks:</span></span><br><span class="line"><span class="attr">    - deviceName:</span> <span class="string">boot</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">PERSISTENT</span></span><br><span class="line"><span class="attr">      boot:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      autoDelete:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      initializeParams:</span></span><br><span class="line"><span class="attr">        sourceImage:</span> <span class="attr">https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/family/debian-9</span></span><br><span class="line"><span class="attr">    networkInterfaces:</span></span><br><span class="line"><span class="attr">    - network:</span> <span class="attr">https://www.googleapis.com/compute/v1/projects/[MY_PROJECT]/global/networks/default</span></span><br><span class="line"><span class="attr">      accessConfigs:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">External</span> <span class="string">NAT</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">ONE_TO_ONE_NAT</span></span><br><span class="line"><span class="attr">- type:</span> <span class="string">compute.v1.instance</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">test-vm-02</span></span><br><span class="line"><span class="attr">  properties:</span></span><br><span class="line"><span class="attr">    zone:</span> <span class="string">asia-northeast1-a</span></span><br><span class="line"><span class="attr">    machineType:</span> <span class="attr">https://www.googleapis.com/compute/v1/projects/[MY_PROJECT]/zones/asia-northeast1-a/machineTypes/f1-micro</span></span><br><span class="line"><span class="attr">    disks:</span></span><br><span class="line"><span class="attr">    - deviceName:</span> <span class="string">boot</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">PERSISTENT</span></span><br><span class="line"><span class="attr">      boot:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      autoDelete:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      initializeParams:</span></span><br><span class="line"><span class="attr">        sourceImage:</span> <span class="attr">https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/family/debian-9</span></span><br><span class="line"><span class="attr">    networkInterfaces:</span></span><br><span class="line"><span class="attr">    - network:</span> <span class="attr">https://www.googleapis.com/compute/v1/projects/[MY_PROJECT]/global/networks/default</span></span><br><span class="line"><span class="attr">      accessConfigs:</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">External</span> <span class="string">NAT</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">ONE_TO_ONE_NAT</span></span><br></pre></td></tr></table></figure><p><code>name</code>を01と02に分けるかたちでVM を2台分の定義を記述し、デプロイします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deployment-manager deployments create <span class="built_in">test</span>-vms --config vms.yaml</span><br><span class="line">The fingerprint of the deployment is xxx==</span><br><span class="line">Waiting <span class="keyword">for</span> create [xxx]...<span class="keyword">done</span>.</span><br><span class="line">Create operation xxx completed successfully.</span><br><span class="line">NAME        TYPE                 STATE      ERRORS  INTENT</span><br><span class="line"><span class="built_in">test</span>-vm-01  compute.v1.instance  COMPLETED  []</span><br><span class="line"><span class="built_in">test</span>-vm-02  compute.v1.instance  COMPLETED  []</span><br></pre></td></tr></table></figure><p>デプロイ後、ブラウザでも2台作成されていることがわかります。</p><img src="/images/20200219/photo_20200219_03.png"><p>このようにYAML で定義ファイルを書いて作成することができることがわかりました。<br>しかし、このような書き方では冗長さを感じてしまいますね。<br>次は、再利用性を高めるためのテンプレートを紹介します。</p><h2 id="テンプレートを利用する"><a href="#テンプレートを利用する" class="headerlink" title="テンプレートを利用する"></a>テンプレートを利用する</h2><p>テンプレートを利用するとリソースを定義したファイルを独立させて再利用性を高めることができます。テンプレートを作成するには、<font color="DeepSkyBlue">Python</font>や<font color="DeepSkyBlue">Jinja2</font>を使用することができます。Pythonを使用する場合は、Python 3.x で作成する必要があります（公式ドキュメントの日本語サイトだとPython 2.7 と記載がありますが、英語サイトだとPython 3.x と記載があるので注意）</p><h3 id="テンプレートの作成"><a href="#テンプレートの作成" class="headerlink" title="テンプレートの作成"></a>テンプレートの作成</h3><p>今回もGCE 2台作成し、合わせてファイアウォールの設定なども行いたいと思います。<br>以下のファイルを準備します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── firewall_template.py</span><br><span class="line">├── gce_template.py</span><br><span class="line">├── network_template.py</span><br><span class="line">├── vm_template.py</span><br><span class="line">└── vms.yaml</span><br></pre></td></tr></table></figure><h3 id="環境変数とプロパティについて"><a href="#環境変数とプロパティについて" class="headerlink" title="環境変数とプロパティについて"></a>環境変数とプロパティについて</h3><p>テンプレートのプロパティは、任意の変数を表します。<br>例えば以下のように変数を指定することができます。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.properties[<span class="string">'zone'</span>],</span><br></pre></td></tr></table></figure><p>また、デプロイメント固有の環境変数を指定することもできます。<br>環境変数の呼び出し方は、以下の構文を使用することでプロジェクトID を取得します。<br>詳細な環境変数については、<a href="https://cloud.google.com/deployment-manager/docs/configuration/templates/use-environment-variables?hl=ja" target="_blank" rel="noopener">こちら</a>を参考にしてください。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ontext.env[<span class="string">'project'</span>]</span><br></pre></td></tr></table></figure><p>VM インスタンスを定義します。</p><figure class="highlight python"><figcaption><span>vm_template.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">COMPUTE_URL_BASE = <span class="string">'https://www.googleapis.com/compute/v1/'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GenerateConfig</span><span class="params">(context)</span>:</span></span><br><span class="line">  resources = [&#123;</span><br><span class="line">      <span class="string">'name'</span>: context.env[<span class="string">'name'</span>],</span><br><span class="line">      <span class="string">'type'</span>: <span class="string">'compute.v1.instance'</span>,</span><br><span class="line">      <span class="string">'properties'</span>: &#123;</span><br><span class="line">          <span class="string">'zone'</span>: context.properties[<span class="string">'zone'</span>],</span><br><span class="line">          <span class="string">'machineType'</span>: <span class="string">''</span>.join([COMPUTE_URL_BASE, <span class="string">'projects/'</span>,</span><br><span class="line">                                  context.env[<span class="string">'project'</span>], <span class="string">'/zones/'</span>,</span><br><span class="line">                                  context.properties[<span class="string">'zone'</span>], <span class="string">'/machineTypes/'</span>,</span><br><span class="line">                                  context.properties[<span class="string">'machineType'</span>]]),</span><br><span class="line">          <span class="string">'disks'</span>: [&#123;</span><br><span class="line">              <span class="string">'deviceName'</span>: <span class="string">'boot'</span>,</span><br><span class="line">              <span class="string">'type'</span>: <span class="string">'PERSISTENT'</span>,</span><br><span class="line">              <span class="string">'boot'</span>: <span class="literal">True</span>,</span><br><span class="line">              <span class="string">'autoDelete'</span>: <span class="literal">True</span>,</span><br><span class="line">              <span class="string">'initializeParams'</span>: &#123;</span><br><span class="line">                  <span class="string">'sourceImage'</span>: <span class="string">''</span>.join([COMPUTE_URL_BASE, <span class="string">'projects/'</span>,</span><br><span class="line">                                          <span class="string">'debian-cloud/global/'</span>,</span><br><span class="line">                                          <span class="string">'images/family/debian-9'</span>])</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;],</span><br><span class="line">          <span class="string">'networkInterfaces'</span>: [&#123;</span><br><span class="line">              <span class="string">'network'</span>: <span class="string">'$(ref.'</span> + context.properties[<span class="string">'network'</span>]</span><br><span class="line">                         + <span class="string">'.selfLink)'</span>,</span><br><span class="line">              <span class="string">'accessConfigs'</span>: [&#123;</span><br><span class="line">                  <span class="string">'name'</span>: <span class="string">'External NAT'</span>,</span><br><span class="line">                  <span class="string">'type'</span>: <span class="string">'ONE_TO_ONE_NAT'</span></span><br><span class="line">              &#125;]</span><br><span class="line">          &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="string">'resources'</span>: resources&#125;</span><br></pre></td></tr></table></figure><p>ネットワークを定義します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def GenerateConfig(context):</span><br><span class="line">  resources = [&#123;</span><br><span class="line">      &apos;name&apos;: context.env[&apos;name&apos;],</span><br><span class="line">      &apos;type&apos;: &apos;compute.v1.network&apos;,</span><br><span class="line">      &apos;properties&apos;: &#123;</span><br><span class="line">          &apos;routingConfig&apos;: &#123;</span><br><span class="line">              &apos;routingMode&apos;: &apos;REGIONAL&apos;</span><br><span class="line">          &#125;,</span><br><span class="line">          &apos;autoCreateSubnetworks&apos;: True</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">  return &#123;&apos;resources&apos;: resources&#125;</span><br></pre></td></tr></table></figure><p>ファイアウォールを定義します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def GenerateConfig(context):</span><br><span class="line">  resources = [&#123;</span><br><span class="line">      &apos;name&apos;: context.env[&apos;name&apos;],</span><br><span class="line">      &apos;type&apos;: &apos;compute.v1.firewall&apos;,</span><br><span class="line">      &apos;properties&apos;: &#123;</span><br><span class="line">          &apos;network&apos;: &apos;$(ref.&apos; + context.properties[&apos;network&apos;] + &apos;.selfLink)&apos;,</span><br><span class="line">          &apos;sourceRanges&apos;: [&apos;0.0.0.0/0&apos;],</span><br><span class="line">          &apos;allowed&apos;: [&#123;</span><br><span class="line">              &apos;IPProtocol&apos;: &apos;TCP&apos;,</span><br><span class="line">              &apos;ports&apos;: [80]</span><br><span class="line">          &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">  return &#123;&apos;resources&apos;: resources&#125;</span><br></pre></td></tr></table></figure><p>ここで上記のテンプレートに指定する変数の定義を作成します。</p><figure class="highlight python"><figcaption><span>gce_template.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">NETWORK_NAME = <span class="string">'test-network'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GenerateConfig</span><span class="params">(unused_context)</span>:</span></span><br><span class="line">  resources = [&#123;</span><br><span class="line">      <span class="string">'name'</span>: <span class="string">'test-vm-01'</span>,</span><br><span class="line">      <span class="string">'type'</span>: <span class="string">'vm_template.py'</span>,</span><br><span class="line">      <span class="string">'properties'</span>: &#123;</span><br><span class="line">          <span class="string">'machineType'</span>: <span class="string">'f1-micro'</span>,</span><br><span class="line">          <span class="string">'zone'</span>: <span class="string">'asia-northeast1-a'</span>,</span><br><span class="line">          <span class="string">'network'</span>: NETWORK_NAME</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">      <span class="string">'name'</span>: <span class="string">'test-vm-02'</span>,</span><br><span class="line">      <span class="string">'type'</span>: <span class="string">'vm_template.py'</span>,</span><br><span class="line">      <span class="string">'properties'</span>: &#123;</span><br><span class="line">          <span class="string">'machineType'</span>: <span class="string">'g1-small'</span>,</span><br><span class="line">          <span class="string">'zone'</span>: <span class="string">'asia-northeast1-a'</span>,</span><br><span class="line">          <span class="string">'network'</span>: NETWORK_NAME</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">      <span class="string">'name'</span>: NETWORK_NAME,</span><br><span class="line">      <span class="string">'type'</span>: <span class="string">'network_template.py'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">      <span class="string">'name'</span>: NETWORK_NAME + <span class="string">'-firewall'</span>,</span><br><span class="line">      <span class="string">'type'</span>: <span class="string">'firewall_template.py'</span>,</span><br><span class="line">      <span class="string">'properties'</span>: &#123;</span><br><span class="line">          <span class="string">'network'</span>: NETWORK_NAME</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="string">'resources'</span>: resources&#125;</span><br></pre></td></tr></table></figure><p>最後にテンプレートをインポートするための定義ファイルを作成します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">imports:</span><br><span class="line">- path: vm_template.py</span><br><span class="line">- path: network_template.py</span><br><span class="line">- path: firewall_template.py</span><br><span class="line">- path: gce_template.py</span><br><span class="line"></span><br><span class="line">resources:</span><br><span class="line">- name: gce-setup</span><br><span class="line">  type: gce_template.py</span><br></pre></td></tr></table></figure><h3 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h3><p>実行方法は、今まで変わらず<code>gcloud</code> コマンドから実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deployment-manager deployments create <span class="built_in">test</span>-templates --config vms.yaml</span><br><span class="line">The fingerprint of the deployment is xxx==</span><br><span class="line">Waiting <span class="keyword">for</span> update [xxxx]...<span class="keyword">done</span>.</span><br><span class="line">Update operation xxx completed successfully.</span><br><span class="line">NAME                   TYPE                 STATE      ERRORS  INTENT</span><br><span class="line"><span class="built_in">test</span>-network           compute.v1.network   COMPLETED  []</span><br><span class="line"><span class="built_in">test</span>-network-firewall  compute.v1.firewall  COMPLETED  []</span><br><span class="line"><span class="built_in">test</span>-vm-01             compute.v1.instance  COMPLETED  []</span><br><span class="line"><span class="built_in">test</span>-vm-02             compute.v1.instance  COMPLETED  []</span><br></pre></td></tr></table></figure><p>ブラウザ上でもデプロイされていることが確認できます。</p><img src="/images/20200219/photo_20200219_04.png"><h2 id="エラーメモ"><a href="#エラーメモ" class="headerlink" title="エラーメモ"></a>エラーメモ</h2><p>gcloud コマンドからデプロイした際に何かしらのエラーが発生したとします。コード修正後に以下のように再度<font color="LightCoral">“create”</font>を実行すると<font color="LightCoral">“already exists and cannot be created”</font>というエラーが発生します。</p><p>原因は、失敗したとしても中途半端にデプロイは作られてしまうため、既にあるといったエラーが発生します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deployment-manager deployments create <span class="built_in">test</span>-templates --config vms.yaml</span><br><span class="line">ERROR: (gcloud.deployment-manager.deployments.create) ResponseError: code=409, message=<span class="string">'projects/xxx/global/deployments/test-templates'</span> already exists and cannot be created.</span><br></pre></td></tr></table></figure><p>それでは、どのように解消するかというと以下のように<font color="LightCoral">“update”</font>を使用します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud deployment-manager deployments update <span class="built_in">test</span>-templates --config vms.yaml</span><br></pre></td></tr></table></figure><p>この中途半端に作成されるのは解消されて欲しいですね。。</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>GCP リソースをPython で操れることで、自由度の高いテンプレートを作成できる点は面白いと思いました。<br>また、Terraform は、tfstate というファイルをGCS やS3 に保存する必要があるので、アクセス権限や同時実行などを気にする必要がありますが、CloudFormation 同様に状態管理は、GCP 側でよしなにやってもらえるのもメリットだと感じました。</p><p>ただ、Google 自体は<a href="https://github.com/GoogleCloudPlatform/terraformer" target="_blank" rel="noopener">Terraformer</a>などのツールを作成していることから割とTerraform 推しなのでは？と感じるところもあります（個人的見解）<br>なので、個人的には、GCP だけでなくAWS や、最近ではAlibaba Cloud などのクラウドを利用する機会が多いので、Terraform 一択になってしまうのが本音です。<br>とはいえ、今回のように触れたことのないサービスを使ってみるのも新たな知見として楽しめるので、今後もいろいろ触れていきたいと思います。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://cloud.google.com/deployment-manager/docs?hl=en" target="_blank" rel="noopener">Google Cloud Deployment Manager documentation</a><br><a href="https://cloud.google.com/sdk/gcloud/reference/deployment-manager" target="_blank" rel="noopener">gcloud deployment-manager</a><br><a href="https://github.com/GoogleCloudPlatform/deploymentmanager-samples" target="_blank" rel="noopener">deploymentmanager-samples</a><br><a href="https://cloud.google.com/deployment-manager/docs/configuration/templates/use-environment-variables?hl=ja" target="_blank" rel="noopener">環境変数</a><br><a href="https://cloud.google.com/deployment-manager/docs/configuration/supported-resource-types?hl=en" target="_blank" rel="noopener">サポートしているリソースタイプ</a></p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a></li><li><a href="https://future-architect.github.io/articles/20190903/">Terraformのベストなプラクティスってなんだろうか</a></li><li><a href="https://future-architect.github.io/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/tags/GCP%E9%80%A3%
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>GCP連載#9 初めてのGCP 画像AI(Vision API)をさわってみた</title>
    <link href="https://future-architect.github.io/articles/20200218/"/>
    <id>https://future-architect.github.io/articles/20200218/</id>
    <published>2020-02-18T01:16:55.000Z</published>
    <updated>2020-03-11T00:50:55.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXチームの村瀬です。</p><p>今回は<a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a>の9日目です。私個人としてはGCPはほとんど利用したことがないので、せっかくだから面白そうなことを試してみようと思い、画像AIのサービスであるVision APIについて試してみることにしました。</p><h1 id="Vision-APIとは"><a href="#Vision-APIとは" class="headerlink" title="Vision APIとは"></a>Vision APIとは</h1><blockquote><p>Google Cloud の Vision API は REST API や RPC API を使用して強力な事前トレーニング済みの機械学習モデルを提供します。画像にラベルを割り当てることで、事前定義済みの数百万のカテゴリに画像を高速で分類できます。オブジェクトや顔を検出し、印刷テキストや手書き入力を読み取り、有用なメタデータを画像カタログに作成します。<br><a href="https://cloud.google.com/vision" target="_blank" rel="noopener">https://cloud.google.com/vision</a></p></blockquote><p>Google Cloudの公式ページによりますと事前トレーニング済みの機械学習モデルを利用してラベルの割り当てやOCRとしてすぐに利用できるようですね。</p><p>機能(検出のタイプ)としては以下のものがあります。</p><table><thead><tr><th>Feature Type</th><th>Description</th></tr></thead><tbody><tr><td>Face detection</td><td>顔の検出</td></tr><tr><td>Landmark detection</td><td>ランドマークの検出</td></tr><tr><td>Logo detection</td><td>ロゴの検出</td></tr><tr><td>Label detection</td><td>ラベル検出</td></tr><tr><td>Text detection</td><td>光学式文字認識（OCR）</td></tr><tr><td>Document text detection (dense text / handwriting)</td><td>PDF/TIFF ドキュメント テキスト検出</td></tr><tr><td>Image properties</td><td>画像プロパティの検出</td></tr><tr><td>Object localization</td><td>複数のオブジェクトを検出する</td></tr><tr><td>Crop hint detection</td><td>クロップヒントの実行</td></tr><tr><td>Web entities and pages</td><td>ウェブ エンティティおよびページの検出</td></tr><tr><td>Explicit content detection (Safe Search)</td><td>セーフサーチ プロパティの検出</td></tr></tbody></table><p>詳細は公式ページを参照ください。<br><a href="https://cloud.google.com/vision/docs/features-list?hl=ja" target="_blank" rel="noopener">https://cloud.google.com/vision/docs/features-list?hl=ja</a></p><h2 id="料金"><a href="#料金" class="headerlink" title="料金"></a>料金</h2><p>無料枠があり、最初の1,000ユニット/月は無料。それを越した場合でも1,000ユニットあたり$1.50。なんと太っ腹！</p><p>詳細は公式ページを参照ください。<br><a href="https://cloud.google.com/vision/pricing?hl=ja" target="_blank" rel="noopener">https://cloud.google.com/vision/pricing?hl=ja</a></p><h1 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h1><h2 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h2><img src="/images/20200218/photo_20200218_01.png" class="img-middle-size"><p>プロジェクト名を入力し作成ボタンをクリック</p><h2 id="Cloud-Vision-APIの有効化"><a href="#Cloud-Vision-APIの有効化" class="headerlink" title="Cloud Vision APIの有効化"></a>Cloud Vision APIの有効化</h2><img src="/images/20200218/photo_20200218_02.png" class="img-middle-size"><p>Cloud Vision APIの画面に移動して有効にするボタンをクリック<br><a href="https://cloud.google.com/vision/docs/before-you-begin" target="_blank" rel="noopener">https://cloud.google.com/vision/docs/before-you-begin</a></p><h2 id="APIキーを作成"><a href="#APIキーを作成" class="headerlink" title="APIキーを作成"></a>APIキーを作成</h2><img src="/images/20200218/photo_20200218_03.png" class="img-middle-size"><p>APIとサービスの画面に移動して認証情報を作成からAPIキーを選択してクリック</p><img src="/images/20200218/photo_20200218_04.png" class="img-middle-size"><p>これでAPIキーが作成されました。<br>後ほどこのAPIキーを利用します。</p><p>事前準備はこれで完了です。</p><h1 id="APIをコールしてみる"><a href="#APIをコールしてみる" class="headerlink" title="APIをコールしてみる"></a>APIをコールしてみる</h1><p>バリエーション豊かな機能がありますが、今回はLabel detection(ラベル検出)とText detection(光学式文字認識（OCR）)を試してみます。</p><h2 id="Label-detection-ラベル検出"><a href="#Label-detection-ラベル検出" class="headerlink" title="Label detection(ラベル検出)"></a>Label detection(ラベル検出)</h2><p>まずは、Label detection。Futureの<a href="https://www.future.co.jp/recruit/career/job/engineer/" target="_blank" rel="noopener">キャリア採用ページ</a>にある、つよつよエンジニア渋川の<a href="https://www.future.co.jp/recruit/common/img/member/er_popup_14_pc.jpg" target="_blank" rel="noopener">画像</a>を利用してどのようなラベルが検出がされるか見てみましょう。今回の検証では改めて説明する必要はないと思いますがお手軽万能HTTPアクセスツールcURLを利用します。</p><img src="/images/20200218/photo_20200218_05.jpeg" class="img-middle-size"><p>keyの項目に先ほど取得したAPIキーを設定します。</p><figure class="highlight sh"><figcaption><span>Request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">'Content-Type:application/json'</span> -d <span class="string">'&#123;"requests":[&#123;"image":&#123;"source":&#123;"imageUri":"https://www.future.co.jp/recruit/common/img/member/er_popup_14_pc.jpg"&#125;&#125;,"features":[&#123;"type":"LABEL_DETECTION","maxResults":10,"model":"builtin/stable"&#125;],"imageContext":&#123;"languageHints":[]&#125;&#125;]&#125;'</span> https://vision.googleapis.com/v1/images:annotate?key=xxxxxxxxxxx</span><br></pre></td></tr></table></figure><p>リクエストのJSONを整形するとこんな感じ</p><figure class="highlight json"><figcaption><span>json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"requests"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"image"</span>: &#123;</span><br><span class="line"><span class="attr">"source"</span>: &#123;</span><br><span class="line"><span class="attr">"imageUri"</span>: <span class="string">"https://www.future.co.jp/recruit/common/img/member/er_popup_14_pc.jpg"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"features"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"LABEL_DETECTION"</span>,</span><br><span class="line"><span class="attr">"maxResults"</span>: <span class="number">10</span>,</span><br><span class="line"><span class="attr">"model"</span>: <span class="string">"builtin/stable"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"imageContext"</span>: &#123;</span><br><span class="line"><span class="attr">"languageHints"</span>: []</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>レスポンスは以下の通りJSON形式で返却されます。</p><figure class="highlight json"><figcaption><span>Response</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"responses"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"labelAnnotations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"mid"</span>: <span class="string">"/m/015c4z"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"Sitting"</span>,</span><br><span class="line">          <span class="attr">"score"</span>: <span class="number">0.84581405</span>,</span><br><span class="line">          <span class="attr">"topicality"</span>: <span class="number">0.84581405</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"mid"</span>: <span class="string">"/m/0dzf4"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"Arm"</span>,</span><br><span class="line">          <span class="attr">"score"</span>: <span class="number">0.82127464</span>,</span><br><span class="line">          <span class="attr">"topicality"</span>: <span class="number">0.82127464</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"mid"</span>: <span class="string">"/m/0c_jw"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"Furniture"</span>,</span><br><span class="line">          <span class="attr">"score"</span>: <span class="number">0.7518786</span>,</span><br><span class="line">          <span class="attr">"topicality"</span>: <span class="number">0.7518786</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"mid"</span>: <span class="string">"/m/01kq3x"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"White-collar worker"</span>,</span><br><span class="line">          <span class="attr">"score"</span>: <span class="number">0.74684197</span>,</span><br><span class="line">          <span class="attr">"topicality"</span>: <span class="number">0.74684197</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"mid"</span>: <span class="string">"/m/0dzd8"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"Neck"</span>,</span><br><span class="line">          <span class="attr">"score"</span>: <span class="number">0.7371684</span>,</span><br><span class="line">          <span class="attr">"topicality"</span>: <span class="number">0.7371684</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"mid"</span>: <span class="string">"/m/019nj4"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"Smile"</span>,</span><br><span class="line">          <span class="attr">"score"</span>: <span class="number">0.6944891</span>,</span><br><span class="line">          <span class="attr">"topicality"</span>: <span class="number">0.6944891</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"mid"</span>: <span class="string">"/m/0dnr7"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"Textile"</span>,</span><br><span class="line">          <span class="attr">"score"</span>: <span class="number">0.6563325</span>,</span><br><span class="line">          <span class="attr">"topicality"</span>: <span class="number">0.6563325</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"mid"</span>: <span class="string">"/m/05wkw"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"Photography"</span>,</span><br><span class="line">          <span class="attr">"score"</span>: <span class="number">0.62422496</span>,</span><br><span class="line">          <span class="attr">"topicality"</span>: <span class="number">0.62422496</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"mid"</span>: <span class="string">"/m/08xgn7"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"Comfort"</span>,</span><br><span class="line">          <span class="attr">"score"</span>: <span class="number">0.55251026</span>,</span><br><span class="line">          <span class="attr">"topicality"</span>: <span class="number">0.55251026</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"mid"</span>: <span class="string">"/m/02crq1"</span>,</span><br><span class="line">          <span class="attr">"description"</span>: <span class="string">"Couch"</span>,</span><br><span class="line">          <span class="attr">"score"</span>: <span class="number">0.5395869</span>,</span><br><span class="line">          <span class="attr">"topicality"</span>: <span class="number">0.5395869</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>descriptionだけ抜き出して整理すると</p><table><thead><tr><th>description</th><th>日本語</th></tr></thead><tbody><tr><td>Sitting</td><td>座っている</td></tr><tr><td>Arm</td><td>腕</td></tr><tr><td>Furniture</td><td>家具</td></tr><tr><td>White-collar worker</td><td>サラリーマン</td></tr><tr><td>Neck</td><td>首</td></tr><tr><td>Smile</td><td>ほほえみ</td></tr><tr><td>Textile</td><td>織物</td></tr><tr><td>Photography</td><td>写真撮影</td></tr><tr><td>Comfort</td><td>快適さ</td></tr><tr><td>Couch</td><td>ソファー</td></tr></tbody></table><p>当たり前と言えば当たり前なのですが、画像から連想される説明が返却されてます。<br>サラリーマンが快適にソファーに座っていてほほえんでおり、首や腕、ソファーの繊維も映っていますね。</p><h2 id="Text-detection-光学式文字認識（OCR）"><a href="#Text-detection-光学式文字認識（OCR）" class="headerlink" title="Text detection(光学式文字認識（OCR）)"></a>Text detection(光学式文字認識（OCR）)</h2><p>続いてText detection。渋川の<a href="https://www.future.co.jp/recruit/common/img/member/chart_14_pc.png" target="_blank" rel="noopener">スペックのレーダーチャート</a>を解析してみましょう。</p><img src="/images/20200218/photo_20200218_06.png" class="img-middle-size"><figure class="highlight sh"><figcaption><span>Request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H <span class="string">'Content-Type:application/json'</span> -d <span class="string">'&#123;"requests":[&#123;"image":&#123;"source":&#123;"imageUri":"https://www.future.co.jp/recruit/common/img/member/chart_14_pc.png"&#125;&#125;,"features":[&#123;"type":"TEXT_DETECTION"&#125;]&#125;]&#125;'</span> https://vision.googleapis.com/v1/images:annotate?key=xxxxxxxxxxx</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;responses&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;textAnnotations&quot;: [</span><br><span class="line">      &quot;～～　中略　～～&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;text&quot;: &quot;コミュケーションカ\nメイタリティ\n画性\n5.\n3\n4\n5.\nインライン\nスケート\nメタ学習法\nオタク度\nLO\n&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析したワードを整理すると</p><table><thead><tr><th>text</th></tr></thead><tbody><tr><td>コミュケーションカ</td></tr><tr><td>メイタリティ</td></tr><tr><td>画性</td></tr><tr><td>5</td></tr><tr><td>3</td></tr><tr><td>4</td></tr><tr><td>5</td></tr><tr><td>インラインスケート</td></tr><tr><td>メタ学習法オタク度</td></tr></tbody></table><p>一部の文字はレーダーチャートの線と重なって別の文字として認識されてしまったり、読み込めなかったりしていますが(目的にもよりますが)十分な精度かと思います。</p><p>画像AIってすごいですね。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>機械学習と聞くと利用できるようにするのにトレーニングが必要で、ある種の車輪の再発明に近い作業が必要になり、コストと時間が掛かるものと思っていたのですが、事前トレーニング済みの機械学習モデルが安価にお手軽に利用できてとても便利ですね。様々な検出のタイプがあり、(当たり前ではありますが)適切なタイプを選ぶ必要があるのでそこさえ間違えなければ多種多様なニーズに応えられる素晴らしいAPIかと思います。Vision APIのすばらしさを実感できる検証となりました。</p><p>今回は検証目的でプロジェクトを作成したのでプロジェクトを削除して完了です。</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a></li><li><a href="https://future-architect.github.io/articles/20190903/">Terraformのベストなプラクティスってなんだろうか</a></li><li><a href="https://future-architect.github.io/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXチームの村瀬です。&lt;/p&gt;
&lt;p&gt;今回は&lt;a href=&quot;https://future-archit
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>GCP連載#8 gcloud compute sshじゃなくてsshコマンドを使いたいあなたへ</title>
    <link href="https://future-architect.github.io/articles/20200217/"/>
    <id>https://future-architect.github.io/articles/20200217/</id>
    <published>2020-02-17T01:56:29.000Z</published>
    <updated>2020-03-11T00:50:52.877Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a>の8日目です。</p><p>いきなりですが、 <code>gcloud compute ssh</code>コマンドは便利ですよね。 </p><p>ssh先のGCEインスタンスとクライアント間で、キーペア(秘密鍵/公開鍵)の自動生成 -&gt; GCEインスタンスへの鍵配置を自動で行ってくれて、ユーザーは鍵の存在を意識することなくsshできるコマンドですが、<code>gcloud compute ssh</code>コマンドじゃなくて、素のsshコマンドでGCEインスタンスにsshしたい、という方もいらっしゃるのではないでしょうか。</p><p>例えば、以下のケース(あれ、少ない…)</p><ul><li>使い慣れたsshクライアント(TeraTerm等)を使ってsshしたい</li><li>VScodeのsshプラグイン(便利ですよね)を使ってリモートサーバー上のファイルを編集したい</li></ul><p>そんな方は、きっと <code>~/.ssh</code> 配下に生成された秘密鍵( <code>google_compute_engine</code>) とホスト情報を <code>~/.ssh/config</code> に手動で追加されていることでしょう。</p><p>ただ、対象のホストが多くなると都度configを更新するのは大変ですよね。実はこのconfigへの追加、 <code>gcloud compute config-ssh</code>コマンドを使えば 自動でやってくれますよ! (<strong>本題</strong>)</p><h2 id="やってみる"><a href="#やってみる" class="headerlink" title="やってみる"></a>やってみる</h2><p>まずは、 <code>gcloud compute ssh</code>コマンドを使って <code>test-instance</code>にsshしてみましょう。<br>自動でキーペアを生成してくれていることがわかります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">❯ gcloud compute ssh <span class="built_in">test</span>-instance  --project <span class="built_in">test</span>-project --zone asia-northeast1<span class="_">-a</span>                                                 </span><br><span class="line">WARNING: The public SSH key file <span class="keyword">for</span> gcloud does not exist.</span><br><span class="line">WARNING: The private SSH key file <span class="keyword">for</span> gcloud does not exist.</span><br><span class="line">WARNING: You <span class="keyword">do</span> not have an SSH key <span class="keyword">for</span> gcloud.</span><br><span class="line">WARNING: SSH keygen will be executed to generate a key.</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /Users/hoge/.ssh/google_compute_engine.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /Users/hoge/.ssh/google_compute_engine.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:PQXtls0bpoISsn+/u2vDpqMKBORO5VEFgEGqyJ4klcM hoge@MAC00011</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|.+o+ooo.  ..     |</span></span><br><span class="line"><span class="string">|+oo..      ..    |</span></span><br><span class="line"><span class="string">|ooE.       ..+   |</span></span><br><span class="line"><span class="string">|*o .. .  . .+ =  |</span></span><br><span class="line"><span class="string">|++.  o .S.o. o o |</span></span><br><span class="line"><span class="string">|+.. . . . ... .  |</span></span><br><span class="line"><span class="string">| o.  . . . .     |</span></span><br><span class="line"><span class="string">|   .  . o =      |</span></span><br><span class="line"><span class="string">|    ...o.***     |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string">Updating project ssh metadata...⠹Updated [https://www.googleapis.com/compute/v1/projects/test-project].</span></span><br><span class="line"><span class="string">Updating project ssh metadata...done.</span></span><br><span class="line"><span class="string">Waiting for SSH key to propagate.</span></span><br><span class="line"><span class="string">Warning: Permanently added '</span>compute.3504985360589690116<span class="string">' (ECDSA) to the list of known hosts.</span></span><br><span class="line"><span class="string">Linux test-instance 4.9.0-12-amd64 #1 SMP Debian 4.9.210-1 (2020-01-20) x86_64</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">The programs included with the Debian GNU/Linux system are free software;</span></span><br><span class="line"><span class="string">the exact distribution terms for each program are described in the</span></span><br><span class="line"><span class="string">individual files in /usr/share/doc/*/copyright.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span></span><br><span class="line"><span class="string">permitted by applicable law.</span></span><br><span class="line"><span class="string">hoge@test-instance:~$</span></span><br></pre></td></tr></table></figure><p>ローカルの<code>~/.ssh</code>配下にキーペア( <code>google_compute_engine</code>, <code>google_compute_engine.pub</code>)が生成されていますね。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">❯ ls ~/.ssh</span><br><span class="line">config                     google_compute_engine      google_compute_engine.pub  google_compute_known_hosts</span><br></pre></td></tr></table></figure><p><strong>ここで本題の <code>gcloud compute config-ssh</code> の出番です。</strong> 実行してみましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">❯ gcloud compute config-ssh --project <span class="built_in">test</span>-project</span><br><span class="line">You should now be able to use ssh/scp with your instances.</span><br><span class="line">For example, try running:</span><br><span class="line"></span><br><span class="line">  $ ssh <span class="built_in">test</span>-instance.asia-northeast1-a.test-project</span><br></pre></td></tr></table></figure><p> <code>~/.ssh/config</code> に <code>test-instance</code>が追加されていますね! </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">❯ cat ~/.ssh/config</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Compute Engine Section</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The following has been auto-generated by "gcloud compute config-ssh"</span></span><br><span class="line"><span class="comment"># to make accessing your Google Compute Engine virtual machines easier.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To remove this blob, run:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   gcloud compute config-ssh --remove</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You can also manually remove this blob by deleting everything from</span></span><br><span class="line"><span class="comment"># here until the comment that contains the string "End of Google Compute</span></span><br><span class="line"><span class="comment"># Engine Section".</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># You should not hand-edit this section, unless you are deleting it.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">Host <span class="built_in">test</span>-instance.asia-northeast1-a.test-project</span><br><span class="line">    HostName 35.200.9.109</span><br><span class="line">    IdentityFile /Users/hoge/.ssh/google_compute_engine</span><br><span class="line">    UserKnownHostsFile=/Users/hoge/.ssh/google_compute_known_hosts</span><br><span class="line">    HostKeyAlias=compute.3504985360589690116</span><br><span class="line">    IdentitiesOnly=yes</span><br><span class="line">    CheckHostIP=no</span><br><span class="line"></span><br><span class="line"><span class="comment"># End of Google Compute Engine Section</span></span><br></pre></td></tr></table></figure><p>あとは、使い慣れた sshコマンドでアクセスできますよ。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">❯ ssh <span class="built_in">test</span>-instance.asia-northeast1-a.test-project</span><br><span class="line">Last login: Sun Feb 16 11:58:05 2020 from 126.228.201.100</span><br><span class="line">hoge@<span class="built_in">test</span>-instance:~$</span><br></pre></td></tr></table></figure><p>これで快適なsshライフ??が送れますね</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a></li><li><a href="https://future-architect.github.io/articles/20190903/">Terraformのベストなプラクティスってなんだろうか</a></li><li><a href="https://future-architect.github.io/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/tags/GCP%E9%80%A3%
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>GCP連載#7 GCPのData Transfer Serviceを使って簡単にS3からBigQueryにデータ転送をしてみる</title>
    <link href="https://future-architect.github.io/articles/20200214/"/>
    <id>https://future-architect.github.io/articles/20200214/</id>
    <published>2020-02-14T00:39:28.000Z</published>
    <updated>2020-03-11T00:50:57.531Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP集中連載</a>の7回目です。</p><p>まずは簡単に自己紹介をさせてください。TIGのDXチームに所属している加部です。入社してからは主にインフラやデータベースを中心に仕事をしており、現在はGOでバックエンドのAPIの開発なんかもしています。<br>突然ですがAWSを利用しているけどビッグデータの蓄積や解析はBigQueryで実施したい、なんて意見も最近多くなってきているようですね。実際にS3からBigQueryのデータ転送について検索すると、自前でデータ転送を作成してみましたや、データ転送をサービスとして販売しているような会社もあります。そんな中GCPが提供しているBigQeryへのデータ転送サービス<a href="https://cloud.google.com/bigquery/transfer/" target="_blank" rel="noopener">DataTransferService</a>のソース元としてS3が追加され、簡単にS3からBigQueryのデータ転送のジョブを作成できるようになりました。まだ、ベータ版でのリリースのみですが今回は実際にS3からのデータ転送を試してみましょう。</p><h1 id="そもそもDataTransferServiceとは"><a href="#そもそもDataTransferServiceとは" class="headerlink" title="そもそもDataTransferServiceとは"></a>そもそもDataTransferServiceとは</h1><img src="/images/20200214/photo_20200214_01.png" class="img-very-small-size"><blockquote><p>BigQuery Data Transfer Service は、あらかじめ設定されたスケジュールに基づき、BigQuery BigQuery Data Transfer Service は、あらかじめ設定されたスケジュールに基づき、BigQuery へのデータの移動を自動化するマネージド サービスです。そのため、アナリティクス チームが BigQuery データ ウェアハウス基盤を構築する際にコードの作成はまったく必要ありません。<br><a href="https://cloud.google.com/bigquery/transfer" target="_blank" rel="noopener">https://cloud.google.com/bigquery/transfer</a></p></blockquote><p>要はBigQueryに対してデータを転送するジョブをマネージドサービスで簡単に作成できるよということですね。<br>マニュアルによると現在下記のようなサービスとの連携が可能となっています。</p><ul><li>AWS S3 </li><li>キャンペーンマネージャー</li><li>Cloud Strage</li><li>Google アドマネージャー</li><li>Google 広告</li><li>Google Merchant Center</li><li>Google Play</li><li>検索広告360</li><li>YouTubeチャンネル</li><li>YouTubeコンテンツ所有者</li></ul><p>今までは主にGoogle系のサービスとの親和性が高く、AWSのS３は初めてのGoogle以外のソース元のサービスになるのではないでしょうか。</p><h1 id="今回の構成と手順"><a href="#今回の構成と手順" class="headerlink" title="今回の構成と手順"></a>今回の構成と手順</h1><img src="/images/20200214/photo_20200214_02.png" class="img-middle-size"><p>今回はS3のバケットに格納したCSVファイルのデータを、DataTransferServiceの機能を使ってBiqQueryに転送します。<br>複雑なコマンドや手順があるわけでは無いため、とてもかんたんに設定することができます。本記事では主にコマンドラインによる作成となりますが、もちろんコンソールからポチポチして作成することもできます。</p><ol><li>S3バケットの作成</li><li>シークレットキー、アクセスキーの発行</li><li>DataTransfer APIの有効化</li><li>BigQueryのデータセット、テーブル作成</li><li>転送ジョブの作成</li></ol><h1 id="手順1-AWSでのS3バケットの作成"><a href="#手順1-AWSでのS3バケットの作成" class="headerlink" title="手順1 AWSでのS3バケットの作成"></a>手順1 AWSでのS3バケットの作成</h1><p><strong>S3の作成に関しては下記参照</strong><br><a href="https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/user-guide/create-bucket.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/user-guide/create-bucket.html</a></p><h1 id="手順2-シークレットキー、アクセスキーの発行"><a href="#手順2-シークレットキー、アクセスキーの発行" class="headerlink" title="手順2 シークレットキー、アクセスキーの発行"></a>手順2 シークレットキー、アクセスキーの発行</h1><p>S3のデータ転送をするためには「AmazonS3ReadOnlyAccess」の権限が必要になるため、シークレットキーとアクセスキーを発行するユーザの権限に追加してください。</p><p><strong>シークレットキー、アクセスキーの発行は下記参照</strong><br><a href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-services-iam-create-creds.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-services-iam-create-creds.html</a></p><h1 id="手順3-DataTransfer-APIの有効化"><a href="#手順3-DataTransfer-APIの有効化" class="headerlink" title="手順3 DataTransfer APIの有効化"></a>手順3 DataTransfer APIの有効化</h1><p>AWS環境の準備が完了したら次はGCP環境の準備です。まずは<a href="https://cloud.google.com/bigquery-transfer/docs/enable-transfer-service?hl=ja" target="_blank" rel="noopener">DataTransfer APIの有効化</a>にしましょう。</p><p>コンソールタブの「APIとサービス」からライブラリを選択し、「BigQuery Data Transfer API」と入力して検索してください。<br><img src="/images/20200214/photo_20200214_03.png"></p><p>検索したAPIを選択して、有効にするをクリックするとAPIが有効化されます。<br><img src="/images/20200214/photo_20200214_04.png"></p><h1 id="手順4-BigQueryのデータセット、テーブル作成"><a href="#手順4-BigQueryのデータセット、テーブル作成" class="headerlink" title="手順4 BigQueryのデータセット、テーブル作成"></a>手順4 BigQueryのデータセット、テーブル作成</h1><p>今回のサンプルデータとして気象庁のデータから2019年の東京の気温のデータを使います。<br><strong>下記URLから取得</strong><br><a href="http://www.data.jma.go.jp/gmd/risk/obsdl/index.php" target="_blank" rel="noopener">http://www.data.jma.go.jp/gmd/risk/obsdl/index.php</a></p><p><a href="https://cloud.google.com/bigquery/docs/bq-command-line-tool?hl=ja" target="_blank" rel="noopener">bqコマンド</a>でデータセットを作成して、取得したデータを格納できるようなテーブルを作成します。</p><p><strong>データセットの作成</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bq --location=asia-northeast1 mk \</span><br><span class="line">  --dataset <span class="built_in">test</span>-project-268106:from_s3</span><br></pre></td></tr></table></figure><p><strong>テーブル作成</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bq mk --table <span class="built_in">test</span>-project-268106:from_s3.temp_tokyo \</span><br><span class="line">  date:string,temp_avg:<span class="built_in">integer</span>,temp_max:<span class="built_in">integer</span>,temp_min:<span class="built_in">integer</span></span><br></pre></td></tr></table></figure><h1 id="手順5-転送ジョブの作成"><a href="#手順5-転送ジョブの作成" class="headerlink" title="手順5 転送ジョブの作成"></a>手順5 転送ジョブの作成</h1><p>いよいよS3からの転送ジョブの作成です。こちらもコマンドラインでの作成していきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">bq mk \</span><br><span class="line">  --transfer_config  \</span><br><span class="line">  --project_id=*** \</span><br><span class="line">  --data_source=amazon_s3 \</span><br><span class="line">  --display_name=data_export_from_s3 \</span><br><span class="line">  --target_dataset=from_s3 \</span><br><span class="line">  --params=<span class="string">'&#123;</span></span><br><span class="line"><span class="string">"data_path":"s3://data-to-bq/temperature/data.csv",</span></span><br><span class="line"><span class="string">"destination_table_name_template":"temp_tokyo",</span></span><br><span class="line"><span class="string">"access_key_id":"***",</span></span><br><span class="line"><span class="string">"secret_access_key":"U***",</span></span><br><span class="line"><span class="string">"file_format":"CSV",</span></span><br><span class="line"><span class="string">"max_bad_records":"0",</span></span><br><span class="line"><span class="string">"ignore_unknown_values":"true",</span></span><br><span class="line"><span class="string">"field_delimiter":",",</span></span><br><span class="line"><span class="string">"skip_leading_rows":"0",</span></span><br><span class="line"><span class="string">"allow_quoted_newlines":"true",</span></span><br><span class="line"><span class="string">"allow_jagged_rows":"false"&#125;'</span></span><br></pre></td></tr></table></figure><p>簡単にコマンドラインのオプションについて抜粋して説明を記載します。</p><ul><li><strong>data_source</strong> : BigQueryにデータを転送するデータソース。今回はS3なので「amazon_s3」を選択</li><li><strong>data_path</strong> : S3のURIを入力します。基本的には「S3://バケット名/フォルダ名/オブエジェクト名」</li><li><strong>access_key_id/secret_access_key</strong> : 手順２で作成したユーザのアクセスキーとシークレットキー</li><li><strong>file_format</strong> : 今回はCSVデータがサンプルデータなので「CSV」を入力。CSV以外にも、JSONやPARQUETなどのファイルフォーマットも選択することが可能</li><li><strong>field_delimiter</strong> : 今回はカンマ区切りのCSVのため「,」を入力</li><li><strong>skip_leading_rows</strong> : スキップするヘッダの行数。今回はヘッダ行を含まないデータにしているため「０」</li></ul><p>コマンドを実行するとGoogleアカウントのログイン許可のURLが表示され、URLのリンクに飛び認証コードを入力すると正常に作成されましたと表示されます。コンソールからも転送ジョブが作成されていることが確認できました。<br><img src="/images/20200214/1.png" style="border:solid 1px #000000"></p><p>ジョブが作成されるとその後すぐに実行され、コンソールから実行ログを確認することができます。<br><img src="/images/20200214/2.png" style="border:solid 1px #000000"></p><p>今回は小さなデータでしたが3分ほどかかってジョブは終了しました。<br>実際にSQLでデータを見てみると下記の様に取得することができます。<br><img src="/images/20200214/photo_20200214_05.png" class="img-small-size"></p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>注意点としてはコマンドラインからの作成の場合、スケジュールの選択オプションがありませんでした。どうやらデフォルト値である24時間ごと(日時)が自動で選択されているようです。作成後にコンソールからジョブのスケジュールを編集することは可能です。下記のように毎日、毎週、毎月、カスタム、オンデマンドと選ぶことができます。<br><img src="/images/20200214/3.png" class="img-middle-size"></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回はGCPのコマンドラインで作成しましたがInfrastructure as Codeで有名なTerraformなどでも作成することができます。今回の機能を実運用で利用するとなるとS3のパス設計など検討することは他にもあるとは思いますが、AWSを使いつつGCPのBigQueryを利用するなどのマルチクラウドの夢が広がるような機能ですね。今後もさらなる機能拡張を期待します。</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a></li><li><a href="https://future-architect.github.io/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li><li><a href="https://future-architect.github.io/articles/20190903/">Terraformのベストなプラクティスってなんだろうか</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/&quot;&gt;GCP集中連載&lt;/a&gt;の7回目です。&lt;/p&gt;
&lt;p&gt;まずは簡単に自己紹介をさせてください。TIGのDXチームに所属している加部で
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
      <category term="BigQuery" scheme="https://future-architect.github.io/tags/BigQuery/"/>
    
  </entry>
  
  <entry>
    <title>GCP連載#6 Terraform Validatorを使って、GCPのセキュリティポリシーの自動チェックを行う</title>
    <link href="https://future-architect.github.io/articles/20200213/"/>
    <id>https://future-architect.github.io/articles/20200213/</id>
    <published>2020-02-13T01:26:28.000Z</published>
    <updated>2020-02-13T01:38:31.258Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP集中連載</a>の6回目です。今回は<strong>Terraform Validatorを使って、組織のセキュリティポリシーの自動チェックを継続的に行う</strong>方法を紹介します。併せて、ポリシーをコードとして管理する方法も紹介します。<strong>Policy as code</strong> です。もちろんセキュリティポリシーのみだけではなく、命名規則やリージョン制限なども扱えます。</p><h1 id="Infrastructure-as-code-理想と現実"><a href="#Infrastructure-as-code-理想と現実" class="headerlink" title="Infrastructure as code 理想と現実"></a>Infrastructure as code 理想と現実</h1><p>Infrastructure as code (以下 IaC)、ここ最近大分一般的になってきました。弊社でも大半のプロジェクトは導入しています。3年前とかに導入するために一苦労していた時代が懐かしい..<br>IaCが当たり前になった今、インフラの構成管理はもう問題ないかというとそうではありません。<strong>特にプロジェクト数がスケールする場合</strong>、以下のような問題が発生してしまっているのではないでしょうか。</p><ul><li>各チームに権限を委譲しインフラを管理してもらうが、組織のポリシーに反したリソースが作成されてしまう</li><li>そもそも組織のポリシーが定義・明文化できていない</li><li>できていても周知できない、周知できていても、守ってもらえない</li></ul><p>例えば、”GCSのバケットを全世界に公開してしまっている” という誤った設定も本番環境にデプロイされてしまうかもしれません。</p><img src="/images/20200213/photo_20200213_01.png"><p>GCPだけではなく、多くのクラウド管理者が同じような悩みを抱えているかと思います。私もその一人です。各チームの開発者がクラウドインフラに熟知しているわけではありません。では、クラウド管理者がすべてソースコードをレビューすればよいか、いやいや、それも現実的ではない。</p><p>IaCがアプリケーション開発やっと同じ土俵に立った今、同じく <strong>CI(継続的インテグレーション)</strong> の仕組みが必要になってくるのは、自然の流れかと思います。terraform fmtがされているか、planが通るか、等の簡単なチェックをやっている人は多いと思いますが、それよりも高度なチェックを行う仕組みがなく私も方法を探しておりました。</p><h1 id="Terraform-Validator-とは"><a href="#Terraform-Validator-とは" class="headerlink" title="Terraform Validator とは"></a>Terraform Validator とは</h1><p>これを実現するのが、今回紹介する <strong>Terraform Validator</strong> です。Terraform Validatorは、 <strong>terraformがapplyされる前に、インフラのリソース設定が定義したポリシーに従っているかをチェックすることができるツール</strong>です。GCPのオープンソースとして公開されています。 <a href="https://github.com/GoogleCloudPlatform/terraform-validator" target="_blank" rel="noopener">GoogleCloudPlatform/terraform-validator</a></p><p>以下が概要の図です。</p><img src="/images/20200213/photo_20200213_02.png"><p>仕組みはごく単純です</p><ul><li>Policy をソースコード(yaml)として定義</li><li>Terraformのplanの結果(json)を生成</li><li>Terraform Validatorに読み込みさせ、チェック結果を出力</li></ul><p>ポリシーに反したリソースがterraformで定義された場合、以下のように <code>Found Violations</code> と出力されます。 (以下のサンプルは、GCSのロケーションが許可されていないリージョンを利用している)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sample</span></span><br><span class="line">$ terraform-validator validate --policy-path=<span class="variable">$&#123;POLICY_PATH&#125;</span> ./terraform.tfplan.json</span><br><span class="line">Found Violations:</span><br><span class="line">Constraint allow_some_storage_location on resource //storage.googleapis.com/validator-trial: //storage.googleapis.com/validator-trial is <span class="keyword">in</span> a disallowed location.</span><br></pre></td></tr></table></figure><h1 id="ハンズオン"><a href="#ハンズオン" class="headerlink" title="ハンズオン"></a>ハンズオン</h1><p>ではさっそく、実際に試してみます。<strong>“GCSのロケーションに制限をかける”</strong> シンプルなパターンで試してみます。以下のようにフォルダ構成を用意し、2つのファイルを作成しました。</p><ul><li><code>storage_location.yaml</code> : (ポリシーを定義するコード)</li><li><code>main.tf</code> : (terraformのコード)</li></ul><img src="/images/20200213/photo_20200213_03.png"><h2 id="Terraform-Validator-インストール"><a href="#Terraform-Validator-インストール" class="headerlink" title="Terraform Validator インストール"></a>Terraform Validator インストール</h2><p>バイナリファイルがGCSで公開されているので、最新版をダウンロードし適当なパスに配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ gsutil ls -r gs://terraform-validator/releases</span><br><span class="line">$ gsutil cp gs://terraform-validator/releases/2020-01-23/terraform-validator-linux-amd64 .</span><br><span class="line">$ mv terraform-validator-linux-amd64 terraform-validator-linux-amd64</span><br><span class="line">$ chmod 755 terraform-validator</span><br></pre></td></tr></table></figure><h2 id="Policyを定義"><a href="#Policyを定義" class="headerlink" title="Policyを定義"></a>Policyを定義</h2><p>PolicyをGit cloneし、<code>POLICY_PATH</code> を定義</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/forseti-security/policy-library.git</span><br><span class="line">$ <span class="built_in">export</span> POLICY_PATH=<span class="string">"/&lt;your_work_space&gt;/policy-library"</span></span><br></pre></td></tr></table></figure><p>Sampleからファイルをコピーし、ポリシーを定義します。policies/constraints 配下に配置したファイルが有効化されます。今回はGCSのLocationに制限をかけます (<strong>ap-northeast-1のみを許可する</strong>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /&lt;your_work_space&gt;/policy-library/policies/constraints</span><br><span class="line">$ cp ../../samples/storage_location.yaml .</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">constraints.gatekeeper.sh/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">GCPStorageLocationConstraintV1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">allow_some_storage_location</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  severity:</span> <span class="string">high</span></span><br><span class="line"><span class="attr">  match:</span></span><br><span class="line"><span class="attr">    target:</span> <span class="string">["organization/*"]</span></span><br><span class="line"><span class="attr">  parameters:</span></span><br><span class="line"><span class="attr">    mode:</span> <span class="string">"allowlist"</span></span><br><span class="line"><span class="attr">    locations:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">asia-northeast1</span></span><br><span class="line"><span class="attr">    exemptions:</span> <span class="string">[]</span></span><br></pre></td></tr></table></figure><h2 id="Terraform-planの実行"><a href="#Terraform-planの実行" class="headerlink" title="Terraform planの実行"></a>Terraform planの実行</h2><p>main.tfは以下のように定義されています。<code>location=&quot;us-central1-a&quot;</code> と設定しています<br>(その他 variable.tf, provider.tf等は省略)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">resource &quot;google_storage_bucket&quot; &quot;validator_trial&quot; &#123;</span><br><span class="line">      project       = &lt;your project&gt;</span><br><span class="line">      name          = &quot;validator-trial&quot;</span><br><span class="line">      force_destroy = false</span><br><span class="line">      storage_class = &quot;REGIONAL&quot;</span><br><span class="line">      location      = &quot;us-central1-a&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>planを実行 <code>--out=</code> optionを利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ terraform plan --out=terraform.tfplan</span><br></pre></td></tr></table></figure><p>terraform.tfplanのバイナリをjsonへ変換</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ terraform show -json ./terraform.tfplan &gt; ./terraform.tfplan.json</span><br></pre></td></tr></table></figure><h2 id="Terraform-Validatorの実行"><a href="#Terraform-Validatorの実行" class="headerlink" title="Terraform Validatorの実行"></a>Terraform Validatorの実行</h2><p>これで準備は整いました。Terraform Validatorの実行を行います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ terraform-validator validate --policy-path=<span class="variable">$&#123;POLICY_PATH&#125;</span> ./terraform.tfplan.json</span><br><span class="line">Found Violations:</span><br><span class="line">Constraint allow_some_storage_location on resource //storage.googleapis.com/validator-trial: //storage.googleapis.com/validator-trial is <span class="keyword">in</span> a disallowed location.</span><br></pre></td></tr></table></figure><p>Validationによりポリシー違反を検知しました！🚫</p><p>main.tf を修正して..</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource "google_storage_bucket" "validator_trial" &#123;</span><br><span class="line">      project       = &lt;your project&gt;</span><br><span class="line">      name          = "validator-trial"</span><br><span class="line">      force_destroy = false</span><br><span class="line">      storage_class = "REGIONAL"</span><br><span class="line"><span class="deletion">-     location      = "us-central1-a"</span></span><br><span class="line"><span class="addition">+     location      = "asia-northeast1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再度実行してみると..</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ terraform-validator validate --policy-path=<span class="variable">$&#123;POLICY_PATH&#125;</span> ./terraform.tfplan.json</span><br><span class="line">No violations found</span><br></pre></td></tr></table></figure><p>今度はValidationが成功しました！✅ 期待通りの動きをしてくれました。</p><h1 id="ポリシー定義-Policy-as-code"><a href="#ポリシー定義-Policy-as-code" class="headerlink" title="ポリシー定義 (Policy as code)"></a>ポリシー定義 (Policy as code)</h1><p>サンプルポリシーは、先ほど利用した <a href="https://github.com/forseti-security/policy-library/tree/master/samples" target="_blank" rel="noopener">forseti-security/policy-library</a> にあります。これらのyamlファイルを <code>POLICY_PATH</code> で定義した <code>/&lt;your_work_space&gt;/policy-library</code> の中の <code>policies/constraints/</code> 配下に配置すればOKです。Policy as codeが簡単に実現できます。<br>以下に、サンプルから一部をピックアップしてご紹介します。セキュリティポリシーを定義できるほかにも、リソースの命名規則の制限ができたりするのは地味に嬉しいですね。</p><h4 id="ポリシー定義のサンプル"><a href="#ポリシー定義のサンプル" class="headerlink" title="ポリシー定義のサンプル"></a>ポリシー定義のサンプル</h4><ul><li>一般的な制限<ul><li>リソースの命名規則(正規表現で指定)</li><li>Labelのアタッチの強制</li><li>リソースタイプの制限</li></ul></li><li>GCE<ul><li>Public IPの無効化</li><li>NWのWhitelist指定</li></ul></li><li>Cloud SQL<ul><li>Public IPの無効化</li><li>Maintenance Windownの制限</li><li>SSLの強制</li></ul></li><li>GKE<ul><li>Private Clusterの強制</li><li>Dashboardの無効化</li><li>Node poolのAuto upgradeの強制</li><li>Node OSの指定</li></ul></li><li>BigQuery<ul><li>Datasetのパブリック公開制限</li></ul></li><li>IAM<ul><li>Service Accountへ付与するRoleの制限</li><li>Audit loggingの強制</li></ul></li><li>Network<ul><li>Firewall ssh,rdp rule パブリック公開の禁止</li></ul></li><li>VPC Service Control<ul><li>有効化プロジェクトの指定</li></ul></li></ul><p>どのような制限をかけることができるかイメージできたでしょうか。実はこちらに用意されていないものでも、Custom Policyとして自身でポリシールールを記述することもできます。詳細は<a href="https://github.com/forseti-security/policy-library/blob/master/docs/constraint_template_authoring.md" target="_blank" rel="noopener">こちら</a></p><h1 id="実際の運用"><a href="#実際の運用" class="headerlink" title="実際の運用"></a>実際の運用</h1><p>実行方法とポリシーの定義方法が分かったところで、実際の運用方法についてです。<br>以下のように、TerraformのソースコードのPRに対して、Terraform Validatorを実行し、結果をPRにフィードバックさせるようにするのが良いと思います。Githubと連携が可能であれば、CloudBuildで以下のようにCIを回すのが簡単でよいです。</p><img src="/images/20200213/photo_20200213_04.png"><p>Cloud BuildのSteps イメージ</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">steps:</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">gcr.io/config-validator/terraform-validator</span></span><br><span class="line"><span class="attr">  entrypoint:</span> <span class="string">terraform</span></span><br><span class="line"><span class="attr">  dir:</span> <span class="string">your-terraform-folder</span></span><br><span class="line"><span class="attr">  args:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">init</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">gcr.io/config-validator/terraform-validator</span></span><br><span class="line"><span class="attr">  dir:</span> <span class="string">your-terraform-folder</span></span><br><span class="line"><span class="attr">  entrypoint:</span> <span class="string">terraform</span></span><br><span class="line"><span class="attr">  args:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">plan</span> </span><br><span class="line"><span class="bullet">  -</span> <span class="bullet">-out=terraform.tfplan</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">gcr.io/config-validator/terraform-validator</span></span><br><span class="line"><span class="attr">  entrypoint:</span> <span class="string">"/bin/bash"</span></span><br><span class="line"><span class="attr">  args:</span> <span class="string">['-c',</span> <span class="string">'terraform show -json terraform.tfplan &gt; terraform.tfplan.json'</span><span class="string">]</span></span><br><span class="line"><span class="attr">  dir:</span> <span class="string">your-terraform-folder</span></span><br><span class="line"><span class="attr">- name:</span> <span class="string">gcr.io/config-validator/terraform-validator</span></span><br><span class="line"><span class="attr">  dir:</span> <span class="string">your-terraform-folder</span></span><br><span class="line"><span class="attr">  args:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">validate</span></span><br><span class="line"><span class="bullet">  -</span> <span class="bullet">--policy-path=/&lt;your_work_space&gt;/policy-library</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">your-terraform-folder/terraform.tfplan.json</span></span><br></pre></td></tr></table></figure><p>PR上でのフィードバックのイメージ<br><img src="/images/20200213/photo_20200213_05.png"></p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>本記事ではあまり触れませんでしたが、実は、<a href="https://forsetisecurity.org/" target="_blank" rel="noopener">Forseti</a>というツールを用いてOngoingでの監視も可能です。こちらもGCPが公開しているオープンソースのツールです。これを用いれば、一元管理されたポリシーでTerraform経由ではない手作業によるポリシー違反の発生も検知することができます。</p><img src="/images/20200213/photo_20200213_06.png"><p>GCPのプロジェクト数がスケールする際に必ずぶち当たるであろうこの課題、私たちもTerraform Validatorを用いて解決しようと現在、試行錯誤中です。導入自体はシンプルにできるため、まずは簡単なポリシーのチェックから始めてみてはいかがでしょうか。</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://future-architect.github.io/articles/20190903/">Terraformのベストなプラクティスってなんだろうか</a></li><li><a href="https://future-architect.github.io/articles/20190816/">はじめてのTerraform 0.12 ～環境構築～</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載</a></li><li><a href="https://future-architect.github.io/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li><li><a href="https://future-architect.github.io/articles/20190927/">Let’s Try GCP #2 ～Cloud FunctionをVPC connectorと一緒に使ってみる～</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/&quot;&gt;GCP集中連載&lt;/a&gt;の6回目です。今回は&lt;strong&gt;Terraform Validatorを使って、組織のセキュリティポリ
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Terraform" scheme="https://future-architect.github.io/tags/Terraform/"/>
    
      <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>GCP連載#5【もう鍵なくさない】GCPのSecret ManagerとBerglasで幸せになる</title>
    <link href="https://future-architect.github.io/articles/20200212/"/>
    <id>https://future-architect.github.io/articles/20200212/</id>
    <published>2020-02-12T00:14:36.000Z</published>
    <updated>2020-02-12T00:45:18.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前書き"><a href="#前書き" class="headerlink" title="前書き"></a>前書き</h2><p>こんにちは、TIG所属インフラエンジニアの市川です。</p><p>突然ですが、普段生活するうえでカギ🔑をなくした、忘れたことはないでしょうか。私はあります。なくしたことはないけど、うっかり置き忘れちゃうんですよね。</p><p>それがことインフラ構築の場面ではどうでしょうか。最近はとにかく多くのカギを管理しなくてはなりません。API Keyとか気づいたら何が何だか分からなくなり、苦渋の決断の末、再度払い出すことも多いのでは無いでしょうか。検証ならまぁ…ギリギリですが、本番ではやっちゃダメ絶対です。</p><p>ということで、そんな管理人の皆さんに朗報です。 <strong>遂にGCPにシークレット管理機能がやってきました！</strong> CLIツールのBerglasとGUIで管理するSecret Managerを簡単にご紹介したいと思います。</p><h2 id="Berglasを使ってみる"><a href="#Berglasを使ってみる" class="headerlink" title="Berglasを使ってみる"></a>Berglasを使ってみる</h2><p>サクっと利用するならCloud Shellだよね！ということで、以下Cloud Shellで作業をしています。</p><h3 id="Berglasとは？"><a href="#Berglasとは？" class="headerlink" title="Berglasとは？"></a>Berglasとは？</h3><p><a href="https://github.com/GoogleCloudPlatform/berglas" target="_blank" rel="noopener">Githubページ</a>でこのツールについて確認します。</p><blockquote><p>Berglasは、Google Cloudでシークレットを保存および取得するためのコマンドラインツールおよびライブラリです。シークレットはCloud KMSで暗号化され、Cloud Storageに保存されます。 Secret Managerには相互運用可能なレイヤーもあります。</p><ul><li>CLIとして：Berglasは、Google Cloudでのデータの暗号化、復号化、保存のプロセスを自動化します。</li><li>ライブラリとして：BerglasはさまざまなGoogle Cloudランタイムへのシークレットの組み込みを自動化します</li></ul><p>Berglasは、公式にサポートされているGoogle製品ではありません。</p></blockquote><p>なるほど。GCPのリポジトリで開発されてるのに公式製品ではないのね。CLIとしてもライブラリとしても利用可能というところがイケてますね。</p><h3 id="Berglasのインストール（正確にはバイナリをダウンロード）"><a href="#Berglasのインストール（正確にはバイナリをダウンロード）" class="headerlink" title="Berglasのインストール（正確にはバイナリをダウンロード）"></a>Berglasのインストール（正確にはバイナリをダウンロード）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> wget https://storage.googleapis.com/berglas/master/linux_amd64/berglas</span><br><span class="line"><span class="meta">$</span> chmod +x berglas</span><br></pre></td></tr></table></figure><p>Dockerコンテナもあるようなので、好みに応じて使い分けください。</p><h3 id="環境変数の準備と依存してるAPIの有効化"><a href="#環境変数の準備と依存してるAPIの有効化" class="headerlink" title="環境変数の準備と依存してるAPIの有効化"></a>環境変数の準備と依存してるAPIの有効化</h3><p>サクッと設定しましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 環境変数の設定</span></span><br><span class="line">$ <span class="built_in">export</span> PROJECT_ID=my-secret-project</span><br><span class="line">$ <span class="built_in">export</span> BUCKET_ID=my-secrets-bucket-123</span><br><span class="line"></span><br><span class="line"><span class="comment"># APIの有効化</span></span><br><span class="line">$ gcloud services <span class="built_in">enable</span> --project <span class="variable">$&#123;PROJECT_ID&#125;</span> \</span><br><span class="line">  cloudkms.googleapis.com \</span><br><span class="line">  storage-api.googleapis.com \</span><br><span class="line">  storage-component.googleapis.com</span><br></pre></td></tr></table></figure><h3 id="Berglas環境のBootstrap"><a href="#Berglas環境のBootstrap" class="headerlink" title="Berglas環境のBootstrap"></a>Berglas環境のBootstrap</h3><p>次コマンドを実行すると、シークレットを保存するための新しいCloud Storageバケットと、データを暗号化するためのCloud KMSキーが自動的に作成されます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> berglas bootstrap --project <span class="variable">$PROJECT_ID</span> --bucket <span class="variable">$BUCKET_ID</span></span></span><br></pre></td></tr></table></figure><p>成功すると下記のような出力が確認できます！最近のCLIツールってこれでもかってくらい優しくできていますよね。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Successfully created berglas environment:</span><br><span class="line"></span><br><span class="line">  Bucket: my-secrets-bucket-123</span><br><span class="line">  KMS key: projects/my-secret-project/locations/global/keyRings/berglas/cryptoKeys/berglas-key</span><br><span class="line"></span><br><span class="line">To create a secret:</span><br><span class="line"></span><br><span class="line">  berglas create my-secrets-bucket-123/my-secret abcd1234 \</span><br><span class="line">    --key projects/my-secret-project/locations/global/keyRings/berglas/cryptoKeys/berglas-key</span><br><span class="line"></span><br><span class="line">To grant access to that secret:</span><br><span class="line"></span><br><span class="line">  berglas grant my-secrets-bucket-123/my-secret \</span><br><span class="line">    --member user:jane.doe@mycompany.com</span><br><span class="line"></span><br><span class="line">For more help and examples, please run &quot;berglas -h&quot;.</span><br></pre></td></tr></table></figure><h3 id="シークレットの作成"><a href="#シークレットの作成" class="headerlink" title="シークレットの作成"></a>シークレットの作成</h3><p>サンプルケースとして、<a href="http://httpbin.org/" target="_blank" rel="noopener">httpbin</a>のBasic認証APIへリクエストを投げ <code>200 OK</code> するのCloud Functionsを作ります。</p><p><a href="http://httpbin.org/" target="_blank" rel="noopener">httpbin</a>のBasic認証は次のようなレスポンスを返すモックサーバです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 認証情報なしだと401を返す</span></span><br><span class="line">$ curl -i -G <span class="string">"https://httpbin.org/basic-auth/basic-user-name/basic-user-pass"</span></span><br><span class="line">HTTP/2 401</span><br><span class="line">date: Tue, 11 Feb 2020 10:43:43 GMT</span><br><span class="line">content-length: 0</span><br><span class="line">server: gunicorn/19.9.0</span><br><span class="line">www-authenticate: Basic realm=<span class="string">"Fake Realm"</span></span><br><span class="line">access-control-allow-origin: *</span><br><span class="line">access-control-allow-credentials: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 認証情報を付けて送るとちゃんと200を返す</span></span><br><span class="line">$ curl -i -G -u basic-user-name <span class="string">"https://httpbin.org/basic-auth/basic-user-name/basic-user-pass"</span></span><br><span class="line">Enter host password <span class="keyword">for</span> user <span class="string">'basic-user-name'</span>:</span><br><span class="line">HTTP/2 200</span><br><span class="line">date: Tue, 11 Feb 2020 10:45:16 GMT</span><br><span class="line">content-type: application/json</span><br><span class="line">content-length: 58</span><br><span class="line">server: gunicorn/19.9.0</span><br><span class="line">access-control-allow-origin: *</span><br><span class="line">access-control-allow-credentials: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"authenticated"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"user"</span>: <span class="string">"basic-user-name"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ということで、ユーザ名・パスワードを認証情報としてシークレットにしていきましょう！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> berglas create <span class="variable">$&#123;BUCKET_ID&#125;</span>/api-user basic-user-name \</span></span><br><span class="line">  --key projects/$&#123;PROJECT_ID&#125;/locations/global/keyRings/berglas/cryptoKeys/berglas-key</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> berglas create <span class="variable">$&#123;BUCKET_ID&#125;</span>/api-pass basic-user-pass \</span></span><br><span class="line">  --key projects/$&#123;PROJECT_ID&#125;/locations/global/keyRings/berglas/cryptoKeys/berglas-key</span><br></pre></td></tr></table></figure><h3 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h3><ul><li>Cloud Functionへ渡すサービスアカウントを作成</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcloud iam service-accounts create berglas-service-account \</span></span><br><span class="line">  --project $&#123;PROJECT_ID&#125; \</span><br><span class="line">  --display-name "berglas Cloud Functions Example"</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">export</span> SA_EMAIL=berglas-service-account@<span class="variable">$&#123;PROJECT_ID&#125;</span>.iam.gserviceaccount.com</span></span><br></pre></td></tr></table></figure><h4 id="Berglasから先ほど作ったサービスアカウントへシークレットへのアクセス権限を渡す"><a href="#Berglasから先ほど作ったサービスアカウントへシークレットへのアクセス権限を渡す" class="headerlink" title="Berglasから先ほど作ったサービスアカウントへシークレットへのアクセス権限を渡す"></a>Berglasから先ほど作ったサービスアカウントへシークレットへのアクセス権限を渡す</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> berglas grant <span class="variable">$&#123;BUCKET_ID&#125;</span>/api-user --member serviceAccount:<span class="variable">$&#123;SA_EMAIL&#125;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> berglas grant <span class="variable">$&#123;BUCKET_ID&#125;</span>/api-pass --member serviceAccount:<span class="variable">$&#123;SA_EMAIL&#125;</span></span></span><br></pre></td></tr></table></figure><h4 id="Goのプログラム"><a href="#Goのプログラム" class="headerlink" title="Goのプログラム"></a>Goのプログラム</h4><p>golangでBASIC認証をする場合は<a href="https://golang.org/pkg/net/http/#Request.SetBasicAuth" target="_blank" rel="noopener"><code>SetBasicAuth</code></a>を使います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fn</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">"github.com/GoogleCloudPlatform/berglas/pkg/auto"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readBody</span><span class="params">(res *http.Response)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    data, err := ioutil.ReadAll(res.Body)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* dataはbyte型なので、string型に */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">"--- ENV VAR FROM BERGLAS ---\n"</span>)</span><br><span class="line">fmt.Fprintf(w, <span class="string">"API_USER: %s\n"</span>, os.Getenv(<span class="string">"API_USER"</span>))</span><br><span class="line">fmt.Fprintf(w, <span class="string">"API_PASS: %s\n"</span>, os.Getenv(<span class="string">"API_PASS"</span>))</span><br><span class="line"></span><br><span class="line">    client := &amp;http.Client&#123;Timeout: time.Duration(<span class="number">3</span>) * time.Second&#125;</span><br><span class="line"></span><br><span class="line">    req, _ := http.NewRequest(<span class="string">"GET"</span>, <span class="string">"https://httpbin.org/basic-auth/basic-user-name/basic-user-pass"</span>, <span class="literal">nil</span>)</span><br><span class="line">    req.SetBasicAuth(os.Getenv(<span class="string">"API_USER"</span>), os.Getenv(<span class="string">"API_PASS"</span>))</span><br><span class="line">    res, err := client.Do(req)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatal(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> res.Body.Close()</span><br><span class="line"></span><br><span class="line">fmt.Fprintf(w, <span class="string">"--- HTTPBIN RESPONSE ---\n"</span>)</span><br><span class="line">fmt.Fprintf(w, readBody(res))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcloud <span class="built_in">functions</span> deploy berglas-example-go \</span></span><br><span class="line">  --project $&#123;PROJECT_ID&#125; \</span><br><span class="line">  --region us-central1 \</span><br><span class="line">  --runtime go113 \</span><br><span class="line">  --memory 1G \</span><br><span class="line">  --max-instances 10 \</span><br><span class="line">  --service-account $&#123;SA_EMAIL&#125; \</span><br><span class="line">  --set-env-vars "API_USER=berglas://$&#123;BUCKET_ID&#125;/api-user,API_PASS=berglas://$&#123;BUCKET_ID&#125;/api-pass" \</span><br><span class="line">  --entry-point F \</span><br><span class="line">  --trigger-http \</span><br><span class="line">  --allow-unauthenticated</span><br></pre></td></tr></table></figure><h4 id="テスト実行"><a href="#テスト実行" class="headerlink" title="テスト実行"></a>テスト実行</h4><p>ちゃんとBerglasで作成したシークレットが取得できましたね！<br>割と道のりが長いですが、GCPのサービスから簡単にアクセスできるのは気持ちが良いですね。<br><img src="/images/20200212/photo_20200212_01.png" class="img-small-size"></p><h2 id="Secret-Managerを利用"><a href="#Secret-Managerを利用" class="headerlink" title="Secret Managerを利用"></a>Secret Managerを利用</h2><p>折り返しです。もうしばしお付き合いください。</p><h3 id="Secret-Manageとは？"><a href="#Secret-Manageとは？" class="headerlink" title="Secret Manageとは？"></a>Secret Manageとは？</h3><blockquote><p>インフラストラクチャとアプリケーションレベルのシークレットを暗号化、保存、管理、監査します。<br><a href="https://cloud.google.com/solutions/secrets-management/" target="_blank" rel="noopener">https://cloud.google.com/solutions/secrets-management/</a></p></blockquote><p>簡潔ですね。CloudKMSはGCPの管理するカギで暗号化、復号などをサポートしたサービスですが、もう一枚レイヤが上なサービスのようです。BerglasのGUI版ぐらいの気持ちでいると良いとお思います。</p><h3 id="Secret-Manager画面"><a href="#Secret-Manager画面" class="headerlink" title="Secret Manager画面"></a>Secret Manager画面</h3><p>GUI画面へは<code>セキュリティ -&gt; シークレット マネージャー</code>でアクセスできます。</p><p>作成画面はかなり簡潔で好感度が高いです。この手のサービスはやたらと入力項目が多くて初見殺しなイメージ（勝手）があったので。</p><img src="/images/20200212/photo_20200212_02.png" class="img-small-size" style="border:solid 1px #000000"><p>ラベルで整理ができるのも片づけが苦手な私にぴったりです。（今回はつけていないですが。。。）</p><p>有効化、無効化、破棄も非常に容易にできます。新しいバージョンを選択することで、シークレットの中身の更新と過去のシークレットを一括無効にできます。</p><img src="/images/20200212/photo_20200212_03.png" class="img-middle-size" style="border:solid 1px #000000"><img src="/images/20200212/photo_20200212_04.png" class="img-middle-size" style="border:solid 1px #000000"><h3 id="Berglasで登録したシークレットをSecret-Managerに移す"><a href="#Berglasで登録したシークレットをSecret-Managerに移す" class="headerlink" title="Berglasで登録したシークレットをSecret Managerに移す"></a>Berglasで登録したシークレットをSecret Managerに移す</h3><p>何やらBerglasと連携もできるようなので、ちょこっと触ってみます。</p><ul><li>BerglasからSecret Managerのキーにアクセス</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> berglas access sm://<span class="variable">$&#123;PROJECT_ID&#125;</span>/the-first-secret</span></span><br><span class="line">sugoi-secret</span><br></pre></td></tr></table></figure><ul><li>migrate</li></ul><p><a href="https://cloud.google.com/blog/ja/products/identity-security/introducing-google-clouds-secret-manager" target="_blank" rel="noopener">Google Cloud Blog</a>に「1回限りの」って書いてあるのが不穏ｗ</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> berglas migrate <span class="variable">$&#123;BUCKET_ID&#125;</span> --project <span class="variable">$&#123;PROJECT_ID&#125;</span></span></span><br><span class="line">Migrating api-user to projects/my-secret-project/secrets/api-user... done!</span><br><span class="line">Migrating api-pass to projects/my-secret-project/secrets/api-pass... done!</span><br></pre></td></tr></table></figure><p>二回目の実行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> berglas migrate <span class="variable">$&#123;BUCKET_ID&#125;</span> --project <span class="variable">$&#123;PROJECT_ID&#125;</span></span></span><br><span class="line">Migrating api-user to projects/my-secret-project/secrets/api-user... done!</span><br><span class="line">Migrating api-pass to projects/my-secret-project/secrets/api-pass... done!</span><br></pre></td></tr></table></figure><p>通りました。</p><ul><li>画面</li></ul><p>イケてますね！当然ですが、最終更新日はUPLOADした時間になります。</p><img src="/images/20200212/photo_20200212_05.png" class="img-middle-size" style="border:solid 1px #000000"><h3 id="Cloud-FunctionからSecret-Managerを使う"><a href="#Cloud-FunctionからSecret-Managerを使う" class="headerlink" title="Cloud FunctionからSecret Managerを使う"></a>Cloud FunctionからSecret Managerを使う</h3><p>流れとしては、非常に簡単です。</p><ol><li>シークレットアクセサ役割をCloud Functionのサービスアカウントに割り当て</li><li>利用</li></ol><h4 id="サービスアカウントへ役割を割り当て"><a href="#サービスアカウントへ役割を割り当て" class="headerlink" title="サービスアカウントへ役割を割り当て"></a>サービスアカウントへ役割を割り当て</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcloud beta secrets add-iam-policy-binding the-first-secret \</span><br><span class="line">    --role roles/secretmanager.secretAccessor \</span><br><span class="line">    --member serviceAccount:<span class="variable">$&#123;PROJECT_ID&#125;</span>@appspot.gserviceaccount.com</span><br></pre></td></tr></table></figure><h4 id="サンプルプログラム"><a href="#サンプルプログラム" class="headerlink" title="サンプルプログラム"></a>サンプルプログラム</h4><p>シークレットを吐き出すのみというシンプルなコードです。BerglasのクライアントライブラリはgooglecloudがメンテしているのがGoだけでしたが、今回はPythonライブラリがあったのでPythonで書きます。</p><figure class="highlight python"><figcaption><span>main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> secretmanager</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_secret</span><span class="params">(request)</span>:</span></span><br><span class="line">    client = secretmanager.SecretManagerServiceClient()</span><br><span class="line">    secret_name = <span class="string">'the-first-secret'</span></span><br><span class="line">    project_id = os.getenv(<span class="string">'GCP_PROJECT'</span>)</span><br><span class="line">    resource_name = <span class="string">'projects/&#123;&#125;/secrets/&#123;&#125;/versions/latest'</span>.format(project_id, secret_name)</span><br><span class="line">    res = client.access_secret_version(resource_name)</span><br><span class="line">    secret_string = res.payload.data.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">return</span> secret_string</span><br></pre></td></tr></table></figure><p>ライブラリ<code>google-cloud-secret-manager</code>が必要なので、<code>requirements.txt</code>も作成しましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">google-cloud-secret-manager==0.1.1</span><br></pre></td></tr></table></figure><h4 id="デプロイ-1"><a href="#デプロイ-1" class="headerlink" title="デプロイ"></a>デプロイ</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gcloud <span class="built_in">functions</span> deploy print_secret \</span></span><br><span class="line">  --runtime python37 \</span><br><span class="line">  --trigger-http \</span><br><span class="line">  --allow-unauthenticated</span><br></pre></td></tr></table></figure><img src="/images/20200212/photo_20200212_06.png"><p>…ニッコリ😄</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>使い方にちょいとクセというか、お作法があるので、習うより慣れろシリーズだと思います。<br>これでもう、カギの管理に困ることはなくなって、幸せな世界が待っていることでしょう。<br>ご興味のある方は、ぜひ触ってみてはいかがでしょうか。</p><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載</a></li><li><a href="https://future-architect.github.io/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li><li><a href="https://future-architect.github.io/articles/20190927/">Let’s Try GCP #2 ～Cloud FunctionをVPC connectorと一緒に使ってみる～</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前書き&quot;&gt;&lt;a href=&quot;#前書き&quot; class=&quot;headerlink&quot; title=&quot;前書き&quot;&gt;&lt;/a&gt;前書き&lt;/h2&gt;&lt;p&gt;こんにちは、TIG所属インフラエンジニアの市川です。&lt;/p&gt;
&lt;p&gt;突然ですが、普段生活するうえでカギ🔑をなくした、忘れたことはな
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>GCP連載#4 Cloud Life Sciencesを見てみた</title>
    <link href="https://future-architect.github.io/articles/20200210/"/>
    <id>https://future-architect.github.io/articles/20200210/</id>
    <published>2020-02-10T02:53:19.000Z</published>
    <updated>2020-02-10T03:14:00.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIG/DXチームの<a href="https://twitter.com/kaedemalu" target="_blank" rel="noopener">伊藤</a>です。今回はGCP連載企画の4日目です。</p><p>これまでの内容は<a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a>にあります。</p><p>さて、私は業務ではGCPとTerraformを扱っています。コンピューティング・ネットワーキングなどが現在の業務領域でである一方で、ビッグデータ・機械学習関連のサービスはあまり使う機会がなく理解もまだまだな部分が多いです。今回は、Cloud Life Sciencesという、ビッグデータの中でも毛色の違うサービスを調べてみようと思いこの連載に参加しております。割と読み物に近くなったのでさらっと読み流していただければ幸いです。</p><h2 id="私の今まで"><a href="#私の今まで" class="headerlink" title="私の今まで"></a>私の今まで</h2><p>本記事を書くためのモチベーションとしては昔話をすこし挟みます。現在はインフラやネットワークエンジニアとして日々働いていますが、大学時代は化学を専攻し大学院では感染症を専門に研究していました。最終的に遺伝子を触ることなく修了しましたが、生物系に少しでも在籍していたこともあり、今回はわずかな記憶を頼りながら調べています。この記事が最終的にかつての研究の何かに使えたかもしれないと私の中で知識が落とし込めればいいなと考えています。</p><h2 id="Cloud-Life-Sciencesについて"><a href="#Cloud-Life-Sciencesについて" class="headerlink" title="Cloud Life Sciencesについて"></a><a href="https://cloud.google.com/life-sciences" target="_blank" rel="noopener">Cloud Life Sciences</a>について</h2><img src="/images/20200210/1.png" class="img-very-small-size"><p>GCPの中ではビッグデータに属するサービスになります。大規模な生物医学データの処理を費用対効果が高くできることがウリで、対象ユーザーは<code>ライフ サイエンス機関と学術研究機関向け</code>となっています。特に強く謳われているのが、研究に集中できることと結果の再現性にです。遺伝子情報は特に大きなデータ量になるので、得たデータの検証をスピードアップさせることは研究スピード全体を上げることにも繋がります。</p><p>また、アーキテクチャは以下になっており、サービス単体としてではなく、1つのプラットフォームとして動くようです。<br><img src="/images/20200210/photo_20200210_01.png"><br>(引用：<a href="https://cloud.google.com/life-sciences/?hl=ja" target="_blank" rel="noopener">https://cloud.google.com/life-sciences/?hl=ja</a>)</p><h3 id="VCF"><a href="#VCF" class="headerlink" title="VCF"></a>VCF</h3><p>Variant Call Formatと言われる、遺伝子配列の変異データを保存するときに利用されるファイル形式になります。ファイル内の記載内容は以下になります。</p><ul><li>VCFヘッダー行(1~8行目)</li><li>データのフォーマット行(カラムタイトル)<ul><li>染色体番号</li><li>塩基の位置</li><li>塩基(変異箇所)のID</li><li>リファレンス配列上の塩基</li><li>シーケンスデータ上の塩基</li><li>シーケンシングデータのスコア</li><li>フィルタリング条件の通過の有無</li><li>key:dataの形の追加情報</li></ul></li></ul><p>このような形でシーケンス結果を記載しています。DNAの塩基配列についてはアデニン(A)、チミン(T)、グアニン(G)、シトシン(C)の4種類がありますが、それぞれ、A=T、G≡Cとしてペアになっているのでぜひ試すときには思い出してみてください。また後のクエリに使います。</p><h3 id="Variant-Transformsツール"><a href="#Variant-Transformsツール" class="headerlink" title="Variant Transformsツール"></a><a href="https://github.com/googlegenomics/gcp-variant-transforms" target="_blank" rel="noopener">Variant Transforms</a>ツール</h3><p>こちらのツールはGoogleが作成したオープンソースになります。実際にBigQueryに読み込ませるためにはデータの加工が必要になりますので、こちらのツールを使って分析に最適な形で出力することができます。実際のフローにはDataflowが使用されており、BigQueryで分析するまでは以下の図になります。</p><h2 id="実際に流れを掴む"><a href="#実際に流れを掴む" class="headerlink" title="実際に流れを掴む"></a>実際に流れを掴む</h2><p>実際に公開データセットを使ってバリアントを使って少しいじってみましょう。ここは実際のチュートリアルの一部を行なっているので、本記事以外の方法を試したい方は<a href="https://cloud.google.com/life-sciences/docs/how-tos/variant-transforms" target="_blank" rel="noopener">こちら</a>から確認してください。Cloud Consoleで行うとクリーンに進められます。</p><h3 id="GCSからVariant-TransformsツールからBigQueryに送る"><a href="#GCSからVariant-TransformsツールからBigQueryに送る" class="headerlink" title="GCSからVariant TransformsツールからBigQueryに送る"></a>GCSからVariant TransformsツールからBigQueryに送る</h3><p>GCSにバリアントファイルを配置したら実際にツールを使います。使うためには公式のDockerイメージがあるのでこちらを落としてきます。イメージが2GB近くあるので、ダウンロードは気長に待ちましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull gcr.io/cloud-lifesciences/gcp-variant-transforms</span><br></pre></td></tr></table></figure><p>次にスクリプトを実行します。変数は実際に使っているプロジェクト名、バケットなどに置き換えてください。</p><figure class="highlight sh"><figcaption><span>script.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Parameters to replace:</span></span><br><span class="line"><span class="comment"># The GOOGLE_CLOUD_PROJECT is the project that contains your BigQuery dataset.</span></span><br><span class="line">GOOGLE_CLOUD_PROJECT=GOOGLE_CLOUD_PROJECT</span><br><span class="line">INPUT_PATTERN=gs://BUCKET/*.vcf</span><br><span class="line">OUTPUT_TABLE=GOOGLE_CLOUD_PROJECT:BIGQUERY_DATASET.BIGQUERY_TABLE</span><br><span class="line">TEMP_LOCATION=gs://BUCKET/temp</span><br><span class="line"></span><br><span class="line">COMMAND=<span class="string">"vcf_to_bq \</span></span><br><span class="line"><span class="string">    --input_pattern <span class="variable">$&#123;INPUT_PATTERN&#125;</span> \</span></span><br><span class="line"><span class="string">    --output_table <span class="variable">$&#123;OUTPUT_TABLE&#125;</span> \</span></span><br><span class="line"><span class="string">    --temp_location <span class="variable">$&#123;TEMP_LOCATION&#125;</span> \</span></span><br><span class="line"><span class="string">    --job_name vcf-to-bigquery \</span></span><br><span class="line"><span class="string">    --runner DataflowRunner"</span></span><br><span class="line">docker run -v ~/.config:/root/.config \</span><br><span class="line">    gcr.io/cloud-lifesciences/gcp-variant-transforms \</span><br><span class="line">    --project <span class="string">"<span class="variable">$&#123;GOOGLE_CLOUD_PROJECT&#125;</span>"</span> \</span><br><span class="line">    --zones us-west1-b \</span><br><span class="line">    <span class="string">"<span class="variable">$&#123;COMMAND&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>スクリプト実行後は時間がかかるようなので、これも気長に待ちます。<br>実行が終わったら<code>bq</code>コマンドでアウトプットがあるか確認しましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bq ls --format=pretty GOOGLE_CLOUD_PROJECT:BIGQUERY_DATASET</span><br></pre></td></tr></table></figure><p>これでVariant Transformツールを使ってファイルをBigQueryに適した形にすることが出来ました。</p><h3 id="BigQueryに読み込ませる"><a href="#BigQueryに読み込ませる" class="headerlink" title="BigQueryに読み込ませる"></a>BigQueryに読み込ませる</h3><p>こちらでは公開プロジェクトのデータを使ってバリアントの分析を行います。データを用いるプロジェクトは<a href="https://www.illumina.com/platinumgenomes.html" target="_blank" rel="noopener">Illumina Platinum Genomes</a>、テーブル名は<code>platinum_genomes_deepvariant_variants_20180823</code>になります。実際のテーブルを５件出力しました。<br><img src="/images/20200210/photo_20200210_02.png"></p><p>実際に流すクエリは以下になります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> filtered_snp_calls <span class="keyword">AS</span> (</span><br><span class="line">   <span class="keyword">SELECT</span></span><br><span class="line">     reference_name,</span><br><span class="line">     c.name,</span><br><span class="line">     <span class="keyword">CONCAT</span>(reference_bases, <span class="string">'-&gt;'</span>, alternate_bases[ORDINAL(<span class="number">1</span>)].alt) <span class="keyword">AS</span> mutation</span><br><span class="line">   <span class="keyword">FROM</span></span><br><span class="line">     <span class="string">`bigquery-public-data.human_genome_variants.platinum_genomes_deepvariant_variants_20180823`</span> <span class="keyword">AS</span> v, <span class="keyword">UNNEST</span>(v.call) <span class="keyword">AS</span> c</span><br><span class="line">   <span class="keyword">WHERE</span></span><br><span class="line">     <span class="comment"># Only include biallelic SNPs.</span></span><br><span class="line">     reference_bases <span class="keyword">IN</span> (<span class="string">'A'</span>,<span class="string">'C'</span>,<span class="string">'G'</span>,<span class="string">'T'</span>)</span><br><span class="line">     <span class="keyword">AND</span> alternate_bases[ORDINAL(<span class="number">1</span>)].alt <span class="keyword">IN</span> (<span class="string">'A'</span>,<span class="string">'C'</span>,<span class="string">'G'</span>,<span class="string">'T'</span>)</span><br><span class="line">     <span class="keyword">AND</span> (ARRAY_LENGTH(alternate_bases) = <span class="number">1</span></span><br><span class="line">       <span class="keyword">OR</span> (ARRAY_LENGTH(alternate_bases) = <span class="number">2</span> <span class="keyword">AND</span> alternate_bases[ORDINAL(<span class="number">2</span>)].alt = <span class="string">'&lt;*&gt;'</span>))</span><br><span class="line">     <span class="comment"># Skip homozygous reference calls and no-calls.</span></span><br><span class="line">     <span class="keyword">AND</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> g <span class="keyword">FROM</span> <span class="keyword">UNNEST</span>(c.genotype) <span class="keyword">AS</span> g <span class="keyword">WHERE</span> g &gt; <span class="number">0</span>)</span><br><span class="line">     <span class="keyword">AND</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> g <span class="keyword">FROM</span> <span class="keyword">UNNEST</span>(c.genotype) <span class="keyword">AS</span> g <span class="keyword">WHERE</span> g &lt; <span class="number">0</span>)</span><br><span class="line">     <span class="comment"># Include only high quality calls.</span></span><br><span class="line">     <span class="keyword">AND</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> ft <span class="keyword">FROM</span> <span class="keyword">UNNEST</span>(c.filter) ft <span class="keyword">WHERE</span> ft <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">'PASS'</span>, <span class="string">'.'</span>))</span><br><span class="line"> ),</span><br><span class="line"></span><br><span class="line"> mutation_type_counts <span class="keyword">AS</span> (</span><br><span class="line">   <span class="keyword">SELECT</span></span><br><span class="line">     reference_name,</span><br><span class="line">     <span class="keyword">name</span>,</span><br><span class="line">     <span class="keyword">SUM</span>(<span class="keyword">CAST</span>(mutation <span class="keyword">IN</span> (<span class="string">'A-&gt;G'</span>, <span class="string">'G-&gt;A'</span>, <span class="string">'C-&gt;T'</span>, <span class="string">'T-&gt;C'</span>) <span class="keyword">AS</span> INT64)) <span class="keyword">AS</span> transitions,</span><br><span class="line">     <span class="keyword">SUM</span>(<span class="keyword">CAST</span>(mutation <span class="keyword">IN</span> (<span class="string">'A-&gt;C'</span>, <span class="string">'C-&gt;A'</span>, <span class="string">'G-&gt;T'</span>, <span class="string">'T-&gt;G'</span>,</span><br><span class="line">                           <span class="string">'A-&gt;T'</span>, <span class="string">'T-&gt;A'</span>, <span class="string">'C-&gt;G'</span>, <span class="string">'G-&gt;C'</span>) <span class="keyword">AS</span> INT64)) <span class="keyword">AS</span> transversions</span><br><span class="line">   <span class="keyword">FROM</span> filtered_snp_calls</span><br><span class="line">   <span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">     reference_name,</span><br><span class="line">     <span class="keyword">name</span></span><br><span class="line"> )</span><br><span class="line"></span><br><span class="line"> <span class="keyword">SELECT</span></span><br><span class="line">   reference_name,</span><br><span class="line">   <span class="keyword">name</span>,</span><br><span class="line">   transitions,</span><br><span class="line">   transversions,</span><br><span class="line">   transitions/transversions <span class="keyword">AS</span> titv</span><br><span class="line"> <span class="keyword">FROM</span> mutation_type_counts</span><br><span class="line"> <span class="keyword">WHERE</span></span><br><span class="line">   transversions &gt; <span class="number">0</span></span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">   titv <span class="keyword">DESC</span>,</span><br><span class="line">   <span class="keyword">name</span></span><br></pre></td></tr></table></figure><p><code>mutation_type_counts</code>のところで、正確にペアになっている塩基対(A=T、もしくはG≡C)については<code>transitions</code>、正しいペアになっていない塩基対は<code>transversions</code>(変異)しているものをそれぞれint型にCASTして合計を取っています。上記クエリをBigQueryに流すと以下の結果が出力されます(上記10件)。</p><table><thead><tr><th>行</th><th>referencce_name</th><th>name</th><th>transitions</th><th>transversions</th><th>titv</th></tr></thead><tbody><tr><td>1</td><td>chr22</td><td>NA12892</td><td>35299</td><td>15017</td><td>2.3506026503296265</td></tr><tr><td>2</td><td>chr22</td><td>NA12889</td><td>34091</td><td>14624</td><td>2.331167943107221</td></tr><tr><td>3</td><td>chr17</td><td>NA12892</td><td>67297</td><td>28885</td><td>2.3298251687727194</td></tr><tr><td>4</td><td>chr22</td><td>NA12878</td><td>33627</td><td>14439</td><td>2.3289008934136715</td></tr><tr><td>5</td><td>chr22</td><td>NA12877</td><td>34751</td><td>14956</td><td>2.3235490772933938</td></tr><tr><td>6</td><td>chr22</td><td>NA12891</td><td>33534</td><td>14434</td><td>2.323264514341139</td></tr><tr><td>7</td><td>chr17</td><td>NA12877</td><td>70600</td><td>30404</td><td>2.3220628864623074</td></tr><tr><td>8</td><td>chr17</td><td>NA12878</td><td>66010</td><td>28475</td><td>2.3181738366988585</td></tr><tr><td>9</td><td>chr17</td><td>NA12890</td><td>67242</td><td>29057</td><td>2.314141170802216</td></tr><tr><td>10</td><td>chr17</td><td>NA12889</td><td>69767</td><td>30189</td><td>2.311007320547219</td></tr></tbody></table><p>最終列の<code>titv</code>では正しいペア、および変異の入ったペアの比をとっているので、各リファレンスに対してどれくらい変異は入っているかがわかります。ここでは20 GBほど読み込んでいますが、実際にクエリにかかった時間は1秒を切っているので、ローカルで同様のクエリ実行するよりははるかに早いでしょう。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>本記事では簡単ですが、Cloud Life Sciencesを触る記事を書いてきました。エンジニアとして分析に使うものはうっすら理解していても、実際に使うファイルフォーマットなどは知識が深くないとそもそも何もできないなと改めて感じたところです。今回はVCFファイルという専門的なファイルからBigQueryに流すところまで行いましたが、Cloud Life Sciencesはもともと Google Genomicsというサービスだったようで、以前よりGoogleが力を入れていた部分の一つであることが今回色々調べてわかりました。医療分野は正確さを求められる一方で、そのデータ量は膨大な量になります。大学院時代に肌で感じたことですが、ローカルで分析している先輩がかなり時間をかけていたことを思い出しました。このサービスの知名度が上がるとともに、研究ユース、非エンジニアでも使いやすいプラットフォームになるとより良いなと思いました。</p><p>明日は祝日なので次回更新は水曜日です。お楽しみに！</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>先日、GCPのProfessional Cloud Architectに合格しました！結果が出力される瞬間はなかなかドキドキでしたが、なんとか合格できました。私も参考にしましたが、本技術ブログでも合格体験記を出しておりますので、そちらもぜひご覧ください！<br><a href="https://future-architect.github.io/articles/20190530/">【合格記】GCP Professional Cloud Architect認定資格を振り返る</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://bi.biopapyrus.jp/gwas/vcf.html" target="_blank" rel="noopener">VFC フォーマットファイルの特徴および Python でパースする方法</a></p><hr><h2 id="関連リンク"><a href="#関連リンク" class="headerlink" title="関連リンク"></a>関連リンク</h2><ul><li><a href="https://future-architect.github.io/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li><li><a href="https://future-architect.github.io/articles/20190927/">Let’s Try GCP #2 ～Cloud FunctionをVPC connectorと一緒に使ってみる～</a></li><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a></li><li><a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIG/DXチームの&lt;a href=&quot;https://twitter.com/kaedemalu&quot; target
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>golang.tokyo #29に4名で登壇しました</title>
    <link href="https://future-architect.github.io/articles/20200209/"/>
    <id>https://future-architect.github.io/articles/20200209/</id>
    <published>2020-02-09T11:01:05.000Z</published>
    <updated>2020-03-11T00:51:06.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニットの真野です。先日開催された<a href="https://golangtokyo.connpass.com/event/164955/" target="_blank" rel="noopener">golang.tokyo #29</a> にTIG DXユニットから渋川、辻、真野と、当社アルバイトの本田さんの計4名が登壇しました。</p><p>29回目となるgolang.tokyoは今回始めてFutureのオフィスで開催させていただくことになりました。budougumi0617さんを始め運営の方々、および来ていただいた方々、ありがとうございました！</p><p>🎤当日の様子<br><img src="/images/20200209/photo_20200210_01.jpeg" class="img-middle-size"></p><p>今思うと29回目ということで肉🍖を準備すれば良かったのですが、自然とピザ🍕とドリンク🍹を用意してしまいました。次からはもっとウィットに富んだ運営を心がけたいと思います。</p><h1 id="登壇内容について"><a href="#登壇内容について" class="headerlink" title="登壇内容について"></a>登壇内容について</h1><p>今回はUmeda.goで発表されて好評だった事例を再演するということで、資料は <a href="https://future-architect.github.io/articles/20200127/">Umeda.go 2020 Winterに3名で登壇しました</a> を御覧ください。今回が人生初🔰の勉強会登壇であった本田さんの発表は本人から感想を聞いてみたいと思います。</p><h1 id="ebitenでIoT可視化"><a href="#ebitenでIoT可視化" class="headerlink" title="ebitenでIoT可視化"></a>ebitenでIoT可視化</h1><script async class="speakerdeck-embed" data-slide="1" data-id="f280d9e36d834062b0a7cb353c93846f" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>golang.tokyo初参加・初登壇させていただいた本田です。登壇者として立たせていただいたこと、そして他の登壇者の方のお話や、懇親会での交流など、本当にいい経験になったと思います。</p><p>弊社でのホーム開催で、たった5分のLTだったにもかかわらずド緊張で、拙い点もありましたが（デモと言いつつ初っ端から動画に頼ったり、質問であたふたして弊社社員の方に頼りまくったり…）、自分が今まで取り組んでいたGoでのゲーム開発についてアウトプットできてとても良かったです。温かく見守ってくださった皆様ありがとうございました。</p><p>また、質問や懇親会ではebiten開発者の星さんをはじめ、様々な方からあらゆる知見を得ることができたこと、弊社の社員の方々からもこういった場で改めて多くを学ばせていただいたことなどなど、多くの意味で本当に勉強になりました！！</p><p>またこういったチャンスがあれば、どんどん挑戦していきたいと思います。登壇経験がまだない方も、golang.tokyoは温かく素敵なコミュニティなのでぜひ挑戦してみてください。</p><h1 id="質疑応答"><a href="#質疑応答" class="headerlink" title="質疑応答"></a>質疑応答</h1><p>各登壇後の質問タイムや、最後の懇親会で様々な質問や活発な意見交換ができました。少しアルコールが入っていたため覚えている範囲になりますが、話した内容を紹介したいと思います。</p><p>懇親会ではcuelangなど、技術ブログで書いた内容についても質問を受けたりしました。技術ブログは書いた瞬間にブックマークなどで反応が少しは見られたりはしますが、直接反応があるとうれしいですね。</p><ul><li><p>Goならわかるラッパーコマンド作成で学ぶシステムプログラミング（澁川）</p><ul><li>今回は運営兼発表で参加しました。再演の依頼をbudougumiさんからいただきましたが、今回は40分の内容を20分で巻きで発表しました。仕事の中でちょっとしたツールを作って業務を改善したり公開するというのにGoは最適だと思います。今回作ったツールは、今後は業務にきちんと適用してブラッシュアップさせていきたいですし、もっと洗練させていきたいと思っています。</li><li>Q. 懇親会で「Goらしさとは」といった質問をいただきました。<ul><li>A. 世間的な流行と逆行しているとは思いますが、個人的な思いとしてはコードが短くなる「宣言的」も、乱用すると「なぜ動かないのか分からない」となりがちだと思っています。その宣言的な文法をなるべく排しているのがGoらしさな気がしています。静的型付けと動的型付けをいったりきたりしながら、型推論で両方の良さを生かした言語が出て広まっているように、宣言的がブームでも、そうじゃない書き方の良さもあるだろうし、単純にどっちが良いという話に終始するのではなく、その先を探していきたいと思っています。</li></ul></li></ul></li><li><p>ワークフローエンジンをGoで作る（辻）</p><ul><li>Q. Workerの並行数はどれくらい？<ul><li>A. 今の設定では10にしていました。WorkerのタスクはDBやS3といった外部リソースへのアクセスが多いので、外部リソースを見ながらチューニングする想定です。</li></ul></li><li>Q. 標準コードリーディング会はどういう目的でやっているのですか？<ul><li>A. もともとは業務や趣味でコードを書いた人がよりレベルアップする目的で、標準パッケージのGoらしい書き方や、テクニックを学ぶために始めました。いざ始めると、いろいろなレベルの方が参加しているので、標準パッケージの使い方やテストの書き方といった内容も社内で一緒に学んでいます。</li></ul></li></ul></li><li><p>Goで工場を制御する要であるPLCにアクセスする（真野）</p><ul><li>Q. 三菱製以外の例えばオムロン社製のPLCに対応しないのか？<ul><li>A. 今までの案件で工場側に導入されていたPLCがたまたま全て三菱さんであった。機会があればオムロンさんのPLCも触ってみたいです</li></ul></li><li>Q. Modbusの方が良いのでは？<ul><li>A. 後で気がついたのですがそうかも知れません。三菱さんのPLCアクセス方法を調べるとMCプロトコルの仕様が見つかったので先に実装してしまった</li></ul></li><li>Q. 書き込みにも対応しているのか？<ul><li>A. まだコードはUploadしていないが可能。読み取りのコマンドをWriteに変えて16進数で書き込みデータを追加するイメージ。過去実績ではアクチュエータの操作はしたことないが、コンフィグデータの書き込みは行ったことがあります</li></ul></li></ul></li></ul><h1 id="会場運営について"><a href="#会場運営について" class="headerlink" title="会場運営について"></a>会場運営について</h1><p>採用担当の田邊です。今回、フューチャー初の「golang.tokyo」という外部イベントという事もあり、私としても気合を入れて、少しでも参加者の方が楽しい場になればと思い準備をしてきました。</p><p>参加人数に対し、🍕ピザ15枚、🍺お酒160本！！<br>無事終わったかと思いきや、、、お酒はなんと100本弱余りました。笑</p><p>ただ当日は、セミナー&amp;懇親会共に盛り上がったので満足です。</p><p>入社してまだ半年ですが、日々感じることはフューチャーの技術に対する拘り・向上心の高さにただただ驚いている毎日です。これから、フューチャーは、エンジニアイベントを定期的に開催していきます。少しでも多くの方にフューチャーを認知して頂き、魅力をお伝えしていきますので、これからもよろしくお願いします。もし、興味をもっていただいたGopherさんがいれば、キャリア採用もしていますので<a href="https://progres12.jposting.net/pgfuture/u/job.phtml?job_code=215" target="_blank" rel="noopener">このあたりの職種</a>で申し込みください！<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>golang.tokyoは個人的に憧れの勉強会でしたが、まさか自社開催できるとは思いもせず、非常に嬉しいです。実はコッソリと何人かの社員が後ろの方で傾聴していたそうですが、みんな刺激になったと喜んでいました。</p><p>Goに関しては、<a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載</a>や<a href="https://future-architect.github.io/tags/GoCDK/">Go Cloud連載</a>などブログ記事も上がっています。今後も日本のGoコミュニティを盛り上げるべくなるべく多くのナレッジを公開しますので今後もよろしくお願いします。</p><p>また、澁川と真野は2/14開催の<a href="https://event.shoeisha.jp/devsumi/20200213/session/2413/" target="_blank" rel="noopener">Developpers Summit 2020に登壇</a>します。こちらでは何かと巷を騒がせる「ITコンサルタントって何やっているの？必要なの？」といった疑問にいい感じに答える場となっています。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">ダイレクトマーケティングすいません。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXユニットの真野です。先日開催された&lt;a href=&quot;https://golangtokyo.conn
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
  </entry>
  
</feed>
