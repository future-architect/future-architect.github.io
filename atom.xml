<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>フューチャー技術ブログ</title>
  <icon>https://future-architect.github.io/feed_icon.png</icon>
  <subtitle>Future Tech Blog</subtitle>
  <link href="https://future-architect.github.io/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2022-10-12T00:26:59.114Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OAuth の仕組みを理解しながらクライアントを実装してみる</title>
    <link href="https://future-architect.github.io/articles/20221012a/"/>
    <id>https://future-architect.github.io/articles/20221012a/</id>
    <published>2022-10-11T15:00:00.000Z</published>
    <updated>2022-10-12T00:26:59.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIG の吉岡と申します。Tech Blog には初投稿です。<a href="/articles/20221003a/">認証認可連載</a>の 5 本目です。</p><p>業務で認証・認可に関する SaaS に触れる場面があり、そういえば OAuth, OpenID Connect の仕組みをちゃんと理解していなかったと思い、RFC を読みながら OAuth クライアントを実装してみました。N 番煎じの車輪の再発明ですが、何かの役に立てば幸いです。</p><p>※本稿において、OAuth は基本的に OAuth 2.0 を指しますが、OAuth 2.1 にて推奨されているベストプラクティスを取り入れています。<br>※本当は OpenID Connect にも触れたかったのですが力尽きました。また機会があれば書かせてください。</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>この記事は、次のような方々に向けて書いています。</p><ul><li>OAuth を聞いたことがある</li><li>認証と認可の違いを認識している</li><li>HTTP の基本的な仕組みを知っている</li></ul><h2 id="OAuth-とは"><a href="#OAuth-とは" class="headerlink" title="OAuth とは"></a>OAuth とは</h2><p>OAuth は、サードパーティアプリケーションが HTTP サービスに対して制限付きのアクセスを取得することを可能にする認可フレームワークです。</p><p>具体的には、ある SNS アプリケーションがあり、ユーザーはこの SNS に対して、自身の Google Photos 上の画像を投稿したいとします。このとき、SNS アプリケーションに Google のユーザー名とパスワードを教えることにより、画像を取得させることもできますが、この方法には、付与される権限が大きすぎる、権限を剥奪するためにはパスワードを変更するしかないなど、さまざまな問題があります。</p><p>これらの問題を解決し、サードパーティアプリケーションに適切な権限を付与するための認可フレームワークが OAuth です。</p><p>なお、2022 年現在広く使われている仕様である OAuth 2.0 は <a href="https://www.rfc-editor.org/rfc/rfc6749">RFC 6749</a> により規定されています。この仕様には、後にさまざまな拡張が施されたため、それらの拡張とセキュリティに関するベストプラクティスをまとめた <a href="https://oauth.net/2.1/">OAuth 2.1</a> が策定中です。OAuth 2.1 は OAuth 2.0 とその拡張をまとめ直した仕様として策定中であり、OAuth 2.0 を大きく変えるものではありません。</p><p>本稿では、OAuth 2.0 並びに OAuth 2.1 における代表的なフローである「認可コードグラント + PKCE」を解説します。</p><h2 id="OAuth-のロール"><a href="#OAuth-のロール" class="headerlink" title="OAuth のロール"></a>OAuth のロール</h2><p>OAuth では、次の 4 つのロール (登場人物) が定義されています。</p><ul><li>リソースオーナー: リソースの所有者であるエンドユーザー</li><li>リソースサーバー: リソースを保持しているサーバー</li><li>クライアント: リソースオーナーが利用し、リソースに対する権限を付与されるアプリケーション</li><li>認可サーバー: リソースオーナーの承諾を得たうえでクライアントに対してアクセストークンを発行するサーバー</li></ul><p>4 つのロールのうち、クライアントには注意が必要です。通常私たちがクライアントと聞くと、OS のネイティブアプリケーションやブラウザ上で動作するアプリケーションを想像してしまいますが、OAuth の言葉遣いにおいては、それらに限らず、サーバー上で動作するウェブアプリケーションもクライアントに含まれます。</p><p>また、クライアントは <strong>コンフィデンシャルクライアント</strong> と <strong>パブリッククライアント</strong> の 2 種類に分類されます。後に説明しますが、認可サーバーはクライアントを識別するために、クライアント ID とクライアントシークレットを発行します。このクライアントシークレットを安全に保持できるクライアントはコンフィデンシャルクライアント、安全に保持できないクライアントはパブリッククライアントと呼ばれます。サーバー上で動作するウェブアプリケーションはコンフィデンシャルクライアントで、OS のネイティブアプリケーションやブラウザ上で動作するアプリケーションはパブリッククライアントです。</p><p>なお、クライアントは事前に認可サーバーに登録されている必要があります。登録の方法は OAuth 仕様の範疇外ですが、多くの場合、ウェブアプリケーションとして構築されたマネジメントコンソールなどから登録することができます。本稿では Google API にクライアントを登録するフローを説明します。</p><h2 id="OAuth-のグラントタイプ"><a href="#OAuth-のグラントタイプ" class="headerlink" title="OAuth のグラントタイプ"></a>OAuth のグラントタイプ</h2><p>OAuth では、権限付与の種類が 4 種類規定されており、これをグラントタイプと呼びます。</p><ul><li>認可コードグラント + PKCE</li><li>インプリシットグラント (非推奨)</li><li>リソースオーナーパスワードクレデンシャルグラント (非推奨)</li><li>クライアントクレデンシャルグラント</li></ul><p>認可コードグラント + PKCE は、エンドユーザーの承諾を得た上でクライアントがリソースにアクセスするという、OAuth の典型的なパターンです。クライアントクレデンシャルグラントは、クライアントが直接、クライアント自身の認証情報を認可サーバーに提示して、リソースへのアクセスを取得する方法です。</p><p>OAuth 2.0 では、これらに加えてインプリシットグラント、リソースオーナーパスワードクレデンシャルグラントが規定されていますが、これらは OAuth 2.1 で削除される予定であり、もはや利用すべきではありません。</p><p>本稿では <strong>認可コードグラント + PKCE</strong> による権限付与を説明します。認可コードグラントは、リソースオーナー・クライアント・認可サーバーの三者のやりとりによって認可を達成するため、<strong>3-legged OAuth</strong> などとも呼ばれます。</p><h2 id="OAuth-のシーケンス"><a href="#OAuth-のシーケンス" class="headerlink" title="OAuth のシーケンス"></a>OAuth のシーケンス</h2><p>認可コードグラントによる OAuth の処理シーケンスは図のとおりです。</p><img src="/images/20221012a/oauth.png" alt="oauth.png" width="587" height="501" loading="lazy"><ol><li>ユーザーが「Google Photos から画像を取得する」ボタンを押下する</li><li>クライアントが 302 Found を返却し、ユーザーエージェントを認可サーバーの認可エンドポイントにリダイレクトする <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li><li>ユーザーエージェントが認可サーバーの認可エンドポイントにアクセスする</li><li>認可サーバーが認証画面を表示し、ユーザーにログインを促す</li><li>ユーザーが認証情報を入力し、認可サーバーに認証を求める</li><li>認証に成功した認可サーバーは、クライアントが要求する権限一覧をユーザーに提示し、ユーザーの承諾を求める</li><li>ユーザーがクライアントに対する権限の付与を承諾する</li><li>権限付与の承諾を得た認可サーバーは 302 Found を返却し、ユーザーエージェントをクライアントのリダイレクト URI にリダイレクトする <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li><li>ユーザーエージェントがリダイレクト URI にアクセスする</li><li>クライアントは手順 9 で取得した認可コードを用いて認可サーバーにトークンリクエストを送信する</li><li>リクエストの有効性を検証した認可サーバーは、アクセストークンを発行し、トークンレスポンスを返却する</li><li>クライアントは手順 11 で取得したアクセストークンを用いてリソースサーバーにアクセスする</li><li>アクセストークンの有効性を検証したリソースサーバーは、リソースを返却する</li><li>クライアントはリソースオーナーのユーザーエージェントに対して、リソースを含む画面をレスポンスする</li></ol><p>順に詳しく見ていきます。</p><h3 id="Step-A-手順-1…2"><a href="#Step-A-手順-1…2" class="headerlink" title="Step A. 手順 1…2"></a>Step A. 手順 1…2</h3><p>手順 1 から 2 では、ユーザーをクライアントから認可サーバーに誘導します。ユーザーがアプリケーションの「Google Photos から画像を取得する」などのボタンをクリックすると、クライアントは各種パラメータを生成し、302 Found をレスポンスします。これにより、ユーザーエージェントは認可サーバーにリダイレクトされます。この認可サーバーに対するリクエストを <strong>認可リクエスト</strong> と呼び、リクエスト先を <strong>認可エンドポイント</strong> と呼びます。</p><p>認可リクエストは次の通りです。ここで、認可サーバーの認可エンドポイントは <code>auth.example.com/authorize</code> であるとします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /authorize</span><br><span class="line">    ?response_type=code                                     <span class="comment"># 1</span></span><br><span class="line">    &amp;client_id=&lt;client_id&gt;                                  <span class="comment"># 2</span></span><br><span class="line">    &amp;state=&lt;state&gt;                                          <span class="comment"># 3</span></span><br><span class="line">    &amp;scope=&lt;scope&gt;                                          <span class="comment"># 4</span></span><br><span class="line">    &amp;redirect_uri=https://client.example.com/callback       <span class="comment"># 5</span></span><br><span class="line">    &amp;code_challenge=&lt;code_challenge&gt;                        <span class="comment"># 6</span></span><br><span class="line">    &amp;code_challenge_method=&lt;code_challenge_method&gt; HTTP/1.1 <span class="comment"># 7</span></span><br><span class="line">Host: auth.example.com</span><br></pre></td></tr></table></figure><ol><li>(必須) 認可コードグラントを利用するため、<code>response_type=code</code> を指定します</li><li>(必須) クライアント登録時に認可サーバーから発行された <code>client_id</code> を指定します</li><li>(推奨) CSRF 攻撃を防ぐため、ランダムな <code>state</code> 値を指定します</li><li>(任意) リソースサーバー・認可サーバーが規定するリソースアクセスのスコープを指定します</li><li>(任意) クライアントが認可レスポンスを受け取るための URI を指定します</li><li>(推奨) ランダムに生成した <code>code_verifier</code> から生成されたチャレンジを指定します (PKCE)</li><li>(推奨) <code>code_challenge</code> を生成する方法を指定します (PKCE)</li></ol><p>上の例では、認可コード横取り攻撃と呼ばれる攻撃を防ぐため、 <strong>PKCE (Proof Key for Code Exchange)</strong> という仕組みを使用しています。PKCE は、OAuth 2.0 において使用が推奨されており、OAuth 2.1 においては事実上必須となる見込みです。</p><p>ここで、PKCE を用いる場合、クライアントはまず <code>code_verifier</code> と呼ばれるランダムな ASCII 文字列を生成します。<code>code_verifier</code> を正規表現で書くと <code>/[A-Za-z0-9-_.~]&#123;43,128&#125;/</code> です。次に、クライアントは <code>code_challenge_method</code> の値を選択します。<code>code_challenge_method</code> として有効な値は <code>plain</code> と <code>S256</code> です。<code>code_challenge_method</code> の値により、<code>code_challenge</code> はそれぞれ次のように計算されます。</p><div class="scroll"><table><thead><tr><th>code_challenge_method</th><th>code_challenge</th></tr></thead><tbody><tr><td>plain</td><td><code>code_verifier</code></td></tr><tr><td>S256</td><td><code>BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))</code></td></tr></tbody></table></div><p><code>code_challenge_method == plain</code> のとき、<code>code_challenge</code> と <code>code_verifier</code> は同一の値です。<code>code_challenge_method == S256</code> のとき、<code>code_challenge</code> は <code>code_verifier</code> を SHA-256 ハッシュ関数に通した値となります。特段の技術的な制約がない限り、<code>code_challenge_method == S256</code> を指定すべきです。</p><h3 id="Step-B-手順-3…8"><a href="#Step-B-手順-3…8" class="headerlink" title="Step B. 手順 3…8"></a>Step B. 手順 3…8</h3><p>手順 3 から 8 では、ユーザーは認可サーバーとコミュニケーションをとります。手順 4, 5 においてユーザーは認可サーバーにログインします。この認証は、あくまで認可サーバーが認可処理を進めるために必要な認証であり、クライアントは認証情報そのものはおろか、認証情報がやりとりされていることすら知ることはありません。また、ユーザーがすでにユーザーエージェント上で対象サービスにログインしており、そのセッションが有効な場合、手順 4, 5 は省略されることが一般的です。手順 6, 7 において、ユーザーはクライアントに対する権限の付与を提示され、問題がなければそれを承諾します。権限付与の承諾を確認した認可サーバーは、手順 8 で <strong>認可コード</strong> を発行し、これをクエリパラメータに付与して <strong>リダイレクト URI</strong> に対する 302 Found をレスポンスします。</p><p>認可レスポンスは次のとおりです。<code>Location</code> ヘッダにはリダイレクト URI が含まれています。ここで、クライアントのリダイレクト URI は <code>https://client.example.com/callback</code> であるとします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Location: https://client.example.com/callback</span><br><span class="line">    ?code=&lt;authorization_code&gt;                <span class="comment"># 1</span></span><br><span class="line">    &amp;state=&lt;state&gt;                            <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><ol><li>(必須) 認可サーバーが発行した認可コード</li><li>(認可リクエストに <code>state</code> が含まれる場合必須) 認可リクエストにて送信した <code>state</code> 値</li></ol><p>なお、手順 8 と手順 9 の間において、認可リクエストと認可レスポンスの <code>state</code> 値を比較し、これらが等しくない場合は CSRF 攻撃が行われたと判断して処理を中断する必要があります。</p><h3 id="Step-C-手順-9…14"><a href="#Step-C-手順-9…14" class="headerlink" title="Step C. 手順 9…14"></a>Step C. 手順 9…14</h3><p>手順 8 により 302 Found を受け取ったユーザーエージェントは、手順 9 でリダイレクト URI に遷移します。ここにおいてクライアントは認可コードを取得し、手順 10 で <strong>トークンリクエスト</strong> を発行します。なお、トークンリクエストを受け取る認可サーバーのエンドポイントは <strong>トークンエンドポイント</strong> と呼ばれます。手順 11 において、認可コードの有効性を確認した認可サーバーは <strong>アクセストークン</strong> を発行し、<strong>トークンレスポンス</strong> としてクライアントに返却します。これ以降、クライアントはアクセストークンを用いてリソースサーバーにアクセスし、リソースへの CRUD 操作を実行することができるようになります。</p><p>トークンリクエストは次の通りです。ここで、認可サーバーのトークンエンドポイントは <code>auth.example.com/token</code> であるとします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /token HTTP/1.1</span><br><span class="line">Host: auth.example.com</span><br><span class="line">Authorization: Basic &lt;basic_auth_token&gt;               <span class="comment"># 1</span></span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">grant_type=authorization_code                         <span class="comment"># 2</span></span><br><span class="line">    &amp;code=&lt;code&gt;                                      <span class="comment"># 3</span></span><br><span class="line">    &amp;redirect_uri=https://client.example.com/callback <span class="comment"># 4</span></span><br><span class="line">    &amp;code_verifier=&lt;code_verifier&gt;                    <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><ol><li>(必須) クライアント ID とクライアントシークレットを使用して Basic 認証を行います</li><li>(必須) <code>grant_type=authorization_code</code> を指定します</li><li>(必須) 手順 8 認可レスポンスにより取得した <code>code</code> を指定します</li><li>(必須) クライアントが認可レスポンスを受け取るための URI を指定します</li><li>(認可リクエストで <code>code_challenge</code>, <code>code_challenge_method</code> を指定した場合必須) クライアントが生成した <code>code_verifier</code> を指定します</li></ol><p>トークンレスポンスは次の通りです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;access_token&quot;</span>: &lt;access_token&gt;,  <span class="comment"># 1</span></span><br><span class="line">  <span class="string">&quot;token_type&quot;</span>: <span class="string">&quot;bearer&quot;</span>,          <span class="comment"># 2</span></span><br><span class="line">  <span class="string">&quot;expires_in&quot;</span>: 3600,              <span class="comment"># 3</span></span><br><span class="line">  <span class="string">&quot;refresh_token&quot;</span>: &lt;refresh_token&gt; <span class="comment"># 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>発行されたアクセストークン</li><li>トークンの種類</li><li>トークンの有効期限 (秒数)</li><li>リフレッシュトークン (本稿では触れない)</li></ol><h2 id="Google-Photos-API-を使ってみる"><a href="#Google-Photos-API-を使ってみる" class="headerlink" title="Google Photos API を使ってみる"></a>Google Photos API を使ってみる</h2><p>ここからは、実際に Google Photos API を利用するクライアントアプリケーションを実装し、OAuth の処理フローを確認していきます。</p><h3 id="GCP-マネジメントコンソールにてクライアントを登録する"><a href="#GCP-マネジメントコンソールにてクライアントを登録する" class="headerlink" title="GCP マネジメントコンソールにてクライアントを登録する"></a>GCP マネジメントコンソールにてクライアントを登録する</h3><p>GCP に実験用のプロジェクトを作成します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.02.52.png" alt="" width="1200" height="807" loading="lazy"><p>API &amp; Services から、OAuth consent screen を設定していきます。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.04.06.png" alt="" width="1200" height="807" loading="lazy"><p>External を選択し、CREATE を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.04.18.png" alt="" width="1200" height="807" loading="lazy"><p>App information として、App name に任意の名前を設定し、User support email にはご自身の Google アカウントのメールアドレスを設定します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.04.54.png" alt="" width="1200" height="807" loading="lazy"><p>Developer contact information として、ご自身の Google アカウントのメールアドレスを設定し、SAVE AND CONTINUE を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.05.11.png" alt="" width="1200" height="807" loading="lazy"><p>Scopes 画面において、ADD OR REMOVE SCOPES を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.05.35.png" alt="" width="1200" height="807" loading="lazy"><p>今回は Google Photos API を利用したいため、Manually add scopes に <code>https://www.googleapis.com/auth/photoslibrary.readonly</code> と入力し、ADD TO TABLE を押下します。なお、このスコープは、対象ユーザーの Google Photos リソースに対する読み取り権限を付与します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.08.04.png" alt="" width="1200" height="807" loading="lazy"><p>テーブルに Google Photos API のスコープが追加されるので、チェックボックスをチェックし、UPDATE を押下します。次いで、SAVE AND CONTINUE を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.08.15.png" alt="" width="1200" height="807" loading="lazy"><p>Test users 画面においてテストのためのユーザーを設定します。ADD USERS を押下し、ご自身の Google アカウントのメールアドレスを入力の上、ADD を押下してください。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.09.02.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-02_23.09.24.png" alt="" width="1200" height="807" loading="lazy"><p>テーブルにご自身のメールアドレスが追加されていることを確認し、SAVE AND CONTINUE を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.09.29.png" alt="" width="1200" height="807" loading="lazy"><p>Summary 画面において、各種パラメータが正しいことを確認の上、BACK TO DASHBOARD を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.09.43.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-02_23.09.46.png" alt="" width="1200" height="807" loading="lazy"><p>次に OAuth client ID を作成します。Credential 画面に遷移し、CREATE CREDENTIAL, OAuth client ID と順に押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.10.30.png" alt="" width="1200" height="807" loading="lazy"><p>実験用のサーバーは <code>localhost:8080</code> に立てる予定なので、Authorization redirect URI として <code>http://localhost:8080/callback</code> を入力し、CREATE を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.11.17.png" alt="" width="1200" height="807" loading="lazy"><p>OAuth クライアントのクライアント ID とクライアントシークレットが作成されました。これらを控えておいてください。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.11.35.png" alt="" width="1200" height="807" loading="lazy"><p>次に、今回利用する Photos Library API を有効にしておきます。Google Photos Library API のページにアクセスし、ENABLE を押下してください。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.32.14.png" alt="" width="1200" height="807" loading="lazy"><p>ここまでで GCP の作業は完了です。次に、ローカル環境でアプリケーションを立て、ブラウザからアクセスします。</p><h3 id="クライアントを実装する"><a href="#クライアントを実装する" class="headerlink" title="クライアントを実装する"></a>クライアントを実装する</h3><p>ここからは、Go によりクライアントアプリケーションを実装し、実際にローカル環境で動かしていきます。なお、テストに使用したソースコードは <a href="https://github.com/tmsick/tech-blog-oauth">https://github.com/tmsick/tech-blog-oauth</a> にアップロードしました。本稿にも <code>main.go</code> の全量を掲載します。</p><p>なお、このアプリケーションは次の環境変数を必要とします。これらは、先ほどの手順で Google から発行されたクライアント ID とクライアントシークレットです。</p><ul><li><code>GOOGLE_CLIENT_ID</code></li><li><code>GOOGLE_CLIENT_SECRET</code></li></ul><p>掲載しているコードは簡単な検証用のコードであり、適切なエラーハンドリングを省略していますのでご承知おきください。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;math/big&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;text/template&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gorilla/sessions&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TokenResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">AccessToken <span class="type">string</span> <span class="string">`json:&quot;access_token&quot;`</span></span><br><span class="line">ExpiresIn   <span class="type">int</span>    <span class="string">`json:&quot;expires_in&quot;`</span></span><br><span class="line">IDToken     <span class="type">string</span> <span class="string">`json:&quot;id_token&quot;`</span></span><br><span class="line">Scope       <span class="type">string</span> <span class="string">`json:&quot;scope&quot;`</span></span><br><span class="line">TokenType   <span class="type">string</span> <span class="string">`json:&quot;token_type&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Photos <span class="keyword">struct</span> &#123;</span><br><span class="line">MediaItems []<span class="keyword">struct</span> &#123;</span><br><span class="line">ID         <span class="type">string</span> <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">ProductURL <span class="type">string</span> <span class="string">`json:&quot;productUrl&quot;`</span></span><br><span class="line">BaseURL    <span class="type">string</span> <span class="string">`json:&quot;baseUrl&quot;`</span></span><br><span class="line">MimeType   <span class="type">string</span> <span class="string">`json:&quot;mimeType&quot;`</span></span><br><span class="line">Filename   <span class="type">string</span> <span class="string">`json:&quot;filename&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;mediaItems&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">lenState        = <span class="number">30</span></span><br><span class="line">lenCodeVerifier = <span class="number">64</span></span><br><span class="line">redirectURI     = <span class="string">&quot;http://localhost:8080/callback&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">googleClientID     <span class="type">string</span></span><br><span class="line">googleClientSecret <span class="type">string</span></span><br><span class="line">store              = sessions.NewCookieStore([]<span class="type">byte</span>(os.Getenv(<span class="string">&quot;SESSION_KEY&quot;</span>)))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">googleClientID = os.Getenv(<span class="string">&quot;GOOGLE_CLIENT_ID&quot;</span>)</span><br><span class="line">googleClientSecret = os.Getenv(<span class="string">&quot;GOOGLE_CLIENT_SECRET&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> googleClientID == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;Env var GOOGLE_CLIENT_ID is required&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> googleClientSecret == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;Env var GOOGLE_CLIENT_SECRET is required&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, handleIndex)</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/oauth&quot;</span>, handleOAuth)</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/callback&quot;</span>, handleCallback)</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/photos&quot;</span>, handlePhotos)</span><br><span class="line">log.Print(<span class="string">&quot;Serving web server at localhost:8080&quot;</span>)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;0.0.0.0:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleIndex</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">tpl, _ := template.ParseFiles(<span class="string">&quot;templates/index.html&quot;</span>)</span><br><span class="line">tpl.Execute(w, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleOAuth</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// Save `state` and `code_verifier` to session</span></span><br><span class="line">session, _ := store.Get(r, <span class="string">&quot;session&quot;</span>)</span><br><span class="line"><span class="comment">// Generate a random state</span></span><br><span class="line">state, _ := randomString(lenState)</span><br><span class="line">session.Values[<span class="string">&quot;state&quot;</span>] = state</span><br><span class="line"><span class="comment">// Generate code_verifier</span></span><br><span class="line">codeVerifier, _ := randomString(lenCodeVerifier)</span><br><span class="line">session.Values[<span class="string">&quot;code_verifier&quot;</span>] = codeVerifier</span><br><span class="line">session.Save(r, w)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate code_challenge</span></span><br><span class="line">b := sha256.Sum256([]<span class="type">byte</span>(codeVerifier))</span><br><span class="line">codeChallenge := base64.URLEncoding.WithPadding(base64.NoPadding).EncodeToString(b[:])</span><br><span class="line"></span><br><span class="line"><span class="comment">// Redirect the user agent == Make a authorization request</span></span><br><span class="line">u, _ := url.Parse(<span class="string">&quot;https://accounts.google.com/o/oauth2/v2/auth&quot;</span>)</span><br><span class="line">q := u.Query()</span><br><span class="line">q.Add(<span class="string">&quot;response_type&quot;</span>, <span class="string">&quot;code&quot;</span>)                                           <span class="comment">// Indicate authorization code grant</span></span><br><span class="line">q.Add(<span class="string">&quot;client_id&quot;</span>, googleClientID)                                       <span class="comment">// The client ID issued by Google</span></span><br><span class="line">q.Add(<span class="string">&quot;state&quot;</span>, state)                                                    <span class="comment">// The random state</span></span><br><span class="line">q.Add(<span class="string">&quot;scope&quot;</span>, <span class="string">&quot;https://www.googleapis.com/auth/photoslibrary.readonly&quot;</span>) <span class="comment">// The scope we need</span></span><br><span class="line">q.Add(<span class="string">&quot;redirect_uri&quot;</span>, redirectURI)                                       <span class="comment">// The redirect URI</span></span><br><span class="line">q.Add(<span class="string">&quot;code_challenge&quot;</span>, codeChallenge)                                   <span class="comment">// Code challenge</span></span><br><span class="line">q.Add(<span class="string">&quot;code_challenge_method&quot;</span>, <span class="string">&quot;S256&quot;</span>)                                   <span class="comment">// Code challenge method</span></span><br><span class="line">u.RawQuery = q.Encode()</span><br><span class="line">http.Redirect(w, r, u.String(), http.StatusFound)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleCallback</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// Confirm `state` matches</span></span><br><span class="line">session, _ := store.Get(r, <span class="string">&quot;session&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> r.URL.Query().Get(<span class="string">&quot;state&quot;</span>) != session.Values[<span class="string">&quot;state&quot;</span>] &#123;</span><br><span class="line">w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line">fmt.Fprintln(w, <span class="string">&quot;Invalid state&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Get `code_verifier`</span></span><br><span class="line">codeVerifier := session.Values[<span class="string">&quot;code_verifier&quot;</span>].(<span class="type">string</span>)</span><br><span class="line"><span class="comment">// Clear session</span></span><br><span class="line">session.Values[<span class="string">&quot;state&quot;</span>] = <span class="string">&quot;&quot;</span></span><br><span class="line">session.Values[<span class="string">&quot;code_verifier&quot;</span>] = <span class="string">&quot;&quot;</span></span><br><span class="line">session.Save(r, w)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make a token request</span></span><br><span class="line">code := r.URL.Query().Get(<span class="string">&quot;code&quot;</span>)</span><br><span class="line">q := url.Values&#123;&#125;</span><br><span class="line">q.Add(<span class="string">&quot;grant_type&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>) <span class="comment">// Indicate token request</span></span><br><span class="line">q.Add(<span class="string">&quot;code&quot;</span>, code)                       <span class="comment">// The authorization code</span></span><br><span class="line">q.Add(<span class="string">&quot;redirect_uri&quot;</span>, redirectURI)        <span class="comment">// The redirect URI</span></span><br><span class="line">q.Add(<span class="string">&quot;code_verifier&quot;</span>, codeVerifier)      <span class="comment">// Code verifier</span></span><br><span class="line">req, _ := http.NewRequest(http.MethodPost, <span class="string">&quot;https://oauth2.googleapis.com/token&quot;</span>, strings.NewReader(q.Encode()))</span><br><span class="line">req.SetBasicAuth(googleClientID, googleClientSecret)</span><br><span class="line">req.Header.Add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">resp, _ := http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Capture the access token we&#x27;ve received</span></span><br><span class="line">body, _ := io.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">var</span> token TokenResponse</span><br><span class="line">json.Unmarshal(body, &amp;token)</span><br><span class="line">session.Values[<span class="string">&quot;access_token&quot;</span>] = token.AccessToken</span><br><span class="line">session.Save(r, w)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Redirect the user agent to the photos page</span></span><br><span class="line">http.Redirect(w, r, <span class="string">&quot;http://localhost:8080/photos&quot;</span>, http.StatusFound)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handlePhotos</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// Fetch photos from Google Photos Library API using the access_token</span></span><br><span class="line">session, _ := store.Get(r, <span class="string">&quot;session&quot;</span>)</span><br><span class="line">accessToken := session.Values[<span class="string">&quot;access_token&quot;</span>].(<span class="type">string</span>)</span><br><span class="line">req, _ := http.NewRequest(http.MethodGet, <span class="string">&quot;https://photoslibrary.googleapis.com/v1/mediaItems&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">req.Header.Add(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Bearer &quot;</span>+accessToken)</span><br><span class="line">resp, _ := http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">body, _ := io.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">var</span> photos Photos</span><br><span class="line">json.Unmarshal(body, &amp;photos)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Render photos</span></span><br><span class="line">tpl, _ := template.ParseFiles(<span class="string">&quot;templates/photos.html&quot;</span>)</span><br><span class="line">tpl.Execute(w, photos)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// randomString generates a secure random string of length `length`.</span></span><br><span class="line"><span class="comment">// It returns an error when `length` is negative or failed to use the platform&#x27;s</span></span><br><span class="line"><span class="comment">// secure pseudorandom number generator.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randomString</span><span class="params">(length <span class="type">int</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> length &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, fmt.Errorf(<span class="string">&quot;cannot generate random string of negative length %d&quot;</span>, length)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s strings.Builder</span><br><span class="line"><span class="keyword">for</span> s.Len() &lt; length &#123;</span><br><span class="line">r, err := rand.Int(rand.Reader, big.NewInt(<span class="number">1</span>&lt;&lt;<span class="number">60</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1&lt;&lt;60 == 2**60 equals to 1,000,000,000,000,000 in hex.</span></span><br><span class="line">s.WriteString(fmt.Sprintf(<span class="string">&quot;%015x&quot;</span>, r))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.String()[:length], <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>アプリケーションのエンドポイントは次の 4 つです。</p><div class="scroll"><table><thead><tr><th>パス</th><th>説明</th></tr></thead><tbody><tr><td><code>/</code></td><td>アプリケーションのインデックス。「Fetch photos from Google Photos」ボタンが設置されている。</td></tr><tr><td><code>/oauth</code></td><td>OAuth 開始エンドポイント。ブラウザを Google Photos API の認可エンドポイントにリダイレクトする。</td></tr><tr><td><code>/callback</code></td><td>リダイレクトエンドポイント。認可レスポンスにより呼び出される。</td></tr><tr><td><code>/photos</code></td><td>認可完了後にブラウザがリダイレクトされるエンドポイント。Google Photos の画像が表示される。</td></tr></tbody></table></div><p>以下、ハンドラごとに処理を説明していきます。</p><ol><li><code>handleIndex()</code></li><li><code>handleOAuth()</code></li><li><code>handleCallback()</code></li><li><code>handlePhotos()</code></li></ol><h4 id="1-handleIndex"><a href="#1-handleIndex" class="headerlink" title="1. handleIndex()"></a>1. <code>handleIndex()</code></h4><p><code>handleIndex()</code> は、静的な HTML をレスポンスしているだけです。</p><h4 id="2-handleOAuth"><a href="#2-handleOAuth" class="headerlink" title="2. handleOAuth()"></a>2. <code>handleOAuth()</code></h4><p>78…86 行目において、ランダムな <code>state</code> と <code>codeVerifier</code> を生成し、ブラウザのセッションに保存しています。</p><p>88…90 行目において、<code>codeVerifier</code> から <code>codeChallenge</code> を生成しています。</p><p>92…103 行目において、認可リクエストの URL を生成し、ブラウザをリダイレクトしています。</p><h4 id="3-handleCallback"><a href="#3-handleCallback" class="headerlink" title="3. handleCallback()"></a>3. <code>handleCallback()</code></h4><p>107…113 行目において、ブラウザが保持している <code>state</code> と <code>code_verifier</code> を取得し、セッションをクリアしています。</p><p>115…120 行目において、ブラウザが保持していた <code>session</code> と認可サーバからレスポンスされた <code>state</code> が等しいことを確認しています。これにより、CSRF 攻撃を防いでいます。</p><p>122…133 行目において、トークンリクエストを生成し、リクエストをおこなっています。</p><p>135…140 行目において、トークンレスポンスからアクセストークンを取得し、ブラウザのセッションに保存しています。</p><p>142…143 行目において、ブラウザを <code>/photos</code> にリダイレクトしています。</p><h4 id="4-handlePhotos"><a href="#4-handlePhotos" class="headerlink" title="4. handlePhotos()"></a>4. <code>handlePhotos()</code></h4><p>147…156 行目において、セッションに保存されたアクセストークンを用いて Google Photos API にアクセスし、画像情報を取得しています。</p><p>158…160 行目において、画像情報 (URL) を含むレスポンスを返却しています。</p><img src="/images/20221012a/スクリーンショット_2022-10-03_0.18.47.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-03_0.18.57.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-03_0.19.03.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-03_0.20.59.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-03_0.21.05.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-03_0.21.12.png" alt="" width="1200" height="807" loading="lazy"><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>OAuth, OpenID 周りには、なんとなく苦手意識があったのですが、今回仕様に基づいてスクラッチで実装することで、技術の基盤とセキュリティ上の考慮事項などを知ることができました。</p><p>IDaaS の採用が当然となった現在において、認証・認可周りの知識は、ウェブ技術者の基礎教養といえると思います。今後も引き続き認証・認可周りの情報をウォッチしていきます。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">仕様上、302 Found 以外の方法でユーザーエージェントをリダイレクトすることも許可されています。特に理由がなければ 302 Found でよいでしょう。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、TIG の吉岡と申します。Tech Blog には初投稿です。&lt;a</summary>
        
      
    
    
    
    <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="OAuth" scheme="https://future-architect.github.io/tags/OAuth/"/>
    
    <category term="認可コードグラント" scheme="https://future-architect.github.io/tags/%E8%AA%8D%E5%8F%AF%E3%82%B3%E3%83%BC%E3%83%89%E3%82%B0%E3%83%A9%E3%83%B3%E3%83%88/"/>
    
    <category term="PKCE" scheme="https://future-architect.github.io/tags/PKCE/"/>
    
  </entry>
  
  <entry>
    <title>Auth0のトークン取得とITPへの対応</title>
    <link href="https://future-architect.github.io/articles/20221007a/"/>
    <id>https://future-architect.github.io/articles/20221007a/</id>
    <published>2022-10-06T15:00:00.000Z</published>
    <updated>2022-10-07T06:18:13.521Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。フューチャーの棚井龍之介と申します。<a href="/articles/20221003a/">認証認可連載</a>の 4 本目を担当しました。</p><p>認証認可周りは最近触りたてでして、普段の開発業務では、Go・React・AWS を利用しています。</p><p>先日、React ベースのモバイル向け Web アプリに Auth0 の認証を実装したところ、Silent Authentication（サイレント認証）のタイミングでブラウザからトークンが消失し、ログイン状態が維持できない現象に遭遇しました。</p><p>調べたところ、Safari に搭載されているトラッキング防止機能の ITP（Intelligent Tracking Prevention &#x2F; インテリジェント・トラッキング・プリベンション）が原因だと判明しました。</p><p>調べる過程で、Cookie の基本的な機能からアドテク周りの技術要素、最近のプライバシー保護トレンドについて触れる機会を得ましたので、技術ブログとして整理しました。</p><p>本記事では、以下の内容を扱います</p><ul><li>Cookie（1st Party、3rd Party）</li><li>ITP（Intelligent Tracking Prevention）</li><li>ITP による、Auth0 の PKCE フローへの影響<ul><li>対応方法</li></ul></li></ul><p>前半は Cookie とプライバシー保護の話で、後半が Auth0 と ITP の話です。</p><h1 id="Cookie-とは"><a href="#Cookie-とは" class="headerlink" title="Cookie とは"></a>Cookie とは</h1><p>Cookie とは、Web サイトに訪れたユーザの情報を、一時的に保存する機能のことです。<br>この「一時保存する機能」により、ユーザのログイン状態を維持することや、Web ページに再訪したときに「この人は、以前にウチのサイトに来た〇〇さんだ！」と判定できます。</p><img src="/images/20221007a/スクリーンショット_2022-10-05_3.12.54.png" alt="" width="1200" height="614" loading="lazy"><p>「以前に来た〇〇さん」と技術的に判定できると、次は「きっと〇〇さんならば…」という「Cookie により収集された個人属性の、Web 広告利用」へと直結させる動きが当然出てきます。</p><p>最近だとプライバシー保護の観点から、こういった Web 広告の規制が強化されるトレンドにあります。例えば、Web サイトのトップページに訪問した際に「Cookie の有効化に同意してください。Yes or No」がポップアップで表示されて、オプトインでの意思表示が求められるのは、このトレンドに乗ったものだと思います。</p><h2 id="Cookie-の分類"><a href="#Cookie-の分類" class="headerlink" title="Cookie の分類"></a>Cookie の分類</h2><p>続いて、Cookie の分類を見ていきます。</p><p>Cookie の発行元が、訪問しているサイト（ドメイン）と同じか別かにより、1st Party Cookie と 3rd Party Cookie と呼び方が変わります。</p><div class="scroll"><table><thead><tr><th>Cookie の発行元と訪問しているサイト(ドメイン)の関係</th><th>Cookie の呼び方</th></tr></thead><tbody><tr><td>同じ（Cookie の発行者は、訪問したサイトの運営者である）</td><td>1st Party Cookie</td></tr><tr><td>異なる（Cookie の発行者は、訪問しサイトとは別の外部の第三者である）</td><td>3rd Party Cookie</td></tr></tbody></table></div><p>主に、外部のサービスを利用して「ユーザ行動に合わせた Web 広告を表示したい（ターゲティング広告を実施したい）」や「ログイン状態管理などの特定の機能を外部に任せたい」ケースで 3rd Party Cookie が利用されることが多いと思います。</p><h1 id="ITP（Intelligent-Tracking-Prevention）とは"><a href="#ITP（Intelligent-Tracking-Prevention）とは" class="headerlink" title="ITP（Intelligent Tracking Prevention）とは"></a>ITP（Intelligent Tracking Prevention）とは</h1><p>ひとこと言うと、ITP は「3rd Party Cookie の利用を禁止する技術」です。</p><p>先ほど、3rd Party Cookie により実現できることの 1 つに「ターゲティング広告（ユーザの行動履歴を元にした、Web 広告最適化）」があると述べました。ターゲティング広告により、各ユーザごとに個別最適化された（高いクリック率を獲得できる見込みの）Web 広告が表示できます。これにより、Web 広告のクリック率向上 → 購入率の向上が見込まれます。アドテク技術の進歩により、この Web 広告の精度が高まるほど、広告掲載ページ・広告を載せたい企業・その仕組みを提供する企業などの「Web マーケティング」界隈にとっては嬉しい世界になります。</p><p>その一方で、プライバシー保護の観点から、以下のような考え方が広まりつつあります。</p><p>①Web 広告の精度が高まる<br>↓<br>② ユーザの趣味嗜好を高精度で特定できる<br>↓<br>③ 高精度な趣味嗜好の情報って、それはもはや個人情報では？<br>↓<br>④ 個人情報を無断でクロスドメインに共有するは、プライバシー保護観点から NG では？<br>（例えば、あるユーザ α の行動履歴を取得した A 社が、その情報を Web 広告機能を提供する B 社に「α の同意がない状況で」共有するケース）</p><p>このような考え方はメガテック企業でも意識され、Safari や Chrome などのブラウザによる規制も進んでいます。</p><p>例えば、Apple では 2017 年から Safari での 3rd Party Cookie の利用制限を段階的に導入しており、iOS14 ではついに Safari だけでなく Chrome・Firefox 含めて 3rd Party Cookie の利用が全面禁止になりました。<br>Google においても、Chrome での 3rd Party Cookie の利用を「2024 年後半に向けて段階的に廃止する可能性がある」と発表し、その代替技術として「プライバシー・サンドボックス」の開発・ユーザテストを進めています。ただ、Google は当初は 2022 年 1 月に規制を開始すると発表していましたが、その後に 2023 年後半に開始予定と延期し、さらに 2024 年後半と再延期しています。</p><p>Safari での ITP 規制状況を見ると、ユーザー情報のクロスサイトトラッキングを規制しようとする Apple と、規制の穴を探すアドテク企業の戦いが垣間見れます。</p><div class="scroll"><table><thead><tr><th>アップデート</th><th>リリース</th><th>規制概要(*1)</th></tr></thead><tbody><tr><td>ITP1.0</td><td>2017 年 9 月</td><td>特定の 3rd Party Cookie は 24 時間で削除</td></tr><tr><td>ITP2.0</td><td>2018 年 9 月</td><td>特定の 3rd Party Cookie は即時削除</td></tr><tr><td>ITP2.1</td><td>2019 年 3 月</td><td>特定の 1st Party Cookie は 7 日間で削除</td></tr><tr><td>ITP2.2</td><td>2019 年 4 月</td><td>特定の 1st Party Cookie は 24 時間で削除</td></tr><tr><td>ITP2.3</td><td>2019 年 9 月</td><td>特定の localstrage 上のデータを即時削除</td></tr><tr><td>iOS13.1</td><td>2020 年 3 月</td><td>全ての 3rd Party Cookie を即時削除</td></tr><tr><td>iOS14.0</td><td>2020 年 9 月</td><td>iOS で稼働する Firefox, Chrome にも ITP を適応開始</td></tr></tbody></table></div><p>(*1)より詳細な規制内容は<a href="https://webkit.org/blog/category/privacy/">こちら</a>を参照お願いします。</p><p>3rd Party Cookie は何もアドテク領域に閉じた技術ではなく、それ以外の分野でも利用されています。<br>次は、ITP により Auth0 のトークンがうまく動かなくなってしまう話に移ります。</p><h1 id="Auth0-のトークン取得フローと-ITP-ブロックへの対応"><a href="#Auth0-のトークン取得フローと-ITP-ブロックへの対応" class="headerlink" title="Auth0 のトークン取得フローと ITP ブロックへの対応"></a>Auth0 のトークン取得フローと ITP ブロックへの対応</h1><p>Auth0 の React 用 SDK（<a href="https://github.com/auth0/auth0-react">auth0-react</a>）を利用する場合、PKCE（Proof Key for Code Exchange）の認証認可フローに従います。フローの詳細は<a href="https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow-with-proof-key-for-code-exchange-pkce">こちらのサイト</a>に記載があります。</p><img src="/images/20221007a/auth0_pkce.png" alt="auth0_pkceフロー" width="1200" height="976" loading="lazy"><p>Auth0 の JavaScript SDK ではログイン成功後、トークンを取得して、ブラウザのインメモリにキャッシュされます（上図での ⑨ で取得した Access Token をインメモリに保存する）。インメモリに保存すると、ページ遷移や画面リロードの度にトークンの再取得が必要で色々と面倒になりそうですが、この辺のトークンリフレッシュを Auth0 側では「Silent Authentication（サイレント認証）」により解決しています。サイレント認証により、ログイン状態を維持しながら、トークンをインメモリでセキュアに保持できます。</p><h2 id="3rd-Party-Cookie-が-ITP-で強制消去される"><a href="#3rd-Party-Cookie-が-ITP-で強制消去される" class="headerlink" title="3rd Party Cookie が ITP で強制消去される"></a>3rd Party Cookie が ITP で強制消去される</h2><p>Auth0 x React でのログイン状態の管理が<br>（1）ID&#x2F;Pass を入力してログインし、トークンを取得<br>（2）サイレント認証でトークンのリフレッシュ、ログイン状態を維持<br>（3）トークンの破棄、ログアウト<br>の 3 つで完結するならばこれで話は終わりですが、昨今の ITP（3rd Party Cookie の禁止）により、② のサイレント認証に失敗するケースが出てきました。</p><p>例えば、会社 Z が Auth0 でログイン機能を実装した Web サービスを運営しているとします。サービスの運営会社 Z と Auth0 では「異なるドメインの会社」になるため、Auth0 の発行したトークンが、Z 社の Web ページ上では 3rd Party Cookie と判定されて、ブラウザにより Cookie が強制消去されるケースが有り得る、ということです。サイレント認証に失敗すると「ログイン状態を維持できない（ページ遷移・リロードの度にログイン処理を求めることになる）」ため、ユーザ体験を大きく損なってしまいます。</p><p>ITP により 3rd Party Cookie が消去されたとき、Auth0 のコンソール画面、Safari の Web Inspector それぞれで以下の挙動が得られます。</p><img src="/images/20221007a/failed_auth0.png" alt="auth0で失敗" width="1200" height="481" loading="lazy"><p>↑<br>Auth0 のコンソール画面では「ログインには成功」しているが「サイレント認証には失敗」している</p><img src="/images/20221007a/failed_emulator.png" alt="サイレント認証に失敗" width="1200" height="212" loading="lazy"><p>↑<br>Web Inspector のネットワークのログから、前述した PKCE フロー ③ の <code>/authorize</code> は Call されているが、3rd Party Cookie がブラウザにより消去されているため、⑦ の <code>/oauth/token</code> が Call されない。→ PKCE フローが途中終了しているため、認証は「失敗」である。</p><h2 id="ITP-への対応方法"><a href="#ITP-への対応方法" class="headerlink" title="ITP への対応方法"></a>ITP への対応方法</h2><p>サイレント認証が ITP により失敗する問題には、<a href="https://auth0.com/docs/troubleshoot/authentication-issues/renew-tokens-when-using-safari">Auth0 公式が 2 つの対応方法</a>を提示しています。</p><p>①<a href="https://auth0.com/docs/secure/tokens/refresh-tokens/refresh-token-rotation">リフレッシュトークンローテーション</a>を設定する<br>②<a href="https://auth0.com/docs/customize/custom-domains">カスタムドメイン</a>を設定する</p><p>この 2 つを設定すれば、ITP による 3rd Party Cookie 消失問題には対応できます。</p><p>また、ブラウザの設定変更で「ITP をオフにする」ことも可能なので、問題切り分け手法の 1 つとして覚えておくと、後々に役立つかも知れません。</p><p>以下は iPhone のブラウザ設定画面です。<br>スクショは ITP がオンの状態で撮影したものなので、Safari は「『サイト越えトラッキングを防ぐ』をオフ」にすることで、Chrome は「『Web サイト超えトラッキングを許可』をオン」にすることで、ITP を無効化できます。</p><img src="/images/20221007a/スクリーンショット_2022-10-05_2.46.11.png" alt="" width="1200" height="985" loading="lazy"><p>以下はリフレッシュトークン・カスタムドメインのどちらも設定せずに、エミュレーターの Safari 設定で ITP をオフにした場合の挙動です。Auth0 のコンソール画面、Web Inspector のログから、<code>/authorize</code>と<code>/oauth/token</code>が Call されて、PKCE フローが正常終了してサイレント認証に成功していることが分かります。</p><img src="/images/20221007a/スクリーンショット_2022-10-05_2.57.58.png" alt="" width="1200" height="712" loading="lazy"><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>モバイル向けの Web ページを作成してリリースし、リリース後の動作チェックで「あれ、iOS だとログイン状態が維持できてない！？」と気づき、OAuth2.0 の仕様や PKCE の確認、インスペクタのログと認証フローと付き合わせながら、処理に失敗している場所の特定にまで至れました。①「ITP」について知見がなかったこと、② 事前チェックが Android と Chrome シミュレーターだけで、iOS は工数削減のため未実施だったことが根原因なのですが、スマホと PC・iOS と Android で色々細かいところが違うのなー（なので、モバイル実機テストは Android と iOS は両方やろう）と再認識する機会になりました。</p><p>次回は、山田勇一さんの「スマホの OSS」です！</p><h2 id="参照サイト"><a href="#参照サイト" class="headerlink" title="参照サイト"></a>参照サイト</h2><ul><li><a href="https://webkit.org/blog/category/privacy/">Webkit</a></li><li><a href="https://auth0.com/docs/troubleshoot/authentication-issues/renew-tokens-when-using-safari">Troubleshoot Renew Tokens When Using Safari</a></li><li><a href="https://dangerous-animal141.hatenablog.com/entry/2021/06/08/220637">Auth0 の Silent Authentication (サイレント認証)と Refresh Token Rotation (リフレッシュトークンローテーション)を完全に理解した (い)</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。フューチャーの棚井龍之介と申します。&lt;a</summary>
        
      
    
    
    
    <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
    <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
    <category term="AuthN" scheme="https://future-architect.github.io/tags/AuthN/"/>
    
    <category term="ITP" scheme="https://future-architect.github.io/tags/ITP/"/>
    
    <category term="Cookie" scheme="https://future-architect.github.io/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>Kong API Gatewayを使ってResource Serverを保護する</title>
    <link href="https://future-architect.github.io/articles/20221006a/"/>
    <id>https://future-architect.github.io/articles/20221006a/</id>
    <published>2022-10-05T15:00:00.000Z</published>
    <updated>2022-10-06T01:04:45.314Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。TIGのLEEです。<a href="/articles/20221003a/">認証認可連載</a>の3本目です。</p><p>前回はAWS API Gatewayを利用して、OIDC&#x2F;OAuth2.0におけるResource ServerをCustom Authorizerで保護する記事を書いてました。</p><p><a href="https://future-architect.github.io/articles/20210610a/">https://future-architect.github.io/articles/20210610a/</a></p><p>今回はAPI Gatewayのミドルウェア製品となるKongを使ってResource Serverを構築する方法について話します。</p><h1 id="Kong-Gateway"><a href="#Kong-Gateway" class="headerlink" title="Kong Gateway"></a>Kong Gateway</h1><img src="/images/20221006a/gateway_overview.png" alt="gateway_overview.png" width="1200" height="507" loading="lazy"><p><a href="https://github.com/Kong/kong">Kong</a>はOSSから始まったAPIサーバのトラフィックを管理するためのミドルウェアです。</p><p>NginxベースにLuaJITエンジンを使ってLuaスクリプトが組み込めるWebプラットフォームの<a href="https://openresty.org/">OpenResty</a>を採用し、Luaで書かれた様々なPlug-inをデフォルトで揃え、それを組み立てることでAPIGatewayの機能を実装しています。また、Luaスクリプトで新しいカスタムPlug-inを作りそれを組み込むことも可能です。</p><p>Enterprise版が登場してからはAPIGateway以外にも様々さサービスがありますが、今回はKong Gatewayにのみ注目して行きたいです。</p><h2 id="Kongの構造"><a href="#Kongの構造" class="headerlink" title="Kongの構造"></a>Kongの構造</h2><p>構築の話になる前にかんたんにKongの構造を触れていきます。上の図のようにKongは基本的にConsumer&#x2F;Route&#x2F;Service&#x2F;LoadBalancer(Upstream)の4つのレイヤリングが存在します。Kongで使う様々なPlug-inはこの4つのレイヤーのどこか、もしくはGlobalに組み込むこともできます。</p><ul><li><strong>Consumer</strong>: Kongを実際利用するAPIClient(もしくはユーザ)を表すEntity</li><li><strong>Route</strong>: Requestのルールを定義するEntity</li><li><strong>Service</strong>: KongがProxyするBackendServiceを表すEntity</li><li><strong>Upstream</strong>: Backendの負荷分散やHealthCheckなどに使う仮想ホストのEntity</li></ul><h1 id="Actors"><a href="#Actors" class="headerlink" title="Actors"></a>Actors</h1><p>構築にあたり、まずはOIDCの役者を揃えましょう。Front&#x2F;Backで分離された認証認可設計のためには、少なくとも下記3つのActorが必要になります。</p><img src="/images/20221006a/kong-jwt.drawio.png" alt="kong-jwt.drawio.png" width="928" height="501" loading="lazy"><h2 id="Keycloak-as-OpenID-Provider-Authorization-Server"><a href="#Keycloak-as-OpenID-Provider-Authorization-Server" class="headerlink" title="Keycloak as OpenID Provider (Authorization Server)"></a><a href="https://www.keycloak.org/">Keycloak</a> as OpenID Provider (Authorization Server)</h2><p><a href="https://www.keycloak.org/getting-started/getting-started-docker">https://www.keycloak.org/getting-started/getting-started-docker</a></p><p>中心となる認可サーバはOSSのKeycloakを使いましょう。ID管理、トークンや証明書の発行&amp;管理、認証画面提供などの役割があります。<br>今回は上記リンク通り、Dockerを利用して構築します。Client設定は下記のVueの設定に従いましょう。<br>Keycloak構築はチュートリアル通りで問題ないので、詳細な実装方法は省略します。</p><h2 id="Vue-as-Relying-Party-Client"><a href="#Vue-as-Relying-Party-Client" class="headerlink" title="Vue as Relying Party (Client)"></a><a href="https://vuejs.org/">Vue</a> as Relying Party (Client)</h2><p><a href="https://www.keycloak.org/securing-apps/vue">https://www.keycloak.org/securing-apps/vue</a></p><p>FrontendとなるClientはVueを使います。認証後トークンの保持&amp;リフレッシュ、APIサーバへリクエストを送ったりします。<br>今回はVueを使いますが、<a href="https://www.npmjs.com/package/keycloak-js">keycloak-js</a>さえ組み込めば、どのFrameworkでもかんたんにRelyingPartyを作ることができます。<br>Keycloak同様リンク通り実装すれば問題ないので、詳細は省略します。</p><h2 id="Kong-as-Resource-Server-API-Server-Backend-Service"><a href="#Kong-as-Resource-Server-API-Server-Backend-Service" class="headerlink" title="Kong as Resource Server (API Server, Backend Service)"></a><a href="https://konghq.com/">Kong</a> as Resource Server (API Server, Backend Service)</h2><p><a href="https://mockbin.org/">https://mockbin.org/</a></p><p>今回の保護対象となるResourceServerは、Gatewayとして前段に位置するKongと本丸となるBackend Service (API Server)に構成されます。Backend ServiceとしてはKongのチュートリアルで使われる<a href="https://mockbin.org/">Mockbin</a>をそのまま使います。</p><h1 id="Kongの構築"><a href="#Kongの構築" class="headerlink" title="Kongの構築"></a>Kongの構築</h1><p><a href="https://docs.konghq.com/gateway/latest/install/">https://docs.konghq.com/gateway/latest/install/</a></p><p>まずはKongをインストールします。Dockerなど便利なオプションもあるので好きな方法でインストールしましょう。<br>Kongは設定の保存先としてDBを使うのでPostgreSQLもインストールが必要です。</p><p>Kongはデフォルトで</p><ul><li>Port 8001：あらゆるEntity設定を行うのAdminAPI</li><li>Port 8000：実際トラフィックをさばくProxy</li></ul><p>に分かれています。</p><h2 id="Service-amp-Routing"><a href="#Service-amp-Routing" class="headerlink" title="Service &amp; Routing"></a>Service &amp; Routing</h2><p><a href="https://docs.konghq.com/gateway/latest/get-started/services-and-routes/">https://docs.konghq.com/gateway/latest/get-started/services-and-routes/</a></p><p>次にKongとBackendServiceとなるMockbinをつないで、KongのURLにアクセスするとMockbinのレスポンスが出るようにします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -i -s -X POST http://localhost:8001/services \</span><br><span class="line">  --data name=example_service \</span><br><span class="line">  --data url=<span class="string">&#x27;http://mockbin.org&#x27;</span></span><br><span class="line">curl -i -X POST http://localhost:8001/services/example_service/routes \</span><br><span class="line">  --data <span class="string">&#x27;paths[]=/mock&#x27;</span> \</span><br><span class="line">  --data name=example_route</span><br></pre></td></tr></table></figure><p>上記のように設定することでKongの<code>/mock</code>へのアクセスが、Mockbinの<code>/</code>にProxyされるようになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET http://localhost:8000/mock/requests</span><br></pre></td></tr></table></figure><p>そうすると上のようなCurlでMockbinのAPIパスである<code>/requests</code>のレスポンスが取得できます。</p><h1 id="APIを保護する"><a href="#APIを保護する" class="headerlink" title="APIを保護する"></a>APIを保護する</h1><p>ここまで下準備が整ったところで、本題である認証機能実装に入ります。<br>ClientからのリクエストはBearerTokenとしてKeycloakが発行したJWTを乗せないと拒否するようにしたいので、トークンを検証するためにKong公式の<a href="https://docs.konghq.com/hub/kong-inc/jwt/">JWTプラグイン</a>を使います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:8001/plugins -d <span class="string">&quot;name=jwt&quot;</span></span><br><span class="line">curl -i http://localhost:8000/mock/requests <span class="comment"># 401 Unauthorized</span></span><br></pre></td></tr></table></figure><p>今回はJWTプラグインをGlobalに設定しますが、特定のServiceやRouteに限定して設定することも可能です。</p><h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><p>次はConsumerの設定です。ConsumerはAPI Clientを表すEntityですが、今回の場合は特定認可サーバ(Keycloak)に認証済みのユーザ全員を表すために予め設定するものになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:8001/consumers -d <span class="string">&quot;username=authorized_user&quot;</span></span><br></pre></td></tr></table></figure><h2 id="JWT-Credential"><a href="#JWT-Credential" class="headerlink" title="JWT Credential"></a>JWT Credential</h2><p>最後にConsumerにJWTを検証するための公開鍵を設定することで、「この検証されたトークンのBearerはこのConsumerで間違いない」ということを認証させるための設定をします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:8001/consumers/authorized_user/jwt \</span><br><span class="line">-H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">-d <span class="string">&#x27;&#123;&quot;key&quot;: &quot;http://localhost:8080/realms/&#123;REALM_NAME&#125;&quot;,</span></span><br><span class="line"><span class="string">     &quot;algorithm&quot;: &quot;RS256&quot;,</span></span><br><span class="line"><span class="string">     &quot;rsa_public_key&quot;: &quot;-----BEGIN PUBLIC KEY-----\nMIIBI...QIDAQAB\n-----END PUBLIC KEY-----&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="key"><a href="#key" class="headerlink" title="key"></a><code>key</code></h3><p>JWTのペイロード<code>iss</code>と同じ値を設定します。<br>このAPIにアクセスできるユーザ(<code>authorized_user</code>)は、みんな同じ認可サーバ(<code>Issuer</code>)から発行されたトークンを持ってる(<code>Bearer</code>)ことを意味します。</p><p>JWTプラグインのデフォルト設定で<code>config.key_claim_name=iss</code>となるので、別のClaimの値にしたい場合(例えば<code>aud</code>か<code>azp</code>など)はAdminAPIの<code>/plugins/&#123;jwt plug-in ID&#125;</code>をPATCHなどして変更も可能です。</p><h3 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a><code>algorithm</code></h3><p>Keycloakでデフォルトで発行するAccessToken(JWT)のアルゴリズムである<code>RS256</code>を指定します。<br>注意するところは、もしこの設定のリクエストで下記の<code>rsa_public_key</code>のPEM形式が正しくない場合でも、このフィールドのエラーメッセージが出ます。</p><h3 id="rsa-public-key"><a href="#rsa-public-key" class="headerlink" title="rsa_public_key"></a><code>rsa_public_key</code></h3><p>Keycloakは同じRealmのユーザには同じ公開鍵でJWTを署名しているので、AdminConsoleの<code>Realm Settings &gt; Keys</code>から<code>RS256</code>の公開鍵をPEM形式でセットします。<br>一般的にRS256のJWT検証に使われるJWKs Endpointの証明書(<code>x5c</code>)と違い、公開鍵であることに注意しましょう。</p><h1 id="実際リクエストを送ってみる"><a href="#実際リクエストを送ってみる" class="headerlink" title="実際リクエストを送ってみる"></a>実際リクエストを送ってみる</h1><p>普通アプリを作るならばここでClientであるVue上でKeycloakから取得したAccessToken(JWT)を<code>Authorization</code>ヘッダーに載せ、KongのAPIにアクセスするコードを書くことになります。<br>しかし、ここではKongの機能を確認するだけでいいので、Vueが保持するKeycloakのインスタンスをダンプさせAccessTokenを取得し、curlを使います。</p><img src="/images/20221006a/スクリーンショット_2022-10-06_4.38.57.png" alt="スクリーンショット_2022-10-06_4.38.57.png" width="1200" height="707" loading="lazy"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:8000/mock/requests -H <span class="string">&quot;Authorization: Bearer eyJhbGciOiJS...&quot;</span> | jq .</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="string">&quot;authorization&quot;</span>: <span class="string">&quot;Bearer eyJhbGciOiJS...&quot;</span>,</span><br><span class="line">        <span class="string">&quot;x-consumer-username&quot;</span>: <span class="string">&quot;authorized_user&quot;</span>,</span><br><span class="line">        <span class="string">&quot;x-credential-identifier&quot;</span>: <span class="string">&quot;http://localhost:8080/realms/&#123;REALM_NAME&#125;&quot;</span>,</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>そうするとMockbinが受け取ったHeaderを上記のようなレスポンスとして返してくれます。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>といった感じで簡単に触ってみましたが、いかがだったでしょうか。</p><p>今回は割愛しましたが、<code>exp</code>Claimで有効期限をチェックすることも可能ですし、設定の<code>config.key_claim_name</code>とプラグインを適用するRoute&#x2F;Serviceを調整する機能を組み合わせることで認可機能を実装することも可能です。</p><p>個人的にはどのアカウントからのリクエストかわかるように、ペイロードの<code>sub</code>など一部のClaimを後ろにヘッダーとして流せる機能があったら良かったなとも思いましたが、例えば<a href="https://docs.konghq.com/hub/yesinteractive/kong-jwt2header/">こういったカスタムプラグイン</a>を組み合わせることでなんとかなりそうです。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;こんにちは。TIGのLEEです。&lt;a href=&quot;/articles/20221003a/&quot;&gt;認証認可連載&lt;/a&gt;の3本目です。&lt;/p&gt;
&lt;p&gt;前回はAWS API Gatewayを利用して、OIDC&amp;#x2F;OAuth2.0におけるResource</summary>
        
      
    
    
    
    <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
    <category term="Kong" scheme="https://future-architect.github.io/tags/Kong/"/>
    
    <category term="OAuth" scheme="https://future-architect.github.io/tags/OAuth/"/>
    
    <category term="openid_connect" scheme="https://future-architect.github.io/tags/openid-connect/"/>
    
  </entry>
  
  <entry>
    <title>Casbinで始めるアクセス制御</title>
    <link href="https://future-architect.github.io/articles/20221004a/"/>
    <id>https://future-architect.github.io/articles/20221004a/</id>
    <published>2022-10-03T15:00:00.000Z</published>
    <updated>2022-10-04T02:01:37.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。<a href="/articles/20221003a/">認証認可連載</a>の2本目です。</p><p>認証認可がテーマの中で、アクセス制御と聞くとちょっと外れているかもと思いましたが、<a href="https://casbin.io/">Casbin</a>について紹介します。</p><p>トップページにも <code>An authorization library that supports access control models like ACL...</code> とあり、アクセス制御を支援する認可ライブラリだよって書いているので、OKと判断しました。</p><h2 id="Casbinについて"><a href="#Casbinについて" class="headerlink" title="Casbinについて"></a>Casbinについて</h2><p>ACL、RBAC、ABACなどの様々なモデルでアクセス制御を行えるライブラリです。</p><p>私が最初に存在を知ったのは、<a href="https://github.com/avelino/awesome-go#authentication-and-oauth">avelino&#x2F;awesome-go</a> に載っていたことからだったので、てっきりGo言語のみのライブラリかと思っていました。</p><p>実際はドキュメントを見ると、複数の言語をサポートしています。Go以外にも、Java, Node.js, PHP, Python, .NET, C#, C++, Rust, Delphi, Lua, Dart, Elixirに対応しているとのこと（言語によっては一部の機能が使えないなどあるようです。）</p><p><a href="https://casbin.org/docs/ja/overview">ドキュメント</a>に書いてることがシンプルだったのでそのまま転載、抜粋します。</p><p>Casbinが行うこと：</p><ol><li><code>&#123;subject, object, action&#125;</code> の形式や独自定義のカスタマイズされた形式のポリシーを適用します</li><li>アクセス制御モデルとそのポリシーの保存をハンドリングします</li><li>ロール・ユーザー間のマッピングとロール・ロール間のマッピング（RBACのロール階層管理</li><li>root や administrator のようなスーパーユーザのサポート</li><li>ルールのマッチングをサポートする複数の組み込み演算子もサポートします。 例えば、 keyMatch はリソース キー <code>/foo/bar</code> をパターン <code>/foo*</code> のマッピング</li></ol><p>Casbinが行わないこと：</p><ol><li>認証 (ログイン時の ユーザー名 と パスワード の検証)</li><li>ユーザーまたはロールのリスト管理。 プロジェクトがこれらのエンティティを管理する方が利便性が高いと考えています。 Casbinはパスワードを保管しない</li></ol><p>仕組みとしては、 PERM メタモデル (Policy, Effect, Request, Matchers) にもとづいて動作するとのこと。</p><h2 id="ACL、RBAC、ABACについて"><a href="#ACL、RBAC、ABACについて" class="headerlink" title="ACL、RBAC、ABACについて"></a>ACL、RBAC、ABACについて</h2><p>それぞれ用語だけ簡単に触れます。</p><ul><li>ACL(Access Controll List)<ul><li>アクセス制御</li></ul></li><li>RBAC(Role Based Access Control)<ul><li>ロールベースアクセス制御</li></ul></li><li>ABAC(Attribute Based Access Control)<ul><li>属性ベースアクセス制御</li></ul></li></ul><p>アクセス制御について詳しい解説は、次のようなサイトを見ると良いと思います。</p><ul><li><a href="https://kenfdev.hateblo.jp/entry/2020/01/13/115032">https://kenfdev.hateblo.jp/entry/2020/01/13/115032</a></li><li><a href="https://ja.wikipedia.org/wiki/%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E5%88%B6%E5%BE%A1%E3%83%AA%E3%82%B9%E3%83%88">https://ja.wikipedia.org/wiki/%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E5%88%B6%E5%BE%A1%E3%83%AA%E3%82%B9%E3%83%88</a></li><li><a href="https://www.cloudflare.com/ja-jp/learning/access-management/role-based-access-control-rbac/">https://www.cloudflare.com/ja-jp/learning/access-management/role-based-access-control-rbac/</a></li><li><a href="https://www.okta.com/jp/identity-101/role-based-access-control-vs-attribute-based-access-control/">https://www.okta.com/jp/identity-101/role-based-access-control-vs-attribute-based-access-control/</a></li></ul><h2 id="PERM-メタモデル-について"><a href="#PERM-メタモデル-について" class="headerlink" title="PERM メタモデル について"></a>PERM メタモデル について</h2><p>Casbin以外で聞いたことが無いですが（一般用語でしたらすいません）、Policy, Effect, Request, Matchersの略です。</p><img src="/images/20221004a/casbin_image.png" alt="casbin_image.png" width="1200" height="531" loading="lazy"><p>ファイルシステムのACLのイメージ図です。ポリシー定義がそのファイルの権限を誰が持っているかのリストです。モデル定義はそれをもとにどのように動作させるかを示しています。</p><p>図だと、以下を示しています。</p><ul><li>aliceはdata1を読み取りOK</li><li>bobはdata2を書き込みOK</li></ul><p>sub, obj, actは <code>だれ</code>が、<code>何</code>を、<code>どうする</code> に置き換えるとイメージしやすいと思います。</p><h2 id="触ってみる（Go）"><a href="#触ってみる（Go）" class="headerlink" title="触ってみる（Go）"></a>触ってみる（Go）</h2><p>GoでどのようにCasbinを動かすのか、触ってみます。</p><p>最初にPolicyを定義します。実用的にはPostgreSQL&#x2F;MySQLといったDBやAmazon S3などに配備すると思います。そういったAdaptorも用意されています。今回は簡易的にCSVファイルを用います。</p><p>例としてRBACをイメージしています。</p><figure class="highlight plaintext"><figcaption><span>policy.csv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p, admin, file1, read</span><br><span class="line">p, admin, file2, read</span><br><span class="line">p, admin, file3, read</span><br><span class="line">p, Aさん, file4, read</span><br><span class="line">g, Bさん, file5, read</span><br><span class="line">g, Aさん, admin</span><br></pre></td></tr></table></figure><p>見たまんまですが、adminロールを持っている人はfile1~file3に対して権限があり、Aさんのみadminです。<br>また、Aさんはfile4, Bさんはfile5に権限を個別に持っています。</p><p>Goのコードとしては、モデルのロード、ポリシーのロードを行い生成する <code>casbin.NewEnforcer()</code> がメインどころです。このインスタンスを生成できるとあとは <code>Enforce()</code> で判定可能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/casbin/casbin/v2&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/casbin/casbin/v2/model&quot;</span></span><br><span class="line">fileadapter <span class="string">&quot;github.com/casbin/casbin/v2/persist/file-adapter&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">modelParam, err := model.NewModelFromString(<span class="string">`</span></span><br><span class="line"><span class="string">[request_definition]</span></span><br><span class="line"><span class="string">r = sub, obj, act</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[policy_definition]</span></span><br><span class="line"><span class="string">p = sub, obj, act</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[role_definition]</span></span><br><span class="line"><span class="string">g = _ , _</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[policy_effect]</span></span><br><span class="line"><span class="string">e = some(where (p.eft == allow))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[matchers]</span></span><br><span class="line"><span class="string">m = g(r.sub, p.sub) &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;NewModelFromString: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enforcer, err := casbin.NewEnforcer(modelParam, fileadapter.NewAdapter(<span class="string">&quot;policy.csv&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;NewEnforcer: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">in := [][]any&#123;</span><br><span class="line">&#123;<span class="string">&quot;Aさん&quot;</span>, <span class="string">&quot;file1&quot;</span>, <span class="string">&quot;read&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Aさん&quot;</span>, <span class="string">&quot;file1&quot;</span>, <span class="string">&quot;write&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Aさん&quot;</span>, <span class="string">&quot;file4&quot;</span>, <span class="string">&quot;read&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Bさん&quot;</span>, <span class="string">&quot;file1&quot;</span>, <span class="string">&quot;read&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> in &#123;</span><br><span class="line">ok, err := enforcer.Enforce(v...)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;enforce: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v: %v\n&quot;</span>, v, ok)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを動かすと、次のように想定通りの結果を得られます。</p><figure class="highlight plaintext"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Aさん file1 read]: true</span><br><span class="line">[Aさん file1 write]: false</span><br><span class="line">[Aさん file4 read]: true</span><br><span class="line">[Bさん file1 read]: false</span><br></pre></td></tr></table></figure><p>CasbinのAPIの使い方で言えば、判定するための実装そのものより、モデルのmatcherの書き方や、これらの定義をどのようにロードさせたり、変更があった場合に追随させるかといったところの方が難しいと思います。</p><p>matcherの文法:</p><ul><li><a href="https://casbin.io/ja/docs/function">https://casbin.io/ja/docs/function</a> にかかれている通り、組み込み関数が使えます。<ul><li>ワイルドカード指定などもこれで対応できます</li></ul></li></ul><p>adaptor:</p><ul><li><a href="https://casbin.io/docs/adapters">https://casbin.io/docs/adapters</a> に記載されている通り、複数のデータソースに対応しています。地味に<code>Ent</code>や<code>sqlx</code> といったORマッパーも対応していて細かいです<ul><li><code>AutoSave</code> ですが、enforcerは <code>UpdatePolicy()</code> で動的に定義を変更することが可能なため、それを自動で保存する機能です</li><li>例えば、何か新しいファイルやレコードが追加された時に権限を更新→自動で永続化先まで反映してくれるといった具合です</li></ul></li></ul><h2 id="HTTPサーバの利用できるAPIをアクセス制御する"><a href="#HTTPサーバの利用できるAPIをアクセス制御する" class="headerlink" title="HTTPサーバの利用できるAPIをアクセス制御する"></a>HTTPサーバの利用できるAPIをアクセス制御する</h2><img src="/images/20221004a/casbin_server.drawio.png" alt="casbin_server.drawio.png" width="1200" height="486" loading="lazy"><p>さきほどの例だとあまりイメージが付きにくいと思うので、Web APIの URL＋Method でアクセス制限する例を実装していみます。</p><p>ここでは説明のためスクラッチで書いていますが、Echo, Gin、Chiなどすでにミドルウェアで準備されています。</p><ul><li><a href="https://casbin.io/ja/docs/middlewares">https://casbin.io/ja/docs/middlewares</a></li></ul><p>今回は <a href="https://github.com/go-chi/chi">go-chi</a> を用いて実装します。それっぽい例を探すのが大変だっため、<a href="https://github.com/go-chi/chi/tree/master/_examples/rest">_examples&#x2F;rest</a> を流用しました。オリジナルのコードはそちらを参照ください。</p><p>まずはモデル定義です。</p><figure class="highlight plaintext"><figcaption><span>model.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[request_definition]</span><br><span class="line">r = sub, obj, act</span><br><span class="line"></span><br><span class="line">[policy_definition]</span><br><span class="line">p = sub, obj, act</span><br><span class="line"></span><br><span class="line">[policy_effect]</span><br><span class="line">e = some(where (p.eft == allow))</span><br><span class="line"></span><br><span class="line">[matchers]</span><br><span class="line">m = r.sub == p.sub &amp;&amp; keyMatch(r.obj, p.obj) &amp;&amp; (r.act == p.act || p.act == &quot;*&quot;)</span><br></pre></td></tr></table></figure><p>最後のmachersだけ、条件が増えています。<br><code>keyMatch</code> はワイルドカードを許容する関数です。例えば、 <code>/articles/*</code> で <code>/articles/1234</code> とか、 <code>/articles/1234/comments/5678</code> などを許容したいので利用しています。詳細は<a href="https://casbin.io/docs/function#:~:text=Example-,keyMatch,-a%20URL%20path">こちら</a>を参照ください。<br>今回はワイルドカードで許容できるようにしたいので、 <code>act</code> 側はORで繋いでいます。 <code>keyMatch</code> だと GET, POST, DELETE などを <code>*</code> で許容できなかったのでこの書き方をしています。</p><p>ポリシーは今回もCSVファイルで定義します。</p><figure class="highlight plaintext"><figcaption><span>policy.csv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p, guest, /, *</span><br><span class="line">p, guest, /ping, *</span><br><span class="line">p, member, /, GET</span><br><span class="line">p, member, /ping, GET</span><br><span class="line">p, member, /articles, GET</span><br><span class="line">p, member, /articles/*, GET</span><br><span class="line">p, owner, /, GET</span><br><span class="line">p, owner, /ping, GET</span><br><span class="line">p, owner, /articles, *</span><br><span class="line">p, owner, /articles/*, *</span><br><span class="line">p, admin, /*, *</span><br></pre></td></tr></table></figure><p>全てロールで、guest &lt; member &lt; owner &lt; admin の順番で権限が強くなるイメージです。</p><p>次に、Casbinの判定をchiのミドルウェアに設定する実装イメージを書いてみました。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line">r := chi.NewRouter()</span><br><span class="line">r.Use(middleware.RequestID)</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Casbinのモデル、ポリシーをロード</span></span><br><span class="line">casbinModel, err := model.NewModelFromFile(<span class="string">&quot;model.conf&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;NewModelFromFile: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">enforcer, err := casbin.NewEnforcer(casbinModel, fileadapter.NewAdapter(<span class="string">&quot;policy.csv&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;NewEnforcer: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ミドルウェアに設定</span></span><br><span class="line">r.Use(CasbinAuthorizer(enforcer))</span><br></pre></td></tr></table></figure><p>続いてミドルウェア本体です。かなり端折って書いています。コードコメントにも書いていますが、本来はログイン後にセッションか何かにユーザーIDを載せ、紐づくユーザーロールをDBから取得するようなイメージでいます（あるいはJSTトークンにロールを載せてもらうかなど）。取得したロールも、本来は http.Requestの <code>context.Context</code> に載せて引き回した方が自然かもしれませんが、簡易的にリクエストヘッダーから取っています。</p><p>main関数側で設定した <code>casbin.Enforcer</code> で、リクエストを検証して、OKであれば後続へ。NGであれば403を返します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CasbinAuthorizer</span><span class="params">(e *casbin.Enforcer)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(next http.Handler)</span></span> http.Handler &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(next http.Handler)</span></span> http.Handler &#123;</span><br><span class="line">fn := <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 何かしらミドルウェアの前処理（セッションやJWTトークンから取得）でロールがリクエストヘッダーに入っているものとする</span></span><br><span class="line">role := r.Header.Get(<span class="string">&quot;user_role&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> role == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">role = <span class="string">&quot;guest&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// casbinでリクエストを検証（ロール、URL、メソッド）</span></span><br><span class="line">res, err := e.Enforce(role, r.URL.Path, r.Method)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> res &#123;</span><br><span class="line">next.ServeHTTP(w, r)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> http.HandlerFunc(fn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実際にcurlで試してみます。ロールをリクエストヘッダで切り替えていますが、本来はこれだと意味がないので、ログイン処理などを追加して、サーバ側でロールを判定するように改修し、クライアントがロールを指定できなくする必要があります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># guest ロール</span></span><br><span class="line">$ curl  http://localhost:3333/ping</span><br><span class="line">pong</span><br><span class="line"></span><br><span class="line">$ curl  http://localhost:3333/articles</span><br><span class="line">Forbidden</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># member ロール</span></span><br><span class="line">$ curl -H <span class="string">&#x27;user_role:member&#x27;</span>  http://localhost:3333/articles</span><br><span class="line">[&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;user_id&quot;</span>:100,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;Hi&quot;</span>,<span class="string">&quot;slug&quot;</span>:<span class="string">&quot;hi&quot;</span>,<span class="string">&quot;user&quot;</span>:&#123;<span class="string">&quot;id&quot;</span>:100,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Peter&quot;</span>,<span class="string">&quot;role&quot;</span>:<span class="string">&quot;collaborator&quot;</span>&#125;,<span class="string">&quot;elapsed&quot;</span>:10&#125;,&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;2&quot;</span>,<span class="string">&quot;user_id&quot;</span>:200,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;sup&quot;</span>,<span class="string">&quot;slug&quot;</span>:<span class="string">&quot;sup&quot;</span>,<span class="string">&quot;user&quot;</span>:&#123;<span class="string">&quot;id&quot;</span>:200,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Julia&quot;</span>,<span class="string">&quot;role&quot;</span>:<span class="string">&quot;collaborator&quot;</span>&#125;,<span class="string">&quot;elapsed&quot;</span>:10&#125;,&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;3&quot;</span>,<span class="string">&quot;u</span></span><br><span class="line"><span class="string">ser_id&quot;</span>:300,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;alo&quot;</span>,<span class="string">&quot;slug&quot;</span>:<span class="string">&quot;alo&quot;</span>,<span class="string">&quot;elapsed&quot;</span>:10&#125;,&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;4&quot;</span>,<span class="string">&quot;user_id&quot;</span>:400,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;bonjour&quot;</span>,<span class="string">&quot;slug&quot;</span>:<span class="string">&quot;bonjour&quot;</span>,<span class="string">&quot;elapsed&quot;</span>:10&#125;,&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;5&quot;</span>,<span class="string">&quot;user_id&quot;</span>:500,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;whats up&quot;</span>,<span class="string">&quot;slug&quot;</span>:<span class="string">&quot;whats-up&quot;</span>,<span class="string">&quot;elapsed&quot;</span>:10&#125;]</span><br><span class="line"></span><br><span class="line">$ curl -H <span class="string">&#x27;user_role:member&#x27;</span> -X DELETE http://localhost:3333/articles/1</span><br><span class="line">Forbidden</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># owner ロール</span></span><br><span class="line">$ curl -H <span class="string">&#x27;user_role:owner&#x27;</span> -X DELETE http://localhost:3333/articles/1</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;user_id&quot;</span>:100,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;Hi&quot;</span>,<span class="string">&quot;slug&quot;</span>:<span class="string">&quot;hi&quot;</span>,<span class="string">&quot;user&quot;</span>:&#123;<span class="string">&quot;id&quot;</span>:100,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Peter&quot;</span>,<span class="string">&quot;role&quot;</span>:<span class="string">&quot;collaborator&quot;</span>&#125;,<span class="string">&quot;elapsed&quot;</span>:10&#125;</span><br><span class="line"></span><br><span class="line">$ curl -H <span class="string">&#x27;user_role:owner&#x27;</span> http://localhost:3333/admin</span><br><span class="line">Forbidden</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># admin ロール</span></span><br><span class="line">$ curl -H <span class="string">&#x27;user_role:admin&#x27;</span> http://localhost:3333/admin</span><br><span class="line">admin: index</span><br></pre></td></tr></table></figure><p>ロールに権限があれば、操作が成功していることが分かります。</p><h2 id="もっと細かい制御をするためには"><a href="#もっと細かい制御をするためには" class="headerlink" title="もっと細かい制御をするためには"></a>もっと細かい制御をするためには</h2><p>上記の実装例だと、例えばある記事の削除は、<code>作成したユーザー自身</code> も削除できるようにしたい、といった要望には対応できません（ユーザー単位でロールを作ればもちろん可能ですが、もはやそれはロールの意味が無いですよね）。</p><p>Casbinでどう実現するかですが、今のURLの構造でがんばるのであれば、articlesが追加されるごとにユーザーIDとマッピングさせた policy.csv のレコードに相当するデータを釣っていくことです。Casbinの機能であれば、<a href="https://casbin.org/docs/en/priority-model">Priority Model</a>で多段の権限を判定できるので、参考になるかもしれません。</p><p>また、この実装例のURL階層だと、ワイルドカードが使いにくいので、 <code>/users/&lt;user_id&gt;/articles/&lt;article id&gt;</code> といった階層を工夫すると <code>policy</code> のメンテナンスをシンプルに抑えることもできるかと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>気になっていたCasbinの触りについてまとめました。ドキュメントサイトも新しくなっていますし、採用事例もちょくちょく聞きますし、プロダクション運用にも耐えうる品質だと思っています。</p><p>すこし気になっているのは、2022.10.3時点だと <code>v3.0.0-beta.7</code> がタグ付けされています。もうすぐv3系がリリースされる予感があり、APIの互換性がすこし崩れるのかも？と推測しています。（とは言え、ドキュメントページも整理されていますし、すでにv1→v2で移行しているので、根本からそこまで変わらないのでは？と思っていますが）。このあたりは新規に採用する時に留意したほうが良いと思います。</p><p>アクセス制限は自前で作り込むと面倒な割に、ユーザーからは当たり前品質の扱いをされがちだと思うので、こういった既存プロダクトにうまくのっかれると良いと思います。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://qiita.com/unhurried/items/4688b4e94d96db2d1143">https://qiita.com/unhurried/items/4688b4e94d96db2d1143</a></li><li><a href="https://articles.wesionary.team/understanding-casbin-with-different-access-control-model-configurations-faebc60f6da5">https://articles.wesionary.team/understanding-casbin-with-different-access-control-model-configurations-faebc60f6da5</a></li><li><a href="https://zenn.dev/dove/articles/bc6933dbb39509">https://zenn.dev/dove/articles/bc6933dbb39509</a></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;TIG真野です。&lt;a</summary>
        
      
    
    
    
    <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="AuthZ" scheme="https://future-architect.github.io/tags/AuthZ/"/>
    
    <category term="Casbin" scheme="https://future-architect.github.io/tags/Casbin/"/>
    
    <category term="アクセス制御" scheme="https://future-architect.github.io/tags/%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E5%88%B6%E5%BE%A1/"/>
    
  </entry>
  
  <entry>
    <title>認証認可連載2022</title>
    <link href="https://future-architect.github.io/articles/20221003a/"/>
    <id>https://future-architect.github.io/articles/20221003a/</id>
    <published>2022-10-02T15:00:00.000Z</published>
    <updated>2022-10-12T00:27:33.623Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20221003a/padlock-g268bd2c48_640.jpg" alt="padlock-g268bd2c48_640.jpg" width="640" height="352" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG 真野です。</p><p>フューチャーで認証系のブログ連載と言えば、 <a href="/tags/Auth0/">Auth0</a> をテーマとした連載があります。今回は次のようにもう少しテーマを広くした連載を始めます。</p><ul><li>認証・認可の技術全般<ul><li>WebAuthn、OpenID Connect 周り</li><li>KeyCloack、Auth0、AWS Cognitoなどなんでも</li></ul></li></ul><p>2022年が初めてですので、「やってみた、触った見たレベルから」～「マニアックな挙動の紹介まで」何でもOKというテーマで募集しました。</p><h2 id="スケジュール"><a href="#スケジュール" class="headerlink" title="スケジュール"></a>スケジュール</h2><p>すでに公開済みの澁川さんの他、5名が参加予定です。</p><div class="scroll"><table><thead><tr><th>Date</th><th>Title</th><th>Author</th></tr></thead><tbody><tr><td>9&#x2F;2</td><td><a href="/articles/20220902a/">パスワードレスな認証を実現する認証ミドルウェアのhanko</a></td><td>澁川喜規</td></tr><tr><td>10&#x2F;4</td><td><a href="/articles/20221004a/">Casbinで始めるアクセス制御</a></td><td>真野隼記</td></tr><tr><td>10&#x2F;6</td><td><a href="/articles/20221006a/">Kong API Gatewayを使ってResource Serverを保護する</a></td><td>Lee</td></tr><tr><td>10&#x2F;7</td><td><a href="/articles/20221007a/">Auth0のアクセストークン取得とITPへの対応</a></td><td>棚井龍之介</td></tr><tr><td>10&#x2F;12</td><td><a href="/articles/20221012a/">OAuth の仕組みを理解しながらクライアントを実装してみる</a></td><td>吉岡朋哉</td></tr><tr><td>10&#x2F;13</td><td>スマホのSSO</td><td>山田勇一</td></tr></tbody></table></div><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>フューチャーには「認証認可についての相談室」というGoogleチャットスペースがあり、そこで声掛けするとすぐに企画に賛同する人がいてくれて助かりました。</p><p>実はあまり活発ではないチャットルームなので、こうしたブログでの外部発表を通して交流を促進できると良いなとも感じています。</p><img src="/images/20221003a/chat.png" alt="" width="385" height="75" loading="lazy"><p>今回の連載で、少しでも皆様に良い情報を共有できればと思います！</p><p>アイキャッチ画像は、<a href="https://pixabay.com/users/qimono-1962238/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3658577">Arek Socha</a> from <a href="https://pixabay.com//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3658577">Pixabay</a>を利用させていただきました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20221003a/padlock-g268bd2c48_640.jpg&quot; alt=&quot;padlock-g268bd2c48_640.jpg&quot; width=&quot;640&quot; height=&quot;352&quot; loading=&quot;lazy&quot;&gt;


&lt;h2</summary>
        
      
    
    
    
    <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
    <category term="インデックス" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/"/>
    
    <category term="AuthZ" scheme="https://future-architect.github.io/tags/AuthZ/"/>
    
    <category term="AuthN" scheme="https://future-architect.github.io/tags/AuthN/"/>
    
  </entry>
  
  <entry>
    <title>【合格記】Google Cloud Professional Machine Learning Engineer認定資格を振り返る</title>
    <link href="https://future-architect.github.io/articles/20220930a/"/>
    <id>https://future-architect.github.io/articles/20220930a/</id>
    <published>2022-09-29T15:00:00.000Z</published>
    <updated>2022-09-30T06:52:57.288Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220930a/tokyo.png" alt="" width="800" height="333"><p>こんにちは、TIGの岸下です。</p><p>先日、Google Cloudの認定資格である<a href="https://cloud.google.com/certification/machine-learning-engineer">Professional Machine Learning Engineer認定資格</a>を受験し、取得することができました。<br>また、今回はリモート試験にて受験をしてみました。<br>この記事では</p><ul><li>Professional Machine Learning Engineer認定資格の合格に至った学習過程</li><li>リモート試験体験記</li></ul><p>について書いていこうと思います。</p><h2 id="筆者のバックグラウンドについて"><a href="#筆者のバックグラウンドについて" class="headerlink" title="筆者のバックグラウンドについて"></a>筆者のバックグラウンドについて</h2><p>今回の試験では受験者のバックグラウンドによって学習過程・学習量がかなり変わると思うので、以下に筆者のバックグラウンドを記しておきます。</p><ul><li>大学・大学院の研究室が医用工学系で機械学習（ML）、DeepLearning（DL）の発表をほぼ毎週聞いていたため、基礎はある程度身についていた。</li><li>新卒から約2年ほど画像処理AI関連の業務に従事。<ul><li>データの前処理から学習・推論・評価といった一連の処理・計算は知っており、Pythonで書くことができた。</li><li>MLOpsは経験無し。</li><li>ML&#x2F;DL, AI大好き人間ではなかったがTwitter等でトレンドは追っかけていたため、画像処理以外でもML&#x2F;DL技術の仕組みと何に使われるかはある程度知っていた。<ul><li>強化学習</li><li>NLP</li><li>など</li></ul></li></ul></li><li>現在、8ヶ月ほどGCP関連のプロジェクトに従事。<ul><li>どういったサービスが何に使われるかや、Googleオススメのアーキテクトなどがなんとなーくわかってきたフェーズ。</li><li><a href="https://cloud.google.com/certification/guides/professional-cloud-architect?hl=ja">Processional Cloud Architect</a>は取得済み。</li></ul></li></ul><h2 id="試験と出題範囲について"><a href="#試験と出題範囲について" class="headerlink" title="試験と出題範囲について"></a>試験と出題範囲について</h2><p>2022年9月25日現在だと、Professional Machine Learning Engineerの試験は<strong>英語試験</strong>のみとなります。<br>問題数は60問で試験時間は2時間となります。<br>英語に関しては類似の言い回しも多く、ML&#x2F;DL系の英単語を知っていれば難なく完遂できると思います。</p><p>出題範囲は<a href="https://cloud.google.com/certification/machine-learning-engineer?hl=ja">公式</a>からの抜粋です。<br>各出題範囲に対して受験後の体感を書いておきます。</p><div class="scroll"><table><thead><tr><th>出題範囲</th><th>ざっくりした内容</th></tr></thead><tbody><tr><td>ML 問題の枠組み</td><td>■ このML&#x2F;DLで何ができるのか？</td></tr><tr><td>ML ソリューションの設計</td><td>■ 利用者の前提知識によって、BigQueryML, AutoML, VertexAIの使い分けをどうするか。<br>■ 「最小限のエフォートで」、「インフラを管理したくない」、「Python使いたい」などユーザーの要望に沿うことのできるソリューション設計など。</td></tr><tr><td>データ準備 &#x2F; 処理システムの設計</td><td>■ 特徴量エンジニアリング（連続値どうするか、カテゴリ値どうするか、標準化・正規化…）。<br> ■ Dataflow, DataFusion, BigQueryの使い分けなど。</td></tr><tr><td>ML モデルの開発</td><td>■ ML&#x2F;DLモデルの評価方法。（<strong>Recall&#x2F;Accuracy&#x2F;Precisionは絶対に理解しておきましょう。</strong>） <br>■ モデル開発におけるアンチパターンとその対応など。</td></tr><tr><td>ML パイプラインの自動化とオーケストレーション</td><td>■ KubeFlow&#x2F;TFXの使い分けなど。 <br> ■ MLOpsのベストプラクティス（データがCloud Storageに置かれたらPubSubに通知してCloud Functionで～的な）など。</td></tr><tr><td>ML ソリューションのモニタリング、最適化、メンテナンス</td><td>■ データセットやモデルのモニタリング（精度が急に落ちていないか、データセットに異常値が発生していないかなど）など。<br> ■ 上記のような問題が起きないようにするにはどうするかなど。</td></tr></tbody></table></div><h2 id="学習過程"><a href="#学習過程" class="headerlink" title="学習過程"></a>学習過程</h2><h3 id="1-Coursera"><a href="#1-Coursera" class="headerlink" title="1. Coursera"></a>1. Coursera</h3><p>8月に学習を開始し、ちょうどCourseraで<a href="https://www.coursera.org/promo/googlecloud-training-promotion?utm_campaign=July22_blog&utm_medium=institutions&utm_source=googlecloud">Google Cloud関連コース1ヶ月無料＆1ヶ月で完遂すればバウチャーあげるよキャンペーン</a>（既に終了済）やっていたので、<a href="https://www.coursera.org/professional-certificates/preparing-for-google-cloud-machine-learning-engineer-professional-certificate">Preparing for Google Cloud Certification: Machine Learning Engineer Professional Certificate</a>を受講しました。</p><p>以下9コースの詰め合わせセットになっています。</p><ul><li>Google Cloud Big Data and Machine Learning Fundamentals</li><li>How Google does Machine Learning</li><li>Launching into Machine Learning</li><li>TensorFlow on Google Cloud</li><li>Feature Engineering</li><li>Machine Learning in the Enterprise</li><li>Production Machine Learning Systems</li><li>MLOps (Machine Learning Operations) Fundamentals</li><li>ML Pipelines on Google Cloud</li></ul><h4 id="良さみ"><a href="#良さみ" class="headerlink" title="良さみ"></a>良さみ</h4><ul><li>各コースでハンズオン形式で学べるQuikLabが付いており、手を動かしながら以下の内容について学べる。<ul><li>DataPrepを利用した学習用データセットの準備</li><li>DataFusionを利用したUIによるデータETL処理構築</li><li>PythonとDataFlowを利用したデータETL処理構築</li><li>BigQueryMLを利用した機械学習モデルの構築（学習・推論・評価）</li><li>AutoMLを利用した機械学習モデルの構築（学習・推論・評価）</li><li>VertexAI上でのKubeFlowを利用したMLOps構築</li><li>VertexAI上でのTFXを利用したMLOps構築</li><li>…etc.</li></ul></li><li>9コース終わると、GCPにおけるMLOpsの知識は身につく。<ul><li>Googleのベストプラクティスがわかるようになりました。</li><li>試験に出てくる内容の80％以上は網羅できていると思います。<ul><li>この単語・サービス知らない！はほとんどありませんでした。</li></ul></li></ul></li></ul><h4 id="つらみ"><a href="#つらみ" class="headerlink" title="つらみ"></a>つらみ</h4><ul><li>全9コース＆英語音声&#x2F;字幕しかない。<ul><li>英語の肩慣らしだと思って頑張りました。</li></ul></li><li>GKE立ち上げるのに10分かかったり、学習回すのに1時間かかったりし、時間が溶ける。<ul><li>パイプラインの仕組みや処理の流れで類似した箇所が多いので、ある程度掴んだら飛ばし飛ばしやるといいと思います。</li><li>（たまに、完遂しないと修了認定出してくれないレクチャーもあるのでそこは注意…）</li></ul></li><li>ML&#x2F;DLのバックグラウンドがある人にとっては既知の内容も多い。<ul><li>特にFeature Engineeringのコースは基礎的な前処理の話が多く、飛ばし飛ばし or 倍速で見て雰囲気感じるだけでもいいと思います。</li></ul></li></ul><h4 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h4><p>ボリュームがかなりある分、中身がかなり濃いです。ML&#x2F;DL関連は最近全く触れていなかったので改めて復習をすることができました。<br>特にRecall&#x2F;Precision&#x2F;Accuracy&#x2F;F1-scoreあたりの使い分けは完全に忘れていました（PrecisionとAccuracyがややこしい…）。<br>また、GCPではML&#x2F;DL向けに多くのサービスを用意しており、MLOpsに関してはステップを踏んで導入（コードをプッシュして自動ビルドする初期段階から、データがGCSに置かれた時点でETL処理→学習処理に入る半自動段階など）を進めていくことができるようで、非常に勉強になりました。</p><h3 id="2-Udemy"><a href="#2-Udemy" class="headerlink" title="2. Udemy"></a>2. Udemy</h3><p>Udemyにて模擬試験を購入し、Coursera終了後はひたすらこちらをやっていました。<br><a href="https://www.udemy.com/course/google-cloud-professional-machine-learning-engineer-2022/">Google Cloud Professional Machine Learning Engineer *2022*</a></p><h4 id="良さみ-1"><a href="#良さみ-1" class="headerlink" title="良さみ"></a>良さみ</h4><ul><li>試験問題の雰囲気がわかる。<ul><li>問題の出題形式が網羅されており、大体こんな感じで問題出されるんだなーというのが掴めます。</li></ul></li><li>回答の解説が秀逸<ul><li>間違えた問題の解説がしっかりしており、Google公式のリンクも付いているので勉強になります。</li></ul></li><li>英語の勉強になる。<ul><li>こちらの教材でわからない単語はしっかり潰しておきましょう。</li></ul></li></ul><h4 id="つらみ-1"><a href="#つらみ-1" class="headerlink" title="つらみ"></a>つらみ</h4><ul><li>あくまで<strong>模擬試験</strong><ul><li>こちらの模擬試験と本試験の出題内容は全く別物になります。</li><li>類似問題はあり、Googleオススメのベストプラクティスを適用するのは同様なので、この模擬試験やっておいて損はないです。</li></ul></li><li>本試験は<strong>60問</strong><ul><li>模擬試験は50問になっています。</li><li>もうこれは調べてなかった自分が悪いのですが、受験開始して60問ということを知りました…</li></ul></li></ul><h4 id="感想-1"><a href="#感想-1" class="headerlink" title="感想"></a>感想</h4><p>Udemyの模擬問題集をやったことでどういう形式で問題を出されるのかという部分で良い練習となりました。<br>問題内容から要望を汲み取ってGCPでの実装を提案するというのは模擬問題集も実際の試験も変わりはないです。<br>以下のような言い回しから意図をくみ取るのが大切だと思いました。</p><ul><li>「コストを最小にしたい」</li><li>「インフラの管理コストは抑えたい」</li><li>「マネージドサービスで」</li><li>「最小限のエフォートで」</li><li>「早く実装したい」</li><li>「機械学習のバックグラウンドがなく、SQLは使える」</li><li>…etc.</li></ul><h2 id="リモート受験について"><a href="#リモート受験について" class="headerlink" title="リモート受験について"></a>リモート受験について</h2><p>今回、テストセンターで受けずにリモート環境での受験を体験してみました。<br>注意点としては以下になります。</p><h3 id="受験前"><a href="#受験前" class="headerlink" title="受験前"></a>受験前</h3><ul><li><p>アカウントの作成</p><ul><li><strong>言語別でアカウントの作成が必要</strong>です。</li><li>自分はPCAを日本語で受けたので、英語試験用にアカウントをもう一つ作りました。</li></ul></li><li><p>受験時間の予約</p><ul><li>テストセンターと違い、早朝や夜遅くにも受けることができます。</li><li>英語を読むのに体力使うと思ったので朝9時の一番元気な時間に予約しました😂</li></ul></li><li><p>受験時間はJST（日本時間）</p><ul><li>受験予約時にタイムゾーンが書かれていないのですが、ちゃんとJSTでした。</li><li>受験時間確定時にタイムゾーン出てくるので、そこで念のため確認してください。</li></ul></li><li><p>事前に専用のブラウザをダウンロード・インストールしておく</p><ul><li>当日は専用ブラウザから試験を受けます。</li><li>受験用のページから事前にダウンロードすることができます。</li></ul></li><li><p>顔認証用の画像を事前に撮っておく。</p><ul><li>こちらも受験用のページから事前に撮影することができます。</li></ul></li></ul><h3 id="受験当日"><a href="#受験当日" class="headerlink" title="受験当日"></a>受験当日</h3><ul><li>バックグラウンドソフトは切っておく。<ul><li>Slack等通知がきそうなものは切っておきましょう。</li></ul></li><li>机の上、周辺は何も置かない。<ul><li>筆記用具❌</li><li>デュアルディスプレイ❌</li><li>本❌</li><li>スマホ❌</li><li>水❌</li><li>ラップトップ用スタンドデスクはOKでした。</li></ul></li><li>PCに差し込まれているUSBは最小限とする。<ul><li>特に注意は受けませんでしたが、マウスのみ挿すようにしていました。</li><li>盗聴・盗撮などに敏感らしく、念のための対応です。</li></ul></li><li>大きめの手鏡を用意しておく。<ul><li>足元やPC周辺を監視員の人に見せるためにスマホのカメラ or 手鏡で写すように言われるのですが、スマホは画面が小さく大きめの手鏡で見せたほうがスムーズです。</li></ul></li><li><strong>PCが安定動作することを確認する。</strong><ul><li>これが一番大事です。</li><li>Surface Pro4で受験したのですが、受験中に<a href="https://muichinoblog.com/gadget/sur4-flick">初期不良の画面揺れが発生</a>し、40問くらい問題文が揺れて目が死にました。</li></ul></li><li>監視員とのチャットが英語<ul><li>難しい内容は聞かれないですが、質問によっては「I’m ready.」「Just a moment, please.」と回答できるようにしておきましょう。</li><li>質問例：「トイレ行く時間あげるから帰ってきたら教えてね」「スマホもう使わないから手の届かないところおいてね」など</li></ul></li></ul><h3 id="試験終了後"><a href="#試験終了後" class="headerlink" title="試験終了後"></a>試験終了後</h3><ul><li>試験終了後すぐに結果がでる。<ul><li>「Pass」で合格、「Fail」で不合格です。</li><li>ここはテストセンターと同じですね。</li></ul></li><li>アンケートのお願いがくる。<ul><li>アンケートは受けても受けなくてもどちらでもOKです。</li><li>自分は画面揺れで諦めました。</li></ul></li></ul><h2 id="受験した感想"><a href="#受験した感想" class="headerlink" title="受験した感想"></a>受験した感想</h2><p>GCPにおけるML&#x2F;DLのベストプラクティスやMLOpsについて網羅的に学習する良い機会になりました。<br>受験前は「BigQueryMLなにそれ？おいしいの？」みたいな状態でしたが、GCPのML&#x2F;DLサービスの棲み分けはある程度理解できました。もし業務で使うことがあればすんなり入れるのかなと思います。</p><p>また、GoogleはML&#x2F;DLのサービス（前処理からデプロイまで全て）に力入れているんだなーということを学習と受験の過程で体感することができました。GoogleのAIスゴイ！</p><p>これからGCPでMLOpsやっていこう・やっていきたい方には学習のきっかけとなる良い試験だと思います（合格特典ももらえますし）。ぜひ受験してみてください！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220930a/tokyo.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;333&quot;&gt;

&lt;p&gt;こんにちは、TIGの岸下です。&lt;/p&gt;
&lt;p&gt;先日、Google Cloudの認定資格である&lt;a</summary>
        
      
    
    
    
    <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
    <category term="機械学習" scheme="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/"/>
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="合格記" scheme="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/"/>
    
    <category term="資格" scheme="https://future-architect.github.io/tags/%E8%B3%87%E6%A0%BC/"/>
    
    <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>AGPLが適する場所、適さない場所</title>
    <link href="https://future-architect.github.io/articles/20220929a/"/>
    <id>https://future-architect.github.io/articles/20220929a/</id>
    <published>2022-09-28T15:00:00.000Z</published>
    <updated>2022-09-29T05:54:49.874Z</updated>
    
    <content type="html"><![CDATA[<p>前回翻訳した<a href="/articles/20220922a/">AGPLを理解する: もっとも誤解されたライセンス</a>では、実体以上に強いライセンスであると思われているケースについての紹介がありました。</p><p>もちろん、使い方次第ではアプリケーションコードの開示が必要になってしまうケースもあるかと思います。前回のエントリーはわかりやすい切り口で書いてくれていますが、いくつか、やはりプロダクトコード側へ制約が出るケースが考えられるので、その点についてまとめてみます。</p><p>AGPLの特徴を2行でまとめると以下の通りかと思います</p><ul><li>ネットワーク越しに利用することも配布とみなし、AGPLで書かれたアプリケーションのソースにアクセスする権利が伝わる</li><li>ネットワーク越しの利用することはリンクではないため、ネットワークで通信するアプリケーションのライセンスをAGPLにする必要はない</li></ul><img src="/images/20220929a/agpl1.png" alt="" width="830" height="161" loading="lazy"><p>配布とリンクがごっちゃにされるのが、よくされる誤解の原因かと思います。もしネットワークアクセスでもライセンスが伝播するなら、商用のルーターとかそこで動くOSのネットワークスタックとか、ブラウザとかもAGPLにしないといけない、ということになります。</p><h1 id="AGPLもリンクではGPL同等"><a href="#AGPLもリンクではGPL同等" class="headerlink" title="AGPLもリンクではGPL同等"></a>AGPLもリンクではGPL同等</h1><p>AGPLを使った場合に、アプリケーションコードの開示が必要かつアプリケーションもAGPLにしなければならないケースは、AGPLのコードをリンクする場合です。たとえば、ライブラリとして提供されるものや、サーバー製品のドライバやSDKがAGPLの場合、もしくはAGPLのアプリケーションの一部を取り出して組み込んだ場合は、アプリケーションもAGPLになります。これはAGPLというよりも、そこにリンクするコードの扱いに関しては今まであったGPLとほぼ同一条件になります。</p><p>なお、全利用者というのは、社内限定利用であれば社内ユーザーへの開示だけなので、前回翻訳したエントリーで説明されているように、AGPLになったからといって全世界に公開しないといけないということはありません。</p><img src="/images/20220929a/agpl2.png" alt="" width="540" height="211" loading="lazy"><h1 id="ライブラリ-x2F-SDK-x2F-ドライバでは使わない方が無難"><a href="#ライブラリ-x2F-SDK-x2F-ドライバでは使わない方が無難" class="headerlink" title="ライブラリ&#x2F;SDK&#x2F;ドライバでは使わない方が無難"></a>ライブラリ&#x2F;SDK&#x2F;ドライバでは使わない方が無難</h1><p>結論としては、ライセンスを選択できる自由があったとしてもAGPLを適用するのは、単独で動くサーバーアプリケーションとしての形態で提供するソフトウェアに限定した方が良さそうです。</p><p>アプリケーションが(A)GPLになるということは、プロプラなライブラリとのリンクもできなくなってしまうため、利用者の自由度が下がってしまいます。そのような状況で今まで良く使われていたのがLGPLというライセンスです。LGPLのライブラリとリンクするアプリケーションはコードの公開は不要です。ですが、残念ながらAGPLのLGPL版というのはありません。AGPLのように成果物に対する修正を（ネットワーク越しの配布でも）公開して欲しい、かつ広く使って欲しいというニーズを満たすのはAGPLで実現するのは簡単ではないことがわかります。</p><p>良く知られているように、MongoDBも、本体がAGPLだった時代から、SDKやドライバーはApache2を採用していました。</p><p>なお、LGPLですが、LGPLはリンク対象となるコードには何も制限がないかというとそんなことはなく、いくつかのルールがあります。例えばリバースエンジニアリングを許可しなければならない、またLGPLを使うアプリケーションユーザーが、LGPLのコード部分だけを修正して自分で再ビルドできるようにしなければならない、というものです。実際、これを守る難易度はやや高い気がします。</p><h1 id="AGPLのツールが生成するソース-x2F-AGPLのソースから作られるソースコードも除外した方が無難"><a href="#AGPLのツールが生成するソース-x2F-AGPLのソースから作られるソースコードも除外した方が無難" class="headerlink" title="AGPLのツールが生成するソース&#x2F;AGPLのソースから作られるソースコードも除外した方が無難"></a>AGPLのツールが生成するソース&#x2F;AGPLのソースから作られるソースコードも除外した方が無難</h1><p>AGPL製ツールが何かしらのソースコードを生成する場合もあるかと思います。何も注記がなければこの生成されるコードもAGPLになると思います。だいたい生成されたソースの実行には何かしらのランタイムが必要で、そのランタイムがAGPLだからです。そのため、何かしらの「生成を行う」ツールや一部ライブラリは<a href="https://ja.wikipedia.org/wiki/GPL%E3%83%AA%E3%83%B3%E3%82%AF%E4%BE%8B%E5%A4%96">例外条項</a>を設けています。GCCやBisonは不自由なライセンス（とフリーソフトウェア派の人が呼ぶクローズドソース）とのリンクを許可しています。</p><p>この辺りの意図とかが書かれている貴重な資料としてはBisonの使用条件のドキュメントがあります。</p><ul><li><a href="https://www.gnu.org/software/bison/manual/html_node/Conditions.html">Bisonの使用条件</a></li></ul><p>サーバーアプリケーションがOpenAPIとかGraphQLとかgRPCのAPI定義を用意していて、クライアントがそれをもとにクライアントを生成して使う場合は悩ましいですね。設定からソースの生成はある種のコンパイルであり、生成されるソースもGPL系であれば同じライセンスになりそうな気がするので、これらの設定ファイルもドライバとみなして、別ライセンス化するか、例外を規定しておく方が無難な気がします。</p><h1 id="CLIツールもあまりAGPLにする必要は（本来は）なさそう"><a href="#CLIツールもあまりAGPLにする必要は（本来は）なさそう" class="headerlink" title="CLIツールもあまりAGPLにする必要は（本来は）なさそう"></a>CLIツールもあまりAGPLにする必要は（本来は）なさそう</h1><p>僕とDeNAでもフューチャーでも同僚だったknqyf263さんが書いてめちゃくちゃバズった記事が以下のやつです。</p><ul><li><a href="https://knqyf263.hatenablog.com/entry/2019/08/20/120713">趣味で作ったソフトウェアが海外企業に買われるまでの話</a></li></ul><p>Trivyは当初AGPLで、買収後にApache2になったと記憶しています。</p><p>本来はこの手のCLIツールはAGPLにしても、単にツールとして単独実行する場合はネットワーク越しに直接叩くことをしないため、AGPLにしてもソースを提供する義務は発生しなくなってしまいます。</p><p>とはいえ、エージェントとしてこの手の定期的に実行して情報収集するツールで、実行頻度をネットワーク越しに制御したり、結果を閲覧するウェブサービスを提供する場合は、下記の説明を解釈すればTCPで繋がっているサービスとかとなんら変わらず、AGPLとしての配布の条件にマッチする気がします。</p><p><a href="https://gpl.mhatta.org/agpl.ja.html">GNU Affero 一般公衆利用許諾書の八田さんの翻訳の引用</a></p><blockquote><p>改変したバージョンは、そのバージョンとリモートでコンピュータネットワークを介し対話的にやりとりする（あなたのソフトウェアがそのようなインタラクションをサポートしている場合）すべてのユーザに対して、(中略)『対応するソース』を受け取る機会を明示的に与えなければなければならない。</p></blockquote><h1 id="商用ライセンスとGPL系ライセンスのデュアルライセンス"><a href="#商用ライセンスとGPL系ライセンスのデュアルライセンス" class="headerlink" title="商用ライセンスとGPL系ライセンスのデュアルライセンス"></a>商用ライセンスとGPL系ライセンスのデュアルライセンス</h1><p>近年ではコミットの前に<a href="https://en.wikipedia.org/wiki/Contributor_License_Agreement">Contributor License Agreement(CLA)</a>を締結してコードを自由にする権利とともにPull Requestを受け付けるというのが多くなってきました。これはオリジナルの著者にライセンスを変更できる権限を残した状態でコミットをしてもらうためのものです。これにより、GPLなコードであっても、状況が変わって商用サービス化したい場合に自由にできるようになります。MongoDBが商用ライセンスとAGPLのデュアルライセンスを維持したり、Server Side Public LicenseやBusiness Source Licenseで出し直すことができているのはこれによるものです。</p><p>GPL系ライセンスとして公開したコードを別ライセンスで出し直すのは、例え開発者本人であっても容易ではありません。多くの人のコントリビュートがあったとして、送られてきたパッチのコード片もGPL系ライセンスのはずで、ライセンス変更にあたってはコードにコミットした人の許可が必要とされています。MeCabが以前、AppleのiPhoneにバンドルされる前に、Appleから要望を受けてライセンスを変更したという話がありました。ブログはちょっとネガティブな方向性ですが・・・</p><ul><li><a href="http://chasen.org/~taku/blog/archives/2010/04/mecabiphoneosx.html">MeCabがiPhone,OSXに載っていると言うのは止めようと思う</a></li></ul><p>SaaSタダ乗り問題をばっちり解決するライセンスというのはまだみんな模索している感じはありますが、いざというときのライセンス変更を考えると、OSS開発ではCLAを用意しておくのは業務開発では必要かもしれません。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>AGPLのように成果物に対する修正を（ネットワーク越しの配布でも）公開して欲しい、かつ広く使って欲しいというニーズを満たすには単独動作するサーバーアプリケーション、およびサーバーに組み込みで使われるエージェント形式のCLIツール等で利用するのがベストかな、と思います。その形態で配布されているアプリケーションであれば、そのAGPLのコードを修正しない限りは別にコード公開とかはないため、前回のエントリーで説明された範囲で利用できます。</p><p>LGPL版のAGPLがないということで、直接リンクして使う利用方法では、従来のGPLと同じように、リンクするコードもライセンスをAGPLにする必要があります。ここは別のライセンスを提供するか例外とした方が良さそうです。</p><p>OSSを開発する個人としては、AGPLにはTrivyのように一攫千金チャンスもありつつ、広く使ってもらえるという点が魅力的かと思います。一方で、企業開発するコードでAGPLにするには、CLAにして、自分の方でコードのライセンスを自由にして、AGPLと自社でプロプラコードとして使うためのデュアルライセンスを許可しつつ、パッチを受け入れるといったことが必要になるかもしれません。</p><p>AGPLアレルギー的な反応をする人が周りにも多かったので、前回のエントリーの翻訳をしつつ、今回のまとめ記事も書いてみました。AGPLを正しく理解して、面白いソフトウェアが日本からももっと出てきつつ、開発した人がもっとフィーチャーされるようになって欲しいな、と思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;前回翻訳した&lt;a href=&quot;/articles/20220922a/&quot;&gt;AGPLを理解する:</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
    <category term="ライセンス" scheme="https://future-architect.github.io/tags/%E3%83%A9%E3%82%A4%E3%82%BB%E3%83%B3%E3%82%B9/"/>
    
    <category term="AGPL" scheme="https://future-architect.github.io/tags/AGPL/"/>
    
  </entry>
  
  <entry>
    <title>AGPLを理解する: もっとも誤解されたライセンス</title>
    <link href="https://future-architect.github.io/articles/20220922a/"/>
    <id>https://future-architect.github.io/articles/20220922a/</id>
    <published>2022-09-21T15:00:00.000Z</published>
    <updated>2022-09-22T07:20:17.724Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220922a/open-sign-g123296793_640.jpg" alt="" width="640" height="426"><p>このエントリーは<a href="https://twitter.com/ohhsayan">Sayan</a>さんによる<a href="https://medium.com/swlh/understanding-the-agpl-the-most-misunderstood-license-86fd1fe91275">Understanding the AGPL: The Most Misunderstood License</a>の日本語訳になります。</p><hr><p>オープンソースの出現は、ソフトウェア産業全体を一変させました。しかし、オープンソースのコードを使って誰が何をできるかを管理することは課題でしたし、今も解決していません。オープンソースライセンスはそこに救いの手を差し伸べました。しかし、常に次のことを忘れないでください：石のない土地はなく、骨のない肉はありません。<a href="https://opensource.org/licenses/alphabetical">OSI（オープンソースイニシアチブ: オープンソースを促進することを目的とする組織）が承認したライセンスは80以上</a>あり、その数はさらに増加しています。それぞれのライセンスには利点と欠点があるため、オープンソースの開発者は自分のプロジェクトにあったライセンスを選ぶのは簡単ではありません。<a href="https://opensource.org/licenses/AGPL-3.0">Affero General Public License</a>の略称であるAGPLはこれらのライセンスの1つで、より具体的には強い<a href="https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%94%E3%83%BC%E3%83%AC%E3%83%95%E3%83%88">コピーレフト・ライセンス</a>であり、間違いなく最も誤解されているライセンスの一つでしょう。</p><h1 id="なぜ別のGPLが必要なのか"><a href="#なぜ別のGPLが必要なのか" class="headerlink" title="なぜ別のGPLが必要なのか?"></a>なぜ別のGPLが必要なのか?</h1><p>待って、待って? もう1つの<em>GPL</em>? うーん、そうです。AGPLはGPLは以下の内容が第13節に追加されている点を除くとほとんど同じです。</p><p><a href="https://gpl.mhatta.org/agpl.ja.html">八田真行さんのAGPLライセンス訳から引用</a></p><blockquote><p>本許諾書に含まれる他の条件に関わらず、あなたが『プログラム』を改変した場合、改変したバージョンは、そのバージョンとリモートでコンピュータネットワークを介し対話的にやりとりする（あなたのソフトウェアがそのようなインタラクションをサポートしている場合）すべてのユーザに対して、ネットワークサーバから、あなたのバージョンに『対応するソース』にアクセスする手段を、無償、かつソフトウェアのコピーを円滑に行う上で標準的、慣習的に用いられる方法で提供することにより、ユーザが『対応するソース』を受け取る機会を明示的に与えなければなければならない。[…]</p></blockquote><p>これは1つの直接的な意味を持ちます。もしあなたがユーザにネットワークを通じてAGPLでライセンスされたソフトウェアにアクセスさせるならば、それは配布の一形態と見なすということです。これは、GPLが見落としていた点です。クラウドがブームになる時代となり、<a href="https://ja.wikipedia.org/wiki/SaaS">SaaS</a>は爆発的に普及し、開発者とベンダーはソフトウェアを直接配布する代わりに、ソフトウェアをデジタルで配布するようになりました。</p><p>ボブが開発したバイナリアプリケーション（ライブラリではない）を例にとって考えてみよう。表現の都合上、これをXBinと呼ぶことにします。このアプリケーションは、ウェブアプリがリソースを使い切ったときに、自動的に追加のリソースを割り当てる機能があります(追記: これはサンプルです)。</p><h2 id="ステップ1：ボブがGPLを使う"><a href="#ステップ1：ボブがGPLを使う" class="headerlink" title="ステップ1：ボブがGPLを使う"></a>ステップ1：ボブがGPLを使う</h2><p>ボブはGPLを使うことにしました。ユーザーはみな、バグを見つけたり、機能を追加してほしいときはいつでも、彼にパッチを送ることができ、ボブにとっては最高のライセンスでした。ボブは喜んで彼らのコードをマージし、幸せな気分に浸っていました。しかしある日、彼は大手クラウドプロバイダーである<em>ProviderX</em>が、XBinにより多くの機能を追加した上で、自社のプロジェクト管理スイートの一部として提供していることを知りました。しかし、XBinを改善するためのパッチを<em>ProviderX</em>に送ってもらうことを望んでいたボブには嬉しくありません。GPLがネットワークを通じた配布を考慮していないため、今はボブには合法的に何かを行うことはできません。</p><h2 id="ステップ2-ボブがAGPLに切り替える"><a href="#ステップ2-ボブがAGPLに切り替える" class="headerlink" title="ステップ2: ボブがAGPLに切り替える"></a>ステップ2: ボブがAGPLに切り替える</h2><p>GPLライセンスの欠点に気づいたボブは、次のリリースからAGPLに切り替えました。これで、<em>ProviderX</em>が何か変更を加え、それをサービスとしてユーザに配布したときは、いつでも、同じライセンスのもとでソース形式で変更を利用できるようにしなければならなくなりました。したがって、ボブは<em>ProviderX</em>によってなされた改良を彼自身のソースコードにマージすることができるのです。これはフェアプレーです。それ以来、<strong>ボブはずっと幸せにコーディングをしています。</strong></p><h1 id="受け入れの問題"><a href="#受け入れの問題" class="headerlink" title="受け入れの問題"></a>受け入れの問題</h1><p>しかし、クラウドの大物はこれが気に入りませんでした。いくつかの会社はAGPLに対して独自のポリシーを持っていて、AGPLの採用や使用に反対し、有害だと声を上げる者まで出始めました。しかし、AGPLの採用はいくつかのSaaSプロバイダーの間で増え続けており、DBaaSプロバイダーは最も積極的に適用しています。ほとんどの人が見逃していますが、AGPLはネットワーク配布も配布としている点だけが異なるGPLのスーパーセットに過ぎません。</p><p>さて、AGPLでライセンスされたバイナリを使う場合の賛成と反対を見てみましょう。私のプロジェクト、Skytableを例にとって説明します。</p><h2 id="シナリオ1-改変せずにAGPLバイナリを使う"><a href="#シナリオ1-改変せずにAGPLバイナリを使う" class="headerlink" title="シナリオ1: 改変せずにAGPLバイナリを使う"></a>シナリオ1: 改変せずにAGPLバイナリを使う</h2><p>再びボブに登場してもらいましょう。しかし、今回は逆にAGPLライセンスのデータベースであるSkytableをデータの保存に使う、ウェブアプリを構築しようとしています。彼のアプリは、人々がサインアップして自分の好きな本を保存することができます。このデータはAGPLライセンスのデータベースに保存されます。</p><p><strong>ボブの悩み:</strong> 自分のアプリのコードをオープンソースにしなければならないのか？<br><strong>答え:</strong> いいえ！ AGPLはボブのアプリとは何の関係もありません! ボブはデータベースに手を加えておらず、単にバイナリ形式で「そのまま」使っているだけなので、彼は自分のアプリを改良する以外に何もする必要がありません!</p><h2 id="シナリオ2-改変されたAGPLバイナリを使う"><a href="#シナリオ2-改変されたAGPLバイナリを使う" class="headerlink" title="シナリオ2: 改変されたAGPLバイナリを使う"></a>シナリオ2: 改変されたAGPLバイナリを使う</h2><p>ボブは今、Skytableがクエリータイプ<strong>X</strong>を持っていればもっと良くなり、自分の開発がもっと便利になると気づきました。そこで彼は、ソースコードをダウンロードし、それを修正しました。今、彼は<strong>派生物</strong>(derivative work)と呼ばれるものを作りましたが、それを直接配布したわけではありません。</p><p><strong>ボブの悩み:</strong> 自分のアプリのコードをオープンソースにしなければならないのか？<br><strong>答え:</strong> いいえ！ ユーザーが直接データベースにアクセスできるようにしていないので、彼がデータベースに加えた変更を返す必要すらありません。また、彼のアプリのコードは、彼自身のものであることに変わりはありません。</p><h2 id="シナリオ3-プライベートで変更したバージョンを使う"><a href="#シナリオ3-プライベートで変更したバージョンを使う" class="headerlink" title="シナリオ3: プライベートで変更したバージョンを使う"></a>シナリオ3: プライベートで変更したバージョンを使う</h2><p>ボブの職場の人々は、Skytableの修正版を気に入り、職場内で使いたいと考えています。ボブの同僚は、職場のユーザーが自分自身を認証できるように、Skytableに認証機能をさらに追加しました。しかし、このコードはSkytableの作者（つまり、私です！）に返すのは安全ではありません。</p><p><strong>ボブの悩み:</strong> 変更内容を公開しなければならないのでしょうか？<br><strong>答え:</strong> いいえ！ ボブは自分の組織内でのみ使っているだけなので、他の人に配布しているわけではありません。そのようなAGPLソフトウェアの複製は、変更を開示することなく、保持することができます。</p><p>これらの事例を見ていけば十分でしょう。あなたのアプリケーションやサービスが、AGPLバイナリをバックエンドとして使っていたとしても、AGPLはそれには興味を持ちません。しかし、その代わりにAGPLでライセンスされたバイナリにあなたが加えた変更が何かという点のみに興味を持っているということをはっきりと理解できたと思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>1行にシンプルまとめると、もしあなたがAGPLでライセンスされたバイナリを「そのまま」、何の変更も加えずに使うのであれば、あなたはあまり考える必要はありません。自分自身のコードにフォーカスすべきです。しかし、もしあなたがAGPLのコードに変更を加えて配布する場合は、あなたが行った改変をソースコードとしてユーザに提供することで、法的に正しい状態を維持できます。</p><p>あなたがコメント欄を荒らす前にひとつお伝えすると、これは<strong>法的なアドバイスではありません</strong>。もしあなた（や私自身）を誤解させるようなところがあれば、遠慮なく訂正してください。</p><h2 id="関連の読み物"><a href="#関連の読み物" class="headerlink" title="関連の読み物"></a>関連の読み物</h2><ul><li><a href="https://techcrunch.com/2019/05/30/lack-of-leadership-in-open-source-results-in-source-available-licenses">Lack of leadership in open source results in source-available licenses</a></li><li><a href="https://haacked.com/archive/2006/07/26/CodeAvailableVsOpenSourceVsFreeSoftware.aspx/">Source Available vs Open Source vs Free Software</a></li><li><a href="https://thenewstack.io/the-amazon-effect-on-open-source/">The Amazon Effect on Open Source</a></li></ul><p>もしあなたが気に入ったなら、この記事を👋🏻してシェアしてください。また、<a href="https://github.com/skytable/skytable">GitHubのSkytable</a>もご覧ください。</p><hr><p>↑ここまでが原文を翻訳したものです。</p><p>ソフトウェアを開発するのにも、趣味で開発する以外は無料ではできず、霞を食べて生きていけない以上、業務でやる場合にはコストが発生します。本業のついでに作られた直接飯の種にならないソフトウェアであれば業務で開発したコードをOSS化するのは比較的社内調整しやすいとは思いますが、ビジネスのコアになりえる高度なソフトウェアをOSSにしながら開発する場合、よく使われるのがGPL系ライセンスやBSL(Business Source License)です。ですが、GPL系ライセンスの中のAGPLは誤解している人が多いな、と感じることが多かったので、説明用のエントリーを書こうと思ったのですが、言いたいことをばっちり書いてくれているエントリーがありましたので、翻訳の許諾をとって翻訳しました。より多くの企業がビジネスのコアとしてOSSを開発するきっかけになれば、と思います。</p><p>アイキャッチ画像は<a href="https://pixabay.com/ja/users/pexels-2286921/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1836961">Pexels</a>による<a href="https://pixabay.com/ja//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1836961">Pixabay</a>からを利用させていただきました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220922a/open-sign-g123296793_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;426&quot;&gt;


&lt;p&gt;このエントリーは&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
    <category term="翻訳" scheme="https://future-architect.github.io/tags/%E7%BF%BB%E8%A8%B3/"/>
    
    <category term="ライセンス" scheme="https://future-architect.github.io/tags/%E3%83%A9%E3%82%A4%E3%82%BB%E3%83%B3%E3%82%B9/"/>
    
    <category term="AGPL" scheme="https://future-architect.github.io/tags/AGPL/"/>
    
  </entry>
  
  <entry>
    <title>たのしいGoリフレクション: 変数アサイン</title>
    <link href="https://future-architect.github.io/articles/20220921a/"/>
    <id>https://future-architect.github.io/articles/20220921a/</id>
    <published>2022-09-20T15:00:00.000Z</published>
    <updated>2022-09-21T00:33:35.311Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220921a/goreflection.png" alt="" width="800" height="482"><p>The Go gopher was designed by <a href="https://reneefrench.blogspot.com/">Renée French</a></p><p>一般に、リフレクションは黒魔術と呼ばれることもあります。Goでは「リフレクションよりはコード生成」と長く言われてきました。ジェネリクスも一般的にはそのリフレクションとコード生成の間を埋めるもので、やはりリフレクションの使用を減らすためのもの（リフレクションではできない静的型チェックもできますが）です。</p><p>ですが、リフレクションでしか実現できないこともあります。そのため、誰かが人柱にならなければならないこともあります。リフレクションについては次のサイトがよくまとまっています。</p><ul><li><a href="https://www.how2go.dev/docs/advanced/reflect/">How to GO: リフレクション</a></li></ul><p>ですが、やってみると予想外のパニックがいっぱい出てきます。まあパニックといっても、スタックトレースとかがきちんと出てくれるので、昔のC++と比べるとだいぶ優しい世界ですが。</p><p>構造体のタグを見て、データを取り出したり、データを構造体に設定したりする、encoding&#x2F;jsonのようなライブラリを自分で作りたい時のヘルパーライブラリとして作ったのが以下のものです。Goで2WaySQLを実現する<a href="https://github.com/future-architect/go-twowaysql">github.com&#x2F;future-architect&#x2F;go-twowaysql</a>で、パラメータを構造体から取り出したり、実行結果を構造体にマッピングするところで使われています。この関数は独立した関数としてパッケージ外からも使えるようにしています。</p><ul><li><a href="https://pkg.go.dev/github.com/future-architect/tagscanner@v1.0.1/runtimescan#FuzzyAssign">runtimescan.FuzzyAssign()</a></li></ul><p>これを作ったのはだいぶ前ですが（最近future-architect orgに移動してきた）、最近ちょっとバグ修正したりして、またハマったりしたので、また将来メンテするときのためのメモとして残しておきます。</p><h1 id="ポインタがnilに初期化されていると型情報の取り方に注意が必要"><a href="#ポインタがnilに初期化されていると型情報の取り方に注意が必要" class="headerlink" title="ポインタがnilに初期化されていると型情報の取り方に注意が必要"></a>ポインタがnilに初期化されていると型情報の取り方に注意が必要</h1><p><code>reflect.Value</code>がすべての基本となる型です。</p><ul><li><code>Elem()</code>メソッド→ポインタのデリファレンス。<code>*int</code>の<code>*</code>の記号</li><li><code>Type()</code>メソッド→型情報を取得</li></ul><p><code>*int</code>の変数から、<code>int</code>という型情報を取り出すのは、<code>Type()</code>→<code>Elem()</code>でも<code>Elem()</code>→<code>Type()</code>でもどちらでも到達できるのですが、変数が<code>nil</code>の場合だけ先に<code>Elem()</code>を呼ぶとパニックになります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// nilじゃない</span></span><br><span class="line"><span class="keyword">var</span> i *<span class="type">int</span> = &amp;[]<span class="type">int</span>&#123;<span class="number">1</span>&#125;[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// nil</span></span><br><span class="line"><span class="keyword">var</span> j *<span class="type">int</span></span><br><span class="line"></span><br><span class="line">vi := reflect.ValueOf(i)</span><br><span class="line">fmt.Println(vi.Type().Elem())</span><br><span class="line">fmt.Println(vi.Elem().Type())</span><br><span class="line"></span><br><span class="line">vj := reflect.ValueOf(j)</span><br><span class="line">fmt.Println(vj.Type().Elem())</span><br><span class="line">fmt.Println(vj.Elem().Type()) <span class="comment">// panic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代入時はポインタでないといけない"><a href="#代入時はポインタでないといけない" class="headerlink" title="代入時はポインタでないといけない"></a>代入時はポインタでないといけない</h1><p>変数に代入するときはポインタを渡す必要があります。ポインタの<code>reflect.Value</code>の<code>Elem()</code>と、即値の<code>reflect.Value</code>は、どちらも<code>int</code>ですが、代入が可能かどうかが違います。playgroundとかで試しながらやっていて「いけるはずなのに」と思ってだいぶハマったポイントです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line"></span><br><span class="line">vip := reflect.ValueOf(&amp;i) <span class="comment">// ポインタにしないといけない</span></span><br><span class="line">fmt.Println(vip.Elem().Type(), vip.Elem().CanSet(), vi.Elem().CanAddr())</span><br><span class="line">    <span class="comment">// int true true</span></span><br><span class="line">vip.Elem().SetInt(<span class="number">10</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;i = %d\n&quot;</span>, i)</span><br><span class="line"></span><br><span class="line">vi := reflect.ValueOf(i)</span><br><span class="line">fmt.Println(vi.Type(), vi.CanSet(), vi.CanAddr())</span><br><span class="line">    <span class="comment">// int false false</span></span><br><span class="line">vi.SetInt(<span class="number">20</span>) <span class="comment">// panic</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;i = %d\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>reflect.ValueOf</code>に渡す時に、値渡しになってしまうと上書き不可になってしまうようです。C言語脳とか、Goのメソッドのレシーバーがポインタか値かのイメージでいると、スタックメモリに乗って書き換えは可能だけど、結果は呼び出し元には帰ってこない、みたいな感じを期待しちゃうのですが<code>panic()</code>になります。<code>CanAddr()</code>で、ポインタ取得かのうかどうかも<code>false</code>に。</p><h1 id="構造体も最初がポインタでないとエラーになる"><a href="#構造体も最初がポインタでないとエラーになる" class="headerlink" title="構造体も最初がポインタでないとエラーになる"></a>構造体も最初がポインタでないとエラーになる</h1><p>構造体のメンバーは値型であれば<code>FieldByName()</code>や<code>Field()</code>で取ってきた<code>reflect.Value</code>はポインタではなくてその該当する型になります。前節の変数のポインタ渡しと違って、<code>Elem()</code>は呼ばずに書き換えできるのですが、これも最初の構造体をポインタで渡さないとだめです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="keyword">struct</span>&#123; Name <span class="type">string</span> &#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line">vps := reflect.ValueOf(&amp;s).Elem()</span><br><span class="line">vf := vps.FieldByName(<span class="string">&quot;Name&quot;</span>)</span><br><span class="line">fmt.Println(vf.Type(), vf.CanSet(), vf.CanAddr())</span><br><span class="line"><span class="comment">// string　true true</span></span><br><span class="line">vf.SetString(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">vs := reflect.ValueOf(s)</span><br><span class="line">vf2 := vs.FieldByName(<span class="string">&quot;Name&quot;</span>)</span><br><span class="line">fmt.Println(vf2.Type(), vf2.CanSet(), vf2.CanAddr())</span><br><span class="line"><span class="comment">// string　false false</span></span><br><span class="line">vf2.SetString(<span class="string">&quot;hello&quot;</span>) <span class="comment">// panic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代入先がポインタ変数でnilの場合は先にnewする"><a href="#代入先がポインタ変数でnilの場合は先にnewする" class="headerlink" title="代入先がポインタ変数でnilの場合は先にnewする"></a>代入先がポインタ変数で<code>nil</code>の場合は先にnewする</h1><p>これはGoで普通にコードを書いていたら当たり前のことですが、リフレクションとして再現する時にちょっと手間取ったところなので。通常はポインタ変数があったときに、ポイント先が無効（nil）なら値の設定はしないのですが、encoding&#x2F;jsonなどはポイント先のメモリを確保した上で値を設定してくれるので、その挙動の再現をしようと思います。</p><p>参照先のメモリが有効であれば、ポインタを値渡しして設定も可能です。</p><p>リフレクションで<code>new</code>するには<code>reflect.New()</code>をします。<code>reflect.Type</code>が必要なので、即値の0から<code>reflect.TypeOf</code>で型情報にしてやっています。</p><p>なお、「代入時はポインタでないといけない」ルールは、元々の変数がポインタ型であっても、今回のように<code>new</code>したインスタンスを割り当てる場合はやはり該当しますので、</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i *<span class="type">int</span> = &amp;[]<span class="type">int</span>&#123;<span class="number">0</span>&#125;[<span class="number">0</span>] <span class="comment">// 初期化済みポインタ変数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初期化済みならポインタ変数の値渡しも可能</span></span><br><span class="line">vip := reflect.ValueOf(i)</span><br><span class="line">fmt.Println(vip.Type().Elem(), vip.Elem().CanSet(), vip.Elem().CanAddr())</span><br><span class="line"><span class="comment">// int false false: ポインタが指す先は代入可能</span></span><br><span class="line">vip.Elem().SetInt(<span class="number">20</span>) <span class="comment">// panic</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;i = %d\n&quot;</span>, *i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> j *<span class="type">int</span> <span class="comment">// ポインタ変数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ポインタ変数のポインタ渡し</span></span><br><span class="line">vjpp := reflect.ValueOf(&amp;j)</span><br><span class="line">fmt.Println(vjpp.Type().Elem(), vjpp.Elem().CanSet(), vjpp.Elem().CanAddr())</span><br><span class="line"><span class="comment">// *int true true: ポインタ変数自体は代入可能</span></span><br><span class="line">fmt.Println(vjpp.Type().Elem().Elem(), vjpp.Elem().Elem().CanSet(), vjpp.Elem().Elem().CanAddr())</span><br><span class="line"><span class="comment">// int false false: ポインタが指す先は代入不可能</span></span><br><span class="line">vjpp.Elem().Set(reflect.New(reflect.TypeOf(<span class="number">0</span>))) <span class="comment">// 初期化</span></span><br><span class="line">fmt.Println(vjpp.Type().Elem().Elem(), vjpp.Elem().Elem().CanSet(), vjpp.Elem().Elem().CanAddr())</span><br><span class="line"><span class="comment">// int true true: 初期化したら代入可能になった</span></span><br><span class="line">vjpp.Elem().Elem().SetInt(<span class="number">20</span>) <span class="comment">// panic</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;j = %d\n&quot;</span>, *j)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> k *<span class="type">int</span> <span class="comment">// ポインタ変数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ポインタ変数の値渡し</span></span><br><span class="line">vkp := reflect.ValueOf(k)</span><br><span class="line">fmt.Println(vkp.Type(), vkp.CanSet(), vkp.CanAddr())</span><br><span class="line"><span class="comment">// *int false false: ポインタ変数自体が代入不可能に</span></span><br><span class="line">vkp.Set(reflect.New(reflect.TypeOf(<span class="number">0</span>))) <span class="comment">// 初期化でpanic</span></span><br><span class="line"><span class="comment">// vjp.Elem().SetInt(20)</span></span><br><span class="line"><span class="comment">// fmt.Printf(&quot;j = %d\n&quot;, *j)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ちょっとした型違いであっても代入は可能"><a href="#ちょっとした型違いであっても代入は可能" class="headerlink" title="ちょっとした型違いであっても代入は可能"></a>ちょっとした型違いであっても代入は可能</h1><p>初めてリフレクションの値の代入をしたときは、変換元と変換先の型を大量に並べた巨大なswitch文を書いてやっていたのですが、型違いであっても<code>reflect.Value</code>の<code>Convert()</code>メソッドで変換できます。panicを防ぐためにあらかじめ<code>CanConvert()</code>メソッドで確認しておくと安全です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> f <span class="type">float64</span></span><br><span class="line"></span><br><span class="line">vfp := reflect.ValueOf(&amp;f)</span><br><span class="line">vft := vfp.Type().Elem()</span><br><span class="line"></span><br><span class="line"><span class="comment">// intはfloat64に変換可能</span></span><br><span class="line">fmt.Println(reflect.ValueOf(<span class="number">10</span>).CanConvert(vft))</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 変換したら設定可能</span></span><br><span class="line">vfp.Elem().Set(reflect.ValueOf(<span class="number">10</span>).Convert(vft))</span><br><span class="line">fmt.Println(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 変換しないとpanic</span></span><br><span class="line">vfp.Elem().Set(reflect.ValueOf(<span class="number">20</span>)) <span class="comment">// panic</span></span><br><span class="line"><span class="comment">// fmt.Println(f)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="でもやっちゃいけないこともある"><a href="#でもやっちゃいけないこともある" class="headerlink" title="でもやっちゃいけないこともある"></a>でもやっちゃいけないこともある</h1><p>数字から文字列への変換はたぶんruneとして扱われて成功しちゃうのですが、一般的にはやりたいことではないと思うので、<code>CanConvert()</code>そのままではなく、除外したい条件も設定する必要があります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s <span class="type">string</span></span><br><span class="line"></span><br><span class="line">vsp := reflect.ValueOf(&amp;s)</span><br><span class="line">vst := vsp.Type().Elem()</span><br><span class="line"></span><br><span class="line"><span class="comment">// intはstringに変換可能？</span></span><br><span class="line">fmt.Println(reflect.ValueOf(<span class="number">1234</span>).CanConvert(vst))</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">vsp.Elem().Set(reflect.ValueOf(<span class="number">1234</span>).Convert(vst))</span><br><span class="line">fmt.Println(s)</span><br><span class="line"><span class="comment">// Ӓ という文字になってしまう</span></span><br><span class="line"></span><br><span class="line">ik := reflect.TypeOf(<span class="number">0</span>).Kind()</span><br><span class="line"><span class="comment">// この変換を封じるための条件式</span></span><br><span class="line">fmt.Println(reflect.ValueOf(<span class="number">1234</span>).CanConvert(vst) &amp;&amp; !(vst.Kind() == reflect.String &amp;&amp; ((ik == reflect.Int) || (ik == reflect.Uint))))</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>同じコードの書き方でも、状況によってうまくいったりいかなかったりということがあって、思ったよりもコードのデバッグに時間がかかってしまったので、整理した結果をまとめました。リファレンスを眺めただけではわからなかった数々の落とし穴です。</p><p><code>Type()</code>を見た時に同じ<code>int</code>となる<code>reflect.Value</code>でも、代入可能なもの、不可能なものがある、というのに気づくまでかなり時間がかかって遠回りをしてきましたが、今では自信を持ってリフレクションが使えるようになりました。</p><ul><li><code>nil</code>のポインタ変数場合は<code>Elem()</code>から<code>Type()</code>はpanicになるので逆の呼び出しが必要</li><li>単体の変数はポインタ渡し。<code>Elem()</code>を呼んでから<code>Set()</code>系メソッドが必要</li><li>構造体のメンバーは値型の場合は<code>Elem()</code>不要</li><li>ポインタ変数への代入はインスタンスを作ってあげる必要がある</li><li>ちょっとした自動型変換はできるが、数値から文字列への変換は要注意</li></ul><p>リフレクションをやる必要がある人は、参考にしてもらえればと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220921a/goreflection.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;482&quot;&gt;

&lt;p&gt;The Go gopher was designed by &lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="OSS" scheme="https://future-architect.github.io/tags/OSS/"/>
    
    <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
    <category term="リフレクション" scheme="https://future-architect.github.io/tags/%E3%83%AA%E3%83%95%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3/"/>
    
    <category term="tagscanner" scheme="https://future-architect.github.io/tags/tagscanner/"/>
    
  </entry>
  
  <entry>
    <title>Dataflow後編（Dataflowの事前準備からPub/Sub・BigQueryとの連携例まで）</title>
    <link href="https://future-architect.github.io/articles/20220920b/"/>
    <id>https://future-architect.github.io/articles/20220920b/</id>
    <published>2022-09-19T15:00:01.000Z</published>
    <updated>2022-09-20T03:52:33.400Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220920b/dataflow_top2.png" alt="" width="1000" height="663"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、フューチャーのインターン”Engineer Camp”に参加した平野と申します。<br>今回のインターンでは、Google Cloud Platform (GCP)のサービスとして提供されているDataflowについて調査し、その仕組みや使い方についてこの技術ブログにまとめることに取り組みました。</p><p>フューチャーのインターンについては<a href="/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/">こちら</a>をご覧ください！</p><p>今回の記事は前編・後編に分かれており</p><ul><li>前編:<ul><li>Dataflowの概要</li><li>Apache Beamの概要・内部的な仕組み</li><li>Apache Beamのコードの書き方</li></ul></li><li>後編：<ul><li>Dataflowを使う上での事前準備と基本的な使い方</li><li>GPUを使う上での事前準備と基本的な使い方</li><li>Pub&#x2F;Sub・BigQueryとの連携例</li></ul></li></ul><p>という構成になっています。前編は<a href="/articles/20220920a/">こちら</a>。</p><h1 id="Datflowの事前準備と基本的な使い方"><a href="#Datflowの事前準備と基本的な使い方" class="headerlink" title="Datflowの事前準備と基本的な使い方"></a>Datflowの事前準備と基本的な使い方</h1><p>Dataflowを使うための事前準備からパイプライン実行までの一連の流れについて説明します。以下の手順で進めます。</p><ol><li>APIの有効化</li><li>IAMの設定</li><li>Apache Beam SDKのインストール</li><li>Cloud Storageバケットの作成</li><li>Dataflow上でパイプラインを実行</li></ol><p>なお、以降の</p><ul><li><a href="#dataflow%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8Bgpu%E3%81%AA%E3%81%97ver">Dataflowの使用例（GPUなしver.）</a></li><li><a href="#dataflow%E3%81%A7gpu%E3%82%92%E4%BD%BF%E3%81%86%E9%9A%9B%E3%81%AE%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99%E3%81%A8%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E3%81%84%E6%96%B9">DataflowでGPUを使う際の事前準備と基本的な使い方</a></li><li><a href="#dataflow%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8Bgpu%E3%81%82%E3%82%8Aver">Dataflowの使用例（GPUありver.）</a></li><li><a href="#%E4%BB%96%E3%81%AEgcp%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%A8%E3%81%AE%E9%80%A3%E6%90%BA%E3%81%A8%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%9F%E3%83%B3%E3%82%B0%E5%87%A6%E7%90%86">他のGCPサービスとの連携とストリーミング処理</a></li></ul><p>では、ここで説明する<a href="#api%E3%81%AE%E6%9C%89%E5%8A%B9%E5%8C%96">APIの有効化</a>、<a href="#iam%E3%81%AE%E8%A8%AD%E5%AE%9A">IAMの設定</a>、<a href="#cloud-storage%E3%83%90%E3%82%B1%E3%83%83%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90">Cloud Storageバケットの作成</a>ができている前提で話を進めています。</p><h2 id="APIの有効化"><a href="#APIの有効化" class="headerlink" title="APIの有効化"></a>APIの有効化</h2><p>Compute Engine API, Dataflow API, Cloud Storage APIとその他必要な（連携させたい）APIを有効化します。APIの有効化はコンソール画面上部にある検索窓から有効化したいAPIを検索すれば簡単に有効化できます。</p><h2 id="IAMの設定"><a href="#IAMの設定" class="headerlink" title="IAMの設定"></a>IAMの設定</h2><p>APIを有効化するとIAMに<strong>Compute Engine default service account</strong>という名前のアカウントが追加されているはずです。<br>Dataflowを利用するにはそのサービスアカウントに<strong>Dataflowワーカー</strong>、<strong>Dataflow管理者</strong>、<strong>Storageオブジェクト管理者</strong>のロールを追加して保存します。以下の画像のようになっていればOKです。<br><img src="/images/20220920b/IAM_setting.png" alt="IAM_setting.png" width="1200" height="164" loading="lazy"><br>なお、ロールを付与するには、<strong>resourcemanager.projects.setIamPolicy</strong>の権限を持っている必要があります。持っていない場合はプロジェクトの管理者に権限を付与してもらうか、サービスアカウントへのロールの付与を代わりにやってもらってください。</p><h2 id="Apache-Beam-SDKのインストール"><a href="#Apache-Beam-SDKのインストール" class="headerlink" title="Apache Beam SDKのインストール"></a>Apache Beam SDKのインストール</h2><p>続いて、ローカル環境（今回はCloud Shell）にApache Beam SDKをインストールします。2022&#x2F;08&#x2F;30現在、Apache Beam SDKでサポートされているPythonのバージョンは3.8までです。一方、Cloud ShellにデフォルトでインストールされているPythonのバージョンは3.9ですので、pyenv等を用いてPython3.8を実行する仮想環境を作成してください。その後、作成した仮想環境にApache Beamをインストールします。Dataflow(GCP)上で実行するには追加パッケージをインストールする必要があるので、以下のコマンドでインストールしてください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install apache-beam[gcp]</span><br></pre></td></tr></table></figure><h2 id="Cloud-Storageバケットの作成"><a href="#Cloud-Storageバケットの作成" class="headerlink" title="Cloud Storageバケットの作成"></a>Cloud Storageバケットの作成</h2><p>Dataflowでパイプライン処理を行う場合、一時ファイルや出力ファイルを保存するためにCloud Storageのバケットを作成する必要があります。<br>バケットの作成はコンソール画面から作成する方法とpythonから作成する方法があります。<br>コンソール画面からは以下のように作成できます。<br><img src="/images/20220920b/make_bucket_new.gif" alt="make_bucket_new.gif" width="1200" height="665" loading="lazy"></p><p>pythonからバケットを作成する際は以下のコードを参考にしてください（<code>pip3 install google-cloud-storage</code>が必要です）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> storage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_bucket</span>(<span class="params">project_name, bucket_name, region</span>):</span><br><span class="line">    client = storage.Client(project_name)</span><br><span class="line">    bucket = storage.Bucket(client)</span><br><span class="line">    bucket.name = bucket_name</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bucket.exists():</span><br><span class="line">        client.create_bucket(bucket, location=region)</span><br></pre></td></tr></table></figure><h2 id="Dataflow上でパイプラインを実行"><a href="#Dataflow上でパイプラインを実行" class="headerlink" title="Dataflow上でパイプラインを実行"></a>Dataflow上でパイプラインを実行</h2><p>続いて、Dataflow上でパイプラインを実行していきます。Dataflow上でパイプラインを実行するにはいくつかのオプションを指定する必要があります（主にGCP関連）。ここでは、それらのオプションの説明とオプションの渡し方について説明します。<br>Dataflowでパイプラインを実行するためには以下のようなオプションを指定する必要があります。</p><div class="scroll"><table><thead><tr><th align="center">オプション名</th><th align="left">説明</th></tr></thead><tbody><tr><td align="center">runner</td><td align="left">Dataflowで動かす場合には<code>DataflowRunner</code>を指定。ローカルで動かす場合には<code>DirectRunner</code>。</td></tr><tr><td align="center">project</td><td align="left">プロジェクトID。指定しないとエラーが返ってくる。</td></tr><tr><td align="center">job_name</td><td align="left">実行するジョブの名前。Dataflowのジョブのところにジョブの一覧が表示されるが、その際にどのジョブかを見分ける際に使える。指定しなければ勝手に名前をつけてくれるが、パッと見で判断しづらい。</td></tr><tr><td align="center">temp_location</td><td align="left">一時ファイルを保存するためのGCSのパス（<code>gs://</code>からスタートするパス）。指定しなければstaging_locationのパスが使用される。</td></tr><tr><td align="center">staging_location</td><td align="left">ローカルファイルをステージングするためのGCSのパス。指定しなければtemp_locationのパスが使用される。temp_locationかstaging_locationのどちらかは指定しなければならない。</td></tr><tr><td align="center">region</td><td align="left">Dataflowジョブをデプロイするリージョンエンドポイント。デフォルトでは<code>us-central1</code>。</td></tr></tbody></table></div><p>ここでは動かすのに必要な（とりあえずこのへんを渡しておけば動く）オプションを紹介していますので、その他のオプションについては<a href="https://cloud.google.com/dataflow/docs/guides/setting-pipeline-options#setting-other-cloud-dataflow-pipeline-options">公式ドキュメント</a>を参照してください。</p><p>実行する際には以下のように<code>--&lt;オプション名&gt; 値</code>の形式で指定することでオプションを渡すことができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python &#123;ソースコードまでのpath&#125; \</span><br><span class="line">--runner <span class="string">&quot;DataflowRunner&quot;</span> \</span><br><span class="line">--project <span class="string">&quot;&#123;プロジェクトID&#125;&quot;</span> \</span><br><span class="line">--job_name <span class="string">&quot;&#123;ジョブの名前&#125;&quot;</span> \</span><br><span class="line">--temp_location <span class="string">&quot;gs://&#123;バケットの名前&#125;/temp&quot;</span> \</span><br><span class="line">--region <span class="string">&quot;asia-northeast1&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Dataflowの使用例（GPUなしver-）"><a href="#Dataflowの使用例（GPUなしver-）" class="headerlink" title="Dataflowの使用例（GPUなしver.）"></a>Dataflowの使用例（GPUなしver.）</h1><p>ここでは、scikit-learnのモデルの推論をDataflow上で行う例を扱っていきます。今回はIrisデータセットで学習したモデルの重みパラメータ(<code>SVC_iris.pkl2</code>)が既に手元にあるという想定で、そのモデルの推論（学習時と同じIrisデータセットを使用）をDataflow上で行っていきます。以下のような手順で進めていきます。</p><ol><li>ソースコードの準備</li><li>Cloud ShellでPythonの環境構築</li><li>パイプラインの実行</li></ol><p>なお、<a href="#api%E3%81%AE%E6%9C%89%E5%8A%B9%E5%8C%96">APIの有効化</a>、<a href="#iam%E3%81%AE%E8%A8%AD%E5%AE%9A">IAMの設定</a>、<a href="#cloud-storage%E3%83%90%E3%82%B1%E3%83%83%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90">Cloud Storageバケットの作成</a>がお済みでない方はまずそちらから始めてください。</p><h2 id="ソースコードの準備"><a href="#ソースコードの準備" class="headerlink" title="ソースコードの準備"></a>ソースコードの準備</h2><p>今回実行したいソースコード(ファイル名:<code>runinference_sklearn.py</code>)です。モデルの重みパラメータまでのpathは<code>&#123;ソースコードがあるディレクトリ&#125;/models/sklearn_models/SVC_iris.pkl2</code>です。</p><figure class="highlight python"><figcaption><span>runinference_sklearn.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apache_beam <span class="keyword">as</span> beam</span><br><span class="line"><span class="keyword">from</span> apache_beam.ml.inference <span class="keyword">import</span> RunInference</span><br><span class="line"><span class="keyword">from</span> apache_beam.ml.inference.sklearn_inference <span class="keyword">import</span> ModelFileType, SklearnModelHandlerNumpy</span><br><span class="line"><span class="keyword">from</span> apache_beam.options.pipeline_options <span class="keyword">import</span> PipelineOptions</span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> storage</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_model_to_gcs</span>(<span class="params">local_model_path, gcs_model_path, project_name, bucket_name</span>):</span><br><span class="line">    client = storage.Client(project_name)</span><br><span class="line">    bucket = storage.Bucket(client)</span><br><span class="line">    bucket.name = bucket_name</span><br><span class="line">    blob = bucket.blob(gcs_model_path)</span><br><span class="line">    blob.upload_from_filename(local_model_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># パイプラインオプションの設定</span></span><br><span class="line">    pipeline_options = PipelineOptions()</span><br><span class="line">    options_dict = pipeline_options.display_data()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Irisデータの準備</span></span><br><span class="line">    data = load_iris()</span><br><span class="line">    numpy_data = data.data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># モデルのアップロード</span></span><br><span class="line">    upload_model_to_gcs(</span><br><span class="line">        local_model_path=<span class="string">&quot;./models/sklearn_models/SVC_iris.pkl2&quot;</span>,</span><br><span class="line">        gcs_model_path=<span class="string">&quot;models/sklearn_models/SVC_iris.pkl2&quot;</span>,</span><br><span class="line">        project_name=options_dict[<span class="string">&quot;project&quot;</span>],</span><br><span class="line">        bucket_name=options_dict[<span class="string">&quot;bucket_name&quot;</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ハンドラーの設定</span></span><br><span class="line">    model_uri = <span class="string">&quot;gs://&#123;&#125;/models/sklearn_models/SVC_iris.pkl2&quot;</span>.<span class="built_in">format</span>(options_dict[<span class="string">&quot;bucket_name&quot;</span>])</span><br><span class="line">    model_file_type = ModelFileType.JOBLIB</span><br><span class="line">    model_handler = SklearnModelHandlerNumpy(model_uri=model_uri, model_file_type=model_file_type)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># パイプライン実行</span></span><br><span class="line">    logging.getLogger().setLevel(logging.INFO)</span><br><span class="line">    <span class="keyword">with</span> beam.Pipeline(options=pipeline_options) <span class="keyword">as</span> p:</span><br><span class="line">        <span class="built_in">input</span> = p | <span class="string">&quot;read&quot;</span> &gt;&gt; beam.Create(numpy_data)</span><br><span class="line"></span><br><span class="line">        prediction = (</span><br><span class="line">            <span class="built_in">input</span></span><br><span class="line">            | RunInference(model_handler)</span><br><span class="line">            | beam.io.WriteToText(options_dict[<span class="string">&quot;output_executable_path&quot;</span>], shard_name_template=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><h2 id="Cloud-ShellでPythonの環境構築"><a href="#Cloud-ShellでPythonの環境構築" class="headerlink" title="Cloud ShellでPythonの環境構築"></a>Cloud ShellでPythonの環境構築</h2><p>次にCloud ShellのPython環境を構築していきます。<br>まず、Python 3.8の環境を準備します。ターミナル上で</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 3.8.13</span><br></pre></td></tr></table></figure><p>を実行し、Python 3.8をインストールします。その後、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv virtualenv 3.8.13 dataflow</span><br><span class="line">pyenv activate dataflow</span><br></pre></td></tr></table></figure><p>を実行してPython 3.8.13がインストールされた仮想環境（ここでは<code>dataflow</code>）をアクティベートします。<br>続いて、必要なパッケージをインストールしていきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install apache-beam[gcp] google-gcloud-storage</span><br><span class="line">pip3 install scikit-learn</span><br></pre></td></tr></table></figure><h2 id="パイプラインの実行"><a href="#パイプラインの実行" class="headerlink" title="パイプラインの実行"></a>パイプラインの実行</h2><p>必要なパッケージのインストールが終わったら、最後にパイプラインを実行していきます。以下のコマンドを実行するとDataflow上でパイプライン処理が動き始めます。<code>&#123;プロジェクトID&#125;</code>、<code>&#123;ジョブの名前&#125;</code>、<code>&#123;バケットの名前&#125;</code>は適宜変更してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">python runinference_sklearn.py \</span><br><span class="line">--runner <span class="string">&quot;DataflowRunner&quot;</span> \</span><br><span class="line">--project <span class="string">&quot;&#123;プロジェクトID&#125;&quot;</span> \</span><br><span class="line">--job_name <span class="string">&quot;&#123;ジョブの名前&#125;&quot;</span> \</span><br><span class="line">--temp_location <span class="string">&quot;gs://&#123;バケットの名前&#125;/temp/&quot;</span> \</span><br><span class="line">--staging_location <span class="string">&quot;gs://&#123;バケットの名前&#125;/stage/&quot;</span> \</span><br><span class="line">--region <span class="string">&quot;asia-northeast1&quot;</span> \</span><br><span class="line">--bucket_name <span class="string">&quot;&#123;バケットの名前&#125;&quot;</span> \</span><br><span class="line">--output <span class="string">&quot;gs://&#123;バケットの名前&#125;/output.txt&quot;</span></span><br></pre></td></tr></table></figure><h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><p>推論結果はCloud Storageのバケットの<code>output.txt</code>に出力されます。今回の例では以下のような結果が得られました。</p><figure class="highlight text"><figcaption><span>output.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PredictionResult(example=array([5.1, 3.4, 1.5, 0.2]), inference=0)</span><br><span class="line">PredictionResult(example=array([5. , 3.4, 1.6, 0.4]), inference=0)</span><br><span class="line">PredictionResult(example=array([7.6, 3. , 6.6, 2.1]), inference=2)</span><br><span class="line">PredictionResult(example=array([5.9, 3. , 4.2, 1.5]), inference=1)</span><br><span class="line">PredictionResult(example=array([5.7, 3.8, 1.7, 0.3]), inference=0)</span><br><span class="line">PredictionResult(example=array([5.7, 4.4, 1.5, 0.4]), inference=0)</span><br><span class="line">PredictionResult(example=array([6.9, 3.1, 5.4, 2.1]), inference=2)</span><br><span class="line">PredictionResult(example=array([6.2, 2.2, 4.5, 1.5]), inference=1)</span><br><span class="line">PredictionResult(example=array([5.2, 4.1, 1.5, 0.1]), inference=0)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="DataflowでGPUを使う際の事前準備と基本的な使い方"><a href="#DataflowでGPUを使う際の事前準備と基本的な使い方" class="headerlink" title="DataflowでGPUを使う際の事前準備と基本的な使い方"></a>DataflowでGPUを使う際の事前準備と基本的な使い方</h1><p>DataflowでGPUを使用したい場合（例えば機械学習モデルの推論など）には、Dockerと組み合わせることでGPUを使用できます。<br>基本的な流れは<a href="#datflow%E3%81%AE%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99%E3%81%A8%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E3%81%84%E6%96%B9">Datflowの事前準備と基本的な使い方</a>と同じです。違いはDockerイメージの準備とパイプラインに追加で渡すオプションが増えることくらいです。ここでは</p><ol><li>Dockerイメージの準備</li><li>GPU使用時のオプション</li></ol><p>について説明します。なお、<a href="#api%E3%81%AE%E6%9C%89%E5%8A%B9%E5%8C%96">APIの有効化</a>、<a href="#iam%E3%81%AE%E8%A8%AD%E5%AE%9A">IAMの設定</a>、<a href="#cloud-storage%E3%83%90%E3%82%B1%E3%83%83%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90">Cloud Storageバケットの作成</a>がお済みでない方はまずそちらから始めてください。</p><h2 id="Dockerイメージの準備"><a href="#Dockerイメージの準備" class="headerlink" title="Dockerイメージの準備"></a>Dockerイメージの準備</h2><p>DataflowでGPUを使用するには、Apache Beamが扱える、かつ、必要なGPUライブラリが入ったDockerイメージを用意する必要があります。ありがたいことに<a href="https://github.com/GoogleCloudPlatform/python-docs-samples/tree/main/dataflow/gpu-examples/pytorch-minimal">PyTorch用の最小イメージ</a>や<a href="https://github.com/GoogleCloudPlatform/python-docs-samples/tree/main/dataflow/gpu-examples/tensorflow-minimal">TensorFlow用の最小イメージ</a>のためのsampleが既に用意されているので、特に理由がなければこちらを利用するのが楽かと思います。</p><p>PyTorchを使用する場合には<a href="https://github.com/GoogleCloudPlatform/python-docs-samples/tree/main/dataflow/gpu-examples/pytorch-minimal">PyTorch用の最小イメージ</a>からファイルをダウンロード後、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud builds submit --config build.yaml</span><br></pre></td></tr></table></figure><p>で、DockerイメージをContainer Registryに保存します（デフォルトでのイメージ名は<code>samples/dataflow/pytorch-gpu:latest</code>）。</p><p>なお、私の環境では、Pythonのバージョンが3.8ではパイプライン実行の際にエラー（<code>TypeError: code() takes at most 15 arguments (16 given)</code>）が発生してしまっていたため、Pythonのバージョンを3.7に落としました。具体的には以下のように変更することでエラーは発生しなくなりました。</p><ul><li><p>pyenvでPython 3.7の環境を用意<br>  ターミナル上で</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 3.7.13</span><br></pre></td></tr></table></figure><p>  を実行し、Python 3.7をインストールします。その後、</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv virtualenv 3.7.13 dataflow_gpu</span><br><span class="line">pyenv activate dataflow_gpu</span><br></pre></td></tr></table></figure><p>  を実行してPython 3.7.13がインストールされた仮想環境（ここでは<code>dataflow_gpu</code>）をアクティベートします。<br>  続いて、Apache Beamをインストールしていきます。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install apache-beam[gcp]</span><br></pre></td></tr></table></figure></li><li><p>Dockerfileを以下のように変更</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">FROM pytorch/pytorch:1.9.1-cuda11.1-cudnn8-runtime</span><br><span class="line"></span><br><span class="line">WORKDIR /pipeline</span><br><span class="line"></span><br><span class="line">COPY requirements.txt .</span><br><span class="line">COPY *.py ./</span><br><span class="line"></span><br><span class="line">RUN apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y --no-install-recommends g++ \</span><br><span class="line">    &amp;&amp; apt-get install -y curl \  # この行を追加</span><br><span class="line">        python3.7 \  # この行を追加</span><br><span class="line">        python3-distutils \  # この行を追加</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/* \</span><br><span class="line">    # Install the pipeline requirements and check that there are no conflicts.</span><br><span class="line">    # Since the image already has all the dependencies installed,</span><br><span class="line">    # there&#x27;s no need to run with the --requirements_file option.</span><br><span class="line">    &amp;&amp; pip install --no-cache-dir --upgrade pip \</span><br><span class="line">    &amp;&amp; pip install --no-cache-dir -r requirements.txt \</span><br><span class="line">    &amp;&amp; pip check</span><br><span class="line"></span><br><span class="line"># Set the entrypoint to Apache Beam SDK worker launcher.</span><br><span class="line">COPY --from=apache/beam_python3.8_sdk:2.38.0 /opt/apache/beam /opt/apache/beam</span><br><span class="line">ENTRYPOINT [ &quot;/opt/apache/beam/boot&quot; ]</span><br></pre></td></tr></table></figure></li></ul><h2 id="GPU使用時のオプション"><a href="#GPU使用時のオプション" class="headerlink" title="GPU使用時のオプション"></a>GPU使用時のオプション</h2><p>DataflowでGPUを使用する際には、実行時に以下のようなオプションを追加で指定する必要があります。</p><div class="scroll"><table><thead><tr><th align="left">オプション名</th><th align="left">説明</th></tr></thead><tbody><tr><td align="left">sdk_container_image</td><td align="left">使用するコンテナイメージの名前。</td></tr><tr><td align="left">disk_size_gb</td><td align="left">各ワーカー VM のブートディスクのサイズ</td></tr><tr><td align="left">experiments</td><td align="left">Dataflow Runner v2を使用するかやGPUのタイプ・個数、Nvidiaドライバをインストールするかを指定する際に使用。具体的な使い方は下の例を参照。</td></tr></tbody></table></div><p><code>experiments</code>オプションに関しては次のように指定します。下の例のように複数個に分けて指定してもOKです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--experiments <span class="string">&quot;worker_accelerator=type:nvidia-tesla-t4;count:1;install-nvidia-driver&quot;</span> \</span><br><span class="line">--experiments <span class="string">&quot;use_runner_v2&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Dataflowの使用例（GPUありver-）"><a href="#Dataflowの使用例（GPUありver-）" class="headerlink" title="Dataflowの使用例（GPUありver.）"></a>Dataflowの使用例（GPUありver.）</h1><p>ここでは、PyTorchのモデルの推論をDataflow上で行う例を扱っていきます。今回はMNISTデータセットで学習したモデルの重みパラメータ(<code>mnist_epoch_10.pth</code>)が既に手元にあるという想定で、そのモデルの推論（MNISTのテスト用データセットを使用）をDataflow上で行っていきます。以下のような手順で進めていきます。</p><ol><li>ソースコードの準備</li><li>Dockerコンテナイメージの作成</li><li>Cloud ShellでPythonの環境構築</li><li>パイプラインの実行</li></ol><p>なお、<a href="#api%E3%81%AE%E6%9C%89%E5%8A%B9%E5%8C%96">APIの有効化</a>、<a href="#iam%E3%81%AE%E8%A8%AD%E5%AE%9A">IAMの設定</a>、<a href="#cloud-storage%E3%83%90%E3%82%B1%E3%83%83%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90">Cloud Storageバケットの作成</a>がお済みでない方はまずそちらから始めてください。</p><h2 id="ソースコードの準備-1"><a href="#ソースコードの準備-1" class="headerlink" title="ソースコードの準備"></a>ソースコードの準備</h2><p>今回実行したいソースコード(ファイル名:<code>runinference_pytorch.py</code>)です。</p><figure class="highlight python"><figcaption><span>runinference_pytorch.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apache_beam <span class="keyword">as</span> beam</span><br><span class="line"><span class="keyword">from</span> apache_beam.ml.inference.base <span class="keyword">import</span> RunInference</span><br><span class="line"><span class="keyword">from</span> apache_beam.ml.inference.pytorch_inference <span class="keyword">import</span> PytorchModelHandlerTensor</span><br><span class="line"><span class="keyword">from</span> apache_beam.options.pipeline_options <span class="keyword">import</span> PipelineOptions</span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> storage</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pytorch_MNIST <span class="keyword">import</span> MNIST_Model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_model_to_gcs</span>(<span class="params">local_model_path, gcs_model_path, project_name, bucket_name</span>):</span><br><span class="line">    client = storage.Client(project_name)</span><br><span class="line">    bucket = storage.Bucket(client)</span><br><span class="line">    bucket.name = bucket_name</span><br><span class="line">    blob = bucket.blob(gcs_model_path)</span><br><span class="line">    blob.upload_from_filename(local_model_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># パイプラインオプションの設定</span></span><br><span class="line">    pipeline_options = PipelineOptions()</span><br><span class="line">    options_dict = pipeline_options.display_data()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># データセットの準備</span></span><br><span class="line">    transform = transforms.Compose([</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize((<span class="number">0.1307</span>), (<span class="number">0.3081</span>), inplace=<span class="literal">True</span>)</span><br><span class="line">    ])</span><br><span class="line">    test_dataset = datasets.MNIST(</span><br><span class="line">        root=<span class="string">&quot;./data/&quot;</span>,</span><br><span class="line">        train=<span class="literal">False</span>,</span><br><span class="line">        transform=transform,</span><br><span class="line">        download=<span class="literal">True</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># モデルのアップロード</span></span><br><span class="line">    upload_model_to_gcs(</span><br><span class="line">        local_model_path=<span class="string">&quot;./models/pytorch_models/mnist_epoch_10.pth&quot;</span>,</span><br><span class="line">        gcs_model_path=<span class="string">&quot;models/pytorch_models/mnist_epoch_10.pth&quot;</span>,</span><br><span class="line">        project_name=options_dict[<span class="string">&quot;project&quot;</span>],</span><br><span class="line">        bucket_name=options_dict[<span class="string">&quot;bucket_name&quot;</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ハンドラーの設定</span></span><br><span class="line">    model_handler = PytorchModelHandlerTensor(</span><br><span class="line">        state_dict_path=<span class="string">&quot;gs://&#123;&#125;/models/pytorch_models/mnist_epoch_10.pth&quot;</span>.<span class="built_in">format</span>(options_dict[<span class="string">&quot;bucket_name&quot;</span>]),</span><br><span class="line">        model_class=MNIST_Model,</span><br><span class="line">        model_params=&#123;&#125;,</span><br><span class="line">        device=<span class="string">&quot;GPU&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># パイプライン実行</span></span><br><span class="line">    logging.getLogger().setLevel(logging.INFO)</span><br><span class="line">    <span class="keyword">with</span> beam.Pipeline(options=pipeline_options) <span class="keyword">as</span> p:</span><br><span class="line">        data = p | <span class="string">&quot;read&quot;</span> &gt;&gt; beam.Create(test_dataset)</span><br><span class="line">        test = (</span><br><span class="line">            data</span><br><span class="line">            | <span class="string">&quot;extract image&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line">            | <span class="string">&quot;inference&quot;</span> &gt;&gt; RunInference(model_handler)</span><br><span class="line">            | beam.io.WriteToText(options_dict[<span class="string">&quot;output_executable_path&quot;</span>], shard_name_template=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>モデルの構造を定義したコード(ファイル名:<code>pytorch_MNIST.py</code>)です。</p><figure class="highlight python"><figcaption><span>pytorch_MNIST.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MNIST_Model</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.feature = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>)</span><br><span class="line">        )</span><br><span class="line">        self.classifier = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">147</span>, <span class="number">128</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            nn.Linear(<span class="number">128</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.feature(x)</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">        x = self.classifier(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p>これらのソースコードはCloud Shellの同一のディレクトリに置いてください。また、モデルの重みパラメータまでのpathは<code>&#123;ソースコードがあるディレクトリ&#125;/models/pytorch_models/mnist_epoch_10.pth</code>です。</p><h2 id="Dockerコンテナイメージの作成"><a href="#Dockerコンテナイメージの作成" class="headerlink" title="Dockerコンテナイメージの作成"></a>Dockerコンテナイメージの作成</h2><p>続いて、Dockerイメージを準備していきます。<a href="https://github.com/GoogleCloudPlatform/python-docs-samples/tree/main/dataflow/gpu-examples/pytorch-minimal">PyTorch用の最小イメージ</a>からファイルをダウンロード後、それらのファイルをソースコードと同一のディレクトリに置きます。続いてDockerfileを以下のように変更します。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> pytorch/pytorch:<span class="number">1.9</span>.<span class="number">1</span>-cuda11.<span class="number">1</span>-cudnn8-runtime</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /pipeline</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> *.py ./</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get install -y --no-install-recommends g++ \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get install -y curl \  <span class="comment"># この行を追加</span></span></span><br><span class="line">        python3.<span class="number">7</span> \  <span class="comment"># この行を追加</span></span><br><span class="line">        python3-distutils \  <span class="comment"># この行を追加</span></span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/* \</span><br><span class="line">    <span class="comment"># Install the pipeline requirements and check that there are no conflicts.</span></span><br><span class="line">    <span class="comment"># Since the image already has all the dependencies installed,</span></span><br><span class="line">    <span class="comment"># there&#x27;s no need to run with the --requirements_file option.</span></span><br><span class="line">    &amp;&amp; pip install --no-cache-dir --upgrade pip \</span><br><span class="line">    &amp;&amp; pip install --no-cache-dir -r requirements.txt \</span><br><span class="line">    &amp;&amp; pip check</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the entrypoint to Apache Beam SDK worker launcher.</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=apache/beam_python3.8_sdk:2.38.0 /opt/apache/beam /opt/apache/beam</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/opt/apache/beam/boot&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>その後、コンテナイメージをContainer Registryに保存するために以下のコマンドを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud builds submit --config build.yaml</span><br></pre></td></tr></table></figure><p>コンテナイメージ名は<code>samples/dataflow/pytorch-gpu:latest</code>で保存されます。</p><h2 id="Cloud-ShellでPythonの環境構築-1"><a href="#Cloud-ShellでPythonの環境構築-1" class="headerlink" title="Cloud ShellでPythonの環境構築"></a>Cloud ShellでPythonの環境構築</h2><p>次にCloud ShellのPython環境を構築していきます。<br>まず、Python 3.7の環境を準備します。ターミナル上で</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 3.7.13</span><br></pre></td></tr></table></figure><p>を実行し、Python 3.7をインストールします。その後、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv virtualenv 3.7.13 dataflow_gpu</span><br><span class="line">pyenv activate dataflow_gpu</span><br></pre></td></tr></table></figure><p>を実行してPython 3.7.13がインストールされた仮想環境（ここでは<code>dataflow_gpu</code>）をアクティベートします。<br>続いて、必要なパッケージをインストールしていきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install apache-beam[gcp] google-gcloud-storage</span><br><span class="line">pip3 install torch torchvision</span><br></pre></td></tr></table></figure><h2 id="パイプラインの実行-1"><a href="#パイプラインの実行-1" class="headerlink" title="パイプラインの実行"></a>パイプラインの実行</h2><p>必要なパッケージのインストールが終わったら、最後にパイプラインを実行していきます。<br>以下のコマンドを実行するとDataflow上でパイプライン処理が動き始めます。<code>&#123;プロジェクトID&#125;</code>、<code>&#123;ジョブの名前&#125;</code>、<code>&#123;バケットの名前&#125;</code>は適宜変更してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python runinference_pytorch.py \</span><br><span class="line">--runner <span class="string">&quot;DataflowRunner&quot;</span> \</span><br><span class="line">--project <span class="string">&quot;&#123;プロジェクトID&#125;&quot;</span> \</span><br><span class="line">--job_name <span class="string">&quot;&#123;ジョブの名前&#125;&quot;</span> \</span><br><span class="line">--temp_location <span class="string">&quot;gs://&#123;バケットの名前&#125;/temp/&quot;</span> \</span><br><span class="line">--staging_location <span class="string">&quot;gs://&#123;バケットの名前&#125;/stage/&quot;</span> \</span><br><span class="line">--region <span class="string">&quot;asia-northeast1&quot;</span> \</span><br><span class="line">--bucket_name <span class="string">&quot;&#123;バケットの名前&#125;&quot;</span> \</span><br><span class="line">--output <span class="string">&quot;gs://&#123;バケットの名前&#125;/output.txt&quot;</span> \</span><br><span class="line">--sdk_container_image <span class="string">&quot;gcr.io/&#123;プロジェクトID&#125;/samples/dataflow/pytorch-gpu:latest&quot;</span> \</span><br><span class="line">--disk_size_gb 50 \</span><br><span class="line">--experiments <span class="string">&quot;worker_accelerator=type:nvidia-tesla-t4;count:1;install-nvidia-driver&quot;</span> \</span><br><span class="line">--experiments <span class="string">&quot;use_runner_v2&quot;</span></span><br></pre></td></tr></table></figure><h2 id="結果-1"><a href="#結果-1" class="headerlink" title="結果"></a>結果</h2><p>推論結果はCloud Storageのバケットの<code>output.txt</code>に出力されます。今回の例では以下のような結果が得られました。</p><figure class="highlight text"><figcaption><span>output.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">tensor([ -8.2468,  -2.1803,  -9.8459,   1.3747,   2.4845,  -5.6996, -18.9429,</span><br><span class="line">          3.0085,  -5.7692,  12.0357], requires_grad=True)</span><br><span class="line">tensor([ -5.9876, -14.5651,  -7.3873,   8.2820,  -6.1497,   1.6121, -18.5136,</span><br><span class="line">         -9.5785,   1.7698,  12.8093], requires_grad=True)</span><br><span class="line">tensor([  9.2505,  -1.7219,  -2.7147,  -3.9045, -10.8319,  -1.9610,   2.5355,</span><br><span class="line">         -8.6489,  -3.3169,  -6.9540], requires_grad=True)</span><br><span class="line">tensor([-8.1391, -0.9647, -6.3984,  2.4964, -0.9498,  1.4407, -8.2989, -3.1957,</span><br><span class="line">         2.5867,  2.6507], requires_grad=True)</span><br><span class="line">tensor([-7.6571, -2.4950, -5.2014, -1.6730, 10.1947, -7.5948, -9.2541,  0.5039,</span><br><span class="line">        -2.6531,  7.1487], requires_grad=True)</span><br><span class="line">tensor([ -5.8362,  12.8431,  -4.1835,  -8.8176,  -6.0804, -10.7981,  -6.2982,</span><br><span class="line">         -0.1830,  -1.4379,  -4.4298], requires_grad=True)</span><br><span class="line">tensor([-4.6527, -7.1966, -8.8277, -7.4921,  6.7380, -4.9899, -0.2908, -4.7030,</span><br><span class="line">         2.0198,  2.2414], requires_grad=True)</span><br><span class="line">tensor([-9.9818, -9.7239, -4.4335, -2.8926,  7.8835,  1.4599, -1.7376, -6.2337,</span><br><span class="line">        -0.9638, -0.7414], requires_grad=True)</span><br><span class="line">tensor([ -3.8291,  -2.5081,  16.6454,   6.6208,  -7.5311, -10.9999, -13.9144,</span><br><span class="line">         -5.1685,   2.5498,  -7.2168], requires_grad=True)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="他のGCPサービスとの連携とストリーミング処理"><a href="#他のGCPサービスとの連携とストリーミング処理" class="headerlink" title="他のGCPサービスとの連携とストリーミング処理"></a>他のGCPサービスとの連携とストリーミング処理</h1><p>最後に、Pub&#x2F;Subからリアルタイムにデータを取得→Dataflowでデータ処理→結果をBigQueryに書き出す例を紹介します。<br>今回はIrisデータセットの各サンプルを10秒間隔でPub&#x2F;SubにPublishし、<a href="#dataflow%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8Bgpu%E3%81%AA%E3%81%97ver">Dataflowの使用例（GPUなしver.）</a>で行ったscikit-learnモデルを用いた推論をストリーミング処理でDataflow上で行い、その結果をBigQueryに書き出します。今回もIrisデータセットで学習したモデルの重みパラメータ(<code>SVC_iris.pkl2</code>)が既に手元にあるという想定で、以下のような手順で進めていきます。</p><ol><li>ソースコードの準備</li><li>Pub&#x2F;Sub・BigQueryの準備</li><li>パイプラインの実行</li></ol><p>なお、<a href="#api%E3%81%AE%E6%9C%89%E5%8A%B9%E5%8C%96">APIの有効化</a>、<a href="#iam%E3%81%AE%E8%A8%AD%E5%AE%9A">IAMの設定</a>、<a href="#cloud-storage%E3%83%90%E3%82%B1%E3%83%83%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90">Cloud Storageバケットの作成</a>がお済みでない方はまずそちらから始めてください。</p><h2 id="ソースコードの準備-2"><a href="#ソースコードの準備-2" class="headerlink" title="ソースコードの準備"></a>ソースコードの準備</h2><p>今回実行したいソースコード(ファイル名:<code>predict_iris_dataflow_pubsub2bq.py</code>)です。<br>モデルの重みパラメータまでのpathは<code>&#123;ソースコードがあるディレクトリ&#125;/models/sklearn_models/SVC_iris.pkl2</code>です。</p><figure class="highlight python"><figcaption><span>predict_iris_dataflow_pubsub2bq.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apache_beam <span class="keyword">as</span> beam</span><br><span class="line"><span class="keyword">from</span> apache_beam.ml.inference <span class="keyword">import</span> RunInference</span><br><span class="line"><span class="keyword">from</span> apache_beam.ml.inference.sklearn_inference <span class="keyword">import</span> ModelFileType, SklearnModelHandlerNumpy</span><br><span class="line"><span class="keyword">from</span> apache_beam.options.pipeline_options <span class="keyword">import</span> PipelineOptions, StandardOptions</span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> storage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_model_to_gcs</span>(<span class="params">local_model_path, gcs_model_path, project_name, bucket_name</span>):</span><br><span class="line">    client = storage.Client(project_name)</span><br><span class="line">    bucket = storage.Bucket(client)</span><br><span class="line">    bucket.name = bucket_name</span><br><span class="line">    blob = bucket.blob(gcs_model_path)</span><br><span class="line">    blob.upload_from_filename(local_model_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># パイプラインオプションの設定</span></span><br><span class="line">    options = PipelineOptions()</span><br><span class="line">    options_dict = options.display_data()</span><br><span class="line">    options.view_as(StandardOptions).runner = <span class="string">&quot;DataflowRunner&quot;</span></span><br><span class="line">    options.view_as(StandardOptions).streaming = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># モデルのアップロード</span></span><br><span class="line">    upload_model_to_gcs(</span><br><span class="line">        local_model_path=<span class="string">&quot;./models/sklearn_models/SVC_iris.pkl2&quot;</span>,</span><br><span class="line">        gcs_model_path=<span class="string">&quot;models/sklearn_models/SVC_iris.pkl2&quot;</span>,</span><br><span class="line">        project_name=options_dict[<span class="string">&quot;project&quot;</span>],</span><br><span class="line">        bucket_name=options_dict[<span class="string">&quot;bucket_name&quot;</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ハンドラーの設定</span></span><br><span class="line">    model_uri = <span class="string">&quot;gs://&#123;&#125;/models/sklearn_models/SVC_iris.pkl2&quot;</span>.<span class="built_in">format</span>(options_dict[<span class="string">&quot;bucket_name&quot;</span>])</span><br><span class="line">    model_file_type = ModelFileType.JOBLIB</span><br><span class="line">    model_handler = SklearnModelHandlerNumpy(model_uri=model_uri, model_file_type=model_file_type)</span><br><span class="line"></span><br><span class="line">    topic = <span class="string">&quot;projects/&#123;&#125;/topics/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(options_dict[<span class="string">&quot;project&quot;</span>], options_dict[<span class="string">&quot;topic_name&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># パイプライン実行</span></span><br><span class="line">    logging.getLogger().setLevel(logging.INFO)</span><br><span class="line">    <span class="keyword">with</span> beam.Pipeline(options=options) <span class="keyword">as</span> p:</span><br><span class="line">        raw_data = (</span><br><span class="line">            p</span><br><span class="line">            | <span class="string">&quot;ReadFromPub/Sub&quot;</span> &gt;&gt; beam.io.ReadFromPubSub(topic)</span><br><span class="line">            | <span class="string">&quot;Decode&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: x.decode())</span><br><span class="line">            | <span class="string">&quot;StrToDict&quot;</span> &gt;&gt; beam.Map(json.loads)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        inference = (</span><br><span class="line">            raw_data</span><br><span class="line">            | <span class="string">&quot;ExtractFeature&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: x[<span class="string">&quot;feature&quot;</span>])</span><br><span class="line">            | <span class="string">&quot;RunInference&quot;</span> &gt;&gt; RunInference(model_handler)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        write2bq = (</span><br><span class="line">            inference</span><br><span class="line">            | <span class="string">&quot;ConvertToBigQueryFormat&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: &#123;</span><br><span class="line">                <span class="string">&quot;input&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;sepal_length&quot;</span>: x[<span class="number">0</span>][<span class="number">0</span>],</span><br><span class="line">                    <span class="string">&quot;sepal_width&quot;</span>: x[<span class="number">0</span>][<span class="number">1</span>],</span><br><span class="line">                    <span class="string">&quot;petal_length&quot;</span>: x[<span class="number">0</span>][<span class="number">2</span>],</span><br><span class="line">                    <span class="string">&quot;petal_width&quot;</span>: x[<span class="number">0</span>][<span class="number">3</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;predict&quot;</span>: x[<span class="number">1</span>].item()</span><br><span class="line">            &#125;)</span><br><span class="line">            | <span class="string">&quot;WriteToBigQuery&quot;</span> &gt;&gt; beam.io.WriteToBigQuery(table=options_dict[<span class="string">&quot;table_name&quot;</span>], dataset=options_dict[<span class="string">&quot;dataset_name&quot;</span>])</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>また、Irisデータセットの各サンプルを10秒間隔でPub&#x2F;SubにPublishにするためのコード（ファイル名:<code>publish_iris_local2pubsub.py</code>）です。</p><figure class="highlight python"><figcaption><span>publish_iris_local2pubsub.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> pubsub</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&quot;--project&quot;</span>, required=<span class="literal">True</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;--topic_name&quot;</span>, required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    data = load_iris()</span><br><span class="line">    feature = data.data</span><br><span class="line">    target = data.target</span><br><span class="line"></span><br><span class="line">    publisher = pubsub.PublisherClient()</span><br><span class="line">    topic_path = publisher.topic_path(args.project, args.topic_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, (f, t) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(feature, target)):</span><br><span class="line">        f_t_dict = &#123;<span class="string">&quot;id&quot;</span>: i, <span class="string">&quot;feature&quot;</span>: f.tolist(), <span class="string">&quot;target&quot;</span>: t.item()&#125;</span><br><span class="line">        message = json.dumps(f_t_dict)</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line">        b_message = message.encode()</span><br><span class="line">        publisher.publish(topic_path, b_message)</span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="Pub-x2F-Sub・BigQueryの準備"><a href="#Pub-x2F-Sub・BigQueryの準備" class="headerlink" title="Pub&#x2F;Sub・BigQueryの準備"></a>Pub&#x2F;Sub・BigQueryの準備</h2><p>まず、Pub&#x2F;Subのトピック作成から始めていきます。Pub&#x2F;Subのページ上部にある「トピックを作成」から、トピックIDを設定してトピックを作成します。そのほかの設定に関しては今回はデフォルトのままで大丈夫です。<br><img src="/images/20220920b/make_topic.png" alt="make_topic.png" width="1200" height="691" loading="lazy"></p><p>続いて、BigQueryのデータセット・テーブルの作成に入ります。BigQueryのデータセット・テーブルは以下のようにして作成できます。<br><img src="/images/20220920b/make_dataset.gif" alt="make_dataset.gif" width="1200" height="675" loading="lazy"></p><p>なお、今回使用しているスキーマは以下の通りです。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;input&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RECORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NULLABLE&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sepal_length&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FLOAT&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NULLABLE&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sepal_width&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FLOAT&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NULLABLE&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;petal_length&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FLOAT&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NULLABLE&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;petal_width&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FLOAT&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NULLABLE&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;predict&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;INTEGER&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NULLABLE&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h2 id="パイプラインの実行-2"><a href="#パイプラインの実行-2" class="headerlink" title="パイプラインの実行"></a>パイプラインの実行</h2><p>続いて、パイプラインの実行に移ります。以下のコマンドを実行するとパイプラインが動き始めます。<code>&#123;プロジェクトID&#125;</code>、<code>&#123;ジョブの名前&#125;</code>、<code>&#123;バケットの名前&#125;</code>、<code>&#123;テーブルの名前&#125;</code>、<code>&#123;データセットの名前&#125;</code>、<code>&#123;トピックの名前&#125;</code>は適宜変更してください。今回はRunnerおよびストリーミング処理のオプションはコード内で記述しているためコマンドライン引数から渡す必要はありません。ストリーミング処理をコマンドラインから有効化したい場合は、<code>--streaming</code>を加えるとできます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">python predict_iris_dataflow_pubsub2bq.py \</span><br><span class="line">--project <span class="string">&quot;&#123;プロジェクトID&#125;&quot;</span> \</span><br><span class="line">--job_name <span class="string">&quot;&#123;ジョブの名前&#125;&quot;</span> \</span><br><span class="line">--temp_location <span class="string">&quot;gs://&#123;バケットの名前&#125;/temp/&quot;</span> \</span><br><span class="line">--staging_location <span class="string">&quot;gs://&#123;バケットの名前&#125;/stage/&quot;</span> \</span><br><span class="line">--region <span class="string">&quot;asia-northeast1&quot;</span> \</span><br><span class="line">--bucket_name <span class="string">&quot;&#123;バケットの名前&#125;&quot;</span> \</span><br><span class="line">--table_name <span class="string">&quot;&#123;テーブルの名前&#125;&quot;</span> \</span><br><span class="line">--dataset_name <span class="string">&quot;&#123;データセットの名前&#125;&quot;</span> \</span><br><span class="line">--topic_name <span class="string">&quot;&#123;トピックの名前&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>これでパイプラインが実行されます。</p><p>パイプラインのジョブが動き始めたら、以下のコマンドで、Irisデータセットの各サンプルをPublishしていきます。なお、PythonファイルからPub&#x2F;SubにPublishする際にはサービスアカウントキー作成する必要があります。<code>IAMと管理→サービスアカウント</code>からサービスアカウントキーを含むjsonファイルを作成し</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOOGLE_APPLICATION_CREDENTIALS=<span class="string">&quot;&#123;jsonファイルまでのpath&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>で、PythonファイルからPub&#x2F;SubにPublishできるようになります。それが終わったら</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python publish_iris_local2pubsub.py \</span><br><span class="line">--project <span class="string">&quot;&#123;プロジェクトID&#125;&quot;</span> \</span><br><span class="line">--topic_name <span class="string">&quot;&#123;トピックの名前&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>を実行して、Pub&#x2F;Subに10秒間隔でデータを送ります。</p><h2 id="結果-2"><a href="#結果-2" class="headerlink" title="結果"></a>結果</h2><p>BigQueryの画面からクエリを実行して結果を確認します。クエリは下図の赤枠の部分を順にクリックして<br><img src="/images/20220920b/make_query.png" alt="make_query.png" width="702" height="486" loading="lazy"></p><p>開いたエディタに</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `&#123;プロジェクトID&#125;.&#123;データセットの名前&#125;.&#123;テーブルの名前&#125;` LIMIT <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>を入力して実行します。</p><p>今回の例では以下のような結果が得られました。<br><img src="/images/20220920b/pubsub2bq_result.png" alt="pubsub2bq_result" width="1164" height="822" loading="lazy"></p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回のインターンで扱わせていただいたDataflowは、なかなか個人で扱う機会がない一方で、ビジネスの場面ではとても需要のあるサービスです。そのようなものを扱う機会を頂けたことは今回のインターンに参加してよかったと思えることの１つです。また、私は今まで技術ブログを書いた経験がなかったため、今回のインターンで、学んだことを言語化しまとめることの難しさを知ることができました。</p><p>そのほかにも、インターンではSAIG（フューチャーのAIチーム）の進捗報告会に参加させていただき、さまざまなプロジェクトの存在、各プロジェクトの進め方、各プロジェクトの難しさなど実際の仕事の現場を体験することができました。また、インターンのイベントの一環である社員の方にインタビューをさせていただき、そこでは専門分野の勉強の進め方、AIのトレンドのキャッチアップのやり方を教えていただきました。</p><p>今回のインターンでは本当に多くのことを学ばせていただきました。受け入れ先プロジェクトの方々やフューチャーHRの皆さん、本当にありがとうございました！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://qiita.com/esakik/items/3c5c18d4a645db7a8634">Apache Beam (Dataflow) 実践入門【Python】</a></li><li><a href="https://beam.apache.org/documentation/runtime/model/">How Beam executes a pipeline (公式ドキュメント)</a></li><li><a href="https://cloud.google.com/dataflow/docs/quickstarts/create-pipeline-python">Python を使用して Dataflow パイプラインを作成する</a></li><li><a href="https://cloud.google.com/dataflow/docs/guides/using-gpus">GPUの使用</a></li></ul><p>アイキャッチは<a href="https://pixabay.com/ja/users/paulbr75-2938186/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2471293">Paul Brennan</a>による<a href="https://pixabay.com/ja//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2471293">Pixabay</a>からの画像です。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220920b/dataflow_top2.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;663&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="インターン" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/"/>
    
    <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
    <category term="BigQuery" scheme="https://future-architect.github.io/tags/BigQuery/"/>
    
    <category term="インターン2022" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B32022/"/>
    
    <category term="Dataflow" scheme="https://future-architect.github.io/tags/Dataflow/"/>
    
    <category term="ApacheBeam" scheme="https://future-architect.github.io/tags/ApacheBeam/"/>
    
  </entry>
  
  <entry>
    <title>Dataflow前編（Dataflowの概要からApache Beamの使い方まで）</title>
    <link href="https://future-architect.github.io/articles/20220920a/"/>
    <id>https://future-architect.github.io/articles/20220920a/</id>
    <published>2022-09-19T15:00:00.000Z</published>
    <updated>2022-09-20T03:56:45.716Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220920a/dataflow_top1.png" alt="" width="1000" height="655"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、フューチャーのインターン”Engineer Camp”に参加した平野と申します。</p><p>今回のインターンでは、Google Cloud Platform (GCP)のサービスとして提供されているDataflowについて調査し、その仕組みや使い方についてこの技術ブログにまとめることに取り組みました。</p><p>フューチャーのインターンについては<a href="/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/">こちら</a>をご覧ください！</p><p>今回の記事は前編・後編に分かれており</p><ul><li>前編:<ul><li>Dataflowの概要</li><li>Apache Beamの概要・内部的な仕組み</li><li>Apache Beamのコードの書き方</li></ul></li><li>後編：<ul><li>Dataflowを使う上での事前準備と基本的な使い方</li><li>GPUを使う上での事前準備と基本的な使い方</li><li>Pub&#x2F;Sub・BigQueryとの連携例</li></ul></li></ul><p>という構成になっています。<a href="/articles/20220920b/">後編</a>も公開しています。</p><h1 id="Dataflowとは"><a href="#Dataflowとは" class="headerlink" title="Dataflowとは"></a>Dataflowとは</h1><p>Dataflowは様々なデータの分散処理を簡単に実現できるプラットフォームです。</p><p>大規模なデータを処理したいけれど、十分な計算資源がない場合やそのためのインフラの構築・管理が面倒な場合には、Dataflowは有効な選択肢の一つです。Dataflowではそのような環境構築が不要で、後述するApache Beamでデータ処理の流れを記述すれば、データの分散処理を実行できます。</p><p>また、Dataflowにはオートスケーリングという機能が備わっており、データ処理の重さに応じて自動で最適な計算リソースを割り当ててくれます。さらにDataflowはGCPのサービスなので、他のGCPサービス（Cloud Strage, Cloud Pub&#x2F;Sub, BigQueryなど）との連携がしやすくなっています。</p><p>Dataflowの活用事例は多く、例えばメルペイさんはさまざまなマイクロサービスで必要とされる典型的なデータ処理にDataflow Templateを活用されています。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p>また、SUBARUさんでは学習データにアノテーションを付与する処理にDataflowを利用されています。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><blockquote><p>「学習用の画像データにアノテーション データを付与して TFRecord を生成する前処理が、日を追うごとに増えていき、これまでのやり方だと並列でやっても丸一日以上かかってしまうようになってしまいました。そこで、これを<br>Apache Beam を使って Cloud Dataflow で処理するようにしています。結果、データを流すと数百CPU くらいまで一気にオートスケールして、だいたい 30 分くらいで終わるようになりました。」（大久保氏）</p></blockquote><p>Dataflowでは、データ処理パイプラインの中に機械学習モデルの推論を組み込むことも可能で、ストリーム処理と組み合わせるとリアルタイム推論もできるようになります。今回はそのようなMLシステムへの応用を見据えて基本から整理しました。</p><h1 id="Apache-Beamとは"><a href="#Apache-Beamとは" class="headerlink" title="Apache Beamとは"></a>Apache Beamとは</h1><p>Dataflow上で実行するデータ処理の内容はApache Beamを用いて記述します。</p><p>Apache Beam自体は、データ処理パイプラインを定義・実行するソフトウェア開発キット (SDK) で、OSSなので誰でも利用することができます。Dataflow以外にもFlink, Nemo, Spark, AWS KDAなどの環境（Runnerという）で動かすことができ、Go, Java, Pythonといった様々なプログラミング言語で利用できます。</p><img src="/images/20220920a/Apache_Beam_flow.png" alt="Apache_Beam_flow.png" width="1200" height="534" loading="lazy"><p>Apache Beamの特徴としては、パイプライン処理を実行するWorkerの確保、各Workerへのデータの割り当てなどはRunnerが自動で行なってくれるという点があります。そのため、コードを書く際にはパイプライン処理の流れだけに注力すればよく、大規模なデータの分散処理を簡単に実行することができます。</p><p>また、バッチ処理・ストリーム処理の両方のデータ処理を同じようなコードで記述できるというのも大きな特徴の一つで、バッチ処理⇄ストリーム処理の切り替えが簡単にできます。ちなみにBeamという名前は <strong>B</strong> atch + st <strong>eam</strong> から来ています。</p><h2 id="Apache-Beamの構成要素"><a href="#Apache-Beamの構成要素" class="headerlink" title="Apache Beamの構成要素"></a>Apache Beamの構成要素</h2><p>Apache Beamでは以下の図のような構成となっています。<br><img src="/images/20220920a/Apache_Beam_flow_2.png" alt="Apache_Beam_flow.png" width="1200" height="241" loading="lazy"></p><ul><li>Pipeline:<br>データ処理タスク全体（入力データの読み取り→データの処理→データの書き出し）をカプセル化したもの。</li><li>PCollection:<br>パイプラインを流れるデータ。パイプラインの最初は外部ソースからデータを読み出して、PCollectionにすることから始まる。</li><li>PTransfrom:<br>パイプライン内の個々のデータ処理オペレーション。PTransformの入出力はPCollection。</li><li>I&#x2F;O transforms:<br>外部ソースからのデータの読み取り、外部ソースへのデータの書き出しを行う際に用いるPTransform。</li></ul><h2 id="Apache-Beamの仕組み"><a href="#Apache-Beamの仕組み" class="headerlink" title="Apache Beamの仕組み"></a>Apache Beamの仕組み</h2><p>ここでは、Apache Beamがどのようにして分散処理を行っているのかについて、<a href="https://beam.apache.org/documentation/runtime/model/">公式ドキュメント</a>の内容をもとに説明します。<br>以下の説明で用いている図は<a href="https://beam.apache.org/documentation/runtime/model/">公式ドキュメント</a>から引用しています。</p><h3 id="Transform並列化の仕組み"><a href="#Transform並列化の仕組み" class="headerlink" title="Transform並列化の仕組み"></a>Transform並列化の仕組み</h3><ol><li>Runnerは入力されたPCollectionをいくつかのBundleに分ける。</li><li>各BundleをWorkerが並列に処理する。</li></ol><p>いくつのBundleに分割するかはRunnerが決定します。以下の図では9つのelementからなるPCollectionを2つのBundleに分割しています。</p><img src="/images/20220920a/Bundleに分割する例.svg" alt="Bundleに分割する例" loading="lazy"><p>ParDo1を実行する際に、各BundleはWorkerに渡され、並列に実行されます。</p><img src="/images/20220920a/Bundleの並列処理.svg" alt="Bundleの並列処理" loading="lazy"><p>PCollectionに含まれるelementよりも小さく分割することはできないため、Bundle数の最大はPCollectionのelement数です。</p><img src="/images/20220920a/最も細かくBundleに分割した例.svg" alt="最も細かくBundleに分割した例" loading="lazy"><p><em>※Splittable ParDoを使えば、1つのelementを複数のBundleで処理することができるらしい。この機能は開発中とのこと。</em></p><h3 id="Transform間に従属関係がある場合の挙動"><a href="#Transform間に従属関係がある場合の挙動" class="headerlink" title="Transform間に従属関係がある場合の挙動"></a>Transform間に従属関係がある場合の挙動</h3><p>以下の例では、入力に対してParDo1を適用した後に、ParDo2を適用します。</p><p>図ではBundle AにParDo1を適用した出力がBundle C、Bundle BにParDo1を適用した出力がBundle Dとなっています。</p><img src="/images/20220920a/Transform間に従属関係がある場合.svg" alt="Transform間に従属関係がある場合" loading="lazy"><p>RunnerがParDo1を適用前と後でBundleの再構成を行わない場合、各Bundleは同じWorkerでParDo1とParDo2を適用されます。</p><img src="/images/20220920a/各Bundleは同じWorkerで処理される.svg" alt="各Bundleは同じWorkerで処理される" loading="lazy"><p>こうすることで、Worker間の通信を省くことができ、他のWorkerの処理を待つ必要がなくなります。</p><h3 id="1つのTransformに失敗した場合の挙動"><a href="#1つのTransformに失敗した場合の挙動" class="headerlink" title="1つのTransformに失敗した場合の挙動"></a>1つのTransformに失敗した場合の挙動</h3><p>Bundle内のあるelementの処理に失敗した場合、そのelementが属するBundle全体に対して処理を再度実行する必要があります。</p><p>ただし、処理を実行するWorkerは変わってもよく、以下の例ではWorker2が処理に失敗したBundleをWorker1が引き受けています。</p><img src="/images/20220920a/1つのTransformに失敗した時.svg" alt="1つのTransformに失敗した時" loading="lazy"><h3 id="従属関係にあるTransformに失敗した場合の挙動"><a href="#従属関係にあるTransformに失敗した場合の挙動" class="headerlink" title="従属関係にあるTransformに失敗した場合の挙動"></a>従属関係にあるTransformに失敗した場合の挙動</h3><p>2つのTransform間に従属関係があり、後続のTransformの処理に失敗した場合、Bundleは再度最初からTransformを適用される必要があります。</p><img src="/images/20220920a/従属関係にあるTransformに失敗した場合.svg" alt="従属関係にあるTransformに失敗した場合" loading="lazy"><p><em>このような挙動となっている理由は、Transform間のelementを保持しておくとメモリを圧迫してしまうため？公式DocにはPersistence costを節約するためとあった。ラージスケールなデータを処理することを念頭においた設計となっている？</em></p><h2 id="Apache-Beamのコードの書き方"><a href="#Apache-Beamのコードの書き方" class="headerlink" title="Apache Beamのコードの書き方"></a>Apache Beamのコードの書き方</h2><p>Apache Beamでは、以下のような流れでコードを書いていきます。</p><ol><li>Pipelineの生成と実行オプションの設定（ここでRunnerも指定）</li><li>I&#x2F;O transformsを用いて最初のPCollectionの生成。外部ソースからデータを取ってきたり、コード内で定義してもOK</li><li>PTransformの適用</li><li>PTransform適用後のPCollectionを外部ソースへ書き込み</li><li>RunnerでPipelineを実行</li></ol><p>上記の流れで実装したサンプルコードが以下になります。以下の例では<code>input.txt</code>の各行の文字数を<code>output.txt</code>に出力するコードです。</p><figure class="highlight python"><figcaption><span>beam_sample.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> apache_beam <span class="keyword">as</span> beam</span><br><span class="line"><span class="keyword">from</span> apache_beam.options.pipeline_options <span class="keyword">import</span> StandardOptions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComputeWordLength</span>(beam.DoFn):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process</span>(<span class="params">self, element</span>):</span><br><span class="line">        <span class="keyword">yield</span> <span class="built_in">len</span>(element)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    options = StandardOptions()  <span class="comment"># 1. 実行オプションの設定</span></span><br><span class="line">    options.runner = <span class="string">&quot;DirectRunner&quot;</span>  <span class="comment"># Runnerもここで決めている</span></span><br><span class="line"></span><br><span class="line">    p = beam.Pipeline(options=options)  <span class="comment"># 1. Pipelineの生成</span></span><br><span class="line"></span><br><span class="line">    (</span><br><span class="line">        p</span><br><span class="line">        | <span class="string">&quot;ReadFromText&quot;</span> &gt;&gt; beam.io.ReadFromText(<span class="string">&quot;./input.txt&quot;</span>)  <span class="comment"># 2. input.txtから最初のPCollectionを生成</span></span><br><span class="line">        | <span class="string">&quot;ComputeWordLength&quot;</span> &gt;&gt; beam.ParDo(ComputeWordLength())  <span class="comment"># 3. PTransformの適用</span></span><br><span class="line">        | <span class="string">&quot;WriteToText&quot;</span> &gt;&gt; beam.io.WriteToText(<span class="string">&quot;./output&quot;</span>, file_name_suffix=<span class="string">&quot;.txt&quot;</span>, shard_name_template=<span class="string">&quot;&quot;</span>)  <span class="comment"># 4. output.txtへPCollectionの書き込み</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    p.run()  <span class="comment"># 5. RunnerでPipelineを実行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>例えば、以下のようなinput.txtに対して、上のコードを実行すると</p><figure class="highlight text"><figcaption><span>input.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">foo bar</span><br><span class="line">hoge hoge</span><br></pre></td></tr></table></figure><p>以下のようなoutput.txtが生成されます。</p><figure class="highlight text"><figcaption><span>output.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">7</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>Apache Beamのパイプライン処理はLinuxコマンドのパイプライン処理と同じように</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pipeline | PTransform1 | PTransform2 | ...</span><br></pre></td></tr></table></figure><p>と記述します。Pipelineのインスタンスがパイプラインのスタートとなります。<br>また、パイプライン内の各Transformにはラベルが割り振られ、コード中で明示的にラベルを与えなかった場合には、そのTransform自体がラベルとなります。<br>パイプライン内に同一のラベルを持つTransformが存在してしまうと、エラーとなってしまうため注意です。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p</span><br><span class="line">| <span class="string">&quot;ReadFromText&quot;</span> &gt;&gt; beam.io.ReadFromText(<span class="string">&quot;./input.txt&quot;</span>)  <span class="comment"># このTransformのラベルは&quot;ReadFromText&quot;</span></span><br><span class="line">| <span class="string">&quot;ComputeWordLength&quot;</span> &gt;&gt; beam.ParDo(ComputeWordLength()) <span class="comment"># このTransformのラベルは&quot;ComputeWordLength&quot;</span></span><br><span class="line">| beam.Map(<span class="built_in">print</span>)  <span class="comment"># この場合は&quot;Map(print)&quot;がラベルとなる。</span></span><br></pre></td></tr></table></figure><h2 id="パイプラインの分岐・合流"><a href="#パイプラインの分岐・合流" class="headerlink" title="パイプラインの分岐・合流"></a>パイプラインの分岐・合流</h2><p>Apache Beamは一直線のパイプラインだけでなく、分岐や合流を含む複雑なパイプラインを構成できます。<br>パイプラインを分岐させたい場合には、分岐の直前までを変数に代入することで、その変数をスタートとしてパイプラインの分岐させることができます。</p><figure class="highlight python"><figcaption><span>beam_branch.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> apache_beam <span class="keyword">as</span> beam</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">with</span> beam.Pipeline() <span class="keyword">as</span> p:</span><br><span class="line">        input_data = (  <span class="comment"># 分岐を直前までの処理を変数(input_data)に代入</span></span><br><span class="line">            p</span><br><span class="line">            | <span class="string">&quot;Create&quot;</span> &gt;&gt; beam.Create([</span><br><span class="line">                &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;height&quot;</span>: <span class="number">165</span>, <span class="string">&quot;weight&quot;</span>: <span class="number">49</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;height&quot;</span>: <span class="number">171</span>, <span class="string">&quot;weight&quot;</span>: <span class="number">60</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Charlie&quot;</span>, <span class="string">&quot;height&quot;</span>: <span class="number">184</span>, <span class="string">&quot;weight&quot;</span>: <span class="number">76</span>&#125;</span><br><span class="line">            ])</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        height_average = (</span><br><span class="line">            input_data  <span class="comment"># input_dataから分岐後の処理(身長の平均算出)を記述</span></span><br><span class="line">            | <span class="string">&quot;Extract height&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: x[<span class="string">&quot;height&quot;</span>])</span><br><span class="line">            | <span class="string">&quot;Compute mean height&quot;</span> &gt;&gt; beam.combiners.Mean.Globally()</span><br><span class="line">            | <span class="string">&quot;Print mean height&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: <span class="built_in">print</span>(<span class="string">&quot;height average =&quot;</span>, x))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        weight_average = (</span><br><span class="line">            input_data  <span class="comment"># input_dataから分岐後の処理(体重の平均算出)を記述</span></span><br><span class="line">            | <span class="string">&quot;Extract weight&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: x[<span class="string">&quot;weight&quot;</span>])</span><br><span class="line">            | <span class="string">&quot;Compute mean weight&quot;</span> &gt;&gt; beam.combiners.Mean.Globally()</span><br><span class="line">            | <span class="string">&quot;Print mean weight&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: <span class="built_in">print</span>(<span class="string">&quot;weight average =&quot;</span>, x))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="comment"># height average = 173.33333333333334</span></span><br><span class="line"><span class="comment"># weight average = 61.666666666666664</span></span><br></pre></td></tr></table></figure><p>この場合、パイプラインのグラフは次のようになります。<br><img src="/images/20220920a/caf53485-704f-545e-4c3d-119c96a1615e.png" alt="" width="880" height="926" loading="lazy"></p><p>また、合流させたい場合には、<code>beam.Flatten()</code>を使うことで、分岐したパイプラインを合流させることができます。上の分岐のコードではターミナルへの出力を別々にやっていましたが、下の例では<code>height_average</code>と<code>weight_average</code>を合流させて、ターミナルへの出力を一括化しています。</p><figure class="highlight python"><figcaption><span>beam_merge.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> apache_beam <span class="keyword">as</span> beam</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">with</span> beam.Pipeline() <span class="keyword">as</span> p:</span><br><span class="line">        input_data = (</span><br><span class="line">            p</span><br><span class="line">            | <span class="string">&quot;Create&quot;</span> &gt;&gt; beam.Create([</span><br><span class="line">                &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;height&quot;</span>: <span class="number">165</span>, <span class="string">&quot;weight&quot;</span>: <span class="number">49</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;height&quot;</span>: <span class="number">171</span>, <span class="string">&quot;weight&quot;</span>: <span class="number">60</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Charlie&quot;</span>, <span class="string">&quot;height&quot;</span>: <span class="number">184</span>, <span class="string">&quot;weight&quot;</span>: <span class="number">76</span>&#125;</span><br><span class="line">            ])</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        height_average = (</span><br><span class="line">            input_data</span><br><span class="line">            | <span class="string">&quot;Extract height&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: x[<span class="string">&quot;height&quot;</span>])</span><br><span class="line">            | <span class="string">&quot;Compute mean height&quot;</span> &gt;&gt; beam.combiners.Mean.Globally()</span><br><span class="line">            | <span class="string">&quot;Add height key&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: (<span class="string">&quot;height&quot;</span>, x))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        weight_average = (</span><br><span class="line">            input_data</span><br><span class="line">            | <span class="string">&quot;Extract weight&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: x[<span class="string">&quot;weight&quot;</span>])</span><br><span class="line">            | <span class="string">&quot;Compute mean weight&quot;</span> &gt;&gt; beam.combiners.Mean.Globally()</span><br><span class="line">            | <span class="string">&quot;Add weight key&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: (<span class="string">&quot;weight&quot;</span>, x))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        print_mean = (</span><br><span class="line">            (height_average, weight_average)  <span class="comment"># 合流させたいPCollectionを()でまとめる</span></span><br><span class="line">            | beam.Flatten()  <span class="comment"># Flatten()で1つのPCollectionにする</span></span><br><span class="line">            | beam.Map(<span class="keyword">lambda</span> x: <span class="built_in">print</span>(x[<span class="number">0</span>], <span class="string">&quot;average =&quot;</span>, x[<span class="number">1</span>]))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="comment"># height average = 173.33333333333334</span></span><br><span class="line"><span class="comment"># weight average = 61.666666666666664</span></span><br></pre></td></tr></table></figure><p>この場合、パイプラインのグラフは次のようになります。<br><img src="/images/20220920a/bd3c7575-0cd5-a2a6-6f31-b6914a43bf50.png" alt="" width="870" height="1438" loading="lazy"></p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>ここまでお読みいただきありがとうございます。稚拙な文章で読みづらい箇所が多々あったかと思います。よければ<a href="/articles/20220920b/">後編</a>もお読みいただければと思います。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://qiita.com/esakik/items/3c5c18d4a645db7a8634">Apache Beam (Dataflow) 実践入門【Python】</a></li><li><a href="https://beam.apache.org/documentation/runtime/model/">How Beam executes a pipeline (公式ドキュメント)</a></li><li><a href="https://cloud.google.com/dataflow/docs/quickstarts/create-pipeline-python">Python を使用して Dataflow パイプラインを作成する</a></li></ul><p>アイキャッチは<a href="https://pixabay.com/ja/users/paulbr75-2938186/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2471293">Paul Brennan</a>による<a href="https://pixabay.com/ja//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2471293">Pixabay</a>からの画像です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://engineering.mercari.com/blog/entry/2019-05-30-120000/">メルペイにおけるDataflow Templateの活用</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://cloud.google.com/customers/subaru/?hl=ja">SUBARU：次世代「アイサイト」に向けた AI 開発をマネージドな機械学習プラットフォーム Vertex AI でスピードアップ</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220920a/dataflow_top1.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;655&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="インターン" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/"/>
    
    <category term="インターン2022" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B32022/"/>
    
    <category term="Dataflow" scheme="https://future-architect.github.io/tags/Dataflow/"/>
    
    <category term="ApacheBeam" scheme="https://future-architect.github.io/tags/ApacheBeam/"/>
    
  </entry>
  
  <entry>
    <title>Engineer Camp2022 RustでSQLフォーマッタ作成（後編）</title>
    <link href="https://future-architect.github.io/articles/20220916c/"/>
    <id>https://future-architect.github.io/articles/20220916c/</id>
    <published>2022-09-15T15:00:02.000Z</published>
    <updated>2022-09-16T07:23:34.250Z</updated>
    
    <content type="html"><![CDATA[<p>この記事は<a href="/articles/20220916b/">前編</a>の続きです。この記事では、作成したフォーマッタの実装について説明します。</p><h1 id="作成したフォーマッタの処理の流れ"><a href="#作成したフォーマッタの処理の流れ" class="headerlink" title="作成したフォーマッタの処理の流れ"></a>作成したフォーマッタの処理の流れ</h1><p>前編でも示しましたが、今回作成したフォーマッタの処理の流れを再度示します。</p><img src="/images/20220916c/nagare.png" alt="" width="960" height="228" loading="lazy"><h1 id="使用した技術"><a href="#使用した技術" class="headerlink" title="使用した技術"></a>使用した技術</h1><p>フォーマッタの実装にはRustを使用し、構文解析にはtree-sitter-sqlを使用しました。</p><h3 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h3><img src="/images/20220916c/rustacean.png" alt="" width="400" height="266" loading="lazy"><p>高速で、かつwasm-packなどのライブラリを用いてWebAssembly化することができることから、様々なプラットフォームで動作するため、Rustを採用しました。</p><h3 id="tree-sitter-sql"><a href="#tree-sitter-sql" class="headerlink" title="tree-sitter-sql"></a><a href="https://github.com/m-novikov/tree-sitter-sql">tree-sitter-sql</a></h3><p><a href="https://tree-sitter.github.io/tree-sitter/">tree-sitter</a>で出力されたSQLパーサです。tree-sitterとは作成した文法ファイルからパーサを自動生成するパーサジェネレータの1つです。一般的なパーサライブラリは抽象構文木(AST)を出力するのに対して、tree-sitter-sqlは具象構文木(CST)を出力します。ASTが意味のない情報(例: コメントや多重括弧など)を保持しないのに対して、CSTはそのような情報も保持します。</p><p>今回作成するフォーマッタではコメントや括弧の情報を使用したいため、CSTを出力することができるtree-sitter-sqlを採用しました。</p><h1 id="フォーマット用の構造体の作成"><a href="#フォーマット用の構造体の作成" class="headerlink" title="フォーマット用の構造体の作成"></a>フォーマット用の構造体の作成</h1><p>行末に現れるコメントの取得や縦揃えの機能を実現するために、tree-sitter-sqlから得られたCSTをそのまま使用するのではなく、CSTのノードをDFS(深さ優先探索)で辿り、フォーマット用の構造体を用いて再構成しました。<br>次のような構造体を定義しています。</p><figure class="highlight rust"><figcaption><span>定義した構造体の例(一部省略)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文</span></span><br><span class="line"><span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) <span class="keyword">struct</span> <span class="title class_">Statement</span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="comment">// 句</span></span><br><span class="line"><span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) <span class="keyword">struct</span> <span class="title class_">Clause</span> &#123; <span class="comment">/* ... */</span>&#125;</span><br><span class="line"><span class="comment">// 句の本体</span></span><br><span class="line"><span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) <span class="keyword">enum</span> <span class="title class_">Body</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="comment">// エイリアス式、演算式、行末コメントを含む式</span></span><br><span class="line"><span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) <span class="keyword">struct</span> <span class="title class_">AlignedExpr</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="comment">// 式</span></span><br><span class="line"><span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) <span class="keyword">enum</span> <span class="title class_">Expr</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// その他の式、Bodyは省略</span></span><br></pre></td></tr></table></figure><p>実装した構造体について、一部抜粋して説明します。</p><h3 id="Clause構造体"><a href="#Clause構造体" class="headerlink" title="Clause構造体"></a>Clause構造体</h3><figure class="highlight rust"><figcaption><span>Clause構造体</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 句</span></span><br><span class="line"><span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) <span class="keyword">struct</span> <span class="title class_">Clause</span> &#123;</span><br><span class="line">    keyword: <span class="type">String</span>,    <span class="comment">// キーワード (e.g., SELECT, FROM)</span></span><br><span class="line">    body: <span class="type">Option</span>&lt;Body&gt;, <span class="comment">// 句の本体</span></span><br><span class="line">    loc: Location,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Clause</code>構造体は句(e.g., SELECT句、FROM句)に対応した構造体です。現状対応している構文に現れる句は、いずれも以下のような構造をしています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Keyword</span><br><span class="line">    Body</span><br></pre></td></tr></table></figure><p>e.g., SELECT句</p><figure class="highlight sql"><figcaption><span>SELECT句の例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="comment">/* キーワード */</span></span><br><span class="line"><span class="comment">/* ここから本体 */</span></span><br><span class="line">    ID</span><br><span class="line">,   NAME</span><br><span class="line"><span class="comment">/* ここまで本体 */</span></span><br></pre></td></tr></table></figure><p>そのため、フィールドにはキーワードと本体(<code>Body</code>)を保持させています。<br>詳細は割愛しますが、<code>Body</code>に後述する<code>AlignedExpr</code>を複数保持させることで、複数行の式の縦揃えを実現しています。</p><h3 id="AlignedExpr構造体"><a href="#AlignedExpr構造体" class="headerlink" title="AlignedExpr構造体"></a>AlignedExpr構造体</h3><figure class="highlight rust"><figcaption><span>AlignedExpr</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// エイリアス式、演算式、行末コメントを含む式</span></span><br><span class="line"><span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) <span class="keyword">struct</span> <span class="title class_">AlignedExpr</span> &#123;</span><br><span class="line">    lhs: Expr,                      <span class="comment">// 左辺</span></span><br><span class="line">    rhs: <span class="type">Option</span>&lt;Expr&gt;,              <span class="comment">// 右辺</span></span><br><span class="line">    op: <span class="type">Option</span>&lt;<span class="type">String</span>&gt;,             <span class="comment">// 演算子(ASや比較演算子)</span></span><br><span class="line">    loc: Location,                  <span class="comment">// ソースコード上の対応位置</span></span><br><span class="line">    trailing_comment: <span class="type">Option</span>&lt;<span class="type">String</span>&gt;,   <span class="comment">// 行末コメント</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AlignedExpr</code>構造体は、現状揃えたいAS句や比較演算子、行末コメントを含む式に対応しています。<br>例えば、以下のSQLを考えてみます。</p><figure class="highlight sql"><figcaption><span>例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">STD.ID<span class="keyword">AS</span>STD_ID<span class="comment">-- 学籍番号</span></span><br><span class="line">,STD.NAME<span class="keyword">AS</span>STD_NAME<span class="comment">-- 名前</span></span><br></pre></td></tr></table></figure><p>今回作成したフォーマッタでは、このように<code>AS</code>と行末のコメントの位置を縦揃えする必要がありました。そこで、揃える対象となる<code>AS</code>や<code>=</code>などの比較演算子、行末のコメントを持つ行(式)を<code>AlignedExpr</code>構造体で表現しています。<br><code>AlignedExpr</code>構造体は、左辺(<code>lhs</code>)、演算子(<code>op</code>)、右辺(<code>rhs</code>)と行末コメント(<code>trailing_comment</code>)をフィールドに保持しています。<br>上の例の学籍番号の行は、左辺が<code>STD.ID</code>、演算子が<code>AS</code>、右辺が<code>STD_ID</code>、そして行末コメントが<code>-- 学籍番号</code>であるような<code>AlignedExpr</code>のインスタンスです。<br>フォーマットを行う際には、左辺や右辺の長さを参照して縦揃えを実現しています。具体的な縦揃えの方法は後述します。</p><h1 id="コメントノードの処理"><a href="#コメントノードの処理" class="headerlink" title="コメントノードの処理"></a>コメントノードの処理</h1><p>コメントの情報はCST上に保持されますが、直感的でない位置に現れてしまう場合があります。そのため、それに対応する処理を行います。例として以下のようなSQL文を考えます。</p><figure class="highlight sql"><figcaption><span>行末に現れるコメント</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">ID</span><br><span class="line">,   GRADE <span class="comment">-- 成績</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>次以降の行に現れるコメント</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID</span><br><span class="line">,   GRADE</span><br><span class="line"><span class="comment">/* <span class="doctag">TODO:</span> add NAME */</span></span><br></pre></td></tr></table></figure><p>これらのSQLをtree-sitter-sqlでパースすると、どちらも以下のようなCSTが構築されます。</p><img src="/images/20220916c/syntax_tree-Comment_tech.drawio_(3).png" alt="syntax_tree-Comment_tech.drawio_(3).png" width="582" height="222" loading="lazy"><p>これは、パース時にコメントの位置等を考慮しておらず、コメントの意味まで解釈できないためです。<br>下のSQLはこの木構造で問題ありませんが、上のSQLでは、<code>GRADE</code>とその末尾コメントである<code>-- 成績</code>がまとまっていたほうが直感的です。そこで、私たちのフォーマッタではCSTを走査する段階で、行末コメントとその行の式を対応付けています。<br>これからその対応付けの方法について説明します。例として以下のSQLを考えます。</p><figure class="highlight sql"><figcaption><span>行末に現れるコメント</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">ID</span><br><span class="line">,   GRADE <span class="comment">-- 成績</span></span><br></pre></td></tr></table></figure><p>このSQL文をtree-sitter-sqlでパースすると、以下のようなCSTが出力されます。</p><img src="/images/20220916c/syntax_tree-Comment_tech.drawio_(2).png" alt="syntax_tree-Comment_tech.drawio_(2).png" width="581" height="222" loading="lazy"><p>出力されたCSTでは<code>GRADE</code>のコメントである<code>-- 成績</code>が<code>ファイル</code>ノードの子ノードになってしまっています。パーサーではコメントの意味まで解釈することができないため、このような直感的でない木構造になってしまうことがあります。<br>この離れた位置にある2つのノードを同じ<code>AlignedExpr</code>構造体に格納する方法について説明します。<br>まずCST上の<code>GRADE</code>ノードまで深さ優先探索順に辿ります。</p><img src="/images/20220916c/syntax_tree-to_comment.drawio_(1).png" alt="syntax_tree-to_comment.drawio_(1).png" width="581" height="222" loading="lazy"><p><code>GRADE</code>ノードを辿り終わった時点での自作構造体は以下のようになります。</p><img src="/images/20220916c/syntax_tree-to_ID.drawio_(3).png" alt="syntax_tree-to_ID.drawio_(3).png" width="381" height="211" loading="lazy"><p>この状態で次のノードへ辿ると、コメントノードが出現します。</p><img src="/images/20220916c/syntax_tree-Comment_tech.drawio_(2)_2.png" alt="syntax_tree-Comment_tech.drawio_(2).png" width="581" height="222" loading="lazy"><p>コメントノードが出現した時点の自作構造体を参照し、自作構造体の一番最後の子とコメントが同じ行であれば<code>trailing_comment</code>にコメントを追加します。今回の例では<code>GRADE</code>を左辺として持っている<code>aligned_expr</code>に<code>-- 成績</code>を追加します。</p><img src="/images/20220916c/syntax_tree-to_comment.drawio_(2).png" alt="syntax_tree-to_comment.drawio_(2).png" width="396" height="282" loading="lazy"><h1 id="レンダリング時の処理"><a href="#レンダリング時の処理" class="headerlink" title="レンダリング時の処理"></a>レンダリング時の処理</h1><p>先述したように構文木を再構築し、最後にレンダリングをして整形されたSQL文を出力します。このときにインデントの調整や縦揃えのためにタブ文字を適切な数挿入します。</p><p>挿入するタブ文字の計算について説明します。例えば以下のようなSQLで、タブ幅4の場合を考えます。</p><figure class="highlight sql"><figcaption><span>例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    LONGLONGTABLE   LLTB</span><br><span class="line">,   TABLE1          TB1</span><br></pre></td></tr></table></figure><img src="/images/20220916c/calc_tab_1.png" alt="calc_tab_1.png" width="846" height="183" loading="lazy"><p>テーブル名を左辺、エイリアスを右辺として説明します。<br>上の行の左辺(<code>LONGLONGTABLE</code>)は13文字で、これにタブを1つ加えた16文字の位置から右辺(<code>LLTB</code>)が開始します。上の行の右辺の開始位置、すなわち16文字の位置に下の行の右辺(<code>TB1</code>)の開始位置が合わさるようにタブ文字を挿入します。</p><img src="/images/20220916c/calc_tab_2.png" alt="calc_tab_2.png" width="842" height="231" loading="lazy"><p>下の行の左辺(<code>TABLE1</code>)は6文字であるため、今回の例ではタブ文字を3つ挿入することで右辺の位置が揃います。<br>このように、合わせたい部分における最長の左辺の長さを利用して、以下の式で各行で挿入するタブ文字の数を計算します。求めた数タブ文字を挿入することで縦揃えを実現できます。</p><p><code>(左辺のタブ長) = ((文字列の長さ) / TAB_SIZE) + 1</code><br><code>(挿入するタブ文字の数) = ((左辺のタブ長最大値) - (合わせたい行の左辺のタブ長))</code></p><p>同様の処理を行うことで、コメント、演算子も縦揃えをすることができます。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>最後に本インターンの感想です。</p><h2 id="インターンの感想-川渕"><a href="#インターンの感想-川渕" class="headerlink" title="インターンの感想 (川渕)"></a>インターンの感想 (川渕)</h2><p>今回のインターンでは齋藤さんとペアで設計~開発を行っていたため、お互いが何を考えているかを詳細に把握する必要がありました。また、毎日のミーティングで受け入れ先のプロジェクトの方に成果報告をする場面では、自分の頭の中を説明する難しさを改めて実感しました。このようなことから、相手にわかりやすく伝えることの難しさと大切さを実感したので、これから意識して伝える力を向上させたいと思いました。</p><p>今回のインターンは4週間あり、始まる前は長いと感じていましたが、いざ始まってみると毎日充実しており、あっという間に過ぎてしまいました。受け入れ先のプロジェクトの方をはじめとしたFUTUREの方が楽しく成長できるように工夫していただいたからだと思います。4週間本当に楽しかったです！ありがとうございました！</p><h2 id="インターンの感想-齋藤"><a href="#インターンの感想-齋藤" class="headerlink" title="インターンの感想 (齋藤)"></a>インターンの感想 (齋藤)</h2><p>私(齋藤)は研究で構文解析を扱っており、その経験が生かせると考えて本インターンシップに参加しました。実際の業務の中では、使用する構文解析ソフトウェアの選定や構文解析結果を利用したフォーマッタの開発など、構文解析に関する知識が生かせる業務が多くありました。</p><p>このようなニッチな技術・分野は直接ビジネスにかかわってくるとは限りませんが、業務改善などの点でビジネスを支える重要な技術であるということを実感できました。<br>他にもチーム開発の経験が得られたり、フューチャーの社風を肌で感じることができ、様々なことを学ばせていただきました。4週間本当にありがとうございました！</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回はフォーマッタの作成を行いました。タスク外でも他のプロジェクトの参加者とのコミュ会やディナー等たくさんのイベントを開いていただきました。</p><p>受け入れてくれたコアテクの皆さん、HRの皆さん、Engineer Camp2022に参加していたインターン生の皆さんに感謝します。<br>4週間本当にありがとうございました！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;この記事は&lt;a href=&quot;/articles/20220916b/&quot;&gt;前編&lt;/a&gt;の続きです。この記事では、作成したフォーマッタの実装について説明します。&lt;/p&gt;
&lt;h1 id=&quot;作成したフォーマッタの処理の流れ&quot;&gt;&lt;a href=&quot;#作成したフォーマッタの処理の流れ&quot;</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="SQL" scheme="https://future-architect.github.io/tags/SQL/"/>
    
    <category term="インターン" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/"/>
    
    <category term="Rust" scheme="https://future-architect.github.io/tags/Rust/"/>
    
    <category term="インターン2022" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B32022/"/>
    
    <category term="フォーマッター" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%82%BF%E3%83%BC/"/>
    
  </entry>
  
  <entry>
    <title>Engineer Camp2022 RustでSQLフォーマッタ作成（前編）</title>
    <link href="https://future-architect.github.io/articles/20220916b/"/>
    <id>https://future-architect.github.io/articles/20220916b/</id>
    <published>2022-09-15T15:00:01.000Z</published>
    <updated>2022-09-16T07:57:36.049Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>みなさん、こんにちは！<br>Future Engineer Camp 2022に参加した川渕と齋藤です。<br>今回のインターンではSQLフォーマッタをRustで作成しました。私達が取り組んだ内容を紹介します。</p><h1 id="SQLフォーマッタとは"><a href="#SQLフォーマッタとは" class="headerlink" title="SQLフォーマッタとは"></a>SQLフォーマッタとは</h1><p>SQLフォーマッタとはSQLを統一された体裁にフォーマットしてくれるツールです。体裁を統一することで他人が見ても読みやすいコードになり、生産性が向上します。<br><img src="/images/20220916b/demo1.gif" alt="" width="1200" height="675" loading="lazy"></p><p>以下の図のように、インデントなどが揃って読みやすくなっていることがわかります。</p><img src="/images/20220916b/demo_indent.png" alt="" width="635" height="420" loading="lazy"><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>フューチャーではすでにSQLフォーマッタを開発、利用しています。(<a href="/articles/20170228/">記事</a>)<br>しかし、そのフォーマッタには以下の2点の問題点があります。</p><ol><li>厳密な構文解析を行わずにトークンベースで処理を行っているため、難しい処理がある（例: 括弧の処理、エイリアスの補完など）</li><li>Pythonで書かれているためVSCodeの拡張機能で動かすことが困難である</li></ol><p>そこで、2020年のインターンシップにおいて、構文解析を利用したTypeScript製フォーマッタを作成しました(<a href="/articles/20200919/">記事</a>)。<br>しかし、このフォーマッタは実行速度が非常に遅く、実用的ではありませんでした。遅くなっていた理由は、このフォーマッタはANTLRを用いて構文解析を行っており、ANTLRのSQLパーサとTypeScriptの相性が悪く、実行速度が遅かったためでした。</p><h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>今回のインターンシップの目標は2020年のインターンシップのリベンジとして、構文解析を用いた高速で動作するSQLフォーマッタを作成することでした。フォーマットしたSQLコードは<a href="/coding-standards/documents/forSQL/">フューチャー株式会社が提供するSQLのコーディング規約</a>に従ったコードになっています。</p><h1 id="作成したフォーマッタの処理の流れ"><a href="#作成したフォーマッタの処理の流れ" class="headerlink" title="作成したフォーマッタの処理の流れ"></a>作成したフォーマッタの処理の流れ</h1><p>今回作成したフォーマッタの処理の流れを以下に示します。フォーマッタは、構文解析部分とフォーマット処理部分の2つに分かれています。まず、対象となるソースファイルに構文解析を行い、構文木(CST)を構築します。そして、構文木に基づいてフォーマット処理を行い、SQLを整形しています。</p><img src="/images/20220916b/stream.png" alt="stream.png" width="960" height="228" loading="lazy"><p>構文解析を行う部分は上述した<a href="https://github.com/m-novikov/tree-sitter-sql">tree-sitter-sql</a>を使用し、フォーマット処理を行う部分は0から実装を行いました。<br>実装の詳細は後編で述べます。</p><h1 id="機能紹介"><a href="#機能紹介" class="headerlink" title="機能紹介"></a>機能紹介</h1><p>インターン中に作成したフォーマッタの機能を紹介します。</p><h3 id="インデント揃え"><a href="#インデント揃え" class="headerlink" title="インデント揃え"></a>インデント揃え</h3><p>このように、行の初めのインデントを揃えます。</p><figure class="highlight sql"><figcaption><span>indent.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">ID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">STUDENT STD</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">STD.ID<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span>STD.SPORTID<span class="operator">=</span>(</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">ID</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">SPORT</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">SPORT.NAME<span class="operator">=</span><span class="string">&#x27;BASEBALL&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="縦揃え"><a href="#縦揃え" class="headerlink" title="縦揃え"></a>縦揃え</h3><p>このように、<code>AS</code>の位置や行末に現れるコメントが、各ブロックで縦揃えされます！</p><figure class="highlight sql"><figcaption><span>align.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    STD.ID      <span class="keyword">AS</span>  STD_ID      <span class="comment">-- 学籍番号</span></span><br><span class="line">,   STD.NAME    <span class="keyword">AS</span>  STD_NAME    <span class="comment">-- 氏名</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    STUDENT STD <span class="comment">-- 学生</span></span><br></pre></td></tr></table></figure><h3 id="エイリアス補完"><a href="#エイリアス補完" class="headerlink" title="エイリアス補完"></a>エイリアス補完</h3><p><a href="/coding-standards/documents/forSQL/SQL%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E8%A6%8F%E7%B4%84%EF%BC%88Oracle%EF%BC%89.html#exists-%E5%8F%A5">フューチャー株式会社が提供するSQLのコーディング規約</a>ではエイリアスについて以下のように定められています。</p><blockquote><p>AS句<br>トップレベルの SELECT 句には必ずAS句を記載し別名を付ける。<br>同一の名前であってもAS句を付与する。<br>また、「AS」は省略可能であるが、省略はしないこと。</p></blockquote><p>これに従って、SELECT句のカラムにはエイリアスを自動で付与し、「AS」がない場合は追加します。FROM句のエイリアスのASはPostgreSQL限定構文のため自動的に取り除きます。</p><p>before</p><figure class="highlight sql"><figcaption><span>before.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">STD.ID STD_ID <span class="comment">-- 学籍番号</span></span><br><span class="line">,STD.GRADE  <span class="comment">-- 成績</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">STUDENT <span class="keyword">AS</span> STD <span class="comment">-- 学生</span></span><br></pre></td></tr></table></figure><p>after</p><figure class="highlight sql"><figcaption><span>after.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">STD.ID<span class="keyword">AS</span>STD_ID<span class="comment">-- 学籍番号</span></span><br><span class="line">,STD.GRADE<span class="keyword">AS</span>GRADE<span class="comment">-- 成績</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    STUDENT STD <span class="comment">-- 学生</span></span><br></pre></td></tr></table></figure><p>以下のような疑問も私達のフォーマッタを使うことで解消されます！</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">SQLのSELECT句で別名にしたいときにas省力することで不備でることあるんでしたっけという疑問</p>&mdash; Junki Mano (@ma91n) <a href="https://twitter.com/ma91n/status/1570042335920287744?ref_src=twsrc%5Etfw">September 14, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">PostgreSQLの場合は、キーワードと一致しなければ問題ないと（Stackoverflow日本語版とかあるの感謝！）<a href="https://t.co/YcxA5moYQC">https://t.co/YcxA5moYQC</a></p>&mdash; Junki Mano (@ma91n) <a href="https://twitter.com/ma91n/status/1570043025556123655?ref_src=twsrc%5Etfw">September 14, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">フューチャーSQL規約だとasの省略ダメだった<a href="https://t.co/WuTcLmeGAB">https://t.co/WuTcLmeGAB</a></p>&mdash; Junki Mano (@ma91n) <a href="https://twitter.com/ma91n/status/1570043822742319106?ref_src=twsrc%5Etfw">September 14, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h3 id="冗長な括弧の除去"><a href="#冗長な括弧の除去" class="headerlink" title="冗長な括弧の除去"></a>冗長な括弧の除去</h3><p>余分な括弧がある場合は自動的に取り除きます。</p><p>before</p><figure class="highlight sql"><figcaption><span>before</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A</span><br><span class="line"><span class="keyword">from</span> tb</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">test0 <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">or</span></span><br><span class="line">(test1 <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span></span><br><span class="line">(test2 <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> test3 <span class="operator">=</span> <span class="number">3</span>)</span><br><span class="line"><span class="keyword">or</span> (((test4 <span class="operator">=</span> <span class="number">4</span> <span class="keyword">or</span> test5 <span class="operator">=</span> <span class="number">5</span>))))</span><br></pre></td></tr></table></figure><p>after</p><figure class="highlight sql"><figcaption><span>after</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">A</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">TB</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">TEST0<span class="operator">=</span><span class="number">0</span></span><br><span class="line"><span class="keyword">OR</span>(</span><br><span class="line">TEST1<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">AND</span>(</span><br><span class="line">TEST2<span class="operator">=</span><span class="number">2</span></span><br><span class="line"><span class="keyword">AND</span>TEST3<span class="operator">=</span><span class="number">3</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">OR</span>(</span><br><span class="line">TEST4<span class="operator">=</span><span class="number">4</span></span><br><span class="line"><span class="keyword">OR</span>TEST5<span class="operator">=</span><span class="number">5</span></span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="今後の課題"><a href="#今後の課題" class="headerlink" title="今後の課題"></a>今後の課題</h1><h3 id="1-利用しやすさの向上"><a href="#1-利用しやすさの向上" class="headerlink" title="1. 利用しやすさの向上"></a>1. 利用しやすさの向上</h3><p>現状はCLI上でしか動作しませんが、今後はVSCodeの拡張機能化、Web上で動作できるようにWebAssembly化をしたいと考えています。</p><h3 id="2-機能面の向上"><a href="#2-機能面の向上" class="headerlink" title="2. 機能面の向上"></a>2. 機能面の向上</h3><p>現状は基本的なSQLの構文にしか対応していませんが、今後はその他の構文へも対応したいと考えています。</p><h1 id="インターンで苦労した点"><a href="#インターンで苦労した点" class="headerlink" title="インターンで苦労した点"></a>インターンで苦労した点</h1><p>特に苦労したのは、Rust言語で実装した点です。インターン開始時点では2人ともRust未経験だったため、実装では所有権などでコンパイルエラーになることも多くありました。ですが、先輩社員の方々のアドバイス等もあり、なんとかインターン期間内に実装することができました。</p><p>また、最初はRust言語だけでなくSQLについてもあまり詳しくなかったため、先を見通した設計ができておらず、機能の拡張に詰まっていました。そこで、2人で相談しながら設計を見直すことで、再設計から3日(!)で目標のSQLをフォーマットできるフォーマッタが完成しました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回、私たちはRust言語を用いてSQLフォーマッタを作成しました。現状では実用的なレベルとは言えませんが、実際に動作するフォーマッタを開発できたことは貴重な経験でした。今後は実用的なレベルのフォーマッタへの改良を行っていきたいと考えています。</p><p>前編では私たちが取り組んだ内容についてざっくりと説明していきました。<a href="/articles/20220916c/">後編</a>ではフォーマッタ部分の実装についてより詳しく説明するので、ぜひそちらもご覧ください！</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;みなさん、こんにちは！&lt;br&gt;Future Engineer Camp</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="SQL" scheme="https://future-architect.github.io/tags/SQL/"/>
    
    <category term="インターン" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/"/>
    
    <category term="Rust" scheme="https://future-architect.github.io/tags/Rust/"/>
    
    <category term="インターン2022" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B32022/"/>
    
    <category term="フォーマッター" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%82%BF%E3%83%BC/"/>
    
  </entry>
  
  <entry>
    <title>Enginner Camp 2022に参加しました（HIG編）</title>
    <link href="https://future-architect.github.io/articles/20220916a/"/>
    <id>https://future-architect.github.io/articles/20220916a/</id>
    <published>2022-09-15T15:00:00.000Z</published>
    <updated>2022-09-22T07:10:37.776Z</updated>
    
    <content type="html"><![CDATA[<p>フューチャーのインターンシッププログラムの、Enginner Summer Camp 2022にてHealthCare Innovation Group（以下HIG）のインターンシップに参加した永田遊希です。</p><p>今回参加したインターンシップについて、同じくHIGのインターン生、神谷京佑さんの話も織り交ぜながらお話します。</p><h1 id="インターン参加理由"><a href="#インターン参加理由" class="headerlink" title="インターン参加理由"></a>インターン参加理由</h1><p>エンジニアとしての就職を目指しており、とにかく開発の経験をつみ、自分の実力を確かめるためにサマーインターンをさがしていました。そのなかでもフューチャーのEnginner Summer Camp2022のコースの一つであるHIGでのヘルスケアアプリの開発に興味を持ちました。以前から「医療×IT」の分野に関心があり、ぜひとも参加したいと思い応募しました。（永田）</p><p>短期間のチーム開発を何度か行っていましたが、業務的な長期間のチーム開発をしてみたいと思いインターンを探していたところこのEnginner Summer Campを見つけました。今多くの問題を抱えている介護、看護現場を助けるようなアプリ開発に興味を持っていたため、数あるコースの中のHIG に応募しました。（神谷）</p><h1 id="インターン参加まで"><a href="#インターン参加まで" class="headerlink" title="インターン参加まで"></a>インターン参加まで</h1><p>選考プロセスは①ES＋コーディングテスト　②面接です。コーディングテストは難しく、インターン生の間でも「あれ何問解けた？」「難しかったよね」と話題になりました。私はPaizaというサイトで練習していました。最低でもCランクの問題が解けるように準備したほうが良いと思います。正直面接に進めると思わなかったので面接案内のメールに全く気付いていませんでした。。旅行先のホテルで急いでメールに返信しました。</p><p>面接官はHIGを立ち上げた中元さんで、とても話しやすく楽しかったです。私自身がプログラミングやヘルスケアに興味を持った背景などをお話したり、HIGの事業内容のお話していただきました。これで不合格でも別に嫌な思いはしないな、と思った面接は後にも先にもないと思います。</p><p>中元さんが書かれたHIG立ち上げや事業内容にについての記事は<a href="https://note.future.co.jp/n/n8b57d4bf4604">こちら</a>からどうぞ。</p><h1 id="インターン参加前のスキル"><a href="#インターン参加前のスキル" class="headerlink" title="インターン参加前のスキル"></a>インターン参加前のスキル</h1><p>私は文学部の英文学専攻というバリバリな文系ですので、開発の実務経験はありませんでした。</p><ul><li><strong>独学で勉強して自分なりにアウトプットしていた</strong><ul><li>HTML  &#x2F;  CSS &#x2F; JavaScript &#x2F; PHP &#x2F; Git</li></ul></li><li><strong>学校の授業や他社のサマーインターンで基本文法は知っている</strong><ul><li>Java &#x2F; C#</li></ul></li><li><strong>Progateなどで軽く触れた程度</strong><ul><li>SQL</li></ul></li></ul><h1 id="インターンの内容"><a href="#インターンの内容" class="headerlink" title="インターンの内容"></a>インターンの内容</h1><p>今回のインターンの最終目標は、</p><p> <strong>Future Medical Baseを利用して、医療現場で使えそうなアプリ機能を提案とプロトアプリを作成すること</strong><br>　<br>使用される医療現場やターゲットユーザー（患者、医療従事者など）インターン生で決めて取り組みます。</p><p><strong>Future Medical Base</strong> とはフューチャーのコンポーネントをベースにHIG独自に開発したプラットフォームであり、これをもとに様々な医療向けアプリを構築できます。ちなみに、「Future Medical Base」は商標も取得されたそうです（おめでとうございます 🎉）。</p><p>一週間目は主に環境構築と、プロトタイプ作成に向けて医療現場における問題点を調査をしました。環境構築はエラーがでて思ったよりも時間をとってしまいました。</p><p>今後、社員の方が同じような状態になった時のために、どうしてうまくできなかったのか、どのようにして解決できたのかを文章化する必要があったのですが、うまく言葉にまとめることができませんでした。</p><p>インターンだとしてもフューチャーの社員であるという意識が足りていなかったと反省し、今一度気をひきしめました。<br>二週間目はコードに慣れるために、担当社員の指示のもと、Future Medical Baseの機能追加を実装しました。<br>本格的にプロトタイプの実装を始めたのは三週間目からです。</p><p>インターン生同士で調査し、話し合った結果</p><ul><li>訪問看護サービスが増加し、差別化しにくい</li><li>人材不足からの訪問看護師の負担増加</li></ul><p>という懸念点を解消するため、訪問看護師が利用者を訪問する度に作成する「訪問看護記録書」をデジタル化したものをアプリとして作成することにしました。</p><p>以下の図のように、看護記録をアプリ上に登録することで訪問看護師同士が実際に対面しなくても記録の引き継ぎがスムーズにできるような仕組みを考えました。</p><img src="/images/20220916a/スクリーンショット_(21).png" alt="" width="1200" height="675" loading="lazy"><p>使用した技術はこちら</p><ul><li>VueやSpringBootをベースとしたFuture製のフレームワーク</li><li>PostgreSQL</li><li>Git（GitLab）など</li></ul><h1 id="インターンで学べたこと"><a href="#インターンで学べたこと" class="headerlink" title="インターンで学べたこと"></a>インターンで学べたこと</h1><p><strong>Vue・Java</strong><br>もともとJavaScriptやJavaの経験はありましたが、インターンで扱うソースコードの量や難易度は比べ物になりません。最初はコードの意味を理解するのにかなり時間がかかりましたし、フロントエンドとバックエンド間のデータの受け渡しにも手詰まりました。しかしフロントエンドとバックエンド両方の開発に関われたことは自信につながりました。</p><p><strong>Git</strong><br> インターン参加前まではチーム開発の経験がなく、一人さみしくcommit、pushをし「Branchとりあえず切ってみたけど何の意味があるの？」という状態でしたが、今回のインターンを通してBranch・ pull・ mergeの仕組みや便利さをしっかり理解できました。今となっては、Branchなしの開発なんて考えられませんね。<br>また、Merge Requestが通った時はエンジニアに仲間入りした気分でした。😂</p><p><strong>SQL</strong><br>副問い合わせやテーブル結合をさらーっとしか理解していなかったのですが、実際に手を動かしながら学びました。意図したとおりのデータがとれたときはうれしかったです。さらにプロトタイプのための新しいテーブルを定義してCREATEすることも経験しました。</p><p><strong>ビジネス思考</strong><br>アプリ実装前に簡単なビジネスモデルを作成しました。エンジニアインターンといえどプログラミングだけにとどまらず、ビジネス面にも目を向けるという経験は「経営とITをデザインする」フューチャーならではだと思います。<br><img src="/images/20220916a/スクリーンショット_(22).png" alt="" width="1200" height="675" loading="lazy"></p><p><strong>HIGの社員や業務内容について</strong><br>HIGには社会における医療・ヘルスケア問題を変えていく、様々なすばらしいプロジェクトがあります。そこで働いている社員の方の、医療・ヘルスケア問題に本気に取り組んでいる熱意を常に感じましたHIGの定例会にも参加させていただいたのですが、Futureの社員さんたちが会話が途切れることなく積極的に意見交換されていました。さらには私たちインターン生が最終的なプロトタイプを発表した際にも、多くの社員さんに参加いただき、さらなるアイデアや改善点をだしてくださいました。</p><h1 id="インターン中のコミュニケーションについて"><a href="#インターン中のコミュニケーションについて" class="headerlink" title="インターン中のコミュニケーションについて"></a>インターン中のコミュニケーションについて</h1><p>コースにもよりますが、基本的に初日と最終日の出社以外はリモートで行われます。コミュニケーション面で不安に思われる方もいるかもしれませんが、心配はいりません。私はもう一人のインターン生と常にGoogle Meet(オンライン会議ツール)をつなぎ、何かあったら画面共有などしながらすぐに相談できるようにしていました。インターン期間は私の家族よりも会話している時間が長かったですね。さらにほかのコースのインターン生とも週に一度「コミュ会」という集まりでお互いの状況を話し合うことができました。</p><p>またインターン生同士だけではなく社員さんともランチ会やインタビューといった形でお話しする機会を多く作っていただきました。特に私は文系からのIT就職を目指しているので、ITの勉強法や、就活に関する質問までとても丁寧に答えてくださったことがありがたかったです。</p><h1 id="これから"><a href="#これから" class="headerlink" title="これから"></a>これから</h1><p>インターンを通して学んだことも多い一方で、課題点も多く見つかりました。</p><p>その一つは自己解決能力です。エラーが出た際にそこからどうやって解決していくべきかを判断するのにかなり時間がかかりました。私のように独学でプログラミングをしているかたは、動画や参考書を写経するだけではなく、答えがないものを自分で手を動かしてつくることをお勧めします。</p><p>この点に関しては「いままでインプットできたものは多かったとおもうが、アウトプットの量も今後は増やしていこう」というように社員の方にもアドバイスをいただきました。</p><p>インターンが終わったあとも自分でとにかく手を動かし、インターンで身につけた知識を自分のものにしていきたいと思います。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>最初は長期インターンでも一か月はかなり長いと思っていたのですが、いざ終わって見るとあっという間だったと感じました。このインターンではEnginner Campというだけあってエンジニアとしての技術はもちろんですが、どのようにしたらこのアプリにお金を払ってもらえるのか、どこでお金が動いているのかなど、普通に開発をしていたら考えないようなビジネス面での考え方も学ぶことができ、技術面、ビジネス面でも成長できたなと感じるようなインターンでした。この四週間本当にありがとうございました。（神谷）</p><p>インターン初日を思い出してみると、周りのインターン生はほぼ理系、女性は私ひとりという状況で「私なんかが参加してもいいのだろうか」と不安でいっぱいでした。インターン中に「これが俗に言う『何がわからないのかがわからない』ってやつか。。」という場面も多くありましたが、社員さんのサポートもあり、なんとか目標のプロトタイプを形にすることができました。インターンの成果発表会ではお世話になった多くのHIGの社員さんが見に来てくださり、嬉しいフィードバックもいただきました。この時は言葉では表しきれない温かい気持ちになりました。ちなみにさきほど女性ひとり、と書きましたがインターンでは多くの女性社員とお話する機会があり、性別関係なく働きやすい環境だと感じました。女子学生の皆さん、臆さずに応募してください。</p><p>インターンが終わって感謝と、達成感でいっぱいです。本当にフューチャーのインターンに応募してよかったと思います。</p><p>今回のインターンに携わっていただいたフューチャーの社員の方々、一緒に４週間走り続けたインターン生の神谷さん、本当にありがとうございました。</p><p>そしてこの記事をみて少しでも多くの学生がフューチャー（特にHIG）に興味をもち、さらにはインターンに（特にHIG）応募するきっかけになればいいなと思います。<br>（永田）</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;フューチャーのインターンシッププログラムの、Enginner Summer Camp 2022にてHealthCare Innovation</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="インターン" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/"/>
    
    <category term="インターン2022" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B32022/"/>
    
  </entry>
  
  <entry>
    <title>Engineer Camp 2022（プロパンガス配送計画の最適化に向けた数値データ解析）参戦記</title>
    <link href="https://future-architect.github.io/articles/20220914a/"/>
    <id>https://future-architect.github.io/articles/20220914a/</id>
    <published>2022-09-13T15:00:00.000Z</published>
    <updated>2022-09-14T02:54:46.130Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220914a/gas-burner-g16bcb7cba_640.jpg" alt="" width="640" height="427"><p>みなさん、こんにちは！Future Engineer Camp 2022に参加いたしました、荒木です。<br>本インターンに参加した経緯やそこでの学びについてお話ししたいと思います。</p><h2 id="参加した動機"><a href="#参加した動機" class="headerlink" title="参加した動機"></a>参加した動機</h2><p>元々、以下のような基準でインターンシップを探していました。</p><ol><li><strong>バックエンド開発に触れられる</strong></li><li><strong>できればGo言語を使いたい</strong></li><li><strong>長期</strong></li></ol><p>この条件を満たすプロジェクトがFuture Engineer Camp 2022に奇跡的にあり、友人からの誘いもあって、あまり何も考えずに応募しました。</p><h2 id="参加する前の自分のスキルセット"><a href="#参加する前の自分のスキルセット" class="headerlink" title="参加する前の自分のスキルセット"></a>参加する前の自分のスキルセット</h2><p>私のインターン参加前のスキルセットは以下です。</p><ul><li><strong>フロント: HTML,CSS,JavaScript,PHP</strong></li><li><strong>バックエンド: Go</strong></li><li><strong>DB: 経験なし</strong></li><li><strong>OS: Windows, MacOs, Linux</strong></li><li><strong>その他: C, C++, Python</strong></li></ul><p>HTML, CSS, JavaScript, PHPは自分でECサイトを作ったときにガッツリ使用しましたが、それからは使ってないです。私は競プロをやっているのですが、そこではC++をメインで使っています。Pythonは自分でCSを勉強するときに、メインで使用しています。Cは大学の授業で触れましたが、使いにくいので現在は絶縁しています。Goは入門書とProgateを走っただけ、インフラ周りは名前しかわからないという感じでした。</p><p>プログラムは書けるけど、開発を知らない典型的な大学生のスキルセットだったと思います。</p><h2 id="参加させていただいたプロジェクト"><a href="#参加させていただいたプロジェクト" class="headerlink" title="参加させていただいたプロジェクト"></a>参加させていただいたプロジェクト</h2><p>Goでの開発を望んでいた私は、「<strong>⑩プロパンガス配送計画の最適化に向けた数値データ解析</strong>」に応募しました。このプロジェクトの内容は、簡単にいえば「<strong>Goを用いてデータ解析やアルゴリズムを構築し、業務の効率化を図る</strong>」というものです。他のテックブログにも記事が載っているので、気になる方はぜひ読んでみてください。</p><p><a href="/articles/20220606b/#10-%E3%83%97%E3%83%AD%E3%83%91">Future Engineer Campの詳細</a></p><h2 id="インターン参加までの選考フロー"><a href="#インターン参加までの選考フロー" class="headerlink" title="インターン参加までの選考フロー"></a>インターン参加までの選考フロー</h2><p>インターンの選考フローは、<strong>① ES提出</strong>  <strong>② コーディング試験</strong>  <strong>③ オンライン面接</strong>の3段階です。みなさんに気をつけていただきたいのは、<strong>② コーディング試験</strong>です。難易度的には<strong>AtCoderの茶色〜水色レベル</strong>で、正直大学の授業でプログラムに触れただけでは、かなり厳しいと思います。応募する際は、それなりに言語の仕様や競プロ的な問題でデータ構造とアルゴリズム構築の演習を積んでおくことをお勧めします。オンライン面接では、インターン受け入れ先の人から技術的な質問と、大学時代に頑張ったことや自分の短所、長所などの質問がされます。この辺は友達と練習するなり、場数を踏んでおけばなんとかなると思います。</p><p>私の場合ですが、コーディング試験で3分の1程度しか解けず絶望していたのですが、結果は合格、MacBook Pro貸与、フルリモートと開発者にとっては最高の環境を提供していただき、非常に嬉しかったです。</p><h2 id="インターンの内容"><a href="#インターンの内容" class="headerlink" title="インターンの内容"></a>インターンの内容</h2><p>初日はプロキシ周りの設定と環境構築をします。プロキシ周りのことはマニュアルが準備されているし、社員の方が優しくサポートしてくださるので、詳しくなくても大丈夫です。プロキシの設定後は、セキュリティの講義やインターン中のルールなどのお話があり、その後GoとDockerの環境構築をします。私の場合はGoの環境構築は経験していたので苦ではなかったですが、一度もやったことないと苦労するかもしれません。違うプロジェクトで環境構築に3日ほどかかっていた人もいたので、その辺はメンターさんと頑張りましょう。テストがパスしたら、環境構築終了、業務開始です！</p><p>実際に業務でやったことは以下です。</p><ul><li>Futureが開発したGo-ExcelTestingの改修 (<a href="https://github.com/future-architect/go-exceltesting">Go-ExcelTesting</a>)</li><li>SQLのUPSERT, TRUNCATE処理の改修と一括化</li><li>Googleが開発したgo-cmpの出力形式をプロジェクト要望にそってカスタマイズ</li><li>AWS CLIとGo SDK V2の速度検証</li><li>必要であれば各プロジェクトのTest実装</li></ul><p>業務で用いた技術は以下です。</p><ul><li>言語: Go, SQL</li><li>DB: PostgeSQL</li><li>インフラ: AWS</li><li>その他: Slack, GitHub</li></ul><p>タスクのほとんどはGoを書くことやコードを読んで理解することに時間をあてていました。</p><h2 id="インターン中の1日"><a href="#インターン中の1日" class="headerlink" title="インターン中の1日"></a>インターン中の1日</h2><p>ここではインターン中どんな感じで生活していたかをまとめたいと思います。</p><p><strong>10:00〜: 朝会に参加</strong><br>私のプロジェクトでは、毎朝「朝会」というものがあります。これは前日の進捗状況と今日やることを報告する会で、私も毎朝参加していました。</p><p><strong>10:30〜: 業務開始</strong><br>今日やることをSlackにまとめてスレを立てて、業務を始めます。どうしても手詰まりになれば、メンターさんに泣きつきます。</p><p><strong>13:00〜: 昼休憩</strong><br>私の場合は基本的に昼飯と昼寝をここでしてました。休憩の開始時間とかは細かく決められていないので、作業の進捗次第で休憩に入るタイミングは決めていました。</p><p><strong>14:00〜: 業務再開</strong><br>ガリガリ頑張ります。</p><p><strong>18:00〜: インターン夕会</strong><br>その日の振り返り、先輩方と雑談をします。夕会は割と自由で、業務と関係ない話を先輩方とすることも多々ありました。基本的にみなさんめっちゃ優しいので、色々質問して自分に足りないことを盗むことが大切だと思います。</p><p><strong>〜19:00: 業務終わり</strong><br>日報と勤務時間を登録して、その日は終わりです。</p><h2 id="インターンでの学び"><a href="#インターンでの学び" class="headerlink" title="インターンでの学び"></a>インターンでの学び</h2><p>ここでは個人的に成長できたと思うことを述べたいと思います。</p><p><strong>・Git、SQLの使い方</strong><br>私は個人でもGitを使ってファイルのバージョン管理みたいなことをしていました。個人開発ではブランチの概念を考えたり、コンフリクトが起こることはないですが、集団開発だとそういうことが往々にして起こります。私は実際、コンフリクトを起こして解決できずメンターの方に解決していただきました。このままで終わっては成長につながらないので、週末に自分でGitの本を1冊買って、勉強したことでその後はGit関係のことは全部自分で解決しました。</p><p>SQLに関しては、インターン前の私は読み書きすらできなかったのでこれも週末に1冊本を買って、ローカルでPostgreSQLを動かして文法やお作法を覚えました。この2点に関しては、大きく成長したと思います。</p><p><strong>・Go言語</strong><br>結論、Go好きです。高機能な使いやすいC言語感があっていいですね。柔軟に自分の考えをコードで書けるので学びやすい言語だと思います。私自身インターンを通してGoに明るくなったと思います。他パッケージから隠すのかどうかを意識したり、変数名の付け方、Goにおける綺麗なコードとは何か、みたいなものを肌感覚として理解できました。</p><p><strong>・ググる力</strong><br>のちにも言いますが、AWSやGoのドキュメントは基本全部英語で、これらに関するエラーや実装方針については圧倒的に英語の情報量が多いです。ググるときに日本語だけで検索しないで、Stackoverflowなどで英語で検索すると自分と同じところで詰まっている人がたくさんいるので解決することが多かったです。<br>英語に明るくなるという1つの目標もできました。</p><p><strong>・コミュ力と開発のお作法</strong><br>エンジニアにコミュ力は必須です。自分がどこかで詰まってしまったときに、自分の状況を分かりやすく相手に伝える必要があります。自分がどこまで調べたのか、どういうエラーが出ているのか、どういう原因でエラーが出てそうなのか。この辺を相手に伝えることって当たり前に思えて、案外できません。私もできませんでした。インターンを通して、この辺を意識してSlackで質問するようになってから、問題が早く解決するようになりました。</p><p>開発のお作法についてですが、ここでは主にPull Request（以下PR）について話します。PRレビューをお願いする際には、Slackにそのリンクを貼るであったり、マークダウンを使って実装の意図を説明するなどといったことが必要です。個人で開発する時は、オープンソースにコミットする時でない限り、PRなんて作らなかったので、インターンに参加することでコミュ力と開発のお作法も短い期間で身につけられたと思います。</p><h2 id="インターンでの振り返り"><a href="#インターンでの振り返り" class="headerlink" title="インターンでの振り返り"></a>インターンでの振り返り</h2><p>インターンを振り返ってみて、一番最初に思い出す瞬間は、自分のPRが初めてマージされた時の瞬間ですね。一人で家の中ではしゃいでいました(笑)<br>どんなに拙いコードでも自分のコードが世の中に出る瞬間は、とても嬉しいものです。初マージの際は、Slackで祝っていただきました！</p><img src="/images/20220914a/スクリーンショット_2022-09-13_15.39.06.png" alt="" width="811" height="115" loading="lazy"><p>インターンを全体的に振り返ると、インターン参加前に得たかった経験は全て得られたと思います。GitやSQL、AWSなどの新しい知識、Goでの実装経験、ドキュメントなどを読みながら実装する経験など、望んでいたもの以上に素晴らしい経験をさせていただきました。毎日８時間働いていましたが、業務が楽しくて毎日があっという間でした。</p><p>タスクの難易度は難しいものが多かったです。タスクを実装するために何が必要なのかから自分で調べる必要があったり、リファクタする際には、書かれているコードがどういう挙動をしているのかを理解する必要があります。分からない場合は、積極的にSlackでコミュニケーションをとる必要があるのでプログラミング力だけではなく、自主性や思考力も必要とされたインターンだったと思います。反省点としては、会議を何度かすっぽかしてしまったことです。以後気をつけます。</p><p>また、毎週Futureの各部門のスペシャリストの方の講義を聞けたのは貴重な経験でした。COVID-19のワクチン開発にAI技術を用いてアプローチしていたお話は非常に興味深かったです。</p><h2 id="今後について"><a href="#今後について" class="headerlink" title="今後について"></a>今後について</h2><p>AWS周りの知識をインターン後にしっかり学びたいです。GitやDB周りの知識も新たに得たので、オープンソースにも積極的に参加していきたいと思います。<br>英語にも明るくなれるように頑張ります。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>自分の都合により、初日を欠席して参加する形となりましたが、温かく迎え入れていただいて嬉しかったです。<br>メンターの宮本さんをはじめ、技術的にサポートしていただいたプロジェクトの皆様、毎週懇談をしていただいたHRの皆様、このような貴重な機会をありがとうございました。</p><p>アイキャッチの画像は <a href="https://pixabay.com/ja/users/stroganova-2345018/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=6935480">Marina Stroganova</a>による<a href="https://pixabay.com/ja//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=6935480">Pixabay</a>を利用しました</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220914a/gas-burner-g16bcb7cba_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;427&quot;&gt;

&lt;p&gt;みなさん、こんにちは！Future Engineer Camp</summary>
        
      
    
    
    
    <category term="Culture" scheme="https://future-architect.github.io/categories/Culture/"/>
    
    
    <category term="インターン" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/"/>
    
    <category term="インターン2022" scheme="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B32022/"/>
    
  </entry>
  
  <entry>
    <title>東京Node学園40時限目で話をしてきました</title>
    <link href="https://future-architect.github.io/articles/20220913a/"/>
    <id>https://future-architect.github.io/articles/20220913a/</id>
    <published>2022-09-12T15:00:00.000Z</published>
    <updated>2022-09-13T04:48:37.948Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220913a/2022-09-05_21.02.24.png" alt="" width="1200" height="544" loading="lazy"><p>オンライン開催された<a href="https://nodejs.connpass.com/event/258870/">東京Node学園40時限目</a>で発表してきました。スライドはこちらです。</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vT-QRGzhwBhsx2BQIM1Ft1hx-hMhi-CauCeXCmmFiZvXbkmIhkJ57XvX-XZUQb3WrlqfTEd_2mAMpnW/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><p>内容としてはこのブログに書いた、<a href="https://future-architect.github.io/articles/20220819a/">gRPCがフロントエンド通信の第一の選択肢になる時代がやってきたかも？</a>という記事をベースにして、gRPCとは何かとか、Connectプロトコルの存在や、今までの公式実装ととどのように開発のスタイルが変わるか、みたいな話を絵つきで説明したりしました。</p><img src="/images/20220913a/スクリーンショット_2022-09-06_19.55.06.png" alt="スクリーンショット_2022-09-06_19.55.06.png" width="1200" height="640" loading="lazy"><p>あとは、streamを使って受信する部分のTypeScriptコードがどうなるかの紹介とかも追加しました。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 単発実行</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">await</span> client.<span class="title function_">greet</span>(&#123;name&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ストリームからの受信</span></span><br><span class="line"><span class="keyword">for</span> <span class="title function_">await</span>(<span class="params"><span class="keyword">const</span> res <span class="keyword">of</span> client.conversation(&#123;name&#125;)</span>) &#123;</span><br><span class="line">  <span class="title function_">setMessage</span>(res.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>あるいは最近追加された<a href="https://connect.build/docs/web/getting-started/">connect-webのドキュメント</a>や、<a href="https://github.com/bufbuild/connect-web-integration">connect-webの組み込みのサンプル集</a>の紹介とかですね。</p><p>はてブはそそこついたのですが、やはり口頭で説明するとさらに伝わる感じがありますね。まだ案件での投入はしていませんが、生成されるコードの品質とか使いやすさは圧倒的に良いので、今後積極的に使っていきたいと思っています。また更新があれば本ブログで紹介していきたいと思います。</p><p>僕の発表以外の古川会長のBunの発表も、yusukebeさんの高速なフレームワークの話も、どちらも面白かったです。Bunは発音はBunかと思ったらBunだったんですね。マイクロベンチマークの気をつけてみるポイントは興味深かったです。JSCにするだけでNode.jsと比べてそんなに早くなるとは思えなかったので、確かにな、というお話でした。最速のフレームワークも、処理系自体がどんどん加速していくなかで、さらに上を目指す話で興味深かったです。僕はどちらかというと作りたいものがいっぱいあって、1つのプロダクトにこんなにコミットしたことがなかったので、こういうのもやってみたいな、と思いました。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220913a/2022-09-05_21.02.24.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;544&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;オンライン開催された&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="登壇レポート" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/"/>
    
    <category term="フロントエンド" scheme="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/"/>
    
    <category term="Node.js" scheme="https://future-architect.github.io/tags/Node-js/"/>
    
    <category term="Node学園" scheme="https://future-architect.github.io/tags/Node%E5%AD%A6%E5%9C%92/"/>
    
    <category term="Connect" scheme="https://future-architect.github.io/tags/Connect/"/>
    
  </entry>
  
  <entry>
    <title>【メディア業界】新聞社のビジネスモデルの現状とこれから</title>
    <link href="https://future-architect.github.io/articles/20220909a/"/>
    <id>https://future-architect.github.io/articles/20220909a/</id>
    <published>2022-09-08T15:00:00.000Z</published>
    <updated>2022-09-20T23:58:56.522Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20220909a/roman-kraft-_Zua2hyvTBk-unsplash.jpg" alt="roman" width="1200" height="801" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは！2021年入社、TIGメディアユニット所属の菅野です。</p><p>本記事は、<a href="/articles/20220616a/">「業界ドメインに詳しくなろう」シリーズ連載</a>の「メディア業界へのチャレンジ」第3回目です。<br>前回の<a href="/articles/20220810a/">フューチャーのメディア業界への取組み編</a>では、新聞社の具体的な編集業務とフューチャーが開発したコンテンツ管理システムGlyphFeedsについてご紹介しました。</p><p>今回は少し視点を変えて、新聞業界のビジネスモデルの現状と課題、課題打破に向けた新しいビジネスモデルへの挑戦についてご紹介したいと思います。</p><h1 id="新聞社はどのように収益を得ている？"><a href="#新聞社はどのように収益を得ている？" class="headerlink" title="新聞社はどのように収益を得ている？"></a>新聞社はどのように収益を得ている？</h1><p>皆さんは新聞社がどのように収入を得ているかご存知でしょうか？</p><p>ご存知の方も多くいらっしゃると思いますが、新聞社は新聞そのものの「販売収入」と、新聞紙面に掲載される広告の掲載料金による「広告収入」の2本柱によって収入を得るビジネスモデルとなっています。その他にも、雑誌や書籍の出版、イベント開催、不動産経営によって収入を得ている新聞社も存在します。</p><img src="/images/20220909a/コメント_2022-08-19_191038.png" alt="" width="1149" height="804" loading="lazy"><p>最近流行りの「サブスクリプションモデル」を他業界に先駆けて取り入れた新聞業界は、このビジネスモデルで数十年間安定的な収入を得てきました。<br>…しかし今、新聞社に危機が訪れています。</p><h1 id="新聞社に迫る危機"><a href="#新聞社に迫る危機" class="headerlink" title="新聞社に迫る危機"></a>新聞社に迫る危機</h1><p>新聞社の総売上高の推移を見てみましょう。新聞社の収入の2本柱である販売収入、広告収入が徐々に減少しており、特に広告収入に関しては2020年度には2004年度の約3分の1まで低迷していることがわかります。なぜ、年々収入が減少しているのでしょうか？</p><img src="/images/20220909a/コメント_2022-08-19_191351.png" alt="" width="879" height="688" loading="lazy"><p>※引用：「日本新聞協会」<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p>新聞社の2大収入柱が崩れかけている原因は皆さん想像されている通り、インターネットの発達です。Yahoo! ニュースやGoogleニュースなどのニュースサイト、NewsPicksやグノシーなどのキュレーションサイトの台頭によりメディアの情報量が爆発的に増え、簡単に早く欲しいコンテンツを得る事ができるようになっただけでなく、YouTubeやTwitterといったSNSの普及により誰もがコンテンツメーカーとなれる時代へと変化しました。</p><p>こうしたインターネットの発達によるメディアの変化により、新聞購読者の減少や高齢化、新聞広告からWeb広告へのシフトチェンジといった事象が起こり、新聞社の2大収入柱が崩れかけてしまっていると推測できます。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><p>それでは、この危機を乗り越えるためにはどうすれば良いのでしょうか？</p><p><strong>【補足1】</strong>  新たなメディアが台頭しても、『新聞』にしかない使命があります。<a href="/articles/20220715a/">新聞の使命に関しては「メディア業界へのチャレンジ」第1回目、新聞業界（メディア業界）基礎編</a>にて詳しく語っているので是非ご一読ください！</p><h1 id="今こそビジネスモデル転換のとき！"><a href="#今こそビジネスモデル転換のとき！" class="headerlink" title="今こそビジネスモデル転換のとき！"></a>今こそビジネスモデル転換のとき！</h1><p>メディアの変化に伴い、新聞の購読者離れや新聞広告の低迷をもたらしたことに対し、今日多くの新聞社は生き残りを賭けてデジタル化対応を進めています。</p><p>しかしながら「電子的に提供される情報＝タダ」という意識が深く根付いており、新聞各社がデジタルサービス（電子版新聞）を開始しても有料会員が伸び悩んでしまい収益化になかなか繋がっていないのが現状です。</p><p>各社が新たなビジネスモデル転換に苦しんでいる中、強みである充実したコンテンツや膨大なデータを軸に新たなビジネス領域を開拓する動きが出てきています。</p><p>今回はFutureとも関わりがある、「日刊工業新聞社」と「日本経済新聞社」について触れていきます。</p><h2 id="日刊工業新聞社の取り組み：コンテンツECサイト"><a href="#日刊工業新聞社の取り組み：コンテンツECサイト" class="headerlink" title="日刊工業新聞社の取り組み：コンテンツECサイト"></a>日刊工業新聞社の取り組み：コンテンツECサイト</h2><p>日刊工業新聞社は2022年2月14日に「TREK！」という名前で、記事・写真・動画等のコンテンツ販売サービスを開始しました。商品の検索から決済、著作権利用の手続きまで、すべてオンライン上で完結できるのが特徴で、新聞業界において先駆けたサービスとなっています。</p><p>各新聞社が現在とっている、記事や画像といったコンテンツを新聞紙面や電子版に向けて出版・配信するというビジネスモデルでは収益が頭打ちであり、また新聞や電子版に掲載されないコンテンツはお蔵入りになってしまうという課題が有ります。しかし日刊工業新聞社は「TREK！」によって、１つ１つを価値ある商品として販売し新たな収益を生み出すという画期的な事業を展開しています。</p><p><strong>【補足2】</strong>  <a href="/articles/20220810a/">「メディア業界へのチャレンジ」第2回目、新聞業界（メディア業界）Futureの取り組み</a>にも記載されていますが、TREK！にはFutreが関わっています。</p><p>興味がある方は第2回の記事をご一読ください！<br><img src="/images/20220909a/コメント_2022-08-19_191731.png" alt="" width="1051" height="529" loading="lazy"></p><p>引用：TREK！<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p><h2 id="日本経済新聞社の取り組み：データ活用"><a href="#日本経済新聞社の取り組み：データ活用" class="headerlink" title="日本経済新聞社の取り組み：データ活用"></a>日本経済新聞社の取り組み：データ活用</h2><p>次に、日本経済新聞社の取り組みについて紹介します。日本経済新聞社は、読者が求めている時間帯に重要なニュースや解説を紙面に先駆けて電子版で配信するデジタルファーストを軸として持っている新聞会社です。デジタルファーストを達成するために、電子版購読者の行動をリアルタイムで分析し、コンテンツ強化やデジタルサービス新規開発を行いました。そして、日本経済新聞社は、データ分析システムを内製開発し電子版新聞への記事コンテンツのアクセス数など様々な顧客データを集め可視化する仕組みを整えました。</p><p>また、社内にモニターを設置して常にコンテンツへのアクセス状況を把握できるようにし、社内の誰もがデータ活用できる環境になるよう工夫しています。データの可視化によって早朝に多くのコンテンツが読まれていることがわかり、読者のビジネス活動時間に合わせて新聞紙面に先駆けて重要なニュースや解説を電子版で配信する「デジタルファースト」へのビジネスモデルへのシフトチェンジができました。</p><img src="/images/20220909a/コメント_2022-08-19_191923.png" alt="" width="946" height="577" loading="lazy"><p>※引用：「NIKKEI2021」<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p><p>また、電子版購読者のアクセスデータを活用したコンテンツ強化やデジタルサービス開発の充実により、紙の新聞ではアプローチできなかった女性や20代の若者といった読者層が電子版有料会員として増加しており、日経新聞社の電子版有料会員数は2021年から2022年の1年間で約3万7千人増加<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>し収益化に成功しています。<br><img src="/images/20220909a/コメント_2022-08-19_192053.png" alt="" width="1200" height="675" loading="lazy"></p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>新聞社のビジネスモデルの現状とこれからについてご紹介してきましたが、いかがだったでしょうか。新たなビジネスに挑戦し続けている新聞社を今回は2社のみ紹介しましたが、他にも多くの新聞社が危機的状況から脱却するために日々奮闘しています！</p><p>次回はさらに未来の新聞社のビジネスモデルについてご紹介できればと思います。<br>10年後20年後、新聞社がどう進化するか…？お楽しみに！</p><p>アイキャッチ画像は Photo by <a href="https://unsplash.com/@maguay?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Matthew Guay</a> on <a href="https://unsplash.com/s/photos/media?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a> です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">日本新聞協会 新聞社の総売上高の推移：<a href="https://www.pressnet.or.jp/data/finance/finance01.php">https://www.pressnet.or.jp/data/finance/finance01.php</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">PRTIMES 博報堂ＤＹメディアパートナーズ「メディア定点調査2022」時系列分析: <a href="https://prtimes.jp/main/html/rd/p/000000115.000038657.html">https://prtimes.jp/main/html/rd/p/000000115.000038657.html</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">TREK!：<a href="https://trek.nikkan.co.jp/">https://trek.nikkan.co.jp/</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">NIKKEI2021：<a href="https://www.nikkei.co.jp/nikkeiinfo/corporate/Nikkei_profile2021_jp.pdf">https://www.nikkei.co.jp/nikkeiinfo/corporate/Nikkei_profile2021_jp.pdf</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;/images/20220909a/roman-kraft-_Zua2hyvTBk-unsplash.jpg&quot; alt=&quot;roman&quot; width=&quot;1200&quot; height=&quot;801&quot; loading=&quot;lazy&quot;&gt;


&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Business" scheme="https://future-architect.github.io/categories/Business/"/>
    
    
    <category term="メディア業界" scheme="https://future-architect.github.io/tags/%E3%83%A1%E3%83%87%E3%82%A3%E3%82%A2%E6%A5%AD%E7%95%8C/"/>
    
    <category term="ビジネス" scheme="https://future-architect.github.io/tags/%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9/"/>
    
    <category term="業界ドメイン" scheme="https://future-architect.github.io/tags/%E6%A5%AD%E7%95%8C%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3/"/>
    
    <category term="新聞業界" scheme="https://future-architect.github.io/tags/%E6%96%B0%E8%81%9E%E6%A5%AD%E7%95%8C/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry Piをかき集めてKubernetesを体感する</title>
    <link href="https://future-architect.github.io/articles/20220908a/"/>
    <id>https://future-architect.github.io/articles/20220908a/</id>
    <published>2022-09-07T15:00:00.000Z</published>
    <updated>2022-09-08T05:32:18.696Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/articles/20220822a/">夏の自由研究ブログ連載2022</a> の10本目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG 岸下です。業務でGKE（Google Kubernetes Engine）を利用することがあるのですが、Kubernetesの挙動や仕組みなど如何せん理解が難しいです。</p><p>そこで今回は、自分の手でイチからKubernetesを構築することで勉強しようと思ったのが本記事のモチベーションです。</p><p>ちょうど自宅にRaspberry Piが3台あったのでRaspberry Piでクラスタを構築していこうと思います。基本的には以下の記事を参考に設定を行っていき、自分の理解を深めるために解説を挟みながら書いていこうと思います。</p><p>参考：<a href="https://qiita.com/yasthon/items/c29d0b9ce34d66eab3ec">RaspberryPi 4 にUbuntu20.04 をインストールして、Kubernetes を構築してコンテナを動かす</a></p><h1 id="今回Kubernetes構築するにあたって用意したもの"><a href="#今回Kubernetes構築するにあたって用意したもの" class="headerlink" title="今回Kubernetes構築するにあたって用意したもの"></a>今回Kubernetes構築するにあたって用意したもの</h1><ul><li>Raspberry Pi3 Model B（メモリ1GB）</li><li>Raspberry Pi4 Model B（メモリ4GB）</li><li>Raspberry Pi4 Model B（メモリ8GB）</li><li>SDカード（64GB）x 3</li><li>5ポートスイッチングハブ（BUFFALO LSW6-GT-5EPL&#x2F;NBK）</li><li>LANケーブル x 4（CATはバラバラ）</li><li>キーボード</li><li>マウス</li></ul><p>各種Raspberry Piの電源はコンセントから取っています。</p><h1 id="ラズパイの設定"><a href="#ラズパイの設定" class="headerlink" title="ラズパイの設定"></a>ラズパイの設定</h1><ul><li>3台共通のものと、3台それぞれで設定する内容があるので注意して下さい。</li></ul><h2 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h2><ul><li>OS: Ubuntu 20.04LTS（3台共通）</li></ul><p><a href="https://www.raspberrypi.com/software/">Raspberry Pi Imager</a>を使うと簡単にSDカードへOSを焼くことが出来ます。<br>SDカード3枚全てにUbuntu 20.04LTSを焼きます。</p><h2 id="Kubernetesのバージョン"><a href="#Kubernetesのバージョン" class="headerlink" title="Kubernetesのバージョン"></a>Kubernetesのバージョン</h2><ul><li>v1.25.0</li></ul><h2 id="初期設定（3台共通）"><a href="#初期設定（3台共通）" class="headerlink" title="初期設定（3台共通）"></a>初期設定（3台共通）</h2><p>ラズパイにOSをインストールしたSDカードを差し込み、パッケージを最新版にしておきます。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade -y</span><br></pre></td></tr></table></figure><h2 id="ネットワーク周り"><a href="#ネットワーク周り" class="headerlink" title="ネットワーク周り"></a>ネットワーク周り</h2><h3 id="物理的な構成図"><a href="#物理的な構成図" class="headerlink" title="物理的な構成図"></a>物理的な構成図</h3><img src="/images/20220908a/Screenshot_from_2022-09-04_20-54-30.png" alt="Screenshot_from_2022-09-04_20-54-30.png" width="1200" height="732" loading="lazy"><img src="/images/20220908a/image.png" alt="image.png" width="939" height="730" loading="lazy"><p><strong>※Desktop PCはラズパイ達とSSHするために繋いでいます。Kubernetesの構成には必要ありません。</strong></p><div class="scroll"><table><thead><tr><th>ラズパイ</th><th>役割</th><th>IPアドレス</th></tr></thead><tbody><tr><td>ラズパイ4B（8GB）</td><td>マスター</td><td>192.168.1.101</td></tr><tr><td>ラズパイ4B（4GB）</td><td>ワーカー①</td><td>192.168.1.102</td></tr><tr><td>ラズパイ3B</td><td>ワーカー②</td><td>192.168.1.103</td></tr></tbody></table></div><p>で構成しております。</p><h3 id="ネットワークの設定（ラズパイ3台それぞれで）"><a href="#ネットワークの設定（ラズパイ3台それぞれで）" class="headerlink" title="ネットワークの設定（ラズパイ3台それぞれで）"></a>ネットワークの設定（ラズパイ3台それぞれで）</h3><p>上記のIPアドレスを各ラズパイに割り振って固定化します。<br>以下のファイルを作成します。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/netplan/99-network.yaml</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><figcaption><span>99-network.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">networkd</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">eth0:</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">dhcp6:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">addresses:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.101</span><span class="string">/24</span> <span class="comment"># ラズパイ毎でIPを変更してください。（末尾がそれぞれ101, 102, 103になります。）</span></span><br><span class="line">      <span class="attr">gateway4:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span> <span class="comment"># 自宅のルーターからゲートウェイを調べて下さい。ここを間違えるとラズパイはネットに繋がらなくなります…</span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">        <span class="attr">addresses:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>作成したら、適用します。</p><figure class="highlight bash"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo netplan apply</span><br><span class="line">ifconfig</span><br><span class="line"><span class="comment"># eth0の部分が所望のIPアドレスに変わっていることを確認。</span></span><br><span class="line"><span class="comment"># ifconfigが無ければ</span></span><br><span class="line"><span class="comment"># sudo apt install ifconfig</span></span><br><span class="line"><span class="comment"># でインストール</span></span><br></pre></td></tr></table></figure><h3 id="SSHの設定（デスクトップPC）"><a href="#SSHの設定（デスクトップPC）" class="headerlink" title="SSHの設定（デスクトップPC）"></a>SSHの設定（デスクトップPC）</h3><p>IPアドレスの固定化が完了したので、ここからはSSHで操作を行うようにします。</p><p><strong>※SSHは利用しなくても設定することができますが、3台分のラズパイのディスプレイを切り替える作業のストレスが無くなります。</strong></p><h4 id="VSCodeのRemote-SSHを用意"><a href="#VSCodeのRemote-SSHを用意" class="headerlink" title="VSCodeのRemote SSHを用意"></a>VSCodeのRemote SSHを用意</h4><p>デスクトップPCにてVSCodeをインストールして、「拡張機能」から<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh">Remote - SSH</a>をインストールしてください。</p><img src="/images/20220908a/Screenshot_from_2022-09-03_15-19-08.png" alt="Screenshot_from_2022-09-03_15-19-08.png" width="1200" height="233" loading="lazy"><h4 id="SSH構成ファイルを用意"><a href="#SSH構成ファイルを用意" class="headerlink" title="SSH構成ファイルを用意"></a>SSH構成ファイルを用意</h4><p>VSCodeウィンドウ左下の「＞＜」をクリックして、「SSH構成ファイルを開く」から<code>config</code>を開いて以下のように設定して保存します。</p><figure class="highlight plaintext"><figcaption><span>config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Host rpi4_8</span><br><span class="line">    HostName 192.168.1.101</span><br><span class="line">    User ubuntu</span><br><span class="line"></span><br><span class="line">Host rpi4_4</span><br><span class="line">    HostName 192.168.1.102</span><br><span class="line">    User ubuntu</span><br><span class="line"></span><br><span class="line">Host rpi3</span><br><span class="line">    HostName 192.168.1.103</span><br><span class="line">    User ubuntu</span><br></pre></td></tr></table></figure><ul><li>Host名も好きに変更して頂いて構いません。</li><li>IPアドレスは自宅の環境に合わせて適宜変更して下さい。</li><li>User名を変更している場合も適宜変更して下さい。</li></ul><h4 id="各ラズパイに接続する"><a href="#各ラズパイに接続する" class="headerlink" title="各ラズパイに接続する"></a>各ラズパイに接続する</h4><p>VSCodeウィンドウ左下の「＞＜」をクリックして、「ホストに接続する」からホスト名を選んで接続します。<br>初回は接続キーの登録が行われるため、キーが表示されたら「続行」を押し、あとはログイン用のパスワードを入力すると接続できます。<br>複数台同時に接続できるので、3画面分用意しておけばデスクトップPC側からラズパイの操作が可能となります。</p><h3 id="ホスト名の変更（ラズパイ3台それぞれ）"><a href="#ホスト名の変更（ラズパイ3台それぞれ）" class="headerlink" title="ホスト名の変更（ラズパイ3台それぞれ）"></a>ホスト名の変更（ラズパイ3台それぞれ）</h3><p>ここからはまたラズパイの操作となります。<br>以下のホスト名を割り振っていきましょう。</p><div class="scroll"><table><thead><tr><th>ラズパイ</th><th>役割</th><th>ホスト名</th></tr></thead><tbody><tr><td>ラズパイ4B（8GB）</td><td>マスター</td><td>mas01.example.com</td></tr><tr><td>ラズパイ4B（4GB）</td><td>ワーカー①</td><td>work01.example.com</td></tr><tr><td>ラズパイ3B</td><td>ワーカー②</td><td>work02.example.com</td></tr></tbody></table></div><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo hostnamectl set-hostname mas.example.com <span class="comment"># 各々のラズパイでhostnameは変える</span></span><br><span class="line">hostname <span class="comment"># 変更の確認作業</span></span><br></pre></td></tr></table></figure><h3 id="x2F-etc-x2F-hostsの設定（ラズパイ3台共通）"><a href="#x2F-etc-x2F-hostsの設定（ラズパイ3台共通）" class="headerlink" title="&#x2F;etc&#x2F;hostsの設定（ラズパイ3台共通）"></a>&#x2F;etc&#x2F;hostsの設定（ラズパイ3台共通）</h3><p>ホスト名とIPアドレスを対応させるために、<code>etc/hosts</code>に以下の内容を追記します。</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/hosts</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>hosts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># ...</span><br><span class="line"></span><br><span class="line">192.168.1.101 mas01 mas01.example.com</span><br><span class="line">192.168.1.102 work01 work01.example.com</span><br><span class="line">192.168.1.103 work02 work02.example.com</span><br><span class="line"></span><br><span class="line"># ...</span><br></pre></td></tr></table></figure><p>これによって、ネットワークの名前解決ができるようになります。</p><h4 id="余談"><a href="#余談" class="headerlink" title="余談"></a>余談</h4><p>以下はKubernetesの設定とは関係のない話なので余談ですが、ターミナル上で</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh work01.example.com</span><br></pre></td></tr></table></figure><p>と打てば、<code>192.168.1.102</code>に接続することができます。<br>これはDNS（Domain Name Service）でも同じことが行われています。<br>DNSについては、ぜひTIG西田さんの<a href="https://future-architect.github.io/articles/20200604/">NW入門</a>を読んでみてください。ハンズオン形式でわかりやすいと思います。</p><h3 id="IPv6の停止（ラズパイ3台共通）"><a href="#IPv6の停止（ラズパイ3台共通）" class="headerlink" title="IPv6の停止（ラズパイ3台共通）"></a>IPv6の停止（ラズパイ3台共通）</h3><p>IPv6は今回利用しないので停止します。<br><code>sysctl.conf</code>をvimで開きます。</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>下記設定を最後の方へ追記します。<br>設定を1にすることで停止となります。</p><figure class="highlight plaintext"><figcaption><span>sysctl.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#...</span><br><span class="line"></span><br><span class="line">net.ipv6.conf.all.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.default.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.eth0.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.lo.disable_ipv6 = 1</span><br></pre></td></tr></table></figure><h4 id="余談-1"><a href="#余談-1" class="headerlink" title="余談"></a>余談</h4><p>また余談ですが、最近はKubernetesでIPv4&#x2F;IPv6デュアルスタックが利用できるそうです。<br>参考：<a href="https://kubernetes.io/ja/docs/concepts/services-networking/dual-stack/">IPv4&#x2F;IPv6デュアルスタック</a></p><blockquote><p>IPv4&#x2F;IPv6デュアルスタックを利用するとIPv4とIPv6のアドレスの両方をPod及びServiceに指定できるようになります。</p></blockquote><p>なるほど、わからんという感じです。<br>IPv6自体はIPv4アドレスの枯渇問題を解決するためのプロトコルで、他にもIPv4に対する不満の多くを一挙に解消しようとしています（<a href="https://www.ohmsha.co.jp/book/9784274224478/">マスタリングTCP&#x2F;IP入門編</a> P.171）。<br>デュアルスタック機能によって、お互いは仕様の異なるプロトコルスタックですが共存させる仕組みで、やはりどちらのプロトコルも使えるのが美味しいポイントとなるのでしょうか。利用する機会があればまた調べて見ようと思います。</p><h3 id="timezone-keymapの変更（ラズパイ3台共通）"><a href="#timezone-keymapの変更（ラズパイ3台共通）" class="headerlink" title="timezone, keymapの変更（ラズパイ3台共通）"></a>timezone, keymapの変更（ラズパイ3台共通）</h3><p>タイムゾーンを日本に、keymapを日本語にします。</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># タイムゾーンの変更</span></span><br><span class="line">sudo timedatectl set-timezone Asia/Tokyo</span><br><span class="line"></span><br><span class="line"><span class="comment"># keymapの変更</span></span><br><span class="line">sudo localectl set-keymap jp106</span><br></pre></td></tr></table></figure><h2 id="Kubernetes周り"><a href="#Kubernetes周り" class="headerlink" title="Kubernetes周り"></a>Kubernetes周り</h2><p>ここからKubernetes周りの設定を行っていきます。<br>基本はkubeadmの設定に沿っていきます。</p><p>参考：<a href="https://kubernetes.io/ja/docs/setup/production-environment/tools/kubeadm/install-kubeadm/">kubeadmのインストール</a></p><h3 id="iptablesがnftablesバックエンドを使用しないようにする（ラズパイ3台共通）"><a href="#iptablesがnftablesバックエンドを使用しないようにする（ラズパイ3台共通）" class="headerlink" title="iptablesがnftablesバックエンドを使用しないようにする（ラズパイ3台共通）"></a>iptablesがnftablesバックエンドを使用しないようにする（ラズパイ3台共通）</h3><blockquote><p>nftablesバックエンドは現在のkubeadmパッケージと互換性がありません。(ファイアウォールルールが重複し、kube-proxyを破壊するためです。)</p></blockquote><p>だそうです。</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># レガシーバイナリをインストール</span></span><br><span class="line">sudo apt-get install -y iptables arptables ebtables</span><br><span class="line"></span><br><span class="line"><span class="comment"># レガシーバージョンに切り替える</span></span><br><span class="line">sudo update-alternatives --<span class="built_in">set</span> iptables /usr/sbin/iptables-legacy</span><br><span class="line">sudo update-alternatives --<span class="built_in">set</span> ip6tables /usr/sbin/ip6tables-legacy</span><br><span class="line">sudo update-alternatives --<span class="built_in">set</span> arptables /usr/sbin/arptables-legacy</span><br><span class="line">sudo update-alternatives --<span class="built_in">set</span> ebtables /usr/sbin/ebtables-legacy</span><br></pre></td></tr></table></figure><p>参考：<a href="https://kubernetes.io/ja/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#iptables%E3%81%8Cnftables%E3%83%90%E3%83%83%E3%82%AF%E3%82%A8%E3%83%B3%E3%83%89%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B">kubernetes: iptablesがnftablesバックエンドを使用しないようにする</a></p><h3 id="Dockerのインストール（ラズパイ3台共通）"><a href="#Dockerのインストール（ラズパイ3台共通）" class="headerlink" title="Dockerのインストール（ラズパイ3台共通）"></a>Dockerのインストール（ラズパイ3台共通）</h3><p>参考：<a href="https://docs.docker.com/engine/install/ubuntu/">Install Docker Engine on Ubuntu</a></p><p>ターミナルにて以下のコマンドでインストールします。</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=arm64] https://download.docker.com/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="comment"># apt-mark holdで、バージョンを固定します。</span></span><br><span class="line">sudo apt-mark hold docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>dockerをroot権限無しで実行するためにdockerグループへユーザーを割り当てます。</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser ubuntu docker</span><br><span class="line"><span class="built_in">cat</span> /etc/group | grep docker</span><br><span class="line"><span class="comment"># 自分のユーザー名が追加されていることを確認</span></span><br></pre></td></tr></table></figure><p>グループ割当を適用するために、一度ログオフ or 再起動をしましょう。<br>Dockerのバージョンを確認します。</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line"><span class="comment"># Dockerのバージョンが表示されればOK</span></span><br><span class="line"><span class="comment"># グループ割当が適用されていないと、Warningが出る。</span></span><br></pre></td></tr></table></figure><p>dockerの動作確認に<code>hello-world</code>コンテナを使います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br><span class="line"><span class="comment"># Hello from Docker!と表示されればOK</span></span><br></pre></td></tr></table></figure><h3 id="kubeadm、kubelet、kubectlのインストール（ラズパイ3台共通）"><a href="#kubeadm、kubelet、kubectlのインストール（ラズパイ3台共通）" class="headerlink" title="kubeadm、kubelet、kubectlのインストール（ラズパイ3台共通）"></a>kubeadm、kubelet、kubectlのインストール（ラズパイ3台共通）</h3><p>参考：<a href="https://kubernetes.io/ja/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#kubeadm-kubelet-kubectl%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">kubeadm、kubelet、kubectlのインストール</a></p><p>以下のコマンドでインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install -y apt-transport-https curl</span><br><span class="line">curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF | sudo tee /etc/apt/sources.list.d/kubernetes.list</span></span><br><span class="line"><span class="string">deb https://apt.kubernetes.io/ kubernetes-xenial main</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y kubelet kubeadm kubectl</span><br><span class="line">sudo apt-mark hold kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><p>そもそもこのkubeadm、kubelet、kubectlは何に使われるのでしょうか？</p><h4 id="kubeadm"><a href="#kubeadm" class="headerlink" title="kubeadm"></a>kubeadm</h4><p>参考：<a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/">Kubeadm</a></p><ul><li>Kubeadmは<code>kube init</code>や<code>kubeadm join</code>といったコマンドを提供するために作られたツールである。</li><li>最低限実行可能なKubernetesクラスタを立ち上げるために必要なアクションを実行する。</li><li>Kubeadmの設計上、クラスタの立ち上げのみにフォーカスを当てており、マシンへのプロビジョニングまでは考えていない。<ul><li>同様に、Kubernetesダッシュボードのような種々の便利なアドオンをインストールしたり、モニタリング、クラウド固有のアドオンもスコープ外である。</li></ul></li><li>理想的には全てのデプロイのベースとしてkubeadmを使うことで、適合するクラスタの作成が容易になる。</li></ul><p>クラスタの立ち上げまではkubeadmが面倒見てくれて、残りのツールとか設定は各々よしなにやりましょうという感じでしょうか。</p><h4 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h4><p>参考：<a href="https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/">kubelet</a></p><p>kubeletを理解する前に、クラスターの全体像をまず理解する必要がありそうです。</p><img src="/images/20220908a/9e8e89cf-751b-32cf-e060-c445acc0784c.png" alt="" width="1200" height="561" loading="lazy"><p>画像引用先： <a href="https://kubernetes.io/ja/docs/concepts/overview/components/">Kubernetesのコンポーネント</a></p><p>グレーの箇所はクラスターになり、先程紹介したKubeadmによって提供されます。</p><ul><li>Control Plane（マスターノード）に対してNode（ワーカーノード）がぶら下がる。<ul><li>今回で言えば、マスターノードであるラズパイ<code>master01</code>にワーカーノードである<code>worker01</code>、<code>worker02</code>がぶら下がる。</li></ul></li><li>マスターノードはワーカーノードとPodを管理する。</li><li>ワーカーノードはアプリケーションのコンポーネントであるPodをホストする</li><li>Podは1つ以上のコンテナのグループを持ち、Kubernetesにデプロイできる最小単位になる<ul><li>種々のアプリケーションはPodの中のコンテナ上で動作</li></ul></li></ul><p>で、kubeletですが図を見ると各ワーカーノードの中にkubeletが存在し、ワーカーノードの中で使われることがわかります。どこで使われるかがわかったところでkubeletの機能についてまとめていきます。</p><ul><li>kubeletは、各ノード上で実行される主要な”ノードエージェント”<ul><li>”エージェント”なので各ノードの中での仲介者で、Podの起動・管理を行う</li></ul></li><li>kubeletは、PodSpecの観点から動作する<ul><li>PodSpecはPodに関する様々な情報（例えばコンテナの名前やimage）を載せたYAML or JSONファイル</li><li>PodSpec通りにコンテナが実行・動作されているかを確認することでPodを管理する</li></ul></li></ul><p>kubeletは各Pod内の管理・仲介者と考えておくとよさそうです。</p><h4 id="kubectl"><a href="#kubectl" class="headerlink" title="kubectl"></a>kubectl</h4><p>参考：<a href="https://kubernetes.io/ja/docs/reference/kubectl/overview/">kubectlの概要</a></p><p>kubectlはKubernetesクラスターを制御するためのコマンドラインインターフェース（CLI）です。ターミナルからKubernetesクラスターを制御するのに使われます。</p><h3 id="cgroupでmemoryの有効化（ラズパイ3台共通）"><a href="#cgroupでmemoryの有効化（ラズパイ3台共通）" class="headerlink" title="cgroupでmemoryの有効化（ラズパイ3台共通）"></a>cgroupでmemoryの有効化（ラズパイ3台共通）</h3><p>Kubernetesを利用する際に、cgroupのmemoryを有効化する必要があります。<br>はて、cgroupとは何なんでしょうか。</p><h4 id="Kubernetes内でのcgroup"><a href="#Kubernetes内でのcgroup" class="headerlink" title="Kubernetes内でのcgroup"></a>Kubernetes内でのcgroup</h4><p>参考：<a href="https://gihyo.jp/admin/serial/01/linux_containers/0003">Linuxカーネルのコンテナ機能［2］ ─cgroupとは？（その1）</a><br>参考：<a href="https://valinux.hatenablog.com/entry/20210114">Kubernetes で cgroup がどう利用されているか</a></p><p>cgroupはControle Groupの略で、プロセスをグループ化して、そのグループ内に存在するプロセスに対して共通の管理を行うために使われます。例としては、ホストOSが持つCPUやメモリなどのリソースに対して、グループごとに制限をかけることができます。</p><p>kubeletの説明の中でPodSpecの話が出てきました。PodSpecのファイルではPod内のコンテナに関する情報を書くわけですが、この中でCPUやメモリの量も制限する（<code>resources</code>の<code>limits</code>）ことが可能です。正にここでcgroupが使われていて、ラズパイの計算リソースに対して、例えば計算リソースをそこまで必要としないPodに対しては制限をすることで、ラズパイのリソースを無駄に食い潰さないようにすることができます。</p><h4 id="有効化の設定"><a href="#有効化の設定" class="headerlink" title="有効化の設定"></a>有効化の設定</h4><p>さて、cgroupのメモリーを有効化していきます。<br>以下のコマンドで確認すると、初期では無効化（末尾が0）されています。</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/cgroups | grep memory</span><br><span class="line"><span class="comment"># 下記が表示される</span></span><br><span class="line">memory  0       105     0</span><br></pre></td></tr></table></figure><p><code>boot/firmware/cmdline.txt</code>を開き、<code>cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory</code>を追記します。</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /boot/firmware/cmdline.txt</span><br></pre></td></tr></table></figure><figure class="highlight txt"><figcaption><span>/boot/firmware/cmdline.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elevator=deadline net.ifnames=0 console=serial0,115200 dwc_otg.lpm_enable=0 console=tty1 root=LABEL=writable rootfstype=ext4 rootwait fixrtc quiet splash cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory</span><br></pre></td></tr></table></figure><p><strong>※改行はありません。既に書かれている文の末尾にスペースを空けて追記する形となります。</strong></p><p>変更を適用するために再起動します。</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br><span class="line"><span class="comment"># SSH接続が切れるので、ログインし直す</span></span><br></pre></td></tr></table></figure><p>memoryが有効化されていることを確認します。</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /proc/cgroups | grep memory</span><br><span class="line"><span class="comment"># 下記が表示される</span></span><br><span class="line">memory  7       107     1</span><br></pre></td></tr></table></figure><h1 id="Kubernetesクラスターの作成"><a href="#Kubernetesクラスターの作成" class="headerlink" title="Kubernetesクラスターの作成"></a>Kubernetesクラスターの作成</h1><p>参考：<a href="https://kubernetes.io/ja/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/">kubeadmを使用したクラスターの作成</a></p><h2 id="コントロールプレーンノードの初期化（マスターノードのラズパイのみ）"><a href="#コントロールプレーンノードの初期化（マスターノードのラズパイのみ）" class="headerlink" title="コントロールプレーンノードの初期化（マスターノードのラズパイのみ）"></a>コントロールプレーンノードの初期化（マスターノードのラズパイのみ）</h2><p>先程も出てきましたが、コントロールプレーンノード＝マスターノードです。<br>マスターノードにて操作を行っていきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kubeadm init --apiserver-advertise-address=192.168.1.101 --pod-network-cidr=10.244.0.0/16</span><br></pre></td></tr></table></figure><ul><li><code>apiserver-advertise-address</code><ul><li>このオプションを利用して明示的にAPIサーバーのadvertise addressを設定します。</li><li>明示的に指定しない場合はデフォルトゲートウェイに関連付けられたネットワークインターフェースを使用して設定されます。</li></ul></li><li><code>pod-network-cidr</code><ul><li>Flannelを使用する場合、こちらを指定する必要があります。</li><li>Flannelはノード間をつなぐネットワークに仮想的なトンネルを構成することで、クラスター内のPod同士の通信を実現しています。</li><li><code>/16</code>と広めに設定します（<a href="https://github.com/flannel-io/flannel/blob/master/Documentation/kubernetes.md">GitHub - flannel-io&#x2F;flannel</a>）。</li></ul></li></ul><p>初期化後、<code>kubeadm join 192.168.1.101:6443 --token ...</code>という出力が出たら、どこかのテキストエディタにコピーしておきます。<br>このコマンドはワーカーノードを追加する際に利用します。</p><h3 id="もしinit時にcontainer-runtime-is-not-runningというエラーが出た場合"><a href="#もしinit時にcontainer-runtime-is-not-runningというエラーが出た場合" class="headerlink" title="もしinit時にcontainer runtime is not runningというエラーが出た場合"></a>もしinit時に<code>container runtime is not running</code>というエラーが出た場合</h3><p>参考：<a href="https://github.com/containerd/containerd/issues/4581">Kubeadm unknown service runtime.v1alpha2.RuntimeService #4581</a></p><p>上記ページにエラーについて載っており、内容を読むと以下のように書いております。</p><blockquote><p>In the config.toml file installed by package containerd.io there is the line disabled_plugins &#x3D; [“cri”] that am guessing creating the issue.</p></blockquote><p>パッケージ<code>containerd.io</code>から<code>config.toml</code>をインストールした際に今回のエラーを引き起こす行があるようです（確証ではないみたい？）。<br>解決方法はマスターノードにて以下のコマンドを実行し、configファイルを削除します。<br>そして、<code>containerd</code>を再実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># configファイルを削除</span></span><br><span class="line">sudo <span class="built_in">rm</span> /etc/containerd/config.toml</span><br><span class="line"><span class="comment"># containerdを再実行</span></span><br><span class="line">systemctl restart containerd</span><br></pre></td></tr></table></figure><h2 id="環境変数と入力補完の設定（マスターノードのラズパイのみ）"><a href="#環境変数と入力補完の設定（マスターノードのラズパイのみ）" class="headerlink" title="環境変数と入力補完の設定（マスターノードのラズパイのみ）"></a>環境変数と入力補完の設定（マスターノードのラズパイのみ）</h2><p>kubectlをroot以外のユーザーでも実行できるようにするために、以下の設定を行っていきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ホームディレクトリに.kubeディレクトリを作成</span></span><br><span class="line"><span class="built_in">mkdir</span> -p ~/.kube</span><br><span class="line"><span class="comment"># Kubernetesのadmin.confを.kubeディレクトリのconfigファイルへコピー</span></span><br><span class="line">sudo <span class="built_in">cp</span> -i /etc/kubernetes/admin.conf ~/.kube/config</span><br><span class="line"><span class="comment"># configファイルの所有者がrootになっているのでk8suserへ変更</span></span><br><span class="line">sudo <span class="built_in">chown</span> $(<span class="built_in">id</span> -u):$(<span class="built_in">id</span> -g) ~/.kube/config</span><br><span class="line"><span class="comment"># .bashrcへ環境変数の追加</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;KUBECONFIG=$HOME/.kube/config&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="comment"># コマンドの入力補完を設定</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source &lt;(kubectl completion bash)&quot;</span> &gt;&gt; <span class="variable">$HOME</span>/.bashrc</span><br><span class="line"><span class="comment"># 変更を適用</span></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="Flannelの設定（マスターノードのラズパイのみ）"><a href="#Flannelの設定（マスターノードのラズパイのみ）" class="headerlink" title="Flannelの設定（マスターノードのラズパイのみ）"></a>Flannelの設定（マスターノードのラズパイのみ）</h2><p>先程もちょろっと説明しましたが、Flannelはノードを跨いでコンテナ同士が通信できるようにするPodネットワークアドオンになります。<br>コンテナにはIPアドレスが付与されるのですが、Internal IPなのでそのままだとノードを跨いでコンテナ間で通信することができません。これを解決するために、Flannelによってノード間をつなぐネットワークに仮想的なトンネル（オーバーレイネットワーク）を構成することで、Kubernetesクラスター内のPod同士の通信（Podネットワーク）を実現しています。</p><p>参考：<a href="https://book.impress.co.jp/books/1119101148">Kubernetes完全ガイド 3.3.3 Flannel</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><p>flannelが動作しているか確認します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -n kube-flannel</span><br><span class="line"><span class="comment"># 以下が出力される</span></span><br><span class="line">NAME                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-flannel-ds-qcspv   1/1     Running   0          23m</span><br></pre></td></tr></table></figure><h2 id="ロードバランサーのインストール（マスターノードのラズパイのみ）"><a href="#ロードバランサーのインストール（マスターノードのラズパイのみ）" class="headerlink" title="ロードバランサーのインストール（マスターノードのラズパイのみ）"></a>ロードバランサーのインストール（マスターノードのラズパイのみ）</h2><p><a href="https://qiita.com/yasthon/items/c29d0b9ce34d66eab3ec">こちら</a>を参考にして作っているので、同様にMetalLBをインストールします。<br><a href="https://metallb.universe.tf/installation/">MetalLB, bare metal load-balancer for Kubernetes </a>を参考にインストールします。</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.5/config/manifests/metallb-native.yaml</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey=<span class="string">&quot;<span class="subst">$(openssl rand -base64 128)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>起動の確認を行います。</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod -n metallb-system</span><br><span class="line"><span class="comment"># 以下が表示される</span></span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">controller-8689779bc5-txnbg   0/1     Pending   0          70s</span><br><span class="line">speaker-vcg4j                 1/1     Running   0          70s</span><br></pre></td></tr></table></figure><h2 id="ワーカーノードをクラスタにジョイン"><a href="#ワーカーノードをクラスタにジョイン" class="headerlink" title="ワーカーノードをクラスタにジョイン"></a>ワーカーノードをクラスタにジョイン</h2><p>先程、テキストエディタにコピーしておいたコマンドを実行します。<br><strong>※<code>sudo</code>忘れに注意</strong></p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kubeadm <span class="built_in">join</span> 192.168.1.101:6443 --token y2grpy.nbvcyr1em9o5aigj　--discovery-token-ca-cert-hash sha256:3e9ef8910b95e0a366041c1e156b7cbd6802df4c857cd53ad59bbba631749983</span><br></pre></td></tr></table></figure><p>ちゃんとワーカーノードがジョインされたか確認してみましょう。</p><figure class="highlight sh"><figcaption><span>terminal（マスターノード）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line"><span class="comment"># 以下が表示される</span></span><br><span class="line">NAME       STATUS     ROLES           AGE    VERSION</span><br><span class="line">master01   Ready   control-plane      6d     v1.25.0</span><br><span class="line">work01     Ready      &lt;none&gt;          122m   v1.25.0</span><br><span class="line">work02     Ready      &lt;none&gt;          121m   v1.25.0</span><br></pre></td></tr></table></figure><p><code>ROLES</code>がデフォルトになっているので変更します。</p><figure class="highlight sh"><figcaption><span>terminal（マスターノード）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># work01</span></span><br><span class="line">kubectl label node work01 node-role.kubernetes.io/worker=worker</span><br><span class="line"><span class="comment"># work02</span></span><br><span class="line">kubectl label node work02 node-role.kubernetes.io/worker=worker</span><br><span class="line"><span class="comment"># 確認</span></span><br><span class="line">kubectl get nodes</span><br><span class="line"><span class="comment"># 以下が表示される</span></span><br><span class="line">NAME       STATUS     ROLES           AGE    VERSION</span><br><span class="line">master01   Ready   control-plane      6d     v1.25.0</span><br><span class="line">work01     Ready      worker          122m   v1.25.0</span><br><span class="line">work02     Ready      worker          121m   v1.25.0</span><br></pre></td></tr></table></figure><p>これでクラスタの完成です。遂に我が家にKubernetesがやって来ました。</p><h3 id="もしコピペを忘れた場合"><a href="#もしコピペを忘れた場合" class="headerlink" title="もしコピペを忘れた場合"></a>もしコピペを忘れた場合</h3><p>以下のコマンドで発行したトークンを確認することが出来ます。</p><figure class="highlight sh"><figcaption><span>terminal（マスターノード）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubeadm token list</span><br><span class="line"><span class="comment"># 以下が表示される</span></span><br><span class="line">TOKEN                     TTL         EXPIRES                USAGES                   DESCRIPTION                                                EXTRA GROUPS</span><br><span class="line">y2grpy.nbvcyr1em9o5aigj   22h         2022-09-04T08:03:11Z   authentication,signing   &lt;none&gt;                                                     system:bootstrappers:kubeadm:default-node-token</span><br></pre></td></tr></table></figure><p>有効期限が切れてしまった場合は以下のコマンドで再発行します。</p><figure class="highlight sh"><figcaption><span>terminal（マスターノード）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo kubeadm token create</span><br></pre></td></tr></table></figure><p>CA証明書のhashも必要なので、以下のコマンドで出力させます。</p><figure class="highlight sh"><figcaption><span>terminal（マスターノード）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -pubkey -<span class="keyword">in</span> /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2&gt;/dev/null | openssl dgst -sha256 -hex | sed <span class="string">&#x27;s/^.* //&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="Kubernetesでコンテナを動かす"><a href="#Kubernetesでコンテナを動かす" class="headerlink" title="Kubernetesでコンテナを動かす"></a>Kubernetesでコンテナを動かす</h1><h2 id="yamlファイルの作成とapply"><a href="#yamlファイルの作成とapply" class="headerlink" title="yamlファイルの作成とapply"></a>yamlファイルの作成とapply</h2><p><a href="https://qiita.com/yasthon/items/6a4627f249bb7fa52eb9">Dockerが動作しているホストのHostnameを表示するNginxコンテナ</a>をお借りして、Metal-LBででロードバランシングします。</p><p>yamlは<a href="https://qiita.com/yasthon/items/c29d0b9ce34d66eab3ec#kubernetes-%E3%81%A7-%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99">こちら</a>を参考にさせて頂いております。<br>MetalLB v0.13以降はConfigMapでの設定が廃止され、Custom Resource Definitions（CRD）での設定が推奨になったようで、MetalLBの部分だけv0.13に適合するように書き換えます。</p><figure class="highlight yaml"><figcaption><span>display-hostname.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Namespace</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-prod</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">metallb.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">IPAddressPool</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pool-ips</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">metallb-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">addresses:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.210</span><span class="number">-192.168</span><span class="number">.1</span><span class="number">.215</span> <span class="comment"># 外部IPレンジ（この中から適当に外部IPが選ばれる）</span></span><br><span class="line">  <span class="attr">autoAssign:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">metallb.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">L2Advertisement</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">pool-ips</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">metallb-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ipAddressPools:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pool-ips</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service-lb</span> <span class="comment"># Service(LoadBalancer) の名前</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">nginx-prod</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">metallb.universe.tf/address-pool:</span> <span class="string">pool-ips</span> <span class="comment"># MetallbのIPプール名</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">LoadBalancer</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-service-lb</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8080</span> <span class="comment"># ServiceのIPでlistenするポート</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30080</span> <span class="comment"># nodeのIPでlistenするポート（30000-32767）</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span> <span class="comment"># 転送先(コンテナ)でlistenしているPort番号のポート</span></span><br><span class="line">  <span class="attr">selector:</span> <span class="comment"># service のselctorは、matchLabels 扱いになる</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx-pod</span> <span class="comment"># 転送先の Pod のラベル</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span> <span class="comment"># Deployment の名前(ReplicaSetの名前もこれになる)</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">nginx-prod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span> <span class="comment"># ラベルがマッチしたPodを対象とするReplicaSetの作成</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">template:</span> <span class="comment"># Pod のテンプレート</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">nginx-pod</span> <span class="comment"># Pod の名前</span></span><br><span class="line">      <span class="attr">namespace:</span> <span class="string">nginx-prod</span></span><br><span class="line">      <span class="attr">labels:</span> <span class="comment"># Pod のラベル</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx-pod</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span> <span class="comment"># コンテナの設定</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-container</span> <span class="comment"># コンテナの名前</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">yasthon/nginx-display-hostname</span> <span class="comment"># イメージの名前</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx-container</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span> <span class="comment"># コンテナのポート</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">file-hostname</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html/hostname</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">file-hostname</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/etc/hostname</span></span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://thr3a.hatenablog.com/entry/20220718/1658127951">MetalLB v0.13以降はConfigmapでの設定ができない</a></li><li><a href="https://github.com/metallb/metallb/issues/1473">Heads up: breaking changes in 0.13.x #1473</a></li></ul><p>以下のコマンドでリソースを作成します。</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># リソースの作成</span></span><br><span class="line">kubectl apply -f display-hostname.yaml</span><br></pre></td></tr></table></figure><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>色々確認していきましょう。</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ポッドの確認</span></span><br><span class="line">kubectl get pods -n nginx-prod</span><br><span class="line"><span class="comment"># 以下が表示される</span></span><br><span class="line">NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment-5bd979fdf9-dftnr   1/1     Running   0          92s</span><br><span class="line">nginx-deployment-5bd979fdf9-m9b58   1/1     Running   0          92s</span><br><span class="line"></span><br><span class="line"><span class="comment"># デプロイメントの確認</span></span><br><span class="line">kubectl get deployment -n nginx-prod</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">NAME               READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">nginx-deployment   2/2     2            2           23m</span><br><span class="line"></span><br><span class="line"><span class="comment"># ReplicaSetの確認</span></span><br><span class="line">kubectl get replicaset -n nginx-prod</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">NAME                          DESIRED   CURRENT   READY   AGE</span><br><span class="line">nginx-deployment-5bd979fdf9   2         2         2       23m</span><br></pre></td></tr></table></figure><p>ちゃんと2つ立ち上がってます🙌</p><p>サービスを見ることでロードバランサーの外部IPを取得し、アクセスしてみましょう。</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">kubectl get svc -n nginx-prod</span><br><span class="line"><span class="comment"># 以下が表示される</span></span><br><span class="line">NAME               TYPE           CLUSTER-IP     EXTERNAL-IP     PORT(S)          AGE</span><br><span class="line">nginx-service-lb   LoadBalancer   10.101.40.46   192.168.1.210   8080:30080/TCP   3m26s</span><br><span class="line"><span class="comment"># 外部IPへアクセスしてみる</span></span><br><span class="line"><span class="comment"># ポート番号の入力を忘れないように注意する。</span></span><br><span class="line">curl 192.168.1.210:8080/index.sh</span><br><span class="line"><span class="comment"># work02が表示される。</span></span><br><span class="line">&lt;html&gt;&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">&lt;title&gt;work02&lt;/title&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-type&quot;</span> content=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line">HOSTNAME : work02</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"><span class="comment"># もう一度アクセスしてみる</span></span><br><span class="line">curl 192.168.1.210:8080/index.sh</span><br><span class="line"><span class="comment"># 今度はwork01が表示される</span></span><br><span class="line">&lt;html&gt;&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">&lt;title&gt;work01&lt;/title&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-type&quot;</span> content=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line">HOSTNAME : work01</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>アクセスするたびに接続先が変わっていることから、ロードバランシングされていることが見受けられます。<br>同じネットワーク内につながっているPCであれば、ブラウザから上記アドレスへアクセスすることも可能です。</p><h2 id="可用性を体感する"><a href="#可用性を体感する" class="headerlink" title="可用性を体感する"></a>可用性を体感する</h2><p><a href="https://qiita.com/yasthon/items/c29d0b9ce34d66eab3ec#kubernetes-%E3%81%A7-%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99">こちら</a>の記事同様、ワーカーを物理的に落としても外部IPへアクセスできることを確認します。<br>ワーカーノード①に接続されたLANケーブルを抜いてアクセスしてみます。</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl 192.168.1.210:8080/index.sh</span><br><span class="line"><span class="comment"># ワーカーノード②に繋がる</span></span><br><span class="line">&lt;html&gt;&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">&lt;title&gt;work02&lt;/title&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-type&quot;</span> content=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line">HOSTNAME : work02</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>次に、ワーカーノード①を繋ぎ直し、ワーカーノード②に接続されたLANケーブルを抜いてアクセスしてみます。<br>（ワーカーノード①を繋いでから接続できるようになるまで少し時間がかかります。）</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl 192.168.1.210:8080/index.sh</span><br><span class="line"><span class="comment"># ワーカーノード①に繋がる</span></span><br><span class="line">&lt;html&gt;&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">&lt;title&gt;work01&lt;/title&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-type&quot;</span> content=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line">HOSTNAME : work01</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>このように、どちらかのワーカーが落ちても外部IPアドレスにアクセスすることができ、可用性を体感することができました。<br>ロードバランサー自体はアクセス先を2つのワーカーに振り分けることで負荷を分散させる役割を持っていますが、このようにアクセス可能なワーカーのみに振り分けることも可能です。</p><p>最後に2つのワーカーノードの接続を外してみます。</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl 192.168.1.210:8080/index.sh</span><br><span class="line"><span class="comment"># 繋がらない</span></span><br><span class="line">curl: (7) Failed to connect to 192.168.1.210 port 8080: No route to host</span><br></pre></td></tr></table></figure><p>当然ですが、アクセスできないことが確認できます。</p><h2 id="再起動してみる"><a href="#再起動してみる" class="headerlink" title="再起動してみる"></a>再起動してみる</h2><p>クラスターを止めずに全ノード再起動して、再度確認してみます。</p><figure class="highlight sh"><figcaption><span>terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nodeの状態を確認する</span></span><br><span class="line">kubectl get node -A</span><br><span class="line"><span class="comment"># STATUSがReadyなことが確認できる</span></span><br><span class="line">NAME                STATUS   ROLES           AGE    VERSION</span><br><span class="line">mas01.example.com   Ready    control-plane   107m   v1.25.0</span><br><span class="line">work01              Ready    worker          101m   v1.25.0</span><br><span class="line">work02              Ready    worker          101m   v1.25.0</span><br><span class="line"><span class="comment"># コンテナの情報を見てみる</span></span><br><span class="line">kubectl get all -n nginx-prod</span><br><span class="line"><span class="comment"># コンテナが動いていることが確認できる</span></span><br><span class="line">NAME                                    READY   STATUS    RESTARTS      AGE</span><br><span class="line">pod/nginx-deployment-5bd979fdf9-h89bh   1/1     Running   1 (13m ago)   38m</span><br><span class="line">pod/nginx-deployment-5bd979fdf9-xnltc   1/1     Running   1 (13m ago)   38m</span><br><span class="line"></span><br><span class="line">NAME                       TYPE           CLUSTER-IP     EXTERNAL-IP     PORT(S)          AGE</span><br><span class="line">service/nginx-service-lb   LoadBalancer   10.101.40.46   192.168.1.210   8080:30080/TCP   84m</span><br><span class="line"></span><br><span class="line">NAME                               READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/nginx-deployment   2/2     2            2           84m</span><br><span class="line"></span><br><span class="line">NAME                                          DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/nginx-deployment-5bd979fdf9   2         2         2       84m</span><br><span class="line"><span class="comment"># 外部IPにアクセスしてみる</span></span><br><span class="line">curl 192.168.1.210:8080/index.sh</span><br><span class="line"><span class="comment"># アクセス可能</span></span><br><span class="line">&lt;html&gt;&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">&lt;title&gt;work01&lt;/title&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-type&quot;</span> content=<span class="string">&quot;text/html;charset=UTF-8&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;&lt;body&gt;</span><br><span class="line">HOSTNAME : work01</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>このように、ラズパイ自体を再起動してもまたクラスタが立ち上がっていることが確認できます。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ラズパイを使ってKubernetesのクラスタを作成し、ロードバランシング・可用性を体感することができました。クラウド上でゴニョゴニョ行われていることに対して、物理的な構成から作ってみることで解像度が上がった気がします。また、Kubernetes周りで使われている技術（cgroup, kubeadm, kubelet, flannel, …）について調べながら進めることで、Kubernetesに対して理解が進みました。<br>今回、コンテナの構成に関しては自分で作らなかったので、次はWebアプリでも作ってデプロイしてみたいと思います。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/articles/20220822a/&quot;&gt;夏の自由研究ブログ連載2022&lt;/a&gt; の10本目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="Kubernetes" scheme="https://future-architect.github.io/tags/Kubernetes/"/>
    
    <category term="RaspberryPi" scheme="https://future-architect.github.io/tags/RaspberryPi/"/>
    
  </entry>
  
  <entry>
    <title>効率的にツイスティパズルの結果を保存する方法の探求</title>
    <link href="https://future-architect.github.io/articles/20220907a/"/>
    <id>https://future-architect.github.io/articles/20220907a/</id>
    <published>2022-09-06T15:00:00.000Z</published>
    <updated>2022-09-07T02:36:11.582Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。TIG DXユニットの王紹宇です。<br><a href="/articles/20220822a/">夏の自由研究ブログ連載2022</a>の第9本です。</p><p>2021年のクリスマスで発表した<a href="https://qiita.com/advent-calendar/2021/future">フューチャー Advent Calendar 2021</a>の記事に、<a href="https://qiita.com/wsysuper/items/be9fb7b5c660bd386129">汎用的にパズルのソルバーを実装してみた</a>話がありました。今回は、それの後編として、パズルの解をどう効率的に保存する方法についての検討です。<br>まだ完全なプログラムまでは作り出していないですが、現時点の思考を記録しておきたく、有志者の意見や指摘をいただけると助かります。</p><h2 id="前篇の振り返り"><a href="#前篇の振り返り" class="headerlink" title="前篇の振り返り"></a>前篇の振り返り</h2><p>以下は、汎用パズルのソルバーについて<a href="https://qiita.com/wsysuper/items/be9fb7b5c660bd386129">前回の記事</a>の要点を簡単にまとめます。</p><ul><li>パズルのデータ構造定義<ul><li>状態の表現<ul><li>任意のツイスティパズルを、各ピースに順序をつけて、それぞれのピースの色を1次元の配列で表現すれば、状態が表すことが可能</li></ul></li><li>操作の定義<ul><li>ツイスティパズルの1操作は、複数個のピースの入れ替わる操作で表現でき、その入れ替りが群論の置換(permutation)の概念と同様に、1次元の配列での表現が可能</li></ul></li></ul></li><li>ソルバーのアルゴリズム<ul><li>「状態Aから状態Bにどんな操作の組み合わせで辿り着けるの？」というグラフのパス探索問題にとなる</li><li>以下の探索のテクニックが応用できる<ul><li>ヒューリスティック</li><li>双方向探索</li><li>2-phase(もしくはn-phase)のゴール設定（前篇の記事に言及していないが、最短パスにこだわらない時に有効）</li></ul></li></ul></li></ul><h2 id="今回の課題"><a href="#今回の課題" class="headerlink" title="今回の課題"></a>今回の課題</h2><p>前述要約のとおりに、具体的なパズルの問題インスタンスを解くには、ブルートフォース的な探索には、CPUとメモリのコストがやや高いです。仮に全く同じ問題でも、2回目で同じような手続きを繰り返さなければならなくて、計算リソース(≒時間と電力)の浪費になりますね。<br>せっかく1回問題を解いたら、その答えを記録して、次回以降は直接にそのレコードを活用できるように、キャッシング技術が一般的にな対策として考えられます。つまり、自分あるいは他人の計算した結果をチートシートに保存しておいたら、次回以降は同じ計算が省けて、チートシートから引いたほうがもっと効率的ではないでしょうかね。</p><p>具体的に下図のように、2x2x2のルービックキューブの一つのランダムの状態（<code>OWGGYOYYROGBBWOGWRWRBRYB</code>）から初期状態（<code>WWWWOOGGRRBBOOGGRRBBYYYY</code>）に戻す操作手順はなにかという問題に、答えはたくさんあるかもしれないが、その一つは（<code>U L U2 R F&#39; U&#39; B2 U&#39; L U</code>）です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">　　 🟫⬜ 　　 　　    →    　　 ⬜⬜</span><br><span class="line">　　 🟩🟩 　　 　　    →    　　 ⬜⬜</span><br><span class="line">🟨🟫 🟨🟨 🟥🟫 🟩🟦    →    🟫🟫 🟩🟩 🟥🟥 🟦🟦</span><br><span class="line">🟦⬜ 🟫🟩 ⬜🟥 ⬜🟥    →    🟫🟫 🟩🟩 🟥🟥 🟦🟦</span><br><span class="line">　　 🟦🟥 　　 　　    →    　　 🟨🟨</span><br><span class="line">　　 🟨🟦 　　 　　    →    　　 🟨🟨</span><br></pre></td></tr></table></figure><p>そこに保全しなければならない情報は、1)問題の設定（状態の<code>OWGGYOYYROGBBWOGWRWRBRYB</code>）と2)問題の解（操作の<code>U L U2 R F&#39; U&#39; B2 U&#39; L U</code>）ですね。初期状態は固定値なので、保存する必要はありません。</p><p>ただし、そこに状態数爆発の問題があります。2x2x2のルービックキューブのすべての可能な状態の数は、<code>8! * 3^7 / 24 = 3,674,160</code> (参考<a href="https://en.wikipedia.org/wiki/Pocket_Cube">Wikipedia</a>)があります。百万レベルですが、それはまだ少ないほうです。一般的な3x3x3のルービックキューブなら、<code>8! * 3^7 * 12! / 2 * 2^11 = 43,252,003,274,489,856,000 ≒ 4.3*10^19</code>の状態数もあります。1状態とその回答のペアが仮に50バイトの容量がかかるとすると、全可能な状態に対して、2.1*10^21バイト（2.1ゼタバイト）も必要ですね。それは全インターネットのデータ総量と同じ単位になります！（CNET Japanによると、2020年全インターネットの情報量は59ゼタバイトである<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>）</p><p>つまり、ある程度の難しさを超えたパズルにおいて、可能な状態数の解を全部保存しておくことが非現実であることです。それが分かった上で、今回の課題は、限られたストレージ容量（個人PCでも、普通のサーバでも、高々数GBレベル程度）をいかに活用して、できるだけ効率的に多くのケースをカバーできる仕組みを探求することです。</p><h2 id="解決案"><a href="#解決案" class="headerlink" title="解決案"></a>解決案</h2><p>たまたま十年前の大学時代のセキュリティに関する授業に少しだけ触れた「レインボーテーブル」の概念が頭に浮かんできました。</p><h3 id="レインボーテーブル-rainbow-table-とは"><a href="#レインボーテーブル-rainbow-table-とは" class="headerlink" title="レインボーテーブル (rainbow table)とは"></a>レインボーテーブル (rainbow table)とは</h3><img src="/images/20220907a/rainbow_bridge.gif" alt="rainbow_bridge.gif" width="320" height="240" loading="lazy"><p>レインボーテーブル (rainbow table) は、ハッシュ値からパスワードをクラックする攻撃に使われているデータ構造です。Wikipediaでは、<em>ハッシュから平文を得るために使われるテクニックの一つである。特殊なテーブルを使用して表引きを行うことで、時間と空間のトレードオフを実現している</em><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>と説明しています。具体的な仕組みの紹介はWikipedia<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>に割愛しますが、以下は自分の理解したポイントをまとめます。</p><ul><li>一般的な辞書攻撃は、総当たり攻撃の結果を辞書として保存しておいたら、効率化できる（事前計算）が、事前計算の結果が膨大になるので、辞書を保存するのに記憶媒体の容量的に厳しい</li><li>レインボーテーブルは、事前計算の結果を大量のチェインに保存するが、一つのチェインに対して、頭の要素と末尾の要素、2個のみ保存すればOK、チェインの中間の要素は、コストの低い計算で復元できる</li><li>チェインは、平文とハッシュ値を交互に繰り返すの構造となる（平文1、ハッシュ値1、平文2、ハッシュ値2、……）</li><li>チェインの長さ<code>m</code>は、任意で設定可能で、m個の平文とそれらに対応するm個のハッシュ値の情報は、2個の平文のみ保存することで、ストレージの効率は<code>m</code>倍になる</li><li>平文1 → ハッシュ値1の計算はハッシュ関数で、その次のハッシュ値1 → 平文2の生成する関数は「還元関数」(reduction function) と呼ぶ</li><li>還元関数は任意で選定してもよいが、なるべく均一で、コンフリクトが少ない（ランダムの特性をもった）ほうが望ましい</li></ul><p>時間と空間のトレードオフ、または、時間と記憶域のトレードオフは、コンピュータサイエンスでよく出てくる話題ですね。<br><img src="/images/20220907a/image.png" alt="image.png" width="189" height="189" loading="lazy"><br>レインボーテーブルは、時間と空間のトレードオフの程度がパラメータで調整できることの優れたポイントだと理解しています。<br>極端にチェインの長さ<code>m</code>は1に設定すると、完全な辞書テーブルに退化し、時間効率が最大になり、空間消費量も最大です。<br>チェインの長さ<code>m</code>は、可能な状態数と同じに設定すると、それは完全なブルートフォース探索に退化し、事前の計算も不要ですし、空間もほぼ不要で、その代わりに時間の効率が一番悪いです。適切なチェインの長さ<code>m</code>を調整すれば、許容できる範囲の時間と空間のバランスが取れるでしょう。</p><p>レインボーテーブル攻撃に対して、ソルト (salt) を使うのが有効な対策で、セキュアな認証認可のフレームワークを使えば心配はないでしょう。<br>では、なぜわざわざその途方もない古い技術を紹介するのか、今回のパズルの課題にどんな関連性があるのかを説明します。</p><h3 id="パズルとの関連性"><a href="#パズルとの関連性" class="headerlink" title="パズルとの関連性"></a>パズルとの関連性</h3><p>レインボーテーブルの応用はハッシュ関数のクラックですが、ハッシュ関数の特性と似ている他の方面にも応用できるではないかと思います。</p><p>ハッシュ関数は以下の特性を持っています。</p><ol><li>ある平文から生成したハッシュ値は常に同じでなければならない（決定性）</li><li>平文からハッシュ値を求めるには手順とおりに実施すればよい（低コスト）</li><li>逆にハッシュ値から平文を推測することが難しい（原像計算困難性）</li></ol><p>上記の文脈から、「ハッシュ値」を「パズルの問題（あるばらした状態）」、「平文」を「パズルの解（操作手順）」と読み替えたら辻褄が合う感じはしませんか。</p><ol><li>パズルは、初期状態（前述2x2x2ルービックキューブの例<code>WWWWOOGGRRBBOOGGRRBBYYYY</code>）からスタートし、特定の操作手順（<code>U L U2 R F&#39; U&#39; B2 U&#39; L U</code>）を実施したら、必ず決定した状態（<code>OWGGYOYYROGBBWOGWRWRBRYB</code>）になる（決定性）</li><li>初期状態から手順とおりにシミュレートすれば、結果の状態が簡単に分かる（低コスト）</li><li>（単純なパズルは除く）あるランダムも状態から、どういう手順で復元できるかは単純ではない（原像計算困難性）</li></ol><p>そして、パズルを解くには、ブルートフォース的に探索する過程は、ハッシュ値から平文を探す過程と似ていますね。</p><p>その関連性を踏まえて、今回の膨大な計算結果は保存しきれない問題をレインボーテーブルの思想で解決してみましょう。</p><h3 id="パズルのレインボーテーブル"><a href="#パズルのレインボーテーブル" class="headerlink" title="パズルのレインボーテーブル"></a>パズルのレインボーテーブル</h3><p>2x2x2のルービックキューブを例とします。<br>3,674,160状態を全通り計算するのに、1秒10個程度で換算すれば、4日間もかかってしまうので、インクリメンタルに表を埋めていく形式を採用しましょう。つまり、あるランダムの状態が与えられたら、まずはレインボーテーブルを引いて、あたったら終了、なければ従来の探索計算を実施し、その結果をレインボーテーブルに記録します。</p><p>チェインの長さ<code>m</code>を適当に1000と設定すると、チェイン間の衝突がほぼない理想の場合、<code>3674160 / 1000 ≒ 3674</code>個のチェインならほとんどのケースはカバーできます。</p><p>分かりやすいように、一般的なハッシュ値を保存するレインボーテーブルの1つのチェインが下記のような平文とハッシュ値を交互に繰り返す構造です。実際に保存された値は(平文1, 平文1001)のペアのみです。レインボーテーブルは多数のチェイン（平文の頭と末尾のペア）から構成します。ここの<code>H()</code>は、ハッシュ関数で、<code>R_x()</code>は還元関数のx個目です。還元関数は予め設定する必要がありますが（後述あり）、簡単に「チェイン構造を維持するため、ハッシュ関数から他の無関係の平文にマッピングする関数である」と理解すれば良いです。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">平文1</span><br><span class="line">  ↓ H()</span><br><span class="line">ハッシュ値1</span><br><span class="line">  ↓ R_1()</span><br><span class="line">平文2</span><br><span class="line">  ↓ H()</span><br><span class="line">ハッシュ値2</span><br><span class="line">  ↓ R_2()</span><br><span class="line">(...省略...)</span><br><span class="line">  ↓ h()</span><br><span class="line">ハッシュ値999</span><br><span class="line">  ↓ R_999()</span><br><span class="line">平文1000</span><br><span class="line">  ↓ h()</span><br><span class="line">ハッシュ値1000</span><br><span class="line">  ↓ R_1000()</span><br><span class="line">平文1001</span><br></pre></td></tr></table></figure><p>同じように、2x2x2ルービックキューブのレインボーテーブルのチェインの1つは下のような「操作手順」と「状態」なります。保存された要素は、頭操作の<code>U L U2 R F&#39; U&#39; B2 U&#39; L U</code>と末尾操作の<code>L U L U&#39; F&#39; D B&#39; L F&#39; U</code>です。</p><p>ここの<code>h()</code>は、パズルの初期状態から、与えられた操作を実施したら、その結果の状態を返す関数です。ハッシュ関数と少し似ていますね。ここの<code>r_x()</code>は、ハッシュの還元関数と同じように、あるパズル状態からある実施手順に逆方向のマッピングする関数です。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">U L U2 R F&#x27; U&#x27; B2 U&#x27; L U</span><br><span class="line">  ↓ h()</span><br><span class="line">OWGGYOYYROGBBWOGWRWRBRYB</span><br><span class="line">  ↓ r_1()</span><br><span class="line">U L&#x27; U2 R&#x27; U&#x27; L F&#x27; U F&#x27; U</span><br><span class="line">  ↓ h()</span><br><span class="line">ROWGWGROYGWBOWOYRYGBBBYR</span><br><span class="line">  ↓ r_2()</span><br><span class="line">(...省略...)</span><br><span class="line">  ↓ h()</span><br><span class="line">ORWOGRBWBWGYORBYGOWBYRYG</span><br><span class="line">  ↓ r_999()</span><br><span class="line">L F U2 L2 F2 D F&#x27; L2 B D</span><br><span class="line">  ↓ h()</span><br><span class="line">OBBGYOWOYRYBGBRRYGORWGWW</span><br><span class="line">  ↓ r_1000()</span><br><span class="line">L U L U&#x27; F&#x27; D B&#x27; L F&#x27; U</span><br></pre></td></tr></table></figure><p>例えば、ある問題状態のインスタンス<code>ORWOGRBWBWGYORBYGOWBYRYG</code>の操作手順を探したい場合、</p><ol><li>まずは、結果は今のチェインにあるかどうかを判断する（すべてのチェインに対しての並行でチェック可能）<ol><li><code>ORWOGRBWBWGYORBYGOWBYRYG</code>に<code>r_1000()</code>をアプライして、その結果がチェイン末尾と一致するか？→一致しないので続ける</li><li><code>ORWOGRBWBWGYORBYGOWBYRYG</code>に順に<code>r_999()</code>, <code>h()</code>, <code>r_1000()</code>をアプライして、その結果がチェイン末尾と一致するか？→<code>L U L U&#39; F&#39; D B&#39; L F&#39; U</code>と一致しているので、今のチェインにあると判断できる</li><li>もし上のステップで一致しなければ、順に<code>r_998()</code>, <code>h()</code>, <code>r_999()</code>, <code>h()</code>, <code>r_1000()</code>をアプライしてチェックし続ける （以降省略）</li></ol></li><li>今のチェインにあることを判明できたら、チェインの頭から<code>h()</code>, <code>r_1()</code>, <code>h()</code>, <code>r_2()</code>, …を相互にアプライし、探す対象のインスタンス<code>ORWOGRBWBWGYORBYGOWBYRYG</code>が見つかるまで実施する。それの1個前の操作手順は最終の答えである</li></ol><h3 id="還元関数の選定"><a href="#還元関数の選定" class="headerlink" title="還元関数の選定"></a>還元関数の選定</h3><p>簡単なバージョンの還元関数は、全体で1個だけでも良いですが、データ量が多くなると、衝突する可能性が極めて高くなります。（誕生日のパラドックス<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>）。例えば、違う2つのチェインの中間要素は、値が被ったら、それ以降のチェインの値が全部同じの値になってしまい、無駄が生じます。ご覧のとおり、それを解決する方法は、複数個の還元関数を用意して、違う場所のコンフリクトは生じても、それ以降の完全重複は避けられます。</p><p>衝突をなるべく減らし、分散性の良い関数が理想的です。既存のハッシュ関数（例えばSHA256）を生かして、その特性が満たせるかなと思います。例えば、<code>ORWOGRBWBWGYORBYGOWBYRYG</code>のSHA256が<code>3bca01cb074b9d8fba2b2145c7de945df8d4be29cee1c8397d0413576c9f5654</code>で、それをある長さでちょん切って、<code>3bca01</code>, <code>cb074b9</code>, <code>d8fba2</code>, …になります。それぞれ<code>mod n</code>で具体の操作手順にマッピングすれば良いでしょう。（<code>n</code>は可能な操作の数）</p><p>異なるバージョンの還元関数<code>r_1</code>, <code>r_2</code>, …の取得も簡単で、単純に状態文字列の末尾になにかを加えたら、SHA256の結果がだいぶ違ってきますね（ハッシュ関数の特性）。<code>ORWOGRBWBWGYORBYGOWBYRYG1</code>や<code>ORWOGRBWBWGYORBYGOWBYRYG2</code>, …のSHA256の生成からスタートで良いでしょう。</p><p>もちろん、生成された手順が冗長したりするケースがあるので、それを集約化標準化する必要があります。例えば、<code>LL</code>が生成されたら、<code>L2</code>に、<code>UUU</code>が生成されたら<code>U&#39;</code>に変換し、<code>R&#39;R</code>や<code>DDDD</code>が生成されたら相殺します。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>もともとパスワードをクラックするブラックな技術であるが、レインボーテーブルの時間と空間のトレードオフの思想は、他の方面にも貴重な価値があると思います。<br>見た目関係ない領域（セキュリティとパズルソルバーの性能改善）でもつながりができて、過去勉強した知識を大事にしなければならなくて、いざに他の領域にも活躍できるかもしれません。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://japan.cnet.com/article/35153665/">2020年の世界データ総量は59ゼタバイト、COVID-19対策でビデオ会議と映像配信が増加</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://ja.wikipedia.org/wiki/%E3%83%AC%E3%82%A4%E3%83%B3%E3%83%9C%E3%83%BC%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB">Wikipedia: レインボーテーブル</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;"><a href="https://ja.wikipedia.org/wiki/%E8%AA%95%E7%94%9F%E6%97%A5%E3%81%AE%E3%83%91%E3%83%A9%E3%83%89%E3%83%83%E3%82%AF%E3%82%B9">Wikipedia: 誕生日のパラドックス</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;こんにちは。TIG DXユニットの王紹宇です。&lt;br&gt;&lt;a href=&quot;/articles/20220822a/&quot;&gt;夏の自由研究ブログ連載2022&lt;/a&gt;の第9本です。&lt;/p&gt;
&lt;p&gt;2021年のクリスマスで発表した&lt;a</summary>
        
      
    
    
    
    <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
    <category term="アルゴリズム" scheme="https://future-architect.github.io/tags/%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0/"/>
    
    <category term="データ構造" scheme="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0/"/>
    
    <category term="パズル" scheme="https://future-architect.github.io/tags/%E3%83%91%E3%82%BA%E3%83%AB/"/>
    
    <category term="レインボーテーブル" scheme="https://future-architect.github.io/tags/%E3%83%AC%E3%82%A4%E3%83%B3%E3%83%9C%E3%83%BC%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB/"/>
    
    <category term="Security" scheme="https://future-architect.github.io/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>DynamoDB利用時の書き込みスキュー（Write Skew）の回避</title>
    <link href="https://future-architect.github.io/articles/20220906a/"/>
    <id>https://future-architect.github.io/articles/20220906a/</id>
    <published>2022-09-05T15:00:00.000Z</published>
    <updated>2022-09-06T03:31:13.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>一般的に複数のトランザクションが並行して同じオブジェクトに対してアクセスを行う場合には、トランザクションの分離レベル（SERIALIZABLE&#x2F;REPEATABLE READ&#x2F;READ COMMITTED&#x2F;READ UNCOMMITTED）によって様々な問題が発生します。</p><p>DynamoDBは2018年に<a href="https://aws.amazon.com/jp/blogs/aws/new-amazon-dynamodb-transactions/">トランザクションがサポート</a>されましたが、本記事ではファントムリードによる書き込みスキューの問題とその対応について取り上げたいと思います。</p><h2 id="書き込みスキューとは"><a href="#書き込みスキューとは" class="headerlink" title="書き込みスキューとは"></a>書き込みスキューとは</h2><p>まずはじめに、「書き込みスキュー」とは具体的にどのような問題なのか、まず例を見てみるのが一番わかりやすいでしょう。</p><h3 id="書き込みスキューの例"><a href="#書き込みスキューの例" class="headerlink" title="書き込みスキューの例"></a>書き込みスキューの例</h3><p>ここではイベントの申し込みシステムを考えてみましょう。<br>要件としてイベントの申し込み人数の上限は3人であると仮定します。<br>これを実現するためには、ユーザが申し込みの要求を行なった際に現在の申し込み人数を取得し、3人未満であれば登録を行う、3人以上であればエラーを返却する、という形になります。</p><p>問題が起きるのは下記の図のようにユーザAとユーザBが同時に申し込みを行なった場合となります。<br>1-1 及び 2-1 の処理にて現在の申し込み人数を取得する場合、両方の結果は2人となり、ユーザAもユーザBも登録が正常に完了してしまいます。<br>しかしながら結果として申し込み人数は4人となってしまうため、これは要件を満たしていません。</p><img src="/images/20220906a/DynamoDB_Write_Skew_Example_1.drawio.png" alt="DynamoDB_Write_Skew_Example_1.drawio" width="1101" height="341" loading="lazy"><p>このように、あるトランザクションにおける書き込みの結果が別のトランザクションの読み込み結果を変化させる（今回の場合はユーザAの書き込みによって、ユーザBの検索結果が過去のものになってしまっている）効果は<strong>ファントムリード</strong>と呼ばれ、このように読み込んだ結果を元に書き込みを行なう場合に生じる問題を<strong>書き込みスキュー</strong>と呼びます。</p><p>書き込みスキューが発生する他の例としては以下のようなケースが考えられます。</p><ul><li><p><strong>ユニークなユーザ名の要求</strong><br>ユーザが自由にユーザ名を決定できるシステムにおいて、既に利用されているユーザ名のチェックを行う場合に同様の問題が発生し得ます。</p></li><li><p><strong>二重支払いの防止</strong><br>ユーザがポイントを利用してアイテムを購入するようなシステムにおいて、ユーザのポイントの収支をリストアップしてマイナスにならないことを確認する場合に同様の問題が発生し得ます。</p></li></ul><h3 id="書き込みスキューの発生条件"><a href="#書き込みスキューの発生条件" class="headerlink" title="書き込みスキューの発生条件"></a>書き込みスキューの発生条件</h3><p>書き込みスキューは一般的に以下の条件で発生します。</p><ol><li>データベースからデータを読み込み、特定の要求が満たされているかを確認する。</li><li>1の結果に応じて処理を中断するか、継続するか判断を行う。</li><li>処理を継続する場合にデータベースに書き込みを行い、書き込みによって1の結果が変化し得る。</li></ol><h2 id="DynamoDBにおける対応策"><a href="#DynamoDBにおける対応策" class="headerlink" title="DynamoDBにおける対応策"></a>DynamoDBにおける対応策</h2><p>まず前提としてお伝えしておきたいのが、DynamoDBのトランザクション機能はこの書き込みスキューを回避するために利用できるものではありません。<br>（後述するように副次的に利用するケースはあります。）</p><p>一般的に書き込みスキューはトランザクション分離レベルがSERIALIZABLE（直列化可能）なら回避可能であり、DynamoDBのトランザクションについて調べると、<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/transaction-apis.html#transaction-isolation">トランザクション分離レベルはSERIALIZABLE</a>となっています。<br>しかしながら、間違ってもドキュメントだけを読んで、これで大丈夫だと思わないようにしてください。</p><p>DynamoDBにおけるトランザクションは<code>TransactGetItems</code>や<code>TransactWriteItems</code>といったDynamoDBに対するオペレーションの単位で制御される（ACIDを保証する）ものであり、RDBのようにトランザクションの開始（BEGIN）と終了（COMMIT&#x2F;ROLLBACK）をアプリケーションのレイヤで制御できるものではありません。したがってテーブルロックや行ロックを取得するということもできません。</p><p>DynamoDBが提供するトランザクションに依存しない方法で対応を考えていく必要があります。</p><h3 id="対応案1-集計・集約処理の直列化"><a href="#対応案1-集計・集約処理の直列化" class="headerlink" title="対応案1: 集計・集約処理の直列化"></a>対応案1: 集計・集約処理の直列化</h3><p>対応案のひとつとして、集計・集約処理（今回の例の場合、申し込み人数が3人を超過しているかどうかのチェック）を直列化する方法が挙げられます。<br>例えばDynamoDB Streamsを利用することで、パーティション単位に、データの変更の発生順に処理を直列化して、非同期実行することができます。</p><img src="/images/20220906a/DynamoDB_Write_Skew_Example_2.drawio.png" alt="DynamoDB_Write_Skew_Example_2.drawio.png" width="1101" height="341" loading="lazy"><ol><li>ユーザからの申し込み要求に対して、まず一時登録用のテーブルにデータの書き込みを行います<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。<br>ユーザから見るとこれは仮登録状態となります。</li><li>DynamoDB Streamsをトリガーに実行されたLambdaの処理として Statusが <code>accepted</code>（受付完了）であるレコードの件数を取得します。</li><li>取得した件数が3件未満の場合は対象のレコードの Status を <code>accepted</code>（受付完了）として本テーブルに登録し、3件以上の場合は Statusを <code>rejected</code>（受付不可）として本登録用のテーブルに登録を行います<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</li></ol><p>このように、DynamoDB Streamなどを利用して、集計・集約処理を別のワークロードで非同期に直列化して実行するような処理方式は、DynamoDBの使い方にマッチしています。<br>もちろん要件によっては（特に購入処理などお金に絡む場合は）ユーザからの要求に応じて同期的に集計・集約処理を行う必要があり、このような処理方式を適用できない可能性があります。</p><p>そのような場合は次に紹介するような対応が考えられます。</p><h3 id="対応案2-Conditional-Update-による擬似的な直列化"><a href="#対応案2-Conditional-Update-による擬似的な直列化" class="headerlink" title="対応案2: Conditional Update による擬似的な直列化"></a>対応案2: Conditional Update による擬似的な直列化</h3><p>DynamoDBは<a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.ConditionExpressions.html">Conditional Update（条件付きの書き込み）</a>を利用することで、楽観的排他制御を実現し、書き込み処理を擬似的に直列化することができます。<br>ただし今回のように特定の条件を満たす行が<strong>存在しないこと</strong>が条件となっていて、書き込みによってその条件を満たす行が<strong>追加</strong>されるケースにおいては、そもそも楽観ロック対象となるレコードが存在しないため、単純に Conditional Update を適用することができません。</p><p>以下、具体的な方法について説明します。</p><h4 id="1-テーブル構造を変更してロック対象を実体化させる"><a href="#1-テーブル構造を変更してロック対象を実体化させる" class="headerlink" title="1. テーブル構造を変更してロック対象を実体化させる"></a>1. テーブル構造を変更してロック対象を実体化させる</h4><p>ロック対象を実体化させるために下記のようにテーブルの構造を変更し、Event IDをハッシュキーとしてユーザを配列で保持し、楽観ロック用にバージョンを保持します。<br>また、ここでの話の本質ではありませんが、合わせて現在の申込者数（Count）も保持しておきます。</p><img src="/images/20220906a/DynamoDB_Write_Skew_Example_3.drawio.png" alt="DynamoDB_Write_Skew_Example_3.drawio.png" width="1081" height="211" loading="lazy"><p>これによりConditional Updateを利用して書き込みスキューを回避することができます。<br>具体的な処理の流れは下記のとおりとなります。</p><img src="/images/20220906a/DynamoDB_Write_Skew_Example_4.drawio.png" alt="DynamoDB_Write_Skew_Example_4.drawio.png" width="1101" height="341" loading="lazy"><ol><li>ユーザからの申し込み要求が行われた場合に、テーブルから対象イベント（EVENT01）のレコードを取得します。<br>このときDynamoDBの<a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html">Consistent Read</a>を利用して、 一貫性のあるデータの読み取りを行う必要があります。これを行わないと最新の書き込みデータを読み込むことが保証できず、楽観的排他制御を正しく実現することができません。</li><li>レコードが存在しない、または申込者数（Count）が3件未満の場合は処理を継続し、3件以上の場合はエラーを返却します。</li><li>処理を継続する場合は、各カラムの値を設定して Conditional Update を行います。<br>ここでの条件は <strong>「キー（Event ID: EVENT01）が存在しない」</strong> または <strong>「キー（Event ID: EVENT01）が存在し、Versionカラムの値が <code>1</code> である」</strong> ことになります。<br>キーが存在しない場合の条件が必要なのは、1人目の申し込み時はイベントのレコード自体が存在しないことへの対応です。</li></ol><p>ユーザBが書き込みを行うタイミングでは、更新対象のレコードのバージョンは <code>2</code> となっているため、条件に合致せず更新処理が失敗する形になります。</p><p>このようにテーブルの構造を変更することが可能な場合は、書き込みスキューに対する有効な対応策となります。<br>一方で、要件上、元のテーブルの構造を変更することができないケースも往々にしてあるでしょう。例えば今回のケースでいうと、ユーザをキーとしたGSIを設定することで、ユーザ単位で申し込みをしているイベントの一覧を取得したいケースなどが考えられます。</p><p>そのような場合は次に紹介するような対応が考えられます。</p><h4 id="2-テーブルを追加してロック対象を実体化させる"><a href="#2-テーブルを追加してロック対象を実体化させる" class="headerlink" title="2. テーブルを追加してロック対象を実体化させる"></a>2. テーブルを追加してロック対象を実体化させる</h4><p>テーブル構造を変更できない場合は、テーブルを追加することでロック対象を実体化させます。</p><img src="/images/20220906a/DynamoDB_Write_Skew_Example_5.drawio.png" alt="DynamoDB_Write_Skew_Example_5.drawio.png" width="1081" height="211" loading="lazy"><p>処理の流れは先述の「テーブル構造を変更してロック対象を実体化させる」場合と基本的に同様ですが、書き込み時は <code>TransactWriteItems</code> を利用して、2テーブルをAtomicに更新する必要があります。<br>冒頭でトランザクションを「副次的に利用するケースがある」と述べたのはこの件になります。</p><h4 id="3-レコードを事前に追加してロック対象を実体化させる"><a href="#3-レコードを事前に追加してロック対象を実体化させる" class="headerlink" title="3. レコードを事前に追加してロック対象を実体化させる"></a>3. レコードを事前に追加してロック対象を実体化させる</h4><p>別の方法として事前にロック対象となるレコードを全て作成しておくという方法も考えられます。<br>例えば新規イベントの作成時など、ユーザの申し込みに先行する形で上限数となる3レコードを作成しておき、ユーザの要求に対してはConditional Updateで楽観的排他制御を実現する方法になります。</p><img src="/images/20220906a/DynamoDB_Write_Skew_Example_6.drawio.png" alt="DynamoDB_Write_Skew_Example_6.drawio.png" width="1081" height="241" loading="lazy"><p>今回のケースではレンジキーにシーケンスなどを利用せざるを得ないため、アプリケーションからの取り扱いが少し煩雑になりそうですが、例えば時間単位の会議室の予約システムなどレコードの総量とキーが事前に確定しているようなケースではマッチする可能性があります。</p><h2 id="どの対応策が良いか"><a href="#どの対応策が良いか" class="headerlink" title="どの対応策が良いか"></a>どの対応策が良いか</h2><p>ここまでみてきた通り、要件次第で取り得る対応が変わるため、一概にこれが優れているということはできません。</p><p>しかしながら参照要件が満たせるのであれば、対応案2の「Conditional Updateによる擬似的な直列化」の中でも「1. テーブル構造を変更してロック対象を実体化させる」方式が最も開発コストを抑えられるでしょう。<br>一方で、システム全体としてDynamoDB Streamsを積極的に活用しており、要件として集計・集約処理を非同期処理に逃がせるのであれば、対応案1の「集計・集約処理の直列化」が自然とマッチするかもしれません。</p><p>上記の対応で要件が満たせない場合には「テーブル追加によるロック対象の実体化」や「レコードの事前追加によるロック対象の実体化」を検討していくと良いのではないかと思います。</p><p>もし書き込みスキューの問題が頻繁に発生する場合は、根本的にDynamoDBの利用自体が適していない可能性があり、RDBを検討した方が良いかもしれません。</p><p>システムやチームの状況に応じて最適な処理方式を検討していただければと思います。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">この段階で申し込み件数のチェックを実施することは、データを保証するという観点では有効ではありませんが、早期にエラーを返却できるためユーザビリティの観点では有効です。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">一時登録用のテーブルと本登録用のテーブルは同一テーブルでも構いません。ただしその場合は、本登録用のテーブルのUPDATEを行った際にもDynamoDB StreamsをトリガーとしてLambdaが発火するため、コンピューティングリソースが不要に消費されます。一方で、ユーザの現在の登録状態を取得するのに1テーブルの参照で済むため、実装上のメリットが大きくなるケースもあります。</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
    <category term="設計" scheme="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/"/>
    
    <category term="DynamoDB" scheme="https://future-architect.github.io/tags/DynamoDB/"/>
    
    <category term="Transaction" scheme="https://future-architect.github.io/tags/Transaction/"/>
    
  </entry>
  
</feed>
