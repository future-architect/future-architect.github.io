<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Future Tech Blog - フューチャーアーキテクト</title>
  
  <subtitle>フューチャー開発者ブログ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2019-11-11T02:19:21.064Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go Cloud#1 概要とBlobへの活用方法</title>
    <link href="https://future-architect.github.io/articles/20191111/"/>
    <id>https://future-architect.github.io/articles/20191111/</id>
    <published>2019-11-11T02:15:01.000Z</published>
    <updated>2019-11-11T02:19:21.064Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>TIG DX Unit所属の多賀です。今回は、Go Cloudシリーズとしていくつか Go Cloudに関する記事をリレー形式で書いていきたいと思います。</p><p>第一弾としては、Go Cloud についての概要と、案件でも活用した Blob を利用したサンプルについて解説します。また、認証系の情報の扱いについても記載します。</p><h2 id="Go-Cloud-とは"><a href="#Go-Cloud-とは" class="headerlink" title="Go Cloud とは"></a>Go Cloud とは</h2><p>2018/07 に Google の Go チームが立ち上げたプロジェクトで、Go アプリケーションを各クラウド間でポータブルにすることを目指して、実装されています。</p><p>昨今の開発では、マルチクラウドやハイブリッドクラウドの導入により、アプリケーションを複数のクラウドに対応させる要件がでてきています。現状では、各クラウドサービスの SDK を利用して、クラウドごとにアプリケーションコードを実装する必要がありますが、正直大変な部分もあるかと思います。</p><p>ですが、各クラウドのサービスをまとめて抽象化して、統一的なコードでアクセスできれば、ソースコードの重複を排除できて便利になりそうです。(実際、各クラウドごとに似たようなサービスは出ているので抽象化はさほど困難ではないですよね。)<br>この <strong>「各クラウドサービスに統一的なコードでアクセスする」</strong> ことを実現して、Goのアプリケーションをクラウド間でポータブルにするためのツールとして Go Cloud は開発されています。</p><p>イメージとしては、データベースアクセスがあげられるかと思います。データベースも様々な種類(MySQL,PostgreSQL,Oracle,SQLite, etc..)が存在しますが、アプリケーションとして実装する際は統一的なコードを通して、アクセスすることが多いかと思います。実際は、言語により driver interface が提供されて、各データベースごとに driver が実装されているため、この機能は実現できています。同様なことをクラウドの SDK に対して実現していきたい思惑があるのだと考えています。</p><p>実際に API の仕様設計で、データベースと似たような設計思想で作られていることが言及されていて面白かったです。(<a href="https://github.com/google/go-cloud/blob/master/internal/docs/design.md#portable-types-and-drivers" target="_blank" rel="noopener">link</a>)(個人的には、<a href="https://github.com/google/go-cloud/blob/master/internal/docs/design.md#developers-and-operators" target="_blank" rel="noopener">Developers and Operators</a>の章も面白かったのでおすすめです。)</p><p>実装は OSS で公開されております。<br><a href="https://github.com/google/go-cloud" target="_blank" rel="noopener">https://github.com/google/go-cloud</a></p><p>ドキュメントのベージは別でこちらです。<br><a href="https://gocloud.dev/" target="_blank" rel="noopener">https://gocloud.dev/</a></p><p>ここで少々余談ですが、Go Cloud は公式的な呼称は「Go CDK (Cloud Development Kit)」となっています(<a href="https://blog.golang.org/gcdk-whats-new-in-march-2019" target="_blank" rel="noopener">Blog</a>)。当シリーズ記事では、他サービスとの命名がかぶることでググラビリティが下がることを懸念して、「Go Cloud」と統一しております。</p><h3 id="プロジェクトの状況"><a href="#プロジェクトの状況" class="headerlink" title="プロジェクトの状況"></a>プロジェクトの状況</h3><p>2019/11 現在 Alpha ステータスですが、Production Ready である旨は言及されています。(breaking change があるとの文言は 2019/02 に削除されています) (<a href="https://github.com/google/go-cloud#project-status" target="_blank" rel="noopener">link</a>)</p><h3 id="対応クラウド"><a href="#対応クラウド" class="headerlink" title="対応クラウド"></a>対応クラウド</h3><p>下記クラウドの一部サービスに対応しています。</p><ul><li>AWS</li><li>GCP</li><li>Azure</li><li>HashiCorp</li></ul><p><a href="https://blog.golang.org/go-cloud" target="_blank" rel="noopener">vendor-neutral なAPIを実装していくと言及</a>されているので、<br>対象クラウドを絞っているわけではなく、順次拡大する方針のようです。</p><h3 id="導入の検討対象"><a href="#導入の検討対象" class="headerlink" title="導入の検討対象"></a>導入の検討対象</h3><p>どういったケースで、利用を検討できるか <a href="https://blog.golang.org/gcdk-whats-new-in-march-2019" target="_blank" rel="noopener">The Go Blog</a> にて言及されている内容を引用いたします。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. You develop cloud applications locally.</span><br><span class="line">  -&gt; クラウドアプリケーションをローカルで開発</span><br><span class="line"></span><br><span class="line">2. You have on-premise applications that you want to run in the cloud (permanently, or as part of a migration).</span><br><span class="line">  -&gt; オンプレのアプリケーションをクラウド上で動かしたい</span><br><span class="line"></span><br><span class="line">3. You want portability across multiple clouds.</span><br><span class="line">  -&gt; 複数クラウド間で動作するアプリケーションを開発したい</span><br><span class="line"></span><br><span class="line">4. You are creating a new Go application that will use cloud services.</span><br><span class="line">  -&gt; クラウドが提供するサービスを利用したアプリケーションを作りたい</span><br></pre></td></tr></table></figure><p>少々、補足コメントとして私の考えを記載していきます。</p><h4 id="1-クラウドアプリケーションをローカルで開発"><a href="#1-クラウドアプリケーションをローカルで開発" class="headerlink" title="1.クラウドアプリケーションをローカルで開発"></a>1.クラウドアプリケーションをローカルで開発</h4><p>クラウドアプリケーションをローカルで開発する際に、利用するクラウドサービスへの接続に困るケースが出てくるかと思います(権限/通信 etc..)。<br>現状の解決策としては、AWS だと <a href="https://github.com/localstack/localstack" target="_blank" rel="noopener">LocalStack</a>や<a href="https://github.com/awslabs/serverless-application-model" target="_blank" rel="noopener">AWS SAM</a>, GCP だと Emulator の利用があるかと思います。これはローカル環境に実際のクラウドサービスのモックを立ち上げて、処理を実行させる解決策で、とても便利です(私もよく利用しています)。</p><p>Go Cloud ではこの課題を、「各環境に合わせて実装を差し替える」ことで解決しています。例えば、S3 からファイルを読み出すコードを実装したい場合は、ローカル環境では実際に S3 にアクセスする代わりに、ローカルのファイルシステムにアクセスさせます。ローカルのファイルシステム上にファイルを用意しておくことで、クラウド上と同一の挙動を実現できます。開発時はファイルシステム、デプロイ後は S3 アクセスとすることを、Go Cloud を間に挟むことで簡単に実現できます。(ファイルパスを <code>s3://</code> → <code>file://</code> と変える)<br>また、単体テストを実装するのにも便利そうです</p><h4 id="2-オンプレのアプリケーションをクラウド上で動かしたい"><a href="#2-オンプレのアプリケーションをクラウド上で動かしたい" class="headerlink" title="2.オンプレのアプリケーションをクラウド上で動かしたい"></a>2.オンプレのアプリケーションをクラウド上で動かしたい</h4><p>オンプレでのアプリケーションの実装を Go Cloud での実装に差し替えることで、オンプレでも動作させつつ、クラウド上でも同一のコードで動作させることができます。</p><h4 id="3-複数クラウド間で動作するアプリケーションを開発したい"><a href="#3-複数クラウド間で動作するアプリケーションを開発したい" class="headerlink" title="3.複数クラウド間で動作するアプリケーションを開発したい"></a>3.複数クラウド間で動作するアプリケーションを開発したい</h4><p>マルチクラウドで実装する際に、各クラウドごとのサービスは利用しない or 各サービスの抽象化レイアーを自作して実装等が考えられるかと思います。後者の抽象化レイアーを自作部分を Go Cloud が担ってくれることで、AWS 上では DynamoDB, GCP 上では Firestore, オンプレでは MongoDB といった使い分けも実現することができます。</p><h4 id="4-クラウドが提供するサービスを利用したアプリケーションを作りたい"><a href="#4-クラウドが提供するサービスを利用したアプリケーションを作りたい" class="headerlink" title="4.クラウドが提供するサービスを利用したアプリケーションを作りたい"></a>4.クラウドが提供するサービスを利用したアプリケーションを作りたい</h4><p>3 と少し異なり、動作させる環境は AWS 上ですが、アプリケーションの挙動内で各クラウドへ接続するケースでも利用できます。例としてはアプリケーション内で、S3/GCS/Azure Storage へアクセスしてファイルを取得する必要がある場合があげられます。<br>私の案件での導入はこの例のケースで、各 Blob システムに対してのアクセスをシンプルに実装したいと考えて利用しています。</p><h3 id="用語"><a href="#用語" class="headerlink" title="用語"></a>用語</h3><p>下記の実装の説明で、用語が出てくるため補足しておきます。</p><h4 id="driver"><a href="#driver" class="headerlink" title="driver"></a>driver</h4><p>driver interface としてGo Cloud上で定義されています(例: <a href="https://github.com/google/go-cloud/blob/master/blob/driver/driver.go#L224" target="_blank" rel="noopener">blob driver</a>)。各クラウド SDK ごとに driver の実装をします。(データベースと同様ですね)<br>driverの実装も、現状は合わせて Go Cloud上で行われています。 (<a href="https://github.com/google/go-cloud/blob/master/blob/s3blob/s3blob.go" target="_blank" rel="noopener">s3 driver実装</a>)</p><h4 id="portable-type"><a href="#portable-type" class="headerlink" title="portable type"></a>portable type</h4><p>ユーザーが実際に利用する API で、concrete type(interface ではない)が返却されます。</p><p>driver interface を利用して、共通の API が実装されています。driver interface を直接ユーザーに公開せず、共通的な実装を driver-user 間にいれたいため、このような形になっています。</p><p>また concrete type 利用の理由は、共通実装が interface の場合は重複してしまう(各 driver ごとに複製の実装が必要)ため、スケールしないためと記載されています。<br>(<a href="https://github.com/google/go-cloud/blob/master/internal/docs/design.md#portable-types-and-drivers" target="_blank" rel="noopener">Desing Doc 参照</a>)</p><h2 id="Blob-での活用"><a href="#Blob-での活用" class="headerlink" title="Blob での活用"></a>Blob での活用</h2><p>Blob Storage での活用方法について、記載していきます。</p><h3 id="サポート済みサービス"><a href="#サポート済みサービス" class="headerlink" title="サポート済みサービス"></a>サポート済みサービス</h3><ul><li>Amazon Simple Storage Service(S3)</li><li>Google Cloud Storage(GCS)</li><li>Azure Blob Storage</li><li>ローカルファイルシステム</li><li>オンメモリ</li></ul><h3 id="サンプル実装"><a href="#サンプル実装" class="headerlink" title="サンプル実装"></a>サンプル実装</h3><p>Blob(S3)から指定した key のファイルを取得するサンプルです。</p><p><code>blob.OpenBucket()</code> を呼び出して、 <code>Bucket</code> オブジェクトを取得して、オブジェクトのメソッドを通して、各種処理を実行します。 <code>Bucket</code> オブジェクトから <code>NewReader()</code>/<code>NewWriter()</code> を呼び出すことで、 <code>io.Reader</code>/<code>io.Writer</code> インターフェイスを得ることもできます。 (<a href="https://godoc.org/gocloud.dev/blob#Bucket" target="_blank" rel="noopener">blob - GoDoc</a>)</p><p>main.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"gocloud.dev/blob"</span></span><br><span class="line"><span class="comment">// 対象の driver を blank import する</span></span><br><span class="line">_ <span class="string">"gocloud.dev/blob/s3blob"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkBlobFileContent</span><span class="params">(bucketURL, key <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line"> bucket, err := blob.OpenBucket(context.Background(), bucketURL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> bucket.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// blob から 指定した key の content を取得</span></span><br><span class="line">b, err := bucket.ReadAll(context.Background(), key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(b), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">content, err := checkBlobFileContent(<span class="string">"s3://future-example"</span>, <span class="string">"hoge.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(content)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>サンプルを見ていただいたとおり、 <code>OpenBucket()</code> 呼び出し時には特に S3 固有の処理を実行していません。</p><p>Go Cloud 側でクラウドサービスごとに実装を切り替えているのですが、実際の切り替えソースとしては URL Schema が利用されています。</p><p>少し脱線しますが、実装の切替方法としては下記の通りになっています。</p><ol><li>対象の driver (s3blob) を blank import</li><li>driver 内の init 関数で Schema が defaultURLMux に登録 (<a href="https://github.com/google/go-cloud/blob/master/blob/s3blob/s3blob.go#L85" target="_blank" rel="noopener">src</a>)</li><li>s3 の Schema は default で <code>s3</code> が定義されている (<a href="https://github.com/google/go-cloud/blob/master/blob/s3blob/s3blob.go#L121" target="_blank" rel="noopener">src</a>)</li><li>OpenBucket 内で defaultURLMux を利用して、Bucket オブジェクト生成 (<a href="https://github.com/google/go-cloud/blob/master/blob/blob.go#L1085" target="_blank" rel="noopener">src</a>)</li></ol><p>そのため blank import がないと、切り替え対象がないエラーになってしまうので注意です。</p><h4 id="テストコード"><a href="#テストコード" class="headerlink" title="テストコード"></a>テストコード</h4><p>動作確認したかったため、テストコードを実装しました。</p><p>テストでは S3 に接続したくなかったため、ローカルファイルシステムを利用しています。</p><p>先程とは違い、<code>fileblob</code> を blank import しています。</p><p>hoge.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SUCCESS!!!</span><br></pre></td></tr></table></figure><p>main_test.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line">_ <span class="string">"gocloud.dev/blob/fileblob"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test_checkBlobFileContent</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">pwd, err := os.Getwd()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> args <span class="keyword">struct</span> &#123;</span><br><span class="line">bucketURL <span class="keyword">string</span></span><br><span class="line">key       <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line">tests := []<span class="keyword">struct</span> &#123;</span><br><span class="line">name    <span class="keyword">string</span></span><br><span class="line">args    args</span><br><span class="line">want    <span class="keyword">string</span></span><br><span class="line">wantErr <span class="keyword">bool</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;</span><br><span class="line">name: <span class="string">"local storage test"</span>,</span><br><span class="line">args: args&#123;</span><br><span class="line">bucketURL: fmt.Sprintf(<span class="string">"file:///%v"</span>, pwd),</span><br><span class="line">key:       <span class="string">"hoge.txt"</span>,</span><br><span class="line">&#125;,</span><br><span class="line">want:    <span class="string">"SUCCESS!!!"</span>,</span><br><span class="line">wantErr: <span class="literal">false</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, tt := <span class="keyword">range</span> tests &#123;</span><br><span class="line">t.Run(tt.name, <span class="function"><span class="keyword">func</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">got, err := checkBlobFileContent(tt.args.bucketURL, tt.args.key)</span><br><span class="line"><span class="keyword">if</span> (err != <span class="literal">nil</span>) != tt.wantErr &#123;</span><br><span class="line">t.Errorf(<span class="string">"checkBlobFileContent() error = %v, wantErr %v"</span>, err, tt.wantErr)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> got != tt.want &#123;</span><br><span class="line">t.Errorf(<span class="string">"checkBlobFileContent() = %v, want %v"</span>, got, tt.want)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>テスト結果</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v .</span><br><span class="line">=== RUN   Test_checkBlobFileContent</span><br><span class="line">=== RUN   Test_checkBlobFileContent/local_storage_test</span><br><span class="line">--- PASS: Test_checkBlobFileContent (0.00s)</span><br><span class="line">    --- PASS: Test_checkBlobFileContent/local_storage_test (0.00s)</span><br><span class="line">PASS</span><br><span class="line">ok      example.com/xxxx/gocdk-blog    0.019s</span><br></pre></td></tr></table></figure><p>無事テストがパスして、ローカルファイル上のファイルが読み込めております。</p><h4 id="認証情報について"><a href="#認証情報について" class="headerlink" title="認証情報について"></a>認証情報について</h4><p><code>OpenBucket()</code> を利用することで、S3/ローカルファイルシステムを切り替えられることは説明いたしました。</p><p>ですが実運用となると、認証情報付きで扱いたいケースが多くなってきます。</p><p>その場合は、driver の実装側に認証情報付きで <code>Bucket</code> オブジェクトを生成する関数が用意されているためそちらを利用します。</p><p><a href="https://github.com/google/go-cloud/blob/master/blob/s3blob/s3blob.go#l180" target="_blank" rel="noopener">go-cloud/blob/s3blog.go</a> から引用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OpenBucket returns a *blob.Bucket backed by S3.</span></span><br><span class="line"><span class="comment">// AWS buckets are bound to a region; sess must have been created using an</span></span><br><span class="line"><span class="comment">// aws.Config with Region set to the right region for bucketName.</span></span><br><span class="line"><span class="comment">// See the package documentation for an example.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">OpenBucket</span><span class="params">(ctx context.Context, sess client.ConfigProvider, bucketName <span class="keyword">string</span>, opts *Options)</span> <span class="params">(*blob.Bucket, error)</span></span> &#123;</span><br><span class="line">drv, err := openBucket(ctx, sess, bucketName, opts)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> blob.NewBucket(drv), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらを利用することで実現できるのですが、実装側がクラウドごとの仕様に汚染されることが想像できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkBlobFileContent</span><span class="params">(bucketName, key <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">  <span class="comment">// S3固有の処理になってしまう</span></span><br><span class="line">  sess := session.Must(session.NewSession(&amp;aws.Config&#123;&#125;))</span><br><span class="line">  bucket, err := s3blob.OpenBucket(context.Background(), sess, bucketName, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>認証系を扱いたい場合はどうしても、処理を各クラウドごとに分ける必要があります。</p><p>ですが、<code>Bucket</code> オブジェクトを生成する関数と利用する関数を分けることで汚染先を減らすことができます。</p><p>私が実際に実装したコードはだいたい、下記の通りにしております。ビジネスロジック側には、 <code>Bucket</code> オブジェクトを渡すことでクラウド SDK ごとの依存を <code>New 関数</code> 内に閉じ込めています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Session は各クラウドごとの認証情報を格納する struct</span></span><br><span class="line"><span class="keyword">type</span> Session <span class="keyword">struct</span> &#123;</span><br><span class="line">S3Config        *aws.Config</span><br><span class="line">GCSCredential   *google.Credentials</span><br><span class="line">AzureCredential *azblob.SharedKeyCredential</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBucket</span><span class="params">(ctx context.Context, urlstr <span class="keyword">string</span>, sess Session)</span> <span class="params">(*blob.Bucket, error)</span></span> &#123;</span><br><span class="line"><span class="comment">// 切り替えは url schema で実現されているため raw url で受け取って変換</span></span><br><span class="line">u, err := url.Parse(urlstr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Go Cloud側の実装に合わせて、schemaでswitchさせる</span></span><br><span class="line"><span class="keyword">switch</span> u.Scheme &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"s3"</span>:</span><br><span class="line">sess, err := session.NewSession(sess.S3Config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"create s3 session failed: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s3blob.OpenBucket(ctx, sess, u.Host, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"gs"</span>:</span><br><span class="line">token := gcp.CredentialsTokenSource(sess.GCSCredential)</span><br><span class="line">client, err := gcp.NewHTTPClient(gcp.DefaultTransport(), token)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> gcsblob.OpenBucket(ctx, client, u.Host, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"azblob"</span>:</span><br><span class="line">pipeline := azureblob.NewPipeline(sess.AzureCredential, azblob.PipelineOptions&#123;&#125;)</span><br><span class="line"><span class="keyword">return</span> azureblob.OpenBucket(ctx, pipeline, azureblob.AccountName(sess.AzureCredential.AccountName()), u.Host,</span><br><span class="line">&amp;azureblob.Options&#123;Credential: sess.AzureCredential&#125;)</span><br><span class="line"><span class="keyword">case</span> <span class="string">"mem"</span>:</span><br><span class="line"><span class="keyword">return</span> blob.OpenBucket(ctx, urlstr)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"unsupported scheme: %v"</span>, u.Scheme)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このあたりは、 正直あまりイケていないので、もっと良い実装がしたいなと思っています。</p><p><a href="https://github.com/google/wire" target="_blank" rel="noopener">Wire</a> を利用することで解決できないかなと、もやもや考えてます。<br>(Wireとは、過去Go Cloudリポジトリに同梱されていて、今は別リポジトリで管理されている DI ツールです。コード生成をすることで、DIを実現しています。)</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Go Cloud の概要と目指す先について、また Blob のサンプル実装について解説しました。</p><p>プロジェクト自体で実現したいことも非常に面白いかつ有用ですし、実際に Blob で利用してみて、オブジェクト生成部分のみ気を使えば、GCS,Azure Storage などの接続先をかんたんに追加できました。また、OSS ですので内部のコードを追うことで SDK の利用方法についても知ることができます。Go Cloud側で SDK を適切に使えているかチェックすることもできますし(安心)、利用したことのない SDK の参考実装を調べることもできます。Azure Storage は初めて利用したのですが、GoDoc を追うことでなにの情報を渡せば接続できるか等が簡単に理解できました。このように、学習する範囲を狭めてくれる点も、良い点ではないかと思いました。  </p><p>今後も、活用していきたいですし、動向をWatchしていきたいです。</p><hr><p>関連記事：</p><ul><li><a href="/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li><li><a href="/articles/20191002/">CUEを試して見る</a></li><li><a href="/articles/20191030/">GoでCUEのバリデーション機能を利用しつつ、.cue/.json/.yaml形式の設定ファイルを読み込む</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h2&gt;&lt;p&gt;TIG DX Unit所属の多賀です。今回は、Go Cloudシリーズとしていくつか Go Cloudに関する記事をリレー形式で書いていきた
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>インフラ入門vol.3(ネットワーク冗長化構成)</title>
    <link href="https://future-architect.github.io/articles/20191107/"/>
    <id>https://future-architect.github.io/articles/20191107/</id>
    <published>2019-11-07T02:01:01.000Z</published>
    <updated>2019-11-07T02:20:36.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIG所属インフラエンジニアの市川です。</p><p>記事のテーマについてvol.2との棲み分けをどうしようかと思っていたのですが、前職がゴリゴリのネットワークエンジニアということもあり、折角なのでネットワークを深掘りしたいと思います。</p><p>クラウド全盛期の今でも社内ネットワークや既存のオンプレシステムなどネットワークなしにシステムを語ることはできません。いつでも繋がるネットワークを構築するために、サービスをエンドユーザー様に快適に使っていただくために、冗長化設計は避けて通れません。とは言え、ネットワークは簡単に作り直せない分、古き良き？構成が残ったままになりがちです。</p><p>お客様先でもまだまだ課題となっている冗長化構成の改善について、打ち合わせについていった新人さんが「なんだ、、、この呪文は、、、」とならないための入門記事をしたためようと思います。</p><p><strong>⚠️[WARNING]この記事はとても長いです⚠️</strong></p><h2 id="過去記事について"><a href="#過去記事について" class="headerlink" title="過去記事について"></a>過去記事について</h2><ol><li><a href="https://future-architect.github.io/articles/20170109/">インフラ入門vol.1</a>：インフラ全般に興味を持ってもらうためのアツい記事です。</li><li><a href="https://future-architect.github.io/articles/20170704/">インフラ入門vol.2(ネットワーク)</a>：ネットワークって何さ？から仕様検討の上での入門知識が書かれた記事です。</li><li>インフラ入門vol.3(ネットワーク冗長化構成)：この記事。冗長構成にスポットライトをあてた若干ニッチな記事です。</li></ol><h2 id="なぜ冗長化？？？"><a href="#なぜ冗長化？？？" class="headerlink" title="なぜ冗長化？？？"></a>なぜ冗長化？？？</h2><p>そもそもなぜ冗長化なのでしょう。というか冗長って何でしょうか。</p><p><a href="https://ja.wikipedia.org/wiki/%E5%86%97%E9%95%B7%E5%8C%96" target="_blank" rel="noopener">Wikipedia</a>によると…</p><blockquote><p>冗長化（じょうちょうか）とは、システムの一部に何らかの障害が発生した場合に備えて、障害発生後でもシステム全体の機能を維持し続けられるように、予備装置を平常時からバックアップとして配置し運用しておくこと。冗長化によって得られる安全性は冗長性と呼ばれ、英語ではredundancyと呼ぶ。</p><p>常に実用稼動が可能な状態を保ち、使用しているシステムに障害が生じたときに瞬時に切り替えることが可能な仕組みを持つ。障害によってシステムが本来の機能を失うと、人命や財産が失われたり、企業活動が大きな打撃を受けるような場合には、冗長性設計が必須となっている。</p></blockquote><p>ナルホド。1段落目にとっても重要なことが書いてあります。</p><p>ネットワークが、サーバが、故障しました！<br>→ ヤバい！予備がない！<br>→ 発注して、データセンタへの設置のために色々申請をして。<br>→ バックアップがあればそこから戻して・・・あ！機器の構成管理してない！<br>→ 手動でコンフィグのインストールして・・・。</p><p>―― おそらくこの時点で2, 3ヶ月はかかっているでしょう。<br>何故こうなったか説明を求められるでしょうし、もしかしたら賠償になるかも。人命に関わることもあるかもしれません。まぁ、この例は流石に杜撰すぎますが。</p><p>今やネットワークインフラやその上で提供される数多のサービスは電気や水道のように生活になくてはならない<strong>ライフライン</strong>です。一般的な日本語では冗長は「無駄」という意味合いがありますが、冗長設計をすることは決して無駄でなく、<strong>お客様とその快適な生活を守るために必要な最低限考慮すべき事項</strong>です。</p><h2 id="何をどこまでやるのか"><a href="#何をどこまでやるのか" class="headerlink" title="何をどこまでやるのか"></a>何をどこまでやるのか</h2><p>冗長化とは<strong>SPOF（Single Point of Failure / 単一障害点）</strong>を排除することだと認識しています。</p><p>SPOF排除における基本的な考え方は、</p><ul><li>負荷分散及び障害時の迂回経路を提供するActive/Active構成</li><li>障害時に自動で切り替わるような迂回経路を提供するActive/Standby構成</li></ul><p>上記は<strong>ホットスタンバイ</strong>といい、冗長機器は常に稼働し続け、<strong>「自動」</strong>での切り替わりを提供します。<br>一般にデータセンタや中・大規模な顧客拠点（オフィスネットワーク）、保守員のいない遠隔地ではこの構成が取られます。</p><p>また、小規模な顧客拠点などでは<strong>コールドスタンバイ</strong>という構成を取ることもあります。ホットスタンバイなActive/Standby構成をとった場合、Standbyの機器に通信がやってくるのは障害時かメンテナンス時くらいです。</p><p>もしかしたらラックのスペースがないかもしれませんし、電気が足りないかも・・・。お金もかかる。そういう場合には予め本番機同等の設定をした予備機を用意することで障害時に差し替えを行い、障害時間をある程度短縮するといった手法が取られます。</p><p>さて、上記の構成が取られることはわかりましたが、実際問題どこまで対策すればよいのでしょうか。</p><ul><li>LANケーブルや光ケーブル、電源を複数持たせればOK？</li><li>機器筐体そのものを複数もたせる？</li><li>この際回線も複数もたせる？衛星回線用意する？<ul><li>回線事業者分けたり、通る収容局分けたり、収容される機器分けたり！？（どこまで対応してくれるかですが。）</li></ul></li><li>都内数カ所とかにデータセンタを複数構築する？</li><li>大規模災害起きたらだから、BCP（Business continuity planning / 事業継続計画）拠点も作る？</li></ul><p><a href="https://future-architect.github.io/articles/20170704/">インフラ入門vol.2(ネットワーク)</a>にもありますが、「<strong>機械の故障等による停止はどの程度まで許容できるのか</strong>」が重要なポイントです。モノの納期や金銭的問題、例えばBCP発動時の手順の整備・訓練など対策を講じれば講じるほど運用は難度を増します。</p><p><strong>非機能要件定義</strong>の段階で十分にお客様と調整を行いましょう。</p><p>※よく打ち合わせなんかでMTBFとかMTTRなんて言葉も出てくるので、覚えておきましょう。</p><ul><li>MTBF: Mean Time Between Failures / 平均故障間隔</li><li>MTTR: Mean Time To Repair / 平均復旧時間</li></ul><h2 id="具体的な設計について"><a href="#具体的な設計について" class="headerlink" title="具体的な設計について"></a>具体的な設計について</h2><p>前置きが長くなりました。</p><p>さて、冗長構成はレイヤごとに分けて考えるとたくさんやることがあります。</p><p>よくインフラ屋さんが使う言葉に<strong>OSI参照モデル</strong>というものがあります。いわゆるネットワークの統一規格で下記の7層に分けることができます。</p><table><thead><tr><th>レイヤ</th><th>層名称</th><th>役割</th></tr></thead><tbody><tr><td>1</td><td>物理層</td><td>LANケーブル、光ケーブル、無線などの信号規約などを提供する</td></tr><tr><td>2</td><td>データリンク層</td><td>機器間のデータ伝送や経路選択を提供する</td></tr><tr><td>3</td><td>ネットワーク層</td><td>複数のネットワークにまたがった経路選択を提供する</td></tr><tr><td>4</td><td>トランスポート層</td><td>ネットワーク接続された端末間のエンドツーエンドの通信を提供する</td></tr><tr><td>5</td><td>セッション層</td><td>通信の開始から終了の規定を提供する</td></tr><tr><td>6</td><td>プレゼンテーション層</td><td>文字コードや圧縮形式、暗号化の方法などを提供する</td></tr><tr><td>7</td><td>アプリケーション層</td><td>サービスプロトコル（HTTP/FTPなど）にネットワーク機能を提供する</td></tr></tbody></table><p>ここからはそれぞれのレイヤごとに対策を見ていきましょう。<br>※筆者はCisco機器を扱うことが多かったので、Cisco用語がそれとなく出てきます。あしからず。</p><h2 id="レイヤ1（物理層）"><a href="#レイヤ1（物理層）" class="headerlink" title="レイヤ1（物理層）"></a>レイヤ1（物理層）</h2><p>※実際は信号規約なのでアレですが広義に捉えます。広い心で。</p><h3 id="電源冗長（RPS-Redundant-Power-Supply）"><a href="#電源冗長（RPS-Redundant-Power-Supply）" class="headerlink" title="電源冗長（RPS / Redundant Power Supply）"></a>電源冗長（RPS / Redundant Power Supply）</h3><p>ネットワーク機器やサーバにはモジュラタイプの電源を複数搭載可能なモデルがあります。<br>筐体（機械）の本体を開けたりドライバーがなくても引っこ抜いて差し込む作業だけで電源の交換が可能です。<br>RPSを利用するなら最低限電源を取得する分電盤もPS（Power Supply）ごとに分けるようにしましょう。</p><h3 id="FAN冗長"><a href="#FAN冗長" class="headerlink" title="FAN冗長"></a>FAN冗長</h3><p>コレは割とオマケですが、サーバの中には冗長FANを搭載できるモデルがあります。<br>熱で死んでいった機械をたくさん見てきたので、CPUぶん回す処理が多いことがわかっていたら備えておきましょう。<br>そもそも空調設計的なものもかかわってきますが。</p><h2 id="レイヤ2（データリンク層）"><a href="#レイヤ2（データリンク層）" class="headerlink" title="レイヤ2（データリンク層）"></a>レイヤ2（データリンク層）</h2><h3 id="Teaming-Link-Aggregation"><a href="#Teaming-Link-Aggregation" class="headerlink" title="Teaming / Link Aggregation"></a>Teaming / Link Aggregation</h3><img src="/images/20191107/layer2.png"><p>NIC（ネットワークインターフェースカード）を複数搭載した機器同士の物理リンクを束ねて一本の物理リンクとして取り扱う機能で、NICやケーブルの障害対策、あるいは負荷分散のために利用されます。</p><p>ちなみにドキュメントに記載された名称がベンダによって違います。</p><ul><li>WIndows系 → チーミング（Teaming）</li><li>Linux系 → ボンディング（Bonding）</li><li>Cisco系 → イーサチャンネル（Ether channel） ※Port channelと呼ぶことも。</li><li>その他① → リンクアグリゲーション（Link Aggregation） ※この呼び方をよく使っていました。<strong>LAG</strong>ですね。</li><li>その他② → ポートトランキング（Port trunking） ※ProCurveなどがこの呼び方。</li></ul><p>また、束ねるケーブルがFastEther（100Mbps）だと<strong>FEC</strong>、GigabitEther（1Gbps）だと<strong>GEC</strong>とか言ったりします。</p><p>重要なのが、サーバでは<strong>NICそのものの障害</strong>、L2SW/L3SWでは<strong>ASIC</strong>（Application Specific Integrated Circuit / スイッチング用の専用回路）の障害、シャーシ型の場合はスイッチングモジュールの障害を念頭に置く必要があります。</p><p>せっかく冗長化しててもPCIeスロットが同じNICを使ってたり、同じASICやスイッチングモジュールに所属するポートを利用していては可用性が低下します。サービスレベルによっては上記のような点もしっかり抑えておきましょう。</p><p><strong>【動作モード】</strong><br>Teaming / Link Aggregationでは静的あるいは動的に同じグループとして束ねられるポートを選択します。</p><p>また、ややこしいことにこのモード次第で負荷分散方式が変わったりします。</p><ul><li><p><strong>「スイッチに依存しない」モード</strong></p><ul><li>負荷分散を行わないActive/Standby構成（フォールトトレランス）やActive/Active構成でもサーバから送信されるトラフィックのみ負荷分散を行うモード。</li></ul></li><li><p><strong>「静的 / static」モード</strong></p><ul><li>Active/Active構成で送受信ともに負荷分散を行うが、機械にネゴシエーションをさせず、手動で割当を決める方式。</li><li>正直後述のLACPに対応してるなら選定することはほぼないかなという所感。</li></ul></li><li><p><strong>「動的 / LACP」モード</strong></p><ul><li>Active/Active構成で送受信ともに負荷分散を行い、障害時にメンバーポートをLAG（Link Aggregation Group）から切り離します。</li><li>Cisco独自のPAgPというモードもありましたが、機器を選ぶので選定することはないはずです。</li></ul></li></ul><p><strong>【ハッシュポリシー】</strong><br>負荷分散の際に何を基準にして分散するか、を選択できます。ちょっと脇道なので、サラッと説明しますが、Layer2、Layer2+3、Layer3+4などの種類があります。詳しくは<a href="https://access.redhat.com/documentation/ja-jp/red_hat_enterprise_linux/7/html/networking_guide/sec-using_channel_bonding" target="_blank" rel="noopener">RHELのドキュメントに・・・</a></p><p>推奨はLayer3+4ですが、IPパケットフラグメントなど無視できない問題があったりするので、Layer2+3を選ぶことが多い印象です。</p><h3 id="スパニングツリー（Spanning-Tree）"><a href="#スパニングツリー（Spanning-Tree）" class="headerlink" title="スパニングツリー（Spanning Tree）"></a>スパニングツリー（Spanning Tree）</h3><img src="/images/20191107/spanning_tree.png"><p>L2スイッチでは通常、受信したフレームの宛先が不明な場合など特定の状況下で、一旦すべてのポートにそのフレームを転送します。（<strong>フラッディング</strong>）上図のようにその動作を円環（ループ構成）で行ったらどうなるでしょう。<br>フレームはぐるぐると機器間を回り続け、ネットワークが使用不可になってしまいます。（<strong>ブロードキャストストーム</strong>）</p><p>これを防ぐためのプロトコルが<strong>Spanning Tree Protocol</strong>と呼ばれるものです。<br>簡単に説明すると下図のように「利用可能な経路の一つをバックアップ用として利用不可にすることでループ構成を排除する」というものになります。（いくつかのルールによって木構造を構成します。）<br><img src="/images/20191107/spanning_tree_block.png"></p><p>非常に単純なプロトコルなのですが、ベンダごとの（というかCiscoの）独自実装や既存機器の設定によって影響を受けることもあり、数多くのネットワークエンジニアを泣かせた機能だと（勝手に）思っています。</p><p>STP関連のプロトコルは実装は複数あり、</p><ul><li>CST（Common Spanning Tree）: すべての仮想LAN（VLAN）で同じ木構造を取る。</li><li>PVST+（Per Vlan Spanning Tree Plus）：各VLANで個別の木構造を取ることが可能。</li><li>RST（Rapid Spanning Tree）：CSTの高速化版。障害発生時最大50秒の通信断が発生していたが、RSTPでは1秒未満に短縮。</li><li>RPVST+（Rapid Per Vlan Spanning Tree Plus）：PVSTの高速化版。障害発生時最大50秒の通信断が発生していたが、RPVST+では1秒未満に短縮。</li><li>MST（Multiple Spanning Tree）：RPVST+と似た実装。設計は複雑になりがちだが、RPVST+より負荷が軽く、効率が良い。</li></ul><p>遅いCSTやPVST+を積極的に採用することはないですが、小型機はこれらしかサポートしてない場合もあります。<br>そして厄介なことにSTPトポロジ内に一個でもCSTやPVST+が混ざっていると、全体がそちらに引っ張られて収束が遅くなるので注意・・・・。<br>中規模でCiscoロックインであればRPVST+（一部HPEのスイッチなどは互換性がある。）、Vlanの数が非常に多い、あるいは複数ベンダ機器が混在する場合はMSTで実装すると良いでしょう。<br>とはいえ、既存ネットワークの状態、運用者のスキルにもよるので、ヒアリングを欠かさないこと。</p><p>STPの構成ではどうしても一つ利用されない経路が存在します。これを利用するようにするにはPVSTやMSTでもある程度解決できますが、より実装が複雑になったり、思わぬ動作を引き起こす場合があります。<br>帯域の利用率が非常に高いネットワークでは後述のスタックなど、別な方法で冗長化構成を取るべきです。</p><h3 id="スタック、バーチャルシャーシ（StackWise-VSS-IRF）など"><a href="#スタック、バーチャルシャーシ（StackWise-VSS-IRF）など" class="headerlink" title="スタック、バーチャルシャーシ（StackWise / VSS / IRF）など"></a>スタック、バーチャルシャーシ（StackWise / VSS / IRF）など</h3><img src="/images/20191107/stack_virtual_chassis.png"><p>スタック、バーチャルシャーシは<strong>物理的に2台のスイッチを仮想的に1台として</strong>扱うことのできる技術です。<br>コンフィグの管理も1台分だけすればよく、設定管理などが簡素になります。（機種によっては3台以上をまとめることも可能）<br>また、未使用帯域が存在するなどのSTPの問題を解決する構成が可能となります。<br>スタックは通常BOX型のスイッチの、バーチャルシャーシはシャーシ型のスイッチでの呼び方となります。</p><p>最も有効な構成としてはLink Aggregationと組み合わせた構成があります。<br>下図の構成では、三角形のループ構造のように見えますが、実際は上図と同じ様にループフリー構成として運用が可能です。<br>MECとありますが、Multi Chassis Ether Channelの略です。</p><img src="/images/20191107/stack_virtual_chassis_mec.png"><p>が、この技術も若干デメリットが有り、下記の制約があります。</p><ul><li>同じファームウェアバージョンである必要がある</li><li>フィーチャーセット（機能レベル）が同じ必要がある</li><li>SDMテンプレートが同一である必要がある（Ciscoの場合）</li></ul><p>上記制約のため、機器が対応していない場合は容易にOSのアップデートができない、メンテナンス時の通信の片寄時に通信断が発生する可能性があるなどの問題が発生する場合があります。</p><p>なお、スイッチ間をつなぐケーブルにはDAC（Direct Attach Cable）と言われるSFP+と光ケーブルがセットになったケーブルや、個別にSFP+と光ケーブルを購入してつなぐ、などのパターンがあります。購入し忘れに注意しましょう。</p><h3 id="Ethernet-Fabric"><a href="#Ethernet-Fabric" class="headerlink" title="Ethernet Fabric"></a>Ethernet Fabric</h3><img src="/images/20191107/Ethernet_Fabric.png"><p>これまではツリー型構造を前提としたネットワーク構成での冗長化がベースでしたが、より大規模なデータセンターネットワークにおいてレイヤ2の概念を置き換える考え方が登場しました。<br>ツリー構造ではなくメッシュ構造に近く、非常に柔軟なネットワークを提供することができます。</p><p>ベースとなっているのは以下の技術です。</p><ul><li>Trill（Transparent Interconnect of Lots of Links）</li><li>SPB（Shortest Path Bridging）</li></ul><p>ざっくりというと下記の特徴があります。（ベンダごとに細かい拡張があるのでそこは割愛）</p><ul><li>STPフリー：L2スイッチのような筐体はモジュールとして動作するため、仮想的に1つの筐体のポートとして扱える。</li><li>コンフィグの一元化：スタック同様、中央集中的にコンフィグの管理が可能</li></ul><p>機器が非常に高価なのと、高密度に集約されることでケーブル配線やラック配置の設計難度があがります。</p><h2 id="レイヤ3（ネットワーク層）"><a href="#レイヤ3（ネットワーク層）" class="headerlink" title="レイヤ3（ネットワーク層）"></a>レイヤ3（ネットワーク層）</h2><h3 id="VRRP-HSRP-GLBP"><a href="#VRRP-HSRP-GLBP" class="headerlink" title="VRRP / HSRP / GLBP"></a>VRRP / HSRP / GLBP</h3><img src="/images/20191107/stack_mec.png"><p>VRRP（Virtual Router Redundancy Protocol）とHSRP（Hot Standby Router Protocol）は基本的にActive/Standbyの<strong>ゲートウェイ冗長化</strong>機能を提供する機能です。（2台以上での冗長化も可能）</p><ul><li>HSRPはCisco独自機能で、VRRPは標準規格です。若干の仕様の違いはあれどすごく雑に言うと概ね同じ仕組みで動作します。</li><li>VRRPではMulti-Group、HSRPではMultiple実装があり、グループごとに主系/副系を変えることで簡易的にActive/Activeな構成を取ることも可能です。</li><li>GLBP（ Gateway Load Balancing Protocol ）は、またものすごくざっくりいうとゲートウェイに対応したMACアドレスをラウンドロビン方式で順番に返すことで標準でActive/Activeな構成を取る事ができるCisco独自機能です。（変更可能）</li></ul><p>基本的にはVRRPが後発でプロトコル実装的にIPパケットで動作するので、VRRPを使うことが多いです。<br>　※HSRPはUDPで動作しますので、若干のオーバーヘッドを嫌いたくなります。<br>　※GLBPは上述のEthernet FabricのCisco版で使うことがあるかも。（使ったことはないですが・・・）</p><h3 id="ECMP（Equal-Cost-Multi-Path）"><a href="#ECMP（Equal-Cost-Multi-Path）" class="headerlink" title="ECMP（Equal Cost Multi Path）"></a>ECMP（Equal Cost Multi Path）</h3><img src="/images/20191107/floating-static-2.png"><p>動的ルーティングプロトコルでは経路交換時に同じ宛先の経路が複数ある場合、最もコストが低い経路をルーティングテーブルに読み込みます。<br>このとき各経路のコストが等しい場合、複数の経路をルーティングテーブルに持ち、負荷分散することが可能です。これをEMCPと呼びます。</p><p>EMCPはそのバランシングにより下記の2つの実装があります。</p><ul><li><p>Per packet ECMP</p><ul><li>パケットごとに経路を振り分けてくれる。</li><li>理想的にバランシングされる一方、リンクに求められる遅延差がシビアで、実は障害に弱い（影響を受けやすい）。<ul><li>TCPやUDPにおいてフラグメントされたパケットの処理やパフォーマンスに問題が出ることも。</li></ul></li></ul></li><li><p>Per flow ECMP</p><ul><li>フローごとに経路を振り分けてくれる。（フローの定義はベンダによって異なる）</li><li>Per packet ECMPで起きる問題が発生しない。</li><li>バランシングを完璧にこなすのは考慮事項が多く、非常に困難。</li><li>一般的にはこちらが採用されている。</li></ul></li></ul><p>よく利用されるルーティングプロトコルにはBGP、OSPFがあり、概ね以下の区分けです。</p><ul><li>OSPF（Open Shortest Path Fast）：内部ネットワークでの経路交換に利用されるプロトコル。</li><li>BGP（Border Gateway Protocol）：外部ネットワークとの経路交換に利用されるプロトコル。最近内部ネットワークでもレイヤ2排除のために使われる。</li></ul><h2 id="レイヤ4（トランスポート層）／レイヤ7（アプリケーション層）"><a href="#レイヤ4（トランスポート層）／レイヤ7（アプリケーション層）" class="headerlink" title="レイヤ4（トランスポート層）／レイヤ7（アプリケーション層）"></a>レイヤ4（トランスポート層）／レイヤ7（アプリケーション層）</h2><p>主にロードバランサ、ファイアウォール、セキュリティアプライアンス系がこの層に該当します。</p><blockquote><p>図がシングル構成になっていますが、コレまで紹介した機能と心の目で冗長化してみてください。</p></blockquote><h3 id="ロードバランサ"><a href="#ロードバランサ" class="headerlink" title="ロードバランサ"></a>ロードバランサ</h3><p>ロードバランサ（LB）の構成は通信経路の途中に横付けするワンアーム構成（LANが1本だから）と経路に挟み込むツーアーム（インライン）構成があります。<br>大まかにワンアームとツーアームはどっち選べば！？という点については個人的にはワンアームが良いと考えています。<br>現状動作しているネットワークにLBを挟み込む場合でも物理構成に変更を与えることなく追加が可能な点と、経路上にLBが存在しないため、メンテナンスし易いことが挙げられます。</p><h4 id="ワンアーム（One-arm）構成／SNAT-DSR構成"><a href="#ワンアーム（One-arm）構成／SNAT-DSR構成" class="headerlink" title="ワンアーム（One-arm）構成／SNAT/DSR構成"></a>ワンアーム（One-arm）構成／SNAT/DSR構成</h4><p>ワンアーム構成一つとっても（知ってる限りで）3つの構成を取ることができます。</p><p>1つ目はリアルサーバ、バーチャルサーバ、デフォルトGWを同一セグメントにする、あるいはリアルサーバのデフォルトGWをバーチャルサーバ（LB）のIPアドレスを指定する場合です。<br>すべての通信はわかりやすくLBを通過するため、セグメントに余裕があれば構成しやすいのがメリットかなと思います。<br><img src="/images/20191107/photo_20191107_01.png" style="border:solid 1px #000000"></p><p>2つ目はSNAT構成です。例えばリアルサーバ群がVMなど横にスケールする構成で、もうIPの空きに余裕がない、とか、通信要件でリアルサーバのGWはL3SWでないとダメ。といった場合にはSNATという機能を使います。</p><p>行き帰りの通信経路が異なる場合、LBはセッションを確立することができないため、NAT（Network Address Translation）機能を利用して、送信元IPをLBのIPに変換することで強制的にLBを通すということが可能です。<br><img src="/images/20191107/photo_20191107_02.png" style="border:solid 1px #000000"></p><p>3つめはDSR（Direct Server Return）構成です。<br>DSRはその名の通り、ロードバランサに着信したクライアントからのパケットを帰りは<strong>LBを経由せずに直接</strong>クライアントに返す構成です。イマドキのLB構成においてDSRは敢えて選択する方式ではないという認識です。</p><p>ちなみにこの構成もL3DSRとL2DSRです。</p><img src="/images/20191107/photo_20191107_03.png" style="border:solid 1px #000000"><p><strong>メリット</strong></p><ul><li>LBでSNATなどの処理を行う必要がなくなるため、リソースに余裕ができる＆スループットが向上する。</li></ul><p><strong>デメリット</strong></p><ul><li>L4ロードバランサとしてしか利用できない（SSL終端とかは無理）</li><li>みんな大好きARP/GARP（L2機能）を使うため、面倒を見るレイヤがちょっと広くなる。（L2DSRの場合）</li><li>方式によるが、MTU（トンネル方式）やDSCP（DSCP方式）の値に制限がでる（L3DSRの場合）</li></ul><p>そもそも最近の（大手だと）BIG-IPやA10のロードバランサは十分な処理速度があり、SSLもなんならLBのアクセラレータを通したほうがスループット向上に寄与したりするので、必要でなければDSR以外を選びたいところです。</p><h4 id="ツーアーム（Two-arm）構成"><a href="#ツーアーム（Two-arm）構成" class="headerlink" title="ツーアーム（Two-arm）構成"></a>ツーアーム（Two-arm）構成</h4><p>ツーアーム構成はその名の通り2本の腕で通信経路中に挟み込まれる構成です。</p><p>ネットワークエンジニアとサーバエンジニアが分かれているときなど、ネットワーク屋さんだけでLBを構成する場合はこちらの構成が単純で問題も少ないです。<br>こんな構成にするんじゃない、って話ですが、下図のような構成をとったときにLBに関係ないサーバもLBを通るという状況が発生しますので注意が必要なのと、帯域は十分に確保したほうが良いです。</p><blockquote><p>だってL3SWに空きポートが無いんだもんとか、歴史的理由によりサーバは子のSW配下にしかつけちゃダメとかの背景でやむを得ずこんな構成になったり</p></blockquote><img src="/images/20191107/photo_20191107_04.png" style="border:solid 1px #000000"><h3 id="セキュリティアプライアンス"><a href="#セキュリティアプライアンス" class="headerlink" title="セキュリティアプライアンス"></a>セキュリティアプライアンス</h3><p>ニッチ＆ニッチですが、Fire eyeなどのセキュリティアプライアンスを導入する場合も構成方法が複数あります。<br>当然ですが、セキュリティアプライアンスはそれを通過するパケットを監視します。したがって、何らかの方法でパケットをセキュリティアプライアンスに入れてあげることが必要です。</p><h4 id="スパン・タップ構成"><a href="#スパン・タップ構成" class="headerlink" title="スパン・タップ構成"></a>スパン・タップ構成</h4><p>ネットワーク機器にはSPAN（Switched Port Analyzer）という機能が存在する機種があります。<br>要は特定のポートを通過したパケットを別なポートにコピーする機能です。当然といえば当然ですが、SPANはCPUを使った処理になるので、ルータやスイッチの負荷が上がりがちです。</p><img src="/images/20191107/photo_20191107_05.png" style="border:solid 1px #000000"><p>上記問題を解決するためにタップという機器もあります。通信経路に挟み込んで信号を分岐するための機器で、電源故障時も通信をバイパスすることで可用性を下げることなく（機種によります）導入することが可能です。高価ですが・・・。</p><img src="/images/20191107/photo_20191107_06.png" style="border:solid 1px #000000"><p>通信に影響をあたえることがないため、インライン構成よりこちらの構成がおすすめです。ネットワーク的には。<br>とはいえ、セキュリティアプライアンスの機能をフルに活用する場合にはインライン構成の方がベターだったりしますので、要件次第ですね。</p><h4 id="インライン構成"><a href="#インライン構成" class="headerlink" title="インライン構成"></a>インライン構成</h4><p>セキュリティアプライアンスに搭載されている冗長化（HA）機能を利用することが一般的です。<br>構成としてはLBと同じくとてもわかり易いですね。</p><img src="/images/20191107/photo_20191107_07.png" style="border:solid 1px #000000"><h3 id="ファイアウォール"><a href="#ファイアウォール" class="headerlink" title="ファイアウォール"></a>ファイアウォール</h3><p>前提として<strong>ステートフルフェイルオーバー</strong>に対応しているか否かを事前に確認しましょう。<br>だいたい対応しているとは思いますが、対応していない場合はVRRPでの冗長構成が一般的ですが、そもそもセッションなどのステート（状態）を引き継がないため、切り替わり時に通信断が発生するなど、辛い現実を突きつけられることも。。。</p><img src="/images/20191107/photo_20191107_08.png" style="border:solid 1px #000000"><h4 id="Active-Passive"><a href="#Active-Passive" class="headerlink" title="Active/Passive"></a>Active/Passive</h4><p>この構成は単純で、よくある構成です。<br><strong>ステートフルフェイルオーバー</strong>に対応したファイアウォールではスタンバイ機への同期は常に行われ、障害時の切り替わりに備えています。<br>OSのバージョンアップなどのメンテナンス行為もしやすく、通信路の帯域などが許す場合はこちらがおすすめです。</p><h4 id="Active-Active"><a href="#Active-Active" class="headerlink" title="Active/Active"></a>Active/Active</h4><p>この構成では常に両方のファイアウォールでのトラフィック検査を行います。<br><strong>ステートフルフェイルオーバー</strong>に対応したファイアウォールでは相互にセッションのやり取りを同期します。<br>機種によっては行き帰りのトラフィックが異なるファイアウォールを通る場合、破棄される可能性があります。十分に検証しましょう。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>まとめと言ってもとっちらかってしまうのですが、ココまで読まれたアナタは鋼のメンタルがあるのでぜひ一緒にインフラ屋さんをやりましょう。</p><p><strong>動いて当たり前</strong>なネットワークインフラの背景にはネットワークエンジニアがアレコレ頭を捻ったネットワークトポロジが存在しています。</p><p>前述しましたとおり、クラウドサービスの台頭でなかなかガッツリ触ることのなくなってきたネットワークですが、ネットワーク技術がなくなることは今後もないでしょうし、オンプレのネットワークに触れるときがあればこんな記事があったな、と思いだしてもらえると幸いです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、TIG所属インフラエンジニアの市川です。&lt;/p&gt;
&lt;p&gt;記事のテーマについてvol.2との棲み分けをどうしようか
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Network" scheme="https://future-architect.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>AWS Glueの開発エンドポイントがそこそこお高いのでローカル開発環境を用意しました</title>
    <link href="https://future-architect.github.io/articles/20191101/"/>
    <id>https://future-architect.github.io/articles/20191101/</id>
    <published>2019-11-01T04:37:19.000Z</published>
    <updated>2019-11-01T05:22:10.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXチームの村瀬です。</p><p>AWS Glue利用していますか？ETL処理をする上で大変便利ですよね。しかしながら開発に必要不可欠な開発エンドポイントが少々お高く、もう少し安価に利用できればなーと思っていたところ、さすがAWSさん素敵なリリースをしてくれました。</p><img src="/images/20191101/1.png" class="img-middle-size" style="border:solid 1px #000000"><p><a href="https://aws.amazon.com/jp/about-aws/whats-new/2019/08/aws-glue-releases-binaries-of-glue-etl-libraries-for-glue-jobs/" target="_blank" rel="noopener">https://aws.amazon.com/jp/about-aws/whats-new/2019/08/aws-glue-releases-binaries-of-glue-etl-libraries-for-glue-jobs/</a></p><h1 id="AWS-Glueとは"><a href="#AWS-Glueとは" class="headerlink" title="AWS Glueとは"></a>AWS Glueとは</h1><p>過去のこちらの記事もご参考ください。</p><ul><li><a href="/articles/20180828/">5TB/日 のデータをAWS Glueでさばくためにやったこと（概要編</a></li><li><a href="/articles/20181205/">5TB/日 のデータをAWS Glueでさばくためにやったこと（性能編）</a></li></ul><h1 id="ローカルPCの環境を汚さない為に"><a href="#ローカルPCの環境を汚さない為に" class="headerlink" title="ローカルPCの環境を汚さない為に"></a>ローカルPCの環境を汚さない為に</h1><p>作業を開始する前に確認したところ、Glueバージョン1.0を動かす場合にはSpark2.4.3が必要でそのSparkを動かす為にはJava 8が必要でまたPythonも3.6が必要とのこと。<br>依存関係が結構ありそうですね。</p><p>GlueをローカルPCで動かす為にJavaやPythonのバージョン変えるの嫌だなぁ。チームメンバーも嫌がるだろうし環境構築の為の手順用意するの面倒だしトラブった時に対応したくないなと思ったのでローカルPCの環境を汚さないように今回はDockerで用意してみることにしました。</p><p><a href="https://docs.aws.amazon.com/ja_jp/glue/latest/dg/aws-glue-programming-etl-libraries.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/ja_jp/glue/latest/dg/aws-glue-programming-etl-libraries.html</a><br>を参考にPython,Java,Glueライブラリ,Maven,Glueアーティファクトを取得・インストールするよう記載したDockerfileを用意して実行してみると…<br>(※Dockerfileは後ほど出てきます)</p><h1 id="ハマリポイント"><a href="#ハマリポイント" class="headerlink" title="ハマリポイント"></a>ハマリポイント</h1><p>./aws-glue-libs/bin/gluepyspark 実行時にエラー発生</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">～中略～</span><br><span class="line">py4j.protocol.Py4JJavaError: An error occurred while calling None.org.apache.spark.api.java.JavaSparkContext.</span><br><span class="line">: java.lang.NoSuchMethodError: io.netty.buffer.PooledByteBufAllocator.defaultNumHeapArena()I</span><br><span class="line">        at org.apache.spark.network.util.NettyUtils.createPooledByteBufAllocator(NettyUtils.java:113)</span><br><span class="line">        at org.apache.spark.network.client.TransportClientFactory.&lt;init&gt;(TransportClientFactory.java:106)</span><br><span class="line">        at org.apache.spark.network.TransportContext.createClientFactory(TransportContext.java:99)</span><br><span class="line">        at org.apache.spark.rpc.netty.NettyRpcEnv.&lt;init&gt;(NettyRpcEnv.scala:71)</span><br><span class="line">        at org.apache.spark.rpc.netty.NettyRpcEnvFactory.create(NettyRpcEnv.scala:461)</span><br><span class="line">        at org.apache.spark.rpc.RpcEnv$.create(RpcEnv.scala:57)</span><br><span class="line">        at org.apache.spark.SparkEnv$.create(SparkEnv.scala:249)</span><br><span class="line">        at org.apache.spark.SparkEnv$.createDriverEnv(SparkEnv.scala:175)</span><br><span class="line">        at org.apache.spark.SparkContext.createSparkEnv(SparkContext.scala:257)</span><br><span class="line">        at org.apache.spark.SparkContext.&lt;init&gt;(SparkContext.scala:424)</span><br></pre></td></tr></table></figure><p>すんなり行きませんでした。<br>エラーを確認するとio.netty.buffer.PooledByteBufAllocator.defaultNumHeapArena()なんて無いよと言われていますね。</p><p>無いと言われているものを探してみます。<br><code>find / -name *netty*</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/opt/spark-2.4.3-bin-spark-2.4.3-bin-hadoop2.8/jars/netty-3.9.9.Final.jar</span><br><span class="line">/opt/spark-2.4.3-bin-spark-2.4.3-bin-hadoop2.8/jars/netty-all-4.1.17.Final.jar</span><br><span class="line">～中略～</span><br><span class="line">/aws-glue-libs/jarsv1/netty-3.6.2.Final.jar</span><br><span class="line">/aws-glue-libs/jarsv1/netty-all-4.0.23.Final.jar</span><br><span class="line">/aws-glue-libs/jarsv1/netty-buffer-4.1.17.Final.jar</span><br><span class="line">/aws-glue-libs/jarsv1/netty-codec-4.1.17.Final.jar</span><br><span class="line">/aws-glue-libs/jarsv1/netty-codec-http-4.1.17.Final.jar</span><br><span class="line">/aws-glue-libs/jarsv1/netty-common-4.1.17.Final.jar</span><br><span class="line">/aws-glue-libs/jarsv1/netty-handler-4.1.17.Final.jar</span><br><span class="line">/aws-glue-libs/jarsv1/netty-resolver-4.1.17.Final.jar</span><br><span class="line">/aws-glue-libs/jarsv1/netty-transport-4.1.17.Final.jar</span><br></pre></td></tr></table></figure><p>？？？<br>いっぱい見つかりますね。</p><p>先人の知恵を借りましょう。<br><a href="https://stackoverflow.com/questions/50388919/spark-2-3-java-lang-nosuchmethoderror-io-netty-buffer-pooledbytebufallocator-me" target="_blank" rel="noopener">stackoverflow Spark 2.3 java.lang.NoSuchMethodError: io.netty.buffer.PooledByteBufAllocator.metric</a></p><p>どうやらNettyのjarのバージョンが合ってないことが原因のようです。<br>改めて比較して確認してみるとspark側のjarのバージョンの方が新しいですね。</p><figure class="highlight sh"><figcaption><span>spark</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/netty-3.9.9.Final.jar</span><br><span class="line">/netty-all-4.1.17.Final.jar</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>aws-glue-libs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/netty-3.6.2.Final.jar</span><br><span class="line">/netty-all-4.0.23.Final.jar</span><br></pre></td></tr></table></figure><p>またまた先人の知恵を借りましょう。<br><a href="https://github.com/awslabs/aws-glue-libs/issues/25" target="_blank" rel="noopener">GitHub gluepyspark errors on local development #25</a></p><p>どうやらaws-glue-libsを参照せずにsparkのjarファイルを参照すれば良いようです。<br><code>ln -s ${SPARK_HOME}/jars /aws-glue-libs/jarsv1</code></p><p>これでdocker buildがエラーなく成功し、docker runした上でdocker execでコンテナに入り、この状態で以下のコマンドを実行すると<br><code>./aws-glue-libs/bin/gluepyspark</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">～中略～</span><br><span class="line">19/10/25 09:58:38 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable</span><br><span class="line">Using Spark&apos;s default log4j profile: org/apache/spark/log4j-defaults.properties</span><br><span class="line">Setting default log level to &quot;WARN&quot;.</span><br><span class="line">To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).</span><br><span class="line">Welcome to</span><br><span class="line">      ____              __</span><br><span class="line">     / __/__  ___ _____/ /__</span><br><span class="line">    _\ \/ _ \/ _ `/ __/  &apos;_/</span><br><span class="line">   /__ / .__/\_,_/_/ /_/\_\   version 2.4.3</span><br><span class="line">      /_/</span><br><span class="line"></span><br><span class="line">Using Python version 3.6.8 (default, Aug  7 2019 17:28:10)</span><br><span class="line">SparkSession available as &apos;spark&apos;.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><p>無事にSparkを起動することができました。</p><h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h1><p>みんなお待ちかねのDockerファイルはこちら</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> Future y.murase</span><br><span class="line"></span><br><span class="line"><span class="comment"># https://omohikane.com/centos7_docker_python36/ を参考にpythonとjavaをインストール</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y bzip2 bzip2-devel gcc gcc-c++ make openssl-devel readline-devel zlib-devel wget curl unzip vim epel-release git &amp;&amp; yum install -y tig jq vim-enhanced bash-completion net-tools <span class="built_in">bind</span>-utils \</span></span><br><span class="line"><span class="bash">    &amp;&amp; yum install -y https://centos7.iuscommunity.org/ius-release.rpm \</span></span><br><span class="line"><span class="bash">    &amp;&amp; yum install -y python36u python36u-libs python36u-devel python36u-pip \</span></span><br><span class="line"><span class="bash">    &amp;&amp; yum install -y java java-1.8.0-openjdk-devel \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /var/cache/yum/*</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> localedef -f UTF-8 -i ja_JP ja_JP.UTF-8</span></span><br><span class="line"><span class="keyword">ENV</span> LANG ja_JP.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> LC_CTYPE <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_NUMERIC <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_TIME <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_COLLATE <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_MONETARY <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_MESSAGES <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_PAPER <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_NAME <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_ADDRESS <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_TELEPHONE <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_MEASUREMENT <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_IDENTIFICATION <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_ALL ja_JP.UTF-<span class="number">8</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># Glueライブラリ取得</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> git <span class="built_in">clone</span> -b glue-1.0 --depth 1  https://github.com/awslabs/aws-glue-libs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Maven取得</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -OL https://archive.apache.org/dist/maven/maven-3/3.6.2/binaries/apache-maven-3.6.2-bin.tar.gz</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> tar -xzvf apache-maven-3.6.2-bin.tar.gz</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mv apache-maven-3.6.2 /opt/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -s /opt/apache-maven-3.6.2 /opt/apache-maven</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/lib/jvm/java-<span class="number">1.8</span>.<span class="number">0</span>-openjdk/jre/</span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:/opt/apache-maven/bin</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mvn -version</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Glueアーティファクト取得</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -OL https://aws-glue-etl-artifacts.s3.amazonaws.com/glue-1.0/spark-2.4.3-bin-hadoop2.8.tgz</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> tar -xzvf spark-2.4.3-bin-hadoop2.8.tgz </span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mv spark-2.4.3-bin-spark-2.4.3-bin-hadoop2.8 /opt/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -s /opt/spark-2.4.3-bin-spark-2.4.3-bin-hadoop2.8 /opt/spark</span></span><br><span class="line"><span class="keyword">ENV</span> SPARK_HOME /opt/spark</span><br><span class="line"></span><br><span class="line"><span class="comment"># Python3.6を利用する設定</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> unlink /bin/python</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -s /bin/python3 /bin/python</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -s /bin/pip3.6 /bin/pip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 異なるバージョンのjarがsparkとglueに混在するので適切なバージョンのみを見るよう設定</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -s <span class="variable">$&#123;SPARK_HOME&#125;</span>/jars /aws-glue-libs/jarsv1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ./aws-glue-libs/bin/gluepyspark</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>, <span class="string">"while :; do sleep 10; done"</span>]</span></span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>少々苦労しましたが先人の知恵を借りて問題解決できました。<br>これで複数いる開発メンバーにDockerイメージさえ渡せばローカル環境を汚すことなく簡単にかつお財布にやさしくローカルPCにGlueの開発環境が用意できますね。<br>Glueのローカル開発環境構築にチャレンジしたけどエラーが出て諦めてしまった人の手助けになれたら幸いです。</p><p>なお、この記事を作成する上で以下のページを参考にさせていただきました。<br><a href="https://aws.amazon.com/jp/about-aws/whats-new/2019/08/aws-glue-releases-binaries-of-glue-etl-libraries-for-glue-jobs/" target="_blank" rel="noopener">https://aws.amazon.com/jp/about-aws/whats-new/2019/08/aws-glue-releases-binaries-of-glue-etl-libraries-for-glue-jobs/</a><br><a href="https://docs.aws.amazon.com/ja_jp/glue/latest/dg/aws-glue-programming-etl-libraries.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/ja_jp/glue/latest/dg/aws-glue-programming-etl-libraries.html</a><br><a href="https://omohikane.com/centos7_docker_python36/" target="_blank" rel="noopener">https://omohikane.com/centos7_docker_python36/</a><br><a href="https://stackoverflow.com/questions/50388919/spark-2-3-java-lang-nosuchmethoderror-io-netty-buffer-pooledbytebufallocator-me" target="_blank" rel="noopener">https://stackoverflow.com/questions/50388919/spark-2-3-java-lang-nosuchmethoderror-io-netty-buffer-pooledbytebufallocator-me</a><br><a href="https://github.com/awslabs/aws-glue-libs/issues/25" target="_blank" rel="noopener">https://github.com/awslabs/aws-glue-libs/issues/25</a></p><hr><p>関連記事：</p><ul><li><a href="/articles/20180828/">5TB/日 のデータをAWS Glueでさばくためにやったこと（概要編</a></li><li><a href="/articles/20181205/">5TB/日 のデータをAWS Glueでさばくためにやったこと（性能編）</a></li><li><a href="/articles/20191009/">AWS Session Managerでセッションを切断されにくくする方法</a></li><li><a href="/articles/20190902/">AWS IAMロールの信頼関係の気になる動作</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXチームの村瀬です。&lt;/p&gt;
&lt;p&gt;AWS Glue利用していますか？ETL処理をする上で大変便利です
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>GoでCUEのバリデーション機能を利用しつつ、.cue/.json/.yaml形式の設定ファイルを読み込む</title>
    <link href="https://future-architect.github.io/articles/20191030/"/>
    <id>https://future-architect.github.io/articles/20191030/</id>
    <published>2019-10-30T02:01:41.000Z</published>
    <updated>2019-11-01T04:32:28.624Z</updated>
    
    <content type="html"><![CDATA[<p>人間が読み書きする設定ファイルについて、2つのエントリーを紹介してきました。今回は第3段です。</p><ul><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li><li><a href="/articles/20191002/">CUEを試して見る</a></li></ul><p>前回のエントリーで、<a href="https://cuelang.org/" target="_blank" rel="noopener">CUE</a>はテキストファイルのフォーマットでありつつもJSON/YAMLと同等の表現力（階層が持てて、文字列や数値などを扱える）を持ち、なおかつCUEコマンドやライブラリでは.cue/.json/.yamlを同列に入力ファイルとして扱えるということを紹介しました。また、.cueファイルにスキーマを定義して、バリデーションが行えることも紹介しました。</p><p>今回は、Goのパッケージを利用して、.cue/.json/.yaml形式の設定ファイル読み込み機能をアプリケーションに組み込んでみます。本家の一次資料としては次のサイトになりますので、細かい機能やAPIを知りたい場合はこちらを参照してください。</p><ul><li><a href="https://cuelang.org/docs/integrations/go/" target="_blank" rel="noopener">https://cuelang.org/docs/integrations/go/</a></li></ul><p><strong>10/31修正</strong> @apstndbさんに構造体へのタグのマッピングの部分で<a href="https://twitter.com/apstndb/status/1189435828025491456" target="_blank" rel="noopener">指摘</a>をいただいて修正しました</p><h1 id="全体の流れと利用するパッケージ"><a href="#全体の流れと利用するパッケージ" class="headerlink" title="全体の流れと利用するパッケージ"></a>全体の流れと利用するパッケージ</h1><p>次の処理をまとめて行ってみます。</p><ul><li>アプリケーションは設定ファイルを読み込みます。<ul><li>設定ファイルのフォーマットは.cue/.json/.yamlのすべてのフォーマットに対応するものとします。</li></ul></li><li>読み込んだあとにスキーマによるチェック、デフォルト値の補完を行い、エラーがなければ構造体に値をマップしてアプリケーション本体に結果を渡します。</li></ul><p>Goのencoding/jsonなどはフォーマットさえ合っていればエラーを返すことはありません。アプリケーション側で必須な値が省略されてもゼロ値になるだけで、エラーにしたりしてくれませんし、省略時にデフォルト値を入れることもできません。それらはすべてアプリケーションコードで行う必要がありました。</p><p>CUEのGo用のライブラリを使うと、バリデーションと補完をすべてスキーマファイル任せにできますので、プログラムはシンプルになります。</p><p>CUEのAPIはいくつかのパッケージに分かれています。今回紹介するのは次の4つです。</p><ul><li><a href="https://godoc.org/cuelang.org/go/cue" target="_blank" rel="noopener">“cuelang.org/go/cue”</a>: あらゆるパッケージに共通の型定義や変換、.cueファイルの入出力など</li><li><a href="https://godoc.org/cuelang.org/go/encoding/gocode/gocodec" target="_blank" rel="noopener">“cuelang.org/go/encoding/gocode/gocodec”</a>: Goの構造体への値のマッピングなど</li><li><a href="https://godoc.org/cuelang.org/go/encoding/json" target="_blank" rel="noopener">“cuelang.org/go/encoding/json”</a>: JSON形式による入出力</li><li><a href="https://godoc.org/cuelang.org/go/encoding/yaml" target="_blank" rel="noopener">“cuelang.org/go/encoding/yaml”</a>: YAML形式による入出力</li></ul><h1 id="スキーマの定義"><a href="#スキーマの定義" class="headerlink" title="スキーマの定義"></a>スキーマの定義</h1><p>テスト用の設定のスキーマは.cueで書きます。リアルなユースケースではもっと多くなるでしょうが、とりあえず必須属性のポート番号と、ログレベル（省略時は”info”）の2つだけにしておきます。</p><figure class="highlight plain"><figcaption><span>schema.cue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">port:      uint16</span><br><span class="line">logLevel:  &quot;debug&quot; | *&quot;info&quot; | &quot;warn&quot; | &quot;error&quot; | &quot;critical&quot;</span><br></pre></td></tr></table></figure><p>プログラムには、文字列型としてそのまま取り込んでおきます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> schema = <span class="string">`</span></span><br><span class="line"><span class="string">    port:      uint16</span></span><br><span class="line"><span class="string">    logLevel:  "debug" | *"info" | "warn" | "error" | "critical"</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h1 id="処理の流れ"><a href="#処理の流れ" class="headerlink" title="処理の流れ"></a>処理の流れ</h1><p>それでは実装していきます。</p><h2 id="cueファイルを読み込んでバリデーション"><a href="#cueファイルを読み込んでバリデーション" class="headerlink" title=".cueファイルを読み込んでバリデーション"></a>.cueファイルを読み込んでバリデーション</h2><p>前回のエントリーで、CUEのバリデーションの基本的な戦術について次のように紹介しました。</p><blockquote><p>CUEはJSONと違って、同じキーの定義が複数あってもエラーになりません。登場するたびに、制約が掛け合わされていくような感じです。これを応用して型定義を行なっていきます。複数の条件をかけあわせていく中で矛盾が出ると「コンフリクトがあった」といった感じでエラーになります。</p></blockquote><p>GoのAPIも流れとしては同じです。アプリケーションの設定ファイルと、スキーマ定義の両方のインスタンスを作成し、その２つのインスタンスをマージします。そうすると実際の値とスキーマの条件が両方定義されたインスタンスが作成できるので、バリデーションを行います。</p><p>スキーマも同じフォーマットに従っているので、アプリケーションの設定フォーマットに.cueを使えば、利用者側で新しく制約を追加することも可能です。例えば、デプロイ用の環境はproduction/staging/performancetest/developmentから選ぼう、それから外れたものはエラーにする、みたいなことが可能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ランタイムの宣言（ゼロ初期化でOK）</span></span><br><span class="line"><span class="keyword">var</span> r cue.Runtime</span><br><span class="line"></span><br><span class="line"><span class="comment">// スキーマのインスタンスを作成</span></span><br><span class="line">schemaInstance, err := r.Compile(<span class="string">"schema.cue"</span>, schema)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 設定ファイルの方のインスタンスを作成</span></span><br><span class="line">valueInstance, err := r.Compile(filePath, reader)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Parse CUE file error: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// マージすると、また同じ形式(cue.Instance)の合成されたインスタンスが作られる</span></span><br><span class="line">merged := cue.Merge(schemaInstance, valueInstance)</span><br><span class="line"><span class="comment">// バリデーション</span></span><br><span class="line">err = merged.Value().Validate()</span><br></pre></td></tr></table></figure><p><code>r.Compile()</code>の最後の引数は、ドキュメントを見るとinterface{}型の引数ですが、io.Readerでも、[]byteでも、stringでも動くというAPIになっています。他には見ない設計で面白いですね。</p><h2 id="JSON-YAMLも読み込む"><a href="#JSON-YAMLも読み込む" class="headerlink" title="JSON/YAMLも読み込む"></a>JSON/YAMLも読み込む</h2><p>JSON/YAMLファイルを読み込み、.cueと同様にcue.Instanceのインスタンスを作成してみます。最初のコードは.cueしか読みませんが、拡張子を見て他の形式も読み込めるようにします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> valueInstance *cue.Instance</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> filepath.Ext(filePath) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">".cue"</span>:</span><br><span class="line">valueInstance, err = r.Compile(filePath, reader)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Parse CUE file error: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">".json"</span>:</span><br><span class="line">decoder := json.NewDecoder(&amp;r, filePath, reader)</span><br><span class="line">valueInstance, err = decoder.Decode()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Parse JSON file error: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">".yaml"</span>:</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">".yml"</span>:</span><br><span class="line">valueInstance, err = yaml.Decode(&amp;r, filePath, reader)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Parse YAML file error: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"file extension should be .cue, .json, .yaml or .yml, but %s"</span>, filepath.Ext(filePath))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要注意ポイントとしては、.cueも.jsonも.yamlも、それぞれのパッケージで定義されている関数を読み込むだけですが、それぞれ、関数の形が結構違っていて、パッケージ名だけを書き換えればOKとはいかない点です。</p><h2 id="構造体へのマッピング"><a href="#構造体へのマッピング" class="headerlink" title="構造体へのマッピング"></a>構造体へのマッピング</h2><p>encoding/jsonなどの標準パッケージ同様に、タグが付与されている構造体に設定ファイル内部の値を読み込んで割り当てていくことが可能です。そのために構造体を定義します。このマッピング用の構造体は基本的にJSON用のものとほぼ同じです。JSON用のタグがそのまま利用できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">Port <span class="keyword">uint16</span> <span class="string">`json:"port"`</span></span><br><span class="line">LogLevel <span class="keyword">string</span> <span class="string">`json:"logLevel"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>読み込むコードはencoding/jsonパッケージを使ったことがあればおなじみですが、JSONの場合はjsonからGoの構造体に値を入れるのをDecode、Goの構造体からシリアライズしてio.Writerを使ってファイルに変換したりする方をEncodeと呼びましたが、cueはなぜか逆転しています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> config Config</span><br><span class="line">codec := gocodec.New(&amp;r, &amp;gocodec.Config&#123;&#125;)</span><br><span class="line"><span class="comment">// 最初紹介した、スキーマと設定ファイルをマージしたcueのインスタンスを受け取り、構造体にマップ</span></span><br><span class="line">err = codec.Encode(merged.Value(), &amp;config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Encode error: %w"</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://godoc.org/cuelang.org/go/encoding/gocode/gocodec#Codec.ExtractType" target="_blank" rel="noopener">また、<code>cue</code> タグを使うことで、構造体の中に制約を書くことができます</a>。プログラムと近いところにスキーマ定義を置いておきたい場合にはこちらの方がスムーズでしょう。</p><h1 id="完成したコード"><a href="#完成したコード" class="headerlink" title="完成したコード"></a>完成したコード</h1><p>今まで紹介してきた処理をまとめたのが次のコードです。io.Reader(ファイルでも何でも)と、フォーマット識別のためのファイル名を受け取ると、バリデーション・補完をした結果を構造体にマップして返します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"path/filepath"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"cuelang.org/go/cue"</span></span><br><span class="line"><span class="string">"cuelang.org/go/encoding/gocode/gocodec"</span></span><br><span class="line"><span class="string">"cuelang.org/go/encoding/json"</span></span><br><span class="line"><span class="string">"cuelang.org/go/encoding/yaml"</span></span><br><span class="line"><span class="string">"go.pyspa.org/brbundle"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> schema = <span class="string">`</span></span><br><span class="line"><span class="string">port: uint16</span></span><br><span class="line"><span class="string">logLevel:  "debug" | *"info" | "warn" | "error" | "critical"</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">Port <span class="keyword">uint16</span> <span class="string">`json:"port"`</span></span><br><span class="line">LogLevel <span class="keyword">string</span> <span class="string">`json:"logLevel"`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getConfig</span><span class="params">(filePath <span class="keyword">string</span>, reader io.Reader)</span> <span class="params">(*Config, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> r cue.Runtime</span><br><span class="line"></span><br><span class="line">schemaInstance, err := r.Compile(<span class="string">"schema"</span>, schema)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> valueInstance *cue.Instance</span><br><span class="line"><span class="keyword">switch</span> filepath.Ext(filePath) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">".cue"</span>:</span><br><span class="line">valueInstance, err = r.Compile(filePath, reader)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Parse CUE file error: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">".json"</span>:</span><br><span class="line">decoder := json.NewDecoder(&amp;r, filePath, reader)</span><br><span class="line">valueInstance, err = decoder.Decode()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Parse JSON file error: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">".yaml"</span>:</span><br><span class="line"><span class="keyword">fallthrough</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">".yml"</span>:</span><br><span class="line">valueInstance, err = yaml.Decode(&amp;r, filePath, reader)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Parse YAML file error: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"file extension should be .cue, .json, .yaml or .yml, but %s"</span>, filepath.Ext(filePath))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">merged := cue.Merge(schemaInstance, valueInstance)</span><br><span class="line">err = merged.Value().Validate()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Validation error: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> config Config</span><br><span class="line">codec := gocodec.New(&amp;r, &amp;gocodec.Config&#123;&#125;)</span><br><span class="line">err = codec.Encode(merged.Value(), &amp;config)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Encode error: %w"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;config, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用する側のコードはこんな感じですかね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"flag"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"go.uber.org/zap"</span></span><br><span class="line">    <span class="string">"go.uber.org/zap/zapcore"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> configPath = flag.String(<span class="string">"conf"</span>, <span class="string">"config.cue"</span>, <span class="string">"Config file"</span>)</span><br><span class="line">    flag.Parse()</span><br><span class="line">    c, err := os.Open(*configPath)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">"Can't open config file %s: %v"</span>, *configPath, err)</span><br><span class="line">    &#125;</span><br><span class="line">    config, err := getConfig(*configPath, c)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">"Can't read config file %s: %v"</span>, *configPath, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ↓ここから先は正しい設定ファイルが読み込めて設定済みの状態でロジックを書き始められる</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ロガーのZapのログレベル設定</span></span><br><span class="line">    <span class="keyword">var</span> level zapcore.Level</span><br><span class="line">    <span class="keyword">var</span> zc zap.Config</span><br><span class="line">    zc.Level.SetLevel(level.Set(config.LogLevel))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HTTPサーバーのポートの設定</span></span><br><span class="line">    http.HandleFunc(<span class="string">"/bar"</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        fmt.Fprintf(w, <span class="string">"Hello, %q"</span>, html.EscapeString(r.URL.Path))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    log.Fatal(http.ListenAndServe(fmt.Sprintf(<span class="string">":%d"</span>, config.Port), <span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>CUEのGoのAPIを使ってみました。</p><p>構造体へのマップ機能を使ってしまえば、アプリケーション側での準備はJSONとそれほど変わりませんし（読み込み部分は今回のサンプルのほぼコピペで毎回カバーできるはず）、アプリケーションコード側で設定を利用するときにコード補完も利用できて実装は捗るでしょう。その構造体も、前々回のエントリーで紹介したように、最初にJSONの設定ファイルのサンプルを作ればJSON-to-Goを利用してマッピング用の構造体もかんたんに作れることも紹介しました。</p><p>Goは文法がシンプルが故に、設定値の異常チェックやら、値が設定されてなかったらデフォルト値を利用するというコード（JSやRubyの <code>config.port || 8080</code>とかPythonの<code>config.port or 8080</code>みたいなやつ）が冗長になりがちです。特にライブラリとして不特定多数から利用されるのを想定して丁寧にエラー処理をしようとすると手間暇が多くなります。</p><p>CUEのissueにも上がっているように、まだエラーメッセージが少々わかりにくいというのはありますが、CUE経験値が上がれば素早く問題を見つけられるようになるでしょうし、今後勝手に改善されていくでしょう。</p><p>今回のサンプルでかんたんに説明するためにログレベルだとかポートだとかを設定するという例にしましたが、本来、これらは環境変数でも設定できるようにするのが筋ですし、どちらかというとdocker-compose並に複雑な設定ファイルが必要となるような構成情報の記述とかをすると、俄然CUEの能力が発揮されてくるでしょう。個人的にもそのようなケースでちょうど設定ファイルを作る要件があったのでCUEを利用し始めていたところです。今すぐCUEを全面的に使おう、というのをおすすめするわけではなく、大規模な設定ファイルが必要な案件があったときのために、ツールボックスに備えておくと憂いなしかな、と思いました。</p><hr><p>関連記事：</p><ul><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li><li><a href="/articles/20191002/">CUEを試して見る</a></li><li><a href="/articles/20190814/">WAFとして go-swagger を選択してみた</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;人間が読み書きする設定ファイルについて、2つのエントリーを紹介してきました。今回は第3段です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/articles/20191001/&quot;&gt;一周回って、人間が読み書きする設定ファイルはJSONが良いと思った&lt;/a&gt;&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="JSON" scheme="https://future-architect.github.io/tags/JSON/"/>
    
      <category term="CUE" scheme="https://future-architect.github.io/tags/CUE/"/>
    
  </entry>
  
  <entry>
    <title>フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</title>
    <link href="https://future-architect.github.io/articles/20191029/"/>
    <id>https://future-architect.github.io/articles/20191029/</id>
    <published>2019-10-29T13:40:26.000Z</published>
    <updated>2019-10-29T02:05:41.303Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。フューチャー 3 年目の柏木です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>React、Next.js を触り始めて２年半ほど経ちました。<br>これまでによくつまずいたポイントから、自分なりのノウハウを言語化してみます。</p><h1 id="想定する読者"><a href="#想定する読者" class="headerlink" title="想定する読者"></a>想定する読者</h1><ul><li>React、Redux（、Next.js）を初めて触る人</li><li>システム開発の中で初めてフロントエンドを担当することになった人</li></ul><h1 id="開発で使用している技術要素"><a href="#開発で使用している技術要素" class="headerlink" title="開発で使用している技術要素"></a>開発で使用している技術要素</h1><ul><li>Node.js（10.5.0）</li><li>Express（4.16.3）</li><li>Next.js（5.1.0）</li><li>React.js（16.4.1）</li><li>Redux（3.7.2）</li></ul><h1 id="ノウハウたち"><a href="#ノウハウたち" class="headerlink" title="ノウハウたち"></a>ノウハウたち</h1><p>次の1~4について順番に説明していきます</p><ol><li>フロントで持つべきデータの形とデータベースに登録するデータの形は必ずしもイコールではない</li><li>React の各ライフサイクルで適切な処理を行う</li><li>更新を React が正しく検知してくれるよう、値はコピーしてまるっと置き換える</li><li>（おまけ）ライブラリやフレームワークを導入するときは CSS をどれだけカスタマイズできるか注意する</li></ol><h2 id="1-フロントで持つべきデータの形とデータベースに登録するデータの形は必ずしもイコールではない"><a href="#1-フロントで持つべきデータの形とデータベースに登録するデータの形は必ずしもイコールではない" class="headerlink" title="1. フロントで持つべきデータの形とデータベースに登録するデータの形は必ずしもイコールではない"></a>1. フロントで持つべきデータの形とデータベースに登録するデータの形は必ずしもイコールではない</h2><ul><li>データベースに登録する値は、業務要件にもよりますが、出来るだけ冗長な構造を避け、シンプルであるべきだとよく聞きます。</li><li>一方、フロントエンドでは、データベースにある形のままデータを持つことが必ずしもベストではないこともあります。</li><li>例えば、データベースでは下記のような配列のデータを持っていたとします。</li></ul><figure class="highlight json"><figcaption><span>data.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"deta_1"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"xxx"</span>,</span><br><span class="line">      <span class="attr">"param_1"</span>: <span class="string">"xxx"</span>,</span><br><span class="line">      <span class="attr">"param_2"</span>: <span class="string">"xxx"</span>,</span><br><span class="line">      <span class="attr">"param_3"</span>: <span class="string">"xxx"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"yyy"</span>,</span><br><span class="line">      <span class="attr">"param_1"</span>: <span class="string">"yyy"</span>,</span><br><span class="line">      <span class="attr">"param_2"</span>: <span class="string">"yyy"</span>,</span><br><span class="line">      <span class="attr">"param_3"</span>: <span class="string">"yyy"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"zzz"</span>,</span><br><span class="line">      <span class="attr">"param_1"</span>: <span class="string">"zzz"</span>,</span><br><span class="line">      <span class="attr">"param_2"</span>: <span class="string">"zzz"</span>,</span><br><span class="line">      <span class="attr">"param_3"</span>: <span class="string">"zzz"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>フロントでもこのままの形を維持した場合、<code>id</code>が”yyy” であるオブジェクトにアクセスしたい場合、<code>deta_1</code>の配列で For 文を回して検索することになります。</li><li>これでは、<code>deta_1</code>のオブジェクトが 10000 ある場合や、検索したい<code>id</code>が”yyy”の他にいくつもある場合、描画処理のたびに大きな負担がかかってしまいます。</li><li>フロント側で面倒な処理を重ねることは、描画のタイムラグに直結、使うユーザーのストレスを増やしかねません。</li><li>そこでこのデータを、配列ではなく<strong>id をキーとしたオブジェクト</strong>で持つようにします。</li><li>変換するタイミングは、データを取得してフロントに返ってきた直後です。</li><li>例えば私のプロジェクトでは、API コールは画面初期表示時の場合<code>getInitialProps</code>（Next.js の機能）の中、イベント発火の場合<code>actions</code>（Redux の機能）内で行っています。下記例は<code>actions</code>内でデータ取得した時の想定です。</li></ul><figure class="highlight javascript"><figcaption><span>例）xxx/actions/testpage.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrangeDataForFront = <span class="function"><span class="params">data_1</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, ...data_1.map(<span class="function"><span class="params">data</span> =&gt;</span> (&#123; [data.id]: data &#125;)));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> searchTest = <span class="function"><span class="params">parameter</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> dispatch =&gt; &#123;</span><br><span class="line">    <span class="comment">//APIコールでデータを取得</span></span><br><span class="line">    <span class="keyword">const</span> result = res.json();</span><br><span class="line">    <span class="keyword">const</span> data_1ForFront = arrangeDataForFront(result.data_1);</span><br><span class="line">    <span class="built_in">console</span>.log(data_1ForFront);</span><br><span class="line">    <span class="comment">//&#123; xxx:</span></span><br><span class="line">    <span class="comment">//    &#123; id: 'xxx', param_1: 'xxx', param_2: 'xxx', param_3: 'xxx' &#125;,</span></span><br><span class="line">    <span class="comment">//  yyy:</span></span><br><span class="line">    <span class="comment">//    &#123; id: 'yyy', param_1: 'yyy', param_2: 'yyy', param_3: 'yyy' &#125;,</span></span><br><span class="line">    <span class="comment">//  zzz:</span></span><br><span class="line">    <span class="comment">//    &#123; id: 'zzz', param_1: 'zzz', param_2: 'zzz', param_3: 'zzz' &#125;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//フロントではdata_1ForFrontでやりとりする</span></span><br><span class="line">    dispatch(&#123;</span><br><span class="line">      type: ***,</span><br><span class="line">      data_1: data_1ForFront,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>これで、目的のデータには<code>deta_1[yyy]</code>で参照できるようになりました。</li><li>このようにアクセスしやすいデータの形を作ることは、描画の際の負担を減らし、無駄な処理によるバグを生みだしにくくすることに繋がります！</li></ul><h2 id="2-React-の各ライフサイクルで適切な処理を行う"><a href="#2-React-の各ライフサイクルで適切な処理を行う" class="headerlink" title="2. React の各ライフサイクルで適切な処理を行う"></a>2. React の各ライフサイクルで適切な処理を行う</h2><ul><li><a href="https://ja.reactjs.org/docs/state-and-lifecycle.html" target="_blank" rel="noopener">React</a>には様々なライフサイクルのメソッドがあります。また、<a href="https://nextjs-docs-ja.netlify.com/docs/#%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E3%83%95%E3%82%A7%E3%83%83%E3%83%81%E3%81%A8%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB" target="_blank" rel="noopener">Next.js</a>も親コンポーネントで使えるデータ取得のメソッドが存在します。（それぞれのメソッドの特徴については上記公式ドキュメントに詳細に記載されているので割愛します。）</li><li>これらのライフサイクルをそれぞれのコンポーネントで使い分け、<strong>必要な時に必要な処理が適切に行われる</strong>ことが、React での開発の鍵なのではないかと個人的に思っています。</li><li>ハマった失敗談の例<ul><li>画面をリロードした時は検索して描画するまで想定通りに動くが、画面上でボタンをクリックして検索するとエラーになってしまう。実は<code>getInitialProps</code>に実装した必要な処理は、初期描画の時しか呼ばれていなかった !</li><li>子供コンポーネントでのイベント発火時に親コンポーネントの<code>onChange</code>メソッドをコールパックしたら、子供コンポーネントの値が変わる度に親コンポーネントも再描画され、レンダリングに大変な時間がかかってしまった！</li></ul></li><li>このように自分の予期せぬところで値が更新されてしまうと、不具合がおきた時の切り分けが難しくなってしまいます。</li><li>それぞれのメソッドで適切な処理をコードにまとめると以下のような感じです。</li></ul><figure class="highlight javascript"><figcaption><span>testpage.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestPage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="comment">//画面初期表示のとき一度だけ呼ばれる</span></span><br><span class="line">        <span class="comment">//（例）サーバー通信の不要な初期値の定義（stateなど）、メソッドのbind</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> getInitialProps(&#123; query &#125;) &#123;</span><br><span class="line">        <span class="comment">//画面初期表示のとき一度だけ呼ばれる</span></span><br><span class="line">        <span class="comment">//Next.jsの機能で、サーバーサイドで処理が行われる</span></span><br><span class="line">        <span class="comment">//（例）APIをコールして初期値を取得する</span></span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="comment">//画面初期表示のとき一度だけ呼ばれる</span></span><br><span class="line">        <span class="comment">//クライアント側でしか行えない処理</span></span><br><span class="line">        <span class="comment">//（例）タイムスタンプのデータをクライアントのタイムゾーンの日付に変換する</span></span><br><span class="line">    &#125;</span><br><span class="line">    onChangeXXX()&#123;</span><br><span class="line">        <span class="comment">//イベント発火時に呼ばれる</span></span><br><span class="line">        <span class="comment">//bindしていないメソッドだとレンダリングの度に呼ばれることがあるので注意</span></span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="comment">//画面をレンダリングする度に呼ばれる</span></span><br><span class="line">        <span class="comment">//描画のためだけに使う変数の定義</span></span><br><span class="line">        <span class="comment">//（例）const isXXX = this.props.xxx;</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="comment">//isXXXを用いたコンポーネントの描画</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> TestPage;</span><br></pre></td></tr></table></figure><ul><li>データの流れがわからなくなってしまったら、書こうとしている処理が、どういったタイミングで行われて欲しいかを一度図にして整理してみると、すっきりすると思います。</li></ul><img src="/images/20191029/photo_20191029_01.png"><p>※<a href="https://www.atmarkit.co.jp/ait/articles/1803/12/news012.html" target="_blank" rel="noopener">BFF（Backend For Frontend）</a> とは</p><h2 id="3-更新を-React-が正しく検知してくれるよう、値はコピーしてまるっと置き換える"><a href="#3-更新を-React-が正しく検知してくれるよう、値はコピーしてまるっと置き換える" class="headerlink" title="3. 更新を React が正しく検知してくれるよう、値はコピーしてまるっと置き換える"></a>3. 更新を React が正しく検知してくれるよう、値はコピーしてまるっと置き換える</h2><ul><li>配列で持っているデータの値を更新したはずなのに、描画してみたらうまく行かない、、、、、となったことはありませんか。</li><li>実は、React では差分検知は「<strong>浅い比較</strong>」で行われます。</li><li>そのため、下記のデータの項目<code>paramC</code>の値を更新したい場合、</li></ul><figure class="highlight json"><figcaption><span>arrayA.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">"object1"</span> : &#123;</span><br><span class="line">        <span class="attr">"paramC"</span> : <span class="string">"xxx"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"object2"</span> : &#123;</span><br><span class="line">        <span class="attr">"paramC"</span>: <span class="string">"yyy"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"object3"</span> : &#123;</span><br><span class="line">        <span class="attr">"paramC"</span>: <span class="string">"zzz"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>reducer を下記のように実装するとデータは更新されるが再レンダリングは行われない状態になります。</li></ul><figure class="highlight javascript"><figcaption><span>reducers/test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// actionで`arrayA`を作り直してreducerに渡してしまうと差分が検知されない</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> testReducer = <span class="function">(<span class="params">&#123; arrayA = [] &#125; = &#123;&#125;, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"NG_ASSIGNMENT"</span>:</span><br><span class="line">      <span class="keyword">if</span> (action.arrayA) &#123;</span><br><span class="line">        arrayA = action.arrayA;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    arrayA</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>そこで下記のようにスプレッド演算子でコピーするようにします。</li></ul><figure class="highlight javascript"><figcaption><span>reducers/test.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// actionからは`objectB`を渡し、reducerで`arrayA`に含める処理を行う</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> testReducer = <span class="function">(<span class="params">&#123; arrayA = [] &#125; = &#123;&#125;, action</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"OK_ASSIGNMENT"</span>:</span><br><span class="line">      <span class="keyword">if</span> (action.objectB) &#123;</span><br><span class="line">        arrayA = [...arrayA, ...action.objectB];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    arrayA</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>こうすることで、<code>arrayA</code>の更新が画面でも検知され、再レンダリングが行われます。</li><li>注意すべきなのは、スプレッド演算子は第一階層までしかコピーできないことです。</li><li>そのため下記のようなデータ構造で<code>paramC</code>を更新するためには、<code>JSON.stringify()</code>を用いて強制的に値の変更を検知させるか、<code>arrayA</code>でなく<code>object1</code>で更新するなど、更新検知のオブジェクトの粒度を見直した方が良いでしょう。</li></ul><figure class="highlight json"><figcaption><span>arrayA.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    <span class="string">"object1"</span> : &#123;</span><br><span class="line">        <span class="attr">"arrayB"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"paramC"</span>: <span class="string">"xxx"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="4-（おまけ）ライブラリやフレームワークを導入するときは-CSS-をどれだけカスタマイズできるか注意する"><a href="#4-（おまけ）ライブラリやフレームワークを導入するときは-CSS-をどれだけカスタマイズできるか注意する" class="headerlink" title="4. （おまけ）ライブラリやフレームワークを導入するときは CSS をどれだけカスタマイズできるか注意する"></a>4. （おまけ）ライブラリやフレームワークを導入するときは CSS をどれだけカスタマイズできるか注意する</h2><ul><li>Javasript 関連のライブラリは多種多様であり、加えて「npm」というパッケージ管理ツールのおかげで、コマンドを打つだけでやりたいことをやってくれる外部ライブラリがサクッと入られます。</li><li>また、React であれば Material UI などのフレームワークも充実しており、見た目が統一しやすく簡単に実装できるので取り入れるメリットは大きいと思います。</li><li>ただ一点注意が必要なのは、ライブラリやフレームワークの内部で設定されている CSS のカスタマイズには工夫が必要であるということです。<ul><li>過去失敗談として、要件に適したライブラリを導入し、要望の画面イメージに合わせていざ見た目を整えようとしたところ、調整に１日ほど溶かし、結果的に<code>!important</code>で内部の CSS をオーバーライドする羽目になったことがあります。。</li></ul></li><li>例えば前述の Material UI は<a href="https://material-ui.com/customization/components/" target="_blank" rel="noopener">公式ドキュメント</a>にも記載があるようにユーザーがカスタマイズしやすいフレームワークですが、このように、見た目のためのプロパティ（＝ライブラリ・フレームワークを使う人が調整可能な部分）がどれだけ準備されているかを最初に把握して、自分たちの作るデザインとどれだけすり合わせが必要かを知っておくといいと思います。</li></ul><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><ul><li>これまでにお伝えしたこと</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">フロントで持つべきデータの形とデータベースに登録するデータの形は必ずしもイコールではない</span><br><span class="line">Reactの各ライフサイクルで適切な処理を行う</span><br><span class="line">更新をReactが正しく検知してくれるよう、値はコピーしてまるっと置き換える</span><br><span class="line">（おまけ）ライブラリやフレームワークを導入するときはCSSをどれだけカスタマイズできるか注意する</span><br></pre></td></tr></table></figure><ul><li>React に限らず、フロントエンドはデータのやり取り・描画・見た目が密接に関連しており、同時に考えることが多いですが、思った通りに動いた時は本当に楽しいです！使う人に一番近く、いろんなフィードバックをいただけるのもフロント開発の醍醐味だと思います。</li><li>少しでも開発の手が止まった時のヒントになれば幸いです。</li></ul><hr><p>関連記事：</p><ul><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li><li><a href="/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。フューチャー 3 年目の柏木です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;React、Next.js を触り始めて２年半ほど経ちました。
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="React" scheme="https://future-architect.github.io/tags/React/"/>
    
      <category term="Frontend" scheme="https://future-architect.github.io/tags/Frontend/"/>
    
  </entry>
  
  <entry>
    <title>Anthosについて改めて知る(GCPUG Anthos day 参加レポ)</title>
    <link href="https://future-architect.github.io/articles/20191025/"/>
    <id>https://future-architect.github.io/articles/20191025/</id>
    <published>2019-10-25T03:38:13.000Z</published>
    <updated>2019-10-25T03:51:28.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>初めまして、TIG DXユニットの伊藤です。9月にフューチャーに入社しました。前職ではRuby on Railsを使ったWebサイトの開発を行っており、フロントからインフラまで管理をしておりました。現在は日々知識を取り入れながら、GCPの開発支援を担当しております。<br>プライベートでは、<a href="https://cloudnativedays.jp/cndt2019/" target="_blank" rel="noopener">CloudNative Days Tokyo 2019/OpenStack Days Tokyo 2019</a>のボランティアスタッフをやったり、現在も来年に向けたミーティングなどに参加しております。</p><h1 id="GCPUG-Anthos-dayに参加した"><a href="#GCPUG-Anthos-dayに参加した" class="headerlink" title="GCPUG Anthos dayに参加した"></a>GCPUG Anthos dayに参加した</h1><p>2019/10/16(水)に開催された<a href="https://gcpug-tokyo.connpass.com/event/149049/" target="_blank" rel="noopener">GCPUG Anthos day</a>に参加してきました。今年のGoogle Cloud Next ‘19 サンフランシスコで発表されて以来話題にはなっているけど、まだまだ事例も少なくてわからないことが多いAnthosについて知るいい機会になりました。ここでは、Anthos dayで聞いたこと、少し追加で調べたことを書いていきます。</p><h2 id="Anthosとは"><a href="#Anthosとは" class="headerlink" title="Anthosとは"></a>Anthosとは</h2><p>コンテナ化されたアプリケーションをクラウドとオンプレミスのどちらでも実行可能にするプラットフォームで、コアのサービスはGKEになります。前身はGoogle Service Platformであり、今年のGoogle Cloud NextでAnthosとして正式発表されました。今回のセッション中では「ハイブリッド・マルチクラウド環境で利用できる<strong>アプリケーション管理プラットフォーム</strong>」と表現されていました。オンプレミス環境や他のクラウドベンダー環境をGCP環境から管理できるサービスです。<br>通常のGCP環境は従量課金制を取っていましたが、Anthosはライセンス契約となっています。ライセンスに含まれるのは</p><ul><li>コンテナ管理</li><li>クラスター管理</li><li>ポリシー管理</li><li>サービス管理</li><li>サーバレス</li></ul><p>の5つであり、サーバー自体の管理とVMware製のvSphereについては各々が管理する必要があります。また、ライセンスにはGCP上のみで利用するケースと、オンプレミス上のみで利用するケースの2パターンがあります。<br>Anthosのコアコンポーネントは以下の5つになります。</p><ul><li>GKE</li><li>GKE On-Prem</li><li>Anthos Config Management</li><li>Istio on GKE</li><li>Migrate for Anthos</li></ul><p>今回はこの中からピックアップして紹介していきます。</p><h3 id="GKE-On-Prem"><a href="#GKE-On-Prem" class="headerlink" title="GKE On-Prem"></a>GKE On-Prem</h3><p>VMware製のvSphere上で動作するGKEです。マネージドなKubernetesをオンプレミス環境などで運用できるため、自前で構築するより簡便にできるメリットがあります。GKE On-Premのアップグレード検証はGoogle側が行い、またCloud Consoleを介してクラウドとオンプレのクラスタを管理できるため、モニタリングやポリシー管理も一括して行えます。</p><h4 id="Googleでサポートしている環境"><a href="#Googleでサポートしている環境" class="headerlink" title="Googleでサポートしている環境"></a>Googleでサポートしている環境</h4><ul><li>vSphere6.5以上</li><li><a href="https://www.f5.com/ja_jp/products/big-ip-services" target="_blank" rel="noopener">F5 BIG-IP</a><ul><li>上記以外のロードバランサーを使いたい場合はマニュアルにすればCitrixなどのロードバランサーも使用可能</li><li>F5以外のロードバランサーはサポート外なのでコンテナをデプロイしたあと、各ノードポートにフォワーディングする必要あり</li></ul></li></ul><p>また、GKEでは対応しているノードプールやクラスターオートスケールには今のところ対応していないようです。</p><h4 id="必要なマシンリソース"><a href="#必要なマシンリソース" class="headerlink" title="必要なマシンリソース"></a>必要なマシンリソース</h4><ul><li>40 vCPU</li><li>100 GB以上のRAM</li><li>770 GB以上のディスク</li></ul><h3 id="Anthos-Config-Management"><a href="#Anthos-Config-Management" class="headerlink" title="Anthos Config Management"></a>Anthos Config Management</h3><p>複数のKubernetesクラスタにまたがるポリシー管理を簡単にしてくれる機能です。各クラスターにはConfig Management OperatorというDeploymentがインストールされていて、Gitリポジトリと常に同期しているそのため、差分比較をして、差分が見つかった場合はGitリポジトリを正として各クラスタに対してポリシーを適用してくれます。万が一、人為的にポリシーがクラスターから削除されてもGitを正として再適用されます。</p><h3 id="Anthos-Service-Mesh"><a href="#Anthos-Service-Mesh" class="headerlink" title="Anthos Service Mesh"></a>Anthos Service Mesh</h3><p>Googleが提供するフルマネージドのIstioです。GKEの場合にはマスターはGoogle管理になり、ノードはユーザーが管理する一方でAnthos Service MeshについてはIstioのコントロールプレーン相当についてはGoogleの管理になりますが、サイドカープロキシ(データプレーン)についてはユーザー管理となります。<br>以下が図示したものになります。</p><img src="/images/20191025/photo_20191025_01.png"><p>こちらの図では、PodのアプリケーションコンテナとサイドカーコンテナとしてデプロイされているEnvoy Proxy、またIstioのコントロールプレーンを示しています。Pod内にあるサイドカープロキシがIstioのコントロールプレーンと通信していることで、可観測性、トラフィックコントロールが実現します。また可観測性の中にはモニタリングと言っても、サービス間の依存関係や通信状況、サービス間の様々なメトリクスを収集して可視化できるようになります。セキュリティについては各アプリケーションコンテナがサイドカープロキシにlocalhostで接続し、他のアプリケーションコンテナとプロキシを介して通信することで保たれます。</p><h2 id="料金形態"><a href="#料金形態" class="headerlink" title="料金形態"></a>料金形態</h2><p>これまででも少し触れましたが、GCPは使った分だけ支払う従量課金制を取っている一方で、Anthosはライセンス販売になります。そのため、使用するに当たっては事前にGoogle側への問い合わせなどが必要になってきます。およその料金感はコア数に比例して値段が上がっていくようです。</p><h2 id="ユースケース"><a href="#ユースケース" class="headerlink" title="ユースケース"></a>ユースケース</h2><h3 id="マルチクラウド利用"><a href="#マルチクラウド利用" class="headerlink" title="マルチクラウド利用"></a>マルチクラウド利用</h3><ul><li>リージョン障害が発生した時にGCP環境とその他のクラウド環境とのスイッチを行えるようにしておく<ul><li>GCP環境はActive、他環境はStandbyにして有事のときはトラフィックを切り替える</li><li>肝になってくるのがDBの同期<ul><li>DB自体のクラスタリングの機能</li><li>ニアリアルで同期させるツールの使用(Aloomaなど)</li></ul></li></ul></li></ul><h3 id="オンプレは使いたいがモダナイズされた環境も使いたい"><a href="#オンプレは使いたいがモダナイズされた環境も使いたい" class="headerlink" title="オンプレは使いたいがモダナイズされた環境も使いたい"></a>オンプレは使いたいがモダナイズされた環境も使いたい</h3><ul><li>セキュリティレベルとして、オンプレにデータを置かなければならない場合<ul><li>医療系や金融系のデータ</li></ul></li><li>オンプレ環境から一部モダナイズさせたい場合</li></ul><h2 id="ハマりどころ"><a href="#ハマりどころ" class="headerlink" title="ハマりどころ"></a>ハマりどころ</h2><h3 id="バージョンアップ"><a href="#バージョンアップ" class="headerlink" title="バージョンアップ"></a>バージョンアップ</h3><ul><li>リリースノートに乗らないマイナーアップデートが起こる<ul><li>突然の挙動が変更されてなおかつ下位互換性がほぼない</li><li>現段階の解決策は消してもいいテスト環境を事前に作成しておいてパスしたら本環境のアップデートをすることを勧められていました。また、安定したバージョンになるまで待つことも大事です。</li><li>ドキュメントは疑ってかかる必要ありだそう。</li></ul></li></ul><h3 id="特にオンプレに作る場合-初期デザイン"><a href="#特にオンプレに作る場合-初期デザイン" class="headerlink" title="(特にオンプレに作る場合)初期デザイン"></a>(特にオンプレに作る場合)初期デザイン</h3><ul><li>初期から作ると結合デザインで考慮することが多く、設計、検証で潰す必要がある<ul><li>サブネットの切り直しが大変</li><li>解決策<ul><li>現時点で対応できないものを含めて、優先度を決める</li><li>可能であれば、vSphereなど専門性が必要だから、コンテナ導入とかと分けて体制を組んだほうが早くできる</li><li>ベストプラクティスはみんなで共有</li></ul></li></ul></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Anthosは発表されて以来、あまり情報が飛び交っていない(Anthosで調べても4月の記事がとても多い)と思っていましたが、今回料金体系や実際の稼働の仕組みなど調べているだけでは分からない情報が多く聞けました。<br>ベータ版になっているサービスもいくつかありますが、それらも情報を常に目を光らせながら、GAを待ちましょう！</p><hr><p>関連記事：</p><ul><li><a href="http://localhost:4000/articles/20191017/" target="_blank" rel="noopener">GKEクラスタに割り当てるCIDRを設計する</a></li><li><a href="/articles/20190820/">初めてのGCPで環境構築してハマったこと</a></li><li><a href="/articles/20190927/">Let’s Try GCP #2 ～Cloud FunctionをVPC connectorと一緒に使ってみる～</a></li><li><a href="/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li><li><a href="/articles/20190827/">GKEのPodから異なるプロジェクトのIPアドレスへ接続できずハマった話</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;初めまして、TIG DXユニットの伊藤です。9月にフューチャーに入社しました。前職ではRuby on Railsを使ったWe
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Anthos" scheme="https://future-architect.github.io/tags/Anthos/"/>
    
  </entry>
  
  <entry>
    <title>テキストアナリティクスシンポジウム開催報告&amp;ACL2019参加報告</title>
    <link href="https://future-architect.github.io/articles/20191024/"/>
    <id>https://future-architect.github.io/articles/20191024/</id>
    <published>2019-10-24T01:36:57.000Z</published>
    <updated>2019-10-24T01:48:47.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>みなさんこんにちは😃</p><p>Strategic AI Group (SAIG)の水本です。</p><p>2019年9月27日、28日にフューチャーにて、第15回テキストアナリティクス・シンポジウムが開催され、SAIGから貞光、田中と私が講演を行いましたので、そちらを紹介したいと思います。</p><p>また、少し前のことになりますが2019年7月28日〜8月2日にイタリアのフィレンツェで開催された自然言語処理分野の国際会議に参加して、ワークショップですが前職の研究成果を発表してきましたので、合わせて報告したいと思います。</p><h1 id="第15回テキストアナリティクス・シンポジウム開催報告"><a href="#第15回テキストアナリティクス・シンポジウム開催報告" class="headerlink" title="第15回テキストアナリティクス・シンポジウム開催報告"></a>第15回テキストアナリティクス・シンポジウム開催報告</h1><p>9月27日、28日にフューチャーのオフィスでシンポジウムが開催されました！自然言語処理の研究会はいくつかあるのですが、その中でも産業界の方の参加が多いテキストアナリティクス・シンポジウムをフューチャーで開催できるということで楽しみにしていました。<br>また、フューチャー開催ということもあり、SAIGチームからも3件の講演を行いました！</p><p>シンポジウムでは、2日間でおよそ130名の参加者にお集まりいただき、活発な議論が交わされていました。<br>プログラムはこちら↓↓<br><a href="http://www.ieice.org/~nlc/tm15a.html" target="_blank" rel="noopener">http://www.ieice.org/~nlc/tm15a.html</a></p><p>フューチャーからは、以下3件の講演を行いました。</p><ol><li>特別講演「人工知能によるプロフェッショナルの理解に向けて～ 言語・音声・画像・グラフ処理を活用した社会実装 ～」　貞光</li><li>依頼講演「ICLR2019参加報告」　貞光、田中</li><li>依頼講演「ACL2019参加報告」　水本</li></ol><h2 id="特別講演"><a href="#特別講演" class="headerlink" title="特別講演"></a>特別講演</h2><p>特別講演では、従来語られることの多かったBPOやギグ・エコノミーに関するAIの取り組みではなく、高い専門性が要求される、プロフェッショナルの仕事に関するAIの取り組みに焦点を当ててお話ししました。<br>このような各領域の深ーい話は普段あまり触れる機会がありませんので、多くの方に興味を持っていただけたと思います。なお、本講演に関連するプレスリリースを本blogの末尾にリンクしておきますので、よろしければ是非ご覧ください。</p><img src="/images/20191024/photo_20191024_01.jpeg" class="img-middle-size"><h2 id="ICLR参加報告"><a href="#ICLR参加報告" class="headerlink" title="ICLR参加報告"></a>ICLR参加報告</h2><p>前半はICLR2019の統計と言語以外に関する研究に注目した紹介となっています。PDFを中まで解析して組織毎に採択数をカウントしているのが頑張りポイントです。（自動処理のため、数え間違い等についてはご容赦ください！）</p><iframe src="//www.slideshare.net/slideshow/embed_code/key/uH0rJgYwGmi7hG" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/TomoyaMizumoto/iclr2019" title="ICLR2019参加報告前半@テキストアナリティクスシンポジウム" target="_blank">ICLR2019参加報告前半@テキストアナリティクスシンポジウム</a> </strong> from <strong><a href="https://www.slideshare.net/TomoyaMizumoto" target="_blank">Tomoya Mizumoto</a></strong> </div><p>後半は、田中から自然言語処理に関連する論文を2本紹介しました。最終日の午前中にNLP系の発表が多くありました。ACLなどと比較しマルチモーダルな研究が多かったです！</p><iframe src="//www.slideshare.net/slideshow/embed_code/key/rDYUSKHcmDgkqV" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/TomoyaMizumoto/iclr2019-183399240" title="ICLR2019参加報告後半@テキストアナリティクスシンポジウム" target="_blank">ICLR2019参加報告後半@テキストアナリティクスシンポジウム</a> </strong> from <strong><a href="https://www.slideshare.net/TomoyaMizumoto" target="_blank">Tomoya Mizumoto</a></strong> </div><img src="/images/20191024/photo_20191024_02.jpeg" class="img-middle-size"><h2 id="ACL参加報告"><a href="#ACL参加報告" class="headerlink" title="ACL参加報告"></a>ACL参加報告</h2><p>シンポジウム内で参加報告が2件あったため、私の方は研究内容の紹介よりも、会議の概要に力を入れた発表内容になっています。シンポジウム中の発表では時間の関係上1件しか論文を紹介できませんでしたが、スライドの方には2件とも載せていますので、シンポジウム参加者の方でも興味があればぜひご覧ください。</p><iframe src="//www.slideshare.net/slideshow/embed_code/key/F6qKpC5oWUlciy" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/TomoyaMizumoto/acl2019" title="ACL2019参加報告@テキストアナリティクスシンポジウム" target="_blank">ACL2019参加報告@テキストアナリティクスシンポジウム</a> </strong> from <strong><a href="https://www.slideshare.net/TomoyaMizumoto" target="_blank">Tomoya Mizumoto</a></strong> </div><img src="/images/20191024/photo_20191024_03.jpeg" class="img-middle-size"><p>ICLRに関しては、すでにフューチャーブログで参加報告を書いているので軽めですが、ACLの方はせっかくなのでもう少し紹介したいと思います。</p><h1 id="ACL2019参加報告"><a href="#ACL2019参加報告" class="headerlink" title="ACL2019参加報告"></a>ACL2019参加報告</h1><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>ACL (Annual Meeting of the Association for Computational Linguistics)は、自然言語処理分野のトップ国際会議で、今年で57回目の開催となりました。<br>バッソ要塞という要塞内での開催でした。</p><img src="/images/20191024/photo_20191024_04.jpeg"><p>外は要塞っぽい雰囲気でしたが、中に入ってしまうと現代的な会議施設でした笑<br>イタリアということで、ピザやパスタは本場の味という感じで美味しかったです。また、フィレンツェの街並みもきれいで見応えがありました〜。<br><img src="/images/20191024/photo_20191024_05.jpeg"></p><p>オープニングで主催者の方も強調していましたが、今年のACLは非常に大規模なものでした。参加者の数が3180人 (2018年は1322人)、論文投稿数が2905件 (2018年は1544件)、発表件数が660件 (2018年が384件)と昨年に比べ2倍程度の規模になっています。</p><p>ACLトレンドとしてここ3年の論文タイトルで特徴的なものを調べた結果、2017年・2018年は<em>neural</em>、<em>learning</em>という単語が特徴的なのに対して、2019年は<em>summarization</em>や<em>unsupervised</em>、<em>generation</em>といった単語が特徴的になっており変化が見られ面白いです。</p><p>個人的に今回のACLでホットだと思った分野は以下の4つでした。</p><ul><li>Bias</li><li>Health</li><li>Evaluation</li><li>Interpretability</li></ul><p>それぞれセッションが独立であったりワークショップがあったりと盛り上がってるテーマでした。<em>Bias</em>は性別や人種など最近世界全体で話題に上がることも多く、自然言語処理でもそのあたり注意した方が良いということで研究が盛んになってきた感じです。<em>Health</em>に関してもカルテの電子化なども進んできたりしてることもあり、言語処理でサポートしたいという動きが出てきているように思います。<em>Evaluation</em>は多様な表現を生成できるようになったた生成系タスク（翻訳、要約など）をちゃんと評価したいということで注目が集まっているように思います。<em>Interpretability</em>は画像や機械学習分野の会議でも盛んに研究されていますが、言語処理でも機械の判断根拠を知るための方法について注目が集まっています。<br>参加報告の論文紹介ではこの中から”Health”、”Evaluation”に関する以下の2本の論文を紹介しました（スライドは↑↑）。</p><ul><li>Extracting Symptoms and their Status from Clinical Conversations</li><li>HighRES: Highlight-based Reference-less Evaluation of Summarization</li></ul><p>実際の医者と患者の会話から症状や状態を抜き出す論文と、要約の評価をリファレンス（正解）を使うのではなく元記事の方の重要単語を使って要約文を評価するといった論文で、新しい方向性ということで紹介しました。</p><h2 id="BEA2019ワークショップ"><a href="#BEA2019ワークショップ" class="headerlink" title="BEA2019ワークショップ"></a>BEA2019ワークショップ</h2><p>前職理研AIPでの研究をACLのワークショップの一つ”<a href="https://sig-edu.org/bea/current" target="_blank" rel="noopener">14th Workshop on Innovative Use of NLP for Building Educational Applications</a>“ (BEA2019)で発表してきましたのでそちらも簡単に紹介します。</p><p>BEA2019は自然言語処理の教育分野への応用についてのワークショップで、文法誤り訂正・自動採点について多く研究発表がされています。”Duolingo”、”Grammarly”、”ETS”などの教育分野で有名な分野がスポンサーになっており、自然言語処理の教育応用分野では最大規模のワークショップです。ACLで参加者や投稿数が増えているという話をしましたが、BEA2019も投稿数が80件程度あり、採択率は約40％とワークショップとしては難しいと言える採択率でした。</p><p>さて、発表した研究ですが、”<a href="https://www.aclweb.org/anthology/W19-4433.pdf" target="_blank" rel="noopener">Analytic Score Prediction and Justification Identification in Automated Short Answer Scoring</a>“というもので、短答式問題の自動採点に関する研究です。</p><p>短答式の問題で日本人に馴染みが深いのは、入試問題でよくある長文読解の記述式問題だと思います。従来の短答式問題の自動採点では、1つの解答に対して1つの点数（全体点）を予測するタスクとして扱っていましたが、本研究では1つの解答に対して複数の点数（項目点）を予測するタスクを新しく提案しました。下の図で”holistic score”となっているのが従来の全体点、”analytic score”となっているのが本研究で新しく扱う項目点です。全体点は項目点の足し算になっており、図の例では減点があるため、3+2-1=4になります。</p><p>項目点は採点基準を元に決められます。項目の数などは問題ごとに異なります。加えて新しいタスクとして、項目点の根拠になる箇所（justification cue）を推定するタスクも提案しました。<br><img src="/images/20191024/photo_20191024_06.png"></p><p>本研究の貢献は、</p><ol><li>2つの新しいタスクの提案、2. 新タスクのためのデータセットの構築、3. 新タスクのための手法の提案の3つです。</li></ol><p>手法としては工夫した点は、</p><ol><li>項目点だけでなく全体点を使って項目点の推定を学習可能</li><li>教師ありアテンションを使うことで、項目点推定性能、根拠の推定性能を向上させる<br>などがあります。</li></ol><p>詳しく知りたい人はぜひ論文を読んでもらえればと思います！</p><p>短答式問題の自動採点は、記述式問題が大学入試の共通試験に導入されるなど、ホットな分野になってきているので、今後ますます色々と研究され発展していく分野の一つだと思います。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>いかがでしたでしょうか😃</p><p>SAIGチームでは国際会議にも積極的に参加し、最先端の技術の情報収集も怠らずに行っています。また、このような参加報告も<strong>力を入れて</strong>行っていますので、これからのSAIGにもご期待くださいー。</p><hr><h1 id="講演に関連するプレスリリース"><a href="#講演に関連するプレスリリース" class="headerlink" title="講演に関連するプレスリリース"></a>講演に関連するプレスリリース</h1><ul><li><a href="https://prtimes.jp/main/html/rd/p/000000336.000004374.html" target="_blank" rel="noopener">ワコールの新しい接客サービス「３D smart &amp; try」のオムニチャネル基盤を開発</a></li><li><a href="https://prtimes.jp/main/html/rd/p/000000332.000004374.html" target="_blank" rel="noopener">ORBISアプリコンテンツ「パーソナルAIメイクアドバイザー」に深層学習技術を提供</a></li><li><a href="https://prtimes.jp/main/html/rd/p/000000322.000004374.html" target="_blank" rel="noopener">メイクアップの第一人者である小林照子のコミュニケーション技術をAI解析</a></li><li><a href="https://prtimes.jp/main/html/rd/p/000000297.000004374.html" target="_blank" rel="noopener">大阪大学、ファンペップと抗体誘導ペプチドを効率的に開発するAIについて共同研究</a></li></ul><hr><p>関連記事：</p><ul><li><a href="/articles/20190627/">人工知能学会（JSAI2019） 参加報告</a></li><li><a href="/articles/20191016/">Software Design 後記</a></li><li><a href="/articles/20190617/">ICLR2019 参加報告ブログ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;みなさんこんにちは😃&lt;/p&gt;
&lt;p&gt;Strategic AI Group (SAIG)の水本です。&lt;/p&gt;
&lt;p&gt;2019
      
    
    </summary>
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>工場をハックするための基本知識　前編</title>
    <link href="https://future-architect.github.io/articles/20191023/"/>
    <id>https://future-architect.github.io/articles/20191023/</id>
    <published>2019-10-23T00:04:03.000Z</published>
    <updated>2019-10-23T03:03:45.413Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>初めまして、TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>所属の栗田です。宇宙物理を専攻して人工衛星を打ち上げた後、とある鉄鋼会社の社内SEとして勤務したのち、フューチャーに入社しました。制御系を中心にしながら、各種システムを担当しています。また、プライベートでも開発を行っており、最近では<a href="https://www.slideshare.net/ShinKurita/my-browser-with-python3-172131107" target="_blank" rel="noopener">PyConJP 2019のLT</a>にて発表を行うなどしています。</p><p>Industry4.0が打ち出されて以降、多くの工場にて各種IT技術を導入しようという試みが行われていますが、基幹系やWeb系を行ってきた方と、従来制御系を取り扱ってきた方の間に大きな隔たりがあるのを見てきました。特に制御系の世界は独特な空間が大きいので、そもそもどのような構成になっているかを説明します。</p><p>以下、一般的な範囲で述べます。</p><h1 id="工場をつくろう"><a href="#工場をつくろう" class="headerlink" title="工場をつくろう"></a>工場をつくろう</h1><p>今回は一番大規模なプロジェクトとして、工場建設をテーマにします。プロジェクトによっては既設の工場に対して手をいれるケースもありますが、基本的な全体構成としては変わりません。よって、気をつけるべきポイントも同様です。</p><p>工場と一言に述べても、規模はさまざまです。下町ロケットにみられるような町工場から、複数の工程からなる大規模工場までさまざまです。複数の工程からなる大規模工場も製鉄のような素材系工場から、自動車工場のように消費者向け製品を直接製造する工場まであります。自動車工場のような所は比較的TVなどにも映りますので、今回は大規模工場をイメージしていきます。</p><h2 id="工場を作る流れ"><a href="#工場を作る流れ" class="headerlink" title="工場を作る流れ"></a>工場を作る流れ</h2><p>工場建設のため今回新たにプロジェクトチームが組織されました。プロジェクトリーダー（PL）を筆頭に、各種関係要素部隊が組織されます。</p><ul><li>プロジェクトリーダー（PL）<ol><li>工場建設部隊<ol><li>土木建設部隊（工場の基礎やガワを作る部隊）</li><li>機械設備部隊（中に設置する機械を担当する部隊）</li><li>電気系統部隊（各種機械へ電源を供給する部隊）</li><li><strong>システム関連部隊（機械を制御したりデータのやり取りをする部隊）</strong></li></ol></li><li>運用部隊<ol><li>現場部隊（工場で働く部隊）</li><li>整備部隊（完成後の工場設備をメンテする部隊）</li><li>システム関連部隊（いわゆるシステムインフラ部隊）</li></ol></li></ol></li></ul><p>各要素舞台はそれぞれベンダを調達し、プロジェクト体制を整えていきます。今回対象とするIT系の方がプロジェクトに入った場合、「工場建設部隊」の「システム関連部隊」になるとします。工場建設部隊は、PLの元、経営戦略で示された内容や運用部隊からのヒアリングを行い、要件定義をして、設計を進めていきます。その中で他のチームに対して要求を行い、一体となって動く工場を設計していきます。その中でお金の勘定や機器の手配スケジュールなどが絡んできますが、今回はシステムを動かすための設計に終始して述べていきます。</p><h1 id="既設含めた全体システム構成"><a href="#既設含めた全体システム構成" class="headerlink" title="既設含めた全体システム構成"></a>既設含めた全体システム構成</h1><p>我々はシステム関連部隊で、現場の各機器へ制御コマンドを送信したり、製造された製品の実績を収集し、適切に管理する必要があります。そのためには、そもそも既設のシステムがどのようになっているかを知る必要があります。そのために、会社全体としてのシステムがどのような形をしているか考えます。</p><h2 id="工場系持つ会社のシステム構成"><a href="#工場系持つ会社のシステム構成" class="headerlink" title="工場系持つ会社のシステム構成"></a>工場系持つ会社のシステム構成</h2><p>ざっくりと、会社のシステム系統をざっくり3つに分離します。もちろん、会社によって分類は違いますので、あくまでざっくりイメージです。</p><img src="/images/20191023/photo_20191023_01.png"><ul><li>基幹系システム：いわゆる業務系システムと呼ばれる部分です。企業の情報システム部分であり、エンタープライズシステムなどとも呼ばれます。POSシステムや人事給与、あるいは財務会計がここに分類されます。</li><li>情報系システム：社内外のコミュニケーションや事務処理の効率化を行うための部分です。所謂OA機器が繋がる領域になります。この情報系システムと基幹系システムが、社内情報システム部隊の範囲のイメージです。</li><li>制御系システム：実際に工場内のNWで各種情報のやり取りを行い、現場の機器を制御する部分です。複数ベンダが入っている場合は比較的汎用なシステムが導入されていることもありますが、特定のベンダによる独自システムが導入され、ロックインされていることもあります。社内SEが担当していることもありますが、ベンダに外注していることも多々あります。</li></ul><p>基幹系と情報系はハードウェア的にも非常に密接していますし、IT系だと基幹系システムのリプレイス案件も少なくないため、馴染み深い方もいらっしゃると思います。外部NWと接続することを前提としているため、セキュリティ対策も十分に行う必要があります。</p><p>一方、制御系システムはリアルタイム制御が必要であり、ウイルス対策ソフトによるスキャンや、OSによるファイアウォールですら嫌われます。そのため制御システムはセキュリティ的に非常に脆弱となり、基幹系と限られた接点で接続されているか、あるいは完全に独立した、クローズドなシステムが構築されていることもあります。</p><h2 id="制御系システムの詳細"><a href="#制御系システムの詳細" class="headerlink" title="制御系システムの詳細"></a>制御系システムの詳細</h2><p>基幹システム側から見ると、制御系システムの入口は何らかのサーバーですが、工場の末端はなんらかの機械設備だったりセンサーだったりします。つまり、その間を繋ぐシステムが必要です。ここで登場するのが、PLC<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>やDCS<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>といった制御系でよく使われるシステムになります。というわけで、制御系システムを細かく分割します。</p><img src="/images/20191023/photo_20191023_02.png"><p>現場の機械類、具体的にはモーターなどを駆動させるのは電気系の制御システム（PLCなど）が入ります。センサや流体制御においては、計装系の制御システム（DCSなど）が入ります。電気系制御システムや計装系制御システムはそれぞれ独立した制御画面を提供あるいは基幹システムと通信していることもありますが、より現場に近い制御系システムはリアルタイム制御が得意な一方で複雑な制御命令が必ずしも得意ではありません。そのバッファとして、制御系の統括管理システム（LinuxやWindowsといったPC。製鉄だと、プロセスコンピュータ、などと呼ぶ。）が、間に入ることもあります。ここは基幹系システムから受けた製造命令を元に適宜PLCやDCSにコマンドを送り、実績データを適宜編集して基幹系システムに結果を返します。昨今流行りの工場IoTなどマイコンを直接現場NWに接続するようなケースだと、此処の統合管理システムを担当する部隊が兼ることもあります。</p><p>我々はIT系技術者なので、このうち統合管理システムを担当するとします。</p><h1 id="システムを動かすために必要な物"><a href="#システムを動かすために必要な物" class="headerlink" title="システムを動かすために必要な物"></a>システムを動かすために必要な物</h1><p>システム構成がなんとなくわかったので、これでどんな機能が必要か定義できます。機能配置が定義できたら、今度は物理的にどんなものが必要かを考えます。平たく言えば、我々が作るのはUIを提供できる（IoT機器などの付帯設備のついた）PCだと考えられるので、ハード配置・電源・ネットワーク配線が必要な要素となります。</p><h2 id="ハード配置"><a href="#ハード配置" class="headerlink" title="ハード配置"></a>ハード配置</h2><p>定義された要件と機能配置から、</p><ul><li>どんなサーバスペックが必要で</li><li>どこに何台のどんなモニタが必要で</li><li>サーバ等を保護するためにどんな容量のUPSが必要で</li><li>どんなIoTデバイス（カメラなど）が必要で</li><li>上記を設置するのにどんな治具やラックが必要で</li><li>etc</li></ul><p>ということが決まります。定めたハード構成に併せて機器を手配する他に、機器を据え付ける為に工事の手配も行います。これを怠ると、例えば工場の天井裏につけるべきカメラを、素人である自分たちでつけるハメになります。</p><h2 id="電源"><a href="#電源" class="headerlink" title="電源"></a>電源</h2><p>どこにどんなハードを設置するか決まると、必要な電気容量が決まります。通常の電化製品のW(ワット)ではなく、VA（ブイエー）単位で計算をし、電気系統部隊に要求をかけておきます。</p><p>電気系統部隊は電力会社から高圧電源を引き込み、それを適宜降圧しながら各設備へ電源供給します。接続されている機器の電気容量に合わせて保護協調の設計をしたりしていますので、正しい電気容量が伝えられていない場合、最悪敷地全体を停電させてしまいます。また、どこにどれだけの電力が必要かを伝えていないとそもそも電気配線の工事がなされたいため、電源が取れずに機器が動かせないということになりかねません。それを防ぐためにも、正しく必要な電源容量を伝える必要があります。また、必要であれば、システム部隊の責任で電気工事の手配をする必要があります。</p><p>電源もネットワーク配線も、中々決まらない事もあるかと思います。その場合は、おおよその値ででも伝える必要があります。というのも、例えばネットワーク配線を地中に埋めるような場合、配管を通しておいてあとからケーブルを通すなどします。おおよその配線量を伝えておくことで、あとから調整が可能となります。仮に配管に余裕がないと、追加が発生した際、敷設を最初からやり直す必要が出てきます。</p><h2 id="ネットワーク配線"><a href="#ネットワーク配線" class="headerlink" title="ネットワーク配線"></a>ネットワーク配線</h2><p>電源と同様に、ハードの位置に併せてネットワーク配線も敷設しないといけません。ネットワーク配線はEthernetケーブルやRS232Cのようなものなどがあります。それを適切に配線してもらうよう、手配する必要があります。なお、他のシステムと接続するネットワーク配線の場合、より明確に「どちらの責任でLANケーブルを引き、どこのHUBに接続するか」のレベルで責任分界点を明確にしておかないと、配線の漏れが発生しうるので注意が必要です。距離によっては光ケーブルを敷設してもらうことにもなります。</p><p>ネットワーク設計においてデータ量に合わせて途中のHUBやルーターのスペックを考えることは当然ですが、Ethernetケーブルの規格も考える必要があります。Cat6やCat6e、最近だとCat7など規格があるので、要件に合わせて適切なケーブルを敷設して貰う必要があります。また、設計によっては予備線を何本か引いておいてもよいかもしれません。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ここまで、工場建設のスタートからハードウェア的に気にするべきところまでをまとめてきました。後編では、実際に制御系システムと通信制御しようとしたときに、何を考える必要があるかを述べていきます。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.nipponsteel.com/tech/report/nssmc/pdf/411-04.pdf" target="_blank" rel="noopener">製鉄プロセス制御への汎用システム適用技術の開発</a></li><li><a href="https://www.nipponsteel.com/tech/report/nssmc/pdf/411-02.pdf" target="_blank" rel="noopener">製鉄設備におけるシステム・計測制御技術の進歩と展望</a></li><li><a href="http://www.shinkoen-m.jp/product/infosystem/factory.html" target="_blank" rel="noopener">情報システムのエンジニアリング&amp;メンテナンス</a></li><li><a href="https://www.nipponsteel.com/common/secure/news/20150407_100_01.pdf" target="_blank" rel="noopener">名古屋製鉄所におけるコークス火災事故および受配電設備の調査に関する報告</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">TIGとはTechnology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。その中でもDXチームは特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">Programmable Logic Controllerのこと。シーケンサとも。従来工場の制御盤にはあった「リレー回路」を置き換える制御装置であり、「ラダー言語」と呼ばれる論理回路の記述方法を用いる。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">Distributed Control System（分散制御システム）のこと。制御システムの一つで、制御装置が1つではなく、複数の制御装置からなるシステムである。制御装置はNWによって互いに監視し、化学プラントや水管理システムなど流体を始めとした工場制御システムで見られる。</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;初めまして、TIG DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnot
      
    
    </summary>
    
      <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
      <category term="Network" scheme="https://future-architect.github.io/tags/Network/"/>
    
      <category term="Factory" scheme="https://future-architect.github.io/tags/Factory/"/>
    
  </entry>
  
  <entry>
    <title>第1回社内ロボコン開催記-ライントレーサー編-</title>
    <link href="https://future-architect.github.io/articles/20191018/"/>
    <id>https://future-architect.github.io/articles/20191018/</id>
    <published>2019-10-18T00:44:58.000Z</published>
    <updated>2019-10-18T10:12:55.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Strategic AI Group所属兼、電子工作部の勝村です。</p><p>電子工作部はフューチャーの社内サークルの一つとして約1年半ほど前に設立されました。電子工作を始めたいという社員の思いから始まったサークルということもあり、未経験者の割合が非常に多いサークルです。<br>※もちろん大ベテランの方も一部参加されています。</p><p>しかし残念なことに個々人では業務やプライベートで電子工作に邁進していたメンバーもいたのですが、サークルとしてのメイン活動はチャットでの情報交換（雑談）となっていました。</p><p>そんな状況の中、1年ほど穏やかな時間を過ごしたのですが、あるメンバーの一言をきっかけに活動の流れが変わり…3ヶ月程で…</p><p>$\huge{社内ロボコンを開催しました‼}$</p><p>今回はロボコン開催の経緯からロボコン当日の様子までご紹介します。</p><h1 id="ロボコン開催のキッカケ"><a href="#ロボコン開催のキッカケ" class="headerlink" title="ロボコン開催のキッカケ"></a>ロボコン開催のキッカケ</h1><p>いつものようにサークルのメイン活動であったチャットで雑談をしていのですが、<br>あるメンバーの一言から大きくサークル活動の流れが変わりました。</p><blockquote><p><a href="https://www.amazon.com/dp/B07JMHRKQG" target="_blank" rel="noopener">AWS Deep Racer</a><br>走らせて遊びたい。</p></blockquote><!----><blockquote><p>ミニ四駆AIとかライントレーサーとか社内にコース作ってコンテストしたくないですか？</p></blockquote><!----><blockquote><p>超やりたい。最終的にはオープンコンテスト化したい。</p></blockquote><!----><blockquote><p>初開催ですしハードでの勝負よりは機材がシンプルでアルゴリズムでの勝負の割合が大きいものが良いですね。<br>ライントレースロボットが良いと思います。</p></blockquote><!----><blockquote><p>ロボコン開催に向けたキックオフってことでMTGをやりましょう。いつが良いですか？</p></blockquote><!----><p>こうして1年間雑談しかしていなかったのが嘘のようにキックオフが設定されコンテスト開催が決定しました。</p><h1 id="コンテストルール"><a href="#コンテストルール" class="headerlink" title="コンテストルール"></a>コンテストルール</h1><p>コンテストのルールはシンプルです。</p><blockquote><p>白い板に黒いテープを張り付けて作った環状コースで、自動制御された車型の機体を走らせる。<br>一番早くコースを周回した機体を優勝とする。</p></blockquote><!----><p>たったこれだけです。いわゆる<strong>「ライントレース」</strong>と呼ばれる競技です。</p><p>コンテスト企画の初期段階では、世間一般のロボコンに倣い、機体は各自で作って持ち込み競わせるルールとする予定でした。しかしながら、今回のコンテストでは普段電子回路をはじめとするハードウェアの扱いに慣れていない社員にも簡単に楽しんで貰えるように機体（<strong>リファレンスモデル</strong>）を提供しました。これにより、ソフトウェアの改良によって競技性をもたせるルールとしました。また、組み込み向けのプログラムは普段の業務でのプログラミングとは少し勝手が違うかなと思い、リファレンスモデルに加え簡単なサンプルコードも提供しました。最低限の動作を保証したサンプルコードを提供することで全くの未経験者であってもロボットの制御の感覚を掴むことが可能となり、コンテストへの参加に繋がりました。</p><h1 id="リファレンスモデルの紹介"><a href="#リファレンスモデルの紹介" class="headerlink" title="リファレンスモデルの紹介"></a>リファレンスモデルの紹介</h1><p>実際に提供したリファレンスモデルはこちらです。<br><img src="/images/20191018/photo_20191018_01.jpeg"></p><p><font color="red">赤い基板</font>も映えてとってもかっこいいですね!!</p><img src="/images/20191018/photo_20191018_02.jpeg"><p><font color="blue">少年心</font>をくすぐられますね!!</p><h3 id="走行機構"><a href="#走行機構" class="headerlink" title="走行機構"></a>走行機構</h3><p>ライントレーサーはラインに沿って走る機体なので、操舵を含む走行機構が必要です。</p><p>今回のリファレンスモデルは出来る限りシンプルにしてコストを下げたかったので、左右のタイヤの回転数の差を制御することで操舵を行う方式としました。後輪に左右で独立したギヤボックスとタイヤを配置し、前輪には従動輪とするためのボールキャスターを使用しました。</p><img src="/images/20191018/photo_20191018_03.jpeg"><h3 id="ライン検知"><a href="#ライン検知" class="headerlink" title="ライン検知"></a>ライン検知</h3><p>ラインの検知は、フォトリフレクタという赤外線 LED と赤外線を検知するフォトトランジスタの組み合わせからなるセンサを用いて行います。ライントレーサーのコースは、黒い床（白い床）に白い線（黒い線）を引くことによって作ります。床に向かって赤外線を照射し、反射光をフォトトランジスタで検知しますが、黒い床と白い床では光の反射の度合いが異なるので、この変化をもって線の位置を特定する仕組みです。</p><p>仕組みのイメージとしては以下のようなものになります。<br><img src="/images/20191018/photo_20191018_04.png" class="img-middle-size"></p><p>※イメージ図ではフォトリフレクタが3つですが、リファレンスモデルは5つ搭載しています。</p><img src="/images/20191018/photo_20191018_05.jpeg"><p>実際のフォトリフレクタ搭載部分</p><h3 id="モータードライブ"><a href="#モータードライブ" class="headerlink" title="モータードライブ"></a>モータードライブ</h3><p>フォトリフレクタによって検知した姿勢によって操舵方向を制御することになるのですが、ここで必要になってくるのがモーターの回転数制御です。 今回使用するのはモーターの中でも「ブラシ付き DC モーター」と呼ばれるものです。このモーターの回転数制御は「PWM 制御」と呼ばれる方式が一般的で、これを採用します。ざっくり言うと、モーターに流す電流を高速に ON/OFF させ、ON と OFF の時間の比率（デューティー比）によって回転数を上げたり下げたりする、マイコンと相性の良い方式です。</p><h3 id="マイコン"><a href="#マイコン" class="headerlink" title="マイコン"></a>マイコン</h3><p>ライントレーサーは、前述したライン検知を入力として受け取り、適切なモータードライブを行うことによって走行します。この入力と出力の間を取り持つのがマイコンになります。 このマイコンは選択肢が非常に多様なのですが、今回は ESP32-WROOM-32（以下 ESP32 と呼びます）というマイコン（モジュール）を採用しました。</p><p>ESP32を採用した理由としては下記のようなものです。</p><ul><li>申し分無い処理性能と機能</li><li>フォトリフレクタを直接接続できる</li><li>WiFi・Bluetoothを搭載しているので、スマートフォンからコントロールできるなど今後の発展の余地がある</li><li>MicoroPython 、Mongoose OS のESP32向け実装があり、C言語に明るくない人でも Python や JavaScript で開発ができる</li></ul><p>また、他の選択肢として、Arduino シリーズや Raspberry Pi も使用可能です。 </p><h3 id="開発言語・環境"><a href="#開発言語・環境" class="headerlink" title="開発言語・環境"></a>開発言語・環境</h3><p>Mongoose OS や MicroPython も便利なのですが、ESP32 の開発を最も簡単に始められるのは Arduino  IDE を使用した方法です。Arduino IDE は、拡張機能をインストールすることによって、Arduino シリーズのマイコンボード以外にも様々なもののプログラミングを行うことが可能です。これによって ESP32 では、Arduino 言語（C 言語）で開発を始められます。 </p><p>しかし Arduino  IDE は、日頃 Eclipse のようなリッチな IDE や、Vim や Emacs のようなエディタをカスタマイズして使っているソフトウェアエンジニアの皆さんからすると、お世辞にも使いやすいとは言えないものです。</p><p>そこで今回は、<strong>PlatformIO IDE</strong> というものを標準開発環境としてサポートすることにしました。PlatformIO のインストールは非常に簡単で、Visual Studio Code にプラグインをインストールするだけです。コンパイラなどのツールセットや、書き込み用のプログラムも自動でインストールされますし、マルチ OS 対応です。これで、使いやすい VSCode 上で開発を行うことが可能になります。 </p><p>このように、PlatformIO  +  Arduino という組み合わせの開発環境を標準とすることで、「開発環境の構築が簡単なので、社内でのハンズオンがスムーズに行える」、「比較的とっつきやすい Arduino スタイルのプログラミング」という、ロボコン初心者への間口を広げるのに大きなメリットを得ることが出来ました。 </p><h1 id="コンテスト開催！"><a href="#コンテスト開催！" class="headerlink" title="コンテスト開催！"></a>コンテスト開催！</h1><p>さっそくですが本番のコースはこちらです。<br>モータースポーツが好きな方なら見たことがあるコースかもしれませんね!<img src="/images/20191018/photo_20191018_06.jpeg"></p><p>このような難関コースでありながらもコースを走破し優秀タイムを叩き出した機体もいましたが、多くの機体はタイムを競うコンテストでありながら、走破すら許されませんでした…。コースを作る時にはしゃぎすぎました。</p><p>コンテスト終了後は走破すら許されなかった現実を目の当たりしたメンバーを中心にエンジニアハートに火が付いたようで、走らせる→デバックを延々と繰り返すメンバーに溢れ、コンテス終了後の方が盛り上がりました!!</p><p>「これでダメだったら帰る」というセリフを同じ人から5回程聞きました。<br>次回の開催では予選と決勝を同日に行い、予選終了後に回数制限をつけた中でプログラムの改修とコース試走を許可するような仕組みを導入して、この盛り上がりをコンテストに反映させようと考えています!!</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回は社内でロボコンを開催した話をご紹介しました。</p><p>運営から携わりタイトなスケジュールでしたが、非常に面白く技術の勉強にもなりました。フューチャーでは<strong>「無いものは作る」</strong>というワードを良く耳にします。稀かもしれませんが、作るべきものがハードウェアから携わる必要があるものだった時もこの活動を続けていると回路や基板の設計に強くなれる気がしてます!</p><p>メンバーも絶賛募集中です。</p><p>もしこのブログを読んで「自分の会社でもやりたい!」となられた方は、是非Twitter（<a href="https://twitter.com/future_techblog" target="_blank" rel="noopener">@future_techblog</a>）に連絡ください。</p><p>共同開催・企業対抗戦やりましょう!!</p><hr><p>関連記事：</p><ul><li><a href="/articles/20190826/">ソフトとハードの垣根を越えろ - IoTハードウェアの開発をソフト屋視点で解説します</a></li><li><a href="/articles/20190723/">Future IoTのstackshareを公開しました</a></li><li><a href="/articles/20170127/">3Dプリンタを使ってサービス開発やってみた</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、Strategic AI Group所属兼、電子工作部の勝村です。&lt;/p&gt;
&lt;p&gt;電子工作部はフューチャーの社内
      
    
    </summary>
    
      <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
      <category term="IoT" scheme="https://future-architect.github.io/tags/IoT/"/>
    
      <category term="Robot" scheme="https://future-architect.github.io/tags/Robot/"/>
    
  </entry>
  
  <entry>
    <title>GKEクラスタに割り当てるCIDRを設計する</title>
    <link href="https://future-architect.github.io/articles/20191017/"/>
    <id>https://future-architect.github.io/articles/20191017/</id>
    <published>2019-10-16T23:02:12.000Z</published>
    <updated>2019-10-17T02:14:15.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>お久しぶりです。<a href="https://www.spartanrace.jp/en" target="_blank" rel="noopener">スパルタン</a>になった椎名@417yskです。</p><p><a href="/articles/20190820/">前回投稿したGCP記事</a>で紹介したGKEクラスタのCIDR設計について、深堀りした記事になります。</p><blockquote><p><strong>1-5. 共有VPC上のGKEクラスタのセカンダリCIDR設計</strong></p><p><strong>事象</strong>: オンプレ環境と接続する1つの共有VPC上にproduction, stagingなど複数プロジェクトを相乗りさせる場合、各プロジェクトで利用するセカンダリCIDRの設計が必要。<br><strong>対応</strong>: GKEで必要なセカンダリCIDRを本腰入れて設計しました。スタンダードなこれと言った解はなく、必要な環境数、オンプレ環境から割り当てられたIP範囲から適宜設計する必要があります。</p></blockquote><p>記載通りですが、GKEクラスタを構築する際に、実際に設計した内容を元に制約や設計のポイントを紹介したいと思います。</p><h1 id="GKEとは"><a href="#GKEとは" class="headerlink" title="GKEとは"></a>GKEとは</h1><blockquote><p>コンテナ化されたアプリケーションをデプロイするための、本番稼働に対応したマネージド型環境です。<br><a href="https://cloud.google.com/kubernetes-engine/" target="_blank" rel="noopener">https://cloud.google.com/kubernetes-engine/</a></p></blockquote><h1 id="CIDRとは"><a href="#CIDRとは" class="headerlink" title="CIDRとは"></a>CIDRとは</h1><blockquote><p>Classless Inter-Domain Routing（CIDR、サイダー）は、インターネット上のルーターにおけるルーティングテーブルの肥大化速度を低減させるための機構であり、ISPや組織にクラスA、B、Cを全部ではなく部分的に割り当てることでIPアドレスの浪費を防ぐ機構である。CIDR記法でアドレスを記述でき、アドレスの集約的表現が可能で、アドレスブロックの委譲も容易である。<br>「CIDR」の読みは「サイダー」とするのが一般的である<br><a href="https://ja.wikipedia.org/wiki/Classless_Inter-Domain_Routing" target="_blank" rel="noopener">https://ja.wikipedia.org/wiki/Classless_Inter-Domain_Routing</a></p></blockquote><p>CIDR記法は <code>10.0.0.0/8</code>、<code>172.16.0.0/12</code>、 <code>192.168.0.0/16</code> といったIPアドレスとビット数を指定する方法です。</p><p>詳細は次項で説明していきますが、ある条件でGKEクラスタを構築すると、このCIDR設計が必須になってきます</p><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>アーキテクチャ設計上の要件と、GKEクラスタの制約の2つが設計上の考慮事項となります。</p><h2 id="アーキクチャ設計上の要件"><a href="#アーキクチャ設計上の要件" class="headerlink" title="アーキクチャ設計上の要件"></a>アーキクチャ設計上の要件</h2><p>今回GKEクラスタを構築する上で2つの前提がありました。</p><ol><li><a href="https://cloud.google.com/vpc/docs/shared-vpc" target="_blank" rel="noopener">共有VPC</a>を利用すること</li><li>パブリックエンドポイントへのアクセスが制限された<a href="https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters" target="_blank" rel="noopener">限定公開クラスタ</a>にすること</li></ol><p>※オンプレ環境とインターネットVPNで繋ぐため1つのVPCを複数環境で利用したかったのと、セキュリティポリシーから外部アクセス禁止となっていたためです。</p><h3 id="共有VPCとは"><a href="#共有VPCとは" class="headerlink" title="共有VPCとは"></a>共有VPCとは</h3><p>共有VPCとは、あるホストとなるプロジェクトのVPCを、複数のGCPプロジェクトがリソースとして利用できるようになる機能です。これにより、サブネット、ルート、ファイアウォールなどのネットワーク リソースを集中管理しながら、インスタンスの作成や管理などの管理責任をサービス プロジェクト管理者に委任できます。</p><p>以下は<a href="/articles/20190820/">前回投稿したGCP記事</a>で紹介した構成図です。Shared VPCと書かれた領域にある、Subnetをサービスと呼ばれる別GCPプロジェクトが利用しています。</p><img src="/images/20191017/1.png"><p>VPC Peeringとの違いはいくつかありますが、ホストとなるプロジェクト側でファイアウォールルールなどを集中管理できる点などが異なります。（今回はこの点が重視し共有VPCを選択しました）</p><h3 id="限定公開クラスタとは"><a href="#限定公開クラスタとは" class="headerlink" title="限定公開クラスタとは"></a>限定公開クラスタとは</h3><blockquote><p>限定公開クラスタでは、ノードに RFC 1918 の内部 IP アドレスのみがあるため、ワークロードが公共のインターネットから隔離されるようになります。<br><a href="https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters" target="_blank" rel="noopener">https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters</a></p></blockquote><p>引用文そのままですが、限定公開クラスタの設定を行うと、各GKEノードにPublic IPを付与せずGKEクラスタを構築することができます。セキュリティ要件からこちらの設定が必須となりました。</p><h2 id="GKEクラスタの制約"><a href="#GKEクラスタの制約" class="headerlink" title="GKEクラスタの制約"></a>GKEクラスタの制約</h2><ol><li>共有VPC上にGKEクラスタ構築する制約<br>クラスタの<strong>ポッド</strong>と<strong>サービス</strong>に使用するサブネットとセカンダリCIDRを指定する必要があります。<br><a href="https://cloud.google.com/kubernetes-engine/docs/how-to/cluster-shared-vpc#verify_usable_subnets" target="_blank" rel="noopener">https://cloud.google.com/kubernetes-engine/docs/how-to/cluster-shared-vpc#verify_usable_subnets</a></li><li>パブリックエンドポイントへのアクセスが制限された限定公開クラスタによる制約<br>クラスタ<strong>マスター</strong>が使用する /28 分の RFC 1918 アドレス範囲を指定する必要があります。<br><a href="https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters#public_master" target="_blank" rel="noopener">https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters#public_master</a></li><li>セカンダリCIDRの上限によるクラスタ数の制約<br>ポッドとサービスに対して割り当てるセカンダリCIDRですが、1サブネット内に設定可能なセカンダリCIDR数に上限があり、この上限数/2が構築可能なクラスタ数になります。<br><a href="https://cloud.google.com/kubernetes-engine/docs/how-to/cluster-shared-vpc#notes_about_secondary_ranges" target="_blank" rel="noopener">https://cloud.google.com/kubernetes-engine/docs/how-to/cluster-shared-vpc#notes_about_secondary_ranges</a><br>私が構築した時点ではセカンダリCIDRの上限は5つだったためクラスタの上限は2つでしたが、現在はセカンダリCIDRの上限は30まで拡張されており15クラスタまで作成可能なのでさほど設計上の制約にはならないかもしれません。<br>※日本語ドキュメントはまだ5のままにですが英語では30になっています。（2019/10/17時点）</li></ol><h1 id="実際に設計してみる"><a href="#実際に設計してみる" class="headerlink" title="実際に設計してみる"></a>実際に設計してみる</h1><p>本編です。</p><p>前項の制約から1GKEクラスタに対して <strong>3つのCIDR(ポッド、サービス、マスター)を割り当てる必要</strong> が出てきました。またこれらは <strong>同一の共有VPC上に構築するため構築される全てのプロジェクトをまたいで全てのCIDRが被ってはいけない</strong> という制約もあります。</p><p>この辺りに注意してCIDR設計したいと思います。</p><h2 id="1-全体の設計方針"><a href="#1-全体の設計方針" class="headerlink" title="1. 全体の設計方針"></a>1. 全体の設計方針</h2><p>設定上はプロジェクトが異なればポッドやサービスのCIDRは全く異なる範囲や体系で設定可能です。<br>ですが、各プロジェクト（環境）毎に設計のポリシーを合わせるために全プロジェクトに対してポッド、サービス、マスタ別にCIDRを概念的に割り当て、そこから各プロジェクトごとに実際のCIDRを割り当てるといった設計方針をとりました。</p><h2 id="2-ポッド＆サービスCIDR"><a href="#2-ポッド＆サービスCIDR" class="headerlink" title="2. ポッド＆サービスCIDR"></a>2. ポッド＆サービスCIDR</h2><h3 id="2-1-共有VPC上の全プロジェクトに対するCIDR"><a href="#2-1-共有VPC上の全プロジェクトに対するCIDR" class="headerlink" title="2.1. 共有VPC上の全プロジェクトに対するCIDR"></a>2.1. 共有VPC上の全プロジェクトに対するCIDR</h3><p>こちらは172.16.0.0/12（クラスB）を概念的に割り当てました。<br>GKEのポッド＆サービスに割り当て可能なCIDRはRFC 1918 ブロック（10.0.0.0/8、172.16.0.0/12、または 192.168.0.0/16）の制約があります。<br><a href="https://cloud.google.com/kubernetes-engine/docs/how-to/routes-based-cluster#pod_address_range" target="_blank" rel="noopener">https://cloud.google.com/kubernetes-engine/docs/how-to/routes-based-cluster#pod_address_range</a></p><p>10.0.0.0/8はGCP環境以外も含めたシステム全体で利用しているのと、192.168.0.0/16は後述のマスタのアドレス範囲に利用するためクラスB（172.16.0.0/12）を選択しました。</p><p>なお基本的にはクラスBの範囲を使うことができますが、公式ドキュメントには<code>172.17.0.0/16</code>を利用することができない旨の記載があります。<br>該当範囲を指定してもクラスタ構築時にエラーとなるわけではないのでご注意下さい。</p><blockquote><p>Restrictions<br>Private clusters have the following restrictions:<br>You cannot use a cluster master, node, Pod, or Service IP range that overlaps with 172.17.0.0/16.<br><a href="https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters#restrictions" target="_blank" rel="noopener">https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters#restrictions</a></p></blockquote><h3 id="2-2-各プロジェクトにおけるCIDR"><a href="#2-2-各プロジェクトにおけるCIDR" class="headerlink" title="2.2. 各プロジェクトにおけるCIDR"></a>2.2. 各プロジェクトにおけるCIDR</h3><p>こちらに対してはさらに3段階の概念でCIDRを設計しました。</p><ul><li>プロジェクト毎のCIDR</li><li>ポッド/サービス毎のCIDR</li><li>クラスタ毎のCIDR</li></ul><p>まずプロジェクトごとのCIDRですが、全体でいくつのプロジェクトを作成するかを設計します。<br>本番、ステージングはよくある環境ですが、他に非機能テスト、開発時の機能検証用を想定すると4面、これに加えて実データ使ったデモ環境、並行して動かす別バージョン環境・・などを考慮し最大7断面を想定しました。<br>これによって172.16.0.0/12以下に3bit加えて以下のCIDRが割当たります。</p><table><thead><tr><th align="left">環境</th><th align="left">CIDR</th></tr></thead><tbody><tr><td align="left">本番</td><td align="left">172.18.0.0/15</td></tr><tr><td align="left">ステージング</td><td align="left">172.20.0.0/15</td></tr><tr><td align="left">非機能</td><td align="left">172.22.0.0/15</td></tr><tr><td align="left">・・・</td><td align="left">・・・</td></tr></tbody></table><p>※172.16.0.0/15は前述の172.17.0.0/16を含むため利用しませんでした。</p><p>次にポッド/サービスですが、これは2値のため次の1bitを割り当てます</p><table><thead><tr><th align="left">環境</th><th align="left">CIDR</th><th align="left">種別</th><th align="left">CIDR</th></tr></thead><tbody><tr><td align="left">本番</td><td align="left">172.16.0.0/15</td><td align="left">ポッド</td><td align="left">172.18.0.0/16</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">サービス</td><td align="left">172.19.0.0/16</td></tr><tr><td align="left">ステージング</td><td align="left">172.18.0.0/15</td><td align="left">ポッド</td><td align="left">172.20.0.0/16</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">サービス</td><td align="left">172.21.0.0/16</td></tr><tr><td align="left">非機能</td><td align="left">172.20.0.0/15</td><td align="left">ポッド</td><td align="left">172.22.0.0/16</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">サービス</td><td align="left">172.23.0.0/16</td></tr><tr><td align="left">・・・</td><td align="left">・・・</td><td align="left">・・・</td><td align="left">・・・</td></tr></tbody></table><p>そして最後に実際にクラスタに割り当てるCIDRに分割します。<br>ここは実際に構築するクラスタ数に応じて細分化します。</p><table><thead><tr><th align="left">環境</th><th align="left">CIDR</th><th align="left">種別</th><th align="left">CIDR</th><th align="left">クラスタ</th><th align="left">CIDR</th></tr></thead><tbody><tr><td align="left">本番</td><td align="left">172.16.0.0/15</td><td align="left">ポッド</td><td align="left">172.18.0.0/16</td><td align="left">クラスタA</td><td align="left"><strong>172.18.0.0/18</strong></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">ポッド</td><td align="left"></td><td align="left">クラスタB</td><td align="left"><strong>172.18.64.0/18</strong></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">サービス</td><td align="left">172.19.0.0/16</td><td align="left">クラスタA</td><td align="left"><strong>172.19.0.0/18</strong></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">サービス</td><td align="left"></td><td align="left">クラスタB</td><td align="left"><strong>172.19.64.0/18</strong></td></tr><tr><td align="left">ステージング</td><td align="left">172.18.0.0/15</td><td align="left">ポッド</td><td align="left">172.20.0.0/16</td><td align="left">クラスタA</td><td align="left"><strong>172.20.0.0/18</strong></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">ポッド</td><td align="left"></td><td align="left">クラスタB</td><td align="left"><strong>172.20.64.0/18</strong></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">サービス</td><td align="left">172.21.0.0/16</td><td align="left">クラスタA</td><td align="left"><strong>172.21.0.0/18</strong></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">サービス</td><td align="left"></td><td align="left">クラスタB</td><td align="left"><strong>172.21.64.0/18</strong></td></tr><tr><td align="left">非機能</td><td align="left">172.20.0.0/15</td><td align="left">ポッド</td><td align="left">172.22.0.0/16</td><td align="left">クラスタA</td><td align="left"><strong>172.22.0.0/18</strong></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">ポッド</td><td align="left"></td><td align="left">クラスタB</td><td align="left"><strong>172.22.64.0/18</strong></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">サービス</td><td align="left">172.23.0.0/16</td><td align="left">クラスタA</td><td align="left"><strong>172.23.0.0/18</strong></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">サービス</td><td align="left"></td><td align="left">クラスタB</td><td align="left"><strong>172.23.64.0/18</strong></td></tr><tr><td align="left">・・・</td><td align="left">・・・</td><td align="left">・・・</td><td align="left">・・・</td><td align="left">・・・</td><td align="left">・・・</td></tr></tbody></table><p>なお前述の1環境2クラスタの制限（2019/10/17時点では制約が緩和され15クラスタまで可能なはず）から以下のような切り方も出来たのですが、</p><table><thead><tr><th align="left">環境</th><th align="left">CIDR</th><th align="left">種別</th><th align="left">CIDR</th><th align="left">クラスタ</th><th align="left">CIDR</th></tr></thead><tbody><tr><td align="left">本番</td><td align="left">172.16.0.0/15</td><td align="left">ポッド</td><td align="left">172.16.0.0/16</td><td align="left">クラスタA</td><td align="left"><strong>172.18.0.0/17</strong></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">ポッド</td><td align="left"></td><td align="left">クラスタB</td><td align="left"><strong>172.18.128.0/17</strong></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">サービス</td><td align="left">172.17.0.0/16</td><td align="left">クラスタA</td><td align="left"><strong>172.19.0.0/17</strong></td></tr><tr><td align="left"></td><td align="left"></td><td align="left">サービス</td><td align="left"></td><td align="left">クラスタB</td><td align="left"><strong>172.19.128.0/17</strong></td></tr><tr><td align="left">・・・</td><td align="left">・・・</td><td align="left">・・・</td><td align="left">・・・</td><td align="left">・・・</td><td align="left">・・・</td></tr></tbody></table><p>以下の理由で/18のアドレス範囲としました。</p><ul><li>今後制約が緩んだ時の拡張性を持たせる<ul><li>クラスタ再作成を覚悟すれば、後で拡張可能であろうという前提です</li></ul></li><li>/18で切ったアドレス範囲内でポッドとサービスの数は十分足りる</li></ul><h3 id="2-3-アドレスに対する意味付け"><a href="#2-3-アドレスに対する意味付け" class="headerlink" title="2.3. アドレスに対する意味付け"></a>2.3. アドレスに対する意味付け</h3><p>ここまでのアドレス設計と並行して、アドレスから容易に環境や用途を判断できるように考慮しました。<br>今回のアドレス設計ではアドレスの２か所に意味を持たせています。</p><p>アドレス体系：172.<strong>XXX.YYY</strong>.0/18</p><ul><li><strong>XXX</strong>の箇所で環境を表す<br>本番（18,19）、ステージング（20,21）・・・</li><li><strong>XXX</strong>の箇所で種別を表す<br>偶数がポッド、奇数がサービスとなっています。</li><li><strong>YYY</strong>の箇所にはクラスタ。<br>クラスタA（0）、クラスタB（64）</li></ul><h2 id="3-マスターCIDR"><a href="#3-マスターCIDR" class="headerlink" title="3. マスターCIDR"></a>3. マスターCIDR</h2><h3 id="3-1-共有VPC上の全プロジェクトに対するCIDR"><a href="#3-1-共有VPC上の全プロジェクトに対するCIDR" class="headerlink" title="3.1. 共有VPC上の全プロジェクトに対するCIDR"></a>3.1. 共有VPC上の全プロジェクトに対するCIDR</h3><p>こちらは192.168.0.0/16（クラスC）を概念的に割り当てました。</p><p>これは10.0.0.0/8（クラスA）の一部をプライマリCIDRで利用していたのと172.16.0.0/12（クラスB）をポッドとサービスのセカンダリCDIRで利用していたためです。</p><p>また制約上/28のCDIRを割り当てればよいため、クラスCのアドレス範囲で十分と判断しました。</p><h3 id="3-2-各プロジェクトにおけるCIDR"><a href="#3-2-各プロジェクトにおけるCIDR" class="headerlink" title="3.2. 各プロジェクトにおけるCIDR"></a>3.2. 各プロジェクトにおけるCIDR</h3><p>こちらに対しては2段階の概念でアドレス範囲を設定しました。</p><ul><li>プロジェクト毎のCIDR</li><li>クラスタ毎のCIDR</li></ul><p>ただし、アドレス範囲を無駄なくキレイには使わずに、分かりやすさを考慮して以下のアドレス範囲を割り当てています。</p><table><thead><tr><th align="left">環境</th><th align="left">クラスタ</th><th align="left">CIDR</th></tr></thead><tbody><tr><td align="left">本番</td><td align="left">クラスタA</td><td align="left">192.168.16.0/28</td></tr><tr><td align="left"></td><td align="left">クラスタB</td><td align="left">192.168.17.0/28</td></tr><tr><td align="left">ステージング</td><td align="left">クラスタA</td><td align="left">192.168.32.0/28</td></tr><tr><td align="left"></td><td align="left">クラスタB</td><td align="left">192.168.33.0/28</td></tr><tr><td align="left">非機能</td><td align="left">クラスタA</td><td align="left">192.168.48.0/28</td></tr><tr><td align="left"></td><td align="left">クラスタB</td><td align="left">192.168.49.0/28</td></tr><tr><td align="left">・・・</td><td align="left">・・・</td><td align="left">・・・</td></tr></tbody></table><h3 id="3-3-アドレスに対する意味付け"><a href="#3-3-アドレスに対する意味付け" class="headerlink" title="3.3. アドレスに対する意味付け"></a>3.3. アドレスに対する意味付け</h3><p>ここでもアドレスから容易に環境や用途を判断できるように考慮しました。<br>今回のアドレス設計ではアドレスの２か所に意味を持たせています。</p><p>アドレス体系：192.168.<strong>XXX</strong>.0/28</p><ul><li><strong>XXX</strong>の箇所で環境を表す<br>本番（16,17）、ステージング（32,33）・・・</li><li><strong>XXX</strong>の箇所でクラスタを表す<br>偶数がクラスタA、奇数がクラスタBとなっています。</li></ul><h2 id="4-全体サマリ"><a href="#4-全体サマリ" class="headerlink" title="4. 全体サマリ"></a>4. 全体サマリ</h2><p>全体のアドレスをまとめると以下になります。</p><table><thead><tr><th align="left">環境</th><th align="left">クラスタ</th><th align="left">種別</th><th align="left">CIDR</th></tr></thead><tbody><tr><td align="left">本番</td><td align="left">クラスタA</td><td align="left">ポッド</td><td align="left">172.18.0.0/18</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">サービス</td><td align="left">172.19.0.0/18</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">マスター</td><td align="left">192.168.16.0/28</td></tr><tr><td align="left"></td><td align="left">クラスタB</td><td align="left">ポッド</td><td align="left">172.18.64.0/18</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">サービス</td><td align="left">172.19.64.0/18</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">マスター</td><td align="left">192.168.17.0/28</td></tr><tr><td align="left">ステージング</td><td align="left">クラスタA</td><td align="left">ポッド</td><td align="left">172.20.0.0/18</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">サービス</td><td align="left">172.21.0.0/18</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">マスター</td><td align="left">192.168.32.0/28</td></tr><tr><td align="left"></td><td align="left">クラスタB</td><td align="left">ポッド</td><td align="left">172.20.64.0/18</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">サービス</td><td align="left">172.21.64.0/18</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">マスター</td><td align="left">192.168.33.0/28</td></tr><tr><td align="left">・・・</td><td align="left">・・・</td><td align="left">・・・</td><td align="left">・・・</td></tr></tbody></table><h1 id="あとがき"><a href="#あとがき" class="headerlink" title="あとがき"></a>あとがき</h1><p>今回は実際に設計した事例を元にGCP上の制約や設計時に考えたことを紹介させて頂きました。<br>この辺りの設計は制約や重視するポイントで結構変わってくるのでこれと言った正解はありませんが、１つの例として構築の際にお役に立てれば幸いです。</p><hr><p>関連記事：</p><ul><li><a href="/articles/20190820/">初めてのGCPで環境構築してハマったこと</a></li><li><a href="/articles/20190927/">Let’s Try GCP #2 ～Cloud FunctionをVPC connectorと一緒に使ってみる～</a></li><li><a href="/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li><li><a href="/articles/20190827/">GKEのPodから異なるプロジェクトのIPアドレスへ接続できずハマった話</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;お久しぶりです。&lt;a href=&quot;https://www.spartanrace.jp/en&quot; target=&quot;_blank
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
  </entry>
  
  <entry>
    <title>Software Design 後記</title>
    <link href="https://future-architect.github.io/articles/20191016/"/>
    <id>https://future-architect.github.io/articles/20191016/</id>
    <published>2019-10-15T23:56:31.000Z</published>
    <updated>2019-10-16T01:40:46.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、Strategic AI Groupの上野です。</p><p>2019年は幸運なことに、技術評論社のSoftware Designという雑誌に3回も機械学習関連の記事を執筆する機会を頂きました。</p><p>Strategic AI GroupのChief AI Officierである貞光とともに以下の3つの記事を書きました。</p><ul><li>1月号：自然言語処理・画像処理における線形代数の応用 ～データ処理アルゴリズムへの活用事例～</li><li>3月号：微分でつなぐ、機械学習とニューラルネットワーク ～データ分析も画像処理も最小二乗法で！～</li><li>9月号：数字認識APIを作って実感 ～充実した機械学習ライブラリがPythonの魅力～</li></ul><p>本記事では3回分の記事を振り返りながら、機械学習を学ぶ際のちょっとしたTipsを紹介したいと思います。</p><p>難易度順に易しい方から9月号、1月号、3月号の順に振り返っていきます。</p><h2 id="9月号：数字認識APIを作って実感-～充実した機械学習ライブラリがPythonの魅力～"><a href="#9月号：数字認識APIを作って実感-～充実した機械学習ライブラリがPythonの魅力～" class="headerlink" title="9月号：数字認識APIを作って実感 ～充実した機械学習ライブラリがPythonの魅力～"></a>9月号：数字認識APIを作って実感 ～充実した機械学習ライブラリがPythonの魅力～</h2><p>9月号では、機械学習がはじめての方向けに数字認識アプリを作ってみることを通して、機械学習への入門を果たすことを目指しました。</p><p>何はともあれ作って実感してみよう、というコンセプトです。</p><p>機械学習ではPythonがよく用いられます。Pythonには機械学習に関するライブラリが豊富にあって、それらを組み合わせることで高度な処理も容易に実現できます。</p><p>一方で、様々なライブラリがありすぎて、初心者のうちは戸惑ってしまいがちです。行列計算のためのNumPy、 深層学習のためのKeras、WebアプリケーションフレームワークのFlask…。どれも色々な機能をもっているのですが、初心者にとってはまずはそれぞれの役割を大雑把に理解するのがよいと思います。</p><p>9月号では以下のような数字認識アプリの作成を通して、それぞれのライブラリの役割を体感することができます。</p><p>まず全体像をつかんだ後に、各ライブラリの高度な使い方を学んでいくと躓きにくいと思います。この考え方は、ライブラリの習得に限らず機械学習のアルゴリズムを学ぶ際にも通じるところがあります。いきなり難しい教科書の先頭から完璧に理解していこうとすると挫折してしまいがちですが、まずは全体像を学んだ後に、各手法の詳細を勉強していくとスッキリ理解できることがあります。</p><img src="/images/20191016/sd9.png" style="border:solid 1px #000000"><p>以上のように、Pythonの豊富なライブラリを使うと高度な処理を実現できるのですが、機械学習の仕組みをキチンと理解して論文を読みこなすためにはどうしても数学を避けては通れません。</p><p>1月号と3月号では、機械学習で使われる数学を理解するために、線形代数と微分を取り上げました。</p><h2 id="1月号：自然言語処理・画像処理における線形代数の応用-～データ処理アルゴリズムへの活用事例～"><a href="#1月号：自然言語処理・画像処理における線形代数の応用-～データ処理アルゴリズムへの活用事例～" class="headerlink" title="1月号：自然言語処理・画像処理における線形代数の応用 ～データ処理アルゴリズムへの活用事例～"></a>1月号：自然言語処理・画像処理における線形代数の応用 ～データ処理アルゴリズムへの活用事例～</h2><p>1月号では機械学習の理解に必要な線形代数をテーマに、自然言語処理と画像処理での応用事例を紹介しました。</p><p>線形代数では行列の積がたくさん登場します。行列の積は形に着目すると計算を追いやすくなります。下図の同じ色の部分はサイズが一致しているということを意識しておくことがポイントです。</p><img src="/images/20191016/matrix.png" style="border:solid 1px #000000"><p>記事のなかでは、まず自然言語処理での応用事例として潜在意味インデキシング(LSI)と潜在意味解析(LDA)、そしてword2vecを紹介しました。次に、画像処理での応用事例として非負値行列因子分解(NMF)とAutoencoderを紹介しました。<br>実は、これらの手法は下の表に示すタテの繋がりもあります。タテとヨコ、両方の繋がりを意識すると、様々な手法が有機的に繋がって、おもしろいです。</p><img src="/images/20191016/sd1_1.png" style="border:solid 1px #000000"><p>では、この表の行と列を増やしてみるとどんな手法が考えられるでしょうか？</p><p>例えば、次の表が考えられます。まず行を増やすことを考えるとグラフを対象とした手法があります。グラフに対する行列因子化の適用としてPageRank、ニューラルネットワークの適用としてnode2vecがあります。次に、列についてはどうでしょうか。自然言語、画像、グラフに対して、畳み込みニューラルネットワーク(CNN)の適用が考えられます。CNNによる画像分類は有名ですが、自然言語に適用して文書分類を行うことやグラフ上で畳み込みを定義することもできます。</p><p>このようにタテとヨコの視点を意識すると新しい気づきがあるかもしれません。</p><img src="/images/20191016/sd1_2.png" style="border:solid 1px #000000"><h2 id="3月号：微分でつなぐ、機械学習とニューラルネットワーク-～データ分析も画像処理も最小二乗法で！～"><a href="#3月号：微分でつなぐ、機械学習とニューラルネットワーク-～データ分析も画像処理も最小二乗法で！～" class="headerlink" title="3月号：微分でつなぐ、機械学習とニューラルネットワーク ～データ分析も画像処理も最小二乗法で！～"></a>3月号：微分でつなぐ、機械学習とニューラルネットワーク ～データ分析も画像処理も最小二乗法で！～</h2><p>3月号では、微分をテーマに、ニューラルネットワークの学習方法である誤差逆伝播法(backpropagation)を解説しました。</p><p>初めてニューラルネットワークの学習を学ぶ際には、下図のようにニューラルネットワークの結合重みをトンカチで調整していくんだよー、というようにイメージで理解しておくのはわかりやすいと思います。</p><p>しかし、初心者を卒業してもう一歩踏み込んだ理解をするためには微分が必要になります。実は、Kerasなどの高水準フレームワークを利用していると、画像分類などの典型的なタスクにおいては、学習の仕組みをほとんど意識することなく学習を実行できるのですが、精度向上のためにチューニングしたり、あるいは最新の論文を理解するためにはニューラルネットワークの学習の仕組みの理解はとても役に立ちます。</p><img src="/images/20191016/BP.png" style="border:solid 1px #000000"><p>例えば、敵対的生成ネットワーク(GAN)の学習は典型的なニューラルネットワークの学習よりも複雑です。</p><p>GANは鮮明な顔画像などを生成できることで、最近注目されている手法です。GANの学習ではGeneratorとDiscriminatorという2つのニューラルネットワークを、互いにだましあうように学習させていきます。下図にGANの学習手順と疑似コードを示しています。損失関数の計算やパラメータ更新のやり方が、典型的な画像分類の学習と比べて複雑になっています。</p><p>しかし、一つ一つの要素は基本的なものでありニューラルネットワークの学習の仕組みをキチンと理解していれば、自分で実装できるようになります。</p><p>このように、基礎をキチンと学んでおくと、最新の手法の理解にも繋がります。簡単の意味の基礎ではなく多くの手法の土台となる基礎をしっかりと学んでおくとよいと思います。</p><img src="/images/20191016/GAN.gif" style="border:solid 1px #000000"><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Software Design 1/3/9月号を振り返りながら機械学習を学ぶ際のちょっとしたTipsを紹介してきました。<br>まとめると以下の3点です。</p><ul><li>全体像から詳細へ</li><li>タテとヨコの視点</li><li>基礎徹底</li></ul><p>以上を具体的に実践してみたい方は、ぜひ<a href="https://gihyo.jp/magazine/SD/backnumber" target="_blank" rel="noopener">Software Design</a>を読んでみてください。</p><hr><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20190627/">人工知能学会（JSAI2019） 参加報告</a></li><li><a href="https://future-architect.github.io/articles/20181031/">その問い合わせ、AIが解決します！～Redmineチケットレコメンドシステムのご紹介～</a></li><li><a href="https://future-architect.github.io/articles/20171030/">最新で最強、AlphaGo Zero の解説</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして、Strategic AI Groupの上野です。&lt;/p&gt;
&lt;p&gt;2019年は幸運なことに、技術評論社のSoft
      
    
    </summary>
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>AWS Session Managerでセッションを切断されにくくする方法</title>
    <link href="https://future-architect.github.io/articles/20191009/"/>
    <id>https://future-architect.github.io/articles/20191009/</id>
    <published>2019-10-08T23:56:31.000Z</published>
    <updated>2019-10-09T07:45:45.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXチーム<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の村瀬です。</p><p>世の中コンテナ化の流れでEC2インスタンスを直接利用する機会が減ってきていますが、まだまだサーバにSSH接続する機会もあるかと思います。</p><p>今回はSSH相当の処理をよりセキュアに行えるSession Managerについて調査・検証してみました。</p><h1 id="Session-Managerとは"><a href="#Session-Managerとは" class="headerlink" title="Session Managerとは"></a>Session Managerとは</h1><blockquote><p>Session Manager はフルマネージド型 AWS Systems Manager 機能で、インタラクティブなワンクリックブラウザベースのシェル、または AWS CLI を介して Amazon EC2 インスタンスを管理できます。Session Manager は、インバウンドポートを開いたり、踏み台ホストを維持したり、SSH キーを管理したりすることなく、安全で監査可能なインスタンスの管理を提供します。Session Manager は、Amazon EC2 インスタンスへの簡単なワンクリックのクロスプラットフォームアクセスをエンドユーザーに提供しつつ、インスタンスへの制御されたアクセス、厳格なセキュリティプラクティス、インスタンスアクセスの詳細を含む、完全に監査可能なログを必要とする企業ポリシーに準拠することを容易にします。</p></blockquote><p><a href="https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/session-manager.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/ja_jp/systems-manager/latest/userguide/session-manager.html</a>　より</p><h1 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h1><h3 id="手順1-サービスメニューからSystems-Managerをクリック"><a href="#手順1-サービスメニューからSystems-Managerをクリック" class="headerlink" title="手順1　サービスメニューからSystems Managerをクリック"></a>手順1　サービスメニューからSystems Managerをクリック</h3><img src="/images/20191009/1-a.png" style="border:solid 1px #000000"><h3 id="手順2-セッションマネージャーをクリック"><a href="#手順2-セッションマネージャーをクリック" class="headerlink" title="手順2　セッションマネージャーをクリック"></a>手順2　セッションマネージャーをクリック</h3><img src="/images/20191009/2-a.png" style="border:solid 1px #000000"><h3 id="手順3-セッションの開始をクリック"><a href="#手順3-セッションの開始をクリック" class="headerlink" title="手順3　セッションの開始をクリック"></a>手順3　セッションの開始をクリック</h3><img src="/images/20191009/3.png" style="border:solid 1px #000000"><h3 id="手順4-似たような画面で同名のボタンですがインスタンスを選択してセッションの開始をクリック"><a href="#手順4-似たような画面で同名のボタンですがインスタンスを選択してセッションの開始をクリック" class="headerlink" title="手順4　似たような画面で同名のボタンですがインスタンスを選択してセッションの開始をクリック"></a>手順4　似たような画面で同名のボタンですがインスタンスを選択してセッションの開始をクリック</h3><img src="/images/20191009/5.png" style="border:solid 1px #000000"><p>するとSession Managerのコンソールが表示されます。<br>あとはSSHと同じ要領でコマンドが実行できます。<br><img src="/images/20191009/6.png" style="border:solid 1px #000000"></p><h1 id="メリット"><a href="#メリット" class="headerlink" title="メリット"></a>メリット</h1><p>Session Managerを利用することで以下のメリットがあります。</p><p>・SSHが必要ないのでSSHクライアントがなくても気軽に利用できる。<br>・セキュリティグループのインバウンドのメンテナンスが不要<br>・SSHの鍵やパスフレーズの管理、ローテーションが不要</p><h1 id="困りごと"><a href="#困りごと" class="headerlink" title="困りごと"></a>困りごと</h1><p>そんな便利なSession Managerですが、プロジェクトメンバーから以下のような声が上がりました。</p><p>・セッションがすぐに切れるんだけど<br>・セッション時間が短いので伸ばしてくれない？</p><p>設定項目を見てもセッション時間の設定はありません。<br>どうやら、何らかの理由によりセッションがすぐに切断されてしまうようです。</p><p>プロジェクトメンバーはLinuxOSのEC2インスタンスに対してマネジメントコンソールにて使用している状況です。<br>その他の条件としては以下の通りです。</p><p>・エージェントのバージョン - 2.3.662.0<br>・プラットフォーム　- Amazon Linux</p><h1 id="調査・検証"><a href="#調査・検証" class="headerlink" title="調査・検証"></a>調査・検証</h1><p>まず、原因の仮説を立てます。<br>a.見落としているだけでセッション時間の設定が実はある？</p><p>b.ブラウザのタブで他AWSアカウントを開いている為にセッションが切れてしまっている？</p><p>c.マネジメントコンソールを使用しているから？CLIを使用すると切断されない？</p><p>d.同時に複数の接続をしているから？</p><p>※他にもいろいろありそうですが、検証時間の関係で省略してます。</p><h2 id="a-見落としているだけでセッション時間の設定が実はある？"><a href="#a-見落としているだけでセッション時間の設定が実はある？" class="headerlink" title="a.見落としているだけでセッション時間の設定が実はある？"></a>a.見落としているだけでセッション時間の設定が実はある？</h2><p>マネジメントコンソールの設定を確認しましたが設定項目はありませんでした。</p><h2 id="b-ブラウザのタブで他AWSアカウントを開いている為にセッションが切れてしまっている？"><a href="#b-ブラウザのタブで他AWSアカウントを開いている為にセッションが切れてしまっている？" class="headerlink" title="b.ブラウザのタブで他AWSアカウントを開いている為にセッションが切れてしまっている？"></a>b.ブラウザのタブで他AWSアカウントを開いている為にセッションが切れてしまっている？</h2><p>複数AWSアカウントやユーザを利用しているときに起きるこれ↓を起こしてみます。</p><img src="/images/20191009/7.png" class="img-small-size" style="border:solid 1px #000000"><p>切断されず、影響ありませんでした。</p><h2 id="c-マネジメントコンソールを使用しているから？CLIを使用すると切断されない？"><a href="#c-マネジメントコンソールを使用しているから？CLIを使用すると切断されない？" class="headerlink" title="c.マネジメントコンソールを使用しているから？CLIを使用すると切断されない？"></a>c.マネジメントコンソールを使用しているから？CLIを使用すると切断されない？</h2><img src="/images/20191009/8.png" class="img-small-size" style="border:solid 1px #000000"><p>そんなこともありませんでした。</p><h2 id="d-同時に複数の接続をしているから？"><a href="#d-同時に複数の接続をしているから？" class="headerlink" title="d.同時に複数の接続をしているから？"></a>d.同時に複数の接続をしているから？</h2><p>マネジメントコンソールから複数のセッションを開始してみましたが、先勝ち、後勝ちなどなく同時に複数の接続が利用できます。</p><h1 id="結果＋"><a href="#結果＋" class="headerlink" title="結果＋"></a>結果＋</h1><p>これまでの検証ではセッションが切断されてしまう原因を見つけられませんでしたm(__)m<br>このままではくやしいので、せめてどれぐらいで切断されてしまうのか測定してみました。</p><p>測定方法は以下のコマンドで10秒ごとに現在時刻を表示し、いつまでセッションが生きていたか確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> sleep 10; <span class="keyword">do</span> date; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>10分経過…</p><p>1時間経過…</p><p>3時間経過…</p><p>すぐに切断されることを証明しようといる時に限ってなかなか切れません。</p><p>！？</p><p>もしかしてこの測定をしていると切れないのでは？</p><p>その後、以下の3パターンで数回測定をしてみたところaのみが切断されることなく長時間セッションが接続されていました。<br>　a.フォアグラウンドで定期実行するパターン<br>　b.バックグラウンドで定期実行するパターン<br>　c.コマンドを実行せず放置するパターン</p><p>検証回数は少ないものの、検証した範囲ではフォアグラウンドで定期的にコマンドを実行し続けていればセッションは切断されませんでした。<br>マネジメントコンソールではエラーメッセージが表示されないので気が付きませんでしたがCLIの検証で「Your session timed out due to inactivity」とエラーメッセージが記載されており、ことからも画面に何らかの変更が行われていれば切断されないようです。</p><p>使い勝手はとても良いとは言えませんが、Session Managerにおける作業で時間が空くようであれば無害なコマンドを定期実行することでセッションを保持することができます。(そもそも論として一旦セッションを終了させればよいのかもしれませんが。。。)</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>Session Managerは不意に切断されてしまうことがありますが、セキュアで非常に便利な機能であることには違いありません。<br>長時間利用する場合や、作業の途中で切断されては困る場合には不向きですが、特性を理解した上で利用するのが良いのではないでしょうか？<br>より良い方法をご存じの方がおりましたら教えていただけると幸いです。</p><p>なお、この記事を作成する上で以下のページを参考にさせていただきました。<br><a href="https://qiita.com/serima/items/7260cef8a05d13ec6a47" target="_blank" rel="noopener">https://qiita.com/serima/items/7260cef8a05d13ec6a47</a></p><hr><p>関連記事：</p><ul><li><a href="/articles/20190902/">AWS IAMロールの信頼関係の気になる動作</a></li><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li><li><a href="/articles/20190816/">はじめてのTerraform 0.12 ～環境構築～</a></li><li><a href="/articles/20181205/">5TB/日 のデータをAWS Glueでさばくためにやったこと（性能編）</a></li><li><a href="/articles/20190625/">Amazon Redshiftの仕様を調べてみた</a><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。その中でもDXチームは特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXチーム&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title> 本当に使ってよかったOpenAPI (Swagger) ツール</title>
    <link href="https://future-architect.github.io/articles/20191008/"/>
    <id>https://future-architect.github.io/articles/20191008/</id>
    <published>2019-10-07T23:48:06.000Z</published>
    <updated>2019-10-30T02:05:58.653Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは。TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の武田です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>みなさんSwagger使ってますか？</p><p>弊社でもREST APIを構築するに当たってSwaggerを導入する機会が増えています。本記事ではSwaggerを導入するに当たって、合わせて利用して便利だったツールを紹介したいと思います。</p><h2 id="そもそもSwaggerとは？"><a href="#そもそもSwaggerとは？" class="headerlink" title="そもそもSwaggerとは？"></a>そもそもSwaggerとは？</h2><p>Swaggerは、<a href="https://swagger.io/specification/" target="_blank" rel="noopener">OpenAPI仕様</a>（以下OAS）と言われる、REST APIを定義するための標準仕様にもとづいて構築された一連のオープンソースツールです。REST APIの設計、構築、文書化、および使用に役立つ機能を提供します。</p><p>提供されている主なツールは次のようなものがあります。</p><table><thead><tr><th align="left">Name</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://editor.swagger.io/" target="_blank" rel="noopener">Swagger Editor</a></td><td align="left">OASに則ったAPI仕様を書くためのエディタ</td></tr><tr><td align="left"><a href="https://swagger.io/tools/swagger-ui/" target="_blank" rel="noopener">Swagger UI</a></td><td align="left">OASに則ったAPI仕様からドキュメントを生成するツール</td></tr><tr><td align="left"><a href="https://swagger.io/tools/swagger-codegen/" target="_blank" rel="noopener">Swagger Codegen</a></td><td align="left">OASに則ったAPI仕様からコードを生成するツール</td></tr></tbody></table><h2 id="サードパーティ製のツール"><a href="#サードパーティ製のツール" class="headerlink" title="サードパーティ製のツール"></a>サードパーティ製のツール</h2><p>本家からは上述のツールが提供されていますが、サードバーティ製の様々なツールが世の中には存在します。</p><p>エコシステムが成熟しているのもSwaggerを利用するメリットの一つですね。<br><a href="https://openapi.tools/" target="_blank" rel="noopener">https://openapi.tools/</a></p><p>冒頭のとおり、このサードパーティ製のツールの中で実際に利用して良かったツールを3つご紹介したいと思います。</p><h2 id="Stoplight-Studio"><a href="#Stoplight-Studio" class="headerlink" title="Stoplight Studio"></a>Stoplight Studio</h2><p><a href="https://stoplight.io/studio/" target="_blank" rel="noopener">https://stoplight.io/studio/</a></p><p>1つ目のツールは「Stoplight Studio」というAPI仕様を記載するためのGUIエディタとなります。</p><p>今までSwagger Editorを利用してYAMLを書いていたそこのみなさん、YAML筋力はもう必要ありません。</p><p><code>Design APIs 10x faster</code> の謳い文句どおり、Stoplight Studioを使えばGUIで直感的に、高速にAPI仕様を記述することができます。</p><img src="/images/20191008/photo_20191008_01.png" style="border:solid 1px #000000"><h3 id="主な特徴"><a href="#主な特徴" class="headerlink" title="主な特徴"></a>主な特徴</h3><p>主な特徴としては次のようなものが挙げられます。</p><ul><li>無料</li><li>WEB、バイナリ（Windows、Mac、Linux）として配布</li><li>OpenAPI v2 &amp; v3に対応</li><li>Git連携</li><li>Prismと呼ばれるモックサーバ（後述）を統合</li><li>ドキュメントへの変換に対応</li><li>リアルタイムでLintエラーを表示</li></ul><p>筆者はもうこのエディタなしではSwaggerを書けない体になりました。WEBから簡単に試すことができるので実際に使ってみるのが一番だと思います。<br><a href="https://stoplight.io/p/studio/gh/stoplightio/studio" target="_blank" rel="noopener">https://stoplight.io/p/studio/gh/stoplightio/studio</a></p><h2 id="Prism"><a href="#Prism" class="headerlink" title="Prism"></a>Prism</h2><p><a href="https://stoplight.io/open-source/prism" target="_blank" rel="noopener">https://stoplight.io/open-source/prism</a></p><p>2つ目のツールは「Prism」というStoplight Studioと同じくStoplight社が提供するOSSのモックサーバです。</p><p>コマンドラインからOAS定義を読み込むことで簡単にAPIのモックサーバが起動できます。例えばサーバ（API）側ができていない状態で、クライアント側の開発を進めるケースなどでは非常に有用ですね。</p><h3 id="主な特徴-1"><a href="#主な特徴-1" class="headerlink" title="主な特徴"></a>主な特徴</h3><p>主な特徴としては次のようなものが挙げられます。</p><ul><li>OSS</li><li>OpenAPI v2 &amp; v3に対応</li><li>Nodeモジュール、バイナリ（Windows、Mac、Linux）、Dockerイメージとして配布</li><li>ダイナミックレスポンス対応</li><li>リクエストのバリデーション対応</li><li>CORS対応</li></ul><p><code>apisprout</code>など他のモックサーバも多数存在しますが、ランタイムなしで利用できる点やダイナミックレスポンス、CORS対応等、地味に嬉しい機能があり、お気に入りです。</p><h3 id="使ってみた"><a href="#使ってみた" class="headerlink" title="使ってみた"></a>使ってみた</h3><p>今回はDockerイメージ利用してみます。 サンプルのOAS定義として<a href="https://petstore.swagger.io/v2/swagger.json" target="_blank" rel="noopener">Swagger Petstore</a>を利用します。定義内容は<a href="https://petstore.swagger.io/" target="_blank" rel="noopener">こちら</a>。</p><h4 id="まずはヘルプコマンド"><a href="#まずはヘルプコマンド" class="headerlink" title="まずはヘルプコマンド"></a>まずはヘルプコマンド</h4><p>利用可能なオプションは次のとおりとなります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ docker run stoplight/prism:3 mock -h</span><br><span class="line">prism mock &lt;spec&gt;</span><br><span class="line"></span><br><span class="line">Start a mock server with the given spec file</span><br><span class="line"></span><br><span class="line">Positionals:</span><br><span class="line">  spec  Path to a spec file. Can be both a file or a fetchable resource on the web.  [string] [required]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --version           Show version number  [boolean]</span><br><span class="line">  --<span class="built_in">help</span>              Show <span class="built_in">help</span>  [boolean]</span><br><span class="line">  --port, -p          Port that Prism will run on.  [number] [required] [default: 4010]</span><br><span class="line">  --host, -h          Host that Prism will listen to.  [string] [required] [default: <span class="string">"127.0.0.1"</span>]</span><br><span class="line">  --dynamic, -d       Dynamically generate examples.  [boolean] [default: <span class="literal">false</span>]</span><br><span class="line">  --cors              Enables CORS headers.  [boolean] [default: <span class="literal">true</span>]</span><br><span class="line">  --multiprocess, -m  Forks the http server from the CLI <span class="keyword">for</span> faster <span class="built_in">log</span> processing.  [boolean] [default: <span class="literal">true</span>]</span><br></pre></td></tr></table></figure><h4 id="サーバ起動"><a href="#サーバ起動" class="headerlink" title="サーバ起動"></a>サーバ起動</h4><p>引数にOAS定義を指定して <code>prism mock</code> コマンドを実行するとモックサーバが立ち上がります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -it -p 4010:4010 stoplight/prism:3 mock -h 0.0.0.0 https://petstore.swagger.io/v2/swagger.json</span><br><span class="line">[CLI] …  awaiting  Starting Prism…</span><br><span class="line">[HTTP SERVER] ℹ  info      Server listening at http://0.0.0.0:4010</span><br><span class="line">[CLI] ●  note      POST       http://0.0.0.0:4010/pet</span><br><span class="line">[CLI] ●  note      PUT        http://0.0.0.0:4010/pet</span><br><span class="line">[CLI] ●  note      GET        http://0.0.0.0:4010/pet/findByStatus</span><br><span class="line">[CLI] ●  note      GET        http://0.0.0.0:4010/pet/findByTags</span><br><span class="line">[CLI] ●  note      GET        http://0.0.0.0:4010/pet/&#123;petId&#125;</span><br><span class="line">[CLI] ●  note      POST       http://0.0.0.0:4010/pet/&#123;petId&#125;</span><br><span class="line">[CLI] ●  note      DELETE     http://0.0.0.0:4010/pet/&#123;petId&#125;</span><br><span class="line">[CLI] ●  note      POST       http://0.0.0.0:4010/pet/&#123;petId&#125;/uploadImage</span><br><span class="line">[CLI] ●  note      GET        http://0.0.0.0:4010/store/inventory</span><br><span class="line">[CLI] ●  note      POST       http://0.0.0.0:4010/store/order</span><br><span class="line">[CLI] ●  note      GET        http://0.0.0.0:4010/store/order/&#123;orderId&#125;</span><br><span class="line">[CLI] ●  note      DELETE     http://0.0.0.0:4010/store/order/&#123;orderId&#125;</span><br><span class="line">[CLI] ●  note      POST       http://0.0.0.0:4010/user</span><br><span class="line">[CLI] ●  note      POST       http://0.0.0.0:4010/user/createWithArray</span><br><span class="line">[CLI] ●  note      POST       http://0.0.0.0:4010/user/createWithList</span><br><span class="line">[CLI] ●  note      GET        http://0.0.0.0:4010/user/login</span><br><span class="line">[CLI] ●  note      GET        http://0.0.0.0:4010/user/<span class="built_in">logout</span></span><br><span class="line">[CLI] ●  note      GET        http://0.0.0.0:4010/user/&#123;username&#125;</span><br><span class="line">[CLI] ●  note      PUT        http://0.0.0.0:4010/user/&#123;username&#125;</span><br><span class="line">[CLI] ●  note      DELETE     http://0.0.0.0:4010/user/&#123;username&#125;</span><br><span class="line">[CLI] ▶  start     Prism is listening on http://0.0.0.0:4010</span><br></pre></td></tr></table></figure><p>ローカルから繋いでみます。 定義した通りのレスポンスが返却されていますね。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s -D /dev/stderr -X GET -H <span class="string">"Accept:application/json"</span> http://localhost:4010/pet/0001 | json_pp</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">access-control-allow-origin: *</span><br><span class="line">content-type: application/json; charset=utf-8</span><br><span class="line">content-length: 138</span><br><span class="line">Date: Fri, 27 Sep 2019 10:25:48 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"status"</span> : <span class="string">"available"</span>,</span><br><span class="line">   <span class="string">"photoUrls"</span> : [</span><br><span class="line">      <span class="string">"string"</span></span><br><span class="line">   ],</span><br><span class="line">   <span class="string">"id"</span> : 0,</span><br><span class="line">   <span class="string">"name"</span> : <span class="string">"doggie"</span>,</span><br><span class="line">   <span class="string">"category"</span> : &#123;</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">"string"</span>,</span><br><span class="line">      <span class="string">"id"</span> : 0</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">"tags"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">"id"</span> : 0,</span><br><span class="line">         <span class="string">"name"</span> : <span class="string">"string"</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ダイナミックレスポンス"><a href="#ダイナミックレスポンス" class="headerlink" title="ダイナミックレスポンス"></a>ダイナミックレスポンス</h4><p>モックサーバ起動時に<code>-d</code>オプションを付与すると、OAS定義にもとづいてリクエストのたびにレスポンスが動的に作成されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --rm -it -p 4010:4010 stoplight/prism:3 mock -h 0.0.0.0 -d https://petstore.swagger.io/v2/swagger.json</span><br></pre></td></tr></table></figure><p>1回目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s -D /dev/stderr -X GET -H <span class="string">"Accept:application/json"</span> http://localhost:4010/pet/0001?hoge=dow | json_pp</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">access-control-allow-origin: *</span><br><span class="line">content-type: application/json; charset=utf-8</span><br><span class="line">content-length: 338</span><br><span class="line">Date: Fri, 27 Sep 2019 10:38:36 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"tags"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">"name"</span> : <span class="string">"aliquip tempor"</span>,</span><br><span class="line">         <span class="string">"id"</span> : 63211888</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">"name"</span> : <span class="string">"in enim dolor"</span>,</span><br><span class="line">         <span class="string">"id"</span> : 79883460</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">"name"</span> : <span class="string">"eiusmod "</span>,</span><br><span class="line">         <span class="string">"id"</span> : 17183756</span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   <span class="string">"category"</span> : &#123;</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">"fugiat"</span>,</span><br><span class="line">      <span class="string">"id"</span> : -44395203</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">"id"</span> : -79576346,</span><br><span class="line">   <span class="string">"status"</span> : <span class="string">"available"</span>,</span><br><span class="line">   <span class="string">"name"</span> : <span class="string">"nostrud"</span>,</span><br><span class="line">   <span class="string">"photoUrls"</span> : [</span><br><span class="line">      <span class="string">"amet eiusmod Duis deserunt sunt"</span>,</span><br><span class="line">      <span class="string">"dolor"</span>,</span><br><span class="line">      <span class="string">"Duis non reprehenderit"</span>,</span><br><span class="line">      <span class="string">"laboris mollit officia consectetur"</span></span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2回目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s -D /dev/stderr -X GET -H <span class="string">"Accept:application/json"</span> http://localhost:4010/pet/0001?hoge=dow | json_pp</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">access-control-allow-origin: *</span><br><span class="line">content-type: application/json; charset=utf-8</span><br><span class="line">content-length: 274</span><br><span class="line">Date: Fri, 27 Sep 2019 10:38:39 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"name"</span> : <span class="string">"ex consequat ea irure"</span>,</span><br><span class="line">   <span class="string">"status"</span> : <span class="string">"available"</span>,</span><br><span class="line">   <span class="string">"tags"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">"id"</span> : 39284365,</span><br><span class="line">         <span class="string">"name"</span> : <span class="string">"elit Duis nostrud"</span></span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   <span class="string">"category"</span> : &#123;</span><br><span class="line">      <span class="string">"id"</span> : 39510092,</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">"quis veniam ipsum Excepteur"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">"id"</span> : 97837350,</span><br><span class="line">   <span class="string">"photoUrls"</span> : [</span><br><span class="line">      <span class="string">"reprehenderit exercitation commodo dolore"</span>,</span><br><span class="line">      <span class="string">"consectetur"</span>,</span><br><span class="line">      <span class="string">"sint"</span>,</span><br><span class="line">      <span class="string">"consequat"</span></span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="バリデーション"><a href="#バリデーション" class="headerlink" title="バリデーション"></a>バリデーション</h4><p>リクエストボディを指定せずに <code>POST: http://0.0.0.0:4010/pet</code>を投げてみるとエラーが返却されます。<br>このようにOAS定義にもとづいてクエリパラメータやリクエストボディのバリデーションを行ってくれます。<br>返却されるエラーの詳細は<a href="https://stoplight.io/p/docs/gh/stoplightio/prism/docs/guides/request-validation.md" target="_blank" rel="noopener">公式のドキュメント</a>を参考にしてみてください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s -D /dev/stderr -X POST -H <span class="string">"Accept:application/json"</span> http://localhost:4010/pet | json_pp</span><br><span class="line">HTTP/1.1 422 Unprocessable Entity</span><br><span class="line">access-control-allow-origin: *</span><br><span class="line">content-type: application/problem+json</span><br><span class="line">content-length: 350</span><br><span class="line">Date: Fri, 27 Sep 2019 10:41:23 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"validation"</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="string">"message"</span> : <span class="string">"Body parameter is required"</span>,</span><br><span class="line">         <span class="string">"severity"</span> : <span class="string">"Error"</span>,</span><br><span class="line">         <span class="string">"code"</span> : <span class="string">"required"</span></span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   <span class="string">"detail"</span> : <span class="string">"Your request body is not valid and no HTTP validation response was found in the spec, so Prism is generating this error for you."</span>,</span><br><span class="line">   <span class="string">"type"</span> : <span class="string">"https://stoplight.io/prism/errors#UNPROCESSABLE_ENTITY"</span>,</span><br><span class="line">   <span class="string">"title"</span> : <span class="string">"Invalid request body payload"</span>,</span><br><span class="line">   <span class="string">"status"</span> : 422</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h4><p>Prismはデフォルトで、全てのメソッドと全てのオリジンを許可するため、全てのプリフライトリクエストを<code>204</code>でハンドリングします。</p><p>ローカルで（Webpack Dev Server等を利用して）WEB開発をしているときに、プロキシを設定したりしなくて済むのは、嬉しいですね。</p><h2 id="Dredd"><a href="#Dredd" class="headerlink" title="Dredd"></a>Dredd</h2><p><a href="https://dredd.readthedocs.io" target="_blank" rel="noopener">https://dredd.readthedocs.io</a></p><p>最後に紹介するツールは「Dredd」というOAS定義と実際のAPIサーバの検証を行うコマンドラインベースのテストツールになります。</p><p>要はAPIのレスポンスがOAS定義通りだよね？というのを確認してくれるツールです。もともとはAPI Blueprintに対応していたツールですが、OpenAPIにも対応がなされました。</p><h3 id="主な特徴-2"><a href="#主な特徴-2" class="headerlink" title="主な特徴"></a>主な特徴</h3><p>主な特徴としては次のようなものが挙げられます。</p><ul><li>OpenAPI v2 &amp; v3に対応(ただしv3はExperimental)</li><li>Nodeモジュール、Dockerイメージとして配布</li><li>テスト時の前処理、後処理をさまざまな言語（Go, Node.js, Perl, Python, Ruby, etc…）で定義可能</li></ul><h3 id="使ってみた-1"><a href="#使ってみた-1" class="headerlink" title="使ってみた"></a>使ってみた</h3><p>テスト対象のAPIサーバは<code>localhost:4010</code>で動いている前提とします。</p><p>テスト仕様書となるOAS定義として今回もSwagger Petstoreを利用したいところですが、そのまま利用するには<a href="https://github.com/apiaryio/dredd/issues/893" target="_blank" rel="noopener">色々と問題</a>があるみたいなので、Petstoreを修正した簡易版のOAS定義を作成し利用します。</p><p>IDをキーにペットを取得するAPI、更新するAPIの2APIを定義しています。</p><ul><li><code>GET : /pet/{petId}</code></li><li><code>POST: /pet/${petId}</code></li></ul><figure class="highlight yaml"><figcaption><span>swagger.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swagger:</span> <span class="string">"2.0"</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line"><span class="attr">  title:</span> <span class="string">Swagger</span> <span class="string">Petstore</span></span><br><span class="line"><span class="attr">  version:</span> <span class="number">1.0</span><span class="number">.2</span></span><br><span class="line"><span class="attr">schemes:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">http</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">"/pet/&#123;petId&#125;"</span><span class="string">:</span></span><br><span class="line"><span class="attr">    get:</span></span><br><span class="line"><span class="attr">      summary:</span> <span class="string">Find</span> <span class="string">a</span> <span class="string">pet</span> <span class="string">by</span> <span class="string">ID</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">Returns</span> <span class="string">a</span> <span class="string">single</span> <span class="string">pet</span></span><br><span class="line"><span class="attr">      operationId:</span> <span class="string">getPetById</span></span><br><span class="line"><span class="attr">      produces:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">application/json;</span> <span class="string">charset=utf-8</span></span><br><span class="line"><span class="attr">      parameters:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">petId</span></span><br><span class="line"><span class="attr">          in:</span> <span class="string">path</span></span><br><span class="line"><span class="attr">          required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">          format:</span> <span class="string">int64</span></span><br><span class="line"><span class="attr">          x-example:</span> <span class="number">99999</span></span><br><span class="line"><span class="attr">      responses:</span></span><br><span class="line">        <span class="string">"200"</span><span class="string">:</span></span><br><span class="line"><span class="attr">          description:</span> <span class="string">successful</span> <span class="string">operation</span></span><br><span class="line"><span class="attr">          schema:</span></span><br><span class="line">            <span class="string">"$ref"</span><span class="string">:</span> <span class="string">"#/definitions/Pet"</span></span><br><span class="line"><span class="attr">    post:</span></span><br><span class="line"><span class="attr">      summary:</span> <span class="string">Update</span> <span class="string">a</span> <span class="string">pet</span> <span class="string">by</span> <span class="string">ID</span></span><br><span class="line"><span class="attr">      description:</span> <span class="string">""</span></span><br><span class="line"><span class="attr">      operationId:</span> <span class="string">updatePet</span></span><br><span class="line"><span class="attr">      consumes:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">application/json</span></span><br><span class="line"><span class="attr">      produces:</span></span><br><span class="line"><span class="bullet">        -</span> <span class="string">application/json;</span> <span class="string">charset=utf-8</span></span><br><span class="line"><span class="attr">      parameters:</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">petId</span></span><br><span class="line"><span class="attr">          in:</span> <span class="string">path</span></span><br><span class="line"><span class="attr">          required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">          format:</span> <span class="string">int64</span></span><br><span class="line"><span class="attr">          x-example:</span> <span class="number">99999</span></span><br><span class="line"><span class="attr">        - name:</span> <span class="string">body</span></span><br><span class="line"><span class="attr">          in:</span> <span class="string">body</span></span><br><span class="line"><span class="attr">          required:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">          schema:</span></span><br><span class="line"><span class="attr">            type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">            properties:</span></span><br><span class="line"><span class="attr">              name:</span></span><br><span class="line"><span class="attr">                type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">                example:</span> <span class="string">pochi</span></span><br><span class="line"><span class="attr">      responses:</span></span><br><span class="line">        <span class="string">"200"</span><span class="string">:</span></span><br><span class="line"><span class="attr">          description:</span> <span class="string">successful</span> <span class="string">operation</span></span><br><span class="line"><span class="attr">          schema:</span></span><br><span class="line">            <span class="string">"$ref"</span><span class="string">:</span> <span class="string">"#/definitions/Pet"</span></span><br><span class="line"><span class="attr">definitions:</span></span><br><span class="line"><span class="attr">  Pet:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">object</span></span><br><span class="line"><span class="attr">    required:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">name</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">photoUrls</span></span><br><span class="line"><span class="attr">    properties:</span></span><br><span class="line"><span class="attr">      id:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">integer</span></span><br><span class="line"><span class="attr">        format:</span> <span class="string">int64</span></span><br><span class="line"><span class="attr">        example:</span> <span class="number">99999</span></span><br><span class="line"><span class="attr">      name:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">        example:</span> <span class="string">doggie</span></span><br><span class="line"><span class="attr">      photoUrls:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">array</span></span><br><span class="line"><span class="attr">        items:</span></span><br><span class="line"><span class="attr">          type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">          example:</span> <span class="attr">http://example.com</span></span><br><span class="line"><span class="attr">      status:</span></span><br><span class="line"><span class="attr">        type:</span> <span class="string">string</span></span><br><span class="line"><span class="attr">        enum:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">available</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">pending</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">sold</span></span><br><span class="line"><span class="attr">        example:</span> <span class="string">sold</span></span><br></pre></td></tr></table></figure><h3 id="正常系"><a href="#正常系" class="headerlink" title="正常系"></a>正常系</h3><p>OAS定義と実際のAPIサーバのホストを引き数に<code>dredd</code> コマンドを実行すると2本のAPIのリクエストが投げられ、レスポンスが検証されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ dredd swagger.yaml localhost:4010 -h <span class="string">"Accept:application/json"</span></span><br><span class="line">pass: GET (200) /pet/99999 duration: 26ms</span><br><span class="line">pass: POST (200) /pet/99999 duration: 9ms</span><br><span class="line">complete: 2 passing, 0 failing, 0 errors, 0 skipped, 2 total</span><br><span class="line">complete: Tests took 38ms</span><br></pre></td></tr></table></figure><h3 id="異常系"><a href="#異常系" class="headerlink" title="異常系"></a>異常系</h3><p>テスト対象のAPIサーバのロジックを修正し、OAS定義と異なるレスポンスを返却するようにしてみましょう。<br>今回は、GETレスポンスの<code>status</code>が<code>available</code> <code>pending</code> <code>sold</code>のいずれのenum値にも当てはまらない値（<code>hoge</code>）を返します。</p><p><code>fail: body: At &#39;/status&#39; No enum match for: &quot;hoge&quot;</code>とログが出力され、期待通りテストが失敗していますね。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">$ dredd swagger.yml localhost:4010 -h <span class="string">"Accept:application/json"</span> </span><br><span class="line">fail: GET (200) /pet/99999 duration: 29ms</span><br><span class="line">pass: POST (200) /pet/99999 duration: 11ms</span><br><span class="line">info: Displaying failed tests...</span><br><span class="line">fail: GET (200) /pet/99999 duration: 29ms</span><br><span class="line">fail: body: At <span class="string">'/status'</span> No enum match <span class="keyword">for</span>: <span class="string">"hoge"</span></span><br><span class="line"></span><br><span class="line">request: </span><br><span class="line">method: GET</span><br><span class="line">uri: /pet/99999</span><br><span class="line">headers: </span><br><span class="line">    Accept: application/json</span><br><span class="line">    User-Agent: Dredd/12.0.3 (Darwin 18.2.0; x64)</span><br><span class="line"></span><br><span class="line">body: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">expected: </span><br><span class="line">headers: </span><br><span class="line">    Content-Type: application/json; charset=utf-8</span><br><span class="line"></span><br><span class="line">body: </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"doggie"</span>,</span><br><span class="line">  <span class="string">"photoUrls"</span>: [</span><br><span class="line">    <span class="string">"http://example.com"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"id"</span>: 99999,</span><br><span class="line">  <span class="string">"status"</span>: <span class="string">"sold"</span></span><br><span class="line">&#125;</span><br><span class="line">statusCode: 200</span><br><span class="line">bodySchema: &#123;<span class="string">"type"</span>:<span class="string">"object"</span>,<span class="string">"required"</span>:[<span class="string">"name"</span>,<span class="string">"photoUrls"</span>],<span class="string">"properties"</span>:&#123;<span class="string">"id"</span>:&#123;<span class="string">"type"</span>:<span class="string">"integer"</span>,<span class="string">"format"</span>:<span class="string">"int64"</span>,<span class="string">"examples"</span>:[99999]&#125;,<span class="string">"name"</span>:&#123;<span class="string">"type"</span>:<span class="string">"string"</span>,<span class="string">"examples"</span>:[<span class="string">"doggie"</span>]&#125;,<span class="string">"photoUrls"</span>:&#123;<span class="string">"type"</span>:<span class="string">"array"</span>,<span class="string">"items"</span>:&#123;<span class="string">"type"</span>:<span class="string">"string"</span>,<span class="string">"examples"</span>:[<span class="string">"http://example.com"</span>]&#125;&#125;,<span class="string">"status"</span>:&#123;<span class="string">"type"</span>:<span class="string">"string"</span>,<span class="string">"enum"</span>:[<span class="string">"available"</span>,<span class="string">"pending"</span>,<span class="string">"sold"</span>],<span class="string">"examples"</span>:[<span class="string">"sold"</span>]&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">actual: </span><br><span class="line">statusCode: 200</span><br><span class="line">headers: </span><br><span class="line">    access-control-allow-origin: *</span><br><span class="line">    content-type: application/json; charset=utf-8</span><br><span class="line">    content-length: 79</span><br><span class="line">    date: Sat, 28 Sep 2019 05:20:01 GMT</span><br><span class="line">    connection: close</span><br><span class="line"></span><br><span class="line">bodyEncoding: utf-8</span><br><span class="line">body: </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"id"</span>: 99999,</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"doggie"</span>,</span><br><span class="line">  <span class="string">"photoUrls"</span>: [</span><br><span class="line">    <span class="string">"http://example.com"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"status"</span>: <span class="string">"hoge"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">complete: 1 passing, 1 failing, 0 errors, 0 skipped, 2 total</span><br><span class="line">complete: Tests took 44ms</span><br></pre></td></tr></table></figure><p>このように<code>Dredd</code>を利用すれば、実際のAPIサーバがOAS定義に則ったレスポンスを返却しているかを検証することができます。<br>さらに今回は触れませんでしたが、テストの前処理、後処理等でDBのクリーンアップ、テストデータの投入を行うなどすれば、E2EのCIを実現することができます。</p><p>もともとAPI Blueprint用のツールだったこともあり、OpenAPIの扱いで筋力が必要なシーンが少なからずありますが、このあたりの泥臭い話は別途記載できればと思います。</p><h2 id="各種ツールの統合"><a href="#各種ツールの統合" class="headerlink" title="各種ツールの統合"></a>各種ツールの統合</h2><p>標準的な設計・開発プロセスにご紹介したツールを統合すると次のような形になります。</p><img src="/images/20191008/photo_20191008_02.png" style="border:solid 1px #000000"><p>みなさんもクライアントサイドとサーバサイドの結合テストにおいてインターフェースの齟齬による苦労をした経験はあるかと思います。</p><p>OAS定義を一元管理し、<code>prism</code>や<code>Dredd</code>を効果的に利用することでこのようなコストを大幅に削減でき、品質を強化することができます。</p><p>ご参考になれば幸いです。</p><hr><p>関連記事：</p><ul><li><a href="/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li><li><a href="/articles/20191002/">CUEを試して見る</a></li><li><a href="/articles/20191030/">GoでCUEのバリデーション機能を利用しつつ、.cue/.json/.yaml形式の設定ファイルを読み込む</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。その中でもDXチームは特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは。TIG DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;の武田です。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="OpenAPI" scheme="https://future-architect.github.io/tags/OpenAPI/"/>
    
      <category term="Swagger" scheme="https://future-architect.github.io/tags/Swagger/"/>
    
  </entry>
  
  <entry>
    <title>CUEを試して見る</title>
    <link href="https://future-architect.github.io/articles/20191002/"/>
    <id>https://future-architect.github.io/articles/20191002/</id>
    <published>2019-10-01T23:30:09.000Z</published>
    <updated>2019-10-30T02:05:36.346Z</updated>
    
    <content type="html"><![CDATA[<p>前回のエントリー、<a href="https://future-architect.github.io/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a>の続きです。</p><p>設定ファイルをどうするか問題はいろいろ悩ましい問題であります。そんな中、設定ファイル用言語という触れ込みの<a href="https://cuelang.org/" target="_blank" rel="noopener">CUE</a>がリリースされました。</p><p>すでに、NSSOLの方が、Linterとして使うという紹介記事をすでに書かれています。これはユースケースの一部（これでも有用ですが）です。まだ使い込んだわけではなく、チュートリアルとドキュメントを一通り読みつつ軽く試した程度ですが、全体的な紹介をしようと思います。</p><ul><li><a href="https://qiita.com/Urotea/items/28fa6a0822de16da02f6" target="_blank" rel="noopener">yamlやJsonのチェック(Lint)ができるCUEの紹介</a></li></ul><h1 id="CUEによってできるようになること"><a href="#CUEによってできるようになること" class="headerlink" title="CUEによってできるようになること"></a>CUEによってできるようになること</h1><p>主な特徴としては次のような感じです。</p><ul><li>人が書く設定ファイル(JSON/YAML/TOML/iniあたりがライバル)のための言語</li><li>スキーマ定義が書けて、バリデーションが可能</li><li>テンプレート機能で一部が違うデータを大量に生成みたいなのがしやすい</li><li>外部プログラムを起動してその結果を取り出したり、文字列演算や数値演算が可能（実行しているホスト名を取ってくるとか）</li><li>バリデーションのコードを生成できる（Goのみ）</li><li>GoやProtocol BuffersからCUEの定義ファイルを生成できる</li><li>JSON/YAMLに変換できるし、JSON/YAMLから読み込むことも可能</li><li>パーサーや、読み込んだデータを問い合わせるクエリーのAPIがある（Goのみ)</li></ul><p>XMLやJSONはバリデーション側がXMLスキーマ・JSONスキーマとは別の規格でしたが、CUEは最初からスキーマやバリデータが仕様に入っています。NSSOLさんのブログ記事は、cueコマンドを使って、YAMLを読み込んでバリデーションでしたが、メインストリームの利用方法は、.cueという言語の形式で設定ファイルを記述し、スキーマも記述し、バリデーションしつつ、Goのプログラムに読み込んだり、他の形式に出力したり、という感じでしょう。</p><p>ドキュメントを見る感じだと、ツールやファイルの流れはこんな感じでしょう。</p><img src="/images/20191002/1.png"><p>今までできなかったがCUEによってできるようになったこととしてはロジックが内部に書けるようになったことです。JSONやXMLで数式とかちょっとしたロジックを書いたとしても、それを読み込んで評価する処理は別に書く必要がありました。</p><p>例えば、環境変数を展開したい、とかシェル的に処理を実行してその結果を取り込みたいとか、そういうのはJSONやXMLだけではできません。そういうリッチな設定ファイルが欲しい場合は、Groovyとか、PythonとかRubyとかJavaScriptとか、汎用プログラミング言語を設定ファイルとして使う、ということが行われてきました。CUEを使えば、ちょっとリッチな設定ファイルが使えるようになります。まあできなかったかというと、AWKみたいなのはあったわけで、それがモダンになって木構造データに対応して登場した、みたいな感じですかね。</p><h1 id="レベル1-ベターJSONとしてのCUE"><a href="#レベル1-ベターJSONとしてのCUE" class="headerlink" title="レベル1: ベターJSONとしてのCUE"></a>レベル1: ベターJSONとしてのCUE</h1><p>このチュートリアルの基礎を読むのが手っ取り早いです</p><p><a href="https://github.com/cuelang/cue/blob/master/doc/tutorial/basics/json.md" target="_blank" rel="noopener">https://github.com/cuelang/cue/blob/master/doc/tutorial/basics/json.md</a></p><p>最初の方に出てくるのが次のようなサンプルを組み合わせたのが次のコードです。JSONと似ていますが、ハイフンなどの記号がなければキーのダブルクオートが省略できます。JSONでキー名をいちいち括るのはめんどくさいですよね？前回のエントリーではてブとかでコメントや末尾のカンマについて触れている人が多数見られましたが、CUEではコメントも入れられるし、末尾のカンマは書いても書かなくてもいいです（ただし、リストでは省略はできない）。</p><p>即値の記述方法も多彩です。例えば、1Mは1000*1000ですね。数字もセパレータを入れたりできます。文字列も複数行のテキストが入れられます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // コメント</span><br><span class="line">    one: 1</span><br><span class="line">    two: 2</span><br><span class="line">    mega: 1M</span><br><span class="line"></span><br><span class="line">    &quot;two-and-a-half&quot;: 2.5</span><br><span class="line"></span><br><span class="line">    multiline: &quot;&quot;&quot;</span><br><span class="line">    Hello</span><br><span class="line">    World!</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>さらにトップレベルの波かっこは省略可能です。YAMLユーザー大歓喜ですね。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// コメント</span><br><span class="line">one: 1</span><br><span class="line">two: 2</span><br></pre></td></tr></table></figure><p>1つのキーのみを持つオブジェクトは、スペース区切りで並べることで表現できます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a b c: 10</span><br></pre></td></tr></table></figure><p>これは次のJSONと等価です。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"a"</span>: &#123;</span><br><span class="line">    <span class="attr">"b"</span>: &#123;</span><br><span class="line">      <span class="attr">"c"</span>: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上が書きやすくなったJSONとしてのCUEの説明です。</p><h1 id="レベル2-CUEと型定義"><a href="#レベル2-CUEと型定義" class="headerlink" title="レベル2: CUEと型定義"></a>レベル2: CUEと型定義</h1><p>CUEはJSONと違って、同じキーの定義が複数あってもエラーになりません。登場するたびに、制約が掛け合わされていくような感じです。これを応用して型定義を行なっていきます。複数の条件をかけあわせていく中で矛盾が出ると「コンフリクトがあった」といった感じでエラーになります。</p><p>次のコードは最初にnumberと定義しています。これで数字のどれか、という定義になります。intで整数なども指定できます。int/floatが区別されているのはJS由来のJSONにはない嬉しい点ですよね。次に同じキーに対して1を入れています。最初の制約と両方が満たされるので、これはOKです。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a: number</span><br><span class="line">a: 1</span><br></pre></td></tr></table></figure><p>次の定義は2つめに出てくる制約が最初の制約とマッチしないのでエラーになります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a: string</span><br><span class="line">a: 1</span><br></pre></td></tr></table></figure><p>次の書き方で、値がなかった場合のデフォルト値（ここでは1）を設定することもできます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i: int | *1</span><br></pre></td></tr></table></figure><p>コロン二つを使って、オブジェクトの型定義もできます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Member :: &#123;</span><br><span class="line">  age: &gt; 10</span><br><span class="line">  name: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">me: Member</span><br><span class="line">me: &#123;</span><br><span class="line">  age: 39</span><br><span class="line">  name: &quot;Shibukawa&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これらの定義はパッケージとしてまとめて定義しておいて、インポートして使うという使い方もできるようです。また、go getっぽい感じで<a href="https://cuelang.org/docs/integrations/go/#extract-cue-from-go" target="_blank" rel="noopener">cue getでGoのパッケージを指定すると、そこから定義を抽出する</a>という方法も紹介されています。本当かよ。</p><p>NSSOLさんのQiita記事でも書かれていましたが、型も値です。ノリとしてはTypeScriptに近い感じですね。逆にいえば、値を使った制約も可能です。次の例はどちらかの文字列のみが入るという制約なります。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文字列は複数の選択肢のみ許容が可能</span></span><br><span class="line">conn: <span class="string">"tcp"</span> | <span class="string">"udp"</span></span><br><span class="line">conn: <span class="string">"tcp"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 空文字列は許容しない</span></span><br><span class="line">name: !=<span class="string">""</span></span><br><span class="line">name: <span class="string">"tako"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数値も範囲指定が可能</span></span><br><span class="line">ri: &gt;=<span class="number">3</span> &amp; &lt;<span class="number">8</span> &amp; <span class="keyword">int</span></span><br><span class="line">ri: <span class="number">7</span></span><br></pre></td></tr></table></figure><h1 id="レベル3-宣言的でプログラマブルなCUE"><a href="#レベル3-宣言的でプログラマブルなCUE" class="headerlink" title="レベル3: 宣言的でプログラマブルなCUE"></a>レベル3: 宣言的でプログラマブルなCUE</h1><p>ここからだんだんヤバくなってきます。CUEにはReactの仮想DOM的な、木構造を効率的に作り出すためのプログラマブルな機能がいろいろあります。</p><p>チュートリアルから持ってきた例です。CUE用語の名前は「テンプレート」です。React用語でいうとコンポーネントです。引数が<code>&lt;Name&gt;</code>です。中でもNameという参照が使えるので、これを値として利用するのも可能です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">job &lt;Name&gt;: &#123;</span><br><span class="line">    name:     Name</span><br><span class="line">    replicas: uint | *1</span><br><span class="line">    command:  string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">job list command: &quot;ls&quot;</span><br><span class="line"></span><br><span class="line">job nginx: &#123;</span><br><span class="line">    command:  &quot;nginx&quot;</span><br><span class="line">    replicas: 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これは次のように展開されます。ちょっと複雑なので解説すると、スペース区切りでオブジェクトの階層になる表記と、同じキーがあったら合成される（この場合、jobというキーのオブジェクトが二つあって合成されている）、の組み合わせになっています。テンプレートでは引数の設定も可能だし、上書きしたい値を後から書くこともできます。ホットスポットだけを書き換えてたくさん定義を量産することが可能です。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"job"</span>: &#123;</span><br><span class="line">    <span class="attr">"list"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"list"</span>,</span><br><span class="line">      <span class="attr">"replicas"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"command"</span>: <span class="string">"ls"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"nginx"</span>: &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"nginx"</span>,</span><br><span class="line">      <span class="attr">"replicas"</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">"command"</span>: <span class="string">"nginx"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>もし金額が100万円超えたら稟議が必要なのでneedCheck: trueを足したい、という条件分岐で要素を追加もできます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">price: 10M</span><br><span class="line">if price &gt; 1M &#123;</span><br><span class="line">  needCheck: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Python的なリスト内包表記も使えます。remというのは割り算の余りを算出する演算子です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ x*x for x in items if x rem 2 == 0]</span><br><span class="line">items: [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]</span><br></pre></td></tr></table></figure><p>forループで要素を量産することもできます。また、iterpolationという機能は、他の言語でいうところのフォーマット文字列（Python用語）、テンプレート文字列（JavaScript用語)、 式展開（Ruby/PHP用語）です。変数の値を埋め込んだ文字列の生成もできます。下記のサンプルは配列の要素を取り出してそれを小文字に変換したものをキーとしたオブジェクトを3セット作っています。やばいですね。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &quot;strings&quot;</span><br><span class="line"></span><br><span class="line">a: [ &quot;Barcelona&quot;, &quot;Shanghai&quot;, &quot;Munich&quot; ]</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    for k, v in a &#123;</span><br><span class="line">        &quot;\( strings.ToLower(v) )&quot;: &#123;</span><br><span class="line">            pos:     k + 1</span><br><span class="line">            name:    v</span><br><span class="line">            nameLen: len(v)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="レベル4-最終形のCUE"><a href="#レベル4-最終形のCUE" class="headerlink" title="レベル4: 最終形のCUE"></a>レベル4: 最終形のCUE</h1><p>もうこのあたりは僕も理解できていません。<a href="https://godoc.org/cuelang.org/go/pkg" target="_blank" rel="noopener">CUEから使えるパッケージ</a>を見ると、JSONのテキストのパースやらシリアライズができるようですし、CSVの読み書きも可能っぽいです。ファイルの読み書き、外部プログラムの実行、HTTP、ハッシュの計算・・・・</p><p><a href="https://godoc.org/cuelang.org/go/pkg/tool/http" target="_blank" rel="noopener">http.Serve</a>でサーバーも作れちゃうのかな？もう理解不能です。tool以下のパッケージは少し特殊なやつらっぽいですが・・・</p><h1 id="現時点でのCUEの欠点"><a href="#現時点でのCUEの欠点" class="headerlink" title="現時点でのCUEの欠点"></a>現時点でのCUEの欠点</h1><p>現時点でGo以外のパーサーが用意されていないのは、Go以外のユーザーにとっては大きな欠点でしょう。代替策としては、.cueファイルに対してコマンドラインツールを使って.jsonや.yamlファイルに変換してしまう、という方法はあります。これにより、.cueの機能を使いつつ、プログラムで読み込んで利用する部分の断絶を補うことができ、Go以外の言語でも利用できるようになります。外部ツール依存は増えてしまいますが、CUEがデータをクレンジングしてくれる部分はやってくれるので、読み込む側ではエラーチェックやら何やらを省略できます。</p><p>機能案の中にまだ作業中とされているのが、Goコードの生成です。これはJSON-to-Goなどのようにファイルからそれを扱うGoの構造体を一発生成する機能かと思われます。クエリーのAPI呼び出しでアクセスする機能は提供されていますが、やはり構造体になってしまった方が、コード補完との相性は良く実装時には捗るでしょう。</p><p>個人的に大きいのが、エディタ拡張がまだ存在しない、という点です。コードハイライトやコード補完ですね。これも脳のメモリ使用量を削減してくれるため、大変助かる機能ではあります。また、その場でバリデーションしてもらえると、試行錯誤のループが小さくなるので、アウトプットが出来上がる時間が大幅に短くなります。このため、小さめの設定ファイルであれば、前回紹介したJSONスキーマ中心のフローのほうがまだまだ便利だと思っています。</p><h1 id="CUEのユースケース"><a href="#CUEのユースケース" class="headerlink" title="CUEのユースケース"></a>CUEのユースケース</h1><p>このような欠点はありつつも、CUEは魅力的なツールです。公式ドキュメントでもKubernetesやらOpenAPI(Swaggerの後継と言われているがなかなかエコシステムが揃ってこないやつ)での利用例が紹介されていますが、このように、超巨大なJSONやらYAMLやらを書く人は、サポートツールとしてCUEを使うと良いでしょう。例えば、AWSのよくある巨大なJSONやら、長大なdocker-compose.yamlを書くときに、一部をパラメータ化しておきたいとか、冗長な表現をまとめたい、というときに.cueで書いてYAMLを生成するという、コードジェネレータとして利用すると生産性が上がるでしょう。</p><p>もちろん、既存のYAMLとJSONのバリデーションツールとして使うというNSSOLさんのQiitaで紹介されていた方法も有用ですが、プログラマブルな機能を活用するとデータ生成ツールとして活用できるため、せっかく使うなら入力データはJSONやYAMLよりも、.cueを使う方が良いと思います。</p><p>また、CUEの欠点でGo以外のパーサーがないのでCUEのツールを使って変換してから読み込む、というのを紹介しました。こうなると「JSON5とか他のサードパーティ製のパーサー使うのと変わらないじゃん」と思うかもしれませんが、CUEの方が「設定ファイルを書く人のデバッグのしやすさ」は大きく前進するでしょう。ほとんどのこの手のパーサーはトークンの出現位置などはパース時に消えてしまいますし、プログラム言語で読み込んでからあとからデータ整合性チェックを行って、問題のデータを指摘してもオリジナルのファイル上の行と桁情報って出せないんですよね。JSON変換してからJSONスキーマでチェックしようとすると、オリジナルとは違う行・桁でのエラーになる可能性すらあって、良かれと思って導入したヒューマンリーダブルな便利フォーマットがかえって不便になります。これはPythonやRubyやJavaScriptのプログラミング言語自身を使ったDSL表現の設定ファイルでもほぼ同様です（スタックをたどってオリジナルの位置情報を保存までやればできるはずですが、そういう実装例は見たことがない）。</p><p>CUEの場合は型チェックやらデータの整合性チェックやらをすべてCUE上で定義して行なえます。正規表現も使えますし、enum的な特定の文字列しか許さない、といったことも表現できます。CUE上にチェックロジックのほとんどを持ち込むことができれば、データ作成者側はファイル上のエラー行数を見てデータ修正ができるようになります。そのため、例えCUEを外部コマンド呼び出しをして呼び出してJSON変換したとしても、他のパーサーでは得られないメリットがあると言えます。</p><h1 id="設定ファイルのまとめ"><a href="#設定ファイルのまとめ" class="headerlink" title="設定ファイルのまとめ"></a>設定ファイルのまとめ</h1><p>2回に渡って設定ファイルについて説明しました。僕としての問題設定というか、設定ファイルのフォーマットについての考慮点は次の4点でした。</p><ul><li>パーサーがある</li><li>スキーマがある</li><li>エディタでコードハイライトを行ったり、文法チェックや、スキーマによるチェックやコード補完が利用可能（設定データを書く人の苦労が少ない）</li><li>データ作成、スキーマ作成、読み込み用コード作成など、複数の作業の手間が省けること（読み込み側アプリ実装者の苦労が少ない）</li></ul><p>JSONに関しては色々不満はありつつも、ほぼ満たしていると思っています。CUEは出たばかりですが、エディタサポートさえ入ったら、Goユーザーとしては不満はほとんどないです。今後に期待ですね。今作りたいものが一段落したら自分でも作って見たいところですが。</p><p>今回は、構成管理的な設定ファイルについて考えていたので、Twelve-Factor App的な設定の受け渡しを便利にする方法とかは範囲外としました。.envファイルにまとめるにはどうするか、とか、Dockerビルドする時にプライベートリポジトリにアクセスさせたいけどgithubの秘密鍵どうしようとか、AWSやGCPのSecure Managerとの連携とか、そっちはそっちでいろいろ楽しい世界ではありますし、誰かがまとめてくれるのを期待しています。</p><hr><p>関連記事：</p><ul><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li><li><a href="/articles/20191030/">GoでCUEのバリデーション機能を利用しつつ、.cue/.json/.yaml形式の設定ファイルを読み込む</a></li><li><a href="/articles/20190814/">WAFとして go-swagger を選択してみた</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前回のエントリー、&lt;a href=&quot;https://future-architect.github.io/articles/20191001/&quot;&gt;一周回って、人間が読み書きする設定ファイルはJSONが良いと思った&lt;/a&gt;の続きです。&lt;/p&gt;
&lt;p&gt;設定ファイルをどうするか問
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="CUE" scheme="https://future-architect.github.io/tags/CUE/"/>
    
  </entry>
  
  <entry>
    <title>一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</title>
    <link href="https://future-architect.github.io/articles/20191001/"/>
    <id>https://future-architect.github.io/articles/20191001/</id>
    <published>2019-10-01T00:31:51.000Z</published>
    <updated>2019-10-30T02:05:40.280Z</updated>
    
    <content type="html"><![CDATA[<p>最近GoでCLIツールを作っていますが、JSONが良いとなんとなく思っています。</p><p>続編も公開しました（追記：2019年10月2日）。</p><ul><li><a href="https://future-architect.github.io/articles/20191002/">CUEを試して見る</a></li></ul><h1 id="設定ファイルフォーマット"><a href="#設定ファイルフォーマット" class="headerlink" title="設定ファイルフォーマット"></a>設定ファイルフォーマット</h1><p>近年、設定ファイルを書くプレーンテキストのフォーマットとしては次のようなものが多いかと思われます。</p><ul><li>XML<ul><li>多くのプログラミング言語において標準ライブラリで扱える（ただしNode.jsにはない）</li><li>XMLスキーマ、XSLTなどの周辺ツールも揃っているが、記述が冗長になりがちで、敬遠されがち。</li></ul></li><li>ini<ul><li>QtやPythonの標準ライブラリで扱える</li><li>深い階層や配列を扱うのが苦手</li></ul></li><li>JSON<ul><li>ほとんどのプログラミング言語で標準ライブラリに入っている<ul><li>特にフロントエンドのJavaScriptでは追加のライブラリを利用する必要がなく、速度も早く、gzipすればファイルサイズもかなり小さくなる。T</li></ul></li><li>閉じかっこが必要、コメントがつけられない、末尾のカンマをきちんとルール通りに表記しなければならない<ul><li>そのためコンフリクト時のマージにコツが必要</li><li>JSON5といった別のバリエーションもある</li></ul></li></ul></li><li>YAML<ul><li>インデントで階層を表現できるし、配列、辞書など表現力はJSONに負けない</li><li>Ruby以外は外部ライブラリ必須</li><li>配列のときにインデントの字下げをする？など書き方に好き嫌いがある</li></ul></li><li>TOML<ul><li>書きやすいiniみたいな</li><li>標準ライブラリで扱える言語はない</li></ul></li></ul><p>JavaScript系のものはJSONが多いですし、docker-composeやKubernetesはYAMLですし、Pythonは古来からのフォーマットは.iniが多かったりはしますが、最近登場したPoetryやPipenvはTOMLを採用しています。まあJSだと、package.jsonをのぞいてはJSON対応ではあるけど、JavaScriptでも書ける（<code>module.exports =</code>で書く)とかあったりもします。</p><h1 id="JSONは周辺ツールが充実している"><a href="#JSONは周辺ツールが充実している" class="headerlink" title="JSONは周辺ツールが充実している"></a>JSONは周辺ツールが充実している</h1><p>で、いろいろある中で、最近作っているツールではJSONを使いました。</p><p>汎用フォーマットは実装側からすると便利だけど、ユーザー視点だと自由すぎるので、制約が欲しくなってきます。JSONにはJSONスキーマがあります。</p><p>生のJSONを作って、次のようなツールに入れると、それを満たすJSONスキーマをざざっと作ってくれます。構造化とかはされていないので共通で使える部品をdefinitionsに移動する、のリファクタリングをしていく感じです。</p><ul><li><a href="https://jsonschema.net/" target="_blank" rel="noopener">https://jsonschema.net/</a></li></ul><p>Visual Studio CodeとIntelliJでしか試してませんが最近はエディタ側もかなり便利に進化しています。IntelliJでは、要素のコピペでは、末尾に貼り付けた時はカンマを削除してくれたりといった入力支援があったりします。もちろん、文法チェックもしてくれるため、エディタ上で入力したものをプログラムに持って行ってエラーになって悩まされる、ということは今はもう過去の話でしょう。また、JSONスキーマがあると、JSONファイルをエディタで入力するときにも入力支援で補完してくれたり、スキーマ違反を指摘してくれたりします。</p><p>VSCodeだと、<a href="https://code.visualstudio.com/docs/languages/json#_json-schemas-and-settings" target="_blank" rel="noopener">このあたり</a>を読むと、設定の仕方が書かれており、ファイル名のパターンごとにスキーマを設定できます。</p><figure class="highlight"><figcaption><span>settings.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"json.schemas": [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"fileMatch"</span>: [</span><br><span class="line">            <span class="string">"/.babelrc"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"http://json.schemastore.org/babelrc"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>わざわざ設定しなくても、編集したいJSONファイルの中からスキーマを指定することもできます。この記法はVSCodeでもIntelliJでも有効でした。スキーマは相対パスでローカルのスキーマファイルを指定することもできますし、URLを書くこともできそうです（試した時にはファイルがプライベートリポジトリだったので失敗しましたが）。</p><figure class="highlight json"><figcaption><span>編集しているJSONファイル</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"$comment"</span>: <span class="string">"これで補完とかチェックが効くようになります"</span>,</span><br><span class="line">  <span class="attr">"$schema"</span>: <span class="string">"../schema.json"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>設定ファイルという文脈ではあまり登場はしませんが、大規模なデータになると、jqみたいなツールを使って情報を取り出す、という活用方法もあります。</p><p>Goから扱うのも簡単です。JSON to Goというウェブサイトを僕はよく使いますが、これを使うと、生のJSONから、それを解釈するための構造体を作って来れます。これで、encoding/jsonを使った読み書きがだいぶ簡単になります。これ以外にもいろいろあります。<a href="https://qiita.com/aaharu/items/ed578fc0e3e42dbcc4b4" target="_blank" rel="noopener">JSON Schema や JSON から Go の struct を生成する</a>というエントリーにまとまっています。</p><ul><li><a href="https://mholt.github.io/json-to-go/" target="_blank" rel="noopener">https://mholt.github.io/json-to-go/</a></li></ul><p>JSONスキーマをGo上で利用してバリデーションもできます。</p><ul><li><a href="https://github.com/xeipuuv/gojsonschema" target="_blank" rel="noopener">https://github.com/xeipuuv/gojsonschema</a></li></ul><p>Goの構造体からJSONスキーマを生成することもできます。</p><ul><li><a href="https://github.com/alecthomas/jsonschema" target="_blank" rel="noopener">https://github.com/alecthomas/jsonschema</a></li></ul><p>現在の時点でどのぐらい使われているかはわかりませんが、JSONスキーマから編集画面生成というのもありましたね。</p><ul><li><a href="http://jeremydorn.com/json-editor/" target="_blank" rel="noopener">http://jeremydorn.com/json-editor/</a></li></ul><p>マージ難しい問題も、マージ用のツールがあったりもします。行志向のdiffロジックだとそりゃーJSONとは相性が悪いわけで、木構造をきちんと理解してdiffを出せばマージの難易度は下がります。JSONは末尾のカンマとかのせいでコンフリクトはしやすいですが、ちょっと込み入った変更で辛いのはJSONもYAMLも変わらないですし。</p><ul><li><a href="https://github.com/jonatanpedersen/git-json-merge" target="_blank" rel="noopener">https://github.com/jonatanpedersen/git-json-merge</a></li></ul><p>マージ以外のエコシステムを図示したのが次のフローになります。</p><img src="/images/20191001/1.png"><h2 id="JSONとコメント"><a href="#JSONとコメント" class="headerlink" title="JSONとコメント"></a>JSONとコメント</h2><p>JSONの不満というとコメントがあります。JSON5などを使うという方法もありますが、JSONの派生のフォーマットを使うと、標準のパーサーではダメだったり、JSONのメリットがいくつかスポイルされてしまいます。品質とか機能性が純正に比べると・・・みたいなこともありますし。</p><p>JSONスキーマのところのサンプルで少し紹介していましたが、JSON Schemaでは、<a href="http://json-schema.org/understanding-json-schema/reference/generic.html#comments" target="_blank" rel="noopener">Draft 7にコメント記法が入りました</a>。好き嫌いはあるとは思いますが、とりあえずこれだけあれば十分使えるので、僕はこれを利用しています。あ、エディタで余計な要素としてエラーにならないようにするためには、スキーマ定義で “$comment” も許容するようにスキーマを書かないとダメですよ。</p><figure class="highlight json"><figcaption><span>編集しているJSONファイル</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"$comment"</span>: <span class="string">"これで補完とかチェックが効くようになります"</span>,</span><br><span class="line">  <span class="attr">"$schema"</span>: <span class="string">"../schema.json"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ちなみに、TypeScriptの設定はコメントが書けますが、あれはJSON5ではなくて、JavaScriptパーサーに特殊なモードがあってそいつを利用しています。処理系内部にハードコードされていますが、あれはライブラリ化して出して欲しいですね。</p><h1 id="最近のワークフロー"><a href="#最近のワークフロー" class="headerlink" title="最近のワークフロー"></a>最近のワークフロー</h1><p>さて、上記の絵だと、どこから作成しても、他のものを生成できて、自由に作り始められそうな感じはありますが、やはり作りやすい、作りにくいという順序はあります。よくあるちょっとした自動化でもありがちですが、ワークフローを考える上で考慮すべきことはいくつかあります。</p><ul><li>生成したあとに手直しが必要で、なんどもイテレーションを回すと、手直しの工数とかミスが無視できない</li><li>宣言的な定義と、成果物で使う脳みそが違っていて、かなり頭を使う必要がある</li></ul><p>上記のツールだと、JSONからJSONスキーマ生成あたりでかなり冗長なスキーマが出てくるので、手直しの手間暇がそこそこかかりました(ので、点線にしています)。</p><p>最初はJSONファーストでやっていましたが、最近はGoの構造体ファーストでやっています。ソースコードジェネレートは初回だけです。ソースコードジェネレートを活用しようとすると、その後手を加えたものとのマージをどうするか問題がよく発生します。ジェネレーションギャップパターンみたいなデザインパターンもありますが、数回分の手間暇のためにわざわざそのためにコードに複雑さを導入するのもなぁ、と思いますし、設計意図が一番白黒はっきりするのがソースコード側なので、他のものをここに追従させるのが一番スムーズに感じます。</p><ol><li>設定ファイルのモックを実際にJSONで作って見る</li><li>それをJSON-to-GoでGoの構造体にする</li><li>omitemptyとかいろいろGoの構造体のタグを編集する</li><li>JSONスキーマ生成</li><li>雑に作ったJSONに<code>$schema</code>を指定してスキーマを設定し、JSON側をいじって見て感触を確かめる</li><li>足りないところがあればまたGoの構造体を修正してJSONスキーマを生成</li></ol><p>JSONスキーマを生成して、設定ファイルにスキーマを設定した段階で、依存関係が完成します。</p><ul><li>Goの構造体 -&gt; JSONスキーマ -&gt; JSON</li></ul><p>ですが、最初からこの依存関係を守ろうとして、設定ファイルの完成イメージと遠いところで試行錯誤するのも脳のメモリを大量に使って効率が悪いので、最初だけは次のフローを入れています。</p><ul><li>JSON -&gt; Goの構造体</li></ul><p>JSONスキーマ生成は次のようなコードを使ってやっています。go generateとかで実行してもいいかも。</p><figure class="highlight go"><figcaption><span>/cmd/jsonschema/main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"path/filepath"</span></span><br><span class="line"><span class="string">"runtime"</span></span><br><span class="line"><span class="string">"github.com/alecthomas/jsonschema"</span></span><br><span class="line"><span class="string">"github.com/shibukawa/自分のパッケージ"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://gist.github.com/abrookins/2732551#file-gistfile1-go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> __<span class="title">FILE__</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">_, filepath, _, _ := runtime.Caller(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> filepath</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> __<span class="title">DIR__</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> filepath.Dir(__FILE__())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gen</span><span class="params">(fileName <span class="keyword">string</span>, target <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">prjPath := filepath.Join(__DIR__(), <span class="string">"../../"</span>, fileName)</span><br><span class="line">fmt.Printf(<span class="string">"writing: %s\n"</span>, prjPath)</span><br><span class="line">prj, err := os.Create(prjPath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> prj.Close()</span><br><span class="line">schema := jsonschema.Reflect(target)</span><br><span class="line">e := json.NewEncoder(prj)</span><br><span class="line">e.SetIndent(<span class="string">""</span>, <span class="string">"  "</span>)</span><br><span class="line">e.Encode(schema)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">gen(<span class="string">"config-schema.json"</span>, &amp;自分のパッケージ.Config&#123;&#125;)</span><br><span class="line">gen(<span class="string">"addin-schema.json"</span>, &amp;自分のパッケージ.Addin&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次回は、話題の設定ファイル記述言語、<a href="https://cuelang.org/" target="_blank" rel="noopener">CUE</a>を取り上げます。</p><ul><li><a href="/articles/20191002/">CUEを試して見る</a></li></ul><hr><p>関連記事：</p><ul><li><a href="/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li><li><a href="/articles/20191002/">CUEを試して見る</a></li><li><a href="/articles/20191030/">GoでCUEのバリデーション機能を利用しつつ、.cue/.json/.yaml形式の設定ファイルを読み込む</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近GoでCLIツールを作っていますが、JSONが良いとなんとなく思っています。&lt;/p&gt;
&lt;p&gt;続編も公開しました（追記：2019年10月2日）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://future-architect.github.io/articl
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="JSON" scheme="https://future-architect.github.io/tags/JSON/"/>
    
      <category term="jsonschema" scheme="https://future-architect.github.io/tags/jsonschema/"/>
    
  </entry>
  
  <entry>
    <title>Let&#39;s Try GCP #2 ～Cloud FunctionをVPC connectorと一緒に使ってみる～</title>
    <link href="https://future-architect.github.io/articles/20190927/"/>
    <id>https://future-architect.github.io/articles/20190927/</id>
    <published>2019-09-27T00:34:14.000Z</published>
    <updated>2019-10-09T00:13:20.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG/DXユニット所属の<a href="https://twitter.com/famipapamart" target="_blank" rel="noopener">村田</a>と申します！<br>DXユニットとはデジタルトランスフォーメーションに関わる仕事を主に推進していくチームで、直近で私はとあるIoTの案件に携わっています。</p><p>この記事は”素早くサービスの使い所を把握してもらう”ことや”新しいサービスをさくっと試すための手助けをする”ことを目的に書いたGCPサービスに特化した記事です。<br>前回のCloud Run Button編に続き、気軽にクラウドに慣れ親しんでもらうためのコンテンツの第2弾となります。（前回の記事は<a href="https://future-architect.github.io/articles/20190909/">こちら</a>）</p><p>今回はCloud FunctionをVPC Connectorと一緒に利用します。</p><h1 id="Cloud-Functionsとは"><a href="#Cloud-Functionsとは" class="headerlink" title="Cloud Functionsとは"></a>Cloud Functionsとは</h1><p>Cloud FunctionsはGCPが提供するマネージドサービスの一つであり、サーバーレスでアプリケーションを実行できます。ユーザは対応した言語でアプリケーションをデプロイするだけでOK。後はGCPが必要な時に必要な分のサーバリソースを立ち上げ、その上でアプリケーションを実行してくれます。AWSに慣れた人であれば、AWS Lambdaを思い浮かべてもらえると理解しやすいかと思います。</p><p>イベントドリブンで稼働する本サービスですが、様々なイベントに対応していて、特にGCPの他のマネージドサービスとの連携に優れています。例えばシンプルなHTTPリクエスト起点の動作のみならず、Cloud StorageやCloud Pub/Subにて発火するイベント起点での動作にも対応しており、アーキテクチャデザインの幅が広がります。</p><h1 id="Cloud-Functionsを使ってみる"><a href="#Cloud-Functionsを使ってみる" class="headerlink" title="Cloud Functionsを使ってみる"></a>Cloud Functionsを使ってみる</h1><p>では早速Cloud Functionsを使ってみましょう。</p><h2 id="シンプルに使ってみる"><a href="#シンプルに使ってみる" class="headerlink" title="シンプルに使ってみる"></a>シンプルに使ってみる</h2><h3 id="Functionの作成"><a href="#Functionの作成" class="headerlink" title="Functionの作成"></a>Functionの作成</h3><p>まずはコンソールから「CREATE FUNCTION」ボタンを押下します。<br><img src="/images/20190927/photo_20190927_01.png" style="border:solid 1px #000000"></p><p>以下のような画面に遷移します。<code>Name</code>やその他項目群はデフォルトが埋まっているので、そのまま作成してしまうことも可能です。画面は<code>Trigger</code>選択のプルダウンを開いた状態のものですが、先述の通り様々なイベントをトリガーとして利用することが可能です。<br><img src="/images/20190927/photo_20190927_02.png" style="border:solid 1px #000000" class="img-middle-size"></p><p>デフォルトで選択されている<code>Runtime</code>は<code>Node.js</code>ですが、<code>Go</code>などを選択することも可能です。また、各言語では予め<code>HelloWorld</code>が準備されており、例えば<code>Node.js</code>では<code>index.js</code>にて<code>helloWorld</code>関数が最初から定義されています。<br><img src="/images/20190927/photo_20190927_03.png" style="border:solid 1px #000000" class="img-middle-size"></p><p>下部には<code>Advanced options</code>の欄があり、Functionを作成する<code>Region</code>や実行時の権限に関わる<code>Service account</code>の設定が可能です。設定内容に問題がなければ「Create」ボタンを押下します。<br><img src="/images/20190927/photo_20190927_04.png" style="border:solid 1px #000000" class="img-middle-size"></p><p><code>function-1</code>作成中…（アイコンが緑のチェックマークに変わるまで待ちます）<br><img src="/images/20190927/photo_20190927_05.png" style="border:solid 1px #000000" class="img-middle-size"></p><h3 id="作成したFunctionを試す"><a href="#作成したFunctionを試す" class="headerlink" title="作成したFunctionを試す"></a>作成したFunctionを試す</h3><p>Functionが作成されたら、右のコンテキストメニューからテスト実行できます。「Test function」を選択します。<br><img src="/images/20190927/photo_20190927_06.png" style="border:solid 1px #000000" class="img-small-size"></p><p>以下はhelloWorldのソースコードの中身です。RequestのQueryもしくはBodyの中を参照し、<code>message</code>というキーで格納されている値をResponseに詰めて返却します。また、Requestで受け取った値がない場合（正確には<code>False判定される値</code>だった場合）には<code>Hello World!</code>という文字列が返却されます。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Responds to any HTTP request.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;!express:Request&#125; req HTTP request context.</span></span><br><span class="line"><span class="comment"> * @param &#123;!express:Response&#125; res HTTP response context.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">exports.helloWorld = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> message = req.query.message || req.body.message || <span class="string">'Hello World!'</span>;</span><br><span class="line">  res.status(<span class="number">200</span>).send(message);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>Triggering event</code>の中身を空のJSONにして「Test the function」を押下してみます。<br><img src="/images/20190927/photo_20190927_07.png" style="border:solid 1px #000000" class="img-middle-size"><br>すると、<code>Output</code>欄にて<code>Hello World!</code>の文字列が期待通り表示されました。</p><p>次は<code>message</code>に値を詰めてみます。<br><img src="/images/20190927/photo_20190927_08.png" style="border:solid 1px #000000" class="img-middle-size"><br>ちゃんと期待通り<code>Try Cloud Functions</code>の文字列が返却されました。<code>Logs</code>の部分には実行時のログが表示されます。ログから今回のFunction実行に3msを要したことが分かります。</p><p>クエリ文字列からもmessageを渡すことができるのでブラウザを使ってやってみます。<br><img src="/images/20190927/photo_20190927_09.png" style="border:solid 1px #000000" class="img-middle-size"><br>しっかりと<code>TryQuery</code>の文字列が返却されることが確認できました。</p><h2 id="VPC-connectorを組み合わせる"><a href="#VPC-connectorを組み合わせる" class="headerlink" title="VPC connectorを組み合わせる"></a>VPC connectorを組み合わせる</h2><p>さて、ここからはVPC connectorの設定をしていきます。</p><h3 id="概要説明"><a href="#概要説明" class="headerlink" title="概要説明"></a>概要説明</h3><img src="/images/20190927/photo_20190927_10.png" style="border:solid 1px #000000">https://cloud.google.com/vpc/docs/configure-serverless-vpc-access?hl=ja<p>上の図は公式ページにて記載されているServerless VPC Access connectorの説明から引用したものです。インターネット越しの通信がCloud Functionsに届き、Serverless VPC Access connectorを経由してVPC内のリソースへアクセスします。</p><p>これにより通信はセキュアに保たれつつも、様々なことがFunctionにて実現できるようになります。</p><h3 id="APIの有効化"><a href="#APIの有効化" class="headerlink" title="APIの有効化"></a>APIの有効化</h3><p>それでは早速手順の解説に移りますが、まずは<code>Serverless VPC Access API</code>の有効化が必要です。以下のコマンドを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud services <span class="built_in">enable</span> vpcaccess.googleapis.com --project &lt;your-project&gt;</span><br></pre></td></tr></table></figure><h3 id="Connectorの作成"><a href="#Connectorの作成" class="headerlink" title="Connectorの作成"></a>Connectorの作成</h3><p>コンソールから<code>Serverless VPC Access</code>のページを開き、「CREATE CONNECTOR」を選択します。<br><img src="/images/20190927/photo_20190927_11.png" style="border:solid 1px #000000"></p><p><code>Name</code> <code>Network</code> <code>IP range</code>などの必須項目を埋めて「CREATE」を押下します。<br><img src="/images/20190927/photo_20190927_12.png" style="border:solid 1px #000000"></p><p>ここで注意していただきたいのは<code>Only one region is currently available</code>という記述です。現在（2019年9月20日）、Serverless VPC connectorは<code>us-central1</code>でしか利用することができません。</p><blockquote><p>Serverless VPC Access コネクタは、それを使用する関数と同じプロジェクトおよび同じリージョンに配置する必要がありますが、異なるリージョンのリソースにトラフィックを送信できます。複数の関数が同じコネクタを使用できます。</p></blockquote><p><a href="https://cloud.google.com/functions/docs/connecting-vpc?hl=ja" target="_blank" rel="noopener">https://cloud.google.com/functions/docs/connecting-vpc?hl=ja</a></p><p>上記は公式ドキュメントの記載ですが、VPC connectorが<code>us-central1</code>でしか利用できないので、紐付け先のFunctionは同じ<code>us-central1</code>に作成する必要があります。</p><p>ただし、<code>us-central1</code>に配置されたconnectorを経由して例えば<code>us-east1</code>など別のリージョンと通信することは可能です。</p><h3 id="サービスアカウントの権限設定"><a href="#サービスアカウントの権限設定" class="headerlink" title="サービスアカウントの権限設定"></a>サービスアカウントの権限設定</h3><p>次はCloud Functionsサービスアカウントに適切な権限設定を行います。</p><p>IAMの画面からCloud Functionsのサービスアカウントを見つけます。このサービスアカウントはCloud Functions APIを有効化することで自動作成されます。<br><img src="/images/20190927/photo_20190927_13.png" style="border:solid 1px #000000" class="img-middle-size"></p><p>このサービスアカウントに新たに2つの役割を追加します。</p><ul><li>プロジェクトの<code>Viewer</code></li><li><code>Compute Network User</code></li></ul><img src="/images/20190927/photo_20190927_14.png" style="border:solid 1px #000000" class="img-middle-size"><p>「SAVE」を押下して完了です。</p><h3 id="FunctionとConnectorを紐付ける"><a href="#FunctionとConnectorを紐付ける" class="headerlink" title="FunctionとConnectorを紐付ける"></a>FunctionとConnectorを紐付ける</h3><p>ここまで準備ができたら、後はFunctionとConnectorを紐付けるだけです。FunctionのAdvanced options内にある<code>VPC connector</code>欄にて先程作成したConnectorを選択します。</p><img src="/images/20190927/photo_20190927_15.png" style="border:solid 1px #000000" class="img-middle-size"><p>出来上がったFunctionの詳細画面にて<code>VPC connector</code>が期待通り設定されていることが確認できました。これにて設定はすべて完了です。<br><img src="/images/20190927/photo_20190927_16.png" style="border:solid 1px #000000" class="img-small-size"></p><h3 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h3><blockquote><p>サーバーレス VPC アクセスでは、Cloud VPN と VPC ネットワーク ピアリングを使用して接続された VPC ネットワークとの通信がサポートされています。レガシー ネットワークや共有 VPC ネットワークはサポートされていません。</p></blockquote><p><a href="https://cloud.google.com/functions/docs/connecting-vpc?hl=ja" target="_blank" rel="noopener">https://cloud.google.com/functions/docs/connecting-vpc?hl=ja</a></p><p>公式ドキュメントに記載がありますが、このVPC connectorを利用したアクセスでは共有VPCネットワークなど一部のネットワーク構成をサポートしていません。ご注意ください。</p><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>今回はCloud FunctionsとVPC connectorをご紹介しました。いかがだったでしょうか？</p><p>イベントドリブンなサーバーレスアーキテクチャを採用すると、自然と「アプリケーションをステートレスに保とうとする」意識が働きます。これによりシステムの疎結合化が進み、アーキテクチャとしてより交換可能でマイクロなものになっていくと思います。</p><p>今回ご紹介したVPC connectorを利用することで、いままではCloud Functionsを採用することができなかった場面でも選択肢として選べるようになり、アーキテクチャ選定の幅、ひいてはサービスの可能性が広がるかと思います。</p><p>本記事が読んだ皆さんの糧になれば幸いです。<br>今後ともFuture Tech Blogをよろしくお願いします！！</p><hr><p>こちらの記事も参考ください。</p><ul><li><a href="/articles/20190909/">Let’s Try GCP #1 ～Cloud Run Buttonを使った楽々コンテナデプロイをやってみた～</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIG/DXユニット所属の&lt;a href=&quot;https://twitter.com/famipapamart&quot; 
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
  </entry>
  
  <entry>
    <title>Go言語のDBレイヤーライブラリの評価</title>
    <link href="https://future-architect.github.io/articles/20190926/"/>
    <id>https://future-architect.github.io/articles/20190926/</id>
    <published>2019-09-26T01:00:00.000Z</published>
    <updated>2019-10-07T23:59:01.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自己紹介"><a href="#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h1><p>小林と申します。アルバイトとして2019年2月からフューチャーで働いている大学生です。</p><p>アルバイトとして入社後は、Goを用いてツール開発、Vue.jsでコンポーネントの開発など沢山のプログラミングの機会を頂いており、日々成長を感じています。現在、GoとDBの連携について学んでおり、沢山の知見を得たため、アウトプットとして、筆を走らせています。</p><p>本記事ではGoのDBレイヤーライブラリである、<a href="https://github.com/jinzhu/gorm" target="_blank" rel="noopener">GORM</a>,<a href="https://github.com/volatiletech/sqlboiler" target="_blank" rel="noopener">SQLBoiler</a>,<a href="https://github.com/go-xorm/xorm" target="_blank" rel="noopener">xorm</a>の三つについて、それぞれの特徴や違いを押さえられる様まとめてみました。DBレイヤーのライブラリ検討の手がかりとなれば幸いです。</p><h1 id="ORMとは？"><a href="#ORMとは？" class="headerlink" title="ORMとは？"></a>ORMとは？</h1><p><strong>Object-Relational-Mapping</strong> の頭文字を取った略称です。直訳すると <strong>オブジェクト関係マッピング</strong> でしょうか。名前だけでは少し分かりにくいのでもう簡単に表現すると、<strong>オブジェクト(指向のプログラミング言語)と関係(データベース)のデータの対応付けをしてくれるもの</strong> となります。</p><p>ORMライブラリが持つ機能はたくさんありますが、以下のような機能を持つことが多いです。</p><ul><li>DBのRecordとのMapping</li><li>SQL文の組み立て</li></ul><p>それでは、GORM, SQLBoiler, xormについて比較していきます。</p><h1 id="結果サマリ"><a href="#結果サマリ" class="headerlink" title="結果サマリ"></a>結果サマリ</h1><p>AutoMigrationを始めとした各機能の説明は追って説明していきます。</p><table><thead><tr><th>Name</th><th>自動生成の経路</th><th>AutoMigration</th><th>Schemaからのリバース</th><th>Relation機能のライブラリ提供</th></tr></thead><tbody><tr><td>GORM</td><td>Struct -&gt; Schema生成</td><td>○</td><td>-</td><td>○</td></tr><tr><td>SQLBoiler</td><td>Schema -&gt; Struct生成</td><td>-</td><td>○</td><td>-</td></tr><tr><td>XORM</td><td>Schema -&gt; Struct生成</td><td>○</td><td>-</td><td>-</td></tr></tbody></table><h1 id="バージョン情報"><a href="#バージョン情報" class="headerlink" title="バージョン情報"></a>バージョン情報</h1><ul><li>Go <code>v1.12.9</code></li><li>ライブラリ<ul><li>gorm <code>v1.9.10</code></li><li>sqlboiler <code>v3.5.0</code></li><li>xorm <code>v0.7.6</code></li></ul></li><li>PostgreSQL <code>11.5</code><ul><li>検証環境は、<a href="https://hub.docker.com/_/postgres" target="_blank" rel="noopener">Docker公式のpostgresコンテナ</a>を使用し、<code>docker run --rm --name db -p 15432:5432 -d postgres:11.5</code> で起動しています</li></ul></li></ul><h1 id="比較"><a href="#比較" class="headerlink" title="比較"></a>比較</h1><h2 id="GORM"><a href="#GORM" class="headerlink" title="GORM"></a>GORM</h2><ul><li><a href="https://github.com/jinzhu/gorm" target="_blank" rel="noopener">GORM</a></li><li>特徴<ul><li>GoのDBレイヤーライブラリとしては最もGitHubのスター数が多い (14500+)</li><li>オートマイグレーション機能がある。 (※後述)</li></ul></li><li>所感<ul><li>分かりやすく、直感的で非常に使いやすい</li><li>structは自分で書く必要がある(DBからコードに落としてくれる機能はない)</li></ul></li></ul><p>それではコードレベルで紹介していきます。</p><h3 id="テーブル定義"><a href="#テーブル定義" class="headerlink" title="テーブル定義"></a>テーブル定義</h3><p>以下のような usersテーブルで存在するとします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">postgres=<span class="comment"># \d</span></span><br><span class="line">         List of relations</span><br><span class="line"> Schema | Name  | Type  |  Owner</span><br><span class="line">--------+-------+-------+----------</span><br><span class="line"> public | users | table | postgres</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># \d users</span></span><br><span class="line">              Table <span class="string">"public.users"</span></span><br><span class="line"> Column | Type | Collation | Nullable | Default</span><br><span class="line">--------+------+-----------+----------+---------</span><br><span class="line"> name   | text |           |          |</span><br></pre></td></tr></table></figure><h3 id="CRUDサンプル"><a href="#CRUDサンプル" class="headerlink" title="CRUDサンプル"></a>CRUDサンプル</h3><p>GORM経由でCRUDを行ってみます。</p><figure class="highlight go"><figcaption><span>CURDサンプルコード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/jinzhu/gorm"</span></span><br><span class="line">_ <span class="string">"github.com/lib/pq"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// User</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name   <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array of User</span></span><br><span class="line"><span class="keyword">type</span> Users []User</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">db, err := gorm.Open(<span class="string">"postgres"</span>, <span class="string">"host=localhost port=15432 user=postgres sslmode=disable"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// TODO error handling</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> db.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// INSERT</span></span><br><span class="line">db.Create(&amp;User&#123;Name: <span class="string">"hoge"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT 1</span></span><br><span class="line">users := Users&#123;&#125;</span><br><span class="line">db.Find(&amp;users) <span class="comment">// SELECT * FROM users</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT 2</span></span><br><span class="line">user := User&#123;&#125;</span><br><span class="line">db.Take(&amp;user) <span class="comment">// SELECT * FROM users LIMIT 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// UPDATE</span></span><br><span class="line">db.Model(&amp;user).Update(<span class="string">"Name"</span>, <span class="string">"huga"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// DELETE</span></span><br><span class="line">db.Delete(&amp;user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="オートマイグレーション機能"><a href="#オートマイグレーション機能" class="headerlink" title="オートマイグレーション機能"></a>オートマイグレーション機能</h3><p>Goの構造体とDBのスキーマを比較して、不足しているものを追加してくれる機能です。DBスキーマを簡単に作成してくれるので非常に有用です。しかし、カラムの削除や変更は出来ません。</p><p>例えば、UserテーブルにNameだけでなく年齢(Age)も足したくなった場合、Userの構造体を更新し、<code>db.Automigrate(&amp;User)</code> とするだけで自動的にカラムが追加されます。ではコードを見ていきましょう。</p><p>まず、Structに属性を追加します。</p><figure class="highlight go"><figcaption><span>usersの更新のためのStruct</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Age <span class="keyword">uint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次に、オートマイグレーションのための <code>AutoMigrate</code> を呼び出します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">db, err := gorm.Open(<span class="string">"postgres"</span>, <span class="string">"host=localhost port=15432 user=postgres sslmode=disable"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// TODO error handling</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> db.Close()</span><br><span class="line"><span class="comment">// オートマイグレーション</span></span><br><span class="line">db.AutoMigrate(&amp;User&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次にDBのスキーマを確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">postgres=<span class="comment"># \d users</span></span><br><span class="line">               Table <span class="string">"public.users"</span></span><br><span class="line"> Column |  Type   | Collation | Nullable | Default</span><br><span class="line">--------+---------+-----------+----------+---------</span><br><span class="line"> name   | text    |           |          |</span><br><span class="line"> age    | <span class="built_in">integer</span> |           |          |</span><br></pre></td></tr></table></figure><p>テーブルにageカラムが追加されていることが分かりました。簡単ですね。</p><h3 id="Relation-Association"><a href="#Relation-Association" class="headerlink" title="Relation(Association)"></a>Relation(Association)</h3><p>GORMは簡単にRelation(Association)を組むことが出来ます。今回はUserがCreditCardを複数枚持つようなHasManyの関係を作ります。</p><p>※Userテーブルなしの状態(コンテナ作り立ての状態)からAutoMigrationします。（<a href="http://gorm.io/ja_JP/docs/has_many.html" target="_blank" rel="noopener">参考</a>)</p><p>構造体を以下のように定義します。</p><figure class="highlight go"><figcaption><span>Relationサンプル</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">ID <span class="keyword">uint</span></span><br><span class="line">CreditCards []CreditCard</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CreditCard <span class="keyword">struct</span> &#123;</span><br><span class="line">UserID <span class="keyword">uint</span></span><br><span class="line">Number <span class="keyword">string</span></span><br><span class="line">ID <span class="keyword">uint</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>そしてオートマイグレーションを実施してDBのスキーマを更新します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">db, err := gorm.Open(<span class="string">"postgres"</span>, <span class="string">"host=localhost port=15432 user=postgres sslmode=disable"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// TODO error handling</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> db.Close()</span><br><span class="line">db.AutoMigrate(&amp;User&#123;&#125;,&amp;CreditCard&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>psqlで結果を確認数と、外部キーは貼られていない気が・・しますね。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">postgres=<span class="comment"># \d</span></span><br><span class="line">                 List of relations</span><br><span class="line"> Schema |        Name         |   Type   |  Owner</span><br><span class="line">--------+---------------------+----------+----------</span><br><span class="line"> public | credit_cards        | table    | postgres</span><br><span class="line"> public | credit_cards_id_seq | sequence | postgres</span><br><span class="line"> public | users               | table    | postgres</span><br><span class="line"> public | users_id_seq        | sequence | postgres</span><br><span class="line">(4 rows)</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># \d credit_cards</span></span><br><span class="line">                             Table <span class="string">"public.credit_cards"</span></span><br><span class="line"> Column  |  Type   | Collation | Nullable |                 Default</span><br><span class="line">---------+---------+-----------+----------+------------------------------------------</span><br><span class="line"> user_id | <span class="built_in">integer</span> |           |          |</span><br><span class="line"> number  | text    |           |          |</span><br><span class="line"> id      | <span class="built_in">integer</span> |           | not null | nextval(<span class="string">'credit_cards_id_seq'</span>::regclass)</span><br><span class="line">Indexes:</span><br><span class="line">    <span class="string">"credit_cards_pkey"</span> PRIMARY KEY, btree (id)</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># \d users</span></span><br><span class="line">                            Table <span class="string">"public.users"</span></span><br><span class="line"> Column |  Type   | Collation | Nullable |              Default</span><br><span class="line">--------+---------+-----------+----------+-----------------------------------</span><br><span class="line"> name   | text    |           |          |</span><br><span class="line"> id     | <span class="built_in">integer</span> |           | not null | nextval(<span class="string">'users_id_seq'</span>::regclass)</span><br><span class="line">Indexes:</span><br><span class="line">    <span class="string">"users_pkey"</span> PRIMARY KEY, btree (id)</span><br></pre></td></tr></table></figure><h4 id="リレーションサンプル"><a href="#リレーションサンプル" class="headerlink" title="リレーションサンプル"></a>リレーションサンプル</h4><p>ユーザのIDからCreditCardの情報を得てみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// INSERT</span></span><br><span class="line">db.Create(&amp;User&#123;Name: <span class="string">"hoge"</span>,</span><br><span class="line">ID:<span class="number">20</span>,</span><br><span class="line">CreditCards: []CreditCard&#123;</span><br><span class="line">&#123;Number:<span class="string">"1x"</span>, ID:<span class="number">1</span>&#125;,</span><br><span class="line">&#123;Number:<span class="string">"2x"</span>, ID:<span class="number">2</span>&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT</span></span><br><span class="line">u := User&#123;ID: <span class="number">20</span>&#125;</span><br><span class="line">cs := []CreditCard&#123;&#125;</span><br><span class="line">db.Model(&amp;u).Related(&amp;cs)</span><br><span class="line"></span><br><span class="line">fmt.Println(cs) <span class="comment">// -&gt; [&#123;20 1x 1&#125; &#123;20 2x 2&#125;]</span></span><br></pre></td></tr></table></figure><h2 id="GORMの所感"><a href="#GORMの所感" class="headerlink" title="GORMの所感"></a>GORMの所感</h2><ul><li>全体的に分かりやすく、直感的で非常に使いやすい</li><li>structは自分で書く必要がある(DBからコードに落としてくれる機能はない)</li><li>記事には載せていませんが、構造体にgorm.Modelを定義することで、ID,CreatedAt,DeletedAtのカラムが追加され、論理削除となる機能もある<ul><li>ORMでこういったレイヤーまでサポートしてくれるのは面白いですね</li></ul></li></ul><h2 id="SQLBoiler"><a href="#SQLBoiler" class="headerlink" title="SQLBoiler"></a>SQLBoiler</h2><ul><li><a href="https://github.com/volatiletech/sqlboiler" target="_blank" rel="noopener">SQLBoiler</a></li><li>特徴<ul><li>高速(らしい) 参考:<a href="https://github.com/volatiletech/sqlboiler#benchmarks" target="_blank" rel="noopener">sqlboilerのベンチマーク</a></li><li>SQLとの接続部分は自前で実装する必要がある</li><li>DBからコードを自動生成するためにtomlファイルを書く必要がある。</li><li>SQL文の自動生成がメイン機能</li></ul></li></ul><h3 id="テーブル定義-1"><a href="#テーブル定義-1" class="headerlink" title="テーブル定義"></a>テーブル定義</h3><p>サンプルで用いるusersテーブルとシーケンスです。</p><p>primary keyがないテーブルにはSQLBoilerは使用できない(<code>Error: unable to initialize tables: primary key missing in tables</code>) のでご注意を。</p><figure class="highlight bash"><figcaption><span>サンプルで利用するDBテーブル</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">postgres=<span class="comment"># \d </span></span><br><span class="line">              List of relations</span><br><span class="line"> Schema |     Name     |   Type   |  Owner</span><br><span class="line">--------+--------------+----------+----------</span><br><span class="line"> public | users        | table    | postgres</span><br><span class="line"> public | users_id_seq | sequence | postgres</span><br><span class="line">(2 rows)</span><br><span class="line"></span><br><span class="line">postgres=<span class="comment"># \d users </span></span><br><span class="line">                            Table <span class="string">"public.users"</span> </span><br><span class="line"> Column |  Type   | Collation | Nullable |              Default</span><br><span class="line">--------+---------+-----------+----------+-----------------------------------</span><br><span class="line"> name   | text    |           |          |</span><br><span class="line"> id     | <span class="built_in">integer</span> |           | not null | nextval(<span class="string">'users_id_seq'</span>::regclass)</span><br><span class="line">Indexes:</span><br><span class="line">    <span class="string">"users_pkey"</span> PRIMARY KEY, btree (id)</span><br></pre></td></tr></table></figure><h3 id="自動生成"><a href="#自動生成" class="headerlink" title="自動生成"></a>自動生成</h3><p>SQLBoilerは、DBスキーマとTOMLファイルから生成されたパッケージをインポートして使うのが基本となります。</p><p>まずは、プロジェクトのルートに<code>sqlboiler.toml</code>を置きます。そのtomlファイルにDBの接続先情報やオプションなどの設定を書いていきます。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pkgname</span>=<span class="string">"db"</span></span><br><span class="line"><span class="attr">output</span>=<span class="string">"app/db"</span></span><br><span class="line"><span class="attr">add-global-variants</span>=<span class="literal">true</span></span><br><span class="line"><span class="attr">add-panic-variants</span>=<span class="literal">true</span></span><br><span class="line"><span class="section">[psql]</span></span><br><span class="line">  dbname="postgres"</span><br><span class="line">  host="localhost"</span><br><span class="line">  port=15432</span><br><span class="line">  user="postgres"</span><br><span class="line">  sslmode="disable"</span><br></pre></td></tr></table></figure><ul><li>TOMLファイルに<code>add-global-variants=true</code>を記述すると、グローバルに設定したコネクションを用いたDBの操作メソッドが追加されます。</li><li><code>add-panic-variants=true</code>を記述すると、error発生時にerrorを返す代わりにpanicを起こすDBの操作メソッドが追加されます。</li></ul><p>TOMLを書いたらコード生成に必要なパッケージをインストールしていきます。</p><figure class="highlight bash"><figcaption><span>インストール</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/volatiletech/sqlboiler</span><br><span class="line">go get -u github.com/volatiletech/sqlboiler/drivers/sqlboiler-psql</span><br></pre></td></tr></table></figure><p>インストールしたらいざコード生成を行います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlboiler --wipe psql</span><br></pre></td></tr></table></figure><p><code>--wipe</code>はコード生成前する前にoutputフォルダがあった際、そのフォルダを削除するフラグです。つけておいて損はほぼなさそうです。</p><p>生成後のプロジェクトファイル構造はこのようになります。(main.goは自分で作成したものです)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└─main.go</span><br><span class="line">└─sqlboiler.toml</span><br><span class="line">└─app</span><br><span class="line">  └─db</span><br><span class="line">    └─boil_main_test.go</span><br><span class="line">    └─boil_queries.go</span><br><span class="line">    └─boil_queries_test.go</span><br><span class="line">    └─boil_suites_test.go</span><br><span class="line">    └─boil_table_names.go</span><br><span class="line">    └─boil_types.go</span><br><span class="line">    └─psql_main_test.go</span><br><span class="line">    └─psql_suites_test.go</span><br><span class="line">    └─psql_upsert.go</span><br><span class="line">    └─users.go</span><br><span class="line">    └─users_test.go</span><br></pre></td></tr></table></figure><h3 id="CRUDサンプルコード"><a href="#CRUDサンプルコード" class="headerlink" title="CRUDサンプルコード"></a>CRUDサンプルコード</h3><p>自動生成したコードを用いてCRUDアクセスします。</p><figure class="highlight go"><figcaption><span>CRUDサンプルコード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"database/sql"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"./app/db"</span></span><br><span class="line">_ <span class="string">"github.com/lib/pq"</span></span><br><span class="line"><span class="string">"github.com/volatiletech/null"</span></span><br><span class="line"><span class="string">"github.com/volatiletech/sqlboiler/boil"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">con, err := sql.Open(<span class="string">"postgres"</span>, <span class="string">"host=localhost port=15432 user=postgres sslmode=disable"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// TODO error handling</span></span><br><span class="line">&#125;</span><br><span class="line">boil.SetDB(con)</span><br><span class="line"></span><br><span class="line"><span class="comment">// INSERT</span></span><br><span class="line">user := db.User&#123;Name: null.StringFrom(<span class="string">"hoge"</span>), ID: <span class="number">1</span>&#125;</span><br><span class="line">user.InsertGP(context.Background(), boil.Infer())</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT</span></span><br><span class="line">users := db.Users().AllGP(context.Background())</span><br><span class="line"></span><br><span class="line"><span class="comment">// UPDATE</span></span><br><span class="line">user = db.User&#123;ID:<span class="number">1</span>, Name: null.StringFrom(<span class="string">"huga"</span>)&#125;</span><br><span class="line">user.UpdateGP(context.Background(), boil.Infer())</span><br><span class="line"></span><br><span class="line"><span class="comment">// DELETE</span></span><br><span class="line">user.DeleteGP(context.Background())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Relation"><a href="#Relation" class="headerlink" title="Relation"></a>Relation</h3><p>コード生成の段階でRelationを貼っておく必要があります。本当は検証のためにGORMのAutoMigrationでサクッと外部キーを貼ろうとしたがAutoMigrationでは貼ってくれないようなので自分でテーブルを作ります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create table users ( id serial primary key, name text );</span></span><br><span class="line"><span class="comment"># create table credit_card ( id serial primary key, number text, user_id int references users(id) );</span></span><br></pre></td></tr></table></figure><p>上記スキーマでテーブルを作りデータを投入します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">user := db.User&#123;Name: null.StringFrom(<span class="string">"hoge"</span>), ID: <span class="number">3</span>&#125;</span><br><span class="line">c1 := db.CreditCard&#123;Number: null.StringFrom(<span class="string">"n"</span>), ID: <span class="number">21</span>&#125;</span><br><span class="line">c2 := db.CreditCard&#123;Number: null.StringFrom(<span class="string">"n2"</span>), ID: <span class="number">22</span>&#125;</span><br><span class="line"></span><br><span class="line">user.InsertGP(context.Background(), boil.Infer())</span><br><span class="line">user.SetCreditCardsGP(context.Background(), <span class="literal">true</span>, &amp;c1, &amp;c2)</span><br></pre></td></tr></table></figure><p>postgres側でレコードの確認します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">postgres=# <span class="keyword">select</span> * from credit_card;</span><br><span class="line"> id | number | user_id </span><br><span class="line">----+--------+---------</span><br><span class="line"> <span class="number">21</span> | n      |       <span class="number">3</span></span><br><span class="line"> <span class="number">22</span> | n2     |       <span class="number">3</span></span><br><span class="line">(<span class="number">2</span> rows)</span><br><span class="line"></span><br><span class="line">postgres=# <span class="keyword">select</span> * from users;</span><br><span class="line"> id | name </span><br><span class="line">----+------</span><br><span class="line">  <span class="number">3</span> | hoge</span><br><span class="line">(<span class="number">1</span> row)</span><br></pre></td></tr></table></figure><p>適切にレコードが追加されていますね。</p><p>以下はdbからuserのレコードを一件持ってきて、userに結びついているcardを持ってくるコードです。<br>かなり直感的に書けます。コード読んで何しているか分かりやすいです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">users := db.Users().OneGP(context.Background())</span><br><span class="line">cards := users.CreditCards().AllGP(context.Background())</span><br></pre></td></tr></table></figure><h3 id="備考：Tips-null-StringFromやnull-IntFromの話"><a href="#備考：Tips-null-StringFromやnull-IntFromの話" class="headerlink" title="備考：Tips null.StringFromやnull.IntFromの話"></a>備考：Tips null.StringFromやnull.IntFromの話</h3><p>db操作する際にstringを入れる事はできず、null.StringFromを利用する必要がありましたが、なぜそうなっているのか、どのような振る舞いをするのか調査しました。</p><p>そこで、定義を見に行きました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StringFrom</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">String</span></span></span><br></pre></td></tr></table></figure><p>ぱっと見「？？？」となるのですがよく見ると、<em>string</em> を引数にして <em>String</em> を返しています。</p><p>そして <em>String</em> は以下のように定義されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> String <span class="keyword">struct</span> &#123;</span><br><span class="line">    sql.NullString</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sql.NullStringを包んでいますね。sql.NullStringの定義を確認してみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NullString <span class="keyword">struct</span> &#123;</span><br><span class="line">    String <span class="keyword">string</span></span><br><span class="line">    Valid  <span class="keyword">bool</span> <span class="comment">// Valid is true if String is not NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Validの値を見て値がNULLかどうかを判別しています。</p><p>なぜこのような実装になっているかというと、golangにはnilがありますが、pointer型にしか使えないからです。</p><p>例えば、stringのゼロ値は””となり、NULLとの区別をつけることが出来ません。</p><p>このようにGoの型定義とSQLの型定義には差異があるためその差を埋めるためにnullパッケージが誕生し、それを介することでNULLの表現を可能にしています。</p><h3 id="SQLBoiler所感"><a href="#SQLBoiler所感" class="headerlink" title="SQLBoiler所感"></a>SQLBoiler所感</h3><ul><li>contextを明示的に用いているため非同期処理が比較的簡単に出来る。</li><li>tomlにすでに接続先情報が書かれているので正直sql.Openで再度接続先を明記するのは二度手間に感じた。</li><li>Relationは個人的にgormよりも直感的に扱えると感じた。</li></ul><h2 id="xorm"><a href="#xorm" class="headerlink" title="xorm"></a>xorm</h2><ul><li><a href="https://github.com/go-xorm/xorm" target="_blank" rel="noopener">xorm</a></li><li>特徴<ul><li>生のSQL実行をサポートしている。</li><li><a href="https://github.com/go-xorm/cmd" target="_blank" rel="noopener">コマンドラインツール</a>が提供されている<ul><li>DBからコードを生成する機能などを持つ</li></ul></li><li>生成コードにテスト用コードも付属しているのが良い</li></ul></li></ul><h3 id="テーブル定義-2"><a href="#テーブル定義-2" class="headerlink" title="テーブル定義"></a>テーブル定義</h3><p>SQLBoilerと同じスキーマを利用します。折角なのでコマンドラインツールを用いてDBから構造体の生成もやります。</p><p>まずは <code>go get github.com/go-xorm/cmd/xorm</code> でインストールします。</p><p>その後、このコマンドで構造体を作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/go-xorm/cmd/xorm</span><br><span class="line">xorm reverse postgres <span class="string">"dbname=postgres host=localhost port=15432 user=postgres sslmode=disable"</span> templates/goxorm</span><br></pre></td></tr></table></figure><p><code>./models/users.go</code> が出来ていると思います。それを自分のプロジェクトフォルダに持ってくればOK。</p><p>生成されたusers.goの中身はこちらになりました。</p><figure class="highlight go"><figcaption><span>users.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Users <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span> <span class="string">`xorm:"TEXT"`</span></span><br><span class="line">Id   <span class="keyword">int</span>    <span class="string">`xorm:"not null pk autoincr INTEGER"`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>それではこのコードを用いてCRUDしてみます。</p><h2 id="CRUDサンプル-1"><a href="#CRUDサンプル-1" class="headerlink" title="CRUDサンプル"></a>CRUDサンプル</h2><figure class="highlight go"><figcaption><span>xormのCRUDサンプル</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line">model <span class="string">"./models"</span></span><br><span class="line"><span class="string">"github.com/go-xorm/xorm"</span></span><br><span class="line">_ <span class="string">"github.com/lib/pq"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">engine, err := xorm.NewEngine(<span class="string">"postgres"</span>, <span class="string">"dbname=postgres host=localhost port=15432 user=postgres sslmode=disable"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// TODO error handling</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> engine.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// INSERT</span></span><br><span class="line">user := model.Users&#123;Id: <span class="number">3</span>, Name: <span class="string">"hoge"</span>&#125;</span><br><span class="line">engine.Insert(&amp;user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT</span></span><br><span class="line"><span class="keyword">var</span> users []model.Users</span><br><span class="line">engine.Find(&amp;users)</span><br><span class="line"></span><br><span class="line"><span class="comment">// UPDATE</span></span><br><span class="line">user.Name = <span class="string">"huga"</span></span><br><span class="line">engine.ID(<span class="number">3</span>).Update(&amp;user)</span><br><span class="line"></span><br><span class="line"><span class="comment">// DELETE</span></span><br><span class="line">engine.ID(<span class="number">3</span>).Delete(&amp;user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="xorm所感"><a href="#xorm所感" class="headerlink" title="xorm所感"></a>xorm所感</h2><ul><li>xorm.NewEngineでインスタンスを作成してそれを操作していく形で分かりやすい</li><li>リレーションを貼ることが出来ない？(SQLで書く必要がある？。)<a href="https://github.com/go-xorm/xorm/issues/41" target="_blank" rel="noopener">ORM Cascading Proposal · Issue #41 · go-xorm/xorm</a></li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>GoのORMである、GORM, SQLBoiler, xormについて比較した</li><li>ORMと名乗っていても、オートマイグレーション機能や、コードの自動生成機能、論理削除など各ライブラリ特有の差別化要素がある</li><li>構造体からSchemaを生成してくれるAutoMigrationはとても魅力的な機能ですが、過信せず生成されたDBスキーマを確認する事が大切</li></ul><p>今回わたしのPJでは社内ナレッジが蓄積されている点でGORMを採用しました。（CRUD操作が直感的で取っ付きやすいので個人的にも良いと思いました）。実際の開発や運用を通して得られたナレッジなどは別途ブログ化したいと思っています。</p><h1 id="作成したコード"><a href="#作成したコード" class="headerlink" title="作成したコード"></a>作成したコード</h1><p><a href="https://github.com/reud/blog-orm" target="_blank" rel="noopener">https://github.com/reud/blog-orm</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://qiita.com/niisan-tokyo/items/156eb35c6eeaf07b9b65#2-%E3%82%B2%E3%83%83%E3%82%BF%E3%83%BC%E3%82%BB%E3%83%83%E3%82%BF%E3%83%BC%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF%E3%82%92%E5%88%A9%E7%94%A8%E3%81%A7%E3%81%8D%E3%82%8B" target="_blank" rel="noopener">もっとORMを使えるようになりたいので、見直してみた - Qiita</a></li><li><a href="https://www.atmarkit.co.jp/ait/articles/0404/13/news075.html" target="_blank" rel="noopener">O/Rマッピングの役割とメリット：Hibernateで理解するO/Rマッピング（1） - ＠IT</a></li><li><a href="http://gorm.io/docs/migration.html#Auto-Migration" target="_blank" rel="noopener">Migration | GORM - The fantastic ORM library for Golang, aims to be developer friendly.</a></li><li><a href="http://sakataharumi.hatenablog.jp/entry/2018/06/14/143710" target="_blank" rel="noopener">gormでRelationを組む方法とn+1の回避 - 女子高生になりたい</a></li><li><a href="https://github.com/volatiletech/sqlboiler" target="_blank" rel="noopener">volatiletech/sqlboiler: Generate a Go ORM tailored to your database schema.</a></li><li><a href="https://github.com/jinzhu/gorm" target="_blank" rel="noopener">jinzhu/gorm: The fantastic ORM library for Golang, aims to be developer friendly</a></li><li><a href="https://ken-aio.github.io/post/2019/02/13/golang-sqlboiler/" target="_blank" rel="noopener">GolangのORM SQLBoilerを使ってみる - セットアップ編 - ken-aio’s blog</a></li><li><a href="http://gorm.io/ja_JP/docs/has_many.html" target="_blank" rel="noopener">Has Many | GORM - The fantastic ORM library for Golang, aims to be developer friendly.</a></li><li><a href="https://qiita.com/uhey22e/items/640a4ae861d123b15b53" target="_blank" rel="noopener">Goの新定番？ORMのSQLBoilerを使ってみる - Qiita</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自己紹介&quot;&gt;&lt;a href=&quot;#自己紹介&quot; class=&quot;headerlink&quot; title=&quot;自己紹介&quot;&gt;&lt;/a&gt;自己紹介&lt;/h1&gt;&lt;p&gt;小林と申します。アルバイトとして2019年2月からフューチャーで働いている大学生です。&lt;/p&gt;
&lt;p&gt;アルバイトとして入社後
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title> Oculus Questで作る入院中の子どもたちに向けたパラスポーツ体験</title>
    <link href="https://future-architect.github.io/articles/20190925/"/>
    <id>https://future-architect.github.io/articles/20190925/</id>
    <published>2019-09-25T01:49:43.000Z</published>
    <updated>2019-10-07T23:58:55.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、フューチャーアーキテクト入社3年目の西村です。</p><p>いよいよ2020年に開催される東京オリンピック・パラリンピックまで1年を切りましたね。<br>フューチャーでは2018年から<strong><a href="https://minnano2020.yahoo.co.jp/yahoo/27.html" target="_blank" rel="noopener">スポーツ団体の事業をITで支援するプロジェクト</a></strong>に取り組んでいます。<br><img class="img-middle-size" src="/images/20190925/photo_20190925_01.png"></p><blockquote><p>同社グループではプロスポーツにおけるITコンサルティングで複数の実績があり、強みとしているテクノロジー分野での技術力や経験を生かして、スポーツの魅力をより広く伝え、競技のファンを増やすための活動を行っていく。</p></blockquote><p>一例としてブラインドサッカーの支援などを行っています。</p><img class="img-middle-size" src="/images/20190925/4.png"><blockquote><p>競技をVR（バーチャル・リアリティー）体験できるイベントを行いました。ブラインドサッカーの選手は視覚が無いため、ボールの転がる音や、味方からの指示、相手選手の声を頼りにプレーしています。こうしたブラインドサッカーの世界を一般人でも気軽に理解できるよう、音を頼りにプレーするシミュレーション形式の体験アプリを開発しました」</p></blockquote><p>このプロジェクトの中で私が関わっている取り組みとして、<strong>Oculus Questを使った入院中の子どもたちに向けてパラスポーツのアプリ</strong>を作ってるので、今回ご紹介します。</p><h1 id="入院中の子どもたちに、スポーツの楽しさを伝えたい"><a href="#入院中の子どもたちに、スポーツの楽しさを伝えたい" class="headerlink" title="入院中の子どもたちに、スポーツの楽しさを伝えたい"></a>入院中の子どもたちに、スポーツの楽しさを伝えたい</h1><p>上記の<a href="https://minnano2020.yahoo.co.jp/yahoo/27.html" target="_blank" rel="noopener">記事</a>にある通り、元パラアイスホッケー日本代表の上原大祐さんと一緒に、入院中の子どもたちに向けたパラスポーツ体験プロジェクトを進めています。</p><blockquote><p>何かしらの事情で歩けなくなった子供たちや、入院中の子供たちに、ITを使ってパラスポーツを体験してもらうことができないかと考えています。スポーツの楽しさを感じてもらい、実際にパラスポーツを志してもらうことだったり、それをモチベーションにリハビリを頑張ってもらったり。</p></blockquote><p>スポーツを通して、何かしらの事情で歩けなくなった子どもたちや入院中の子どもたちを応援したい、という思いで上原さんは活動されています。<br>そして、我々もその思いに共感し、今回一緒にプロジェクトを推進することになりました。</p><p>入院している子どもたちの状況は様々で、入院中の多くの時間をベッドの上で過ごしています。<br>スポーツを通して応援しようとしても、実際に全身を使った運動をするのは難しい子どもたちばかりです。</p><p>そのため、ITで<strong>『ベッドの上できるスポーツ』</strong>を提供し、ITを使ってスポーツの楽しさを子どもたちに体験してもらいたいと考えています。</p><h1 id="『ベッドの上でできるスポーツ』をITで"><a href="#『ベッドの上でできるスポーツ』をITで" class="headerlink" title="『ベッドの上でできるスポーツ』をITで"></a>『ベッドの上でできるスポーツ』をITで</h1><p>そのため、ITで<strong>『ベッドの上でできるスポーツ』</strong>を提供し、ITを使ってスポーツの楽しさを子どもたちに体験してもらいたいと考えています。</p><p>具体的に、どんな『ベッドの上でできるスポーツ』をITで提供しようとしているかというと、上原さんが昔選手としてご活躍されていたパラアイスホッケーを体験するVRアプリを作ろうとしています。</p><p>パラアイスホッケー（別名アイススレッジホッケー）は、下半身に障害を持つ人がアイスホッケーを行えるよう改良された障がい者スポーツで、スレッジと呼ばれるソリに乗り、両手にスティックを持って氷の上で競技します。</p><img class="img-small-size" src="/images/20190925/5.png"><p>このアイススレッジホッケーを『ベッドの上でできるスポーツ』にするためにはどうしたら良いか考えました。</p><p>ちょうどデバイス検討中にOculus Questが発売される情報があり、またOculus Questは<br><strong>・スタンドアロンでベッド上でもお手軽に利用可能</strong><br><strong>・両手コントローラーで、スティックを再現するのに最適</strong><br>だったため、Oculus Questをデバイスとして採用しました。</p><h1 id="アイススレッジホッケー体験VR開発プロジェクト始動！"><a href="#アイススレッジホッケー体験VR開発プロジェクト始動！" class="headerlink" title="アイススレッジホッケー体験VR開発プロジェクト始動！"></a>アイススレッジホッケー体験VR開発プロジェクト始動！</h1><p>アイススレッジホッケーについて、まさに選手として活躍されていた上原さんから実体験を聞きたい！ということで、<br>7月にVRアプリの試作品を持って、上原さんとミーティングしました。</p><img class="img-middle-size" src="/images/20190925/photo_20190925_02.jpeg"><p>実際に体験してもらった感想をもらったり</p><img class="img-middle-size" src="/images/20190925/photo_20190925_03.jpeg"><p>改めてITを使ってスポーツの楽しさを伝えたい、というお互いの熱い思いを共有しました！</p><p>まだまだ試作段階ですが、実際に何作ったか、どんなコード書いたかは、次回実装編にてご紹介します！</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>スポーツの楽しさを感じてもらい、実際にパラスポーツを志してもらうことだったり、それをモチベーションにリハビリを頑張ってもらったり。<br>ITの力で今まで体験できなかったことがベッドの上でもできるようになると、きっと子どもたちの未来に新たな可能性が広がっていくことに繋がると信じています。</p><p>今後は、プロトタイプを持って特別支援学校や病院を巡り、子どもたちに実際に体験をしてもらい、フィードバックをもらう予定です。</p><p>VRアプリが完成したら、またご紹介させていただきたいと思います。</p><p><strong>・治療のモチベーションが無いので、目標が欲しい</strong><br><strong>・歩いたことが無いので、歩く体験をしてみたい</strong><br><strong>・ベッドから動けなくても、上原さんの行っている活動に参加してみたい</strong><br>といった子どもたちの思いを叶えるべく、VRを有効活用できるアイデアを<strong>大大大募集</strong>しています！</p><p>こんな活動に関心があったら、<a href="https://www.future.co.jp/contact_us/" target="_blank" rel="noopener">HPのお問い合わせ</a> かTwitter（<a href="https://twitter.com/future_techblog" target="_blank" rel="noopener">@future_techblog</a>）に連絡ください。</p><p>最後まで読んでいただき、ありがとうございました。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、フューチャーアーキテクト入社3年目の西村です。&lt;/p&gt;
&lt;p&gt;いよいよ2020年に開催される東京オリンピック・パ
      
    
    </summary>
    
      <category term="VR" scheme="https://future-architect.github.io/categories/VR/"/>
    
    
      <category term="Unity" scheme="https://future-architect.github.io/tags/Unity/"/>
    
  </entry>
  
  <entry>
    <title>サステナブルなエンジニア組織デザイン（後編） ～デザインパターンと10のリファクタリング～</title>
    <link href="https://future-architect.github.io/articles/20190918/"/>
    <id>https://future-architect.github.io/articles/20190918/</id>
    <published>2019-09-17T23:37:42.000Z</published>
    <updated>2019-09-18T05:40:43.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="サステナブルなエンジニア組織デザイン-後編"><a href="#サステナブルなエンジニア組織デザイン-後編" class="headerlink" title="サステナブルなエンジニア組織デザイン 後編"></a>サステナブルなエンジニア組織デザイン 後編</h1><p>前編ではエンジニア組織のよくある設計とジレンマについて紹介しました。</p><ul><li><a href="/articles/20190917/">前編：サステナブルなエンジニア組織デザイン ～よくある設計とジレンマ～</a></li><li>後編：サステナブルなエンジニア組織デザイン ～デザインパターンと10のリファクタリング～</li></ul><p>後編ではサステナブルなエンジニア組織に向けたデザインパターンとリファクタリングのプラクティスについて紹介します。</p><h1 id="対象者"><a href="#対象者" class="headerlink" title="対象者"></a>対象者</h1><p>エンジニアに敬意を払える正しい認識を持ってることを前提として以下のような方々を対象としています。</p><ul><li>スタートアップなどでエンジニア組織をこれから作っていこうとされている方</li><li>エンジニア組織駆動でビジネスをスケールさせていこうと思っている方</li><li>他、エンジニア組織に対して様々な課題認識を持っていられる方<ul><li>エンジニアの獲得がうまくいかずに組織が大きくならない</li><li>エンジニアがどんどん離れていってしまっている</li><li>エンジニアのモチベーションがアップするような仕事環境を与えられていない</li><li>エンジニアが好き勝手やるので収益に結びつかない</li><li>エンジニアのキャリア形成がうまくいっていない</li><li>エンジニアのレジェンド達が新しいチャレンジを許さない</li><li>エンジニアとは名ばかりでベンダーコントロールするだけの組織になっている</li></ul></li></ul><h1 id="エンジニア組織のデザインパターン"><a href="#エンジニア組織のデザインパターン" class="headerlink" title="エンジニア組織のデザインパターン"></a>エンジニア組織のデザインパターン</h1><p>今まで試行したことのある主だったエンジニア組織のデザインパターンを整理してみました。<br><img src="/images/20190918/photo_20190918_01.png"></p><p>組織全体への適用だったり、部分適用だったりと多少の違いはありますが、いずれかのパターンの組み合わせでリファクタリングしています。それぞれのパターンに特徴があり、万能な組織デザインは存在しません。組織デザイン検討にあたってはリファレンスになるデザインパターンとして適宜組み合わせてみたりしてもらえるとよいかと思います。<a href="/articles/20190917/">前編</a>で少し触れたティールは遠目で見ればホラクラシーに分類できるので以降はそう読み替えてもらっても大きくミスリードはしないかと思います。</p><h3 id="アーキテクチャ型組織デザインパターン（A型）"><a href="#アーキテクチャ型組織デザインパターン（A型）" class="headerlink" title="アーキテクチャ型組織デザインパターン（A型）"></a>アーキテクチャ型組織デザインパターン（A型）</h3><p>技術領域カットで組織を構成し技術専門性の強化を重視します。技術領域を細分化すると専門性を強化することができるメリットがあります。また組織機能重複もなく合理的な組織デザインです。ただし、特定の技術領域だけでは成り立たないようなプロジェクトでは分業制が進みやすくなり、プロジェクトのオーナーシップやカルチャー形成が分断されていく課題が頻発します。またフルスタック志向のエンジニアのキャリア形成にはこの分業制が足枷になりやすい構造です。</p><h3 id="プロジェクト型組織デザインパターン（P型）"><a href="#プロジェクト型組織デザインパターン（P型）" class="headerlink" title="プロジェクト型組織デザインパターン（P型）"></a>プロジェクト型組織デザインパターン（P型）</h3><p>事業領域のテーマやプロジェクトカットで組織を構成し機動性を重視します。一気通貫でプロジェクトに携わることによって個人の裁量も増え、個人のオーナーシップが醸成しやすいです。一方で各プロジェクトに組織機能が重複するためノウハウ蓄積が課題になりやすい構造です。目に見える形での成果は出しやすい一方で技術領域の専門性などが犠牲になりやすい構造とも言えます。</p><h3 id="マトリクス型組織デザインパターン（M型）"><a href="#マトリクス型組織デザインパターン（M型）" class="headerlink" title="マトリクス型組織デザインパターン（M型）"></a>マトリクス型組織デザインパターン（M型）</h3><p>技術領域とプロジェクト領域のマトリクスで組織を構成し、A型とP型のいいとこどりを狙った組織デザインパターンです。それぞれの弱点を補完する組織として個々のエンジニアの思考やスキルセットに応じてバランスがとりやすい構造です。プロジェクト型よりも組織機能の重複が減り合理的な組織デザインでもあります。一見すると万能な組織デザインに見えますが、エンジニア個人からみると技術領域とプロジェクト領域の二つのレポートラインが存在するため負担増になり、優先順位が明確でなければ組織のガバナンスに歪みが出やすい構造です。また技術領域を細目に分けてしまうことは余計に負担増が発生してしまうためアンチパターンになります。</p><h3 id="ホラクラシー型組織デザインパターン（H型）"><a href="#ホラクラシー型組織デザインパターン（H型）" class="headerlink" title="ホラクラシー型組織デザインパターン（H型）"></a>ホラクラシー型組織デザインパターン（H型）</h3><p>ヒエラルキーを排除し、エンジニアや小チームが有機的につながりプロジェクトを遂行する組織デザインパターンです。ミッションや価値観が共有されていてゴールイメージが明確であれば、チームワークは活性化され成果を最大化しやすい構造です。エンジニア個人のキャリアにも効果的であり、組織的なノウハウ蓄積に加えノウフー（Know Who）による集合知形成がしやすくなります。ただし、個人に多くの判断を委ねられることが多くなるため属人化が進み、結果的に組織機能の重複が多くなる傾向があります。組織全体にボトルネックやグレーゾーンが生まれやすくなり、関係者が増えれば増えるほど共有すべき価値観は希薄化し、大きなプロジェクトを遂行するには無理が生じやすい構造でもあります。</p><p>まとめると、こんな感じでしょうか。いずれも相対的な評価です。</p><table><thead><tr><th align="left">観点</th><th align="left">内容</th><th align="center">A型</th><th align="center">P型</th><th align="center">M型</th><th align="center">H型</th></tr></thead><tbody><tr><td align="left">オーナーシップ</td><td align="left">仕事に対してオーナーシップが育まれやすいか？</td><td align="center">△</td><td align="center">◯</td><td align="center">△</td><td align="center">△</td></tr><tr><td align="left">オペレーション</td><td align="left">組織のオペレーションに重複がないか？</td><td align="center">◯</td><td align="center">×</td><td align="center">△</td><td align="center">×</td></tr><tr><td align="left">モビリティ</td><td align="left">個人やチームの機動性はあるか？</td><td align="center">×</td><td align="center">◯</td><td align="center">△</td><td align="center">◯</td></tr><tr><td align="left">カルチャー</td><td align="left">生まれたカルチャーが維持されやすいか？</td><td align="center">△</td><td align="center">◯</td><td align="center">◯</td><td align="center">◯</td></tr><tr><td align="left">ノウハウ</td><td align="left">ノウハウが蓄積されやすいか？</td><td align="center">◯</td><td align="center">△</td><td align="center">◯</td><td align="center">？</td></tr><tr><td align="left">プレッシャー</td><td align="left">個人やチームの負担はあるか？</td><td align="center">◯</td><td align="center">△</td><td align="center">△</td><td align="center">×</td></tr><tr><td align="left">パフォーマンス</td><td align="left">個人やチームの成果がでやすいか？</td><td align="center">△</td><td align="center">◯</td><td align="center">△</td><td align="center">？</td></tr><tr><td align="left">モチベーション</td><td align="left">個人のモチベーションが維持されやすいか？</td><td align="center">△</td><td align="center">◯</td><td align="center">△</td><td align="center">◯</td></tr><tr><td align="left">キャリア</td><td align="left">キャリア形成がしやすいか？</td><td align="center">△</td><td align="center">△</td><td align="center">◯</td><td align="center">◯</td></tr></tbody></table><p>ホラクラシー型に「？」があるのはうまく機能させるには前提条件があるからです。ホラクラシー型には行動指針といった価値観の共有が不可欠です。それらが価値基準として各個人まで血の巡りのように隅々までいきわたっていることが前提条件です。</p><p>参考までに2010年頃に当時30名ぐらいだったメンバーに対して共有した一枚を紹介します。</p><img src="/images/20190918/photo_20190918_02.png"><p>当時は20代の頃でプロジェクトが佳境の中、勢いで書いたペーパーなので今みるとちょっと恥ずかしいですが、、、当時のメンバー各人が強烈な「課題認識」をもち、課題に対して「自発的行動」を促し、エンジニア同士が「有機的協調」して、課題の根本解決に向けた「技術（自己）投資」を継続しながら成果に「コミットメント」する。そのサイクルが更に新たな成果を生んでいく、といったことができていた組織でした。過去を美化している感はありますが、当時は言葉の定義もなかったホラクラシー型組織のいくつかの要素を満たしていたのではないかと思っています。</p><h3 id="ホラクラシーとマズロー"><a href="#ホラクラシーとマズロー" class="headerlink" title="ホラクラシーとマズロー"></a>ホラクラシーとマズロー</h3><p>非常に有名な「マズローの5段階欲求」の最上位欲求「自己実現欲求」は知的好奇心が旺盛なエンジニアには特に強い傾向があると思います。この欲求を刺激することはエンジニアのキャリア形成にとっても非常に大事です。ただし、それだけではエンジニアのサステナブルな組織化は難しいというモヤモヤがずっとありました。それに対してマズロー自身が晩年になって更に上位に6段階目の欲求「自己超越欲求」について言及していたことを恥ずかしながらつい最近知りました。</p><img src="/images/20190918/photo_20190918_03.png"><p>ホラクラシー型を目指すことは「自己超越欲求」に応えることだと勝手解釈して個人的に納得してます。エンジニア個人の自己実現という狭い視野からチーム成長を通して自己超越したいという欲求を満たすこと、つまりはチーム＝自分自身という感覚を養っていくということではないかと整理してます。</p><h1 id="10の症状とリファクタリング"><a href="#10の症状とリファクタリング" class="headerlink" title="10の症状とリファクタリング"></a>10の症状とリファクタリング</h1><p>エンジニア組織の様々なジレンマを解消できるような西洋医学的な特効薬は存在しません。組織としての成熟度や課題認識に応じて適切なタイミングで東洋医学的に組織デザインをリファクタリングし続ける継続力が重要です。</p><p>リファクタリングのタイミングを見計らうのに利用したのがチームビルディング理論として有名な「タックマンモデル」です。</p><img src="/images/20190918/photo_20190918_04.png"><p>タックマンが提唱したこの理論はチームが機能的に進化する過程を表しているもので、あまりに普遍的なモデルなのでチームビルディングを志す人なら目にされた方も多いかと思います。</p><p>タックマンモデルの説明は他に任せるとして割愛しますが、ここでお伝えしたいことはエンジニアに異変を感じた時に即リアクションして必要に応じてリファクタリングすることの重要性です。組織が成長するタイミングで起きる歪みはエンジニアの行動変化から始まります。変化に敏感に気がついて早期にリアクションして適切な処方をしないと機能的な組織デザインには進化しません。</p><p>以下、組織のリファクタリングのきっかけとなる10の症状と処方箋を紹介します。</p><img src="/images/20190918/photo_20190918_05.png"><h3 id="一、老害シンドローム"><a href="#一、老害シンドローム" class="headerlink" title="一、老害シンドローム"></a>一、老害シンドローム</h3><p>エンジニアから「俺らの頃は～」という表現がよく聞こえてくるようになったのなら絶好のリファクタリングのタイミングです。特にレジェンド達が過去の成功体験を語り続けているなら気を付けた方がよいでしょう。過去の経験は尊いものですが、成功体験による自信は行き過ぎると過信へと変わります。過信は停滞を生む大きな原因の一つです。成功体験しか言わないレジェンドには別の役割を与えた方がいいでしょう。書籍『<a href="https://www.amazon.co.jp/dp/B00KD2IK4S/" target="_blank" rel="noopener">チーズはどこに消えた？</a>』でも渡しておくといいかもしれません。また、この症状の場合はヒエラルキーが深くなっていることが可能性が高いため、組織デザインをよりフラットにするような処方が効果的です。</p><p>　　→　処方箋：組織デザイン変更（P型、H型など）</p><h3 id="二、安定シンドローム"><a href="#二、安定シンドローム" class="headerlink" title="二、安定シンドローム"></a>二、安定シンドローム</h3><p>エンジニアの「実績を重視して～」という表現がよく聞こえてくるようになったのなら絶好のリファクタリングのタイミングです。実績は非常に大事ではありますが、意思決定に実績しか選択理由がない場合は安定という名の思考停止をしている可能性がありますので気を付けた方がよいでしょう。現状維持の安易な選択は変化を拒んでいる証拠です。技術的負債の正体は現状維持バイアスです。これが続くとエンジニア組織の癌細胞になる可能性があります。まだ小さいうちに対処して取り除いておくことが大事です。</p><p>　　→　処方箋：組織デザイン変更（A型、M型など）</p><h3 id="三、テクハラシンドローム"><a href="#三、テクハラシンドローム" class="headerlink" title="三、テクハラシンドローム"></a>三、テクハラシンドローム</h3><p>技術的な専門性で尖ったエンジニアが専門外の人に対してテクハラ（テクノロジー・ハラスメント）を見かけるようになったら注意喚起が必要です。チーム間に壁が生まれている可能性があります。一度築かれてしまった壁はなかなか崩れないので協調型に変えるなどといった大きなリファクタリングも必要になると覚悟した方がいいでしょう。</p><p>　　→　処方箋：組織デザイン変更（P型、M型など）</p><h3 id="四、燃え尽きシンドローム"><a href="#四、燃え尽きシンドローム" class="headerlink" title="四、燃え尽きシンドローム"></a>四、燃え尽きシンドローム</h3><p>大きなプロジェクトが終わりそうなタイミングはリファクタリングを検討するタイミングにもなります。大きなプロジェクトが終わると達成感を超えて燃え尽きてしまうことがあります。一度燃え尽きてしまうとなかなか回復するのに時間がかかるので早い段階での検知が不可欠です。燃え尽き状態になるネガティブな要因の一つは、偏ったプレッシャーを長い期間与え続け、エンジニアを低温火傷のように思考停止状態にさせてしまった点が挙げられます。回避させるためには日頃から定期的なメンタリングやキャリア相談がしやすい組織デザインへとリファクタリングしましょう。</p><p>　　→　処方箋：組織デザイン変更（M型など）</p><h3 id="五、内向性愚痴シンドローム"><a href="#五、内向性愚痴シンドローム" class="headerlink" title="五、内向性愚痴シンドローム"></a>五、内向性愚痴シンドローム</h3><p>エンジニアから所属チームに対する不平・不満が増えてきたタイミングでは対症療法的に一つ一つ改善させていくことが先決です。大きなリファクタリング（異動・交代、方針転換など）はかえって傷を大きくしやすいため、目の前の不平・不満がコツコツと改善する様子をエンジニア自身に感じてもらうことが重要です。大きなリファクタリングによる荒治療は最終手段に取っておきましょう。</p><p>　　→　処方箋：チーム内改善</p><h3 id="六、外向性愚痴シンドローム"><a href="#六、外向性愚痴シンドローム" class="headerlink" title="六、外向性愚痴シンドローム"></a>六、外向性愚痴シンドローム</h3><p>エンジニアから所属チーム外に対する不平・不満が増えてきたタイミングでは、言う側と言われる側のどちらの問題なのかをきっちり見極めて大きなリファクタリング（異動・交代）を考えましょう。チーム外に対する不平・不満は多くの場合で周囲に一気に広がる進行性の癌になりえます。組織が若いうちは特に進行が早いため配置転換も早ければ早いほどよいでしょう。</p><p>　　→　処方箋：異動・交代</p><h3 id="七、成長痛シンドローム"><a href="#七、成長痛シンドローム" class="headerlink" title="七、成長痛シンドローム"></a>七、成長痛シンドローム</h3><p>組織内の一つのチームに所属するエンジニア数が一定のラインを超えてくると、それまではうまくいっていたことがうまくいかない事態が起きてきます。ほとんどの場合は成長痛なので一度超えてしまえばチームの成長に繋がりますが、私自身の経験上ではチームあたり8名程度までが最適なメンバー数で30名程度になると直接的な指揮系統の限界を迎えます。限界を超えると必然的にヒエラルキーが深くなりやすく、それによるエンジニアに対する弊害が多くなるため、メンバー数が一定ラインを超えたチームはチーム分解を検討するのがよいでしょう。</p><p>　　→　処方箋：チームの分解</p><h3 id="八、血行不良シンドローム"><a href="#八、血行不良シンドローム" class="headerlink" title="八、血行不良シンドローム"></a>八、血行不良シンドローム</h3><p>エンジニアが同じチームに仲間が変わらない状況下で長期間所属している状況は、多くの場合チャレンジが減り現状維持バイアスという名の血行障害になるリスクがあります。この症状になると組織全体にいい影響を与えないことが多いため、日ごろからの心がけて血行を促進する必要があります。チームの所属期間をモニタリングするなどして、チームメンバーの流動性を維持管理していることが重要です。定期的な人材シャッフルなども有効でしょう。</p><p>　　→　処方箋：異動・交代</p><h3 id="九、マンネリシンドローム"><a href="#九、マンネリシンドローム" class="headerlink" title="九、マンネリシンドローム"></a>九、マンネリシンドローム</h3><p>エンジニアに対して「何かやりたいことがないのか？！」、「あなたの分身を育てようよ？！」という投げかけを頻繁に聞くようになったらチームが停滞しはじめている黄色信号です。ミッションや後継育成はリーダーが組織的にやることであって、エンジニアにそれを求めるようになってることはチームに成長の伸びしろがない証拠です。チームの可能性の幅を模索できないようならチーム解散も含む大きなリファクタリングを計画していく好機です。</p><p>　　→　処方箋：チーム解散</p><h3 id="十、うわべだけシンドローム"><a href="#十、うわべだけシンドローム" class="headerlink" title="十、うわべだけシンドローム"></a>十、うわべだけシンドローム</h3><p>エンジニアの真の声が聞こえなくなった、エンジニアからキャリア相談される機会が減った、ソースコードを書く/見る機会が減った、エンジニアの活動の評価を数字貢献だけでみるようになった、・・・などエンジニアとの距離感が遠くなったことに焦りを感じずにうわべだけのマネジメントになっている場合はもはや組織のリーダーシップとしては末期状態に近づきつつあります。リファクタリングの時期を逸している可能性が高いため、その時に考えるべきことは一つしかありません。</p><p>　　→　処方箋：あなた自身が退く</p><h1 id="後編まとめ"><a href="#後編まとめ" class="headerlink" title="後編まとめ"></a>後編まとめ</h1><p>サステナブルなエンジニア組織に向けたデザインパターンとリファクタリングのプラクティスについて紹介しました。</p><h3 id="エンジニア組織デザインのヒント"><a href="#エンジニア組織デザインのヒント" class="headerlink" title="エンジニア組織デザインのヒント"></a>エンジニア組織デザインのヒント</h3><ul><li>組織デザインパターンは万能ではなく各々にメリットとデメリットがある</li><li>組織デザインパターンは適宜組み合わせることで組織のデメリットを補強できる</li><li>エンジニアの行動指針や価値観の共有は組織を強くする</li><li>エンジニア組織が成熟していく時間軸をコントロールしてレベルアップさせる</li><li>エンジニアに対して紳士に向き合った対話を心掛ける</li><li>エンジニアの行動変化や異変を素早く検知・予想する</li><li>検知された異変に対して適切なタイミングで適切な処方をする</li><li>組織デザインのリファクタリングを継続することがサステナブルな組織へと進化させる</li></ul><h3 id="リーダーがやってはいけないことリスト"><a href="#リーダーがやってはいけないことリスト" class="headerlink" title="リーダーがやってはいけないことリスト"></a>リーダーがやってはいけないことリスト</h3><ul><li>実態の伴わない組織デザイン</li><li>エンジニアとの心理的な距離感</li><li>チーム間の壁の許容</li><li>深いヒエラルキーの許容</li><li>変化に対する意思決定の遅延</li><li>問題は時間が解決するという楽観主義</li><li>エンジニアの力を信じない悲観主義</li><li>現状に甘んじて自身を律することをしない甘え</li></ul><h3 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h3><ul><li><a href="/articles/20190917/">前編：サステナブルなエンジニア組織デザイン ～よくある設計とジレンマ～</a></li><li>後編：サステナブルなエンジニア組織デザイン ～デザインパターンと10のリファクタリング～</li></ul><h3 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h3><p>本稿のテーマに直接的に関連はしませんが個人的に組織デザインに影響を受けた書籍を紹介します。</p><p>2002年にダニエル・カーネマンがノーベル経済学賞を受賞して以来、脚光を浴びるようになった学問が行動経済学です。人間がかならずしも合理的には行動しないことに着目し、経済モデルに人間の心理を取り入れることで、トラディショナルな経済学ではうまく説明不能だった経済行動を実証的に捉えようとしたものです。</p><p>経済学の専門家でもないのでさらっと読める書籍の紹介になりますが、エンジニア組織デザインが経営学でいう組織論などとは合致しない点が多くてもやもやしていたのですが、行動経済の別視点で組織を眺めると多少なりとも参考になる点が多く応用できました。エンジニア組織に起きていた行動のいくつかが説明つくこともあるので予測可能な行動は先手を打つべく個人的に重宝しています。</p><p>何かの参考になれば。</p><img src="/images/20190918/photo_20190918_06.jpg" class="img-small-size" style="border:solid 1px #000000"><p>『<a href="https://www.amazon.co.jp/dp/B00K1A75N4/" target="_blank" rel="noopener">予想どおりに不合理</a>』　ダン・アリエリード(著)</p><hr><p>Yosuke Miyahara<br>Vice President/Technology Innovation Group/Future Corporation.<br><a href="https://newspicks.com/user/147180" target="_blank" rel="noopener">https://newspicks.com/user/147180</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;サステナブルなエンジニア組織デザイン-後編&quot;&gt;&lt;a href=&quot;#サステナブルなエンジニア組織デザイン-後編&quot; class=&quot;headerlink&quot; title=&quot;サステナブルなエンジニア組織デザイン 後編&quot;&gt;&lt;/a&gt;サステナブルなエンジニア組織デザイン 後編&lt;/
      
    
    </summary>
    
      <category term="Management" scheme="https://future-architect.github.io/categories/Management/"/>
    
    
      <category term="組織論" scheme="https://future-architect.github.io/tags/%E7%B5%84%E7%B9%94%E8%AB%96/"/>
    
  </entry>
  
  <entry>
    <title>サステナブルなエンジニア組織デザイン（前編） ～よくある設計とジレンマ～</title>
    <link href="https://future-architect.github.io/articles/20190917/"/>
    <id>https://future-architect.github.io/articles/20190917/</id>
    <published>2019-09-17T02:00:42.000Z</published>
    <updated>2019-09-18T02:18:13.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>ここ数年来で人材マーケットにおけるIT人材の需要が高まり人材獲得合戦が過熱しています。経済産業省が2018年に公開したレポート「2025年の崖」では2025年にはIT人材不足が約43万人まで拡大すると指摘しています。やや煽り気味だなーと思えるぐらいにメディアも一斉に取り上げました。「今のうちにIT人材を大量獲得せよ！」とトップダウン指示を受けて、人材の囲い込み合戦に参戦して大変になられている人事担当の方も多いだろうなと想像しています。</p><p>※当社ではIT人材をコンサルタント＋エンジニア≒アーキテクトと呼称しますが、本稿では便宜上エンジニアと表記します。</p><h3 id="エンジニアの住む世界"><a href="#エンジニアの住む世界" class="headerlink" title="エンジニアの住む世界"></a>エンジニアの住む世界</h3><p>迫り来る将来の危機が人材不足というエンジニアの量の問題なのかというとそれは湾曲した認識です。エンジニアはソースコードは短ければ短いほど美しいと思う人種で、クラウドネイティブな作品が増えてきてからはこぞってアーキテクチャデザインの美しさを互いに誇りあい、難解で複雑な問題を抽象化して解こうとする、そんなアートの世界にエンジニアは暮らしています。エンジニアをいつまでも「人月の神話」の世界で飼い慣らそうとする発想のままでは問題の本質をミスリードします。エンジニアは量ではなく質で評価されるべきで、質の高いアウトプット価値を人月で評価することは失礼にあたります。この認識を改めなければ誇り高きエンジニアはまず集められないでしょう。</p><p>いかにエンジニアが成長しやすい環境を継続的に改善していき、成長したエンジニアによる成果をどうビジネスに直結させるかを追求できれば、人材不足に対して量で補おうとする負のスパイラルから脱却できるだろうと思います。</p><h3 id="サステナブルな組織デザイン"><a href="#サステナブルな組織デザイン" class="headerlink" title="サステナブルな組織デザイン"></a>サステナブルな組織デザイン</h3><p>私はここ十年ぐらい大中小の様々なエンジニア組織をリードしてきました。幾度もエンジニア組織の統廃合を繰り返しながら試行錯誤してきましたが、組織を持続的に成長させることの難しさは身をもって知っているつもりです。未だ正解と言えるような組織デザインは見つかっておらず今もなお試行錯誤中なのが正直なところです。</p><p>そんな中で今までの統廃合の歴史を振り返ると、組織は8名→30名→80名→200名超と年々大きくなっていき、その過程の中で進化してきた組織デザインはマーケット変化やあらゆる危機感に都度対応してきた進化論（結果論？）だったように思えてなりません。</p><p>失敗や成功体験の中にエンジニアに特化した組織デザインのヒントがあると信じてサステナブルな組織デザインについて2部構成でまとめてみました。</p><ul><li>前編：サステナブルなエンジニア組織デザイン～よくある設計とジレンマ～</li><li>後編：<a href="/articles/20190918/">サステナブルなエンジニア組織デザイン～デザインパターンと10のリファクタリング～</a></li></ul><p>前編ではエンジニア組織でよく遭遇するジレンマについて紹介します。</p><h1 id="対象者"><a href="#対象者" class="headerlink" title="対象者"></a>対象者</h1><p>エンジニアに敬意を払える正しい認識を持ってることを前提として以下のような方々を対象としています。</p><ul><li>スタートアップなどでエンジニア組織をこれから作っていこうとされている方</li><li>エンジニア組織駆動でビジネスをスケールさせていこうと思っている方</li><li>他、エンジニア組織に対して様々な課題認識を持っていられる方<ul><li>エンジニアの獲得がうまくいかずに組織が大きくならない</li><li>エンジニアがどんどん離れていってしまっている</li><li>エンジニアのモチベーションがアップするような仕事環境を与えられていない</li><li>エンジニアが好き勝手やるので収益に結びつかない</li><li>エンジニアのキャリア形成がうまくいっていない</li><li>エンジニアのレジェンド達が新しいチャレンジを許さない</li><li>エンジニアとは名ばかりでベンダーコントロールするだけの組織になっている</li></ul></li></ul><h1 id="散見されるエンジニア組織の現状"><a href="#散見されるエンジニア組織の現状" class="headerlink" title="散見されるエンジニア組織の現状"></a>散見されるエンジニア組織の現状</h1><p>ビジネスモデルや技術革新スピードが激変する今、業種業態を問わず企業は異次元のスピードで変化対応力が求められています。ITを「誰かに作ってもらうもの（外製）」から「自ら作るもの（内製）」へと経営の舵を切り、IT組織を強化しようとするのは必然の流れです。空前の内製化ブームの是非はおいといてもこのウェーブに乗るっきゃないと思った企業は非常に多いです。</p><p>多くのクライアントからなかなか思い通りにいかないといった種の相談を受ける機会がここ数年来で増えてきました。「エンジニアを集められない」、仮に集められても「エンジニア組織が機能していない」という話が大半です。それをエンジニアの意識の問題やHRマーケティングの問題にすり替えながら、組織名に「イノベーション」、「デジタル」、「DX」、「ラボ」などの流行り言葉を並べてどうにかエンジニアの関心を惹けるよう組織の名称から試行錯誤されている企業も多いなと思います。</p><p>当の私が執行責任をもっている組織名も「Technology Innovation Group」と名付けているので同じ試行錯誤をした輩です。エンジニア組織をどうビルディングしていくかは非常に普遍的な課題だなと思います。</p><h1 id="エンジニア組織のジレンマ"><a href="#エンジニア組織のジレンマ" class="headerlink" title="エンジニア組織のジレンマ"></a>エンジニア組織のジレンマ</h1><p>エンジニア組織をビルディングをするにはエンジニアの持つ価値観の性質をしっかりと理解しなければなりません。そしてエンジニア組織が成熟していく過程ではエンジニアの性質起因で繰り広げられる様々なジレンマが存在します。代表的なジレンマをいくつか紹介します。</p><h3 id="1-オープンな活動-vs-クローズドな活動"><a href="#1-オープンな活動-vs-クローズドな活動" class="headerlink" title="1) オープンな活動 vs クローズドな活動"></a>1) オープンな活動 vs クローズドな活動</h3><p>「技術ノウハウをオープンにして外部のコミュニティとの接点を多くするか、企業の競争戦略上クローズドに内部に留めようとするか」</p><p>このジレンマで踏み止まってる企業は多く、歴史の長い組織であればあるほどその傾向は強いなと感じます。このジレンマにはエンジニアのモチベーションとノウハウ流出リスクとのトレードオフがあります。エンジニアは総じてOSS活動や勉強会などが大好きな性質をもっています。これを利用するとオープンなコミュニティで様々な出会いがあるのでHRマーケティングが大いに期待ができます。一方でノウハウ流出にはエンジニア自身のヒトも含まれます。外部の接点が増える分だけ他企業に目移りしてしまう確率を上げてしまうことは避けられない事実です。</p><p>エンジニアのモチベーションはポジティブなパワーを生むのでカルチャー形成には有効です。流出リスクを理解しつつもオープンな活動に振り切って、エンジニアの集まるカルチャー形成をすることが先決です。エンジニアが好むカルチャーさえあれば、焦らずとも自然とエンジニアは集まってきます。</p><p>人が集まってきたら次はエンジニアを組織化するフェーズに移行した時のジレンマです。</p><h3 id="2-競争型の運営-vs-協調型の運営"><a href="#2-競争型の運営-vs-協調型の運営" class="headerlink" title="2) 競争型の運営 vs 協調型の運営"></a>2) 競争型の運営 vs 協調型の運営</h3><p>「個人やチームに対して技術や成果責任を競わせる形で運営するか、協調性を重視して明確な責任を持たせないで運営するか」</p><p>これにはプロジェクト（当社ではプロジェクト制のため関連する一連の仕事をプロジェクトと以降も表記します）に対するオーナーシップと技術ノウハウの蓄積との間にトレードオフがあります。互いに競争することで担当領域に対するオーナーシップは強固になりますが、逆に領域に固執しすぎてしまうとエンジニア間に壁が生まれ、ノウハウが分断されて技術力は相対的に停滞しがちです。一方で協調性を重視すると技術ノウハウ共有が進み技術力は相乗的に向上しやすくなりますが、緊張関係のない過度な協調は他力に頼りやすくなり、組織が大きくなるにつれてプロジェクトのオーナーシップが欠如する事態も起こりえるでしょう。</p><p>ここでもトレードオフを顧みながら競争と協調のバランスをとって使い分けることが重要です。オーナーシップの欠如が垣間みえるようになると、組織はそれ以上大きくできない黄色信号だと捉えるとよいかと思います。仮に大きくできても機能しない組織になるだけです。エンジニア組織に技術や成果に対して適度な競争原理を導入することは組織成長のスパイスになりえます。</p><p>エンジニア組織が大きくなると、ビジネスとしての成果を求められるようになるのは必然な流れかと思います。次は組織成果の最大化させるフェーズに移行した時のジレンマです。</p><h3 id="3-ヒエラルキー-vs-ホラクラシー"><a href="#3-ヒエラルキー-vs-ホラクラシー" class="headerlink" title="3) ヒエラルキー vs ホラクラシー"></a>3) ヒエラルキー vs ホラクラシー</h3><p>「マネージャーが管理するヒエラルキーか、管理者不在のホラクラシーとするか」</p><p>エンジニアは管理されることが基本的に嫌いという性質をもっています。マネージャーはエンジニアの成果を時間やアウトプット量をメジャーにしがちなのでエンジニアの価値観にギャップが生じます。とはいえ、マネージャーがいると成果にコミットしやすくなるのも事実です。一方で成果に対する極度なコミットメントは失敗を恐れるあまり保守的になりやすく、積極的な技術チャレンジが減少し、結果的に技術的負債を生みやすくなります。一方で管理者不在のホラクラシーに移行するとエンジニアの自立を促すことができ、技術的なチャレンジが活性化され、プロのエンジニアとして大きくブレークスルーする可能性も飛躍的に高くなります。ただし、エンジニアにゴールや価値観が共有できていないと組織は機能せずに、エンジニアの活動が趣味の世界に入りやすく自己満足に陥りやすい傾向もあります。</p><p>ここでもトレードオフを顧みながら使い分けることでビジネスの成果が最大化され、エンジニアやそのチームにプロ意識が芽生えてきます。エンジニアのプロ意識は暫くすると自主経営へと進化し、ヒト・モノ・カネ・ノウハウといった組織のリソースに対する権限委譲を要求してくるでしょう。次は持続可能な自主経営フェーズに移行した時のジレンマです。</p><h3 id="4-権限委譲-vs-アカウンタビリティ"><a href="#4-権限委譲-vs-アカウンタビリティ" class="headerlink" title="4) 権限委譲 vs アカウンタビリティ"></a>4) 権限委譲 vs アカウンタビリティ</h3><p>「個人やチームにあらゆる権限を委譲するか、その代わりにアカウンタビリティをどう果たすか」</p><p>権限委譲によりエンジニアによる自主経営が進み、短期的な収益を気にするようなP/L思考から技術投資などのB/S思考へと意識が変わり、結果的に中長期的な活動が増えることでサステナブルな組織へのグレードアップが期待できます。権限委譲を推し進めることは経営に対するアカウンタビリティを果たすことも同時に要求されることにもなります。エンジニアの投資的な活動のほとんどはテクノロジートレンドなどに即した知的好奇心から始まることが常です。それ自体はイノベーションの原動力にもなりうるので否定すべきものではありません。ただし、知的好奇心だけでは総じてエモーショナルな動機ばかりが周囲の目に映りやすく、透明性が損なわれた活動には組織内外からの応援者が得られずに、その活動範囲は狭くなりがちです。自由（権限委譲）には責任がつきものですので個人レベルまでその意識を徹底、および維持し続ける覚悟が必要になります。</p><h1 id="エンジニア組織の資本は人と技術"><a href="#エンジニア組織の資本は人と技術" class="headerlink" title="エンジニア組織の資本は人と技術"></a>エンジニア組織の資本は人と技術</h1><p>いずれのジレンマもゼロかイチの選択ではなく、その時その瞬間にどこに軸足をおいてバランスをとるかが重要です。組織デザインにはバランス能力が問われています。エンジニア組織の資本は人と技術。組織デザインの落とし穴は至るところにあり、バランス感覚を失うと人は疲弊して技術は陳腐化します。エンジニア組織の資本が擦り減っていく負のサイクルに陥いれば組織は急激に傷んでいきます。</p><img src="/images/20190917/photo_201909017_01.png" style="border:solid 1px #000000"><p>逆に言えば各種ジレンマを突破すれば、エンジニア組織の資本力が強化されサステナブルな組織に向けて組織は大きく飛躍する可能性を秘めています。</p><p>可能性を開花させるには組織デザインが重要な役割を果たします。</p><h3 id="エンジニア組織デザインの救世主？"><a href="#エンジニア組織デザインの救世主？" class="headerlink" title="エンジニア組織デザインの救世主？"></a>エンジニア組織デザインの救世主？</h3><p>2018年に救世主のような組織デザインとしてティール組織がフィーチャーされました。ティールは以下の書籍で非常に有名になり、旧来型組織から一線を画した大変興味深い組織論です。これがエンジニア組織を救う手立てになりうるかが気になるポイントかと思います。</p><img src="/images/20190917/photo_201909017_02.jpeg" class="img-middle-size"><p>『<a href="https://www.amazon.co.jp/dp/B078YJV9ZW/" target="_blank" rel="noopener">ティール組織――マネジメントの常識を覆す次世代型組織の出現</a>』　フレデリック・ラルー(著)</p><p>今では解説サイトが世にたくさんあるので詳しい説明はそちらにお任せして割愛しますが、ティール組織が評価される一方で現在エンジニア組織の課題に直面している方々にとっては少しピンとこなかったという話もよく聞きます。マインドフルネスとかホールネスなどといったスピリチュアルの言葉が多く、頭では共感できていても行動に移すには遠い印象があるのではないかと思います。その印象の深淵にはエンジニア特有のリアリティが欠けているからであると理解しています。エンジニアの中にある根源的な欲求に応えずにティール組織を目指すことには全く意味を成しません。</p><h3 id="エンジニア組織には感情がある"><a href="#エンジニア組織には感情がある" class="headerlink" title="エンジニア組織には感情がある"></a>エンジニア組織には感情がある</h3><p>エンジニアは技術に対して「損得」でなく「善悪」で動きます。つまりエンジニア組織には純粋な感情が存在しています。組織にある感情を読み解いてバランスを取りながらエンジニア組織のジレンマを乗り越えるためにはどうやったとしても時間が必要になります。ティール組織を鵜呑みにして大上段から形から入ってもいいことはないので、目の前にいるエンジニアたちの間で今まさに起きている事象に対して目を向けることの方が先決です。組織の成長に近道はないので今を知った上で適切に組織デザインをリファクタリングしていくことが大切です。</p><p>後編ではエンジニア組織デザインのリファクタリングのプラクティスを紹介します。</p><ul><li>前編：サステナブルなエンジニア組織デザイン～よくある設計とジレンマ～</li><li>後編：<a href="/articles/20190918/">サステナブルなエンジニア組織デザイン～デザインパターンと10のリファクタリング～</a></li></ul><h1 id="前編まとめ"><a href="#前編まとめ" class="headerlink" title="前編まとめ"></a>前編まとめ</h1><p>エンジニア組織の現状とその中にあるジレンマを紹介しました。</p><h3 id="エンジニア組織デザインのヒント"><a href="#エンジニア組織デザインのヒント" class="headerlink" title="エンジニア組織デザインのヒント"></a>エンジニア組織デザインのヒント</h3><ul><li>エンジニアをリスペクトする</li><li>エンジニアが成長しやすい環境を継続的に維持改善する</li><li>オープンな活動を通してカルチャーを作る</li><li>競争型・協調型のバランスでエンジニアの自立化を促す</li><li>深いヒエラルキーを排除したフラットな組織が成果を最大化する</li><li>エンジニアの慢性的な疲弊と技術的負債が最大の敵と認識する</li><li>権限委譲とアカウンタビリティの両立が中長期的な視点を養う</li><li>エンジニア組織に生まれる感情をコントロールしながら組織を運営する</li></ul><h3 id="リーダーがやってはいけないことリスト"><a href="#リーダーがやってはいけないことリスト" class="headerlink" title="リーダーがやってはいけないことリスト"></a>リーダーがやってはいけないことリスト</h3><ul><li>無理な組織合理化の追求</li><li>外部コミュニティとの遮断</li><li>現状維持バイアスの許容</li><li>マイクロマネジメント</li><li>レジェンド価値観の強要</li><li>選択肢なき自由の許容</li><li>360°評価の形骸化</li><li>オーナーシップの義務化</li></ul><h3 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h3><p>本稿のテーマに直接的に関連はしませんが個人的に組織デザインに影響を受けた書籍を紹介します。</p><p>2005年に刊行された「社員をサーフィンに行かせよう」から時を経て2012年出版の書籍でパタゴニアのサステナビリティについての書籍です。体系的に整理されているわけではないですが、組織デザインの様々なヒントを与えてくれます。社員のカルチャー形成、価値観の共有、思い立った時の行動力、ブランディング。</p><p>短期的ではなく長期的な視点でサステナブルなカンパニーを追求しつつ、存在意義そのものがカルチャーになっています。それでいて繊細な部分もしっかりとリファクタリングしているカンパニーだなと思います。「社員がパタゴニアの服を着ることが環境問題に直結する」という感覚があるカンパニーで、エンジニアの書くコードにも同様な正義が求められると素晴らしいのではないかと考えさせられました。</p><p>何かの参考になれば。<br><img src="/images/20190917/photo_201909017_03.jpeg" class="img-middle-size"><br>『<a href="https://www.amazon.co.jp/dp/B00P76TVKW/" target="_blank" rel="noopener">レスポンシブル・カンパニー</a>』　イヴォン・シュイナード(著)</p><hr><p>Yosuke Miyahara<br>Vice President/Technology Innovation Group/Future Corporation.<br><a href="https://newspicks.com/user/147180" target="_blank" rel="noopener">https://newspicks.com/user/147180</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;ここ数年来で人材マーケットにおけるIT人材の需要が高まり人材獲得合戦が過熱しています。経済産業省が2018年に公開したレポー
      
    
    </summary>
    
      <category term="Management" scheme="https://future-architect.github.io/categories/Management/"/>
    
    
      <category term="組織論" scheme="https://future-architect.github.io/tags/%E7%B5%84%E7%B9%94%E8%AB%96/"/>
    
  </entry>
  
</feed>
