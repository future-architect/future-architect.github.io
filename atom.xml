<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Future Tech Blog - フューチャーアーキテクト</title>
  
  <subtitle>フューチャー開発者ブログ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://future-architect.github.io/"/>
  <updated>2020-02-06T03:21:54.983Z</updated>
  <id>https://future-architect.github.io/</id>
  
  <author>
    <name>Future Architect Consultants</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Istio on GKEではじめるサービスメッシュ</title>
    <link href="https://future-architect.github.io/articles/20200206/"/>
    <id>https://future-architect.github.io/articles/20200206/</id>
    <published>2020-02-06T02:43:53.000Z</published>
    <updated>2020-02-06T03:21:54.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの村田です。<a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a>2日目の記事です！</p><p>皆さんは普段どのようなアプリケーションを開発されてますか？私は最近Kubernetes上にデプロイされるマイクロサービスなアプリケーションに携わっています。</p><p>今回はIstio on GKEに焦点をあててGCPにおけるサービスメッシュの活用方法をご紹介したいと思います。</p><h1 id="GKEクラスタを作成する"><a href="#GKEクラスタを作成する" class="headerlink" title="GKEクラスタを作成する"></a>GKEクラスタを作成する</h1><p>まずはクラスタを作成します。</p><p>基本的にはデフォルト値のままクラスタ作成してしまおうと思います。<br>変えるのは一箇所だけ、今回の目玉の部分です。</p><img src="/images/20200206/photo_20200206_01.png" class="img-middle-size"><p><code>Additional features</code> の <code>Enable Istio</code> にチェック！<br>チェックを入れると <code>Enable mTLS</code> 欄が登場します。</p><p>選べるのは <code>Permissive</code> と <code>Strict</code> の2種類ですが、今回はデフォルト値である <code>Permissive</code> のままとします。詳しくは以下のページを見てみてくださいmm<br><a href="https://cloud.google.com/blog/products/networking/the-service-mesh-era-securing-your-environment-with-istio" target="_blank" rel="noopener">The service mesh era: Securing your environment with Istio</a></p><p>少し待つとクラスタができました！</p><img src="/images/20200206/photo_20200206_02.png"><p>クラスタ内に作成されたServiceを確認してみましょう。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ gcloud container clusters list --project &lt;your-project&gt;</span><br><span class="line">NAME                LOCATION       MASTER_VERSION  MASTER_IP        MACHINE_TYPE   NODE_VERSION    NUM_NODES  STATUS</span><br><span class="line">standard-cluster-1  us-central1-a  1.13.11-gke.23  130.211.127.151  n1-standard-1  1.13.11-gke.23  3          RUNNING</span><br></pre></td></tr></table></figure><p>Istio関連のService(Podも)は <code>istio-system</code> のNamespaceに作成されます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get service -n istio-system</span><br><span class="line">NAME                     TYPE           CLUSTER-IP     EXTERNAL-IP     PORT(S)                                                                                                                                      AGE</span><br><span class="line">istio-citadel            ClusterIP      10.12.6.189    &lt;none&gt;          8060/TCP,15014/TCP                                                                                                                           49m</span><br><span class="line">istio-galley             ClusterIP      10.12.10.108   &lt;none&gt;          443/TCP,15014/TCP,9901/TCP                                                                                                                   49m</span><br><span class="line">istio-ingressgateway     LoadBalancer   10.12.11.17    34.69.104.178   15020:30222/TCP,80:30345/TCP,443:31293/TCP,31400:31428/TCP,15029:30807/TCP,15030:30916/TCP,15031:32448/TCP,15032:31430/TCP,15443:30612/TCP   49m</span><br><span class="line">istio-pilot              ClusterIP      10.12.15.0     &lt;none&gt;          15010/TCP,15011/TCP,8080/TCP,15014/TCP                                                                                                       49m</span><br><span class="line">istio-policy             ClusterIP      10.12.3.166    &lt;none&gt;          9091/TCP,15004/TCP,15014/TCP                                                                                                                 49m</span><br><span class="line">istio-sidecar-injector   ClusterIP      10.12.5.178    &lt;none&gt;          443/TCP                                                                                                                                      49m</span><br><span class="line">istio-telemetry          ClusterIP      10.12.14.103   &lt;none&gt;          9091/TCP,15004/TCP,15014/TCP,42422/TCP                                                                                                       49m</span><br><span class="line">promsd                   ClusterIP      10.12.3.103    &lt;none&gt;          9090/TCP                                                                                                                                     49m</span><br></pre></td></tr></table></figure><p>また、デフォルトでは <code>sidecar injection</code> が有効になっていません。<br>Istioのメリットを最大限享受するためにはサイドカーとして動くEnvoy proxyが必要です。<br>以下のコマンドで有効化します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl label namespace default istio-injection=enabled</span><br><span class="line">namespace/default labeled</span><br></pre></td></tr></table></figure><p>クラスタの準備はひとまず完了です。</p><h1 id="デモアプリケーションをデプロイする"><a href="#デモアプリケーションをデプロイする" class="headerlink" title="デモアプリケーションをデプロイする"></a>デモアプリケーションをデプロイする</h1><p>マイクロサービスのデモアプリケーションといえばこれ、ということで <a href="https://github.com/GoogleCloudPlatform/microservices-demo#hipster-shop-cloud-native-microservices-demo-application" target="_blank" rel="noopener">Hipster Shop: Cloud-Native Microservices Demo Application</a> を早速デプロイします。</p><p>まずは <code>microservices-demo</code> をclone。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/GoogleCloudPlatform/microservices-demo.git</span><br></pre></td></tr></table></figure><p><code>Docker</code>, <code>kubectl</code>, <code>skaffold</code> が必要とのことでインストール。筆者環境では <code>skaffold</code> のみが無かったのでHomebrew経由で入れました。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install skaffold</span><br></pre></td></tr></table></figure><p><code>skaffold</code> はバージョン制約(≥v0.20)があるので念の為チェック。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ skaffold version</span><br><span class="line">v1.3.1</span><br></pre></td></tr></table></figure><p>問題なさそうですね。次に進みます。<br>READMEに従う形でMANIFESTをapply。ここの紐解きは後述(★)します。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f ./istio-manifests</span><br><span class="line">gateway.networking.istio.io/frontend-gateway created</span><br><span class="line">virtualservice.networking.istio.io/frontend-ingress created</span><br><span class="line">virtualservice.networking.istio.io/frontend created</span><br><span class="line">serviceentry.networking.istio.io/whitelist-egress-googleapis created</span><br><span class="line">serviceentry.networking.istio.io/whitelist-egress-google-metadata created</span><br></pre></td></tr></table></figure><p>skaffoldを使って一気にイメージ登録からデプロイまでを行います。Docでは30分未満との記述がありましたが、筆者環境では1時間半以上かかりました。。。マシンスペックとネットワークスピードですかね。。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ skaffold run --default-repo=gcr.io/&lt;your-project&gt;</span><br></pre></td></tr></table></figure><p>何はともあれ無事にデモアプリのデプロイが完了しました。<br>Podの稼働状況を見てみます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get po</span><br><span class="line">NAME                                     READY   STATUS    RESTARTS   AGE</span><br><span class="line">adservice-7b456d8f85-29s59               2/2     Running   0          9h</span><br><span class="line">cartservice-7874b9c947-7vgmz             2/2     Running   3          9h</span><br><span class="line">checkoutservice-68c84b95cb-kx7z5         2/2     Running   0          9h</span><br><span class="line">currencyservice-58dc87958b-knkzr         2/2     Running   0          9h</span><br><span class="line">emailservice-5f4d4cc69-4mp75             2/2     Running   0          9h</span><br><span class="line">frontend-75b6b5d576-pxbcv                2/2     Running   6          9h</span><br><span class="line">loadgenerator-554f8b4bc8-9rzzx           2/2     Running   6          9h</span><br><span class="line">paymentservice-58867f6b85-nfcwn          2/2     Running   0          9h</span><br><span class="line">productcatalogservice-5c567d44cf-jsgjx   2/2     Running   0          9h</span><br><span class="line">recommendationservice-6fb9fd5b8f-5p449   2/2     Running   0          9h</span><br><span class="line">redis-cart-698f46b844-f4qr8              2/2     Running   0          9h</span><br><span class="line">shippingservice-6fd9764fc5-b44lc         2/2     Running   0          142m</span><br></pre></td></tr></table></figure><p>デフォルトのクラスタ設定ではリソースが足らず、半数以上のPodがPending状態となってしまいました。<br>Autoscalingの設定を入れることで解消しましたが、それに伴いCrashLoopBackoffが発生してしまったPodがいくつか存在しています。</p><p>Autoscale後は <code>n1-standard-1</code> が6台並ぶ構成となりました。（初期3台構成）</p><p><code>sidecar injection</code> を有効にしたので、Podの中も少し覗いてみます。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl describe pod adservice-7b456d8f85-29s59</span><br><span class="line">Name:               adservice-7b456d8f85-29s59</span><br><span class="line">Namespace:          default</span><br><span class="line">Priority:           0   </span><br><span class="line">PriorityClassName:  &lt;none&gt;</span><br><span class="line">・・・</span><br><span class="line">・・・</span><br><span class="line">Containers:</span><br><span class="line">  server:</span><br><span class="line">・・・</span><br><span class="line">・・・</span><br><span class="line">  istio-proxy:</span><br><span class="line">・・・</span><br><span class="line">・・・</span><br></pre></td></tr></table></figure><p><code>istio-proxy</code> がコンテナとして稼働していることが確認できました。</p><p>画面へのアクセスも試みてみましょう。<br>まずはIPを取得。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get service frontend-external</span><br><span class="line">NAME                TYPE           CLUSTER-IP    EXTERNAL-IP      PORT(S)        AGE</span><br><span class="line">frontend-external   LoadBalancer   10.12.0.203   35.232.239.135   80:30731/TCP   9h</span><br></pre></td></tr></table></figure><p><code>35.232.239.135</code> がIPなのでアクセスすると…</p><img src="/images/20200206/photo_20200206_03.png"><p>無事にデモ画面が表示されました！！</p><h1 id="サービスモニタリングを行う"><a href="#サービスモニタリングを行う" class="headerlink" title="サービスモニタリングを行う"></a>サービスモニタリングを行う</h1><p>さて、Istioを使う意義の一つであるモニタリングに踏み込んでいきましょう。<br>細かい設定手順は<a href="https://github.com/GoogleCloudPlatform/istio-samples/tree/master/istio-stackdriver#monitoring" target="_blank" rel="noopener">公式のMonitoring解説パート</a>がとても丁寧なので参照すると良いです。</p><p>以下はAdd ChartよりServer LatencyのChartを作成している画面です。<br>各項目設定時は選択候補がとてもたくさんありましたが、インクリメンタルサーチでどんどん絞れるのでストレスなく作成を進められました。</p><img src="/images/20200206/photo_20200206_04.png"><p>いくつかのメトリクスを追加してみると…</p><img src="/images/20200206/photo_20200206_05.png"><p>簡単にダッシュボードが作成できました。<br>既に様々なデータがStackdriver Monitoringへ送られているので、それをダッシュボード化すれば良いだけで特段難しいことは無かったです。</p><h1 id="サービストレースを行う"><a href="#サービストレースを行う" class="headerlink" title="サービストレースを行う"></a>サービストレースを行う</h1><p>簡単ですがトレースも行ってみました。<br>Stackdriver Traceの画面にて時系列順にLatencyがplotされます。</p><img src="/images/20200206/photo_20200206_06.png"><p>ちょうど点線のあたりでポチポチ画面を触っていたのですが、気になるほど高Latencyになってるわけではありませんでした。</p><p>処理ごとのLatencyも確認できます。</p><img src="/images/20200206/photo_20200206_07.png"><p>もちろん実装次第ではもっとブレークダウンした形でLatencyを参照できます。<br>こんなに簡単に見られることが分かってしまうと、OpenCensusを使った可視化にもっともっとチャレンジしたいという気持ちに包まれます！</p><h1 id="GKEクラスタに適用したIstio用MANIFESTについて"><a href="#GKEクラスタに適用したIstio用MANIFESTについて" class="headerlink" title="GKEクラスタに適用したIstio用MANIFESTについて"></a>GKEクラスタに適用したIstio用MANIFESTについて</h1><blockquote><p>READMEに従う形でMANIFESTをapply。ここの紐解きは後述(★)します。</p></blockquote><p>ここの布石を回収します。<br>applyしたのは<a href="https://github.com/GoogleCloudPlatform/microservices-demo/tree/master/istio-manifests" target="_blank" rel="noopener">ここ</a>にある3つのyamlでした。</p><p>1つ目は <code>frontend-gateway.yaml</code> です。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Gateway</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">frontend-gateway</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  selector:</span></span><br><span class="line"><span class="attr">    istio:</span> <span class="string">ingressgateway</span> <span class="comment"># use Istio default gateway implementation</span></span><br><span class="line"><span class="attr">  servers:</span></span><br><span class="line"><span class="attr">  - port:</span></span><br><span class="line"><span class="attr">      number:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">      protocol:</span> <span class="string">HTTP</span></span><br><span class="line"><span class="attr">    hosts:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">"*"</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">frontend-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  hosts:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"*"</span></span><br><span class="line"><span class="attr">  gateways:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">frontend-gateway</span></span><br><span class="line"><span class="attr">  http:</span></span><br><span class="line"><span class="attr">  - route:</span></span><br><span class="line"><span class="attr">    - destination:</span></span><br><span class="line"><span class="attr">        host:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">        port:</span></span><br><span class="line"><span class="attr">          number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>Istioを有効化すると自動的に <code>Ingress Gateway</code> が有効化されるのですが、具体的にGatewayがどのようなリクエストを受け付けるか定義しているのが <code>kind: Gateway</code> の箇所です。全てのHTTPリクエストを受け付ける形で定義されています。</p><p><code>Ingress Gateway</code> 自体の詳細は<a href="https://istio.io/docs/tasks/traffic-management/ingress/ingress-control/" target="_blank" rel="noopener">こちら</a>も参照してみてください。</p><p><code>kind: VirtualService</code> で定義されているのが、Gatewayを通過したリクエストの転送先です。 <code>destination</code> にて具体的な記載があり <code>frontend</code> と記載されているため今回のデモアプリではWeb画面を返却するWebサーバへルーティングされます。</p><p>Ingress GatewayのIPアドレスは以下のコマンドで取得可能です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ INGRESS_HOST=&quot;$(kubectl -n istio-system get service istio-ingressgateway \</span><br><span class="line">   -o jsonpath=&apos;&#123;.status.loadBalancer.ingress[0].ip&#125;&apos;)&quot;</span><br><span class="line">$ echo &quot;$INGRESS_HOST&quot;</span><br><span class="line">34.69.104.178</span><br></pre></td></tr></table></figure><p>2つ目は <code>frontend.yaml</code> です。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">VirtualService</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  hosts:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"frontend.default.svc.cluster.local"</span></span><br><span class="line"><span class="attr">  http:</span></span><br><span class="line"><span class="attr">  - route:</span></span><br><span class="line"><span class="attr">    - destination:</span></span><br><span class="line"><span class="attr">        host:</span> <span class="string">frontend</span></span><br><span class="line"><span class="attr">        port:</span></span><br><span class="line"><span class="attr">          number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><p>これの存在意義はしっかり腹落ちしきっていないのですが、①IstioのIngress gatewayを使ったアクセスと②LoadBalancerを使ったアクセスではHTTPレスポンスヘッダに差異がありました。</p><p>まずは①の場合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ curl -v http://34.69.104.178</span><br><span class="line">* Rebuilt URL to: http://34.69.104.178/</span><br><span class="line">* Trying 34.69.104.178...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to 34.69.104.178 (34.69.104.178) port 80 (#0)</span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; Host: 34.69.104.178</span><br><span class="line">&gt; User-Agent: curl/7.54.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; set-cookie: shop_session-id=e654493b-ee35-4c30-9cbd-c11b72f89a4d; Max-Age=172800</span><br><span class="line">&lt; date: Wed, 05 Feb 2020 07:23:26 GMT</span><br><span class="line">&lt; content-type: text/html; charset=utf-8</span><br><span class="line">&lt; x-envoy-upstream-service-time: 70</span><br><span class="line">&lt; server: istio-envoy</span><br><span class="line">&lt; transfer-encoding: chunked</span><br></pre></td></tr></table></figure><p>次は②の場合。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ curl -v http://35.232.239.135</span><br><span class="line">* Rebuilt URL to: http://35.232.239.135/</span><br><span class="line">* Trying 35.232.239.135...</span><br><span class="line">* TCP_NODELAY set</span><br><span class="line">* Connected to 35.232.239.135 (35.232.239.135) port 80 (#0) </span><br><span class="line">&gt; GET / HTTP/1.1 </span><br><span class="line">&gt; Host: 35.232.239.135 </span><br><span class="line">&gt; User-Agent: curl/7.54.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 200 OK </span><br><span class="line">&lt; set-cookie: shop_session-id=828d0405-1c54-4605-8156-6178c480540f; Max-Age=172800 </span><br><span class="line">&lt; date: Wed, 05 Feb 2020 07:24:24 GMT</span><br><span class="line">&lt; content-type: text/html; charset=utf-8 </span><br><span class="line">&lt; x-envoy-upstream-service-time: 32</span><br><span class="line">&lt; server: istio-envoy</span><br><span class="line">&lt; x-envoy-decorator-operation: frontend.default.svc.cluster.local:80/* </span><br><span class="line">&lt; transfer-encoding: chunked</span><br></pre></td></tr></table></figure><p>②のLoadBalancerを使ったアクセスの場合のみ <code>x-envoy-decorator-operation</code> というヘッダが含まれました。<a href="https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-decorator-operation" target="_blank" rel="noopener">Envoyの公式ドキュメント</a>にてこのヘッダについて言及されているのですが、おそらく内部ルーティングにおける名前解決のために本yamlをapplyしているものと思います。</p><p>3つ目は <code>whitelist-egress-googleapis.yaml</code><br>外部への通信を許可する設定です。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceEntry</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">whitelist-egress-googleapis</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  hosts:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"accounts.google.com"</span> <span class="comment"># Used to get token</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">"*.googleapis.com"</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - number:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">HTTP</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">  - number:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">HTTPS</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">https</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.istio.io/v1alpha3</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceEntry</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line"><span class="attr">  name:</span> <span class="string">whitelist-egress-google-metadata</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line"><span class="attr">  hosts:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">metadata.google.internal</span></span><br><span class="line"><span class="attr">  addresses:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="number">169.254</span><span class="number">.169</span><span class="number">.254</span> <span class="comment"># GCE metadata server</span></span><br><span class="line"><span class="attr">  ports:</span></span><br><span class="line"><span class="attr">  - number:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">http</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">HTTP</span></span><br><span class="line"><span class="attr">  - number:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">https</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">HTTPS</span></span><br></pre></td></tr></table></figure><p>※外部への通信に対する挙動はIstioのバージョンによって異なるので利用バージョンの<a href="https://istio.io/docs/tasks/traffic-management/egress/egress-control/" target="_blank" rel="noopener">公式ドキュメント</a>を確認してください。</p><blockquote><p>all outbound traffic from an Istio-enabled pod is redirected to its sidecar proxy by default</p></blockquote><p>執筆時点(2020.02.05)での最新バージョンは <code>1.4.3</code> で、デフォルトの挙動は「クラスタ外部への通信を許可する」となります。</p><p>ちなみに今回検証で利用したGKEクラスタにインストールしたIstioのバージョンは <code>1.1.7</code> で、正確には <code>Istio 1.1.17-gke.2</code> です。</p><p>以下のページにて、GKEクラスタのバージョンごとのIstioバージョンのマッピングが確認できます。<br><a href="https://cloud.google.com/istio/docs/istio-on-gke/versions" target="_blank" rel="noopener">https://cloud.google.com/istio/docs/istio-on-gke/versions</a></p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回は触りの部分でしたがGKEにおけるIstio活用について皆さんにお伝えできていれば幸いです。Traffic RoutingなどIstioの真髄とも言える部分への踏み込みはまた別に機会でやれたらと思います。</p><p>以上、GCP連載2日目でした。明日もお楽しみに！！</p><hr><p>連載リンク：</p><ul><li><a href="https://future-architect.github.io/tags/GCP%98A%8D%DA/">GCP連載企画</a></li></ul><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20200205/">GCP連載: Stackdriver Loggingへ良い感じのログ出力方法を考える</a></li><li><a href="https://future-architect.github.io/articles/20190604/">OpenCensus(OpenTelemetry)とは</a></li><li><a href="https://future-architect.github.io/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの村田です。&lt;a href=&quot;https://future-architect.github.io/tag
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Istio" scheme="https://future-architect.github.io/tags/Istio/"/>
    
      <category term="Kubernetes" scheme="https://future-architect.github.io/tags/Kubernetes/"/>
    
      <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>GCP連載: Stackdriver Loggingへ良い感じのログ出力方法を考える</title>
    <link href="https://future-architect.github.io/articles/20200205/"/>
    <id>https://future-architect.github.io/articles/20200205/</id>
    <published>2020-02-05T00:23:10.000Z</published>
    <updated>2020-02-06T03:22:21.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCPをテーマにした連載企画</a>を始めるということで、初回はStackdriver Loggingの活用方法をまとめます。1記事でまとめるには手が余るほど様々な機能があるため、初回はログの出力とビューア周りといったアプリケーション開発者視点での機能に絞って説明していきます。利用コードはGoで書かれていますが、汎用的な内容なので他の言語でもある程度通じる内容にしているつもりです。</p><p>連載企画は以下の10本をほぼ連日投稿する予定です。お楽しみに！</p><ol><li>Stackdriver Loggingへ良い感じのログ出力方法を考える（この記事です）</li><li>Istio on GKEではじめるサービスメッシュ</li><li>Cloud RunかCloud Functionsでウェブアプリケーションを動かしてみる</li><li>Life ScienceとかHealthcare</li><li>Secret ManagerとBerglas</li><li>Forseti Config Validator </li><li>s3→BigQuery</li><li>Firewall Ruleのタグ命名規則について考えて</li><li>初めてのGCP 画像AI(VISION API)をさわってみた</li><li>Cloud Deployment Manager</li></ol><h1 id="Stackdriver-Loggingについて"><a href="#Stackdriver-Loggingについて" class="headerlink" title="Stackdriver Loggingについて"></a>Stackdriver Loggingについて</h1><img src="/images/20200205/photo_20200205_01.png" class="img-small-size"><p><a href="https://cloud.google.com/logging" target="_blank" rel="noopener">Stackdriver Logging</a>は、GCPやAWS(!)からのログの収集、検索、分析、モニタリング、通知といった機能を持つGCPのマネージドサービスの1つです。ユーザからするとログの収集・蓄積し、それらを検索するためのログ基盤を自前で構築するのはかなり大変ですが、全てStackdriver Loggingサービス側が面倒見てくれるため、よりアプリケーションなど自分たちの関心事に集中できるようになります。</p><p>なお、2020/02/04時点ではログデータがプロジェクトごとに<a href="https://cloud.google.com/stackdriver/pricing" target="_blank" rel="noopener">最初の50 GiBが無料で、 その後は$0.50/GiB</a> の費用がかかります。</p><h1 id="Stackdriver-Loggingにログを流す方法"><a href="#Stackdriver-Loggingにログを流す方法" class="headerlink" title="Stackdriver Loggingにログを流す方法"></a>Stackdriver Loggingにログを流す方法</h1><p>Stackdriver Loggingへ直接ログデータを流し込むには、<a href="https://cloud.google.com/logging/docs/reference/librarie" target="_blank" rel="noopener">Logging Client Libraries</a>が存在します。こちらは内部的にStackdriver LoggingのWebAPIのエンドポイントをコールしてログデータを流し込んでくれます。</p><p>Logging Client Librariesを利用しなくても、CloudRunやFunction上にアプリケーションをデプロイし、それ上で標準出力/標準エラーでログを出せばStackdriver LoggingにGCPサービス側で連携することができます。CloudRunは標準出力/標準エラーに加えて、 <code>/var/log</code> やsyslog(<code>/dev/log</code>) に出力しても連携されます<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p><p>また、<a href="https://cloud.google.com/logging/docs/agent/" target="_blank" rel="noopener">Stackdriver Logging Agent</a> というfluentdベースのツールを導入することで、ローカルファイル出力されたログも収集させることができます。</p><p>今回はアプリケーションからLogging Client Librariesを <strong>利用しない</strong> ケースで調査しています。</p><h1 id="ログレベルについて"><a href="#ログレベルについて" class="headerlink" title="ログレベルについて"></a>ログレベルについて</h1><p>ログレベル（Stackdriver Loggingのコンテキストではseverity）によって、ビューアで表示する見た目を変更することができます。</p><img src="/images/20200205/photo_20200205_02.png" style="border:solid 1px #000000"><br><p>上から、DEBUG、INFO、WARN、ERROR、CRITICALです。Stackdriverは各種検索Filterも充実していますが、ログ量が増えるとちょっとしたことで見落としが発生しうるので、障害時の運用フローを整備する前にSeverityは正しく設定したほうが良いでしょう。</p><p>severity設定方法は、標準SDKを利用する以外だと、ログ出力レイアウトをJSONにすることが必要になります。</p><p>GoでJSON形式でログ出力と聞くと、最近では “rs/zerolog” か “uber-go/zap” がオススメですが、今回はわかりやすさ優先で心をこめてjson.Marshalする方式で説明を進めます。</p><p>JSONのログレベル項目は <code>severity</code> という名称です。</p><figure class="highlight go"><figcaption><span>ログレベル指定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Cloud FunctionのEndpoint関数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StartFunc</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(FmtJSON(<span class="string">"DEBUG"</span>, <span class="string">"debug log"</span>))</span><br><span class="line">fmt.Println(FmtJSON(<span class="string">"INFO"</span>, <span class="string">"info log"</span>))</span><br><span class="line">fmt.Println(FmtJSON(<span class="string">"WARN"</span>, <span class="string">"warn log"</span>))</span><br><span class="line">fmt.Println(FmtJSON(<span class="string">"ERROR"</span>, <span class="string">"error log"</span>))</span><br><span class="line">fmt.Println(FmtJSON(<span class="string">"FATAL"</span>, <span class="string">"fatal log"</span>))</span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSON変換用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FmtJSON</span><span class="params">(logLevel, message <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">entry := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"severity"</span>: logLevel,</span><br><span class="line"><span class="string">"message"</span>:  message,</span><br><span class="line">&#125;</span><br><span class="line">bytes, _ := json.Marshal(entry)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(bytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この<a href="https://cloud.google.com/functions/docs/deploying/filesystem" target="_blank" rel="noopener">CloudFunctionをデプロイ</a>し、テスト実行などから実行するとログ出力をお手軽に確かめることができます。</p><p>そうすると、ビューアの <code>textPayload</code> から <code>severity</code> の項目が除去され、上位のフィールドにセットされていることがわかると思います。</p><img src="/images/20200205/photo_20200205_03.png" style="border:solid 1px #000000"><p>ちなみに、<a href="https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logseverity" target="_blank" rel="noopener">利用できる Severityのレベルは以下の種類</a>です。</p><table><thead><tr><th>ENUM</th><th>Level</th></tr></thead><tbody><tr><td>DEFAULT</td><td>(0) The log entry has no assigned severity level.</td></tr><tr><td>DEBUG</td><td>(100) Debug or trace information.</td></tr><tr><td>INFO</td><td>(200) Routine information, such as ongoing status or performance.</td></tr><tr><td>NOTICE</td><td>(300) Normal but significant events, such as start up, shut down, or a configuration change.</td></tr><tr><td>WARNING</td><td>(400) Warning events might cause problems.</td></tr><tr><td>ERROR</td><td>(500) Error events are likely to cause problems.</td></tr><tr><td>CRITICAL</td><td>(600) Critical events cause more severe problems or outages.</td></tr><tr><td>ALERT</td><td>(700) A person must take an action immediately.</td></tr><tr><td>EMERGENCY</td><td>(800) One or more systems are unusable.</td></tr></tbody></table><p>どのレベルをどのような場合に出力するかはチームごとにコンセンサスを取ったほうが良いでしょう。</p><p>わたしたちは、だいたいDEBUG, INFO, WARNING, ERRORの4種類をアプリケーションコードで利用することが多いです。<br>開発環境ではDEBUG、プロダクション以上ではINFOレベルでログ出力させ、ERROR以上でSlackやメールに通知するようにしています。</p><h2 id="うまく行かないケース"><a href="#うまく行かないケース" class="headerlink" title="うまく行かないケース"></a>うまく行かないケース</h2><p>ログ出力内容をJSONではななくただのテキスト形式、例えば <code>fmt.Println(&quot;[INFO] call any method&quot;)</code>  にしてもStackdriverはseverityを認識してくれません。</p><figure class="highlight go"><figcaption><span>うまくSeverityが設定されないケース</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StartFunc</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">log.Printf(<span class="string">"[DEBUG] function"</span>)</span><br><span class="line">log.Printf(<span class="string">"[INFO] function"</span>)</span><br><span class="line">log.Printf(<span class="string">"[WARN] function"</span>)</span><br><span class="line">log.Printf(<span class="string">"[ERROR] function"</span>)</span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/20200205/photo_20200205_04.png" style="border:solid 1px #000000"><p>上記のキャプチャ画像を見るとseverity は空っぽなので、見た目も特に色が付いていません。<br>ログエントリをドリルダウンして、<code>severity</code> のレベルを確認しても空っぽです。</p><p>また、標準エラー出力にログを書き込むと、severityが変わってくると期待しましたが、こちらも変化なしです。</p><figure class="highlight go"><figcaption><span>標準エラー</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StartFunc</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"[INFO] info log"</span>)</span><br><span class="line">fmt.Fprintln(os.Stderr, <span class="string">"[ERROR] error log"</span>) <span class="comment">// 標準エラー</span></span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/20200205/photo_20200205_05.png" style="border:solid 1px #000000"><p>こういったログ出力ポリシーになっている場合は、文字列ではERRORというラベルが見えますが、ビューア上は何も変化しないため見落としに注意ください。</p><h1 id="ログ取得時間について"><a href="#ログ取得時間について" class="headerlink" title="ログ取得時間について"></a>ログ取得時間について</h1><p>ログレベルの <code>severity</code> 同様に <code>time</code> というJSONフィールドを設定すると、ログ上のタイムスタンプを上書きすることができます。指定しない場合はおそらく現在時刻が設定されます。</p><p>時刻フォーマットはprotobufでいう<a href="https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp" target="_blank" rel="noopener">Timestamp</a> で、RFC 3339に則れば良いとのことです。</p><figure class="highlight go"><figcaption><span>timeフィールドを追加</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StartFunc</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Println(FmtJSON(<span class="string">"INFO"</span>, <span class="string">"info log"</span>))</span><br><span class="line">fmt.Println(FmtJSON(<span class="string">"ERROR"</span>, <span class="string">"error log"</span>))</span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FmtJSON</span><span class="params">(logLevel, message <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">entry := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"severity"</span>: logLevel,</span><br><span class="line"><span class="string">"message"</span>:  message,</span><br><span class="line"><span class="string">"time"</span>:  time.Now().Format(time.RFC3339Nano), <span class="comment">// time項目を追加</span></span><br><span class="line">&#125;</span><br><span class="line">bytes, _ := json.Marshal(entry)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(bytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このようにすると、先程の severityと同様に、textPayloaのJSONからtimeフィールドが消え、上位のtimestampが書き換えられます。</p><img src="/images/20200205/photo_20200205_06.png" style="border:solid 1px #000000"><p>timeフィールドは任意項目ですが、ローカル実行での確認時にも便利なため特に理由がなければ付けたほうが良いと思います。</p><h1 id="Stackdriver-Traceとは"><a href="#Stackdriver-Traceとは" class="headerlink" title="Stackdriver Traceとは"></a>Stackdriver Traceとは</h1><img src="/images/20200205/trace.png" class="img-small-size"><p>Stackdriver Traceはアプリケーションからレイテンシ データを収集して Google Cloud Platform Console に表示する、分散トレースシステムです。<br><a href="https://cloud.google.com/trace/" target="_blank" rel="noopener">https://cloud.google.com/trace/</a></p><p>分散トレースって何？という方はこちら↓の記事を参考ください。<br><a href="https://future-architect.github.io/articles/20190604/">https://future-architect.github.io/articles/20190604/</a></p><p>分散トレースの機能の一つには、下図のようなウォーターフォールチャートを出すことができます。これを利用して、アプリケーションのボトルネック調査などに活かすことできます。</p><img src="/images/20200205/photo_20200205_07.png" style="border:solid 1px #000000"><h2 id="Stackdriver-TraceとStackdriver-Loggingの連携"><a href="#Stackdriver-TraceとStackdriver-Loggingの連携" class="headerlink" title="Stackdriver TraceとStackdriver Loggingの連携"></a>Stackdriver TraceとStackdriver Loggingの連携</h2><p>連携の前準備として、アプリケーションのロールに <strong>Cloud Trace エージェント</strong> のロールが必須になります。</p><p>コードはまず、OpenCensus経由でStackdriver Traceに連携します。</p><p><code>trace.ApplyConfig(trace.Config{DefaultSampler: trace.AlwaysSample()})</code> はテスト用に毎回トレースを行うような指定です。通常は毎回実施するとコストが高いため、動作確認時以外は設定しないほうが良いと思います。</p><figure class="highlight go"><figcaption><span>初期化処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client *http.Client</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">exporter, err := stackdriver.NewExporter(stackdriver.Options&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">trace.RegisterExporter(exporter)</span><br><span class="line">trace.ApplyConfig(trace.Config&#123;DefaultSampler: trace.AlwaysSample()&#125;) <span class="comment">// テスト用途</span></span><br><span class="line"></span><br><span class="line">client = &amp;http.Client&#123;</span><br><span class="line">Transport: &amp;ochttp.Transport&#123;</span><br><span class="line">Propagation: &amp;propagation.HTTPFormat&#123;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cloud Functionの途中でHTTPリクエストを発行するものとして、http.Clientも同時に生成しています。</p><p>続いてCloud Functionのメイン処理です。<code>trace.StartSpan(r.Context(), &quot;root function&quot;)</code> でSpanという、計測の単位を作成できます。処理の途中で<code>init</code> で生成した <code>http.Client</code> を利用すると、OpenCensusライブラリ側がHTTP Request/Responseをキャプチャして、 Stackdriver Trace側に送信してくれます。</p><figure class="highlight go"><figcaption><span>Cloud_Functionのメイン処理</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">StartFunc</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">sctx, span := trace.StartSpan(r.Context(), <span class="string">"root function"</span>)</span><br><span class="line"><span class="keyword">defer</span> span.End()</span><br><span class="line"></span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">200</span>) <span class="comment">// 何かしらの処理の代替にSleepする</span></span><br><span class="line"></span><br><span class="line">req, _ := http.NewRequest(<span class="string">"GET"</span>, <span class="string">"https://www.future.co.jp"</span>, <span class="literal">nil</span>)</span><br><span class="line">req = req.WithContext(sctx)</span><br><span class="line">resp, err := client.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">fmt.Println(FmtJSON(<span class="string">"INFO"</span>, <span class="string">"do http get request"</span>))</span><br><span class="line"><span class="keyword">if</span> _, err := ioutil.ReadAll(resp.Body); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">w.WriteHeader(http.StatusOK)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Stackdriver Trace側のログのリンクを見ると、Stackdriver Loggingでログを確認することができます。</p><img src="/images/20200205/photo_20200205_08.png" style="border:solid 1px #000000"><p>リンクをクリックすると、Stackdriver Logging側の該当するログに遷移できます。</p><img src="/images/20200205/photo_20200205_09.png" style="border:solid 1px #000000"><p>今回のサンプルコードには記載していないですが、ログ側に検索条件や処理件数を出力しておくと、その処理時間が妥当なのか、想定外なのか判断ができるため、性能調査などを行う場合には非常に有用だと思います。</p><h2 id="GCP以外でアプリケーションを動かす場合"><a href="#GCP以外でアプリケーションを動かす場合" class="headerlink" title="GCP以外でアプリケーションを動かす場合"></a>GCP以外でアプリケーションを動かす場合</h2><p>GCP以外のリソース上でアプリケーションを動かす場合は、<code>trace</code> と、<code>spanId</code> のフィールドを利用するとStackdriver TraceとLoggingを紐付けることができるようです。その場合はログ出力部分を以下のように書き換えれば良いと思います。 <strong>こちらはまだ未検証なので参考程度にお願いします。</strong></p><p><a href="https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry" target="_blank" rel="noopener">https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry</a></p><figure class="highlight go"><figcaption><span>JSONログ出力部分</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FmtJSON</span><span class="params">(logLevel, message <span class="keyword">string</span>, span *trace.Span)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">entry := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"severity"</span>: logLevel,</span><br><span class="line"><span class="string">"message"</span>:  message,</span><br><span class="line"><span class="string">"time"</span>:     time.Now().Format(time.RFC3339Nano),</span><br><span class="line"><span class="string">"trace"</span>:    span.SpanContext().TraceID.String(), <span class="comment">// 追加</span></span><br><span class="line"><span class="string">"spanId"</span>:   span.SpanContext().SpanID.String(),  <span class="comment">// 追加</span></span><br><span class="line">&#125;</span><br><span class="line">bytes, _ := json.Marshal(entry)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(bytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h1><p>Stackdriverの <a href="https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry" target="_blank" rel="noopener">LogEntry</a> のドキュメントを読むと、他にも <code>labels</code> や <code>traceSampled</code> などのオプションが存在します。  <code>traceSampled</code> はデフォルト false ですが、 trueにするとサンプリングされて Stackdriver Trace側に連携されるようです。このあたりの使い分けは別途調査したいと思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>Stackdriver Loggingで視認性を上げるためには、JSON形式でログを出力しseverityを設定する</li><li>time項目も設定しておくと良い</li><li>Stackdriver Traceを設定するとパフォーマンス可視化とログが紐づくと捗るのでオススメ</li></ul><p>話しが少しそれますが、一度Stackdriver Traceでビジュアライズを始めるとのウォーターフォールビューの見た目にこだわりたくなります。これらをうまく出すコツについてはまた別途ブログ化したいと思います。</p><hr><p>連載リンク：</p><ul><li><a href="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/">GCP連載企画</a></li></ul><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20190604/">OpenCensus(OpenTelemetry)とは</a></li><li><a href="https://future-architect.github.io/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">CloudRunのその仕様はドキュメント読むまで気が付かなかったです。https://cloud.google.com/run/docs/logging</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://future-architect.github.io/tags/GCP%E9%80%A3%
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
      <category term="Monitoring" scheme="https://future-architect.github.io/tags/Monitoring/"/>
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="OpenCensus" scheme="https://future-architect.github.io/tags/OpenCensus/"/>
    
      <category term="GCP連載" scheme="https://future-architect.github.io/tags/GCP%E9%80%A3%E8%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>これさえあればサービス構成図がだいたい描けるアイコンセットを公開します！</title>
    <link href="https://future-architect.github.io/articles/20200204/"/>
    <id>https://future-architect.github.io/articles/20200204/</id>
    <published>2020-02-03T23:12:14.000Z</published>
    <updated>2020-02-03T23:26:18.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。木村です。<br>以前、<a href="https://future-architect.github.io/articles/20160721/">『これさえあればシステム構成図がだいたい描けるアイコンセットを公開します！』</a>という記事を公開いたしました。<br>もしご利用いただけていれば、嬉しい限りです！</p><h1 id="サービス構成図とは"><a href="#サービス構成図とは" class="headerlink" title="サービス構成図とは"></a>サービス構成図とは</h1><p>昨今はDX・UX・IoTなどの言葉も浸透し、システムと生活の距離がどんどん近くなってきています。<br>スライドにおいても、システムにとどまらず、サービス全体の構成図を作成する機会が、より一層増えていることを実感しています。</p><p>サービス構成図は、システム構成に加え、様々な立場のプレースホルダーやクライアント機器、さらに物理的な場所や移動手段の概念が含まれます。<br>これらのアイコンを都度探し、思ったようなモチーフにたどり着くまでには、予想外の手間がかかってしまうこともあります。</p><p>・・・ということで、「これさえあればサービス構成図がだいたい描けるアイコンセット」を公開します！</p><h1 id="「これさえあればサービス構成図がだいたい描けるアイコンセット」の概要"><a href="#「これさえあればサービス構成図がだいたい描けるアイコンセット」の概要" class="headerlink" title="「これさえあればサービス構成図がだいたい描けるアイコンセット」の概要"></a>「これさえあればサービス構成図がだいたい描けるアイコンセット」の概要</h1><p>アイコンはPNG形式、SVG形式で公開しています。<br>全部で107種類（うち、色差分39種類）、サイズは500×500ピクセルとなっています。</p><img src="/images/20200204/list.png"><p>＞＞ <a href="https://github.com/future-architect/icons/releases/download/v_1.1.0/v_1.1.0-icons.zip" target="_blank" rel="noopener">ダウンロード</a></p><p>この 作品 は <a href="https://creativecommons.org/publicdomain/zero/1.0/deed.ja" target="_blank" rel="noopener">CC0 1.0</a>の下に提供されています。<br>ご自由にお使い下さい！</p><p>なお、アイコンはGithubで管理しています。<br><a href="https://github.com/future-architect/icons" target="_blank" rel="noopener">https://github.com/future-architect/icons</a></p><p>アイコン探しの手間を省き、少しでもみなさまに貢献できれば幸いです。</p><h1 id="Contribution"><a href="#Contribution" class="headerlink" title="Contribution"></a>Contribution</h1><p>このアイコン作成には、同僚の千葉さん,織田さん,加部さん,矢野さんに多大な協力をいただきました。</p><p>重ね重ねありがとうございます！</p><p>また、前回にTwitterなどSNSで使っているよなどの報告は非常に嬉しかったです。ぜひ今後もよろしくおねがいします。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。木村です。&lt;br&gt;以前、&lt;a href=&quot;https://future-architect.github.io/
      
    
    </summary>
    
      <category term="Design" scheme="https://future-architect.github.io/categories/Design/"/>
    
    
      <category term="icon" scheme="https://future-architect.github.io/tags/icon/"/>
    
  </entry>
  
  <entry>
    <title>チームで機能設計するためのPlantUML標準化</title>
    <link href="https://future-architect.github.io/articles/20200203/"/>
    <id>https://future-architect.github.io/articles/20200203/</id>
    <published>2020-02-03T00:16:35.000Z</published>
    <updated>2020-02-03T00:41:47.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>現在所属しているプロジェクトではWebAPIやバッチ処理の設計の一環としてPlantUMLを利用しています。効率よく品質高くアウトプットを出すためには、プログラミング言語に対してコーディング規約があるように、UMLに対してもチームで設計するにあたり一定のルールを決める必要があります。<br>そこでプロジェクト内のPlantUMLを使用するうえでのガイドラインやルールをまとめる機会があり、せっかくなのでそれを記事化します。</p><h2 id="記事のゴール"><a href="#記事のゴール" class="headerlink" title="記事のゴール"></a>記事のゴール</h2><ul><li>シーケンス図設計におけるPlantUMLの標準化</li><li>必要最低限のルールだけに絞ってチーム設計の生産性と品質を上げる</li></ul><h2 id="記事の前提"><a href="#記事の前提" class="headerlink" title="記事の前提"></a>記事の前提</h2><ul><li>ルールの想定の利用シーン：<br>チームで大量生産する業務機能の処理フローを表現するために使う場合を想定。<br>また、この記事に記載されているルールはRDBを中心的に使用したAPI処理やバッチ処理等を念頭に置き決められたものです。</li><li>ルールの想定の効果：<br>PlantUMLを標準化/シンプル化することで設計者も、レビュアも少ないインプットで品質高く設計/レビュできようになる想定。</li><li>ルールがカバーしている図の種類：<br>PlantUMLで様々な種類の図が作成できますがこの記事のスコープはシーケンス図に限った話になります。</li><li>ルールに沿って作成されるシーケンス図に期待される最低限の役割：<ul><li>一目で機能全体の流れと大まかなロジックがわかる。</li><li>デバッグ、障害対応やパフォーマンスチューニングの第一ステップとして即座に調査ターゲットを絞り、問題の詳細設計やソースコードに導くヒントを与えてくれる。</li></ul></li></ul><h2 id="書いてない内容"><a href="#書いてない内容" class="headerlink" title="書いてない内容"></a>書いてない内容</h2><ul><li>PlantUMLってなに？→ <a href="https://plantuml.com/ja/" target="_blank" rel="noopener">https://plantuml.com/ja/</a></li><li>PlantUMLで何ができる？→ <a href="http://plantuml.com/ja/guide" target="_blank" rel="noopener">http://plantuml.com/ja/guide</a></li><li>そもそもなぜUML？→ <a href="https://qiita.com/laqiiz/items/fb7ad9dfb7430dd08455" target="_blank" rel="noopener">https://qiita.com/laqiiz/items/fb7ad9dfb7430dd08455</a></li><li>PlantUMLのセットアップ手順は？→ <a href="https://qiita.com/couzie/items/9dedb834c5aff09ea7b2" target="_blank" rel="noopener">https://qiita.com/couzie/items/9dedb834c5aff09ea7b2</a><br><br>(セットアップの際はJAVAの環境変数の設定は忘れずに！参考：<a href="https://eng-entrance.com/java-install-env" target="_blank" rel="noopener">https://eng-entrance.com/java-install-env</a>)<br>気軽にPlantUMLを使用したい方はブラウザからでもできます： <a href="https://www.planttext.com/" target="_blank" rel="noopener">https://www.planttext.com/</a>   </li></ul><h2 id="書いてる内容"><a href="#書いてる内容" class="headerlink" title="書いてる内容"></a>書いてる内容</h2><ul><li>このルールに沿ってPlantUMLでシーケンス図を楽しく書いていきましょう！</li></ul><h2 id="puファイルの基本"><a href="#puファイルの基本" class="headerlink" title="puファイルの基本"></a>puファイルの基本</h2><p>PlantUMLのファイル(pu)の中身は大体こんな感じです。<br>大きく、色等といった見た目を決める部分（L39より上）と、実際のシーケンスのフローを示す部分（L39より下）に分けられます。<br><img src="/images/20200203/photo_20200203_01.png" class="img-middle-size"><br>なお、見た目を決める部分は別のコードは一つのconfigファイルに統一させることもできますが、ここはチームの管理の仕方に合わせてやりましょう。</p><p>上記のコードをレンダリングすると下記のような綺麗な図になります。<br><img src="/images/20200203/photo_20200203_02.png" class="img-middle-size"></p><h2 id="基本的な処理の書き方"><a href="#基本的な処理の書き方" class="headerlink" title="基本的な処理の書き方"></a>基本的な処理の書き方</h2><h3 id="矢印"><a href="#矢印" class="headerlink" title="矢印"></a>矢印</h3><p>処理が発生する箇所は矢印で表します。</p><ul><li><strong>シングルヘッド</strong> - 処理がアクターを跨いで一方的になっているもの<br>（例：リクエスト送信、Queueに詰める処理等）</li></ul><figure class="highlight plain"><figcaption><span>single_head_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Client -&gt; Backend: Request</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_03.png" class="img-small-size"><ul><li><strong>ダブルヘッド</strong> - 処理がアクターを跨いで双方的になっているもの<br><br>（例：マスターチェック、DBアクセス処理等）</li></ul><figure class="highlight plain"><figcaption><span>double_head_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Backend &lt;-&gt; RDB: Master Check\n[Store Control Master]</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_04.png" class="img-small-size"><ul><li><strong>リターニング</strong> - 処理がアクターを跨がないもの<br><br>（例：DBにアクセスせずJava内で完結するチェック処理等）</li></ul><figure class="highlight plain"><figcaption><span>returning_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Backend -&gt; Backend: Add select result into Error List</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_05.png" class="img-small-size"><h3 id="イベント"><a href="#イベント" class="headerlink" title="イベント"></a>イベント</h3><ul><li><strong>note</strong> - 大きなイベントごとにnote毎で分けて見やすくします<br>（例：Parameter Check &gt; Update t_status_history<blockquote><p>Process End）</p></blockquote></li></ul><figure class="highlight plain"><figcaption><span>note_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">note over Backend: 1. Parameter Check</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_06.png" class="img-small-size"><h3 id="分岐"><a href="#分岐" class="headerlink" title="分岐"></a>分岐</h3><p>シーケンス図内で分岐や条件付き処理を表したい場合は分岐の処理毎にAltで囲みます。</p><ul><li><strong>alt</strong> - いわゆるifのような条件付き処理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Backend-&gt;Backend: Check A and B</span><br><span class="line">alt If A</span><br><span class="line">    Backend -&gt; Backend: Add x to Error List</span><br><span class="line">end</span><br><span class="line">alt If B</span><br><span class="line">    Backend &lt;-&gt; RDB: Insert x to A table</span><br><span class="line">end</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_07.png" class="img-small-size"><ul><li><strong>alt - else ①</strong> - いわゆるif-elseのような分岐処理</li></ul><figure class="highlight plain"><figcaption><span>alt_else_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Backend-&gt;Backend: Check A and B</span><br><span class="line">alt If A</span><br><span class="line">    Backend -&gt; Backend: Add x to Error List</span><br><span class="line">else</span><br><span class="line">    Backend &lt;-&gt; RDB: Insert x to A table</span><br><span class="line">end</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_08.png" class="img-small-size"><ul><li><strong>alt - else ②</strong> - いわゆるif-else if-elseのような分岐処理</li></ul><figure class="highlight plain"><figcaption><span>alt_else_ifexample.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Backend -&gt; Backend: Check something</span><br><span class="line">alt If A</span><br><span class="line">    Backend -&gt; Backend: Add x to Error List</span><br><span class="line">else If B</span><br><span class="line">    Backend &lt;-&gt; RDB: Insert x to A table</span><br><span class="line">else</span><br><span class="line">    Backend -&gt; Client: Response status code 422</span><br><span class="line">end</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_09.png" class="img-small-size"><h3 id="ループ"><a href="#ループ" class="headerlink" title="ループ"></a>ループ</h3><p>loopが発生した場合はloopで囲みます。<br>loopの右にはループを回す単位をFor Eachで記載する</p><ul><li><strong>loop</strong></li></ul><figure class="highlight plain"><figcaption><span>loop_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loop for each EPC</span><br><span class="line">  Backend &lt;-&gt; RDB: Insert\n[t_sales] </span><br><span class="line">end</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_13.png" class="img-small-size"><h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><ul><li><strong>採番のルール</strong><br>殆どの場合、シーケンス図はスタンドアロンではなく、一つ一つの処理の詳細（データアクセス定義、チェック定義、DB変更定義等）を図以外の場所に記載しますよね。そういった設計書内の詳細の記載とマッピングするために一個一個のフローステップにプロセスIDを付けます。プロセスIDの採番は下記のルールで実施します：<ul><li><font color="YellowGreen">処理が複数あった場合、階層が同じ処理は処理が発生する順に番号を振っていく</font></li><li><font color="LightCoral">直前の処理からaltで階層が深くなるたびにIDの桁に1を足し、１から始める</font></li><li><font color="LightSkyBlue">直前の処理からaltで階層が深くなると同時に、その階層に複数処理があった場合、IDの桁に2桁足す（深くなった理由での一桁と複数処理を分けるためのもう一桁）</font></li></ul></li></ul><figure class="highlight plain"><figcaption><span>id_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">note over Backend: 2. Update Family Tree</span><br><span class="line">loop for each New Member</span><br><span class="line">    alt If Update Pattern = Any member</span><br><span class="line">        Backend -&gt; Backend: 2.1. Check DNA</span><br><span class="line">        alt If DNA test returns success</span><br><span class="line">            Backend &lt;-&gt; RDB: 2.1.1.1. Update\n[t_parent]</span><br><span class="line">            Backend &lt;-&gt; RDB: 2.1.1.2. Update\n[t_child]</span><br><span class="line">            Backend &lt;-&gt; RDB: 2.1.1.3. Update\n[t_grand_child]</span><br><span class="line">        end</span><br><span class="line">        alt If DNA test returns failure</span><br><span class="line">            Backend -&gt; Backend: 2.1.2. Add Member into Error List</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_11.png" class="img-middle-size"><ul><li><strong>改行</strong><br>文字の記載等で改行したい場合は<code>\n</code>を使いましょう。</li></ul><figure class="highlight plain"><figcaption><span>return_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loop for each EPC</span><br><span class="line">  Backend &lt;-&gt; RDB: Insert\n[t_sales] </span><br><span class="line">end</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_13.png" class="img-small-size"><ul><li><strong>テーブル名</strong><br>DBアクセスが発生した場合はできる限り対象テーブルやデータを記載しましょう。<br><br>テーブル名は[ ]に入れましょう。</li></ul><figure class="highlight plain"><figcaption><span>table_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loop for each EPC</span><br><span class="line">  Backend &lt;-&gt; RDB: Insert\n[t_sales] </span><br><span class="line">end</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_13.png" class="img-small-size"><ul><li><strong>エラー</strong><br>エラーやエクセプションはAltで表現しましょう。</li></ul><figure class="highlight plain"><figcaption><span>error_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alt Error</span><br><span class="line">    Backend -&gt; Client: 1.4. Response status code 402</span><br><span class="line">end</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_14.png" class="img-small-size"><ul><li><strong>ロック</strong><br>ロックする場合は下記のように<code>Select Lock for [ロック解除の処理] [ロックするテーブル]</code>と記載する。<br>ただロックに関してはプロジェクトのロック方式などにもよるのでここはフレキシブルに。</li></ul><figure class="highlight plain"><figcaption><span>lock_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Backend &lt;-&gt; RDB: 2.2.1. Select\nLock for Update at 2.2.4\n[t_sales_header]</span><br></pre></td></tr></table></figure><img src="/images/20200203/photo_20200203_15.png" class="img-small-size"><ul><li><p><strong>インデント</strong><br>インデントは基本しなくてもコードはレンダリングされるが、他の言語同様読みやすいように入れましょう。</p></li><li><p><strong>色</strong><br>余談ですがPlantUMLのデフォルトカラーって良いと思う人、世の中あまりいないですよね。<br>これはもう、目に良いビジュアルに自分で変えていくしかないです。<br>色を変えるだけでだいぶ印象も変わってきます。ちなみに私のお気に入りは：</p><ul><li>パレット①：<br>「puファイルの基本」で使ったサンプル図で使っているものです。グレーをベースにカラフルなアクセント、トイライクで見やすい（個人的な意見）パレットを作りました。<br><ul><li><code>#FFFFFF</code><span class="inline-code-color" style="background-color: #FFFFFF;"></span>（font1）</li><li><code>#DDDDDD</code><span class="inline-code-color" style="background-color: #DDDDDD;"></span>（background）</li><li><code>#454645</code><span class="inline-code-color" style="background-color: #454645;"></span>（font2、line）</li><li><code>#FF6F61</code><span class="inline-code-color" style="background-color: #FF6F61;"></span>（participant）</li><li><code>#98DDDE</code><span class="inline-code-color" style="background-color: #98DDDE;"></span>（database)</li><li><code>#FFDA29</code><span class="inline-code-color" style="background-color: #FFDA29;"></span>（entity）</li><li><code>#98FB98</code><span class="inline-code-color" style="background-color: #98FB98;"></span>（note）</li></ul></li><li>パレット②：<br>「基本的な処理の書き方」で使ったサンプル図で使っているものです。使用する色が少ないなためシンプルでクリーンな資料と相性が良いです。バックグラウンドも白く、シーケンス図をWeb等に埋め込んで使う場合に適しており、ページと一体化して見えるので統一感があっておすすめです。<br><ul><li><code>#FFFFFF</code><span class="inline-code-color" style="background-color: #FFFFFF;"></span>（font1, background）</li><li><code>#696969</code><span class="inline-code-color" style="background-color: #696969;"></span>（line）</li><li><code>#454645</code><span class="inline-code-color" style="background-color: #454645;"></span>（font2）</li><li><code>#FF6347</code><span class="inline-code-color" style="background-color: #FF6347;"></span>（participant）</li><li><code>#00FFFF</code><span class="inline-code-color" style="background-color: #00FFFF;"></span>（database）</li><li><code>#7FFFD4</code><span class="inline-code-color" style="background-color: #7FFFD4;"></span>（note）</li></ul></li><li>デフォルト：<br>もちろん、カラーにこだわりのない方はデフォルトでトラディショナルな白黒黄のコーディネートにすることができます。</li></ul></li></ul><p>（左から右：デフォルト、パレット②、パレット①）<br><img src="/images/20200203/photo_20200203_16.png"></p><h3 id="あえてルール化しなかったもの"><a href="#あえてルール化しなかったもの" class="headerlink" title="あえてルール化しなかったもの"></a>あえてルール化しなかったもの</h3><p>はじめにも記載されている通り、記事のゴールとして「必要最低限のルールだけに絞ってチーム設計の生産性と品質を上げる」があります。上記で記載されたルールはシーケンス図が期待される必要最低限の役割を果たすために含めてたものです。したがって分岐やループ等、処理の柱となるロジックやパフォーマンスを表すものは記載必須としています。一方で、シンプル化のため、下記のものはあえてルールとしていません。</p><ul><li><p><strong>ライフライン</strong><br>ライフラインの活性化と破壊はシンプル化のため、あえて使いません。<br>こちらは<code>activate</code>、<code>deactivate</code>や<code>destroy</code>で表現できるので、必要に応じて。</p><img src="/images/20200203/photo_20200203_17.png" class="img-small-size"></li><li><p><strong>線とアローヘッドの使い分け</strong><br>PlantUMLでは様々なアローヘッドや線の種類を指定することができます。「レスポンスは点線にする」等、世間ではアローヘッドと線の種類に関するいろんな使い分けが存在していますが、このルールではシンプル化のため、意識しません。こちらも必要に応じてやりましょう。</p><img src="/images/20200203/photo_20200203_18.png" class="img-very-small-size"></li></ul><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>勝手にルールを決めちゃいましたがルールの中身よりもルールを決めることが大事だと思います。<br>これからPlantUMLを利用してチームで設計を始めたいけどルールを決めるのが面倒くさい方々、この記事をスタートラインにしてみてはいかが。</p><h2 id="参考＆リンク"><a href="#参考＆リンク" class="headerlink" title="参考＆リンク"></a>参考＆リンク</h2><ul><li><a href="https://plantuml.com" target="_blank" rel="noopener">https://plantuml.com</a></li><li><a href="https://qiita.com/laqiiz/items/fb7ad9dfb7430dd08455" target="_blank" rel="noopener">https://qiita.com/laqiiz/items/fb7ad9dfb7430dd08455</a></li><li><a href="https://qiita.com/couzie/items/9dedb834c5aff09ea7b2" target="_blank" rel="noopener">https://qiita.com/couzie/items/9dedb834c5aff09ea7b2</a></li><li><a href="https://eng-entrance.com/java-install-env" target="_blank" rel="noopener">https://eng-entrance.com/java-install-env</a>)</li><li><a href="https://www.planttext.com/" target="_blank" rel="noopener">https://www.planttext.com/</a></li><li><a href="https://future-architect.github.io/articles/20190821/">https://future-architect.github.io/articles/20190821/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;現在所属しているプロジェクトではWebAPIやバッチ処理の設計の一環としてPlantUMLを利用しています。効率よく品質高く
      
    
    </summary>
    
      <category term="Design" scheme="https://future-architect.github.io/categories/Design/"/>
    
    
      <category term="PlantUML" scheme="https://future-architect.github.io/tags/PlantUML/"/>
    
      <category term="UML" scheme="https://future-architect.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>AirflowのTips 11選</title>
    <link href="https://future-architect.github.io/articles/20200131/"/>
    <id>https://future-architect.github.io/articles/20200131/</id>
    <published>2020-01-31T02:28:46.000Z</published>
    <updated>2020-01-31T02:45:27.484Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>Airflow 利用にあたって知っておいたほうが良いんじゃないかなと思う情報をまとめました。いわゆるハマりどころです。  </p><p>Airflow 自体の基本的な説明(用語,DAG 定義方法,etc..) は省略しています。</p><p>基礎参照先</p><ul><li><a href="https://airflow.apache.org/docs/stable/tutorial.html" target="_blank" rel="noopener">公式 Tutorial</a></li><li><a href="https://github.com/puckel/docker-airflow" target="_blank" rel="noopener">Dockerfile</a></li></ul><h1 id="バージョン"><a href="#バージョン" class="headerlink" title="バージョン"></a>バージョン</h1><ul><li>Airflow 1.10.4</li><li>Postgres 10.7</li></ul><h1 id="Tips-11-選"><a href="#Tips-11-選" class="headerlink" title="Tips 11 選"></a>Tips 11 選</h1><ul><li><a href="#1-日時">1. 日時</a></li><li><a href="#2-リトライ">2. リトライ</a></li><li><a href="#3-start_date-の変更ができない">3. start_date の変更ができない</a></li><li><a href="#4-開始日時を過去日時にすると過去ジョブが自動実行される">4. 開始日時を過去日時にすると過去ジョブが自動実行される</a></li><li><a href="#5-context-の活用">5. context の活用</a></li><li><a href="#6-macros">6. Macros</a></li><li><a href="#7-task-間で値を受け渡す方法">7. Task 間で値を受け渡す方法</a></li><li><a href="#8-dags-ディレクトリ以下のディレクトリの切り方">8. dags ディレクトリ以下のディレクトリの切り方</a></li><li><a href="#9-ui-の表示が-utc-固定">9. UI の表示が UTC 固定</a></li><li><a href="#10-web-ui-上からジョブのパラメータを渡せない">10. Web UI 上からジョブのパラメータを渡せない</a></li><li><a href="#11-dagtask-の同時実行数制御">11. DAG/Task の同時実行数制御</a></li></ul><h2 id="1-日時"><a href="#1-日時" class="headerlink" title="1. 日時"></a>1. 日時</h2><p>Airflow は基本的には、日時のみを変数として DAG を実行します。<br>日時にも種類があるため、各日時について整理します。</p><h3 id="execution-date"><a href="#execution-date" class="headerlink" title="execution_date"></a>execution_date</h3><p>実行日時。いつ実行されても、リトライで実行されても変わることのない日時。<br>特定日時のデータを取得したいといったケースの日時指定は、実行日時を利用しておくと良いです。</p><h3 id="start-date"><a href="#start-date" class="headerlink" title="start_date"></a>start_date</h3><p>DAG の開始日時。実際に DAG が動作した日時。<br>リトライ時にはリトライした日時になります。<br>DAG ファイル上では特に利用しないほうが良いです。</p><h3 id="end-date"><a href="#end-date" class="headerlink" title="end_date"></a>end_date</h3><p>DAG の終了日時。実際に DAG が動作した日時。</p><h3 id="schedule-interval"><a href="#schedule-interval" class="headerlink" title="schedule_interval"></a>schedule_interval</h3><p>DAG の実行間隔。</p><p>上記の用語を元に、初回の Dag 実行までを時系列で追いかけてみます。</p><h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><ul><li><code>2020/01/29 15:30:00+09:00</code> よりスケジュール実行</li><li>実行間隔は <code>1min</code></li></ul><ol><li><p>DAG ファイルを作成<br> ./dag 配下に配置</p>  <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">dag = DAG(</span><br><span class="line">    <span class="string">'blog_example_execution_date'</span>,</span><br><span class="line">    schedule_interval=timedelta(minutes=<span class="number">1</span>),</span><br><span class="line">    start_date=datetime(</span><br><span class="line">        <span class="number">2020</span>, <span class="number">1</span>, <span class="number">29</span>, <span class="number">15</span>, <span class="number">30</span>, tzinfo=pendulum.timezone(<span class="string">'Asia/Tokyo'</span>)), <span class="comment"># 明示的にタイムゾーンを指定</span></span><br><span class="line">)</span><br><span class="line">  </span><br><span class="line">BashOperator(</span><br><span class="line">    task_id=<span class="string">'test'</span>,</span><br><span class="line">    dag=dag,</span><br><span class="line">    bash_command=<span class="string">'echo 1'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>Web UI 上から <code>OFF</code> -&gt; <code>ON</code> に変更<ul><li><img src="/images/20200131/1.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li></ol><ol start="3"><li><p>start_date に指定した時刻には <strong>何も起きない</strong></p></li><li><p>start_date + schecule_interval 経過後に 初回 DAG 実行<br>各パラメータの日時は以下のようになります。(※ 各パラメータの取得方法は <code>5</code> で後述)<br>start_date と execution_date がずれていることがわかります。</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">execution_date = 2019/01/29 15:30:00 +09:00</span><br><span class="line">  =&gt; DAG に指定した start_date と同一</span><br><span class="line">  </span><br><span class="line">start_date = 2019/01/29 15:31:00 +09:00</span><br><span class="line">  =&gt; DAG に指定した start_date に schedule_interval を足した日時と同一</span><br></pre></td></tr></table></figure></li><li><p>2 回目以降は、schedule_interval 経過後に順次実行</p></li></ol><h2 id="2-リトライ"><a href="#2-リトライ" class="headerlink" title="2. リトライ"></a>2. リトライ</h2><p>基本的には Task の状態を <code>Clear</code> とすることで、リトライができます。</p><h4 id="Tree-View-より指定"><a href="#Tree-View-より指定" class="headerlink" title="Tree View より指定"></a>Tree View より指定</h4><ol><li><code>○</code> を Click<ul><li><img src="/images/20200131/2.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li></ol><ol start="2"><li>Clear を指定<ul><li><img src="/images/20200131/3.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li></ol><ol start="3"><li>Clear する Task の一覧が表示され OK を 指定する<ul><li><img src="/images/20200131/4.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li></ol><ol start="4"><li>Clear (=リトライ) される<ul><li><img src="/images/20200131/5.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li></ol><h3 id="Task-Instances-から指定"><a href="#Task-Instances-から指定" class="headerlink" title="Task Instances から指定"></a>Task Instances から指定</h3><p>基本的には、 <code>Tree View</code> の画面より指定してリトライする方法が簡単なのですが、いくつかのケースにて、下記の画面が出てきて失敗するケースがあります。<br>(筆者の環境では Task 指定の Clear の際に失敗します。)</p><img src="/images/20200131/6.png" class="img-middle-size"><p>こちらが発生した際は、他の手段を利用して、Clear することができます。</p><ol><li><code>Browse &gt; Task Instances</code> を指定<ul><li><img src="/images/20200131/7.png" class="img-middle-size"></li></ul></li></ol><ol start="2"><li>対象 Task を検索<ul><li><img src="/images/20200131/8.png" class="img-middle-size"></li></ul></li></ol><ol start="3"><li><p>対象 Task を指定して Clear</p><ul><li><img src="/images/20200131/9.png" class="img-middle-size"></li></ul></li><li><p>Clear 完了</p></li></ol><h2 id="3-start-date-の変更ができない"><a href="#3-start-date-の変更ができない" class="headerlink" title="3. start_date の変更ができない"></a>3. start_date の変更ができない</h2><p>一度でも DAG を実行してしまった場合、start_date を変更できない仕様になっています。<br>DAG ファイル上で変更しても、反映されなくなってしまいます。<br>(※ 筆者の経験談ですが、DAG が実行されていない ( <code>ON</code> にしていない) 場合であれば、 start_date の変更が反映されます。)<br>よくあるケースとしては、毎日03:00実行のDAGを1時間ずらす変更がありますが、簡易にはできません。</p><p>1度でも DAG を実行してしまった場合は、下記の手段にて start_date を変更する必要があります。</p><h3 id="過去履歴が消えても良い場合"><a href="#過去履歴が消えても良い場合" class="headerlink" title="過去履歴が消えても良い場合"></a>過去履歴が消えても良い場合</h3><ol><li>DAG ファイルを一度 ./dag 配下から削除</li><li>Web UI 上から DAG を削除</li><li>ファイルを復元して開始日時を修正</li><li>./dag 配下にファイルを配置</li></ol><h3 id="過去履歴を残したい場合"><a href="#過去履歴を残したい場合" class="headerlink" title="過去履歴を残したい場合"></a>過去履歴を残したい場合</h3><p>DAGファイルをコピーして、別DAG ID として再作成して開始日時を変更する。</p><h2 id="4-開始日時を過去日時にすると過去ジョブが自動実行される"><a href="#4-開始日時を過去日時にすると過去ジョブが自動実行される" class="headerlink" title="4. 開始日時を過去日時にすると過去ジョブが自動実行される"></a>4. 開始日時を過去日時にすると過去ジョブが自動実行される</h2><p>過去日を指定するとデフォルトで、backfillという機能により、過去日から <code>schedule_interval</code> ごとにDAGを実行します。<br>実行したくない場合は、 <code>catchup=False</code> 指定により回避できます。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dag = DAG(</span><br><span class="line">    <span class="string">'blog_example_backfill'</span>,</span><br><span class="line">    schedule_interval=timedelta(days=<span class="number">1</span>),</span><br><span class="line">    start_date=datetime(</span><br><span class="line">        <span class="number">2019</span>, <span class="number">1</span>, <span class="number">1</span>, tzinfo=pendulum.timezone(<span class="string">'Asia/Tokyo'</span>)),</span><br><span class="line">    default_args=args,</span><br><span class="line">    catchup=<span class="literal">False</span>, <span class="comment"># こちらを指定</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="5-context-の活用"><a href="#5-context-の活用" class="headerlink" title="5. context の活用"></a>5. context の活用</h2><p>各 DAG 実行ごとの変数は、context として取得することができます。<br>PythonOperator として呼び出す際は、呼び出す関数に <code>**context</code> と可変長引数を定義することで扱えます。context には辞書型で値が入ります。</p><p>(context として渡ってくる値は、 <code>6</code> 参照)</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_context</span><span class="params">(**context)</span>:</span></span><br><span class="line">    <span class="comment"># 最も利用するケースが多い</span></span><br><span class="line">    <span class="comment"># pendulum.Pendulum 型 であることに注意</span></span><br><span class="line">    execution_date = context[<span class="string">'execution_date'</span>]</span><br><span class="line"></span><br><span class="line">    dag_id = context[<span class="string">'dag'</span>].dag_id</span><br><span class="line">    task_id = context[<span class="string">'task'</span>].task_id</span><br><span class="line"></span><br><span class="line">    print(execution_date)</span><br><span class="line">    print(dag_id)</span><br><span class="line">    print(task_id)</span><br><span class="line"></span><br><span class="line">    pprint.pprint(context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PythonOperator(</span><br><span class="line">    task_id=<span class="string">'context'</span>,</span><br><span class="line">    dag=dag,</span><br><span class="line">    python_callable=print_context,</span><br><span class="line">    provide_context=<span class="literal">True</span>, <span class="comment"># context を渡したい場合必須</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="6-Macros"><a href="#6-Macros" class="headerlink" title="6. Macros"></a>6. Macros</h2><p>context の値は、 <figure class="highlight plain"><figcaption><span>&#125;&#125; ``` の構文を利用することでも取得できます。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```py</span><br><span class="line">BashOperator(</span><br><span class="line">    task_id=&apos;test&apos;,</span><br><span class="line">    dag=dag,</span><br><span class="line">    bash_command=&apos;echo &#123;&#123; dag.dag_id &#125;&#125;&apos;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>以下が、context で取得できる値一覧です。 (Macros で取得できる値と同義)<br><a href="https://airflow.apache.org/docs/stable/macros.html" target="_blank" rel="noopener">https://airflow.apache.org/docs/stable/macros.html</a></p><h2 id="7-Task-間で値を受け渡す方法"><a href="#7-Task-間で値を受け渡す方法" class="headerlink" title="7. Task 間で値を受け渡す方法"></a>7. Task 間で値を受け渡す方法</h2><p>処理を Task 粒度で分割して定義することが多いですが、Task間で値を渡したいケースが有るかと思います。その場合は、<a href="https://airflow.apache.org/docs/stable/concepts.html?highlight=xcom#xcoms" target="_blank" rel="noopener">XComs</a> と呼ばれる機能を利用します。<br>利用方法は下記の実装のとおりです。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(**context)</span>:</span></span><br><span class="line">    <span class="comment"># 後続の Task に渡したい値を戻り値として定義</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'hoge'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pull</span><span class="params">(**context)</span>:</span></span><br><span class="line">    <span class="comment"># context 内より task_id を key に取得</span></span><br><span class="line">    v = context[<span class="string">'task_instance'</span>].xcom_pull(task_ids=<span class="string">'push_task'</span>)</span><br><span class="line">    print(v)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">push = PythonOperator(</span><br><span class="line">    task_id=<span class="string">'push_task'</span>,</span><br><span class="line">    dag=dag,</span><br><span class="line">    python_callable=push,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">pull = PythonOperator(</span><br><span class="line">    task_id=<span class="string">'pull_task'</span>,</span><br><span class="line">    dag=dag,</span><br><span class="line">    python_callable=pull,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">push &gt;&gt; pull</span><br></pre></td></tr></table></figure><h2 id="8-dags-ディレクトリ以下のディレクトリの切り方"><a href="#8-dags-ディレクトリ以下のディレクトリの切り方" class="headerlink" title="8. dags ディレクトリ以下のディレクトリの切り方"></a>8. dags ディレクトリ以下のディレクトリの切り方</h2><p>下記ファイルを dags 直下に配置することで、実現できます。<br>再帰的に参照してくれるため、指定したディレクトリ以下でさらにディレクトリを切っても問題ないです。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> airflow.models <span class="keyword">import</span> DagBag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 追加したいディレクトリを指定</span></span><br><span class="line">dags_dirs = [<span class="string">'~/dags/blog'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dir <span class="keyword">in</span> dags_dirs:</span><br><span class="line">    dag_bag = DagBag(os.path.expanduser(dir))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> dag_bag:</span><br><span class="line">        <span class="keyword">for</span> dag_id, dag <span class="keyword">in</span> dag_bag.dags.items():</span><br><span class="line">            globals()[dag_id] = dag</span><br></pre></td></tr></table></figure><h2 id="9-UI-の表示が-UTC-固定"><a href="#9-UI-の表示が-UTC-固定" class="headerlink" title="9. UI の表示が UTC 固定"></a>9. UI の表示が UTC 固定</h2><p>Web UI は UTC のみ対応との記載がドキュメントにあるので、現状は UTC 時刻をみて脳内変換しています。<br><a href="https://airflow.apache.org/docs/stable/timezone.html#time-zones" target="_blank" rel="noopener"><img src="/images/20200131/10.png" class="img-small-size" style="border:solid 1px #000000"></a><br><a href="https://airflow.apache.org/docs/stable/timezone.html#time-zones" target="_blank" rel="noopener">timezone.html#time-zones</a></p><p>回避策はある模様ですが、試したことはないです。<br><a href="https://qiita.com/hatappi/items/2a4d41ca14746a3c98a6" target="_blank" rel="noopener">Airflow 日本語化</a></p><h2 id="10-Web-UI-上からジョブのパラメータを渡せない"><a href="#10-Web-UI-上からジョブのパラメータを渡せない" class="headerlink" title="10. Web UI 上からジョブのパラメータを渡せない"></a>10. Web UI 上からジョブのパラメータを渡せない</h2><p>Web UI 上の、 <code>Trigger DAG</code> より手動での実行は可能ですが、任意のパラメータを指定して実行することはできません。<br>execution date は Trigger DAG を押下した時刻になります。</p><p>CLI で実行する際は、パラメータを渡すことができます。<br>渡し方は、下記の通りです。<br>(※ <code>追記</code> :筆者のローカルで試したところ DAG が見つからないエラーが出ており、未解消です。)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">airflow trigger_dag <span class="variable">$&#123;dag_id&#125;</span> -c <span class="string">'&#123;"key": "value"&#125;'</span></span><br></pre></td></tr></table></figure><p>パラメータの受け取り方</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># context より取得</span></span><br><span class="line">value = context[<span class="string">'dag_run'</span>][<span class="string">'conf'</span>][<span class="string">'key'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># macros 利用</span></span><br><span class="line"><span class="string">'&#123;&#123; DAG_run.conf["key"] &#125;&#125;'</span></span><br></pre></td></tr></table></figure><p><a href="https://airflow.apache.org/docs/stable/cli.html#trigger_dag" target="_blank" rel="noopener">https://airflow.apache.org/docs/stable/cli.html#trigger_dag</a></p><h2 id="11-DAG-Task-の同時実行数制御"><a href="#11-DAG-Task-の同時実行数制御" class="headerlink" title="11. DAG/Task の同時実行数制御"></a>11. DAG/Task の同時実行数制御</h2><p>DAG オブジェクトに対して、concurrency/max_active_runs フィールドを指定することで制御できます。<br><code>max_active_runs</code> の数値が DAG の最大同時実行数で、 <code>concurrency</code> の数値が Task の最大同時実行数になります。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dag = DAG(</span><br><span class="line">    <span class="string">'blog_example_concurrency'</span>,</span><br><span class="line">    start_date=start_date,</span><br><span class="line">    schedule_interval=timedelta(days=<span class="number">1</span>),</span><br><span class="line">    concurrency=<span class="number">3</span>, <span class="comment"># task は 3つまで同時起動できる</span></span><br><span class="line">    max_active_runs=<span class="number">1</span>, <span class="comment"># DAG は 1つまで同時起動できる</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>Airflow 全体/デフォルトの concurrency/max_active_runs は、airflow.cfg に指定してあります。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Airflow 全体の task の同時実行数のデフォルト値</span><br><span class="line">parallelism = 32</span><br><span class="line"></span><br><span class="line"># DAG ごとの task の同時実行数のデフォルト値</span><br><span class="line">DAG_concurrency = 16</span><br><span class="line"></span><br><span class="line"># DAG ごとの DAG の同時実行数 のデフォルト値</span><br><span class="line">max_active_runs_per_DAG = 16</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Airflow利用にあたっての Tips をまとめました。<br>ハマりどころはありますが、ジョブをソースコード管理でき、Pythonで自由に定義できる点が非常に魅力的ですので、利用できるシーンで使っていきたいと思います。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/53663534/for-apache-airflow-how-can-i-pass-the-parameters-when-manually-trigger-DAG-via" target="_blank" rel="noopener">For Apache Airflow, How can I pass the parameters when manually trigger DAG via CLI? - Stack Overflow</a></li><li><a href="https://gtoonstra.github.io/etl-with-airflow/gotchas.html" target="_blank" rel="noopener">Gotcha’s — ETL Best Practices with Airflow v1.8</a></li><li><a href="https://medium.com/programming-soda/apache-airflow%E3%81%A7%E3%82%A8%E3%83%B3%E3%83%89%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92%E3%83%91%E3%82%A4%E3%83%97%E3%83%A9%E3%82%A4%E3%83%B3%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%99%E3%82%8B-part4-590ad9f9fb80" target="_blank" rel="noopener">Apache Airflow でエンドユーザーのための機械学習パイプラインを構築する Part4 - programming-soda - Medium</a></li><li><a href="https://medium.com/@xnuinside/how-to-load-use-several-dag-folders-airflow-dagbags-b93e4ef4663c" target="_blank" rel="noopener">How to use several dag_folders? Airflow DAGBags. - Iuliia Volkova - Medium</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;Airflow 利用にあたって知っておいたほうが良いんじゃないかなと思う情報をまとめました。いわゆるハマりどころです。  &lt;/p&gt;
&lt;p&gt;A
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="Python" scheme="https://future-architect.github.io/tags/Python/"/>
    
      <category term="Airflow" scheme="https://future-architect.github.io/tags/Airflow/"/>
    
  </entry>
  
  <entry>
    <title>リモートワークを促進させるDaily Stand-up Meeting</title>
    <link href="https://future-architect.github.io/articles/20200129/"/>
    <id>https://future-architect.github.io/articles/20200129/</id>
    <published>2020-01-29T01:02:04.000Z</published>
    <updated>2020-01-29T01:33:28.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの村田です。皆さんは普段どのようにプロジェクトのタスク優先順位を管理していますか？大規模なプロジェクトであればbacklogなどの進捗管理システムを導入しつつ優先度のタグ付けをしたり、あるいは小規模なプロジェクトであれば密なコミュニケーションで状況を常に共有し合ったりしているかもしれません。</p><p>私の所属しているプロジェクトは以下のような状況です。</p><ul><li>5名程度の比較的小規模なメンバー構成だった</li><li>自社オフィス、顧客オフィス、自宅など各メンバーが離れた場所で仕事をすることが多い</li></ul><p>大掛かりな進捗管理システムを入れるほどの規模感ではなく、しかし油断するとプロジェクトの状況が不透明になりかねないということで、私のチームではDaily Stand-up Meeting(以後、SUM)を導入しています。<br>※毎度立っているわけではないので、呼称はDaily Scrumのほうが正しいかもしれません</p><img src="/images/20200129/photo_20200129_01.jpg">↑とある日のSUMの様子↑<h1 id="SUMに期待したこと"><a href="#SUMに期待したこと" class="headerlink" title="SUMに期待したこと"></a>SUMに期待したこと</h1><ul><li>各メンバーのいま取り組むべきタスクを明確にすること</li><li>お互いのタスク状況を把握すること</li><li>お互いの困りごとを把握すること</li></ul><h1 id="SUMの開催に向けて"><a href="#SUMの開催に向けて" class="headerlink" title="SUMの開催に向けて"></a>SUMの開催に向けて</h1><h2 id="SUMの形式"><a href="#SUMの形式" class="headerlink" title="SUMの形式"></a>SUMの形式</h2><ul><li>状況共有シートとしてGoogle Spreadsheetを利用<ul><li>セル形式かつみんなで同時編集可能なものを使うのが好ましいと思います</li></ul></li><li>Hangout Meetを利用して相互に接続<ul><li>これはなんでもよいと思います。全社的にGSuiteを利用しているのでHangout Meetを使っています</li></ul></li><li>時間は15分（1人持ち時間3分×人数）<ul><li>ダラダラと話してしまわないよう時間は厳密に区切っています。</li></ul></li></ul><h2 id="状況共有シートの書きっぷり"><a href="#状況共有シートの書きっぷり" class="headerlink" title="状況共有シートの書きっぷり"></a>状況共有シートの書きっぷり</h2><img src="/images/20200129/photo_20200129_02.png" style="border:solid 1px #000000">↑こんな感じで記載しています↑<h3 id="シートのフォーマット"><a href="#シートのフォーマット" class="headerlink" title="シートのフォーマット"></a>シートのフォーマット</h3><p>シートには5つのカラムを準備しています。<br><strong>①日付</strong><br> 「ctl+:」のようなショートカットを書いておくと地味に便利です</p><p><strong>②名前</strong><br>名字だけ、シンプルに</p><p><strong>③昨日やったこと</strong><br>基本は前日の「今日やること」に実績を反映したものになります</p><p><strong>④今日やること</strong><br>メインコンテンツ。やることを箇条書きで列挙します。</p><p><strong>⑤障害となっていること/つぶやき</strong><br>現在ハマっているポイントや他人への連絡事項など。直近の勤怠の予定など周知事項も記載しています。</p><h3 id="シートを書く際は絵文字をフル活用すると良い"><a href="#シートを書く際は絵文字をフル活用すると良い" class="headerlink" title="シートを書く際は絵文字をフル活用すると良い"></a>シートを書く際は絵文字をフル活用すると良い</h3><p>状況共有の際にタスクを種別ごとやプロジェクトごとにカテゴライズすると思いますが、付帯情報を書き始めると縦に長くなってしまいがちです。<br><img src="/images/20200129/photo_20200129_04.png" class="img-small-size" style="border:solid 1px #000000"></p><p>この縦に長い共有内容を5人分記載するといよいよ一覧性に欠けてしまうので、絵文字をフル活用する方針を立てています。<br><img src="/images/20200129/photo_20200129_05.png" class="img-small-size" style="border:solid 1px #000000"></p><p>上記は一例ですが、このように絵文字ごとに意味を持たせて記載するようにしています。<br>絵文字を利用して先程の共有内容を書き換えると…<br><img src="/images/20200129/photo_20200129_06.png" class="img-small-size" style="border:solid 1px #000000"></p><p>このようにスッキリします。もちろん行数を圧縮するだけであれば絵文字を使わず書き方を変えるだけで実現はできます。<br><img src="/images/20200129/photo_20200129_07.png" class="img-small-size" style="border:solid 1px #000000"></p><p>これでも必要な情報は含まれていますが…なんか味気ないと思いませんか？私は思います笑<br>絵文字に意味づけを行うことでハイコンテキスト化してしまうという点はありますが、見てて視覚的にも楽しいので絵文字をガンガン利用しています。</p><p>新しいプロジェクトやタスクが始める時に誰かが新しい絵文字を追加して、「◯◯っぽいのでこの絵文字を使おうと思います」「お！いいねーｗ」「面白い！！」みたいな会話が生まれたりするのでなんだかんだ楽しく運用できているのかなと思います。<br><img src="/images/20200129/photo_20200129_08.png" class="img-small-size"></p><p>シートの上の方に、いま存在する絵文字をずらっと並べておくと、毎日記載する時にも困らないので便利です。</p><h2 id="Slack-ReminderでSUMをリマインド"><a href="#Slack-ReminderでSUMをリマインド" class="headerlink" title="Slack ReminderでSUMをリマインド"></a>Slack ReminderでSUMをリマインド</h2><p>私のチームではSlack Reminderを使って毎日9時にリマインダを飛ばしています。<br><img src="/images/20200129/photo_20200129_09.png" style="border:solid 1px #000000"></p><p>SpreadsheetのURLを都度探すのは面倒なので、Slack reminderでURLを投稿する形にしています。ブックマーク登録しとけばいいという意見もありますが、Slack駆動にしておくと何かと便利なのでこうしています。</p><p>Reactionがつけられるので、「欠席」や「リモート参加」などはReactionで示す運用としています。このためにオリジナルのReactionを<a href="https://emoji-gen.ninja/" target="_blank" rel="noopener">絵文字ジェネレーター</a>で作成しました。</p><p>※ちなみに毎朝持ち回りで実施しているLTやプロジェクトのTipsページのURLなど、何度も周知して浸透させたい情報もリマインダに乗せています</p><p>また、スレッドを掘ることもできるので、電車遅延や別打ち合わせによる遅参などスレッド内でやり取りしています。</p><p>各々がリモートな状態だと、欠席なのかそれとも遅刻なのかなどが分かりづらくなりますが、やり取りをSlackにすべて寄せることでスムーズにSUMを開催することができています。</p><h1 id="SUM中の過ごし方"><a href="#SUM中の過ごし方" class="headerlink" title="SUM中の過ごし方"></a>SUM中の過ごし方</h1><p>SUMの一番大事な目的は「プロジェクトにおけるタスク優先順位の決定」と定めていました。そのためにはそれぞれのメンバーから積極的にプロジェクト状況を発信しあうことが重要です。共有された情報をもとにプロジェクトを俯瞰、いま優先的に取り組むべきタスクを判断・遂行しています。</p><p>その他SUM自体の進め方は世間的なものと特に大差ないですが、以下のようなことに気を付けていました。</p><ul><li>1人持ち時間は3分</li><li>議論が始まるようなネタは一旦ストップ → 検討会議を別途設ける</li><li>状況共有は <strong>先輩社員から降順で行う</strong></li></ul><p>状況共有を降順にするのは意外と大事で、後輩社員が遅延報告などのエスカレーションを素直にあげやすい雰囲気作りに注力していました。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>私のチームではSUMを開催することで、互いの状況を把握することができ、円滑にプロジェクトを推進できています。</p><p>また副次的に以下のようなメリットも享受できています。</p><ul><li>朝のペースメーカーになる</li><li>リモートでもぼっちにならず朝の挨拶ができるので、元気に一日を始められる</li><li>互いの声を聞けるので、文面に表れない不調などを察知できる（めっちゃテンション低い、鼻水ズルズル、など）</li></ul><p>長々とコツなどを書いてきましたが、実はこれが一番大きな開催意義なのかもしれません。<br>互いにリモートだと、オフィスにいるときのなにげない会話（雑談を多分に含む）などが無くなってしまいます。</p><p>仲間意識を持ち健やかな精神衛生を保つためにも、Daily Stand-up Meetingは継続していきたいと思います！</p><hr><p>関連記事：</p><ul><li><a href="/articles/20190917/">サステナブルなエンジニア組織デザイン～よくある設計とジレンマ～</a></li><li><a href="/articles/20190918/">サステナブルなエンジニア組織デザイン～デザインパターンと10のリファクタリング～</a></li><li><a href="/articles/20190703/">マネージャーがうれしいRedmineデータのグラフ表示方法を公開します！</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、TIGの村田です。皆さんは普段どのようにプロジェクトのタスク優先順位を管理していますか？大規模なプロジェクトであ
      
    
    </summary>
    
      <category term="マネジメント" scheme="https://future-architect.github.io/categories/%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88/"/>
    
    
      <category term="会議" scheme="https://future-architect.github.io/tags/%E4%BC%9A%E8%AD%B0/"/>
    
  </entry>
  
  <entry>
    <title>Auth0のRulesを使って認証認可を自在にカスタマイズする</title>
    <link href="https://future-architect.github.io/articles/20200128/"/>
    <id>https://future-architect.github.io/articles/20200128/</id>
    <published>2020-01-28T00:24:18.000Z</published>
    <updated>2020-01-28T00:31:21.592Z</updated>
    
    <content type="html"><![CDATA[<p>Auth0をカスタマイズして使うに当たって必要になるRulesについて、概要と開発に関するTipsを説明します。<br>Auth0のRulesの使い方については、Auth0公式の<a href="https://auth0.com/docs/best-practices/rules" target="_blank" rel="noopener">Rules Best Practices</a>に様々な役立ち情報が載っているのですが、分量が多くてしんどい(全て英語な上に印刷するとA4で18ページ分…)です。<br>この記事ではRules Best Practicesの中でも特に役に立つと思われる情報と、その他Rules開発で得られた知見について書いていきます。</p><p>Auth0に関する概要については<a href="https://future-architect.github.io/articles/20200122/">弊社 山田の記事</a>を、Auth0の二要素認証に興味のある方は<a href="https://future-architect.github.io/articles/20200123/">弊社 先山の記事</a>を御覧ください。</p><h1 id="Rulesとは"><a href="#Rulesとは" class="headerlink" title="Rulesとは"></a>Rulesとは</h1><p>Auth0のRulesとは、</p><ul><li>アクセストークンやIDトークンの取得後に実行される</li><li>任意のJavascriptで書かれたコードを実行して</li><li>認証認可の結果を編集したり、追加の処理を行う事のできる機能</li></ul><p>となっています。<br><a href="https://auth0.com/docs/best-practices/rules" target="_blank" rel="noopener">https://auth0.com/docs/best-practices/rules</a><br><img src="/images/20200128/photo_20200128_01.png" style="border:solid 1px #000000"></p><p>Auth0にはOIDCを使った認証認可フローに必要な機能が備わっているのですが、Rulesの機能を使うことによりプロダクト固有の様々な要求に答えることが出来ます。</p><h1 id="Rulesの作り方"><a href="#Rulesの作り方" class="headerlink" title="Rulesの作り方"></a>Rulesの作り方</h1><p>Auth0には代表的なRulesの活用方法のサンプルを多数用意していて、それらをそのまま使うことでもある程度の認証認可のカスタマイズが可能となっています。<br>ここではサンプルを用いたRulesの作成手順を説明します。</p><p>まず左のメニューからRulesを選択し、右上のCREATE RULEをクリックします。<br><img src="/images/20200128/photo_20200128_02.png" style="border:solid 1px #000000"></p><p>空のルールか、用意されたテンプレートを選択します。<br>今回は、「IP Address whitelist」というテンプレートを使用してルールを作成します。</p><img src="/images/20200128/photo_20200128_03.png" style="border:solid 1px #000000"><p>ソースコードが表示されるので、許可したいIPのリストを編集してSAVE CHANGESを押すとルールの追加は完了です。</p><img src="/images/20200128/photo_20200128_04.png" style="border:solid 1px #000000"><p>ルールを追加が反映されると、特定のIPアドレスから以外のアクセスはログイン出来ないような制御が追加されます。<br>このような形でRulesを追加していくことにより、細かなアクセス制御やトークンに与えられる情報の変更等様々なカスタマイズを施すことが出来ます。</p><h1 id="Rulesの書き方"><a href="#Rulesの書き方" class="headerlink" title="Rulesの書き方"></a>Rulesの書き方</h1><p>テンプレート以外のRulesが必要になる事も多々あると思うので、基本的なRulesの書き方について説明します。<br>以下が空のルールのコードです。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> implement your rule</span></span><br><span class="line">  <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ルールは、</p><ul><li>ユーザ情報、context, コールバック関数を受け取り、</li><li>受け取ったコールバックを呼び出す</li></ul><p>必要があります。<br>ルールが受け取る情報は、</p><ul><li>user: ログインしたユーザに関する情報が入ったオブジェクト</li><li>context: 現在のログイン処理に関する情報が入ったオブジェクト</li></ul><p>の２つになります。内容の正体は<a href="https://auth0.com/docs/rules/references/context-object" target="_blank" rel="noopener">Auth0の公式ドキュメント</a>を確認してください。</p><p>callbackへ渡す引数は、1つ目はエラーとなっています。nullは正常に処理が完了したことを表し、この後続のRulesが引き続き実行されます。<br>2つ目、3つ目は次のRuleに渡すuserやcontextを表しています。これらを編集すると後続の処理に特定の値を渡したり、実際にログインされるユーザをRule側で変更したりすることが出来ます。</p><p>認証にエラーが発生した場合、以下のような形でエラーを返す事が推奨されています。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> callback(<span class="keyword">new</span> UnauthorizedError(<span class="string">"IP is out of range"</span>))</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> callback(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Unexpected error"</span>))</span><br></pre></td></tr></table></figure><p>UnauthorizedErrorの引数が拒否された理由を表します。<br>callbackでnull以外何を返しても認証エラーとみなされますが、Unauthorizedオブジェクトは原因が分かっている認証エラー、Errorオブジェクトは内部エラーを表現するのに使用するのが正しいようです。<a href="https://auth0.com/docs/best-practices/rules#callback-function" target="_blank" rel="noopener">Auth0公式ドキュメントより</a></p><h1 id="独自Rulesの開発Tips"><a href="#独自Rulesの開発Tips" class="headerlink" title="独自Rulesの開発Tips"></a>独自Rulesの開発Tips</h1><p>以上がRulesの概要なのですが、実際に開発する上で知っておくと良いTipsや、最初の開発の際にハマりやすいポイントが多数あるのでいくつかをピックアップしてここに記します。</p><h2 id="ログの見方について"><a href="#ログの見方について" class="headerlink" title="ログの見方について"></a>ログの見方について</h2><p>Rules内でconsole.logを使用しても、Auth0のログインページやログイン時のレスポンスで出力結果を見ることは出来ません。<br>しかし、拡張機能のReal-time Webtask Logsを使うことによってログを見ることが出来るようになります。<br><img src="/images/20200128/photo_20200128_05.png" style="border:solid 1px #000000"></p><p>拡張機能をインストールして使用すると、ブラウザ経由から以下のような形でログインの試行のログやconsole.logで出力した内容を確認することが出来ます。<br><img src="/images/20200128/photo_20200128_06.png"></p><p>Real-time Webtask Logsはデバッグには非常に強力なツールなのですが、本番で運用する際には個人情報が含まれるuserオブジェクトやcontextオブジェクトはコンソールには出さないよう注意が必要です。</p><h2 id="環境変数の使い方について"><a href="#環境変数の使い方について" class="headerlink" title="環境変数の使い方について"></a>環境変数の使い方について</h2><p>Rulesを開発していると、ソースコード上ではなく環境変数で管理したい値がだいたい出てきます。<br>例としては、</p><ul><li>環境によって異なる外部APIの接続先情報</li><li>APIキー等公開したくない情報</li></ul><p>が挙げられます。<br>Auth0では全てのRulesで共通の環境変数を定義することが出来ます。<br>環境変数を定義するためにはRulesを開き、以下の赤い四角の部分を使用して登録します。<br><img src="/images/20200128/photo_20200128_07.png" style="border:solid 1px #000000"></p><p>環境変数を使用する際には、以下のようにconfigurationオブジェクトを使用してアクセスします。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> SOME_VALUE = configuration.SOME_KEY;</span><br><span class="line">  <span class="comment">// do something with value</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用できるライブラリについて"><a href="#使用できるライブラリについて" class="headerlink" title="使用できるライブラリについて"></a>使用できるライブラリについて</h2><p>RulesではAWSのLambda等と異なりライブラリのコードも含めてアップロードすることは出来ないので、インストールされているライブラリに実装が依存します。<br>そうなると、使用できるライブラリ一覧が欲しくなってきます。<br>以下のページで使用できるモジュールの一覧を確認することが出来ます。<br><a href="https://auth0-extensions.github.io/canirequire/" target="_blank" rel="noopener">https://auth0-extensions.github.io/canirequire/</a><br>基本的なモジュールは全て含まれているので、困ることは少ないと思います。<br>もしどうしても必要なライブラリが含まれていない場合はリクエストすることも出来るみたいです。</p><h2 id="Rulesの中でAuth0自身のAPIを使用する方法について"><a href="#Rulesの中でAuth0自身のAPIを使用する方法について" class="headerlink" title="Rulesの中でAuth0自身のAPIを使用する方法について"></a>Rulesの中でAuth0自身のAPIを使用する方法について</h2><p>Auth0のRules内では、一部のAuth0APIが簡単に使用できるような機能が提供されています。<br>以下Auth0のルール内でユーザのメタデータを更新するためのコードです。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth0.users.updateAppMetadata(user.user_id, user.app_metadata);</span><br></pre></td></tr></table></figure><p>auth0というオブジェクトにアクセスすることで、現在のauth0環境関連の情報(ドメイン等)や一部のAPI呼び出しを行うことが出来ます。<br>しかし、このauth0オブジェクトに付与されている権限は一部の権限しかないため(read:usersとupdate:usersのみ)その他の操作を行おうとすると拒否されてしまいエラーとなります。<br>全てのauth0の操作をRules上で行うためには、Rules上でAuth0からアクセストークンを取得するコードを書く必要があります。</p><p>例として以下に、ログインしてきたユーザを全て削除してしまうRuleを示します。（危険なルールなので、もちろんですが本番環境等では絶対に動かさないでください！）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ManagementClient = <span class="built_in">require</span>(<span class="string">'auth0@2.9.1'</span>).ManagementClient;</span><br><span class="line">    <span class="comment">// Auth0のユーザ削除権限を持つクライアントを生成する</span></span><br><span class="line">    <span class="keyword">var</span> managementAuth0 = <span class="keyword">new</span> ManagementClient(&#123;</span><br><span class="line">        domain: auth0.domain,</span><br><span class="line">        clientId: configuration.application_client_id,</span><br><span class="line">        clientSecret: configuration.application_client_secret,</span><br><span class="line">        scope: <span class="string">'delete:users'</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ユーザ削除を行う</span></span><br><span class="line">    managementAuth0.users.delete(&#123; <span class="attr">id</span>: user.user_id &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">`failed to delete user <span class="subst">$&#123;user.user_id&#125;</span>`</span>);</span><br><span class="line">            <span class="built_in">console</span>.error(err);</span><br><span class="line">        &#125;</span><br><span class="line">        callback(err, user, context);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このソースを実行する前準備として、Rulesでの実行用にMachine to Machine用のアプリケーションを一つ登録しておき環境変数にclient_idとclient_secretを登録します。<br>これを行うことにより、任意のAuth0APIを呼び出すことが出来るようになります。<br>もちろん必要ない場合は、デフォルトで与えられているauth0のクライアントを使用するべきなのでご注意ください。</p><h2 id="サインアップ時のみRulesを実行する方法について"><a href="#サインアップ時のみRulesを実行する方法について" class="headerlink" title="サインアップ時のみRulesを実行する方法について"></a>サインアップ時のみRulesを実行する方法について</h2><p>Rulesが実行されるタイミングはトークンを発行した後になります。<br>ログイン時とサインアップ時は両方トークンが発行されるのですが、Rulesに渡される情報のみからはそのリクエストがログインかサインアップかわかりません。<br>そのため、サインアップ時のみ実行したい処理がある場合は少し工夫する必要があります。<br>調べたところ、ユーザ固有のメタデータを保存する領域であるapp_metadataを使用して実現する方法がメジャーのようです。(<a href="https://dev.classmethod.jp/server-side/auth0/hook_signup_logic_using_auth0_rules/" target="_blank" rel="noopener">例1</a>, <a href="https://community.auth0.com/t/running-rule-only-once-at-sign-up/19401" target="_blank" rel="noopener">例2</a>)</p><p>以下がサインアップ時のみ特定の処理を実行するソースコードです。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 既にサインアップ処理が完了している場合は何もしない</span></span><br><span class="line">  <span class="keyword">if</span> (user.app_metadata.signedup) <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// do something related to signup</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// ユーザのAppMetadataを更新し、サインアップフラグをtrueにする</span></span><br><span class="line">  user.app_metadata.signedup = <span class="literal">true</span>;</span><br><span class="line">  auth0.users.updateAppMetadata(user.user_id, user.app_metadata);    </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>サインアップ時の更新処理が正常に完了した後に、ログインユーザのメタデータでサインアップ処理が完了したことを示すフラグをONにすることで２回目以降は実行されないように制御しています。</p><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>Rulesは任意のコードが実行可能な非常に強力な機能ですが、処理を追加しすぎるとログイン処理が遅くなってしまうリスクがあります。<br>ですので、認証認可のフローで必ずやらなければならない最小限の内容を行うに留めるのが良いでしょう。<br>ここでは語れませんでしたが、より多くの実行タイミングが選べるHooksという機能がBetaで公開されています。<br>将来的にはHooksを活用したほうがより柔軟で綺麗な処理を書くことが出来るようになりそうです。</p><hr><p>関連記事：</p><ul><li><a href="/articles/20200122/">Auth0 導入編</a></li><li><a href="/articles/202001223/">Auth0 EmailまたはSMSを使ったパスワードレス認証を設定する</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Auth0をカスタマイズして使うに当たって必要になるRulesについて、概要と開発に関するTipsを説明します。&lt;br&gt;Auth0のRulesの使い方については、Auth0公式の&lt;a href=&quot;https://auth0.com/docs/best-practices/r
      
    
    </summary>
    
      <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
      <category term="JavaScript" scheme="https://future-architect.github.io/tags/JavaScript/"/>
    
      <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
  </entry>
  
  <entry>
    <title>Umeda.go 2020 Winterに3名で登壇しました</title>
    <link href="https://future-architect.github.io/articles/20200127/"/>
    <id>https://future-architect.github.io/articles/20200127/</id>
    <published>2020-01-27T00:39:35.000Z</published>
    <updated>2020-01-27T00:50:05.930Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニット<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>の渋川、辻、真野です。先日開催された <a href="https://umedago.connpass.com/event/159972/" target="_blank" rel="noopener">Umeda.go 2020 Winter</a> に当社から3名が登壇しました。</p><p>登壇特典で特製ステッカーを1枚ずつもらえました。みんな嬉しすぎてスマホに貼っています。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/umedago?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#umedago</a> 新しいロゴのステッカーができました！<br>今回のイベントから登壇者様に配っていきます。<br>運営自身が言うのもなんですが<br>なかなかいい出来だと思います！ <a href="https://t.co/yQszITKtgM" target="_blank" rel="noopener">pic.twitter.com/yQszITKtgM</a></p>&mdash; umeda.go (@umedago) <a href="https://twitter.com/umedago/status/1220903482346991617?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">January 25, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>当日はホワイトボードにGopherくんがライブ的に描かれ、神絵師っているんだって思いました。てっきりデザイナーさんかと思いましたが、職種としてはまさかのプログラマーということを後で知りました。げに恐ろしき才能..!! と戦慄しました。</p><p>そして「あんまり持ち上げすぎると、本人が次から緊張しちゃうかもだから期待値を上げすぎないようにね笑」って運営の方がさらっと言って、むちゃくちゃ良い雰囲気だなって思いました。</p><img src="/images/20200127/photo_20200127_01.jpeg"><p>震えるほど可愛い。</p><h1 id="Goならわかるラッパーコマンド作成で学ぶシステムプログラミング"><a href="#Goならわかるラッパーコマンド作成で学ぶシステムプログラミング" class="headerlink" title="Goならわかるラッパーコマンド作成で学ぶシステムプログラミング"></a>Goならわかるラッパーコマンド作成で学ぶシステムプログラミング</h1><p>澁川です。今回は、基調公演枠をいただきましたので、久々に長めの発表をさせていただきました。書籍でもプロセスの起動のセクションはありましたが、Goのスキルを学ぶ題材として優れていると思いますので、書籍の内容をアップデートするには、という感じで構成しました。</p><p>僕も元栃木県民として、地方の勉強会と東京の勉強会の違いは少し感じていました。おそらく普段からGoを書いている人だけがズバッと集まることはなくて、各種勉強会でメンバーはかなりオーバーラップしていて、さまざまなバックグラウンドの人がふわっと集まることが多い印象でした。そのため、使っている人向けの細かいネタよりは、これから導入するには、という人にも配慮して間口を普段よりも広く、ということを意識しました。また、Goの実装のテクニックだけではなく「Goらしさ」を言葉にして、普段Goを使っていない人にも、なにか持ち帰ってもらえればという内容にしました。</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vSl7mn5XBPTKFEiMZo8X02Q0kOt0IGhw_zEYCSZIuUpYioez3TxGWwAcrwZU4FZLm0OtwEZFfNN4G0N/embed?start=false&loop=false&delayms=3000" frameborder="0" width="900" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><p>※<strong>権限が必要です</strong> と出る方は、会社のGSuite設定の可能性があります。私用のモバイルなどで確認ください</p><p>実際、仕事で書かれている人以外にも、趣味で書いているという人も多いし、普段使いの言語が違う人が多くて、質疑応答の内容も東京都はだいぶ違って楽しかったです。</p><h1 id="LT-ワークフローエンジンをGoで作る"><a href="#LT-ワークフローエンジンをGoで作る" class="headerlink" title="LT: ワークフローエンジンをGoで作る"></a>LT: ワークフローエンジンをGoで作る</h1><p>辻です。シンプルで扱いやすいワークフローエンジンを Go で作りたい、と思って年末年始の休みに実装したネタで LT させていただきました。</p><script async class="speakerdeck-embed" data-id="725c739447ab4f8d9372018ccfd52160" width="900" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>ワークフローエンジンは複数処理を並列に扱うことが多いです。 Go だと Goroutine のスレッドプールを作って、Goroutine が独立して並列に処理するような実装が書きやすく、Go の良さをあらためて体感できました。</p><p>ワークフローエンジンは OSS としてたくさんのプロダクトが公開されていますが、汎用的かつ柔軟に構成できる一方で設定が複雑になりがちです。ロジックも Go で実装できて、実行順序もマスタで管理できるように実装しました。<br>趣味として始めた PoC の実装ですが、業務で使えるようなプロダクトに仕上げていきたいなと思っています。</p><h1 id="LT-Goで工場を制御する要であるPLCにアクセスする"><a href="#LT-Goで工場を制御する要であるPLCにアクセスする" class="headerlink" title="LT: Goで工場を制御する要であるPLCにアクセスする"></a>LT: Goで工場を制御する要であるPLCにアクセスする</h1><p>真野です。業務活用しているコードをOSSとして公開したので、そのネタでLTをさせていただきました。</p><script async class="speakerdeck-embed" data-id="31901c3f2d144c189faee547f8cbe541" width="900" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>このPLCとの付き合いはここ2,3年くらいあり、色々ナレッジが溜まっているところです。当初は各種用語に慣れず、というかマニュアルがたくさんありどれを読むべきかも分からず四苦八苦しましたが、考え方にも慣れやりたいことがスムーズに実現できるようになりました。</p><p>今後は例えば100msとか10msとかPLC側に負荷をなるべくかけない想定で、もっと高頻度にレジスタ値をミラーリングする手法を研究したり、対応するMCプロトコルのコマンドを増やしたいと思います。</p><p>一方でMCプロトコル以外にもModbus, OPC-UAなどのプロトコルも有名です。こちらもあまり世に出ていない情報なので、どうにか実装したいと思います。（対応している機種を調達する必要があるのでまずはそこからですが）</p><h1 id="Umeda-go楽しかった話"><a href="#Umeda-go楽しかった話" class="headerlink" title="Umeda.go楽しかった話"></a>Umeda.go楽しかった話</h1><p>Umeda.go、良いですね。登壇内用が初級者～中級～上級まで様々あり、やっている内容も特徴的で面白かったです。Gopher歴1日目の方にもみんな優しく接していたので本当に良いコミュニティでした。</p><p>今回の発表内容はIoTとか組み込み領域の話が多く、さすが関西！製造業強いから？って思いましたが、タマタマだったそうです。Webフロントエンド、Webバックエンド、CLIツール、組み込み、など多くの内容に触れられるのはGoならではで良いですね。</p><p>また、懇親会という名前で全員で議論のセッションがありましたが、これはとても良かったです。どうしても大人数の勉強会だと、参加して話を聞いておしまい、ということも多いのですが、全員がスピーカーというか、普段思っていることを出し合い、意見を交換するという「ミートアップしているぞ」という体感が得られました。これは東京で今後開催するイベントにも取り入れたい内容でした。</p><hr><p>関連記事：</p><ul><li><a href="https://future-architect.github.io/articles/20191211/">golang.tokyoで発表してきました</a></li><li><a href="https://future-architect.github.io/articles/20191120/">Go Conference 2019 Autumn に登壇しました</a></li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a></li><li><a href="https://future-architect.github.io/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="https://future-architect.github.io/articles/20190814/">WAFとして go-swagger を選択してみた</a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">Technology Innovation Groupの略で、フューチャーの中でも特にIT技術に特化した部隊です。その中でもDXチームは特にデジタルトランスフォーメーションに関わる仕事を推進していくチームです。 ↩</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXユニット&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnot
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>Auth0 EmailまたはSMSを使ったパスワードレス認証を設定する</title>
    <link href="https://future-architect.github.io/articles/20200123/"/>
    <id>https://future-architect.github.io/articles/20200123/</id>
    <published>2020-01-23T02:02:12.000Z</published>
    <updated>2020-01-28T00:28:50.641Z</updated>
    
    <content type="html"><![CDATA[<p>Auth0のパスワードレス認証を説明します。該当の機能を使うことで、ユーザがパスワードの入力をスキップして認証を行うことができます。イメージとしてはSlackのMagic Linkのような振る舞いです。</p><h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h1><p>Auth0が提供するVue.jsのサンプル実装をベースに説明します。手元で動作確認をする場合は、下記を事前にcloneしてください。このリポジトリにある<code>01-Login</code>のディレクトリにあるアプリケーションを使います。</p><p><a href="https://github.com/auth0-samples/auth0-vue-samples" target="_blank" rel="noopener">https://github.com/auth0-samples/auth0-vue-samples</a></p><p>事前準備に関しては、以前の<a href="https://future-architect.github.io/articles/20200122/">弊社 山田の記事</a>で詳しく解説しておりますので、省略して記載を行います。</p><h2 id="Applicationの作成"><a href="#Applicationの作成" class="headerlink" title="Applicationの作成"></a>Applicationの作成</h2><p><code>CREATE APPLICATION</code>をクリックし、<code>Single Page Web Applications</code>を選択して作成をします。今回は検証用にApplication NameをPasswordlessSPAにしました。ここはどんな名前でもOKですし、日本語でも構いません。</p><p>また、書きのパラメータは全て<code>http://localhost:3000</code>を設定してください。</p><ul><li>Allowed Callback URLs</li><li>Allowed Web Origins</li><li>Allowed Logout URLs</li></ul><p>特に忘れがちなのが<code>Allowed Web Origins</code>で、これが空白だとサンプルアプリケーションが<a href="https://auth0.com/docs/api-auth/tutorials/silent-authentication" target="_blank" rel="noopener">Silent Authentication</a>に失敗します。これに関しては補足として後述をします。</p><img src="/images/20200123/photo_20200123_01.png" style="border:solid 1px #000000"><h2 id="サンプルアプリケーションにパラメータを設定"><a href="#サンプルアプリケーションにパラメータを設定" class="headerlink" title="サンプルアプリケーションにパラメータを設定"></a>サンプルアプリケーションにパラメータを設定</h2><p><code>auth_config.json.example</code>をコピーして、同フォルダに<code>auth_config.json</code>を作成します。<code>domain</code>と<code>clientId</code>は上記で作成したアプリケーションの値を設定してください。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"domain"</span>: <span class="string">"my-tenant-name.au.auth0.com"</span>,</span><br><span class="line">  <span class="attr">"clientId"</span>: <span class="string">"abcdefg"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ローカルでサンプルアプリケーションを起動し、ブラウザで<code>localhost:3000</code>へアクセスします。右上に表示されるLoginをクリックし、Auth0のログイン画面が出ればOKです。</p><img src="/images/20200123/s1.png" class="img-small-size"><h1 id="パスワードレス認証の設定-Email編"><a href="#パスワードレス認証の設定-Email編" class="headerlink" title="パスワードレス認証の設定 - Email編"></a>パスワードレス認証の設定 - Email編</h1><p>ここからが本題です。パスワードレス認証の設定を行います。<br>Auth0のダッシュボードを開き、Connections→Passwordlessを選択します。</p><p>SMSとEmailの両方が提供されています。後ほどSMSも解説しますので、まずはEmailの方をアクティブにしてみてください。</p><img src="/images/20200123/photo_20200123_02.png" style="border:solid 1px #000000"><p>ポップアップが開くので<code>SAVE</code>をクリックします。</p><img src="/images/20200123/photo_20200123_03.png"><p>EmailのPasswordless認証が有効になったので、PasswordlessSPAのアプリケーション設定からConnectionsタブを選択し、有効化を実施します。</p><img src="/images/20200123/photo_20200123_04.png" style="border:solid 1px #000000"><p>Universal Loginを変更します。</p><ul><li>Universal Login → Loginタブ</li><li>Customize Login PageをONにする</li><li>プルダウンからLock(passwordless)を選択する</li></ul><img src="/images/20200123/s2.png" style="border:solid 1px #000000"><p>今回はリンクをクリックすれば認証可能にしたいため、テンプレートを修正します。といっても1行だけ追加でOKです。<code>Auth0LockPasswordless</code>を初期化している処理の引数に1行を追加します。これで準備OKです。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">      assetsUrl:  config.assetsUrl,</span><br><span class="line">      allowedConnections: connection ? [connection] : null,</span><br><span class="line"><span class="addition">+     passwordlessMethod: 'link',</span></span><br><span class="line">      rememberLastLogin: !prompt,</span><br></pre></td></tr></table></figure><h1 id="Passwordless認証を動かしてみる"><a href="#Passwordless認証を動かしてみる" class="headerlink" title="Passwordless認証を動かしてみる"></a>Passwordless認証を動かしてみる</h1><p><code>localhost:3000</code>にアクセスしてログインをクリックしてみます。Auth0がホスティングしているログイン画面へ遷移します。</p><img src="/images/20200123/s3.png" class="img-small-size" style="border:solid 1px #000000"><p>リンク付きEmailが送信されるか確認してみます。メールアドレスを入力してSUBMITをクリックします。</p><img src="/images/20200123/s4.png" class="img-small-size"><p>メールが届いていました。リンクをクリックします。デフォルト設定の場合、URLの有効期限が180秒を経過すると切れるので注意です。</p><img src="/images/20200123/s5.png" class="img-small-size"><p>サンプルアプリケーションで初回ログインの場合は、同意画面(Consent Dialog)が表示されます。localhostで起動するアプリケーションの場合は、初回ログイン時に必ず表示がされます。これはAuth0の仕様です。Acceptをクリックして進めます。</p><img src="/images/20200123/s6.png" class="img-small-size"><p><code>localhost:3000</code>へリダイレクトされ、ログイン済みであることが確認できます。私のアカウントがgravatorを設定していないのでわかりにくいですが、ログインしてEmailを取得できています。</p><img src="/images/20200123/photo_20200123_05.png" class="img-middle-size" style="border:solid 1px #000000"><h1 id="パスワードレス認証の設定-SMS編"><a href="#パスワードレス認証の設定-SMS編" class="headerlink" title="パスワードレス認証の設定 - SMS編"></a>パスワードレス認証の設定 - SMS編</h1><p>SMSのパスワードレス認証を動かしてみます。SMSの場合はリンクのログインが使えないため、残念がらMagic Linkの振る舞いは実現できません。代わりに検証コードをSMSでスマホへ送信するタイプの認証を設定します。</p><p>SMSはTwilioを使う必要があるため、事前にTwilioへ登録を済ませておき、以下パラメータを取得しておきます。</p><ul><li>Account SID</li><li>Auth Token</li><li>電話番号<ul><li>Twilioは無料プランで使うため、Trial Numberを使います</li></ul></li></ul><img src="/images/20200123/photo_20200123_06.png" style="border:solid 1px #000000"><p>Auth0 Dashboardへ戻ります。Emailと同様にConnections→Passwordlessを選択して、SMSをONにします。</p><img src="/images/20200123/photo_20200123_07.png" style="border:solid 1px #000000"><p>Twilioのパラメータを入力する項目があるので設定します。入力後にSAVEをクリックします。</p><img src="/images/20200123/photo_20200123_08.png" class="img-middle-size" style="border:solid 1px #000000"><p>PasswordlessSPAの設定画面へ戻り、ConnectionsからPasswordless SMSをONにします。</p><img src="/images/20200123/photo_20200123_09.png" class="img-middle-size" style="border:solid 1px #000000"><p>Universal Loginのテンプレートを修正します。allowedConnectionsとpasswordlessMethodのパラメータを修正します。これでSMS認証ができるようになりました。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">      assetsUrl:  config.assetsUrl,</span><br><span class="line"><span class="deletion">-     allowedConnections: connection ? [connection] : null,</span></span><br><span class="line"><span class="deletion">-     passwordlessMethod: 'link',</span></span><br><span class="line"><span class="addition">+     allowedConnections: ['sms'],</span></span><br><span class="line"><span class="addition">+     passwordlessMethod: 'code',</span></span><br><span class="line">      rememberLastLogin: !prompt,</span><br></pre></td></tr></table></figure><p>localhost:3000にアクセスしてログインをクリックします。ログイン状態の場合は一度ログアウトしてから、同じ操作をしてください。</p><p>無事に電話番号入力の画面が表示されていれば成功です。試しに携帯電話番号を入力してSUBMITを実行してください。</p><img src="/images/20200123/photo_20200123_10.png" class="img-small-size"><p>検証コード入力画面が表示されました。検証コードはSMSでスマホへ届きます。試しに自身のスマホに送信をしましたが、上手く届きました。</p><img src="/images/20200123/photo_20200123_11.png" class="img-small-size"><img src="/images/20200123/photo_20200123_12.jpg" class="img-small-size"><p>この6桁の検証コードを入力するとログインができます。初回ログインとなるため、電話番号でユーザアカウントが作成されます。</p><img src="/images/20200123/photo_20200123_13.png" style="border:solid 1px #000000"><h1 id="補足-Silent-Authentication"><a href="#補足-Silent-Authentication" class="headerlink" title="補足 - Silent Authentication"></a>補足 - Silent Authentication</h1><p>ログインした後、同じブラウザで再び<code>localhost:3000</code>へアクセスをすると、自動的にログイン状態になるのがわかると思います。これはサンプルプロジェクトがVueの実行時に、Silent Authenticationというアクセスを行って実現しています。</p><p>Auth0がホスティングする認証画面はセッション機能があります。同じブラウザで同一テナント認証画面へアクセスする場合、セッションが残っていれば認証をスキップします。（セッションの有効期間は変更することも可能）</p><p>サンプルアプリケーションは実行と同時に、Auth0側のセッションが残っているか確認を実施します。テナントへのアクセスはSilent Authenticationという方法を利用して実施します。</p><p>興味のある方はドキュメントへのリンクを書いておきますので、読んでみてください。丁寧に書かれていてわかりやすいです。</p><ul><li><a href="https://auth0.com/docs/sessions/concepts/session-lifetime" target="_blank" rel="noopener">Session Lifetime</a></li><li><a href="https://auth0.com/docs/api-auth/tutorials/silent-authentication" target="_blank" rel="noopener">Set Up Silent Authentication</a></li></ul><h1 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h1><p>Auth0のパスワードレス認証を実際に試してみました。Auth0を使えば容易にMagic Linkのような振る舞いを実装することが可能です。Linkでなくても、エンドユーザのスマホにSMSないしEmailで検証コードを送信して、それでアプリケーションに認証することも可能です。</p><p>例えばエンタープライズの分野では、人がよく入れ替わる領域の認証をシンプルにしたいという要望があります。Auth0の提供するパスワードレス認証は、そういったクライアントのユースケースへとても合う機能だと思います。</p><p>関連記事：</p><ul><li><a href="/articles/20200122/">Auth0 導入編</a></li><li><a href="/articles/20200128/">Auth0のRulesを使って認証認可を自在にカスタマイズする</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li><li><a href="/articles/20191009/">AWS Session Managerでセッションを切断されにくくする方法</a></li><li><a href="/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Auth0のパスワードレス認証を説明します。該当の機能を使うことで、ユーザがパスワードの入力をスキップして認証を行うことができます。イメージとしてはSlackのMagic Linkのような振る舞いです。&lt;/p&gt;
&lt;h1 id=&quot;事前準備&quot;&gt;&lt;a href=&quot;#事前準備&quot; c
      
    
    </summary>
    
      <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
      <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Auth0 導入編</title>
    <link href="https://future-architect.github.io/articles/20200122/"/>
    <id>https://future-architect.github.io/articles/20200122/</id>
    <published>2020-01-22T01:31:27.000Z</published>
    <updated>2020-01-28T00:28:40.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="始めに"><a href="#始めに" class="headerlink" title="始めに"></a>始めに</h1><p>様々なシステムを構築する中で必ず発生する要素<br><strong>ログイン</strong></p><p>そのログインを支える技術要素<br><strong>認証・認可</strong></p><p>しかし、認証認可の壁は無駄に高く、調べ始めるとまずは数々の専門用語に阻まれ<br><strong>BASIC認証・OAtuh・OpenID・Jwt・Jwk・Jwe…</strong></p><p>次に、認証Flowに阻まれます。<br><strong>Implicit Flow、Client Credentials Flow…etc</strong></p><p>これらを比較的容易に実装する、Auth0を紹介していきます。</p><h1 id="なぜ今回の連載がAuth0なのか？"><a href="#なぜ今回の連載がAuth0なのか？" class="headerlink" title="なぜ今回の連載がAuth0なのか？"></a>なぜ今回の連載がAuth0なのか？</h1><p>社内で以下の要件を持つ案件が複数あり、結果としてそれぞれでAuth0を採用・知見が溜まったため、連載という形をとることにしました。</p><ul><li>OIDC(OpenIdConnect)準拠の要件</li><li>Google/Facebookなどのソーシャル連携の要件</li><li>開発の期間が短い</li><li>メンテナンス費用は抑えたい</li></ul><h1 id="認証認可の実現方式とAuth0の立ち位置"><a href="#認証認可の実現方式とAuth0の立ち位置" class="headerlink" title="認証認可の実現方式とAuth0の立ち位置"></a>認証認可の実現方式とAuth0の立ち位置</h1><p>実現方法は大きく・フルスクラッチ、OSS、SaaSがあると思いますが、Auth0はSaaSのプロダクトとなります。<br>図中には代表的なプロダクトを掲載しています。<br>個別のプロダクトの詳細は今回割愛いたします。</p><ul><li>方式の特徴</li></ul><table><thead><tr><th align="center">特徴</th><th align="center">スクラッチ</th><th align="center">OSS</th><th align="center">SaaS</th></tr></thead><tbody><tr><td align="center">機能</td><td align="center">すべて自分で設計可能</td><td align="center">OSS依存</td><td align="center">SaaS依存</td></tr><tr><td align="center">データ</td><td align="center">自環境内に保持可能</td><td align="center">→</td><td align="center">SaaS基盤に一部からすべてのデータを保存する可能性がある</td></tr><tr><td align="center">非機能</td><td align="center">すべての要件に応じることが可能</td><td align="center">→</td><td align="center">SaaS基盤に依存(※)</td></tr><tr><td align="center">運用・保守</td><td align="center">障害・セキュリティ対応を自チームで対応する必要がある</td><td align="center">→</td><td align="center">SaaSの保証範囲内であれば、障害対応・セキュリティ対応が自動で行われる</td></tr><tr><td align="center">※SaaSによっては個別環境を建てることが可能な場合もあり、この場合はすべての要件に応じることが可能</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><img src="/images/20200122/1.png" style="border:solid 1px #000000"><h1 id="Auth0で実現できる事（機能目次レベル"><a href="#Auth0で実現できる事（機能目次レベル" class="headerlink" title="Auth0で実現できる事（機能目次レベル"></a>Auth0で実現できる事（機能目次レベル</h1><h2 id="機能要約"><a href="#機能要約" class="headerlink" title="機能要約"></a>機能要約</h2><p>詳細は、以下のとおりですが、要約するとこんな形になります。</p><ul><li>OIDC/OAuth2を利用した認証・認可が可能</li><li>画面はAuth0側で自由に作り込みが可能（アプリ内に画面を自分で作り込んで持つことも可能）</li><li>ソーシャル連携が可能（ボタンをオン・オフすると、標準画面にソーシャルログインボタンが出現します）</li><li>MFAが可能</li><li>パイプライン・HOOK機能で、サインアップ・サインイン等、特定のアクションにlambda的なロジックの挟み込むことが出来る</li></ul><h2 id="作り込みが発生する要素"><a href="#作り込みが発生する要素" class="headerlink" title="作り込みが発生する要素"></a>作り込みが発生する要素</h2><p>Auth0は認証情報（メールアドレス・パスワード）以外の情報をAuth0内部に持つことを推奨していないため、個人情報の管理は自分で持つ（構築する）必要があります。<br>おそらくこれが、Auth0を利用する上での最も大きい作り込み要素となります。</p><h2 id="Auth0のメニュー"><a href="#Auth0のメニュー" class="headerlink" title="Auth0のメニュー"></a>Auth0のメニュー</h2><p>※すいません、以前自分でQiitaにまとめたものを転載しています。</p><table><thead><tr><th>機能名</th><th>概要</th></tr></thead><tbody><tr><td>tenant</td><td>auth0上で複数のサービスを展開したい場合に利用する機能<br>UserDB/Rule/Hooksなどの機能全般を分離して扱うことが可能になる</td></tr><tr><td>applications</td><td>認証につなぐアプリケーション単位にアプリケーションを定義する機能<br>認証後のコールバック画面などを個別に定義可能となる</td></tr><tr><td>APIs</td><td>認証後に認可させるAPIの定義機能</td></tr><tr><td>SSO</td><td>アプリケーション間でログインを共有する機能</td></tr><tr><td>Connections-Database</td><td>認証情報・ユーザ情報を管理</td></tr><tr><td>Connections-Social</td><td>ソーシャル連携機能<br>トグルボタンのオンオフでログイン画面に連携ボタンが出てくる</td></tr><tr><td>Connections-Enterprise</td><td>LDAP/AD/SAMLなどのエンタープライズ認証連携機能</td></tr><tr><td>Connections-Passwordless</td><td>SMSログイン、メールログインなどのパスワードレス接続を設定する機能</td></tr><tr><td>Universal Login</td><td>Auth0の組み込み画面（ログイン/パスワードリセット..etc）のデザインを変更できる機能</td></tr><tr><td>Rules</td><td>認証のパイプラインファンクションを追加できる機能<br>ログイン後にユーザ属性追加するなど、認証後のカスタマイズできる</td></tr><tr><td>Hooks(BETA)</td><td>認証・ユーザ登録・ユーザ登録前にフック処理を追加できる機能</td></tr><tr><td>Multi-factor Authentication</td><td>多要素認証を追加できる機能<br>プッシュ/ワンタイムパスワード/SMS/メールなどで実現可能</td></tr><tr><td>Emails</td><td>Auth0の組み込まれているメール文章の変更機能<br>ウェルカムメール、パスワードリセット、アカウント検証メールなどの文章を変更できる</td></tr><tr><td>Logs</td><td>loggingの定義機能</td></tr><tr><td>Anomaly Detection</td><td>不正登録・アクセスからの保護機能<br>Brute-force Protection/Breached-password Detection</td></tr><tr><td>Extensions</td><td>サードパーティー制のアドオンを追加できる機能<br>github・ユーザのインポート/エクスポート等との連携ができる<br>つなげるサービスとの契約は個別に必要</td></tr><tr><td>custom domein</td><td>独自のドメインを設定できる機能<br>ドメインの契約は自分でやる必要がある</td></tr></tbody></table><h1 id="Exampleを動かすまでのhow-to"><a href="#Exampleを動かすまでのhow-to" class="headerlink" title="Exampleを動かすまでのhow-to"></a>Exampleを動かすまでのhow-to</h1><p>なにはともあれ、ハンズオンして動かしてみます。<br>いわゆる<code>やってみた</code>ってやつですね。</p><h2 id="0-前提"><a href="#0-前提" class="headerlink" title="0. 前提"></a>0. 前提</h2><p>サインアップ済みであること</p><h2 id="1-ダッシュボードから初期設定を実行します。"><a href="#1-ダッシュボードから初期設定を実行します。" class="headerlink" title="1. ダッシュボードから初期設定を実行します。"></a>1. ダッシュボードから初期設定を実行します。</h2><img src="/images/20200122/photo_20200122_01.png"><h2 id="２-サンプルアプリケーションを動かし、Auth0と繋ぎます。"><a href="#２-サンプルアプリケーションを動かし、Auth0と繋ぎます。" class="headerlink" title="２. サンプルアプリケーションを動かし、Auth0と繋ぎます。"></a>２. サンプルアプリケーションを動かし、Auth0と繋ぎます。</h2><img src="/images/20200122/photo_20200122_02.png"><p>ここまででサンプルアプリケーションが、Auth0を認証局として利用し、認証・認可を実装出来た形になります。</p><h1 id="ソースコードを見てみる"><a href="#ソースコードを見てみる" class="headerlink" title="ソースコードを見てみる"></a>ソースコードを見てみる</h1><p>詳細は次回以降になりますが、ログイン処理の実装を見てみます。</p><p>まず実装しているコンポーネントはNavBarであることが分かります。<br><img src="/images/20200122/photo_20200122_03.png" style="border:solid 1px #000000"></p><h2 id="1-ログイン状態を確認"><a href="#1-ログイン状態を確認" class="headerlink" title="1. ログイン状態を確認"></a>1. ログイン状態を確認</h2><p>25行目付近<br><code>$auth.isAuthenticated</code> を確認し、ログインしていなければ、ログインボタンを表示します。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-if</span>=<span class="string">"!$auth.isAuthenticated &amp;&amp; !$auth.loading"</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">"qsLoginBtn"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"btn btn-primary btn-margin"</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click.prevent</span>=<span class="string">"login"</span></span></span><br><span class="line"><span class="tag">    &gt;</span>Login<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-on-clickでlogin実行"><a href="#2-on-clickでlogin実行" class="headerlink" title="2. on clickでlogin実行"></a>2. on clickでlogin実行</h2><p>99行目付近<br><code>this.$auth.loginWithRedirect()</code> によって、ログイン処理（モーダル呼び出し）が行われ、ログイン後はcallbackURLにリダイレクトされます。</p><p>callback先は、アプリケーション設定画面に合ったこちらです。<br><img src="/images/20200122/photo_20200122_04.png" style="border:solid 1px #000000"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  login() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$auth.loginWithRedirect();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ログイン処理を実装するだけであればこれだけです。</p><h1 id="この処理で実装した認証Flow"><a href="#この処理で実装した認証Flow" class="headerlink" title="この処理で実装した認証Flow"></a>この処理で実装した認証Flow</h1><p>詳細は以下のものとなりますが、SPAの場合は今回の数行の実装で <code>Authorization Code Flow</code> を踏むことが出来たことになります。<br>※ てっきり<code>Implicit Flow</code>だと思っていたんですが、この記事を書いているときに<code>Authorization Code Flow</code>だって指摘されました。<br>※ <code>ライブラリのコード読まないとだめだよね</code>って言われて悔しかったです。<br><a href="https://auth0.com/docs/flows" target="_blank" rel="noopener">https://auth0.com/docs/flows</a></p><img src="/images/20200122/photo_20200122_05.png" style="border:solid 1px #000000"><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>何度か認証・認可の仕組みを作る機会があった中で、Auth0を触ったのですが、globalで使わているプロダクトの凄みを感じました。<br>今後も、余程の要件がない限り（データを持ち出せない場合、どうしてもSaaSでは機能が実装できない場合など）SaaSを中心に選定していくことになると思います。<br>何より、認証・認可は本来のビジネスの中心ではないため、可能な限り省力化して実装したい場合が多いのではないでしょうか？</p><p>このブログ記事ではAuth0の導入までを紹介しましたが、次回以降はより実践的な利用法について触れていきたいと思います。</p><hr><p>関連記事：</p><ul><li><a href="/articles/202001223/">Auth0 EmailまたはSMSを使ったパスワードレス認証を設定する</a></li><li><a href="/articles/20200128/">Auth0のRulesを使って認証認可を自在にカスタマイズする</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li><li><a href="/articles/20191009/">AWS Session Managerでセッションを切断されにくくする方法</a></li><li><a href="/articles/20191029/">フロントエンドでシステム開発を2年半続けてハマったことから得た教訓3つ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;始めに&quot;&gt;&lt;a href=&quot;#始めに&quot; class=&quot;headerlink&quot; title=&quot;始めに&quot;&gt;&lt;/a&gt;始めに&lt;/h1&gt;&lt;p&gt;様々なシステムを構築する中で必ず発生する要素&lt;br&gt;&lt;strong&gt;ログイン&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;そのログインを支える技
      
    
    </summary>
    
      <category term="認証認可" scheme="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/"/>
    
    
      <category term="Auth0" scheme="https://future-architect.github.io/tags/Auth0/"/>
    
      <category term="Vue.js" scheme="https://future-architect.github.io/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>スロットリングとの付き合い方</title>
    <link href="https://future-architect.github.io/articles/20200121/"/>
    <id>https://future-architect.github.io/articles/20200121/</id>
    <published>2020-01-20T23:52:16.000Z</published>
    <updated>2020-01-21T00:13:04.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXチームの村瀬です。</p><p>Googleで「スロットリング」で検索するとパチスロのリングが沢山ヒットするんですね。<br>今回はその「SLOT リング」ではなく「throttling」関して記載します。</p><h1 id="スロットリングとは"><a href="#スロットリングとは" class="headerlink" title="スロットリングとは"></a>スロットリングとは</h1><p>一定時間内に受信可能なリクエスト数を制限し、制限を上回るリクエストがなされた際には受信を拒否しエラーコードを返却すること。時間経過により再び受信可能となる仕組みです。</p><p>リクエスト数を制限することでシステムにかかる負荷を抑えたり、スパムメールの送信を防止するのに利用されます。</p><p>SaaSであれば有限のコンピューティングをみんなでシェアするのでより多くの人が快適に利用できるよう、一部のユーザからの大量リクエストを制限するのに利用されます。もし無制限にリクエストを受け入れたとするとシステムに負荷がかかり、クライアントへのレスポンスに時間を要したり待たされた挙句にタイムアウトしてしまいます。</p><img src="/images/20200121/1.png" style="border:solid 1px #000000"><p>これは大人気の遊園地が入場制限することで、入場済みの来場者に快適に過ごしてもらうことに似ています。入場前の来場者にとっては好ましくありませんが。。。</p><h1 id="受信拒否時の対応方法"><a href="#受信拒否時の対応方法" class="headerlink" title="受信拒否時の対応方法"></a>受信拒否時の対応方法</h1><p>リクエストする側としては受信拒否されないに越したことはありませんが、拒否された際には以下の対応をするとお行儀が良いです。<br>・少し待ってからリトライする。<br>・ユーザに対してしばらく経ってから再度アクセスするようにアナウンスする。</p><p>遊園地で入場制限がかかるとその日の入園は絶望的で遠方から訪れていると大変がっかりしますが、コンピュータの世界では極短時間です。システムにもよりますが数秒待ってからリトライしてみましょう。一定回数リトライしてみてダメならユーザにしばらく経ってから再度アクセスするようにアナウンスしましょう。</p><h1 id="リトライに一手間加えてスループットを向上させよう"><a href="#リトライに一手間加えてスループットを向上させよう" class="headerlink" title="リトライに一手間加えてスループットを向上させよう"></a>リトライに一手間加えてスループットを向上させよう</h1><p>一定時間待ってからリトライしようとすると同一タイミングで受信拒否されたアクセス数分一斉にアクセスすることになり再度受信拒否されてしまう可能性が高いです。<br>ここは工夫が必要です。<br>方法はいくつもあると思いますがExponential Backoff And Jitterのテクニックが効果的です。<br>詳細は<a href="https://aws.typepad.com/sajp/2015/03/backoff.html" target="_blank" rel="noopener">AWS Solutions Architect ブログ</a>にまとめられているのでそちらをご覧ください。</p><p>少しだけ説明します。</p><h2 id="Exponential-Backoff"><a href="#Exponential-Backoff" class="headerlink" title="Exponential Backoff"></a>Exponential Backoff</h2><p>リトライの間隔を倍々に増加させてく手法<br>例えばリトライの度に1秒,2秒,4秒,8秒と待ち時間を増やしていく。<br>※あくまで例示ですので適切な時間を経過したらエラーであることをユーザにアナウンスしたほうがユーザーフレンドリーです。</p><h2 id="Jitter"><a href="#Jitter" class="headerlink" title="Jitter"></a>Jitter</h2><p>リトライの間隔にばらつきを持たせる手法<br>クライアント毎にランダムな秒数待ってからリトライする。</p><h2 id="Exponential-Backoff-And-Jitter"><a href="#Exponential-Backoff-And-Jitter" class="headerlink" title="Exponential Backoff And Jitter"></a>Exponential Backoff And Jitter</h2><p>リトライの間隔を倍々に増加させた上でばらつかせる</p><img src="/images/20200121/photo_20200121_01.png" class="img-middle-size" style="border:solid 1px #000000">上図は[AWS Solutions Architect ブログ](https://aws.typepad.com/sajp/2015/03/backoff.html)より引用<p>これらのリトライ手法により単位時間あたりのアクセス数が低減でき、スロットリングの受信拒否が起きにくくなります。</p><h1 id="受信拒否の回避方法"><a href="#受信拒否の回避方法" class="headerlink" title="受信拒否の回避方法"></a>受信拒否の回避方法</h1><p>システムにより状況は異なると思われますが概ね以下のような対応が必要です。<br>・受信拒否される要因を分散させる。<br>　送信元のメールアドレスやIPアドレス、APIキーが要因となりえます。<br>・適切にキューイングやWAITを入れ単位時間あたりのリクエスト数を制限する。</p><h1 id="スロットリングを実装する場合"><a href="#スロットリングを実装する場合" class="headerlink" title="スロットリングを実装する場合"></a>スロットリングを実装する場合</h1><p>これまでスロットリングされているサービスを利用する側の視点で説明してきましたが、反対に自分のサービスにスロットリングを実装することを考えてみましょう。</p><p>単位時間あたりのリクエスト数を正確に計測しようとするとRDBMSを利用してリクエストの度にINSERTし、単位時間あたりのリクエスト数を確認する為にSELECTするなどが必要になります。スロットリング処理の割合が高くなり、本来行うべき処理に支障をきたすのでゆるい制御をすることをおすすめします。</p><p>簡易的に行うのであればリクエスト毎の同期処理で閾値判定処理をするのではなく非同期処理で閾値判定し超えていたら一定時間受信を拒否する仕組みが良いと思います。</p><h2 id="簡易的なスロットリングの仕組み"><a href="#簡易的なスロットリングの仕組み" class="headerlink" title="簡易的なスロットリングの仕組み"></a>簡易的なスロットリングの仕組み</h2><p>APIキーを用いてスロットリングされるものとして説明します。</p><img src="/images/20200121/2.png" style="border:solid 1px #000000"><p><strong>サービスプロセス</strong><br>1.クライアントからサービスへAPIキーを付与してアクセスする<br>2.APIキーを含めたアクセスログを出力する<br>3.受信拒否するかどうかAPIキーに対応するロック状態を取得する<br>4.ロック状態により正常なレスポンスか受信拒否のレスポンスを返却する</p><p><strong>スロットリング制御プロセス</strong><br>1.定期的にアクセスログを取得する<br>2.直近の単位時間あたりのアクセス数をAPIキー毎にカウントし、閾値を超えている場合はロック、超えていない場合は非ロックの状態に変更する</p><p>これらにより重い処理はスロットリング制御プロセスが担い、サービスプロセスに負荷をかけずにスロットリング処理が実現できます。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>一部の利用者のせいでその他の利用者が不快な思いをしないようにする仕組みであるスロットリング。この仕組みのおかげで大多数の利用者が快適にサービスを利用できます。サービスを利用する場合でもサービスを提供する場合でも他の利用者のことを考慮し適切な対応を心掛けましょう。</p><hr><p>関連記事：</p><ul><li><a href="/articles/20191206">AWS Glueの単体テスト環境の構築手順</a></li><li><a href="/articles/20191101/">AWS Glueの開発エンドポイントがそこそこお高いのでローカル開発環境を用意しました</a></li><li><a href="/articles/20191009/">AWS Session Managerでセッションを切断されにくくする方法</a></li><li><a href="/articles/20190902/">AWS IAMロールの信頼関係の気になる動作</a></li><li><a href="/articles/20180828">5TB/日 のデータをAWS Glueでさばくためにやったこと（概要編）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXチームの村瀬です。&lt;/p&gt;
&lt;p&gt;Googleで「スロットリング」で検索するとパチスロのリングが沢山
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="GCP" scheme="https://future-architect.github.io/tags/GCP/"/>
    
  </entry>
  
  <entry>
    <title>工場をハックするための基本知識　後編</title>
    <link href="https://future-architect.github.io/articles/20200120/"/>
    <id>https://future-architect.github.io/articles/20200120/</id>
    <published>2020-01-20T00:59:49.000Z</published>
    <updated>2020-01-20T23:48:35.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、DXチームの栗田です。前回は<a href="/articles/20191023/">工場をハックするための基礎知識　前編</a>として、制御系システムがどのような構成になっていて、ハードウェア的に何を気にしなければならないかについて述べました。後編では、制御系としてどのような機器がどのような仕組みで動いているか、それらの機器とどのようなやり取りをする必要があるか、さらにどのようなことに気を付けて実装していかなければならないかについて述べます。</p><p>ただし、本記事で「実装する」とはソフトウェア的な作業を指し、ハードウェア的な作業を指しません。つまり、以下で「実装する」という言葉はプログラムコーディング等の行為を指し、電力線を埋設したりカメラを設置したりといった工事等の行為は指さないことにします。</p><h1 id="制御系システムの各機器について"><a href="#制御系システムの各機器について" class="headerlink" title="制御系システムの各機器について"></a>制御系システムの各機器について</h1><p>前編ではPLCやDCSといった名称だけをあげましたが、それらが具体的にどのような仕組みを持っているのか、どうしてそのようなシステムができてきたのかを理解することは非常に大切です。技術が生まれてきた背景を正しく知ることで、その技術をどのように扱うべきかを理解することができます。最初に、制御系システムの特性によって、2種類の分け方を紹介します。前者はそもそもの制御手法の分類として、後者はプラントにおける制御系システムの役割の分類としてです。</p><p>一般的に制御系システム（あるいは制御系）とは、他の機器やシステムを管理し制御するためのシステムを指します。制御系システムは論理制御（逐次制御）とフィードバック制御（線型制御）の２つに大まかに分類されます。細かく分類するとオン／オフ制御やファジ論理制御、さらにはPID制御や比例制御などがありますが、それらの詳細については触れません。</p><p>続いて、制御の特性として、電気系制御システムと計装系制御システムに分類されます。プラントにおいて必要な信号を送る動力源の役割を担うものを電気系制御システムといい、一方で各部の状態を検知し統括して制御する中枢の役割を担うのが計装制御系システムといいます。</p><p>以降では前者の具体的な制御手法の仕組みの話はせず、後者の各制御系システムについてどのようなものがあるかを紹介していきます。</p><h2 id="電気系制御システム"><a href="#電気系制御システム" class="headerlink" title="電気系制御システム"></a>電気系制御システム</h2><p>工場内の電気系システムというと、</p><ol><li>エネルギーとしての電気を受電・変圧し、各設備に供給し</li><li>更にON/OFF信号によって電動機を動かす</li></ol><p>を行います。前者について、工場内の電源供給は各設備取り付けを担う部隊が担当したり、適切な物理接点を設けて電源のやり取りしたり様々なケースがあります。電源供給については今回は触れず<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>、後者のON/OFF信号を生成する仕組みについて触れていきます。</p><h3 id="リレー"><a href="#リレー" class="headerlink" title="リレー"></a>リレー</h3><p>リレー（継電器, relay）は、外部から電気信号を受け取り、電気回路のオン/オフや切り替えを行う部品およびその総称です。部品内部に物理的な接点を持つかでスイッチのような有接点リレー（メカニカルリレー）と無接点リレー（MOS FETリレーなど）に分けられますが、後者は半導体や電子部品で構成されます。工場では主に前者のメカニカルリレーが使われ、後者は電子機器等で用いられます。</p><p>メカニカルリレーの場合、物理的な接点があるためわかりやすいです。<br><img src="/images/20200120/photo_20200120_01.png"><br>メカニカルリレーにも複数の種類があり、例えば灯りを点けるスイッチもリレーの一種です。他にはマグネットコンダクタ（電磁継電器, Magnet Conductor; MC）などがあり、MCは内部にコイルと鉄心が入った構成になります。外部から電流が流れることにより内部のコイルが電磁石化し、鉄心が動いて電気回路の接点が開く or 閉まる動作を取ります。<br><img src="/images/20200120/photo_20200120_02.png"><br>メカニカルリレーは、物理的接点を持つため稼働時に音が鳴ります。工場の電気室など、カチャカチャ動作音が鳴っており、初めて入られた際は驚くかもしれません。なお、リレーはタイマー機能を持つものもあり、いくらか遅延時間を設けることもできます。</p><h3 id="PLC"><a href="#PLC" class="headerlink" title="PLC"></a>PLC</h3><p>リレーは簡単に制御回路を組める一方で、動作の変更にはハードウェアの変更が伴います。その点、ソフトウェア的に動作の変更を行えるのがPLCです。PLCはProgrammable Logic Controllerのことで、リレー装置の代替として開発された制御装置です。一般的にシーケンサ<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>とも呼ばれ、工場の機器の制御などに使われる他、身近な設備の制御にも使われています。PLCはソフトウェア的な制御をしますが、IT技術者の領域ではなく、電気技術者の領域に属する制御装置です。いわゆる一般的なPCのように、CPUや電源やI/Oモジュールの組み合わせによって成り立ち、各種拡張モジュールを追加し、様々な機能を付与することができます。なお、IT技術者が最も気になるだろうことを最初に書きますが、PLCにはLANケーブル用のモジュールがあり<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>、TCP/IP通信を行うことができます<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>。</p><p>PLCの入出力は基本デジタルであり、各種機器と通信を行います。リミットスイッチ（Limit Switch; LS）<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>のような1 or 0で表現されるものはわかりやすいですが、レベル計<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>などの数値情報は、例えば必要bit分のI/Oを確保して演算します。電流あるいは電圧入出力を行い、特定の閾値でON/OFFが判定されます<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>。また、PLCがアナログ入出力を扱う方法もあります。その際は、ADC/DAC<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>機能を持ったI/Oモジュールを使用します。</p><p>PLC自体は、ラダー言語というリレー回路を模した言語で実装します。ラダー言語はリレー回路を記号化した表記で実装でき、Xで示される入力とYで示される出力、そしてMで表現される内部リレーによって構築される論理回路です。ラダー言語の特徴は、<b>スキャン</b>という概念です。ラダー言語は記述された内容を反復的に実行しますが、「ラダーは記述した順にしか処理をしない」というような特徴があります。つまり、C言語などの多くのプログラム言語で見られれる「先に関数を定義してあとからその関数をコールする」という処理ができず、上から順番に処理を実行する<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup>しかありません。そして上から順番に処理を実行するという特性上、ラダー言語の記述量や処理が重くなると、スキャンタイム<sup id="fnref:10"><a href="#fn:10" rel="footnote">10</a></sup>は大きくなるという特徴があります。</p><img src="/images/20200120/photo_20200120_03.png"><p>IT技術者からするとクセが強く見えるかも知れないラダー言語ですが、前述のようにリレー回路を図式化されており、かつ記述された順番でしか処理が実行されないというシーケンシャルな特徴があります。いくらか慣れが必要ですが、紙面上に印刷することによって比較的処理を追いやすいこともあります。</p><h3 id="なぜPLCやリレー回路がなくならないか"><a href="#なぜPLCやリレー回路がなくならないか" class="headerlink" title="なぜPLCやリレー回路がなくならないか"></a>なぜPLCやリレー回路がなくならないか</h3><p>物理的なIN/OUTを受け入れるだとか、ソフトウェア的な操作が可能化などの観点で使い分けることができます。以下に、大まかな特性をまとめます。</p><table><thead><tr><th align="left"></th><th align="left">制御方法</th><th align="left">長所</th><th align="left">弱点</th><th align="left">特徴</th></tr></thead><tbody><tr><td align="left">リレー</td><td align="left">スイッチ(MCなど)やタイマー</td><td align="left">・規模が小さければ安価に構築可<br>・テスターで保守メンテ可<br>・物理的に電流を遮断可</td><td align="left">・物理接点があるため開閉回数に寿命がある<br>・動作の変更にハード変更が伴い大変</td><td align="left">ブレーカあるいはモーターの制御など大きな電流が流れるような回路を操作するときに使える</td></tr><tr><td align="left">PLC</td><td align="left">ラダー言語</td><td align="left">・無接点なので接点による寿命がない<br>・メモリ上に実装される内部リレーをつかうため入出力点数が増えない<br>・タイミング管理が比較的簡易</td><td align="left">・メンテナンスに専用ツールやソフトが必要<br>・大規模あるいは高度なアルゴリズムの実装には不向き</td><td align="left">現場制御機器のON/OFFなどリアルタイム制御が求められる場面で使える</td></tr><tr><td align="left">PC</td><td align="left">ソフトウェア</td><td align="left">・OSと各種ライブラリによって複雑な制御が可能<br>・安価に高性能なハードを調達可能</td><td align="left">・割り込みがありリアルタイム制御に難<br>・I/FがPLCほど豊富ではない</td><td align="left">実績管理や制御指令を行い人間が直接操作をするような場所に使える</td></tr></tbody></table><p>昨今のPCは非常に強力な演算能力と豊富な拡張モジュールを要していますが、特にリレーといったハードウェア的に制御が可能な機器が根絶されることは難しいと考えます。その際たる理由として、2つ挙げます。一つは、ソフトウェア的な処理は電気的なノイズに弱いことです。例えば、地球には宇宙から飛来した荷電粒子が大気圏に突入した際に生じるミューオンなどの荷電粒子が地上に降り注いでいますが、<b>電荷を持った粒子がメモリなどの素子を通過するとそこにエネルギーを落とす</b>ことで、メモリを反転させるなど素子の状態に影響を与えます<sup id="fnref:11"><a href="#fn:11" rel="footnote">11</a></sup>。これが例えば発電所の主電源のON/OFF制御などで発生してしまうと、大変な事故に繋がります。なので、重要な設備などには極力シンプルなハードウェアが好まれます。もう一つは、重要な設備に対しては機械的な制御が不可欠なことです。例えば、工場内のモーターに大電力を供給するケーブルが短絡（ショート）したとすると、そこに大電流が流れ込みます。工場に引き込んでいる電力は決まっているので、突然一箇所で大量の電力が消費されてしまった場合、他の機器を動かす電力が足りなくなります。こういったときに確実かつ即座に短絡（ショート）した部分のブレーカーを操作して、切り離す必要があります。これも確実にハードウェアを動かす必要があります。</p><p>PLCについても、リアルタイム性や拡張性を考えるとPCに勝る部分は多くあります。そのため、これらの機器は今後も互いの領分を侵食するのではなく、補い合う形で制御系を支えていく必要があります。</p><h2 id="計装系制御システム"><a href="#計装系制御システム" class="headerlink" title="計装系制御システム"></a>計装系制御システム</h2><p>計装とは「計測器を装備すること」を指します。工場の中では多くの機械が稼働しており、これらの機械が安全に動作しているかを確認するために各種計測器（センサ）を設置する必要があります。それらセンサから情報を取得し、監視あるいは適切な制御を行うことが計装制御の役割です。</p><p>工場における計装制御は、1970年頃までは監視盤にシングルループコントローラ<sup id="fnref:12"><a href="#fn:12" rel="footnote">12</a></sup>が並んだパネル計装制御が主でした。一方、1970年中頃から、計装メーカの開発したDCS(後述)が採用されるようになっていきました。。</p><h3 id="DCS"><a href="#DCS" class="headerlink" title="DCS"></a>DCS</h3><p>DCS(Distributed Control System)は、監視・フィードバック制御・シーケンス制御などの機能を持つ計測制御用のシステムです。従来は個別のシングルループコントローラが横に並んだ構成だったのに対し、DCSはモニタによる監視と機能ごとに演算処理（CPU）を分割されました。つまり、DCSは何らかの特徴を持った機器を指すのではなく、計装制御という目的を達成するために複数の機器が組み合わさってできたシステムの総称を指します。</p><h1 id="制御系開発と工場のIT化"><a href="#制御系開発と工場のIT化" class="headerlink" title="制御系開発と工場のIT化"></a>制御系開発と工場のIT化</h1><p>Web系や基幹系あるいは情報系の開発をしてきた方だと、例えばエッジにあった制御機構をクラウドに移管し、遠隔であらゆる操作ができるようにしたいと考えるかも知れません。確かに、技術的には可能ではありますが、それ以外の理由で実施すべきではないケースがあります。ここでは、工場にIT化をする上で気にすべき要素をいくつか述べていきます。</p><h2 id="機械安全"><a href="#機械安全" class="headerlink" title="機械安全"></a>機械安全</h2><p>機械設備による労働災害は依然として存在し、特に製造業における死傷災害全体の約4割<sup id="fnref:13"><a href="#fn:13" rel="footnote">13</a></sup>とされます。これは機械のエネルギーが非常に大きいことから、挟まれ・巻き込まれなどによって身体の欠損や死亡災害が至りやすいためです。製造業用の機械であればその使用状況は予め想定可能なので、設計段階でリスクアセスメント<sup id="fnref:14"><a href="#fn:14" rel="footnote">14</a></sup>を実施し、使用者が極力安全に仕事ができるような取り組みを行うことができます。</p><h3 id="機械安全の3原則"><a href="#機械安全の3原則" class="headerlink" title="機械安全の3原則"></a>機械安全の3原則</h3><p>機械の安全化をすすめる上での大前提は、以下の3つです。</p><ol><li>人はミスをする</li><li>機械は故障する</li><li>絶対安全は存在しない</li></ol><p>この文言自体はIT技術者にも納得行くものだと考えますが、これと合わせて、機械災害を確実に防止するために、<b>機械安全の原則</b>があります。</p><ol><li>本質安全の原則：　危険要素（危険源）を除去、あるいは人に危害を与えない程度にします。角を丸くしたり、機械のパワーを小さくしたりします。</li><li>隔離の原則： 人が機械の危険源に接触できないようにします。例えば、（人の指も通らないような網目の）柵でガードを設ける方法などがあります。</li><li>停止の原則：　機械が止まっていれば危険ではなくなるので、「隔離の原則」で隔離された機械の動作範囲に入る場合は、インターロックなどで機械を停止させてから入場を許可するようにします。このとき、ブレーカーに修理札<sup id="fnref:15"><a href="#fn:15" rel="footnote">15</a></sup>をかけるなどして動力源自体を確実に切るようにしますが、油圧を使っている設備の場合は注意が必要です。油圧の場合、動力源（実際は電力を供給するブレーカー）を落としたとしても、ゆっくりと油圧によって設備が動作することがあります。そのため、停止させたと思った設備が気づいたら迫っていて挟まれる、などということがあるため、注意が必要です。</li></ol><img src="/images/20200120/photo_20200120_04.png"><p>上記の前提があるため、工場の制御系システムの開発者は、想定外の操作に対しては必ず安全な結果をもたらす（ex.インターロックにかかって動かない、など）システムを構築しようとします。こういったシステムを、新たにクラウドから操作することを考えます。</p><p>なお、余談ではありますが、運転中あるいは停止中を意味するランプの色ですが、これ一つとっても工場によっては意味が異なります。ある工場では「赤は<b>危険を意味する</b>色だから運転中、緑は<b>安全を意味する</b>色だから停止中」で使われますが、別の工場では「緑は<b>安定動作を意味する</b>色だから運転中、赤は<b>異常を意味する</b>色だから停止中」で使われていることもあるので注意が必要です。</p><h2 id="セキュリティ"><a href="#セキュリティ" class="headerlink" title="セキュリティ"></a>セキュリティ</h2><p>これまで何度か述べたように、従来の工場の制御系はセキュリティ的に非常に弱いケースがあります。特にNWを独立させることを前提にリアルタイム制御を目的としてウイルス対策ソフトやファイアウォールを犠牲にしていることもありますので、一度攻撃を受けると非常に弱い場合があります。そのため、工場IoTの名のもとに制御系のPCを他のNWと接続する場合、接続点に別途ファイアウォールを設けて特定の通信のみを許容するようにしたり、極端なことを言うと必要のないUSBポートをすべて埋めたりなどの対応が必要になります<sup id="fnref:16"><a href="#fn:16" rel="footnote">16</a></sup>。仮に制御系PCにウイルス対策ソフトを入れたとしても、今度は制御システムがアクセスしたいファイルが、ファイルスキャンによってロックされたままになりリアルタイム制御に影響が出るなどがあります。使用する目的と状況に応じて、ソフトウェア・ハードウェアの両面で対策をする必要があります。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ここまで読んで頂いた皆様の中には、IT分野において豊富な知識と熟練のスキルを併せ持った方もいるかと思います。そんな方こそ、工場制御系にはこれまで相手にしてきたのとは異なるシステムが導入されており、それが電気系技術者たちによってどのように構築されてきたのかを知っていただきたいです。両者が融合することで、真の工場のIT化が行えると考えます。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.nipponsteel.com/tech/report/nssmc/pdf/411-04.pdf" target="_blank" rel="noopener">製鉄プロセス制御への汎用システム適用技術の開発</a></li><li><a href="https://www.ipc-ihi.co.jp/business/project/electrical/index.html" target="_blank" rel="noopener">株式会社IHIプラント電気系総設計</a></li><li><a href="https://www.jemima.or.jp/tech/1-04-02.html" target="_blank" rel="noopener">分散制御システム：DCS（ディジタル計装制御システム）</a></li><li><a href="https://www.kobelco-eco.co.jp/development/docs/017_05.pdf" target="_blank" rel="noopener">新型DCSの中規模プラントへの適用</a></li><li><a href="https://www.jisha.or.jp/oshms/machinery/about01.html" target="_blank" rel="noopener">JISHA 機械安全</a></li><li><a href="http://www-vlsi.es.kit.ac.jp/thesis/papers/pdfs/201701_KASOKUKI_kobayashi.pdf" target="_blank" rel="noopener">半導体の耐性試験-加速器によるシングルイベント耐性の実測評価-</a></li></ul><hr><p>関連記事：</p><ul><li><a href="/articles/20191018/">第1回社内ロボコン開催記-ライントレーサー編-</a></li><li><a href="/articles/20190826/">ソフトとハードの垣根を越えろ - IoTハードウェアの開発をソフト屋視点で解説します</a></li><li><a href="/articles/20190723/">Future IoTのstackshareを公開しました</a></li><li><a href="/articles/20170127/">3Dプリンタを使ってサービス開発やってみた</a><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">電源供給について詳細に記述すると、トランス（変圧器）の仕組みから、保護継電器（※後述）や遮断器、はたまた高電圧における送電ロスについて述べることができますが、ここでは触れません。ちなみに、保護継電器についてですが、電気系統上同じ電源を持つ設備のうち、一つが暴走あるいは地絡（ショート）などした場合、爆発的に電力が流れ込むことがあります。すると、本来他の電気設備に供給すべき電力まで吸い込んでしまい、結果として健全な設備を電気不足で止めてしまうことになります。これを避けるため、保護継電器という特殊な回路を使って、事故が置きた場所を適切に切り離します。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">シーケンサというと三菱電機の製品名ですが、登録商標ではありません。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">機器によります。</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;">機器によります。</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">5.</span><span style="display: inline-block; vertical-align: top;">リミットスイッチは移動する機器などの位置を検出するセンサです。小さなスイッチを内部に持ち、機械操作を受けてオン/オフ情報を出力します。例えばラインの終端にボタンを置いておき、商品が流れてきたときにボタンを押すことで信号を出すような目的で使います。</span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">6.</span><span style="display: inline-block; vertical-align: top;">レベル計は液面等の残量を測るための装置で、具体的には特定の位置から液面までの距離を測るなどの機能を有するセンサです。様々な方式があり、超音波を利用するタイプや、釣りで使われるような&quot;浮き(フロート)&quot;を利用するタイプもあります。</span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">7.</span><span style="display: inline-block; vertical-align: top;">閾値でON/OFFといっても、例えば24VDC（※後述）の入出力を持つPLCの場合、きれいに12VDCでON/OFFが変化されるわけではありません。回路には当然ノイズが生じうるため、それでバタバタON/OFFが切り替わっては大変です。そのため、22VDC以上でON、2VDC以下でOFFとなるようなヒステリシス制御をするなどします。なお、VDCとは直流電圧のことで、工場内で動かすモータなどは三相交流電源などがあり、太い電源が3本まとまって引かれていることもままあります。</span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">8.</span><span style="display: inline-block; vertical-align: top;">ADC = Analog Digital Converterは、アナログ信号をデジタル信号に変換する素子です。DAC = Digital Analog Converterは、デジタル信号をアナログ信号に変換する素子です。</span><a href="#fnref:8" rev="footnote"> ↩</a></li><li id="fn:9"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">9.</span><span style="display: inline-block; vertical-align: top;">プログラムの例であげると、mainループ内にすべての処理が書いてある形式です。</span><a href="#fnref:9" rev="footnote"> ↩</a></li><li id="fn:10"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">10.</span><span style="display: inline-block; vertical-align: top;">ラダー言語が一周するのに要する時間です。</span><a href="#fnref:10" rev="footnote"> ↩</a></li><li id="fn:11"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">11.</span><span style="display: inline-block; vertical-align: top;">回路によって不具合モードが異なり、それによって呼称が異なります。例えば高エネルギー粒子によりメモリやフリップフロップなどの記憶素子の記憶内容が反転すると「Single Event Upset(SEL)」と呼び、LSIに寄生するサイリスタが ON 状態となって大電流が流れ動作不良を起こすと「Single Event Latch up(SEL)」と呼びます。なお、SELとSEUを総称して、Single Event Effect(SEE)と呼ぶこともあります。ちなみに、アップセットとは、記憶あるいは伝達に使用する電荷を反転させることを指します。</span><a href="#fnref:11" rev="footnote"> ↩</a></li><li id="fn:12"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">12.</span><span style="display: inline-block; vertical-align: top;">工場をはじめ様々な産業施設で利用される、センサーからの測定値を取り込み、その値が指定した範囲内に維持するように制御信号を行うコントローラです。</span><a href="#fnref:12" rev="footnote"> ↩</a></li><li id="fn:13"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">13.</span><span style="display: inline-block; vertical-align: top;"><a href="https://www.jisha.or.jp/oshms/machinery/about01.html" target="_blank" rel="noopener">JISHA機械安全</a>に関するページより引用。</span><a href="#fnref:13" rev="footnote"> ↩</a></li><li id="fn:14"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">14.</span><span style="display: inline-block; vertical-align: top;">リスクアセスメントは、作業場所にある危険性や有害性を特定し、リスクを見積もり、優先度に応じてリスクの低減措置を行う一連の手順のことを指します。事業者はリスクアセスメントの結果に応じて、適切な労働災害防止対策を施す必要があります。</span><a href="#fnref:14" rev="footnote"> ↩</a></li><li id="fn:15"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">15.</span><span style="display: inline-block; vertical-align: top;">機械に立ち入る担当者が切断した動力源にかける札です。これは「今〇〇（名前あるいはチーム）が稼働エリアに立ち入って作業をしている」ことを示す札で、この札はかけた本人（あるいは運用次第ではそのチームの責任者）のみが外すことができ、この札が一枚でも動力源にかかっていたら、その動力源を投入してはいけません。</span><a href="#fnref:15" rev="footnote"> ↩</a></li><li id="fn:16"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">16.</span><span style="display: inline-block; vertical-align: top;">すでにPCが多くの会社で一般的に利用されていて、USBメモリを勝手に指すなどしていけないことは工場で働く方が熟知していたとしても、意外にされがちなのが「スマホを給電するためにパソコンのUSBポートに接続した」というケースです。本人は電源をとっているだけのつもりであっても、精密機械同士が接続されていることに変わりはありません。</span><a href="#fnref:16" rev="footnote"> ↩</a></li></ol></div></div></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、DXチームの栗田です。前回は&lt;a href=&quot;/articles/20191023/&quot;&gt;工場をハックするための基
      
    
    </summary>
    
      <category term="IoT" scheme="https://future-architect.github.io/categories/IoT/"/>
    
    
      <category term="Network" scheme="https://future-architect.github.io/tags/Network/"/>
    
      <category term="Factory" scheme="https://future-architect.github.io/tags/Factory/"/>
    
  </entry>
  
  <entry>
    <title>実践Drawio</title>
    <link href="https://future-architect.github.io/articles/20200116/"/>
    <id>https://future-architect.github.io/articles/20200116/</id>
    <published>2020-01-16T02:07:03.000Z</published>
    <updated>2020-01-16T03:13:01.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>もともとはMicrosof Visioなどを使って作成していた図形（ネットワーク図、各種シーケンス、ERD..etc）ですが、ファイルストレージがクラウド（GoogleDrive）に移ることで、 <strong>そのまま編集したい</strong> 欲求が世の中で増しているように思います。</p><p>その場合の有効なツールとして<a href="https://www.draw.io/" target="_blank" rel="noopener">draw.io</a>を利用するケースが増えてきたと感じます。そこで当社で蓄積したナレッジを文章化します。</p><h1 id="Draw-io-Tips"><a href="#Draw-io-Tips" class="headerlink" title="Draw.io Tips"></a>Draw.io Tips</h1><h2 id="1-ショートカット"><a href="#1-ショートカット" class="headerlink" title="1.ショートカット"></a>1.ショートカット</h2><h3 id="1-1-公式ショートカット"><a href="#1-1-公式ショートカット" class="headerlink" title="1.1. 公式ショートカット"></a>1.1. 公式ショートカット</h3><p>まずはここから始めましょう。<br>ショートカットはプロダクトの基本操作が詰まっています。<br><a href="https://about.draw.io/wp-content/uploads/2016/11/draw.io_shortcuts_basic_win_EN.pdf" target="_blank" rel="noopener">https://about.draw.io/wp-content/uploads/2016/11/draw.io_shortcuts_basic_win_EN.pdf</a></p><h2 id="2-設定"><a href="#2-設定" class="headerlink" title="2. 設定"></a>2. 設定</h2><h3 id="2-1-日本語化"><a href="#2-1-日本語化" class="headerlink" title="2.1. 日本語化"></a>2.1. 日本語化</h3><ol><li>画面右上の🌏マークから選択します</li><li>メニューが開くので、”日本語”を選択します</li></ol><h2 id="3-オブジェクト"><a href="#3-オブジェクト" class="headerlink" title="3. オブジェクト"></a>3. オブジェクト</h2><h3 id="3-1-オブジェクト内の文字が小さくなってくれないときの対応"><a href="#3-1-オブジェクト内の文字が小さくなってくれないときの対応" class="headerlink" title="3.1. オブジェクト内の文字が小さくなってくれないときの対応"></a>3.1. オブジェクト内の文字が小さくなってくれないときの対応</h3><ol><li>普通にやると一定のポイントから文字が小さくなりません<ul><li><img src="/images/20200116/1.png" class="img-small-size" style="border:solid 1px #000000">–→<img src="/images/20200116/2.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li><li><strong>ワードラップ</strong>、<strong>フォーマットされたテキスト</strong>のチェックを <strong>両方</strong> 外します。これで文字がどこまでも小さくなります<ul><li><img src="/images/20200116/3.png" class="img-small-size" style="border:solid 1px #000000">–→<img src="/images/20200116/4.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li></ol><h3 id="3-2-Lineジャンプ"><a href="#3-2-Lineジャンプ" class="headerlink" title="3.2. Lineジャンプ"></a>3.2. Lineジャンプ</h3><ul><li>「スタイル」から「Line jumps」を選択します。<ul><li><img src="/images/20200116/5.png" class="img-small-size" style="border:solid 1px #000000">–→<img src="/images/20200116/6.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li></ul><h3 id="3-3-Lineジャンプを一部だけ回避する方法"><a href="#3-3-Lineジャンプを一部だけ回避する方法" class="headerlink" title="3.3. Lineジャンプを一部だけ回避する方法"></a>3.3. Lineジャンプを一部だけ回避する方法</h3><ul><li>ラインjumpを設定したオブジェクトよりも前面のオブジェクトはジャンプしません<ul><li><img src="/images/20200116/7.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li></ul><h3 id="3-4-アイコンの使い方・検索方法"><a href="#3-4-アイコンの使い方・検索方法" class="headerlink" title="3.4. アイコンの使い方・検索方法"></a>3.4. アイコンの使い方・検索方法</h3><ol><li>AWSのアイコンを追加します。左下の「その他の図形」からアイコンセットを選択します</li><li>以下のような画面が表示されます<ul><li><img src="/images/20200116/3-4-1.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li><li>icon setにないiconを追加は検索すると色々でてくるので、概ねこれで間に合うと思います<ul><li><img src="/images/20200116/3-4-2.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li><li>もちろん初めから見えているiconも検索できます。目で探すより早いので、名称がわかっている場合はこちらがお勧めです<ul><li><img src="/images/20200116/3-4-3.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li></ol><h3 id="3-5-Lineが乱れたときのリセット方法"><a href="#3-5-Lineが乱れたときのリセット方法" class="headerlink" title="3.5. Lineが乱れたときのリセット方法"></a>3.5. Lineが乱れたときのリセット方法</h3><p>色々やって線がグダった場合の対応方法です</p><h4 id="スタイルの変更で対応する方法"><a href="#スタイルの変更で対応する方法" class="headerlink" title="スタイルの変更で対応する方法"></a><strong>スタイルの変更で対応する方法</strong></h4><ol><li>初期状態<ul><li><img src="/images/20200116/3-5-1.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li><li>スタイルで「／」直線を選択します<br><ul><li><img src="/images/20200116/3-5-2.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li><li>スッキリします<ul><li><img src="/images/20200116/3-5-3.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li></ol><h4 id="途中点をクリアする方法"><a href="#途中点をクリアする方法" class="headerlink" title="途中点をクリアする方法"></a><strong>途中点をクリアする方法</strong></h4><ol><li>初期状態<ul><li><img src="/images/20200116/3-5-4.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li><li>配置で<code>途中点をクリア</code>を選択します<ul><li><img src="/images/20200116/photo_20200116_02.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li><li>スッキリします<ul><li><img src="/images/20200116/3-5-6.png" class="img-middle-size" style="border:solid 1px #000000"></li></ul></li></ol><h3 id="3-6-オブジェクトに線を重ねると勝手にオブジェクトがくっ付くのをやめたい"><a href="#3-6-オブジェクトに線を重ねると勝手にオブジェクトがくっ付くのをやめたい" class="headerlink" title="3.6. オブジェクトに線を重ねると勝手にオブジェクトがくっ付くのをやめたい"></a>3.6. オブジェクトに線を重ねると勝手にオブジェクトがくっ付くのをやめたい<br></h3><ul><li>オブジェクトプロパティのConnectableオプションを外すと、先にオブジェクトを重ねても接続されなくなります。イライラする事が多い動作なので便利です<ul><li><img src="/images/20200116/3-6.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li></ul><h2 id="4-レイヤ"><a href="#4-レイヤ" class="headerlink" title="4. レイヤ"></a>4. レイヤ</h2><h3 id="4-1-レイア使い方"><a href="#4-1-レイア使い方" class="headerlink" title="4.1. レイア使い方"></a>4.1. レイア使い方</h3><ol><li>レイヤーウィンドウの表示は、表示→「レイヤー」で小窓が開きます<ul><li><img src="/images/20200116/4-1-1.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li><li><code>+</code> マークからレイヤを追加&lt;<ul><li><img src="/images/20200116/4-1-3.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li><li>レイヤ名ダブルクリックで名称変更<ul><li><img src="/images/20200116/4-1-4.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li></ol><h3 id="4-2-default-レイヤの罠"><a href="#4-2-default-レイヤの罠" class="headerlink" title="4.2. default レイヤの罠"></a>4.2. default レイヤの罠</h3><ul><li>複数のレイヤを使うと「背景」の上に「メインコンテンツ」となるレイヤを重ねて使うケースが増えてきます</li><li>しかし、編集開始直後は最後のレイヤは記憶されず、最も下位のレイヤがdefaultとして選択されるため、変更しないと想定外のレイヤに想定外のオブジェクトが追加されてしまいます<ul><li><img src="/images/20200116/4-2.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li></ul><h3 id="4-3-バックグラウンドに書くべきもの"><a href="#4-3-バックグラウンドに書くべきもの" class="headerlink" title="4.3. バックグラウンドに書くべきもの"></a>4.3. バックグラウンドに書くべきもの<br></h3><ol><li>こういった構成図を作成してあるとして<ul><li><img src="/images/20200116/4-3-1.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li><li>オブジェクトの位置によって動的にページが増えます（右側に余白が追加されます）<ul><li><img src="/images/20200116/4-3-2.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li><li>あらかじめバックグラウンドに枠を作っておくと便利です<ul><li><img src="/images/20200116/4-3-3.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li></ol><p>ちなみに、ページ設定はメインメニューの<code>ファイル</code>から選択します。</p><p>こちらもdefaultは<code>A4</code>になっているため必要に応じて変更が必要です。感覚的に、こういった図形は<code>A3</code>以上のケースが多い気がします。</p><ul><li><img src="/images/20200116/photo_20200116_03.png" class="img-small-size" style="border:solid 1px #000000"></li><li><img src="/images/20200116/photo_20200116_04.png" class="img-small-size" style="border:solid 1px #000000"></li></ul><h3 id="4-4-オブジェクトを-To-Front-Backするときに気をつけること"><a href="#4-4-オブジェクトを-To-Front-Backするときに気をつけること" class="headerlink" title="4.4. オブジェクトを To Front/Backするときに気をつけること"></a>4.4. オブジェクトを To Front/Backするときに気をつけること</h3><ul><li>前述の通り、default表示は最下位のレイヤなので、レイヤを切り替えてあげないと<code>あれ？上にいかないぞ？</code>が本当によくハマるケールです<ul><li><img src="/images/20200116/4-4.png" class="img-small-size" style="border:solid 1px #000000"></li></ul></li></ul><h3 id="4-5-レイヤを跨いだオブジェクトのコピー"><a href="#4-5-レイヤを跨いだオブジェクトのコピー" class="headerlink" title="4.5. レイヤを跨いだオブジェクトのコピー"></a>4.5. レイヤを跨いだオブジェクトのコピー<br></h3><p><code>背景</code>レイヤのみで編集を開始し、<code>背景</code>と上位の<code>コンテンツ</code>に分けたい場合、一括でコピーしたくなります。<br><img src="/images/20200116/photo_20200116_05.png" class="img-small-size" style="border:solid 1px #000000"><br>↓レイヤを足します。<br><img src="/images/20200116/photo_20200116_06.png" class="img-small-size" style="border:solid 1px #000000"><br>↓コピーしたいオブジェクトを<code>カット</code>します。<br><img src="/images/20200116/photo_20200116_07.png" class="img-small-size" style="border:solid 1px #000000"><br>↓上位レイヤ選択状態で<code>ペーストします</code><br><img src="/images/20200116/photo_20200116_08.png" class="img-small-size" style="border:solid 1px #000000"><br>↓見た目は変わりませんが、<code>ペーストしたオブジェクト</code>は移動します。<br><img src="/images/20200116/photo_20200116_09.png" class="img-small-size" style="border:solid 1px #000000"></p><h2 id="5-保存の方法"><a href="#5-保存の方法" class="headerlink" title="5. 保存の方法"></a>5. 保存の方法</h2><h3 id="5-1-画像にメタ法情報を含めて編集できるようにする"><a href="#5-1-画像にメタ法情報を含めて編集できるようにする" class="headerlink" title="5.1. 画像にメタ法情報を含めて編集できるようにする"></a>5.1. 画像にメタ法情報を含めて編集できるようにする<br></h3><p>メニューからエクスポートで、<strong>PNG</strong> or <strong>SVG</strong> を選びます<br><img src="/images/20200116/photo_20200116_10.png" class="img-small-size" style="border:solid 1px #000000"><br>↓この2種類のみ、<code>ダイアグラムをコピーに含める</code>が表示されます。<br>これをチェックすると、エクスポートしたpng or svgをDraw.ioで開くと、<strong>編集可能な画像</strong>が出来上がります。<br><img src="/images/20200116/photo_20200116_11.png" class="img-small-size" style="border:solid 1px #000000"></p><h3 id="5-2-githubのファイルとDrawioを紐付ける"><a href="#5-2-githubのファイルとDrawioを紐付ける" class="headerlink" title="5.2. githubのファイルとDrawioを紐付ける"></a>5.2. githubのファイルとDrawioを紐付ける<br></h3><p>公式にある手順の通りで連携可能となります。<br><br><a href="https://about.draw.io/github-support/" target="_blank" rel="noopener">https://about.draw.io/github-support/</a><br>開くでGithubを選択し、認証をすることで編集可能になります。<br><img src="/images/20200116/photo_20200116_12.png" class="img-middle-size" style="border:solid 1px #000000"></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>draw.ioを上手く使えば、VisioやExcelに頼ることなくシステム的な構成図を生産性高く扱えるようになると思います。一方で、VisioやExcelに慣れた人にとっては、操作性に癖があり色々ハマるところも多いと思い今回のような”まとめ”を作成しました。</p><p>他にもこんなテクニックがあるよ、という方がいましたらぜひTwitterやはてぶなどでフィードバックいただければと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;もともとはMicrosof Visioなどを使って作成していた図形（ネットワーク図、各種シーケンス、ERD..etc）ですが
      
    
    </summary>
    
      <category term="Design" scheme="https://future-architect.github.io/categories/Design/"/>
    
    
      <category term="draw.io" scheme="https://future-architect.github.io/tags/draw-io/"/>
    
  </entry>
  
  <entry>
    <title>打鍵テストをCIで回す：Cypress on GitHub Actions</title>
    <link href="https://future-architect.github.io/articles/20200115/"/>
    <id>https://future-architect.github.io/articles/20200115/</id>
    <published>2020-01-15T00:25:42.000Z</published>
    <updated>2020-01-15T02:11:55.895Z</updated>
    
    <content type="html"><![CDATA[<p>つらい打鍵テストをCIで回して、テスト結果をWebダッシュボードでチーム内に共有しようというお話です。</p><hr><p>はじめまして。枇榔（びろう）です。サーバ内の脆弱性を検出して管理するWebサービス、FutureVuls( <a href="https://vuls.biz/" target="_blank" rel="noopener">https://vuls.biz/</a> )の開発をしています。</p><p>100台から数千台といった大規模なサーバ運用をしている方向けの、サーバ内の脆弱性情報管理を楽にするWebサービスです。OSSの脆弱性スキャナ<a href="https://github.com/future-architect/vuls" target="_blank" rel="noopener">Vuls</a>に、チーム運用向けの機能（タスク管理・自動トリアージ・他チームへ情報共有・脆弱性情報のリスト管理など）を追加したものになります。</p><p><a href="https://vuls.biz/" target="_blank" rel="noopener">https://vuls.biz/</a> の右上から新規登録ですぐに使えるので、ぜひお試しください。</p><h2 id="マイクロサービスのテストが打鍵になりがち問題"><a href="#マイクロサービスのテストが打鍵になりがち問題" class="headerlink" title="マイクロサービスのテストが打鍵になりがち問題"></a>マイクロサービスのテストが打鍵になりがち問題</h2><p>さて、そんなFutureVuls。画面側はReact、裏側はいくつものコンテナという構成で動いています。</p><p>AWS 上でコンテナを立ち上げてマイクロサービスを提供するみたいなこと、増えてきましたよね。マイクロサービスアーキテクチャだとスケール・冗長化が簡単で、障害が置きたときの対応や保守が行いやすいといったメリットもたくさんあります。</p><p>しかしながら、導入する上で厄介なのがテスト。各コンテナの中で単体テストがしっかり書かれていても、それぞれのコンテナがきちんと繋がっているかどうか、意図した処理が行われているかどうか確認するため、クライアント端末からのリクエストをもとにしたテストが必要になります。</p><p>コンテナの中はmasterにマージする際にテストを回しているけれども、最終的にデプロイを行う際にはExcelのテストケースを見ながら、Web画面をポチポチ叩いての打鍵テストになってしまっている。そんなプロジェクトも多いのではないでしょうか。</p><p>Excelのテストケースを見ながらポチポチ叩いて、都度スクリーンショットを撮ってまとめる。そんなテストを何度か行いましたが、それだと気軽にテストとはいかず、リリースを行う際にもテスト工数がかなり必要になりますし、使用しているパッケージのアップデートも行いづらいのでセキュリティ的にも問題が出てきます。</p><h2 id="打鍵テストを自動化するOSS-Cypress"><a href="#打鍵テストを自動化するOSS-Cypress" class="headerlink" title="打鍵テストを自動化するOSS Cypress"></a>打鍵テストを自動化するOSS Cypress</h2><p>打鍵テスト自動化したいですよね</p><p>できればコーディングに不慣れな人でもテストコードが書けて、動作中の様子をスクリーンショットなどで保存してくれるとエビデンスで使えるので嬉しい。そんな要望に応えてくれるOSSがCypressです</p><img src="/images/20200118/photo_20200118_01.png" class="img-middle-size"><p><a href="https://www.cypress.io/" target="_blank" rel="noopener">https://www.cypress.io/</a></p><p>Cypressはブラウザテストツールで、フロントエンドのテストをかなりシンプルに行える仕組みを提供してくれています。フロントエンドの部分だけを単体テストするためにも使えるのですが、統合テストやEnd to End テストにも使える便利な子です。</p><p>似たようなツールにSeleniumがあります。両方とも画面のテストに用いられていて、GitHub Actionsにも組み込める同じような使い方ができるツールなのですが少し差異があります。</p><p>Seleniumはネットワーク越しにブラウザを自動操作するツールで、スクレイピングとか操作の自動化といったマクロのような使い方をしてテストを行います。</p><p>対してCypressはWeb画面のテスト目的に特化したツールです。動的な画面の書き換え完了するまで待ったり、ボタンがdisable設定で表示されているか確認したり、非同期なリクエストが終わるまで待ったりといったことまで行えます。さらに処置は手元で行われるので動作もきびきびとしており、トライ＆エラーも行いやすく実行時間も短縮できます。</p><p>また、スクリーンショットが欲しいタイミングで <code>cy.screenshot</code> と入れておくとspecごとに分かれたフォルダにスクリーンショットを保存してくれます。さらにはテスト開始から完了まで実行の様子をmp4形式の動画にしてくれたりもします。</p><p>個人的な話ですがたまに疲れたとき、池の鯉を見るような感覚でCypressのテスト実行の様子を眺めていたりします。割と癒やされます。</p><h2 id="今回説明すること"><a href="#今回説明すること" class="headerlink" title="今回説明すること"></a>今回説明すること</h2><img src="/images/20200118/photo_20200118_02.png">まずは手元のPCでCypressを動かしたのち、GitHub Actionsに乗せてCI内で実行する方法を紹介します。次に実行結果をWeb上に保存できるCypressDashboardの紹介、最後にCIをつなげるところまで行ってみます。<h2 id="導入方法"><a href="#導入方法" class="headerlink" title="導入方法"></a>導入方法</h2><p>nodejsの入っている端末でE2E用のレポジトリを作って、</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> npx cypress open</span></span><br></pre></td></tr></table></figure><p>で、終わり。簡単。<br>しばらくダウンロードなどの処理が走ったあと、Cypressのダイアログが表示されます。<br><img src="/images/20200118/photo_20200118_03.png"></p><p>試しに <code>actions.spec.js</code> をクリックすると、テストコードのサンプルとして <code>https://example.cypress.io/commands/actions</code> へのテストが実行されます。</p><p>実行したディレクトリの中には <code>cypress.json</code> という設定ファイルと <code>cypress</code> というフォルダができてます。<code>cypress.json</code> はコンフィグファイルです。タイムアウトまでの時間やスクリーンショットの出力先フォルダを変えたいときはここを変更しましょう。<br><a href="https://docs.cypress.io/guides/references/configuration.html" target="_blank" rel="noopener">https://docs.cypress.io/guides/references/configuration.html</a></p><p><code>cypress</code> フォルダにはテストコードやプラグインが含まれます。<br><code>cypress\integration\examples\</code> 内のspec.jsファイルがテストケースのサンプルになっているので、参考に書き換えていきましょう。</p><h1 id="Cypressの書き方"><a href="#Cypressの書き方" class="headerlink" title="Cypressの書き方"></a>Cypressの書き方</h1><p>Cypressのドキュメント( <a href="https://docs.cypress.io/" target="_blank" rel="noopener">https://docs.cypress.io/</a> )を見ると非常に様々なコマンドやテスト方法があるのが分かります。<br>たくさんあって物怖じしてしまいますが、まずは <code>cy.contain()</code> <code>cy.get()</code> <code>cy.click()</code>の3つを覚えれば簡単な Web ページのテストができるようになります。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types="Cypress" /&gt;</span></span><br><span class="line"></span><br><span class="line">context(<span class="string">'Actions'</span>, () =&gt; &#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    cy.visit(<span class="string">'https://future-architect.github.io/'</span>) <span class="comment">//テストを行う対象のページを入力</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">it(<span class="string">'contain() get() click() のサンプル'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// ページ内に `フューチャー開発者ブログ` が表示されているか確認</span></span><br><span class="line">    cy.contains(<span class="string">'フューチャー開発者ブログ'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ページ内に `logo-img`をクラスに持つimgタグが表示されているか確認</span></span><br><span class="line">    cy.get(<span class="string">'img.logo-img'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// `.blog-sidebar`(サイドバーのクラス)から `Culture`を探してクリック</span></span><br><span class="line">    cy.get(<span class="string">'.blog-sidebar'</span>).contains(<span class="string">'Culture'</span>).click()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>以上を実行すると、こうなります。</p><img src="/images/20200118/photo_20200118_04.jpg"><p>左側にテストの内容、右側にテスト実行の様子が表示されます。</p><img src="/images/20200118/photo_20200118_05.png"><p>テストがすべて完了したあとに実行中の様子を確認することができます。<br>行をクリックすると、どの要素が抽出されて、どこをクリックしたのがまでわかるようになっています。</p><img src="/images/20200118/photo_20200118_06.jpg"><p><code>blog-sidebar</code>クラス内の <code>Culture</code> をクリックしているのがわかりますね。</p><p><code>cy.contains</code> で画面に表示される日本語を選んで click までならコーディングに不慣れな新人さんにも書いてもらえますし、CSSセレクタを理解している人ならgetも使ってもらえます。<br>ベテランな皆さんには <code>cy.spy()</code> や <code>cy.stub()</code> といったものも用意されていますのでご安心を。</p><p>また <code>cy.viewport(&#39;iphone-6+&#39;)</code> でviewportの動的切替えや、<code>cy.screenshot(&#39;top-page-01&#39;)</code> でスクリーンショットの保存などもできます。</p><p>#GitHub Actionsにつなげる</p><p>さて、ブラウザ上で実行結果を確認しつつテストを行えるCypressですが、CUIでも実行できます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> npx cypress run</span></span><br></pre></td></tr></table></figure><p>こちらの場合は、テストの結果だけ返してくれます。<br><img src="/images/20200118/photo_20200118_07.png"></p><p>実行中の様子をあとから確認したい場合は、<code>\cypress\videos\examples\test.spec.js.mp4</code> として保存される動画ファイルを確認ください。</p><p>CUIで実行できるとなればCIに組み込みたいですよね。<br>では、2019年から使えるようになったGitHub Actionsで動かしてみましょう。</p><p>作成したレポジトリ内で以下を実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> npm init</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure><p>package.json  package-lock.jsonの2ファイルが作成されたのを確認したら、GitHubにプッシュし、GitHubのレポジトリページのタブにある「Actions」&gt; Node.js の「Set up this workflow」のボタンをクリック</p><p>そして、左側に出てくるエディタに以下を入力します。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Node</span> <span class="string">CI</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  cypress-run:</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">cypress-io/github-action@v1</span></span><br></pre></td></tr></table></figure><p>これで、レポジトリにpushされたタイミングでCIが動くようになりました。</p><p>実行結果は以下のように表示されます。</p><img src="/images/20200118/photo_20200118_08.png"><p>いい感じですね</p><p>pushされたタイミングではなく定期的に実行したい場合は</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br></pre></td></tr></table></figure><p>を</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="attr">  schedule:</span></span><br><span class="line"><span class="attr">    - cron:</span>  <span class="string">'0 0 * * *'</span></span><br></pre></td></tr></table></figure><p>のようなcron式に書き換えると定期的にテストが走ります。</p><h1 id="Cypress-Dashboard-につなげる"><a href="#Cypress-Dashboard-につなげる" class="headerlink" title="Cypress Dashboard につなげる"></a>Cypress Dashboard につなげる</h1><p>CypressのテストがGitHub Actions上で定期的に実行されて良かったよかった、で終わりたいのですが問題が一つだけ。</p><p>実行中の様子をあとから確認できない。</p><p>Cypress実行中の様子は <code>\cypress\videos\*.spec.js.mp4</code> に動画ファイルが保存されているはずですが、CI環境上に保存してしまうので、テスト完了後には環境ごと消されてしまっていて見れなくなってしまいます。</p><p>自分でS3あたりにファイルを投げるスクリプトを書かないといけないのか・・・と思っていましたが、Cypressがそのあたりも簡単にする解決策を用意してくれていました。すごい。</p><p>Cypress Dashboard というサービスで、Cypress実行中の様子や結果などを見やすくまとめてくれるWebサービスです。<br><a href="https://docs.cypress.io/guides/dashboard/introduction.html" target="_blank" rel="noopener">https://docs.cypress.io/guides/dashboard/introduction.html</a></p><img src="/images/20200118/photo_20200118_09.png"><p>それではセットアップ方法を見ていきましょう。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> npx cypress open</span></span><br></pre></td></tr></table></figure><p>として、Cypressのダイアログを表示させましょう。</p><img src="/images/20200118/photo_20200118_10.png">「Runs」をクリックして右上の「Log In」からCypress Dashboardにユーザ登録してください。Google認証とGitHub認証でユーザ登録ができます。<p>ユーザ登録が終えたら、「Set up project to recoed」の青いボタンを押して設定を完了させます。</p><img src="/images/20200118/photo_20200118_11.png"><p>すると画面が切り替わり、Project ID と Record key が生成されます。<br><code>cypress.json</code> には自動で <code>projectId</code> が入力されてると思いますので、Record keyと一緒に <code>cypress run</code> してみましょう。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> npx cypress run --record --key &#123;Record key&#125;</span></span><br></pre></td></tr></table></figure><p>すると「Runs」の画面が変化します。</p><img src="/images/20200118/photo_20200118_12.png"><p>この #1 の行をクリックするとダッシュボードのページに移動して実行結果が確認できます。</p><img src="/images/20200118/photo_20200118_13.png"><p>1spec1行で並べられて、各行にOutput・Screenshots・Videoのボタンが用意されています。<br>OutputにはCUIのログ、Screenshotsにはエラー時のスクリーンショットと <code>cy.screenshot()</code> の実行結果、Videoにはテスト実行中の様子が動画で保存されます。<br>Web上に結果が保存されるのでチーム間で共有しやすくもなります。</p><p>Dashboardに実行結果が保存されるのを確認したら、GitHub Actionsにも同じようにRecord keyを設定していきましょう。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test-cy/.github/workflows/nodejs.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Node</span> <span class="string">CI</span></span><br><span class="line"><span class="attr">on:</span> <span class="string">[push]</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  cypress-run:</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">cypress-io/github-action@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          record:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        env:</span></span><br><span class="line"><span class="attr">          CYPRESS_RECORD_KEY:</span> <span class="number">2899</span><span class="string">ea68-054f-4abc-8fd3-ebff0c3e7bc0</span></span><br></pre></td></tr></table></figure><p>書き換えてGitHubにpushすると、GitHubActionsからCypressDashboardに実行結果が送信されます。</p><img src="/images/20200118/photo_20200118_14.png"><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>打鍵テストをCI化するのが、それほど苦労なくできることが伝われば幸いです。</p><p>もちろんテストコードを書く必要はありますが、Excelのテストケースに書かれた <code>申し込みボタンをクリックする</code> を <code>cy.contains(&#39;申し込み&#39;).click()</code> に変えるだけで何百回と使えるコードになるのでコストはペイするはずです。</p><p>今回は導入の部分だけを書きましたが、FutureVulsのテストを行う際には</p><ul><li>グループ内の脆弱性情報・タスク情報をDBからクリアする</li><li>スキャン結果をs3にアップロードしてタスクが表示されるか確認する</li><li>脆弱性のスコアが更新された場合に脆弱性情報が書き換わり、タスクのコメントにログが反映されるか見る</li></ul><p>といったこともしています。<br>これらもCypress（といくつかのプラグイン）で実現できます。すごい。</p><p>さくっとテストできる環境を作って、パッケージのアップデートを気楽に行える環境を作っていきましょう。</p><p>それでは、よいテストライフを！</p><hr><p>関連記事：</p><ul><li><a href="/articles/201912010/">SORACOM USBドングルの自動接続</a></li><li><a href="/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;つらい打鍵テストをCIで回して、テスト結果をWebダッシュボードでチーム内に共有しようというお話です。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;はじめまして。枇榔（びろう）です。サーバ内の脆弱性を検出して管理するWebサービス、FutureVuls( &lt;a href=&quot;https://vu
      
    
    </summary>
    
      <category term="CI/CD" scheme="https://future-architect.github.io/categories/CI-CD/"/>
    
    
      <category term="Cypress" scheme="https://future-architect.github.io/tags/Cypress/"/>
    
  </entry>
  
  <entry>
    <title> NeurIPS 2019 論文紹介</title>
    <link href="https://future-architect.github.io/articles/20191227/"/>
    <id>https://future-architect.github.io/articles/20191227/</id>
    <published>2019-12-27T07:22:02.000Z</published>
    <updated>2019-12-27T10:32:07.659Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは、Strategic AI Group(SAIG)の田中、上野です。<br>少し前に<a href="https://future-architect.github.io/articles/20191210/">NeurIPSという学会に参加して来たことをご報告</a>しましたが、今回はNeurIPSで気になった論文をいくつか紹介したいと思います。</p><h1 id="画像認識・生成"><a href="#画像認識・生成" class="headerlink" title="画像認識・生成"></a>画像認識・生成</h1><p>まずは、上野からは画像認識・生成に関する下記2つの研究を取り上げます。</p><h2 id="This-Looks-Like-That-Deep-Learning-for-Interpretable-Image-Recognition"><a href="#This-Looks-Like-That-Deep-Learning-for-Interpretable-Image-Recognition" class="headerlink" title="This Looks Like That: Deep Learning for Interpretable Image Recognition"></a>This Looks Like That: Deep Learning for Interpretable Image Recognition</h2><ul><li><a href="https://papers.nips.cc/paper/9095-this-looks-like-that-deep-learning-for-interpretable-image-recognition" target="_blank" rel="noopener">https://papers.nips.cc/paper/9095-this-looks-like-that-deep-learning-for-interpretable-image-recognition</a></li></ul><p>Chaofan Chen(※1), Oscar Li(※1), Daniel Tao(※1), Alina Barnett(※1), Cynthia Rudin(※1), Jonathan K. Su(※2)</p><p>※1: Duku University<br>※2: MIT Lincoln Laboratory</p><h2 id="HYPE-A-Benchmark-for-Human-eYe-Perceptual-Evaluation-of-Generative-Models"><a href="#HYPE-A-Benchmark-for-Human-eYe-Perceptual-Evaluation-of-Generative-Models" class="headerlink" title="HYPE: A Benchmark for Human eYe Perceptual Evaluation of Generative Models"></a>HYPE: A Benchmark for Human eYe Perceptual Evaluation of Generative Models</h2><ul><li><a href="https://papers.nips.cc/paper/8605-hype-a-benchmark-for-human-eye-perceptual-evaluation-of-generative-models" target="_blank" rel="noopener">https://papers.nips.cc/paper/8605-hype-a-benchmark-for-human-eye-perceptual-evaluation-of-generative-models</a></li></ul><p>Sharon Zhou(※1), Mitchell Gordon(※1), Ranjay Krishna(※1), Austin Narcomey(※1), Li F. Fei-Fei(※1), Michael Bernstein(※1)</p><p>※1: Stanford University</p><p>一つ目はCNNの解釈性に関する研究で、二つ目は生成モデルの評価方法に関する研究です。<br>それぞれ、関連する研究を取り上げながら紹介します。</p><h2 id="CNNの解釈性に関する研究"><a href="#CNNの解釈性に関する研究" class="headerlink" title="CNNの解釈性に関する研究"></a>CNNの解釈性に関する研究</h2><p>Deep Learningの威力を世に知らしめた出来事の一つは、2012年のILSVRCという画像認識に関するコンペティションでした。2012年以降、画像認識の精度がどんどん向上し、ついには人間のレベルに匹敵するまでになりました。</p><p>画像認識では、Convolutional Neural Network(CNN)と呼ばれる技術が用いられますが、非線形な演算を何層にも渡って繰り返すため、CNNが画像のどこに着目して分類をしているかといった解釈が非常に難しくなってしまいます。</p><p>CNNの着目領域を可視化した初期の研究が、Class Activation Mapping(CAM) [1]です。</p><p>CAMでは、下図のようにGlobal Average Poolingをする直前のfeature mapに分類層の結合重みを使った線形和によって、CNNの判断根拠を可視化します。</p><img src="/images/20191227/CAM.png"><p>[1]のFigure2より引用</p><p>CAMは、conv feature maps → global average pooling → softmax layer という構成である必要がありましたが、Grad-CAM [2]では、勾配を用いてfeature mapの重み付けをすることで、ネットワーク構成の制約がなくなりました。</p><p>また、Attention Branch Network [3]では、Activation mapをAttentionに使う方法が提案されています。<br>Attention Branch Networkは、中部大学の研究グループが提案したこともあり、今夏に参加した日本の学会MIRUではよく見かけました。</p><p>NeurIPSでは、porototypical part network(ProtoPNet) [4]という手法が提案されました。ProtoPNetでは、Prototype layerによって、入力画像中のどの領域が、学習データのどの部分と類似しているかまでを判断することができます。</p><p>その結果、単に着目領域が可視化されるだけではなく、画像の部分ごとの判断根拠を組み合わせた、より詳細な推論の解釈を可能にします。</p><img src="/images/20191227/ProtoPNet.png"><p>[4]のFigure2より引用</p><p>NeurIPS最終日に行われたMedical Imaging meets NeurIPSというワークショップでは、CAMを医療画像へ適用した事例がポスター発表でありました。</p><p>HR-CAM [5]では、最後のfeature mapだけではなく、中間層のfeature mapも用いることで、より鮮明に判断根拠を可視化します。</p><img src="/images/20191227/HR-CAM.png">[5]のFigure5より引用<p>また、初日のEXPOでは、Googleが”Interpretability - Now What?”というタイトルで解釈性に関する発表をしていました。<br>そこでは、Testing with Concept Activation Vectors(TCAV) [6]という手法が紹介されました。<br>TCAVは上記までの手法の流れとは少し異なり、概念的な重要度を抽出する方法を取っています。<br>画像認識の分野に限らず、解釈性に関する研究は近年、注目を高めている分野の一つです。</p><ul><li>[1] B.Zhou, et al., Learning Deep Features for Discriminative Localization, 2016.</li><li>[2] R.R.Selvaraju, et al., Grad-CAM: Visual Explanations from Deep Networks via Gradient-based Localization, 2017.</li><li>[3] H.Fukui, et al., Attention Branch Network: Learning of Attention Mechanism for Visual Explanation, 2018.</li><li>[4] C.Chen, et al., This Looks Like That: Deep Learning for Interpretable Image Recognition, 2019.</li><li>[5] S.Shinde, et al., HR-CAM: Precise Localization of pathology using multi-level learning in CNNs, 2019.</li><li>[6] B.Kim, et al., Interpretability Beyond Feature Attribution: Quantitative Testing with Concept Activation Vectors (TCAV), 2018.</li></ul><h2 id="生成モデルの評価方法に関する研究"><a href="#生成モデルの評価方法に関する研究" class="headerlink" title="生成モデルの評価方法に関する研究"></a>生成モデルの評価方法に関する研究</h2><p>近年、Generative Adversarial Network(GAN)をはじめとした深層生成モデルは目覚ましい発展を遂げ、本物と見間違える程きれいな画像を生成できるようになってきました。<br>しかし、生成された画像のクオリティを適切に評価することは、それほど簡単なことではありません。<br>よく使われる指標は、Inception Score [7]とFréchet Inception Distance [8] です。</p><p>Inception Scoreは、次式で計算されます。<br>p(y|x)は、ImageNetで学習済みのInception Modelで生成された画像を予測したときのラベルの分布、p(y)は予測ラベルの周辺分布であり、それらの分布間の距離をKullback–Leibler divergenceで測っています。</p><p>生成される画像が、識別が容易で、かつ、バリエーションが豊富であるほど、スコアが高くなるように設計されています。</p><img src="/images/20191227/IS.png" class="img-middle-size"><p>もう一つのFréchet Inception Distanceでは、実画像と生成画像でのInception Modelから得られる特徴ベクトルの距離を次式で測ります。</p><p>m_w, C_wは実画像から得られる特徴ベクトルの平均と共分散行列、m, Cは生成画像から得られる特徴ベクトルの平均と共分散行列であり、それぞれ多変量正規分布に従うと仮定し、Fréchet距離で分布間の距離を測ります。</p><img src="/images/20191227/FID.png" class="img-middle-size"><p>どちらの手法も、画像の「本物らしさ」をどのようにスコアするかや、ImageNetでの学習済みモデルに依存してしまっていることなどが課題としてあげられます。</p><p>NeurIPSでは、HYPE [9]というクラウドソーシングを利用して人の目で評価する手法が提案されました。<br>Amazon Mechanical Turkを利用したクラウドソーシングにより、実画像と生成画像の分類を人の目で行います。</p><p>論文では、心理物理学に基づいて評価者への画像の提示時間を制御する方法と、コストを抑えるために時間の制限を設けない方法の2つの手法が提案されています。</p><p>次図のように、HYPEのスコアによってモデルの善し悪しが判断できるような結果が得られています。</p><img src="/images/20191227/HYPE.png"><p>[9]のFigure1,Figure2より引用</p><p>HYPEを試すためには、<a href="https://hype.stanford.edu/" target="_blank" rel="noopener">https://hype.stanford.edu/</a> からAWSのS3の情報を送ると、<code>$60 ~ $100</code> 程度の値段でスコアが得られるようです。<br>NeurIPSは理論よりの研究が多いなかで、少し変わり種の発表に感じました。</p><ul><li>[7] T.salimans, et al., Improved Techniques for Training GANs, 2016.</li><li>[8] M.Heusel, et al., GANs Trained by a Two Time-Scale Update Rule Converge to a Local Nash Equilibrium, 2017.</li><li>[9] S.Zhou, et al., HYPE: A Benchmark for Human eYe Perceptual Evaluation of Generative Models, 2019.</li></ul><h1 id="言語・認知理解"><a href="#言語・認知理解" class="headerlink" title="言語・認知理解"></a>言語・認知理解</h1><p>続いて田中から言語理解や認知機能に関する研究を紹介します。</p><h2 id="SuperGLUE-A-Stickier-Benchmark-for-General-Purpose-Language-Understanding-Systems"><a href="#SuperGLUE-A-Stickier-Benchmark-for-General-Purpose-Language-Understanding-Systems" class="headerlink" title="SuperGLUE: A Stickier Benchmark for General-Purpose Language Understanding Systems"></a>SuperGLUE: A Stickier Benchmark for General-Purpose Language Understanding Systems</h2><ul><li><a href="https://papers.nips.cc/paper/8589-superglue-a-stickier-benchmark-for-general-purpose-language-understanding-systems" target="_blank" rel="noopener">https://papers.nips.cc/paper/8589-superglue-a-stickier-benchmark-for-general-purpose-language-understanding-systems</a></li></ul><p>Alex Wang(※1), Yada Pruksachatkun(※1), Nikita Nangia(※1), Amanpreet Singh(※2), Julian Michael(※3), Felix Hill(※4), Omer Levy(※2), Samuel R. Bowman(※1)</p><p>※1: New York University<br>※2: Facebook AI Research<br>※3: University of Washington<br>※4: DeepMind</p><p>GLUEを置き換える、言語理解タスク・転移学習のベンチマークに関する研究です。<br>GLUEベンチマークでは、システムの評価結果がヒトの評価結果を超えましたが、依然としてシステムの評価を行うために頑健な、単一の評価基準が必要です。<br>そこで、多くの学習データ/ジャンル/難易度をカバーした8つの言語理解タスク用ベンチマーク、SuperGLUEを提案しました。<br>新たな評価タスクとして、coreference resolutionとQAを追加し、トレーニングデータが比較的少ないタスクに重点を置いた設計になっています。リーダーボードや、詳細な分析を行うためのデータセットはGLUE同様に提供されています。</p><p>SuperGLUEは<a href="https://papers.nips.cc/paper/8589-superglue-a-stickier-benchmark-for-general-purpose-language-understanding-systems" target="_blank" rel="noopener">こちら</a>のリンクから使用できます。</p><h2 id="From-voxels-to-pixels-and-back-Self-supervision-in-natural-image-reconstruction-from-fMRI"><a href="#From-voxels-to-pixels-and-back-Self-supervision-in-natural-image-reconstruction-from-fMRI" class="headerlink" title="From voxels to pixels and back: Self-supervision in natural-image reconstruction from fMRI"></a>From voxels to pixels and back: Self-supervision in natural-image reconstruction from fMRI</h2><ul><li><a href="http://papers.nips.cc/paper/8879-from-voxels-to-pixels-and-back-self-supervision-in-natural-image-reconstruction-from-fmri" target="_blank" rel="noopener">http://papers.nips.cc/paper/8879-from-voxels-to-pixels-and-back-self-supervision-in-natural-image-reconstruction-from-fmri</a></li></ul><p>Roman Beliy(※1), Guy Gaziv(※1), Assaf Hoogi(※1), Francesca Strappini(※1), Tal Golan(※2), Michal Irani(※1)</p><p>※1: The Weizmann Institute of Science<br>※2: Columbia University</p><p>fMRIからのNatural Image Reconstructionタスク(ヒトが何かしらの画像を思い浮かべている/見ている際にMRIで脳の活動を記録、脳のMRIデータから、思い浮かべていた/見ていた画像を再構築するタスク)において、fMRIデータと正解の画像ペアのデータ数が少なく、学習が十分にできない問題があり、単純に教師あり学習を行っても十分な精度がでない課題があります。<br>そこで、コーパス外の50000件の画像データと、正解ラベルの付いていないテスト用fMRIデータをそれぞれ用いて、事前にencoder-decoderを学習する方法を提案しました。結果として、state-of-the-art、もしくはそれに匹敵する精度を達成しました。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>NeurIPSは、EXPOからWorkshopまで入れると1週間ほどありました。<br>そこでは、多くの研究発表があり、ここでは取り上げきれないほど、おもしろい研究がたくさんありました。</p><p>みなさんもぜひ、興味のある分野を調べてみてください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは、Strategic AI Group(SAIG)の田中、上野です。&lt;br&gt;少し前に&lt;a href=&quot;https://future-architect.github.io/articles/20191210/&quot;&gt;NeurIPSという学会に参加して来たことをご報告&lt;
      
    
    </summary>
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>golang.tokyoで発表してきました</title>
    <link href="https://future-architect.github.io/articles/20191211/"/>
    <id>https://future-architect.github.io/articles/20191211/</id>
    <published>2019-12-11T04:10:53.000Z</published>
    <updated>2020-02-06T02:38:23.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG の辻です。先日開催された <a href="https://golangtokyo.connpass.com/event/156678/" target="_blank" rel="noopener">golang.tokyo #28</a> に当社から2名、登壇しましたのでそのレポートをします。</p><p>LT 景品で頂いた CNCF のキャラクターです。かわいいです。</p><img src="/images/20191212/1.jpg" class="img-small-size"><p><a href="https://www.cncf.io/phippy/" target="_blank" rel="noopener">https://www.cncf.io/phippy/</a></p><h1 id="インライン展開の話-by-辻"><a href="#インライン展開の話-by-辻" class="headerlink" title="インライン展開の話 by 辻"></a>インライン展開の話 by 辻</h1><p>コンパイラがどのような最適化を実施しているか、気にしたことはありますか？コンパイラは定数の畳み込みやデッドコードの削除、インライン展開、他にもいろいろなコードの最適化を実施します。といっても私も正直あまり気にしたことがありませんした。そんなときに Go は積極的にインライン展開をしない言語だ、という噂を聞き、あれ、そもそも Go でインライン展開ってどのような挙動をするんだっけ？という疑問から今回の登壇のネタが生まれました。</p><p>当時調べた内容は Qiita の記事 <a href="https://qiita.com/tutuz/items/caa5d85544c398a2da9a" target="_blank" rel="noopener">Go Compilerのインライン展開についてまとめた</a> にまとまっています。</p><p>私にとって非常に興味深い内容でした。インライン展開がアセンブリを見て、どのように展開されているのか確認したのはもちろん、Go の標準ツールで逆アセンブリしてアセンブリを見ることができます。Go は標準ツールが充実しているとよく言われますが、低レイヤーの内容もシンプルに調べられる点は嬉しいです。</p><p>明日から開発業務で使える内容！ではないと思いますが、多くの Gopher にきっと役に立つだろう！と思い、どこかでお話したいなぁ…と思っていました。そんなときに年末に Go の LT 大会が実施されるという話を聞きました。これは登壇するしかない！と思い、申し込むに至りました。</p><p>LT の資料は以下です。</p><script async class="speakerdeck-embed" data-id="e2a29b8f2b3c43c1b1f10a73f1e0d343" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><img src="/images/20191212/2.jpg" class="img-middle-size"><p>いろいろな反応をいただきました！聞いていただき、ありがとうございます！</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">objdump知らなかった<a href="https://twitter.com/hashtag/golangtokyo?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#golangtokyo</a></p>&mdash; ゴリラ@自宅警備隊 (@gorilla0513) <a href="https://twitter.com/gorilla0513/status/1202179090658164738?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">December 4, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">objdumpで逆アセンブリ可能<a href="https://twitter.com/hashtag/golangtokyo?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#golangtokyo</a></p>&mdash; ｴﾝｼﾞﾆｱのﾎｹﾞさん（hon-D） 🌔 (@yyh_gl) <a href="https://twitter.com/yyh_gl/status/1202179227790917632?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">December 4, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">objdump xxx.exe <a href="https://twitter.com/hashtag/golangtokyo?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#golangtokyo</a> <br>インライン展開呼び出しコスト<br>5倍程度</p>&mdash; it engineer (@itengineer18) <a href="https://twitter.com/itengineer18/status/1202179602979807233?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">December 4, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>年末大 LT 大会ということで総勢 16 名の方が LT を実施しました。いろいろな Gopher の話を聞くことができ、とても有意義でした。当社からは私の他にも澁川が登壇しました。</p><hr><h1 id="あなたはContextの挙動を説明できますか？-by-澁川"><a href="#あなたはContextの挙動を説明できますか？-by-澁川" class="headerlink" title="あなたはContextの挙動を説明できますか？ by 澁川"></a>あなたはContextの挙動を説明できますか？ by 澁川</h1><p>渋川は「あなたはContextの挙動を説明できますか？」というお題で発表してきました。</p><script async class="speakerdeck-embed" data-id="9db3caf5b84a42ee80561f9d9def0a67" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p><code>Context</code>にはタイムアウトやらデッドラインの指定やらができますが、時間というものを外部からいじることができない以上、これらのテストにはその時間分かかってしまいかねません。モックを作ってみようと思ったものの、<code>Context</code>の正確な挙動ってそういえばよくわからないなと思い、調べてみたのがきっかけです。</p><p>怖がらせる意図はなかったのですが、途中のクイズが意地悪すぎて、<code>Context</code>が怖くなった、<code>Context</code>何もわかっていなかった、というようなコメントも見かけましたが、使う側の人はここまで知らなくてもいいと思います。最初の方で紹介しているベストプラクティスだけ知れば十分かと。ここまで知ると嬉しい人は、モックを作りたい人、あるいはキャンセルとタイムアウトを区別したテストを正確に書きたい人・・・とかですかね。</p><h1 id="GoのContextはなぜこのような設計なのか？"><a href="#GoのContextはなぜこのような設計なのか？" class="headerlink" title="GoのContextはなぜこのような設計なのか？"></a>GoのContextはなぜこのような設計なのか？</h1><p>時間が間に合わなそうだったのでバッサリカットしましたが、当初は、<code>Context</code>ってなんでこのような設計になっているのか、というエッセーを入れていました。解説ではなくてエッセーなのは、設計ドキュメントがあれば読みたかったのですが、見当たらなかったので推測だからです。僕が知っている各種設計とは似ても似つかなかったのでどのようにここに至ったのか、というのが気になっていました。</p><p>上記のスライドのコメントにも書かれていましたが、おそらくはC#の<a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtoken?view=netframework-4.8" target="_blank" rel="noopener">CancellationToken</a>あたりからの着想なのかな、と思っています。非同期処理のときにトークンをわたしておき、呼び出し元からキャンセルの意志を伝える、というものです。</p><p>Goは例外がない、というのはよく言われてきましたが、旧来の例外処理機構（スタックトレースを巻き戻しながら、マッチするcatch節を探し続け、途中のリソースを開放していく）は最近のプログラミングモデルとは多少合わないところがあります。それは非同期と並列処理です。</p><p>非同期の場合、スタックを巻き戻しても本来の呼び出し元にたどり着くとは限りません。JavaScriptのコールバックがネストされた中で、メソッド名の<code>destroy()</code>を<code>destory()</code>にタイポして涙をのみ続けた人には首の骨が折れるぐらい同意して頷いてくれると思います。JavaScriptは<code>Promise</code>の機構の中で例外オブジェクトを持ち回る機能を入れ、<code>async</code>関数の中の<code>try</code>節がこれを特別扱いして<code>catch</code>節に渡すというアクロバティックなことをして非同期でも例外処理を今までどおり書けるようにしています。</p><p>Goはgoroutineの起動が早いため、非同期よりも並列処理を良く使います。並列処理もスタックを巻き戻しても分岐したところには戻れないということもありますが、複数のgoroutineにファンアウトして処理を投げている場合に、1つのgoroutineで問題が発生したときに、他のgoroutineもまとめて終了させる必要が出てきます。そこでCancellationToken的なものが役に立ってきます。それがContextの原型になったのでは、と考えています。</p><p>もう一つ、Goのgoroutineは「IDを持たず区別がない」とよく言われます。実際にはpanic時にIDが表示されるので内部にはあるはずですが、そこにアクセスして、そのIDをもとにしたプログラミングの手法は提供されていません。スレッドローカルストレージがなくてもIDさえあれば、それをキーにグローバル変数に定義しておいたmapから情報取得とかもできたかもしれませんが、Goはそこでスレッドローカルストレージの代わりに、ストレージっぽいオブジェクトを持ち回ることで、解決するという方法を選んだのでは、と思います。これにより、リクエストを受けたgoroutineがさらにファンアウトしても、その子供goroutineに共通でデータを見せることができるようになります。</p><p>まとめると僕のContextの設計の予想は</p><ul><li>Goにない例外処理を、並列処理でも扱いやすい形で入れた</li><li>Goにはないスレッドローカルストレージを、並列処理でも扱いやすい形で入れた</li></ul><p>という感じです。オブジェクト指向の設計だと、1つのクラスに責務は1つ、というのがよく言われることですが、<code>Context</code>は2つの役割を持っています。<code>Context</code>という名前の通り、メインのドメインというか利用されるコードとは世界が違う「環境」を表すものであり、なるべく空気のような薄い存在でいたい、という理由からまとめたのかなぁ、と想像されます。本当のことは聞いてみないとわからないですが。</p><p><code>Context</code>の<code>Err()</code>の伝搬やら、Valueの伝搬は親方向に行かない、というのは不思議に思えますが、ファンアウトした中からさらにファンアウトした場合に、予想外のところのエラーやら値を拾ってしまうと不具合の発見が極めて困難になるのは容易に想像できるため、このような挙動になっているのではないかと思います。</p><p>↑というのはすべて妄想なので、もし何かContextの設計に関する知見をお持ちの方、こっそり教えて下さい！</p><hr><p>関連記事：</p><ul><li><a href="/articles/20191111/">Go Cloud#1 概要とBlobへの活用方法</a></li><li><a href="/articles/20191114/">Go Cloud#4 URLを編集するパッケージ</a></li><li><a href="/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li><li><a href="/articles/20191002/">CUEを試して見る</a></li><li><a href="/articles/20191030/">GoでCUEのバリデーション機能を利用しつつ、.cue/.json/.yaml形式の設定ファイルを読み込む</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG の辻です。先日開催された &lt;a href=&quot;https://golangtokyo.connpass.c
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
      <category term="登壇資料" scheme="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E8%B3%87%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title> NeurIPS 2019 参加報告</title>
    <link href="https://future-architect.github.io/articles/20191210/"/>
    <id>https://future-architect.github.io/articles/20191210/</id>
    <published>2019-12-10T07:22:02.000Z</published>
    <updated>2019-12-27T08:26:18.810Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは、Strategic AI Group(SAIG)の田中、上野です。<br>私たちは現在、NeurIPSという学会に参加するためにカナダに来ています。</p><h2 id="NeurIPSとは"><a href="#NeurIPSとは" class="headerlink" title="NeurIPSとは"></a>NeurIPSとは</h2><p>NeurIPS(Conference on Neural Information Processing Systems)は、機械学習分野のトップカンファレンスで、今年が33回目の開催となります。<br>昨年は参加登録の開始からたった10分ちょっとでチケットが売り切れてしまうほど、チケットの競争率が高くなっています。<br>今年は抽選となり、運よくチケットを引き当てた田中と上野が参加しています。</p><p>それでも参加者が多く、入場の際には長蛇の列ができており、近年の機械学習分野への熱の凄さを体感しました。</p><img src="/images/20191210/registration.jpg"><p>この会場に入るまでにも長い列があり、ここからこのフロアを一周して、やっと受付です(^^;</p><h2 id="会場の様子"><a href="#会場の様子" class="headerlink" title="会場の様子"></a>会場の様子</h2><p>今年のNeurIPSはカナダのバンクーバーで開かれています。<br>最近、急に冬らしくなってきましたが、バンクーバーはもっと寒いです。<br>会場が海沿いのこともあり、しっかりと防寒対策をして臨んでいます。</p><img src="/images/20191210/outside.jpg"><p>一方で、会場内は熱気にあふれ、皆さん発表に熱い視線を送っています。</p><img src="/images/20191210/inside.jpg"><h2 id="チュートリアル講演"><a href="#チュートリアル講演" class="headerlink" title="チュートリアル講演"></a>チュートリアル講演</h2><p>NeurIPS１日目は、主にチュートリアル講演が行われました。<br>以下のようなタイトルのチュートリアルが開催されました。</p><ul><li>Tutorials Session 1<ul><li>Imitation Learning and its Application to Natural Language Generation</li><li>Deep Learning with Bayesian Principle</li><li>Human Behavior Modeling with Machine Learning: Opportunities and Challenges</li></ul></li><li>Tutorials Session 2<ul><li>Interpretable Comparison of Distributions and Models</li><li>Machine Learning for Computational Biology and Health</li><li>Efficient Processing of Deep Neural Network: from Algorithms to Hardware Architectures</li></ul></li><li>Tutorials Session 3<ul><li>Reinforcement Learning: Past, Present, and Future Perspectives</li><li>Representation Learning and Fairness</li><li>Synthetic Control</li></ul></li></ul><p><strong>Bayesian</strong>, <strong>Health</strong> や、<strong>Reinforcement Learning</strong>, <strong>Representation Learning</strong> といった、聞いてワクワクするようなキーワードが並んでいました。</p><img src="/images/20191210/tutorial.jpg"><h2 id="インターン生のポスター発表"><a href="#インターン生のポスター発表" class="headerlink" title="インターン生のポスター発表"></a>インターン生のポスター発表</h2><p><a href="https://wimlworkshop.org/2019/program/" target="_blank" rel="noopener">Women in Machine Learning (WiML) Affinity Workshop</a>というセッションでは、フューチャーのインターン生であるBelonaさんがポスター発表をしていました。</p><p>現在、SAIGではルワンダにある African Institute for Mathematical Scineces(AIMS) という大学からインターン生を受けいれています。<br>AIMSは、African Masters Of Machine IntelligenceというAI人材を育成するためのコースを2018年に新設しました。<br>FacebookやGoogleがサポートしており、世界の名だたる教授が教鞭をとり、アフリカで最高レベルのAI教育を提供しています。<br>優秀な学生たちはFacebookやGoogleなどでインターンを経験し、そのまま就職する場合もあります。<br>Belonaさんは、AIMSでヘルスケア分野における機械学習を専門に学んでいます。<br>(実は、上野は2週間前にルワンダの現地調査に行ってきました。)</p><p>今回、Belonaさんは下記のタイトルで発表しています。<br>時系列データに対して、複数のモデルをアンサンブルすることで、非線形で分散の大きいデータに対する予測精度を向上する取り組みを紹介してくれました。</p><p>「AdaBoost-Models Ensemble Learning to forecast Time series with high variance and nonlinear Trend,<br>Belona Mary SONNA MOMO (AIMS)」</p><img src="/images/20191210/WiML.jpg" class="img-middle-size"><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>明日からは論文の発表が本格的に始まります。<br>バンクーバーを満喫しながら、最新の研究を肌で感じてきたいと思います！</p><img src="/images/20191210/mug.jpg" class="img-small-size">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは、Strategic AI Group(SAIG)の田中、上野です。&lt;br&gt;私たちは現在、NeurIPSという学会に参加するためにカナダに来ています。&lt;/p&gt;
&lt;h2 id=&quot;NeurIPSとは&quot;&gt;&lt;a href=&quot;#NeurIPSとは&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="DataScience" scheme="https://future-architect.github.io/categories/DataScience/"/>
    
    
      <category term="MachineLearning" scheme="https://future-architect.github.io/tags/MachineLearning/"/>
    
  </entry>
  
  <entry>
    <title>AWS Glueの単体テスト環境の構築手順</title>
    <link href="https://future-architect.github.io/articles/20191206/"/>
    <id>https://future-architect.github.io/articles/20191206/</id>
    <published>2019-12-05T15:22:02.000Z</published>
    <updated>2020-01-21T00:05:43.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p><a href="https://qiita.com/advent-calendar/2019/future" target="_blank" rel="noopener">フューチャーアドベントカレンダー</a>の6日目のエントリーです。<br>昨日は<a href="https://qiita.com/yut0n" target="_blank" rel="noopener">yut0n</a>さんによる「<a href="https://qiita.com/yut0n/items/02a632c90fc076a21046" target="_blank" rel="noopener">GoogleカレンダーのイベントをHangouts Chatに通知するbotを作った話</a>」でした。</p><p>当記事では、AWS Glue をローカル環境で単体テストするための環境構築方法についてまとめました。</p><h1 id="手順"><a href="#手順" class="headerlink" title="手順"></a>手順</h1><ol><li>環境構築</li><li>pytest の環境構築</li><li>conftest.py の設定</li><li>テスト対象の作成</li><li>テスト実行</li></ol><h1 id="実行環境"><a href="#実行環境" class="headerlink" title="実行環境"></a>実行環境</h1><ul><li>Amazon Linux 2 AMI 2.0.20190618 x86_64 HVM gp2</li><li>Docker 18.06.1-ce</li><li>docker-compose version 1.24.0</li></ul><h2 id="1-環境構築"><a href="#1-環境構築" class="headerlink" title="1. 環境構築"></a>1. 環境構築</h2><p>docker compose を利用します。<br>GlueのDockerfileは、 こちらの記事(<a href="https://future-architect.github.io/articles/20191101/">AWS Glueの開発エンドポイントがそこそこお高いのでローカル開発環境を用意しました | Future Tech Blog - フューチャーアーキテクト</a>) にて、紹介されているDockerfileをベースに利用します。<br>少々イメージサイズが大きかったので、小さくする対応をしていますが基本は同じです。</p><p>ディレクトリ構成</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── Dockerfile</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── src                 <span class="comment"># ETLスクリプト</span></span><br><span class="line">└── tests               <span class="comment"># テストファイル</span></span><br></pre></td></tr></table></figure><details><summary>Dockerfile</summary><div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos:<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://omohikane.com/centos7_docker_python36/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum update -y \</span></span><br><span class="line"><span class="bash">  &amp;&amp; yum install -y gcc gcc-c++ make openssl-devel readline-devel zlib-devel wget curl unzip vim epel-release git \</span></span><br><span class="line"><span class="bash">  &amp;&amp; yum install -y vim-enhanced bash-completion net-tools <span class="built_in">bind</span>-utils \</span></span><br><span class="line"><span class="bash">  &amp;&amp; yum install -y https://centos7.iuscommunity.org/ius-release.rpm \</span></span><br><span class="line"><span class="bash">  &amp;&amp; yum install -y python36u python36u-libs python36u-devel python36u-pip \</span></span><br><span class="line"><span class="bash">  &amp;&amp; yum install -y java java-1.8.0-openjdk-devel \</span></span><br><span class="line"><span class="bash">  &amp;&amp; rm -rf /var/cache/yum/* \</span></span><br><span class="line"><span class="bash">  &amp;&amp; yum clean all</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> localedef -f UTF-8 -i ja_JP ja_JP.UTF-8</span></span><br><span class="line"><span class="keyword">ENV</span> LANG ja_JP.UTF-<span class="number">8</span></span><br><span class="line"><span class="keyword">ENV</span> LC_CTYPE <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_NUMERIC <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_TIME <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_COLLATE <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_MONETARY <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_MESSAGES <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_PAPER <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_NAME <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_ADDRESS <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_TELEPHONE <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_MEASUREMENT <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_IDENTIFICATION <span class="string">"ja_JP.UTF-8"</span></span><br><span class="line"><span class="keyword">ENV</span> LC_ALL ja_JP.UTF-<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Maven</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -OL https://archive.apache.org/dist/maven/maven-3/3.6.2/binaries/apache-maven-3.6.2-bin.tar.gz \</span></span><br><span class="line"><span class="bash">  &amp;&amp; tar -xzvf apache-maven-3.6.2-bin.tar.gz \</span></span><br><span class="line"><span class="bash">  &amp;&amp; mv apache-maven-3.6.2 /opt/ \</span></span><br><span class="line"><span class="bash">  &amp;&amp; ln -s /opt/apache-maven-3.6.2 /opt/apache-maven \</span></span><br><span class="line"><span class="bash">  &amp;&amp; rm apache-maven-3.6.2-bin.tar.gz</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/lib/jvm/java-<span class="number">1.8</span>.<span class="number">0</span>-openjdk/jre/</span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:/opt/apache-maven/bin</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mvn -version</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># spark</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -OL https://aws-glue-etl-artifacts.s3.amazonaws.com/glue-1.0/spark-2.4.3-bin-hadoop2.8.tgz \</span></span><br><span class="line"><span class="bash">  &amp;&amp; tar -xzvf spark-2.4.3-bin-hadoop2.8.tgz \</span></span><br><span class="line"><span class="bash">  &amp;&amp; mv spark-2.4.3-bin-spark-2.4.3-bin-hadoop2.8 /opt/ \</span></span><br><span class="line"><span class="bash">  &amp;&amp; ln -s /opt/spark-2.4.3-bin-spark-2.4.3-bin-hadoop2.8 /opt/spark \</span></span><br><span class="line"><span class="bash">  &amp;&amp; rm ./spark-2.4.3-bin-hadoop2.8.tgz</span></span><br><span class="line"><span class="keyword">ENV</span> SPARK_HOME /opt/spark</span><br><span class="line"></span><br><span class="line"><span class="comment"># python</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> unlink /bin/python \</span></span><br><span class="line"><span class="bash">  &amp;&amp; ln -s /bin/python3 /bin/python \</span></span><br><span class="line"><span class="bash">  &amp;&amp; ln -s /bin/pip3.6 /bin/pip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Glueライブラリ取得</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> git config --global http.sslVerify <span class="literal">false</span> \</span></span><br><span class="line"><span class="bash">  &amp;&amp; git <span class="built_in">clone</span> -b glue-1.0 --depth 1  https://github.com/awslabs/aws-glue-libs \</span></span><br><span class="line"><span class="bash">  &amp;&amp; ln -s <span class="variable">$&#123;SPARK_HOME&#125;</span>/jars /aws-glue-libs/jarsv1 \</span></span><br><span class="line"><span class="bash">  &amp;&amp; sed -i -e <span class="string">'s/mvn/mvn -T 4/'</span> /aws-glue-libs/bin/glue-setup.sh \</span></span><br><span class="line"><span class="bash">  &amp;&amp; ./aws-glue-libs/bin/gluepyspark</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:/aws-glue-libs/bin/</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt/src</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>, <span class="string">"while :; do sleep 10; done"</span>]</span></span><br></pre></td></tr></table></figure></div></details><p>S3の環境が必要だったため、 <a href="https://github.com/localstack/localstack" target="_blank" rel="noopener">LocalStack</a> を利用しています。</p><p>docker-compose.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="string">glue.local:</span></span><br><span class="line"><span class="attr">    build:</span></span><br><span class="line"><span class="attr">      context:</span> <span class="string">./</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">gluelocal</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./src:/opt/src/src</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./tests:/opt/src/tests</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line">      <span class="comment"># dummy configure</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AWS_DEFAULT_REGION=ap-northeast-1</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AWS_DEFAULT_OUTPUT=json</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AWS_ACCESS_KEY_ID=xxx</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AWS_SECRET_ACCESS_KEY=xxx</span></span><br><span class="line">  <span class="string">aws.local:</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">localstack/localstack</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">SERVICES=s3</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">DEFAULT_REGION=ap-northeast-1</span></span><br><span class="line">      <span class="comment"># dummy configure</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AWS_DEFAULT_REGION=ap-northeast-1</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AWS_DEFAULT_OUTPUT=json</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AWS_ACCESS_KEY_ID=xxx</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">AWS_SECRET_ACCESS_KEY=xxx</span></span><br></pre></td></tr></table></figure><p>コンテナ起動</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d --build</span><br></pre></td></tr></table></figure><h2 id="2-pytestの環境構築"><a href="#2-pytestの環境構築" class="headerlink" title="2. pytestの環境構築"></a>2. pytestの環境構築</h2><p>必要なパッケージのインストールをします。<br><a href="https://docs.aws.amazon.com/ja_jp/glue/latest/dg/add-job.html" target="_blank" rel="noopener">Glueバージョン 1.0</a> を想定して、pysparkは2.4.3を明示的にインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gluelocal pip install pyspark==2.4.3 boto3 pytest</span><br></pre></td></tr></table></figure><h2 id="3-conftest-py-の設定"><a href="#3-conftest-py-の設定" class="headerlink" title="3. conftest.py の設定"></a>3. conftest.py の設定</h2><p>pytestではテストの前後処理を <code>tests/conftest.py</code> 内に実装する慣習があるためそれにならいます。<br>Test実行時に1回だけ実行したい処理をまとめています。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> pyspark.context <span class="keyword">import</span> SparkContext</span><br><span class="line"><span class="keyword">from</span> awsglue.context <span class="keyword">import</span> GlueContext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(scope="session", autouse=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scope_session</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># テスト内で使い回せるようにS3のURLを環境変数に設定</span></span><br><span class="line">    os.environ[<span class="string">"TEST_S3_ENDPOINT_URL"</span>] = <span class="string">"http://aws.local:4572"</span></span><br><span class="line">    sc = SparkContext()</span><br><span class="line">    <span class="comment"># S3のエンドポイントをLocalStackへ差し替える</span></span><br><span class="line">    sc._jsc.hadoopConfiguration().set(<span class="string">"fs.s3a.endpoint"</span>, <span class="string">"http://aws.local:4572"</span>)</span><br><span class="line">    sc._jsc.hadoopConfiguration().set(<span class="string">"fs.s3a.path.style.access"</span>, <span class="string">"true"</span>)</span><br><span class="line">    sc._jsc.hadoopConfiguration().set(<span class="string">"fs.s3a.signing-algorithm"</span>, <span class="string">"S3SignerType"</span>)</span><br><span class="line">    pytest.sc = sc</span><br><span class="line">    pytest.glueContext = GlueContext(pytest.sc)</span><br><span class="line">    pytest.spark = pytest.glueContext.spark_session</span><br></pre></td></tr></table></figure><h2 id="4-テスト対象の作成"><a href="#4-テスト対象の作成" class="headerlink" title="4. テスト対象の作成"></a>4. テスト対象の作成</h2><p>サンプル程度に、S3上のcsvファイルからDynamicFrameを生成する関数をテストします。</p><p>Glueスクリプト: <code>src/etl.py</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> awsglue.dynamicframe <span class="keyword">import</span> DynamicFrame</span><br><span class="line"><span class="keyword">from</span> awsglue.context <span class="keyword">import</span> GlueContext</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_dynamic_frame_from_csv</span><span class="params">(glueContext: GlueContext, spark, bucket: str, path: str)</span> -&gt; DynamicFrame:</span></span><br><span class="line">    p = <span class="string">"s3://&#123;&#125;/&#123;&#125;"</span>.format(bucket, path)</span><br><span class="line">    <span class="keyword">return</span> glueContext.create_dynamic_frame_from_options(</span><br><span class="line">        connection_type=<span class="string">"s3"</span>,</span><br><span class="line">        connection_options=&#123;<span class="string">"paths"</span>: [p]&#125;,</span><br><span class="line">        format=<span class="string">"csv"</span>,</span><br><span class="line">        format_options=&#123;<span class="string">"withHeader"</span>: <span class="literal">True</span>, <span class="string">"separator"</span>: <span class="string">","</span>&#125;,</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>テストコード: <code>tests/test_etl.py</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> src.etl <span class="keyword">import</span> load_dynamic_frame_from_csv</span><br><span class="line"><span class="keyword">from</span> botocore.client <span class="keyword">import</span> Config</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_load_dynamic_frame_from_csv</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># setup</span></span><br><span class="line">    inputs = [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="string">"1"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"xxx"</span>,</span><br><span class="line">        <span class="string">"address"</span>: <span class="string">"xxx@example.co.jp"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"id"</span>: <span class="string">"2"</span>,</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"yyy"</span>,</span><br><span class="line">        <span class="string">"address"</span>: <span class="string">"yyy@example.co.jp"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">    input_str = io.StringIO()</span><br><span class="line">    w = csv.DictWriter(input_str, fieldnames=inputs[<span class="number">0</span>].keys())</span><br><span class="line">    w.writeheader()</span><br><span class="line">    <span class="keyword">for</span> input <span class="keyword">in</span> inputs:</span><br><span class="line">      w.writerow(input)</span><br><span class="line">    s3 = boto3.resource(</span><br><span class="line">        <span class="string">"s3"</span>,</span><br><span class="line">        endpoint_url=os.environ[<span class="string">"TEST_S3_ENDPOINT_URL"</span>],</span><br><span class="line">        region_name=<span class="string">"ap-northeast-1"</span>,</span><br><span class="line">        use_ssl=<span class="literal">False</span>,</span><br><span class="line">        config=Config(s3=&#123;<span class="string">"addressing_style"</span>: <span class="string">"path"</span>&#125;),</span><br><span class="line">    )</span><br><span class="line">    bucket_name = <span class="string">"test-csv-bucket"</span></span><br><span class="line">    bucket = s3.Bucket(bucket_name)</span><br><span class="line">    bucket.create(ACL=<span class="string">"public-read-write"</span>)</span><br><span class="line">    body = input_str.getvalue()</span><br><span class="line">    key = <span class="string">"user/2019/12/06/users.csv"</span></span><br><span class="line">    bucket.put_object(Key=key, Body=body, ACL=<span class="string">"public-read-write"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># exec</span></span><br><span class="line">    res_df = load_dynamic_frame_from_csv(pytest.glueContext, pytest.spark, bucket_name, key)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># assert</span></span><br><span class="line">    <span class="keyword">assert</span> res_df.count() == len(inputs)</span><br><span class="line">    res_df_json = res_df.toDF().toJSON().take(len(inputs))</span><br><span class="line">    <span class="keyword">for</span> res <span class="keyword">in</span> res_df_json:</span><br><span class="line">      r = json.loads(res)</span><br><span class="line">      <span class="keyword">assert</span> r <span class="keyword">in</span> inputs</span><br></pre></td></tr></table></figure><h2 id="5-テスト実行"><a href="#5-テスト実行" class="headerlink" title="5. テスト実行"></a>5. テスト実行</h2><p>Glue環境を構築して pytest を実行する <code>gluepytest</code> コマンドが用意されているため、そちらを利用します。<br>PATHを通してあるので、下記で実行できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it gluelocal gluepytest</span><br></pre></td></tr></table></figure><p>結果</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  adding: awsglue/ (stored 0%)</span><br><span class="line">  adding: awsglue/README.md (deflated 57%)</span><br><span class="line">  adding: awsglue/__init__.py (deflated 37%)</span><br><span class="line">  adding: awsglue/context.py (deflated 78%)</span><br><span class="line">  adding: awsglue/data_sink.py (deflated 60%)</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line">================================== <span class="built_in">test</span> session starts ==================================</span><br><span class="line">platform linux -- Python 3.6.8, pytest-5.3.1, py-1.8.0, pluggy-0.13.1</span><br><span class="line">rootdir: /opt/src</span><br><span class="line">collected 1 item</span><br><span class="line"></span><br><span class="line">tests/test_etl.py .                                                               [100%]</span><br><span class="line"></span><br><span class="line">=================================== 1 passed <span class="keyword">in</span> 9.79s ===================================</span><br></pre></td></tr></table></figure><h1 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h1><p>Glueをローカル環境にて、単体テストを実施する環境を整備してみました。<br>Glueの動作確認は、開発エンドポイントを利用して確認することが多く、<br>少々面倒かつ再現性がなかったため、テスト環境を構築してテストを実行することで安定して開発を進めていきたいです。<br>Dockerで作成しているため、CI/CD等にも組み込んでいけたらと考えています。<br>(Dockerfileが1GB程度とまだまだ大きいため、もう少しスリムにしたいなとは思っています。)</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://future-architect.github.io/articles/20191101/">AWS Glueの開発エンドポイントがそこそこお高いのでローカル開発環境を用意しました | Future Tech Blog - フューチャーアーキテクト</a></li><li><a href="https://dev.classmethod.jp/cloud/aws/aws-glue-local/" target="_blank" rel="noopener">AWS Glueをローカル環境で実行してみた ｜ Developers.IO</a></li></ul><hr><p>関連記事：</p><ul><li><a href="/articles/20180828">5TB/日 のデータをAWS Glueでさばくためにやったこと（概要編）</a></li><li><a href="/articles/20181205/">5TB/日 のデータをAWS Glueでさばくためにやったこと（性能編）</a></li><li><a href="/articles/20190902/">AWS IAMロールの信頼関係の気になる動作</a></li><li><a href="/articles/20191009/">AWS Session Managerでセッションを切断されにくくする方法</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://qiita.com/advent-calendar/2019/future&quot; target=&quot;_blank
      
    
    </summary>
    
      <category term="Infrastructure" scheme="https://future-architect.github.io/categories/Infrastructure/"/>
    
    
      <category term="AWS" scheme="https://future-architect.github.io/tags/AWS/"/>
    
      <category term="Glue" scheme="https://future-architect.github.io/tags/Glue/"/>
    
  </entry>
  
  <entry>
    <title>Go Conferenceの📛を作る</title>
    <link href="https://future-architect.github.io/articles/20191203/"/>
    <id>https://future-architect.github.io/articles/20191203/</id>
    <published>2019-12-03T01:31:11.000Z</published>
    <updated>2019-12-02T15:05:51.275Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/20191202/photo_20191202_02.jpeg"><p><a href="https://qiita.com/advent-calendar/2019/future" target="_blank" rel="noopener">フューチャーアドベントカレンダー</a>の3日目のエントリーです。昨日は<a href="https://qiita.com/rkyymmt@github/items/87b13b11dd1c9001592b" target="_blank" rel="noopener">rkyymmt@githubさんによる私のコンピュータ遍歴</a>でした。</p><p>Go Conference 2019 Autumnでは、弊社フューチャーがTofu On Fireスポンサーを努めさせていただきました。Go Conference Fukuokaが参加者に名札を配っており（トップ写真左側）、それが羨ましく、東京のイベントでも配布したい！と思ったので、名札提供に手をあげさせていただきました。どうせ配るなら、外国の人が喜びそうなGenuine Tofu on Fireの実物をお土産にしてもらえばいいかな、ということで、このようになりました。また、個人の名前と、Connpassのアバター画像（≒Twitterのアイコン）が入っているオフ会にはぴったりな名札なので、ぜひとも他のイベントでも身につけていただければと思っています。</p><p>この名札の中身ですが、Goを使って作っていますので、その技術解説その他です。なお、コードはこちらになります。</p><p><a href="https://github.com/shibukawa/tofuonfire" target="_blank" rel="noopener">https://github.com/shibukawa/tofuonfire</a></p><h1 id="tofuonfireコマンドの使い方"><a href="#tofuonfireコマンドの使い方" class="headerlink" title="tofuonfireコマンドの使い方"></a>tofuonfireコマンドの使い方</h1><h2 id="上司にお伺いをたてる"><a href="#上司にお伺いをたてる" class="headerlink" title="上司にお伺いをたてる"></a>上司にお伺いをたてる</h2><p>このプログラムを実行する前に、まずはスポンサーしますというのを宣言します。フューチャーもイベント協賛はいろいろやっていますし、特にうちのユニットはGo案件の割合も多いので、OKはもらいやすくて助かります。今回は参加者、スピーカー、スポンサーあわせて240人とかで、なおかつ1つ120円ということが分かったので、コスト的にはイベントスポンサーと考えると費用対効果は高いです。</p><p>OKをもらったら、イベントのスポンサーページにフューチャーの会社のロゴを載せてもらいます。Tofu On Fireと最初からネタバラシしていましたが、それに気づいたツイートは１件だけでした。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Tofu On Fireの提供パートナーって…<br><br>名札か！！📛🤣<a href="https://twitter.com/hashtag/gocon?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#gocon</a> <a href="https://t.co/VAXncc3Lua" target="_blank" rel="noopener">pic.twitter.com/VAXncc3Lua</a></p>&mdash; к ё м е (@KeME_S) <a href="https://twitter.com/KeME_S/status/1181835890793959425?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">October 9, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h2 id="名札を買う"><a href="#名札を買う" class="headerlink" title="名札を買う"></a>名札を買う</h2><img src="/images/20191202/photo_20191202_03.png"><p>今回は学研モールの、<a href="https://gakken-mall.jp/ec/mirai/cmShopTopPage2.html" target="_blank" rel="noopener">学研の保育用品</a>というサイトから購入しました。1つの商品は10セットまで、という制約があったので、一般参加者の分は2回に分けて購入しました。色は、よくスピーカーに配っているGopherぬいぐるみの色に合わせて、水色（一般参加者）、紫（スタッフ）、ピンク（スポンサー）などをチョイスしました。スピーカーは絵文字📛と同じ、一番格式の高い赤にしました。スカラーシップは緑。遠方枠の名札を買い忘れて他の色のあまりから補填したのは失敗。</p><p>中に入れる紙のサイズは購入するまではわからなかったのですが、スクリーンショットの名札で35mm四方でした。</p><h2 id="コマンドの実行"><a href="#コマンドの実行" class="headerlink" title="コマンドの実行"></a>コマンドの実行</h2><p>このイベントのために突貫で作り、あまり再利用性とか考えていないので、もし利用したい場合はフォークして改変して利用ということになると思いますが、プログラムの概要の紹介を兼ねて使い方を紹介します。</p><p>このプログラムはconnpassのイベント情報からユーザー情報を取得して、PDFファイルを作成するところまで行います。Go ConferenceのconnpassのURLは <a href="https://gocon.connpass.com/event/148602/" target="_blank" rel="noopener">https://gocon.connpass.com/event/148602/</a> です。この数値をコマンドライン引数に設定します。</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go get github.com/shibukawa/tofuonfire</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./tofuonfire 148602</span></span><br></pre></td></tr></table></figure><p>これでoutputフォルダにPDFがばらばらっと生成されます。これを印刷したらOKです。簡単ですね。</p><p>実際には弊社のロゴのPNG画像をローカルに置かないといけない（＆その画像はApacheライセンスではないので同梱していない）ので、これだけだとエラーになるのですが、そのままは使わないと思いますので、動作確認が取れているコード片として利用していただければ、と思います。</p><p>あとフォントは<a href="http://jikasei.me/font/genshin/" target="_blank" rel="noopener">源真ゴシック</a>を使っていますが、これもライセンスが違うので同梱はしていません。NotoフォントだとOpenTypeですが、Go系のツールはたいていTrueTypeしか対応していない（PureGoの準標準ライブラリがある）ので、NotoフォントのTrueType実装ともいうべきこのフォントを利用させていただきました。これもダウンロードして実行フォルダに置きます。</p><h2 id="PDFの印刷と名札の制作"><a href="#PDFの印刷と名札の制作" class="headerlink" title="PDFの印刷と名札の制作"></a>PDFの印刷と名札の制作</h2><img src="/images/20191202/photo_20191202_04.jpeg"><p>あとはプリンターでA4でカラーで印刷して、カッターとカッティングボードを用意して手作業で入れていきます。中の厚紙（園児の名前、血液型とかを書く欄があるやつ）を引き出して、上に重ねて一緒に差し込むと比較的かんたんにきれいに入れることができました。</p><p>当日はお客さんに探してもらいやすいように、おおまかに先頭のアルファベットごとにグルーピングして会場に持っていきました。</p><p>一週間ぐらい前から作り始めましたが、キャンセルで繰り上がり（有料イベントは待ち行列はなくて空いた瞬間申し込みなので正確には繰り上がりではないのですが）がちょこちょこあって、それの対応が少し面倒でした。今回は金曜日の夕方で名簿を最終確定ということになっていたので、そのタイミングで繰り上がった人の分のPDFを印刷して月曜日のイベントに備えました。あとはスポンサーやスピーカーの人の分の情報収集とかですね。このあたりはスタッフの渉外担当のbudougumiさんやらymotongpooさんにこまめに情報を教えてもらってなんとかしました。Tofu on Fireスポンサーはスタッフ兼務じゃないとなかなか厳しいタスクだな、という感想を持ちました。</p><h1 id="実装の解説"><a href="#実装の解説" class="headerlink" title="実装の解説"></a>実装の解説</h1><h2 id="スクレイピング"><a href="#スクレイピング" class="headerlink" title="スクレイピング"></a>スクレイピング</h2><p>Connpassにはイベントそのもののリストを取得するAPIがあり、イベントカレンダーを作るユースケースとしては十分なのですが、個別のイベントの詳細情報の取得のAPIは用意されていません。そのため、イベント情報のHTMLをパースする必要があります。</p><p>まず、Connpassのサイトに迷惑をかけないように、一度だけHTMLをダウンロードし、その後はローカルのキャッシュから読むようにします。HTMLファイルをキャッシュするのではなくて、読み込んで取り出したユーザー名と画像ファイルのリストのJSONを出力するようにしました。このJSONが存在したら読み込みをそこから行う感じです。</p><p>スクレイピングには定番の<a href="https://godoc.org/github.com/PuerkitoBio/goquery" target="_blank" rel="noopener">“github.com/PuerkitoBio/goquery”</a>を使いました。CSSセレクタっぽい感じで情報の取得ができます。Connpassのイベント参加者ページ（<code>https://connpass.com/event/イベント番号/participation/</code>）を見ると、参加者の種別ごとに<code>participants_table</code>クラスのついた<code>&lt;table&gt;</code>タグがあるので、それをとってきて調べれば簡単そうです。</p><p>テーブルごとに登録されているユーザーのリストを取得するには次のように書けば良いです。テーブルごとのループと、テーブルの中の行ごとのループですね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> pages [][]Card</span><br><span class="line">doc.Find(<span class="string">"table.participants_table"</span>).Each(<span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>, s <span class="keyword">var</span> *goquery.Selection)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> cards []Card</span><br><span class="line">title := spaces.ReplaceAllString(s.Find(<span class="string">"thead tr th"</span>).Text(), <span class="string">" "</span>)</span><br><span class="line">log.Println(title)</span><br><span class="line">page := Page&#123;</span><br><span class="line">Category: title,</span><br><span class="line">&#125;</span><br><span class="line">s.Find(<span class="string">".display_name &gt; a"</span>).Each(<span class="function"><span class="keyword">func</span><span class="params">(index <span class="keyword">int</span>, s *goquery.Selection)</span></span> &#123;</span><br><span class="line">href, _ := s.Attr(<span class="string">"href"</span>)</span><br><span class="line">fragments := strings.Split(href, <span class="string">"/"</span>)</span><br><span class="line">name := fragments[<span class="built_in">len</span>(fragments)<span class="number">-2</span>]</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">"open"</span> &#123;</span><br><span class="line">name = fragments[<span class="built_in">len</span>(fragments)<span class="number">-3</span>]</span><br><span class="line">&#125;</span><br><span class="line">log.Println(s.Text() + <span class="string">" ("</span> + href + <span class="string">")"</span>)</span><br><span class="line">card := Card&#123;</span><br><span class="line">Name:      s.Text(),</span><br><span class="line">ImagePath: imagepath,</span><br><span class="line">&#125;</span><br><span class="line">cards = <span class="built_in">append</span>(cards, card)</span><br><span class="line">&#125;)</span><br><span class="line">pages = <span class="built_in">append</span>(pages, cards)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>なお、画像は参加者一覧のページでは解像度が低かったので、個別のユーザーページに飛んでプロフィール画像を取得するようにしています。最終的な画像はS3なので特にアクセス絞らなくてはいいと思いますがプロフィールページは<code>&quot;golang.org/x/time/rate&quot;</code>パッケージを利用して1秒に1ページのみ取得するようにしました。もちろん、この画像も、一度ダウンロード済みの場合はページアクセスをしないようにして、試行錯誤しやすくしています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1秒に1回</span></span><br><span class="line">limiter := rate.NewLimiter(rate.Every(time.Second), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ページ取得に合間にこれを挟む</span></span><br><span class="line">limiter.Wait(context.Background())</span><br></pre></td></tr></table></figure><p>はい、これでうまくとれました。</p><h2 id="というわけにはいかなかった"><a href="#というわけにはいかなかった" class="headerlink" title="というわけにはいかなかった"></a>というわけにはいかなかった</h2><p>最初これでうまくいったと思ったのですが、実は1つのカテゴリに100人以上いると、ページングされるということがあとからわかりました。名札を作ってみたら思ったよりも余る。不思議！と思ったら一般参加者130人のうち、後ろ30人が出力されてませんでした。</p><p>これも、goqueryを駆使してなんとか取得しています。moreのリンクがあったらそれをたどり、下のページングのリンクの2ページ目から最終ページの手前までのページにアクセスして追加で取得するようにしています（1ページ目は取得済みなので飛ばし）。ページングのリストが最大10ページまで表示だとすると、1000人までは対応できます。それ以上になるともうちょっとコードが必要かと。</p><img src="/images/20191202/photo_20191202_05.png" style="border:solid 1px #000000"><h2 id="PDFにする"><a href="#PDFにする" class="headerlink" title="PDFにする"></a>PDFにする</h2><p>PDFは<code>&quot;github.com/signintech/gopdf&quot;</code>パッケージを使いました。<br>このパッケージはREADMEから参照されている<a href="https://github.com/oneplus1000/gopdfsample" target="_blank" rel="noopener">サンプル集</a>が充実していたのは良かったです。</p><p>gopdfの座標の単位はポイント数です。A4の紙は約595ptx841pt。一枚の名札は35mm四方なので99pt。余白を入れてA4一枚で5x8で40枚詰め込んだPDFを作成します。</p><p><a href="https://github.com/shibukawa/tofuonfire/blob/master/template.go" target="_blank" rel="noopener">こちらのコード</a>を見ていただくのが早いと思いますが、ページを作って、個々人の名札のオフセットを計算し、それをもとに、枠線とか、画像とか、文字とか細々と位置とか大きさを調整して配置して保存するとPDFができあがります。なるべくアイコンが大きくなるようにしています。文字列は事前にサイズ計算しておいて、センタリングするとかもしています。手間暇かかるけど一番楽しい部分ですね。</p><h2 id="Connpass以外のユーザー情報も取り込む"><a href="#Connpass以外のユーザー情報も取り込む" class="headerlink" title="Connpass以外のユーザー情報も取り込む"></a>Connpass以外のユーザー情報も取り込む</h2><p>今回は一般参加者と当日スタッフ、レギュラースタッフはConnpassから情報が取れましたが、スピーカーとスポンサーは別の管理になっていました。これらの情報は手作業でJSONにまとめておいて、追加で読み込むようにしました。次回やるならここを自動化したい。</p><h1 id="反省"><a href="#反省" class="headerlink" title="反省"></a>反省</h1><p>スポンサーとスピーカーの情報収集が手動というのはすでに説明しましたが、他にも反省が一つあります。</p><p>今回は名札を各自受け取ってから受付という流れでしたが、受付のときに懇親会参加者は別途受付を行い、お酒が飲めるかどうかを確認してシールを貼る、という手順になっていました。参加者名簿と懇親会名簿を集約し、なおかつ事前アンケートでお酒が飲めるかどうかの情報を収集していたら、受付作業をもっとシンプルに簡略化しつつ、名札に🍶アイコンも印刷できたのになぁ、というのは次回やりたいですね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>GoでのPDF作成は思いの外かんたんでした。印刷後のサイズもぴったりでした。ちょっとした領収証とかを生成するタスクが来てもgopdfでばっちりそうですね。</p><p>あと、今回は狙ったとおりに、参加者の人が喜んでくれると同時に、<a href="https://twitter.com/search?q=%23gocon%20tofu&src=typed_query&f=live" target="_blank" rel="noopener">フューチャーの社名入りの写真や投稿をガンガンTwitterに投稿してくれて</a>、会社のPR効果としてはとても高かったと思います。GoConに参加していない人からも「うらやましい」という声も聞くことができました。エンジニアと園児をかけたネタだ、というツッコミはありましたが、それは意図してませんでした。なるほど。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Tofu on fire、園児とエンジニアがかかってるんだよ！ <a href="https://twitter.com/hashtag/gocon?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#gocon</a></p>&mdash; songmu (@songmu) <a href="https://twitter.com/songmu/status/1188844991214305281?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">October 28, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>どうしても採用目的のチラシは置いても売り残りがちですし、本当はGoやりたい！とフューチャーに応募してくれる人が増えるとうれしいものの、イベントのPR作戦としては名前だけを売る、という方向にしました。</p><p>今回のGoConからは平日開催の2000円の有料イベントになって、仕事とかのどうしても仕方がない理由をのぞいたキャンセルもほとんどなくなり、90秒で枠が埋まることもなくなり、運営としては狙ったとおりの効果が得られました。その一方で、DeNAの玉田さんが当日朝の準備のときに懸念されていましたが、有料イベントだと<a href="https://www.caa.go.jp/policies/policy/representation/fair_labeling/premium_regulation/" target="_blank" rel="noopener">景品表示法</a>が関係してきます。今回は2000円なので全員配布のノベルティは総付景品にあたり、400円を超えるとNGになります。全員分はなかったので問題はなかったと思いますが、今回はモバイルバッテリーを持ち込んだスポンサーさんもいて、そろそろ配布物にかかっている１人あたりお金をスポンサー各社に確認・・・みたいなのが必要なのかなぁ、という気がしています。</p><p>名札はイベント運営に直結した消耗品なので、おそらくこの規制からは外れるのではないか、と考えています。あとは、前回のGoConでDeNAさんが配布していた、DeNA社員による発表内容紹介のチラシなんかも良いですね。この路線で、全スピーカーの発表内容＆スケジュールが入ったパンフレットのスポンサーというのはありな気がします。あとはWantedlyさんの同人誌はうらやましいな、と思っています。</p><p>大小の勉強会は今後もさらに増加傾向になると思いますし、コンプライアンスは維持しつつ、各社がイベントの協賛として個性を出していく、みたいな方向性でアイディアを競っていきたいですね。</p><p>明日はTakaakiOtomoさんによるPub/Subと業務利用についての予定「Pub/Subと業務利用についての予定」です。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/20191202/photo_20191202_02.jpeg&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://qiita.com/advent-calendar/2019/future&quot; target=&quot;_blank&quot; rel=&quot;noopene
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Go" scheme="https://future-architect.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>SORACOM USBドングルの自動接続</title>
    <link href="https://future-architect.github.io/articles/20191201/"/>
    <id>https://future-architect.github.io/articles/20191201/</id>
    <published>2019-12-01T03:02:03.000Z</published>
    <updated>2020-01-15T00:46:35.614Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://qiita.com/advent-calendar/2019/future2" target="_blank" rel="noopener">フューチャー2 Advent Calendar 2019</a> の1日目の記事です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>自動化できる業務ならば極力自動化したいというのは万国共通だとは思います。例えば対象がWebページであれば Selenium によるUI操作自動化が可能ですが、PCにインストールされたGUIアプリに対しては、Webページの「idタグ」に相当するものがなく、UIの自動化は簡単にはできないと考えている方が多いのではないでしょうか。</p><p>このWindowsにインストールされたGUIアプリを「マウスで手動クリック」から「コードで自動操作」に切り替える仕事が業務でありましたので、その手法について紹介します。</p><h2 id="無人化要求"><a href="#無人化要求" class="headerlink" title="無人化要求"></a>無人化要求</h2><p>技術的な可否に関わらず、ニュース等で最新のテクノロジー知識を仕入れた人ならば、「無人化したい/自動化したい」という要求が当然出てきます。それらの試みは技術的に面白いものが多く、エンジニア的には「解決しがいのある課題」だと感じます。</p><p>ただし、「無人化したい/自動化したい」案件では、「無人化/自動化を行うプログラムのメンテナンスを行うという、新しい業務が生まれてしまう」ことがあります。<br>開発側から見れば「全体から見ると総作業量は効率化されるのだから、この新しい作業にはお客様側で担当者をアサインしてほしい」となりますが、お客様側から見ると「既存の業務プロセスに新しい業務を追加することは難しい。可能な限り自動化してほしい」という回答となります。</p><p>この場合、エンジニアは…</p><ol><li>「申し訳ありません。不可能です。」と頭を下げる。</li><li>なんとか解決策を見つけて「課題は解決しました。本件はクローズします。」と報告する。</li></ol><p>…のどちらかだと思います。<br>幸いにも、私が担当したタスクでは「2」で対応できましたので、その際の試みを紹介します。</p><h2 id="工場とクラウドを接続したい。"><a href="#工場とクラウドを接続したい。" class="headerlink" title="工場とクラウドを接続したい。"></a>工場とクラウドを接続したい。</h2><p>あらゆる現場、例えば工場などではIoT化の波があり、あらゆる機器をクラウドとつなげたいニーズがあります。そのようなケースでは、「どのように工場とクラウドをつなぐのか」が鍵となります。というわけで、今回は工場を例にとって紹介します。</p><h3 id="工場とクラウドを阻む最大の壁"><a href="#工場とクラウドを阻む最大の壁" class="headerlink" title="工場とクラウドを阻む最大の壁"></a>工場とクラウドを阻む最大の壁</h3><p>工場現場の機器とインターネットを直接繋ぐのはセキュリティ上よろしくないので、例えば「工場→踏み台PC→クラウド」という構成が考えられます。また、新たに物理的なケーブルを用意するのも大変なので、踏み台PC→クラウドは SORACOM社の提供する USB wi-fi Network Adapter 「NCXX UX302NC-R」という製品を利用してみました。</p><p>NCXX UX302NC-Rとは？</p><blockquote><p>LTE/3G/GSM 対応 USB スティック型データ通信端末です。<br>デバイスへセットすることで、SORACOM の提供する通信環境を利用した無線通信が可能となります。<br><a href="https://soracom.jp/products/module/ux302nc-r/" target="_blank" rel="noopener">参照サイト</a></p></blockquote><p>工場とクラウドを繋ぐ「接続の窓口」として SORACOM USBドングル（NCXX UX302NC-R）を設置したのですが、そのアプリが接続における壁となってしまいました。</p><p>SORACOM USBドングルは、デバイスにセットした段階ではインターネットに接続されず、専用のGUIアプリを立ち上げて「<strong>マウスで接続ボタンをクリックする</strong>」ことでネットに繋がる仕様でした。</p><p>CLI経由による操作は見当たらず、カスタマーセンターに電話で問い合わせても…<br>「<strong>コマンド等による操作は想定しておりません。</strong>Connection Manager（SORACOM USBドングル専用のGUIアプリ）を立ち上げ、接続ボタンをクリックしていただけると幸いです。」<br>…という丁寧な忠告をいただきました。</p><p>つまり、このままでは停電対応などでPCを再起動させるたびに、マウスを手動でクリックするという業務をお客様にお願いする必要がありました。「絶対にその業務はお客様に忘れられるのではないか？むしろ忘れられる自信がある！」ということで、自動化を試みるモチベーションが生まれました。</p><h2 id="マウスによるクリックを自動化する"><a href="#マウスによるクリックを自動化する" class="headerlink" title="マウスによるクリックを自動化する"></a>マウスによるクリックを自動化する</h2><p>WindowsのGUIアプリの操作自動化と言っても大げさなものではなく、</p><ol><li>アプリを立ち上げる</li><li>任意の文字列を入力する</li><li>任意のボタンをクリックする</li></ol><p>…といった程度です。</p><h3 id="作業環境-利用ツール"><a href="#作業環境-利用ツール" class="headerlink" title="作業環境/利用ツール"></a>作業環境/利用ツール</h3><ul><li>Windows 10</li><li>Ruby 2.5.x</li><li>selenium-webdriver 3.142.6</li><li>appium_lib 10.4.1</li><li>WinAppDriver 1.2</li><li>Inspect.exe</li></ul><h3 id="Ruby側の準備"><a href="#Ruby側の準備" class="headerlink" title="Ruby側の準備"></a>Ruby側の準備</h3><p>Gemによるパッケージのインストールと、Ruby設定ファイルの一部を編集をしてください。</p><p>Gemによるインストールコマンド</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gem install selenium-webdriver -v 3.142.6</span><br><span class="line">gem install appium_lib -v 10.4.1</span><br></pre></td></tr></table></figure><p>Ruby設定ファイルの編集:</p><p>eventmachine.rbを開き、以下の1文を追加してください。<br>（筆者の環境では以下のパスにありました。）<br><code>C:¥Ruby25-x64¥lib¥ruby¥gems¥2.5.0gems¥eventmachine-1.2.7-x64-mingw32¥lib¥eventmachine.rb</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require &apos;em/pure_ruby&apos;</span><br></pre></td></tr></table></figure><h3 id="Windows側の準備"><a href="#Windows側の準備" class="headerlink" title="Windows側の準備"></a>Windows側の準備</h3><p>WinAppDriverというドライバと、Inspect.exe というアプリをインストールしてください。</p><ul><li>WinAppDriver (<a href="https://github.com/microsoft/WinAppDriver" target="_blank" rel="noopener">Microsoftの公式リリース</a>)</li><li>Inspect.exe (<a href="https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk" target="_blank" rel="noopener">Microsoftの公式リリース</a>) ※Windows 10 SDK に Inspect.exe が含まれています</li></ul><p>また、WinAppDriver を起動するために、PCを「開発者モード」に変更してください。</p><p>以上により、Ruby・Windowsの事前準備が完了です。<br>ここまで長かったですが、これからGUI操作を自動化するコーディングを開始します。</p><h3 id="自動操作の環境整備"><a href="#自動操作の環境整備" class="headerlink" title="自動操作の環境整備"></a>自動操作の環境整備</h3><p>まずは、自動化したいアプリへの絶対パスを取得しましょう。<br>今回は「SORACOM USBドングル」を自動操作するので、そのGUIアプリまでの絶対パスを記載します。<br>（自動操作したいアプリに合わせて、適宜パスを書き換えてください）</p><figure class="highlight ruby"><figcaption><span>connect.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app_path = <span class="string">'C:/Program Files (x86)/UX302NC Data Connection Manager/Main/USB Modem.exe'</span></span><br></pre></td></tr></table></figure><p>また、自動操作は WinAppDriver が担当するので、その起動スクリプトも書いてしまいましょう。</p><figure class="highlight ruby"><figcaption><span>connect.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start_driver_cmd = <span class="string">'start "" "C:\Program Files (x86)\Windows Application Driver\WinAppDriver.exe" 127.0.0.1 4723/wd/hub'</span></span><br><span class="line">system(start_driver_cmd)</span><br></pre></td></tr></table></figure><p>次は「ボタンをクリックする」を自動化するために、GUIアプリの「ボタンの要素」を取得します。Webページならば「デベロッパーツール」を使えば ページ内要素のidタグが取得できますが、Windows GUIアプリでは「Inspect.exe」を使います。</p><p>自動操作したいGUIアプリと Inspect.exe を立ち上げ、カーソルをボタン等の上にホバーすれば、その要素名が取得できます。</p><p>ex) SORACOM USBドングルの「接続」ボタンの場合<br>接続ボタンの名前は「接続」だとわかります。それ以外にも IsEnabled（ボタンが押せるか）が true になっていることもわかります。<br><img src="/images/20191201/photo_20191201_01.png"></p><h3 id="実装コード"><a href="#実装コード" class="headerlink" title="実装コード"></a>実装コード</h3><p>以上の作業により</p><ul><li>ドライバの起動コマンド</li><li>GUIアプリへのパス</li><li>GUIアプリ内要素の名前</li></ul><p>が準備できたので、GUI操作を自動化するコードを書きます。</p><figure class="highlight ruby"><figcaption><span>connect.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require</span> <span class="string">'selenium-webdriver'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'appium_lib'</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'rubygems'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ドライバの起動コマンド</span></span><br><span class="line">start_driver_cmd = <span class="string">'start "" "C:\Program Files (x86)\Windows Application Driver\WinAppDriver.exe" 127.0.0.1 4723/wd/hub'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GUIアプリへの絶対パス</span></span><br><span class="line">app_path = <span class="string">'C:/Program Files (x86)/UX302NC Data Connection Manager/Main/USB Modem.exe'</span></span><br><span class="line"></span><br><span class="line">$ConnectorSession</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line">    opts =</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="symbol">caps:</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="symbol">platformName:</span> <span class="string">"WINDOWS"</span>,</span><br><span class="line">            <span class="symbol">platform:</span> <span class="string">"WINDOWS"</span>,</span><br><span class="line">            <span class="symbol">deviceName:</span> <span class="string">"WindowsPC"</span>,</span><br><span class="line">            <span class="symbol">app:</span> app_path</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ConnectorSession = Appium::Driver.new(opts, <span class="literal">false</span>).start_driver     <span class="comment"># GUIアプリを起動する</span></span><br><span class="line">    wait = Selenium::WebDriver::Wait.new <span class="symbol">:timeout</span> =&gt; <span class="number">120</span>                 <span class="comment"># GUIアプリからの応答を120秒まで待つ</span></span><br><span class="line"></span><br><span class="line">    wait.<span class="keyword">until</span>&#123; $ConnectorSession.find_element(<span class="symbol">:name</span>, <span class="string">"接続"</span>).enabled? &#125;  <span class="comment"># "接続"ボタンの IsEnabled が true になるまで待つ</span></span><br><span class="line">    $ConnectorSession.find_element(<span class="symbol">:name</span>, <span class="string">"接続"</span>).click()</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ドライバを起動する</span></span><br><span class="line">system(start_driver_cmd)</span><br><span class="line"></span><br><span class="line"><span class="comment"># GUIアプリを立ち上げ、自動操作を開始する</span></span><br><span class="line">start()</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回の実装コードでは</p><ol><li>アプリを立ち上げる</li><li>ボタンが押せるようになるのを待つ</li><li>ボタンを押す<br>という簡単な操作を自動化しました。</li></ol><p>これまでは「UI操作の自動化はWebアプリでのみ可能」と思っていましたが、WinAppDriverとAppiumを使うことで「GUIアプリ操作の自動化も可能」だとわかりました。これにより私自身の「自動化スキルの裾野が広がったこと」は、今後増えるであろう「無人化したい/自動化したい」案件に向けても良い兆候だと感じています。</p><p>以上、長文にお付き合いいただき、ありがとうございました。</p><hr><p>関連記事：</p><ul><li><a href="/articles/20190814/">WAFとして go-swagger を選択してみた</a></li><li><a href="/articles/20191001/">一周回って、人間が読み書きする設定ファイルはJSONが良いと思った</a></li><li><a href="/articles/20190612/">TypeScript教育用コンテンツ公開のお知らせ</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://qiita.com/advent-calendar/2019/future2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;フューチャー2 Advent Calendar 2019&lt;/a&gt; の1日目の記事です。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Programming" scheme="https://future-architect.github.io/categories/Programming/"/>
    
    
      <category term="Ruby" scheme="https://future-architect.github.io/tags/Ruby/"/>
    
      <category term="Selenium" scheme="https://future-architect.github.io/tags/Selenium/"/>
    
  </entry>
  
</feed>
