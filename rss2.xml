<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Wed, 22 Sep 2021 03:15:03 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Future Engineer Camp 2021に参加しました！</title>
      <link>https://future-architect.github.io/articles/20210922a/</link>
      <guid>https://future-architect.github.io/articles/20210922a/</guid>
      <pubDate>Tue, 21 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;始めに&quot;&gt;&lt;a href=&quot;#始めに&quot; class=&quot;headerlink&quot; title=&quot;始めに&quot;&gt;&lt;/a&gt;始めに&lt;/h1&gt;&lt;p&gt;こんにちは。2021年のフューチャーのサマーインターン「&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="始めに"><a href="#始めに" class="headerlink" title="始めに"></a>始めに</h1><p>こんにちは。2021年のフューチャーのサマーインターン「<a href="https://note.com/future_event/n/n76e7e7d4beef">Engineer Camp</a>」に参加いたしました、山本雄樹です。</p><p>インターンの振り返りも兼ねて、このブログを読んだ方にインターンの内容や雰囲気を伝えられたらと考えています。</p><img src="/images/20210922a/profile.jpeg" alt="profile.jpeg" width="460" height="460" loading="lazy"><h1 id="インターン参加前"><a href="#インターン参加前" class="headerlink" title="インターン参加前"></a>インターン参加前</h1><p>インターン参加前のスキルセットとしては以下の通りです。バックエンドの技術を中心に学習していたのですが、めぼしい成果物などもなく、実務経験が一切ありませんでした。</p><ul><li>Go言語やGitを日常的に使用している</li><li>Linuxの簡単なコマンドであれば知っている</li><li>GCPとDockerを使用したことがある</li></ul><p>そのため、Go言語を使用した実務経験を積めるようなインターン先を探していました。</p><h1 id="参加したコース"><a href="#参加したコース" class="headerlink" title="参加したコース"></a>参加したコース</h1><p>私が参加した2021年のフューチャーのインターンではコースが合計11コースあり、その中から私は③の「<a href="https://note.com/future_event/n/n76e7e7d4beef#bJRgs">大規模IoTプラットフォームのバックエンド開発</a>」を選んで応募しました。Go言語を使用する開発の中で、一番自分の技術スタックとあっているものを選びました。</p><p>実際の業務では以下の技術を使用しました。</p><ul><li>言語: Go言語</li><li>インフラ系: Terraform, AWS</li><li>エディタ: GoLand, VSCode</li><li>その他: Git, Docker, Google Chat API</li></ul><h1 id="インターン内容"><a href="#インターン内容" class="headerlink" title="インターン内容"></a>インターン内容</h1><p>インターンには週5日、四週間参加しました。</p><p>稼働時間は10:00~19:00で、始めの時間を早める場合は終わりの時間を早めます。昼休憩の１時間とインターン生の集まり、インターン生用講義、採用チームとの面談（週一、各30分）以外は全てお仕事の時間です。受け入れ先プロジェクトの方からタスクをもらって、調べたり質問したりしながらタスクを進め、終わったら新しいタスクをもらう、というサイクルを回していました。</p><h2 id="インターンの雰囲気"><a href="#インターンの雰囲気" class="headerlink" title="インターンの雰囲気"></a>インターンの雰囲気</h2><h3 id="インターン生同士の関わり"><a href="#インターン生同士の関わり" class="headerlink" title="インターン生同士の関わり"></a>インターン生同士の関わり</h3><p>週に一度、インターン生の集まりがあり、そこでお互いが行っているタスクの内容を話したります。お互い異なるコースに参加しているため聞ける話もバラバラで面白いです。</p><p>話し足りなかったという方もいらっしゃるかと思いますが、個人的にはその分タスクに集中できたので良かったかなと考えています。</p><h3 id="社員の方との関わり"><a href="#社員の方との関わり" class="headerlink" title="社員の方との関わり"></a>社員の方との関わり</h3><p>受け入れ先のプロジェクトの方がインターン生の面倒を見てくれます。基本的には一人でタスクを進めていくのですが、行き詰まった際にはSlackで質問します。困っているときには声を上げることが大切です。</p><p>また、技術ブログを執筆した際にはたくさんのレビューをいただきました。</p><img src="/images/20210922a/スクリーンショット_2021-09-17_13.40.38.png" alt="スクリーンショット_2021-09-17_13.40.38.png" width="918" height="444" loading="lazy"><h2 id="インターンでの成果"><a href="#インターンでの成果" class="headerlink" title="インターンでの成果"></a>インターンでの成果</h2><h3 id="技術力の向上"><a href="#技術力の向上" class="headerlink" title="技術力の向上"></a>技術力の向上</h3><p>Go言語やGitは日常的に使用しておりキャッチアップの必要性がなかった分、インターン期間中は以下のようなAWSやTerraformといったインフラ寄りの技術について多く触れることができ、バックエンドエンジニアとして扱うことのできる技術領域を広げることができました。</p><img src="/images/20210922a/スクリーンショット_2021-09-16_18.56.07.png" alt="スクリーンショット_2021-09-16_18.56.07.png" width="1200" height="563" loading="lazy"><h3 id="「IoTデバイスのエラー通知を集計して日毎に通知するシステム」の実装"><a href="#「IoTデバイスのエラー通知を集計して日毎に通知するシステム」の実装" class="headerlink" title="「IoTデバイスのエラー通知を集計して日毎に通知するシステム」の実装"></a>「IoTデバイスのエラー通知を集計して日毎に通知するシステム」の実装</h3><p>期間中にこなしたタスクの中で一番粒度の大きかったものが<strong>「IoTデバイスのエラー通知を集計して日毎に通知するシステム」</strong>の実装です。</p><p>AWS LambdaではGo言語を使用して以下の処理を実装しました。</p><ul><li>DynamoDBから昨日のデータを取得する</li><li>取得したデータを集計する</li><li>Amazon KMSで暗号化されたGoogle Chatの送信先URLを復号する</li><li>Google Chat APIで指定されたJSON形式にして送信する</li></ul><img src="/images/20210922a/スクリーンショット_2021-09-16_14.39.51.png" alt="スクリーンショット_2021-09-16_14.39.51.png" width="1017" height="485" loading="lazy"><p>実装はアサインしたプロジェクトのコーディング規則やコードを参照しながら進めました。行き詰まった際にはメンターの方に質問をすることができますし、実務レベルのコードレビューをしていただけます。おかげさまでインターンを通して、実務レベルのGo言語のコーディング能力と自信をつけることができたと考えています。</p><h3 id="Future-Tech-Blogへの投稿"><a href="#Future-Tech-Blogへの投稿" class="headerlink" title="Future Tech Blogへの投稿"></a>Future Tech Blogへの投稿</h3><p>フューチャーは学びや経験をブログ化する文化が強く、私もその文化に乗じてインターン期間中にブログを２本投稿いたしました。<a href="/articles/20200530/#%E3%82%A2%E3%83%AB%E3%83%90%E3%82%A4%E3%83%88er%E3%82%84%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3%E7%94%9F%E3%81%AB%E5%B0%B1%E8%81%B7%E6%B4%BB%E5%8B%95%E3%83%8D%E3%82%BF%E3%81%A8%E3%81%97%E3%81%A6%E6%9B%B8%E3%81%84%E3%81%A6%E3%82%82%E3%82%89%E3%81%86">こちらの記事にもあるとおり</a>、フューチャーではブログの執筆が歓迎されます。書きたい欲があるのであればメンターの方にチラッと伺ってみると良いと思います。きっと背中を押してくれます。<br><img src="/images/20210922a/スクリーンショット_2021-09-17_11.32.42.png" alt="スクリーンショット_2021-09-17_11.32.42.png" width="789" height="492" loading="lazy"></p><p>投稿記事:</p><ul><li><a href="/articles/20210902b/">GoLand Tips 7選</a></li><li><a href="/articles/20210913a/">【Google Chat API】Incoming Webhook を Go で触ってみる</a></li></ul><h2 id="インターンでの学び"><a href="#インターンでの学び" class="headerlink" title="インターンでの学び"></a>インターンでの学び</h2><h3 id="リモート環境でのコミューニケーション"><a href="#リモート環境でのコミューニケーション" class="headerlink" title="リモート環境でのコミューニケーション"></a>リモート環境でのコミューニケーション</h3><p>リモートでは自分が何をしていて、どんなことを考えているかが相手に伝わりにくいです。そのため常に自分が何をしていて、どんなことを考えているかを文字としてSlackの個人用スレッドにぶら下げていました。そうすることで自分の作業内容を相手が理解、管理しやすくなります。</p><h3 id="質問のテクニック"><a href="#質問のテクニック" class="headerlink" title="質問のテクニック"></a>質問のテクニック</h3><p>私はインターンの始めは、問題について15分は必ず考え、解決の糸口が見つからなそうな場合は質問するようにしていました。しかし実際には質問がまとまっていなかったり、どのように質問するか整理して考えている間に解決したりと、うまくいかない場面が何度かありました。これらは自分で解決ができないと分かったタイミングですぐに質問をしているために起こっており、質問をする前に自分の中で一旦整理する時間が必要だと反省しました。</p><p>今後は以下のような手順で質問することを心がけたいと考えています。</p><ul><li>問題について15分考える</li><li>解決できない場合はさらに15分かけて問題を整理し、相手にうまく伝える準備をする</li><li>問題を文字に起こして質問する</li></ul><h3 id="ブログ化のメリット"><a href="#ブログ化のメリット" class="headerlink" title="ブログ化のメリット"></a>ブログ化のメリット</h3><p>インターン参加前はFuture Tech Blogについて、採用活動の一環として行っているのかな程度に思っていたのですが（実際私はフューチャーを認知したのはFuture Tech Blogがきっかけでした）、社内での使われ方を見てブログ化することのメリットを感じました。</p><p>以下は成果発表会で使用したスライドです。</p><img src="/images/20210922a/スクリーンショット_2021-09-17_13.12.41.png" alt="スクリーンショット_2021-09-17_13.12.41.png" width="1194" height="684" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>フューチャーのインターンに参加したことにより以下のような経験を積むことができました。</p><ul><li>実務でのGoの開発経験を得ることができた</li><li>AWSを中心とした現場で使われているインフラに関しての知識を得ることができた</li><li>リモートワークの雰囲気を知れた</li><li>フューチャーのブログ文化に触れることができた</li></ul><p>インターンを通して社員の方と同じように扱っていただきながらも、インターン生としてしっかりと面倒を見ていただきました。おかげさまで実際の仕事の雰囲気を感じながら、楽しく４週間を過ごすことができました。</p><p>インターンの企画をしてくださった採用の方々、面倒を見ていただいた受け入れ先プロジェクトの皆様、ありがとうございました！<br><img src="/images/20210922a/集合写真.png" alt="集合写真.png" width="1200" height="620" loading="lazy"></p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/">インターン</category>
      
      <category domain="https://future-architect.github.io/tags/IoT%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0/">IoTプラットフォーム</category>
      
      
      <comments>https://future-architect.github.io/articles/20210922a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Certified Security - Specialty合格体験記</title>
      <link>https://future-architect.github.io/articles/20210921a/</link>
      <guid>https://future-architect.github.io/articles/20210921a/</guid>
      <pubDate>Mon, 20 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;先日&lt;a href=&quot;https://aws.amazon.com/jp/certification/certified-security-specialty/?ch=sec&amp;sec=rmg&amp;d=1&quot;&gt;AWS Certified</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>TIGの伊藤真彦です。</p><p>先日<a href="https://aws.amazon.com/jp/certification/certified-security-specialty/?ch=sec&sec=rmg&d=1">AWS Certified Security - Specialty</a>に合格しました。<br>今回も合格体験記を残しておきます。</p><img src="/images/20210921a/image.png" alt="合格ロゴ" width="300" height="300" loading="lazy"><h1 id="AWS-Certified-Security-Specialtyとは"><a href="#AWS-Certified-Security-Specialtyとは" class="headerlink" title="AWS Certified Security - Specialtyとは"></a>AWS Certified Security - Specialtyとは</h1><p>暗号化や脆弱性対策、安全な通信の実現など、セキュリティに関するトピックを集めた試験です。</p><p>Solutions Architectをはじめ、各種試験にもセキュリティに関する問題は出題されます。</p><p>傾向としては、他の試験の問題からセキュリティ部分を抜き出したもののような印象を受けるものが半分以上ありました。逆に言うとこれを受験するとセキュリティに関してはSolutions Architect - Professional以上の知識が身につくと捉えても差し支えないでしょう。</p><p>なおフューチャーで開発している<a href="https://vuls.biz/">Future Vuls</a>で扱うような意味合いでのセキュリティについては試験の守備範囲外で、あくまでもクラウドサービスの運用に関する試験になっています。</p><h1 id="学習方法"><a href="#学習方法" class="headerlink" title="学習方法"></a>学習方法</h1><p>まずは他の試験を受験して基礎を固めることを推奨します。</p><p>仮にAWSのサービスに関する知識が完全に無い状態で受験すると、何のセキュリティを何で守っているのか理解することが難しく学習に苦労すると思います。</p><p>私は基礎部分を学習済みのため<a href="https://aws.koiwaclub.com/">aws.koiwaclub.com</a>だけで合格することができました。</p><p>下記の概要が一通り理解できるまでAWSの全体像を把握できていれば問題の内容自体が極めて難しいと感じる事はないと思います。</p><h4 id="ネットワーキング"><a href="#ネットワーキング" class="headerlink" title="ネットワーキング"></a>ネットワーキング</h4><ul><li>NACL、セキュリティグループ</li><li>NAT Gateway</li></ul><h4 id="攻撃対策"><a href="#攻撃対策" class="headerlink" title="攻撃対策"></a>攻撃対策</h4><ul><li>AWS WAF</li><li>AWS Shield</li><li>Amazon CloudFront</li></ul><h4 id="アクセス制御"><a href="#アクセス制御" class="headerlink" title="アクセス制御"></a>アクセス制御</h4><ul><li>AWS IAM、 SCP</li><li>Active Directory、 SSO</li><li>Amazon Cognito</li></ul><h4 id="セキュリティ診断"><a href="#セキュリティ診断" class="headerlink" title="セキュリティ診断"></a>セキュリティ診断</h4><ul><li>Amazon Inspector</li><li>AWS Trusted Advisor</li><li>AWS Config</li><li>AWS Systems Manager</li><li>Amazon GuardDuty</li><li>AWS Artifact</li></ul><h4 id="ロギング"><a href="#ロギング" class="headerlink" title="ロギング"></a>ロギング</h4><ul><li>VPC フローログ</li><li>AWS CloudTrail</li><li>Amazon CloudWatch Logs</li><li>Amazon Athena</li></ul><h4 id="アラート、対応の自動化"><a href="#アラート、対応の自動化" class="headerlink" title="アラート、対応の自動化"></a>アラート、対応の自動化</h4><ul><li>Amazon CloudWatch Events</li><li>Amazon Simple Notification Service</li><li>AWS Lambda</li></ul><h4 id="暗号化"><a href="#暗号化" class="headerlink" title="暗号化"></a>暗号化</h4><ul><li>AWS Key Management Service (KMS)</li><li>AWS Secrets Manager</li><li>AWS CloudHSM</li></ul><p>Amazon S3はVPC Endpointやバケットポリシーの扱い、暗号化、ログ情報の保管場所などあらゆるトピックで出現します。</p><p>更にはAmazon MacieやAWS Security Hubといった比較的新しめのサービスもしっかりと出題されるようになっています。</p><p>学習の過程でDDOS攻撃やSQLインジェクション、ポートスキャン等、脆弱性やサイバー攻撃に関する概念のうち知名度の高いものは知っている前提で問題文が作成されます。脆弱性情報データベースに載っているマニアックな脆弱性については知らなくても一切問題ない程度の知識が要求されます。</p><p>各サービスの目的、違いを意識して概要を理解することが重要であり、全てを実際に運用できるほど熟知する必要はありませんが、それでもこうして並べてみるとそこそこの量になりました。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>基礎部分の試験を全て勉強済みの状態であるため簡単に感じる部分もありましたが、難易度としては申し分ないものでした。</p><p>AWS Security Hubなど新しめの情報のキャッチアップができたのが個人的には役に立ちました。</p><p>ここ数か月だけでも渡邉光さんの<a href="/articles/20210906a/">AWS Certified Developer - Associate 合格体験記</a>に見られるように試験に合格する話を聞くようになりました、社内外問わずモチベーションを維持できるよう盛り上げていきたいですね。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/">合格記</category>
      
      
      <comments>https://future-architect.github.io/articles/20210921a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>lib/pq から jackc/pgx への移行</title>
      <link>https://future-architect.github.io/articles/20210916a/</link>
      <guid>https://future-architect.github.io/articles/20210916a/</guid>
      <pubDate>Wed, 15 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20210916a/top.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;378&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;ライブリッツの筒井です。&lt;/p&gt;
&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20210916a/top.png" alt="" width="1000" height="378" loading="lazy"><p>ライブリッツの筒井です。</p><p><a href="/articles/20210726a/">GoのORマッパー連載</a>、おまけ記事です。<br>特に示し合わせた訳では無いのですが、RDBは全員がPostgreSQLを使っていましたね。</p><p>さて、今回の連載記事のいくつかでも言及されていた、<a href="https://github.com/jackc/pgx">jackc/pgx</a> について簡単に紹介します。</p><ul><li><a href="/articles/20210727a/">GoとPoatgreSQLでCOPY</a></li><li><a href="/articles/20210729a/">GORM v1 と v2 のソースコードリーディングしてみた</a></li></ul><p>GoでのPostgreSQLドライバは <a href="https://github.com/lib/pq">lib/pq</a> が定番でしたが、現在その開発は消極的で今後機能が追加されることはめったに無いそうです。<br><a href="https://github.com/lib/pq#status">https://github.com/lib/pq#status</a></p><p>一方 pgx は現在も活発に開発がなされており、GORM v2にも採用されています。</p><h2 id="使い方の比較"><a href="#使い方の比較" class="headerlink" title="使い方の比較"></a>使い方の比較</h2><p>lib/pq （およびdatabase/sql）と pgx の使い方を比較していきます。<br>pgxはドライバだけでなく database/sql 相当の機能も備えており、これ単体で使用することが可能です。</p><h3 id="接続"><a href="#接続" class="headerlink" title="接続"></a>接続</h3><p><code>configureDatabase()</code> が lib/pq および database/sql、<code>configureDatabasePgx()</code> が pgx での書き方です。以後この命名に従います。</p><p><code>pgx.Connect()</code> で取得可能な <code>pgx.Conn</code> にはコネクションプールは含まれておらずスレッドセーフでも無いため、<br>database/sql と同様の使い方をする場合には <code>pgxpool.Connect()</code> を使用することになります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">pool *pgxpool.Pool</span><br><span class="line">db   *sql.DB</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">configureDatabase</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">uri := <span class="string">&quot;postgres://postgres:password@postgres/postgres?sslmode=disable&quot;</span></span><br><span class="line">db, err = sql.Open(<span class="string">&quot;postgres&quot;</span>, uri)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">configureDatabasePgx</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">uri := <span class="string">&quot;postgres://postgres:password@postgres/postgres?sslmode=disable&quot;</span></span><br><span class="line">pool, err = pgxpool.Connect(context.Background(), uri)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SQL実行"><a href="#SQL実行" class="headerlink" title="SQL実行"></a>SQL実行</h3><p>pgx では、各関数がデフォルトでcontextを受けるようになっています。そのため、database/sql の <code>QueryContext()</code> と pgx の <code>Query()</code> が同等です。</p><p>その他、ExecやBeginTxなどについても同様の使い勝手となるため割愛します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">query</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">q := <span class="string">`select tablename, tableowner from pg_catalog.pg_tables where schemaname = &#x27;public&#x27;`</span></span><br><span class="line">rows, err := db.QueryContext(context.TODO(), q)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> owner <span class="keyword">string</span></span><br><span class="line">rows.Scan(&amp;name, &amp;owner)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s owned by %s\n&quot;</span>, name, owner)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryPgx</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">q := <span class="string">`select tablename, tableowner from pg_catalog.pg_tables where schemaname = &#x27;public&#x27;`</span></span><br><span class="line">rows, err := pool.Query(context.TODO(), q)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> owner <span class="keyword">string</span></span><br><span class="line">rows.Scan(&amp;name, &amp;owner)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s owned by %s\n&quot;</span>, name, owner)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pgx の場合は1行ごとにコールバック関数を呼び出す <code>QueryFunc()</code> が用意されています。<code>defer rows.Close()</code> や <code>for rows.Next() &#123;&#125;</code> といったSnippetが不要になります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryPgxEx</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;========== queryPgxEx() ==========&quot;</span>)</span><br><span class="line">q := <span class="string">`select tablename, tableowner from pg_catalog.pg_tables where schemaname = &#x27;public&#x27;`</span></span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> owner <span class="keyword">string</span></span><br><span class="line">_, err := pool.QueryFunc(context.TODO(), q, []<span class="keyword">interface</span>&#123;&#125;&#123;&#125;, []<span class="keyword">interface</span>&#123;&#125;&#123;&amp;name, &amp;owner&#125;, <span class="function"><span class="keyword">func</span><span class="params">(qfr pgx.QueryFuncRow)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s owned by %s\n&quot;</span>, name, owner)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="エラーハンドリング"><a href="#エラーハンドリング" class="headerlink" title="エラーハンドリング"></a>エラーハンドリング</h3><p>pgx では Go 1.13 で追加された <code>errors.As()</code> が使えるようになっています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">invalidQuery</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;========== invalidQuery() ==========&quot;</span>)</span><br><span class="line">q := <span class="string">`select 1 +`</span></span><br><span class="line"><span class="keyword">var</span> v <span class="keyword">int</span></span><br><span class="line">err := db.QueryRowContext(context.TODO(), q).Scan(&amp;v)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err, ok := err.(*pq.Error); ok &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;pq error: %v %s&quot;</span>, err.Code, err.Message)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">invalidQueryPgx</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;========== invalidQueryPgx() ==========&quot;</span>)</span><br><span class="line">q := <span class="string">`select 1 +`</span></span><br><span class="line"><span class="keyword">var</span> v <span class="keyword">int</span></span><br><span class="line">err := pool.QueryRow(context.TODO(), q).Scan(&amp;v)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">var</span> pgErr *pgconn.PgError</span><br><span class="line"><span class="keyword">if</span> errors.As(err, &amp;pgErr) &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;pgx error: %s %s&quot;</span>, pgErr.Code, pgErr.Message)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pgx-の便利機能をつかう"><a href="#pgx-の便利機能をつかう" class="headerlink" title="pgx の便利機能をつかう"></a>pgx の便利機能をつかう</h2><p>pgx にはLoggerを設定することが可能です。</p><p>次のコードは pgx に zerolog を設定する例です。コネクションプールの作成時に設定します。</p><p>実行したSQLや実行時間を構造化ログとして出力できるのはなかなか便利です。</p><p>zerologの他にもzap、log15などのAdapterが用意されているようです。<br><a href="https://github.com/jackc/pgx/tree/v4.13.0/log">https://github.com/jackc/pgx/tree/v4.13.0/log</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">configureDatabasePgxWithConfig</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">uri := <span class="string">&quot;postgres://postgres:password@postgres/postgres?sslmode=disable&quot;</span></span><br><span class="line">cfg, err := pgxpool.ParseConfig(uri)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">cfg.ConnConfig.Logger = zerologadapter.NewLogger(log.With().Logger())</span><br><span class="line">cfg.ConnConfig.LogLevel = pgx.LogLevelDebug</span><br><span class="line">pool, err = pgxpool.ConnectConfig(context.TODO(), cfg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>また、複数のSQLをまとめて実行できるBatch機能が用意されています。<br>通信にかかるオーバーヘッドを削減することが出来ますが、使い所は限定的かもしれません。</p><p>Resultの順番は、Queueに入れた順番が保持されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">batch</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;========== batch() ==========&quot;</span>)</span><br><span class="line">b := &amp;pgx.Batch&#123;&#125;</span><br><span class="line">b.Queue(<span class="string">&quot;select 1, pg_sleep(1.5)&quot;</span>)</span><br><span class="line">b.Queue(<span class="string">&quot;select 2, pg_sleep(1.0)&quot;</span>)</span><br><span class="line">b.Queue(<span class="string">&quot;select 3, pg_sleep(0.5)&quot;</span>)</span><br><span class="line">res := pool.SendBatch(context.TODO(), b)</span><br><span class="line"><span class="keyword">defer</span> res.Close()</span><br><span class="line">v := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.Len(); i++ &#123;</span><br><span class="line">err := res.QueryRow().Scan(&amp;v[i], <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Result: %v\n&quot;</span>, v) <span class="comment">// Result: [1 2 3]</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pgx-と-database-sql-をあわせてつかう"><a href="#pgx-と-database-sql-をあわせてつかう" class="headerlink" title="pgx と database/sql をあわせてつかう"></a>pgx と database/sql をあわせてつかう</h2><p><a href="https://github.com/jmoiron/sqlx">sqlx</a> や <a href="https://github.com/volatiletech/sqlboiler">SQLBoiler</a> など、 database/sql に依存するライブラリを使用する場合、pgx のドライバ (<a href="https://pkg.go.dev/github.com/jackc/pgx/v4@v4.13.0/stdlib">https://pkg.go.dev/github.com/jackc/pgx/v4@v4.13.0/stdlib</a>) のみを利用することが可能です。</p><p>この連載で紹介された <a href="https://github.com/ent/ent">ent</a> でも使用可能です。<br><a href="https://entgo.io/docs/sql-integration/#use-pgx-with-postgresql">https://entgo.io/docs/sql-integration/#use-pgx-with-postgresql</a></p><p>使いたいのがsqlxであれば、pgxをサポートしている <a href="https://github.com/georgysavva/scany">scany</a> への乗り換えもありかと思います。</p><p>単純にドライバをすげ替えるだけであれば、インポートするドライバとドライバ名を変更するだけです。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">&quot;database/sql&quot;</span><br><span class="line"><span class="deletion">-_ &quot;github.com/lib/pq&quot;</span></span><br><span class="line"><span class="addition">+_ &quot;github.com/jackc/pgx/v4/stdlib&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var err error</span><br><span class="line">uri := &quot;postgres://postgres:password@postgres/postgres?sslmode=disable&quot;</span><br><span class="line"><span class="deletion">- db, err = sql.Open(&quot;postgres&quot;, uri)</span></span><br><span class="line"><span class="addition">+ db, err = sql.Open(&quot;pgx&quot;, uri)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>stdlib.RegisterConnConfig()</code> を使えば、Loggerなどを設定することも可能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uri := <span class="string">&quot;postgres://postgres:password@postgres/postgres?sslmode=disable&quot;</span></span><br><span class="line">cfg, _ := pgx.ParseConfig(uri)</span><br><span class="line">cfg.Logger = zerologadapter.NewLogger(log.With().Logger())</span><br><span class="line">connStr := stdlib.RegisterConnConfig(cfg)</span><br><span class="line">db, _ = sql.Open(<span class="string">&quot;pgx&quot;</span>, connStr)</span><br></pre></td></tr></table></figure><p>また <code>sql.Conn.Raw()</code> を使うと、普段は <code>sql.DB</code> でコネクションを扱いつつ、CopyFrom など pgx の機能が使いたいときは <code>pgx.Conn</code> を使う、といった使い方が可能になります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">conn, err := db.Conn(context.TODO())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error</span></span><br><span class="line">&#125;</span><br><span class="line">err := conn.Raw(<span class="function"><span class="keyword">func</span><span class="params">(driverConn <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c *pgx.Conn = driverConn.(*stdlib.Conn).Conn()</span><br><span class="line">c.CopyFrom(...)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>ここで紹介した以外にも、database/sql には無いたくさんの機能が sqlx では実装されています。<br><a href="https://github.com/jackc/pgx#features">https://github.com/jackc/pgx#features</a></p><p>lib/pq から pgx への移行にかかる問題については、golang-migrate の<a href="https://github.com/golang-migrate/migrate/issues/512">こちらのIssue</a>における議論がとても参考になります。<br>移行作業自体はとても簡単ですので、まずは試してみてはいかがでしょうか。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/PostgreSQL/">PostgreSQL</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/ORM/">ORM</category>
      
      
      <comments>https://future-architect.github.io/articles/20210916a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Adobe XDからFlutterに変換する</title>
      <link>https://future-architect.github.io/articles/20210915a/</link>
      <guid>https://future-architect.github.io/articles/20210915a/</guid>
      <pubDate>Tue, 14 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;モバイル開発をする場合、デザインはAdobe</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>モバイル開発をする場合、デザインはAdobe XDかFigmaか何かしらのワイヤフレームツールを使うと思います。本エントリーではそれらをもとにアプリケーションを作成したときのTipsを紹介します。</p><p>なお、デザインする人はステークホルダーの人に共有したりすると思うので有料版のXDの方が良いと思いますが、Flutter開発する人はXDファイルを持っている or 共有してもらえたら、スターター版で大丈夫です。XDの有料版とスターター版の違いは共有の機能の自由度だったり、PDFエクスポートの回数制限だったりします。</p><ul><li><a href="https://miya-system-works.com/blog/detail/adobe-xd-plan/">みやしもブログ: Adobe XDを使おう！無料・有料プランの違いを詳しく解説</a></li></ul><p>スターターパックをインストールしたら、Creative Cloudアプリ（タスクバーに常駐していると思います）のマーケットプレースから、XD to Flutterというプラグインを入れます。<a href="https://blog.adobe.com/jp/publish/2020/09/25/cc-web-xd-flutter-plugin-now-available.html">AdobeとGoogleが協力して開発している</a>プラグインで、これがあるのとないのでは開発効率が大きく変わります。なお、この常駐アプリ、結構CPUを持っていくっぽいので、プラグインを入れた後は終了させたほうが良いかも？プラグインのインストール以外はXDのバージョンアップでは使いましたが、使うのはそれぐらいかと。</p><img src="/images/20210915a/スクリーンショット_2021-09-08_17.06.46.png" alt="XD to Flutterプラグイン" width="1136" height="752" loading="lazy"><h1 id="基本はCopy-Selected"><a href="#基本はCopy-Selected" class="headerlink" title="基本はCopy Selected"></a>基本はCopy Selected</h1><p>さて、XD to Flutterにはまるごとエクスポートする機能もありますが、どうもレスポンシブのせいか、ちょっと見た目のデザインがちょっとXDと違うとか違いがあります。XD to Flutterでエクスポートすると、<a href="https://pub.dev/packages/adobe_xd">adobe_xd</a>パッケージのPinを使ったコードが生成されます。XDのレスポンシブ機能をFlutter上で再現する機能のようですが、XD上でそこまできちんとデザインを作り込まれていないとおそらく逆効果です。でも、実装する立場からすると、そこをXD上で頑張るよりは、早くXDファイルをもらえた方が嬉しいかなと思います。</p><p>あくまでもXDはお絵描きツールなので、内部のコンテンツの量や数が可変になったときのレイアウトの挙動とか、そのままフリーハンドで再現できるわけではありません。高機能なUI部品をそのまま再現できません。もしかしたら.NetのExpression Blendが世界を制覇する世界線であればそういう開発もできたかもしれませんが、基本は１要素を選択して、左下のCopy Selectedボタンを使って、コードをクリップボードに入れて、Android Studioに貼り付けていくのが良いでしょう。</p><img src="/images/20210915a/スクリーンショット_2021-09-08_17.00.35.png" alt="Copy Selectedボタン" width="812" height="1144" loading="lazy"><p>テキストとかもフォーマットつきで取り出せますので、それをぺたぺた貼り付けていけば良い感じに再現できます。こういう影付き角丸長方形とかも・・・</p><img src="/images/20210915a/スクリーンショット_2021-09-08_18.07.10.png" alt="う影付き角丸長方形" width="279" height="603" loading="lazy"><p>こんな感じのコードになります。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">    decoration: BoxDecoration(</span><br><span class="line">      borderRadius: BorderRadius.circular(<span class="number">10.0</span>),</span><br><span class="line">      color: <span class="keyword">const</span> Color(<span class="number">0xff9ffdfb</span>),</span><br><span class="line">      boxShadow: [</span><br><span class="line">        BoxShadow(</span><br><span class="line">          color: <span class="keyword">const</span> Color(<span class="number">0x29000000</span>),</span><br><span class="line">          offset: Offset(<span class="number">0</span>, <span class="number">3</span>),</span><br><span class="line">          blurRadius: <span class="number">6</span>,</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>要素を貼り付ける土台としては次のコンポーネントを駆使して組み合わせていく感じです。CSSで要素のレイアウトをしたことがあれば難しくはないと思います。もっといろいろあると思いますが↓姿形のないレイアウト用コンポーネントは、以下のやつぐらいを使えばだいたいやりたいレイアウトは問題なくできました。以下のリストはよく使う順です。</p><ul><li><code>Scaffold</code>: 基本の土台です</li><li><code>Column</code>: 基本の縦整列</li><li><code>Row</code>: 横整列。<code>Column</code>の中に入れる</li><li><code>SizedBox</code>: 固定サイズのスペーサーとして使う</li><li><code>Container</code>: こちらも固定サイズのスペーサーとして使えるが背景画像を設定したりするし、子要素も持てるし、HTMLのdiv的に使える。相対サイズを設定したい場合は<br><code>MediaQuery.of(context).size.width</code>に0.8を掛け算して設定とかもある。</li><li><code>Padding</code>: 中の要素の前後左右にスペースを設定。CSSのpaddingと一緒。SizedBoxを前後左右に並べるよりもリーズナブル。隙間調整に。</li><li><code>Expanded</code>: 中の要素を空きスペースを埋めるように広げる。CSSのflexboxみたいなもの。たまに、自動で空きスペース全部埋めるようにレイアウトされる要素を閉じ込めるのに使う（横いっぱいに勝手に広がる<code>RadioListTile</code>を横にいくつか並べたい場合とか）</li><li><code>Stack</code>: レイヤーにして要素を前後に重ねるときに利用。背景画像を一枚置くだけなら<code>Container</code>で済むが、そうでない場合に</li><li><code>SingleChildScrollView</code>: どうしても縦横比の小さい端末で下が欠けてしまう、ソフトキーボードが出た瞬間におかしくなる、みたいなときに。全体をこれでくるむと（<code>Scaffold</code>のbodyをこれにして、他の要素はこれの子供にする）、なんとかなる。</li></ul><p>基本的なレイアウトについてはこのブログの<a href="https://future-architect.github.io/articles/20210513b/">Flutterレイアウト入門</a>にもあります。</p><h1 id="画像の要素の書き出し"><a href="#画像の要素の書き出し" class="headerlink" title="画像の要素の書き出し"></a>画像の要素の書き出し</h1><p>Flutterはプラグインを入れればSVGが使えます。adobe_xdパッケージもベクター画像はSVGのパッケージを前提としたコードを生成したりもします。しかし、最新のSVGパッケージと、<code>Container</code>の背景にSVGを使うパッケージで依存のバージョンが合わず、背景にSVGが使えなかったりしたので問題なく本体機能だけで使えるPNGを作成しました。レンダラーの都合でSVGのままでは再現性が怪しい場合も画像にしておくと良いかもしれません。</p><p>書き出すときは、ファイルメニューの書き出しを選択し、フォーマットでSVGを選ぶと出力できます。PNGをここから書き出すのもできますが、どうもXDに配置されたサイズでの書き出しになるっぽくて、かなり荒い画像になってしまったのでSVGでエクスポートしています。</p><img src="/images/20210915a/スクリーンショット_2021-09-08_17.39.23.png" alt="ファイルメニューの書き出し" width="695" height="428" loading="lazy"><img src="/images/20210915a/スクリーンショット_2021-09-08_17.39.48.png" alt="SVGエクスポート" width="632" height="342" loading="lazy"><p>その後はOSSの<a href="https://inkscape.org/ja/">Inkscape</a>で、DPIを180とか大きめにしてPNGに書き出しています。ちょっと不安定だったり、ウェルカムウインドウが開いているとウインドウ操作ができなかったり、DPIを変更してフォーカスを変換してからエクスポート先、の方を押さないとサイズが反映されなかったり、ちょっと癖はありますが、根気よくがんばりましょう。</p><img src="/images/20210915a/スクリーンショット_2021-09-08_17.49.11.png" alt="PNGに書き出し" width="498" height="909" loading="lazy"><p>生成されたらassetフォルダにいれて、pubspec.yamlのassetsの項目に格納先のフォルダに入れてあげて再ビルドします。画像の追加はホットリロードでは対応してくれないので、一度アプリを停止させて再ビルドが必要です。</p><figure class="highlight yaml"><figcaption><span>pubspec.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">flutter:</span></span><br><span class="line">  <span class="attr">assets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">assets/images/</span></span><br></pre></td></tr></table></figure><p>なお、XDから書き出したSVGがうまくInkskape上でレンダリングできずに崩れてしまう場合は、XD上で拡大してスクリーンショットをとって回避する手もあります。ありました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ゲームのように固定レイアウトでも良い（空いたスペースはレターボックスを表示したり）ケースであれば、デザインツールから一括インポートというのもできるかもしれません。僕も以前、Adobe Flashで作ったゲームの画面レイアウトをJSFLでJSONファイルにエクスポートして、ゲームエンジン（ngCore）上にそっくり再現（カットインアニメーションも）するランタイムライブラリを実装したことがありました。ただし、Flashのフルの機能を使われると変換できないので、ルールに従ったデザインを作ってもらう必要があります。Excelを入力ツールとして使うときも同様ですね。</p><p>実際のGUIフレームワーク(Qt)に密接につながっているQt Designerでデザインしてデスクトップアプリケーションを実装したこともありました。これは再現性という点ではポイントは高いのですが、デザイナーが使い慣れたツールというわけではなく、どうしても操作するのは開発者になってしまうでしょう。</p><p>Flutterアプリで作るようなノンゲームのアプリではレスポンシブに作ることになります。自動変換まではいけませんが、デザイナーが慣れたAdobe製のツール上でデザインを作ってくれたら、それをクリップボードに入れてばしばし貼り付けるというワークフローになります。ちょっと面倒に見えるかもしれませんが、今までやってきたデザインの実装の各種手法の中ではフリクションが少なく、かなり快適です。できあがるコードもFlutterの機能をばっちり使えたコードになります。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Design/">Design</category>
      
      
      <category domain="https://future-architect.github.io/tags/Flutter/">Flutter</category>
      
      <category domain="https://future-architect.github.io/tags/AdobeXD/">AdobeXD</category>
      
      
      <comments>https://future-architect.github.io/articles/20210915a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LambdaをカスタムDockerランタイムで開発する方法</title>
      <link>https://future-architect.github.io/articles/20210914a/</link>
      <guid>https://future-architect.github.io/articles/20210914a/</guid>
      <pubDate>Mon, 13 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20210914a/lambdadocker.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;465&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;普段からAWS</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20210914a/lambdadocker.png" alt="" width="1000" height="465" loading="lazy"><p>TIGの伊藤真彦です。</p><p>普段からAWS Lambdaにはお世話になっているのですが、初めてカスタムランタイムを動かす仕事が舞い込んできました。</p><h1 id="AWS-Lambdaのカスタムランタイムとは"><a href="#AWS-Lambdaのカスタムランタイムとは" class="headerlink" title="AWS Lambdaのカスタムランタイムとは"></a>AWS Lambdaのカスタムランタイムとは</h1><p>AWS Lambdaは2021.09.13時点で次のランタイムがサポートされています。</p><ul><li>Node.js</li><li>Python</li><li>Ruby</li><li>Java</li><li>Go</li><li>.NET</li></ul><p>2018年からDockerコンテナでカスタムランタイムを構築することが可能になりました。</p><p>Dockerコンテナを準備すれば上記以外の言語、実行バイナリなど自由なアプリケーションをAWS Lambdaで動かすことが可能ということになります。</p><p>今回私が作成したカスタムランタイムは、GoでOracle DBのクライアントライブラリを操作可能なカスタムLambdaランタイムです。</p><h1 id="GoでOracle-DBに接続する"><a href="#GoでOracle-DBに接続する" class="headerlink" title="GoでOracle DBに接続する"></a>GoでOracle DBに接続する</h1><p>GoでOracle DBを利用する方法を検討した結果<a href="https://github.com/mattn/go-oci8">mattn/go-oci8</a>を利用することがメジャーな手法であることがわかりました。</p><p><a href="https://github.com/mattn/go-oci8">mattn/go-oci8</a>を利用する際は<code>go get github.com/mattn/go-oci8</code>コマンドを実行して必要な機能をインストールする必要がありますが、前提として<a href="https://www.oracle.com/database/technologies/instant-client/downloads.html">Oracle Instant Client</a>、C/C++コンパイラをインストールし、設定ファイルと環境変数を整備する必要があります。</p><p>上記前提があるため、AWS LambdaデフォルトのGoランタイムではGoのコードそのものは完璧に書いてあっても動作しません。</p><p>そこで、各種依存パッケージを準備済みのDockerコンテナを準備することにしました。</p><h1 id="AWS-Lambdaで動作するコンテナを作成する"><a href="#AWS-Lambdaで動作するコンテナを作成する" class="headerlink" title="AWS Lambdaで動作するコンテナを作成する"></a>AWS Lambdaで動作するコンテナを作成する</h1><p>理論上どんなコンテナでもAWS Lambdaの上で動かすことが可能です。</p><p>しかし、最終的な成果物はLambdaランタイムとして動くことが可能な仕様を満たしている必要があります。</p><p>アプリケーションがAWS Lambdaのsdkを利用し、HTTPリクエストに応答する仕様を満たすように作られているのと同じように、コンテナには規定の環境変数が存在することなど、コンテナとしての要求仕様が存在します。</p><p>これら前提を満たすDockerfileをフルスクラッチで書き起こし、アップデートに追従するのは現実的ではありません。ベースイメージに<a href="https://hub.docker.com/r/amazon/aws-lambda-provided">amazon/aws-lambda-provided</a>を利用すると安心して前提条件を満たすことができます。</p><p>このベースイメージに必要なライブラリ、今回はOracleクライアント一式と設定ファイルを用意します。</p><p><code>go get github.com/mattn/go-oci8</code>コマンドの実行、および<a href="https://github.com/mattn/go-oci8">mattn/go-oci8</a>を利用したコードをビルドし、ビルドされたコードを実行するためには、Oracleクライアントと設定ファイル一式がいずれのタイミングでも必要になるため、マルチステージビルドは行わず、Oracleクライアントの準備を整えた後にGoをインストールし、実行バイナリのビルドが終わったらGoを削除するという仕組みを整えました。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> amazon/aws-lambda-provided:al2</span><br><span class="line"></span><br><span class="line"><span class="comment"># set env vars</span></span><br><span class="line"><span class="keyword">ENV</span> NLS_LANG=Japanese_Japan.AL32UTF8</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$HOME/bin:/usr/lib/oracle/<span class="number">21.3</span>/client64/bin</span><br><span class="line"><span class="keyword">ENV</span> LD_LIBRARY_PATH=/usr/local/instantclient_21_3:$LD_LIBRARY_PATH</span><br><span class="line"><span class="keyword">ENV</span> PKG_CONFIG_PATH=/usr/local/instantclient_21_3</span><br><span class="line"><span class="keyword">ENV</span> GO111MODULE=on</span><br><span class="line"></span><br><span class="line"><span class="comment"># install Oracle libraries</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install wget tar gzip unzip pkgconfig gcc libaio</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget https://download.oracle.com/otn_software/linux/instantclient/213000/instantclient-basic-linux.x64-21.3.0.0.0.zip &amp;&amp; \</span></span><br><span class="line"><span class="bash">    wget https://download.oracle.com/otn_software/linux/instantclient/213000/instantclient-sqlplus-linux.x64-21.3.0.0.0.zip &amp;&amp; \</span></span><br><span class="line"><span class="bash">    wget https://download.oracle.com/otn_software/linux/instantclient/213000/instantclient-sdk-linux.x64-21.3.0.0.0.zip</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> unzip instantclient-basic-linux.x64-21.3.0.0.0.zip -d /usr/<span class="built_in">local</span> &amp;&amp; \</span></span><br><span class="line"><span class="bash">    unzip instantclient-sqlplus-linux.x64-21.3.0.0.0.zip -d /usr/<span class="built_in">local</span> &amp;&amp; \</span></span><br><span class="line"><span class="bash">    unzip instantclient-sdk-linux.x64-21.3.0.0.0.zip -d /usr/<span class="built_in">local</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm instantclient-basic-linux.x64-21.3.0.0.0.zip &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm instantclient-sqlplus-linux.x64-21.3.0.0.0.zip &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm instantclient-sdk-linux.x64-21.3.0.0.0.zip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install golang to build</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> マルチステージビルドを使うとOracleクライアントをビルダーと実行コンテナ両方に入れる必要があるためあえて同じコンテナにGoをインストールする</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget https://dl.google.com/go/go1.16.7.linux-amd64.tar.gz</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ls -l</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> tar -C /usr/<span class="built_in">local</span> -xzf go1.16.7.linux-amd64.tar.gz</span></span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:/usr/local/go/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># build go binary</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> &#123;作りたいGoアプリケーションのファイル一式&#125; /go/src/&#123;アプリケーション名&#125;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> oci8.pc /usr/<span class="built_in">local</span>/instantclient_21_3/oci8.pc</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /go/src/&#123;ビルドコマンドを実行したい場所&#125;</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go mod download</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pkg-config --cflags oci8</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go get github.com/mattn/go-oci8</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> GOOS=linux GOARCH=amd64 go build -ldflags=<span class="string">&quot;-s -w -buildid=&quot;</span> -trimpath -o /lambda ./cmd/lambda/lambda.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cleanup</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf /usr/<span class="built_in">local</span>/go &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -rf /go &amp;&amp; \</span></span><br><span class="line"><span class="bash">    yum -y remove wget tar gzip unzip pkgconfig</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [ <span class="string">&quot;/lambda&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>参考までに、<code>oci8.pc</code>の設定内容は下記の内容です。</p><figure class="highlight sh"><figcaption><span>oci8.pc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">prefix=/usr/<span class="built_in">local</span>/instantclient_21_3/</span><br><span class="line">libdir=<span class="variable">$&#123;prefix&#125;</span></span><br><span class="line">includedir=<span class="variable">$&#123;prefix&#125;</span>/sdk/include/</span><br><span class="line"></span><br><span class="line">Name: oci8</span><br><span class="line">Description: Oracle Instant Client</span><br><span class="line">Version: 21.3</span><br><span class="line">Libs: -L<span class="variable">$&#123;libdir&#125;</span> -lclntsh</span><br><span class="line">Libs.private:</span><br><span class="line">Cflags: -I<span class="variable">$&#123;includedir&#125;</span></span><br></pre></td></tr></table></figure><h1 id="作成したコンテナをAWS-Lambdaで利用する"><a href="#作成したコンテナをAWS-Lambdaで利用する" class="headerlink" title="作成したコンテナをAWS Lambdaで利用する"></a>作成したコンテナをAWS Lambdaで利用する</h1><h2 id="DockerをLambdaで動かすアーキテクチャ"><a href="#DockerをLambdaで動かすアーキテクチャ" class="headerlink" title="DockerをLambdaで動かすアーキテクチャ"></a>DockerをLambdaで動かすアーキテクチャ</h2><p>GoやPythonなど、提供されているランタイムでは、ソースコードや、ビルドしたバイナリををLambdaリソースにアップロードする形でデプロイを行いました。</p><p>Dockerカスタムランタイムの場合は、コンテナイメージ自体はECRにpushし、AWS Lambdaにはそのコンテナイメージのarnを設定する、という仕組みに変わります。</p><p>ECR + Lambdaという構成になる、という概要だけでも覚えておくといざ実装するときに助けになると思います。</p><h2 id="コンテナイメージをECRにPushする"><a href="#コンテナイメージをECRにPushする" class="headerlink" title="コンテナイメージをECRにPushする"></a>コンテナイメージをECRにPushする</h2><p>実際にコンテナイメージをpushし、AWS Lambdaで実行する方法を説明します。<br>まずはECRリポジトリを用意します。</p><p>CLIで構築する場合は下記のコマンドでリポジトリを作成します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ecr create-repository --repository-name myapp</span><br></pre></td></tr></table></figure><p>terraformで記載することも可能です。</p><figure class="highlight sh"><figcaption><span>ecr_repository.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_ecr_repository&quot;</span> <span class="string">&quot;myapp&quot;</span> &#123;</span><br><span class="line">  name                 = <span class="string">&quot;<span class="variable">$&#123;terraform.workspace&#125;</span>-myapp&quot;</span></span><br><span class="line">  image_tag_mutability = <span class="string">&quot;MUTABLE&quot;</span></span><br><span class="line"></span><br><span class="line">  image_scanning_configuration &#123;</span><br><span class="line">    scan_on_push = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>リポジトリが用意できたら、コンテナをビルドし、pushします。</p><figure class="highlight sh"><figcaption><span>deploy.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myapp:latest</span><br><span class="line">docker tag mayapp:latest <span class="variable">$&#123;AWS_ACCOUNT&#125;</span>.dkr.ecr.ap-northeast-1.amazonaws.com/myapp:latest</span><br><span class="line">aws ecr get-login-password --profile myprofile | docker login --username AWS --password-stdin <span class="variable">$&#123;AWS_ACCOUNT&#125;</span>.dkr.ecr.<span class="variable">$&#123;REGION&#125;</span>.amazonaws.com</span><br><span class="line">docker push <span class="variable">$&#123;AWS_ACCOUNT&#125;</span>.dkr.ecr.ap-northeast-1.amazonaws.com/myapp:latest</span><br></pre></td></tr></table></figure><p>続いてLambdaリソースを構築します。</p><figure class="highlight sh"><figcaption><span>deploy.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aws lambda create-function \</span><br><span class="line">     --function-name myapp  \</span><br><span class="line">     --package-type Image \</span><br><span class="line">     --code ImageUri=<span class="variable">$&#123;ACCOUNTID&#125;</span>.dkr.ecr.<span class="variable">$&#123;REGION&#125;</span>.amazonaws.com/myapp:latest \</span><br><span class="line">     --role <span class="variable">$&#123;ROLE_ARN&#125;</span></span><br></pre></td></tr></table></figure><p>terraformではこのように書くことができます。(vpcの設定など一部省略しています)<br><code>$&#123;data.aws_caller_identity.current.account_id&#125;</code>で自分のAWSアカウントIDを取得できるのがミソですね。</p><figure class="highlight sh"><figcaption><span>lambda_function.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_lambda_function&quot;</span> <span class="string">&quot;myapp&quot;</span> &#123;</span><br><span class="line">  package_type  = <span class="string">&quot;Image&quot;</span></span><br><span class="line">  image_uri     = <span class="string">&quot;<span class="variable">$&#123;data.aws_caller_identity.current.account_id&#125;</span>.dkr.ecr.ap-northeast-1.amazonaws.com/<span class="variable">$&#123;terraform.workspace&#125;</span>-myapp:latest&quot;</span></span><br><span class="line">  function_name = <span class="string">&quot;<span class="variable">$&#123;terraform.workspace&#125;</span>-myapp&quot;</span></span><br><span class="line">  role          = aws_iam_role.lambda_role.arn</span><br><span class="line">  memory_size   = 512</span><br><span class="line">  timeout       = 900</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>コンテナイメージを更新した際に気をつけるポイントですが、<code>latest</code>タグのコンテナイメージを更新しても、すぐにLambda関数の挙動には反映されません。一晩寝かしても古いイメージが参照されていました。</p><p>全く同じ<code>image-uri</code>のまま更新コマンドを実行することで即時反映できます。</p><figure class="highlight sh"><figcaption><span>update.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws lambda update-function-code --profile myprofile --function-name myapp --image-uri <span class="variable">$&#123;AWS_ACCOUNT&#125;</span>.dkr.ecr.<span class="variable">$&#123;REGION&#125;</span>.amazonaws.com/myapp:latest</span><br></pre></td></tr></table></figure><p>コンテナイメージのタグやダイジェストをコンテナイメージの内容を更新する度に厳密に管理する事も可能ですが、今のところ常に<code>latest</code>での運用に落ち着いています。</p><h2 id="コンテナイメージをローカル環境でデバッグする"><a href="#コンテナイメージをローカル環境でデバッグする" class="headerlink" title="コンテナイメージをローカル環境でデバッグする"></a>コンテナイメージをローカル環境でデバッグする</h2><p>AWS Lambdaで動く要件を満たしたコンテナが作成されているかをローカル環境で確認することは可能です。逆に作成したアプリケーションコンテナ単体では動作しません。</p><p><a href="https://aws.amazon.com/jp/blogs/news/new-for-aws-lambda-container-image-support/">Lambda Runtime Interface Emulator</a>との組み合わせでコンテナを起動することでローカル環境でのデバッグが可能になります。</p><p>RIEは下記のコマンドでインストールできます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.aws-lambda-rie &amp;&amp; curl -Lo ~/.aws-lambda-rie/aws-lambda-rie \</span><br><span class="line">https://github.com/aws/aws-lambda-runtime-interface-emulator/releases/latest/download/aws-lambda-rie \</span><br><span class="line">&amp;&amp; chmod +x ~/.aws-lambda-rie/aws-lambda-rie</span><br></pre></td></tr></table></figure><p>インストール完了後、下記のコマンドで、RIE経由でビルドしたコンテナを起動します。<br>実際に試してみた環境では(2021年9月時点)<code>Dockerfile</code>で<code>ENTORYPOINT</code>が明記されている場合も、コマンドで<code>ENTORYPOINT</code>に相当する部分を指定する必要がありました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v ~/.aws-lambda-rie:/aws-lambda --entrypoint /aws-lambda/aws-lambda-rie -p 9000:8080 myapp:latest /lambda</span><br></pre></td></tr></table></figure><p>このコンテナを起動した状態で、curlコマンドを実行してlocalhostで起動されたLambdaエンドポイントを叩く形でコンテナに組み込んだアプリケーションを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">&quot;http://localhost:9000/2015-03-31/functions/function/invocations&quot;</span> -d <span class="string">&#x27;&#123;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>curlコマンド実行時に想定通りにアプリケーションが動けばコンテナイメージそのものは問題なく出来上がっていることになります。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>AWS LambdaではカスタムDockerコンテナを起動することができる</li><li>aws-lambda-providedをベースイメージにするのがオススメ</li><li>ECR + Lambdaの組み合わせで構築、運用する</li><li>ローカル環境でデバッグすることも可能</li></ul><p>どうしてもカスタムランタイムでないと困る状況になる事はそう頻繁にある事ではないため、若干参考情報が少ないかなと感じました。</p><p>参考になれば幸いです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/Oracle/">Oracle</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Docker/">Docker</category>
      
      <category domain="https://future-architect.github.io/tags/Lambda/">Lambda</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B5%E3%83%BC%E3%83%90%E3%83%AC%E3%82%B9/">サーバレス</category>
      
      
      <comments>https://future-architect.github.io/articles/20210914a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【Google Chat API】Incoming Webhook を Go で触ってみる</title>
      <link>https://future-architect.github.io/articles/20210913a/</link>
      <guid>https://future-architect.github.io/articles/20210913a/</guid>
      <pubDate>Mon, 13 Sep 2021 00:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、<a href="https://note.com/future_event/n/n76e7e7d4beef">Engineer Camp</a>インターン中の山本です。</p><p>ブログへの投稿は２本目になります。１本目は<a href="/articles/20210902b/">GoLandについての記事</a>を投稿いたしました。</p><p>今回はGoogle Chat APIに関しての記事です。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>業務でGoogle Chat上で通知システムを作成する必要があったのですが、実装するにあたりいくつかのハードルがありました。</p><ul><li>公式の実装例にGoがないため、すぐに使えない</li><li>GSuiteアカウントがないと試せないからか、参考になる記事が少ない</li></ul><p>以上を踏まえて、この記事では以下の事柄について説明していきます。</p><ul><li>Webhookを使用しGoでメッセージを送信する方法</li><li>投稿を一つのスレッドにまとめる方法</li><li>カード型メッセージの送信方法</li></ul><img src="/images/20210913a/スクリーンショット_2021-09-07_17.18.14.png" alt="カード型メッセージ投稿例" width="476" height="598" loading="lazy"><h1 id="Google-Chat-API-とは"><a href="#Google-Chat-API-とは" class="headerlink" title="Google Chat API とは"></a>Google Chat API とは</h1><p>具体的な説明の前に、<a href="https://developers.google.com/chat">Google Chat API</a> について軽く説明いたします。</p><p>Google Chat API とは、Google Chat で Bot を通じて機能の実装、拡張を支援する API です。</p><p>Google Hangoutsとの関連は以下のようになっています。（<a href="https://ja.wikipedia.org/wiki/Google_%E3%83%8F%E3%83%B3%E3%82%B0%E3%82%A2%E3%82%A6%E3%83%88">Wikipediaより引用</a>）</p><blockquote><p>2020年4月、ビデオ会議機能を「Google Meet」、チャット機能を「Google Chat」としてそれぞれ分離。残されたテキストメッセージ機能については、2020年後半を目処にGoogle Chatに統合し、ハングアウトは廃止される予定である。</p></blockquote><p>ユースケースとしては、</p><ul><li>データのリソースなどから検索した情報を返す</li><li>ユーザが特定のタスクを実行するのを助ける</li><li>イベントの更新、変更、繰り返しなどの通知を送る</li></ul><p>などがあります。</p><p>今回はその中から、非同期メッセージの送信機能を持つIncoming Webhookを使用し、Goでメッセージを送信するアプリケーションの実装を行います。</p><h1 id="1-Google-ChatでWebhookの設定をする"><a href="#1-Google-ChatでWebhookの設定をする" class="headerlink" title="1. Google ChatでWebhookの設定をする"></a>1. Google ChatでWebhookの設定をする</h1><p>それでは始めていきます。</p><p>コードを書く前に、Google ChatにてWebhookの設定をする必要があります。</p><p>手順は以下のとおりです。</p><p>Google Chatを開いて、チャットルームを作成します。スレッド返信を使用する場合はチェックを入れます。<br><img src="/images/20210913a/screenshot_setup1.png" alt="チャットルーム作成" width="1200" height="672" loading="lazy" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px;"></p><p>左上をクリックして「Webhookを管理」を選びます。</p><img src="/images/20210913a/screenshot_setup2.png" alt="Webhook管理画面" width="400" height="648" loading="lazy" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px;"><p>Webhookの名前とアバターURLを入力し、保存を押します。</p><img src="/images/20210913a/screenshot_setup3.png" alt="Webhookの名前とアバターURL入力画面" width="1200" height="659" loading="lazy" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px;"><p>以上でWebhookの設定は終わりです。この時払い出されるURLは後で使用します。</p><img src="/images/20210913a/screenshot_setup4.png" alt="設定完了画面" width="1200" height="469" loading="lazy" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px;"><h1 id="2-Goでメッセージを送る"><a href="#2-Goでメッセージを送る" class="headerlink" title="2. Goでメッセージを送る"></a>2. Goでメッセージを送る</h1><p>Webhookの設定は完了したので、次にGoアプリケーションの実装について説明します。<br>以下はWebhookで簡単なメッセージを送信するGoのプログラムです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webhook = <span class="string">&quot;&lt;任意のWebhookURL&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">payload, err := json.Marshal(<span class="keyword">struct</span> &#123;</span><br><span class="line">Text <span class="keyword">string</span> <span class="string">`json:&quot;text&quot;`</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">Text: <span class="string">&quot;hello from a go script!&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp, err := http.Post(webhook, <span class="string">&quot;application/json; charset=UTF-8&quot;</span>, bytes.NewReader(payload))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"><span class="keyword">if</span> resp.StatusCode != http.StatusOK &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;HTTP: %v\n&quot;</span>, resp.StatusCode)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>プログラムを実行すると、Google Chatにメッセージが送信されます。</p><img src="/images/20210913a/screenshot_simple_message.png" alt="screenshot_simple_message" width="1066" height="224" loading="lazy"><h1 id="（付録１）投稿を一つのスレッドにまとめる"><a href="#（付録１）投稿を一つのスレッドにまとめる" class="headerlink" title="（付録１）投稿を一つのスレッドにまとめる"></a>（付録１）投稿を一つのスレッドにまとめる</h1><p>投稿に対して返信をしない場合など、スレッドをいちいち作成する必要がないケースについては、同一スレッドにメッセージを投稿した方が見た目がスッキリする場合もあります。</p><p>Webhook URLにスレッドに関するクエリパラメータを追加することで投稿するスレッドを一つに指定することができます。（<a href="https://developers.google.com/chat/how-tos/bots-develop#thread_key">参照</a>）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webhook = <span class="string">&quot;&lt;任意のWebhookURL&gt;&amp;threadKey=&lt;適当な文字列&gt;&quot;</span></span><br></pre></td></tr></table></figure><p>以下のように、同じスレッドにメッセージが投稿されるようになります。<br><img src="/images/20210913a/screenshot_thread.png" alt="screenshot_thread" width="1056" height="222" loading="lazy"></p><h1 id="（付録２）Card型メッセージ"><a href="#（付録２）Card型メッセージ" class="headerlink" title="（付録２）Card型メッセージ"></a>（付録２）Card型メッセージ</h1><p>シンプルなメッセージでは表現しきれない場合の手段としてカード型のメッセージが用意されています。<br>以下は<a href="https://developers.google.com/chat/reference/message-formats/cards">公式ドキュメント</a>で紹介されていた表現をほとんど網羅したカード型のメッセージを送信するプログラムです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> webhook = <span class="string">&quot;&lt;任意のWebhookURL&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cards <span class="keyword">struct</span> &#123;</span><br><span class="line">Cards []Card <span class="string">`json:&quot;cards,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Card <span class="keyword">struct</span> &#123;</span><br><span class="line">Header   *Header   <span class="string">`json:&quot;header,omitempty&quot;`</span></span><br><span class="line">Sections []Section <span class="string">`json:&quot;sections,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Header <span class="keyword">struct</span> &#123;</span><br><span class="line">Title      <span class="keyword">string</span> <span class="string">`json:&quot;title,omitempty&quot;`</span></span><br><span class="line">Subtitle   <span class="keyword">string</span> <span class="string">`json:&quot;subtitle,omitempty&quot;`</span></span><br><span class="line">ImageURL   <span class="keyword">string</span> <span class="string">`json:&quot;imageUrl,omitempty&quot;`</span></span><br><span class="line">ImageStyle <span class="keyword">string</span> <span class="string">`json:&quot;imageStyle,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Section <span class="keyword">struct</span> &#123;</span><br><span class="line">Header  <span class="keyword">string</span>   <span class="string">`json:&quot;header,omitempty&quot;`</span></span><br><span class="line">Widgets []Widget <span class="string">`json:&quot;widgets,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Widget <span class="keyword">struct</span> &#123;</span><br><span class="line">TextParagraph *TextParagraph <span class="string">`json:&quot;textParagraph,omitempty&quot;`</span></span><br><span class="line">KeyValue      *KeyValue      <span class="string">`json:&quot;keyValue,omitempty&quot;`</span></span><br><span class="line">Image         *Image         <span class="string">`json:&quot;image,omitempty&quot;`</span></span><br><span class="line">Buttons       []Button       <span class="string">`json:&quot;buttons,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TextParagraph <span class="keyword">struct</span> &#123;</span><br><span class="line">Text <span class="keyword">string</span> <span class="string">`json:&quot;text,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> KeyValue <span class="keyword">struct</span> &#123;</span><br><span class="line">TopLabel         <span class="keyword">string</span>   <span class="string">`json:&quot;topLabel,omitempty&quot;`</span></span><br><span class="line">Content          <span class="keyword">string</span>   <span class="string">`json:&quot;content,omitempty&quot;`</span></span><br><span class="line">Icon             <span class="keyword">string</span>   <span class="string">`json:&quot;icon,omitempty&quot;`</span></span><br><span class="line">ContentMultiLine <span class="keyword">string</span>   <span class="string">`json:&quot;contentMultiline,omitempty&quot;`</span></span><br><span class="line">BottomLabel      <span class="keyword">string</span>   <span class="string">`json:&quot;bottomLabel,omitempty&quot;`</span></span><br><span class="line">OnClick          *OnClick <span class="string">`json:&quot;onClick,omitempty&quot;`</span></span><br><span class="line">Button           *Button  <span class="string">`json:&quot;button,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Image <span class="keyword">struct</span> &#123;</span><br><span class="line">ImageURL <span class="keyword">string</span>   <span class="string">`json:&quot;imageUrl,omitempty&quot;`</span></span><br><span class="line">OnClick  *OnClick <span class="string">`json:&quot;onClick,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Button <span class="keyword">struct</span> &#123;</span><br><span class="line">TextButton  *TextButton  <span class="string">`json:&quot;textButton,omitempty&quot;`</span></span><br><span class="line">ImageButton *ImageButton <span class="string">`json:&quot;imageButton,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TextButton <span class="keyword">struct</span> &#123;</span><br><span class="line">Text    <span class="keyword">string</span>   <span class="string">`json:&quot;text,omitempty&quot;`</span></span><br><span class="line">OnClick *OnClick <span class="string">`json:&quot;onClick,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ImageButton <span class="keyword">struct</span> &#123;</span><br><span class="line">IconURL <span class="keyword">string</span>   <span class="string">`json:&quot;iconUrl,omitempty&quot;`</span></span><br><span class="line">Icon    <span class="keyword">string</span>   <span class="string">`json:&quot;icon,omitempty&quot;`</span></span><br><span class="line">OnClick *OnClick <span class="string">`json:&quot;onClick,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OnClick <span class="keyword">struct</span> &#123;</span><br><span class="line">OpenLink *OpenLink <span class="string">`json:&quot;openLink,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OpenLink <span class="keyword">struct</span> &#123;</span><br><span class="line">URL <span class="keyword">string</span> <span class="string">`json:&quot;url,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">msg := Cards&#123;[]Card&#123;&#123;</span><br><span class="line">Header: &amp;Header&#123;</span><br><span class="line">Title:      <span class="string">&quot;Pizza Bot Customer Support&quot;</span>,</span><br><span class="line">Subtitle:   <span class="string">&quot;pizzabot@example.com&quot;</span>,</span><br><span class="line">ImageURL:   <span class="string">&quot;https://goo.gl/aeDtrS&quot;</span>,</span><br><span class="line">ImageStyle: <span class="string">&quot;IMAGE&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">Sections: []Section&#123;</span><br><span class="line">&#123;</span><br><span class="line">Widgets: []Widget&#123;</span><br><span class="line">&#123;</span><br><span class="line">TextParagraph: &amp;TextParagraph&#123;</span><br><span class="line">Text: <span class="string">&quot;&lt;b&gt;Roses&lt;/b&gt; are &lt;font color=\&quot;#ff0000\&quot;&gt;red&lt;/font&gt;,&lt;br&gt;&quot;</span> +</span><br><span class="line"><span class="string">&quot;&lt;i&gt;Violets&lt;/i&gt; are &lt;font color=\&quot;#0000ff\&quot;&gt;blue&lt;/font&gt;&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">KeyValue: &amp;KeyValue&#123;</span><br><span class="line">TopLabel:         <span class="string">&quot;Order No.&quot;</span>,</span><br><span class="line">Content:          <span class="string">&quot;12345&quot;</span>,</span><br><span class="line">Icon:             <span class="string">&quot;TRAIN&quot;</span>,</span><br><span class="line">ContentMultiLine: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">BottomLabel:      <span class="string">&quot;Delayed&quot;</span>,</span><br><span class="line">OnClick:          &amp;OnClick&#123;OpenLink: &amp;OpenLink&#123;URL: <span class="string">&quot;https://example.com&quot;</span>&#125;&#125;,</span><br><span class="line">Button: &amp;Button&#123;</span><br><span class="line">TextButton: &amp;TextButton&#123;</span><br><span class="line">Text:    <span class="string">&quot;VISIT WEBSITE&quot;</span>,</span><br><span class="line">OnClick: &amp;OnClick&#123;OpenLink: &amp;OpenLink&#123;URL: <span class="string">&quot;https://example.com&quot;</span>&#125;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">Image: &amp;Image&#123;</span><br><span class="line">ImageURL: <span class="string">&quot;https://picsum.photos/400/200&quot;</span>,</span><br><span class="line">OnClick:  &amp;OnClick&#123;OpenLink: &amp;OpenLink&#123;URL: <span class="string">&quot;https://example.com&quot;</span>&#125;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">Widgets: []Widget&#123;</span><br><span class="line">&#123;</span><br><span class="line">Buttons: []Button&#123;</span><br><span class="line">&#123;</span><br><span class="line">ImageButton: &amp;ImageButton&#123;</span><br><span class="line">IconURL: <span class="string">&quot;https://abs.twimg.com/responsive-web/client-web/icon-ios.b1fc7275.png&quot;</span>,</span><br><span class="line">OnClick: &amp;OnClick&#123;OpenLink: &amp;OpenLink&#123;URL: <span class="string">&quot;https://example.com&quot;</span>&#125;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">ImageButton: &amp;ImageButton&#123;</span><br><span class="line">Icon:    <span class="string">&quot;EMAIL&quot;</span>,</span><br><span class="line">OnClick: &amp;OnClick&#123;OpenLink: &amp;OpenLink&#123;URL: <span class="string">&quot;https://example.com&quot;</span>&#125;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">TextButton: &amp;TextButton&#123;</span><br><span class="line">Text:    <span class="string">&quot;VISIT WEBSITE&quot;</span>,</span><br><span class="line">OnClick: &amp;OnClick&#123;OpenLink: &amp;OpenLink&#123;URL: <span class="string">&quot;https://example.com&quot;</span>&#125;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下はシンプルメッセージと同様</span></span><br><span class="line">payload, err := json.Marshal(msg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">resp, err := http.Post(webhook, <span class="string">&quot;application/json; charset=UTF-8&quot;</span>, bytes.NewReader(payload))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"><span class="keyword">if</span> resp.StatusCode != http.StatusOK &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;HTTP: %v\n&quot;</span>, resp.StatusCode)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>長々とコードが書かれていますが、シンプルなメッセージで紹介したプログラムと行っていることは変わらず、json.MarshalしたときにGoogle Chatが求めている形になるようにGoの構造体に値を詰めて渡しています。</p><p>それぞれの要素の関係をわかりやすく図にすると以下のようになります。（厳密には異なります）</p><p>Cardの中には一つ以上のSectionが、Sectionの中には一つ以上のWidgetが必要になります。Widgetの中にはTextParagraphやKeyValue、Buttonの配列などの中から一つの要素が入ります。<br><img src="/images/20210913a/screenshot_card_message.png" alt="screenshot_card_message" width="1200" height="654" loading="lazy"></p><p>出力結果がこちらです。<br><img src="/images/20210913a/screenshot_card_message_2.png" alt="screenshot_card_message" width="425" height="455" loading="lazy" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px;"></p><h1 id="実際に使ってみた感想"><a href="#実際に使ってみた感想" class="headerlink" title="実際に使ってみた感想"></a>実際に使ってみた感想</h1><p>今回はIncoming Webhookを使用して一方的な通知メッセージを送信する、といった用途に使用しました。</p><p>慣れれば、Webhookの設定 → コード書いてメッセージを投げるまでがスピーディにできるため、簡単な機能を載せたボットを使いたい場合などにはお勧めできると思います。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://developers.google.com/chat">https://developers.google.com/chat</a></li><li><a href="https://mikan.github.io/2018/03/15/writing-hangouts-chat-incoming-webhook-with-go/">https://mikan.github.io/2018/03/15/writing-hangouts-chat-incoming-webhook-with-go/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/BOT/">BOT</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/GoogleChat/">GoogleChat</category>
      
      <category domain="https://future-architect.github.io/tags/GSuite/">GSuite</category>
      
      
      <comments>https://future-architect.github.io/articles/20210913a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Future Tech Night #15 ~GCPのサーバーレスサービスを利用したWebアプリの開発~</title>
      <link>https://future-architect.github.io/articles/20210910a/</link>
      <guid>https://future-architect.github.io/articles/20210910a/</guid>
      <pubDate>Thu, 09 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは。TIGの&lt;a href=&quot;https://twitter.com/kaedemalu&quot;&gt;伊藤太斉&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future.connpass.com/event/220822/&quot;&gt;Future Tech</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは。TIGの<a href="https://twitter.com/kaedemalu">伊藤太斉</a>です。</p><p><a href="https://future.connpass.com/event/220822/">Future Tech Night #15</a>に登壇報告と、その時の解説になります。</p><h2 id="登壇資料"><a href="#登壇資料" class="headerlink" title="登壇資料"></a>登壇資料</h2><p>今回の登壇資料はこちらになります。</p><script async class="speakerdeck-embed" data-id="79065ba6f3824c0296baca7eac3ad1aa" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><h2 id="技術選定"><a href="#技術選定" class="headerlink" title="技術選定"></a>技術選定</h2><p>今回Webアプリの開発にあたり、アプリを載せるためのGCPのコンピューティングサービスの比較検討を行いました。GCPのコーンピューティングサービスにはいくつか種類があり、</p><ul><li>Compute Engine</li><li>Container Optimized OS (in Compute Engine)</li><li>Kubernetes Engine</li><li>Cloud Run</li><li>App Engine</li><li>Cloud Functions</li></ul><p>の5種類があります。今回は5つを1つに絞るにあたり、以下の制約と要件に合わせて絞っていきました。</p><ul><li>コンテナですでに開発されている<ul><li>別途GKEで稼働しているアプリの一部の切り出しのため、コンテナ化がすでにされている</li></ul></li><li>大量のリクエストを捌く必要がない<ul><li>インフラとしてスケールする必要はあるが、固定費として多くかけたくない</li></ul></li><li>インフラの管理を極力減らしたい</li></ul><p>上記の条件で絞ったものの、App EngineとCloud Runが残りました。この2つをさらに絞るために、リッスンポートが任意にできるかどうかという制約に設けたところ、Cloud Runに決定しました（App Engineは8080ポートでしか受け付けることはできませんが、Cloud Runは任意のポートでリッスンさせることができます）。</p><p>これで、無事使うサービスがCloud Runに決定しましたので、インフラの概形が出来上がりました。<br>次からはいよいよ内部の設定などを行っていきます。</p><img src="/images/20210910a/Untitled_Diagram.png" alt="Untitled_Diagram.png" width="1011" height="541" loading="lazy"><h2 id="Serverless-NEGの利用"><a href="#Serverless-NEGの利用" class="headerlink" title="Serverless NEGの利用"></a>Serverless NEGの利用</h2><p>Cloud Runは独自でエンドポイントが生成され、それをCNAMEとしてドメインと紐づけることが可能ですが、Cloud Armorを使ったIPやパスのアクセス制御を行うにはCloud Load Balancingが必要不可欠です。とはいえ、Cloud Runに直接さし込むことはできないのでこんな時は<a href="https://cloud.google.com/load-balancing/docs/negs/serverless-neg-concepts?hl=ja">Serverless NEG（Network Endpoint Group）</a>を利用しましょう。<br>利用する、とはいっても難しい設定することはなく、</p><ul><li>利用するCloud Runを指定したServerless NEGを作成する</li><li>LBのバックエンドの設定に上記で作成したServerless NEGを指定する</li></ul><p>の2ステップで利用できます。私も作成時は難しいのではないかと構えていましたが、すんなり作成できていい意味でびっくりしました。</p><h2 id="サーバーレスVPCコネクタ"><a href="#サーバーレスVPCコネクタ" class="headerlink" title="サーバーレスVPCコネクタ"></a>サーバーレスVPCコネクタ</h2><p>今回、Cloud RunはVPC接続されたCloud SQLに繋ぎに行く必要があるため、Cloud Run自身も漏れず、VPCに接続しないといけません。このようなVPC内部にあるサービスに対して、サーバーレスサービスが接続したい場合には、<a href="https://cloud.google.com/vpc/docs/serverless-vpc-access?hl=ja">サーバーレスVPCコネクタ</a>を利用します。</p><p>サーバーレスVPCコネクタを作成する時は</p><ul><li><code>/28</code>のサブネットを準備する</li><li>コネクタで稼働するインスタンススペックを決定する</li><li>サーバーレスVPCコネクタを作成する</li></ul><p>のステップで作成できます。こちらも特段はまったポイントはないですが、<code>/28</code>の範囲をもつCIDRを利用する必要があるので、準備が必要です（多すぎても少なすぎても使用不可になります）。</p><p>さて、ここまでで、以下の構成が出来上がりました。これで完成に見えましたが、ハマりどころもあったので次で説明します。</p><img src="/images/20210910a/projects_(1).png" alt="projects_(1).png" width="1200" height="605" loading="lazy"><h2 id="ハマりどころ"><a href="#ハマりどころ" class="headerlink" title="ハマりどころ"></a>ハマりどころ</h2><h3 id="サービスアカウントの権限"><a href="#サービスアカウントの権限" class="headerlink" title="サービスアカウントの権限"></a>サービスアカウントの権限</h3><p>Cloud Runは作成した時に「Cloud Runサービスエージェント」のロールが付与されたサービスアカウントが作成されます。形は<code>service-PROJECT_ID@serverless-robot-prod.iam.gserviceaccount.com</code>となります。このサービスアカウントはIAMのページからも「Google 提供のロール付与を含みます」にチェックを入れないと見えないものなので、とても見落としやすいサービスアカウントです。</p><p>このサービスアカウントに対して、サーバーレスVPCコネクタを作成したプロジェクトで「サーバーレスVPCアクセスユーザー」を付与してあげることが必要です。</p><h3 id="Cloud-Runのエラー"><a href="#Cloud-Runのエラー" class="headerlink" title="Cloud Runのエラー"></a>Cloud Runのエラー</h3><p>Cloud Runではサービスがうまくデプロイ完了しない場合、</p><blockquote><p>Cloud Run error: Container failed to start. Failed to start and then listen on the port defined by the PORT environment variable. Logs for this revision might contain more information.</p></blockquote><p>というエラーが吐き出されます。端的には「Cloud Runで利用するコンテナがPORTで指定したものでリッスンできない」がエラーですが、これを愚直に考えてしまったため、とても時間を削ってしまいました。ただ、このエラーは<strong>結果的に</strong>ポートをリッスンできなかっただけで、本来のエラーはもっと手前で起こっていることが多いです。</p><p>このエラーとともにCloud Loggingのエラー詳細も同時にリンクを得られるため、それを確認することで、本当に起こっている問題を知ることができるので、デプロイ失敗した時にはCloud Loggingを確認する必要があります。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>今回はGCPのサーバーレスサービスを活用したWebアプリの開発例をお見せしました。</p><p>コンテナで開発する例が非常に増えてきており、そのコンテナを載せるサービスも増えてきており、技術選定がとても大事になっています。今回は特にコストを最小限に抑えるなどの理由でCloud Runを選択しましたが、エンジニアとしては新しいサービスを使うのはやはり楽しいですね。要件も満たしつつ、最大限楽しくなるようなサービス開発をこれからも続けたいと思いました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/TechNight/">TechNight</category>
      
      
      <comments>https://future-architect.github.io/articles/20210910a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Spring Bootアプリケーションのネイティブイメージが簡単に作れるSpring Nativeの紹介</title>
      <link>https://future-architect.github.io/articles/20210909a/</link>
      <guid>https://future-architect.github.io/articles/20210909a/</guid>
      <pubDate>Wed, 08 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、2021年新卒入社の本田です。私はJavaもSpring</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、2021年新卒入社の本田です。私はJavaもSpring Bootもほとんど何も知らないのですが、業務でSpring Bootを使いそうなので、「Spring勉強しなきゃ😇」という気持ちがあります。</p><p>Spring Bootアプリケーションのネイティブイメージが簡単に作れる<a href="https://docs.spring.io/spring-native/docs/current/reference/htmlsingle/">Spring Native</a>について調べてみたので、それを紹介します。</p><h2 id="Spring-Nativeとは"><a href="#Spring-Nativeとは" class="headerlink" title="Spring Nativeとは?"></a>Spring Nativeとは?</h2><p>Spring NativeとはSpring Bootアプリケーションをほとんど変更することなく、ネイティブイメージを生成することを目指したプロジェクトです。ネイティブイメージの実行はJVM(Java仮想マシン)による実行と比べて、起動時間が早い、ピークパフォーマンスに達するのが早い、メモリの使用量が小さい等の利点を持っています。</p><p>Spring Nativeでは、Spring Bootアプリケーションのネイティブイメージを生成するためにGraalVMを用いています。</p><h2 id="ネイティブイメージとは"><a href="#ネイティブイメージとは" class="headerlink" title="ネイティブイメージとは?"></a>ネイティブイメージとは?</h2><p>ネイティブイメージとはJavaをAOTコンパイルしたスタンドアロンな実行可能ファイルのことです(多分GraalVM用語？)。といっても意味が分からないかもしれないので、背景を説明します。</p><p>まず、CPUは機械語と呼ばれるCPUが理解できる命令しか実行できません。したがって、プログラムを実行するためには最終的に機械語に変換しなければなりません。この機械語に変換するタイミングには事前に変換、実行時に変換の2種類があります。事前にコンパイルし、機械語を生成する手法はAOT(ahead of time)コンパイル方式と呼ばれます。C、C++、 RustなどでコンパイルするといえばAOTコンパイルをするということを意味します。AOTコンパイルでは、あるCPUに向けて事前にコンパイルするため、その成果物はターゲットプラットフォームでしか動きません。</p><p>一方、Javaは事前にコードを機械語にコンパイルするのではなく、バイトコードと呼ばれるJVMが理解できるアセンブリコードに変換します。その後、JVM上でバイトコードを実行時に機械語に変換するインタプリタ方式で処理を行います。JVMが下位のプラットフォームの差異を吸収するため、多くのプラットフォームで単一コードを動かすことができます。</p><p>また、代表的なJVMはJIT(just in time)コンパイル機能を持っていて、よく実行されるコードや何度も繰り返すループなどは実行中に機械語にコンパイルされます。AOTコンパイルと比べると、実行時情報を利用することができるため、積極的な最適化を行えることがあります。ただし、JITコンパイラが実行時情報を収集するのに時間がかかるので、繰り返し実行しないとピークパフォーマンスに達しないという性質を持っています。</p><p>また、コードを実行するためにはJVMを起動し、クラスをロードする必要があるため、コードを実行するまでに時間がかかります。そのため、AWS Lambdaのようなイベントをトリガーとして、一回だけコードを実行するなどといった状況や、頻繁に再起動を行うマイクロサービスのようなアプリケーションと相性が悪いです。<br>このようなJVMの起動時間の長さを解消するのがネイティブイメージです。ネイティブイメージではクラスローディングなどの初期化処理が必要ないため、高速に起動できます。</p><h3 id="AOTコンパイル方式-上-とインタプリタ-JITコンパイル方式-下-の比較"><a href="#AOTコンパイル方式-上-とインタプリタ-JITコンパイル方式-下-の比較" class="headerlink" title="AOTコンパイル方式(上)とインタプリタ+JITコンパイル方式(下)の比較"></a>AOTコンパイル方式(上)とインタプリタ+JITコンパイル方式(下)の比較</h3><img src="/images/20210909a/コンパイルとインタプリタ.png" alt="コンパイルとインタプリタ.png" width="1200" height="354" loading="lazy"><h2 id="GraalVMとは"><a href="#GraalVMとは" class="headerlink" title="GraalVMとは?"></a>GraalVMとは?</h2><p><a href="https://www.graalvm.org/">GraalVM</a>はOracle社が開発する多言語を実行することができる仮想マシンです。</p><p>現在主流となっているJVMはHotSpot VMという仮想マシンなのですが、GraalVMはHotSpot VMを拡張したものとなっています。HotSpot VMではC1、C2というJITコンパイラが使われています。C2はC++で記述されているのですが、長年の変更でコードがあまりに複雑になり、機能拡張が困難になっています。GraalVMはC2コンパイラをJava製のGraalVM JITコンパイラに置き換えていて、これにより機能の拡張が容易になりました。さらに、GraalVMはTruffleというGraalVM JITコンパイラの利用を前提とした言語実装用のライブラリを持っています。したがってTruffleを使ってあるプログラミング言語を実装すれば、その言語はGraalVMで走らせることができます。</p><p>さらに、GraalVMを使うとJavaからPythonを使う、RubyからJavaScriptを使う、なんてこともできるみたいです。夢が広がります..😳</p><h3 id="GraalVMのアーキテクチャ"><a href="#GraalVMのアーキテクチャ" class="headerlink" title="GraalVMのアーキテクチャ"></a>GraalVMのアーキテクチャ</h3><img src="/images/20210909a/graalVMのアーキテクチャ.png" alt="graalVMのアーキテクチャ.png" width="682" height="604" loading="lazy"><p>Spring Nativeの話だったのに一体何の話をしているんだ。。と思われたかもしれませんが、GraalVMは多言語を実行できる仮想マシンという側面の他に、ネイティブイメージ生成機能をもっています。Spring Nativeで用いられているのはGraalVMのネイティブイメージ生成機能です。</p><h3 id="GraalVMの制約"><a href="#GraalVMの制約" class="headerlink" title="GraalVMの制約"></a>GraalVMの制約</h3><p>GraalVMはJavaのコードをネイティブイメージに変換する機能を持っていますが、リフレクションを始めとする動的な機能を変換するためには、JSONファイルを使って設定を記述しなければなりません。Spring BootはJavaの動的機能(リフレクション、動的プロキシ等)を多用しているため、ネイティブイメージに変換するためには大量のJSONファイルを記述する必要があります。</p><h2 id="Spring-Native"><a href="#Spring-Native" class="headerlink" title="Spring Native"></a>Spring Native</h2><p>Spring NativeとはSpring Bootアプリケーションをほとんど変更することなく、ネイティブイメージを生成できることを目指しているプロジェクトです。</p><p>Spring Nativeは動的機能を使うためのヒント文をアノテーションとして提供しています。ヒント文を記述することで、ビルド時にGraalVMの設定用JSONファイルの生成やコードの書き換えを自動で行ってくれます。</p><p>またライブラリ開発者があらかじめヒント文を書いてくれているので、サポートされているライブラリを使う場合はユーザーは基本的にはヒント文を記述する必要がありません。</p><h2 id="Spring-Nativeで簡単なアプリケーションのネイティブイメージを作ってみる。"><a href="#Spring-Nativeで簡単なアプリケーションのネイティブイメージを作ってみる。" class="headerlink" title="Spring Nativeで簡単なアプリケーションのネイティブイメージを作ってみる。"></a>Spring Nativeで簡単なアプリケーションのネイティブイメージを作ってみる。</h2><h3 id="ひな型作成"><a href="#ひな型作成" class="headerlink" title="ひな型作成"></a>ひな型作成</h3><p>Spring InitializrでSpring WebとSpring Nativeを依存関係に追加してプロジェクトのひな型を生成します。</p><img src="/images/20210909a/spring_initializr.png" alt="spring_initializr.png" width="1200" height="675" loading="lazy" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;"><p>非常にシンプルなアプリケーションを記述します。</p><h3 id="コード"><a href="#コード" class="headerlink" title="コード"></a>コード</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="コンテナ化"><a href="#コンテナ化" class="headerlink" title="コンテナ化"></a>コンテナ化</h3><p>ネイティブイメージを作るために、<a href="https://buildpacks.io/">Cloud Native Buildpacks</a>というソースコードからdocker containerを作成できるツールがあるので、これを使います。</p><p>Spring Initializrを使ってSpring Nativeを依存関係に追加してプロジェクトを生成した場合、Mavenなら、<code>mvn spring-boot:build-image</code>というコマンドを使ってネイティブイメージのコンテナを生成することができます。この機能を使う場合、コンテナ上でビルドが行われるため、GraalVMを端末にインストールしている必要がありません。単にネイティブイメージを生成する場合はGraalVM native build toolを使うみたいです。私はGraalVMをダウンロードしていないので、pom.xmlからnative buildツール関係の依存を削除した後、このコマンドを走らせました。私の環境(Windows 10、Core i5 10210U、 メモリ16GB、Dockerに割り当てたメモリ8GB)だと7分12秒かかりました。</p><img src="/images/20210909a/image.png" alt="image.png" width="1200" height="552" loading="lazy"><h3 id="コンテナを走らせる。"><a href="#コンテナを走らせる。" class="headerlink" title="コンテナを走らせる。"></a>コンテナを走らせる。</h3><img src="/images/20210909a/image_2.png" alt="image.png" width="1200" height="765" loading="lazy"><p>0.076秒で起動しました。</p><img src="/images/20210909a/image_3.png" alt="image.png" width="1200" height="642" loading="lazy" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;"><p>動いているようです。</p><h3 id="ネイティブイメージコンテナと非ネイティブコンテナの比較"><a href="#ネイティブイメージコンテナと非ネイティブコンテナの比較" class="headerlink" title="ネイティブイメージコンテナと非ネイティブコンテナの比較"></a>ネイティブイメージコンテナと非ネイティブコンテナの比較</h3><p>ネイティブイメージと非ネイティブイメージの各種メトリクスを比較してみます。ネイティブイメージ、非ネイティブイメージともにCloud Native Buildpacksを使ってコンテナ化しています。</p><div class="scroll"><table><thead><tr><th align="center"></th><th align="center">ネイティブ</th><th align="center">非ネイティブ</th></tr></thead><tbody><tr><td align="center">ビルド時間</td><td align="center">7分12秒</td><td align="center">1分33秒</td></tr><tr><td align="center">アプリケーション起動時間</td><td align="center">0.076秒</td><td align="center">1.911秒</td></tr><tr><td align="center">実行時メモリ使用量</td><td align="center">45MiB</td><td align="center">165MiB</td></tr><tr><td align="center">イメージサイズ</td><td align="center">95.5MB</td><td align="center">261MB</td></tr></tbody></table></div><p>ネイティブイメージはビルドが圧倒的に長いですが、アプリケーション起動時間、実行時メモリ使用量、イメージサイズは明確に非ネイティブイメージより優れています。</p><p>GraalVMにはCommunity EditionとEnterprise Editonがあり、性能はEnterprise Editionの方が上ですが、このテストはCommunity Editionで行いました。</p><h4 id="パフォーマンス"><a href="#パフォーマンス" class="headerlink" title="パフォーマンス"></a>パフォーマンス</h4><p><a href="https://gatling.io/">Gatling</a>というツールを使ってパフォーマンスを計測してみましたが、元々のレスポンス時間が短すぎて差は分かりませんでした。実用的なアプリケーションを使って比較してみると、面白いかもしれません。</p><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>ネイティブイメージは起動時間の短さが魅力的ですが、実務的にはビルド時間の長さがネックになるのかなと思いました。今回は非常にシンプルなアプリにもかかわらず7分かかっているので、プロダクションレベルのアプリのビルドにどれくらい時間がかるのかは要検証だと思います。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol><li>Spring Native Documentation, <a href="https://docs.spring.io/spring-native/docs/current/reference/htmlsingle/">https://docs.spring.io/spring-native/docs/current/reference/htmlsingle/</a></li><li>GraalVM <a href="https://www.graalvm.org/">https://www.graalvm.org/</a></li><li>Toshiaki Maki, JSUG勉強会 2021年その1: Spring Nativeの紹介 #jsug, <a href="https://t.co/iRR5vaK7CX?amp=1">https://t.co/iRR5vaK7CX?amp=1</a></li><li>きしだなおき、吉田真也、山田貴裕、蓮沼賢志、阪田浩一、前多賢太郎, みんなのJava, 技術評論社, 2020　</li></ol>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Java/">Java</category>
      
      <category domain="https://future-architect.github.io/tags/SpringBoot/">SpringBoot</category>
      
      <category domain="https://future-architect.github.io/tags/GraalVM/">GraalVM</category>
      
      
      <comments>https://future-architect.github.io/articles/20210909a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RedmineとGitLabの連携プラグインを開発しました！</title>
      <link>https://future-architect.github.io/articles/20210908a/</link>
      <guid>https://future-architect.github.io/articles/20210908a/</guid>
      <pubDate>Tue, 07 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>​<br>こんにちは、TIGコアテクノロジーユニットの高橋・小松です。</p><p>RedmineとGitLabリポジトリを連携する<a href="https://github.com/future-architect/redmine_gitlab_adapter">Redmine GitLab Adapter Plugin</a>を開発しましたので紹介させていただきます。</p><p>もともとRedmineにはGitリポジトリを登録する機能があります。この機能でRedmineのチケットに修正内容を紐づけて管理したり、特定のコメントを付けることでRedmineチケットのステータスを変更する、というようなことが可能です。</p><ul><li><a href="https://redmine.jp/tech_note/subversion/">バージョン管理システムとの連携 — Redmine.JP</a></li></ul><p>便利な機能ではあるのですが構成上の課題やGitLabのバージョンアップに伴う問題点が出てきたため、GitLab APIを用いた形でGitLabリポジトリ連携用のアダプタを作りました。</p><h2 id="構成上の課題"><a href="#構成上の課題" class="headerlink" title="構成上の課題"></a>構成上の課題</h2><p>Gitリポジトリ登録機能ですが、Redmineサーバ上で直接Gitリポジトリを読み取ることができないといけません。大きく以下の2つの方式が採られることが多いようです。</p><p>①bareリポジトリをRedmineサーバ上にコピーし、定期的にリポジトリの更新を反映させる</p><img src="/images/20210908a/1.png" alt="1.png" width="507" height="320" loading="lazy"><p>②リポジトリサーバをNFSマウントしRedmineサーバ上から直接参照できるようにする</p><img src="/images/20210908a/2.png" alt="2.png" width="514" height="326" loading="lazy"><p>当社では主にNFS方式で直接参照させるような構成を取っていました。</p><p>NFSマウントがあるというだけでサーバの起動順番を意識しないといけないですし障害ポイントにもなりやすいです。また<a href="https://gitlab-docs.creationline.com/ce/administration/repository_storage_types.html#hashed-storage">最近のGitLabのバージョンアップでストレージパスがハッシュ値に変更</a>され、GitLabサーバ管理者でないと登録困難な状況になってしまいました。​</p><img src="/images/20210908a/ハッシュ値.png" alt="ハッシュ値.png" width="753" height="138" loading="lazy"><h2 id="プラグインの特徴"><a href="#プラグインの特徴" class="headerlink" title="プラグインの特徴"></a>プラグインの特徴</h2><p>今回開発したプラグインはGitLabのAPI経由でリポジトリ情報を取得するためNFSマウントやリポジトリコピーを行う必要がありません。<br><img src="/images/20210908a/3.png" alt="3.png" width="483" height="322" loading="lazy"></p><p>通常アクセスするGitLabのURLを登録することで連携できるようになっており、リポジトリのハッシュ値を取得して登録する必要もありません。</p><img src="/images/20210908a/4.png" alt="4.png" width="1040" height="400" loading="lazy"><p>httpプロキシを経由する場合やコンテキストルートを独自に設定してある構成でも対応できるようにしています。</p><p>従来同様リポジトリタブへのアクセスもしくはfetch_changesetsコマンドを実行することで、Gitリポジトリの更新をRedmineDB(変更履歴情報を持つchangesetsテーブル群)に取り込むことができます。</p><h2 id="実装のポイント"><a href="#実装のポイント" class="headerlink" title="実装のポイント"></a>実装のポイント</h2><p>従来方式ではgit logコマンドで指定した開始リビジョン番号と終了リビジョン番号の間のコメントだけを一括取得できます。一方GitLab APIではリビジョン番号の指定ではなく、指定日時の期間で取得することができます。また一回のAPI実行で最大100個のコミット情報しか取得できません。</p><p>よって最初の取り込みでは、一番古いコミット情報から一定数をchangesetsへ取り込み、取り込んだ分のコミット最終時刻をrepositoriesテーブルのextra_infoに記録しておきます。その後fetch_changesetsコマンドが実行される度に記録されたコミット時刻を参照し、その時刻からのコミット情報を500件ごとにchangesetsテーブルに取り込む動作になっています。</p><p>なお、色々と試した上でタイムアウトしない値として500件にしています。</p><h2 id="インストールと設定"><a href="#インストールと設定" class="headerlink" title="インストールと設定"></a>インストールと設定</h2><h3 id="1-動作条件"><a href="#1-動作条件" class="headerlink" title="1. 動作条件"></a>1. 動作条件</h3><p>本プラグインは以下の条件で動作確認しています。</p><ul><li>Redmine 3系 , 4系</li><li>Ruby 2.4 ～ 2.6</li><li>GitLab 13系 (GitLab API v4)</li></ul><p>下記のGemライブラリを使用しています。</p><ul><li>GitLab v4.14.0</li><li>no_proxy_fix v0.1.2</li></ul><h3 id="2-インストール"><a href="#2-インストール" class="headerlink" title="2. インストール"></a>2. インストール</h3><ol><li>本プラグインのディレクトリredmine_gitlab_adapterを$REDMINE_ROOT/pluginsディレクトリの直下にコピーしてください。</li><li>$REDMINE_ROOTディレクトリで下記のコマンドを実行して、gitlabとno_proxy_fixのGemライブラリをイントールしてください。<br>　例) bundle install</li><li>redmineを再起動してください。</li></ol><h3 id="3-GitLab-APIアクセストークンの取得"><a href="#3-GitLab-APIアクセストークンの取得" class="headerlink" title="3. GitLab APIアクセストークンの取得"></a>3. GitLab APIアクセストークンの取得</h3><ol><li>GitLabにログインしてください。</li><li>「User Settings」-&gt; 「Access Tokens」の画面を開いてください。</li><li> 以下の内容を設定して「Create personal access token」ボダンをクリックし、アクセストークンを発行してください。</li></ol><div class="scroll"><table><thead><tr><th>項目</th><th>値</th></tr></thead><tbody><tr><td>名前</td><td>任意の値</td></tr><tr><td>有効期限日</td><td>設定しない</td></tr><tr><td>read_api</td><td>チェック</td></tr></tbody></table></div><h3 id="4-GitLabアダプタの有効化"><a href="#4-GitLabアダプタの有効化" class="headerlink" title="4. GitLabアダプタの有効化"></a>4. GitLabアダプタの有効化</h3><ol><li>Redmine管理者でログインしてください。</li><li>トップメニューの「管理」-&gt; 「設定」-&gt;「リポジトリ」の画面を開いてください。</li><li>「使用するバージョン管理システム」の「GitLab」をチェックして、保存してください。</li></ol><h3 id="5-リポジトリ設定方法"><a href="#5-リポジトリ設定方法" class="headerlink" title="5. リポジトリ設定方法"></a>5. リポジトリ設定方法</h3><ol><li>Redmineプロジェクト管理者でログインしてください。</li><li>対象プロジェクトの「設定」-&gt;「リポジトリ」-&gt; 「新しいリポジトリ」の画面を開いてください。</li><li>「バージョン管理システム」プルダウンメニューから「GitLab」を選択してください。</li><li>「URL」にgit clone対象のGitLabリポジトリURLを入力してください。</li><li>「API Token」に先ほど取得したGitLab APIアクセストークンを入力してください。</li><li>GitLabのURLにコンテキストパスが含まれている場合は、「Root URL」にコンテキストパスまでを含めたURLを入力してください。</li><li>「作成」をクリックして、保存してください。</li></ol><h3 id="6-Redmineからプロキシ経由でGitLabにアクセスする場合"><a href="#6-Redmineからプロキシ経由でGitLabにアクセスする場合" class="headerlink" title="6. Redmineからプロキシ経由でGitLabにアクセスする場合"></a>6. Redmineからプロキシ経由でGitLabにアクセスする場合</h3><p>本プラグインはOS上の環境変数を利用しているため、環境変数http_proxy、https_proxy、no_proxyを適切に設定することでプロキシを経由する外部GitLabリポジトリを登録することが可能です。</p><h3 id="7-リバースプロキシ背後にGitLabがある場合"><a href="#7-リバースプロキシ背後にGitLabがある場合" class="headerlink" title="7. リバースプロキシ背後にGitLabがある場合"></a>7. リバースプロキシ背後にGitLabがある場合</h3><ul><li>対応1) リバースプロキシ設定変更<br>リバースプロキシでURLがエンコードされることがあり、下記のように設定変更が必要な場合があります。<br>リバースプロキシがApacheの場合の例を記載します。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AllowEncodedSlashes NoDecode</span><br><span class="line">ProxyPass /gitlab http://gitlab.local:80/gitlab nocanon</span><br></pre></td></tr></table></figure><ul><li>対応2) GitLab Project ID使用<br>GitLabのURLにコンテキストパスが含まれている場合は<br>「URL」の入力で<code>https://&lt;gitlab.url&gt;/&lt;context_path&gt;/&lt;group&gt;/&lt;project&gt;.git</code>という形の代わりに、<br><code>https://&lt;gitlab.url&gt;/&lt;context_path&gt;/&lt;gitlab_project_id&gt;</code>という形を使用してください。</li></ul><h3 id="8-補足"><a href="#8-補足" class="headerlink" title="8. 補足"></a>8. 補足</h3><p>本プラグインでRedmineへ新規にGitLabリポジトリを登録するとデータのロードが完了するまでは画面表示に時間がかかることがあります。リポジトリ画面へのアクセス、もしくはfetch_changesetsの実行により500件ごとにRedmineDBへロードされます。従来でも必要ですが同様にcron等でfetch_changesetsを定期実行するようにしてください。<br>​</p><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>Redmineのリポジトリタブを選択して以下のような画面が表示されれば正常に登録されています。画面上の見た目は従来と同様になっています。</p><img src="/images/20210908a/5.png" alt="5.png" width="1040" height="561" loading="lazy"><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>このプラグインによって長年の課題であったNFSマウントを一つ減らすことができました。</p><p><a href="https://github.com/future-architect/redmine_gitlab_adapter">Github</a>からダウンロード可能ですのでぜひお試しください。Pull Requestもお待ちしております。</p><hr><p><strong>TIGコアテクノロジーユニット</strong></p><p>TIGコアテクノロジーユニットでは、現在チームメンバーを募集しています。</p><p>私たちと一緒にテクノロジーで設計、開発、テストの高品質・高生産性を実現する仕組みづくりをしませんか？</p><p>興味がある方はお気軽に<a href="https://twitter.com/future_techblog">技術ブログTwitter</a>や会社採用HPへ、連絡をお待ちしております。</p><ul><li><a href="https://www.future.co.jp/recruit/">https://www.future.co.jp/recruit/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Redmine/">Redmine</category>
      
      <category domain="https://future-architect.github.io/tags/OSS/">OSS</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B3%E3%82%A2%E3%83%86%E3%82%AF/">コアテク</category>
      
      <category domain="https://future-architect.github.io/tags/GitLab/">GitLab</category>
      
      
      <comments>https://future-architect.github.io/articles/20210908a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>技育祭2021に登壇しました</title>
      <link>https://future-architect.github.io/articles/20210907a/</link>
      <guid>https://future-architect.github.io/articles/20210907a/</guid>
      <pubDate>Mon, 06 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;SAIG(Strategic AI</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>SAIG(Strategic AI Group)の塚本です。AIチームにて機械学習のアプローチが適さない問題全般(数理最適や複雑なデータ処理)を担当しています。</p><p>2021年3月11日～13日の3日間に渡って開催された<a href="https://talent.supporterz.jp/geeksai/2021/"><strong>技育祭2021</strong></a>に登壇する機会をいただき、発表に際して考えたことをまとめます。登壇映像は<a href="https://www.youtube.com/watch?v=HQFCDmgiOeA">こちら</a>に公開されてます。</p><p>なお、2020年度の技育祭にも弊社は登壇しております。弊社のビジネス全般に興味がある方は<a href="https://www.youtube.com/watch?v=7ihC17EW2bc">こちら</a>もどうぞ。</p><img src="/images/20210907a/image.png" alt="image.png" width="1200" height="676" loading="lazy"><h1 id="技育祭の特徴について"><a href="#技育祭の特徴について" class="headerlink" title="技育祭の特徴について"></a>技育祭の特徴について</h1><p>良い公演のためには、登壇するイベントの特徴を理解しておくことは重要です。技育祭は、IT系の新卒採用をメインとする就活サービスで知られているサポーターズの主催で、ITに興味関心のある学生が刺激をもらうために視聴します。メインイベントとして各枠1時間の公演が用意されており、サポーターズから依頼されて登壇する目玉公演と採用を主目的としたスポンサー企業の代表者による公演とに分かれます。</p><p>視聴者は公開されたスケジュールから見たい公演を選ぶのですが、当然著名な方や有名な企業の公演に人気が集中します。ウェビナー形式のため人数制限も無く、さらに並行して勉強会も行われています。どれだけ視聴者に”見たい”と思ってもらえるかが重要だと考えました。</p><h1 id="発表内容と狙い"><a href="#発表内容と狙い" class="headerlink" title="発表内容と狙い"></a>発表内容と狙い</h1><p>「競プロスキルでビジネス無双～誰もやらないのでエンジニアだけど営業から研究開発まで全部やります～」というタイトルで発表し、就職に対してネガティブな印象を持っている学生達に、少しでも仕事を面白そうだと思ってもらえるよう、私が現在に至るまでの過程を一人称視点で振り返りました。</p><p>タイトルは少しでも注目してもらえるよう頭を捻りました。捻り過ぎたかもしれません。公演内容は1時間近く学生の視聴者を惹きつけ続けるため、形式的な説明となりやすい肩書きや会社紹介は省略し、物語形式でなるべく前提知識が少なくても楽しめることを意識しました。私が物語を作る際、毎回映画作りの名著「<a href="https://www.amazon.co.jp/%EF%BC%B3%EF%BC%A1%EF%BC%B6%EF%BC%A5-%EF%BC%B4%EF%BC%A8%EF%BC%A5-%EF%BC%A3%EF%BC%A1%EF%BC%B4%E3%81%AE%E6%B3%95%E5%89%87-%EF%BC%B3%EF%BC%A1%EF%BC%B6%EF%BC%A5-%EF%BC%B4%EF%BC%A8%EF%BC%A5-%EF%BC%A3%EF%BC%A1%EF%BC%B4%E3%81%AE%E6%B3%95%E5%89%87-%E3%83%96%E3%83%AC%E3%82%A4%E3%82%AF%E3%83%BB%E3%82%B9%E3%83%8A%E3%82%A4%E3%83%80%E3%83%BC-ebook/dp/B0776P5DX8">ＳＡＶＥ ＴＨＥ ＣＡＴの法則</a>」を読み返して参考にしており、今回も下記の要素が抜けないよう注意しました。</p><ul><li>主人公に共感できる(万人が共感しやすい就活時の苦悩から入る)</li><li>主人公は自分の意志で行動する(会社や顧客の事情ではない)</li><li>感情のジェットコースターを作る(仮初の成功と挫折を入れる)</li></ul><h1 id="登壇してみた感触"><a href="#登壇してみた感触" class="headerlink" title="登壇してみた感触"></a>登壇してみた感触</h1><p>DAY1 3月11日に実施、最大330名の方に視聴いただいたそうで、これは同時間帯で最多とのことでした。大変ありがたいことです。<br>自身のエピソードを話すのは初めてだったので、上手く喋れない所が多かったです。それでも公演中のコメントやTwitterでの反応をたくさんいただき視聴者の方々に助けられました。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">「トラックは突っ込んで、、、来ないんですけど、代わりにCTOが突っ込んできました」<br>ｗｗｗｗｗ<a href="https://twitter.com/hashtag/%E6%8A%80%E8%82%B2%E7%A5%AD?src=hash&amp;ref_src=twsrc%5Etfw">#技育祭</a> <a href="https://twitter.com/hashtag/%E3%83%9B%E3%83%BC%E3%83%ABB?src=hash&amp;ref_src=twsrc%5Etfw">#ホールB</a></p>&mdash; すのーばーど (@snowbird315__) <a href="https://twitter.com/snowbird315__/status/1369924212324851713?ref_src=twsrc%5Etfw">March 11, 2021</a></blockquote><blockquote class="twitter-tweet"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/%E6%8A%80%E8%82%B2%E7%A5%AD?src=hash&amp;ref_src=twsrc%5Etfw">#技育祭</a> <a href="https://twitter.com/hashtag/%E3%83%9B%E3%83%BC%E3%83%ABB?src=hash&amp;ref_src=twsrc%5Etfw">#ホールB</a> え、マイクラのツカモMODあるの<br>気になる！</p>&mdash; kaito (@kaito_tateyama) <a href="https://twitter.com/kaito_tateyama/status/1369925736643973121?ref_src=twsrc%5Etfw">March 11, 2021</a></blockquote><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">ツカモさん話おもしれー 仕事もおもしろそう</p>&mdash; 真紅色に染まるぷーん (@pu__Ne) <a href="https://twitter.com/pu__Ne/status/1369935555413217284?ref_src=twsrc%5Etfw">March 11, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>やはり最初に笑いを取る大切さを改めて実感し、公演後も懇親会で同室になった参加者の方からも「Twitterで気になるワードが流れて来たんですが、一体どんな発表だったんですか？」と興味を持ってもらえたようです。真面目な発表内容でなければ、ちょっとクセのあるワード・印象に残りやすい短いフレーズは、公演中の反応や拡散効果が得られて良いと感じました。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>技育祭は非常に良いイベントだと思います。多様化の時代、キャリアのコンクリート道が整備される頃には、その道の到着点が砂漠化していることも少なくありません。山にうっすらと獣道が形成されるように、今を生きるオトナ達が自身が通ってきた道をつまびらかにし、後進が足跡を辿りやすいよう、これからもこのようなイベントを応援しています。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/">競技プログラミング</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%8A%80%E8%82%B2%E7%A5%AD/">技育祭</category>
      
      
      <comments>https://future-architect.github.io/articles/20210907a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Certified Developer - Associate 合格体験記</title>
      <link>https://future-architect.github.io/articles/20210906a/</link>
      <guid>https://future-architect.github.io/articles/20210906a/</guid>
      <pubDate>Sun, 05 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは、2019年新卒入社筋肉エンジニアの渡邉光です。&lt;/p&gt;
&lt;p&gt;先日、AWS認定資格の一つであるAWS Certified Developer - Associate（AWS</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは、2019年新卒入社筋肉エンジニアの渡邉光です。</p><p>先日、AWS認定資格の一つであるAWS Certified Developer - Associate（AWS DVA）を受験し、無事に合格することができました。合格するまでに自分が実施したことや感想を皆さんに共有できたらと思います。</p><img src="/images/20210906a/合格バッチ.png" alt="合格バッチ" width="340" height="340" loading="lazy"><h1 id="筆者の背景"><a href="#筆者の背景" class="headerlink" title="筆者の背景"></a>筆者の背景</h1><p>私は、一年前にアプリからインフラにジョブチェンジをしまして、所属PJでAWSを業務で使ってきました。初めてAWSを触ったときはサービス数がかなり多く、機能も豊富のためキャッチアップするのもかなり大変だったのを覚えています。そこで私はAWS認定資格を受験することで、AWSの主要サービスや用語について理解することができ、ついでに資格もゲットできることに魅力を感じて認定資格に挑戦することにしました。</p><p>この記事を書くまでに既にAWS Certified Cloud Practitioner (AWS CLF)とAWS Certified Solutions Architect – Associate (AWS SAA)は取得済みです。今回AWS Certified Developer - Associate (AWS DVA)に合格できたので、3冠を達成することができました！</p><ul><li>AWS Certified Cloud Practitioner (AWS CLF)</li><li>AWS Certified Solutions Architect – Associate (AWS SAA)</li><li>AWS Certified Developer - Associate (AWS DVA) ★NEW!!★</li></ul><h1 id="AWS-Certified-Developer-Associate-AWS-DVA-とは"><a href="#AWS-Certified-Developer-Associate-AWS-DVA-とは" class="headerlink" title="AWS Certified Developer - Associate (AWS DVA)とは"></a>AWS Certified Developer - Associate (AWS DVA)とは</h1><p>AWS認定資格の一つで、AWSで構成されるアプリケーションの開発や保守、デプロイ周りで使用するサービスの知識やベストプラクティスに関して問われる試験になっています。</p><p>AWS DVAでは、以下の能力が検証される試験となっています。</p><ul><li>AWS の主要なサービス、使用方法、AWS の基本アーキテクチャのベストプラクティスについて理解していること</li><li>AWS を使用するクラウドベースのアプリケーションの開発、デプロイ、デバッグについて習熟していること</li></ul><p>※試験ガイドは<a href="https://aws.amazon.com/jp/certification/certified-developer-associate/?ch=tile&tile=getstarted">こちら</a>で確認できます。</p><p>試験内容としては以下の分野について出題されます。</p><ul><li>デプロイ</li><li>セキュリティ</li><li>AWSのサービスによる開発</li><li>リファクタリング</li><li>モニタリングとトラブルシューティング</li></ul><p>AWSサービスとしては、code系サービス、ElasticBeanstalk、CloudFormation、AWS SAM、KMS、IAM、API GateWay、DynamoDB、Lambda、CloudWatchなどの開発、デプロイ、サーバレス、運用監視で使用するサービス群が出題対象です。</p><p>AWS SAAと比較すると、AWS DVAは一つのAWSサービスについてある程度深く問われるような印象を受けました。</p><h1 id="学習方法"><a href="#学習方法" class="headerlink" title="学習方法"></a>学習方法</h1><p>私が試験対策に向けて行ってきた教材や勉強方法を紹介します。勉強期間は8月1日にスタートして、8月29日に受験したのでちょうど一か月です。AWS DVAを受験しようと決めてすぐに試験の受験予約をしました。先に期日を決めておくことでダラダラせず危機感を持つことができます。</p><h2 id="書籍"><a href="#書籍" class="headerlink" title="書籍"></a>書籍</h2><ul><li><a href="https://www.amazon.co.jp/dp/4798063401">ポケットスタディ AWS認定 デベロッパーアソシエイト</a></li></ul><p>今年の3月に出版されたばかりのAWS DVAに特化した書籍となっております。AWS DVAの試験内容の各分野ごとにセクションが分かれており、各分野で出題されるAWSサービスの要点やハンズオンを画面キャプチャ付きで解説してくれています。章末問題や本試験想定問題など問題数もかなり多く非常に充実しています。業務で使用したことないサービスのキャッチアップなどかなり助かりました。本書の著者の方はYouTubeチャンネルでハンズオン動画をアップしているので、動画を見ながらハンズオンをやったりもしました。</p><h2 id="Black-Belt-Online-Seminar"><a href="#Black-Belt-Online-Seminar" class="headerlink" title="Black Belt Online Seminar"></a>Black Belt Online Seminar</h2><p>AWSを利用している人は一度はお世話になるサービスだと思います。AWSの各サービスごとに概要やユースケース、機能などを紹介してくれるオンラインセミナーとなっています。YouTubeで講義動画が公開されており、1時間で視聴できるためお昼休みの1時間で動画視聴しながら、ご飯を食べる生活を送っていました。復習するときは資料のアーカイブが<a href="https://aws.amazon.com/jp/aws-jp-introduction/aws-jp-webinar-service-cut/">こちら</a>に上がっているのでPDFで閲覧していました。</p><h2 id="学習サイト-aws-koiwaclub-com"><a href="#学習サイト-aws-koiwaclub-com" class="headerlink" title="学習サイト aws.koiwaclub.com"></a>学習サイト aws.koiwaclub.com</h2><p>AWS認定資格試験の対策サイトと言えばkoiwaclubです。AWS DVAでは#1 ~ #40と比較的問題が少なかったためすべて回答し、間違えた問題の解説を熟読して都度復習する流れで進めていきました。問題の解説が公式ドキュメントの引用のため、一次情報である公式ドキュメントを見る癖も身につくと思います。</p><p>また、koiwaclubの問題集は比較的的中率が高いと言われており、私が受験した際も数問は同じような問題が出題されました。問題集を解くためには会員登録と月額費用が掛かってしまいますが、認定資格を目指されている方は利用して損はないサービスだと思います。</p><h2 id="Udemy"><a href="#Udemy" class="headerlink" title="Udemy"></a>Udemy</h2><ul><li><a href="https://www.udemy.com/course/aws-31955/">AWS 認定デベロッパー アソシエイト模擬試験問題集（5回分325問）</a></li></ul><p>AWS DVAの模擬試験が5回分何度も受けられるコースになっています。講座内容にも記載がありますが、本番試験よりも難易度が高い問題構成となっています。実際に解いてみましたが、koiwaclubよりもかなり難易度も高く、サービスの細かい仕様を問う問題が多かったです。この問題集もkoiwaclubと同様に間違えた問題の解説を熟読して都度復習する流れで進めていきました。本問題集を復習して解けるようになっておけば、本番試験は割と簡単に感じることができます。</p><ul><li><a href="https://www.udemy.com/course/aws-certified-developer-associate-dva-c01/">Ultimate AWS Certified Developer Associate 2021 - NEW!</a></li></ul><p>本講座は32時間の長時間の講義で、かつ英語での講義なのですがハンズオン中心のため、今まで触ったことのないAWSサービスのみを受講するスタイルで進めていきました。特定サービスに関しての講座も出しているので業務で新しく触るAWSサービスに関しては、この方の講座を受ければ手を動かせるレベル感には到達できると思いました。オススメなので是非受講してみてください。</p><h1 id="受験結果と感想"><a href="#受験結果と感想" class="headerlink" title="受験結果と感想"></a>受験結果と感想</h1><p>私は結構心配性で念には念入りに対策したおかげか、合格ライン720点に対して959点で合格することができました。</p><p>AWS認定資格を日本語で受験すると大体経験することなのですが、日本語訳に違和感のある問題が多かったです。その場合は英語に切り替えることもできるので都度英語に切り替えて問題文を理解して回答を選びました。</p><p>今回は使用したことないサービスはすべてハンズオンを一度は行うことを意識してテストに臨んだため、各サービス間のつながりを暗記でなく、理解することができたと思います。そのおかげか、初めての問題にも割と対応することができたと思います。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>AWS認定資格を目指すにあたって普段業務で使用しないサービスについて勉強する必要がありますが、取得する過程を通して使用したことないサービスに関してもある程度の知識レベルが身につきますし、何より案件で初めてサービスを使用するときの心理的ハードルが下がると思います。</p><p>アソシエイト資格は残りAWS Certified SysOps Administrator - Associate（SOA）だけなので、できるだけ早いうちに取得してしまおうと思います！</p><p>Future Tech Blogでは、市川浩暉さんの<a href="/articles/20210818b/">AWSSAA</a>の合格体験記や、伊藤真彦さんの<a href="/articles/20210607a/">AWSSAP</a>と<a href="/articles/20210825a/">AWSDOP</a>の合格体験記も記載しているのでぜひご覧ください！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/">合格記</category>
      
      
      <comments>https://future-architect.github.io/articles/20210906a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GoLand Tips 7選</title>
      <link>https://future-architect.github.io/articles/20210902b/</link>
      <guid>https://future-architect.github.io/articles/20210902b/</guid>
      <pubDate>Wed, 01 Sep 2021 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは、Futureの&lt;a href=&quot;https://note.com/future_event/n/n76e7e7d4beef&quot;&gt;Engineer</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは、Futureの<a href="https://note.com/future_event/n/n76e7e7d4beef">Engineer Camp</a>にてインターン中の山本です。</p><p>インターンではGo言語を使用したIoTプラットフォームのバックエンド開発に参加させていただいております。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>GoLandはGoでの開発に特化した統合開発環境で、最初からGoの開発に必要な機能はほとんど揃っています。そのため、インストール後すぐに使い始めることができるという利点があります。とはいえGoLandの全ての機能を使いこなすのは簡単ではなく、なんとなく、受動的に使っている方は多いのではないでしょうか。</p><p>本記事ではそんな方に向けて、普遍的なGoLandの機能を紹介する内容となっています。読後に少しでもコードを書くのが楽になれば幸いです。</p><p><a href="https://www.jetbrains.com/ja-jp/go/">https://www.jetbrains.com/ja-jp/go/</a></p><h3 id="Windowsなどの他のOSを使っている方へ"><a href="#Windowsなどの他のOSを使っている方へ" class="headerlink" title="Windowsなどの他のOSを使っている方へ"></a>Windowsなどの他のOSを使っている方へ</h3><p>筆者が使用しているOSの関係上、記載するショートカットは全てmacOSのもののみとさせていただきます。</p><p>それぞれの機能については後から検索がしやすいようになるべく英語でも記載しておりますので、WindowsなどOSが異なる方は「GoLand 機能名』などで検索していただくと各環境ごとのキーが見つかるかと思います。</p><h2 id="1-関数の宣言にジャンプする-（Go-to-declaration）"><a href="#1-関数の宣言にジャンプする-（Go-to-declaration）" class="headerlink" title="1. 関数の宣言にジャンプする （Go to declaration）"></a>1. 関数の宣言にジャンプする （Go to declaration）</h2><p>関数の実装を見たい時に便利な機能です。</p><p><code>⌘ + B</code>もしくは<code>⌘ + Click</code>で関数や構造体などが宣言されているところへジャンプすることができます。</p><img src="/images/20210902b/gif2.gif" alt="gif2.gif" width="600" height="258" loading="lazy"><h4 id="元の場所に戻る"><a href="#元の場所に戻る" class="headerlink" title="元の場所に戻る"></a>元の場所に戻る</h4><p><code>⌘ + [</code>で一つ前のタイミングでカーソルがあった位置へ戻ることができます。（連打も可能）</p><h2 id="2-検索する-（Search-Everywhere）"><a href="#2-検索する-（Search-Everywhere）" class="headerlink" title="2. 検索する （Search Everywhere）"></a>2. 検索する （Search Everywhere）</h2><p><code>Shift</code>を二回押すとSearch Everywhereウィンドウが開きます。</p><p>プロジェクト内のファイルやコード、GoLandのほとんどの機能はここから検索することで出てきます。ちなみに検索したい内容をあらかじめ選択しておくと検索窓に選択内容がコピーされます。</p><img src="/images/20210902b/gif1.gif" alt="gif1.gif" width="600" height="267" loading="lazy"><p>Goではファイル名と構造体名などが似通うことはそれなりにあると思いますので、ALLの検索窓からではなく、TypesやFilesなどそれぞれの検索窓を開くためのショートカットを覚えておくのもよいかと思います。</p><ul><li>Search Types（構造体などを検索） : <code>⌘ + O</code></li><li>Search Files（ファイルを検索） : <code>Shift + ⌘ + O</code></li><li>Search Symbols（シンボルを検索） : <code>option + ⌘ + O</code></li><li>Search Actions（アクションを検索） : <code>Shift + ⌘ + A</code></li></ul><h2 id="3-コード補完-（Postfix-templatesなど）"><a href="#3-コード補完-（Postfix-templatesなど）" class="headerlink" title="3. コード補完 （Postfix templatesなど）"></a>3. コード補完 （Postfix templatesなど）</h2><p>Go言語ではエラー処理など何度も書く処理がありますが、これらをGolandで書く場合にはコード補完機能を使用すると便利です。</p><p>例えば、以下のようなコードを書きたい場合、</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file, err := os.Open(<span class="string">&quot;example.txt&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// エラー処理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>わざわざその通りにコーディングしなくとも、<code>err.nn</code>として<code>Enter</code>キーを押すとコードが生成されます。</p><img src="/images/20210902b/gif8.gif" alt="gif8.gif" width="600" height="226" loading="lazy"><p>上で説明した<code>nn</code>以外にも<code>!=nil&#123;return&#125;</code>を生成する<code>.rr</code>や変数を作って受け取る<code>.var</code>などがあります。</p><h2 id="4-Structをとりあえず埋める-Fill-struct-fields"><a href="#4-Structをとりあえず埋める-Fill-struct-fields" class="headerlink" title="4. Structをとりあえず埋める (Fill struct fields)"></a>4. Structをとりあえず埋める (Fill struct fields)</h2><p>名前の通り、structのフィールドを全て初期値で埋めてくれる機能。これを使えば要素名が自動で入るし、もれなくstructの要素も入力できるので便利です。</p><p><code>&#123;&#125;</code>の間で<code>option + Enter</code>を押して、出てきたものの中から<code>Fill all fields</code>を選んでください。</p><img src="/images/20210902b/gif7.gif" alt="gif7.gif" width="600" height="305" loading="lazy"><h2 id="6-ドキュメントを見る-Quick-documentation"><a href="#6-ドキュメントを見る-Quick-documentation" class="headerlink" title="6. ドキュメントを見る (Quick documentation)"></a>6. ドキュメントを見る (Quick documentation)</h2><p>関数名の上にカーソルを持ってきてホバーすると関数のドキュメントやドキュメントのURLが表示されます。マウスとか使いたくない時は<code>Shift+ F1</code>でドキュメントのページを開きます。<br><img src="/images/20210902b/gif9.gif" alt="gif9.gif" width="600" height="272" loading="lazy"></p><h2 id="7-タブの移動"><a href="#7-タブの移動" class="headerlink" title="7. タブの移動"></a>7. タブの移動</h2><p><code>⌘ + Shift + [</code> , <code>⌘ + Shift + ]</code>でタブ間を移動できます。</p><img src="/images/20210902b/gif10.gif" alt="gif10.gif" width="600" height="360" loading="lazy"><h2 id="さらに使いこなすために"><a href="#さらに使いこなすために" class="headerlink" title="さらに使いこなすために"></a>さらに使いこなすために</h2><h3 id="Key-Promoter-X"><a href="#Key-Promoter-X" class="headerlink" title="Key Promoter X"></a>Key Promoter X</h3><p><a href="https://plugins.jetbrains.com/plugin/9792-key-promoter-x/versions">Key Promoter X</a>とは、ショートカットが用意されている処理をショートカットを使用せずに実行するとポップアップでお知らせしてくれるプラグインです。使っていて邪魔になったことはほとんどないので入れておいて損はないと思います。<br><img src="/images/20210902b/ファイル名" alt="ファイル名" width="801" height="283" loading="lazy"></p><h3 id="Learnで学ぼう"><a href="#Learnで学ぼう" class="headerlink" title="Learnで学ぼう"></a>Learnで学ぼう</h3><p>ここで紹介した機能以外にも便利な機能がGoLandにはあります。GoLandにはLearnというチュートリアルが用意されており、ここではGoLandの機能を手を動かしながら学べます。ぜひ触ってみてください。</p><p>Search everywhereウィンドウを立ち上げ（<code>Shift</code>2回）、”Learn”を検索すると出てきます。</p><img src="/images/20210902b/ファイル名_2" alt="ファイル名" width="1200" height="707" loading="lazy"><h3 id="GoLand公式のショートカット一覧PDF"><a href="#GoLand公式のショートカット一覧PDF" class="headerlink" title="GoLand公式のショートカット一覧PDF"></a>GoLand公式のショートカット一覧PDF</h3><p>GoLand公式のショートカット一覧（2021年8月31日時点）は<a href="https://resources.jetbrains.com/storage/products/goland/docs/GoLand_ReferenceCard.pdf?_ga=2.67005742.1086839534.1629960125-2126322136.1629764724&_gac=1.228962542.1629764744.Cj0KCQjwjo2JBhCRARIsAFG667XBuwyHmTLyp_IwNgak5Hq3Cotr-6yXLbN6ExY2MbPJimFeCR8J-YEaAkGDEALw_wcB">こちら</a>からご覧になることができます。<br>慣れていないうちはダウンロードするかブックマークしておくと便利だと思います。</p><h1 id="参考文献など"><a href="#参考文献など" class="headerlink" title="参考文献など"></a>参考文献など</h1><ul><li><a href="https://tech.gunosy.io/entry/goland-osusume-benri-features">https://tech.gunosy.io/entry/goland-osusume-benri-features</a></li><li><a href="https://www.youtube.com/watch?v=BgKuKTPOEI8">https://www.youtube.com/watch?v=BgKuKTPOEI8</a></li><li><a href="https://www.jetbrains.com/help/go/mastering-keyboard-shortcuts.html">https://www.jetbrains.com/help/go/mastering-keyboard-shortcuts.html</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Goland/">Goland</category>
      
      <category domain="https://future-architect.github.io/tags/JetBrains/">JetBrains</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88/">ショートカット</category>
      
      
      <comments>https://future-architect.github.io/articles/20210902b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Looker を運営する組織を考察してみる</title>
      <link>https://future-architect.github.io/articles/20210902a/</link>
      <guid>https://future-architect.github.io/articles/20210902a/</guid>
      <pubDate>Wed, 01 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/articles/20210823a/">フューチャー夏の自由研究2021</a>の9回目です。こんにちは、TIG DXユニットの西田と申します。</p><p>業務で <code>GCP</code> のインフラの設計/構築/運用を担当しております。私が感じている『GCP の特徴』というと、Gartner の Magic Quadrant などでも毎回紹介されているデータ分析領域だと思っています。</p><p>そのため今回は、</p><ul><li><a href="https://www.itmedia.co.jp/news/articles/1906/07/news062.html">Google社が買収したLooker</a>という技術の簡単な紹介</li><li>そして、それを使うとなった場合、何が必要になるか？<ul><li>Looker を採用するメリットに関しては本記事では特に触れません。</li><li>経営層から、使う事が決定された前提での話になっています。</li></ul></li></ul><p>という事を考察してみます。</p><p>本記事はあくまでも自由研究であり、私自身は Looker の運用経験はない中での私の主観がメインです。そこは最初に申し上げておきますが、ご容赦ください🙇</p><img src="/images/20210902a/looker_logo_meta_v0005.png" alt="looker_logo_meta_v0005.png" width="600" height="400" loading="lazy"><h1 id="Looker-とは？"><a href="#Looker-とは？" class="headerlink" title="Looker とは？"></a>Looker とは？</h1><h2 id="概略"><a href="#概略" class="headerlink" title="概略"></a>概略</h2><p>Gartner の アナリティクス＆BIプラットフォーム領域の Magic Quadrant 2021 としては <code>CHALLENGERS</code>。まだ<code>LEADERS</code> ではないです</p><ul><li><a href="https://ja.looker.com/learn/gartner-magic-quadrant">https://ja.looker.com/learn/gartner-magic-quadrant</a></li></ul><p>内容としては最新 かつ 網羅的な概略に関しては公式サイトなどを見るのが一番良いですが、一旦アーキ面にフォーカスします。</p><p>以下の記事が参考になります。</p><ul><li><a href="https://ja.looker.com/platform/overview">https://ja.looker.com/platform/overview</a></li><li><a href="https://marketing.itmedia.co.jp/mm/articles/1907/16/news054.html">https://marketing.itmedia.co.jp/mm/articles/1907/16/news054.html</a></li></ul><p>要約すると、ポイントは以下です。</p><ul><li>前提<ul><li>データを分析するためのツール。書き込みやデータの管理などは主目的ではない。</li><li>データウェアハウスにて、正確なデータが一元管理されている前提。<ul><li>データがサイロ化・分散していない事が導入の前提条件</li></ul></li></ul></li><li>特徴<ul><li>データを保管する層と、データを閲覧する層の間にそれらを管理する層を設ける。<ul><li>データに対する参照権限やデータの解釈を統一的に管理</li></ul></li><li><strong>データガバナンス</strong> が他の製品にはない特徴<ul><li>通常のBIとは異なり、かなり大きな規模（＝<strong>会社全体</strong>）で統制を効かせる事が出来ます。</li></ul></li></ul></li></ul><p>要するに、<strong>データガバナンス</strong> がLookerの大きな特徴です。</p><p>そのため、それをきちんと運営する事/できる事がLookerを上手に使うことになりますね。(できないなら、Lookerを使わずに、他を使った方が良いかもしれません)</p><h2 id="データガバナンスとは？"><a href="#データガバナンスとは？" class="headerlink" title="データガバナンスとは？"></a>データガバナンスとは？</h2><p>データガバナンスという言葉だけではあまりピンと来ませんよね。</p><p>実装を交えつつ、説明してきます。</p><h2 id="実装のSample"><a href="#実装のSample" class="headerlink" title="実装のSample"></a>実装のSample</h2><p><a href="https://docs.looker.com/ja/data-modeling/learning-lookml/lookml-terms-and-concepts">こちら</a> を例に解説します。</p><h3 id="Model-を定義する"><a href="#Model-を定義する" class="headerlink" title="Model を定義する"></a>Model を定義する</h3><p>order_database というデータウェアハウスとすでに接続している前提です。</p><p>中身は <code>Bigquery</code> でも <code>snowflake</code> でもOKです。</p><p>その中に <code>orders</code> と <code>customers</code> というテーブルがあり、それを join したテーブルを定義しています。</p><figure class="highlight sh"><figcaption><span>ecommercestore.model.lookml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">connection: order_database</span><br><span class="line">include: <span class="string">&quot;filename_pattern&quot;</span>   <span class="comment"># include all the views</span></span><br><span class="line">explore: orders &#123;</span><br><span class="line">  join: customers &#123;</span><br><span class="line">    sql_on: <span class="variable">$&#123;orders.customer_id&#125;</span> = <span class="variable">$&#123;customers.id&#125;</span> ;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="値などを定義"><a href="#値などを定義" class="headerlink" title="値などを定義"></a>値などを定義</h3><p>上記で作成したテーブルの中で参照する事が出来る値を定義していきます。</p><ul><li>dimension : DB に入っている値を基本はそのままの形で定義</li><li>measure  : 何かしらの集計結果を定義</li></ul><figure class="highlight sh"><figcaption><span>view.lkml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">view: orders &#123;</span><br><span class="line">  dimension: id &#123;</span><br><span class="line">    primary_key: yes</span><br><span class="line">    <span class="built_in">type</span>: number</span><br><span class="line">    sql: <span class="variable">$&#123;TABLE&#125;</span>.id ;;</span><br><span class="line">  &#125;</span><br><span class="line">  dimension: customer_id &#123;</span><br><span class="line">    sql: <span class="variable">$&#123;TABLE&#125;</span>.customer_id ;;</span><br><span class="line">  &#125;</span><br><span class="line">  dimension: amount &#123;</span><br><span class="line">    <span class="built_in">type</span>: number</span><br><span class="line">    value_format: <span class="string">&quot;0.00&quot;</span></span><br><span class="line">    sql: <span class="variable">$&#123;TABLE&#125;</span>.amount ;;</span><br><span class="line">  &#125;</span><br><span class="line">  dimension_group: created &#123;</span><br><span class="line">    <span class="built_in">type</span>: time</span><br><span class="line">    timeframes: [date, week]</span><br><span class="line">    sql: <span class="variable">$&#123;TABLE&#125;</span>.created_at ;;</span><br><span class="line">  &#125;</span><br><span class="line">  measure: count &#123;</span><br><span class="line">    <span class="built_in">type</span>: count           <span class="comment"># creates sql COUNT(orders.id)</span></span><br><span class="line">    sql: <span class="variable">$&#123;id&#125;</span> ;;</span><br><span class="line">  &#125;</span><br><span class="line">  measure: total_amount &#123;</span><br><span class="line">    <span class="built_in">type</span>: sum             <span class="comment"># creates sql SUM(orders.amount)</span></span><br><span class="line">    sql: <span class="variable">$&#123;amount&#125;</span> ;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="上記を閲覧"><a href="#上記を閲覧" class="headerlink" title="上記を閲覧"></a>上記を閲覧</h3><p>上記で定義した値を閲覧します。（いい画像がなかったので手元の環境です）</p><p>左側のペインで項目を選択して実行を押すと表形式で表示されます。これが基本です。<br><img src="/images/20210902a/image.png" alt="image.png" width="1014" height="489" loading="lazy"></p><p>今度は measure の方です。</p><p>例えば、status 毎の件数をカウントしたい場合は、その2つを選択して実行させると、自動的に集計結果が得られます。</p><img src="/images/20210902a/image_2.png" alt="image.png" width="1017" height="384" loading="lazy"><p>ここで注目してほしいのは dimenstion ではなく <strong>measure</strong> です。</p><p>dimension の方は引っ張ってくる値と、その単位などの定義なので、人に依ってそこまでブレ要素はありません。</p><p>しかし、measure の方は人によってブレ要素があります。例えば、○○に対する○○率、などの複雑な指標を得たいときの計算式は、分母に持ってくる値など、<strong>定義が人によって異なる</strong> ケースがあります。</p><h3 id="データガバナンスとは？（再）"><a href="#データガバナンスとは？（再）" class="headerlink" title="データガバナンスとは？（再）"></a>データガバナンスとは？（再）</h3><p>上記のケースの様に、データや値の定義が分析する毎に、分析する人毎に、変わってしまうと整合性が取れなくなり、正しい経営判断が出来なくなるリスクが出てきます。</p><p>それを防ぐために、データの値や定義を行う層と、その値を見て判断材料を得る層を分離させる事が Looker が言うデータガバナンスの1つの側面です。</p><p>しかし、ご存知の通り、これは技術だけでは成立しません。組織の運営とセットでようやくその目的が達成できます。</p><p>要約すると以下の3つのロール/層に分かれますね。</p><div class="scroll"><table><thead><tr><th>No</th><th>ロール/層</th><th>タスク</th><th>必要となる知識</th></tr></thead><tbody><tr><td>1</td><td>view を閲覧し判断材料を収集</td><td>経営判断の材料を集める</td><td>技術要素とよりは、高い情報処理/整理能力</td></tr><tr><td>2</td><td>KPI の計算方法を定義</td><td>何の値をどう計算すると目的の指標が計算できるのかを検討</td><td>数学的知識</td></tr><tr><td>3</td><td>model, view の実装</td><td>上記の計算を Looker で実装</td><td>Lookerの専門知識</td></tr></tbody></table></div><p>上記を組織運営としてチームを分けつつ、適切に運営していく事がデータガバナンスの肝になります。</p><h1 id="Looker-導入-運用のために何が必要か？"><a href="#Looker-導入-運用のために何が必要か？" class="headerlink" title="Looker 導入/運用のために何が必要か？"></a>Looker 導入/運用のために何が必要か？</h1><p>さて、いよいよ本丸です。少し例を交えて説明していきたいと思います。</p><h2 id="想定となる-As-Is例-は？"><a href="#想定となる-As-Is例-は？" class="headerlink" title="想定となる As-Is例 は？"></a>想定となる As-Is例 は？</h2><p>少し極端なところもありますが、データは各部門でバラバラに管理されている（データがサイロ化されている）ケースが多く、何らかのKPIを策定しようにも、それを測定する仕組みから準備する必要があるケースがほとんどです。<br>例えば、NW/SV機器の保守事業を例にすると…</p><ul><li>NW機器やSV機器の予備機を保管し、顧客の機器が故障した際に機器交換を行う事業を展開</li><li>予備機・保守部材は日本全国に展開している倉庫に保管</li><li>上記とは別に、交換作業員が在籍する営業所も日本全国に存在している</li><li>営業部門 / 保守部門は分かれている</li><li>よくある話ですが、保守部材・予備機の在庫を最小化するという経営目標を立てるとする</li><li>この場合、保守部門が持つデータだけではなく、営業部門が持つ今後の見込みのデータも組み合わせて適切に在庫の配置を決める必要が出ます</li></ul><p>ですが、保守部門は倉庫管理システムなどでDB化されているのに対し、営業部門はエクセルでデータを管理しているケースが非常に多いため、このKPIを実現させるためには測定する仕組みをまずは作らないといけません。<br>（もっと言うと、それを使う営業担当者の動きの設計＝ <strong>業務設計</strong> も必要ですね。技術だけでは解決しません。）</p><img src="/images/20210902a/01_as_is.png" alt="01_as_is.png" width="401" height="441" loading="lazy"><p>これをまずは基本として、Looker を導入するためには何が必要か？を考察しましょう。</p><h2 id="まずはデータウェアハウス！"><a href="#まずはデータウェアハウス！" class="headerlink" title="まずはデータウェアハウス！"></a>まずはデータウェアハウス！</h2><p>前述した通り、まずはLookerの大前提のデータウェアハウスの準備が必要です。</p><p>データのサイロ化に関しては、Google検索すれば山ほど記事はありますし、色んなベンダさんが解決策を提案してくれはします。GCP で言えば Bigquery に格納することになります。当然、Looker からも接続できます。<br>通常、データウェアハウスはITインフラ部門が担当することになります。こんな感じです。</p><img src="/images/20210902a/02_datawarehouse.png" alt="02_datawarehouse.png" width="481" height="321" loading="lazy"><p>（おそらく）新たに必要になるモノ</p><ul><li>データウェアハウス</li><li>上記の運用スキル・ナレッジ</li></ul><h2 id="Looker-を導入！"><a href="#Looker-を導入！" class="headerlink" title="Looker を導入！"></a>Looker を導入！</h2><p>さて、前提条件が満たされたので、いよいよ Looker を導入しましょう。</p><p>先に触れた通り、Looker を実装する層と、計算方法などの数学的な方法を検討する組織を分ける事を前提とします。</p><p>（分けなくても運営できる可能性もありますが、一旦わかりやすさのため）</p><img src="/images/20210902a/03_lookml-team.png" alt="03_lookml-team.png" width="481" height="471" loading="lazy"><p>View/Dashboad などの見栄え部分はモノに寄りけりですね。</p><p>一時的に分析したい指標であれば、Looker の View 上で GUI で操作して値を取れば良いのでLookerの知識は浅くてOKですし、それを永続化したいのでばれば、<code>view.lkml</code> に落とし込むなどの実装が必要になると思いますので、Lookerの知識は深く必要になります。</p><p>（おそらく）新たに必要になるモノ。</p><ul><li>LookML の管理・統制-T<ul><li>外注するか、自前で組織するか</li></ul></li></ul><p>※ データサイエンティスト-T は、Lookerが導入されなくともデータウェアハウスが存在しているのであれば、人としては存在しているはずなので、新しく必要となる事はないと想定されます。</p><p>これでおそらく完成じゃないかと思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Looker をきちんと運用するために必要な事を、組織運営の観点から考察してみました。</p><p>会社全体の業務データを横ぐしで管轄し、経営判断に生かすためには、これくらいの編成が必要になる事が想定されます。</p><p>スモールスタート自体は問題ないと思いますが、スモールの状態での運用は人件費的にコストメリットが出ませんので、コンサルとして提案するなら、組織運営までやり抜く覚悟を持って提案します！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/BI/">BI</category>
      
      <category domain="https://future-architect.github.io/tags/Looker/">Looker</category>
      
      
      <comments>https://future-architect.github.io/articles/20210902a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>医薬品副作用データベースから医薬品同士の関係を学習・評価・可視化する</title>
      <link>https://future-architect.github.io/articles/20210901a/</link>
      <guid>https://future-architect.github.io/articles/20210901a/</guid>
      <pubDate>Tue, 31 Aug 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20210901a/top.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;490&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;こんにちは！Strategic AI Groupの金子です。&lt;/p&gt;
&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20210901a/top.png" alt="" width="600" height="490" loading="lazy"><p>こんにちは！Strategic AI Groupの金子です。</p><p><a href="/articles/20210823a/">夏の自由研究ブログ連載2021</a>として医薬品副作用データベースにWord2Vecを適用し性能を評価、医薬品-原疾患-有害事象の可視化を行いました。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>本記事で作成したプログラムは医薬品の情報を扱っていますが、医療機器には該当せず人の疾病の診断、治療、予防を目的としておりません。本記事の内容に基づいて医学的判断は行わないようお願いします。</p><p>この記事は「用語解説」・「実装」・「実験と評価」・「Embedding projectorによる可視化」の4章に分かれております。</p><ul><li>「用語解説」の章ではこの記事を書いた背景と記事で出てくる用語について解説しています。</li><li>「実装」の章では実装に用いたデータ・手法とそのコードについて記載しています。</li><li>「実験と評価」の章では実験の定量評価と、得られた医薬品同士の結果について考察を行っています。</li><li>「Embedding projectorによる可視化」の章ではウェブアプリを用いた可視化の方法について紹介しています。</li></ul><p>サムネイルの結果を確認したい場合は<a href="https://projector.tensorflow.org/?config=https://raw.githubusercontent.com/nadare881/jader_w2v_data/master/config.json">Publish済みのEmbedding Projectorのページ</a>からすぐに見ることができます。</p><h1 id="背景・用語解説"><a href="#背景・用語解説" class="headerlink" title="背景・用語解説"></a>背景・用語解説</h1><h2 id="背景・概要について"><a href="#背景・概要について" class="headerlink" title="背景・概要について"></a>背景・概要について</h2><p>今回の自由研究は、Word2Vecを自然言語以外の分野に適用する際の改善手法の検討と、結果の可視化方法の勉強を目的として行いました。</p><p>Word2Vecは自然言語処理以外にも使われており、ECサイトの閲覧履歴を文章として扱うことで学習し獲得した商品の分散表現を協調フィルタリングに活用する<a href="https://arxiv.org/ftp/arxiv/papers/1603/1603.04259.pdf">Item2Vec</a>のような手法が研究されています。それらの手法では推薦精度をもってモデルの評価を行いますが、得られた分散表現の自体の類似度の評価についてではないためその分散表現を用いてデータの分析を行えるかは分からないといった問題があります。本記事では薬効分類番号を用い、医薬品の分散表現の評価を行うことでWord2Vecに対する様々な改善が分析の役に立つかについて定量的に評価を行いました。また、医薬品と原疾患などの関係は医薬品の添付文章などを参照することで検討できるため、定量評価の妥当性についても考察しました。</p><h2 id="用語解説"><a href="#用語解説" class="headerlink" title="用語解説"></a>用語解説</h2><h3 id="Word2Vecとは"><a href="#Word2Vecとは" class="headerlink" title="Word2Vecとは"></a>Word2Vecとは</h3><p>Word2Vecは自然言語処理でよく使われる、単語を表現する固定長のベクトルを学習するための手法です。ある単語とその周囲の単語の関係からベクトルを学習することで、例えば下記の図のように<a href="https://arxiv.org/pdf/1310.4546.pdf">国と首都の関係性などを表現できる</a>ようになります。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><img src="/images/20210901a/Mikolov13a.png" alt="Mikolov13a.png" width="495" height="349" loading="lazy"><p>また、Word2Vecで得られた表現には加法構築性があります。学習した単語の分散表現同士で足し算する例(「王様」-「男」+「女」 = 「女王」)は聞いたことがある人も多いと思います。この性質から、前述のとおり自然言語以外の分野でもWord2Vecは広く使われています。</p><h3 id="医薬品副作用データベース-JADERとは"><a href="#医薬品副作用データベース-JADERとは" class="headerlink" title="医薬品副作用データベース JADERとは"></a>医薬品副作用データベース JADERとは</h3><p>医薬品副作用データベース(Japanese Adverse Drug Event Report database：JADER)は<a href="https://www.pmda.go.jp/index.html">独立行政法人 医薬品医療機器総合機構(以下PMDA)</a>が公表している「副作用が疑われる症例報告に関する情報」についてのデータベースです。このデータセットは平成25年度以降に医療機関等から報告のあった国内の副反応疑い報告が調査・研究のために利用できるようcsv形式によりまとめられています。</p><p>一つの症例報告は以下の4つのテーブルに分割され、それぞれ識別番号によって紐づけられます。</p><ul><li>患者の年齢や性別、報告者の資格といった症例一覧テーブル(demoテーブル)</li><li>症例発症時に同時に併用していた薬を含む医薬品情報テーブル(drugテーブル)</li><li>発生した副作用が疑われる有害事象についての副作用テーブル(reacテーブル)</li><li>患者がもともと持っていた疾患に関する原疾患テーブル(histテーブル)</li></ul><p>今回は、2021/7/23にPMDAの医薬品副作用データベース（英名：Japanese Adverse Drug Event Report database、略称；JADER）から取得したデータを用い実験を行いました。<br>一つの識別番号によって結びついた情報を一つの文章として捉えWord2Vecを実装します。</p><h3 id="薬価基準収載医薬品コードとは"><a href="#薬価基準収載医薬品コードとは" class="headerlink" title="薬価基準収載医薬品コードとは"></a>薬価基準収載医薬品コードとは</h3><p>薬価基準収載医薬品コードは厚生労働省が管理する薬価ごとに設定された英数12桁のコードです。薬価基準収載医薬品コードのうち上位4桁は薬効分類番号で日本標準商品分類の中分類87の次の4桁に対応しています。例えばアスピリンには1143と3399が振られており、これは以下のような意味を持ちます。<a href="https://www.e-stat.go.jp/classifications/terms/30">分類検索システム</a>で実際に検索することができます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1143: 神経系及び感覚器官用医薬品   &gt;  中枢神経系用薬   &gt;  解熱鎮痛消炎剤   &gt;  サリチル酸系製剤；アスピリン等</span><br><span class="line">3399: 代謝性医薬品   &gt;  血液・体液用薬   &gt;  その他の血液・体液用薬   &gt;  他に分類されない血液・体液用薬</span><br></pre></td></tr></table></figure><p>JADER記載の医薬品名と薬価基準収載医薬品コードを紐づけるために厚生労働省のHPからデータを取得しました。<br>薬価基準収載医薬品コードの出典は2021/8/17に取得した以下のページです。</p><ul><li><a href="https://www.mhlw.go.jp/topics/2021/04/tp20210401-01.html">薬価基準収載品目リスト及び後発医薬品に関する情報について（令和3年8月12日適用）</a></li><li><a href="https://www.mhlw.go.jp/seisakunitsuite/bunya/kenkou_iryou/iryouhoken/shohosen_210401.html">処方箋に記載する一般名処方の標準的な記載（一般名処方マスタ）について（令和3年6月18日適用）</a></li></ul><p>また、薬効分類の名称については総務省のHPからデータを取得しました。<br>日本標準商品分類の出典は2021/8/17に取得した以下のページです。</p><ul><li><a href="https://www.e-stat.go.jp/classifications/terms/30">日本標準商品分類(平成2年[1990年]6月改定)</a></li></ul><p>これらのページに記載されたファイルについて編集・加工を行い計算に用いました。</p><h1 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h1><p>この章ではデータセットの基本的な統計情報と実装した手法の解説、コードの紹介を行います。</p><h2 id="データセット基本情報"><a href="#データセット基本情報" class="headerlink" title="データセット基本情報"></a>データセット基本情報</h2><p>JADERのデータセットについて、693295件の報告を元に学習を行いました。<br>各テーブルに含まれるユニークな語彙数とレコード数は以下の通りです。</p><div class="scroll"><table><thead><tr><th align="left"></th><th align="right">ユニークな語彙数</th><th align="right">レコード数</th></tr></thead><tbody><tr><td align="left">医薬品情報テーブル</td><td align="right">10106</td><td align="right">3875874</td></tr><tr><td align="left">副作用テーブル</td><td align="right">9681</td><td align="right">1096193</td></tr><tr><td align="left">原疾患テーブル</td><td align="right">9903</td><td align="right">1392614</td></tr></tbody></table></div><p>医薬品の名称のうち、2071件は薬効分類番号との紐づけができたため、この2071件の類似度を用いて得られたベクトルの評価を行います。紐づけができた薬効分類番号は377種類ありました。</p><h2 id="手法解説"><a href="#手法解説" class="headerlink" title="手法解説"></a>手法解説</h2><h3 id="Skip-gramとCBOW"><a href="#Skip-gramとCBOW" class="headerlink" title="Skip-gramとCBOW"></a>Skip-gramとCBOW</h3><p>Word2Vecの学習で現在よく使われる手法は二種類あります。周囲の単語からある単語を予測するCBOW(Countinuous Bag-of-Words)モデルと、ある単語から周囲の単語を予測するSkip-gramモデルです。一般にCBOWよりもSkip-gramの方が計算時間はかかる分精度が高いのですが、実装が簡単であるのと拡張しやすいことから本記事ではCBOWをベースに実装を行います。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><img src="/images/20210901a/Mikolov13b.png" alt="Mikolov13b.png" width="494" height="291" loading="lazy"><h3 id="Negative-Sampling"><a href="#Negative-Sampling" class="headerlink" title="Negative Sampling"></a>Negative Sampling</h3><p>CBOWもSkip-gramも多クラス分類としてN種類の単語のどれに分類されるか毎回計算することは可能です。しかし、今回の場合単語の種類が30000ほどあるので毎回30000種類の分類の確率を計算するのでは時間がかかってしまいます。そこでサンプルごとにすべての負例を計算するのではなく、ある分布からランダムに5~20程度負例をサンプリングして計算を行うことで高速化します。負例は以下の分布からサンプリングします。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.858ex" xmlns="http://www.w3.org/2000/svg" width="23.058ex" height="6.161ex" role="img" focusable="false" viewBox="0 -1460 10191.6 2723.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(675,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1149.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1538.3,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mo" transform="translate(2254.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2921,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3976.8,0)"><g data-mml-node="mrow" transform="translate(1709.1,710)"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mo" transform="translate(767,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1156,0)"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="msup" transform="translate(1872,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(422,363) scale(0.707)"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g><g data-mml-node="mrow" transform="translate(220,-920)"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M61 748Q64 750 489 750H913L954 640Q965 609 976 579T993 533T999 516H979L959 517Q936 579 886 621T777 682Q724 700 655 705T436 710H319Q183 710 183 709Q186 706 348 484T511 259Q517 250 513 244L490 216Q466 188 420 134T330 27L149 -187Q149 -188 362 -188Q388 -188 436 -188T506 -189Q679 -189 778 -162T936 -43Q946 -27 959 6H999L913 -249L489 -250Q65 -250 62 -248Q56 -246 56 -239Q56 -234 118 -161Q186 -81 245 -11L428 206Q428 207 242 462L57 717L56 728Q56 744 61 748Z"></path></g><g data-mml-node="mi" transform="translate(1089,477.1) scale(0.707)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1089,-285.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(485,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1263,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mi" transform="translate(2552.3,0)"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"></path></g><g data-mml-node="mo" transform="translate(3319.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(3708.3,0)"><g data-mml-node="mi"><path data-c="1D464" d="M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z"></path></g><g data-mml-node="mi" transform="translate(749,-150) scale(0.707)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g><g data-mml-node="msup" transform="translate(4850.2,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="TeXAtom" transform="translate(422,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g></g></g></g><rect width="5974.8" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p><p>alphaはgensimのデフォルトパラメータだと0.75です。αは1だと元の分布そのままで、小さくなるほどレアなサンプルを重視するようになります。今回はalpha=0.75で統一しました。</p><h3 id="nDCG"><a href="#nDCG" class="headerlink" title="nDCG"></a>nDCG</h3><p>今回の評価指標はnormalized Discounted Cumulative Gain(nDCG)によって行います。nDCGは検索やレコメンド等でよく使われるランキング手法で、理想的な順位付けにどれくらい近い結果が出せたかをランキングの下位ほど重みを小さくしながら計算します。<br>具体的な計算式は以下の通りです。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="12.966ex" height="1.998ex" role="img" focusable="false" viewBox="0 -725.5 5731 883.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="msub" transform="translate(917,0)"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="TeXAtom" transform="translate(331,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1819.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(2875.5,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(484,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></g><g data-mml-node="mo" transform="translate(4230.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(5231,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.819ex" xmlns="http://www.w3.org/2000/svg" width="28.145ex" height="6.757ex" role="img" focusable="false" viewBox="0 -1740.7 12440.3 2986.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(1588,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2374,0)"><g data-mml-node="mo"><path data-c="40" d="M56 347Q56 429 86 498T164 612T270 680T386 705Q522 705 622 603T722 349Q722 126 608 126Q541 126 513 176Q512 177 512 179T510 182L509 183Q508 183 503 177T487 163T464 146T429 132T385 126Q311 126 251 186T190 347Q190 448 251 508T385 568Q426 568 460 548T509 511T531 479H555Q580 479 582 478Q586 477 587 468Q588 454 588 338V260Q588 200 593 182T619 163Q641 163 655 178T674 223T680 273T682 325V330Q682 426 647 500Q611 569 544 618T388 668Q271 668 184 577T96 347Q96 216 180 121T396 26Q421 26 446 28T493 34T535 43T573 52T605 63T629 72T647 80T657 84H716Q722 78 722 74Q722 65 675 45T547 7T392 -11Q255 -11 156 90T56 347ZM274 347Q274 266 308 214T390 162Q420 162 449 182T498 235L504 245V449L498 459Q453 532 387 532Q347 532 311 483T274 347Z"></path></g></g><g data-mml-node="mi" transform="translate(3152,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(3950.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(5006.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5457.6,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="msub" transform="translate(5923.6,0)"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="TeXAtom" transform="translate(331,-176.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">１</text></g></g></g><g data-mml-node="mo" transform="translate(7163.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="munderover" transform="translate(8163.4,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mi" transform="translate(537.8,1150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mfrac" transform="translate(9774.1,0)"><g data-mml-node="mrow" transform="translate(562.1,676)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(451,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="msub" transform="translate(917,0)"><g data-mml-node="mi"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="TeXAtom" transform="translate(331,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(278,0)"></path><path data-c="67" d="M329 409Q373 453 429 453Q459 453 472 434T485 396Q485 382 476 371T449 360Q416 360 412 390Q410 404 415 411Q415 412 416 414V415Q388 412 363 393Q355 388 355 386Q355 385 359 381T368 369T379 351T388 325T392 292Q392 230 343 187T222 143Q172 143 123 171Q112 153 112 133Q112 98 138 81Q147 75 155 75T227 73Q311 72 335 67Q396 58 431 26Q470 -13 470 -72Q470 -139 392 -175Q332 -206 250 -206Q167 -206 107 -175Q29 -140 29 -75Q29 -39 50 -15T92 18L103 24Q67 55 67 108Q67 155 96 193Q52 237 52 292Q52 355 102 398T223 442Q274 442 318 416L329 409ZM299 343Q294 371 273 387T221 404Q192 404 171 388T145 343Q142 326 142 292Q142 248 149 227T179 192Q196 182 222 182Q244 182 260 189T283 207T294 227T299 242Q302 258 302 292T299 343ZM403 -75Q403 -50 389 -34T348 -11T299 -2T245 0H218Q151 0 138 -6Q118 -15 107 -34T95 -74Q95 -84 101 -97T122 -127T170 -155T250 -167Q319 -167 361 -139T403 -75Z" transform="translate(778,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(1311,-241.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1714.6,0)"><path data-c="2061" d=""></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1881.2,0)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g><rect width="2426.2" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.219ex" xmlns="http://www.w3.org/2000/svg" width="27.345ex" height="5.344ex" role="img" focusable="false" viewBox="0 -1381 12086.5 2362"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(600,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(1428,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(2188,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2974,0)"><g data-mml-node="mo"><path data-c="40" d="M56 347Q56 429 86 498T164 612T270 680T386 705Q522 705 622 603T722 349Q722 126 608 126Q541 126 513 176Q512 177 512 179T510 182L509 183Q508 183 503 177T487 163T464 146T429 132T385 126Q311 126 251 186T190 347Q190 448 251 508T385 568Q426 568 460 548T509 511T531 479H555Q580 479 582 478Q586 477 587 468Q588 454 588 338V260Q588 200 593 182T619 163Q641 163 655 178T674 223T680 273T682 325V330Q682 426 647 500Q611 569 544 618T388 668Q271 668 184 577T96 347Q96 216 180 121T396 26Q421 26 446 28T493 34T535 43T573 52T605 63T629 72T647 80T657 84H716Q722 78 722 74Q722 65 675 45T547 7T392 -11Q255 -11 156 90T56 347ZM274 347Q274 266 308 214T390 162Q420 162 449 182T498 235L504 245V449L498 459Q453 532 387 532Q347 532 311 483T274 347Z"></path></g></g><g data-mml-node="mi" transform="translate(3752,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(4550.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(5606.6,0)"><g data-mml-node="mrow" transform="translate(1403.5,676)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(1588,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2374,0)"><g data-mml-node="mo"><path data-c="40" d="M56 347Q56 429 86 498T164 612T270 680T386 705Q522 705 622 603T722 349Q722 126 608 126Q541 126 513 176Q512 177 512 179T510 182L509 183Q508 183 503 177T487 163T464 146T429 132T385 126Q311 126 251 186T190 347Q190 448 251 508T385 568Q426 568 460 548T509 511T531 479H555Q580 479 582 478Q586 477 587 468Q588 454 588 338V260Q588 200 593 182T619 163Q641 163 655 178T674 223T680 273T682 325V330Q682 426 647 500Q611 569 544 618T388 668Q271 668 184 577T96 347Q96 216 180 121T396 26Q421 26 446 28T493 34T535 43T573 52T605 63T629 72T647 80T657 84H716Q722 78 722 74Q722 65 675 45T547 7T392 -11Q255 -11 156 90T56 347ZM274 347Q274 266 308 214T390 162Q420 162 449 182T498 235L504 245V449L498 459Q453 532 387 532Q347 532 311 483T274 347Z"></path></g></g><g data-mml-node="mi" transform="translate(3152,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-686)"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g><g data-mml-node="mi" transform="translate(828,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(1588,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2374,0)"><g data-mml-node="mo"><path data-c="40" d="M56 347Q56 429 86 498T164 612T270 680T386 705Q522 705 622 603T722 349Q722 126 608 126Q541 126 513 176Q512 177 512 179T510 182L509 183Q508 183 503 177T487 163T464 146T429 132T385 126Q311 126 251 186T190 347Q190 448 251 508T385 568Q426 568 460 548T509 511T531 479H555Q580 479 582 478Q586 477 587 468Q588 454 588 338V260Q588 200 593 182T619 163Q641 163 655 178T674 223T680 273T682 325V330Q682 426 647 500Q611 569 544 618T388 668Q271 668 184 577T96 347Q96 216 180 121T396 26Q421 26 446 28T493 34T535 43T573 52T605 63T629 72T647 80T657 84H716Q722 78 722 74Q722 65 675 45T547 7T392 -11Q255 -11 156 90T56 347ZM274 347Q274 266 308 214T390 162Q420 162 449 182T498 235L504 245V449L498 459Q453 532 387 532Q347 532 311 483T274 347Z"></path></g></g><g data-mml-node="msub" transform="translate(3152,0)"><g data-mml-node="mi"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="TeXAtom" transform="translate(554,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(969,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1420,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(1970,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(2436,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(2869,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></g><rect width="6240" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p><p>relは関連度で、今回は薬効分類番号が何段階一致しているかで計算します。relの最大はすべて一致している時で2^4-1=15、最小は全て一致していない時で0です。DCGはすべての組み合わせで計算することは計算時間的に困難なため、ランキングの上位K個で評価します。今回はK=100のnDCG@100で計算しました。</p><h2 id="コード"><a href="#コード" class="headerlink" title="コード"></a>コード</h2><h3 id="ライブラリの読み込みとデータセットの読み込み"><a href="#ライブラリの読み込みとデータセットの読み込み" class="headerlink" title="ライブラリの読み込みとデータセットの読み込み"></a>ライブラリの読み込みとデータセットの読み込み</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> groupby</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> shuffle</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tqdm.notebook <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># csvの読み込み</span></span><br><span class="line">demo_df = pd.read_csv(<span class="string">"../input/pmdacasereport202107/demo202107.csv"</span>, encoding=<span class="string">"cp932"</span>)</span><br><span class="line">drug_df = pd.read_csv(<span class="string">"../input/pmdacasereport202107/drug202107.csv"</span>, encoding=<span class="string">"cp932"</span>)</span><br><span class="line">hist_df = pd.read_csv(<span class="string">"../input/pmdacasereport202107/hist202107.csv"</span>, encoding=<span class="string">"cp932"</span>)</span><br><span class="line">reac_df = pd.read_csv(<span class="string">"../input/pmdacasereport202107/reac202107.csv"</span>, encoding=<span class="string">"cp932"</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="データセットの用意"><a href="#データセットの用意" class="headerlink" title="データセットの用意"></a>データセットの用意</h3><p>今回はgensimによる実装とtensorflowによる実装を行います。gensimは各単語を文字列で、tensorflowではidに変換した上で用意する必要があります。ただしgensimは自然言語処理用に作られているライブラリなので、今回のように語順の関係ないデータを食わせる場合は事前にshuffleするといった工夫が必要です。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一つの症例に対し重複した有害事象を除く</span></span><br><span class="line">unique_reac_df = reac_df.drop_duplicates([<span class="string">"識別番号"</span>, <span class="string">"有害事象"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一つの症例に対し被疑薬のみに絞り医薬品の重複を除く</span></span><br><span class="line">unique_drug_df = drug_df.sort_values(by=[<span class="string">"識別番号"</span>, <span class="string">"医薬品の関与"</span>], ascending=[<span class="literal">True</span>, <span class="literal">False</span>]).drop_duplicates([<span class="string">"識別番号"</span>, <span class="string">"医薬品（一般名）"</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一つの症例に対し重複した有害事象を除く</span></span><br><span class="line">unique_hist_df = hist_df.drop_duplicates([<span class="string">"識別番号"</span>, <span class="string">"原疾患等"</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1-indexed でidを付与</span></span><br><span class="line">drug_map_df = pd.DataFrame([{<span class="string">"drug_id"</span>: i, <span class="string">"医薬品（一般名）"</span>: k} <span class="keyword">for</span> i, k <span class="keyword">in</span> <span class="built_in">enumerate</span>(unique_drug_df[<span class="string">"医薬品（一般名）"</span>].unique(), start=<span class="number">1</span>)])</span><br><span class="line">reac_map_df = pd.DataFrame([{<span class="string">"reac_id"</span>: i, <span class="string">"有害事象"</span>: k} <span class="keyword">for</span> i, k <span class="keyword">in</span> <span class="built_in">enumerate</span>(unique_reac_df[<span class="string">"有害事象"</span>].unique(), start=<span class="number">1</span>)])</span><br><span class="line">hist_map_df = pd.DataFrame([{<span class="string">"hist_id"</span>: i, <span class="string">"原疾患等"</span>: k} <span class="keyword">for</span> i, k <span class="keyword">in</span> <span class="built_in">enumerate</span>(unique_hist_df[<span class="string">"原疾患等"</span>].unique(), start=<span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line">drug_map_df[<span class="string">"common_id"</span>] = drug_map_df[<span class="string">"drug_id"</span>]</span><br><span class="line">reac_map_df[<span class="string">"common_id"</span>] = reac_map_df[<span class="string">"reac_id"</span>] - <span class="number">1</span> + drug_map_df[<span class="string">"common_id"</span>].<span class="built_in">max</span>()</span><br><span class="line">hist_map_df[<span class="string">"common_id"</span>] = hist_map_df[<span class="string">"hist_id"</span>] - <span class="number">1</span> + reac_map_df[<span class="string">"common_id"</span>].<span class="built_in">max</span>()</span><br><span class="line">common_id_size = hist_map_df[<span class="string">"common_id"</span>].<span class="built_in">max</span>()+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">drug_map = {k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">zip</span>(drug_map_df[<span class="string">"医薬品（一般名）"</span>], drug_map_df[<span class="string">"drug_id"</span>])}</span><br><span class="line">drug_map_r = {v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">zip</span>(drug_map_df[<span class="string">"医薬品（一般名）"</span>], drug_map_df[<span class="string">"drug_id"</span>])}</span><br><span class="line"></span><br><span class="line">reac_map = {k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">zip</span>(reac_map_df[<span class="string">"有害事象"</span>], reac_map_df[<span class="string">"reac_id"</span>])}</span><br><span class="line">reac_map_r = {v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">zip</span>(reac_map_df[<span class="string">"有害事象"</span>], reac_map_df[<span class="string">"reac_id"</span>])}</span><br><span class="line"></span><br><span class="line">hist_map = {k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">zip</span>(hist_map_df[<span class="string">"原疾患等"</span>], hist_map_df[<span class="string">"hist_id"</span>])}</span><br><span class="line">hist_map_r = {v: k <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">zip</span>(hist_map_df[<span class="string">"原疾患等"</span>], hist_map_df[<span class="string">"hist_id"</span>])}</span><br><span class="line"></span><br><span class="line"><span class="comment"># データセットの作成</span></span><br><span class="line">data_dic = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">type_dic = defaultdict(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## tensorflowに入れる用のデータ</span></span><br><span class="line">common_data = []</span><br><span class="line"></span><br><span class="line"><span class="comment">## gensimに入れる用のデータ</span></span><br><span class="line">drug_only_sentences = []</span><br><span class="line">triple_sentences = []</span><br><span class="line">triple_sentences_dic = defaultdict(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## negative sampling実装のためのデータ</span></span><br><span class="line">distribution = np.zeros(common_id_size)</span><br><span class="line"></span><br><span class="line">tmp_df = unique_drug_df.merge(drug_map_df, on=<span class="string">"医薬品（一般名）"</span>, how=<span class="string">"left"</span>)</span><br><span class="line">tmp_df = tmp_df.sort_values(by = <span class="string">"識別番号"</span>)[[<span class="string">"識別番号"</span>, <span class="string">"common_id"</span>, <span class="string">"医薬品（一般名）"</span>]]</span><br><span class="line"><span class="keyword">for</span> report_id, group <span class="keyword">in</span> tqdm(groupby(tmp_df.values, key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]), total=unique_drug_df[<span class="string">"識別番号"</span>].nunique()):</span><br><span class="line">    val = np.vstack(<span class="built_in">list</span>(group))</span><br><span class="line">    data_dic[report_id].extend(val[:, <span class="number">1</span>].tolist())</span><br><span class="line"></span><br><span class="line">    drug_only_sentences.append(val[:, <span class="number">2</span>].tolist())</span><br><span class="line">    triple_sentences_dic[report_id].extend(val[:, <span class="number">2</span>].tolist())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tmp_df = unique_reac_df.merge(reac_map_df, on=<span class="string">"有害事象"</span>, how=<span class="string">"left"</span>)</span><br><span class="line">tmp_df = tmp_df.sort_values(by = <span class="string">"識別番号"</span>)[[<span class="string">"識別番号"</span>, <span class="string">"common_id"</span>, <span class="string">"有害事象"</span>]]</span><br><span class="line"><span class="keyword">for</span> report_id, group <span class="keyword">in</span> tqdm(groupby(tmp_df.values, key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]), total=unique_reac_df[<span class="string">"識別番号"</span>].nunique()):</span><br><span class="line">    val = np.vstack(<span class="built_in">list</span>(group))</span><br><span class="line">    data_dic[report_id].extend(val[:, <span class="number">1</span>].tolist())</span><br><span class="line"></span><br><span class="line">    triple_sentences_dic[report_id].extend(val[:, <span class="number">2</span>].tolist())</span><br><span class="line"></span><br><span class="line">tmp_df = unique_hist_df.merge(hist_map_df, on=<span class="string">"原疾患等"</span>, how=<span class="string">"left"</span>)</span><br><span class="line">tmp_df = tmp_df.sort_values(by = <span class="string">"識別番号"</span>)[[<span class="string">"識別番号"</span>, <span class="string">"common_id"</span>, <span class="string">"原疾患等"</span>]]</span><br><span class="line"><span class="keyword">for</span> report_id, group <span class="keyword">in</span> tqdm(groupby(tmp_df.values, key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>]), total=unique_hist_df[<span class="string">"識別番号"</span>].nunique()):</span><br><span class="line">    val = np.vstack(<span class="built_in">list</span>(group))</span><br><span class="line">    data_dic[report_id].extend(val[:, <span class="number">1</span>].tolist())</span><br><span class="line"></span><br><span class="line">    triple_sentences_dic[report_id].extend(val[:, <span class="number">2</span>].tolist())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> report_id <span class="keyword">in</span> tqdm(data_dic.keys()):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data_dic[report_id]) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    data_ = data_dic[report_id]</span><br><span class="line">    type_ = type_dic[report_id]</span><br><span class="line">    ixs = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(data_)))</span><br><span class="line">    shuffle(ixs)</span><br><span class="line">    common_data.append([data_[ix] <span class="keyword">for</span> ix <span class="keyword">in</span> ixs])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> data_:</span><br><span class="line">        distribution[d] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> triple_sentences_dic.items():</span><br><span class="line">    shuffle(v)</span><br><span class="line">    triple_sentences.append(v)</span><br></pre></td></tr></table></figure><h3 id="評価指標の用意"><a href="#評価指標の用意" class="headerlink" title="評価指標の用意"></a>評価指標の用意</h3><p>nDCGの評価の為にデータを加工します。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"></span><br><span class="line"><span class="comment"># 評価用データセットの作成</span></span><br><span class="line"></span><br><span class="line">ippanmei_df = pd.read_csv(<span class="string">"../input/ippanmeishohoumaster/ippanmeishohoumaster_210618.csv"</span>, encoding=<span class="string">"cp932"</span>, header=<span class="number">2</span>).rename({<span class="string">"一般名コード"</span>: <span class="string">'薬価基準収載医薬品コード'</span>}, axis=<span class="number">1</span>)</span><br><span class="line">tp0_df = pd.read_csv(<span class="string">"../input/ippanmeishohoumaster/tp20210812-01_01.csv"</span>, encoding=<span class="string">"cp932"</span>)</span><br><span class="line">tp1_df = pd.read_csv(<span class="string">"../input/ippanmeishohoumaster/tp20210812-01_02.csv"</span>, encoding=<span class="string">"cp932"</span>)</span><br><span class="line">tp2_df = pd.read_csv(<span class="string">"../input/ippanmeishohoumaster/tp20210812-01_03.csv"</span>, encoding=<span class="string">"cp932"</span>)</span><br><span class="line">tp3_df = pd.read_csv(<span class="string">"../input/ippanmeishohoumaster/tp20210401-01_04.csv"</span>, encoding=<span class="string">"cp932"</span>)</span><br><span class="line">tp4_df = pd.read_csv(<span class="string">"../input/ippanmeishohoumaster/tp20210812-01_05.csv"</span>, encoding=<span class="string">"cp932"</span>)</span><br><span class="line">drug_code_df = pd.concat([tp0_df, tp1_df, tp2_df, tp3_df, tp4_df, ippanmei_df])</span><br><span class="line"></span><br><span class="line">drug_code_df[<span class="string">"code0"</span>] = drug_code_df[<span class="string">'薬価基準収載医薬品コード'</span>].<span class="built_in">str</span>.<span class="built_in">slice</span>(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">drug_code_df[<span class="string">"code1"</span>] = drug_code_df[<span class="string">'薬価基準収載医薬品コード'</span>].<span class="built_in">str</span>.<span class="built_in">slice</span>(<span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">drug_code_df[<span class="string">"code2"</span>] = drug_code_df[<span class="string">'薬価基準収載医薬品コード'</span>].<span class="built_in">str</span>.<span class="built_in">slice</span>(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">drug_code_df[<span class="string">"code3"</span>] = drug_code_df[<span class="string">'薬価基準収載医薬品コード'</span>].<span class="built_in">str</span>.<span class="built_in">slice</span>(<span class="number">0</span>, <span class="number">4</span>)</span><br><span class="line">drug_code_df = drug_code_df[[<span class="string">"成分名"</span>, <span class="string">"code0"</span>, <span class="string">"code1"</span>, <span class="string">"code2"</span>, <span class="string">"code3"</span>]].drop_duplicates([<span class="string">"成分名"</span>, <span class="string">"code3"</span>]).rename({<span class="string">"成分名"</span>: <span class="string">"医薬品（マージ）"</span>}, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">drug_count_df = unique_drug_df[<span class="string">"医薬品（一般名）"</span>].value_counts()\</span><br><span class="line">                                                  .reset_index()\</span><br><span class="line">                                                  .rename({<span class="string">"index"</span>: <span class="string">"医薬品（一般名）"</span>, <span class="string">"医薬品（一般名）"</span>: <span class="string">"count"</span>}, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正規化</span></span><br><span class="line">replace_dict = {<span class="string">"インスリン　ヒト"</span>: <span class="string">"インスリン ヒト"</span>, <span class="string">"（遺伝子組換え）"</span>: <span class="string">""</span>, <span class="string">"　"</span>: <span class="string">""</span>}</span><br><span class="line">zen = <span class="string">"！＂＃＄％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿｀&gt;？＠ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝～"</span></span><br><span class="line">han = zen.translate(<span class="built_in">str</span>.maketrans({<span class="built_in">chr</span>(<span class="number">0xFF01</span> + i): <span class="built_in">chr</span>(<span class="number">0x21</span> + i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">94</span>)}))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> z, h <span class="keyword">in</span> <span class="built_in">zip</span>(zen, han):</span><br><span class="line">    replace_dict[z] = h</span><br><span class="line"></span><br><span class="line">drug_count_df[<span class="string">"医薬品（マージ）"</span>] = drug_count_df[<span class="string">"医薬品（一般名）"</span>]</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> replace_dict.items():</span><br><span class="line">    drug_count_df[<span class="string">"医薬品（マージ）"</span>] = drug_count_df[<span class="string">"医薬品（マージ）"</span>].<span class="built_in">str</span>.replace(k, v)</span><br><span class="line">drug_count_df[<span class="string">"医薬品（マージ）"</span>] = drug_count_df[<span class="string">"医薬品（マージ）"</span>].apply(<span class="keyword">lambda</span> x: re.sub(<span class="string">r"\(.*?\)"</span>, <span class="string">""</span>, x).rstrip(<span class="string">" "</span>))</span><br><span class="line"></span><br><span class="line">drug_count_df = drug_count_df.merge(drug_map_df,</span><br><span class="line">                                    on=<span class="string">"医薬品（一般名）"</span>,</span><br><span class="line">                                    how=<span class="string">"left"</span>)</span><br><span class="line">drug_count_df = drug_count_df.merge(drug_code_df,</span><br><span class="line">                                    on=<span class="string">"医薬品（マージ）"</span>,</span><br><span class="line">                                    how=<span class="string">"left"</span>)</span><br><span class="line">drug_code_map_r = drug_count_df.groupby(<span class="string">"common_id"</span>).apply(<span class="keyword">lambda</span> x: x[<span class="string">"医薬品（一般名）"</span>].values[<span class="number">0</span>] + <span class="string">"【{}】"</span>.<span class="built_in">format</span>(<span class="string">","</span>.join(x[<span class="string">"code3"</span>].fillna(<span class="string">""</span>).astype(<span class="built_in">str</span>))))</span><br><span class="line"></span><br><span class="line">score_dict = {k: {} <span class="keyword">for</span> k <span class="keyword">in</span> drug_count_df[~drug_count_df[<span class="string">"code0"</span>].isna()][<span class="string">"drug_id"</span>].unique()}</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">for</span> g, df <span class="keyword">in</span> drug_count_df[~drug_count_df[<span class="string">"code0"</span>].isna()].groupby(<span class="string">f"code<span class="subst">{i}</span>"</span>):</span><br><span class="line">        <span class="keyword">for</span> a, b <span class="keyword">in</span> combinations(df[<span class="string">"drug_id"</span>].unique(), <span class="number">2</span>):</span><br><span class="line">            score_dict[a][b] = <span class="built_in">max</span>(score_dict[a].get(b, <span class="number">0</span>), i+<span class="number">1</span>)</span><br><span class="line">            score_dict[b][a] = <span class="built_in">max</span>(score_dict[b].get(a, <span class="number">0</span>), i+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">denominator = [<span class="number">1</span>] + [np.log2(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, top_k+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">dcg_perfect = {}</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> score_dict.items():</span><br><span class="line">    score = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> s, d <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="built_in">sorted</span>(v.values(), reverse=<span class="literal">True</span>)[:top_k], denominator):</span><br><span class="line">        score += (<span class="number">2</span>**s - <span class="number">1</span>) / d</span><br><span class="line">    dcg_perfect[k] = score</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_ndcg</span>(<span class="params">drug_embedding</span>):</span></span><br><span class="line">    exist_keys_list = <span class="built_in">sorted</span>(<span class="built_in">list</span>(score_dict.keys()))</span><br><span class="line">    predictions = np.take(exist_keys_list, np.argsort(-np.dot(drug_embedding[exist_keys_list], drug_embedding[exist_keys_list].T)))[:, <span class="number">1</span>:top_k+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    dcg = {}</span><br><span class="line">    <span class="keyword">for</span> k, pred <span class="keyword">in</span> <span class="built_in">zip</span>(exist_keys_list, predictions):</span><br><span class="line">        score = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> p, d <span class="keyword">in</span> <span class="built_in">zip</span>(pred, denominator):</span><br><span class="line">            score += (<span class="number">2</span>**(score_dict[k].get(p, <span class="number">0</span>)) - <span class="number">1</span>) / d</span><br><span class="line">        dcg[k] = score</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (pd.Series(dcg) / pd.Series(dcg_perfect)).mean()</span><br></pre></td></tr></table></figure><h3 id="メタデータの用意"><a href="#メタデータの用意" class="headerlink" title="メタデータの用意"></a>メタデータの用意</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"../input/fek/FEK_download.csv"</span>) <span class="keyword">as</span> f:</span><br><span class="line">    reader = csv.reader(f)</span><br><span class="line">    fek_df = pd.DataFrame([row[:<span class="number">3</span>] <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">list</span>(reader)[<span class="number">2</span>:]], columns=[<span class="string">"分類コード"</span>,<span class="string">"項目名"</span>,<span class="string">"本籍"</span>])</span><br><span class="line">fek_df[<span class="string">"分類コード87"</span>] = fek_df[<span class="string">"分類コード"</span>].apply(<span class="keyword">lambda</span> x: x[<span class="number">2</span>:] <span class="keyword">if</span> x[:<span class="number">2</span>] == <span class="string">"87"</span> <span class="keyword">else</span> <span class="string">""</span>)</span><br><span class="line">fek_df[<span class="string">"type"</span>] = <span class="string">"drug"</span></span><br><span class="line"></span><br><span class="line">dfs = []</span><br><span class="line">df = drug_map_df[[<span class="string">"common_id"</span>, <span class="string">"医薬品（一般名）"</span>]].rename({<span class="string">"医薬品（一般名）"</span>: <span class="string">"label"</span>}, axis=<span class="number">1</span>)</span><br><span class="line">df[<span class="string">"type"</span>] = <span class="string">"drug"</span></span><br><span class="line">dfs.append(df)</span><br><span class="line"></span><br><span class="line">df = reac_map_df[[<span class="string">"common_id"</span>, <span class="string">"有害事象"</span>]].rename({<span class="string">"有害事象"</span>: <span class="string">"label"</span>}, axis=<span class="number">1</span>)</span><br><span class="line">df[<span class="string">"type"</span>] = <span class="string">"reac"</span></span><br><span class="line">dfs.append(df)</span><br><span class="line"></span><br><span class="line">df = hist_map_df[[<span class="string">"common_id"</span>, <span class="string">"原疾患等"</span>]].rename({<span class="string">"原疾患等"</span>: <span class="string">"label"</span>}, axis=<span class="number">1</span>)</span><br><span class="line">df[<span class="string">"type"</span>] = <span class="string">"hist"</span></span><br><span class="line">dfs.append(df)</span><br><span class="line"></span><br><span class="line">meta_df = pd.concat(dfs).reset_index(drop=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正規化</span></span><br><span class="line">replace_dict = {<span class="string">"インスリン　ヒト"</span>: <span class="string">"インスリン ヒト"</span>, <span class="string">"（遺伝子組換え）"</span>: <span class="string">""</span>, <span class="string">"　"</span>: <span class="string">""</span>}</span><br><span class="line">zen = <span class="string">"！＂＃＄％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿｀&gt;？＠ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝～"</span></span><br><span class="line">han = zen.translate(<span class="built_in">str</span>.maketrans({<span class="built_in">chr</span>(<span class="number">0xFF01</span> + i): <span class="built_in">chr</span>(<span class="number">0x21</span> + i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">94</span>)}))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> z, h <span class="keyword">in</span> <span class="built_in">zip</span>(zen, han):</span><br><span class="line">    replace_dict[z] = h</span><br><span class="line"></span><br><span class="line">meta_df[<span class="string">"医薬品（マージ）"</span>] = meta_df[<span class="string">"label"</span>]</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> replace_dict.items():</span><br><span class="line">    meta_df[<span class="string">"医薬品（マージ）"</span>] = meta_df[<span class="string">"医薬品（マージ）"</span>].<span class="built_in">str</span>.replace(k, v)</span><br><span class="line">meta_df[<span class="string">"医薬品（マージ）"</span>] = meta_df[<span class="string">"医薬品（マージ）"</span>].apply(<span class="keyword">lambda</span> x: re.sub(<span class="string">r"\(.*?\)"</span>, <span class="string">""</span>, x).rstrip(<span class="string">" "</span>))</span><br><span class="line"></span><br><span class="line">drug_code_df[<span class="string">"type"</span>] = <span class="string">"drug"</span></span><br><span class="line">meta_df = meta_df.merge(drug_code_df,</span><br><span class="line">                        on=[<span class="string">"医薬品（マージ）"</span>, <span class="string">"type"</span>],</span><br><span class="line">                        how=<span class="string">"left"</span>)</span><br><span class="line"><span class="keyword">del</span> meta_df[<span class="string">"医薬品（マージ）"</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    meta_df = meta_df.merge(fek_df[[<span class="string">"分類コード87"</span>, <span class="string">"項目名"</span>, <span class="string">"type"</span>]].rename({<span class="string">"分類コード87"</span>: <span class="string">f"code<span class="subst">{i}</span>"</span>, <span class="string">"項目名"</span>: <span class="string">f"name<span class="subst">{i}</span>"</span>}, axis=<span class="number">1</span>),</span><br><span class="line">                            on=[<span class="string">f"code<span class="subst">{i}</span>"</span>, <span class="string">"type"</span>],</span><br><span class="line">                            how=<span class="string">"left"</span>)</span><br><span class="line"></span><br><span class="line">meta_df[<span class="string">"type_label"</span>] = <span class="string">"【"</span> + meta_df[<span class="string">"type"</span>] + <span class="string">"】 "</span> + meta_df[<span class="string">"label"</span>]</span><br></pre></td></tr></table></figure><h3 id="tensorflow用モジュールの実装"><a href="#tensorflow用モジュールの実装" class="headerlink" title="tensorflow用モジュールの実装"></a>tensorflow用モジュールの実装</h3><h4 id="Samplerの実装"><a href="#Samplerの実装" class="headerlink" title="Samplerの実装"></a>Samplerの実装</h4><p>Tensorflowの学習用のデータを作成するsamplerを実装します。正例は以下の様に実装します。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OneVsOtherSampler</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, data, window=<span class="number">5</span>, batch_size=<span class="number">2</span>**<span class="number">13</span></span>):</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.window = window</span><br><span class="line">        self.batch_size = batch_size</span><br><span class="line"></span><br><span class="line">        ixs = []</span><br><span class="line">        <span class="keyword">for</span> i, d <span class="keyword">in</span> <span class="built_in">enumerate</span>(data):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(d)):</span><br><span class="line">                ixs.append([i, j])</span><br><span class="line">        self.ixs = np.vstack(ixs)</span><br><span class="line"></span><br><span class="line">        self.size = <span class="built_in">len</span>(ixs)</span><br><span class="line">        self.step = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stream</span>(<span class="params">self</span>):</span></span><br><span class="line">        X = []</span><br><span class="line">        y = []</span><br><span class="line">        orders = np.arange(self.size)</span><br><span class="line">        np.random.shuffle(orders)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> step, order <span class="keyword">in</span> <span class="built_in">enumerate</span>(orders):</span><br><span class="line">            self.step = step</span><br><span class="line">            ix = self.ixs[order]</span><br><span class="line"></span><br><span class="line">            tmp = self.data[ix[<span class="number">0</span>]][<span class="built_in">max</span>(<span class="number">0</span>, ix[<span class="number">1</span>]-self.window):ix[<span class="number">1</span>]] + self.data[ix[<span class="number">0</span>]][ix[<span class="number">1</span>]+<span class="number">1</span>:ix[<span class="number">1</span>] + <span class="number">1</span> + self.window]</span><br><span class="line">            X.append([<span class="number">0</span>] * (<span class="number">2</span> * self.window - <span class="built_in">len</span>(tmp)) + tmp)</span><br><span class="line">            y.append(self.data[ix[<span class="number">0</span>]][ix[<span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(X) == self.batch_size:</span><br><span class="line">                <span class="keyword">yield</span> X, y</span><br><span class="line">                X = []</span><br><span class="line">                y = []</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h4 id="negative-sampler"><a href="#negative-sampler" class="headerlink" title="negative sampler"></a>negative sampler</h4><p>負例は与えられた分布を元に二分探索を用いながらサンプリングします。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> sample</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NegativeSampler</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, distribution, num_negatives=<span class="number">5</span>, alpha=<span class="number">3</span>/<span class="number">4</span></span>):</span></span><br><span class="line">        self.num_negatives = num_negatives</span><br><span class="line"></span><br><span class="line">        self.alpha = alpha</span><br><span class="line">        distribution = np.array(distribution)  / <span class="built_in">sum</span>(distribution)</span><br><span class="line">        self.distribution = np.where(distribution == <span class="number">0</span>, <span class="number">0</span>, np.power(distribution, self.alpha))</span><br><span class="line">        self.cumsum_distribution = np.cumsum(self.distribution) / np.<span class="built_in">sum</span>(self.distribution)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sample</span>(<span class="params">self, y</span>):</span></span><br><span class="line">        <span class="keyword">return</span> np.searchsorted(self.cumsum_distribution, np.random.random((<span class="built_in">len</span>(y), self.num_negatives)))</span><br></pre></td></tr></table></figure><h4 id="model"><a href="#model" class="headerlink" title="model"></a>model</h4><p>embeddingの抽出部分とCBOWの部分を分離します。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmbeddingModel</span>(<span class="params">tf.keras.Model</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, emb_size, emb_dim</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(EmbeddingModel, self).__init__()</span><br><span class="line">        self.embedding_layer = tf.keras.layers.Embedding(emb_size, emb_dim, mask_zero=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self, X</span>):</span></span><br><span class="line">        X = self.embedding_layer(X)</span><br><span class="line">        <span class="keyword">return</span> X</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StandardModel</span>(<span class="params">tf.keras.Model</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, query_model, target_model</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(StandardModel, self).__init__()</span><br><span class="line">        self.query_model = query_model</span><br><span class="line">        self.query_pool = tf.keras.layers.GlobalAveragePooling1D()</span><br><span class="line">        self.target_model = target_model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self, X, y, target, X_exist_mask, target_mask, training=<span class="literal">False</span></span>):</span></span><br><span class="line">        X = self.query_model(X)</span><br><span class="line">        X = self.query_pool(X, X_exist_mask)</span><br><span class="line">        X = tf.expand_dims(X, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        W = self.target_model(y)</span><br><span class="line"></span><br><span class="line">        pred = tf.reduce_sum(X*W, axis=-<span class="number">1</span>)</span><br><span class="line">        pred = tf.where(target_mask, pred, -<span class="number">1e9</span>)</span><br><span class="line">        <span class="keyword">return</span> pred</span><br></pre></td></tr></table></figure><h4 id="gensim用学習コード"><a href="#gensim用学習コード" class="headerlink" title="gensim用学習コード"></a>gensim用学習コード</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> word2vec</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_gensim</span>(<span class="params">sentences</span>):</span></span><br><span class="line">    logging.basicConfig(<span class="built_in">format</span>=<span class="string">'%(asctime)s : %(levelname)s : %(message)s'</span>, level=logging.INFO)</span><br><span class="line"></span><br><span class="line">    model = word2vec.Word2Vec(vector_size=<span class="number">128</span>, min_count=<span class="number">1</span>, window=<span class="number">15</span>, workers=<span class="number">6</span>, negative=<span class="number">15</span>)</span><br><span class="line">    model.build_vocab(sentences, progress_per=<span class="number">10000</span>)</span><br><span class="line">    model.train(sentences, total_examples=model.corpus_count, epochs=<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><h4 id="tensorflow用学習用コード"><a href="#tensorflow用学習用コード" class="headerlink" title="tensorflow用学習用コード"></a>tensorflow用学習用コード</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> adabelief_tf <span class="keyword">import</span> AdaBeliefOptimizer</span><br><span class="line">emb_dim = <span class="number">128</span></span><br><span class="line">batch_size = <span class="number">2</span>**<span class="number">13</span></span><br><span class="line">num_negatives = <span class="number">15</span></span><br><span class="line"></span><br><span class="line">sampler = OneVsOtherSampler(common_data, window=<span class="number">15</span>, batch_size=batch_size)</span><br><span class="line">negative_sampler = NegativeSampler(distribution,</span><br><span class="line">                                   num_negatives=num_negatives)</span><br><span class="line"></span><br><span class="line"><span class="comment"># inputとprojectionで重みを共有</span></span><br><span class="line">common_model = EmbeddingModel(common_id_size, emb_dim)</span><br><span class="line">standard_model = StandardModel(common_model, common_model)</span><br><span class="line"></span><br><span class="line">loss_object = tf.keras.losses.CategoricalCrossentropy(from_logits=<span class="literal">True</span>)</span><br><span class="line">optimizer = AdaBeliefOptimizer(learning_rate=<span class="number">.02</span>, weight_decay=<span class="number">0.</span>, epsilon=<span class="number">1e-14</span>, print_change_log = <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">train_loss = tf.keras.metrics.Mean(name=<span class="string">'train_loss'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preprocess</span>(<span class="params">X, y</span>):</span></span><br><span class="line">    X = tf.keras.preprocessing.sequence.pad_sequences(X, dtype=<span class="string">"int32"</span>, value=<span class="number">0</span>, padding=<span class="string">"pre"</span>)</span><br><span class="line"></span><br><span class="line">    y_neg = tf.constant(negative_sampler.sample(y), dtype=<span class="string">"int32"</span>)</span><br><span class="line">    y = np.hstack([np.array(y).reshape(-<span class="number">1</span>, <span class="number">1</span>), y_neg])</span><br><span class="line"></span><br><span class="line">    X_exist_mask = X &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    target = tf.concat([tf.ones((batch_size, <span class="number">1</span>)), tf.zeros((batch_size, num_negatives))], axis=<span class="number">1</span>)</span><br><span class="line">    target_mask = tf.concat([tf.ones((batch_size, <span class="number">1</span>), dtype=<span class="string">"bool"</span>),</span><br><span class="line">                             (y[:, [<span class="number">0</span>]] != y[:, <span class="number">1</span>:])], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> X, y, target, X_exist_mask, target_mask</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">forward_step</span>(<span class="params">X, y, target, X_exist_mask, target_mask</span>):</span></span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">        pred = model(X, y, target, X_exist_mask, target_mask, training=<span class="literal">True</span>)</span><br><span class="line">        loss = loss_object(target, pred)</span><br><span class="line">    gradients = tape.gradient(loss, model.trainable_variables)</span><br><span class="line">    <span class="keyword">return</span> pred, loss, gradients</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function(<span class="params">experimental_relax_shapes=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apply_gradients</span>(<span class="params">gradients</span>):</span></span><br><span class="line">    optimizer.apply_gradients(<span class="built_in">zip</span>(gradients, model.trainable_variables))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tqdm(total=<span class="number">2</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        gradients_list = []</span><br><span class="line">        <span class="keyword">for</span> X, y <span class="keyword">in</span> sampler.stream():</span><br><span class="line">            pred, loss, gradients = forward_step(*preprocess(X, y))</span><br><span class="line">            apply_gradients(gradients)</span><br><span class="line"></span><br><span class="line">            train_loss(loss)</span><br><span class="line">            learning_text = <span class="string">"[{:.2f} %] "</span>.<span class="built_in">format</span>(<span class="number">100</span> * sampler.step / sampler.size)</span><br><span class="line">            progress_text = <span class="string">"train | Loss: {:.5f} "</span>.<span class="built_in">format</span>(train_loss.result())</span><br><span class="line">            pbar.set_postfix_str(learning_text + progress_text)</span><br><span class="line"></span><br><span class="line">        train_loss.reset_states()</span><br><span class="line">        pbar.update(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h1 id="実験と評価"><a href="#実験と評価" class="headerlink" title="実験と評価"></a>実験と評価</h1><h2 id="学習と定量評価"><a href="#学習と定量評価" class="headerlink" title="学習と定量評価"></a>学習と定量評価</h2><h3 id="実験1-医薬品の情報のみで学習-vs-医薬品-副作用-原疾患で学習"><a href="#実験1-医薬品の情報のみで学習-vs-医薬品-副作用-原疾患で学習" class="headerlink" title="実験1: 医薬品の情報のみで学習 vs 医薬品+副作用+原疾患で学習"></a>実験1: 医薬品の情報のみで学習 vs 医薬品+副作用+原疾患で学習</h3><p>まずはgensimを用いてデータセットに関する検討を行います。</p><p>word2vecについて医薬品の情報のみで学習させたものと副作用、原疾患の情報を加えて学習させたもので比較を行いました。</p><p>学習のパラメータについては以下のように設定し、後はgensimのデフォルトパラメータを用いました。</p><div class="scroll"><table><thead><tr><th align="right"></th><th align="left">パラメータ名</th><th align="right">値</th></tr></thead><tbody><tr><td align="right">0</td><td align="left">epoch</td><td align="right">10</td></tr><tr><td align="right">1</td><td align="left">vector_size</td><td align="right">128</td></tr><tr><td align="right">2</td><td align="left">min_count</td><td align="right">1</td></tr><tr><td align="right">3</td><td align="left">window</td><td align="right">15</td></tr><tr><td align="right">4</td><td align="left">workers</td><td align="right">6</td></tr><tr><td align="right">5</td><td align="left">negative</td><td align="right">15</td></tr></tbody></table></div><p>医薬品のベクトルについてコサイン類似度を用い近傍を取得し評価した結果、nDCG@10はそれぞれ以下のようになりました。</p><div class="scroll"><table><thead><tr><th align="right"></th><th align="left">モデル名</th><th align="right">nDCG@100</th></tr></thead><tbody><tr><td align="right">0</td><td align="left">gensim 医薬品のみ</td><td align="right">0.3883</td></tr><tr><td align="right">1</td><td align="left">gensim 副作用+原疾患あり</td><td align="right">0.4030</td></tr></tbody></table></div><p>医薬品の類似度を計算する場合でも、医薬品以外の情報も合わせて学習を行うことで精度が上がることが分かりました。</p><h3 id="実験2-医薬品-副作用-原疾患のデータについてTensorFlowで実装"><a href="#実験2-医薬品-副作用-原疾患のデータについてTensorFlowで実装" class="headerlink" title="実験2: 医薬品+副作用+原疾患のデータについてTensorFlowで実装"></a>実験2: 医薬品+副作用+原疾患のデータについてTensorFlowで実装</h3><p>上記の実験を元に、三種類のデータを用いてtensorflowで学習させたものと比較しました。<br>ただし、tensorflowでの学習はepoch数を2にし、batch sizeは8192にした上で、後のパラメータはgensimに揃えました。</p><p>結果は</p><div class="scroll"><table><thead><tr><th align="right"></th><th align="left">モデル名</th><th align="right">nDCG@100</th></tr></thead><tbody><tr><td align="right">2</td><td align="left">tensorflow 副作用+原疾患あり</td><td align="right">0.4191</td></tr></tbody></table></div><p>となり、TensorFlow実装の方が良いスコアとなりました。</p><h3 id="実験3-Tensorflowモデルのチューニング"><a href="#実験3-Tensorflowモデルのチューニング" class="headerlink" title="実験3: Tensorflowモデルのチューニング"></a>実験3: Tensorflowモデルのチューニング</h3><p>tensorflowモデルに以下の改善を行いました。</p><ul><li><a href="https://arxiv.org/abs/2010.01412">Sharpness-Aware Minimization</a>及び<a href="https://arxiv.org/pdf/2102.11600.pdf">Adaptive Sharpness-Aware Minimization</a>の実装</li><li>バッチサイズを8192 -&gt; 65536に変更(Gradient Accumulationを使用)</li><li>エポック数を2 -&gt; 20に変更</li><li>Warmup + Cosine Annealingによる学習率管理</li><li>Metric learningの追加(AdaCosベース独自実装)</li></ul><div class="scroll"><table><thead><tr><th align="right"></th><th align="left">モデル名</th><th align="right">nDCG@100</th></tr></thead><tbody><tr><td align="right">3</td><td align="left">nadare baseline</td><td align="right">0.4640</td></tr></tbody></table></div><p>自然言語以外に適用するWord2Vecにおいても、一般的な深層学習のテクニックが有効であることが分かりました。</p><h3 id="実験結果まとめ"><a href="#実験結果まとめ" class="headerlink" title="実験結果まとめ"></a>実験結果まとめ</h3><p>全ての結果をまとめるとこのようになります。</p><div class="scroll"><table><thead><tr><th align="right"></th><th align="left">モデル名</th><th align="right">nDCG@100</th></tr></thead><tbody><tr><td align="right">0</td><td align="left">gensim 医薬品のみ</td><td align="right">0.3883</td></tr><tr><td align="right">1</td><td align="left">gensim 副作用+原疾患あり</td><td align="right">0.4030</td></tr><tr><td align="right">2</td><td align="left">tensorflow 副作用+原疾患あり</td><td align="right">0.4191</td></tr><tr><td align="right">3</td><td align="left">nadare baseline</td><td align="right">0.4640</td></tr></tbody></table></div><p>これらの結果のうち、1番と3番についてembeddingの評価を行っていきます。</p><h2 id="類似ベクトルの確認と考察"><a href="#類似ベクトルの確認と考察" class="headerlink" title="類似ベクトルの確認と考察"></a>類似ベクトルの確認と考察</h2><p>出現数の多い医薬品のなかから薬効分類番号が一つのみ振られているものについて、薬効分類番号の上一桁が被らないよう出現数順に選び、コサイン類似度で近傍を取得しました。選んだ医薬品は以下になります。</p><div class="scroll"><table><thead><tr><th align="right"></th><th align="left">医薬品（一般名）</th><th align="right">薬効分類番号</th><th align="left">1</th><th align="left">2</th><th align="left">3</th><th align="left">4</th></tr></thead><tbody><tr><td align="right">20</td><td align="left">アセトアミノフェン</td><td align="right">1141</td><td align="left">神経系及び感覚器官用医薬品</td><td align="left">中枢神経系用薬</td><td align="left">解熱鎮痛消炎剤</td><td align="left">アニリン系製剤；メフェナム酸，フルフェナム酸等</td></tr><tr><td align="right">2</td><td align="left">アムロジピンベシル酸塩</td><td align="right">2171</td><td align="left">個々の器官系用医薬品</td><td align="left">循環器官用薬</td><td align="left">血管拡張剤</td><td align="left">冠血管拡張剤</td></tr><tr><td align="right">27</td><td align="left">アロプリノール</td><td align="right">3943</td><td align="left">代謝性医薬品</td><td align="left">その他の代謝性医薬品</td><td align="left">痛風治療剤</td><td align="left">アロプリノール製剤</td></tr><tr><td align="right">26</td><td align="left">フルオロウラシル</td><td align="right">4223</td><td align="left">組織細胞機能用医薬品</td><td align="left">腫瘍用薬</td><td align="left">代謝拮抗剤</td><td align="left">フルオロウラシル系製剤</td></tr><tr><td align="right">855</td><td align="left">五苓散</td><td align="right">5200</td><td align="left">生薬及び漢方処方に基づく医薬品</td><td align="left">漢方製剤</td><td align="left"></td><td align="left"></td></tr><tr><td align="right">57</td><td align="left">リバビリン</td><td align="right">6250</td><td align="left">病原生物に対する医薬品</td><td align="left">化学療法剤</td><td align="left">抗ウイルス剤</td><td align="left"></td></tr><tr><td align="right">213</td><td align="left">イオパミドール</td><td align="right">7219</td><td align="left">治療を主目的としない医薬品</td><td align="left">診断用薬（体外診断用医薬品を除く。）</td><td align="left">Ｘ線造影剤</td><td align="left">その他のＸ線造影剤</td></tr><tr><td align="right">93</td><td align="left">オキシコドン塩酸塩水和物</td><td align="right">8119</td><td align="left">麻薬</td><td align="left">アルカロイド系麻薬（天然麻薬）</td><td align="left">あへんアルカロイド系麻薬</td><td align="left">その他のあへんアルカロイド系麻薬</td></tr></tbody></table></div><h3 id="医薬品同士の類似度の確認"><a href="#医薬品同士の類似度の確認" class="headerlink" title="医薬品同士の類似度の確認"></a>医薬品同士の類似度の確認</h3><p>選んだ医薬品と類似した医薬品を探すため、コサイン類似度で近傍を取得しました。（【】内は薬効分類番号）</p><h4 id="gensim-副作用-原疾患あり"><a href="#gensim-副作用-原疾患あり" class="headerlink" title="gensim 副作用+原疾患あり"></a>gensim 副作用+原疾患あり</h4><div class="scroll"><table><thead><tr><th align="left">0</th><th align="left">1</th><th align="left">2</th><th align="left">3</th><th align="left">4</th><th align="left">5</th></tr></thead><tbody><tr><td align="left">アセトアミノフェン【1141】</td><td align="left">ロキソプロフェンナトリウム水和物【1149,2649】</td><td align="left">炭酸水素ナトリウム・無水リン酸二水素ナトリウム【2359】</td><td align="left">アズレンスルホン酸ナトリウム水和物【2323,2260,2399】</td><td align="left">ペンブロリズマブ【】</td><td align="left">1141001【】</td></tr><tr><td align="left">アムロジピンベシル酸塩【2171】</td><td align="left">ニフェジピン【2171】</td><td align="left">ベニジピン塩酸塩【2171】</td><td align="left">シルニジピン【2149】</td><td align="left">アゼルニジピン【2149】</td><td align="left">エホニジピン塩酸塩エタノール付加物【2149】</td></tr><tr><td align="left">アロプリノール【3943】</td><td align="left">フェブキソスタット【3949】</td><td align="left">トピロキソスタット【3949】</td><td align="left">ベンズブロマロン【3949】</td><td align="left">痛風治療剤【】</td><td align="left">プロベネシド【3942】</td></tr><tr><td align="left">フルオロウラシル【4223】</td><td align="left">５－ＦＵ【】</td><td align="left">カペシタビン【4223】</td><td align="left">1181107【】</td><td align="left">テガフール・ギメラシル・オテラシルカリウム配合剤【4229】</td><td align="left">５－Ｆ【】</td></tr><tr><td align="left">五苓散【5200】</td><td align="left">桂枝茯苓丸【】</td><td align="left">当帰芍薬散【】</td><td align="left">真武湯【】</td><td align="left">半夏厚朴湯【】</td><td align="left">柴胡桂枝湯【】</td></tr><tr><td align="left">リバビリン【6250】</td><td align="left">レジパスビル　アセトン付加物・ソホスブビル【】</td><td align="left">ソラフェニブ【】</td><td align="left">ribavirin【】</td><td align="left">グレカプレビル水和物・ピブレンタスビル【6250】</td><td align="left">prednisolone valerate acetate【】</td></tr><tr><td align="left">イオパミドール【7219】</td><td align="left">イオヘキソール【7219】</td><td align="left">イオメプロール【7219】</td><td align="left">イオベルソール【7219】</td><td align="left">イオプロミド【7219】</td><td align="left">ガドブトロール【7290】</td></tr><tr><td align="left">オキシコドン塩酸塩水和物【8119】</td><td align="left">モルヒネ硫酸塩水和物【8114】</td><td align="left">トラマドール塩酸塩【1149】</td><td align="left">ヒドロモルフォン塩酸塩【8119】</td><td align="left">フェンタニル【8219】</td><td align="left">モルヒネ塩酸塩水和物【8114】</td></tr></tbody></table></div><h4 id="nadare-baseline"><a href="#nadare-baseline" class="headerlink" title="nadare baseline"></a>nadare baseline</h4><div class="scroll"><table><thead><tr><th align="left">0</th><th align="left">1</th><th align="left">2</th><th align="left">3</th><th align="left">4</th><th align="left">5</th></tr></thead><tbody><tr><td align="left">アセトアミノフェン【1141】</td><td align="left">ロキソプロフェンナトリウム水和物【1149,2649】</td><td align="left">UNKNOWNDUG【】</td><td align="left">セフカペン　ピボキシル塩酸塩水和物【】</td><td align="left">麻黄湯【】</td><td align="left">ラニナミビルオクタン酸エステル水和物【6250】</td></tr><tr><td align="left">アムロジピンベシル酸塩【2171】</td><td align="left">カンデサルタン　シレキセチル【2149】</td><td align="left">バルサルタン【2149】</td><td align="left">オルメサルタン　メドキソミル【2149】</td><td align="left">ニフェジピン【2171】</td><td align="left">テルミサルタン【2149】</td></tr><tr><td align="left">アロプリノール【3943】</td><td align="left">クエン酸カリウム・クエン酸ナトリウム水和物【3949】</td><td align="left">ベンズブロマロン【3949】</td><td align="left">球形吸着炭【3929】</td><td align="left">プロベネシド【3942】</td><td align="left">中枢神経系用薬【】</td></tr><tr><td align="left">フルオロウラシル【4223】</td><td align="left">レボホリナートカルシウム【3929】</td><td align="left">オキサリプラチン【4291】</td><td align="left">イリノテカン塩酸塩水和物【4240】</td><td align="left">アフリベルセプト　ベータ（遺伝子組換え）【】</td><td align="left">パニツムマブ（遺伝子組換え）【】</td></tr><tr><td align="left">五苓散【5200】</td><td align="left">真武湯【】</td><td align="left">柴苓湯【】</td><td align="left">桂枝茯苓丸【】</td><td align="left">補中益気湯【】</td><td align="left">人参養栄湯【】</td></tr><tr><td align="left">リバビリン【6250】</td><td align="left">ペグインターフェロン　アルファ－２ｂ（遺伝子組換え）【】</td><td align="left">シメプレビルナトリウム【】</td><td align="left">テラプレビル【】</td><td align="left">ペグインターフェロン　アルファ－２ａ（遺伝子組換え）【】</td><td align="left">ソホスブビル【6250】</td></tr><tr><td align="left">イオパミドール【7219】</td><td align="left">イオメプロール【7219】</td><td align="left">イオヘキソール【7219】</td><td align="left">イオベルソール【7219】</td><td align="left">イオプロミド【7219】</td><td align="left">アミノ安息香酸エチル・パラブチルアミノ安息香酸ジエチルアミノエチル塩酸塩【2710】</td></tr><tr><td align="left">オキシコドン塩酸塩水和物【8119】</td><td align="left">プロクロルペラジンマレイン酸塩【1172】</td><td align="left">モルヒネ硫酸塩水和物【8114】</td><td align="left">フェンタニル【8219】</td><td align="left">モルヒネ塩酸塩水和物【8114】</td><td align="left">ナルデメジントシル酸塩【2359】</td></tr></tbody></table></div><h4 id="考察"><a href="#考察" class="headerlink" title="考察"></a>考察</h4><p>医薬品間の類似度については、薬効分類番号から分かるように類似した薬物が取れています。薬効分類番号が異なるのに上位に来ている薬物、例えばフルオロウラシルとレボホリナートカルシウムについてですが、レボホリナートカルシウムにはフルオラシルと併用することで抗腫瘍効果を高める効果があるそうです。他にも目視で結果を確認したところ、多剤併用療法が用いられる医薬品については薬効分類番号が近くない場合でも上位に類似した医薬品が現れる傾向が確認できました。</p><h3 id="医薬品-原疾患の類似度の確認"><a href="#医薬品-原疾患の類似度の確認" class="headerlink" title="医薬品-原疾患の類似度の確認"></a>医薬品-原疾患の類似度の確認</h3><p>医薬品と原疾患のベクトルについてコサイン類似度で近傍を取得しました。</p><h4 id="gensim-副作用-原疾患あり-1"><a href="#gensim-副作用-原疾患あり-1" class="headerlink" title="gensim 副作用+原疾患あり"></a>gensim 副作用+原疾患あり</h4><div class="scroll"><table><thead><tr><th align="left"></th><th align="left">0</th><th align="left">1</th><th align="left">2</th><th align="left">3</th><th align="left">4</th></tr></thead><tbody><tr><td align="left">アセトアミノフェン</td><td align="left">過敏症</td><td align="left">脾臓辺縁帯リンパ腫第３期</td><td align="left">回復期患者</td><td align="left">ドーパ反応性ジストニア</td><td align="left">矮小腎</td></tr><tr><td align="left">アムロジピンベシル酸塩</td><td align="left">視床出血</td><td align="left">一過性脳虚血発作</td><td align="left">腫瘍随伴性ネフローゼ症候群</td><td align="left">脳幹出血</td><td align="left">拡張期血圧低下</td></tr><tr><td align="left">アロプリノール</td><td align="left">尿毒症性アシドーシス</td><td align="left">高血圧</td><td align="left">酸素消費量</td><td align="left">高カリウム血症</td><td align="left">腎硬化症</td></tr><tr><td align="left">フルオロウラシル</td><td align="left">子宮頚部癌第４期</td><td align="left">好中球減少性感染</td><td align="left">遠隔転移を伴う肝癌</td><td align="left">腹膜転移</td><td align="left">遠隔転移を伴う肛門癌</td></tr><tr><td align="left">五苓散</td><td align="left">補充現象</td><td align="left">偽アルドステロン症</td><td align="left">硬膜下血腫除去</td><td align="left">閉経期症状</td><td align="left">中毒性皮疹</td></tr><tr><td align="left">リバビリン</td><td align="left">肝炎ウイルス関連腎症</td><td align="left">Ｂ型肝炎ｅ抗原陰性</td><td align="left">Ｂ型肝炎ｅ抗原陽性</td><td align="left">耳管炎</td><td align="left">予防</td></tr><tr><td align="left">イオパミドール</td><td align="left">ヘパリン中和療法</td><td align="left">過期産児</td><td align="left">腎病変部切除</td><td align="left">アルコールによる宿酔</td><td align="left">橈骨動脈脈拍異常</td></tr><tr><td align="left">オキシコドン塩酸塩水和物</td><td align="left">癌疼痛</td><td align="left">腫瘍熱</td><td align="left">免疫性腸炎</td><td align="left">肝転移</td><td align="left">中枢神経系転移</td></tr></tbody></table></div><h4 id="nadare-baseline-1"><a href="#nadare-baseline-1" class="headerlink" title="nadare baseline"></a>nadare baseline</h4><div class="scroll"><table><thead><tr><th align="left"></th><th align="left">0</th><th align="left">1</th><th align="left">2</th><th align="left">3</th><th align="left">4</th></tr></thead><tbody><tr><td align="left">アセトアミノフェン</td><td align="left">発熱</td><td align="left">口腔咽頭痛</td><td align="left">インフルエンザ</td><td align="left">上咽頭炎</td><td align="left">ウイルス感染</td></tr><tr><td align="left">アムロジピンベシル酸塩</td><td align="left">高血圧</td><td align="left">高脂血症</td><td align="left">糖尿病</td><td align="left">脳出血</td><td align="left">視床出血</td></tr><tr><td align="left">アロプリノール</td><td align="left">高尿酸血症</td><td align="left">痛風</td><td align="left">血中尿酸増加</td><td align="left">痛風性関節炎</td><td align="left">コケーン症候群</td></tr><tr><td align="left">フルオロウラシル</td><td align="left">再発直腸癌</td><td align="left">再発結腸癌</td><td align="left">食道扁平上皮癌</td><td align="left">遠隔転移を伴う直腸Ｓ状結腸癌</td><td align="left">肛門扁平上皮癌</td></tr><tr><td align="left">五苓散</td><td align="left">硬膜下血腫</td><td align="left">補充現象</td><td align="left">脛骨内側過労性症候群</td><td align="left">冷感</td><td align="left">頭蓋骨骨折</td></tr><tr><td align="left">リバビリン</td><td align="left">慢性Ｃ型肝炎</td><td align="left">ウイルス血症</td><td align="left">Ｃ型肝炎</td><td align="left">腟膿瘍</td><td align="left">Ｃ型肝炎ＲＮＡ陽性</td></tr><tr><td align="left">イオパミドール</td><td align="left">コンピュータ断層撮影</td><td align="left">肝新生物</td><td align="left">膵新生物</td><td align="left">大動脈造影</td><td align="left">尿路造影</td></tr><tr><td align="left">オキシコドン塩酸塩水和物</td><td align="left">癌疼痛</td><td align="left">骨転移</td><td align="left">腫瘍熱</td><td align="left">歯肉損傷</td><td align="left">骨痛</td></tr></tbody></table></div><h4 id="考察-1"><a href="#考察-1" class="headerlink" title="考察"></a>考察</h4><p>医薬品-原疾患との関係でも、定量評価におけるスコアがより高い後者の手法の方がより薬効分類の名称から推測できる原疾患に近いものが得られました。特にWord2Vecで学習した後近傍をとる場合、正規化を行わない内積では関連度が低く出現頻度の高いアイテムが、正規化を行った場合は類似度がたまたま高いマイナーなアイテムが出てしまうといった問題が起こるのですが、metric learningを用い学習中にコサイン類似度をもって学習を行った場合は、その医薬品に関連のある原疾患に加え、「発熱」・「高血圧」といったコーパス全体での出現頻度が高い原疾患も適切に上位に類似アイテムとして表示されました。</p><h3 id="医薬品-有害事象の類似度の確認"><a href="#医薬品-有害事象の類似度の確認" class="headerlink" title="医薬品-有害事象の類似度の確認"></a>医薬品-有害事象の類似度の確認</h3><p>医薬品と有害事象のベクトルについてコサイン類似度で近傍を取得しました。</p><h4 id="gensim-副作用-原疾患あり-2"><a href="#gensim-副作用-原疾患あり-2" class="headerlink" title="gensim 副作用+原疾患あり"></a>gensim 副作用+原疾患あり</h4><div class="scroll"><table><thead><tr><th align="left"></th><th align="left">0</th><th align="left">1</th><th align="left">2</th><th align="left">3</th><th align="left">4</th></tr></thead><tbody><tr><td align="left">アセトアミノフェン</td><td align="left">過敏症</td><td align="left">患者による企図的医療機器除去</td><td align="left">乏渇感症</td><td align="left">多形紅斑</td><td align="left">巨核球異常</td></tr><tr><td align="left">アムロジピンベシル酸塩</td><td align="left">スプルー様腸疾患</td><td align="left">視床出血</td><td align="left">一過性脳虚血発作</td><td align="left">脾臓スキャン異常</td><td align="left">脳幹出血</td></tr><tr><td align="left">アロプリノール</td><td align="left">高血圧</td><td align="left">中心性チアノーゼ</td><td align="left">高カリウム血症</td><td align="left">腎硬化症</td><td align="left">ＣＤ４リンパ球増加</td></tr><tr><td align="left">フルオロウラシル</td><td align="left">２型過敏症</td><td align="left">注射に伴う反応</td><td align="left">子宮頚部癌第４期</td><td align="left">好中球減少性感染</td><td align="left">遠隔転移を伴う肝癌</td></tr><tr><td align="left">五苓散</td><td align="left">偽アルドステロン症</td><td align="left">閉経期症状</td><td align="left">中毒性皮疹</td><td align="left">腸間膜静脈硬化症</td><td align="left">肝脾膿瘍</td></tr><tr><td align="left">リバビリン</td><td align="left">肝炎ウイルス関連腎症</td><td align="left">抗インターフェロン抗体陽性</td><td align="left">プロトロンビン量異常</td><td align="left">Ｃ型肝炎ＲＮＡ増加</td><td align="left">肝臓血管腫</td></tr><tr><td align="left">イオパミドール</td><td align="left">ヒスタミン濃度増加</td><td align="left">トリプターゼ増加</td><td align="left">立毛</td><td align="left">橈骨動脈脈拍異常</td><td align="left">血管拡張術</td></tr><tr><td align="left">オキシコドン塩酸塩水和物</td><td align="left">癌疼痛</td><td align="left">腫瘍熱</td><td align="left">免疫性腸炎</td><td align="left">肝転移</td><td align="left">中枢神経系転移</td></tr></tbody></table></div><h4 id="nadare-baseline-2"><a href="#nadare-baseline-2" class="headerlink" title="nadare baseline"></a>nadare baseline</h4><div class="scroll"><table><thead><tr><th align="left"></th><th align="left">0</th><th align="left">1</th><th align="left">2</th><th align="left">3</th><th align="left">4</th></tr></thead><tbody><tr><td align="left">アセトアミノフェン</td><td align="left">中毒性表皮壊死融解症</td><td align="left">スティーヴンス・ジョンソン症候群</td><td align="left">胆管消失症候群</td><td align="left">尿細管間質性腎炎</td><td align="left">皮膚粘膜眼症候群</td></tr><tr><td align="left">アムロジピンベシル酸塩</td><td align="left">血管内ガス</td><td align="left">肉芽腫性皮膚炎</td><td align="left">毛孔性紅色粃糠疹</td><td align="left">コントロール不良の血圧</td><td align="left">スプルー様腸疾患</td></tr><tr><td align="left">アロプリノール</td><td align="left">線維性心内膜炎</td><td align="left">痛風</td><td align="left">好酸球増加と全身症状を伴う薬物反応</td><td align="left">低亜鉛血症</td><td align="left">痛風性関節炎</td></tr><tr><td align="left">フルオロウラシル</td><td align="left">白血球減少症</td><td align="left">好中球減少症</td><td align="left">咽頭知覚不全</td><td align="left">埋込み部位離開</td><td align="left">閉塞性瘢痕ヘルニア</td></tr><tr><td align="left">五苓散</td><td align="left">高血圧切迫症</td><td align="left">多形日光疹</td><td align="left">偽アルドステロン症</td><td align="left">腸間膜静脈硬化症</td><td align="left">薬物性肝障害</td></tr><tr><td align="left">リバビリン</td><td align="left">網膜症</td><td align="left">陰嚢出血</td><td align="left">Ｂ細胞性前リンパ球性白血病</td><td align="left">パートナーの自然流産</td><td align="left">抑うつ症状</td></tr><tr><td align="left">イオパミドール</td><td align="left">造影剤アレルギー</td><td align="left">ショック</td><td align="left">アナフィラキシーショック</td><td align="left">アナフィラキシー様ショック</td><td align="left">くしゃみ</td></tr><tr><td align="left">オキシコドン塩酸塩水和物</td><td align="left">丘疹状蕁麻疹</td><td align="left">溢流性下痢</td><td align="left">譫妄</td><td align="left">逆説疼痛</td><td align="left">癌疼痛</td></tr></tbody></table></div><h4 id="考察-2"><a href="#考察-2" class="headerlink" title="考察"></a>考察</h4><p>医薬品-有害事象間でも後者の手法の方がより添付文章等で確認できる有害事象が現れていると考えられます。一方で、前者のオキシコドン塩酸塩水和物に対する癌疼痛や後者のアロプリノールに対する痛風は有害事象というよりは原疾患に見えます。これらの例についてはデータセット由来の問題か手法の問題化は検討する必要があります。</p><h3 id="類似ベクトルの確認のまとめ"><a href="#類似ベクトルの確認のまとめ" class="headerlink" title="類似ベクトルの確認のまとめ"></a>類似ベクトルの確認のまとめ</h3><p>薬効分類を用いて定量評価しスコアの高かった手法は、医薬品-医薬品の類似度に加え医薬品-原疾患や医薬品-有害事象間でも良い近傍を得られることが分かりました。この結果を踏まえ、最も評価の高かったnadare baselineについてEmbedding projectorによる可視化する方法を紹介します。</p><h1 id="Embedding-projectorによる可視化"><a href="#Embedding-projectorによる可視化" class="headerlink" title="Embedding projectorによる可視化"></a>Embedding projectorによる可視化</h1><p><a href="https://projector.tensorflow.org/">Embedding projector</a>はgoogleの開発するTensorBoardの機能の一つのEmbedding projectorのブラウザ版で、ベクトルとベクトルに関するメタデータを読み込むことでインタラクティブにベクトルの可視化を行うことができます。</p><p>今回はnadare baselineで学習させたベクトルを公開します。<br>次のリンクからEmbedding projectorのページに飛んでください。<a href="https://projector.tensorflow.org/?config=https://raw.githubusercontent.com/nadare881/jader_w2v_data/master/config.json">リンク</a></p><p>なお、これから下の図表は公開しているベクトルよりも古いバージョンでの結果のため、上記のリンクで得られる結果とは異なる場合があります。</p><p>読み込みに成功すると以下のようにベクトルの散布図が表示され、点にマウスオーバーするとそのベクトルの値が表示されます。<br><img src="/images/20210901a/読み込み成功.png" alt="読み込み成功.png" width="1200" height="580" loading="lazy"></p><p>そのままベクトルをクリックするとそのベクトルの近傍のベクトルが表示されます。<br><img src="/images/20210901a/総合感冒剤.png" alt="総合感冒剤.png" width="1200" height="589" loading="lazy"></p><h2 id="メタデータから検索する。"><a href="#メタデータから検索する。" class="headerlink" title="メタデータから検索する。"></a>メタデータから検索する。</h2><p>今回はメタデータとして以下のデータを用意しました。</p><div class="scroll"><table><thead><tr><th align="right"></th><th align="left">列名</th><th align="left">内容</th></tr></thead><tbody><tr><td align="right">0</td><td align="left">common_id</td><td align="left">drug-reac-hist全体でユニークなID、重複あり</td></tr><tr><td align="right">1</td><td align="left">label</td><td align="left">医薬品の一般名、原疾患名、有害事象の名前</td></tr><tr><td align="right">2</td><td align="left">type</td><td align="left">drug, reac, histのいずれか</td></tr><tr><td align="right">3</td><td align="left">code0</td><td align="left">対応する薬効分類番号の上1桁の数字, 一部の医薬品のみ</td></tr><tr><td align="right">4</td><td align="left">code1</td><td align="left">対応する薬効分類番号の上2桁の数字, 一部の医薬品のみ</td></tr><tr><td align="right">5</td><td align="left">code2</td><td align="left">対応する薬効分類番号の上3桁の数字, 一部の医薬品のみ</td></tr><tr><td align="right">6</td><td align="left">code3</td><td align="left">対応する薬効分類番号の上4桁の数字, 一部の医薬品のみ</td></tr><tr><td align="right">7</td><td align="left">name0</td><td align="left">対応する薬効分類番号の上1桁の名称, 一部の医薬品のみ</td></tr><tr><td align="right">8</td><td align="left">name1</td><td align="left">対応する薬効分類番号の上2桁の名称, 一部の医薬品のみ</td></tr><tr><td align="right">9</td><td align="left">name2</td><td align="left">対応する薬効分類番号の上3桁の名称, 一部の医薬品のみ</td></tr><tr><td align="right">10</td><td align="left">name3</td><td align="left">対応する薬効分類番号の上4桁の名称, 一部の医薬品のみ</td></tr><tr><td align="right">11</td><td align="left">type_label</td><td align="left">type と labelを同時に表記</td></tr></tbody></table></div><p>画面左のLabel byで表示名を変更できるので、type_labelに設定します。<br>その上で、画面右の検索boxから医薬品を検索してみましょう。</p><p>筆者は腰痛持ちなので、たびたびお世話になる「サリチル酸メチル」を入力します。<br><img src="/images/20210901a/サリチル酸メチル候補.png" alt="サリチル酸メチル候補.png" width="1200" height="576" loading="lazy"><br>候補がいくつか出てくるので、その中からサリチル酸メチルを選択するとサリチル酸メチルの近傍の値が表示されます。バップ剤(湿布の一種)や湿布に関連した成分が出ています。<br><img src="/images/20210901a/サリチル酸メチル近傍.png" alt="サリチル酸メチル近傍.png" width="1200" height="559" loading="lazy"></p><p>右のneighborのスライダーを調節した上で「Isolate X points」をクリックすると近傍のみ表示することができます。<br><img src="/images/20210901a/サリチル酸メチル近傍限定.png" alt="サリチル酸メチル近傍限定.png" width="1200" height="580" loading="lazy"></p><h2 id="メタデータから絞り込み・色分けする"><a href="#メタデータから絞り込み・色分けする" class="headerlink" title="メタデータから絞り込み・色分けする"></a>メタデータから絞り込み・色分けする</h2><p>薬効分類番号のあるデータに絞って表示し、分類番号ごとに色分けして上手く表示できるか確認します。<br>右のSearchの正規表現オンオフボタン「.*」を押し、正規表現での検索を有効にします。<br>Searchに「^[0-9]」を入力すると薬効分類番号のあるデータのみが選べるので、その状態で「Isolate 2230 points」をクリックすると絞り込みができます。<br><img src="/images/20210901a/薬効分類ありのみ検索.png" alt="薬効分類ありのみ検索.png" width="1200" height="579" loading="lazy"></p><p>絞り込んだ状態で色を付けて確認してみましょう。<br>左のLabel byを「name1」にし、Color byを「code1」にすると薬効分類番号の上二桁で色付けされた状態で表示されます。<br>左下のチェックボックスを外すと二次元で描画できるので、その状態の図を表示します。<br><img src="/images/20210901a/薬効分類二桁PCA2D.png" alt="薬効分類二桁PCA2D.png" width="1200" height="582" loading="lazy"></p><p>左下のUMAP, T-SNEを押すと他の次元圧縮の方法が使えます。<br>UMAPを押すと次元圧縮の計算が行われます。<br>Neighborsを50で計算すると下の図のように見やすくなりました。UMAPやt-SNEでの圧縮後の距離は元空間の距離から崩れてしまうので注意が必要ですが、これによって得られたベクトルが他のタスクに使えるかなどをざっくり判断することができます。</p><img src="/images/20210901a/薬効分類二桁umap2D.png" alt="薬効分類二桁umap2D.png" width="1200" height="578" loading="lazy"><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回はword2vecを用いて医薬品副作用データベースから医薬品の埋め込み表現を獲得できました。さらにtensorflowで様々なテクニックを使うことでより良い表現を得られ、その効果について定量・定性評価により確認できました。</p><p>ただ、gensim実装に比べてtensorflow実装は計算時間が大幅にかかり、現状だとtensorflowの方はGPUを使ってもgensimの30~60倍の計算時間がかかります。今後はこの辺りを改善しつつ、より良い埋め込み表現の獲得を目指していきたいと思います。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">Tomas Mikolov, Ilya Sutskever, Kai Chen, Gregory S. Corrado, Jeffrey Dean. Distributed Representations of Words and Phrases and their Compositionality. NIPS, 2013</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">Tomas Mikolov, Ilya Sutskever, Kai Chen, Gregory S. Corrado, Jeffrey Dean. Efficient Estimation of Word Representations in Vector Space. CoRR, 2013</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/Python/">Python</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%98%E3%83%AB%E3%82%B9%E3%82%B1%E3%82%A2/">ヘルスケア</category>
      
      <category domain="https://future-architect.github.io/tags/Word2Vec/">Word2Vec</category>
      
      
      <comments>https://future-architect.github.io/articles/20210901a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS初心者向けNW構築ハンズオン-Internal編-</title>
      <link>https://future-architect.github.io/articles/20210831a/</link>
      <guid>https://future-architect.github.io/articles/20210831a/</guid>
      <pubDate>Mon, 30 Aug 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>AWS初心者にとって、最初に躓きやすい部分がNWの構築かと思います。</p><p>インスタンス立ててみたけど、これってどうやると他のノードと通信できるんだっけ？なんとなく通信できたけど、なんでだ？といった辺り、なんとなく有耶無耶なままにしていませんか。</p><p>今回は2020年12月にローンチされたReachability Analyzerを利用して、AWS初心者向けのNW構築ハンズオン-Internal編-をやってみたいと思います。</p><p>参考：<a href="https://aws.amazon.com/jp/blogs/news/new-vpc-insights-analyzes-reachability-and-visibility-in-vpcs/">新機能 – VPC Reachability Analyzer</a></p><h1 id="流れ"><a href="#流れ" class="headerlink" title="流れ"></a>流れ</h1><ul><li>前準備<ol><li>VPCを２つ作成</li><li>各VPCにサブネットを作成</li><li>各VPC内にEC2を作成</li></ol></li><li>AWS Reachability Analyzerを利用しての疎通確認<ul><li>#1 VPC Peeringが不足している</li><li>#2 Route Tableのルーティングが不足している</li><li>#3 Security Groupのインバウンドの許可設定が不足している</li><li>#4 振り返り</li></ul></li></ul><h1 id="前準備"><a href="#前準備" class="headerlink" title="前準備"></a>前準備</h1><h2 id="1-VPCを作成"><a href="#1-VPCを作成" class="headerlink" title="1. VPCを作成"></a>1. VPCを作成</h2><p>VPCを2つ作成<br><img src="/images/20210831a/vpc_a.png" alt="vpc_a.png" width="1008" height="266" loading="lazy"><br><img src="/images/20210831a/vpc_b.png" alt="vpc_b.png" width="1019" height="270" loading="lazy"><br>参考：<a href="https://dev.classmethod.jp/articles/vpc-cidr/">Amazon VPC IPアドレス設計レシピ</a></p><h2 id="2-各VPCにサブネットを作成"><a href="#2-各VPCにサブネットを作成" class="headerlink" title="2. 各VPCにサブネットを作成"></a>2. 各VPCにサブネットを作成</h2><p>各VPC（InternalA, B）に、それぞれサブネットを作成する<br><img src="/images/20210831a/subnet.png" alt="subnet.png" width="1200" height="83" loading="lazy"></p><h2 id="3-各VPCにEC2を作成"><a href="#3-各VPCにEC2を作成" class="headerlink" title="3. 各VPCにEC2を作成"></a>3. 各VPCにEC2を作成</h2><p>今しがた作成した各サブネットにEC2を立てます。<br>イメージはAmazon Linux2、インスタンスサイズはt2.microの無料利用枠にしています。<br><img src="/images/20210831a/ec2_a.png" alt="ec2_a.png" width="851" height="356" loading="lazy"><br><img src="/images/20210831a/ec2_b.png" alt="ec2_b.png" width="856" height="347" loading="lazy"></p><p>また、EC2作成のタイミングで、Security Groupも作成しています。<br>判別しやすいようNameのみ設定しており、ルールはデフォルトのままです。<br><img src="/images/20210831a/sg_a.png" alt="sg_a.png" width="660" height="362" loading="lazy"><br><img src="/images/20210831a/sg_b.png" alt="sg_b.png" width="623" height="366" loading="lazy"></p><h1 id="Reachability-Analyzerを利用しての疎通確認"><a href="#Reachability-Analyzerを利用しての疎通確認" class="headerlink" title="Reachability Analyzerを利用しての疎通確認"></a>Reachability Analyzerを利用しての疎通確認</h1><p>前準備は完了したので、ここからはReachability Analyzerを利用しながら疎通確認をしていきましょう。</p><p>VPCのメニューバーから選択利用できます。<br><img src="/images/20210831a/ra01.png" alt="ra01.png" width="423" height="121" loading="lazy"></p><p><code>パスの作成と分析</code>からパスを作成します。<br>今回はInterna-AのEC2からInternal-BのEC2への疎通確認をします。<br>ポートはhttpsを意識して443としています。<br><img src="/images/20210831a/ra02.png" alt="ra02.png" width="1163" height="157" loading="lazy"></p><h2 id="1-VPC-Peeringが不足している"><a href="#1-VPC-Peeringが不足している" class="headerlink" title="#1 VPC Peeringが不足している"></a>#1 VPC Peeringが不足している</h2><p>パスを作成すると同時に分析が実行されます。<br>分析が完了し、ステータスが<code>到達不可能</code>になっていることが確認できます。<br>詳細を見ていきましょう。<br><img src="/images/20210831a/ra03.png" alt="ra03.png" width="517" height="72" loading="lazy"></p><p>詳細を確認すると、VPC Peeringが接続できていないようです。<br><img src="/images/20210831a/ra04.png" alt="ra04.png" width="1169" height="526" loading="lazy"></p><p>VPC Peeringとは、異なるVPC間の通信を実現するためのサービスです。<br>参考：<a href="https://dev.classmethod.jp/articles/handson-vpc-peering/">VPCピアリングを作りながら学んでみた</a></p><p>VPCのコンソール画面からピアリング接続を設定します。<br><img src="/images/20210831a/vpc_peering_atob01.png" alt="vpc_peering_atob01.png" width="736" height="524" loading="lazy"></p><p>設定後、アクションメニューバーから承諾を行う必要がある点に注意です。<br><img src="/images/20210831a/vpc_peering_atob02.png" alt="vpc_peering_atob02.png" width="972" height="195" loading="lazy"></p><p>再度、分析してみましょう。</p><h2 id="2-Route-Tableのルーティングが不足している"><a href="#2-Route-Tableのルーティングが不足している" class="headerlink" title="#2 Route Tableのルーティングが不足している"></a>#2 Route Tableのルーティングが不足している</h2><p>分析結果が変わっています。3つ指摘があるようです。先に、1つ目と3つ目を見ていきます。<br><img src="/images/20210831a/ra05.png" alt="ra05.png" width="790" height="170" loading="lazy"></p><p><code>rtb-026e0943b428a980d</code>とは、Internal A（VPC）に紐付いているルートテーブルです。<br><code>pcx-032cb64744c1e754a</code>とは、先程作成したVPC Peeringのことです。<br>Internal AからVPC Peeringに対するルーティング設定が不足しているという指摘のようです。<br>ルーティングを設定しましょう。ターゲットを先のVPC Peeringに向けて、送信先のCIDRはInternal Bを指定します。</p><img src="/images/20210831a/vpc_a_rt.png" alt="vpc_a_rt.png" width="750" height="230" loading="lazy"><p>3つ目は反対に、Internal BからVPC Peeringに対するルーティング設定が不足しているという指摘です。同じ要領で設定をします。この時、送信先のCIDRはInternal Aを指定します。<br><img src="/images/20210831a/vpc_b_rt.png" alt="vpc_b_rt.png" width="742" height="187" loading="lazy"></p><p>再度、分析してみましょう。</p><h2 id="3-Security-Groupのインバウンドの許可設定が不足している"><a href="#3-Security-Groupのインバウンドの許可設定が不足している" class="headerlink" title="#3 Security Groupのインバウンドの許可設定が不足している"></a>#3 Security Groupのインバウンドの許可設定が不足している</h2><p>先の指摘がクリアになっています。いい感じです。<br>残りの指摘を見ると、Security Groupのingressルールが不足しているようです。<br><img src="/images/20210831a/ra06.png" alt="ra06.png" width="501" height="87" loading="lazy"></p><p><code>03766d1ad9783c83b</code>とはInternal BのEC2にアタッチされているSecurity Groupのことです。<br>このSecurity GroupがInternal AのEC2からの通信を拒絶しているので、許可設定をします。</p><p>今回はhttps通信を想定して、443ポートでの疎通確認をしていました。<br>そのためSecurity Groupのインバウンドルールに443ポート、CIDR10.1.0.0/16からの通信を許可する設定を追加します。<br><img src="/images/20210831a/sg_b_inbound.png" alt="sg_b_inbound.png" width="1049" height="253" loading="lazy"></p><p>再度、分析してみましょう。</p><h2 id="4-振り返り"><a href="#4-振り返り" class="headerlink" title="#4 振り返り"></a>#4 振り返り</h2><p>通信に成功しました！<br><img src="/images/20210831a/ra07.png" alt="ra07.png" width="364" height="156" loading="lazy"></p><p>通信経路も視覚的に確認できます。<br><img src="/images/20210831a/ra08.png" alt="ra08.png" width="317" height="442" loading="lazy"></p><p>わかりやすく注釈をつけてみました。<br><img src="/images/20210831a/ra09.png" alt="ra09.png" width="440" height="435" loading="lazy"><br>黒字で記載している箇所は今回意識しなかった箇所です。</p><ul><li>EC2のENI：<ul><li>EC2が通信を行うためのインターフェースです。ENIがないとEC２は通信を行うことができません。EC2を作成したタイミングで合わせて払い出されています。</li></ul></li><li>VPCのACL：<ul><li>VPCの単位でNWの制御を行うためのサービスです。セキュリティグループ同様にセキュリティを高める目的で利用します。</li></ul></li></ul><p>参考：<a href="https://business.ntt-east.co.jp/content/cloudsolution/column-14.html">AWSのネットワークインターフェース「ENI」とは</a><br>参考：<a href="https://dev.classmethod.jp/articles/amazon-vpc-acl/">Amazon VPCのネットワークACLについて</a></p><p>なぜ、今回はInternal AのSecurity Groupの設定を操作せずに済んだのかというと、もともと外向きの通信が許可されていたためです。<br><img src="/images/20210831a/sg_a_outbound.png" alt="sg_a_outbound.png" width="1090" height="245" loading="lazy"></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回のNW構成を簡単に図化すると以下です。</p><p>Internal AのVPCにいるEC2からInternal BのVPCにいるEC２に向けて投げられた通信は、SecurityGroupを抜けて、VPCのRouteTableを利用して、VPCPeeringへと流れていきます。</p><p>VPC Peeringを抜けた通信はやがてInternal Bに到達し、Securituy Groupを抜けて対向のEC2へとたどり着きました。</p><img src="/images/20210831a/diagram.png" alt="diagram.png" width="1200" height="723" loading="lazy">]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/">初心者向け</category>
      
      <category domain="https://future-architect.github.io/tags/Network/">Network</category>
      
      <category domain="https://future-architect.github.io/tags/VPC-Reachability-Analyzer/">VPC_Reachability_Analyzer</category>
      
      
      <comments>https://future-architect.github.io/articles/20210831a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>リモートワーク環境を全力で整備してみた</title>
      <link>https://future-architect.github.io/articles/20210827a/</link>
      <guid>https://future-architect.github.io/articles/20210827a/</guid>
      <pubDate>Thu, 26 Aug 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;TIGの伊藤真彦です。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>TIGの伊藤真彦です。<a href="/articles/20210823a/">夏の自由研究ブログ連載2021</a>の６記事目です。</p><p>私事ですがお引っ越しをしました、0からプログラミングしたいネタがない事もないのですが引っ越しに体力が奪われたので今年は断念します。素直に日頃やった事をネタにしていきます。</p><h1 id="0からの環境構築"><a href="#0からの環境構築" class="headerlink" title="0からの環境構築"></a>0からの環境構築</h1><p>今回のネタはタイトルの通りです、リモートワーク環境を整えてたレポートをしつつおすすめアイテムを紹介していきます。</p><p>気を抜くと生活感あふれる何かがカメラに写り込む生活とはこれでオサラバ。というわけで、まずはまっさらな部屋を用意します、部屋.new()です。</p><img src="/images/20210827a/room.jpg" alt="空っぽの部屋" width="800" height="600" loading="lazy"><p>６畳の素朴な部屋ですが、今回ここは仕事部屋オンリーに使います、生活感のある要素はこの部屋からは極力排除します。</p><h1 id="部屋の印象は床で決まる"><a href="#部屋の印象は床で決まる" class="headerlink" title="部屋の印象は床で決まる"></a>部屋の印象は床で決まる</h1><p>通勤が仕事モードに入る準備期間となっていたため、気持ちの切り替えができないという意見をよく聞きます。</p><p>私は比較的大丈夫なタイプですが、確かに仕事をする空間らしい場所で仕事をした方が気分が良いですよね。そこで、部屋全体に<a href="https://www.amazon.co.jp/gp/product/B085D8SK82/">タイルマット</a>を敷きました。</p><p>そこからか、という感じですが気合を入れてみました。</p><img src="/images/20210827a/image.png" alt="床タイル" width="300" height="299" loading="lazy"><p>これを5セット購入しました、見えないところに端材を敷き詰めてギリギリセーフという結果になりました。</p><p>全て綺麗に仕上げたい方は余裕を持って一畳１セットくらいの感じで買うと良いでしょう。部屋から職場感が漂ってきました、下手すると自宅なのに心が休まらない仕上がりです。</p><img src="/images/20210827a/image_2.png" alt="職場感がある部屋" width="1200" height="802" loading="lazy"><p>さらに本気を出すと<a href="https://item.rakuten.co.jp/asia-kobo/set54-84/">大理石やモルタル風のパネル</a>を設置してオシャレ感を高める事ができますが、一枚1kgという重量感に危険を感じたため諦めました、引っ越す時50kg以上の大荷物になります。今住んでいる場所に5年10年と住む予定の人にはオススメです。紹介したタイルマットは安価、軽量ながらすぐに使えなくなるような不安を感じない、絶妙なスペックでした。</p><h1 id="PCデスクを配置する"><a href="#PCデスクを配置する" class="headerlink" title="PCデスクを配置する"></a>PCデスクを配置する</h1><p>デスクと椅子が整っていないと腰を痛める原因になります、とても大事な要素です。引越しついでにPCデスクを新調しました。</p><p>デスクは<a href="https://www.bauhutte.jp/">Bauhutte (バウヒュッテ)</a>に統一しました、これはゲーミングデスクのブランドです。もう少し大人なコンセプトのデスクも探したのですが、サイズに余裕がありつつキーボードスライダーがデフォルトでついているデスクを求めて悩み抜いた結果、このブランドに落ち着きました。</p><p><a href="https://www.amazon.co.jp/gp/product/B01HG3QOIK/">昇降式 スタンディングデスク (幅100cm×奥行45cm)</a>をチョイス。スタンディングデスクですが、狙いはキーボードスライダーなので高さを上げる日は来ないと思われます。</p><p><a href="https://www.amazon.co.jp/gp/product/B071FSPSYV/">サイドデスク</a>、<a href="https://www.amazon.co.jp/gp/product/B07FMC91Q2/">デスクサイドラック</a>も統一してオシャレ感アップです。</p><p>後述しますが設備の都合上私にはサイドデスクをL字に配置する必要があります。<a href="https://www.amazon.co.jp/gp/product/B07YWST6H8/">デスクマット</a>も忘れずに、Bauhutteからもマットは販売されていますが、ここだけブランド統一せずにケチってしまいました…</p><p>これらを組み立てて準備完了です。</p><img src="/images/20210827a/組み立て完了.jpg" alt="家具が置かれた部屋" width="1000" height="668" loading="lazy"><p>椅子は予算があればアーロンチェアあたりをいつの日か購入したいところですが、<a href="https://www.amazon.co.jp/s?k=%E3%83%A1%E3%83%83%E3%82%B7%E3%83%A5%E3%83%81%E3%82%A7%E3%82%A2&i=kitchen&page=3&__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&qid=1629553741&ref=sr_pg_3">メッシュチェア</a>で検索すると２万円以下でも良さげなものが出てきます。</p><h1 id="デスクにアイテムを配置する"><a href="#デスクにアイテムを配置する" class="headerlink" title="デスクにアイテムを配置する"></a>デスクにアイテムを配置する</h1><p>デスクを用意したらPC、ディスプレイをセッティングしていきます。<a href="https://www.amazon.co.jp/gp/product/B07T1CJ9VR/">ディスプレイ</a>は迫力の43インチです。</p><img src="/images/20210827a/image_3.png" alt="4K 43インチのPCディスプレイ" width="1200" height="770" loading="lazy"><p>27~33インチを買うのが賢い選択ですが、ブランドに拘らなければ同じ値段で43インチまでサイズアップできることに気がついてしまったのが運の尽きです、誘惑に勝てなかった。これによりデスクの横幅いっぱいまでディスプレイが伸びるため、サイドデスクにノートPCを配置しています。</p><p>私は常にチャットツールを表示していたいタイプなのですが、画面がどれ程大きくても、チャット表示用に２画面あった方が画面を有効活用できます。引っ越す前はデスクの端に無理やり置いたノートPC本体の画面を利用していましたが、43インチモニタの登場により引退した27インチモニタをサブモニタとして配置しました。</p><p>最初は２７インチ２画面を夢見ていたのですが、やり過ぎました。</p><img src="/images/20210827a/image_4.png" alt="43インチのPCディスプレイが置かれたデスク" width="1200" height="802" loading="lazy"><p>さて快適なリモートワークには会議の音質を整えることが大切ですね。<br>私は<a href="https://www.soundhouse.co.jp/products/detail/item/164160/">スピーカー</a>にADAM AUDIO ( アダムオーディオ ) / A5Xを使用しています。</p><img src="/images/20210827a/image_5.png" alt="スピーカー" width="600" height="300" loading="lazy"><p>ほとんどの人がピンとこないチョイスだと思いますが、私の趣味が大いに反映されています。音楽が好きなので、部屋にモニタースピーカーがある生活に夢を感じます。</p><p>同じスピーカーを私物PCでも仕事PCでも、さらには<a href="https://www.amazon.co.jp/gp/product/B084DWX1PV/">Alexa</a>でも鳴らしたい、という要望があり、<a href="https://www.amazon.co.jp/dp/B08628FVYF/">ステレオミキサー</a>を導入しました。</p><img src="/images/20210827a/image_6.png" alt="ステレオミキサー" width="890" height="791" loading="lazy"><p>構造上ケーブルにもこだわる程のオーディオマニア向けではないですが、コンパクトで電源不要なのは大きな魅力です。</p><p>Alexaは以前<a href="/articles/20210301/">登壇レポート記事</a>に書いたとおり、会議をすっぽかさないためのリマインダーとして使っています。<a href="https://www.amazon.co.jp/gp/product/B07V1PZFXY/">スマートプラグ</a>を買って節電するような使い方もしています。</p><img src="/images/20210827a/image_7.png" alt="スマートプラグ" width="804" height="589" loading="lazy"><p>スピーカー鳴らすのは憚られる、という方はヘッドホン、イヤホンに投資してみるのはいかがでしょうか。<br>私は<a href="https://www.amazon.co.jp/AKG-K872/dp/B01M3SVO6G">AKG K872</a>を愛用しています。</p><img src="/images/20210827a/image_8.png" alt="ヘッドホン" width="1041" height="1340" loading="lazy"><p>開放型ヘッドホンの高級機は音漏れでは済まないレベルで外部に音が漏れますが、これは密閉型なので比較的音漏れを気にする必要がありません。趣味なのでこの辺の感覚は参考にならないと思います。</p><p><a href="https://www.amazon.co.jp/gp/product/B083TJ93H2/">マイク</a>も整えています、この流れだと誤解を産みそうですが、ケーブルがUSBになっておりでPCに直接させる、万人におすすめのアイテムです。</p><img src="/images/20210827a/image_9.png" alt="マイク" width="931" height="955" loading="lazy"><p>特にMACの場合ノートPC付属のマイクでも充分な品質で、際立った音質向上は案外感じられないのですが、マイクの指向性が強いことでキーボードのタイプ音が比較的拾われなくなるメリットがあります。</p><p>忘れてはいけない<a href="https://www.amazon.co.jp/dp/B082TV2Z9M/">HHKB</a>、キーボードはこだわり出すとキリがないですね、今回の連載でも最高の持ち歩きキーボード考という記事がありました。</p><img src="/images/20210827a/image_10.png" alt="キーボード" width="1200" height="617" loading="lazy"><p>私は最初にこの人すごいなと尊敬した先輩エンジニアがHHKBユーザーだったという憧れもあってHHKBを愛用しています。</p><p>新型の<a href="https://www.amazon.co.jp/dp/B082TYNNL2/">HHKB Professional HYBRID</a>が出たので、欲しい気持ちがとてもあるのですが、まだ我慢しています。マウスはELECOMです、まだ沼には沈んでいないです。</p><p>私物PCを使う際にキーボードとマウスをいちいち接続し直すのが面倒だな、と感じていたのですが、<a href="https://www.amazon.co.jp/gp/product/B071NM5GRW/">切り替えスイッチ付きUSBハブ</a>がありました。</p><img src="/images/20210827a/image_11.png" alt="切り替えスイッチ付きUSBハブ" width="1200" height="984" loading="lazy"><p>これをデスク裏に貼り付けて利用しています。</p><p>これらをなるべく配線がごちゃつかないように整えていきました。<a href="https://www.amazon.co.jp/gp/product/B07RNJJMST/">ケーブル結束バンド</a>で整理し、<a href="https://www.amazon.co.jp/gp/product/B076GXW7GK/">ケーブルクリップ</a>でデスク裏面に隠すように固定します。</p><img src="/images/20210827a/image_12.png" alt="ケーブル結束バンド" width="1200" height="1195" loading="lazy"><p>設備の都合上人並み以上にケーブルがありますが、床がごちゃつくような事態は回避できました。</p><p>仕上げに<a href="https://www.amazon.co.jp/gp/product/B07QXMZ7C8/">LEDテープ</a>による間接照明を設置します。結局ゲーミング感を出してしまいました。</p><img src="/images/20210827a/DSC00926.JPG" alt="LEDテープで照明されたデスク" width="1200" height="802" loading="lazy"><p>見ての通り趣味の色が大幅に出ているので、真面目な仕事一色というわけではありません、同じデスクで私物PCも触れば映画も見てゲームもします。</p><p>いずれにせよ会社では実現できないレベルの環境が整いました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>下記のアイテムを紹介しました。</p><ul><li><a href="https://www.amazon.co.jp/gp/product/B085D8SK82/">タイルマット</a></li><li><a href="https://item.rakuten.co.jp/asia-kobo/set54-84/">大理石やモルタル風のパネル</a></li><li><a href="https://www.amazon.co.jp/gp/product/B01HG3QOIK/">昇降式 スタンディングデスク (幅100cm×奥行45cm)</a></li><li><a href="https://www.amazon.co.jp/gp/product/B071FSPSYV/">サイドデスク</a></li><li><a href="https://www.amazon.co.jp/gp/product/B07FMC91Q2/">デスクサイドラック</a></li><li><a href="https://www.amazon.co.jp/gp/product/B07YWST6H8/">デスクマット</a></li><li><a href="https://www.amazon.co.jp/s?k=%E3%83%A1%E3%83%83%E3%82%B7%E3%83%A5%E3%83%81%E3%82%A7%E3%82%A2&i=kitchen&page=3&__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&qid=1629553741&ref=sr_pg_3">メッシュチェア</a></li><li><a href="https://www.amazon.co.jp/gp/product/B07T1CJ9VR/">ディスプレイ</a></li><li><a href="https://www.soundhouse.co.jp/products/detail/item/164160/">スピーカー</a></li><li><a href="https://www.amazon.co.jp/dp/B08628FVYF/">ステレオミキサー</a></li><li><a href="https://www.amazon.co.jp/gp/product/B084DWX1PV/">Alexa</a></li><li><a href="https://www.amazon.co.jp/gp/product/B07V1PZFXY/">スマートプラグ</a></li><li><a href="https://www.amazon.co.jp/AKG-K872/dp/B01M3SVO6G">AKG K872</a></li><li><a href="https://www.amazon.co.jp/gp/product/B083TJ93H2/">マイク</a></li><li><a href="https://www.amazon.co.jp/dp/B082TV2Z9M/">HHKB</a></li><li><a href="https://www.amazon.co.jp/dp/B082TYNNL2/">HHKB Professional HYBRID</a></li><li><a href="https://www.amazon.co.jp/gp/product/B071NM5GRW/">切り替えスイッチ付きUSBハブ</a></li><li><a href="https://www.amazon.co.jp/gp/product/B07RNJJMST/">ケーブル結束バンド</a></li><li><a href="https://www.amazon.co.jp/gp/product/B076GXW7GK/">ケーブルクリップ</a></li><li><a href="https://www.amazon.co.jp/gp/product/B07QXMZ7C8/">LEDテープ</a></li></ul><p>元々持っていたものや買ってないものも含みますが、合計金額のことは考えたくないですね。</p><p>みなさんもワクワクするお仕事環境を整えてみませんか</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/">リモートワーク</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%BC%95%E3%81%A3%E8%B6%8A%E3%81%97/">引っ越し</category>
      
      
      <comments>https://future-architect.github.io/articles/20210827a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ローカルフォワードプロキシでHTTP要求時に機能横断な処理を差し込み</title>
      <link>https://future-architect.github.io/articles/20210826b/</link>
      <guid>https://future-architect.github.io/articles/20210826b/</guid>
      <pubDate>Wed, 25 Aug 2021 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;/articles/20210823a/&quot;&gt;夏の自由研究連載2021&lt;/a&gt;の4日目で、TIG</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/articles/20210823a/">夏の自由研究連載2021</a>の4日目で、TIG DXユニット真野です。</p><p>この記事では <del>みんな</del> 個人的に大好きなフォワードプロキシの概要と、Goでの既存のOSSライブラリを利用した実装例をまとめました。このテーマに決めた理由は以下です。</p><ul><li>Goのnet/httpのクライアントは、<code>https_proxy</code> の環境変数で差し込める（標準のデフォルトクライアントをそのまま利用する前提です）</li><li>差し込んだプロキシ側に、ロギングや認証やできればリトライを仕込めば色々役立つ事があるんじゃないかという調査<ul><li>Goだとhttp.Clientは、RoundTripperというインタフェースを実装したTransportでカスタマイズ可能なので、実用だとこちらを利用したほうが良いと思います。</li></ul></li><li>概念的にはサービスメッシュの文脈でのサイドカープロキシに近いものをイメージしています</li></ul><p>自由研究という趣旨なので、そんなに実用性は考えず、興味ドリブンで手を動かそうと思いテーマに選びました。</p><h2 id="フォワードプロキシとは"><a href="#フォワードプロキシとは" class="headerlink" title="フォワードプロキシとは"></a>フォワードプロキシとは</h2><p>大きな括りではWebプロキシとも呼ばれることあるフォワードプロキシ（単にプロキシと呼ぶことも多いです）ですが、クライアントとWebサーバの中間に位置し、クライアントの要求を代理（proxy）してWebサーバにアクセスする存在です。<a href="/articles/20201020/">ProxyとDockerと新人社員と時々わたし</a>の記事にも詳しく書かれていますが、メリットとしてはキャッシュや接続先の通信の制限、ウイルススキャンを行うと言った余地をもたせることができる点でしょうか。Webエンジニアとしてのデメリットがあるとすると、利用するツール群でのプロキシ設定が大変だということがでしょうか。</p><img src="/images/20210826b/ローカルフォワードプロキシ.drawio-ページ2.png" alt="フォワードプロキシ説明" width="962" height="437" loading="lazy"><p>たまにプロキシと書いてリバースプロキシ（私の周囲ではリバプロと略す人が多い）を指すブログ記事なども見かけますが、リバースプロキシとの差は、プロキシサーバがクライアント側にあるか、サーバ側にあるかの違いでしょう。今回は掲題にある通り、フォワードプロキシについてです．</p><img src="/images/20210826b/ローカルフォワードプロキシ.drawio-ページ3.png" alt="リバースプロキシ説明" width="1022" height="495" loading="lazy"><h2 id="自由研究でやりたいこと"><a href="#自由研究でやりたいこと" class="headerlink" title="自由研究でやりたいこと"></a>自由研究でやりたいこと</h2><p>Goでローカル端末（同一プロセス）上にフォワードプロキシを立ち上げ、アプリ側には <code>http_proxy</code>や<code>https_proxy</code> の環境変数で先程のフォワードプロキシのFQDNを設定してアクセスさせること。</p><img src="/images/20210826b/ローカルフォワードプロキシ.drawio.png" alt="自由研究イメージ" width="621" height="409" loading="lazy"><p>もし同一プロセス内に組み込む場合は、実現させるためにはローカルでフォワードプロキシのgoroutineを起動すること、フォワードプロキシのプロトコル（HTTPのCONNECTメソッドなど）を守って実装する必要があり、利用できるOSSなどを調査します。</p><p>リバースプロキシだと、net/http/httputil の <a href="https://pkg.go.dev/net/http/httputil#ReverseProxy">ReverseProxy</a>を利用すればかなり楽できそうなのですが、繰り返しますが今回構築するのはフォワードプロキシなので異なります。</p><h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><p>フォワードプロキシを実装するには、HTTP CONNECTメソッドなど所定のプロトコルを解釈させる必要があると思うのですが、<a href="https://github.com/elazarl/goproxy">elazarl/goproxy</a>など有名なプロダクトがすでに存在したのでそちらを利用します。</p><p>goproxyという名前は<a href="https://golang.org/ref/mod#goproxy-protocol">go module側のプロキシサーバ</a>と勘違いしそうですが、それとは関係ないです。</p><p>goproxyはカスタマイズ可能なHTTPプロキシライブラリを提供するとREADMEに書いている通り、内部で利用するTransportなどが公開されているので自由度が高い印象を受けました。プロキシ自体は <code>net/http</code>のハンドラーなので、コードもGoに慣れている人であれば比較的理解しやすいと思います。</p><p>goporxyをまずmain関数内で呼び出すミニマムな実装で試してみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/tls&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/elazarl/goproxy&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">proxy := goproxy.NewProxyHttpServer()</span><br><span class="line">proxy.Tr = &amp;http.Transport&#123;TLSClientConfig: &amp;tls.Config&#123;InsecureSkipVerify: <span class="literal">true</span>&#125;, Proxy: <span class="literal">nil</span>&#125;</span><br><span class="line">proxy.ConnectDial = <span class="literal">nil</span></span><br><span class="line">proxy.Verbose = <span class="literal">true</span></span><br><span class="line"><span class="keyword">go</span> http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>, proxy) <span class="comment">// ローカルにフォワードプロキシを起動</span></span><br><span class="line"></span><br><span class="line">resp, err := http.Get(os.Args[<span class="number">1</span>]) <span class="comment">// 引数で渡されたURLにアクセス</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">all, err := io.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(all))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IPアドレスを取得する、 <a href="https://httpbin.org/ip">https://httpbin.org/ip</a> というサイトにアクセスで試してみます。IP部分はなんとなく書き換えておきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 環境変数プロキシ設定</span></span><br><span class="line">&gt; <span class="built_in">set</span> http_proxy=http://localhost:8000</span><br><span class="line">&gt; <span class="built_in">set</span> https_proxy=http://localhost:8000</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTP側のエンドポイントにアクセス</span></span><br><span class="line">&gt; go run main.go http://httpbin.org/ip</span><br><span class="line">2021/08/26 11:24:57 [001] INFO: Got request /ip httpbin.org GET http://httpbin.org/ip</span><br><span class="line">2021/08/26 11:24:57 [001] INFO: Sending request GET http://httpbin.org/ip</span><br><span class="line">2021/08/26 11:24:57 [001] INFO: Received response 200 OK</span><br><span class="line">2021/08/26 11:24:57 [001] INFO: Copying response to client 200 OK [200]</span><br><span class="line">2021/08/26 11:24:57 [001] INFO: Copied 30 bytes to client error=&lt;nil&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;111.98.xxx.x&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTPS側のエンドポイントにアクセス</span></span><br><span class="line">&gt; go run main.go https://httpbin.org/ip</span><br><span class="line">2021/08/26 11:26:16 [001] INFO: Running 0 CONNECT handlers</span><br><span class="line">2021/08/26 11:26:16 [001] INFO: Accepting CONNECT to httpbin.org:443</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;111.98.90.1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記のように実行してみると、<code>proxy.Verbose = true</code> の設定をしていることもあり、goproxyでログ出力され、ローカルのフォワードプロキシを経由して通信されていることがわかります。</p><p>念の為、環境変数を外すると、直接外部に通信されることも確認します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 環境変数を外す</span></span><br><span class="line"><span class="built_in">set</span> http_proxy=</span><br><span class="line"><span class="built_in">set</span> https_proxy=</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTP, HTTPSでアクセス（ローカルのプロキシに経由していないことを確認）</span></span><br><span class="line">&gt; go run main.go http://httpbin.org/ip</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;111.98.90.1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt; go run main.go https://httpbin.org/ip</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;111.98.90.1&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>goproxy側でログを出していないため、環境変数の有無で通信経路を変えられたようです。</p><h2 id="goproxyで紹介されているユースケース"><a href="#goproxyで紹介されているユースケース" class="headerlink" title="goproxyで紹介されているユースケース"></a>goproxyで紹介されているユースケース</h2><p>READMEにはgoproxyの利用例もいくつか書かれていて興味深かったです。例えば、午前8時から午後17時までの時間帯にはアクセスを禁じる処理が紹介されていました。これは冗談寄りのアイデアだと思いますが、実用に近づけたユースケースを考えると障害テスト寄りのことを実現するときにも使えそうだなと思います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">proxy.OnRequest(goproxy.DstHostIs(<span class="string">&quot;www.reddit.com&quot;</span>)).DoFunc(</span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">(r *http.Request,ctx *goproxy.ProxyCtx)</span><span class="params">(*http.Request,*http.Response)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> h,_,_ := time.Now().Clock(); h &gt;= <span class="number">8</span> &amp;&amp; h &lt;= <span class="number">17</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> r,goproxy.NewResponse(r,</span><br><span class="line">                    goproxy.ContentTypeText,http.StatusForbidden,</span><br><span class="line">                    <span class="string">&quot;Don&#x27;t waste your time!&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r,<span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>もちろん、何かしらの認証やトレーサビリティに利用できそうな、リクエストヘッダへの差し込みも可能で、紹介されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxy.OnRequest().DoFunc(</span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">(r *http.Request,ctx *goproxy.ProxyCtx)</span><span class="params">(*http.Request,*http.Response)</span></span> &#123;</span><br><span class="line">        r.Header.Set(<span class="string">&quot;X-GoProxy&quot;</span>,<span class="string">&quot;yxorPoG-X&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> r,<span class="literal">nil</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="拡張ポイント"><a href="#拡張ポイント" class="headerlink" title="拡張ポイント"></a>拡張ポイント</h2><p>前の章で説明しましたが、goproxyを利用する場合は以下のような拡張ポイントが用意されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Add handlers to httpsHandlers</span></span><br><span class="line">proxy.OnRequest(Some ReqConditions).HandleConnect(YourHandlerFunc())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add handlers to reqHandlers</span></span><br><span class="line">proxy.OnRequest(Some ReqConditions).Do(YourReqHandlerFunc())</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add handlers to respHandlers</span></span><br><span class="line">proxy.OnResponse(Some RespConditions).Do(YourRespHandlerFunc())</span><br></pre></td></tr></table></figure><p>実装例は<a href="https://github.com/elazarl/goproxy/tree/master/examples">examples</a>フォルダに2021.08.26時点で14ほどの例があるので、大体何ができるかはここから追えると思います。</p><h2 id="ミドルウェアでの拡張"><a href="#ミドルウェアでの拡張" class="headerlink" title="ミドルウェアでの拡張"></a>ミドルウェアでの拡張</h2><p>goproxyもServeHTTPを実装されているため、よくあるmiddlewareでの拡張が可能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exampleMiddleware</span><span class="params">(next http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// 何かしらの処理のフック</span></span><br><span class="line">next.ServeHTTP(recorder, r)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このmiddlewareを次のように呼び出します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>, exampleMiddleware(proxy))</span><br></pre></td></tr></table></figure><p>この形式であれば、既存資産のライブラリを流用しやすいかもしれません。</p><h2 id="ミドルウェア拡張の注意"><a href="#ミドルウェア拡張の注意" class="headerlink" title="ミドルウェア拡張の注意"></a>ミドルウェア拡張の注意</h2><p>例えば、レスポンスコードを取得するために、 http.ResponseWriter をラップしたいときはよくあると思います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> StatusRecorder <span class="keyword">struct</span> &#123;</span><br><span class="line">http.ResponseWriter</span><br><span class="line">Status <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *StatusRecorder)</span> <span class="title">WriteHeader</span><span class="params">(status <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">r.Status = status</span><br><span class="line">r.ResponseWriter.WriteHeader(status)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">loggingMiddleware</span><span class="params">(next http.Handler)</span> <span class="title">http</span>.<span class="title">Handler</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">recorder := &amp;StatusRecorder&#123;ResponseWriter: w&#125;</span><br><span class="line">next.ServeHTTP(recorder, r)</span><br><span class="line">fmt.Println(<span class="string">&quot;★★★StatusCode&quot;</span>, recorder.Status)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これをそのまま使うと、panicが発生するので注意です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> http.ListenAndServe(<span class="string">&quot;:8000&quot;</span>, loggingMiddleware(proxy))</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>実行例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;go run main.go  https://httpbin.org/ip</span><br><span class="line">2021/08/26 12:22:16 http: panic serving [::1]:51340: httpserver does not support hijacking</span><br><span class="line">goroutine 5 [running]:</span><br><span class="line">net/http.(*conn).serve.func1()</span><br><span class="line">        C:/Program Files/Go/src/net/http/server.go:1801 +0xb9</span><br><span class="line">panic(&#123;0x7396a0, 0x7ee370&#125;)</span><br><span class="line">        C:/Program Files/Go/src/runtime/panic.go:1047 +0x266</span><br><span class="line">github.com/elazarl/goproxy.(*ProxyHttpServer).handleHttps(0xc000119180, &#123;0x7f5ee8, 0xc000226000&#125;, 0xc000212000)</span><br><span class="line">        C:/Users/manoj/go/pkg/mod/github.com/elazarl/goproxy@v0.0.0-20210801061803-8e322dfb79c4/https.go:84 +0x1479</span><br><span class="line">github.com/elazarl/goproxy.(*ProxyHttpServer).ServeHTTP(0xc00011da30, &#123;0x7f5ee8, 0xc000226000&#125;, 0xc000212000)</span><br><span class="line">        C:/Users/manoj/go/pkg/mod/github.com/elazarl/goproxy@v0.0.0-20210801061803-8e322dfb79c4/proxy.go:114 +0xd7</span><br><span class="line">略</span><br></pre></td></tr></table></figure><p>リクエストをラップするにはHijackインターフェースを実装する必要があるとのこと。そこで以下のレシーバーを追加します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *StatusRecorder)</span> <span class="title">Hijack</span><span class="params">()</span> <span class="params">(net.Conn, *bufio.ReadWriter, error)</span></span> &#123;</span><br><span class="line">h, ok := r.ResponseWriter.(http.Hijacker)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, errors.New(<span class="string">&quot;hijack not supported&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> h.Hijack()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>そうするとステータスコードのロギングが成功します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">go</span> run main.<span class="keyword">go</span>  http:<span class="comment">//httpbin.org/ip</span></span><br><span class="line"><span class="number">2021</span>/<span class="number">08</span>/<span class="number">26</span> <span class="number">13</span>:<span class="number">16</span>:<span class="number">36</span> [<span class="number">001</span>] INFO: Got request /ip httpbin.org GET http:<span class="comment">//httpbin.org/ip</span></span><br><span class="line"><span class="number">2021</span>/<span class="number">08</span>/<span class="number">26</span> <span class="number">13</span>:<span class="number">16</span>:<span class="number">36</span> [<span class="number">001</span>] INFO: Sending request GET http:<span class="comment">//httpbin.org/ip</span></span><br><span class="line"><span class="number">2021</span>/<span class="number">08</span>/<span class="number">26</span> <span class="number">13</span>:<span class="number">16</span>:<span class="number">36</span> [<span class="number">001</span>] INFO: Received response <span class="number">200</span> OK</span><br><span class="line"><span class="number">2021</span>/<span class="number">08</span>/<span class="number">26</span> <span class="number">13</span>:<span class="number">16</span>:<span class="number">36</span> [<span class="number">001</span>] INFO: Copying response to client <span class="number">200</span> OK [<span class="number">200</span>]</span><br><span class="line"><span class="number">2021</span>/<span class="number">08</span>/<span class="number">26</span> <span class="number">13</span>:<span class="number">16</span>:<span class="number">36</span> [<span class="number">001</span>] INFO: Copied <span class="number">30</span> bytes to client error=&lt;<span class="literal">nil</span>&gt;</span><br><span class="line">★★★StatusCode <span class="number">200</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;111.98.xx.x&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意ですが、HTTPS通信だとこの実装ではステータスが取れません。Man in The Middel Proxyの仕組みを構築する必要があるのでそこまでガンバるかどうかでしょうか。（この制約が、圧倒的に使い勝手の面でhttp.Client側のTransportに比べて面倒だなと感じることができました）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">go</span> run main.<span class="keyword">go</span>  https:<span class="comment">//httpbin.org/ip</span></span><br><span class="line"><span class="number">2021</span>/<span class="number">08</span>/<span class="number">26</span> <span class="number">13</span>:<span class="number">17</span>:<span class="number">39</span> [<span class="number">001</span>] INFO: Running <span class="number">0</span> CONNECT handlers</span><br><span class="line"><span class="number">2021</span>/<span class="number">08</span>/<span class="number">26</span> <span class="number">13</span>:<span class="number">17</span>:<span class="number">39</span> [<span class="number">001</span>] INFO: Accepting CONNECT to httpbin.org:<span class="number">443</span></span><br><span class="line">★★★ <span class="number">0</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;111.98.xx.x&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTTPSの宛先では、<code>★★★ 0</code> とステータスが取れていないことがわかります。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>環境変数（http_proxy, https_proxy, no_proxy）などで差し込めるフォワードプロキシをローカル（に近いところ）で利用して、何かしらの共通処理を用いれないかという自由研究でした。接続先のサーバレスポンスによって処理を切り替えたい（例えばリトライしたい）というときには、Man in The Middel Proxyの考慮が必要で（特別な証明書を準備し、クライアントに読み込ませる必要がある）、気軽に導入するにはハードルが高いです。</p><p>実用性に近い部分では、リクエスト側に何かしらエンリッチ（認証情報やトレース情報）するケースや、カオスエンジニアなどの障害テストを行うときには少し便利かもしれません。障害テストはプロキシという要素が一つ増えているので、どうしてもスタブを作るのが面倒な時にサポート用途に使えるかも？という具合でしょうか。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7/">プロキシ</category>
      
      
      <comments>https://future-architect.github.io/articles/20210826b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MONETマーケットプレイス × OSS活用でさっくりデモアプリ開発</title>
      <link>https://future-architect.github.io/articles/20210826a/</link>
      <guid>https://future-architect.github.io/articles/20210826a/</guid>
      <pubDate>Wed, 25 Aug 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;MONET Technologies Inc.</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>MONET Technologies Inc. の竹内です。このたび、フューチャー技術ブログに寄稿させていただいています。</p><p>今回は、弊社のMONETマーケットプレイス上のプロダクトを使って、MaaSアプリをイメージしたデモアプリを作ってみました。</p><p>今回イメージしたデモアプリは「イベント会場へのマルチモーダル移動経路検索&amp;予約&amp;搭乗Webアプリ」です。</p><img src="/images/20210826a/demo_short2.gif" alt="アプリデモ動画" width="640" height="400" loading="lazy"><img src="/images/20210826a/image.png" alt="アプリ紹介" width="1200" height="367" loading="lazy"><p>MONETマーケットプレイスのプロダクトを利用することにより、このようなデモアプリを省エネで作成することができます。画面動作の実装単体であれば、2週間弱であらかた完成しました。</p><p>本記事では、デモアプリ開発時の利用場面を交えて、MONETマーケットプレイスと各プロダクトの魅力をお伝えできればと思います。</p><h1 id="そもそもMONETマーケットプレイスとは"><a href="#そもそもMONETマーケットプレイスとは" class="headerlink" title="そもそもMONETマーケットプレイスとは?"></a>そもそもMONETマーケットプレイスとは?</h1><p>こちらは既に<a href="io/articles/20210404/">以前の記事</a>でも紹介されていますが、MaaS (Mobility As A Service)に関わるAPI/ソフトウェアを提供するプラットフォームです。</p><p>弊社を含め、複数の3rd Partyが提供するAPIを同一プラットフォーム上で契約、管理、実行出来るというメリットに加えて、プラットフォーム上に集まるAPIやデータを各サービサー(マーケットプレイス利用者)と共に活用したい、というコンセプトで現在稼働しているサービスです。</p><p>今回は、一体MONETマーケットプレイスで何が出来るのか、イメージ作りに貢献できればと思い、デモアプリ開発を行ってみました。デモアプリについては、<a href="https://developer.monet-technologies.co.jp/tutorials#tutorial-eventdrt">MONETマーケットプレイス チュートリアルページ</a>に実装など詳細を記載しています。</p><p>別途、ご参考にしていただけると幸いです。</p><h1 id="MaaSを題材にしたデモアプリ開発"><a href="#MaaSを題材にしたデモアプリ開発" class="headerlink" title="MaaSを題材にしたデモアプリ開発"></a>MaaSを題材にしたデモアプリ開発</h1><p>それでは簡単に今回作ったデモアプリを紹介していきます。大まかに、</p><ol><li>デモアプリのコンセプト</li><li>構成</li><li>各機能でのマーケットプレイス利用場面</li></ol><p>といった構成で説明します。</p><h2 id="デモアプリコンセプトとエンドユーザのイメージ"><a href="#デモアプリコンセプトとエンドユーザのイメージ" class="headerlink" title="デモアプリコンセプトとエンドユーザのイメージ"></a>デモアプリコンセプトとエンドユーザのイメージ</h2><p>今回作成するデモアプリの簡単な背景を決めておきます。私はデマンド交通サービスの提供者であり、複数のイベント提供会社と提携しながら、エリア内のエンドユーザをイベント会場付近まで送迎するサービスを開始したいサービサーだとします。</p><img src="/images/20210826a/image_2.png" alt="デモアプリコンセプトとエンドユーザのイメージ" width="1198" height="526" loading="lazy"><p>この時、エンドユーザ向けのアプリとして「<strong>イベント会場への移動をシームレスに検索できるマルチモーダルMaaSアプリ</strong>」を考えました。今回は、移動手段として、電車とデマンド交通サービス、徒歩を組み合わせた移動を想定します。</p><img src="/images/20210826a/image_3.png" alt="イベント会場への移動をシームレスに検索できるマルチモーダルMaaSアプリイメージ" width="1022" height="210" loading="lazy"><p>このような流れで移動するエンドユーザに対して、イベントの開始時刻に合わせたデマンド交通サービスを検索/予約を提供できるシステムを提供したいと思います。</p><h2 id="システムの構成"><a href="#システムの構成" class="headerlink" title="システムの構成"></a>システムの構成</h2><p>作成するデモアプリのイメージがついたので、実際のサービスに関わるシステムを図に起こしてみます。</p><img src="/images/20210826a/image_4.png" alt="システム構成図" width="1200" height="462" loading="lazy"><p>実際のオンデマンドモビリティサービス運用を考えると、</p><ol><li>車両や乗客、ドライバーの情報を管理する機能</li><li>実際の道路(地図情報)に従って移動経路や時間を計算する機能</li><li>予約を管理する機能</li><li>ドライバー用の運行案内機能</li></ol><p>などなど、エンドユーザが使うアプリケーションの他に多くの管理機能を実装する必要があります。しかし、MONETマーケットプレイスでは、<strong>オンデマンドモビリティに普遍的に必要であろう機能をパッケージ化して利用できる</strong>ようにしています。</p><p>これは <strong>「サービサーはMaaSアプリ開発において付加価値を提供したい部分(エンドユーザ向けアプリ)の開発に注力できる」</strong>ことを意味します。</p><img src="/images/20210826a/image_5.png" alt="サービサーはMaaSアプリ開発において付加価値を提供したい部分(エンドユーザ向けアプリ)の開発に注力できる図" width="1200" height="454" loading="lazy"><p>エンドユーザ向けアプリに必要な機能のインターフェイスとしてAPIを提供しているため、こちらを利用してデモアプリを開発します。</p><h2 id="MONETマーケットプレイスを利用した各種開発"><a href="#MONETマーケットプレイスを利用した各種開発" class="headerlink" title="MONETマーケットプレイスを利用した各種開発"></a>MONETマーケットプレイスを利用した各種開発</h2><p>今回は、エンドユーザ向けアプリをWebアプリとして実装することにより、<strong>PC/Android/iPhoneなどデバイスを問わずに利用できるアプリ</strong>を目指します。</p><p>ここで利用するのは、Vueフレームワークのマテリアルデザインライブラリである<a href="https://vuetifyjs.com/en/">Vuetify</a>です。</p><p>こちらのOSSを使うことにより、</p><ul><li><strong>ブラウザの機能を活用してPC/スマホ両方に対応したアプリケーションの開発</strong></li><li><strong>実装済みのコンポーネントを活用することで実装時間の短縮</strong></li></ul><p>を図ることができ、短期間でサクッと予約アプリを実装できます。</p><p>それでは以下で、実際にどのような場面でMONETマーケットプレイス上のAPIを利用出来るのか、いくつか例を紹介します。</p><h3 id="各種APIを使った管理者Web登録用ポイントの決定"><a href="#各種APIを使った管理者Web登録用ポイントの決定" class="headerlink" title="各種APIを使った管理者Web登録用ポイントの決定"></a>各種APIを使った管理者Web登録用ポイントの決定</h3><p>MONETマーケットプレイスが提供する<a href="https://developer.monet-technologies.co.jp/products/2c92a0fd76f5b2b00176f99cea7463a3">「デマンド交通サービス開発キット」</a>では、運行するデマンド交通サービス用に「ポイント(利用者の乗降地点)」を管理者が設定する必要があります。登録自体はマスタ管理用の画面が用意されているので簡単な操作で追加登録可能です。</p><img src="/images/20210826a/image_6.png" alt="デマンド交通サービス開発キット" width="1200" height="449" loading="lazy"><p>ただ、登録するポイントの緯度経度は管理者があらかじめ自身で用意する必要があります。</p><p>今回のデモアプリではエリア内の駅からイベント付近までの送迎を扱いたいため、駅やイベント会場の緯度経度を取得する必要がありますが、この時に便利なのが以下のAPIです。</p><ol><li><a href="https://developer.monet-technologies.co.jp/products/2c92a00e70cd67470170e25e80cb497d">株式会社ゼンリンデータコム提供「いつもNAVI API」</a></li><li><a href="https://developer.monet-technologies.co.jp/products/2c92a00e77dd376a0177eca2514329af">ぴあ株式会社提供「イベント・公演情報検索 API」 </a></li></ol><p>「いつもNAVI API」では、<strong>POI(Point of Interest)情報を取得することができ、あるエリア内の駅や施設の情報を取得することができます。</strong>しかも、単なる駅の大雑把な緯度経度ではなく、出入り口付近の道路といった細かい緯度経度情報を取得することができ、デマンド交通サービスとの相性が最高です。</p><p>また、イベント会場に関しては、「イベント・公演情報検索 API」を用いることによって会場の地点情報を取得することができます。なお、こちらは建物自体の緯度経度情報になるので、降車ポイントとしては、付近の道路の緯度経度に補正する必要があります。</p><p>ここで嬉しい情報なのですが、「いつもNAVI API」には、”与えられた緯度経度から最寄りの道路上の緯度経度を返すAPI”が存在するため、ふたつを組み合わせることで”イベント会場付近の道路の緯度経度”を取得することができます。</p><p>さらに、パラメータを設定することによって、大きめの道路を選択する、といった細やかな調節も可能になります。</p><p>今回のデモアプリでは、せっかくなので、これらのAPIを活用した乗降地点の設定を行ってみました。</p><ol><li>エリア内の駅の出入り口の緯度経度を取得・乗車用ポイントとして登録</li><li>エリア内のイベント会場の緯度経度を取得</li><li>イベント会場の緯度経度をk-means法でk個に分類</li><li>各クラスタの重心の緯度経度を計算</li><li>計算した緯度経度を道路上に補正・降車用ポイントとして登録</li></ol><p>といった流れで、いい感じのエリア内の乗降車ポイント登録をすることが出来ます。</p><img src="/images/20210826a/image_7.png" alt="乗降車ポイントの登録フロー" width="1026" height="394" loading="lazy"><p>実際のスクリプトとしては2段階に分けて、</p><ul><li>レスポンス形式の加工(XML→CSV)</li><li>クラスタリング処理</li></ul><p>を行いました。レスポンスの形式加工は少々煩雑になってしまいますが、以下のようなPythonスクリプトになります。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 「イベント・公演情報検索 API」で取得したイベント情報を利用しやすい形に加工</span></span><br><span class="line"><span class="keyword">import</span> xmltodict</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一旦ぴあAPIのレスポンスを保存して、そちらを読み込む</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example/events.xml&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  data = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># CSV形式にコンバート</span></span><br><span class="line">d = xmltodict.parse(data)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example/events.csv&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  writer = csv.writer(f)</span><br><span class="line">  writer.writerow([<span class="string">&quot;id&quot;</span>, <span class="string">&quot;venueCode&quot;</span>, <span class="string">&quot;venueName&quot;</span>, <span class="string">&quot;venueLat&quot;</span>, <span class="string">&quot;venueLon&quot;</span>])</span><br><span class="line"></span><br><span class="line">  event_releases = d[<span class="string">&quot;result&quot;</span>][<span class="string">&quot;eventReleases&quot;</span>][<span class="string">&quot;eventRelease&quot;</span>]</span><br><span class="line">  idx = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> event_release <span class="keyword">in</span> event_releases:</span><br><span class="line">    event = event_release[<span class="string">&quot;event&quot;</span>]</span><br><span class="line">    performs = event_release[<span class="string">&quot;performs&quot;</span>][<span class="string">&quot;perform&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(performs, <span class="built_in">list</span>):</span><br><span class="line">      performs = [performs]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> perform <span class="keyword">in</span> performs:</span><br><span class="line">      venue = perform[<span class="string">&quot;venue&quot;</span>]</span><br><span class="line">      venue_name = venue[<span class="string">&quot;venueName&quot;</span>]</span><br><span class="line">      venue_code = venue[<span class="string">&quot;venueCode&quot;</span>]</span><br><span class="line">      <span class="keyword">if</span> (<span class="string">&quot;worldLatitude&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> venue.keys()) <span class="keyword">or</span> (<span class="string">&quot;worldLongitude&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> venue.keys()):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">      venue_lat = <span class="built_in">float</span>(venue[<span class="string">&quot;worldLatitude&quot;</span>])</span><br><span class="line">      venue_lon = <span class="built_in">float</span>(venue[<span class="string">&quot;worldLongitude&quot;</span>])</span><br><span class="line"></span><br><span class="line">      <span class="comment"># 東京会場のみに絞る</span></span><br><span class="line">      <span class="keyword">if</span> venue[<span class="string">&quot;prefectureCode&quot;</span>] != <span class="string">&quot;13&quot;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">      writer.writerow([idx, venue_code, venue_name, venue_lat, venue_lon])</span><br><span class="line">      idx += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>加工したレスポンスから、イベント会場をクラスタリングして重心座標を取得するPythonスクリプトは以下になります。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># イベント会場を抽出</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># イベント会場を抽出</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;example/events.csv&quot;</span>)</span><br><span class="line">df_reduced = df.loc[:, [<span class="string">&quot;venueCode&quot;</span>, <span class="string">&quot;venueName&quot;</span>, <span class="string">&quot;venueLat&quot;</span>, <span class="string">&quot;venueLon&quot;</span>]]</span><br><span class="line">df_reduced = df_reduced.drop_duplicates()</span><br><span class="line">df_reduced.to_csv(<span class="string">&quot;example/venues.csv&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># イベント会場をまとめたポイントを生成</span></span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;example/venues.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># イベント会場を7クラスタに分割</span></span><br><span class="line">staNum = <span class="number">7</span></span><br><span class="line">kmeans_model = KMeans(n_clusters=staNum, random_state=<span class="number">10</span>).fit(</span><br><span class="line">    df.loc[:, [<span class="string">&quot;venueLat&quot;</span>, <span class="string">&quot;venueLon&quot;</span>]])</span><br><span class="line">labels = kmeans_model.labels_</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---assigned label---&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(labels)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---------&quot;</span>)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;nearestPointId&quot;</span>] = labels+<span class="number">1</span></span><br><span class="line">df.to_csv(<span class="string">&quot;example/fixedVenues.csv&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;example/reducedVenues.csv&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">  writer = csv.writer(f)</span><br><span class="line">  writer.writerow([<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;meanLat&quot;</span>, <span class="string">&quot;meanLon&quot;</span>])</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(staNum):</span><br><span class="line">    name = <span class="string">f&quot;イベント会場<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>&quot;</span></span><br><span class="line">    mean_lat = df[df[<span class="string">&quot;nearestPointId&quot;</span>] == (i+<span class="number">1</span>)].mean()[<span class="string">&quot;venueLat&quot;</span>]</span><br><span class="line">    mean_lon = df[df[<span class="string">&quot;nearestPointId&quot;</span>] == (i+<span class="number">1</span>)].mean()[<span class="string">&quot;venueLon&quot;</span>]</span><br><span class="line">    writer.writerow([i + <span class="number">1</span>, name, mean_lat, mean_lon])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;done!!!&quot;</span>)</span><br></pre></td></tr></table></figure><p>このような形で得られた<code>reducedVenues.csv</code>を参照して、<code>[meanLat,meanLon]</code>を引数として「いつもNAVI API」を利用すると、道路上に補正された緯度経度を得ることができます。</p><p>今回は単なる緯度経度情報のクラスタリングを行いましたが、「イベント・公演情報検索 API」で取得できるイベント情報にはイベント規模を示す情報も含まれているので、こちらで重み付けしたクラスタを計算することも可能です。</p><h3 id="イベント情報やチケット販売情報の表示"><a href="#イベント情報やチケット販売情報の表示" class="headerlink" title="イベント情報やチケット販売情報の表示"></a>イベント情報やチケット販売情報の表示</h3><p>イベント参加を促進させるためには、イベントやチケットの情報を分かりやすく伝える必要があります。</p><p>「イベント・公演情報検索 API」を用いると、イベントの雰囲気を想起させるような画像や説明だけでなく、チケット購入用のURLまで取得できるため、実際のイベント参加に繋がる情報を取得可能です。</p><p>これらの情報をAPIで取得した後、画面にわかりやすく表示する必要がありますが、こちらはVuetifyのコンポーネントを活用することによって、短時間で実装することができます。</p><p>例えば、成形したデータをVuetifyのカレンダーに渡すことによって、1時間もかからずにイベントスケジュールを表示することができました。</p><img src="/images/20210826a/image_8.png" alt="イベントスケジュール" width="1200" height="638" loading="lazy"><p>また、今回はイベントという情報に注目したデモアプリを作ってみましたが、MONETマーケットプレイスには、</p><ul><li><a href="https://developer.monet-technologies.co.jp/products/2c92a0ff74a2d6c00174b89bc12f42de">るるぶDATA 観光API</a></li><li><a href="https://developer.monet-technologies.co.jp/products/2c92a00774a2c96e0174b8a19e0779d5">るるぶDATA 温泉地API</a></li></ul><p>といった、観光情報を提供するAPIも存在しますし、</p><ul><li><a href="https://developer.monet-technologies.co.jp/products/2c92a0fe74b89a350174b89f6c1a04b7">天気予報 API</a></li></ul><p>を組み合わせることで当日の天気に応じた情報提供なども可能で、実現できることは多岐に渡ります。</p><h3 id="地図上に各種情報を表示"><a href="#地図上に各種情報を表示" class="headerlink" title="地図上に各種情報を表示"></a>地図上に各種情報を表示</h3><p>MaaSサービスではさまざまな情報を地図上に表示する必要がありますが、<br>今回は<a href="https://github.com/vue-leaflet/Vue2Leaflet">vue2leaflet</a>と呼ばれるライブラリを利用して、さっくり地図の表示を行ってみました。</p><p>この地図上には、イベント情報や乗降車地点ポイントをピンとして乗せたり、ピンに対して詳細を表示するポップアップを追加することができます。</p><p>また、ゼンリンAPIを使って取得した徒歩経路を地図上に乗せることができます。今回はGeoJSON形式に整形することにより、汎用性を持たせた形で地図上に乗せることができました。</p><img src="/images/20210826a/image_9.png" alt="地図表示" width="698" height="435" loading="lazy"><p>さらに、デマンド交通サービス開発キットの予約検索APIや「いつもNAVI API」の徒歩ルート検索APIを組み合わせることで、経路検索結果をポップアップとして表示することができました。</p><p>なお、予約検索APIでは、</p><ul><li>予約しようとした日時に対して運行している車が稼働しているか</li><li>その時間の前後に既に予約している乗客が存在する場合、希望時間通りに車が到着できるか</li></ul><p>などを見ながら予約可能かどうかを判断し結果を返すため、オーバーブッキングや物理的に不可能な予約は予め弾けるようにレスポンスを返します。</p><img src="/images/20210826a/image_10.png" alt="イベント会場まで移動するまでの経路" width="1200" height="747" loading="lazy"><p>上記画像のように、エンドユーザが自身の最寄り駅からイベント会場まで移動するまでの経路をマルチモーダル的に表示することができました。</p><p>こちらの画面実装もAPIとVuetifyのコンポーネントの組み合わせなので、実装時間はAPIの使い方に慣れる時間を含めても、おおよそ数日です。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>本記事のまとめは、</p><p>「MONETマーケットプレイス上のプロダクトとOSSを活用することによって、短時間でMaaSアプリを作成することができる」</p><p>この一言に尽きます。</p><p>もちろん、実際にサービス運用するためには細々した部分を洗練させる必要がありますが、むしろそういったこだわりに時間をかけられるようになるのではないかと感じています。</p><p>本記事を通して、MONETマーケットプレイス上の各プロダクトを用いて独自のMaaSアプリを開発するイメージに繋がれば幸いです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/TypeScript/">TypeScript</category>
      
      <category domain="https://future-architect.github.io/tags/Vue-js/">Vue.js</category>
      
      <category domain="https://future-architect.github.io/tags/MaaS/">MaaS</category>
      
      <category domain="https://future-architect.github.io/tags/MONET%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%88%E3%83%97%E3%83%AC%E3%82%A4%E3%82%B9/">MONETマーケットプレイス</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%96%E9%83%A8%E5%AF%84%E7%A8%BF/">外部寄稿</category>
      
      <category domain="https://future-architect.github.io/tags/Vuetify/">Vuetify</category>
      
      
      <comments>https://future-architect.github.io/articles/20210826a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>最高の持ち歩きキーボード考</title>
      <link>https://future-architect.github.io/articles/20210825b/</link>
      <guid>https://future-architect.github.io/articles/20210825b/</guid>
      <pubDate>Tue, 24 Aug 2021 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20210825b/pic0.jpg&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;900&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20210825b/pic0.jpg" alt="" width="1200" height="900" loading="lazy"><p><a href="/articles/20210823a/">フューチャー夏の自由研究連載2021</a>の3日目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。TIGの大野です。2021年4月新卒入社です。</p><p>夏の自由研究連載の2日目「<a href="/articles/20210824a/">Sesame3にICカード施錠/解錠機能を実装してみた with Golang &amp; Python</a>」を投稿された宮永さんの同期です。</p><p>現在所属するプロジェクトでの私の主な業務の一つは、お客様先へ出張して会議に出席し、議事録を取ることです。せっかくなら、出張先でもお気に入りのキーボードで楽しく議事録を取りたいですよね。</p><p>そこで、この記事では、出張のお供にぴったりな「最高の持ち歩きキーボード」を考察・製作していきたいと思います！</p><h1 id="設計方針"><a href="#設計方針" class="headerlink" title="設計方針"></a>設計方針</h1><p>製作を始める前に、まずは「最高の持ち歩きキーボード」に必要な条件を整理してみます。</p><h3 id="携帯性"><a href="#携帯性" class="headerlink" title="携帯性"></a>携帯性</h3><p>やはり「持ち歩き」キーボードですから、携帯性は不可欠でしょう。具体的には、以下のような条件が考えられます。</p><ul><li><strong>コンパクトであること</strong><br>最低でも、A4サイズの鞄にすっぽり入るくらいのサイズ感でないと論外です。分割キーボードという選択肢もありますが、左右を接続するTRRSケーブルを持ち歩くのが億劫だったため、今回は一枚板の60%キーボードを採用します。本当は40%キーボードに挑戦しようかと思ったのですが、議事録を取るという目的がある以上、数字キーは欲しいなと思い、諦めました……。</li><li><strong>軽いこと</strong><br>あんまり重たいと持ち歩く気をなくしてしまいます。かといって、あまりに軽いと打鍵の衝撃でキーボードが動いてしまうので、いい塩梅の重さが必要です。感覚としては、500mlペットボトル1本分=約500gくらいの重さだと良いかなと思っています。</li><li><strong>頑丈であること</strong><br>持ち運ぶものですから、気軽に鞄に放り込めるような頑丈さもほしいところです。わざわざキーボード用の外袋を用意するのは面倒なので、キーボード自体に蓋があるとなお良いです。</li></ul><p>※<strong>ちなみに、分割キーボードのビルドに関しては、過去に「<a href="/articles/20200909/">キーボードを組み立ててみた話</a>」という記事が公開されています。キーボードの分割にご興味のある方は、ぜひご覧ください！</strong></p><h3 id="静音性"><a href="#静音性" class="headerlink" title="静音性"></a>静音性</h3><p>持ち歩いて使う以上、必然的に人のいる場で使う機会が多くなることが予想されます。真面目な会議をしている場で、私の打鍵音が響き渡る……なんて事態は避けたいので、ある程度の静音性も必須です。</p><p>目安としては、ノートPC付属のキーボード以下くらいの静音性は欲しいところです。</p><h3 id="Coolさ"><a href="#Coolさ" class="headerlink" title="Coolさ"></a>Coolさ</h3><p><strong>これが一番大事です。</strong><br>今回のコンセプトはずばり、どこに出しても恥ずかしくない、<strong>「ナチュラル&amp;ボタニカルな大人のキーボード」</strong>です。疲れたときにふと手元を見るとふわりと癒やしてくれるような、目にも心にも優しいキーボードを目指します。</p><h1 id="部品選定"><a href="#部品選定" class="headerlink" title="部品選定"></a>部品選定</h1><p>前項で決めた設計方針に基づいて、パーツを決めていきます。パーツのほとんどは、<a href="https://shop.yushakobo.jp/">遊舎工房</a>と<a href="https://kbdfans.com/">KBDFANS</a>で購入しました。</p><p>キーボードを作るのに必要なパーツは、大きく以下のものがあります。</p><img src="/images/20210825b/pic1.png" alt="キーボードパーツ" width="1090" height="818" loading="lazy"><p><strong>① ケース</strong><br>PCBを収めるケースです。PCBの規格にあったものを選びます。一番外側の、見た目に大きく関わるパーツの一つです。今回は、軽くて丈夫、おまけに蓋までついていて持ち歩きにぴったりなウォールナット製のケースを採用します。また、打鍵時にケース内で音が反響してしまうのを緩和するスポンジも追加します。</p><p><strong>②プレート</strong><br>キースイッチをはめ込むための穴が空いたプレートです。キースイッチのグラつきを抑えます。これも、PCBの規格にあったものを選びます。真鍮製の方が音が良いという意見がありますが、お財布事情によりアルミ製です。</p><p><strong>③PCB（プリント基板）&amp;コントローラ</strong><br>キーボードの核となる、回路を収めた基板です。キースイッチ、USBインタフェース、Nキーロールオーバー時の回路の誤動作を防止するダイオード、キーボードを光らせるLED、そしてPCと通信するためのコントローラなどを実装します。今回は、最初からキースイッチ以外のパーツがすべて実装されている<a href="https://shop.yushakobo.jp/products/dz60">DZ60</a>というPCBを使用します。実装されているUSBインタフェースがType-CなのもGoodです。</p><p><strong>④キースイッチ</strong><br>キーボードの主役、キースイッチです。私は普段、<a href="https://talpkeyboard.net/items/5fd61629b00aa37e7271319d">FEKER Like Holy Panda</a>というタクタイル軸を愛用しているのですが、この軸の魅力はなんといっても、ハイヒールで石畳を歩くときのようなコツコツとした硬質な打鍵音です。自宅で使う分には大変良いのですが、会議の場では顰蹙を買うこと間違いなしです。そこで、今回は<a href="https://shop.yushakobo.jp/products/novelkeys-cream-switches">NovelKeys Cream Switch</a>というリニア軸に挑戦してみます。サクサクとした打鍵感、ブレのない軸、そしてこの優しいクリーム色がお気に入りです。</p><p><strong>⑤キーキャップ</strong><br>キースイッチに被せるキャップです。ケース同様、見た目に大きく関わるパーツの一つです。また、指ざわりや打鍵音に影響するため、その材質も重要なポイントです。今回は、静音性を意識して比較的打鍵音が低めのPBT素材のものを選びました。PBT特有のざらざらとした質感が高級感を演出します。</p><p><strong>⑥スタビライザー</strong><br>スペースキーやエンターキーなど、長いキーを支えるためのパーツです。作成したいキー配列に合わせて、必要数用意します。PCBにネジ止めするタイプと爪で引っ掛けるタイプがあり、前者のほうが静音性が高いのですが、お財布と相談して今回は爪で引っ掛けるタイプのものを使用します。その代わり、スタビライザーとPCBが接する面に布テープを貼ることで反響音を緩和してあげます。</p><h1 id="組み立て"><a href="#組み立て" class="headerlink" title="組み立て"></a>組み立て</h1><p>パーツを集め終えたら、あとはPCBにパーツをはんだづけするのみです！</p><p>と言いたいのですが、まずはキースイッチとスタビライザーをルブしていきます。「ルブ」とは、パーツに潤滑油を塗ることで、これをするとしないで、打鍵のスムーズさや静音性が大きく変わってきます。80個ほどのパーツを一つひとつ分解して潤滑油を塗っていく大変な作業ですが、頑張って塗ります。</p><p>今回は、スプリングに<a href="https://shop.yushakobo.jp/products/lubricants?variant=37665261060257">Krytox GPL 105</a>を、ステムとボトムハウジング（写真中クリーム色のパーツ）に<a href="https://shop.yushakobo.jp/products/lubricants?variant=37665260994721">Krytox GPL 205 Grade 0</a>を使用しました。</p><img src="/images/20210825b/pic2.png" alt="ステムとボトムハウジング" width="1136" height="852" loading="lazy"><p>ルブし終えたら、いよいよはんだづけするのみです。</p><p>多様なキー配列を実現するため、PCBにはたくさんのキースイッチ用スルーホールが空いています。自分の作りたい配列をよく確認し、どこにはんだづけするか、間違えないように気をつけて実装していきます。</p><img src="/images/20210825b/pic3.JPG" alt="はんだ付け" width="1200" height="900" loading="lazy"><p>はんだづけを終えたら残りのパーツを取り付けていき、組み立て完了です！<br>ぱっきり割れたスペースバーがキュートです。</p><img src="/images/20210825b/pic4.JPG" alt="完成したキーボード" width="1200" height="900" loading="lazy"><h1 id="ファームウェア作成"><a href="#ファームウェア作成" class="headerlink" title="ファームウェア作成"></a>ファームウェア作成</h1><p>DZ60の場合は、最初からファームウェアが書き込まれているため、このままでもキーボードとして使えます。しかし、自作キーボードの醍醐味はやはり自分でキーマップをカスタムすることです。ということで、これからオリジナルのファームウェアを作成していきます。</p><p>とはいえ、1からファームウェアを自作するのはとても大変です。そこで、自作キーボードでは、<a href="https://github.com/qmk/qmk_firmware">QMK Firmware</a>というオープンソースファームウェアの利用が一般的です。</p><p>頒布されている自作キーボードのDIYキットやPCBの多くは、QMKのGitリポジトリ上で専用のファームウェアが公開されています。DZ60もQMK上でファームウェアが公開されているため、今回は<a href="https://github.com/qmk/qmk_firmware/tree/master/keyboards/dz60">そちら</a>を利用します。</p><p>DZ60のファームウェア構成は以下のようになっています。</p><figure class="highlight sh"><figcaption><span>qmk_firmware/keyboards/dz60/</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">config.h</span><br><span class="line">dz60.c</span><br><span class="line">dz60.h</span><br><span class="line">info.json</span><br><span class="line">readme.md</span><br><span class="line">rules.mk</span><br><span class="line">keymaps</span><br><span class="line">   └─ &lt;キーマップ名&gt;</span><br><span class="line">         └─ keymap.c</span><br></pre></td></tr></table></figure><p>ピンの割当といった<code>keymaps</code>以外の共通定義はそのまますべてお借りし、<code>keymaps</code>にオリジナルのキーマップ定義を追加するという方法で、ファームウェアを作成していきます。</p><p>実際に作成したキーマップの<code>kurumi</code>がこちらです！</p><figure class="highlight c"><figcaption><span>keymaps/kurumi/keymap.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> QMK_KEYBOARD_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* keymap layer name */</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">keymap_layer</span> &#123;</span></span><br><span class="line">_BL,</span><br><span class="line">_FL,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* custom keycode name */</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">custom_keycoads</span>&#123;</span></span><br><span class="line">M_HNZN,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ______ KC_TRNS</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">uint16_t</span> PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* BASE Layer</span></span><br><span class="line"><span class="comment">   * ,-----------------------------------------------------------------------------------------.</span></span><br><span class="line"><span class="comment">   * | Esc |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  8  |  9  |  0  |  -  |  =  |   Bkspc   |</span></span><br><span class="line"><span class="comment">   * |-----------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">   * | Tab    |  Q  |  W  |  E  |  R  |  T  |  Y  |  U  |  I  |  O  |  P  |  [  |  ]  |    \   |</span></span><br><span class="line"><span class="comment">   * |-----------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">   * | HNZN    |  A  |  S  |  D  |  F  |  G  |  H  |  J  |  K  |  L  |  ;  |  &#x27;  |    Enter    |</span></span><br><span class="line"><span class="comment">   * |-----------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">   * | Shift     |  Z  |  X  |  C  |  V  |  B  |  N  |  M  |  ,  |  .  |  /  | ` ~ |  U  | Del |</span></span><br><span class="line"><span class="comment">   * |-----------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">   * | Ctrl |  Win  |  Alt  |    Space    | _FN |     Space     | Alt | Ctrl |  L  |  D  |  R  |</span></span><br><span class="line"><span class="comment">   * `-----------------------------------------------------------------------------------------&#x27;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">[_BL] = LAYOUT_directional(</span><br><span class="line">      KC_ESC,  KC_1,    KC_2,    KC_3,    KC_4,    KC_5,    KC_6,    KC_7,    KC_8,    KC_9,    KC_0,    KC_MINS, KC_EQL,  ______,  KC_BSPC,</span><br><span class="line">      KC_TAB,  KC_Q,    KC_W,    KC_E,    KC_R,    KC_T,    KC_Y,    KC_U,    KC_I,    KC_O,    KC_P,    KC_LBRC, KC_RBRC, KC_BSLS,</span><br><span class="line">      M_HNZN,  KC_A,    KC_S,    KC_D,    KC_F,    KC_G,    KC_H,    KC_J,    KC_K,    KC_L,    KC_SCLN, KC_QUOT, KC_ENT,</span><br><span class="line">      KC_LSFT, KC_Z,    KC_X,    KC_C,    KC_V,    KC_B,    KC_N,    KC_M,    KC_COMM, KC_DOT,  KC_SLSH, KC_GRV,  KC_UP,   KC_DEL,</span><br><span class="line">      KC_LCTL, KC_LGUI, KC_LALT, KC_SPC,  MO(_FL), KC_SPC,  KC_RALT, KC_RCTL, KC_LEFT, KC_DOWN, KC_RIGHT</span><br><span class="line">      ),</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* FN Layer</span></span><br><span class="line"><span class="comment">   * ,-----------------------------------------------------------------------------------------.</span></span><br><span class="line"><span class="comment">   * |Reset|  F1 |  F2 |  F3 |  F4 |  F5 |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |           |</span></span><br><span class="line"><span class="comment">   * |-----------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">   * |        |     |     | Esc |     |     |     |     | Ins |     | Psc |     |     |        |</span></span><br><span class="line"><span class="comment">   * |-----------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">   * |         | App |     | Del |     |     |  L  |  D  |  U  |  R  |     |     |             |</span></span><br><span class="line"><span class="comment">   * |-----------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">   * |           |     |     |     |     |     |  HM | End |     |     |     |     |     |     |</span></span><br><span class="line"><span class="comment">   * |-----------------------------------------------------------------------------------------+</span></span><br><span class="line"><span class="comment">   * | Ctrl |  Win  |  Alt  |             | _BS |               | Alt | Ctrl |     |     |     |</span></span><br><span class="line"><span class="comment">   * `-----------------------------------------------------------------------------------------&#x27;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  [_FL] = LAYOUT_directional(</span><br><span class="line">      RESET,   KC_F1,   KC_F2,   KC_F3,   KC_F4,   KC_F5,   KC_F6,   KC_F7,   KC_F8,   KC_F9,   KC_F10,  KC_F11,  KC_F12,  ______,  ______,</span><br><span class="line">      ______,  ______,  ______,  KC_ESC,  ______,  ______,  ______,  ______,  KC_INS,  ______,  KC_PSCR, ______,  ______,  ______,</span><br><span class="line">      ______,  KC_APP,  ______,  KC_DEL,  ______,  ______,  KC_LEFT, KC_DOWN, KC_UP,   KC_RIGHT,______,  ______,  ______,</span><br><span class="line">      ______,  ______,  ______,  ______,  ______,  ______,  KC_HOME, KC_END,  ______,  ______,  ______,  ______,  ______,  ______,</span><br><span class="line">      KC_LCTL, KC_LGUI, KC_LALT, ______,  ______,  ______,  KC_RALT, KC_RCTL, ______,  ______,  ______</span><br><span class="line">      ),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* result of process_record_user */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROCESS_OVERRIDE_BEHAVIOR   (false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PROCESS_USUAL_BEHAVIOR      (true)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">process_record_user</span><span class="params">(<span class="keyword">uint16_t</span> keycode, <span class="keyword">keyrecord_t</span> *record)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (keycode) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> M_HNZN: &#123;</span><br><span class="line"><span class="keyword">if</span>(record-&gt;event.pressed)&#123;</span><br><span class="line">SEND_STRING(SS_LALT(<span class="string">&quot;`&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> PROCESS_OVERRIDE_BEHAVIOR;</span><br><span class="line">&#125; <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line">&#125; <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> PROCESS_USUAL_BEHAVIOR;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>キーマップ作成に際し、工夫したポイントは次の2つです。</p><h3 id="親指の位置にレイヤーキー"><a href="#親指の位置にレイヤーキー" class="headerlink" title="親指の位置にレイヤーキー"></a>親指の位置にレイヤーキー</h3><p>なにせ60%キーボード、キーの数が足りないので、足りないキーを仮想的に補うレイヤー機能を使う必要があります。今回の場合は、<code>MO(_FL)</code>キーを用意し、このキーを押している間だけ入力レイヤーがファンクションレイヤーに切り替わるという手法を取りました。</p><p>ここで重要なのが、どのキーに<code>MO(_FL)</code>キーを割り当てるかという点です。キー割り当てが比較的空いているのはベースレイヤーの右下のあたりですが、レイヤー切り替えのたびに右手の小指が攣りそうになるので却下です。</p><p>そこで、今回はスペースバーを真っ二つに割り、ど真ん中にレイヤーキーを配置してみました。ホームポジションに指を置いた際、ちょうど右手親指が右スペースキーとレイヤーキーの間に来るようになっており、自然なキータッチでレイヤーキーを押下できます。もちろん左手親指からもすぐ近くなので、押したいキーに合わせて押下する手を変えることも簡単です。</p><p>普通のキー配列ではサボりがちな親指をうまく有効活用できたかなと思います。</p><h3 id="US配列で半角-全角キーを再現"><a href="#US配列で半角-全角キーを再現" class="headerlink" title="US配列で半角/全角キーを再現"></a>US配列で半角/全角キーを再現</h3><p>US配列の大きな欠点は、半角/全角キーがないことです。<code>Alt</code>+<code>~</code>キーで半角/全角を切り替えられますが、頻繁に使う半角/全角切り替えを1キーでできないのは、耐えがたいことです。</p><p>そこで、<a href="https://www.taneyats.com/entry/qmk-ime-toggle">こちらの記事</a>を参考に<code>M_HNZN</code>というマクロを作成し、CapsLockキーに割り当てることで、無事1タップでの半角/全角切り替えを実現しました。マクロは、キー入力検知時に毎回呼び出される関数<code>process_record_user</code>内で以下のように定義しています。</p><figure class="highlight c"><figcaption><span>keymaps/kurumi/keymap.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> M_HNZN: &#123;</span><br><span class="line">    <span class="keyword">if</span>(record-&gt;event.pressed)&#123;</span><br><span class="line">          SEND_STRING(SS_LALT(<span class="string">&quot;`&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> PROCESS_OVERRIDE_BEHAVIOR;</span><br><span class="line">&#125; <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p><code>M_HNZN</code>キー押下時、元々定義されたキーコードの送信をキャンセルし、<code>左Alt</code>+<code>~</code>キーコードを送信するという処理です。今回はごくシンプルな構成ですが、やろうと思えばキーのタップや長押しなど、様々なキー入力の状態に合わせてマクロを組むことができます。時間を見つけて色々試して見ようと思います。</p><p>「要らない子」と言われて久しいCapsLockキーの救済も兼ねた一石二鳥のマクロでした。</p><h1 id="ファームウェア書き込み"><a href="#ファームウェア書き込み" class="headerlink" title="ファームウェア書き込み"></a>ファームウェア書き込み</h1><p>いよいよファームウェアを書き込んでいきます。</p><p>なお、QMK Projectには<a href="https://github.com/qmk/qmk_configurator">QMK Configurator</a>や<a href="https://github.com/qmk/qmk_toolbox">QMK Toolbox</a>といったファームウェア作成・書き込みのための便利なツールも存在するのですが、今回は<a href="https://www.msys2.org/">MSYS2</a>上に構築したQMK環境でビルドしていきます。環境構築の詳細は<a href="https://docs.qmk.fm/#/newbs_getting_started">公式ドキュメント</a>をご参照ください。（なお、以下のビルド手順は、2021/08/25時点の<a href="https://docs.qmk.fm/#/newbs_getting_started">公式ドキュメント</a>で紹介されている手順より古いものですので、ご注意ください。）</p><p>まずはQMK Firmwareをインストールしたディレクトリまで移動し、さきほど作成したキーマップの<code>kurumi</code>を指定してファームウェアをコンパイルします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make dz60:kurumi</span><br></pre></td></tr></table></figure><p>問題なければ、<code>hex</code>ファイルが出力されます。続いて以下のコマンドを実行し、ファームウェアを書き込みます。<code>dfu</code>はブートローダーの種類を指定するオプションです。DZ60に搭載されているブートローダーは<code>atmel-dfu</code>なので、<code>dfu</code>を指定しています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make dz60:kurumi:dfu</span><br></pre></td></tr></table></figure><p>途中でブートローダーの起動を求められるので、キーボートを接続し、リセットボタンを押下して起動します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dfu-programmer: no device present.</span><br><span class="line">ERROR: Bootloader not found. Trying again <span class="keyword">in</span> 5s.</span><br><span class="line">Bootloader Version: 0x00 (0)</span><br><span class="line">Erasing flash...  Success</span><br><span class="line">Checking memory from 0x0 to 0x6FFF...  Empty.</span><br><span class="line">0%                            100%  Programming 0x5B80 bytes...</span><br><span class="line">[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]  Success</span><br><span class="line">0%                            100%  Reading 0x7000 bytes...</span><br><span class="line">[&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;]  Success</span><br><span class="line">Validating...  Success</span><br><span class="line">0x5B80 bytes written into 0x7000 bytes memory (81.70%).</span><br></pre></td></tr></table></figure><p>このように表示されれば、書き込み成功です！</p><p>これで本当に完成です！やったー！！</p><h1 id="使ってみて"><a href="#使ってみて" class="headerlink" title="使ってみて"></a>使ってみて</h1><p>先日初めての出張があったので、早速使ってみました。</p><p>最初に立てた設計方針に照らし合わせてキーボードを評価していきます。</p><ul><li><strong>携帯性：★★☆☆☆</strong><ul><li>縦横の大きさは許容範囲ですが、蓋付きのケースにしたことで約5cmの分厚さになってしまいました。バッグの中での主張が激しいです。</li><li>そこそこ重いです。量ったら、約700gでした。電車など、座っての移動であれば問題ありませんが、「持ち歩き」となると重さが気になります。</li></ul></li><li><strong>静音性：★★★★☆</strong><ul><li>やはり静音モデルのキーボードには負けますが、十分な静音性を確保できました。打鍵音はするのですが、「コトコト」といった感じで音が低いので、会議室ではあまり目立ちません。</li></ul></li><li><strong>Coolさ：★★★★★</strong><ul><li>見た目は大満足です！MA Profileという丸みを帯びた特徴的な形のキーキャップが、ウォールナット製のケースと相まってタイプライターのような趣を醸し出しています。</li><li>実は、ケースの蓋がちょうどよいパームレストになります。機能美です。</li></ul></li></ul><img src="/images/20210825b/pic5.JPG" alt="キーボードを中心としたデスク画像" width="1200" height="900" loading="lazy"><p>反省点もありますが、なんだかんだで愛着の湧く、良いキーボードができました。キーマップなどは、これから使っていく中でどんどん改良していきたいと思います。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>せっかく作ったキーボードですが、新型コロナウイルスの感染拡大を受け、しばらく出張停止になったことでさっそく活躍機会がなくなってしまいました……。自由に歩きまわることのできる生活が早く帰ってくることを切に願うばかりです。</p><p>それまでは、ステイホームでタイピング練習を頑張ります！</p><p><a href="/articles/20210823a/">フューチャー夏の自由研究連載2021</a>、次の記事は真野さんによる「<a href="/articles/20210826b/">フォワードプロキシ</a>」です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C/">電子工作</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/">リモートワーク</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89/">自作キーボード</category>
      
      
      <comments>https://future-architect.github.io/articles/20210825b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Certified DevOps Engineer - Professional合格体験記</title>
      <link>https://future-architect.github.io/articles/20210825a/</link>
      <guid>https://future-architect.github.io/articles/20210825a/</guid>
      <pubDate>Tue, 24 Aug 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;先日AWS Certified DevOps Engineer – Professionalを受験し合格できました。&lt;/p&gt;
&lt;p&gt;これにて専門知識以外はコンプリートしました、&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>TIGの伊藤真彦です。</p><p>先日AWS Certified DevOps Engineer – Professionalを受験し合格できました。</p><p>これにて専門知識以外はコンプリートしました、<a href="/articles/20200729/">Machine learning specialtyも合格している</a>ので7冠です。</p><img src="/images/20210825a/image.png" alt="合格バッチ" width="450" height="450" loading="lazy"><h1 id="AWS-Certified-DevOps-Engineer-–-Professionalとは"><a href="#AWS-Certified-DevOps-Engineer-–-Professionalとは" class="headerlink" title="AWS Certified DevOps Engineer – Professionalとは"></a>AWS Certified DevOps Engineer – Professionalとは</h1><p>その名の通りDevOpsに特化したテストで、Solutions Architect - Professionalと双璧をなすような存在です。下位資格にSysOps Administrator – AssociateとDeveloper – Associateが存在します。</p><p>ここでのAssociateはおそらく準学士のようなニュアンスだと思いますが、Professionalと名のつく資格を持つと一人前のような気持ちになるので嬉しいですね。</p><p>試験の内容自体は下記のようなテーマが問われます。</p><ul><li>運用の自動化、CI/CD</li><li>ダウンタイムやコストを考慮したデプロイ戦略</li><li>セキュリティコンプライアンス</li><li>スケーリングのベストプラクティス</li><li>モニタリング、ログ記録</li></ul><p>具体的にはAWS CloudFormation、AWS OpsWorks、AWS Elastic Beanstalkなどデプロイ、構成管理を行うサービス群や、Amazon CloudWatch、 Amazon Inspectorなど監視、運用に役立つサービスのベストプラクティスを軸に、DevOpsについて比較的難易度の高い問題が出題されます。</p><p>可用性、スケーリングに関する問題も出題され、一部はSolutions Architect - Professionalで解いた覚えのある問題も出てきました。</p><p>余談ですがデプロイ戦略としてBlue/Greenデプロイがとても推されている印象を感じました。</p><h1 id="勉強方法"><a href="#勉強方法" class="headerlink" title="勉強方法"></a>勉強方法</h1><p>今回はSAPでとても役に立った実績を信じ、<a href="https://aws.koiwaclub.com/">aws.koiwaclub.com</a>一発で臨みました。</p><p>全体的に質の高い模擬意見の内容で、５問以上はほぼそのままの問題が出てくる文句なしのクオリティでした。合格ライン750点に対し837点という安心感のある点数を取る事ができました。</p><p>Solutions Architect – Professionalと比較すると試験の難易度はやや低いものの、教材のコンテンツ量はどのサービスでも目減りしているので、事前に他の試験に合格していない人が0から合格するという観点では逆に難しいかもしれません。実際Solutions Architect – Professionalに合格しているお陰で解けた問題は多いです。</p><p>各種下位資格、Solutions Architect - Professionalを修めてから仕上げに受験するパターンで山を登っていくのが安全な印象です。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>実はDeveloper – AssociateはSolutions Architect - Professionalの後に一気に取得したのですが記事のネタにし損ねました。</p><p>先日<a href="/articles/20210818b/">AWS Certified Solutions Architect - Associate 合格体験記</a>を書いた市川さんに期待して温存しておきたいなと思います。</p><p>引き続き全冠目指して頑張ります。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/">合格記</category>
      
      
      <comments>https://future-architect.github.io/articles/20210825a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
