<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Fri, 01 Jul 2022 05:20:12 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>リモートワークでちょっとだけ良くするコミュニケーション（困ることと対策のまとめ）</title>
      <link>https://future-architect.github.io/articles/20220701a/</link>
      <guid>https://future-architect.github.io/articles/20220701a/</guid>
      <pubDate>Thu, 30 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220701a/remote-g2aef70854_640.png&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;640&quot; loading=&quot;lazy&quot;&gt;


&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220701a/remote-g2aef70854_640.png" alt="" width="640" height="640" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット真野です。フューチャーはGoogle ChatとSlack Enterprise<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>を利用しており、普段からリモートワークで私も業務に取り組んでいます。</p><p>その中で、普段はあまり意識しないけど、強いて言うとこういうやり取りが嫌だって思うことを集めて見たら、学びと共感を得たので紹介します。リモートワーク≒チャットで非同期ワーク、という訳でもないかもしれないですが、自分のチームでは強く依存しているので、共有したナレッジを通して、お互いのストレスが無くなり生産性が上がれば良いなと思います。</p><img src="/images/20220701a/募集.png" alt="Slackで意見を募るコメント" width="1200" height="113" loading="lazy"><p>※募集の様子です</p><p>なお、文脈次第では自分もけっこうやっちゃうなっていう内容があります。また、常にこうしなければならない！という類ではないと思います。</p><h2 id="こういうやり取りになると困りがちなパターンの紹介"><a href="#こういうやり取りになると困りがちなパターンの紹介" class="headerlink" title="こういうやり取りになると困りがちなパターンの紹介"></a>こういうやり取りになると困りがちなパターンの紹介</h2><p>10点、紹介します。</p><h3 id="1-チャット上で複数質問しているのに、部分的にしか返してくれないパターン"><a href="#1-チャット上で複数質問しているのに、部分的にしか返してくれないパターン" class="headerlink" title="1. チャット上で複数質問しているのに、部分的にしか返してくれないパターン"></a>1. チャット上で複数質問しているのに、部分的にしか返してくれないパターン</h3><p>質問1,2,3など複数を同時に投げかけたものの、部分的（1つなど、返しやすいもの）しか回答してもらえないケースです。追加で質問2と3はどうでしょうか？と確認するオーバーヘッドが生じて少し手間です。</p><ul><li>改善案（応答側）<ul><li>回答できない場合や、後で回答しようと思っている場合は、「残りは分からないよ」・「後で回答するよ」と添えて、回答できるものだけコメントする</li></ul></li><li>改善案（質問側）<ul><li>質問全体の優先度や期限（第一報は15時までに欲しいなど）を添えてコメントする</li><li>「部分的にしか回答できず、残りが不明だったら🙅（NOのポーズをする人）を付けてコメントください」と最初に書いておく</li></ul></li></ul><h3 id="2-見たかどうかわからないパターン"><a href="#2-見たかどうかわからないパターン" class="headerlink" title="2. 見たかどうかわからないパターン"></a>2. 見たかどうかわからないパターン</h3><p>メンションを飛ばしても反応を貰えなかったケースです。投げかけた側としては、本当に見ていないのか、見たけど忙しいかを区別したいです。前者の救済のため、おそらく忙しいと思われる中 <code>ping @xxx </code> と再度プッシュするのは気が引ける思いがあります。</p><ul><li>改善案（応答側）<ul><li>👀とか✅ とかとにかく、認識はしているよというリアクションをする</li><li>後で応答します、とコメントを残す</li></ul></li><li>改善案（質問側）<ul><li>忙しそうな人に対しては、「見たら👀マークください」と書いてしまう</li></ul></li></ul><h3 id="3-「●●さんに伺うと良いと思います」で終わっちゃうパターン"><a href="#3-「●●さんに伺うと良いと思います」で終わっちゃうパターン" class="headerlink" title="3. 「●●さんに伺うと良いと思います」で終わっちゃうパターン"></a>3. 「●●さんに伺うと良いと思います」で終わっちゃうパターン</h3><p>何か質問なり確認なりをしたけど、ポインタ情報を渡されるケースです。</p><ul><li>改善案（応答側）<ul><li>もし、同じチャネルに所属している場合は、聞いて来た側が「<code>@●●さん、Xxxの件を確認して欲しいです</code>」 と投げるだけなので、ポインタを返すのではなくてディスパッチするとスムーズです</li><li>例 「<code>それだったら●●さんが詳しいです。 @●●さん、Xxxの件で依頼があるのですが見てもらっても良いでしょうか</code>」</li></ul></li></ul><h3 id="4-URL貼ってくれないパターン"><a href="#4-URL貼ってくれないパターン" class="headerlink" title="4. URL貼ってくれないパターン"></a>4. URL貼ってくれないパターン</h3><p>「Issue立てました」、「Pull Requestを送りました、レビューお願いします」、「リポジトリへのinvitationが来ていると思います」などで、URLを共有してくれないケースです。</p><p>また、PR レビュー等で特定のリンクについてやり取りしている際に、「修正しました」とだけ送られると、スレッドさかのぼってリンク見つけないといけないのが少し面倒という声もありました。これに関しては何度も同じURLを送ると冗長なので嫌だといういう流派もあり、スレッドの1コメント目にURLを書くべきという意見もありました。これもスレッドのやり取りの長さ次第で、2,3つ上にURLがあるならともかく、かなり遡って見ないとならないようであれば、リンクを添えた方が良さそうですね。</p><ul><li>改善案（応答側）<ul><li>コメントと同時にURLを送る</li><li>GitHubであれば、 <code>github.com/example-group/example-repository/invitations</code> でinvitations をつければ良い<ul><li>たまに踏み忘れた人が出てきて、期限切れとなり、再度招待する手間も出るのでクリックしやすくする</li></ul></li><li>遡らないとURLを貼ったコメントにたどり着けない場合は、再度リンクを添える</li></ul></li></ul><h3 id="5-本文無しで資料URLだけ送ってくるパターン"><a href="#5-本文無しで資料URLだけ送ってくるパターン" class="headerlink" title="5. 本文無しで資料URLだけ送ってくるパターン"></a>5. 本文無しで資料URLだけ送ってくるパターン</h3><p>チームで一緒に働く期間が長いと、以心伝心、お互いのことが手にとるように分かる！</p><p>…なんてわけもなく、資料を見てほしいのか、レビューしてほしいのか、困っているのか、ビックなニュースが書かれていて共感したいのか、色々と深読みしてしまうケースです。何にしろ応答側が察しないとならず反応に困るケースが多いでしょう。</p><ul><li>改善案（発信側）<ul><li>目的や依頼事項を添えると良いでしょう</li></ul></li><li>改善案（応答側）<ul><li>発信側があまり深く意識せずに投稿している可能性が高いので、こちらも深く考えずスルーで良い場面が多そうです</li></ul></li></ul><h3 id="6-社内LANオンリーのURLをそのまま貼ってしまったパターン"><a href="#6-社内LANオンリーのURLをそのまま貼ってしまったパターン" class="headerlink" title="6. 社内LANオンリーのURLをそのまま貼ってしまったパターン"></a>6. 社内LANオンリーのURLをそのまま貼ってしまったパターン</h3><p>（得意なケースかも知れませんが）会社LAN内に構築されたサービス（例えばGitLabなど）のURLを送ると、移動中にスマホなどで内容を確認できないし、OGP展開のプレビューも行われないため、URLだけで「対応をお願いします」だと何のことだか..となってしまうケースです。この場合はタイトル（Merge Requestのタイトルやチケット名）も入れると嬉しいケースがあります。</p><ul><li>改善案（発信側）<ul><li>URLだけで判断が付きにくそうかつ、なるべく早く見てもらいたい場合はタイトルも入れる</li></ul></li></ul><h3 id="7-SlackなのにCC入れてくるパターン"><a href="#7-SlackなのにCC入れてくるパターン" class="headerlink" title="7. SlackなのにCC入れてくるパターン"></a>7. SlackなのにCC入れてくるパターン</h3><p>比較的大きなテーマのため、宛先を広めに取るときにたまに発生するケースです。CCに入れられても反応できないケースが多く、中途半端だという意見や、依頼ならば依頼にしてもらったほうが悩まなくて済む。メール文化を引きずっているかも？という意見です。</p><ul><li>改善案（発信側）<ul><li>CCの場合は一応見ておいてください、というケースでしょう。この場合は「<code>＠●●さんはXxxの内容だけ確認ください</code>」 などと添えると誤解が無くて良いと思います</li></ul></li><li>改善案（応答側）<ul><li>本当に必要であればメンションを飛ばしてくると思うので、勇気を持ってスレッドのフォローを外すのも手です</li></ul></li></ul><h3 id="8-即レスするために通知はなるべく早く見るようにしているけど-channelとか-hereのアナウンス系だったパターン"><a href="#8-即レスするために通知はなるべく早く見るようにしているけど-channelとか-hereのアナウンス系だったパターン" class="headerlink" title="8. 即レスするために通知はなるべく早く見るようにしているけど@channelとか@hereのアナウンス系だったパターン"></a>8. 即レスするために通知はなるべく早く見るようにしているけど@channelとか@hereのアナウンス系だったパターン</h3><p>特に新規参画者のオンボーディングがあるとこまめにチェックしているリーダーが、メンション対応は優先度を上げて対応しているんだけど、<code>@channel</code> でのアナウンスだったときはS&#x2F;N比が下がってしまうと話していました。いや、ノイズじゃなくて重要な連絡だと思うんですが…、中には業務の最後にまとめてみたいという方も多そうです。</p><ul><li>改善案（発信側）<ul><li><code>@here</code>、<code>@channel</code> は嫌がる若手もベテランも多いのであんまり入れない</li><li>本当に反応してほしい人にだけ、メンションを入れる。あとはエアーで全角で＠ＡＬＬなどとしておく</li></ul></li><li>改善案（Slack管理側）<ul><li><code>@here</code>、<code>@channel</code> を飛ばせない設定を入れる</li></ul></li></ul><h3 id="9-最初から一連の返信を追っていかないと最新の状況が分からないスレッドは辛いよパターン"><a href="#9-最初から一連の返信を追っていかないと最新の状況が分からないスレッドは辛いよパターン" class="headerlink" title="9. 最初から一連の返信を追っていかないと最新の状況が分からないスレッドは辛いよパターン"></a>9. 最初から一連の返信を追っていかないと最新の状況が分からないスレッドは辛いよパターン</h3><p>次のようなケースです。</p><ol><li>「少し広めにメンションします。質問1, 2, 3」でスレッド始まる</li><li>会話されていく中で2, 3が解決</li><li>自分も遅れてスレッド見てみたけど、1, 2, 3の何が解決されて、何が解決されてないかがパッと分からなくて辛い</li></ol><ul><li>改善案（発信側）<ul><li>元の質問に✅の絵文字を上手くつけたり、「あとは1だけ未解決です」みたいなアップデートをスレの末尾に入れるなどステータス管理する<ul><li>そうするとスレッドを最初から追う手間を読み手に減らせます</li></ul></li></ul></li><li>改善案（応答側）<ul><li>ちょっと読んで厳しそうであれば、ステータス状況がどうなっているか確認するコメントを入れる</li></ul></li></ul><h3 id="10-文面化をサボっちゃうパターン"><a href="#10-文面化をサボっちゃうパターン" class="headerlink" title="10. 文面化をサボっちゃうパターン"></a>10. 文面化をサボっちゃうパターン</h3><p>テキストメッセージで数回ラリーすれば完結することでも、Google Meetなどで同期的な会議を求められる（求める）ケースがあります。見方によっては文面化をサボるともとれます。…とはいえ、会話をする事自体は全然良いけれど、会話の結果サマリは文面化してほしい（結果を忘れて見返したいときに分からない）という意見がありました。</p><ul><li>改善案（依頼側）<ul><li>なるべく聞きたい内容はテキストでのやり取りで絞りつつ、ここぞというところで会議を入れる</li><li>終わった後は、会議のサマリを文書化して投稿する</li></ul></li><li>改善案（応答側）<ul><li>自分で会議サマリを文書化して投稿する。お互い文書化しちゃいましょう</li></ul></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>耳が痛いのもありましたが、上手くチャットツール、テキスト化を使いこなして生産性を上げたいと思います。この記事で紹介したのは氷山の一角だと思いますので、皆さまのテクニックがありましたらTwitterで教えてください！</p><p>画像はImage by <a href="https://pixabay.com/users/roadlight-15702095/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=5491794">政徳 吉田</a> from <a href="https://pixabay.com/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=5491794">Pixabay</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://future-architect.github.io/articles/20210712a/">フューチャーでSlack Enterprise Gridの導入を進めた話 </a> 参照</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Business/">Business</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/">リモートワーク</category>
      
      <category domain="https://future-architect.github.io/tags/Slack/">Slack</category>
      
      
      <comments>https://future-architect.github.io/articles/20220701a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【エネルギー業界】電力基礎知識編 </title>
      <link>https://future-architect.github.io/articles/20220630a/</link>
      <guid>https://future-architect.github.io/articles/20220630a/</guid>
      <pubDate>Wed, 29 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG DXユニットの住です。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニットの住です。<a href="/articles/20220616a/">エネルギー業界に詳しくなろう</a>とテーマのもと、LPガス業界に引き続き、電力業界についても少し触れていきます。電力業界の超入門編として、ご覧いただければ幸いです。</p><h2 id="電力事業の役割"><a href="#電力事業の役割" class="headerlink" title="電力事業の役割"></a>電力事業の役割</h2><p>電力事業には、「<strong>発電</strong>」、「<strong>送配電</strong>」、「<strong>小売</strong>」の大きく３つの役割に分類されます。<br>この３つの役割が揃ってこそ、我々は電気を利用することができます。</p><div class="scroll"><table><thead><tr><th align="left">電力事業</th><th align="left">役割</th></tr></thead><tbody><tr><td align="left"><strong>発電</strong></td><td align="left">自らが維持、運用する発電用の電気工作物を用いて電気を発電する役割</td></tr><tr><td align="left"><strong>送配電</strong></td><td align="left">発電所でつくった電気を使う場所まで運ぶ設備を運営する役割</td></tr><tr><td align="left"><strong>小売</strong></td><td align="left">一般家庭やビル、工場などに電気を販売する役割</td></tr></tbody></table></div><h2 id="電力自由化とは"><a href="#電力自由化とは" class="headerlink" title="電力自由化とは"></a>電力自由化とは</h2><p>戦後の電力不足から、高度成長を達成するために、大手電力10社<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>（一般電気事業者）による「発電」から「送配電」、需要家<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>への「小売」までの地域独占を認めてきていましたが、環境の変化に伴い、電力事業の高コスト体質が問題視されるようになり、<strong>段階的に、より公平に競争し、かつ安定供給にも平等に責任を負う状態（自由に電力会社を選べる状態）へと変化</strong>してきました。<br>以下に、「１．電気事業法改正」、「２．電力システム改革」の大きく２段階に分けて、電力自由化までの流れを記載します。</p><h3 id="１．電気事業法改正"><a href="#１．電気事業法改正" class="headerlink" title="１．電気事業法改正"></a>１．電気事業法改正</h3><ul><li><strong>一般電気事業者に対して、新規参入者のシェアを増やすことを目的とした改革</strong></li></ul><h4 id="（１）発電の自由化（1995年）"><a href="#（１）発電の自由化（1995年）" class="headerlink" title="（１）発電の自由化（1995年）"></a>（１）発電の自由化（1995年）</h4><ul><li>独立系発電事業者（IPP&#x3D;Independent Power Producers）として、「発電」への参入が可能となる<img src="/images/20220630a/image.png" alt="独立系発電事業者の自由化" width="443" height="353" loading="lazy"></li></ul><p>　</p><h4 id="（２）大規模需要家への電力供給自由化（1999年）"><a href="#（２）大規模需要家への電力供給自由化（1999年）" class="headerlink" title="（２）大規模需要家への電力供給自由化（1999年）"></a>（２）大規模需要家への電力供給自由化（1999年）</h4><ul><li>特定規模電気事業者（PPS＝Power Producer and Supplier）として、「小売」への参入が可能となる</li><li>「<strong>特別高圧（2000kW&#x2F;20000V以上）</strong>」の需要家向けの「小売」が可能となる<img src="/images/20220630a/image_2.png" alt="特別高圧（2000kW/20000V以上）の小売自由化" width="584" height="353" loading="lazy"></li></ul><p>　</p><h4 id="（３）中規模需要家への電力供給自由化（2003年）"><a href="#（３）中規模需要家への電力供給自由化（2003年）" class="headerlink" title="（３）中規模需要家への電力供給自由化（2003年）"></a>（３）中規模需要家への電力供給自由化（2003年）</h4><ul><li>特定規模電気事業者（PPS＝Power Producer and Supplier）の対象が拡大される</li><li>「<strong>高圧（50kW&#x2F;6000V以上）</strong>」の需要家向けの「小売」が可能となる<img src="/images/20220630a/image_3.png" alt="高圧（50kW/6000V以上）の小売自由化" width="584" height="354" loading="lazy"></li></ul><h3 id="２．電力システム改革"><a href="#２．電力システム改革" class="headerlink" title="２．電力システム改革"></a>２．電力システム改革</h3><ul><li><strong>より公平に競争し、かつ安定供給にも平等に責任を負うことを目的とした改革</strong><br>　<strong>①安定供給を確保する</strong><br>　<strong>②電気料金を最大限抑制する</strong><br>　<strong>③需要家の選択肢や事業者の事業機会を拡大する</strong></li></ul><h4 id="（１）電力広域的運営推進機関（OCCTO3）の設立（2015年）"><a href="#（１）電力広域的運営推進機関（OCCTO3）の設立（2015年）" class="headerlink" title="（１）電力広域的運営推進機関（OCCTO3）の設立（2015年）"></a>（１）電力広域的運営推進機関（OCCTO<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>）の設立（2015年）</h4><ul><li><strong>全国規模</strong>で平常時・緊急時の需給調整機能を強化する目的で設立</li><li>どこかのエリアで供給不足が見込まれた場合には、他エリアの電気事業者に対して<strong>融通指示</strong>を行う</li><li>中長期的な電力の安定供給のため、需給バランス評価を行い、必要に応じて経済産業大臣に意見を行う</li><li>電力系統の公平な利用環境の整備のため、入札価格の低い順に利用を認めるルールに移行</li></ul><img src="/images/20220630a/image_4.png" alt="" width="766" height="447" loading="lazy">　　　※画像は https://www.enecho.meti.go.jp/ より<h4 id="（２）小売及び発電の完全自由化（2016年）"><a href="#（２）小売及び発電の完全自由化（2016年）" class="headerlink" title="（２）小売及び発電の完全自由化（2016年）"></a>（２）小売及び発電の完全自由化（2016年）</h4><ul><li>「<strong>低圧（50kW未満）</strong>」の需要家向けの「小売」が可能となる</li><li>これに伴い、特定規模電気事業者（PPS）、独立系発電事業者（IPP）の区分が無くなる<img src="/images/20220630a/image_5.png" alt="低圧（50kW未満）の小売自由化" width="509" height="354" loading="lazy"></li></ul><p>　　</p><h4 id="（３）送配電の法的分離（2020年）"><a href="#（３）送配電の法的分離（2020年）" class="headerlink" title="（３）送配電の法的分離（2020年）"></a>（３）送配電の法的分離（2020年）</h4><ul><li><strong>送配電部門の中立性を高めるために</strong>「会計分離」から、<strong>送配電部門を別会社化</strong>する「法的分離」へ移行</li><li>これにより、<strong>送配電事業者は発電事業や小売電気事業を営むことが禁じられる</strong></li><li>但し、送配電事業者が離島供給を行うために発電事業を営むことは、例外的に認められている</li></ul><h2 id="電気事業者の枠組み"><a href="#電気事業者の枠組み" class="headerlink" title="電気事業者の枠組み"></a>電気事業者の枠組み</h2><p>電力自由化に伴い、電気事業者の枠組みについても見直され、それぞれに必要な規制が課せられています。<br>それぞれ、経済産業大臣への<strong>登録</strong>、<strong>届出</strong>、<strong>許可</strong>が必要となります。</p><img src="/images/20220630a/image_6.png" alt="登録、届出、許可の流れ" width="939" height="337" loading="lazy"><p>ちなみに、よく耳にする「<strong>新電力</strong>」とは、当初、特定規模電気事業者（PPS）のことを指していましたが、<br>現在は、一般的に、<strong>大手電力10社以外の　新規「発電」事業者、新規参入「小売」電気事業者</strong>のことを言います。</p><h2 id="安定供給にむけたメカニズム"><a href="#安定供給にむけたメカニズム" class="headerlink" title="安定供給にむけたメカニズム"></a>安定供給にむけたメカニズム</h2><p>電気の特性上、<strong>作った電気の貯蔵ができないため</strong>、発電量（供給）と消費量（需要）の<strong>バランスを常に取り続ける（周波数を一定に保つ）必要</strong>があります。このバランスが崩れると周波数が乱れるため、安全装置が作動して発電所などが停止し、大停電（ブラックアウト）が発生する可能性があります。電力自由化に伴い電気事業者が増えるなかでも、安定供給に対して平等に責任を負う仕組みを取り入れています。</p><img src="/images/20220630a/image_7.png" alt="" width="1200" height="249" loading="lazy">　　※画像は https://www.enecho.meti.go.jp/ より<p>ちなみに、北海道胆振東部地震で、大停電（ブラックアウト）が発生したのは、震源近くの発電所が故障で停止したことに伴い、周波数が乱れ、立て続けに発電所が停止したことにより発生した事象です。（その他、送電線が切れたなど複数の事象も重なっています）</p><h3 id="１．バランシンググループ"><a href="#１．バランシンググループ" class="headerlink" title="１．バランシンググループ"></a>１．バランシンググループ</h3><ul><li>バランシンググループとは、送配電ネットワークを利用する事業者の集合体を示す概念であり、<strong>需要バランシンググループ</strong>と<strong>発電バランシンググループ</strong>の２種類がある</li></ul><div class="scroll"><table><thead><tr><th align="left">種類</th><th align="left">仕組み</th></tr></thead><tbody><tr><td align="left">需要バランシンググループ</td><td align="left">１つ以上の小売電気事業者（代表契約者を選定）と一般配送電事業者が接続供給契約を締結する仕組み</td></tr><tr><td align="left">発電バランシンググループ</td><td align="left">１つ以上の発電事業者（代表契約者を選定）と一般配送電事業者が発電量調整供給契約を締結する仕組み</td></tr></tbody></table></div><ul><li>バランシンググループのメリットは、スケール感を活かして、インバランス料金を支払うリスクを低減させること</li><li>需要バランシンググループのメリットとしては、調達や需給管理の一元化なども考えられる</li></ul><img src="/images/20220630a/image_8.png" alt="一般配電事業者が調整力を働かせる" width="484" height="369" loading="lazy"><h3 id="２．同時同量"><a href="#２．同時同量" class="headerlink" title="２．同時同量"></a>２．同時同量</h3><ul><li>同時同量は、電力の供給と需要を絶えず一致させることで、バランシングとも言う</li><li>系統運用者（一般配送電事業者）は、<strong>瞬時の同時同量</strong>を行う一方で、バランシンググループ（新電力）が行うのは、<strong>30分同時同量</strong>である</li></ul><h4 id="（１）30分同時同量"><a href="#（１）30分同時同量" class="headerlink" title="（１）30分同時同量"></a>（１）30分同時同量</h4><ul><li>30分同時同量とは、瞬間的な供給と需要がずれても、30分間の総量（kWh）で計画値に合致していればよい</li><li>計画値（計画値同時同量）は、実需要の１時間前に、電力広域的運営推進機関（OCCTO）へ提出する必要がある</li><li>計画値同時同量との乖離のことをインバランスと言い、±3%の乖離が発生した場合は、乖離に伴いインバランス料金<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>を支払う</li></ul><h4 id="（２）調整力"><a href="#（２）調整力" class="headerlink" title="（２）調整力"></a>（２）調整力</h4><ul><li>調整力は、インバランス発生時に、系統運用者（一般送配電事業者）がコントロール可能な発電設備や需要設備のことである</li><li>各系統運用者が公募入札により調整力を調達してきたが、2021年4月からは、「<strong>需給調整市場</strong>」という全国一体的な市場で取引する制度が開始されている</li><li>調整力は、発電機の信号に対する反応速度や起動にかかる時間などで分類されている</li><li>これらを駆使して、瞬時の同時同量を実現している</li><li><strong>分散型エネルギー資源（DER）</strong><sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>の調整力への活用に向けた仕組み作りが進められている</li></ul><p>ちなみに、最近、話題となっている「<strong>電力需給逼迫注意報</strong>」は、調整力のひとつでもある<strong>供給予備率</strong>が、<strong>3～5</strong>%となる見込みの場合に発令され、安定供給に最低限必要とされる3%をも切る場合は、「電力需給逼迫警報」に切り替えられます。（通常は、7～8%を保持しています）</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>電力業界の超入門編として、電力自由化までの流れと電気事業者の枠組み、電気の特性を踏まえた上での安定供給に向けたメカニズムについて、簡単に触れさせて頂きました。<br>このような状況のなかで、カーボンフリーなど環境問題への意識の高まりや、テクノロジーの進歩により、従来の電力事業の枠組みに囚われない新たなビジネス展開の可能性が広がっていると考えます。<br>その一角を担う、超大型蓄電池や再生可能エネルギー資源など、分散エネルギー資源をアグリゲートする技術、需要側との双方向制御を可能とするスマートグリッド技術など、折を見て、紹介していければと思います。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">東京電力、関西電力、中部電力、東北電力、九州電力、中国電力、四国電力、北海道電力、北陸電力、沖縄電力</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">電気の供給を受けて使用している者</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">Organization for Cross-regional Coordination of Transmission Operators, JAPAN</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">発生した差分に対して、系統運用者（一般送配電事業者）が不足分を補填、もしくは余剰分を買取した費用をインバランス料金として精算</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;">分散型エネルギー資源（DER）とは、太陽光発電や風力発電といった再生可能エネルギー、電気自動車など、電気が使用される場所の近くで、発電・供給される小規模なエネルギー源のこと</span><a href="#fnref:5" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Business/">Business</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%A5%AD%E7%95%8C%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3/">業界ドメイン</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A8%E3%83%8D%E3%83%AB%E3%82%AE%E3%83%BC%E6%A5%AD%E7%95%8C/">エネルギー業界</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%9B%BB%E5%8A%9B/">電力</category>
      
      
      <comments>https://future-architect.github.io/articles/20220630a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>スキーマのバージョン管理と互換性の話</title>
      <link>https://future-architect.github.io/articles/20220629a/</link>
      <guid>https://future-architect.github.io/articles/20220629a/</guid>
      <pubDate>Tue, 28 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして、TIGの原木です。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、TIGの原木です。<a href="/articles/20220624a/">サービス間通信とIDL（インタフェース記述言語）連載</a>の4本目です。</p><p>気が付けば、バージョンの話<sup id="fnref:0"><a href="#fn:0" rel="footnote">0</a></sup>ばかりしています。<br>この記事ではスキーマのバージョン管理と互換性について話します。</p><h1 id="“スキーマ”が指し示す言葉と課題"><a href="#“スキーマ”が指し示す言葉と課題" class="headerlink" title="“スキーマ”が指し示す言葉と課題"></a>“スキーマ”が指し示す言葉と課題</h1><p>一般的にスキーマのバージョン管理という話が出た場合、次のどちらかを想像する人が多いのではないでしょうか。</p><ul><li>データベースのスキーマ(DB内のデータ構造)の変更をどうやってバージョン管理していくか</li><li>サービス間通信で使用するデータフォーマット(ex. gRPCのprotobuf)をどうやってバージョン管理していくか</li></ul><p>データ構造が変わったことによりソフトウェアの改修が発生するとわかった瞬間、この問題に直面して「どうしよう…」と悩まれた経験を持つ方は数知れずいらっしゃるかなと思います。</p><p>両者において、スキーマのバージョン管理が課題だと意識するタイミングにさほどの違いはありません。しかし、両者において何を問題として捉えているのか？そして解決に向けたアプローチ方法は？とみると異なるようです。</p><h1 id="データベースのスキーマのバージョン管理"><a href="#データベースのスキーマのバージョン管理" class="headerlink" title="データベースのスキーマのバージョン管理"></a>データベースのスキーマのバージョン管理</h1><p>データベースのスキーマのバージョン管理といった文脈では、通常、<strong>DBマイグレーションツール</strong><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>がセットで語られます。なぜなら、データベースのスキーマを変更するためにはデータの構造を示す定義情報を変更すると共にその中身であるデータそのものを変えていく必要があるからです。</p><p>データ定義の変更には必ず中身のデータ移行(マイグレーション)が伴います。ここに、データベースのスキーマのバージョン管理の課題に繋がる難しさがあります。例を挙げてみました。</p><ul><li>データベースのスキーマの変更管理をどうやって行うか？<ul><li>例: 「カナリーリリース予定の新機能についてテーブルの変更が必要だって聞いて対応した後で、その変更が要らなくなってしまった。切り戻す？放置する？」</li></ul></li><li>データベースのスキーマの変更に伴う影響をどうやって正確に見積もるか？<ul><li>例: 「データベースのテーブルのカラムを一部増やす対応を行うって聞いたけど、そのテーブルを参照している他業務システムが結構あるんだよね。影響調査よろしくー」</li></ul></li><li>スキーマの変更に伴い、データ移行をどうやって行うか？<ul><li>例: 「データベースをダウンタイムゼロで移行しなければならないのだが、自動化できてない。つらい。」</li></ul></li></ul><p>「データベースのバージョン管理に困っている」といった話が持ち上がった場合、注意が必要です。データベースのスキーマ変更に伴う業務アプリケーション側の影響を気にされているのか。それともデータベースの更新に伴うデータ移行と運用の重さを気にされているのか。立場上、気にするポイントが全然異なるからです。</p><p>前者の業務アプリケーション側の影響に主眼を置いた解決策の一つとして、かつてデータベースとユーザーとの間に抽象化レイヤーを設けることで、データ構造の見た目と実体を自在に切り離すことで解決しようといった試みが繰り返されていました。(“Data Virtualization”等で検索)</p><p>しかし、この手法は主流となっておりません。なぜなら、そういった問題がそもそも生じる理由として境界付けられたコンテキストに従った適切なデータ分割を行っていないことが考えられるからです。</p><p>ここまでくると、データベースという要素技術ではなく、業務サービスに紐づく組織づくりやシステムアーキテクチャといった俯瞰的な視点から解決せざるを得ません。</p><p>この辺りは「<a href="https://www.oreilly.co.jp/books/9784873119823/">ソフトウェアアーキテクチャの基礎</a>」の続編にあたる「Software Architecture: The Hard Parts」にて詳しく説明されています(翻訳待ってます)。</p><p>後者の、運用におけるデータベースの影響に着目した解決策についても、ベストといえる解は残念ながらありません。データベースの変更自体は、DBマイグレーションツールにより差分を吸収しつつ移行の自動化が可能ではあります。しかし、システム全体の運用を鑑みた場合、解決策は1つのツールで成しえないからです。</p><p>データベースのバージョン管理に困った場合、そのソリューションは結局DBに留まらない話が多いんだとわかったところで、もう一つの課題であるサービス間通信で使用するデータフォーマットのバージョン管理の話に移ります。</p><h1 id="データフォーマットのバージョン管理"><a href="#データフォーマットのバージョン管理" class="headerlink" title="データフォーマットのバージョン管理"></a>データフォーマットのバージョン管理</h1><p>サービス間通信で使用するデータフォーマットというと固く聞こえますが、要はgRPCで使われているprotobufのスキーマの仕様だったり、OpenAPIで書かれたAPIの仕様書から起こしたJSON Schemaのことです。これらのデータフォーマットにバージョン管理が必要となるユースケースはいったいどういった場面が想定されるでしょうか。</p><p>例えば、APIの仕様書が変わったときに生まれそうな課題を想像してみました。</p><ul><li>API仕様書とAPIサーバーレスポンスのギャップをどうやって防ぐか？</li><li>API仕様書の変更に伴い、APIクライアント側の影響をどうやって見積もるか?</li></ul><p>これらの課題に対して、それぞれ解決策を検討します。</p><h1 id="データスキーマの仕様書と実データのギャップ"><a href="#データスキーマの仕様書と実データのギャップ" class="headerlink" title="データスキーマの仕様書と実データのギャップ"></a>データスキーマの仕様書と実データのギャップ</h1><p>ソフトウェアの開発において、仕様書と実装がずれるという事象は決して起きてはなりませんが、現実にはままあることです。そんなギャップを防ぐ手法の一つとして、スキーマファーストデザイン、あるいはコントラクトファーストデザインといわれる開発手法があります。</p><img src="/images/20220629a/image.png" alt="" width="709" height="381" loading="lazy"><p>「コードから仕様書を生成」するのではなく、「仕様書からコードを生成」することで、サービス間で交換されるデータの仕様を先に決めて仕様と実装のギャップを防ぎます。</p><p>詳細は、多賀さんが話された<a href="https://future-architect.github.io/articles/20210427c/">GoにおけるAPIドキュメントベースのWeb API開発について登壇しました </a>にて説明されていますのでご参照ください。</p><p>上記のような取り組みを行い、Git上にあるデータスキーマの仕様書と実際に送信されるデータとの間の溝を埋めていっても、データスキーマのバージョン更新に伴う課題はまだまだ解決しません。データベーススキーマでも出てきましたが、スキーマの変更に伴う影響調査です。</p><h1 id="データスキーマの変更に振り回されながら"><a href="#データスキーマの変更に振り回されながら" class="headerlink" title="データスキーマの変更に振り回されながら"></a>データスキーマの変更に振り回されながら</h1><p>データスキーマの変更を変更する際に、その影響が大きいのはたいていデータの送り手ではなく受け手です。変更したことでどのような影響が出てくるのか？①変更したデータスキーマが互換性を持つか②その情報を誰がどこで連携するか<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>、自分はこの辺りを気にしています。</p><p>①については特に<strong>スキーマの進化</strong>(Schema evolution)&#x3D;開発によって変わり続けるスキーマをどうやって変更管理しようかという文脈で検討されることが多い問題です。名著<a href="https://www.oreilly.co.jp/books/9784873118703/">データ指向アプリケーションデザイン</a>でも第四章「エンコーディングと進化」にて詳しく取り扱われています。</p><p>そもそも、”データ”とは何でしょうか。サービス間通信の文脈では、大きく二種類の扱われ方をしています。</p><ol><li>コンピューターがメモリ内で取り扱うためのデータ構造(インメモリの表現)</li><li>サービス間で情報を交換するためのデータ構造(バイナリデータ)</li></ol><p>これら、インメモリの表現とバイナリデータを相互に変換することで、</p><ul><li>人が読みやすい、直感的にわかるデータとして扱いたいときはインメモリの表現</li><li>送受信する情報量を圧縮することで、より効率的に情報交換したいときはバイナリデータ<br>という風に、利用シーンに応じてデータの様態を変えることができます。</li></ul><img src="/images/20220629a/Drawing_2022-06-26_16.50.55.excalidraw.png" alt="" width="369" height="338" loading="lazy"><p>このインメモリの表現、メモリ上のデータ構造を<strong>スキーマ</strong>として記述することで人間にもわかりやすくするために開発されたのが、本ブログの連載テーマであるIDL（インターフェース記述言語: Interface Definition Language）です。普段良く耳にするXMLやJSON Schema、ブログの連載でもたびたび取り上げられたgRPC内で使われているprotobufやcuelang等が代表例です。</p><p>これらIDLでスキーマを描画する際に問題となるのが、スキーマの進化に伴う、データスキーマ同士の互換性です。</p><p>例えば、あるバージョンのIDLに従って作成したバイナリデータ、また別のバージョンのIDLに従って作成したバイナリデータはどこまで同じなのでしょうか？あるいは、バイナリデータを作成したときとは異なるバージョンのIDLを使ってバイナリデータを人が読める形に戻せるのでしょうか？</p><p>IDLの一つ、<a href="https://avro.apache.org/">Apache Avro</a>では、言語の設計時から互換性を念頭に考えられていました。</p><p>例えば、Kafka等のメッセージング駆動によるシステム連携において、Producer(データを流す側)とConsumer(データを受け取る側)でデータを送るケースを考えてみましょう。</p><img src="/images/20220629a/Drawing_2022-06-25_20.17.41.excalidraw.png" alt="" width="1200" height="740" loading="lazy"><p>メッセージング駆動アーキテクチャではデータの連携はキューを介して行われており、両者の関係は緩やかにつながっています。ここでProducer側で送信するデータスキーマを変更したときに、逐一Consumer側で対応しないとうまく動かないシステムだったら運用の負担が非常に大きいですよね。そうした課題への回答の一つとして、Apache AvroはIDLの言語仕様として、フィールド値の動的な変更に追随して自動的にマッピングを行いつつ、互換性にも可能な限り応えることができます。</p><p>Apache KafkaのManaged ServiceであるConfluentが提供するConfluent Schema Registryにはこの言語仕様を元に互換性の”強度”に基づいてvalidationの処理を変えられるユニークな機能があります。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>諸事情により、Confluentの画面は出せないのですが、想像しながら読み進めてください。</p>  <p>参考: <a href="https://docs.confluent.io/ja-jp/platform/7.0.1/schema-registry/avro.html">https://docs.confluent.io/ja-jp/platform/7.0.1/schema-registry/avro.html</a></p></div><p>例えば、BACKWARD(後方互換性モード)で、Confluent Schema Registryに次のApache Avroの形式のスキーマ情報を登録してみましょう。後方互換性とは、version1のフォーマットがversion2でも使用できることを意味します。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Sample schema to help you get started.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The int type is a 32-bit signed integer.&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_field1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;int&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sampleRecord&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;namespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.mycorp.mynamespace&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;record&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>しかし、32bitだと値が小さすぎるということで、int型をlong型に変える必要が出てきました。<br>my_field1の型をint型からlong型に変更して再登録します。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 中略</span></span><br><span class="line"><span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The long type is a 64-bit signed integer.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_field1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span> <span class="comment">// ⇐ここを変更</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>登録できました。int型のデータはlong型に代入しても問題ないからです。ここでさらに文字列型数字、たとえば先頭が0から始まる値を扱う必要が出てきました。long型をさらにstring型にしてみます。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 中略</span></span><br><span class="line">  <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The string type&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_field1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span> <span class="comment">// ⇐ここを変更</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line">エラーメッセージ<span class="punctuation">:</span> `Schema being registered is incompatible with an earlier schema for the subject.`</span><br></pre></td></tr></table></figure><p>エラーになりました。long型とstring型には互換性がないためです。ここで互換性モードを変更し、制限を緩くしてみます。</p><p>Compatibility settingsを選択して <code>Backward</code> から <code>None</code>に変更して、先ほど失敗したスキーマを入力して、再度登録ボタンを押してみましょう…登録することができました。</p><p>この状態ではスキーマは以前のバージョンとの互換性が完全にないため、Consumer側(データを受け取る側)はこのスキーマに基づいたメッセージをそのまま受け取ることができません。通常は新規スキーマを切り直すユースケースですが、あえて登録してみました。</p><p>互換性の強度に応じた細かいvalidationチェックにより、破壊的な変更を防ぐConfluent Schema Registryの機能紹介でした。</p><h1 id="Thema-スキーマのバージョン管理の行く先"><a href="#Thema-スキーマのバージョン管理の行く先" class="headerlink" title="Thema: スキーマのバージョン管理の行く先"></a>Thema: スキーマのバージョン管理の行く先</h1><p>スキーマの変更に伴い、破壊的な変更が生じたときに自動的にvalidateする仕組みは、Confluent Schema Registryのような便利機能でなくてもスキーマファーストデザインを採用している開発現場であれば、CI&#x2F;CDの一部としてチェックする別の機構(E2Eテスト)があると思います。しかし、スキーマの進化が頻繁に行われるような環境下では、validateするだけではなく、次のような仕組みが欲しくなってくるでしょう。</p><ul><li>既存データをスキーマバージョンによって動的に変更する機能(いわゆるmutate機能)</li><li>ソースコードのリポジトリ管理でよくあるような、スキーマの”変更履歴”を可視化する機能</li><li>マージ操作による違うスキーマ同士の接合機能</li></ul><p>このあたりの課題感を解決する仕組みとして、現在開発中の<a href="https://github.com/grafana/thema">Thema - grafana&#x2F;thema</a>が非常に参考になるでしょう。</p><p>Themaはcuelangをベースとした、スキーマを作成するためのフレームワークです。</p><p>Themaが目指す姿はずばり <strong>抽象化によるスキーマのバージョン管理</strong> (“schema versioning by abstraction”)です。cuelangで記載した <strong>リネージ(系譜)</strong> を用いて、スキーマの進化を安全に行える世界を目指しています。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>ここから、どうやってcuelangでスキーマのバージョン管理を実現しているのかThemaの詳細について説明しますが、その前に少しだけThemaの開発のモチベーションについて代弁させてください(モチベーションシートが見当たらなかったので)。</p>  <p>Themaは主にGrafanaに所属しているSam Boyer氏によって開発されているOSSです。どうして彼はThemaを開発することにしたのでしょうか？そのモチベーションを辿ると二つのイベントにたどり着きます。2018年にGo言語に入った仕様、そしてGrafanaが直近進めているDashboard as Codeの中で導入されたPrometheus monitoring mixinです。</p>  <p>2018年初頭、Go言語界隈は揺れていました。現在のGo言語のバージョン管理(dep)を続けるのか、それともそれを捨てて新しいバージョン管理とパッケージ管理システム(vgo)を再構築するのか。Russ Cox氏が中心となってまとめられたvgoの検討会にSam Boyer氏もいました。</p>  <p><a href="https://web.archive.org/web/20180222100213/https://sdboyer.io/blog/vgo-and-dep/">https://web.archive.org/web/20180222100213/https://sdboyer.io/blog/vgo-and-dep/</a></p>  <p>vgo、<a href="https://research.swtch.com/vgo">Versioned Go</a>は、Go言語を最近使うようになった方にはまったく馴染みがない言葉だと思います。vgoは検討段階で消えてしまったのでしょうか？ 実は、Go1.11に導入する際に名前が変わりました。その名は <code>Go Modules</code> です。</p>  <p>彼がGo言語のバージョニングとパッケージ管理について最も造詣が深い一人であることは言うまでもないでしょう。これは余談ですが、全然異なる文脈でThemaを知った自分はこの人どこかで見たことあるんだけどな...って気持ちで軽く来歴を調べて鳥肌が立ちました。全てはバージョン管理に戻ってくるのです。</p>  <p>そしてもう一つが、<code>Monitoring Mixin</code> にまつわる課題です。近年では従来の運用監視システムの対象者がSREやDevOpsの普及によって開発者にまで広がったこと、マイクロサービスの普及により爆発的に監視対象が増えたことなどから、Observabilityの三つの柱であるメトリクス、トレーシング、ログを横断的に確認できる需要が高まっています。それを支えるための仕組みの一つに、<code>Monitoring Mixin</code>というプロジェクトがあります。</p>  <p>↓こちらの方が詳しく解説されています。</p>  <p><a href="https://kobtea.net/posts/2021/08/29/monitoring-mixins/">https://kobtea.net/posts/2021/08/29/monitoring-mixins/</a></p>  <p><blockquote>Monitoring MixinsはPrometheus rule, Grafana dashboardといった監視設定のPackagingを目指すプロジェクトです。ExporterのMetricsだけではなく、それを使って何を観測し可視化するかという知見を共有するのが目的です。Out-of-the-boxでいい感じのアラート設定とダッシュボードがほしい、そんな需要に答えます。コードはJsonnetとパッケージングツールのjsonnet-bundlerで管理されます。</blockquote></p>  <p>という、いわば運用監視設定の欲張りセットなのですが、Sam Boyer氏はMonitoring Mixinsのスキーマとして使われるjsonnetの寄せ集めゆえの扱いづらさについて触れて、もっと改善する仕組みを考えていることを過去に仄めかしています。</p>  <p><a href="https://grafana.com/blog/2021/01/14/how-prometheus-monitoring-mixins-can-make-effective-observability-strategies-accessible-to-all/">https://grafana.com/blog/2021/01/14/how-prometheus-monitoring-mixins-can-make-effective-observability-strategies-accessible-to-all/</a></p>  <p>旧名scuemata、Themaはこうした背景を踏まえた上で誕生しました。</p></div><p>リネージとは、ざっくりいえばスキーマの進化表です。一つのオブジェクトに対する全てのスキーマの履歴を含む、”レンズ”(後述で解説します)でリンクされたシーケンスの順序付きリストを示します。元々familiyって呼んでいましたがリネージに名前を改めました。</p><p>リネージの中身( <a href="https://github.com/grafana/thema/blob/main/docs/ship.cue"><code>ship.cue</code></a> )を実際に見てみましょう。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ship.cue</span></span><br><span class="line"><span class="keyword">package</span> thema_example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/grafana/thema&quot;</span></span><br><span class="line"></span><br><span class="line">lin: thema.#Lineage</span><br><span class="line">lin: name: <span class="string">&quot;Ship&quot;</span></span><br><span class="line">lin: seqs: [</span><br><span class="line">    &#123;</span><br><span class="line">        schemas: [</span><br><span class="line">            &#123; <span class="comment">// 0.0</span></span><br><span class="line">                firstfield: <span class="type">string</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        schemas: [</span><br><span class="line">            &#123; <span class="comment">// 1.0</span></span><br><span class="line">                firstfield: <span class="type">string</span></span><br><span class="line">                secondfield: <span class="type">int</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        lens: forward: &#123;</span><br><span class="line">            from: seqs[<span class="number">0</span>].schemas[<span class="number">0</span>]</span><br><span class="line">            to: seqs[<span class="number">1</span>].schemas[<span class="number">0</span>]</span><br><span class="line">            rel: &#123;</span><br><span class="line">                firstfield: from.firstfield</span><br><span class="line">                secondfield: <span class="number">-1</span></span><br><span class="line">            &#125;</span><br><span class="line">            lacunas: [</span><br><span class="line">                thema.#Lacuna &amp; &#123;</span><br><span class="line">                    targetFields: [&#123;</span><br><span class="line">                        path: <span class="string">&quot;secondfield&quot;</span></span><br><span class="line">                        value: to.secondfield</span><br><span class="line">                    &#125;]</span><br><span class="line">                    message: <span class="string">&quot;-1 used as a placeholder value - replace with a real value before persisting!&quot;</span></span><br><span class="line">                    <span class="keyword">type</span>: thema.#LacunaTypes.Placeholder</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">            translated: to &amp; rel</span><br><span class="line">        &#125;</span><br><span class="line">        lens: reverse: &#123;</span><br><span class="line">            from: seqs[<span class="number">1</span>].schemas[<span class="number">0</span>]</span><br><span class="line">            to: seqs[<span class="number">0</span>].schemas[<span class="number">0</span>]</span><br><span class="line">            rel: &#123;</span><br><span class="line">                <span class="comment">// Map the first field back</span></span><br><span class="line">                firstfield: from.firstfield</span><br><span class="line">            &#125;</span><br><span class="line">            translated: to &amp; rel</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>このリネージを図示化したものが次の図になります。</p><img src="/images/20220629a/Drawing_2022-06-26_15.48.58.excalidraw_(1).png" alt="Schemeバージョン0.0から1.0には明示的なLens（レンズ）で変換。スキーマ1.0からインスタンスを生成。また0.0から1.0で欠落したフィールドはLacuna（欠落）と呼ぶ" width="1009" height="424" loading="lazy"><p>それぞれの役割について説明していきましょう。</p><p>まず、リネージには二つのスキーマバージョンがあり、それぞれ <strong>Sequence(シーケンス)</strong> という単位でグルーピングされています(図の黄色と赤色のエリア)。Sequenceは「スキーマの順序付きリスト」であり、<strong>同じSequenceであれば、一つ前のスキーマとの後方互換性を保証します</strong>(今回は一つのSequenceに一つのスキーマしかないのでここは検証しません)。</p><p>そして、Sequence同士を結ぶ重要な役割として <strong>Lens(レンズ)</strong> があります。レンズは「あるシーケンスにおける最後のスキーマと、別のシーケンスにおける最初のスキーマとの間の双方向のマッピング」であり、<strong>互換性を持たないシーケンスどうしの変換</strong>、糊付けのような役割を果たします。リネージをよく見ると、 <code>lens: forward</code> と <code>lens: reverse</code> という役割があり、それぞれレンズを通過した際に、スキーマの変更に合わせてどのようにデータを変換すればいいか記述されています。</p><p>ここで忘れてはならないのが <strong>Lacuna(ラクーナ、欠落)</strong> です。ラクーナは「レンズのマッピングロジックにおけるギャップ、つまり、<strong>そのレンズを通過した特定のインスタンスが何らかの意味上の欠落を持つこと</strong>」を表します。テーブルのカラムの追加、削除を思い浮かべるのが手っ取り早いのではないでしょうか。リネージではSchema1.0からSchema0.0に変換する際に、secondfieldが消えることを説明しています。</p><p>最後に<strong>インスタンス</strong>です。これはスキーマというテンプレートにしたがって作成されたデータの実体を表しています。</p><p>さて、Themaの概念を説明したところで、これをどうやって活用するか説明しましょう。<a href="https://github.com/grafana/thema/blob/main/docs/authoring.md">Themaのチュートリアル</a>では、Theamaを組み込んだGo言語のプログラミングを例にスキーマの進化に合わせて、自動的にインスタンスを変換できる処理を掘り下げて説明しています。</p><p>ここではその内容に従ってできることを一つのテストコードにまとめてみました。<br><a href="https://github.com/hodagi/learning-thema/blob/main/main_test.go#L53-L85">https://github.com/hodagi/learning-thema/blob/main/main_test.go#L53-L85</a></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// version0.0のスキーマに従って作成されたJSONデータを読み込み、cuelangデータに変換する</span></span><br><span class="line">   <span class="comment">// この段階ではthemaはどのバージョンのデータか本当は知りません。それは次の処理です。</span></span><br><span class="line">cue00 := dataAsValue(lib)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. cuelangデータが、リネージ(ship.cue)で定義されたいずれかのスキーマバージョンであることを自動的に確認する</span></span><br><span class="line">   <span class="comment">// 2. 確認後、推測したスキーマに合わせてオートマッピングする</span></span><br><span class="line">inst00 := shiplin.ValidateAny(cue00)</span><br><span class="line"><span class="keyword">if</span> inst00 == <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(<span class="string">&quot;expected input data to validate against schema 0.0&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ship00 Ship00</span><br><span class="line">inst00.UnwrapCUE().Decode(&amp;ship00)</span><br><span class="line">fmt.Printf(<span class="string">&quot;version&quot;</span>+inst00.Schema().Version().String()+<span class="string">&quot;:%+v\n&quot;</span>, ship00) <span class="comment">// &quot;&#123;Firstfield:foo&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 0.0バージョンのデータを1.0バージョンに変換する</span></span><br><span class="line"><span class="keyword">var</span> ship10 Ship10</span><br><span class="line">inst10, lacunas := inst00.Translate(targetVersion)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先ほどのバージョンにはなかったSecondfieldができていることがわかる</span></span><br><span class="line">inst10.UnwrapCUE().Decode(&amp;ship10)</span><br><span class="line">fmt.Printf(<span class="string">&quot;version&quot;</span>+inst10.Schema().Version().String()+<span class="string">&quot;:%+v\n&quot;</span>, ship10) <span class="comment">// &quot;&#123;Firstfield:foo Secondfield:-1&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// バージョン0.0~&gt;1.0に上げた際に&quot;欠落&quot;した(デフォルトとして補った)情報を確認する</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;Lacuna(欠落したフィールド情報)\n&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> lacunas.AsList() &#123;</span><br><span class="line">fmt.Println(s) <span class="comment">// &#123;[] [&#123;secondfield &lt;nil&gt;&#125;] 0 -1 used as a placeholder value - replace with a real value before persisting!&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この処理で重要なのは1.バリデーションチェック、2. スキーマの推測 3. バージョン変換です。これらの処理をリネージに従って行うことで、スキーマの進化に伴ったデータ変換を安全に行うことができます。</p><h1 id="振り返り"><a href="#振り返り" class="headerlink" title="振り返り"></a>振り返り</h1><p>スキーマのバージョン管理と互換性に関する話をしました。</p><p>サービス間通信とIDLというお題からするとデータベースの話は蛇足ではありますが、テーブルをデータ構造とそのIFと見なした時に、スキーマの進化が抱えている問題と同根であると思ったので、説明いたしました。個人的には、データベースにおいて分散データベースという文脈から “コンピューティングとストレージの分離” ってテーマが流行っていますが、この辺が課題解決につながりそうな気がしています。</p><p>Themaは絶賛開発中ですが、目指そうとする姿に共感したのでご紹介させていただきました。宜しければ一度触ってみてください。</p><p>次は武田さんのOpen API Specification 規約の話です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:0"><span style="vertical-align: top; padding-right: 10px;">0.</span><span style="vertical-align: top;"><a href="https://future-architect.github.io/articles/20220426a/">https://future-architect.github.io/articles/20220426a/</a></span><a href="#fnref:0" rev="footnote"> ↩</a></li><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://flywaydb.org/">Flyway</a>や<a href="https://github.com/liquibase/liquibase">Liquibase</a>がよく知られています。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">この話、<a href="https://backstage.io/">Backstage</a>という推しツールのpluginを使ったエコシステムで実現できるのですが、これについてはまたどこかでお話しできればと思っています。</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/CUE/">CUE</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%AA%E3%83%8D%E3%83%BC%E3%82%B8%E3%83%A5/">データリネージュ</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86/">バージョン管理</category>
      
      <category domain="https://future-architect.github.io/tags/IDL/">IDL</category>
      
      <category domain="https://future-architect.github.io/tags/Thema/">Thema</category>
      
      <category domain="https://future-architect.github.io/tags/vgo/">vgo</category>
      
      
      <comments>https://future-architect.github.io/articles/20220629a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>資料作成のポイント（定例、課題解決用）</title>
      <link>https://future-architect.github.io/articles/20220628a/</link>
      <guid>https://future-architect.github.io/articles/20220628a/</guid>
      <pubDate>Mon, 27 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220628a/background-7056192_640.png&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;268&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220628a/background-7056192_640.png" alt="" width="640" height="268"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。説明資料のスライドを作成するときにチームメンバーによくフィードバックしたポイントをまとめました。</p><p>以下この記事の前提です。</p><ul><li>Google Slideなどのスライド形式が前提です<ul><li>わざわざスライド化しなくてMarkdownに箇条書きで良い場面も多いと思います。先輩はマインドマップでディスカッションしていて憧れました。ただ、この記事ではスライド前提とさせてください</li></ul></li><li>5,6名のメンバーと気合を入れて資料作成し、数ヶ月かけてドメインエキスパートとディスカッションしました経験のまとめです<ul><li>作成した資料は議論のたたき台＋システム設計における要件定義のような位置づけで用いました</li></ul></li><li>資料はフルリモート会議で用いたので、なるべくスライドだけで完結して伝わるような志向があります</li><li>この記事の記載内容は資料作成の全てのユースケースで使えるわけじゃないです<ul><li>コンテキストを共有しているチームメンバーだと割愛できる部分も多いと思います</li></ul></li></ul><p>本記事は、全体→個別ページ→各オブジェクトの流れで進みます。</p><ol><li><a href="#%E8%B3%87%E6%96%99%E5%85%A8%E4%BD%93%E3%81%AE%E6%A7%8B%E6%88%90">資料全体の構成について</a></li><li><a href="1%E3%83%9A%E3%83%BC%E3%82%B8%E5%8D%98%E4%BD%8D%E3%81%AE%E6%A7%8B%E6%88%90">1ページ単位の構成</a></li><li><a href="#%E3%81%95%E3%82%89%E3%81%AB%E8%B3%87%E6%96%99%E3%82%92%E5%88%86%E3%81%8B%E3%82%8A%E3%82%84%E3%81%99%E3%81%8F%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AB">さらに資料を分かりやすくするために</a></li><li><a href="#%E8%A6%81%E7%B4%A0%E3%81%AE%E8%A6%8B%E3%81%9F%E7%9B%AE%E3%83%9E%E3%83%86%E3%83%AA%E3%82%A2%E3%83%AB">ページ内のオブジェクト、フォント要素の見た目（マテリアル）</a></li><li><a href="#%E3%83%AA%E3%83%BC%E3%83%80%E3%83%96%E3%83%AB%E3%81%AA%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%AB%E9%80%9A%E3%81%98%E3%82%8B%E3%81%A8%E3%81%93%E3%82%8D%E3%81%8C%E3%81%82%E3%82%8B">コーディングと似ている部分があるよねって話</a></li><li><a href="#%E3%82%BB%E3%83%AB%E3%83%95%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%82%B7%E3%83%BC%E3%83%88">セルフチェックシート</a></li><li><a href="#%E6%9C%80%E5%BE%8C%E3%81%AB">さいごに</a></li></ol><h2 id="①資料全体の構成"><a href="#①資料全体の構成" class="headerlink" title="①資料全体の構成"></a>①資料全体の構成</h2><h3 id="資料全体の流れにはパターン（型）がある"><a href="#資料全体の流れにはパターン（型）がある" class="headerlink" title="資料全体の流れにはパターン（型）がある"></a>資料全体の流れにはパターン（型）がある</h3><p>他の人の資料を見たりレビューして、分かりにくいと感じるときの大部分は論理が飛躍しているケースです。</p><p>なぜ今それを説明されているのか前後の流れが追えないと読み手にとってかなり苦痛です。回避方法は割りと簡単です。資料には流れがあるべきですが、 <strong>“型”</strong> のようなものが決まっています。これを覚えて適用するだけで根本からダメっていうのはかなり減らせると思います。</p><p>例えば、サービス設計をしていて特定のケースでうまく動作しない課題があるとして、その対策を検討したいとき（要件定義のようなイメージ）のときの流れですが、大体次の形式になります（もちろん、文脈の共有具合で即、事象ページから入ることもありますし、多少流れを前後させることもあります）。</p><img src="/images/20220628a/資料の流れ.png" alt="資料の流れ.png" width="1145" height="671" loading="lazy"><p>よく陥りやすいミスは、<strong>対応案</strong> から説明してしまうことです。全ての苦楽をともにするチームメンバーであれば良いですが、レポートライン上であったり、ドメインエキスパートで常に一緒に働いているわけでない方向けには、急に詳細を話されても、「なんで今この話が出たんだっけ？」と言った困惑が発生しがちです（かつ、リモートワークで説明すると、その困惑具合が分からずそのまま先に進めてしまい、この話自体何だっけ？みたいなそもそも論に立ち返る必要が出てしまうときもあります）。</p><p>スライドを理解するに当たり、必要な前提条件の認識合意が怪しそうであれば、前段に当たる部分もさくっと説明しておきましょう。</p><p>また、前提や事象を話していると開発チーム側が課題だと思ったことが、ビジネス視点だと課題でないこともままあります。例えば「それはユーザーに注意を促してちゃんと意思判断をしてもらうべきだよね」や、「業務的な回避方法はあるので、がんばって機能化しないでも良いよね」といった具合です。前提となる課題認識が異なれば、当然対応案の検討は無意味ですので、ステップは必ず1つずつ踏んで進めるようにしましょう。</p><p>上図での各パートの留意事項です。</p><ul><li><strong>背景</strong>: なぜこの話をするのか。いつ、だれからの問い合わせなどで出たかなども添えられると客観性が上がると思います</li><li><strong>前提・概要</strong>: 図に記載の通り、事象&#x2F;課題を説明する上で必要な情報があれば記載します。聞き手にとって既知のことばかりであれば省略します</li><li><strong>事象・課題</strong><ul><li>どういった問題が発生しているか、あるいは懸念事項なのか説明します<ul><li>事象（事実）と推測（仮説）は分離することにしましょう。混ざると聞き手が混乱します</li></ul></li><li>課題が抽象的で分かりにくい場合、”例示” することが大事<ul><li>例えば、特にシステム的に考慮しないとならないイレギュラーケースは、業務的にはどのようなユーザーがどう操作をしたときに発生するかなどを説明します</li></ul></li><li>事象や課題認識がうまく説明できない場合、次のステップに進まないことが肝要です</li></ul></li><li><strong>原因分析</strong>:<ul><li>課題の発生原因を説明します。話したいことが懸念であればおそらくこのブロックはスキップで切ると思います</li><li>分析の精度がこの後の説得力に関わってきます。<a href="https://xtech.nikkei.com/it/atcl/ncd/17/090800052/">なぜなぜ分析</a> など深掘りを忘れずに</li></ul></li><li><strong>対応案</strong><ul><li>設計案を提示します。メリット・デメリットなど</li><li>できれば複数案を提示すると意思決定しやすいです。このとき明らかに筋が悪い案しか挙げられなくても記載しておくほうがベターです<ul><li>1つしか案がないと、他に対応案がないのかと考え出すことが多いためです</li></ul></li><li>複数案がある場合は、それぞれを比較する必要があります。表形式にして複数の評価軸を持たせるとなお良いでしょう<ul><li>複数案を出せた場合は、Pros&#x2F;consを出した上で今回はこちらの観点からA案を推奨する、とまで言えるとベター</li></ul></li></ul></li><li>（アクション計画）<ul><li>案が決まったら、あとは誰がいつまでに実施するかです。実施後の評価（システム的な監視）も大事です</li><li>対応案が決まっていない時点ではここまで作る必要は無いかと思います。その場で決められるなら決めてしまいましょう</li></ul></li></ul><h3 id="説明していて途中から外したなと感じたとき"><a href="#説明していて途中から外したなと感じたとき" class="headerlink" title="説明していて途中から外したなと感じたとき"></a>説明していて途中から外したなと感じたとき</h3><p>背景や前提のブロックで認識合意できていないのであれば、後続の説明をしても無駄だと思っています。あるブロックを説明できる前提条件が前のブロックであるからです。また、個人的には <strong>課題認識</strong> のところが最重要すべきだと思います。ここが認識合意さえできれば、後は原因分析＋対応案はある意味エンジニアの領域とも言えるため、こちらが提示した案でほぼ自明になることすらあります。課題認識さえ適切にできていれば、対応案について相手からこうすべきだよね、とこちらが落としたい方式を言ってくれることすらあると思います。</p><p>万が一、課題認識までがうまく説明ができず認識をすり合わせできなければ、残念ですが出直したほうが良いでしょう。口頭で補足を試みて、無理そうである＋時間が許すのであれば「整理し直します」とお伝えして別トピックに移りましょう。</p><p>ただ、”型”を守っていると、仮に原因分析・対応案がヒットしなくても、 <strong>前段に戻ることができます</strong>。例えば、対応方針については合意形成できずとも、「課題認識までは分かった」という状態を作れるのであれば、次回はそこを続きに話をスタートさせることができます。課題認識がダメであれば、前提や背景まで立ち戻って、どこまでが認識あっているか、どこからズレているか分かります。この線引きがどこかが分かるだけで大きな前進だと思います。</p><h3 id="他の資料作成でよくありそうな流れ"><a href="#他の資料作成でよくありそうな流れ" class="headerlink" title="他の資料作成でよくありそうな流れ"></a>他の資料作成でよくありそうな流れ</h3><p>他のありがちなパターンもいくつか挙げておきます。</p><img src="/images/20220628a/資料の流れ-ページ2.png" alt="資料の流れ-ページ2.png" width="1200" height="564" loading="lazy"><p>個別のブロックの位置付け、内容は状況により変わるかと思いますが、そこまでパターンは多くないです。資料作成で周囲の成果物を確認して、どういった流れで作成しているかまず把握して、その大きな流れの型を掴むと、楽に、そして勘所を抑えやすくなると思います。</p><p>全体を通して言えることは次のようなポイントでしょうか。</p><ul><li>当事者からすると、一番話したい各論（詳細）から入りたくなる気持ちを堪えて、一段視点を上げてメタ的な部分から説明する</li><li>全体や背景など <strong>概要から→詳細</strong> というステップを踏む</li><li><strong>事実と仮説</strong>を分けるのと同じように、混ぜると混乱しやすいポイントは分ける<ul><li>困っている理由（なぜ依頼したいのか） ⇔ 依頼事項</li><li>暫定対応 ⇔ 恒久対応</li><li>結果や事実 ⇔ 解釈・考察・仮説</li><li>実績 と 予定</li><li>これから同意を取りたい事項 ⇔ 決定事項</li></ul></li></ul><p>どのあたりを前提、事実、決定事項として置いてよいかはプロジェクト歴が長い先輩に確認しておきましょう。また、事実であるかどうかがあやふやな場合は <strong>裏取り</strong> をとりましょう。データ調査で済むのであればそれを、ヒアリングであればそれも実施し、だれにいつ伺ったか備考に書いておくとよいでしょう。</p><p>注意ですが、聞き手全員が認識合意できていれば前段ブロックはスキップしたり、口頭で一言補足するくらいで済むケースも多いです。どういう参加者がいるかによって比重は切り替えていきましょう。</p><h3 id="一般的によく言われる手法"><a href="#一般的によく言われる手法" class="headerlink" title="一般的によく言われる手法"></a>一般的によく言われる手法</h3><p>上記の文章の型ですが、PREP法 SDS法 DESC法と言うパターンもあるそうです<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p><ul><li>PREP<ul><li>まず結論（Point）を述べ、理由（Reason）を説明、具体的な例（Example）を出した、最後にまとめ（Point）を述べる構成</li><li>ストーリーを重視したい場合はこちらを用いる</li></ul></li><li>SDS<ul><li>最初に要約（Summary）を伝え、次に詳細な説明（Details）をした後、最後にまとめ（Summary）を述べる構成</li><li>結論を重視したい場合</li></ul></li><li>DESC<ul><li>状況を客観的に描写(Describe)、次に主観的な意見や問題点を表現(Express)し、上記に対する解決法を提案(Suggest)した後、最後に上の提案によりどのような結果(Consequence)になるかを述べる構成</li><li>人に何かを承認させたい場合</li></ul></li></ul><p>状況、課題、提案といった流れはDESC法が近いかもしれません。解説記事がたくさん存在するため、一般的に広く用いられる手法を知りたい方は調べてみると良いかもしれません。</p><h3 id="流れがわからなくなったとき"><a href="#流れがわからなくなったとき" class="headerlink" title="流れがわからなくなったとき"></a>流れがわからなくなったとき</h3><p>スライド全体における流れの重要性は分かっても、上手くまとまらない！っということ多いと思います。</p><p>この状態に陥った場合は、スライドで作るのを辞め、テキストファイルで言いたいことをまとめることも有効です。私はよくSlackで言いたいことを箇条書きでまとめてから資料作成に取り組みます（箇条書きにインデントつけられるので便利ですよね）。</p><p>箇条書きで言いたいことの流れが整理できると、あとはスライドのよくある表現に落とし込むという作業に持っていけます。</p><h1 id="②1ページ単位の構成"><a href="#②1ページ単位の構成" class="headerlink" title="②1ページ単位の構成"></a>②1ページ単位の構成</h1><p>ページ単位でのポイントを紹介します。</p><h3 id="各ページのテンプレート"><a href="#各ページのテンプレート" class="headerlink" title="各ページのテンプレート"></a>各ページのテンプレート</h3><p>スライド間の流れは前章の通り、大枠パターンに従って作成して、突っかかりがあるなと感じた部分を微修正すると良いでしょう。おそらくこれらの調整は各ページを作りつつ並行して行うと思います。</p><p>さて、スライド化して各ページを作成するときのポイントです。まずタイトル、リード文を記載します。タイトルとリード文がマッチしていないと聞き手が混乱するので、内容の整合性を保つように意識します。各ページのベーシックな構造に次のような形式があります。</p><img src="/images/20220628a/スライドのテンプレート.png" alt="スライドのテンプレート.png" width="1031" height="471" loading="lazy"><p>よく見るハマりどころとしては次のようなことがあります。</p><ul><li>タイトルとリード文の内容が不一致（お題と言っていることに齟齬がある）<ul><li>タイトルに「背景と対策」って書いてあるが、本文に対策が無く原因分析までしか書いていないといった、片手落ちケースも含む<ul><li>この場合は、タイトルは「背景と原因分析」にすべき</li></ul></li></ul></li><li>リード文と図上のテキストが全く同じことを言っている<ul><li>間違い探しみたいになっちゃうので、リード文の抽象度を上げて粒度を変えるなどを試してみる</li></ul></li><li>リード文が存在しない<ul><li>何のためのページかわからなくなる</li><li>前後のページの文脈から自明であれば省略しても良いかと思いますが、稀かなと思います</li><li>図などのメインコンテンツから作ってしまい、その図が「現状」「課題」「対応案」のどれを指しているかごちゃごちゃしてしまう</li></ul></li><li>図表がどういう条件で作っているか、データ抽出条件を詳しくリード文に書いてしまう<ul><li>抽出条件が主題ではなく、かつ長くなるようであれば、リード文ではなく【別紙】ページを作って、抽出条件の説明は切り出しても良いかなと思います</li></ul></li></ul><p>しっちゃかめっちゃかになることはよくあると思います。この場合は図や表を作るという意識から離れ、タイトルとリード文（ここに箇条書きなどを入れつつ）だけでスライドを作り、テキストだけだと分かりにくい箇所に、図を入れるという流れで作ると、秩序を保ちやすいと思います。</p><h3 id="最初にこのページで聞き手に何をして欲しいか明確に宣言する"><a href="#最初にこのページで聞き手に何をして欲しいか明確に宣言する" class="headerlink" title="最初にこのページで聞き手に何をして欲しいか明確に宣言する"></a>最初にこのページで聞き手に何をして欲しいか明確に宣言する</h3><p>そのページでやりたいことがなにか、明確化できると話が早く進みます。主なパターンはだいたい次の3つです。</p><ol><li><strong>報告</strong>: 進捗が順調などの場合はこれに当たると思います。とくに意思決定などが不要なケースです。何か気になることがあれば質問してもらう、といったページです</li><li><strong>相談</strong>: なにか進捗で困った事があるので、仕様やスコープ、優先順位を相談したいケースです。なぜ困ったことが出てきたのかの理由、原因や対応案を素案で良いので作ると良いです</li><li><strong>依頼</strong>: なにか聞き手にお願いしたい事がある場合。例えばだれかに顔つなぎして欲しいなどです。なぜ依頼したいのか背景も説明が必要です。方向性の確認などもここに含みます</li></ol><p>最初にそのページを説明する前に、これは単なる報告なのか（とりあえず聞いておくだけで良いのか）、相談なのか（なにか意思決定をする必要があるのか）、依頼なのか（なにか手を動かすことが必要なのか）を伝えてあげると利き手側の認知負荷が下がります。</p><p>同時に、作り手側としても、この資料は3つのどれにあたるかを意識して、ページ内の構成などを整理しやすくなると思います。</p><p>複数の部署に所属するメンバーが参加している会議体の場合においては、リモート会議だと聞き逃す人が多い気がします。そのためページのタイトル位置に、だれ向けの何であるかを示すオブジェクトの設置を推奨することもあります。慣れないうちは、作る資料が誰に向けて・何の目的で行うのか見失わないように注意すると良いかなと思います。</p><img src="/images/20220628a/スライドタイトル.png" alt="スライドタイトル.png" width="711" height="471" loading="lazy"><p>もちろん、これもお互い見知ったメンバーしかいない場合は右上のオブジェクトなどは、やり過ぎの部類でしょう。</p><p>ただ、もし会議で、毎回「△△△さん、この内容で問題ないでしょうか」→「ごめんなさい、聞き逃しました、何のことですか？」といったやり取りが増えてくる場合は、このような工夫もありかなと思います。聞き手にとっても、このページは自分がちゃんと内容を理解して判断しないとならないんだと最初に伝わると、こういった時間ロスも無くせ、密度の高い会議ができると思います。</p><h3 id="情報を構造化する"><a href="#情報を構造化する" class="headerlink" title="情報を構造化する"></a>情報を構造化する</h3><p>資料で共有したいコンテンツですが、なるべく構造化しましょう。構造化の第一歩は箇条書きです。箇条書きがネストしてくると同じ構造が繰り返していると気がつくことがあります。次は表形式にチャレンジしましょう。私がよく考えている流れは次のとおりです。</p><h4 id="やるべき構造化の流れ"><a href="#やるべき構造化の流れ" class="headerlink" title="やるべき構造化の流れ"></a>やるべき構造化の流れ</h4><ol start="0"><li>言いたいことをテキストに列挙する</li><li>自然文から箇条書きにする<ul><li>同じ意味の要素はくっつける</li><li>スライドの”型”にあるような、用途ごとに分類分けする（≒ブロックを分けして、ラベルをつける）<ul><li>例) 概要、課題、原因、対応案</li><li>例) 背景、困難、依頼・確認</li></ul></li></ul></li><li>ネストさせる（インデントを付ける）<ul><li>箇条書きの各要素は、結論→詳細の順番にする</li><li>特に詳細のインデントは下げられることが多いです</li><li>トップ、子要素の言いたいことのレベル感をなるべく揃えるようにします</li></ul></li><li>順番に意味があるなら連番を振る<ul><li>読み手に情報量を与える</li><li>冗長な表現は削除する</li></ul></li><li>ネストした要素で、同じ構造が繰り返し始めたら “表形式” にする<ul><li>複数案を評価したい場合はほぼ間違いなく表になると思います</li><li>時系列の説明をしたい場合は表の方が見やすいです</li></ul></li><li>テキストで説明が難しい場合（関係性が、ツリー、ネットワークなどを含む場合）は、図を追加する</li><li>複数の異なる図を1ページに追加したくなった場合は、要素ごとにページ分割を考える</li></ol><p>慣れていない人は、自然文でスライドのリード文を作ってしまうようです（研修でロジカルシンキングを学んでいても、すぐに実践で活用できる人は稀です）。そのため、まずは自然文を箇条書きに直しましょう。</p><p>次の壁は、箇条書きの内容を推敲してわかりやすく分類分けする部分です。次に構造を見つけて適切な表現を切り出すところでしょうか</p><h4 id="構造化の例（イメージ）"><a href="#構造化の例（イメージ）" class="headerlink" title="構造化の例（イメージ）"></a>構造化の例（イメージ）</h4><figure class="highlight sh"><figcaption><span>自然文（適当に錬成したので中身は適当です）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mm/dd日からリリースした機能Aによってエンドユーザーの特定のキーワードを含むコンテンツ投稿に対して警告を表示しています。</span><br><span class="line">警告を出す条件としては、表1で定義された禁止ワードを1つ以上含むか、警告ワードを3つ以上含むかのどちらかを満たすときです。</span><br><span class="line">エンドユーザーは禁止ワードを含まないようにするか、運営に問い合わせして承認して貰う必要があります。</span><br><span class="line">これにより投稿数が想定より大幅に減少しクレームが多発したため、急ぎ本機能のリリースを取り消し切り戻しました。</span><br></pre></td></tr></table></figure><p>↓<br>↓（箇条書きにする）<br>↓</p><figure class="highlight sh"><figcaption><span>箇条書き化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* mm/dd日にエンドユーザーの特定のキーワードを含むコンテンツ投稿に対して警告を表示する機能Aをリリース</span><br><span class="line">    * 機能Aは次のいずれかの条件を満たすときに警告を出す</span><br><span class="line">        * 表1で定義された禁止ワードを1つ以上含む</span><br><span class="line">        * 警告ワードを3つ以上含む</span><br><span class="line">    * 警告が出たときのエンドユーザーアクションは次のいずれかを想定</span><br><span class="line">        * 禁止ワードを含まないように修正</span><br><span class="line">        * 運営に問い合わせして承認後に公開</span><br><span class="line">* 投稿数が想定より大幅に減少し、クレームが多発</span><br><span class="line">* 急ぎ本機能のリリースを取り消し、切り戻し</span><br></pre></td></tr></table></figure><p>↓<br>↓(レベル感を揃える。各要素のグループのラベルを付ける)<br>↓</p><figure class="highlight sh"><figcaption><span>箇条書き化（型に載せてみる）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* 背景</span><br><span class="line">    * mm/dd日にエンドユーザーの特定のキーワードを含むコンテンツ投稿に対して警告を表示する機能Aをリリース</span><br><span class="line">        * 機能Aは次のいずれかの条件を満たすときに警告を出す</span><br><span class="line">            * （条件1）表1で定義された禁止ワードを1つ以上含む</span><br><span class="line">            * （条件2）警告ワードを3つ以上含む</span><br><span class="line">        * 警告が出たときのエンドユーザーアクションは次のいずれかを想定</span><br><span class="line">            * 禁止ワードを含まないように修正</span><br><span class="line">            * 運営に問い合わせして承認後に公開</span><br><span class="line">* 課題</span><br><span class="line">    * 投稿数が想定より大幅に減少し、クレームが多発</span><br></pre></td></tr></table></figure><p>↓<br>↓（足りない項目を追加する。ここでは現時点の状況や今後の相談事項が足りないことがわかったので追記）<br>↓</p><figure class="highlight sh"><figcaption><span>箇条書き化（項目追加）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">* 背景</span><br><span class="line">    * mm/dd日にエンドユーザーの特定のキーワードを含むコンテンツ投稿に対して警告を表示する機能Aをリリース</span><br><span class="line">        * 機能Aは次のいずれかの条件を満たすときに警告を出す</span><br><span class="line">            * （条件1）表1で定義された禁止ワードを1つ以上含む</span><br><span class="line">            * （条件2）警告ワードを3つ以上含む</span><br><span class="line">        * 警告が出たときのエンドユーザーアクションは次のいずれかを想定</span><br><span class="line">            * 禁止ワードを含まないように修正</span><br><span class="line">            * 運営に問い合わせして承認後に公開</span><br><span class="line">* 課題</span><br><span class="line">    * 投稿数が想定より大幅に減少し、クレームが多発</span><br><span class="line">* 暫定対応（状況）</span><br><span class="line">    * 急ぎ本機能のリリースを取り消し、切り戻し済み</span><br><span class="line">* 相談事項</span><br><span class="line">    * 本機能の最終的な扱いをどうするか</span><br><span class="line">    * 対応案</span><br><span class="line">        1. 投稿前チェック機能のリリースは無期限ペンディングする</span><br><span class="line">           * 投稿コンテンツのチェックは引き続き運営メンバーで実施するためコスト高</span><br><span class="line">        1. 条件1のみにし、条件2を外す</span><br><span class="line">            * リリース時に調査したところ、検知に引っかかったユーザーの多くは条件2だった</span><br></pre></td></tr></table></figure><p>トップレベルの箇条書き項目が3つ以上登場すると、おそらくそれらを2つ以上に分類できると思うので、”型” を参考にして分類分けするとわかりやすいです（大外れが少なくなります）。そうすると、従来の箇条書きが「今の状態」しか説明しておらず、「アクションプラン提示」も「相談」したいという内容も記載が無いということに気が付くと思います。箇条書きで整理するとこういった抜け落ちに気が付きやすくなるのでオススメです。</p><p>また、この例では実施してないですが、例えば機能Aの実行条件や、エンドユーザーアクションが複雑であれば表形式にするといったことを取るとよいでしょう。少なくても対応案はこのトピックの目玉のディスカッションポイントだと思うので、できる限り評価軸を洗い出して表形式にするとよいでしょう。</p><p>図ですがこのケースではどうとでも取れますが、警告表示する画面キャプチャや、クレーム内容（B2CであればSNSの投稿内容）などを見せられると、温度感が全メンバーに伝わるので適時入れても良いかもしれません。これがあると機能イメージをあまり理解できてなかった人にも優しく、あるいは課題に対する優先度具合もチームで共有することができます（優先度の温度感がズレてこじれるケースもあるので、影響度は共有できると良いでしょう）。</p><h3 id="論理整合性チェックにロジカルシンキングテクニックを試してみる"><a href="#論理整合性チェックにロジカルシンキングテクニックを試してみる" class="headerlink" title="論理整合性チェックにロジカルシンキングテクニックを試してみる"></a>論理整合性チェックにロジカルシンキングテクニックを試してみる</h3><p>コンサルティング術を説明する書籍によく書いていますが、So what, Why soはかなり使えるテクニックです。</p><img src="/images/20220628a/whyso,so_what.png" alt="whyso,so_what.png" width="1200" height="475" loading="lazy"><p>前章の箇条書きの例ですが、それぞれの要素でSo what, Why soを自問して応えられるようになっておくと良いでしょう。</p><p>例えば、背景に対してWhy soを行うと「そもそもなんで機能Aをリリースしたんだっけ？」となると思います。これに答えられないと参加者の課題の優先度などの認識がズレることにつながるかもしれません。機能Aをリリースした背景に、なぜリリースする必要があったか、本来は追記したほうが良いでしょう。また、「課題」は投稿数が減少とありますが、So Whatを投げかけると、それがビジネス的にどれくらいのインパクトがあるか？という問いも連想できると思います。課題がビジネス側に取ってどういうインパクトなのか言い換えた方が、話は早くなるでしょう。また、具体的に投稿数は前後でどれくらい減ったか示したり（図にグラフを登場させたくなりますね）、クレーム数を上げて、影響度を数値ベースで説明したくなりますね。Why So, So Whatを用いると、こういった抜けている観点を洗い出すにも使えます。</p><p>MECEですが、漏れなくダブり無くの意味です。Mutually（お互いに）、Exclusive（重複せず）、Collectively（全体に）、Exhaustive（漏れがない）の頭文字を取ったコンサル用語です。Why Soでブレイクダウンするときに、根拠がガバガバだと聞き手は結構不安になります。大枠があっていれば安心がある（一定の品質はあると見なせる）ので意識しましょう。</p><p>MECEをいい感じに扱うためのフレームワークは5W1HとかSWOTとかありますが、まぁツリーでまず要素を洗いしてグルーピングしつつ、使えそうなフレームワークをボトムアップ的に採用するといった形式が最初は良いと思います。フレームワークを最初から頼ると訳が分からなくなるからです。このあたりは開発でデザインパターンとか●●アーキテクチャとかを最初から意識しすぎると、オーバースペックになりがちなのと同じ話かなと思います。</p><h3 id="ページの分割"><a href="#ページの分割" class="headerlink" title="ページの分割"></a>ページの分割</h3><p>情報密度が高くなってくると1スライド1メッセージを踏まえ、ページを分割・統合しましょう。たまに箇条書き1個くらいの情報量で分割して迷走しちゃう人もいるが、1ページあたりの情報量が少なければ分割する必要はないです。「情報構造化」章の「箇条書き化（項目追加）」はそのまま書いてちょっと図で補足するだけでスライドとしてはビジーになるので無理に1ページに収めず分割するほうが良いでしょう。</p><p>次図に分割のイメージを記載しました。対応案はちゃんと書けばもっと各セルで行数が増えるので、ここだけ切り出して別ページにしても良いかなと思います。</p><img src="/images/20220628a/スライド分割.png" alt="スライド分割.png" width="1200" height="392" loading="lazy"><h3 id="未定義の言葉を急に出さない"><a href="#未定義の言葉を急に出さない" class="headerlink" title="未定義の言葉を急に出さない"></a>未定義の言葉を急に出さない</h3><p>論理の飛躍とともに、よくあるハマりどころとして、資料に「新しい概念・用語」が急に出てくることです。論理の飛躍の亜種かもしれません。</p><p>業務的な概念はなるべく少ない方が良いです（業務理解が複雑になるため）。そのため既存の用語で説明できる限りはそれに従いましょう。</p><p>どうしても不便な場合のみ新規の概念を持ち出し、それらを使い分ける条件も定義しましょう。</p><p>名称については、確定していないことを明確化するため、初回登場時は <code>（仮）</code> と使えると良いでしょう。</p><h3 id="その他注意ポイント"><a href="#その他注意ポイント" class="headerlink" title="その他注意ポイント"></a>その他注意ポイント</h3><p>次のポイントも注意です。</p><ul><li>書いてみてから、ページ間の整合性がないか確認する。最初に考えた流れにマッチしていないことがある<ul><li>タイトル、リード文を読んでいくと、資料全体のストーリーがなんとなく分かるくらいになるのがベスト</li></ul></li><li>図と、リード文、タイトルがマッチしているか<ul><li>リード文が、図にマッチしていなかったり、図と全く同じ文章が書かれていることが多々ある</li><li>この場合は、リード文側の抽象度を少し上げ、図が何を示しているかメタ的な内容にするとわかりやすくできることがあります</li></ul></li><li>詳細すぎるページは、【補足】や【参考】ページとしてタイトルにも付与する<ul><li>例えば、ユーザーの投稿数のBefore&#x2F;Afterのデータ抽出条件など</li></ul></li><li>前回説明済みのページは【再掲】などと追加し、分かるようにしておく<ul><li>前回との差分があるのかと身構えてしまう。レビュアーとしても負荷がある</li><li>ページを置くこと自体は重要（忘れるので）</li></ul></li></ul><h2 id="③さらに資料を分かりやすくするために"><a href="#③さらに資料を分かりやすくするために" class="headerlink" title="③さらに資料を分かりやすくするために"></a>③さらに資料を分かりやすくするために</h2><h3 id="前回のおさらいは面倒でもやっておくと吉"><a href="#前回のおさらいは面倒でもやっておくと吉" class="headerlink" title="前回のおさらいは面倒でもやっておくと吉"></a>前回のおさらいは面倒でもやっておくと吉</h3><p>定時、不定期を問わず前回のサマリを最初に共有することはけっこう有効です。議論トピック、決定事項、TODOと、それらに決まった経緯・判断理由を説明すると齟齬がより無くなるでしょう。</p><h3 id="原因分析や対応案でメカニズムを説明する必要がある場合は、極力シンプルなケースで説明する"><a href="#原因分析や対応案でメカニズムを説明する必要がある場合は、極力シンプルなケースで説明する" class="headerlink" title="原因分析や対応案でメカニズムを説明する必要がある場合は、極力シンプルなケースで説明する"></a>原因分析や対応案でメカニズムを説明する必要がある場合は、極力シンプルなケースで説明する</h3><p>原因分析や、対応案の説明ですが、どうしてもシステム設計の場合は専門度が上がって難しくなりがちです。自然言語解析で～とか、モデルの話がでると付いていけないです（私です）。<br>このとき、簡易的に説明する図があると嬉しいでしょう。</p><p>また、パターンとしては複数のケースを説明するではなく、その対応案が動作する最もシンプルな条件で説明すると良いです。認識齟齬をなくしてより本質的な議論をしやすいです</p><h3 id="具体的な案を出せると実行に具体性が出て付加価値が高い"><a href="#具体的な案を出せると実行に具体性が出て付加価値が高い" class="headerlink" title="具体的な案を出せると実行に具体性が出て付加価値が高い"></a>具体的な案を出せると実行に具体性が出て付加価値が高い</h3><p>「xxxのデータケースにおいては、xxx画面のxxx表示が正しく行われない問題がある。どうしましょうか？」といった、課題提起で終わるケースを見かけます。</p><p>悪くはないです。ただ、口頭で補足するのであれば良いですが、時間がある＋よりコンサルティング的に付加価値が高いところを目指すのであれば、対策について素案を複数出せると親切だし、話の展開も早いでしょう。</p><p>対策案を出すときのコツです。</p><ul><li>複数案があると意思決定しやすい<ul><li>1案だけだと、不安になる（他の案は確実にあるはずなので、その場で決めきることが難しくなる）</li><li>例えば、「何もしない」というのも対応案の1つです</li></ul></li><li>複数案を提示するということは、何かしらの観点で比較する<ul><li>表形式で、比較軸がでてくるはずです<ul><li>もっともシンプルなのは、Pros&#x2F;Cons（メリット&#x2F;デメリット）でしょう</li><li>メリット、デメリットを箇条書きで書いてくると、表のカラムとして切り出せる軸が見えてくると思います</li></ul></li></ul></li></ul><h3 id="デモは思い通り動かないものなので命綱を用意しておくこと推奨"><a href="#デモは思い通り動かないものなので命綱を用意しておくこと推奨" class="headerlink" title="デモは思い通り動かないものなので命綱を用意しておくこと推奨"></a>デモは思い通り動かないものなので命綱を用意しておくこと推奨</h3><p>新機能の使い勝手を試すときに、実機でデモをしたくなります（インパクトが異なりますよね）。体感ですがマーフィーの法則です。1,2割は失敗します。リモートワークだと、ZoomやGoogle Meetのネットワーク負荷などがあるのか、なぜか動かない？とか起動に手間取ることが増えた気がします。</p><p>フォールバック先として、新機能の動画やキャプチャを資料に添付しておくと良いでしょう。</p><p>こうしておくと、後々別の人が資料を見返したときに、どういうデモをしていたのかトレースできるメリットもあります（このデモってどういう内容でしたか？という問い合わせも減らせます）。</p><h2 id="④要素の見た目（マテリアル）"><a href="#④要素の見た目（マテリアル）" class="headerlink" title="④要素の見た目（マテリアル）"></a>④要素の見た目（マテリアル）</h2><h3 id="スライドのマテリアルの注意"><a href="#スライドのマテリアルの注意" class="headerlink" title="スライドのマテリアルの注意"></a>スライドのマテリアルの注意</h3><p>コンテンツの論理構造に比べれば枝葉に思う人もたまに観測しますが、誤解を生まず、認知負荷を下げる見た目は非常に重要です。</p><ul><li>矢印を引いた場合と、その説明文は同じ色にしたほうが良い</li><li>フォントサイズ、フォント色とか、背景色、ブロックの位置（箇条書き、ネスト、表、シーケンス図、etc）も一番脳内負荷が小さいデータ構造を採用する</li><li>図の構造で、一貫性があるか。縦、横に同一の矢印などがひけるか</li><li>説明できない、色とかオブジェクトとかは使わない</li></ul><p>個人的には次のTwitterアカウントの人気の投稿を見るだけでぐっと良くなると思います。まずはフォローしてみることがオススメです。</p><p><a href="https://twitter.com/designkenkyujo/status/1405085817819774976?t=Gn6FBc5okSUhsu4H7f7KNQ&amp;s=19">https://twitter.com/designkenkyujo/status/1405085817819774976?t=Gn6FBc5okSUhsu4H7f7KNQ&amp;s=19</a></p><p><a href="https://twitter.com/designkenkyujo/status/1402605062044610565?t=r3XOeOi66FxzOPq-2iyDag&amp;s=19">https://twitter.com/designkenkyujo/status/1402605062044610565?t=r3XOeOi66FxzOPq-2iyDag&amp;s=19</a></p><p><a href="https://twitter.com/presen_design/status/1540259182426828800?s=20&amp;t=fX1-o63-1VTccqzgj4hU7Q">https://twitter.com/presen_design/status/1540259182426828800?s=20&amp;t=fX1-o63-1VTccqzgj4hU7Q</a></p><p><a href="https://twitter.com/toyomane/status/1492134406739623937?s=20&amp;t=fX1-o63-1VTccqzgj4hU7Q">https://twitter.com/toyomane/status/1492134406739623937?s=20&amp;t=fX1-o63-1VTccqzgj4hU7Q</a></p><p><a href="https://twitter.com/toyomane/status/1505830384218832896?s=20&amp;t=fX1-o63-1VTccqzgj4hU7Q">https://twitter.com/toyomane/status/1505830384218832896?s=20&amp;t=fX1-o63-1VTccqzgj4hU7Q</a></p><p>※他にも、様々な最高に直感的に学べる有識者の方が本当に、たくさんいて勉強になります。</p><h2 id="⑤リーダブルなコーディングに通じるところがある"><a href="#⑤リーダブルなコーディングに通じるところがある" class="headerlink" title="⑤リーダブルなコーディングに通じるところがある"></a>⑤リーダブルなコーディングに通じるところがある</h2><p>コーディングも直接パケットを操るようなシステムプログラムで無く、特にアプリをクラウド上で動かすような実装は、より宣言的、文学的（？）になってきていると思います。そのためのなのか、読みやすいコードも、資料も似ている部分があるなと感じます（今まで共感を得られたことは無い意見です）。</p><ul><li>資料には、結論だけじゃなくて、なぜそうなのか理由を書くべき<ul><li>これはコードコメント、コミットログにWhy（Why not）を書こうといった話に似ている</li></ul></li><li>箇条書きで同じレベルになる項目の抽象度は揃える<ul><li>コードで変数や関数を宣言するときに、レベル感を揃えたくなるのと同じ<ul><li>infrastructureパッケージで具体的な外部アクセスを隠蔽化したりとか</li></ul></li></ul></li><li>未定義な用語を使わない<ul><li>変数宣言されていないものを使わない</li><li>適切なユーザー定義型を宣言する</li></ul></li><li>論理展開にヌケモレがないか<ul><li>データの受信、送信側で抜け落ちが無いか（やや強引に書きました。笑）</li></ul></li><li>1スライド1メッセージ<ul><li>Fatコントローラにしない、責務が増えてくればクラスを分割する</li></ul></li></ul><p>資料作成がうまくなるとコーディングが早くなると言いたいところですが、個人的にはそんなことはなく、そこを目指すのであればコードを書き続けたほうが正直良いと思います。しかし、突き抜ければ結局のところお互いに応用が効くように収斂してくるのではないでしょうか。少なくてもリーダブルなコードを書こうと考えている人は、資料もフィードバックすればすぐ見やすくなる傾向を感じます</p><h2 id="⑥セルフチェックシート"><a href="#⑥セルフチェックシート" class="headerlink" title="⑥セルフチェックシート"></a>⑥セルフチェックシート</h2><p>本文が長くなったため、セルフチェックシートを作ってみました。</p><p>量が多いので、使いたい部分のみコピーして利用していただくとです。</p><h4 id="論理構成"><a href="#論理構成" class="headerlink" title="論理構成"></a>論理構成</h4><ul><li><input disabled="" type="checkbox"> この資料がなぜ必要か、課題認識が読み手から合意できるか</li><li><input disabled="" type="checkbox"> 独自定義の用語を使っていないか。使っているとしたらどういう意味で使っているか明記しているか</li><li><input disabled="" type="checkbox"> 作業報告や、対応案についての説明をするときに、なぜそれが必要なのかが書かれているか</li><li><input disabled="" type="checkbox"> 課題対応について話すときは、その課題の背景（どういった課題でなぜ発生しているか）が書かれているか</li><li><input disabled="" type="checkbox"> 対応案を出すときに複数案列挙できているか</li><li><input disabled="" type="checkbox"> 複数案提示するときは表形式、複数の観点で比較できているか。最低限メリット・デメリットが書かれているか</li><li><input disabled="" type="checkbox"> 詳細から入っていないか。概要–&gt;詳細の流れになっているか</li><li><input disabled="" type="checkbox"> 対応案を書く場合、背景・課題認識などが書かれているか</li><li><input disabled="" type="checkbox"> 課題共有だけで終わって、対応案の提示をしていないページが無いか</li><li><input disabled="" type="checkbox"> 目的やゴール、課題や対応などを含んだ長い文章を、箇条書きなどに構造化できないか</li></ul><h4 id="裏取り"><a href="#裏取り" class="headerlink" title="裏取り"></a>裏取り</h4><ul><li><input disabled="" type="checkbox"> 前提が成り立つか真偽不明な条件の上で、懸念を提示してしまっていないか（まず前提があっているか確認することが第一）</li><li><input disabled="" type="checkbox"> レアケースの対応を議論したい場合は、そういったケースの発生頻度を調査する（DBから抜けたら確認する・担当者にヒアリングする、など）</li></ul><h4 id="表現"><a href="#表現" class="headerlink" title="表現"></a>表現</h4><ul><li><input disabled="" type="checkbox"> 順番に意味があるが、連番表記になっていない箇条書きが残っていないか</li><li><input disabled="" type="checkbox"> ネストを持つ箇条書きの項目が繰り返されている場合、表形式にできないか</li><li><input disabled="" type="checkbox"> 表形式に切り出した場合で、特に4つ以上要素がある場合に関心ごとに応じてカラムを追加して分類分けできないか</li><li><input disabled="" type="checkbox"> 表にNoが振られているか（No2の項目だけど～と、会議中に特定した発言をしやすい）</li><li><input disabled="" type="checkbox"> 表に列挙した内容のレベル感があっているか</li></ul><h4 id="お作法"><a href="#お作法" class="headerlink" title="お作法"></a>お作法</h4><ul><li><input disabled="" type="checkbox"> スライドにリード文があるか</li><li><input disabled="" type="checkbox"> タイトル、リード文、図がマッチしているか</li><li><input disabled="" type="checkbox"> リード文と図で同じ内容を、同じ粒度で書いていないか。レベル感を変えるか図を削除できないか</li><li><input disabled="" type="checkbox"> 図に図そのものを説明するラベルが存在するか</li><li><input disabled="" type="checkbox"> 例示で出した数値はビジネス的・業務的に違和感が無いか</li><li><input disabled="" type="checkbox"> あるスライドに複数種類の図がある場合に、ページ分割できないか</li><li><input disabled="" type="checkbox"> あるスライドの密度が低いとき、1ページにまとめられないか</li><li><input disabled="" type="checkbox"> おさらいページに決定事項（How）だけでなく、理由（Why、Why not）も書かれているか</li></ul><h4 id="マテリアル"><a href="#マテリアル" class="headerlink" title="マテリアル"></a>マテリアル</h4><ul><li><input disabled="" type="checkbox"> ページ内で用いたフォント色、背景色は最低限で一貫性があるか</li><li><input disabled="" type="checkbox"> ページ内で用いたオブジェクトの種類は最低限で一貫性があるか</li><li><input disabled="" type="checkbox"> 複数種類のオブジェクトを利用している場合、使い分けの意味が明記されているか。凡例があるか</li><li><input disabled="" type="checkbox"> テキスト色を複数使い分けしているとすると、使い分けの意味が明記されているか。凡例があるか</li><li><input disabled="" type="checkbox"> 事象や対応案を説明するために、サービス画面のキャプチャなどを追加で貼れないか</li><li><input disabled="" type="checkbox"> 別のスライドから図を流用する場合に、今回の議論上不要な強調された色やオブジェクトが残っていないか</li></ul><h4 id="文章（日本語）、基礎的な内容"><a href="#文章（日本語）、基礎的な内容" class="headerlink" title="文章（日本語）、基礎的な内容"></a>文章（日本語）、基礎的な内容</h4><ul><li><input disabled="" type="checkbox"> 削って意味が通る文章が存在しないか</li><li><input disabled="" type="checkbox"> 能動態を使える時に、受動態を使っていないか</li><li><input disabled="" type="checkbox"> 箇条書きのさいごに句点「。」が残っていないか</li><li><input disabled="" type="checkbox"> フォントサイズに一貫性があるか。ある箇所だけ狂っていないか</li></ul><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>私はリモートワークが好きで、なるべく非同期なチャットコミュニケーションでことを済ましたいです。</p><p>会議時間も最小化するために、認識齟齬が出ず、論点を明確にして早く会議を終了でき、かつ実りある有意義な場にしたいです（決定事項、TODOの数と質はKPIだなと思っています）。</p><p>この記事が皆さまの業務効率に少しでも役に立てると幸いです。</p><p>いつもはゆるい技術記事を書くことが多いので、こういったビジネスTips（？）的な記事を書くのは初めてです。もっとこうした方が良いよ、などありましたら、Twitterで報告いただけるとです。</p><p>最後まで読んでいただき、ありがとうございます！</p><p>※<a href="https://pixabay.com/ja/users/mightyfinebros-17490253/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=7056192">Jonathan Hammond</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=7056192">Pixabay</a>からの画像を利用しています</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://btobmarketing-textbook.com/prep-sds-desc/">https://btobmarketing-textbook.com/prep-sds-desc/</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Business/">Business</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/">リモートワーク</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9/">ビジネス</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%86%E3%82%AF%E3%83%8B%E3%82%AB%E3%83%AB%E3%83%A9%E3%82%A4%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0/">テクニカルライティング</category>
      
      
      <comments>https://future-architect.github.io/articles/20220628a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>grpc-gatewayでgRPCとREST両対応のサーバを作る</title>
      <link>https://future-architect.github.io/articles/20220624a/</link>
      <guid>https://future-architect.github.io/articles/20220624a/</guid>
      <pubDate>Thu, 23 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIGの関です。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIGの関です。<a href="/articles/20220622a/">サービス間通信とIDL（インタフェース記述言語）連載</a>の3本目です。</p><p>昨日に続き、gRPCネタです。この記事では次のネタを扱います。</p><ul><li>gRPCの概観</li><li>gRPCとWebブラウザの関係性</li><li>grpc-gatewayとは何か？</li><li>gRPCとその周辺ツールを使ったサーバ開発の流れ</li></ul><h1 id="gRPC概観"><a href="#gRPC概観" class="headerlink" title="gRPC概観"></a>gRPC概観</h1><p>gRPCは、HTTP2をベースにしたRPC（リモートプロシージャコール）フレームワークです。</p><p>テキストベースのJSONを用いた一般的なREST APIに対して、gRPCは高効率にデータのやりとりをできたり、双方向の通信ができたり、ストリーミングにも対応していたりといった特長があります。このため、gRPCは現状では主にバックエンドサーバ間の通信に利用されています。</p><h2 id="gRPCとProtocol-Buffers"><a href="#gRPCとProtocol-Buffers" class="headerlink" title="gRPCとProtocol Buffers"></a>gRPCとProtocol Buffers</h2><p>gRPCはProtocol Buffersのツールチェーンを活用すると便利であり、多くの場合下記の流れに沿ってプログラムを作ることになります。</p><ol><li>Protocol BuffersというIDLを使ってRPCの定義をprotoファイルとして記述する。</li><li>前述のprotoファイルをコンパイラ（protoc）+プラグインにかけてライブラリを生成する。</li><li>生成されたライブラリに定義されている関数を使って、サーバ、クライアントを実装する。</li></ol><p>コンパイラのprotocは、Protocol Buffersを解析して、その結果をコード生成用の別のプログラムに渡す役目をします。コード生成用のプログラムのことを”プラグイン”とよび、プラグインを使い分けることで様々な言語やツールに対応します。プラグインは<code>protoc-gen-&#123;プラグイン種別&#125;</code>という名前でPATHに配置しておけば、protocにオプションを渡すだけで利用することができます。同じ解析結果を一度に複数のプラグインに渡すこともできます。</p><p>protocはC++で実装されていますが、各言語用プラグインは別の言語で実装することができ、プラグインを自作することで関連ツールを作ることもできます。</p><h2 id="gRPCとWebブラウザの関係"><a href="#gRPCとWebブラウザの関係" class="headerlink" title="gRPCとWebブラウザの関係"></a>gRPCとWebブラウザの関係</h2><p>Webブラウザの持つ制約のため、2022年6月現在、gRPCはブラウザからの直接利用はできません。このため、ブラウザから利用するには何らかのプロトコル変換が必要になります。現状、次の2つの方法があります。</p><ul><li>gRPC Webに対応させる。</li><li>何らかの手段で、HTTP APIにマッピングする。</li></ul><h3 id="gRPC-Web"><a href="#gRPC-Web" class="headerlink" title="gRPC Web"></a>gRPC Web</h3><p>gRPC Webは大雑把にいうと、一部機能に制約をかけることでgRPCをブラウザからもアクセスできるようにしたプロトコルです。Content-Typeは<code>application/grpc-web</code>もしくは<code>application/grpc-web-text</code>になっています。実際に流れるデータフォーマットはProtocol BuffersやJSONなど複数のフォーマットに対応しているため、送信側が明示することになっています。</p><p>クライアント、つまりブラウザ側から利用するには、上述のprotocとgRPC Web用のプラグインを使って生成したクライアントライブラリを用います。</p><p>gRPCサーバ側をgRPC Webに対応させるには、プロトコル変換を行うリバースプロキシを配置するか、同一コードでgRPC Webにも対応するサーバを作成するかのどちらかです。リバースプロキシとしてはenvoyとnginxが候補になりますが、envoyが人気のようです。昨日紹介された<a href="https://connect.build/docs/introduction/">Connect</a>はプロキシなしでgRPCとgRPC Webに両対応するコードを生成するプラグインになります。</p><h3 id="HTTP-APIへのマッピング"><a href="#HTTP-APIへのマッピング" class="headerlink" title="HTTP APIへのマッピング"></a>HTTP APIへのマッピング</h3><p>HTTP APIにマッピングする方法はさらに2つに分けられ、RPC定義からルールベースで自動マッピングする方法と自力でマッピングする方法とがあります。</p><p>昨日紹介されたConnectの独自プロトコルはルールベースのマッピングです。HTTPのPOSTメソッドのみ利用し、Unary RPCであればContent-Typeが<code>application/json</code>であるため、気軽に試せます。</p><p>一方で、自力でマッピングする方法としては、”grpc-gateway”があります。protoファイルや設定ファイルにどのようにマッピングをするか記述しておき、grpc-gatewayのプラグインを使ってライブラリを生成、それを使ってリバースプロキシとして動作するプログラムを作ります。ルールベースの方法に比べるとPOST以外のメソッドにも対応するなど柔軟にマッピングでき、OpenAPIのv2に対応して仕様書を出力することもできます。このため、既存のOpen API系のツールやノウハウを活用することができます。</p><p>細かい制御を行わないのであれば、実際にプログラマが書くのは関数呼出程度で、大半の苦労はどのようにマッピングするか設計するところにあります。</p><p>この記事ではgrpc-gatewayを取り扱います。</p><h1 id="grpc-gatewayとその使い方"><a href="#grpc-gatewayとその使い方" class="headerlink" title="grpc-gatewayとその使い方"></a>grpc-gatewayとその使い方</h1><h2 id="grpc-gatewayとは？"><a href="#grpc-gatewayとは？" class="headerlink" title="grpc-gatewayとは？"></a>grpc-gatewayとは？</h2><p>前述の通り、protoファイルに記述されたgRPCのRPC定義をHTTP APIにマッピングするためのprotocのプラグインです。</p><p>次の図のように、protoファイルよりproxy用のコードを生成し、それを利用したリバースプロキシを実装することで、gRPCサーバにREST APIとしてのインターフェースを設けることが可能です。</p><img src="/images/20220624a/image.png" alt="image.png" width="1200" height="813" loading="lazy"><p>※図は <a href="https://github.com/grpc-ecosystem/grpc-gateway">公式リポジトリ</a> より引用</p><p>また、公式に次のような記述があり、安定性を売りにしているようです。</p><blockquote><p>We use the gRPC-Gateway to serve millions of API requests per day, and have been since 2018 and through all of that, we have never had any issues with it.</p><ul><li>William Mill, Ad Hoc</li></ul></blockquote><p>HTTP APIへのマッピングにはprotoファイルにマッピングのためのオプションを記述していく方法と、protoファイルとは別に追加の設定ファイルを作る方法があります。この記事で取り扱うのは、protoファイルにオプションを記述する方法です。</p><p>ちなみにですが、実はルールベースの自動マッピングもできるようです。</p><h2 id="grpc-gatewayの利用時に参考になるサイト"><a href="#grpc-gatewayの利用時に参考になるサイト" class="headerlink" title="grpc-gatewayの利用時に参考になるサイト"></a>grpc-gatewayの利用時に参考になるサイト</h2><h3 id="grpc-gateway公式"><a href="#grpc-gateway公式" class="headerlink" title="grpc-gateway公式"></a>grpc-gateway公式</h3><p>以下はgrpc-gatewayの公式サイトです。</p><ul><li><a href="https://github.com/grpc-ecosystem/grpc-gateway">公式リポジトリ</a></li><li><a href="https://grpc-ecosystem.github.io/grpc-gateway/">公式ドキュメント</a></li></ul><h3 id="Google-API"><a href="#Google-API" class="headerlink" title="Google API"></a>Google API</h3><p>grpc-gatewayの利用有無を問わず、gRPCを使ったシステムを作る際に参考にできるものとして、Google APIがあります。</p><p>gRPCの設計について述べた書籍や記事はREST APIに比べると少ないですが、設計ガイドも公開されており、参考にすることができます。また、このガイドに沿って作られた大量のprotoファイルが公開されてます。これは、設計サンプルとして活用することができます。grpc-gatewayで利用するマッピングはGoogle APIと同じものを利用するので、マッピングの具体例としても利用できます。</p><p>以下はGoogle APIの公式サイトです。</p><ul><li><a href="https://github.com/googleapis/googleapis">Google API公式リポジトリ</a></li><li><a href="https://cloud.google.com/apis/design?hl=ja">API設計ガイド</a></li></ul><h2 id="grpc-gatewayを使った開発の流れ"><a href="#grpc-gatewayを使った開発の流れ" class="headerlink" title="grpc-gatewayを使った開発の流れ"></a>grpc-gatewayを使った開発の流れ</h2><h3 id="リポジトリ"><a href="#リポジトリ" class="headerlink" title="リポジトリ"></a>リポジトリ</h3><p><a href="https://github.com/sayshu-7s/grpc-gateway-example/tree/v0.0.0">grpc-gateway-example</a>として公開しました。</p><p>このリポジトリに含まれるプログラムが大まかにどんな動きをするのか軽く紹介しておきます。<br>このリポジトリはDockerさえインストールしていれば、gRPCとgrpc-gatewayの動きを体験することができます。</p><p>protoファイルからserviceの部分を抜き出したのがこれです。<br>ExampleMessageというシンプルなデータをGet, Create, Delete, BatchGetすることができます。<br>BatchGetだけはstreamにしてますが、他は全てUnary RPCです。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// API for grpc-gateway trial.</span></span><br><span class="line">service ExampleApi &#123;</span><br><span class="line">  <span class="comment">// Gets a single message.</span></span><br><span class="line">  rpc <span class="title function_">GetMessage</span><span class="params">(GetMessageRequest)</span> returns (ExampleMessage) &#123;</span><br><span class="line">    option (google.api.http) = &#123;</span><br><span class="line">      get: <span class="string">&quot;/example-messages/&#123;id&#125;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Gets multiple Messages.</span></span><br><span class="line">  rpc <span class="title function_">BatchGetMessages</span><span class="params">(BatchGetMessagesRequest)</span></span><br><span class="line">      returns (stream BatchGetMessagesResponse) &#123;</span><br><span class="line">    option (google.api.http) = &#123;</span><br><span class="line">      post: <span class="string">&quot;/example-messages:batchGet&quot;</span></span><br><span class="line">      body: <span class="string">&quot;*&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Creates a new message.</span></span><br><span class="line">  rpc <span class="title function_">CreateMessage</span><span class="params">(CreateMessageRequest)</span> returns (ExampleMessage) &#123;</span><br><span class="line">    option (google.api.http) = &#123;</span><br><span class="line">      post: <span class="string">&quot;/example-messages&quot;</span></span><br><span class="line">      body: <span class="string">&quot;*&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Deletes a message.</span></span><br><span class="line">  rpc <span class="title function_">DeleteMessage</span><span class="params">(DeleteMessageRequest)</span> returns (google.protobuf.Empty) &#123;</span><br><span class="line">    option (google.api.http) = &#123;</span><br><span class="line">      delete: <span class="string">&quot;/example-message/&#123;id&#125;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>まずは、ビルドと起動を行います。<br>Makefileにショートカットを記述してあるので、makeが入っているなら使うと楽です。ないならMakefileの中身を見るとコマンドが書いてあります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-composeを使ったビルドとコンテナ起動を行う.</span></span><br><span class="line">make build</span><br><span class="line">make up</span><br></pre></td></tr></table></figure><p>docker-composeでコンテナを起動すると、次の4つのコンテナが立ち上がります。</p><ul><li>コンパイラやデバッグツールを実行するための開発用コンテナ</li><li>grpcサーバ</li><li>swagger-uiでAPI仕様を閲覧するためのWebサーバ</li><li>grpc-gatewayを使ったリバースプロキシサーバ</li></ul><p>gRPCはバイナリプロトコルなので必要なツールが多くなる傾向があります。また、コード生成を行う関係で、バージョン差分などが発生するとコードレビューの際に面倒です。ツール群をインストールした開発用コンテナを作ると便利です。Dockerfileにインストール手順を記載することで、ツールのインストール方法の参考例としても使え、リポ外でいろいろ試したりする際にも重宝します。<br>このリポジトリの開発用コンテナには、下記のツール群を入れてあります。</p><ul><li>コンパイラ: protoc</li><li>プラグイン類<ul><li>protoc-gen-go</li><li>protoc-gengo-grpc</li><li>protoc-gen-grpc-gateway</li><li>protoc-gen-openapiv2</li></ul></li><li>お試し用gRPCクライアント: evans</li></ul><p>まずは、grpcとして動作することを見るために開発用コンテナに入りevansでgrpcサーバにアクセスしてみましょう。<br>次のショートカットで開発用コンテナ内で対話的シェルを使えます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker-compose execでdevコンテナ内で対話的シェルを使う.</span></span><br><span class="line">make dev</span><br></pre></td></tr></table></figure><p>次に、evansを使ってサーバとやりとりしてみましょう。evansは対話的なクライアントとして利用することができ、それには次のコマンドを使います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">evans --host grpc-server --port 50051 --path proto,include example/example.proto</span><br></pre></td></tr></table></figure><p>ホスト名grpc-serverのポート50051で動作するgrpcサーバに接続します。protoファイルを指定することで、それに記述されたRPC定義のクライアントとして動作します。–pathオプションに指定しているのはprotoファイルが含まれるディレクトリです。このリポジトリでは独自定義のものを<code>proto</code>ディレクトリに、サードパーティからコピーしてきたものを<code>include</code>ディレクトリに配置しています。</p><p>コマンドを打つと次のような表示がされます。<br><img src="/images/20220624a/image_2.png" alt="Evans more expressive universal gRPC client" width="1200" height="334" loading="lazy"></p><p><code>call</code>と打つと補完候補が表示され、タブキーで選択できます。試しにGetしてみましょう。id&#x3D;1はプログラムにハードコードしているのでCreateしなくても取れます。</p><img src="/images/20220624a/image_3.png" alt="call GetMessage" width="1200" height="334" loading="lazy"><p>リクエストのidフィールドに設定する値をプロンプトで聞かれるので、1を入力しエンターを押下します。</p><img src="/images/20220624a/image_4.png" alt="id (TYPE_INT64) => 1 {...}" width="1200" height="334" loading="lazy"><p>返ってきましたね。ちなみに存在しない値を入力すると次のようなエラーになります。</p><img src="/images/20220624a/image_5.png" alt="command call: rpc error: code = NotFound desc = Not Found" width="1200" height="334" loading="lazy"><p>次にREST APIを見てみましょう。</p><p>ブラウザから<code>http://localhost:8080/docs</code>にアクセスします。すると次のようにswagger-uiで仕様の確認ができます。上のprotoファイルの記述からコメントを抜き出して反映されているのがわかるでしょう。</p><img src="/images/20220624a/image_6.png" alt="Swagger example/example.proto Excample Api" width="1200" height="1033" loading="lazy"><p>このページはdocker-compose.ymlの中では<code>docs-server</code>コンテナがホストしていますが、ブラウザからのリクエストは<code>gateway-server</code>コンテナ経由でアクセスしています。このようにしたのは<code>gateway-server</code>コンテナをリバースプロキシとして扱うことで、同一オリジンにして、swagger-ui上から試せるようにしたかったからです。</p><p>さて、POSTでExampleMessageを作ってみます。swagger-ui上で値を入力できます。</p><img src="/images/20220624a/image_7.png" alt="body Edit value" width="1200" height="1033" loading="lazy"><p>Executeすると、レスポンスが返ってきて、これもui上で確認できます。</p><img src="/images/20220624a/image_8.png" alt="Response" width="1200" height="1033" loading="lazy"><p>Evansから見てみましょう。<br><img src="/images/20220624a/image_9.png" alt="call GetMessageによるJSON結果" width="1200" height="334" loading="lazy"></p><p>先ほどエラーだった値を入力して返却されており、ちゃんと反映されてますね。REST APIで作成したリソースがgRPCでも取得でき、同一サーバで動いていることがわかります。</p><h3 id="コードの解説"><a href="#コードの解説" class="headerlink" title="コードの解説"></a>コードの解説</h3><p>さて、コードとその作成方法の解説に入ります。</p><h3 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h3><p>構成は↓のようになっています。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── Makefile</span><br><span class="line">├── README.md</span><br><span class="line">├── cmd</span><br><span class="line">│   ├── gateway</span><br><span class="line">│   │   └── main.go</span><br><span class="line">│   └── server</span><br><span class="line">│       └── main.go</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── gen</span><br><span class="line">│   ├── go</span><br><span class="line">│   │   └── example</span><br><span class="line">│   │       ├── example.pb.go</span><br><span class="line">│   │       ├── example.pb.gw.go</span><br><span class="line">│   │       └── example_grpc.pb.go</span><br><span class="line">│   └── openapiv2</span><br><span class="line">│       └── apidocs.swagger.json</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── include</span><br><span class="line">│   └── google</span><br><span class="line">│       └── api</span><br><span class="line">│           ├── annotations.proto</span><br><span class="line">│           ├── field_behavior.proto</span><br><span class="line">│           ├── http.proto</span><br><span class="line">│           └── http_body.proto</span><br><span class="line">├── proto</span><br><span class="line">│   └── example</span><br><span class="line">│       └── example.proto</span><br><span class="line">├── server</span><br><span class="line">│   └── server.go</span><br><span class="line">└── tools</span><br><span class="line">    └── gen.sh</span><br></pre></td></tr></table></figure><p>protoディレクトリにはserverがホストするRPCの定義が書かれたprotoファイルが格納されています。このprotoファイルを元にして、protocとそのプラグインでgen配下にコードを生成します。このリポジトリでは、goのファイルとOpenAPI v2のAPI仕様を生成します。<br>includeディレクトリにもprotoファイルがありますが、これは外部のリポジトリからコピーしてきたものです。ひとまず、grpc-gatewayを使ったmappingに必要なものを導入しています。</p><p>genに生成されたライブラリを使って、serverディレクトリに実際の処理を実装するserver本体を実装します。詳しくは後述します。</p><p>cmdにあるserver, gatewayはそれぞれgRPCサーバとgatewayのエントリーポイントです。gatewayの実装でやることはあまりないので、main.goに全て書きました。</p><h3 id="実装の流れ"><a href="#実装の流れ" class="headerlink" title="実装の流れ"></a>実装の流れ</h3><h4 id="protoファイルの作成"><a href="#protoファイルの作成" class="headerlink" title="protoファイルの作成"></a>protoファイルの作成</h4><p>まずは、protoファイルを作ります。このリポジトリでは、protoディレクトリ配下に自信が提供するRPCを定義したprotoファイルを格納しています。先ほど記載したものを再掲です。</p><p>Getメソッドを例にして解説します。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// API for grpc-gateway trial.</span></span><br><span class="line">service ExampleApi &#123;</span><br><span class="line">  <span class="comment">// Gets a single message.</span></span><br><span class="line">  rpc <span class="title function_">GetMessage</span><span class="params">(GetMessageRequest)</span> returns (ExampleMessage) &#123;</span><br><span class="line">    option (google.api.http) = &#123;</span><br><span class="line">      get: <span class="string">&quot;/example-messages/&#123;id&#125;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// The request for ExampleApi.GetMessage.</span></span><br><span class="line">message GetMessageRequest &#123;</span><br><span class="line">  <span class="comment">// The id of the message.</span></span><br><span class="line">  <span class="type">int64</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// An ExampleMessage for ExampleApi.</span></span><br><span class="line">message ExampleMessage &#123;</span><br><span class="line">  <span class="comment">// The id of the message.</span></span><br><span class="line">  <span class="type">int64</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The string type example field of the message.</span></span><br><span class="line">  <span class="type">string</span> <span class="variable">example_field</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GetMessageメソッドは、GetMessageRequestを受け取り、単一ExampleMessageを返却するRPCです。optionとして書かれているのがHTTPマッピングです。この場合、<code>/example-messages/&#123;id&#125;</code>のGETメソッドにマッピングします。パスパラメータの{id}は、GetMessageRequestのidフィールドのことです。例えば、<code>/example-messages/3</code>にGETでアクセスすると、idフィールドが3にセットされたGetMessageRequestでRPCをコールしたことになります。レスポンスはExampleMessageをそのままJSON化したものになります。</p><p>実はProtocol Buffersは<a href="https://developers.google.com/protocol-buffers/docs/proto3#json">JSONへのマッピング方法</a>がLanguage Guideに規定されており、JSON化はそれに従って行われます。このため、HTTPマッピングが必要なのは、エンドポイントの設計とリクエストの各フィールドをパスパラメータ、HTTPボディ、クエリパラメータのどこに入れるのかが大半です。</p><h4 id="コードの生成"><a href="#コードの生成" class="headerlink" title="コードの生成"></a>コードの生成</h4><p>さて、protoファイルを作ったら次はprotocとプラグインを使ったコード生成です。tools&#x2F;gen.shを実行すれば生成できるようにしています。が実コマンドは下記の感じになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">find <span class="string">&#x27;proto&#x27;</span> -name <span class="string">&#x27;*.proto&#x27;</span> -print0 \</span><br><span class="line">  | xargs -0 protoc -I <span class="string">&#x27;proto&#x27;</span> -I <span class="string">&#x27;include&#x27;</span> \</span><br><span class="line">  --go_out=<span class="string">&#x27;gen/go&#x27;</span> \</span><br><span class="line">  --go_opt=module=<span class="string">&#x27;github.com/sayshu-7s/grpc-gateway-example/gen/go&#x27;</span> \</span><br><span class="line">  --go-grpc_out=<span class="string">&#x27;gen/go&#x27;</span> \</span><br><span class="line">  --go-grpc_opt=module=<span class="string">&#x27;github.com/sayshu-7s/grpc-gateway-example/gen/go&#x27;</span> \</span><br><span class="line">  --grpc-gateway_out=<span class="string">&#x27;gen/go&#x27;</span> \</span><br><span class="line">  --grpc-gateway_opt=module=<span class="string">&#x27;github.com/sayshu-7s/grpc-gateway-example/gen/go&#x27;</span> \</span><br><span class="line">  --openapiv2_out=<span class="string">&#x27;gen/openapiv2&#x27;</span> \</span><br><span class="line">  --openapiv2_opt=allow_merge=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>このコマンドでは、protoファイルがprotoディレクトリとincludeディレクトリに入っているものとして、protoディレクトリ配下の拡張子がprotoになっているファイルを対象にprotocを実行します。</p><p>このコマンドでは、protocの解析結果を、<code>protoc-gen-go</code>, <code>protoc-gen-go-grpc</code>, <code>protoc-gen-grpc-gateway</code>, <code>protoc-gen-openapiv2</code>の4つのプラグインに渡しています。</p><p>具体例を用いてオプションの意味を説明します。<code>protoc-gen-go</code>使いたい場合、protoc-genを除いたgoのついたオプションをprotocに渡します。<code>--go_out</code>が出力先を表し、<code>--go_opt</code>がprotoc-gen-goに対するオプションの指定です。同様に、protoc-gen-grpc-gatewayというプラグインを使う場合は、<code>--grpc-gateway_out</code>で出力先を指定し、<code>--grpc-gateway_opt</code>でオプションを指定します。</p><p>プラグインに対して指定できるオプションはプラグインにより異なりますが、各言語用のプラグインはProtocol Buffersの公式リファレンスにあります。Goだと<a href="https://developers.google.com/protocol-buffers/docs/reference/go-generated#invocation">Go Generated Code</a>にあります。</p><p>protocと一緒についてくるプラグイン以外は、必要に応じてインストールが必要です。上記4つとも全てインストールが必要で、その方法はDockerfileに記載されています。</p><h4 id="サーバの実装"><a href="#サーバの実装" class="headerlink" title="サーバの実装"></a>サーバの実装</h4><p>コードを作ったら次はサーバ実装です。基本的な流れは、コード生成先のpackageで、<code>UnimplementedExampleApi</code>みたいな構造体があるので、これを埋め込んだ構造体を↓のように作ります。この埋め込みは前方互換性を担保するためにMustで行う必要があります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ExampleAPIServer <span class="keyword">struct</span> &#123;</span><br><span class="line">    nextID <span class="type">int64</span> <span class="comment">// Createメソッドで使うフィールド</span></span><br><span class="line">msgs   <span class="keyword">map</span>[<span class="type">int64</span>]*example.ExampleMessage <span class="comment">// インメモリでExampleMessageを保存する先のマップ</span></span><br><span class="line">example.UnimplementedExampleApiServer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>また、生成先packageに、<code>ExampleApiServer</code>のようなサーバのインターフェースがあるので、これを実装します。<br>Getメソッドだけ示すと↓のようになります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s ExampleAPIServer)</span></span> GetMessage(ctx context.Context, r *example.GetMessageRequest) (*example.ExampleMessage, <span class="type">error</span>) &#123;</span><br><span class="line">msg, ok := s.msgs[r.GetId()]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, status.Error(codes.NotFound, codes.NotFound.String())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> msg, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>フィールドにアクセスするときはGetterを使います。こうするとnil関連のpanicが起こらなくなり、直接アクセスするより堅牢なプログラムを作れます。</p><p>エラーを返却するときには、<code>google.golang.org/grpc/status</code>で定義された<code>status.Error</code>系の関数を使います。上記の例だと、NotFoundというHTTPの404相当のコードを返却していることになります。詳しくは、公式の<a href="https://www.grpc.io/docs/guides/error/">Error handling</a>や<a href="https://github.com/avinassh/grpc-errors">gRPC Errors - A handy guide to gRPC errors.</a>や<a href="https://avi.im/grpc-errors/">クイックガイド</a>を参照してください。</p><p>最後に、main関数でインスタンス化して起動します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/sayshu-7s/grpc-gateway-example/gen/go/example&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/sayshu-7s/grpc-gateway-example/server&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Serveメソッドを持つ構造体. これのServeメソッドを呼ぶとRPCサーバがListenした状態になる.</span></span><br><span class="line">srv := grpc.NewServer()</span><br><span class="line"><span class="comment">// ↓が先ほど実装したserver. 担当するリクエストを実際に処理する構造体.</span></span><br><span class="line">api, err := server.NewExampleAPIServer()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;failed to new ExampleAPIServer&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// protoファイルのserviceごとに登録用の関数が生成されているので、これを使って登録する.</span></span><br><span class="line"><span class="comment">// この実装例ではこれ1つだが, protoファイルに複数serviceを作ったらその分登録する必要がある。</span></span><br><span class="line">example.RegisterExampleApiServer(srv, api)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通のnet.Lisnerを作って</span></span><br><span class="line">lis, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:50051&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to listen(tcp, :50051)&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Serveメソッドに渡す.</span></span><br><span class="line"><span class="keyword">if</span> err := srv.Serve(lis); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;err has occured while serving: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>*grpc.Server</code>型には、グレースフルシャットダウン用の<code>GracefulStop</code>メソッドや強制停止用の<code>Stop</code>メソッドもあるので、必要に応じて呼び出しましょう。</p><p>さて、ここまでで、gRPCサーバが実装できました。</p><h4 id="gatewayの実装"><a href="#gatewayの実装" class="headerlink" title="gatewayの実装"></a>gatewayの実装</h4><p>次は、gatewayの実装です。こちらは、一度作れば追加作業はあまりないです。</p><p>前述のように、gRPCサーバへのリバースプロキシとしても、swagger-uiをホストするコンテナへのリバースプロキシとしても動作するようにしています。マッピング自体は自動生成されたコード内で行われるため、docsの部分を除くと関数呼び出し程度しかやっていません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/http/httputil&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/grpc-ecosystem/grpc-gateway/v2/runtime&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/sayshu-7s/grpc-gateway-example/gen/go/example&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> grpcServerAddress = <span class="string">&quot;grpc-server:50051&quot;</span></span><br><span class="line"><span class="keyword">const</span> docsServerAddress = <span class="string">&quot;http://docs-server:8080&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// gateway用のhttp.Handler</span></span><br><span class="line">grpcGateway := runtime.NewServeMux()</span><br><span class="line">opts := []grpc.DialOption&#123;</span><br><span class="line">grpc.WithTransportCredentials(insecure.NewCredentials()),</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Handlerに, アドレス指定でアップストリームgRPCサーバの場所を教える.</span></span><br><span class="line"><span class="comment">// このHandlerはリクエストを受け取ったらgRPCのリクエストに詰め替えてサーバとやり取りする.</span></span><br><span class="line"><span class="keyword">if</span> err := example.RegisterExampleApiHandlerFromEndpoint(context.Background(), grpcGateway, grpcServerAddress, opts); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;failed to register grpc-server&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓はswager-uiをブラウザから使えるようにするためのリバースプロキシ.</span></span><br><span class="line">docsURL, err := url.Parse(docsServerAddress)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;failed to parse docsServerAddress=%v&quot;</span>, docsServerAddress)</span><br><span class="line">&#125;</span><br><span class="line">docsProxy := httputil.NewSingleHostReverseProxy(docsURL)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 両者をマージして共用できるようにする.</span></span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">mux.Handle(<span class="string">&quot;/docs/&quot;</span>, docsProxy)</span><br><span class="line">mux.Handle(<span class="string">&quot;/&quot;</span>, grpcGateway)</span><br><span class="line"></span><br><span class="line"><span class="comment">// HandlerができたのであとはListenするだけ.</span></span><br><span class="line"><span class="keyword">if</span> err := http.ListenAndServe(<span class="string">&quot;:8080&quot;</span>, mux); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;err&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gatewayは基本的にhttpパッケージのHanlderになっているので、このように機能追加なども比較的簡単に行えます。</p><p>gRPCサーバもgatewayも、起点となるServerやServMuxを生成し、それらに実際の処理を行う構造体やエンドポイントを”登録”するような流れであることがわかるでしょう。</p><h1 id="補足-streamはどのような扱いになるのか？"><a href="#補足-streamはどのような扱いになるのか？" class="headerlink" title="補足: streamはどのような扱いになるのか？"></a>補足: streamはどのような扱いになるのか？</h1><p>grpcは双方向のストリーム処理をサポートします。grpc-gatewayではサポートされるのでしょうか？また、されるとしたらどのようにサポートされるのでしょうか？</p><p><a href="https://github.com/grpc-ecosystem/grpc-gateway#features">公式リポジトリ</a>によれば、双方向通信はサポートせず、streamはnewline-delimited JSON（NDJSON）にマッピングするとあります。</p><p>試してみましょう。ExampleApi.BatchGetメソッドがstream APIになっています。サーバからのレスポンスのみストリームになります。</p><p>次のリクエストをcurlで叩きます。（※swagger-uiでは「JSONをパースできなかった」というエラーが出るのでcurlでやります。）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -v -X POST <span class="string">&quot;http://localhost:8080/example-messages:batchGet&quot;</span> -H <span class="string">&quot;Content-Type: application/json&quot;</span> -d <span class="string">&quot;&#123; \&quot;ids\&quot;: [ \&quot;1\&quot;, \&quot;2\&quot;, \&quot;3\&quot; ]&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>すると次のようなレスポンスが返ってきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Content-Type: application/json</span><br><span class="line">&lt; Grpc-Metadata-Content-Type: application/grpc</span><br><span class="line">&lt; Date: Thu, 23 Jun 2022 17:39:33 GMT</span><br><span class="line">&lt; Transfer-Encoding: chunked</span><br><span class="line">&lt;</span><br><span class="line">&#123;<span class="string">&quot;result&quot;</span>:&#123;<span class="string">&quot;found&quot;</span>:&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;exampleField&quot;</span>:<span class="string">&quot;example&quot;</span>&#125;&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;result&quot;</span>:&#123;<span class="string">&quot;found&quot;</span>:&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;2&quot;</span>,<span class="string">&quot;exampleField&quot;</span>:<span class="string">&quot;example2&quot;</span>&#125;&#125;&#125;</span><br><span class="line">&#123;<span class="string">&quot;result&quot;</span>:&#123;<span class="string">&quot;missing&quot;</span>:<span class="string">&quot;3&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p><code>Transfer-Encoding: chunked</code>とあるように、レスポンス内容が確定する前からチャンクでデータを流していることがわかります。<br>少し気になるのは<code>Content-Type: application/json</code>となっていることです。NDJSONのMIME Typeは<code>application/x-ndjson</code>のはずなので、これは不正な気がします。まだ調べてないですが、なんらか対処が必要かもしれません。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>grpcについての概観をみた後、grpc-gatewayを使ってgRPC, REST APIの両方に対応するサーバを実装する流れを説明しました。gRPCに加えてProtocol Buffers関連の知識も必要なので最初は少し大変かもしれませんが、高効率で双方向通信をサポートしていることは魅力的な特長です。REST APIに比べるとやや敷居が高いgRPCですが、大まかな流れはそこまで複雑ではなかったのではないでしょうか。自分も学習しつつ開発を進めているところです。</p><p>余談ですが、gRPCは最初のデプロイに苦労する印象があります。ローカルで開発進めて、DBやら別のサービスやらにあれこれ結合してインターセプタやらなんやらを大量に組み込んだ後、ドカンとデプロイしようとすると、何が悪いのかわからないまま疎通すらできずに時間が溶けていきます。機能がほとんどないHello World的状態で早めにデプロイのパイプラインを作り、少しずつ育てていくのがおすすめです。</p><p>また、gRPC WebとConnectについてはまだ使ったことがないので、どこかで試してみたいなと思っています。</p><p>次は原木さんの<a href="/articles/20220629a/">スキーマのバージョン管理</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/IDL/">IDL</category>
      
      <category domain="https://future-architect.github.io/tags/gRPC/">gRPC</category>
      
      <category domain="https://future-architect.github.io/tags/grpc-gateway/">grpc-gateway</category>
      
      
      <comments>https://future-architect.github.io/articles/20220624a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>gRPCのGo実装の新星、Connect</title>
      <link>https://future-architect.github.io/articles/20220623a/</link>
      <guid>https://future-architect.github.io/articles/20220623a/</guid>
      <pubDate>Wed, 22 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220623a/スクリーンショット_2022-06-22_21.04.jpg&quot; alt=&quot;スクリーンショット_2022-06-22_21.04.jpg&quot; width=&quot;1200&quot; height=&quot;405&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220623a/スクリーンショット_2022-06-22_21.04.jpg" alt="スクリーンショット_2022-06-22_21.04.jpg" width="1200" height="405" loading="lazy"><p><a href="/articles/20220622a/">サービス間通信とIDL（インタフェース記述言語）連載</a>の2日目のエントリーです。</p><p>本当はGraphQLネイティブなデータベースの紹介をしようとしたのですが、紹介しようとしていたものがまだベータでクライアントライブラリが公開されていない（空っぽのリポジトリしかない）みたいな感じで試せなかったので、急遽2022&#x2F;6&#x2F;1に公開されたばかりのgRPC関連のライブラリの<a href="https://connect.build/docs/introduction">Connect</a>を紹介することにしました。</p><p>Connectの開発元が公開したブログは次のサイトにあります。</p><ul><li><a href="https://buf.build/blog/connect-a-better-grpc">Buf | Connect: A better gRPC</a></li></ul><p>公式ドキュメントはこちらです。</p><ul><li><a href="https://connect.build/docs/introduction">Introduction | Connect</a></li></ul><p>なお、gRPCについての詳細はこのエントリーでは紹介しません。ちょうど、H.SakiさんがgRPCの詳しい紹介の記事を書いてくれているので、ぜひ、みなさんこちらを参照ください。</p><ul><li><a href="https://zenn.dev/hsaki/books/golang-grpc-starting">作ってわかる！ はじめてのgRPC</a></li></ul><p>Connectとは何者かというと、現時点では純正のgRPCのGoコードの別実装ということになります。あえて作ったのは既存の実装にいろいろ不満があるからということです。</p><ul><li>コメントを除いて100以上のパッケージで合計13万行ででかすぎる</li><li>Go標準ではなく独自実装のHTTP&#x2F;2実装を使っていて、Goの標準的なミドルウェアなどが使えない</li><li>ウェブから使うにはプロキシが必要</li><li>デバッグ大変</li><li>セマンティックバージョニングを使ってない</li></ul><p>Connectはこれに対して次のような特徴を備えたGoのgRPCサーバー&#x2F;クライアントフレームワークとなっています。</p><ul><li>数千行のコードで、基本的なところは１パッケージにまとまっている。生成されたコードも少ない</li><li>net&#x2F;httpのサーバー、クライアントともに、<code>http.Handler</code>、<code>http.Client</code>を利用しているため、サードパーティのライブラリを駆使しやすい</li><li>gRPC、gRPC-Web、およびConnect独自のプロトコルの3つを最初からサポートしたサーバー、クライアントが作れる。プロキシは不要。Connect独自のプロトコルはREST APIになっていてcurlで簡単にテスト可能。もちろんgrpcurlも可能。</li><li>1.0が出たらセマンティックバージョニングに準拠して後方互換性をきちんと守っていく宣言。</li></ul><p>Connectを開発したのは、Protobufからのコード生成やら、linterやら、いろいろやりやすくしてくれるツールである<a href="https://buf.build/">buf</a>を開発したところです。Protobufを知り尽くしているところが作ったライブラリになります。</p><p>現時点では、というのは別の言語実装も行われている途中であるので、将来的にはGo以外の言語でも恩恵に授かれる模様です。</p><h1 id="チュートリアルを試してみた"><a href="#チュートリアルを試してみた" class="headerlink" title="チュートリアルを試してみた"></a>チュートリアルを試してみた</h1><p>ここにチュートリアルがあります。翻訳してもいいのですが、まあ簡単な英語だったのでそのままやっちゃいました。みなさんもぜひ。全部は紹介しないので、おっと思ったポイントだけ紹介します。</p><ul><li><a href="https://connect.build/docs/go/getting-started">Getting started | Connect</a></li></ul><p>コード生成はbufを使います。bufにconnect-goというプラグインを追加して生成します。</p><figure class="highlight yaml"><figcaption><span>buf.gen.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">go</span></span><br><span class="line">    <span class="attr">out:</span> <span class="string">gen</span></span><br><span class="line">    <span class="attr">opt:</span> <span class="string">paths=source_relative</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">connect-go</span></span><br><span class="line">    <span class="attr">out:</span> <span class="string">gen</span></span><br><span class="line">    <span class="attr">opt:</span> <span class="string">paths=source_relative</span></span><br></pre></td></tr></table></figure><p>生成されるファイルはこんな感じです。少ないですね。<code>greet.pb.go</code>は<code>protoc-gen-go</code>が生成するファイルで、Protobuf純正です。<code>greet.connect.go</code>がConnectのツールが生成するツールです。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── gen</span><br><span class="line">│   └── greet</span><br><span class="line">│       └── v1</span><br><span class="line">│           ├── greet.pb.go</span><br><span class="line">│           └── greetv1connect</span><br><span class="line">│               └── greet.connect.go</span><br></pre></td></tr></table></figure><p>1つのメソッドを持ったサービスのコードはこのファイルで完結しています。この手のコード生成系のツールは超大量のソースコードを生成することがあって、品質の確認とか、本当にやりきれるの？と思って躊躇してしまうことが多かったのですが、これなら全然読み切れる量ですし、生成されるコードもわかりやすいかと思います。以下はコメントを抜いたコードです。半分はクライアントコードですね。</p><figure class="highlight go"><figcaption><span>gen/greet/v1/greetv1connect/greet.connect.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> greetv1connect</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">v1 <span class="string">&quot;connecttest/gen/greet/v1&quot;</span></span><br><span class="line">context <span class="string">&quot;context&quot;</span></span><br><span class="line">errors <span class="string">&quot;errors&quot;</span></span><br><span class="line">connect_go <span class="string">&quot;github.com/bufbuild/connect-go&quot;</span></span><br><span class="line">http <span class="string">&quot;net/http&quot;</span></span><br><span class="line">strings <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _ = connect_go.IsAtLeastVersion0_1_0</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">GreetServiceName = <span class="string">&quot;greet.v1.GreetService&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GreetServiceClient <span class="keyword">interface</span> &#123;</span><br><span class="line">Greet(context.Context, *connect_go.Request[v1.GreetRequest]) (*connect_go.Response[v1.GreetResponse], <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGreetServiceClient</span><span class="params">(httpClient connect_go.HTTPClient, baseURL <span class="type">string</span>, opts ...connect_go.ClientOption)</span></span> GreetServiceClient &#123;</span><br><span class="line">baseURL = strings.TrimRight(baseURL, <span class="string">&quot;/&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> &amp;greetServiceClient&#123;</span><br><span class="line">greet: connect_go.NewClient[v1.GreetRequest, v1.GreetResponse](</span><br><span class="line">httpClient,</span><br><span class="line">baseURL+<span class="string">&quot;/greet.v1.GreetService/Greet&quot;</span>,</span><br><span class="line">opts...,</span><br><span class="line">),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> greetServiceClient <span class="keyword">struct</span> &#123;</span><br><span class="line">greet *connect_go.Client[v1.GreetRequest, v1.GreetResponse]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *greetServiceClient)</span></span> Greet(ctx context.Context, req *connect_go.Request[v1.GreetRequest]) (*connect_go.Response[v1.GreetResponse], <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> c.greet.CallUnary(ctx, req)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GreetServiceHandler <span class="keyword">interface</span> &#123;</span><br><span class="line">Greet(context.Context, *connect_go.Request[v1.GreetRequest]) (*connect_go.Response[v1.GreetResponse], <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGreetServiceHandler</span><span class="params">(svc GreetServiceHandler, opts ...connect_go.HandlerOption)</span></span> (<span class="type">string</span>, http.Handler) &#123;</span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">mux.Handle(<span class="string">&quot;/greet.v1.GreetService/Greet&quot;</span>, connect_go.NewUnaryHandler(</span><br><span class="line"><span class="string">&quot;/greet.v1.GreetService/Greet&quot;</span>,</span><br><span class="line">svc.Greet,</span><br><span class="line">opts...,</span><br><span class="line">))</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;/greet.v1.GreetService/&quot;</span>, mux</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UnimplementedGreetServiceHandler <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(UnimplementedGreetServiceHandler)</span></span> Greet(context.Context, *connect_go.Request[v1.GreetRequest]) (*connect_go.Response[v1.GreetResponse], <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, connect_go.NewError(connect_go.CodeUnimplemented, errors.New(<span class="string">&quot;greet.v1.GreetService.Greet is not implemented&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>で、このハンドラの枠組みに魂（実装）を込めて、ついでにサーバーまで起動してしまおうという欲張りなコードが次のコードです。サーバー実装はシンプルだし、<code>net/http</code>でHTTPサーバーを実装するのとコードの構造が大きく変わらないところが気に入りました。</p><figure class="highlight go"><figcaption><span>/cmd/server/main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line">greetv1 <span class="string">&quot;connecttest/gen/greet/v1&quot;</span></span><br><span class="line"><span class="string">&quot;connecttest/gen/greet/v1/greetv1connect&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/bufbuild/connect-go&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/net/http2&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/net/http2/h2c&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GreetServer <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *GreetServer)</span></span> Greet(</span><br><span class="line">ctx context.Context,</span><br><span class="line">req *connect.Request[greetv1.GreetRequest],</span><br><span class="line">) (*connect.Response[greetv1.GreetResponse], <span class="type">error</span>) &#123;</span><br><span class="line">log.Println(<span class="string">&quot;Request headers: &quot;</span>, req.Header())</span><br><span class="line">res := connect.NewResponse(&amp;greetv1.GreetResponse&#123;</span><br><span class="line">Greeting: fmt.Sprintf(<span class="string">&quot;Hello, %s!&quot;</span>, req.Msg.Name),</span><br><span class="line">&#125;)</span><br><span class="line">res.Header().Set(<span class="string">&quot;Greet-Version&quot;</span>, <span class="string">&quot;v1&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">greeter := &amp;GreetServer&#123;&#125;</span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">path, handler := greetv1connect.NewGreetServiceHandler(greeter)</span><br><span class="line">mux.Handle(path, handler)</span><br><span class="line">http.ListenAndServe(</span><br><span class="line"><span class="string">&quot;localhost:8080&quot;</span>,</span><br><span class="line">h2c.NewHandler(mux, &amp;http2.Server&#123;&#125;),</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>なお、このサーバーではh2cを使ってラップしていますが、これはTLSを使わないHTTP&#x2F;2を実現するために使っているとのことです。それを除くと、ハンドラだけじゃなくてサーバー周辺もnet&#x2F;httpのお作法に従っていて好感が持てます。</p><h1 id="それ以外の機能"><a href="#それ以外の機能" class="headerlink" title="それ以外の機能"></a>それ以外の機能</h1><p>ドキュメントによると、<a href="https://connect.build/docs/go/serialization-and-compression">独自シリアライズとか圧縮機能</a>であったりとか、gRPCの特徴である<a href="https://connect.build/docs/go/interceptors">インターセプター</a>とか、<a href="https://connect.build/docs/go/streaming">ストリーミング</a>とか、いろいろな機能が提供されています。結構作り込んだgRPCのサービスであっても、Connectへの置き換えもいける気がします。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>gRPCはずっと使いたいと思ってちょくちょく学んでいたものの、前述のように生成されるコードの量が多くて実践投入はしてきませんでした。ですが、ConnectベースならOpenAPI（結局コードジェネレータをいじり始めたりおおごとになりがち）よりもいいのでは？と思ったり。また、JSONで簡単にアクセスできるなら、フロントは通常のJavaScriptとかでもいいわけですしね。REST APIの開発の裏でConnectを使うのも楽しそうです。</p><p>なお、開発中のものとしては、TypeScript向けのコード生成のconnect-webやら、Express、Rails、Django、Laravelとかにも対応予定とのことで、楽しみですね。TypeScript向けが先行とのことです。connect-webでReactやらVueやらSvleteやらsolid.jsやらと一緒に使える日が楽しみですね。業務投入したいです。</p><p>ブログによると、今後、Go 1.19がリリースされたあとに、v1.0をリリース予定で、その後は後方互換性を守るぞ、と宣言されています。これはフューチャーとかみたいなITコンサルとかSIerさんにもうれしい宣言じゃないですかね。エンプラでのGo活用とセットで、これからすごく流行りそうな気がしています。</p><p>明日は関靖秀さんの<a href="/articles/20220624a/">gPRC gateway</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/IDL/">IDL</category>
      
      <category domain="https://future-architect.github.io/tags/gRPC/">gRPC</category>
      
      <category domain="https://future-architect.github.io/tags/connect/">connect</category>
      
      
      <comments>https://future-architect.github.io/articles/20220623a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Open API Specification 3.1と気になる仕様策定</title>
      <link>https://future-architect.github.io/articles/20220622b/</link>
      <guid>https://future-architect.github.io/articles/20220622b/</guid>
      <pubDate>Tue, 21 Jun 2022 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG DXユニット真野です。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット真野です。<a href="/articles/20220622a/">サービス間通信とIDL（インタフェース記述言語）</a>連載の1本目です。</p><p>Open APIは<a href="/articles/20200630/">go-swaggerを用いたWebアプリケーション開発Tips19選</a>という記事を過去に書いたこともあり、バージョン2（Swagger）をよく使っていましたしまだ継続してそれらを用いた開発もしています。2022.6.21時点では3.1.0が最新です。これまでリリースノートすらウォッチしていなかったので気になったことを調べてまとめました。</p><h2 id="Open-API-Specificationとは"><a href="#Open-API-Specificationとは" class="headerlink" title="Open API Specificationとは"></a>Open API Specificationとは</h2><p><a href="https://github.com/OAI/OpenAPI-Specification">Open API Specification</a>（公式でもOASと略されます）は、HTTP APIのIDL（インターフェース記述言語）です。HTTP APIということで、いわゆるRESTishなAPIも含みます。エンドポイント（URLのパス）、パラメーター（リクエスト、レスポンスのヘッダ・ボディ）、認証フローなどを標準的に定義でき、そこからコードやAPIドキュメントを生成できて便利です。</p><p>今のコミュニティの方向性としてはJSONスキーマの最新Draftバージョンと互換性を保つように設計されています。</p><p><a href="https://www.openapis.org/">OpenAPIInitiative</a>という組織によって仕様策定が進められ、そこにはGoogle, Microsoft, Oracle, SAP, IBMなどそうそうたる顔ぶれが並んでいます。</p><p>なお、定義はYAMLやJSONで行います。</p><h2 id="v2-と-v3-の違いについて"><a href="#v2-と-v3-の違いについて" class="headerlink" title="v2 と v3 の違いについて"></a>v2 と v3 の違いについて</h2><p>我々がよく見るOpen API Specificationのメジャーバージョンは2つあり、v2とv3 があります。2022年時点ですとOpen API Specificationに関連した利用したいツールの対応次第かと思いますが、version 3.0は2017.7.26リリースで5年ほど経過するのでv3を採用するチームが多いのではないでしょうか（3.1との差は次章以降で触れます）。</p><p>Version2と3はメジャーバージョンが変わったということで、記述の構成が変わっています。</p><img src="/images/20220622b/v2とv3の違い.png" alt="v2とv3の違い" width="1131" height="792" loading="lazy"><p>※ 図は <a href="https://blog.stoplight.io/difference-between-open-v2-v3-v31">https://blog.stoplight.io/difference-between-open-v2-v3-v31</a> より</p><p>上図を見ると、v2からSecurityDefinicions、definitions、parameters、responses などがなくなりスッキリしていると思います。これはcomponentsに移動になったからで、これにより再利用性が高まるように設計されました。書いている内容自体はほぼ変わらないので、v2がわかればv3のお作法にもすぐ慣れると思います。</p><p>v2ですが以前はSwaggerと呼ばれていました。これがOpen API Specificationのフォーマットとして採用されたため、Swagger ≒ Open API Specification v2 との認識が広がっていると思われます。</p><p>ちなみにv1はどこ行った？って思ったんですが、<a href="https://swagger.io/specification/v2/">Swaggerのリビジョン履歴</a>を見ると、Swagger自体が 1.0から2.0 まで上がっているため、Open API Specificationも2.0からスタートしたと思われます。</p><div class="scroll"><table><thead><tr><th>Version</th><th>Date</th><th>Notes</th></tr></thead><tbody><tr><td>2.0</td><td>2014-09-08</td><td>Release of Swagger 2.0</td></tr><tr><td>1.2</td><td>2014-03-14</td><td>Initial release of the formal document.</td></tr><tr><td>1.1</td><td>2012-08-22</td><td>Release of Swagger 1.1</td></tr><tr><td>1.0</td><td>2011-08-10</td><td>First release of the Swagger Specification</td></tr></tbody></table></div><p>Swaggerから Open API Specificationへの切り替えですが、 2015年にSwagger　APIプロジェクトを推進していたSmartBear社が、Linux Foundationに寄贈し、Open API Initiative立ち上げとなったそうです。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><h2 id="v3-0、v3-1"><a href="#v3-0、v3-1" class="headerlink" title="v3.0、v3.1"></a>v3.0、v3.1</h2><p>2017年に3.0.0が出て、2021年2月に待望（？）の3.1.0が出ました。リリースノートは<a href="https://github.com/OAI/OpenAPI-Specification/releases">こちら</a>。</p><div class="scroll"><table><thead><tr><th>Version</th><th>Date</th><th>Notes</th></tr></thead><tbody><tr><td>3.1.0</td><td>2021-02-15</td><td>Release of the OpenAPI Specification 3.1.0</td></tr><tr><td>3.0.3</td><td>2020-02-20</td><td>Patch release of the OpenAPI Specification 3.0.3</td></tr><tr><td>3.0.2</td><td>2018-10-08</td><td>Patch release of the OpenAPI Specification 3.0.2</td></tr><tr><td>3.0.1</td><td>2017-12-06</td><td>Patch release of the OpenAPI Specification 3.0.1</td></tr><tr><td>3.0.0</td><td>2017-07-26</td><td>Release of the OpenAPI Specification 3.0.0</td></tr></tbody></table></div><p>3.0から3.1はマイナーリリースなので機能追加くらいかなと思っていましたが、けっこう大きな変更があり、4.0にしてはどうかといった議論もあったそうです。最終的にはセマンティックバージョニングの運用をやめることになったそうです<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p><p>3.1はJSONスキーマ Draft 2019-09と互換性を持たせていて、JSONスキーマのキーワードを認識するようになったとのこと。私はJSONスキーマ自体をあまり触ったことがないのですが、バージョン毎の対応具合は次のようです。</p><ul><li>OpenAPIv2.0: JSONスキーマの拡張サブセット。JSONスキーマDraft 4との互換性が約80％になる分岐があった</li><li>OpenAPIv3.0: JSONスキーマDraft 5との互換性が90％</li><li>OpenAPIv3.1: JSONスキーマDraft 2019-09と互換性が100%</li></ul><p>参考: <a href="https://blog.stoplight.io/openapi-json-schema">https://blog.stoplight.io/openapi-json-schema</a></p><p>ちなみに、<a href="https://github.com/OAI/OpenAPI-Specification/releases/tag/3.1.0-rc1">3.1.0-rc1</a> のリリースノートを見ると、Breaking changesに3点記載されてました。</p><ul><li>Server Variable’s <code>enum</code> now MUST not be empty (changed from SHOULD).</li><li>Server Variable’s <code>default</code> now MUST exist in the <code>enum</code> values, if such values are defined (changed from SHOULD).</li><li><code>responses</code> are no longer required to be defined under the Operation Object.</li></ul><p>他にも、<code>example</code> が非推奨になり代わりに <code>examples</code> を利用しようよとか、 <code>type: [string, integer]</code> みたいに複数の型を指定できるようになったとか、<code>nullable: true</code> が <code>type: [string, &quot;null&quot;]</code> と書くといった拡張・変更があります。</p><h2 id="次期バージョンと気になったチケット"><a href="#次期バージョンと気になったチケット" class="headerlink" title="次期バージョンと気になったチケット"></a>次期バージョンと気になったチケット</h2><p>リポジトリを見ると<a href="https://github.com/OAI/OpenAPI-Specification/tree/v3.1.1-dev">v3.1.1</a>と<a href="https://github.com/OAI/OpenAPI-Specification/tree/v3.2.0-dev">v3.2.0</a> が推進のように見えます。<a href="https://github.com/OAI/OpenAPI-Specification/milestone/12">v3.2.0はマイルストーン</a>が切られていて、3つのIssueが紐づいていました。また <a href="https://github.com/OAI/OpenAPI-Specification/labels/Post%203.0%20Proposal">Post 3.0のラベル</a> もあります。</p><p>関連Issueを読んでいて面白かった部分を紹介します</p><h3 id="①Investigate-possibility-of-removing-the-constraint-that-paths-must-start-with-“-x2F-“-2327"><a href="#①Investigate-possibility-of-removing-the-constraint-that-paths-must-start-with-“-x2F-“-2327" class="headerlink" title="①Investigate possibility of removing the constraint that paths must start with “&#x2F;“ #2327"></a>①<a href="https://github.com/OAI/OpenAPI-Specification/issues/2327">Investigate possibility of removing the constraint that paths must start with “&#x2F;“ #2327</a></h3><ul><li>パスが<code>/</code> 始まりである必要があるかですが、 <a href="https://github.com/OAI/OpenAPI-Specification/issues/2316">#2316</a> を見ると、OPTIONSメソッドの場合は、<code>*</code> の指定も許容するようです。<a href="https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.7">RFC7231 4.7.3</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS#identifying_allowed_request_methods">https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS#identifying_allowed_request_methods</a> にもSyntaxでかかれれていました。<ul><li>サーバー全体に対して指定するときに用いるようです</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax</span><br><span class="line">OPTIONS /index.html HTTP/1.1</span><br><span class="line">OPTIONS * HTTP/1.1</span><br></pre></td></tr></table></figure><p>OPTIONS、CORSのプリフライトリクエストの時に利用されるイメージしかなかったので、ターゲットに <code>*</code> できるの知らなかったです。</p><h3 id="②Deprecate-discriminator-2143"><a href="#②Deprecate-discriminator-2143" class="headerlink" title="②Deprecate discriminator? #2143"></a>②<a href="https://github.com/OAI/OpenAPI-Specification/issues/2143">Deprecate discriminator? #2143</a></h3><p>discriminatorの廃止議論です。まずdiscriminatorがなにかという話ですが、3.0で追加された Open API Specification独自の機能で、スキーマを切り替えることができます。次が<a href="https://swagger.io/docs/specification/data-models/inheritance-and-polymorphism/">OpenAPI 3.0ガイドに記載されたInheritance and Polymorphism</a> に記載された例です。レスポンスは <code>oneOf</code>によって<code>Object1</code>, <code>Object2</code>, <code>sysObject</code>の3種類が取りうるとしています。このとき、どのスキーマを選択するか <code>discriminator.propertyName</code> に記載された <code>objectType</code> によって決定することができるます。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">components:</span></span><br><span class="line">  <span class="attr">responses:</span></span><br><span class="line">    <span class="attr">sampleObjectResponse:</span></span><br><span class="line">      <span class="attr">content:</span></span><br><span class="line">        <span class="attr">application/json:</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="attr">oneOf:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Object1&#x27;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Object2&#x27;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">$ref:</span> <span class="string">&#x27;sysObject.json#/sysObject&#x27;</span></span><br><span class="line">            <span class="attr">discriminator:</span></span><br><span class="line">              <span class="attr">propertyName:</span> <span class="string">objectType</span></span><br><span class="line">              <span class="attr">mapping:</span></span><br><span class="line">                <span class="attr">obj1:</span> <span class="string">&#x27;#/components/schemas/Object1&#x27;</span></span><br><span class="line">                <span class="attr">obj2:</span> <span class="string">&#x27;#/components/schemas/Object2&#x27;</span></span><br><span class="line">                <span class="attr">system:</span> <span class="string">&#x27;sysObject.json#/sysObject&#x27;</span></span><br><span class="line">  <span class="comment">#…</span></span><br><span class="line">  <span class="attr">schemas:</span></span><br><span class="line">    <span class="attr">Object1:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">      <span class="attr">required:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">objectType</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">objectType:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="comment">#…</span></span><br><span class="line">    <span class="attr">Object2:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">      <span class="attr">required:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">objectType</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">objectType:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="comment">#…</span></span><br></pre></td></tr></table></figure><p>例えば、無料ユーザーとプレミアムユーザーでレスポンス項目が微妙に変わる時に、明示的にできるといったメリットがありそうです。</p><p>こんなことできるんだ、凄い、良いよねって思いましたが、非推奨（Deprecate）の方向になっています。JSONスキーマとの互換性が理由のようです。互換性がないことでLinterなどの検証に難もあるようです。</p><h3 id="③Support-for-path-parameters-which-can-contain-slashes-892"><a href="#③Support-for-path-parameters-which-can-contain-slashes-892" class="headerlink" title="③Support for path parameters which can contain slashes #892"></a>③<a href="https://github.com/OAI/OpenAPI-Specification/issues/892">Support for path parameters which can contain slashes #892</a></h3><p>パスパラメータにスラッシュ <code>/</code> を許容してほしいという要望です。背景としては</p><ul><li><code>/resources/123</code></li><li><code>/resources/123/action</code></li><li><code>/resources/123/subresources/456</code></li></ul><p>のように、複数のサブリソースが紐づいている場合に、<code>/resources/&#123;resourceRef+&#125;</code> で一括してエンドポイントを定義したいと要望があるようです。Django、Flask、gin、echo、express.jsなど複数のプロダクトが <code>*</code> をサポートしているので追随してはどうかという意見もあります。</p><p>反対意見としては、他のどのIssueでも共通ですがエコシステムのツールチェーンが対応できるかが1つ要因としてあるそうです。例えば以下が区別できないため何かしらの優先度ベースのわかりやすいアルゴリズムが存在しない限りは難しいという立場です。（これに対しても多くの意見が寄せられています）</p><ul><li><code>/&#123;resourceRef+&#125;</code></li><li><code>/resources/&#123;resourceRef+&#125;</code></li><li><code>/resources/&#123;resourceRef+&#125;/foo</code></li><li><code>/resources/&#123;resourceRef+&#125;/foo/bar</code></li><li><code>/foo&#123;resourceRef+&#125;</code></li><li><code>/foo&#123;resourceRef+&#125;/bar</code></li><li><code>/foo/bar/baz</code></li></ul><p>現状では、<code>/resources?path=foo/bar/baz</code> などとするか、個別定義していくかになるので少し大変なので要求が強いのはわかります。なるべく静的に定義したいという気持ちもわかります。仕様策定、、大変ですね。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Open API Specificationの概略と、3.1とそれ以降の議論について簡単に紹介しました。JSONスキーマとの互換性、エコシステムのツールチェーンなどバランスを取って仕様策定する苦悩も伺いしれました。今あるHTTP APIを記述するという用途であれば、すでにさほど困らないかと思いますが、今後の動向もIssueなどを引き続き見ていきたいと思います。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://japan.zdnet.com/article/35073148/">https://japan.zdnet.com/article/35073148/</a> より</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://blog.stoplight.io/difference-between-open-v2-v3-v31">https://blog.stoplight.io/difference-between-open-v2-v3-v31</a> より</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/OpenAPI/">OpenAPI</category>
      
      <category domain="https://future-architect.github.io/tags/IDL/">IDL</category>
      
      
      <comments>https://future-architect.github.io/articles/20220622b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>サービス間通信とIDL（インタフェース記述言語）連載を始めます</title>
      <link>https://future-architect.github.io/articles/20220622a/</link>
      <guid>https://future-architect.github.io/articles/20220622a/</guid>
      <pubDate>Tue, 21 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220622a/documents-28157_640.png&quot; alt=&quot;&quot; width=&quot;585&quot; height=&quot;640&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220622a/documents-28157_640.png" alt="" width="585" height="640"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>IDLやエコシステム、サービス間の通信（何かしらのRPC関連の技術）をテーマにした連載を始めます。</p><p>IDL（インターフェース記述言語: Interface Definition Language）と聞けばWSDL（SOAP）であったりJSON-RPCなどを思い出す人も多いかと思いますが、2022年時点で新規に技術選定するのであれば、よく選ばれるのは次のプロダクト群でしょう。</p><ul><li>GraphQL</li><li>Protocol Buffers（gRPC）</li><li>OpenAPI Specification</li></ul><p>それぞれ長所・短所があるかと思いますが、それぞれエコシステムも成長も伴いどんどん使い勝手が上がっているように思えます。こういったIDLでスキーマを定義し、それを駆動にしてコミュニケーションの齟齬をなくしたり、コードやドキュメントを自動生成させるなどで、開発生産性を高めることも当たり前に行われつつあるように感じます。特に複数のチームで連携する必要があったり、本番稼働後にそれなりの期間において、ドキュメントの陳腐化させずメンテナンスをするという観点で、開発フローを自動化しやすいIDLがあると便利でしょう。</p><p>一方で、さきほど紹介した3つの仕様を含むめた、複数IDL全部に詳しい人！という方は貴重な気がします。というのも、チームで複数のIDLを準備することは通常あまりせず、したとしてもメインで用いるIDLは決めていると思うからです（複数をバッチリ使っているよという方がいれば、ぜひお話を伺いたいです！）。</p><p>今回、こういったIDLやエコシステム、サービス間の通信（何かしらのRPC関連の技術）をテーマにした連載を始めますが、この機会に普段の業務利用だと触れる機会を少しでも提供できればなと考えています。</p><div class="scroll"><table><thead><tr><th>日付</th><th>執筆者</th><th>タイトル</th></tr></thead><tbody><tr><td>6&#x2F;22</td><td>真野隼記</td><td><a href="/articles/20220622b/">Open API Specification v3.1</a></td></tr><tr><td>6&#x2F;23</td><td>澁川喜規</td><td><a href="/articles/20220623a/">gRPCのGo実装の新星、Connect</a></td></tr><tr><td>6&#x2F;24</td><td>関靖秀</td><td><a href="/articles/20220624a/">gPRC gateway</a></td></tr><tr><td>6&#x2F;29</td><td>原木翔</td><td><a href="/articles/20220629a/">スキーマのバージョン管理</a></td></tr><tr><td>7&#x2F;1</td><td>武田大輝</td><td>Open API Specification 規約</td></tr></tbody></table></div><p>原木さん、武田さんはこの連載の直前にアポを取り、快く引き受けてくれたこともあり、公開時期はすこしズレる予定です。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>フューチャーだと Open API Specification の利用が多いですが、部分的にgRPCやまれにGraphQLの採用もあるようです。個人的には<a href="https://future-architect.github.io/articles/20200609/">GraphQLのこの記事</a>を書いたことがあり、採用事例が増えると良いなと思っています（中々導入の機会が無いですね）。</p><p>Open API Specficationは利用頻度が多いので、引き続き業務的な知見を自分が得たり、周囲のチームを見つけたらブログ化を勧めたいと思いますので、暖かく見守っていただけると幸いです！</p><p><a href="https://pixabay.com/ja/users/clker-free-vector-images-3736/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=28157">Clker-Free-Vector-Images</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=28157">Pixabay</a>からの画像</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/OpenAPI/">OpenAPI</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/IDL/">IDL</category>
      
      <category domain="https://future-architect.github.io/tags/gRPC/">gRPC</category>
      
      <category domain="https://future-architect.github.io/tags/connect/">connect</category>
      
      
      <comments>https://future-architect.github.io/articles/20220622a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ファイルダウンロード完全マスター</title>
      <link>https://future-architect.github.io/articles/20220621a/</link>
      <guid>https://future-architect.github.io/articles/20220621a/</guid>
      <pubDate>Mon, 20 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220621a/upload-2244780.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;465&quot;&gt;

&lt;p&gt;Real World</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220621a/upload-2244780.png" alt="" width="800" height="465"><p>Real World HTTPでも紹介したネタですが、お仕事で受けている技術コンサル中に質問をいただいた時に、微妙に本で紹介した内容では少し足りなかったので、改めて整理のためにブログ記事にしてみました。次回、本が改訂されることがあればこのブログエントリーの内容も入れて加筆したいと思います。</p><p>Real World HTTPだとGoを使っていましたが、フロントとサーバーを同時にいじるので、本エントリーではNext.jsをサンプルに使います。Next.jsでプロジェクトを作って（npx create-next-app@latest –ts)、適当なプロジェクト名を入れてアプリケーションの雛形を作っておいてください。</p><p>Next.jsでは、1つのスクリプトファイルを作成すると、それがサーバーAPI(<code>/pages/api</code>以下)と、フロントの画面(<code>/pages/</code>以下の<code>api</code>以外)になります。Next.jsは説明しないのでまったく未見の方はチュートリアルをやると良いですが、サーバーAPIでやっていることはGoとかJavaのSpringBootとかPythonとかRubyとかの通常のウェブサービス開発と変わらないことなので、何かしらの経験があれば雰囲気で読めると思います。フロントエンドのReactもHTMLのようなJSXなので、HTMLがわかればこちらも雰囲気で伝わるかと思います。</p><h1 id="ファイルのダウンロードの基本"><a href="#ファイルのダウンロードの基本" class="headerlink" title="ファイルのダウンロードの基本"></a>ファイルのダウンロードの基本</h1><p>HTTPは「ハイパーテキスト転送プロトコル」の略ですが、ハイパーテキストというテキストファイルに限らず、さまざまなファイルの転送を請け負っています。みなさんは例えばオライリーのサイトで購入した実用Go言語の電子ブックのPDFファイルとか、さまざまなファイルを日々ダウンロードしてローカルに保存したりしていると思います。HTTPのプロトコル自体は、画面に表示されるファイルも、ダウンロードフォルダに保存されるファイルも、1つか2つのフィールドを除いては変化ありません。</p><ul><li><code>Content-Type</code></li><li><code>Content-Disposition</code></li></ul><p>また、それ以外にHTMLの<code>&lt;a&gt;</code>タグの<code>download</code>属性で制御する方法と、そのJavaScript版もあります。</p><h2 id="サーバー-サーバーが返すContent-Typeフィールドがブラウザで表示対象外-or-未サポート"><a href="#サーバー-サーバーが返すContent-Typeフィールドがブラウザで表示対象外-or-未サポート" class="headerlink" title="サーバー: サーバーが返すContent-Typeフィールドがブラウザで表示対象外 or 未サポート"></a>サーバー: サーバーが返す<code>Content-Type</code>フィールドがブラウザで表示対象外 or 未サポート</h2><p>ブラウザは、ウインドウ内でコンテンツを表示するかダウンロードにするかは、サーバーから送られてくる <code>Content-Type</code> フィールドに書かれたファイルの種別を見て判断します。最近のブラウザはPDFはインラインで表示してくれますが、Excelファイルなんかはダウンロードになります。Firefoxは設定に次のようなファイル種別ごとにダウンロードするか表示するかを持っています。</p><img src="/images/20220621a/スクリーンショット1.png" alt="" width="1200" height="731" loading="lazy"><p>このようなリスト（ブラウザによって多少違うはず）にあって、インライン表示（ここではFirefoxで開く)の場合には表示しますし、ファイルを保存が指定されている、あるいはリストにない種類の場合は保存しようとします。</p><p>実験してみましょう。次は普通のHTMLのコンテンツを返すエンドポイントです。次のファイルを作って、ブラウザから<a href="http://localhost:3000/api/download">http://localhost:3000/api/download</a> にアクセスしてみましょう。</p><figure class="highlight ts"><figcaption><span>/pages/api/download.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">download</span>(<span class="params">req: NextApiRequest, res: NextApiResponse</span>) &#123;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>); <span class="comment">// 普通のファイル種別</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">end</span>(<span class="string">&quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;hello world&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通に表示されましたね？実験で普通ではない絶対登録されてない<code>Content-Type</code>を持たせてみると、ダウンロードになることがわかります。</p><figure class="highlight ts"><figcaption><span>/pages/api/unusual-download.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">download</span>(<span class="params">req: NextApiRequest, res: NextApiResponse</span>) &#123;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;web3/html3&#x27;</span>); <span class="comment">// Web3用の特殊なHTMLはGAFAのブラウザには表示できない!!</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">end</span>(<span class="string">&quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;hello world&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="サーバー-サーバーの返すContent-Dispositionフィールドで、ファイル保存指定されている"><a href="#サーバー-サーバーの返すContent-Dispositionフィールドで、ファイル保存指定されている" class="headerlink" title="サーバー: サーバーの返すContent-Dispositionフィールドで、ファイル保存指定されている"></a>サーバー: サーバーの返す<code>Content-Disposition</code>フィールドで、ファイル保存指定されている</h2><p><a href="https://datatracker.ietf.org/doc/html/rfc6266">RFC-6266</a>で定義されているのが<code>Content-Disposition</code>フィールドです。これを使うと、サーバーの指示で、ブラウザの内部の表示設定を無視してダウンロードを強制させられます。また、ファイル保存時のファイル名を設定できます。<a href="https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Content-Disposition">MDN</a>の説明がわかりやすいです。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: inline</span><br><span class="line">Content-Disposition: attachment</span><br><span class="line">Content-Disposition: attachment; filename=&quot;download.html&quot;</span><br></pre></td></tr></table></figure><p>MDNによると、<code>inline</code>だとブラウザ内部に表示され、<code>attachment</code>だとダイアログを出して保存される、<code>filename</code>をつけると、それがダイアログのデフォルト値として入れられるブラウザが多い、と書かれています。ただし、ChromeやSafariは保存ダイアログは出さず、<code>attachment</code>だけの場合は<code>Content-Type</code>から類推される拡張子が勝手に付与され、<code>filename</code>もつけるとその指定のファイル名で保存されるという感じでした。</p><img src="/images/20220621a/スクリーンショット2.png" alt="" width="526" height="166" loading="lazy"><p>先ほどのサンプルに<code>Content-Disposition</code>ヘッダーもつけて、MDNにあるように値を変えて試してみましょう。</p><figure class="highlight ts"><figcaption><span>/pages/api/force-download-by-server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">download</span>(<span class="params">req: NextApiRequest, res: NextApiResponse</span>) &#123;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=filename.html&quot;</span>);</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">end</span>(<span class="string">&quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;hello world&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>なお、MDNのサンプルにはありませんが、<code>inline</code>に<code>filename</code>をつけるのもRFCの文法説明的にはOKです。この場合、Chromeで試すと、ブラウザがインライン表示できる<code>Content-Type</code>なら表示し、そうでなければ指定されたファイル名で保存する、という動作になっているように思います。</p><h2 id="ブラウザ-lt-a-gt-タグのdownload属性で制御する"><a href="#ブラウザ-lt-a-gt-タグのdownload属性で制御する" class="headerlink" title="ブラウザ: &lt;a&gt;タグのdownload属性で制御する"></a>ブラウザ: <code>&lt;a&gt;</code>タグの<code>download</code>属性で制御する</h2><p>次はフロントエンド側で制御する方法です。　先ほど作った、ダウンロードにならない普通のコンテンツを返すURL先のリソースを強制的にダウンロードにするするリンクをフロントエンドで作ります。<code>&lt;a&gt;</code>タグに<code>download</code>属性をつけるとブラウザは通常のコンテンツもブラウザで表示しないでダウンロードになります。</p><figure class="highlight tsx"><figcaption><span>pages/force-download-by-html.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ForceDownload</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/api/download&quot;</span> <span class="attr">download</span>=<span class="string">&quot;download.html&quot;</span>&gt;</span>ダウンロードするよ<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>もちろん、<code>download</code>属性がなくてもインライン表示ができないファイル形式など、サーバー側から返されるフィールドでダウンロードと判定されるとダウンロードになります。</p><h2 id="ブラウザ-JavaScriptで強制ダウンロードを行わせる"><a href="#ブラウザ-JavaScriptで強制ダウンロードを行わせる" class="headerlink" title="ブラウザ:　JavaScriptで強制ダウンロードを行わせる"></a>ブラウザ:　JavaScriptで強制ダウンロードを行わせる</h2><p>上記のサンプルは<code>&lt;a&gt;</code>タグでしたが、確認ダイアログでOKを押して、権限をチェックしてからダウンロードするなど、ダウンロード開始の制御をフロントのスクリプトでやりたいこともあると思います。</p><p>その時に使える方法がJavaScriptで実行する方法ですが、やっていることは<code>&lt;a&gt;</code>タグを動的に作ってクリックを人為的に起こしてから終了しているだけなので、実質的にはHTML版の焼き直しでしかありません。簡単ですね。</p><figure class="highlight tsx"><figcaption><span>pages/force-download-by-js.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useCallback &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ForceDownloadByJS</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> download = <span class="title function_">useCallback</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> anchor = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    anchor.<span class="property">href</span> = <span class="string">&quot;/api/download&quot;</span>;</span><br><span class="line">    anchor.<span class="property">download</span> = <span class="string">&quot;hello.html&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(anchor);</span><br><span class="line">    anchor.<span class="title function_">click</span>();</span><br><span class="line">    <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(anchor.<span class="property">href</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(anchor);</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;download&#125;</span>&gt;</span>ダウンロードするよ<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>なお、<code>href</code>をいじればフロント側で動的に作ったコンテンツをダウンロードさせることも可能です。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">anchor.<span class="property">href</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Blob</span>(</span><br><span class="line">    [<span class="string">&quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;hello world from front&lt;/body&gt;&lt;/html&gt;&quot;</span>],</span><br><span class="line">    &#123;<span class="attr">type</span>: <span class="string">&#x27;text/plain&#x27;</span>&#125;));</span><br></pre></td></tr></table></figure><h1 id="実際にどれを使えば良いか？"><a href="#実際にどれを使えば良いか？" class="headerlink" title="実際にどれを使えば良いか？"></a>実際にどれを使えば良いか？</h1><p>いろいろ手法がありますが、どれを選択すべきかは要件しだいです。以下にあげる項目は、どれかひとつを排他的に選ぶものではありません。もしかしたら全部に合うかもしれないし、一つだけの場合もあります。どちらにしても、ここの組み合わせでかなりのニーズは説明できる気がしています。</p><h2 id="絶対にダウンロードさせたい"><a href="#絶対にダウンロードさせたい" class="headerlink" title="絶対にダウンロードさせたい"></a>絶対にダウンロードさせたい</h2><p>サーバー側で動的に契約書のPDFを作って、ユーザー保存用として強制ダウンロードさせておきたい場合とかは、中途半端に中が見れてしまうと閲覧だけで満足してしまってダウンロードするのを忘れたり、そのために何度もPDF実行処理をサーバーが行わされたりするとうれしくないので、確実にダウンロードさせたい、みたいなケースがあると思います。</p><p><code>Content-Type</code>でダウンロードになるかどうかはブラウザの登録次第です。ユーザーが入れたブラウザ拡張機能でも変化する可能性があります。確実なのは<code>Content-Disposition</code>を使う方法、あるいは、<code>&lt;a&gt;</code>タグの<code>download</code>属性を使う方法のどちらかですね。</p><h2 id="S3のオブジェクトストレージに保存しているファイルを提供したいか否か"><a href="#S3のオブジェクトストレージに保存しているファイルを提供したいか否か" class="headerlink" title="S3のオブジェクトストレージに保存しているファイルを提供したいか否か"></a>S3のオブジェクトストレージに保存しているファイルを提供したいか否か</h2><p>S3に保存しているファイルをユーザーにダウンロードさせるなら、おそらくはサーバー側のAPIでSigned URLを発行して、それをフロントに返し、ブラウザが直接S3からダウンロードとさせることが多いと思います。一旦サーバーを経由させるのも、単に帯域とCPUを無駄に消費するだけでSDGsじゃないですし。直接S3から返す方がいいですよね？</p><p>その場合、サーバーリクエストでダウンロード開始をフロントからサーバーに宣言し、サーバーAPIから帰ってきたURLをフロント側に戻し、フロント側でダウンロードを開始することになるため、JavaScriptを使ってダウンロードさせる手法を使うことになるでしょう。以下のサンプルは↓実際には動かしてないけどこんな感じでいけるかと。</p><figure class="highlight ts"><figcaption><span>/api/download-from-s3/[filekey].ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">downloadFromS3</span>(<span class="params">req: NextApiRequest, res: NextApiResponse</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; filekey &#125; = req.<span class="property">query</span>;</span><br><span class="line">    <span class="keyword">const</span> command = <span class="keyword">new</span> <span class="title class_">GetObjectCommand</span>(&#123;</span><br><span class="line">      <span class="title class_">Bucket</span>: <span class="string">`test-bucket`</span>,</span><br><span class="line">      <span class="title class_">Key</span>: filekey <span class="keyword">as</span> <span class="built_in">string</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> signedUrl = <span class="keyword">await</span> <span class="title function_">getSignedUrl</span>(s3Client, command, &#123;</span><br><span class="line">      <span class="attr">expiresIn</span>: <span class="number">3600</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      signedUrl,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>まずはこのAPIを呼んで、その結果帰ってくる　URLからダウンロードします。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> download = <span class="title function_">useCallback</span>(<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/download-from-s3/<span class="subst">$&#123;欲しいファイル.txt&#125;</span>`</span>/)</span><br><span class="line">  <span class="keyword">const</span> &#123; signedUrl &#125; = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">  <span class="keyword">const</span> anchor = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  anchor.<span class="property">href</span> = signedUrl;</span><br><span class="line">  anchor.<span class="property">download</span> = <span class="string">&quot;欲しいファイル.txt&quot;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(anchor);</span><br><span class="line">  anchor.<span class="title function_">click</span>();</span><br><span class="line">  <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(anchor.<span class="property">href</span>);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(anchor);</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p>S3以外の、例えばRDBのBLOB型みたいなやつに保存しているデータを返すならサーバー側で<code>Content-Disposition</code>ヘッダーをつけて返すとかそういう感じになるかと思いますが、今時はS3なりCloud Storageなりのオブジェクトストレージを使う方が多いんじゃないか、という気はします。</p><h2 id="添付ファイル閲覧機能をつけたい"><a href="#添付ファイル閲覧機能をつけたい" class="headerlink" title="添付ファイル閲覧機能をつけたい"></a>添付ファイル閲覧機能をつけたい</h2><p>ファイルのダウンロード機能というのは、ダウンロード以外させたくない場合以外に、ファイルアップロード機能があったときに確認用にユーザーにダウンロードして中身を見る機能の提供と2種類ユースケースがあると思います。確認用だと2つのフローがありえます。</p><ul><li>ブラウザが対応していて閲覧する場合はコンテンツ表示<ul><li>対応しているなら、いちいちダウンロードして開き直すといった不要な手間は省きたい</li><li>新しいタブを開いてそこに表示したい。いちいち見た後に戻るをしたくない（スクロール位置がずれたり）し、間違って閉じちゃったら面倒なので。</li></ul></li><li>対応していない場合はファイルダウンロード<ul><li>ダウンロードする場合は適切なファイル名を付与してほしい</li></ul></li></ul><p>ブラウザが対応しているかどうかはサーバーは知る由もないので、どちらにでも対応できるレスポンスを行う必要があります。</p><p>まず、強制ダウンロードではないがファイル名を指定する必要があるため、サーバーとしては次のフィールドをレスポンスにつけます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: inline; filename=&quot;filename.jpg&quot;</span><br></pre></td></tr></table></figure><p>S3でSignedURLを発行するときは、多分こんな感じで上書き設定してあげれば良いはず。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> command = <span class="keyword">new</span> <span class="title class_">GetObjectCommand</span>(&#123;</span><br><span class="line">  <span class="title class_">Bucket</span>: <span class="string">`test-bucket`</span>,</span><br><span class="line">  <span class="title class_">Key</span>: filekey <span class="keyword">as</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">ResponseContentDisposition</span>: <span class="string">`&quot;inline; filename=<span class="subst">$&#123;filekey&#125;</span>&quot;`</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>つぎに、JavaScriptを使って開きますが、これも強制ではない＆新しいタブを開いて表示なので、<code>download</code>属性の設定を外す代わりに、<code>target</code>属性を設定します。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> download = <span class="title function_">useCallback</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> anchor = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  anchor.<span class="property">href</span> = <span class="string">&quot;/api/download&quot;</span>;</span><br><span class="line">  anchor.<span class="property">target</span> = <span class="string">&quot;_blank&quot;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(anchor);</span><br><span class="line">  anchor.<span class="title function_">click</span>();</span><br><span class="line">  <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(anchor.<span class="property">href</span>);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(anchor);</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p>これでダウンロードしたいけどダウンロードしたくない、でもちょっとダウンロードしたい場合に対応可能です。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>まず、サーバーx2、ブラウザx2と、ダウンロードするかどうかを制御する方法を合計4つ紹介しました。</p><p>また、最後によくあるケースとして絶対にダウンロードさせたいとか、S3を使う場合とか、サーバー側のファイルを閲覧する（可能ならダウンロードフォルダからファイルを探していちいちローカルで開く手間は減らしたい）というケースについても紹介しました。</p><p>Real World HTTPで紹介していなかったのは、S3のSigned URL周りと、可能ならインラインで表示したいがもしダウンロードするならファイル名も指定したい、の2つでした。書籍の方は今後も、リアルな要件の裏で「どのようなHTTP通信が行われるのか」を明らかにしていく方向で進化させたいので、生々しい技術相談を仕事で受けるのは楽しいですね。趣味と実益を兼ねている。</p><p>画像は<a href="https://pixabay.com/ja/users/raphaelsilva-4702998/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2244780">raphaelsilva</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2244780">Pixabay</a>を利用しました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Web/">Web</category>
      
      <category domain="https://future-architect.github.io/tags/HTTP/">HTTP</category>
      
      <category domain="https://future-architect.github.io/tags/HTML/">HTML</category>
      
      
      <comments>https://future-architect.github.io/articles/20220621a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【エネルギー業界】LPガス基礎知識編part3 充填編</title>
      <link>https://future-architect.github.io/articles/20220620a/</link>
      <guid>https://future-architect.github.io/articles/20220620a/</guid>
      <pubDate>Sun, 19 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;ご安全に。TIG</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>ご安全に。TIG DXユニットの栗田です。業界ドメインに詳しくなろうというテーマで、真野がLPガス業界の全体像について記載していますが、今回はそのうち充填業務および充填工場について説明します。</p><ul><li><a href="/articles/20220519a/">第1回 【エネルギー業界】LPガス基礎知識編 </a></li><li><a href="/articles/20220530a/">第2回 【エネルギー業界】LPガス基礎知識編part2 供給設備 </a></li><li><a href="/articles/20220630a/">第4回 【エネルギー業界】電力基礎知識編</a>)</li></ul><p>都市ガスであれば地面の中に導管を埋設し、その中をガスを通します。しかし、LPガスでは導管インフラを抱える代わりに、調達してきたLPガスを個別の容器に詰め替え、各供給設備に配送します。</p><p>この調達してきたLPガスを個別の容器に詰め替えることを、「充填」ひいては充填を行う工場のことを「充填所（充填工場）」と呼称します。</p><h2 id="前提：容器（ボンベ）について"><a href="#前提：容器（ボンベ）について" class="headerlink" title="前提：容器（ボンベ）について"></a>前提：容器（ボンベ）について</h2><p>一般的にガスボンベなどといわれるものは、液石法<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>や高圧ガス保安法では「容器」と呼称しますが、 <a href="/articles/20220530a/#%E5%AE%B9%E5%99%A8">過去の記事</a> でも触れたように、その形状は複数あります。</p><p>例として、20kg容器と50kg容器を横から図示します。</p><p>容器は転倒などによってバルブなどが壊れないように措置をすることが液石則<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>にて記述されており、プロテクタやキャップを付けることが定められています。</p><img src="/images/20220620a/LPG容器.png" alt="LPG容器" width="1200" height="1007" loading="lazy"><p>LPガス（液化石油ガス）の名前の通り、充填したばかり容器の中には液体の状態（と一部気化した状態）でガスが充填されており、時間経過とともに容器内のガスが気化し、使われていきます。</p><p>通常はあくまで自然気化をしたLPガスが各供給設備で使われますが、ガスの使い方によっては、自然気化だけでは間に合わないことがあります。例えば、工場やレストランなど、大量にガスを利用する現場では、液体を強制的に気化させてガスの安定供給を実現させることがあります。</p><p>この場合に利用するのが、ベーパライザー（強制気化装置、蒸発器）です。べーパライザーは液体のままLPガスを取り込み、熱交換器によって気化させて排出します。このべーパライザーを利用する場合、通常容器の底にある液体のLPガスを取り出す必要があります。そのため、サイフォン管を取り付けた容器（サイフォン容器、とも）を利用します。</p><h3 id="容器の検査"><a href="#容器の検査" class="headerlink" title="容器の検査"></a>容器の検査</h3><p>LPガスの容器は、一定期間ごとに検査を受けることが必要です。</p><p>容器については容器保安規則24条<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>で定められており、製造から20年未満の容器は5年に1度、20年以上の容器は2年に1度の検査が必要で、期限が切れるあるいは切れそうになった容器は検査に回されます。</p><p>LPガス業者が自社で検査設備を保有している場合は検査設備に回しますが、自社で検査設備を有していない場合、検査を行っている会社に依頼します。破損があるなどで検査に不合格にならない限り再利用可能であり、不合格になるなどした場合、容器は廃棄されます。</p><p>検査の工程としては、最初に容器の中の残ガスの回収を行い、LPガスを容器内から抜きます。バルブの取り外しを行った後、耐圧検査・内部検査などを行い、ショットブラスト<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>を行います。ショットブラスト後、再度外観検査を行い、刻印の打刻と塗装およびバルブの取付を行い、ラベリングを行って出荷となります。</p><h1 id="充填所"><a href="#充填所" class="headerlink" title="充填所"></a>充填所</h1><p>充填所は容器にLPガスを詰める施設です。</p><p>トラックで各需要家（エネルギー業界では供給先のお客様を指す）から回収してきた容器は、そのエリアを取りまとめる充填所に届けられます。充填所に回収された容器は、再度LPガスを詰めて各需要家のもとに届けられます。</p><p>充填所に持ち込まられた容器は、トラックの荷台などから人間が降ろします。充填所（あるいは検査場）が扱う容器の数は膨大であるため、トラックの荷台の高さと充填作業場の高さを合わせることで、極力容器を持ち上げず、容器を転がしながら作業できます。充填作業場に移動された容器は、転がす・コンベアで移動させる等によって充填機に投入し、充填をし、取り出します。<br>充填が終わった容器は、再度トラックなどに積み込まれて出荷されます。</p><img src="/images/20220620a/充填工場イメージ.drawio.png" alt="充填工場イメージ" width="1081" height="212" loading="lazy"><p>なお、先に説明した容器の検査期限の確認方法の一つとしては、容器を降ろした際に目視で塗装を確認し、期限切れであったら取り除いて検査に回します。<br>後述する充填機によっては、充填する際に検査期限をチェックして弾けるものもあります。</p><h2 id="充填機"><a href="#充填機" class="headerlink" title="充填機"></a>充填機</h2><p>充填機は、「計量」に属する設備です。</p><p>充填機の足元が計量器になっており、充填機に入れられた容器は重さを測りながら充填されます。ボンベによって個体差があるため「今どの容器をセットされたか」をデータベースから特定し、空の重さを確認します。同時に計量器にかけることによって、その差分から、正味何kgのLPガスがボンベ内に入っているかを見ることができます。容器は充填可能量を超えないように充填され、終わったら次の容器と交換します。</p><p>充填機には、手動のもの、全自動のもの、その間の半自動のものなど、複数の種類があります。手動充填機の場合、セルフのガソリンスタンドのようにバルブに充填機をセットして充填します。</p><p>全自動充填機になると、バルブをあけ、充填するところまで自動化されます。充填機メーカーの製品によりますが、回転式とよばれる、コンベア上を流れてきた容器を一本ずつ取り込み、充填していく機器などが挙げられます。</p><img src="/images/20220620a/LPG手動充填機.drawio.png" alt="LPG手動充填機" width="421" height="468" loading="lazy"><p>手動充填機のイメージ。手前、あるいは横から容器を測りの上に移動させ、重さを測りにながら充填を行います。</p><img src="/images/20220620a/LPG全自動充填機.drawio.png" alt="LPG全自動充填機" width="1200" height="720" loading="lazy"><p>全自動充填機のイメージ。　複数の充填機がターンテーブルの上にのり、ターンテーブル自体が回転します。</p><p>ターンテーブルが回転する間に、各充填機は計量を行いながら充填します。</p><p>各充填機は、充填が終わった容器を出口で出力し、すぐに次の容器を取り込みます。</p><h2 id="関連規格"><a href="#関連規格" class="headerlink" title="関連規格"></a>関連規格</h2><p>LPガスという危険物を扱うため、液石法をはじめ、多くの法律や規格に準拠する必要があります。</p><p>特徴的なものの一つとして、「防爆」という規格を説明します。</p><h3 id="防爆"><a href="#防爆" class="headerlink" title="防爆"></a>防爆</h3><p>LPガスという気化する可燃性物質を扱う都合上、LPガスを充填する作業場には、爆発・火災を防ぐために「防爆」という規格が適用されます。爆発・火災は、着火源と可燃物の2つが合わさることで発生しますが、LPガスを充填する工場では前述の充填機などの電気設備が必要なことから、着火源と可燃物のいずれかを完全に除去することはできません。</p><p>そのため、可燃性ガスなどを扱う際には、できる限り着火源を漏洩しないような設備の設計を行うことが必要です。</p><p>この「着火源を放出しない」ルールを定めたのが、「防爆」です。この防爆処理を定めた設備を「防爆電気設備」といいます。法律としては労働安全衛生法や電気機械器具防爆構造規格など複数存在する他、具体的な指針としてはIEC60079に整合した工場電気設備防爆指針が刊行されています。</p><p>特に防爆に関する危険場所は、可燃性ガス・蒸気の放出・漏洩頻度などによって、Zone0・1・2の3つに分類され（数字が小さいほど危険）、危険場所には防爆電気設備の設置が義務付けられます。</p><p>防爆電気設備の規格としては、例えば機器内の圧力を高める内圧防爆構造などが挙げられますが、これらの規格を満たさない電子機器は、危険場所から一定距離離れて設置する必要があり、IoT化などの大きなハードルとなります。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回は容器の充填に着目して説明しましたが、可燃性の危険物を扱う都合上、様々な法律が存在します。</p><p>初学者の参考と慣れば幸いですが、特に実際に現場を扱う際は、法律周りなど専門家に確認しながら進めることが必要です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">液石法とは、 <a href="https://elaws.e-gov.go.jp/document?lawid=342AC0000000149">液化石油ガスの保安の確保及び取引の適正化に関する法律</a> の略称。part1・2でも述べたとおり、このボンベには複数種類のサイズがあって、設置場所や条件に応じて適切なサイズの容器を選択して設置する。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://elaws.e-gov.go.jp/document?lawid=341M50000400050">容器保安規則</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">液石則とは、 <a href="https://elaws.e-gov.go.jp/document?lawid=341M50000400052_20210222_503M60000400005">液化石油ガス保安規則</a> の略称。</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">ショットブラストとは、エアーによって小さな鉄の粒を噴射し、表面のサビや外部塗装を除去する表面加工のこと。</span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Business/">Business</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%A5%AD%E7%95%8C%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3/">業界ドメイン</category>
      
      <category domain="https://future-architect.github.io/tags/LP%E3%82%AC%E3%82%B9%E6%A5%AD%E7%95%8C/">LPガス業界</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A8%E3%83%8D%E3%83%AB%E3%82%AE%E3%83%BC%E6%A5%AD%E7%95%8C/">エネルギー業界</category>
      
      
      <comments>https://future-architect.github.io/articles/20220620a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【業界ドメインに詳しくなろう】シリーズの連載を開始します！</title>
      <link>https://future-architect.github.io/articles/20220616a/</link>
      <guid>https://future-architect.github.io/articles/20220616a/</guid>
      <pubDate>Wed, 15 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220616a/city-4679928_1280.png&quot; alt=&quot;&quot; width=&quot;1280&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220616a/city-4679928_1280.png" alt="" width="1280" height="720"><p>みなさんこんにちは。TIGの村田です。</p><p>フューチャーでは日々様々なプラットフォーム・様々なコンテンツで発信を行っておりますが、「業界ドメインに詳しくなろう」と題して新シリーズをスタートします。</p><h1 id="新シリーズに至った背景"><a href="#新シリーズに至った背景" class="headerlink" title="新シリーズに至った背景"></a>新シリーズに至った背景</h1><p>今回のシリーズは、当社TIG（テクノロジーイノベーショングループ）内での外部発信テーマ検討の中で生まれ、採用されました。元々フューチャーでは技術ブログにて様々な技術系トピックの発信を行ってきましたが、今回の連載を通じて我々社員もみなさんと一緒により一層各業界ドメインに詳しくなれたらいいなと思っています！</p><p>早速真野さんがエネルギー業界に詳しくなれる記事を公開してますので、ぜひご一読ください。</p><p><a href="/articles/20220519a/">【エネルギー業界】LPガス基礎知識編</a><br><a href="/articles/20220530a/">【エネルギー業界】LPガス基礎知識編part2 供給設備</a></p><p>上記記事のように、各業界を基礎的な部分から知っていきたい人のためになるコンテンツが並んでいきます。<br>「ITコンサルタント」の視点から見た各業界について皆さまにお届けする予定です！</p><p>ちなみに、フューチャーのオウンドメディアには<a href="https://future-fintech.github.io/">Future Fintech EYE</a>という金融の未来を語るブログもあります。<br>当社取締役である山岡さんが金融業界についてたくさんの記事を公開している非常に面白いブログなので、興味がある方はぜひ一度読んでみてください！</p><h1 id="連載に登場する予定の業界ドメインと公開スケジュール"><a href="#連載に登場する予定の業界ドメインと公開スケジュール" class="headerlink" title="連載に登場する予定の業界ドメインと公開スケジュール"></a>連載に登場する予定の業界ドメインと公開スケジュール</h1><p>フューチャーでは様々な業界のお客様と一緒に仕事をさせて頂いていますが、各プロジェクトと相談しつつ、今後以下のような業界ドメインの記事を公開していく予定です。<br>今年の上期を目処に、各業界の記事を公開していけたらと考えています！（コンテンツ内容や公開タイミングは変更される可能性があります）</p><div class="scroll"><table><thead><tr><th align="left">業界</th><th align="left">連載本数</th><th align="left">公開予定月</th></tr></thead><tbody><tr><td align="left">エネルギー業界を知ろう</td><td align="left"><a href="/articles/20220620a/">【エネルギー業界】LPガス基礎知識編part3 充填編 </a></td><td align="left">6&#x2F;20</td></tr><tr><td align="left">^</td><td align="left"><a href="/articles/20220630a/">【エネルギー業界】電力基礎知識編</a></td><td align="left">6&#x2F;30</td></tr><tr><td align="left">^</td><td align="left">【エネルギー業界】LPガス基礎知識編part4 バルク</td><td align="left">7月頃</td></tr><tr><td align="left">^</td><td align="left">【エネルギー業界】業界動向</td><td align="left">9&#x2F;2</td></tr><tr><td align="left">メディア業界へのチャレンジ</td><td align="left">全5回予定</td><td align="left">2022年7〜9月</td></tr><tr><td align="left">金融業界の業務とIT</td><td align="left">本数未定</td><td align="left">2022年7月〜</td></tr><tr><td align="left">鉄道業界と沿線ビジネス</td><td align="left">本数未定</td><td align="left">2022年7月〜</td></tr><tr><td align="left">アパレル業界に詳しくなろう</td><td align="left">本数未定</td><td align="left">2022年8月頃</td></tr><tr><td align="left">流通小売業界におけるチャレンジ</td><td align="left">本数未定</td><td align="left">2022年8月頃</td></tr></tbody></table></div><p>ビジネスとテクノロジの垣根なく両足を突っ込んでいくフューチャー社員ならではの連載になるのではと思っています。<br>今後の投稿もぜひご期待ください！</p><p>※画像は <a href="https://pixabay.com/ja/users/khirulislam898-12875647/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4679928">MD KHIRUL ISLAM</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4679928">Pixabay</a>を利用させていただきました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Business/">Business</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9/">ビジネス</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%A5%AD%E7%95%8C%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3/">業界ドメイン</category>
      
      
      <comments>https://future-architect.github.io/articles/20220616a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go で map 型の YAML 出力を指定の順序へ変更したい</title>
      <link>https://future-architect.github.io/articles/20220615a/</link>
      <guid>https://future-architect.github.io/articles/20220615a/</guid>
      <pubDate>Tue, 14 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220615a/yml.png&quot; alt=&quot;&quot; width=&quot;512&quot; height=&quot;512&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://www.flaticon.com/free-icons/yml&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220615a/yml.png" alt="" width="512" height="512" loading="lazy"><p><a href="https://www.flaticon.com/free-icons/yml" title="yml icons">Yml icons created by Darius Dan - Flaticon</a></p><p>TIG 所属の多賀です。<br>表題の通り、Go で map 型の YAML 出力の際、key を指定した順序にする方法を調査・実装してみました。</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><ul><li>map の key は YAML 変換ライブラリ側でソートされた上で、出力することで順序が固定化されている</li><li>指定した順序で出力したいので、map を struct へ変換して出力した</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Go の map のソート順は不定であることは、よく言われることかなと思います。<br>(言語仕様にも明記されています。)</p><blockquote><h4 id="Map-types"><a href="#Map-types" class="headerlink" title="Map types"></a>Map types</h4><p>A map is <strong>an unordered group</strong> of elements of one type, called the element type, indexed by a set of unique keys of another type, called the key type. The value of an uninitialized map is nil.</p><p><a href="https://go.dev/ref/spec#Map_types">The Go Programming Language Specification - Map types</a></p></blockquote><p>そのため、map をソートして出力したい場合は、 map に含まれる key のリストをソートし、ソートされた key ごとに map の value を出力することで実現します。</p><p>例: <a href="https://go.dev/play/p/5LC2H8ziPpI">The Go Playground - map sort sample</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;a&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;d&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;c&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;b&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">keys := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(m))</span><br><span class="line"><span class="keyword">for</span> k := <span class="keyword">range</span> m &#123;</span><br><span class="line">keys = <span class="built_in">append</span>(keys, k)</span><br><span class="line">&#125;</span><br><span class="line">sort.Strings(keys)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, key := <span class="keyword">range</span> keys &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;key: %v, val: %v\n&quot;</span>, key, m[key])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="comment">// key: a, val: xxx</span></span><br><span class="line"><span class="comment">// key: b, val: xxx</span></span><br><span class="line"><span class="comment">// key: c, val: xxx</span></span><br><span class="line"><span class="comment">// key: d, val: xxx</span></span><br></pre></td></tr></table></figure><p>同様に、map を <a href="https://ja.wikipedia.org/wiki/YAML">YAML</a> へ出力する際も key でソートして出力したかったのですが、YAML を扱うライブラリ側でソート順が固定化されており、できませんでした。ライブラリの調査について以下に記載します。<br>まず、Go で YAML を扱うためには、一般的に以下ライブラリが利用することができます。</p><ul><li><a href="https://github.com/go-yaml/yaml">go-yaml/yaml.v3</a></li><li><a href="https://github.com/goccy/go-yaml">goccy/go-yaml</a></li></ul><p>(今回のサンプルは、 <a href="https://github.com/go-yaml/yaml">go-yaml/yaml.v3</a> を利用しています。)</p><p>map を YAML 形式へ出力するコードを以下の通りに実装してみました。</p><p>例: <a href="https://go.dev/play/p/19g1PtgoyRq">The Go Playground - map to yaml sample</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gopkg.in/yaml.v3&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;a&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;d&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;c&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;b&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b, err := yaml.Marshal(&amp;m)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="type">string</span>(b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="comment">// a: xxx</span></span><br><span class="line"><span class="comment">// b: xxx</span></span><br><span class="line"><span class="comment">// c: xxx</span></span><br><span class="line"><span class="comment">// d: xxx</span></span><br></pre></td></tr></table></figure><p>出力を見てみると(もしくは、PlayGround上で複数回実行していみると) 固定でアルファベット順にソートされて出力されていることがわかります。<br>ソースコードを読んでみると、ライブラリ内で key をソートした上で出力するように実装されていました。<br>それぞれのライブラリの該当行は以下になります。</p><ul><li><a href="https://github.com/go-yaml/yaml/blob/f6f7691b1fdeb513f56608cd2c32c51f8194bf51/encode.go#L186">go-yaml/yaml - encode.go#mapv</a></li><li><a href="https://github.com/goccy/go-yaml/blob/883a73b67b4e35d8f5bad112c918363aad961e3c/encode.go#L503">goccy/go-yaml - encode.go#encodeMap</a></li></ul><p>(key がソートされてないと出力ごとに余計な差分が出て不便なので、ライブラリ側で吸収してくれているのかと思いました。)</p><p>ライブラリ側で<strong>固定で</strong>ソート順が定められている以上、map の出力を<strong>指定の</strong>ソート順にできないことになります。<br>今回、 <strong>指定の</strong>ソート順にしたい要望があり、どうにかできないか調査・実装してみました。</p><h2 id="対応方法"><a href="#対応方法" class="headerlink" title="対応方法"></a>対応方法</h2><p>やりたいことは、 「map の YAML 出力時の key を指定した順序で出力すること」になります。<br>上記記載の通り、map のソート順はライブラリ側で固定化されているので、map 型のままだと難しそうです。<br>map 型の他に、key/value 形式でソート順が固定されているデータ構造としては、 struct が該当すると考え、map → struct の変換をすれば良いのではと思いつきました。</p><p>ですが、map は任意の key/value 値になるため、コンパイル前に struct を定義することはできません。<br>そのため、map の key/value 値を元にして、実行時に struct を生成することにしました。</p><p>また、YAML 形式へ変換する実装を map → struct への変換処理にカスタマイズしたいです。<br>変換処理を独自カスタマイズするには、<a href="https://github.com/go-yaml/yaml">go-yaml/yaml.v3</a> の場合は <code>Marshaler</code> interface を実装することで可能です。</p><p><a href="https://github.com/go-yaml/yaml/blob/v3/yaml.go#L50">yaml/yaml.go at v3 · go-yaml/yaml · GitHub</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The Marshaler interface may be implemented by types to customize their</span></span><br><span class="line"><span class="comment">// behavior when being marshaled into a YAML document. The returned value</span></span><br><span class="line"><span class="comment">// is marshaled in place of the original value implementing Marshaler.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If an error is returned by MarshalYAML, the marshaling procedure stops</span></span><br><span class="line"><span class="comment">// and returns with the provided error.</span></span><br><span class="line"><span class="keyword">type</span> Marshaler <span class="keyword">interface</span> &#123;</span><br><span class="line">MarshalYAML() (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(<code>goccy/go-yaml</code> の場合も同様の interface (<a href="https://github.com/goccy/go-yaml/blob/883a73b67b4e35d8f5bad112c918363aad961e3c/yaml.go#L29">InterfaceMarshaler</a>) でカスタマイズ可能な模様です。)</p><p>整理すると、以下の 2点を実装する必要があります。</p><p><strong>① map の値から実行時に struct を新たに生成し、struct のフィールドを指定したソート順で定義する。</strong><br><strong>② YAML 出力時に map → struct 変換を実装するため、出力カスタマイズ可能な interface を満たすように実装する。</strong></p><p>こちらの 2点を満たす実装を以下の通り実施してみました。<br>(※ reflection が多用されたナイーブな実装なので、本運用等のコードに使うのは少しリスキーだと思います。今回は CLI ツールでの利用であったため、問題ないとしています。)</p><p><a href="https://go.dev/play/p/-ZlYbk2_La-">The Go Playground - sort map to yaml sample</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/iancoleman/strcase&quot;</span></span><br><span class="line"><span class="string">&quot;gopkg.in/yaml.v3&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ② Marshaler interface を実装する専用の構造体を定義</span></span><br><span class="line"><span class="keyword">type</span> SortedMap <span class="keyword">struct</span> &#123;</span><br><span class="line">output     <span class="keyword">map</span>[<span class="type">string</span>]any</span><br><span class="line">sortedKeys []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ② Marshaler interface を満たすメソッドを定義</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o SortedMap)</span></span> MarshalYAML() (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> o.sortedKeys == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> o.output, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ① の map → struct 生成を実装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 構造体のフィールドを定義</span></span><br><span class="line">newStructFields := <span class="built_in">make</span>([]reflect.StructField, <span class="number">0</span>, <span class="built_in">len</span>(o.output))</span><br><span class="line"><span class="keyword">for</span> _, key := <span class="keyword">range</span> o.sortedKeys &#123;</span><br><span class="line"><span class="keyword">var</span> newStructField reflect.StructField</span><br><span class="line"><span class="keyword">if</span> o.output[key] != <span class="literal">nil</span> &#123;</span><br><span class="line">newStructField = reflect.StructField&#123;</span><br><span class="line">Name: strcase.ToCamel(key),</span><br><span class="line">Type: reflect.ValueOf(o.output[key]).Type(),</span><br><span class="line">Tag:  reflect.StructTag(fmt.Sprintf(<span class="string">`yaml:&quot;%v&quot;`</span>, key)),</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// nil 値の場合 zero value error となるため、ポインタ型で定義して型を抽出</span></span><br><span class="line"><span class="keyword">var</span> ptrTyp *<span class="keyword">struct</span>&#123;&#125; = <span class="literal">nil</span></span><br><span class="line">newStructField = reflect.StructField&#123;</span><br><span class="line">Name: strcase.ToCamel(key),</span><br><span class="line">Type: reflect.ValueOf(ptrTyp).Type(),</span><br><span class="line">Tag:  reflect.StructTag(fmt.Sprintf(<span class="string">`yaml:&quot;%v&quot;`</span>, key)),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">newStructFields = <span class="built_in">append</span>(newStructFields, newStructField)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 構造体型の生成</span></span><br><span class="line">newStructType := reflect.StructOf(newStructFields)</span><br><span class="line"><span class="comment">// 構造体の生成</span></span><br><span class="line">newStruct := reflect.New(newStructType).Elem()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 構造体へ値を詰める</span></span><br><span class="line"><span class="keyword">for</span> _, key := <span class="keyword">range</span> o.sortedKeys &#123;</span><br><span class="line">newStructValue := newStruct.FieldByName(strcase.ToCamel(key))</span><br><span class="line">value := o.output[key]</span><br><span class="line"><span class="keyword">if</span> value != <span class="literal">nil</span> &#123;</span><br><span class="line">newStructValue.Set(reflect.ValueOf(value))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// nil 値の場合 zero value error となるため、ポインタ型で定義して nil を定義</span></span><br><span class="line"><span class="comment">// YAML ファイル上に nil で出力したいため</span></span><br><span class="line"><span class="keyword">var</span> ptrValue *<span class="keyword">struct</span>&#123;&#125; = <span class="literal">nil</span></span><br><span class="line">newStructValue.Set(reflect.ValueOf(ptrValue))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> newStruct.Interface(), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]any&#123;</span><br><span class="line"><span class="string">&quot;a&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;d&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;c&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;b&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ソート順を指定</span></span><br><span class="line">sortedKeys := []<span class="type">string</span>&#123;<span class="string">&quot;d&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">sm := SortedMap&#123;output: m, sortedKeys: sortedKeys&#125;</span><br><span class="line"></span><br><span class="line">b, err := yaml.Marshal(&amp;sm)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="type">string</span>(b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="comment">// d: xxx</span></span><br><span class="line"><span class="comment">// c: xxx</span></span><br><span class="line"><span class="comment">// b: xxx</span></span><br><span class="line"><span class="comment">// a: xxx</span></span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Go で map の YAML 出力時のソート順を指定する方法を実装してみました。<br>YAML 形式に閉じずに、他の形式でも似た実装で同じような結果が得られそうです。<br>実装方法としては、reflection 利用のあまり良くないコードかなとは思いつつ、他に方法も浮かばなかったのが実際のところです。<br>(他に良い実現方法があれば、ぜひ知りたいです。)</p><p>最後まで読んでいただきありがとうございました。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://qiita.com/uechoco@github/items/b51df877659226d2893e">Goのreflectで任意の構造体のフィールド変数を1つ増やしちゃう - Qiita</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/YAML/">YAML</category>
      
      <category domain="https://future-architect.github.io/tags/map/">map</category>
      
      
      <comments>https://future-architect.github.io/articles/20220615a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>循環的複雑度の計算を題材にRoslyn APIを使ってみた</title>
      <link>https://future-architect.github.io/articles/20220614a/</link>
      <guid>https://future-architect.github.io/articles/20220614a/</guid>
      <pubDate>Mon, 13 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;TIG コアテクノロジーユニットの山田です。ソースやドキュメントを解析してファクト分析を行う仕事をしています。&lt;/p&gt;
&lt;p&gt;今回は循環的複雑度の計算を題材に、Roslynを用いてVB.NETに対する解析コード&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>TIG コアテクノロジーユニットの山田です。ソースやドキュメントを解析してファクト分析を行う仕事をしています。</p><p>今回は循環的複雑度の計算を題材に、Roslynを用いてVB.NETに対する解析コード<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>をC#で書いてみました。本記事では、メソッド単位の循環的複雑度の計算を、クエリメソッドを用いて構文木を走査する方法とVisualBasicSyntaxWalkerを継承したクラスを用いて構文木を走査する方法の2通りの方法を紹介します。それぞれの方法の特徴は以下の通りです。</p><ol><li>クエリメソッドを用いる方法<ul><li>あるノードの子ノードや子孫ノード、祖先ノードをクエリメソッドにより列挙して処理する形になります</li><li>いわゆるXMLに対するXPathやHTMLに対するCSSセレクタのようなインタフェースです</li></ul></li><li>VisualBasicSyntaxWalkerを継承したクラスを用いる方法<ul><li>どの型のノードを訪問した際にどんな処理をするかというのを記述する方式となります</li><li>いわゆるVisitorパターンです</li></ul></li></ol><h2 id="Roslynとは"><a href="#Roslynとは" class="headerlink" title="Roslynとは"></a>Roslynとは</h2><p>Roslynとは.NET Compiler Platformのコードネームで、コード解析ツール構築のためのAPIを持つコンパイラです<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。Roslynが提供しているAPIを用いることで簡単に静的解析を行うことが出来ます。Microsoft公式で開発されているため、安心感がありますね。</p><h2 id="循環的複雑度について"><a href="#循環的複雑度について" class="headerlink" title="循環的複雑度について"></a>循環的複雑度について</h2><p>循環的複雑度とはコードの品質を表す指標の一つで、循環的複雑度が高いほど複雑な構造であるといえます。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> <sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p><p>循環的複雑度は制御フローグラフのノード数nとエッジ数eから <code>e - n + 2</code> という形で計算できます。<br>制御フローグラフに分岐が一つもない場合、この値は1となり、分岐が増えるごとに値が増えていくため、分岐の数 + 1という形で簡単に求めることができます。</p><p>今回の記事では、<code>If</code>, <code>ElseIf</code>, <code>For</code>, <code>For Each</code>, <code>While</code>, <code>Case</code>, <code>Catch</code> の数を数えて循環的複雑度を算出<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>することにします。<br>なお、<code>IIf</code> は一見三項演算子のようですが、扱いとしてはただの関数なので今回は対象としませんでした。自前で算出すると自由に計算ロジックを変えられるので、プロジェクトのルールに応じてカスタマイズできますね。</p><p>具体的には以下のようにカウントします。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Public</span> <span class="keyword">Class</span> A</span><br><span class="line">    <span class="comment">&#x27; 分岐の数は合計で10個なので循環的複雑度は11となる</span></span><br><span class="line">    <span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Sub</span> Main()</span><br><span class="line">        <span class="keyword">Dim</span> i <span class="keyword">As</span> <span class="type">Integer</span> = <span class="number">1</span></span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">If</span> i = <span class="number">1</span> <span class="keyword">Then</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">ElseIf</span> i = <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">        <span class="keyword">Else</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">        <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">While</span> i &gt; <span class="number">0</span></span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">End</span> <span class="keyword">While</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">For</span> index <span class="keyword">As</span> <span class="type">Integer</span> = <span class="number">0</span> <span class="keyword">To</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">Next</span> index</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Dim</span> lst <span class="keyword">As</span> <span class="built_in">New</span> List(<span class="keyword">Of</span> <span class="type">String</span>) <span class="keyword">From</span> &#123;<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>&#125;</span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">For</span> <span class="keyword">Each</span> elem <span class="keyword">As</span> <span class="type">String</span> <span class="keyword">In</span> lst</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;&quot;</span>, elem)</span><br><span class="line">        <span class="keyword">Next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">Try</span></span><br><span class="line">            <span class="keyword">Throw</span> <span class="built_in">New</span> Exception()</span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">Catch</span> ex <span class="keyword">As</span> Exception</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Catch&quot;</span>)</span><br><span class="line">        <span class="keyword">End</span> <span class="keyword">Try</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">Dim</span> s <span class="keyword">As</span> <span class="type">String</span> = <span class="keyword">If</span>(<span class="literal">Nothing</span>, <span class="string">&quot;hoge&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        i = <span class="keyword">If</span>(<span class="number">0</span> = <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">&#x27; ここは+1しない</span></span><br><span class="line">        i = IIf(<span class="number">0</span> = <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Select</span> <span class="keyword">Case</span> <span class="number">2</span></span><br><span class="line">            <span class="comment">&#x27; ここで+1</span></span><br><span class="line">            <span class="keyword">Case</span> <span class="number">0</span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            <span class="comment">&#x27; ここで+1</span></span><br><span class="line">            <span class="keyword">Case</span> <span class="number">1</span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            <span class="keyword">Case</span> <span class="keyword">Else</span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Else&quot;</span>)</span><br><span class="line">        <span class="keyword">End</span> <span class="keyword">Select</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Class</span></span><br></pre></td></tr></table></figure><h2 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h2><p>下記ツールをインストールします</p><ul><li>.NET 6.0 SDK</li><li>Visual Studio Code<ul><li>C# 拡張機能</li></ul></li></ul><h3 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h3><p>下記コマンドでプロジェクトを作成します。（<code>-o</code>で指定しているのはプロジェクト名です）<br>これによりカレントフォルダに <code>RoslynBlog.csproj</code> ファイルが作成されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -o RoslynBlog</span><br></pre></td></tr></table></figure><h3 id="デバッガの設定"><a href="#デバッガの設定" class="headerlink" title="デバッガの設定"></a>デバッガの設定</h3><p>さて、ここまでで C# の開発環境とプロジェクトの作成が済みましたが、まだデバッガが使用出来ない状態です。続いてデバッガの設定をしていきましょう。<br>といっても手順は簡単で、Visual Studio Codeのデバッグパネルを開き、 <code>create a launch.json file</code> をクリックするだけです。<br>これにより、<code>launch.json</code>が作成され、このようにデバッグが可能となります。<br><img src="/images/20220614a/2022-06-01_16h51_12.png" alt="2022-06-01_16h51_12.png" width="540" height="256" loading="lazy"></p><p>これで無事にデバッグできるようになりました。<br><img src="/images/20220614a/2022-06-02_13h23_24.png" alt="2022-06-02_13h23_24.png" width="679" height="223" loading="lazy"></p><h2 id="開発"><a href="#開発" class="headerlink" title="開発"></a>開発</h2><h3 id="パッケージ追加"><a href="#パッケージ追加" class="headerlink" title="パッケージ追加"></a>パッケージ追加</h3><p>まず今回使用するパッケージを追加します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package Microsoft.Build.Locator --version 1.4.1</span><br><span class="line">dotnet add package Microsoft.CodeAnalysis --version 4.2.0</span><br><span class="line">dotnet add package Microsoft.CodeAnalysis.VisualBasic --version 4.2.0</span><br><span class="line">dotnet add package Microsoft.CodeAnalysis.VisualBasic.Workspaces --version 4.2.0</span><br><span class="line">dotnet add package Microsoft.CodeAnalysis.Workspaces.Common --version 4.2.0</span><br><span class="line">dotnet add package Microsoft.CodeAnalysis.Workspaces.MSBuild --version 4.2.0</span><br></pre></td></tr></table></figure><p><code>RoslynBlog.csproj</code> ファイルをエディタで開くことで、依存パッケージが追加されていることが確認できます。言語とビルドツールが統合されており便利ですね。</p><h3 id="計算対象のプロジェクトの読み込み"><a href="#計算対象のプロジェクトの読み込み" class="headerlink" title="計算対象のプロジェクトの読み込み"></a>計算対象のプロジェクトの読み込み</h3><p><code>MSBuildWorkspace</code>を用いてプロジェクトを読み込み、各ドキュメントの各メソッドごとの循環的複雑度を計算して返します。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    MSBuildLocator.RegisterDefaults();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> workspace = MSBuildWorkspace.Create();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> projectPath = <span class="string">@&quot;../TestProjVB/TestProjVB.vbproj&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> project = <span class="keyword">await</span> workspace.OpenProjectAsync(projectPath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> document <span class="keyword">in</span> project.Documents)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> syntaxTree = <span class="keyword">await</span> document.GetSyntaxTreeAsync();</span><br><span class="line">        <span class="keyword">if</span> (syntaxTree == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// クエリメソッドを用いて循環的複雑度を計算した結果を出力</span></span><br><span class="line">        <span class="keyword">var</span> cyclomaticComplexityByQueryMethod = CalcCyclomaticComplexityByQueryMethod(syntaxTree);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> (methodName, cyclomaticComplexity) <span class="keyword">in</span> cyclomaticComplexityByQueryMethod)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;CalcCyclomaticComplexityByQueryMethod(&#123;0&#125;)=&#123;1&#125;&quot;</span>, methodName, cyclomaticComplexity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// SyntaxWalkerを用いて循環的複雑度を計算した結果を出力</span></span><br><span class="line">        <span class="keyword">var</span> cyclomaticComplexityBySyntaxWalker = CalcCyclomaticComplexityBySyntaxWalker(syntaxTree);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> (methodName, cyclomaticComplexity) <span class="keyword">in</span> cyclomaticComplexityBySyntaxWalker)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;CalcCyclomaticComplexityBySyntaxWalker(&#123;0&#125;)=&#123;1&#125;&quot;</span>, methodName, cyclomaticComplexity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="クエリメソッドによる循環的複雑度の計算"><a href="#クエリメソッドによる循環的複雑度の計算" class="headerlink" title="クエリメソッドによる循環的複雑度の計算"></a>クエリメソッドによる循環的複雑度の計算</h3><p><a href="https://docs.microsoft.com/ja-jp/dotnet/csharp/roslyn-sdk/get-started/syntax-analysis#query-methods">こちら</a>で紹介されているクエリメソッドを用いて循環的複雑度を計算します。<br>循環的複雑度の加算対象となるノードは以下のように判定できます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">IsDecisionNode</span>(<span class="params">SyntaxNode node</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Case Else は除外</span></span><br><span class="line">    <span class="keyword">if</span> (node.IsKind(SyntaxKind.CaseElseStatement))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">        node <span class="keyword">is</span> IfStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> ElseIfStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> WhileStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> ForStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> ForEachStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> CatchStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> CaseStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> TernaryConditionalExpressionSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> BinaryConditionalExpressionSyntax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記メソッドを用いて、メソッド毎の循環的複雑度は下記のように計算できます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; <span class="title">CalcCyclomaticComplexityByQueryMethod</span>(<span class="params">SyntaxTree syntaxTree</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> cyclomaticComplexityDict = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> methodBlockSyntax <span class="keyword">in</span> syntaxTree.GetRoot().DescendantNodes().OfType&lt;MethodBlockSyntax&gt;())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> methodStatementSyntax = methodBlockSyntax.ChildNodes().OfType&lt;MethodStatementSyntax&gt;().First();</span><br><span class="line">        <span class="keyword">var</span> methodName = methodStatementSyntax.Identifier.Text;</span><br><span class="line">        <span class="keyword">var</span> methodCyclomaticComplexity = methodBlockSyntax.DescendantNodes().Where(node =&gt; CyclomaticComplexity.IsDecisionNode(node)).Count() + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        cyclomaticComplexityDict[methodName] = methodCyclomaticComplexity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cyclomaticComplexityDict;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SyntaxWalkerによる循環的複雑度の計算"><a href="#SyntaxWalkerによる循環的複雑度の計算" class="headerlink" title="SyntaxWalkerによる循環的複雑度の計算"></a>SyntaxWalkerによる循環的複雑度の計算</h3><p>構文木を走査しながら循環的複雑度を計算するSyntaxWalkerクラスを作成します。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">CyclomaticComplexitySyntaxWalker</span> : <span class="title">VisualBasicSyntaxWalker</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; CyclomaticComplexityDict &#123; <span class="keyword">get</span>; &#125; = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _currentMethodName = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitMethodStatement</span>(<span class="params">MethodStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _currentMethodName = node.Identifier.Text;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitMethodStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitIfStatement</span>(<span class="params">IfStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitIfStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitElseIfStatement</span>(<span class="params">ElseIfStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitElseIfStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitWhileStatement</span>(<span class="params">WhileStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitWhileStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitForStatement</span>(<span class="params">ForStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitForStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitForEachStatement</span>(<span class="params">ForEachStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitForEachStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitCatchStatement</span>(<span class="params">CatchStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitCatchStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitCaseStatement</span>(<span class="params">CaseStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Case Else は除外</span></span><br><span class="line">        <span class="keyword">if</span> (!node.IsKind(SyntaxKind.CaseElseStatement))</span><br><span class="line">        &#123;</span><br><span class="line">            CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">base</span>.VisitCaseStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitTernaryConditionalExpression</span>(<span class="params">TernaryConditionalExpressionSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitTernaryConditionalExpression(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitBinaryConditionalExpression</span>(<span class="params">BinaryConditionalExpressionSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitBinaryConditionalExpression(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作成した <code>CyclomaticComplexitySyntaxWalker</code>クラス用いて、下記のように循環的複雑度が計算できます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; <span class="title">CalcCyclomaticComplexityBySyntaxWalker</span>(<span class="params">SyntaxTree syntaxTree</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> walker = <span class="keyword">new</span> CyclomaticComplexitySyntaxWalker();</span><br><span class="line"></span><br><span class="line">    walker.Visit(syntaxTree.GetRoot());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> walker.CyclomaticComplexityDict;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回はRoslynのSyntax APIを使い、VB.NETのプロジェクトを解析し循環的複雑度の計算をしてみました。<br>Roslynを使うことで（Solutionや）Projectを簡単に読み込み、解析することができることがわかりました。<br>C#の循環的複雑度もノードの型が違うだけで、ほぼ同じ形で作ることができます。</p><p>今回の記事とは関係ないですが、C#だと <a href="https://github.com/dotnet/roslyn/blob/main/docs/wiki/Scripting-API-Samples.md">Scripting API</a> により、C#のコードをevalすることが可能なのですが、<a href="https://github.com/dotnet/roslyn/issues/6897#issuecomment-462433349">VB.NETのScripting APIは開発中止になった</a>ようなので今後使える見込みはなさそうです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://github.com/dotnet/vblang/tree/main/spec">vblang/spec at main · dotnet/vblang · GitHub</a> でantlrのgrammarが配布されているのですが、これを使ってparseすることはできないようでした。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://github.com/dotnet/roslyn">GitHub - dotnet/roslyn: The Roslyn .NET compiler provides C# and Visual Basic languages with rich code analysis APIs.</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;"><a href="https://www.buildinsider.net/enterprise/sansanreport/0503">10分間で人に説明できるまで分かるCompiler as a Service“Roslyn” - Build Insider</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;"><a href="https://www.w2solution.co.jp/tech/2021/11/26/eg_ns_rs_cyclomaticcomplexity/">バグの出にくいコードを書く~サイクロマティック複雑度について~ | ｗ２ソリューション株式会社 TECH Media</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;"><a href="https://docs.microsoft.com/ja-jp/visualstudio/code-quality/code-metrics-cyclomatic-complexity?view=vs-2022#the-magic-number">コード メトリック - サイクロマティック複雑度 - Visual Studio (Windows) | Microsoft Docs</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="vertical-align: top; padding-right: 10px;">6.</span><span style="vertical-align: top;">.NETの静的解析ツールであるNDependの場合はcontinue, gotoなどもカウントするようですが、今回は計算対象外としています。<a href="https://blog.ndepend.com/understanding-cyclomatic-complexity/#:~:text=Along%20with%20the%20if%20keyword%2C%20you%20can%20acquire%20additional%20complexity%20by%20use%20of%20looping%20constructs%20(while%2C%20for%2C%20foreach)%2C%20switch%20blocks%20(case/default)%2C%20jumps%20(continue%2C%20goto)%2C%20exceptions%20(catch)%2C%20and%20compound%20conditional%20enablers%20(%26%26%2C%20%7C%7C%2C%20ternary%20operator).">Understanding Cyclomatic Complexity -- NDepend</a></span><a href="#fnref:6" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E9%9D%99%E7%9A%84%E8%A7%A3%E6%9E%90/">静的解析</category>
      
      <category domain="https://future-architect.github.io/tags/C/">C#</category>
      
      <category domain="https://future-architect.github.io/tags/VB-Net/">VB.Net</category>
      
      <category domain="https://future-architect.github.io/tags/Roslyn/">Roslyn</category>
      
      
      <comments>https://future-architect.github.io/articles/20220614a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Future Tech Night #17 embeddingを用いた分析・検索・推薦の技術</title>
      <link>https://future-architect.github.io/articles/20220613a/</link>
      <guid>https://future-architect.github.io/articles/20220613a/</guid>
      <pubDate>Sun, 12 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220613a/top.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;263&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220613a/top.png" alt="" width="600" height="263"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。Strategic AI Group所属の金子剛士です。</p><p>2021年11月26日に<a href="https://future.connpass.com/event/231310/">Future Tech Night #17「embeddingの活用」と「MLOps」のAI勉強会</a>を開催し、「embeddingを用いた分析・検索・推薦の技術」というタイトルで発表しました。</p><p>当日の勉強会の様子は<a href="https://www.youtube.com/watch?v=6_C-GnwIz3U">YouTubeで公開しており</a>、発表スライドも公開しています。</p><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/c424fa8e8ec24dab980b0f3ba0905502" title="embeddingを用いた分析・検索・推薦の技術" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 314px;" data-ratio="1.78343949044586"></iframe><h1 id="発表の概要"><a href="#発表の概要" class="headerlink" title="発表の概要"></a>発表の概要</h1><p>深層学習のモデルは画像や自然言語に対して高い精度の予測を行うことが可能ですが、その処理の過程で様々な意味を含んだベクトル(=embedding)を作ります。これを活用することで、どのデータとどのデータが意味的に似ているかを計算し分析することができるようになります。</p><p>本発表の前半では学習済みの自然言語モデルを用いて技術ブログの文章をembeddingに変換し、類似記事の検索や記事のクラスタリングを行いました。embeddingを活用することで、過去の類似記事やタグを効率的に探すことができ、かつ意味的にクラスタリングすることで記事の傾向について考察することができました。これと同様の分析は画像やログデータのデータベースにも適用可能で、人の手で付与したラベルやカテゴリを越えた多くの気づきを与えてくれます。</p><p>本発表の後半ではgensimや対照学習によるembeddingを作成するモデルの学習方法や、embeddingを高速に検索するための近似近傍探索といった最先端のトピックを紹介しました。ログデータからのembeddingを学習・分析は<a href="https://future-architect.github.io/articles/20210901a/">医薬品副作用データベースから医薬品同士の関係を学習・評価・可視化する</a>の記事で紹介したこともありますが、例えidだけでもログデータを用いて適切に学習すればそれだけで意味のあるembeddingを学習することができ、かつ深層学習モデルをスクラッチで組めばデータのカテゴリ情報や画像・言語情報も考慮したうえでデータ同士の関係性を分析することができます。また、<a href="https://cloud.google.com/blog/ja/products/ai-machine-learning/vertex-matching-engine-blazing-fast-and-massively-scalable-nearest-neighbor-search">Vertex Matching Engine</a>にも採用されている、コサイン類似度に適した近似近傍探索手法のScaNNについても紹介・実験を行いパフォーマンスを比較しました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>普段自身で研究していたembedding関連の技術の一部をTechNightの場を借りて発表させていただきました。多くの方から反応をいただき嬉しかったです。また、参加者の方とのdiscussionでよりembeddingに関連した技術の幅を広げられました。感謝しております。</p><p>深層学習を通じて得られるembeddingには多種多様な可能性があり、非常にホットな分野です。<br>今後も動向を追いつつ、社会実装を行っていきたいと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/">機械学習</category>
      
      <category domain="https://future-architect.github.io/tags/TechNight/">TechNight</category>
      
      <category domain="https://future-architect.github.io/tags/TensorFlow/">TensorFlow</category>
      
      
      <comments>https://future-architect.github.io/articles/20220613a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ドメイン駆動設計の源流のPofEAAを読んでみる</title>
      <link>https://future-architect.github.io/articles/20220610a/</link>
      <guid>https://future-architect.github.io/articles/20220610a/</guid>
      <pubDate>Thu, 09 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;最近、ドメイン駆動設計(以下DDD)とかそのあたりを読みこんでいる人から、DDD本の読み方を教えてもらいました。ここではDDD本は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>最近、ドメイン駆動設計(以下DDD)とかそのあたりを読みこんでいる人から、DDD本の読み方を教えてもらいました。ここではDDD本は<a href="https://www.amazon.co.jp/dp/B00GRKD6XU/">エリック・エヴァンスのドメイン駆動設計</a>の方を参照しました。</p><p><a href="https://twitter.com/katzchang">@katzchang</a> さんから教わったのは「DDDはパターンランゲージの形式を意識してるよ」ということでした。ただし、きちんとしたパターンランゲージの形式になっておらず、記述が著者のものになってるので、読者は注意して読む必要があるのかもとのことです。</p><p><a href="https://twitter.com/ryoaita">@ryoaita</a>さんから教わったのは「DDDは<a href="https://www.amazon.co.jp/dp/B01B5MX2O2/">エンタープライズアプリケーションアーキテクチャパターン</a>(以下PofEAA)を下敷きにしている本だよ」ということでした。</p><p>DDDももう時代的にはかなり古い本です。自分で読んだ限りは全然好きになれなくて、でもきっと何かあるはずだと3-4冊読んでみましたが感想は変わらずでした。ユビキタス言語も「当たり前のものを先頭に持ってきて、<a href="https://million-sales.com/?p=346">イエスセット</a>のテクとして誘導してくる詐欺師のテクニックでは」と思ってたぐらいでした。DDDを理解するよりも、DDD本が出た当時のこの本の立ち位置とか成立の過程というのが最近は気になっていました。</p><p>本当はここで紹介する2冊（エリック・エヴァンスのドメイン駆動設計と、エンタープライズアプリケーションアーキテクチャパターン）が半額セールしているうちに書きたかったのですが、5月末で終わってしまったようです。残念。</p><h1 id="パターンランゲージとして見る"><a href="#パターンランゲージとして見る" class="headerlink" title="パターンランゲージとして見る"></a>パターンランゲージとして見る</h1><p>パターンランゲージは、カタログ集の形式ですが、パターンを選ぶ基準を決める「フォース（場）」が大事です。パターンは順番に適用していくものではなく、その状況にあったものをピックアップして使う、という使い方をします。フォースが合わなければ使っても意味なかったり、逆効果だったりします。なので、基本的にそこに入っているものをすべて適用するということはしない、というのがパターンを意識して書かれた本を読むコツです（XPは全適用が基本ですが）。</p><p>モデリング周りのパターンはこんな感じです。DDD本の裏表紙の折り返し部分に書かれているのを引用しました。境界づけられたコンテキストとかあるけど、基本的にはマージできないコンテキストは分けて開始するけど、徐々に統合していくよ、という流れのように見えますね。レガシーシステムラッパー（腐敗防止層）もいつかはリプレースする想定でしょうし。汎用サブドメインはどこの会社でも同じような「銀行振込」みたいなわざわざモデル化すべきでないものだと思うし、統合されたコンテキストとその中で実現するコアドメインというのが最終進化系な気がしますね。まあ単一のモデルで実現できるものであれば、わざわざ分ける必要ないですものね。</p><img src="/images/20220610a/スクリーンショット_2022-06-03_8.05.54.png" alt="スクリーンショット_2022-06-03_8.05.54.png" width="1190" height="1048" loading="lazy"><p>本文はXPを想定してUMLみたいなモデルを作らずにコードでモデルを表現する方法を推していて、補足的な方法としてアナリシスパターンとか、UMLも紹介していますね。モデリング周りのパターンは、この「単一のモデル（を含むコンテキスト）」をスケーリングする方法として書かれている、という読み方をすればいいということですね。肝心のモデリングする部分が「ドメインエキスパートに聞いてコードに書いて洗練する」とか程度で方法論として薄いなぁ、というのも今までDDDに持っていた不満ポイントでした。</p><p>が、DDD本の出版当時に多数あった「既存のモデリング手法」をスケーリングさせるパターンであった考えれば、理解できます。問題は、20年ほど前に流行ったさまざまなモデリング手法が現代で失われてしまったということぐらいですかね。</p><p>ちなみに、XP的な設計手法を使う前提だとしても、この説明だけでは実現できず、他のXP本の力が必要でしょう。4重のイテレーション、フィードバックの仕組み、ストーリーなどを使った要求のマッピングなど、お客さんの言葉を引き出すテクニックがきちんと形になっているのがXPですし、メタファーを使って再現とかコードにする前にきちんとチーム内でコミュニケーションする方法論になっていますが、DDD本はそこを端折っています。まあ他の方法論同様、XPをみんなが知っている（という時代だった）という前提だったんだろうな、と思います。</p><p>実装周りはこんな感じです。DDD本の表紙の折り返し部分に書かれているのを引用しました。モデルをコードとして表現するには、エンティティ、サービス、値オブジェクトで表現するとありますね（図はモジュールも矢印が伸びているが5章の本文では3要素のみ）。ですが、これらのパターンはどれもふわっとしか書かれてなくて、詳細がいまいち分かりませんでしたが、ここでPofEAAを召喚すると良さそうです。</p><img src="/images/20220610a/スクリーンショット_2022-06-03_8.03.08.png" alt="スクリーンショット_2022-06-03_8.03.08.png" width="1122" height="1126" loading="lazy"><h1 id="PofEAAのドメインの表現手法のパターン"><a href="#PofEAAのドメインの表現手法のパターン" class="headerlink" title="PofEAAのドメインの表現手法のパターン"></a>PofEAAのドメインの表現手法のパターン</h1><p>DDD本で書いてあるコードの部品のパターン名と似たものがDDDにはあります。こちらの方が詳しく説明されているので、DDDの説明を補完するにはこちらも合わせて読むと良さそうです。マーチン・ファウラーのエンタープライズアプリケーションアーキテクチャパターン（PofEAA）には、ドメインロジックの構築方法として、３つのパターンが紹介されています。</p><ul><li><a href="https://bliki-ja.github.io/pofeaa/TransactionScript/">トランザクションスクリプト</a></li><li><a href="https://bliki-ja.github.io/pofeaa/DomainModel/">ドメインモデル</a></li><li><a href="https://bliki-ja.github.io/pofeaa/TableModule/">テーブルモジュール</a></li></ul><p>DDD本が選んだのは、この中のドメインモデルです。DDD本はエンティティと値オブジェクトと書いていますが、ドメインモデルという言葉では表現していません。ドメインモデル（オブジェクトで表現）という形式に、エンティティと値オブジェクトを重ねている状態かと思います。他の物は重ならないですし。</p><p>で、PofEAAはドメインを表現する手段としてはバリューオブジェクトの紹介はしておらず、ドメイン関係ないネジ釘を紹介する「ベースパターン」の中にいます。エンティティという言葉はないですが、12章のオブジェクトリレーショナル構造パターンという章まるごとがエンティティを扱っています。PofEAAでは、実装手段（バリューオブジェクト、OR構造パターン）と、ドメインロジックを持つオブジェクトである、という情報は直交したものとして扱われていますね。</p><p>DDD本はテーブルモジュールには触れず、トランザクションスクリプトはアンチパターンで、ドメインモデルが正義のように説明していますが、PofEAAではそれぞれのメリットとデメリットがフラットに紹介されています。トランザクションスクリプトもシンプルでいいよと説明されています。でもって、実装手段とドメインロジックを持つもの、といのが別の軸のものという紹介を省いて、値オブジェクトとエンティティを「ドメインを表現するもの」と紹介してしまっているようです。つまり、ドメインを表現しない値オブジェクトとか、エンティティなんてものはないぞ、という誤解を生み出す源泉はこの魔改造にありそうです。</p><p>このあたりとか、DDDとPofEAAの関係は次のエントリーが詳しいです。</p><ul><li><a href="https://note.com/ryoaita/n/nc263697882cd">RE:メモ:値オブジェクトの定義と差異について</a></li></ul><p>DDD本は、すごくシンプルな事例（Ruby on Railsでさっと作ったアプリ的な）向けに、そのシンプルな状況に耐えうるミニマムセットのパターンを取り出し「ドメインを表現するならこの部分に込めるといいよ」と抜き出して説明しているんだろうな、という気がしてきました。ただ、抜き出す基準が、１５年前のブームになっていたJava文化基準でピックアップしたのかな、というあたりが気になりました。</p><h1 id="ソフトウェアエンジニアリングは全然エンジニアリングじゃない"><a href="#ソフトウェアエンジニアリングは全然エンジニアリングじゃない" class="headerlink" title="ソフトウェアエンジニアリングは全然エンジニアリングじゃない"></a>ソフトウェアエンジニアリングは全然エンジニアリングじゃない</h1><p>オブジェクト指向だって、言語によって機能が異なり、同じようなソフトウェアを作る場合に出来上がるクラス構造とかが大きく変わってきます。例えば、DIなんかはリフレクション前提でしょうしね。クラス図ときれいにマッピングできるようなモデルがあって、上流から下流までうまく繋がるというのは幻だったということです。</p><p>現在行われているソフトウェアの設計という行為は、レイヤーを絞り込んで、その中だけで行われています。</p><ul><li>データベースを中心として設計を行うデータ中心設計（DOA）</li><li>データベースとかフレームワークを切り離しでアプリケーションコード中心に設計するいくつかの方法論</li><li>ゲームではシーングラフの上で動くアクターを中心にしたイベント駆動</li></ul><p>そのレイヤーを定めるのは土台となってるフレームワーク次第なので、フレームワークごとのベストプラクティス的な立場に収まってしまったと言えます。「汎用の設計手法」というのはなくて、土台となる技術が変わって来れば設計手法も影響を受けて変わるということです。</p><p>以前、歴史学を専攻している知人から歴史学のエコシステムを教えてもらったことがあります(もう10年以上前の話ですが)。歴史学では遺跡から出た出土品とかさまざまな資料をもとに、仮説検証をおこなって当時の姿を再現したモデルを作ります。で、新しい発見があると、それをもとに新しいモデルを作り直します。特に情報の少ない古代史になればなるほど、1つの発見で既存のモデルが大きく書き換えられていきます。これって、ようするに、自然科学の発展のような過程を何度も何度も繰り返していると言えます。なぜ<a href="https://ja.wikipedia.org/wiki/%E6%97%A7%E7%9F%B3%E5%99%A8%E6%8D%8F%E9%80%A0%E4%BA%8B%E4%BB%B6">神の手事件</a>が大きな問題として扱われたのか当時はよくわからなくて「歴史書のそこの記述をちょっと直せばいいだけでは」とか思っていましたが、「そのページ以降すべて書き直し」というインパクトがあったのだな、とそれを聞いて初めて理解できました。</p><p>20年ぐらい前に流行ったオブジェクト指向な方法論とかも、当時のJavaとかを想定して組み上げられた方法論ですので、同じような探求活動を、クラスはあるけどほとんど使わない今のTypeScriptとかに対して行えば、当然別の発展が得られるかと思います。歴史学と同じようなリビルドがソフトウェア開発にも起きうるべきですし、ソフトウェア工学の大部分は人文科学なんだなと思います。</p><p>プロパティベーステストとか、SIerあたりでよく出てくるソースジェネレータ開発とかスキーマ駆動なやつとかそのあたりは工学感ありますが。パターンランゲージはいい線行っていると思いますが、デザインパターンとかもC++98以前の30年前に伝えられた姿のままでバージョンアップされずに固定化されてしまっているのですよね。パターンは有機的なもので発展し続けるのを想定していたのかもしれませんが、XPのパターン数も12→13→24(11+13)→19だったか変化し続けて、Clean Agileはケント・ベックとまた別の13だったりするが、XPについて触れた記事もどの時代のものについて触れているか情報が失われて議論が発散してしまった感じがあり、パターンランゲージにバージョン番号をつけて改訂していく文化がなかったのが残念だなと。</p><p>余談ですが、世の中の「オブジェクト指向」は基本Javaを想定していますが、個人的にはprivateの概念はRubyの方が好きですね。同一インスタンス以外には見せない。C++の「お前のものは俺のもの」という悪いカツアゲしてくる「トモダチ」もひどい概念ですね。</p><h1 id="令和時代のDDDを妄想してみると面白いと思う"><a href="#令和時代のDDDを妄想してみると面白いと思う" class="headerlink" title="令和時代のDDDを妄想してみると面白いと思う"></a>令和時代のDDDを妄想してみると面白いと思う</h1><p>パターンランゲージについては最初の方に説明しました。パターンは基本的に数が多ければ多いほど、その組み合わせでたくさんの場面に活用できるというものです。比較的多くのパターンを並べていて網羅的に書かれているPofEAAのパターンも、時代に合っていないもの、その後登場して入るべきであろう、というものもありますし、仮に利用可能なパターンがあっても、そのフォースも、20年の歴史の中で大きく変わっています。当然、それをもとに組み上げられてきたDDDはさらに大きな変化があるはずです。</p><p>特に、最近のクラウドネイティブなFaaSを駆使したピタゴラスイッチ的なやつ。あれとか旧来のDDDとかだとオーバーヘッドが大きすぎると思うんですよね。モデルはデータベースの構造として表現して、トランザクションスクリプトにドメインロジックとか、そういうのに合わせたDDDとか、いろいろ新しい形が模索できるんじゃないかと思います。</p><p>PofEAAで特に古さを感じたのは。ウェブアプリケーションのフロントエンド周りの考え方で、CGIとかそういう時代も考慮したものでSPAとかそういう時代ではないのですが、そういうあたりは微笑ましいなぁ、という感じで読めます。あと、DBにXMLとかを文字列で入れる、みたいな話はJSON型ネイティブサポートとかで解決されるものとかあったりとかするなって思ったりもしました。まあ、このあたり、年長者の人と一緒に読書会でもして、「昔はこうだったけど今はもうこうじゃないよ」とアンラーニングしながらPofEAA本を読むのも良さそうな気がします。</p><iframe sandbox="allow-popups allow-scripts allow-modals allow-forms allow-same-origin" style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=shibukawayosh-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B01B5MX2O2&linkId=9b9628f33caaf7af0ab2e6d7e171fece"></iframe><iframe sandbox="allow-popups allow-scripts allow-modals allow-forms allow-same-origin" style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=shibukawayosh-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B00GRKD6XU&linkId=f551c5e0f7c499cd88dfeec95133d75d"></iframe>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/DDD/">DDD</category>
      
      <category domain="https://future-architect.github.io/tags/PofEAA/">PofEAA</category>
      
      
      <comments>https://future-architect.github.io/articles/20220610a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GoogleWorkspace SDKのAPIリクエスト間隔は気を付けましょう</title>
      <link>https://future-architect.github.io/articles/20220609a/</link>
      <guid>https://future-architect.github.io/articles/20220609a/</guid>
      <pubDate>Wed, 08 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220609a/googleworkspace.png&quot; alt=&quot;&quot; width=&quot;708&quot; height=&quot;402&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220609a/googleworkspace.png" alt="" width="708" height="402"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG DXユニットの岸下です。2022年2月にキャリア入社して、早4ヶ月経ちました。時が流れるのは早いですね。</p><p>参加しているプロジェクトで、Google Workspace Admin SDKのDirectory APIを使った開発を行いました。</p><p>本記事では、<a href="/articles/20220601a/">失敗談をテーマにした連載</a>として、APIを利用した際に500エラーを頻発させてしまった件について執筆していこうと思います。</p><p>結構あるあるな失敗なので、これから開発に入っていく新入社員・初学者の方にはぜひ読んで頂きたい内容となっております。</p><h2 id="Google-Workspace-Admin-SDKとDirectory-APIについて"><a href="#Google-Workspace-Admin-SDKとDirectory-APIについて" class="headerlink" title="Google Workspace Admin SDKとDirectory APIについて"></a>Google Workspace Admin SDKとDirectory APIについて</h2><p>Google WorkspaceはGoogleが提供する組織向けオンラインアプリケーションセットです。</p><p><a href="https://developers.google.com/admin-sdk">Google Workspace Admin SDK</a>はGoogle Workspaceに存在する情報を取得するための管理者向けSDKになっています。<br>また、<a href="https://developers.google.com/admin-sdk/directory">Directory API</a>はGoogle Workspaceで利用しているドメインのユーザーや繋がっているデバイス、サードパーティアプリケーションを管理したり、取得したりすることができます。</p><h2 id="何をしていたのか"><a href="#何をしていたのか" class="headerlink" title="何をしていたのか"></a>何をしていたのか</h2><p>今回、Google Workspace上でグループ化された情報（グループの人数、グループのメールアドレス、グループメンバーのメールアドレスなど）を取得する必要がありました。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span><p>Google Workspaceのグループ化について</p>  <p>Google Workspaceではアカウントのグルーピングが可能です。これには<a href="https://cloud.google.com/?hl=ja">Google Cloud Platform（GCP）</a>上で、グループに対してIAMロールを付与することができるという恩恵があり、グループに所属しているメンバー全員に対してGCPリソースの権限管理ができます。（例えば、グループAにはGoogle Cloud Storageの管理者権限、グループBにはGoogle Cloud Storageの閲覧権限のみなど）</p></div><h2 id="何が起きたのか"><a href="#何が起きたのか" class="headerlink" title="何が起きたのか"></a>何が起きたのか</h2><h3 id="開発環境"><a href="#開発環境" class="headerlink" title="開発環境"></a>開発環境</h3><ul><li>WSL2</li><li>Go1.18</li></ul><h3 id="リクエスト間隔を考慮しなかったがために、500エラーを乱発"><a href="#リクエスト間隔を考慮しなかったがために、500エラーを乱発" class="headerlink" title="リクエスト間隔を考慮しなかったがために、500エラーを乱発"></a>リクエスト間隔を考慮しなかったがために、500エラーを乱発</h3><p>以下、サンプルコードになります。</p><figure class="highlight golang"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;golang.org/x/oauth2/google&quot;</span></span><br><span class="line">admin <span class="string">&quot;google.golang.org/api/admin/directory/v1&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/api/option&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Group <span class="keyword">struct</span> &#123;</span><br><span class="line">groupEmail       <span class="type">string</span></span><br><span class="line">groupName        <span class="type">string</span></span><br><span class="line">numberOfMembers  <span class="type">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GroupMember <span class="keyword">struct</span> &#123;</span><br><span class="line">groupEmail  <span class="type">string</span></span><br><span class="line">memberEmail <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> googleWorkspaceScopesForGroupAndMember = []<span class="type">string</span>&#123;</span><br><span class="line">admin.AdminDirectoryGroupMemberReadonlyScope,</span><br><span class="line">admin.AdminDirectoryGroupReadonlyScope,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// グループのメールアドレス（本来はもっと多い）</span></span><br><span class="line"><span class="comment">// グループのメールアドレスもDirectory APIで取得できるが今回は省略</span></span><br><span class="line"><span class="keyword">var</span> groups = []Group&#123;</span><br><span class="line">&#123;</span><br><span class="line">groupEmail:       <span class="string">&quot;hoge-developer@test.com&quot;</span>,</span><br><span class="line">groupName:        <span class="string">&quot;hoge developer team&quot;</span>,</span><br><span class="line">numberOfMembers: <span class="number">5</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">groupEmail:       <span class="string">&quot;fuga-owner@test.com&quot;</span>,</span><br><span class="line">groupName:        <span class="string">&quot;fuga owner team&quot;</span>,</span><br><span class="line">numberOfMembers: <span class="number">10</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetGroupMember</span><span class="params">()</span></span> ([]GroupMember, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> groupMemberList []GroupMember</span><br><span class="line"><span class="comment">// 取得を行うためのAdmin Serviceを取得</span></span><br><span class="line">srv, err := getService()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;get admin service: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, g := <span class="keyword">range</span> groups &#123;</span><br><span class="line"><span class="keyword">if</span> g.numberOfMembers != <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// この中でDirectory APIを叩いている</span></span><br><span class="line">members, err := createGroupMemberList(srv, g.groupEmail)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;create group member list: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">groupMemberList = <span class="built_in">append</span>(groupMemberList, members...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> groupMemberList, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createGroupMemberList</span><span class="params">(srv *admin.Service, email <span class="type">string</span>)</span></span> ([]GroupMember, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// APIを叩く</span></span><br><span class="line">rm, err := srv.Members.List(email).Do()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;get member list: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> memberList []GroupMember</span><br><span class="line"><span class="comment">// リスト作成処理</span></span><br><span class="line"><span class="keyword">for</span> _, m := <span class="keyword">range</span> rm.Members &#123;</span><br><span class="line">memberList = <span class="built_in">append</span>(memberList, GroupMember&#123;groupEmail: email, memberEmail: m.Email&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> memberList, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getService</span><span class="params">()</span></span> (*admin.Service, <span class="type">error</span>) &#123;</span><br><span class="line">serviceAccountJSON, err := ioutil.ReadFile(<span class="string">&quot;key/service-account-key.json&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;read service account key: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">config, err := google.JWTConfigFromJSON(serviceAccountJSON, googleWorkspaceScopesForGroupAndMember...)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;authorize service account key: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">config.Subject = <span class="string">&quot;&lt;管理者のメールアドレス&gt;&quot;</span></span><br><span class="line">config.Scopes = googleWorkspaceScopesForGroupAndMember</span><br><span class="line">ctx := context.Background()</span><br><span class="line">srv, err := admin.NewService(ctx, option.WithHTTPClient(config.Client(ctx)))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;get new service: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> srv, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">groupMembers, err := GetGroupMember()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, member := <span class="keyword">range</span> groupMembers &#123;</span><br><span class="line"><span class="comment">// 何か処理する</span></span><br><span class="line">fmt.Println(member)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>タイトルの通りなのですが、上記実装では<code>createGroupMemberList(srv, g.groupEmail)</code>にて、リクエスト間隔について全く考慮しておらず、<strong>間髪入れずにAPIへリクエストを送ったことによって500エラーを発生させてしまいました。</strong></p><p>それもそのはずで、<a href="https://developers.google.com/admin-sdk/directory/v1/limits">APIの仕様書</a>を見ると1分あたりの呼び出し制限数が記載されています。</p><blockquote><p>Indicates that the user rate limit has been exceeded. The default value set in the Google Developers Console is 3,000 queries per 100 seconds per IP address.</p></blockquote><h3 id="解決策①：リクエスト間隔に余裕を持たせる"><a href="#解決策①：リクエスト間隔に余裕を持たせる" class="headerlink" title="解決策①：リクエスト間隔に余裕を持たせる"></a>解決策①：リクエスト間隔に余裕を持たせる</h3><p>高速でリクエストを投げつけるとDoSアタックと勘違いされてブロックされる場合もあるのでちゃんと間隔をおいてリクエストを投げましょう。</p><p>以下のように、<code>Sleep</code>を入れてリクエスト間隔に余裕を持たせるのが一番簡単だと思います。</p><figure class="highlight golang"><figcaption><span>main.go (GetGroupMemberでリクエスト時間を調節)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetGroupMember</span><span class="params">()</span></span> ([]GroupMember, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> groupMemberList []GroupMember</span><br><span class="line"><span class="comment">// 取得を行うためのAdmin Serviceを取得</span></span><br><span class="line">srv, err := getService()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;get admin service: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, g := <span class="keyword">range</span> groups &#123;</span><br><span class="line"><span class="keyword">if</span> g.numberOfMembers != <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// Serviceとグループのメールアドレスを渡すことで、メンバー情報を取得</span></span><br><span class="line"><span class="comment">// この中でAPIを叩いている</span></span><br><span class="line">members, err := createGroupMemberList(srv, g.groupEmail)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;create group member list: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">groupMemberList = <span class="built_in">append</span>(groupMemberList, members...)</span><br><span class="line">            <span class="comment">// Sleepを設定</span></span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">250</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> groupMemberList, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="あれ？またリクエストがコケたぞ"><a href="#あれ？またリクエストがコケたぞ" class="headerlink" title="あれ？またリクエストがコケたぞ"></a>あれ？またリクエストがコケたぞ</h3><p>リクエスト間隔を調整したにも関わらず、たまーに500エラーが返ってきます。</p><p><a href="https://stackoverflow.com/questions/26188334/why-do-i-get-503-service-unavailable-errors-using-the-google-cloud-datastore-api">StackOverflow</a>にも同じ現象が起きている人が居て、リクエスト間隔に余裕を持たせていたとしてもGoogle側の何かしらのトラブルによって500エラーでコケるようです。</p><blockquote><p>“You did everything right, but Google is having some trouble handling your request.”<br>（コードは正しく書けているけど、Google側でリクエストを処理しようとした際に何かしらのエラーが起きているみたいよ）</p></blockquote><h3 id="解決策②：指数バックオフを導入する"><a href="#解決策②：指数バックオフを導入する" class="headerlink" title="解決策②：指数バックオフを導入する"></a>解決策②：指数バックオフを導入する</h3><p>こういったケースはどのAPIでもあり得るので、 <strong><a href="https://cloud.google.com/memorystore/docs/redis/exponential-backoff?hl=ja">指数バックオフ</a></strong> を導入しましょう。<br>「指数バックオフ？？数学＋横文字やめて！」となるかもしれませんが、簡単にまとめると「APIへリクエストしたにも関わらず失敗した際に、時間を少しおいてリクエストをもう一度送る」処理になります。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span><p>指数バックオフに関しては本ブログ過去記事でも紹介しております。</p>  <p><a href="/articles/20200121/">スロットリングとの付き合い方</a></p></div><p>先ほどのリクエスト時間に余裕を持たせたうえで以下の変更を施します。</p><figure class="highlight golang"><figcaption><span>main.go（createGroupMemberList内のAPI利用時に指数バックオフを導入）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createGroupMemberList</span><span class="params">(srv *admin.Service, email <span class="type">string</span>)</span></span> ([]GroupMember, <span class="type">error</span>) &#123;</span><br><span class="line">maxRetries := <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> memberList []GroupMember</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= maxRetries; i++ &#123;</span><br><span class="line"><span class="comment">// APIを叩く</span></span><br><span class="line">rm, err := srv.Members.List(email).Do()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">var</span> gerr *googleapi.Error</span><br><span class="line"><span class="keyword">if</span> ok := errors.As(err, &amp;gerr); ok &#123;</span><br><span class="line">                <span class="comment">// エラーコードが500系列であれば、リトライ</span></span><br><span class="line"><span class="keyword">if</span> gerr.Code &gt;= <span class="number">500</span> &#123;</span><br><span class="line">                    <span class="comment">// 繰り返しの数を用いて待ち時間を生成</span></span><br><span class="line">waitTime := <span class="type">int</span>(math.Pow(<span class="number">2</span>, <span class="type">float64</span>(i+<span class="number">1</span>)) * <span class="type">float64</span>(<span class="number">100</span>))</span><br><span class="line">fmt.Println(waitTime)</span><br><span class="line">                    <span class="comment">// 待つ</span></span><br><span class="line">time.Sleep(time.Millisecond * time.Duration(waitTime))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;get member list: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// リスト作成処理</span></span><br><span class="line"><span class="keyword">for</span> _, m := <span class="keyword">range</span> rm.Members &#123;</span><br><span class="line">memberList = <span class="built_in">append</span>(memberList, GroupMember&#123;groupEmail: email, memberEmail: m.Email&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> memberList, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;reaching max retries in createGroupMemberList&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>リトライ数などはべた書きですが、関数として指数バックオフを定義して複数のAPIで共通で利用できるようにしておくと良さそうですね。</p><p>こうすることで、たまーにコケるエラーに対して頑健なリクエストをすることが可能になります。<br>（というか、<a href="https://developers.google.com/admin-sdk/directory/v1/limits">APIの仕様書</a>にも指数バックオフ導入しといてねって書いてありますね…）</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span><p>GoogleAPIのエラーコード処理についても本ブログ過去記事で紹介しております。）</p>  <p>こちらを参考にすれば、AWS向けにも導入可能になります。</p>  <p><a href="/articles/20200523/">Go Tips連載6: Error wrappingされた各クラウドSDKの独自型エラーを扱う</a></p></div><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>サードパーティのAPIを使う処理を書く場合は、</p><ul><li>リクエスト間隔は気をつけましょう（APIの仕様書をちゃんと読みましょう）。</li><li>指数バックオフを導入しておきましょう。</li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/GoogleWorkspace/">GoogleWorkspace</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B9%E3%83%AD%E3%83%83%E3%83%88%E3%83%AA%E3%83%B3%E3%82%B0/">スロットリング</category>
      
      
      <comments>https://future-architect.github.io/articles/20220609a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ユーザー要望で要件が増えてく〜アジャイル開発での落とし穴〜</title>
      <link>https://future-architect.github.io/articles/20220608a/</link>
      <guid>https://future-architect.github.io/articles/20220608a/</guid>
      <pubDate>Tue, 07 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、Technology Innovation Group所属の久保です。&lt;/p&gt;
&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Technology Innovation Group所属の久保です。</p><p><a href="/articles/20220601a/">失敗談をテーマにした連載</a>の6本目です。</p><p>自分が担当した業務でのアジャイル開発での失敗について反省したいと思います。選定したアーキテクチャとアジャイル開発の相性があまりよくなく苦労しました。これはアジャイルの本にはなかった知見でした。</p><h1 id="アジャイル開発ってなに？"><a href="#アジャイル開発ってなに？" class="headerlink" title="アジャイル開発ってなに？"></a>アジャイル開発ってなに？</h1><p>Wikipediaにはこのように書いてありました。</p><blockquote><p>ソフトウェア工学におけるアジャイルソフトウェア開発 (アジャイルソフトウェアかいはつ、英: agile software development) は、人間・迅速さ・顧客・適応性に価値を置くソフトウェア開発である[1]。典型的なアジャイルソフトウェア開発では、チーム主導で設計・実装・デプロイを短期間に繰り返してユーザーが得た価値を学習し適応する、すなわちトライアルアンドエラーで開発が行われる。アジャイルソフトウェア開発を可能にする開発手法にはエクストリーム・プログラミングやスクラムなどがある。</p></blockquote><p>引用:<a href="https://ja.wikipedia.org/wiki/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA">アジャイルソフトウェア開発</a></p><h1 id="アジャイル開発のメリットと落とし穴"><a href="#アジャイル開発のメリットと落とし穴" class="headerlink" title="アジャイル開発のメリットと落とし穴"></a>アジャイル開発のメリットと落とし穴</h1><h2 id="メリット"><a href="#メリット" class="headerlink" title="メリット"></a>メリット</h2><p>上記の様にアジャイル開発では短いスパンでアプリをリリースしフィードバックを頂きながら開発を進めるというものです。</p><p>メリットとして短いスパンでフィードバックを貰うことで顧客の求めるものと出来上がるもののイメージがあまりブレず、手戻りなどが少なく開発を行えるという点があります。そのためアジャイル開発は仕様変更に柔軟に対応できる開発方法と言われています。自分のプロジェクトでは2週間に1回アプリケーションをリリースしフィードバックを頂き開発をしていました。</p><h2 id="ユーザー要望でデータ表示条件の増加"><a href="#ユーザー要望でデータ表示条件の増加" class="headerlink" title="ユーザー要望でデータ表示条件の増加"></a>ユーザー要望でデータ表示条件の増加</h2><p>ではなぜアジャイル開発で失敗したのか？自分の失敗を話したいと思います。私が作ったシステムはIoTデバイスで取得した日次のデータをKVSに格納しアプリケーションに表示するというものでした。</p><p>開発初期から表示するデータの要件定義は以下のように変化していきました。</p><ol><li>取得したデータを閲覧できるようにする</li><li>取得したデータをソートして閲覧できるようにする</li><li>取得したデータをソートして閲覧できるようにする。IoTデバイスがデータの取得に失敗した時は失敗したことがわかるように表示する</li><li>取得したデータを状況毎に表示を変えソートして閲覧できるようにする。IoTデバイスがデータの取得に失敗した時は失敗したことがわかるように表示する</li></ol><p>４は少し分かりづらいですがIoTデバイスが故障している場合や電池切れ、電源が入っていないものは「IoTデバイスの状態」を表示するという仕様の追加でした。</p><h2 id="落とし穴"><a href="#落とし穴" class="headerlink" title="落とし穴"></a>落とし穴</h2><p>今回使ったKVSではソート条件を追加するにはインデックスの追加が必要であり、これはコスト増加することに繋がります。またKVSでは検索条件の追加やソート条件の更新を行う度に、データマイグレーションが必要となります。日次データを取り扱っている為、データ量が多くデータマイグレーションを行うこと事が非常に大変でした。</p><p>このようにフィードバックを受ける度に要件が増えることで工数がどんどん増えていってしまいました。</p><img src="/images/20220608a/アジャイルでの失敗.jpg" alt="アジャイルでの失敗.jpg" width="915" height="460" loading="lazy"><p>初期の要件定義の時点ではユーザーストーリーなどの仮説が荒く、詰めきれない場面が多く追加要望が来る度に仕様の変更を余儀なくされていました。一次情報保存先のKVSとは別に、閲覧用にデータ分析用のRDBMSを追加するなど、要件変更に耐えうる構成などもできましたが、コストの増加の面から採用を見送りました。</p><p>初期の段階である程度仕様を詰めたり、途中のフィードバック時に仕様を落とし込めていれば工数はもう少し下げれたと考えています。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>自分のアジャイル開発での失敗談を書いてみました。</p><p>DBMSのアーキテクチャやデータマイグレーションが変更の容易さに与える影響など、クラウド時代に増えてきた特徴の強いDBMSを活用する場合に、ある程度変更の範囲を予測するなり、事前に合意するなりする必要があると感じました。<br>同じようなミスで苦しむ人が少なくなりますように。</p><p>次の<a href="/articles/20220601a/">失敗談をテーマにした連載</a>は、岸下さんの<a href="/articles/20220609a/">GoogleWorkspace SDKのAPIリクエスト間隔は気を付けましょう</a>でし・</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DevOps/">DevOps</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB/">アジャイル</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      
      <comments>https://future-architect.github.io/articles/20220608a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Lambdaの初期化処理と初期化タイミングの考慮不足によるはまりどころ</title>
      <link>https://future-architect.github.io/articles/20220607a/</link>
      <guid>https://future-architect.github.io/articles/20220607a/</guid>
      <pubDate>Mon, 06 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは、TIGの辻です。&lt;a href=&quot;/articles/20220601a/&quot;&gt;失敗談をテーマにした連載&lt;/a&gt;の5本目です。&lt;/p&gt;
&lt;p&gt;AWS</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは、TIGの辻です。<a href="/articles/20220601a/">失敗談をテーマにした連載</a>の5本目です。</p><p>AWS Lambda（以下Lambda）は様々なユースケースで利用できる、なにかと便利で強力なサービスです。本ブログでも以下のようにLambdaに関するたくさんの記事が投稿されています。</p><ul><li><a href="/articles/20220510a/">Lambda Function URLs をGoでお試し。実行時間の上限（タイムアウト）やWeb API構築周りで気になること</a></li><li><a href="/articles/20220516a/">Lambda×Go並列処理で100万回APIを呼び出す</a></li><li><a href="/articles/20210914a/">LambdaをカスタムDockerランタイムで開発する方法</a></li></ul><p>私もLambdaが好きで、Lambdaの実行時間制約以内で終了する処理であれば、初手の候補の一つとしてLambdaを考えます。</p><p>そんなLambdaですが、予約済同時実行数<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>を1に制限して使っていたときに、初期化処理と初期化タイミングの考慮不足により、はまったことがありました。本記事ではLambdaの初期化処理についておさらいした後、はまったケースの事例や原因、対応した方法を紹介します。</p><h2 id="Lambdaのライフサイクルと初期化処理"><a href="#Lambdaのライフサイクルと初期化処理" class="headerlink" title="Lambdaのライフサイクルと初期化処理"></a>Lambdaのライフサイクルと初期化処理</h2><p>Lambda実行環境のライフサイクルは3つに分かれています。INITとINVOKEとSHUTDOWNです。</p><img src="/images/20220607a/Overview-Successful-Invokes.png" alt="Overview-Successful-Invokes.png" width="1200" height="225" loading="lazy"><p><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/lambda-runtime-environment.html">https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/lambda-runtime-environment.html</a> より</p><p>INITフェーズでは、関数インスタンス（Lambda関数が実行される環境のこと）作成やハンドラ関数外に実装されている初期化処理が行われます。たとえばGoの場合、AWSのサンプルにある <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> 以下のような <code>init()</code> の処理はINITフェーズで行われます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;log&quot;</span></span><br><span class="line">        <span class="string">&quot;github.com/aws/aws-lambda-go/lambda&quot;</span></span><br><span class="line">        <span class="string">&quot;github.com/aws/aws-sdk-go/aws/session&quot;</span></span><br><span class="line">        <span class="string">&quot;github.com/aws/aws-sdk-go/service/s3&quot;</span></span><br><span class="line">        <span class="string">&quot;github.com/aws/aws-sdk-go/aws&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> invokeCount = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> myObjects []*s3.Object</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">        svc := s3.New(session.New())</span><br><span class="line">        input := &amp;s3.ListObjectsV2Input&#123;</span><br><span class="line">                Bucket: aws.String(<span class="string">&quot;examplebucket&quot;</span>),</span><br><span class="line">        &#125;</span><br><span class="line">        result, _ := svc.ListObjectsV2(input)</span><br><span class="line">        myObjects = result.Contents</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LambdaHandler</span><span class="params">()</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">        invokeCount = invokeCount + <span class="number">1</span></span><br><span class="line">        log.Print(myObjects)</span><br><span class="line">        <span class="keyword">return</span> invokeCount, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        lambda.Start(LambdaHandler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>データベースとの接続などの、実行タイミングに依存しない処理を初期化処理として実施し、グローバル変数として再利用できるようにすることはパフォーマンスの観点から有効です。ハンドラの関数外に宣言されているグローバル変数は、Lambdaの関数インスタンスの一部として保存され、その後のリクエストで再利用されることがあるためです。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p><p>なお、上のサンプルで <code>LambdaHandler()</code> に該当するハンドラ関数内の処理はINVOKEフェーズで実行されます。</p><h2 id="はまりケース"><a href="#はまりケース" class="headerlink" title="はまりケース"></a>はまりケース</h2><p>はまりケースでもパフォーマンスを考慮して、TCP通信の確立をLambdaの初期化処理として実装していました。構成はざっくり以下のようなクライアントサーバモデルです。</p><ul><li>対向システム（サーバ）<ul><li>ある処理を受け付けるサーバがある。スケールアウトはしない</li><li>サーバ制約上、複数のクライアントから同時に接続することはできない</li></ul></li><li>Lambda（クライアント）<ul><li>対向システムとTCP通信して処理を行う</li><li>同期呼び出しLambdaである</li><li>Lambdaは複数起動しても通信確立できないため、予約済同時実行数を1としていた</li><li>TCP通信するための変数はグローバル変数として宣言し、初期化処理で通信を確立するようにしていた</li></ul></li></ul><p>対向システムの制約と（詳細は割愛しますが）非機能要件上、Lambdaの予約済同時実行数を1で絞ることで、Lambdaが2つ以上同時実行されないようにしている、という点がトリッキーな感じです。<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup></p><p>このとき、ロングランテスト<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>中に、稀に以下の問題となる事象を観測することがありました。</p><ul><li>あるタイミングで一定時間Lambdaと対向システムのTCP接続が確立できず、処理が失敗する</li><li>対向システムのサーバは電源断などは起きておらず、通常通り通信できる状態であった</li><li>通信できなくなるLambda起動の前に、別の関数インスタンスによるTCP通信の初期化処理を行っているログがあった</li><li>先に通信を確立した関数インスタンスではハンドラ関数内の処理は行われていない</li></ul><p>イメージ図は以下になります。</p><img src="/images/20220607a/before.png" alt="対向システムが同時接続数が1" width="872" height="462" loading="lazy"><p>ログから原因は以下のように推測しています。</p><ul><li>Lambdaの予約済同時実行数は1としていたものの、AWS側での関数インスタンスの作成が必ずしも1つとなるわけではない</li><li>なんらかの理由により、Lambdaの実行環境のライフサイクルを管理しているAWS側で関数インスタンスが作成された</li><li>関数インスタンス作成時にINITフェーズが起動し、意図しないタイミングでTCP通信の確立がなされたが、Lambdaのハンドラ関数は呼び出されなかった</li><li>先に作成されていた関数インスタンスでTCP接続が確立されていたため、後から作成した別の関数インスタンスではTCP通信を確立できず、実行に失敗した</li></ul><h2 id="対応"><a href="#対応" class="headerlink" title="対応"></a>対応</h2><p>本ケースではTCP通信の確立は初期化処理ではなく、Lambdaハンドラ関数内で行うようにしました。意図しないタイミングで初期化処理が行われ、対向システムと通信が確立されることを防ぐためです。</p><p>結果として、この対応以降は同様のTCP通信が確立できなくなる事象は発生しておらず、期待した動作を得ることができました。</p><img src="/images/20220607a/after.png" alt="毎回TCPコネクションをオープン・クローズする" width="872" height="462" loading="lazy"><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>予約済同時実行数を1で動かしていたケースで、Lambdaの初期化処理と初期化タイミングに関するはまった内容を紹介しました。予約済同時実行数を1とするケースはあまりないとは思いますが、このようにトリッキーな状況で動作する場合、特にLambdaの初期化処理と初期化タイミングに注意しましょう。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></p><p><a href="/articles/20220601a/">失敗談連載2022</a>の次は、久保さんの<a href="/articles/20220608a/">ユーザー要望で要件が増えてく〜アジャイル開発での落とし穴〜</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/golang-handler.html">https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/golang-handler.html</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;"><a href="https://aws.amazon.com/jp/lambda/faqs/">https://aws.amazon.com/jp/lambda/faqs/</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;"><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/configuration-concurrency.html">https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/configuration-concurrency.html</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="vertical-align: top; padding-right: 10px;">6.</span><span style="vertical-align: top;">その他、実行タイミングに依存するデータはLambdaのグローバル変数に保存するべきではない、というような一般的な注意ポイントもありますが、本記事では割愛します。詳細は <a href="https://aws.amazon.com/jp/blogs/news/operating-lambda-performance-optimization-part-2/">https://aws.amazon.com/jp/blogs/news/operating-lambda-performance-optimization-part-2/</a> などを参照ください。</span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="vertical-align: top; padding-right: 10px;">7.</span><span style="vertical-align: top;">本ケースでは仕方がなく予約済同時実行数を1と設定しましたが、本来であればこうならないように設計を工夫したいところです。</span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="vertical-align: top; padding-right: 10px;">8.</span><span style="vertical-align: top;"><a href="https://e-words.jp/w/%E3%83%AD%E3%83%B3%E3%82%B0%E3%83%A9%E3%83%B3%E3%83%86%E3%82%B9%E3%83%88.html">https://e-words.jp/w/ロングランテスト.html</a></span><a href="#fnref:8" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/Lambda/">Lambda</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      <category domain="https://future-architect.github.io/tags/TCP/">TCP</category>
      
      
      <comments>https://future-architect.github.io/articles/20220607a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>フューチャー夏のインターンシップ2022（Engineer Camp）の募集を開始しました！</title>
      <link>https://future-architect.github.io/articles/20220606b/</link>
      <guid>https://future-architect.github.io/articles/20220606b/</guid>
      <pubDate>Sun, 05 Jun 2022 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220606b/23855886_s.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;427&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220606b/23855886_s.jpg" alt="" width="640" height="427" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、真野です。</p><p>フューチャーのサマーインターン2022 Summer Engineer Camp🌞⛺🏃の募集が始まりました。</p><p>フューチャーでは夏のインターンシップは2つのコースがあります。</p><ul><li><strong>Engineer Camp</strong>: エンジニア向けのプログラミング主体のプロジェクト業務を体験するコース</li><li><strong>Project Camp</strong>: だれでも応募OKのプロジェクト業務を体験するコース</li></ul><p>それぞれに良いところがありますが、ここでは Engineer Camp のメニューについて紹介します。</p><p>Project Campに興味がある方は、下記の記事をご覧ください。</p><ul><li><a href="https://note.com/future_event/n/nb94191ebdd53">【対象：新卒】サマーインターン＜Project Camp＞｜採用イベント情報 | フューチャー株式会社｜note</a></li></ul><h2 id="実施概況"><a href="#実施概況" class="headerlink" title="実施概況"></a>実施概況</h2><ul><li>期間<ul><li>8月22日（月）～9月16日（金）</li><li>原則は土日祝日を除く、週5日/8時間の勤務。期間中、数日程度の欠席は調整可能</li><li>週3～4日でのインターンを希望される場合は理由などを伺い、要相談とさせてください</li></ul></li><li>報酬<ul><li>時給1500円/H。1日あたり12,000円（※8時間勤務を行った場合）</li><li>実際の勤務時間に基づいて支給いたします</li></ul></li><li>交通費<ul><li>規定に沿って来社時の交通費を支給します。<ul><li>※原則リモートですが、初日および最終日は出社いただく可能性がございます</li><li>※コースで出社が必要になる場合がございます。募集要項に記載をしておりますのでご確認ください</li><li>※来社が可能な状況だと判断した場合には、オフィスにて数回程度勤務する可能性があります</li></ul></li></ul></li></ul><h2 id="選考プロセス、選考スケジュール"><a href="#選考プロセス、選考スケジュール" class="headerlink" title="選考プロセス、選考スケジュール"></a>選考プロセス、選考スケジュール</h2><p>次の流れで選考を行います。</p><ol><li>マイページ登録（※まずはこちらをお願いします！）<ul><li>登録は <strong><a href="https://job.axol.jp/jn/s/future_24/entry/">こちら</a></strong> から</li></ul></li><li>エントリーシート提出 &amp; プログラミングテスト<ul><li>テストは全5問。各問1~2時間程度の見込み</li><li><strong>締切: 2022年6月26日（日）23時59分まで</strong></li></ul></li><li>面接<ul><li>リモートにて1回。1h程度を想定</li></ul></li></ol><h2 id="Engineer-Campのポイント"><a href="#Engineer-Campのポイント" class="headerlink" title="Engineer Campのポイント"></a>Engineer Campのポイント</h2><p>フューチャーのインターンシップをお勧めする理由を3つ上げさせてください。</p><ul><li><strong>実際の業務にメンバーとして関わることができる</strong><ul><li>インターン用のタスクをしてもらうのではなく、実プロジェクトにアサインされ、リアル業務を行えます。個人では扱うことのできない技術にも触れられます。また、チームで開発する際の苦労や工夫を知ることもできるのは大きいと思います。当然、社会人になってエンジニアとしてはたらくイメージを持つにはうってつけです</li></ul></li><li><strong>フューチャーの技術部隊のメンバーがメンターのためサポートが手厚い</strong><ul><li>実プロジェクトのアサインと聞いて不安に思われた方も多いと思いますが安心してください。フューチャーの各技術分野のスペシャリストがメンターとしてサポートします。社員との距離感も近く、フラットな社風なので、気軽に質問をしやすい環境です。フューチャーの技術力の高さを体感いただきつつ、ご自身のスキルも伸ばしてください。Slackをフル活用しているので疑問を呟くと、きっとすぐに先輩社員がアドバイスしてくれます</li></ul></li><li><strong>4週間のプログラムで成長を実感できる</strong><ul><li>フューチャーの仕事を体験できるように4週間の期間を設けました。長いよ！と思われる方もいるかもしれませんが、実は2週間のプログラムを組んでいたとき、「終わってみれば短すぎた。慣れてきたくらいで終了なのがもったいない。もう少し期間があればもっと深く入ることができるのに！」という声を多数聞きました。その反省を活かし、より深く・より面白く・より満足できるように期間を調整して4週間になりました</li></ul></li></ul><p>他にも受け入れ先プロジェクトごとに、様々な工夫をしています。</p><h2 id="Engineer-Camp-のコース紹介"><a href="#Engineer-Camp-のコース紹介" class="headerlink" title="Engineer Camp のコース紹介"></a>Engineer Camp のコース紹介</h2><p>Engineer Campではバラエティ豊かな14コースを用意しています。それぞれに特徴があり、使う技術も様々です。すべてのコースに共通するスキル要件は3つありますますが、非常にベーシックな内容です。</p><ul><li>1つ以上のプログラミング言語での開発経験（学校、プライベート問わず）</li><li>Slackなどのチャットを用いた非同期コミュニケーション</li><li>主体的にコミュニケーションを取りながら進めていただける方</li></ul><p>こに加えて、各受け入れプロジェクトごとに内容と、応募条件をまとめました。ご自身の強みを活かせるコースや興味のあるコースがあるかと思います。</p><div class="scroll"><table><thead><tr><th>No</th><th>タイトル</th><th>説明</th><th>応募条件（必須）</th></tr></thead><tbody><tr><td>1</td><td>サブスクサービスのWebアプリ開発</td><td>BtoBサブスクリプションモデル最前線！メディア業界を支えるWebアプリケーションを開発する</td><td>・フロントエンド開発経験</td></tr><tr><td>2</td><td>RustでSQLフォーマッタ開発</td><td>大規模システム開発のソースコード品質向上を目的に、SQLのフォーマッタをRustで開発する</td><td>・Git利用経験<br>・構文解析の知識<br>  (AST/lexer/parser/printer等の用語がわかること)<br>・SQL構文の理解（初歩レベルで良い）</td></tr><tr><td>3</td><td>社内設計開発ツールのデータ分析</td><td>設計開発ツールのユーザ行動データを分析し、プロジェクト品質向上のためのデータ可視化を実現する</td><td>・Git利用経験<br>・Python・R・SQLでのデータ解析経験<br>・未知のデータモデルに対する理解力<br>（不明点を対話を通じて把握する力）</td></tr><tr><td>4</td><td>鉄道業界の to C 向け Web アプリケーション開発</td><td>沿線住民を対象としたサービス体験型プラットフォームの機能拡張を担当する(仕様を検討する部分から、フロントエンド、バックエンド開発まで幅広く経験できます！)</td><td>・Git利用経験<br>・フロントエンド開発経験または<br>  RDBを用いた静的言語でのバックエンド開発経験</td></tr><tr><td>5</td><td>メディアサービスのID連携プラットフォーム構築</td><td>クラウド構築から開発まで、近年需要の増加しているID連携プラットフォームの構築に携わる</td><td>・Git利用経験<br>・AWS利用経験</td></tr><tr><td>6</td><td>大手メディアグループの最先端データ分析基盤の構築</td><td>最新アーキテクチャによるデータ分析基盤を構築する</td><td>・SQL利用経験<br>・AWS or GCP利用経験</td></tr><tr><td>7</td><td>市場規模7000億超の外食業における、顧客全社DX施策の仮説立てとそれに向けたシステムとデータ分析</td><td>顧客の業務・システム・データの分析をおこない、それを取り巻くマーケット調査を踏まえ今後進むべき施策を策定する</td><td>・SQL構文の理解（結合・絞り込み・ソート等）<br>・パワーポイント等での資料作成経験</td></tr><tr><td>8</td><td>不動産会社向け新規サービスの検討・プロト開発</td><td>要件定義からリリースまでを一貫して体験する (提案いただいたアイデアが新規サービスとして採用される可能性があります！)</td><td>・フロントエンド開発経験</td></tr><tr><td>9</td><td>ユーザーと企業をつなぐ物流コールセンターを支える仕組み・システム化考案</td><td>あらたなコールセンターの企画立案を体験する</td><td>・間違ってて全然いいので思ったことを発言できること<br>・IPAの<a href="https://www.ipa.go.jp/files/000004568.pdf">この資料</a>を読了すること</td></tr><tr><td>10</td><td>プロパンガス配送計画の最適化に向けた数値データ解析</td><td>超肉体労働なプロパンガス配送員のしごとをDXで効率化する。</td><td>・Git利用経験<br>・Go言語に興味がある方<br>・バックエンド開発に興味のある方</td></tr><tr><td>11</td><td>プロパンガス設備点検の管理アプリケーション開発</td><td>安全第一なプロパンガス保安点検員のしごとをDXで最適化する</td><td>・Git利用経験<br>・Go言語に興味がある方<br>・<strong>大崎オフィスへ出社可能な方</strong></td></tr><tr><td>12</td><td>機械学習プラットフォーム開発</td><td>エンジニアリング力で機械学習モデル開発を加速する</td><td>・基本的なLinuxコマンドの操作経験<br>・Linuxサーバの構築・運用経験（プライベート可）</td></tr><tr><td>13</td><td>画像認識AIの開発</td><td>画像認識AIの社会実装を実現する</td><td>・Pythonでの画像処理の経験<br>・TensorflowやPytorch等を用いたNN構築経験<br>・論文を読んでNNなどの実装ができること<br>・基本的なLinuxコマンドの操作経験</td></tr><tr><td>14</td><td>ヘルスケアアプリの開発</td><td>コンシューマ向けの新規ヘルスケアサービスをつくる</td><td>・フロントエンド、バックエンド開発経験</td></tr></tbody></table></div><p>続けてコースごとの詳細です。 <code>応募条件(あれば歓迎）</code> を見れば、大体どのような技術で開発を行うかが分かると思います。</p><h3 id="1-サブスクサービスのWebアプリ開発"><a href="#1-サブスクサービスのWebアプリ開発" class="headerlink" title="1. サブスクサービスのWebアプリ開発"></a>1. サブスクサービスのWebアプリ開発</h3><p>メディア業界の業務を支えるWebアプリケーションサービスの開発を通じて、サブスクリプション型サービスにおけるチーム開発を経験します。チームで開発するために必要なスキルや、大規模システムのアーキテクチャを知る、実践レベルのプログラミングスキルが身につきます。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・フロントエンド開発経験<br>（JavaScript/TypeScriptを用いたWeb画面の開発経験）</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・Git利用経験<br>・Vue.js開発経験</td></tr><tr><td>募集人数</td><td>2名</td></tr><tr><td>こんな人にオススメ</td><td>・メディア業界を支える技術に興味がある人<br>・フューチャー自身が手掛けるSaaSサービスの裏側に興味がある人</td></tr></tbody></table></div><h3 id="2-RustでSQLフォーマッタ開発"><a href="#2-RustでSQLフォーマッタ開発" class="headerlink" title="2. RustでSQLフォーマッタ開発"></a>2. RustでSQLフォーマッタ開発</h3><p>RustでSQLフォーマッタを作るためRust製パーサ・ジェネレータ/パーサの調査・検証、あるいはパーサを自作していただきます※インターンシップ参加者のレベルに合わせて内容レベル調整を行う想定です。</p><p>大規模エンタープライズシステム開発ではデータモデルの複雑さからSQLは欠かせません。※フューチャーではそれらを支えるためSQLコーディング規約やSQL実行ライブラリ等をOSSとして公開しています。</p><ol><li><a href="https://future-architect.github.io/coding-standards/documents/forSQL/SQL%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E8%A6%8F%E7%B4%84%EF%BC%88Oracle%EF%BC%89.html">SQLコーディング規約 | Future Enterprise Coding Standards</a></li><li><a href="https://future-architect.github.io/uroborosql-doc/">uroboroSQL</a></li><li><a href="https://github.com/future-architect/uroboroSQL-formatter">future-architect/uroboroSQL-formatter: Beautiful SQL Formatter</a></li></ol><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Git利用経験<br>・構文解析の知識(AST/lexer/parser/printer等の用語がわかること)<br>・SQL構文の理解（初歩レベルで良い）</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・Git利用経験<br>・構文解析の経験(自作 or ライブラリ問わず)<br>・Rust利用経験</td></tr><tr><td>募集人数</td><td>1-2名</td></tr><tr><td>こんな人にオススメ</td><td>・構文解析に興味がある方<br>・チームの品質/生産性を上げる手法に興味がある方・<br>・Rustにチャレンジしたい方</td></tr></tbody></table></div><h3 id="3-社内設計開発ツールのデータ分析"><a href="#3-社内設計開発ツールのデータ分析" class="headerlink" title="3. 社内設計開発ツールのデータ分析"></a>3. 社内設計開発ツールのデータ分析</h3><p>フューチャーでは大規模システムの設計品質向上のために設計開発ツールを開発・提供しています。利用プロジェクト増加に伴いデータが蓄積されてきたため、マネージャー向けダッシュボードを検討しています。本コースでは蓄積した利用者の行動データを分析し、プロジェクト運営に役立つビジュアライゼーションの検討・実装をテーマにしています。</p><p>プロジェクト品質をあげるようなインテリジェントなリスク検知、統計値の提供を想定していますが、ゼロベースでのアイデアを期待しています。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Git利用経験<br>・Python・R・SQLでのデータ解析経験<br>・未知のデータモデルに対する理解力（不明点を対話を通じて把握する力）</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・PowerBI等のビジュアライゼーション経験<br>・SQLでのデータ解析経験(集合関数、分析関数レベル)</td></tr><tr><td>募集人数</td><td>1-2名</td></tr><tr><td>こんな人にオススメ</td><td>・ビジュアライズ手法に興味がある方<br>・行動分析を行いたい方</td></tr></tbody></table></div><h3 id="4-鉄道業界の-to-C-向け-Web-アプリケーション開発"><a href="#4-鉄道業界の-to-C-向け-Web-アプリケーション開発" class="headerlink" title="4. 鉄道業界の to C 向け Web アプリケーション開発"></a>4. 鉄道業界の to C 向け Web アプリケーション開発</h3><p>実社会に公開しているサービスの改善を実施します。正解のない中で、より良いサービス、より良いサービス運用のために出来ることを考え、自走する力が身につきます。</p><p>技術領域はモダン、社員は若手中心、開発・コミュニケーション速度が求められる環境で、爆発的な成長を促進します。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Git利用経験<br>・フロントエンド開発経験または<br>  RDBを用いた静的言語でのバックエンド開発経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・Vue.js, Goの利用経験<br>・AWS利用経験</td></tr><tr><td>募集人数</td><td>2-4名</td></tr><tr><td>こんな人にオススメ</td><td>・本番稼働しているtoC向けのサービス開発に触れたい方<br>・フロントエンド～バックエンド～インフラまで、幅広く技術領域を体験したい方</td></tr></tbody></table></div><h3 id="5-メディアサービスのID連携プラットフォーム構築"><a href="#5-メディアサービスのID連携プラットフォーム構築" class="headerlink" title="5. メディアサービスのID連携プラットフォーム構築"></a>5. メディアサービスのID連携プラットフォーム構築</h3><p>複数サービスを展開している企業様のサービス間のIDや情報連携を実現するプラットフォームの構築がメインとなります。同時にエンドユーザーが直接利用するサービスも構築しますので、クラウドインフラだけでなく、UIやアプリケーションの開発まで幅広い領域を経験したい方は是非ご応募ください。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Git利用経験<br>・AWS利用経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・Vue.js, Goの利用経験<br>・SQL利用経験<br>・CI/CD環境の構築、運用経験</td></tr><tr><td>募集人数</td><td>1名</td></tr><tr><td>こんな人にオススメ</td><td>・セキュリティと使い勝手のバランスを取ることに興味がある方<br>・フロントエンド～バックエンド～インフラまで、幅広く技術領域を体験したい方</td></tr></tbody></table></div><h3 id="6-大手メディアグループの最先端データ分析基盤の構築"><a href="#6-大手メディアグループの最先端データ分析基盤の構築" class="headerlink" title="6. 大手メディアグループの最先端データ分析基盤の構築"></a>6. 大手メディアグループの最先端データ分析基盤の構築</h3><p>誰もが知っている某グループ企業のデータ分析基盤を構築しています。通常のWebアプリケーションとは一風違った考え方、開発手法となるので、特にデータ分析分野にご興味がある方におすすめです。</p><p>また今年がファーストリリースとなるので、技術面だけでなく、新規サービスの立ち上げに際するリアルな空気を感じていただけると考えています。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・SQL利用経験<br>・AWS or GCP利用経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・GASの開発経験</td></tr><tr><td>募集人数</td><td>1名</td></tr><tr><td>こんな人にオススメ</td><td>・データ分析に興味がある方<br>・データ基盤の構築に興味がある方</td></tr></tbody></table></div><h3 id="7-市場規模7000億超の外食業における、顧客全社DX施策の仮説立てとそれに向けたシステムとデータ分析"><a href="#7-市場規模7000億超の外食業における、顧客全社DX施策の仮説立てとそれに向けたシステムとデータ分析" class="headerlink" title="7. 市場規模7000億超の外食業における、顧客全社DX施策の仮説立てとそれに向けたシステムとデータ分析"></a>7. 市場規模7000億超の外食業における、顧客全社DX施策の仮説立てとそれに向けたシステムとデータ分析</h3><p>誰もが好きで行ったことのある外食業のお客様の、全社DX計画を策定します。サービス開発やアプリケーション構築の大前段である、一番最初のステップを経験していただきます。顧客の保有しているサービス／システム／データを整理し、分析し、仮説を立て、今後進むべき方向性を策定しお客様へ提案を目指します。具体的には、以下のいずれか（または複数）を実施いただきます。</p><ol><li><strong>全社DX計画策定支援（非開発）</strong><ul><li>顧客の業務／システムを整理し、現サービス／システムの整理とあるべきサービス像の仮説立て、簡易測定をおこないます。</li></ul></li><li><strong>データ分析・可視化・ダッシュボード作成（含開発）</strong><ul><li>顧客のPOSデータ／行動データを受領し、分析し、潜在課題・顕在課題を立て打ち手を考えます。</li></ul></li><li><strong>顧客へのプレゼンテーション</strong><ul><li>1,2を踏まえ、完成度によっては顧客への直接提案・ディスカッションの場を設定します。</li></ul></li></ol><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・SQL構文の理解（結合・絞り込み・ソート等）<br>・パワーポイント等での資料作成経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・SQL利用経験（分析関数）<br>・Python・R・SQLでのデータ解析経験<br>・データの可視化（BIダッシュボード・グラフ作成）</td></tr><tr><td>募集人数</td><td>1-2名</td></tr><tr><td>こんな人にオススメ</td><td>・サービス開発のド頭から経験したい方<br>・プロダクト開発がどう始まるか知りたい方</td></tr></tbody></table></div><h3 id="8-不動産会社向け新規サービスの検討・プロト開発"><a href="#8-不動産会社向け新規サービスの検討・プロト開発" class="headerlink" title="8. 不動産会社向け新規サービスの検討・プロト開発"></a>8. 不動産会社向け新規サービスの検討・プロト開発</h3><p>私たちは、日本の防災力・事業継続力を底上げする新規事業の全体推進支援を行っています。その一環として、フューチャー内部も新規サービスの検討を進めており、インターンシップでは下記2つのどちらかを実施していただきたいと考えています。</p><ol><li><strong>新規サービスの機能提案・開発</strong><ul><li>現在想定している新規サービスに必要な機能を提案し、実際に開発まで行っていただきます。</li></ul></li><li><strong>新規サービスで未検討のアイディアを深堀り、プロト作成</strong><ul><li>新規サービスのアイディアの深掘りと必要な機能の提案を行ったのち、実際に開発まで行っていただきます。</li></ul></li></ol><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・フロントエンド開発経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・新規サービス開発に興味がある方<br>・Vue.js利用経験</td></tr><tr><td>募集人数</td><td>1名</td></tr><tr><td>こんな人にオススメ</td><td>・サービス開発に興味がある方<br>・プロダクトマネージャーに興味がある方</td></tr></tbody></table></div><h3 id="9-ユーザーと企業をつなぐ物流コールセンターを支える仕組み・システム化考案"><a href="#9-ユーザーと企業をつなぐ物流コールセンターを支える仕組み・システム化考案" class="headerlink" title="9. ユーザーと企業をつなぐ物流コールセンターを支える仕組み・システム化考案"></a>9. ユーザーと企業をつなぐ物流コールセンターを支える仕組み・システム化考案</h3><p>実現したい価値から逆算し、それを成し遂げる業務・要素を考え、システムの形につながる。非機能要件を抽出・立案し、導出した非機能要件よりインフラの特定部分の構成立案を行います。システム企画～実装に至るまでの流れ、意思決定プロセスの掴み方・泳ぎ方を知ると共にシステムアーキテクチャ構想の１タスクと、顧客価値との関連を体験し、Futureで自分が働くことの意義も感じて貰えます。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・間違ってて全然いいので思ったことを発言できること<br>・IPAの<a href="https://www.ipa.go.jp/files/000004568.pdf">この資料</a>を読了すること</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・企画から実装までに興味がある方<br>・非機能要件の作り込みに興味がある方</td></tr><tr><td>募集人数</td><td>2名</td></tr><tr><td>こんな人にオススメ</td><td>・経営とITの両方どりしたい方<br>・ミッションクリティカルなシステムの作り方を知りたい方<br>・チームでみんなの意見を吸い上げ洗練させていく過程に興味がある方</td></tr></tbody></table></div><h3 id="10-プロパンガス配送計画の最適化に向けた数値データ解析"><a href="#10-プロパンガス配送計画の最適化に向けた数値データ解析" class="headerlink" title="10. プロパンガス配送計画の最適化に向けた数値データ解析"></a>10. プロパンガス配送計画の最適化に向けた数値データ解析</h3><p>大手プロパンガス供給会社の配送員の仕事の効率化に取り組みます。現行システムで課題となっていた交換頻度や変動の予測精度を改善するのが我々のミッションです。新たなIoTデバイスを用いたビッグデータ解析を行うことにより、最適な配送計画を立案できるようなDX化にチャレンジしてもらいます。ビッグデータ解析やIoTに興味のある方におすすめです。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Git利用経験<br>・Go言語に興味がある方<br>・バックエンド開発に興味のある方</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・AWS利用経験<br>・Dockerを用いた開発経験<br>・基本的なLinuxコマンドの操作経験</td></tr><tr><td>募集人数</td><td>1名</td></tr><tr><td>こんな人にオススメ</td><td>・何がDXで何が普通のITか違いを知りたい方<br>・Go言語でバッチ処理を書きたい方</td></tr></tbody></table></div><p>プロパンガス業界を知らない方（都市ガスユーザーの方）も歓迎です。ややマニアックかもしれませんが、業界記事について知りたい方は<a href="https://future-architect.github.io/articles/20220519a/">こちら</a>も参照ください。</p><h3 id="11-プロパンガス設備点検の管理アプリケーション開発"><a href="#11-プロパンガス設備点検の管理アプリケーション開発" class="headerlink" title="11. プロパンガス設備点検の管理アプリケーション開発"></a>11. プロパンガス設備点検の管理アプリケーション開発</h3><p>大手プロパンガス供給会社の保安点検員の仕事を効率化する、アプリケーションの開発に取り組みます。ガスの安全性担保というミッションクリティカルなシステムをより確実に、ミスなく行うためのスマホアプリの開発に挑戦していただきます。ガス業界のDX化を担うプロジェクトの一員として一緒に改革に取り組みましょう！</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Git利用経験<br>・Go言語に興味がある方<br>・大崎オフィスへ出社可能な方</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・AWS利用経験<br>・Docker利用経験<br>・モバイルアプリ開発経験</td></tr><tr><td>募集人数</td><td>1名</td></tr><tr><td>こんな人にオススメ</td><td>・Flutterでスマホアプリ開発をしたい方</td></tr></tbody></table></div><p>《特記事項》</p><ul><li>本コースでは期間中に大崎オフィスへの出社をお願いする予定です</li><li>遠方の方については一部期間もしくは全期間東京に滞在いただく可能性がありますのでご理解の上、ご応募をお願いします（宿泊費、交通費は社内規定に基づき支給）</li></ul><h3 id="12-機械学習プラットフォーム開発"><a href="#12-機械学習プラットフォーム開発" class="headerlink" title="12. 機械学習プラットフォーム開発"></a>12. 機械学習プラットフォーム開発</h3><p>現状オンプレで稼働している、AIチームが利用する機械学習プラットフォームをクラウドに移行（・併用）するため、クラウド環境上に機械学習モデル・システム開発のための環境を構築します。データ基盤、分析環境、学習環境、実験管理、CI/CD、MLパイプライン、などから範囲を決めて実施します。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・基本的なLinuxコマンドの操作経験<br>・Linuxサーバの構築・運用経験（プライベート可）</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・Git利用経験<br>・AWS（or GCP）利用経験<br>・Docker利用経験<br>・機械学習モデルの実装経験<br>・Kaggle等のコンペティション参加経験</td></tr><tr><td>募集人数</td><td>1-2名</td></tr><tr><td>こんな人にオススメ</td><td>・オンプレミス環境を触ってみたい方<br>・MLOpsに興味がある方</td></tr></tbody></table></div><h3 id="13-画像認識AIの開発"><a href="#13-画像認識AIの開発" class="headerlink" title="13. 画像認識AIの開発"></a>13. 画像認識AIの開発</h3><p>実案件のデータを対象に、画像分類・物体検出・セグメンテーション・画像生成等幅広い画像系のAI技術を駆使して、AIを活用した顧客の業務削減に取り組みます。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Pythonでの画像処理の経験<br>・TensorflowやPytorch等を用いたNN構築経験<br>・論文を読んでNNなどの実装ができること<br>・基本的なLinuxコマンドの操作経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・Git利用経験<br>・Kaggle等のコンペティション参加経験<br>・Docker利用経験</td></tr><tr><td>募集人数</td><td>1名</td></tr><tr><td>こんな人にオススメ</td><td>・とにかく画像処理の実案件に関わりたい方<br></td></tr></tbody></table></div><h3 id="14-ヘルスケアアプリの開発"><a href="#14-ヘルスケアアプリの開発" class="headerlink" title="14. ヘルスケアアプリの開発"></a>14. ヘルスケアアプリの開発</h3><p><a href="https://note.future.co.jp/n/n8b57d4bf4604">ビジネスイノベーション事業</a>でヘルスケアサービス開発を行います。展開する生活者・患者やその家族といったtoC向けのアプリを開発。看護や介護、あるいは健康維持が必要な高齢者の状態をモニタリングできて安心を提供するための仕組みづくりです。ウェアラブルデバイス等を有効活用します。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>フロントエンド、バックエンド開発経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>AWS利用経験</td></tr><tr><td>募集人数</td><td>2名</td></tr><tr><td>こんな人にオススメ</td><td>・ウェアラブルアプリの開発に携わりたい方<br>・新規事業に興味がある方<br></td></tr></tbody></table></div><h2 id="2021年の参加者の声"><a href="#2021年の参加者の声" class="headerlink" title="2021年の参加者の声"></a>2021年の参加者の声</h2><p>インターンシップに参加していただいた方に、体験記を寄稿いただいていますので紹介します。概ね、「リモートワークであっても密度が濃い」、「普段の個人開発ではほとんど発生しない、コミュニケーションの部分の学びがある」、「フューチャーのブログ文化に触れることができた」、「参加者同士の交流が貴重」、「タスクの割り当てが親切で、成長を実感できた」などと評価いただいています（私がこう抜粋するとどうしても怪しいので…、ぜひインターン生の記事を読んでいただけるとです）。</p><ul><li>2021年<ul><li><a href="https://future-architect.github.io/articles/20211019a/">Engineer Camp: Python の AST モジュールを使ってクラス構造を可視化する </a></li><li><a href="https://future-architect.github.io/articles/20211018a/">Engineer Camp: スマートファクトリーでの学び </a></li><li><a href="https://future-architect.github.io/articles/20210922a/">Engineer Camp: IoTプラットフォームに参加しました！</a></li></ul></li><li>2020年<ul><li><a href="https://future-architect.github.io/articles/20200921/">フューチャーのインターンEngineer Camp2020（モビリティサービスプラットフォーム）に参加した話</a></li><li><a href="https://future-architect.github.io/articles/20200920/">Engineer Camp 2020（スマートファクトリー） 参加記 </a></li><li><a href="https://future-architect.github.io/articles/20200919/">Engineer Camp2020でSQLフォーマッタを開発しました</a></li><li><a href="https://future-architect.github.io/articles/20200913/">フューチャーの2020 夏季インターンに参加してみた</a></li></ul></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>わたちたちフューチャー社員一同、良いインターンになるよう工夫を凝らしたいと思っております。</p><p>興味がある学生の皆さん。なにはともあれマイページにエントリーをお願いします！</p><p>たくさんのご応募をお待ちしています！　最後まで読んでいただいてありがとうございました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/">インターン</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B32022/">インターン2022</category>
      
      
      <comments>https://future-architect.github.io/articles/20220606b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RDSの自動再起動によるインフラコストの悲劇</title>
      <link>https://future-architect.github.io/articles/20220606a/</link>
      <guid>https://future-architect.github.io/articles/20220606a/</guid>
      <pubDate>Sun, 05 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220606a/catch-g298cbbc5a_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;435&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220606a/catch-g298cbbc5a_640.jpg" alt="" width="640" height="435"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニット所属、金欠コンサルタントの藤井です。<br>最近買ってよかったものは玄関に設置できる宅配ボックスです。</p><p><a href="/articles/20220601a/">失敗談連載2022</a> 4日目のこの記事では、クラウドインフラにはつきものの、インフラコストについての失敗談をご紹介します。<br>ぜひご一読いただき、私の屍を乗り越えていく事で、悲劇の発生を未然に防いでいただければと思います。<br>（一部記事にするにあたり、経緯を改変している部分があります。ご容赦ください）</p><h2 id="RDSについて"><a href="#RDSについて" class="headerlink" title="RDSについて"></a>RDSについて</h2><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>皆さん、RDSはお好きでしょうか。私は<strong>基本的に</strong>好きです。Amazon <strong>R</strong>elational <strong>D</strong>atabase <strong>S</strong>ervice、略してRDS。その名の通りAWSが提供する、RDBを運用するためのマネージド型サービスです。</p><p>高い可用性・耐久性・スケーラビリティを誇るサービスであるため、サービスの管理者はDBサーバそのものをほとんど意識をすることなくサービスを提供することが可能となります。</p><p>そんなRDSですが、二つだけどうしても私が好きになれない点があるので、紹介させてください。</p><h3 id="私が好きになれない点"><a href="#私が好きになれない点" class="headerlink" title="私が好きになれない点"></a>私が好きになれない点</h3><h4 id="単純に利用料金が高い"><a href="#単純に利用料金が高い" class="headerlink" title="単純に利用料金が高い"></a>単純に利用料金が高い</h4><p>前述のとおり、RDSはDBサーバの構築・運用において非常に便利なサービスを提供してくれます。EC2へのRDBMSのインストールから、ストレージ管理、障害時のフェイルオーバー、等と言った作業を管理者が実施する場合、人的コストもかなりかかってしまいます。</p><p>そのため、ある程度利用料金が高くなるのは仕方がないことではあります。</p><p>ご参考までに2022年5月時点での東京リージョンにおけるRDS<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>（シングルAZ・Aurora PostgreSQL互換エディション・オンデマンドインスタンス）とEC2<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>（オンデマンド・OSはLinux）の料金比較をいくつかのインスタンスタイプについて以下に掲載します。</p><div class="scroll"><table><thead><tr><th>インスタンスタイプ</th><th>RDSの時間あたりの料金 (USD)</th><th>EC2の時間あたりの料金 (USD)</th><th>RDSコスト/EC2コスト</th></tr></thead><tbody><tr><td>t4g.medium</td><td>0.113</td><td>0.0432</td><td>2.62</td></tr><tr><td>t4g.large</td><td>0.225</td><td>0.0864</td><td>2.60</td></tr><tr><td>t3.medium</td><td>0.125</td><td>0.0544</td><td>2.30</td></tr><tr><td>t3.large</td><td>0.250</td><td>0.1088</td><td>2.30</td></tr><tr><td>r6g.large</td><td>0.313</td><td>0.1216</td><td>2.57</td></tr><tr><td>r6g.xlarge</td><td>0.627</td><td>0.2432</td><td>2.58</td></tr><tr><td>r5.large</td><td>0.350</td><td>0.152</td><td>2.30</td></tr><tr><td>r5.xlarge</td><td>0.700</td><td>0.304</td><td>2.30</td></tr></tbody></table></div><p>だいたいRDSはEC2の2～3倍のコストがかかるようです。（ストレージ・通信等は除く）<br>もちろんリザーブドインスタンスを用いたり、<strong>不要な時間帯は停止する</strong>等で節約することは可能です。<br>基本的な利用料金が高いからこそ、不要な課金をしないよう管理する必要があります。</p><h4 id="7日間しか停止できない"><a href="#7日間しか停止できない" class="headerlink" title="7日間しか停止できない"></a>7日間しか停止できない</h4><p><strong>罠です</strong>。記載の通り、RDSは7日間しか停止することができません。<br>例えばこの記事が公開される2022年6月6日にRDSを停止した場合、7日後の6月13日に自動的に再起動されます。<br>もちろん停止時には以下のように停止可能期間について案内されるため、管理者はこの仕様について把握することができます。<br><img src="/images/20220606a/image.png" alt="image.png" width="529" height="214" loading="lazy"></p><p>この仕様について、公式ドキュメント<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>には</p><blockquote><p>DB インスタンスは最大 7 日間停止できます。7 日後に DB インスタンスを手動で起動しなかった場合、DB インスタンスは自動的に起動されるため、必要なメンテナンス更新が遅れることはありません。</p></blockquote><p>と記載されていますが、個人的には「最大7日間しか停止できません」と書くべきだと思います。7日後に自動で再起動される理由としては、ハードウェアやRDBMS等のメンテナンスにインスタンスが遅れないようにするため、とのことです。</p><p>2022年5月時点でRDSを7日間以上停止し続ける方法は存在せず、Lambda等で定期的に再起動・停止をスケジューリングする<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>等の方法でしか長期的なRDSの停止はできないようです。</p><h2 id="失敗談"><a href="#失敗談" class="headerlink" title="失敗談"></a>失敗談</h2><p>ここまでの記載内容で私が何をやらかしたか、予想が付いている方も居られるかとは思います。</p><p>検証用に立ち上げ、不要になったため停止したDBが7日後に自動で再起動・利用料金が発生してしまったのです。</p><p>しかも必要以上に大きなインスタンスサイズで構築してしまっていたため、発生した余分コストは高額でした。</p><h3 id="悲劇の発生経緯"><a href="#悲劇の発生経緯" class="headerlink" title="悲劇の発生経緯"></a>悲劇の発生経緯</h3><ol><li>EC2との接続検証用にRDSのインスタンスを1つ（すぐ落とす想定だったため、インスタンスサイズはxlargeを選択）立ち上げ、無事検証を終えました。</li><li>検証が完了したため、このRDSインスタンスは不要となりました。しかし追加で検証が必要になることが予想されるため、ここではインスタンスの削除ではなく停止を選択しました。</li><li>結果として、追加検証は不要であったため、結局インスタンスが再利用されることはありませんでした。</li><li>停止から7日後、RDSは自動でインスタンスを再起動しました。<ul><li>このとき、私の頭には既にこのインスタンスの記憶はありません。</li><li>RDS周りの検証は完了しているため、RDSのマネジメントコンソールにアクセスする理由も無いので、インスタンスの再起動に気づくことはありません。</li></ul></li><li>各種構築が完了し、最後に念のため請求書を確認したところ、想定外の請求が発生している事に気づきます。<ul><li>明細を見ると、よくわからないRDSインスタンスについての請求が・・・</li></ul></li></ol><p>おおよそ上記のような流れで悲劇は発生・検知されました。<br>検知後の対処にも2やらかしぐらいあるのですが、こちらは技術話では無いのでここでは割愛します。</p><h3 id="どうすればよかったのか"><a href="#どうすればよかったのか" class="headerlink" title="どうすればよかったのか"></a>どうすればよかったのか</h3><p>ここまで失敗談について記載しましたが、ではどうすればこの悲劇は回避できたのでしょうか。<br>この悲劇に限らず、大体の事象において以下2つの対応が重要と考えます。</p><ul><li>根本原因を取り除き、悲劇が発生しないようにする</li><li>事象を早期検知し、悲劇を発展させない</li></ul><h4 id="根本原因を取り除き、悲劇が発生しないようにする"><a href="#根本原因を取り除き、悲劇が発生しないようにする" class="headerlink" title="根本原因を取り除き、悲劇が発生しないようにする"></a>根本原因を取り除き、悲劇が発生しないようにする</h4><p>悲劇が発生しないよう、根本原因を排除することができれば悲しむ人は生まれません。</p><p>今回の悲劇に関しては、これはとても簡単で、<strong>RDSは停止せず、削除</strong>すればよいです。後で再利用することが予想される場合は、バックアップを取得した上でインスタンスはためらいなく削除してしまいましょう。</p><p>停止→再起動に比べるとバックアップからの復元の方が多少手間はかかりますが、確実に勝手に再起動されることはありません。バックアップもストレージ分のコストはかかりますが、Auroraの場合月額 0.023USD/GB<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup> と軽微です。</p><p>また、これはRDSに限らずですが、そもそもインスタンスサイズは必要最小限に設定しましょう。</p><h4 id="事象を早期検知し、悲劇を発展させない"><a href="#事象を早期検知し、悲劇を発展させない" class="headerlink" title="事象を早期検知し、悲劇を発展させない"></a>事象を早期検知し、悲劇を発展させない</h4><p>万一悲劇が発生してしまっても、早期に検知・食い止めることが出来れば最小限の悲しみに抑えられます。</p><p>一方検知が遅れれば利用料金と共に悲劇は発展し続けます。</p><p>詳細はこの記事には記載しません（いつか別記事として書くかも）が、早期検知には以下のような対策が考えられます。</p><ul><li><strong>システムで検知</strong><ul><li>AWS Budget、AWSコスト異常検出を適切に設定し、想定外の請求が発生した際に検知・通知する</li><li>停止中のRDSがあれば検知・再起動までの期間を通知するLambdaを作成・定期実行する</li></ul></li><li><strong>運用で検知（検知システムの構築ができない場合）</strong><ul><li>定期的（日次・週次など）に請求額を確認する。可能であればリソース毎の請求内容も確認する</li><li>定期的（日次・週次など）にRDSマネジメントコンソールを確認し、想定外インスタンスが存在しないことを確認する</li></ul></li></ul><p>なお、利用サービスに種類や検証などの用途に問わず、利用金額の通知周りについては、AWSアカウントを作成の初期段階で常に設定を行っておくとよいでしょう。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>私の失敗談は以上です。</p><p>インフラコストにまつわる悲劇は様々な原因で起こり得るものです。今回の内容はRDSの、それも自動再起動に特化した内容ではありましたが、対策についての考え方は様々な悲劇に共通するものです。</p><p>どうすれば悲劇を予防できるのか、早期検知できるのかについて考え続け、少しでも悲劇を抑えられると良いと思います。</p><p><a href="/articles/20220601a/">失敗談連載2022</a> 明日は辻さんの<a href="/articles/20220607a/">AWS Lambdaの初期化処理と初期化タイミングの考慮不足によるはまりどころ</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">Amazon RDS の料金 <a href="https://aws.amazon.com/jp/rds/pricing/">https://aws.amazon.com/jp/rds/pricing/</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">Amazon EC2 の料金 <a href="https://aws.amazon.com/jp/ec2/pricing/">https://aws.amazon.com/jp/ec2/pricing/</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">一時的に Amazon RDS DB インスタンスを停止する <a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/USER_StopInstance.html">https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/USER_StopInstance.html</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">Amazon RDS インスタンスを 7 日以上停止する方法を教えて下さい。 <a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/rds-stop-seven-days/">https://aws.amazon.com/jp/premiumsupport/knowledge-center/rds-stop-seven-days/</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;">Amazon Aurora の料金 <a href="https://aws.amazon.com/jp/rds/aurora/pricing/">https://aws.amazon.com/jp/rds/aurora/pricing/</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      <category domain="https://future-architect.github.io/tags/RDS/">RDS</category>
      
      
      <comments>https://future-architect.github.io/articles/20220606a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
