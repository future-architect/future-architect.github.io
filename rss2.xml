<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Tue, 08 Nov 2022 00:51:53 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Azure Data Boxを使ってみた</title>
      <link>https://future-architect.github.io/articles/20221108a/</link>
      <guid>https://future-architect.github.io/articles/20221108a/</guid>
      <pubDate>Mon, 07 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、テクノロジーイノベーショングループ所属、2021年4月に新卒で入社した一ノ瀬です。</p><p>今回は、オンプレからクラウドへのデータ移行に関して、AzureのData Boxというサービスを利用する機会があったので、詳細なワークフローや失敗談について共有します。</p><p>昨今のDX推進の流れにのり、システムのクラウドシフト&#x2F;リフトに取り組む方も多いかと思います。</p><p>「クラウドへの移行を考えているがデータ量が膨大で移行ができない」といった悩みがあったり、「クラウドへのデータ移行でData Boxサービスを利用したい！けど、よくわからない…」という方々に本記事を参考にしていただけると幸いです。</p><h1 id="Data-Boxを利用する背景"><a href="#Data-Boxを利用する背景" class="headerlink" title="Data Boxを利用する背景"></a>Data Boxを利用する背景</h1><p>今回の要件は、オンプレのデータ分析基盤で収集していた100TB以上のデータをAzureに移行することでした。</p><p>当初はAzure専用線を使ったオンラインのデータ移行を検討していました。</p><p>しかし、データ容量の大きさから移行に約7ヶ月かかる点からオンラインのデータ移行は断念しました。</p><p>短期間かつNW負荷が低くてすむ移行方法はないか？ということで、オンプレ基盤とAzure間でオフラインでデータ移行できるサービスData Boxを利用することになりました。</p><p>続いては、動作環境に触れていきます。</p><h1 id="動作環境のはなし"><a href="#動作環境のはなし" class="headerlink" title="動作環境のはなし"></a>動作環境のはなし</h1><h3 id="物理構成はどんな感じ？"><a href="#物理構成はどんな感じ？" class="headerlink" title="物理構成はどんな感じ？"></a>物理構成はどんな感じ？</h3><p>データコピー時の登場人物は以下の計3端末です。</p><ol><li>Data Box</li><li>Data Box初期設定用PC</li><li>データコピー用サーバ</li></ol><img src="/images/20221108a/WS000297.JPG" alt="WS000297.JPG" width="1037" height="736" loading="lazy"><p>Data Box初期設定用PCとデータコピー用サーバは今回の案件のために用意したので、以下に環境情報を記します。<br>転送先はAzure Data Boxの領域であり、また転送元はユーザにより異なるため環境情報の説明は省きます。</p><p><strong>データコピー用サーバ</strong></p><ul><li>RedHat Enterprise for Linux v8.4</li><li>メモリ16GB</li><li>1CPU4コア</li></ul><p><strong>Data Box初期設定用PC</strong>（※）</p><ul><li>Windows10</li><li>Google Chrome(2022&#x2F;8&#x2F;18時点最新)</li></ul><p>※借用PCのため詳細不明</p><h3 id="Data-Boxの結線の詳細は？"><a href="#Data-Boxの結線の詳細は？" class="headerlink" title="Data Boxの結線の詳細は？"></a>Data Boxの結線の詳細は？</h3><p>Data Boxの結線についても紹介します。<br>今回の構成では、以下の組み合わせで結線しています。</p><div class="scroll"><table><thead><tr><th align="left">Data Boxのポート</th><th align="left">接続先</th><th align="left">種別</th><th align="left">ポートの説明</th></tr></thead><tbody><tr><td align="left">MGMTポート</td><td align="left">Data Box初期設定用PC</td><td align="left">RJ45</td><td align="left">初期設定時のみ使用<br>データコピーでは使用しない</td></tr><tr><td align="left">Data#1~2ポート</td><td align="left">10GbE対応のL2スイッチ</td><td align="left">10GBASE-SR</td><td align="left">データコピーにて<br>メインで使用する</td></tr><tr><td align="left">Data#3ポート</td><td align="left">1GbE対応のL2スイッチ</td><td align="left">RJ45</td><td align="left">アクセスは発生させない<br>前提条件を満たすために結線</td></tr></tbody></table></div><p>以下は結線のイメージです。<br><img src="/images/20221108a/image.png" alt="" width="820" height="449" loading="lazy"><br>出典：<a href="https://learn.microsoft.com/ja-jp/azure/databox/data-box-cable-options#transfer-via-data-port-with-static-ips-using-a-switch">Azure Data Boxの配線方法</a></p><p>今回MGMTポート + Data#1~3ポート全てで結線をしている理由は、サービス利用の前提として調達・結線が求められているためです。</p><p><a href="https://learn.microsoft.com/ja-jp/azure/databox/data-box-quickstart-portal">Docs:DataBoxのクイックスタート</a>の前提条件の一つに以下の記述があります。</p><blockquote><p>Data Box をホスト コンピューターに接続するために以下のケーブルを用意していること。<br>・10 GbE SFP+ Twinax 銅線ケーブル 2 本 (DATA 1、DATA 2 ネットワーク インターフェイスで使用)<br>・RJ-45 CAT 6 ネットワーク ケーブル 1 本 (MGMT ネットワーク インターフェイスで使用)<br>・RJ-45 CAT 6A OR ネットワーク ケーブル 1 本、RJ-45 CAT 6 ネットワーク ケーブル 1 本 (それぞれ 10 Gbps または 1 Gbps として構成されている DATA 3 ネットワーク インターフェイスで使用)</p></blockquote><p>また、マイクロソフトサポートから以下コメントを頂いています。</p><blockquote><p>Docsにて「必要」と記載のある部材に関しては原則調達をお願いしております。<br>仮に上記が欠けている場合、有事の際にサービス提供者側としての責任を負うことが出来ないという判断になる懸念がございます。</p></blockquote><p>以上から、マイクロソフト社はケーブルを4本全て用意し、Data Boxのすべてのポートを接続させた状態で使用することを前提にしているようです。</p><p>最低限の構成（例：Data#1とMGMTのみ）でも動作はするかと思いますが、今回は万全を期すために、MGMT + Data#1~3ポート全てで結線をしています。</p><p>また結線に使用したケーブルやアダプターについても説明します。</p><p>SFP+アダプターにはCiscoの「SFP-10G-SR」という機種を使用しました。<br>SFP+アダプターについては、問い合わせを起票してMiceosoftサポートが推奨する機種を参考に選びました。<br>以下サポートからの回答です。</p><blockquote><p><a href="https://network.nvidia.com/pdf/firmware/ConnectX3-FW-2_42_5000-release_notes.pdf">Mellanox ConnectX-3 Firmware Release Notes</a>の「1.2.1 Validated and Supported 1GbE&#x2F;10GbE Cables (p.8~11)」に記載されているケーブルと同等のケーブルであれば問題なく動作すると考えられます。</p></blockquote><p>RJ45は一般的なLANケーブルで問題ないですが、SFP+のアダプターは小さくても高額ですので、「アダプター準備したけど使えないじゃん」という事態を避けるためにも慎重に準備することをおすすめします。</p><h1 id="Data-Boxの主なワークフロー"><a href="#Data-Boxの主なワークフロー" class="headerlink" title="Data Boxの主なワークフロー"></a>Data Boxの主なワークフロー</h1><p>では、実際の利用の流れを説明していこうと思います。</p><p>Data Boxを使ったデータ移行の大まかな流れは以下です。</p><img src="/images/20221108a/WS000294.JPG" alt="WS000294.JPG" width="1200" height="176" loading="lazy"><ol><li>発注</li><li>受け取り</li><li>デバイス初期設定</li><li>結線とマウント</li><li>データコピー</li><li>返送</li><li>Azureへインポート</li></ol><p>※今回の案件では筐体の写真を撮影することができませんでした。手順の中で写真なしで筐体の説明をしていますが、ご了承ください。</p><h1 id="発注"><a href="#発注" class="headerlink" title="発注"></a>発注</h1><img src="/images/20221108a/ワークフロー_(1).JPG" alt="ワークフロー_(1).JPG" width="1200" height="179" loading="lazy"><h3 id="注文の作成"><a href="#注文の作成" class="headerlink" title="注文の作成"></a>注文の作成</h3><p>まずはAzure Portalにログインし、ダッシュボードからData Boxを発注していきます。</p><p>Azure Portalのホーム画面で[Azure Data Box]を選択し、画面左上の[作成]を押下します。</p><img src="/images/20221108a/DataBox発注1.jpg" alt="DataBox発注1.jpg" width="1200" height="399" loading="lazy"><p>次の画面では対象のサブスクリプション、リソースグループ、ソースの国、宛先のAzureリージョンを選択し、[適用]を押下します。</p><img src="/images/20221108a/DataBox発注2.jpg" alt="DataBox発注2.jpg" width="1200" height="442" loading="lazy"><img src="/images/20221108a/DataBox発注3.jpg" alt="DataBox発注3.jpg" width="1200" height="605" loading="lazy"><p>サービスを選択すると、注文に関する記入する画面に移ります。</p><p>[基本]では注文名を指定します。</p><p>ここで設定する注文名は、Azure Portalに残るものですので、複数台発注する場合は特に一意な名称にしておくとよいでしょう。</p><img src="/images/20221108a/DataBox発注4.jpg" alt="DataBox発注4.jpg" width="1200" height="300" loading="lazy"><p>注文名を指定したら[データ格納先]に移動します。データの格納先と宛先のAzureリージョン、データをインポート&#x2F;エクスポートしたいストレージアカウントを選択します。</p><img src="/images/20221108a/DataBox発注5.jpg" alt="DataBox発注5.jpg" width="1200" height="531" loading="lazy"><p>Data Boxサービスは一部のストレージアカウントのタイプをサポートしていないため、発注に先立って確認しておくと良いでしょう。</p><ul><li><a href="https://learn.microsoft.com/ja-jp/azure/databox/data-box-system-requirements#supported-storage-accounts-for-imports">Docs:インポートでサポートされているストレージアカウント</a></li><li><a href="https://learn.microsoft.com/ja-jp/azure/databox/data-box-system-requirements#supported-storage-accounts-for-exports">Docs:エクスポートでサポートされているストレージアカウント</a></li></ul><p>今回はGeneral-purpose(汎用) v2 Standardを使用しています。</p><p>次は[セキュリティ]です。</p><p>デバイスのロック解除兼WebUIのログインに使用するパスワードの種類を設定します。Microsoftマネージドキーかカスタマーマネージドキーを選択できます。</p><p>今回は全項目でMicrosoftマネージドキーを選択していますが、カスタマーマネージドキーを選択すると、より長く複雑なパスワードを設定できるようです。パスワードセキュリティをより強固にしたい場合は選択するとよいでしょう。</p><img src="/images/20221108a/DataBox発注6.jpg" alt="DataBox発注6.jpg" width="1200" height="547" loading="lazy"><p>[連絡先の詳細]では出荷方法と通知を受け取るメールアドレス、（Microsoftの管理による出荷を選択した場合は）配達先住所の設定をします。</p><p>今回は自己管理の出荷を選択しています。メールはメーリングリストも使用可能です。</p><img src="/images/20221108a/住所の追加.jpg" alt="住所の追加.jpg" width="1200" height="567" loading="lazy"><p>[タグ]では対象の注文にタグを設定できます。請求情報等の管理のために便利な機能のようですが、今回は空欄としています。</p><img src="/images/20221108a/DataBox発注9.jpg" alt="DataBox発注9.jpg" width="1200" height="324" loading="lazy"><p>必要なすべての項目を記入し終えたら[確認と注文]に移動し発注します。</p><h1 id="受け取り"><a href="#受け取り" class="headerlink" title="受け取り"></a>受け取り</h1><img src="/images/20221108a/ワークフロー_(2).JPG" alt="ワークフロー_(2).JPG" width="1200" height="178" loading="lazy"><h3 id="受取日の調整"><a href="#受取日の調整" class="headerlink" title="受取日の調整"></a>受取日の調整</h3><p>次はData Box受取日の調整をします。<br>今回は自己管理の出荷を選択したため、受け取り・引き渡しの両方で自己管理の出荷を前提に説明していきます。</p><p>まずは<a href="mailto:&#97;&#x64;&#x62;&#111;&#x70;&#115;&#64;&#109;&#x69;&#x63;&#x72;&#x6f;&#115;&#111;&#x66;&#116;&#x2e;&#99;&#111;&#x6d;">&#97;&#x64;&#x62;&#111;&#x70;&#115;&#64;&#109;&#x69;&#x63;&#x72;&#x6f;&#115;&#111;&#x66;&#116;&#x2e;&#99;&#111;&#x6d;</a>宛てに必要な情報をメールで送付します。件名を <code>Request Azure Data Box Pickup for Order: \&lt;ordername&gt;</code> に設定し、本文には以下フォーマットを記入したものを記入します。今回は日本語で記入しました。</p><p>Company name (会社名):<br>Contact name (受取担当者名):<br>Contact tel. no. (受取担当者電話番号):<br>Date of pickup (受取日):<br>Date of birth (担当者生年月日):<br>Nationality (担当者国籍):<br>Time of pickup (受取時刻):<br>Car number plate (自動車登録番号):</p><p>また、希望受取日は、複数決めておくとその後の調整がスムーズです。私が利用した際は、Microsoftから日程変更の依頼が来ました</p><p>受取日が決定すると、Azure Portalで認証コードが発行され、<a href="mailto:&#97;&#x7a;&#117;&#x72;&#x65;&#45;&#110;&#111;&#114;&#x65;&#x70;&#108;&#121;&#64;&#x6d;&#x69;&#x63;&#114;&#x6f;&#x73;&#x6f;&#102;&#x74;&#x2e;&#x63;&#111;&#109;">&#97;&#x7a;&#117;&#x72;&#x65;&#45;&#110;&#111;&#114;&#x65;&#x70;&#108;&#121;&#64;&#x6d;&#x69;&#x63;&#114;&#x6f;&#x73;&#x6f;&#102;&#x74;&#x2e;&#x63;&#111;&#109;</a>から受取準備が完了した旨のメール（以下、参照）が送付されます。</p><img src="/images/20221108a/受け取り準備完了メール.JPG" alt="受け取り準備完了メール.JPG" width="511" height="529" loading="lazy"><p>受取当日は以下3点を用意し、指定された住所でData Boxを受け取ります。</p><ol><li>認証コード</li><li>受取準備完了メールのコピー</li><li>受取担当者の写真つき身分証明書の</li></ol><p>認証コードについては、マイクロソフト側担当者に口頭で伝える必要があるため、メモ等を用意しておくと良いでしょう。</p><p>事前に知らなかったのですが、Databoxの受け取り・引き渡しの際、いくつかの書類（NDA等）にサインをする必要があります。NDAは個人とマイクロソフト者の間で締結するもので、データセンターの情報などの漏洩防止に関係しているようです。</p><p>無事受け取れたら、いよいよData Boxの初期設定に移ります。</p><h1 id="デバイスの初期設定"><a href="#デバイスの初期設定" class="headerlink" title="デバイスの初期設定"></a>デバイスの初期設定</h1><img src="/images/20221108a/ワークフロー_(3).JPG" alt="ワークフロー_(3).JPG" width="1200" height="179" loading="lazy"><h3 id="開梱"><a href="#開梱" class="headerlink" title="開梱"></a>開梱</h3><p>マイクロソフト社から引き取った段ボールを開梱し筐体を取り出したら、次はData Boxの起動と初期設定作業に移ります。<br><a href="https://learn.microsoft.com/ja-jp/azure/databox/data-box-overview#features-and-specifications">Docs:機能と仕様</a>にありますが、Data Boxの重さは23Kg、サイズは309.0 mm x 430.4 mm x 502.0 mmです。</p><p>大人一人でギリギリ設置可能な大きさ・重さですが、複数名で行うとより安全でしょう</p><h3 id="Data-Boxの起動"><a href="#Data-Boxの起動" class="headerlink" title="Data Boxの起動"></a>Data Boxの起動</h3><p>まず、ディスプレイとは反対側に位置する扉を開け、電源ケーブルを取り出します。<br>電源ケーブルをデバイスと電源に接続し、ディスプレイの下にある電源ボタンを押し、Data Boxを起動します。</p><h3 id="WebUIへアクセス"><a href="#WebUIへアクセス" class="headerlink" title="WebUIへアクセス"></a>WebUIへアクセス</h3><p>次にData BoxのWebUIに Data Box初期設定用PCからアクセスしていきます。</p><p>まず Data Box初期設定用PCにIPアドレスを割り当てていきます。Data Box初期設定用PCのイーサネットアダプタのIPアドレスを192.168.100.5&#x2F;24に設定し、Data BoxのMGMTポートと Data Box初期設定用PCをLANケーブルを結線します。</p><p>結線したら、 Data Box初期設定用PCでブラウザを開き、https:&#x2F;192.168.10.10にアクセスし、ログイン画面が表示されれば疎通成功です。</p><p>次にAzurePortalに記載されているデバイスロックのパスワードを入力してWebUIにログインします。</p><p>※イーサネットに割り当てるIPアドレスや、WebUIのURLは<a href="https://learn.microsoft.com/ja-jp/azure/databox/data-box-deploy-set-up">Docs:デバイスに接続する</a>を参考にしています。</p><p>おまけではありますが、ここでデバイスの実効容量の確認も済ませると良いです。</p><p>ログイン後に表示されるダッシュボード中央の[Connect and copy]にて、その時点の空き容量（Free Space）と使用済み容量（Used Space）が表示されます。<br>※キャプチャはデータコピー最中のものです</p><img src="/images/20221108a/【1号機】ダッシュボード.jpg" alt="【1号機】ダッシュボード.jpg" width="1200" height="583" loading="lazy"><p>一通りコピーした後に「思ったよりファイル置けなかった」「もっとコピーしておけばよかった」という事態を避けるため、事前に実効容量を確認し、コピー計画の最終確認ができると良いです。</p><p>今回の実効容量は、2台とも80TBにほど近い値でした。100GB程度の個体差はありましたが、ほとんど気にならない差でした。<a href="https://learn.microsoft.com/ja-jp/azure/databox/data-box-overview#features-and-specifications">Docs:実効容量</a>では80TBとされていますが、ほぼ正確な値と思って良さそうです。</p><p>次にData Box側の初期設定を行います。</p><p>今回の手順では、Data#1~3ポートへのIPアドレス割り当てとNFSの接続許可設定を実行していきます。</p><h3 id="Data-BoxへのIP割り当て"><a href="#Data-BoxへのIP割り当て" class="headerlink" title="Data BoxへのIP割り当て"></a>Data BoxへのIP割り当て</h3><p>まず、IPアドレス割り当てからです。</p><p>[Set network interfaces]ページからネットワーク設定画面に遷移し、Data＃1〜3ポートにIPアドレスを割り当てます。</p><p>今回は3つのポートすべてにIPを割り当てていきます。</p><p>※この際MGMTポートのIPアドレスは変更できないため注意です。</p><img src="/images/20221108a/【1号機】NWインターフェース設定.jpg" alt="【1号機】NWインターフェース設定.jpg" width="1200" height="587" loading="lazy"><p>今回は静的にIPアドレスを割り当てるので、IP setteingsをStaticに設定し、ほかの項目（IP address, Subnet, Gateway）を埋めました。</p><p>任意のポートでIPアドレスを入力したら、画面左下の[Apply settings]を押下します。</p><p>ダッシュボードに戻り、設定したIPが各ポートで反映されていれば設定完了です。</p><h3 id="データコピーの接続許可設定"><a href="#データコピーの接続許可設定" class="headerlink" title="データコピーの接続許可設定"></a>データコピーの接続許可設定</h3><p>次にデータコピーに必要な接続情報を取得・設定します。</p><p>ダッシュボードから[Connect and copy]ページを選択した後、対象のストレージアカウントで転送に使用するプロトコルを選択します。今回はCIFSを利用するため、[SMB]を押下します。</p><p>押下すると、添付のようなポップアップが表示されます。</p><p>ここでCIFS接続に必要なユーザネーム、パスワードを取得できます。</p><img src="/images/20221108a/【1号機】接続とコピー_SMB.jpg" alt="【1号機】接続とコピー_SMB.jpg" width="1200" height="585" loading="lazy"><p>CIFSに限らず、「NFSもしくはREST APIで転送したい！」と考えている方も、[Connect and copy]ページにて同様に接続情報を取得・設定できます。</p><p>NFSの場合は接続許可したいIPアドレスをテキストボックスに記入し、Validata IP addressを押下します。</p><p>IPが追加されれば、エクスポート設定が完了します。</p><img src="/images/20221108a/【1号機】接続とコピー_NFS.jpg" alt="【1号機】接続とコピー_NFS.jpg" width="1200" height="582" loading="lazy"><p>REST APIの場合は、BLOBエンドポイントのURL、また認証情報であるAPI Keyや Connection Stringが取得できます。</p><img src="/images/20221108a/【1号機】接続とコピー_RESTAPI.jpg" alt="【1号機】接続とコピー_RESTAPI.jpg" width="1200" height="582" loading="lazy"><h1 id="結線とマウント"><a href="#結線とマウント" class="headerlink" title="結線とマウント"></a>結線とマウント</h1><img src="/images/20221108a/ワークフロー_(4).JPG" alt="ワークフロー_(4).JPG" width="1200" height="179" loading="lazy"><h3 id="Data-BoxとNWスイッチの結線"><a href="#Data-BoxとNWスイッチの結線" class="headerlink" title="Data BoxとNWスイッチの結線"></a>Data BoxとNWスイッチの結線</h3><p>Data BoxへのIP割り当てとデータコピーの接続設定が済んだので、<br>ついにData BoxとNWスイッチを結線させ、ネットワークに接続していきます。（やったー）</p><p>接続するポートとスイッチの対応や、ケーブルの規格については物理環境のはなしの中の<a href="https://qiita.com/sichinoseeeee/private/415694f8f6e781a75b62#data-box%E3%81%AE%E7%B5%90%E7%B7%9A%E3%81%AE%E8%A9%B3%E7%B4%B0%E3%81%AF">Data Boxの結線の詳細は？</a>を参照ください。</p><h3 id="Data-Boxのネットワーク接続確認"><a href="#Data-Boxのネットワーク接続確認" class="headerlink" title="Data Boxのネットワーク接続確認"></a>Data Boxのネットワーク接続確認</h3><p>Data Boxをネットワークに接続させたら、 Data Box初期設定用PCでData Boxにアクセスします。<br>Data Box初期設定用PCのブラウザーからhttps:&#x2F;{Data＃1〜3ポートに割り当てたIP}にアクセスし、WebUIのログイン画面が表示されれば疎通成功です。</p><p>デバイスがネットワークに接続したことが確認できたら、以上でデバイス側での事前作業は完了です。（やったー）</p><p>次にデータコピー用サーバでの作業です。</p><p>この手順ではData Boxのファイルシステムマウントとファイルコピーの動作確認を行います。</p><h3 id="Data-Boxのマウント"><a href="#Data-Boxのマウント" class="headerlink" title="Data Boxのマウント"></a>Data Boxのマウント</h3><p>まずデータコピー用サーバにログインし、<code>/etc/fstab</code> にData BoxをNFSマウントするための定義を記入していきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/fstab</span><br><span class="line"></span><br><span class="line">=====以下定義を追加=====</span><br><span class="line"><span class="comment"># Data Box</span></span><br><span class="line">\\&lt;DeviceIPAddress<span class="comment">#1&gt;\&lt;storageaccountname_BlockBlob&gt;   /mnt/databox1 cifs rw,username=&lt;username&gt;,password=&lt;password&gt;,uid=&lt;uid&gt;,gid=&lt;gid&gt;,dir_mode=0777,file_mode=0777  0 0</span></span><br><span class="line">\\&lt;DeviceIPAddress<span class="comment">#2&gt;\&lt;storageaccountname_BlockBlob&gt;  /mnt/databox2 cifs rw,username=&lt;username&gt;,password=&lt;password&gt;,uid=&lt;uid&gt;,gid=&lt;gid&gt;,dir_mode=0777,file_mode=0777 0 0</span></span><br><span class="line">=======================</span><br></pre></td></tr></table></figure><p><code>/etc/fstab</code> ファイルへの書き込みが完了したら、ついにData Boxをマウントしていきます。<br>対象ファイルシステムが正しくマウントされたかも同時に確認していきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mount /mnt/databox1</span><br><span class="line">$ mount /mnt/databox2</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">df</span> -h</span><br><span class="line">ファイルシステム                                        サイズ  使用  残り 使用% マウント位置</span><br><span class="line">\\&lt;DeviceIPAddress<span class="comment">#1&gt;\&lt;storageaccountname_BlockBlob&gt;          79T  135G   79T    1% /mnt/databox1</span></span><br><span class="line">\\&lt;DeviceIPAddress<span class="comment">#2&gt;\&lt;storageaccountname_BlockBlob&gt;          79T   96G   79T    1% /mnt/databox2</span></span><br></pre></td></tr></table></figure><h3 id="マウントポイント配下にディレクトリ作成"><a href="#マウントポイント配下にディレクトリ作成" class="headerlink" title="マウントポイント配下にディレクトリ作成"></a>マウントポイント配下にディレクトリ作成</h3><p>次にマウントポイント配下にディレクトリを作成していきます。Data Boxのファイルシステムにデフォルトで備わっているディレクトリは<code>\&lt;storageaccountname_BlockBlob&gt; </code> の1つのみでData Boxを発注したストレージアカウント名がそのままディレクトリ名になっています。</p><blockquote><p>常にコピーしようとするファイル用のフォルダーを共有下に作成してから、ファイルをそのフォルダーにコピーします。<br>~~~中略~~~<br>ストレージ アカウント内の root フォルダーに直接ファイルをコピーすることはできません。</p></blockquote><p><a href="https://learn.microsoft.com/ja-jp/azure/databox/data-box-deploy-copy-data-via-nfs#connect-to-data-box">Docs:Data Boxに接続する</a>で推奨されているように、デフォルトのディレクトリの1階層下に新たなディレクトリ（以下、コンテナー用ディレクトリ）を作成し、そこにデータをコピーする必要があります</p><blockquote><p>ブロック BLOB およびページ BLOB の共有の下に作成したフォルダーは、データが BLOB としてアップロードされるコンテナーになります。</p></blockquote><p>また、<code>\&lt;storageaccountname_BlockBlob&gt;</code> の直下に作成したディレクトリは、Azureへインポート後にコンテナーとして反映されます。<br>今回は既定のコンテナー配下にファイル及びディレクトリを配置する想定だったため、以下手順でディレクトリを作成していきます。</p><p>※Data Boxを2台同時に使用するため、管理上の都合でコンテナ用ディレクトリ配下に更に1階層ディレクトリを作成していますが、特に必要ではありません。<br>ユーザー&#x2F;オーナーは</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -m 755 /mnt/databox1/&lt;containername&gt;</span><br><span class="line">$ <span class="built_in">mkdir</span> -m 755 /mnt/databox2/&lt;containername&gt;</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">mkdir</span> -m 755 /mnt/databox1/&lt;containername&gt;/databox1</span><br><span class="line">$ <span class="built_in">mkdir</span> -m 755 /mnt/databox2/&lt;containername&gt;/databox2</span><br><span class="line">$ find /mnt/databox* -<span class="built_in">ls</span></span><br><span class="line">3458764513820542746      1 drwxrwxr-x   2  &lt;user&gt;     &lt;owner&gt;          64  8月 18 15:45 /mnt/databox1</span><br><span class="line">3458764513820542749      1 drwxr-xr-x   2  &lt;user&gt;     &lt;owner&gt;          64  8月 18 15:45 /mnt/databox1/&lt;containername&gt;</span><br><span class="line">3458764513820542750      1 drwxr-xr-x   2  &lt;user&gt;     &lt;owner&gt;          64  8月 18 15:45 /mnt/databox1/&lt;containername&gt;/databox1</span><br><span class="line">3458764513820542746      1 drwxrwxr-x   2  &lt;user&gt;     &lt;owner&gt;          64  8月 18 15:46 /mnt/databox2</span><br><span class="line">3458764513820542749      1 drwxr-xr-x   2  &lt;user&gt;     &lt;owner&gt;          64  8月 18 15:46 /mnt/databox2/&lt;containername&gt;</span><br><span class="line">3458764513820542750      1 drwxr-xr-x   2  &lt;user&gt;     &lt;owner&gt;          64  8月 18 15:46 /mnt/databox2/&lt;containername&gt;/databox2</span><br></pre></td></tr></table></figure><p>今回のように既存のコンテナーにデータをインポートする要件がある場合は、<code>\\&lt;DeviceIPAddress#1&gt;\&lt;storageaccountname_BlockBlob&gt;</code> 配下に同様の名前のディレクトリを作成する必要があります。ここでディレクトリ名に誤字があると、Azureへのインポート時にまったく新しい別のコンテナーが生成されてしまうので注意が必要です。</p><p>以上でディレクトリ作成が完了したので、次はディレクトリの動作確認をしていきます。</p><h3 id="ディレクトリの動作確認"><a href="#ディレクトリの動作確認" class="headerlink" title="ディレクトリの動作確認"></a>ディレクトリの動作確認</h3><p>本手順では、作成したディレクトリ配下でディレクトリとファイルの作成（ディレクトリへの書き込み）ができるかを確認します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> /mnt/databox1/&lt;containername&gt;/databox1/test.txt</span><br><span class="line">$ <span class="built_in">ls</span> -l /mnt/databox1/&lt;containername&gt;/databox1</span><br><span class="line">$ <span class="built_in">rm</span> /mnt/databox1/&lt;containername&gt;/databox1/test.txt</span><br><span class="line">$ <span class="built_in">ls</span> -l /mnt/databox1/&lt;containername&gt;/databox1</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">touch</span> /mnt/databox2/&lt;containername&gt;/databox2/test.txt</span><br><span class="line">$ <span class="built_in">ls</span> -l /mnt/databox2/&lt;containername&gt;/databox2</span><br><span class="line">$ <span class="built_in">rm</span> /mnt/databox2/&lt;containername&gt;/databox2/test.txt</span><br><span class="line">$ <span class="built_in">ls</span> -l /mnt/databox2/&lt;containername&gt;/databox2</span><br></pre></td></tr></table></figure><p>以上のコマンドが正常に実行されれば、データコピー作業の準備は以上です。<br>ついに、データコピー作業へと移ります。</p><h1 id="データコピー"><a href="#データコピー" class="headerlink" title="データコピー"></a>データコピー</h1><img src="/images/20221108a/ワークフロー_(5).JPG" alt="ワークフロー_(5).JPG" width="1200" height="178" loading="lazy"><h3 id="コピーコマンド実行"><a href="#コピーコマンド実行" class="headerlink" title="コピーコマンド実行"></a>コピーコマンド実行</h3><p>今回の案件では<code>cp -prf</code>コマンドでデータコピーを実施しました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> -prf /&lt;転送元ファイルパス&gt; /mnt/databox1/&lt;containername&gt;/databox1/&lt;転送先パス&gt;</span><br><span class="line">$ <span class="built_in">cp</span> -prf /&lt;転送元ファイルパス&gt; /mnt/databox2/&lt;containername&gt;/databox2/&lt;転送先パス&gt;</span><br></pre></td></tr></table></figure><h3 id="コピーのパフォーマンス"><a href="#コピーのパフォーマンス" class="headerlink" title="コピーのパフォーマンス"></a>コピーのパフォーマンス</h3><p>ファイルサイズやファイル数に左右されますが、今回の転送速度は100~170MB&#x2F;秒でした。</p><p>有効容量の80TBいっぱいにコピーしたい場合、24時間休まずシリアル実行すると、8日前後で完了する計算です。</p><p>今回はシリアル実行でしたが、コピー完了までに1台あたり8~9日かかりました。<br><a href="https://learn.microsoft.com/ja-jp/azure/databox/data-box-limits#data-box-limits">Docs:Data Boxの制限</a>には10セッションまで同時接続できるとあるので</p><blockquote><p>Data Box では、NFS 共有上で最大 10 のクライアント接続が同時にサポートされます。</p></blockquote><p>パラレルでコピーすることによって、さらに転送速度の向上を狙えるようです。</p><h1 id="発送"><a href="#発送" class="headerlink" title="発送"></a>発送</h1><img src="/images/20221108a/ワークフロー_(6).JPG" alt="ワークフロー_(6).JPG" width="1200" height="179" loading="lazy"><h3 id="デバイスの発送準備処理（チェックサム計算）"><a href="#デバイスの発送準備処理（チェックサム計算）" class="headerlink" title="デバイスの発送準備処理（チェックサム計算）"></a>デバイスの発送準備処理（チェックサム計算）</h3><p>データコピーが完了したら、デバイスの発送準備処理を実行していきます。<br>ダッシュボードで[Prepare to ship]ページを選択し、[Start preparation]を押下します。</p><img src="/images/20221108a/【1号機】発送準備.jpg" alt="【1号機】発送準備.jpg" width="1200" height="574" loading="lazy"><p>発送準備処理では、キャプチャにある通り、デバイスのロックや転送済みデータの整合性確認、ファイル一覧の作成などが実行されます。</p><p>処理完了後には以下のように全項目にチェックがつき、Completedの文字が表示されます。<br><img src="/images/20221108a/発送準備完了_1号機.JPG" alt="発送準備完了_1号機.JPG" width="1200" height="540" loading="lazy"></p><p>余談にはなりますが、発送準備処理のリードタイムについても説明しようと思います。<br><a href="https://docs.microsoft.com/ja-jp/azure/databox/data-box-deploy-prepare-to-ship">Docs:Azure Data Box の発送準備</a>では最遅で数日間かかるとあるので、ここで少し驚く方もいるかと思います。</p><blockquote><p>チェックサムの計算は、データのサイズによっては数時間から数日間かかる場合があります。</p></blockquote><p>本当に数日間かかるとすると、発送準備処理だけのためにData Boxサービス料を払うことになり、あまり嬉しくはありません。<br>しかし、いざ発送準備処理を実行してみると、2台平均の所要時間は10分ほどで、見込みよりも大幅に短い時間で完了することができました。</p><p>今回はData Box1台あたり実効容量の9割近く（70&#x2F;80TB）を使用していたため、最悪のパフォーマンスが考えられる環境でしたが、十数分で完了しました。</p><p>発送準備処理のリードタイムは、扱うデータ構造やファイル数、ファイルあたりのサイズなど環境要因に左右されるため参考程度ではありますが、今回の実績ベースでは概ね十数分～数時間程度と考えて良さそうです。<br>ドキュメントにあるリードタイムの目安を鵜呑みにする必要はそれほどなく、より余裕を持ったコピー計画を立ても問題ないと感じています。</p><h3 id="Data-Boxシャットダウンと抜線"><a href="#Data-Boxシャットダウンと抜線" class="headerlink" title="Data Boxシャットダウンと抜線"></a>Data Boxシャットダウンと抜線</h3><p>クローズ処理が完了したら、いよいよ発送に向けて準備をします。<br>WebUIにアクセスしデバイスをシャットダウンしていきます。[Shut down or restart]ページから[Shut down]を押下します。</p><img src="/images/20221108a/【1号機】シャットダウンと再起動.jpg" alt="【1号機】シャットダウンと再起動.jpg" width="1200" height="576" loading="lazy"><p>シャットダウンすると、当たり前ですがファイル共有は使えなくなります。<br>必要に応じて周知しましょう。</p><p>押下後に数分あけ、ブラウザの新しいタブを開き再度WebUIにアクセスをします。<br>この時アクセスがタイムアウトすれば、Data Box側のNICがアクティブでない（＝デバイスの電源が落ちた）と判断できます。</p><p>次にNWスイッチに接続しているケーブルを抜線し、Data Boxをアンラック・梱包します。</p><h3 id="梱包"><a href="#梱包" class="headerlink" title="梱包"></a>梱包</h3><p>データボックスを元々の段ボールに梱包し、発送の準備をします。<br><a href="https://learn.microsoft.com/ja-jp/azure/databox/data-box-overview#features-and-specifications">Docs:機能と仕様</a>にある通り、マイクロソフト社からは①Data Box本体と②電源ケーブルの2点をレンタルしているので、<br>以上が間違いなく梱包されていることを確認し、段ボールの封をします。</p><h3 id="引き渡し"><a href="#引き渡し" class="headerlink" title="引き渡し"></a>引き渡し</h3><p>発送（Azureデータセンターへの引き渡し）の目処がたった時点で、受け取り時と同様に<a href="mailto:&#x61;&#x64;&#98;&#x6f;&#112;&#115;&#x40;&#109;&#x69;&#x63;&#x72;&#111;&#x73;&#111;&#x66;&#x74;&#x2e;&#x63;&#x6f;&#x6d;">&#x61;&#x64;&#98;&#x6f;&#112;&#115;&#x40;&#109;&#x69;&#x63;&#x72;&#111;&#x73;&#111;&#x66;&#x74;&#x2e;&#x63;&#x6f;&#x6d;</a>宛に引き渡し日時の調整メールを送付します。<br>引き渡しでは以下フォーマットでメールを送付します。</p><p>Company name (会社名):<br>Contact name (引き渡し担当者名):<br>Contact tel. no. (引き渡し担当者電話番号):<br>Date of dropoff (引き渡し日):<br>Date of birth (担当者生年月日):<br>Nationality (担当者国籍):<br>Time of dropoff (引き渡し時刻):<br>Car number plate (自動車登録番号):</p><p>引き渡し日時が確定しData Boxの発送準備処理が終わるとAzure Portalで認証コードが発行されます。<br>また、<a href="mailto:&#x61;&#122;&#117;&#114;&#101;&#45;&#x6e;&#111;&#114;&#x65;&#x70;&#108;&#121;&#64;&#109;&#x69;&#99;&#x72;&#x6f;&#x73;&#111;&#102;&#116;&#46;&#x63;&#111;&#x6d;">&#x61;&#122;&#117;&#114;&#101;&#45;&#x6e;&#111;&#114;&#x65;&#x70;&#108;&#121;&#64;&#109;&#x69;&#99;&#x72;&#x6f;&#x73;&#111;&#102;&#116;&#46;&#x63;&#111;&#x6d;</a>から受取準備が完了した旨のメール（以下、参照）が送付されます。<br><img src="/images/20221108a/引き渡し準備完了メール.JPG" alt="引き渡し準備完了メール.JPG" width="512" height="561" loading="lazy"></p><p>あとは引き渡し当日に以下3点を準備してData BoxをAzureデータセンターに引き渡します。</p><ol><li>認証コード</li><li>引き渡し準備完了メールのコピー</li><li>引き渡し担当者の写真つき身分証明書</li></ol><h1 id="Azureへのインポート"><a href="#Azureへのインポート" class="headerlink" title="Azureへのインポート"></a>Azureへのインポート</h1><img src="/images/20221108a/ワークフロー_(7).JPG" alt="ワークフロー_(7).JPG" width="1200" height="180" loading="lazy"><h3 id="インポートを待つ"><a href="#インポートを待つ" class="headerlink" title="インポートを待つ"></a>インポートを待つ</h3><p>引き渡し後は特にすることはなく、Azureへのインポートを待ちます。</p><p>今回のインポート（デバイス引き渡し完了→BLOBへのインポートまで）のリードタイムは、2台ともに約24時間で、予想よりも短納期で対応していただけた印象です。金曜日にData BoxがAzureデータセンターに到着し、土曜日にインポートが完了したのですが、営業日は考慮せずに対応してもらえるようでした。</p><p>Data Boxのワークフローについては以上になります。最後に、全体を通してつまずいたポイントを紹介します。</p><h2 id="つまずいたポイント"><a href="#つまずいたポイント" class="headerlink" title="つまずいたポイント"></a>つまずいたポイント</h2><h3 id="Azureにインポートしたらファイル権限はなくなるのに、一生懸命権限を保持しようとした"><a href="#Azureにインポートしたらファイル権限はなくなるのに、一生懸命権限を保持しようとした" class="headerlink" title="Azureにインポートしたらファイル権限はなくなるのに、一生懸命権限を保持しようとした"></a>Azureにインポートしたらファイル権限はなくなるのに、一生懸命権限を保持しようとした</h3><p>Azureにデータをインポートしてしまえばファイルの権限はなくなってしまうのですが、転送時に権限の保持をしようとしたために、余計な苦労をしました。</p><p>当初はNFSでData Boxのファイルシステムをマウントを予定していました。<br>先述のようにデータコピーでは<code>cp -prf</code>コマンドを実行したのですが、NFSマウントの環境下ではコピーコマンド実行時に権限の保持ができませんでした。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> -prf /tmp/databox_dev/test.txt /mnt/databox1/&lt;containername&gt;/databox1</span><br><span class="line"><span class="built_in">cp</span>: <span class="string">&#x27;/mnt/databox1/&lt;containername&gt;/databox1/test.txt&#x27;</span> の所有者の保護に失敗しました: 許可がありません</span><br></pre></td></tr></table></figure><p>コピーは成功しており目先の問題はないのですが、エラーメッセージが出るのは気になります。</p><p>Data BoxはWindows系OSで動いていると推測し、NFSでのマウントはユーザー名のマッピングにおいて相性が悪いと仮定しました。そこでNFSからCIFSでのマウントに切り替えところ、権限を保持したままコピーできるようになったのですが、Azureの世界ではファイルの権限は引き継がれません。</p><p>振り返るとファイルの権限を保持するオプションも、それを保持するための苦労も必要なかったと今は思います。</p><p>ファイルの権限を保持することに意味はなく、不具合を引き起こす場合もあるので、コピー時には余計なオプションを付け足すのは避けたほうがよいでしょう。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>以上、秋のブログ週間の一貫で、Data Boxを使ってみてわかった詳細なワークフロー・手順やつまずいたポイントを紹介してきました。</p><p>AzureのData Boxが日本で提供され始めたのは2019年ごろなので、比較的若いサービスです。</p><p>第三者のレポートが非常に少なく、検討段階では情報収集に苦労しました。</p><p>本記事がData Box利用を検討される方の参考になれば幸いです。</p><p>データ移行にかけられる期間と回線費用を考えると、数十TB規模のデータを1-2週間で移行できるのは非常に有効な手段だと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%83%9E%E3%82%A4%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3/">クラウドマイグレーション</category>
      
      <category domain="https://future-architect.github.io/tags/Azure/">Azure</category>
      
      <category domain="https://future-architect.github.io/tags/DataBox/">DataBox</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E7%A7%BB%E8%A1%8C/">データ移行</category>
      
      
      <comments>https://future-architect.github.io/articles/20221108a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SREの探究 - Spotifyの事例：Ops-in-Squads</title>
      <link>https://future-architect.github.io/articles/20221107a/</link>
      <guid>https://future-architect.github.io/articles/20221107a/</guid>
      <pubDate>Sun, 06 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221107a/teamwork-7423957_640.png&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;427&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221107a/teamwork-7423957_640.png" alt="" width="640" height="427"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIG 岸下です。<br><a href="/articles/20221031a/">秋のブログ週間</a>の5本目になります。</p><p>最近、Netflixで配信中のSpotify創業ドキュメンタリー：<a href="https://www.netflix.com/title/81186296">The Playlist</a>を見ました。創業ドキュメンタリーは鳥肌モノが多く、なんだかパワー貰える感じがして自分も頑張ろうと思わせてくれるので非常にオススメです<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p><p>そんなわけでSpotify熱が高まっていたこと、自分がプロジェクトの方でSRE活動に関わっていることもあり、<a href="https://www.oreilly.co.jp/books/9784873119618/">SREの探究：7章「SREのいないSRE：Spotifyのケーススタディ」</a>を読んでみました。</p><h2 id="そもそもSREって？"><a href="#そもそもSREって？" class="headerlink" title="そもそもSREって？"></a>そもそもSREって？</h2><p>恥ずかしながら、自分も現在のプロジェクトに配属されるまでSREの存在を知りませんでした。</p><p>SREはSite Reliability Engineeringの略で、サービスの信頼性をソフトウェアエンジニアリングの力で高めていこうぜ！というGoogle発祥の試みになります。</p><p>もはや、試みという枠組みからは抜け出していて一種の<strong>文化</strong>です。</p><p>詳しく知りたい人はオライリーの<a href="https://www.oreilly.co.jp/books/9784873117911/">SRE本</a>が有名どころです。<br>が、かなり分厚くて読むのが辛い人もいると思うのでTopotal社がやっているPodcast：<a href="https://open.spotify.com/show/1PUdFj8hXIZdyFat3nk3Af?si=2aaef285b25a4220">もう一度読むSRE</a>をオススメします。</p><p>SRE活動の例として、</p><ul><li>標準化<ul><li>開発に使うツールやクラウドサービスの設定標準を決めておく</li></ul></li><li>エラーバジェット<ul><li>あるサービスの許容できるエラーの量を数値で決めてしまって、機能開発のリリース可否を定性的に判断しよう</li></ul></li><li>自動化<ul><li>人間が手作業でデプロイするといつか事故るから、できるだけ自動化しよう</li></ul></li><li>アラートの改善<ul><li>多すぎるアラートはノイズにしかならないから、利用ユーザーの機会損失となるようなバグだけアラートを飛ばそう</li></ul></li></ul><p>などの活動になります。<br>SREは文化なので、SRE活動はSREの伝道師となってエンジニアリングチームに対して、恒常的にサービスの信頼性を維持・向上させる文化を醸成していきます。<br>以下の記事も参考にしてみてください。</p><ul><li><a href="https://future-architect.github.io/articles/20220518a/">TIG 原木さんの記事：OpenSLOについて</a></li><li><a href="https://engineering.mercari.com/blog/entry/20220225-cdb2b6deff/">メルカリ社：SRE伝道師としてMicroservices SRE チームが取り組んでいる事例</a></li><li><a href="https://www.youtube.com/channel/UChvqB_M4qllXCJOW9nNB-Cw">SRE NEXT 2022: 登壇資料</a></li></ul><h2 id="SpotifyのSRE：Ops-in-Squads"><a href="#SpotifyのSRE：Ops-in-Squads" class="headerlink" title="SpotifyのSRE：Ops-in-Squads"></a>SpotifyのSRE：Ops-in-Squads</h2><p>この章のタイトルでは「SREのいないSRE」と書いていますが、SpotifyにSREが居ないわけではありません。<br>Spotifyではプロダクトリリース前から<strong>運用に重きを置いた開発</strong>を行っており、例えば</p><ul><li>プロダクトリリース前の段階で開発メンバーの中に運用エンジニアを組み込む<ul><li>開発に関する議論の中で運用の健全性を対等なテーマとして扱う社風の醸成</li></ul></li><li>ベータ版時点で、運用をソリューションのライフサイクルに組み込む<ul><li>スケーラビリティ、信頼性、保守性など運用上の品質を早い段階で議論</li></ul></li><li>運用の責任をそのノウハウのあるところ、開発者の近くに移す<ul><li>自分で構築したものは自分で実行・運用</li></ul></li></ul><p>などの試みによって文化を根付かせていたそうです。</p><p>また、Spotifyのバックエンドは創業当初から多くの小さなサービスで構成、現代で言えば<strong>マイクロサービスパターン</strong>を採用することを構想しており、これらを組み合わせることでSpotifyのクライアントにコンテンツを提供しています。</p><p>これら2つの文化・構想が現在の<strong>Ops-in-Squads</strong>という運用体型を生み出しました。<br>直訳すればOpsはOperations（運用）、Squadsは分隊で、運用を細かく分けられた分隊が行う形態となります。<br>つまり、Ops-in-Squadsは各サービスの開発チーム側でデプロイから運用までの世話を見る、つまり開発チーム側でサービスの信頼性の担保に責任を持とうぜという文化になります。</p><h2 id="Ops-in-Squads確立までの道のり"><a href="#Ops-in-Squads確立までの道のり" class="headerlink" title="Ops-in-Squads確立までの道のり"></a>Ops-in-Squads確立までの道のり</h2><p>では、どういう経緯でOps-in-Squadsが確立されていったのでしょうか？<br>ざっくりではありますが、その経緯を要約します。</p><h3 id="ベータ版リリースとユーザー数の急激な増加（2007年～2010年）"><a href="#ベータ版リリースとユーザー数の急激な増加（2007年～2010年）" class="headerlink" title="ベータ版リリースとユーザー数の急激な増加（2007年～2010年）"></a>ベータ版リリースとユーザー数の急激な増加（2007年～2010年）</h3><p>場所はスウェーデン、時はインターネットが民主化し皆がエンタメコンテンツを渇望するような時代で、一世を風靡していたファイル共有サイト：パイレートベイ（<a href="https://ja.wikipedia.org/wiki/%E3%83%91%E3%82%A4%E3%83%AC%E3%83%BC%E3%83%88%E3%83%BB%E3%83%99%E3%82%A4">Wiki</a>）が問題視され、遂に閉鎖されたという背景があります。<br>そんな中、音楽コンテンツ配信の新生児Spotifyがベータ版リリースということでスウェーデン中の元パイレートベイユーザーがSpotifyへどっと流れ込みました。<br>詳しくは<a href="https://www.netflix.com/title/81186296">The Playlist</a>のエピソード1～2を御覧ください。</p><p>ユーザーの急激な増加はプロダクトに深刻な問題を発生させます。稀にしか起こらない、ほとんど理論上の問題点が大規模に顕在化したわけです。<br>具体的には</p><ul><li>ピーク時間帯にバックエンドサービスでサービス障害</li><li>使用率の高い状況で重要なデータを扱っているサーバーが反応しなくなる</li><li>サーバーのラックへの格納と積み重ねの日々</li></ul><p>などが本書で挙げられています。</p><p>利用ユーザーの多いサービスに関わったことのない自分としてはどれぐらいのつらみだったのか想像し難いのですが、<br><strong>「プロダクトの成功とは、負荷との格闘で今にも落ちそうになるシステムを手作業で何とか動かし続けるために、ノートPCを前にして過ごす数え切れないほどの夜という犠牲の上に成り立つのだ」</strong> という名言から、想像を絶する感があります😇</p><p>これに対して、</p><ul><li>スケーラビリティと信頼性を全面に打ち出す<ul><li>運用を重視する文化から、運用チームだけでなく開発チームも率先して運用の問題解決に協力</li></ul></li><li>スプリント期間中に開発チームのメンバーに「システム所有者デー」を設ける<ul><li>この日は主に各自のサービスのメンテナンス、アップグレード、一般的な改善強化に専念する時間が与えられる</li></ul></li><li>コアサービスの定式化<ul><li>（当時は）様々なバックエンドサービスが依存しあっており、あるサービスが別のサービスを救うための犠牲になることがあった</li><li>これによって、（睡眠不足の）運用エンジニアの意思決定に常に迷いを生じさせてしまっていた</li><li>そこで、コアサービスをユーザーに音楽コンテンツを届けるプロセスと定義し、他のサービスから依存関係を分離した</li></ul></li><li>ゴールキーパーの導入<ul><li>曜日毎などで、運用に関する問い合わせの一次受付の人間を決めておき、コンテキストスイッチが起こる人間の数を最小限に留めておく</li></ul></li></ul><p>などによって、この苦難を乗り越えていきました。</p><p>私が所属するプロジェクトでも曜日毎でゴールキーパー役が決まっており、その曜日以外は問い合わせを気にしなくて済むのでタスクに集中できる環境を作り出し、非常に良い試みだと思います。</p><h3 id="手作業の行き詰まり（2012年）"><a href="#手作業の行き詰まり（2012年）" class="headerlink" title="手作業の行き詰まり（2012年）"></a>手作業の行き詰まり（2012年）</h3><p>今日では、CI&#x2F;CDなど自動化の取り組みが一般化しつつありますが、2012年後半に100万ユーザーを突破したSpotifyは未だ手作業でのデプロイを行っていました。<br>デプロイ方法はというと、社内チャットで <strong>「～～ DEPLOY!」と叫ぶことで他のユーザーが別のデプロイ作業を行わないように排他制御を確保</strong> してから、手作業でスクリプトを実行するやり方を取っていたそうです。<br>まさに人間的排他制御…！2012年時点で100万ユーザーを抱えていたサービスがこのデプロイ方法を取っていたのは驚きです😮</p><p>手作業によるデプロイに加え、新規サーバーの購買と設置、インフラの変更に対するレビューとマージ、アラートの設定など運用チームの負担がどんどん増え、新しい機能や改良した機能をデリバリする能力はどんどん低下していきました。</p><p>バックエンドのアーキテクチャは初期の段階からスケールできるような設計が議論されておりスケールアップに対応済みでしたが、<strong>それに合わせた運用業務のスケールアップは集中型の運用SREチームでは対応できない</strong>ことに気づかされ、Ops-in-Squads（分隊型運用）を確立させる動きが始まるのでした。</p><h3 id="分隊型運用の導入（2013～2015年）"><a href="#分隊型運用の導入（2013～2015年）" class="headerlink" title="分隊型運用の導入（2013～2015年）"></a>分隊型運用の導入（2013～2015年）</h3><p>まずは運用チームの負担を減らすための大きな変革として、</p><ul><li>Jiraチケットで起票することで、新規サーバーのプロビジョニング自動化</li><li>サーバー用のDNSレコードの追加・デプロイを自動化</li><li>内製ツールを用いたDNS SRVレコードに関するテストとデプロイの自動化<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li><li>デプロイ権限を運用チームから開発チームへ移譲<ul><li>他の誰かからApproveを貰えた場合はセルフマージ可</li></ul></li></ul><p>などの自動化が導入されました。<br>ただ、これらの導入によって一時的に解決の兆しが見えたと思いきや、新たな問題が生まれます。<br>これまでは運用チームが行っていた「サニティーチェック」が取り除かれたことによって、バックエンドのカオス化を生み出してしまいました。<br>また、オンコール担当の運用エンジニアも「プロダクションで何が実行されているか」という対処に必要な理解を欠いていたりする事例が目立つようにもなりました。<br>運用チームの作業負担を減らすための自動化によって、今度は運用チームが全てを把握できなくなってしまい、全ての運用の面倒を見ることができなくなってしまったわけです。</p><p>そんなこんなでOps-in-Squads、つまりサービスに対するオンコールと運用の責任を開発チームが負うスタイルを形成する運びとなりました。<br>ただ、いきなり「運用チームはもう面倒見きれないから、サービスの面倒は自分たちで見てね」と言われても反発は必至です。<br>そこで、運用チームから運用エンジニアを開発チームに派遣することで <strong>「運用の地ならし」</strong> を行い、徐々にオンコールと運用の責任を開発チームへ移譲していくことでOps-in-Squadsを確立させていったようです。</p><p>この活動は当にEnabling SREで、中央のSREチームのメンバーが伝道師となり、他の開発チームでSREができる（Enabling）ように文化を根付かせていったわけですね🧐<br>Enabling SREに関しては以下の記事が参考になります。<br>参考：<a href="https://moneyforward.com/engineers_blog/2022/02/24/enabling-sre/">Money Forwad社：組織にSREの文化を作り上げていくEnabling SRE</a></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>今回、本書を読みながら感想記事を執筆したことでエンジニアリング（主に運用）の側面で見たSpotifyの成長とその運用形態であるOps-in-Squadsの成り立ちを学ぶことができました。組織に文化を根付かせる＝組織の人の意識を変えさせることになるので、本当に労力と根気のいる作業だと改めて思いました。</p><p>昨今ではマイクロサービスパターンが流行っていることもあり、規模の大きいサービスではOps-in-Squadsも1つの選択肢としてポジションを確立させていくのかなと思いました。<br>各サービス・機能の運用は各分隊に任せて、中央のSREチームは各分隊が運用コストを下げられるためのツール開発や新しい技術の標準化を進めていくスタイルとなりそうです。</p><p>また、本書では泥臭ストーリーが包み隠さず書かれており、更に事前に<a href="https://www.netflix.com/title/81186296">The Playlist</a>を見ていたこともあって、脳内に情景を浮かぶような解像度で読むことができました。<br>詳細なストーリーを読みたい方、他の事例を読みたい方は是非本書を手に取ってみてください。<br>自分もこの話を励みに、プロジェクトでの活動を邁進していきたいと思います。</p><p>アイキャッチは<a href="https://pixabay.com/ja/users/roszie-6000120/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=7423957">Rosy - The world is worth thousands of pictures</a>による<a href="https://pixabay.com/ja//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=7423957">Pixabay</a>からの画像を利用させていただきました。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">スペースXドキュメンタリー：<a href="https://www.netflix.com/title/81111324">Return to space</a>はイーロン・マスクの気迫に鳥肌が立ちました。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://github.com/spotify/rspec-dns">https://github.com/spotify/rspec-dns</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/SRE/">SRE</category>
      
      <category domain="https://future-architect.github.io/tags/Spotify/">Spotify</category>
      
      
      <comments>https://future-architect.github.io/articles/20221107a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>チームの開発生産性を高めるための心がけ</title>
      <link>https://future-architect.github.io/articles/20221104a/</link>
      <guid>https://future-architect.github.io/articles/20221104a/</guid>
      <pubDate>Thu, 03 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221104a/rocket-1103713_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;360&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221104a/rocket-1103713_640.jpg" alt="" width="640" height="360"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Technology Innovation Group 辻です。<br><a href="/articles/20221031a/">秋のブログ週間</a>の 4 本目です。</p><p>最近はアーキテクトとしてチームにジョインすることも増えてきました。より素早く、継続的にビジネス上の価値を提供するためにチームの開発生産性は重要です。チームの生産性を高めるために私が心がけているいくつかの内容を紹介します。</p><h2 id="心がけ"><a href="#心がけ" class="headerlink" title="心がけ"></a>心がけ</h2><ol><li>開発上のボトルネックを取り除く</li><li>コードべースの品質を保つ</li><li>コードを読みやすくする</li><li>素早くレビューに取り組む、質問&#x2F;相談にレスポンスする</li><li>体裁の一貫性を保つ</li></ol><h3 id="1-開発上のボトルネックを取り除く"><a href="#1-開発上のボトルネックを取り除く" class="headerlink" title="1.開発上のボトルネックを取り除く"></a>1.開発上のボトルネックを取り除く</h3><p>開発上のボトルネックになっているポイントを発見し、原因を特定し、対応する、ということです。一例をあげると以下のようなことです。</p><ul><li>コードの責務がはっきりしておらず、改修時の影響が大きくなる。意図しない挙動になる</li><li>そもそもテストコードがなく、機能仕様が満たされているのかわからない</li><li>改修しようと思ったが、そもそもコードベースのテストが失敗していた</li><li>SDK が素朴な API のみで構成されており、コードの記述量が増える、全体の見通しがわかりにくい</li><li>CI 環境でのテスト実行に時間がかかり、素早いフィードバックが得られない</li><li>必要なテストコードが膨大になり、テストの実装に時間がかかる、またテストコードのメンテナンスが難しい</li><li>デプロイが属人的で、デプロイ職人しかデプロイできない、デプロイには秘伝のコマンドが必要になる</li></ul><p>ボトルネックになるポイントは開発の規模&#x2F;仕様&#x2F;特性あるいは開発体制によっても変わります。アーキテクトとして実際の開発に向き合い、まだコードも書くからこそ、開発上のボトルネックポイントがわかり、またどうすればいいのかいくつかの手段のなかから最適な選択ができます。</p><h3 id="2-コードべースの品質を保つ"><a href="#2-コードべースの品質を保つ" class="headerlink" title="2.コードべースの品質を保つ"></a>2.コードべースの品質を保つ</h3><p>品質を保つことは開発生産性に大きく影響があります。え、品質？生産性は関係ないのでは？と思う方もいるかもしれません。しかし、そうではありません。品質が悪いと手戻りが発生し、結果的に生産性に跳ね返ります<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。品質を保つからこそ高い生産性が得られます。品質と生産性の議論は <a href="https://twitter.com/t_wada">t_wada</a> さんの『<a href="https://speakerdeck.com/twada/quality-and-speed-2022-spring-edition">質とスピード</a>』などの資料を参照してください。</p><p>コードベースの品質を保つために実践しているいくつかのプラクティスを紹介します。</p><h4 id="ユニットテストを充実させる"><a href="#ユニットテストを充実させる" class="headerlink" title="ユニットテストを充実させる"></a>ユニットテストを充実させる</h4><ul><li>データパターンを網羅する</li></ul><p>機能要件を満たすユニットテストを書きます。具体的にはインプットデータを入力したときに、想定しているアウトプットデータが出力されていることを確認します。業務上想定している入力パターンと出力パターンの網羅性が重要です。テストケースレビュー時は特にこのデータパターンの網羅性を意識して、業務観点から抜けているケースがないか気にしながらレビューしています。</p><p>なおコードカバレッジはテスト品質の指標の 1 つとしてよく挙げられますが、私は品質の絶対的な指標とはせずに、参考値として捉えています。もちろんデータパターンを網羅したテストを実装した結果、コードカバレッジが低ければなにか問題があるかもしれません。</p><ul><li>なるべくモックを使わず、本番環境に近い状態でテストする</li></ul><p>サーバアプリケーションの機能であれば、データベースへの IO を伴うことが多いでしょう。ユニットテストでも、モックを使わずになるべく実環境に近い状況でテストできるように整えています。たとえばデータベースであれば、ローカル環境にコンテナとして立ち上げて、そのデータベースに本番環境と同等の DDL を適用し、その環境をユニットテストに使用します。もちろんアプリケーションから外部の API にリクエストする場合はローカル環境に同等の環境を用意するのは難しいため、この場合はモックしてユニットテストすることは妥当です。<code>Cypress</code> などを使ったフロントエンドの E2E テストをローカルで実施するときに、バックエンド API に本物の実装を使うことはテストのコストが高くなるため、モックすることもあるでしょう。</p><h4 id="自動テストを行う"><a href="#自動テストを行う" class="headerlink" title="自動テストを行う"></a>自動テストを行う</h4><ul><li>意図しない振る舞いをより早く捉える</li></ul><p>ユニットテストを充実させたうえで、それを継続的にテストします。あるタイミングでは PASS していた実装もバグ修正や機能追加、リファクタリングなどにより変化するものです。コードの変更だけでなく、ランタイムのバージョンをアップデートするなどのインフラ関連の変更もあるでしょう。こうしたコードやインフラの変更による影響が意図しているものだけであるか、意図せず挙動が変わっていることがないか、PR をマージする前に自動テストして確認します。そして自動テストを PASS した PR だけをマージします。自動テストが失敗していれば、その内容を実装者に確認します。</p><p>万が一 master ブランチを使った自動テストが失敗していた場合は slack などに通知を飛ばすようにしています。迅速に状況を確認し、影響度に応じて対応します。</p><ul><li>テストを十分早く動作させる</li></ul><p>最初のボトルネックのところにも少し書きましたが、テストコードが増えるにつれ、テストの所要時間が増えることがよくあります。自動テストは必要ですが、そのテストを十分早い時間で動作させることも必要です。高速化するための方針としては、テスト範囲を狭める、テストを分割して並列に実行できるようにする、などがあります。今、私が所属しているチームでは後者の方針で CI 環境上での自動テストを高速化しています。具体的には CI 環境に CircleCI を使っており、<a href="https://circleci.com/docs/ja/parallelism-faster-jobs/">テスト分割と並列実行</a>にある <code>circleci tests split</code> などを組み合わせてテストを分割し、分割したテストを異なるコンテナ上で並列に実行しています。</p><h3 id="3-コードを読みやすくする"><a href="#3-コードを読みやすくする" class="headerlink" title="3.コードを読みやすくする"></a>3.コードを読みやすくする</h3><p>読みやすいコードはコードが修正しやすく、また修正に伴う影響範囲も把握しやすいです。本番環境で運用されるソフトウェアのコードであれば、一度書いたらそれで終わりとはならず、ビジネスの進化、外部環境の変化、ソフトウェアの不具合などにより、将来の自分あるいは他の誰かに読まれます。コードが継続的に読まれる以上、その可読性は開発生産性に大きく影響します。</p><p>とはいえコードの可読性はこれだけで本一冊かけるテーマですので、詳細は『<a href="https://www.oreilly.co.jp/books/9784873115658/">リーダブルコード</a>』などの書籍や、<a href="/articles/20190610/">ソースコードを綺麗にするためにまず心がけたい３点</a> の記事に譲ります。</p><p>私がレビューで特に気をつけて確認しているポイントは以下です。</p><ul><li>意図した命名になっているか、不必要に抽象的な命名になっていないか？</li><li>コードの責務は妥当か？</li><li>シンプルに実現しているか、早すぎる最適化をしていないか？</li><li>コードベースの構造と照らし合わせて、追加&#x2F;修正するコードやモジュールの粒度感&#x2F;構造は妥当か？</li></ul><h3 id="4-素早くレビューに取り組む、質問-x2F-相談にレスポンスする"><a href="#4-素早くレビューに取り組む、質問-x2F-相談にレスポンスする" class="headerlink" title="4.素早くレビューに取り組む、質問&#x2F;相談にレスポンスする"></a>4.素早くレビューに取り組む、質問&#x2F;相談にレスポンスする</h3><p>この項目はコミュニケーションに関する心がけです。</p><p>レビューを受けたときは素早く取り組むようにしています。コードレビューに関する Google のプラクティス<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>にも「あるタスクに集中的に取り組んでいる最中でなければ、コードレビューの依頼が来たらすぐに着手してください。」と書いてありました。レビューした側は作業がブロッキングされることが多く、進捗を出しにくいからです。シニアなメンバであればうまくコンテキストスイッチできるケースも多いですが、ジュニアなメンバだとタスクをシングルで進めることも多く、レビュー待ちによるブロッキングの影響はより大きいと感じています。</p><p>レビューだけでなく普段のコミュニケーションでも同様です。最近はリモートで非同期コミュニケーションを取りながら開発することが増えており、より意識しています。たとえば「ここの仕様がわからず、ちょっと XXX について教えてください」「実装方針を相談したいのですが、…」みたいな質問&#x2F;相談があります。質問&#x2F;相談した側としてはその内容を解消しないと次の進捗が出しにくいケースがあり、このようなテキストコミュニケーションも気づいたタイミングで素早くレスポンスするようにしています。<br>レスポンスするのが重要です。すぐに回答できなければ「ちょっと今回答できないので 1 時間後に回答します」とか、自分ではわからなければ「私はわからないです、ZZZ さんわかりますか？」みたいなレスポンスも有効です。何かしらのレスポンスがあるだけでも受け手の印象は変わります。</p><h3 id="5-体裁の一貫性を保つ"><a href="#5-体裁の一貫性を保つ" class="headerlink" title="5.体裁の一貫性を保つ"></a>5.体裁の一貫性を保つ</h3><p>最後はやや具体的な心がけですが、地味に効果的です。</p><p>コードレビューをしていると、コードのフォーマットやファイル終端の改行有無、文字コードなどの体裁が開発者の中で一貫しておらず、PR にコメントすることがあります。しかし、本来であれば、このような体裁に関するコメントは不要です。コードのロジックそのもののレビューに集中できることが望ましいです。コードベース全体や開発者の間で、体裁に一貫性があることが重要です。チーム内で方針を合意して、設定としてコードベースに反映するのが良いでしょう。これにより自転車置場の議論<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>を避けられます。</p><p>ファイルの改行コード、インデントなどの設定は <a href="https://editorconfig.org/"><code>EditorConfig</code></a> を使うことが多いです。VSCode<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>や IntelliJ IDEA など多くのエディタがサポートしています。<code>EditorConfig</code> の設定ファイル例は以下のとおりです。</p><figure class="highlight ini"><figcaption><span>.editorconfig</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">root</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">indent_style</span> = tab</span><br><span class="line"><span class="attr">indent_size</span> = <span class="number">4</span></span><br><span class="line"><span class="attr">end_of_line</span> = lf</span><br><span class="line"><span class="attr">charset</span> = utf-<span class="number">8</span></span><br><span class="line"><span class="attr">trim_trailing_whitespace</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">insert_final_newline</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[*.json]</span></span><br><span class="line"><span class="attr">indent_style</span> = space</span><br><span class="line"><span class="attr">indent_size</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>コードフォーマットはチームで会話して決めた方針を <code>Makefile</code> などに記述して <code>make fmt</code> などでフォーマットすることが多いです。たとえば SQL のフォーマットに <a href="https://github.com/future-architect/uroboroSQL-formatter"><code>future-architect/uroboroSQL-formatter</code></a> を使うと決めたのであれば、以下のように <code>fmt</code> のタスクとしてフォーマットのコマンドを記載するイメージです。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">fmt:</span></span><br><span class="line">@usqlfmt -m directory files</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>チームの開発生産性を高めるいくつかの私の心がけを紹介しました。抽象度の高いものからすぐに実践できそうな具体的なものまで様々ピックアップしました。普段、技術ブログにはプログラミング、特に Go 言語に関する記事を投稿することが多いですが、秋のブログ週間ということで、私のいくつかの心がけを言語化することにチャレンジしました。</p><p>最後まで読んでいただきありがとうございました。</p><p>アイキャッチは<a href="https://pixabay.com/ja/users/geralt-9301/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1103713">Gerd Altmann</a>による<a href="https://pixabay.com/ja//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1103713">Pixabay</a>からの画像を利用させていただきました。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://i2key.hateblo.jp/entry/2017/05/15/082655">https://i2key.hateblo.jp/entry/2017/05/15/082655</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">VSCode の場合はプラグインをインストールする必要があります。</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;"><a href="https://fujiharuka.github.io/google-eng-practices-ja/ja/review/reviewer/speed.html">https://fujiharuka.github.io/google-eng-practices-ja/ja/review/reviewer/speed.html</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;"><a href="https://ja.wikipedia.org/wiki/%E3%83%91%E3%83%BC%E3%82%AD%E3%83%B3%E3%82%BD%E3%83%B3%E3%81%AE%E5%87%A1%E4%BF%97%E6%B3%95%E5%89%87">https://ja.wikipedia.org/wiki/パーキンソンの凡俗法則</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88/">マネジメント</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B3%E3%83%BC%E3%83%89%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC/">コードレビュー</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%8F%AF%E8%AA%AD%E6%80%A7/">可読性</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%81%E3%83%BC%E3%83%A0%E9%96%8B%E7%99%BA/">チーム開発</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%94%9F%E7%94%A3%E6%80%A7/">生産性</category>
      
      
      <comments>https://future-architect.github.io/articles/20221104a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ポッドキャスト運営をしていて思うこと、収録Tips</title>
      <link>https://future-architect.github.io/articles/20221102a/</link>
      <guid>https://future-architect.github.io/articles/20221102a/</guid>
      <pubDate>Tue, 01 Nov 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221102a/microphone-338481_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;425&quot;&gt;

&lt;p&gt;こんにちは、&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221102a/microphone-338481_640.jpg" alt="" width="640" height="425"><p>こんにちは、<a href="https://open.spotify.com/show/6ntaBQ28GSDaOztBphH6oi">Future Tech Cast</a> メインパーソナリティの村田です。<br>今回は<a href="/articles/20221031a/">秋のブログ週間</a>連載3日目ということで、ポッドキャスト運営として活動する中で思うこと、ナレッジをつらつらと書いていきたいと思います。</p><p>私はフューチャーにて Future Tech Cast を運営しつつ、プライベートでも1本ポッドキャストを運営しています。本記事ではせっかくなので2つのポッドキャスト運営を通じて培ったノウハウにも触れたいと思います。</p><h1 id="ポッドキャストを始めたわけ"><a href="#ポッドキャストを始めたわけ" class="headerlink" title="ポッドキャストを始めたわけ"></a>ポッドキャストを始めたわけ</h1><p>フューチャーには元々 <a href="https://future-architect.github.io/">Future Tech Blog</a> があり、2016年から続く長寿コンテンツとして君臨しています。ちょこちょこはてぶランキング上位に食い込む記事が登場したり、皆さんに愛されるブログとなっているかなと思います。フューチャーとしての技術発信の軸足はいまも変わらずこの技術ブログに置かれているのですが、コロナをきっかけにポッドキャストの機運が高まってきました。</p><p>これはもう世間で散々こすられた話ではありますが、おうち時間の増加(※)に伴い、「耳だけ」で楽しめるコンテンツとしてのポッドキャストの需要が増加しました。「この波に乗るしか無い…！」という機運もありポッドキャストを始める流れが社内で生まれ、2020年11月に記念すべき<a href="https://open.spotify.com/episode/6gr6Hllhjkf9i55aVdD1o7?si=TBspH7wmRVm9WmE_JMRZbw">第1回のエピソード(#1 Real World HTTP著者の澁川さんと語り尽くす会)</a>を公開するに至りました。</p><p>※日本国内におけるポッドキャスト利用実態についてはオトナル様の「ポッドキャスト国内利用実態調査2021」が一番丁寧に調査・整理されている印象です。「<a href="https://prtimes.jp/main/html/rd/p/000000035.000035509.html">オトナル、朝日新聞社と共同で「ポッドキャスト国内利用実態調査2021」を実施。使用サービスはSpotifyがApple Podcastを抜いてトップに</a>」 の記事内でも言及されていますが、ポッドキャストの聴取シチュエーショントップは「家事中(35.2%)」であり、コロナ禍でのリモートワーク促進・おうち時間の増加がポッドキャストユーザの増加を後押ししていることが分かります。</p><h1 id="ポッドキャストの良さ・ブログとの違い〜相性の良いコンテンツとは〜"><a href="#ポッドキャストの良さ・ブログとの違い〜相性の良いコンテンツとは〜" class="headerlink" title="ポッドキャストの良さ・ブログとの違い〜相性の良いコンテンツとは〜"></a>ポッドキャストの良さ・ブログとの違い〜相性の良いコンテンツとは〜</h1><p>そんなこんなで波に乗る形でポッドキャスト企画が進んでいきましたが、改めて真剣にポッドキャストの存在意義を考えてみると、音声コンテンツ固有のメリットもあるなと思い至りました。というのも、ブログ記事は良くも悪くも文章と図があるのみなので、書き手がどんなキャラクターなのかはなかなか伝わりづらいです。もちろん文体にキャラクターがぷんぷん滲み出るタイプの人もいますが、音声コンテンツへ載せられる情報量には敵わないなと思っています。そういった意味で、音声コンテンツであるポッドキャストはフューチャーの技術を発信する媒体として一定の役割を担えるはずです。</p><p>実はポッドキャストを始める際に、「YouTubeの動画投稿も始めちゃう？」といった話もあがりました。結果的にこれは却下されたのですが、その大きな理由のひとつは「編集コスト」でした。その観点でもポッドキャストは優秀です。もちろんどこまでこだわるかにはよりますが、字幕を挿入するなど素材に対しての足し算が発生する動画編集に対し、音声コンテンツであるポッドキャストの編集は素材をベースに引き算な編集を行うことが主です。そんな背景もあり、編集は素材音源の長さの1.5〜2倍程度の時間で完遂できています。</p><p>話をブログとの違いに戻しますが、先程も書いたようにブログは「文章と図」、ポッドキャストは「音声のみ」という媒体特性から、各々得意なコンテンツが異なります。実はポッドキャスト開始当初は「技術ブログの音声版にしよう」という思想の元スタートさせたのですが、実際に収録を重ねていくと難しい面も浮き彫りになってきました。技術ブログの記事ではやってみた系記事だったり図やソースコードを見せつつの実装ノウハウ・Tips系記事なども多く、そういったコンテンツを音声のみでお届けしようとすると非常に伝わりづらくなってしまいます。ゆえにFuture Tech Castでは、技術に軸足を置きつつも人・組織・考え方・キャリアといったポイントにスポットを当ててフューチャーの生の声を届けるコンテンツとして育てていっています。</p><p>もっとパーソナリティとしての力量をあげて技術的な情報についての密度をあげていきたいなとも思っていますが、技術に携わる「人」に焦点をあてるいまのやり方は私個人としても非常にやりやすく、話を聞いていても楽しいなと感じられるのでこれはこれでひとつのスタイルとして良いのかなと思っています。</p><p>超個人的な話になりますが私はfukabori.fmのパーソナリティであるiwashiさんをリスペクトしており、ちょくちょく配信を聞かせていただいてます。そしていつもながらに思うのですが、中々あのレベルの情報密度を生み出すところへ到達するのは難しいですね。でもやはり技術系発信コンテンとしては「技術の情報密度」は大事にしたく、今後もっと伸ばしていきたいです。りっちゃ・りょかちのやいやいラジオにiwashiさんがゲスト出演した回がありまして、ここで語られていた考え・テクニックは非常に興味深かったです。（<a href="https://open.spotify.com/episode/45LsOzUI4S3pYisWnNdjaJ">#170 fukabori.fmのiwashiさんがしたかった雑談</a>）</p><h1 id="運営・収録に際してのTips"><a href="#運営・収録に際してのTips" class="headerlink" title="運営・収録に際してのTips"></a>運営・収録に際してのTips</h1><p>ポッドキャスト運営および収録を始めてからかれこれ2年が経ちましたが、それなりに運営ノウハウだったり収録環境周りのTipsも溜まってきたのでこのタイミングでご紹介したいと思います。</p><h2 id="運営で心がけていること"><a href="#運営で心がけていること" class="headerlink" title="運営で心がけていること"></a>運営で心がけていること</h2><p>私が定常的に運営として行っている仕事は大きく3つあります。</p><ol><li>公開スケジュール管理</li><li>ゲストの調整</li><li>収録音源の編集・公開</li></ol><p>まずは1つめの公開スケジュール管理ですが、継続的な活動にしていくためにもやはり重要です。一時期これが崩れてしまった際は投稿頻度が激減してしまいました…ゆえに、ゲストの人が決まったら自分を律する意味も込めて「TechCast公開日」という予定をカレンダーに入れるようにしています。最近では1回の収録音源が編集を経て前後編の2つに分割されることが多いので、「収録→翌週前編公開→翌々週後編公開」の3週間を1サイクルとして、バッファも持たせつつスケジュールを組んでいます。</p><p>ゲストの調整について心がけている点は「シリーズ企画を練る」ことです。これは技術ブログ側の運営ノウハウをそのまま流用しているのですが、やはりシリーズテーマが決まっている方がゲストの人を呼びやすいです。ちょうどこの記事を書いているタイミングでは「AIシリーズ（※）」の企画が動いていますが、すでに3ヶ月先までの予定が埋まっています。（これは非常に…非常にありがたいことです…!!!）</p><p>※シリーズ初回は <a href="https://open.spotify.com/episode/7dEUQ88C3UlRSmVsMWGlsf">#34 MLOpsエンジニアって何やるの？（前編）</a> です。ぜひお聞きくださいmm</p><p>編集のタイミングでも様々意識しているポイントがあります。いわゆる”雑談”をお届けするポッドキャストではないので、変に間延びしないよう会話の間などは不自然になりすぎない程度で極力カットしています。また、「BGMをいれるか」についての議論も行われたのですが、番組の特性上倍速再生が主なユースケースと考え、BGMは入れないことにしました。</p><h2 id="収録環境で心がけていること"><a href="#収録環境で心がけていること" class="headerlink" title="収録環境で心がけていること"></a>収録環境で心がけていること</h2><p>収録は基本的にZoomで行っているのですが、設定周りで気をつけていることがいくつかあります。その中でも特に重要なのが「参加者ごとに個別のオーディオファイルでレコーディングする」設定(※)です。通常Zoomミーティング参加者の音声は全てひとつの音声ファイルにマージされた形でレコーディングされます。ただ、この状態だと誰かの音声だけボリュームを調整したり、あるいは不要な相槌をカットするといった作業が難しくなります。しかしこの機能を使うと話者ごとにオーディオファイルが分割されるため、前述のような編集がとても容易です。個人的にはポッドキャスト収録時はほぼマストな機能なのかなと思っています。</p><p>※この機能はローカルレコーディングの場合のみ設定可能で、クラウドレコーディングでは利用できない機能なので注意してください。</p><p>またZoom収録時の悩みとして「音声品質が低くなってしまう」というものがあるかと思います。これは各人のネットワーク環境や収録環境などにも依存するため一律の解はないですが、ベターな設定を入れ込むことは可能です。私が使用しているのは「オリジナルサウンド」の設定です。この機能を使うとよりクリアな音質で収録することが可能です。私は「高忠実度音楽モード」を有効にして収録を実施しています。</p><p>Zoom側の設定はこれでOKなのですが、収録時には他にも様々ハプニングが発生します。スマホの通知音が鳴ってしまったり、PCに入っているウイルス対策ソフトの定期スキャンがちょうど実行されて猛烈に回転するファンの音が乗っかってしまったり…ゆえにスマホなどは消音モードに設定の上、定期的にPC負荷を上げてしまうことが分かっているソフトウェアについては一時的に動作を停止させるなどの下準備も欠かせません。</p><p>こうした環境周りの整備のおかげもあり、オンライン収録のみで運営している Future Tech Cast も特にやり辛さは感じずに収録を進められています。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回はポッドキャスト運営をする中で心がけていること、そして収録に関わるTipsをご紹介させていただきました。すでにポッドキャスターな方、そして未来のポッドキャスターに向けてこの記事が少しでも広く届くとうれしいです。</p><p>アイキャッチは<a href="https://pixabay.com/ja/users/theangryteddy-123386/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=338481">Daniel Friesenecker</a>による<a href="https://pixabay.com/ja//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=338481">Pixabay</a>からの画像を利用させていただきました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/">運営</category>
      
      <category domain="https://future-architect.github.io/tags/TechCast/">TechCast</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%9D%E3%83%83%E3%83%89%E3%82%AD%E3%83%A3%E3%82%B9%E3%83%88/">ポッドキャスト</category>
      
      
      <comments>https://future-architect.github.io/articles/20221102a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go入門の軌跡</title>
      <link>https://future-architect.github.io/articles/20221101a/</link>
      <guid>https://future-architect.github.io/articles/20221101a/</guid>
      <pubDate>Mon, 31 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221101a/top.drawio.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;430&quot;&gt;

&lt;p&gt;Gopher wan designed by Renee Frenc.&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221101a/top.drawio.png" alt="" width="800" height="430"><p>Gopher wan designed by Renee Frenc.</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニットの今泉です。<br><a href="/articles/20221031a/">秋のブログ週間</a>の２本目です。</p><p>業務ではJavaを使用する機会が多かったのですが、今年に入ってからGo言語を扱うようになりました。</p><p>これまでプライベートではエディタに叱られながらGoを雰囲気で書いていたりはしたのですが、これを機にしっかりと学ぶことにしました。</p><p>本記事ではキャッチアップのため自分が参考にさせていただいたリソースを紹介させていただきます。</p><p>一通り学んだ結果、コードが読み解けなかったりWebAPI開発で困るような場面はかなり減ったと思います（コードレビューでGoっぽくないよね、みたいな指摘は受けるのでまだまだ精進は必要です）。</p><h1 id="言語仕様を学ぶ"><a href="#言語仕様を学ぶ" class="headerlink" title="言語仕様を学ぶ"></a>言語仕様を学ぶ</h1><ul><li><a href="https://go.dev/tour/welcome/1">A Tour of Go</a><br>Goの言語仕様をブラウザ上で学ぶことができる公式のチュートリアルです。<br>実際にコードを実行しながら一通りの書き方や仕様を把握することができました。</li><li><a href="https://go.dev/doc/effective_go#allocation_new">Effective Go</a><br>Goらしい書き方が紹介されているガイドラインです。こちらも公式から。<br>時々思い返したように見直したりします。</li><li><a href="https://future-architect.github.io/articles/20190713/">Goを学ぶときにつまずきやすいポイントFAQ</a><br>Goを始めて一番最初につまずいたポイントは大体この記事で解消することができました。</li><li><a href="https://future-architect.github.io/articles/20200311">JavaプログラマーのためのGo言語入門</a><br>実際に今まで自分が利用していた言語との違いを把握することで、より経験に近い形で仕様についての理解を深めることができました。Javaプログラマーの方はまず本記事を読んでGoの解像度を高めることで、より早くキャッチアップができると思います。</li><li><a href="https://www.how2go.dev/">How to GO</a><br>基本的な文法について「これってGOでどう書くんだったっけな..?」となった時にいつも参考にさせていただいています。</li></ul><h1 id="コードを読む"><a href="#コードを読む" class="headerlink" title="コードを読む"></a>コードを読む</h1><ul><li><a href="https://github.com/golang/go">golang&#x2F;go</a></li><li><a href="https://future-architect.github.io/articles/20200310/">Goの標準ライブラリのコードリーディングのすすめ</a><br>やはり新しい言語に触るからには標準ライブラリの仕様について正しく理解しておきたいものです。よく利用するため距離が近いというのも精神的なハードルが低くてgoodです。<br>と、いいつつも標準ライブラリだけでかなりのボリュームがあるためどうしようかと思案していたところ、フューチャー技術ブログで標準ライブラリのコードリーディングについて言及していた記事があったので参考にしてerrors、net&#x2F;http、sort、testingあたりを読みました。<br>またコードリーディング会やらないかなあ…。（当時私はGoに入門していませんでした）<br>また、<a href="https://github.com/golang/go/wiki">Wiki</a>にもかなり有用な情報が詰まっていたので参考になりました。</li><li><a href="https://future-architect.github.io/articles/20200601/">Goのテストに入門してみよう！</a><br>コードリーディングを始めたもののtestingパッケージが激ムズだったので、知識の補完に参考にさせていただきました。</li><li><a href="https://future-architect.github.io/articles/20210714a/">Goのおすすめのフレームワークはnet&#x2F;http</a><br>私はWEB開発が中心のため、なにかWEBフレームワークのコードも読んでおこうか…と思ったのですが、いざ読んでみると「はわわ、これってnet&#x2F;httpのラッパーじゃね..？」というお気持ちになり、この記事を読んで確信に変わったためnet&#x2F;http自体を読むようにしました。</li></ul><h1 id="書籍を読む"><a href="#書籍を読む" class="headerlink" title="書籍を読む"></a>書籍を読む</h1><ul><li><a href="https://www.oreilly.co.jp/books/9784873119694/">実用 Go言語</a><br>Goはシンプルな言語であるがゆえにある機能を満たすコードを書こうとすると様々なものを組み合わる必要があります。<br>本書ではその組み合わせ..つまり、より実用的なGoの書き方について紹介されており、自分がGoでの開発を進めていく中で必要になったテーマをつまみ食い的に読んで参考にさせていただいています。インターネットではお目当ての知識にたどり着くのが大変ですが、目次を見ただけでサッと欲しい情報が得られるのが書籍の強みですね。</li><li><a href="https://www.oreilly.co.jp/books/9784873119038/">Real World HTTP</a><br>Goについてではなく、ウェブの知識や技術について触れている書籍です。<br>元々、HTTPの基礎を学ぶため数年前に購入していたものですが、そいうえば実装がGoで書かれていたな、と思い出し知識の整理も兼ねて読み直してみました。<br>net&#x2F;httpライブラリを読んだあとに本書で紹介されているコードを自分で実装してみたりすると理解が進んで気持ち良かったです。</li></ul><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>分かっていたことではありましたが、自分がGoをキャッチアップするのにかなり当社のメンバーが外部発信している記事&#x2F;書籍に助けられています。</p><p>日本語での２次情報はほぼ当社から得ているかもしれません…。<br>これらのリソースを享受するだけではなく、発信する側にも回れるよう引き続き努力していきたいと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/">初心者向け</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      
      <comments>https://future-architect.github.io/articles/20221101a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>バーチャルデスクトップ環境の現状と、VRの個人的な感想</title>
      <link>https://future-architect.github.io/articles/20221031b/</link>
      <guid>https://future-architect.github.io/articles/20221031b/</guid>
      <pubDate>Sun, 30 Oct 2022 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは。CSIGの井上です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/articles/20221031a/&quot;&gt;秋のブログ週間2022&lt;/a&gt; の1本目です。&lt;/p&gt;
&lt;p&gt;私はしばらく前からVRに興味があり、Oculus</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは。CSIGの井上です。</p><p><a href="/articles/20221031a/">秋のブログ週間2022</a> の1本目です。</p><p>私はしばらく前からVRに興味があり、Oculus Go（2018&#x2F;05-2020&#x2F;12）から使っています。MetaのHMDは、最近Oculus Quest Proが発売され、来年2023年後半にはOculs Quest3が発売される可能性が高いという、VRヘッドセットとしては定番の製品です。最近はそこそこVRを利用したサービスや製品が増えましたが、まだ一般的という領域までは広がっていません。ヘッドセットという日常で使わないものが必要な点で、普及しないのでしょう。</p><p>モノが普及するには、「人間の欲望を刺激するか業務で使うか」だと思うので、今回は一般の業務利用で使えそうな、バーチャルデスクトップ環境についてお話しをすることで普及の一助になればと思い、書いてみました。</p><ul><li>本稿の注意事項</li><li>バーチャルデスクトップ環境とは？</li><li>Immersedの場合</li><li>VRの個人的な感想</li><li>今後のVRの展望</li></ul><h1 id="本稿の注意事項"><a href="#本稿の注意事項" class="headerlink" title="本稿の注意事項"></a>本稿の注意事項</h1><p>本稿は、これを書いている井上個人の見解であり、Futureグループとしての見解ではありません。<br>私個人の見解を共有することで、この分野の興味を持っていただいたり、議論のヒントになればと思い、公開します。</p><ul><li>プログラム言語など違い、発展途上で周辺環境が変わりやすい分野と考えます。その為、気が付けば常識が変わっている、という事は十分あり得ます。</li><li>体験しない事には議論ができない分野でもあるため、まずは興味を持つ&#x2F;体験することが重要と考えます。</li><li>VR関連に関する読み物、という感覚でご覧ください。</li></ul><p>あと、この記事を書くことで、会社でバーチャルデスクトップ使えるようにならないかな…、という下心もあります（後述のセキュリティ問題を気にしないといけないので、難しいかも）。</p><p>追加説明が必要そうな単語は、「（※）」を付けており、本稿最後の章に補足説明を記載しています。</p><h1 id="バーチャルデスクトップ環境とは？"><a href="#バーチャルデスクトップ環境とは？" class="headerlink" title="バーチャルデスクトップ環境とは？"></a>バーチャルデスクトップ環境とは？</h1><img src="/images/20221031b/image.png" alt="image.png" width="720" height="720" loading="lazy">(meta Horizon Workrooms)<p>PC作業をVR上で行うための環境、と言えます。VR空間にディスプレイを配置し、そこでいつも通りPC作業をする感じです。</p><p>バーチャルデスクトップの利点としては以下が挙げられます。</p><ul><li>物理的なモニタが不要になる</li><li>作業環境を自由に変更できる</li><li>ヘッドセットで視界が奪われる為、集中力が高まる</li></ul><p>物理的なモニタが不要になる点ですが、PCとヘッドセットをリンクすることで、VR上に仮想モニタを含むデスクトップ環境を表示します。アプリケーションによりますが、複数モニタを仮想的に配置することができ、外付け物理ディスプレイを持っていないノートPCでも 3画面作業 ができたりします（但し、一般的には解像度がFHD程度が限界。ヘッドセット側の解像度や処理負荷に依存する為）。屋外でFHDを3-4画面を使った作業が、ヘッドセットのみで実現できます。</p><p>作業環境の自由な変更については、例えば「喫茶店」「森の中」「ビーチ」「映画館」「宇宙」などの周辺風景を設定することができます（但し、アプリケーションによる）。同時に、環境音も実装されていることが多いので、「喫茶店でBGMを聞きながら」や、「森の別荘で鳥のさえずりを聞きながら」で作業できたりします。出社して仕事をしているが気分転換に喫茶店で少し作業する、のような感覚で作業環境を変えられます。</p><p>そして集中力が高まる件ですが、リアルの視界がほぼ奪われ、VRとして作成された必要な情報のみが目に入ってくるので、集中力が途切れづらいという利点があります。自宅のごちゃごちゃした部屋でリモートワークをするのと、（見た目だけは）山小屋で暖炉の音を聞きながら仕事をするのでは、雑念の入り方が違いますよね。</p><p>ワーケーションで使えれば、ショルダーハッキング（※）の心配をしなくて済むので、便利なものだと思います。</p><p>そんな利点のあるバーチャルデスクトップ環境ですが、例えばOculus Quest2で使えるアプリケーションだと以下があります。</p><ul><li>Immersed (<a href="https://www.immersed.com/">https://www.immersed.com</a>)</li><li>VertualDesktop (<a href="https://www.vrdesktop.net/">https://www.vrdesktop.net/</a>)</li><li>BigScreen (<a href="https://www.bigscreenvr.com/">https://www.bigscreenvr.com/</a>)</li><li>Meta Holizon Horkrooms (<a href="https://www.meta.com/jp/work/workrooms/">https://www.meta.com/jp/work/workrooms/</a>)</li><li>etc..</li></ul><p>この中で仕事やプログラミング等の作業で使うなら、Immersedが使いやすかったので、これを例に紹介します。その他のアプリケーションも数年前から格段に進化しているのですが、例えば「みんなで集まって映画を見る」のように、作業用途には合わないものもあります。</p><p>Immersedをとり上げますが、特定の製品をとり上げるというより、「プログラミングの話をするときにGo言語を例に話す」のような説明のための手段や実装例として取り上げています。他の製品でも同様のことはおそらくできるはずです。</p><h1 id="Immersedの場合"><a href="#Immersedの場合" class="headerlink" title="Immersedの場合"></a>Immersedの場合</h1><p>Immersedで便利な機能は、以下のようなものがあります。</p><img src="/images/20221031b/image_2.png" alt="image.png" width="432" height="432" loading="lazy"><ul><li>仮想モニタ機能<ul><li>実機にモニタが無くても、仮想的にモニタを追加できます。</li><li>他のアプリケーションだと、実機に接続されているもののみ、1枚だけのみ、というものが多く、ビデオカードなしに複数枚モニタを追加できるものは現時点ではImmersedのみのようです。</li><li>但し、モニタ数が多くなると負荷が高くなる、FHD(1920x1080)に抑えられてしまう、という制限はあります。リアルで4Kモニタを付けていても、FHDになります。</li><li>解像度は処理負荷に直結し、処理負荷増大はフレームレート落ちを招き、それにより実用に耐えなくなるので、仕方がないと思われます。</li></ul></li><li>仮想カメラ機能<ul><li>VR上でバーチャルなWEBカメラを利用できます。画像3枚目は、zoomに参加している例です。</li><li>これにより、WEBオンラインミーティングにバーチャルデスクトップ環境で参加した際に、アバターを表示することができます。<ul><li>VR上で会議をすれば全員アバターでコミュニケーションを取れますが、相手がヘッドセット等を持っていない場合は、ZoomやGoogle meetやMicrosoft Teamsのようなものを使う事になると思います。その際に違和感なく（？）参加者画面を表示できます。</li></ul></li></ul></li><li>部分的パススルー機能<ul><li>VR上でデスクトップを操作する際、普通は物理キーボードやマウスを見ることができません。</li><li>今までは「特定製品であれば自動認識して、VR上に表示できる」という手法が探られていましたが、現在は「VR上でキーボードがある部分だけパススルー（※）で現実を見せる」という方法で物理キーボード等を見ることができるようになりました。画像1,3枚目下側の黒い長方形の部分が、パススルー表示されている部分です。スクリーンショットではパススルー内容は記録されないようです。<ul><li>自作分割キーボードは、カメラで認識してそのオブジェクトをVR上に表示する、のは至難の業です。それであれば、キーボードがある部分だけパススルー出来る機能の方が簡単に問題を解決できますね。</li></ul></li><li>慣れていれば「ブラインドタッチや勘で探り当てる」や「ヘッドセットの鼻付近の隙間から手元を見る」などで対処できますが、パススルーで見えたほうが分かりやすいですね。</li></ul></li></ul><p>これらの機能を組み合わせ、VR上のカフェでBGMを聞きながら3枚モニタでこの記事を書いていたりします。</p><h2 id="使い勝手"><a href="#使い勝手" class="headerlink" title="使い勝手"></a>使い勝手</h2><p>「4Kモニタを使わないと見ることができないような多量なデータを処理する作業」には向いていませんが、「通常の作業」には支障が無いと思います。WordやExcelやWEBブラウズ、メール確認などはそれほど大きい解像度は無くても大丈夫だと思います。</p><ul><li>モニタを自由に複数枚配置できるので、首や目に優しい気がします。<ul><li>解像度はFHDですが、奥行き&#x2F;上下&#x2F;傾き&#x2F;湾曲 を制御できます。</li></ul></li><li>集中力が高まる、かもしれません。<ul><li>私の自宅のリモートワーク作業部屋はデバイスで溢れているので、ヘッドセットでそれらを見ないで済むことで集中できています。部屋がきれいな人は…知りません。</li><li>競走馬もそうですが、視界の制限が集中を促すと考えます。<ul><li>私は土日にプライベートの作業をすることが多いのですが、”09:00に始めて、気がついたら17:00だった”という事も多々あります。それくらい集中出来ました。</li></ul></li></ul></li><li>気分転換がしやすい。<ul><li>いつもはカフェで作業しますが、時々、洞窟や山小屋に変えることで、バーチャルワーケーション気分を味わえます。必要なら、Richo THETA（360度カメラ）で撮った画像なども背景にできます。</li><li>これを緊急作業等の泊まり込み残業に応用すると、バーチャル帰宅もできるはずです。最近はVR睡眠（※）という話もありますが、本稿の話題ではないので割愛します。</li></ul></li></ul><h1 id="VRの個人的な感想"><a href="#VRの個人的な感想" class="headerlink" title="VRの個人的な感想"></a>VRの個人的な感想</h1><p>バーチャルデスクトップが流行するかは、バーチャルデスクトップだけの話では無く、それを構成する要素である「VR」自体の普及に依存すると考えられます。<br>この章では、バーチャルデスクトップにとどまらず、VR自体について考えてみたいと思います。<br>尚、あくまで筆者の個人的な感想&#x2F;考えとなります。</p><p>バーチャルデスクトップ、ひいてはVRが普及しない原因を考えてみると、以下のような原因がありそうです。</p><ul><li>VR利用自体が、非日常の活動<ul><li>HMDを付けるという行為が、例えばスマホを使う程度の心理的障壁にならないと、VRが流行ることは無いような気がしています。</li><li>HMDを付ける手間と、それにより得られる利便性が、今は均衡が取れていないため使われていないと思われます。</li></ul></li><li>VR酔いが存在する<ul><li>FPSゲームで酔うように、VR利用でも酔う事があります。これは、視覚による情報と三半規管による情報が乖離していることで発生すると考えられます。「乗り物酔い」や「3D（ゲーム）酔い」等と同じです。</li><li>バーチャルデスクトップ利用であれば、この部分は大幅に影響が無いと考えられます。<ul><li>VR酔いをする場合は、画面は大幅に動いている（&#x3D;加速度等が発生すると脳は認識している）のに実際は一切動いていない為、視覚と三半規管の認識にずれが生じるからと考えられます。</li><li>バーチャルデスクトップの場合、椅子に座って利用する為に下半身が固定されており、可動域は三半規管の認知範囲に収まっています。その為、認知差はほぼなく、比較問題として酔いづらいと考えられます。</li><li>但し、処理能力不足等でフレームレートが低い場合、酔いは発生します。私は酔いました。フレームレートが低く画面が断続的に描画されることで、描画間の加速度等の認知で問題が発生すると思われます。故に、バーチャルデスクトップにおいては、適切な解像度や仮想モニタ数でフレームレートが落ちない程度にする必要があります。</li></ul></li></ul></li><li>社会が対応していない<ul><li>例えば、今働いている会社の情報システム部に「明日からバーチャルデスクトップで作業したいので、通信許可をしてください」といっても、許可されることはほぼほぼ無いのではないかと思います。特に情報漏洩対策等でネットワークの制限等を行っている組織では、限りなく不可と思われます。</li><li>これはそもそも仕方のない事で、どのような通信が行われるのか、それによる会社資産への影響はどの程度か、セキュリティ的なリスクは何があるのか、などが通常は知らないし考えたことも無いからですね。</li><li>その為、通信要件等を把握する、利用に際したリスクを洗い出す、等の明確化が必要です。そしてこれらを検討すること自体がコストなので、会社として「使ったらよい事がある」（コストを下げられる、作業効率が上がる、等）ことを認識させる必要がありそうです。故に、会社と関係ない場面で使い有用性を広める、という活動で「そういうものがあるんだ」という認識を広めることが重要かもしれません。そしてこの記事がそれだったりします。</li><li>その点、必要と認識された業務範囲や業界では、普通に利用されています。<ul><li>例えば、研修分野などは積極的に活用されていると思われます。溶接であったり、自動車保険の被害査定研修であったり、医療での手術研修などもあります。実際に物理で実施するよりも安全かつ安価に実施できるという利点があるため、利用されています。</li><li>これはあくまで「研修」という範囲であるため、セキュリティ的に侵害されても会社資産情報が漏洩することは無い、などの分離がされているためとも思われます。その点、バーチャルデスクトップは社員端末の代替えとすれば、難しいことも確かです。</li></ul></li></ul></li></ul><h2 id="VRとセキュリティ"><a href="#VRとセキュリティ" class="headerlink" title="VRとセキュリティ"></a>VRとセキュリティ</h2><p>前述の通り、VRでもセキュリティ観点で物を考える必要がありそうです。VRでのセキュリティは、一般的なコンピュータシステムのセキュリティと、VR特有のセキュリティの両面から対応する必要があると思われます。</p><ul><li>フローとしてのセキュリティ<ul><li>VRで何かを実現する際の、実現したいことに対するスキームやフロー自体のセキュリティ対策が必要です。</li></ul></li><li>実装としてのセキュリティ<ul><li>上記フローを実装した際の、セキュリティ対策が必要です。</li><li>例えば…<ul><li>利用する環境自体のセキュリティ<ul><li>UnityやUnrealEngineなどの利用技術のセキュリティ対策が必要です。利用アプリケーションのバージョン管理やセキュリティ更新などが含まれます。</li><li>VRプラットフォームとしてのClusterやVRChatなどのサービスのセキュリティレベルも検討する必要があります。サービス提供側の設計に依存します。<ul><li>認証認可、保持する情報、侵害リスク、等の検討が必要かもしれません。例えば、aws自体はセキュリティ機能は持っているが、ユーザが設定し忘れた&#x2F;設定ミスした、のような状態が無いようにする必要があります。</li></ul></li></ul></li><li>環境上での実装のセキュリティ対策が必要です。<ul><li>利用技術やプラットフォーム上で、自らが構築したもののセキュリティ対策は、自分自身で実施する必要があります。<ul><li>WEBシステムで言えば、自作のWEBアプリが該当します。前述の環境自体は、ミドルウェアやOS層に該当します。</li><li>例えば、侵入不可に設定し忘れた領域、他者からVR上で入力した情報が見えてしまう設計、VR上での資産に対するセキュリティ、等が考えられます。これらはおそらく自動検査は難しいと思われ、ペネトレーションテストのようなデバッグ作業が必要になると思われます。</li></ul></li></ul></li><li>通信経路におけるセキュリティ<ul><li>どこからどこへどのような内容が送受信されるのか、暗号化は適切なレベルなのか、等の通信のセキュリティ対策も必要です。</li></ul></li></ul></li></ul></li><li>利用者自身へのセキュリティ<ul><li>利用者の物理的な安全保護対策が必要です。<ul><li>視界がヘッドセットにより奪われる為、周囲への物理的な安全確保が必要となります。<ul><li>利用環境の適切な設計、利用者外人員での監視、等で保護する必要があります。</li><li>自宅リモートワークなら自宅の安全性に依存、会社オフィスであればオフィス内での安全性に依存しています。宅外リモートワークやワーケーション時に注意が必要です。</li><li>保護に関しては、怪我等もありますが、悪意を持って接触される可能性も考慮が必要です。</li></ul></li></ul></li><li>利用者への心理的な保護対策が必要です。<ul><li>意図をもって、利用者の認知を歪ませる&#x2F;誤認させる状況への対処が必要と思われます。HMDで表示するVRや、利用者への環境に対する働きかけなどが想定されます。</li><li>これらはおそらく心理学などの分野と強調する必要もあるかもしれません。</li></ul></li></ul></li></ul><h1 id="今後のVRの展望"><a href="#今後のVRの展望" class="headerlink" title="今後のVRの展望"></a>今後のVRの展望</h1><p>VRの文脈でメタバースが語られることも多いですが、メタバース自体は「体験を得るための”手段”」までは規含まれていないと考えます。メタバースに参加する際、iPad等で2Dとして参加する（表現上は、3Dを2Dで描画している）というのは割と普通かと思いますし、VRでフルトラッキング（※）で参加する人もいます。参加コストとしては2D描画となる、PC&#x2F;タブレット&#x2F;スマホでの参加が大多数と思われます。故に、メタバースが一般化&#x2F;進化しても、VRが同時に一般化するとは限らないです。同じメタバース内でも、2D&#x2F;VRでは得られる体験が異なるため、メタバースとVRは切り離して考えてもいいかもしれません。</p><p>一部とはいえVRが浸透してきたのは、機材の低価格化&#x2F;軽量化もあると思われます。今まではハイエンドPC＋外部トラッキング装置＋いろんなケーブルで数十万だったのが、Oculus Questにより5万円台で「HMD単体で使える」ようなりました。また、Googleカードボード（スマホを使った簡易VR）もありました。今後は、求められる機能的&#x2F;性能的には5万円台より下がることは無いような気がするので、普及するには「利用したいと思えるコンテンツが増える」「使った方が有利である状況が増える」事が増える必要があります。ハードウェア的にはフェイストラッキングやアイトラッキングも活用されていくようです。</p><p>会社の通常業務業務でVRが使えると、普及するかもしれません。複数のモニタを使う人達は、バーチャルデスクトップ環境を使う事で「物理モニタ」という資産が不要になりますし、モニタ設置スペースも不要になります。また、作業環境を変えられるので、VRリモートワークも可能です（そして、残業時のVR帰宅も…）。社員を物理的な場所から解放する、という点では良いと思うのですが…</p><p>現状では「日常使い」が一般的に難しいので、日常生活に普及していくのは難しいと思われます。しかしながら特定分野では着実に実績を伸ばしているため、用途が見つかれば突然一部に普及する、という可能性はありそうです。VRはあくまで手段であり、その手段が有効である状況が発生すれば普及しそうです。日常が便利になるか&#x2F;楽しくなるか、という点で興味があるので、引き続きVRやメタバースに注力していこうと思います。</p><p>以上</p><h1 id="用語とか"><a href="#用語とか" class="headerlink" title="用語とか"></a>用語とか</h1><ul><li>ショルダーハッキング：<ul><li>画面やキーボードを肩越しにのぞき込んで情報を搾取する方法。VRであれば、ヘッドセット内に表示されるので画面ののぞき込みは防げる。キー入力はVR上に表示されるソフトキーボードを利用することで、のぞき見はされない。</li><li>ヘッドセットを利用して作業する場合、物理的に不審なことをされない場所を選ぶことも重要。ヘッドセットで視界を完全に塞がれるので、何かをされないような環境（管理者のいるコワーキングスペース等）に身を置く必要がある。</li></ul></li><li>パススルー：<ul><li>ヘッドセット外部の映像を、VR上に表示すること。</li><li>Oculus Questの場合は、低解像度&#x2F;モノクロの外部カメラがヘッドセットについており、その映像をVR上に透過表示している。</li><li>Immersedの場合、キーボードがある範囲のみをパススルーで表示する、任意の一部分だけパススルーする、全体をパススルーする（低解像度&#x2F;白黒の周辺風景にモニタを浮かばせる）を複数選択できる。</li><li>私の場合、キーボード～トラックボールの並びをパススルー表示、ハンドトラッカーをノートパソコンのタッチパッド上に置いているので部分的にパススルー、という利用をしている。</li></ul></li><li>VR睡眠：<ul><li>HMDを装着したまま、VR空間で寝ることを指す。</li><li>睡眠だけというより、他者との睡眠迄の空間共有を楽しむことが多いようだ。泊りの旅行、パジャマパーティー、等に類する行動に近い。VRChatで行われることが多いようだ。</li><li>研究結果として、VRは不眠症の症状を改善する、というものもあるようだ。但し、HMD自体が睡眠に最適化されていない為、慣れないとストレスになる。<ul><li>Quest2などは外部カメラにより6DoFを実現しているため、”寝室で電気を消す”状況だとトラッキングができなくなる。HMDの遮光性を利用して、明かりをつけたまま寝ることになる。</li></ul></li></ul></li><li>フルトラッキング：<ul><li>一般的にHMDを付けてVRを利用する際は上半身だけのトラッキングを利用しているが、下半身を含めた体全体の動きをトラッキングすることを、フルトラッキングという。</li><li>Quest2の場合は、手先のトラッキング（ハンドコントローラ、若しくは外部カメラによる手の認識）とHMD自体の6DoF（The six degrees of Freedom:forward&#x2F;back,up&#x2F;down,left&#x2F;right,pitch,yaw,rollの6自由度）で認識している。その為、例えば肘は手の動きと胴体から推定されているし、下半身は移動と上下動で推定されている。</li><li>下肢などに複数のセンサーを設置する&#x2F;外部からカメラなどで読み込む事で、全身の動きをトラッキングする（フルトラッキング）。</li><li>ただ、VR自体の一般用途は会議であったり会話によるコミュニケーションであるため、下半身のトラッキングが必須となる場合は限定されると思われる。現時点では、フルトラッキングの方が表現力が上がるというものであり、無くてもコミュニケーション上は問題ないと思われる。</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/VR/">VR</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/">リモートワーク</category>
      
      <category domain="https://future-architect.github.io/tags/VR/">VR</category>
      
      <category domain="https://future-architect.github.io/tags/VirtualDesktop/">VirtualDesktop</category>
      
      
      <comments>https://future-architect.github.io/articles/20221031b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>秋のブログ週間2022を始めます</title>
      <link>https://future-architect.github.io/articles/20221031a/</link>
      <guid>https://future-architect.github.io/articles/20221031a/</guid>
      <pubDate>Sun, 30 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221031a/halloween-gece73ccea_640.jpg&quot; alt=&quot;halloween-gece73ccea_640.jpg&quot; width=&quot;640&quot; height=&quot;286&quot; loading=&quot;lazy&quot;&gt;

&lt;h2</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221031a/halloween-gece73ccea_640.jpg" alt="halloween-gece73ccea_640.jpg" width="640" height="286" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG 真野です。</p><p>2020年から始めた企画である、秋のブログ週間の開始しますという報告です。2022年で3回目です。</p><ul><li><a href="/articles/20201026/">秋のブログ週間連載をはじめます</a></li><li><a href="/articles/20211027a/">秋のブログ週間連載2021を始めます</a></li></ul><p>2022年の秋はフューチャーが関わったイベントが多かった記憶です。</p><p>実施順に並べます。</p><ul><li>(10&#x2F;14) <a href="https://talent.supporterz.jp/geeksai/2022autumn/">技育祭2022秋に登壇しました。ソフトウェアアーキテクトって何やるの？～知っておくと役立つ考え方を共有します～</a><ul><li><a href="/articles/20221019a/">登壇記事</a></li></ul></li><li>(10&#x2F;16)Vue Fes Japan Online 2022<ul><li>登壇記事は岸本さんが書いてくれる予定</li></ul></li><li>(10&#x2F;26) <a href="https://forkwell.connpass.com/event/262394/">「実用Go言語」の作り方 - Forkwell Library #7</a><ul><li>登壇記事は渋川さんが書いてくれる予定</li></ul></li></ul><p>他にも、<a href="https://sendaigo.connpass.com/event/256463/">Go Conference mini 2022 Autumn IN SENDAI</a> や <a href="https://2022.pycon.jp/">PyCon JP</a> など、大体どの季節もイベントが多いとは思うのですが、特に集中しているような体感がありました。</p><p>また、通常、フューチャーのようなITコンサルティングを生業ととするような企業には特に決まった繁忙期はないと思われるかと思いますが、個人的には<a href="https://note.future.co.jp/n/n7b0e5de1b2bc">BPY</a>の予選や<a href="https://note.future.co.jp/n/n08d63ab0be11">年末個人プレゼン</a>の準備に向けた気持ちのスイッチがあり、いつもこのくらいの時期から年末に向けて忙しいです。</p><p>12月にはお馴染みQiitaさんのアドベントカレンダーにも参加したいと思いますので、秋のブログ週間はちょうどその中間のまったりとした、秋の夜長を楽しむために、読み物成分を中心とすることをテーマとしています。</p><h2 id="秋のブログ週間とは"><a href="#秋のブログ週間とは" class="headerlink" title="秋のブログ週間とは"></a>秋のブログ週間とは</h2><p>2020年から始まったブログ連載企画で、秋の読書週間（文化の日を中心とした10&#x2F;27〜11&#x2F;9の2週間）の平日にブログ記事を投稿していこうというイベントです。普段は○○技術への入門といった形式の記事が多いですが、そういったプログラミングとは少し趣を変えていきます。普段フューチャー技術ブログをあまり読まない人にも記事が届くと良いなと考えています。</p><p>2022年は曜日の区切り的に、10&#x2F;31（月）から開始することになりました。</p><h2 id="スケジュール"><a href="#スケジュール" class="headerlink" title="スケジュール"></a>スケジュール</h2><div class="scroll"><table><thead><tr><th>Date</th><th>Title</th><th>Author</th></tr></thead><tbody><tr><td>10&#x2F;31</td><td><a href="/articles/20221031b/">バーチャルデスクトップ環境の現状と、VRの個人的な感想</a></td><td>井上圭</td></tr><tr><td>11&#x2F;1</td><td><a href="/articles/20221101a/">Go習得の軌跡</a></td><td>今泉智義</td></tr><tr><td>11&#x2F;2</td><td><a href="/articles/20221102a/">ポッドキャスト運営をしていて思うこと、収録Tips</a></td><td>村田靖拓</td></tr><tr><td>11&#x2F;3</td><td>（文化の日🎨）</td><td>ー</td></tr><tr><td>11&#x2F;4</td><td><a href="/articles/20221104a/">チームの開発生産性を高めるための心がけ</a></td><td>辻大志郎</td></tr><tr><td>11&#x2F;5</td><td>（土曜日）</td><td>ー</td></tr><tr><td>11&#x2F;6</td><td>（日曜日）</td><td>ー</td></tr><tr><td>11&#x2F;7</td><td><a href="/articles/20221107a/">SREの探究 - Spotifyの事例：Ops-in-Squads</a></td><td>岸下優介</td></tr><tr><td>11&#x2F;8</td><td>Azure Data Box使ってみた</td><td>一ノ瀬秀都</td></tr><tr><td>11&#x2F;9</td><td>AIファースト・ヘルスケアを読んだ感想</td><td>山本竜玄</td></tr><tr><td>11&#x2F;10</td><td>Web API: The Good Parts を読んでみた感想</td><td>藤戸四恩</td></tr><tr><td>11&#x2F;11</td><td>データベースと向き合う(仮)</td><td>澁川喜規</td></tr><tr><td>11&#x2F;12</td><td>パスワードレスな未来に向けて</td><td>吉岡朋哉</td></tr></tbody></table></div><p>準備が間に合えば、佐野さん（PMO経験談）、宮永さん（ハンズオンWebAssenbly感想）も参加するかもしれないとのことです。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>いつもはコードが本文に書かれていることも多いフューチャー技術ブログですが、この連載はスマホ片手で読めるような記事比率を高めたいと思います。約2週間ですがどうぞお付き合いください。</p><p>アイキャッチ画像は<a href="https://pixabay.com/users/pixel2013-2364555/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2901944">S. Hermann &#x2F; F. Richter</a> from <a href="https://pixabay.com//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2901944">Pixabay</a>を利用させていただきました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%A7%8B%E3%83%96%E3%83%AD%E3%82%B0%E9%80%B1%E9%96%93/">秋ブログ週間</category>
      
      
      <comments>https://future-architect.github.io/articles/20221031a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>PlantUMLをReact上でレンダリングする</title>
      <link>https://future-architect.github.io/articles/20221028a/</link>
      <guid>https://future-architect.github.io/articles/20221028a/</guid>
      <pubDate>Thu, 27 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20221027a/">前回の記事</a>ではMermaid.jsをレンダリングしましたが、次はPlantUMLをレンダリングしてみます。こちらも、前回のMermaid.js同様、メンテナンスされているPlantUML対応コンポーネントはありません。</p><p>PlantUMLもMermaid.js同様、多様なダイアグラムをサポートしています。しかし、PlantUMLはJavaで書かれており、一部C言語製のGraphvizにレイアウト処理を任せているようです。そのままの仕組みでGitHub Pagesのような静的HTMLで気軽に動かすことはできません。<a href="https://zenn.dev/newgyu/scraps/5bd12587744379">Haxeで作り直してJavaScriptでも動かせるようにするPlantUML2</a>というのもあるようですが、まだまだ安定版ではなさそうです。</p><p>しかし、GitHub Pagesでプレビューを実現しているサイトは確かにあって、どうやっているのかと思っていたら、その仕組みについては<a href="https://plantuml.com/ja/jquery">公式ページで紹介されていました</a>。plantuml.comにリクエストを投げて画像を生成していました。ソースコードを圧縮し、base64にして、それを末尾に付与したURLを作り、imgタグのsrcに入れるという方法です。</p><h1 id="ロジックを実装してみる"><a href="#ロジックを実装してみる" class="headerlink" title="ロジックを実装してみる"></a>ロジックを実装してみる</h1><p>jQuery用のコードが上記のページで紹介されています。そのまま使えば動きはすると思いますが、いかんせんcjs形式でES6 modules形式でもなく、scriptタグで読み込む形式なので手を加えたいところ。そしてやっていることはdeflateの圧縮とbase64なので、より良いコードがnpmにあるので苦労はないだろう・・・と思ったらなかなかうまくいかず。</p><p>まずは高速という<a href="https://www.npmjs.com/package/pako">pako</a>を使ってdeflateしてbtoaしたらplantuml.comがエラーに。次にzlib.jsとかいろいろ試したがダメ。で、ダメもとでbase64の部分をPlantUMLのサイトのコードを使ったらOKでした。で、再度pakoを使ったらOK。base64難しい。まあatobもいろいろdeprecatedであったりするのですが。最終形は以下の2つのコードになりました。このブログをかいているときに<a href="https://www.npmjs.com/package/plantuml-encoder">plantuml-encoder</a>というのも見つけました。これもみたら同じような構成でした。</p><figure class="highlight ts"><figcaption><span>encode64.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">encode64</span>(<span class="params">data: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> r = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;data.<span class="property">length</span>; i+=<span class="number">3</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (i+<span class="number">2</span>==data.<span class="property">length</span>) &#123;</span><br><span class="line">      r +=<span class="title function_">append3bytes</span>(data.<span class="title function_">charCodeAt</span>(i), data.<span class="title function_">charCodeAt</span>(i+<span class="number">1</span>), <span class="number">0</span>);</span><br><span class="line">     &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i+<span class="number">1</span>==data.<span class="property">length</span>) &#123;</span><br><span class="line">      r += <span class="title function_">append3bytes</span>(data.<span class="title function_">charCodeAt</span>(i), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      r += <span class="title function_">append3bytes</span>(data.<span class="title function_">charCodeAt</span>(i), data.<span class="title function_">charCodeAt</span>(i+<span class="number">1</span>), data.<span class="title function_">charCodeAt</span>(i+<span class="number">2</span>));</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> r;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">append3bytes</span>(<span class="params">b1: <span class="built_in">number</span>, b2: <span class="built_in">number</span>, b3: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> c1 = b1 &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> c2 = ((b1 &amp; <span class="number">0x3</span>) &lt;&lt; <span class="number">4</span>) | (b2 &gt;&gt; <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">let</span> c3 = ((b2 &amp; <span class="number">0xF</span>) &lt;&lt; <span class="number">2</span>) | (b3 &gt;&gt; <span class="number">6</span>);</span><br><span class="line">    <span class="keyword">let</span> c4 = b3 &amp; <span class="number">0x3F</span>;</span><br><span class="line">    <span class="keyword">let</span> r = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    r += <span class="title function_">encode6bit</span>(c1 &amp; <span class="number">0x3F</span>);</span><br><span class="line">    r += <span class="title function_">encode6bit</span>(c2 &amp; <span class="number">0x3F</span>);</span><br><span class="line">    r += <span class="title function_">encode6bit</span>(c3 &amp; <span class="number">0x3F</span>);</span><br><span class="line">    r += <span class="title function_">encode6bit</span>(c4 &amp; <span class="number">0x3F</span>);</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">encode6bit</span>(<span class="params">b: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (b &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">48</span> + b);</span><br><span class="line">   &#125;</span><br><span class="line">   b -= <span class="number">10</span>;</span><br><span class="line">   <span class="keyword">if</span> (b &lt; <span class="number">26</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">65</span> + b);</span><br><span class="line">   &#125;</span><br><span class="line">   b -= <span class="number">26</span>;</span><br><span class="line">   <span class="keyword">if</span> (b &lt; <span class="number">26</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">97</span> + b);</span><br><span class="line">   &#125;</span><br><span class="line">   b -= <span class="number">26</span>;</span><br><span class="line">   <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">if</span> (b == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;_&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><figcaption><span>PlantUML.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useMemo &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> pako <span class="keyword">from</span> <span class="string">&quot;pako&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; encode64 &#125; <span class="keyword">from</span> <span class="string">&quot;../lib/encode64&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ImageProps</span> = <span class="variable constant_">JSX</span>.<span class="property">IntrinsicElements</span>[<span class="string">&#x27;img&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">PlantUML</span>(<span class="params">plops: ImageProps</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; src, ...remained &#125; = plops;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> base64 = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!src) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> bin = pako.<span class="title function_">deflateRaw</span>(<span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(src)));</span><br><span class="line">        <span class="comment">// https://stackoverflow.com/a/21214792</span></span><br><span class="line">        <span class="keyword">const</span> <span class="variable constant_">CHUNK_SIZE</span> = <span class="number">0x8000</span>;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> length = bin.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">strs</span>: <span class="built_in">string</span>[] = [];</span><br><span class="line">        <span class="keyword">while</span> (index &lt; length) &#123;</span><br><span class="line">          <span class="keyword">const</span> slice = bin.<span class="title function_">subarray</span>(index, <span class="title class_">Math</span>.<span class="title function_">min</span>(index + <span class="variable constant_">CHUNK_SIZE</span>, length));</span><br><span class="line">          <span class="comment">// @ts-ignore</span></span><br><span class="line">          strs.<span class="title function_">push</span>(<span class="title class_">String</span>.<span class="property">fromCharCode</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, slice));</span><br><span class="line">          index += <span class="variable constant_">CHUNK_SIZE</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">encode64</span>(strs.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>));</span><br><span class="line">    &#125;, [src])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> src ? <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> &#123;<span class="attr">...remained</span>&#125; <span class="attr">src</span>=<span class="string">&#123;</span>`<span class="attr">http:</span>//<span class="attr">www.plantuml.com</span>/<span class="attr">plantuml</span>/<span class="attr">svg</span>/$&#123;<span class="attr">base64</span>&#125;`&#125; /&gt;</span></span> : <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最終系は、useMemoを使ってソースが変更されたときだけ変換計算をするようにしてみたのと、imgタグのさまざまな属性をそのまま受け取れるようにした感じです。<code>alt</code>属性とかのアクセシビリティ用属性もそのまま使える。</p><p>以下のコードから次の図が生成できるようになりました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">entity User &#123;</span><br><span class="line">  *id:INTEGER &lt;&lt;generated&gt;&gt;</span><br><span class="line">  --</span><br><span class="line">  *name:TEXT</span><br><span class="line">  *email:TEXT</span><br><span class="line">  *age:INTEGER</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">entity Job &#123;</span><br><span class="line">  *id:INTEGER &lt;&lt;generated&gt;&gt;</span><br><span class="line">  --</span><br><span class="line">  *name:TEXT</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">User &#125;o--o&#123; Job</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><img src="/images/20221028a/スクリーンショット_2022-10-24_9.04.50.png" alt="スクリーンショット_2022-10-24_9.04.50.png" width="940" height="1086" loading="lazy"><h1 id="日本語対応"><a href="#日本語対応" class="headerlink" title="日本語対応"></a>日本語対応</h1><p>このままだと日本語を使うとエラーになってしまいます。とはいえ、PlantUMLのライブエディターを使うと日本語通ります。エラー画面を見ると文字化けしているようです。</p><p>検索すると、<a href="https://plantuml.com/ja/text-encoding">テキストエンコーディング</a>のページがありました。ここを見ると、UTF-8でエンコードしろ、とあります。あと興味深かったのはBrotli圧縮形式にも対応しているとのこと。まあBrotliはnpmで検索しても使いやすいPure JS版はなかったのでDeflateのままにしておきます。</p><p>JavaScriptのオリジナルのUTF-16をUTF-8にするのは<code>TextEncoding</code>を使います。次のように圧縮の前に変換を実行するようにすれば日本語も通るようになります。</p><figure class="highlight diff"><figcaption><span>tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- const bin = pako.deflateRaw(unescape(encodeURIComponent(src)));</span></span><br><span class="line"><span class="addition">+ const encoder = new TextEncoder();</span></span><br><span class="line"><span class="addition">+ const bin = pako.deflateRaw(encoder.encode(src));</span></span><br></pre></td></tr></table></figure><p>ちなみに、<code>btoa</code>などの既存のbase64アルゴリズムが使えない理由も上記のページに書かれていました。歴史的経緯。</p><h1 id="plantuml-com以外のサーバー対応"><a href="#plantuml-com以外のサーバー対応" class="headerlink" title="plantuml.com以外のサーバー対応"></a>plantuml.com以外のサーバー対応</h1><p>これまでのコードは、plantuml.comの変換サーバーを使って表示を行っていました。何度もリクエストを送ってしまうのは申し訳ないので、ローカルで建てたサーバーなど、別サーバーも使えるようにします。</p><p>まずはローカルサーバーを起動します。　Dockerを使うのが簡単ですね。</p><figure class="highlight yaml"><figcaption><span>docker-compose.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">plantuml:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">plantuml/plantuml-server:jetty</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">18080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>以下のように起動します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker compose up</span><br></pre></td></tr></table></figure><p>次にファイルを変更します。この手の共通のパラメータをインジェクションするにはコンテキストを使うのが一番行儀が良いでしょう。まず<code>Context</code>を宣言しつつ、アプリ側に組み込むProviderをエクスポートします。</p><figure class="highlight diff"><figcaption><span>plantuml.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-import &#123; useMemo &#125; from &quot;react&quot;;</span></span><br><span class="line"><span class="addition">+import &#123; useMemo, createContext, useContext &#125; from &quot;react&quot;;</span></span><br><span class="line"></span><br><span class="line">:</span><br><span class="line"></span><br><span class="line"><span class="addition">+const PlantUMLContext = createContext(&quot;http://www.plantuml.com/plantuml&quot;);</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+export const PlantUMLProvider = PlantUMLContext.Provider;</span></span><br></pre></td></tr></table></figure><p>コンポーネント内部では<code>useContext()</code>を使って設定値を取り出します。何も指定されていなかったら今まで通りのパスを使うようにします。</p><figure class="highlight diff"><figcaption><span>tsx plantuml.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> export function PlantUML(plops: ImageProps) &#123;</span><br><span class="line">     const &#123; src, ...remained &#125; = plops;</span><br><span class="line"></span><br><span class="line"><span class="addition">+    const serverUrl = useContext(PlantUMLContext) || &quot;http://www.plantuml.com/plantuml&quot;;</span></span><br><span class="line"></span><br><span class="line">:</span><br><span class="line"></span><br><span class="line"><span class="deletion">-    return src ? &lt;img &#123;...remained&#125; src=&#123;`http://www.plantuml.com/plantuml/svg/$&#123;base64&#125;`&#125; /&gt; : null;</span></span><br><span class="line"><span class="addition">+    return src ? &lt;img &#123;...remained&#125; src=&#123;`$&#123;serverUrl&#125;/svg/$&#123;base64&#125;`&#125; /&gt; : null;</span></span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>使う場合はルートの要素で変数を設定します。今回はNext.jsを使っているので、ここでは<code>NEXT_PUBLIC_PLANTUML_SERVER</code>環境変数から情報を取得するようにします。</p><figure class="highlight ts"><figcaption><span>_app.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+<span class="keyword">import</span> &#123; <span class="title class_">PlantUMLProvider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../components/plantuml&#x27;</span></span><br><span class="line">+</span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">MyApp</span>(<span class="params">&#123; Component, pageProps &#125;: AppProps</span>) &#123;</span><br><span class="line">-  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...pageProps</span>&#125; /&gt;</span></span></span><br><span class="line">+  <span class="keyword">return</span> (</span><br><span class="line">+    <span class="language-xml"><span class="tag">&lt;<span class="name">PlantUMLProvider</span> <span class="attr">value</span>=<span class="string">&#123;process.env.NEXT_PUBLIC_PLANTUML_SERVER</span> <span class="attr">as</span> <span class="attr">string</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">+      <span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...pageProps</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">+    <span class="tag">&lt;/<span class="name">PlantUMLProvider</span>&gt;</span></span></span><br><span class="line">+  )</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>次のように環境変数を設定して実行すればローカルに建てたPlantUMLサーバーを利用します。Windowsだったらsetとかで環境変数してからnpm run devすれば大丈夫です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ NEXT_PUBLIC_PLANTUML_SERVER=http://localhost:18080 npm run dev</span><br></pre></td></tr></table></figure><p>開発者ツールで見てみると、きちんとローカルホストのサーバーにアクセスしていることがわかります。</p><img src="/images/20221028a/スクリーンショット_2022-10-28_13.05.31.png" alt="スクリーンショット_2022-10-28_13.05.31.png" width="1200" height="286" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回も最小の依存（deflateのpakoのみ）でPlantUML表示のコンポーネントが作れました。また、標準でお手頃なplantuml.comへのアクセス以外に、plantuml-serverのパスは切り替えられるようにもしてみました。</p><p>先ほどのMermaid.jsはGitHubでレンダリングされたり、確かにお手軽なのですが、例えばエンティティに日本語を入れるとか、ノードの色を変えるとか、テーマとか、表現力では圧倒的にPlantUMLですね。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/">フロントエンド</category>
      
      <category domain="https://future-architect.github.io/tags/React/">React</category>
      
      <category domain="https://future-architect.github.io/tags/PlantUML/">PlantUML</category>
      
      <category domain="https://future-architect.github.io/tags/UML/">UML</category>
      
      
      <comments>https://future-architect.github.io/articles/20221028a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Mermaid.jsをReact上でレンダリングする</title>
      <link>https://future-architect.github.io/articles/20221027a/</link>
      <guid>https://future-architect.github.io/articles/20221027a/</guid>
      <pubDate>Wed, 26 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;テキストで書いた情報をもとにダイアグラムを作成するツールがいくつかあります。有名どころだとGraphviz、Mermaid.jsや、PlantUMLがあります。このうち、GitHubでも対応して、テキストで書いても絵が見えるので今後が利用が大きく伸びそうなのがMermaid</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>テキストで書いた情報をもとにダイアグラムを作成するツールがいくつかあります。有名どころだとGraphviz、Mermaid.jsや、PlantUMLがあります。このうち、GitHubでも対応して、テキストで書いても絵が見えるので今後が利用が大きく伸びそうなのがMermaid.jsです。</p><p>Mermaid.jsをReactで表示しようとしたものの、Reactラッパーとしてnpmに公開されているものがどれも古くてメンテナンスされていなそうという問題がありました。この手のアダプター系のライブラリはどうしてもメンテナンスがされなくて放置されるのが早くなりがちです。脆弱性が残り続けたりします。また、もう1つ、Reactのバージョンポリシーが変わって、0.1, 0.2, 0.3…0.14だったのが、突然15, 16, 17, 18となったのも問題を加速しています。メンテされないライブラリがReactのバージョンを<code>&quot;react&quot;: &quot;^16.12.0&quot;</code>みたいに指定すると、17、18とマッチしないので、Next.jsとかを使っていると、Reactのバージョンがコンフリクトしてインストールできなくなったりします。</p><p>そこで自前でやったところ、思ったよりも簡単だったのでそのやり方を紹介します。きっと、Vue.jsとかSvelteとかでもやりたい方は多いと良いと思いますし、React版ライブラリを公開しました、よりも内部の構造の紹介の方が有益でしょう。</p><h1 id="MermaidのAPI"><a href="#MermaidのAPI" class="headerlink" title="MermaidのAPI"></a>MermaidのAPI</h1><p><a href="https://mermaid-js.github.io/mermaid/#/">Mermaid.jsのAPI</a>の端々にjQuery時代のドキュメントを見ると、いくつかやり方が書かれています。</p><ul><li><code>mermaid.initialize()</code>で、HTMLの中の特定のクラスを持つタグなどを一括して処理してSVG画像を生成して挿入する</li><li><code>mermaid.mermaidAPI.render()</code>の機能を使ってSVGの要素を取得して表示</li></ul><p>それ以外にdeprecataedなAPIとして、<code>mermaid.init()</code>を使って指定のタグ（<code>initialize()</code>よりも細かく指定可能）の表示を行う方法もあります。こちらはクラス名、jQueryのセレクターの結果オブジェクト、実DOMオブジェクトを処理対象として明示します。</p><p><code>mermaid.initialize()</code>は実行したタイミングで全DOMを検索して実行しますが、いまどきのSPAとは相性がよくないと言えます。まず、指定のコンポーネントの中だけを処理対象にしたくても全DOMツリーが対象になってしまいますし、非同期でサーバーからソースを取得してきて実行する場合など、ソースが最初からそろっていないケースが多いでしょう。この<code>mermaid.initialize()</code>はサーバー側でレンダリングしていてDOM内のテキストノードに最初からコードがあり、<code>document.onLoad</code>だかで読み込めばOKというMPA前提のAPIです。</p><p>ReactなりなんなりがDOMのライフサイクルを管理していて、そのmermaid.jsを扱うタグもそれに従属していて、寿命管理はReactが担っているという関係の場合、処理対象が厳密に絞れる方がうれしいです。なのでdeprecatedな<code>mermaid.init()</code>を使うしかありません。</p><p>deprecatedでも問題ないのか、と言っても、<a href="https://github.com/mermaid-js/mermaid/issues/374#issuecomment-373917444">コラボレーター自らこのAPIしか使わん</a>と言っているので問題ないでしょう。</p><h1 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h1><p>次のコードがそのMermaid.jsを表示するコンポーネントです。<code>src</code> propsとしてMermaid.jsのソーステキストを受け取る前提となっています。まあコードに落としてみるとあっという間ですね。ドキュメントを理解するまでの時間の方が長かった。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mermaid <span class="keyword">from</span> <span class="string">&quot;mermaid&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useRef, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123;</span><br><span class="line">    <span class="attr">src</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">className</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Mermaid</span>(<span class="params">&#123;src, className&#125;: Props</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> ref = useRef&lt;<span class="title class_">HTMLDivElement</span>&gt;(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (src) &#123;</span><br><span class="line">            mermaid.<span class="title function_">init</span>(&#123;&#125;, ref.<span class="property">current</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [ref.<span class="property">current</span>, src])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        src ?</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">key</span>=<span class="string">&#123;src&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;src&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        : <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span> <span class="attr">key</span>=<span class="string">&#123;src&#125;</span> /&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>肝としては、このコードがやっていることをピックアップすると、</p><ul><li>テキストノードとしてソースを書く(<code>&#123;src&#125;</code>のところ)</li><li><code>mermaid.init()</code>はソースが書かれたタグに限定(<code>useRef</code>を活用)</li><li>ソースは空だとやはり変換エラーになってしまうので、ソースが揃うまでは実行しない</li><li>キーを設定し、ソーステキストの修正ごとにDOMが再作成されるようにした</li></ul><p>ぐらいです。</p><p>一番最後ですが、一度ビルドすると、ソースコードが削除されたタグが動的に書き換えられてしまい、2度目の変更が行われないようになります。変更を起こすにはソースが書き換わったときに、タグごと作り直す方が手っ取り早いです。key属性をタグに付与することでタグを作り直すことを指定しています。これをやらないと、ソースコードが編集されると、絵ではなく、そのソースコードが画面に出てしまいます。絵の更新をしてほしいですよね？</p><p>これを表示すると以下のようになります。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> src=<span class="string">`erDiagram</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">User &#123;</span></span><br><span class="line"><span class="string">  INTEGER id PK</span></span><br><span class="line"><span class="string">  TEXT name</span></span><br><span class="line"><span class="string">  TEXT email</span></span><br><span class="line"><span class="string">  INTEGER test</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Job &#123;</span></span><br><span class="line"><span class="string">  INTEGER id PK</span></span><br><span class="line"><span class="string">  TEXT name</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">User &#125;o--o&#123; Job : jobs`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Mermaid</span> <span class="attr">src</span>=<span class="string">&#123;src&#125;/</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><img src="/images/20221027a/スクリーンショット_2022-10-22_22.47.54.png" alt="" width="480" height="714" loading="lazy"><p>めでたしめでたし。SVG形式で内部では生成されます。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>これで　Mermaid.jsが表示できるようになりました。古い型式のAPIの良質ライブラリを現代のフレームワークで活用するのは頭のパズルっぽくていいですね。</p><p>PlantUMLについては長くなったので別エントリーにします。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/">フロントエンド</category>
      
      <category domain="https://future-architect.github.io/tags/React/">React</category>
      
      <category domain="https://future-architect.github.io/tags/UML/">UML</category>
      
      <category domain="https://future-architect.github.io/tags/Mermaid-js/">Mermaid.js</category>
      
      
      <comments>https://future-architect.github.io/articles/20221027a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>A5:SQL Mk-2 （a5m2）のデータモデリング便利機能（初心者向け）</title>
      <link>https://future-architect.github.io/articles/20221025a/</link>
      <guid>https://future-architect.github.io/articles/20221025a/</guid>
      <pubDate>Mon, 24 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;私が所属しているチームでは、ERDの管理およびDDL生成のために、A5:SQL</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>私が所属しているチームでは、ERDの管理およびDDL生成のために、A5:SQL Mk-2（以下A5M2）を利用しています。全員がそこまで使ったことがあるわけでなく、徐々にかゆいところに手が届く機能を知り利用してよかったと思っています。</p><p>そこで、開発を通して最初から知っていれば嬉しかったなという機能をまとめます。使いこなしているチーム（人）に確認したら全て当たり前に使っていたので、常識レベルらしいです。</p><ul><li><a href="https://a5m2.mmatsubara.com/">A5:SQL Mk-2 - フリーのSQLクライアント&#x2F;ER図作成ソフト (松原正和)</a></li></ul><p>なお、a5m2 ってどういう機能があるんだという方は、宮崎さんの <a href="/articles/20220225a/">A5:SQL Mk-2に回帰した話 </a> を参照ください。また、SQLクライアントとして a5m2 を使う話はしません。余談ですが個人的にはSQLクライアントとしてはJetBrainsで特に有料製品を使っている方は<a href="/articles/20221014a/">Database Tools and SQLプラグインをおすすめ</a>しています。</p><h3 id="共通列（システム共通カラム）"><a href="#共通列（システム共通カラム）" class="headerlink" title="共通列（システム共通カラム）"></a>共通列（システム共通カラム）</h3><p>全テーブルに共通して付与したいカラムのことです。よく目にしそうなのが以下です。</p><ul><li>created_at: 作成日時</li><li>created_by: 作成ユーザーID、作成プログラムID</li><li>created_trace_id: 作成トレースID</li><li>updated_at: 更新日時</li><li>updated_by: 更新ユーザーID、更新プログラムID</li><li>updated_trace_id: 作成トレースID</li><li>revision: 更新番号</li><li>delete_flg: 削除フラグ(※是非については要議論)</li></ul><p>通常、運用観点から全テーブルに対して一律、横断的に付与させるため、個々のテーブル定義で設定するのは手間だし、管理の上でも省略したくなります。</p><p>a5m2 には共通列という機能が存在します。</p><p>「ER図タブ＞共通列を表示」から設定します。</p><img src="/images/20221025a/共通列の設定.png" alt="共通列の設定" width="1200" height="616" loading="lazy"><p>これにより全テーブルの一律設定が可能となります。</p><p>なお、共通列というだけあって、あるテーブルは追記オンリーである（更新がない）ため、updated_xx 系が不要にしたいといったことはできないです。その場合はa5m2のブックを分けるとか、DDLを生成した後に 何かしらのスクリプトで削除するといった作り込みになりそうです。</p><h3 id="型ドメイン"><a href="#型ドメイン" class="headerlink" title="型ドメイン"></a>型ドメイン</h3><p>公式ドキュメントにもしっかりと記載がある、<a href="https://a5m2.mmatsubara.com/help/ER/ERDomain.html">型ドメイン</a>についてです。</p><p>テーブル数が増えてくると、同じデータが入るにもかかわらず、データ型の定義が揺れてしまうときが多々あります。</p><p>例えば以下のようなケースです。</p><ul><li>論理的には同じ営業店コード VARCHAR(12) の体系で登録されるべきだが、名称は別のカラムが複数ある</li><li>移管先営業店コード、配送先営業店コードなど派生的な別名で登録する際に、誤ってVARCHAR(14)などと定義し揺れてしまう</li></ul><p>こういった状況を防ぐために取られるのが <strong>型ドメイン</strong> の機能です。基本的には個別で VARCHARやINTEGERなどを定義するのをやめ、全てドメイン定義で指定すると良いでしょう。</p><img src="/images/20221025a/型ドメイン.png" alt="型ドメイン.png" width="1200" height="603" loading="lazy"><p>当然ですが、型ドメインで個別の方を指定すると、DDLなどの出力時には指定された型桁で置換されます。ERDの大枠を作成する人が最初にいかに整えられるかが鍵になるかなと思います。</p><p>型ドメインですが、どれくらい汎化して用いるかは少しコツが必要だと思います。個別の営業店コードといったレベル感でいくのか、実は支社・支店も同じコード体型で存在するよというのであれば、 「店コード」 といったより抽象的な型ドメインを適用スべきかもしれません。システムで扱いたいエンティティをよく見極めて設計すると良いかなと思います。</p><h3 id="コマンドラインツール"><a href="#コマンドラインツール" class="headerlink" title="コマンドラインツール"></a>コマンドラインツール</h3><p>a5m2を用いるとGUIからDDLを生成できますが、コマンドラインツールも整備されておりこちらもうまく活用できると、CIやローカルでのタスクランナーでの実行に便利です。</p><ul><li><a href="https://www.vector.co.jp/soft/winnt/util/se519353.html?ds">A5ER コマンドラインユーティリティ</a></li></ul><p>上記をインストールしてPATHを通すと、大体の自動化ができます。使い方ですが、 <code>/Help</code> でみると用意されているコマンドの説明が出てきますので助かります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;A5M2cmd /Help</span><br><span class="line">A5:SQL Mk-2 コマンドラインユーティリティ</span><br><span class="line">  Version 2.17.1</span><br><span class="line"></span><br><span class="line">■コマンドライン引数</span><br><span class="line">  &gt; a5m2cmd コマンドオプション [追加オプション...]</span><br><span class="line"></span><br><span class="line">  追加オプションは <span class="string">&quot;/オプション名&quot;</span> または <span class="string">&quot;/オプション名=オプション値&quot;</span> の形式で</span><br><span class="line">  指定します。</span><br><span class="line"></span><br><span class="line">  オプション値に空白が含まれる場合、オプション名も含めてダブルクォートで括ってく</span><br><span class="line">  ださい。</span><br><span class="line"></span><br><span class="line">■コマンドオプション</span><br><span class="line">  /RunSql     SQLのスクリプトファイルを実行します。</span><br><span class="line"></span><br><span class="line">（以下、省略）</span><br></pre></td></tr></table></figure><p>DDLの出力ですが、例えば次のようなコマンドで可能です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; A5M2cmd.exe /ERDDL /Encoding=UTF-8 /ERD=erd.a5er /OutFileName=ddl.sql</span><br></pre></td></tr></table></figure><p>出力の改行コードの設定はできないようなので、次のようなMakefileでカバーしたりしました。WSLで実行するイメージです（WSL側からWindows側のexeを叩くのがどうなんだというのはあります）。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">ddl.sql: erd.a5er</span></span><br><span class="line">@A5M2cmd.exe /ERDDL /Encoding=UTF-8 /ERD=erd.a5er /OutFileName=ddl.sql</span><br><span class="line">@nkf -wd --overwrite ddl.sql</span><br></pre></td></tr></table></figure><p>なお、コマンドラインツールですが、Wine&#x2F;Macだと動かないという話もあり（私は未検証）、もし何か追加で手順が必要であれば教えてください。</p><p>他にも、ERDのPDFを生成したりします。PDFではなくPNGなどの画像ファイルを出力を自動化するのも良いかなと思います。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">erd.png: erd.a5er</span></span><br><span class="line">@A5M2cmd.exe /ERImage /ERD=ERD.a5er /OutFileName=erd.png</span><br></pre></td></tr></table></figure><p>まとめて generate タスクのようにしても良いかなと思います。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.PHONY : generate</span><br><span class="line"><span class="section">generate: ddl.sql erd.pdf erd.png</span></span><br></pre></td></tr></table></figure><p>他にも、今回は割愛しますがSQLフォーマッタやImport&#x2F;ExportなどもCLIで呼び出せます。この手のツールでコマンドラインを用意されているところが、痒いところに手が届いて素晴らしいのでぜひ活用していきましょう。</p><h3 id="DDLオプション"><a href="#DDLオプション" class="headerlink" title="DDLオプション"></a>DDLオプション</h3><p>例えばPostgreSQLにおけるパーティション設定をどこで設定するか、迷った方も多いのではないでしょうか（私です）。</p><p>こういったRDBMS固有の設定は、CREATE TABLEオプションに記載します。次の例は、注文テーブルに対して、注文日でRANGEパーティションを設定する例です。</p><img src="/images/20221025a/PARTITON_BY_RANGE(order_on).png" alt="PARTITON_BY_RANGE(order_on)" width="1018" height="404" loading="lazy"><p>これが設定されると次のようにDDL出力時に差し込まれます。シンプルな仕組みに感じますが、私の周辺ではこれが逆に良いんだという声が続出している拡張機能です。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">order</span> (</span><br><span class="line">  id <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , user_id <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  <span class="comment">-- 中略</span></span><br><span class="line">  , updated_by <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , revision <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">) <span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span>(ordered_on); <span class="comment">-- ★差し込まれたパーティション設定</span></span><br></pre></td></tr></table></figure><h3 id="論物変換"><a href="#論物変換" class="headerlink" title="論物変換"></a>論物変換</h3><p>型ドメインと類似ですが、同じ論理名なのに、物理名が揺れるケースがあります。よく見る例は次のようなケースです。</p><ul><li>注文番号（order_number）と処理番号（process_num）のように、 number と num で揺れるケース</li><li>開始日、終了日が start, end または from, to で揺れるケース</li><li>Xxx装置といったドメインで扱う名称が、 device と equipment で揺れるケース</li></ul><p>a5m2において標準で論物管理するような機能は存在しません。</p><p>そこでサードパーティ製のツールですが、 <a href="https://github.com/future-architect/a5er-dictionary">future-architect&#x2F;a5er-dictionary</a> を用いると便利です（同僚の辻さんが開発してくれました）。 <code>a5er-dictionary</code> は論理名でカラムを指定すると、辞書をもとに物理名を自動で組み立ててくれる便利ツールです。</p><p>例えば、以下のような辞書を用意します。</p><figure class="highlight txt"><figcaption><span>dict/dict.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ID,id</span><br><span class="line">会社,company</span><br><span class="line">コード,cd</span><br><span class="line">名,nm</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>これを用いて、各カラムの論理名から辞書を用いて、物理名を振り下ろすMakefileを用いると次のような感じで使えます。</p><figure class="highlight makefile"><figcaption><span>Makefile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: install a5er-dictionary</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> ERD_PATH=erd.a5er</span><br><span class="line"><span class="keyword">export</span> DICT_PATH=dict/dict.txt</span><br><span class="line"><span class="keyword">export</span> OUTPUT_PATH=erd.tmp</span><br><span class="line"><span class="keyword">export</span> TABLE_PLURAL=false</span><br><span class="line"></span><br><span class="line"><span class="section">install:</span></span><br><span class="line">@go install github.com/future-architect/a5er-dictionary/cmd/a5er-dictionary@latest</span><br><span class="line"></span><br><span class="line"><span class="section">a5er-dictionary: erd.a5er</span></span><br><span class="line">@a5er-dictionary</span><br><span class="line">@rm -f erd.a5er</span><br><span class="line">@mv erd.tmp erd.a5er</span><br><span class="line">@nkf -wd --overwrite erd.a5er</span><br></pre></td></tr></table></figure><p>これを実行すると、辞書が不完全であれば次のようなメッセージが出力されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make a5er-dictionary</span><br><span class="line">2022/10/23 21:34:41 Fail to logical to physical [<span class="comment">#注文]. remain [#注文]</span></span><br></pre></td></tr></table></figure><p>これは、「注文」に一致する「物理名」が無いため、論物変換できなかったということです。</p><p>その場合、次のようにdict.txt にレコードを追加していくことで、辞書自体を育てつつ論理名と物理名の揺れを防ぐ仕組みです。</p><figure class="highlight txt"><figcaption><span>dict/dict.txtに追加する</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注文,order</span><br></pre></td></tr></table></figure><p>注意ですが、論理名自体が揺れてしまうと意味がないの注意です（装置ID:equipment_id、デバイスID:device_idなど論理名で揺れると防ぎようが無いです）。</p><p><code>a5er-dictionary</code> はまだ <code>v0.2.0</code> であるため、不具合、ご要望などあればコメント貰えればです（こういったdict.txtの辞書自体も、オープン化したいですね）。</p><h3 id="ERDレビュー"><a href="#ERDレビュー" class="headerlink" title="ERDレビュー"></a>ERDレビュー</h3><p>機能でもなんでも無いですが、a5m2 の良いところの1つに、定義ファイルがテキストファイルであるということです。</p><p>そのため、何かしらの修正が発生した場合にはGitHub上で差分を見てレビューできることは非常に良いです（もちろん <code>ddl.sql</code> を見てレビューでも良いと思いますが、本体側に予期せぬ変更が加えられていないか見れるのが良いです）。</p><img src="/images/20221025a/a5m2フォーマット.png" alt="" width="1200" height="1180" loading="lazy"><p><code>a5er</code> 拡張子のファイルをエディタで開くとフラットな構造であることがわかり、Diffも取りやすいことが分かります。</p><h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><p>データモデリングのテーマからは外れますが、<a href="https://a5m2.mmatsubara.com/help/TableEditor/dummy.html">テスト用ダミーデータ作成</a> 機能はかなり便利と私の周囲で評判です。なんというか痒いところに届く感じが凄いです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>a5m2のデータモデリング周りの便利な機能、使い方を紹介しました。</p><p>個人的には開発者10人程度までであれば、今回のようなa5m2の機能を用いて十分に設計開発が進められると感じています。</p><p>もっと他にもこういった機能が便利だよというのがありましたら、Twitterなどでコメントを貰えると幸いです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DB/">DB</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%A2%E3%83%87%E3%83%AB/">データモデル</category>
      
      <category domain="https://future-architect.github.io/tags/%E4%BE%BF%E5%88%A9%E3%83%84%E3%83%BC%E3%83%AB/">便利ツール</category>
      
      <category domain="https://future-architect.github.io/tags/a5m2/">a5m2</category>
      
      <category domain="https://future-architect.github.io/tags/A5-SQLMk-2/">A5:SQLMk-2</category>
      
      
      <comments>https://future-architect.github.io/articles/20221025a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Goで作ったロジックにWebUIをつけてGitHubページに公開する</title>
      <link>https://future-architect.github.io/articles/20221024a/</link>
      <guid>https://future-architect.github.io/articles/20221024a/</guid>
      <pubDate>Sun, 23 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;ちょっとしたツールをGoで作ってみたのですが、わざわざインストールしなくてもいいようにWebのUIをつけてブラウザで使えるようにしてみました。作ってみたのは以下のツールで、Markdownのリスト形式でざっと下書きしたテーブルの設計をSQLとか、PlantUMLとかMerm</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>ちょっとしたツールをGoで作ってみたのですが、わざわざインストールしなくてもいいようにWebのUIをつけてブラウザで使えるようにしてみました。作ってみたのは以下のツールで、Markdownのリスト形式でざっと下書きしたテーブルの設計をSQLとか、PlantUMLとかMermaid.js形式のERDの図にします。</p><p><a href="https://shibukawa.github.io/md2sql/">https://shibukawa.github.io/md2sql/</a></p><img src="/images/20221024a/スクリーンショット_2022-10-18_8.38.26.png" alt="" width="1200" height="714" loading="lazy"><p>ウェブフロントエンド部分はNext.jsの静的サイトで、GoはWASMにしてロードして実行しています。WASMを使うのは初めてなのであえて選んでみました。</p><h1 id="GoをWASM化する"><a href="#GoをWASM化する" class="headerlink" title="GoをWASM化する"></a>GoをWASM化する</h1><p>もともとCLIツールは作っておりました。CLIのメインは<a href="https://github.com/shibukawa/md2sql/blob/main/cmd/md2sql/main.go">cmd&#x2F;md2sql&#x2F;main.go</a>で作っていました。この中でやっていることは</p><ul><li>kingpin.v2のオプションパース</li><li>指定されたファイルを読み込み(あるいは標準入力)</li><li>パース</li><li>指定の形式変換</li></ul><p>です。このうち、Web化する場合は後者の2個だけ必要ですし、コマンドラインオプションのパースとかは不要なので、WASM化用のmain.goを別途作ります。それが<a href="https://github.com/shibukawa/md2sql/blob/main/cmd/wasm/main.go">cmd&#x2F;wasm&#x2F;main.go</a>です。JSから呼ばれる関数は<code>js.Value</code>で引数を受け取るエントリー関数を用意しておきます。<code>ConvertToSQL()</code>がこれにあたります。そしてJS側から呼べるように、<code>js.Global()</code>に作ったAPIを追加します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:build wasm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;syscall/js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/shibukawa/md2sql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConvertToSQL</span><span class="params">(this js.Value, args []js.Value)</span></span> any &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">map</span>[<span class="type">string</span>]any&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span>:      <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;first argument should be markdown source.&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">tables, err := md2sql.Parse(strings.NewReader(args[<span class="number">0</span>].String()))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">map</span>[<span class="type">string</span>]any&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span>:      <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;message&quot;</span>: err.Error(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">md2sql.DumpSQL(&amp;buf, tables, md2sql.PostgreSQL)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">map</span>[<span class="type">string</span>]any&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span>:     <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;result&quot;</span>: buf.String(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mermaid/PlantUML変換は省略</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">js.Global().Set(<span class="string">&quot;md2sql&quot;</span>, js.ValueOf(<span class="keyword">map</span>[<span class="type">string</span>]any&#123;</span><br><span class="line"><span class="string">&quot;toSQL&quot;</span>:      js.FuncOf(ConvertToSQL),</span><br><span class="line"><span class="string">&quot;toMermaid&quot;</span>:  js.FuncOf(ConvertToMermaid),</span><br><span class="line"><span class="string">&quot;toPlantUML&quot;</span>: js.FuncOf(ConvertToPlantUML),</span><br><span class="line">&#125;))</span><br><span class="line">&lt;-c <span class="comment">// 終了しないようにブロック</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次のコマンドでwasmが生成されることを確認しておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ GOOS=js GOARCH=wasm go build -o md2sql.wasm</span><br></pre></td></tr></table></figure><p>実行時にローダーも必要なのでwasm_exec.jsを取得しておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> <span class="string">&quot;<span class="subst">$(go env GOROOT)</span>/misc/wasm/wasm_exec.js&quot;</span> .</span><br></pre></td></tr></table></figure><h1 id="Webの画面を作る"><a href="#Webの画面を作る" class="headerlink" title="Webの画面を作る"></a>Webの画面を作る</h1><p>&#x2F;cmd&#x2F;frontendをつくるようにcreate-next-appを実行し、最近お気に入りの<a href="https://future-architect.github.io/articles/20211124a/">Tailwind.CSSとdaisyUI</a>の組み合わせで、ページトップのスクリーンショットのような画面を作りました。テキストボックスに入れられたソースコードを<code>useRef</code>の変数に一時変数に入れておいて、generateボタンを押されたらGoコードを呼び出して実行します。</p><p>まず、Next.jsが動くページは、ドメイン(shibukawa.github.io)直下ではなく、&#x2F;md2sql&#x2F;というフォルダの中で動くのでbasePathを設定します。ついでに、静的サイト生成してアップするので画像の最適化もオフにしておきます。</p><figure class="highlight js"><figcaption><span>/cmd/frontend/next.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nextConfig = &#123;</span><br><span class="line">  <span class="attr">basePath</span>: <span class="string">&#x27;/md2sql&#x27;</span>,     <span class="comment">// 追加</span></span><br><span class="line">  <span class="attr">reactStrictMode</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">swcMinify</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">images</span>: &#123;                <span class="comment">// 追加</span></span><br><span class="line">    <span class="attr">unoptimized</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ついでにロードするWASMが公開する関数の型定義を宣言します。</p><figure class="highlight ts"><figcaption><span>/cmd/frontend/md2sql.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> f = <span class="function">(<span class="params">src: <span class="built_in">string</span></span>) =&gt;</span> &#123; <span class="attr">ok</span>: <span class="literal">true</span>, <span class="attr">result</span>: <span class="built_in">string</span>&#125; | &#123;<span class="attr">ok</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="built_in">string</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="attr">md2sql</span>:&#123;</span><br><span class="line">    <span class="attr">toSQL</span>: f,</span><br><span class="line">    <span class="attr">toMermaid</span>: f,</span><br><span class="line">    <span class="attr">toPlantUML</span>: f,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>tsconfig.json</code>にこの追加したmd2sql.d.tsを追加しておきます。最初next-env.d.tsに追加してやっていたのですが、このファイルってビルドのたびに再生成されてしまうので消えてしまいます。</p><figure class="highlight json"><figcaption><span>/cmd/frontend/tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;next-env.d.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;md2sql.d.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;**/*.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;**/*.tsx&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>wasm_exec.js</code>はNext.jsのpublicフォルダに入れておきます。</p><p>ビルド周りもいろいろ書き換えておきます。静的サイト生成なので、next build後にnext exportも実行するのと、GitHubの制約でリポジトリのルート以下の&#x2F;docsフォルダに生成されたファイルを移動、<code>.nojekyll</code>ファイルをその中に作る、というのを一緒にやります。ついでにGoのビルドもここに入れておきました。</p><p>さっとやったのでWindowsでは動かない書き方をしています。すみません。Windowsだったら<a href="https://www.npmjs.com/package/shelljs">shelljs</a>とか<a href="https://www.npmjs.com/package/crossenv">crossenv</a>を使ってください。</p><figure class="highlight json"><figcaption><span>/cmd/frontend/package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prebuild&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cd ../wasm &amp;&amp; GOOS=js GOARCH=wasm go build -o ../frontend/public/md2sql.wasm&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;next build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;postbuild&quot;</span><span class="punctuation">:</span> <span class="string">&quot;next export &amp;&amp; mv out ../../docs &amp;&amp; touch ../../docs/.nojekyll&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="繋げる部分のコード"><a href="#繋げる部分のコード" class="headerlink" title="繋げる部分のコード"></a>繋げる部分のコード</h1><p>wasm_exec.jsをロードして実行するコードを書きます。Next.jsでは任意のページ内とかコンポーネント内で宣言しておけば、ページのヘッダー部分に<code>&lt;script&gt;</code>タグを作って遅延ロードしてくれる<a href="https://nextjs.org/docs/basic-features/script"><code>next/script</code>コンポーネント</a>があるのでこれを使います。一応この<a href="https://www.npmjs.com/package/@types/golang-wasm-exec">wasm_exec.jsの型定義も</a>入れようと思えば入れられますが、今回はts-ignoreで済ませてしまいました。定型文ですし。GitHubページのプロジェクトページなのでjsもwasmもパスが<code>/md2sql/</code>以下にある想定で書きます。</p><figure class="highlight tsx"><figcaption><span>/cmd/frontend/pages/index.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Script</span> <span class="keyword">from</span> <span class="string">&#x27;next/script&#x27;</span></span><br><span class="line"></span><br><span class="line">:中略</span><br><span class="line"></span><br><span class="line">&#123; <span class="comment">/* Load web assembly */</span> &#125;</span><br><span class="line">&lt;<span class="title class_">Script</span> id=<span class="string">&quot;exec-wasm&quot;</span> src=<span class="string">&quot;/md2sql/wasm_exec.js&quot;</span> onLoad=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">const</span> go = <span class="keyword">new</span> <span class="title class_">Go</span>();</span><br><span class="line">    <span class="title class_">WebAssembly</span>.<span class="title function_">instantiateStreaming</span>(<span class="title function_">fetch</span>(<span class="string">&quot;/md2sql/md2sql.wasm&quot;</span>), go.<span class="property">importObject</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        go.<span class="title function_">run</span>(result.<span class="property">instance</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;&#125;/&gt;</span><br></pre></td></tr></table></figure><p>WASMのロジックは生成のコールバックが呼ばれた時に呼び出します。型定義があるのでその通りに呼んであげればOKです。本当はエラーはトーストとかでポップアップさせた方が良いけどとりあえず雑にコンソールに書いてます。</p><figure class="highlight tsx"><figcaption><span>/cmd/frontend/pages/index.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> generate = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (format) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;sql&quot;</span>:</span><br><span class="line">      <span class="keyword">const</span> r1 = md2sql.<span class="title function_">toSQL</span>(src.<span class="property">current</span>);</span><br><span class="line">      <span class="keyword">if</span> (r1.<span class="property">ok</span>) &#123;</span><br><span class="line">        <span class="title function_">setResult</span>(r1.<span class="property">result</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(r1.<span class="property">message</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 以下略</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [format])</span><br></pre></td></tr></table></figure><p>接点としてはこの「起動時のロード」と、ローダーが登録した関数の呼び出しだけですので、あとはウェブフロントエンド作れる人には特に問題なく進められると思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>思ったよりもWASM化が簡単にできました。作業時間の半分はGitHubページのフォルダがルート直下じゃないことで起きる問題のトラブルシュートでした。繋ぐ部分を作ってローカルで試すのは思ったよりもすぐでした。</p><p>なお、標準のGoコンパイラでやっていますので生成されるwasmファイルは大きめ(5.5MB、gzip時に1.3MB)ですが、TinyGoを使えばもっと小さいものが作れますが、標準のGoの方が互換性が高いというメリットはあります。以前はgopher.jsを使ったりしたこともありますが、標準処理系でできるのはありがたいですね。まあ、あちらは.jsになるのでローダーが不要というメリットはあります。</p><p>今後も、小さいな補助ツールを作ったらウェブで簡単に実行できるようにしていこうと思いました。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.asobou.co.jp/blog/web/go-webassembly">GoのコードをWebAssenblyにコンパイルしてブラウザ上でGoを実行する</a></li><li><a href="https://macias.info/entry/202003151900_go_wasm_js.md">Go and WebAssembly (I): interacting with your browser JS API</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/">フロントエンド</category>
      
      <category domain="https://future-architect.github.io/tags/Next-js/">Next.js</category>
      
      <category domain="https://future-architect.github.io/tags/wasm/">wasm</category>
      
      
      <comments>https://future-architect.github.io/articles/20221024a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CSV処理における共通処理をDecoratorパターンで実現する</title>
      <link>https://future-architect.github.io/articles/20221021a/</link>
      <guid>https://future-architect.github.io/articles/20221021a/</guid>
      <pubDate>Thu, 20 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;Technogoly Innovation Group</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Technogoly Innovation Group 辻です。</p><p>システム間のデータ連携として、他システムが出力した CSV ファイルを Go で読み込んでリレーショナルデータベースにファイルのデータを保存する、という処理がありました。CSV の値をデコードしたあとに共通的な処理を差し込みたいユースケースで <a href="https://ja.wikipedia.org/wiki/Decorator_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">Decorator パターン</a>を使って実装をしました。コードベースをシンプルに保ちつつ共通処理をフックできます。実用的なユースケースで Decorator パターンを紹介する記事は少ないと思ったので、本記事を書きました。<br>まず Decorator パターンが必要になった背景を説明したあとに具体的な Go の実装を見ていきます。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>他システムが出力した CSV ファイルを Go でデコードして、PostgreSQL にデータを投入するような処理がありました。簡略化したイメージは以下です。</p><img src="/images/20221021a/abstract.png" alt="" width="666" height="156" loading="lazy"><p>このとき、連携元システムが出力した CSV ファイルにヌル文字（NUL）<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> が稀に含まれることがわかりました。ヌル文字は PostgreSQL では扱えません。ヌル文字が含まれるデータを PostgreSQL に投入しようとするとエラーになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: invalid byte sequence for encoding &quot;UTF8&quot;: 0x00 (SQLSTATE 22021)</span><br></pre></td></tr></table></figure><p>PostgreSQL のエラーコード <a href="https://www.postgresql.jp/document/14/html/errcodes-appendix.html#:~:text=22021,character_not_in_repertoire">22021</a> や PostgreSQL の開発グループが運営する QA のスレッド <a href="https://www.postgresql.org/message-id/1510040474.2845.41.camel%40cybertec.at">“Re: ERROR: invalid byte sequence for encoding “UTF8”: 0x00”</a> などを見ると、PostgreSQL ではヌル文字は許容されていないことがわかります。</p><p>このことから PostgreSQL にデータを投入する前にヌル文字を削除する必要がありました。連携元システムの CSV ファイル出力処理は手を加えることができなかったため、<strong>Go の実装のなかでヌル文字を削除する</strong>ことにしました。</p><h2 id="実装方針"><a href="#実装方針" class="headerlink" title="実装方針"></a>実装方針</h2><p>実装方針として大きく２つ考えらます。</p><ul><li>案１：ナイーブにヌル文字を除外する</li><li>案２：Decorator パターンを使ってヌル文字を除外する</li></ul><p>本ケースでは後者の方法がより望ましい実装方針です。</p><p>まずヌル文字を除外する前の実装を確認します。その上でヌル文字を除外するためのナイーブな実装方法と、その実装をするとコードベースがどうなるか考えたあと、最後に Decorator パターンを使った実装を紹介します。</p><h3 id="ヌル文字を除外する前の実装"><a href="#ヌル文字を除外する前の実装" class="headerlink" title="ヌル文字を除外する前の実装"></a>ヌル文字を除外する前の実装</h3><p>まずヌル文字を除外する前の実装例です。CSV ファイルを読み込んで <a href="https://github.com/gocarina/gocsv">gocarina&#x2F;gocsv</a> でデコードし標準出力する実装です。データベースにデータを投入するコードは省略します。説明の便宜上 CSV ファイルの値は標準出力してヌル文字が含まれていることを確認します。</p><p>CSV ファイルの <code>&quot;future&quot;</code> の文字列の後ろにはヌル文字が含まれています。</p><figure class="highlight plaintext"><figcaption><span>company.csv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id,company_name</span><br><span class="line">&quot;1&quot;,&quot;future &quot;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>model.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Company <span class="keyword">struct</span> &#123;</span><br><span class="line">ID          <span class="type">string</span> <span class="string">`csv:&quot;id&quot;`</span></span><br><span class="line">CompanyName <span class="type">string</span> <span class="string">`csv:&quot;company_name&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/csv&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gocarina/gocsv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f, err := os.Open(<span class="string">&quot;company.csv&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">r := csv.NewReader(f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ss []Company</span><br><span class="line"><span class="keyword">if</span> err := gocsv.UnmarshalCSV(r, &amp;ss); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> ss &#123;</span><br><span class="line"><span class="comment">// ヌル文字は目には見えないため、バイト列として表示します</span></span><br><span class="line"><span class="comment">// 値が 0 であるバイトがヌル文字です</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;ID = %v, CompanyName = %v&quot;</span>,</span><br><span class="line">[]<span class="type">byte</span>(s.ID),</span><br><span class="line">[]<span class="type">byte</span>(s.CompanyName),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// データベースを投入する何らかの処理（省略）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>出力結果</li></ul><p>バイト列で確認すると、たしかに <code>CompanyName</code> の終端にヌル文字（バイトが 0）が含まれています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ID = [49], CompanyName = [102 117 116 117 114 101 0]</span><br></pre></td></tr></table></figure><h3 id="案１：ナイーブにヌル文字を除外する実装"><a href="#案１：ナイーブにヌル文字を除外する実装" class="headerlink" title="案１：ナイーブにヌル文字を除外する実装"></a>案１：ナイーブにヌル文字を除外する実装</h3><p>さて、ヌル文字を除外する実装を考えます。ナイーブな実装は <code>ID</code> や <code>CompanyName</code> の各構造体の値をデータベースへ投入するときにヌル文字を除外するという方法です。実装例のコードでは標準出力時に除外することに相当します。</p><p>実装例は以下です。</p><figure class="highlight go"><figcaption><span>delete_nul.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// deleteNUL はヌル文字を削除した文字列を返却します</span></span><br><span class="line"><span class="comment">// &quot;\x00&quot; がヌル文字です</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteNUL</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> strings.ReplaceAll(s, <span class="string">&quot;\x00&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> ss &#123;</span><br><span class="line"><span class="comment">// 表示するときに各フィールドに deleteNUL() を挟み、ヌル文字を除外する</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;ID = %v, CompanyName = %v&quot;</span>,</span><br><span class="line">[]<span class="type">byte</span>(deleteNUL(s.ID)),</span><br><span class="line">[]<span class="type">byte</span>(deleteNUL(s.CompanyName)),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>出力結果</li></ul><p>出力結果を見ると、ヌル文字が削除されています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ID = [49], CompanyName = [102 117 116 117 114 101]</span><br></pre></td></tr></table></figure><p>この実装方法でヌル文字を除外できますが、以下のような課題があります。</p><ul><li>コードの見通し、可読性が悪くなる。ビジネスロジックのコードにシステム都合によるコードが混ざるため</li><li>実装やテストが漏れてしまうおそれがある。構造体の全フィールドに適用する必要があるため</li></ul><p>Decorator パターンを使って実装することで上記の課題を解決できます。</p><h3 id="案２：Decorator-パターンを使ってヌル文字を除外する実装"><a href="#案２：Decorator-パターンを使ってヌル文字を除外する実装" class="headerlink" title="案２：Decorator パターンを使ってヌル文字を除外する実装"></a>案２：Decorator パターンを使ってヌル文字を除外する実装</h3><p>本ケースでベターな方法である Decorator パターンを使った実装を紹介します。Decorator パターンはデザインパターンの１つとして知られています。もともとの振る舞いに対して、新しい振る舞いを動的に追加できます。</p><p>今回のケースでは「CSV の値を読み込む」という振る舞いに対して「ヌル文字を除去する」という振る舞いを追加します。これにより <code>gocsv.UnmarshalCSV()</code> で CSV をデコードするときにヌル文字を除去できます。まず <code>gocsv.UnmarshalCSV()</code> の API のシグネチャを確認したあとに、どのように Decorator を実装するか説明します。</p><p><code>gocsv.UnmarshalCSV</code> の API は以下のようになっています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnmarshalCSV(in CSVReader, out <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span></span><br></pre></td></tr></table></figure><p>第一引数に <code>gocsv.CSVReader</code> のインターフェースを受け取っていることがポイントです。 <code>gocsv.CSVReader</code> は以下のメソッドがあるインターフェースです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CSVReader <span class="keyword">interface</span> &#123;</span><br><span class="line">Read() ([]<span class="type">string</span>, <span class="type">error</span>)</span><br><span class="line">ReadAll() ([][]<span class="type">string</span>, <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>またヌル文字を除外する前の実装で <code>gocsv.UnmarshalCSV</code> の引数として渡している <code>*csv.Reader</code> 構造体は当然ながら <code>Read()</code> と <code>ReadAll()</code> メソッドがあります。</p><p>このとき <strong><code>gocsv.CSVReader</code> インターフェースを満たす <code>Read()</code> と <code>ReadAll()</code> メソッドを持つ構造体を用意し、それぞれメソッドで <code>*csv.Reader</code> の <code>Read()</code> と <code>ReadAll()</code> を呼び出したあとに、ヌル文字を除外するような実装ができます。この構造体を <code>gocsv.UnmarshalCSV()</code> の引数に渡すことで <code>gocsv</code> によるデコード時にヌル文字を除去できます</strong>。</p><p>具体的な Decorator の実装例は以下のとおりです。</p><figure class="highlight go"><figcaption><span>decorator_reader.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> deleteNulReader <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 型は *csv.Reader でも良いです</span></span><br><span class="line"><span class="comment">// ただ Decorator と呼ぶ場合、振る舞いをラップするインターフェースと</span></span><br><span class="line"><span class="comment">// 同じインターフェースを型に持つのが一般的です</span></span><br><span class="line">r gocsv.CSVReader</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewDeleteNulReader は Decorator したインターフェースを返却します</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDeleteNulReader</span><span class="params">(r gocsv.CSVReader)</span></span> gocsv.CSVReader &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;deleteNulReader&#123;r: r&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dr *deleteNulReader)</span></span> Read() ([]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// 最初に引数に渡された値の Read() を呼び出す</span></span><br><span class="line">ss, err := dr.r.Read()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ss, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read() の結果に対して、ヌル文字を除去する処理をおこなう</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> ss &#123;</span><br><span class="line">ss[i] = strings.ReplaceAll(ss[i], <span class="string">&quot;\x00&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ss, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dr *deleteNulReader)</span></span> ReadAll() ([][]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// 最初に引数に渡された値の ReadAll() を呼び出す</span></span><br><span class="line">ss, err := dr.r.ReadAll()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ss, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadAll() の結果に対して、ヌル文字を除去する処理をおこなう</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> ss &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="keyword">range</span> ss[i] &#123;</span><br><span class="line">ss[i][j] = strings.ReplaceAll(ss[i][j], <span class="string">&quot;\x00&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ss, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで Decorator は完成です。アプリケーションのコードに Decorator を適用する場合は以下のようになります。デコード処理以降の実装は手を加えずとも <code>gocsv.UnmarshalCSV()</code> で得られる結果ではヌル文字が削除されているのが非常に嬉しいポイントです。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NewDeleteNulReader() として Decorator を適用する</span></span><br><span class="line">r := NewDeleteNulReader(csv.NewReader(f))</span><br><span class="line"></span><br><span class="line"><span class="comment">// デコード処理以降の実装は手を加えずにヌル文字を除外することができる</span></span><br><span class="line"><span class="keyword">var</span> ss []Company</span><br><span class="line"><span class="keyword">if</span> err := gocsv.UnmarshalCSV(r, &amp;ss); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> ss &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;ID = %v, CompanyName = %v&quot;</span>,</span><br><span class="line">[]<span class="type">byte</span>(s.ID),</span><br><span class="line">[]<span class="type">byte</span>(s.CompanyName),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// データベースを投入する何らかの処理（省略）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>出力結果</li></ul><p>このような方法でヌル文字を除外できました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ID = [49], CompanyName = [102 117 116 117 114 101]</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>CSV ファイルのデコード時に必要な共通的な処理を Decorator パターンを使って実装しました。この方法はコードベースをシンプルに保ちつつ、必要な共通処理をフックできる方法として役に立ちます。Decorator パターンの実用的な適用例として、みなさんの参考になれば嬉しいです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">文字コード 0 番の制御文字のことです。データや文字列の終端を示す特殊な文字として使用されることがあります。 <a href="https://e-words.jp/w/%E7%A9%BA%E6%96%87%E5%AD%97.html">https://e-words.jp/w/空文字.html</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E9%80%A3%E6%90%BA/">ファイル連携</category>
      
      <category domain="https://future-architect.github.io/tags/CSV/">CSV</category>
      
      <category domain="https://future-architect.github.io/tags/Decorator/">Decorator</category>
      
      
      <comments>https://future-architect.github.io/articles/20221021a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>DynamoDB Streamsは同一ハッシュキーでもソートキーが異なれば順序保証されない</title>
      <link>https://future-architect.github.io/articles/20221020a/</link>
      <guid>https://future-architect.github.io/articles/20221020a/</guid>
      <pubDate>Wed, 19 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG DXユニットの真野です。&lt;/p&gt;
&lt;p&gt;タイトルに書いたままの内容の記事です。おそらくDynamoDB</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニットの真野です。</p><p>タイトルに書いたままの内容の記事です。おそらくDynamoDB Streams について調べたことがある方の多くの人には自明な内容だと思います。サマリです。</p><ul><li>DynamoDB Streamsの起動順序が保たれるのは <strong>項目単位</strong><ul><li>ハッシュキーのみのテーブルであればその単位</li><li>ハッシュキー＋ソートキーのテーブルであれば、 <strong>ソートキーまで含めた単位</strong></li><li>ソートキーが異なれば、起動順序が異なる可能性がある</li></ul></li><li>よく耳にするDynamoDB Streams シャードに言い換えると、シャードが同じであれば順序制御される<ul><li>異なるシャード同士では当然、順序保証はされない</li><li>同じハッシュキーでも、ソートキーが異なれば異なるシャードに割り当てられる可能性がある（あった）</li><li>DynamoDB Streamsのシャードは、DynamoDBテーブルのパーティションとは管理粒度が異なる</li></ul></li></ul><p>私がガッツリ勘違いしていて、でもトラブルシュートしてくれたのはチームの若手エースという、遺憾な結果でしたので、二度と繰り返さないという反省の意味も込め詳細を書きます。</p><h2 id="DynamoDB-Streamsとは"><a href="#DynamoDB-Streamsとは" class="headerlink" title="DynamoDB Streamsとは"></a>DynamoDB Streamsとは</h2><p>DynamoDB Streamsについては1.5年前に似たような小ネタを投稿しました。DynamoDB Streams自体についてはそちらを参照ください（今見ても（当時から）すでにタイトルが..）。</p><ul><li><a href="/articles/20210122/">オレのDynamoDB Streamsが再着火しないわけがない </a></li></ul><h2 id="ハマったケース"><a href="#ハマったケース" class="headerlink" title="ハマったケース"></a>ハマったケース</h2><p>例を上げて説明します。</p><img src="/images/20221020a/dynamodbstreams_構成.png" alt="dynamodbstreams_構成.png" width="1200" height="277" loading="lazy"><p>構成例のイメージです。何かしらスタッフの動作をセンシングするデバイスがあり、それをリアルタイムでDynamoDBに登録。そのデータをニアリアルタイムで別システムに連携する必要があるため、DynamoDB StreamsでS3に N 分間隔でタイムスタンプ付きのファイル名で出力。連携先の別システムはファイル名をもとに順次取り込む、といった連携方式です。</p><p>センシングされたデータは時系列に並んでおり、DynamoDBのキーとしては、デバイスIDがハッシュキー、読み取り時間がソートキーになるようなイメージです。</p><p>問題になった事象としては次です。</p><ul><li>生成されたファイルを順次取り込んだが、あるデバイスIDに絞ると時系列で順序が狂っていた</li><li>センシングされた最新の情報が誤って取り込まれ、実体とシステムの値が異なった</li></ul><img src="/images/20221020a/dynamodbstreams_構成-ページ2.drawio.png" alt="dynamodbstreams_構成-ページ2.drawio.png" width="1200" height="486" loading="lazy"><p>最初は、センシングするデバイス側から送られる順番が狂ったとか、図では省略していますが途中で経由するKinesis Data StreamsのシャードIDにデバイスIDが入っていないなど、DynamoDBに書き込まれるまでで順序が狂ったのかと思っていましたが、書き込みデータにデバイスから送信日時とサーバ受付時間、DBへの永続日時を比較すると原因がDynamoDB Streamsでの出力で狂っていることが分かりました。</p><h2 id="発生メカニズム"><a href="#発生メカニズム" class="headerlink" title="発生メカニズム"></a>発生メカニズム</h2><p><a href="https://aws.amazon.com/jp/blogs/news/how-to-perform-ordered-data-replication-between-applications-by-using-amazon-dynamodb-streams/">Amazon DynamoDB ストリームを使用して、順序付けされたデータをアプリケーション間でレプリケーションする方法 | Amazon Web Services ブログ</a> からの図を参照します。</p><p>DynamoDB Streamsは内部的にシャードと呼ばれる単位で分割されています。シャードがどういう単位で分割されるかは利用者側の制御ができず、操作数に応じて柔軟に拡大・縮小する仕組みです。（下図だと3シャードに分かれており、その単位でLambdaが起動します。）</p><img src="/images/20221020a/DDB-Stream.jpg" alt="DDB-Stream.jpg" width="880" height="459" loading="lazy"><p>Lambdaの起動数ですが、同時実行数を1にすれば、次のように1シャード、1Lambdaしか起動しないです。シャード内は更新順に並んでいるためその中ではLambdaで順番に処理すれば良いです。</p><img src="/images/20221020a/DDB-Table1.jpg" alt="DDB-Table1.jpg" width="760" height="293" loading="lazy"><p>今回の間違いは、下図のように、同一Partitionにあるけれど、異なるDynamoDB Streamsシャードに割り当てられたため、ほぼ同時タイミングで複数のLambdaが起動し、同一ハッシュキーのデータ順序が狂ったことが原因で発生しました。</p><img src="/images/20221020a/dynamodb順序-ページ3.drawio.png" alt="dynamodb順序-ページ3.drawio.png" width="1200" height="397" loading="lazy"><p>連携先システムとしてはどのファイルにどのキーが含まれているかわかりようがないので回避しようがない（ファイルをマージして取り込むにしても、まだ出力されていないファイルに順序が狂ったデータが無いと言い切れない）ため、出力側が調整すべきことです。</p><p>なお、図ではシャードごとのLambda起動順が狂った感じで書いていますが、起動順序が図とは逆であったとしても、Lambdaの実行時間によっては想定外の出力順序になりえます（どちらか片方がこの例でいくとS3の書き込みでリトライが走ったとか、Streamsの件数がたまたま片方が100件でもう片方が10件だったとか）。</p><p>これを開発した当初はデータ量もまだ少なく、シャードが細かく分割されていなかったためテストで検知されず、利用量が増えたことで顕在化したのかなとも思います。ハッシュキーが同じであればDynamoDB上は同一パーティションとなるので、そのままDynamoDB Streamsのシャードとなるのかと勘違いしていました。思い込みは良くないですね。後で切り分けするのは大変なので最初に裏取りしておくべきことでした。</p><h2 id="回避方法"><a href="#回避方法" class="headerlink" title="回避方法"></a>回避方法</h2><p>複数の回避手段があるかなと思います。てっとり早いのはDynamoDB Streamsではなく定時起動のジョブを作ることでしょう。</p><img src="/images/20221020a/改善案.png" alt="改善案.png" width="1200" height="642" loading="lazy"><p>もし、取り込み側のシステムのコントロールが効く、かつ過去分に対する補正処理が複雑でなければ、前回取り込んだデバイスのセンサー読み取り時刻より古ければ弾くといった処理を入れても良いかなと思います（状況によりますが）。</p><p>ちなみに、シャードが分かれることが原因であるため、Kinesis Data Streamsのキャプチャに変えても意味はないです。</p><ul><li><a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/kds.html">Kinesis Data Streams を使用して DynamoDB への変更をキャプチャする。 - Amazon DynamoDB</a></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>AWSドキュメント、ちゃんと読みましょう（自戒）</li><li>DynamoDB Streamsの起動順序は項目単位。ソートキーが指定されているテーブルの場合は、ハッシュキー＋ソートキーの単位での保証となる<ul><li>時系列DBのような使い方をしているテーブルに関しては、おそらく想定通りの挙動をしない</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/DynamoDB/">DynamoDB</category>
      
      <category domain="https://future-architect.github.io/tags/Lambda/">Lambda</category>
      
      <category domain="https://future-architect.github.io/tags/DynamoDBStreams/">DynamoDBStreams</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      
      <comments>https://future-architect.github.io/articles/20221020a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>技育祭2022秋に登壇しました。ソフトウェアアーキテクトって何やるの？～知っておくと役立つ考え方を共有します～</title>
      <link>https://future-architect.github.io/articles/20221019a/</link>
      <guid>https://future-architect.github.io/articles/20221019a/</guid>
      <pubDate>Tue, 18 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221019a/top.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;371&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221019a/top.png" alt="" width="1200" height="371" loading="lazy"><p>TIG真野です。技育祭2022秋のDAY1、勉強会のトップバッターで登壇させていただきました報告記事です。</p><ul><li><a href="https://talent.supporterz.jp/geeksai/2022autumn/">「技育祭」エンジニアを目指す学生のためのテックカンファレンス</a></li><li><a href="https://talent.supporterz.jp/geeksai/2022autumn/information/#1014-1330-HallA">技育祭2022【秋】参加学生のしおり</a></li></ul><h2 id="技育祭とは"><a href="#技育祭とは" class="headerlink" title="技育祭とは"></a>技育祭とは</h2><p>技育祭はサポーターズさんが運営している、「技術者を育てる」ことを目的としたエンジニアを目指す学生のための日本最大のオンラインカンファレンスです。調べた限りだと2020年から始まり、年に2回開催、今回で5回目の開催です。</p><p>個人的に思う特徴は以下かなと思っています。</p><ul><li><strong>豪華すぎる登壇陣</strong><ul><li>企業の役員・CTOクラスはもちろんのこと、デジタル大臣や、TVでも有名なデータ科学者、NASAジェット推進研究所、Rubyのパパ、AtCoderのchokudaiさんなど多方面で活躍されている方がいます。こんな集中して聞けるの学生さんが本当に羨ましい..</li></ul></li><li><strong>エンジニアを目指す学生さんのためのカンファレンス</strong><ul><li>このため、すでに社会人の方は知らない人も多いかもしれません</li></ul></li><li><strong>参加してくれる学生さんも多い!!</strong><ul><li>2022年秋は3日開催ですが、3000名以上と聞きました（もっとかも？）。3,4レーンでコンテンツが公開され、大型イベントです</li></ul></li></ul><p>私も同じタイムテーブルに、部屋の本棚に並んでいる<a href="https://www.amazon.co.jp/dp/B082WXZVPC/">ドメイン駆動設計入門 ボトムアップでわかる！ドメイン駆動設計の基本</a> の成瀬さんが登壇していて、しかもアーキテクトというタイトルもニアミスしており、チョチョチョ、マジでこれクジ運悪やつ～って思いました。当日は60名くらいの学生さんが見に来てくれました。何名か弊社員の人も来てくれたらしいです。応援、ありがとうございました。</p><h2 id="当日の内容"><a href="#当日の内容" class="headerlink" title="当日の内容"></a>当日の内容</h2><p>FutureCon2022の内容をアップデートして話しました。ソフトウェアアーキテクトって、大半の学生さんにとってはチーム開発の経験をしたことが無い以上、かなりストレッチじみた内容かなと思ったのですが、”勉強会” という枠にワザワザ参加したしてくれた以上、少しでも新しい視点を持ち帰ってもらえるような内容としました。</p><script async class="speakerdeck-embed" data-id="c3767385785847958fb75d0e07913ae2" data-ratio="1.77725118483412" src="//speakerdeck.com/assets/embed.js"></script><p>てっきり60分フルフル話すものだと思って資料を作りましたがが、最初に司会の方から会の趣旨について3,4分説明があり、質問タイムもあるということで45分くらいで終わるのが良いかなと思いました。アンチパターンの部分は飛ばし飛ばしだったので反省です。</p><h2 id="当日の質問"><a href="#当日の質問" class="headerlink" title="当日の質問"></a>当日の質問</h2><p>10分弱ほどの時間でしたが、時間目一杯まで質問をいただけました。ありがとうございます。覚えている範囲で質問＆回答を備忘に残します（チャットをメモに残すの忘れたのでうろ覚えです）。</p><ol><li>質問「アーキテクチャを検討する時に必要なスキルはあるんですか？」<ul><li>回答「最低限なレベルとしては、まず作りたいものをどの方法でも開発できるスキルは必要だと思います。その上で複数の選択肢が思いついたら、実現手段を比較してみるといった時間を取ってみると良いと思います」</li></ul></li><li>質問「AWSの資格はアーキテクチャを考える上で有益ですか？」<ul><li>回答「特にAWS上で構築する場合はプラスだと思います。何か実現したいことがある場合、AWSだと大体複数の手段が選択でき、その選択肢となりうるサービスを知っていることはプラスだと思います」</li></ul></li><li>質問「どれくらいアーキテクチャを考えることに時間を書けても良いですか？」<ul><li>回答「だいたい1割、多くても2割が適切かと思います。例えば、1週間で作れるシステムに3日かけるのはやり過ぎでしょう。その場合は半日～1日程度の時間を投資してもペイすると思います。まぁ本当に1週間くらいなら手戻りになってもたかが知れているので、数時間作戦を考えて、一気に作るくらいが多いような気もします」</li><li>（補足）Design It!に類似のことが書いていますが、<a href="https://speakerdeck.com/twada/quality-and-speed-2022-spring-edition?slide=100">t_wadaさんの発表</a>にでも触れられていました。</li></ul></li><li>質問「優秀な人が3名揃っていた時に、うまく進まないんですがこういう時にどうしますか？」<ul><li>回答「現場でもよく起こります。話しても空中戦になり疲弊するので、まず手を動かしてたたき台を作ることが大事です。」</li></ul></li></ol><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>社会人7,8年目くらいの同僚とか、私よりパイセンな15年目くらいの同僚にも良かったって話していたので、終わってみると少し背伸びした内容だった気もします。</p><p>ただ、個人的には学生の時に少し背伸びして読んだ書籍が、社会人になって後々かなりプラスに働いた体験があり、分からないところもあるが、こういう世界もあるんだと感じてもらえたらなと思います。最近は、ソフトウェアの規模もますます大きく、それを早く品質高く作るとともに、時に大きく変更したりいっそ捨てて作り直すということも多いと思います。そのためアーキテクトの判断はますます重要でしょう。良いアーキテクトはチームにとっても良い成長を促し、それが良いプロダクトを作ることにも繋がると思います。</p><p>私にとっても良い経験になりました。聞きに来てくれた方も、この記事を読んでくださった方もありがとうございました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%8A%80%E8%82%B2%E7%A5%AD/">技育祭</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%88/">ソフトウェアアーキテクト</category>
      
      
      <comments>https://future-architect.github.io/articles/20221019a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>PostgreSQLで Goの flextime のような関数を作りテスト時間を差し替える</title>
      <link>https://future-architect.github.io/articles/20221018a/</link>
      <guid>https://future-architect.github.io/articles/20221018a/</guid>
      <pubDate>Mon, 17 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221018a/safari-gb655953e6_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;426&quot;&gt;

&lt;p&gt;TIG 真野です。&lt;/p&gt;
&lt;p&gt;Goで時刻モックライブラリである、Songmuさん開発の&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221018a/safari-gb655953e6_640.jpg" alt="" width="640" height="426"><p>TIG 真野です。</p><p>Goで時刻モックライブラリである、Songmuさん開発の<a href="https://github.com/Songmu/flextime">flextime</a>にはずっとお世話になっています。</p><p>素晴らしいライブラリですが、SQLを用いて結果を永続化するようなテストでの利用する時に冗長性を感じました。</p><p>例えばあるWeb APIやバッチ処理のテストとして、DB上のデータが想定通りに登録&#x2F;更新されていることを調べたいときです。検証対象のカラムが例えば <code>created_at</code> 、<code>updated_at</code> だとします。通常は現在日時を登録する項目で、flextime で扱うのにうってつけです。ただし、これを固定化するには、Go側の <code>flextime</code> の値を外からSQLプレスホルダーで渡す必要があります。本来であれば、PostgreSQLであれば<code>current_timestamp</code> の関数で済むところを一々外から渡すのは面倒に感じます（仕方ないですが、これがなくなればGoもSQLのコードもスッキリするのにと思うこともしばしば）。</p><figure class="highlight go"><figcaption><span>SQLバインド</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_ <span class="string">&quot;embed&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/Songmu/flextime&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/jmoiron/sqlx&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed update.sql</span></span><br><span class="line"><span class="keyword">var</span> updateSQL <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateAlreadyRead</span><span class="params">(tx *sqlx.Tx, userID <span class="type">string</span>)</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">now := flextime.Now() <span class="comment">// 現在時刻取得</span></span><br><span class="line"></span><br><span class="line">row := tx.QueryRow(updateSQL, now, userID) -- updated_atのためにnowをバインドする</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> updateCnt <span class="type">int64</span></span><br><span class="line"><span class="keyword">if</span> err := row.Scan(&amp;updateCnt); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, fmt.Errorf(<span class="string">&quot;update read status: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="type">int</span>(updateCnt), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>update.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> update_cnt <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">UPDATE</span> notification</span><br><span class="line">        <span class="keyword">SET</span> read_status_typ <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line">            , updated_at <span class="operator">=</span> $<span class="number">1</span> <span class="comment">-- 要件上はcurrent_timestampで良いが、テスト観点でバインド項目化</span></span><br><span class="line">            , revision <span class="operator">=</span> revision <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">WHERE</span> user_id <span class="operator">=</span> $<span class="number">2</span></span><br><span class="line">            <span class="keyword">AND</span> read_status_typ <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span> <span class="comment">-- 0:未読</span></span><br><span class="line">        RETURNING <span class="number">1</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> cnt</span><br><span class="line"><span class="keyword">FROM</span> update_cnt;</span><br></pre></td></tr></table></figure><p>もちろん、<code>created_at</code>, <code>updated_at</code> などの項目を検証から除外すれば上記は気にしなくても良いですが、経験的には検証を外せば外すほど、そのテストの信頼性は落ちるのであまりしたくないです（しばしば、実は更新されていないことが後続フェーズで発覚して苦労します）。この辺は<a href="https://zenn.dev/mpyw/articles/rdb-ids-and-timestamps-best-practices">mpywさんの書いている記事</a>のように、PostgreSQLのトリガーなどでカバーするチームも多いかと思いますが、いったんそのやり方は忘れるとします。</p><figure class="highlight go"><figcaption><span>go-cmpでupdated_atをチェック対象外にする</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestUpdateAlreadyRead</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line">opts := cmpopts.IgnoreFields(<span class="string">&quot;updated_at&quot;</span>) <span class="comment">// 検証をスキップする項目を増やすと、テスト漏れになりやすい</span></span><br><span class="line"><span class="keyword">if</span> diff := cmp.Diff(wantRecords, gotRecords, opts); diff != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">&quot;records mismatch (-want +got):\n%s&quot;</span>, diff)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然、PostgreSQLのもとから用意されている組み込み関数には、flextimeのような時刻固定の仕組みはないです。</p><p>この例だと更新系なので1項目ですが、登録だとcreated_at分も合わせて2項目になります。また、SQLで抽出したGo側でゴリゴリ業務ロジックで組み立てて、またDBに書き戻すようなコードを書いていると、ここで書いた <code>now</code> を一々引き回す必要があり面倒です（引き回さないと、微妙に呼び出しタイミングで created_at, updated_at の値が変わって扱いにくくなります）。</p><h2 id="PostgreSQL関数-を作成して代用してみる"><a href="#PostgreSQL関数-を作成して代用してみる" class="headerlink" title="PostgreSQL関数 を作成して代用してみる"></a>PostgreSQL関数 を作成して代用してみる</h2><p>次のようなテーブルと関数を作成してみる提案です。次の <code>flex_time</code> テーブルと、 <code>flex_timestamp()</code> 関数を定義します。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- テーブル定義</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> flex_time</span><br><span class="line">(</span><br><span class="line">    seq_num  BIGSERIAL,</span><br><span class="line">    fix_time TIMESTAMPTZ</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 関数定義</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">FUNCTION</span> flex_timestamp()</span><br><span class="line">    <span class="keyword">RETURNS</span> TIMESTAMPTZ <span class="keyword">AS</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span></span><br><span class="line">        flex_ts TIMESTAMPTZ :<span class="operator">=</span> (<span class="keyword">SELECT</span> fix_time</span><br><span class="line">                                <span class="keyword">FROM</span> flex_time</span><br><span class="line">                                <span class="keyword">WHERE</span> seq_num <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">max</span>(seq_num) <span class="keyword">FROM</span> flex_time));</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        IF flex_ts <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">        <span class="keyword">THEN</span></span><br><span class="line">            <span class="keyword">RETURN</span> flex_ts;</span><br><span class="line">        <span class="keyword">ELSE</span></span><br><span class="line">            <span class="keyword">RETURN</span> <span class="built_in">current_timestamp</span>;</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">    <span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$ <span class="keyword">LANGUAGE</span> PLPGSQL;</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>上記を作っておいて、、 <code>flex_timestamp()</code> を呼ぶと、何もしないと現在時刻を返します。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># <span class="keyword">SELECT</span> flex_timestamp();</span><br><span class="line">        flex_timestamp</span><br><span class="line"><span class="comment">------------------------------</span></span><br><span class="line"> <span class="number">2022</span><span class="number">-10</span><span class="number">-08</span> <span class="number">22</span>:<span class="number">50</span>:<span class="number">28.52979</span><span class="operator">+</span><span class="number">09</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">SELECT</span> flex_timestamp();</span><br><span class="line">        flex_timestamp</span><br><span class="line"><span class="comment">-------------------------------</span></span><br><span class="line"> <span class="number">2022</span><span class="number">-10</span><span class="number">-08</span> <span class="number">22</span>:<span class="number">52</span>:<span class="number">33.674613</span><span class="operator">+</span><span class="number">09</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br></pre></td></tr></table></figure><p>テストで使用したい時間を登録します。</p><figure class="highlight sql"><figcaption><span>時刻を固定化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># <span class="keyword">INSERT</span> <span class="keyword">INTO</span> flex_time(fix_time) <span class="keyword">VALUES</span> (TO_TIMESTAMP(<span class="string">&#x27;2022-04-01 15:30:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>そうすると時間が固定化されます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># <span class="keyword">SELECT</span> flex_timestamp();</span><br><span class="line">     flex_timestamp</span><br><span class="line"><span class="comment">------------------------</span></span><br><span class="line"> <span class="number">2022</span><span class="number">-04</span><span class="number">-01</span> <span class="number">15</span>:<span class="number">30</span>:<span class="number">00</span><span class="operator">+</span><span class="number">09</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">SELECT</span> flex_timestamp();</span><br><span class="line">     flex_timestamp</span><br><span class="line"><span class="comment">------------------------</span></span><br><span class="line"> <span class="number">2022</span><span class="number">-04</span><span class="number">-01</span> <span class="number">15</span>:<span class="number">30</span>:<span class="number">00</span><span class="operator">+</span><span class="number">09</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br></pre></td></tr></table></figure><p>当たり前ですが、<code>flex_time</code> テーブルのレコードを削除すれば、現在時刻を返します。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># <span class="keyword">TRUNCATE</span> flex_time;</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span></span><br><span class="line"></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">SELECT</span> flex_timestamp();</span><br><span class="line">        flex_timestamp</span><br><span class="line"><span class="comment">-------------------------------</span></span><br><span class="line"> <span class="number">2022</span><span class="number">-10</span><span class="number">-08</span> <span class="number">22</span>:<span class="number">58</span>:<span class="number">17.919548</span><span class="operator">+</span><span class="number">09</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br></pre></td></tr></table></figure><p>これを用いれば、<code>current_timestamp</code> 関数とほぼ同等の使い方でSQLを書け、呼び出し元のコードもプレスホルダー文ちょっとすっきりすると思います。</p><p>使い終わったら <code>TRUNCATE</code> でキレイにしておくのがお作法になると思います。</p><h2 id="利用イメージ"><a href="#利用イメージ" class="headerlink" title="利用イメージ"></a>利用イメージ</h2><p>ここで最初の実装例に戻って適用してみます。</p><figure class="highlight diff"><figcaption><span>Go側の差分</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func UpdateAlreadyRead(tx *sqlx.Tx, userID string) (int, error) &#123;</span><br><span class="line"><span class="deletion">-row := tx.QueryRow(updateSQL, now, userID)</span></span><br><span class="line"><span class="addition">+row := tx.QueryRow(updateSQL, userID)</span></span><br><span class="line"></span><br><span class="line">var updateCnt int64</span><br><span class="line">if err := row.Scan(&amp;updateCnt); err != nil &#123;</span><br><span class="line">return 0, fmt.Errorf(&quot;update read status: %w&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return int(updateCnt), nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight diff"><figcaption><span>SQLの差分</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">WITH update_cnt AS (</span><br><span class="line">    UPDATE notification</span><br><span class="line">        SET read_status_typ = &#x27;2&#x27;</span><br><span class="line"><span class="deletion">-            , updated_at = $1</span></span><br><span class="line"><span class="addition">+            , updated_at = flex_timestamp()</span></span><br><span class="line">            , revision = revision + 1</span><br><span class="line">        WHERE user_id = $1</span><br><span class="line">            AND read_status_typ = &#x27;0&#x27; -- 未読</span><br><span class="line">        RETURNING 1)</span><br><span class="line">SELECT count(*) as cnt</span><br><span class="line">FROM update_cnt;</span><br></pre></td></tr></table></figure><p>テストでは、次のようにテスト時間を固定化したいタイミングで <code>flex_time</code> に登録します。終わったらTRUNCATEはチームでお約束を決めればよいと思います（通常は不要な気がしますが、一応消す例で書いてみました）。</p><figure class="highlight go"><figcaption><span>_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestUpdateAlreadyRead</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"></span><br><span class="line">_, err = tx.Exec(<span class="string">&quot;INSERT INTO flex_time (fix_time) VALUES (TO_TIMESTAMP(&#x27;2022-10-11 10:10:10&#x27;, &#x27;YYYY-MM-DD HH24:MI:SS&#x27;));&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, err := tx.Exec(<span class="string">&quot;TRUNCATE TABLE flex_time&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Error(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>ちょっとした違いですが、開発・レビューなどの観点で見落としになり得るポイントを1つでも減らせるのが大きいかなと思っています。</p><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><p>あまりないかもしれませんが、もしテストを並列に実行しかつ、固定化したい時間を変えたい場合は、コネクション単位で <code>application_name</code> を変え、その単位で設定するように関数を改修しても良いかもしれません。（flex_timeだけ分ける意味があるかはさておき）</p><p><code>application_name</code> というカラムを追加したバージョンです。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> flex_time</span><br><span class="line">(</span><br><span class="line">    seq_num  BIGSERIAL,</span><br><span class="line">    fix_time TIMESTAMPTZ,</span><br><span class="line">    application_name <span class="type">VARCHAR</span>(<span class="number">64</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">FUNCTION</span> flex_timestamp()</span><br><span class="line">    <span class="keyword">RETURNS</span> TIMESTAMPTZ <span class="keyword">AS</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span></span><br><span class="line">        flex_ts TIMESTAMPTZ :<span class="operator">=</span> (<span class="keyword">SELECT</span> fix_time</span><br><span class="line">                                <span class="keyword">FROM</span> flex_time</span><br><span class="line">                                <span class="keyword">WHERE</span> seq_num <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">max</span>(seq_num) <span class="keyword">FROM</span> flex_time <span class="keyword">WHERE</span> application_name <span class="keyword">IS</span> <span class="keyword">NULL</span>));</span><br><span class="line">        app_flex_ts TIMESTAMPTZ :<span class="operator">=</span> (<span class="keyword">SELECT</span> fix_time</span><br><span class="line">                                <span class="keyword">FROM</span> flex_time</span><br><span class="line">                                <span class="keyword">WHERE</span> seq_num <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">max</span>(seq_num) <span class="keyword">FROM</span> flex_time <span class="keyword">WHERE</span> application_name <span class="operator">=</span> current_setting(<span class="string">&#x27;application_name&#x27;</span>)));</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        IF app_flex_ts <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">             <span class="keyword">then</span> <span class="keyword">return</span> app_flex_ts;</span><br><span class="line">        ELSIF flex_ts <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">        <span class="keyword">THEN</span></span><br><span class="line">            <span class="keyword">RETURN</span> flex_ts;</span><br><span class="line">        <span class="keyword">ELSE</span></span><br><span class="line">            <span class="keyword">RETURN</span> <span class="built_in">current_timestamp</span>;</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">    <span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$ <span class="keyword">LANGUAGE</span> PLPGSQL;</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>これを用いると、グローバル設定と、アプリケーション固有のテスト時間で区別できます。どちらも設定されるとアプリケーション固有を優先です。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- グローバル設定</span></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">INSERT</span> <span class="keyword">INTO</span> flex_time (application_name, fix_time) <span class="keyword">VALUES</span> (CURRENT_SETTING(<span class="string">&#x27;APPLICATION_NAME&#x27;</span>), TO_TIMESTAMP(<span class="string">&#x27;2022-06-27 11:20:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">SELECT</span> flex_timestamp();</span><br><span class="line">     flex_timestamp</span><br><span class="line"><span class="comment">------------------------</span></span><br><span class="line"> <span class="number">2022</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">00</span><span class="operator">+</span><span class="number">09</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- アプリケーション単位</span></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">INSERT</span> <span class="keyword">INTO</span> flex_time (application_name, fix_time) <span class="keyword">VALUES</span> (CURRENT_SETTING(<span class="string">&#x27;APPLICATION_NAME&#x27;</span>), TO_TIMESTAMP(<span class="string">&#x27;2022-06-27 11:20:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">SELECT</span> flex_timestamp();</span><br><span class="line">     flex_timestamp</span><br><span class="line"><span class="comment">------------------------</span></span><br><span class="line"> <span class="number">2022</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">00</span><span class="operator">+</span><span class="number">09</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br></pre></td></tr></table></figure><p><code>application_name</code> ですが、次のようにコネクション接続時に指定できます。（<a href="https://www.postgresql.jp/docs/9.2/libpq-connect.html">参考</a>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgresql://user@localhost:5432/postgres?connect_timeout=10&amp;application_name=myapp</span><br></pre></td></tr></table></figure><p>ただ、こういった多段の設定はデータ削除が難しい（気軽に<code>flex_time</code> テーブルを <code>TRUNCATE</code> しにくくなる）ため、やるならapplication_nameは <code>NOT NULL</code> にした運用にしたほうが良いかもしれません。要件に応じて調整ですが、できる限り最初の実装のシンプルモデルの利用に留めるという、用法用量が良い塩梅かと感じます。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>PostgreSQLに、何も指定がなければ <code>current_timestamp</code>を、何か設定されていればその値を返す<code>flex_timestamp</code>関数 を定義して、使ってはどうかという記事でした。</p><p>これを思いついたのはちょうどあるプロジェクトの開発ラッシュ終盤で、同僚の辻さんに「こんなん思いついたんですけど~」って声をかけたら、もう開発も終わりですから..と諭されたため導入に失敗しました。そのため、まだ本番稼働＆運用実績がゼロのアイデア状態です。機会があればこの仕組を使ってみたいと思います。先駆けてトライしてくださる方も大歓迎です。ぜひ感想をTwitterなどで教えてください。</p><p>この記事で公開したサンプルコードは以下にアップしておきました。</p><ul><li><a href="https://github.com/ma91n/postgres-flextime">https://github.com/ma91n/postgres-flextime</a></li></ul><p>アイキャッチは<a href="https://pixabay.com/ja/users/fearscare-2010330/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4043090">Patrick</a>による<a href="https://pixabay.com/ja//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4043090">Pixabay</a>からの画像を利用させていただきました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/PostgreSQL/">PostgreSQL</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%86%E3%82%B9%E3%83%88/">テスト</category>
      
      <category domain="https://future-architect.github.io/tags/flextime/">flextime</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%88%E3%83%AA%E3%82%AC%E3%83%BC/">トリガー</category>
      
      
      <comments>https://future-architect.github.io/articles/20221018a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GoLand(JetBrains IDE)のDatabase Tools and SQLプラグインをメインのSQLクライアントにする</title>
      <link>https://future-architect.github.io/articles/20221014a/</link>
      <guid>https://future-architect.github.io/articles/20221014a/</guid>
      <pubDate>Thu, 13 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;Technogoly Innovation Group</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Technogoly Innovation Group 真野です。</p><p>RDB（ここでは社内でも実績が多いPostgreSQLとさせてください）のGUIクライアントツールと言えば何を利用していますか？ チーム内で聞くと様々なプロダクトの名前が挙がりました。</p><ul><li><a href="https://dbeaver.io/">DBeaver</a><ul><li>有名、機能リッチ、UIデザイン良い</li></ul></li><li><a href="https://a5m2.mmatsubara.com/">A5:SQL Mk-2</a><ul><li>データモデリングツールに用いていると、DBクライアントとしても用いる流れになりやすい</li></ul></li><li><a href="http://www.hi-ho.ne.jp/a_ogawa/psqledit/index.htm">PSqlEdit</a><ul><li>高速かつシンプル、直感的な動作</li><li>Oracle版の<a href="http://www.hi-ho.ne.jp/a_ogawa/osqledit/">OSqlEdit</a>に課金し、お世話になった。最初に使ったSQLクライアントツール（私です）</li></ul></li><li><a href="https://www.pgadmin.org/">pgAdmin 4</a><ul><li>データモデリングも、DBクライアントとしても利用</li></ul></li></ul><p>10数年前の所属していたプロジェクトだと、こういう開発ツールもチームで統一しないと駄目！みたいな雰囲気でしたが、いつの間にか↑あたりから自由に選んでね、という良い意味でのゆるふわさに変わっていたのが新鮮でした（規模やリーダーのポリシーによるんでしょうが）。</p><p>上記の4つのツールはどれも素晴らしいし、名前がたまたま挙がらなかったけど優れているツールもあるかと思います。そんな中で私が推したいのは、 <strong>GoLand（JetBrainsの有償ライセンスを購入している人）を利用している人に対しては、Database Tools and SQLプラグインを利用する</strong> ことです。GoLandはJetBrainsの提供するIDEの、Go言語版です。Python版のPyCharm(Professional)、Java（JVM）版のIntelliJ(Ultimate)などでも同様の機能を有すると思います</p><img src="/images/20221014a/image.png" alt="" width="1200" height="659" loading="lazy"><p>私がちょうど開発で用いているGoLand 2022.2.3 のバージョンで説明していきます。</p><p>GoLand には、30 日間無料体験版期間があるので、気になる人はお試しもできます。もし、ここに投資したくないって方は最初に上げた4つのツールなどを利用すると良いと思います。</p><ul><li><a href="https://www.jetbrains.com/ja-jp/go/download">https://www.jetbrains.com/ja-jp/go/download</a></li></ul><h2 id="Database-Tools-and-SQLの利用"><a href="#Database-Tools-and-SQLの利用" class="headerlink" title="Database Tools and SQLの利用"></a>Database Tools and SQLの利用</h2><p>GoLandでDatabase Tools and SQLを使うためには、プラグインをインストールする必要があります。</p><ul><li><a href="https://pleiades.io/help/go/relational-databases.html">https://pleiades.io/help/go/relational-databases.html</a></li></ul><p>Pluginから検索して追加ください。</p><img src="/images/20221014a/image_2.png" alt="" width="1200" height="582" loading="lazy"><p>JetBrains製品に詳しい人は、<a href="https://www.jetbrains.com/datagrip/">DataGrip</a> との違い何？と思うでしょう。ぶっちゃけ同じです。このプラグインを入れると DataGrip で利用可能なすべての機能のサポートしてくれるそうです。DataGripも30日より長く利用する場合は有償なのでお得ですね。</p><h2 id="おすすめする理由"><a href="#おすすめする理由" class="headerlink" title="おすすめする理由"></a>おすすめする理由</h2><p>次で機能面でのおすすめポイントを紹介しますが、GoLandでそのままSQL開発やクエリを発行できることの利点は個人的に大きいと思います。</p><ul><li><strong>複数のウィンドウを切り替えなくても良い</strong> （迷子になりにくい）<ul><li>開発していると、VSCode、ブラウザ、テストデータ用に複数のExcelブックなど開くのですが、減らせるのは個人的に嬉しい</li></ul></li><li>ショートカットを始めとした操作感が、JetBrainsと同等なので、コンテキストスイッチの負荷が下がる<ul><li>（当然ですが）デザインに一貫性があるのも強みに感じます</li></ul></li><li>開発するPJごとに、DB接続情報が紐づくので便利<ul><li>最初にDB接続情報を登録しておけば、複数のリポジトリを開発するときに脳内マッチングしなくても済む</li></ul></li></ul><p>このあたりは人によって逆にマイナスに働く部分かもしれませんが、作業によってウィンドウを行ったり来たりしなくても良いのは、個人的意見ですが本当に楽です。</p><p>SQLはORマッパーで隠蔽化されていて、SQLを生で書くことは殆どないよって方もいらっしゃるかと思います。その場合は確かに恩恵は受けにくいかもと思います。</p><h2 id="機能について"><a href="#機能について" class="headerlink" title="機能について"></a>機能について</h2><p>Database Tools and SQLプラグインがDataGripと同等と伝えてしまったので、ここからはDataGripの機能説明と同義になってしまいます。自分が使って気に入っている点・便利だなと思っている点を紹介します。</p><p>次から、いくつかGIF動画を貼っていますが、<a href="https://www.postgresqltutorial.com/postgresql-getting-started/postgresql-sample-database/">PostgreSQL TutorialのDVDレンタルのスキーマ</a>を取り込んでいます<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p><h3 id="スキーマの探索"><a href="#スキーマの探索" class="headerlink" title="スキーマの探索"></a>スキーマの探索</h3><p>いったんDBに接続できてしまえば、ドリルダウン的にテーブル定義を確認することができます。キーの定義などをさっと確認したいときに便利です。</p><img src="/images/20221014a/スキーマ探索.gif" alt="スキーマ探索" width="1200" height="569" loading="lazy"><p>DDLを見たほうが嬉しいという人にも、サクッと生成する機能があります。テーブルを右クリック＞SQLスクリプト＞SQLジェネレータ</p><img src="/images/20221014a/DDL生成.gif" alt="DDL生成" width="1200" height="926" loading="lazy"><h3 id="SQLの実行"><a href="#SQLの実行" class="headerlink" title="SQLの実行"></a>SQLの実行</h3><p>何かしらのSQLを選択肢、 <code>ctrl + Enter</code>で実行することができます。</p><img src="/images/20221014a/SQL実行.gif" alt="SQL実行" width="1200" height="648" loading="lazy"><p>JetBrains製のIDEらしく、補完もバッチリしていて、テーブル名、列名、ファンクションなどもバッチリです。</p><img src="/images/20221014a/補完.gif" alt="補完" width="1200" height="641" loading="lazy"><p>他にも次の点が個人的に気に入っています。</p><ul><li><strong>カラムをダブルクリックするとDDLの定義元にジャンプ</strong>する（！）。最初は驚きました</li><li><strong>存在しないテーブル、カラムなどを指定すると、エラーになる</strong> （コンパイル検出みたいに、実行前に気がつけて良いです）</li><li>（実はあまりやったことがないですが）、テーブル名をダブルクリックした表を、Excelのように直接編集してコミットできる</li><li>検索結果をCSV&#x2F;TSV&#x2F;JSON&#x2F;Markdown&#x2F;xlsxなどの様々なフォーマットでダウンロードもできます<ul><li>その時、縦横変換なども設定で可能</li><li>なんというか、作り込まれている..と感じることができました</li></ul></li></ul><h3 id="SQL生成"><a href="#SQL生成" class="headerlink" title="SQL生成"></a>SQL生成</h3><p>Insert, Updateなどの基本的なSQL生成もできます。</p><img src="/images/20221014a/SQL生成.gif" alt="SQL生成" width="1200" height="392" loading="lazy"><p>この辺はまぁ..大抵のツールに備わっていそうだなという感想です。</p><h3 id="プレスホルダー"><a href="#プレスホルダー" class="headerlink" title="プレスホルダー"></a>プレスホルダー</h3><p>アプリケーションで用いるライブラリによっては、プレスホルダーの書き方が <code>?</code> 以外の、 <code>$1</code> や <code>@id</code> といった書き方があり得ると思います。</p><p>このときにも、正規表現による設定でエディタにプレスホルダーだと認識させることができます。</p><ul><li><a href="https://www.jetbrains.com/help/datagrip/settings-tools-database-user-parameters.html">https://www.jetbrains.com/help/datagrip/settings-tools-database-user-parameters.html</a></li></ul><p>「ツール＞データべース＞クエリと実行＞ユーザーパラメータ」に、 <code>$1</code> の場合は、<code>\$(\d+)</code>、 <code>@id</code> の場合は <code>@(\w+)</code> を追加。</p><img src="/images/20221014a/image_3.png" alt="" width="1200" height="857" loading="lazy"><h3 id="背景色の変更"><a href="#背景色の変更" class="headerlink" title="背景色の変更"></a>背景色の変更</h3><p>例えば、develop, staging, production と3つのDB接続先があり、develop環境に流したつもりが、実はproduction環境であったといったヒューマンエラーを防ぎたいと思います。そもそも、staging, production環境の接続情報を同等に扱うのではなく、権限をREAD_ONLYにするなど様々な工夫はあるかと思いますが、それでもどの環境に接続しているかは非常に重要です。</p><p>「データベースエクスプローラから右クリック＞ツール＞色設定」変更できます。</p><img src="/images/20221014a/背景色変更.png" alt="背景色変更" width="751" height="374" loading="lazy"><p>例えば、本番環境は背景色をオレンジにした例です。GIFだとタブ色だけ変えていますが、エディタ全体の色を変えることもできます。</p><img src="/images/20221014a/background-color.gif" alt="オレンジにした例" width="1200" height="604" loading="lazy"><p>個人的にはツールを選ぶ上で最重要にしている機能かもしれません。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>JetBrainsで有償ライセンスを持っている方でも、Database Tools and SQLプラグインを使っている人が周りで少ないなと思ったので書きました。</p><p>DataGripと同等の機能を有するため非常に高機能で作り込まれており、おすすめです（せっかくなので一度は試さないともったいないという精神もあるかもです）。</p><p>また、GoなりPythonなりNode.jsなりJavaなりで開発しているIDE上で、そのままの開発者体験でSQLのクエリの実装を行えるのはかなりプラスだと思います。これはORマッパーなど使っているかどうかでかなり変わってきそうですが、ちょっとしたデータ調査にもシームレスにSQLを触ろうと思える準備を整えておくのは良いでしょう。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">余り需要は無い気もしますが、 <a href="https://github.com/ma91n/goland_Database_Tools_and_SQL">https://github.com/ma91n/goland_Database_Tools_and_SQL</a> のdocker-compose.yaml で利用すると、このブログで利用したスキーマを再現できます。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DB/">DB</category>
      
      
      <category domain="https://future-architect.github.io/tags/SQL/">SQL</category>
      
      <category domain="https://future-architect.github.io/tags/Goland/">Goland</category>
      
      <category domain="https://future-architect.github.io/tags/JetBrains/">JetBrains</category>
      
      <category domain="https://future-architect.github.io/tags/%E4%BE%BF%E5%88%A9%E3%83%84%E3%83%BC%E3%83%AB/">便利ツール</category>
      
      
      <comments>https://future-architect.github.io/articles/20221014a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>FutureCon2022の運営ラップアップ</title>
      <link>https://future-architect.github.io/articles/20221013a/</link>
      <guid>https://future-architect.github.io/articles/20221013a/</guid>
      <pubDate>Wed, 12 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221013a/image.png&quot; alt=&quot;image.png&quot; width=&quot;1200&quot; height=&quot;684&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221013a/image.png" alt="image.png" width="1200" height="684" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="/articles/20220712a/">FutureCon2022 を開催します | フューチャー技術ブログ</a> の記事で報告した通り、2022&#x2F;7&#x2F;18 海の日 にFutureConというテックカンファレンスを開催しました。</p><p>主要な運営メンバーは運営もしつつ登壇者でもあるので（私も<a href="https://www.youtube.com/watch?v=aBkDy79l9Zo">How to become a Software Architecture アーキテクティング入門</a>で発表しました）、両方の視点から振り返りました。隠すことでも無いので（とは言え別に公開する必要もないですが、インターネット上にあると後で探すのが楽なので）、振り返り内容を共有します。</p><h2 id="開催で良かったこと"><a href="#開催で良かったこと" class="headerlink" title="開催で良かったこと"></a>開催で良かったこと</h2><h3 id="企画全体"><a href="#企画全体" class="headerlink" title="企画全体"></a>企画全体</h3><ul><li>何よりもちゃんと開催まで持っていけたことが良かった<ul><li>おそらくフューチャー史上初のカンファレンス</li><li>3レーン</li></ul></li><li>FutureCon という略称<ul><li>最初は、「フューチャーテックカンファレンス」 と名乗ってましたが、それより呼びやすいと思いました</li><li>第1回はテックオンリーでしたが、ビジネス系が入る余地も残しているのが、将来拡張を匂わせ良かったという声もありました</li></ul></li></ul><h3 id="登壇者"><a href="#登壇者" class="headerlink" title="登壇者"></a>登壇者</h3><ul><li>登壇者の残存率が高い<ul><li>30名が承諾のうち、仕方ない理由で1名キャンセル、業務都合がつかず1名キャンセルで28名登壇<ul><li>比較的、登壇や外部発表に慣れていて、意識が高い人に声をかけた効果かも知れないです</li></ul></li></ul></li><li>登壇者募集のタイミングは良かった<ul><li>1月末から募集開始</li><li>5ヶ月ほど先なので、登壇者の人も承諾しやすいのかも</li><li>主に私（真野）がSlack DMをフル活用して声がけしましたが、承諾率も高くて感謝です。本当に良い人が多い会社やで（です）</li></ul></li><li>公募について<ul><li>2&#x2F;14に投げました。公募からは1名応募してくれた人がいました。ありがたい（募集している様子↓。この後DMで声かけもらいました）</li></ul></li></ul><img src="/images/20221013a/image_2.png" alt="" width="1200" height="530" loading="lazy"><h3 id="組織"><a href="#組織" class="headerlink" title="組織"></a>組織</h3><ul><li>社内組織のフォローが良かった（手厚かった）<ul><li>運営の有志はたまたまTIGという技術部隊の部署の人でしたが、社内の情シス、HR（人事、採用）、広報、セキュリティチームなどの協力が厚くて、かつ優しくて助かりました</li><li>後、部署の上長的な人も全員引き止めるわけでもなく、外部発信をしてくれてありがとうございますと逆に感謝されました（普通に会社にとっても社員にとってもポジティブ寄りのことをしていると思っているんですが、それでも素直に褒められると嬉しいですね！）</li><li>ということで、何か新しいことでも障壁なく、ポジティブな会社であることがわかって良かったです</li></ul></li></ul><h3 id="収録"><a href="#収録" class="headerlink" title="収録"></a>収録</h3><ul><li>スプレッドシートに動画の収録予定を、登壇者自身が予約するスタイルは良かった<ul><li>それで火がついた感がある</li></ul></li><li>最初のページの背景画像を統一する動きは良かった<ul><li>最後のページも統一できると良かったかも</li></ul></li><li>バーチャル背景<ul><li>正直、あまり見えないのでどっちでも良かったかも</li></ul></li></ul><h3 id="動画配信"><a href="#動画配信" class="headerlink" title="動画配信"></a>動画配信</h3><ul><li>Zoomで撮影したが、動画が軽くて良かった<ul><li>画質もそんなに悪いとは思わなかった</li></ul></li><li>予約投稿<ul><li>海の日という休日が開催日だったが、楽だった</li><li>事前収録という安心感もある</li></ul></li><li>サムネイルの統一は良かった<ul><li><a href="https://www.youtube.com/channel/UCJUSwYYd0CkGgmEKAW7QVpw/videos">YouTube</a>で並んでいて一体感がある（下画像）</li></ul></li></ul><img src="/images/20221013a/image_3.png" alt="" width="1200" height="853" loading="lazy"><h3 id="開催日"><a href="#開催日" class="headerlink" title="開催日"></a>開催日</h3><ul><li>休日開催の是非<ul><li>結果的に良かったと思うが</li></ul></li><li>1日、長くて疲れる<ul><li>特に後半の疲弊感は大きい</li><li>3日間開催で午前中のみ配信とかの方が嬉しい？</li><li>あるいは、2日開催にするとか</li><li>3並列は、かっこいいけど追いかける方はけっこう辛い</li></ul></li></ul><h2 id="改善点"><a href="#改善点" class="headerlink" title="改善点"></a>改善点</h2><ul><li>社内申請、難しい<ul><li>特にYouTube周り、予行演習しないとなんか引っかかりがち</li></ul></li><li>音量がバラバラ？<ul><li>YouTube予約投稿のカウントダウンがうるさい</li><li>カウントダウンに合わせると、投稿の声が小さくなるのでバランスが難しい</li></ul></li><li>フューチャーグループ側の人とのコミュニケーションは課題<ul><li>メールやり取りが面倒だった<ul><li>Slackのシェアチャネルでやり取りすればよかったのでは？<ul><li>なるほど！</li></ul></li></ul></li></ul></li><li>トラック別に1本の動画にしたい？<ul><li>1本見終わって、次の動画を探すのが面倒（なので中座する人が多かったのでは？）</li><li>golang.tokyo#32の動画の例。各動画の最初に、頭出しが必要かもしれないけど</li><li>穴埋めの動画編集がやや化しそう。リアル開催だと司会とのやり取りで埋める。紹介する動画も撮影する？</li></ul></li><li>登壇資料の運営側からの事前レビュー<ul><li>案外、社員番号を自己紹介に載せちゃう人がいた（機密情報じゃないと思いますが…一応消してもらって再撮影した人も）</li><li>資料テンプレートミスで、Credentialとフッターに記載していた人もいた</li><li>注意点はまとめよう</li></ul></li><li>Zoomで2画面表示していて、撮影が空振った人もいた</li><li>運営スケジュール<ul><li>登壇者集め終わって満足してしまった</li><li>その後から、Abstract（登壇内容サマリ）を出すまでが空いてしまった</li><li>気持ち、もう1,2週間早く動けると良かった</li></ul></li><li>動画配信方法はもっと早く決めたかった<ul><li>AWS ライブストリーミングを使う方法と迷っていた</li><li>今回、プラクティスが見つかって良かった</li></ul></li><li>ハッシュタグでつぶやく人が少ない問題<ul><li>Twitterで中継する人はもっと増やしたい</li><li>…という運営チームも、当日は満足してしまってTwitter活はしてなかった<ul><li>ツイートしてくれた人、ありがとうございました</li></ul></li></ul></li><li>connpassに申し込まなくても、動画リンクで見れる<ul><li>別に気にしなくても良いのでは</li><li>connpassはGoogle Calendarとかに登録しやすくする用途</li></ul></li><li>登壇者のレベル<ul><li>Beginner 初心者向け、Intermediate 中級レベル、Advance 上級レベルの3レベルは良かった</li><li>山田さんの「Datalakeにおける認証・認可 検討ポイント紹介 by 山田勇一 」は視聴したけど、どう見ても上級だった</li></ul></li><li>ラストセッションについて<ul><li>トラック最後の人のセッションだが、シュッと終わったので、終わった感がなかった</li><li>ハイライト動画を流すとか、終了の挨拶の動画が欲しかった</li></ul></li><li>パネルディスカッションみたいな、会話のセッションがあってもよい</li><li>せっかく開催するので、既存のお客さんに周知していく、という導線を作ってもよい</li><li>開催の１カ月前くらいからFutureCon の開催の壁紙を作って日々の業務の顧客ミーティングでアピールしていくとよい</li><li>ビジネス系（ドメインへの切り口など）テーマのセッションを増やしていくのもよい</li></ul><h2 id="次回に向けて"><a href="#次回に向けて" class="headerlink" title="次回に向けて"></a>次回に向けて</h2><ul><li>2023年も開催するかどうかは、2023年の1月に考えましょう（隔年開催くらいな予感）</li><li>登壇者。半分被りくらいはセーフにしたいですね</li><li>キーノートは、<a href="https://future-architect.github.io/articles/20190917/">エンジニア組織デザイン</a>などのテーマも持っている宮原さんにお願いしてみたい</li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>FutureCon2022 の振り返りを共有しました。<br>私は普段 <a href="https://future.connpass.com/">Future Tech Night</a> というconnpassで募集しているフューチャーのIT勉強会を運営していますが、関わるメンバーが桁違いに多く、良い経験を得ました。引き続き運営ナレッジを貯め、もっと良い発信ができるように努めていきたいと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A/">振り返り</category>
      
      <category domain="https://future-architect.github.io/tags/FutureCon/">FutureCon</category>
      
      <category domain="https://future-architect.github.io/tags/futurecon2022/">futurecon2022</category>
      
      
      <comments>https://future-architect.github.io/articles/20221013a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>OAuth の仕組みを理解しながらクライアントを実装してみる</title>
      <link>https://future-architect.github.io/articles/20221012a/</link>
      <guid>https://future-architect.github.io/articles/20221012a/</guid>
      <pubDate>Tue, 11 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、TIG の吉岡と申します。Tech Blog には初投稿です。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIG の吉岡と申します。Tech Blog には初投稿です。<a href="/articles/20221003a/">認証認可連載</a>の 5 本目です。</p><p>業務で認証・認可に関する SaaS に触れる場面があり、そういえば OAuth, OpenID Connect の仕組みをちゃんと理解していなかったと思い、RFC を読みながら OAuth クライアントを実装してみました。N 番煎じの車輪の再発明ですが、何かの役に立てば幸いです。</p><p>※本稿において、OAuth は基本的に OAuth 2.0 を指しますが、OAuth 2.1 にて推奨されているベストプラクティスを取り入れています。<br>※本当は OpenID Connect にも触れたかったのですが力尽きました。また機会があれば書かせてください。</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>この記事は、次のような方々に向けて書いています。</p><ul><li>OAuth を聞いたことがある</li><li>認証と認可の違いを認識している</li><li>HTTP の基本的な仕組みを知っている</li></ul><h2 id="OAuth-とは"><a href="#OAuth-とは" class="headerlink" title="OAuth とは"></a>OAuth とは</h2><p>OAuth は、サードパーティアプリケーションが HTTP サービスに対して制限付きのアクセスを取得することを可能にする認可フレームワークです。</p><p>具体的には、ある SNS アプリケーションがあり、ユーザーはこの SNS に対して、自身の Google Photos 上の画像を投稿したいとします。このとき、SNS アプリケーションに Google のユーザー名とパスワードを教えることにより、画像を取得させることもできますが、この方法には、付与される権限が大きすぎる、権限を剥奪するためにはパスワードを変更するしかないなど、さまざまな問題があります。</p><p>これらの問題を解決し、サードパーティアプリケーションに適切な権限を付与するための認可フレームワークが OAuth です。</p><p>なお、2022 年現在広く使われている仕様である OAuth 2.0 は <a href="https://www.rfc-editor.org/rfc/rfc6749">RFC 6749</a> により規定されています。この仕様には、後にさまざまな拡張が施されたため、それらの拡張とセキュリティに関するベストプラクティスをまとめた <a href="https://oauth.net/2.1/">OAuth 2.1</a> が策定中です。OAuth 2.1 は OAuth 2.0 とその拡張をまとめ直した仕様として策定中であり、OAuth 2.0 を大きく変えるものではありません。</p><p>本稿では、OAuth 2.0 並びに OAuth 2.1 における代表的なフローである「認可コードグラント + PKCE」を解説します。</p><h2 id="OAuth-のロール"><a href="#OAuth-のロール" class="headerlink" title="OAuth のロール"></a>OAuth のロール</h2><p>OAuth では、次の 4 つのロール (登場人物) が定義されています。</p><ul><li>リソースオーナー: リソースの所有者であるエンドユーザー</li><li>リソースサーバー: リソースを保持しているサーバー</li><li>クライアント: リソースオーナーが利用し、リソースに対する権限を付与されるアプリケーション</li><li>認可サーバー: リソースオーナーの承諾を得たうえでクライアントに対してアクセストークンを発行するサーバー</li></ul><p>4 つのロールのうち、クライアントには注意が必要です。通常私たちがクライアントと聞くと、OS のネイティブアプリケーションやブラウザ上で動作するアプリケーションを想像してしまいますが、OAuth の言葉遣いにおいては、それらに限らず、サーバー上で動作するウェブアプリケーションもクライアントに含まれます。</p><p>また、クライアントは <strong>コンフィデンシャルクライアント</strong> と <strong>パブリッククライアント</strong> の 2 種類に分類されます。後に説明しますが、認可サーバーはクライアントを識別するために、クライアント ID とクライアントシークレットを発行します。このクライアントシークレットを安全に保持できるクライアントはコンフィデンシャルクライアント、安全に保持できないクライアントはパブリッククライアントと呼ばれます。サーバー上で動作するウェブアプリケーションはコンフィデンシャルクライアントで、OS のネイティブアプリケーションやブラウザ上で動作するアプリケーションはパブリッククライアントです。</p><p>なお、クライアントは事前に認可サーバーに登録されている必要があります。登録の方法は OAuth 仕様の範疇外ですが、多くの場合、ウェブアプリケーションとして構築されたマネジメントコンソールなどから登録することができます。本稿では Google API にクライアントを登録するフローを説明します。</p><h2 id="OAuth-のグラントタイプ"><a href="#OAuth-のグラントタイプ" class="headerlink" title="OAuth のグラントタイプ"></a>OAuth のグラントタイプ</h2><p>OAuth では、権限付与の種類が 4 種類規定されており、これをグラントタイプと呼びます。</p><ul><li>認可コードグラント + PKCE</li><li>インプリシットグラント (非推奨)</li><li>リソースオーナーパスワードクレデンシャルグラント (非推奨)</li><li>クライアントクレデンシャルグラント</li></ul><p>認可コードグラント + PKCE は、エンドユーザーの承諾を得た上でクライアントがリソースにアクセスするという、OAuth の典型的なパターンです。クライアントクレデンシャルグラントは、クライアントが直接、クライアント自身の認証情報を認可サーバーに提示して、リソースへのアクセスを取得する方法です。</p><p>OAuth 2.0 では、これらに加えてインプリシットグラント、リソースオーナーパスワードクレデンシャルグラントが規定されていますが、これらは OAuth 2.1 で削除される予定であり、もはや利用すべきではありません。</p><p>本稿では <strong>認可コードグラント + PKCE</strong> による権限付与を説明します。認可コードグラントは、リソースオーナー・クライアント・認可サーバーの三者のやりとりによって認可を達成するため、<strong>3-legged OAuth</strong> などとも呼ばれます。</p><h2 id="OAuth-のシーケンス"><a href="#OAuth-のシーケンス" class="headerlink" title="OAuth のシーケンス"></a>OAuth のシーケンス</h2><p>認可コードグラントによる OAuth の処理シーケンスは図のとおりです。</p><img src="/images/20221012a/oauth.png" alt="oauth.png" width="587" height="501" loading="lazy"><ol><li>ユーザーが「Google Photos から画像を取得する」ボタンを押下する</li><li>クライアントが 302 Found を返却し、ユーザーエージェントを認可サーバーの認可エンドポイントにリダイレクトする <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li><li>ユーザーエージェントが認可サーバーの認可エンドポイントにアクセスする</li><li>認可サーバーが認証画面を表示し、ユーザーにログインを促す</li><li>ユーザーが認証情報を入力し、認可サーバーに認証を求める</li><li>認証に成功した認可サーバーは、クライアントが要求する権限一覧をユーザーに提示し、ユーザーの承諾を求める</li><li>ユーザーがクライアントに対する権限の付与を承諾する</li><li>権限付与の承諾を得た認可サーバーは 302 Found を返却し、ユーザーエージェントをクライアントのリダイレクト URI にリダイレクトする <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li><li>ユーザーエージェントがリダイレクト URI にアクセスする</li><li>クライアントは手順 9 で取得した認可コードを用いて認可サーバーにトークンリクエストを送信する</li><li>リクエストの有効性を検証した認可サーバーは、アクセストークンを発行し、トークンレスポンスを返却する</li><li>クライアントは手順 11 で取得したアクセストークンを用いてリソースサーバーにアクセスする</li><li>アクセストークンの有効性を検証したリソースサーバーは、リソースを返却する</li><li>クライアントはリソースオーナーのユーザーエージェントに対して、リソースを含む画面をレスポンスする</li></ol><p>順に詳しく見ていきます。</p><h3 id="Step-A-手順-1…2"><a href="#Step-A-手順-1…2" class="headerlink" title="Step A. 手順 1…2"></a>Step A. 手順 1…2</h3><p>手順 1 から 2 では、ユーザーをクライアントから認可サーバーに誘導します。ユーザーがアプリケーションの「Google Photos から画像を取得する」などのボタンをクリックすると、クライアントは各種パラメータを生成し、302 Found をレスポンスします。これにより、ユーザーエージェントは認可サーバーにリダイレクトされます。この認可サーバーに対するリクエストを <strong>認可リクエスト</strong> と呼び、リクエスト先を <strong>認可エンドポイント</strong> と呼びます。</p><p>認可リクエストは次の通りです。ここで、認可サーバーの認可エンドポイントは <code>auth.example.com/authorize</code> であるとします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /authorize</span><br><span class="line">    ?response_type=code                                     <span class="comment"># 1</span></span><br><span class="line">    &amp;client_id=&lt;client_id&gt;                                  <span class="comment"># 2</span></span><br><span class="line">    &amp;state=&lt;state&gt;                                          <span class="comment"># 3</span></span><br><span class="line">    &amp;scope=&lt;scope&gt;                                          <span class="comment"># 4</span></span><br><span class="line">    &amp;redirect_uri=https://client.example.com/callback       <span class="comment"># 5</span></span><br><span class="line">    &amp;code_challenge=&lt;code_challenge&gt;                        <span class="comment"># 6</span></span><br><span class="line">    &amp;code_challenge_method=&lt;code_challenge_method&gt; HTTP/1.1 <span class="comment"># 7</span></span><br><span class="line">Host: auth.example.com</span><br></pre></td></tr></table></figure><ol><li>(必須) 認可コードグラントを利用するため、<code>response_type=code</code> を指定します</li><li>(必須) クライアント登録時に認可サーバーから発行された <code>client_id</code> を指定します</li><li>(推奨) CSRF 攻撃を防ぐため、ランダムな <code>state</code> 値を指定します</li><li>(任意) リソースサーバー・認可サーバーが規定するリソースアクセスのスコープを指定します</li><li>(任意) クライアントが認可レスポンスを受け取るための URI を指定します</li><li>(推奨) ランダムに生成した <code>code_verifier</code> から生成されたチャレンジを指定します (PKCE)</li><li>(推奨) <code>code_challenge</code> を生成する方法を指定します (PKCE)</li></ol><p>上の例では、認可コード横取り攻撃と呼ばれる攻撃を防ぐため、 <strong>PKCE (Proof Key for Code Exchange)</strong> という仕組みを使用しています。PKCE は、OAuth 2.0 において使用が推奨されており、OAuth 2.1 においては事実上必須となる見込みです。</p><p>ここで、PKCE を用いる場合、クライアントはまず <code>code_verifier</code> と呼ばれるランダムな ASCII 文字列を生成します。<code>code_verifier</code> を正規表現で書くと <code>/[A-Za-z0-9-_.~]&#123;43,128&#125;/</code> です。次に、クライアントは <code>code_challenge_method</code> の値を選択します。<code>code_challenge_method</code> として有効な値は <code>plain</code> と <code>S256</code> です。<code>code_challenge_method</code> の値により、<code>code_challenge</code> はそれぞれ次のように計算されます。</p><div class="scroll"><table><thead><tr><th>code_challenge_method</th><th>code_challenge</th></tr></thead><tbody><tr><td>plain</td><td><code>code_verifier</code></td></tr><tr><td>S256</td><td><code>BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))</code></td></tr></tbody></table></div><p><code>code_challenge_method == plain</code> のとき、<code>code_challenge</code> と <code>code_verifier</code> は同一の値です。<code>code_challenge_method == S256</code> のとき、<code>code_challenge</code> は <code>code_verifier</code> を SHA-256 ハッシュ関数に通した値となります。特段の技術的な制約がない限り、<code>code_challenge_method == S256</code> を指定すべきです。</p><h3 id="Step-B-手順-3…8"><a href="#Step-B-手順-3…8" class="headerlink" title="Step B. 手順 3…8"></a>Step B. 手順 3…8</h3><p>手順 3 から 8 では、ユーザーは認可サーバーとコミュニケーションをとります。手順 4, 5 においてユーザーは認可サーバーにログインします。この認証は、あくまで認可サーバーが認可処理を進めるために必要な認証であり、クライアントは認証情報そのものはおろか、認証情報がやりとりされていることすら知ることはありません。また、ユーザーがすでにユーザーエージェント上で対象サービスにログインしており、そのセッションが有効な場合、手順 4, 5 は省略されることが一般的です。手順 6, 7 において、ユーザーはクライアントに対する権限の付与を提示され、問題がなければそれを承諾します。権限付与の承諾を確認した認可サーバーは、手順 8 で <strong>認可コード</strong> を発行し、これをクエリパラメータに付与して <strong>リダイレクト URI</strong> に対する 302 Found をレスポンスします。</p><p>認可レスポンスは次のとおりです。<code>Location</code> ヘッダにはリダイレクト URI が含まれています。ここで、クライアントのリダイレクト URI は <code>https://client.example.com/callback</code> であるとします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Location: https://client.example.com/callback</span><br><span class="line">    ?code=&lt;authorization_code&gt;                <span class="comment"># 1</span></span><br><span class="line">    &amp;state=&lt;state&gt;                            <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><ol><li>(必須) 認可サーバーが発行した認可コード</li><li>(認可リクエストに <code>state</code> が含まれる場合必須) 認可リクエストにて送信した <code>state</code> 値</li></ol><p>なお、手順 8 と手順 9 の間において、認可リクエストと認可レスポンスの <code>state</code> 値を比較し、これらが等しくない場合は CSRF 攻撃が行われたと判断して処理を中断する必要があります。</p><h3 id="Step-C-手順-9…14"><a href="#Step-C-手順-9…14" class="headerlink" title="Step C. 手順 9…14"></a>Step C. 手順 9…14</h3><p>手順 8 により 302 Found を受け取ったユーザーエージェントは、手順 9 でリダイレクト URI に遷移します。ここにおいてクライアントは認可コードを取得し、手順 10 で <strong>トークンリクエスト</strong> を発行します。なお、トークンリクエストを受け取る認可サーバーのエンドポイントは <strong>トークンエンドポイント</strong> と呼ばれます。手順 11 において、認可コードの有効性を確認した認可サーバーは <strong>アクセストークン</strong> を発行し、<strong>トークンレスポンス</strong> としてクライアントに返却します。これ以降、クライアントはアクセストークンを用いてリソースサーバーにアクセスし、リソースへの CRUD 操作を実行することができるようになります。</p><p>トークンリクエストは次の通りです。ここで、認可サーバーのトークンエンドポイントは <code>auth.example.com/token</code> であるとします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /token HTTP/1.1</span><br><span class="line">Host: auth.example.com</span><br><span class="line">Authorization: Basic &lt;basic_auth_token&gt;               <span class="comment"># 1</span></span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">grant_type=authorization_code                         <span class="comment"># 2</span></span><br><span class="line">    &amp;code=&lt;code&gt;                                      <span class="comment"># 3</span></span><br><span class="line">    &amp;redirect_uri=https://client.example.com/callback <span class="comment"># 4</span></span><br><span class="line">    &amp;code_verifier=&lt;code_verifier&gt;                    <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><ol><li>(必須) クライアント ID とクライアントシークレットを使用して Basic 認証を行います</li><li>(必須) <code>grant_type=authorization_code</code> を指定します</li><li>(必須) 手順 8 認可レスポンスにより取得した <code>code</code> を指定します</li><li>(必須) クライアントが認可レスポンスを受け取るための URI を指定します</li><li>(認可リクエストで <code>code_challenge</code>, <code>code_challenge_method</code> を指定した場合必須) クライアントが生成した <code>code_verifier</code> を指定します</li></ol><p>トークンレスポンスは次の通りです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;access_token&quot;</span>: &lt;access_token&gt;,  <span class="comment"># 1</span></span><br><span class="line">  <span class="string">&quot;token_type&quot;</span>: <span class="string">&quot;bearer&quot;</span>,          <span class="comment"># 2</span></span><br><span class="line">  <span class="string">&quot;expires_in&quot;</span>: 3600,              <span class="comment"># 3</span></span><br><span class="line">  <span class="string">&quot;refresh_token&quot;</span>: &lt;refresh_token&gt; <span class="comment"># 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>発行されたアクセストークン</li><li>トークンの種類</li><li>トークンの有効期限 (秒数)</li><li>リフレッシュトークン (本稿では触れない)</li></ol><h2 id="Google-Photos-API-を使ってみる"><a href="#Google-Photos-API-を使ってみる" class="headerlink" title="Google Photos API を使ってみる"></a>Google Photos API を使ってみる</h2><p>ここからは、実際に Google Photos API を利用するクライアントアプリケーションを実装し、OAuth の処理フローを確認していきます。</p><h3 id="GCP-マネジメントコンソールにてクライアントを登録する"><a href="#GCP-マネジメントコンソールにてクライアントを登録する" class="headerlink" title="GCP マネジメントコンソールにてクライアントを登録する"></a>GCP マネジメントコンソールにてクライアントを登録する</h3><p>GCP に実験用のプロジェクトを作成します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.02.52.png" alt="" width="1200" height="807" loading="lazy"><p>API &amp; Services から、OAuth consent screen を設定していきます。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.04.06.png" alt="" width="1200" height="807" loading="lazy"><p>External を選択し、CREATE を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.04.18.png" alt="" width="1200" height="807" loading="lazy"><p>App information として、App name に任意の名前を設定し、User support email にはご自身の Google アカウントのメールアドレスを設定します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.04.54.png" alt="" width="1200" height="807" loading="lazy"><p>Developer contact information として、ご自身の Google アカウントのメールアドレスを設定し、SAVE AND CONTINUE を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.05.11.png" alt="" width="1200" height="807" loading="lazy"><p>Scopes 画面において、ADD OR REMOVE SCOPES を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.05.35.png" alt="" width="1200" height="807" loading="lazy"><p>今回は Google Photos API を利用したいため、Manually add scopes に <code>https://www.googleapis.com/auth/photoslibrary.readonly</code> と入力し、ADD TO TABLE を押下します。なお、このスコープは、対象ユーザーの Google Photos リソースに対する読み取り権限を付与します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.08.04.png" alt="" width="1200" height="807" loading="lazy"><p>テーブルに Google Photos API のスコープが追加されるので、チェックボックスをチェックし、UPDATE を押下します。次いで、SAVE AND CONTINUE を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.08.15.png" alt="" width="1200" height="807" loading="lazy"><p>Test users 画面においてテストのためのユーザーを設定します。ADD USERS を押下し、ご自身の Google アカウントのメールアドレスを入力の上、ADD を押下してください。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.09.02.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-02_23.09.24.png" alt="" width="1200" height="807" loading="lazy"><p>テーブルにご自身のメールアドレスが追加されていることを確認し、SAVE AND CONTINUE を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.09.29.png" alt="" width="1200" height="807" loading="lazy"><p>Summary 画面において、各種パラメータが正しいことを確認の上、BACK TO DASHBOARD を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.09.43.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-02_23.09.46.png" alt="" width="1200" height="807" loading="lazy"><p>次に OAuth client ID を作成します。Credential 画面に遷移し、CREATE CREDENTIAL, OAuth client ID と順に押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.10.30.png" alt="" width="1200" height="807" loading="lazy"><p>実験用のサーバーは <code>localhost:8080</code> に立てる予定なので、Authorization redirect URI として <code>http://localhost:8080/callback</code> を入力し、CREATE を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.11.17.png" alt="" width="1200" height="807" loading="lazy"><p>OAuth クライアントのクライアント ID とクライアントシークレットが作成されました。これらを控えておいてください。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.11.35.png" alt="" width="1200" height="807" loading="lazy"><p>次に、今回利用する Photos Library API を有効にしておきます。Google Photos Library API のページにアクセスし、ENABLE を押下してください。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.32.14.png" alt="" width="1200" height="807" loading="lazy"><p>ここまでで GCP の作業は完了です。次に、ローカル環境でアプリケーションを立て、ブラウザからアクセスします。</p><h3 id="クライアントを実装する"><a href="#クライアントを実装する" class="headerlink" title="クライアントを実装する"></a>クライアントを実装する</h3><p>ここからは、Go によりクライアントアプリケーションを実装し、実際にローカル環境で動かしていきます。なお、テストに使用したソースコードは <a href="https://github.com/tmsick/tech-blog-oauth">https://github.com/tmsick/tech-blog-oauth</a> にアップロードしました。本稿にも <code>main.go</code> の全量を掲載します。</p><p>なお、このアプリケーションは次の環境変数を必要とします。これらは、先ほどの手順で Google から発行されたクライアント ID とクライアントシークレットです。</p><ul><li><code>GOOGLE_CLIENT_ID</code></li><li><code>GOOGLE_CLIENT_SECRET</code></li></ul><p>掲載しているコードは簡単な検証用のコードであり、適切なエラーハンドリングを省略していますのでご承知おきください。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;math/big&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;text/template&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gorilla/sessions&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TokenResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">AccessToken <span class="type">string</span> <span class="string">`json:&quot;access_token&quot;`</span></span><br><span class="line">ExpiresIn   <span class="type">int</span>    <span class="string">`json:&quot;expires_in&quot;`</span></span><br><span class="line">IDToken     <span class="type">string</span> <span class="string">`json:&quot;id_token&quot;`</span></span><br><span class="line">Scope       <span class="type">string</span> <span class="string">`json:&quot;scope&quot;`</span></span><br><span class="line">TokenType   <span class="type">string</span> <span class="string">`json:&quot;token_type&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Photos <span class="keyword">struct</span> &#123;</span><br><span class="line">MediaItems []<span class="keyword">struct</span> &#123;</span><br><span class="line">ID         <span class="type">string</span> <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">ProductURL <span class="type">string</span> <span class="string">`json:&quot;productUrl&quot;`</span></span><br><span class="line">BaseURL    <span class="type">string</span> <span class="string">`json:&quot;baseUrl&quot;`</span></span><br><span class="line">MimeType   <span class="type">string</span> <span class="string">`json:&quot;mimeType&quot;`</span></span><br><span class="line">Filename   <span class="type">string</span> <span class="string">`json:&quot;filename&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;mediaItems&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">lenState        = <span class="number">30</span></span><br><span class="line">lenCodeVerifier = <span class="number">64</span></span><br><span class="line">redirectURI     = <span class="string">&quot;http://localhost:8080/callback&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">googleClientID     <span class="type">string</span></span><br><span class="line">googleClientSecret <span class="type">string</span></span><br><span class="line">store              = sessions.NewCookieStore([]<span class="type">byte</span>(os.Getenv(<span class="string">&quot;SESSION_KEY&quot;</span>)))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">googleClientID = os.Getenv(<span class="string">&quot;GOOGLE_CLIENT_ID&quot;</span>)</span><br><span class="line">googleClientSecret = os.Getenv(<span class="string">&quot;GOOGLE_CLIENT_SECRET&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> googleClientID == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;Env var GOOGLE_CLIENT_ID is required&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> googleClientSecret == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;Env var GOOGLE_CLIENT_SECRET is required&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, handleIndex)</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/oauth&quot;</span>, handleOAuth)</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/callback&quot;</span>, handleCallback)</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/photos&quot;</span>, handlePhotos)</span><br><span class="line">log.Print(<span class="string">&quot;Serving web server at localhost:8080&quot;</span>)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;0.0.0.0:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleIndex</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">tpl, _ := template.ParseFiles(<span class="string">&quot;templates/index.html&quot;</span>)</span><br><span class="line">tpl.Execute(w, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleOAuth</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// Save `state` and `code_verifier` to session</span></span><br><span class="line">session, _ := store.Get(r, <span class="string">&quot;session&quot;</span>)</span><br><span class="line"><span class="comment">// Generate a random state</span></span><br><span class="line">state, _ := randomString(lenState)</span><br><span class="line">session.Values[<span class="string">&quot;state&quot;</span>] = state</span><br><span class="line"><span class="comment">// Generate code_verifier</span></span><br><span class="line">codeVerifier, _ := randomString(lenCodeVerifier)</span><br><span class="line">session.Values[<span class="string">&quot;code_verifier&quot;</span>] = codeVerifier</span><br><span class="line">session.Save(r, w)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate code_challenge</span></span><br><span class="line">b := sha256.Sum256([]<span class="type">byte</span>(codeVerifier))</span><br><span class="line">codeChallenge := base64.URLEncoding.WithPadding(base64.NoPadding).EncodeToString(b[:])</span><br><span class="line"></span><br><span class="line"><span class="comment">// Redirect the user agent == Make a authorization request</span></span><br><span class="line">u, _ := url.Parse(<span class="string">&quot;https://accounts.google.com/o/oauth2/v2/auth&quot;</span>)</span><br><span class="line">q := u.Query()</span><br><span class="line">q.Add(<span class="string">&quot;response_type&quot;</span>, <span class="string">&quot;code&quot;</span>)                                           <span class="comment">// Indicate authorization code grant</span></span><br><span class="line">q.Add(<span class="string">&quot;client_id&quot;</span>, googleClientID)                                       <span class="comment">// The client ID issued by Google</span></span><br><span class="line">q.Add(<span class="string">&quot;state&quot;</span>, state)                                                    <span class="comment">// The random state</span></span><br><span class="line">q.Add(<span class="string">&quot;scope&quot;</span>, <span class="string">&quot;https://www.googleapis.com/auth/photoslibrary.readonly&quot;</span>) <span class="comment">// The scope we need</span></span><br><span class="line">q.Add(<span class="string">&quot;redirect_uri&quot;</span>, redirectURI)                                       <span class="comment">// The redirect URI</span></span><br><span class="line">q.Add(<span class="string">&quot;code_challenge&quot;</span>, codeChallenge)                                   <span class="comment">// Code challenge</span></span><br><span class="line">q.Add(<span class="string">&quot;code_challenge_method&quot;</span>, <span class="string">&quot;S256&quot;</span>)                                   <span class="comment">// Code challenge method</span></span><br><span class="line">u.RawQuery = q.Encode()</span><br><span class="line">http.Redirect(w, r, u.String(), http.StatusFound)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleCallback</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// Confirm `state` matches</span></span><br><span class="line">session, _ := store.Get(r, <span class="string">&quot;session&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> r.URL.Query().Get(<span class="string">&quot;state&quot;</span>) != session.Values[<span class="string">&quot;state&quot;</span>] &#123;</span><br><span class="line">w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line">fmt.Fprintln(w, <span class="string">&quot;Invalid state&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Get `code_verifier`</span></span><br><span class="line">codeVerifier := session.Values[<span class="string">&quot;code_verifier&quot;</span>].(<span class="type">string</span>)</span><br><span class="line"><span class="comment">// Clear session</span></span><br><span class="line">session.Values[<span class="string">&quot;state&quot;</span>] = <span class="string">&quot;&quot;</span></span><br><span class="line">session.Values[<span class="string">&quot;code_verifier&quot;</span>] = <span class="string">&quot;&quot;</span></span><br><span class="line">session.Save(r, w)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make a token request</span></span><br><span class="line">code := r.URL.Query().Get(<span class="string">&quot;code&quot;</span>)</span><br><span class="line">q := url.Values&#123;&#125;</span><br><span class="line">q.Add(<span class="string">&quot;grant_type&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>) <span class="comment">// Indicate token request</span></span><br><span class="line">q.Add(<span class="string">&quot;code&quot;</span>, code)                       <span class="comment">// The authorization code</span></span><br><span class="line">q.Add(<span class="string">&quot;redirect_uri&quot;</span>, redirectURI)        <span class="comment">// The redirect URI</span></span><br><span class="line">q.Add(<span class="string">&quot;code_verifier&quot;</span>, codeVerifier)      <span class="comment">// Code verifier</span></span><br><span class="line">req, _ := http.NewRequest(http.MethodPost, <span class="string">&quot;https://oauth2.googleapis.com/token&quot;</span>, strings.NewReader(q.Encode()))</span><br><span class="line">req.SetBasicAuth(googleClientID, googleClientSecret)</span><br><span class="line">req.Header.Add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">resp, _ := http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Capture the access token we&#x27;ve received</span></span><br><span class="line">body, _ := io.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">var</span> token TokenResponse</span><br><span class="line">json.Unmarshal(body, &amp;token)</span><br><span class="line">session.Values[<span class="string">&quot;access_token&quot;</span>] = token.AccessToken</span><br><span class="line">session.Save(r, w)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Redirect the user agent to the photos page</span></span><br><span class="line">http.Redirect(w, r, <span class="string">&quot;http://localhost:8080/photos&quot;</span>, http.StatusFound)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handlePhotos</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// Fetch photos from Google Photos Library API using the access_token</span></span><br><span class="line">session, _ := store.Get(r, <span class="string">&quot;session&quot;</span>)</span><br><span class="line">accessToken := session.Values[<span class="string">&quot;access_token&quot;</span>].(<span class="type">string</span>)</span><br><span class="line">req, _ := http.NewRequest(http.MethodGet, <span class="string">&quot;https://photoslibrary.googleapis.com/v1/mediaItems&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">req.Header.Add(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Bearer &quot;</span>+accessToken)</span><br><span class="line">resp, _ := http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">body, _ := io.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">var</span> photos Photos</span><br><span class="line">json.Unmarshal(body, &amp;photos)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Render photos</span></span><br><span class="line">tpl, _ := template.ParseFiles(<span class="string">&quot;templates/photos.html&quot;</span>)</span><br><span class="line">tpl.Execute(w, photos)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// randomString generates a secure random string of length `length`.</span></span><br><span class="line"><span class="comment">// It returns an error when `length` is negative or failed to use the platform&#x27;s</span></span><br><span class="line"><span class="comment">// secure pseudorandom number generator.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randomString</span><span class="params">(length <span class="type">int</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> length &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, fmt.Errorf(<span class="string">&quot;cannot generate random string of negative length %d&quot;</span>, length)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s strings.Builder</span><br><span class="line"><span class="keyword">for</span> s.Len() &lt; length &#123;</span><br><span class="line">r, err := rand.Int(rand.Reader, big.NewInt(<span class="number">1</span>&lt;&lt;<span class="number">60</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1&lt;&lt;60 == 2**60 equals to 1,000,000,000,000,000 in hex.</span></span><br><span class="line">s.WriteString(fmt.Sprintf(<span class="string">&quot;%015x&quot;</span>, r))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.String()[:length], <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>アプリケーションのエンドポイントは次の 4 つです。</p><div class="scroll"><table><thead><tr><th>パス</th><th>説明</th></tr></thead><tbody><tr><td><code>/</code></td><td>アプリケーションのインデックス。「Fetch photos from Google Photos」ボタンが設置されている。</td></tr><tr><td><code>/oauth</code></td><td>OAuth 開始エンドポイント。ブラウザを Google Photos API の認可エンドポイントにリダイレクトする。</td></tr><tr><td><code>/callback</code></td><td>リダイレクトエンドポイント。認可レスポンスにより呼び出される。</td></tr><tr><td><code>/photos</code></td><td>認可完了後にブラウザがリダイレクトされるエンドポイント。Google Photos の画像が表示される。</td></tr></tbody></table></div><p>以下、ハンドラごとに処理を説明していきます。</p><ol><li><code>handleIndex()</code></li><li><code>handleOAuth()</code></li><li><code>handleCallback()</code></li><li><code>handlePhotos()</code></li></ol><h4 id="1-handleIndex"><a href="#1-handleIndex" class="headerlink" title="1. handleIndex()"></a>1. <code>handleIndex()</code></h4><p><code>handleIndex()</code> は、静的な HTML をレスポンスしているだけです。</p><h4 id="2-handleOAuth"><a href="#2-handleOAuth" class="headerlink" title="2. handleOAuth()"></a>2. <code>handleOAuth()</code></h4><p>78…86 行目において、ランダムな <code>state</code> と <code>codeVerifier</code> を生成し、ブラウザのセッションに保存しています。</p><p>88…90 行目において、<code>codeVerifier</code> から <code>codeChallenge</code> を生成しています。</p><p>92…103 行目において、認可リクエストの URL を生成し、ブラウザをリダイレクトしています。</p><h4 id="3-handleCallback"><a href="#3-handleCallback" class="headerlink" title="3. handleCallback()"></a>3. <code>handleCallback()</code></h4><p>107…113 行目において、ブラウザが保持している <code>state</code> と <code>code_verifier</code> を取得し、セッションをクリアしています。</p><p>115…120 行目において、ブラウザが保持していた <code>session</code> と認可サーバからレスポンスされた <code>state</code> が等しいことを確認しています。これにより、CSRF 攻撃を防いでいます。</p><p>122…133 行目において、トークンリクエストを生成し、リクエストをおこなっています。</p><p>135…140 行目において、トークンレスポンスからアクセストークンを取得し、ブラウザのセッションに保存しています。</p><p>142…143 行目において、ブラウザを <code>/photos</code> にリダイレクトしています。</p><h4 id="4-handlePhotos"><a href="#4-handlePhotos" class="headerlink" title="4. handlePhotos()"></a>4. <code>handlePhotos()</code></h4><p>147…156 行目において、セッションに保存されたアクセストークンを用いて Google Photos API にアクセスし、画像情報を取得しています。</p><p>158…160 行目において、画像情報 (URL) を含むレスポンスを返却しています。</p><img src="/images/20221012a/スクリーンショット_2022-10-03_0.18.47.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-03_0.18.57.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-03_0.19.03.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-03_0.20.59.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-03_0.21.05.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-03_0.21.12.png" alt="" width="1200" height="807" loading="lazy"><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>OAuth, OpenID 周りには、なんとなく苦手意識があったのですが、今回仕様に基づいてスクラッチで実装することで、技術の基盤とセキュリティ上の考慮事項などを知ることができました。</p><p>IDaaS の採用が当然となった現在において、認証・認可周りの知識は、ウェブ技術者の基礎教養といえると思います。今後も引き続き認証・認可周りの情報をウォッチしていきます。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">仕様上、302 Found 以外の方法でユーザーエージェントをリダイレクトすることも許可されています。特に理由がなければ 302 Found でよいでしょう。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/">認証認可</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/OAuth/">OAuth</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%AA%8D%E5%8F%AF%E3%82%B3%E3%83%BC%E3%83%89%E3%82%B0%E3%83%A9%E3%83%B3%E3%83%88/">認可コードグラント</category>
      
      <category domain="https://future-architect.github.io/tags/PKCE/">PKCE</category>
      
      
      <comments>https://future-architect.github.io/articles/20221012a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Auth0のトークン取得とITPへの対応</title>
      <link>https://future-architect.github.io/articles/20221007a/</link>
      <guid>https://future-architect.github.io/articles/20221007a/</guid>
      <pubDate>Thu, 06 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。フューチャーの棚井龍之介と申します。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。フューチャーの棚井龍之介と申します。<a href="/articles/20221003a/">認証認可連載</a>の 4 本目を担当しました。</p><p>認証認可周りは最近触りたてでして、普段の開発業務では、Go・React・AWS を利用しています。</p><p>先日、React ベースのモバイル向け Web アプリに Auth0 の認証を実装したところ、Silent Authentication（サイレント認証）のタイミングでブラウザからトークンが消失し、ログイン状態が維持できない現象に遭遇しました。</p><p>調べたところ、Safari に搭載されているトラッキング防止機能の ITP（Intelligent Tracking Prevention &#x2F; インテリジェント・トラッキング・プリベンション）が原因だと判明しました。</p><p>調べる過程で、Cookie の基本的な機能からアドテク周りの技術要素、最近のプライバシー保護トレンドについて触れる機会を得ましたので、技術ブログとして整理しました。</p><p>本記事では、以下の内容を扱います</p><ul><li>Cookie（1st Party、3rd Party）</li><li>ITP（Intelligent Tracking Prevention）</li><li>ITP による、Auth0 の PKCE フローへの影響<ul><li>対応方法</li></ul></li></ul><p>前半は Cookie とプライバシー保護の話で、後半が Auth0 と ITP の話です。</p><h1 id="Cookie-とは"><a href="#Cookie-とは" class="headerlink" title="Cookie とは"></a>Cookie とは</h1><p>Cookie とは、Web サイトに訪れたユーザの情報を、一時的に保存する機能のことです。<br>この「一時保存する機能」により、ユーザのログイン状態を維持することや、Web ページに再訪したときに「この人は、以前にウチのサイトに来た〇〇さんだ！」と判定できます。</p><img src="/images/20221007a/スクリーンショット_2022-10-05_3.12.54.png" alt="" width="1200" height="614" loading="lazy"><p>「以前に来た〇〇さん」と技術的に判定できると、次は「きっと〇〇さんならば…」という「Cookie により収集された個人属性の、Web 広告利用」へと直結させる動きが当然出てきます。</p><p>最近だとプライバシー保護の観点から、こういった Web 広告の規制が強化されるトレンドにあります。例えば、Web サイトのトップページに訪問した際に「Cookie の有効化に同意してください。Yes or No」がポップアップで表示されて、オプトインでの意思表示が求められるのは、このトレンドに乗ったものだと思います。</p><h2 id="Cookie-の分類"><a href="#Cookie-の分類" class="headerlink" title="Cookie の分類"></a>Cookie の分類</h2><p>続いて、Cookie の分類を見ていきます。</p><p>Cookie の発行元が、訪問しているサイト（ドメイン）と同じか別かにより、1st Party Cookie と 3rd Party Cookie と呼び方が変わります。</p><div class="scroll"><table><thead><tr><th>Cookie の発行元と訪問しているサイト(ドメイン)の関係</th><th>Cookie の呼び方</th></tr></thead><tbody><tr><td>同じ（Cookie の発行者は、訪問したサイトの運営者である）</td><td>1st Party Cookie</td></tr><tr><td>異なる（Cookie の発行者は、訪問しサイトとは別の外部の第三者である）</td><td>3rd Party Cookie</td></tr></tbody></table></div><p>主に、外部のサービスを利用して「ユーザ行動に合わせた Web 広告を表示したい（ターゲティング広告を実施したい）」や「ログイン状態管理などの特定の機能を外部に任せたい」ケースで 3rd Party Cookie が利用されることが多いと思います。</p><h1 id="ITP（Intelligent-Tracking-Prevention）とは"><a href="#ITP（Intelligent-Tracking-Prevention）とは" class="headerlink" title="ITP（Intelligent Tracking Prevention）とは"></a>ITP（Intelligent Tracking Prevention）とは</h1><p>ひとこと言うと、ITP は「3rd Party Cookie の利用を禁止する技術」です。</p><p>先ほど、3rd Party Cookie により実現できることの 1 つに「ターゲティング広告（ユーザの行動履歴を元にした、Web 広告最適化）」があると述べました。ターゲティング広告により、各ユーザごとに個別最適化された（高いクリック率を獲得できる見込みの）Web 広告が表示できます。これにより、Web 広告のクリック率向上 → 購入率の向上が見込まれます。アドテク技術の進歩により、この Web 広告の精度が高まるほど、広告掲載ページ・広告を載せたい企業・その仕組みを提供する企業などの「Web マーケティング」界隈にとっては嬉しい世界になります。</p><p>その一方で、プライバシー保護の観点から、以下のような考え方が広まりつつあります。</p><p>①Web 広告の精度が高まる<br>↓<br>② ユーザの趣味嗜好を高精度で特定できる<br>↓<br>③ 高精度な趣味嗜好の情報って、それはもはや個人情報では？<br>↓<br>④ 個人情報を無断でクロスドメインに共有するは、プライバシー保護観点から NG では？<br>（例えば、あるユーザ α の行動履歴を取得した A 社が、その情報を Web 広告機能を提供する B 社に「α の同意がない状況で」共有するケース）</p><p>このような考え方はメガテック企業でも意識され、Safari や Chrome などのブラウザによる規制も進んでいます。</p><p>例えば、Apple では 2017 年から Safari での 3rd Party Cookie の利用制限を段階的に導入しており、iOS14 ではついに Safari だけでなく Chrome・Firefox 含めて 3rd Party Cookie の利用が全面禁止になりました。<br>Google においても、Chrome での 3rd Party Cookie の利用を「2024 年後半に向けて段階的に廃止する可能性がある」と発表し、その代替技術として「プライバシー・サンドボックス」の開発・ユーザテストを進めています。ただ、Google は当初は 2022 年 1 月に規制を開始すると発表していましたが、その後に 2023 年後半に開始予定と延期し、さらに 2024 年後半と再延期しています。</p><p>Safari での ITP 規制状況を見ると、ユーザー情報のクロスサイトトラッキングを規制しようとする Apple と、規制の穴を探すアドテク企業の戦いが垣間見れます。</p><div class="scroll"><table><thead><tr><th>アップデート</th><th>リリース</th><th>規制概要(*1)</th></tr></thead><tbody><tr><td>ITP1.0</td><td>2017 年 9 月</td><td>特定の 3rd Party Cookie は 24 時間で削除</td></tr><tr><td>ITP2.0</td><td>2018 年 9 月</td><td>特定の 3rd Party Cookie は即時削除</td></tr><tr><td>ITP2.1</td><td>2019 年 3 月</td><td>特定の 1st Party Cookie は 7 日間で削除</td></tr><tr><td>ITP2.2</td><td>2019 年 4 月</td><td>特定の 1st Party Cookie は 24 時間で削除</td></tr><tr><td>ITP2.3</td><td>2019 年 9 月</td><td>特定の localstrage 上のデータを即時削除</td></tr><tr><td>iOS13.1</td><td>2020 年 3 月</td><td>全ての 3rd Party Cookie を即時削除</td></tr><tr><td>iOS14.0</td><td>2020 年 9 月</td><td>iOS で稼働する Firefox, Chrome にも ITP を適応開始</td></tr></tbody></table></div><p>(*1)より詳細な規制内容は<a href="https://webkit.org/blog/category/privacy/">こちら</a>を参照お願いします。</p><p>3rd Party Cookie は何もアドテク領域に閉じた技術ではなく、それ以外の分野でも利用されています。<br>次は、ITP により Auth0 のトークンがうまく動かなくなってしまう話に移ります。</p><h1 id="Auth0-のトークン取得フローと-ITP-ブロックへの対応"><a href="#Auth0-のトークン取得フローと-ITP-ブロックへの対応" class="headerlink" title="Auth0 のトークン取得フローと ITP ブロックへの対応"></a>Auth0 のトークン取得フローと ITP ブロックへの対応</h1><p>Auth0 の React 用 SDK（<a href="https://github.com/auth0/auth0-react">auth0-react</a>）を利用する場合、PKCE（Proof Key for Code Exchange）の認証認可フローに従います。フローの詳細は<a href="https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow-with-proof-key-for-code-exchange-pkce">こちらのサイト</a>に記載があります。</p><img src="/images/20221007a/auth0_pkce.png" alt="auth0_pkceフロー" width="1200" height="976" loading="lazy"><p>Auth0 の JavaScript SDK ではログイン成功後、トークンを取得して、ブラウザのインメモリにキャッシュされます（上図での ⑨ で取得した Access Token をインメモリに保存する）。インメモリに保存すると、ページ遷移や画面リロードの度にトークンの再取得が必要で色々と面倒になりそうですが、この辺のトークンリフレッシュを Auth0 側では「Silent Authentication（サイレント認証）」により解決しています。サイレント認証により、ログイン状態を維持しながら、トークンをインメモリでセキュアに保持できます。</p><h2 id="3rd-Party-Cookie-が-ITP-で強制消去される"><a href="#3rd-Party-Cookie-が-ITP-で強制消去される" class="headerlink" title="3rd Party Cookie が ITP で強制消去される"></a>3rd Party Cookie が ITP で強制消去される</h2><p>Auth0 x React でのログイン状態の管理が<br>（1）ID&#x2F;Pass を入力してログインし、トークンを取得<br>（2）サイレント認証でトークンのリフレッシュ、ログイン状態を維持<br>（3）トークンの破棄、ログアウト<br>の 3 つで完結するならばこれで話は終わりですが、昨今の ITP（3rd Party Cookie の禁止）により、② のサイレント認証に失敗するケースが出てきました。</p><p>例えば、会社 Z が Auth0 でログイン機能を実装した Web サービスを運営しているとします。サービスの運営会社 Z と Auth0 では「異なるドメインの会社」になるため、Auth0 の発行したトークンが、Z 社の Web ページ上では 3rd Party Cookie と判定されて、ブラウザにより Cookie が強制消去されるケースが有り得る、ということです。サイレント認証に失敗すると「ログイン状態を維持できない（ページ遷移・リロードの度にログイン処理を求めることになる）」ため、ユーザ体験を大きく損なってしまいます。</p><p>ITP により 3rd Party Cookie が消去されたとき、Auth0 のコンソール画面、Safari の Web Inspector それぞれで以下の挙動が得られます。</p><img src="/images/20221007a/failed_auth0.png" alt="auth0で失敗" width="1200" height="481" loading="lazy"><p>↑<br>Auth0 のコンソール画面では「ログインには成功」しているが「サイレント認証には失敗」している</p><img src="/images/20221007a/failed_emulator.png" alt="サイレント認証に失敗" width="1200" height="212" loading="lazy"><p>↑<br>Web Inspector のネットワークのログから、前述した PKCE フロー ③ の <code>/authorize</code> は Call されているが、3rd Party Cookie がブラウザにより消去されているため、⑦ の <code>/oauth/token</code> が Call されない。→ PKCE フローが途中終了しているため、認証は「失敗」である。</p><h2 id="ITP-への対応方法"><a href="#ITP-への対応方法" class="headerlink" title="ITP への対応方法"></a>ITP への対応方法</h2><p>サイレント認証が ITP により失敗する問題には、<a href="https://auth0.com/docs/troubleshoot/authentication-issues/renew-tokens-when-using-safari">Auth0 公式が 2 つの対応方法</a>を提示しています。</p><p>①<a href="https://auth0.com/docs/secure/tokens/refresh-tokens/refresh-token-rotation">リフレッシュトークンローテーション</a>を設定する<br>②<a href="https://auth0.com/docs/customize/custom-domains">カスタムドメイン</a>を設定する</p><p>この 2 つを設定すれば、ITP による 3rd Party Cookie 消失問題には対応できます。</p><p>また、ブラウザの設定変更で「ITP をオフにする」ことも可能なので、問題切り分け手法の 1 つとして覚えておくと、後々に役立つかも知れません。</p><p>以下は iPhone のブラウザ設定画面です。<br>スクショは ITP がオンの状態で撮影したものなので、Safari は「『サイト越えトラッキングを防ぐ』をオフ」にすることで、Chrome は「『Web サイト超えトラッキングを許可』をオン」にすることで、ITP を無効化できます。</p><img src="/images/20221007a/スクリーンショット_2022-10-05_2.46.11.png" alt="" width="1200" height="985" loading="lazy"><p>以下はリフレッシュトークン・カスタムドメインのどちらも設定せずに、エミュレーターの Safari 設定で ITP をオフにした場合の挙動です。Auth0 のコンソール画面、Web Inspector のログから、<code>/authorize</code>と<code>/oauth/token</code>が Call されて、PKCE フローが正常終了してサイレント認証に成功していることが分かります。</p><img src="/images/20221007a/スクリーンショット_2022-10-05_2.57.58.png" alt="" width="1200" height="712" loading="lazy"><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>モバイル向けの Web ページを作成してリリースし、リリース後の動作チェックで「あれ、iOS だとログイン状態が維持できてない！？」と気づき、OAuth2.0 の仕様や PKCE の確認、インスペクタのログと認証フローと付き合わせながら、処理に失敗している場所の特定にまで至れました。①「ITP」について知見がなかったこと、② 事前チェックが Android と Chrome シミュレーターだけで、iOS は工数削減のため未実施だったことが根原因なのですが、スマホと PC・iOS と Android で色々細かいところが違うのなー（なので、モバイル実機テストは Android と iOS は両方やろう）と再認識する機会になりました。</p><h2 id="参照サイト"><a href="#参照サイト" class="headerlink" title="参照サイト"></a>参照サイト</h2><ul><li><a href="https://webkit.org/blog/category/privacy/">Webkit</a></li><li><a href="https://auth0.com/docs/troubleshoot/authentication-issues/renew-tokens-when-using-safari">Troubleshoot Renew Tokens When Using Safari</a></li><li><a href="https://dangerous-animal141.hatenablog.com/entry/2021/06/08/220637">Auth0 の Silent Authentication (サイレント認証)と Refresh Token Rotation (リフレッシュトークンローテーション)を完全に理解した (い)</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/">認証認可</category>
      
      
      <category domain="https://future-architect.github.io/tags/Auth0/">Auth0</category>
      
      <category domain="https://future-architect.github.io/tags/AuthN/">AuthN</category>
      
      <category domain="https://future-architect.github.io/tags/ITP/">ITP</category>
      
      <category domain="https://future-architect.github.io/tags/Cookie/">Cookie</category>
      
      
      <comments>https://future-architect.github.io/articles/20221007a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kong API Gatewayを使ってResource Serverを保護する</title>
      <link>https://future-architect.github.io/articles/20221006a/</link>
      <guid>https://future-architect.github.io/articles/20221006a/</guid>
      <pubDate>Wed, 05 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは。TIGのLEEです。&lt;a href=&quot;/articles/20221003a/&quot;&gt;認証認可連載&lt;/a&gt;の3本目です。&lt;/p&gt;
&lt;p&gt;前回はAWS API Gatewayを利用して、OIDC&amp;#x2F;OAuth2.0におけるResource</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは。TIGのLEEです。<a href="/articles/20221003a/">認証認可連載</a>の3本目です。</p><p>前回はAWS API Gatewayを利用して、OIDC&#x2F;OAuth2.0におけるResource ServerをCustom Authorizerで保護する記事を書いてました。</p><p><a href="https://future-architect.github.io/articles/20210610a/">https://future-architect.github.io/articles/20210610a/</a></p><p>今回はAPI Gatewayのミドルウェア製品となるKongを使ってResource Serverを構築する方法について話します。</p><h1 id="Kong-Gateway"><a href="#Kong-Gateway" class="headerlink" title="Kong Gateway"></a>Kong Gateway</h1><img src="/images/20221006a/gateway_overview.png" alt="gateway_overview.png" width="1200" height="507" loading="lazy"><p><a href="https://github.com/Kong/kong">Kong</a>はOSSから始まったAPIサーバのトラフィックを管理するためのミドルウェアです。</p><p>NginxベースにLuaJITエンジンを使ってLuaスクリプトが組み込めるWebプラットフォームの<a href="https://openresty.org/">OpenResty</a>を採用し、Luaで書かれた様々なPlug-inをデフォルトで揃え、それを組み立てることでAPIGatewayの機能を実装しています。また、Luaスクリプトで新しいカスタムPlug-inを作りそれを組み込むことも可能です。</p><p>Enterprise版が登場してからはAPIGateway以外にも様々さサービスがありますが、今回はKong Gatewayにのみ注目して行きたいです。</p><h2 id="Kongの構造"><a href="#Kongの構造" class="headerlink" title="Kongの構造"></a>Kongの構造</h2><p>構築の話になる前にかんたんにKongの構造を触れていきます。上の図のようにKongは基本的にConsumer&#x2F;Route&#x2F;Service&#x2F;LoadBalancer(Upstream)の4つのレイヤリングが存在します。Kongで使う様々なPlug-inはこの4つのレイヤーのどこか、もしくはGlobalに組み込むこともできます。</p><ul><li><strong>Consumer</strong>: Kongを実際利用するAPIClient(もしくはユーザ)を表すEntity</li><li><strong>Route</strong>: Requestのルールを定義するEntity</li><li><strong>Service</strong>: KongがProxyするBackendServiceを表すEntity</li><li><strong>Upstream</strong>: Backendの負荷分散やHealthCheckなどに使う仮想ホストのEntity</li></ul><h1 id="Actors"><a href="#Actors" class="headerlink" title="Actors"></a>Actors</h1><p>構築にあたり、まずはOIDCの役者を揃えましょう。Front&#x2F;Backで分離された認証認可設計のためには、少なくとも下記3つのActorが必要になります。</p><img src="/images/20221006a/kong-jwt.drawio.png" alt="kong-jwt.drawio.png" width="928" height="501" loading="lazy"><h2 id="Keycloak-as-OpenID-Provider-Authorization-Server"><a href="#Keycloak-as-OpenID-Provider-Authorization-Server" class="headerlink" title="Keycloak as OpenID Provider (Authorization Server)"></a><a href="https://www.keycloak.org/">Keycloak</a> as OpenID Provider (Authorization Server)</h2><p><a href="https://www.keycloak.org/getting-started/getting-started-docker">https://www.keycloak.org/getting-started/getting-started-docker</a></p><p>中心となる認可サーバはOSSのKeycloakを使いましょう。ID管理、トークンや証明書の発行&amp;管理、認証画面提供などの役割があります。<br>今回は上記リンク通り、Dockerを利用して構築します。Client設定は下記のVueの設定に従いましょう。<br>Keycloak構築はチュートリアル通りで問題ないので、詳細な実装方法は省略します。</p><h2 id="Vue-as-Relying-Party-Client"><a href="#Vue-as-Relying-Party-Client" class="headerlink" title="Vue as Relying Party (Client)"></a><a href="https://vuejs.org/">Vue</a> as Relying Party (Client)</h2><p><a href="https://www.keycloak.org/securing-apps/vue">https://www.keycloak.org/securing-apps/vue</a></p><p>FrontendとなるClientはVueを使います。認証後トークンの保持&amp;リフレッシュ、APIサーバへリクエストを送ったりします。<br>今回はVueを使いますが、<a href="https://www.npmjs.com/package/keycloak-js">keycloak-js</a>さえ組み込めば、どのFrameworkでもかんたんにRelyingPartyを作ることができます。<br>Keycloak同様リンク通り実装すれば問題ないので、詳細は省略します。</p><h2 id="Kong-as-Resource-Server-API-Server-Backend-Service"><a href="#Kong-as-Resource-Server-API-Server-Backend-Service" class="headerlink" title="Kong as Resource Server (API Server, Backend Service)"></a><a href="https://konghq.com/">Kong</a> as Resource Server (API Server, Backend Service)</h2><p><a href="https://mockbin.org/">https://mockbin.org/</a></p><p>今回の保護対象となるResourceServerは、Gatewayとして前段に位置するKongと本丸となるBackend Service (API Server)に構成されます。Backend ServiceとしてはKongのチュートリアルで使われる<a href="https://mockbin.org/">Mockbin</a>をそのまま使います。</p><h1 id="Kongの構築"><a href="#Kongの構築" class="headerlink" title="Kongの構築"></a>Kongの構築</h1><p><a href="https://docs.konghq.com/gateway/latest/install/">https://docs.konghq.com/gateway/latest/install/</a></p><p>まずはKongをインストールします。Dockerなど便利なオプションもあるので好きな方法でインストールしましょう。<br>Kongは設定の保存先としてDBを使うのでPostgreSQLもインストールが必要です。</p><p>Kongはデフォルトで</p><ul><li>Port 8001：あらゆるEntity設定を行うのAdminAPI</li><li>Port 8000：実際トラフィックをさばくProxy</li></ul><p>に分かれています。</p><h2 id="Service-amp-Routing"><a href="#Service-amp-Routing" class="headerlink" title="Service &amp; Routing"></a>Service &amp; Routing</h2><p><a href="https://docs.konghq.com/gateway/latest/get-started/services-and-routes/">https://docs.konghq.com/gateway/latest/get-started/services-and-routes/</a></p><p>次にKongとBackendServiceとなるMockbinをつないで、KongのURLにアクセスするとMockbinのレスポンスが出るようにします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -i -s -X POST http://localhost:8001/services \</span><br><span class="line">  --data name=example_service \</span><br><span class="line">  --data url=<span class="string">&#x27;http://mockbin.org&#x27;</span></span><br><span class="line">curl -i -X POST http://localhost:8001/services/example_service/routes \</span><br><span class="line">  --data <span class="string">&#x27;paths[]=/mock&#x27;</span> \</span><br><span class="line">  --data name=example_route</span><br></pre></td></tr></table></figure><p>上記のように設定することでKongの<code>/mock</code>へのアクセスが、Mockbinの<code>/</code>にProxyされるようになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET http://localhost:8000/mock/requests</span><br></pre></td></tr></table></figure><p>そうすると上のようなCurlでMockbinのAPIパスである<code>/requests</code>のレスポンスが取得できます。</p><h1 id="APIを保護する"><a href="#APIを保護する" class="headerlink" title="APIを保護する"></a>APIを保護する</h1><p>ここまで下準備が整ったところで、本題である認証機能実装に入ります。<br>ClientからのリクエストはBearerTokenとしてKeycloakが発行したJWTを乗せないと拒否するようにしたいので、トークンを検証するためにKong公式の<a href="https://docs.konghq.com/hub/kong-inc/jwt/">JWTプラグイン</a>を使います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:8001/plugins -d <span class="string">&quot;name=jwt&quot;</span></span><br><span class="line">curl -i http://localhost:8000/mock/requests <span class="comment"># 401 Unauthorized</span></span><br></pre></td></tr></table></figure><p>今回はJWTプラグインをGlobalに設定しますが、特定のServiceやRouteに限定して設定することも可能です。</p><h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><p>次はConsumerの設定です。ConsumerはAPI Clientを表すEntityですが、今回の場合は特定認可サーバ(Keycloak)に認証済みのユーザ全員を表すために予め設定するものになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:8001/consumers -d <span class="string">&quot;username=authorized_user&quot;</span></span><br></pre></td></tr></table></figure><h2 id="JWT-Credential"><a href="#JWT-Credential" class="headerlink" title="JWT Credential"></a>JWT Credential</h2><p>最後にConsumerにJWTを検証するための公開鍵を設定することで、「この検証されたトークンのBearerはこのConsumerで間違いない」ということを認証させるための設定をします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:8001/consumers/authorized_user/jwt \</span><br><span class="line">-H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">-d <span class="string">&#x27;&#123;&quot;key&quot;: &quot;http://localhost:8080/realms/&#123;REALM_NAME&#125;&quot;,</span></span><br><span class="line"><span class="string">     &quot;algorithm&quot;: &quot;RS256&quot;,</span></span><br><span class="line"><span class="string">     &quot;rsa_public_key&quot;: &quot;-----BEGIN PUBLIC KEY-----\nMIIBI...QIDAQAB\n-----END PUBLIC KEY-----&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="key"><a href="#key" class="headerlink" title="key"></a><code>key</code></h3><p>JWTのペイロード<code>iss</code>と同じ値を設定します。<br>このAPIにアクセスできるユーザ(<code>authorized_user</code>)は、みんな同じ認可サーバ(<code>Issuer</code>)から発行されたトークンを持ってる(<code>Bearer</code>)ことを意味します。</p><p>JWTプラグインのデフォルト設定で<code>config.key_claim_name=iss</code>となるので、別のClaimの値にしたい場合(例えば<code>aud</code>か<code>azp</code>など)はAdminAPIの<code>/plugins/&#123;jwt plug-in ID&#125;</code>をPATCHなどして変更も可能です。</p><h3 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a><code>algorithm</code></h3><p>Keycloakでデフォルトで発行するAccessToken(JWT)のアルゴリズムである<code>RS256</code>を指定します。<br>注意するところは、もしこの設定のリクエストで下記の<code>rsa_public_key</code>のPEM形式が正しくない場合でも、このフィールドのエラーメッセージが出ます。</p><h3 id="rsa-public-key"><a href="#rsa-public-key" class="headerlink" title="rsa_public_key"></a><code>rsa_public_key</code></h3><p>Keycloakは同じRealmのユーザには同じ公開鍵でJWTを署名しているので、AdminConsoleの<code>Realm Settings &gt; Keys</code>から<code>RS256</code>の公開鍵をPEM形式でセットします。<br>一般的にRS256のJWT検証に使われるJWKs Endpointの証明書(<code>x5c</code>)と違い、公開鍵であることに注意しましょう。</p><h1 id="実際リクエストを送ってみる"><a href="#実際リクエストを送ってみる" class="headerlink" title="実際リクエストを送ってみる"></a>実際リクエストを送ってみる</h1><p>普通アプリを作るならばここでClientであるVue上でKeycloakから取得したAccessToken(JWT)を<code>Authorization</code>ヘッダーに載せ、KongのAPIにアクセスするコードを書くことになります。<br>しかし、ここではKongの機能を確認するだけでいいので、Vueが保持するKeycloakのインスタンスをダンプさせAccessTokenを取得し、curlを使います。</p><img src="/images/20221006a/スクリーンショット_2022-10-06_4.38.57.png" alt="スクリーンショット_2022-10-06_4.38.57.png" width="1200" height="707" loading="lazy"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:8000/mock/requests -H <span class="string">&quot;Authorization: Bearer eyJhbGciOiJS...&quot;</span> | jq .</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="string">&quot;authorization&quot;</span>: <span class="string">&quot;Bearer eyJhbGciOiJS...&quot;</span>,</span><br><span class="line">        <span class="string">&quot;x-consumer-username&quot;</span>: <span class="string">&quot;authorized_user&quot;</span>,</span><br><span class="line">        <span class="string">&quot;x-credential-identifier&quot;</span>: <span class="string">&quot;http://localhost:8080/realms/&#123;REALM_NAME&#125;&quot;</span>,</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>そうするとMockbinが受け取ったHeaderを上記のようなレスポンスとして返してくれます。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>といった感じで簡単に触ってみましたが、いかがだったでしょうか。</p><p>今回は割愛しましたが、<code>exp</code>Claimで有効期限をチェックすることも可能ですし、設定の<code>config.key_claim_name</code>とプラグインを適用するRoute&#x2F;Serviceを調整する機能を組み合わせることで認可機能を実装することも可能です。</p><p>個人的にはどのアカウントからのリクエストかわかるように、ペイロードの<code>sub</code>など一部のClaimを後ろにヘッダーとして流せる機能があったら良かったなとも思いましたが、例えば<a href="https://docs.konghq.com/hub/yesinteractive/kong-jwt2header/">こういったカスタムプラグイン</a>を組み合わせることでなんとかなりそうです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/">認証認可</category>
      
      
      <category domain="https://future-architect.github.io/tags/Kong/">Kong</category>
      
      <category domain="https://future-architect.github.io/tags/OAuth/">OAuth</category>
      
      <category domain="https://future-architect.github.io/tags/openid-connect/">openid_connect</category>
      
      
      <comments>https://future-architect.github.io/articles/20221006a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
