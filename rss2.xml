<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Tue, 09 Nov 2021 01:41:05 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>仮想通貨の個人ウォレットの守り方</title>
      <link>https://future-architect.github.io/articles/20211109a/</link>
      <guid>https://future-architect.github.io/articles/20211109a/</guid>
      <pubDate>Mon, 08 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;テクノロジーイノベーショングループの前川です。&lt;br&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>テクノロジーイノベーショングループの前川です。<br><a href="/articles/20211027a/">秋のブログ週間</a>連載の9日目として、今回は仮想通貨の個人ウォレットのセキュリティの考え方についてお届けします。</p><p>仮想通貨の存在は、2017年から2018年にかけてのビットコインの暴騰と暴落のニュースを経てもまだまだ「そういう金融商品がある」「取引所を介して売買ができる為替みたいな物」程度の認識でしか一般には浸透していませんでした。</p><p>ここ1，2年でDeFi（分散型金融）、NFT、GameFiなどの関連市場やエルサルバドルの法定通貨にビットコイン採用といったホットな話題が多数立ち上がり、いよいよ腰を上げて探りを入れ始めたという方も多いのではないでしょうか。（初めてこれらの単語に触れる方々の参考になるよう文末にリンクを挙げています）</p><p>様々なニュースを足掛かりに分散型金融の世界に足を踏み入れたものの、従来の金融商品の延長のように捉えて何となく運用してしまっている人が今直ぐにでも押さえておくべきポイントとして、本稿では個人でウォレットを持つ場合のセキュリティについて考え方と運用について掘り下げます。</p><p>上に挙げたような関連市場へのアクセス手段は既に導入記事が多数あるのでそちらに譲ります。本稿では技術面では深堀りせずに利用者目線で把握しておくべき表層上の特徴に注目していきます。</p><h2 id="「シードフレーズ」「秘密鍵」「アドレス」の関係"><a href="#「シードフレーズ」「秘密鍵」「アドレス」の関係" class="headerlink" title="「シードフレーズ」「秘密鍵」「アドレス」の関係"></a>「シードフレーズ」「秘密鍵」「アドレス」の関係</h2><img src="/images/20211109a/image.png" alt="image.png" width="859" height="267" loading="lazy"><p>仮想通貨のウォレットを個人で持つ場合に意識して守らなければいけない物には、資産の在り処となるアドレス、取引に最終的なGoサインを出す秘密鍵、それらを生み出す全ての根源であるシードフレーズ、が有ります。まずこの3つについて特徴とその漏洩の影響についてご紹介します。</p><p>（用法により「ウォレットをロックするためのパスワード」や「シードフレーズに更に味付けするパスフレーズ」等も出て来ますが本稿では割愛します。）</p><h3 id="アドレス"><a href="#アドレス" class="headerlink" title="アドレス"></a>アドレス</h3><p>我々が仮想通貨を扱う取引全てに現れる、「資産の在り処」です。</p><p>このアドレスと、そこに纏わる取引内容は全てインターネット上に公開されています。各ブロックチェーンネットワークのエクスプローラを使って「どのアドレスでどんな取引がされたか」を「誰が、誰のアドレスに対しても」照会が可能です。</p><p>アドレスはシードフレーズを使って、（実質的に）無尽蔵に生成できます。</p><h4 id="アドレス漏洩の影響"><a href="#アドレス漏洩の影響" class="headerlink" title="アドレス漏洩の影響"></a>アドレス漏洩の影響</h4><p>仮に現実世界であなたを知る人があなたのアドレスも知ったとすると、「あなたが仮想通貨ウォレットを通して行った全ての取引と残高が相手に丸見えになる」と考えてください。過去も未来も隠すすべは有りません。何処か専門の機関に依頼すれば消してくれる、などという仕組みは有りません。</p><p>アドレスを使って他者と仮想通貨を取引する時には、（何か取引アドレスを匿名化するサービスでも使用しない限り）相手に全ての取引と残高を覗く権利を与える行為である旨、覚悟してください。</p><p>アドレスが知られていたとしても、それだけではそのアドレスに保有されている資産を動かす事はできません。あくまで見えるだけです。</p><h3 id="秘密鍵"><a href="#秘密鍵" class="headerlink" title="秘密鍵"></a>秘密鍵</h3><p>秘密鍵は各アドレスで行われる取引を承認するための鍵です。アドレスとは1対1で紐付いており、変更する事はできません。秘密鍵が違えばその鍵が指すアドレスも違うという事になります。</p><h4 id="秘密鍵漏洩の影響"><a href="#秘密鍵漏洩の影響" class="headerlink" title="秘密鍵漏洩の影響"></a>秘密鍵漏洩の影響</h4><img src="/images/20211109a/image_2.png" alt="image.png" width="859" height="444" loading="lazy"><p>秘密鍵が盗まれると、そのアドレスを使った取引がやりたい放題になります。盗まれた後で防ぐ事は一切できません。秘密鍵が盗まれた後にできる事は、そのアドレスに紐付く全資産を一刻も早く別のアドレスに移す事だけです。</p><p>資産を別アドレスに避難させるには送金を実行するための手数料（ガス代）が必要になりますが、それを妨害するために攻撃者は真っ先にガス代に使える通貨を奪います。そのため、資金を対象アドレスの外、かつ対象アドレスにいつでも送金できる場所に用意しておく必要が有ります。現実にはCEX（仮想通貨の販売所／取引所事業を展開する企業のサービス）に資金を置いておく形が多いと思います。</p><p>通常は秘密鍵だけが盗まれるという事態は考え難いです。秘密鍵はシードフレーズよりも露出する機会が少なく、秘密鍵が漏れた時点でシードフレーズの方も同時に漏れている可能性の方が高いからです。</p><p>退避用のアドレスを作る際は、シードフレーズを新しく用意するところから開始してください。予め用意しておいたシードフレーズは、今回漏洩したのと同じ経路で同じように漏洩している可能性が有ります。</p><p>避難経路と手順は定期的に確認しましょう。（DEXのステーキング解除、Vaultのロック期間確認、報酬確保、NFTの所有権移動、 etc…）</p><h3 id="シードフレーズ"><a href="#シードフレーズ" class="headerlink" title="シードフレーズ"></a>シードフレーズ</h3><p>ウォレットアプリをセットアップする際「これは厳重に管理しとけ」と釘を刺されたあれです。シードフレーズは複数のアドレスと秘密鍵を生み出す根源です。シードフレーズを変更する事はできません。シードフレーズが違えばそこから生まれるアドレスも鍵も違います。</p><p>ウォレットアプリを使ってアドレスを次々と生成する事ができますが、シードフレーズが決まった時点で、そこから1番目に生成されるアドレス、2番目に生成されるアドレス…ひいては”N番目に生成されるアドレス”が全て決定しています。</p><h4 id="シードフレーズ漏洩の影響"><a href="#シードフレーズ漏洩の影響" class="headerlink" title="シードフレーズ漏洩の影響"></a>シードフレーズ漏洩の影響</h4><img src="/images/20211109a/image_3.png" alt="image.png" width="881" height="444" loading="lazy"><p>シードフレーズが盗まれるという事はそこから生まれる全アドレスの全権利を余すこと無く盗まれるという事です。盗まれた後にできる事は、そのシードフレーズから生成した全てのアドレスから全資産を一刻も早く別のシードフレーズから生成したアドレスに移す事だけです。</p><h2 id="シードフレーズと秘密鍵を死守せよ"><a href="#シードフレーズと秘密鍵を死守せよ" class="headerlink" title="シードフレーズと秘密鍵を死守せよ"></a>シードフレーズと秘密鍵を死守せよ</h2><p>さて、ここまで散々脅しましたのでシードフレーズと秘密鍵が漏れる危険性についてはご理解頂けたかと思います。</p><p>何より恐るべき事は、鍵の役割を持つこれらを後から変更するすべが一切無い点です。漏れたらもう急いで資産を逃がすしかない。では、どのようにして漏れるのか？どう防ぐのか？といった辺りに触れていきます。</p><h3 id="漏洩経路：フィッシング（SNSでの報告例：超多数！）"><a href="#漏洩経路：フィッシング（SNSでの報告例：超多数！）" class="headerlink" title="漏洩経路：フィッシング（SNSでの報告例：超多数！）"></a>漏洩経路：フィッシング（SNSでの報告例：超多数！）</h3><p>本当に被害報告が多いです。フィッシングの誘導の手口は様々です。</p><ul><li>SNSで仮想通貨関係の困りごとを呟くとリプライで寄ってきて「サポートが必要ですか？こちらのフォームに記入頂ければスタッフが対応します（→シードフレーズ記入フォームに誘導）」<br>例： <a href="https://www.bleepingcomputer.com/news/security/fake-opensea-support-staff-are-stealing-cryptowallets-and-nfts/">https://www.bleepingcomputer.com/news/security/fake-opensea-support-staff-are-stealing-cryptowallets-and-nfts/</a></li><li>Webサイトで新サービス開始を広告して「登録にはシードフレーズが入力必須」</li><li>アプリストアに偽のウォレットアプリを公開。通常のセットアップ手順と見せかけてシードフレーズを入力させる。<br>例： <a href="https://nextmoney.jp/?p=36645">https://nextmoney.jp/?p=36645</a></li></ul><p>対策としてはまず大原則も大原則、絶対の決め事として <strong>シードフレーズを何処にも入力するな！！！</strong></p><p>シードフレーズの露出が必要になる場面は通常ただ1つ、「現在使用しているシードフレーズを流用して新しいウォレットアプリ／新しい端末に乗り換えたい時」だけです。それ以外の場面では絶対にシードフレーズを入力しない、そもそも画面に表示させない、外気に触れさせない、存在を意識しない事を徹底しましょう。</p><p>ごく簡単な事の筈ですが、不思議とこれができない人が後を絶ちません。</p><p>偽ウォレットアプリ対策には、そのアプリの公開者のWebサイトにアクセスして、ブラウザのアドレスバーでドメイン名が間違っていない事を一文字ずつ確認して、そのサイトからのリンク経由でダウンロードするようにしましょう。公式サイトで見つからないからと言って検索サイトやアプリストアで検索してインストールするなどしてはいけません。公式サイトがリンクしてないならそんなアプリは存在しないのです。</p><p>フィッシング対策はブラウザが幾らかはアシストしてくれはするものの、大部分はユーザのセキュリティ意識にのみ依拠します。逆に言えば意識次第で防御できるのですから、しっかりやりましょう。</p><h3 id="漏洩経路：シードフレーズをメモした紙が紛失・盗難（SNSでの報告例：なくはない）"><a href="#漏洩経路：シードフレーズをメモした紙が紛失・盗難（SNSでの報告例：なくはない）" class="headerlink" title="漏洩経路：シードフレーズをメモした紙が紛失・盗難（SNSでの報告例：なくはない）"></a>漏洩経路：シードフレーズをメモした紙が紛失・盗難（SNSでの報告例：なくはない）</h3><p>言うに及ばず。実印や登記識別情報通知書などと一緒に厳重に管理しましょう。</p><h3 id="漏洩経路：端末のハッキング（SNSでの報告例：無し？）"><a href="#漏洩経路：端末のハッキング（SNSでの報告例：無し？）" class="headerlink" title="漏洩経路：端末のハッキング（SNSでの報告例：無し？）"></a>漏洩経路：端末のハッキング（SNSでの報告例：無し？）</h3><p>報告例を見た事は有りませんがそれもその筈、まずこの手口に遭ったと気付く事ができないので。ただ「ウォレット乗っ取られたけどシードフレーズが漏れた経路に全く心当たりが無い」というケースで一定の可能性があるのはこれだと思います。</p><p>ハッキングの手口は大きく分けて2通り。</p><ul><li>データをPCのストレージから直接盗み出す</li><li>PCの表示画面を遠隔で盗み見て、たまたまその時に画面に映っていたシードフレーズをメモしておく<ul><li>画面ではなくキー入力ログを採取されている場合も</li></ul></li></ul><p>いずれも対策としては、アンチウイルスソフトを入れておく、怪しいサイトにアクセスしない、等々。当たり前の事ですね。<br>ただ後者の手口に関しては先ほどフィッシングの項で挙げた対策も有効で、とにかくシードフレーズを露出/入力さえしなければこの手口で盗み出す事ができなくなります。</p><p>前者のこれはPCにシードフレーズを保存さえしなければ避けられるわけですが……これを実現するのが、ハードウェアウォレットと呼ばれる物です。</p><h2 id="ハードウェアウォレット"><a href="#ハードウェアウォレット" class="headerlink" title="ハードウェアウォレット"></a>ハードウェアウォレット</h2><p>ハードウェアウォレット（以下HW）は、シードフレーズとそこから生成される秘密鍵等の情報を内部に保持し、それらを容易には出力しないように制御されている装置です。具体的には下記の機能を備えています。</p><ul><li>シードフレーズを新規に生成する</li><li>既知のシードフレーズをインポートする</li><li>HWを扱う全ての操作に対しパスワードやPINコード等による認証を要求する</li><li>PC等、HWを接続した機器からのリクエストに応じて取引を承認する<ul><li>具体的に言うと「PCは実行したいトランザクションデータをHWに渡し、HWは秘密鍵で署名したトランザクションデータを返す」</li></ul></li></ul><img src="/images/20211109a/image_4.png" alt="image.png" width="942" height="397" loading="lazy"><p>重要なのは「シードフレーズと秘密鍵がHWから出てこない」という点です。</p><p>認証機能がHW本体に付いていれば、仮にPCがハッキングされていようと、できる事はせいぜいHWにリクエストを送る事だけ。HWをPCに接続してPINを入力するといった物理的な操作をクリアしない限り攻撃者は何も得られません。（「認証機能がHW本体に付いていれば」という前提は結構大事で、これがPC上のキーボードやマウス等で入力できるタイプのHWだと結局PCに接続されてさえいれば攻撃可能になってしまいます。）</p><h3 id="ハードウェアウォレット、鉄壁なのでは…"><a href="#ハードウェアウォレット、鉄壁なのでは…" class="headerlink" title="ハードウェアウォレット、鉄壁なのでは…"></a>ハードウェアウォレット、鉄壁なのでは…</h3><p>はい、守りは非常に硬いです。「ハッキング対策として言えば」。</p><p>実態として、防水・耐火・耐熱・耐衝撃といった耐久性、生体認証や接続可能機器登録といった認証の多要素性、リモートロックなど事件発生後の補償回路に関する機能がついている商品がほぼ見掛けられない上に、購入してから届くまでに4~7日かかるといった商品が多数あります。となると、どうなるか？</p><p>以下、何も考えず「HW買った！もうこれで万全だ！」と安心しきってしまった最悪のケースの想定です。</p><ul><li>手を滑らせてHWを落として／コーヒーを零して故障してしまい、シードフレーズも分からず復旧不可、資産全て失う</li><li>同上、ただしシードフレーズはメモしてあった…が、新しいHWを注文して届くまでに数日待ち</li><li>紛失／盗難被害に遭った。PINに自信が持てず一刻も早く資産を移したい。がそれが可能になるのが数日後</li></ul><p>といったリスクに晒されます。実際のところ頑丈に設定したPINなら数日で破られる心配は無用とはいえ、ボラティリティの高い通貨を扱っている場合等、このリードタイムが重い足かせになる場面は容易に想像できます。</p><p>また、紛失／盗難により人手に渡ってしまった可能性がある場合は時間を掛ければいずれPINが破られる事を想定してぼちぼち新しいシードフレーズから作ったアドレスに引っ越す作業が必要になるという点もご注意ください。</p><p>巷には「手持ちのHWを失くしても新しいHWにインポートすればまたすぐ使えますよ！」などと安易に書いている記事が非常に多いですが、それが通用するのはきちんとその為の準備と心構えがある事が前提になっている事をご承知おきください。</p><p>具体的には下記が考えられます。</p><ul><li>HWでセットアップしたシードフレーズをメモしておく</li><li>HWを2台常備しておき、片方をセットアップした時のシードフレーズを他方にインポートしておく</li><li>番外編：HWが無くても取引できるよう緊急避難的な逃げ道を確保しておく<ul><li>要は、メモしておいたシードフレーズ（とパスフレーズ）を事故発生時にはソフトウェアのウォレットにインポートしてしまう。当然、あらかじめ安全でクリーンな端末と環境を用意できる事が前提</li></ul></li></ul><p>注意点はまだあります。</p><p>「HWが壊れて画面が映らない。ボタンが反応しない。PCに接続しても応答しない」。どうしますか？自治体の指示に従ってゴミの日に……出す前にやる事があります。</p><p>水没や破損などで「実用には耐えられない」程度に壊れたとしても、技術のある人なら中のデータをサルベージできる可能性が残っています。ケースをこじ開けて中身を粉々にするか、新しいHWで新しいシードフレーズを生成しそちらに全資産を移動して元のアドレスを空にしてから廃棄しましょう。</p><h2 id="これで完璧？"><a href="#これで完璧？" class="headerlink" title="これで完璧？"></a>これで完璧？</h2><p>セキュリティに完全は有りません。特に仮想通貨の個人ウォレットは、「鍵を変える事ができない」「何か有った時に問い合わせを受けるべき責任を持つ者が存在しない」「誰も助けられない」等々、他の金融資産口座とは明らかに一線を画す危険性の高い代物です。詐欺行為も蔓延し、犯人は捕まえられず、保険商品も満足にはありません。</p><p>くれぐれもお覚悟を。若しくは失っても死なない程度の額での運用を。</p><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><h3 id="ウォレットの種類について補足"><a href="#ウォレットの種類について補足" class="headerlink" title="ウォレットの種類について補足"></a>ウォレットの種類について補足</h3><p>本文中では省きましたが、以下のようにウォレットはソフトウェアのウォレットアプリとハードウェアウォレットの他にも以下のように幾つかの種類が有ります。</p><img src="/images/20211109a/image_5.png" alt="image.png" width="792" height="302" loading="lazy"><p>※シードフレーズや秘密鍵の情報を、インターネットに接続される（され得る）領域に保存するのがホットウォレット、され得ない領域に保存するのがコールドウォレット。</p><p>「スチールウォレット」はあまり馴染みがありませんが、”steel”の名の通り金属製プレートにシードフレーズを刻印した物です。紙だと耐久性が心配と。ならいっそ庫内温度保証かつ密閉型の耐火金庫を導入した方が万が一の変形も腐食も防げるし他の貴重品も守れて良いんじゃないですかね……。</p><h3 id="シードフレーズとアドレスの成り立ちに係る技術"><a href="#シードフレーズとアドレスの成り立ちに係る技術" class="headerlink" title="シードフレーズとアドレスの成り立ちに係る技術"></a>シードフレーズとアドレスの成り立ちに係る技術</h3><p>シードフレーズ・パスフレーズ・秘密鍵・アドレスに関して更に技術面で深掘りしたい方は以下をご参照ください。</p><ul><li><a href="https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki">https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki</a></li><li><a href="https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki">https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki</a></li><li><a href="https://github.com/bitcoin/bips/blob/master/bip-0085.mediawiki">https://github.com/bitcoin/bips/blob/master/bip-0085.mediawiki</a></li></ul><h3 id="初めての方向け参考記事"><a href="#初めての方向け参考記事" class="headerlink" title="初めての方向け参考記事"></a>初めての方向け参考記事</h3><p>冒頭に挙げたキーワード自体が初耳という方に向けて、簡単にその概要と光と闇が伝わる記事を幾つかピックアップしてみました。</p><ul><li><a href="https://www.nttdata.com/jp/ja/data-insight/2021/0831/">DeFi（分散型金融）とともに描く新しい金融サービス | DATA INSIGHT | NTTデータ</a><ul><li>DeFiの特徴とその新規性、今後の可能性についてとても簡潔にまとまっています。</li></ul></li><li><a href="https://maonline.jp/articles/whats_titan_210621">1日で42億分の1に下落した仮想通貨「TITAN」とは？ - M＆A Online - M &amp; Aをもっと身近に</a><ul><li>事件の直前までは多数の参加者に「現代の夢の錬金術」と熱狂的に持ち上げられながら、犯罪や事故・天災に遭ったわけでもなくただその仕組み故に破綻して歴史的な暴落ぶりを披露したDeFiプロジェクト。皆さんは自分のウォレットに入っている通貨の価値と流通可能なボリュームの裏付けが何であるか、説明できますか？</li></ul></li><li><a href="https://jp.techcrunch.com/2021/04/26/2021-04-08-the-cult-of-cryptopunks">イーサリアムの「最古のNFTプロジェクト」CryptoPunksをめぐる驚くべき熱狂  |  TechCrunch Japan</a></li><li><a href="ttps://www.businessinsider.jp/post-241969">【NFT狂想曲】なぜ、小学3年生の夏休みの自由研究に380万円の価値がついたのか | Business Insider Japan</a></li><li><a href="https://note.com/kozo_tx/n/n21a3c2bf5bde">NFTゲーム「Axie Infinity」は破綻するのか？──”GameFiとは何か？”を考える｜KOZO Yamada｜NFTゲームの専門家｜山田耕三｜note</a><ul><li>何故今成功しているGameFiはポンジスキーム化しないのか。逆に言えば如何にポンジスキーム化しやすい（と疑われている）のかも伺える網羅的な考察です。</li></ul></li><li><a href="https://www.coindeskjapan.com/77546/">NFTゲームが生活を支える──コロナで傷むフィリピン経済の背骨 | coindesk JAPAN | コインデスク・ジャパン</a><ul><li>フィリピンではゲームの報酬で最低賃金以上の月収を叩き出し、実店舗での決済にこのゲーム内通貨を採用した例まで出ました。ちなみにその通貨の価値はこの2ヶ月間で4分の1ほどに下落しました。当のゲームプロジェクト自体は今も健在です。</li></ul></li><li><a href="https://www.bloomberg.co.jp/news/articles/2021-09-07/QZ1HM5T1UM0Y01">エルサルバドルの「実験」に世界が注目－ビットコインを法定通貨化 - Bloomberg</a></li></ul><p><a href="/articles/20211027a/">秋のブログ週間</a>連載の9日目でした。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Security/">Security</category>
      
      
      <category domain="https://future-architect.github.io/tags/FinTech/">FinTech</category>
      
      <category domain="https://future-architect.github.io/tags/%E4%BB%AE%E6%83%B3%E9%80%9A%E8%B2%A8/">仮想通貨</category>
      
      
      <comments>https://future-architect.github.io/articles/20211109a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>PlantUMLのテーマ（思わぬ展開）</title>
      <link>https://future-architect.github.io/articles/20211108a/</link>
      <guid>https://future-architect.github.io/articles/20211108a/</guid>
      <pubDate>Sun, 07 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20211108a/example_vibrant.png&quot; alt=&quot;example_vibrant.png&quot; width=&quot;641&quot; height=&quot;424&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20211108a/example_vibrant.png" alt="example_vibrant.png" width="641" height="424" loading="lazy"><p><a href="/articles/20211027a/">秋のブログ週間</a>連載の7本目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>PlantUMLで使えるテーマについてのご紹介です。</p><p>以前、<a href="/articles/20200203/">チームで機能設計するためのPlantUML標準化</a>の記事でも書かせていただきましたが、PlantUMLのデフォルトカラーって少しドライですよね。</p><img src="/images/20211108a/image.png" alt="image.png" width="253" height="448" loading="lazy"><p>色の好みは人それぞれで、あれはあれでカッコよさはありますが、複雑な図は少しでも可愛く描きたい・楽しく見たいものです。</p><p>この記事ではPlantUMLのテーマについて、いくつかのオプションを紹介していきます。「PlantUMLの色を変えてみたい！」という方は是非ご活用いただければ嬉しいです。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>PlantUMLでは、skinparamを利用して図のビジュアル各要素を定義しますが、「テーマ」はskinparamの集合体です</li><li>この記事ではテーマの作り方や、各運用方法等については触れません</li><li>この記事で紹介するオリジナルテーマはシーケンス図のために作られたものです</li></ul><h2 id="オリジナルテーマ"><a href="#オリジナルテーマ" class="headerlink" title="オリジナルテーマ"></a>オリジナルテーマ</h2><img src="/images/20211108a/image_2.png" alt="image.png" width="563" height="460" loading="lazy"><p>出典：<a href="https://future-architect.github.io/articles/20200203/">Future Tech Blog</a></p><p>以前投稿した<a href="/articles/20200203/">「チームで機能設計するためのPlantUML標準化」の記事</a>では、ユーザが自分で設定できるカラーパレットを２セット紹介しました。嬉しいことに、記事公開後、社内外問わず、沢山の方にこれらのカラーセットを活用してもらうようになりした。</p><p>その後、より多くの方に簡単に使ってもらおうと、これらのパレットをテーマ「toy」と「vibrant」として、フューチャーリポジトリに公開しました。ユーザはテーマを自分で定義する必要がなく、以下の一行をファイルに含めるだけでテーマが読み込まれます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!include https://raw.githubusercontent.com/future-architect/puml-themes/master/themes/puml-theme-toy.puml</span><br></pre></td></tr></table></figure><h3 id="toyの使用例"><a href="#toyの使用例" class="headerlink" title="toyの使用例"></a>toyの使用例</h3><figure class="highlight sql"><figcaption><span>toy_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@startuml</span></span><br><span class="line"><span class="operator">!</span>include https:<span class="operator">/</span><span class="operator">/</span>raw.githubusercontent.com<span class="operator">/</span>future<span class="operator">-</span>architect<span class="operator">/</span>puml<span class="operator">-</span>themes<span class="operator">/</span>master<span class="operator">/</span>themes<span class="operator">/</span>puml<span class="operator">-</span>theme<span class="operator">-</span>toy.puml</span><br><span class="line"></span><br><span class="line">participant Participant <span class="keyword">as</span> Foo</span><br><span class="line">note <span class="keyword">over</span> Foo: Event</span><br><span class="line">actor       Actor       <span class="keyword">as</span> Foo1</span><br><span class="line">boundary    Boundary    <span class="keyword">as</span> Foo2</span><br><span class="line">control     Control     <span class="keyword">as</span> Foo3</span><br><span class="line">entity      Entity      <span class="keyword">as</span> Foo4</span><br><span class="line">database    Database    <span class="keyword">as</span> Foo5</span><br><span class="line">collections Collections <span class="keyword">as</span> Foo6</span><br><span class="line">queue       Queue       <span class="keyword">as</span> Foo7</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo1 : <span class="keyword">To</span> actor</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo2 : <span class="keyword">To</span> boundary</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo3 : <span class="keyword">To</span> control</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo4 : <span class="keyword">To</span> entity</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo5 : <span class="keyword">To</span> database</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo6 : <span class="keyword">To</span> collections</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo7: <span class="keyword">To</span> queue</span><br><span class="line"></span><br><span class="line"><span class="variable">@enduml</span></span><br></pre></td></tr></table></figure><img src="/images/20211108a/example_toy.png" alt="example_toy.png" width="641" height="424" loading="lazy"><h3 id="vibrantの使用例"><a href="#vibrantの使用例" class="headerlink" title="vibrantの使用例"></a>vibrantの使用例</h3><figure class="highlight sql"><figcaption><span>vibrant_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@startuml</span></span><br><span class="line"><span class="operator">!</span>include https:<span class="operator">/</span><span class="operator">/</span>raw.githubusercontent.com<span class="operator">/</span>future<span class="operator">-</span>architect<span class="operator">/</span>puml<span class="operator">-</span>themes<span class="operator">/</span>master<span class="operator">/</span>themes<span class="operator">/</span>puml<span class="operator">-</span>theme<span class="operator">-</span>vibrant.puml</span><br><span class="line"></span><br><span class="line">participant Participant <span class="keyword">as</span> Foo</span><br><span class="line">note <span class="keyword">over</span> Foo: Event</span><br><span class="line">actor       Actor       <span class="keyword">as</span> Foo1</span><br><span class="line">boundary    Boundary    <span class="keyword">as</span> Foo2</span><br><span class="line">control     Control     <span class="keyword">as</span> Foo3</span><br><span class="line">entity      Entity      <span class="keyword">as</span> Foo4</span><br><span class="line">database    Database    <span class="keyword">as</span> Foo5</span><br><span class="line">collections Collections <span class="keyword">as</span> Foo6</span><br><span class="line">queue       Queue       <span class="keyword">as</span> Foo7</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo1 : <span class="keyword">To</span> actor</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo2 : <span class="keyword">To</span> boundary</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo3 : <span class="keyword">To</span> control</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo4 : <span class="keyword">To</span> entity</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo5 : <span class="keyword">To</span> database</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo6 : <span class="keyword">To</span> collections</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo7: <span class="keyword">To</span> queue</span><br><span class="line"></span><br><span class="line"><span class="variable">@enduml</span></span><br></pre></td></tr></table></figure><img src="/images/20211108a/example_vibrant_2.png" alt="example_vibrant.png" width="641" height="424" loading="lazy"><p>フューチャーリポジトリに公開されているテーマは、フューチャー社内のプロジェクトでも使われており、日々のブラッシュアップはもちろん（最近はアクセシビリティを考慮したコントラスト比やボーダーの微調整等）、外部からのコントリビューションも大歓迎です！（先日、「queueの定義がないぞ！」と<a href="https://github.com/future-architect/puml-themes/pull/5">フランスからプルリクエスト</a>が上がりました）</p><h2 id="PlantUML公式テーマ"><a href="#PlantUML公式テーマ" class="headerlink" title="PlantUML公式テーマ"></a>PlantUML公式テーマ</h2><img src="/images/20211108a/image_3.png" alt="image.png" width="1085" height="452" loading="lazy"><p>出典：<a href="https://plantuml.com/en/">PlantUML</a></p><p>そもそも、テーマ自体、PlantUMLにとっては比較的新しい概念のようです。</p><p>最近、PlantUMLはいくつかの公式テーマをコアライブラリにて提供しているようで、これらのテーマはライブラリに含まれているため、追加のインストールなし、外部接続なしで、「!theme」ディレクティブだけで使用できるようになっています。</p><p>ちなみに、現在公式で提供しているテーマはPlantUMLの<a href="https://plantuml.com/en/theme">公式ホームページ</a>で紹介されています↓</p><img src="/images/20211108a/image_4.png" alt="image.png" width="639" height="785" loading="lazy"><p>ん？</p><img src="/images/20211108a/image_5.png" alt="image.png" width="225" height="375" loading="lazy"><p>・・・</p><img src="/images/20211108a/image_6.png" alt="image.png" width="321" height="242" loading="lazy"><h2 id="フューチャーオリジナルテーマがPlantUML公式テーマに！"><a href="#フューチャーオリジナルテーマがPlantUML公式テーマに！" class="headerlink" title="フューチャーオリジナルテーマがPlantUML公式テーマに！"></a>フューチャーオリジナルテーマがPlantUML公式テーマに！</h2><p>なんと、フューチャーリポジトリで公開したテーマ「toy」と「vibrant」がPlantUMLの公式テーマとして採用されました！<br>ということで、以下のように「toy」と「vibrant」がPlantUML内部のライブラリで使えるようになっています。</p><figure class="highlight plaintext"><figcaption><span>toyテーマの利用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!theme toy</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>vibrantテーマの利用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!theme vibrant</span><br></pre></td></tr></table></figure><p>さらに使いやすくなりました。これは嬉しいですね。</p><p>なお、今後のフューチャーレポジトリへのアップデートは公式ライブラリにも反映できるように運用していく予定ですが、多少の時差はあるので「常に最新の状態が良い」という方は「!include」でフューチャーレポジトリより読み込むのが良いかもしれません。<br>また、今後も新しいテーマを追加していきたいので、これらに関しても、もちろんフューチャーレポジトリの方で先行公開されます。</p><p>ということで、さっそく…</p><h2 id="新テーマ「mars」"><a href="#新テーマ「mars」" class="headerlink" title="新テーマ「mars」"></a>新テーマ「mars」</h2><p>「toy」と「vibrant」が公式テーマになったことを記念して、３つ目のオリジナルテーマ「mars」をフューチャーレポジトリにて公開しました。しかも、こちらもPlantUMLの次のリリースで公式テーマになる予定です！</p><h3 id="marsのサンプル"><a href="#marsのサンプル" class="headerlink" title="marsのサンプル"></a>marsのサンプル</h3><img src="/images/20211108a/example_mars.png" alt="example_mars.png" width="641" height="424" loading="lazy"><figure class="highlight sql"><figcaption><span>mars_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@startuml</span></span><br><span class="line"><span class="operator">!</span>include https:<span class="operator">/</span><span class="operator">/</span>raw.githubusercontent.com<span class="operator">/</span>future<span class="operator">-</span>architect<span class="operator">/</span>puml<span class="operator">-</span>themes<span class="operator">/</span>master<span class="operator">/</span>themes<span class="operator">/</span>puml<span class="operator">-</span>theme<span class="operator">-</span>mars.puml</span><br><span class="line"></span><br><span class="line">participant Participant <span class="keyword">as</span> Foo</span><br><span class="line">note <span class="keyword">over</span> Foo: Event</span><br><span class="line">actor       Actor       <span class="keyword">as</span> Foo1</span><br><span class="line">boundary    Boundary    <span class="keyword">as</span> Foo2</span><br><span class="line">control     Control     <span class="keyword">as</span> Foo3</span><br><span class="line">entity      Entity      <span class="keyword">as</span> Foo4</span><br><span class="line">database    Database    <span class="keyword">as</span> Foo5</span><br><span class="line">collections Collections <span class="keyword">as</span> Foo6</span><br><span class="line">queue       Queue       <span class="keyword">as</span> Foo7</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo1 : <span class="keyword">To</span> actor</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo2 : <span class="keyword">To</span> boundary</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo3 : <span class="keyword">To</span> control</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo4 : <span class="keyword">To</span> entity</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo5 : <span class="keyword">To</span> database</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo6 : <span class="keyword">To</span> collections</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo7: <span class="keyword">To</span> queue</span><br><span class="line"></span><br><span class="line"><span class="variable">@enduml</span></span><br></pre></td></tr></table></figure><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>今後引き続きテーマを追加したり、使いやすくアップデートいきますので、ぜひご活用ください！</p><p>詳細はフューチャーのGitHubリポジトリまで：<a href="https://github.com/future-architect/puml-themes">https://github.com/future-architect/puml-themes</a></p><p><a href="/articles/20211027a/">秋のブログ週間</a>連載の7本目でした。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Design/">Design</category>
      
      
      <category domain="https://future-architect.github.io/tags/OSS/">OSS</category>
      
      <category domain="https://future-architect.github.io/tags/PlantUML/">PlantUML</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/">設計</category>
      
      
      <comments>https://future-architect.github.io/articles/20211108a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>極小LinuxマシンでSwiftを動かそうとしてみた</title>
      <link>https://future-architect.github.io/articles/20211105a/</link>
      <guid>https://future-architect.github.io/articles/20211105a/</guid>
      <pubDate>Thu, 04 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20211105a/Image_20211102_160635.jpeg&quot; alt=&quot;&quot; width=&quot;1108&quot; height=&quot;663&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20211105a/Image_20211102_160635.jpeg" alt="" width="1108" height="663" loading="lazy"><p><a href="/articles/20211027a/">秋のブログ週間</a>連載の7本目です。</p><h2 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h2><p>今回ターゲットとした極小Linuxマシンは、<a href="https://www.switch-science.com/catalog/7160/">M5Stack UnitV2</a>になります。</p><p>こちらのマシンは、ARM Cortex-A7デュアルコア1.2GHz、128MBメモリ、512MB内蔵フラッシュ、microSDスロット、Full HDカメラ、Wi-Fi、冷却ファンを搭載し、OSはLinuxがプリインストールされていますが、非常にコンパクトで1万円弱で購入することができます。</p><p><a href="https://docs.m5stack.com/en/quick_start/unitv2/jupyter_notebook">Python、Jupyter Notebookはプリインストールされている</a>ので、あえて、他の手段を試す必然性は全くないのですが、Swiftのインストールを試してみました。</p><h2 id="Swiftのインストール手順"><a href="#Swiftのインストール手順" class="headerlink" title="Swiftのインストール手順"></a>Swiftのインストール手順</h2><p>まずは、<a href="https://github.com/uraimo/buildSwiftOnARM">buildSwiftOn ARM</a>を見つけたのですが、swiftコマンドのサイズがほぼメインメモリの容量と同じ、かつ、導入時のサイズが約650MBのため、microSDをマウントしたり色々ファイルシステムをいじらないといけないので断念。</p><p>そこで、ターゲット上でビルド環境を整えるのは諦め、クロスコンパイル環境を探すことに。<br><a href="https://github.com/CSCIX65G/SwiftCrossCompilers">Swift Cross Compilation Toolchains</a>を見つけるも、<a href="https://github.com/CSCIX65G/SwiftCrossCompilers/releases/tag/5.3.3">5.3.3</a>からはARM32のサポートがなくなると。。</p><p>そもそも、Swiftは困難なようなので代わりにRustの環境を調べてみる方針へ変更。</p><p>手順は、まず、rustupを開発環境であるMacへ導入。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install rustup</span><br><span class="line">brew install arm-linux-gnueabihf-binutils</span><br></pre></td></tr></table></figure><p>ビルド時にターゲットとしてarmv7-unknown-linux-gnueabihfを指定するも、エラーでうまくいかず、<a href="https://sigmaris.info/blog/2019/02/cross-compiling-rust-on-mac-os-for-an-arm-linux-router/">ここの記述</a>を参考に、ターゲットをarmv7-unknown-linux-musleabihfへ変更することでようやくビルドがエラーなく実行できるようになりました。</p><figure class="highlight sh"><figcaption><span>.cargo/config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[target.armv7-unknown-linux-musleabihf]</span><br><span class="line">linker = <span class="string">&quot;arm-linux-gnueabihf-ld&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rustup target add armv7-unknown-linux-musleabihf</span><br><span class="line">cargo init</span><br><span class="line">cargo build --target armv7-unknown-linux-musleabihf</span><br></pre></td></tr></table></figure><p>環境は出来上がったので次回はRustでカメラを使ったアプリを組みたいと思います。</p><p><a href="/articles/20211027a/">秋のブログ週間</a>連載の7本目でした。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/IoT/">IoT</category>
      
      
      <category domain="https://future-architect.github.io/tags/Rust/">Rust</category>
      
      <category domain="https://future-architect.github.io/tags/UnitV2/">UnitV2</category>
      
      <category domain="https://future-architect.github.io/tags/M5stack/">M5stack</category>
      
      
      <comments>https://future-architect.github.io/articles/20211105a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Cheetah Grid を Reactから利用するためのラッパーを実装してみる</title>
      <link>https://future-architect.github.io/articles/20211104a/</link>
      <guid>https://future-architect.github.io/articles/20211104a/</guid>
      <pubDate>Wed, 03 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20211027a/&quot;&gt;秋のブログ週間&lt;/a&gt;連載の6本目です。&lt;/p&gt;
&lt;p&gt;Futureには&lt;a href=&quot;https://future-architect.github.io/cheetah-grid/#/&quot;&gt;Cheetah</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20211027a/">秋のブログ週間</a>連載の6本目です。</p><p>Futureには<a href="https://future-architect.github.io/cheetah-grid/#/">Cheetah Grid</a>という最速のウェブフロントエンド用のテーブルコンポーネントがあります。会社のお仕事コードは基本的にVue.jsが採用されることが多く、Cheetah GridもVue.js版のコンポーネントも提供されています。</p><p>僕はなぜかReact案件が多くて慣れていることもあり、ちょっとしたコードもReactで書きたいと思っています。ちょっとしたツールを実装する上でかっこよくて性能が良いテーブルコンポーネントも欲しいのでCheetah GridのReact版が欲しいなとずっと思っていたので、今回作ってみました。半分お仕事で半分趣味みたいなコーディングですが、趣味の素振り的な気持ちで取り組みました。本エントリーも技術要素半分、スキルアップの心構え半分な内容でお届けします。</p><p>↓CheetahGridの各種カラム形式に対応したバージョンが公開中です。</p><img src="/images/20211104a/columns.png" alt="columns.png" width="1200" height="334" loading="lazy"><h1 id="今時のフロントエンドと、巨大コンポーネントのギャップ"><a href="#今時のフロントエンドと、巨大コンポーネントのギャップ" class="headerlink" title="今時のフロントエンドと、巨大コンポーネントのギャップ"></a>今時のフロントエンドと、巨大コンポーネントのギャップ</h1><p>JavaScript界隈では、いくつかの大きなコンポーネント部品が作られてきました。主に、表コンポーネントとかリッテキストエディタコンポーネントとかです。印象としてはjQueryの部品としてリリースされたり、ピュアJSなライブラリとして開発されて、その後React/Vue/Angular対応を果たしている、みたいな感じがあります。</p><p>たいてい、このようなライブラリの生のAPIは、マウントする先のDOM要素と設定を行うための大量のJSONを食わせると、そのコンポーネントのオブジェクトが生成され、そのオブジェクトのメソッドを通じて、いろいろ操作を行ったりできるような設計がされている印象があります。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JS界隈の巨大コンポーネントライブラリのAPIのイメージ</span></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> BigComponent(<span class="built_in">document</span>.querySelector(<span class="string">&quot;#root&quot;</span>), &#123;なにやら巨大な設定<span class="built_in">JSON</span>&#125;)</span><br><span class="line"></span><br><span class="line">&lt;button onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  instance.reset();</span><br><span class="line">&#125;) &gt;リセット&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>一方で、今時のフロントエンドは、冪等なAPIを指向しており、そのようなライブラリをそのまま使おうとすると、ギャップを吸収しなければなりません。コンポーネントの形式に無理やりした結果、インスタンスへの指令もプロパティとして渡すようなライブラリを見かけたことがあります。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;BigComponent config=&#123;&#123;巨大な設定<span class="built_in">JSON</span>&#125;&#125; update=&#123;更新情報を入れる&#125; /&gt;</span><br></pre></td></tr></table></figure><p>これはコンポーネント内部で、初期値のJSONを覚えておいた上で、コンポーネント側にその差分情報を入れる必要があるということで、新旧両方の情報を管理しなければなりません。また、ウェブサイトの画面の8割を覆うような部品で複雑な設定をJSONだけでやるというのも、違和感がありました。AngularでもReactでもVueでも、それぞれの作法があるのに、その作法にのっからずに、独自の方法を無理やり使わせているような、インピーダンスミスマッチを感じました。</p><p>せっかく作るのであれば、それを乗っけるフレームワーク（ここではReact）のお作法に従ったコンポーネントを作って行こうと思います。なお、Vue.js版はきちんと、カラム定義もVueのテンプレートのお作法で定義できるようになっており、React版も同じ作戦でいきたいな、と思っていました。複雑で機能が大きい部品は、やはりソースコード上の見た目も大きくなって欲しい。</p><figure class="highlight html"><figcaption><span>vuejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c-grid</span> <span class="attr">:data</span>=<span class="string">&quot;records&quot;</span> <span class="attr">:frozen-col-count</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">c-grid-check-column</span> <span class="attr">field</span>=<span class="string">&quot;check&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">c-grid-column</span> <span class="attr">field</span>=<span class="string">&quot;personid&quot;</span> <span class="attr">width</span>= <span class="string">&quot;85&quot;</span>&gt;</span></span><br><span class="line">    ID</span><br><span class="line">  <span class="tag">&lt;/<span class="name">c-grid-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">c-grid-column-group</span> <span class="attr">caption</span>=<span class="string">&quot;Name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c-grid-input-column</span> <span class="attr">field</span>=<span class="string">&quot;fname&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20%&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;150&quot;</span>&gt;</span></span><br><span class="line">      First Name</span><br><span class="line">    <span class="tag">&lt;/<span class="name">c-grid-input-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c-grid-input-column</span> <span class="attr">field</span>=<span class="string">&quot;lname&quot;</span> <span class="attr">width</span>= <span class="string">&quot;20%&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;150&quot;</span>&gt;</span></span><br><span class="line">      Last Name</span><br><span class="line">    <span class="tag">&lt;/<span class="name">c-grid-input-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">c-grid-column-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c-grid</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="最初の作戦"><a href="#最初の作戦" class="headerlink" title="最初の作戦"></a>最初の作戦</h1><p>このように定義できるようにしたいという目標を立てました。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;CheetahGrid&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Column</span> <span class="attr">field</span>=<span class="string">&quot;name&quot;</span> <span class="attr">width</span>=<span class="string">&#123;100&#125;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">Column</span>&gt;</span></span></span><br><span class="line">&lt;/CheetahGrid&gt;</span><br></pre></td></tr></table></figure><p>親コンポーネントで子供コンポーネントの情報を習得する方法としてまず考えたのが、子供のカラムのコンポーネントでCheetahGridの定義に食わせられるJSONを作り、data属性に入れておく方法です。最終的にこのコンポーネント群で生成されたJSON片を親が集めてCheetah Gridのコンストラクタに渡します。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Column</span>(<span class="params">props: ColumnProps</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> configJson = formatProps(props);</span><br><span class="line">   <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;visibility:</span> <span class="attr">hidden</span>&#125;&#125; <span class="attr">data-cg</span>=<span class="string">&#123;encodeURIEncoding(JSON.stringify(configJson)&#125;)</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>これを<code>&lt;CheetahGrid&gt;</code>の<code>useEffect()</code>内で実際のタグ情報を取得してきて取り出せばうまくいきました。もう消してしまったので、うろ覚えですが、こんな感じだったかと。本当の最初はfast-xml-parserを使ってパースしたりとか、heも使ったりしていた記憶。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheetahGrid</span>(<span class="params">props: CGProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ref = useRef();</span><br><span class="line">  <span class="keyword">const</span> [cg, setCg] = useState();</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> header = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> dom <span class="keyword">of</span> <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;[data-cg]&quot;</span>)) &#123;</span><br><span class="line">        header.push(<span class="built_in">decodeURIComponent</span>(dom.attribute(<span class="string">&quot;data-cg&quot;</span>)));</span><br><span class="line">      &#125;</span><br><span class="line">      setCg(<span class="keyword">new</span> cheetahGrid.ListGrid(ref.current, &#123; header &#125;));</span><br><span class="line"></span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span>&#123;chidlren&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最初の表は出力できたのですが、コールバック関数とかシリアライズできない情報が登場してこの方法はやめました。</p><h1 id="次の作戦"><a href="#次の作戦" class="headerlink" title="次の作戦"></a>次の作戦</h1><p>つぎはContextを使いました。子供のコンポーネントではコンテキストにJSONを渡し、それを親が集約し使う作戦。親はContextでheaderというオブジェクトを渡し、それにあらかじめユニークにプロパティに渡したid（本当はkeyだったら違和感がなかったが、Reactのフレームワークで予約されている名前なので利用できない）を使って書き込むというもの。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Column</span>(<span class="params">props: ColumnProps</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; header &#125; = useContext(CGContext);</span><br><span class="line">   <span class="keyword">const</span> configJson = formatProps(props);</span><br><span class="line">   header[props.id] = configJson</span><br><span class="line">   <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>オブジェクトをmutableに使っているのがいまいちだし、idを設定しなければならないので使う手間も増えます。なお、mutableに使わずに<code>useState()</code>で作ったオブジェクトと、set関数を両方渡す方法も試してみました。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheetahGrid</span>(<span class="params">props: CGProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ref = useRef();</span><br><span class="line">  <span class="keyword">const</span> [header, setHeader] = useState&lt;HeaderDef&gt;(&#123;</span><br><span class="line">    <span class="attr">columns</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">columnId</span>: [<span class="number">0</span>],</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> value = useMemo(</span><br><span class="line">    <span class="function">() =&gt;</span> (&#123; header, setHeader &#125;),</span><br><span class="line">    [version]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &lt;CGContext.Provider value=&#123;value&#125;&gt;&lt;div ref=&#123;ref&#125; /&gt;&lt;CGContext.Provider&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>しかし、子供のコンポーネントにはすべて同じタイミングのheaderが渡されるため、 <code>&#123; ...header, [id]: 自分の定義 &#125;</code>とやったところで、最後のコンポーネントの情報以外が消えてしまうという問題があり、行儀の良い方法は使えませんでした。行儀悪いし、余計な属性が増えてしまう。</p><h1 id="最後の作戦"><a href="#最後の作戦" class="headerlink" title="最後の作戦"></a>最後の作戦</h1><p>子供のコンポーネントで情報を作って取り出す方法にチャレンジしてましたが、<code>props.children</code>には、コンポーネントに渡されたプロパティ情報がすべて格納されています。子供コンポーネントではなにもせずに、親のテーブルコンポーネントがすべて処理してしまえばよさそうです。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// コンポーネントごとの処理の関数をmap化しておく</span></span><br><span class="line"><span class="keyword">const</span> childComponentTypes = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;</span><br><span class="line">  string | JSXElementConstructor,</span><br><span class="line">  &#123; <span class="attr">name</span>: string; processFunc: <span class="function">(<span class="params">p: any</span>) =&gt;</span> any &#125;</span><br><span class="line">&gt;([</span><br><span class="line">  [Column, &#123; <span class="attr">name</span>: <span class="string">&quot;Column&quot;</span>, <span class="attr">processFunc</span>: processColumnProps &#125;],</span><br><span class="line">  [NumberColumn, &#123; <span class="attr">name</span>: <span class="string">&quot;Column&quot;</span>, <span class="attr">processFunc</span>: processNumberColumnProps &#125;],</span><br><span class="line">  [CheckColumn, &#123; <span class="attr">name</span>: <span class="string">&quot;Column&quot;</span>, <span class="attr">processFunc</span>: processCheckColumnProps &#125;],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 変換</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">childrenToHeader</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  children: ReactElement | ReactElement[]</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Children.map(children, <span class="function"><span class="keyword">function</span> <span class="title">makeHeaderDef</span>(<span class="params">child</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> childComponentType = childComponentTypes.get(child.type);</span><br><span class="line">    <span class="keyword">if</span> (childComponentType) &#123;</span><br><span class="line">      <span class="keyword">return</span> childComponentType.processFunc(child.props);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">caption</span>: <span class="string">&quot;invalid column type&quot;</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 親のコンポーネントだけで処理する</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheetahGrid</span>(<span class="params">props: CGProps</span>) </span>&#123;</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> opts &#123;</span><br><span class="line">      <span class="attr">header</span>: childrenToHeader(props.children)</span><br><span class="line">    &#125;;</span><br><span class="line">    grid = <span class="keyword">new</span> ListGrid&lt;T&gt;(opt);</span><br><span class="line">    :</span><br><span class="line">  &#125;, []);</span><br><span class="line">  :</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一部をコンポーネント化しておくとかはできませんが（単なる関数に切り出しはいける）、コールバック関数などもきちんと扱えるようになったし、余計な属性も不要だし、文字列化したのを取り出してデコードという余計な処理もなくなりました。</p><p>なお、このコードはかなり簡略版で、実際はもっと型情報をつけているし、属性の変更時の更新とかにも非対応です。属性が変わった場合には、refしていたDOM要素が毎回クリアされてCheetahGridのインスタンスが消え去ってしまうというのが関数コンポーネントでは発生し、仕方なくここだけクラスコンポーネントにしたりしました（<code>shouldComponentUpdate()</code>でfalseを返せば再生成は回避可能）が、おおむねこの方針の延長で一通り実装しました。</p><h1 id="インスタンスアクセス"><a href="#インスタンスアクセス" class="headerlink" title="インスタンスアクセス"></a>インスタンスアクセス</h1><p>巨大コンポーネント系のラッパーで違和感のあったインスタンスアクセスですが、hooksを使ってプロキシオブジェクトを取り出すようにしました。まだメソッドとか属性はあんまり実装していませんが、今時のReactっぽい感じにはなったかと思います。monaco editorとかよりも個人的にはイケてると思います。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [instance, instanceRef] = useCheetahGridInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 現在の選択範囲の情報を取得</span></span><br><span class="line"><span class="keyword">const</span> showSelection = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">    alert(</span><br><span class="line">      <span class="string">`Select: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(</span></span></span><br><span class="line"><span class="subst"><span class="string">        instance.selection.select</span></span></span><br><span class="line"><span class="subst"><span class="string">      )&#125;</span>, Range: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(instance.selection.range)&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [instance]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">CheetahGrid</span> <span class="attr">instance</span>=<span class="string">&#123;instanceRef&#125;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">CheetahGrid</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>めでたしめでたし。これで目標はほぼ達成しました。最終的にCheetah Gridのほとんどの機能がReact上で実現できるようになりました。</p><h1 id="趣味的開発で心掛けていること"><a href="#趣味的開発で心掛けていること" class="headerlink" title="趣味的開発で心掛けていること"></a>趣味的開発で心掛けていること</h1><p>お仕事のコードだと、たいてい締めきりがありますし、ある程度実現方法がはっきりしている堅い方針でいくことが多いと思います。仕事コードであれば、とりあえずCheetah Gridの入力のJSONを外から渡す方式にしていたと思います。</p><p>趣味的な開発の場合は、まずは実現方法が現時点で分かっていない、ちょっと高い目標を掲げるようにしています。今回は「Reactユーザーが違和感を感じないAPIの実現」でした。最初に思いついた方法とかはことごとくダメで、何度もスクラップアンドビルドしています。今回ブログで書いたのは2回だけですが、大小何度もスクラップにしています。むしろ、Cheetah GridのReactラッパー自体、3度目のチャレンジかな？ スクラップしたまま戻ってこれなくなったこともありました。</p><p>今回はたまたま成功しましたが、まあ成功しなくてもいいや、という気持ちで取り組んでいます。最初に建てた目標が達成できなければ、自分でも使う気も起きないですしね。</p><p>どんなにチュートリアルを何本もやっても、初心者な力しかつかないな、と思っています。成功したかどうかに関わらず、悩めば悩んだ分だけ力になります。この本気の素振りは、使う技術の細かいところまで追いかける動機になりますし、自信をもって「わかる」という実感が得られます。</p><p>なお、素振りだからといって業務外である必要はないです。土日の生活を犠牲にして勉強しないと！ということは全然ないと思います。会社がOSS開発とか支援してくれて、会社のリポジトリに入れるなどすれば業務時間カウントとかもできるんじゃないかと思います。このあたり、80:20ルールだったり、職務開発の規定だったり、R&amp;D開発の管理だったり、会社によってルールなどもだいぶ違うところですので、そこを確認してください。</p><p>なお、やってはいけないこのは業務でしか使わないコードを趣味時間に書くことです。これは労働基準法違反ですね。サービス残業。業務で使うなら、きちんと労働時間内でやらなければなりません。今時は、オフの時間の開発も職務開発扱いになって、会社の資産にする、みたいなルールの会社も多いと思いますので要注意です。外資系とかはほぼそうじゃないですかね。</p><p>フューチャーの場合は、<a href="/articles/20201107/">OSS開発やっていこうぜ</a>、という話もありますし、技術ブログも業務時間に書けますし、技術ブログの題材ならその一環で良いだろう、ということでそっちの業務時間としてやっちゃうのも手ですよね。そう、いま皆さんが読んでいるこのエントリーです。</p><p><a href="/articles/20211027a/">秋のブログ週間</a>連載の6本目でした。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/OSS/">OSS</category>
      
      <category domain="https://future-architect.github.io/tags/TypeScript/">TypeScript</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/">フロントエンド</category>
      
      <category domain="https://future-architect.github.io/tags/React/">React</category>
      
      <category domain="https://future-architect.github.io/tags/CheetahGrid/">CheetahGrid</category>
      
      
      <comments>https://future-architect.github.io/articles/20211104a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>マルチクラウドを考えてみた</title>
      <link>https://future-architect.github.io/articles/20211102a/</link>
      <guid>https://future-architect.github.io/articles/20211102a/</guid>
      <pubDate>Mon, 01 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20211027a/&quot;&gt;秋のブログ週間2021&lt;/a&gt;の5日目の記事です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20211027a/">秋のブログ週間2021</a>の5日目の記事です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DX チームのゆるふわエンジニアの前原です。</p><p>私は、企業へのクラウドのアーキテクチャ方針を考えたり、デザイン、構築などの仕事を主にしています。その際によくマルチクラウドの導入をしたい！という要望を最近受けることが多くなった気がします。そこで本記事では、マルチクラウドを導入するときに何を考えなきゃいけないのかを軽くまとめてみましたので少しでも誰かのお役に立てれば幸いです。</p><h1 id="マルチxxについて"><a href="#マルチxxについて" class="headerlink" title="マルチxxについて"></a>マルチxxについて</h1><p>サービスを稼働させる環境を構築する際に、IPA が提供している<a href="https://www.ipa.go.jp/sec/softwareengineering/std/ent03-b.html">非機能要求グレード</a>を参考にするかと思います。</p><p>その中にある可用性をどこまで高めるかといった点でマルチxx構成にするかどうかを判断します。その際にキーワードとなるのが、マルチAZ<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>、マルチリージョン、マルチクラウド構成です。AZ は、AWS が表現しており、GCP ではゾーンです。</p><h2 id="マルチAZ-構成"><a href="#マルチAZ-構成" class="headerlink" title="マルチAZ 構成"></a>マルチAZ 構成</h2><p>マルチAZ 構成は、複数のAZ をまたいでシステムの冗長化を図ることができます。</p><p>そのため、シングルAZ よりも可用性の高いシステムを構築することができます。</p><h2 id="マルチリージョン構成"><a href="#マルチリージョン構成" class="headerlink" title="マルチリージョン構成"></a>マルチリージョン構成</h2><p>クラウドのリージョン障害が仮に発生した場合はどうでしょう。</p><p>この場合、マルチAZ 構成をとっていたとしてもサービスを継続させるのが困難なケースが発生する場合もあります。<br>そこで複数のリージョンをまたいだマルチリージョン構成です。これによりリージョン障害が発生してもサービスを継続させることができるようになります（実際は、この構成を作るのはとても大変です）</p><p>ちなみにですが、マルチリージョンは、DR 対策だけでなくユーザエクスペリエンスの向上も図っているケース（グローバル展開しているサービスなど）もあります。</p><h2 id="マルチクラウド構成"><a href="#マルチクラウド構成" class="headerlink" title="マルチクラウド構成"></a>マルチクラウド構成</h2><p>マルチクラウド構成は、複数のクラウドを利用する構成です。</p><p>この構成を実現するのは、マルチリージョンよりも大変です。それでもなぜマルチクラウド構成を選択するのか、どの辺が難しいのかといった点を書いていきます。</p><p>てことで、本題に入っていきます！</p><h1 id="マルチクラウドをなぜ選択するのか"><a href="#マルチクラウドをなぜ選択するのか" class="headerlink" title="マルチクラウドをなぜ選択するのか"></a>マルチクラウドをなぜ選択するのか</h1><p>よくマルチクラウド構成にすることでベンダーロックインの回避や可用性の向上を図れるということから選択する企業さんもいるかと思います。また、シングルクラウドのみでは要件を満たすことができないという理由から局所的に利用するケースもあります。</p><p>このように様々な理由から企業は、マルチクラウド導入の検討を進めています。</p><h1 id="マルチクラウドのメリット・デメリット"><a href="#マルチクラウドのメリット・デメリット" class="headerlink" title="マルチクラウドのメリット・デメリット"></a>マルチクラウドのメリット・デメリット</h1><p>マルチクラウドのメリット・デメリットについてまとめてます。</p><h2 id="メリット"><a href="#メリット" class="headerlink" title="メリット"></a>メリット</h2><ul><li><strong>信頼性/可用性の向上</strong>: 仮に一つのクラウド障害が発生した場合でも他のクラウドでサービスを継続させることが可能となります。</li><li><strong>ベンダーロックインの回避</strong>: クラウドベンダに依存することなく、将来的なインフラの移行方針などが立てやすくなります。</li></ul><h2 id="デメリット"><a href="#デメリット" class="headerlink" title="デメリット"></a>デメリット</h2><ul><li><strong>アーキテクチャの複雑性が増す</strong>: マルチクラウド間のデータ連携など複雑な構成になります。</li><li><strong>コスト増加</strong>: 運用コストやインフラコストが増加するとともに複数クラウドを運用するため、学習コストが増加します。</li><li><strong>セキュリティリスクが上がる</strong>: 複数のクラウドを併用して管理するため、セキュリティ基準を満たすべき対象が増加し、セキュリティリスクが上がリます。</li></ul><h1 id="マルチクラウドを実現するために考えるべきこと"><a href="#マルチクラウドを実現するために考えるべきこと" class="headerlink" title="マルチクラウドを実現するために考えるべきこと"></a>マルチクラウドを実現するために考えるべきこと</h1><p>マルチクラウドを実現するためのアーキテクチャパターンから何を気にすべきかをまとめてみます。<br>ここでは2つの観点でまとめていますが、実際はもっと色々考える必要があると思っています。</p><ol><li>マルチクラウドを実現するアーキテクチャパターン</li><li>コスト</li></ol><h2 id="1-マルチクラウドを実現するためのアーキテクチャパターン"><a href="#1-マルチクラウドを実現するためのアーキテクチャパターン" class="headerlink" title="1. マルチクラウドを実現するためのアーキテクチャパターン"></a>1. マルチクラウドを実現するためのアーキテクチャパターン</h2><p>マルチクラウド構成を実現するには、DBへの書き込みが発生する場合の構成をどうするかを考える必要があります。<br>例えば、AWS とGCP の2つのクラウドを利用していた場合、書き込みを同時（Mutli write pattern）にさせるのか、片側だけ書き込み（Single write pattern）とするのかを考えます（データの一貫性）</p><img src="/images/20211102a/スクリーンショット_2021-11-01_6.41.46.png" alt="スクリーンショット_2021-11-01_6.41.46.png" width="1200" height="334" loading="lazy"><ul><li><strong>Multi write pattern</strong><ul><li>インタークラウドロードバランサ（ILB）<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>によってクラウドへのリクエストを振り分ける</li><li>両方のクラウドで書き込みリクエストを受け付ける</li><li>マルチクラウドにおいてのMulti write に対応したDBaaS 環境と連携する</li><li>各クラウドとDBaaS のVPC peering で接続する</li></ul></li><li><strong>Single write pattern</strong><ul><li>ILB で書き込みリクエストは、片側のクラウドに振り分ける</li><li>読み込みリクエストは、両方のクラウドに振り分ける</li><li>データのレプリケーションは、レイテンシを意識して専用線経由で行う or クラウド間をVPN で接続する</li><li>各クラウドのDB は、Cloud SQL やRDS を利用し、インタークラウドフェールオーバを実現する</li><li>仮にマスタがダウンした場合は、インタークラウドフェールオーバ可能な構成とする</li></ul></li></ul><h3 id="Multi-write-構成を実現するための考慮点"><a href="#Multi-write-構成を実現するための考慮点" class="headerlink" title="Multi write 構成を実現するための考慮点"></a>Multi write 構成を実現するための考慮点</h3><ul><li>インタークラウドロードバランサ<ul><li>書き込み/読み込みの時や読み込みのリクエストを振り分けられること</li><li>マネージドサービスであること</li><li>SLA やリージョン分散などの考慮</li><li>仮にILB がダウンした場合の対策を用意する必要がある（例えば、DNS 切り替えでクラウドに直接アクセスさせるなど）</li><li>DNS の配置やTTL の考慮</li></ul></li><li>アプリをデプロイさせる環境<ul><li>サーバレス系のサービス利用は、学習コストとリリース方式の差異が生じるため、運用者などのスキルセットなどを考慮して選択する</li><li>k8s など汎用的に利用できるマネージドサービスを利用する方が良いと考える</li></ul></li><li>DBaaS 構成<ul><li>連携対象のクラウドに対応していること</li><li>各クラウド間をVPC peering などで接続できること（レイテンシの考慮も必要）</li><li>インタークラウドレプリケーション、フェールオーバに対応していること</li></ul></li></ul><h2 id="Single-write-構成を実現するための構成"><a href="#Single-write-構成を実現するための構成" class="headerlink" title="Single write 構成を実現するための構成"></a>Single write 構成を実現するための構成</h2><p>Single write 構成は、ILB を利用し、リクエストの振り分けをよしなに行う構成以外にもDNS を用いた構成も可能です。</p><ol><li><strong>Single write pattern</strong>: 読み込みリクエストは、両方のクラウドに振り分け、書き込みは片側とする構成</li><li><strong>Single write/read pattern</strong>: 書き込み/読み込みリクエストを片側のみにリクエストする構成</li></ol><img src="/images/20211102a/スクリーンショット_2021-11-01_7.32.06.png" alt="スクリーンショット_2021-11-01_7.32.06.png" width="1200" height="327" loading="lazy"><ul><li><strong>Single write pattern</strong>（再掲）<ul><li>ILB で書き込みリクエストは、片側のクラウドに振り分ける</li><li>読み込みリクエストは、両方のクラウドに振り分ける</li><li>データのレプリケーションは、レイテンシを意識して専用線経由で行う or クラウド間をVPN で接続する</li><li>各クラウドのDB は、Cloud SQL やRDS を利用し、インタークラウドフェールオーバを実現する</li><li>仮にマスタがダウンした場合は、インタークラウドフェールオーバ可能な構成とする</li></ul></li><li><strong>Single write/read pattern</strong><ul><li>書き込み/読み込みリクエストを片側のクラウド（プライマリ）のみに直接送信する</li><li>仮にプライマリ側のクラウドがダウンした場合は、インタークラウドフェールオーバによってダウンタイムを最小限にする</li><li>リクエストの振り分けは、DNS サーバでコントロールする</li></ul></li></ul><h3 id="Single-write-構成を実現するための考慮点"><a href="#Single-write-構成を実現するための考慮点" class="headerlink" title="Single write 構成を実現するための考慮点"></a>Single write 構成を実現するための考慮点</h3><ul><li>各クラウドのDB サーバの考慮点<ul><li>クラウド特有のKVS などのサービスの利用などはクラウド間のレプリケーション処理が難しくなるため汎用的なサービス利用を優先的に考える</li><li>各クラウドのDB 間でインタークラウドフェールオーバが実現できるかの検証が必要（レプリケーション先のDB をFQDN で指定し、切り替えが問題ないかなど）</li><li>専用線を介したレプリケーション時のレイテンシに問題ないか</li></ul></li><li>DNS サーバ構成の考慮点<ul><li>リクエストの振り分けをDNS サーバでコントロールするが、DNSサーバをどこに配置するか考慮が必要</li><li>各クラウドにDNS のサービスは存在するが、障害時に利用できなくなった場合にどのように切り替えるか</li><li>TTL の考慮</li></ul></li></ul><h2 id="2-マルチクラウド構成を実現するためのコストについて考える"><a href="#2-マルチクラウド構成を実現するためのコストについて考える" class="headerlink" title="2. マルチクラウド構成を実現するためのコストについて考える"></a>2. マルチクラウド構成を実現するためのコストについて考える</h2><p>マルチクラウド構成を実現するにはコスト観点を考慮する必要があります。</p><p>コスト観点としては、単純なクラウド利用料のコストだけでなく、設計、運用、学習コストなども含めて考えます。これらを鑑みてマルチクラウド構成とするのかシングルクラウド構成にするかを考えると良いと思います。</p><div class="scroll"><table><thead><tr><th>項目</th><th>内容</th></tr></thead><tbody><tr><td>サービスコスト</td><td>・クラウドを複数利用するため、単純にコストが2倍以上発生する<br>・DBaaS やILB を利用するためにSaaS の契約が必要となり、コスト増加<br>・各クラウドとデータセンター間を専用線（Dedicated Interconnect やDirect Connect）で接続するためのコストがかかる</td></tr><tr><td>設計コスト</td><td>・アーキテクチャが複雑になるため、設計コストの増加<br>・クラウド特有のサービスを利用したい場合、マルチクラウドではどのように実現するかを設計する必要がある（例えば、キューサービスやKVS などのサービス利用）<br>・複数クラウドへのリリース方式を考える必要があるため設計コストが増加する</td></tr><tr><td>運用コスト</td><td>・複数クラウド運用となるため、メンテナンスコストの増加<br>・複数クラウドのユーザ、ID 管理や、脆弱性チェックなどのセキュリティ管理対象が増えるため、コスト増加<br>・ログ、メトリクス監視などの管理を各クラウドで行う場合、コストが増加する（仮にオブザーバビリティ製品を使用する場合も同様）<br>・複数クラウドの清算処理</td></tr><tr><td>学習コスト</td><td>・複数クラウドの知識を蓄える必要があるため学習コストが増加する<br>・どちらのクラウドにも精通した人材を確保する必要も出てくるためコストが増加する</td></tr></tbody></table></div><h1 id="Anthos-という選択"><a href="#Anthos-という選択" class="headerlink" title="Anthos という選択"></a>Anthos という選択</h1><p>マルチクラウド/ハイブリッド構成を実現するために<a href="https://cloud.google.com/anthos?hl=ja">Anthos</a>を利用するという選択肢もあるかと思います。<br>そこでざっくりとですが、Anthos 構成にした場合について記載します。</p><ol><li>Anthos GKE on AWS によるマルチクラウド構成</li><li>Anthos GKE on-prem によるハイブリッドクラウド構成</li></ol><img src="/images/20211102a/スクリーンショット_2021-11-01_8.23.19.png" alt="スクリーンショット_2021-11-01_8.23.19.png" width="1200" height="351" loading="lazy"><ul><li>Anthos GKE on AWS<ul><li>マルチクラウドでは、各クラウドで汎用的なサービスを利用することで開発差異を極力なくす構成をとっていたが、Anthos を利用することで一貫性を持った開発や運用を実現することが可能</li><li>AWS のEC2 上にクラスタを自動構築</li><li>モニタリング、ロギングを統合</li></ul></li><li>Anthos GKE on-prem<ul><li>オンプレミスも同様に一貫性を持った開発、運用が可能となる構成</li><li>クラウド側に持っていけない情報などをオンプレミス側に配置するなど柔軟な構成が可能となる</li><li>モニタリング、ロギングを統合</li><li>GCP のコンテナエコシステムとの連携が可能（Cloud Build、GCR など）</li></ul></li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>マルチクラウド構成を実現しようと思うと色々なことを考えないといけないことがわかったかと思います。</p><p>もし、マルチクラウド構成を実現したい場合は、まずはシングルクラウドで可用性を高めた構成を構築し、裏で継続的に技術検証を行いながらマルチクラウドにシフトしていく準備を進められたら良いと思っています。</p><p>また、マルチクラウドを選択することによってクラウドの恩恵を損なう可能性も念頭に置いて検討するのが良いと思います。</p><p><a href="/articles/20211027a/">秋のブログ週間2021</a>の5日目でした。ありがとうございました！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>マルチクラウド構成を実現するためにもっと知りたいという方は、以下のヤマトHD さんとZOZOテクノロジーズさんの動画と記事を参考にすると良いと思います。<br>非常に分かりやすくて面白い内容です。</p><p><a href="https://www.youtube.com/watch?v=Q2oM9vSpbPQ">https://www.youtube.com/watch?v=Q2oM9vSpbPQ</a></p><p><a href="https://qiita.com/sonots/items/f125d3394ee102522aee">https://qiita.com/sonots/items/f125d3394ee102522aee</a></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">Availability Zone（アベイラビリティーゾーン）の略称でリージョン内に複数あり、AZ は1つ以上のデータセンタで構成されている</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">2つの異なるクラウドを連携させるロードバランサ</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Anthos/">Anthos</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/">設計</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%9E%E3%83%AB%E3%83%81%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89/">マルチクラウド</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%99%E3%83%B3%E3%83%80%E3%83%BC%E3%83%AD%E3%83%83%E3%82%AF%E3%82%A4%E3%83%B3/">ベンダーロックイン</category>
      
      
      <comments>https://future-architect.github.io/articles/20211102a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>キーパッドを、基板から自作してみた</title>
      <link>https://future-architect.github.io/articles/20211101a/</link>
      <guid>https://future-architect.github.io/articles/20211101a/</guid>
      <pubDate>Sun, 31 Oct 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは。CSIGの井上です。この記事は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは。CSIGの井上です。この記事は<a href="/articles/20211027a/">秋のブログ週間2021</a>の4日目です。</p><p>本ブログでは何度か自作キーボードの記事を書いていますが、基本的には「誰かが設計したものを組み立てる」物でした。最近まではある程度満足して使っていたのですが、もう少しこうだと（私は）使いやすいかもしれない、という点が色々出てきたので、キーボードを基板から作ろうと思い始めました。</p><ul><li>市販の自作キーボードは、キーアサインの変更は可能です</li><li>しかしながら、物理的な配置等も変えたい場合は、自作するしかないです</li></ul><p>ですが、最初からキーボードを作るのは難度が高いので、まずは機能確認のキーパッドを作りました。これについて記事を書きました。</p><p>あと、<strong>普段はサイバーセキュリティの話をしていますが、今回は一切しません…</strong></p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><h2 id="この記事について"><a href="#この記事について" class="headerlink" title="この記事について"></a>この記事について</h2><p>この記事は、仕組みを知ることの楽しさを知ってもらう、という事を目的に書きました。</p><p>今回は、自作の第一歩として以下を含む基板を作ります。<br>（何かを始めてやるときは、実装テストを小規模で行う、のがセオリーですね。）</p><ul><li>4つのキー</li><li>1つのロータリーエンコーダー</li><li>1つのカラーシリアルLEDテープ</li></ul><img src="/images/20211101a/image.png" alt="image.png" width="694" height="501" loading="lazy"><h2 id="最終的に作りたいもの"><a href="#最終的に作りたいもの" class="headerlink" title="最終的に作りたいもの"></a>最終的に作りたいもの</h2><p>本記事で書いたキーパッド設計により、設計プロセスや注意点を、おおよそ理解しました。<br>今後は、日本語キーボード（70キー程度）を作るつもりです。機会があればこちらに投稿するかもしれません。</p><ul><li>会社支給PCは日本語キーボードのノートパソコンであるが、キータッチは個人的にはあまり好きではない</li><li>リモートワーク環境であり、自宅では某自作日本語キーボードを利用している</li><li>出社または自宅外でリモートワークする時に上記のキーボードを持ち出すと、破損する恐れがある</li><li>持ち出しても破損しづらい、好みのキーボードが欲しい！作りたい！</li></ul><p>それでは、キーパッドを設計していきます。</p><h1 id="キーパッドを作る"><a href="#キーパッドを作る" class="headerlink" title="キーパッドを作る"></a>キーパッドを作る</h1><h2 id="構成と利用ソフトウェア"><a href="#構成と利用ソフトウェア" class="headerlink" title="構成と利用ソフトウェア"></a>構成と利用ソフトウェア</h2><h3 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h3><p>自作キーボードは、一般的に以下の構成となっています。</p><ul><li>ProMicroと呼ばれるマイコン（Arduino互換機）に、各種スイッチ類やLEDなどを接続する</li><li>ProMicroのUSBポート経由でPCと接続し、キーボードとして使う</li><li>ProMicroのファームウェアは、QMK Firmwareというもので作成ができ、それをQMK ToolBoxで書き込むことが可能<ul><li>ファームウェアを書き換えることで、キーアサインなどを変更できる</li></ul></li></ul><img src="/images/20211101a/image_2.png" alt="image.png" width="823" height="591" loading="lazy"><h3 id="利用するソフトウェア"><a href="#利用するソフトウェア" class="headerlink" title="利用するソフトウェア"></a>利用するソフトウェア</h3><p>今回は、以下のアプリケーションを使います。</p><ul><li>KiCAD<ul><li><a href="https://www.kicad.org/">https://www.kicad.org/</a></li><li><code>A Cross Platform and Open Source Electronics Design Automation Suite</code></li><li>回路の設計と、基板の設計ができるアプリケーションです。Ubuntuだとaptで導入もできました。</li><li>KiCADには、Eeschema（回路図エディター）/Pcbnew（プリント基板用ソフトウェア）/GrebView（ガーバー/ドリル ファイルビューア）などが含まれています。</li></ul></li><li>Freerouting<ul><li><a href="https://freerouting.mihosoft.eu/">https://freerouting.mihosoft.eu/</a></li><li><code>PCB Autorouter</code></li><li>KiCADでは自動で配線はできないようなので、このアプリケーションにより配線をしてもらいます。</li></ul></li><li>QMK Firmware<ul><li><a href="https://github.com/qmk/qmk_firmware">https://github.com/qmk/qmk_firmware</a></li><li>キーボードの制御でよく使われるProMicroに入れるファームウェアとして使われます。</li><li>githubプロジェクトに登録済みのキーボードであれば、<a href="https://config.qmk.fm/">QMK Configurator</a> という、WEB上でキーアサインを変更してファームウェアを作るものが利用できます。</li></ul></li><li>QMK ToolBox<ul><li><a href="https://github.com/qmk/qmk_toolbox">https://github.com/qmk/qmk_toolbox</a></li><li>QMK Firmwareで用意したファームウェアを、USB経由でキーボード上のProMicroに書き込みます。</li></ul></li></ul><h2 id="何を作りたいかを決める"><a href="#何を作りたいかを決める" class="headerlink" title="何を作りたいかを決める"></a>何を作りたいかを決める</h2><p>自作プロセスの検証作業に近い内容なので、欲しい機能を盛り込みます。</p><ul><li>キーは必要<ul><li>最終的にはキーボードを作るつもりなので、複数のキーを扱う練習をしたい</li></ul></li><li>ロータリーエンコーダーも使ってみる<ul><li>マウス代わりとして使う可能性もあるので、実装してみたい</li></ul></li><li>シリアルカラーLEDテープ<ul><li>自作キーボード=光る、これは定番</li></ul></li></ul><p>キーは内部的にマトリックスとして扱うので、最低限の 2x2 で 4キーとしました。<br>ロータリーエンコーダーとLEDテープは、実装テストなので数は不要として、1つとしました。</p><p>実装するものが決まったので、これ以外に必要なパーツなども含めて配置を考えます。</p><img src="/images/20211101a/image_3.png" alt="image.png" width="518" height="427" loading="lazy"><h2 id="回路を設計する"><a href="#回路を設計する" class="headerlink" title="回路を設計する"></a>回路を設計する</h2><p>KiCADは設計用の複数の画面を持っていますが、今回はKiCADのEeschemaで部品を配置、配線します。<br>詳細は割愛しますが、キーボードのコントローラーとなるProMicroを中心に、回路を検討します。</p><img src="/images/20211101a/image_4.png" alt="image.png" width="1085" height="455" loading="lazy"><ul><li>キーはマトリックス配置とします。<ul><li>ProMicroの2Pinを「行」、同2Pinを「列」に割り当て、ダイオードで逆流を防止すると、4キーを認識できる</li><li>ProMicroは最大18Pinをこの用途で利用できるので、9行x9列=81キーを単体で判別できる。</li><li>キーのマトリックスを作り、各Pinにアサインします。</li></ul></li><li>ロータリーエンコーダーは、2Pinを消費します。<ul><li>現状のQMK Firmwawreは、ロータリーエンコーダーはマトリックスに組込めない仕様です。</li><li>そのため、ProMicroに直接Pinアサインします。</li></ul></li><li>ファームウェア書き換えの簡略化の為、リセットスイッチも付けます。<ul><li>RST PinをGNDに短絡するように、スイッチを配線します。</li></ul></li><li>分割キーボードとする際に必要なTRRSジャックも一応つけておきます。<ul><li>キーボードを左右に分割した場合、シリアル通信若しくはI2C通信で同期させる必要があります。今回はシリアル通信要として1Pinを設定します。</li><li>I2Cの場合は GND/VCC/SDA/SCLの4線が必要で、市販のステレオジャック（3極）では無く、TRRSジャック（4極）を使います。</li><li>シリアル通信だと GND/VCC/Dataで済みますが、汎用化の為にTRRSジャックを使います。</li></ul></li><li>シリアルLEDテープは、1Pin消費します。<ul><li>GND/VCC/Din なので、制御用のDinをProMicroに接続します。</li></ul></li></ul><p>この段階で、論理的な部品と配線が完了しました。<br>次に進む前に、ネットリストの出力や、フットプリントを割り当てておきます。</p><h2 id="PCBを設計する"><a href="#PCBを設計する" class="headerlink" title="PCBを設計する"></a>PCBを設計する</h2><p>基板自体の設計に進みます。これは、KiCADのpcbnewを使います。</p><p>まずは部品の実際の配置を考えて整理します。</p><ul><li>使い勝手により位置が決まるもの（TRRSジャックは基板の端オードは同じ向きで固めて配置したい）等で位置決めをします。</li><li>その後、基板上での配線を書いていくのですが、KiCADでは自動配線をしてくれません。手動で配線する必要があります。<ul><li>そこでFreeRoutingを使い、自動配線します。</li></ul></li></ul><p>配線後は、下図このようになります。</p><ul><li>3Dモデルを表示することもできるので、仕上がりを確認することもできます。</li></ul><img src="/images/20211101a/image_5.png" alt="image.png" width="950" height="500" loading="lazy"><p>これで基板は完成したので、発注を行います。</p><h2 id="PCBを発注する"><a href="#PCBを発注する" class="headerlink" title="PCBを発注する"></a>PCBを発注する</h2><p>KiCADで作成したデータを基に、業者に発注します。<br>各業者により特徴はありますが、基本的には同じです。</p><ul><li>個人で利用する場合、条件により費用が変わりやすいです。<ul><li>最低5枚から、特定のサイズ内であれば安く仕上がる、などの条件があります。</li><li>これに合わせるように基板を設計したほうが良いかもしれません。</li></ul></li><li>中国の工場で作成され、郵送されることが多いです。<ul><li>私が頼んだ業者は、深圳から送ってきました。特定のサイズ以下であれば、5枚で2000円以下、程度でした。</li><li>納期は3週間で、2週間目まで製造は全くされていませんでした。3周目頭で製造が始まり、DHLを使い、予定通り3週間中に送られてきました。　</li></ul></li></ul><p>発注後暫く待つと、基板が届くはずです。</p><img src="/images/20211101a/image_6.png" alt="image.png" width="884" height="478" loading="lazy"><h2 id="組み立てる"><a href="#組み立てる" class="headerlink" title="組み立てる"></a>組み立てる</h2><p>基板が届いたら、まずは部品を組みつけてみます。</p><ul><li>パーツ自体は一般的な物なので、関東であれば秋葉原のパーツ屋や台東区にある自作キーボード専門店で入手できます。</li></ul><img src="/images/20211101a/image_7.png" alt="image.png" width="958" height="487" loading="lazy"><ul><li>場合により、「取付向きが逆になる（フットプリントを逆に配置してしまった）」とかが発生することがあります。<ul><li>無理やり空中配線で対応したり、表裏を変えたりして対処できれば良いですが、無理な時はあきらめるしかありません…</li></ul></li></ul><p>部品が付いたことで、「見た目」は完成品になりました。<br>まだファームウェアを書いていないので、PCに接続しても何も起きません。<br>ファームウェアを用意します。</p><img src="/images/20211101a/image_8.png" alt="image.png" width="988" height="469" loading="lazy"><h2 id="ファームウェアを作成する"><a href="#ファームウェアを作成する" class="headerlink" title="ファームウェアを作成する"></a>ファームウェアを作成する</h2><p>QMK Firmwareを利用して作成します。</p><p>Ubuntuのパッケージを利用して導入しましたが、GitHubのものよりバージョンが古いかもしれません。しかしながら、特段問題は出ないのでそのまま使いました。<br>QMK Firmwareは開発が頻繁に行われており、1週間程度ごとにはバージョンが上がっているようです。</p><ul><li>KiCADも含めて、PCにそのまま入れると環境が汚れるので、仮想マシン上で動かすのが良いかもしれません。<ul><li>今回はKiCAD, QMK FirmwareのビルドなどはUbuntuで行っています。</li></ul></li><li>開発の速さに伴いインターネット上の情報が古くなりやすいです。やはり公式のドキュメントを参照するのが一番良いようですが、なかなか複雑です。</li><li>Ubuntuでapt導入した場合は、<code>~/qmk_firmware/</code>以下に環境が用意されます。</li></ul><p>詳細は省略しますが、新規でゼロから作る場合は以下のようにします。</p><ul><li>テンプレートを作る<ul><li><code>$ ./util/new_keyboard.sh</code><ul><li>キーボード名や作成者名を入れると、テンプレートが <code>./keyboards/&lt;キーボード名&gt;</code>に作られる</li></ul></li></ul></li><li>編集を行う<ul><li>キーの数やアサイン、LEDシートやロータリーエンコーダーなどの設定をする<ul><li><code>config.h</code>, <code>&lt;キーボード名&gt;.h</code>, <code>keymap.c</code>等を書き換える</li><li>何を書き換えるかは…ネットで調べる方が良いかもしれない<ul><li>機能を<code>enable = ture</code>にする、ProMicroの割当Pin番号を記載していく、等</li></ul></li></ul></li></ul></li><li>コンパイルする<ul><li><code>$ qmk compile --keyboard &lt;キーボード名&gt; --keymap default</code></li></ul></li></ul><p>ファームウェアをビルドすると<code>~/.build</code>以下に<code>*.hex</code>ファイルとして配置されるので、これをQMK ToolBoxでProMicroに書き込みます。</p><p>先人のキーボード設計を流用する場合は、keymapだけ書き換えることになると思います。<br>新規の場合、流用をすると色々エラーが起こったりすることが多いので、<code>new_keyboard.sh</code>した方が早いように感じました。</p><h2 id="ファームウェアを適用する"><a href="#ファームウェアを適用する" class="headerlink" title="ファームウェアを適用する"></a>ファームウェアを適用する</h2><p>ProMicroへの書き込みですが、Windowsだと<code>QMK Toolbox.exe</code>で、GUIで操作ができます。</p><ul><li>（VM上のファームウェアを、ホストのWindowsから見えるところに移動させる）</li><li><code>QMK Toolbox.exe</code>を起動し、準備をする<ul><li>ファームウェアファイルを指定、<code>Auto-Flash</code>の有効化のチェックボックスを有効化</li></ul></li><li>キーボードをUSBで接続する<ul><li>リセットスイッチを押すと自動でファームウェアが書き込まれる</li></ul></li></ul><img src="/images/20211101a/image_9.png" alt="image.png" width="802" height="645" loading="lazy"><p>これでキーボードとして動作が可能な状態になりました。完成です。</p><p>ここまでできれば、一通りの機能実装ができたことになります。おそらく、ロータリーエンコーダーやLEDテープなどが無ければ、簡単に実装できます。<br>最初の実装としては問題なくできたので、次は日本語キーボードを作ろうと思います。</p><h2 id="（大半をWEBで済ます方法もある）"><a href="#（大半をWEBで済ます方法もある）" class="headerlink" title="（大半をWEBで済ます方法もある）"></a>（大半をWEBで済ます方法もある）</h2><p>最近は、各種WEBサービスを駆使することで、ほぼWEB上でキーボードが作れそうです。</p><ul><li>キーボードをデザインする<ul><li><a href="http://www.keyboard-layout-editor.com/">keyboard-layout-editor</a> でキーボードをデザインする</li></ul></li><li>KiCADで基板を作る<ul><li>ここは流石にWEBではできないか。</li></ul></li><li>PCB発注<ul><li>WEBで事業者に発注。一応、WEBサービスですね。</li></ul></li><li>ファームウェアの作成<ul><li><a href="https://kbfirmware.com/">Keyboard Firmware Builder</a>でファームウェアを作る</li><li>keyboard-layout-editorのJSONを張り付けることで、オリジナルのキーボードでも作れる</li><li>但し、ロータリーエンコーダーは書けない<ul><li>ファームウェアをダウンロードしてみるとQMK Firmwareのようだけれども、それを改造してcompileするのは難しいみたい。</li></ul></li></ul></li><li>ファームウェアの書き込み<ul><li>QMK Tool boxを使うので、WEBサービスじゃないですね…</li></ul></li></ul><img src="/images/20211101a/image_10.png" alt="image.png" width="756" height="458" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>キーボード自作のおおよそのフローは理解いただけたと思います。<br>自作キーボードに興味のない方には雑学としての知識を、興味のある方には自作の後押しをできていれば幸いです。</p><p><a href="/articles/20211027a/">秋のブログ週間2021</a>の4日目でした。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C/">電子工作</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89/">自作キーボード</category>
      
      <category domain="https://future-architect.github.io/tags/KiCAD/">KiCAD</category>
      
      
      <comments>https://future-architect.github.io/articles/20211101a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Terraformerとしてコードを書いて思うこと</title>
      <link>https://future-architect.github.io/articles/20211029a/</link>
      <guid>https://future-architect.github.io/articles/20211029a/</guid>
      <pubDate>Thu, 28 Oct 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20211029a/og-image-c18d275f.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;418&quot;&gt;

&lt;p&gt;こんにちは。TIGの&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20211029a/og-image-c18d275f.png" alt="" width="800" height="418"><p>こんにちは。TIGの<a href="https://twitter.com/kaedemalu">伊藤</a>です。この記事は<a href="/articles/20211027a/">秋のブログ週間2021</a>の3日目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>私は普段会社でクラウドをまたいでTerraformを日々書いたり、メンバーに教えたりしています。もはや俗に言うプログラミング言語を書かずにここまで全振りしてきたくらいなので、比較的自信を持ってコードを書いて仕事をしています。</p><p>特にここ最近はほぼ1からコード設計をして運用まで持っていくこともあり、「より腐りにくい、より息の長いコード」というものを考えるようになりました。Terraformだからこその「定期メンテを簡易にするためには」「より簡単に変更するためには」をひたすら突き詰めていった結果、アツい気持ちが生まれ、今回は筆を取っています。</p><p>そんな私のアツい気持ちをしたためた今回の記事ですが、可能な限り例も添えつつ、いくつか解説できればと思います。公式にも実は載っているような内容もあったりしますが、日本語の記事としてぜひ生かしてください。</p><h2 id="保守性の高いコード"><a href="#保守性の高いコード" class="headerlink" title="保守性の高いコード"></a>保守性の高いコード</h2><p>私たちは、戦略立案から要件定義～開発～保守運用まで担当しますが、ある程度システムが安定してきますとグループ会社であるフューチャーインスペース、もしくは別の運用保守会社にお願いすることがあります。ということは、運用以降は私をはじめとした開発メンバーが書いたコードを知らない誰かが運用するということになります。</p><p>そのため、書いて満足、とか運用しながらリファクタリングしよう、と言うわけにはいきません。リリースの段階で完璧に運用に耐えうるコードを書かなければいけないのです。</p><p>ここで、保守性の高いコードとはなんでしょうか？私が考える、「Terraformにおける」保守性の高いコードとは</p><ol><li>最小限の変更で運用を可能にする</li><li>変更に強いコード設計</li><li>可読性</li></ol><p>の3点があります。</p><p>Terraformは比較的学習コストが低く、導入と利用は簡単ですが、途中で破綻したりコードの管理が大変になりやすくなるものだと思っています。そのため、以下では、先に挙げた3つをベースとして既存のコードのアンチパターンな部分や、リファクタリングをするためのきっかけにしていただければと思います。</p><h3 id="1-最小限の変更で運用を可能にする"><a href="#1-最小限の変更で運用を可能にする" class="headerlink" title="1. 最小限の変更で運用を可能にする"></a>1. 最小限の変更で運用を可能にする</h3><p>Terraformを運用に乗せて利用していく場合、インフラの組み替えなどしない限り、リソース内部のパラメータの変更が主たる内容だと思います。この運用を実践する上で大事だと考えているのは、「<strong>どこを変更すれば良いか</strong>」に尽きると思います。また、変更箇所が集中管理できればさらに運用は簡単になるかと思います。</p><p>ここで、Modulesを使ってリソースを開発することを1つの例として書いていきます。</p><p>早速Modulesのコードを以下のディレクトリ設計で示すことにします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── modules</span><br><span class="line">│   └── web</span><br><span class="line">│       ├── instance.tf</span><br><span class="line">│       └── variable.tf</span><br><span class="line">└── projects</span><br><span class="line">    └── main.tf</span><br></pre></td></tr></table></figure><p><code>modules/web</code>配下の2ファイルについては以下であるとしましょう。</p><figure class="highlight sh"><figcaption><span>modules/web/instance.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_instance&quot;</span> <span class="string">&quot;web&quot;</span> &#123;</span><br><span class="line">  ami           = var.ami</span><br><span class="line">  instance_type = var.instance_type</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name = <span class="string">&quot;web-<span class="variable">$&#123;var.project&#125;</span>&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><figcaption><span>modules/web/variable.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">variable <span class="string">&quot;ami&quot;</span> &#123;</span><br><span class="line">  description = <span class="string">&quot;A string of AMI ID&quot;</span></span><br><span class="line">  <span class="built_in">type</span>        = string</span><br><span class="line">  default     = <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable <span class="string">&quot;instance_type&quot;</span> &#123;</span><br><span class="line">  description = <span class="string">&quot;A string of Instance Type&quot;</span></span><br><span class="line">  <span class="built_in">type</span>        = string</span><br><span class="line">  default     = <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">variable <span class="string">&quot;porject&quot;</span> &#123;</span><br><span class="line">  description = <span class="string">&quot;A string of Project Name&quot;</span></span><br><span class="line">  <span class="built_in">type</span>        = string</span><br><span class="line">  default     = <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>modules内部ではリソースの宣言とそのリソースで利用する変数の定義します。この時、変数の型も定義できるので、長期的に運用する時にコードの変異を防ぐこともできます。<br>次に、<code>projects</code>配下のコードを書きます。</p><figure class="highlight sh"><figcaption><span>projects/main.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">module <span class="string">&quot;ec&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">&quot;../modules/web&quot;</span></span><br><span class="line"></span><br><span class="line">  ami           = <span class="string">&quot;ami-xxxxxxxxx&quot;</span></span><br><span class="line">  instance_type = <span class="string">&quot;t3.micro&quot;</span></span><br><span class="line">  project       = <span class="string">&quot;ecommerce&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module <span class="string">&quot;backend&quot;</span> &#123;</span><br><span class="line">  <span class="built_in">source</span> = <span class="string">&quot;../modules/web&quot;</span></span><br><span class="line"></span><br><span class="line">  ami           = <span class="string">&quot;ami-wwwwwwwwww&quot;</span></span><br><span class="line">  instance_type = <span class="string">&quot;r5.large&quot;</span></span><br><span class="line">  project       = <span class="string">&quot;backend&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>modules</code>配下で作ったwebモジュールをEC向けとBackendに展開しています。リソースで利用するパラメータが確定したら、modulesは原則として触らないようにせず、<code>projects/main.tf</code>をいじるだけで、リソースの更新が可能になります。この例ではEC向けには<code>module.ec</code>のブロックを、Backend向けであれば、<code>module.backend</code>のブロックを修正すればいいように明確なものになりました。<br>例は簡単なものにしましたが、さらに多くのリソースがある時、変更箇所が集約されていること、そして、変更しないといけないパラメータは共通化するなどして少なくすることで運用上のミスも軽減できると考えています。</p><h4 id="余談）ModulesとWorkspacesの違い"><a href="#余談）ModulesとWorkspacesの違い" class="headerlink" title="余談）ModulesとWorkspacesの違い"></a>余談）ModulesとWorkspacesの違い</h4><p>たまにModulesとWorkspacesを比較して語られることが多いですが、この2つは似て非なるものです。流派としても分かれて語られることもあります。</p><ul><li>参考：<a href="https://future-architect.github.io/articles/20190903/">Terraformのベストなプラクティスってなんだろうか</a></li></ul><p>WorkspacesはTerraformのStateを分割する方法として紹介されており、公式ドキュメントにもStateのドキュメントの1つとして紹介されています。思想としては、「単一のコードで複数のStateに分割して管理できる」があります。</p><p>一方、Modulesについては、特定のサービスのブロックとして利用され、一緒に使われるリソース群をまとめて管理することがベースになっています。最近で言うところのマイクロサービスに近い思想だと考えています。Modules内部はリソースをreferさせて密結合にする一方、他のModulesとは特定のoutpusでパラメータを渡し合い、疎結合に組むと次に述べる変更に強いコードになります（本記事では割愛します）。</p><h3 id="2-変更に強いコード設計"><a href="#2-変更に強いコード設計" class="headerlink" title="2. 変更に強いコード設計"></a>2. 変更に強いコード設計</h3><p>上記の最小限の変更で運用していても、時には破壊的な変更をしなければならない時があります。とはいえ、巻き添えを食らってしまうリソースは最小限に抑えられるコードを書く必要があります。</p><p>TerraformにはLoop処理として、countとfor_each(for)と大きく2つの機能が備わっています。これらを使い分けることで、リソースの管理も容易にし、かつ変更に強いコードも作ることが可能になります。</p><h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><p>countは以下のように1つのコードから複数のリソースを生み出す時に大いに役に立ちます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_instance&quot;</span> <span class="string">&quot;web&quot;</span> &#123;</span><br><span class="line">  count         = 5                 <span class="comment"># 5台EC2インスタンスを立てるようにする</span></span><br><span class="line">  ami           = <span class="string">&quot;ami-xxxxxxxxx&quot;</span></span><br><span class="line">  instance_type = <span class="string">&quot;t3.micro&quot;</span></span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name = <span class="string">&quot;web-<span class="variable">$&#123;count.index + 1&#125;</span>&quot;</span> <span class="comment"># countで取れる値をインスタンス名に埋め込む</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 作成後のリソース一覧</span></span><br><span class="line">$ terraform state list</span><br><span class="line">aws_instance.web[0]</span><br><span class="line">aws_instance.web[1]</span><br><span class="line">aws_instance.web[2]</span><br><span class="line">aws_instance.web[3]</span><br><span class="line">aws_instance.web[4]</span><br></pre></td></tr></table></figure><p>また、特定の環境においてリソースの作成の有無を決定したい場合にも利用できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  crate_zone = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_route53_zone&quot;</span> <span class="string">&quot;this&quot;</span> &#123;</span><br><span class="line">  count = local.create_zone ? 1 : 0 <span class="comment"># trueが渡されると1になる</span></span><br><span class="line">  name  = <span class="string">&quot;dev.example.com&quot;</span></span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    System = <span class="string">&quot;EC&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> terraform state list</span></span><br><span class="line">aws_route53_zone.this[0]</span><br></pre></td></tr></table></figure><p>このように単純なリソース作成やスイッチであればとても便利なcountですが、以下のコードではどうでしょうか？</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  azs = [</span><br><span class="line">    <span class="string">&quot;ap-northeast-1a&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ap-northeast-1b&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ap-northeast-1c&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_instance&quot;</span> <span class="string">&quot;web&quot;</span> &#123;</span><br><span class="line">  count             = length(local.azs) <span class="comment"># AZの数だけEC2インスタンスを立てるようにする</span></span><br><span class="line">  ami               = <span class="string">&quot;ami-xxxxxxxxx&quot;</span></span><br><span class="line">  instance_type     = <span class="string">&quot;t3.micro&quot;</span></span><br><span class="line">  availability_zone = element(local.azs, count.index)</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name = <span class="string">&quot;web-<span class="variable">$&#123;element(local.azs, count.index)&#125;</span>&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ terraform state list</span><br><span class="line">aws_instance.web[0]</span><br><span class="line">aws_instance.web[1]</span><br><span class="line">aws_instance.web[2]</span><br></pre></td></tr></table></figure><p>上記のコードを書いた時に、「アベイラビリティゾーンの分だけインスタンスを作成する」という意味合いはとてもよくわかるコードになっていると思います。しかし、ゾーンBを廃止にしたい場合、localsを修正してapplyしてしまうと、<code>aws_instance.web[1]</code>のリソース（ゾーンBのインスタンス）が削除されるとともに、<code>aws_instance.web[2]</code>のリソース（ゾーンCのインスタンス）が<code>aws_instance.web[1]</code>になろうとしてしまいます。もちろん、事前に<code>terraform state mv</code>などを実行してリソース名を変更しておけば避けられる話ではありますが、破壊的変更の度にこの対応は難しいでしょう。</p><p>ここで上記のような運用時におけるリスクを少しでも減らすために、for_eachを使ってリファクタリングしてみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  azs = [</span><br><span class="line">    <span class="string">&quot;ap-northeast-1a&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ap-northeast-1b&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ap-northeast-1c&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_instance&quot;</span> <span class="string">&quot;web&quot;</span> &#123;</span><br><span class="line">  for_each          = toset(local.azs) <span class="comment"># AZの数だけEC2インスタンスを立てるようにする</span></span><br><span class="line">  ami               = <span class="string">&quot;ami-xxxxxxxxx&quot;</span></span><br><span class="line">  instance_type     = <span class="string">&quot;t3.micro&quot;</span></span><br><span class="line">  availability_zone = each.value</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name = <span class="string">&quot;web-<span class="variable">$&#123;each.value&#125;</span>&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> terraform state list</span></span><br><span class="line">aws_instance.web[&quot;ap-northeast-1a&quot;]</span><br><span class="line">aws_instance.web[&quot;ap-northeast-1b&quot;]</span><br><span class="line">aws_instance.web[&quot;ap-northeast-1c&quot;]</span><br></pre></td></tr></table></figure><p>countでは配列として見なされているため、間のリソースがなければ空白を詰めるような動きになりますが、for_eachを使うと、loopさせる対象をキーとして持つため、上記のようなゾーンBのみを削除したいケースが出てきても、ゾーンCは繰り上げされず、破壊的変更も起こらずにすみます。また副次的な効果ですが、パラメータを渡す時も少しだけきれいになります。</p><p>countは理解しやすく、かつ簡単に使えるために、リソースの複製に安易に使ってしまいがちです。しかし、将来的な変更まで考えるとfor_eachを使った方が運用しやすいコードであると言えるでしょう。</p><h3 id="3-可読性"><a href="#3-可読性" class="headerlink" title="3. 可読性"></a>3. 可読性</h3><p>どの言語でも言えますが、自分が読んで流れの掴める状態ではなく、別の人が読んでも処理が追えるよう可読性は大事なことです。Terraformは基本的に各リソースがCLIコマンドで渡す引数に対応しているので、俗にいうプログラミング言語にあたるものよりは読みやすいコードだと思います。とはいえ、表現が冗長とか、効率的なコードではない、などもあります。</p><p>ここではTerraformのFunctionsの中から<code>dynamic</code>ブロックを使い、冗長になりそうなリソースのコード量を削減し、かつ発生しうる変更箇所を最小限に抑え、メンテナンスしやすいコードを目指しましょう。</p><p>ここで例とするのはAWSのセキュリティグループです。後述しますが、冗長にも書くことができるし、より効率的に書くことも可能なリソースです。まずはそのまま書いた時の例を見てみましょう。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_security_group&quot;</span> <span class="string">&quot;web&quot;</span> &#123;</span><br><span class="line">  name        = <span class="string">&quot;allow-web&quot;</span></span><br><span class="line">  vpc_id      = aws_vpc.main.id</span><br><span class="line"></span><br><span class="line">  ingress = [</span><br><span class="line">    &#123;</span><br><span class="line">      description      = <span class="string">&quot;HTTPS from VPC&quot;</span></span><br><span class="line">      from_port        = 443</span><br><span class="line">      to_port          = 443</span><br><span class="line">      protocol         = <span class="string">&quot;tcp&quot;</span></span><br><span class="line">      cidr_blocks      = [<span class="string">&quot;10.0.0.0/8&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  ingress = [</span><br><span class="line">    &#123;</span><br><span class="line">      description      = <span class="string">&quot;HTTP from VPC&quot;</span></span><br><span class="line">      from_port        = 80</span><br><span class="line">      to_port          = 80</span><br><span class="line">      protocol         = <span class="string">&quot;tcp&quot;</span></span><br><span class="line">      cidr_blocks      = [<span class="string">&quot;192.168.0.0/16&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  egress = [</span><br><span class="line">    &#123;</span><br><span class="line">      from_port        = 0</span><br><span class="line">      to_port          = 0</span><br><span class="line">      protocol         = <span class="string">&quot;-1&quot;</span></span><br><span class="line">      cidr_blocks      = [<span class="string">&quot;0.0.0.0/0&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name = <span class="string">&quot;allow-web&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ingress</code>の部分が2つ繰り返しており、さらにdescription別のingressを追加するとなると、さらにコードが長くなってしまいます。セキュリティグループのリソースは往々にして複雑になりがちなので、抜け漏れを防ぐためにも管理する箇所をまとめましょう。</p><p>ここで<code>dynamic</code>ブロックを利用します。例として、上のコードをリファクタリングします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">locals &#123;</span><br><span class="line">  ingress_web = [</span><br><span class="line">  <span class="comment"># [description, from_port, to_port, protocol, cidr_blocks]</span></span><br><span class="line">    [<span class="string">&quot;HTTPS from VPC&quot;</span>, 443, 443, <span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;10.0.0.0/8&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;HTTP from VPC&quot;</span>, 80, 80, <span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;192.168.0.0/16&quot;</span>],</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resource <span class="string">&quot;aws_security_group&quot;</span> <span class="string">&quot;web&quot;</span> &#123;</span><br><span class="line">  name        = <span class="string">&quot;allow-web&quot;</span></span><br><span class="line">  vpc_id      = aws_vpc.main.id</span><br><span class="line"></span><br><span class="line">  dynamic <span class="string">&quot;ingress&quot;</span> &#123;</span><br><span class="line">    for_each = local.ingress_web</span><br><span class="line">    content &#123;</span><br><span class="line">      description = ingress.value[0]</span><br><span class="line">      from_port   = ingress.value[1]</span><br><span class="line">      to_port     = ingress.value[2]</span><br><span class="line">      protocol    = ingress.value[3]</span><br><span class="line">      cidr_blocks = ingress.value[4]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  egress = [</span><br><span class="line">    &#123;</span><br><span class="line">      from_port        = 0</span><br><span class="line">      to_port          = 0</span><br><span class="line">      protocol         = <span class="string">&quot;-1&quot;</span></span><br><span class="line">      cidr_blocks      = [<span class="string">&quot;0.0.0.0/0&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  tags = &#123;</span><br><span class="line">    Name = <span class="string">&quot;allow-web&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>localsに各ingressのブロックに入れる変数をまとめました。リファクタリング後はlocalsに順番に従ってルールを書くだけで、ingressの追加ができるようになりました。dynamicブロックのメリットは、記述量が減ること以外にもあり、変数を省力化することもできます。</p><p>dynamicブロックを使う前であれば。<code>from_port</code>向けの変数、<code>to_port</code>向けの変数などどうしても変数が増えてしまいますが、dynamicブロックでまとめることで、変数をまとめてテンプレート化し、変更箇所を最小限に抑えることもできます。</p><p>一方、dynamicブロックの入れ子も可能であるため、3つ以上ネストさせてdynamicを使わない、過剰に使いすぎないなども<a href="https://www.terraform.io/docs/language/expressions/dynamic-blocks.html#best-practices-for-dynamic-blocks">公式</a>で言及されているので、用法・用量は塩梅をみながら使いましょう。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>いかがだったでしょうか？ 常日頃Terraformに慣れ親しんでいて、想いの丈を書いてみました。</p><p>Terraformの機能群を理解することで、より堅牢で効率的な開発をすることができます。</p><p>SREや、同じように日々Terraformを書いている方は共感できることもあったら幸いです。</p><p><a href="/articles/20211027a/">秋のブログ週間2021</a>の3日目でした。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/IaC/">IaC</category>
      
      <category domain="https://future-architect.github.io/tags/Terraform/">Terraform</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/">設計</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%8F%AF%E8%AA%AD%E6%80%A7/">可読性</category>
      
      
      <comments>https://future-architect.github.io/articles/20211029a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>OpenAPIにおけるundefinedとnullの設計</title>
      <link>https://future-architect.github.io/articles/20211028b/</link>
      <guid>https://future-architect.github.io/articles/20211028b/</guid>
      <pubDate>Wed, 27 Oct 2021 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20211028b/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;414&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20211028b/top.png" alt="" width="800" height="414"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>OpenAPI仕様に則ってREST APIの設計をする際に、値が存在しないという状態をどのように表現するかというお話です。</p><h2 id="undefinedとは"><a href="#undefinedとは" class="headerlink" title="undefinedとは"></a>undefinedとは</h2><p>まずはじめに、ここで<code>undefined</code>と言っているのは、OpenAPIの仕様において、リクエスト/レスポンスのデータ型を定義するSchema Objectのプロパティの1つである<code>required</code>が指定されていない状態を指します。</p><p>OpenAPIにおける<code>required</code>の定義を確認してみましょう。<br><a href="https://spec.openapis.org/oas/v3.1.0#schema-object">OpenAPIの仕様</a>を参照すると、Schema ObjectはJSON Schemaの仕様に従うと記載されています。</p><blockquote><p>The Schema Object allows the definition of input and output data types. These types can be objects, but also primitives and arrays. This object is a superset of the JSON Schema Specification Draft 2020-12.</p><p>For more information about the properties, see JSON Schema Core and JSON Schema Validation.</p></blockquote><p>それでは<a href="https://datatracker.ietf.org/doc/html/draft-wright-json-schema-validation-00#section-5.15">JSON Schemaの仕様</a>を確認してみましょう。</p><blockquote><p>An object instance is valid against this keyword if its property set contains all elements in this keyword’s array value.</p></blockquote><p>少しわかりづらいですが、<code>required</code>として指定されたプロパティはキーとしてインスタンスに含まれなければならないことを意味します。</p><p>具体的な例として下記のようなOpenAPI定義を考えてみましょう。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">application/json:</span></span><br><span class="line">  <span class="attr">schema:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">id:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">id</span></span><br></pre></td></tr></table></figure><p><strong>正しいケース</strong></p><p>✅ <code>id</code>に具体的な文字列が指定されている</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;00001&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p>✅ <code>id</code>に空文字が指定されている</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>正しくないケース</strong></p><p>❌ <code>id</code>のキーが存在しない</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>❌ <code>id</code>の値に<code>null</code>が指定されている</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;id&quot;</span>: <span class="literal">null</span> &#125;</span><br></pre></td></tr></table></figure><p>後述しますが、この場合<code>required</code>の条件は満たしますが、データ形が文字列ではないため、NGとなります。</p><p>このように<code>required</code>とはキー自体の必須・非必須を定義するプロパティであり、キーの具体的な値については関与していないということをまずは頭に入れておいてください。</p><h2 id="nullとは"><a href="#nullとは" class="headerlink" title="nullとは"></a>nullとは</h2><p>次に<code>null</code>というのは、リクエスト/レスポンスにおけるプロパティの値としての<code>null</code>を指しています。<br>リクエスト/レスポンスのフォーマットとしてJSONが用いられることが多いと思いますが、<a href="https://www.rfc-editor.org/rfc/rfc8259.html#section-3">JSONの仕様</a>として <code>null</code>型というのは明確に定義されています。</p><p>OpenAPIにおいてこの<code>null</code>型はどのように表現されるのでしょうか。<br>結論から言うとバージョンによって表現が異なります。</p><p><strong>OpenAPI3.0の場合</strong><br><a href="https://spec.openapis.org/oas/v3.0.3#data-types">https://spec.openapis.org/oas/v3.0.3#data-types</a></p><blockquote><p>null is not supported as a type (see nullable for an alternative solution)</p></blockquote><p><code>null</code>は型としてサポートされておらず、代わりにnullableを利用する仕様となっています。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">application/json:</span></span><br><span class="line">  <span class="attr">schema:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">id:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">nullable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">id</span></span><br></pre></td></tr></table></figure><p><strong>OpenAPI3.1の場合</strong><br><a href="https://spec.openapis.org/oas/v3.1.0#data-types">https://spec.openapis.org/oas/v3.1.0#data-types</a><br><code>null</code>に関する注記は削除され、JSON Schemaの仕様と同じく`null``を型として明確にサポートするようになりました。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">application/json:</span></span><br><span class="line">  <span class="attr">schema:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">id:</span></span><br><span class="line">        <span class="attr">type:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">string</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;null&#x27;</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">id</span></span><br></pre></td></tr></table></figure><p>バージョンによって表現の差異はありますが、意味するところは同じです。</p><p><strong>正しいケース</strong></p><p>✅ <code>id</code>に具体的な文字列が指定されている</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;00001&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p>✅ <code>id</code>に空文字が指定されている</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p>✅ <code>id</code>に<code>null</code>が指定されている</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;id&quot;</span>: <span class="literal">null</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>正しくないケース</strong></p><p>❌ <code>id</code>のキーが存在しない</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>これは先述した<code>required</code>の条件を満たしていないためNGとなります。</p><h2 id="undefined-vs-null"><a href="#undefined-vs-null" class="headerlink" title="undefined vs null"></a>undefined vs null</h2><p>ここまで見てきたように<code>undefined</code>と<code>null</code>は似て非なるものです。<br><code>undefined</code>はキーの必須・非必須を定義しているのに対し、<code>null</code>は値が<code>null</code>かどうかを定義しています。</p><p>しかしながらREST APIを設計するにあたって空の項目をどちらで表現するかは意見が分かれているように思います。<br>例えば以下のようなユーザオブジェクトのJSON表現を考えてみましょう。<br>オプショナルなユーザ属性としてスコアを持ちますが、スコアが存在しない状態をどのように表現するのでしょうか。</p><div class="scroll"><table><thead><tr><th>項目</th><th>データ型</th><th>必須</th></tr></thead><tbody><tr><td>ID</td><td>文字列</td><td>○</td></tr><tr><td>Name</td><td>文字列</td><td>○</td></tr><tr><td>Score</td><td>数値</td><td></td></tr></tbody></table></div><p><code>undefined</code>として表現する場合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;00001&quot;</span>, <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span> &#125;</span><br></pre></td></tr></table></figure><p><code>null</code>として表現する場合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;00001&quot;</span>, <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">&quot;score&quot;</span>: <span class="literal">null</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="undefined派"><a href="#undefined派" class="headerlink" title="undefined派"></a>undefined派</h3><ul><li>リクエスト/レスポンスのペイロードサイズを小さくするために<code>null</code>値は利用しない方が良い。</li><li>必要なプロパティのみが含まれている方が視認性が良い。</li></ul><p>なおGoogleの<a href="https://google.github.io/styleguide/jsoncstyleguide.xml?showone=Empty/Null_Property_Values#Empty/Null_Property_Values">JSON Style Guide</a>では、明確に<code>null</code>値が必要となる場合以外は、プロパティ自体含めない形が推奨（ここでいう<code>undefined</code>派）されています。</p><blockquote><p>If a property is optional or has an empty or null value, consider dropping the property from the JSON, unless there’s a strong semantic reason for its existence.</p></blockquote><h3 id="null派"><a href="#null派" class="headerlink" title="null派"></a>null派</h3><ul><li>データの構造の全量を把握できるため、<code>null</code>値を含めた方が良い。</li></ul><h3 id="null以外の方法で空値を表現する派"><a href="#null以外の方法で空値を表現する派" class="headerlink" title="null以外の方法で空値を表現する派"></a>null以外の方法で空値を表現する派</h3><p><code>null派</code>の亜種となりますが、データ型に応じては<code>null</code>以外の方法で空値を表現できる場合があり、明示的に<code>null</code>型を利用しない方法となります。</p><div class="scroll"><table><thead><tr><th align="left">データ型</th><th align="left">空値の表現</th></tr></thead><tbody><tr><td align="left">string</td><td align="left">“”（空文字）</td></tr><tr><td align="left">integer</td><td align="left">表現不可</td></tr><tr><td align="left">number</td><td align="left">表現不可</td></tr><tr><td align="left">boolean</td><td align="left">表現不可</td></tr><tr><td align="left">array</td><td align="left">[]（空配列）</td></tr><tr><td align="left">object</td><td align="left">{}（空オブジェクト）</td></tr></tbody></table></div><p>そもそも<code>integer</code>や<code>number</code>のような数値型やブーリアン型は空値を表現する方法がないので、この方法は採用できません。<br>数値について、例えば業務上自然数しか入りえない項目（例. 年齢）に対して<code>-1</code>のような値を利用して空値を表現するような場合を見かけますが、これは設計上望ましくないと考えます。</p><p>さらに言うと、空値の表現が可能な文字列やオブジェクト含め、後述するバリデーションの観点から、<code>null</code>型以外の型で空値を表現するのは基本的に望ましくないと考えています。</p><h3 id="筆者の意見"><a href="#筆者の意見" class="headerlink" title="筆者の意見"></a>筆者の意見</h3><p>結論から言うと原則<code>null</code>値は利用せずキー自体を含めない<code>undefined</code>が良いと思っています。<br>特にOpenAPIの仕様に基づいてAPI仕様をドキュメントする場合において、<code>null値</code>を許容するように記述するのは煩雑です。</p><p>ただしここで「原則」と言ったのはAPIのユースケースに応じて明確に<code>null</code>値を表現したいケースは存在すると考えています。</p><h4 id="ユースケースの観点"><a href="#ユースケースの観点" class="headerlink" title="ユースケースの観点"></a>ユースケースの観点</h4><p>先程のユーザリソースを例にCRUDを考えてみましょう。</p><h5 id="取得（GET）"><a href="#取得（GET）" class="headerlink" title="取得（GET）"></a>取得（GET）</h5><p><code>score</code>が存在する場合は、<code>score</code>値が返却されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X GET /users/00001</span><br><span class="line">&#123; <span class="string">&quot;id&quot;</span>: <span class="string">&quot;00001&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, score: 70 &#125;</span><br></pre></td></tr></table></figure><p><code>score</code>が存在しない場合は、レスポンスに<code>score</code>プロパティは含めません。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X GET /users/00001</span><br><span class="line">&#123; <span class="string">&quot;id&quot;</span>: <span class="string">&quot;00001&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span> &#125;</span><br></pre></td></tr></table></figure><h5 id="新規作成（POST）"><a href="#新規作成（POST）" class="headerlink" title="新規作成（POST）"></a>新規作成（POST）</h5><p>作成時に<code>score</code>値が存在する場合は、リクエストに<code>score</code>値を含めます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$curl</span> -X POST /users --data <span class="string">&#x27;&#123; &quot;name&quot;: &quot;Bob&quot;, &quot;score&quot;: 70 &#125;&#x27;</span></span><br><span class="line">&#123; <span class="string">&quot;id&quot;</span>: <span class="string">&quot;00001&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, score: 70 &#125;</span><br></pre></td></tr></table></figure><p>作成時に<code>score</code>値が存在しない場合は、リクエストに<code>score</code>プロパティは含めません。もちろんこの時のレスポンスとして作成したリソースを返却する場合、レスポンスの中にも<code>score</code>プロパティは含まれません。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$curl</span> -X POST /users --data <span class="string">&#x27;&#123; &quot;name&quot;: &quot;Bob&quot; &#125;&#x27;</span></span><br><span class="line">&#123; <span class="string">&quot;id&quot;</span>: <span class="string">&quot;00001&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span> &#125;</span><br></pre></td></tr></table></figure><h5 id="全件更新（PUT）"><a href="#全件更新（PUT）" class="headerlink" title="全件更新（PUT）"></a>全件更新（PUT）</h5><p>新規作成（POST）の場合と同様です。</p><h5 id="差分更新（PATCH）"><a href="#差分更新（PATCH）" class="headerlink" title="差分更新（PATCH）"></a>差分更新（PATCH）</h5><p>差分更新として指定された一部の項目のみを更新したいというケースは多からず存在するでしょう。この場合はnull値を明示的に指定する必要があると考えています。</p><p>というのもリクエストのプロパティからscore自体を除外してしまうと、更新対象外となってしまい意図した挙動となりません。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$curl</span> -X PATCH /users/00001 --data <span class="string">&#x27;&#123; &#125;&#x27;</span></span><br><span class="line">&#123; <span class="string">&quot;id&quot;</span>: <span class="string">&quot;00001&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, score: 70 &#125; // score　is not cleared.</span><br></pre></td></tr></table></figure><p>このような場合、明確に<code>null</code>値を指定してアップデートをする必要があります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$curl</span> -X PATCH /users/00001 --data <span class="string">&#x27;&#123; &quot;score&quot;: null &#125;&#x27;</span></span><br><span class="line">&#123; <span class="string">&quot;id&quot;</span>: <span class="string">&quot;00001&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span> &#125;  // score　is cleared.</span><br></pre></td></tr></table></figure><h4 id="バリデーションの観点"><a href="#バリデーションの観点" class="headerlink" title="バリデーションの観点"></a>バリデーションの観点</h4><p>リクエスト/レスポンス（特にリクエスト）はサーバ側でバリデーションを実施することが基本です。<br>先程例としてあげたユーザオブジェクトが<code>score</code>の代わりにオプショナルな属性として<code>email</code>を持つケースをもとに考えてみましょう。<br>バリデーションを行うため、<code>email</code>は<a href="https://datatracker.ietf.org/doc/html/rfc5321#section-4.1.2">RFC 5321</a>の仕様に則ったフォーマットを保持することを前提として考えます。</p><div class="scroll"><table><thead><tr><th>項目</th><th>データ型</th><th>必須</th><th>フォーマット</th></tr></thead><tbody><tr><td>ID</td><td>文字列</td><td>○</td><td></td></tr><tr><td>Name</td><td>文字列</td><td>○</td><td></td></tr><tr><td>Email</td><td>文字列</td><td></td><td>RFC 5321形式</td></tr></tbody></table></div><h5 id="undefinedで表現する場合"><a href="#undefinedで表現する場合" class="headerlink" title="undefinedで表現する場合"></a>undefinedで表現する場合</h5><p>OpenAPI定義は次のようになります。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">application/json:</span></span><br><span class="line">  <span class="attr">schema:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">id:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">name:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">email:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">format:</span> <span class="string">email</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">id</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">name</span></span><br></pre></td></tr></table></figure><p>JSON Schemaに基づいたValidation結果は次のようになり、特筆すべき事項はありません。</p><p>✅ <code>email</code>に適切なフォーマットの値が指定される場合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;00001&quot;</span>, <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;bob@example.com&quot;</span> &#125; <span class="comment">// Valid</span></span><br></pre></td></tr></table></figure><p>✅ <code>email</code>が存在しない場合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;00001&quot;</span>, <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span> &#125; <span class="comment">// Valid</span></span><br></pre></td></tr></table></figure><p>❌ <code>email</code>に不適切なフォーマットの値が指定される場合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;00001&quot;</span>, <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;invalid&quot;</span> &#125; <span class="comment">// Invalid</span></span><br></pre></td></tr></table></figure><h5 id="null型で表現する場合"><a href="#null型で表現する場合" class="headerlink" title="null型で表現する場合"></a>null型で表現する場合</h5><p>OpenAPI定義は次のようになります。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">application/json:</span></span><br><span class="line">  <span class="attr">schema:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">id:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">name:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">email:</span></span><br><span class="line">        <span class="attr">type:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">string</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;null&#x27;</span></span><br><span class="line">        <span class="attr">format:</span> <span class="string">email</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">id</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">name</span></span><br></pre></td></tr></table></figure><p>こちらもundefinedで表現した場合と同様にバリデーションについては特筆すべき事項はありません。</p><p>✅ <code>email</code>に適切なフォーマットの値が指定される場合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;00001&quot;</span>, <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;bob@example.com&quot;</span> &#125; <span class="comment">// Valid</span></span><br></pre></td></tr></table></figure><p>✅ <code>email</code>に<code>null</code>値が指定される場合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;00001&quot;</span>, <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">&quot;email&quot;</span>: <span class="literal">null</span> &#125; <span class="comment">// Valid</span></span><br></pre></td></tr></table></figure><p>❌ <code>email</code>に不適切なフォーマットの値が指定される場合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;00001&quot;</span>, <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;invalid&quot;</span> &#125; <span class="comment">// Invalid</span></span><br></pre></td></tr></table></figure><h5 id="null型以外で空値を表現する場合"><a href="#null型以外で空値を表現する場合" class="headerlink" title="null型以外で空値を表現する場合"></a>null型以外で空値を表現する場合</h5><p>最後に<code>email</code>の空値を<code>null</code>型ではなく空文字で表現する場合を考えてみましょう。<br>OpenAPI定義は次のようになります。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">application/json:</span></span><br><span class="line">  <span class="attr">schema:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">id:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">name:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">email:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">        <span class="attr">format:</span> <span class="string">email</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">id</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">name</span></span><br></pre></td></tr></table></figure><p>このときJSONにて空の<code>email</code>を表現するためには空文字を利用することになりますが、下記のJSONはJSON Schema ValidationでNGと判断されます。</p><p>❌ <code>email</code>に空文字が指定される場合</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;00001&quot;</span>, <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">&quot;email&quot;</span>: <span class="string">&quot;&quot;</span> &#125; <span class="comment">// Invalid</span></span><br></pre></td></tr></table></figure><p>これは空文字がメールアドレスのフォーマットとして許容されないからです。<br>null型の代わりに空文字を採用する場合、OpenAPIの定義上<code>format: email</code>を除いてあげないと、空値を表現することができません。これは本末転倒と言わざるを得ないでしょう。</p><h5 id="その他注意事項"><a href="#その他注意事項" class="headerlink" title="その他注意事項"></a>その他注意事項</h5><p>空値の表現にnull型を用いる場合で、<code>enum</code>（列挙型）を利用している場合は、型だけでなく<code>enum</code>の要素としても<code>null</code>を含めてあげないとエラーとなります。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">application/json:</span></span><br><span class="line">  <span class="attr">schema:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">id:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">name:</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="attr">color:</span></span><br><span class="line">        <span class="attr">type:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">string</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;null&#x27;</span></span><br><span class="line">        <span class="attr">enum:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;red&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&#x27;green&#x27;</span></span><br><span class="line">          <span class="bullet">-</span> <span class="literal">null</span> <span class="comment"># これがないとnull指定時にエラーとなる</span></span><br><span class="line">    <span class="attr">required:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">id</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">name</span></span><br></pre></td></tr></table></figure><h4 id="プログラムの観点"><a href="#プログラムの観点" class="headerlink" title="プログラムの観点"></a>プログラムの観点</h4><p>最後に実装するプログラム視点での注意点を補足しておこうと思います。</p><h5 id="クライアントサイド"><a href="#クライアントサイド" class="headerlink" title="クライアントサイド"></a>クライアントサイド</h5><p>フロントエンドがWEBの場合は、JavaScriptやTypeScriptを用いてクライアント側の実装をすることが多いと思います。<br>JavaScriptは言語としてundefined型とnull型を持つので上記のいずれのパターンにも、特に問題なく対応できると思っています。（今のところ筆者は課題感を持っていません。）</p><h5 id="サーバサイド"><a href="#サーバサイド" class="headerlink" title="サーバサイド"></a>サーバサイド</h5><p>サーバサイドについては、上述した差分更新のユースケースなどで<code>undefined</code>の場合と<code>null</code>値の場合を識別したい場合に少し工夫が必要になる場合があるかもしれません。</p><p>ほとんどのプログラムにおいてはJSONを対応するオブジェクトにデシリアライズすることになると思いますが、デシリアライズした後に上記の識別をしなければならないケースが該当します。</p><p>例えばGolangをで先程のユーザオブジェクトを素直に表現すると次のようになります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">ID    <span class="keyword">string</span>  <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Name  <span class="keyword">string</span>  <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Email *<span class="keyword">string</span> <span class="string">`json:&quot;email&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この場合、<code>email</code>が<code>undefined</code>の場合と<code>null</code>値の場合を判別することができません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// The email is undefined.</span></span><br><span class="line">user1 := &amp;User&#123;&#125;</span><br><span class="line">json.Unmarshal([]<span class="keyword">byte</span>(<span class="string">`&#123; &quot;id&quot;: &quot;00001&quot;, &quot;name&quot;: &quot;Bob&quot; &#125;`</span>), user1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The email is null.</span></span><br><span class="line">user2 := &amp;User&#123;&#125;</span><br><span class="line">json.Unmarshal([]<span class="keyword">byte</span>(<span class="string">`&#123; &quot;id&quot;: &quot;00001&quot;, &quot;name&quot;: &quot;Bob&quot;, &quot;email&quot;: null &#125;`</span>), user2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Both email values are nil</span></span><br><span class="line">fmt.Println(user1.Email == user2.Email)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>undefined</code>の場合と<code>null</code>値を判別したい場合は別途構造体を用意する形となります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NullString represents a string value that may be null.</span></span><br><span class="line"><span class="keyword">type</span> NullString <span class="keyword">struct</span> &#123;</span><br><span class="line">Value *<span class="keyword">string</span></span><br><span class="line">Set   <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v NullString)</span> <span class="title">MarshalJSON</span><span class="params">()</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> v.Set &#123;</span><br><span class="line"><span class="keyword">return</span> json.Marshal(v.Value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> json.Marshal(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *NullString)</span> <span class="title">UnmarshalJSON</span><span class="params">(data []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">v.Set = <span class="literal">true</span></span><br><span class="line"><span class="comment">// Return if the data is null</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">string</span>(data) == <span class="string">&quot;null&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := json.Unmarshal(data, &amp;v.Value); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v NullString)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> !v.Set &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&lt;nil&gt;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> v.Value == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;null&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> *v.Value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを用いてユーザオブジェクトを再定義すると下記のようになります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">ID    <span class="keyword">string</span>     <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">Name  <span class="keyword">string</span>     <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">Email NullString <span class="string">`json:&quot;email&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>undefined</code>の場合は<code>Set</code>プロパティが<code>false</code>、<code>null</code>値が指定された場合はは<code>Set</code>プロパティが<code>true</code>となります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// The email is undefined.</span></span><br><span class="line">user1 := &amp;User&#123;&#125;</span><br><span class="line">json.Unmarshal([]<span class="keyword">byte</span>(<span class="string">`&#123; &quot;id&quot;: &quot;00001&quot;, &quot;name&quot;: &quot;Bob&quot; &#125;`</span>), user1)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The email is null.</span></span><br><span class="line">user2 := &amp;User&#123;&#125;</span><br><span class="line">json.Unmarshal([]<span class="keyword">byte</span>(<span class="string">`&#123; &quot;id&quot;: &quot;00001&quot;, &quot;name&quot;: &quot;Bob&quot;, &quot;email&quot;: null &#125;`</span>), user2)</span><br><span class="line"></span><br><span class="line">fmt.Println(user1.Email.Set) <span class="comment">// false</span></span><br><span class="line">fmt.Println(user2.Email.Set) <span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>いかがでしたでしょうか。</p><p>この辺りの設計は一概に正解があるというものではないので、ぜひご意見ある方はコメントいただけますと幸いです。</p><p>いずれにしても設計・開発を推進していく上では、設計者・開発者でこのあたりの方針について認識を合わせ、システム全体として統一感のとれた作りにしておくことが大切だと思っています。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Swagger/">Swagger</category>
      
      <category domain="https://future-architect.github.io/tags/OpenAPI/">OpenAPI</category>
      
      <category domain="https://future-architect.github.io/tags/jsonschema/">jsonschema</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/">設計</category>
      
      
      <comments>https://future-architect.github.io/articles/20211028b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>人月の神話を読んでみた</title>
      <link>https://future-architect.github.io/articles/20211028a/</link>
      <guid>https://future-architect.github.io/articles/20211028a/</guid>
      <pubDate>Wed, 27 Oct 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;TIGの伊藤真彦です&lt;/p&gt;
&lt;p&gt;この記事は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>TIGの伊藤真彦です</p><p>この記事は<a href="/articles/20211027a/">秋のブログ週間</a>の2記事目です。</p><p>この前新宿で複数の用事を済ませていた際、隙間時間が暇になったため人月の神話を買ってみました。紀伊国屋新宿本店の技術書コーナーはほぼ全ての技術書が置いてあるのではと感じるほどの物量があるのでおススメです。</p><p>名著として名高い事は知っており、タイトルに惹かれて読んでみましたがとても良いものでした、読書の秋におススメの一冊として紹介します。</p><h2 id="人月の神話とは"><a href="#人月の神話とは" class="headerlink" title="人月の神話とは"></a>人月の神話とは</h2><img src="/images/20211028a/image.png" alt="image.png" width="357" height="499" loading="lazy"><p>皆さんは「<a href="https://www.amazon.co.jp/%E4%BA%BA%E6%9C%88%E3%81%AE%E7%A5%9E%E8%A9%B1%E3%80%90%E6%96%B0%E8%A3%85%E7%89%88%E3%80%91-Jr-FrederickP-Brooks/dp/4621066080">人月の神話</a>」という書籍をご存じでしょうか。</p><p>ITの世界には名著と呼ばれる書籍がいくつかあります。人月の神話はそのうちの一冊です。フレデリック・ブルックスによるソフトウェア工学、およびプロジェクトマネジメントに関する書籍です。</p><p>最初の刊行はなんと1975年、実に40年以上の時を経て未だに読まれている書籍です。進歩が速く、常に新しい知識が求められるイメージのIT業界において、これ程の期間変わらず支持されている書籍がどんなものか読んでみたくなりました。</p><h2 id="書籍の概要"><a href="#書籍の概要" class="headerlink" title="書籍の概要"></a>書籍の概要</h2><p>フレデリック・ブルックスの自身の経験に基づいた、プロジェクトの成功、失敗に関する分析、タイトルの通り人月という単位での計算をもってプロジェクトを見積もったり、遅延を解消できるという見通しが誤りであることが神話という表現を用いて展開されます。</p><blockquote><p>私たちが使っている見積もり手法は、コスト計算を中心に作られたものであり、労力と進捗を混同している。人月は、人を惑わす危険な神話である。なぜなら、人月は、人と月が置き換え可能であることを暗示しているからである。</p></blockquote><p>各章がどのようなトピックで記載されているかは<a href="https://ja.wikipedia.org/wiki/%E4%BA%BA%E6%9C%88%E3%81%AE%E7%A5%9E%E8%A9%B1">wikipedia</a>にもまとめられています。</p><h2 id="人月の神話の何が良いのか"><a href="#人月の神話の何が良いのか" class="headerlink" title="人月の神話の何が良いのか"></a>人月の神話の何が良いのか</h2><p>この書籍を読むことでプロジェクトが失敗する事のない最強のノウハウが手に入るわけではなく、プロジェクトが上手くいかない経験を積み重ねた人生経験を追体験するような読後感を得ることができます。</p><p>20周年記念に追記された「銀の弾などない——ソフトウェアエンジニアリングの本質と偶有的事項」といった章題からも冷静な分析眼が伺えます。</p><p>この書籍の素晴らしい所は、フレデリック・ブルックスがエンジニアであり、またエンジニアの中でも極めて難しい課題を経験してきた事から産まれる着眼点をもって執筆されている所にあると私は感じています。</p><h3 id="エンジニア的着眼点"><a href="#エンジニア的着眼点" class="headerlink" title="エンジニア的着眼点"></a>エンジニア的着眼点</h3><p>この書籍では、難航するプロジェクトを第1章でタールの沼と表現しています。</p><blockquote><p>太古の昔から、タールの沼に落ちた巨大な獣が死にもの狂いで岸に這い上がろうとしている光景ほど、鮮烈なものはない。恐竜やマンモス、それにサーベル・タイガーが、タールに捕らえられまいとしてもがく様が目に浮かぶ。激しくもがけばもがくほど、タールは一層絡みつき、どんなに力強い獣でも、また賢く器用な獣でも、ついには沈んでいってしまう。<br>　大規模システムプログラム開発は、過去十年以上もの間そうしたタールの沼のようなものだった。そして、多くの強大な獣たちが、その中へ乱暴に突き落とされてきた。たいていは稼働システムを作り、這い上がってきたものの、目標とスケジュール、それに予算にかなったものはほとんどなかった。</p></blockquote><p>また、同じ章でエンジニアとしての仕事の楽しみを、作る喜びと称して下記のように説明しています。</p><blockquote><p>なぜプログラミングは楽しいのだろうか。プログラミングする人は、一体どんな満足を得ようとしているのだろう。<br>まず言えることは、物を作り上げる純粋な喜びがあるということだ。子供が泥団子ではしゃぐように、大人は物を組み立てること、特に自分でデザインしたものを作り上げることを楽しむ。</p></blockquote><p>この1章の時点で作者が書籍執筆業で生きるために本を書いている人物ではなく、生粋のエンジニアである事が感じられます。以降の章で語られるプロジェクトの経験談も刺さる人にとっては共感できる内容の塊です。</p><p>プログラミング自体が楽しく創造的なものであることは同じく名著として名高い「<a href="https://www.amazon.co.jp/%E3%83%8F%E3%83%83%E3%82%AB%E3%83%BC%E3%81%A8%E7%94%BB%E5%AE%B6-%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E6%99%82%E4%BB%A3%E3%81%AE%E5%89%B5%E9%80%A0%E8%80%85%E3%81%9F%E3%81%A1-%E3%83%9D%E3%83%BC%E3%83%AB-%E3%82%B0%E3%83%AC%E3%82%A2%E3%83%A0/dp/4274065979">ハッカーと画家</a>」でも語られていました。</p><p>こうしたマインドセットの持ち主から、人月の神話はバイブルとして長らく支えられてきたのでしょう。</p><h3 id="フレデリック・ブルックスの経験値"><a href="#フレデリック・ブルックスの経験値" class="headerlink" title="フレデリック・ブルックスの経験値"></a>フレデリック・ブルックスの経験値</h3><p>フレデリック・ブルックスが携わったプロジェクトはIBM のメインフレームである System/360 およびそのオペレーティングシステム OS/360の開発が大きな業績として挙げられています。</p><p>OSを作るということは、製品の用途は無限とも思えるほど膨大であり、用途、ユーザーが定義できるシステムと比べ途方もない労力が必要になることが想像できます。実際OS/360は1000人規模のチームが5年かけた5000人年のプロジェクトだったようです。</p><p>それが如何に難しいプロジェクトであるかは書籍の中でも、プログラム、プログラミング製品、プログラミングシステム、プログラミングシステム製品、という表現で説明されています。</p><ul><li>プログラム: 作成者によって実行可能な完結したプログラム</li><li>プログラミング製品: 誰でもテスト、修正、拡張が可能なものとして信頼性を高め、ドキュメントを整備したプログラム</li><li>プログラミングシステム: 相互に関連するプログラムが調整され、形式が統制され、大きな仕事をするために集まったもの</li><li>プログラミングシステム製品: プログラミングシステムをプログラミング製品として整備するもの</li></ul><p>OSは言うまでもなくプログラミングシステム製品の中でも究極的に大きなものです。</p><p>製品としての高い評価を得る品質を満たすためには、あらゆる入力へのテストケースを網羅し、信頼性を充分なものにする必要があります。膨大なプログラムのシステム間連携により膨れ上がった組み合わせは幾何学級数的に増えていき、単純なプログラムの9倍の労力が必要であると書かれています。</p><p>大抵は特定のユーザーに向けた用途の決まったシステム開発を経験する事の方が圧倒的に多く、業務としてこのレベルで複雑なシステムを経験する事は少ないはずです。そんなOS開発者がタールの沼に沈み苦しんだ経験であれば人生の大先輩から得られる教訓としてはこの上ないものだと思います。</p><h2 id="何故数十年にわたり読まれるのか"><a href="#何故数十年にわたり読まれるのか" class="headerlink" title="何故数十年にわたり読まれるのか"></a>何故数十年にわたり読まれるのか</h2><p>この書籍で語られている事は特定の技術、また開発手法にフォーカスしたものではありません。</p><p>普遍的な事が鋭く信頼できる精度で述べられています。例えば人工知能が人間の仕事を革命的に変えていく事はない、といったことが1995年の追記の段階で書かれるなど、先進的かつ2020年基準の現時点で見ても正解と言っても良いものが書かれています。</p><p>また執筆20年目の段階で、18章『人月の神話』の命題　-真か偽かが追記され、書かれた内容が正しかったか否かを著者本人が改めて分析すると同時にまとめを行っています。</p><p>普遍的なものであるため、読むことで明日から仕事ぶりが変わるようなものではありませんが、物の見方は変わると思います。そもそも銀の弾丸は無いと書いてある本を読むわけですからこの本を読んでも明日から劇的に何かが変わるわけではありません。銀の弾丸は無い事と、人を追加してもプロジェクトの進捗は良くならない事を知ることができるわけです、ベテランの視座が手に入る書籍です。</p><p>関わったプロジェクトが上手くいかない事に悩む時は誰にもあると思いますが、先にタールの沼に沈んだ人の経験談を読むことは精神衛生を保つうえで大きく役に立つと感じました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>人月の神話は40年経っても名著として評価されている</li><li>信頼できる生粋のエンジニアが書いたものであり、読者がエンジニアであればきっと刺さる</li><li>内容は普遍的であるため40年経っても風化しない</li></ul><p>個人的にはプロジェクトマネジメントの教科書的な書籍はエンジニアの言葉で書かれていない物が多く、読んでも薄味で実りになるものが少ないと感じていました。<br>この書籍はそういった物足りなさを埋めてくれるものであり、今回お勧めしたいと思いました。</p><p><a href="/articles/20211027a/">秋のブログ週間</a>の2つ目でした。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Management/">Management</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88/">マネジメント</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/%E4%BA%BA%E6%9C%88%E3%81%AE%E7%A5%9E%E8%A9%B1/">人月の神話</category>
      
      
      <comments>https://future-architect.github.io/articles/20211028a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>リモートワークになって始めた1 on 1ミーティング</title>
      <link>https://future-architect.github.io/articles/20211027b/</link>
      <guid>https://future-architect.github.io/articles/20211027b/</guid>
      <pubDate>Tue, 26 Oct 2021 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20211027b/top.jpeg&quot; alt=&quot;&quot; title=&quot;Uwe KernによるPixabayからの画像&quot; width=&quot;1200&quot; height=&quot;800&quot;&gt;

&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20211027b/top.jpeg" alt="" title="Uwe KernによるPixabayからの画像" width="1200" height="800"><p><a href="/articles/20211027a/">秋のブログ週間2021</a>の1日目の記事です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG DXユニット真野です。小さいですが複数チームのマネージャーをしています。</p><p>フューチャーでは<a href="https://note.future.co.jp/n/n4bda3e393137">フューチャー流「コロナ時代」の子育てワークスタイル | 未来報</a>にあるように、2020年の2月からリモートワーク率が急激に上昇し（体感）、同年4月からは全社フルリモート体制になりました。私もまともに出社したのは事前に郵送で送ればよいはずの年末調整書類を直前までサボって物理的に配送したのと、チームの座席エリア開放のために放置していた書籍類を回収にした2回くらいの記憶です。</p><p>リモートワークを行う前からGoogle Workspaceやら<a href="https://future-architect.github.io/articles/20210712a/">Slack Enterprise Gridを導入したり</a>やらGitLab（GitHub）などの頼もしい非同期コミュニケーションツールが整理されていたし、ナレッジはこういった技術ブログに投稿する雰囲気があったので割とすぐ順応できているなと記憶があります。</p><p>そんな感じで業務は円滑に回り、プレイングマネージャーちっくに自分の仕事を進行する分には良いのですが、圧倒的にメンバーとのコミュニケーションは減りました。もちろんタスクやアーキテクチャや開発手法の説明は積極的にGoogle Meetを使って時間を確保するようにしましたが、メンバーその人自身に向き合う時間がどうしても減ったためか、どうも距離感を感じるようになりました。一言でいえば期待値のちょっとしたズレを感じるようになりました。</p><p>そのため、定期的にコミュニケーションやフィードバックを目的に、1 on 1 をすることに決めました。実際に運用を開始して1年以上経過しています。その結果としていくつかナレッジらしきものが貯まってきたのでまとめて紹介します。</p><h2 id="1-on-1とは"><a href="#1-on-1とは" class="headerlink" title="1 on 1とは"></a>1 on 1とは</h2><p> <a href="https://www.adecco.co.jp/client/useful/190918_1on1">1on1ミーティングとは？ 意味やメリット、話すことがない場合の対処法や事例など｜企業のご担当者様（アデコ）</a>から引用します。</p><blockquote><p>1on1ミーティングは、もともと米国のシリコンバレー企業が取り組みはじめたマネジメントの手法です。半導体メーカーの巨人、インテルがはじめたといわれていて、同社においては上司と部下の関係性構築のうえで欠かせない取り組みとなっています。<br>1on1ミーティングは、部下が主役となり、上司と1対1で行います。頻度は週1回から月1回ほどで定期的に開催し、部下は業務の課題や悩みを上司と共有するというスタイルです。上司は部下の話を真摯に聴き、フィードバックを行います。</p></blockquote><p>名前の通り、1対1で話す面談のようなものです。お悩み相談も実施しますが、自分（リーダー）から見てのフィードバックや、メンバー自身の成長を促すような、振り返りの場としての機能も持たせます。最初は距離感がつかめない場合もあると思いますので、適度に雑談を聞いたりもします。</p><p>同僚の高野さんがたまにOne on Oneって言ってきて、ワンワンワン🐶かなって見間違えすることも多いですが、1 on 1と記載することが周囲では多いなという印象です。</p><p>書籍としては<a href="https://www.amazon.co.jp/dp/B08YJ9Q19S/">実践！１ｏｎ１ミーティング (日経文庫)</a> が読んでいてとても学びになりました。個人的には1 on 1の開催手法を学ぶ以外にも、コーチングとしての大事なことも知れた気がしています。</p><h2 id="規模感、どれくらいの頻度、回数なのか"><a href="#規模感、どれくらいの頻度、回数なのか" class="headerlink" title="規模感、どれくらいの頻度、回数なのか"></a>規模感、どれくらいの頻度、回数なのか</h2><p>私が実施している概況です。特筆すべき点は無いと思います。</p><ul><li>受け持っているメンバー<ul><li>徐々に増えていますが最初は3名程度</li><li>2021年10月では10名に対して1 on 1を継続しています</li></ul></li><li>頻度<ul><li>基本的には1回/月・人</li><li>なれるまでは隔週</li><li>本当に細かく見たいときは週次にしていますが、割と大変なのですぐ隔週にします</li></ul></li><li>時間<ul><li>1回あたり30分にしています</li><li>どんなに早くても25分間は何か話すようにしています</li><li>延長はほぼ無いですが、たまに盛り上がると2,3分オーバーします（タイムマネジメントが悪いですね、良くないですね）</li></ul></li><li>ツール<ul><li>Google Meetをつかっています。何でも良いと思います</li></ul></li></ul><h2 id="実施のコツ"><a href="#実施のコツ" class="headerlink" title="実施のコツ"></a>実施のコツ</h2><p>相手をするのが人間であるため、ケースバイケースのことが多いですがなるべく汎用そうなネタをまとめました。</p><h3 id="初回は開催の意図をしっかり伝える"><a href="#初回は開催の意図をしっかり伝える" class="headerlink" title="初回は開催の意図をしっかり伝える"></a>初回は開催の意図をしっかり伝える</h3><p>お初のメンバー（特に新人さん）は、1 on 1が何か（雑談するの？とか）分かっていない方も多いので、どういう意図・目的で実施しているかしっかり伝えます。</p><p>私がよく伝える内容は以下です</p><ul><li>1 on 1 を開催する意図とは？<ul><li>こまめなフィードバックをしたい<ul><li>半期ごとの評価時に行うフィードバックをもっと刻みたい</li><li>「あの時、実はこうして欲しかった」みたいに伝える人もいるけど、「その時に言ってよ」と過去の自分が思ったのも影響している</li></ul></li><li>私のビュー（視点）からはこういうふうに見えていると伝えたい<ul><li>良くも悪くも事実だと思うので、やったことが伝わってない場合は見せ方を変えるなどに活かしてほしい。活かしたくないなら無視して欲しい</li></ul></li><li>アドバイスをできる範囲で。一方で自分過去の武勇伝を語っても仕方ないので、なるべく自分で考える切っ掛けを与えようと思う</li><li>振り返りの場としても活用して欲しい</li><li>キャリア志向にそったタスクアサインにも活かしたい</li><li>もちろん、不満や業務上の聞きにくい質問もOK。それで時間が潰れたら別途枠を用意する</li></ul></li></ul><h3 id="1-on-1の会議通知はリーダー（自分）から設定する"><a href="#1-on-1の会議通知はリーダー（自分）から設定する" class="headerlink" title="1 on 1の会議通知はリーダー（自分）から設定する"></a>1 on 1の会議通知はリーダー（自分）から設定する</h3><ul><li>1 on 1はリーダー（自分）が実施したいはずなので、その気持ち通り自分で設定します</li><li>おそらく私がメンバーの立場で、自由に会議通知を入れてねって言われたら多分面倒くさがって入れないので、そういう人を予防する目的です<ul><li>そして、おそらくリーダーの方がカレンダーが会議通知で埋まっているので、探す手間をメンバーにおわせない方がヘルシー</li></ul></li><li>そもそも、リーダーの方がおそらく突然の会議など差し込みが多く予定が変動的なので、自分で管理した方が楽だという結論を得ました<ul><li>もし差し込みが入った場合は自分でリスケするだけです</li></ul></li><li>Google Calendarの場合は繰り返し設定を入れれば良いので簡単です</li></ul><h3 id="1-on-1時の見せ方"><a href="#1-on-1時の見せ方" class="headerlink" title="1 on 1時の見せ方"></a>1 on 1時の見せ方</h3><ul><li>私のカメラはONにしています。特に「自分のビューからこう見えているよ」と伝えるときは、どういう表情で言っているか重要かもしれないためです<ul><li>もう何年もすると、カメラON/OFFとか気にならなくなる人類が増えそうですよね</li><li>メンバー側は不要だと思います（ON/OFFを気にしたことがない）</li></ul></li><li>VS Codeでとっている面談メモを画面にリアルタイム表示する<ul><li>自分の顔を大画面でずっと見たくないだろう…、というネガティブな感情が生まれた背景ですが、便利で良いです</li><li>何かしらテキストに起こすと、話が脱線しても元に戻りやすくて非常に良いです</li><li>私がメモを取るようにしています。基本的にはメンバーには手ぶらで参加できるようにしています</li></ul></li><li>メモは「●●さん_1on1メモ.md」とかってタイトルにして、どんどん追記するようにしています<ul><li>この取得したメモは、毎回終了後にSlackのDMに送ってシェアするようにしています</li><li>ついでに、なんか一言を添えて共有すると親近感も湧くかなと思っています</li></ul></li></ul><p>画面共有でメモ表示はけっこう重要かなって思っています。あと、重要ですがSlackとかTwitterは見ないようにしています。脇見、内職は当然厳禁。</p><h3 id="毎回、立ち上がりは前回メモを読んでいる"><a href="#毎回、立ち上がりは前回メモを読んでいる" class="headerlink" title="毎回、立ち上がりは前回メモを読んでいる"></a>毎回、立ち上がりは前回メモを読んでいる</h3><ul><li>前回作成したメモは、次の会でも見るようにしています<ul><li>その時に考えた反省点とか、改善プランとかがどうなった？みたいなところから話すようにしています<ul><li>自分も過去に話した内容を思い出すということで、ワンクッション置くのは良いTipsだなと思います</li></ul></li></ul></li><li>「前回はこういうこと話したよね」からの、これは解決したけど別の事案がでて大変だったよーとか</li><li>何かしらアクション（目標）を立てていたら、少しでもできたかどうかを観測します<ul><li>抽象度が高い目標を経てても隔週～1ヶ月だとなかなか改善が難しいので、大体はより具体的な目標設定にすることが多いです</li></ul></li></ul><h3 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h3><p>基本的にはメンバーに準備をさせないというポリシーをとっています。</p><ul><li>業務の邪魔をしたくない</li><li>手ぶらで、気軽にがポリシー</li></ul><p>そして正直運営側の自分もほぼ準備していないです。たまに明らかにこうした方が良いなって思うことがあれば事前にメモに追記しておきます。</p><ul><li>準備していないから、1 on 1をリスケする、といった本末転倒なことにならないようにします</li><li>何もなくても前回のメモがあるため、少なくてもその内容を読み合わせるだけで変わった点を話してもらって、一緒に悩んだり考えたりすることができます</li></ul><p>何回か、事前にGitHubのPull Requestの内容や、Slackなどでの議論内容を探して読み込んでいましたが、なぜかあまり役立たずほとんど見なくなりました。なんというか断片的な情報を元にして話すと、一面的すぎてあまり役立たなかったです。</p><h3 id="ペース配分を無理しない"><a href="#ペース配分を無理しない" class="headerlink" title="ペース配分を無理しない"></a>ペース配分を無理しない</h3><p>1 on 1立ち上げ時から、現実的な頻度や時間でもって <strong>継続できること</strong> に何よりこだわりました。そのため、1人に対して30分・月次がベースラインにしています。前提として<a href="/articles/20200129/">リモートワークを促進させるDaily Stand-up Meeting </a>などで一定の情報交換があるので、月次が可能かなと思います。関わりが薄い場合は隔週頻度にしたほうが良いかなと思います。</p><p>特に月次だと足りないと思うタイミングは以下です</p><ul><li>新規参画者の場合（特にカルチャーの違うチームからのジョインや・他社からの転職者）<ul><li>この場合は、月次だと遅すぎるので、最初の1ヶ月は週次が良いかなと思います</li></ul></li><li>自分が直接関わっていないチームのメンバー<ul><li>業務上の関わりが限定的で、Slackチャネルを見れるとか、週1のミーティングで同席する程度だとします</li><li>この場合は月次だと色々タイミングを逃すことが多いかも知れないので、いったん厚めに取ることをお勧めします</li></ul></li></ul><h3 id="OJTメンバーに対して"><a href="#OJTメンバーに対して" class="headerlink" title="OJTメンバーに対して"></a>OJTメンバーに対して</h3><p>逆に1 on 1はOJT中のメンバーに対しては実施しないポリシーです。</p><ul><li>OJT面談はOJT自体の取り組みとして開催しているはず</li><li>OJTトレーナーと異なるアドバイスをして、混乱させてしまうと申し訳ない</li></ul><p>どちらかといえば、もしOJT中のメンバーに対してフィードバックをしたい場合は、OJT面談に自分も参加した方が良いと思います。</p><h3 id="1-on-1に別の人が参加してきたいと言って来た時"><a href="#1-on-1に別の人が参加してきたいと言って来た時" class="headerlink" title="1 on 1に別の人が参加してきたいと言って来た時"></a>1 on 1に別の人が参加してきたいと言って来た時</h3><p>基本的には1対1の面談だと思っているので、自分とは別のリーダ役が参加したいと言ってきた場合は、別枠を確保してそちらで話したほうが良いでしょう。</p><p>特にメンバー1人に対して、1 on 1をするリーダーが1名であるという縛りは無いため、必要に応じて複数人で実施するのもありかなとは思います。色々な人が関わってメンバーのキャリア形成に寄与していきたいですね。</p><h3 id="業務（仕事）についての話題にならないか"><a href="#業務（仕事）についての話題にならないか" class="headerlink" title="業務（仕事）についての話題にならないか"></a>業務（仕事）についての話題にならないか</h3><p>1 on 1面談なのに、「あのタスクの背景は～」とか「タスクAを終わらせてからタスクBに着手しよう」といったバリバリ業務の内容の方が盛り上がることがあります。正直、これはこれでありかと思います。つまり本業務に対する同期コミュニケーションが不足していたということが分かったということだからです。</p><p>この場合は以下の手順を取ります。</p><ul><li>1 on 1面談としては業務の話の方が優先度が高い（盛り上がる）のであればその時間に当てる<ul><li>リーダーとして意思決定や、メンバーに対するインプットが不足しているのであれば、別途リーダーである自分自身の振る舞いを改善する</li></ul></li><li>その翌週など別の開催日に改めて 1 on 1面談を実施する<ul><li>もっとメンバーにとって中長期的にプラスな内容を話せるようになるまで繰り返す</li></ul></li></ul><h3 id="雑談にならないか"><a href="#雑談にならないか" class="headerlink" title="雑談にならないか"></a>雑談にならないか</h3><p>雑談ですが、やはり適度に入れた方が有効です。お互いのキャラクターが分かったほうが、発言の真意が掴めやすいので適度に差し込みます。</p><p>注意としては、初回～2回目くらいまでは雑談を入れないことです。最初に雑談成分が多めだと、そういう趣旨の話だと勘違いされる恐れがあるためです。</p><p>適度に回数をこなした3回目以降に織り交ぜていく方がベターかなと思います。</p><h3 id="鑑定魔法"><a href="#鑑定魔法" class="headerlink" title="鑑定魔法"></a>鑑定魔法</h3><p>たまに用いる、状態を把握する質問です。自分自身が普通に気になるということでもあります。</p><ul><li>「成長実感を感じていますか？」<ul><li>業務で学びのポイントが減っていると、仕事のクオリティも下がる可能性があるので注意です</li><li>純粋にロールを変えることもあれば、見方を変えたり立ち位置を変えられないかといったこともアドバイスします</li><li>技術的には、多少オーバーエンジニアリングにトライしてみるなども有効打です（ちょっとしたツールなどは特にお勧め）</li></ul></li><li>「今後、伸ばしたい領域があるか」<ul><li>技術面なのか、ソフトスキル面なのかなど</li><li>目線が直近の部分に向きすぎている時にバランスを取る時に使ったりもします</li></ul></li></ul><h3 id="あまり心を開いてくれなさそうなメンバーに対して"><a href="#あまり心を開いてくれなさそうなメンバーに対して" class="headerlink" title="あまり心を開いてくれなさそうなメンバーに対して"></a>あまり心を開いてくれなさそうなメンバーに対して</h3><p>うまく心理的安全性をリーダーである自分自身が作れないと感じるときがあります（過去1例）。その時は別途メンター役を別の同僚に依頼します。</p><p>1 on 1 だからといって、全てリーダー自身が解決する必然性もないですし、うまく周りを巻き込みましょう。どうしても相性ってあるかなと思います。</p><ul><li>メンターを依頼するのはあり<ul><li>Nヶ月などスポットの依頼だと気軽にOKしてくれやすい気がします</li></ul></li></ul><p>もし、メンバーの状況によってはメンタルケア的なものが重要な場合もあります。もし、話していて状態がよろしくなければ、まず以下のどの状態かは見極めるようにします。</p><ul><li>コンフォートゾーン</li><li>ストレッチゾーン</li><li>パニックゾーン</li></ul><p>参考→ <a href="https://motivation-up.com/motivation/comfortzone.html">コンフォートゾーンとは？成長のために理解すべき３つの領域｜モチラボ</a></p><p>パニックゾーンにちょっと踏み込んでいるなと感じたら、任せたロールの一部を巻き取ったり移譲したりとスコープ調整をします。これまたメンターと話してもらったりすることも検討します。万が一こういった状態でしたら、超特急で対応するようにしています。パニックゾーン寄りになるパターンは、新しいチームにジョインしたタイミングとかが多いので、そこの見極めは気をつけるとベターかなと思います。</p><h3 id="急ぎは禁物"><a href="#急ぎは禁物" class="headerlink" title="急ぎは禁物"></a>急ぎは禁物</h3><p>なるべくすぐに成長してほしいな～という考えから、改善ポイントを大量に伝えたい状況も多々あります。</p><p>ただ、これはリーダーから見たときの押しつけになっていないか注意を払う必要があります。他のトピックにも書きましたが本人がその課題/改善点に自分から実感を持って気がつくことが非常に重要です。それでないと、先々週（先月）も同じことを言ったのに改善していないな…となりお互い不幸な時間が続いてしまいます。もちろん状況次第ですが、焦らず、じっくりとメンバー側の考えを引き出すように心がけます。</p><p>また、メンバーのランクアップ志向を見極めることはけっこう重要だなと思います。例えば、今期、来期などなるべく早くランクアップしたいと考えているのであれば、ややインプットを多めに伝えても良いかなと思います。一方でランクアップより地力をじっくりと自分のペースで高めたい人には、その人のペースで伝えてあげた方が響くと思います。相手の志向に応じて使い分ける、言ってみれば当たり前のことなんですが私は最初全然できていなかったので引き続き注意して臨んでいます。</p><h3 id="話すときの態度"><a href="#話すときの態度" class="headerlink" title="話すときの態度"></a>話すときの態度</h3><ul><li>できる限り（限界はあるけど）客観的に仕事ぶりを見ての所感を伝える<ul><li>この時、良いところは”褒める”。可能な限り正しい評価関数であるために</li><li>何か改善ポイントを伝えるために、2,3個褒める</li></ul></li><li>どういう成果出したというよりは、どこに悩みがありそうか（伸びしろがありそうか）を探す</li><li>改善点は感情を込めず伝える。あくまで悪いところではなく、”伸びしろ” であることはけっこう強調しする</li></ul><p>基本的にはメンバーの中長期的な成長を見出すコーチングとしての側面が強いと思うので、そこを踏み間違えない。</p><p>また、成長があまり感じられない場面もあります。本人の意思が大事だなと感じます。</p><ul><li>本人の意欲があるならいろいろ一緒に考える<ul><li>リーダー側が張り切って「●●なところがあるから、こうしたら？」が全く響かない時があるので、無理強いはしない</li></ul></li><li>注意として、本人から改善の言葉がでたとしても、実はあんまり前向きじゃないときもある<ul><li>むしろ強みを伸ばす方向に持っていって自信を持ってもらって勢いを付けたほうが良いこともあるのでバランス</li><li>確実に成長しそうな方面に持っていくのもあり<ul><li>全てはつながっているし、遠回りしても良いと思う（一ヶ月単位で人間は変わるものだと考える）</li></ul></li></ul></li></ul><p>また、基本的な姿勢は <strong>傾聴</strong> だと思うので、できる限りうまく問いかけて、その考えを聞くということを心がけます。</p><h3 id="継続に向けての心構え"><a href="#継続に向けての心構え" class="headerlink" title="継続に向けての心構え"></a>継続に向けての心構え</h3><p>1 on 1 ですが、開始する前は時間かかりすぎじゃね？って思っていました。今は次のように考えています</p><ul><li>時間は <strong>天引き</strong> だと考える<ul><li>午前の朝会に連続するとちょうどよい</li></ul></li><li>メンバー1人1人に、<strong>時間を取るという姿勢そのものが重要</strong><ul><li>何を話すかではなく、時間をとるという行為そのものが重要だって誰かが言っていて、励まされています</li><li>うまいこと言えなくてもセーフ</li></ul></li><li>メンバー1人に対して、隔週開催で月1hも投下できないとすると、そもそもチーミングが崩壊している気がする<ul><li>チーミングを見直すキッカケになる？</li></ul></li><li>仮に、あるメンバーが離脱すると考えるとリスクが大きい。リスクヘッジとして1人に対して月1~2回で0.5h開催は悪くない投資</li></ul><h2 id="実施してみてどうなったか"><a href="#実施してみてどうなったか" class="headerlink" title="実施してみてどうなったか"></a>実施してみてどうなったか</h2><p>対話を通してリーダーである自分自身も色々な着眼点を得ることができているなと思います。</p><ul><li>自分・メンバーの評価のすれ違いは減った<ul><li>半年ごとの評価でのズレはほぼなくなった</li></ul></li><li>副作用として、業務上インプットや基礎スキルが不足している状態も素早く分かり、タスク組み換えなど本業務の推進にも役立っています</li></ul><p>特に期待値のすり合わせは抜群です。</p><p>メンバーに対して●●な仕事が希望を言えば来週中くらいに徐々にできて欲しいなとモヤモヤするときがあったんですが、本人としてはかなりマイペースで数ヶ月ではなく数年スパンでそういった仕事ができれば良いと考えているなど、成長を目指す点は同じかも知れないですが、スピード感という点で様々な考えがあることに気が付きました。（当たり前の話ですよね）</p><p>総じて、もはやこれを実施していない時がどういう状態か想像できないほど不可欠だなと感じています。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>フルリモートワークになって1.5年くらいですが、その中で1 on 1ミーティングを継続してみて自分が大事だなと思った点をまとめました。</p><p>扱うのは人間であるため、奥深い領域ですが、うまく1 on 1ミーティングを活用してお互い成長したいですね。</p><p><a href="/articles/20211027a/">秋のブログ週間2021</a>の1日目の記事でした。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Management/">Management</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88/">マネジメント</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/">リモートワーク</category>
      
      <category domain="https://future-architect.github.io/tags/1on1/">1on1</category>
      
      
      <comments>https://future-architect.github.io/articles/20211027b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>秋のブログ週間連載2021を始めます</title>
      <link>https://future-architect.github.io/articles/20211027a/</link>
      <guid>https://future-architect.github.io/articles/20211027a/</guid>
      <pubDate>Tue, 26 Oct 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;2020年に実施した秋のブログ週間を開始します。2021年も引き続き9名の執筆陣による9記事を予定しています。&lt;/p&gt;
&lt;img</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>TIGの伊藤真彦です。</p><p>2020年に実施した秋のブログ週間を開始します。2021年も引き続き9名の執筆陣による9記事を予定しています。</p><img src="/images/20211027a/pexels-olia-danilevich-5490805.jpg" alt="pexels-olia-danilevich-5490805.jpg" width="1200" height="800" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>2021年の秋はApple M1 Pro/Maxチップを搭載したMacBook Proが発売されたのが大きな話題でしょうか。</p><p>気温の変化が例年より激しく、秋の趣を楽しむ間も無い勢いですが、秋のブログ週間の時期がやってきました。</p><p><a href="/articles/20201026/">2020年の連載</a>同様、秋の夜長を楽しめるような、コーヒーや紅茶やお酒を片手にゆっくり読めるような <strong>いつもより読み物成分多め</strong>の連載を行います。</p><h2 id="秋のブログ週間連載とは"><a href="#秋のブログ週間連載とは" class="headerlink" title="秋のブログ週間連載とは"></a>秋のブログ週間連載とは</h2><p>2020年から始まったブログ連載企画で、秋の読書週間（文化の日を中心とした10/27〜11/9の2週間）の平日にブログ記事を投稿していこうというイベントです。普段は○○技術への入門といった形式の記事が多いですが、そういったプログラミングとは少し趣を変えていきます。普段フューチャー技術ブログをあまり読まない人にも記事が届くと良いなと考えています。</p><h2 id="公開スケジュール"><a href="#公開スケジュール" class="headerlink" title="公開スケジュール"></a>公開スケジュール</h2><div class="scroll"><table><thead><tr><th>日付</th><th>執筆者</th><th>タイトル</th></tr></thead><tbody><tr><td>10/27</td><td>真野隼記</td><td><a href="/articles/20211027b/">リモートワークになって始めた1 on 1ミーティング</a></td></tr><tr><td>10/28</td><td>伊藤真彦</td><td><a href="/articles/20211028a/">人月の神話を読んでみた</a></td></tr><tr><td>10/29</td><td>伊藤太斉</td><td><a href="/articles/20211029a/">Terraformerとしてコードを書いて思うこと</a></td></tr><tr><td>11/01</td><td>井上圭</td><td><a href="/articles/20211101a/">キーパッドを、基盤から自作してみた</a></td></tr><tr><td>11/02</td><td>前原応光</td><td><a href="/articles/20211102a/">マルチクラウドについて考えてみた</a></td></tr><tr><td>11/04</td><td>澁川喜規</td><td><a href="/articles/20211104a/">Cheetah Grid を Reactから利用するためのラッパーを実装してみる</a></td></tr><tr><td>11/05</td><td>山本力世</td><td><a href="/articles/20211105a/">極小LinuxマシンでSwiftを動かそうとしてみた</a></td></tr><tr><td>11/08</td><td>ヴーホアン・ミン</td><td><a href="/articles/20211108a/">PlantUMLのテーマ（思わぬ展開）</a></td></tr><tr><td>11/09</td><td>前川喜洋</td><td><a href="/articles/20211109a/">仮想通貨の個人ウォレットの守り方</a></td></tr></tbody></table></div><p>※公開スケジュールは変更になったり、入れ替わることがあります。ご了承ください。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>今年も2週間ほどの連載となりますが、いつもの空気を感じるテーマから普段は聞けない話まで、お楽しみいただければ幸いです。</p><p>その他連載企画もお見逃しなく!</p><ul><li><a href="/articles/20210414a/">春の入門連載2021を始めます</a></li><li><a href="/articles/20210823a/">夏の自由研究連載2021を始めます</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%A7%8B%E3%83%96%E3%83%AD%E3%82%B0%E9%80%B1%E9%96%93/">秋ブログ週間</category>
      
      
      <comments>https://future-architect.github.io/articles/20211027a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Software Design 2021年11月号「Kaggleで知る機械学習」を寄稿しました</title>
      <link>https://future-architect.github.io/articles/20211026b/</link>
      <guid>https://future-architect.github.io/articles/20211026b/</guid>
      <pubDate>Mon, 25 Oct 2021 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;img src=&quot;/images/20211026b/642111.jpeg&quot; alt=&quot;642111.jpeg&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><img src="/images/20211026b/642111.jpeg" alt="642111.jpeg" width="600" height="847" loading="lazy"><p>TIGの玉木です。先日10月18日に発売された<a href="https://gihyo.jp/magazine/SD/archive/2021/202111">Software Design 2021年11月号</a>の第一特集、「Kaggleで知る機械学習 前処理から学習モデルの構築，スコアの上げ方までわかる」をフューチャーの農見、玉木、金子が担当しました。数日経ってしまいましたが、簡単に紹介させていただきます。</p><h2 id="コンセプト"><a href="#コンセプト" class="headerlink" title="コンセプト"></a>コンセプト</h2><p><a href="https://future-architect.github.io/articles/20210511a/">以前の記事</a>でも紹介しましたが、すでに世の中にはたくさんのKaggleを題材とした素晴らしい書籍があります。Kaggleは機械学習用のデータセット、実行環境が用意されており、機械学習を学ぶ題材として適しています。私達はまだあまり日本語の書籍がないテーマである、</p><ul><li>自然言語処理</li><li>画像処理</li></ul><p>の2つの分野について、機械学習をこれから始めたい方向けに記事を書くことにしました。<br>雑誌という形態上ページ数が限られているのもありますが、なるべく最新の動向も含めつつ、最新の動向を理解するための最低限の知識についても紹介しました。</p><p>また、Kaggleの楽しさを伝えよう、というのもコンセプトのうちの1つです。少しずつ精度が上がっていく楽しさがわかるように、どのようにすれば精度が上がるのかという点を中心に書かせていただきました。実際にKaggle Notebookで実行できるように作っているので、興味のある方はぜひKaggle上で試してみていただきたいと思っています。</p><h2 id="2章、3章の自然言語処理パートについて"><a href="#2章、3章の自然言語処理パートについて" class="headerlink" title="2章、3章の自然言語処理パートについて"></a>2章、3章の自然言語処理パートについて</h2><p>Kaggle上で開かれている初心者向けのコンペティションである、<a href="https://www.kaggle.com/c/contradictory-my-dear-watson">Contradictory, My Dear Watson</a>を題材として自然言語処理を学びます。</p><ul><li>機械学習全般の「データの前処理・学習・推論」の流れ</li><li>自然言語処理の代表的なモデルであるBERTの紹介</li><li>Huggingfaceの<a href="https://github.com/huggingface/transformers">Transformers</a>の紹介</li><li>TPUを用いた学習</li><li>最小限のコード、モデル変更での精度の向上</li></ul><p>について紹介しています。このパートを読めば、近年の自然言語処理コンペティションの解法が理解しやすくなると思います。<br>また、フルスクラッチでサブミッションまでたどり着けるようになります。</p><h2 id="4章、5章の自然言語処理パートについて"><a href="#4章、5章の自然言語処理パートについて" class="headerlink" title="4章、5章の自然言語処理パートについて"></a>4章、5章の自然言語処理パートについて</h2><p>4章、5章では、機械学習用くずし字データセット、<a href="http://codh.rois.ac.jp/kmnist/">KMNIST</a>を題材として、画像処理を学びます。EfficientNetV2をベースラインとして用い、そこから</p><ul><li>Data Augmentation</li><li>Snapshot Ensemble</li><li>オプティマイザの変更</li><li>Learning Rate Schduler</li></ul><p>等の変更を行い、精度向上を目指します。</p><p>2章、3章では基本的なところから説明がスタートしますが、5章ではまだ日本語の書籍にはないような近年の手法を用いた工夫も紹介しています。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Software Design 2021年11月号の第一特集、「Kaggleで知る機械学習 前処理から学習モデルの構築，スコアの上げ方までわかる」について簡単に紹介させていただきました。</p><p>u++さんにも感想を頂いています、ありがとうございます。よければu++さんの記事も参考にしてください。</p><p><a href="https://upura.hatenablog.com/entry/2021/10/22/200707">https://upura.hatenablog.com/entry/2021/10/22/200707</a></p><p>自然言語処理、画像処理をこれから学んでみたいと思っている方はぜひ読んでみてください！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/">機械学習</category>
      
      <category domain="https://future-architect.github.io/tags/NLP/">NLP</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%87%BA%E7%89%88/">出版</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/Kaggle/">Kaggle</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%94%BB%E5%83%8F%E5%87%A6%E7%90%86/">画像処理</category>
      
      <category domain="https://future-architect.github.io/tags/SoftwareDesign/">SoftwareDesign</category>
      
      
      <comments>https://future-architect.github.io/articles/20211026b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS利用時に read: connection reset by peer が出たときのリトライ検討</title>
      <link>https://future-architect.github.io/articles/20211026a/</link>
      <guid>https://future-architect.github.io/articles/20211026a/</guid>
      <pubDate>Mon, 25 Oct 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20211026a/loop-button.png&quot; alt=&quot;&quot; title=&quot;febrian eka saputraによるPixabayからの画像&quot; width=&quot;632&quot; height=&quot;433&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20211026a/loop-button.png" alt="" title="febrian eka saputraによるPixabayからの画像" width="632" height="433"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG DXユニットの真野です。</p><p>DynamoDBやKinesis Data Streamsなどを利用するサービスをそれなりの期間で稼働させているとポツポツ下記のようなエラーが発生することが分かりました。</p><figure class="highlight sh"><figcaption><span>エラーログ(改行を追加しています)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[MY-APP-ERROR-LOG] RequestError: send request failedcaused by:</span><br><span class="line">  Post <span class="string">&quot;https://kinesis.ap-northeast-1.amazonaws.com/&quot;</span>:</span><br><span class="line">    <span class="built_in">read</span> tcp 169.254.0.1:55638-&gt;3.113.218.4:443:</span><br><span class="line">      <span class="built_in">read</span>: connection reset by peer</span><br></pre></td></tr></table></figure><p>ここで疑問に思ったのは、少なくてもAWS SDK for Goを使っている限りは必要に応じてデフォルトでリトライをしてくれているはずです。下記のドキュメントでは通常は3回のリトライを実施してくれるとあります</p><ul><li><a href="https://aws.github.io/aws-sdk-go-v2/docs/configuring-sdk/retries-timeouts/">Retries and Timeouts | AWS SDK for Go V2</a></li></ul><p>では、上記のようなエラーがでるということはリトライを使い果たしても失敗したのでしょうか？ そもそも <code>read: connection reset by peer</code> って正確には何だ？という状態だったので調べました。</p><h2 id="read-connection-reset-by-peer-とは"><a href="#read-connection-reset-by-peer-とは" class="headerlink" title="read: connection reset by peer とは"></a>read: connection reset by peer とは</h2><p>サーバ側から（今回だとKinesis Data Streamsのエンドポイントのサーバ）から <code>RST(Reset TCP)</code> パケット（正確言うとRSTフラグが1のパケット）が送られて来た時にハンドリングされたエラーメッセージです。これを送信された場合は、接続要求や通信状態が拒否されたものとみなし、通信をリセットして終了する必要があるとのことです。発生条件はサーバ側の処理能力を超えた場合などに発生しうるそうです。</p><ul><li><a href="https://e-words.jp/w/RST%E3%83%91%E3%82%B1%E3%83%83%E3%83%88.html">RSTパケット（reset packet）とは - IT用語辞典 e-Words</a></li></ul><p>発生箇所は色々考えられますが、 エラーメッセージに <code>read tcp xxxx</code> とある場合はリクエストを送信して、レスポンスを読み込もうとして（read tcpしようとして）発生したと推測できます。</p><p>つまり、今回のログで言うと <code>Post &quot;https://kinesis.ap-northeast-1.amazonaws.com/&quot;</code> のリクエストはサーバ側に届いたものの、レスポンスを受信するタイミングでTPCレイヤーで通信に失敗したと見なせると思います。（自信が無いので間違っていましたらご指摘下さい）</p><p>Go側ではRSTパッケージを送られたかどうかは、エラーの文字列に <code>connection reset by peer</code> が含まれているかどうかでも分かりますし、ガンバるのであれば、syscallパッケージで判定できそうです。</p><figure class="highlight go"><figcaption><span>RST判定のサンプル実装</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;syscall&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsRSTErr</span><span class="params">(err error)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> opErr, ok := err.(*net.OpError); ok &#123;</span><br><span class="line"><span class="keyword">if</span> sysErr, ok := opErr.Err.(*os.SyscallError); ok &#123;</span><br><span class="line"><span class="keyword">return</span> sysErr.Err == syscall.ECONNRESET</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本題から少し逸れたので、リトライについて話を戻します。</p><h2 id="AWS-SDK-for-Go側のリトライハンドリングについて"><a href="#AWS-SDK-for-Go側のリトライハンドリングについて" class="headerlink" title="AWS SDK for Go側のリトライハンドリングについて"></a>AWS SDK for Go側のリトライハンドリングについて</h2><p>AWS SDK for Goのリトライ処理についてはカスタマイズ可能です。方法は辻さんが過去にブログを書いてくれています。</p><ul><li><a href="/articles/20210218/">AWS SDK for Goのリトライアルゴリズムを差し替える方法 | フューチャー技術ブログ</a></li></ul><p>デフォルトの仕組みは、DefaultRetryerの<a href="https://github.com/aws/aws-sdk-go/blob/d8a5a9febe5602f134648c18e9f83546284cda35/aws/client/default_retryer.go#L131">ShouldRetry</a> で、どのようなエラーが発生した時に、<strong>リトライすべきか否か</strong> を判定しています。<code>ShoudRetry</code> をさらに追っていくと、<code>IsErrorRetryable</code> という関数からさらに <a href="https://github.com/aws/aws-sdk-go/blob/d8a5a9febe5602f134648c18e9f83546284cda35/aws/request/retryer.go#L208">isErrConnectionReset</a> という関数があることに気が付きます。</p><p><a href="https://github.com/aws/aws-sdk-go/blob/d8a5a9febe5602f134648c18e9f83546284cda35/aws/request/connection_reset_error.go#L7">connection_reset_error.goに実装された関数isErrConnectionReset</a>を見ると、かなり興味深い実装です。</p><figure class="highlight go"><figcaption><span>connection_reset_error.goから抜粋</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isErrConnectionReset</span><span class="params">(err error)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> strings.Contains(err.Error(), <span class="string">&quot;read: connection reset&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> strings.Contains(err.Error(), <span class="string">&quot;use of closed network connection&quot;</span>) ||</span><br><span class="line">strings.Contains(err.Error(), <span class="string">&quot;connection reset&quot;</span>) ||</span><br><span class="line">strings.Contains(err.Error(), <span class="string">&quot;broken pipe&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>なんと、<code>read: connection reset</code> が含まれている場合は、 <strong>リトライを行わない</strong> 判定になっていました。<code>read</code> が入っていない <code>connection reset</code> はリトライを行うとは対照的です。</p><p>コミットのハッシュ値からこのコードへの補足を探すと、簡潔に説明しているコメントが見つかります。</p><ul><li><a href="https://github.com/aws/aws-sdk-go/pull/2926#issuecomment-553196888">https://github.com/aws/aws-sdk-go/pull/2926#issuecomment-553196888</a></li><li><a href="https://github.com/aws/aws-sdk-go/pull/2926#issuecomment-553637658">https://github.com/aws/aws-sdk-go/pull/2926#issuecomment-553637658</a></li></ul><p>書いていることを整理しました。</p><ul><li>（今回で言うとKinesis）へのサービスへのリクエストの書き込みに成功/失敗について、SDK側は分からない<ul><li>レスポンス読み取りに失敗しただけなので、リクエスト自体は成功した（Kinesisにデータはputできた）かもしれない</li></ul></li><li>とはいえ、失敗した可能性があるのであれば自動でリトライをしても良い気がするが…？<ul><li>SDKとしては指定された操作が冪等であるか分からないので、デフォルトの挙動としては安全側に倒しリトライしない</li></ul></li></ul><p>…なるほど、理由が分かるとスッキリしますね。<br><code>read</code>がない <code>connection reset</code> をリトライするのは、おそらく書き込み側（リクエストを送信する時）にエラーになったケースなので、その場合は処理が成功することはありえないので、リトライを行うということだったようです。</p><h2 id="その上で今回はリトライすべきかどうか"><a href="#その上で今回はリトライすべきかどうか" class="headerlink" title="その上で今回はリトライすべきかどうか"></a>その上で今回はリトライすべきかどうか</h2><p>今回の構築したサービスの仕様だと、Kinesis Data Streamsをサブスクライブしているアプリは <strong>冪等</strong> であることを期待しているので、重複してputすることを許容し、そのままリトライさせることにします。（ていうかKinesisであればそもそもサービスとしてAt Least Onceなので、SDK側の判断で重複リトライしてもよいのでは..という気もしましたが、ダメなケースがあるのかな）。</p><p>リトライ方法ですが、先程のカスタムリトライの記事にあったとおり、DefaultRetryerを拡張して実装します。</p><h2 id="カスタムリトライの実装"><a href="#カスタムリトライの実装" class="headerlink" title="カスタムリトライの実装"></a>カスタムリトライの実装</h2><p>aws/aws-sdk-go のリポジトリの <a href="https://github.com/aws/aws-sdk-go/tree/main/example/aws/request/customRetryer">exampleフォルダ</a>にカスタムリトライのサンプルコードがあり参考にできます。</p><p>実装を見ると、500番台のエラーは常に <strong>リトライしない</strong> という拡張なようです。</p><figure class="highlight go"><figcaption><span>custom_retryer.goから抜粋</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CustomRetryer <span class="keyword">struct</span> &#123;</span><br><span class="line">client.DefaultRetryer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r CustomRetryer)</span> <span class="title">ShouldRetry</span><span class="params">(req *request.Request)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> req.HTTPResponse.StatusCode &gt;= <span class="number">500</span> &#123;</span><br><span class="line"><span class="comment">// Don&#x27;t retry any 5xx status codes.</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fallback to SDK&#x27;s built in retry rules</span></span><br><span class="line"><span class="keyword">return</span> r.DefaultRetryer.ShouldRetry(req)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今回私が実装したいのは、<strong>read: connection reset</strong> の時も <strong>リトライを行いたい</strong> ということなのでその条件のときに <code>return true</code> という、ほぼ同じ考えが適用できるステキなサンプルでした。</p><p>次に実装をあげますが、元のDefaultRetryerがtemporaryというインターフェースでスイッチしていた実装なのでそれを切り貼りしています。</p><figure class="highlight go"><figcaption><span>read_connection_resetの時もリトライする</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CustomRetryer <span class="keyword">struct</span> &#123;</span><br><span class="line">client.DefaultRetryer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> temporary <span class="keyword">interface</span> &#123;</span><br><span class="line">Temporary() <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r CustomRetryer)</span> <span class="title">ShouldRetry</span><span class="params">(req *request.Request)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> origErr := req.Error; origErr != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> origErr.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> temporary:</span><br><span class="line"><span class="keyword">if</span> strings.Contains(origErr.Error(), <span class="string">&quot;read: connection reset&quot;</span>) &#123;</span><br><span class="line"><span class="comment">// デフォルトのSDKではリトライしないが、リトライ可にする</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r.DefaultRetryer.ShouldRetry(req)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記の実装だと、<code>read: connection reset</code>が発生した場合に規定の回数より多くリトライをしてしまうのでは？という懸念が浮かびましたが、ドキュメントを読むと最大リトライの配慮は別処理でなされるので問題ないようです。</p><blockquote><p>// Implementations may consider request attempt count when determining if a<br>// request is retryable, but the SDK will use MaxRetries to limit the<br>// number of attempts a request are made<br>ShouldRetry(*Request) bool<br><a href="https://docs.aws.amazon.com/sdk-for-go/api/aws/request/#Retryer">https://docs.aws.amazon.com/sdk-for-go/api/aws/request/#Retryer</a></p></blockquote><p>それ以外の判定はDefaultRetryerに最終的な判断を移譲させます。</p><p>実装したカスタムリトライは aws sessionで設定できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> kc = kinesis.New(session.Must(session.NewSession(&amp;aws.Config&#123;</span><br><span class="line">Retryer: CustomRetryer&#123;&#125;,</span><br><span class="line">&#125;),</span><br><span class="line">))</span><br></pre></td></tr></table></figure><p>DefaultRetryer側の設定を変えたい場合は、埋め込んでいるためそのまま設定できます。</p><figure class="highlight go"><figcaption><span>NumMaxRetriesを変更した例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> kc = kinesis.New(session.Must(</span><br><span class="line">session.NewSession(&amp;aws.Config&#123;</span><br><span class="line">Retryer: CustomRetryer&#123;</span><br><span class="line">DefaultRetryer: client.DefaultRetryer&#123;</span><br><span class="line">NumMaxRetries: client.DefaultRetryerMaxNumRetries,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;),</span><br><span class="line">))</span><br></pre></td></tr></table></figure><p>既存のパッケージの機能をそのまま使えるのは安心感があると思います。こういう薄いラッパーが作りやすいのは嬉しい仕組みですね。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>今まであまり深く気に留めていなかった <code>read: connection reset by peer</code> といったエラーに関しても、SDK実装者側の設計や配慮を抑え、アプリ開発に活かすと不明瞭な点が減り、より自信を持ったコードを書けるようになりました。</p><p>AWS SDK for GoはGitHub上でのやり取り含めてちゃんと運用されており、学びになります。ハマったときはコードの内部を追ってみるのもオススメだと思いました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/Network/">Network</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%88%E3%83%A9%E3%82%A4/">リトライ</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%88/">トラブルシュート</category>
      
      <category domain="https://future-architect.github.io/tags/Kinesis/">Kinesis</category>
      
      
      <comments>https://future-architect.github.io/articles/20211026a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS SDK for GoでDynamoDBの式を扱うヘルパーパッケージの使い方</title>
      <link>https://future-architect.github.io/articles/20211025a/</link>
      <guid>https://future-architect.github.io/articles/20211025a/</guid>
      <pubDate>Sun, 24 Oct 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20211025a/top.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;676&quot;&gt;

&lt;p&gt;by &lt;a href=&quot;http://reneefrench.blogspot.com/&quot;&gt;Renée</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20211025a/top.png" alt="" width="1200" height="676"><p>by <a href="http://reneefrench.blogspot.com/">Renée French</a></p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。</p><p>DynamoDBをGoで操作することにかけては、<a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載</a> に参加するくらい関心があるのですが、AWS SDK for Goの公式ライブラリに含まれる、ヘルパーパッケージについて存在を今までスルーしていました。使ってみると業務的には利用一択だと思ったので今後使っていくぞという覚書としてまとめます。</p><h2 id="DynamoDBの式をダイレクトに実装した例"><a href="#DynamoDBの式をダイレクトに実装した例" class="headerlink" title="DynamoDBの式をダイレクトに実装した例"></a>DynamoDBの式をダイレクトに実装した例</h2><p>私は公式のAWS SDK for Goの<a href="https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/">dynamodbパッケージ</a>を用いる時に、ドキュメントのExampleに書いてあるように、ちまちま <code>ExpressionAttributeNames</code>や<code>ExpressionAttributeValues</code>や<code>FilterExpression</code>や<code>ProjectionExpression</code>を指定していました。</p><p>どんな感じかと言うと次のような感じです。</p><figure class="highlight go"><figcaption><span>Exampleに書いてあるような実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScanMusic</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    db := dynamodb.New(session.Must(session.NewSession()))</span><br><span class="line"></span><br><span class="line">    result, err := db.Scan(&amp;dynamodb.ScanInput&#123;</span><br><span class="line">        ExpressionAttributeNames: <span class="keyword">map</span>[<span class="keyword">string</span>]*<span class="keyword">string</span>&#123;</span><br><span class="line">            <span class="string">&quot;#AT&quot;</span>: aws.String(<span class="string">&quot;AlbumTitle&quot;</span>),</span><br><span class="line">            <span class="string">&quot;#ST&quot;</span>: aws.String(<span class="string">&quot;SongTitle&quot;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        ExpressionAttributeValues: <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue&#123;</span><br><span class="line">            <span class="string">&quot;:a&quot;</span>: &#123;</span><br><span class="line">                S: aws.String(<span class="string">&quot;No One You Know&quot;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        FilterExpression:     aws.String(<span class="string">&quot;Artist = :a&quot;</span>),</span><br><span class="line">        ProjectionExpression: aws.String(<span class="string">&quot;#ST, #AT&quot;</span>),</span><br><span class="line">        TableName:            aws.String(<span class="string">&quot;Music&quot;</span>),</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// エラーハンドリング</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> recs []Record</span><br><span class="line">    <span class="keyword">if</span> err := dynamodbattribute.UnmarshalListOfMaps(page.Items, &amp;recs); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// エラーハンドリング</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これはこれで、DynamoDBのREST APIの仕様に詳しくなれるのと、AWS CLIを用いたDynamoDBアクセスする時と知識を流用できるので学びにはなるのですが、利用項目や条件が増えてくるとレビュー観点でツライですし、自分が実装するときも<code>ExpressionAttributeNames</code> が抜けていてエラーになるなど、生産性という意味では開発者側が試されているなと感じることが多かったです。</p><h2 id="ヘルパーパッケージの福音"><a href="#ヘルパーパッケージの福音" class="headerlink" title="ヘルパーパッケージの福音"></a>ヘルパーパッケージの福音</h2><p>業務でも様々な技術ブログでも DynamoDB SDK for Goを実装するときは上記のような設定をするコードをよく見ますが、実は公式に便利なヘルパーが用意されています。 <code>expression</code> パッケージです。式の組み立て全般をサポートしてくれるビルダーを提供してくれます。</p><ul><li><a href="https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/expression/">https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/expression/</a></li></ul><p><code>expression</code>パッケージ を用いると、<code>ExpressionAttributeNames</code> や <code>ExpressionAttributeValues</code> や <code>FilterExpression</code> などのDynamoDBの式を型安全に構築することができます。例をあげます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ScanMusic</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">filt := expression.Name(<span class="string">&quot;Artist&quot;</span>).Equal(expression.Value(<span class="string">&quot;No One You Know&quot;</span>))</span><br><span class="line">proj := expression.NamesList(expression.Name(<span class="string">&quot;SongTitle&quot;</span>), expression.Name(<span class="string">&quot;AlbumTitle&quot;</span>))</span><br><span class="line">expr, err := expression.NewBuilder().WithFilter(filt).WithProjection(proj).Build()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラーハンドリング</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db := dynamodb.New(session.Must(session.NewSession()))</span><br><span class="line">result, err := db.Scan(&amp;dynamodb.ScanInput&#123;</span><br><span class="line">ExpressionAttributeNames:  expr.Names(),</span><br><span class="line">ExpressionAttributeValues: expr.Values(),</span><br><span class="line">FilterExpression:          expr.Filter(),</span><br><span class="line">ProjectionExpression:      expr.Projection(),</span><br><span class="line">TableName:                 aws.String(<span class="string">&quot;Music&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラーハンドリング</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>expression</code> パッケージを利用して、フィルター条件やプロジェクション式を構築しています。ややコードとしては長くなりましたが、<code>dynamodb.ScanInput</code> のフィールドがの設定が一律シンプル下したことがわかります。この勢いで <code>TableName</code> も <code>expr</code> から指定したい気もしますが、それはパッケージの担当外なようです。</p><p>サンプルコードだけ見ると、心理的なハードルが高く思えるかもしれませんが、そもそも元の実装にあるような、<code>ExpressionAttributeNames</code> や <code>ExpressionAttributeValues</code> や <code>FilterExpression</code> の記載方法を覚え、正しく使用することの方が大変です。 <code>expression</code> パッケージを用いると、何かしら指定が論理的に正しくない場合は、式のビルド時にエラーで検知することができるため、開発時のトラブルシュートにも役立つと思います。</p><p>AWS SDK for Goを生で用いてDynamoDBアクセスを行うのであれば、基本的には積極的に使っていくパッケージでしょう。</p><h2 id="論理式"><a href="#論理式" class="headerlink" title="論理式"></a>論理式</h2><p>先程の例ではEqualでしたが、ドキュメントを見る通り、AND, OR, NotEqualや、LessThan, GreaterThan などなど、一通りの演算子が揃っています。選び放題・使い放題のガッツがあるパッケージです。</p><p><a href="https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/expression/">https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/expression/</a></p><p>例えばフィルターで、Artistが Red, Green, Blue のどれかという条件を指定すると以下のようになります。</p><figure class="highlight go"><figcaption><span>OR条件を指定した例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">filt := expression.Name(<span class="string">&quot;Artist&quot;</span>).Equal(expression.Value(<span class="string">&quot;Red&quot;</span>)).</span><br><span class="line">Or(expression.Name(<span class="string">&quot;Artist&quot;</span>).Equal(expression.Value(<span class="string">&quot;Green&quot;</span>))).</span><br><span class="line">Or(expression.Name(<span class="string">&quot;Artist&quot;</span>).Equal(expression.Value(<span class="string">&quot;Blue&quot;</span>)))</span><br><span class="line"></span><br><span class="line">proj := expression.NamesList(expression.Name(<span class="string">&quot;SongTitle&quot;</span>), expression.Name(<span class="string">&quot;AlbumTitle&quot;</span>))</span><br><span class="line"></span><br><span class="line">expr, err := expression.NewBuilder().WithFilter(filt).WithProjection(proj).Build()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラーハンドリング</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>もちろんAND, ORをネスト化することもできます。<code>Artist</code> が <code>Blue</code> のときは <code>Year</code> が <code>2021</code> 年であると追加します。</p><figure class="highlight go"><figcaption><span>ネストした条件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filt := expression.Name(<span class="string">&quot;Artist&quot;</span>).Equal(expression.Value(<span class="string">&quot;Red&quot;</span>)).</span><br><span class="line">Or(expression.Name(<span class="string">&quot;Artist&quot;</span>).Equal(expression.Value(<span class="string">&quot;Green&quot;</span>))).</span><br><span class="line">Or(expression.Name(<span class="string">&quot;Artist&quot;</span>).Equal(expression.Value(<span class="string">&quot;Blue&quot;</span>)).</span><br><span class="line">And(expression.Name(<span class="string">&quot;Year&quot;</span>).Equal(expression.Value(<span class="string">&quot;2021&quot;</span>))),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>式で表現すると <code>Artist == Red || Artist == Green || (Artist == Blue &amp;&amp; Year == 2021)</code> といった感じでしょうか。式が複雑になる場合はこういった擬似コードでコメントの補足を入れると良いかなと思います。</p><h2 id="ProjectionExpressionを指定するのが面倒問題"><a href="#ProjectionExpressionを指定するのが面倒問題" class="headerlink" title="ProjectionExpressionを指定するのが面倒問題"></a>ProjectionExpressionを指定するのが面倒問題</h2><p><code>expression</code>パッケージを利用していくと、Projectionの設定が面倒な場合があります。</p><figure class="highlight go"><figcaption><span>面倒な例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">filt := expression.Name(<span class="string">&quot;Artist&quot;</span>).Equal(expression.Value(<span class="string">&quot;No One You Know&quot;</span>))</span><br><span class="line"></span><br><span class="line">proj := expression.NamesList(expression.Name(<span class="string">&quot;SongTitle&quot;</span>),</span><br><span class="line"> expression.Name(<span class="string">&quot;AlbumTitle&quot;</span>),</span><br><span class="line"> expression.Name(<span class="string">&quot;Rate&quot;</span>),</span><br><span class="line"> expression.Name(<span class="string">&quot;PublishedAt&quot;</span>),</span><br><span class="line"> expression.Name(<span class="string">&quot;Price&quot;</span>))  <span class="comment">// やたら数が多くなるし項目追加時に見逃しやすい</span></span><br><span class="line"></span><br><span class="line">expr, err := expression.NewBuilder().WithFilter(filt).WithProjection(proj).Build()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラーハンドリング</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この場合は自前で一工夫すると良いでしょう。ヘルパー関数をさらに作っても良いかもしれません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">filt := expression.Name(<span class="string">&quot;Artist&quot;</span>).Equal(expression.Value(<span class="string">&quot;No One You Know&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> names []expression.NameBuilder</span><br><span class="line"><span class="keyword">for</span> _, name := <span class="keyword">range</span> []<span class="keyword">string</span>&#123;<span class="string">&quot;SongTitle&quot;</span>, <span class="string">&quot;AlbumTitle&quot;</span>, <span class="string">&quot;Rate&quot;</span>, <span class="string">&quot;PublishedAt&quot;</span>, <span class="string">&quot;Price&quot;</span>&#125; &#123;</span><br><span class="line">names = <span class="built_in">append</span>(names, expression.Name(name))</span><br><span class="line">&#125;</span><br><span class="line">proj := expression.NamesList(names[<span class="number">0</span>], names[<span class="number">1</span>:]...)</span><br><span class="line"></span><br><span class="line">expr, err := expression.NewBuilder().WithFilter(filt).WithProjection(proj).Build()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラーハンドリング</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このあたりを作り込みすぎると、独自DSLを作るような感じになるかと思いますが、愚直に書きすぎると表現の密度が下がりすぎて保守がツライ場合もあるので、バランスを見て取り入れて行くと良いかなと思います。</p><h2 id="クエリの場合"><a href="#クエリの場合" class="headerlink" title="クエリの場合"></a>クエリの場合</h2><p>先程まではScanの例でしたが、Queryの場合はさらに <code>expression</code> が役立ちます。ハッシュキーにDeviceID、ソートキーにTimestampという典型的な時系列データを保持するDeviceLogというテーブルに対しての実装例です。</p><figure class="highlight go"><figcaption><span>クエリの実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = dynamodb.New(session.Must(session.NewSession()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">QueryTable</span><span class="params">(ctx context.Context, deviceID <span class="keyword">string</span>, start, end time.Time)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">keyCond := expression.Key(<span class="string">&quot;DeviceID&quot;</span>).Equal(expression.Value(deviceID)).</span><br><span class="line">And(expression.Key(<span class="string">&quot;Timestamp&quot;</span>).Between(</span><br><span class="line">expression.Value(start.Format(time.RFC3339)),</span><br><span class="line">expression.Value(end.Format(time.RFC3339))))</span><br><span class="line"></span><br><span class="line">filterCond := expression.Name(<span class="string">&quot;DeviceType&quot;</span>).Equal(expression.Value(<span class="string">&quot;Normal&quot;</span>)).</span><br><span class="line">And(expression.Name(<span class="string">&quot;CreatedYear&quot;</span>).GreaterThan(expression.Value(<span class="number">2018</span>)))</span><br><span class="line"></span><br><span class="line">expr, err := expression.NewBuilder().WithKeyCondition(keyCond).WithFilter(filterCond).Build()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラーハンドリング</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">result, err := db.QueryWithContext(ctx, &amp;dynamodb.QueryInput&#123;</span><br><span class="line">KeyConditionExpression:    expr.KeyCondition(),</span><br><span class="line">ProjectionExpression:      expr.Projection(),</span><br><span class="line">ExpressionAttributeNames:  expr.Names(),</span><br><span class="line">ExpressionAttributeValues: expr.Values(),</span><br><span class="line">FilterExpression:          expr.Filter(),</span><br><span class="line">TableName:                 aws.String(<span class="string">&quot;DeviceLog&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラーハンドリング</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>あるデバイスに対して、開始～終了日時を指定し、さらに適当なフィルター条件も追加しました。クエリの場合は、<code>KeyConditionExpression</code>と <code>FilterExpression</code> の両方が設定できるため、<code>expression</code> パッケージを利用しない時は<code>ExpressionAttributeNames</code> と <code>ExpressionAttributeValues</code> の管理が煩雑になりがちでした。</p><h2 id="Update-Expression"><a href="#Update-Expression" class="headerlink" title="Update Expression"></a>Update Expression</h2><p>DynamoDBに対するUpdate式も、クエリと同様になかなかとっつき難かったです。<code>expression</code>パッケージを用いない場合は、通常の文字列なのでカンマの位置などかなり気をつけることが多いです。</p><figure class="highlight go"><figcaption><span>実装例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = dynamodb.New(session.Must(session.NewSession()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Update</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">_, err := db.UpdateItemWithContext(ctx, &amp;dynamodb.UpdateItemInput&#123;</span><br><span class="line">TableName:        aws.String(<span class="string">&quot;Music&quot;</span>),</span><br><span class="line">Key: <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue&#123;</span><br><span class="line"><span class="string">&quot;Artist&quot;</span>: &#123;</span><br><span class="line">S: aws.String(<span class="string">&quot;Acme Band&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;SongTitle&quot;</span>: &#123;</span><br><span class="line">S: aws.String(<span class="string">&quot;Happy Day&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">ExpressionAttributeNames: <span class="keyword">map</span>[<span class="keyword">string</span>]*<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">&quot;#AT&quot;</span>:  aws.String(<span class="string">&quot;AlbumTitle&quot;</span>),</span><br><span class="line"><span class="string">&quot;#Y&quot;</span>:   aws.String(<span class="string">&quot;Year&quot;</span>),</span><br><span class="line"><span class="string">&quot;#REV&quot;</span>: aws.String(<span class="string">&quot;Revision&quot;</span>),</span><br><span class="line"><span class="string">&quot;#UPA&quot;</span>: aws.String(<span class="string">&quot;UpdatedAt&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">ExpressionAttributeValues: <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue&#123;</span><br><span class="line"><span class="string">&quot;:t&quot;</span>: &#123;</span><br><span class="line">S: aws.String(<span class="string">&quot;Louder Than Ever&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;:y&quot;</span>: &#123;</span><br><span class="line">N: aws.String(<span class="string">&quot;2015&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;:inc&quot;</span>: &#123;</span><br><span class="line">N: aws.String(<span class="string">&quot;1&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;:upa&quot;</span>: &#123;</span><br><span class="line">S: aws.String(time.Now().UTC().Format(time.RFC3339)),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">UpdateExpression: aws.String(<span class="string">&quot;SET #Y = :y, #AT = :t, #UPA = :upa ADD #REV :inc&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラーハンドリング</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これは <code>expression</code> パッケージを用いると次のようになります。</p><figure class="highlight go"><figcaption><span>expressionを用いたUpdate</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = dynamodb.New(session.Must(session.NewSession()))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Update</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">update := expression.Set(expression.Name(<span class="string">&quot;AlbumTitle&quot;</span>), expression.Value(<span class="string">&quot;Louder Than Ever&quot;</span>)).</span><br><span class="line">Set(expression.Name(<span class="string">&quot;Year&quot;</span>), expression.Value(<span class="string">&quot;2015&quot;</span>)).</span><br><span class="line">Set(expression.Name(<span class="string">&quot;UpdatedAt&quot;</span>), expression.Value(time.Now())).</span><br><span class="line">Add(expression.Name(<span class="string">&quot;Revision&quot;</span>), expression.Value(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">expr, err := expression.NewBuilder().WithUpdate(update).Build()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラーハンドリング</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_, err := db.UpdateItemWithContext(ctx, &amp;dynamodb.UpdateItemInput&#123;</span><br><span class="line">TableName: aws.String(<span class="string">&quot;Music&quot;</span>),</span><br><span class="line">Key: <span class="keyword">map</span>[<span class="keyword">string</span>]*dynamodb.AttributeValue&#123;</span><br><span class="line"><span class="string">&quot;Artist&quot;</span>: &#123;</span><br><span class="line">S: aws.String(<span class="string">&quot;Acme Band&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;SongTitle&quot;</span>: &#123;</span><br><span class="line">S: aws.String(<span class="string">&quot;Happy Day&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">ExpressionAttributeNames:  expr.Names(),</span><br><span class="line">ExpressionAttributeValues: expr.Values(),</span><br><span class="line">UpdateExpression:          expr.Update(),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// エラーハンドリング</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>式の構築部分が型セーフに実装できていることが分かると思います。</p><p>少し残念なのは、 <code>Key</code> の部分は <code>expr</code> から生成できないということでしょうか。ここだけはハッシュキー（とソートキー）をダイレクトに指定する必要があるので、レベル感がズレて勿体ない気がします。（KeyConditionのように指定したかったですね）</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>AWS SDK for Goの <code>dynamodb</code> パッケージを用いると時に必須とも言える、 <code>expression</code> パッケージの使い方について触れました。</p><p><code>expression</code> パッケージを用いると、従来DynamoDBのAPI仕様を理解したフィールドや、文字列で式を設定する必要があった部分を、型安全に構築することができます。</p><p>いくつか残念なところはあるにしろ、メリットは計り知れないのでうまく活用していきたいですね。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/DynamoDB/">DynamoDB</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%BC%8F/">式</category>
      
      
      <comments>https://future-architect.github.io/articles/20211025a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Google Drive API v3をサービスアカウトとGoから利用</title>
      <link>https://future-architect.github.io/articles/20211022a/</link>
      <guid>https://future-architect.github.io/articles/20211022a/</guid>
      <pubDate>Thu, 21 Oct 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;TIG真野です。&lt;/p&gt;
&lt;p&gt;Google</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。</p><p>Google DriveにアップロードされたExcelファイルを利用したちょっとしたジョブを実装する機会があり、処理を動かしたいのがAWSなど別のプラットフォームであったため、サービスアカウントを用いてGoogle Drive APIにアクセスするGoプログラムを作りました。</p><p>いくつかの人が書いている通り、Google Drive APIもv2, v3で情報が入り乱れていて本家のドキュメントを探したて見ながら試行錯誤したりちょっと悩みました。また、サービスアカウント利用する実装例が少なかったので手順をまとめていきます。</p><h2 id="認証方式"><a href="#認証方式" class="headerlink" title="認証方式"></a>認証方式</h2><p>Google Drive APIを用いたコード実装を始める前に、事前にアカウントなどの権限周りの準備を実施します。</p><p>Google Drive APIを使うための<a href="https://cloud.google.com/docs/authentication?hl=ja#getting_credentials_for_server-centric_flow">認証方式</a>には大きく4つの方法があります。</p><ol><li><strong>APIキー</strong>: 一般公開データに匿名でアクセスする</li><li><strong>OAuth2</strong>: エンドユーザーに代わって限定公開データにアクセスする</li><li><strong>環境提供のサービス アカウント</strong>: Google Cloud 環境内でサービス アカウントに代わって限定公開データにアクセスする</li><li><strong>サービスアカウント</strong>: Google Cloud 環境外でサービス アカウントに代わって非公開データにアクセスする</li></ol><p>今回はGCP以外の環境で動かしたいので、4のサービスアカウントを利用します。</p><h2 id="サービスアカウントの払い出し"><a href="#サービスアカウントの払い出し" class="headerlink" title="サービスアカウントの払い出し"></a>サービスアカウントの払い出し</h2><p>サービスアカウントはGCPのProjectに紐づきます。もし利用できるProjectが存在しなければ<a href="https://console.cloud.google.com/cloud-resource-manager">リソース管理ページ</a>から作成します。詳しくは<a href="https://cloud.google.com/resource-manager/docs/creating-managing-projects">プロジェクトの作成と管理 - Google Cloud</a>を確認下さい。</p><p>続いて、Projectの<a href="https://console.cloud.google.com/apis/library/drive.googleapis.com">Google Drive API</a> から、Google Drive APIを有効にします。有効にしないとこのProjectから払い出したサービスアカウントの認証情報では、Google Drive APIを利用できないです。</p><img src="/images/20211022a/Google_Drive_APIの有効化.png" alt="Google_Drive_APIの有効化.png" width="1200" height="640" loading="lazy"><p>続いて、<a href="https://console.cloud.google.com/apis/api/drive.googleapis.com/credentials">APIとサービスにある、Google Drive APIの認証情報</a>タブから、「認証情報を作成」をクリックして、サービスアカウントの作成を行います。今回は適当に、google-drive-exampleという名前にしました。</p><img src="/images/20211022a/認証情報を作成.png" alt="認証情報を作成.png" width="1200" height="470" loading="lazy"><p>数十秒待つと、サービスアカウントの作成されます。その後は、サービスアカウントの「キー」から、キーを作成します。タイプはJSONで良いと思います。</p><img src="/images/20211022a/image.png" alt="image.png" width="1200" height="628" loading="lazy"><p>ダウンロードしたJSONファイルは大事に保存します。AWS上で使う場合は、AWS Systems Manager Parameter StoreにSecureString属性をつけて保存し利用すると良いでしょう。</p><h2 id="サービスアカウントのDriveへのアクセス権限を追加"><a href="#サービスアカウントのDriveへのアクセス権限を追加" class="headerlink" title="サービスアカウントのDriveへのアクセス権限を追加"></a>サービスアカウントのDriveへのアクセス権限を追加</h2><p>先程作成したサービスアカウントの <code>google-drive-example@xxxx-xxxx-123456.iam.gserviceaccount.com</code> に、アクセスしたいGoogle Drive先の権限を付与します。</p><p>アクセスさせたいフォルダなどを右クリックして、「共有」から先程のアカウントIDを指定します。</p><img src="/images/20211022a/権限付与.png" alt="権限付与.png" width="1200" height="388" loading="lazy"><p>これでgoogle-drive-exampleのIDから、Google Drive APIを用いて指定のフォルダにアクセスできるようになりました。</p><h2 id="実装（List）"><a href="#実装（List）" class="headerlink" title="実装（List）"></a>実装（List）</h2><p>GoからGoogle Drive API v3を利用します。</p><figure class="highlight sh"><figcaption><span>パッケージ取得</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get -u google.golang.org/api/drive/v3</span><br></pre></td></tr></table></figure><p>まず指定されたフォルダ配下にあるファイルの一覧表示します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;google.golang.org/api/drive/v3&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">srv, err := drive.NewService(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Unable to retrieve Drive client: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r, err := srv.Files.List().PageSize(<span class="number">1000</span>).</span><br><span class="line">Fields(<span class="string">&quot;files(id, name)&quot;</span>).</span><br><span class="line">Context(ctx).Do()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Unable to retrieve files: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> r.Files &#123;</span><br><span class="line"><span class="built_in">println</span>(f.Name, f.Id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行する前に先程取得したJSONキーファイルを環境変数で指定する必要があります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">export</span> GOOGLE_APPLICATION_CREDENTIALS=./project-name-123456789abc.json</span><br></pre></td></tr></table></figure><p>環境変数に <code>GOOGLE_APPLICATION_CREDENTIALS</code> が設定されていれば、SDK側が自動で認証してくれます。詳しくは<a href="https://cloud.google.com/docs/authentication/production">サービス アカウントとして認証する - Google Cloud</a> を参照下さい。</p><p>実行すると、先程権限を付与したフォルダ配下のファイル一覧が取得できると思います。</p><h2 id="実装（ダウンロード）"><a href="#実装（ダウンロード）" class="headerlink" title="実装（ダウンロード）"></a>実装（ダウンロード）</h2><p>続いて、フォルダにExcelファイルがアップロードされているとして、それらをダウンロードします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package, import 部分は省略</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">srv, err := drive.NewService(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Unable to retrieve Drive client: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r, err := srv.Files.List().PageSize(<span class="number">1000</span>).</span><br><span class="line">Fields(<span class="string">&quot;files(id, name, mimeType)&quot;</span>). <span class="comment">// mimeTypeを追加する</span></span><br><span class="line">Context(ctx).Do()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Unable to retrieve files: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> r.Files &#123;</span><br><span class="line"><span class="keyword">if</span> f.MimeType == <span class="string">&quot;application/vnd.google-apps.folder&quot;</span> &#123;</span><br><span class="line"><span class="comment">// フォルダの場合はスキップ</span></span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := download(ctx, srv, f.Name, f.Id); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Unable to download: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">(ctx context.Context, srv *drive.Service, name, id <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">create, err := os.Create(name)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;create file: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> create.Close()</span><br><span class="line"></span><br><span class="line">resp, err := srv.Files.Get(id).Context(ctx).Download()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;get drive file: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err := io.Copy(create, resp.Body); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;write file: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>さきほどのList表示するコードと大部分は同じですが、mimeTypeを追加で設定しているのはご注意下さい。Fieldsに指定できる項目は<a href="https://developers.google.com/drive/api/v3/reference/files">Google Drive APIの開発者ページのfiles</a>に記載がありました。</p><p>今回はmimeTypeでフォルダに対してはダウンロード処理をしないようにスキップ処理を入れています。</p><p>ダウンロードですが、今回はExportではなくGetを利用しています。スプレッドシートの場合はExportを呼び出しxlsx形式にする必要があるかもしれませんが、単純にバイナリをそのまま落とすのであればGetです。</p><p>こちらを実行すると、権限付与したフォルダ配下のファイルを全て取得できると思います。</p><h2 id="指定したフォルダ配下のみのファイルをダウンロードしたい"><a href="#指定したフォルダ配下のみのファイルをダウンロードしたい" class="headerlink" title="指定したフォルダ配下のみのファイルをダウンロードしたい"></a>指定したフォルダ配下のみのファイルをダウンロードしたい</h2><p><a href="https://developers.google.com/drive/api/v3/reference/files/list">Google Drive APIの Files: list</a>を確認すると<code>q</code>オプションで検索対象の絞り込みが可能です。いくつか<a href="https://developers.google.com/drive/api/v3/search-files">検索例</a>がドキュメントに記載されています。</p><p><code>&#39;1234567&#39; in parents</code> といった例が記載されていますが、1234567には指定したいフォルダのIDを設定します。IDはブラウザで開いた時にURLで設定されている値です。複数を指定したい場合は <code>or</code> 条件で追加も可能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">r, err := srv.Files.List().PageSize(<span class="number">1000</span>).</span><br><span class="line">Fields(<span class="string">&quot;files(id, name, mimeType, parents)&quot;</span>).</span><br><span class="line">Q(fmt.Sprintf(<span class="string">&quot;&#x27;%s&#x27; in parents or &#x27;%s&#x27; in parents&quot;</span>, <span class="string">&quot;1234567&quot;</span>, <span class="string">&quot;890abcd&quot;</span>)). <span class="comment">// 特定のフォルダ配下</span></span><br><span class="line">Context(ctx).Do()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Unable to retrieve files: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>どういった検索条件を指定できるかは、文法としてまとまっているので迷ったら確認すると早いです。</p><ul><li><a href="https://developers.google.com/drive/api/v3/ref-search-terms">https://developers.google.com/drive/api/v3/ref-search-terms</a></li></ul><h2 id="フォルダ指定かつ再帰的にファイルを探索したい"><a href="#フォルダ指定かつ再帰的にファイルを探索したい" class="headerlink" title="フォルダ指定かつ再帰的にファイルを探索したい"></a>フォルダ指定かつ再帰的にファイルを探索したい</h2><p>さきほどの <code>q</code> の指定で再帰的にファイルを指定するのは難しいです。</p><p>例えば、以下のようにネストした構造を保つ場合に、targetFolderのファイルIDを指定しても取得できるのは folder1, folder2までです。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">targetFolder</span><br><span class="line">  └ folder1</span><br><span class="line">  |   └ file1.xlsx</span><br><span class="line">  |   └ file2.xlsx</span><br><span class="line">  └ folder2</span><br><span class="line">      └ file3.xlsx</span><br></pre></td></tr></table></figure><p>この場合は自前で再帰的にList APIをコールする処理を実装する必要があります。少し面倒ですね。少し面倒ですが、最初の実装にあるとおり、OR条件で親フォルダを決め打ちで指定するのが簡単で良いかもしれません。</p><p>（parents は複数要素が設定されると思うので、ネストした親フォルダも設定できた場合は、<code>q</code> に <code>&#39;FILE-ID&#39; in parents</code> の指定で実現できそうです。設定方法がよく分からず今回は上記の結論となりました）</p><h2 id="ページング"><a href="#ページング" class="headerlink" title="ページング"></a>ページング</h2><p>List APIのドキュメントを確認すると、pageSizeはデフォルトが100で、最大が1000までです。これを超過する場合は、pageTokenを指定してページング処理を行う（複数回APIをコールする）必要があります。</p><ul><li><a href="https://developers.google.com/drive/api/v3/reference/files/list">https://developers.google.com/drive/api/v3/reference/files/list</a></li></ul><p>簡単な実装例です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package, import 部分は省略</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx := context.Background()</span><br><span class="line"></span><br><span class="line">srv, err := drive.NewService(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Unable to retrieve Drive client: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> paging <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">r, err := srv.Files.List().PageSize(<span class="number">1000</span>).</span><br><span class="line">Fields(<span class="string">&quot;nextPageToken, files(id, name, parents)&quot;</span>). <span class="comment">// nextPageTokenをFiledsに追加</span></span><br><span class="line">PageToken(paging).</span><br><span class="line">Context(ctx).Do()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;Unable to retrieve files: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> r.Files &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s %s %+v\n&quot;</span>, f.Name, f.Id, f.Parents)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">paging = r.NextPageToken</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(paging) == <span class="number">0</span> &#123; <span class="comment">// 次のページング先が無ければ終了</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ファイル数が1000を超過する可能性がある場合は、忘れないようにしたいですね。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>サービスアカウントを用いて、Google Drive API v3をGo SDKを用いて操作する例をいくつかまとめました。Google Drive上のファイルにアクセスできると、システムやアプリに機能として組み込まなくても、ちょっとした業務を効率化することができると思います。うまく役立てていけると良いなと考えています。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/GoogleDrive/">GoogleDrive</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88/">サービスアカウント</category>
      
      <category domain="https://future-architect.github.io/tags/GoogleWorkspace/">GoogleWorkspace</category>
      
      
      <comments>https://future-architect.github.io/articles/20211022a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>FigmaからFlutterに変換するプラグインを比較する</title>
      <link>https://future-architect.github.io/articles/20211021a/</link>
      <guid>https://future-architect.github.io/articles/20211021a/</guid>
      <pubDate>Wed, 20 Oct 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;フューチャーでは、FigmaやAdobe</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>フューチャーでは、FigmaやAdobe XDなどのデザインツールの利用が以前よりも少しづつ増えています。今回の題材はFigmaです。</p><p>先月の「<a href="https://future-architect.github.io/articles/20210915a/">Adobe XDからFlutterに変換する</a>」の記事では、Adobe XDで作成したデザインをFlutterコードに落とし込むためのTipsを渋川さんが紹介してくれました。XD→Flutterの変換は、<a href="https://blog.adobe.com/jp/publish/2020/09/25/cc-web-xd-flutter-plugin-now-available.html">AdobeとGoogleが協力して開発している</a>プラグインがあるため、変換ツールの選択肢で迷うことはあまり無いのかなと思います。</p><p>それに対して、Figma→Flutterの変換は公式で開発 or 推奨されているツールが無く、様々な個人・企業が出しているツールからどれかを選択して利用する必要があります。この記事では、<strong>Figma→Flutterの変換をサポートする主なツールを紹介し、実際にそれらを使ってFlutterコードを出力した結果の比較を行っていきます。</strong>「Figmaからのコード生成って色々な方法があって何が良いのかよく分からん！」という人の参考になれば嬉しいです。</p><h1 id="Figma→Flutterを実現する方法"><a href="#Figma→Flutterを実現する方法" class="headerlink" title="Figma→Flutterを実現する方法"></a>Figma→Flutterを実現する方法</h1><p>FigmaからFlutter用のdartコードを生成する方法は主に以下の2パターンが存在するようです。</p><ol><li>Figmaのプラグインを使う方法</li><li>Figmaプラグインではない外部のサービスを利用する方法</li></ol><p>それぞれを紹介していきます。</p><h3 id="Figmaのプラグインを使う方法"><a href="#Figmaのプラグインを使う方法" class="headerlink" title="Figmaのプラグインを使う方法"></a>Figmaのプラグインを使う方法</h3><p>FigmaをFlutterに変換できると謳っているプラグインは複数存在していて、個人がメインで開発しているものから、企業が公開しているものまで様々です。ここでは、2021年10月時点のインストール数の上位4つを紹介します。<br>（<a href="https://www.figma.com/community/search?model_type=public_plugins&q=flutter">Figma Communityのページで検索する</a>と、インストール数がもっと少ないものもいくつか出てきます。）</p><p><strong>① Figma to Code（HTML, Tailwind, Flutter, SwiftUI）</strong></p><img src="/images/20211021a/Figma_to_Code.png" alt="Figmaからコード生成イメージ" width="1200" height="600" loading="lazy"><p>インストール数：28.5k<br>最終更新日：2021年3月9日</p><p><a href="https://www.figma.com/community/plugin/842128343887142055/Figma-to-Code-(HTML%2C-Tailwind%2C-Flutter%2C-SwiftUI)">Figma to Code (HTML, Tailwind, Flutter, SwiftUI</a>は、Bernardo Ferrariという人が主に開発をしているプラグインで、ソースが<a href="https://github.com/bernaferrari/FigmaToCode">githubに公開</a>されています。Figma→Flutter以外にもSwiftUI、tailwindcss、HTML5にも対応しているようですが、今回はFlutterの出力のみを試してみます。</p><p><strong>② Flutter Export</strong><br><img src="/images/20211021a/thumbnail-1.png" alt="Flutter Exportアイコン" width="1200" height="600" loading="lazy"><br>インストール数：11.3k<br>最終更新日：2019年11月22日</p><p><a href="https://www.figma.com/community/plugin/778755750523021654/Flutter-Export">Flutter Export</a>は、とてもFlutterに変換できそうな名前が付いていますが、Figmaで作ったものをPNG画像で出力するだけのプラグインのようです。インストールして少し試してみましたが、上手く動かすことができませんでした。最終更新日も約2年前と古く、メンテもされていなそうなので、今回の<strong>比較対象外</strong>とします。<br>（インストール数が少し多い理由が謎です。）</p><p><strong>③ FigmaToFlutter</strong><br><img src="/images/20211021a/thumbnail-2.png" alt="thumbnail-2.png" width="1200" height="600" loading="lazy"><br>インストール数：10.8k<br>最終更新日：2021年1月2日</p><p><a href="https://www.figma.com/community/plugin/844008530039534144/FigmaToFlutter">FigmaToFlutter</a>は、1つ目のFigma to Codeと同様に個人が開発しているプラグインで、使い方も非常に似ています。今回の<strong>比較対象</strong>とします。</p><p><strong>④ Assistant by Grida</strong><br><img src="/images/20211021a/thumbnail-3.png" alt="Assistant by Gridaイメージ" width="1200" height="600" loading="lazy"><br>インストール数：4.7k<br>最終更新日：2021年8月25日</p><p><a href="https://www.figma.com/community/plugin/896445082033423994/Assistant-by-Grida">Assistant by Grida</a>は、以前はBridgedという名前だったプラグインです。</p><p>Gridaという組織が開発しているようですが、<a href="https://www.grida.co/">Gridaのページ</a>を見てもGridaがどういう組織なのか（企業なのかどうかも）分からずでした。Gridaのページにはプラグインの<a href="https://www.grida.co/docs/getting-started">ドキュメント</a>もありますが、空ページが多かったり、まだ発展途上な感が否めないですが、今回の<strong>比較対象</strong>とします。</p><h3 id="Figmaのプラグイン以外を使う方法"><a href="#Figmaのプラグイン以外を使う方法" class="headerlink" title="Figmaのプラグイン以外を使う方法"></a>Figmaのプラグイン以外を使う方法</h3><p>Figmaのプラグインを使う方法以外にも、Figmaからコードを生成する方法はあるようです。<br>以下2つを紹介します。</p><p><strong>⑤ Flutlab.io</strong><br><img src="/images/20211021a/スクリーンショット_2021-10-08_14.29.55.png" alt="Flutlab.ioイメージ" width="1031" height="460" loading="lazy"></p><p><a href="https://flutlab.io/">FlutLab.io</a>は、Flutter用のオンラインIDE（総合開発環境）で、その中の機能としてFigma to Flutter Converterというものがあるようです。オンラインIDEは、セキュリティ等のポリシー上、実際のPJで利用できるかが不透明なため、今回は<strong>比較対象外</strong>とします。</p><p><strong>⑥ Bravo Studio</strong><br><img src="/images/20211021a/スクリーンショット_2021-10-08_14.30.51.png" alt="Bravo Studioイメージ図" width="927" height="432" loading="lazy"></p><p><a href="https://www.bravostudio.app/">Bravo Studio</a>は、デザインツールで作成したデザインをノーコードでアプリに変換するサービスです。最終的にネイティブコードを出力できたり、APIを叩く等の機能性を持たせることができたりするようで面白そうです。<br>ただし、このツール自体の使い方のキャッチアップが割と必要そうな印象を受けた（コードを上手く出力するためにFigma側のLayerの命名を調整する必要がある等）のと、実際のPJで利用できるだけの自由度があるかが未知数だったので、今回は<strong>比較対象外</strong>とします。</p><h3 id="今回の検証対象"><a href="#今回の検証対象" class="headerlink" title="今回の検証対象"></a>今回の検証対象</h3><p>様々なFigma→Flutterの実現方法を紹介してきましたが、今回の比較対象は以下の3つのFigmaプラグインとします。</p><ul><li><a href="https://www.figma.com/community/plugin/842128343887142055/Figma-to-Code-(HTML%2C-Tailwind%2C-Flutter%2C-SwiftUI)">Figma to Code (HTML, Tailwind, Flutter, SwiftUI</a></li><li><a href="https://www.figma.com/community/plugin/844008530039534144/FigmaToFlutter">FigmaToFlutter</a></li><li><a href="https://www.figma.com/community/plugin/896445082033423994/Assistant-by-Grida">Assistant by Grida</a></li></ul><h1 id="Figma→Flutterを試して比較してみる"><a href="#Figma→Flutterを試して比較してみる" class="headerlink" title="Figma→Flutterを試して比較してみる"></a>Figma→Flutterを試して比較してみる</h1><h2 id="比較方法"><a href="#比較方法" class="headerlink" title="比較方法"></a>比較方法</h2><h3 id="比較で使うFigmaとエクスポートの粒度"><a href="#比較で使うFigmaとエクスポートの粒度" class="headerlink" title="比較で使うFigmaとエクスポートの粒度"></a>比較で使うFigmaとエクスポートの粒度</h3><p>今回は、Figma上で作った以下のログイン画面をFlutterのコードに変換できるかを試していきます。<br><img src="/images/20211021a/スクリーンショット_2021-10-08_14.44.54.png" alt="スクリーンショット_2021-10-08_14.44.54.png" width="543" height="434" loading="lazy"><br>「<a href="https://future-architect.github.io/articles/20210915a/">Adobe XDからFlutterに変換する</a>」の記事では、一つの画面を丸ごとエクスポートするのは、AdobeとGoogleが協力して開発しているプラグインであっても中々上手くいかないことが多く、要素ごとにエクスポートをして貼り付けていくことを推奨していました。</p><p>よって、今回のFigma→Flutterの検証では様々な粒度でのエクスポートを試していきます。具体的には下記の<strong>①〜③</strong>を試していきます。下図の<strong>画面全体</strong>は、OS側で描画するホームバー等もFigma上で表現してしまっていて、それらの要素を省くと<strong>①ログインフォーム全体</strong>との差分があまり無くなるので今回の検証では省略します。<br><img src="/images/20211021a/スクリーンショット_2021-10-11_15.24.18.png" alt="スクリーンショット_2021-10-11_15.24.18.png" width="911" height="525" loading="lazy"></p><p>また<strong>①〜③</strong>のUIパーツ生成の検証に加え、画像の扱いについても比較検証を行いたいと思います。</p><h3 id="比較で使うdartコード"><a href="#比較で使うdartコード" class="headerlink" title="比較で使うdartコード"></a>比較で使うdartコード</h3><p>Android Studioで新規のFlutterプロジェクトを作り、<a href="https://flutter.dev/docs/get-started/test-drive?tab=androidstudio">生成されるデモアプリ</a>のScaffoldからheaderとbodyの中身を消した状態にして、body部分にプラグインが生成したdartコードをそのまま貼っていきます。ログインフォームが画面の中央部あたりに来るようにCenterウィジェットで囲っておきます。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyHomePageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyHomePage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      body: Center(</span><br><span class="line">          child: <span class="comment">//ここにコードを貼り付けていきます</span></span><br><span class="line">          ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="比較結果"><a href="#比較結果" class="headerlink" title="比較結果"></a>比較結果</h2><h3 id="比較①-ログインフォーム全体の出力"><a href="#比較①-ログインフォーム全体の出力" class="headerlink" title="比較①　ログインフォーム全体の出力"></a>比較①　ログインフォーム全体の出力</h3><div class="scroll"><table><thead><tr><th>出力対象(Figma)</th><th>Figma to Code</th><th>FigmaToFlutter</th><th>Assistant by Grida</th></tr></thead><tbody><tr><td><img src="/images/20211021a/スクリーンショット_2021-10-11_13.47.58.png" alt="ログインフォーム" width="340" height="231" loading="lazy"></td><td><img src="/images/20211021a/login_figma2code.png" alt="figma to code結果" width="357" height="698" loading="lazy"></td><td><img src="/images/20211021a/login_figma2flutter.png" alt="figma to flutter" width="357" height="698" loading="lazy"></td><td><img src="/images/20211021a/login_assistantByGrida.png" alt="assistanbe by grid結果" width="357" height="698" loading="lazy"></td></tr></tbody></table></div><p>ログインフォーム全体を出力対象として、各プラグインで出力した結果を上に示しています。<br>出力結果がプラグインによって全く異なるため、一つづつ見てきましょう。</p><p>まず、<strong>Figma to Code</strong>は、最も生成されたコードの質が高かったです。ContainerでそれぞれのUI要素の枠組みを作り、ColumnとRowで並べて、Sized Boxで要素間の隙間を作っていて、比較的可読性も高いコードになっていました。工事現場のような黄色と黒の線が出ているのは一番外側のContainerのheightが足りなく、中の要素がはみ出しているためです。これは、足りないheightの値を調整するだけで解消しました。<br>入力欄やボタンを判別することはできないようなので、生成されたコードはただの箱が並んでいるだけですが、生成結果をベースとしながら手直しをしていく前提で考えれば、割と実用的かなという印象です。</p><p>次の<strong>FigmaToFlutter</strong>は、エラーが出てしまいました。少し手直ししてエラーを解消すればいいというレベルじゃないくらいそもそものコードの中身が足りていなかったです。出力対象をもっとシンプルにして、何かが変わるかを見てみたいと思います。</p><p>最後の<strong>Assistant by Grida</strong>は、テキストしか出力されず、惜しい結果となりました。生成されたコードを見ても、テキスト以外の要素を出そうとした形跡は無かったです。こちらについても、出力対象をもっとシンプルにして、何が変わるかを見てみたいと思います。</p><h3 id="比較②-ログインボタンのみの出力"><a href="#比較②-ログインボタンのみの出力" class="headerlink" title="比較②　ログインボタンのみの出力"></a>比較②　ログインボタンのみの出力</h3><div class="scroll"><table><thead><tr><th>出力対象(Figma)</th><th>Figma to Code</th><th>FigmaToFlutter</th><th>Assistant by Grida</th></tr></thead><tbody><tr><td><img src="/images/20211021a/スクリーンショット_2021-10-11_14.00.39.png" alt="ログインボタン" width="338" height="154" loading="lazy"></td><td><img src="/images/20211021a/button_figma2code.png" alt="figma to code結果" width="357" height="698" loading="lazy"></td><td><img src="/images/20211021a/button_figma2flutter.png" alt="figma to flutter結果" width="357" height="698" loading="lazy"></td><td><img src="/images/20211021a/button_assistantByGrida.png" alt="Assistant by Grida結果" width="357" height="698" loading="lazy"></td></tr></tbody></table></div><p>ログインのボタン（青いボタンとログインのテキスト）を出力対象として、各プラグインで出力した結果を上に示しています。出力結果を一つづつ見てきましょう。</p><p>まず、<strong>Figma to Code</strong>は、問題ない出力結果で、1つ目の検証で起こっていた「要素のはみ出し」現象も無くなりました。</p><p>次の<strong>FigmaToFlutter</strong>は、再びエラーが出てしまいました。FigmaToFlutterが生成するコードでは、Figma to Codeと異なり、Stackウィジェットが使われています。Stackウィジェットは要素を重ねるときに使うウィジェットなので、Figma上の要素の重なり方が出力結果に何かしら影響している可能性があります。（今回のケースの出力対象は「ログイン」というテキスト部分と青い角丸の四角部分を重ねて作っています。）よって、出力対象を更にシンプルにして、要素の重なりが全く無い場合どうなるかを見てみようと思います。</p><p>最後の<strong>Assistant by Grida</strong>は、一見何も表示されていないように見えますが、白い「ログイン」という字だけ表示されていて、背景と同化してしまっています。こちらについても生成コードがStackウィジェットを使っているので、Figma上の要素の重なりが無くなると出力品質が変わってくるかもしれません。</p><h3 id="比較③-ログインボタンの箱のみの出力"><a href="#比較③-ログインボタンの箱のみの出力" class="headerlink" title="比較③　ログインボタンの箱のみの出力"></a>比較③　ログインボタンの箱のみの出力</h3><div class="scroll"><table><thead><tr><th>出力対象(Figma)</th><th>Figma to Code</th><th>FigmaToFlutter</th><th>Assistant by Grida</th></tr></thead><tbody><tr><td><img src="/images/20211021a/スクリーンショット_2021-10-11_14.05.06.png" alt="Figmaログインボックスのみ" width="338" height="73" loading="lazy"></td><td><img src="/images/20211021a/box_figma2code.png" alt="figma to code結果" width="357" height="698" loading="lazy"></td><td><img src="/images/20211021a/box_figma2flutter.png" alt="figma to flutter結果" width="357" height="698" loading="lazy"></td><td><img src="/images/20211021a/box_assistantByGrida.png" alt="assistant by grida結果" width="357" height="698" loading="lazy"></td></tr></tbody></table></div><p>最後に、ログインのボタンの箱（青い角丸の四角）部分のみを出力対象として、各プラグインで出力した結果を上に示しています。</p><p>まず、<strong>Figma to Code</strong>は、問題ない出力結果でした。安定感があります。</p><p>次の<strong>FigmaToFlutter</strong>は、初めてエラーが出ず、出力結果としても問題ないものになりました。やはり、少しでも要素の重なりがあると上手く動いてくれない傾向があるようです。あまり実用的ではないですね。</p><p>最後の<strong>Assistant by Grida</strong>では、やっとテキスト以外の要素を出力することができましたが、角丸の表現ができておらず、サイズも正しくありません。</p><h3 id="比較④-画像の扱い"><a href="#比較④-画像の扱い" class="headerlink" title="比較④　画像の扱い"></a>比較④　画像の扱い</h3><div class="scroll"><table><thead><tr><th>出力対象(Figma)</th><th>Figma to Code</th><th>FigmaToFlutter</th><th>Assistant by Grida</th></tr></thead><tbody><tr><td><img src="/images/20211021a/Logo.png" alt="ロゴ" width="1200" height="513" loading="lazy"></td><td><img src="/images/20211021a/png_figma2code.png" alt="figma to code結果" width="357" height="698" loading="lazy"></td><td><img src="/images/20211021a/png_figma2flutter.png" alt="figma to flutter結果" width="357" height="698" loading="lazy"></td><td><img src="/images/20211021a/png_assistantByGrida.png" alt="assistant by grida結果" width="357" height="698" loading="lazy"></td></tr><tr><td><img src="/images/20211021a/SVGロゴ.png" alt="svgロゴ" width="74" height="67" loading="lazy"></td><td><img src="/images/20211021a/svg_figma2code.png" alt="figma to code結果" width="357" height="698" loading="lazy"></td><td><img src="/images/20211021a/svg_figma2flutter.png" alt="figma to flutter結果" width="357" height="698" loading="lazy"></td><td><img src="/images/20211021a/svg_assistantByGrida.png" alt="assistant by grida結果" width="357" height="698" loading="lazy"></td></tr></tbody></table></div><p>ラスター画像、ベクター画像をそれぞれ出力対象として、各プラグインで出力した結果を上に示しています。</p><p>まず、<strong>Figma to Code</strong>は、全ての画像をFlutterLogo()に差し替えてしまいます。画像を表示させる気がそもそも無さそうですね。</p><p>次の<strong>FigmaToFlutter</strong>は、画像の扱いが最も優れていました。ラスター画像の場合はAssetImageを使って表示をするコードが生成され、ベクター画像の場合は<a href="https://pub.dev/packages/flutter_svg">flutter_svg</a>パッケージを使ったコードを生成してくれます。また、画像ファイル自体をプラグインの画面上でダウンロードもできるようになっていました。</p><p>最後の<strong>Assistant by Grida</strong>では、下記のようなImage.network()を使ったコードが生成されますが、”grida://“で始まるURLが上手く動作しません。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Image.network(</span><br><span class="line">  <span class="string">&quot;grida://assets-reservation/images/13902:10114&quot;</span>,</span><br><span class="line">  width: <span class="number">315</span>,</span><br><span class="line">  height: <span class="number">134</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="比較結果まとめ"><a href="#比較結果まとめ" class="headerlink" title="比較結果まとめ"></a>比較結果まとめ</h3><p>Figma→Flutterを実現するためのプラグインの比較を行ってきました。比較結果を以下の表に示します。</p><div class="scroll"><table><thead><tr><th>#</th><th>プラグイン名</th><th>総合評価</th><th>テキスト</th><th>シェイプ</th><th>ラスター画像</th><th>ベクター画像</th><th>要素のネスト/重なり</th></tr></thead><tbody><tr><td>1</td><td>Figma to Code</td><td>◎</td><td>◎</td><td>◎</td><td>✕</td><td>✕</td><td>◎</td></tr><tr><td>2</td><td>FigmaToFlutter</td><td>△</td><td>◯</td><td>◯</td><td>◎</td><td>◎</td><td>✕</td></tr><tr><td>3</td><td>Assistant by Grida</td><td>△</td><td>◯</td><td>△</td><td>✕</td><td>✕</td><td>✕</td></tr></tbody></table></div><p>比較をした3つのプラグインをそれぞれ一言で表すと、</p><ul><li><strong>Figma to Code</strong>は「安定感がある」</li><li><strong>FigmaToFlutter</strong>は「実用的ではないが今後に期待」</li><li><strong>Assistant by Grida</strong>は「ずっと惜しい」</li></ul><p>という結果になりました。<br>実際の開発に導入するのであれば、<strong>Figma to Code</strong>以外は選択肢から外れるかな、という印象です。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回紹介したプラグインとサービスのまとめ。</p><div class="scroll"><table><thead><tr><th>#</th><th>名称</th><th>種別</th><th>変換結果</th><th>備考</th></tr></thead><tbody><tr><td>1</td><td>Figma to Code</td><td>プラグイン</td><td>◎</td><td>安定感が感じられる</td></tr><tr><td>2</td><td>Flutter Export</td><td>プラグイン</td><td>ー</td><td>Figmaで作ったものをPNG画像化するのみ</td></tr><tr><td>3</td><td>FigmaToFlutter</td><td>プラグイン</td><td>△</td><td>今後に期待</td></tr><tr><td>4</td><td>Assistant by Grida</td><td>プラグイン</td><td>△</td><td>ずっと惜しい</td></tr><tr><td>5</td><td>Flutlab.io</td><td>外部サービス</td><td>ー</td><td>オンライン上の変換であったためPJによっては利用できない可能性を考慮し、今回は検証をスキップ</td></tr><tr><td>6</td><td>Bravo Studio</td><td>外部サービス</td><td>ー</td><td>Figma側の命名規則があるなどお作法があり今回は検証スキップ</td></tr></tbody></table></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%8A%80%E8%A1%93%E9%81%B8%E5%AE%9A/">技術選定</category>
      
      <category domain="https://future-architect.github.io/tags/Figma/">Figma</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA/">モバイルアプリ</category>
      
      <category domain="https://future-architect.github.io/tags/Flutter/">Flutter</category>
      
      
      <comments>https://future-architect.github.io/articles/20211021a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>OpenTelemetryとgo-chiを繋げてみる</title>
      <link>https://future-architect.github.io/articles/20211020a/</link>
      <guid>https://future-architect.github.io/articles/20211020a/</guid>
      <pubDate>Tue, 19 Oct 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;OpenTelemetryのGoのTraceがstableになり、1.0がリリースされました。最初の1.0宣言からはだいぶ時間がかかりましたが、Go/Javaなどさまざまな言語の開発が同時進行で、共通のプロトコルも決めて、なおかつさまざまな拡張のAPIを提供して、さらに&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>OpenTelemetryのGoのTraceがstableになり、1.0がリリースされました。最初の1.0宣言からはだいぶ時間がかかりましたが、Go/Javaなどさまざまな言語の開発が同時進行で、共通のプロトコルも決めて、なおかつさまざまな拡張のAPIを提供して、さらに<a href="https://opentelemetry.io/registry/">その拡張も現時点で300以上も提供されている</a>あたり、かなり巨大な風呂敷をどかーんと広げたような感じがします。</p><div class="scroll"><table><thead><tr><th align="center">日時</th><th align="left">できごと</th></tr></thead><tbody><tr><td align="center">2021/02/17</td><td align="left"><a href="https://medium.com/opentelemetry/opentelemetry-specification-v1-0-0-tracing-edition-72dd08936978">OpenTelemetryのTracingの仕様が1.0に</a></td></tr><tr><td align="center">2021/02/26</td><td align="left"><a href="https://medium.com/opentelemetry/opentelemetry-net-reaches-v1-0-e7c5e975fd44">.NET実装が1.0に</a></td></tr><tr><td align="center">2021/03/06</td><td align="left"><a href="https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/tag/v1.0.0">Java実装が1.0に</a></td></tr><tr><td align="center">2021/03/27</td><td align="left"><a href="https://medium.com/opentelemetry/announcing-opentelemetry-python-1-0-4e097562b8e0">Python実装が1.0に</a></td></tr><tr><td align="center">2021/09/20</td><td align="left"><a href="https://github.com/open-telemetry/opentelemetry-cpp/releases/tag/v1.0.0">C++実装が1.0に</a></td></tr><tr><td align="center">2021/09/21</td><td align="left"><a href="https://github.com/open-telemetry/opentelemetry-go/releases/tag/v1.0.0">Go実装が1.0に</a></td></tr><tr><td align="center">2021/09/27</td><td align="left"><a href="https://medium.com/opentelemetry/opentelemetry-collector-achieves-tracing-stability-milestone-80e34cadbbf5">OpenTelemetry CollectorがGA</a></td></tr><tr><td align="center">2021/10/01</td><td align="left"><a href="https://github.com/open-telemetry/opentelemetry-js/releases/tag/stable%2Fv1.0.0">JavaScript実装が1.0に</a></td></tr><tr><td align="center">2021/10/01</td><td align="left"><a href="https://github.com/open-telemetry/opentelemetry-ruby/releases/tag/opentelemetry-sdk%2Fv1.0.0">Ruby実装が1.0に</a></td></tr></tbody></table></div><p>PHP/Rust/Swift/Erlangあたりはコミットチャンス？</p><h1 id="2年前からアップデートされていると感じたポイント"><a href="#2年前からアップデートされていると感じたポイント" class="headerlink" title="2年前からアップデートされていると感じたポイント"></a>2年前からアップデートされていると感じたポイント</h1><p>OpenTelemtryと、その前身のOpenCensusについてはこのブログでも取り上げました。</p><ul><li><a href="/articles/20190604/">OpenCensus(OpenTelemetry)とは | フューチャー技術ブログ</a></li></ul><p>基本的な考え方は前回紹介したものと変わっていませんが、2年前からいくつか変わったかも？と思ったところをピックアップするとこんなところですかね。</p><ul><li>OpenTelemetryはOpenTelemetry専用のエージェント（ログ中継サービス）の活用も最初から視野に入っており、エージェント向けのエクスポーターも提供されている（OpenCensusにもあったがバージョンが最終版でも0.1.11で安定版ではなかった）。</li><li>stdoutロガーが一級市民扱い？</li><li>トレース、メトリックスという2種類の機能のほかに、Fluentdのようなアプリケーションのログ機能も開発中</li></ul><p>今までは、エクスポーターを明示的にアプリケーションが設定する使い方がメインでした。エージェントを使うということは、アプリケーションは最終的なログ収集基盤について知る必要がなくなり、システムを疎結合にできます。</p><p>stdoutは地味でデバッグ用途っぽさが前のOpenCensusにはありましたが、stdoutロガーはコンテナとの相性が抜群です。ログを受けとって流す先をカスタマイズできるようにするために、コンテナ内部にエージェントの接続先設定を変更するロジックを仕込む必要はありません。コンテナの外から色々できます。認証とかを気にする必要もありません。クラウドサービスだと、ログドライバーの選択だけで良くなりますね。</p><p>で、stdoutに出すとなると、トレース以外の情報とかと混ざってしまいがちなので、アプリケーションログ出力とかも一緒に出せる仕組みが整備されるといいな、というところでアプリケーションログ機能もOpenTelemetryが備えるのはうれしいですね。ただ出すだけではなくて、<a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/logs/data-model.md#trace-context-fields">トレースとリンクできるようにトレースIDを持つ</a>ことが検討されてるようですね。実装は<a href="https://github.com/observIQ/stanza">Go製のFluentd的なStanza</a>をベースにするとかなんとか。</p><h1 id="OpenTelemetryは分散しない人にも注目"><a href="#OpenTelemetryは分散しない人にも注目" class="headerlink" title="OpenTelemetryは分散しない人にも注目"></a>OpenTelemetryは分散しない人にも注目</h1><p>OpenTelemtryはその名の通り「テレメトリー」のためのソフトウェア群です。テレメトリーは一般用語です。次の解説がわかりやすいです。</p><ul><li><a href="https://tenbou.nies.go.jp/science/description/detail.php?id=87">環境技術解説: テレメトリー（環境展望台)</a></li></ul><p>分散システムのすべてにsshしてログファイルをtailするとかはナンセンスですし、野生動物のトラッキング的に遠隔で情報収集する仕組みですが、そうじゃない人にも、何の情報をどう出すか、の指標にまで踏み込もうとしている点は個人的に注目ポイントです。</p><p>例えば、ウェブサービスのエンドポイントやデータベース接続でどんな情報を出すのか、といった情報がまとまっています。小規模のアプリケーションを作る人にも参考になるでしょう。</p><ul><li><a href="https://github.com/open-telemetry/opentelemetry-specification/tree/main/specification/trace/semantic_conventions">トレースのログ出力内容</a></li></ul><p>ログのエラーレベルについても<a href="https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/logs/data-model.md#severity-fields">ガイドライン</a>が作られています。まだまだログの実装自体は行われていませんが、このあたり、言語やロギングライブラリによっても指標はバラバラでした。エラーレベル自体はそこまでブレることはないですが（CRITICALとかがあったりなかったりはあるが）、どういうキーですか？（LEVEL？SEVERITY？)とかも違っていました。そのため、ログ収集基盤を作った時に何をエラーとして通知するかは毎回手作りしていたと思いますが、指標が決まってくるとデフォルトでいい感じに動くようになってくるでしょう。ということで、各言語の次世代ロギングライブラリを作ってOSS界隈で名前を売りたい会社は今がチャンスと言えます。</p><p>以前、<a href="https://future-architect.github.io/articles/20210427b/">Future Tech Nightでローカルで動くログビューア</a>を試しに作って発表しました。これも構造化ロギングを前提としたものですが、アプリケーションログ出力が平準化されるなら、少ない設定でいい感じに動くビューアーとかも開発しやすくなりますね。</p><h1 id="OpenTelemetryの始め方"><a href="#OpenTelemetryの始め方" class="headerlink" title="OpenTelemetryの始め方"></a>OpenTelemetryの始め方</h1><p>アプリケーションに組み込む方法を紹介します。スタートするにはまずOpenTelemetryのサイトのRegisteryを見ると良さそうです。生のAPIを叩いてもいいのですが、アプリケーションの特定のミドルウェアやフレームワークとのインタフェースがinstrumentationとして提供されています。アプリケーション側のトレース情報を取り出す便利ライブラリがいくつもあります。</p><img src="/images/20211020a/スクリーンショット_2021-10-02_11.52.04.png" alt="スクリーンショット_2021-10-02_11.52.04.png" width="1200" height="725" loading="lazy"><p>ここに対応したいプラグインが登録されていれば、そのサンプルコードを参考にするのが簡単です。例えば、gorilla/muxを使っていれば、<a href="https://github.com/open-telemetry/opentelemetry-go-contrib/tree/main/instrumentation/github.com/gorilla/mux">gorilla/mux用のinstrumentation</a>があるので<a href="https://github.com/open-telemetry/opentelemetry-go-contrib/blob/main/instrumentation/github.com/gorilla/mux/otelmux/example/server.go#L44">このサンプルの通り</a>にアプリケーションに組み込めばいいので簡単ですね。gorilla/muxのミドルウェアとして実装されています。初期設定はありますが、実質一行です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r.Use(otelmux.Middleware(<span class="string">&quot;my-server&quot;</span>))</span><br></pre></td></tr></table></figure><p>ただ、これでは１つのスパンが作られるだけなので、内部でスパンを作ったりしたい場合は<code>context.Context</code>の内部に格納された情報をもとに新しいスパンを作るAPIがあるのでそれを使います。<a href="https://github.com/open-telemetry/opentelemetry-go-contrib/blob/main/instrumentation/github.com/gorilla/mux/otelmux/example/server.go#L71-L72">サンプルの中にもあります</a>ね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_, span := tracer.Start(ctx, <span class="string">&quot;getUser&quot;</span>, oteltrace.WithAttributes(attribute.String(<span class="string">&quot;id&quot;</span>, id)))</span><br><span class="line"><span class="keyword">defer</span> span.End()</span><br></pre></td></tr></table></figure><p>このサンプルもstdoutエクスポーターがが最初から設定されているので、まずはこの状態で動かしてみて、欲しい情報が出ているか確認します。確認できたら、エクスポーター側も変更して、実際の出力先へのインタフェースを追加していきます。GCPとか、OSSのJaegerとかZipkinとかもありますし、SaaSのSplunkとかNew Relicとかありますね。</p><p>AWSはコレクター向けのものがあるので、アプリのエクスポーターとしてはコレクターを選択してコレクターの設定をするとX-Rayに出せるようです。</p><h1 id="go-chiと繋ぐ"><a href="#go-chiと繋ぐ" class="headerlink" title="go-chiと繋ぐ"></a>go-chiと繋ぐ</h1><p>で、ここを見るとお気に入りのgo-chiがありません。go-chiに繋いでみます。gorilla/muxもgo-chiも、ミドルウェアとしては言語標準的なインタフェースを共有しているため、gorilla/muxが使えないか試してみましたが、スパン名がUnknownとなってしまいます。</p><p>というのも、インタフェースは同じであっても、<a href="https://github.com/open-telemetry/opentelemetry-go-contrib/blob/main/instrumentation/github.com/gorilla/mux/otelmux/mux.go#L120-L130">gorilla/mux</a>のエクスポーターは、contextに入っているgorilla/mux専用のデータにアクセスしてパス情報をとってきているからです。</p><p>では標準ライブラリの<a href="https://github.com/open-telemetry/opentelemetry-go-contrib/tree/main/instrumentation/net/http">net/http向けのエクスポータ</a>が使えるかというと、これもそのままでは使えません。net/httpのエクスポータはスパン名をミドルウェア作成時に固定値（ここでは<code>&quot;Hello&quot;</code>)で渡す必要があります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">otelHandler := otelhttp.NewHandler(http.HandlerFunc(helloHandler), <span class="string">&quot;Hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">http.Handle(<span class="string">&quot;/hello&quot;</span>, otelHandler)</span><br></pre></td></tr></table></figure><p>エンドポイントごとに別の名前を設定したい場合は、これをベースにchiのミドルウェアを作るとしたら（net/httpのexporterラッパー)次のようにエンドポイントごとに設定が必要ですし、URLのパスとスパン名と同じような名前を二度書かないといけないのはクールじゃないですね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// net/httpを使うとイマイチ</span></span><br><span class="line">r := chi.NewRouter()</span><br><span class="line">r.With(otel(<span class="string">&quot;hello&quot;</span>).Get(<span class="string">&quot;/hello&quot;</span>, helloHandler)</span><br><span class="line">r.With(otel(<span class="string">&quot;bye&quot;</span>).Get(<span class="string">&quot;/bye&quot;</span>, byeHandler)</span><br><span class="line">:</span><br></pre></td></tr></table></figure><p>高機能なRouterと繋ぐには新しいinstrumentationを実装する必要があることがわかりました。ただ、インタフェースも含めてgorilla/muxのものがほぼ近いのでこれを改造すれば良さそうです。gorilla/muxから情報をもらってくるところを書き換えれば良さそうです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 変更前</span></span><br><span class="line">route := mux.CurrentRoute(r)</span><br><span class="line"><span class="keyword">if</span> route != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">spanName, err = route.GetPathTemplate()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">spanName, err = route.GetPathRegexp()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">spanName = <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">routeStr := spanName</span><br><span class="line"></span><br><span class="line"><span class="comment">// 変更後</span></span><br><span class="line">c := chi.RouteContext(r.Context())</span><br><span class="line">spanName := c.RoutePattern()</span><br></pre></td></tr></table></figure><p>これで完璧じゃん、と思ったが、spanNameが空文字にしかなりません。30分ぐらい悩んだところ、ミドルウェアから次のhttp.Hanlderの処理が終わった後にしか<a href="https://github.com/go-chi/chi/issues/270">正しい情報が返ってこないというissue</a>を発見。gorilla/muxのinstrumentationのミドルウェアの実装は、スパン作成時にattributeを設定していますが、APIを見るとあとからも設定できそうです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本ロジックを処理</span></span><br><span class="line">tw.handler.ServeHTTP(rrw.writer, r2)</span><br><span class="line"><span class="comment">// 終わってからchiのAPIを使っていろいろ情報を収集してspanの名前とか属性を変更</span></span><br><span class="line">c := chi.RouteContext(r.Context())</span><br><span class="line">spanName := c.RoutePattern()</span><br><span class="line">span.SetName(spanName)</span><br><span class="line">span.SetAttributes(semconv.HTTPServerAttributesFromHTTPRequest(tw.service, spanName, r)...)</span><br></pre></td></tr></table></figure><p>これでchiでもOpenTelemetryと繋がりました！ gorilla/muxのと同じように、1行<code>Use</code>を書くだけで全部のロジックにトレース出力が差し込めます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1行で全エンドポイントにパスをスパン名としたトレースログ出力ができるように</span></span><br><span class="line">r.Use(otelchi.Middleware(<span class="string">&quot;hello-world&quot;</span>))</span><br></pre></td></tr></table></figure><p>動く実装は次のところに置いておきます。</p><p><a href="https://gitlab.com/osaki-lab/otelchi">https://gitlab.com/osaki-lab/otelchi</a></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>OpenTelemetryの概要と、個人的に気になっているアップデートの方向性、実際にアプリに組み込む方法、go-chiに繋いでみる方法などを紹介しました。</p><p>OpenTelemetryは単に便利なライブラリというだけでなく新しいエコシステムを作る土台となるものです。いろいろ作りたくなりますね。</p><p>本記事を書くにあたって<a href="https://twitter.com/ymotongpoo">@ymotongpoo氏</a>と<a href="https://twitter.com/katzchang">@katzchang</a>氏にアドバイスをいただきました。ありがとうございました。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://opentelemetry.io/">OpenTelemetry公式サイト</a></li><li><a href="https://github.com/open-telemetry/opentelemetry-specification">OpenTelemetry仕様リポジトリ</a></li><li><a href="https://github.com/open-telemetry/docs-ja">OpenTelemetryドキュメント日本語化プロジェクト</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/OpenTelemetry/">OpenTelemetry</category>
      
      <category domain="https://future-architect.github.io/tags/CNCF/">CNCF</category>
      
      <category domain="https://future-architect.github.io/tags/go-chi/">go-chi</category>
      
      
      <comments>https://future-architect.github.io/articles/20211020a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Engineer Camp2021: Python の AST モジュールを使ってクラス構造を可視化する</title>
      <link>https://future-architect.github.io/articles/20211019a/</link>
      <guid>https://future-architect.github.io/articles/20211019a/</guid>
      <pubDate>Mon, 18 Oct 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、Future のインターン Engineer Camp に参加した空閑です。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Future のインターン Engineer Camp に参加した空閑です。<a href="/articles/20210927b/">Python連載</a>の9本目です。</p><p>今回のインターンではソースコード静的解析システムの開発に取り組みました。そこで本記事では、開発内容の一部である、Python の AST モジュールを使ったクラス構造の可視化について紹介します。</p><p>Python の環境構築については以下を参考にしました。</p><ul><li><a href="/articles/20210611a/">サーバーアプリ開発環境(Python／FastAPI) - Future Tech Blog</a></li></ul><p>また、本記事で出てくる AST については下記を参照ください。言語やパーサは違いますが基本的な考え方は同じです。</p><ul><li><a href="/articles/20200903/">ANTLRを業務で活用した話 - Future Tech Blog</a></li></ul><h1 id="Python-の-AST-モジュール"><a href="#Python-の-AST-モジュール" class="headerlink" title="Python の AST モジュール"></a>Python の AST モジュール</h1><p>Python では AST（抽象構文木）を扱うモジュールが<a href="https://docs.python.org/ja/3/library/ast.html">標準ライブラリ</a>として提供されています。まずは試しに、適当なソースコードの AST を取得してみます。</p><figure class="highlight py"><figcaption><span>target.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.pushed = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.pushed = <span class="keyword">not</span> self.pushed</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;target.py&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    source = f.read()</span><br><span class="line">    tree = ast.parse(source=source)</span><br><span class="line">    <span class="built_in">print</span>(ast.dump(tree, indent=<span class="number">4</span>))</span><br></pre></td></tr></table></figure><details>  <summary>出力結果（長いので折り畳み）</summary>  <div>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Module(</span><br><span class="line">    body=[</span><br><span class="line">        ClassDef(</span><br><span class="line">            name=&#x27;Button&#x27;,</span><br><span class="line">            bases=[],</span><br><span class="line">            keywords=[],</span><br><span class="line">            body=[</span><br><span class="line">                FunctionDef(</span><br><span class="line">                    name=&#x27;__init__&#x27;,</span><br><span class="line">                    args=arguments(</span><br><span class="line">                        posonlyargs=[],</span><br><span class="line">                        args=[</span><br><span class="line">                            arg(arg=&#x27;self&#x27;)],</span><br><span class="line">                        kwonlyargs=[],</span><br><span class="line">                        kw_defaults=[],</span><br><span class="line">                        defaults=[]),</span><br><span class="line">                    body=[</span><br><span class="line">                        Assign(</span><br><span class="line">                            targets=[</span><br><span class="line">                                Attribute(</span><br><span class="line">                                    value=Name(id=&#x27;self&#x27;, ctx=Load()),</span><br><span class="line">                                    attr=&#x27;pushed&#x27;,</span><br><span class="line">                                    ctx=Store())],</span><br><span class="line">                            value=Constant(value=False))],</span><br><span class="line">                    decorator_list=[]),</span><br><span class="line">                FunctionDef(</span><br><span class="line">                    name=&#x27;push&#x27;,</span><br><span class="line">                    args=arguments(</span><br><span class="line">                        posonlyargs=[],</span><br><span class="line">                        args=[</span><br><span class="line">                            arg(arg=&#x27;self&#x27;)],</span><br><span class="line">                        kwonlyargs=[],</span><br><span class="line">                        kw_defaults=[],</span><br><span class="line">                        defaults=[]),</span><br><span class="line">                    body=[</span><br><span class="line">                        Assign(</span><br><span class="line">                            targets=[</span><br><span class="line">                                Attribute(</span><br><span class="line">                                    value=Name(id=&#x27;self&#x27;, ctx=Load()),</span><br><span class="line">                                    attr=&#x27;pushed&#x27;,</span><br><span class="line">                                    ctx=Store())],</span><br><span class="line">                            value=UnaryOp(</span><br><span class="line">                                op=Not(),</span><br><span class="line">                                operand=Attribute(</span><br><span class="line">                                    value=Name(id=&#x27;self&#x27;, ctx=Load()),</span><br><span class="line">                                    attr=&#x27;pushed&#x27;,</span><br><span class="line">                                    ctx=Load())))],</span><br><span class="line">                    decorator_list=[])],</span><br><span class="line">            decorator_list=[])],</span><br><span class="line">    type_ignores=[])</span><br></pre></td></tr></table></figure>  </div></details><p><code>ast.parse</code> にソースコードを渡すことで AST が得られます。実際には、ツリーの根を表すAST ノードを取得することになります。<code>ast.dump</code> は引数に AST ノードを取り、そのノードを根とするツリーを、フォーマットした文字列として返します。</p><p>では次に、AST をたどって特定のノードに反応するコードを書いてみます。<code>ast.NodeVisitor</code> は AST をトラバースするための基底クラスで、このクラスを継承して独自の処理を追加します。これは Visitor パターンとなっているため、クラスごとに <code>visit_&#123;class_name&#125;</code> のメソッドを用意していきます。例えば、ソースコード内で定義されている関数名を列挙するためには、関数定義を表すノード <code>ast.FunctionDef</code> に反応する <code>visit_FunctionDef</code> メソッドを作成し、その中で関数名を表す <code>ast.FunctionDef.name</code> を参照します。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyNodeVisitor</span>(<span class="params">ast.NodeVisitor</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_FunctionDef</span>(<span class="params">self, node: ast.FunctionDef</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(node.name)</span><br><span class="line">        self.generic_visit(node)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;target.py&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    source = f.read()</span><br><span class="line">    tree = ast.parse(source=source)</span><br><span class="line">    MyNodeVisitor().visit(tree)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">__init__</span><br><span class="line">push</span><br></pre></td></tr></table></figure><p><code>visit_&#123;class_name&#125;</code> を定義することで、<code>ast.&#123;class_name&#125;</code> のノードを訪れたときのみ実行されるメソッドが作成できます。また、以下の引用のように <code>self.generic_visit()</code> を省略してしまうと、そのノードの子ノードは訪れることができないので注意してください。</p><blockquote><p>注意して欲しいのは、専用のビジター・メソッドを具えたノードの子ノードは、このビジターが generic_visit() を呼び出すかそれ自身で子ノードを訪れない限り訪れられないということです。<br><a href="https://docs.python.org/ja/3/library/ast.html#ast.NodeVisitor.generic_visit">https://docs.python.org/ja/3/library/ast.html#ast.NodeVisitor.generic_visit</a></p></blockquote><h1 id="ツール概要"><a href="#ツール概要" class="headerlink" title="ツール概要"></a>ツール概要</h1><p>今回の目標は、パッケージ・モジュール・クラスをノードとする図のようなツリーの作成です。パッケージとモジュールはディレクトリ構造にしたがってつなぎ、モジュールの下にはその中で定義されているクラスをつなぎます。作成にあたり、モジュール違いの同名クラスなどが出現することに注意します。</p><img src="/images/20211019a/graph_sample.PNG" alt="graph_sample.PNG" width="1036" height="661" loading="lazy"><p>AST はディレクトリ構造までは表現しないため、今回は以下の手順で解析を行います。</p><ol><li>Node 定義</li><li>ディレクトリ構造解析</li><li>クラス定義解析</li><li>Graphviz で可視化</li></ol><h2 id="1-Node-定義"><a href="#1-Node-定義" class="headerlink" title="1. Node 定義"></a>1. Node 定義</h2><p>解析する前に準備として <code>Node</code> クラスを定義しておきます。これを可視化するツリーのノードと一対一で対応させます。そして <code>Node</code> を継承した <code>NodePackage</code>, <code>NodeModule</code>, <code>NodeClass</code> を定義し、可視化に必要な情報を保持しておきます。今回はノードの識別に最小限必要なパスおよびクラス名を保持しました。これらはグラフのラベル等に使用します。</p><figure class="highlight py"><figcaption><span>node.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> annotations</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self,</span></span></span><br><span class="line"><span class="params"><span class="function">        path: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        parent: <span class="type">Optional</span>[Node] = <span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        obj_name: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        self.children: <span class="built_in">list</span>[Node] = []</span><br><span class="line">        self.parent: <span class="type">Optional</span>[Node] = parent</span><br><span class="line">        self.path: <span class="type">Optional</span>[<span class="built_in">str</span>] = path</span><br><span class="line">        <span class="comment"># Graphviz で可視化する際のラベル</span></span><br><span class="line">        self.obj_name: <span class="type">Optional</span>[<span class="built_in">str</span>] = obj_name</span><br><span class="line">        <span class="comment"># obj_name をルートノードから順にドットで連結したもの</span></span><br><span class="line">        <span class="keyword">if</span> parent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.obj_name_full: <span class="type">Optional</span>[<span class="built_in">str</span>] = obj_name</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.obj_name_full = (</span><br><span class="line">                <span class="string">f&quot;<span class="subst">&#123;parent.obj_name_full&#125;</span>.<span class="subst">&#123;obj_name&#125;</span>&quot;</span></span><br><span class="line">                <span class="keyword">if</span> parent.obj_name_full <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line">                <span class="keyword">else</span> obj_name</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeRoot</span>(<span class="params">Node</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodePackage</span>(<span class="params">Node</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;パッケージ情報を表現するノード&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self,</span></span></span><br><span class="line"><span class="params"><span class="function">        path: <span class="built_in">str</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        parent: NodeRoot | NodePackage,</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>):</span></span><br><span class="line">        <span class="comment"># obj_name はディレクトリ名</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(path, parent, obj_name=os.path.basename(path))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeModule</span>(<span class="params">Node</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;モジュール情報を表現するノード&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, path: <span class="built_in">str</span>, parent: NodePackage</span>):</span></span><br><span class="line">        <span class="comment"># obj_name はファイル名から拡張子を取り除いたもの</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(</span><br><span class="line">            path, parent, obj_name=os.path.splitext(os.path.basename(path))[<span class="number">0</span>]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeClass</span>(<span class="params">Node</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;クラス情報を表現するノード&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, parent: NodeModule | NodeClass, node: ast.ClassDef</span>):</span></span><br><span class="line">        <span class="comment"># obj_name はクラス名</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(path=parent.path, parent=parent, obj_name=node.name)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-ディレクトリ構造解析"><a href="#2-ディレクトリ構造解析" class="headerlink" title="2. ディレクトリ構造解析"></a>2. ディレクトリ構造解析</h2><p>探索対象のパス以下を再帰的に解析し、パッケージおよびモジュールのみのツリーを作成します。この時点では図のようなツリーが構築されています。</p><img src="/images/20211019a/graph_sample_pre.PNG" alt="graph_sample_pre.PNG" width="665" height="421" loading="lazy"><figure class="highlight py"><figcaption><span>tree.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_module_tree</span>(<span class="params">search_path: <span class="built_in">str</span>, root: <span class="type">Optional</span>[NodeRoot] = <span class="literal">None</span></span>) -&gt; NodeRoot:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;パスを再帰的にたどり、パッケージ・モジュールのみのツリーを作成</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        search_path (str): 対象ファイル・ディレクトリのパス</span></span><br><span class="line"><span class="string">        root (NodeRoot, optional): ツリーのルート. Defaults to None.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        NodeRoot: ツリーのルート</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">search_path: <span class="built_in">str</span>, parent_node: Node</span>):</span></span><br><span class="line">        <span class="comment"># 正規表現で検索</span></span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> glob.iglob(search_path):</span><br><span class="line">            <span class="comment"># 絶対パス</span></span><br><span class="line">            abspath = os.path.abspath(path)</span><br><span class="line">            <span class="comment"># パッケージ</span></span><br><span class="line">            <span class="keyword">if</span> os.path.isdir(path):</span><br><span class="line">                <span class="keyword">assert</span> <span class="built_in">isinstance</span>(parent_node, NodeRoot) <span class="keyword">or</span> <span class="built_in">isinstance</span>(</span><br><span class="line">                    parent_node, NodePackage</span><br><span class="line">                )</span><br><span class="line">                node_package = NodePackage(abspath, parent_node)</span><br><span class="line">                parent_node.children.append(node_package)</span><br><span class="line">                <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">                    dfs(<span class="string">f&quot;<span class="subst">&#123;path&#125;</span>/<span class="subst">&#123;file&#125;</span>&quot;</span>, node_package)</span><br><span class="line">            <span class="comment"># モジュール</span></span><br><span class="line">            <span class="keyword">elif</span> os.path.splitext(path)[<span class="number">1</span>] == <span class="string">&quot;.py&quot;</span>:</span><br><span class="line">                <span class="keyword">assert</span> <span class="built_in">isinstance</span>(parent_node, NodePackage)</span><br><span class="line">                node_module = NodeModule(abspath, parent_node)</span><br><span class="line">                parent_node.children.append(node_module)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        root = NodeRoot()</span><br><span class="line">    dfs(search_path, root)</span><br><span class="line">    <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h2 id="3-クラス定義解析"><a href="#3-クラス定義解析" class="headerlink" title="3. クラス定義解析"></a>3. クラス定義解析</h2><p>各モジュールについて、クラス定義を解析していきます。<code>NodeModule</code> が指定するパスを読み込み、<code>visit_ClassDef</code> を実装した <code>ClassDefNodeVisitor</code> で処理します。また、<code>ClassDefNodeVisitor</code> には親ノードへのポインタを追加の情報として持たせています。<code>generic_visit</code> の前後で親ノードを入れ替えることで、クラス内クラスなども表現することができます。</p><figure class="highlight py"><figcaption><span>tree.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_definition_tree</span>(<span class="params">root: NodeModule</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;モジュール内のクラス定義のツリーを作成</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        root (NodeModule): モジュールノード</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        NodeRoot: ツリーのルート</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> root.path <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>, <span class="string">&quot;to pass type check&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(root.path, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8-sig&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            source = f.read()</span><br><span class="line">            tree = ast.parse(source=source)</span><br><span class="line">            ClassDefNodeVisitor(root).visit(tree)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e, file=sys.stderr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassDefNodeVisitor</span>(<span class="params">ast.NodeVisitor</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        self,</span></span></span><br><span class="line"><span class="params"><span class="function">        parent: NodeModule | NodeClass,</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        self.parent = parent</span><br><span class="line"></span><br><span class="line">    <span class="comment"># クラス定義ノード到達時の処理</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">visit_ClassDef</span>(<span class="params">self, node: ast.ClassDef</span>):</span></span><br><span class="line">        c_node = NodeClass(self.parent, node)</span><br><span class="line">        self.parent.children.append(c_node)</span><br><span class="line">        pre_parent = self.parent</span><br><span class="line">        self.parent = c_node</span><br><span class="line">        self.generic_visit(node)</span><br><span class="line">        self.parent = pre_parent</span><br></pre></td></tr></table></figure><h2 id="4-Graphviz-で可視化"><a href="#4-Graphviz-で可視化" class="headerlink" title="4. Graphviz で可視化"></a>4. Graphviz で可視化</h2><p>詳細な実装はここにはあげませんが、実際に作成したツリーをトラバースしながら辺を張っていきます。同じラベルのノードはひとまとめにされてしまうので、異なるノードは異なる ID を持つように注意します。今回の実装では <code>obj_name_full</code> を ID として使うことができます。また、ノードの種類ごとに色を付けるのも良いでしょう。</p><h1 id="解析結果"><a href="#解析結果" class="headerlink" title="解析結果"></a>解析結果</h1><p>標準ライブラリの可視化結果を載せます。全体を載せるには大きすぎる（PDF で約 2 MB）ため、拡大しています。青がパッケージ、オレンジがモジュール、緑がクラスに対応しています。</p><img src="/images/20211019a/graph_2.PNG" alt="graph_2.PNG" width="1200" height="187" loading="lazy"><p>図では <code>http</code> パッケージの下に、<code>server</code> モジュールがあり、その下にいくつかのクラスがあることが確認できます。実際、該当ディレクトリを見に行くと下図のようになっており、可視化できていることがわかります。<br><img src="/images/20211019a/image.png" alt="image.png" width="1200" height="643" loading="lazy"></p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回は AST モジュールを使ってクラス構造を可視化しました。紹介した実装は静的解析の基礎となる部分であり、機能追加によって、メソッドノードの追加や型情報、コールグラフなど、より高度な情報を可視化できます。興味を持った方はぜひ、この記事から静的解析を始めていただければと思います。</p><h1 id="インターンの感想"><a href="#インターンの感想" class="headerlink" title="インターンの感想"></a>インターンの感想</h1><p>今回のインターンでは、プロジェクトの一員として開発に取り組みました。したがって、ミーティングやドキュメントなど、普段の個人開発ではほとんど発生しない、コミュニケーションの部分が特に重要に感じました。コミュニケーションによって文脈を共有することで、後に発生する意思決定や軌道修正などがしやすくなっていた気がします。その点では、毎日のミーティングや Slack での議論など、ご協力いただいた受け入れ先のプロジェクトの方々に感謝しています。</p><p>また、今回は静的解析ツールの開発に取り組みましたが、それでも linter や formatter など既存の静的解析ツールはかなり有用でした。デバッグにはもちろん、型ヒントやフォーマットを通してツール側からも文脈の共有が行えるため、コミュニケーションと併せてその重要性を感じました。今回のインターンは約一か月でしたが、より長期間で大規模なプロジェクトであれば、静的解析ツールはもはや必須といっても過言ではないと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/">インターン</category>
      
      <category domain="https://future-architect.github.io/tags/Python/">Python</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B3%E3%82%A2%E3%83%86%E3%82%AF/">コアテク</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%A7%8B%E6%96%87%E8%A7%A3%E6%9E%90/">構文解析</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B32021/">インターン2021</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%9D%99%E7%9A%84%E8%A7%A3%E6%9E%90/">静的解析</category>
      
      
      <comments>https://future-architect.github.io/articles/20211019a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Engineer Camp2021（スマートファクトリー）での学び</title>
      <link>https://future-architect.github.io/articles/20211018a/</link>
      <guid>https://future-architect.github.io/articles/20211018a/</guid>
      <pubDate>Sun, 17 Oct 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。フューチャーの夏季インターンシップEngineer Camp</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。フューチャーの夏季インターンシップEngineer Camp 2021に参加した森下です。<br>このインターンシップを通じて得た経験や学んだことをお話ししていきます。</p><img src="/images/20211018a/5374a3ec-6860-bbad-4295-474880d81f10.png" alt="" title="illustACからカフェラテさんのイラスト" width="1200" height="900" loading="lazy"><h1 id="インターンシップの内容"><a href="#インターンシップの内容" class="headerlink" title="インターンシップの内容"></a>インターンシップの内容</h1><p>フューチャーでは毎年夏に「Engineer Camp」「Project Camp」という2つのインターンシップが開催されています。私が参加したEngineer Campでは実際のプロジェクトの中で業務に携わり、フューチャーの技術やコンサルタントのあり方を学ぶことができます。</p><p>詳しい内容は「採用イベント情報」のnoteにも掲載されてますのでご覧ください。</p><ul><li><a href="https://note.com/future_event/n/n76e7e7d4beef#vDFIY">【対象：新卒】サマーインターン＜Engineer Camp＞｜採用イベント情報 | フューチャー株式会社｜note</a></li></ul><p>今年はフルリモートでの開催となり、11人のメンバーで4週間業務を体験しました。<br>私は参加したコースは「業界最大級のスマートファクトリー機能開発」です。</p><blockquote><p>②業界最大級のスマートファクトリー機能開発<br>スマートファクトリーを推進せよ。従来のアナログ工場制御系のイメージを打ち壊し、時代を先行く工場のさらなる進化を目指す</p></blockquote><blockquote><p>＜概要＞<br>我々の暮らしを支える製造現場には未だ多く課題があり、スマートファクトリー化することで操業を助けることは重要です。今回は、実際に構築し動いている工場システムの機能拡張および横展開として、以下のいずれか、または複数にチャレンジする予定です。</p></blockquote><blockquote><p>１）Go言語でのAPI設計・開発・テスト<br>２）Terraformを用いたAWS構築・エンハンス<br>３）TypeScriptを利用したフロントエンド開発</p></blockquote><h1 id="技術経験と参加目的"><a href="#技術経験と参加目的" class="headerlink" title="技術経験と参加目的"></a>技術経験と参加目的</h1><p>私は昨年Engineer Campに参加した先輩の勧めでこのインターンシップを知りました。</p><p>フューチャーはコンサルティングからシステム開発までを一気通貫して行う珍しい業務体系をした企業ですので、IT業界を中心に就職活動をしている私にとって業務をイメージできる良い経験になると考え参加を決意しました。</p><p>参加前の技術経験は以下の通りです。</p><ul><li>言語<ul><li>C言語：高専・大学での講義や研究に使用</li><li>Python：大学の研究に使用</li><li>Go言語：インターンに向けて一通りを勉強</li></ul></li><li>GiuHub：触れたことがある程度</li><li>技術系アルバイトやインターンの経験なし</li><li>チーム開発経験なし</li><li>資格：応用情報技術者試験</li></ul><p>このインターンに参加した大きな目的は実際の業務のイメージを持つことです。</p><p>私はこれまで技術系のアルバイトやチーム開発の経験が無かったため、就職活動を進める前にGitHubを使った作業の進め方や会議を中心としたコミュニケーションの取り方など体験したいと考えました。</p><h1 id="インターンで取り組んだこと"><a href="#インターンで取り組んだこと" class="headerlink" title="インターンで取り組んだこと"></a>インターンで取り組んだこと</h1><p>私が配属されたプロジェクトではアナログ制御された工場のDXを手掛けており、私は制御系の監視およびその通知を行うバックエンド寄りのシステム開発をさせていただきました。開発に際しては以下を使用しました。</p><ul><li>Go言語</li><li>AWS<ul><li>Lambda</li><li>DynamoDB</li></ul></li><li>Docker</li><li>GitHub</li></ul><p>インターン期間の序盤は配布されたPCのセットアップやプロジェクトのキャッチアップを中心に行いました。セットアップ際のプロキシ設定では、その方法が既にフューチャーの技術ブログに記事が掲載されており、導入がスムーズに行われました。他にも開発の様々な場面で技術ブログが活用されており、技術発信に力を入れているフューチャーの社風を感じられました。</p><p>キャッチアップでは稼働中のシステムのコードをたくさん読みましたが、どれも命名規則やドキュメントなどがしっかりしており、とても読みやすかったのが印象的でした。今後チーム開発を行ううえでも整ったコードを書く力は重宝されるため、大学在学のうちから綺麗なコードが書けるよう努力したいと感じました。</p><p>その後はドキュメント処理のタスクを行い実際の作業に移りました。</p><p>作業の中ではLambdaとDynamoDBを使用しましたが、私はインターン参加前までAWSに全く触れてこなかったため、共有されたコードや記事を読み社員の方からサポートを受けながら作業を進めました。一か月のインターン生の私にも個別のAWSのアカウントを割り振ってくださり、操作を通じて理解を深めることができました。</p><h1 id="学んだこと"><a href="#学んだこと" class="headerlink" title="学んだこと"></a>学んだこと</h1><p>今回のEngineer Campは「技術面」「コミュニケーション面」「企業面」で学びに溢れた4週間でした。</p><h3 id="技術面"><a href="#技術面" class="headerlink" title="技術面"></a>技術面</h3><p>このインターンでは実際のプロジェクトに携わることで業務に使用される様々な技術に触れることができます。AWSのサービスは「いつか使ってみたい！」と思いつつもハードルが高く手を出せずにいましたが、インターンの中で目的をもって活用することで意欲的に取り組むことができました。AWSやDockerに関して全くの初心者だったため業務で稼働しているコードや記事などから扱い方を学ぶのは大変でしたが、フューチャーにはAWSのエキスパートがたくさんいるためSlackを通じて多くの方がサポートしてくださり理解を深めることができました。</p><p>業務の中でコードのレビューをしていただいたことが大きな学びに繋がりました。これまで研究活動の中でコードを書く際には「自分が見返したときに分かる」ような命名や関数の分け方をしており、他の人にコードを共有する際には変数や関数の意味を説明しながら共有していました。ですがチーム開発ではコードを見ただけで伝わる書き方や厳格な命名規則が求められることを教わりました。実際に稼働しているシステムを見ても明示的な関数名やテストを意識した関数粒度などがなされており、今後身に付けるべき力だと感じました。</p><h3 id="コミュニケーション面"><a href="#コミュニケーション面" class="headerlink" title="コミュニケーション面"></a>コミュニケーション面</h3><p>今回のインターンはフルリモートで開催されたためコミュニケーションの手段がSlackとビデオ通話に限られます。そのため作業の進捗や詰まっている所を自ら発信しなくては仕事をしているのかすら伝わりません。初めは何を報告すべきなのか分かりませんでしたが「Twitter感覚で呟いて」と言われ、些細なことでも小まめに状況をSlackで報告をすると、問題なく進められた部分であっても追加のアドバイスがいただけたり、いざ困ったときに素直に質問ができるようになりました。対面で作業ができないコロナ渦ならではの問題ですが、小まめな報告の必要性を学ぶきっかけになりました。</p><p>「的確に伝える力」を鍛える必要があると教わりました。リモートワークに限らず自分が「何がわからないのか」「何をしたらどうなって困っているのか」を言葉で的確に伝える能力は必要です。実際の業務を行っていると質問の体系も複雑になり、質問したい個所を絞り込めずに何度も社員の方に意図を「推測」させてしまいました。この伝える筋力を着けることも今後の課題です。</p><h3 id="企業面"><a href="#企業面" class="headerlink" title="企業面"></a>企業面</h3><p>今年のEngineer Campはリモートでの開催でしたが、日々のSlack、ミーティング、懇親会で社員の方と触れ合う中で、フューチャーのアットホームな社風を強く感じました。またSlackで質問を投げかけた際には多くの方がサポートをしてくださったり、技術ブログでの発信力も含めてフューチャーの技術を共有する意識の高さを感じました。</p><p>Engineer Campでは週に一度、様々な社員の方が講義をしてくださいます。そこでは「経営面や業界から見たフューチャー」や「Vulsの開発に至るまで」の話など就活イベントなどではなかなか聞けない話をたくさん聞くことができ、フューチャーへの企業理解を深めることができました。</p><h1 id="結び"><a href="#結び" class="headerlink" title="結び"></a>結び</h1><p>リモートでの開催でコミュニケーションの手段に限りはありましたが、インターンの中で交流会や講義などのイベントもたくさん詰め込まれており、存分にフューチャーを体感した４週間だったと思います。また同年代のメンバーと技術面での交流ができたことが刺激になりました。</p><p>この記事を見て参加を検討されている学生がいましたら是非お勧めしたいインターンシップです！</p><p>最後になりますが受け入れ担当チームの皆様をはじめ、インターン期間中にサポートいただいたフューチャー社員の皆様、ありがとうございました！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/">インターン</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%B7%A5%E5%A0%B4/">工場</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B32021/">インターン2021</category>
      
      
      <comments>https://future-architect.github.io/articles/20211018a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS利用料金をSlackに円グラフ付きで投稿する</title>
      <link>https://future-architect.github.io/articles/20211015a/</link>
      <guid>https://future-architect.github.io/articles/20211015a/</guid>
      <pubDate>Thu, 14 Oct 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、フューチャーにアルバイトとして参加中の中山です。</p><p>今日はアルバイトで参加しているプロジェクト内でAWSの利用料金をSlackに通知する仕組みを作成したので共有したいと思います。</p><p>私が参加しているプロジェクトでは、毎月AWSにいくらかかっているのか、加えてそれぞれのサービスは全体のコストの内どのぐらいの割合を占めているのか知りたいという話があり、今回AWSから利用額を取得しSlackに通知する仕組みを作る流れとなりました。</p><p>今回の記事では、実際に採用したAPIやサービスに加え、採用を検討したが実際には利用しなかったサービスなども交え、似たような仕組みを作ってみたいと思っている方に少しでも情報提供できればと考えています。</p><p>参考：<a href="https://github.com/furiko/aws-cost-notify-to-slack">今回のソースコード</a></p><h1 id="システム概要"><a href="#システム概要" class="headerlink" title="システム概要"></a>システム概要</h1><p>それでは実際にどのような仕組みで動いているか説明します。</p><p>図のように、</p><ol><li>CloudWatchにより定時起動でLambdaを呼び出す</li><li>GetCostAndUsageAPIを用いて先月分の利用料金を取得し、<a href="https://github.com/wcharczuk/go-chart">go-chart</a>を用いて円グラフ化</li><li>SlackにWebhookとfiles.uploadを用いて通知</li></ol><p>という仕組みになっています。Cloudwatchでは毎月1日にLambdaが起動するように設定しています。所属しているプロジェクトではGo言語を採用しているため、go-chartを採用してグラフを作成しています。</p><p>Webhookは、各サービスの利用料金を箇条書きで通知するために利用しており、files.uploadは円グラフをアップロードするために利用しています。</p><img src="/images/20211015a/cost-explorer.drawio.png" alt="cost-explorer.drawio.png" width="570" height="352" loading="lazy"><h2 id="投稿例"><a href="#投稿例" class="headerlink" title="投稿例"></a>投稿例</h2><p>Slackに実際に投稿されるものは、各サービスの利用料金を箇条書きにしたものとデータを元に作成された円グラフの2点です。以下に例を示します。<br>箇条書きの方は都合上、Othersという項目を追加していますが、実際にはAPIから返ってきた値を全てそのまま載せています。</p><h3 id="AWS利用料金箇条書き"><a href="#AWS利用料金箇条書き" class="headerlink" title="AWS利用料金箇条書き"></a>AWS利用料金箇条書き</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Monthly Report</span><br><span class="line">AWS Account: 111111111111</span><br><span class="line">Start: 2021-08-01, End: 2021-08-31</span><br><span class="line">Total Cost: $1000</span><br><span class="line">Amazon DynamoDB: 500.00(50)%</span><br><span class="line">AWS Lambda: 200.00(20)%</span><br><span class="line">Amazon Kinesis: 150.00(15)%</span><br><span class="line">Others: 100.00(10)%</span><br><span class="line">Tax: 50.00(5)%</span><br></pre></td></tr></table></figure><h3 id="利用料金円グラフ"><a href="#利用料金円グラフ" class="headerlink" title="利用料金円グラフ"></a>利用料金円グラフ</h3><img src="/images/20211015a/output.png" alt="output.png" width="512" height="512" loading="lazy"><h2 id="GetCostAndUsage-API"><a href="#GetCostAndUsage-API" class="headerlink" title="GetCostAndUsage API"></a>GetCostAndUsage API</h2><p><a href="https://aws.amazon.com/jp/aws-cost-management/aws-cost-explorer/">AWS Cost Explorer</a>が提供するAPIで、指定した期間のアカウントに紐づくAWSの利用料金を取得することができます。パラメータの指定方法など詳細は、<a href="https://docs.aws.amazon.com/ja_jp/aws-cost-management/latest/APIReference/API_GetCostAndUsage.html">ドキュメント</a>を参照ください。</p><p>ここでは、1ヶ月分のAWS各サービスの利用料金を取得する場合のGo言語の場合のサンプルを載せておきます。<br>注意点として、このAPIは<code>us-east-1</code>でのみ提供されるのでLambdaを<code>ap-northeast-1</code>などにデプロイしている場合でもAPIを呼び出す際には必ず<code>us-east-1</code>を指定する必要があります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">granularity := <span class="string">&quot;MONTHLY&quot;</span></span><br><span class="line">metrics := []<span class="keyword">string</span>&#123;<span class="string">&quot;BlendedCost&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">svc := costexplorer.New(session.Must(session.NewSession(&amp;aws.Config&#123;</span><br><span class="line">    Region: aws.String(<span class="string">&quot;us-east-1&quot;</span>), <span class="comment">// GetCostAndUsageAPIはus-east-1のみで提供</span></span><br><span class="line">&#125;)))</span><br><span class="line"></span><br><span class="line">result, err := svc.GetCostAndUsage(&amp;costexplorer.GetCostAndUsageInput&#123;</span><br><span class="line">    TimePeriod: &amp;costexplorer.DateInterval&#123; <span class="comment">// 取得したい期間を指定</span></span><br><span class="line">        Start: aws.String(start),</span><br><span class="line">        End:   aws.String(end),</span><br><span class="line">    &#125;,</span><br><span class="line">    Granularity: aws.String(granularity),</span><br><span class="line">    GroupBy: []*costexplorer.GroupDefinition&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            Type: aws.String(<span class="string">&quot;DIMENSION&quot;</span>),</span><br><span class="line">            Key:  aws.String(<span class="string">&quot;SERVICE&quot;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    Metrics: aws.StringSlice(metrics),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>GoSDKの<a href="https://docs.aws.amazon.com/sdk-for-go/api/service/costexplorer/">ドキュメント</a>も必要な場合は参照ください。</p><h2 id="円グラフ作成"><a href="#円グラフ作成" class="headerlink" title="円グラフ作成"></a>円グラフ作成</h2><p>GetCostAndUsageAPIで取得できたAWS各サービスごとの利用料金を用いて円グラフを作成します。今回はGo言語で実装したいという条件があったので、<a href="https://github.com/wcharczuk/go-chart">go-chart</a>を用いて作成しました。基本的には<a href="https://github.com/wcharczuk/go-chart/blob/master/examples/pie_chart/main.go">サンプル</a>のコード参考にし、全体に占める割合が少ないサービスはOthersとしてまとめました。また、今回はLambda上で画像を生成し、Slackに送信している関係上、一度pngファイルに書き出すなどせず、バッファに画像データを書き込んで送信する形をとりました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> values []chart.Value</span><br><span class="line">others := chart.Value&#123;</span><br><span class="line">    Label: <span class="string">&quot;Others&quot;</span>,</span><br><span class="line">    Value: <span class="number">0.0</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// グラフデータの作成</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> results &#123;</span><br><span class="line">    <span class="comment">// 全体に占める割合が1.0%未満のサービスはOthersにまとめる</span></span><br><span class="line">    <span class="keyword">if</span> v.Ratio &lt; <span class="number">1.0</span> &#123;</span><br><span class="line">        others.Value += v.Cost</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line">    values = <span class="built_in">append</span>(values, chart.Value&#123;</span><br><span class="line">        Value: v.Cost,</span><br><span class="line">        Label: v.Name,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">values = <span class="built_in">append</span>(values, others)</span><br><span class="line"></span><br><span class="line"><span class="comment">// グラフの作成</span></span><br><span class="line">pie := chart.PieChart&#123;</span><br><span class="line">    Width:  <span class="number">512</span>,</span><br><span class="line">    Height: <span class="number">512</span>,</span><br><span class="line">    Values: values,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// バッファに画像データを書き込む</span></span><br><span class="line">buffer := bytes.NewBuffer([]<span class="keyword">byte</span>&#123;&#125;)</span><br><span class="line">err := pie.Render(chart.PNG, buffer)</span><br></pre></td></tr></table></figure><h3 id="GetMetricsWidgetImage-API"><a href="#GetMetricsWidgetImage-API" class="headerlink" title="GetMetricsWidgetImage API"></a>GetMetricsWidgetImage API</h3><p>はじめ、円グラフを作成しようと探していた際に<a href="https://docs.aws.amazon.com/ja_jp/AmazonCloudWatch/latest/APIReference/API_GetMetricWidgetImage.html">GetMetricsWidgetImage</a>というAPIを知りました。このAPIを利用して前日との利用料の差額を出している記事なども見つけましたが、このAPIは利用料金の円グラフ化はできるのですが、<strong>対象となるデータはCloudWatchで監視できるリソースのみ</strong>であり、GetCostAndUsageAPIで取得できる全てのデータを対象とすることはできなかったため採用を見送りました。</p><p>私自身、初めはグラフ作成に必要なデータを送れば円グラフを作成して返してくれるAPIだと思っていたのですが、上述の通り、Cloudwatchの監視メトリクスをグラフ化するためのAPIであり、汎用的にグラフ作成に用いるAPIではありませんでした。</p><h2 id="Slack連携"><a href="#Slack連携" class="headerlink" title="Slack連携"></a>Slack連携</h2><p>次に、上記で取得した各サービスの利用料金と円グラフをSlackに連携する方法について紹介します。<br>開発当初Webhookを用いてテキストのみをSlack連携していたところに円グラフを後から追加したため、今回のサービスではWebhookとfiles.uploadの両方を用いていますが、Bot Tokenに適切なScopeの設定をすることで自作のSlackApp1つで、テキストの投稿・円グラフのアップロードの両方を実現可能かと思います。</p><h3 id="Webhook"><a href="#Webhook" class="headerlink" title="Webhook"></a>Webhook</h3><p>Slackに対して通知する代表的な手段として<a href="https://slack.com/intl/ja-jp/help/articles/115005265063-Slack-%E3%81%A7%E3%81%AE-Incoming-Webhook-%E3%81%AE%E5%88%A9%E7%94%A8">Incoming Webhook</a>があります。今回のシステムではこちらを利用して、各サービスごとの使用量を箇条書きで通知しています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">endpoint := SLACKENDPOINT</span><br><span class="line"></span><br><span class="line">body := <span class="keyword">struct</span> &#123;</span><br><span class="line">    Text <span class="keyword">string</span> <span class="string">`json:&quot;text&quot;`</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">    Text: fmt.Sprintf(<span class="string">&quot;*Monthly Report*\n %v&quot;</span>, cost),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonString, err := json.Marshal(body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req, err := http.NewRequest(http.MethodPost, endpoint, bytes.NewBuffer(jsonString))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">req.Header.Set(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>)</span><br><span class="line"></span><br><span class="line">_, err = http.DefaultClient.Do(req)</span><br></pre></td></tr></table></figure><h3 id="files-upload"><a href="#files-upload" class="headerlink" title="files.upload"></a>files.upload</h3><p>Webhookではファイル自体のアップロードはできないため、files.uploadを用いてLambda内で生成した円グラフの画像をSlackにアップロードしています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">api := slack.New(SLACKAPITOKEN)</span><br><span class="line"></span><br><span class="line">_, err := api.UploadFile(</span><br><span class="line">    slack.FileUploadParameters&#123;</span><br><span class="line">        Reader:   b,</span><br><span class="line">        Filename: <span class="string">&quot;output.png&quot;</span>,</span><br><span class="line">        Channels: []<span class="keyword">string</span>&#123;SLACKCHANNEL&#125;,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>AWSのAPIを用いて月々の使用量を取得し、Slackに通知する仕組みの紹介をしてきました。</p><p>円グラフを作成して各サービスの割合を出し、各サービスのコスト比重を見返すことは今後のAWS利用の効率化などの考察の一助となると思いますので、興味がある方はぜひこの機会にSlackでAWS利用料金をチェックする仕組みを組んでみてください。</p><p>最後に今回のサービスで利用しているコードの全文を載せておきます。最後まで読んでいただきありがとうございました。</p><h2 id="コード全文"><a href="#コード全文" class="headerlink" title="コード全文"></a>コード全文</h2><p>全文：<a href="https://github.com/furiko/aws-cost-notify-to-slack">今回のソースコード</a></p><p><strong>環境変数</strong> について<br>４つ利用しています。実行前に事前に準備をお願いします。</p><ul><li>SLACK_ENDPOINT: Webhookの投稿先URLです</li><li>SLACK_API_TOKEN: files.uploadで用いるToken文字列です</li><li>SLACK_CHANNEL: Slackの投稿先チャンネルです</li><li>AWS_ACCOUNT: Slackに投稿される箇条書き文字列の冒頭にある<code>AWS Account:</code>に付与する値です</li></ul><p>Lambdaで実行する場合は各自事前にLambdaの準備とコードのデプロイをお願いします。</p><p>Lambdaではなくローカル環境で実行する場合は、main関数内の<code>lambda.Start(Handle)</code>を<code>Handle(context.Background())</code>に書き換えて実行してください。また、<code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>は各自設定をお願いします。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%8F%AF%E8%A6%96%E5%8C%96/">可視化</category>
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Slack/">Slack</category>
      
      
      <comments>https://future-architect.github.io/articles/20211015a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
