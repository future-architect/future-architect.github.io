<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Wed, 22 Jun 2022 02:39:33 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Open API Specification 2.0から3.1と検討中らしい仕様</title>
      <link>https://future-architect.github.io/articles/20220622b/</link>
      <guid>https://future-architect.github.io/articles/20220622b/</guid>
      <pubDate>Tue, 21 Jun 2022 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG DXユニット真野です。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット真野です。<a href="/20220621a/">サービス間通信とIDL（インタフェース記述言語）</a>連載の1本目です。</p><p>Open APIは<a href="/articles/20200630/">go-swaggerを用いたWebアプリケーション開発Tips19選</a>という記事を過去に書いたこともあり、バージョン2（Swagger）をよく使っていましたしまだ継続してそれらを用いた開発もしています。2022.6.21時点では3.1.0が最新です。これまでリリースノートすらウォッチしていなかったので気になったことを調べてまとめました。</p><h2 id="Open-API-Specificationとは"><a href="#Open-API-Specificationとは" class="headerlink" title="Open API Specificationとは"></a>Open API Specificationとは</h2><p><a href="https://github.com/OAI/OpenAPI-Specification">Open API Specification</a>（公式でもOASと略されます）は、HTTP APIのIDL（インターフェース記述言語）です。HTTP APIということで、いわゆるRESTishなAPIも含みます。エンドポイント（URLのパス）、パラメーター（リクエスト、レスポンスのヘッダ・ボディ）、認証フローなどを標準的に定義でき、そこからコードやAPIドキュメントを生成できて便利です。</p><p>今のコミュニティの方向性としてはJSONスキーマの最新Draftバージョンと互換性を保つように設計されています。</p><p><a href="https://www.openapis.org/">OpenAPIInitiative</a>という組織によって仕様策定が進められ、そこにはGoogle, Microsoft, Oracle, SAP, IBMなどそうそうたる顔ぶれが並んでいます。</p><p>なお、定義はYAMLやJSONで行います。</p><h2 id="v2-と-v3-の違いについて"><a href="#v2-と-v3-の違いについて" class="headerlink" title="v2 と v3 の違いについて"></a>v2 と v3 の違いについて</h2><p>我々がよく見るOpen API Specificationのメジャーバージョンは2つあり、v2とv3 があります。2022年時点ですとOpen API Specificationに関連した利用したいツールの対応次第かと思いますが、version 3.0は2017.7.26リリースで5年ほど経過するのでv3を採用するチームが多いのではないでしょうか（3.1との差は次章以降で触れます）。</p><p>Version2と3はメジャーバージョンが変わったということで、記述の構成が変わっています。</p><img src="/images/20220622b/v2とv3の違い.png" alt="v2とv3の違い" width="1131" height="792" loading="lazy"><p>※ 図は <a href="https://blog.stoplight.io/difference-between-open-v2-v3-v31">https://blog.stoplight.io/difference-between-open-v2-v3-v31</a> より</p><p>上図を見ると、v2からSecurityDefinicions、definitions、parameters、responses などがなくなりスッキリしていると思います。これはcomponentsに移動になったからで、これにより再利用性が高まるように設計されました。書いている内容自体はほぼ変わらないので、v2がわかればv3のお作法にもすぐ慣れると思います。</p><p>v2ですが以前はSwaggerと呼ばれていました。これがOpen API Specificationのフォーマットとして採用されたため、Swagger ≒ Open API Specification v2 との認識が広がっていると思われます。</p><p>ちなみにv1はどこ行った？って思ったんですが、<a href="https://swagger.io/specification/v2/">Swaggerのリビジョン履歴</a>を見ると、Swagger自体が 1.0から2.0 まで上がっているため、Open API Specificationも2.0からスタートしたと思われます。</p><div class="scroll"><table><thead><tr><th>Version</th><th>Date</th><th>Notes</th></tr></thead><tbody><tr><td>2.0</td><td>2014-09-08</td><td>Release of Swagger 2.0</td></tr><tr><td>1.2</td><td>2014-03-14</td><td>Initial release of the formal document.</td></tr><tr><td>1.1</td><td>2012-08-22</td><td>Release of Swagger 1.1</td></tr><tr><td>1.0</td><td>2011-08-10</td><td>First release of the Swagger Specification</td></tr></tbody></table></div><p>Swaggerから Open API Specificationへの切り替えですが、 2015年にSwagger　APIプロジェクトを推進していたSmartBear社が、Linux Foundationに寄贈し、Open API Initiative立ち上げとなったそうです。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><h2 id="v3-0、v3-1"><a href="#v3-0、v3-1" class="headerlink" title="v3.0、v3.1"></a>v3.0、v3.1</h2><p>2017年に3.0.0が出て、2021年2月に待望（？）の3.1.0が出ました。リリースノートは<a href="https://github.com/OAI/OpenAPI-Specification/releases">こちら</a>。</p><div class="scroll"><table><thead><tr><th>Version</th><th>Date</th><th>Notes</th></tr></thead><tbody><tr><td>3.1.0</td><td>2021-02-15</td><td>Release of the OpenAPI Specification 3.1.0</td></tr><tr><td>3.0.3</td><td>2020-02-20</td><td>Patch release of the OpenAPI Specification 3.0.3</td></tr><tr><td>3.0.2</td><td>2018-10-08</td><td>Patch release of the OpenAPI Specification 3.0.2</td></tr><tr><td>3.0.1</td><td>2017-12-06</td><td>Patch release of the OpenAPI Specification 3.0.1</td></tr><tr><td>3.0.0</td><td>2017-07-26</td><td>Release of the OpenAPI Specification 3.0.0</td></tr></tbody></table></div><p>3.0から3.1はマイナーリリースなので機能追加くらいかなと思っていましたが、けっこう大きな変更があり、4.0にしてはどうかといった議論もあったそうです。最終的にはセマンティックバージョニングの運用をやめることになったそうです<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p><p>3.1はJSONスキーマ Draft 2019-09と互換性を持たせていて、JSONスキーマのキーワードを認識するようになったとのこと。私はJSONスキーマ自体をあまり触ったことがないのですが、バージョン毎の対応具合は次のようです。</p><ul><li>OpenAPIv2.0: JSONスキーマの拡張サブセット。JSONスキーマDraft 4との互換性が約80％になる分岐があった</li><li>OpenAPIv3.0: JSONスキーマDraft 5との互換性が90％</li><li>OpenAPIv3.1: JSONスキーマDraft 2019-09と互換性が100%</li></ul><p>参考: <a href="https://blog.stoplight.io/openapi-json-schema">https://blog.stoplight.io/openapi-json-schema</a></p><p>ちなみに、<a href="https://github.com/OAI/OpenAPI-Specification/releases/tag/3.1.0-rc1">3.1.0-rc1</a> のリリースノートを見ると、Breaking changesに3点記載されてました。</p><ul><li>Server Variable’s <code>enum</code> now MUST not be empty (changed from SHOULD).</li><li>Server Variable’s <code>default</code> now MUST exist in the <code>enum</code> values, if such values are defined (changed from SHOULD).</li><li><code>responses</code> are no longer required to be defined under the Operation Object.</li></ul><p>他にも、<code>example</code> が非推奨になり代わりに <code>examples</code> を利用しようよとか、 <code>type: [string, integer]</code> みたいに複数の型を指定できるようになったとか、<code>nullable: true</code> が <code>type: [string, &quot;null&quot;]</code> と書くといった拡張・変更があります。</p><h2 id="次期バージョンと気になったチケット"><a href="#次期バージョンと気になったチケット" class="headerlink" title="次期バージョンと気になったチケット"></a>次期バージョンと気になったチケット</h2><p>リポジトリを見ると<a href="https://github.com/OAI/OpenAPI-Specification/tree/v3.1.1-dev">v3.1.1</a>と<a href="https://github.com/OAI/OpenAPI-Specification/tree/v3.2.0-dev">v3.2.0</a> が推進のように見えます。<a href="https://github.com/OAI/OpenAPI-Specification/milestone/12">v3.2.0はマイルストーン</a>が切られていて、3つのIssueが紐づいていました。また <a href="https://github.com/OAI/OpenAPI-Specification/labels/Post%203.0%20Proposal">Post 3.0のラベル</a> もあります。</p><p>関連Issueを読んでいて面白かった部分を紹介します</p><h3 id="①Investigate-possibility-of-removing-the-constraint-that-paths-must-start-with-“-x2F-“-2327"><a href="#①Investigate-possibility-of-removing-the-constraint-that-paths-must-start-with-“-x2F-“-2327" class="headerlink" title="①Investigate possibility of removing the constraint that paths must start with “&#x2F;“ #2327"></a>①<a href="https://github.com/OAI/OpenAPI-Specification/issues/2327">Investigate possibility of removing the constraint that paths must start with “&#x2F;“ #2327</a></h3><ul><li>パスが<code>/</code> 始まりである必要があるかですが、 <a href="https://github.com/OAI/OpenAPI-Specification/issues/2316">#2316</a> を見ると、OPTIONSメソッドの場合は、<code>*</code> の指定も許容するようです。<a href="https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.7">RFC7231 4.7.3</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS#identifying_allowed_request_methods">https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/OPTIONS#identifying_allowed_request_methods</a> にもSyntaxでかかれれていました。<ul><li>サーバー全体に対して指定するときに用いるようです</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax</span><br><span class="line">OPTIONS /index.html HTTP/1.1</span><br><span class="line">OPTIONS * HTTP/1.1</span><br></pre></td></tr></table></figure><p>OPTIONS、CORSのプリフライトリクエストの時に利用されるイメージしかなかったので、ターゲットに <code>*</code> できるの知らなかったです。</p><h3 id="②Deprecate-discriminator-2143"><a href="#②Deprecate-discriminator-2143" class="headerlink" title="②Deprecate discriminator? #2143"></a>②<a href="https://github.com/OAI/OpenAPI-Specification/issues/2143">Deprecate discriminator? #2143</a></h3><p>discriminatorの廃止議論です。まずdiscriminatorがなにかという話ですが、3.0で追加された Open API Specification独自の機能で、スキーマを切り替えることができます。次が<a href="https://swagger.io/docs/specification/data-models/inheritance-and-polymorphism/">OpenAPI 3.0ガイドに記載されたInheritance and Polymorphism</a> に記載された例です。レスポンスは <code>oneOf</code>によって<code>Object1</code>, <code>Object2</code>, <code>sysObject</code>の3種類が取りうるとしています。このとき、どのスキーマを選択するか <code>discriminator.propertyName</code> に記載された <code>objectType</code> によって決定することができるます。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">components:</span></span><br><span class="line">  <span class="attr">responses:</span></span><br><span class="line">    <span class="attr">sampleObjectResponse:</span></span><br><span class="line">      <span class="attr">content:</span></span><br><span class="line">        <span class="attr">application/json:</span></span><br><span class="line">          <span class="attr">schema:</span></span><br><span class="line">            <span class="attr">oneOf:</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Object1&#x27;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">$ref:</span> <span class="string">&#x27;#/components/schemas/Object2&#x27;</span></span><br><span class="line">              <span class="bullet">-</span> <span class="string">$ref:</span> <span class="string">&#x27;sysObject.json#/sysObject&#x27;</span></span><br><span class="line">            <span class="attr">discriminator:</span></span><br><span class="line">              <span class="attr">propertyName:</span> <span class="string">objectType</span></span><br><span class="line">              <span class="attr">mapping:</span></span><br><span class="line">                <span class="attr">obj1:</span> <span class="string">&#x27;#/components/schemas/Object1&#x27;</span></span><br><span class="line">                <span class="attr">obj2:</span> <span class="string">&#x27;#/components/schemas/Object2&#x27;</span></span><br><span class="line">                <span class="attr">system:</span> <span class="string">&#x27;sysObject.json#/sysObject&#x27;</span></span><br><span class="line">  <span class="comment">#…</span></span><br><span class="line">  <span class="attr">schemas:</span></span><br><span class="line">    <span class="attr">Object1:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">      <span class="attr">required:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">objectType</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">objectType:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="comment">#…</span></span><br><span class="line">    <span class="attr">Object2:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">      <span class="attr">required:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">objectType</span></span><br><span class="line">      <span class="attr">properties:</span></span><br><span class="line">        <span class="attr">objectType:</span></span><br><span class="line">          <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">      <span class="comment">#…</span></span><br></pre></td></tr></table></figure><p>例えば、無料ユーザーとプレミアムユーザーでレスポンス項目が微妙に変わる時に、明示的にできるといったメリットがありそうです。</p><p>こんなことできるんだ、凄い、良いよねって思いましたが、非推奨（Deprecate）の方向になっています。JSONスキーマとの互換性が理由のようです。互換性がないことでLinterなどの検証に難もあるようです。</p><h3 id="③Support-for-path-parameters-which-can-contain-slashes-892"><a href="#③Support-for-path-parameters-which-can-contain-slashes-892" class="headerlink" title="③Support for path parameters which can contain slashes #892"></a>③<a href="https://github.com/OAI/OpenAPI-Specification/issues/892">Support for path parameters which can contain slashes #892</a></h3><p>パスパラメータにスラッシュ <code>/</code> を許容してほしいという要望です。背景としては</p><ul><li><code>/resources/123</code></li><li><code>/resources/123/action</code></li><li><code>/resources/123/subresources/456</code></li></ul><p>のように、複数のサブリソースが紐づいている場合に、<code>/resources/&#123;resourceRef+&#125;</code> で一括してエンドポイントを定義したいと要望があるようです。Django、Flask、gin、echo、express.jsなど複数のプロダクトが <code>*</code> をサポートしているので追随してはどうかという意見もあります。</p><p>反対意見としては、他のどのIssueでも共通ですがエコシステムのツールチェーンが対応できるかが1つ要因としてあるそうです。例えばいかが区別できないため何かしらの優先度ベースのわかりやすいアルゴリズムが存在しない限りは難しいという立場です。（これに対しても多くの意見が寄せられています）</p><ul><li><code>/&#123;resourceRef+&#125;</code></li><li><code>/resources/&#123;resourceRef+&#125;</code></li><li><code>/resources/&#123;resourceRef+&#125;/foo</code></li><li><code>/resources/&#123;resourceRef+&#125;/foo/bar</code></li><li><code>/foo&#123;resourceRef+&#125;</code></li><li><code>/foo&#123;resourceRef+&#125;/bar</code></li><li><code>/foo/bar/baz</code></li></ul><p>現状では、<code>/resources?path=foo/bar/baz</code> などとするか、個別定義していくかになるので少し大変なので要求が強いのはわかります。なるべく静的に定義したいという気持ちもわかります。仕様策定、、大変ですね。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Open API Specificationの概略と、3.1とそれ以降の議論について簡単に紹介しました。JSONスキーマとの互換性、エコシステムのツールチェーンなどバランスを取って仕様策定する苦悩も伺いしれました。今あるHTTP APIを記述するという用途であれば、すでにさほど困らないかと思いますが、Issueなどを引き続き見ていきたいと思います。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://japan.zdnet.com/article/35073148/">https://japan.zdnet.com/article/35073148/</a> より</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://blog.stoplight.io/difference-between-open-v2-v3-v31">https://blog.stoplight.io/difference-between-open-v2-v3-v31</a> より</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/OpenAPI/">OpenAPI</category>
      
      <category domain="https://future-architect.github.io/tags/IDL/">IDL</category>
      
      
      <comments>https://future-architect.github.io/articles/20220622b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>サービス間通信とIDL（インタフェース記述言語）連載を始めます</title>
      <link>https://future-architect.github.io/articles/20220622a/</link>
      <guid>https://future-architect.github.io/articles/20220622a/</guid>
      <pubDate>Tue, 21 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220622a/documents-28157_640.png&quot; alt=&quot;&quot; width=&quot;585&quot; height=&quot;640&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220622a/documents-28157_640.png" alt="" width="585" height="640"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>IDLやエコシステム、サービス間の通信（何かしらのRPC関連の技術）をテーマにした連載を始めます。</p><p>IDL（インターフェース記述言語: Interface Definition Language）と聞けばWSDL（SOAP）であったりJSON-RPCなどを思い出す人も多いかと思いますが、2022年時点で新規に技術選定するのであれば、よく選ばれるのは次のプロダクト群でしょう。</p><ul><li>GraphQL</li><li>Protocol Buffers（gRPC）</li><li>OpenAPI Specification</li></ul><p>それぞれ長所・短所があるかと思いますが、それぞれエコシステムも成長も伴いどんどん使い勝手が上がっているように思えます。こういったIDLでスキーマを定義し、それを駆動にしてコミュニケーションの齟齬をなくしたり、コードやドキュメントを自動生成させるなどで、開発生産性を高めることも当たり前に行われつつあるように感じます。特に複数のチームで連携する必要があったり、本番稼働後にそれなりの期間において、ドキュメントの陳腐化させずメンテナンスをするという観点で、開発フローを自動化しやすいIDLがあると便利でしょう。</p><p>一方で、さきほど紹介した3つの仕様を含むめた、複数IDL全部に詳しい人！という方は貴重な気がします。というのも、チームで複数のIDLを準備することは通常あまりせず、したとしてもメインで用いるIDLは決めていると思うからです（複数をバッチリ使っているよという方がいれば、ぜひお話を伺いたいです！）。</p><p>今回、こういったIDLやエコシステム、サービス間の通信（何かしらのRPC関連の技術）をテーマにした連載を始めますが、この機会に普段の業務利用だと触れる機会を少しでも提供できればなと考えています。</p><div class="scroll"><table><thead><tr><th>日付</th><th>執筆者</th><th>タイトル</th></tr></thead><tbody><tr><td>6&#x2F;22</td><td>真野隼記</td><td><a href="/articles/20220622b/">Open API Specification v3.1</a></td></tr><tr><td>6&#x2F;23</td><td>澁川喜規</td><td>connect</td></tr><tr><td>6&#x2F;24</td><td>関靖秀</td><td>gPRC gateway</td></tr><tr><td>6&#x2F;?</td><td>武田大輝</td><td>Open API Specification 規約</td></tr></tbody></table></div><p>武田さんはこの連載の直前にアポを取ったら、快く引き受けてくれたこともあり、公開時期はすこしズレる予定です。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>フューチャーだと Open API Specification の利用が多いですが、部分的にgRPCやまれにGraphQLの採用もあるようです。個人的には<a href="https://future-architect.github.io/articles/20200609/">GraphQLのこの記事</a>を書いたことがあり、採用事例が増えると良いなと思っています（中々導入の機会が無いですね）。</p><p>Open API Specficationは利用頻度が多いので、引き続き業務的な知見を自分が得たり、周囲のチームを見つけたらブログ化を勧めたいと思いますので、暖かく見守っていただけると幸いです！</p><p><a href="https://pixabay.com/ja/users/clker-free-vector-images-3736/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=28157">Clker-Free-Vector-Images</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=28157">Pixabay</a>からの画像</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/IDL/">IDL</category>
      
      <category domain="https://future-architect.github.io/tags/gRPC/">gRPC</category>
      
      <category domain="https://future-architect.github.io/tags/connect/">connect</category>
      
      <category domain="https://future-architect.github.io/tags/OpenAPISpecfication/">OpenAPISpecfication</category>
      
      
      <comments>https://future-architect.github.io/articles/20220622a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ファイルダウンロード完全マスター</title>
      <link>https://future-architect.github.io/articles/20220621a/</link>
      <guid>https://future-architect.github.io/articles/20220621a/</guid>
      <pubDate>Mon, 20 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220621a/upload-2244780.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;465&quot;&gt;

&lt;p&gt;Real World</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220621a/upload-2244780.png" alt="" width="800" height="465"><p>Real World HTTPでも紹介したネタですが、お仕事で受けている技術コンサル中に質問をいただいた時に、微妙に本で紹介した内容では少し足りなかったので、改めて整理のためにブログ記事にしてみました。次回、本が改訂されることがあればこのブログエントリーの内容も入れて加筆したいと思います。</p><p>Real World HTTPだとGoを使っていましたが、フロントとサーバーを同時にいじるので、本エントリーではNext.jsをサンプルに使います。Next.jsでプロジェクトを作って（npx create-next-app@latest –ts)、適当なプロジェクト名を入れてアプリケーションの雛形を作っておいてください。</p><p>Next.jsでは、1つのスクリプトファイルを作成すると、それがサーバーAPI(<code>/pages/api</code>以下)と、フロントの画面(<code>/pages/</code>以下の<code>api</code>以外)になります。Next.jsは説明しないのでまったく未見の方はチュートリアルをやると良いですが、サーバーAPIでやっていることはGoとかJavaのSpringBootとかPythonとかRubyとかの通常のウェブサービス開発と変わらないことなので、何かしらの経験があれば雰囲気で読めると思います。フロントエンドのReactもHTMLのようなJSXなので、HTMLがわかればこちらも雰囲気で伝わるかと思います。</p><h1 id="ファイルのダウンロードの基本"><a href="#ファイルのダウンロードの基本" class="headerlink" title="ファイルのダウンロードの基本"></a>ファイルのダウンロードの基本</h1><p>HTTPは「ハイパーテキスト転送プロトコル」の略ですが、ハイパーテキストというテキストファイルに限らず、さまざまなファイルの転送を請け負っています。みなさんは例えばオライリーのサイトで購入した実用Go言語の電子ブックのPDFファイルとか、さまざまなファイルを日々ダウンロードしてローカルに保存したりしていると思います。HTTPのプロトコル自体は、画面に表示されるファイルも、ダウンロードフォルダに保存されるファイルも、1つか2つのフィールドを除いては変化ありません。</p><ul><li><code>Content-Type</code></li><li><code>Content-Disposition</code></li></ul><p>また、それ以外にHTMLの<code>&lt;a&gt;</code>タグの<code>download</code>属性で制御する方法と、そのJavaScript版もあります。</p><h2 id="サーバー-サーバーが返すContent-Typeフィールドがブラウザで表示対象外-or-未サポート"><a href="#サーバー-サーバーが返すContent-Typeフィールドがブラウザで表示対象外-or-未サポート" class="headerlink" title="サーバー: サーバーが返すContent-Typeフィールドがブラウザで表示対象外 or 未サポート"></a>サーバー: サーバーが返す<code>Content-Type</code>フィールドがブラウザで表示対象外 or 未サポート</h2><p>ブラウザは、ウインドウ内でコンテンツを表示するかダウンロードにするかは、サーバーから送られてくる <code>Content-Type</code> フィールドに書かれたファイルの種別を見て判断します。最近のブラウザはPDFはインラインで表示してくれますが、Excelファイルなんかはダウンロードになります。Firefoxは設定に次のようなファイル種別ごとにダウンロードするか表示するかを持っています。</p><img src="/images/20220621a/スクリーンショット1.png" alt="" width="1200" height="731" loading="lazy"><p>このようなリスト（ブラウザによって多少違うはず）にあって、インライン表示（ここではFirefoxで開く)の場合には表示しますし、ファイルを保存が指定されている、あるいはリストにない種類の場合は保存しようとします。</p><p>実験してみましょう。次は普通のHTMLのコンテンツを返すエンドポイントです。次のファイルを作って、ブラウザから<a href="http://localhost:3000/api/download">http://localhost:3000/api/download</a> にアクセスしてみましょう。</p><figure class="highlight ts"><figcaption><span>/pages/api/download.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">download</span>(<span class="params">req: NextApiRequest, res: NextApiResponse</span>) &#123;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>); <span class="comment">// 普通のファイル種別</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">end</span>(<span class="string">&quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;hello world&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通に表示されましたね？実験で普通ではない絶対登録されてない<code>Content-Type</code>を持たせてみると、ダウンロードになることがわかります。</p><figure class="highlight ts"><figcaption><span>/pages/api/unusual-download.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">download</span>(<span class="params">req: NextApiRequest, res: NextApiResponse</span>) &#123;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;web3/html3&#x27;</span>); <span class="comment">// Web3用の特殊なHTMLはGAFAのブラウザには表示できない!!</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">end</span>(<span class="string">&quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;hello world&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="サーバー-サーバーの返すContent-Dispositionフィールドで、ファイル保存指定されている"><a href="#サーバー-サーバーの返すContent-Dispositionフィールドで、ファイル保存指定されている" class="headerlink" title="サーバー: サーバーの返すContent-Dispositionフィールドで、ファイル保存指定されている"></a>サーバー: サーバーの返す<code>Content-Disposition</code>フィールドで、ファイル保存指定されている</h2><p><a href="https://datatracker.ietf.org/doc/html/rfc6266">RFC-6266</a>で定義されているのが<code>Content-Disposition</code>フィールドです。これを使うと、サーバーの指示で、ブラウザの内部の表示設定を無視してダウンロードを強制させられます。また、ファイル保存時のファイル名を設定できます。<a href="https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Content-Disposition">MDN</a>の説明がわかりやすいです。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: inline</span><br><span class="line">Content-Disposition: attachment</span><br><span class="line">Content-Disposition: attachment; filename=&quot;download.html&quot;</span><br></pre></td></tr></table></figure><p>MDNによると、<code>inline</code>だとブラウザ内部に表示され、<code>attachment</code>だとダイアログを出して保存される、<code>filename</code>をつけると、それがダイアログのデフォルト値として入れられるブラウザが多い、と書かれています。ただし、ChromeやSafariは保存ダイアログは出さず、<code>attachment</code>だけの場合は<code>Content-Type</code>から類推される拡張子が勝手に付与され、<code>filename</code>もつけるとその指定のファイル名で保存されるという感じでした。</p><img src="/images/20220621a/スクリーンショット2.png" alt="" width="526" height="166" loading="lazy"><p>先ほどのサンプルに<code>Content-Disposition</code>ヘッダーもつけて、MDNにあるように値を変えて試してみましょう。</p><figure class="highlight ts"><figcaption><span>/pages/api/force-download-by-server.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">download</span>(<span class="params">req: NextApiRequest, res: NextApiResponse</span>) &#123;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=filename.html&quot;</span>);</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">end</span>(<span class="string">&quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;hello world&lt;/body&gt;&lt;/html&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>なお、MDNのサンプルにはありませんが、<code>inline</code>に<code>filename</code>をつけるのもRFCの文法説明的にはOKです。この場合、Chromeで試すと、ブラウザがインライン表示できる<code>Content-Type</code>なら表示し、そうでなければ指定されたファイル名で保存する、という動作になっているように思います。</p><h2 id="ブラウザ-lt-a-gt-タグのdownload属性で制御する"><a href="#ブラウザ-lt-a-gt-タグのdownload属性で制御する" class="headerlink" title="ブラウザ: &lt;a&gt;タグのdownload属性で制御する"></a>ブラウザ: <code>&lt;a&gt;</code>タグの<code>download</code>属性で制御する</h2><p>次はフロントエンド側で制御する方法です。　先ほど作った、ダウンロードにならない普通のコンテンツを返すURL先のリソースを強制的にダウンロードにするするリンクをフロントエンドで作ります。<code>&lt;a&gt;</code>タグに<code>download</code>属性をつけるとブラウザは通常のコンテンツもブラウザで表示しないでダウンロードになります。</p><figure class="highlight tsx"><figcaption><span>pages/force-download-by-html.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ForceDownload</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/api/download&quot;</span> <span class="attr">download</span>=<span class="string">&quot;download.html&quot;</span>&gt;</span>ダウンロードするよ<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>もちろん、<code>download</code>属性がなくてもインライン表示ができないファイル形式など、サーバー側から返されるフィールドでダウンロードと判定されるとダウンロードになります。</p><h2 id="ブラウザ-JavaScriptで強制ダウンロードを行わせる"><a href="#ブラウザ-JavaScriptで強制ダウンロードを行わせる" class="headerlink" title="ブラウザ:　JavaScriptで強制ダウンロードを行わせる"></a>ブラウザ:　JavaScriptで強制ダウンロードを行わせる</h2><p>上記のサンプルは<code>&lt;a&gt;</code>タグでしたが、確認ダイアログでOKを押して、権限をチェックしてからダウンロードするなど、ダウンロード開始の制御をフロントのスクリプトでやりたいこともあると思います。</p><p>その時に使える方法がJavaScriptで実行する方法ですが、やっていることは<code>&lt;a&gt;</code>タグを動的に作ってクリックを人為的に起こしてから終了しているだけなので、実質的にはHTML版の焼き直しでしかありません。簡単ですね。</p><figure class="highlight tsx"><figcaption><span>pages/force-download-by-js.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useCallback &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">ForceDownloadByJS</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> download = <span class="title function_">useCallback</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> anchor = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    anchor.<span class="property">href</span> = <span class="string">&quot;/api/download&quot;</span>;</span><br><span class="line">    anchor.<span class="property">download</span> = <span class="string">&quot;hello.html&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(anchor);</span><br><span class="line">    anchor.<span class="title function_">click</span>();</span><br><span class="line">    <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(anchor.<span class="property">href</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(anchor);</span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;download&#125;</span>&gt;</span>ダウンロードするよ<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>なお、<code>href</code>をいじればフロント側で動的に作ったコンテンツをダウンロードさせることも可能です。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">anchor.<span class="property">href</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Blob</span>(</span><br><span class="line">    [<span class="string">&quot;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;hello world from front&lt;/body&gt;&lt;/html&gt;&quot;</span>],</span><br><span class="line">    &#123;<span class="attr">type</span>: <span class="string">&#x27;text/plain&#x27;</span>&#125;));</span><br></pre></td></tr></table></figure><h1 id="実際にどれを使えば良いか？"><a href="#実際にどれを使えば良いか？" class="headerlink" title="実際にどれを使えば良いか？"></a>実際にどれを使えば良いか？</h1><p>いろいろ手法がありますが、どれを選択すべきかは要件しだいです。以下にあげる項目は、どれかひとつを排他的に選ぶものではありません。もしかしたら全部に合うかもしれないし、一つだけの場合もあります。どちらにしても、ここの組み合わせでかなりのニーズは説明できる気がしています。</p><h2 id="絶対にダウンロードさせたい"><a href="#絶対にダウンロードさせたい" class="headerlink" title="絶対にダウンロードさせたい"></a>絶対にダウンロードさせたい</h2><p>サーバー側で動的に契約書のPDFを作って、ユーザー保存用として強制ダウンロードさせておきたい場合とかは、中途半端に中が見れてしまうと閲覧だけで満足してしまってダウンロードするのを忘れたり、そのために何度もPDF実行処理をサーバーが行わされたりするとうれしくないので、確実にダウンロードさせたい、みたいなケースがあると思います。</p><p><code>Content-Type</code>でダウンロードになるかどうかはブラウザの登録次第です。ユーザーが入れたブラウザ拡張機能でも変化する可能性があります。確実なのは<code>Content-Disposition</code>を使う方法、あるいは、<code>&lt;a&gt;</code>タグの<code>download</code>属性を使う方法のどちらかですね。</p><h2 id="S3のオブジェクトストレージに保存しているファイルを提供したいか否か"><a href="#S3のオブジェクトストレージに保存しているファイルを提供したいか否か" class="headerlink" title="S3のオブジェクトストレージに保存しているファイルを提供したいか否か"></a>S3のオブジェクトストレージに保存しているファイルを提供したいか否か</h2><p>S3に保存しているファイルをユーザーにダウンロードさせるなら、おそらくはサーバー側のAPIでSigned URLを発行して、それをフロントに返し、ブラウザが直接S3からダウンロードとさせることが多いと思います。一旦サーバーを経由させるのも、単に帯域とCPUを無駄に消費するだけでSDGsじゃないですし。直接S3から返す方がいいですよね？</p><p>その場合、サーバーリクエストでダウンロード開始をフロントからサーバーに宣言し、サーバーAPIから帰ってきたURLをフロント側に戻し、フロント側でダウンロードを開始することになるため、JavaScriptを使ってダウンロードさせる手法を使うことになるでしょう。以下のサンプルは↓実際には動かしてないけどこんな感じでいけるかと。</p><figure class="highlight ts"><figcaption><span>/api/download-from-s3/[filekey].ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">downloadFromS3</span>(<span class="params">req: NextApiRequest, res: NextApiResponse</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; filekey &#125; = req.<span class="property">query</span>;</span><br><span class="line">    <span class="keyword">const</span> command = <span class="keyword">new</span> <span class="title class_">GetObjectCommand</span>(&#123;</span><br><span class="line">      <span class="title class_">Bucket</span>: <span class="string">`test-bucket`</span>,</span><br><span class="line">      <span class="title class_">Key</span>: filekey <span class="keyword">as</span> <span class="built_in">string</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> signedUrl = <span class="keyword">await</span> <span class="title function_">getSignedUrl</span>(s3Client, command, &#123;</span><br><span class="line">      <span class="attr">expiresIn</span>: <span class="number">3600</span>,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">200</span>).<span class="title function_">json</span>(&#123;</span><br><span class="line">      signedUrl,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>まずはこのAPIを呼んで、その結果帰ってくる　URLからダウンロードします。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> download = <span class="title function_">useCallback</span>(<span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/download-from-s3/<span class="subst">$&#123;欲しいファイル.txt&#125;</span>`</span>/)</span><br><span class="line">  <span class="keyword">const</span> &#123; signedUrl &#125; = <span class="keyword">await</span> res.<span class="title function_">json</span>();</span><br><span class="line">  <span class="keyword">const</span> anchor = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  anchor.<span class="property">href</span> = signedUrl;</span><br><span class="line">  anchor.<span class="property">download</span> = <span class="string">&quot;欲しいファイル.txt&quot;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(anchor);</span><br><span class="line">  anchor.<span class="title function_">click</span>();</span><br><span class="line">  <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(anchor.<span class="property">href</span>);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(anchor);</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p>S3以外の、例えばRDBのBLOB型みたいなやつに保存しているデータを返すならサーバー側で<code>Content-Disposition</code>ヘッダーをつけて返すとかそういう感じになるかと思いますが、今時はS3なりCloud Storageなりのオブジェクトストレージを使う方が多いんじゃないか、という気はします。</p><h2 id="添付ファイル閲覧機能をつけたい"><a href="#添付ファイル閲覧機能をつけたい" class="headerlink" title="添付ファイル閲覧機能をつけたい"></a>添付ファイル閲覧機能をつけたい</h2><p>ファイルのダウンロード機能というのは、ダウンロード以外させたくない場合以外に、ファイルアップロード機能があったときに確認用にユーザーにダウンロードして中身を見る機能の提供と2種類ユースケースがあると思います。確認用だと2つのフローがありえます。</p><ul><li>ブラウザが対応していて閲覧する場合はコンテンツ表示<ul><li>対応しているなら、いちいちダウンロードして開き直すといった不要な手間は省きたい</li><li>新しいタブを開いてそこに表示したい。いちいち見た後に戻るをしたくない（スクロール位置がずれたり）し、間違って閉じちゃったら面倒なので。</li></ul></li><li>対応していない場合はファイルダウンロード<ul><li>ダウンロードする場合は適切なファイル名を付与してほしい</li></ul></li></ul><p>ブラウザが対応しているかどうかはサーバーは知る由もないので、どちらにでも対応できるレスポンスを行う必要があります。</p><p>まず、強制ダウンロードではないがファイル名を指定する必要があるため、サーバーとしては次のフィールドをレスポンスにつけます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Disposition: inline; filename=&quot;filename.jpg&quot;</span><br></pre></td></tr></table></figure><p>S3でSignedURLを発行するときは、多分こんな感じで上書き設定してあげれば良いはず。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> command = <span class="keyword">new</span> <span class="title class_">GetObjectCommand</span>(&#123;</span><br><span class="line">  <span class="title class_">Bucket</span>: <span class="string">`test-bucket`</span>,</span><br><span class="line">  <span class="title class_">Key</span>: filekey <span class="keyword">as</span> <span class="built_in">string</span>,</span><br><span class="line">  <span class="title class_">ResponseContentDisposition</span>: <span class="string">`&quot;inline; filename=<span class="subst">$&#123;filekey&#125;</span>&quot;`</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>つぎに、JavaScriptを使って開きますが、これも強制ではない＆新しいタブを開いて表示なので、<code>download</code>属性の設定を外す代わりに、<code>target</code>属性を設定します。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> download = <span class="title function_">useCallback</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> anchor = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">  anchor.<span class="property">href</span> = <span class="string">&quot;/api/download&quot;</span>;</span><br><span class="line">  anchor.<span class="property">target</span> = <span class="string">&quot;_blank&quot;</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(anchor);</span><br><span class="line">  anchor.<span class="title function_">click</span>();</span><br><span class="line">  <span class="variable constant_">URL</span>.<span class="title function_">revokeObjectURL</span>(anchor.<span class="property">href</span>);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(anchor);</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p>これでダウンロードしたいけどダウンロードしたくない、でもちょっとダウンロードしたい場合に対応可能です。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>まず、サーバーx2、ブラウザx2と、ダウンロードするかどうかを制御する方法を合計4つ紹介しました。</p><p>また、最後によくあるケースとして絶対にダウンロードさせたいとか、S3を使う場合とか、サーバー側のファイルを閲覧する（可能ならダウンロードフォルダからファイルを探していちいちローカルで開く手間は減らしたい）というケースについても紹介しました。</p><p>Real World HTTPで紹介していなかったのは、S3のSigned URL周りと、可能ならインラインで表示したいがもしダウンロードするならファイル名も指定したい、の2つでした。書籍の方は今後も、リアルな要件の裏で「どのようなHTTP通信が行われるのか」を明らかにしていく方向で進化させたいので、生々しい技術相談を仕事で受けるのは楽しいですね。趣味と実益を兼ねている。</p><p>画像は<a href="https://pixabay.com/ja/users/raphaelsilva-4702998/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2244780">raphaelsilva</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2244780">Pixabay</a>を利用しました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Web/">Web</category>
      
      <category domain="https://future-architect.github.io/tags/HTTP/">HTTP</category>
      
      <category domain="https://future-architect.github.io/tags/HTML/">HTML</category>
      
      
      <comments>https://future-architect.github.io/articles/20220621a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【エネルギー業界】LPガス基礎知識編part3 充填編</title>
      <link>https://future-architect.github.io/articles/20220620a/</link>
      <guid>https://future-architect.github.io/articles/20220620a/</guid>
      <pubDate>Sun, 19 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;ご安全に。TIG</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>ご安全に。TIG DXユニットの栗田です。業界ドメインに詳しくなろうというテーマで、真野がLPガス業界の全体像について記載していますが、今回はそのうち充填業務および充填工場について説明します。</p><ul><li><a href="/articles/20220519a/">第一回 【エネルギー業界】LPガス基礎知識編 </a></li><li><a href="/articles/20220530a/">第二回 【エネルギー業界】LPガス基礎知識編part2 供給設備 </a></li></ul><p>都市ガスであれば地面の中に導管を埋設し、その中をガスを通します。しかし、LPガスでは導管インフラを抱える代わりに、調達してきたLPガスを個別の容器に詰め替え、各供給設備に配送します。</p><p>この調達してきたLPガスを個別の容器に詰め替えることを、「充填」ひいては充填を行う工場のことを「充填所（充填工場）」と呼称します。</p><h2 id="前提：容器（ボンベ）について"><a href="#前提：容器（ボンベ）について" class="headerlink" title="前提：容器（ボンベ）について"></a>前提：容器（ボンベ）について</h2><p>一般的にガスボンベなどといわれるものは、液石法<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>や高圧ガス保安法では「容器」と呼称しますが、 <a href="/articles/20220530a/#%E5%AE%B9%E5%99%A8">過去の記事</a> でも触れたように、その形状は複数あります。</p><p>例として、20kg容器と50kg容器を横から図示します。</p><p>容器は転倒などによってバルブなどが壊れないように措置をすることが液石則<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>にて記述されており、プロテクタやキャップを付けることが定められています。</p><img src="/images/20220620a/LPG容器.png" alt="LPG容器" width="1200" height="1007" loading="lazy"><p>LPガス（液化石油ガス）の名前の通り、充填したばかり容器の中には液体の状態（と一部気化した状態）でガスが充填されており、時間経過とともに容器内のガスが気化し、使われていきます。</p><p>通常はあくまで自然気化をしたLPガスが各供給設備で使われますが、ガスの使い方によっては、自然気化だけでは間に合わないことがあります。例えば、工場やレストランなど、大量にガスを利用する現場では、液体を強制的に気化させてガスの安定供給を実現させることがあります。</p><p>この場合に利用するのが、ベーパライザー（強制気化装置、蒸発器）です。べーパライザーは液体のままLPガスを取り込み、熱交換器によって気化させて排出します。このべーパライザーを利用する場合、通常容器の底にある液体のLPガスを取り出す必要があります。そのため、サイフォン管を取り付けた容器（サイフォン容器、とも）を利用します。</p><h3 id="容器の検査"><a href="#容器の検査" class="headerlink" title="容器の検査"></a>容器の検査</h3><p>LPガスの容器は、一定期間ごとに検査を受けることが必要です。</p><p>容器については容器保安規則24条<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>で定められており、製造から20年未満の容器は5年に1度、20年以上の容器は2年に1度の検査が必要で、期限が切れるあるいは切れそうになった容器は検査に回されます。</p><p>LPガス業者が自社で検査設備を保有している場合は検査設備に回しますが、自社で検査設備を有していない場合、検査を行っている会社に依頼します。破損があるなどで検査に不合格にならない限り再利用可能であり、不合格になるなどした場合、容器は廃棄されます。</p><p>検査の工程としては、最初に容器の中の残ガスの回収を行い、LPガスを容器内から抜きます。バルブの取り外しを行った後、耐圧検査・内部検査などを行い、ショットブラスト<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>を行います。ショットブラスト後、再度外観検査を行い、刻印の打刻と塗装およびバルブの取付を行い、ラベリングを行って出荷となります。</p><h1 id="充填所"><a href="#充填所" class="headerlink" title="充填所"></a>充填所</h1><p>充填所は容器にLPガスを詰める施設です。</p><p>トラックで各需要家（エネルギー業界では供給先のお客様を指す）から回収してきた容器は、そのエリアを取りまとめる充填所に届けられます。充填所に回収された容器は、再度LPガスを詰めて各需要家のもとに届けられます。</p><p>充填所に持ち込まられた容器は、トラックの荷台などから人間が降ろします。充填所（あるいは検査場）が扱う容器の数は膨大であるため、トラックの荷台の高さと充填作業場の高さを合わせることで、極力容器を持ち上げず、容器を転がしながら作業できます。充填作業場に移動された容器は、転がす・コンベアで移動させる等によって充填機に投入し、充填をし、取り出します。<br>充填が終わった容器は、再度トラックなどに積み込まれて出荷されます。</p><img src="/images/20220620a/充填工場イメージ.drawio.png" alt="充填工場イメージ" width="1081" height="212" loading="lazy"><p>なお、先に説明した容器の検査期限の確認方法の一つとしては、容器を降ろした際に目視で塗装を確認し、期限切れであったら取り除いて検査に回します。<br>後述する充填機によっては、充填する際に検査期限をチェックして弾けるものもあります。</p><h2 id="充填機"><a href="#充填機" class="headerlink" title="充填機"></a>充填機</h2><p>充填機は、「計量」に属する設備です。</p><p>充填機の足元が計量器になっており、充填機に入れられた容器は重さを測りながら充填されます。ボンベによって個体差があるため「今どの容器をセットされたか」をデータベースから特定し、空の重さを確認します。同時に計量器にかけることによって、その差分から、正味何kgのLPガスがボンベ内に入っているかを見ることができます。容器は充填可能量を超えないように充填され、終わったら次の容器と交換します。</p><p>充填機には、手動のもの、全自動のもの、その間の半自動のものなど、複数の種類があります。手動充填機の場合、セルフのガソリンスタンドのようにバルブに充填機をセットして充填します。</p><p>全自動充填機になると、バルブをあけ、充填するところまで自動化されます。充填機メーカーの製品によりますが、回転式とよばれる、コンベア上を流れてきた容器を一本ずつ取り込み、充填していく機器などが挙げられます。</p><img src="/images/20220620a/LPG手動充填機.drawio.png" alt="LPG手動充填機" width="421" height="468" loading="lazy"><p>手動充填機のイメージ。手前、あるいは横から容器を測りの上に移動させ、重さを測りにながら充填を行います。</p><img src="/images/20220620a/LPG全自動充填機.drawio.png" alt="LPG全自動充填機" width="1200" height="720" loading="lazy"><p>全自動充填機のイメージ。　複数の充填機がターンテーブルの上にのり、ターンテーブル自体が回転します。</p><p>ターンテーブルが回転する間に、各充填機は計量を行いながら充填します。</p><p>各充填機は、充填が終わった容器を出口で出力し、すぐに次の容器を取り込みます。</p><h2 id="関連規格"><a href="#関連規格" class="headerlink" title="関連規格"></a>関連規格</h2><p>LPガスという危険物を扱うため、液石法をはじめ、多くの法律や規格に準拠する必要があります。</p><p>特徴的なものの一つとして、「防爆」という規格を説明します。</p><h3 id="防爆"><a href="#防爆" class="headerlink" title="防爆"></a>防爆</h3><p>LPガスという気化する可燃性物質を扱う都合上、LPガスを充填する作業場には、爆発・火災を防ぐために「防爆」という規格が適用されます。爆発・火災は、着火源と可燃物の2つが合わさることで発生しますが、LPガスを充填する工場では前述の充填機などの電気設備が必要なことから、着火源と可燃物のいずれかを完全に除去することはできません。</p><p>そのため、可燃性ガスなどを扱う際には、できる限り着火源を漏洩しないような設備の設計を行うことが必要です。</p><p>この「着火源を放出しない」ルールを定めたのが、「防爆」です。この防爆処理を定めた設備を「防爆電気設備」といいます。法律としては労働安全衛生法や電気機械器具防爆構造規格など複数存在する他、具体的な指針としてはIEC60079に整合した工場電気設備防爆指針が刊行されています。</p><p>特に防爆に関する危険場所は、可燃性ガス・蒸気の放出・漏洩頻度などによって、Zone0・1・2の3つに分類され（数字が小さいほど危険）、危険場所には防爆電気設備の設置が義務付けられます。</p><p>防爆電気設備の規格としては、例えば機器内の圧力を高める内圧防爆構造などが挙げられますが、これらの規格を満たさない電子機器は、危険場所から一定距離離れて設置する必要があり、IoT化などの大きなハードルとなります。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回は容器の充填に着目して説明しましたが、可燃性の危険物を扱う都合上、様々な法律が存在します。</p><p>初学者の参考と慣れば幸いですが、特に実際に現場を扱う際は、法律周りなど専門家に確認しながら進めることが必要です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">液石法とは、 <a href="https://elaws.e-gov.go.jp/document?lawid=342AC0000000149">液化石油ガスの保安の確保及び取引の適正化に関する法律</a> の略称。part1・2でも述べたとおり、このボンベには複数種類のサイズがあって、設置場所や条件に応じて適切なサイズの容器を選択して設置する。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://elaws.e-gov.go.jp/document?lawid=341M50000400050">容器保安規則</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">液石則とは、 <a href="https://elaws.e-gov.go.jp/document?lawid=341M50000400052_20210222_503M60000400005">液化石油ガス保安規則</a> の略称。</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">ショットブラストとは、エアーによって小さな鉄の粒を噴射し、表面のサビや外部塗装を除去する表面加工のこと。</span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Business/">Business</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%A5%AD%E7%95%8C%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3/">業界ドメイン</category>
      
      <category domain="https://future-architect.github.io/tags/LP%E3%82%AC%E3%82%B9%E6%A5%AD%E7%95%8C/">LPガス業界</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A8%E3%83%8D%E3%83%AB%E3%82%AE%E3%83%BC%E6%A5%AD%E7%95%8C/">エネルギー業界</category>
      
      
      <comments>https://future-architect.github.io/articles/20220620a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【業界ドメインに詳しくなろう】シリーズの連載を開始します！</title>
      <link>https://future-architect.github.io/articles/20220616a/</link>
      <guid>https://future-architect.github.io/articles/20220616a/</guid>
      <pubDate>Wed, 15 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220616a/city-4679928_1280.png&quot; alt=&quot;&quot; width=&quot;1280&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220616a/city-4679928_1280.png" alt="" width="1280" height="720"><p>みなさんこんにちは。TIGの村田です。</p><p>フューチャーでは日々様々なプラットフォーム・様々なコンテンツで発信を行っておりますが、「業界ドメインに詳しくなろう」と題して新シリーズをスタートします。</p><h1 id="新シリーズに至った背景"><a href="#新シリーズに至った背景" class="headerlink" title="新シリーズに至った背景"></a>新シリーズに至った背景</h1><p>今回のシリーズは、当社TIG（テクノロジーイノベーショングループ）内での外部発信テーマ検討の中で生まれ、採用されました。元々フューチャーでは技術ブログにて様々な技術系トピックの発信を行ってきましたが、今回の連載を通じて我々社員もみなさんと一緒により一層各業界ドメインに詳しくなれたらいいなと思っています！</p><p>早速真野さんがエネルギー業界に詳しくなれる記事を公開してますので、ぜひご一読ください。</p><p><a href="/articles/20220519a/">【エネルギー業界】LPガス基礎知識編</a><br><a href="/articles/20220530a/">【エネルギー業界】LPガス基礎知識編part2 供給設備</a></p><p>上記記事のように、各業界を基礎的な部分から知っていきたい人のためになるコンテンツが並んでいきます。<br>「ITコンサルタント」の視点から見た各業界について皆さまにお届けする予定です！</p><p>ちなみに、フューチャーのオウンドメディアには<a href="https://future-fintech.github.io/">Future Fintech EYE</a>という金融の未来を語るブログもあります。<br>当社取締役である山岡さんが金融業界についてたくさんの記事を公開している非常に面白いブログなので、興味がある方はぜひ一度読んでみてください！</p><h1 id="連載に登場する予定の業界ドメインと公開スケジュール"><a href="#連載に登場する予定の業界ドメインと公開スケジュール" class="headerlink" title="連載に登場する予定の業界ドメインと公開スケジュール"></a>連載に登場する予定の業界ドメインと公開スケジュール</h1><p>フューチャーでは様々な業界のお客様と一緒に仕事をさせて頂いていますが、各プロジェクトと相談しつつ、今後以下のような業界ドメインの記事を公開していく予定です。<br>今年の上期を目処に、各業界の記事を公開していけたらと考えています！（コンテンツ内容や公開タイミングは変更される可能性があります）</p><div class="scroll"><table><thead><tr><th align="left">業界</th><th align="left">連載本数</th><th align="left">公開予定月</th></tr></thead><tbody><tr><td align="left">エネルギー業界を知ろう</td><td align="left"><a href="/articles/20220620a/">【エネルギー業界】LPガス基礎知識編part3 充填編 </a></td><td align="left">6&#x2F;20</td></tr><tr><td align="left">^</td><td align="left">【エネルギー業界】電力基礎知識編</td><td align="left">6月末</td></tr><tr><td align="left">^</td><td align="left">【エネルギー業界】LPガス基礎知識編part4 バルク</td><td align="left">7月頃</td></tr><tr><td align="left">^</td><td align="left">【エネルギー業界】業界動向</td><td align="left">9&#x2F;2</td></tr><tr><td align="left">メディア業界へのチャレンジ</td><td align="left">全5回予定</td><td align="left">2022年7〜9月</td></tr><tr><td align="left">金融業界の業務とIT</td><td align="left">本数未定</td><td align="left">2022年7月〜</td></tr><tr><td align="left">鉄道業界と沿線ビジネス</td><td align="left">本数未定</td><td align="left">2022年7月〜</td></tr><tr><td align="left">アパレル業界に詳しくなろう</td><td align="left">本数未定</td><td align="left">2022年8月頃</td></tr><tr><td align="left">流通小売業界におけるチャレンジ</td><td align="left">本数未定</td><td align="left">2022年8月頃</td></tr></tbody></table></div><p>ビジネスとテクノロジの垣根なく両足を突っ込んでいくフューチャー社員ならではの連載になるのではと思っています。<br>今後の投稿もぜひご期待ください！</p><p>※画像は <a href="https://pixabay.com/ja/users/khirulislam898-12875647/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4679928">MD KHIRUL ISLAM</a>による<a href="https://pixabay.com/ja/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4679928">Pixabay</a>を利用させていただきました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Business/">Business</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9/">ビジネス</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%A5%AD%E7%95%8C%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3/">業界ドメイン</category>
      
      
      <comments>https://future-architect.github.io/articles/20220616a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go で map 型の YAML 出力を指定の順序へ変更したい</title>
      <link>https://future-architect.github.io/articles/20220615a/</link>
      <guid>https://future-architect.github.io/articles/20220615a/</guid>
      <pubDate>Tue, 14 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220615a/yml.png&quot; alt=&quot;&quot; width=&quot;512&quot; height=&quot;512&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://www.flaticon.com/free-icons/yml&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220615a/yml.png" alt="" width="512" height="512" loading="lazy"><p><a href="https://www.flaticon.com/free-icons/yml" title="yml icons">Yml icons created by Darius Dan - Flaticon</a></p><p>TIG 所属の多賀です。<br>表題の通り、Go で map 型の YAML 出力の際、key を指定した順序にする方法を調査・実装してみました。</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><ul><li>map の key は YAML 変換ライブラリ側でソートされた上で、出力することで順序が固定化されている</li><li>指定した順序で出力したいので、map を struct へ変換して出力した</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Go の map のソート順は不定であることは、よく言われることかなと思います。<br>(言語仕様にも明記されています。)</p><blockquote><h4 id="Map-types"><a href="#Map-types" class="headerlink" title="Map types"></a>Map types</h4><p>A map is <strong>an unordered group</strong> of elements of one type, called the element type, indexed by a set of unique keys of another type, called the key type. The value of an uninitialized map is nil.</p><p><a href="https://go.dev/ref/spec#Map_types">The Go Programming Language Specification - Map types</a></p></blockquote><p>そのため、map をソートして出力したい場合は、 map に含まれる key のリストをソートし、ソートされた key ごとに map の value を出力することで実現します。</p><p>例: <a href="https://go.dev/play/p/5LC2H8ziPpI">The Go Playground - map sort sample</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;a&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;d&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;c&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;b&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">keys := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(m))</span><br><span class="line"><span class="keyword">for</span> k := <span class="keyword">range</span> m &#123;</span><br><span class="line">keys = <span class="built_in">append</span>(keys, k)</span><br><span class="line">&#125;</span><br><span class="line">sort.Strings(keys)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, key := <span class="keyword">range</span> keys &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;key: %v, val: %v\n&quot;</span>, key, m[key])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="comment">// key: a, val: xxx</span></span><br><span class="line"><span class="comment">// key: b, val: xxx</span></span><br><span class="line"><span class="comment">// key: c, val: xxx</span></span><br><span class="line"><span class="comment">// key: d, val: xxx</span></span><br></pre></td></tr></table></figure><p>同様に、map を <a href="https://ja.wikipedia.org/wiki/YAML">YAML</a> へ出力する際も key でソートして出力したかったのですが、YAML を扱うライブラリ側でソート順が固定化されており、できませんでした。ライブラリの調査について以下に記載します。<br>まず、Go で YAML を扱うためには、一般的に以下ライブラリが利用することができます。</p><ul><li><a href="https://github.com/go-yaml/yaml">go-yaml/yaml.v3</a></li><li><a href="https://github.com/goccy/go-yaml">goccy/go-yaml</a></li></ul><p>(今回のサンプルは、 <a href="https://github.com/go-yaml/yaml">go-yaml/yaml.v3</a> を利用しています。)</p><p>map を YAML 形式へ出力するコードを以下の通りに実装してみました。</p><p>例: <a href="https://go.dev/play/p/19g1PtgoyRq">The Go Playground - map to yaml sample</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gopkg.in/yaml.v3&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;a&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;d&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;c&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;b&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b, err := yaml.Marshal(&amp;m)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="type">string</span>(b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="comment">// a: xxx</span></span><br><span class="line"><span class="comment">// b: xxx</span></span><br><span class="line"><span class="comment">// c: xxx</span></span><br><span class="line"><span class="comment">// d: xxx</span></span><br></pre></td></tr></table></figure><p>出力を見てみると(もしくは、PlayGround上で複数回実行していみると) 固定でアルファベット順にソートされて出力されていることがわかります。<br>ソースコードを読んでみると、ライブラリ内で key をソートした上で出力するように実装されていました。<br>それぞれのライブラリの該当行は以下になります。</p><ul><li><a href="https://github.com/go-yaml/yaml/blob/f6f7691b1fdeb513f56608cd2c32c51f8194bf51/encode.go#L186">go-yaml/yaml - encode.go#mapv</a></li><li><a href="https://github.com/goccy/go-yaml/blob/883a73b67b4e35d8f5bad112c918363aad961e3c/encode.go#L503">goccy/go-yaml - encode.go#encodeMap</a></li></ul><p>(key がソートされてないと出力ごとに余計な差分が出て不便なので、ライブラリ側で吸収してくれているのかと思いました。)</p><p>ライブラリ側で<strong>固定で</strong>ソート順が定められている以上、map の出力を<strong>指定の</strong>ソート順にできないことになります。<br>今回、 <strong>指定の</strong>ソート順にしたい要望があり、どうにかできないか調査・実装してみました。</p><h2 id="対応方法"><a href="#対応方法" class="headerlink" title="対応方法"></a>対応方法</h2><p>やりたいことは、 「map の YAML 出力時の key を指定した順序で出力すること」になります。<br>上記記載の通り、map のソート順はライブラリ側で固定化されているので、map 型のままだと難しそうです。<br>map 型の他に、key/value 形式でソート順が固定されているデータ構造としては、 struct が該当すると考え、map → struct の変換をすれば良いのではと思いつきました。</p><p>ですが、map は任意の key/value 値になるため、コンパイル前に struct を定義することはできません。<br>そのため、map の key/value 値を元にして、実行時に struct を生成することにしました。</p><p>また、YAML 形式へ変換する実装を map → struct への変換処理にカスタマイズしたいです。<br>変換処理を独自カスタマイズするには、<a href="https://github.com/go-yaml/yaml">go-yaml/yaml.v3</a> の場合は <code>Marshaler</code> interface を実装することで可能です。</p><p><a href="https://github.com/go-yaml/yaml/blob/v3/yaml.go#L50">yaml/yaml.go at v3 · go-yaml/yaml · GitHub</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The Marshaler interface may be implemented by types to customize their</span></span><br><span class="line"><span class="comment">// behavior when being marshaled into a YAML document. The returned value</span></span><br><span class="line"><span class="comment">// is marshaled in place of the original value implementing Marshaler.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If an error is returned by MarshalYAML, the marshaling procedure stops</span></span><br><span class="line"><span class="comment">// and returns with the provided error.</span></span><br><span class="line"><span class="keyword">type</span> Marshaler <span class="keyword">interface</span> &#123;</span><br><span class="line">MarshalYAML() (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(<code>goccy/go-yaml</code> の場合も同様の interface (<a href="https://github.com/goccy/go-yaml/blob/883a73b67b4e35d8f5bad112c918363aad961e3c/yaml.go#L29">InterfaceMarshaler</a>) でカスタマイズ可能な模様です。)</p><p>整理すると、以下の 2点を実装する必要があります。</p><p><strong>① map の値から実行時に struct を新たに生成し、struct のフィールドを指定したソート順で定義する。</strong><br><strong>② YAML 出力時に map → struct 変換を実装するため、出力カスタマイズ可能な interface を満たすように実装する。</strong></p><p>こちらの 2点を満たす実装を以下の通り実施してみました。<br>(※ reflection が多用されたナイーブな実装なので、本運用等のコードに使うのは少しリスキーだと思います。今回は CLI ツールでの利用であったため、問題ないとしています。)</p><p><a href="https://go.dev/play/p/-ZlYbk2_La-">The Go Playground - sort map to yaml sample</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/iancoleman/strcase&quot;</span></span><br><span class="line"><span class="string">&quot;gopkg.in/yaml.v3&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ② Marshaler interface を実装する専用の構造体を定義</span></span><br><span class="line"><span class="keyword">type</span> SortedMap <span class="keyword">struct</span> &#123;</span><br><span class="line">output     <span class="keyword">map</span>[<span class="type">string</span>]any</span><br><span class="line">sortedKeys []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ② Marshaler interface を満たすメソッドを定義</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o SortedMap)</span></span> MarshalYAML() (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> o.sortedKeys == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> o.output, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ① の map → struct 生成を実装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 構造体のフィールドを定義</span></span><br><span class="line">newStructFields := <span class="built_in">make</span>([]reflect.StructField, <span class="number">0</span>, <span class="built_in">len</span>(o.output))</span><br><span class="line"><span class="keyword">for</span> _, key := <span class="keyword">range</span> o.sortedKeys &#123;</span><br><span class="line"><span class="keyword">var</span> newStructField reflect.StructField</span><br><span class="line"><span class="keyword">if</span> o.output[key] != <span class="literal">nil</span> &#123;</span><br><span class="line">newStructField = reflect.StructField&#123;</span><br><span class="line">Name: strcase.ToCamel(key),</span><br><span class="line">Type: reflect.ValueOf(o.output[key]).Type(),</span><br><span class="line">Tag:  reflect.StructTag(fmt.Sprintf(<span class="string">`yaml:&quot;%v&quot;`</span>, key)),</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// nil 値の場合 zero value error となるため、ポインタ型で定義して型を抽出</span></span><br><span class="line"><span class="keyword">var</span> ptrTyp *<span class="keyword">struct</span>&#123;&#125; = <span class="literal">nil</span></span><br><span class="line">newStructField = reflect.StructField&#123;</span><br><span class="line">Name: strcase.ToCamel(key),</span><br><span class="line">Type: reflect.ValueOf(ptrTyp).Type(),</span><br><span class="line">Tag:  reflect.StructTag(fmt.Sprintf(<span class="string">`yaml:&quot;%v&quot;`</span>, key)),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">newStructFields = <span class="built_in">append</span>(newStructFields, newStructField)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 構造体型の生成</span></span><br><span class="line">newStructType := reflect.StructOf(newStructFields)</span><br><span class="line"><span class="comment">// 構造体の生成</span></span><br><span class="line">newStruct := reflect.New(newStructType).Elem()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 構造体へ値を詰める</span></span><br><span class="line"><span class="keyword">for</span> _, key := <span class="keyword">range</span> o.sortedKeys &#123;</span><br><span class="line">newStructValue := newStruct.FieldByName(strcase.ToCamel(key))</span><br><span class="line">value := o.output[key]</span><br><span class="line"><span class="keyword">if</span> value != <span class="literal">nil</span> &#123;</span><br><span class="line">newStructValue.Set(reflect.ValueOf(value))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// nil 値の場合 zero value error となるため、ポインタ型で定義して nil を定義</span></span><br><span class="line"><span class="comment">// YAML ファイル上に nil で出力したいため</span></span><br><span class="line"><span class="keyword">var</span> ptrValue *<span class="keyword">struct</span>&#123;&#125; = <span class="literal">nil</span></span><br><span class="line">newStructValue.Set(reflect.ValueOf(ptrValue))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> newStruct.Interface(), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]any&#123;</span><br><span class="line"><span class="string">&quot;a&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;d&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;c&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;b&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ソート順を指定</span></span><br><span class="line">sortedKeys := []<span class="type">string</span>&#123;<span class="string">&quot;d&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">sm := SortedMap&#123;output: m, sortedKeys: sortedKeys&#125;</span><br><span class="line"></span><br><span class="line">b, err := yaml.Marshal(&amp;sm)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="type">string</span>(b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="comment">// d: xxx</span></span><br><span class="line"><span class="comment">// c: xxx</span></span><br><span class="line"><span class="comment">// b: xxx</span></span><br><span class="line"><span class="comment">// a: xxx</span></span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Go で map の YAML 出力時のソート順を指定する方法を実装してみました。<br>YAML 形式に閉じずに、他の形式でも似た実装で同じような結果が得られそうです。<br>実装方法としては、reflection 利用のあまり良くないコードかなとは思いつつ、他に方法も浮かばなかったのが実際のところです。<br>(他に良い実現方法があれば、ぜひ知りたいです。)</p><p>最後まで読んでいただきありがとうございました。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://qiita.com/uechoco@github/items/b51df877659226d2893e">Goのreflectで任意の構造体のフィールド変数を1つ増やしちゃう - Qiita</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/YAML/">YAML</category>
      
      <category domain="https://future-architect.github.io/tags/map/">map</category>
      
      
      <comments>https://future-architect.github.io/articles/20220615a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>循環的複雑度の計算を題材にRoslyn APIを使ってみた</title>
      <link>https://future-architect.github.io/articles/20220614a/</link>
      <guid>https://future-architect.github.io/articles/20220614a/</guid>
      <pubDate>Mon, 13 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;TIG コアテクノロジーユニットの山田です。ソースやドキュメントを解析してファクト分析を行う仕事をしています。&lt;/p&gt;
&lt;p&gt;今回は循環的複雑度の計算を題材に、Roslynを用いてVB.NETに対する解析コード&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>TIG コアテクノロジーユニットの山田です。ソースやドキュメントを解析してファクト分析を行う仕事をしています。</p><p>今回は循環的複雑度の計算を題材に、Roslynを用いてVB.NETに対する解析コード<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>をC#で書いてみました。本記事では、メソッド単位の循環的複雑度の計算を、クエリメソッドを用いて構文木を走査する方法とVisualBasicSyntaxWalkerを継承したクラスを用いて構文木を走査する方法の2通りの方法を紹介します。それぞれの方法の特徴は以下の通りです。</p><ol><li>クエリメソッドを用いる方法<ul><li>あるノードの子ノードや子孫ノード、祖先ノードをクエリメソッドにより列挙して処理する形になります</li><li>いわゆるXMLに対するXPathやHTMLに対するCSSセレクタのようなインタフェースです</li></ul></li><li>VisualBasicSyntaxWalkerを継承したクラスを用いる方法<ul><li>どの型のノードを訪問した際にどんな処理をするかというのを記述する方式となります</li><li>いわゆるVisitorパターンです</li></ul></li></ol><h2 id="Roslynとは"><a href="#Roslynとは" class="headerlink" title="Roslynとは"></a>Roslynとは</h2><p>Roslynとは.NET Compiler Platformのコードネームで、コード解析ツール構築のためのAPIを持つコンパイラです<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。Roslynが提供しているAPIを用いることで簡単に静的解析を行うことが出来ます。Microsoft公式で開発されているため、安心感がありますね。</p><h2 id="循環的複雑度について"><a href="#循環的複雑度について" class="headerlink" title="循環的複雑度について"></a>循環的複雑度について</h2><p>循環的複雑度とはコードの品質を表す指標の一つで、循環的複雑度が高いほど複雑な構造であるといえます。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> <sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p><p>循環的複雑度は制御フローグラフのノード数nとエッジ数eから <code>e - n + 2</code> という形で計算できます。<br>制御フローグラフに分岐が一つもない場合、この値は1となり、分岐が増えるごとに値が増えていくため、分岐の数 + 1という形で簡単に求めることができます。</p><p>今回の記事では、<code>If</code>, <code>ElseIf</code>, <code>For</code>, <code>For Each</code>, <code>While</code>, <code>Case</code>, <code>Catch</code> の数を数えて循環的複雑度を算出<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>することにします。<br>なお、<code>IIf</code> は一見三項演算子のようですが、扱いとしてはただの関数なので今回は対象としませんでした。自前で算出すると自由に計算ロジックを変えられるので、プロジェクトのルールに応じてカスタマイズできますね。</p><p>具体的には以下のようにカウントします。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Public</span> <span class="keyword">Class</span> A</span><br><span class="line">    <span class="comment">&#x27; 分岐の数は合計で10個なので循環的複雑度は11となる</span></span><br><span class="line">    <span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Sub</span> Main()</span><br><span class="line">        <span class="keyword">Dim</span> i <span class="keyword">As</span> <span class="type">Integer</span> = <span class="number">1</span></span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">If</span> i = <span class="number">1</span> <span class="keyword">Then</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">ElseIf</span> i = <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">        <span class="keyword">Else</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">        <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">While</span> i &gt; <span class="number">0</span></span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">End</span> <span class="keyword">While</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">For</span> index <span class="keyword">As</span> <span class="type">Integer</span> = <span class="number">0</span> <span class="keyword">To</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">Next</span> index</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Dim</span> lst <span class="keyword">As</span> <span class="built_in">New</span> List(<span class="keyword">Of</span> <span class="type">String</span>) <span class="keyword">From</span> &#123;<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>&#125;</span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">For</span> <span class="keyword">Each</span> elem <span class="keyword">As</span> <span class="type">String</span> <span class="keyword">In</span> lst</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;&quot;</span>, elem)</span><br><span class="line">        <span class="keyword">Next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">Try</span></span><br><span class="line">            <span class="keyword">Throw</span> <span class="built_in">New</span> Exception()</span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">Catch</span> ex <span class="keyword">As</span> Exception</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Catch&quot;</span>)</span><br><span class="line">        <span class="keyword">End</span> <span class="keyword">Try</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">Dim</span> s <span class="keyword">As</span> <span class="type">String</span> = <span class="keyword">If</span>(<span class="literal">Nothing</span>, <span class="string">&quot;hoge&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        i = <span class="keyword">If</span>(<span class="number">0</span> = <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">&#x27; ここは+1しない</span></span><br><span class="line">        i = IIf(<span class="number">0</span> = <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Select</span> <span class="keyword">Case</span> <span class="number">2</span></span><br><span class="line">            <span class="comment">&#x27; ここで+1</span></span><br><span class="line">            <span class="keyword">Case</span> <span class="number">0</span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            <span class="comment">&#x27; ここで+1</span></span><br><span class="line">            <span class="keyword">Case</span> <span class="number">1</span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            <span class="keyword">Case</span> <span class="keyword">Else</span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Else&quot;</span>)</span><br><span class="line">        <span class="keyword">End</span> <span class="keyword">Select</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Class</span></span><br></pre></td></tr></table></figure><h2 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h2><p>下記ツールをインストールします</p><ul><li>.NET 6.0 SDK</li><li>Visual Studio Code<ul><li>C# 拡張機能</li></ul></li></ul><h3 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h3><p>下記コマンドでプロジェクトを作成します。（<code>-o</code>で指定しているのはプロジェクト名です）<br>これによりカレントフォルダに <code>RoslynBlog.csproj</code> ファイルが作成されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -o RoslynBlog</span><br></pre></td></tr></table></figure><h3 id="デバッガの設定"><a href="#デバッガの設定" class="headerlink" title="デバッガの設定"></a>デバッガの設定</h3><p>さて、ここまでで C# の開発環境とプロジェクトの作成が済みましたが、まだデバッガが使用出来ない状態です。続いてデバッガの設定をしていきましょう。<br>といっても手順は簡単で、Visual Studio Codeのデバッグパネルを開き、 <code>create a launch.json file</code> をクリックするだけです。<br>これにより、<code>launch.json</code>が作成され、このようにデバッグが可能となります。<br><img src="/images/20220614a/2022-06-01_16h51_12.png" alt="2022-06-01_16h51_12.png" width="540" height="256" loading="lazy"></p><p>これで無事にデバッグできるようになりました。<br><img src="/images/20220614a/2022-06-02_13h23_24.png" alt="2022-06-02_13h23_24.png" width="679" height="223" loading="lazy"></p><h2 id="開発"><a href="#開発" class="headerlink" title="開発"></a>開発</h2><h3 id="パッケージ追加"><a href="#パッケージ追加" class="headerlink" title="パッケージ追加"></a>パッケージ追加</h3><p>まず今回使用するパッケージを追加します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package Microsoft.Build.Locator --version 1.4.1</span><br><span class="line">dotnet add package Microsoft.CodeAnalysis --version 4.2.0</span><br><span class="line">dotnet add package Microsoft.CodeAnalysis.VisualBasic --version 4.2.0</span><br><span class="line">dotnet add package Microsoft.CodeAnalysis.VisualBasic.Workspaces --version 4.2.0</span><br><span class="line">dotnet add package Microsoft.CodeAnalysis.Workspaces.Common --version 4.2.0</span><br><span class="line">dotnet add package Microsoft.CodeAnalysis.Workspaces.MSBuild --version 4.2.0</span><br></pre></td></tr></table></figure><p><code>RoslynBlog.csproj</code> ファイルをエディタで開くことで、依存パッケージが追加されていることが確認できます。言語とビルドツールが統合されており便利ですね。</p><h3 id="計算対象のプロジェクトの読み込み"><a href="#計算対象のプロジェクトの読み込み" class="headerlink" title="計算対象のプロジェクトの読み込み"></a>計算対象のプロジェクトの読み込み</h3><p><code>MSBuildWorkspace</code>を用いてプロジェクトを読み込み、各ドキュメントの各メソッドごとの循環的複雑度を計算して返します。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    MSBuildLocator.RegisterDefaults();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> workspace = MSBuildWorkspace.Create();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> projectPath = <span class="string">@&quot;../TestProjVB/TestProjVB.vbproj&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> project = <span class="keyword">await</span> workspace.OpenProjectAsync(projectPath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> document <span class="keyword">in</span> project.Documents)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> syntaxTree = <span class="keyword">await</span> document.GetSyntaxTreeAsync();</span><br><span class="line">        <span class="keyword">if</span> (syntaxTree == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// クエリメソッドを用いて循環的複雑度を計算した結果を出力</span></span><br><span class="line">        <span class="keyword">var</span> cyclomaticComplexityByQueryMethod = CalcCyclomaticComplexityByQueryMethod(syntaxTree);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> (methodName, cyclomaticComplexity) <span class="keyword">in</span> cyclomaticComplexityByQueryMethod)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;CalcCyclomaticComplexityByQueryMethod(&#123;0&#125;)=&#123;1&#125;&quot;</span>, methodName, cyclomaticComplexity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// SyntaxWalkerを用いて循環的複雑度を計算した結果を出力</span></span><br><span class="line">        <span class="keyword">var</span> cyclomaticComplexityBySyntaxWalker = CalcCyclomaticComplexityBySyntaxWalker(syntaxTree);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> (methodName, cyclomaticComplexity) <span class="keyword">in</span> cyclomaticComplexityBySyntaxWalker)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;CalcCyclomaticComplexityBySyntaxWalker(&#123;0&#125;)=&#123;1&#125;&quot;</span>, methodName, cyclomaticComplexity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="クエリメソッドによる循環的複雑度の計算"><a href="#クエリメソッドによる循環的複雑度の計算" class="headerlink" title="クエリメソッドによる循環的複雑度の計算"></a>クエリメソッドによる循環的複雑度の計算</h3><p><a href="https://docs.microsoft.com/ja-jp/dotnet/csharp/roslyn-sdk/get-started/syntax-analysis#query-methods">こちら</a>で紹介されているクエリメソッドを用いて循環的複雑度を計算します。<br>循環的複雑度の加算対象となるノードは以下のように判定できます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">IsDecisionNode</span>(<span class="params">SyntaxNode node</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Case Else は除外</span></span><br><span class="line">    <span class="keyword">if</span> (node.IsKind(SyntaxKind.CaseElseStatement))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">        node <span class="keyword">is</span> IfStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> ElseIfStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> WhileStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> ForStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> ForEachStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> CatchStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> CaseStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> TernaryConditionalExpressionSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> BinaryConditionalExpressionSyntax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記メソッドを用いて、メソッド毎の循環的複雑度は下記のように計算できます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; <span class="title">CalcCyclomaticComplexityByQueryMethod</span>(<span class="params">SyntaxTree syntaxTree</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> cyclomaticComplexityDict = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> methodBlockSyntax <span class="keyword">in</span> syntaxTree.GetRoot().DescendantNodes().OfType&lt;MethodBlockSyntax&gt;())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> methodStatementSyntax = methodBlockSyntax.ChildNodes().OfType&lt;MethodStatementSyntax&gt;().First();</span><br><span class="line">        <span class="keyword">var</span> methodName = methodStatementSyntax.Identifier.Text;</span><br><span class="line">        <span class="keyword">var</span> methodCyclomaticComplexity = methodBlockSyntax.DescendantNodes().Where(node =&gt; CyclomaticComplexity.IsDecisionNode(node)).Count() + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        cyclomaticComplexityDict[methodName] = methodCyclomaticComplexity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cyclomaticComplexityDict;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SyntaxWalkerによる循環的複雑度の計算"><a href="#SyntaxWalkerによる循環的複雑度の計算" class="headerlink" title="SyntaxWalkerによる循環的複雑度の計算"></a>SyntaxWalkerによる循環的複雑度の計算</h3><p>構文木を走査しながら循環的複雑度を計算するSyntaxWalkerクラスを作成します。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">CyclomaticComplexitySyntaxWalker</span> : <span class="title">VisualBasicSyntaxWalker</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; CyclomaticComplexityDict &#123; <span class="keyword">get</span>; &#125; = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _currentMethodName = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitMethodStatement</span>(<span class="params">MethodStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _currentMethodName = node.Identifier.Text;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitMethodStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitIfStatement</span>(<span class="params">IfStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitIfStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitElseIfStatement</span>(<span class="params">ElseIfStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitElseIfStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitWhileStatement</span>(<span class="params">WhileStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitWhileStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitForStatement</span>(<span class="params">ForStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitForStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitForEachStatement</span>(<span class="params">ForEachStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitForEachStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitCatchStatement</span>(<span class="params">CatchStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitCatchStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitCaseStatement</span>(<span class="params">CaseStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Case Else は除外</span></span><br><span class="line">        <span class="keyword">if</span> (!node.IsKind(SyntaxKind.CaseElseStatement))</span><br><span class="line">        &#123;</span><br><span class="line">            CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">base</span>.VisitCaseStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitTernaryConditionalExpression</span>(<span class="params">TernaryConditionalExpressionSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitTernaryConditionalExpression(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitBinaryConditionalExpression</span>(<span class="params">BinaryConditionalExpressionSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitBinaryConditionalExpression(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作成した <code>CyclomaticComplexitySyntaxWalker</code>クラス用いて、下記のように循環的複雑度が計算できます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; <span class="title">CalcCyclomaticComplexityBySyntaxWalker</span>(<span class="params">SyntaxTree syntaxTree</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> walker = <span class="keyword">new</span> CyclomaticComplexitySyntaxWalker();</span><br><span class="line"></span><br><span class="line">    walker.Visit(syntaxTree.GetRoot());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> walker.CyclomaticComplexityDict;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回はRoslynのSyntax APIを使い、VB.NETのプロジェクトを解析し循環的複雑度の計算をしてみました。<br>Roslynを使うことで（Solutionや）Projectを簡単に読み込み、解析することができることがわかりました。<br>C#の循環的複雑度もノードの型が違うだけで、ほぼ同じ形で作ることができます。</p><p>今回の記事とは関係ないですが、C#だと <a href="https://github.com/dotnet/roslyn/blob/main/docs/wiki/Scripting-API-Samples.md">Scripting API</a> により、C#のコードをevalすることが可能なのですが、<a href="https://github.com/dotnet/roslyn/issues/6897#issuecomment-462433349">VB.NETのScripting APIは開発中止になった</a>ようなので今後使える見込みはなさそうです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://github.com/dotnet/vblang/tree/main/spec">vblang/spec at main · dotnet/vblang · GitHub</a> でantlrのgrammarが配布されているのですが、これを使ってparseすることはできないようでした。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://github.com/dotnet/roslyn">GitHub - dotnet/roslyn: The Roslyn .NET compiler provides C# and Visual Basic languages with rich code analysis APIs.</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;"><a href="https://www.buildinsider.net/enterprise/sansanreport/0503">10分間で人に説明できるまで分かるCompiler as a Service“Roslyn” - Build Insider</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;"><a href="https://www.w2solution.co.jp/tech/2021/11/26/eg_ns_rs_cyclomaticcomplexity/">バグの出にくいコードを書く~サイクロマティック複雑度について~ | ｗ２ソリューション株式会社 TECH Media</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;"><a href="https://docs.microsoft.com/ja-jp/visualstudio/code-quality/code-metrics-cyclomatic-complexity?view=vs-2022#the-magic-number">コード メトリック - サイクロマティック複雑度 - Visual Studio (Windows) | Microsoft Docs</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="vertical-align: top; padding-right: 10px;">6.</span><span style="vertical-align: top;">.NETの静的解析ツールであるNDependの場合はcontinue, gotoなどもカウントするようですが、今回は計算対象外としています。<a href="https://blog.ndepend.com/understanding-cyclomatic-complexity/#:~:text=Along%20with%20the%20if%20keyword%2C%20you%20can%20acquire%20additional%20complexity%20by%20use%20of%20looping%20constructs%20(while%2C%20for%2C%20foreach)%2C%20switch%20blocks%20(case/default)%2C%20jumps%20(continue%2C%20goto)%2C%20exceptions%20(catch)%2C%20and%20compound%20conditional%20enablers%20(%26%26%2C%20%7C%7C%2C%20ternary%20operator).">Understanding Cyclomatic Complexity -- NDepend</a></span><a href="#fnref:6" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E9%9D%99%E7%9A%84%E8%A7%A3%E6%9E%90/">静的解析</category>
      
      <category domain="https://future-architect.github.io/tags/C/">C#</category>
      
      <category domain="https://future-architect.github.io/tags/VB-Net/">VB.Net</category>
      
      <category domain="https://future-architect.github.io/tags/Roslyn/">Roslyn</category>
      
      
      <comments>https://future-architect.github.io/articles/20220614a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Future Tech Night #17 embeddingを用いた分析・検索・推薦の技術</title>
      <link>https://future-architect.github.io/articles/20220613a/</link>
      <guid>https://future-architect.github.io/articles/20220613a/</guid>
      <pubDate>Sun, 12 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220613a/top.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;263&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220613a/top.png" alt="" width="600" height="263"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。Strategic AI Group所属の金子剛士です。</p><p>2021年11月26日に<a href="https://future.connpass.com/event/231310/">Future Tech Night #17「embeddingの活用」と「MLOps」のAI勉強会</a>を開催し、「embeddingを用いた分析・検索・推薦の技術」というタイトルで発表しました。</p><p>当日の勉強会の様子は<a href="https://www.youtube.com/watch?v=6_C-GnwIz3U">YouTubeで公開しており</a>、発表スライドも公開しています。</p><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/c424fa8e8ec24dab980b0f3ba0905502" title="embeddingを用いた分析・検索・推薦の技術" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 314px;" data-ratio="1.78343949044586"></iframe><h1 id="発表の概要"><a href="#発表の概要" class="headerlink" title="発表の概要"></a>発表の概要</h1><p>深層学習のモデルは画像や自然言語に対して高い精度の予測を行うことが可能ですが、その処理の過程で様々な意味を含んだベクトル(=embedding)を作ります。これを活用することで、どのデータとどのデータが意味的に似ているかを計算し分析することができるようになります。</p><p>本発表の前半では学習済みの自然言語モデルを用いて技術ブログの文章をembeddingに変換し、類似記事の検索や記事のクラスタリングを行いました。embeddingを活用することで、過去の類似記事やタグを効率的に探すことができ、かつ意味的にクラスタリングすることで記事の傾向について考察することができました。これと同様の分析は画像やログデータのデータベースにも適用可能で、人の手で付与したラベルやカテゴリを越えた多くの気づきを与えてくれます。</p><p>本発表の後半ではgensimや対照学習によるembeddingを作成するモデルの学習方法や、embeddingを高速に検索するための近似近傍探索といった最先端のトピックを紹介しました。ログデータからのembeddingを学習・分析は<a href="https://future-architect.github.io/articles/20210901a/">医薬品副作用データベースから医薬品同士の関係を学習・評価・可視化する</a>の記事で紹介したこともありますが、例えidだけでもログデータを用いて適切に学習すればそれだけで意味のあるembeddingを学習することができ、かつ深層学習モデルをスクラッチで組めばデータのカテゴリ情報や画像・言語情報も考慮したうえでデータ同士の関係性を分析することができます。また、<a href="https://cloud.google.com/blog/ja/products/ai-machine-learning/vertex-matching-engine-blazing-fast-and-massively-scalable-nearest-neighbor-search">Vertex Matching Engine</a>にも採用されている、コサイン類似度に適した近似近傍探索手法のScaNNについても紹介・実験を行いパフォーマンスを比較しました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>普段自身で研究していたembedding関連の技術の一部をTechNightの場を借りて発表させていただきました。多くの方から反応をいただき嬉しかったです。また、参加者の方とのdiscussionでよりembeddingに関連した技術の幅を広げられました。感謝しております。</p><p>深層学習を通じて得られるembeddingには多種多様な可能性があり、非常にホットな分野です。<br>今後も動向を追いつつ、社会実装を行っていきたいと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/">機械学習</category>
      
      <category domain="https://future-architect.github.io/tags/TechNight/">TechNight</category>
      
      <category domain="https://future-architect.github.io/tags/TensorFlow/">TensorFlow</category>
      
      
      <comments>https://future-architect.github.io/articles/20220613a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ドメイン駆動設計の源流のPofEAAを読んでみる</title>
      <link>https://future-architect.github.io/articles/20220610a/</link>
      <guid>https://future-architect.github.io/articles/20220610a/</guid>
      <pubDate>Thu, 09 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;最近、ドメイン駆動設計(以下DDD)とかそのあたりを読みこんでいる人から、DDD本の読み方を教えてもらいました。ここではDDD本は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>最近、ドメイン駆動設計(以下DDD)とかそのあたりを読みこんでいる人から、DDD本の読み方を教えてもらいました。ここではDDD本は<a href="https://www.amazon.co.jp/dp/B00GRKD6XU/">エリック・エヴァンスのドメイン駆動設計</a>の方を参照しました。</p><p><a href="https://twitter.com/katzchang">@katzchang</a> さんから教わったのは「DDDはパターンランゲージの形式を意識してるよ」ということでした。ただし、きちんとしたパターンランゲージの形式になっておらず、記述が著者のものになってるので、読者は注意して読む必要があるのかもとのことです。</p><p><a href="https://twitter.com/ryoaita">@ryoaita</a>さんから教わったのは「DDDは<a href="https://www.amazon.co.jp/dp/B01B5MX2O2/">エンタープライズアプリケーションアーキテクチャパターン</a>(以下PofEAA)を下敷きにしている本だよ」ということでした。</p><p>DDDももう時代的にはかなり古い本です。自分で読んだ限りは全然好きになれなくて、でもきっと何かあるはずだと3-4冊読んでみましたが感想は変わらずでした。ユビキタス言語も「当たり前のものを先頭に持ってきて、<a href="https://million-sales.com/?p=346">イエスセット</a>のテクとして誘導してくる詐欺師のテクニックでは」と思ってたぐらいでした。DDDを理解するよりも、DDD本が出た当時のこの本の立ち位置とか成立の過程というのが最近は気になっていました。</p><p>本当はここで紹介する2冊（エリック・エヴァンスのドメイン駆動設計と、エンタープライズアプリケーションアーキテクチャパターン）が半額セールしているうちに書きたかったのですが、5月末で終わってしまったようです。残念。</p><h1 id="パターンランゲージとして見る"><a href="#パターンランゲージとして見る" class="headerlink" title="パターンランゲージとして見る"></a>パターンランゲージとして見る</h1><p>パターンランゲージは、カタログ集の形式ですが、パターンを選ぶ基準を決める「フォース（場）」が大事です。パターンは順番に適用していくものではなく、その状況にあったものをピックアップして使う、という使い方をします。フォースが合わなければ使っても意味なかったり、逆効果だったりします。なので、基本的にそこに入っているものをすべて適用するということはしない、というのがパターンを意識して書かれた本を読むコツです（XPは全適用が基本ですが）。</p><p>モデリング周りのパターンはこんな感じです。DDD本の裏表紙の折り返し部分に書かれているのを引用しました。境界づけられたコンテキストとかあるけど、基本的にはマージできないコンテキストは分けて開始するけど、徐々に統合していくよ、という流れのように見えますね。レガシーシステムラッパー（腐敗防止層）もいつかはリプレースする想定でしょうし。汎用サブドメインはどこの会社でも同じような「銀行振込」みたいなわざわざモデル化すべきでないものだと思うし、統合されたコンテキストとその中で実現するコアドメインというのが最終進化系な気がしますね。まあ単一のモデルで実現できるものであれば、わざわざ分ける必要ないですものね。</p><img src="/images/20220610a/スクリーンショット_2022-06-03_8.05.54.png" alt="スクリーンショット_2022-06-03_8.05.54.png" width="1190" height="1048" loading="lazy"><p>本文はXPを想定してUMLみたいなモデルを作らずにコードでモデルを表現する方法を推していて、補足的な方法としてアナリシスパターンとか、UMLも紹介していますね。モデリング周りのパターンは、この「単一のモデル（を含むコンテキスト）」をスケーリングする方法として書かれている、という読み方をすればいいということですね。肝心のモデリングする部分が「ドメインエキスパートに聞いてコードに書いて洗練する」とか程度で方法論として薄いなぁ、というのも今までDDDに持っていた不満ポイントでした。</p><p>が、DDD本の出版当時に多数あった「既存のモデリング手法」をスケーリングさせるパターンであった考えれば、理解できます。問題は、20年ほど前に流行ったさまざまなモデリング手法が現代で失われてしまったということぐらいですかね。</p><p>ちなみに、XP的な設計手法を使う前提だとしても、この説明だけでは実現できず、他のXP本の力が必要でしょう。4重のイテレーション、フィードバックの仕組み、ストーリーなどを使った要求のマッピングなど、お客さんの言葉を引き出すテクニックがきちんと形になっているのがXPですし、メタファーを使って再現とかコードにする前にきちんとチーム内でコミュニケーションする方法論になっていますが、DDD本はそこを端折っています。まあ他の方法論同様、XPをみんなが知っている（という時代だった）という前提だったんだろうな、と思います。</p><p>実装周りはこんな感じです。DDD本の表紙の折り返し部分に書かれているのを引用しました。モデルをコードとして表現するには、エンティティ、サービス、値オブジェクトで表現するとありますね（図はモジュールも矢印が伸びているが5章の本文では3要素のみ）。ですが、これらのパターンはどれもふわっとしか書かれてなくて、詳細がいまいち分かりませんでしたが、ここでPofEAAを召喚すると良さそうです。</p><img src="/images/20220610a/スクリーンショット_2022-06-03_8.03.08.png" alt="スクリーンショット_2022-06-03_8.03.08.png" width="1122" height="1126" loading="lazy"><h1 id="PofEAAのドメインの表現手法のパターン"><a href="#PofEAAのドメインの表現手法のパターン" class="headerlink" title="PofEAAのドメインの表現手法のパターン"></a>PofEAAのドメインの表現手法のパターン</h1><p>DDD本で書いてあるコードの部品のパターン名と似たものがDDDにはあります。こちらの方が詳しく説明されているので、DDDの説明を補完するにはこちらも合わせて読むと良さそうです。マーチン・ファウラーのエンタープライズアプリケーションアーキテクチャパターン（PofEAA）には、ドメインロジックの構築方法として、３つのパターンが紹介されています。</p><ul><li><a href="https://bliki-ja.github.io/pofeaa/TransactionScript/">トランザクションスクリプト</a></li><li><a href="https://bliki-ja.github.io/pofeaa/DomainModel/">ドメインモデル</a></li><li><a href="https://bliki-ja.github.io/pofeaa/TableModule/">テーブルモジュール</a></li></ul><p>DDD本が選んだのは、この中のドメインモデルです。DDD本はエンティティと値オブジェクトと書いていますが、ドメインモデルという言葉では表現していません。ドメインモデル（オブジェクトで表現）という形式に、エンティティと値オブジェクトを重ねている状態かと思います。他の物は重ならないですし。</p><p>で、PofEAAはドメインを表現する手段としてはバリューオブジェクトの紹介はしておらず、ドメイン関係ないネジ釘を紹介する「ベースパターン」の中にいます。エンティティという言葉はないですが、12章のオブジェクトリレーショナル構造パターンという章まるごとがエンティティを扱っています。PofEAAでは、実装手段（バリューオブジェクト、OR構造パターン）と、ドメインロジックを持つオブジェクトである、という情報は直交したものとして扱われていますね。</p><p>DDD本はテーブルモジュールには触れず、トランザクションスクリプトはアンチパターンで、ドメインモデルが正義のように説明していますが、PofEAAではそれぞれのメリットとデメリットがフラットに紹介されています。トランザクションスクリプトもシンプルでいいよと説明されています。でもって、実装手段とドメインロジックを持つもの、といのが別の軸のものという紹介を省いて、値オブジェクトとエンティティを「ドメインを表現するもの」と紹介してしまっているようです。つまり、ドメインを表現しない値オブジェクトとか、エンティティなんてものはないぞ、という誤解を生み出す源泉はこの魔改造にありそうです。</p><p>このあたりとか、DDDとPofEAAの関係は次のエントリーが詳しいです。</p><ul><li><a href="https://note.com/ryoaita/n/nc263697882cd">RE:メモ:値オブジェクトの定義と差異について</a></li></ul><p>DDD本は、すごくシンプルな事例（Ruby on Railsでさっと作ったアプリ的な）向けに、そのシンプルな状況に耐えうるミニマムセットのパターンを取り出し「ドメインを表現するならこの部分に込めるといいよ」と抜き出して説明しているんだろうな、という気がしてきました。ただ、抜き出す基準が、１５年前のブームになっていたJava文化基準でピックアップしたのかな、というあたりが気になりました。</p><h1 id="ソフトウェアエンジニアリングは全然エンジニアリングじゃない"><a href="#ソフトウェアエンジニアリングは全然エンジニアリングじゃない" class="headerlink" title="ソフトウェアエンジニアリングは全然エンジニアリングじゃない"></a>ソフトウェアエンジニアリングは全然エンジニアリングじゃない</h1><p>オブジェクト指向だって、言語によって機能が異なり、同じようなソフトウェアを作る場合に出来上がるクラス構造とかが大きく変わってきます。例えば、DIなんかはリフレクション前提でしょうしね。クラス図ときれいにマッピングできるようなモデルがあって、上流から下流までうまく繋がるというのは幻だったということです。</p><p>現在行われているソフトウェアの設計という行為は、レイヤーを絞り込んで、その中だけで行われています。</p><ul><li>データベースを中心として設計を行うデータ中心設計（DOA）</li><li>データベースとかフレームワークを切り離しでアプリケーションコード中心に設計するいくつかの方法論</li><li>ゲームではシーングラフの上で動くアクターを中心にしたイベント駆動</li></ul><p>そのレイヤーを定めるのは土台となってるフレームワーク次第なので、フレームワークごとのベストプラクティス的な立場に収まってしまったと言えます。「汎用の設計手法」というのはなくて、土台となる技術が変わって来れば設計手法も影響を受けて変わるということです。</p><p>以前、歴史学を専攻している知人から歴史学のエコシステムを教えてもらったことがあります(もう10年以上前の話ですが)。歴史学では遺跡から出た出土品とかさまざまな資料をもとに、仮説検証をおこなって当時の姿を再現したモデルを作ります。で、新しい発見があると、それをもとに新しいモデルを作り直します。特に情報の少ない古代史になればなるほど、1つの発見で既存のモデルが大きく書き換えられていきます。これって、ようするに、自然科学の発展のような過程を何度も何度も繰り返していると言えます。なぜ<a href="https://ja.wikipedia.org/wiki/%E6%97%A7%E7%9F%B3%E5%99%A8%E6%8D%8F%E9%80%A0%E4%BA%8B%E4%BB%B6">神の手事件</a>が大きな問題として扱われたのか当時はよくわからなくて「歴史書のそこの記述をちょっと直せばいいだけでは」とか思っていましたが、「そのページ以降すべて書き直し」というインパクトがあったのだな、とそれを聞いて初めて理解できました。</p><p>20年ぐらい前に流行ったオブジェクト指向な方法論とかも、当時のJavaとかを想定して組み上げられた方法論ですので、同じような探求活動を、クラスはあるけどほとんど使わない今のTypeScriptとかに対して行えば、当然別の発展が得られるかと思います。歴史学と同じようなリビルドがソフトウェア開発にも起きうるべきですし、ソフトウェア工学の大部分は人文科学なんだなと思います。</p><p>プロパティベーステストとか、SIerあたりでよく出てくるソースジェネレータ開発とかスキーマ駆動なやつとかそのあたりは工学感ありますが。パターンランゲージはいい線行っていると思いますが、デザインパターンとかもC++98以前の30年前に伝えられた姿のままでバージョンアップされずに固定化されてしまっているのですよね。パターンは有機的なもので発展し続けるのを想定していたのかもしれませんが、XPのパターン数も12→13→24(11+13)→19だったか変化し続けて、Clean Agileはケント・ベックとまた別の13だったりするが、XPについて触れた記事もどの時代のものについて触れているか情報が失われて議論が発散してしまった感じがあり、パターンランゲージにバージョン番号をつけて改訂していく文化がなかったのが残念だなと。</p><p>余談ですが、世の中の「オブジェクト指向」は基本Javaを想定していますが、個人的にはprivateの概念はRubyの方が好きですね。同一インスタンス以外には見せない。C++の「お前のものは俺のもの」という悪いカツアゲしてくる「トモダチ」もひどい概念ですね。</p><h1 id="令和時代のDDDを妄想してみると面白いと思う"><a href="#令和時代のDDDを妄想してみると面白いと思う" class="headerlink" title="令和時代のDDDを妄想してみると面白いと思う"></a>令和時代のDDDを妄想してみると面白いと思う</h1><p>パターンランゲージについては最初の方に説明しました。パターンは基本的に数が多ければ多いほど、その組み合わせでたくさんの場面に活用できるというものです。比較的多くのパターンを並べていて網羅的に書かれているPofEAAのパターンも、時代に合っていないもの、その後登場して入るべきであろう、というものもありますし、仮に利用可能なパターンがあっても、そのフォースも、20年の歴史の中で大きく変わっています。当然、それをもとに組み上げられてきたDDDはさらに大きな変化があるはずです。</p><p>特に、最近のクラウドネイティブなFaaSを駆使したピタゴラスイッチ的なやつ。あれとか旧来のDDDとかだとオーバーヘッドが大きすぎると思うんですよね。モデルはデータベースの構造として表現して、トランザクションスクリプトにドメインロジックとか、そういうのに合わせたDDDとか、いろいろ新しい形が模索できるんじゃないかと思います。</p><p>PofEAAで特に古さを感じたのは。ウェブアプリケーションのフロントエンド周りの考え方で、CGIとかそういう時代も考慮したものでSPAとかそういう時代ではないのですが、そういうあたりは微笑ましいなぁ、という感じで読めます。あと、DBにXMLとかを文字列で入れる、みたいな話はJSON型ネイティブサポートとかで解決されるものとかあったりとかするなって思ったりもしました。まあ、このあたり、年長者の人と一緒に読書会でもして、「昔はこうだったけど今はもうこうじゃないよ」とアンラーニングしながらPofEAA本を読むのも良さそうな気がします。</p><iframe sandbox="allow-popups allow-scripts allow-modals allow-forms allow-same-origin" style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=shibukawayosh-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B01B5MX2O2&linkId=9b9628f33caaf7af0ab2e6d7e171fece"></iframe><iframe sandbox="allow-popups allow-scripts allow-modals allow-forms allow-same-origin" style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=shibukawayosh-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B00GRKD6XU&linkId=f551c5e0f7c499cd88dfeec95133d75d"></iframe>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/DDD/">DDD</category>
      
      <category domain="https://future-architect.github.io/tags/PofEAA/">PofEAA</category>
      
      
      <comments>https://future-architect.github.io/articles/20220610a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GoogleWorkspace SDKのAPIリクエスト間隔は気を付けましょう</title>
      <link>https://future-architect.github.io/articles/20220609a/</link>
      <guid>https://future-architect.github.io/articles/20220609a/</guid>
      <pubDate>Wed, 08 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220609a/googleworkspace.png&quot; alt=&quot;&quot; width=&quot;708&quot; height=&quot;402&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220609a/googleworkspace.png" alt="" width="708" height="402"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG DXユニットの岸下です。2022年2月にキャリア入社して、早4ヶ月経ちました。時が流れるのは早いですね。</p><p>参加しているプロジェクトで、Google Workspace Admin SDKのDirectory APIを使った開発を行いました。</p><p>本記事では、<a href="/articles/20220601a/">失敗談をテーマにした連載</a>として、APIを利用した際に500エラーを頻発させてしまった件について執筆していこうと思います。</p><p>結構あるあるな失敗なので、これから開発に入っていく新入社員・初学者の方にはぜひ読んで頂きたい内容となっております。</p><h2 id="Google-Workspace-Admin-SDKとDirectory-APIについて"><a href="#Google-Workspace-Admin-SDKとDirectory-APIについて" class="headerlink" title="Google Workspace Admin SDKとDirectory APIについて"></a>Google Workspace Admin SDKとDirectory APIについて</h2><p>Google WorkspaceはGoogleが提供する組織向けオンラインアプリケーションセットです。</p><p><a href="https://developers.google.com/admin-sdk">Google Workspace Admin SDK</a>はGoogle Workspaceに存在する情報を取得するための管理者向けSDKになっています。<br>また、<a href="https://developers.google.com/admin-sdk/directory">Directory API</a>はGoogle Workspaceで利用しているドメインのユーザーや繋がっているデバイス、サードパーティアプリケーションを管理したり、取得したりすることができます。</p><h2 id="何をしていたのか"><a href="#何をしていたのか" class="headerlink" title="何をしていたのか"></a>何をしていたのか</h2><p>今回、Google Workspace上でグループ化された情報（グループの人数、グループのメールアドレス、グループメンバーのメールアドレスなど）を取得する必要がありました。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span><p>Google Workspaceのグループ化について</p>  <p>Google Workspaceではアカウントのグルーピングが可能です。これには<a href="https://cloud.google.com/?hl=ja">Google Cloud Platform（GCP）</a>上で、グループに対してIAMロールを付与することができるという恩恵があり、グループに所属しているメンバー全員に対してGCPリソースの権限管理ができます。（例えば、グループAにはGoogle Cloud Storageの管理者権限、グループBにはGoogle Cloud Storageの閲覧権限のみなど）</p></div><h2 id="何が起きたのか"><a href="#何が起きたのか" class="headerlink" title="何が起きたのか"></a>何が起きたのか</h2><h3 id="開発環境"><a href="#開発環境" class="headerlink" title="開発環境"></a>開発環境</h3><ul><li>WSL2</li><li>Go1.18</li></ul><h3 id="リクエスト間隔を考慮しなかったがために、500エラーを乱発"><a href="#リクエスト間隔を考慮しなかったがために、500エラーを乱発" class="headerlink" title="リクエスト間隔を考慮しなかったがために、500エラーを乱発"></a>リクエスト間隔を考慮しなかったがために、500エラーを乱発</h3><p>以下、サンプルコードになります。</p><figure class="highlight golang"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;golang.org/x/oauth2/google&quot;</span></span><br><span class="line">admin <span class="string">&quot;google.golang.org/api/admin/directory/v1&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/api/option&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Group <span class="keyword">struct</span> &#123;</span><br><span class="line">groupEmail       <span class="type">string</span></span><br><span class="line">groupName        <span class="type">string</span></span><br><span class="line">numberOfMembers  <span class="type">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GroupMember <span class="keyword">struct</span> &#123;</span><br><span class="line">groupEmail  <span class="type">string</span></span><br><span class="line">memberEmail <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> googleWorkspaceScopesForGroupAndMember = []<span class="type">string</span>&#123;</span><br><span class="line">admin.AdminDirectoryGroupMemberReadonlyScope,</span><br><span class="line">admin.AdminDirectoryGroupReadonlyScope,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// グループのメールアドレス（本来はもっと多い）</span></span><br><span class="line"><span class="comment">// グループのメールアドレスもDirectory APIで取得できるが今回は省略</span></span><br><span class="line"><span class="keyword">var</span> groups = []Group&#123;</span><br><span class="line">&#123;</span><br><span class="line">groupEmail:       <span class="string">&quot;hoge-developer@test.com&quot;</span>,</span><br><span class="line">groupName:        <span class="string">&quot;hoge developer team&quot;</span>,</span><br><span class="line">numberOfMembers: <span class="number">5</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">groupEmail:       <span class="string">&quot;fuga-owner@test.com&quot;</span>,</span><br><span class="line">groupName:        <span class="string">&quot;fuga owner team&quot;</span>,</span><br><span class="line">numberOfMembers: <span class="number">10</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetGroupMember</span><span class="params">()</span></span> ([]GroupMember, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> groupMemberList []GroupMember</span><br><span class="line"><span class="comment">// 取得を行うためのAdmin Serviceを取得</span></span><br><span class="line">srv, err := getService()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;get admin service: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, g := <span class="keyword">range</span> groups &#123;</span><br><span class="line"><span class="keyword">if</span> g.numberOfMembers != <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// この中でDirectory APIを叩いている</span></span><br><span class="line">members, err := createGroupMemberList(srv, g.groupEmail)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;create group member list: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">groupMemberList = <span class="built_in">append</span>(groupMemberList, members...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> groupMemberList, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createGroupMemberList</span><span class="params">(srv *admin.Service, email <span class="type">string</span>)</span></span> ([]GroupMember, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// APIを叩く</span></span><br><span class="line">rm, err := srv.Members.List(email).Do()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;get member list: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> memberList []GroupMember</span><br><span class="line"><span class="comment">// リスト作成処理</span></span><br><span class="line"><span class="keyword">for</span> _, m := <span class="keyword">range</span> rm.Members &#123;</span><br><span class="line">memberList = <span class="built_in">append</span>(memberList, GroupMember&#123;groupEmail: email, memberEmail: m.Email&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> memberList, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getService</span><span class="params">()</span></span> (*admin.Service, <span class="type">error</span>) &#123;</span><br><span class="line">serviceAccountJSON, err := ioutil.ReadFile(<span class="string">&quot;key/service-account-key.json&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;read service account key: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">config, err := google.JWTConfigFromJSON(serviceAccountJSON, googleWorkspaceScopesForGroupAndMember...)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;authorize service account key: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">config.Subject = <span class="string">&quot;&lt;管理者のメールアドレス&gt;&quot;</span></span><br><span class="line">config.Scopes = googleWorkspaceScopesForGroupAndMember</span><br><span class="line">ctx := context.Background()</span><br><span class="line">srv, err := admin.NewService(ctx, option.WithHTTPClient(config.Client(ctx)))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;get new service: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> srv, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">groupMembers, err := GetGroupMember()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, member := <span class="keyword">range</span> groupMembers &#123;</span><br><span class="line"><span class="comment">// 何か処理する</span></span><br><span class="line">fmt.Println(member)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>タイトルの通りなのですが、上記実装では<code>createGroupMemberList(srv, g.groupEmail)</code>にて、リクエスト間隔について全く考慮しておらず、<strong>間髪入れずにAPIへリクエストを送ったことによって500エラーを発生させてしまいました。</strong></p><p>それもそのはずで、<a href="https://developers.google.com/admin-sdk/directory/v1/limits">APIの仕様書</a>を見ると1分あたりの呼び出し制限数が記載されています。</p><blockquote><p>Indicates that the user rate limit has been exceeded. The default value set in the Google Developers Console is 3,000 queries per 100 seconds per IP address.</p></blockquote><h3 id="解決策①：リクエスト間隔に余裕を持たせる"><a href="#解決策①：リクエスト間隔に余裕を持たせる" class="headerlink" title="解決策①：リクエスト間隔に余裕を持たせる"></a>解決策①：リクエスト間隔に余裕を持たせる</h3><p>高速でリクエストを投げつけるとDoSアタックと勘違いされてブロックされる場合もあるのでちゃんと間隔をおいてリクエストを投げましょう。</p><p>以下のように、<code>Sleep</code>を入れてリクエスト間隔に余裕を持たせるのが一番簡単だと思います。</p><figure class="highlight golang"><figcaption><span>main.go (GetGroupMemberでリクエスト時間を調節)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetGroupMember</span><span class="params">()</span></span> ([]GroupMember, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> groupMemberList []GroupMember</span><br><span class="line"><span class="comment">// 取得を行うためのAdmin Serviceを取得</span></span><br><span class="line">srv, err := getService()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;get admin service: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, g := <span class="keyword">range</span> groups &#123;</span><br><span class="line"><span class="keyword">if</span> g.numberOfMembers != <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// Serviceとグループのメールアドレスを渡すことで、メンバー情報を取得</span></span><br><span class="line"><span class="comment">// この中でAPIを叩いている</span></span><br><span class="line">members, err := createGroupMemberList(srv, g.groupEmail)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;create group member list: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">groupMemberList = <span class="built_in">append</span>(groupMemberList, members...)</span><br><span class="line">            <span class="comment">// Sleepを設定</span></span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">250</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> groupMemberList, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="あれ？またリクエストがコケたぞ"><a href="#あれ？またリクエストがコケたぞ" class="headerlink" title="あれ？またリクエストがコケたぞ"></a>あれ？またリクエストがコケたぞ</h3><p>リクエスト間隔を調整したにも関わらず、たまーに500エラーが返ってきます。</p><p><a href="https://stackoverflow.com/questions/26188334/why-do-i-get-503-service-unavailable-errors-using-the-google-cloud-datastore-api">StackOverflow</a>にも同じ現象が起きている人が居て、リクエスト間隔に余裕を持たせていたとしてもGoogle側の何かしらのトラブルによって500エラーでコケるようです。</p><blockquote><p>“You did everything right, but Google is having some trouble handling your request.”<br>（コードは正しく書けているけど、Google側でリクエストを処理しようとした際に何かしらのエラーが起きているみたいよ）</p></blockquote><h3 id="解決策②：指数バックオフを導入する"><a href="#解決策②：指数バックオフを導入する" class="headerlink" title="解決策②：指数バックオフを導入する"></a>解決策②：指数バックオフを導入する</h3><p>こういったケースはどのAPIでもあり得るので、 <strong><a href="https://cloud.google.com/memorystore/docs/redis/exponential-backoff?hl=ja">指数バックオフ</a></strong> を導入しましょう。<br>「指数バックオフ？？数学＋横文字やめて！」となるかもしれませんが、簡単にまとめると「APIへリクエストしたにも関わらず失敗した際に、時間を少しおいてリクエストをもう一度送る」処理になります。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span><p>指数バックオフに関しては本ブログ過去記事でも紹介しております。</p>  <p><a href="/articles/20200121/">スロットリングとの付き合い方</a></p></div><p>先ほどのリクエスト時間に余裕を持たせたうえで以下の変更を施します。</p><figure class="highlight golang"><figcaption><span>main.go（createGroupMemberList内のAPI利用時に指数バックオフを導入）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createGroupMemberList</span><span class="params">(srv *admin.Service, email <span class="type">string</span>)</span></span> ([]GroupMember, <span class="type">error</span>) &#123;</span><br><span class="line">maxRetries := <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> memberList []GroupMember</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= maxRetries; i++ &#123;</span><br><span class="line"><span class="comment">// APIを叩く</span></span><br><span class="line">rm, err := srv.Members.List(email).Do()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">var</span> gerr *googleapi.Error</span><br><span class="line"><span class="keyword">if</span> ok := errors.As(err, &amp;gerr); ok &#123;</span><br><span class="line">                <span class="comment">// エラーコードが500系列であれば、リトライ</span></span><br><span class="line"><span class="keyword">if</span> gerr.Code &gt;= <span class="number">500</span> &#123;</span><br><span class="line">                    <span class="comment">// 繰り返しの数を用いて待ち時間を生成</span></span><br><span class="line">waitTime := <span class="type">int</span>(math.Pow(<span class="number">2</span>, <span class="type">float64</span>(i+<span class="number">1</span>)) * <span class="type">float64</span>(<span class="number">100</span>))</span><br><span class="line">fmt.Println(waitTime)</span><br><span class="line">                    <span class="comment">// 待つ</span></span><br><span class="line">time.Sleep(time.Millisecond * time.Duration(waitTime))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;get member list: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// リスト作成処理</span></span><br><span class="line"><span class="keyword">for</span> _, m := <span class="keyword">range</span> rm.Members &#123;</span><br><span class="line">memberList = <span class="built_in">append</span>(memberList, GroupMember&#123;groupEmail: email, memberEmail: m.Email&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> memberList, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;reaching max retries in createGroupMemberList&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>リトライ数などはべた書きですが、関数として指数バックオフを定義して複数のAPIで共通で利用できるようにしておくと良さそうですね。</p><p>こうすることで、たまーにコケるエラーに対して頑健なリクエストをすることが可能になります。<br>（というか、<a href="https://developers.google.com/admin-sdk/directory/v1/limits">APIの仕様書</a>にも指数バックオフ導入しといてねって書いてありますね…）</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span><p>GoogleAPIのエラーコード処理についても本ブログ過去記事で紹介しております。）</p>  <p>こちらを参考にすれば、AWS向けにも導入可能になります。</p>  <p><a href="/articles/20200523/">Go Tips連載6: Error wrappingされた各クラウドSDKの独自型エラーを扱う</a></p></div><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>サードパーティのAPIを使う処理を書く場合は、</p><ul><li>リクエスト間隔は気をつけましょう（APIの仕様書をちゃんと読みましょう）。</li><li>指数バックオフを導入しておきましょう。</li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/GoogleWorkspace/">GoogleWorkspace</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B9%E3%83%AD%E3%83%83%E3%83%88%E3%83%AA%E3%83%B3%E3%82%B0/">スロットリング</category>
      
      
      <comments>https://future-architect.github.io/articles/20220609a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ユーザー要望で要件が増えてく〜アジャイル開発での落とし穴〜</title>
      <link>https://future-architect.github.io/articles/20220608a/</link>
      <guid>https://future-architect.github.io/articles/20220608a/</guid>
      <pubDate>Tue, 07 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、Technology Innovation Group所属の久保です。&lt;/p&gt;
&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Technology Innovation Group所属の久保です。</p><p><a href="/articles/20220601a/">失敗談をテーマにした連載</a>の6本目です。</p><p>自分が担当した業務でのアジャイル開発での失敗について反省したいと思います。選定したアーキテクチャとアジャイル開発の相性があまりよくなく苦労しました。これはアジャイルの本にはなかった知見でした。</p><h1 id="アジャイル開発ってなに？"><a href="#アジャイル開発ってなに？" class="headerlink" title="アジャイル開発ってなに？"></a>アジャイル開発ってなに？</h1><p>Wikipediaにはこのように書いてありました。</p><blockquote><p>ソフトウェア工学におけるアジャイルソフトウェア開発 (アジャイルソフトウェアかいはつ、英: agile software development) は、人間・迅速さ・顧客・適応性に価値を置くソフトウェア開発である[1]。典型的なアジャイルソフトウェア開発では、チーム主導で設計・実装・デプロイを短期間に繰り返してユーザーが得た価値を学習し適応する、すなわちトライアルアンドエラーで開発が行われる。アジャイルソフトウェア開発を可能にする開発手法にはエクストリーム・プログラミングやスクラムなどがある。</p></blockquote><p>引用:<a href="https://ja.wikipedia.org/wiki/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA">アジャイルソフトウェア開発</a></p><h1 id="アジャイル開発のメリットと落とし穴"><a href="#アジャイル開発のメリットと落とし穴" class="headerlink" title="アジャイル開発のメリットと落とし穴"></a>アジャイル開発のメリットと落とし穴</h1><h2 id="メリット"><a href="#メリット" class="headerlink" title="メリット"></a>メリット</h2><p>上記の様にアジャイル開発では短いスパンでアプリをリリースしフィードバックを頂きながら開発を進めるというものです。</p><p>メリットとして短いスパンでフィードバックを貰うことで顧客の求めるものと出来上がるもののイメージがあまりブレず、手戻りなどが少なく開発を行えるという点があります。そのためアジャイル開発は仕様変更に柔軟に対応できる開発方法と言われています。自分のプロジェクトでは2週間に1回アプリケーションをリリースしフィードバックを頂き開発をしていました。</p><h2 id="ユーザー要望でデータ表示条件の増加"><a href="#ユーザー要望でデータ表示条件の増加" class="headerlink" title="ユーザー要望でデータ表示条件の増加"></a>ユーザー要望でデータ表示条件の増加</h2><p>ではなぜアジャイル開発で失敗したのか？自分の失敗を話したいと思います。私が作ったシステムはIoTデバイスで取得した日次のデータをKVSに格納しアプリケーションに表示するというものでした。</p><p>開発初期から表示するデータの要件定義は以下のように変化していきました。</p><ol><li>取得したデータを閲覧できるようにする</li><li>取得したデータをソートして閲覧できるようにする</li><li>取得したデータをソートして閲覧できるようにする。IoTデバイスがデータの取得に失敗した時は失敗したことがわかるように表示する</li><li>取得したデータを状況毎に表示を変えソートして閲覧できるようにする。IoTデバイスがデータの取得に失敗した時は失敗したことがわかるように表示する</li></ol><p>４は少し分かりづらいですがIoTデバイスが故障している場合や電池切れ、電源が入っていないものは「IoTデバイスの状態」を表示するという仕様の追加でした。</p><h2 id="落とし穴"><a href="#落とし穴" class="headerlink" title="落とし穴"></a>落とし穴</h2><p>今回使ったKVSではソート条件を追加するにはインデックスの追加が必要であり、これはコスト増加することに繋がります。またKVSでは検索条件の追加やソート条件の更新を行う度に、データマイグレーションが必要となります。日次データを取り扱っている為、データ量が多くデータマイグレーションを行うこと事が非常に大変でした。</p><p>このようにフィードバックを受ける度に要件が増えることで工数がどんどん増えていってしまいました。</p><img src="/images/20220608a/アジャイルでの失敗.jpg" alt="アジャイルでの失敗.jpg" width="915" height="460" loading="lazy"><p>初期の要件定義の時点ではユーザーストーリーなどの仮説が荒く、詰めきれない場面が多く追加要望が来る度に仕様の変更を余儀なくされていました。一次情報保存先のKVSとは別に、閲覧用にデータ分析用のRDBMSを追加するなど、要件変更に耐えうる構成などもできましたが、コストの増加の面から採用を見送りました。</p><p>初期の段階である程度仕様を詰めたり、途中のフィードバック時に仕様を落とし込めていれば工数はもう少し下げれたと考えています。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>自分のアジャイル開発での失敗談を書いてみました。</p><p>DBMSのアーキテクチャやデータマイグレーションが変更の容易さに与える影響など、クラウド時代に増えてきた特徴の強いDBMSを活用する場合に、ある程度変更の範囲を予測するなり、事前に合意するなりする必要があると感じました。<br>同じようなミスで苦しむ人が少なくなりますように。</p><p>次の<a href="/articles/20220601a/">失敗談をテーマにした連載</a>は、岸下さんの<a href="/articles/20220609a/">GoogleWorkspace SDKのAPIリクエスト間隔は気を付けましょう</a>でし・</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DevOps/">DevOps</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB/">アジャイル</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      
      <comments>https://future-architect.github.io/articles/20220608a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Lambdaの初期化処理と初期化タイミングの考慮不足によるはまりどころ</title>
      <link>https://future-architect.github.io/articles/20220607a/</link>
      <guid>https://future-architect.github.io/articles/20220607a/</guid>
      <pubDate>Mon, 06 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは、TIGの辻です。&lt;a href=&quot;/articles/20220601a/&quot;&gt;失敗談をテーマにした連載&lt;/a&gt;の5本目です。&lt;/p&gt;
&lt;p&gt;AWS</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは、TIGの辻です。<a href="/articles/20220601a/">失敗談をテーマにした連載</a>の5本目です。</p><p>AWS Lambda（以下Lambda）は様々なユースケースで利用できる、なにかと便利で強力なサービスです。本ブログでも以下のようにLambdaに関するたくさんの記事が投稿されています。</p><ul><li><a href="/articles/20220510a/">Lambda Function URLs をGoでお試し。実行時間の上限（タイムアウト）やWeb API構築周りで気になること</a></li><li><a href="/articles/20220516a/">Lambda×Go並列処理で100万回APIを呼び出す</a></li><li><a href="/articles/20210914a/">LambdaをカスタムDockerランタイムで開発する方法</a></li></ul><p>私もLambdaが好きで、Lambdaの実行時間制約以内で終了する処理であれば、初手の候補の一つとしてLambdaを考えます。</p><p>そんなLambdaですが、予約済同時実行数<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>を1に制限して使っていたときに、初期化処理と初期化タイミングの考慮不足により、はまったことがありました。本記事ではLambdaの初期化処理についておさらいした後、はまったケースの事例や原因、対応した方法を紹介します。</p><h2 id="Lambdaのライフサイクルと初期化処理"><a href="#Lambdaのライフサイクルと初期化処理" class="headerlink" title="Lambdaのライフサイクルと初期化処理"></a>Lambdaのライフサイクルと初期化処理</h2><p>Lambda実行環境のライフサイクルは3つに分かれています。INITとINVOKEとSHUTDOWNです。</p><img src="/images/20220607a/Overview-Successful-Invokes.png" alt="Overview-Successful-Invokes.png" width="1200" height="225" loading="lazy"><p><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/lambda-runtime-environment.html">https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/lambda-runtime-environment.html</a> より</p><p>INITフェーズでは、関数インスタンス（Lambda関数が実行される環境のこと）作成やハンドラ関数外に実装されている初期化処理が行われます。たとえばGoの場合、AWSのサンプルにある <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> 以下のような <code>init()</code> の処理はINITフェーズで行われます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;log&quot;</span></span><br><span class="line">        <span class="string">&quot;github.com/aws/aws-lambda-go/lambda&quot;</span></span><br><span class="line">        <span class="string">&quot;github.com/aws/aws-sdk-go/aws/session&quot;</span></span><br><span class="line">        <span class="string">&quot;github.com/aws/aws-sdk-go/service/s3&quot;</span></span><br><span class="line">        <span class="string">&quot;github.com/aws/aws-sdk-go/aws&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> invokeCount = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> myObjects []*s3.Object</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">        svc := s3.New(session.New())</span><br><span class="line">        input := &amp;s3.ListObjectsV2Input&#123;</span><br><span class="line">                Bucket: aws.String(<span class="string">&quot;examplebucket&quot;</span>),</span><br><span class="line">        &#125;</span><br><span class="line">        result, _ := svc.ListObjectsV2(input)</span><br><span class="line">        myObjects = result.Contents</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LambdaHandler</span><span class="params">()</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">        invokeCount = invokeCount + <span class="number">1</span></span><br><span class="line">        log.Print(myObjects)</span><br><span class="line">        <span class="keyword">return</span> invokeCount, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        lambda.Start(LambdaHandler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>データベースとの接続などの、実行タイミングに依存しない処理を初期化処理として実施し、グローバル変数として再利用できるようにすることはパフォーマンスの観点から有効です。ハンドラの関数外に宣言されているグローバル変数は、Lambdaの関数インスタンスの一部として保存され、その後のリクエストで再利用されることがあるためです。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p><p>なお、上のサンプルで <code>LambdaHandler()</code> に該当するハンドラ関数内の処理はINVOKEフェーズで実行されます。</p><h2 id="はまりケース"><a href="#はまりケース" class="headerlink" title="はまりケース"></a>はまりケース</h2><p>はまりケースでもパフォーマンスを考慮して、TCP通信の確立をLambdaの初期化処理として実装していました。構成はざっくり以下のようなクライアントサーバモデルです。</p><ul><li>対向システム（サーバ）<ul><li>ある処理を受け付けるサーバがある。スケールアウトはしない</li><li>サーバ制約上、複数のクライアントから同時に接続することはできない</li></ul></li><li>Lambda（クライアント）<ul><li>対向システムとTCP通信して処理を行う</li><li>同期呼び出しLambdaである</li><li>Lambdaは複数起動しても通信確立できないため、予約済同時実行数を1としていた</li><li>TCP通信するための変数はグローバル変数として宣言し、初期化処理で通信を確立するようにしていた</li></ul></li></ul><p>対向システムの制約と（詳細は割愛しますが）非機能要件上、Lambdaの予約済同時実行数を1で絞ることで、Lambdaが2つ以上同時実行されないようにしている、という点がトリッキーな感じです。<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup></p><p>このとき、ロングランテスト<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>中に、稀に以下の問題となる事象を観測することがありました。</p><ul><li>あるタイミングで一定時間Lambdaと対向システムのTCP接続が確立できず、処理が失敗する</li><li>対向システムのサーバは電源断などは起きておらず、通常通り通信できる状態であった</li><li>通信できなくなるLambda起動の前に、別の関数インスタンスによるTCP通信の初期化処理を行っているログがあった</li><li>先に通信を確立した関数インスタンスではハンドラ関数内の処理は行われていない</li></ul><p>イメージ図は以下になります。</p><img src="/images/20220607a/before.png" alt="対向システムが同時接続数が1" width="872" height="462" loading="lazy"><p>ログから原因は以下のように推測しています。</p><ul><li>Lambdaの予約済同時実行数は1としていたものの、AWS側での関数インスタンスの作成が必ずしも1つとなるわけではない</li><li>なんらかの理由により、Lambdaの実行環境のライフサイクルを管理しているAWS側で関数インスタンスが作成された</li><li>関数インスタンス作成時にINITフェーズが起動し、意図しないタイミングでTCP通信の確立がなされたが、Lambdaのハンドラ関数は呼び出されなかった</li><li>先に作成されていた関数インスタンスでTCP接続が確立されていたため、後から作成した別の関数インスタンスではTCP通信を確立できず、実行に失敗した</li></ul><h2 id="対応"><a href="#対応" class="headerlink" title="対応"></a>対応</h2><p>本ケースではTCP通信の確立は初期化処理ではなく、Lambdaハンドラ関数内で行うようにしました。意図しないタイミングで初期化処理が行われ、対向システムと通信が確立されることを防ぐためです。</p><p>結果として、この対応以降は同様のTCP通信が確立できなくなる事象は発生しておらず、期待した動作を得ることができました。</p><img src="/images/20220607a/after.png" alt="毎回TCPコネクションをオープン・クローズする" width="872" height="462" loading="lazy"><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>予約済同時実行数を1で動かしていたケースで、Lambdaの初期化処理と初期化タイミングに関するはまった内容を紹介しました。予約済同時実行数を1とするケースはあまりないとは思いますが、このようにトリッキーな状況で動作する場合、特にLambdaの初期化処理と初期化タイミングに注意しましょう。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></p><p><a href="/articles/20220601a/">失敗談連載2022</a>の次は、久保さんの<a href="/articles/20220608a/">ユーザー要望で要件が増えてく〜アジャイル開発での落とし穴〜</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/golang-handler.html">https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/golang-handler.html</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;"><a href="https://aws.amazon.com/jp/lambda/faqs/">https://aws.amazon.com/jp/lambda/faqs/</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;"><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/configuration-concurrency.html">https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/configuration-concurrency.html</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="vertical-align: top; padding-right: 10px;">6.</span><span style="vertical-align: top;">その他、実行タイミングに依存するデータはLambdaのグローバル変数に保存するべきではない、というような一般的な注意ポイントもありますが、本記事では割愛します。詳細は <a href="https://aws.amazon.com/jp/blogs/news/operating-lambda-performance-optimization-part-2/">https://aws.amazon.com/jp/blogs/news/operating-lambda-performance-optimization-part-2/</a> などを参照ください。</span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="vertical-align: top; padding-right: 10px;">7.</span><span style="vertical-align: top;">本ケースでは仕方がなく予約済同時実行数を1と設定しましたが、本来であればこうならないように設計を工夫したいところです。</span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="vertical-align: top; padding-right: 10px;">8.</span><span style="vertical-align: top;"><a href="https://e-words.jp/w/%E3%83%AD%E3%83%B3%E3%82%B0%E3%83%A9%E3%83%B3%E3%83%86%E3%82%B9%E3%83%88.html">https://e-words.jp/w/ロングランテスト.html</a></span><a href="#fnref:8" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/Lambda/">Lambda</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      <category domain="https://future-architect.github.io/tags/TCP/">TCP</category>
      
      
      <comments>https://future-architect.github.io/articles/20220607a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>フューチャー夏のインターンシップ2022（Engineer Camp）の募集を開始しました！</title>
      <link>https://future-architect.github.io/articles/20220606b/</link>
      <guid>https://future-architect.github.io/articles/20220606b/</guid>
      <pubDate>Sun, 05 Jun 2022 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220606b/23855886_s.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;427&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220606b/23855886_s.jpg" alt="" width="640" height="427" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、真野です。</p><p>フューチャーのサマーインターン2022 Summer Engineer Camp🌞⛺🏃の募集が始まりました。</p><p>フューチャーでは夏のインターンシップは2つのコースがあります。</p><ul><li><strong>Engineer Camp</strong>: エンジニア向けのプログラミング主体のプロジェクト業務を体験するコース</li><li><strong>Project Camp</strong>: だれでも応募OKのプロジェクト業務を体験するコース</li></ul><p>それぞれに良いところがありますが、ここでは Engineer Camp のメニューについて紹介します。</p><p>Project Campに興味がある方は、下記の記事をご覧ください。</p><ul><li><a href="https://note.com/future_event/n/nb94191ebdd53">【対象：新卒】サマーインターン＜Project Camp＞｜採用イベント情報 | フューチャー株式会社｜note</a></li></ul><h2 id="実施概況"><a href="#実施概況" class="headerlink" title="実施概況"></a>実施概況</h2><ul><li>期間<ul><li>8月22日（月）～9月16日（金）</li><li>原則は土日祝日を除く、週5日/8時間の勤務。期間中、数日程度の欠席は調整可能</li><li>週3～4日でのインターンを希望される場合は理由などを伺い、要相談とさせてください</li></ul></li><li>報酬<ul><li>時給1500円/H。1日あたり12,000円（※8時間勤務を行った場合）</li><li>実際の勤務時間に基づいて支給いたします</li></ul></li><li>交通費<ul><li>規定に沿って来社時の交通費を支給します。<ul><li>※原則リモートですが、初日および最終日は出社いただく可能性がございます</li><li>※コースで出社が必要になる場合がございます。募集要項に記載をしておりますのでご確認ください</li><li>※来社が可能な状況だと判断した場合には、オフィスにて数回程度勤務する可能性があります</li></ul></li></ul></li></ul><h2 id="選考プロセス、選考スケジュール"><a href="#選考プロセス、選考スケジュール" class="headerlink" title="選考プロセス、選考スケジュール"></a>選考プロセス、選考スケジュール</h2><p>次の流れで選考を行います。</p><ol><li>マイページ登録（※まずはこちらをお願いします！）<ul><li>登録は <strong><a href="https://job.axol.jp/jn/s/future_24/entry/">こちら</a></strong> から</li></ul></li><li>エントリーシート提出 &amp; プログラミングテスト<ul><li>テストは全5問。各問1~2時間程度の見込み</li><li><strong>締切: 2022年6月26日（日）23時59分まで</strong></li></ul></li><li>面接<ul><li>リモートにて1回。1h程度を想定</li></ul></li></ol><h2 id="Engineer-Campのポイント"><a href="#Engineer-Campのポイント" class="headerlink" title="Engineer Campのポイント"></a>Engineer Campのポイント</h2><p>フューチャーのインターンシップをお勧めする理由を3つ上げさせてください。</p><ul><li><strong>実際の業務にメンバーとして関わることができる</strong><ul><li>インターン用のタスクをしてもらうのではなく、実プロジェクトにアサインされ、リアル業務を行えます。個人では扱うことのできない技術にも触れられます。また、チームで開発する際の苦労や工夫を知ることもできるのは大きいと思います。当然、社会人になってエンジニアとしてはたらくイメージを持つにはうってつけです</li></ul></li><li><strong>フューチャーの技術部隊のメンバーがメンターのためサポートが手厚い</strong><ul><li>実プロジェクトのアサインと聞いて不安に思われた方も多いと思いますが安心してください。フューチャーの各技術分野のスペシャリストがメンターとしてサポートします。社員との距離感も近く、フラットな社風なので、気軽に質問をしやすい環境です。フューチャーの技術力の高さを体感いただきつつ、ご自身のスキルも伸ばしてください。Slackをフル活用しているので疑問を呟くと、きっとすぐに先輩社員がアドバイスしてくれます</li></ul></li><li><strong>4週間のプログラムで成長を実感できる</strong><ul><li>フューチャーの仕事を体験できるように4週間の期間を設けました。長いよ！と思われる方もいるかもしれませんが、実は2週間のプログラムを組んでいたとき、「終わってみれば短すぎた。慣れてきたくらいで終了なのがもったいない。もう少し期間があればもっと深く入ることができるのに！」という声を多数聞きました。その反省を活かし、より深く・より面白く・より満足できるように期間を調整して4週間になりました</li></ul></li></ul><p>他にも受け入れ先プロジェクトごとに、様々な工夫をしています。</p><h2 id="Engineer-Camp-のコース紹介"><a href="#Engineer-Camp-のコース紹介" class="headerlink" title="Engineer Camp のコース紹介"></a>Engineer Camp のコース紹介</h2><p>Engineer Campではバラエティ豊かな14コースを用意しています。それぞれに特徴があり、使う技術も様々です。すべてのコースに共通するスキル要件は3つありますますが、非常にベーシックな内容です。</p><ul><li>1つ以上のプログラミング言語での開発経験（学校、プライベート問わず）</li><li>Slackなどのチャットを用いた非同期コミュニケーション</li><li>主体的にコミュニケーションを取りながら進めていただける方</li></ul><p>こに加えて、各受け入れプロジェクトごとに内容と、応募条件をまとめました。ご自身の強みを活かせるコースや興味のあるコースがあるかと思います。</p><div class="scroll"><table><thead><tr><th>No</th><th>タイトル</th><th>説明</th><th>応募条件（必須）</th></tr></thead><tbody><tr><td>1</td><td>サブスクサービスのWebアプリ開発</td><td>BtoBサブスクリプションモデル最前線！メディア業界を支えるWebアプリケーションを開発する</td><td>・フロントエンド開発経験</td></tr><tr><td>2</td><td>RustでSQLフォーマッタ開発</td><td>大規模システム開発のソースコード品質向上を目的に、SQLのフォーマッタをRustで開発する</td><td>・Git利用経験<br>・構文解析の知識<br>  (AST/lexer/parser/printer等の用語がわかること)<br>・SQL構文の理解（初歩レベルで良い）</td></tr><tr><td>3</td><td>社内設計開発ツールのデータ分析</td><td>設計開発ツールのユーザ行動データを分析し、プロジェクト品質向上のためのデータ可視化を実現する</td><td>・Git利用経験<br>・Python・R・SQLでのデータ解析経験<br>・未知のデータモデルに対する理解力<br>（不明点を対話を通じて把握する力）</td></tr><tr><td>4</td><td>鉄道業界の to C 向け Web アプリケーション開発</td><td>沿線住民を対象としたサービス体験型プラットフォームの機能拡張を担当する(仕様を検討する部分から、フロントエンド、バックエンド開発まで幅広く経験できます！)</td><td>・Git利用経験<br>・フロントエンド開発経験または<br>  RDBを用いた静的言語でのバックエンド開発経験</td></tr><tr><td>5</td><td>メディアサービスのID連携プラットフォーム構築</td><td>クラウド構築から開発まで、近年需要の増加しているID連携プラットフォームの構築に携わる</td><td>・Git利用経験<br>・AWS利用経験</td></tr><tr><td>6</td><td>大手メディアグループの最先端データ分析基盤の構築</td><td>最新アーキテクチャによるデータ分析基盤を構築する</td><td>・SQL利用経験<br>・AWS or GCP利用経験</td></tr><tr><td>7</td><td>市場規模7000億超の外食業における、顧客全社DX施策の仮説立てとそれに向けたシステムとデータ分析</td><td>顧客の業務・システム・データの分析をおこない、それを取り巻くマーケット調査を踏まえ今後進むべき施策を策定する</td><td>・SQL構文の理解（結合・絞り込み・ソート等）<br>・パワーポイント等での資料作成経験</td></tr><tr><td>8</td><td>不動産会社向け新規サービスの検討・プロト開発</td><td>要件定義からリリースまでを一貫して体験する (提案いただいたアイデアが新規サービスとして採用される可能性があります！)</td><td>・フロントエンド開発経験</td></tr><tr><td>9</td><td>ユーザーと企業をつなぐ物流コールセンターを支える仕組み・システム化考案</td><td>あらたなコールセンターの企画立案を体験する</td><td>・間違ってて全然いいので思ったことを発言できること<br>・IPAの<a href="https://www.ipa.go.jp/files/000004568.pdf">この資料</a>を読了すること</td></tr><tr><td>10</td><td>プロパンガス配送計画の最適化に向けた数値データ解析</td><td>超肉体労働なプロパンガス配送員のしごとをDXで効率化する。</td><td>・Git利用経験<br>・Go言語に興味がある方<br>・バックエンド開発に興味のある方</td></tr><tr><td>11</td><td>プロパンガス設備点検の管理アプリケーション開発</td><td>安全第一なプロパンガス保安点検員のしごとをDXで最適化する</td><td>・Git利用経験<br>・Go言語に興味がある方<br>・<strong>大崎オフィスへ出社可能な方</strong></td></tr><tr><td>12</td><td>機械学習プラットフォーム開発</td><td>エンジニアリング力で機械学習モデル開発を加速する</td><td>・基本的なLinuxコマンドの操作経験<br>・Linuxサーバの構築・運用経験（プライベート可）</td></tr><tr><td>13</td><td>画像認識AIの開発</td><td>画像認識AIの社会実装を実現する</td><td>・Pythonでの画像処理の経験<br>・TensorflowやPytorch等を用いたNN構築経験<br>・論文を読んでNNなどの実装ができること<br>・基本的なLinuxコマンドの操作経験</td></tr><tr><td>14</td><td>ヘルスケアアプリの開発</td><td>コンシューマ向けの新規ヘルスケアサービスをつくる</td><td>・フロントエンド、バックエンド開発経験</td></tr></tbody></table></div><p>続けてコースごとの詳細です。 <code>応募条件(あれば歓迎）</code> を見れば、大体どのような技術で開発を行うかが分かると思います。</p><h3 id="1-サブスクサービスのWebアプリ開発"><a href="#1-サブスクサービスのWebアプリ開発" class="headerlink" title="1. サブスクサービスのWebアプリ開発"></a>1. サブスクサービスのWebアプリ開発</h3><p>メディア業界の業務を支えるWebアプリケーションサービスの開発を通じて、サブスクリプション型サービスにおけるチーム開発を経験します。チームで開発するために必要なスキルや、大規模システムのアーキテクチャを知る、実践レベルのプログラミングスキルが身につきます。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・フロントエンド開発経験<br>（JavaScript/TypeScriptを用いたWeb画面の開発経験）</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・Git利用経験<br>・Vue.js開発経験</td></tr><tr><td>募集人数</td><td>2名</td></tr><tr><td>こんな人にオススメ</td><td>・メディア業界を支える技術に興味がある人<br>・フューチャー自身が手掛けるSaaSサービスの裏側に興味がある人</td></tr></tbody></table></div><h3 id="2-RustでSQLフォーマッタ開発"><a href="#2-RustでSQLフォーマッタ開発" class="headerlink" title="2. RustでSQLフォーマッタ開発"></a>2. RustでSQLフォーマッタ開発</h3><p>RustでSQLフォーマッタを作るためRust製パーサ・ジェネレータ/パーサの調査・検証、あるいはパーサを自作していただきます※インターンシップ参加者のレベルに合わせて内容レベル調整を行う想定です。</p><p>大規模エンタープライズシステム開発ではデータモデルの複雑さからSQLは欠かせません。※フューチャーではそれらを支えるためSQLコーディング規約やSQL実行ライブラリ等をOSSとして公開しています。</p><ol><li><a href="https://future-architect.github.io/coding-standards/documents/forSQL/SQL%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E8%A6%8F%E7%B4%84%EF%BC%88Oracle%EF%BC%89.html">SQLコーディング規約 | Future Enterprise Coding Standards</a></li><li><a href="https://future-architect.github.io/uroborosql-doc/">uroboroSQL</a></li><li><a href="https://github.com/future-architect/uroboroSQL-formatter">future-architect/uroboroSQL-formatter: Beautiful SQL Formatter</a></li></ol><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Git利用経験<br>・構文解析の知識(AST/lexer/parser/printer等の用語がわかること)<br>・SQL構文の理解（初歩レベルで良い）</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・Git利用経験<br>・構文解析の経験(自作 or ライブラリ問わず)<br>・Rust利用経験</td></tr><tr><td>募集人数</td><td>1-2名</td></tr><tr><td>こんな人にオススメ</td><td>・構文解析に興味がある方<br>・チームの品質/生産性を上げる手法に興味がある方・<br>・Rustにチャレンジしたい方</td></tr></tbody></table></div><h3 id="3-社内設計開発ツールのデータ分析"><a href="#3-社内設計開発ツールのデータ分析" class="headerlink" title="3. 社内設計開発ツールのデータ分析"></a>3. 社内設計開発ツールのデータ分析</h3><p>フューチャーでは大規模システムの設計品質向上のために設計開発ツールを開発・提供しています。利用プロジェクト増加に伴いデータが蓄積されてきたため、マネージャー向けダッシュボードを検討しています。本コースでは蓄積した利用者の行動データを分析し、プロジェクト運営に役立つビジュアライゼーションの検討・実装をテーマにしています。</p><p>プロジェクト品質をあげるようなインテリジェントなリスク検知、統計値の提供を想定していますが、ゼロベースでのアイデアを期待しています。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Git利用経験<br>・Python・R・SQLでのデータ解析経験<br>・未知のデータモデルに対する理解力（不明点を対話を通じて把握する力）</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・PowerBI等のビジュアライゼーション経験<br>・SQLでのデータ解析経験(集合関数、分析関数レベル)</td></tr><tr><td>募集人数</td><td>1-2名</td></tr><tr><td>こんな人にオススメ</td><td>・ビジュアライズ手法に興味がある方<br>・行動分析を行いたい方</td></tr></tbody></table></div><h3 id="4-鉄道業界の-to-C-向け-Web-アプリケーション開発"><a href="#4-鉄道業界の-to-C-向け-Web-アプリケーション開発" class="headerlink" title="4. 鉄道業界の to C 向け Web アプリケーション開発"></a>4. 鉄道業界の to C 向け Web アプリケーション開発</h3><p>実社会に公開しているサービスの改善を実施します。正解のない中で、より良いサービス、より良いサービス運用のために出来ることを考え、自走する力が身につきます。</p><p>技術領域はモダン、社員は若手中心、開発・コミュニケーション速度が求められる環境で、爆発的な成長を促進します。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Git利用経験<br>・フロントエンド開発経験または<br>  RDBを用いた静的言語でのバックエンド開発経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・Vue.js, Goの利用経験<br>・AWS利用経験</td></tr><tr><td>募集人数</td><td>2-4名</td></tr><tr><td>こんな人にオススメ</td><td>・本番稼働しているtoC向けのサービス開発に触れたい方<br>・フロントエンド～バックエンド～インフラまで、幅広く技術領域を体験したい方</td></tr></tbody></table></div><h3 id="5-メディアサービスのID連携プラットフォーム構築"><a href="#5-メディアサービスのID連携プラットフォーム構築" class="headerlink" title="5. メディアサービスのID連携プラットフォーム構築"></a>5. メディアサービスのID連携プラットフォーム構築</h3><p>複数サービスを展開している企業様のサービス間のIDや情報連携を実現するプラットフォームの構築がメインとなります。同時にエンドユーザーが直接利用するサービスも構築しますので、クラウドインフラだけでなく、UIやアプリケーションの開発まで幅広い領域を経験したい方は是非ご応募ください。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Git利用経験<br>・AWS利用経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・Vue.js, Goの利用経験<br>・SQL利用経験<br>・CI/CD環境の構築、運用経験</td></tr><tr><td>募集人数</td><td>1名</td></tr><tr><td>こんな人にオススメ</td><td>・セキュリティと使い勝手のバランスを取ることに興味がある方<br>・フロントエンド～バックエンド～インフラまで、幅広く技術領域を体験したい方</td></tr></tbody></table></div><h3 id="6-大手メディアグループの最先端データ分析基盤の構築"><a href="#6-大手メディアグループの最先端データ分析基盤の構築" class="headerlink" title="6. 大手メディアグループの最先端データ分析基盤の構築"></a>6. 大手メディアグループの最先端データ分析基盤の構築</h3><p>誰もが知っている某グループ企業のデータ分析基盤を構築しています。通常のWebアプリケーションとは一風違った考え方、開発手法となるので、特にデータ分析分野にご興味がある方におすすめです。</p><p>また今年がファーストリリースとなるので、技術面だけでなく、新規サービスの立ち上げに際するリアルな空気を感じていただけると考えています。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・SQL利用経験<br>・AWS or GCP利用経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・GASの開発経験</td></tr><tr><td>募集人数</td><td>1名</td></tr><tr><td>こんな人にオススメ</td><td>・データ分析に興味がある方<br>・データ基盤の構築に興味がある方</td></tr></tbody></table></div><h3 id="7-市場規模7000億超の外食業における、顧客全社DX施策の仮説立てとそれに向けたシステムとデータ分析"><a href="#7-市場規模7000億超の外食業における、顧客全社DX施策の仮説立てとそれに向けたシステムとデータ分析" class="headerlink" title="7. 市場規模7000億超の外食業における、顧客全社DX施策の仮説立てとそれに向けたシステムとデータ分析"></a>7. 市場規模7000億超の外食業における、顧客全社DX施策の仮説立てとそれに向けたシステムとデータ分析</h3><p>誰もが好きで行ったことのある外食業のお客様の、全社DX計画を策定します。サービス開発やアプリケーション構築の大前段である、一番最初のステップを経験していただきます。顧客の保有しているサービス／システム／データを整理し、分析し、仮説を立て、今後進むべき方向性を策定しお客様へ提案を目指します。具体的には、以下のいずれか（または複数）を実施いただきます。</p><ol><li><strong>全社DX計画策定支援（非開発）</strong><ul><li>顧客の業務／システムを整理し、現サービス／システムの整理とあるべきサービス像の仮説立て、簡易測定をおこないます。</li></ul></li><li><strong>データ分析・可視化・ダッシュボード作成（含開発）</strong><ul><li>顧客のPOSデータ／行動データを受領し、分析し、潜在課題・顕在課題を立て打ち手を考えます。</li></ul></li><li><strong>顧客へのプレゼンテーション</strong><ul><li>1,2を踏まえ、完成度によっては顧客への直接提案・ディスカッションの場を設定します。</li></ul></li></ol><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・SQL構文の理解（結合・絞り込み・ソート等）<br>・パワーポイント等での資料作成経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・SQL利用経験（分析関数）<br>・Python・R・SQLでのデータ解析経験<br>・データの可視化（BIダッシュボード・グラフ作成）</td></tr><tr><td>募集人数</td><td>1-2名</td></tr><tr><td>こんな人にオススメ</td><td>・サービス開発のド頭から経験したい方<br>・プロダクト開発がどう始まるか知りたい方</td></tr></tbody></table></div><h3 id="8-不動産会社向け新規サービスの検討・プロト開発"><a href="#8-不動産会社向け新規サービスの検討・プロト開発" class="headerlink" title="8. 不動産会社向け新規サービスの検討・プロト開発"></a>8. 不動産会社向け新規サービスの検討・プロト開発</h3><p>私たちは、日本の防災力・事業継続力を底上げする新規事業の全体推進支援を行っています。その一環として、フューチャー内部も新規サービスの検討を進めており、インターンシップでは下記2つのどちらかを実施していただきたいと考えています。</p><ol><li><strong>新規サービスの機能提案・開発</strong><ul><li>現在想定している新規サービスに必要な機能を提案し、実際に開発まで行っていただきます。</li></ul></li><li><strong>新規サービスで未検討のアイディアを深堀り、プロト作成</strong><ul><li>新規サービスのアイディアの深掘りと必要な機能の提案を行ったのち、実際に開発まで行っていただきます。</li></ul></li></ol><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・フロントエンド開発経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・新規サービス開発に興味がある方<br>・Vue.js利用経験</td></tr><tr><td>募集人数</td><td>1名</td></tr><tr><td>こんな人にオススメ</td><td>・サービス開発に興味がある方<br>・プロダクトマネージャーに興味がある方</td></tr></tbody></table></div><h3 id="9-ユーザーと企業をつなぐ物流コールセンターを支える仕組み・システム化考案"><a href="#9-ユーザーと企業をつなぐ物流コールセンターを支える仕組み・システム化考案" class="headerlink" title="9. ユーザーと企業をつなぐ物流コールセンターを支える仕組み・システム化考案"></a>9. ユーザーと企業をつなぐ物流コールセンターを支える仕組み・システム化考案</h3><p>実現したい価値から逆算し、それを成し遂げる業務・要素を考え、システムの形につながる。非機能要件を抽出・立案し、導出した非機能要件よりインフラの特定部分の構成立案を行います。システム企画～実装に至るまでの流れ、意思決定プロセスの掴み方・泳ぎ方を知ると共にシステムアーキテクチャ構想の１タスクと、顧客価値との関連を体験し、Futureで自分が働くことの意義も感じて貰えます。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・間違ってて全然いいので思ったことを発言できること<br>・IPAの<a href="https://www.ipa.go.jp/files/000004568.pdf">この資料</a>を読了すること</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・企画から実装までに興味がある方<br>・非機能要件の作り込みに興味がある方</td></tr><tr><td>募集人数</td><td>2名</td></tr><tr><td>こんな人にオススメ</td><td>・経営とITの両方どりしたい方<br>・ミッションクリティカルなシステムの作り方を知りたい方<br>・チームでみんなの意見を吸い上げ洗練させていく過程に興味がある方</td></tr></tbody></table></div><h3 id="10-プロパンガス配送計画の最適化に向けた数値データ解析"><a href="#10-プロパンガス配送計画の最適化に向けた数値データ解析" class="headerlink" title="10. プロパンガス配送計画の最適化に向けた数値データ解析"></a>10. プロパンガス配送計画の最適化に向けた数値データ解析</h3><p>大手プロパンガス供給会社の配送員の仕事の効率化に取り組みます。現行システムで課題となっていた交換頻度や変動の予測精度を改善するのが我々のミッションです。新たなIoTデバイスを用いたビッグデータ解析を行うことにより、最適な配送計画を立案できるようなDX化にチャレンジしてもらいます。ビッグデータ解析やIoTに興味のある方におすすめです。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Git利用経験<br>・Go言語に興味がある方<br>・バックエンド開発に興味のある方</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・AWS利用経験<br>・Dockerを用いた開発経験<br>・基本的なLinuxコマンドの操作経験</td></tr><tr><td>募集人数</td><td>1名</td></tr><tr><td>こんな人にオススメ</td><td>・何がDXで何が普通のITか違いを知りたい方<br>・Go言語でバッチ処理を書きたい方</td></tr></tbody></table></div><p>プロパンガス業界を知らない方（都市ガスユーザーの方）も歓迎です。ややマニアックかもしれませんが、業界記事について知りたい方は<a href="https://future-architect.github.io/articles/20220519a/">こちら</a>も参照ください。</p><h3 id="11-プロパンガス設備点検の管理アプリケーション開発"><a href="#11-プロパンガス設備点検の管理アプリケーション開発" class="headerlink" title="11. プロパンガス設備点検の管理アプリケーション開発"></a>11. プロパンガス設備点検の管理アプリケーション開発</h3><p>大手プロパンガス供給会社の保安点検員の仕事を効率化する、アプリケーションの開発に取り組みます。ガスの安全性担保というミッションクリティカルなシステムをより確実に、ミスなく行うためのスマホアプリの開発に挑戦していただきます。ガス業界のDX化を担うプロジェクトの一員として一緒に改革に取り組みましょう！</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Git利用経験<br>・Go言語に興味がある方<br>・大崎オフィスへ出社可能な方</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・AWS利用経験<br>・Docker利用経験<br>・モバイルアプリ開発経験</td></tr><tr><td>募集人数</td><td>1名</td></tr><tr><td>こんな人にオススメ</td><td>・Flutterでスマホアプリ開発をしたい方</td></tr></tbody></table></div><p>《特記事項》</p><ul><li>本コースでは期間中に大崎オフィスへの出社をお願いする予定です</li><li>遠方の方については一部期間もしくは全期間東京に滞在いただく可能性がありますのでご理解の上、ご応募をお願いします（宿泊費、交通費は社内規定に基づき支給）</li></ul><h3 id="12-機械学習プラットフォーム開発"><a href="#12-機械学習プラットフォーム開発" class="headerlink" title="12. 機械学習プラットフォーム開発"></a>12. 機械学習プラットフォーム開発</h3><p>現状オンプレで稼働している、AIチームが利用する機械学習プラットフォームをクラウドに移行（・併用）するため、クラウド環境上に機械学習モデル・システム開発のための環境を構築します。データ基盤、分析環境、学習環境、実験管理、CI/CD、MLパイプライン、などから範囲を決めて実施します。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・基本的なLinuxコマンドの操作経験<br>・Linuxサーバの構築・運用経験（プライベート可）</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・Git利用経験<br>・AWS（or GCP）利用経験<br>・Docker利用経験<br>・機械学習モデルの実装経験<br>・Kaggle等のコンペティション参加経験</td></tr><tr><td>募集人数</td><td>1-2名</td></tr><tr><td>こんな人にオススメ</td><td>・オンプレミス環境を触ってみたい方<br>・MLOpsに興味がある方</td></tr></tbody></table></div><h3 id="13-画像認識AIの開発"><a href="#13-画像認識AIの開発" class="headerlink" title="13. 画像認識AIの開発"></a>13. 画像認識AIの開発</h3><p>実案件のデータを対象に、画像分類・物体検出・セグメンテーション・画像生成等幅広い画像系のAI技術を駆使して、AIを活用した顧客の業務削減に取り組みます。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Pythonでの画像処理の経験<br>・TensorflowやPytorch等を用いたNN構築経験<br>・論文を読んでNNなどの実装ができること<br>・基本的なLinuxコマンドの操作経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・Git利用経験<br>・Kaggle等のコンペティション参加経験<br>・Docker利用経験</td></tr><tr><td>募集人数</td><td>1名</td></tr><tr><td>こんな人にオススメ</td><td>・とにかく画像処理の実案件に関わりたい方<br></td></tr></tbody></table></div><h3 id="14-ヘルスケアアプリの開発"><a href="#14-ヘルスケアアプリの開発" class="headerlink" title="14. ヘルスケアアプリの開発"></a>14. ヘルスケアアプリの開発</h3><p><a href="https://note.future.co.jp/n/n8b57d4bf4604">ビジネスイノベーション事業</a>でヘルスケアサービス開発を行います。展開する生活者・患者やその家族といったtoC向けのアプリを開発。看護や介護、あるいは健康維持が必要な高齢者の状態をモニタリングできて安心を提供するための仕組みづくりです。ウェアラブルデバイス等を有効活用します。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>フロントエンド、バックエンド開発経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>AWS利用経験</td></tr><tr><td>募集人数</td><td>2名</td></tr><tr><td>こんな人にオススメ</td><td>・ウェアラブルアプリの開発に携わりたい方<br>・新規事業に興味がある方<br></td></tr></tbody></table></div><h2 id="2021年の参加者の声"><a href="#2021年の参加者の声" class="headerlink" title="2021年の参加者の声"></a>2021年の参加者の声</h2><p>インターンシップに参加していただいた方に、体験記を寄稿いただいていますので紹介します。概ね、「リモートワークであっても密度が濃い」、「普段の個人開発ではほとんど発生しない、コミュニケーションの部分の学びがある」、「フューチャーのブログ文化に触れることができた」、「参加者同士の交流が貴重」、「タスクの割り当てが親切で、成長を実感できた」などと評価いただいています（私がこう抜粋するとどうしても怪しいので…、ぜひインターン生の記事を読んでいただけるとです）。</p><ul><li>2021年<ul><li><a href="https://future-architect.github.io/articles/20211019a/">Engineer Camp: Python の AST モジュールを使ってクラス構造を可視化する </a></li><li><a href="https://future-architect.github.io/articles/20211018a/">Engineer Camp: スマートファクトリーでの学び </a></li><li><a href="https://future-architect.github.io/articles/20210922a/">Engineer Camp: IoTプラットフォームに参加しました！</a></li></ul></li><li>2020年<ul><li><a href="https://future-architect.github.io/articles/20200921/">フューチャーのインターンEngineer Camp2020（モビリティサービスプラットフォーム）に参加した話</a></li><li><a href="https://future-architect.github.io/articles/20200920/">Engineer Camp 2020（スマートファクトリー） 参加記 </a></li><li><a href="https://future-architect.github.io/articles/20200919/">Engineer Camp2020でSQLフォーマッタを開発しました</a></li><li><a href="https://future-architect.github.io/articles/20200913/">フューチャーの2020 夏季インターンに参加してみた</a></li></ul></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>わたちたちフューチャー社員一同、良いインターンになるよう工夫を凝らしたいと思っております。</p><p>興味がある学生の皆さん。なにはともあれマイページにエントリーをお願いします！</p><p>たくさんのご応募をお待ちしています！　最後まで読んでいただいてありがとうございました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/">インターン</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B32022/">インターン2022</category>
      
      
      <comments>https://future-architect.github.io/articles/20220606b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RDSの自動再起動によるインフラコストの悲劇</title>
      <link>https://future-architect.github.io/articles/20220606a/</link>
      <guid>https://future-architect.github.io/articles/20220606a/</guid>
      <pubDate>Sun, 05 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220606a/catch-g298cbbc5a_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;435&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220606a/catch-g298cbbc5a_640.jpg" alt="" width="640" height="435"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニット所属、金欠コンサルタントの藤井です。<br>最近買ってよかったものは玄関に設置できる宅配ボックスです。</p><p><a href="/articles/20220601a/">失敗談連載2022</a> 4日目のこの記事では、クラウドインフラにはつきものの、インフラコストについての失敗談をご紹介します。<br>ぜひご一読いただき、私の屍を乗り越えていく事で、悲劇の発生を未然に防いでいただければと思います。<br>（一部記事にするにあたり、経緯を改変している部分があります。ご容赦ください）</p><h2 id="RDSについて"><a href="#RDSについて" class="headerlink" title="RDSについて"></a>RDSについて</h2><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>皆さん、RDSはお好きでしょうか。私は<strong>基本的に</strong>好きです。Amazon <strong>R</strong>elational <strong>D</strong>atabase <strong>S</strong>ervice、略してRDS。その名の通りAWSが提供する、RDBを運用するためのマネージド型サービスです。</p><p>高い可用性・耐久性・スケーラビリティを誇るサービスであるため、サービスの管理者はDBサーバそのものをほとんど意識をすることなくサービスを提供することが可能となります。</p><p>そんなRDSですが、二つだけどうしても私が好きになれない点があるので、紹介させてください。</p><h3 id="私が好きになれない点"><a href="#私が好きになれない点" class="headerlink" title="私が好きになれない点"></a>私が好きになれない点</h3><h4 id="単純に利用料金が高い"><a href="#単純に利用料金が高い" class="headerlink" title="単純に利用料金が高い"></a>単純に利用料金が高い</h4><p>前述のとおり、RDSはDBサーバの構築・運用において非常に便利なサービスを提供してくれます。EC2へのRDBMSのインストールから、ストレージ管理、障害時のフェイルオーバー、等と言った作業を管理者が実施する場合、人的コストもかなりかかってしまいます。</p><p>そのため、ある程度利用料金が高くなるのは仕方がないことではあります。</p><p>ご参考までに2022年5月時点での東京リージョンにおけるRDS<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>（シングルAZ・Aurora PostgreSQL互換エディション・オンデマンドインスタンス）とEC2<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>（オンデマンド・OSはLinux）の料金比較をいくつかのインスタンスタイプについて以下に掲載します。</p><div class="scroll"><table><thead><tr><th>インスタンスタイプ</th><th>RDSの時間あたりの料金 (USD)</th><th>EC2の時間あたりの料金 (USD)</th><th>RDSコスト/EC2コスト</th></tr></thead><tbody><tr><td>t4g.medium</td><td>0.113</td><td>0.0432</td><td>2.62</td></tr><tr><td>t4g.large</td><td>0.225</td><td>0.0864</td><td>2.60</td></tr><tr><td>t3.medium</td><td>0.125</td><td>0.0544</td><td>2.30</td></tr><tr><td>t3.large</td><td>0.250</td><td>0.1088</td><td>2.30</td></tr><tr><td>r6g.large</td><td>0.313</td><td>0.1216</td><td>2.57</td></tr><tr><td>r6g.xlarge</td><td>0.627</td><td>0.2432</td><td>2.58</td></tr><tr><td>r5.large</td><td>0.350</td><td>0.152</td><td>2.30</td></tr><tr><td>r5.xlarge</td><td>0.700</td><td>0.304</td><td>2.30</td></tr></tbody></table></div><p>だいたいRDSはEC2の2～3倍のコストがかかるようです。（ストレージ・通信等は除く）<br>もちろんリザーブドインスタンスを用いたり、<strong>不要な時間帯は停止する</strong>等で節約することは可能です。<br>基本的な利用料金が高いからこそ、不要な課金をしないよう管理する必要があります。</p><h4 id="7日間しか停止できない"><a href="#7日間しか停止できない" class="headerlink" title="7日間しか停止できない"></a>7日間しか停止できない</h4><p><strong>罠です</strong>。記載の通り、RDSは7日間しか停止することができません。<br>例えばこの記事が公開される2022年6月6日にRDSを停止した場合、7日後の6月13日に自動的に再起動されます。<br>もちろん停止時には以下のように停止可能期間について案内されるため、管理者はこの仕様について把握することができます。<br><img src="/images/20220606a/image.png" alt="image.png" width="529" height="214" loading="lazy"></p><p>この仕様について、公式ドキュメント<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>には</p><blockquote><p>DB インスタンスは最大 7 日間停止できます。7 日後に DB インスタンスを手動で起動しなかった場合、DB インスタンスは自動的に起動されるため、必要なメンテナンス更新が遅れることはありません。</p></blockquote><p>と記載されていますが、個人的には「最大7日間しか停止できません」と書くべきだと思います。7日後に自動で再起動される理由としては、ハードウェアやRDBMS等のメンテナンスにインスタンスが遅れないようにするため、とのことです。</p><p>2022年5月時点でRDSを7日間以上停止し続ける方法は存在せず、Lambda等で定期的に再起動・停止をスケジューリングする<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>等の方法でしか長期的なRDSの停止はできないようです。</p><h2 id="失敗談"><a href="#失敗談" class="headerlink" title="失敗談"></a>失敗談</h2><p>ここまでの記載内容で私が何をやらかしたか、予想が付いている方も居られるかとは思います。</p><p>検証用に立ち上げ、不要になったため停止したDBが7日後に自動で再起動・利用料金が発生してしまったのです。</p><p>しかも必要以上に大きなインスタンスサイズで構築してしまっていたため、発生した余分コストは高額でした。</p><h3 id="悲劇の発生経緯"><a href="#悲劇の発生経緯" class="headerlink" title="悲劇の発生経緯"></a>悲劇の発生経緯</h3><ol><li>EC2との接続検証用にRDSのインスタンスを1つ（すぐ落とす想定だったため、インスタンスサイズはxlargeを選択）立ち上げ、無事検証を終えました。</li><li>検証が完了したため、このRDSインスタンスは不要となりました。しかし追加で検証が必要になることが予想されるため、ここではインスタンスの削除ではなく停止を選択しました。</li><li>結果として、追加検証は不要であったため、結局インスタンスが再利用されることはありませんでした。</li><li>停止から7日後、RDSは自動でインスタンスを再起動しました。<ul><li>このとき、私の頭には既にこのインスタンスの記憶はありません。</li><li>RDS周りの検証は完了しているため、RDSのマネジメントコンソールにアクセスする理由も無いので、インスタンスの再起動に気づくことはありません。</li></ul></li><li>各種構築が完了し、最後に念のため請求書を確認したところ、想定外の請求が発生している事に気づきます。<ul><li>明細を見ると、よくわからないRDSインスタンスについての請求が・・・</li></ul></li></ol><p>おおよそ上記のような流れで悲劇は発生・検知されました。<br>検知後の対処にも2やらかしぐらいあるのですが、こちらは技術話では無いのでここでは割愛します。</p><h3 id="どうすればよかったのか"><a href="#どうすればよかったのか" class="headerlink" title="どうすればよかったのか"></a>どうすればよかったのか</h3><p>ここまで失敗談について記載しましたが、ではどうすればこの悲劇は回避できたのでしょうか。<br>この悲劇に限らず、大体の事象において以下2つの対応が重要と考えます。</p><ul><li>根本原因を取り除き、悲劇が発生しないようにする</li><li>事象を早期検知し、悲劇を発展させない</li></ul><h4 id="根本原因を取り除き、悲劇が発生しないようにする"><a href="#根本原因を取り除き、悲劇が発生しないようにする" class="headerlink" title="根本原因を取り除き、悲劇が発生しないようにする"></a>根本原因を取り除き、悲劇が発生しないようにする</h4><p>悲劇が発生しないよう、根本原因を排除することができれば悲しむ人は生まれません。</p><p>今回の悲劇に関しては、これはとても簡単で、<strong>RDSは停止せず、削除</strong>すればよいです。後で再利用することが予想される場合は、バックアップを取得した上でインスタンスはためらいなく削除してしまいましょう。</p><p>停止→再起動に比べるとバックアップからの復元の方が多少手間はかかりますが、確実に勝手に再起動されることはありません。バックアップもストレージ分のコストはかかりますが、Auroraの場合月額 0.023USD/GB<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup> と軽微です。</p><p>また、これはRDSに限らずですが、そもそもインスタンスサイズは必要最小限に設定しましょう。</p><h4 id="事象を早期検知し、悲劇を発展させない"><a href="#事象を早期検知し、悲劇を発展させない" class="headerlink" title="事象を早期検知し、悲劇を発展させない"></a>事象を早期検知し、悲劇を発展させない</h4><p>万一悲劇が発生してしまっても、早期に検知・食い止めることが出来れば最小限の悲しみに抑えられます。</p><p>一方検知が遅れれば利用料金と共に悲劇は発展し続けます。</p><p>詳細はこの記事には記載しません（いつか別記事として書くかも）が、早期検知には以下のような対策が考えられます。</p><ul><li><strong>システムで検知</strong><ul><li>AWS Budget、AWSコスト異常検出を適切に設定し、想定外の請求が発生した際に検知・通知する</li><li>停止中のRDSがあれば検知・再起動までの期間を通知するLambdaを作成・定期実行する</li></ul></li><li><strong>運用で検知（検知システムの構築ができない場合）</strong><ul><li>定期的（日次・週次など）に請求額を確認する。可能であればリソース毎の請求内容も確認する</li><li>定期的（日次・週次など）にRDSマネジメントコンソールを確認し、想定外インスタンスが存在しないことを確認する</li></ul></li></ul><p>なお、利用サービスに種類や検証などの用途に問わず、利用金額の通知周りについては、AWSアカウントを作成の初期段階で常に設定を行っておくとよいでしょう。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>私の失敗談は以上です。</p><p>インフラコストにまつわる悲劇は様々な原因で起こり得るものです。今回の内容はRDSの、それも自動再起動に特化した内容ではありましたが、対策についての考え方は様々な悲劇に共通するものです。</p><p>どうすれば悲劇を予防できるのか、早期検知できるのかについて考え続け、少しでも悲劇を抑えられると良いと思います。</p><p><a href="/articles/20220601a/">失敗談連載2022</a> 明日は辻さんの<a href="/articles/20220607a/">AWS Lambdaの初期化処理と初期化タイミングの考慮不足によるはまりどころ</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">Amazon RDS の料金 <a href="https://aws.amazon.com/jp/rds/pricing/">https://aws.amazon.com/jp/rds/pricing/</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">Amazon EC2 の料金 <a href="https://aws.amazon.com/jp/ec2/pricing/">https://aws.amazon.com/jp/ec2/pricing/</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">一時的に Amazon RDS DB インスタンスを停止する <a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/USER_StopInstance.html">https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/USER_StopInstance.html</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">Amazon RDS インスタンスを 7 日以上停止する方法を教えて下さい。 <a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/rds-stop-seven-days/">https://aws.amazon.com/jp/premiumsupport/knowledge-center/rds-stop-seven-days/</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;">Amazon Aurora の料金 <a href="https://aws.amazon.com/jp/rds/aurora/pricing/">https://aws.amazon.com/jp/rds/aurora/pricing/</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      <category domain="https://future-architect.github.io/tags/RDS/">RDS</category>
      
      
      <comments>https://future-architect.github.io/articles/20220606a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go言語で定数として扱いたいmapを毎回アロケートさせて性能劣化した話</title>
      <link>https://future-architect.github.io/articles/20220603a/</link>
      <guid>https://future-architect.github.io/articles/20220603a/</guid>
      <pubDate>Thu, 02 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/articles/20220601a/">失敗談をテーマにした連載</a>の3本目です。</p><p>TIG DXユニットの原です。21年度4月に新卒で入社し、2年目となります。</p><p>参加しているプロジェクトで、数百万件のデータを処理する機能を担当したことがありました。</p><p>本記事はその際の失敗と、その失敗から得た経験を共有するため、執筆しました。</p><h1 id="内容のサマリ"><a href="#内容のサマリ" class="headerlink" title="内容のサマリ"></a>内容のサマリ</h1><ul><li>本来フィールドで宣言すべき定数的に扱いたい変数を、関数内で毎回生成しreturnしてしまったので呼び出す度に毎回アロケートが発生し性能劣化してしまった</li><li>Benchmark Test、Profiling、Escape Analysisでどういう挙動になってしまっていたか調べてみた</li></ul><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>本記事では、まずどのような状況であったかを説明し、どのような順番で問題を解決したかの順で説明します。</p><p>主にGoのテストとProfilingに関した内容です。</p><p>Goのテストについての関連記事として、<a href="/articles/20200601/">Goのテストに入門してみよう！</a>と<a href="/articles/20210812a/">Go 1.17のtesting新機能</a>があります。<br>ぜひ確認ください！</p><h2 id="問題状況"><a href="#問題状況" class="headerlink" title="問題状況"></a>問題状況</h2><p>処理する数百件のデータについて、マスタ情報から情報を引き出す必要がありました。</p><p>その際に、マスタデータをDBに置いとくとDBへの接続が発生するため、map型でハードコーディングすることにしました。</p><p>そして、他の個所でマスタ情報の変更ができないようにGetterを作りました。<br>(Go言語では、map型はconstができないため、Getterにするしかありませんでした、、)</p><p>それで最初に作成したコードが下記のような感じです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> master</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MasterRecord <span class="keyword">struct</span> &#123;</span><br><span class="line">Double <span class="type">string</span></span><br><span class="line">Triple <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example code of problem setting</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetMaster1</span><span class="params">()</span></span> <span class="keyword">map</span>[<span class="type">int</span>]MasterRecord &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">map</span>[<span class="type">int</span>]MasterRecord&#123;</span><br><span class="line"><span class="number">0</span>:   &#123;Double: <span class="string">&quot;００&quot;</span>, Triple: <span class="string">&quot;０００&quot;</span>&#125;,</span><br><span class="line"><span class="number">1</span>:   &#123;Double: <span class="string">&quot;１１&quot;</span>, Triple: <span class="string">&quot;１１１&quot;</span>&#125;,</span><br><span class="line">...</span><br><span class="line"><span class="number">498</span>: &#123;Double: <span class="string">&quot;４９８４９８&quot;</span>, Triple: <span class="string">&quot;４９８４９８４９８&quot;</span>&#125;,</span><br><span class="line"><span class="number">499</span>: &#123;Double: <span class="string">&quot;４９９４９９&quot;</span>, Triple: <span class="string">&quot;４９９４９９４９９&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>その結果、数百件のデータを処理するためには、数時間がかかる性能問題が発生しました。</p><h2 id="問題箇所の特定"><a href="#問題箇所の特定" class="headerlink" title="問題箇所の特定"></a>問題箇所の特定</h2><p>最初は、問題個所の特定ができなかったため、問題の箇所を特定するために、機能ごとの<code>Benchmark Test</code>を書くことにしました。</p><h3 id="Benchmark-Test"><a href="#Benchmark-Test" class="headerlink" title="Benchmark Test"></a>Benchmark Test</h3><p>Go言語では、テスト作成の際に性能の観点でのテストができる<code>Benchmark Test</code>を提供しています。<br><code>Benchmark Test</code>は、<code>*testing.B</code>の引数を持つ<code>Benchmark</code>で始まるテストメソッドを作ることで作成できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> master_test</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment">// BenchmarkGetMaster Benchmark Test for GetMaster1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkGetMaster1</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">master.GetMaster1()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Benchmark-Test-Result"><a href="#Benchmark-Test-Result" class="headerlink" title="Benchmark Test Result"></a>Benchmark Test Result</h3><p>テストの実行は<code>-bench</code>オプションと<code>-benchmem</code>つけてテストを実行するだけでできます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -bench . -benchmem playground/master</span><br><span class="line">goos: windows</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: playground/master</span><br><span class="line">cpu: Intel(R) Core(TM) i7-5700HQ CPU @ 2.70GHz</span><br><span class="line">...</span><br><span class="line">BenchmarkGetMaster1</span><br><span class="line">BenchmarkGetMaster1-8               5713            207556 ns/op          210712 B/op       1021 allocs/op</span><br><span class="line">...</span><br><span class="line">ok      playground/master       3.911s</span><br></pre></td></tr></table></figure><p>上記のテスト結果を見ると、BenchmarkGetMasterを<code>5713</code>反復したら、平均的に<code>207556 ns/op</code>の実行速度と<code>210712 B/op</code>・<code>1021 allocs/op</code>のメモリアロケーションが発生していることが分かります。</p><p>ほかの機能と比較して、実行速度が顕著に遅かったため、マスタデータのGetterが性能問題の原因であると特定できました。そしてその原因は、想定外の大量のメモリアロケーションが発生しているからだと推測できます。</p><h2 id="メモリアロケーションの原因特定"><a href="#メモリアロケーションの原因特定" class="headerlink" title="メモリアロケーションの原因特定"></a>メモリアロケーションの原因特定</h2><p>メモリアロケーションの原因を特定するためには、<code>Profiling</code>と<code>Escape Analysis</code>を利用しました。</p><h3 id="Profiling"><a href="#Profiling" class="headerlink" title="Profiling"></a>Profiling</h3><p>Go言語では、標準的にProfiling機能提供しています。Profilingは<code>-cpuprofile</code>と<code>-memprofile</code>オプションを用いてできます。</p><h4 id="Profiling-Test-Code"><a href="#Profiling-Test-Code" class="headerlink" title="Profiling Test Code"></a>Profiling Test Code</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -cpuprofile cpu.prof -memprofile mem.prof -bench . -benchmem playground/master</span><br><span class="line">goos: windows</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: playground/master</span><br><span class="line">cpu: Intel(R) Core(TM) i7-5700HQ CPU @ 2.70GHz</span><br><span class="line">...</span><br><span class="line">BenchmarkGetMaster1</span><br><span class="line">BenchmarkGetMaster1-8               5713            207556 ns/op          210712 B/op       1021 allocs/op</span><br><span class="line">...</span><br><span class="line">PASS</span><br><span class="line">ok      playground/master       3.911s</span><br></pre></td></tr></table></figure><h4 id="Profiling結果の確認"><a href="#Profiling結果の確認" class="headerlink" title="Profiling結果の確認"></a>Profiling結果の確認</h4><p><code>-cpuprofile</code>では、CPUの処理時間ベースのProfilingが、<code>-memprofile</code>メモリベースのProfilingができます。その結果は<code>go tool pprof</code>コマンドで確認できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go tool pprof -http :8080 cpu.prof</span><br><span class="line">Serving web UI on http://localhost:8080</span><br></pre></td></tr></table></figure><p>すると、下記のようにProfilingの結果を確認できます。</p><img src="/images/20220603a/image.png" alt="プロファイル結果" width="1200" height="588" loading="lazy"><p>私が想像したのは、固定のmap型のデータを返すような単純な処理図を予測していましたが、ものすごく複雑な結果を得ました。</p><h3 id="Escape-Analysis"><a href="#Escape-Analysis" class="headerlink" title="Escape Analysis"></a>Escape Analysis</h3><p>なんでこんなに複雑になったかを把握するため、<code>Escape Analysis</code>を適応してみました。<code>Escape Analysis</code>は、<code>go build</code>する際に<code>-gcflags &#39;-m&#39;</code>オプションを追加することでできます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ go build -gcflags <span class="string">&#x27;-m&#x27;</span> master/mater1.go</span><br><span class="line"><span class="comment"># command-line-arguments</span></span><br><span class="line">master\mater1.go:4:34: map[int]map[string]string&#123;...&#125; escapes to heap</span><br><span class="line">master\mater1.go:5:8: map[string]string&#123;...&#125; escapes to heap</span><br><span class="line">master\mater1.go:6:8: map[string]string&#123;...&#125; escapes to heap</span><br><span class="line">...</span><br><span class="line">master\mater1.go:503:8: map[string]string&#123;...&#125; escapes to heap</span><br><span class="line">master\mater1.go:504:8: map[string]string&#123;...&#125; escapes to heap</span><br></pre></td></tr></table></figure><p>その結果、GetterをするたびにHeapメモリにエスケープが発生していることが分かりました。すなわち、Getterが呼ばれるたびに、mapデータを作っていたわけです。</p><h2 id="問題の解決"><a href="#問題の解決" class="headerlink" title="問題の解決"></a>問題の解決</h2><p>Getterが呼ばれるたびに、mapを生成することが問題であるため、mapデータをパッケージ変数として定義し、Getterではその変数を返すようにすることで、mapの再生成は抑えることができました。</p><p>その結果最初数時間かかる数百万件データの処理速度も、数十秒レベルで終わらせることができました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> master</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="type">int</span>]MasterRecord&#123;</span><br><span class="line"><span class="number">0</span>:   &#123;Double: <span class="string">&quot;００&quot;</span>, Triple: <span class="string">&quot;０００&quot;</span>&#125;,</span><br><span class="line"><span class="number">1</span>:   &#123;Double: <span class="string">&quot;１１&quot;</span>, Triple: <span class="string">&quot;１１１&quot;</span>&#125;,</span><br><span class="line">...</span><br><span class="line"><span class="number">498</span>: &#123;Double: <span class="string">&quot;４９８４９８&quot;</span>, Triple: <span class="string">&quot;４９８４９８４９８&quot;</span>&#125;,</span><br><span class="line"><span class="number">499</span>: &#123;Double: <span class="string">&quot;４９９４９９&quot;</span>, Triple: <span class="string">&quot;４９９４９９４９９&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetMaster2</span><span class="params">()</span></span> <span class="keyword">map</span>[<span class="type">int</span>]MasterRecord &#123;</span><br><span class="line"><span class="keyword">return</span> m</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>もとの変数mが直接呼び出し元に渡るため、呼び出し元でmapを直接操作して書き換えると、全体に影響を受けます。これを避けるために、アクセスをキー指定必須にするといったことも検討できると思います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GetMaster2() は非公開のみとし、ID指定の関数のみパッケージエクスポートする</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetMasterByID</span><span class="params">(id <span class="type">string</span>)</span></span> MasterRecord &#123;</span><br><span class="line">  <span class="keyword">return</span> m[id]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今回の要件ですとマスタ（map）を駆動に処理をしたい処理があったこと。トレードオフはあるものの、書き換えはコードレビューで担保することとし、GetMaster2()方式で対処しました。</p><h4 id="比較"><a href="#比較" class="headerlink" title="比較"></a>比較</h4><p>Getterでmapデータを生成していた<code>GetMaster1</code>と、パッケージ変数を返している<code>GetMaster2</code>を比較してみました。</p><h5 id="GetMaster1とGetMaster2のBenchmark-Test結果"><a href="#GetMaster1とGetMaster2のBenchmark-Test結果" class="headerlink" title="GetMaster1とGetMaster2のBenchmark Test結果"></a>GetMaster1とGetMaster2のBenchmark Test結果</h5><p>その結果は明らかで、パッケージ変数を返している<code>GetMaster2</code>ではメモリアロケーションが発生してなく、処理速度も数十万倍速くなりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -cpuprofile cpu.prof -memprofile mem.prof -bench . -benchmem playground/master</span><br><span class="line">goos: windows</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: playground/master</span><br><span class="line">cpu: Intel(R) Core(TM) i7-5700HQ CPU @ 2.70GHz</span><br><span class="line">BenchmarkGetMaster1</span><br><span class="line">BenchmarkGetMaster1-8               5172            206772 ns/op          210720 B/op       1021 allocs/op</span><br><span class="line">BenchmarkGetMaster2</span><br><span class="line">BenchmarkGetMaster2-8           1000000000               0.2957 ns/op          0 B/op          0 allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok      playground/master       1.639s</span><br></pre></td></tr></table></figure><p>グラフで比較すると下記のような感じです！</p><img src="/images/20220603a/chart_(1).png" alt="性能比較" width="713" height="498" loading="lazy"><h5 id="GetMaster2のProfiling結果"><a href="#GetMaster2のProfiling結果" class="headerlink" title="GetMaster2のProfiling結果"></a>GetMaster2のProfiling結果</h5><p><code>GetMaster1</code>と比較してみると、ものすごく単純な処理図になっていることが確認できます。</p><img src="/images/20220603a/image_2.png" alt="プロファイル結果" width="1200" height="587" loading="lazy"><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>まとめると、<strong>Go言語ではmap型は基本Heapメモリにエスケープするため、使う際には注意が必要である</strong>になります。</p><p>Go言語では、Benchmark TestやProfiling、Escape Analysisを使うことで性能問題の原因の調査ができるため、みなさまも性能問題に遭遇したらご活用してください！</p><p>次は藤井さんの<a href="http://articles/20220606a/">RDSの自動再起動によるインフラコストの悲劇</a>です。</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><ul><li><a href="https://pkg.go.dev/cmd/go/internal/test">https://pkg.go.dev/cmd/go/internal/test</a><ul><li>Goのテストオプションに参考になる記事です</li></ul></li><li><a href="https://go.dev/blog/pprof">https://go.dev/blog/pprof</a><ul><li>GoのProfilingに参考になる記事です</li></ul></li><li><a href="https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/">https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/</a><ul><li>Goのメモリアロケーションの理解に参考になる記事です</li></ul></li><li><a href="https://hnakamur.github.io/blog/2018/01/30/go-heap-allocations/">https://hnakamur.github.io/blog/2018/01/30/go-heap-allocations/</a><ul><li>上記の英語記事の日本語レビュー記事です</li></ul></li><li><a href="https://medium.com/eureka-engineering/understanding-allocations-in-go-stack-heap-memory-9a2631b5035d">https://medium.com/eureka-engineering/understanding-allocations-in-go-stack-heap-memory-9a2631b5035d</a><ul><li>HeapメモリとStackメモリの理解に参考になる記事です</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%80%A7%E8%83%BD%E6%A4%9C%E8%A8%BC/">性能検証</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%88/">トラブルシュート</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%97%E3%83%AD%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AA%E3%83%B3%E3%82%B0/">プロファイリング</category>
      
      <category domain="https://future-architect.github.io/tags/map/">map</category>
      
      
      <comments>https://future-architect.github.io/articles/20220603a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>H&amp;M Personalized Fashion Recommendations 参加記 (46th/2952)</title>
      <link>https://future-architect.github.io/articles/20220602b/</link>
      <guid>https://future-architect.github.io/articles/20220602b/</guid>
      <pubDate>Wed, 01 Jun 2022 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、Strategic AI</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Strategic AI Group所属の金子です。普段は推薦に関連する実装やデータ分析を行っています。</p><p>先日Kaggleで開催された<a href="https://www.kaggle.com/competitions/h-and-m-personalized-fashion-recommendations/overview">H&amp;M Personalized Fashion Recommendations</a>コンペに単独で参加し、2952チーム中46位をとりました。</p><p>今回の参加記では以下の内容を紹介します。</p><ul><li>H&amp;Mコンペ概要</li><li>H&amp;Mコンペの難しいところ</li><li>解法のサマリ</li><li>解放の工夫</li><li>次に取り組みたいこと</li><li>感想</li></ul><h1 id="H-amp-Mコンペ概要"><a href="#H-amp-Mコンペ概要" class="headerlink" title="H&amp;Mコンペ概要"></a>H&amp;Mコンペ概要</h1><p>本コンペはH&amp;Mのオンライン・オフラインの行動履歴をもとに、次にユーザーが購買する商品をレコメンドするコンペティションでした。提供されたデータの期間は2018-09-20～2020-09-22の約二年間で、このデータをもとに2020/9/23～2020/09/29のユーザーの行動を予測しました。予測対象のユーザーは約137万人のユーザーで、これらのユーザーに対し予測対象の商品(=article)は約10万点の中から12点を選び、MAP@12で評価しました。データの種類をユーザー、アイテム、インタラクションの三つに分類すると、それぞれ以下のようなデータがありました。</p><ul><li>ユーザー: 年齢、ハッシュ化された住所、会員登録の状況</li><li>アイテム: 商品のカテゴリ、色・模様、商品の説明文(英語)、商品画像</li><li>インタラクション: 日付、オンラインかオフラインか</li></ul><h1 id="H-amp-Mコンペの難しいところ"><a href="#H-amp-Mコンペの難しいところ" class="headerlink" title="H&amp;Mコンペの難しいところ"></a>H&amp;Mコンペの難しいところ</h1><p>今回のコンペで難しかった点について、レコメンド一般的な課題、このコンペ特有の課題の順に説明していきます。</p><h2 id="レコメンド一般的な問題"><a href="#レコメンド一般的な問題" class="headerlink" title="レコメンド一般的な問題"></a>レコメンド一般的な問題</h2><p>レコメンド一般的な課題として、暗黙的(=implicit)なデータであること、大量のデータを高速にさばく必要があること、コールドスタートに対応する必要があることがあります。</p><h3 id="implicit-なデータ"><a href="#implicit-なデータ" class="headerlink" title="implicit なデータ"></a>implicit なデータ</h3><p>implicitなデータとは、ユーザーから明示的(=explicit)なフィードバックが与えられていないデータです。それぞれ例を挙げるなら、explicitは星の数やいいねなどユーザーの反応がついている状態、implicitはユーザーが見たという情報だけがあるような状態です。explicitなデータではユーザーの好みが数値化されているので、これを直接予測し評価することができますが、implicitなデータではユーザーが何かしらの行動を起こしたということが分かるのみで、実際にユーザーが気に入ったかどうかは分からないという問題があります。また、ユーザーが行動を起こさなかったデータはない場合が多く、閲覧・購入したデータを二値分類の正例にするのであれば、負例は上手く生成する必要があるのも問題です。</p><h3 id="大量の商品xユーザー、履歴データ。"><a href="#大量の商品xユーザー、履歴データ。" class="headerlink" title="大量の商品xユーザー、履歴データ。"></a>大量の商品xユーザー、履歴データ。</h3><p>今回のコンペは137万人のユーザーに対し、10万の商品の候補からレコメンドを行う必要がありました。また、履歴については2年間で約3000万件あり、これをうまく処理することが求められました。レコメンドはリアルタイムに予測を行う場合と、バッチ形式でまとめて予測するものがありますが、今回のコンペでは後者で時間もマシンリソースも無限でした。ただ、それでも全組み合わせを愚直に評価するのは難しく工夫が求められました。</p><h3 id="コールドスタート問題"><a href="#コールドスタート問題" class="headerlink" title="コールドスタート問題"></a>コールドスタート問題</h3><p>コールドスタートは履歴の少ないユーザー・アイテムに対して上手く予測ができない問題です。レコメンドは主にユーザーの行動履歴もとに予測を行う協調フィルタリング形式と、アイテム自身のカテゴリや画像といった情報を活用するコンテンツベースの手法に分類されます。前者の協調フィルタリングのアルゴリズムは大量にデータがあるアイテムやユーザーには上手く作用しますが、まだ履歴の少ないユーザーや新しく登録されたばかり・マイナーなアイテムには上手く予測できないという問題があります。</p><h2 id="コンペ特有の課題"><a href="#コンペ特有の課題" class="headerlink" title="コンペ特有の課題"></a>コンペ特有の課題</h2><p>コンペ特有の課題として、ユーザーの行動が散発的であること、繰り返しの購入パターンが強すぎることがありました。</p><h3 id="散発的な履歴"><a href="#散発的な履歴" class="headerlink" title="散発的な履歴"></a>散発的な履歴</h3><p>ユーザーの履歴を確認したところ、前回の履歴から数か月空いていることが多く、履歴があったのは似たようなズボン数種類だけ、と一部の種類のカテゴリにのみ行動があったケースが多くみられました。これはユーザーの気持ちになって考えると、ある程度買いたい種類の服を決めてからオンラインのサイトを見て欲しいものだけ買うケースが多かったからではないかと考えています。</p><h3 id="繰り返し購入の多さ"><a href="#繰り返し購入の多さ" class="headerlink" title="繰り返し購入の多さ"></a>繰り返し購入の多さ</h3><p>また、今回のコンペでは繰り返し商品を購入するパターンが強い傾向が見られました。例えば書籍などの推薦では一度購入した商品を再度推薦する意味はないのですが、今回のH&amp;Mでは同じ商品やその色違いを購入するケースが多くみられました。この点は自身が普段服をオンラインで買うときはサイズを間違えてもダメージの少ない靴下やシャツ等の消耗品ばかり買っているので予測はできていました。ただ、想像以上にスコアに対する比率が高く、以前購入した商品の再購入をとらえるのがコンペのカギとなっていました。</p><h1 id="解法のサマリ"><a href="#解法のサマリ" class="headerlink" title="解法のサマリ"></a>解法のサマリ</h1><p>今回私はこの問題に対し、候補を高速に絞り込むretrievalステージと精度よく予測を行うrankingステージの二段階で予測を行う<a href="https://research.google/pubs/pub48840/">two-tower model</a>を構築しました。解法については<a href="https://www.kaggle.com/competitions/h-and-m-personalized-fashion-recommendations/discussion/324205">kaggleのdiscussion</a>にも投稿したので、ここではサマリで割愛させていただきます。<br><img src="/images/20220602b/H&M_46th_solution_overview.drawio.png" alt="H&M_46th_solution_overview.drawio" width="811" height="531" loading="lazy"></p><h2 id="Retrieval-Stage"><a href="#Retrieval-Stage" class="headerlink" title="Retrieval Stage"></a>Retrieval Stage</h2><p>Retrieval Stageではarticleの画像や自然言語、カテゴリといった情報を、articleの性質を表すベクトル(=embedding)に変換し、ユーザーの行動履歴で学習を行う協調フィルタリングとコンテンツベースのハイブリッド手法を実装しました。ユーザーの行動履歴はこのembeddingの平均とし、ユーザーと候補のアイテムのembeddingの類似度を内積計算で計算することで、ユーザーの行動履歴に近い商品を高速に絞り込みました。検索対象のアイテムはユーザーが過去に購入したことのあるアイテムと、直近90日で履歴の数が多かったトップ20000のアイテムのうち、過去一週間で1回以上購入されている販売終了になっていないものに絞ることで実行速度と精度を上げました。</p><h2 id="Ranking-Stage"><a href="#Ranking-Stage" class="headerlink" title="Ranking Stage"></a>Ranking Stage</h2><p>Ranking Stageではユーザーの行動履歴とRetrival Stageで絞り込んだ商品の組み合わせについて、それぞれBERT等に用いられるattentionという技術を用いてより正確に相性を判定し精度を高めました。<br>この二つを組み合わせることで130万人のユーザーに対する予測をRTX3090でわずか20分のうちに予測し全体で46位に入ることができました。</p><h1 id="解法の工夫"><a href="#解法の工夫" class="headerlink" title="解法の工夫"></a>解法の工夫</h1><p>今回の課題で有効だった工夫について三点紹介します。</p><h2 id="Gumbel-Max-Trickを用いた効率的Negative-Hard-Sampling"><a href="#Gumbel-Max-Trickを用いた効率的Negative-Hard-Sampling" class="headerlink" title="Gumbel-Max Trickを用いた効率的Negative Hard Sampling"></a>Gumbel-Max Trickを用いた効率的Negative Hard Sampling</h2><p>二値問題のモデルを学習させる際、負例はある程度難しいものを選ぶと良いことが知られています。例えば[gensimのWord2Vec](<a href="https://radimrehurek.com/gensim/models/word2vec.html#gensim.models.word2vec.Word2Vec)%E3%81%A7%E3%81%AF%E5%8D%98%E8%AA%9E%E3%81%AE%E5%87%BA%E7%8F%BE%E7%A2%BA%E7%8E%87%E3%81%AE%CE%B1(%E9%80%9A%E5%B8%B8%E3%81%AF3/4)%E4%B9%97%E3%81%A7%E8%B2%A0%E4%BE%8B%E3%82%92%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%97%E3%81%BE%E3%81%99%E3%80%82">https://radimrehurek.com/gensim/models/word2vec.html#gensim.models.word2vec.Word2Vec)では単語の出現確率のα(通常は3/4)乗で負例をサンプリングします。</a><br>今回のデータでは予測日と対象のユーザーの年齢が分かっていました。そこでバッチごとにユーザーの年齢(10歳区切り)と予測日を統一し、予測する日から直近1週間における予測対象の年齢層の購入数top10000の割合からItem2Vec用の負例をサンプリングしました。</p><p>サンプリングの方法はGumbel-Max-Trickという手法を用いました。これはカテゴリカル分布から重複のない組み合わせをサンプリングする手法です。日ごと年齢層ごとにtop10000のarticleのIDと出現確率を入れた配列を用意し、それを用いて計算を行いました。</p><p>今回のItem2Vecの学習では負例の量と質が非常に重要でした。Word2Vecの負例の数は通常5~15付近ですが、今回のモデルでは負例の数を最大4096まで増やしました。負例の数を変えて学習させたところ、負例が4096個の時がLB0.020付近で、1024個の時がLB0.010付近、それより少なく質の低い負例ではあまり効率的に学習ができませんでした。</p><h2 id="ApproxNDCGLossベースによるランク学習"><a href="#ApproxNDCGLossベースによるランク学習" class="headerlink" title="ApproxNDCGLossベースによるランク学習"></a>ApproxNDCGLossベースによるランク学習</h2><p>Ranking StageにおけるTransformerの学習では<a href="https://www.tensorflow.org/ranking/api_docs/python/tfr/keras/losses/ApproxNDCGLoss">ApproxNDCGLoss</a>ベースのランク学習が有効でした。通常の二値分類ではユーザーが購入したかどうかをそれぞれ別々に計算するPointwiseの学習を行いますが、ApproxNDCGLossを用いた学習では一つの予測対象につき複数個のarticleを予測し、その順番を最適化するlistwiseな学習を行います。ApproxNDCGLossの実装は、予測値の差をsigmoid関数にかけることで微分可能な順位を計算し、その順位を用いてnDCGLossを計算します。私はこれをもとにnDCGの重み付けの部分を代わりに正例の順位差で計算するように改造しました。これが効いた原因は今回の予測は難しく、例えば128個サンプリングしても正例は平均して32位付近に予測されるので、nDCGによる重みづけが上手くいかず、代わりに順位差をそのまま使った方がよかったからだと推測しています。</p><h2 id="配列長を意識したattention計算の効率化"><a href="#配列長を意識したattention計算の効率化" class="headerlink" title="配列長を意識したattention計算の効率化"></a>配列長を意識したattention計算の効率化</h2><p>計算時間短縮のための工夫としてattentionの計算を大幅に高速化しました。通常のattentionではクエリの長さとターゲットの長さの積の計算量で行列計算を行います。ただ、行動履歴のようなデータは大抵が一桁二桁の長さで、ヘビーユーザーのみ三桁四桁の長さである場合が多いです。ただ、精度のためにヘビーユーザーに合わせた行列の大きさで計算を行うとかなり無駄な計算を行って非効率的になってしまいます。</p><p>そこで、クエリとターゲットの配列を一定の長さで分割し、計算を行うペアのみ部分的に計算を行うようにtf.tensor_scatter_nd系のメソッドを使ってTransformer Layerを設計することで、時間・空間計算量を大幅に削減しました。また、予測時は行動履歴の少ない順にユーザーを並べ、行動履歴の少ないユーザーの時はバッチサイズを大きくすることでさらに予測時間を短縮しました。</p><h1 id="次に取り組みたいこと"><a href="#次に取り組みたいこと" class="headerlink" title="次に取り組みたいこと"></a>次に取り組みたいこと</h1><p>今回のコンペのテーマでは取り組めませんでしたが、検討すると面白いと思うテーマについて個人的に述べていきたいと思います。</p><h2 id="セレンディピティの検討"><a href="#セレンディピティの検討" class="headerlink" title="セレンディピティの検討"></a>セレンディピティの検討</h2><p>今回のコンペは繰り返しの購入を当てることが有効で、それにうまく取り組めたチームが上位になっていました。一方で実際のレコメンドではユーザーにとって自明なレコメンドより、ユーザーにとって有用でかつ意外なアイテムを推薦することが重要な場合もあります。(セレンディピティといいます)実際には今回のH&amp;Mコンペのような指標のみではなく、本当に改善したい指標(ユーザーの満足度・売上)につながる指標も検討が必要と考えています。　</p><h2 id="ユーザー・アイテムセグメンテーションと分析"><a href="#ユーザー・アイテムセグメンテーションと分析" class="headerlink" title="ユーザー・アイテムセグメンテーションと分析"></a>ユーザー・アイテムセグメンテーションと分析</h2><p>今回はItem2Vecを推薦に用いましたが、ここで得られたベクトル(=embedding)を分析することで似たようなアイテム・ユーザーの傾向を分析することができます。embeddingを用いた分析の例は過去に<a href="https://future-architect.github.io/articles/20210901a/">医薬品副作用データベースから医薬品同士の関係を学習・評価・可視化する</a>や<a href="https://speakerdeck.com/nadare881/embeddingwoyong-itafen-xi-jian-suo-tui-jian-falseji-shu">embeddingを用いた分析・検索・推薦の技術</a>で紹介しましたが、これらの手法を用いることでレコメンドモデルから新たな示唆を得られる可能性があります。</p><h2 id="テーマ別推薦・検索との融合"><a href="#テーマ別推薦・検索との融合" class="headerlink" title="テーマ別推薦・検索との融合"></a>テーマ別推薦・検索との融合</h2><p>今回のコンペではユーザーに対して全アイテムの中からレコメンドを行っていました。実際にレコメンドを適用するとしたらサイトのトップページ、もしくはメルマガやアプリのプッシュ通知のような例が考えられます。しかしこのようなレコメンドから購入するというケースは少なく、ユーザーはキーワードで検索・もしくはカテゴリのページで探しながら商品を購入すると考えられます。</p><p>私は趣味でいろいろなECサイトのUIを眺めるのですが、カテゴリ・検索後の部分までパーソナライズできているサイトは少ないです。(ウィンドウを見て評価するショッピングをしています。)レコメンドは一方的に出して終わりではなく、ユーザーに気づきを与え、そこから興味を深堀りできるようインタラクティブに設計していくのがキモだと思っています。全商品からだけでなく、カテゴリ別のページや検索結果にもパーソナライズされたレコメンドを適用できるモデルの検討は実用上重要なテーマであると考えています。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>今回のコンペは画像・自然言語・カテゴリの詰まったログデータによるレコメンドコンペということで非常にワクワクしながら挑戦しました。ただ、今回のコンペはユーザーの購入間隔がばらばらかつ同じ商品の繰り返しの購入傾向が強いという性質からか画像や自然言語を用いたNNがあまり効かないタスクでした。私はEnd2EndのNNで勝つことにこだわったため、NNを用いた解法の中では非常に高いスコアを出せたものの、順位としては46位ともっと上を目指せたのになという後悔が残りました。このコンペからは良いレコメンドには人のロジックとMLのアルゴリズムを上手く融合させることのできる設計が必要と学びました。それを実現するための仕組みを引き続き研究していきたいと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%8F%82%E6%88%A6%E8%A8%98/">参戦記</category>
      
      <category domain="https://future-architect.github.io/tags/Kaggle/">Kaggle</category>
      
      <category domain="https://future-architect.github.io/tags/TensorFlow/">TensorFlow</category>
      
      
      <comments>https://future-architect.github.io/articles/20220602b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>int32 のサロゲートキーが数年でオーバーフローしそうになった件</title>
      <link>https://future-architect.github.io/articles/20220602a/</link>
      <guid>https://future-architect.github.io/articles/20220602a/</guid>
      <pubDate>Wed, 01 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220602a/key-gd9783fabe_1280.jpg&quot; alt=&quot;&quot; width=&quot;1280&quot; height=&quot;799&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220602a/key-gd9783fabe_1280.jpg" alt="" width="1280" height="799"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、2021/11 にキャリア入社したTIGの穴井です。<a href="/articles/20220601a/">失敗談をテーマにした連載</a>の2本目です。</p><p>Go の ORM（Object-relational mapping）である <code>gorm</code> 利用時の構造体にて、サロゲートキーの型が <code>int32</code>であることに起因して、当該フィールドが数年でオーバーフローしそうだった件について、なぜ実装時に気づけなかったのか、記載いたします。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>既存システムに機能追加することで、これまでとは比べ物にならないデータ量を扱うシステムとなることがあると思います。私が参画しているプロジェクトでも扱うデータ量が大幅に急増し、結果として Go の構造体の <code>int32</code> のサロゲートキーが数年でオーバーフローすることが見込まれる状況となりました。</p><h1 id="なぜ実装時に気づけなかったのか"><a href="#なぜ実装時に気づけなかったのか" class="headerlink" title="なぜ実装時に気づけなかったのか"></a>なぜ実装時に気づけなかったのか</h1><p>システム開発を行う際に、開発者が共通で利用する部品を作り込むと思いますが、<br>その部品の利用に問題がありました。</p><p>私が参画しているプロジェクトは、全てのテーブルでサロゲートキーとシステムカラムを定義するという開発規約があるため、これらを表現する構造体を一つ定義しておき、構造体の埋め込みを利用して ORM を利用していました。また、サロゲートキーは ID という名称にするテーブル定義規約があり、ID はデータが insert されるたびに increment されるテーブル定義 (PostgreSQL の serial 型) となっています。</p><p>上記をコードで表すと以下の通りとなります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BaseColumns 共通カラムの構造体</span></span><br><span class="line"><span class="keyword">type</span> BaseColumns <span class="keyword">struct</span> &#123;</span><br><span class="line">ID <span class="type">int32</span> <span class="string">`gorm:&quot;primary_key&quot;`</span></span><br><span class="line"></span><br><span class="line">CreatedAt    time.Time <span class="string">`gorm:&quot;column:created_at&quot;`</span></span><br><span class="line">UpdatedAt    time.Time <span class="string">`gorm:&quot;column:updated_at&quot;`</span></span><br><span class="line">PatchedAt   *time.Time <span class="string">`gorm:&quot;column:patched_at&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CreateSampleModel SampleModel を DB に書き込む関数（利用例）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateSampleModel</span><span class="params">(ctx context.Context, userID <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">s := &amp;SampleModel&#123;</span><br><span class="line">UserID:        userID,</span><br><span class="line">BaseColumns: BaseColumns&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">tx := GetTx(ctx)</span><br><span class="line">err := tx.WithContext(ctx).Create(&amp;s).Error</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このような規約がある中で実装を愚直に進めた結果、データ量に関する考慮漏れが発生し、<br>int32 のサロゲートキーを利用してしまい、数年でオーバーフローが見込まれる状況となってしまいました。</p><p>今回はサロゲートキーのオーバフロー問題ということで下記に int32, int64 の最大値を示します。</p><div class="scroll"><table><thead><tr><th>int32</th><th>int64</th></tr></thead><tbody><tr><td>2,147,483,647</td><td>9,223,372,036,854,775,807</td></tr></tbody></table></div><p>本事象では、DB で自動採番された ID が 2,147,483,647 を超えた際に Go の構造体にパースできずオーバーフローすることが見込まれました。</p><p>機能追加により約21億のデータを扱うシステムとなることは、稀なケースですが、このようなオーバーフロー問題はすべての人が遭遇する可能性がある事象だと思います。本事象に遭遇したことで、改めて、データ量と型設定について見直すいい機会となりました。</p><p>※本事象発覚後、int64のサロゲートキーを利用するようソースを修正しました。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>同じ苦しみを味わう人が出ないよう、本記事にて供養いたします。</p><p>次は原さんの<a href="/articles/20220603a/">Go言語で定数として扱いたいmapを毎回アロケートさせて性能劣化した話</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DB/">DB</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/GORM/">GORM</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%95%E3%83%AD%E3%83%BC/">オーバーフロー</category>
      
      
      <comments>https://future-architect.github.io/articles/20220602a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GoとDynamoDBを用いた開発で反省していること</title>
      <link>https://future-architect.github.io/articles/20220601b/</link>
      <guid>https://future-architect.github.io/articles/20220601b/</guid>
      <pubDate>Tue, 31 May 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG真野です。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG真野です。<a href="/articles/20220601a/">失敗談をテーマにした連載</a>で、ちょうどプロダクト開発的に良い区切りのタイミングでもあるため、振り返りがてら、DynamoDB,Go,AWS Lambdaの技術要素について自分自身の理解・見込みの甘さについて反省します。</p><h2 id="DynamoDBのシステム項目created-atとかupdated-atのタイムゾーンはJSTにすれば良かった"><a href="#DynamoDBのシステム項目created-atとかupdated-atのタイムゾーンはJSTにすれば良かった" class="headerlink" title="DynamoDBのシステム項目created_atとかupdated_atのタイムゾーンはJSTにすれば良かった"></a>DynamoDBのシステム項目created_atとかupdated_atのタイムゾーンはJSTにすれば良かった</h2><p>DynamoDBは日付型を直接サポートしておらず、文字列型で保存することになります。</p><ul><li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes.String">https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes.String</a></li></ul><p>データサイズや諸々の理由で<a href="https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/dynamodbattribute/#UnixTime">UnixTime</a> 勢力もあるかもしれませんが、アプリケーションから直接参照されず、トレースその他を運用時の利用を目的にしたシステム項目は、可読性が大事なのでRFC3339ナノ秒で保管していました。RFC3339ナノ秒は <code>2022-06-01T03:31:14.6300415Z</code> と言った形式です。</p><p>ここまでは良かったのですがタイムゾーンはUTCに統一する方針を取っていたので、JSTではないです。変換するときは常に+9時間することになり激しく反省をしています。少なくてもクライアントのタイムゾーンがJSTであれば、JSTで保存したほうが良かったと考えています。JSTですと次のような形式を想定しています。</p><ul><li><code>2022-06-01T12:31:14.6300415+09:00</code></li></ul><p>ちなみに、AWS SDK for Goを用いると、time.Time型はデフォルトではRFC3339で保存されます。</p><blockquote><p><code>time.Time</code> is marshaled as RFC3339 format.<br><a href="https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/dynamodbattribute/#:~:text=%60time.Time%60%20is%20marshaled%20as%20RFC3339%20format">https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/dynamodbattribute/#:~:text=%60time.Time%60%20is%20marshaled%20as%20RFC3339%20format</a>.</p></blockquote><p>ちなみに、システム項目に限っていますが、時系列データのソートキーなどもJSTタイムゾーンで保存するほうが日本ユーザーが大半のケースにおいてはベターだと思います。</p><h2 id="時系列DBをDynamoDBに貯めるのは良かったけど、分析用のデータストアを最初から分けるべきだった"><a href="#時系列DBをDynamoDBに貯めるのは良かったけど、分析用のデータストアを最初から分けるべきだった" class="headerlink" title="時系列DBをDynamoDBに貯めるのは良かったけど、分析用のデータストアを最初から分けるべきだった"></a>時系列DBをDynamoDBに貯めるのは良かったけど、分析用のデータストアを最初から分けるべきだった</h2><p>今回のユースケースとしては、温湿度や移動情報（緯度経度）をそれなりの量と頻度（つまり時系列）で受信するようなタイプです。基本的には全データを利用するというよりは、ときより発生する異常値をトリガーに通知をしたり、ある断面のセンサー値を別システムに連携します。発生するデータ量の将来換算が読みきれずDynamoDBをメインのデータストアに採用したのは良かったのですが、データが蓄積するとちょっとした調査・集計をかなり頻繁に行いたくなりました。</p><p>最初はちょっとした集計ですし、簡易なスクリプトを開発していましたが、気づけばチーム全員がちょっとしたスクリプトを開発するのがうまくなっていました。これはこれで悪くないスキルセットかもしれませんが、すこし方向性が異なります。</p><p><a href="/articles/20210403/">S3 Export + Athenaで集計しよう</a>という方法も部分的に行いましたが、やはり特定の業務キー＋年月日でパーティショングしたいということもあり、これについては早期にデータ基盤を整えるべきであったと反省しています。</p><p>例えば次のように、DynamoDB Streamsトリガーでデータレイク側に参照したい形式で転送するといったことを早期に行っていれば..という反省があります。</p><img src="/images/20220601b/失敗談技術ブログ.drawio.png" alt="分析用データストアにDDB Streamsで転送" width="1200" height="698" loading="lazy"><p>上図はS3に転送していますが、どういったデータストアで投げても良いとは思います。この例では月額コストをなるべく抑えたく、そこまで集計に用いるクエリにレイテンシを求められなかったため、S3+Athenaで済ましています。</p><h2 id="参照Viewを構築するためのDynamoDB-Streamsの処理はWeb-API側の同期処理に寄せて良かったのでは"><a href="#参照Viewを構築するためのDynamoDB-Streamsの処理はWeb-API側の同期処理に寄せて良かったのでは" class="headerlink" title="参照Viewを構築するためのDynamoDB Streamsの処理はWeb API側の同期処理に寄せて良かったのでは"></a>参照Viewを構築するためのDynamoDB Streamsの処理はWeb API側の同期処理に寄せて良かったのでは</h2><p>逆に、DynamoDB Streamsを使わないほうが良かったという話です。どうしてもアプリケーション管理画面からの参照要件が耐えられず、メインのテーブルの更新トリガーでLambdaを着火させ、参照のビューテーブルを作成する処理を追加しました。管理画面を作る処理は後々の追加要件であったため、すでに稼働済みのシステムに手をいれることを避け、疎結合に追加したという動きです。</p><p>アプリ上は疎結合となりましたが、アプリケーションの構成要素を増やすと後々面倒だなという思いが募ってきました。インフラの監視、運用、リリース。非機能的な性能、障害テストなども手間です。もちろん許容範囲内なので、この件に関してはメインテーブルに書き込みを担当するWeb APIのロジックに追加して良かったのかなと考えています。</p><h3 id="元の構成"><a href="#元の構成" class="headerlink" title="元の構成"></a>元の構成</h3><img src="/images/20220601b/失敗談技術ブログ-ページ2.drawio.png" alt="失敗談技術ブログ-ページ2.drawio.png" width="1200" height="771" loading="lazy"><h3 id="こうすればよかった"><a href="#こうすればよかった" class="headerlink" title="こうすればよかった"></a>こうすればよかった</h3><p>元も思想的には悪くない（DynamoDB Streams部分だけの改修で済むケースもあり影響範囲が限定的だった）ですが、終わってみればやや重厚だった気がします（ローカルの環境で再現するのが面倒で、単体テスト品質が上がりにくいにもあり）。</p><img src="/images/20220601b/失敗談技術ブログ-ページ3.drawio.png" alt="失敗談技術ブログ-ページ3.drawio.png" width="1200" height="771" loading="lazy"><p>上図のように、同期的に書き込む方式も、既存部分へ手を入れることを過度に恐れず、客観的に判断していこうと思います。</p><h2 id="DynamoDBアクセスにAWS-SDK-for-Goを生で使う必要はなかったのでは"><a href="#DynamoDBアクセスにAWS-SDK-for-Goを生で使う必要はなかったのでは" class="headerlink" title="DynamoDBアクセスにAWS SDK for Goを生で使う必要はなかったのでは"></a>DynamoDBアクセスにAWS SDK for Goを生で使う必要はなかったのでは</h2><p>GoからDynamoDBアクセスをするためのパッケージは大体3つあるかなと思います。<a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載</a>を行ったことすらありました。</p><ol><li><a href="https://aws.amazon.com/jp/sdk-for-go/">AWS SDK for Go</a><ul><li>v1, v2がある</li></ul></li><li><a href="https://github.com/guregu/dynamo">guregu/dynamo</a></li><li><a href="https://gocloud.dev/">Go CDK</a></li></ol><p>AWS SDK for Goですが、記載がやや冗長になりがちでした。条件式も<a href="/articles/20211025a/">ヘルパーパッケージがあるよという記事</a>を書きましたが、やっぱり冗長です。公式提供だけに使えない機能は存在しない安心感はありましたが、guregu/dynamo が優秀すぎるので逆に生でわざわざ使う理由はないかなという印象です。</p><p>ちなみに、Go CDKは<a href="/articles/20200228/">DynamoDBアクセスもけっこういけるんじゃないか？</a>で1本記事を書きましたが、結局導入に至っていないです。別の機会があればこれはこれでチャレンジしたいと考えています。</p><h2 id="AWS-Lambdaのバッチ処理はStep-Functionsで必ずラップするルールにすれば良かった"><a href="#AWS-Lambdaのバッチ処理はStep-Functionsで必ずラップするルールにすれば良かった" class="headerlink" title="AWS Lambdaのバッチ処理はStep Functionsで必ずラップするルールにすれば良かった"></a>AWS Lambdaのバッチ処理はStep Functionsで必ずラップするルールにすれば良かった</h2><p>データ量が少ないため、ちょっとしたシステムI/Fでの受信/送信処理は生のLambdaで軽く書いていました。ご存知の通り最大実行時間は2022.6.1時点で15分です。今回の要件では問題なかったのですが、隣のチームに構成を移植された場合にはデータ量が多くなるケースがありタイムアウトが発生。いっそすべてStep Functionsでラップして統一するルールにしても良かったのかなと今では少し思っています。もちろん、ここだけECSやApp Runnerにする形式も面白いと思います。</p><h3 id="少し反省している構成"><a href="#少し反省している構成" class="headerlink" title="少し反省している構成"></a>少し反省している構成</h3><p>初期移行、リラン、連携先の不具合などで予期せぬデータ量に達した場合は、タイムアウトになりがち。</p><img src="/images/20220601b/失敗談技術ブログ-ページ4.drawio.png" alt="失敗談技術ブログ-ページ4.drawio.png" width="962" height="470" loading="lazy"><h3 id="横展開するのであれば最初から固く作っておいても良かったと思っている構成"><a href="#横展開するのであれば最初から固く作っておいても良かったと思っている構成" class="headerlink" title="横展開するのであれば最初から固く作っておいても良かったと思っている構成"></a>横展開するのであれば最初から固く作っておいても良かったと思っている構成</h3><p>連携先の品質その他の制御が取りにくい場合は、自衛的に固く作り込んでおくことが吉。</p><img src="/images/20220601b/失敗談技術ブログ-ページ5.drawio.png" alt="失敗談技術ブログ-ページ5.drawio.png" width="962" height="682" loading="lazy"><h2 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h2><ul><li><a href="https://github.com/go-swagger/go-swagger">go-swagger</a>も好きですが、 <a href="https://github.com/deepmap/oapi-codegen">deepmap/oapi-codegen</a> にしておけば良かった<ul><li>別にOpenAPI Specification v2（Swagger）で困ることもなく、v3を使いたいことはなかったのですが…</li></ul></li><li>go-swaggerで –strict-additional-properties をつけていることを忘れて、項目追加が許容できないため互換性を失い、リリースのときに困った<ul><li>開発時にtypoで誤った項目をcurlなどで呼ばれるよりはつけておいた方が間違いないだろうと考えたが、いつしかクライアントが増え、サーバ・クライアントのリリースサイクルがずれたときに困りました</li></ul></li><li>スキーマ駆動で自動生成したStructを、アプリ本体で用いるモデルのStructに埋め込めば良かった<ul><li>必ずしもWeb API時の項目とDBカラムが1:1ではないので、埋め込む方向に舵を切るとそれはそれで何か不満が出そうですが、項目詰め替え作業も<a href="https://github.com/jinzhu/copier">copier</a> を導入するのも何だかなと思っていた</li></ul></li><li>DynamoDBのGSIを用いて重複チェックをアプリ側で実装していましたが、反映まで時間がかかるため同時実行数の制御が必要などモヤるポイントがあった</li></ul><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>列挙すると事前に回避ないしは途中で方向転換できそうな内容が多く、アーキテクチャ的な意思決定を微修正したり、マネジメントレベルの調整ができてなかったんだなと感じました。</p><p>また、こういった振り返りの記事がもっと増えると良いなと思います。</p><p>失敗談連載の次は穴井さんの<a href="/articles/20220602a/">int32 型のサロゲートキーが数年でオーバーフローしそうになった件</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/DynamoDB/">DynamoDB</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A/">振り返り</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      
      <comments>https://future-architect.github.io/articles/20220601b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>失敗談連載2022を始めます</title>
      <link>https://future-architect.github.io/articles/20220601a/</link>
      <guid>https://future-architect.github.io/articles/20220601a/</guid>
      <pubDate>Tue, 31 May 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220601a/the-eleventh-hour-g4dea65fba_1280.jpg&quot; alt=&quot;&quot; width=&quot;800&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220601a/the-eleventh-hour-g4dea65fba_1280.jpg" alt="" width="800" height="531"><p>こんにちは。技術ブログ運営の伊藤です。<br>今回は、タイトルの通り、普段仕事している中での失敗談を集めた連載開始のインデックス記事となります。</p><h2 id="いろんな失敗"><a href="#いろんな失敗" class="headerlink" title="いろんな失敗"></a>いろんな失敗</h2><p>普段、仕事で開発などを進めているとき、そのときのレビューが通過したり、気づきにくい小さなミスなどがあるかと思います。そういった内容がちょっとずつ積もっていき、どこかで障害になったり、性能の劣化を引き起こします。</p><p>はたまた、日頃の作業をしている中で、一つ忘れてしまったがために、クラウドプロバイダーから高額な請求が来てしまうこともあります。<br>そういった、人が作業、開発する上ではどこかに失敗はつきものであるので、本連載を読んで、失敗しそうな落とし穴を事前に把握したり、日々の業務をちょっと気をつけるなどしていただければ幸いです。</p><h2 id="連載スケジュール"><a href="#連載スケジュール" class="headerlink" title="連載スケジュール"></a>連載スケジュール</h2><p>本連載は以下のスケジュールで記事を公開します。<br>扱う内容が変わったり、公開日程がずれることがございますが、ご了承ください。</p><div class="scroll"><table><thead><tr><th>日付</th><th>執筆者</th><th>タイトル</th></tr></thead><tbody><tr><td>6/1</td><td>真野隼記</td><td><a href="/articles/20220601b/">GoとDynamoDBを用いた開発で反省していること</a></td></tr><tr><td>6/2</td><td>穴井智史</td><td><a href="/articles/20220602a/">int32 型のサロゲートキーが数年でオーバーフローしそうになった件</a></td></tr><tr><td>6/3</td><td>原忠辰</td><td><a href="/articles/20220603a/">Go言語で定数として扱いたいmapを毎回アロケートさせて性能劣化した話</a></td></tr><tr><td>6/6</td><td>藤井亮佑</td><td><a href="/articles/20220606a/">RDSの自動再起動によるインフラコストの悲劇</a></td></tr><tr><td>6/7</td><td>辻大志郎</td><td><a href="/articles/20220607a/">AWS Lambdaの初期化処理と初期化タイミングの考慮不足によるはまりどころ</a></td></tr><tr><td>6/8</td><td>久保勇暉</td><td><a href="/articles/20220608a/">ユーザー要望で要件が増えてく〜アジャイル開発での落とし穴〜</a></td></tr><tr><td>6/9</td><td>岸下優介</td><td><a href="/articles/20220609a/">GoogleWorkspace SDKのAPIリクエスト間隔は気を付けましょう</a></td></tr></tbody></table></div><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>失敗談連載は今年が初の試みになりますが、ジャストアイデアで募ったところ、6名の方が参加してくださいました。</p><p>失敗を経て、現在は修正されているネタなので、失敗からどう回復したか、なども是非読んでいただければと思います。</p><p>その他の連載は以下の連載スケジュールに記載されていたり、Twitterにて告知するので、ぜひ併せてご確認お願いします！</p><ul><li><a href="/articles/20220117a">2022年のブログ連載予定を発表します</a></li><li><a href="https://twitter.com/future_techblog">公式Twitter</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      
      <comments>https://future-architect.github.io/articles/20220601a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>golang.tokyo #32 で go-twowaysql について紹介しました</title>
      <link>https://future-architect.github.io/articles/20220531a/</link>
      <guid>https://future-architect.github.io/articles/20220531a/</guid>
      <pubDate>Mon, 30 May 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220531a/top.jpg&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;560&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220531a/top.jpg" alt="" width="1000" height="560"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG 多賀です。 2022/5/19 に開催された <a href="https://golangtokyo.connpass.com/event/246982/">golang.tokyo #32</a> に登壇しましたので報告させていただきます。<br>「自作ライブラリ、ソフトウェアGo自慢大会」ということで、OSS 活動の一環で作成した <a href="https://github.com/future-architect/go-twowaysql">future-architect/go-twowaysql</a> について紹介してきました。</p><h2 id="発表資料"><a href="#発表資料" class="headerlink" title="発表資料"></a>発表資料</h2><p>5分と短めな発表のため、<a href="https://github.com/future-architect/go-twowaysql">go-twowaysql</a> の概要について整理された資料になっていると思いますので、気になる方は以下見てみてください。</p><iframe src="https://docs.google.com/presentation/d/1mkqEEb7eNtkXnW-t_lw3OPmTrD7JoR04SDSvy6WhjPg/embed?start=false&loop=false&delayms=3000" frameborder="0" width="100%" height="550" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>昔からよくイベントに観る側として参加していた<a href="https://golangtokyo.connpass.com/event/246982/">golang.tokyo</a> でしたが、良い機会をいただき登壇することができ、嬉しく思います。</p><p><a href="https://github.com/future-architect/go-twowaysql">future-architect/go-twowaysql</a> についても、日々改善を行っていてより使いやすくしていきたいと考えています。イベントの中で上がった、 <code>go:embed</code> 対応はぜひサポートできるようにしたいですね。</p><p>他の方々が発表された OSS ライブラリ、発表資料ともに、<a href="https://golangtokyo.connpass.com/event/246982/">golang.tokyo #32</a> イベントページ内にリンクが載ってます。面白い OSS ライブラリがいくつもありましたので、ぜひ見てみてください。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://future-architect.github.io/articles/20210803a/">Go言語で2WaySQL</a></li><li><a href="https://future-architect.github.io/uroborosql-doc/">uroboroSQL</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/OSS/">OSS</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/ORM/">ORM</category>
      
      <category domain="https://future-architect.github.io/tags/2WaySQL/">2WaySQL</category>
      
      
      <comments>https://future-architect.github.io/articles/20220531a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
