<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Mon, 04 Oct 2021 14:57:15 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Future Tech Night #16 ～クラウド時代のDWH～</title>
      <link>https://future-architect.github.io/articles/20211005b/</link>
      <guid>https://future-architect.github.io/articles/20211005b/</guid>
      <pubDate>Mon, 04 Oct 2021 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20211005b/archive-g39b73f1f8.jpg&quot; alt=&quot;PexelsによるPixabayからの画像&quot; title=&quot;800&quot; width=&quot;533&quot; height=&quot;&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20211005b/archive-g39b73f1f8.jpg" alt="PexelsによるPixabayからの画像" title="800" width="533" height=""><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>今回の投稿は、先日TIG(Technology Innovation Group)の杉江と私でスピーカーを担当した「<a href="https://future.connpass.com/event/222633/">Future Tech Night #16～クラウド時代のDWH～</a>」の登壇後記です。</p><h2 id="発表資料"><a href="#発表資料" class="headerlink" title="発表資料"></a>発表資料</h2><p>以前に実施した社内勉強会のコンテンツを外部発信向けに整理したものとなります。私は元の資料の作成に関わっていなかったため、整理に際して一から目を通しました。内容も量も読み応えのある内容で、今回の登壇機会を介して私自身の知識のアップデートにも繋がりました。</p><script async class="speakerdeck-embed" data-id="64dae075c9874158ae72778f910d2299" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><h2 id="コンテンツ構成"><a href="#コンテンツ構成" class="headerlink" title="コンテンツ構成"></a>コンテンツ構成</h2><p>以下の構成で発表を行いました。それぞれ簡単に内容をご紹介しますので、気になるコンテンツがあれば是非資料に目を通して頂ければと思います。</p><h3 id="クラウドDWHアーキテクチャ概要"><a href="#クラウドDWHアーキテクチャ概要" class="headerlink" title="クラウドDWHアーキテクチャ概要"></a>クラウドDWHアーキテクチャ概要</h3><p>主にDWHの用途で2010年付近から普及が進んだMPP(大規模並列分散処理)型RDBのアーキテクチャの紹介と、それがパブリッククラウドの特性を活かしてどのように進化してきているか解説しています。</p><p>今回の発表では次の3つのプロダクトを取り上げました。</p><ul><li>Snowflake<ul><li>主要なパブリッククラウド上(AWS、Azure、GCP)で利用可能なプロダクト</li><li>Wharehouseというコンピュート(クエリーエンジン)のインスタンスタイプと処理時間に応じて課金</li></ul></li><li>Google Cloud BigQuery<ul><li>GCPの提供するサービス</li><li>クエリの実行時間に応じて課金</li></ul></li><li>Microsoft Azure Synapse Analytics<ul><li>データを保持する分散ストレージが60個固定</li><li>コンピュートのインスタンスタイプと起動時間に応じて課金</li></ul></li></ul><h3 id="データベースインフラストラクチャ"><a href="#データベースインフラストラクチャ" class="headerlink" title="データベースインフラストラクチャ"></a>データベースインフラストラクチャ</h3><p>クラウド型DWHを構成するインフラレイヤの技術要素に関して解説してます。</p><ul><li>ストレージ<ul><li>データベースのストレージ管理構造や、クラウド型DWHの特徴と言える分散ファイルシステムを紹介</li></ul></li><li>ネットワーク<ul><li>分散ストレージのアーキテクチャでは、冗長性確保の観点で同一データを複数のストレージに対して書き込むため、高速ネットワークが必須</li></ul></li><li>コンピュート<ul><li>前述の3プロダクト間でコンセプトが異なっており、その違いを紹介</li></ul></li></ul><h3 id="データベースソフトウェア"><a href="#データベースソフトウェア" class="headerlink" title="データベースソフトウェア"></a>データベースソフトウェア</h3><p>列/行指向フォーマットやメタデータ管理など、データの保存形式に関わる内容を中心に解説しています。</p><h3 id="検証結果"><a href="#検証結果" class="headerlink" title="検証結果"></a>検証結果</h3><p>前述の3プロダクトを対象に、それぞれの特徴を見るために実環境での検証を実施しましました。<br>検証内容と結果の一部を抜粋して紹介しています。</p><h3 id="今後に向けて"><a href="#今後に向けて" class="headerlink" title="今後に向けて"></a>今後に向けて</h3><p>今回の発表では触れなかったAmazon Redshiftのアップデートなど、各プロダクトの動向に関して考察しています。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>主要なクラウド型DWHは、コンピュートとストレージが分離されたアーキテクチャという共通点があり、これによって処理の高速化と共に、データの規模・処理特性に応じた柔軟な構成変更が可能というクラウドの恩恵を享受できます。</p><p>機能面での比較では中々差が見えにくいですが、それぞれ特徴的な課金体系を持っており、利用されるシステム特性に応じてコストに差が出てくるケースが想定されます。導入検討/選定時点におけるこのコストの見極めが私たちにとって重要かつ難しいポイントとなってくると感じています。</p><p>「クラウドの無限のインフラストラクチャリソースを利用」したソフトウェアであることから、クラウドベンダ(AWS/GCP/Azure)提供のDWHだけでない選択肢(Snowflake)があるというのも見逃せません。このようなクラウドベンダ以外によるミドルウェアが増えてくる可能性がありそうです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DB/">DB</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/DB/">DB</category>
      
      <category domain="https://future-architect.github.io/tags/TechNight/">TechNight</category>
      
      <category domain="https://future-architect.github.io/tags/Spanner/">Spanner</category>
      
      <category domain="https://future-architect.github.io/tags/Snowflake/">Snowflake</category>
      
      
      <comments>https://future-architect.github.io/articles/20211005b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>イテレータと仲良くなろう</title>
      <link>https://future-architect.github.io/articles/20211005a/</link>
      <guid>https://future-architect.github.io/articles/20211005a/</guid>
      <pubDate>Mon, 04 Oct 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20211005a/python-logo-master-v3-TM.png&quot; alt=&quot;&quot; width=&quot;601&quot; height=&quot;203&quot;&gt;

&lt;p&gt;SAIG の佐藤尭彰です。最近は業務で Python</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20211005a/python-logo-master-v3-TM.png" alt="" width="601" height="203"><p>SAIG の佐藤尭彰です。最近は業務で Python ばっかり書いています。</p><p>今回は <a href="/articles/20210927b/">Python連載</a> の第4回目で、Python の中でも「なんとなく」で扱われがちなイテレータについてです。</p><h2 id="イテレータとは"><a href="#イテレータとは" class="headerlink" title="イテレータとは"></a>イテレータとは</h2><p>あるコンテナの中の要素に1つずつアクセスできるオブジェクト。</p><p>もう少し <a href="https://docs.python.org/ja/3/tutorial/classes.html#iterators">公式</a> から引用すると、</p><blockquote><p>(<code>iter()</code>) 関数は、コンテナの中の要素に1つずつアクセスする <code>__next__()</code> メソッドが定義されているイテレータオブジェクトを返します。</p></blockquote><p>つまり、コンテナの中身を1つずつ返す <code>__next__()</code> メソッドを持つ (ようなオブジェクトを返す <code>__iter__()</code> 関数を持つ) ことがイテレータの本質です。</p><p><code>list</code> などのシーケンスと異なり、実態として中身が存在する必要がありません。これを実装するための1手段が <strong>ジェネレータ</strong> や <strong>ジェネレータ式</strong> であり、返すべき値はこれらを呼び出すたびに都度計算してよいのです。このイテレータの性質から、イテレータを使えるところ (= <code>iterable</code> を要求されるところ) にシーケンスでなくイテレータを渡すとメモリや実行時間を削減することができます。</p><p>一方でイテレータは実際に値が帰ってくるまでは中身が確定しません。確定させるためには <code>list</code> もしくは <code>tuple</code> などにキャストする必要があります。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, <span class="built_in">range</span>(<span class="number">5</span>)))</span><br><span class="line">&lt;<span class="built_in">map</span> <span class="built_in">object</span> at <span class="number">0x7f594ded2a58</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, <span class="built_in">range</span>(<span class="number">5</span>))))</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br></pre></td></tr></table></figure><p>▲ ざっくり printf デバッグをするときに忘れがちな <code>list()</code></p><h2 id="組み込みのイテレータ"><a href="#組み込みのイテレータ" class="headerlink" title="組み込みのイテレータ"></a>組み込みのイテレータ</h2><p>組み込み = import なしに使える、標準のもの</p><h3 id="よく見るもの"><a href="#よく見るもの" class="headerlink" title="よく見るもの"></a>よく見るもの</h3><p>ここは使いこなしているユーザが多いのではないでしょうか。</p><ul><li><code>map(func, iterable)</code>: 第2引数に第1引数を作用させたものを返す</li><li><code>filter(func, iterable)</code>: 第2引数に第1引数を作用させた結果が真値となる要素のみを返す</li><li><code>enumerate(iterable)</code>: インデックスと中身のタプルを返す</li><li><code>zip(iter1, iter2, ...)</code>: それぞれの iterable の i 番目からなるタプルを返す<ul><li>長さがまちまちなときは最短なもので止まる</li></ul></li></ul><h3 id="あまり見ないけど便利なもの"><a href="#あまり見ないけど便利なもの" class="headerlink" title="あまり見ないけど便利なもの"></a>あまり見ないけど便利なもの</h3><p>本題その1です。</p><ul><li><code>filter(None, iterable)</code><ul><li>第1引数に<code>None</code>を渡すと、iterable内の要素自体が真値を返すような要素のみを返します</li><li>つまり「<code>None</code>, <code>False</code>, <code>0</code>(と等価なもの), <code>&#39;&#39;</code>, <code>[]</code>, etc. 」を除くことができます。<strong>0が消えることを除いては</strong> かなり使い勝手がよく、無為な <code>if</code> 文でインデントを一つ掘るよりも見通しの良いコードを書くことができます</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># やりがちな例</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> <span class="built_in">iter</span>:</span><br><span class="line">    <span class="keyword">if</span> v:</span><br><span class="line">        process(v)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ↑と等価な例</span></span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> <span class="built_in">filter</span>(<span class="literal">None</span>, <span class="built_in">iter</span>):</span><br><span class="line">    process(v)</span><br></pre></td></tr></table></figure><ul><li><code>reversed(seq)</code><ul><li>いわゆるリバースイテレータを返します。逆順にしたコピーを返す <code>[::-1]</code> よりも軽くて便利なことが多いです</li><li>一方で、(事実上)引数<code>seq</code>は<code>list</code>か<code>tuple</code>である必要があります</li></ul></li><li><code>iter(callable, sentinel)</code>: 2引数版 <code>iter</code><ul><li>sentinel と一致するまで callable を叩いた返り値を返します</li><li>文字通りの番兵がいるようなテキストデータ・バイナリデータをパースするときに役に立つ（かも）</li></ul></li></ul><h2 id="itertools"><a href="#itertools" class="headerlink" title="itertools"></a><a href="https://docs.python.org/ja/3/library/itertools.html">itertools</a></h2><p>本題その2です。</p><p>import することでいろいろなイテレータが作れます。どこで使うんだと言うのもありますが、大体はいつか使える関数です。</p><h3 id="主な無限イテレータ"><a href="#主な無限イテレータ" class="headerlink" title="主な無限イテレータ"></a>主な無限イテレータ</h3><ul><li><code>count(start[, step=1])</code>: stop がない無限 <code>range</code></li><li><code>cycle(iterable)</code>: <code>cycle(&#39;ABCD&#39;) --&gt; A B C D A B C D A B C D ...</code><ul><li>だいたい <code>zip</code> などの <strong>一番短いやつに揃えて止まる</strong> 系ジェネレータを止めたくないときに使います</li></ul></li></ul><h3 id="主な-普通の-イテレータ"><a href="#主な-普通の-イテレータ" class="headerlink" title="主な(普通の)イテレータ"></a>主な(普通の)イテレータ</h3><ul><li><code>accumulate(p[, func])</code><ul><li>累積和。<code>np.cumsum(v)</code></li><li>このほか第2引数 func は幅広い二項演算を取ることができるため <code>np.cumprod</code> にしたり累積 <code>max</code> したり色々できます</li></ul></li><li><code>chain.from_iterable(iterable)</code><ul><li>2重のネストに限定された <code>np.ravel</code> です<ul><li>ネストされていない要素が混じっていたり、3重ネスト以上を平坦化したい場合はおとなしく <code>collections.abc.Iterable</code> かどうかを判定するしかないようです</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> chain</span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line">a = [[<span class="number">1</span>], [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>], [<span class="number">6</span>]]</span><br><span class="line">b = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>], <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flatten</span>(<span class="params">it</span>):</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> it:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(item, Iterable) <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(item, <span class="built_in">str</span>):</span><br><span class="line">            <span class="keyword">for</span> child <span class="keyword">in</span> flatten(item):</span><br><span class="line">                <span class="keyword">yield</span> child</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(chain.from_iterable(a)) <span class="comment"># =&gt; [1, 2, [3, 4], 5, 6]</span></span><br><span class="line"><span class="built_in">list</span>(flatten(a)) <span class="comment"># =&gt; [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="built_in">list</span>(chain.from_iterable(b)) <span class="comment"># =&gt; TypeError: &#x27;int&#x27; object is not iterable</span></span><br><span class="line"><span class="built_in">list</span>(flatten(b)) <span class="comment"># =&gt; [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><p>▲ こんな感じで組むと <code>flatten</code> できる</p><ul><li><code>groupby(iterable[, key])</code><ul><li>前から見ていって <code>key</code> が一致するような要素集合を (<code>key</code>, <code>要素集合</code>) の形で返します</li><li>iterable がソート済ならばだいたい <code>df.groupby</code> ですが、ソートされていないと <code>key</code> が変わるたびにブロックを返すので敢えてそれを利用する使い道もあります<ul><li>タイムスタンプ順にそろえておいて、同じ人の連続ログをひとまとめにして見たい、など</li><li>C++ の <code>uniq</code> と同じような動作です</li></ul></li></ul></li><li><code>islice(iterable[, start], stop[, step])</code><ul><li><code>iterable[start:stop:step]</code></li><li><code>reversed</code> 同様、コピーを作らないのでメモリに優しいです</li></ul></li><li><code>takewhile(pred, seq)</code><ul><li><code>pred</code> が偽になったら終了するイテレータ</li><li><strong>リスト内包でbreak</strong>したくなったらこれを思い出して下さ</li></ul></li></ul><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>標準ライブラリを上手に使って快適な Python ライフを。</p><p>次回は10月7日、小橋昌明さんの pandasの内部で何が起きているか です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/">初心者向け</category>
      
      <category domain="https://future-architect.github.io/tags/Python/">Python</category>
      
      
      <comments>https://future-architect.github.io/articles/20211005a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Nyle × FUTURE で勉強会を開催しました</title>
      <link>https://future-architect.github.io/articles/20211004a/</link>
      <guid>https://future-architect.github.io/articles/20211004a/</guid>
      <pubDate>Sun, 03 Oct 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは。&lt;br&gt;TIGの棚井龍之介です。&lt;/p&gt;
&lt;p&gt;2021年9月10日(金)に、&lt;a href=&quot;https://nyle.co.jp/&quot;&gt;ナイル株式会社&lt;/a&gt; と &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは。<br>TIGの棚井龍之介です。</p><p>2021年9月10日(金)に、<a href="https://nyle.co.jp/">ナイル株式会社</a> と <a href="https://www.future.co.jp/">フューチャー株式会社</a> のエンジニアで集まり、合同での勉強会を開催しました。</p><p>フューチャーからはインフラ担当1名と+アプリ担当2名が登壇して、クラウドサービスの紹介やクラウドでのしくじり話などを発表しました。ナイルさん側の発表内容もクラウド寄りのものが多く、期せずして「クラウド勉強会」のような雰囲気になりました。</p><p>以下、登壇者とタイトルになります。</p><div class="scroll"><table><thead><tr><th>#</th><th>名前</th><th>所属</th><th>タイトル</th></tr></thead><tbody><tr><td>1</td><td><a href="https://future-architect.github.io/authors/%E4%BC%8A%E8%97%A4%E5%A4%AA%E6%96%89/">伊藤さん</a></td><td>FUTURE</td><td>GCPのサービスを活用したGitOps</td></tr><tr><td>2</td><td>小宮さん</td><td>Nyle</td><td>パブリッククラウドでDR（災害復旧）に取り組んでみる話</td></tr><tr><td>3</td><td><a href="https://future-architect.github.io/authors/%E6%A3%9A%E4%BA%95%E9%BE%8D%E4%B9%8B%E4%BB%8B/">棚井さん</a></td><td>FUTURE</td><td>無料でIaCを試す AWS×Terraform×LocalStack</td></tr><tr><td>4</td><td>塚本さん</td><td>Nyle</td><td>CloudFormationを使用したシームレスな開発の話</td></tr><tr><td>5</td><td><a href="https://future-architect.github.io/authors/%E7%9C%9F%E9%87%8E%E9%9A%BC%E8%A8%98/">真野さん</a></td><td>FUTURE</td><td>冪等じゃないジョブがなぜ僕を困らせたのか</td></tr><tr><td>6</td><td>工藤さん</td><td>Nyle</td><td>レガシーメディアシステムのJamstackリプレイス計画素案</td></tr></tbody></table></div><h1 id="登壇スライドの紹介"><a href="#登壇スライドの紹介" class="headerlink" title="登壇スライドの紹介"></a>登壇スライドの紹介</h1><p>登壇者のスライドです。</p><h2 id="1"><a href="#1" class="headerlink" title="#1"></a>#1</h2><p>FUTURE 伊藤さん<br>GCPのサービスを活用したGitOps</p><script async class="speakerdeck-embed" data-id="4027a686f8b84dd78e486990c3b831d0" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><h2 id="2"><a href="#2" class="headerlink" title="#2"></a>#2</h2><p>Nyle 小宮さん<br>パブリッククラウドでDR（災害復旧）に取り組んでみる話</p><iframe src="//www.slideshare.net/slideshow/embed_code/key/5dUZeE1kpG8mWC" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/ssuser0038b4/dr-250177143" title="クラウドでDr（災害対策）に 取り組んでみる話" target="_blank">クラウドでDr（災害対策）に 取り組んでみる話</a> </strong> from <strong><a href="https://www.slideshare.net/ssuser0038b4" target="_blank">yoshiyuki komiya</a></strong> </div><h2 id="3"><a href="#3" class="headerlink" title="#3"></a>#3</h2><p>FUTURE 棚井さん<br>無料でIaCを試す AWS×Terraform×LocalStack</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vSedBlRfsZ4fVuKUt6Rs5iUTeIq_BQ7PsYU9cvDVozcWJeXzxo2yTh2NaOekoZAjg/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><h2 id="4"><a href="#4" class="headerlink" title="#4"></a>#4</h2><p>Nyle 塚本さん<br>CloudFormationを使用したシームレスな開発の話</p><iframe src="//www.slideshare.net/slideshow/embed_code/key/2aBJ41LnFO6Jpj" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/ssuser9b182a/cloudformation-250177886" title="CloudFormationを使用したシームレスな開発の話" target="_blank">CloudFormationを使用したシームレスな開発の話</a> </strong> from <strong><a href="https://www.slideshare.net/ssuser9b182a" target="_blank">祐一郎 塚本</a></strong> </div><h2 id="5"><a href="#5" class="headerlink" title="#5"></a>#5</h2><p>FUTURE 真野さん<br>冪等じゃないジョブがなぜ僕を困らせたのか</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vSdSiwGRRkeC106NiMlng2GFyXuAI_ZmqrkN_aQDAn8AXORsLJi9Ft8Z0MpMKIZy1CDRJKcCw8Sp3Wy/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><h2 id="6"><a href="#6" class="headerlink" title="#6"></a>#6</h2><p>Nyle 工藤さん<br>レガシーメディアシステムのJamstackリプレイス計画素案</p><a href="https://www.ta9to.com/talks/nextjs-mysql/" title="スライドへ">  <img src="/images/20211004a/jamstack.jpg" alt="スライドトップページ" width="" height="" loading="lazy"></a><h1 id="登壇した感想"><a href="#登壇した感想" class="headerlink" title="登壇した感想"></a>登壇した感想</h1><p>全員の発表終了後、面白かった・参考になったタイトルを参加者投票で集計したところ、私の発表した「無料でIaCを試す AWS×Terraform×LocalStack」が、得票率70%で1位になりました。ありがとうございます。</p><p>会社同士の垣根を超えると、内部のみでインフラ設計を議論するときとは、また一味違った話が聞けるな〜と思う勉強会でもありました。</p><p>以上、「Nyle × FUTURE」での勉強会レポートでした。</p><img src="/images/20211004a/Screen_Shot_2021-09-16_at_20.12.25.png" alt="Screen_Shot_2021-09-16_at_20.12.25.png" width="1200" height="693" loading="lazy">]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/LT/">LT</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%90%88%E5%90%8C%E5%8B%89%E5%BC%B7%E4%BC%9A/">合同勉強会</category>
      
      
      <comments>https://future-architect.github.io/articles/20211004a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>PythonでMQTT!! ～Alexaでコマンドを送信する～</title>
      <link>https://future-architect.github.io/articles/20211001a/</link>
      <guid>https://future-architect.github.io/articles/20211001a/</guid>
      <pubDate>Thu, 30 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20211001a/volodymyr-hryshchenko-V5vqWC9gyEU-unsplash.jpg&quot; alt=&quot;&quot; title=&quot;Volodymyr Hryshchenko on Unsplash&quot; width=&quot;1200&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20211001a/volodymyr-hryshchenko-V5vqWC9gyEU-unsplash.jpg" alt="" title="Volodymyr Hryshchenko on Unsplash" width="1200" height="800" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG/DXユニット所属の宮永です。</p><p>本記事は<a href="/articles/20210927b/">Python連載</a>第3回目の投稿です。よろしくお願いします。</p><ul><li><a href="/articles/20210927b/">Python連載始まります＆Python翻訳プロジェクト | フューチャー技術ブログ</a></li></ul><p>突然ですが、私は以前以下2つの記事をこの技術ブログに投稿しました。</p><ul><li><a href="/articles/20210929a/">GoでMQTT!!　～温湿度マイスターbotの作成～(前編) | フューチャー技術ブログ</a></li><li><a href="/articles/20210930a/">GoでMQTT!!　～温湿度マイスターbotの作成～(後編) | フューチャー技術ブログ</a></li></ul><p>上記の記事ではAWS IoTと温湿度センサーを使用して「温湿度マイスターbot」を作成する内容を紹介しています。</p><p>記事では温度と湿度、不快指数を定期投稿するbotの作成を目指してハンズオンを進める構成となっています。<br><img src="/images/20211001a/image.png" alt="BOT投稿画面" width="647" height="457" loading="lazy"></p><p>MQTTを使用して、室内温度を定点観測するだけならば以上の記事で十分ですが、ここまで作成してふと思いました。</p><p><strong>「室内温度を知りたいのに2時間も待てない。。。」</strong></p><p>上記の記事では、定期的にworkerを実行する構成としたため、能動的に温度や湿度を知ることができないのです。</p><p>ということで、本記事ではAlexaとMQTT、そしてPythonを使って以上の悩みを解決する記事を書きました。前記事に続いてハンズオン形式で記載したので手元にRaspberrypiを添えながら読み進めてほしいです。</p><p>また、本章で使用するスクリプトは以下で公開しています。参考にしてください。</p><ul><li><a href="https://github.com/orangekame3/lambda-alexa">orangekame3/lambda-alexa</a></li><li><a href="https://github.com/orangekame3/py-subscriber">orangekame3/py-subscriber</a></li></ul><h1 id="本記事で作成するもの"><a href="#本記事で作成するもの" class="headerlink" title="本記事で作成するもの"></a>本記事で作成するもの</h1><p>本記事と以下2つの記事</p><ul><li><a href="/articles/20210929a/">GoでMQTT!!　～温湿度マイスターbotの作成～(前編) | フューチャー技術ブログ</a></li><li><a href="/articles/20210930a/">GoでMQTT!!　～温湿度マイスターbotの作成～(後編) | フューチャー技術ブログ</a></li></ul><p>に取り組むことで以下の動画のようにリアルタイムで室内の不快指数を知ることができるようになります。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/YfbDl6xolV8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h1 id="システム構成"><a href="#システム構成" class="headerlink" title="システム構成"></a>システム構成</h1><ul><li><a href="/articles/20210929a/">GoでMQTT!!　～温湿度マイスターbotの作成～(前編) | フューチャー技術ブログ</a></li></ul><p>で作成したシステム構成に修正を加えます。</p><p>RaspberrypiでAWS IoTをSubscribeしておきます。(PublishとSubscribeについては<a href="/articles/20210929a/">前回記事</a>に記載しているのでご参照ください)</p><p>AWS IoTからMQTTでコマンドを送信し、Subscriberではコマンド受信をトリガーとしてローカルのワーカーを起動するという構成になっています。AWS IoTのPublishのタイミングはAlexa Home Skillをトリガーとしています。</p><img src="/images/20211001a/image_2.png" alt="image.png" width="1200" height="528" loading="lazy"><h1 id="開発環境"><a href="#開発環境" class="headerlink" title="開発環境"></a>開発環境</h1><p>開発はwindows10環境、WSL2上で行いました。標準モジュール以外で使用したものを以下に列挙します。(※前回記事との差分です)</p><h2 id="ハードウェア"><a href="#ハードウェア" class="headerlink" title="ハードウェア"></a>ハードウェア</h2><ul><li>Amazon Echo Dot第3世代</li></ul><h2 id="ソフトウェア"><a href="#ソフトウェア" class="headerlink" title="ソフトウェア"></a>ソフトウェア</h2><ul><li>Python 3.8.10<ul><li><a href="https://github.com/eclipse/paho.mqtt.python">eclipse/paho.mqtt.python: paho.mqtt.python</a></li></ul></li><li><a href="https://github.com/thorsten-gehrig/alexa-remote-control">thorsten-gehrig/alexa-remote-control: control Amazon Alexa from command Line (set volume, select station from tunein or pandora)</a></li><li>Alexa Smart Home Skill</li><li>AWS Lambda</li></ul><h1 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h1><p>以下の手順で実装します。</p><ol><li>PythonでSubscribe、AWS IoTからPublishする</li><li>AWS LambdaからAWS IoT経由でPublishする</li><li>Alexa Home Skillでスキルを作成する</li><li>Alexa Home SkillとAWS Lambda、 AWS IoTを連携する</li><li>Alexa Home Skillを開発する</li><li>Alexaアプリと連携する</li><li>ローカルのスクリプトを実行し、Alexaをしゃべらせる</li></ol><p>まずは、PythonのMQTTモジュールである<a href="https://github.com/eclipse/paho.mqtt.python">eclipse/paho.mqtt.python: paho.mqtt.python</a>に触ってAWS IoTからのテスト送信をSubscribeしましょう。</p><h2 id="1-PythonでSubscribe、AWS-IoTからPublishする"><a href="#1-PythonでSubscribe、AWS-IoTからPublishする" class="headerlink" title="1. PythonでSubscribe、AWS IoTからPublishする"></a>1. PythonでSubscribe、AWS IoTからPublishする</h2><p>PythonでAWS IoTをSubscribeします。使用するPythonモジュールは<a href="https://github.com/eclipse/paho.mqtt.python">eclipse/paho.mqtt.python: paho.mqtt.python</a>です。</p><p>モジュールの使い方はREADMEに記載されています。Getting Startedをコピペしたものが以下のスクリプトです。</p><figure class="highlight python"><figcaption><span>main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paho.mqtt.client</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">Endpoint = <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxx.iot.ap-northeast-1.amazonaws.com&quot;</span></span><br><span class="line">Port = <span class="number">8883</span></span><br><span class="line">SubTopic = <span class="string">&quot;topic/to/subscribe&quot;</span></span><br><span class="line">RootCAFile = <span class="string">&quot;AmazonRootCA1.pem&quot;</span></span><br><span class="line">CertFile = <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-certificate.pem.crt&quot;</span></span><br><span class="line">KeyFile = <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-private.pem.key&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_connect</span>(<span class="params">client, userdata, flags, rc</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Connected with result code &quot;</span>+<span class="built_in">str</span>(rc))</span><br><span class="line">    client.subscribe(SubTopic)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span>(<span class="params">client, userdata, msg</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Received:&quot;</span> + msg.payload.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    client = paho.mqtt.client.Client()</span><br><span class="line">    client.on_connect = on_connect</span><br><span class="line">    client.on_message = on_message</span><br><span class="line">    client.tls_set(</span><br><span class="line">        RootCAFile,</span><br><span class="line">        certfile=CertFile,</span><br><span class="line">        keyfile=KeyFile,</span><br><span class="line">        cert_reqs=ssl.CERT_REQUIRED,</span><br><span class="line">        tls_version=ssl.PROTOCOL_TLSv1_2,</span><br><span class="line">        ciphers=<span class="literal">None</span>)</span><br><span class="line">    client.connect(Endpoint, port=Port, keepalive=<span class="number">60</span>)</span><br><span class="line">    client.loop_forever()</span><br></pre></td></tr></table></figure><p>適切にSubscribeできているのかAWS IoTのMQTT test clientで確かめます。</p><p>上記Pythonスクリプトを実行した状態でAWS IoTコンソールから「トピックをサブスクライブする」で<code>topic/to/subscribe</code>をサブスクライブした後に「トピックを公開する」でメッセージペイロードを発行してください。下図の様に「”AWS IoTコンソールからの挨拶”」を受信できていれば成功です。</p><img src="/images/20211001a/pymqtt.gif" alt="pymqtt.gif" width="1200" height="432" loading="lazy"><h2 id="2-AWS-LambdaからAWS-IoT経由でPublishする"><a href="#2-AWS-LambdaからAWS-IoT経由でPublishする" class="headerlink" title="2. AWS LambdaからAWS IoT経由でPublishする"></a>2. AWS LambdaからAWS IoT経由でPublishする</h2><p>次に、AWS LambdaからAWS IoT経由でメッセージをPublishしましょう。</p><p>ここで1点注意点があります。AWS Lambdaのリージョンは「オレゴン」としてください。これは後の工程でAlexa Home Skillと連携するためです。AWS IoTのリージョンは「東京」のままで大丈夫です。</p><p>大事なことなのでもう一度言います。</p><p><strong>「AWS Lambdaのリージョンは「オレゴン」としてください。」</strong></p><p>まずはLambdaに設定するIAMロールを作成します。</p><p>コンソールからポリシーを新規作成してください。</p><ul><li><a href="https://console.aws.amazon.com/iamv2/home#/roles">IAM Management Console</a></li></ul><h3 id="ポリシーの作成"><a href="#ポリシーの作成" class="headerlink" title="ポリシーの作成"></a>ポリシーの作成</h3><p>JSON タブを選択して以下を入力してください。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;Version&quot;</span>: <span class="string">&quot;2012-10-17&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Statement&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;Effect&quot;</span>: <span class="string">&quot;Allow&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Action&quot;</span>: <span class="string">&quot;iot:Publish&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Resource&quot;</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記の設定でAWS IoTでのPublishの権限のみが付与されます。適当なポリシー名を設定しましょう。タグは選択しなくて問題ありません。</p><p>次に上記で作成したポリシーを付与するIAMロールを作成します。ユースケースは「Lambda」を選択してください。「権限の設定」ページで作成したポリシーを検索、付与します。ここでもタグの設定ページがありますが、入力はしなくても問題ありません。</p><img src="/images/20211001a/image_3.png" alt="image.png" width="1200" height="455" loading="lazy"><p>以上の設定を行うことでAWS Lambda作成時に「既存のロール」から作成したロールを付与することが可能となります。(今回は「my」という名前のロールを作成しています。)</p><h3 id="AWS-Lambdaの作成"><a href="#AWS-Lambdaの作成" class="headerlink" title="AWS Lambdaの作成"></a>AWS Lambdaの作成</h3><p>以下の様スクリプトをlambda_function.pyに張り付けてください。Lambdaのリージョンが「オレゴン」<code>iot = boto3.client(&#39;iot-data&#39;,&#39;ap-northeast-1&#39;)</code>の設定に東京(‘ap-northeast-1’)が選択されていることに注意してください。AWS IoTが「オレゴン」で設定されている場合は’ap-northeast-1’は不要です。</p><figure class="highlight python"><figcaption><span>lambda_function.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"></span><br><span class="line">iot = boto3.client(<span class="string">&quot;iot-data&quot;</span>,<span class="string">&quot;ap-northeast-1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lambda_handler</span>(<span class="params">event, context</span>):</span></span><br><span class="line"></span><br><span class="line">    topic = <span class="string">&quot;topic/to/subscribe&quot;</span></span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&quot;message&quot;</span>: <span class="string">&quot;AWS Lambda からの挨拶&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        iot.publish(</span><br><span class="line">            topic=topic,</span><br><span class="line">            qos=<span class="number">0</span>,</span><br><span class="line">            payload=json.dumps(payload, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Succeeeded.&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Failed.&quot;</span></span><br></pre></td></tr></table></figure><img src="/images/20211001a/py-mqtt2.gif" alt="py-mqtt2.gif" width="1200" height="432" loading="lazy"><p>上記スクリプトを実行して下図の様に「AWS Lambdaからの挨拶」が表示されていれば成功です。</p><p>次の章でAlexa Home Skillを作成します。</p><h2 id="3-Alexa-Home-Skillでスキルを作成する"><a href="#3-Alexa-Home-Skillでスキルを作成する" class="headerlink" title="3. Alexa Home Skillでスキルを作成する"></a>3. Alexa Home Skillでスキルを作成する</h2><p>Alexa Home Skillを作成する前にAmazon　Developerアカウントを作成します。Amazon DeveloperアカウントやAlexa Developerコンソールを使用した経験がある方も本章の内容確認は必ず行ってください。<strong>特に、amazon.comでの購入経験がある方は要注意です。</strong>ここで手順を誤ってしまうと無限に時間を溶かします。<br>（私は溶かしました。）</p><p>泥沼の中から私を救ってくれた記事はこちらです。</p><ul><li><a href="https://dev.classmethod.jp/articles/solution-of-a-problem-amazon-com-account-conflict/">Amazon.comアカウントが優先してAlexaアプリに入れない問題の解決法 | DevelopersIO</a></li></ul><p>結論から申し上げると、amazon.comのアカウントをお持ちの方（過去にamazon.comでの購入経験がある方）はパスワードをamazon.jpとは異なるパスワードで設定してください。</p><p>その上で、<a href="https://developer.amazon.com/ja/">Amazon開発者ポータル</a>から普段amazon.jpで使用しているアカウントでログインしてください。(正確には使用するAmazon Echo Dotに紐づいているアカウントです。)</p><img src="/images/20211001a/image_4.png" alt="image.png" width="1200" height="545" loading="lazy"><p>それでは、スキルを作成します。Alexa&gt;スキル開発&gt;開発者コンソールよりスキル作成画面に遷移してください。<a href="https://developer.amazon.com/alexa/console/ask">Amazon Alexa Console - Amazon Alexa Official Site</a></p><p>本記事では、<code>alexa-dht22</code>というスキルを作成しました。</p><img src="/images/20211001a/image_5.png" alt="image.png" width="1075" height="439" loading="lazy"><p>スキル作成画面では以下の項目を選択してください。「スマートホーム」「ユーザー定義のプロビジョニング」です。<br><img src="/images/20211001a/image_6.png" alt="image.png" width="1010" height="891" loading="lazy"></p><p>スキルの作成は以上で完了です。次にAlexa Home SkillとAWS Lambdaの連携を行います。</p><h2 id="4-Alexa-Home-SkillとAWS-Lambda、-AWS-IoTを連携する"><a href="#4-Alexa-Home-SkillとAWS-Lambda、-AWS-IoTを連携する" class="headerlink" title="4. Alexa Home SkillとAWS Lambda、 AWS IoTを連携する"></a>4. Alexa Home SkillとAWS Lambda、 AWS IoTを連携する</h2><p>本章で説明する内容は以下のWikiに記載されています。不明瞭なことがある場合は参照してください。</p><ul><li><a href="https://github.com/alexa/alexa-smarthome/wiki/Build-a-Working-Smart-Home-Skill-in-15-Minutes">Build a Working Smart Home Skill in 15 Minutes · alexa/alexa-smarthome Wiki</a></li></ul><p>まずはセキュリティプロファイルを作成します。<a href="https://developer.amazon.com/ja/">Amazon開発者ポータル</a>＞Login with Amazonでセキュリティプロファイルを新規作成してください。</p><p>今回は<code>alexa-dht22</code>という名称で作成しています。</p><img src="/images/20211001a/image_7.png" alt="image.png" width="742" height="642" loading="lazy"><p>作成が完了するとクライアントIDとクライアントシークレットの2つが発行されます。<br>この2つは後程使用するので、手元にメモしておきましょう。</p><p>ここで一度Alexa Developerコンソールに戻って設定を行います。<br>以下、Wikiに記載されている手順です。</p><blockquote><ul><li>Lambda ARN default = enter your Lambda ARN noted from the previous step</li><li>Authorization URI = <a href="https://www.amazon.com/ap/oa">https://www.amazon.com/ap/oa</a></li><li>Client ID = your client ID from LWA noted in a previous step</li><li>Scope: profile (click Add Scope first to add)</li><li>Access Token URI: <a href="https://api.amazon.com/auth/o2/token">https://api.amazon.com/auth/o2/token</a></li><li>Client Secret: your client secret from LWA noted in a previous step</li><li>Client Authentication Scheme: HTTP Basic (Recommended)</li><li>Click Save</li></ul></blockquote><p>作成したスキルを選択後「スマートホーム」という画面でLambad関数のArnを設定します。</p><img src="/images/20211001a/skill.png" alt="skill.png" width="1200" height="618" loading="lazy">次に以下の項目を設定してください。<div class="scroll"><table><thead><tr><th>項目</th><th>設定内容</th></tr></thead><tbody><tr><td>Web認証画面のURI</td><td><a href="https://www.amazon.com/ap/oa">https://www.amazon.com/ap/oa</a></td></tr><tr><td>アクセストークンのURI</td><td><a href="https://api.amazon.com/auth/o2/token">https://api.amazon.com/auth/o2/token</a></td></tr><tr><td>ユーザーのクライアントID</td><td>セキュリティプロファイル作成時に発行されたID</td></tr><tr><td>ユーザーのシークレット</td><td>セキュリティプロファイル作成時に発行されたシークレット</td></tr><tr><td>ユーザーの認可スキーム</td><td>HTTP Basic認証</td></tr><tr><td>スコープ</td><td>profile</td></tr></tbody></table></div><p>Alexaのリダイレクト先のURLには3つのURLが記載されていると思います。</p><p>こちらは後の工程で使用するため、手元にメモしておきます(保存後に確認することもできます)。</p><img src="/images/20211001a/skill2.png" alt="skill2.png" width="1200" height="735" loading="lazy"><p>次に<a href="https://developer.amazon.com/ja/">Amazon開発者ポータル</a>にて先ほどの3つのURLを設定します。</p><p>「許可された返信URL」に先ほどメモしたURLを一つずつ登録します。<br><img src="/images/20211001a/skill3.png" alt="skill3.png" width="1200" height="402" loading="lazy"></p><p>次が最後の設定項目です。Alexa Developerコンソールのスマートホーム画面にてスキルIDをコピーしてください。こちらをAWS Lambdaのトリガーに設定することで連携の完了です。</p><p>先ほど作成したLambad関数でトリガーを設定します。</p><img src="/images/20211001a/skill4.png" alt="skill4.png" width="1200" height="719" loading="lazy">「アプリケーションID」の部分に先ほどメモした「スキルID」を設定すれば完了です。<h2 id="5-Alexa-Home-Skillを開発する"><a href="#5-Alexa-Home-Skillを開発する" class="headerlink" title="5. Alexa Home Skillを開発する"></a>5. Alexa Home Skillを開発する</h2><p>スクラッチで開発するのは大変ですので、こちらのリポジトリを転用します。</p><ul><li><a href="https://github.com/alexa/alexa-smarthome">alexa/alexa-smarthome: Resources for Alexa Smart Home developers.</a></li></ul><p>実装はこちらの公式サイトを参考にさせていただきました。</p><ul><li><a href="https://developer.amazon.com/ja/blogs/alexa/post/6cca52f7-1008-4506-9d75-283555c628d3/how-to-create-smart-home-jp-skill-1">スマートホームスキルを作る （１） サンプルコードからスキルの基本要素を作る : Alexa Blogs</a></li><li><a href="https://developer.amazon.com/ja/blogs/alexa/post/954bdd49-e657-4059-930a-5658010d1234/how-to-create-smart-home-jp-skill-2">スマートホームスキルを作る (２) 各ディレクテイブを処理する : Alexa Blogs</a></li></ul><p>今回は”Smart Switch”を使用します。</p><p>編集するのはlambda.pyのみです。</p><p>上記のリポジトリを編集したコードを</p><ul><li><a href="https://github.com/orangekame3/lambda-alexa/tree/main/python">lambda-alexa/python at main · orangekame3/lambda-alexa</a></li></ul><p>で公開しているので参考にしてください。</p><p>サンプルコードのSAMPLE_APPLIANCESを以下に置き換えてください。</p><figure class="highlight python"><figcaption><span>lambda.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">SAMPLE_APPLIANCES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;applianceId&quot;</span>: <span class="string">&quot;Bot&quot;</span>,</span><br><span class="line">        <span class="string">&quot;manufacturerName&quot;</span>: <span class="string">&quot;Sample Manufacturer&quot;</span>,</span><br><span class="line">        <span class="string">&quot;modelName&quot;</span>: <span class="string">&quot;Smart Switch&quot;</span>,</span><br><span class="line">        <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;friendlyName&quot;</span>: <span class="string">&quot;温湿度マイスター&quot;</span>,</span><br><span class="line">        <span class="string">&quot;friendlyDescription&quot;</span>: <span class="string">&quot;最適な室内環境を目指します。&quot;</span>,</span><br><span class="line">        <span class="string">&quot;isReachable&quot;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&quot;actions&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;turnOn&quot;</span>,</span><br><span class="line">            <span class="string">&quot;turnOff&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;additionalApplianceDetails&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;detail1&quot;</span>: <span class="string">&quot;For simplicity, this is the only appliance&quot;</span>,</span><br><span class="line">            <span class="string">&quot;detail2&quot;</span>: <span class="string">&quot;that has some values in the additionalApplianceDetails&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>サンプルコードでは「スマートスイッチ」「スマート温度計」「スマート鍵」など各種機能があらかじめ設定されているため、残していると今回作成したスキルを見失ってしまいます。消してしまいましょう。</p><p>ここで<code>modelName</code>には<code>Smart Switch</code>を指定します。<code>Smart Switch</code>はサンプルコードでロジックに組み込まれた文字列であるため、変更はしないでください。<code>friendlyName</code>や<code>friendlyDescription</code>はAlexaアプリ上での表示名です。自由に変更して構いません。</p><p>また、アプリ上での画面は温度計の表示したいため、<code>get_display_categories_from_v2_appliance(appliance)</code>に変更を加えました。<br>UIを温度計にする場合は<code>displayCategories</code>を<code>THERMOSTAT</code>を指定してください。</p><figure class="highlight python"><figcaption><span>lambda.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_display_categories_from_v2_appliance</span>(<span class="params">appliance</span>):</span></span><br><span class="line">    model_name = appliance[<span class="string">&quot;modelName&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> model_name == <span class="string">&quot;Smart Switch&quot;</span>: displayCategories = [<span class="string">&quot;THERMOSTAT&quot;</span>]</span><br><span class="line">    <span class="keyword">return</span> displayCategories</span><br></pre></td></tr></table></figure><p>最後にRaspberryPiに向けてMQTTでPublishを行うために以下の関数を追加します。</p><figure class="highlight python"><figcaption><span>lambda.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">省略</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">client = boto3.client(<span class="string">&quot;iot-data&quot;</span>, region_name=<span class="string">&quot;ap-northeast-1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_command</span>() :</span></span><br><span class="line">    payload = &#123;</span><br><span class="line">        <span class="string">&quot;message&quot;</span>: <span class="string">&quot;関数を実行するぜ！！&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    topic =<span class="string">&quot;topic/to/subscribe&quot;</span></span><br><span class="line">    client.publish(</span><br><span class="line">        topic=topic,</span><br><span class="line">        qos=<span class="number">0</span>,</span><br><span class="line">        payload=json.dumps(payload, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p><code>send_command()</code>の実行は<code>def handle_non_discovery_v3(request)</code>の末尾に仕込みます。もし、<code>ON</code>と<code>OFF</code>で操作を変えたい場合は関数内のif文にロジックを記載してください。今回はトリガーとしてのみAlexaを使用するため、関数末尾に記載しています。</p><p>ここまで変更ができたら関数をデプロイしましょう。</p><p>サンプルコードのpythonディレクトリをzip化してAWS Lambdaにアップロードしてください。この時handler関数の設定は<code>lambda.lambda_handler</code>としてください。</p><h2 id="6-Alexaアプリと連携する"><a href="#6-Alexaアプリと連携する" class="headerlink" title="6. Alexaアプリと連携する"></a>6. Alexaアプリと連携する</h2><p>Alexaアプリを起動し、「デバイス&gt;スマートホームスキル」と進むと先ほど作成したスキルが表示されます。スキルを有効化し、デバイスの探索を行ってください。Lambad関数が正しく記述できている場合はデバイスの探索が無事完了し、「温湿度マイスター」が登録されているはずです。</p><img src="/images/20211001a/alexa2.png" alt="alexa2.png" width="1200" height="958" loading="lazy"><p>それでは最後にAlexaアプリ上で「その他&gt;定型アクション」より、「アレクサ、不快指数は？」という呼びかけをトリガーとして「温湿度マイスターを起動する」アクションを作成します。</p><p>続く章ではローカルで実行するワーカーの実装を行います。</p><h2 id="7-ローカルのスクリプトを実行し、Alexaをしゃべらせる"><a href="#7-ローカルのスクリプトを実行し、Alexaをしゃべらせる" class="headerlink" title="7. ローカルのスクリプトを実行し、Alexaをしゃべらせる"></a>7. ローカルのスクリプトを実行し、Alexaをしゃべらせる</h2><p>本章のスクリプトは以下で公開していますので、参考にしてください。<br><a href="https://github.com/orangekame3/py-subscriber">orangekame3/py-subscriber</a></p><p>あと少しで完成です。ローカルのスクリプトを実行するためにAWS IoTをSubscribeします。</p><figure class="highlight python"><figcaption><span>main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paho.mqtt.client</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> plot</span><br><span class="line"></span><br><span class="line">Endpoint = <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxx.iot.ap-northeast-1.amazonaws.com&quot;</span></span><br><span class="line">Port = <span class="number">8883</span></span><br><span class="line">SubTopic = <span class="string">&quot;topic/to/subscribe&quot;</span></span><br><span class="line">RootCAFile = <span class="string">&quot;AmazonRootCA1.pem&quot;</span></span><br><span class="line">CertFile = <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-certificate.pem.crt&quot;</span></span><br><span class="line">KeyFile = <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-private.pem.key&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_connect</span>(<span class="params">client, userdata, flags, respons_code</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;connected&quot;</span>)</span><br><span class="line">    client.subscribe(SubTopic)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span>(<span class="params">client, userdata, msg</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;received:&quot;</span> + msg.payload.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    data = json.loads(msg.payload.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    message = plot.worker()</span><br><span class="line">    cmd = [<span class="string">&quot;./alexa_remote_control.sh&quot;</span>, <span class="string">&quot;-e&quot;</span>, <span class="string">&quot;speak:&quot;</span> + message]</span><br><span class="line">    res = subprocess.call(cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    client = paho.mqtt.client.Client()</span><br><span class="line">    client.on_connect = on_connect</span><br><span class="line">    client.on_message = on_message</span><br><span class="line">    client.tls_set(</span><br><span class="line">        RootCAFile,</span><br><span class="line">        certfile=CertFile,</span><br><span class="line">        keyfile=KeyFile,</span><br><span class="line">        cert_reqs=ssl.CERT_REQUIRED,</span><br><span class="line">        tls_version=ssl.PROTOCOL_TLSv1_2,</span><br><span class="line">        ciphers=<span class="literal">None</span>)</span><br><span class="line">    client.connect(Endpoint, port=Port, keepalive=<span class="number">60</span>)</span><br><span class="line">    client.loop_forever()</span><br></pre></td></tr></table></figure><p>AWS LambdaからPublishされたメッセージを受信した際に</p><ul><li><a href="/articles/20210929a/">GoでMQTT!!　～温湿度マイスターbotの作成～(前編) | フューチャー技術ブログ</a></li><li><a href="/articles/20210930a/">GoでMQTT!!　～温湿度マイスターbotの作成～(後編) | フューチャー技術ブログ</a></li></ul><p>で作成した</p><p>「温湿度マイスターbot」のワーカーを起動しています。worker()の戻り値は温湿度情報の最新値および不快指数です。</p><p>workerはplot.pyにて以下の様に定義されています。</p><figure class="highlight python"><figcaption><span>plot.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> slack_sdk.web <span class="keyword">import</span> WebClient</span><br><span class="line"><span class="keyword">from</span> dynamodb_json <span class="keyword">import</span> json_util <span class="keyword">as</span> util</span><br><span class="line"><span class="keyword">from</span> boto3.session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> pytz</span><br><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> boto3.dynamodb.conditions <span class="keyword">import</span> Key</span><br><span class="line"></span><br><span class="line">session = Session(profile_name=<span class="string">&quot;default&quot;</span>, region_name=<span class="string">&#x27;ap-northeast-1&#x27;</span>)</span><br><span class="line">dynamodb = session.resource(<span class="string">&quot;dynamodb&quot;</span>)</span><br><span class="line">dynamodb_table = dynamodb.Table(<span class="string">&quot;mydht22&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_table</span>(<span class="params">now</span>):</span></span><br><span class="line">    begin = now - datetime.timedelta(days=<span class="number">7</span>)</span><br><span class="line">    response = dynamodb_table.query(</span><br><span class="line">        KeyConditionExpression=Key(<span class="string">&quot;device_id&quot;</span>).eq(<span class="string">&#x27;01&#x27;</span>) &amp; Key(<span class="string">&quot;timestamp&quot;</span>).between(</span><br><span class="line">            begin.isoformat(sep = <span class="string">&quot;T&quot;</span>,timespec=<span class="string">&quot;milliseconds&quot;</span>),</span><br><span class="line">            now.isoformat(sep = <span class="string">&quot;T&quot;</span>,timespec=<span class="string">&quot;milliseconds&quot;</span>)))</span><br><span class="line">    data = response[<span class="string">&quot;Items&quot;</span>]</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unmarshall</span>(<span class="params">dynamodb_json</span>):</span></span><br><span class="line">    regular_json = util.loads(dynamodb_json)</span><br><span class="line">    <span class="keyword">return</span> regular_json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span>():</span></span><br><span class="line">    now = datetime.datetime.now(pytz.timezone(<span class="string">&quot;Asia/Tokyo&quot;</span>))</span><br><span class="line">    executed_time = now.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Executed:&quot;</span>, executed_time)</span><br><span class="line"></span><br><span class="line">    data = query_table(now)</span><br><span class="line">    json_data = unmarshall(data)</span><br><span class="line">    Humidity = []</span><br><span class="line">    Temperature = []</span><br><span class="line">    Timestamp = []</span><br><span class="line">    temp = <span class="number">0</span></span><br><span class="line">    humid = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(json_data)):</span><br><span class="line">        temp = json_data[i][<span class="string">&quot;temperature&quot;</span>]</span><br><span class="line">        humid = json_data[i][<span class="string">&quot;humidity&quot;</span>]</span><br><span class="line">        times = json_data[i][<span class="string">&quot;timestamp&quot;</span>][<span class="number">5</span>:<span class="number">16</span>]</span><br><span class="line">        Humidity.append(humid)</span><br><span class="line">        Temperature.append(temp)</span><br><span class="line">        Timestamp.append(times)</span><br><span class="line"></span><br><span class="line">    fukaisisuu = np.<span class="built_in">round</span>(<span class="number">0.81</span> * temp + <span class="number">0.01</span> * humid *</span><br><span class="line">                          (<span class="number">0.99</span> * temp - <span class="number">14.3</span>) + <span class="number">46.3</span>, <span class="number">2</span>)</span><br><span class="line">    fukai = <span class="string">&quot;不快指数は&quot;</span> + <span class="built_in">str</span>(fukaisisuu) + <span class="string">&quot;です。&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(Temperature) &gt; <span class="number">15</span>:</span><br><span class="line">        Temperature = Temperature[<span class="built_in">len</span>(Temperature) - <span class="number">15</span>:]</span><br><span class="line">        Humidity = Humidity[<span class="built_in">len</span>(Humidity) - <span class="number">15</span>:]</span><br><span class="line">        Timestamp = Timestamp[<span class="built_in">len</span>(Timestamp) - <span class="number">15</span>:]</span><br><span class="line"></span><br><span class="line">    plt.rcParams[<span class="string">&quot;font.family&quot;</span>] = <span class="string">&quot;DejaVu Sans&quot;</span></span><br><span class="line">    plt.rcParams[<span class="string">&quot;mathtext.fontset&quot;</span>] = <span class="string">&quot;stix&quot;</span></span><br><span class="line">    plt.rcParams[<span class="string">&quot;font.size&quot;</span>] = <span class="number">20</span></span><br><span class="line">    plt.rcParams[<span class="string">&quot;xtick.labelsize&quot;</span>] = <span class="number">10</span></span><br><span class="line">    plt.rcParams[<span class="string">&quot;ytick.labelsize&quot;</span>] = <span class="number">10</span></span><br><span class="line">    plt.rcParams[<span class="string">&quot;figure.figsize&quot;</span>] = (<span class="number">8</span>, <span class="number">6</span>)</span><br><span class="line">    <span class="built_in">print</span>(fukai)</span><br><span class="line"></span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    ax1 = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">    ln1 = ax1.plot(</span><br><span class="line">        Timestamp,</span><br><span class="line">        Temperature,</span><br><span class="line">        marker=<span class="string">&#x27;o&#x27;</span>,</span><br><span class="line">        markeredgewidth=<span class="number">1.</span>,</span><br><span class="line">        markeredgecolor=<span class="string">&#x27;k&#x27;</span>,</span><br><span class="line">        color=<span class="string">&quot;orange&quot;</span>,</span><br><span class="line">        label=<span class="string">r&quot;$Temperature$&quot;</span>)</span><br><span class="line">    ax2 = ax1.twinx()</span><br><span class="line">    ln2 = ax2.plot(</span><br><span class="line">        Timestamp,</span><br><span class="line">        Humidity,</span><br><span class="line">        marker=<span class="string">&#x27;o&#x27;</span>,</span><br><span class="line">        markeredgewidth=<span class="number">1.</span>,</span><br><span class="line">        markeredgecolor=<span class="string">&#x27;k&#x27;</span>,</span><br><span class="line">        color=<span class="string">&quot;blue&quot;</span>,</span><br><span class="line">        label=<span class="string">r&#x27;$Humidity$&#x27;</span>)</span><br><span class="line">    h1, l1 = ax1.get_legend_handles_labels()</span><br><span class="line">    h2, l2 = ax2.get_legend_handles_labels()</span><br><span class="line">    ax1.legend(h1 + h2, l1 + l2, loc=<span class="string">&#x27;upper right&#x27;</span>)</span><br><span class="line">    ax1.set_ylim([<span class="number">20</span>, <span class="number">32</span>])</span><br><span class="line">    ax2.set_ylim([<span class="number">25</span>, <span class="number">85</span>])</span><br><span class="line">    ax1.axhspan(<span class="number">25</span>, <span class="number">28</span>, color=<span class="string">&quot;olive&quot;</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">    ax2.axhspan(<span class="number">40</span>, <span class="number">70</span>, color=<span class="string">&quot;royalblue&quot;</span>, alpha=<span class="number">0.2</span>)</span><br><span class="line">    ax1.set_xlabel(<span class="string">r&quot;$Timestamp$&quot;</span>)</span><br><span class="line">    ax1.set_ylabel(<span class="string">r&quot;$Temperature$&quot;</span>)</span><br><span class="line">    ax2.set_ylabel(<span class="string">r&quot;$Humidity$&quot;</span>)</span><br><span class="line">    ax1.grid(<span class="literal">True</span>)</span><br><span class="line">    plt.gcf().autofmt_xdate()</span><br><span class="line">    plt.savefig(<span class="string">&quot;室内温湿度.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line">    client = WebClient(</span><br><span class="line">        token=<span class="string">&quot;xoxb-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span>)</span><br><span class="line">    response = client.chat_postMessage(text=<span class="string">&quot; Temp : &quot;</span> + <span class="built_in">str</span>(Temperature[-<span class="number">1</span>]) + <span class="string">&quot;℃, Humid : &quot;</span> + <span class="built_in">str</span>(</span><br><span class="line">        Humidity[-<span class="number">1</span>]) + <span class="string">&quot;%, message : &quot;</span> + fukai, channel=<span class="string">&quot;#home&quot;</span>)</span><br><span class="line">    response = client.files_upload(</span><br><span class="line">        channels=<span class="string">&quot;#home&quot;</span>,</span><br><span class="line">        file=<span class="string">&quot;./室内温湿度.jpg&quot;</span>,</span><br><span class="line">        title=<span class="string">&quot;室内温湿度&quot;</span>)</span><br><span class="line"></span><br><span class="line">    message = <span class="string">&quot;室内温度は&quot;</span> + <span class="built_in">str</span>(Temperature[-<span class="number">1</span>]) + \</span><br><span class="line">        <span class="string">&quot;度。湿度は&quot;</span> + <span class="built_in">str</span>(Humidity[-<span class="number">1</span>]) + <span class="string">&quot;%です。&quot;</span> + fukai</span><br><span class="line">    <span class="keyword">return</span> message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    session = Session(profile_name=<span class="string">&quot;default&quot;</span>, region_name=<span class="string">&quot;ap-northeast-1&quot;</span>)</span><br><span class="line">    dynamodb = session.resource(<span class="string">&quot;dynamodb&quot;</span>)</span><br><span class="line">    dynamodb_table = dynamodb.Table(<span class="string">&quot;mydht22&quot;</span>)</span><br><span class="line">    schedule.every(<span class="number">2</span>).seconds.do(worker)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        schedule.run_pending()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>alexaの音声操作にはこちらのシェルスクリプトを使用しています。</p><ul><li><a href="https://github.com/thorsten-gehrig/alexa-remote-control">thorsten-gehrig/alexa-remote-control: control Amazon Alexa from command Line (set volume, select station from tunein or pandora)</a></li></ul><p>使い方についてはこちらの日本語の記事で詳細に紹介されています。</p><ul><li><a href="https://dream-soft.mydns.jp/blog/developper/smarthome/2021/03/2932/">Alexaを自由に喋らせる方法（コマンドライン編） | 育児×家事×IoT</a></li></ul><p>リポジトリからローカルにクローンをし、アカウントのセットアップ後すぐに使うことができます。<br>例えば、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./alexa_remote_control.sh -e <span class="string">&quot;speak:おはよう&quot;</span></span><br></pre></td></tr></table></figure><p>などを実行することで自分のEcho端末を自由に喋らせることができます。</p><p>それでは<code>main.py</code>を実行してAWS IoTをSubscribeしましょう。</p><h1 id="Alexaに話しかける"><a href="#Alexaに話しかける" class="headerlink" title="Alexaに話しかける"></a>Alexaに話しかける</h1><p>それではAlexaに話しかけましょう。</p><p>「Alexa 、不快指数は？」</p><iframe width="560" height="315" src="https://www.youtube.com/embed/YfbDl6xolV8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><p>どうでしょうか、Alexaは不快指数を教えてくれたでしょうか。</p><p>温湿度センサーを用いたデータの取得、MQTTによるDynamoDBへのデータ連携、Alexaを使ったデバイス操作などを行ってきましたが、能動的に動作するプロダクトはこれまでとは違った喜びがありますね。</p><p>Alexa周りはまだまだ分からないことばかりですが、これを機に学習してみようと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/IoT/">IoT</category>
      
      
      <category domain="https://future-architect.github.io/tags/IoT/">IoT</category>
      
      <category domain="https://future-architect.github.io/tags/Python/">Python</category>
      
      <category domain="https://future-architect.github.io/tags/Alexa/">Alexa</category>
      
      <category domain="https://future-architect.github.io/tags/RaspberryPi/">RaspberryPi</category>
      
      <category domain="https://future-architect.github.io/tags/MQTT/">MQTT</category>
      
      
      <comments>https://future-architect.github.io/articles/20211001a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GoでMQTT!!　～温湿度マイスターbotの作成～(後編)</title>
      <link>https://future-architect.github.io/articles/20210930a/</link>
      <guid>https://future-architect.github.io/articles/20210930a/</guid>
      <pubDate>Wed, 29 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20210930a/サムネイル2.png&quot; alt=&quot;&quot; title=&quot;Louis Reed on Unsplash&quot; width=&quot;1200&quot; height=&quot;675&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20210930a/サムネイル2.png" alt="" title="Louis Reed on Unsplash" width="1200" height="675" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG/DXユニット所属の宮永です。</p><p><strong>本記事は<a href="https://future-architect.github.io/articles/20210929a/">「GoでMQTT!!　～温湿度マイスターbotの作成～(前編) 」</a>の後半パートです。</strong></p><p>前半パートの記事をご覧になっていない方はそちらもご参照ください。</p><blockquote><p>今回はAWSサービスのうちの一つAWS IoTを使用してRaspberryPiとのMQTTによる通信を行います。</p></blockquote><p>AWS IoTを使用したMQTTのチュートリアルはAWS公式からも詳細なハンズオン記事が出ています。</p><ul><li><em><a href="https://aws-iot-core-for-beginners.workshop.aws/phase3/step1.html">AWS IoT Core の設定 :: AWS IoT Core 初級 ハンズオン</a></em></li></ul><p>本記事はこちらのハンズオンを基にGo言語を使用してMQTTによる通信を行いました。(公式の記事はPythonで実装されています。)</p><p>最終的には室内の快適な温湿度を教えてくれる「温湿度マイスターbot」を作成します。</p><p>なお、本記事で作成したコードは</p><ul><li><em><a href="https://github.com/orangekame3/go-mqtt">orangekame3/go-mqtt</a></em></li><li><em><a href="https://github.com/orangekame3/th-meisterBot">orangekame3/th-meisterBot</a></em></li></ul><p>にて公開しています。</p><h1 id="前回の振り返り"><a href="#前回の振り返り" class="headerlink" title="前回の振り返り"></a>前回の振り返り</h1><p>実装は以下の手順で進めます。<br>前回の記事では<strong>「3. DHT22の温湿度情報をAWS IoTへPublish」</strong>までを行いました。</p><ol><li>DHT22から温湿度情報を取得する</li><li>AWS IoTを使用してRaspberryPiからのPublish動作確認</li><li>DHT22の温湿度情報をAWS IoTへPublish　　　　　　　　👈ココまでやりました。</li><li>AWS IoTで取得した温湿度情報をDynamoDBに連携　</li><li>Boto3を使用してDynamoDBからデータをQuery、データ整形</li><li>取得データをmatplotlibで可視化</li><li>作成したプロット図をSlack APIで画像投稿</li></ol><p>本記事では<strong>「4. AWS IoTで取得した温湿度情報をDynamoDBに連携」</strong>から取り組みます。　</p><h2 id="4-AWS-IoTで取得した温湿度情報をDynamoDBに連携"><a href="#4-AWS-IoTで取得した温湿度情報をDynamoDBに連携" class="headerlink" title="4. AWS IoTで取得した温湿度情報をDynamoDBに連携"></a>4. AWS IoTで取得した温湿度情報をDynamoDBに連携</h2><p>DynamoDBについては入門記事などが弊社ブログでも投稿されているため説明は割愛いたします。</p><ul><li><em><a href="https://future-architect.github.io/tags/DynamoDB/">DynamoDB の記事一覧 | フューチャー技術ブログ</a></em></li></ul><p>AWS IoTで受信したデータをDynamoDBに登録する方法は公式に詳細に記載されています。</p><ul><li><em><a href="https://docs.aws.amazon.com/ja_jp/iot/latest/developerguide/iot-ddb-rule.html">デバイスデータを DynamoDB テーブルに保存する - AWS IoT Core</a></em></li></ul><p>公式のドキュメントは非常に丁寧にまとめられているため、本記事では要点のみ記載します。</p><h3 id="テーブルの新規作成"><a href="#テーブルの新規作成" class="headerlink" title="テーブルの新規作成"></a>テーブルの新規作成</h3><p>まずはテーブルの作成です。テーブル名は任意ですが、今回は<code>mydht22</code>としました。Partition keyに<code>device_id</code>をSort keyに<code>timestamp</code>を定義しています。<br><img src="/images/20210930a/image.png" alt="image.png" width="797" height="508" loading="lazy"></p><h3 id="ルールの作成"><a href="#ルールの作成" class="headerlink" title="ルールの作成"></a>ルールの作成</h3><p>作成したテーブルにデータを送信するため、AWS IoT ルールの作成を行います。</p><p>AWS IoTコンソール上Act&gt;Ruleからルールの新規作成が行えます。SQLバージョンの使用は2016-03-23を使用しました。From句には <strong>「2. AWS IoTを使用してRaspberryPiからのPublish動作確認」</strong> の実装にてに定義したトピック名を記載してください。</p><p>今回の場合トピック名は「topic/to/publish」です。as句は通常のSQLと同じようにテーブル名となるため適宜定義してください。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="string">'01'</span> <span class="keyword">as</span> device_id</span><br><span class="line">,   <span class="type">Timestamp</span> <span class="keyword">as</span> <span class="type">timestamp</span></span><br><span class="line">,   Temperature <span class="keyword">as</span> temperature</span><br><span class="line">,   Humidity <span class="keyword">as</span> humidity</span><br><span class="line"><span class="keyword">FROM</span> <span class="string">'topic/to/publish'</span></span><br></pre></td></tr></table></figure><p>アクション追加の際には下図<strong>「DynamoDBテーブル(DynamoDBv2)の複数列にメッセージを分割する」</strong>を追加してください。<br><img src="/images/20210930a/image_2.png" alt="DynamoDBコンソール画面" width="818" height="247" loading="lazy"></p><p>リソースにテーブル<code>mydht22</code>選択してください。また、今回は<code>mydht22</code>という名称でロールを新規作成しました。</p><img src="/images/20210930a/image_3.png" alt="ロール作成" width="982" height="616" loading="lazy"><h3 id="疎通確認"><a href="#疎通確認" class="headerlink" title="疎通確認"></a>疎通確認</h3><p>最後にDynamoDBにデータが正しく登録されているか確認します。<br>DynamoDBコンソールにアクセスして、下図の様にデータが登録されていることを確認してください。</p><img src="/images/20210930a/image_4.png" alt="データ登録" width="675" height="511" loading="lazy"><p>作成したルールに従ってデータが登録されていますね！<br>次の章では、Boto3を使用してDynamoDBからデータを取得したうえで、扱いやすいようにデータを整形します。</p><h2 id="5-Boto3を使用してDynamoDBからデータをQuery、データ整形"><a href="#5-Boto3を使用してDynamoDBからデータをQuery、データ整形" class="headerlink" title="5. Boto3を使用してDynamoDBからデータをQuery、データ整形"></a>5. Boto3を使用してDynamoDBからデータをQuery、データ整形</h2><p>PythonモジュールBoto3を使用してDynamoDBからデータをQuery、最新値15点ほどを抜き出してプロットします。</p><p>Boto3を使用したQueryは非常に簡単に行えますが、Queryで取得したデータはDecimal型を含む特殊な構造をしているため、JSONに整形する必要があります。</p><p>今回JSONへの整形にはこちらのモジュールを利用させていただきました。</p><ul><li><em><a href="https://github.com/Alonreznik/dynamodb-json">Alonreznik/dynamodb-json: DynamoDB json util to load and dump strings of Dynamodb json format to python object and vise-versa</a></em></li></ul><p>それでは、以下のスクリプトによって作成したテーブル<em>mydht22</em>よりデータを取得、JSONファイルとして保存します。</p><blockquote><p>*※本環境ではAWS_PROFILEが設定してあることを前提としています。<br>AWS_PROFILEの設定方法は以下ををご参照ください。</p></blockquote><ul><li><a href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-configure-profiles.html">名前付きプロファイル - AWS Command Line Interface</a>*</li></ul><figure class="highlight python"><figcaption><span>query.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dynamodb_json <span class="keyword">import</span> json_util <span class="keyword">as</span> util</span><br><span class="line"><span class="keyword">from</span> boto3.session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">from</span> boto3.dynamodb.conditions <span class="keyword">import</span> Key</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_table</span>(<span class="params">executed_time</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    現在日時より過去７日間のデータをクエリ</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    begin = executed_time - datetime.timedelta(days=<span class="number">7</span>)</span><br><span class="line">    response = dynamodb_table.query(</span><br><span class="line">        KeyConditionExpression=Key(<span class="string">'device_id'</span>).eq(<span class="string">'01'</span>) &amp; Key(<span class="string">'timestamp'</span>).between(</span><br><span class="line">            begin.isoformat(sep = <span class="string">"T"</span>,timespec=<span class="string">"milliseconds"</span>),</span><br><span class="line">            executed_time.isoformat(sep = <span class="string">"T"</span>,timespec=<span class="string">"milliseconds"</span>)))</span><br><span class="line">    data = response[<span class="string">'Items'</span>]</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unmarshall</span>(<span class="params">dynamodb_json</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    dynamodbで取得したデータを通常のJDONへ整形</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    regular_json = util.loads(dynamodb_json)</span><br><span class="line">    <span class="keyword">return</span> regular_json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    now = datetime.datetime.now(pytz.timezone(<span class="string">'Asia/Tokyo'</span>))</span><br><span class="line">    raw = query_table(now)</span><br><span class="line">    data = unmarshall(raw)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'scan_data.json'</span>, mode=<span class="string">'wt'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        json.dump(data, file, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    session = Session(profile_name=<span class="string">'default'</span>, region_name=<span class="string">'ap-northeast-1'</span>)</span><br><span class="line">    dynamodb = session.resource(<span class="string">'dynamodb'</span>)</span><br><span class="line">    dynamodb_table = dynamodb.Table(<span class="string">'mydht22'</span>)</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>上記スクリプトの実行により出力されたJSONは</p><figure class="highlight json"><figcaption><span>query_data.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  {</span><br><span class="line">    <span class="attr">"device_id"</span>: <span class="string">"01"</span>,</span><br><span class="line">    <span class="attr">"humidity"</span>: <span class="number">42.5</span>,</span><br><span class="line">    <span class="attr">"temperature"</span>: <span class="number">26.9</span>,</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2021-09-23T17:50:42.522120086+09:00"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"device_id"</span>: <span class="string">"01"</span>,</span><br><span class="line">    <span class="attr">"humidity"</span>: <span class="number">42.7</span>,</span><br><span class="line">    <span class="attr">"temperature"</span>: <span class="number">27</span>,</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2021-09-23T17:51:45.55949297+09:00"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"device_id"</span>: <span class="string">"01"</span>,</span><br><span class="line">    <span class="attr">"humidity"</span>: <span class="number">42.7</span>,</span><br><span class="line">    <span class="attr">"temperature"</span>: <span class="number">26.9</span>,</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2021-09-23T17:52:46.600977247+09:00"</span></span><br><span class="line">  },</span><br><span class="line">...(省略)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>扱いやすいJSONファイルを取得することができました！！</p><p>それでは、次章で取得したデータをプロットしましょう。</p><h2 id="6-取得データをmatplotlibで可視化"><a href="#6-取得データをmatplotlibで可視化" class="headerlink" title="6. 取得データをmatplotlibで可視化"></a>6. 取得データをmatplotlibで可視化</h2><p>先ほど取得したデータを使用してプロットします。</p><p>今回はQueryによって得たデータのうち最新データ15点をプロットするようにしました。ただし、取得したデータをプロットするだけでは面白くないので不快指数を可視化できるようにしました。<br>天気予報で頻繁に耳にする不快指数ですが、以下論文にて数式化が掲載されていました。</p><ul><li><em><a href="https://www.metsoc.jp/tenki/pdf/2001/2001_09_0661.pdf">木内豪「屋外空間における温冷感指標に関する研究 (PDF) 」 『天気』第48巻第9号、2001年、 661-671頁。</a></em></li></ul><p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.355ex" xmlns="http://www.w3.org/2000/svg" width="2.341ex" height="1.887ex" role="img" focusable="false" viewBox="0 -677 1034.7 834.1"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></g></g></svg></mjx-container>を気温(℃)、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="2.009ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 888 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g></g></svg></mjx-container>を湿度(%)としたとき、</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="48.652ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 21504.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">不</text></g><g data-mml-node="mi" transform="translate(900,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">快</text></g><g data-mml-node="mi" transform="translate(1800,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">指</text></g><g data-mml-node="mi" transform="translate(2700,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">数</text></g><g data-mml-node="mo" transform="translate(3877.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4933.6,0)"><g data-mml-node="mstyle"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(778,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1278,0)"></path></g><g data-mml-node="msub" transform="translate(1778,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3034.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4035.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(1278,0)"></path></g><g data-mml-node="mi" transform="translate(5813.1,0)"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(6701.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(7090.1,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(778,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1278,0)"></path></g><g data-mml-node="msub" transform="translate(8868.1,0)"><g data-mml-node="mi"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><g data-mml-node="TeXAtom" transform="translate(617,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g><g data-mml-node="mo" transform="translate(10125.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(11125.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1000,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1278,0)"></path></g><g data-mml-node="mo" transform="translate(12903.3,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(13514.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(14514.7,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(1000,0)"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(1278,0)"></path></g><g data-mml-node="mo" transform="translate(16292.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g></g></g></g></g></svg></mjx-container></p><p>として不快指数を計算することができるそうです。</p><p>屋外に関する指標ですが、室内環境の調整には十分そうです。</p><p>また、屋内における適正温度は夏場において25 ~ 28℃、適正湿度は40 ~ 70%とのことから、該当領域に色付けをして一目で室内環境を把握できるようにしました。</p><ul><li><em><a href="https://www.egmkt.co.jp/column/consumer/20210506_EG_067.html">温度と湿度の関係を知って快適に暮らそう！すぐに実践できる温度・湿度の調節方法もご紹介｜EGR</a></em></li></ul><p>不快指数などのメッセージは<strong>「7. 作成したプロット図をSlack APIで画像投稿」</strong>にてSlackで通知する仕組みとなっています。</p><figure class="highlight python"><figcaption><span>plot.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">temp, humid</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    不快指数の計算をする</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">round</span>(<span class="number">0.81</span> * temp + <span class="number">0.01</span> * humid *</span><br><span class="line">                    (<span class="number">0.99</span> * temp - <span class="number">14.3</span>) + <span class="number">46.3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_latest_value</span>(<span class="params">Timestamp, Temperature, Humidity</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    データより最新値15点を取得</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    length = <span class="built_in">len</span>(Timestamp)</span><br><span class="line">    <span class="keyword">if</span> length &gt; <span class="number">15</span>:</span><br><span class="line">        Temperature = Temperature[length - <span class="number">15</span>:]</span><br><span class="line">        Humidity = Humidity[length - <span class="number">15</span>:]</span><br><span class="line">        Timestamp = Timestamp[length - <span class="number">15</span>:]</span><br><span class="line">    <span class="keyword">return</span> Timestamp, Temperature, Humidity,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">converter</span>(<span class="params">json_data</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    JSONから配列へ変換</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    Humidity = []</span><br><span class="line">    Temperature = []</span><br><span class="line">    Timestamp = []</span><br><span class="line">    temp = <span class="number">0</span></span><br><span class="line">    humid = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(json_data)):</span><br><span class="line">        temp = json_data[i][<span class="string">'temperature'</span>]</span><br><span class="line">        humid = json_data[i][<span class="string">'humidity'</span>]</span><br><span class="line">        times = json_data[i][<span class="string">'timestamp'</span>][<span class="number">5</span>:<span class="number">16</span>]</span><br><span class="line">        Humidity.append(humid)</span><br><span class="line">        Temperature.append(temp)</span><br><span class="line">        Timestamp.append(times)</span><br><span class="line">    <span class="keyword">return</span> Timestamp, Temperature, Humidity,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_figure</span>(<span class="params">Timestamp, Temperature, Humidity</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    プロット図の生成</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    plt.rcParams[<span class="string">'font.family'</span>] = <span class="string">'DejaVu Sans'</span></span><br><span class="line">    plt.rcParams[<span class="string">'mathtext.fontset'</span>] = <span class="string">'stix'</span></span><br><span class="line">    plt.rcParams[<span class="string">"font.size"</span>] = <span class="number">20</span></span><br><span class="line">    plt.rcParams[<span class="string">'xtick.labelsize'</span>] = <span class="number">10</span></span><br><span class="line">    plt.rcParams[<span class="string">'ytick.labelsize'</span>] = <span class="number">10</span></span><br><span class="line">    plt.rcParams[<span class="string">'figure.figsize'</span>] = (<span class="number">8</span>, <span class="number">6</span>)</span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    ax1 = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">    ln1 = ax1.plot(</span><br><span class="line">        Timestamp,</span><br><span class="line">        Temperature,</span><br><span class="line">        marker=<span class="string">'o'</span>,</span><br><span class="line">        markeredgewidth=<span class="number">1.</span>,</span><br><span class="line">        markeredgecolor=<span class="string">'k'</span>,</span><br><span class="line">        color=<span class="string">"orange"</span>,</span><br><span class="line">        label=<span class="string">r'$Temperature$'</span>)</span><br><span class="line">    ax2 = ax1.twinx()</span><br><span class="line">    ln2 = ax2.plot(</span><br><span class="line">        Timestamp,</span><br><span class="line">        Humidity,</span><br><span class="line">        marker=<span class="string">'o'</span>,</span><br><span class="line">        markeredgewidth=<span class="number">1.</span>,</span><br><span class="line">        markeredgecolor=<span class="string">'k'</span>,</span><br><span class="line">        color=<span class="string">"blue"</span>,</span><br><span class="line">        label=<span class="string">r'$Humidity$'</span>)</span><br><span class="line">    h1, l1 = ax1.get_legend_handles_labels()</span><br><span class="line">    h2, l2 = ax2.get_legend_handles_labels()</span><br><span class="line">    ax1.legend(h1 + h2, l1 + l2, loc=<span class="string">'upper right'</span>)</span><br><span class="line">    ax1.set_ylim([<span class="number">20</span>, <span class="number">32</span>])</span><br><span class="line">    ax2.set_ylim([<span class="number">25</span>, <span class="number">85</span>])</span><br><span class="line">    ax1.axhspan(<span class="number">25</span>, <span class="number">28</span>, color=<span class="string">"olive"</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">    ax2.axhspan(<span class="number">40</span>, <span class="number">70</span>, color=<span class="string">"royalblue"</span>, alpha=<span class="number">0.2</span>)</span><br><span class="line">    ax1.set_xlabel(<span class="string">r'$Timestamp$'</span>)</span><br><span class="line">    ax1.set_ylabel(<span class="string">r'$Temperature$'</span>)</span><br><span class="line">    ax2.set_ylabel(<span class="string">r'$Humidity$'</span>)</span><br><span class="line">    ax1.grid(<span class="literal">True</span>)</span><br><span class="line">    plt.gcf().autofmt_xdate()</span><br><span class="line">    fig_path = <span class="string">"室内温湿度.jpg"</span></span><br><span class="line">    plt.savefig(fig_path)</span><br><span class="line">    <span class="keyword">return</span> fig_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span>():</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    メインとなる関数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    now = datetime.datetime.now(pytz.timezone(<span class="string">'Asia/Tokyo'</span>))</span><br><span class="line">    executed_time = now.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Executed:"</span>, executed_time)</span><br><span class="line">    data = query_table(now)</span><br><span class="line">    json_data = unmarshall(data)</span><br><span class="line">    Timestamp, Temperature, Humidity = converter(json_data)</span><br><span class="line">    Timestamp, Temperature, Humidity = fetch_latest_value(</span><br><span class="line">        Timestamp, Temperature, Humidity)</span><br><span class="line">    fukai = calc(Temperature[-<span class="number">1</span>], Humidity[-<span class="number">1</span>])</span><br><span class="line">    fukai_message = <span class="string">"不快指数は"</span> + <span class="built_in">str</span>(fukai) + <span class="string">"です。"</span></span><br><span class="line">    fig = generate_figure(Timestamp, Temperature, Humidity)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="出力結果"><a href="#出力結果" class="headerlink" title="出力結果"></a>出力結果</h3><img src="/images/20210930a/室内温湿度.jpg" alt="室内温湿度" width="800" height="600" loading="lazy"><h2 id="7-作成したプロット図をSlack-APIで画像投稿"><a href="#7-作成したプロット図をSlack-APIで画像投稿" class="headerlink" title="7. 作成したプロット図をSlack APIで画像投稿"></a>7. 作成したプロット図をSlack APIで画像投稿</h2><p>それでは、上記で出力した画像をSlackに投稿します。</p><p>実装はこちらの準公式記事を参考にしました。</p><ul><li><em><a href="https://qiita.com/seratch/items/8f93fd0bf815b0b1d557">Python で Slack API や Webhook を扱うなら公式 SDK（slack-sdk/slack-bolt）を使おう - Qiita</a></em></li></ul><p>Slackbotの作成などは本記事の主旨ではないため、割愛いたします。</p><p>先ほど作成したworker関数に以下を追加します。</p><figure class="highlight python"><figcaption><span>plot.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> slack_sdk.web <span class="keyword">import</span> WebClient</span><br><span class="line"></span><br><span class="line">...(省略)</span><br><span class="line"></span><br><span class="line">client = WebClient(</span><br><span class="line">        token=<span class="string">"xoxb-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</span>)</span><br><span class="line">    response1 = client.chat_postMessage(text=<span class="string">" Temp : "</span> + <span class="built_in">str</span>(Temperature[-<span class="number">1</span>]) + <span class="string">"℃, Humid : "</span> + <span class="built_in">str</span>(</span><br><span class="line">        Humidity[-<span class="number">1</span>]) + <span class="string">"%, message : "</span> + fukai_message, channel=<span class="string">"#home"</span>)</span><br><span class="line">    response2 = client.files_upload(channels=<span class="string">"#home"</span>, file=fig, title=<span class="string">"室内温湿度"</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>たったこれだけでSlackに自由に投稿できるとは！便利ですね。</p><blockquote><p><em>注意点が一つあります。テキストメッセージの送信の際はchannel=”#home”となっていますが、画像を投稿する際はchannels = “#home”です。</em></p></blockquote><h3 id="出力結果-1"><a href="#出力結果-1" class="headerlink" title="出力結果"></a>出力結果</h3><img src="/images/20210930a/image_5.png" alt="出力結果グラフ" width="647" height="457" loading="lazy"><p>それでは、最後にSlack投稿を定期実行するようにしましょう。<br>定期実行には以下のモジュールを使わせていただきました。</p><ul><li><em><a href="https://github.com/dbader/schedule">dbader/schedule: Python job scheduling for humans.</a></em></li></ul><p>2時間ごとにworkerを実行するように設定しました。<br>最終的なPythonスクリプトはこちらです。</p><figure class="highlight python"><figcaption><span>plot.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> slack_sdk.web <span class="keyword">import</span> WebClient</span><br><span class="line"><span class="keyword">from</span> dynamodb_json <span class="keyword">import</span> json_util <span class="keyword">as</span> util</span><br><span class="line"><span class="keyword">from</span> boto3.session <span class="keyword">import</span> Session</span><br><span class="line"><span class="keyword">from</span> boto3.dynamodb.conditions <span class="keyword">import</span> Key</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> pytz</span><br><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">session = Session(profile_name=<span class="string">'default'</span>, region_name=<span class="string">'ap-northeast-1'</span>)</span><br><span class="line">dynamodb = session.resource(<span class="string">'dynamodb'</span>)</span><br><span class="line">dynamodb_table = dynamodb.Table(<span class="string">'mydht22'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">query_table</span>(<span class="params">executed_time</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    現在日時より過去７日間のデータをクエリ</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    begin = executed_time - datetime.timedelta(days=<span class="number">7</span>)</span><br><span class="line">    response = dynamodb_table.query(</span><br><span class="line">        KeyConditionExpression=Key(<span class="string">'device_id'</span>).eq(<span class="string">'01'</span>) &amp; Key(<span class="string">'timestamp'</span>).between(</span><br><span class="line">            begin.isoformat(sep = <span class="string">"T"</span>,timespec=<span class="string">"milliseconds"</span>),</span><br><span class="line">            executed_time.isoformat(sep = <span class="string">"T"</span>,timespec=<span class="string">"milliseconds"</span>)))</span><br><span class="line">    data = response[<span class="string">'Items'</span>]</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unmarshall</span>(<span class="params">dynamodb_json</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    dynamodbで取得したデータを通常のJDONへ整形</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    regular_json = util.loads(dynamodb_json)</span><br><span class="line">    <span class="keyword">return</span> regular_json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">temp, humid</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    不快指数の計算をする</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">return</span> np.<span class="built_in">round</span>(<span class="number">0.81</span> * temp + <span class="number">0.01</span> * humid *</span><br><span class="line">                    (<span class="number">0.99</span> * temp - <span class="number">14.3</span>) + <span class="number">46.3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetch_latest_value</span>(<span class="params">Timestamp, Temperature, Humidity</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    データより最新値15点を取得</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    length = <span class="built_in">len</span>(Timestamp)</span><br><span class="line">    <span class="keyword">if</span> length &gt; <span class="number">15</span>:</span><br><span class="line">        Temperature = Temperature[length - <span class="number">15</span>:]</span><br><span class="line">        Humidity = Humidity[length - <span class="number">15</span>:]</span><br><span class="line">        Timestamp = Timestamp[length - <span class="number">15</span>:]</span><br><span class="line">    <span class="keyword">return</span> Timestamp, Temperature, Humidity,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">converter</span>(<span class="params">json_data</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    JSONから配列へ変換</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    Humidity = []</span><br><span class="line">    Temperature = []</span><br><span class="line">    Timestamp = []</span><br><span class="line">    temp = <span class="number">0</span></span><br><span class="line">    humid = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(json_data)):</span><br><span class="line">        temp = json_data[i][<span class="string">'temperature'</span>]</span><br><span class="line">        humid = json_data[i][<span class="string">'humidity'</span>]</span><br><span class="line">        times = json_data[i][<span class="string">'timestamp'</span>][<span class="number">5</span>:<span class="number">16</span>]</span><br><span class="line">        Humidity.append(humid)</span><br><span class="line">        Temperature.append(temp)</span><br><span class="line">        Timestamp.append(times)</span><br><span class="line">    <span class="keyword">return</span> Timestamp, Temperature, Humidity,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_figure</span>(<span class="params">Timestamp, Temperature, Humidity</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    プロット図の生成</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    plt.rcParams[<span class="string">'font.family'</span>] = <span class="string">'DejaVu Sans'</span></span><br><span class="line">    plt.rcParams[<span class="string">'mathtext.fontset'</span>] = <span class="string">'stix'</span></span><br><span class="line">    plt.rcParams[<span class="string">"font.size"</span>] = <span class="number">20</span></span><br><span class="line">    plt.rcParams[<span class="string">'xtick.labelsize'</span>] = <span class="number">10</span></span><br><span class="line">    plt.rcParams[<span class="string">'ytick.labelsize'</span>] = <span class="number">10</span></span><br><span class="line">    plt.rcParams[<span class="string">'figure.figsize'</span>] = (<span class="number">8</span>, <span class="number">6</span>)</span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    ax1 = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line">    ln1 = ax1.plot(</span><br><span class="line">        Timestamp,</span><br><span class="line">        Temperature,</span><br><span class="line">        marker=<span class="string">'o'</span>,</span><br><span class="line">        markeredgewidth=<span class="number">1.</span>,</span><br><span class="line">        markeredgecolor=<span class="string">'k'</span>,</span><br><span class="line">        color=<span class="string">"orange"</span>,</span><br><span class="line">        label=<span class="string">r'$Temperature$'</span>)</span><br><span class="line">    ax2 = ax1.twinx()</span><br><span class="line">    ln2 = ax2.plot(</span><br><span class="line">        Timestamp,</span><br><span class="line">        Humidity,</span><br><span class="line">        marker=<span class="string">'o'</span>,</span><br><span class="line">        markeredgewidth=<span class="number">1.</span>,</span><br><span class="line">        markeredgecolor=<span class="string">'k'</span>,</span><br><span class="line">        color=<span class="string">"blue"</span>,</span><br><span class="line">        label=<span class="string">r'$Humidity$'</span>)</span><br><span class="line">    h1, l1 = ax1.get_legend_handles_labels()</span><br><span class="line">    h2, l2 = ax2.get_legend_handles_labels()</span><br><span class="line">    ax1.legend(h1 + h2, l1 + l2, loc=<span class="string">'upper right'</span>)</span><br><span class="line">    ax1.set_ylim([<span class="number">20</span>, <span class="number">32</span>])</span><br><span class="line">    ax2.set_ylim([<span class="number">25</span>, <span class="number">85</span>])</span><br><span class="line">    ax1.axhspan(<span class="number">25</span>, <span class="number">28</span>, color=<span class="string">"olive"</span>, alpha=<span class="number">0.3</span>)</span><br><span class="line">    ax2.axhspan(<span class="number">40</span>, <span class="number">70</span>, color=<span class="string">"royalblue"</span>, alpha=<span class="number">0.2</span>)</span><br><span class="line">    ax1.set_xlabel(<span class="string">r'$Timestamp$'</span>)</span><br><span class="line">    ax1.set_ylabel(<span class="string">r'$Temperature$'</span>)</span><br><span class="line">    ax2.set_ylabel(<span class="string">r'$Humidity$'</span>)</span><br><span class="line">    ax1.grid(<span class="literal">True</span>)</span><br><span class="line">    plt.gcf().autofmt_xdate()</span><br><span class="line">    fig_path = <span class="string">"室内温湿度.jpg"</span></span><br><span class="line">    plt.savefig(fig_path)</span><br><span class="line">    <span class="keyword">return</span> fig_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">worker</span>():</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    データを取得し、Slack APIで投稿する</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    now = datetime.datetime.now(pytz.timezone(<span class="string">'Asia/Tokyo'</span>))</span><br><span class="line">    executed_time = now.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Executed:"</span>, executed_time)</span><br><span class="line">    data = query_table(now)</span><br><span class="line">    json_data = unmarshall(data)</span><br><span class="line">    Timestamp, Temperature, Humidity = converter(json_data)</span><br><span class="line">    Timestamp, Temperature, Humidity = fetch_latest_value(</span><br><span class="line">        Timestamp, Temperature, Humidity)</span><br><span class="line">    fukai = calc(Temperature[-<span class="number">1</span>], Humidity[-<span class="number">1</span>])</span><br><span class="line">    fukai_message = <span class="string">"不快指数は"</span> + <span class="built_in">str</span>(fukai) + <span class="string">"です。"</span></span><br><span class="line">    fig = generate_figure(Timestamp, Temperature, Humidity)</span><br><span class="line">    message = <span class="string">"室内温度は"</span> + \</span><br><span class="line">        <span class="built_in">str</span>(Temperature[-<span class="number">1</span>]) + <span class="string">"度。湿度は"</span> + <span class="built_in">str</span>(Humidity[-<span class="number">1</span>]) + <span class="string">"%です。"</span> + fukai_message</span><br><span class="line">    client = WebClient(</span><br><span class="line">        token=<span class="string">"xoxb-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</span>)</span><br><span class="line">    response1 = client.chat_postMessage(text=<span class="string">" Temp : "</span> + <span class="built_in">str</span>(Temperature[-<span class="number">1</span>]) + <span class="string">"℃, Humid : "</span> + <span class="built_in">str</span>(</span><br><span class="line">        Humidity[-<span class="number">1</span>]) + <span class="string">"%, message : "</span> + fukai_message, channel=<span class="string">"#home"</span>)</span><br><span class="line">    response2 = client.files_upload(channels=<span class="string">"#home"</span>, file=fig, title=<span class="string">"室内温湿度"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> message</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    session = Session(profile_name=<span class="string">'default'</span>, region_name=<span class="string">'ap-northeast-1'</span>)</span><br><span class="line">    dynamodb = session.resource(<span class="string">'dynamodb'</span>)</span><br><span class="line">    dynamodb_table = dynamodb.Table(<span class="string">'mydht22'</span>)</span><br><span class="line">    schedule.every(<span class="number">2</span>).hours.do(worker)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        schedule.run_pending()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>GoとAWS IoTを使用してMQTT通信を行いました。</p><p>AWS IoTを使用したのは初めてだったのですが、公式のドキュメントやチュートリアルが非常に丁寧であったため、簡単に実装できました。</p><p>AWS以外のクラウドサービスのMQTTサポートなどの使い勝手も気になってきたため、近々まとめられればと思います。</p><p><strong>（2021.10.1）続編が公開されました</strong></p><ul><li><a href="/articles/20211001a/">PythonでMQTT!! ～Alexaでコマンドを送信する～  | フューチャー技術ブログ</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/IoT/">IoT</category>
      
      
      <category domain="https://future-architect.github.io/tags/IoT/">IoT</category>
      
      <category domain="https://future-architect.github.io/tags/Python/">Python</category>
      
      <category domain="https://future-architect.github.io/tags/BOT/">BOT</category>
      
      <category domain="https://future-architect.github.io/tags/RaspberryPi/">RaspberryPi</category>
      
      <category domain="https://future-architect.github.io/tags/MQTT/">MQTT</category>
      
      <category domain="https://future-architect.github.io/tags/AWSIoT/">AWSIoT</category>
      
      
      <comments>https://future-architect.github.io/articles/20210930a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GoでMQTT!!　～温湿度マイスターbotの作成～(前編)</title>
      <link>https://future-architect.github.io/articles/20210929a/</link>
      <guid>https://future-architect.github.io/articles/20210929a/</guid>
      <pubDate>Tue, 28 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20210929a/サムネイル1.png&quot; alt=&quot;Louis Reed on unsplash.com Unsplash&quot; title=&quot;&quot; width=&quot;1200&quot; height=&quot;676&quot; loading=&quot;lazy&quot;&gt;

&lt;h1</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20210929a/サムネイル1.png" alt="Louis Reed on unsplash.com Unsplash" title="" width="1200" height="676" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG/DXユニット所属の宮永です。</p><p>今回はAWSサービスのうちの一つAWS IoTを使用してRaspberryPiとのMQTTによる通信を行います。</p><p>AWS IoTを使用したMQTTのチュートリアルはAWS公式からも詳細なハンズオン記事が出ています。</p><ul><li><em><a href="https://aws-iot-core-for-beginners.workshop.aws/phase3/step1.html">AWS IoT Core の設定 :: AWS IoT Core 初級 ハンズオン</a></em></li></ul><p>本記事はこちらのハンズオンを基にGo言語を使用してMQTTによる通信を行いました。(公式の記事はPythonで実装されています。)</p><p>最終的には室内の快適な温湿度を教えてくれる「温湿度マイスターbot」を作成します。<br><img src="/images/20210929a/image.png" alt="image.png" width="647" height="457" loading="lazy"></p><p>なお、本記事で作成したコードは</p><ul><li><em><a href="https://github.com/orangekame3/go-mqtt">orangekame3/go-mqtt</a></em></li><li><em><a href="https://github.com/orangekame3/th-meisterBot">orangekame3/th-meisterBot</a></em></li></ul><p>にて公開しています。</p><h1 id="MQTTとは"><a href="#MQTTとは" class="headerlink" title="MQTTとは"></a>MQTTとは</h1><p>MQTTはメッセージングプロトコルです。<br>以下 <a href="https://mqtt.org/">mqtt.org</a>より引用です。</p><blockquote><p><em>MQTTは、モノのインターネット（IoT）用のOASIS標準メッセージングプロトコルです。これは、非常に軽量なパブリッシュ/サブスクライブメッセージングトランスポートとして設計されており、コードフットプリントが小さくネットワーク帯域幅が最小のリモートデバイスを接続するのに理想的です。今日のMQTTは、自動車、製造、電気通信、石油およびガスなど、さまざまな業界で使用されています。<br><a href="https://mqtt.org/">MQTT - The Standard for IoT Messaging</a></em></p></blockquote><p>MQTTはHTTPリクエストのようなリクエスト/レスポンスといったプロトコルとは異なり、イベント駆動型のパブリッシュ/サブスクライブプロトコルです。</p><p>下図にパブリッシュ/サブスクライブの概要を示します。</p><p>Publisherはセンシングの情報（温度や湿度、速度など）をBrokerに配信します。SubscriberはBrokerをSubscribeし、一定間隔で情報を受け取ります。このような構成から、PublisherとSubscriberは疎な結合となっています。拡張性が高く、軽量であるという点でIoTデバイスを使用した通信プロトコルとして注目されているとのことです。</p><img src="/images/20210929a/image_2.png" alt="image.png" width="1200" height="688" loading="lazy"><h1 id="AWS-IoTとは"><a href="#AWS-IoTとは" class="headerlink" title="AWS IoTとは"></a>AWS IoTとは</h1><blockquote><p><em>AWS IoT は、IoT デバイスを他のデバイスおよび AWS クラウドサービスに接続するクラウドサービスを提供します。AWS IoT は、IoT デバイスを AWS IoT ベースのソリューションに統合するのに役立つデバイスソフトウェアを提供します。デバイスが AWS IoT に接続できる場合、AWS IoT は AWS が提供するクラウドサービスにそれらのデバイスを接続できます。<br><a href="https://docs.aws.amazon.com/ja_jp/iot/latest/developerguide/what-is-aws-iot.html">AWS IoT とは - AWS IoT Core</a></em></p></blockquote><p>AWSIoTは各種AWSサービスとIoTデバイスとを手軽に連携できるサービスを展開しています。<br>今回はAWS IoT標準サービスで提供されているMQTTブローカーを利用してMQTT通信にトライします。</p><h1 id="システム構成"><a href="#システム構成" class="headerlink" title="システム構成"></a>システム構成</h1><p>今回作成するものは室内の温湿度を定期的にセンシングし、Slackに温湿度のプロット図を定期的に送信する仕組みです。</p><p>DHT22という温湿度センサをRaspberryPi3B+に取り付けて2時間ごとに温湿度を取得します。取得した温湿度をMQTTによってAWS IoTにPublishします。AWS IoTはDynamoDBと連携させることで、Subscribeしたデータを蓄積します。</p><p>また、RaspberryPiではPythonスクリプトも同時に起動しておきます。PythonではBoto3を使用してDynamoDBに向けて定期的にQueryを行います。受け取った情報からtimestampを横軸、温度湿度を縦軸にとったプロット図を作成します。作成したプロット図は2時間ごとにSlackに投稿するという仕組みにしています。<br>（※冒頭のプロット図は便宜的に１分毎のデータをプロットしています。）</p><img src="/images/20210929a/image_3.png" alt="image.png" width="1200" height="849" loading="lazy"><h1 id="開発環境"><a href="#開発環境" class="headerlink" title="開発環境"></a>開発環境</h1><h2 id="ハードウェア"><a href="#ハードウェア" class="headerlink" title="ハードウェア"></a>ハードウェア</h2><ul><li>Raspberrypi3B+</li><li>DHT22<a href="https://aax-fe.amazon-adsystem.com/x/c/Qr8CAcIgUZEla94kNzcQWMkAAAF8AoohIgcAAAIAAZlrWxE/http://www.amazon.co.jp/gp/slredirect/picassoRedirect.html?ie=UTF8&adId=A3TSWYUGZXCE00&qualifier=1632130179&id=8652485946611051&widgetName=sd_onsite_desktop&url=/dp/B06ZXXJL2B/ref=syn_sd_onsite_desktop_95?psc=1"> (DSD TECH DHT22 温湿度センサーモジュール AM2302チップ付き)</a></li><li>ジャンパワイヤー</li></ul><h2 id="ソフトウェア"><a href="#ソフトウェア" class="headerlink" title="ソフトウェア"></a>ソフトウェア</h2><p>開発はwindows10環境、WSL2上で行いました。標準モジュール以外で使用したものを以下に列挙します。</p><ul><li>go1.16.6 linux/amd64<ul><li><a href="https://github.com/MichaelS11/go-dht">MichaelS11/go-dht: Golang DHT22 / AM2302 / DHT11 interface using periph.io driver</a></li><li><a href="https://github.com/eclipse/paho.mqtt.golang">eclipse/paho.mqtt.golang</a></li></ul></li><li>Python 3.8.10<ul><li><a href="https://github.com/boto/boto3">boto/boto3: AWS SDK for Python</a></li><li><a href="https://github.com/Alonreznik/dynamodb-json">Alonreznik/dynamodb-json: DynamoDB json util to load and dump strings of Dynamodb json format to python object and vise-versa</a></li><li><a href="https://github.com/slackapi/python-slack-sdk">slackapi/python-slack-sdk: Slack Developer Kit for Python</a></li><li><a href="https://github.com/stub42/pytz">stub42/pytz: pytz Python historical timezone library and database</a></li><li><a href="https://github.com/dbader/schedule">dbader/schedule: Python job scheduling for humans.</a></li></ul></li><li>AWS IoT</li><li>DynamoDB</li><li>Slack</li></ul><blockquote><p><em>こちらは余談ですが、VSCodeを使ってRaspberryPi上のソースコードを編集する際はVSCodeのSSH機能が非常に便利です。</em><br><em>以下の記事に詳しく記載されているのでぜひ利用してみてください。</em><br><em><a href="https://qiita.com/c60evaporator/items/26ab9cfb9cd36facc8fd">VSCodeのSSH接続機能で、RaspberryPi内のコードを編集してデバッグ - Qiita</a></em></p></blockquote><h1 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h1><p>実装は以下の手順で進めます。</p><ol><li>DHT22から温湿度情報を取得する</li><li>AWS IoTを使用してRaspberryPiからのPublish動作確認</li><li>DHT22の温湿度情報をAWS IoTへPublish</li><li>AWS IoTで取得した温湿度情報をDynamoDBに連携　</li><li>Boto3を使用してDynamoDBからデータをQuery、データ整形</li><li>取得データをmatplotlibで可視化</li><li>作成したプロット図をSlack APIで画像投稿</li></ol><h2 id="1-DHT22から温湿度情報を取得する。"><a href="#1-DHT22から温湿度情報を取得する。" class="headerlink" title="1. DHT22から温湿度情報を取得する。"></a>1. DHT22から温湿度情報を取得する。</h2><p>使用した温湿度センサはこちらです。<br><a href="https://aax-fe.amazon-adsystem.com/x/c/Qr8CAcIgUZEla94kNzcQWMkAAAF8AoohIgcAAAIAAZlrWxE/http://www.amazon.co.jp/gp/slredirect/picassoRedirect.html?ie=UTF8&adId=A3TSWYUGZXCE00&qualifier=1632130179&id=8652485946611051&widgetName=sd_onsite_desktop&url=/dp/B06ZXXJL2B/ref=syn_sd_onsite_desktop_95?psc=1">DSD TECH DHT22 温湿度センサーモジュール AM2302チップ付き</a></p><img src="/images/20210929a/DHT22.JPG" alt="DHT22.JPG" width="1200" height="676" loading="lazy"><p>まずはこちらの温湿度センサをジャンパワイヤーを使用してRaspberryPiに接続します。</p><p>接続するピンはVccが物理ピン1、GNDが物理ピン6,DATがGPIO2(物理ピン3)です。</p><p>DHT22からGo言語を使用して温湿度情報を取得するためにこちらのモジュールを利用させていただきました。</p><ul><li><a href="https://github.com/MichaelS11/go-dht">MichaelS11/go-dht: Golang DHT22 / AM2302 / DHT11 interface using periph.io driver</a></li></ul><p>非常にシンプルに記述されており、摂氏と華氏の変換も実装されていたため使いやすかったです。</p><p>以下のコマンドでモジュールを取得してください。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> get github.com/MichaelS11/<span class="keyword">go</span>-dht</span><br></pre></td></tr></table></figure><p>まずは、温湿度情報を格納する<code>MyDHT22</code>構造体を定義します。</p><figure class="highlight go"><figcaption><span>model.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> dht22</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/MichaelS11/go-dht&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyDHT22 <span class="keyword">struct</span> &#123;</span><br><span class="line">Temperature <span class="keyword">float64</span></span><br><span class="line">Humidity    <span class="keyword">float64</span></span><br><span class="line">Timestamp   time.Time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この構造体に対して温湿度を情報を取得する<code>Read</code>メソッドを定義します。</p><figure class="highlight go"><figcaption><span>model.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d MyDHT22)</span> <span class="title">Read</span><span class="params">()</span> <span class="title">MyDHT22</span></span> &#123;</span><br><span class="line">err := dht.HostInit()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;HostInit error:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dht, err := dht.NewDHT(<span class="string">&quot;GPIO2&quot;</span>, dht.Celsius, <span class="string">&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;NewDHT error:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">humidity, temperature, err := dht.ReadRetry(<span class="number">11</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Read error:&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br><span class="line">d.Humidity = humidity</span><br><span class="line">d.Temperature = temperature</span><br><span class="line">d.Timestamp = time.Now()</span><br><span class="line"><span class="keyword">return</span> d</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dht.NewDHT(&quot;GPIO2&quot;, dht.Celsius, &quot;&quot;)</code>にてDATの接続先を指定してください。また、<code>Celsius</code>(摂氏)と<code>Fahrenheit(</code>華氏)が選択できるため、<code>Celsius</code>を入力します。<br>それでは、DHT22よりセンシング情報を正しく取得できているか確かめます。<br><code>sample</code>フォルダを作成し、以下の様に<code>model.go</code>を<code>dht22</code>配下に格納します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dht22</span><br><span class="line">│   └── model.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">└── main.go</span><br></pre></td></tr></table></figure><p><code>main.go</code>は以下の様に記述します。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/sample/dht22&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> mydht dht22.MyDHT22</span><br><span class="line">PubMsg := mydht.Read()</span><br><span class="line">fmt.Println(PubMsg)</span><br><span class="line">time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>go mod init</code>、<code>go mod tidy</code>を実行した後、上記のようなディレクトリ構成となるはずです。<br>それでは<code>go run main.go</code>で<code>main.go</code>を実行します。以下の様にターミナル上に表示されれば成功です。<br>1列目が温度、2列目が湿度、3列目が取得時刻です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;25.3 48.1 2021-09-20 18:59:59.716042512 +0900 JST m=+7.022936648&#125;</span><br><span class="line">&#123;25.3 48.1 2021-09-20 19:00:02.724946254 +0900 JST m=+10.031840338&#125;</span><br><span class="line">&#123;25.4 50.5 2021-09-20 19:00:07.733240959 +0900 JST m=+15.040135043&#125;</span><br><span class="line">&#123;25.3 50.4 2021-09-20 19:00:10.7415645 +0900 JST m=+18.048459365&#125;</span><br><span class="line">&#123;25.3 48.1 2021-09-20 19:00:13.749694254 +0900 JST m=+21.056588391&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>ここで作成した<code>model.go</code>は後の工程でも使用するので削除しないようにしてください。</p><h2 id="2-AWS-IoTを使用してPublishの動作確認"><a href="#2-AWS-IoTを使用してPublishの動作確認" class="headerlink" title="2. AWS IoTを使用してPublishの動作確認"></a>2. AWS IoTを使用してPublishの動作確認</h2><p>AWS IoTとRaspberryPiの連携は、「ポリシーの作成」から始まります。<br>「ポリシーの作成」から「モノの作成」までの工程はこちらのページに記載されている通りに行ってください。<br><a href="https://aws-iot-core-for-beginners.workshop.aws/phase3/step1.html">AWS IoT Core の設定 :: AWS IoT Core 初級 ハンズオン</a><br>手順通り進めると以下の様に5つのファイルが作成されるはずです。こちらは後程使用するため、RaspberryPi上に格納してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-certificate.pem.crt</span><br><span class="line">├── xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-private.pem.key</span><br><span class="line">├── xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-public.pem.key</span><br><span class="line">├── AmazonRootCA1.pem</span><br><span class="line">└── AmazonRootCA3.pem</span><br></pre></td></tr></table></figure><p>それでは、RaspberryPiからMQTTを使用してメッセージを送信します。</p><p>実装はGo言語で行います。実装の際には以下2点の記事を大いに参考にさせていただきました。</p><ul><li><em><a href="https://qiita.com/sat0ken/items/249b1f01da4dd2cc5b4f">golang+MQTTでAWS IoTにPubslish - Qiita</a></em></li><li><em><a href="https://mikan.github.io/2018/10/22/accessing-aws-iot-mqtt-through-port-443-from-go/">AWS IoT MQTT の 443 ポートへ Go からアクセスする · Yutaka 🍊 Kato</a></em></li></ul><p>以下、実装したコードです。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/tls&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/x509&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">mqtt <span class="string">&quot;github.com/eclipse/paho.mqtt.golang&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">ThingName  = <span class="string">&quot;xxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">RootCAFile = <span class="string">&quot;AmazonRootCA1.pem&quot;</span></span><br><span class="line">CertFile   = <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-certificate.pem.crt&quot;</span></span><br><span class="line">KeyFile    = <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-private.pem.key&quot;</span></span><br><span class="line">PubTopic   = <span class="string">&quot;topic/to/publish&quot;</span></span><br><span class="line">endpoint   = <span class="string">&quot;xxxxxxxxxxxxxxxx.iot.ap-northeast-1.amazonaws.com&quot;</span></span><br><span class="line">QoS        = <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">tlsConfig, err := newTLSConfig()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;failed to construct tls config: %v&quot;</span>, err))</span><br><span class="line">&#125;</span><br><span class="line">opts := mqtt.NewClientOptions()</span><br><span class="line">opts.AddBroker(fmt.Sprintf(<span class="string">&quot;ssl://%s:%d&quot;</span>, endpoint, <span class="number">443</span>))</span><br><span class="line">opts.SetTLSConfig(tlsConfig)</span><br><span class="line">opts.SetClientID(ThingName)</span><br><span class="line">client := mqtt.NewClient(opts)</span><br><span class="line"><span class="keyword">if</span> token := client.Connect(); token.Wait() &amp;&amp; token.Error() != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;failed to connect broker: %v&quot;</span>, token.Error()))</span><br><span class="line">&#125;</span><br><span class="line">    PubMsg := <span class="string">`&#123;&quot;MQTT&quot;:&#123;&quot;message&quot;:&quot;Messaging from my RaspberryPi!!&quot;&#125;&#125;`</span></span><br><span class="line">log.Printf(<span class="string">&quot;publishing %s...\n&quot;</span>, PubTopic)</span><br><span class="line"><span class="keyword">if</span> token := client.Publish(PubTopic, QoS, <span class="literal">false</span>, PubMsg); token.Wait() &amp;&amp; token.Error() != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;failed to publish %s: %v&quot;</span>, PubTopic, token.Error()))</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(PubMsg)</span><br><span class="line">client.Disconnect(<span class="number">250</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newTLSConfig</span><span class="params">()</span> <span class="params">(*tls.Config, error)</span></span> &#123;</span><br><span class="line">rootCA, err := ioutil.ReadFile(RootCAFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">certpool := x509.NewCertPool()</span><br><span class="line">certpool.AppendCertsFromPEM(rootCA)</span><br><span class="line">cert, err := tls.LoadX509KeyPair(CertFile, KeyFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">cert.Leaf, err = x509.ParseCertificate(cert.Certificate[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;tls.Config&#123;</span><br><span class="line">RootCAs:            certpool,</span><br><span class="line">InsecureSkipVerify: <span class="literal">true</span>,</span><br><span class="line">Certificates:       []tls.Certificate&#123;cert&#125;,</span><br><span class="line">NextProtos:         []<span class="keyword">string</span>&#123;<span class="string">&quot;x-amzn-mqtt-ca&quot;</span>&#125;,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>こちらのスクリプトではPubMsgで定義されたJSONを送信しています。</p><p>それでは上記スクリプトを実行したときにAWS IoTコンソール上でSubscribeが正しく動作しているか確かめます。</p><p>以下、画像上部はVSCode上で<code>main.go</code>を実行しています。画像上部はAWS IoTコンソールにてRaspberryPiからのメッセージをSubscribeしています。</p><p><code>main.go</code>の実行とともにコンソール上でも配信を受け取っていることが確認できます。</p><img src="/images/20210929a/mqttdemo.gif" alt="mqttdemo.gif" width="859" height="601" loading="lazy"><p>メッセージの送受信が確認できたところで、次に先ほどの実装で取得した温湿度をpayloadとして配信します。</p><h2 id="3-DHT22の温湿度情報をPublish"><a href="#3-DHT22の温湿度情報をPublish" class="headerlink" title="3. DHT22の温湿度情報をPublish"></a>3. DHT22の温湿度情報をPublish</h2><p><strong>「2. AWS IoTを使用してPublishの動作確認」</strong>にて取得した各種証明書と<code>main.go</code>を同階層に格納してください。<br>同様に<strong>「1. DHT22から温湿度情報を取得する」</strong>にて実装した<code>model.go</code>を<code>dht22</code>サブディレクトリとして格納してください。</p><h3 id="ディレクトリ構成"><a href="#ディレクトリ構成" class="headerlink" title="ディレクトリ構成"></a>ディレクトリ構成</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-certificate.pem.crt</span><br><span class="line">├── xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-private.pem.key</span><br><span class="line">├── xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-public.pem.key</span><br><span class="line">├── AmazonRootCA1.pem</span><br><span class="line">├── AmazonRootCA3.pem</span><br><span class="line">├── dht22</span><br><span class="line">│   └── model.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">└── main.go</span><br></pre></td></tr></table></figure><p><strong>「2. AWS IoTを使用してPublishの動作確認」</strong>の実装よりmain関数部分を少し変更します。<br><strong>「1. DHT22から温湿度情報を取得する」</strong>にて実装したMYDHT22構造体を呼び出し、<code>json.Marshall</code>でJSONにして<code>PubMsg</code>に渡しています。</p><p>データの取得と送信は2秒間隔でおこなっています。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">...(省略)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">tlsConfig, err := newTLSConfig()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;failed to construct tls config: %v&quot;</span>, err))</span><br><span class="line">&#125;</span><br><span class="line">opts := mqtt.NewClientOptions()</span><br><span class="line">opts.AddBroker(fmt.Sprintf(<span class="string">&quot;ssl://%s:%d&quot;</span>, endpoint, <span class="number">443</span>))</span><br><span class="line">opts.SetTLSConfig(tlsConfig)</span><br><span class="line">opts.SetClientID(ThingName)</span><br><span class="line">client := mqtt.NewClient(opts)</span><br><span class="line"><span class="keyword">if</span> token := client.Connect(); token.Wait() &amp;&amp; token.Error() != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;failed to connect broker: %v&quot;</span>, token.Error()))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">var</span> mydht dht22.MyDHT22</span><br><span class="line">PubMsg, _ := json.Marshal(mydht.Read())</span><br><span class="line"></span><br><span class="line">log.Printf(<span class="string">&quot;publishing %s...\n&quot;</span>, PubTopic)</span><br><span class="line"><span class="keyword">if</span> token := client.Publish(PubTopic, QoS, <span class="literal">false</span>, PubMsg); token.Wait() &amp;&amp; token.Error() != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;failed to publish %s: %v&quot;</span>, PubTopic, token.Error()))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...(省略)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下図上部が<code>main.go</code>の実行、下部がSubscriptionの様子を示しています。</p><p>TimeStampに注目すると、2秒毎に新規データが蓄積されていることがわかります。</p><img src="/images/20210929a/mqttdemo2.gif" alt="mqttdemo2.gif" width="859" height="662" loading="lazy"><h1 id="前編まとめ"><a href="#前編まとめ" class="headerlink" title="前編まとめ"></a>前編まとめ</h1><p>前編では温湿度センサーDHT22より取得したデータをMQTTでAWS IoTにPublishするところまでを行いました。</p><p><a href="/articles/20210930a/">後編</a>ではAWS IoTで受け取ったデータをDynamoDBに連携します。</p><p>DynamoDBに蓄積されたデータをBoto3によって取得し、Slackbotで配信するところまで行います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/IoT/">IoT</category>
      
      
      <category domain="https://future-architect.github.io/tags/IoT/">IoT</category>
      
      <category domain="https://future-architect.github.io/tags/Python/">Python</category>
      
      <category domain="https://future-architect.github.io/tags/BOT/">BOT</category>
      
      <category domain="https://future-architect.github.io/tags/RaspberryPi/">RaspberryPi</category>
      
      <category domain="https://future-architect.github.io/tags/MQTT/">MQTT</category>
      
      <category domain="https://future-architect.github.io/tags/AWSIoT/">AWSIoT</category>
      
      
      <comments>https://future-architect.github.io/articles/20210929a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SQLのデータリネージツール、SQLLineageを試してみる</title>
      <link>https://future-architect.github.io/articles/20210928a/</link>
      <guid>https://future-architect.github.io/articles/20210928a/</guid>
      <pubDate>Mon, 27 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;TIG DXユニット真野です。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG DXユニット真野です。<a href="/articles/20210927b/">Python連載</a>の2本目です。普段はPython触らないのですが、データリネージという概念に興味をもったのと、それをサポートするためのPytnon製ツールがあったので触ってみます。</p><h2 id="データリネージとは"><a href="#データリネージとは" class="headerlink" title="データリネージとは"></a>データリネージとは</h2><img src="/images/20210928a/データリネージ概念.png" alt="データリネージ概念.png" width="1200" height="503" loading="lazy"><p>DWHのようなデータ基盤を整える上で必要になってくる概念で、保持するデータの発生源や、どのシステムがどう加工して保存されたかと言った流れを追跡できるようにすることです。データのトレーサビリティとも言うかなと思います。追跡可能にすることで、異常データの追跡（要はどこのETL処理で考慮漏れがでたりバグっちゃったのか）や依存関係などを捉えることができます。何かしらの分析にそのデータを利用すべきかどうかの重要な材料になるのは間違いないでしょう。システム開発においての影響度調査などにも便利かもしれませんね。</p><p>以下のページなどが参考になるかと思います</p><ul><li><a href="https://cloud.google.com/architecture/architecture-concept-data-lineage-systems-in-a-data-warehouse?hl=ja">データ ウェアハウス用のデータリネージ システム - Google Cloud</a></li><li><a href="https://cloud.google.com/blog/ja/products/data-analytics/architecting-a-data-lineage-system-for-bigquery">BigQuery 向けにデータリネージ システムを構築 - Google Cloud</a></li></ul><p>メタデータ管理というとベンダーごとに規格が乱立しそうですがオープンリネージという取り組みもあるようです。</p><ul><li><a href="https://github.com/OpenLineage/OpenLineage">https://github.com/OpenLineage/OpenLineage</a></li></ul><p>ちなみに、リネージという単語を自分は聞き覚えがありませんでしたが、以下のような出自とか血統を指すようです。</p><blockquote><p>リネージは、始祖を含む成員の構成が具体的にたどれる出自集団（＝多くは父系か母系だが現在ではその両方あ るいは任意の親族集団）のことをさします。出自（しゅつじ）とは「自分はなになに一族、なになに家の出身だ」という、親族の出身の出所を示す用語です。<br><a href="https://www.cscd.osaka-u.ac.jp/user/rosaldo/121110lineage_clan.html">https://www.cscd.osaka-u.ac.jp/user/rosaldo/121110lineage_clan.html</a></p></blockquote><p>積極的に使っていこうと思います。</p><h2 id="データリネージの分類"><a href="#データリネージの分類" class="headerlink" title="データリネージの分類"></a>データリネージの分類</h2><p>データリネージを構成するシステムは、アクティブかパッシブかで分類できるそうです。</p><ul><li><strong>アクティブ</strong>: データパイプライン側がソース情報と変換情報をリネージ側に明示的に提供</li><li><strong>パッシブ</strong>: SQLの実行ログを解析しリネージ情報を登録する。それによりデータリネージの更新呼び出しをパイプラインに追加するなどの手間を削減する。</li></ul><p>またデータの追跡と言っても、粒度で複数のレベルが定義されています。</p><ul><li>エンティティ（テーブル）レベル</li><li>列レベル</li><li>行レベル</li></ul><p>このうち最も簡易的だと思う（それでも実践的です）テーブルレベルのデータリネージを行えそうなSQLLineageを触ってみます。</p><h2 id="SQLLineage"><a href="#SQLLineage" class="headerlink" title="SQLLineage"></a>SQLLineage</h2><p>SQLLineageはデータリネージの中でも、SQLに特化したツールです。</p><ul><li><a href="https://github.com/reata/sqllineage">https://github.com/reata/sqllineage</a></li></ul><p>READMEにも記載されている通り、pipでインストールできます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># インストール</span></span><br><span class="line">$ pip install sqllineage</span><br></pre></td></tr></table></figure><h3 id="サンプル実行"><a href="#サンプル実行" class="headerlink" title="サンプル実行"></a>サンプル実行</h3><p>実行は簡単です。<code>-g</code>オプションでグラフ表示されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># サンプルの実行</span></span><br><span class="line">$ sqllineage -g -e <span class="string">&quot;insert into db1.table1 select * from db2.table2&quot;</span></span><br><span class="line"> * SQLLineage Running on http://localhost:5000/?e=insert+into+db1.table1+select+%2A+from+db2.table2</span><br></pre></td></tr></table></figure><p>コンソールに出力されたURLを開くと、次のような <code>db2.table2</code> から <code>db1.table1</code> にデータが流れていることが表示されます。素敵そう！</p><img src="/images/20210928a/sqllineageのサンプル実行結果.png" alt="sqllineageのサンプル実行結果.png" width="1200" height="367" loading="lazy"><h3 id="内部結合SQL"><a href="#内部結合SQL" class="headerlink" title="内部結合SQL"></a>内部結合SQL</h3><p>次に内部結合したSQLでどうなるか試してみます。</p><figure class="highlight sql"><figcaption><span>join.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table1 (name, text)</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">   <span class="string">&#x27;test&#x27;</span>       <span class="keyword">AS</span> name,</span><br><span class="line">    t3.text     <span class="keyword">AS</span> text</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">   table2 t2</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> table3 t3 <span class="keyword">ON</span> t2.id <span class="operator">=</span> t3.id</span><br></pre></td></tr></table></figure><p><code>-f</code>オプションでファイルを指定できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sqllineage -g -f join.sql</span><br><span class="line">* SQLLineage Running on http://localhost:5000/?f=join.sql</span><br></pre></td></tr></table></figure><img src="/images/20210928a/内部結合SQLのグラフ表示.png" alt="内部結合SQLのグラフ表示.png" width="1200" height="359" loading="lazy"><p>table2, table3がtable1の入力になっていることがわかります。</p><h3 id="JOINを用いない結合SQL"><a href="#JOINを用いない結合SQL" class="headerlink" title="JOINを用いない結合SQL"></a>JOINを用いない結合SQL</h3><p>私が最初に触ったRDBはOracleだったので、せっかくなのでOracleのJOINを利用しないSQLを試してみます。</p><figure class="highlight sql"><figcaption><span>oracle.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> destination (emp_id, dept_id, dept_name)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  a.emp_id,b.dept_id,b.dept_name</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp a,dept b</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  a.dept_id <span class="operator">=</span> b.dept_id</span><br><span class="line">;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sqllineage -g -f oracle.sql</span><br><span class="line"> * SQLLineage Running on http://localhost:5000/?f=oracle.sql</span><br></pre></td></tr></table></figure><p>この記法でも認識してくれるようです。凄い。</p><img src="/images/20210928a/Oracle記法の結合も表示されている図.png" alt="Oracle記法の結合も表示されている図.png" width="1200" height="517" loading="lazy"><p>sqllineageは内部的には<a href="https://github.com/andialbrecht/sqlparse">andialbrecht/sqlparse</a>を利用しているので、対応具合はそちらを見るのが良さそうです。例えば、<a href="https://github.com/andialbrecht/sqlparse/issues/311">Oracle 11gのPivot/Unpivot</a>は2021.09.28時点だとまだ対応して無さそうなのがわかります。</p><h3 id="1処理で複数のSQLが登場する場合"><a href="#1処理で複数のSQLが登場する場合" class="headerlink" title="1処理で複数のSQLが登場する場合"></a>1処理で複数のSQLが登場する場合</h3><p>ここで個人的に気になったのは、1つのETLで複数のSQLが呼ばれる、多段になっているケースです。これはREADMEをちゃんと読めばちゃんと書かれています。<code>;</code>区切りで複数のSQLを記載すれば良いとのこと。</p><p>例えば、あるプログラムで2つのSQLが呼ばれているとします。その場合はカンマ区切りでSQLログを集約すれば良いです。</p><figure class="highlight sql"><figcaption><span>multiple.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl3 (name, text)</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">   <span class="string">&#x27;test&#x27;</span>       <span class="keyword">AS</span> name,</span><br><span class="line">    t1.text     <span class="keyword">AS</span> text</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">   tbl1 t1</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tbl2 t2 <span class="keyword">ON</span> t1.id <span class="operator">=</span> t2.id</span><br><span class="line">;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl5 (name, text)</span><br><span class="line">  <span class="keyword">SELECT</span></span><br><span class="line">   <span class="string">&#x27;test&#x27;</span>       <span class="keyword">AS</span> name,</span><br><span class="line">    t3.text     <span class="keyword">AS</span> text</span><br><span class="line">  <span class="keyword">FROM</span></span><br><span class="line">   tbl3 t3</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tbl4 t4 <span class="keyword">ON</span> t3.id <span class="operator">=</span> t4.id</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>これをsqllineageの入力とします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;sqllineage -g -f multiple.sql</span><br><span class="line"> * SQLLineage Running on http://localhost:5000/?f=multiple.sql</span><br></pre></td></tr></table></figure><p>結果は次のように、<code>;</code>で区切られた複数のSQLのフローをまとめて表示してくれます。</p><img src="/images/20210928a/複数SQLの表示結果.png" alt="複数SQLの表示結果.png" width="1200" height="517" loading="lazy"><p>解析したい単位でSQLをまとめると、分析部分はsqllineageに頼れるということです。良い棲み分けだなと感じました。</p><h2 id="SQL結果セットをアプリ側で読み込み、インサートする場合"><a href="#SQL結果セットをアプリ側で読み込み、インサートする場合" class="headerlink" title="SQL結果セットをアプリ側で読み込み、インサートする場合"></a>SQL結果セットをアプリ側で読み込み、インサートする場合</h2><p>Webアプリケーションだとよくありそうな処理方式ですが、この場合の解析はSQLLineageでは難しそうです（調べきれませんでした）。</p><p>おそらくSQLLineageのスコープ外だと思われるので、別のツール(<a href="https://marquezproject.github.io/marquez/">Marquez</a>など)の検討を考えたほうが良いかなと思います。</p><h2 id="列（カラム）レベルのデータリネージ"><a href="#列（カラム）レベルのデータリネージ" class="headerlink" title="列（カラム）レベルのデータリネージ"></a>列（カラム）レベルのデータリネージ</h2><p>今の所、sqllineageは列レベルのデータリネージサポートは行わない方針のようです。理由は全てのSQLシステムに対応したメタデータサービスが存在しないためだそうです。実際のDBサーバにアクセスしないポリシーに感じられます。どういうことかと言うと、 <code>select *</code> とされるとこのSQLクエリだけ見てもカラムレベルのトレースが無理になるからです。</p><ul><li><a href="https://sqllineage.readthedocs.io/en/latest/behind_the_scene/dos_and_donts.html">https://sqllineage.readthedocs.io/en/latest/behind_the_scene/dos_and_donts.html</a></li></ul><p><code>select *</code> には対応しないけど、ちゃんとSQLに項目を書く前提で、カラムレベルも将来のバージョンでは考えているようなことも記載されていました。期待したいですね。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>データリネージのパッシブなデータ収集に、SQLログを解析するという手法があります。SQLLineageを用いると簡単に解析結果を確認・可視化できるためオススメです。</p><p>データ基盤といったプラットフォーム開発者以外にも、複雑なSQLの構造を可視化したい人にも使えるかと思います。</p><p>SQLユーザの皆様のお役にたてば幸いです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/SQL/">SQL</category>
      
      <category domain="https://future-architect.github.io/tags/Python/">Python</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%AA%E3%83%8D%E3%83%BC%E3%82%B8%E3%83%A5/">データリネージュ</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E3%82%AC%E3%83%90%E3%83%8A%E3%83%B3%E3%82%B9/">データガバナンス</category>
      
      
      <comments>https://future-architect.github.io/articles/20210928a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Python連載始まります＆Python翻訳プロジェクト</title>
      <link>https://future-architect.github.io/articles/20210927b/</link>
      <guid>https://future-architect.github.io/articles/20210927b/</guid>
      <pubDate>Mon, 27 Sep 2021 05:25:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;最近社内でも使う人が徐々に増えている？Pythonの連載記事を開始しようと思います。&lt;/p&gt;
&lt;div class=&quot;scroll&quot;&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;公開日&lt;/th&gt;
&lt;th</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>最近社内でも使う人が徐々に増えている？Pythonの連載記事を開始しようと思います。</p><div class="scroll"><table><thead><tr><th align="center">公開日</th><th align="center">寄稿者</th><th align="center">記事</th></tr></thead><tbody><tr><td align="center">9月27日</td><td align="center">澁川喜規</td><td align="center">この記事</td></tr><tr><td align="center">9月28日</td><td align="center">真野隼記</td><td align="center"><a href="/articles/20210928a/">SQLのデータリネージュツール、sqllineageを試してみる</a></td></tr><tr><td align="center">9月29日</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">9月30日</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">10月1日</td><td align="center">宮永崇史</td><td align="center"><a href="/articles/20211001a/">PythonでMQTT!! ～Alexaでコマンドを送信する～ </a></td></tr><tr><td align="center">10月4日</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">10月5日</td><td align="center">佐藤尭彰</td><td align="center">イテレータと仲良くなろう</td></tr><tr><td align="center">10月6日</td><td align="center">山田勇一</td><td align="center">PySpark</td></tr><tr><td align="center">10月7日</td><td align="center">小橋昌明</td><td align="center">pandasの内部で何が起きているか</td></tr><tr><td align="center">10月78日</td><td align="center">TBD</td><td align="center">AST解析</td></tr></tbody></table></div><p>この企画を立てた時は、Python 3.10も近いし、そちらのアップデートの紹介をしようと思ったのですが、Python.jpに完璧な記事群が公開されているので、そちらをご覧ください。</p><ul><li><a href="https://www.python.jp/news/wnpython310/index.html">Python 3.10の新機能(python.jp)</a></li></ul><p>本エントリーではPythonドキュメントの日本語訳プロジェクトに参加してみた話を紹介します。</p><h1 id="Pythonドキュメント日本語訳プロジェクト"><a href="#Pythonドキュメント日本語訳プロジェクト" class="headerlink" title="Pythonドキュメント日本語訳プロジェクト"></a>Pythonドキュメント日本語訳プロジェクト</h1><p>現在は<a href="https://twitter.com/cocoatomo">cocoatomoさん</a>がプロジェクトの管理者をやられています。現在の状況は以下のところで詳しく説明されています。</p><ul><li><a href="https://blog.pyq.jp/entry/lives_of_engineer_004_0">【Pythonエンジニア列伝:vol.4】Pythonドキュメント翻訳者cocoatomoさんに、技術ドキュメント翻訳との関わりや歴史を伺いました</a></li><li><a href="https://speakerdeck.com/cocoatomo/sphinx-gazhi-erufan-yi-dokiyumento">Sphinx が支える翻訳ドキュメント</a></li></ul><p>プロジェクトのホームとなっている場所のGitHubです。参加の仕方も書かれています。</p><ul><li><a href="https://github.com/python-doc-ja/python-doc-ja">Python ドキュメント日本語訳プロジェクト</a></li></ul><p>Pythonには今まで育てられてきた「実家」のような言語と感じているので、恩返しはしたいと思っていますし、先日、<a href="https://future-architect.github.io/articles/20210819a/">エキスパートPythonプログラミング改訂3版が出版されました</a>という記事を書きましたが、Pythonの書籍だと一次情報として公式のドキュメントをかなり参照しています。特に言語仕様周り。本を読んでいて、さらに詳しく知りたい読者の人が見た時に、英語のページしかないのは不親切かな、と思い、僕も本から参照されている情報を中心に翻訳に参加しようと思いました。</p><p>なにせドキュメント数が膨大で翻訳の人手が足りているとは言えない状況ですので、もし興味がある人、ちょっとでも世の中に貢献してみたい人なんかはいいと思います。</p><p>英語力は、そこまで大事ではないというか、読みやすい日本語を各能力とPythonの知識の方が大事かもしれません。</p><h1 id="Transifexを使って翻訳する"><a href="#Transifexを使って翻訳する" class="headerlink" title="Transifexを使って翻訳する"></a>Transifexを使って翻訳する</h1><p>翻訳にはいろいろな便利なツールが、SaaSやデスクトップツール、市販、OSSなどさまざまな形態で提供されています。OSSだとOmegaTとかが有名ですね。翻訳プロジェクトではTransifexを使っています。</p><img src="/images/20210927b/スクリーンショット_2021-09-27_13.42.22.png" alt="スクリーンショット_2021-09-27_13.42.22.png" width="1200" height="751" loading="lazy"><p>プロジェクトに参加申請のDiscordのDMで、cocoatomoさんにアカウントをお伝えするとプロジェクトメンバーにしてもらえます。ページを開いたら右上の翻訳ボタンを押します。</p><p>次にファイル（ページ）のリストがずらっと表示されます。リストをスクロールして探すのはほぼ不可能ですので、左上の検索バーに名前を入れて探しましょう。Descriptorのページ(how toの方)がエキスパートPythonから参照されているので、これを翻訳します。</p><img src="/images/20210927b/スクリーンショット_2021-09-27_13.46.31.png" alt="スクリーンショット_2021-09-27_13.46.31.png" width="1200" height="776" loading="lazy"><p>翻訳作業は簡単です。翻訳していない行を探してクリックし、原文を参考にしながら日本語を入力し、保存ボタンを押していくだけです。なお、原文はSphinxで、reStrcuturedTextというマークアップ言語で書かれているため、それのインラインの構文がちょっと載っていたりします。このサンプル画像の <code>:meth:`__getattr__</code> ` とかがそれに該当します。マークアップを消してしまわないように、Raw編集モードをオプションで有効にしておきます。</p><img src="/images/20210927b/スクリーンショット_2021-09-27_13.48.34.png" alt="スクリーンショット_2021-09-27_13.48.34.png" width="1200" height="770" loading="lazy"><img src="/images/20210927b/スクリーンショット_2021-09-27_13.53.36.png" alt="スクリーンショット_2021-09-27_13.53.36.png" width="1200" height="531" loading="lazy"><p>この手の翻訳ツールは、原文が書き変わったりすると、全て未翻訳に戻ってしまいます。しかし、作業結果が消えてしまうわけではなく、過去の情報も残っています。それが提案というところに表示されます。原文の一致度とともに表示されます。形式が決まっているライブラリのリファレンスだと、他のモジュールの似たような文章も提案されることもあります。その場合はこのサジェストを元に、原文の違いだけ書き換えて利用できます。</p><p>ちなみに、↓の文章はfunction callsが単数系に変わっただけですので、日本語的には差はありません。こういうのはそのまま取り込んでしまっても良いですね。</p><img src="/images/20210927b/スクリーンショット_2021-09-27_13.56.18.png" alt="スクリーンショット_2021-09-27_13.56.18.png" width="1200" height="1452" loading="lazy"><p>こんな感じでばしばし翻訳していけます。一つのページを終わらせるのは達成感があります。過去からあったページは提案を元にやっていけるところもいくつかありますし、そうではない新規ページは新しいPythonの知識を得ることができます。自分の学習と、社会貢献が一度にできてしまうので翻訳活動はお得です。また、翻訳も一人で悩まずに、ちょっとしたことを情報交換できるDiscordチャンネルもあります。</p><p>1日５個ぐらいでいいからぼちぼち翻訳しようと思っています。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Python/">Python</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%BF%BB%E8%A8%B3/">翻訳</category>
      
      
      <comments>https://future-architect.github.io/articles/20210927b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>VPC内のAmazon API Gatewayをインターネットオーバーで疎通確認する</title>
      <link>https://future-architect.github.io/articles/20210924a/</link>
      <guid>https://future-architect.github.io/articles/20210924a/</guid>
      <pubDate>Thu, 23 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG DXユニットの真野です。AWSのAPI Gateway+Lambda</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニットの真野です。AWSのAPI Gateway+Lambda という構成でWebAPI開発を行う際、ちょっと便利に使える疎通方法をまとめます。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>API GatewayですがPublicなエンドポイントがあれば <code>curl</code>コマンドや<code>Postman</code>を用いての動作検証も容易だと思います。</p><p>一方でVPCエンドポイントを利用してプライベート APIとして構築されている場合は少し厄介です。そのセグメントにVPCなどで属することができればよいのですが、そのためだけに接続するのは煩わしい場面があります。踏み台サーバを作ってAWS Systems Manager(ssmコマンド）でログインするのも、開発環境でそこまでするのかという感覚がありました。また、AWS WAFなどで接続が絞られている時にはその条件を思い出す必要があり（覚えておけよって感じですが）、疎通確認すらちょっと面倒な場面があります。</p><h2 id="aws-apigateway-test-invoke-methodコマンドが便利"><a href="#aws-apigateway-test-invoke-methodコマンドが便利" class="headerlink" title="aws apigateway test-invoke-methodコマンドが便利"></a>aws apigateway test-invoke-methodコマンドが便利</h2><p>API Gatewayのマネジメントコンソールには動作確認用の<a href="https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/how-to-test-method.html">テスト呼び出し機能</a>が存在します。</p><img src="/images/20210924a/image.png" alt="マネジメントコンソールのテスト呼び出し" width="1200" height="601" loading="lazy"><p>こちらと同等の機能がawscliにも提供されています。<a href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/apigateway/test-invoke-method.html">api gateway test-invoke-method</a>コマンドです。これを利用することでマネジメントコンソール上と同等のリクエストをコマンドラインから確認できます。</p><p>つまりプライベートに構築されたAPI Gatewayに対しても、適切な権限があれば疎通確認ができるということです。</p><p>実行例を載せます。レスポンスは少し大きなJSONだったので、<code>jq</code>コマンドでフィールドを、ステータスコード・応答ヘッダ・応答ボディに絞っています。profileやrest-api-id, resoruce-idは適時読み替えてください。</p><figure class="highlight sh"><figcaption><span>test-invoke-methodの実行例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">aws apigateway --profile &lt;my_profile&gt; test-invoke-method --rest-api-id &lt;1234123412&gt; --resource-id &lt;3gapai&gt; \</span><br><span class="line">  --http-method PGET --path-with-query-string /v1/health |  jq <span class="string">&#x27;.status, .headers, .body&#x27;</span></span><br><span class="line">200</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">  <span class="string">&quot;Vary&quot;</span>: <span class="string">&quot;Accept-Encoding&quot;</span>,</span><br><span class="line">  <span class="string">&quot;X-Amzn-Trace-Id&quot;</span>: <span class="string">&quot;Root=1-67891233-abcdef012345678912345678;Sampled=0&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">&quot;&#123;\&quot;message\&quot;:\&quot;OK\&quot;&#125;\n&quot;</span></span><br></pre></td></tr></table></figure><p>–rest-api-id と –resource-idの取得方法は<a href="https://stackoverflow.com/questions/52446929/what-is-the-rest-api-id-and-resource-id-and-where-do-i-find-them">Stackoverflowの回答</a>がシンプルでした。こちらを参考に取得すると良いかなと思います。</p><h2 id="API-GatewayにLambdaオーソライザーが設定されている場合"><a href="#API-GatewayにLambdaオーソライザーが設定されている場合" class="headerlink" title="API GatewayにLambdaオーソライザーが設定されている場合"></a>API GatewayにLambdaオーソライザーが設定されている場合</h2><p>API GatewayでLambdaオーソライザーが設定されている構成の場合があります。オーソライザー側についてはこのブログにも<a href="https://future-architect.github.io/articles/20210610a/">AWS APIGateway Custom Authorizer入門</a>という記事がありますのでぜひ参照ください。</p><img src="/images/20210924a/オーソライザー.png" alt="API Gatewayのカスタムオーソライザーの構成図" width="575" height="251" loading="lazy"><p><a href="https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html">https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/apigateway-use-lambda-authorizer.html</a></p><p>このときに、オーソライザー側で認可する場合に、後続に追加パラメータを設定する仕様で設計されていると少し考慮が必要です。というのも<code>aws apigateway test-invoke-method</code>はオーソライザー経由で実行するのではなく、直接API Gatewayにトリガーされたリソースを呼び出すからです。この場合は<code>aws apigateway test-invoke-method</code>に後続のLambdaなどが必要とする、必要なパラメータを<code>--headers</code>などで追加して呼び出すするようにしましょう。</p><p>ちなみおに、オーソライザー自体のテストもマネジメントコンソールから可能ですし、AWS CLIからも <code>apigateway test-invoke-authorizer</code>コマンドで可能です。</p><ul><li><a href="https://docs.aws.amazon.com/cli/latest/reference/apigateway/test-invoke-authorizer.html">https://docs.aws.amazon.com/cli/latest/reference/apigateway/test-invoke-authorizer.html</a></li></ul><p>私が利用したことがないため、今回は説明を割愛します。</p><h2 id="AWS-SDK-for-Goからテスト要求を呼び出してみる。"><a href="#AWS-SDK-for-Goからテスト要求を呼び出してみる。" class="headerlink" title="AWS SDK for Goからテスト要求を呼び出してみる。"></a>AWS SDK for Goからテスト要求を呼び出してみる。</h2><p>AWS SDK for Goを利用すればTest Invokeの呼び出しができます。</p><ul><li><a href="https://docs.aws.amazon.com/sdk-for-go/api/service/apigateway/#APIGateway.TestInvokeMethod">https://docs.aws.amazon.com/sdk-for-go/api/service/apigateway/#APIGateway.TestInvokeMethod</a></li></ul><p>実装例を簡単に記載します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/aws&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/aws/session&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/service/apigateway&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> apigw = apigateway.New(session.Must(session.NewSessionWithOptions(session.Options&#123;</span><br><span class="line">Profile:           <span class="string">&quot;my_profile&quot;</span>, <span class="comment">// TODO 書き換え</span></span><br><span class="line">SharedConfigState: session.SharedConfigEnable,</span><br><span class="line">&#125;,</span><br><span class="line">)))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">params := &amp;apigateway.TestInvokeMethodInput&#123;</span><br><span class="line">RestApiId:           aws.String(<span class="string">&quot;1234123412&quot;</span>), <span class="comment">// TODO 書き換え</span></span><br><span class="line">ResourceId:          aws.String(<span class="string">&quot;3gapai&quot;</span>),     <span class="comment">// TODO 書き換え</span></span><br><span class="line">HttpMethod:          aws.String(http.MethodGet),</span><br><span class="line">PathWithQueryString: aws.String(<span class="string">&quot;/v1/health&quot;</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req, resp := apigw.TestInvokeMethodRequest(params)</span><br><span class="line"><span class="keyword">if</span> err := req.Send(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;test invoke: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d\n%v\n%v\n&quot;</span>, *resp.Status, aws.StringValueMap(resp.Headers), *resp.Body)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを実行すると、awscliコマンドで実行した結果と同等の応答を得られます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;go run sample.go</span><br><span class="line">200</span><br><span class="line">map[Content-Type:application/json Vary:Accept-Encoding X-Amzn-Trace-Id:Root=1-67891233-abcdef012345678912345678;Sampled=0]</span><br><span class="line">&#123;<span class="string">&quot;message&quot;</span>:<span class="string">&quot;OK&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>awscli側のapigateway test-invoke-methodに慣れておけば、インターフェースで悩むことはほぼ無いと思います。<br>取得結果のステータスコードや応答ボディなどは <em>int64や</em>string でポインタなので一瞬戸惑うくらいでしょうか。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>プライベートなAPI Gatewayだと開発環境の疎通レベルでも検証が面倒だと思ったときには、<code>test-invoke-method</code>コマンドを利用する選択もあるよという記事でした。</p><p>当然、AWS SDKからも呼ぶことができますので、ちょっとした疎通テストを自動化するときにも利用できるかと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/APIGateway/">APIGateway</category>
      
      
      <comments>https://future-architect.github.io/articles/20210924a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Future Engineer Camp 2021に参加しました！</title>
      <link>https://future-architect.github.io/articles/20210922a/</link>
      <guid>https://future-architect.github.io/articles/20210922a/</guid>
      <pubDate>Tue, 21 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;始めに&quot;&gt;&lt;a href=&quot;#始めに&quot; class=&quot;headerlink&quot; title=&quot;始めに&quot;&gt;&lt;/a&gt;始めに&lt;/h1&gt;&lt;p&gt;こんにちは。2021年のフューチャーのサマーインターン「&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="始めに"><a href="#始めに" class="headerlink" title="始めに"></a>始めに</h1><p>こんにちは。2021年のフューチャーのサマーインターン「<a href="https://note.com/future_event/n/n76e7e7d4beef">Engineer Camp</a>」に参加いたしました、山本雄樹です。</p><p>インターンの振り返りも兼ねて、このブログを読んだ方にインターンの内容や雰囲気を伝えられたらと考えています。</p><img src="/images/20210922a/profile.jpeg" alt="profile.jpeg" width="460" height="460" loading="lazy"><h1 id="インターン参加前"><a href="#インターン参加前" class="headerlink" title="インターン参加前"></a>インターン参加前</h1><p>インターン参加前のスキルセットとしては以下の通りです。バックエンドの技術を中心に学習していたのですが、めぼしい成果物などもなく、実務経験が一切ありませんでした。</p><ul><li>Go言語やGitを日常的に使用している</li><li>Linuxの簡単なコマンドであれば知っている</li><li>GCPとDockerを使用したことがある</li></ul><p>そのため、Go言語を使用した実務経験を積めるようなインターン先を探していました。</p><h1 id="参加したコース"><a href="#参加したコース" class="headerlink" title="参加したコース"></a>参加したコース</h1><p>私が参加した2021年のフューチャーのインターンではコースが合計11コースあり、その中から私は③の「<a href="https://note.com/future_event/n/n76e7e7d4beef#bJRgs">大規模IoTプラットフォームのバックエンド開発</a>」を選んで応募しました。Go言語を使用する開発の中で、一番自分の技術スタックとあっているものを選びました。</p><p>実際の業務では以下の技術を使用しました。</p><ul><li>言語: Go言語</li><li>インフラ系: Terraform, AWS</li><li>エディタ: GoLand, VSCode</li><li>その他: Git, Docker, Google Chat API</li></ul><h1 id="インターン内容"><a href="#インターン内容" class="headerlink" title="インターン内容"></a>インターン内容</h1><p>インターンには週5日、四週間参加しました。</p><p>稼働時間は10:00~19:00で、始めの時間を早める場合は終わりの時間を早めます。昼休憩の１時間とインターン生の集まり、インターン生用講義、採用チームとの面談（週一、各30分）以外は全てお仕事の時間です。受け入れ先プロジェクトの方からタスクをもらって、調べたり質問したりしながらタスクを進め、終わったら新しいタスクをもらう、というサイクルを回していました。</p><h2 id="インターンの雰囲気"><a href="#インターンの雰囲気" class="headerlink" title="インターンの雰囲気"></a>インターンの雰囲気</h2><h3 id="インターン生同士の関わり"><a href="#インターン生同士の関わり" class="headerlink" title="インターン生同士の関わり"></a>インターン生同士の関わり</h3><p>週に一度、インターン生の集まりがあり、そこでお互いが行っているタスクの内容を話したります。お互い異なるコースに参加しているため聞ける話もバラバラで面白いです。</p><p>話し足りなかったという方もいらっしゃるかと思いますが、個人的にはその分タスクに集中できたので良かったかなと考えています。</p><h3 id="社員の方との関わり"><a href="#社員の方との関わり" class="headerlink" title="社員の方との関わり"></a>社員の方との関わり</h3><p>受け入れ先のプロジェクトの方がインターン生の面倒を見てくれます。基本的には一人でタスクを進めていくのですが、行き詰まった際にはSlackで質問します。困っているときには声を上げることが大切です。</p><p>また、技術ブログを執筆した際にはたくさんのレビューをいただきました。</p><img src="/images/20210922a/スクリーンショット_2021-09-17_13.40.38.png" alt="スクリーンショット_2021-09-17_13.40.38.png" width="918" height="444" loading="lazy"><h2 id="インターンでの成果"><a href="#インターンでの成果" class="headerlink" title="インターンでの成果"></a>インターンでの成果</h2><h3 id="技術力の向上"><a href="#技術力の向上" class="headerlink" title="技術力の向上"></a>技術力の向上</h3><p>Go言語やGitは日常的に使用しておりキャッチアップの必要性がなかった分、インターン期間中は以下のようなAWSやTerraformといったインフラ寄りの技術について多く触れることができ、バックエンドエンジニアとして扱うことのできる技術領域を広げることができました。</p><img src="/images/20210922a/スクリーンショット_2021-09-16_18.56.07.png" alt="スクリーンショット_2021-09-16_18.56.07.png" width="1200" height="563" loading="lazy"><h3 id="「IoTデバイスのエラー通知を集計して日毎に通知するシステム」の実装"><a href="#「IoTデバイスのエラー通知を集計して日毎に通知するシステム」の実装" class="headerlink" title="「IoTデバイスのエラー通知を集計して日毎に通知するシステム」の実装"></a>「IoTデバイスのエラー通知を集計して日毎に通知するシステム」の実装</h3><p>期間中にこなしたタスクの中で一番粒度の大きかったものが<strong>「IoTデバイスのエラー通知を集計して日毎に通知するシステム」</strong>の実装です。</p><p>AWS LambdaではGo言語を使用して以下の処理を実装しました。</p><ul><li>DynamoDBから昨日のデータを取得する</li><li>取得したデータを集計する</li><li>Amazon KMSで暗号化されたGoogle Chatの送信先URLを復号する</li><li>Google Chat APIで指定されたJSON形式にして送信する</li></ul><img src="/images/20210922a/スクリーンショット_2021-09-16_14.39.51.png" alt="スクリーンショット_2021-09-16_14.39.51.png" width="1017" height="485" loading="lazy"><p>実装はアサインしたプロジェクトのコーディング規則やコードを参照しながら進めました。行き詰まった際にはメンターの方に質問をすることができますし、実務レベルのコードレビューをしていただけます。おかげさまでインターンを通して、実務レベルのGo言語のコーディング能力と自信をつけることができたと考えています。</p><h3 id="Future-Tech-Blogへの投稿"><a href="#Future-Tech-Blogへの投稿" class="headerlink" title="Future Tech Blogへの投稿"></a>Future Tech Blogへの投稿</h3><p>フューチャーは学びや経験をブログ化する文化が強く、私もその文化に乗じてインターン期間中にブログを２本投稿いたしました。<a href="/articles/20200530/#%E3%82%A2%E3%83%AB%E3%83%90%E3%82%A4%E3%83%88er%E3%82%84%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3%E7%94%9F%E3%81%AB%E5%B0%B1%E8%81%B7%E6%B4%BB%E5%8B%95%E3%83%8D%E3%82%BF%E3%81%A8%E3%81%97%E3%81%A6%E6%9B%B8%E3%81%84%E3%81%A6%E3%82%82%E3%82%89%E3%81%86">こちらの記事にもあるとおり</a>、フューチャーではブログの執筆が歓迎されます。書きたい欲があるのであればメンターの方にチラッと伺ってみると良いと思います。きっと背中を押してくれます。<br><img src="/images/20210922a/スクリーンショット_2021-09-17_11.32.42.png" alt="スクリーンショット_2021-09-17_11.32.42.png" width="789" height="492" loading="lazy"></p><p>投稿記事:</p><ul><li><a href="/articles/20210902b/">GoLand Tips 7選</a></li><li><a href="/articles/20210913a/">【Google Chat API】Incoming Webhook を Go で触ってみる</a></li></ul><h2 id="インターンでの学び"><a href="#インターンでの学び" class="headerlink" title="インターンでの学び"></a>インターンでの学び</h2><h3 id="リモート環境でのコミューニケーション"><a href="#リモート環境でのコミューニケーション" class="headerlink" title="リモート環境でのコミューニケーション"></a>リモート環境でのコミューニケーション</h3><p>リモートでは自分が何をしていて、どんなことを考えているかが相手に伝わりにくいです。そのため常に自分が何をしていて、どんなことを考えているかを文字としてSlackの個人用スレッドにぶら下げていました。そうすることで自分の作業内容を相手が理解、管理しやすくなります。</p><h3 id="質問のテクニック"><a href="#質問のテクニック" class="headerlink" title="質問のテクニック"></a>質問のテクニック</h3><p>私はインターンの始めは、問題について15分は必ず考え、解決の糸口が見つからなそうな場合は質問するようにしていました。しかし実際には質問がまとまっていなかったり、どのように質問するか整理して考えている間に解決したりと、うまくいかない場面が何度かありました。これらは自分で解決ができないと分かったタイミングですぐに質問をしているために起こっており、質問をする前に自分の中で一旦整理する時間が必要だと反省しました。</p><p>今後は以下のような手順で質問することを心がけたいと考えています。</p><ul><li>問題について15分考える</li><li>解決できない場合はさらに15分かけて問題を整理し、相手にうまく伝える準備をする</li><li>問題を文字に起こして質問する</li></ul><h3 id="ブログ化のメリット"><a href="#ブログ化のメリット" class="headerlink" title="ブログ化のメリット"></a>ブログ化のメリット</h3><p>インターン参加前はFuture Tech Blogについて、採用活動の一環として行っているのかな程度に思っていたのですが（実際私はフューチャーを認知したのはFuture Tech Blogがきっかけでした）、社内での使われ方を見てブログ化することのメリットを感じました。</p><p>以下は成果発表会で使用したスライドです。</p><img src="/images/20210922a/スクリーンショット_2021-09-17_13.12.41.png" alt="スクリーンショット_2021-09-17_13.12.41.png" width="1194" height="684" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>フューチャーのインターンに参加したことにより以下のような経験を積むことができました。</p><ul><li>実務でのGoの開発経験を得ることができた</li><li>AWSを中心とした現場で使われているインフラに関しての知識を得ることができた</li><li>リモートワークの雰囲気を知れた</li><li>フューチャーのブログ文化に触れることができた</li></ul><p>インターンを通して社員の方と同じように扱っていただきながらも、インターン生としてしっかりと面倒を見ていただきました。おかげさまで実際の仕事の雰囲気を感じながら、楽しく４週間を過ごすことができました。</p><p>インターンの企画をしてくださった採用の方々、面倒を見ていただいた受け入れ先プロジェクトの皆様、ありがとうございました！<br><img src="/images/20210922a/集合写真.png" alt="集合写真.png" width="1200" height="620" loading="lazy"></p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/">インターン</category>
      
      <category domain="https://future-architect.github.io/tags/IoT%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0/">IoTプラットフォーム</category>
      
      
      <comments>https://future-architect.github.io/articles/20210922a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Certified Security - Specialty合格体験記</title>
      <link>https://future-architect.github.io/articles/20210921a/</link>
      <guid>https://future-architect.github.io/articles/20210921a/</guid>
      <pubDate>Mon, 20 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;先日&lt;a href=&quot;https://aws.amazon.com/jp/certification/certified-security-specialty/?ch=sec&amp;sec=rmg&amp;d=1&quot;&gt;AWS Certified</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>TIGの伊藤真彦です。</p><p>先日<a href="https://aws.amazon.com/jp/certification/certified-security-specialty/?ch=sec&sec=rmg&d=1">AWS Certified Security - Specialty</a>に合格しました。<br>今回も合格体験記を残しておきます。</p><img src="/images/20210921a/image.png" alt="合格ロゴ" width="300" height="300" loading="lazy"><h1 id="AWS-Certified-Security-Specialtyとは"><a href="#AWS-Certified-Security-Specialtyとは" class="headerlink" title="AWS Certified Security - Specialtyとは"></a>AWS Certified Security - Specialtyとは</h1><p>暗号化や脆弱性対策、安全な通信の実現など、セキュリティに関するトピックを集めた試験です。</p><p>Solutions Architectをはじめ、各種試験にもセキュリティに関する問題は出題されます。</p><p>傾向としては、他の試験の問題からセキュリティ部分を抜き出したもののような印象を受けるものが半分以上ありました。逆に言うとこれを受験するとセキュリティに関してはSolutions Architect - Professional以上の知識が身につくと捉えても差し支えないでしょう。</p><p>なおフューチャーで開発している<a href="https://vuls.biz/">Future Vuls</a>で扱うような意味合いでのセキュリティについては試験の守備範囲外で、あくまでもクラウドサービスの運用に関する試験になっています。</p><h1 id="学習方法"><a href="#学習方法" class="headerlink" title="学習方法"></a>学習方法</h1><p>まずは他の試験を受験して基礎を固めることを推奨します。</p><p>仮にAWSのサービスに関する知識が完全に無い状態で受験すると、何のセキュリティを何で守っているのか理解することが難しく学習に苦労すると思います。</p><p>私は基礎部分を学習済みのため<a href="https://aws.koiwaclub.com/">aws.koiwaclub.com</a>だけで合格することができました。</p><p>下記の概要が一通り理解できるまでAWSの全体像を把握できていれば問題の内容自体が極めて難しいと感じる事はないと思います。</p><h4 id="ネットワーキング"><a href="#ネットワーキング" class="headerlink" title="ネットワーキング"></a>ネットワーキング</h4><ul><li>NACL、セキュリティグループ</li><li>NAT Gateway</li></ul><h4 id="攻撃対策"><a href="#攻撃対策" class="headerlink" title="攻撃対策"></a>攻撃対策</h4><ul><li>AWS WAF</li><li>AWS Shield</li><li>Amazon CloudFront</li></ul><h4 id="アクセス制御"><a href="#アクセス制御" class="headerlink" title="アクセス制御"></a>アクセス制御</h4><ul><li>AWS IAM、 SCP</li><li>Active Directory、 SSO</li><li>Amazon Cognito</li></ul><h4 id="セキュリティ診断"><a href="#セキュリティ診断" class="headerlink" title="セキュリティ診断"></a>セキュリティ診断</h4><ul><li>Amazon Inspector</li><li>AWS Trusted Advisor</li><li>AWS Config</li><li>AWS Systems Manager</li><li>Amazon GuardDuty</li><li>AWS Artifact</li></ul><h4 id="ロギング"><a href="#ロギング" class="headerlink" title="ロギング"></a>ロギング</h4><ul><li>VPC フローログ</li><li>AWS CloudTrail</li><li>Amazon CloudWatch Logs</li><li>Amazon Athena</li></ul><h4 id="アラート、対応の自動化"><a href="#アラート、対応の自動化" class="headerlink" title="アラート、対応の自動化"></a>アラート、対応の自動化</h4><ul><li>Amazon CloudWatch Events</li><li>Amazon Simple Notification Service</li><li>AWS Lambda</li></ul><h4 id="暗号化"><a href="#暗号化" class="headerlink" title="暗号化"></a>暗号化</h4><ul><li>AWS Key Management Service (KMS)</li><li>AWS Secrets Manager</li><li>AWS CloudHSM</li></ul><p>Amazon S3はVPC Endpointやバケットポリシーの扱い、暗号化、ログ情報の保管場所などあらゆるトピックで出現します。</p><p>更にはAmazon MacieやAWS Security Hubといった比較的新しめのサービスもしっかりと出題されるようになっています。</p><p>学習の過程でDDOS攻撃やSQLインジェクション、ポートスキャン等、脆弱性やサイバー攻撃に関する概念のうち知名度の高いものは知っている前提で問題文が作成されます。脆弱性情報データベースに載っているマニアックな脆弱性については知らなくても一切問題ない程度の知識が要求されます。</p><p>各サービスの目的、違いを意識して概要を理解することが重要であり、全てを実際に運用できるほど熟知する必要はありませんが、それでもこうして並べてみるとそこそこの量になりました。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>基礎部分の試験を全て勉強済みの状態であるため簡単に感じる部分もありましたが、難易度としては申し分ないものでした。</p><p>AWS Security Hubなど新しめの情報のキャッチアップができたのが個人的には役に立ちました。</p><p>ここ数か月だけでも渡邉光さんの<a href="/articles/20210906a/">AWS Certified Developer - Associate 合格体験記</a>に見られるように試験に合格する話を聞くようになりました、社内外問わずモチベーションを維持できるよう盛り上げていきたいですね。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/">合格記</category>
      
      
      <comments>https://future-architect.github.io/articles/20210921a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>lib/pq から jackc/pgx への移行</title>
      <link>https://future-architect.github.io/articles/20210916a/</link>
      <guid>https://future-architect.github.io/articles/20210916a/</guid>
      <pubDate>Wed, 15 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20210916a/top.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;378&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;ライブリッツの筒井です。&lt;/p&gt;
&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20210916a/top.png" alt="" width="1000" height="378" loading="lazy"><p>ライブリッツの筒井です。</p><p><a href="/articles/20210726a/">GoのORマッパー連載</a>、おまけ記事です。<br>特に示し合わせた訳では無いのですが、RDBは全員がPostgreSQLを使っていましたね。</p><p>さて、今回の連載記事のいくつかでも言及されていた、<a href="https://github.com/jackc/pgx">jackc/pgx</a> について簡単に紹介します。</p><ul><li><a href="/articles/20210727a/">GoとPoatgreSQLでCOPY</a></li><li><a href="/articles/20210729a/">GORM v1 と v2 のソースコードリーディングしてみた</a></li></ul><p>GoでのPostgreSQLドライバは <a href="https://github.com/lib/pq">lib/pq</a> が定番でしたが、現在その開発は消極的で今後機能が追加されることはめったに無いそうです。<br><a href="https://github.com/lib/pq#status">https://github.com/lib/pq#status</a></p><p>一方 pgx は現在も活発に開発がなされており、GORM v2にも採用されています。</p><h2 id="使い方の比較"><a href="#使い方の比較" class="headerlink" title="使い方の比較"></a>使い方の比較</h2><p>lib/pq （およびdatabase/sql）と pgx の使い方を比較していきます。<br>pgxはドライバだけでなく database/sql 相当の機能も備えており、これ単体で使用することが可能です。</p><h3 id="接続"><a href="#接続" class="headerlink" title="接続"></a>接続</h3><p><code>configureDatabase()</code> が lib/pq および database/sql、<code>configureDatabasePgx()</code> が pgx での書き方です。以後この命名に従います。</p><p><code>pgx.Connect()</code> で取得可能な <code>pgx.Conn</code> にはコネクションプールは含まれておらずスレッドセーフでも無いため、<br>database/sql と同様の使い方をする場合には <code>pgxpool.Connect()</code> を使用することになります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">pool *pgxpool.Pool</span><br><span class="line">db   *sql.DB</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">configureDatabase</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">uri := <span class="string">&quot;postgres://postgres:password@postgres/postgres?sslmode=disable&quot;</span></span><br><span class="line">db, err = sql.Open(<span class="string">&quot;postgres&quot;</span>, uri)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">configureDatabasePgx</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">uri := <span class="string">&quot;postgres://postgres:password@postgres/postgres?sslmode=disable&quot;</span></span><br><span class="line">pool, err = pgxpool.Connect(context.Background(), uri)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SQL実行"><a href="#SQL実行" class="headerlink" title="SQL実行"></a>SQL実行</h3><p>pgx では、各関数がデフォルトでcontextを受けるようになっています。そのため、database/sql の <code>QueryContext()</code> と pgx の <code>Query()</code> が同等です。</p><p>その他、ExecやBeginTxなどについても同様の使い勝手となるため割愛します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">query</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">q := <span class="string">`select tablename, tableowner from pg_catalog.pg_tables where schemaname = &#x27;public&#x27;`</span></span><br><span class="line">rows, err := db.QueryContext(context.TODO(), q)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> owner <span class="keyword">string</span></span><br><span class="line">rows.Scan(&amp;name, &amp;owner)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s owned by %s\n&quot;</span>, name, owner)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryPgx</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">q := <span class="string">`select tablename, tableowner from pg_catalog.pg_tables where schemaname = &#x27;public&#x27;`</span></span><br><span class="line">rows, err := pool.Query(context.TODO(), q)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> rows.Close()</span><br><span class="line"><span class="keyword">for</span> rows.Next() &#123;</span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> owner <span class="keyword">string</span></span><br><span class="line">rows.Scan(&amp;name, &amp;owner)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s owned by %s\n&quot;</span>, name, owner)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pgx の場合は1行ごとにコールバック関数を呼び出す <code>QueryFunc()</code> が用意されています。<code>defer rows.Close()</code> や <code>for rows.Next() &#123;&#125;</code> といったSnippetが不要になります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">queryPgxEx</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;========== queryPgxEx() ==========&quot;</span>)</span><br><span class="line">q := <span class="string">`select tablename, tableowner from pg_catalog.pg_tables where schemaname = &#x27;public&#x27;`</span></span><br><span class="line"><span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> owner <span class="keyword">string</span></span><br><span class="line">_, err := pool.QueryFunc(context.TODO(), q, []<span class="keyword">interface</span>&#123;&#125;&#123;&#125;, []<span class="keyword">interface</span>&#123;&#125;&#123;&amp;name, &amp;owner&#125;, <span class="function"><span class="keyword">func</span><span class="params">(qfr pgx.QueryFuncRow)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%s owned by %s\n&quot;</span>, name, owner)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="エラーハンドリング"><a href="#エラーハンドリング" class="headerlink" title="エラーハンドリング"></a>エラーハンドリング</h3><p>pgx では Go 1.13 で追加された <code>errors.As()</code> が使えるようになっています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">invalidQuery</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;========== invalidQuery() ==========&quot;</span>)</span><br><span class="line">q := <span class="string">`select 1 +`</span></span><br><span class="line"><span class="keyword">var</span> v <span class="keyword">int</span></span><br><span class="line">err := db.QueryRowContext(context.TODO(), q).Scan(&amp;v)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err, ok := err.(*pq.Error); ok &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;pq error: %v %s&quot;</span>, err.Code, err.Message)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">invalidQueryPgx</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;========== invalidQueryPgx() ==========&quot;</span>)</span><br><span class="line">q := <span class="string">`select 1 +`</span></span><br><span class="line"><span class="keyword">var</span> v <span class="keyword">int</span></span><br><span class="line">err := pool.QueryRow(context.TODO(), q).Scan(&amp;v)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">var</span> pgErr *pgconn.PgError</span><br><span class="line"><span class="keyword">if</span> errors.As(err, &amp;pgErr) &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;pgx error: %s %s&quot;</span>, pgErr.Code, pgErr.Message)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pgx-の便利機能をつかう"><a href="#pgx-の便利機能をつかう" class="headerlink" title="pgx の便利機能をつかう"></a>pgx の便利機能をつかう</h2><p>pgx にはLoggerを設定することが可能です。</p><p>次のコードは pgx に zerolog を設定する例です。コネクションプールの作成時に設定します。</p><p>実行したSQLや実行時間を構造化ログとして出力できるのはなかなか便利です。</p><p>zerologの他にもzap、log15などのAdapterが用意されているようです。<br><a href="https://github.com/jackc/pgx/tree/v4.13.0/log">https://github.com/jackc/pgx/tree/v4.13.0/log</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">configureDatabasePgxWithConfig</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">uri := <span class="string">&quot;postgres://postgres:password@postgres/postgres?sslmode=disable&quot;</span></span><br><span class="line">cfg, err := pgxpool.ParseConfig(uri)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">cfg.ConnConfig.Logger = zerologadapter.NewLogger(log.With().Logger())</span><br><span class="line">cfg.ConnConfig.LogLevel = pgx.LogLevelDebug</span><br><span class="line">pool, err = pgxpool.ConnectConfig(context.TODO(), cfg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>また、複数のSQLをまとめて実行できるBatch機能が用意されています。<br>通信にかかるオーバーヘッドを削減することが出来ますが、使い所は限定的かもしれません。</p><p>Resultの順番は、Queueに入れた順番が保持されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">batch</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;========== batch() ==========&quot;</span>)</span><br><span class="line">b := &amp;pgx.Batch&#123;&#125;</span><br><span class="line">b.Queue(<span class="string">&quot;select 1, pg_sleep(1.5)&quot;</span>)</span><br><span class="line">b.Queue(<span class="string">&quot;select 2, pg_sleep(1.0)&quot;</span>)</span><br><span class="line">b.Queue(<span class="string">&quot;select 3, pg_sleep(0.5)&quot;</span>)</span><br><span class="line">res := pool.SendBatch(context.TODO(), b)</span><br><span class="line"><span class="keyword">defer</span> res.Close()</span><br><span class="line">v := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.Len(); i++ &#123;</span><br><span class="line">err := res.QueryRow().Scan(&amp;v[i], <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;Result: %v\n&quot;</span>, v) <span class="comment">// Result: [1 2 3]</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="pgx-と-database-sql-をあわせてつかう"><a href="#pgx-と-database-sql-をあわせてつかう" class="headerlink" title="pgx と database/sql をあわせてつかう"></a>pgx と database/sql をあわせてつかう</h2><p><a href="https://github.com/jmoiron/sqlx">sqlx</a> や <a href="https://github.com/volatiletech/sqlboiler">SQLBoiler</a> など、 database/sql に依存するライブラリを使用する場合、pgx のドライバ (<a href="https://pkg.go.dev/github.com/jackc/pgx/v4@v4.13.0/stdlib">https://pkg.go.dev/github.com/jackc/pgx/v4@v4.13.0/stdlib</a>) のみを利用することが可能です。</p><p>この連載で紹介された <a href="https://github.com/ent/ent">ent</a> でも使用可能です。<br><a href="https://entgo.io/docs/sql-integration/#use-pgx-with-postgresql">https://entgo.io/docs/sql-integration/#use-pgx-with-postgresql</a></p><p>使いたいのがsqlxであれば、pgxをサポートしている <a href="https://github.com/georgysavva/scany">scany</a> への乗り換えもありかと思います。</p><p>単純にドライバをすげ替えるだけであれば、インポートするドライバとドライバ名を変更するだけです。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">&quot;database/sql&quot;</span><br><span class="line"><span class="deletion">-_ &quot;github.com/lib/pq&quot;</span></span><br><span class="line"><span class="addition">+_ &quot;github.com/jackc/pgx/v4/stdlib&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var err error</span><br><span class="line">uri := &quot;postgres://postgres:password@postgres/postgres?sslmode=disable&quot;</span><br><span class="line"><span class="deletion">- db, err = sql.Open(&quot;postgres&quot;, uri)</span></span><br><span class="line"><span class="addition">+ db, err = sql.Open(&quot;pgx&quot;, uri)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>stdlib.RegisterConnConfig()</code> を使えば、Loggerなどを設定することも可能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uri := <span class="string">&quot;postgres://postgres:password@postgres/postgres?sslmode=disable&quot;</span></span><br><span class="line">cfg, _ := pgx.ParseConfig(uri)</span><br><span class="line">cfg.Logger = zerologadapter.NewLogger(log.With().Logger())</span><br><span class="line">connStr := stdlib.RegisterConnConfig(cfg)</span><br><span class="line">db, _ = sql.Open(<span class="string">&quot;pgx&quot;</span>, connStr)</span><br></pre></td></tr></table></figure><p>また <code>sql.Conn.Raw()</code> を使うと、普段は <code>sql.DB</code> でコネクションを扱いつつ、CopyFrom など pgx の機能が使いたいときは <code>pgx.Conn</code> を使う、といった使い方が可能になります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">conn, err := db.Conn(context.TODO())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// handle error</span></span><br><span class="line">&#125;</span><br><span class="line">err := conn.Raw(<span class="function"><span class="keyword">func</span><span class="params">(driverConn <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c *pgx.Conn = driverConn.(*stdlib.Conn).Conn()</span><br><span class="line">c.CopyFrom(...)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>ここで紹介した以外にも、database/sql には無いたくさんの機能が sqlx では実装されています。<br><a href="https://github.com/jackc/pgx#features">https://github.com/jackc/pgx#features</a></p><p>lib/pq から pgx への移行にかかる問題については、golang-migrate の<a href="https://github.com/golang-migrate/migrate/issues/512">こちらのIssue</a>における議論がとても参考になります。<br>移行作業自体はとても簡単ですので、まずは試してみてはいかがでしょうか。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/PostgreSQL/">PostgreSQL</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/ORM/">ORM</category>
      
      
      <comments>https://future-architect.github.io/articles/20210916a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Adobe XDからFlutterに変換する</title>
      <link>https://future-architect.github.io/articles/20210915a/</link>
      <guid>https://future-architect.github.io/articles/20210915a/</guid>
      <pubDate>Tue, 14 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;モバイル開発をする場合、デザインはAdobe</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>モバイル開発をする場合、デザインはAdobe XDかFigmaか何かしらのワイヤフレームツールを使うと思います。本エントリーではそれらをもとにアプリケーションを作成したときのTipsを紹介します。</p><p>なお、デザインする人はステークホルダーの人に共有したりすると思うので有料版のXDの方が良いと思いますが、Flutter開発する人はXDファイルを持っている or 共有してもらえたら、スターター版で大丈夫です。XDの有料版とスターター版の違いは共有の機能の自由度だったり、PDFエクスポートの回数制限だったりします。</p><ul><li><a href="https://miya-system-works.com/blog/detail/adobe-xd-plan/">みやしもブログ: Adobe XDを使おう！無料・有料プランの違いを詳しく解説</a></li></ul><p>スターターパックをインストールしたら、Creative Cloudアプリ（タスクバーに常駐していると思います）のマーケットプレースから、XD to Flutterというプラグインを入れます。<a href="https://blog.adobe.com/jp/publish/2020/09/25/cc-web-xd-flutter-plugin-now-available.html">AdobeとGoogleが協力して開発している</a>プラグインで、これがあるのとないのでは開発効率が大きく変わります。なお、この常駐アプリ、結構CPUを持っていくっぽいので、プラグインを入れた後は終了させたほうが良いかも？プラグインのインストール以外はXDのバージョンアップでは使いましたが、使うのはそれぐらいかと。</p><img src="/images/20210915a/スクリーンショット_2021-09-08_17.06.46.png" alt="XD to Flutterプラグイン" width="1136" height="752" loading="lazy"><h1 id="基本はCopy-Selected"><a href="#基本はCopy-Selected" class="headerlink" title="基本はCopy Selected"></a>基本はCopy Selected</h1><p>さて、XD to Flutterにはまるごとエクスポートする機能もありますが、どうもレスポンシブのせいか、ちょっと見た目のデザインがちょっとXDと違うとか違いがあります。XD to Flutterでエクスポートすると、<a href="https://pub.dev/packages/adobe_xd">adobe_xd</a>パッケージのPinを使ったコードが生成されます。XDのレスポンシブ機能をFlutter上で再現する機能のようですが、XD上でそこまできちんとデザインを作り込まれていないとおそらく逆効果です。でも、実装する立場からすると、そこをXD上で頑張るよりは、早くXDファイルをもらえた方が嬉しいかなと思います。</p><p>あくまでもXDはお絵描きツールなので、内部のコンテンツの量や数が可変になったときのレイアウトの挙動とか、そのままフリーハンドで再現できるわけではありません。高機能なUI部品をそのまま再現できません。もしかしたら.NetのExpression Blendが世界を制覇する世界線であればそういう開発もできたかもしれませんが、基本は１要素を選択して、左下のCopy Selectedボタンを使って、コードをクリップボードに入れて、Android Studioに貼り付けていくのが良いでしょう。</p><img src="/images/20210915a/スクリーンショット_2021-09-08_17.00.35.png" alt="Copy Selectedボタン" width="812" height="1144" loading="lazy"><p>テキストとかもフォーマットつきで取り出せますので、それをぺたぺた貼り付けていけば良い感じに再現できます。こういう影付き角丸長方形とかも・・・</p><img src="/images/20210915a/スクリーンショット_2021-09-08_18.07.10.png" alt="う影付き角丸長方形" width="279" height="603" loading="lazy"><p>こんな感じのコードになります。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Container(</span><br><span class="line">    decoration: BoxDecoration(</span><br><span class="line">      borderRadius: BorderRadius.circular(<span class="number">10.0</span>),</span><br><span class="line">      color: <span class="keyword">const</span> Color(<span class="number">0xff9ffdfb</span>),</span><br><span class="line">      boxShadow: [</span><br><span class="line">        BoxShadow(</span><br><span class="line">          color: <span class="keyword">const</span> Color(<span class="number">0x29000000</span>),</span><br><span class="line">          offset: Offset(<span class="number">0</span>, <span class="number">3</span>),</span><br><span class="line">          blurRadius: <span class="number">6</span>,</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><p>要素を貼り付ける土台としては次のコンポーネントを駆使して組み合わせていく感じです。CSSで要素のレイアウトをしたことがあれば難しくはないと思います。もっといろいろあると思いますが↓姿形のないレイアウト用コンポーネントは、以下のやつぐらいを使えばだいたいやりたいレイアウトは問題なくできました。以下のリストはよく使う順です。</p><ul><li><code>Scaffold</code>: 基本の土台です</li><li><code>Column</code>: 基本の縦整列</li><li><code>Row</code>: 横整列。<code>Column</code>の中に入れる</li><li><code>SizedBox</code>: 固定サイズのスペーサーとして使う</li><li><code>Container</code>: こちらも固定サイズのスペーサーとして使えるが背景画像を設定したりするし、子要素も持てるし、HTMLのdiv的に使える。相対サイズを設定したい場合は<br><code>MediaQuery.of(context).size.width</code>に0.8を掛け算して設定とかもある。</li><li><code>Padding</code>: 中の要素の前後左右にスペースを設定。CSSのpaddingと一緒。SizedBoxを前後左右に並べるよりもリーズナブル。隙間調整に。</li><li><code>Expanded</code>: 中の要素を空きスペースを埋めるように広げる。CSSのflexboxみたいなもの。たまに、自動で空きスペース全部埋めるようにレイアウトされる要素を閉じ込めるのに使う（横いっぱいに勝手に広がる<code>RadioListTile</code>を横にいくつか並べたい場合とか）</li><li><code>Stack</code>: レイヤーにして要素を前後に重ねるときに利用。背景画像を一枚置くだけなら<code>Container</code>で済むが、そうでない場合に</li><li><code>SingleChildScrollView</code>: どうしても縦横比の小さい端末で下が欠けてしまう、ソフトキーボードが出た瞬間におかしくなる、みたいなときに。全体をこれでくるむと（<code>Scaffold</code>のbodyをこれにして、他の要素はこれの子供にする）、なんとかなる。</li></ul><p>基本的なレイアウトについてはこのブログの<a href="https://future-architect.github.io/articles/20210513b/">Flutterレイアウト入門</a>にもあります。</p><h1 id="画像の要素の書き出し"><a href="#画像の要素の書き出し" class="headerlink" title="画像の要素の書き出し"></a>画像の要素の書き出し</h1><p>Flutterはプラグインを入れればSVGが使えます。adobe_xdパッケージもベクター画像はSVGのパッケージを前提としたコードを生成したりもします。しかし、最新のSVGパッケージと、<code>Container</code>の背景にSVGを使うパッケージで依存のバージョンが合わず、背景にSVGが使えなかったりしたので問題なく本体機能だけで使えるPNGを作成しました。レンダラーの都合でSVGのままでは再現性が怪しい場合も画像にしておくと良いかもしれません。</p><p>書き出すときは、ファイルメニューの書き出しを選択し、フォーマットでSVGを選ぶと出力できます。PNGをここから書き出すのもできますが、どうもXDに配置されたサイズでの書き出しになるっぽくて、かなり荒い画像になってしまったのでSVGでエクスポートしています。</p><img src="/images/20210915a/スクリーンショット_2021-09-08_17.39.23.png" alt="ファイルメニューの書き出し" width="695" height="428" loading="lazy"><img src="/images/20210915a/スクリーンショット_2021-09-08_17.39.48.png" alt="SVGエクスポート" width="632" height="342" loading="lazy"><p>その後はOSSの<a href="https://inkscape.org/ja/">Inkscape</a>で、DPIを180とか大きめにしてPNGに書き出しています。ちょっと不安定だったり、ウェルカムウインドウが開いているとウインドウ操作ができなかったり、DPIを変更してフォーカスを変換してからエクスポート先、の方を押さないとサイズが反映されなかったり、ちょっと癖はありますが、根気よくがんばりましょう。</p><img src="/images/20210915a/スクリーンショット_2021-09-08_17.49.11.png" alt="PNGに書き出し" width="498" height="909" loading="lazy"><p>生成されたらassetフォルダにいれて、pubspec.yamlのassetsの項目に格納先のフォルダに入れてあげて再ビルドします。画像の追加はホットリロードでは対応してくれないので、一度アプリを停止させて再ビルドが必要です。</p><figure class="highlight yaml"><figcaption><span>pubspec.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">flutter:</span></span><br><span class="line">  <span class="attr">assets:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">assets/images/</span></span><br></pre></td></tr></table></figure><p>なお、XDから書き出したSVGがうまくInkskape上でレンダリングできずに崩れてしまう場合は、XD上で拡大してスクリーンショットをとって回避する手もあります。ありました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ゲームのように固定レイアウトでも良い（空いたスペースはレターボックスを表示したり）ケースであれば、デザインツールから一括インポートというのもできるかもしれません。僕も以前、Adobe Flashで作ったゲームの画面レイアウトをJSFLでJSONファイルにエクスポートして、ゲームエンジン（ngCore）上にそっくり再現（カットインアニメーションも）するランタイムライブラリを実装したことがありました。ただし、Flashのフルの機能を使われると変換できないので、ルールに従ったデザインを作ってもらう必要があります。Excelを入力ツールとして使うときも同様ですね。</p><p>実際のGUIフレームワーク(Qt)に密接につながっているQt Designerでデザインしてデスクトップアプリケーションを実装したこともありました。これは再現性という点ではポイントは高いのですが、デザイナーが使い慣れたツールというわけではなく、どうしても操作するのは開発者になってしまうでしょう。</p><p>Flutterアプリで作るようなノンゲームのアプリではレスポンシブに作ることになります。自動変換まではいけませんが、デザイナーが慣れたAdobe製のツール上でデザインを作ってくれたら、それをクリップボードに入れてばしばし貼り付けるというワークフローになります。ちょっと面倒に見えるかもしれませんが、今までやってきたデザインの実装の各種手法の中ではフリクションが少なく、かなり快適です。できあがるコードもFlutterの機能をばっちり使えたコードになります。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Design/">Design</category>
      
      
      <category domain="https://future-architect.github.io/tags/Flutter/">Flutter</category>
      
      <category domain="https://future-architect.github.io/tags/AdobeXD/">AdobeXD</category>
      
      
      <comments>https://future-architect.github.io/articles/20210915a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LambdaをカスタムDockerランタイムで開発する方法</title>
      <link>https://future-architect.github.io/articles/20210914a/</link>
      <guid>https://future-architect.github.io/articles/20210914a/</guid>
      <pubDate>Mon, 13 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20210914a/lambdadocker.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;465&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;普段からAWS</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20210914a/lambdadocker.png" alt="" width="1000" height="465" loading="lazy"><p>TIGの伊藤真彦です。</p><p>普段からAWS Lambdaにはお世話になっているのですが、初めてカスタムランタイムを動かす仕事が舞い込んできました。</p><h1 id="AWS-Lambdaのカスタムランタイムとは"><a href="#AWS-Lambdaのカスタムランタイムとは" class="headerlink" title="AWS Lambdaのカスタムランタイムとは"></a>AWS Lambdaのカスタムランタイムとは</h1><p>AWS Lambdaは2021.09.13時点で次のランタイムがサポートされています。</p><ul><li>Node.js</li><li>Python</li><li>Ruby</li><li>Java</li><li>Go</li><li>.NET</li></ul><p>2018年からDockerコンテナでカスタムランタイムを構築することが可能になりました。</p><p>Dockerコンテナを準備すれば上記以外の言語、実行バイナリなど自由なアプリケーションをAWS Lambdaで動かすことが可能ということになります。</p><p>今回私が作成したカスタムランタイムは、GoでOracle DBのクライアントライブラリを操作可能なカスタムLambdaランタイムです。</p><h1 id="GoでOracle-DBに接続する"><a href="#GoでOracle-DBに接続する" class="headerlink" title="GoでOracle DBに接続する"></a>GoでOracle DBに接続する</h1><p>GoでOracle DBを利用する方法を検討した結果<a href="https://github.com/mattn/go-oci8">mattn/go-oci8</a>を利用することがメジャーな手法であることがわかりました。</p><p><a href="https://github.com/mattn/go-oci8">mattn/go-oci8</a>を利用する際は<code>go get github.com/mattn/go-oci8</code>コマンドを実行して必要な機能をインストールする必要がありますが、前提として<a href="https://www.oracle.com/database/technologies/instant-client/downloads.html">Oracle Instant Client</a>、C/C++コンパイラをインストールし、設定ファイルと環境変数を整備する必要があります。</p><p>上記前提があるため、AWS LambdaデフォルトのGoランタイムではGoのコードそのものは完璧に書いてあっても動作しません。</p><p>そこで、各種依存パッケージを準備済みのDockerコンテナを準備することにしました。</p><h1 id="AWS-Lambdaで動作するコンテナを作成する"><a href="#AWS-Lambdaで動作するコンテナを作成する" class="headerlink" title="AWS Lambdaで動作するコンテナを作成する"></a>AWS Lambdaで動作するコンテナを作成する</h1><p>理論上どんなコンテナでもAWS Lambdaの上で動かすことが可能です。</p><p>しかし、最終的な成果物はLambdaランタイムとして動くことが可能な仕様を満たしている必要があります。</p><p>アプリケーションがAWS Lambdaのsdkを利用し、HTTPリクエストに応答する仕様を満たすように作られているのと同じように、コンテナには規定の環境変数が存在することなど、コンテナとしての要求仕様が存在します。</p><p>これら前提を満たすDockerfileをフルスクラッチで書き起こし、アップデートに追従するのは現実的ではありません。ベースイメージに<a href="https://hub.docker.com/r/amazon/aws-lambda-provided">amazon/aws-lambda-provided</a>を利用すると安心して前提条件を満たすことができます。</p><p>このベースイメージに必要なライブラリ、今回はOracleクライアント一式と設定ファイルを用意します。</p><p><code>go get github.com/mattn/go-oci8</code>コマンドの実行、および<a href="https://github.com/mattn/go-oci8">mattn/go-oci8</a>を利用したコードをビルドし、ビルドされたコードを実行するためには、Oracleクライアントと設定ファイル一式がいずれのタイミングでも必要になるため、マルチステージビルドは行わず、Oracleクライアントの準備を整えた後にGoをインストールし、実行バイナリのビルドが終わったらGoを削除するという仕組みを整えました。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> amazon/aws-lambda-provided:al2</span><br><span class="line"></span><br><span class="line"><span class="comment"># set env vars</span></span><br><span class="line"><span class="keyword">ENV</span> NLS_LANG=Japanese_Japan.AL32UTF8</span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:$HOME/bin:/usr/lib/oracle/<span class="number">21.3</span>/client64/bin</span><br><span class="line"><span class="keyword">ENV</span> LD_LIBRARY_PATH=/usr/local/instantclient_21_3:$LD_LIBRARY_PATH</span><br><span class="line"><span class="keyword">ENV</span> PKG_CONFIG_PATH=/usr/local/instantclient_21_3</span><br><span class="line"><span class="keyword">ENV</span> GO111MODULE=on</span><br><span class="line"></span><br><span class="line"><span class="comment"># install Oracle libraries</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum -y install wget tar gzip unzip pkgconfig gcc libaio</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget https://download.oracle.com/otn_software/linux/instantclient/213000/instantclient-basic-linux.x64-21.3.0.0.0.zip &amp;&amp; \</span></span><br><span class="line"><span class="bash">    wget https://download.oracle.com/otn_software/linux/instantclient/213000/instantclient-sqlplus-linux.x64-21.3.0.0.0.zip &amp;&amp; \</span></span><br><span class="line"><span class="bash">    wget https://download.oracle.com/otn_software/linux/instantclient/213000/instantclient-sdk-linux.x64-21.3.0.0.0.zip</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> unzip instantclient-basic-linux.x64-21.3.0.0.0.zip -d /usr/<span class="built_in">local</span> &amp;&amp; \</span></span><br><span class="line"><span class="bash">    unzip instantclient-sqlplus-linux.x64-21.3.0.0.0.zip -d /usr/<span class="built_in">local</span> &amp;&amp; \</span></span><br><span class="line"><span class="bash">    unzip instantclient-sdk-linux.x64-21.3.0.0.0.zip -d /usr/<span class="built_in">local</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm instantclient-basic-linux.x64-21.3.0.0.0.zip &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm instantclient-sqlplus-linux.x64-21.3.0.0.0.zip &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm instantclient-sdk-linux.x64-21.3.0.0.0.zip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install golang to build</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> マルチステージビルドを使うとOracleクライアントをビルダーと実行コンテナ両方に入れる必要があるためあえて同じコンテナにGoをインストールする</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> wget https://dl.google.com/go/go1.16.7.linux-amd64.tar.gz</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ls -l</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> tar -C /usr/<span class="built_in">local</span> -xzf go1.16.7.linux-amd64.tar.gz</span></span><br><span class="line"><span class="keyword">ENV</span> PATH=$PATH:/usr/local/go/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># build go binary</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> &#123;作りたいGoアプリケーションのファイル一式&#125; /go/src/&#123;アプリケーション名&#125;</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> oci8.pc /usr/<span class="built_in">local</span>/instantclient_21_3/oci8.pc</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /go/src/&#123;ビルドコマンドを実行したい場所&#125;</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go mod download</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pkg-config --cflags oci8</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go get github.com/mattn/go-oci8</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> GOOS=linux GOARCH=amd64 go build -ldflags=<span class="string">&quot;-s -w -buildid=&quot;</span> -trimpath -o /lambda ./cmd/lambda/lambda.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cleanup</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf /usr/<span class="built_in">local</span>/go &amp;&amp; \</span></span><br><span class="line"><span class="bash">    rm -rf /go &amp;&amp; \</span></span><br><span class="line"><span class="bash">    yum -y remove wget tar gzip unzip pkgconfig</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [ <span class="string">&quot;/lambda&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>参考までに、<code>oci8.pc</code>の設定内容は下記の内容です。</p><figure class="highlight sh"><figcaption><span>oci8.pc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">prefix=/usr/<span class="built_in">local</span>/instantclient_21_3/</span><br><span class="line">libdir=<span class="variable">$&#123;prefix&#125;</span></span><br><span class="line">includedir=<span class="variable">$&#123;prefix&#125;</span>/sdk/include/</span><br><span class="line"></span><br><span class="line">Name: oci8</span><br><span class="line">Description: Oracle Instant Client</span><br><span class="line">Version: 21.3</span><br><span class="line">Libs: -L<span class="variable">$&#123;libdir&#125;</span> -lclntsh</span><br><span class="line">Libs.private:</span><br><span class="line">Cflags: -I<span class="variable">$&#123;includedir&#125;</span></span><br></pre></td></tr></table></figure><h1 id="作成したコンテナをAWS-Lambdaで利用する"><a href="#作成したコンテナをAWS-Lambdaで利用する" class="headerlink" title="作成したコンテナをAWS Lambdaで利用する"></a>作成したコンテナをAWS Lambdaで利用する</h1><h2 id="DockerをLambdaで動かすアーキテクチャ"><a href="#DockerをLambdaで動かすアーキテクチャ" class="headerlink" title="DockerをLambdaで動かすアーキテクチャ"></a>DockerをLambdaで動かすアーキテクチャ</h2><p>GoやPythonなど、提供されているランタイムでは、ソースコードや、ビルドしたバイナリををLambdaリソースにアップロードする形でデプロイを行いました。</p><p>Dockerカスタムランタイムの場合は、コンテナイメージ自体はECRにpushし、AWS Lambdaにはそのコンテナイメージのarnを設定する、という仕組みに変わります。</p><p>ECR + Lambdaという構成になる、という概要だけでも覚えておくといざ実装するときに助けになると思います。</p><h2 id="コンテナイメージをECRにPushする"><a href="#コンテナイメージをECRにPushする" class="headerlink" title="コンテナイメージをECRにPushする"></a>コンテナイメージをECRにPushする</h2><p>実際にコンテナイメージをpushし、AWS Lambdaで実行する方法を説明します。<br>まずはECRリポジトリを用意します。</p><p>CLIで構築する場合は下記のコマンドでリポジトリを作成します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ecr create-repository --repository-name myapp</span><br></pre></td></tr></table></figure><p>terraformで記載することも可能です。</p><figure class="highlight sh"><figcaption><span>ecr_repository.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_ecr_repository&quot;</span> <span class="string">&quot;myapp&quot;</span> &#123;</span><br><span class="line">  name                 = <span class="string">&quot;<span class="variable">$&#123;terraform.workspace&#125;</span>-myapp&quot;</span></span><br><span class="line">  image_tag_mutability = <span class="string">&quot;MUTABLE&quot;</span></span><br><span class="line"></span><br><span class="line">  image_scanning_configuration &#123;</span><br><span class="line">    scan_on_push = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>リポジトリが用意できたら、コンテナをビルドし、pushします。</p><figure class="highlight sh"><figcaption><span>deploy.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker build -t myapp:latest</span><br><span class="line">docker tag mayapp:latest <span class="variable">$&#123;AWS_ACCOUNT&#125;</span>.dkr.ecr.ap-northeast-1.amazonaws.com/myapp:latest</span><br><span class="line">aws ecr get-login-password --profile myprofile | docker login --username AWS --password-stdin <span class="variable">$&#123;AWS_ACCOUNT&#125;</span>.dkr.ecr.<span class="variable">$&#123;REGION&#125;</span>.amazonaws.com</span><br><span class="line">docker push <span class="variable">$&#123;AWS_ACCOUNT&#125;</span>.dkr.ecr.ap-northeast-1.amazonaws.com/myapp:latest</span><br></pre></td></tr></table></figure><p>続いてLambdaリソースを構築します。</p><figure class="highlight sh"><figcaption><span>deploy.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aws lambda create-function \</span><br><span class="line">     --function-name myapp  \</span><br><span class="line">     --package-type Image \</span><br><span class="line">     --code ImageUri=<span class="variable">$&#123;ACCOUNTID&#125;</span>.dkr.ecr.<span class="variable">$&#123;REGION&#125;</span>.amazonaws.com/myapp:latest \</span><br><span class="line">     --role <span class="variable">$&#123;ROLE_ARN&#125;</span></span><br></pre></td></tr></table></figure><p>terraformではこのように書くことができます。(vpcの設定など一部省略しています)<br><code>$&#123;data.aws_caller_identity.current.account_id&#125;</code>で自分のAWSアカウントIDを取得できるのがミソですね。</p><figure class="highlight sh"><figcaption><span>lambda_function.tf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">resource <span class="string">&quot;aws_lambda_function&quot;</span> <span class="string">&quot;myapp&quot;</span> &#123;</span><br><span class="line">  package_type  = <span class="string">&quot;Image&quot;</span></span><br><span class="line">  image_uri     = <span class="string">&quot;<span class="variable">$&#123;data.aws_caller_identity.current.account_id&#125;</span>.dkr.ecr.ap-northeast-1.amazonaws.com/<span class="variable">$&#123;terraform.workspace&#125;</span>-myapp:latest&quot;</span></span><br><span class="line">  function_name = <span class="string">&quot;<span class="variable">$&#123;terraform.workspace&#125;</span>-myapp&quot;</span></span><br><span class="line">  role          = aws_iam_role.lambda_role.arn</span><br><span class="line">  memory_size   = 512</span><br><span class="line">  timeout       = 900</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>コンテナイメージを更新した際に気をつけるポイントですが、<code>latest</code>タグのコンテナイメージを更新しても、すぐにLambda関数の挙動には反映されません。一晩寝かしても古いイメージが参照されていました。</p><p>全く同じ<code>image-uri</code>のまま更新コマンドを実行することで即時反映できます。</p><figure class="highlight sh"><figcaption><span>update.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws lambda update-function-code --profile myprofile --function-name myapp --image-uri <span class="variable">$&#123;AWS_ACCOUNT&#125;</span>.dkr.ecr.<span class="variable">$&#123;REGION&#125;</span>.amazonaws.com/myapp:latest</span><br></pre></td></tr></table></figure><p>コンテナイメージのタグやダイジェストをコンテナイメージの内容を更新する度に厳密に管理する事も可能ですが、今のところ常に<code>latest</code>での運用に落ち着いています。</p><h2 id="コンテナイメージをローカル環境でデバッグする"><a href="#コンテナイメージをローカル環境でデバッグする" class="headerlink" title="コンテナイメージをローカル環境でデバッグする"></a>コンテナイメージをローカル環境でデバッグする</h2><p>AWS Lambdaで動く要件を満たしたコンテナが作成されているかをローカル環境で確認することは可能です。逆に作成したアプリケーションコンテナ単体では動作しません。</p><p><a href="https://aws.amazon.com/jp/blogs/news/new-for-aws-lambda-container-image-support/">Lambda Runtime Interface Emulator</a>との組み合わせでコンテナを起動することでローカル環境でのデバッグが可能になります。</p><p>RIEは下記のコマンドでインストールできます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.aws-lambda-rie &amp;&amp; curl -Lo ~/.aws-lambda-rie/aws-lambda-rie \</span><br><span class="line">https://github.com/aws/aws-lambda-runtime-interface-emulator/releases/latest/download/aws-lambda-rie \</span><br><span class="line">&amp;&amp; chmod +x ~/.aws-lambda-rie/aws-lambda-rie</span><br></pre></td></tr></table></figure><p>インストール完了後、下記のコマンドで、RIE経由でビルドしたコンテナを起動します。<br>実際に試してみた環境では(2021年9月時点)<code>Dockerfile</code>で<code>ENTORYPOINT</code>が明記されている場合も、コマンドで<code>ENTORYPOINT</code>に相当する部分を指定する必要がありました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v ~/.aws-lambda-rie:/aws-lambda --entrypoint /aws-lambda/aws-lambda-rie -p 9000:8080 myapp:latest /lambda</span><br></pre></td></tr></table></figure><p>このコンテナを起動した状態で、curlコマンドを実行してlocalhostで起動されたLambdaエンドポイントを叩く形でコンテナに組み込んだアプリケーションを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="string">&quot;http://localhost:9000/2015-03-31/functions/function/invocations&quot;</span> -d <span class="string">&#x27;&#123;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p>curlコマンド実行時に想定通りにアプリケーションが動けばコンテナイメージそのものは問題なく出来上がっていることになります。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>AWS LambdaではカスタムDockerコンテナを起動することができる</li><li>aws-lambda-providedをベースイメージにするのがオススメ</li><li>ECR + Lambdaの組み合わせで構築、運用する</li><li>ローカル環境でデバッグすることも可能</li></ul><p>どうしてもカスタムランタイムでないと困る状況になる事はそう頻繁にある事ではないため、若干参考情報が少ないかなと感じました。</p><p>参考になれば幸いです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/Oracle/">Oracle</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Docker/">Docker</category>
      
      <category domain="https://future-architect.github.io/tags/Lambda/">Lambda</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B5%E3%83%BC%E3%83%90%E3%83%AC%E3%82%B9/">サーバレス</category>
      
      
      <comments>https://future-architect.github.io/articles/20210914a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【Google Chat API】Incoming Webhook を Go で触ってみる</title>
      <link>https://future-architect.github.io/articles/20210913a/</link>
      <guid>https://future-architect.github.io/articles/20210913a/</guid>
      <pubDate>Mon, 13 Sep 2021 00:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、<a href="https://note.com/future_event/n/n76e7e7d4beef">Engineer Camp</a>インターン中の山本です。</p><p>ブログへの投稿は２本目になります。１本目は<a href="/articles/20210902b/">GoLandについての記事</a>を投稿いたしました。</p><p>今回はGoogle Chat APIに関しての記事です。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>業務でGoogle Chat上で通知システムを作成する必要があったのですが、実装するにあたりいくつかのハードルがありました。</p><ul><li>公式の実装例にGoがないため、すぐに使えない</li><li>GSuiteアカウントがないと試せないからか、参考になる記事が少ない</li></ul><p>以上を踏まえて、この記事では以下の事柄について説明していきます。</p><ul><li>Webhookを使用しGoでメッセージを送信する方法</li><li>投稿を一つのスレッドにまとめる方法</li><li>カード型メッセージの送信方法</li></ul><img src="/images/20210913a/スクリーンショット_2021-09-07_17.18.14.png" alt="カード型メッセージ投稿例" width="476" height="598" loading="lazy"><h1 id="Google-Chat-API-とは"><a href="#Google-Chat-API-とは" class="headerlink" title="Google Chat API とは"></a>Google Chat API とは</h1><p>具体的な説明の前に、<a href="https://developers.google.com/chat">Google Chat API</a> について軽く説明いたします。</p><p>Google Chat API とは、Google Chat で Bot を通じて機能の実装、拡張を支援する API です。</p><p>Google Hangoutsとの関連は以下のようになっています。（<a href="https://ja.wikipedia.org/wiki/Google_%E3%83%8F%E3%83%B3%E3%82%B0%E3%82%A2%E3%82%A6%E3%83%88">Wikipediaより引用</a>）</p><blockquote><p>2020年4月、ビデオ会議機能を「Google Meet」、チャット機能を「Google Chat」としてそれぞれ分離。残されたテキストメッセージ機能については、2020年後半を目処にGoogle Chatに統合し、ハングアウトは廃止される予定である。</p></blockquote><p>ユースケースとしては、</p><ul><li>データのリソースなどから検索した情報を返す</li><li>ユーザが特定のタスクを実行するのを助ける</li><li>イベントの更新、変更、繰り返しなどの通知を送る</li></ul><p>などがあります。</p><p>今回はその中から、非同期メッセージの送信機能を持つIncoming Webhookを使用し、Goでメッセージを送信するアプリケーションの実装を行います。</p><h1 id="1-Google-ChatでWebhookの設定をする"><a href="#1-Google-ChatでWebhookの設定をする" class="headerlink" title="1. Google ChatでWebhookの設定をする"></a>1. Google ChatでWebhookの設定をする</h1><p>それでは始めていきます。</p><p>コードを書く前に、Google ChatにてWebhookの設定をする必要があります。</p><p>手順は以下のとおりです。</p><p>Google Chatを開いて、チャットルームを作成します。スレッド返信を使用する場合はチェックを入れます。<br><img src="/images/20210913a/screenshot_setup1.png" alt="チャットルーム作成" width="1200" height="672" loading="lazy" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px;"></p><p>左上をクリックして「Webhookを管理」を選びます。</p><img src="/images/20210913a/screenshot_setup2.png" alt="Webhook管理画面" width="400" height="648" loading="lazy" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px;"><p>Webhookの名前とアバターURLを入力し、保存を押します。</p><img src="/images/20210913a/screenshot_setup3.png" alt="Webhookの名前とアバターURL入力画面" width="1200" height="659" loading="lazy" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px;"><p>以上でWebhookの設定は終わりです。この時払い出されるURLは後で使用します。</p><img src="/images/20210913a/screenshot_setup4.png" alt="設定完了画面" width="1200" height="469" loading="lazy" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px;"><h1 id="2-Goでメッセージを送る"><a href="#2-Goでメッセージを送る" class="headerlink" title="2. Goでメッセージを送る"></a>2. Goでメッセージを送る</h1><p>Webhookの設定は完了したので、次にGoアプリケーションの実装について説明します。<br>以下はWebhookで簡単なメッセージを送信するGoのプログラムです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webhook = <span class="string">&quot;&lt;任意のWebhookURL&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">payload, err := json.Marshal(<span class="keyword">struct</span> &#123;</span><br><span class="line">Text <span class="keyword">string</span> <span class="string">`json:&quot;text&quot;`</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">Text: <span class="string">&quot;hello from a go script!&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp, err := http.Post(webhook, <span class="string">&quot;application/json; charset=UTF-8&quot;</span>, bytes.NewReader(payload))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"><span class="keyword">if</span> resp.StatusCode != http.StatusOK &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;HTTP: %v\n&quot;</span>, resp.StatusCode)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>プログラムを実行すると、Google Chatにメッセージが送信されます。</p><img src="/images/20210913a/screenshot_simple_message.png" alt="screenshot_simple_message" width="1066" height="224" loading="lazy"><h1 id="（付録１）投稿を一つのスレッドにまとめる"><a href="#（付録１）投稿を一つのスレッドにまとめる" class="headerlink" title="（付録１）投稿を一つのスレッドにまとめる"></a>（付録１）投稿を一つのスレッドにまとめる</h1><p>投稿に対して返信をしない場合など、スレッドをいちいち作成する必要がないケースについては、同一スレッドにメッセージを投稿した方が見た目がスッキリする場合もあります。</p><p>Webhook URLにスレッドに関するクエリパラメータを追加することで投稿するスレッドを一つに指定することができます。（<a href="https://developers.google.com/chat/how-tos/bots-develop#thread_key">参照</a>）</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webhook = <span class="string">&quot;&lt;任意のWebhookURL&gt;&amp;threadKey=&lt;適当な文字列&gt;&quot;</span></span><br></pre></td></tr></table></figure><p>以下のように、同じスレッドにメッセージが投稿されるようになります。<br><img src="/images/20210913a/screenshot_thread.png" alt="screenshot_thread" width="1056" height="222" loading="lazy"></p><h1 id="（付録２）Card型メッセージ"><a href="#（付録２）Card型メッセージ" class="headerlink" title="（付録２）Card型メッセージ"></a>（付録２）Card型メッセージ</h1><p>シンプルなメッセージでは表現しきれない場合の手段としてカード型のメッセージが用意されています。<br>以下は<a href="https://developers.google.com/chat/reference/message-formats/cards">公式ドキュメント</a>で紹介されていた表現をほとんど網羅したカード型のメッセージを送信するプログラムです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> webhook = <span class="string">&quot;&lt;任意のWebhookURL&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cards <span class="keyword">struct</span> &#123;</span><br><span class="line">Cards []Card <span class="string">`json:&quot;cards,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Card <span class="keyword">struct</span> &#123;</span><br><span class="line">Header   *Header   <span class="string">`json:&quot;header,omitempty&quot;`</span></span><br><span class="line">Sections []Section <span class="string">`json:&quot;sections,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Header <span class="keyword">struct</span> &#123;</span><br><span class="line">Title      <span class="keyword">string</span> <span class="string">`json:&quot;title,omitempty&quot;`</span></span><br><span class="line">Subtitle   <span class="keyword">string</span> <span class="string">`json:&quot;subtitle,omitempty&quot;`</span></span><br><span class="line">ImageURL   <span class="keyword">string</span> <span class="string">`json:&quot;imageUrl,omitempty&quot;`</span></span><br><span class="line">ImageStyle <span class="keyword">string</span> <span class="string">`json:&quot;imageStyle,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Section <span class="keyword">struct</span> &#123;</span><br><span class="line">Header  <span class="keyword">string</span>   <span class="string">`json:&quot;header,omitempty&quot;`</span></span><br><span class="line">Widgets []Widget <span class="string">`json:&quot;widgets,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Widget <span class="keyword">struct</span> &#123;</span><br><span class="line">TextParagraph *TextParagraph <span class="string">`json:&quot;textParagraph,omitempty&quot;`</span></span><br><span class="line">KeyValue      *KeyValue      <span class="string">`json:&quot;keyValue,omitempty&quot;`</span></span><br><span class="line">Image         *Image         <span class="string">`json:&quot;image,omitempty&quot;`</span></span><br><span class="line">Buttons       []Button       <span class="string">`json:&quot;buttons,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TextParagraph <span class="keyword">struct</span> &#123;</span><br><span class="line">Text <span class="keyword">string</span> <span class="string">`json:&quot;text,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> KeyValue <span class="keyword">struct</span> &#123;</span><br><span class="line">TopLabel         <span class="keyword">string</span>   <span class="string">`json:&quot;topLabel,omitempty&quot;`</span></span><br><span class="line">Content          <span class="keyword">string</span>   <span class="string">`json:&quot;content,omitempty&quot;`</span></span><br><span class="line">Icon             <span class="keyword">string</span>   <span class="string">`json:&quot;icon,omitempty&quot;`</span></span><br><span class="line">ContentMultiLine <span class="keyword">string</span>   <span class="string">`json:&quot;contentMultiline,omitempty&quot;`</span></span><br><span class="line">BottomLabel      <span class="keyword">string</span>   <span class="string">`json:&quot;bottomLabel,omitempty&quot;`</span></span><br><span class="line">OnClick          *OnClick <span class="string">`json:&quot;onClick,omitempty&quot;`</span></span><br><span class="line">Button           *Button  <span class="string">`json:&quot;button,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Image <span class="keyword">struct</span> &#123;</span><br><span class="line">ImageURL <span class="keyword">string</span>   <span class="string">`json:&quot;imageUrl,omitempty&quot;`</span></span><br><span class="line">OnClick  *OnClick <span class="string">`json:&quot;onClick,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Button <span class="keyword">struct</span> &#123;</span><br><span class="line">TextButton  *TextButton  <span class="string">`json:&quot;textButton,omitempty&quot;`</span></span><br><span class="line">ImageButton *ImageButton <span class="string">`json:&quot;imageButton,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TextButton <span class="keyword">struct</span> &#123;</span><br><span class="line">Text    <span class="keyword">string</span>   <span class="string">`json:&quot;text,omitempty&quot;`</span></span><br><span class="line">OnClick *OnClick <span class="string">`json:&quot;onClick,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ImageButton <span class="keyword">struct</span> &#123;</span><br><span class="line">IconURL <span class="keyword">string</span>   <span class="string">`json:&quot;iconUrl,omitempty&quot;`</span></span><br><span class="line">Icon    <span class="keyword">string</span>   <span class="string">`json:&quot;icon,omitempty&quot;`</span></span><br><span class="line">OnClick *OnClick <span class="string">`json:&quot;onClick,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OnClick <span class="keyword">struct</span> &#123;</span><br><span class="line">OpenLink *OpenLink <span class="string">`json:&quot;openLink,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OpenLink <span class="keyword">struct</span> &#123;</span><br><span class="line">URL <span class="keyword">string</span> <span class="string">`json:&quot;url,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">msg := Cards&#123;[]Card&#123;&#123;</span><br><span class="line">Header: &amp;Header&#123;</span><br><span class="line">Title:      <span class="string">&quot;Pizza Bot Customer Support&quot;</span>,</span><br><span class="line">Subtitle:   <span class="string">&quot;pizzabot@example.com&quot;</span>,</span><br><span class="line">ImageURL:   <span class="string">&quot;https://goo.gl/aeDtrS&quot;</span>,</span><br><span class="line">ImageStyle: <span class="string">&quot;IMAGE&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">Sections: []Section&#123;</span><br><span class="line">&#123;</span><br><span class="line">Widgets: []Widget&#123;</span><br><span class="line">&#123;</span><br><span class="line">TextParagraph: &amp;TextParagraph&#123;</span><br><span class="line">Text: <span class="string">&quot;&lt;b&gt;Roses&lt;/b&gt; are &lt;font color=\&quot;#ff0000\&quot;&gt;red&lt;/font&gt;,&lt;br&gt;&quot;</span> +</span><br><span class="line"><span class="string">&quot;&lt;i&gt;Violets&lt;/i&gt; are &lt;font color=\&quot;#0000ff\&quot;&gt;blue&lt;/font&gt;&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">KeyValue: &amp;KeyValue&#123;</span><br><span class="line">TopLabel:         <span class="string">&quot;Order No.&quot;</span>,</span><br><span class="line">Content:          <span class="string">&quot;12345&quot;</span>,</span><br><span class="line">Icon:             <span class="string">&quot;TRAIN&quot;</span>,</span><br><span class="line">ContentMultiLine: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">BottomLabel:      <span class="string">&quot;Delayed&quot;</span>,</span><br><span class="line">OnClick:          &amp;OnClick&#123;OpenLink: &amp;OpenLink&#123;URL: <span class="string">&quot;https://example.com&quot;</span>&#125;&#125;,</span><br><span class="line">Button: &amp;Button&#123;</span><br><span class="line">TextButton: &amp;TextButton&#123;</span><br><span class="line">Text:    <span class="string">&quot;VISIT WEBSITE&quot;</span>,</span><br><span class="line">OnClick: &amp;OnClick&#123;OpenLink: &amp;OpenLink&#123;URL: <span class="string">&quot;https://example.com&quot;</span>&#125;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">Image: &amp;Image&#123;</span><br><span class="line">ImageURL: <span class="string">&quot;https://picsum.photos/400/200&quot;</span>,</span><br><span class="line">OnClick:  &amp;OnClick&#123;OpenLink: &amp;OpenLink&#123;URL: <span class="string">&quot;https://example.com&quot;</span>&#125;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">Widgets: []Widget&#123;</span><br><span class="line">&#123;</span><br><span class="line">Buttons: []Button&#123;</span><br><span class="line">&#123;</span><br><span class="line">ImageButton: &amp;ImageButton&#123;</span><br><span class="line">IconURL: <span class="string">&quot;https://abs.twimg.com/responsive-web/client-web/icon-ios.b1fc7275.png&quot;</span>,</span><br><span class="line">OnClick: &amp;OnClick&#123;OpenLink: &amp;OpenLink&#123;URL: <span class="string">&quot;https://example.com&quot;</span>&#125;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">ImageButton: &amp;ImageButton&#123;</span><br><span class="line">Icon:    <span class="string">&quot;EMAIL&quot;</span>,</span><br><span class="line">OnClick: &amp;OnClick&#123;OpenLink: &amp;OpenLink&#123;URL: <span class="string">&quot;https://example.com&quot;</span>&#125;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">TextButton: &amp;TextButton&#123;</span><br><span class="line">Text:    <span class="string">&quot;VISIT WEBSITE&quot;</span>,</span><br><span class="line">OnClick: &amp;OnClick&#123;OpenLink: &amp;OpenLink&#123;URL: <span class="string">&quot;https://example.com&quot;</span>&#125;&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下はシンプルメッセージと同様</span></span><br><span class="line">payload, err := json.Marshal(msg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">resp, err := http.Post(webhook, <span class="string">&quot;application/json; charset=UTF-8&quot;</span>, bytes.NewReader(payload))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"><span class="keyword">if</span> resp.StatusCode != http.StatusOK &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;HTTP: %v\n&quot;</span>, resp.StatusCode)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>長々とコードが書かれていますが、シンプルなメッセージで紹介したプログラムと行っていることは変わらず、json.MarshalしたときにGoogle Chatが求めている形になるようにGoの構造体に値を詰めて渡しています。</p><p>それぞれの要素の関係をわかりやすく図にすると以下のようになります。（厳密には異なります）</p><p>Cardの中には一つ以上のSectionが、Sectionの中には一つ以上のWidgetが必要になります。Widgetの中にはTextParagraphやKeyValue、Buttonの配列などの中から一つの要素が入ります。<br><img src="/images/20210913a/screenshot_card_message.png" alt="screenshot_card_message" width="1200" height="654" loading="lazy"></p><p>出力結果がこちらです。<br><img src="/images/20210913a/screenshot_card_message_2.png" alt="screenshot_card_message" width="425" height="455" loading="lazy" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px;"></p><h1 id="実際に使ってみた感想"><a href="#実際に使ってみた感想" class="headerlink" title="実際に使ってみた感想"></a>実際に使ってみた感想</h1><p>今回はIncoming Webhookを使用して一方的な通知メッセージを送信する、といった用途に使用しました。</p><p>慣れれば、Webhookの設定 → コード書いてメッセージを投げるまでがスピーディにできるため、簡単な機能を載せたボットを使いたい場合などにはお勧めできると思います。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://developers.google.com/chat">https://developers.google.com/chat</a></li><li><a href="https://mikan.github.io/2018/03/15/writing-hangouts-chat-incoming-webhook-with-go/">https://mikan.github.io/2018/03/15/writing-hangouts-chat-incoming-webhook-with-go/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/BOT/">BOT</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/GoogleChat/">GoogleChat</category>
      
      <category domain="https://future-architect.github.io/tags/GSuite/">GSuite</category>
      
      
      <comments>https://future-architect.github.io/articles/20210913a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Future Tech Night #15 ~GCPのサーバーレスサービスを利用したWebアプリの開発~</title>
      <link>https://future-architect.github.io/articles/20210910a/</link>
      <guid>https://future-architect.github.io/articles/20210910a/</guid>
      <pubDate>Thu, 09 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは。TIGの&lt;a href=&quot;https://twitter.com/kaedemalu&quot;&gt;伊藤太斉&lt;/a&gt;です。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://future.connpass.com/event/220822/&quot;&gt;Future Tech</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは。TIGの<a href="https://twitter.com/kaedemalu">伊藤太斉</a>です。</p><p><a href="https://future.connpass.com/event/220822/">Future Tech Night #15</a>に登壇報告と、その時の解説になります。</p><h2 id="登壇資料"><a href="#登壇資料" class="headerlink" title="登壇資料"></a>登壇資料</h2><p>今回の登壇資料はこちらになります。</p><script async class="speakerdeck-embed" data-id="79065ba6f3824c0296baca7eac3ad1aa" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><h2 id="技術選定"><a href="#技術選定" class="headerlink" title="技術選定"></a>技術選定</h2><p>今回Webアプリの開発にあたり、アプリを載せるためのGCPのコンピューティングサービスの比較検討を行いました。GCPのコーンピューティングサービスにはいくつか種類があり、</p><ul><li>Compute Engine</li><li>Container Optimized OS (in Compute Engine)</li><li>Kubernetes Engine</li><li>Cloud Run</li><li>App Engine</li><li>Cloud Functions</li></ul><p>の5種類があります。今回は5つを1つに絞るにあたり、以下の制約と要件に合わせて絞っていきました。</p><ul><li>コンテナですでに開発されている<ul><li>別途GKEで稼働しているアプリの一部の切り出しのため、コンテナ化がすでにされている</li></ul></li><li>大量のリクエストを捌く必要がない<ul><li>インフラとしてスケールする必要はあるが、固定費として多くかけたくない</li></ul></li><li>インフラの管理を極力減らしたい</li></ul><p>上記の条件で絞ったものの、App EngineとCloud Runが残りました。この2つをさらに絞るために、リッスンポートが任意にできるかどうかという制約に設けたところ、Cloud Runに決定しました（App Engineは8080ポートでしか受け付けることはできませんが、Cloud Runは任意のポートでリッスンさせることができます）。</p><p>これで、無事使うサービスがCloud Runに決定しましたので、インフラの概形が出来上がりました。<br>次からはいよいよ内部の設定などを行っていきます。</p><img src="/images/20210910a/Untitled_Diagram.png" alt="Untitled_Diagram.png" width="1011" height="541" loading="lazy"><h2 id="Serverless-NEGの利用"><a href="#Serverless-NEGの利用" class="headerlink" title="Serverless NEGの利用"></a>Serverless NEGの利用</h2><p>Cloud Runは独自でエンドポイントが生成され、それをCNAMEとしてドメインと紐づけることが可能ですが、Cloud Armorを使ったIPやパスのアクセス制御を行うにはCloud Load Balancingが必要不可欠です。とはいえ、Cloud Runに直接さし込むことはできないのでこんな時は<a href="https://cloud.google.com/load-balancing/docs/negs/serverless-neg-concepts?hl=ja">Serverless NEG（Network Endpoint Group）</a>を利用しましょう。<br>利用する、とはいっても難しい設定することはなく、</p><ul><li>利用するCloud Runを指定したServerless NEGを作成する</li><li>LBのバックエンドの設定に上記で作成したServerless NEGを指定する</li></ul><p>の2ステップで利用できます。私も作成時は難しいのではないかと構えていましたが、すんなり作成できていい意味でびっくりしました。</p><h2 id="サーバーレスVPCコネクタ"><a href="#サーバーレスVPCコネクタ" class="headerlink" title="サーバーレスVPCコネクタ"></a>サーバーレスVPCコネクタ</h2><p>今回、Cloud RunはVPC接続されたCloud SQLに繋ぎに行く必要があるため、Cloud Run自身も漏れず、VPCに接続しないといけません。このようなVPC内部にあるサービスに対して、サーバーレスサービスが接続したい場合には、<a href="https://cloud.google.com/vpc/docs/serverless-vpc-access?hl=ja">サーバーレスVPCコネクタ</a>を利用します。</p><p>サーバーレスVPCコネクタを作成する時は</p><ul><li><code>/28</code>のサブネットを準備する</li><li>コネクタで稼働するインスタンススペックを決定する</li><li>サーバーレスVPCコネクタを作成する</li></ul><p>のステップで作成できます。こちらも特段はまったポイントはないですが、<code>/28</code>の範囲をもつCIDRを利用する必要があるので、準備が必要です（多すぎても少なすぎても使用不可になります）。</p><p>さて、ここまでで、以下の構成が出来上がりました。これで完成に見えましたが、ハマりどころもあったので次で説明します。</p><img src="/images/20210910a/projects_(1).png" alt="projects_(1).png" width="1200" height="605" loading="lazy"><h2 id="ハマりどころ"><a href="#ハマりどころ" class="headerlink" title="ハマりどころ"></a>ハマりどころ</h2><h3 id="サービスアカウントの権限"><a href="#サービスアカウントの権限" class="headerlink" title="サービスアカウントの権限"></a>サービスアカウントの権限</h3><p>Cloud Runは作成した時に「Cloud Runサービスエージェント」のロールが付与されたサービスアカウントが作成されます。形は<code>service-PROJECT_ID@serverless-robot-prod.iam.gserviceaccount.com</code>となります。このサービスアカウントはIAMのページからも「Google 提供のロール付与を含みます」にチェックを入れないと見えないものなので、とても見落としやすいサービスアカウントです。</p><p>このサービスアカウントに対して、サーバーレスVPCコネクタを作成したプロジェクトで「サーバーレスVPCアクセスユーザー」を付与してあげることが必要です。</p><h3 id="Cloud-Runのエラー"><a href="#Cloud-Runのエラー" class="headerlink" title="Cloud Runのエラー"></a>Cloud Runのエラー</h3><p>Cloud Runではサービスがうまくデプロイ完了しない場合、</p><blockquote><p>Cloud Run error: Container failed to start. Failed to start and then listen on the port defined by the PORT environment variable. Logs for this revision might contain more information.</p></blockquote><p>というエラーが吐き出されます。端的には「Cloud Runで利用するコンテナがPORTで指定したものでリッスンできない」がエラーですが、これを愚直に考えてしまったため、とても時間を削ってしまいました。ただ、このエラーは<strong>結果的に</strong>ポートをリッスンできなかっただけで、本来のエラーはもっと手前で起こっていることが多いです。</p><p>このエラーとともにCloud Loggingのエラー詳細も同時にリンクを得られるため、それを確認することで、本当に起こっている問題を知ることができるので、デプロイ失敗した時にはCloud Loggingを確認する必要があります。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>今回はGCPのサーバーレスサービスを活用したWebアプリの開発例をお見せしました。</p><p>コンテナで開発する例が非常に増えてきており、そのコンテナを載せるサービスも増えてきており、技術選定がとても大事になっています。今回は特にコストを最小限に抑えるなどの理由でCloud Runを選択しましたが、エンジニアとしては新しいサービスを使うのはやはり楽しいですね。要件も満たしつつ、最大限楽しくなるようなサービス開発をこれからも続けたいと思いました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/TechNight/">TechNight</category>
      
      
      <comments>https://future-architect.github.io/articles/20210910a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Spring Bootアプリケーションのネイティブイメージが簡単に作れるSpring Nativeの紹介</title>
      <link>https://future-architect.github.io/articles/20210909a/</link>
      <guid>https://future-architect.github.io/articles/20210909a/</guid>
      <pubDate>Wed, 08 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、2021年新卒入社の本田です。私はJavaもSpring</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、2021年新卒入社の本田です。私はJavaもSpring Bootもほとんど何も知らないのですが、業務でSpring Bootを使いそうなので、「Spring勉強しなきゃ😇」という気持ちがあります。</p><p>Spring Bootアプリケーションのネイティブイメージが簡単に作れる<a href="https://docs.spring.io/spring-native/docs/current/reference/htmlsingle/">Spring Native</a>について調べてみたので、それを紹介します。</p><h2 id="Spring-Nativeとは"><a href="#Spring-Nativeとは" class="headerlink" title="Spring Nativeとは?"></a>Spring Nativeとは?</h2><p>Spring NativeとはSpring Bootアプリケーションをほとんど変更することなく、ネイティブイメージを生成することを目指したプロジェクトです。ネイティブイメージの実行はJVM(Java仮想マシン)による実行と比べて、起動時間が早い、ピークパフォーマンスに達するのが早い、メモリの使用量が小さい等の利点を持っています。</p><p>Spring Nativeでは、Spring Bootアプリケーションのネイティブイメージを生成するためにGraalVMを用いています。</p><h2 id="ネイティブイメージとは"><a href="#ネイティブイメージとは" class="headerlink" title="ネイティブイメージとは?"></a>ネイティブイメージとは?</h2><p>ネイティブイメージとはJavaをAOTコンパイルしたスタンドアロンな実行可能ファイルのことです(多分GraalVM用語？)。といっても意味が分からないかもしれないので、背景を説明します。</p><p>まず、CPUは機械語と呼ばれるCPUが理解できる命令しか実行できません。したがって、プログラムを実行するためには最終的に機械語に変換しなければなりません。この機械語に変換するタイミングには事前に変換、実行時に変換の2種類があります。事前にコンパイルし、機械語を生成する手法はAOT(ahead of time)コンパイル方式と呼ばれます。C、C++、 RustなどでコンパイルするといえばAOTコンパイルをするということを意味します。AOTコンパイルでは、あるCPUに向けて事前にコンパイルするため、その成果物はターゲットプラットフォームでしか動きません。</p><p>一方、Javaは事前にコードを機械語にコンパイルするのではなく、バイトコードと呼ばれるJVMが理解できるアセンブリコードに変換します。その後、JVM上でバイトコードを実行時に機械語に変換するインタプリタ方式で処理を行います。JVMが下位のプラットフォームの差異を吸収するため、多くのプラットフォームで単一コードを動かすことができます。</p><p>また、代表的なJVMはJIT(just in time)コンパイル機能を持っていて、よく実行されるコードや何度も繰り返すループなどは実行中に機械語にコンパイルされます。AOTコンパイルと比べると、実行時情報を利用することができるため、積極的な最適化を行えることがあります。ただし、JITコンパイラが実行時情報を収集するのに時間がかかるので、繰り返し実行しないとピークパフォーマンスに達しないという性質を持っています。</p><p>また、コードを実行するためにはJVMを起動し、クラスをロードする必要があるため、コードを実行するまでに時間がかかります。そのため、AWS Lambdaのようなイベントをトリガーとして、一回だけコードを実行するなどといった状況や、頻繁に再起動を行うマイクロサービスのようなアプリケーションと相性が悪いです。<br>このようなJVMの起動時間の長さを解消するのがネイティブイメージです。ネイティブイメージではクラスローディングなどの初期化処理が必要ないため、高速に起動できます。</p><h3 id="AOTコンパイル方式-上-とインタプリタ-JITコンパイル方式-下-の比較"><a href="#AOTコンパイル方式-上-とインタプリタ-JITコンパイル方式-下-の比較" class="headerlink" title="AOTコンパイル方式(上)とインタプリタ+JITコンパイル方式(下)の比較"></a>AOTコンパイル方式(上)とインタプリタ+JITコンパイル方式(下)の比較</h3><img src="/images/20210909a/コンパイルとインタプリタ.png" alt="コンパイルとインタプリタ.png" width="1200" height="354" loading="lazy"><h2 id="GraalVMとは"><a href="#GraalVMとは" class="headerlink" title="GraalVMとは?"></a>GraalVMとは?</h2><p><a href="https://www.graalvm.org/">GraalVM</a>はOracle社が開発する多言語を実行することができる仮想マシンです。</p><p>現在主流となっているJVMはHotSpot VMという仮想マシンなのですが、GraalVMはHotSpot VMを拡張したものとなっています。HotSpot VMではC1、C2というJITコンパイラが使われています。C2はC++で記述されているのですが、長年の変更でコードがあまりに複雑になり、機能拡張が困難になっています。GraalVMはC2コンパイラをJava製のGraalVM JITコンパイラに置き換えていて、これにより機能の拡張が容易になりました。さらに、GraalVMはTruffleというGraalVM JITコンパイラの利用を前提とした言語実装用のライブラリを持っています。したがってTruffleを使ってあるプログラミング言語を実装すれば、その言語はGraalVMで走らせることができます。</p><p>さらに、GraalVMを使うとJavaからPythonを使う、RubyからJavaScriptを使う、なんてこともできるみたいです。夢が広がります..😳</p><h3 id="GraalVMのアーキテクチャ"><a href="#GraalVMのアーキテクチャ" class="headerlink" title="GraalVMのアーキテクチャ"></a>GraalVMのアーキテクチャ</h3><img src="/images/20210909a/graalVMのアーキテクチャ.png" alt="graalVMのアーキテクチャ.png" width="682" height="604" loading="lazy"><p>Spring Nativeの話だったのに一体何の話をしているんだ。。と思われたかもしれませんが、GraalVMは多言語を実行できる仮想マシンという側面の他に、ネイティブイメージ生成機能をもっています。Spring Nativeで用いられているのはGraalVMのネイティブイメージ生成機能です。</p><h3 id="GraalVMの制約"><a href="#GraalVMの制約" class="headerlink" title="GraalVMの制約"></a>GraalVMの制約</h3><p>GraalVMはJavaのコードをネイティブイメージに変換する機能を持っていますが、リフレクションを始めとする動的な機能を変換するためには、JSONファイルを使って設定を記述しなければなりません。Spring BootはJavaの動的機能(リフレクション、動的プロキシ等)を多用しているため、ネイティブイメージに変換するためには大量のJSONファイルを記述する必要があります。</p><h2 id="Spring-Native"><a href="#Spring-Native" class="headerlink" title="Spring Native"></a>Spring Native</h2><p>Spring NativeとはSpring Bootアプリケーションをほとんど変更することなく、ネイティブイメージを生成できることを目指しているプロジェクトです。</p><p>Spring Nativeは動的機能を使うためのヒント文をアノテーションとして提供しています。ヒント文を記述することで、ビルド時にGraalVMの設定用JSONファイルの生成やコードの書き換えを自動で行ってくれます。</p><p>またライブラリ開発者があらかじめヒント文を書いてくれているので、サポートされているライブラリを使う場合はユーザーは基本的にはヒント文を記述する必要がありません。</p><h2 id="Spring-Nativeで簡単なアプリケーションのネイティブイメージを作ってみる。"><a href="#Spring-Nativeで簡単なアプリケーションのネイティブイメージを作ってみる。" class="headerlink" title="Spring Nativeで簡単なアプリケーションのネイティブイメージを作ってみる。"></a>Spring Nativeで簡単なアプリケーションのネイティブイメージを作ってみる。</h2><h3 id="ひな型作成"><a href="#ひな型作成" class="headerlink" title="ひな型作成"></a>ひな型作成</h3><p>Spring InitializrでSpring WebとSpring Nativeを依存関係に追加してプロジェクトのひな型を生成します。</p><img src="/images/20210909a/spring_initializr.png" alt="spring_initializr.png" width="1200" height="675" loading="lazy" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;"><p>非常にシンプルなアプリケーションを記述します。</p><h3 id="コード"><a href="#コード" class="headerlink" title="コード"></a>コード</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="コンテナ化"><a href="#コンテナ化" class="headerlink" title="コンテナ化"></a>コンテナ化</h3><p>ネイティブイメージを作るために、<a href="https://buildpacks.io/">Cloud Native Buildpacks</a>というソースコードからdocker containerを作成できるツールがあるので、これを使います。</p><p>Spring Initializrを使ってSpring Nativeを依存関係に追加してプロジェクトを生成した場合、Mavenなら、<code>mvn spring-boot:build-image</code>というコマンドを使ってネイティブイメージのコンテナを生成することができます。この機能を使う場合、コンテナ上でビルドが行われるため、GraalVMを端末にインストールしている必要がありません。単にネイティブイメージを生成する場合はGraalVM native build toolを使うみたいです。私はGraalVMをダウンロードしていないので、pom.xmlからnative buildツール関係の依存を削除した後、このコマンドを走らせました。私の環境(Windows 10、Core i5 10210U、 メモリ16GB、Dockerに割り当てたメモリ8GB)だと7分12秒かかりました。</p><img src="/images/20210909a/image.png" alt="image.png" width="1200" height="552" loading="lazy"><h3 id="コンテナを走らせる。"><a href="#コンテナを走らせる。" class="headerlink" title="コンテナを走らせる。"></a>コンテナを走らせる。</h3><img src="/images/20210909a/image_2.png" alt="image.png" width="1200" height="765" loading="lazy"><p>0.076秒で起動しました。</p><img src="/images/20210909a/image_3.png" alt="image.png" width="1200" height="642" loading="lazy" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;"><p>動いているようです。</p><h3 id="ネイティブイメージコンテナと非ネイティブコンテナの比較"><a href="#ネイティブイメージコンテナと非ネイティブコンテナの比較" class="headerlink" title="ネイティブイメージコンテナと非ネイティブコンテナの比較"></a>ネイティブイメージコンテナと非ネイティブコンテナの比較</h3><p>ネイティブイメージと非ネイティブイメージの各種メトリクスを比較してみます。ネイティブイメージ、非ネイティブイメージともにCloud Native Buildpacksを使ってコンテナ化しています。</p><div class="scroll"><table><thead><tr><th align="center"></th><th align="center">ネイティブ</th><th align="center">非ネイティブ</th></tr></thead><tbody><tr><td align="center">ビルド時間</td><td align="center">7分12秒</td><td align="center">1分33秒</td></tr><tr><td align="center">アプリケーション起動時間</td><td align="center">0.076秒</td><td align="center">1.911秒</td></tr><tr><td align="center">実行時メモリ使用量</td><td align="center">45MiB</td><td align="center">165MiB</td></tr><tr><td align="center">イメージサイズ</td><td align="center">95.5MB</td><td align="center">261MB</td></tr></tbody></table></div><p>ネイティブイメージはビルドが圧倒的に長いですが、アプリケーション起動時間、実行時メモリ使用量、イメージサイズは明確に非ネイティブイメージより優れています。</p><p>GraalVMにはCommunity EditionとEnterprise Editonがあり、性能はEnterprise Editionの方が上ですが、このテストはCommunity Editionで行いました。</p><h4 id="パフォーマンス"><a href="#パフォーマンス" class="headerlink" title="パフォーマンス"></a>パフォーマンス</h4><p><a href="https://gatling.io/">Gatling</a>というツールを使ってパフォーマンスを計測してみましたが、元々のレスポンス時間が短すぎて差は分かりませんでした。実用的なアプリケーションを使って比較してみると、面白いかもしれません。</p><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>ネイティブイメージは起動時間の短さが魅力的ですが、実務的にはビルド時間の長さがネックになるのかなと思いました。今回は非常にシンプルなアプリにもかかわらず7分かかっているので、プロダクションレベルのアプリのビルドにどれくらい時間がかるのかは要検証だと思います。</p><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ol><li>Spring Native Documentation, <a href="https://docs.spring.io/spring-native/docs/current/reference/htmlsingle/">https://docs.spring.io/spring-native/docs/current/reference/htmlsingle/</a></li><li>GraalVM <a href="https://www.graalvm.org/">https://www.graalvm.org/</a></li><li>Toshiaki Maki, JSUG勉強会 2021年その1: Spring Nativeの紹介 #jsug, <a href="https://t.co/iRR5vaK7CX?amp=1">https://t.co/iRR5vaK7CX?amp=1</a></li><li>きしだなおき、吉田真也、山田貴裕、蓮沼賢志、阪田浩一、前多賢太郎, みんなのJava, 技術評論社, 2020　</li></ol>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Java/">Java</category>
      
      <category domain="https://future-architect.github.io/tags/SpringBoot/">SpringBoot</category>
      
      <category domain="https://future-architect.github.io/tags/GraalVM/">GraalVM</category>
      
      
      <comments>https://future-architect.github.io/articles/20210909a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RedmineとGitLabの連携プラグインを開発しました！</title>
      <link>https://future-architect.github.io/articles/20210908a/</link>
      <guid>https://future-architect.github.io/articles/20210908a/</guid>
      <pubDate>Tue, 07 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>​<br>こんにちは、TIGコアテクノロジーユニットの高橋・小松です。</p><p>RedmineとGitLabリポジトリを連携する<a href="https://github.com/future-architect/redmine_gitlab_adapter">Redmine GitLab Adapter Plugin</a>を開発しましたので紹介させていただきます。</p><p>もともとRedmineにはGitリポジトリを登録する機能があります。この機能でRedmineのチケットに修正内容を紐づけて管理したり、特定のコメントを付けることでRedmineチケットのステータスを変更する、というようなことが可能です。</p><ul><li><a href="https://redmine.jp/tech_note/subversion/">バージョン管理システムとの連携 — Redmine.JP</a></li></ul><p>便利な機能ではあるのですが構成上の課題やGitLabのバージョンアップに伴う問題点が出てきたため、GitLab APIを用いた形でGitLabリポジトリ連携用のアダプタを作りました。</p><h2 id="構成上の課題"><a href="#構成上の課題" class="headerlink" title="構成上の課題"></a>構成上の課題</h2><p>Gitリポジトリ登録機能ですが、Redmineサーバ上で直接Gitリポジトリを読み取ることができないといけません。大きく以下の2つの方式が採られることが多いようです。</p><p>①bareリポジトリをRedmineサーバ上にコピーし、定期的にリポジトリの更新を反映させる</p><img src="/images/20210908a/1.png" alt="1.png" width="507" height="320" loading="lazy"><p>②リポジトリサーバをNFSマウントしRedmineサーバ上から直接参照できるようにする</p><img src="/images/20210908a/2.png" alt="2.png" width="514" height="326" loading="lazy"><p>当社では主にNFS方式で直接参照させるような構成を取っていました。</p><p>NFSマウントがあるというだけでサーバの起動順番を意識しないといけないですし障害ポイントにもなりやすいです。また<a href="https://gitlab-docs.creationline.com/ce/administration/repository_storage_types.html#hashed-storage">最近のGitLabのバージョンアップでストレージパスがハッシュ値に変更</a>され、GitLabサーバ管理者でないと登録困難な状況になってしまいました。​</p><img src="/images/20210908a/ハッシュ値.png" alt="ハッシュ値.png" width="753" height="138" loading="lazy"><h2 id="プラグインの特徴"><a href="#プラグインの特徴" class="headerlink" title="プラグインの特徴"></a>プラグインの特徴</h2><p>今回開発したプラグインはGitLabのAPI経由でリポジトリ情報を取得するためNFSマウントやリポジトリコピーを行う必要がありません。<br><img src="/images/20210908a/3.png" alt="3.png" width="483" height="322" loading="lazy"></p><p>通常アクセスするGitLabのURLを登録することで連携できるようになっており、リポジトリのハッシュ値を取得して登録する必要もありません。</p><img src="/images/20210908a/4.png" alt="4.png" width="1040" height="400" loading="lazy"><p>httpプロキシを経由する場合やコンテキストルートを独自に設定してある構成でも対応できるようにしています。</p><p>従来同様リポジトリタブへのアクセスもしくはfetch_changesetsコマンドを実行することで、Gitリポジトリの更新をRedmineDB(変更履歴情報を持つchangesetsテーブル群)に取り込むことができます。</p><h2 id="実装のポイント"><a href="#実装のポイント" class="headerlink" title="実装のポイント"></a>実装のポイント</h2><p>従来方式ではgit logコマンドで指定した開始リビジョン番号と終了リビジョン番号の間のコメントだけを一括取得できます。一方GitLab APIではリビジョン番号の指定ではなく、指定日時の期間で取得することができます。また一回のAPI実行で最大100個のコミット情報しか取得できません。</p><p>よって最初の取り込みでは、一番古いコミット情報から一定数をchangesetsへ取り込み、取り込んだ分のコミット最終時刻をrepositoriesテーブルのextra_infoに記録しておきます。その後fetch_changesetsコマンドが実行される度に記録されたコミット時刻を参照し、その時刻からのコミット情報を500件ごとにchangesetsテーブルに取り込む動作になっています。</p><p>なお、色々と試した上でタイムアウトしない値として500件にしています。</p><h2 id="インストールと設定"><a href="#インストールと設定" class="headerlink" title="インストールと設定"></a>インストールと設定</h2><h3 id="1-動作条件"><a href="#1-動作条件" class="headerlink" title="1. 動作条件"></a>1. 動作条件</h3><p>本プラグインは以下の条件で動作確認しています。</p><ul><li>Redmine 3系 , 4系</li><li>Ruby 2.4 ～ 2.6</li><li>GitLab 13系 (GitLab API v4)</li></ul><p>下記のGemライブラリを使用しています。</p><ul><li>GitLab v4.14.0</li><li>no_proxy_fix v0.1.2</li></ul><h3 id="2-インストール"><a href="#2-インストール" class="headerlink" title="2. インストール"></a>2. インストール</h3><ol><li>本プラグインのディレクトリredmine_gitlab_adapterを$REDMINE_ROOT/pluginsディレクトリの直下にコピーしてください。</li><li>$REDMINE_ROOTディレクトリで下記のコマンドを実行して、gitlabとno_proxy_fixのGemライブラリをイントールしてください。<br>　例) bundle install</li><li>redmineを再起動してください。</li></ol><h3 id="3-GitLab-APIアクセストークンの取得"><a href="#3-GitLab-APIアクセストークンの取得" class="headerlink" title="3. GitLab APIアクセストークンの取得"></a>3. GitLab APIアクセストークンの取得</h3><ol><li>GitLabにログインしてください。</li><li>「User Settings」-&gt; 「Access Tokens」の画面を開いてください。</li><li> 以下の内容を設定して「Create personal access token」ボダンをクリックし、アクセストークンを発行してください。</li></ol><div class="scroll"><table><thead><tr><th>項目</th><th>値</th></tr></thead><tbody><tr><td>名前</td><td>任意の値</td></tr><tr><td>有効期限日</td><td>設定しない</td></tr><tr><td>read_api</td><td>チェック</td></tr></tbody></table></div><h3 id="4-GitLabアダプタの有効化"><a href="#4-GitLabアダプタの有効化" class="headerlink" title="4. GitLabアダプタの有効化"></a>4. GitLabアダプタの有効化</h3><ol><li>Redmine管理者でログインしてください。</li><li>トップメニューの「管理」-&gt; 「設定」-&gt;「リポジトリ」の画面を開いてください。</li><li>「使用するバージョン管理システム」の「GitLab」をチェックして、保存してください。</li></ol><h3 id="5-リポジトリ設定方法"><a href="#5-リポジトリ設定方法" class="headerlink" title="5. リポジトリ設定方法"></a>5. リポジトリ設定方法</h3><ol><li>Redmineプロジェクト管理者でログインしてください。</li><li>対象プロジェクトの「設定」-&gt;「リポジトリ」-&gt; 「新しいリポジトリ」の画面を開いてください。</li><li>「バージョン管理システム」プルダウンメニューから「GitLab」を選択してください。</li><li>「URL」にgit clone対象のGitLabリポジトリURLを入力してください。</li><li>「API Token」に先ほど取得したGitLab APIアクセストークンを入力してください。</li><li>GitLabのURLにコンテキストパスが含まれている場合は、「Root URL」にコンテキストパスまでを含めたURLを入力してください。</li><li>「作成」をクリックして、保存してください。</li></ol><h3 id="6-Redmineからプロキシ経由でGitLabにアクセスする場合"><a href="#6-Redmineからプロキシ経由でGitLabにアクセスする場合" class="headerlink" title="6. Redmineからプロキシ経由でGitLabにアクセスする場合"></a>6. Redmineからプロキシ経由でGitLabにアクセスする場合</h3><p>本プラグインはOS上の環境変数を利用しているため、環境変数http_proxy、https_proxy、no_proxyを適切に設定することでプロキシを経由する外部GitLabリポジトリを登録することが可能です。</p><h3 id="7-リバースプロキシ背後にGitLabがある場合"><a href="#7-リバースプロキシ背後にGitLabがある場合" class="headerlink" title="7. リバースプロキシ背後にGitLabがある場合"></a>7. リバースプロキシ背後にGitLabがある場合</h3><ul><li>対応1) リバースプロキシ設定変更<br>リバースプロキシでURLがエンコードされることがあり、下記のように設定変更が必要な場合があります。<br>リバースプロキシがApacheの場合の例を記載します。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AllowEncodedSlashes NoDecode</span><br><span class="line">ProxyPass /gitlab http://gitlab.local:80/gitlab nocanon</span><br></pre></td></tr></table></figure><ul><li>対応2) GitLab Project ID使用<br>GitLabのURLにコンテキストパスが含まれている場合は<br>「URL」の入力で<code>https://&lt;gitlab.url&gt;/&lt;context_path&gt;/&lt;group&gt;/&lt;project&gt;.git</code>という形の代わりに、<br><code>https://&lt;gitlab.url&gt;/&lt;context_path&gt;/&lt;gitlab_project_id&gt;</code>という形を使用してください。</li></ul><h3 id="8-補足"><a href="#8-補足" class="headerlink" title="8. 補足"></a>8. 補足</h3><p>本プラグインでRedmineへ新規にGitLabリポジトリを登録するとデータのロードが完了するまでは画面表示に時間がかかることがあります。リポジトリ画面へのアクセス、もしくはfetch_changesetsの実行により500件ごとにRedmineDBへロードされます。従来でも必要ですが同様にcron等でfetch_changesetsを定期実行するようにしてください。<br>​</p><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>Redmineのリポジトリタブを選択して以下のような画面が表示されれば正常に登録されています。画面上の見た目は従来と同様になっています。</p><img src="/images/20210908a/5.png" alt="5.png" width="1040" height="561" loading="lazy"><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>このプラグインによって長年の課題であったNFSマウントを一つ減らすことができました。</p><p><a href="https://github.com/future-architect/redmine_gitlab_adapter">Github</a>からダウンロード可能ですのでぜひお試しください。Pull Requestもお待ちしております。</p><hr><p><strong>TIGコアテクノロジーユニット</strong></p><p>TIGコアテクノロジーユニットでは、現在チームメンバーを募集しています。</p><p>私たちと一緒にテクノロジーで設計、開発、テストの高品質・高生産性を実現する仕組みづくりをしませんか？</p><p>興味がある方はお気軽に<a href="https://twitter.com/future_techblog">技術ブログTwitter</a>や会社採用HPへ、連絡をお待ちしております。</p><ul><li><a href="https://www.future.co.jp/recruit/">https://www.future.co.jp/recruit/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Redmine/">Redmine</category>
      
      <category domain="https://future-architect.github.io/tags/OSS/">OSS</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B3%E3%82%A2%E3%83%86%E3%82%AF/">コアテク</category>
      
      <category domain="https://future-architect.github.io/tags/GitLab/">GitLab</category>
      
      
      <comments>https://future-architect.github.io/articles/20210908a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>技育祭2021に登壇しました</title>
      <link>https://future-architect.github.io/articles/20210907a/</link>
      <guid>https://future-architect.github.io/articles/20210907a/</guid>
      <pubDate>Mon, 06 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;SAIG(Strategic AI</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>SAIG(Strategic AI Group)の塚本です。AIチームにて機械学習のアプローチが適さない問題全般(数理最適や複雑なデータ処理)を担当しています。</p><p>2021年3月11日～13日の3日間に渡って開催された<a href="https://talent.supporterz.jp/geeksai/2021/"><strong>技育祭2021</strong></a>に登壇する機会をいただき、発表に際して考えたことをまとめます。登壇映像は<a href="https://www.youtube.com/watch?v=HQFCDmgiOeA">こちら</a>に公開されてます。</p><p>なお、2020年度の技育祭にも弊社は登壇しております。弊社のビジネス全般に興味がある方は<a href="https://www.youtube.com/watch?v=7ihC17EW2bc">こちら</a>もどうぞ。</p><img src="/images/20210907a/image.png" alt="image.png" width="1200" height="676" loading="lazy"><h1 id="技育祭の特徴について"><a href="#技育祭の特徴について" class="headerlink" title="技育祭の特徴について"></a>技育祭の特徴について</h1><p>良い公演のためには、登壇するイベントの特徴を理解しておくことは重要です。技育祭は、IT系の新卒採用をメインとする就活サービスで知られているサポーターズの主催で、ITに興味関心のある学生が刺激をもらうために視聴します。メインイベントとして各枠1時間の公演が用意されており、サポーターズから依頼されて登壇する目玉公演と採用を主目的としたスポンサー企業の代表者による公演とに分かれます。</p><p>視聴者は公開されたスケジュールから見たい公演を選ぶのですが、当然著名な方や有名な企業の公演に人気が集中します。ウェビナー形式のため人数制限も無く、さらに並行して勉強会も行われています。どれだけ視聴者に”見たい”と思ってもらえるかが重要だと考えました。</p><h1 id="発表内容と狙い"><a href="#発表内容と狙い" class="headerlink" title="発表内容と狙い"></a>発表内容と狙い</h1><p>「競プロスキルでビジネス無双～誰もやらないのでエンジニアだけど営業から研究開発まで全部やります～」というタイトルで発表し、就職に対してネガティブな印象を持っている学生達に、少しでも仕事を面白そうだと思ってもらえるよう、私が現在に至るまでの過程を一人称視点で振り返りました。</p><p>タイトルは少しでも注目してもらえるよう頭を捻りました。捻り過ぎたかもしれません。公演内容は1時間近く学生の視聴者を惹きつけ続けるため、形式的な説明となりやすい肩書きや会社紹介は省略し、物語形式でなるべく前提知識が少なくても楽しめることを意識しました。私が物語を作る際、毎回映画作りの名著「<a href="https://www.amazon.co.jp/%EF%BC%B3%EF%BC%A1%EF%BC%B6%EF%BC%A5-%EF%BC%B4%EF%BC%A8%EF%BC%A5-%EF%BC%A3%EF%BC%A1%EF%BC%B4%E3%81%AE%E6%B3%95%E5%89%87-%EF%BC%B3%EF%BC%A1%EF%BC%B6%EF%BC%A5-%EF%BC%B4%EF%BC%A8%EF%BC%A5-%EF%BC%A3%EF%BC%A1%EF%BC%B4%E3%81%AE%E6%B3%95%E5%89%87-%E3%83%96%E3%83%AC%E3%82%A4%E3%82%AF%E3%83%BB%E3%82%B9%E3%83%8A%E3%82%A4%E3%83%80%E3%83%BC-ebook/dp/B0776P5DX8">ＳＡＶＥ ＴＨＥ ＣＡＴの法則</a>」を読み返して参考にしており、今回も下記の要素が抜けないよう注意しました。</p><ul><li>主人公に共感できる(万人が共感しやすい就活時の苦悩から入る)</li><li>主人公は自分の意志で行動する(会社や顧客の事情ではない)</li><li>感情のジェットコースターを作る(仮初の成功と挫折を入れる)</li></ul><h1 id="登壇してみた感触"><a href="#登壇してみた感触" class="headerlink" title="登壇してみた感触"></a>登壇してみた感触</h1><p>DAY1 3月11日に実施、最大330名の方に視聴いただいたそうで、これは同時間帯で最多とのことでした。大変ありがたいことです。<br>自身のエピソードを話すのは初めてだったので、上手く喋れない所が多かったです。それでも公演中のコメントやTwitterでの反応をたくさんいただき視聴者の方々に助けられました。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">「トラックは突っ込んで、、、来ないんですけど、代わりにCTOが突っ込んできました」<br>ｗｗｗｗｗ<a href="https://twitter.com/hashtag/%E6%8A%80%E8%82%B2%E7%A5%AD?src=hash&amp;ref_src=twsrc%5Etfw">#技育祭</a> <a href="https://twitter.com/hashtag/%E3%83%9B%E3%83%BC%E3%83%ABB?src=hash&amp;ref_src=twsrc%5Etfw">#ホールB</a></p>&mdash; すのーばーど (@snowbird315__) <a href="https://twitter.com/snowbird315__/status/1369924212324851713?ref_src=twsrc%5Etfw">March 11, 2021</a></blockquote><blockquote class="twitter-tweet"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/%E6%8A%80%E8%82%B2%E7%A5%AD?src=hash&amp;ref_src=twsrc%5Etfw">#技育祭</a> <a href="https://twitter.com/hashtag/%E3%83%9B%E3%83%BC%E3%83%ABB?src=hash&amp;ref_src=twsrc%5Etfw">#ホールB</a> え、マイクラのツカモMODあるの<br>気になる！</p>&mdash; kaito (@kaito_tateyama) <a href="https://twitter.com/kaito_tateyama/status/1369925736643973121?ref_src=twsrc%5Etfw">March 11, 2021</a></blockquote><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">ツカモさん話おもしれー 仕事もおもしろそう</p>&mdash; 真紅色に染まるぷーん (@pu__Ne) <a href="https://twitter.com/pu__Ne/status/1369935555413217284?ref_src=twsrc%5Etfw">March 11, 2021</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>やはり最初に笑いを取る大切さを改めて実感し、公演後も懇親会で同室になった参加者の方からも「Twitterで気になるワードが流れて来たんですが、一体どんな発表だったんですか？」と興味を持ってもらえたようです。真面目な発表内容でなければ、ちょっとクセのあるワード・印象に残りやすい短いフレーズは、公演中の反応や拡散効果が得られて良いと感じました。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>技育祭は非常に良いイベントだと思います。多様化の時代、キャリアのコンクリート道が整備される頃には、その道の到着点が砂漠化していることも少なくありません。山にうっすらと獣道が形成されるように、今を生きるオトナ達が自身が通ってきた道をつまびらかにし、後進が足跡を辿りやすいよう、これからもこのようなイベントを応援しています。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/">競技プログラミング</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%8A%80%E8%82%B2%E7%A5%AD/">技育祭</category>
      
      
      <comments>https://future-architect.github.io/articles/20210907a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Certified Developer - Associate 合格体験記</title>
      <link>https://future-architect.github.io/articles/20210906a/</link>
      <guid>https://future-architect.github.io/articles/20210906a/</guid>
      <pubDate>Sun, 05 Sep 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは、2019年新卒入社筋肉エンジニアの渡邉光です。&lt;/p&gt;
&lt;p&gt;先日、AWS認定資格の一つであるAWS Certified Developer - Associate（AWS</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは、2019年新卒入社筋肉エンジニアの渡邉光です。</p><p>先日、AWS認定資格の一つであるAWS Certified Developer - Associate（AWS DVA）を受験し、無事に合格することができました。合格するまでに自分が実施したことや感想を皆さんに共有できたらと思います。</p><img src="/images/20210906a/合格バッチ.png" alt="合格バッチ" width="340" height="340" loading="lazy"><h1 id="筆者の背景"><a href="#筆者の背景" class="headerlink" title="筆者の背景"></a>筆者の背景</h1><p>私は、一年前にアプリからインフラにジョブチェンジをしまして、所属PJでAWSを業務で使ってきました。初めてAWSを触ったときはサービス数がかなり多く、機能も豊富のためキャッチアップするのもかなり大変だったのを覚えています。そこで私はAWS認定資格を受験することで、AWSの主要サービスや用語について理解することができ、ついでに資格もゲットできることに魅力を感じて認定資格に挑戦することにしました。</p><p>この記事を書くまでに既にAWS Certified Cloud Practitioner (AWS CLF)とAWS Certified Solutions Architect – Associate (AWS SAA)は取得済みです。今回AWS Certified Developer - Associate (AWS DVA)に合格できたので、3冠を達成することができました！</p><ul><li>AWS Certified Cloud Practitioner (AWS CLF)</li><li>AWS Certified Solutions Architect – Associate (AWS SAA)</li><li>AWS Certified Developer - Associate (AWS DVA) ★NEW!!★</li></ul><h1 id="AWS-Certified-Developer-Associate-AWS-DVA-とは"><a href="#AWS-Certified-Developer-Associate-AWS-DVA-とは" class="headerlink" title="AWS Certified Developer - Associate (AWS DVA)とは"></a>AWS Certified Developer - Associate (AWS DVA)とは</h1><p>AWS認定資格の一つで、AWSで構成されるアプリケーションの開発や保守、デプロイ周りで使用するサービスの知識やベストプラクティスに関して問われる試験になっています。</p><p>AWS DVAでは、以下の能力が検証される試験となっています。</p><ul><li>AWS の主要なサービス、使用方法、AWS の基本アーキテクチャのベストプラクティスについて理解していること</li><li>AWS を使用するクラウドベースのアプリケーションの開発、デプロイ、デバッグについて習熟していること</li></ul><p>※試験ガイドは<a href="https://aws.amazon.com/jp/certification/certified-developer-associate/?ch=tile&tile=getstarted">こちら</a>で確認できます。</p><p>試験内容としては以下の分野について出題されます。</p><ul><li>デプロイ</li><li>セキュリティ</li><li>AWSのサービスによる開発</li><li>リファクタリング</li><li>モニタリングとトラブルシューティング</li></ul><p>AWSサービスとしては、code系サービス、ElasticBeanstalk、CloudFormation、AWS SAM、KMS、IAM、API GateWay、DynamoDB、Lambda、CloudWatchなどの開発、デプロイ、サーバレス、運用監視で使用するサービス群が出題対象です。</p><p>AWS SAAと比較すると、AWS DVAは一つのAWSサービスについてある程度深く問われるような印象を受けました。</p><h1 id="学習方法"><a href="#学習方法" class="headerlink" title="学習方法"></a>学習方法</h1><p>私が試験対策に向けて行ってきた教材や勉強方法を紹介します。勉強期間は8月1日にスタートして、8月29日に受験したのでちょうど一か月です。AWS DVAを受験しようと決めてすぐに試験の受験予約をしました。先に期日を決めておくことでダラダラせず危機感を持つことができます。</p><h2 id="書籍"><a href="#書籍" class="headerlink" title="書籍"></a>書籍</h2><ul><li><a href="https://www.amazon.co.jp/dp/4798063401">ポケットスタディ AWS認定 デベロッパーアソシエイト</a></li></ul><p>今年の3月に出版されたばかりのAWS DVAに特化した書籍となっております。AWS DVAの試験内容の各分野ごとにセクションが分かれており、各分野で出題されるAWSサービスの要点やハンズオンを画面キャプチャ付きで解説してくれています。章末問題や本試験想定問題など問題数もかなり多く非常に充実しています。業務で使用したことないサービスのキャッチアップなどかなり助かりました。本書の著者の方はYouTubeチャンネルでハンズオン動画をアップしているので、動画を見ながらハンズオンをやったりもしました。</p><h2 id="Black-Belt-Online-Seminar"><a href="#Black-Belt-Online-Seminar" class="headerlink" title="Black Belt Online Seminar"></a>Black Belt Online Seminar</h2><p>AWSを利用している人は一度はお世話になるサービスだと思います。AWSの各サービスごとに概要やユースケース、機能などを紹介してくれるオンラインセミナーとなっています。YouTubeで講義動画が公開されており、1時間で視聴できるためお昼休みの1時間で動画視聴しながら、ご飯を食べる生活を送っていました。復習するときは資料のアーカイブが<a href="https://aws.amazon.com/jp/aws-jp-introduction/aws-jp-webinar-service-cut/">こちら</a>に上がっているのでPDFで閲覧していました。</p><h2 id="学習サイト-aws-koiwaclub-com"><a href="#学習サイト-aws-koiwaclub-com" class="headerlink" title="学習サイト aws.koiwaclub.com"></a>学習サイト aws.koiwaclub.com</h2><p>AWS認定資格試験の対策サイトと言えばkoiwaclubです。AWS DVAでは#1 ~ #40と比較的問題が少なかったためすべて回答し、間違えた問題の解説を熟読して都度復習する流れで進めていきました。問題の解説が公式ドキュメントの引用のため、一次情報である公式ドキュメントを見る癖も身につくと思います。</p><p>また、koiwaclubの問題集は比較的的中率が高いと言われており、私が受験した際も数問は同じような問題が出題されました。問題集を解くためには会員登録と月額費用が掛かってしまいますが、認定資格を目指されている方は利用して損はないサービスだと思います。</p><h2 id="Udemy"><a href="#Udemy" class="headerlink" title="Udemy"></a>Udemy</h2><ul><li><a href="https://www.udemy.com/course/aws-31955/">AWS 認定デベロッパー アソシエイト模擬試験問題集（5回分325問）</a></li></ul><p>AWS DVAの模擬試験が5回分何度も受けられるコースになっています。講座内容にも記載がありますが、本番試験よりも難易度が高い問題構成となっています。実際に解いてみましたが、koiwaclubよりもかなり難易度も高く、サービスの細かい仕様を問う問題が多かったです。この問題集もkoiwaclubと同様に間違えた問題の解説を熟読して都度復習する流れで進めていきました。本問題集を復習して解けるようになっておけば、本番試験は割と簡単に感じることができます。</p><ul><li><a href="https://www.udemy.com/course/aws-certified-developer-associate-dva-c01/">Ultimate AWS Certified Developer Associate 2021 - NEW!</a></li></ul><p>本講座は32時間の長時間の講義で、かつ英語での講義なのですがハンズオン中心のため、今まで触ったことのないAWSサービスのみを受講するスタイルで進めていきました。特定サービスに関しての講座も出しているので業務で新しく触るAWSサービスに関しては、この方の講座を受ければ手を動かせるレベル感には到達できると思いました。オススメなので是非受講してみてください。</p><h1 id="受験結果と感想"><a href="#受験結果と感想" class="headerlink" title="受験結果と感想"></a>受験結果と感想</h1><p>私は結構心配性で念には念入りに対策したおかげか、合格ライン720点に対して959点で合格することができました。</p><p>AWS認定資格を日本語で受験すると大体経験することなのですが、日本語訳に違和感のある問題が多かったです。その場合は英語に切り替えることもできるので都度英語に切り替えて問題文を理解して回答を選びました。</p><p>今回は使用したことないサービスはすべてハンズオンを一度は行うことを意識してテストに臨んだため、各サービス間のつながりを暗記でなく、理解することができたと思います。そのおかげか、初めての問題にも割と対応することができたと思います。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>AWS認定資格を目指すにあたって普段業務で使用しないサービスについて勉強する必要がありますが、取得する過程を通して使用したことないサービスに関してもある程度の知識レベルが身につきますし、何より案件で初めてサービスを使用するときの心理的ハードルが下がると思います。</p><p>アソシエイト資格は残りAWS Certified SysOps Administrator - Associate（SOA）だけなので、できるだけ早いうちに取得してしまおうと思います！</p><p>Future Tech Blogでは、市川浩暉さんの<a href="/articles/20210818b/">AWSSAA</a>の合格体験記や、伊藤真彦さんの<a href="/articles/20210607a/">AWSSAP</a>と<a href="/articles/20210825a/">AWSDOP</a>の合格体験記も記載しているのでぜひご覧ください！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/">合格記</category>
      
      
      <comments>https://future-architect.github.io/articles/20210906a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
