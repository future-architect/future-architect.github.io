<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Mon, 29 Nov 2021 14:06:16 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Qiita Advent Calendar 2021 に参加します</title>
      <link>https://future-architect.github.io/articles/20211129a/</link>
      <guid>https://future-architect.github.io/articles/20211129a/</guid>
      <pubDate>Sun, 28 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20211129a/pexels-torsten-dettlaff-195030.jpg&quot; alt=&quot;&quot; title=&quot;PexelsのTorsten Dettlaffによる写真&quot; width=&quot;1200&quot; height=&quot;800&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20211129a/pexels-torsten-dettlaff-195030.jpg" alt="" title="PexelsのTorsten Dettlaffによる写真" width="1200" height="800" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG/DXユニット所属の宮永です。</p><p>今年も残すところ１か月、2021年を振り返るとオリンピックやコロナなど様々なことがありました。<br>私事で恐縮ですが、2021年はフューチャーで社会人の第1歩を踏み出した年でもあり、個人としても非常に思い出深い1年となりました。</p><p>さて、そんな激動の2021年を締めくくる12月、フューチャーは今年もQiita主催のアドベントカレンダーに参加します。</p><p>フューチャーがアドベントカレンダーに参加するのは今年で7回目、本記事では<a href="https://qiita.com/advent-calendar/2021">Qiitaアドベントカレンダー</a>の紹介と<a href="https://qiita.com/advent-calendar/2021/future">2021年のフューチャーアドベントカレンダー</a>を紹介します。</p><h1 id="アドベントカレンダーとは"><a href="#アドベントカレンダーとは" class="headerlink" title="アドベントカレンダーとは"></a>アドベントカレンダーとは</h1><p>今回インデックス記事を書かせていただくこととなり知ったのですが、<a href="https://ja.wikipedia.org/wiki/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC">アドベントカレンダー</a>は一般的な用語です。クリスマス当日を待ち望みながら毎日ひとつずつ窓を開けていくカレンダーのことを「アドベントカレンダー」と呼びます。(例:サムネイル画像)</p><blockquote><p><em>アドベントカレンダー (Advent calendar) は、クリスマスまでの期間に日数を数えるために使用されるカレンダーである。待降節の期間（イエス・キリストの降誕を待ち望む期間）に窓を毎日ひとつずつ開けていくカレンダーである。(Wikipedia)</em></p></blockquote><p>Qiitaが主催するアドベントカレンダーは上記のアドベントカレンダーになぞらえて、12月1日から12月25日までエンジニアがリレー方式で記事を投稿していくイベントです。<br>プログラミング言語やクラウドなど技術分野のカテゴリをはじめ、企業や学校など団体ベースのカテゴリがあり、各々気になるテーマのカレンダーに参加し自分の担当日に記事を公開します。</p><p>アドベントカレンダーへの参加方法はシンプルで、気になるカレンダーを探して、投稿したい日を予約するだけです。<a href="https://qiita.com/advent-calendar/2021/categories">こちら</a>からカレンダーを探すことができます。</p><p>アドベントカレンダーへの参加方法の詳細は<a href="https://help.qiita.com/ja/articles/qiita-adcal-join">こちら</a>に記載されているので参考にしてください。<br>参加者が特に気にするポイントは「予約投稿機能」でしょう。限定共有記事で事前にURLを登録しておくことで公開日にやきもきすることなく投稿することができます。</p><h1 id="2020年の振り返り、2021年のカレンダー紹介"><a href="#2020年の振り返り、2021年のカレンダー紹介" class="headerlink" title="2020年の振り返り、2021年のカレンダー紹介"></a>2020年の振り返り、2021年のカレンダー紹介</h1><p>2021年のアドベントカレンダーを紹介する前に2020年のフューチャーのカレンダーを振り返ります。</p><h2 id="2020年の振り返り"><a href="#2020年の振り返り" class="headerlink" title="2020年の振り返り"></a>2020年の振り返り</h2><p>こちらは<a href="https://qiita.com/advent-calendar/2020/future">2020年のアドベントカレンダー</a>です。総合LGTM数は666で企業カテゴリで17位でした。<br>記事のタイトルをざっと眺めてみるとAWSやGCPなどのクラウドサービスのTipsから機械学習やツール紹介、ナレッジ共有など様々です。</p><p>中でも注目すべきは12月24日に投稿されている真野さんの<a href="https://qiita.com/ma91n/items/207f32db1b51754d6933">「テックリードになって気をつけていること」</a>でしょう。LGTM数508という驚異的な数字をたたき出しています。記事は9500文字の大作でタイトルの通り「テックリードになって気を付けていること」をアーキテクチャ設計や開発生産性、メンバーのマネジメントなどの観点からまとめています。</p><img src="/images/20211129a/image.png" alt="2020年カレンダー" width="1200" height="789" loading="lazy"><h2 id="2021年のカレンダー"><a href="#2021年のカレンダー" class="headerlink" title="2021年のカレンダー"></a>2021年のカレンダー</h2><p>こちらが<a href="https://qiita.com/advent-calendar/2021">2021年のアドベントカレンダー</a>です(2021年11月28日現在)。</p><p>昨年同様25日すべて埋めることができました。今年も昨年に引き続きバラエティ豊かなカレンダーになっています。</p><p>参加者は毎年参加しているベテラン勢から今年新卒入社した方(自分含む)まで幅広いです。<br>私も12月19日に「量子コンピュータとジャンケンする」というテーマで参加する予定です。読んでいただけると大変嬉しいです。<br><img src="/images/20211129a/image_2.png" alt="2021年カレンダー" width="1088" height="625" loading="lazy"></p><h1 id="発表テーマについて"><a href="#発表テーマについて" class="headerlink" title="発表テーマについて"></a>発表テーマについて</h1><p><a href="https://future-architect.github.io/articles/20201125/">昨年の記事</a>に発表テーマに関する注意点が記載されていたため引用します。</p><blockquote><p>例年と同じく、IT技術であること以外はフリーテーマです。</p></blockquote><blockquote><p>ポリシーとしては基本的にはQiitaそのものに投稿していただくスタイルですが（順位も少し気にしています）、Qiitaの投稿規約に沿わない記事（エッセー過ぎるもの、プログラミングに関係ないもの）は技術ブログ側に投稿することもあります。このあたりの決めは各人にお願いしています。<br>その他、個人ブログへのリンクは非推奨で基本的にはNGとアナウンスしています。</p></blockquote><p>記事内容に関してはQiitaの投稿規約に照らし合わせて投稿者の裁量に任せているようです。個人ブログへのリンクは基本的にNGなので参加される方は気を付けてください。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>学生時代に眺めていたQiitaのアドベントカレンダー、まさか自分が参加することになるとは思っていませんでした。初参加ということもあり気合が入ります。<br>昨年は企業カテゴリでLGTM数17位だったので今年は10位圏内を目指したいですね。</p><p>多種多様なテーマで埋め尽くされた2021年のフューチャーアドベントカレンダー、良いと思った記事には是非LGTMお願いいたします。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/TechBlog/">TechBlog</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC/">アドベントカレンダー</category>
      
      <category domain="https://future-architect.github.io/tags/Qiita/">Qiita</category>
      
      
      <comments>https://future-architect.github.io/articles/20211129a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>フューチャーのスポンサー・協賛活動をまとめてみた</title>
      <link>https://future-architect.github.io/articles/20211125a/</link>
      <guid>https://future-architect.github.io/articles/20211125a/</guid>
      <pubDate>Wed, 24 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20211125a/meeting-g6ae35b33a_640.png&quot; alt=&quot;&quot; title=&quot;TRESOR69によるPixabayからの画像&quot; width=&quot;640&quot; height=&quot;497&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20211125a/meeting-g6ae35b33a_640.png" alt="" title="TRESOR69によるPixabayからの画像" width="640" height="497"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。2021からみてここ数年（2018年くらいまで）におけるフューチャーのテクノロジー・CS周りのスポンサー情報をまとめました。</p><p>意外とこの手のカットな情報が社内で見当たらず、整理がてらまとめました。表の理由としてはこういった活動をしているということを皆さまにお知らせしたかったのと、これに刺激を受けて特にフューチャーメンバーの人が様々なコミュニティに対して登壇が活発になったり、スポンサー化をリーダー陣に提案する輪が広がると良いなと思っています。裏の理由としてはこういった各活動を技術ブログ化として書いてくれないかといったこと狙っています。すでに「アレこんなことやっているんだ。ブログ書いて欲しかった…」が複数件発生しています。</p><p>内容ですが、学会やフォーラムなどとともにコミュニティベースのカンファレンス一緒にまとめております。他にもビジネス・スポーツ・フォーラムなどいくつか協賛があるかと思いますが、技術系に絞って紹介させてもらいます。また、スポンサー・協賛はしていないもののフューチャーメンバーが運営協力・登壇・寄稿するケースも多数ありますが、それらは除かせていただきます。登壇については<a href="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポートタグ</a>にまとめています。</p><h2 id="協賛活動リスト"><a href="#協賛活動リスト" class="headerlink" title="協賛活動リスト"></a>協賛活動リスト</h2><p>調査日: 2021.11.22</p><h3 id="協賛・会員（2021年11月時点）"><a href="#協賛・会員（2021年11月時点）" class="headerlink" title="協賛・会員（2021年11月時点）"></a>協賛・会員（2021年11月時点）</h3><p><a href="https://www.future.co.jp/company_profile/corporate_profile/#tab-1">コーポレートサイト</a>にもいくつか記載されています。</p><ul><li><a href="https://www.jdla.org/">日本ディープラーニング協会（JDLA）</a><ul><li><a href="https://www.jdla.org/membership/#membership_No04">ゴールド賛助会員</a></li></ul></li><li><a href="https://www.ai-gakkai.or.jp/">人工知能学会（JSAI）</a><ul><li><a href="https://www.ai-gakkai.or.jp/about/sponsors/">賛助会員</a></li></ul></li><li><a href="https://www.stanford-svnj.org/">スタンフォード大学 シリコンバレーニュージャパンプロジェクト（SVNJ）</a><ul><li><a href="http://www.stanford-svnj.org/sponsors">SUPPORTERS</a></li></ul></li><li><a href="https://www.jmfrri.gr.jp/">ロボット革命イニシアティブ協議会</a><ul><li><a href="https://www.jmfrri.gr.jp/outline/list_of_members.html">会員</a></li></ul></li><li><a href="https://www.ipsj.or.jp/index.html">情報処理学会</a><ul><li><a href="https://www.ipsj.or.jp/annai/aboutipsj/sanjo.html">賛助会員</a></li></ul></li></ul><h3 id="イベント（学会）"><a href="#イベント（学会）" class="headerlink" title="イベント（学会）"></a>イベント（学会）</h3><ul><li>人工知能学会（JSAI）<ul><li><a href="https://www.ai-gakkai.or.jp/jsai2021/sponsor">2021年 プラチナスポンサー</a></li><li><a href="https://www.ai-gakkai.or.jp/jsai2020/sponsor/">2020年 プラチナスポンサー</a></li><li><a href="https://www.ai-gakkai.or.jp/jsai2019/sponsor/">2019年 プラチナスポンサー</a></li><li><a href="https://www.ai-gakkai.or.jp/jsai2018/sponsor/">2018年 プラチナスポンサー</a></li><li>登壇レポート<ul><li><a href="https://future-architect.github.io/articles/20190627/">2019年</a>、<a href="https://future-architect.github.io/articles/20180723/">2018年</a></li></ul></li></ul></li><li>言語処理学会(NLP)<ul><li><a href="https://www.anlp.jp/proceedings/annual_meeting/2021/html/body.html">2021年 27回シルバースポンサー</a></li><li><a href="https://www.anlp.jp/proceedings/annual_meeting/2020/html/body.html">2020年 26回プラチナスポンサー</a></li><li><a href="https://www.anlp.jp/proceedings/annual_meeting/2019/html/body.html">2019年 25回プラチナスポンサー</a></li><li><a href="https://www.anlp.jp/proceedings/annual_meeting/2018/html/body.html">2018年 24回プラチナスポンサー</a></li></ul></li><li>NLP若手の会(YANS)<ul><li>2021, 2020年はオンライン開催のためスポンサー募集なし</li><li><a href="https://yans.anlp.jp/entry/yans2019sponsors">2019年 プラチナスポンサー</a></li><li><a href="https://yans.anlp.jp/entry/yans2018">2018年 ゴールドスポンサー</a></li><li>登壇レポート<ul><li><a href="https://future-architect.github.io/articles/20180912/">2018年</a>、<a href="https://future-architect.github.io/articles/20170922/">2017年</a></li></ul></li></ul></li><li>画像の認識・理解シンポジウム(MIRU)<ul><li><a href="https://sites.google.com/view/miru2020/%E3%83%9B%E3%83%BC%E3%83%A0?authuser=1&pli=1#h.p_nPsjKENmgW7w">2020年 ゴールドスポンサー</a></li><li><a href="http://cvim.ipsj.or.jp/MIRU2019/">2019年 ゴールドスポンサー</a></li></ul></li><li>WebDB Forum<ul><li><a href="https://db-event.jpn.org/webdbf2018/">2018年 プラチナスポンサー</a></li></ul></li><li><a href="https://www.wiss.org/">WISS 日本ソフトウェア科学会インタラクティブシステムとソフトウェア（ISS）研究会</a><ul><li><a href="https://www.wiss.org/WISS2019/">2019年 企業スポンサー</a></li><li><a href="https://www.wiss.org/WISS2018/">2018年 企業スポンサー</a></li></ul></li></ul><h3 id="イベント（ソフトウェア全般）"><a href="#イベント（ソフトウェア全般）" class="headerlink" title="イベント（ソフトウェア全般）"></a>イベント（ソフトウェア全般）</h3><ul><li><a href="https://event.shoeisha.jp/devsumi">Developers Summit</a><ul><li><a href="https://event.shoeisha.jp/devsumi/20200213/sponsor">2020年 ゴールドスポンサー</a></li></ul></li><li><a href="http://asucon.alleyoop.jp/">明日の開発カンファレンス</a><ul><li><a href="http://asucon2018.alleyoop.jp/">2018年 ゴールドスポンサー</a></li></ul></li><li><a href="https://ledge.ai/the-ai-3rd/">THE AI 3rd</a><ul><li><a href="https://ledge.ai/the-ai-3rd/">2019年 プラチナスポンサー</a></li><li><a href="https://ledge.ai/theai-3rd-future/">【登壇記事】AI導入のカギはデジタルトランス フォーメーション。今こそ目の前の現場を見つめなおそう | Ledge.ai</a></li></ul></li><li><a href="https://codeblue.jp/">CODE BLUE</a><ul><li><a href="https://codeblue.jp/2019/sponsors/">2019年 ゴールドスポンサー</a></li><li><a href="https://codeblue.jp/2018/sponsors/">2018年 ゴールドスポンサー</a></li></ul></li><li>サイバー防衛シンポジウム<ul><li><a href="https://www.5th-battlefield.com/summary.html">2021年 協賛</a></li></ul></li><li><a href="https://www.seckansai.com/ucsecquiz/">Ultimate Cyber Security Quiz</a><ul><li><a href="https://www.seckansai.com/ucsecquiz/">2021年 シルバースポンサー</a></li><li><a href="https://www.seckansai.com/ucsecquiz2020/index.html">2020年 シルバースポンサー</a></li><li><a href="https://www.seckansai.com/ucsecquiz2019/index.html">2019年 ゴールドスポンサー</a></li></ul></li><li><a href="https://manabiya.tech/">MANABIYA</a><ul><li><a href="https://manabiya.tech/sponsor">2018年 シルバースポンサー</a></li></ul></li><li><a href="https://atcoder.jp/">AtCoder</a><ul><li>2021年 AGC/ARC/ABC ゴールドスポンサー<ul><li><a href="https://atcoder.jp/contests/arc129">ARC129</a>, <a href="https://atcoder.jp/contests/arc130">ARC130</a></li></ul></li></ul></li></ul><h3 id="イベント（技術要素）"><a href="#イベント（技術要素）" class="headerlink" title="イベント（技術要素）"></a>イベント（技術要素）</h3><ul><li>JAWS Days<ul><li><a href="https://jawsdays2021.jaws-ug.jp/corporate-supporter/future/">2021年 Session Supporter</a></li><li>2020年は開催がキャンセル</li><li><a href="https://jawsdays2019.jaws-ug.jp/supporter/">2019年 Lunch Supporter</a></li></ul></li><li><a href="https://discovery.soracom.jp/">ソラコムディスカバリー</a><ul><li><a href="https://discovery.soracom.jp/sponsor/">2021年 ゴールドスポンサー</a></li><li>登壇動画<ul><li><a href="https://www.youtube.com/watch?v=KX7Icd_2q-E">SORACOM Discovery2021 ｜ 講演「ニチガスの事例解説から知る、データをフル活用した現場業務の変革」</a></li></ul></li></ul></li><li><a href="https://vuefes.jp/">Vue Fes Japan</a><ul><li><a href="https://vuefes.jp/2019/sponsors/">2019年 ランチスポンサー</a></li></ul></li><li><a href="https://jsconf.jp/">JSConf JP</a><ul><li><a href="https://jsconf.jp/2019/">2019年 シルバースポンサー</a></li></ul></li><li>東京Node学園祭<ul><li><a href="https://nodefest.jp/2018/sponsors.html">2018年 ゴールドスポンサー</a></li></ul></li><li><a href="https://gocon.jp/">Go Conference - JP</a><ul><li><a href="https://gocon.jp/2021autumn/">2021年 Autumn: ブロンズスポンサー</a></li><li><a href="https://gocon.jp/2021spring/">2021年 Spring: ブロンズスポンサー</a></li><li>2020年 Autumn: Tofu On Fireスポンサー<ul><li><a href="https://future-architect.github.io/articles/20191203/">Go Conferenceの📛を作る</a> を参考ください</li></ul></li></ul></li><li>golang.tokyo<ul><li>2020年 <a href="https://golangtokyo.connpass.com/event/164955/">#29</a> の回で会場とフードをスポンサー提供</li></ul></li></ul><p>フード・会場提供系のスポンサーは2020年以前は他にも多数あるかと思いますが、調べきれずでした。これもあるということがあればTwitterなどでコメントいただければです。</p><h3 id="イベント（学生さん向け）"><a href="#イベント（学生さん向け）" class="headerlink" title="イベント（学生さん向け）"></a>イベント（学生さん向け）</h3><ul><li>技育祭<ul><li><a href="https://talent.supporterz.jp/geeksai/2021/">2021年 プラチナスポンサー</a></li><li><a href="https://talent.supporterz.jp/geeksai/2020/">2020年 ゴールドスポンサー</a></li><li><a href="https://corp.supporterz.jp/news/2019/geeksai">2019年 ゴールドスポンサー</a></li><li>参加レポート<ul><li><a href="https://future-architect.github.io/articles/20210907a/">技育祭2021に登壇しました </a></li><li><a href="https://future-architect.github.io/articles/20210511a/">技育祭登壇しました。これから機械学習を学びたい方向けへの自分の経験談とおすすめの本、サイトの紹介もします</a></li><li><a href="https://note.future.co.jp/n/nc607f6d10422">技術者を育てるイベント「技育祭2020」参加レポート｜未来報</a></li></ul></li></ul></li><li>未踏ジュニア<ul><li><a href="https://jr.mitou.org/assets/download/flyer_2020.pdf">2020年 シルバースポンサー</a></li><li><a href="https://prtimes.jp/main/html/rd/p/000000007.000022934.html">2019年 ゴールドスポンサー</a></li></ul></li><li>JPHACKS<ul><li><a href="https://jphacks.com/2018/">2018年 ゴールドスポンサー</a></li><li><a href="https://jphacks.com/2018/">2017年 ゴールドスポンサー</a></li></ul></li><li>FRC(FIRST Robotics Competition) RAIJINboticsチーム<ul><li><a href="https://raijin-botics.org/sponsors/">2020年 ゴールドスポンサー</a></li></ul></li></ul><h3 id="その他（賛同）"><a href="#その他（賛同）" class="headerlink" title="その他（賛同）"></a>その他（賛同）</h3><ul><li><a href="https://prtimes.jp/main/html/rd/p/000000026.000028415.html">アルゴリズム実技検定</a></li></ul><h2 id="協賛-スポンサーのキッカケ"><a href="#協賛-スポンサーのキッカケ" class="headerlink" title="協賛/スポンサーのキッカケ"></a>協賛/スポンサーのキッカケ</h2><p>技術系のカンファレンスに関しては、その技術要素に興味があるメンバーが自発的にスポンサーしてはどうか？とSlackなどで投げかけて話が進むことが多いと思います。もちろん、採用チームなどがPR・ブランディング目的で始まったものも多いかと思います。各コミュニティに対して繋がりを持てることは良いですね</p><p>協賛すると、会社ロゴを載せてもらったり、ブースを作っていただけたり、スポンサーセッションの場をいただくことも多く、貴重な機会だなと感じています。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>いつもと違ったカットで情報を整理してみました。フューチャーにはテクノロジー組織のTIGの他にも、AIデータサイエンスを得意とするSAIG、セキュリティのCSIGなどの専門部隊が複数存在し、それぞれが活発に活動していることがよく分かりました。お互いのチームのやっていることを理解しながら、さらに盛り上げていきたいですね。</p><p>今回のまとめのようなものは定期的にアップデートして、業界全体に貢献していければと思います。最後まで読んでいただきありがとうございました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/OSS/">OSS</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B5%E3%83%BC/">スポンサー</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%AB%E3%83%B3%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/">カンファレンス</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%AD%A6%E4%BC%9A/">学会</category>
      
      
      <comments>https://future-architect.github.io/articles/20211125a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JSレスBootstrapなdaisyUIの秘密</title>
      <link>https://future-architect.github.io/articles/20211124a/</link>
      <guid>https://future-architect.github.io/articles/20211124a/</guid>
      <pubDate>Tue, 23 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;最近、趣味開発でフロントエンドをいじる場合とか、Reactの技術サポートで手っ取り早く使い捨ての環境を作る場合は次の組み合わせで作っています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vitejs.dev/&quot;&gt;Vite.js&lt;/a&gt;でReact +</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>最近、趣味開発でフロントエンドをいじる場合とか、Reactの技術サポートで手っ取り早く使い捨ての環境を作る場合は次の組み合わせで作っています。</p><ul><li><a href="https://vitejs.dev/">Vite.js</a>でReact + TypeScriptプロジェクト作成</li><li><a href="https://tailwindcss.com/">Tailwind CSS</a></li></ul><p>これにESLintとPrettierを入れて完了です。何かすごい便利、というよりもJSON設定ファイルいじりを最小にして、手間最小な必要十分なところを狙っています。eslint-config-prettierを入れた後に”prettier”ってESLintの設定に足すところだけは設定ファイルの修正が必要です。</p><p>UI部品は<a href="https://mui.com/">MUI</a>（以前のMaterial UI)を使ったり、WebComponentsベースのものとかいろいろ試していましたが、最近お気に入りなのは<a href="https://daisyui.com/">daisyUI</a>です。</p><img src="/images/20211124a/スクリーンショット_2021-11-17_19.39.55.png" alt="daisyUIトップページ" width="1200" height="842"><p>本記事の執筆にあたっては、<a href="https://twitter.com/wozozo">@wozozo</a>, <a href="https://twitter.com/moriyoshit">@moriyoshit</a>, <a href="https://twitter.com/aodag">@aodag</a>が雑談に乗ってくれましたので、感謝申し上げます。</p><h1 id="Bootstrap風な使い勝手"><a href="#Bootstrap風な使い勝手" class="headerlink" title="Bootstrap風な使い勝手"></a>Bootstrap風な使い勝手</h1><p>Tailwind CSSの設定が終わっていれば、<code>npm install daisyui</code>してからTailwind CSSの設定ファイルに一行足すだけで設定は完了します。</p><figure class="highlight js"><figcaption><span>tailwind.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">&#x27;daisyui&#x27;</span>),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使い方は、CSSのクラスにちょっと書き足すだけで動きます。使い勝手はBootstrapみたいですね。ドキュメントが検索しやすくて、サンプルが豊富で、シンプルに書かれているので、フロントエンドが苦手でCopy And Paste from Stack Overflowな人にも使いやすいと思います。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>neutral<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>primary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span>&gt;</span>secondary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-accent&quot;</span>&gt;</span>accent<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-ghost&quot;</span>&gt;</span>ghost<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-link&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/images/20211124a/スクリーンショット_2021-11-17_19.50.40.png" alt="ボタン" width="1200" height="134" loading="lazy"><p>優れている点は、Tailwind CSSに乗っかっているので、CSSの最適化がTailwind CSSのお作法で適切に行われて、サイズが小さいCSSが出力される点と、CSSだけなので、Reactだろうが、Vue.jsだろうが、Svelteだろうが、どんなフレームワークとも食い合わせが悪くなくて、ラッパーライブラリとか不要な点です。標準のHTMLのinput要素とかタグを扱う使い方で自然と扱えます。</p><p>UI部品の種類もそこそこ多いのも嬉しいですね。Headless UIよりも多い。</p><p>デフォルトで普通に使えるデザイン済みの部品が提供されていますが、<a href="https://github.com/saadeghi/daisyui/tree/master/src/components">ソースを見ると</a>、styledと、unstyledというフォルダーがあります。設定で<a href="https://daisyui.com/docs/customize">スタイルをオフにする</a>こともでき、コンポーネントの機構はそのまま利用して、独自デザインも作り込むことができるようになっています。</p><p>ステート管理をReactとかVue.jsとかで作り込まなくても、サンプル通りに置くだけで動作する点もうれしいですね。最近はUI部品はuncontrolledで使うのが流行りっぽいですが、そういう使い方にも合致していると言えます。</p><h1 id="ちょっと待てよ？なんでお前動くの？？？？"><a href="#ちょっと待てよ？なんでお前動くの？？？？" class="headerlink" title="ちょっと待てよ？なんでお前動くの？？？？"></a>ちょっと待てよ？なんでお前動くの？？？？</h1><p>UI部品にはこんなものもあります。</p><ul><li>プルダウンメニュー</li><li>ドロワー（サイズ変更でサイドバーが出たり、ボタンでサイドバーが出たり）</li><li>モーダル（いわゆるダイアログ）</li><li>数字が勝手に減っていくカウントダウン</li></ul><p>設定したときにはCSSの変更しかしてないわけですよ。JavaScriptをロードしたり組み込んだりを一切していない。まあプルダウンメニューぐらいは擬似セレクターでできるというのは想像できるのですが、クリックなしでモーダルとかドロワーとかどうやるんだ？というのがここ数日眠れないほど悩んでいた（嘘です）ことです。</p><p>というわけでコードを読んでみました。まずはドロップダウン。<code>.dropdown-open</code>をつければ開けっ放しになるし、あとはホバー時、フォーカス時に表示、みたいな感じですかね。DOMの擬似セレクタをうまくつかっていますね。</p><figure class="highlight scss"><figcaption><span>/src/components/unstyled/dropdown.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dropdown</span><span class="selector-class">.dropdown-open</span> <span class="selector-class">.dropdown-content</span>,</span><br><span class="line"><span class="selector-class">.dropdown</span><span class="selector-class">.dropdown-hover</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.dropdown-content</span>,</span><br><span class="line"><span class="selector-class">.dropdown</span><span class="selector-pseudo">:not</span>(.dropdown-hover)<span class="selector-pseudo">:focus</span> <span class="selector-class">.dropdown-content</span>,</span><br><span class="line"><span class="selector-class">.dropdown</span><span class="selector-pseudo">:not</span>(.dropdown-hover)<span class="selector-pseudo">:focus</span>-within <span class="selector-class">.dropdown-content</span>&#123;</span><br><span class="line">  <span class="keyword">@apply</span> visible opacity-<span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ボタンでドロワーが表示される機能は次のようなHTMLで実現します。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rounded-lg shadow bg-base-200 drawer h-52&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;my-drawer&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;drawer-toggle&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex flex-col items-center justify-center drawer-content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;my-drawer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary drawer-button&quot;</span>&gt;</span>open menu<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;drawer-side&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;my-drawer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;drawer-overlay&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;menu p-4 overflow-y-auto w-80 bg-base-100 text-base-content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span>&gt;</span>Menu Item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span>&gt;</span>Menu Item<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>チェックボックスとラベルがありますね。ラベルをつけると、場所が離れたinputつまり、チェックボックスの操作ができます。ON/OFFの切り替えはボタンに見えるラベルを使い、ON/OFFの状態管理はチェックボックスを使っておこなっています。ちなみに、この状態管理をしているチェックボックスは非表示要素となっています。</p><figure class="highlight scss"><figcaption><span>/src/components/unstyled/drawer.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.drawer-toggle</span>&#123;</span><br><span class="line">  <span class="keyword">@apply</span> appearance-none opacity-<span class="number">0</span> w-<span class="number">0</span> h-<span class="number">0</span> absolute;</span><br><span class="line">  :</span><br><span class="line">  &amp;:checked&#123;</span><br><span class="line">    &amp; ~ .drawer-side&#123;</span><br><span class="line">      @apply overflow-y-auto;</span><br><span class="line">      &amp;&gt;<span class="selector-class">.drawer-overlay</span>&#123;</span><br><span class="line">        <span class="keyword">@apply</span> visible;</span><br><span class="line">      &#125;</span><br><span class="line">      &amp;&gt;<span class="selector-class">.drawer-overlay</span> + *&#123;</span><br><span class="line">        <span class="keyword">@apply</span> translate-x-<span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後に、一番摩訶不思議だったモーダルです。モーダルもドロワーみたいなチェックボックスを使うモードもありますが、そうじゃないモードもあります。アンカーリンクモードのコードは次のようになっています。意味不明ですね。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/components/modal#my-modal&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>open modal<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;my-modal&quot;</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Enim dolorem dolorum omnis atque necessitatibus. Consequatur aut adipisci qui iusto illo eaque. Consequatur repudiandae et. Nulla ea quasi eligendi. Saepe velit autem minima.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal-action&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/components/modal#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span>Accept<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/components/modal#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>種明かしのCSSを見てみると、<code>:target</code>擬似セレクタを使っています。aタグをクリックしたときに選択されている要素であればこのセレクタが発動します。チェックボックスは同じ要素をON/OFFしますが、これであれば、クリックしたのと別の要素を使って選択を外せます。モーダルの場合、表示した後は元の表示ボタンは隠れてしまうわけで、モーダル上のOK/キャンセルボタンを使って閉じたいわけなので、こういう機能になっているのだと思います。</p><figure class="highlight scss"><figcaption><span>/src/components/unstyled/modal.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.modal-open</span>,</span><br><span class="line"><span class="selector-class">.modal</span><span class="selector-pseudo">:target</span>,</span><br><span class="line"><span class="selector-class">.modal-toggle</span><span class="selector-pseudo">:checked</span> + <span class="selector-class">.modal</span>&#123;</span><br><span class="line">  <span class="keyword">@apply</span> visible opacity-<span class="number">100</span> pointer-events-auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>単なるお手軽部品かと思いきや、C++やRustで実装されているブラウザネイティブな機能のみをつかっているということは、ある意味、最速のUIコンポーネントなのでは？</p><h1 id="コードからコントロールしたい場合はどうするか？"><a href="#コードからコントロールしたい場合はどうするか？" class="headerlink" title="コードからコントロールしたい場合はどうするか？"></a>コードからコントロールしたい場合はどうするか？</h1><p>フォーカスやら隠れた<code>&lt;input&gt;</code>タグやら、<code>&lt;label&gt;</code>タグやら、<code>&lt;a&gt;</code>タグやらを使って制御しているということはわかりました。</p><p>例えば、最初のチュートリアルで自動でサイドバーを開きたい、エラーが発生したのでスクリプトからモーダルを開きたい、といった場合はどうすればいいでしょうか？もちろん、これらのタグをDOM経由で操作すれば一応できますが、今まで説明してきたように、かなりトリッキーなタグの使い方をしているので、コードの見た目が変になってしまいますし、ReactとかVue.jsとか、せっかく宣言的な感じで書けるのに、急に手続型っぽくなってしまいます。</p><p>ドロップダウンからは強制的にモードを切り替えるCSSのクラス<code>dropdown-open</code>が提供されているので、このCSSのON/OFFで制御するのが良いと思います。まあ、あとは隠されたチェックボックスをcontrolledフォームにして、この状態をスクリプトで制御するのが良いですかね。</p><h1 id="アクセシビリティの懸念"><a href="#アクセシビリティの懸念" class="headerlink" title="アクセシビリティの懸念"></a>アクセシビリティの懸念</h1><p>紹介したコードは、いくつか、HTMLの元のタグのセマンティクスから外れた使い方をしていました。このようなものは本来はロールをきちんとつけてアクセシビリティに配慮すべきものです。</p><div class="scroll"><table><thead><tr><th align="left">コンポーネント</th><th align="left">付けるべきロール</th></tr></thead><tbody><tr><td align="left"><a href="https://daisyui.com/components/alert">alert</a></td><td align="left"><a href="https://w3c.github.io/aria/#alert">alert</a>ロール</td></tr><tr><td align="left"><a href="https://daisyui.com/components/breadcrumbs">breadcrumbs</a></td><td align="left"><a href="https://w3c.github.io/aria/#navigation">navigation</a>ロール(もしリンク集になっていたら)</td></tr><tr><td align="left"><a href="https://daisyui.com/components/drawer">drawer</a></td><td align="left">サイドバーは<a href="https://w3c.github.io/aria/#menu">menu</a>ロール, <a href="https://w3c.github.io/aria/#button">button</a>ロール(開閉要素), 本体は<a href="https://w3c.github.io/aria/#main">main</a>ロールか<a href="https://w3c.github.io/aria/#document">document</a>ロール, <a href="https://w3c.github.io/aria/#landmark">landmark</a>ロール</td></tr><tr><td align="left"><a href="https://daisyui.com/components/dropdown">dropdown</a></td><td align="left"><a href="https://w3c.github.io/aria/#combobox">combobox</a>ロール</td></tr><tr><td align="left"><a href="https://daisyui.com/components/footer">footer</a></td><td align="left"><a href="https://w3c.github.io/aria/#navigation">navigation</a>ロール</td></tr><tr><td align="left"><a href="https://daisyui.com/components/menu">menu</a></td><td align="left"><a href="https://w3c.github.io/aria/#menu">menu</a>ロール</td></tr><tr><td align="left"><a href="https://daisyui.com/components/modal">modal</a></td><td align="left"><a href="https://w3c.github.io/aria/#dialog">dialog</a>ロールか<a href="https://w3c.github.io/aria/#alertdialog">alertdialog</a>ロール, <a href="https://w3c.github.io/aria/#button">button</a>ロール(開閉要素)</td></tr><tr><td align="left"><a href="https://daisyui.com/components/navbar">navbar</a></td><td align="left"><a href="https://w3c.github.io/aria/#toolbar">toolbar</a>ロール</td></tr><tr><td align="left"><a href="https://daisyui.com/components/tooltip">tooltip</a></td><td align="left"><a href="https://w3c.github.io/aria/#tooltip">tooltip</a>ロール</td></tr></tbody></table></div><p>僕はアクセシビリティの専門家ではないので、もしこれも付与すべき、これよりもこちらの方が良い、というのがあればTwitterのDMか、ここのブログに編集リクエストを送っていただけると助かります。あとは、選べるなら最初からセマンティクスに合致したタグを選ぶというのも手ですね。ドロワーの真ん中のコンテンツのところに<code>&lt;main&gt;</code>とか<code>&lt;content&gt;</code>タグを使うとか。daisyUIのサンプルでも<a href="https://daisyui.com/components/footer">footer</a>は<code>&lt;footer&gt;</code>タグを使っていますし、<a href="https://daisyui.com/components/kbd">kbd</a>は<code>&lt;kbd&gt;</code>タグを使っていますね。</p><p>これは目安で、条件によって別のロールが良かったりとかあると思うのでロール一覧を見て付与するのがよいと思います。</p><p>daisyUIのサイトにPRでも送ってサンプルにロールをつけてもらおうかとも思ってコードのフォークをしていくつかrole属性をつけたりしていたのですが、かつてBootstrapはサンプルにロールを入れていたが、アクセシビリティについてよく知らない人がそのままコピペして広まった結果、アクセシビリティの世間の使われ方が破滅した、ということがあったと聞いたので、自分できちんと考えて付与してください。</p><p>breadcrumbsで、現在ページにはaria-currentもつけたりした方がいいんですかね・・・</p><h1 id="用法容量を守ってご利用ください"><a href="#用法容量を守ってご利用ください" class="headerlink" title="用法容量を守ってご利用ください"></a>用法容量を守ってご利用ください</h1><p>うまく、標準のHTMLの状態管理をハイジャックしてUIの状態管理を実現していることがわかりました。おかげで、JavaScriptを使わずに動くUIを実現している仕組みがわかると同時にアクセシビリティ的には少し行儀が良くないね、というのも見えたと思います。</p><p>裏の仕組みがわかったので、daisyUIを書いていてうまく動かない場合のトラブルシュートも方向性が見えてきたので、今後はもっとうまく使えそうです。</p><p>僕個人はかっこいいCSS書けない勢なので、UI部品は積極的に使いたいし、その方向性でWebComponentsに期待していたところもあったのですが、JSを読み込まずにしゅっと表示できてしまうので、個人的なニーズにはすごく合致しています。ただ、最後に触れたようにアクセシビリティ的にはちょっとあれなので、きちんとロールを付けながら使っていきたいですね。</p><p>ちなみに、紹介しなかった実装面白コンポーネントに<a href="https://daisyui.com/components/countdown">カウントダウン</a>があります。ぜひどう実装されているのか見てみてください。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/">フロントエンド</category>
      
      <category domain="https://future-architect.github.io/tags/CSS/">CSS</category>
      
      <category domain="https://future-architect.github.io/tags/daisyUI/">daisyUI</category>
      
      <category domain="https://future-architect.github.io/tags/TailwindCSS/">TailwindCSS</category>
      
      
      <comments>https://future-architect.github.io/articles/20211124a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go Conference 2021 Autumn にGoの静的解析で登壇しました</title>
      <link>https://future-architect.github.io/articles/20211122a/</link>
      <guid>https://future-architect.github.io/articles/20211122a/</guid>
      <pubDate>Sun, 21 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは、TIGの辻です。渋川、伊藤と同じく &lt;a href=&quot;https://gocon.jp/2021autumn/&quot;&gt;Go Conference Online 2021 Autumn&lt;/a&gt; に登壇しました。Go Conference Autumn</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは、TIGの辻です。渋川、伊藤と同じく <a href="https://gocon.jp/2021autumn/">Go Conference Online 2021 Autumn</a> に登壇しました。Go Conference Autumn には2019年にも登壇しているので、2年ぶり2度目の出場になります。</p><p>2019年はGoの特徴である並行処理に焦点を当てた、<a href="/articles/20191120/">Goによる並列のシミュレーテッドアニーニングの実装</a>、というマニアックな内容でしたが、今回はGoの静的解析、という身近なテーマで登壇しました。</p><img src="/images/20211122a/image.png" alt="image.png" width="1200" height="619"><p>スライドは以下です。</p><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/02845f0d6f7d43fc8a2b12b6da677c94" title="Starting static analysis with Go" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 314px;" data-ratio="1.78343949044586"></iframe><p>静的解析というと、聞いたことはある。実際 <a href="https://github.com/golangci/golangci-lint"><code>golangci-lint</code></a> にはめちゃくちゃお世話になっている。ただ、自分でアドホックな静的解析のモジュールを自作するとなると、めちゃくちゃハードル高いんじゃないの？と思う方が多いと思います。しかし、そんなことはありません。本発表では実際に私がはじめて静的解析のモジュールを自作した経験から、静的解析のモジュールを作るのはハードル高くないよ、ということをお伝えしたくて登壇しました。</p><p>以下は、静的解析のモジュールを作って、現場で活用できるようになったよ、という記事です。<br><a href="https://future-architect.github.io/articles/20210603a/">https://future-architect.github.io/articles/20210603a/</a></p><p>カンファレンスでお伝えしたかったことは以下の2点です。</p><ul><li>Goが提供している順標準ライブラリ(<a href="https://pkg.go.dev/golang.org/x/tools/go/analysis)%E3%82%92%E4%BD%BF%E3%81%8A%E3%81%86%EF%BC%81">https://pkg.go.dev/golang.org/x/tools/go/analysis)を使おう！</a></li><li>Goが提供している静的解析のモジュールのコードを参考にしよう！</li></ul><p>加えて、静的解析のモジュールを実際に実装するときには、エコシステムのライブラリ( <a href="https://github.com/gostaticanalysis/skeleton">gostaticanalysis/skeleton</a> など)を使うと、より効率的に開発ができます。今回は時間の関係上割愛しましたが、このあたりのTipsもどこかでお話しできれば、と思います。</p><p>今回の発表が静的解析をはじめるみなさんの参考になれば嬉しいです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/GoConference/">GoConference</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%9D%99%E7%9A%84%E8%A7%A3%E6%9E%90/">静的解析</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%AB%E3%83%B3%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/">カンファレンス</category>
      
      
      <comments>https://future-architect.github.io/articles/20211122a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「Contextを完全に理解する」というテーマでGo Conference 2021 Autumnに登壇しました</title>
      <link>https://future-architect.github.io/articles/20211119a/</link>
      <guid>https://future-architect.github.io/articles/20211119a/</guid>
      <pubDate>Thu, 18 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;TIGの伊藤真彦です&lt;/p&gt;
&lt;p&gt;先日&lt;a href=&quot;https://gocon.jp/2021autumn/&quot;&gt;Go Conference 2021 Autumn&lt;/a&gt;に登壇させていただきました、リモート登壇です。&lt;/p&gt;
&lt;img</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>TIGの伊藤真彦です</p><p>先日<a href="https://gocon.jp/2021autumn/">Go Conference 2021 Autumn</a>に登壇させていただきました、リモート登壇です。</p><img src="/images/20211119a/image.png" alt="image.png" width="100%" height="649" loading="lazy"><p>発表資料はこちらです。</p><iframe src="//www.slideshare.net/slideshow/embed_code/key/4pZJNIRQud0Iy0" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/ssuserebd24d1/go-conference-2021-autumn" title="Go conference 2021 autumn" target="_blank">Go conference 2021 autumn</a> </strong> from <strong><a href="https://www.slideshare.net/ssuserebd24d1" target="_blank">masahiko ito</a></strong> </div><h1 id="contextを発表資料に選定した意義"><a href="#contextを発表資料に選定した意義" class="headerlink" title="contextを発表資料に選定した意義"></a>contextを発表資料に選定した意義</h1><p><a href="https://github.com/golang/go/blob/master/src/context/context.go">context</a>はGoでアプリケーションを実装する上でお世話にならない方が少ないくらいのパッケージだと思います。</p><p>一方使いやすいインターフェースであるため、仕組みをよく分かっていなくてもとりあえず使っておけば機能は実装できます。そういったものを自分自身良く知りたい、学べるコンテンツを作りたい、というモチベーションがありました。</p><p>またcontextはgoのパッケージの中では極めてシンプルかつ少ない行数で完結したパッケージです。そしてGoをスマートに実装するテクニック、並行処理の実装方法が少ないコードに詰め込まれています。そのためコードリーディングのコンテンツに適しており、40分の枠内で全てのコードを紹介する事が出来ました。</p><p>contextの基礎的な利用方法も発表の前半に組み込むつもりでしたが、<a href="https://zenn.dev/hsaki/books/golang-context">zennの無料書籍</a>が登場したため、発表はコードの読み取りとそこから得られる知見にフォーカスしました。</p><h1 id="contextのコードリーディングから得られる知見"><a href="#contextのコードリーディングから得られる知見" class="headerlink" title="contextのコードリーディングから得られる知見"></a>contextのコードリーディングから得られる知見</h1><p>600行以下のcontextを読むだけで、以下の内容が学べます。</p><ul><li>Interface</li><li>struct(structにstructを埋め込むなど高度なテクニック)</li><li>型アサーション</li><li>errorを拡張した独自のエラー型</li><li>並行処理(goroutine, channel, sync.Mutex, sync/atomic)</li><li>internal/reflectlite(発表では流しました)</li><li>名前付き戻り値</li></ul><p>これらにな馴染みが無い方は是非contextの実装を読み込んでみていただければと思います。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>勉強になる、contextを教材として採用したい、といった反響を頂けました、目的が達成できたという手ごたえを感じることができました。</p><p>今回のGo Conferenceは<a href="https://remo.co/">remo</a>を使ったバーチャル会場が賑わっており、参加者同士のコミュニケーションも楽しむことができました。</p><p>また次回も参加できるよう精進します。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/GoConference/">GoConference</category>
      
      <category domain="https://future-architect.github.io/tags/CodeReading/">CodeReading</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%AB%E3%83%B3%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/">カンファレンス</category>
      
      
      <comments>https://future-architect.github.io/articles/20211119a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go Conference Online 2021 Autumnが開催されました＆作って学ぶシェル</title>
      <link>https://future-architect.github.io/articles/20211118a/</link>
      <guid>https://future-architect.github.io/articles/20211118a/</guid>
      <pubDate>Wed, 17 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;Go Conference Online 2021</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>Go Conference Online 2021 Autumnが開催されました。スタッフのみなさん、登壇者、参加者のみなさん、お疲れ様でした。フューチャーは今回もブロンズスポンサーでした。また、フューチャーからは伊藤（真）、辻、渋川の三人が登壇しました。</p><img src="/images/20211118a/3I3nVBN6Jla9J7j1636787586_1636787641.png" alt="3I3nVBN6Jla9J7j1636787586_1636787641.png" width="1000" height="514" loading="lazy"><p>その中の、渋川の発表内容を紹介します。タイトルは「Learning Computer Systems by Crafting: Shell 〜作って学ぶシェル〜」で、シェルの動作の紹介をしつつ、自分で実装してみるには、という感じの解説でした。<a href="https://ascii.jp/serialarticles/1235262/">Goならわかるシステムプログラミング</a>（書籍は<a href="https://www.lambdanote.com/products/go">こちら</a>)では詳しく触れていなかったシェルについて詳しく説明する追加コンテンツです。</p><img src="/images/20211118a/image_(15).png" alt="image_(15).png" width="1200" height="646" loading="lazy"><p>発表資料はこちらです。</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vTjNhH-Fh3WwUe-hLT777OI4YOAxtG5YUqIfEzt63nwyvzNra-7leKPz4YcwWSuHt-jBJxAbuPliWXg/embed?start=false&loop=false&delayms=3000" frameborder="0" width="95%" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><p>Twitter等でたまに話題になるのは、次のようなことです。</p><blockquote><p>「若い人の中にはシェルの概念をあまり知らない人もいる」<br>「はたしてそのような人はどのようなきっかけ（経路）でシェルを知るようになるのか」</p></blockquote><p>踏み台へのsshなど、現在でもシェル操作そのものが要求されますし、コードを書いているとgo mod initなりnpm installなりのいくつかの操作が必要となります。中には、flutterコマンドとか、Gitのように優秀なIDEプラグインやGUIツールのおかげで、「GUIツールだけで済ます」ということも可能な領域もありますが、まだまだそうでない領域もあります。</p><p>シェルを使うにあたっては、いくつものコマンド以外に、内部状態や、裏でシェルがやってくれることを知る必要があります。</p><ul><li>PATH</li><li>環境変数＆変数展開</li><li>ワイルドカード</li><li>パイプ＆リダイレクト　etc…</li></ul><p>今日のセッションでは、この「シェルが何者か」という説明をします。このページに検索して辿り着いた人はシェルが何かがわかっている人の方が多いかもしれませんが、もし周りにシェルがよくわからん、という人がいればこのブログのリンクを送ってもらうような使い方をしてもらえたらな、と思っています。</p><h1 id="シェルとは何か？"><a href="#シェルとは何か？" class="headerlink" title="シェルとは何か？"></a>シェルとは何か？</h1><ul><li>どんなソフトウェアを思い浮かべますか？<ul><li>bash、zsh、fish、黒い怖い画面（コマンドプロンプト）、PowerShell</li></ul></li><li>WindowsのGUI（Explorer.exe）もシェルと呼ばれることもある<ul><li>キオスクモードだと、そこで起動されるアプリケーションも<a href="https://docs.microsoft.com/ja-jp/windows/configuration/kiosk-shelllauncher">シェル</a></li></ul></li><li>PythonやNode.js、Rubyのirbなど、多くのプログラミング言語が備えるREPL（Read-Eval-Print Loop）画面もシェルと呼ばれることもある<ul><li>→Interactive Shell</li></ul></li></ul><p>もともとの意味は人間とコンピュータの境界となるソフトウェアという意味なので、幅広いソフトウェアがシェルと呼ばれます。</p><h1 id="より狭い意味で使われるシェル＝コマンドシェル"><a href="#より狭い意味で使われるシェル＝コマンドシェル" class="headerlink" title="より狭い意味で使われるシェル＝コマンドシェル"></a>より狭い意味で使われるシェル＝コマンドシェル</h1><p>「外部コマンド実行でシェルを利用する」、「シェルを/bin/falseにして、ログインできないシステムユーザーを作る」などの文脈で使われる、開発者がよく目にするCUIのプログラムランチャーがコマンドシェルです。</p><p>いわゆる黒い画面でファイル操作をしたりプログラムを起動したりするソフトウェア（bashとかzsh）。</p><p>Unix系のシェルではファイル管理のコマンド群は外部の独立したコマンドであるが、MS-DOSのcommand.comは内部コマンドでそのような機能も持っています。</p><p>いわゆる「黒い画面」はターミナルエミュレータと呼ばれる別のソフトウェアで、シェルに対してキーボードの入力や画面（文字描画）を提供するものです。「人とソフトウェアの境界」というと、こちらの方がシェルなのでは、という気がしないでもないですが、昔はここは専用のハードウェア(vt100とか)だったこともあり、「本来はハードウェアだが、ソフトウェアでエミュレーションしている」という扱いです。</p><h1 id="もっと狭い定義のシェル-POSIXシェル"><a href="#もっと狭い定義のシェル-POSIXシェル" class="headerlink" title="もっと狭い定義のシェル=POSIXシェル"></a>もっと狭い定義のシェル=POSIXシェル</h1><p><a href="https://pubs.opengroup.org/onlinepubs/9699919799/">Single UNIX Specification</a>(SUS)とも呼ばれる、UNIXを名乗るために必要な規格があります。</p><ul><li>標準準拠のシステムで提供されるべきC言語のヘッダーファイルの一覧</li><li>シェルのコマンド（ユーティリティ）および、シェルの言語仕様</li><li>OSとのやりとりに利用するシステムコールやライブラリ関数の定義</li></ul><p>シェルは人間の入力で動かすものではありますが、この規格の中には、コマンド実行文をテキストファイルに並べて、連続実行するシェルスクリプトやその文法（制御構文など）も定義されています。「シェルスクリプト」と呼ばれるときの「シェル」はこちらです。</p><p>bash/zshなどは「互換シェル」ではあるが、大きく拡張している部分もあれば、非互換なところもあります。</p><p>だいたい、いままで紹介してきたものを並べると以下のような感じになるでしょう。</p><img src="/images/20211118a/スクリーンショット_2021-11-13_16.10.13.png" alt="スクリーンショット_2021-11-13_16.10.13.png" width="1200" height="635" loading="lazy"><p>このエントリーでは主にコマンドシェルとPOSIXシェルについて紹介します。</p><h1 id="コマンドシェルがコマンドを実行するまで"><a href="#コマンドシェルがコマンドを実行するまで" class="headerlink" title="コマンドシェルがコマンドを実行するまで"></a>コマンドシェルがコマンドを実行するまで</h1><p>だいたいこんな感じで処理されているでしょう。</p><ol><li>ユーザーが入力したテキストを取り出す</li><li>コマンドの文字列をパースして、コマンドと引数に分ける</li><li>環境変数参照があれば展開する</li><li>ファイルのワイルドカードがあれば展開する</li><li>コマンドをPATH環境変数で指定されているフォルダから探し出す</li><li>見つけたコマンドに引数を渡して実行する</li></ol><p>まずはユーザーがキーボードからコマンドを入力します。改行が入力されたらそこで1行取り込みます。</p><p>その後、文字列をパースして、コマンドと引数に分けていきます。必要に応じて（エスケープとかに注意しながら）、環境変数があれば展開します。ワイルドカード（<code>*</code>とか<code>？</code>とか)も展開します。展開されるとマッチするファイルのリストに置き換えられます。なお、Windowsのシェルはワイルドカードの展開はシェルは行わず、各プログラムが行います。</p><p>環境変数はマップのような文字列がキーで文字列を値として持つデータ構造で、親プロセスで定義したものが子プロセスに伝搬していきます。あえて子プロセス起動時にリセットしない限りは自動で伝搬していきます。プログラムやシェルスクリプトなどは固定されたままで、外部から必要な設定を差し込むことができるため、今時のクラウド系のシステムでは設定の手段としてかなり活用されています。コンテナの定義時に設定したり、クラウドへのアプリケーションのデプロイ時やインフラの構成時に環境変数が設定できるようになっています。コマンド実行ログにも表示されないため、クレデンシャルを設定する手段としても活用されています。</p><p>PATH環境変数はコロン区切り（Windows以外）、セミコロン区切りでフォルダのパスを列挙して格納します。シェルはこの <code>PATH</code>に登録されているフォルダを先頭から順番に探索して実行を再開します。</p><p>PATH環境変数にフォルダを追加して、実行したいプログラムが発見できるようにすることを「パスを通す」と呼びます。</p><p>それ以外にもいろいろな仕事をしています。</p><ul><li>パイプやリダイレクトの場合、パイプやファイルを開いてファイルディスクリプタをOSに作ってもらい、起動するプロセスに設定する</li><li>ワークフォルダをプロセスに設定する</li><li>環境変数はプロセス起動時のオプションとして設定する</li></ul><p>Goのコードを見ると、gidとかchrootの設定とか、ホストとコンテナ内のUIDとGIDのマッピングとか、プロセスをフォワードに持ってくるとか、いろいろやっていますね。</p><p><a href="https://github.com/golang/go/blob/master/src/syscall/exec_linux.go">https://github.com/golang/go/blob/master/src/syscall/exec_linux.go</a> のforkAndExecInChild1()</p><h1 id="ちょっと裏方っぽいシェルのお仕事"><a href="#ちょっと裏方っぽいシェルのお仕事" class="headerlink" title="ちょっと裏方っぽいシェルのお仕事"></a>ちょっと裏方っぽいシェルのお仕事</h1><p>自作のプログラムから外部プロセスを呼び出すには、「シェルを経由する実行」と、「シェルを経由しない実行」の2つの実行形態があります。プログラミング言語のライブラリをみると、だいたいこっそり書かれています。</p><p>シェル経由で実行の場合、コマンドライン引数の分解はシェルがやってくれるので、パラメータこみで丸ごと起動したいコマンドを単一の文字列を引数として取ります。</p><p>シェルを経由しない実行の場合、直接コマンドを実行します。引数の分解とかはしてくれないため、呼び出し側のプログラムで行う必要があります、引数を文字列の配列として渡す。ただし、コマンドをPATHからの探索はどの言語のライブラリもやってくれそう（Goも）。</p><p>C言語は標準ライブラリの<code>system()</code>はシェル経由、POSIXのunistd.hの<code>exec()</code>ファミリーはシェルを経由しない外部プロセス実行です。Pythonの<code>subprocess.run()</code>とかPHPの<code>proc_open()</code>にはシェルを経由するかどうかのフラグがあります。RubyやDockerは文字列でコマンドを渡すか、配列で渡すかでシェル経由かシェルを経由しないかの動作が変わります。</p><p>Goの<code>os/exec</code>はシェルを経由しない実行のみをサポートしています。シェル経由の実行をエミュレーションするには、次のようにします。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cmd *exec.Cmd</span><br><span class="line"><span class="keyword">if</span> runtime.GOOS == <span class="string">&quot;windows&quot;</span> &#123;</span><br><span class="line">cmd = exec.Command(<span class="string">&quot;cmd.exe&quot;</span>, <span class="string">&quot;/C&quot;</span>, <span class="string">&quot;timeout 5&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">cmd = exec.Command(os.Getenv(<span class="string">&quot;SHELL&quot;</span>), <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;sleep 5&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">cmd.Run()</span><br></pre></td></tr></table></figure><p>PATH環境変数の中のコマンドの探索は裏で自動でやってくれますし、独立した関数（<code>os/exec</code>パッケージの<code>LookPath()</code>関数)としても利用できます。</p><h1 id="コマンドシェルを作ってみよう"><a href="#コマンドシェルを作ってみよう" class="headerlink" title="コマンドシェルを作ってみよう"></a>コマンドシェルを作ってみよう</h1><p>シェルがどのような仕事をしているか説明してきました。それぞれの項目は、次のように実現できます。</p><ul><li><strong>ループでユーザーの入力を受ける</strong></li><li><strong>コマンドと引数を分解</strong></li><li><strong>環境変数を展開</strong></li><li><strong>ワイルドカードを展開</strong></li><li><strong>リダイレクトとパイプ</strong></li><li><strong>環境変数とワークフォルダを設定して実行</strong></li></ul><p>カレントディレクトリや環境変数は子プロセスに渡すものを設定できるが親プロセスの持っている状態は変更できません。シェルから子プロセスを呼び出すときにシェル側の状態を変えることはできないので、カレントディレクトリと環境変数の変更（<code>cd</code>と<code>export</code>)は「内部コマンド」として実装する必要があります。</p><h2 id="ループでユーザーの入力を受ける"><a href="#ループでユーザーの入力を受ける" class="headerlink" title="ループでユーザーの入力を受ける"></a>ループでユーザーの入力を受ける</h2><p><code>github.com/peterh/liner</code>を使いました。”tui golang”あたりでググればいろいろライブラリが出てくるのでお好きなものを選ぶと良いです。<code>fmt.Scanf</code>とかでもいいですが、コード補完とかヒストリーとかいろいろ機能があるのでこの手のライブラリの方が良いです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/peterh/liner&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">line := liner.NewLiner()</span><br><span class="line">line.SetCtrlCAborts(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">if</span> cmd, err := line.Prompt(<span class="string">&quot; &quot;</span>); err == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> cmd == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ここでコマンドを処理する</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> errors.Is(err, io.EOF) &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> err == liner.ErrPromptAborted &#123;</span><br><span class="line">log.Print(<span class="string">&quot;Aborted&quot;</span>)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">log.Print(<span class="string">&quot;Error reading line: &quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="コマンドと引数を分解"><a href="#コマンドと引数を分解" class="headerlink" title="コマンドと引数を分解"></a>コマンドと引数を分解</h2><p>コードの分解には<code>github.com/google/shlex</code>を使います。Pythonの標準ライブラリにshlexがあり、どの言語でもたいてい、同様のライブラリはこれの移植で、この名前であることが多いです。大雑把にはこんな感じで使います。自分でパースするのも良いですが、ダブルクオートのエスケープみたいなややこしいものをやってくれるので、使った方が楽ですね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/google/shlex&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parseCmd</span><span class="params">(cmdStr)</span> <span class="params">(cmd <span class="keyword">string</span>, args []<span class="keyword">string</span>, err error)</span></span> &#123;</span><br><span class="line">l := shlex.NewLexer(strings.NewReader(cmdStr))</span><br><span class="line">cmd, err = l.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ; token, err := l.Next(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">args = <span class="built_in">append</span>(args, token)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ただし、バッククオート（別のコマンドを実行して、その結果を文字列として引数などに設定する）の中をさらにパースしたり、POSIXシェルのリダイレクトやらパイプをフルサポートするために、次のような記号で文字列を複数のコマンドに分割すると言った処理は頑張る必要があります。オライリーの「Go言語でつくるインタプリタ」を読んで、ステートマシンを作る練習に最適です。</p><ul><li><code>|</code> <code>;</code> <code>||</code> <code>&amp;&amp;</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;&gt;</code> <code>2&gt;</code> <code>2&gt;&gt;</code> <code>&amp;&gt;</code> <code>&amp;&gt;&gt;</code></li></ul><h2 id="環境変数を展開"><a href="#環境変数を展開" class="headerlink" title="環境変数を展開"></a>環境変数を展開</h2><p>通常のプログラムであれば、<code>os.ExpandEnv()</code>を使えば文字列中の環境変数（<code>$&#123;ENV&#125;</code>)を環境変数の値に置き換えてくれます。しかし、これはGoのプログラムのプロセス自体が持っている環境変数をもとにしてしまいます。シェルは自分の子プロセスのための環境変数を持つものなのでこれは使えません。<code>os.ExpandEnv()</code>の低レベル版の<code>os.Expand()</code>であれば、変換するキーと値の交換を関数で指定するのでこれが使えます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> args []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">var</span> env <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span> <span class="comment">// ←ここに環境変数が入っているものとする</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, arg := <span class="keyword">range</span> origArgs &#123;</span><br><span class="line">p.Args = <span class="built_in">append</span>(p.Args, os.Expand(arg, <span class="function"><span class="keyword">func</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> env[key]</span><br><span class="line">&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ワイルドカードを展開"><a href="#ワイルドカードを展開" class="headerlink" title="ワイルドカードを展開"></a>ワイルドカードを展開</h2><p><code>path/filepath</code>か、<code>io/fs</code>の<code>Glob()</code>関数でワイルドカード(<code>*</code>, <code>?</code>, <code>[]</code>)展開ができます。シェルはマッチするファイルのリストに展開するので、引数の数が膨れることがあります。Globでマッチする前に、パスを絶対パスにしておきます。そうでないと、作業フォルダが現在のシェル自身の作業フォルダとずれている場合に、相対パスでマッチするファイルが変わってしまうので要注意です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">expandPath</span><span class="params">(dir, workDir <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> filepath.IsAbs(path) &#123;</span><br><span class="line"><span class="keyword">return</span> path</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> filepath.Join(workDir, path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">expandWildcard</span><span class="params">(arg, workDir <span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> !strings.ContainsAny(arg, <span class="string">&quot;*?[&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">string</span>&#123;arg&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">files, err := filepath.Glob(expandPath(arg, workDir))</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(files) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, ErrWildcardNoMatchError</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> files, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="リダイレクトとパイプ"><a href="#リダイレクトとパイプ" class="headerlink" title="リダイレクトとパイプ"></a>リダイレクトとパイプ</h2><p>パイプ(<code>|</code>)がコマンド列にあったら、前のコマンドの標準出力の結果を、次のコマンドの標準入力に直接流し込む指定になります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">reader, writer := io.Pipe()</span><br><span class="line">c1.Stdout = writer</span><br><span class="line">c2.Stdin = reader</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">c1.Start()</span><br><span class="line">c1.Wait()</span><br><span class="line">writer.Close()</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">c2.Start()</span><br><span class="line">c2.Wait()</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;()</span><br><span class="line">wg.Wait()</span><br></pre></td></tr></table></figure><p>標準出力のリダイレクトの場合、ファイルを開いて、標準出力につなげます。<code>&gt; FILE</code>という形式であれば上書きなので<code>O_TRUNC</code>フラグをつけます。<code>&gt;&gt; FILE</code>という形式であれば、<code>O_APPEND</code>をつけます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">flag := os.O_CREATE | os.O_WRONLY</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">append</span> &#123;</span><br><span class="line">flag += os.O_APPEND</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">flag += os.O_TRUNC</span><br><span class="line">&#125;</span><br><span class="line">f, err := os.OpenFile(p.Shell.ExpandPath(path), flag, <span class="number">0</span>o777)</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">c.Stdout = f</span><br><span class="line">c.Start()</span><br><span class="line">c.Wait()</span><br></pre></td></tr></table></figure><h2 id="環境変数とワークフォルダを設定して実行"><a href="#環境変数とワークフォルダを設定して実行" class="headerlink" title="環境変数とワークフォルダを設定して実行"></a>環境変数とワークフォルダを設定して実行</h2><p>これは通常の<code>os/exec</code>の<code>Cmd</code>構造体（<code>exec.CommandContext()</code>のレスポンス)の<code>Dir</code>と<code>Env</code>に格納してあげると、実行時に考慮されます。<code>Start()</code>を呼ぶ前に設定しましょう。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cmd.Dir = workDir</span><br><span class="line"><span class="keyword">var</span> env []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">for</span> key, value := <span class="keyword">range</span> envs &#123;</span><br><span class="line">env = <span class="built_in">append</span>(env, key + <span class="string">&quot;=&quot;</span> + value)</span><br><span class="line">&#125;</span><br><span class="line">cmd.Env = env</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>これらのコーディングの要素を駆使すればコマンドシェルが実装できるでしょう。コマンドをパースしたタイミングで、内部コマンドとして実装したコマンドがあればそれを、なければ外部コマンドの実行をするようにすることになるでしょう。内部コマンドが充実すればするほど、OS間のポータビリティもあがると思います。</p><p>一年ぐらい前に、Markdownに書かれているコード片をパースして処理する処理系作れば、Go関連のタスク実行の手段でmakeを使っている代わりが作れるのではないか、ということで、ぼちぼち調べたりしていました。Markdownなら、文芸的プログラミング的だし、きっとメンテナンス性も良いだろうと。ただし作るからにはある程度インストール系のタスクで使われるコマンドをいろいろ内部コマンドとして作り込もうとしたり、リダイレクトとかバッククオートとかいろいろ対応しなきゃ、ということで長らくのんびり作業をしておりました。</p><p>それはそうと、「シェルをどう学べばいいか」というTwitterで話題になることについて、「内部の挙動を知れば解になるだろう」ということでシェルっぽいものを作っていた知識を書き出してみたのが今回の発表です。もちろん、トップダウンで使い方から学ぶ方が良い人もいれば、今回のようにボトムアップで学んだ方がイメージがつきやすい人もいるはずで、後者の人のヒントになれば、と思っています。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/GoConference/">GoConference</category>
      
      <category domain="https://future-architect.github.io/tags/ShellScript/">ShellScript</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0/">システムプログラム</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%AB%E3%83%B3%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9/">カンファレンス</category>
      
      
      <comments>https://future-architect.github.io/articles/20211118a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JFPUGオープンセミナー2021 DX時代のプロジェクトのあり方で登壇しました</title>
      <link>https://future-architect.github.io/articles/20211117a/</link>
      <guid>https://future-architect.github.io/articles/20211117a/</guid>
      <pubDate>Tue, 16 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20211117a/top.png&quot; alt=&quot;.png&quot; width=&quot;1182&quot; height=&quot;220&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20211117a/top.png" alt=".png" width="1182" height="220" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG DXユニットの真野です。同僚の長坂さんからの紹介があり<a href="http://www.jfpug.gr.jp/app-def/S-102/wp/?page_id=2361">JFPUGオープンセミナー2021～DX時代のプロジェクトのあり方～</a> にて、「DX時代の開発と品質。アジャイルでどう品質を担保するか」というテーマにて登壇しました。</p><p>登壇枠は50分（発表45分、質疑応答5分）でして、当日はZoomにてリモートから発表させていただきました。おおよそ200名ほどの皆様の前で話させていただけて本当に貴重な機会をいただけたなと感じています。ユーザーグループ及び参加者の皆さまに感謝をしております。</p><h2 id="JFPUGとは"><a href="#JFPUGとは" class="headerlink" title="JFPUGとは"></a>JFPUGとは</h2><p><a href="http://www.jfpug.gr.jp/app-def/S-102/wp/?page_id=27">JFPUGの紹介ページ</a>から引用します。</p><p>JFPUGとはJapan Function Point User Group（日本ファンクションユーザ会）の略で、<strong>ファンクションポイント法に関して、IFPUG法の日本国内における理解と普及、その利用法の検討及びソフトウェア計測の検討を主な目的とし、これを通して会員相互の情報交換と親睦を図る</strong> ことを目的としているユーザ会です。</p><p>IFPUG法についても補足します。</p><p>IFPUGとは主に以下の特徴を持つ見積もり方法です。</p><ul><li>アプリケーションプログラムの大きさに相当する量を、プログラムの入出力とデータの集合によって表す方法のこと</li><li>ISOではFunctional Size Measurementとも呼ばれています。日本ではFP法と略すことも多いと思います</li></ul><p>興味が有る方は、<a href="https://www.ipa.go.jp/sec/publish/tn05-001.html">SEC BOOKS：ソフトウェア開発見積りガイドブック：IPA 独立行政法人 情報処理推進機構</a> にあるPDFの p81（PDF上の物理ページはp51）に説明があります。</p><h2 id="オープンセミナー「DX時代のプロジェクトのあり方」の趣旨"><a href="#オープンセミナー「DX時代のプロジェクトのあり方」の趣旨" class="headerlink" title="オープンセミナー「ＤＸ時代のプロジェクトのあり方」の趣旨"></a>オープンセミナー「ＤＸ時代のプロジェクトのあり方」の趣旨</h2><p>「DX時代のプロジェクトのあり方」と題し、ユーザー視点、開発担当視点、運用担当視点の3視点から、DX時代のプロジェクトのあり方を考えていきます。デジタル変革がプロジェクトのあり方にどのような影響をもたらすのかを、あらためて考える絶好の機会として企画されました。</p><p>私はこのうちの、開発担当視点として登壇させていただきました。実際に開発していますし、すこしテックリード/EMのようなロールも増えてきたのでちょうどよい塩梅だったと思っています。同僚の長坂さんからは <a href="https://future-architect.github.io/articles/20210804b/">Future Tech Night #13「アジャイルと品質保証を考える勉強会」 | フューチャー技術ブログ</a> で登壇した内容をアップデートして登壇したら？というお声がけでしたのでアジャイル開発中心に話しました。</p><h2 id="登壇資料"><a href="#登壇資料" class="headerlink" title="登壇資料"></a>登壇資料</h2><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vTh-lBCsGgGrv1RbHIW5IswYUAUspM7O9cpadSV8eDkZ_s7J6aiWCI0kx7Xnb526ABxeCbbCkL2UhLl/embed?start=false&loop=false&delayms=3000" frameborder="0" width="95%" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><h2 id="頂いた質問"><a href="#頂いた質問" class="headerlink" title="頂いた質問"></a>頂いた質問</h2><p>お二人の方から質問をいただけました。反応をいただけて嬉しいです</p><ul><li>アジャイルの場合の契約はどうするのか？<ul><li>請負、準委任のどちらか？という意図可と思いました。DX案件でアジャイルだと準委任が適切かなと回答しました</li></ul></li><li>見積もり方法についてのコツがあるか<ul><li>プランニングポーカー（ある意味で2点見積りの一種）というアジャイルの見積もり方法を共有しました</li><li>もう少しFP法と絡めた回答をご期待されていそうな気がしますが、、こちらは私も手探りなところがあります<ul><li>あまり見積もりをしっかりしようとすると、見積もり詳細設計バックログを作りたくなるので痛し痒し</li></ul></li></ul></li></ul><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>普段はconnpassで募集されているようなGo言語などのコミュニティベースの勉強会に参加することが多いですが、こういった少しソフトウェア工学よりの勉強会への参加は久しぶりで、他の登壇者の方の発表も含めて刺激をもらいました。</p><p>FP法のような科学的手法もうまく組み合わせて、自分自身の開発手法もアップデートしたいと思います。例えばプランニングポーカーで算出したベロシティと、FP法で算出した値を比較し、相関についてや見積もりについての妥当性があるかなどは実験しても面白いなと感じています。</p><p>関係者みなさま、ありがとうございました！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DevOps/">DevOps</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB/">アジャイル</category>
      
      <category domain="https://future-architect.github.io/tags/JFPUG/">JFPUG</category>
      
      
      <comments>https://future-architect.github.io/articles/20211117a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go言語によるCFB8暗号化</title>
      <link>https://future-architect.github.io/articles/20211116a/</link>
      <guid>https://future-architect.github.io/articles/20211116a/</guid>
      <pubDate>Mon, 15 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20211116a/cfb.png&quot; alt=&quot;&quot; width=&quot;798&quot; height=&quot;420&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20211116a/cfb.png" alt="" width="798" height="420"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。2020年1月にキャリア入社した、TIGの八巻です。今年初めて、プロジェクトでGo言語に触れました。Go言語初心者です。</p><p>プロジェクトで利用したデータ取得のAPIで、リクエストパラメータを暗号化利用モード「CFB8」で暗号化する必要がありました。この暗号化利用モード「CFB8」をGo言語で実装する際に躓いたため、実装内容を備忘として記載したいと思います。</p><h1 id="目次"><a href="#目次" class="headerlink" title="目次"></a>目次</h1><ul><li>CFB暗号化利用モードについて</li><li>Go言語での実装</li><li>まとめ</li></ul><h1 id="CFB暗号化利用モードについて"><a href="#CFB暗号化利用モードについて" class="headerlink" title="CFB暗号化利用モードについて"></a>CFB暗号化利用モードについて</h1><p>まず、暗号利用モードとは、ブロック暗号を繰り返し利用することで、一定のブロック長よりも長いメッセージを暗号化するメカニズムのことで、CFB(Cipher Feedback Mode)もその一つです。CFBの他に、ECB、CBC、OFBなどの暗号化利用モードがありますが、これらは、FIPS(Federal Information Processing Standards)で標準化されています。</p><p>※<a href="https://csrc.nist.gov/csrc/media/publications/fips/81/archive/1980-12-02/documents/fips81.pdf">FIPS PUB-81</a></p><p>CFBモードは、1つ前の暗号文ブロックを暗号化アルゴリズムの入力に戻し、次の平文ブロックとのXORを取って暗号ブロックとして出力します。最初の暗号文ブロックを作る時は、１つ前の暗号文ブロックが存在しないため、初期ベクトル(iv)と呼ばれるランダムなビット列を使用します。この暗号ブロックを入力に戻すのがCFBモードの特徴です。</p><h1 id="Go言語での実装"><a href="#Go言語での実装" class="headerlink" title="Go言語での実装"></a>Go言語での実装</h1><h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><p>本記事では以下の環境で行いました。<br>OS： macOS Big Sur 11.4<br>Go：1.17</p><h3 id="Go言語でのCFB8のブロック暗号化"><a href="#Go言語でのCFB8のブロック暗号化" class="headerlink" title="Go言語でのCFB8のブロック暗号化"></a>Go言語でのCFB8のブロック暗号化</h3><p>Goの「crypto/cipher」パッケージに記載されている<a href="https://pkg.go.dev/crypto/cipher#example-NewCFBEncrypter">サンプルコード</a>では、CFB8の暗号文を得られなかったのが、プロジェクトでの躓きポイントでした。CFB8では、セグメントサイズが8ビットとなるようですが、Goの「crypto/cipher」パッケージにあるサンプルのままでは対応していないらしく、手を加える必要がありました。</p><p>※ここで言うセグメントサイズは、暗号文と平文をXORで結合するビット数のことを指します。<br>(この辺り、もう少し深く理解したい。)</p><p>CFB8での実装例は以下となります。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;crypto/aes&quot;</span></span><br><span class="line">  <span class="string">&quot;crypto/cipher&quot;</span></span><br><span class="line">  <span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">  <span class="string">&quot;io&quot;</span></span><br><span class="line">  <span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> cfb8 <span class="keyword">struct</span> &#123;</span><br><span class="line">  b         cipher.Block</span><br><span class="line">  blockSize <span class="keyword">int</span></span><br><span class="line">  in        []<span class="keyword">byte</span></span><br><span class="line">  out       []<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line">  decrypt <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plaintext <span class="keyword">string</span> = <span class="string">&quot;平文の文字列&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  key := []<span class="keyword">byte</span>(<span class="string">&quot;0123456789ABCDEF&quot;</span>)</span><br><span class="line">  block, err := aes.NewCipher(key)</span><br><span class="line">  <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ciphertext := <span class="built_in">make</span>([]<span class="keyword">byte</span>, aes.BlockSize+<span class="built_in">len</span>(plaintext))</span><br><span class="line">  iv := ciphertext[:aes.BlockSize]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> _, err = io.ReadFull(rand.Reader, iv); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  stream := newCFB8Encrypter(block, iv)</span><br><span class="line">  stream.XORKeyStream(ciphertext[aes.BlockSize:], []<span class="keyword">byte</span>(plaintext))</span><br><span class="line">  fmt.Printf(<span class="string">&quot;Encrypted result:%x\n&quot;</span>, plaintext)</span><br><span class="line"></span><br><span class="line">  stream = newCFB8Decrypter(block, iv)</span><br><span class="line">  stream.XORKeyStream([]<span class="keyword">byte</span>(plaintext), ciphertext[aes.BlockSize:])</span><br><span class="line">  fmt.Printf(<span class="string">&quot;Decrypted result:%s\n&quot;</span>, plaintext)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newCFB8Encrypter</span><span class="params">(block cipher.Block, iv []<span class="keyword">byte</span>)</span> <span class="title">cipher</span>.<span class="title">Stream</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> newCFB8(block, iv, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newCFB8Decrypter</span><span class="params">(block cipher.Block, iv []<span class="keyword">byte</span>)</span> <span class="title">cipher</span>.<span class="title">Stream</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> newCFB8(block, iv, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newCFB8</span><span class="params">(block cipher.Block, iv []<span class="keyword">byte</span>, decrypt <span class="keyword">bool</span>)</span> <span class="title">cipher</span>.<span class="title">Stream</span></span> &#123;</span><br><span class="line">  blockSize := block.BlockSize()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">len</span>(iv) != blockSize &#123;</span><br><span class="line">    <span class="built_in">panic</span>(<span class="string">&quot;cipher.newCFB: IV length must equal block size&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  x := &amp;cfb8&#123;</span><br><span class="line">    b:         block,</span><br><span class="line">    blockSize: blockSize,</span><br><span class="line">    out:       <span class="built_in">make</span>([]<span class="keyword">byte</span>, blockSize),</span><br><span class="line">    in:        <span class="built_in">make</span>([]<span class="keyword">byte</span>, blockSize),</span><br><span class="line">    decrypt:   decrypt,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">copy</span>(x.in, iv)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(x *cfb8)</span> <span class="title">XORKeyStream</span><span class="params">(dst, src []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">for</span> i := <span class="keyword">range</span> src &#123;</span><br><span class="line">    x.b.Encrypt(x.out, x.in)</span><br><span class="line">    <span class="built_in">copy</span>(x.in[:x.blockSize<span class="number">-1</span>], x.in[<span class="number">1</span>:])</span><br><span class="line">    <span class="keyword">if</span> x.decrypt &#123;</span><br><span class="line">      x.in[x.blockSize<span class="number">-1</span>] = src[i]</span><br><span class="line">    &#125;</span><br><span class="line">    dst[i] = src[i] ^ x.out[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> !x.decrypt &#123;</span><br><span class="line">      x.in[x.blockSize<span class="number">-1</span>] = dst[i]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>※keyは、長さは16、24、32バイトのいずれかである必要があります。ここでは便宜上「0~F」の16文字を設定しています。</p><p>参考：<a href="https://stackoverflow.com/questions/23897809/different-results-in-go-and-pycrypto-when-using-aes-cfb">https://stackoverflow.com/questions/23897809/different-results-in-go-and-pycrypto-when-using-aes-cfb</a></p><p>実行結果は、以下のようになります。</p><figure class="highlight plaintext"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Encrypted result:e5b9b3e69687e381aee69687e5ad97e58897</span><br><span class="line">Decrypted result:平文の文字列</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回は、Go言語での「CFB8」の実装について記載させていただきました。</p><p>言語やパッケージによっても、暗号化利用モードの細かい部分に違いがあることがわかりました。</p><p>ニッチな内容ではありますが、Go言語でCFB8での暗号化が必要になった方のお役にたてば幸いです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9A%97%E5%8F%B7/">暗号</category>
      
      <category domain="https://future-architect.github.io/tags/CFB/">CFB</category>
      
      
      <comments>https://future-architect.github.io/articles/20211116a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>IBM Quantum Challenge Fall 2021参加レポート</title>
      <link>https://future-architect.github.io/articles/20211115b/</link>
      <guid>https://future-architect.github.io/articles/20211115b/</guid>
      <pubDate>Sun, 14 Nov 2021 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20211115b/ibm-quantum-challenge-fall-2021-advanced.png&quot; alt=&quot;ibm-quantum-challenge-fall-2021-advanced.png&quot; width=&quot;600&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20211115b/ibm-quantum-challenge-fall-2021-advanced.png" alt="ibm-quantum-challenge-fall-2021-advanced.png" width="600" height="600"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG/DXユニット所属の宮永です。</p><p>本記事は2021年10月27日~11月5日に開催された<a href="https://ibm.co/challenge-fall-21%E3%80%80">IBM Quantum Challenge Fall 2021</a>の参加レポートです。</p><p>イベントで出題された問題は<a href="https://github.com/qiskit-community/ibm-quantum-challenge-fall-2021">GitHubリポジトリ</a>に格納されているため、参考にしてください。</p><h1 id="執筆の動機"><a href="#執筆の動機" class="headerlink" title="執筆の動機"></a>執筆の動機</h1><p>本記事の執筆の動機は多くの人にこの素晴らしいイベントを知ってもらい、参加していただきたいと思ったためです。</p><p>私自身は当イベントへの参加は前回と今回、2回の参加経験しかないですが、<a href="https://ibm.co/challenge-fall-21%E3%80%80">IBM Quantum Challenge Fall 2021</a>は前回大会に比べ、より広い層の方が取り組みやすい内容となっており、量子計算入門者でも十分に楽しめる内容となっていました。</p><p>フューチャーに多数在籍している競プロer出身の方々にも興味を持っていただけるのではないかと思い、執筆しました。<br>よろしくお願いいたします。</p><h1 id="大会の概要"><a href="#大会の概要" class="headerlink" title="大会の概要"></a>大会の概要</h1><p>大会の概要はこちらに記載されています。</p><ul><li><a href="https://www.ibm.com/blogs/think/jp-ja/fall2021-quantum-challenge-japan/">量子プログラミング・コンテスト開催 | THINK Blog Japan</a></li></ul><p>IBM Quantum ChallengeはIBM社が開発を進めている量子計算パッケージ<a href="https://qiskit.org/">Qiskit</a>を使用し、与えられた課題を解いてくハッカソン形式の大会です。全世界同時開催されており、<a href="https://ibm.co/challenge-fall-21%E3%80%80">IBM Quantum Challenge Fall 2021</a>では約1300名が10日間、頭を悩ませ、問題に挑戦しました。</p><p><a href="https://ibm.co/challenge-fall-21%E3%80%80">IBM Quantum Challenge Fall 2021</a>では「金融」、「化学」、「機械学習」、「最適化」に関する全4問の課題が出題されました。全4問の課題はチュートリアル形式になっており、参加者は与えられたヒントや参考文献をもとに問題を解いていきます。中には論文片手に解き進める問題もあり、入門者から上級者まで楽しめるようになっています。</p><p>大会終了後は参加者の解答状況によってサムネイルのようなバッチが進呈されます。こういったイベントも参加者のモチベーションになり、とても良いですね。</p><p>さらに、全4問を解き終えると最終問題として超難問が用意されています。この最終問題についてはスコアが用意されており、より良いスコアをたたき出したトップ10名は<a href="https://github.com/qiskit-community/ibm-quantum-challenge-fall-2021">イベントのリポジトリ</a>に掲載されます。</p><h1 id="問題の内容と所感"><a href="#問題の内容と所感" class="headerlink" title="問題の内容と所感"></a>問題の内容と所感</h1><p>参考までにどのような問題が出題されたのか一例を抜粋します。</p><p>以下、公式から抜粋した「最適化」の問題です。</p><blockquote><p>2つの市場<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="3.182ex" height="1.885ex" role="img" focusable="false" viewBox="0 -683 1406.6 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1003,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container> , <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="3.182ex" height="1.885ex" role="img" focusable="false" viewBox="0 -683 1406.6 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1003,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></svg></mjx-container> を考えます。時間枠は最大<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>個あり、電池は各時間枠（通常は1日）において、どちらか一方の市場で動作します。毎日が独立しているとみなされ、1日のうちの最適化は別の問題とみなします。毎朝、電池は同じレベルの電力でスタートするため、充電の問題は考慮しません。 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>個の時間枠で2つの市場が利用可能と予測するため、各時間枠<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container>（日）と各市場において、以下が既知であると仮定します：<br>日々の収益 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.669ex" xmlns="http://www.w3.org/2000/svg" width="2.307ex" height="2.492ex" role="img" focusable="false" viewBox="0 -805.6 1019.6 1101.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="TeXAtom" transform="translate(616,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(616,-295.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container> , <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.669ex" xmlns="http://www.w3.org/2000/svg" width="2.307ex" height="2.492ex" role="img" focusable="false" viewBox="0 -805.6 1019.6 1101.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="TeXAtom" transform="translate(616,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(616,-295.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></svg></mjx-container><br>電池の日々の劣化、または健康コスト（サイクル数）<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.669ex" xmlns="http://www.w3.org/2000/svg" width="1.967ex" height="2.492ex" role="img" focusable="false" viewBox="0 -805.6 869.6 1101.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="TeXAtom" transform="translate(466,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(466,-295.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container>, <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.669ex" xmlns="http://www.w3.org/2000/svg" width="1.967ex" height="2.492ex" role="img" focusable="false" viewBox="0 -805.6 869.6 1101.4"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="TeXAtom" transform="translate(466,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(466,-295.7) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></svg></mjx-container><br>私たちは、最適なスケジュールを見つけたい、つまり<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="4.971ex" height="1.952ex" role="img" focusable="false" viewBox="0 -705 2197.4 862.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(748,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1407,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></g></g></svg></mjx-container>サイクル以下のコストで寿命時間と収益を最適化したいです。ここで、<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="16.639ex" height="2.501ex" role="img" focusable="false" viewBox="0 -855.6 7354.6 1105.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(797.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(1853.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2731.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="msub" transform="translate(3260.6,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" transform="translate(605,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4170.8,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(4670.8,0)"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="TeXAtom" transform="translate(466,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(466,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(869.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msubsup" transform="translate(1314.2,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="TeXAtom" transform="translate(466,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(466,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(6854.6,0)"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g></g></g></svg></mjx-container><br>を導入します。<br>決定変数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="12.417ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5488.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="TeXAtom" transform="translate(498,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(803.3,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1247.9,0)"><path data-c="2200" d="M0 673Q0 684 7 689T20 694Q32 694 38 680T82 567L126 451H430L473 566Q483 593 494 622T512 668T519 685Q524 694 538 694Q556 692 556 674Q556 670 426 329T293 -15Q288 -22 278 -22T263 -15Q260 -11 131 328T0 673ZM414 410Q414 411 278 411T142 410L278 55L414 410Z"></path></g><g data-mml-node="mi" transform="translate(1803.9,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(2442.7,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(3387.5,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mn" transform="translate(3665.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4165.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(4610.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(5210.2,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container>を導入し、すべての取りうるベクトル、つまりスケジュール<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="14.607ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6456.4 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(742.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1798.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(2076.6,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="TeXAtom" transform="translate(498,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2978.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(3422.8,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(4761.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(5206.1,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="TeXAtom" transform="translate(498,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6178.4,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container><br>に関して、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="3.182ex" height="1.885ex" role="img" focusable="false" viewBox="0 -683 1406.6 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1003,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></mjx-container>が選択された場合は<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="5.966ex" height="1.864ex" role="img" focusable="false" viewBox="0 -666 2636.8 823.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="TeXAtom" transform="translate(498,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1081,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2136.8,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.339ex" xmlns="http://www.w3.org/2000/svg" width="3.182ex" height="1.885ex" role="img" focusable="false" viewBox="0 -683 1406.6 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="TeXAtom" transform="translate(1003,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></svg></mjx-container>が選択された場合は<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="5.966ex" height="1.864ex" role="img" focusable="false" viewBox="0 -666 2636.8 823.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="TeXAtom" transform="translate(498,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1081,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(2136.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container>とします。先ほど定式化された問題は、次のように表すことができます。<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.819ex" xmlns="http://www.w3.org/2000/svg" width="26.582ex" height="6.354ex" role="img" focusable="false" viewBox="0 -1562.5 11749.1 2808.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munder"><g data-mml-node="mrow" transform="translate(395.5,0)"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1407,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mrow" transform="translate(0,-708.3) scale(0.707)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="mo" transform="translate(465,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(1132,0)"><path data-c="7B" d="M434 -231Q434 -244 428 -250H410Q281 -250 230 -184Q225 -177 222 -172T217 -161T213 -148T211 -133T210 -111T209 -84T209 -47T209 0Q209 21 209 53Q208 142 204 153Q203 154 203 155Q189 191 153 211T82 231Q71 231 68 234T65 250T68 266T82 269Q116 269 152 289T203 345Q208 356 208 377T209 529V579Q209 634 215 656T244 698Q270 724 324 740Q361 748 377 749Q379 749 390 749T408 750H428Q434 744 434 732Q434 719 431 716Q429 713 415 713Q362 710 332 689T296 647Q291 634 291 499V417Q291 370 288 353T271 314Q240 271 184 255L170 250L184 245Q202 239 220 230T262 196T290 137Q291 131 291 1Q291 -134 296 -147Q306 -174 339 -192T415 -213Q429 -213 431 -216Q434 -219 434 -231Z"></path></g><g data-mml-node="mn" transform="translate(1632,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(2132,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(2410,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msup" transform="translate(2910,0)"><g data-mml-node="mo"><path data-c="7D" d="M65 731Q65 745 68 747T88 750Q171 750 216 725T279 670Q288 649 289 635T291 501Q292 362 293 357Q306 312 345 291T417 269Q428 269 431 266T434 250T431 234T417 231Q380 231 345 210T298 157Q293 143 292 121T291 -28V-79Q291 -134 285 -156T256 -198Q202 -250 89 -250Q71 -250 68 -247T65 -230Q65 -224 65 -223T66 -218T69 -214T77 -213Q91 -213 108 -210T146 -200T183 -177T207 -139Q208 -134 209 3L210 139Q223 196 280 230Q315 247 330 250Q305 257 280 270Q225 304 212 352L210 362L209 498Q208 635 207 640Q195 680 154 696T77 713Q68 713 67 716T65 731Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,289) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></g><g data-mml-node="mstyle" transform="translate(2936.6,0)"><g data-mml-node="munderover"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(142.5,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1139,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(509.9,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1444,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(1833,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2555.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(3555.4,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="TeXAtom" transform="translate(498,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(4358.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msubsup" transform="translate(4747.7,0)"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="TeXAtom" transform="translate(616,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(616,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(5989.5,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(6989.7,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="TeXAtom" transform="translate(498,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="msubsup" transform="translate(7793,0)"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="TeXAtom" transform="translate(616,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(616,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.819ex" xmlns="http://www.w3.org/2000/svg" width="32.395ex" height="6.354ex" role="img" focusable="false" viewBox="0 -1562.5 14318.8 2808.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(469,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(913.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1274.7,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="munderover" transform="translate(1719.3,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(142.5,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(361,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1139,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(509.9,1150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3163.3,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(3441.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(3830.3,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(4552.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msub" transform="translate(5552.8,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="TeXAtom" transform="translate(498,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(6356,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="msubsup" transform="translate(6745,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="TeXAtom" transform="translate(466,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(466,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7836.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msub" transform="translate(8837,0)"><g data-mml-node="mi"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z"></path></g><g data-mml-node="TeXAtom" transform="translate(498,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="msubsup" transform="translate(9640.3,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="TeXAtom" transform="translate(466,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(466,-247) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(10509.9,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g><g data-mml-node="mo" transform="translate(11065.6,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msub" transform="translate(12121.4,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="TeXAtom" transform="translate(748,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(878,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1407,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></g></g></svg></mjx-container></p><p>この問題は、よく知られている組み合わせ最適化の問題の1つとは思えませんが、心配する必要はありません。順番にヒントを解きながら、量子計算でこの問題を解いていきます。<br><em><a href="https://github.com/qiskit-community/ibm-quantum-challenge-fall-2021/blob/main/content/challenge-4/challenge-4-ja.ipynb">ibm-quantum-challenge-fall-2021/challenge-4-ja.ipynb at main · qiskit-community/ibm-quantum-challenge-fall-2021</a></em></p></blockquote><p>一見するとどこから手をつければよいかわからないと思います。私も問題を見たときは面食らいましたが、問題各所で丁寧に誘導がされているため指示に従ってゆけば自然と解くことのできる構成になっています。</p><p>上記は「最適化」の例ですが、「化学」分野に関しても<strong>有機EL分子のエネルギーバンドギャップの計算</strong>とややアカデミックな内容が出題テーマとなっていました。課題を解くという点に関しては高校卒業程度の化学知識を備えていれば問題なく解くことができるようになっています。</p><p>全体として、量子計算や出題テーマの専門性よりもQiskitライブラリや参考文献を紐解く力が試されていると感じました。</p><h1 id="参加するにあたって"><a href="#参加するにあたって" class="headerlink" title="参加するにあたって"></a>参加するにあたって</h1><p>問題は主催側が用意しているJupyter Notebook環境で取り組めるため、参加に必要なものはネットワークに接続されたPC1台です。</p><p>注意事項としては当イベントでは<a href="https://qiskit.org/">Qiskit</a>という量子計算パッケージを用いる必要があるため、Pythonの知識が必須です。<a href="https://qiskit.org/">公式Document</a>は一部日本語化されているため、参加への敷居は低いと思います。また、公式からは<a href="https://qiskit.org/textbook/ja/preface.html">テキストブック</a>も提供されています。</p><p>テキストブックだけではなく動画コンテンツも充実しています。動画コンテンツも日本語化されており、学習環境に悩むことはないと思います。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/P5cGeDKOIP0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe><p>IBM社から提供されている資料以外にも量子計算について学べるリソースはたくさんあります。</p><p>Microsoft社が提供している<a href="https://github.com/microsoft/QuantumKatas">Quantum Katas</a>はその1つです。こちらも線形代数の基礎から基本的な量子アルゴリズムまでJupyter Notebook環境で学習を進めることができます。</p><p>また、日本語化されたドキュメントではQunaSys社が提供している<a href="https://dojo.qulacs.org/ja/latest/">Quantum Native Dojo</a>や、東京大学が提供している講義資料<a href="https://utokyo-icepp.github.io/qc-workbook/welcome.html">量子コンピューティング・ワークブック</a>などたくさんのリソースがあります。</p><p>より専門的な内容、もっと深い量子コンピューティングの基礎研究などが気になる方は、<a href="https://www.sqei.c.u-tokyo.ac.jp/qed/">量子技術教育プログラム公式サイト</a>で提供されている基礎ノートをご覧になるとよいかもしれません。</p><h1 id="参加してみて"><a href="#参加してみて" class="headerlink" title="参加してみて"></a>参加してみて</h1><p>10日間は長いようで短かったです。</p><p>イベント期間中は<a href="qiskit.slack.com">Slack</a>でのコミュニケーションが頻繁に行われており、質問やお互いを褒めあう文化が溢れていて気持ちの良いものでした。</p><img src="/images/20211115b/quantum_challenge_slack.png" alt="quantum_challenge_slack.png" width="1200" height="211" loading="lazy"><p>私自身の実績としては全4問の課題を解き終え、サムネイルのAdvancedバッジを取得することができました。</p><img src="/images/20211115b/image.png" alt="image.png" width="1068" height="312" loading="lazy"><p>最終問題は自分には難しく、まだまだ勉強が足らないなと痛感しました。次回大会では本当の意味でCompleteを成し遂げたいです。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>少し前まではSFの世界であった量子コンピューターが自分のPC1つで学べるというのは非常に刺激的な体験です。</p><p>より多くの人にイベントの楽しさや量子計算への期待感が伝われば幸いです。機会があればまた参加レポートなどを執筆したいと思います。</p><p>最後まで読んでいただきありがとうございました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B3%E3%83%B3%E3%83%86%E3%82%B9%E3%83%88/">コンテスト</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%87%8F%E5%AD%90%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%BC/">量子コンピューター</category>
      
      <category domain="https://future-architect.github.io/tags/QuantumChallenge/">QuantumChallenge</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%8F%E3%83%83%E3%82%AB%E3%82%BD%E3%83%B3/">ハッカソン</category>
      
      
      <comments>https://future-architect.github.io/articles/20211115b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>LocalStackでS3署名付きURLを使う時に気を付けるポイント</title>
      <link>https://future-architect.github.io/articles/20211115a/</link>
      <guid>https://future-architect.github.io/articles/20211115a/</guid>
      <pubDate>Sun, 14 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20211115a/localstack-readme-header.png&quot; alt=&quot;&quot; width=&quot;675&quot; height=&quot;271&quot;&gt;

&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;AWS</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20211115a/localstack-readme-header.png" alt="" width="675" height="271"><p>TIGの伊藤真彦です。</p><p>AWS S3を利用してファイルをアップロード、ダウンロードするフロントエンドアプリケーションの実装を行ったのですが、その際ハマったポイントがいくつかあったのでまとめます。</p><h2 id="LocalStackでS3を利用する"><a href="#LocalStackでS3を利用する" class="headerlink" title="LocalStackでS3を利用する"></a>LocalStackでS3を利用する</h2><p>AWSの機能をローカル環境で模擬するツールでお馴染みのLocalStackですが、AWS S3の機能も模擬できるようになっています。</p><p><code>docker-compose.yml</code>に設定を記述して、バックエンドAPIなど諸々のコンテナ群と一緒に利用するのが今日では一般的でしょうか。</p><figure class="highlight yml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">localstack:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">localstack/localstack:0.11.3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">localstack</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">4566</span><span class="string">:4566</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DEFAULT_REGION=ap-northeast-1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVICES=s3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DATA_DIR=/tmp/localstack/data</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/Users/naoya-otani/.localstack:/tmp/localstack/</span></span><br></pre></td></tr></table></figure><p>環境変数<code>SERVICES</code>にs3が含まれていないと利用できない点にご注意ください。</p><p>localstackでS3が起用できるようになると、<code>localhost:4566</code>でS3を模擬した一連の機能が利用できるようになります。</p><p>例えば下記のコマンドでローカル環境にS3バケットを作成する事ができます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws --endpoint-url http://localhost:4566 s3api create-bucket --bucket local-test-backet --profile <span class="built_in">local</span></span><br></pre></td></tr></table></figure><p><code>--endpoint-url</code>、<code>--profile</code> といったオプションを利用する事が大事です。</p><h2 id="署名付きURLとは"><a href="#署名付きURLとは" class="headerlink" title="署名付きURLとは"></a>署名付きURLとは</h2><p>AWS S3には<a href="https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/userguide/ShareObjectPreSignedURL.html">署名付きURL</a>という機能が存在します。</p><blockquote><p>デフォルトでは、すべてのオブジェクトがプライベートです。オブジェクトの所有者のみがプライベートのオブジェクトにアクセスできます。ただし、オブジェクトの所有者はオプションで他ユーザーとオブジェクトを共有することができます。その場合は、署名付き URL を作成し、独自のセキュリティ証明書を使用して、オブジェクトをダウンロードするための期限付きの許可を相手に付与します。</p></blockquote><p>この機能により、S3のセキュリティ設定を緩めることなく、外部WEBサイトやアプリケーションからS3バケットへのアクセスが可能になります。</p><p><strong>LocalStackでも署名付きURLを利用する事は可能ですが、いくつか独自の注意点があり、見落とすと上手く動かずに苦戦する事になります。</strong></p><h2 id="署名の計算でエラーが発生する"><a href="#署名の計算でエラーが発生する" class="headerlink" title="署名の計算でエラーが発生する"></a>署名の計算でエラーが発生する</h2><p>サーバーサイドのAPIで署名付きURLを正しく払い出しているつもりでも<code>SignatureDoesNotMatch</code>というエラーが表示されることがあります。<br>これは署名付きURLが払いだすパラメータ<code>X-Amz-Signature</code>がS3が期待している内容と異なる場合に返されるエラーレスポンスです。</p><h3 id="CREDENTIALの不一致によるエラー"><a href="#CREDENTIALの不一致によるエラー" class="headerlink" title="CREDENTIALの不一致によるエラー"></a>CREDENTIALの不一致によるエラー</h3><p>署名付きURLの署名の暗号計算には、AWS CLIの設定や環境変数でお馴染みの<code>AWS_ACCESS_KEY_ID</code>、<code>AWS_SECRET_ACCESS_KEY</code>が計算材料に利用されます。</p><p>LocalStackのS3では、<code>AWS_SECRET_ACCESS_KEY</code>、<code>AWS_SECRET_ACCESS_KEY</code>が明示されていない場合、これら2種の値は<code>test</code>になります。</p><p><a href="https://github.com/localstack/awscli-local/blob/53876fbb7dcc75868402cc5593ab36db87c4c66d/bin/awslocal#L113-L119">LocalStackの実装</a>を見るとわかりやすいかもしれません。<br><code>os.environ.get</code>で環境変数を参照し、無い場合のデフォルト値は<code>test</code>になっています。</p><p>ここで気を付けなければならないのは署名付きURLの発行を行うロジックで利用するAWS SDKの<code>AWS_ACCESS_KEY_ID</code>、<code>AWS_SECRET_ACCESS_KEY</code>が一致している必要があるということです。一般的にはバックエンドAPIの実装でS3を利用するSDKを利用するケースが多いと思います。</p><p>そこで参照している<code>AWS_ACCESS_KEY_ID</code>、<code>AWS_SECRET_ACCESS_KEY</code>がLocalStackで参照しているものと一致していないと署名の計算結果が一致せずに<code>SignatureDoesNotMatch</code>エラーが発生します。</p><p>特にこだわりが無ければローカル環境での環境変数<code>AWS_ACCESS_KEY_ID</code>、<code>AWS_SECRET_ACCESS_KEY</code>、およびAWS CLIの<code>~/.aws/profile</code>で利用する<code>AWS_ACCESS_KEY_ID</code>、<code>AWS_SECRET_ACCESS_KEY</code>は<code>test</code>にしておくのが無難です。</p><p>もしくはdocker-compose.ymlに欠かさず<code>AWS_ACCESS_KEY_ID</code>、<code>AWS_SECRET_ACCESS_KEY</code>を明記しましょう。</p><figure class="highlight yml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">localstack:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">localstack/localstack:0.11.3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">localstack</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">4566</span><span class="string">:4566</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_ACCESS_KEY_ID=id</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_SECRET_ACCESS_KEY=key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DEFAULT_REGION=ap-northeast-1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVICES=s3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DATA_DIR=/tmp/localstack/data</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/Users/naoya-otani/.localstack:/tmp/localstack/</span></span><br></pre></td></tr></table></figure><p>署名付きURLは、発行するたびにS3に予約するためのアクセスを行っているわけではなく、理論上こうなるはず、という値を計算している、という仕組みです。</p><p>したがって対象のバケットが存在しなくてもURLは発行できますし、設定の違いにより誤った値を計算してURLを発行する事ができてしまいます。</p><p>上記の仕組みを覚えて置くとエラーの原因を考える際に役に立つと思います。</p><h3 id="特殊記号によるエラー"><a href="#特殊記号によるエラー" class="headerlink" title="特殊記号によるエラー"></a>特殊記号によるエラー</h3><p><code>AWS_ACCESS_KEY_ID</code>、<code>AWS_SECRET_ACCESS_KEY</code>が正常に一致していても<code>SignatureDoesNotMatch</code>エラーが起きるパターンがあります。</p><p>それは、<code>AWS_ACCESS_KEY_ID</code>、<code>AWS_SECRET_ACCESS_KEY</code>、または予約するS3のパスに特殊記号が含まれている場合です。</p><p>同様の症状に苦しむ<a href="https://github.com/aws/aws-cli/issues/602#issuecomment-648952330">issue</a>が存在しますが、2021年時点ではこの現象は解決できていません。</p><p><a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-troubleshooting.html#tshoot-signature-does-not-match">公式ドキュメント</a>にも記載されています。</p><blockquote><p>If your AWS secret key includes certain special characters, such as -, +, /, or %, some operating system variants process the string improperly and cause the secret key string to be interpreted incorrectly.<br>If you process your access keys and secret keys using other tools or scripts, such as tools that build the credentials file on a new instance as part of its creation, those tools and scripts might have their own handling of special characters that causes them to be transformed into something that AWS no longer recognizes.<br>The easy solution is to regenerate the secret key to get one that does not include the special character.</p><p>AWSシークレットキーに-、+、/、％などの特定の特殊文字が含まれている場合、一部のオペレーティングシステムバリアントは文字列を不適切に処理し、シークレットキー文字列が誤って解釈される原因になります。<br>作成の一部として新しいインスタンスにクレデンシャルファイルを作成するツールなど、他のツールまたはスクリプトを使用してアクセスキーとシークレットキーを処理する場合、それらのツールとスクリプトは、特殊文字を独自に処理する可能性があります。 AWSが認識しなくなったものに変換されました。<br>簡単な解決策は、秘密鍵を再生成して、特殊文字を含まない鍵を取得することです。</p></blockquote><p>最も不幸な例は自動で払い出された<code>AWS_ACCESS_KEY_ID</code>、<code>AWS_SECRET_ACCESS_KEY</code>にこのエラーを引き起こす値が含まれているケースです。問題のない値になるまで再発行する必要があります。</p><p>また、このエラーはアップロードしたいS3のパスに特殊記号がある場合でも同様の事象が発生します。</p><p>つまりURLでお馴染みの<a href="https://ja.wikipedia.org/wiki/%E3%83%91%E3%83%BC%E3%82%BB%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0">%エンコーディング</a>が必要な記号が対象パスに含まれている場合署名付きURLは使えなくなってしまいます。</p><p>例えば秒単位のアップロード時刻がバケットのフォルダ名に含まれている場合、<code>hh:mm:ss</code>の<code>:</code>が<code>%3A</code>に変換され署名計算が失敗します。<br>バケットのフォルダ構成の仕様変更が必要になるので結構厄介ですね。</p><h2 id="CORSの問題"><a href="#CORSの問題" class="headerlink" title="CORSの問題"></a>CORSの問題</h2><p>払い出した署名付きURLが正常に利用できるようになっても、フロントエンドアプリケーションでそのURLを利用するとお馴染みCORSエラーによってファイルのアップロードができない事があります。</p><p>詳細なURLは省略していますが下記のようなエラーがブラウザのデバッグコンソールに表示されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access to XMLHttpRequest at <span class="string">&#x27;http://localhost:4566/local-test-bucket/test.txt&#x27;</span> from origin <span class="string">&#x27;localhost&#x27;</span> has been blocked by CORS policy: Request header field access-control-allow-origin is not allowed by Access-Control-Allow-Headers <span class="keyword">in</span> preflight response.</span><br></pre></td></tr></table></figure><p>通常はS3のバケットポリシーでCORSを許可する必要がありますが、LocalStackの場合バケットポリシーを正しく設定してもこのエラーは解消されません。</p><p>LocalStackで参照する環境変数<code>EXTRA_CORS_ALLOWED_ORIGINS</code>、<code>EXTRA_CORS_ALLOWED_HEADERS</code>を適切に設定する。<br>または<code>DISABLE_CORS_CHECKS</code>を<code>1</code>にする必要があります。<br>この設定が効いていればバケットポリシーの設定は不要です。</p><figure class="highlight yml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">localstack:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">localstack/localstack:0.11.3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">localstack</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">4566</span><span class="string">:4566</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_ACCESS_KEY_ID=id</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_SECRET_ACCESS_KEY=key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DEFAULT_REGION=ap-northeast-1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVICES=s3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DATA_DIR=/tmp/localstack/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DISABLE_CORS_CHECKS=1</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/Users/naoya-otani/.localstack:/tmp/localstack/</span></span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>LocalStack<code>SignatureDoesNotMatch</code>に悩まされる</li><li>CORS設定もLocalStack独自のものがある</li></ul><p>これらは<a href="https://github.com/localstack/localstack/blob/master/README.md">LocalStackのREADME</a>をよく見ると書いてあります。</p><blockquote><p>NOTE: Please use test as Access key id and secret Access Key to make S3 presign url work. We have added presign url signature verification algorithm to validate the presign url and its expiration. You can configure credentials into the system environment using export command in the linux/Mac system. You also can add credentials in ~/.aws/credentials file directly.</p><h2 id="Security-Configurations"><a href="#Security-Configurations" class="headerlink" title="Security Configurations"></a>Security Configurations</h2><p>Please be aware that the following configurations may have severe security implications!<br>ENABLE_CONFIG_UPDATES: Whether to enable dynamic configuration updates at runtime, see here (default: 0).<br>DISABLE_CORS_CHECKS: Whether to disable all CSRF mitigations (default: 0).<br>DISABLE_CUSTOM_CORS_S3: Whether to disable CORS override by S3 (default: 0).<br>DISABLE_CUSTOM_CORS_APIGATEWAY: Whether to disable CORS override by apigateway (default: 0).<br>EXTRA_CORS_ALLOWED_ORIGINS: Comma-separated list of origins that are allowed to communicate with localstack.<br>EXTRA_CORS_ALLOWED_HEADERS: Comma-separated list of header names to be be added to Access-Control-Allow-Headers CORS header<br>EXTRA_CORS_EXPOSE_HEADERS: Comma-separated list of header names to be be added to Access-Control-Expose-Headers CORS header</p></blockquote><p>しかしLocalStack独自の癖である、という発想に至る前に一般的な方法を試そうとして時間を吸われてしまう事がよくあります。</p><p>こういうネタこそブログで発信する価値のあるものですね。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/S3/">S3</category>
      
      <category domain="https://future-architect.github.io/tags/LocalStack/">LocalStack</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%BD%B2%E5%90%8D%E4%BB%98%E3%81%8DURL/">署名付きURL</category>
      
      <category domain="https://future-architect.github.io/tags/CORS/">CORS</category>
      
      
      <comments>https://future-architect.github.io/articles/20211115a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Certified Database - Specialty合格体験記</title>
      <link>https://future-architect.github.io/articles/20211112b/</link>
      <guid>https://future-architect.github.io/articles/20211112b/</guid>
      <pubDate>Thu, 11 Nov 2021 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;TIGの伊藤真彦です。&lt;br&gt;&lt;img src=&quot;/images/20211112b/image.png&quot; alt=&quot;image.png&quot; width=&quot;512&quot; height=&quot;512&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;AWS Certified</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>TIGの伊藤真彦です。<br><img src="/images/20211112b/image.png" alt="image.png" width="512" height="512" loading="lazy"></p><p>AWS Certified Database - Specialtyに合格しました。</p><p>これにて2021年に受験できる11資格を全て制覇しました。<br>来年<a href="https://aws.amazon.com/jp/certification/coming-soon/">SAP on AWS - 専門知識</a>が登場する事が確定していますが、ひとまず完全制覇です。</p><p>全試験の振り返りや思い出話は<a href="https://qiita.com/advent-calendar/2021/future">Qiitaアドベントカレンダー</a>のネタにしようかなと思います、お楽しみに(宣伝)。</p><h1 id="AWS-Certified-Database-Specialtyとは"><a href="#AWS-Certified-Database-Specialtyとは" class="headerlink" title="AWS Certified Database - Specialtyとは"></a>AWS Certified Database - Specialtyとは</h1><p><a href="https://aws.amazon.com/jp/certification/certified-database-specialty/">AWS Certified Database - Specialty</a>はその名の通りデータベースに関するテストです。</p><blockquote><p>この資格は、組織がクラウドイニシアチブを実装するための重要なスキルを持つ人材を特定して育成するのに役立ちます。AWS Certified Database - Specialty を取得すると、最適な AWS データベースソリューションを推奨、設計、維持するための専門知識が認定されます。</p></blockquote><p>データベースに特化した試験ではありますが、基礎的な観点としては高可用性、安全性、費用対効果など各観点から考えたベストプラクティスや設計など、ソリューションアーキテクト等の基礎科目でお馴染みの傾向でした。<br>その他バックアップ、オンプレからの移行等において各サービスごとにどのような手法があるのかが微妙に異なる点をしっかり覚えていく点が重要です。<br>RDS for MySQL DBインスタンスのスナップショットをAurora MySQL DB クラスターとして復元できる点はこの試験のお陰で知りました。<br>こういった知識の引き出しが増えていくのがAWS資格試験を受けるモチベーションに繋がります。<br>少々寂しいですがデータベースエンジンレベルのパフォーマンスチューニング等はほぼ出題されません。</p><h1 id="学習方法"><a href="#学習方法" class="headerlink" title="学習方法"></a>学習方法</h1><p>私の記事では毎回出している<a href="https://aws.koiwaclub.com/">aws.koiwaclub.com</a>は、執筆段階の2021年では試験問題が鋭意製作中であり、他のスペシャリティ資格と比べると半分程度の問題量が公開されています。<br>当然これだけでは不安なので<a href="https://www.udemy.com/course/aws-certified-database-specialty-practice-exams-dbs-c01/">udemyの教材</a>を購入しました。<br>程よく出題傾向が被らず、かといってどちらもクオリティが高く良い対策になりました。</p><p>教材のおかげで6割程度は自信をもって解ける問題でした、専門知識は予習できなかった部分の体感難易度が高いのが苦しい所です。</p><p>出題傾向としては下記のような内容が出題されます。<br>当然データベースと名の付くものはほぼ全てが出題されます、Amazon Neptuneあたりは唯一の出番かもしれません。</p><h4 id="データベースの知識"><a href="#データベースの知識" class="headerlink" title="データベースの知識"></a>データベースの知識</h4><ul><li>Amazon Aurora</li><li>Amazon DocumentDB (MongoDB 互換)</li><li>Amazon DynamoDB</li><li>Amazon DynamoDB Accelerator (DAX)</li><li>Amazon ElastiCache</li><li>Amazon Neptune</li><li>Amazon Quantum Ledger Database (Amazon QLDB)</li><li>Amazon RDS</li><li>Amazon Redshift</li><li>Amazon Timestream</li></ul><h4 id="データ移行"><a href="#データ移行" class="headerlink" title="データ移行"></a>データ移行</h4><ul><li>AWS Database Migration Service (AWS DMS)</li><li>AWS DataSync</li><li>AWS Schema Conversion Tool</li><li>AWS Snow ファミリー</li></ul><h4 id="セキュリティ、コンプライアンス"><a href="#セキュリティ、コンプライアンス" class="headerlink" title="セキュリティ、コンプライアンス:"></a>セキュリティ、コンプライアンス:</h4><ul><li>AWS CloudHSM</li><li>AWS Directory Service</li><li>AWS Identity and Access Management (IAM)</li><li>AWS Key Management Service (AWS KMS)</li><li>AWS Secrets Manager</li></ul><h4 id="その他基礎知識"><a href="#その他基礎知識" class="headerlink" title="その他基礎知識"></a>その他基礎知識</h4><ul><li>Amazon Simple Notification Service (Amazon SNS)</li><li>Amazon Simple Queue Service (Amazon SQS)</li><li>Amazon EC2</li><li>Amazon Elastic Container Service (Amazon ECS)</li><li>Amazon Elastic Kubernetes Service (Amazon EKS)</li><li>Elastic Load Balancing</li><li>AWS Lambda</li><li>AWS Auto Scaling</li><li>AWS CloudFormation</li><li>AWS CloudTrail</li><li>Amazon CloudWatch</li><li>AWS Config</li><li>AWS Trusted Advisor</li><li>Amazon Elastic Block Store (Amazon EBS)</li><li>Amazon S3</li></ul><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>Data Analytics - Specialtyよりは安全な難易度でしたが、個人的な都合で勉強時間1週間で試験に臨んだ結果、少々受かるか不安な状態でした。<br>こちらも一発合格できて良かったです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/DB/">DB</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/">合格記</category>
      
      
      <comments>https://future-architect.github.io/articles/20211112b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Certified Data Analytics - Specialty合格体験記</title>
      <link>https://future-architect.github.io/articles/20211112a/</link>
      <guid>https://future-architect.github.io/articles/20211112a/</guid>
      <pubDate>Thu, 11 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;TIGの伊藤真彦です。&lt;br&gt;&lt;img src=&quot;/images/20211112a/image.png&quot; alt=&quot;image.png&quot; width=&quot;600&quot; height=&quot;600&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;先日AWS Certified</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>TIGの伊藤真彦です。<br><img src="/images/20211112a/image.png" alt="image.png" width="600" height="600" loading="lazy"></p><p>先日AWS Certified Data Analytics - Specialtyに合格しました。<br>これで持っているAWS認定資格は10個になりました。</p><h2 id="AWS-Certified-Data-Analytics-Specialtyとは"><a href="#AWS-Certified-Data-Analytics-Specialtyとは" class="headerlink" title="AWS Certified Data Analytics - Specialtyとは"></a>AWS Certified Data Analytics - Specialtyとは</h2><p><a href="https://aws.amazon.com/jp/certification/certified-data-analytics-specialty/">AWS Certified Data Analytics - Specialty</a>は文字通りデータアナリティクスに特化した試験です。</p><blockquote><p>この資格は、組織がクラウドイニシアチブを実装するための重要なスキルを持つ人材を特定して育成するのに役立ちます。AWS Certified Data Analytics – Specialty を取得すると、AWS データレイクと分析サービスを利用して、データからインサイトを得るための専門知識を認定します。</p></blockquote><p>平たく言うと、<a href="https://aws.amazon.com/jp/emr/">AmazonEMR</a>や<a href="https://aws.amazon.com/jp/glue/?whats-new-cards.sort-by=item.additionalFields.postDateTime&whats-new-cards.sort-order=desc">AWS Glue</a>といったサービスの使い方や、ネイティブのApache Spark、Hiveについての知識が問われます。</p><h2 id="学習方法"><a href="#学習方法" class="headerlink" title="学習方法"></a>学習方法</h2><p>今回も<a href="https://aws.koiwaclub.com/">aws.koiwaclub.com</a>で合格できました。</p><p>しかしこの試験に関しては情報の更新が激しい分野であることもあり、一切見覚えのない問題が多めに出題されました。具体的には2019年8月に一般公開された<a href="https://aws.amazon.com/jp/lake-formation/?whats-new-cards.sort-by=item.additionalFields.postDateTime&whats-new-cards.sort-order=desc">AWS Lake Formation</a>の情報が結構な頻度で出題されましたが、教材では取り上げられていませんでした。比較的新しい情報が既に問題に組み込まれているようです。</p><p>逆に言うとLake Formationまでキャッチアップできる教材であれば鮮度は高いという事になります。とはいえ教材のおかげで自信をもって解ける問題も10%以上は出題されました。</p><p>Amazon EMRはソリューションアーキテクトでも出題されるサービスであり、試験問題の難易度そのものも決して高くないはずですが、その上で詳細な知識、経験がないと手も足も出ない要素が多めです。どうにか合格できましたが、結果を見るまで受かった手ごたえはありませんでした。</p><p>全体感としては主に下記のカテゴリが出題されます。</p><h4 id="データ分析"><a href="#データ分析" class="headerlink" title="データ分析"></a>データ分析</h4><ul><li>AWS Lake Formation</li><li>Amazon EMR</li><li>AWS Glue</li><li>Amazon Athena</li><li>AWS Batch</li></ul><h4 id="データ収集"><a href="#データ収集" class="headerlink" title="データ収集"></a>データ収集</h4><ul><li>Amazon Kinesis</li><li>Amazon Managed Streaming for Apache Kafka<br>各ユースケースにおいてData StreamsとData Firehoseどちらが適切かを理解する事が特に重要です</li></ul><h4 id="データ活用"><a href="#データ活用" class="headerlink" title="データ活用"></a>データ活用</h4><ul><li>Amazon QuickSight</li><li>Amazon Elasticsearch Service</li></ul><h4 id="データ保管"><a href="#データ保管" class="headerlink" title="データ保管"></a>データ保管</h4><ul><li>Amazon Redshift</li><li>Amazon DynamoDB</li><li>Amazon S3</li><li>Amazon RDS</li></ul><p>こちらもどのDBが適切か、はたまたS3を活用するのが適切かが様々なケースで問われます。</p><h4 id="データ移行"><a href="#データ移行" class="headerlink" title="データ移行"></a>データ移行</h4><ul><li>AWS Database Migration Service (AWS DMS)</li><li>AWS Snowball</li></ul><h4 id="データアナリティクスにおける基礎知識"><a href="#データアナリティクスにおける基礎知識" class="headerlink" title="データアナリティクスにおける基礎知識"></a>データアナリティクスにおける基礎知識</h4><ul><li>Spark、Hive、Hadoop、HBaseなどApache製品への理解</li><li>Jupyter Notebook、Kibana、Logstashなどデータ分析で用いる各種プロダクトの理解</li><li>Parquet、ORCなどのデータ形式</li><li>GZIP、SNAPPYなどデータ圧縮形式</li></ul><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>問題文そのものは読んでいて苦痛になるようなレベルの難易度のものは控えめで油断していたのですが、いざ本番を迎えると勘で解くような問題ばかりで焦りました。<br>無事に合格できてよかったです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%AC%E3%82%A4%E3%82%AF/">データレイク</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/">合格記</category>
      
      
      <comments>https://future-architect.github.io/articles/20211112a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS GameDay Online参加レポート</title>
      <link>https://future-architect.github.io/articles/20211111a/</link>
      <guid>https://future-architect.github.io/articles/20211111a/</guid>
      <pubDate>Wed, 10 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;TIGの伊藤真彦です。先日社内の同じチームの&lt;a href=&quot;/authors/%E5%8A%A0%E8%97%A4%E5%91%A8%E5%B9%B3/&quot;&gt;加藤さん&lt;/a&gt;に誘っていただき、チームメンバーと4人でAWS GameDay</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>TIGの伊藤真彦です。先日社内の同じチームの<a href="/authors/%E5%8A%A0%E8%97%A4%E5%91%A8%E5%B9%B3/">加藤さん</a>に誘っていただき、チームメンバーと4人でAWS GameDay Inlineに参加させていただきました。今回は参加レポートを書きます。</p><h1 id="AWS-GameDay-Onlineとは"><a href="#AWS-GameDay-Onlineとは" class="headerlink" title="AWS GameDay Onlineとは"></a>AWS GameDay Onlineとは</h1><img src="/images/20211111a/image.png" alt="image.png" width="1200" height="885" loading="lazy"><p>日本語の情報としては<a href="https://aws.amazon.com/jp/blogs/psa/aws-gameday-online-apn-cup-vol2-2021/">AWS公式ブログ</a>がわかりやすいでしょうか。</p><blockquote><p>GameDayは座学や手順書ベースのハンズオンワークショップではなく、お題に沿って手順書無しで自分で考えながらシステムを構築し、障害(カオス)に対処することで、知識の定着率を高めるコンテスト要素も含んだ実戦形式のトレーニングです。</p></blockquote><p>の記載の通り、特定のテーマに則ったものではなく様々な形式のワークショップを架空の事業を運営するというシナリオで経験し、また競い合うイベントです。</p><p>2020年の第1回、2021年の第2回はUnicorn.Rental社という、その名の通りユニコーンレンタル市場のスタートアップ企業に参画し、様々なシステムを構築し、安定稼働、高収益を目指すというシナリオで開催されました。</p><p>サポートはされるものの、基本的には簡単なREADMEを読んで何をするべきかを理解し、作業を自主的に行う必要があるため参加障壁は若干高めですが、一般的なハンズオン複数回分の経験値を一日で獲得できるというお得なイベントになっています。</p><h1 id="学べる事"><a href="#学べる事" class="headerlink" title="学べる事"></a>学べる事</h1><p>ChromeもしくはFirefoxの最新版がインストールされたPCだけあれば特別な設備は不要です。</p><p>基本的にはAWSマネジメントコンソールを用いたシステム構築のノウハウを学ぶことができます、sshでのアクセスも可能でした。<br>次回以降も公平にイベントを運営いただくため、詳細に語ることはできませんが基礎的なWebページのデプロイからIoT機器を用いたシステムまで幅広く学ぶことができます。</p><p>スムーズに進めることができれば、0からのシステム構築や簡易的なツールの開発を複数回経験できることになります。<br>2021年現在では1チーム4人で行います、AWSにある程度慣れている経験者最低1名と若手メンバーの構成で参加できると学びになるかなと思います。</p><p>当日の役割分担など作戦立ては自主性に任せられるので、勉強しつつ、勝ちを狙いつつといったバランス感覚はとても悩ましい所でした。</p><h1 id="もっと詳しい情報"><a href="#もっと詳しい情報" class="headerlink" title="もっと詳しい情報"></a>もっと詳しい情報</h1><p>あまり詳しい情報を出すとネタバレになるため控えさせていただいています。ぜひ次回の AWS GameDayが開催された際は皆様ご参加してみてください！</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p><a href="https://aws.amazon.com/jp/blogs/psa/aws-gameday-online-apn-vol-2-2021/">結果発表</a>にある通り今回は入賞する事ができず、悔しい結果となってしまいましたが、学習できる経験値の量としては大きな満足感を得ることができました。</p><p>AWSのすべてのシステムを把握しきることは難しく、この日に初めて触れるようなサービスもありました。</p><p>それらを有識者のサポート無しで動かすのは難しい所もありましたが、メンバー4人とも良い経験になったと感じています。<br>また来年も参加したいと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%8F%82%E6%88%A6%E8%A8%98/">参戦記</category>
      
      <category domain="https://future-architect.github.io/tags/AWSGameDay/">AWSGameDay</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B3%E3%83%B3%E3%83%86%E3%82%B9%E3%83%88/">コンテスト</category>
      
      <category domain="https://future-architect.github.io/tags/DevOps/">DevOps</category>
      
      
      <comments>https://future-architect.github.io/articles/20211111a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Auth0アカウントでShopifyにSSOする</title>
      <link>https://future-architect.github.io/articles/20211110a/</link>
      <guid>https://future-architect.github.io/articles/20211110a/</guid>
      <pubDate>Tue, 09 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20211110a/サムネイル.png&quot; alt=&quot;サムネイル.png&quot; width=&quot;462&quot; height=&quot;288&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20211110a/サムネイル.png" alt="サムネイル.png" width="462" height="288" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。2021年4月新卒入社、TIGの武田です。入社して早半年、最近開発の面白さに気付かされ、巷の<a href="https://www.salarymanz.com/entry/se-aruaru">エンジニアあるある</a>にも3割くらい共感できるようになりました。</p><p>私が参画した案件で、Auth0に登録されているエンドユーザ向けのアカウントを用いてShopifyにSSOする検証を行ったので、今回はその方法をご紹介します。</p><h2 id="SSOとは？"><a href="#SSOとは？" class="headerlink" title="SSOとは？"></a>SSOとは？</h2><p><strong>一度のユーザ認証</strong>を行うと、以後そのユーザ認証に紐づけられているサービスを、追加の認証なしで利用できる機能です。<br>これにより、<strong>ユーザはパスワードの記憶や管理の負担が減り、システム管理者はセキュリティ上の弱点を削減すること</strong>ができます。</p><h2 id="Auth0とは？"><a href="#Auth0とは？" class="headerlink" title="Auth0とは？"></a>Auth0とは？</h2><p><a href="/articles/20200122/">Auth0導入編</a>をご参照ください。他にも<a href="/tags/Auth0/">Auth0関連の記事</a>があります。</p><h2 id="Shopifyとは？"><a href="#Shopifyとは？" class="headerlink" title="Shopifyとは？"></a>Shopifyとは？</h2><p>本格的なネットショップが開設できるECプラットフォームで、世界NO. 1のシェアを誇っています。詳しくは<a href="https://www.shopify.jp/online/ecommerce-solutions">公式サイト</a>をご覧ください。</p><h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><p>実環境でSSO機能を利用するためには、ShopifyPlusのサブスクリプションが必要となります。また、Shopifyには無料の開発者向けの環境が用意されており、様々な機能をテストすることができます。今回は、開発者用ストアを使ってSSOを実装していきます。</p><p>Auth0のアカウントも必要になります。こちらも無料のものが提供されているので、今回はそちらを使います。</p><h1 id="サンプル実装"><a href="#サンプル実装" class="headerlink" title="サンプル実装"></a>サンプル実装</h1><p>マルチパスを利用して、Auth0アカウントでShopifyにSSOできるよう実装していきます。</p><p><strong>目次</strong></p><p><a href="https://future-architect.github.io/articles/20211110a/#Shopify%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%81%A7%E3%83%9E%E3%83%AB%E3%83%81%E3%83%91%E3%82%B9%E3%82%92%E6%9C%89%E5%8A%B9%E3%81%AB%E3%81%99%E3%82%8B">1. Shopifyアカウントでマルチパスを有効にする</a></p><p><a href="https://future-architect.github.io/articles/20211110a/#Auth0%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E6%88%90%E3%81%97%E3%80%81URI%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B">2. Auth0アプリケーションを作成し、URIを設定する</a></p><p><a href="https://future-architect.github.io/articles/20211110a/#Auth0%E3%83%AB%E3%83%BC%E3%83%AB%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%A6%E3%80%81%E3%83%9E%E3%83%AB%E3%83%81%E3%83%91%E3%82%B9%E3%83%88%E3%83%BC%E3%82%AF%E3%83%B3%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B">3. Auth0ルールを追加して、マルチパストークンを作成する</a></p><p><a href="https://future-architect.github.io/articles/20211110a/#Shopify%E3%83%86%E3%83%BC%E3%83%9E%E3%81%ABAuth0%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B">4. ShopifyテーマにAuth0リンクを設定する</a></p><h2 id="Shopifyアカウントでマルチパスを有効にする"><a href="#Shopifyアカウントでマルチパスを有効にする" class="headerlink" title="Shopifyアカウントでマルチパスを有効にする"></a>Shopifyアカウントでマルチパスを有効にする</h2><p>Shopifyストアにログインし、 <code>設定</code>に移動して <code>チェックアウト</code>ウィンドウをクリックします。顧客アカウントを、任意または必須に設定することで、ストアでマルチパスを有効にできます。</p><img src="/images/20211110a/技術ブログ①.png" alt="技術ブログ①.png" width="908" height="512" loading="lazy"><p>このシークレットキーはマルチパスリクエストが正当であることを確認するための暗号を作成するために使用されます。シークレットキーを再発行したい場合、マルチパスを無効にしてから再度有効にすることで、新たなシークレットキーが生成され、以前のものは無効化されます。（上記画像のシークレットキーは既に無効化済みです。）</p><h2 id="Auth0アプリケーションを作成し、URIを設定する"><a href="#Auth0アプリケーションを作成し、URIを設定する" class="headerlink" title="Auth0アプリケーションを作成し、URIを設定する"></a>Auth0アプリケーションを作成し、URIを設定する</h2><p>Auth0ダッシュボード内で<code>Applications</code>に移動し、<code>Create Application</code>をクリックして適当な名前を付け（「Shopify Store」など）、<code>Regular Web Applications</code>を選択し、<code>CREATE</code>します。<br><img src="/images/20211110a/技術ブログ②.png" alt="技術ブログ②.png" width="782" height="689" loading="lazy"></p><p><code>Settings</code>に移動します。</p><p>Application URIsを以下のように設定します。<br>{shopify-domain}は自身のストアのドメインに置き換える必要があります。（例：sample-store.myshopify.com）</p><ul><li><strong>Application Login URI</strong>：https://{shopify-domain}/account/login</li><li><strong>Allowed Callback URLs</strong>：https://{shopify-domain}/account</li><li><strong>Allowed Logout URLs</strong>：https://{shopify-domain}/account/logout<img src="/images/20211110a/技術ブログ④.png" alt="技術ブログ④.png" width="976" height="755" loading="lazy"></li></ul><p><code>Advanced Settings</code>セクションを展開し、Application Metadataに次の2つのKeyとValueのペアを追加します。</p><ul><li><strong>Key</strong>：shopify_domain ; <strong>Value</strong>：{shopify-domain}</li><li><strong>Key</strong>：shopify_multipass_secret ; <strong>Value</strong>：{multipass-secret}<img src="/images/20211110a/技術ブログ③.png" alt="技術ブログ③.png" width="969" height="648" loading="lazy"></li></ul><h2 id="Auth0ルールを追加して、マルチパストークンを作成する"><a href="#Auth0ルールを追加して、マルチパストークンを作成する" class="headerlink" title="Auth0ルールを追加して、マルチパストークンを作成する"></a>Auth0ルールを追加して、マルチパストークンを作成する</h2><p>Auth0ダッシュボードの<code>Auth Pipeline</code>の<code>Rules</code>に移動して、<code>Create</code>を選択、templateは<code>Empty rule</code>を選択します。<br>わかりやすい名前（「ShopifyMultipass」など）を付け、次のコードを貼り付けます。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params">user, context, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (context.clientMetadata &amp;&amp; context.clientMetadata.shopify_domain &amp;&amp; context.clientMetadata.shopify_multipass_secret)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">const</span> RULE_NAME = <span class="string">&#x27;shopify-multipasstoken&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> CLIENTNAME = context.clientName;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;RULE_NAME&#125;</span> started by <span class="subst">$&#123;CLIENTNAME&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> now = (<span class="keyword">new</span> <span class="built_in">Date</span>()).toISOString();</span><br><span class="line">    <span class="keyword">let</span> shopifyToken = &#123;</span><br><span class="line">      <span class="attr">email</span>: user.email,</span><br><span class="line">      <span class="attr">created_at</span>: now,</span><br><span class="line">      <span class="attr">identifier</span>: user.user_id,</span><br><span class="line">      <span class="attr">remote_ip</span>: context.request.ip</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (context.request &amp;&amp; context.request.query &amp;&amp; context.request.query.return_to)&#123;</span><br><span class="line">      shopifyToken.return_to = context.request.query.return_to;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> hash = crypto.createHash(<span class="string">&quot;sha256&quot;</span>).update(context.clientMetadata.shopify_multipass_secret).digest();</span><br><span class="line">    <span class="keyword">const</span> encryptionKey = hash.slice(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">const</span> signingKey = hash.slice(<span class="number">16</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> iv = crypto.randomBytes(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">const</span> cipher = crypto.createCipheriv(<span class="string">&#x27;aes-128-cbc&#x27;</span>, encryptionKey, iv);</span><br><span class="line">    <span class="keyword">const</span> cipherText = Buffer.concat([iv, cipher.update(<span class="built_in">JSON</span>.stringify(shopifyToken), <span class="string">&#x27;utf8&#x27;</span>), cipher.final()]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> signed = crypto.createHmac(<span class="string">&quot;SHA256&quot;</span>, signingKey).update(cipherText).digest();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> token = Buffer.concat([cipherText, signed]).toString(<span class="string">&#x27;base64&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> urlToken = token.replace(<span class="regexp">/\+/g</span>, <span class="string">&#x27;-&#x27;</span>).replace(<span class="regexp">/\//g</span>, <span class="string">&#x27;_&#x27;</span>);</span><br><span class="line"></span><br><span class="line">   context.redirect = &#123;</span><br><span class="line">     <span class="attr">url</span>: <span class="string">`https://<span class="subst">$&#123;context.clientMetadata.shopify_domain&#125;</span>/account/login/multipass/<span class="subst">$&#123;urlToken&#125;</span>`</span></span><br><span class="line">   &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> callback(<span class="literal">null</span>, user, context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>2行目</strong>：Auth0アプリケーションがshopify_domainとshopify_multipass_seceretのメタデータを保持しているときのみこのルールが実行されるようにします。</li><li><strong>4〜6行目</strong>：ルールが実行されていることを確認するためのロギングです。</li><li><strong>8-14行目</strong>：Shopifyには最低でもemailとcreated_atのデータが必要です。追加情報として、identifier（複数のAuth0アカウントが同じemailアドレスを持っている場合）、remote_ip（最初にログインリクエストを送信したコンピューターでのみこのマルチパスリクエストを使用できるようにする場合）を入れることができます。</li><li><strong>15〜17行目</strong>：return_toクエリ文字列に値がある場合は、これをShopifyトークンに追加します。</li><li><strong>19〜30行目</strong>：ここで実際に暗号化を行っています。GitHubの<a href="https://github.com/beaucoo/multipassify/blob/master/multipassify.js">リポジトリ</a>を参照。</li><li><strong>32〜34行目</strong>：これにより、認証されたユーザの宛先が設定されます。<br>このルールが実行されると、ユーザはShopifyストアにリダイレクトされます。このルールの後にAuth0ルールがある場合、それらは完全にスキップされてしまうため、お気をつけください。</li></ul><img src="/images/20211110a/技術ブログ⑤.png" alt="技術ブログ⑤.png" width="1059" height="856" loading="lazy"><h2 id="ShopifyテーマにAuth0リンクを設定する"><a href="#ShopifyテーマにAuth0リンクを設定する" class="headerlink" title="ShopifyテーマにAuth0リンクを設定する"></a>ShopifyテーマにAuth0リンクを設定する</h2><p>Shopifyテーマを編集してログイン/ログアウトするためのリンクを追加していきます。<br>Shopifyストアの現在のテーマの<code>コードを編集</code>をクリックします。<br><img src="/images/20211110a/技術ブログ⑥.png" alt="技術ブログ⑥.png" width="975" height="361" loading="lazy"></p><p>まずは、ログインページを編集してログインリンクを追加します。<code>Templates</code>フォルダ内の<code>customers/login.liquid</code>ファイルを開き、リンクを追加するのに適した場所を見つけます。今回は、<code>アカウント作成</code>リンクの下に以下のリンクを配置します。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; settings.auth0_login_url &#125;&#125;&quot;</span>&gt;</span>Log in with Auth0<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/images/20211110a/技術ブログ⑦.png" alt="技術ブログ⑦.png" width="878" height="753" loading="lazy"><p>次に、アカウントページを編集してログアウトリンクをAuth0のログアウトリンクに置き換えます。<code>Templates</code>フォルダ内の<code>customers/account.liquid</code>ファイルを開き、ログアウトリンクを以下のリンクに置き換えます。テーマ内の他の場所にもログアウトリンクがある場合は、それも同様に置き換える必要があります。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; settings.auth0_logout_url &#125;&#125;&quot;</span>&gt;</span>log_out<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/images/20211110a/技術ブログ⑧.png" alt="技術ブログ⑧.png" width="943" height="328" loading="lazy"><p>続いて、ユーザがログインURLとログアウトURLを貼り付けることができるようにテーマ設定を追加します。<code>Config</code>フォルダ内の<code>settings_schema.json</code>ファイルを開き、以下のスニペットを配列の最後に貼り付けます。</p><p>ここでは、「Auth0 Config」という新しい設定セクションを作成し、ログインURLとログアウトURLを入力できるようにしています。idプロパティは、上記のリンクで使用したプロパティの名前と一致させる必要があります。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Auth0 Config&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;settings&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;auth0_login_url&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Auth0 Login Url&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;info&quot;</span>: <span class="string">&quot;The full Auth0 URL to redirect the customer to for login.&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;auth0_logout_url&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;Auth0 Logout Url&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;info&quot;</span>: <span class="string">&quot;The full Auth0 URL to redirect the customer to for logout.&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/20211110a/技術ブログ⑨.png" alt="技術ブログ⑨.png" width="937" height="331" loading="lazy"><p>続いて、URLを作成していきます。<br>まずは、以下のようにログインURLを作成します。</p><p>上記で作成したAuth0アプリケーションのClient IDを取得します。</p><img src="/images/20211110a/技術ブログ⑩.png" alt="技術ブログ⑩.png" width="764" height="95" loading="lazy"><ul><li><strong>auth0-instance</strong>：Auth0ドメイン。（例：sample.jp.auth0.com）</li><li><strong>clientid</strong>：Auth0アプリケーションからの値。</li><li><strong>shopify-domain</strong>：自身のストアのドメイン。</li><li><strong>return-to-path</strong>：任意で返したいパスを設定可能。（例：ログイン後にアカウントページに遷移させたい場合は、<code>account</code>と設定。）</li></ul><p><code>https://&#123;auth0-instance&#125;/authorize?response_type=code&amp;client_id=&#123;clientid&#125;&amp;return_to=https://&#123;shopify-domain&#125;/&#123;return-to-path&#125;&amp;scope=SCOPE&amp;state=STATE</code></p><p>同様にログアウトURLも作成します。</p><ul><li><strong>auth0-instance</strong>：Auth0ドメイン。（例：sample.jp.auth0.com）</li><li><strong>clientid</strong>：Auth0アプリケーションからの値。</li><li><strong>shopify-domain</strong>：自身のストアのドメイン。</li></ul><p><code>https://&#123;auth0-instance&#125;.auth0.com/v2/logout?response_type=code&amp;client_id=&#123;clientid&#125;&amp;returnTo=https://&#123;shopify-domain&#125;/account/logout</code></p><p>テーマページに戻り、<code>カスタマイズ</code>をクリックして、画面左下に出てくる<code>テーマ設定</code>をクリック、<code>Auth0 Config</code>セクションを展開して、作成したURLを貼り付けます。</p><img src="/images/20211110a/技術ブログ⑪.png" alt="技術ブログ⑪.png" width="1166" height="763" loading="lazy"><p>以上で実装完了です！</p><h1 id="実際の画面遷移"><a href="#実際の画面遷移" class="headerlink" title="実際の画面遷移"></a>実際の画面遷移</h1><p>ログインページにて、<code>Log in with Auth0</code>をクリックする。<br><img src="/images/20211110a/技術ブログ⑫.png" alt="技術ブログ⑫.png" width="1200" height="707" loading="lazy"></p><p>上記で作ったShopify StoreというAuth0アプリケーションの認証画面が出てくるので、認証情報を入力してログインする。<br><img src="/images/20211110a/技術ブログ⑬.png" alt="技術ブログ⑬.png" width="842" height="479" loading="lazy"></p><p>ログインに成功！<br><img src="/images/20211110a/技術ブログ⑭.png" alt="技術ブログ⑭.png" width="1200" height="643" loading="lazy"></p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>最近ではSSOを利用できるサービスがかなり増えてきたなという印象ですが、実際使ってみると本当に便利ですよね。他のアプリケーションでもこのような方法でSSOを導入することができると思いますので、導入を検討する際にはこちらの記事を参考にしていただけますと幸いです。</p><p>最後まで読んでいただきありがとうございました！</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><ul><li><a href="https://rovani.net/Shopify-Auth0-Multipass/">Authenticate Shopify Customers with Auth0 – Rovani in C#</a></li><li><a href="https://thepavilion.io/t/authenticate-shopify-customers-with-auth0/4040">Authenticate Shopify Customers with Auth0 - Shopify - Pavilion</a></li><li><a href="https://shopify.dev/api/multipass">Multipass | shopify.dev</a></li><li><a href="https://github.com/beaucoo/multipassify/blob/master/multipassify.js">multipassify/multipassify.js at master · beaucoo/multipassify</a></li><li><a href="https://gist.github.com/drovani/8199b1e0ffa1976c00af6781fcb98fbf">Auth0 Rule to Generate a Multipass token and redirect the user back to the Shopify store</a></li><li><a href="https://qiita.com/djjimba/items/4946c73742728003e5f5">Shopify PlusでSSO（シングルサインオン） - Qiita</a></li><li><a href="https://plugins.miniorange.com/single-sign-on-sso-for-shopify-using-auth0-as-identity-provider">Single Sign-On (SSO) For Shopify Using Auth0 as Identity Provider</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/">認証認可</category>
      
      
      <category domain="https://future-architect.github.io/tags/Auth0/">Auth0</category>
      
      <category domain="https://future-architect.github.io/tags/SSO/">SSO</category>
      
      <category domain="https://future-architect.github.io/tags/Shopify/">Shopify</category>
      
      <category domain="https://future-architect.github.io/tags/Auth0Rules/">Auth0Rules</category>
      
      
      <comments>https://future-architect.github.io/articles/20211110a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>仮想通貨の個人ウォレットの守り方</title>
      <link>https://future-architect.github.io/articles/20211109a/</link>
      <guid>https://future-architect.github.io/articles/20211109a/</guid>
      <pubDate>Mon, 08 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;テクノロジーイノベーショングループの前川です。&lt;br&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>テクノロジーイノベーショングループの前川です。<br><a href="/articles/20211027a/">秋のブログ週間</a>連載の9日目として、今回は仮想通貨の個人ウォレットのセキュリティの考え方についてお届けします。</p><p>仮想通貨の存在は、2017年から2018年にかけてのビットコインの暴騰と暴落のニュースを経てもまだまだ「そういう金融商品がある」「取引所を介して売買ができる為替みたいな物」程度の認識でしか一般には浸透していませんでした。</p><p>ここ1，2年でDeFi（分散型金融）、NFT、GameFiなどの関連市場やエルサルバドルの法定通貨にビットコイン採用といったホットな話題が多数立ち上がり、いよいよ腰を上げて探りを入れ始めたという方も多いのではないでしょうか。（初めてこれらの単語に触れる方々の参考になるよう文末にリンクを挙げています）</p><p>様々なニュースを足掛かりに分散型金融の世界に足を踏み入れたものの、従来の金融商品の延長のように捉えて何となく運用してしまっている人が今直ぐにでも押さえておくべきポイントとして、本稿では個人でウォレットを持つ場合のセキュリティについて考え方と運用について掘り下げます。</p><p>上に挙げたような関連市場へのアクセス手段は既に導入記事が多数あるのでそちらに譲ります。本稿では技術面では深堀りせずに利用者目線で把握しておくべき表層上の特徴に注目していきます。</p><h2 id="「シードフレーズ」「秘密鍵」「アドレス」の関係"><a href="#「シードフレーズ」「秘密鍵」「アドレス」の関係" class="headerlink" title="「シードフレーズ」「秘密鍵」「アドレス」の関係"></a>「シードフレーズ」「秘密鍵」「アドレス」の関係</h2><img src="/images/20211109a/image.png" alt="image.png" width="859" height="267" loading="lazy"><p>仮想通貨のウォレットを個人で持つ場合に意識して守らなければいけない物には、資産の在り処となるアドレス、取引に最終的なGoサインを出す秘密鍵、それらを生み出す全ての根源であるシードフレーズ、が有ります。まずこの3つについて特徴とその漏洩の影響についてご紹介します。</p><p>（用法により「ウォレットをロックするためのパスワード」や「シードフレーズに更に味付けするパスフレーズ」等も出て来ますが本稿では割愛します。）</p><h3 id="アドレス"><a href="#アドレス" class="headerlink" title="アドレス"></a>アドレス</h3><p>我々が仮想通貨を扱う取引全てに現れる、「資産の在り処」です。</p><p>このアドレスと、そこに纏わる取引内容は全てインターネット上に公開されています。各ブロックチェーンネットワークのエクスプローラを使って「どのアドレスでどんな取引がされたか」を「誰が、誰のアドレスに対しても」照会が可能です。</p><p>アドレスはシードフレーズを使って、（実質的に）無尽蔵に生成できます。</p><h4 id="アドレス漏洩の影響"><a href="#アドレス漏洩の影響" class="headerlink" title="アドレス漏洩の影響"></a>アドレス漏洩の影響</h4><p>仮に現実世界であなたを知る人があなたのアドレスも知ったとすると、「あなたが仮想通貨ウォレットを通して行った全ての取引と残高が相手に丸見えになる」と考えてください。過去も未来も隠すすべは有りません。何処か専門の機関に依頼すれば消してくれる、などという仕組みは有りません。</p><p>アドレスを使って他者と仮想通貨を取引する時には、（何か取引アドレスを匿名化するサービスでも使用しない限り）相手に全ての取引と残高を覗く権利を与える行為である旨、覚悟してください。</p><p>アドレスが知られていたとしても、それだけではそのアドレスに保有されている資産を動かす事はできません。あくまで見えるだけです。</p><h3 id="秘密鍵"><a href="#秘密鍵" class="headerlink" title="秘密鍵"></a>秘密鍵</h3><p>秘密鍵は各アドレスで行われる取引を承認するための鍵です。アドレスとは1対1で紐付いており、変更する事はできません。秘密鍵が違えばその鍵が指すアドレスも違うという事になります。</p><h4 id="秘密鍵漏洩の影響"><a href="#秘密鍵漏洩の影響" class="headerlink" title="秘密鍵漏洩の影響"></a>秘密鍵漏洩の影響</h4><img src="/images/20211109a/image_2.png" alt="image.png" width="859" height="444" loading="lazy"><p>秘密鍵が盗まれると、そのアドレスを使った取引がやりたい放題になります。盗まれた後で防ぐ事は一切できません。秘密鍵が盗まれた後にできる事は、そのアドレスに紐付く全資産を一刻も早く別のアドレスに移す事だけです。</p><p>資産を別アドレスに避難させるには送金を実行するための手数料が必要になりますが、それを妨害するために攻撃者は真っ先に手数料に使える通貨を奪います。そのため、資金を対象アドレスの外、かつ対象アドレスにいつでも送金できる場所に用意しておく必要が有ります。現実にはCEX（仮想通貨の販売所／取引所事業を展開する企業のサービス）に資金を置いておく形が多いと思います。</p><p>通常は秘密鍵だけが盗まれるという事態は考え難いです。秘密鍵はシードフレーズよりも露出する機会が少なく、秘密鍵が漏れた時点でシードフレーズの方も同時に漏れている可能性の方が高いからです。</p><p>退避用のアドレスを作る際は、シードフレーズを新しく用意するところから開始してください。予め用意しておいたシードフレーズは、今回漏洩したのと同じ経路で同じように漏洩している可能性が有ります。</p><p>避難経路と手順は定期的に確認しましょう。（DEXのステーキング解除、Vaultのロック期間確認、報酬確保、NFTの所有権移動、 etc…）</p><h3 id="シードフレーズ"><a href="#シードフレーズ" class="headerlink" title="シードフレーズ"></a>シードフレーズ</h3><p>ウォレットアプリをセットアップする際「これは厳重に管理しとけ」と釘を刺されたあれです。シードフレーズは複数のアドレスと秘密鍵を生み出す根源です。シードフレーズを変更する事はできません。シードフレーズが違えばそこから生まれるアドレスも鍵も違います。</p><p>ウォレットアプリを使ってアドレスを次々と生成する事ができますが、シードフレーズが決まった時点で、そこから1番目に生成されるアドレス、2番目に生成されるアドレス…ひいては”N番目に生成されるアドレス”が全て決定しています。</p><h4 id="シードフレーズ漏洩の影響"><a href="#シードフレーズ漏洩の影響" class="headerlink" title="シードフレーズ漏洩の影響"></a>シードフレーズ漏洩の影響</h4><img src="/images/20211109a/image_3.png" alt="image.png" width="881" height="444" loading="lazy"><p>シードフレーズが盗まれるという事はそこから生まれる全アドレスの全権利を余すこと無く盗まれるという事です。盗まれた後にできる事は、そのシードフレーズから生成した全てのアドレスから全資産を一刻も早く別のシードフレーズから生成したアドレスに移す事だけです。</p><h2 id="シードフレーズと秘密鍵を死守せよ"><a href="#シードフレーズと秘密鍵を死守せよ" class="headerlink" title="シードフレーズと秘密鍵を死守せよ"></a>シードフレーズと秘密鍵を死守せよ</h2><p>さて、ここまで散々脅しましたのでシードフレーズと秘密鍵が漏れる危険性についてはご理解頂けたかと思います。</p><p>何より恐るべき事は、鍵の役割を持つこれらを後から変更するすべが一切無い点です。漏れたらもう急いで資産を逃がすしかない。では、どのようにして漏れるのか？どう防ぐのか？といった辺りに触れていきます。</p><h3 id="漏洩経路：フィッシング（SNSでの報告例：超多数！）"><a href="#漏洩経路：フィッシング（SNSでの報告例：超多数！）" class="headerlink" title="漏洩経路：フィッシング（SNSでの報告例：超多数！）"></a>漏洩経路：フィッシング（SNSでの報告例：超多数！）</h3><p>本当に被害報告が多いです。フィッシングの誘導の手口は様々です。</p><ul><li>SNSで仮想通貨関係の困りごとを呟くとリプライで寄ってきて「サポートが必要ですか？こちらのフォームに記入頂ければスタッフが対応します（→シードフレーズ記入フォームに誘導）」<br>例： <a href="https://www.bleepingcomputer.com/news/security/fake-opensea-support-staff-are-stealing-cryptowallets-and-nfts/">https://www.bleepingcomputer.com/news/security/fake-opensea-support-staff-are-stealing-cryptowallets-and-nfts/</a></li><li>Webサイトで新サービス開始を広告して「登録にはシードフレーズが入力必須」</li><li>アプリストアに偽のウォレットアプリを公開。通常のセットアップ手順と見せかけてシードフレーズを入力させる。<br>例： <a href="https://nextmoney.jp/?p=36645">https://nextmoney.jp/?p=36645</a></li></ul><p>対策としてはまず大原則も大原則、絶対の決め事として <strong>シードフレーズを何処にも入力するな！！！</strong></p><p>シードフレーズの露出が必要になる場面は通常ただ1つ、「現在使用しているシードフレーズを流用して新しいウォレットアプリ／新しい端末に乗り換えたい時」だけです。それ以外の場面では絶対にシードフレーズを入力しない、そもそも画面に表示させない、外気に触れさせない、存在を意識しない事を徹底しましょう。</p><p>ごく簡単な事の筈ですが、不思議とこれができない人が後を絶ちません。</p><p>偽ウォレットアプリ対策には、そのアプリの公開者のWebサイトにアクセスして、ブラウザのアドレスバーでドメイン名が間違っていない事を一文字ずつ確認して、そのサイトからのリンク経由でダウンロードするようにしましょう。公式サイトで見つからないからと言って検索サイトやアプリストアで検索してインストールするなどしてはいけません。公式サイトがリンクしてないならそんなアプリは存在しないのです。</p><p>フィッシング対策はブラウザが幾らかはアシストしてくれはするものの、大部分はユーザのセキュリティ意識にのみ依拠します。逆に言えば意識次第で防御できるのですから、しっかりやりましょう。</p><h3 id="漏洩経路：シードフレーズをメモした紙が紛失・盗難（SNSでの報告例：なくはない）"><a href="#漏洩経路：シードフレーズをメモした紙が紛失・盗難（SNSでの報告例：なくはない）" class="headerlink" title="漏洩経路：シードフレーズをメモした紙が紛失・盗難（SNSでの報告例：なくはない）"></a>漏洩経路：シードフレーズをメモした紙が紛失・盗難（SNSでの報告例：なくはない）</h3><p>言うに及ばず。実印や登記識別情報通知書などと一緒に厳重に管理しましょう。</p><h3 id="漏洩経路：端末のハッキング（SNSでの報告例：無し？）"><a href="#漏洩経路：端末のハッキング（SNSでの報告例：無し？）" class="headerlink" title="漏洩経路：端末のハッキング（SNSでの報告例：無し？）"></a>漏洩経路：端末のハッキング（SNSでの報告例：無し？）</h3><p>報告例を見た事は有りませんがそれもその筈、まずこの手口に遭ったと気付く事ができないので。ただ「ウォレット乗っ取られたけどシードフレーズが漏れた経路に全く心当たりが無い」というケースで一定の可能性があるのはこれだと思います。</p><p>ハッキングの手口は大きく分けて2通り。</p><ul><li>データをPCのストレージから直接盗み出す</li><li>PCの表示画面を遠隔で盗み見て、たまたまその時に画面に映っていたシードフレーズをメモしておく<ul><li>画面ではなくキー入力ログを採取されている場合も</li></ul></li></ul><p>いずれも対策としては、アンチウイルスソフトを入れておく、怪しいサイトにアクセスしない、等々。当たり前の事ですね。<br>ただ後者の手口に関しては先ほどフィッシングの項で挙げた対策も有効で、とにかくシードフレーズを露出/入力さえしなければこの手口で盗み出す事ができなくなります。</p><p>前者のこれはPCにシードフレーズを保存さえしなければ避けられるわけですが……これを実現するのが、ハードウェアウォレットと呼ばれる物です。</p><h2 id="ハードウェアウォレット"><a href="#ハードウェアウォレット" class="headerlink" title="ハードウェアウォレット"></a>ハードウェアウォレット</h2><p>ハードウェアウォレット（以下HW）は、シードフレーズとそこから生成される秘密鍵等の情報を内部に保持し、それらを容易には出力しないように制御されている装置です。具体的には下記の機能を備えています。</p><ul><li>シードフレーズを新規に生成する</li><li>既知のシードフレーズをインポートする</li><li>HWを扱う全ての操作に対しパスワードやPINコード等による認証を要求する</li><li>PC等、HWを接続した機器からのリクエストに応じて取引を承認する<ul><li>具体的に言うと「PCは実行したいトランザクションデータをHWに渡し、HWは秘密鍵で署名したトランザクションデータを返す」</li></ul></li></ul><img src="/images/20211109a/image_4.png" alt="image.png" width="942" height="397" loading="lazy"><p>重要なのは「シードフレーズと秘密鍵がHWから出てこない」という点です。</p><p>認証機能がHW本体に付いていれば、仮にPCがハッキングされていようと、できる事はせいぜいHWにリクエストを送る事だけ。HWをPCに接続してPINを入力するといった物理的な操作をクリアしない限り攻撃者は何も得られません。（「認証機能がHW本体に付いていれば」という前提は結構大事で、これがPC上のキーボードやマウス等で入力できるタイプのHWだと結局PCに接続されてさえいれば攻撃可能になってしまいます。）</p><h3 id="ハードウェアウォレット、鉄壁なのでは…"><a href="#ハードウェアウォレット、鉄壁なのでは…" class="headerlink" title="ハードウェアウォレット、鉄壁なのでは…"></a>ハードウェアウォレット、鉄壁なのでは…</h3><p>はい、守りは非常に硬いです。「ハッキング対策として言えば」。</p><p>実態として、防水・耐火・耐熱・耐衝撃といった耐久性、生体認証や接続可能機器登録といった認証の多要素性、リモートロックなど事件発生後の補償回路に関する機能がついている商品がほぼ見掛けられない上に、購入してから届くまでに4~7日かかるといった商品が多数あります。となると、どうなるか？</p><p>以下、何も考えず「HW買った！もうこれで万全だ！」と安心しきってしまった最悪のケースの想定です。</p><ul><li>手を滑らせてHWを落として／コーヒーを零して故障してしまい、シードフレーズも分からず復旧不可、資産全て失う</li><li>同上、ただしシードフレーズはメモしてあった…が、新しいHWを注文して届くまでに数日待ち</li><li>紛失／盗難被害に遭った。PINに自信が持てず一刻も早く資産を移したい。がそれが可能になるのが数日後</li></ul><p>といったリスクに晒されます。実際のところ頑丈に設定したPINなら数日で破られる心配は無用とはいえ、ボラティリティの高い通貨を扱っている場合等、このリードタイムが重い足かせになる場面は容易に想像できます。</p><p>また、紛失／盗難により人手に渡ってしまった可能性がある場合は時間を掛ければいずれPINが破られる事を想定してぼちぼち新しいシードフレーズから作ったアドレスに引っ越す作業が必要になるという点もご注意ください。</p><p>巷には「手持ちのHWを失くしても新しいHWにインポートすればまたすぐ使えますよ！」などと安易に書いている記事が非常に多いですが、それが通用するのはきちんとその為の準備と心構えがある事が前提になっている事をご承知おきください。</p><p>具体的には下記が考えられます。</p><ul><li>HWでセットアップしたシードフレーズをメモしておく</li><li>HWを2台常備しておき、片方をセットアップした時のシードフレーズを他方にインポートしておく</li><li>番外編：HWが無くても取引できるよう緊急避難的な逃げ道を確保しておく<ul><li>要は、メモしておいたシードフレーズ（とパスフレーズ）を事故発生時にはソフトウェアのウォレットにインポートしてしまう。当然、あらかじめ安全でクリーンな端末と環境を用意できる事が前提</li></ul></li></ul><p>注意点はまだあります。</p><p>「HWが壊れて画面が映らない。ボタンが反応しない。PCに接続しても応答しない」。どうしますか？自治体の指示に従ってゴミの日に……出す前にやる事があります。</p><p>水没や破損などで「実用には耐えられない」程度に壊れたとしても、技術のある人なら中のデータをサルベージできる可能性が残っています。ケースをこじ開けて中身を粉々にするか、新しいHWで新しいシードフレーズを生成しそちらに全資産を移動して元のアドレスを空にしてから廃棄しましょう。</p><h2 id="これで完璧？"><a href="#これで完璧？" class="headerlink" title="これで完璧？"></a>これで完璧？</h2><p>セキュリティに完全は有りません。特に仮想通貨の個人ウォレットは、「鍵を変える事ができない」「何か有った時に問い合わせを受けるべき責任を持つ者が存在しない」「誰も助けられない」等々、他の金融資産口座とは明らかに一線を画す危険性の高い代物です。詐欺行為も蔓延し、犯人は捕まえられず、保険商品も満足にはありません。</p><p>くれぐれもお覚悟を。若しくは失っても死なない程度の額での運用を。</p><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><h3 id="ウォレットの種類について補足"><a href="#ウォレットの種類について補足" class="headerlink" title="ウォレットの種類について補足"></a>ウォレットの種類について補足</h3><p>本文中では省きましたが、以下のようにウォレットはソフトウェアのウォレットアプリとハードウェアウォレットの他にも以下のように幾つかの種類が有ります。</p><img src="/images/20211109a/image_5.png" alt="image.png" width="792" height="302" loading="lazy"><p>※シードフレーズや秘密鍵の情報を、インターネットに接続される（され得る）領域に保存するのがホットウォレット、され得ない領域に保存するのがコールドウォレット。</p><p>「スチールウォレット」はあまり馴染みがありませんが、”steel”の名の通り金属製プレートにシードフレーズを刻印した物です。紙だと耐久性が心配と。ならいっそ庫内温度保証かつ密閉型の耐火金庫を導入した方が万が一の変形も腐食も防げるし他の貴重品も守れて良いんじゃないですかね……。</p><h3 id="シードフレーズとアドレスの成り立ちに係る技術"><a href="#シードフレーズとアドレスの成り立ちに係る技術" class="headerlink" title="シードフレーズとアドレスの成り立ちに係る技術"></a>シードフレーズとアドレスの成り立ちに係る技術</h3><p>シードフレーズ・パスフレーズ・秘密鍵・アドレスに関して更に技術面で深掘りしたい方は以下をご参照ください。</p><ul><li><a href="https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki">https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki</a></li><li><a href="https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki">https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki</a></li><li><a href="https://github.com/bitcoin/bips/blob/master/bip-0085.mediawiki">https://github.com/bitcoin/bips/blob/master/bip-0085.mediawiki</a></li></ul><h3 id="初めての方向け参考記事"><a href="#初めての方向け参考記事" class="headerlink" title="初めての方向け参考記事"></a>初めての方向け参考記事</h3><p>冒頭に挙げたキーワード自体が初耳という方に向けて、簡単にその概要と光と闇が伝わる記事を幾つかピックアップしてみました。</p><ul><li><a href="https://www.nttdata.com/jp/ja/data-insight/2021/0831/">DeFi（分散型金融）とともに描く新しい金融サービス | DATA INSIGHT | NTTデータ</a><ul><li>DeFiの特徴とその新規性、今後の可能性についてとても簡潔にまとまっています。</li></ul></li><li><a href="https://maonline.jp/articles/whats_titan_210621">1日で42億分の1に下落した仮想通貨「TITAN」とは？ - M＆A Online - M &amp; Aをもっと身近に</a><ul><li>事件の直前までは多数の参加者に「現代の夢の錬金術」と熱狂的に持ち上げられながら、犯罪や事故・天災に遭ったわけでもなくただその仕組み故に破綻して歴史的な暴落ぶりを披露したDeFiプロジェクト。皆さんは自分のウォレットに入っている通貨の価値と流通可能なボリュームの裏付けが何であるか、説明できますか？</li></ul></li><li><a href="https://jp.techcrunch.com/2021/04/26/2021-04-08-the-cult-of-cryptopunks">イーサリアムの「最古のNFTプロジェクト」CryptoPunksをめぐる驚くべき熱狂  |  TechCrunch Japan</a></li><li><a href="ttps://www.businessinsider.jp/post-241969">【NFT狂想曲】なぜ、小学3年生の夏休みの自由研究に380万円の価値がついたのか | Business Insider Japan</a></li><li><a href="https://note.com/kozo_tx/n/n21a3c2bf5bde">NFTゲーム「Axie Infinity」は破綻するのか？──”GameFiとは何か？”を考える｜KOZO Yamada｜NFTゲームの専門家｜山田耕三｜note</a><ul><li>何故今成功しているGameFiはポンジスキーム化しないのか。逆に言えば如何にポンジスキーム化しやすい（と疑われている）のかも伺える網羅的な考察です。</li></ul></li><li><a href="https://www.coindeskjapan.com/77546/">NFTゲームが生活を支える──コロナで傷むフィリピン経済の背骨 | coindesk JAPAN | コインデスク・ジャパン</a><ul><li>フィリピンではゲームの報酬で最低賃金以上の月収を叩き出し、実店舗での決済にこのゲーム内通貨を採用した例まで出ました。ちなみにその通貨の価値はこの2ヶ月間で4分の1ほどに下落しました。当のゲームプロジェクト自体は今も健在です。</li></ul></li><li><a href="https://www.bloomberg.co.jp/news/articles/2021-09-07/QZ1HM5T1UM0Y01">エルサルバドルの「実験」に世界が注目－ビットコインを法定通貨化 - Bloomberg</a></li></ul><p><a href="/articles/20211027a/">秋のブログ週間</a>連載の9日目でした。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Security/">Security</category>
      
      
      <category domain="https://future-architect.github.io/tags/FinTech/">FinTech</category>
      
      <category domain="https://future-architect.github.io/tags/%E4%BB%AE%E6%83%B3%E9%80%9A%E8%B2%A8/">仮想通貨</category>
      
      
      <comments>https://future-architect.github.io/articles/20211109a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>PlantUMLのテーマ（思わぬ展開）</title>
      <link>https://future-architect.github.io/articles/20211108a/</link>
      <guid>https://future-architect.github.io/articles/20211108a/</guid>
      <pubDate>Sun, 07 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20211108a/example_vibrant.png&quot; alt=&quot;example_vibrant.png&quot; width=&quot;641&quot; height=&quot;424&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20211108a/example_vibrant.png" alt="example_vibrant.png" width="641" height="424" loading="lazy"><p><a href="/articles/20211027a/">秋のブログ週間</a>連載の7本目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>PlantUMLで使えるテーマについてのご紹介です。</p><p>以前、<a href="/articles/20200203/">チームで機能設計するためのPlantUML標準化</a>の記事でも書かせていただきましたが、PlantUMLのデフォルトカラーって少しドライですよね。</p><img src="/images/20211108a/image.png" alt="image.png" width="253" height="448" loading="lazy"><p>色の好みは人それぞれで、あれはあれでカッコよさはありますが、複雑な図は少しでも可愛く描きたい・楽しく見たいものです。</p><p>この記事ではPlantUMLのテーマについて、いくつかのオプションを紹介していきます。「PlantUMLの色を変えてみたい！」という方は是非ご活用いただければ嬉しいです。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ul><li>PlantUMLでは、skinparamを利用して図のビジュアル各要素を定義しますが、「テーマ」はskinparamの集合体です</li><li>この記事ではテーマの作り方や、各運用方法等については触れません</li><li>この記事で紹介するオリジナルテーマはシーケンス図のために作られたものです</li></ul><h2 id="オリジナルテーマ"><a href="#オリジナルテーマ" class="headerlink" title="オリジナルテーマ"></a>オリジナルテーマ</h2><img src="/images/20211108a/image_2.png" alt="image.png" width="563" height="460" loading="lazy"><p>出典：<a href="https://future-architect.github.io/articles/20200203/">Future Tech Blog</a></p><p>以前投稿した<a href="/articles/20200203/">「チームで機能設計するためのPlantUML標準化」の記事</a>では、ユーザが自分で設定できるカラーパレットを２セット紹介しました。嬉しいことに、記事公開後、社内外問わず、沢山の方にこれらのカラーセットを活用してもらうようになりした。</p><p>その後、より多くの方に簡単に使ってもらおうと、これらのパレットをテーマ「toy」と「vibrant」として、フューチャーリポジトリに公開しました。ユーザはテーマを自分で定義する必要がなく、以下の一行をファイルに含めるだけでテーマが読み込まれます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!include https://raw.githubusercontent.com/future-architect/puml-themes/master/themes/puml-theme-toy.puml</span><br></pre></td></tr></table></figure><h3 id="toyの使用例"><a href="#toyの使用例" class="headerlink" title="toyの使用例"></a>toyの使用例</h3><figure class="highlight sql"><figcaption><span>toy_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@startuml</span></span><br><span class="line"><span class="operator">!</span>include https:<span class="operator">/</span><span class="operator">/</span>raw.githubusercontent.com<span class="operator">/</span>future<span class="operator">-</span>architect<span class="operator">/</span>puml<span class="operator">-</span>themes<span class="operator">/</span>master<span class="operator">/</span>themes<span class="operator">/</span>puml<span class="operator">-</span>theme<span class="operator">-</span>toy.puml</span><br><span class="line"></span><br><span class="line">participant Participant <span class="keyword">as</span> Foo</span><br><span class="line">note <span class="keyword">over</span> Foo: Event</span><br><span class="line">actor       Actor       <span class="keyword">as</span> Foo1</span><br><span class="line">boundary    Boundary    <span class="keyword">as</span> Foo2</span><br><span class="line">control     Control     <span class="keyword">as</span> Foo3</span><br><span class="line">entity      Entity      <span class="keyword">as</span> Foo4</span><br><span class="line">database    Database    <span class="keyword">as</span> Foo5</span><br><span class="line">collections Collections <span class="keyword">as</span> Foo6</span><br><span class="line">queue       Queue       <span class="keyword">as</span> Foo7</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo1 : <span class="keyword">To</span> actor</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo2 : <span class="keyword">To</span> boundary</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo3 : <span class="keyword">To</span> control</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo4 : <span class="keyword">To</span> entity</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo5 : <span class="keyword">To</span> database</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo6 : <span class="keyword">To</span> collections</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo7: <span class="keyword">To</span> queue</span><br><span class="line"></span><br><span class="line"><span class="variable">@enduml</span></span><br></pre></td></tr></table></figure><img src="/images/20211108a/example_toy.png" alt="example_toy.png" width="641" height="424" loading="lazy"><h3 id="vibrantの使用例"><a href="#vibrantの使用例" class="headerlink" title="vibrantの使用例"></a>vibrantの使用例</h3><figure class="highlight sql"><figcaption><span>vibrant_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@startuml</span></span><br><span class="line"><span class="operator">!</span>include https:<span class="operator">/</span><span class="operator">/</span>raw.githubusercontent.com<span class="operator">/</span>future<span class="operator">-</span>architect<span class="operator">/</span>puml<span class="operator">-</span>themes<span class="operator">/</span>master<span class="operator">/</span>themes<span class="operator">/</span>puml<span class="operator">-</span>theme<span class="operator">-</span>vibrant.puml</span><br><span class="line"></span><br><span class="line">participant Participant <span class="keyword">as</span> Foo</span><br><span class="line">note <span class="keyword">over</span> Foo: Event</span><br><span class="line">actor       Actor       <span class="keyword">as</span> Foo1</span><br><span class="line">boundary    Boundary    <span class="keyword">as</span> Foo2</span><br><span class="line">control     Control     <span class="keyword">as</span> Foo3</span><br><span class="line">entity      Entity      <span class="keyword">as</span> Foo4</span><br><span class="line">database    Database    <span class="keyword">as</span> Foo5</span><br><span class="line">collections Collections <span class="keyword">as</span> Foo6</span><br><span class="line">queue       Queue       <span class="keyword">as</span> Foo7</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo1 : <span class="keyword">To</span> actor</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo2 : <span class="keyword">To</span> boundary</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo3 : <span class="keyword">To</span> control</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo4 : <span class="keyword">To</span> entity</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo5 : <span class="keyword">To</span> database</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo6 : <span class="keyword">To</span> collections</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo7: <span class="keyword">To</span> queue</span><br><span class="line"></span><br><span class="line"><span class="variable">@enduml</span></span><br></pre></td></tr></table></figure><img src="/images/20211108a/example_vibrant_2.png" alt="example_vibrant.png" width="641" height="424" loading="lazy"><p>フューチャーリポジトリに公開されているテーマは、フューチャー社内のプロジェクトでも使われており、日々のブラッシュアップはもちろん（最近はアクセシビリティを考慮したコントラスト比やボーダーの微調整等）、外部からのコントリビューションも大歓迎です！（先日、「queueの定義がないぞ！」と<a href="https://github.com/future-architect/puml-themes/pull/5">フランスからプルリクエスト</a>が上がりました）</p><h2 id="PlantUML公式テーマ"><a href="#PlantUML公式テーマ" class="headerlink" title="PlantUML公式テーマ"></a>PlantUML公式テーマ</h2><img src="/images/20211108a/image_3.png" alt="image.png" width="1085" height="452" loading="lazy"><p>出典：<a href="https://plantuml.com/en/">PlantUML</a></p><p>そもそも、テーマ自体、PlantUMLにとっては比較的新しい概念のようです。</p><p>最近、PlantUMLはいくつかの公式テーマをコアライブラリにて提供しているようで、これらのテーマはライブラリに含まれているため、追加のインストールなし、外部接続なしで、「!theme」ディレクティブだけで使用できるようになっています。</p><p>ちなみに、現在公式で提供しているテーマはPlantUMLの<a href="https://plantuml.com/en/theme">公式ホームページ</a>で紹介されています↓</p><img src="/images/20211108a/image_4.png" alt="image.png" width="639" height="785" loading="lazy"><p>ん？</p><img src="/images/20211108a/image_5.png" alt="image.png" width="225" height="375" loading="lazy"><p>・・・</p><img src="/images/20211108a/image_6.png" alt="image.png" width="321" height="242" loading="lazy"><h2 id="フューチャーオリジナルテーマがPlantUML公式テーマに！"><a href="#フューチャーオリジナルテーマがPlantUML公式テーマに！" class="headerlink" title="フューチャーオリジナルテーマがPlantUML公式テーマに！"></a>フューチャーオリジナルテーマがPlantUML公式テーマに！</h2><p>なんと、フューチャーリポジトリで公開したテーマ「toy」と「vibrant」がPlantUMLの公式テーマとして採用されました！<br>ということで、以下のように「toy」と「vibrant」がPlantUML内部のライブラリで使えるようになっています。</p><figure class="highlight plaintext"><figcaption><span>toyテーマの利用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!theme toy</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>vibrantテーマの利用</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!theme vibrant</span><br></pre></td></tr></table></figure><p>さらに使いやすくなりました。これは嬉しいですね。</p><p>なお、今後のフューチャーレポジトリへのアップデートは公式ライブラリにも反映できるように運用していく予定ですが、多少の時差はあるので「常に最新の状態が良い」という方は「!include」でフューチャーレポジトリより読み込むのが良いかもしれません。<br>また、今後も新しいテーマを追加していきたいので、これらに関しても、もちろんフューチャーレポジトリの方で先行公開されます。</p><p>ということで、さっそく…</p><h2 id="新テーマ「mars」"><a href="#新テーマ「mars」" class="headerlink" title="新テーマ「mars」"></a>新テーマ「mars」</h2><p>「toy」と「vibrant」が公式テーマになったことを記念して、３つ目のオリジナルテーマ「mars」をフューチャーレポジトリにて公開しました。しかも、こちらもPlantUMLの次のリリースで公式テーマになる予定です！</p><h3 id="marsのサンプル"><a href="#marsのサンプル" class="headerlink" title="marsのサンプル"></a>marsのサンプル</h3><img src="/images/20211108a/example_mars.png" alt="example_mars.png" width="641" height="424" loading="lazy"><figure class="highlight sql"><figcaption><span>mars_example.pu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@startuml</span></span><br><span class="line"><span class="operator">!</span>include https:<span class="operator">/</span><span class="operator">/</span>raw.githubusercontent.com<span class="operator">/</span>future<span class="operator">-</span>architect<span class="operator">/</span>puml<span class="operator">-</span>themes<span class="operator">/</span>master<span class="operator">/</span>themes<span class="operator">/</span>puml<span class="operator">-</span>theme<span class="operator">-</span>mars.puml</span><br><span class="line"></span><br><span class="line">participant Participant <span class="keyword">as</span> Foo</span><br><span class="line">note <span class="keyword">over</span> Foo: Event</span><br><span class="line">actor       Actor       <span class="keyword">as</span> Foo1</span><br><span class="line">boundary    Boundary    <span class="keyword">as</span> Foo2</span><br><span class="line">control     Control     <span class="keyword">as</span> Foo3</span><br><span class="line">entity      Entity      <span class="keyword">as</span> Foo4</span><br><span class="line">database    Database    <span class="keyword">as</span> Foo5</span><br><span class="line">collections Collections <span class="keyword">as</span> Foo6</span><br><span class="line">queue       Queue       <span class="keyword">as</span> Foo7</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo1 : <span class="keyword">To</span> actor</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo2 : <span class="keyword">To</span> boundary</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo3 : <span class="keyword">To</span> control</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo4 : <span class="keyword">To</span> entity</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo5 : <span class="keyword">To</span> database</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo6 : <span class="keyword">To</span> collections</span><br><span class="line">Foo <span class="operator">-</span><span class="operator">&gt;</span> Foo7: <span class="keyword">To</span> queue</span><br><span class="line"></span><br><span class="line"><span class="variable">@enduml</span></span><br></pre></td></tr></table></figure><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>今後引き続きテーマを追加したり、使いやすくアップデートいきますので、ぜひご活用ください！</p><p>詳細はフューチャーのGitHubリポジトリまで：<a href="https://github.com/future-architect/puml-themes">https://github.com/future-architect/puml-themes</a></p><p><a href="/articles/20211027a/">秋のブログ週間</a>連載の7本目でした。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Design/">Design</category>
      
      
      <category domain="https://future-architect.github.io/tags/OSS/">OSS</category>
      
      <category domain="https://future-architect.github.io/tags/PlantUML/">PlantUML</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/">設計</category>
      
      
      <comments>https://future-architect.github.io/articles/20211108a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>極小LinuxマシンでSwiftを動かそうとしてみた</title>
      <link>https://future-architect.github.io/articles/20211105a/</link>
      <guid>https://future-architect.github.io/articles/20211105a/</guid>
      <pubDate>Thu, 04 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20211105a/Image_20211102_160635.jpeg&quot; alt=&quot;&quot; width=&quot;1108&quot; height=&quot;663&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20211105a/Image_20211102_160635.jpeg" alt="" width="1108" height="663" loading="lazy"><p><a href="/articles/20211027a/">秋のブログ週間</a>連載の7本目です。</p><h2 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h2><p>今回ターゲットとした極小Linuxマシンは、<a href="https://www.switch-science.com/catalog/7160/">M5Stack UnitV2</a>になります。</p><p>こちらのマシンは、ARM Cortex-A7デュアルコア1.2GHz、128MBメモリ、512MB内蔵フラッシュ、microSDスロット、Full HDカメラ、Wi-Fi、冷却ファンを搭載し、OSはLinuxがプリインストールされていますが、非常にコンパクトで1万円弱で購入することができます。</p><p><a href="https://docs.m5stack.com/en/quick_start/unitv2/jupyter_notebook">Python、Jupyter Notebookはプリインストールされている</a>ので、あえて、他の手段を試す必然性は全くないのですが、Swiftのインストールを試してみました。</p><h2 id="Swiftのインストール手順"><a href="#Swiftのインストール手順" class="headerlink" title="Swiftのインストール手順"></a>Swiftのインストール手順</h2><p>まずは、<a href="https://github.com/uraimo/buildSwiftOnARM">buildSwiftOn ARM</a>を見つけたのですが、swiftコマンドのサイズがほぼメインメモリの容量と同じ、かつ、導入時のサイズが約650MBのため、microSDをマウントしたり色々ファイルシステムをいじらないといけないので断念。</p><p>そこで、ターゲット上でビルド環境を整えるのは諦め、クロスコンパイル環境を探すことに。<br><a href="https://github.com/CSCIX65G/SwiftCrossCompilers">Swift Cross Compilation Toolchains</a>を見つけるも、<a href="https://github.com/CSCIX65G/SwiftCrossCompilers/releases/tag/5.3.3">5.3.3</a>からはARM32のサポートがなくなると。。</p><p>そもそも、Swiftは困難なようなので代わりにRustの環境を調べてみる方針へ変更。</p><p>手順は、まず、rustupを開発環境であるMacへ導入。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install rustup</span><br><span class="line">brew install arm-linux-gnueabihf-binutils</span><br></pre></td></tr></table></figure><p>ビルド時にターゲットとしてarmv7-unknown-linux-gnueabihfを指定するも、エラーでうまくいかず、<a href="https://sigmaris.info/blog/2019/02/cross-compiling-rust-on-mac-os-for-an-arm-linux-router/">ここの記述</a>を参考に、ターゲットをarmv7-unknown-linux-musleabihfへ変更することでようやくビルドがエラーなく実行できるようになりました。</p><figure class="highlight sh"><figcaption><span>.cargo/config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[target.armv7-unknown-linux-musleabihf]</span><br><span class="line">linker = <span class="string">&quot;arm-linux-gnueabihf-ld&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rustup target add armv7-unknown-linux-musleabihf</span><br><span class="line">cargo init</span><br><span class="line">cargo build --target armv7-unknown-linux-musleabihf</span><br></pre></td></tr></table></figure><p>環境は出来上がったので次回はRustでカメラを使ったアプリを組みたいと思います。</p><p><a href="/articles/20211027a/">秋のブログ週間</a>連載の7本目でした。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/IoT/">IoT</category>
      
      
      <category domain="https://future-architect.github.io/tags/Rust/">Rust</category>
      
      <category domain="https://future-architect.github.io/tags/UnitV2/">UnitV2</category>
      
      <category domain="https://future-architect.github.io/tags/M5stack/">M5stack</category>
      
      
      <comments>https://future-architect.github.io/articles/20211105a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Cheetah Grid を Reactから利用するためのラッパーを実装してみる</title>
      <link>https://future-architect.github.io/articles/20211104a/</link>
      <guid>https://future-architect.github.io/articles/20211104a/</guid>
      <pubDate>Wed, 03 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20211027a/&quot;&gt;秋のブログ週間&lt;/a&gt;連載の6本目です。&lt;/p&gt;
&lt;p&gt;Futureには&lt;a href=&quot;https://future-architect.github.io/cheetah-grid/#/&quot;&gt;Cheetah</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20211027a/">秋のブログ週間</a>連載の6本目です。</p><p>Futureには<a href="https://future-architect.github.io/cheetah-grid/#/">Cheetah Grid</a>という最速のウェブフロントエンド用のテーブルコンポーネントがあります。会社のお仕事コードは基本的にVue.jsが採用されることが多く、Cheetah GridもVue.js版のコンポーネントも提供されています。</p><p>僕はなぜかReact案件が多くて慣れていることもあり、ちょっとしたコードもReactで書きたいと思っています。ちょっとしたツールを実装する上でかっこよくて性能が良いテーブルコンポーネントも欲しいのでCheetah GridのReact版が欲しいなとずっと思っていたので、今回作ってみました。半分お仕事で半分趣味みたいなコーディングですが、趣味の素振り的な気持ちで取り組みました。本エントリーも技術要素半分、スキルアップの心構え半分な内容でお届けします。</p><p>↓CheetahGridの各種カラム形式に対応したバージョンが公開中です。</p><img src="/images/20211104a/columns.png" alt="columns.png" width="1200" height="334" loading="lazy"><h1 id="今時のフロントエンドと、巨大コンポーネントのギャップ"><a href="#今時のフロントエンドと、巨大コンポーネントのギャップ" class="headerlink" title="今時のフロントエンドと、巨大コンポーネントのギャップ"></a>今時のフロントエンドと、巨大コンポーネントのギャップ</h1><p>JavaScript界隈では、いくつかの大きなコンポーネント部品が作られてきました。主に、表コンポーネントとかリッテキストエディタコンポーネントとかです。印象としてはjQueryの部品としてリリースされたり、ピュアJSなライブラリとして開発されて、その後React/Vue/Angular対応を果たしている、みたいな感じがあります。</p><p>たいてい、このようなライブラリの生のAPIは、マウントする先のDOM要素と設定を行うための大量のJSONを食わせると、そのコンポーネントのオブジェクトが生成され、そのオブジェクトのメソッドを通じて、いろいろ操作を行ったりできるような設計がされている印象があります。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JS界隈の巨大コンポーネントライブラリのAPIのイメージ</span></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> BigComponent(<span class="built_in">document</span>.querySelector(<span class="string">&quot;#root&quot;</span>), &#123;なにやら巨大な設定<span class="built_in">JSON</span>&#125;)</span><br><span class="line"></span><br><span class="line">&lt;button onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  instance.reset();</span><br><span class="line">&#125;) &gt;リセット&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>一方で、今時のフロントエンドは、冪等なAPIを指向しており、そのようなライブラリをそのまま使おうとすると、ギャップを吸収しなければなりません。コンポーネントの形式に無理やりした結果、インスタンスへの指令もプロパティとして渡すようなライブラリを見かけたことがあります。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;BigComponent config=&#123;&#123;巨大な設定<span class="built_in">JSON</span>&#125;&#125; update=&#123;更新情報を入れる&#125; /&gt;</span><br></pre></td></tr></table></figure><p>これはコンポーネント内部で、初期値のJSONを覚えておいた上で、コンポーネント側にその差分情報を入れる必要があるということで、新旧両方の情報を管理しなければなりません。また、ウェブサイトの画面の8割を覆うような部品で複雑な設定をJSONだけでやるというのも、違和感がありました。AngularでもReactでもVueでも、それぞれの作法があるのに、その作法にのっからずに、独自の方法を無理やり使わせているような、インピーダンスミスマッチを感じました。</p><p>せっかく作るのであれば、それを乗っけるフレームワーク（ここではReact）のお作法に従ったコンポーネントを作って行こうと思います。なお、Vue.js版はきちんと、カラム定義もVueのテンプレートのお作法で定義できるようになっており、React版も同じ作戦でいきたいな、と思っていました。複雑で機能が大きい部品は、やはりソースコード上の見た目も大きくなって欲しい。</p><figure class="highlight html"><figcaption><span>vuejs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c-grid</span> <span class="attr">:data</span>=<span class="string">&quot;records&quot;</span> <span class="attr">:frozen-col-count</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">c-grid-check-column</span> <span class="attr">field</span>=<span class="string">&quot;check&quot;</span> <span class="attr">width</span>=<span class="string">&quot;50&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">c-grid-column</span> <span class="attr">field</span>=<span class="string">&quot;personid&quot;</span> <span class="attr">width</span>= <span class="string">&quot;85&quot;</span>&gt;</span></span><br><span class="line">    ID</span><br><span class="line">  <span class="tag">&lt;/<span class="name">c-grid-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">c-grid-column-group</span> <span class="attr">caption</span>=<span class="string">&quot;Name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c-grid-input-column</span> <span class="attr">field</span>=<span class="string">&quot;fname&quot;</span> <span class="attr">width</span>=<span class="string">&quot;20%&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;150&quot;</span>&gt;</span></span><br><span class="line">      First Name</span><br><span class="line">    <span class="tag">&lt;/<span class="name">c-grid-input-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">c-grid-input-column</span> <span class="attr">field</span>=<span class="string">&quot;lname&quot;</span> <span class="attr">width</span>= <span class="string">&quot;20%&quot;</span> <span class="attr">min-width</span>=<span class="string">&quot;150&quot;</span>&gt;</span></span><br><span class="line">      Last Name</span><br><span class="line">    <span class="tag">&lt;/<span class="name">c-grid-input-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">c-grid-column-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c-grid</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="最初の作戦"><a href="#最初の作戦" class="headerlink" title="最初の作戦"></a>最初の作戦</h1><p>このように定義できるようにしたいという目標を立てました。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;CheetahGrid&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">Column</span> <span class="attr">field</span>=<span class="string">&quot;name&quot;</span> <span class="attr">width</span>=<span class="string">&#123;100&#125;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">Column</span>&gt;</span></span></span><br><span class="line">&lt;/CheetahGrid&gt;</span><br></pre></td></tr></table></figure><p>親コンポーネントで子供コンポーネントの情報を習得する方法としてまず考えたのが、子供のカラムのコンポーネントでCheetahGridの定義に食わせられるJSONを作り、data属性に入れておく方法です。最終的にこのコンポーネント群で生成されたJSON片を親が集めてCheetah Gridのコンストラクタに渡します。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Column</span>(<span class="params">props: ColumnProps</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> configJson = formatProps(props);</span><br><span class="line">   <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;visibility:</span> <span class="attr">hidden</span>&#125;&#125; <span class="attr">data-cg</span>=<span class="string">&#123;encodeURIEncoding(JSON.stringify(configJson)&#125;)</span>&gt;</span></span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>これを<code>&lt;CheetahGrid&gt;</code>の<code>useEffect()</code>内で実際のタグ情報を取得してきて取り出せばうまくいきました。もう消してしまったので、うろ覚えですが、こんな感じだったかと。本当の最初はfast-xml-parserを使ってパースしたりとか、heも使ったりしていた記憶。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheetahGrid</span>(<span class="params">props: CGProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ref = useRef();</span><br><span class="line">  <span class="keyword">const</span> [cg, setCg] = useState();</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> header = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> dom <span class="keyword">of</span> <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;[data-cg]&quot;</span>)) &#123;</span><br><span class="line">        header.push(<span class="built_in">decodeURIComponent</span>(dom.attribute(<span class="string">&quot;data-cg&quot;</span>)));</span><br><span class="line">      &#125;</span><br><span class="line">      setCg(<span class="keyword">new</span> cheetahGrid.ListGrid(ref.current, &#123; header &#125;));</span><br><span class="line"></span><br><span class="line">  &#125;, [])</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span>&#123;chidlren&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最初の表は出力できたのですが、コールバック関数とかシリアライズできない情報が登場してこの方法はやめました。</p><h1 id="次の作戦"><a href="#次の作戦" class="headerlink" title="次の作戦"></a>次の作戦</h1><p>つぎはContextを使いました。子供のコンポーネントではコンテキストにJSONを渡し、それを親が集約し使う作戦。親はContextでheaderというオブジェクトを渡し、それにあらかじめユニークにプロパティに渡したid（本当はkeyだったら違和感がなかったが、Reactのフレームワークで予約されている名前なので利用できない）を使って書き込むというもの。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Column</span>(<span class="params">props: ColumnProps</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; header &#125; = useContext(CGContext);</span><br><span class="line">   <span class="keyword">const</span> configJson = formatProps(props);</span><br><span class="line">   header[props.id] = configJson</span><br><span class="line">   <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>オブジェクトをmutableに使っているのがいまいちだし、idを設定しなければならないので使う手間も増えます。なお、mutableに使わずに<code>useState()</code>で作ったオブジェクトと、set関数を両方渡す方法も試してみました。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheetahGrid</span>(<span class="params">props: CGProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ref = useRef();</span><br><span class="line">  <span class="keyword">const</span> [header, setHeader] = useState&lt;HeaderDef&gt;(&#123;</span><br><span class="line">    <span class="attr">columns</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">columnId</span>: [<span class="number">0</span>],</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> value = useMemo(</span><br><span class="line">    <span class="function">() =&gt;</span> (&#123; header, setHeader &#125;),</span><br><span class="line">    [version]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &lt;CGContext.Provider value=&#123;value&#125;&gt;&lt;div ref=&#123;ref&#125; /&gt;&lt;CGContext.Provider&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>しかし、子供のコンポーネントにはすべて同じタイミングのheaderが渡されるため、 <code>&#123; ...header, [id]: 自分の定義 &#125;</code>とやったところで、最後のコンポーネントの情報以外が消えてしまうという問題があり、行儀の良い方法は使えませんでした。行儀悪いし、余計な属性が増えてしまう。</p><h1 id="最後の作戦"><a href="#最後の作戦" class="headerlink" title="最後の作戦"></a>最後の作戦</h1><p>子供のコンポーネントで情報を作って取り出す方法にチャレンジしてましたが、<code>props.children</code>には、コンポーネントに渡されたプロパティ情報がすべて格納されています。子供コンポーネントではなにもせずに、親のテーブルコンポーネントがすべて処理してしまえばよさそうです。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// コンポーネントごとの処理の関数をmap化しておく</span></span><br><span class="line"><span class="keyword">const</span> childComponentTypes = <span class="keyword">new</span> <span class="built_in">Map</span>&lt;</span><br><span class="line">  string | JSXElementConstructor,</span><br><span class="line">  &#123; <span class="attr">name</span>: string; processFunc: <span class="function">(<span class="params">p: any</span>) =&gt;</span> any &#125;</span><br><span class="line">&gt;([</span><br><span class="line">  [Column, &#123; <span class="attr">name</span>: <span class="string">&quot;Column&quot;</span>, <span class="attr">processFunc</span>: processColumnProps &#125;],</span><br><span class="line">  [NumberColumn, &#123; <span class="attr">name</span>: <span class="string">&quot;Column&quot;</span>, <span class="attr">processFunc</span>: processNumberColumnProps &#125;],</span><br><span class="line">  [CheckColumn, &#123; <span class="attr">name</span>: <span class="string">&quot;Column&quot;</span>, <span class="attr">processFunc</span>: processCheckColumnProps &#125;],</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 変換</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">childrenToHeader</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  children: ReactElement | ReactElement[]</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Children.map(children, <span class="function"><span class="keyword">function</span> <span class="title">makeHeaderDef</span>(<span class="params">child</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> childComponentType = childComponentTypes.get(child.type);</span><br><span class="line">    <span class="keyword">if</span> (childComponentType) &#123;</span><br><span class="line">      <span class="keyword">return</span> childComponentType.processFunc(child.props);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">caption</span>: <span class="string">&quot;invalid column type&quot;</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 親のコンポーネントだけで処理する</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheetahGrid</span>(<span class="params">props: CGProps</span>) </span>&#123;</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> opts &#123;</span><br><span class="line">      <span class="attr">header</span>: childrenToHeader(props.children)</span><br><span class="line">    &#125;;</span><br><span class="line">    grid = <span class="keyword">new</span> ListGrid&lt;T&gt;(opt);</span><br><span class="line">    :</span><br><span class="line">  &#125;, []);</span><br><span class="line">  :</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一部をコンポーネント化しておくとかはできませんが（単なる関数に切り出しはいける）、コールバック関数などもきちんと扱えるようになったし、余計な属性も不要だし、文字列化したのを取り出してデコードという余計な処理もなくなりました。</p><p>なお、このコードはかなり簡略版で、実際はもっと型情報をつけているし、属性の変更時の更新とかにも非対応です。属性が変わった場合には、refしていたDOM要素が毎回クリアされてCheetahGridのインスタンスが消え去ってしまうというのが関数コンポーネントでは発生し、仕方なくここだけクラスコンポーネントにしたりしました（<code>shouldComponentUpdate()</code>でfalseを返せば再生成は回避可能）が、おおむねこの方針の延長で一通り実装しました。</p><h1 id="インスタンスアクセス"><a href="#インスタンスアクセス" class="headerlink" title="インスタンスアクセス"></a>インスタンスアクセス</h1><p>巨大コンポーネント系のラッパーで違和感のあったインスタンスアクセスですが、hooksを使ってプロキシオブジェクトを取り出すようにしました。まだメソッドとか属性はあんまり実装していませんが、今時のReactっぽい感じにはなったかと思います。monaco editorとかよりも個人的にはイケてると思います。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [instance, instanceRef] = useCheetahGridInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 現在の選択範囲の情報を取得</span></span><br><span class="line"><span class="keyword">const</span> showSelection = useCallback(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">    alert(</span><br><span class="line">      <span class="string">`Select: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(</span></span></span><br><span class="line"><span class="subst"><span class="string">        instance.selection.select</span></span></span><br><span class="line"><span class="subst"><span class="string">      )&#125;</span>, Range: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(instance.selection.range)&#125;</span>`</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [instance]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">CheetahGrid</span> <span class="attr">instance</span>=<span class="string">&#123;instanceRef&#125;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">CheetahGrid</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>めでたしめでたし。これで目標はほぼ達成しました。最終的にCheetah Gridのほとんどの機能がReact上で実現できるようになりました。</p><h1 id="趣味的開発で心掛けていること"><a href="#趣味的開発で心掛けていること" class="headerlink" title="趣味的開発で心掛けていること"></a>趣味的開発で心掛けていること</h1><p>お仕事のコードだと、たいてい締めきりがありますし、ある程度実現方法がはっきりしている堅い方針でいくことが多いと思います。仕事コードであれば、とりあえずCheetah Gridの入力のJSONを外から渡す方式にしていたと思います。</p><p>趣味的な開発の場合は、まずは実現方法が現時点で分かっていない、ちょっと高い目標を掲げるようにしています。今回は「Reactユーザーが違和感を感じないAPIの実現」でした。最初に思いついた方法とかはことごとくダメで、何度もスクラップアンドビルドしています。今回ブログで書いたのは2回だけですが、大小何度もスクラップにしています。むしろ、Cheetah GridのReactラッパー自体、3度目のチャレンジかな？ スクラップしたまま戻ってこれなくなったこともありました。</p><p>今回はたまたま成功しましたが、まあ成功しなくてもいいや、という気持ちで取り組んでいます。最初に建てた目標が達成できなければ、自分でも使う気も起きないですしね。</p><p>どんなにチュートリアルを何本もやっても、初心者な力しかつかないな、と思っています。成功したかどうかに関わらず、悩めば悩んだ分だけ力になります。この本気の素振りは、使う技術の細かいところまで追いかける動機になりますし、自信をもって「わかる」という実感が得られます。</p><p>なお、素振りだからといって業務外である必要はないです。土日の生活を犠牲にして勉強しないと！ということは全然ないと思います。会社がOSS開発とか支援してくれて、会社のリポジトリに入れるなどすれば業務時間カウントとかもできるんじゃないかと思います。このあたり、80:20ルールだったり、職務開発の規定だったり、R&amp;D開発の管理だったり、会社によってルールなどもだいぶ違うところですので、そこを確認してください。</p><p>なお、やってはいけないこのは業務でしか使わないコードを趣味時間に書くことです。これは労働基準法違反ですね。サービス残業。業務で使うなら、きちんと労働時間内でやらなければなりません。今時は、オフの時間の開発も職務開発扱いになって、会社の資産にする、みたいなルールの会社も多いと思いますので要注意です。外資系とかはほぼそうじゃないですかね。</p><p>フューチャーの場合は、<a href="/articles/20201107/">OSS開発やっていこうぜ</a>、という話もありますし、技術ブログも業務時間に書けますし、技術ブログの題材ならその一環で良いだろう、ということでそっちの業務時間としてやっちゃうのも手ですよね。そう、いま皆さんが読んでいるこのエントリーです。</p><p><a href="/articles/20211027a/">秋のブログ週間</a>連載の6本目でした。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/OSS/">OSS</category>
      
      <category domain="https://future-architect.github.io/tags/TypeScript/">TypeScript</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/">フロントエンド</category>
      
      <category domain="https://future-architect.github.io/tags/React/">React</category>
      
      <category domain="https://future-architect.github.io/tags/CheetahGrid/">CheetahGrid</category>
      
      
      <comments>https://future-architect.github.io/articles/20211104a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>マルチクラウドを考えてみた</title>
      <link>https://future-architect.github.io/articles/20211102a/</link>
      <guid>https://future-architect.github.io/articles/20211102a/</guid>
      <pubDate>Mon, 01 Nov 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20211027a/&quot;&gt;秋のブログ週間2021&lt;/a&gt;の5日目の記事です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20211027a/">秋のブログ週間2021</a>の5日目の記事です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DX チームのゆるふわエンジニアの前原です。</p><p>私は、企業へのクラウドのアーキテクチャ方針を考えたり、デザイン、構築などの仕事を主にしています。その際によくマルチクラウドの導入をしたい！という要望を最近受けることが多くなった気がします。そこで本記事では、マルチクラウドを導入するときに何を考えなきゃいけないのかを軽くまとめてみましたので少しでも誰かのお役に立てれば幸いです。</p><h1 id="マルチxxについて"><a href="#マルチxxについて" class="headerlink" title="マルチxxについて"></a>マルチxxについて</h1><p>サービスを稼働させる環境を構築する際に、IPA が提供している<a href="https://www.ipa.go.jp/sec/softwareengineering/std/ent03-b.html">非機能要求グレード</a>を参考にするかと思います。</p><p>その中にある可用性をどこまで高めるかといった点でマルチxx構成にするかどうかを判断します。その際にキーワードとなるのが、マルチAZ<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>、マルチリージョン、マルチクラウド構成です。AZ は、AWS が表現しており、GCP ではゾーンです。</p><h2 id="マルチAZ-構成"><a href="#マルチAZ-構成" class="headerlink" title="マルチAZ 構成"></a>マルチAZ 構成</h2><p>マルチAZ 構成は、複数のAZ をまたいでシステムの冗長化を図ることができます。</p><p>そのため、シングルAZ よりも可用性の高いシステムを構築することができます。</p><h2 id="マルチリージョン構成"><a href="#マルチリージョン構成" class="headerlink" title="マルチリージョン構成"></a>マルチリージョン構成</h2><p>クラウドのリージョン障害が仮に発生した場合はどうでしょう。</p><p>この場合、マルチAZ 構成をとっていたとしてもサービスを継続させるのが困難なケースが発生する場合もあります。<br>そこで複数のリージョンをまたいだマルチリージョン構成です。これによりリージョン障害が発生してもサービスを継続させることができるようになります（実際は、この構成を作るのはとても大変です）</p><p>ちなみにですが、マルチリージョンは、DR 対策だけでなくユーザエクスペリエンスの向上も図っているケース（グローバル展開しているサービスなど）もあります。</p><h2 id="マルチクラウド構成"><a href="#マルチクラウド構成" class="headerlink" title="マルチクラウド構成"></a>マルチクラウド構成</h2><p>マルチクラウド構成は、複数のクラウドを利用する構成です。</p><p>この構成を実現するのは、マルチリージョンよりも大変です。それでもなぜマルチクラウド構成を選択するのか、どの辺が難しいのかといった点を書いていきます。</p><p>てことで、本題に入っていきます！</p><h1 id="マルチクラウドをなぜ選択するのか"><a href="#マルチクラウドをなぜ選択するのか" class="headerlink" title="マルチクラウドをなぜ選択するのか"></a>マルチクラウドをなぜ選択するのか</h1><p>よくマルチクラウド構成にすることでベンダーロックインの回避や可用性の向上を図れるということから選択する企業さんもいるかと思います。また、シングルクラウドのみでは要件を満たすことができないという理由から局所的に利用するケースもあります。</p><p>このように様々な理由から企業は、マルチクラウド導入の検討を進めています。</p><h1 id="マルチクラウドのメリット・デメリット"><a href="#マルチクラウドのメリット・デメリット" class="headerlink" title="マルチクラウドのメリット・デメリット"></a>マルチクラウドのメリット・デメリット</h1><p>マルチクラウドのメリット・デメリットについてまとめてます。</p><h2 id="メリット"><a href="#メリット" class="headerlink" title="メリット"></a>メリット</h2><ul><li><strong>信頼性/可用性の向上</strong>: 仮に一つのクラウド障害が発生した場合でも他のクラウドでサービスを継続させることが可能となります。</li><li><strong>ベンダーロックインの回避</strong>: クラウドベンダに依存することなく、将来的なインフラの移行方針などが立てやすくなります。</li></ul><h2 id="デメリット"><a href="#デメリット" class="headerlink" title="デメリット"></a>デメリット</h2><ul><li><strong>アーキテクチャの複雑性が増す</strong>: マルチクラウド間のデータ連携など複雑な構成になります。</li><li><strong>コスト増加</strong>: 運用コストやインフラコストが増加するとともに複数クラウドを運用するため、学習コストが増加します。</li><li><strong>セキュリティリスクが上がる</strong>: 複数のクラウドを併用して管理するため、セキュリティ基準を満たすべき対象が増加し、セキュリティリスクが上がリます。</li></ul><h1 id="マルチクラウドを実現するために考えるべきこと"><a href="#マルチクラウドを実現するために考えるべきこと" class="headerlink" title="マルチクラウドを実現するために考えるべきこと"></a>マルチクラウドを実現するために考えるべきこと</h1><p>マルチクラウドを実現するためのアーキテクチャパターンから何を気にすべきかをまとめてみます。<br>ここでは2つの観点でまとめていますが、実際はもっと色々考える必要があると思っています。</p><ol><li>マルチクラウドを実現するアーキテクチャパターン</li><li>コスト</li></ol><h2 id="1-マルチクラウドを実現するためのアーキテクチャパターン"><a href="#1-マルチクラウドを実現するためのアーキテクチャパターン" class="headerlink" title="1. マルチクラウドを実現するためのアーキテクチャパターン"></a>1. マルチクラウドを実現するためのアーキテクチャパターン</h2><p>マルチクラウド構成を実現するには、DBへの書き込みが発生する場合の構成をどうするかを考える必要があります。<br>例えば、AWS とGCP の2つのクラウドを利用していた場合、書き込みを同時（Mutli write pattern）にさせるのか、片側だけ書き込み（Single write pattern）とするのかを考えます（データの一貫性）</p><img src="/images/20211102a/スクリーンショット_2021-11-01_6.41.46.png" alt="スクリーンショット_2021-11-01_6.41.46.png" width="1200" height="334" loading="lazy"><ul><li><strong>Multi write pattern</strong><ul><li>インタークラウドロードバランサ（ILB）<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>によってクラウドへのリクエストを振り分ける</li><li>両方のクラウドで書き込みリクエストを受け付ける</li><li>マルチクラウドにおいてのMulti write に対応したDBaaS 環境と連携する</li><li>各クラウドとDBaaS のVPC peering で接続する</li></ul></li><li><strong>Single write pattern</strong><ul><li>ILB で書き込みリクエストは、片側のクラウドに振り分ける</li><li>読み込みリクエストは、両方のクラウドに振り分ける</li><li>データのレプリケーションは、レイテンシを意識して専用線経由で行う or クラウド間をVPN で接続する</li><li>各クラウドのDB は、Cloud SQL やRDS を利用し、インタークラウドフェールオーバを実現する</li><li>仮にマスタがダウンした場合は、インタークラウドフェールオーバ可能な構成とする</li></ul></li></ul><h3 id="Multi-write-構成を実現するための考慮点"><a href="#Multi-write-構成を実現するための考慮点" class="headerlink" title="Multi write 構成を実現するための考慮点"></a>Multi write 構成を実現するための考慮点</h3><ul><li>インタークラウドロードバランサ<ul><li>書き込み/読み込みの時や読み込みのリクエストを振り分けられること</li><li>マネージドサービスであること</li><li>SLA やリージョン分散などの考慮</li><li>仮にILB がダウンした場合の対策を用意する必要がある（例えば、DNS 切り替えでクラウドに直接アクセスさせるなど）</li><li>DNS の配置やTTL の考慮</li></ul></li><li>アプリをデプロイさせる環境<ul><li>サーバレス系のサービス利用は、学習コストとリリース方式の差異が生じるため、運用者などのスキルセットなどを考慮して選択する</li><li>k8s など汎用的に利用できるマネージドサービスを利用する方が良いと考える</li></ul></li><li>DBaaS 構成<ul><li>連携対象のクラウドに対応していること</li><li>各クラウド間をVPC peering などで接続できること（レイテンシの考慮も必要）</li><li>インタークラウドレプリケーション、フェールオーバに対応していること</li></ul></li></ul><h2 id="Single-write-構成を実現するための構成"><a href="#Single-write-構成を実現するための構成" class="headerlink" title="Single write 構成を実現するための構成"></a>Single write 構成を実現するための構成</h2><p>Single write 構成は、ILB を利用し、リクエストの振り分けをよしなに行う構成以外にもDNS を用いた構成も可能です。</p><ol><li><strong>Single write pattern</strong>: 読み込みリクエストは、両方のクラウドに振り分け、書き込みは片側とする構成</li><li><strong>Single write/read pattern</strong>: 書き込み/読み込みリクエストを片側のみにリクエストする構成</li></ol><img src="/images/20211102a/スクリーンショット_2021-11-01_7.32.06.png" alt="スクリーンショット_2021-11-01_7.32.06.png" width="1200" height="327" loading="lazy"><ul><li><strong>Single write pattern</strong>（再掲）<ul><li>ILB で書き込みリクエストは、片側のクラウドに振り分ける</li><li>読み込みリクエストは、両方のクラウドに振り分ける</li><li>データのレプリケーションは、レイテンシを意識して専用線経由で行う or クラウド間をVPN で接続する</li><li>各クラウドのDB は、Cloud SQL やRDS を利用し、インタークラウドフェールオーバを実現する</li><li>仮にマスタがダウンした場合は、インタークラウドフェールオーバ可能な構成とする</li></ul></li><li><strong>Single write/read pattern</strong><ul><li>書き込み/読み込みリクエストを片側のクラウド（プライマリ）のみに直接送信する</li><li>仮にプライマリ側のクラウドがダウンした場合は、インタークラウドフェールオーバによってダウンタイムを最小限にする</li><li>リクエストの振り分けは、DNS サーバでコントロールする</li></ul></li></ul><h3 id="Single-write-構成を実現するための考慮点"><a href="#Single-write-構成を実現するための考慮点" class="headerlink" title="Single write 構成を実現するための考慮点"></a>Single write 構成を実現するための考慮点</h3><ul><li>各クラウドのDB サーバの考慮点<ul><li>クラウド特有のKVS などのサービスの利用などはクラウド間のレプリケーション処理が難しくなるため汎用的なサービス利用を優先的に考える</li><li>各クラウドのDB 間でインタークラウドフェールオーバが実現できるかの検証が必要（レプリケーション先のDB をFQDN で指定し、切り替えが問題ないかなど）</li><li>専用線を介したレプリケーション時のレイテンシに問題ないか</li></ul></li><li>DNS サーバ構成の考慮点<ul><li>リクエストの振り分けをDNS サーバでコントロールするが、DNSサーバをどこに配置するか考慮が必要</li><li>各クラウドにDNS のサービスは存在するが、障害時に利用できなくなった場合にどのように切り替えるか</li><li>TTL の考慮</li></ul></li></ul><h2 id="2-マルチクラウド構成を実現するためのコストについて考える"><a href="#2-マルチクラウド構成を実現するためのコストについて考える" class="headerlink" title="2. マルチクラウド構成を実現するためのコストについて考える"></a>2. マルチクラウド構成を実現するためのコストについて考える</h2><p>マルチクラウド構成を実現するにはコスト観点を考慮する必要があります。</p><p>コスト観点としては、単純なクラウド利用料のコストだけでなく、設計、運用、学習コストなども含めて考えます。これらを鑑みてマルチクラウド構成とするのかシングルクラウド構成にするかを考えると良いと思います。</p><div class="scroll"><table><thead><tr><th>項目</th><th>内容</th></tr></thead><tbody><tr><td>サービスコスト</td><td>・クラウドを複数利用するため、単純にコストが2倍以上発生する<br>・DBaaS やILB を利用するためにSaaS の契約が必要となり、コスト増加<br>・各クラウドとデータセンター間を専用線（Dedicated Interconnect やDirect Connect）で接続するためのコストがかかる</td></tr><tr><td>設計コスト</td><td>・アーキテクチャが複雑になるため、設計コストの増加<br>・クラウド特有のサービスを利用したい場合、マルチクラウドではどのように実現するかを設計する必要がある（例えば、キューサービスやKVS などのサービス利用）<br>・複数クラウドへのリリース方式を考える必要があるため設計コストが増加する</td></tr><tr><td>運用コスト</td><td>・複数クラウド運用となるため、メンテナンスコストの増加<br>・複数クラウドのユーザ、ID 管理や、脆弱性チェックなどのセキュリティ管理対象が増えるため、コスト増加<br>・ログ、メトリクス監視などの管理を各クラウドで行う場合、コストが増加する（仮にオブザーバビリティ製品を使用する場合も同様）<br>・複数クラウドの清算処理</td></tr><tr><td>学習コスト</td><td>・複数クラウドの知識を蓄える必要があるため学習コストが増加する<br>・どちらのクラウドにも精通した人材を確保する必要も出てくるためコストが増加する</td></tr></tbody></table></div><h1 id="Anthos-という選択"><a href="#Anthos-という選択" class="headerlink" title="Anthos という選択"></a>Anthos という選択</h1><p>マルチクラウド/ハイブリッド構成を実現するために<a href="https://cloud.google.com/anthos?hl=ja">Anthos</a>を利用するという選択肢もあるかと思います。<br>そこでざっくりとですが、Anthos 構成にした場合について記載します。</p><ol><li>Anthos GKE on AWS によるマルチクラウド構成</li><li>Anthos GKE on-prem によるハイブリッドクラウド構成</li></ol><img src="/images/20211102a/スクリーンショット_2021-11-01_8.23.19.png" alt="スクリーンショット_2021-11-01_8.23.19.png" width="1200" height="351" loading="lazy"><ul><li>Anthos GKE on AWS<ul><li>マルチクラウドでは、各クラウドで汎用的なサービスを利用することで開発差異を極力なくす構成をとっていたが、Anthos を利用することで一貫性を持った開発や運用を実現することが可能</li><li>AWS のEC2 上にクラスタを自動構築</li><li>モニタリング、ロギングを統合</li></ul></li><li>Anthos GKE on-prem<ul><li>オンプレミスも同様に一貫性を持った開発、運用が可能となる構成</li><li>クラウド側に持っていけない情報などをオンプレミス側に配置するなど柔軟な構成が可能となる</li><li>モニタリング、ロギングを統合</li><li>GCP のコンテナエコシステムとの連携が可能（Cloud Build、GCR など）</li></ul></li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>マルチクラウド構成を実現しようと思うと色々なことを考えないといけないことがわかったかと思います。</p><p>もし、マルチクラウド構成を実現したい場合は、まずはシングルクラウドで可用性を高めた構成を構築し、裏で継続的に技術検証を行いながらマルチクラウドにシフトしていく準備を進められたら良いと思っています。</p><p>また、マルチクラウドを選択することによってクラウドの恩恵を損なう可能性も念頭に置いて検討するのが良いと思います。</p><p><a href="/articles/20211027a/">秋のブログ週間2021</a>の5日目でした。ありがとうございました！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>マルチクラウド構成を実現するためにもっと知りたいという方は、以下のヤマトHD さんとZOZOテクノロジーズさんの動画と記事を参考にすると良いと思います。<br>非常に分かりやすくて面白い内容です。</p><p><a href="https://www.youtube.com/watch?v=Q2oM9vSpbPQ">https://www.youtube.com/watch?v=Q2oM9vSpbPQ</a></p><p><a href="https://qiita.com/sonots/items/f125d3394ee102522aee">https://qiita.com/sonots/items/f125d3394ee102522aee</a></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">Availability Zone（アベイラビリティーゾーン）の略称でリージョン内に複数あり、AZ は1つ以上のデータセンタで構成されている</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">2つの異なるクラウドを連携させるロードバランサ</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Anthos/">Anthos</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/">設計</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%9E%E3%83%AB%E3%83%81%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89/">マルチクラウド</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%99%E3%83%B3%E3%83%80%E3%83%BC%E3%83%AD%E3%83%83%E3%82%AF%E3%82%A4%E3%83%B3/">ベンダーロックイン</category>
      
      
      <comments>https://future-architect.github.io/articles/20211102a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>キーパッドを、基板から自作してみた</title>
      <link>https://future-architect.github.io/articles/20211101a/</link>
      <guid>https://future-architect.github.io/articles/20211101a/</guid>
      <pubDate>Sun, 31 Oct 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは。CSIGの井上です。この記事は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは。CSIGの井上です。この記事は<a href="/articles/20211027a/">秋のブログ週間2021</a>の4日目です。</p><p>本ブログでは何度か自作キーボードの記事を書いていますが、基本的には「誰かが設計したものを組み立てる」物でした。最近まではある程度満足して使っていたのですが、もう少しこうだと（私は）使いやすいかもしれない、という点が色々出てきたので、キーボードを基板から作ろうと思い始めました。</p><ul><li>市販の自作キーボードは、キーアサインの変更は可能です</li><li>しかしながら、物理的な配置等も変えたい場合は、自作するしかないです</li></ul><p>ですが、最初からキーボードを作るのは難度が高いので、まずは機能確認のキーパッドを作りました。これについて記事を書きました。</p><p>あと、<strong>普段はサイバーセキュリティの話をしていますが、今回は一切しません…</strong></p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><h2 id="この記事について"><a href="#この記事について" class="headerlink" title="この記事について"></a>この記事について</h2><p>この記事は、仕組みを知ることの楽しさを知ってもらう、という事を目的に書きました。</p><p>今回は、自作の第一歩として以下を含む基板を作ります。<br>（何かを始めてやるときは、実装テストを小規模で行う、のがセオリーですね。）</p><ul><li>4つのキー</li><li>1つのロータリーエンコーダー</li><li>1つのカラーシリアルLEDテープ</li></ul><img src="/images/20211101a/image.png" alt="image.png" width="694" height="501" loading="lazy"><h2 id="最終的に作りたいもの"><a href="#最終的に作りたいもの" class="headerlink" title="最終的に作りたいもの"></a>最終的に作りたいもの</h2><p>本記事で書いたキーパッド設計により、設計プロセスや注意点を、おおよそ理解しました。<br>今後は、日本語キーボード（70キー程度）を作るつもりです。機会があればこちらに投稿するかもしれません。</p><ul><li>会社支給PCは日本語キーボードのノートパソコンであるが、キータッチは個人的にはあまり好きではない</li><li>リモートワーク環境であり、自宅では某自作日本語キーボードを利用している</li><li>出社または自宅外でリモートワークする時に上記のキーボードを持ち出すと、破損する恐れがある</li><li>持ち出しても破損しづらい、好みのキーボードが欲しい！作りたい！</li></ul><p>それでは、キーパッドを設計していきます。</p><h1 id="キーパッドを作る"><a href="#キーパッドを作る" class="headerlink" title="キーパッドを作る"></a>キーパッドを作る</h1><h2 id="構成と利用ソフトウェア"><a href="#構成と利用ソフトウェア" class="headerlink" title="構成と利用ソフトウェア"></a>構成と利用ソフトウェア</h2><h3 id="構成"><a href="#構成" class="headerlink" title="構成"></a>構成</h3><p>自作キーボードは、一般的に以下の構成となっています。</p><ul><li>ProMicroと呼ばれるマイコン（Arduino互換機）に、各種スイッチ類やLEDなどを接続する</li><li>ProMicroのUSBポート経由でPCと接続し、キーボードとして使う</li><li>ProMicroのファームウェアは、QMK Firmwareというもので作成ができ、それをQMK ToolBoxで書き込むことが可能<ul><li>ファームウェアを書き換えることで、キーアサインなどを変更できる</li></ul></li></ul><img src="/images/20211101a/image_2.png" alt="image.png" width="823" height="591" loading="lazy"><h3 id="利用するソフトウェア"><a href="#利用するソフトウェア" class="headerlink" title="利用するソフトウェア"></a>利用するソフトウェア</h3><p>今回は、以下のアプリケーションを使います。</p><ul><li>KiCAD<ul><li><a href="https://www.kicad.org/">https://www.kicad.org/</a></li><li><code>A Cross Platform and Open Source Electronics Design Automation Suite</code></li><li>回路の設計と、基板の設計ができるアプリケーションです。Ubuntuだとaptで導入もできました。</li><li>KiCADには、Eeschema（回路図エディター）/Pcbnew（プリント基板用ソフトウェア）/GrebView（ガーバー/ドリル ファイルビューア）などが含まれています。</li></ul></li><li>Freerouting<ul><li><a href="https://freerouting.mihosoft.eu/">https://freerouting.mihosoft.eu/</a></li><li><code>PCB Autorouter</code></li><li>KiCADでは自動で配線はできないようなので、このアプリケーションにより配線をしてもらいます。</li></ul></li><li>QMK Firmware<ul><li><a href="https://github.com/qmk/qmk_firmware">https://github.com/qmk/qmk_firmware</a></li><li>キーボードの制御でよく使われるProMicroに入れるファームウェアとして使われます。</li><li>githubプロジェクトに登録済みのキーボードであれば、<a href="https://config.qmk.fm/">QMK Configurator</a> という、WEB上でキーアサインを変更してファームウェアを作るものが利用できます。</li></ul></li><li>QMK ToolBox<ul><li><a href="https://github.com/qmk/qmk_toolbox">https://github.com/qmk/qmk_toolbox</a></li><li>QMK Firmwareで用意したファームウェアを、USB経由でキーボード上のProMicroに書き込みます。</li></ul></li></ul><h2 id="何を作りたいかを決める"><a href="#何を作りたいかを決める" class="headerlink" title="何を作りたいかを決める"></a>何を作りたいかを決める</h2><p>自作プロセスの検証作業に近い内容なので、欲しい機能を盛り込みます。</p><ul><li>キーは必要<ul><li>最終的にはキーボードを作るつもりなので、複数のキーを扱う練習をしたい</li></ul></li><li>ロータリーエンコーダーも使ってみる<ul><li>マウス代わりとして使う可能性もあるので、実装してみたい</li></ul></li><li>シリアルカラーLEDテープ<ul><li>自作キーボード=光る、これは定番</li></ul></li></ul><p>キーは内部的にマトリックスとして扱うので、最低限の 2x2 で 4キーとしました。<br>ロータリーエンコーダーとLEDテープは、実装テストなので数は不要として、1つとしました。</p><p>実装するものが決まったので、これ以外に必要なパーツなども含めて配置を考えます。</p><img src="/images/20211101a/image_3.png" alt="image.png" width="518" height="427" loading="lazy"><h2 id="回路を設計する"><a href="#回路を設計する" class="headerlink" title="回路を設計する"></a>回路を設計する</h2><p>KiCADは設計用の複数の画面を持っていますが、今回はKiCADのEeschemaで部品を配置、配線します。<br>詳細は割愛しますが、キーボードのコントローラーとなるProMicroを中心に、回路を検討します。</p><img src="/images/20211101a/image_4.png" alt="image.png" width="1085" height="455" loading="lazy"><ul><li>キーはマトリックス配置とします。<ul><li>ProMicroの2Pinを「行」、同2Pinを「列」に割り当て、ダイオードで逆流を防止すると、4キーを認識できる</li><li>ProMicroは最大18Pinをこの用途で利用できるので、9行x9列=81キーを単体で判別できる。</li><li>キーのマトリックスを作り、各Pinにアサインします。</li></ul></li><li>ロータリーエンコーダーは、2Pinを消費します。<ul><li>現状のQMK Firmwawreは、ロータリーエンコーダーはマトリックスに組込めない仕様です。</li><li>そのため、ProMicroに直接Pinアサインします。</li></ul></li><li>ファームウェア書き換えの簡略化の為、リセットスイッチも付けます。<ul><li>RST PinをGNDに短絡するように、スイッチを配線します。</li></ul></li><li>分割キーボードとする際に必要なTRRSジャックも一応つけておきます。<ul><li>キーボードを左右に分割した場合、シリアル通信若しくはI2C通信で同期させる必要があります。今回はシリアル通信要として1Pinを設定します。</li><li>I2Cの場合は GND/VCC/SDA/SCLの4線が必要で、市販のステレオジャック（3極）では無く、TRRSジャック（4極）を使います。</li><li>シリアル通信だと GND/VCC/Dataで済みますが、汎用化の為にTRRSジャックを使います。</li></ul></li><li>シリアルLEDテープは、1Pin消費します。<ul><li>GND/VCC/Din なので、制御用のDinをProMicroに接続します。</li></ul></li></ul><p>この段階で、論理的な部品と配線が完了しました。<br>次に進む前に、ネットリストの出力や、フットプリントを割り当てておきます。</p><h2 id="PCBを設計する"><a href="#PCBを設計する" class="headerlink" title="PCBを設計する"></a>PCBを設計する</h2><p>基板自体の設計に進みます。これは、KiCADのpcbnewを使います。</p><p>まずは部品の実際の配置を考えて整理します。</p><ul><li>使い勝手により位置が決まるもの（TRRSジャックは基板の端オードは同じ向きで固めて配置したい）等で位置決めをします。</li><li>その後、基板上での配線を書いていくのですが、KiCADでは自動配線をしてくれません。手動で配線する必要があります。<ul><li>そこでFreeRoutingを使い、自動配線します。</li></ul></li></ul><p>配線後は、下図このようになります。</p><ul><li>3Dモデルを表示することもできるので、仕上がりを確認することもできます。</li></ul><img src="/images/20211101a/image_5.png" alt="image.png" width="950" height="500" loading="lazy"><p>これで基板は完成したので、発注を行います。</p><h2 id="PCBを発注する"><a href="#PCBを発注する" class="headerlink" title="PCBを発注する"></a>PCBを発注する</h2><p>KiCADで作成したデータを基に、業者に発注します。<br>各業者により特徴はありますが、基本的には同じです。</p><ul><li>個人で利用する場合、条件により費用が変わりやすいです。<ul><li>最低5枚から、特定のサイズ内であれば安く仕上がる、などの条件があります。</li><li>これに合わせるように基板を設計したほうが良いかもしれません。</li></ul></li><li>中国の工場で作成され、郵送されることが多いです。<ul><li>私が頼んだ業者は、深圳から送ってきました。特定のサイズ以下であれば、5枚で2000円以下、程度でした。</li><li>納期は3週間で、2週間目まで製造は全くされていませんでした。3周目頭で製造が始まり、DHLを使い、予定通り3週間中に送られてきました。　</li></ul></li></ul><p>発注後暫く待つと、基板が届くはずです。</p><img src="/images/20211101a/image_6.png" alt="image.png" width="884" height="478" loading="lazy"><h2 id="組み立てる"><a href="#組み立てる" class="headerlink" title="組み立てる"></a>組み立てる</h2><p>基板が届いたら、まずは部品を組みつけてみます。</p><ul><li>パーツ自体は一般的な物なので、関東であれば秋葉原のパーツ屋や台東区にある自作キーボード専門店で入手できます。</li></ul><img src="/images/20211101a/image_7.png" alt="image.png" width="958" height="487" loading="lazy"><ul><li>場合により、「取付向きが逆になる（フットプリントを逆に配置してしまった）」とかが発生することがあります。<ul><li>無理やり空中配線で対応したり、表裏を変えたりして対処できれば良いですが、無理な時はあきらめるしかありません…</li></ul></li></ul><p>部品が付いたことで、「見た目」は完成品になりました。<br>まだファームウェアを書いていないので、PCに接続しても何も起きません。<br>ファームウェアを用意します。</p><img src="/images/20211101a/image_8.png" alt="image.png" width="988" height="469" loading="lazy"><h2 id="ファームウェアを作成する"><a href="#ファームウェアを作成する" class="headerlink" title="ファームウェアを作成する"></a>ファームウェアを作成する</h2><p>QMK Firmwareを利用して作成します。</p><p>Ubuntuのパッケージを利用して導入しましたが、GitHubのものよりバージョンが古いかもしれません。しかしながら、特段問題は出ないのでそのまま使いました。<br>QMK Firmwareは開発が頻繁に行われており、1週間程度ごとにはバージョンが上がっているようです。</p><ul><li>KiCADも含めて、PCにそのまま入れると環境が汚れるので、仮想マシン上で動かすのが良いかもしれません。<ul><li>今回はKiCAD, QMK FirmwareのビルドなどはUbuntuで行っています。</li></ul></li><li>開発の速さに伴いインターネット上の情報が古くなりやすいです。やはり公式のドキュメントを参照するのが一番良いようですが、なかなか複雑です。</li><li>Ubuntuでapt導入した場合は、<code>~/qmk_firmware/</code>以下に環境が用意されます。</li></ul><p>詳細は省略しますが、新規でゼロから作る場合は以下のようにします。</p><ul><li>テンプレートを作る<ul><li><code>$ ./util/new_keyboard.sh</code><ul><li>キーボード名や作成者名を入れると、テンプレートが <code>./keyboards/&lt;キーボード名&gt;</code>に作られる</li></ul></li></ul></li><li>編集を行う<ul><li>キーの数やアサイン、LEDシートやロータリーエンコーダーなどの設定をする<ul><li><code>config.h</code>, <code>&lt;キーボード名&gt;.h</code>, <code>keymap.c</code>等を書き換える</li><li>何を書き換えるかは…ネットで調べる方が良いかもしれない<ul><li>機能を<code>enable = ture</code>にする、ProMicroの割当Pin番号を記載していく、等</li></ul></li></ul></li></ul></li><li>コンパイルする<ul><li><code>$ qmk compile --keyboard &lt;キーボード名&gt; --keymap default</code></li></ul></li></ul><p>ファームウェアをビルドすると<code>~/.build</code>以下に<code>*.hex</code>ファイルとして配置されるので、これをQMK ToolBoxでProMicroに書き込みます。</p><p>先人のキーボード設計を流用する場合は、keymapだけ書き換えることになると思います。<br>新規の場合、流用をすると色々エラーが起こったりすることが多いので、<code>new_keyboard.sh</code>した方が早いように感じました。</p><h2 id="ファームウェアを適用する"><a href="#ファームウェアを適用する" class="headerlink" title="ファームウェアを適用する"></a>ファームウェアを適用する</h2><p>ProMicroへの書き込みですが、Windowsだと<code>QMK Toolbox.exe</code>で、GUIで操作ができます。</p><ul><li>（VM上のファームウェアを、ホストのWindowsから見えるところに移動させる）</li><li><code>QMK Toolbox.exe</code>を起動し、準備をする<ul><li>ファームウェアファイルを指定、<code>Auto-Flash</code>の有効化のチェックボックスを有効化</li></ul></li><li>キーボードをUSBで接続する<ul><li>リセットスイッチを押すと自動でファームウェアが書き込まれる</li></ul></li></ul><img src="/images/20211101a/image_9.png" alt="image.png" width="802" height="645" loading="lazy"><p>これでキーボードとして動作が可能な状態になりました。完成です。</p><p>ここまでできれば、一通りの機能実装ができたことになります。おそらく、ロータリーエンコーダーやLEDテープなどが無ければ、簡単に実装できます。<br>最初の実装としては問題なくできたので、次は日本語キーボードを作ろうと思います。</p><h2 id="（大半をWEBで済ます方法もある）"><a href="#（大半をWEBで済ます方法もある）" class="headerlink" title="（大半をWEBで済ます方法もある）"></a>（大半をWEBで済ます方法もある）</h2><p>最近は、各種WEBサービスを駆使することで、ほぼWEB上でキーボードが作れそうです。</p><ul><li>キーボードをデザインする<ul><li><a href="http://www.keyboard-layout-editor.com/">keyboard-layout-editor</a> でキーボードをデザインする</li></ul></li><li>KiCADで基板を作る<ul><li>ここは流石にWEBではできないか。</li></ul></li><li>PCB発注<ul><li>WEBで事業者に発注。一応、WEBサービスですね。</li></ul></li><li>ファームウェアの作成<ul><li><a href="https://kbfirmware.com/">Keyboard Firmware Builder</a>でファームウェアを作る</li><li>keyboard-layout-editorのJSONを張り付けることで、オリジナルのキーボードでも作れる</li><li>但し、ロータリーエンコーダーは書けない<ul><li>ファームウェアをダウンロードしてみるとQMK Firmwareのようだけれども、それを改造してcompileするのは難しいみたい。</li></ul></li></ul></li><li>ファームウェアの書き込み<ul><li>QMK Tool boxを使うので、WEBサービスじゃないですね…</li></ul></li></ul><img src="/images/20211101a/image_10.png" alt="image.png" width="756" height="458" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>キーボード自作のおおよそのフローは理解いただけたと思います。<br>自作キーボードに興味のない方には雑学としての知識を、興味のある方には自作の後押しをできていれば幸いです。</p><p><a href="/articles/20211027a/">秋のブログ週間2021</a>の4日目でした。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C/">電子工作</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%87%AA%E4%BD%9C%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89/">自作キーボード</category>
      
      <category domain="https://future-architect.github.io/tags/KiCAD/">KiCAD</category>
      
      
      <comments>https://future-architect.github.io/articles/20211101a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
