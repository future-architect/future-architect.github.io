<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Thu, 03 Feb 2022 01:25:06 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Goのnet/httpパッケージに出てくるTemporary()がなにか調べた</title>
      <link>https://future-architect.github.io/articles/20220203a/</link>
      <guid>https://future-architect.github.io/articles/20220203a/</guid>
      <pubDate>Wed, 02 Feb 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220203a/top.png&quot; alt=&quot;&quot; width=&quot;500&quot; height=&quot;208&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220203a/top.png" alt="" width="500" height="208" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。net/httpパッケージには非常にお世話になっています。Goの net/httpの内部にはサーバー/クライアントの両方が含まれていますが、今回はクライアントサイドの話です。</p><p><a href="https://future-architect.github.io/articles/20211026a/">TCPレベルの接続エラーの調査</a>のために標準パッケージやサードパーティのライブラリのコードを読み込んでいくと、Temporary() 関数だけをもった temporary インターフェースが登場します。HTTP周りでtemporaryと聞くと、 307 Temporary Redirect のステータスコードのことかと思いますが、ちょっと違いそうです。どういったものでどういった場合に出てくるのか、調べました。</p><h2 id="Temporary-とは"><a href="#Temporary-とは" class="headerlink" title="Temporary()とは"></a>Temporary()とは</h2><p>Temporary()はnet/http パッケージなどのコードを見ていると出てくる関数です。プライベートなインターフェースがあちこちのパッケージや呼び出し元のライブラリでつくられています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> temporary <span class="keyword">interface</span> &#123;</span><br><span class="line">Temporary() <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例えば次のhttpErrorはtemporaryインターフェースを満たし、常にtrueを返すように実装されています。</p><figure class="highlight go"><figcaption><span>transport.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> httpError <span class="keyword">struct</span> &#123;</span><br><span class="line">err     <span class="keyword">string</span></span><br><span class="line">timeout <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *httpError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span>   &#123; <span class="keyword">return</span> e.err &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *httpError)</span> <span class="title">Timeout</span><span class="params">()</span> <span class="title">bool</span></span>   &#123; <span class="keyword">return</span> e.timeout &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *httpError)</span> <span class="title">Temporary</span><span class="params">()</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125;  <span class="comment">//  常に true を返しているが..？</span></span><br></pre></td></tr></table></figure><p>netパッケージのOpErrorもtemporaryインターフェースを満たし、Temporary()関数にはロジックが結構が入っています。</p><figure class="highlight go"><figcaption><span>net.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *OpError)</span> <span class="title">Temporary</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">// Treat ECONNRESET and ECONNABORTED as temporary errors when</span></span><br><span class="line"><span class="comment">// they come from calling accept. See issue 6163.</span></span><br><span class="line"><span class="keyword">if</span> e.Op == <span class="string">&quot;accept&quot;</span> &amp;&amp; isConnError(e.Err) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ne, ok := e.Err.(*os.SyscallError); ok &#123;</span><br><span class="line">t, ok := ne.Err.(temporary)</span><br><span class="line"><span class="keyword">return</span> ok &amp;&amp; t.Temporary()</span><br><span class="line">&#125;</span><br><span class="line">t, ok := e.Err.(temporary)</span><br><span class="line"><span class="keyword">return</span> ok &amp;&amp; t.Temporary()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AWS SDK for GoにもorigiErrがtemporaryインターフェース(Temporary() boolの関数)を満たしていて、かつTemporary()の結果がtrueの場合はリトライする、みたいな実装がよくあります。</p><figure class="highlight go"><figcaption><span>retryer.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// AWS SDK for Goのretyer.goの例</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">shouldRetryError</span><span class="params">(origErr error)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> err := origErr.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"><span class="keyword">case</span> temporary:</span><br><span class="line"><span class="keyword">if</span> netErr, ok := err.(*net.OpError); ok &amp;&amp; netErr.Op == <span class="string">&quot;dial&quot;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If the error is temporary, we want to allow continuation of the</span></span><br><span class="line"><span class="comment">// retry process</span></span><br><span class="line"><span class="keyword">return</span> err.Temporary() || isErrConnectionReset(origErr) <span class="comment">// Temporary()がtrueの場合はリトライするのはなぜ？</span></span><br></pre></td></tr></table></figure><p>どういったルールでtrue/falseになって、どのように使われるべきなんでしょうか。</p><h2 id="Temporary-の使い方"><a href="#Temporary-の使い方" class="headerlink" title="Temporary() の使い方"></a>Temporary() の使い方</h2><p>go.devの<a href="https://go.dev/blog/error-handling-and-go">Error handling and Go</a> にドンピシャな説明が書いてありました（本来はエラーハンドリングの説明ですが）。</p><figure class="highlight go"><figcaption><span>net.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> net</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Error <span class="keyword">interface</span> &#123;</span><br><span class="line">    error</span><br><span class="line">    Timeout() <span class="keyword">bool</span>   <span class="comment">// Is the error a timeout?</span></span><br><span class="line">    Temporary() <span class="keyword">bool</span> <span class="comment">// Is the error temporary?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このerrorは、Temporary()を呼ぶことで、一時的なネットワークエラーと永続的なネットワークエラーを区別するために用意されたようです。例えばWebクローラーは、一時的なエラーが発生したときにスリープして再試行し、それ以外の場合はあきらめるといった使い方に利用できるとのこと。サンプルコードも付いていました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> nerr, ok := err.(net.Error); ok &amp;&amp; nerr.Temporary() &#123;</span><br><span class="line">    time.Sleep(<span class="number">1e9</span>)</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ということで、Temporary() は日本語訳そのままで、一時的なエラー（リトライすると成功するかも）かどうかを区別するために用意されたものでした。例えばURLが無効であるとかクライアントサイドの指定の問題は、何回繰り返しても成功することは無いのでTemporary() はfalseを返すべきだということです。</p><p>例を探すとIPアドレスのパースに失敗したときに呼ばれるnetパッケージのParseErrorはTemporary()を常にfalseを返していました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A ParseError is the error type of literal network address parsers.</span></span><br><span class="line"><span class="keyword">type</span> ParseError <span class="keyword">struct</span> &#123;</span><br><span class="line">Type <span class="keyword">string</span></span><br><span class="line">Text <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ParseError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123; <span class="keyword">return</span> <span class="string">&quot;invalid &quot;</span> + e.Type + <span class="string">&quot;: &quot;</span> + e.Text &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ParseError)</span> <span class="title">Timeout</span><span class="params">()</span> <span class="title">bool</span></span>   &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *ParseError)</span> <span class="title">Temporary</span><span class="params">()</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;  <span class="comment">// IPアドレスのパース失敗時は同じ値を何度繰り返しても成功することは無いので、毎回false</span></span><br></pre></td></tr></table></figure><p>最初に説明したhttpErrorはクライアント側で指定した時間に対してタイムアウトしたときに利用されていたため、再試行で成功する可能性があるためtrueが返されるのだと思います。OpErrorはシステムコール側の処理でのエラーハンドリング結果に移譲していますが、ECONNRESET(connection reset by peer)やアボートされたときはリトライの余地がありと判定しtrueを返しています。</p><h2 id="もはや非推奨である"><a href="#もはや非推奨である" class="headerlink" title="もはや非推奨である"></a>もはや非推奨である</h2><p>ここまでTemporary()について説明してきましたが、netパッケージのErrorでは（おそらく）Go 1.18からのように書かれます。Deprecated（非推奨）になります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// An Error represents a network error.</span></span><br><span class="line"><span class="keyword">type</span> Error <span class="keyword">interface</span> &#123;</span><br><span class="line">error</span><br><span class="line">Timeout() <span class="keyword">bool</span> <span class="comment">// Is the error a timeout?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Deprecated: Temporary errors are not well-defined.</span></span><br><span class="line"><span class="comment">// Most &quot;temporary&quot; errors are timeouts, and the few exceptions are surprising.</span></span><br><span class="line"><span class="comment">// Do not use this method.</span></span><br><span class="line">Temporary() <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/golang/go/issues/32463">net: deprecate Temporary error status #45729</a>に理由が書かれています。 Timeout()はわかりやすいけど、Temporary()は何が一時的で何が永続的なのかの区別が明確じゃなく、本来別の表現で区別されるものもTemporary()として扱われてしまっているのでは無いかということ。Timeout()で区別がつけるものはそちらを使いましょうということかと思います。（これだとECONNRESET, ECONNABORTEDが表現できない気がしますが…）</p><p>ちなみに、<a href="https://github.com/golang/go/issues/32463">os: remove ErrTemporary in Go 1.13 #32463</a> にあるように、 <code>os.ErrTemporary</code> は削除されたようです。</p><h2 id="Temporary-の判定方法"><a href="#Temporary-の判定方法" class="headerlink" title="Temporary()の判定方法"></a>Temporary()の判定方法</h2><p>Temporary()の判定にはType Switchしたり、次のようなerrors.As()を使って判定することが多かったかと思います。</p><figure class="highlight go"><figcaption><span>繰り返されるボイラーコード</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> temporary <span class="keyword">interface</span> &#123; Temporary() <span class="keyword">bool</span> &#125;</span><br><span class="line"><span class="keyword">var</span> terr temporary</span><br><span class="line"><span class="keyword">if</span> errors.As(err, &amp;terr) &amp;&amp; terr.Temporary() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この辺は標準パッケージ側でヘルパー関数を作ったら？という提案が<a href="https://github.com/golang/go/issues/37250">proposal: errors: add new function Temporary(error) bool</a>出ています。期待ですねと言いたいところですが、Temporary() の立ち位置自体が先程説明したようにちょっと微妙であるため、その結果次第ですがおそらく追加されることは無さそうです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>Temporary()は一時的なエラーであるかどうかを示し、リトライで成功する可能性がある場合にtrueを返す</li><li>例えば、タイムアウトやTCP通信でコネクションリセットなどを返されたときにtrueになる</li><li>とは言え、Temporary()の使い分けのハッキリとした定義が難しく、位置づけがTimeout()と被ることもあり非推奨の方向で進んでいる</li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-18/">Go1.18</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%83%AA%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0/">ソースコードリーディング</category>
      
      
      <comments>https://future-architect.github.io/articles/20220203a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Pipenv+LocalStackで作るLambda開発環境</title>
      <link>https://future-architect.github.io/articles/20220202a/</link>
      <guid>https://future-architect.github.io/articles/20220202a/</guid>
      <pubDate>Tue, 01 Feb 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220202a/eyecatch.png&quot; alt=&quot;&quot; width=&quot;969&quot; height=&quot;484&quot; loading=&quot;lazy&quot;&gt;


&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220202a/eyecatch.png" alt="" width="969" height="484" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG/DXユニット所属の宮永です。<br>PipenvとLocalStackを使用したLambda開発環境の構築を紹介します。</p><p>本記事で作成するデモアプリは以下のGitHubリポジトリに格納しています。ご参考にしてください。</p><p><a href="https://github.com/orangekame3/pipenv-lambda">https://github.com/orangekame3/pipenv-lambda</a></p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span><p>【本記事で伝えたいこと】</p>  <p>本記事で最も伝えたいことはデプロイパッケージと開発パッケージの分離です。Pipenvを使用することでzipの容量を節約しながらLambdaをデプロイすることができます。やや長い記事となっていますので、「LocalStackへのデプロイ」の章だけでも見ていただけると幸いです。</p></div><h1 id="Pipenvとは"><a href="#Pipenvとは" class="headerlink" title="Pipenvとは"></a>Pipenvとは</h1><p>Pipenvはパッケージ管理ツールです。似たようなツールにPoetry等があります。<br>Poetryを使用したPython開発環境の構築は<a href="https://future-architect.github.io/articles/20210611a/">澁川さんの記事</a>がとても参考になりますのでぜひご覧ください。</p><h1 id="開発環境"><a href="#開発環境" class="headerlink" title="開発環境"></a>開発環境</h1><p>開発に取り組む前に筆者の開発環境を記載します。記事中Linuxコマンドを使用している箇所があります。Windowsで開発される方はWSLを使用することをおすすめいたします。</p><ul><li>OS Ubuntu 20.04</li><li>Python(pyenv) 3.9</li><li>Pipenv</li><li>Docker</li><li>docker compose v2</li><li>AWS CLI v2</li></ul><h1 id="プロジェクトの作成"><a href="#プロジェクトの作成" class="headerlink" title="プロジェクトの作成"></a>プロジェクトの作成</h1><p>まずはPipenvをダウンロードしましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipenv</span><br></pre></td></tr></table></figure><p>次にプロジェクトを作成します。<br>プロジェクトのルートディレクトリで以下コマンドを実行してPythonプロジェクトを作成します。<br>ランタイムはLambdaでサポートしている最新環境のPython 3.9を使用します。<br>参考：<a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/lambda-runtimes.html">Lambda ランタイム</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv --python 3.9</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">~/git/src/pipenv-lambda main</span><br><span class="line">❯❯❯ pipenv --python 3.9                                                                  ✘ 1</span><br><span class="line">Creating a virtualenv <span class="keyword">for</span> this project...</span><br><span class="line">Pipfile: /home/orangekame3/git/src/pipenv-lambda/Pipfile</span><br><span class="line">Using /home/orangekame3/.anyenv/envs/pyenv/versions/3.9.4/bin/python3.9 (3.9.4) to create virtualenv...</span><br><span class="line">⠹ Creating virtual environment...created virtual environment CPython3.9.4.final.0-64 <span class="keyword">in</span> 136ms</span><br><span class="line">  creator CPython3Posix(dest=/home/orangekame3/.<span class="built_in">local</span>/share/virtualenvs/pipenv-lambda-LX4n91M6, clear=False, no_vcs_ignore=False, global=False)</span><br><span class="line">  seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/orangekame3/.<span class="built_in">local</span>/share/virtualenv)</span><br><span class="line">    added seed packages: pip==21.3.1, setuptools==60.2.0, wheel==0.37.1</span><br><span class="line">  activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator</span><br><span class="line"></span><br><span class="line">✔ Successfully created virtual environment!</span><br><span class="line">Virtualenv location: /home/orangekame3/.<span class="built_in">local</span>/share/virtualenvs/pipenv-lambda-LX4n91M6</span><br><span class="line">Creating a Pipfile <span class="keyword">for</span> this project...</span><br></pre></td></tr></table></figure><p>プロジェクトの作成ができました 🎉<br>この状態でtreeコマンドを実行すると<code>Pipfile</code>が作成されていることを確認できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~/git/src/pipenv-lambda main*</span><br><span class="line">❯❯❯ tree</span><br><span class="line">.</span><br><span class="line">├── Pipfile</span><br><span class="line">└── README.md</span><br><span class="line"></span><br><span class="line">0 directories, 2 files</span><br></pre></td></tr></table></figure><p><code>Pipfile</code>にプロジェクトのPythonのバージョンや使用するパッケージ等が記載されています。<br><code>cat</code>コマンドで中身を確認します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">~/git/src/pipenv-lambda main*</span><br><span class="line">❯❯❯ cat Pipfile</span><br><span class="line">[[<span class="built_in">source</span>]]</span><br><span class="line">url = <span class="string">&quot;https://pypi.org/simple&quot;</span></span><br><span class="line">verify_ssl = <span class="literal">true</span></span><br><span class="line">name = <span class="string">&quot;pypi&quot;</span></span><br><span class="line"></span><br><span class="line">[packages]</span><br><span class="line"></span><br><span class="line">[dev-packages]</span><br><span class="line"></span><br><span class="line">[requires]</span><br><span class="line">python_version = <span class="string">&quot;3.9</span></span><br></pre></td></tr></table></figure><p>Pipenvでパッケージをインストールする際は<code>pipenv install</code>コマンドを使用します。<br><code>pipenv install</code>でインストールしたパッケージは<code>[packages]</code>で管理されます。<br>一方、このコマンドに<code>--dev</code>オプションをつけてインストールした際は<code>[dev-packages]</code>でパッケージ管理されます。<br>この点については後ほど「LocalStackへのデプロイ」で説明します。</p><h2 id="開発パッケージのインストール"><a href="#開発パッケージのインストール" class="headerlink" title="開発パッケージのインストール"></a>開発パッケージのインストール</h2><p>続いてテスト環境を構築します。以下のコマンドでpytestをインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">~/git/src/pipenv-lambda main* 10s</span><br><span class="line">❯❯❯ pipenv install pytest --dev</span><br><span class="line">Installing pytest...</span><br><span class="line">Adding pytest to Pipfile<span class="string">&#x27;s [dev-packages]...</span></span><br><span class="line"><span class="string">✔ Installation Succeeded</span></span><br><span class="line"><span class="string">Pipfile.lock (8eec78) out of date, updating to (7c060a)...</span></span><br><span class="line"><span class="string">Locking [dev-packages] dependencies...</span></span><br><span class="line"><span class="string">Building requirements...</span></span><br><span class="line"><span class="string">Resolving dependencies...</span></span><br><span class="line"><span class="string">✔ Success!</span></span><br><span class="line"><span class="string">Locking [packages] dependencies...</span></span><br><span class="line"><span class="string">Building requirements...</span></span><br><span class="line"><span class="string">Resolving dependencies...</span></span><br><span class="line"><span class="string">✔ Success!</span></span><br><span class="line"><span class="string">Updated Pipfile.lock (7c060a)!</span></span><br><span class="line"><span class="string">Installing dependencies from Pipfile.lock (7c060a)...</span></span><br><span class="line"><span class="string">  🐍   ▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉▉ 0/0 — 00:00:00</span></span><br><span class="line"><span class="string">To activate this project&#x27;</span>s virtualenv, run pipenv shell.</span><br><span class="line">Alternatively, run a <span class="built_in">command</span> inside the virtualenv with pipenv run.</span><br></pre></td></tr></table></figure><p>同様にして静的型チェックツールであるmypyもインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install mypy --dev</span><br></pre></td></tr></table></figure><h2 id="デプロイパッケージのインストール"><a href="#デプロイパッケージのインストール" class="headerlink" title="デプロイパッケージのインストール"></a>デプロイパッケージのインストール</h2><p>Pythonの標準パッケージ以外にも使用したいパッケージはあると思います。<br>Lambdaを実行する上で必要となる外部パッケージは<code>--dev</code>オプションは付けずにインストールします。<br>今回はpandasをインストールします。<br>またpandasでエクセルファイルを扱うため、xlwtとxlsxwriterもインストールします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv install pandas xlwt xlsxwriter</span><br></pre></td></tr></table></figure><p>ここまででPythonプロジェクトの準備は一旦完了です。<br>ローカル環境でLambdaのデプロイと実行を確認するためLocalStackを使用します。<br>次の章でLocalStackの準備をします。</p><h1 id="LocalStackの準備"><a href="#LocalStackの準備" class="headerlink" title="LocalStackの準備"></a>LocalStackの準備</h1><p>LocalStackを使用して、Lambdaのデプロイと動作検証を行います。</p><h2 id="docker-compose-ymlの作成"><a href="#docker-compose-ymlの作成" class="headerlink" title="docker-compose.ymlの作成"></a>docker-compose.ymlの作成</h2><p>以下のような<code>docker-compose.yml</code>を用意してください。</p><figure class="highlight yml"><figcaption><span>docker-compose.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">localstack:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;$&#123;LOCALSTACK_DOCKER_NAME-localstack_pipenv&#125;&quot;</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">localstack/localstack</span></span><br><span class="line">    <span class="attr">network_mode:</span> <span class="string">bridge</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;127.0.0.1:4566:4566&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DATA_DIR=/tmp/localstack/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVICES=lambda,s3</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">HOST_TMP_FOLDER=$&#123;TMPDIR:-/tmp/&#125;localstack</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DOCKER_HOST=unix:///var/run/docker.sock</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;$&#123;TMPDIR:-/tmp&#125;/localstack:/tmp/localstack&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br></pre></td></tr></table></figure><p><code>docker-compose.yml</code>の準備ができたらビルドします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up --build</span><br></pre></td></tr></table></figure><p>起動が確認できたらLocalStackの準備も完了です。<br>次にAWS CLIの設定を行います。</p><h2 id="AWS-CLIの設定"><a href="#AWS-CLIの設定" class="headerlink" title="AWS CLIの設定"></a>AWS CLIの設定</h2><p>AWS CLIでは認証情報などをプロファイルとして保存することができます。<br>AWS CLIをインストールされた方はご自身が使用しているOSのhomeディレクトリに<code>.aws</code>の隠しファルダがあります。(エクスプローラーなどで確認する場合は隠しフォルダを表示するように設定してください。)<code>.aws</code>フォルダ配下には.<code>config</code>と<br><code>.credentials</code>2つのファイルがありますのでそれぞれ以下のように設定してください。</p><p>参考:<a href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-configure-profiles.html">名前付きプロファイル</a></p><p>今回は以下のように<code>local</code>というプロファイルを作成しました。</p><figure class="highlight ini"><figcaption><span>config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[local]</span></span><br><span class="line"><span class="attr">region</span> = ap-northeast-<span class="number">1</span></span><br><span class="line"><span class="attr">output</span> = json</span><br></pre></td></tr></table></figure><figure class="highlight ini"><figcaption><span>credentials</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[local]</span></span><br><span class="line"><span class="attr">aws_access_key_id</span> = test</span><br><span class="line"><span class="attr">aws_secret_access_key</span> = test</span><br></pre></td></tr></table></figure><h1 id="デモアプリの実装"><a href="#デモアプリの実装" class="headerlink" title="デモアプリの実装"></a>デモアプリの実装</h1><h2 id="最終的なディレクトリ構成"><a href="#最終的なディレクトリ構成" class="headerlink" title="最終的なディレクトリ構成"></a>最終的なディレクトリ構成</h2><p>以降、複数のファイルを作成します。最終的なディレクトリ構成を記載しますので、適宜参考にしてください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Makefile</span><br><span class="line">├── Pipfile</span><br><span class="line">├── Pipfile.lock</span><br><span class="line">├── README.md</span><br><span class="line">├── bin</span><br><span class="line">│   └── lambda.zip</span><br><span class="line">├── deploy-packages</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── lambda.py</span><br><span class="line">├── model.py</span><br><span class="line">├── requirements.txt</span><br><span class="line">├── result</span><br><span class="line">│   └── test.xlsx</span><br><span class="line">├── result.log</span><br><span class="line">├── setup.cfg</span><br><span class="line">├── tests</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   └── test_model.py</span><br><span class="line">└── utils</span><br><span class="line">    ├── data</span><br><span class="line">    │   └── sample_data.json</span><br><span class="line">    └── utils.py</span><br></pre></td></tr></table></figure><h2 id="全体構成"><a href="#全体構成" class="headerlink" title="全体構成"></a>全体構成</h2><p>今回作成するのはS3バケットからJSONファイルを取得し、ETL処理後にExcelファイルとして再度S3バケットに格納するアプリです。<br>S3バケットに格納したExcelファイルはAWS CLIコマンドでファイルをダウンロードして想定通りの挙動をしているか検証します。<br>以下、構成図です。</p><img src="/images/20220202a/構成.png" alt="構成" width="1200" height="810" loading="lazy"><h2 id="アプリ機能詳細"><a href="#アプリ機能詳細" class="headerlink" title="アプリ機能詳細"></a>アプリ機能詳細</h2><p>JSON→ExcelのETL処理について以下記載します。<br>S3バケットには予め以下の構造をもつJSONファイルを配置しておきます。<br>実装するLambdaには大きく2つの機能をもたせます。</p><ol><li>JSON→Excelへの変換</li><li>「ボーナスポイント」カラムの追加</li></ol><p>「ボーナスポイント」は以下の条件で決定します。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span><p>【条件】</p>  <p>会員ランクが「４，５」の会員には「ポイント」×1.25倍のボーナスポイントを、会員ランク「１，２，３」の会員には「ポイント」と同等のボーナスポイントを付与することします。</p></div><br /><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;会員番号&quot;</span>: <span class="string">&quot;000&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;名前&quot;</span>: <span class="string">&quot;長野原 ひろし&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;会員ランク&quot;</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">&quot;ポイント&quot;</span>: <span class="number">58</span>,</span><br><span class="line">        <span class="attr">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-05-16&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;会員番号&quot;</span>: <span class="string">&quot;001&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;名前&quot;</span>: <span class="string">&quot;般若 竜門&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;会員ランク&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;ポイント&quot;</span>: <span class="number">75</span>,</span><br><span class="line">        <span class="attr">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-07-19&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;会員番号&quot;</span>: <span class="string">&quot;002&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;名前&quot;</span>: <span class="string">&quot;十河 アンナ&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;会員ランク&quot;</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">&quot;ポイント&quot;</span>: <span class="number">57</span>,</span><br><span class="line">        <span class="attr">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-09-06&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>例えば上記のようなJSONファイルを取り込んだ場合、Lambdaは以下のExelファイルを出力することとします。</p><div class="scroll"><table><thead><tr><th align="left">会員番号</th><th align="left">名前</th><th align="left">会員ランク</th><th align="left">ポイント</th><th align="left">タイムスタンプ</th><th align="left">ボーナスポイント</th></tr></thead><tbody><tr><td align="left">000</td><td align="left">長野原 ひろし</td><td align="left">4</td><td align="left">58</td><td align="left">2021-05-16</td><td align="left">72.5</td></tr><tr><td align="left">001</td><td align="left">般若 竜門</td><td align="left">2</td><td align="left">75</td><td align="left">2021-07-19</td><td align="left">75</td></tr><tr><td align="left">002</td><td align="left">十河 アンナ</td><td align="left">2</td><td align="left">57</td><td align="left">2021-09-06</td><td align="left">57</td></tr></tbody></table></div><h2 id="ハンドラの実装"><a href="#ハンドラの実装" class="headerlink" title="ハンドラの実装"></a>ハンドラの実装</h2><p>それではアプリ本体を実装します。<br>Lambdaは<code>lambda.py</code>と<code>model.py</code>の２つで構成します。<br>機能のほとんどは<code>model.py</code>に記述し、<code>lambda.py</code>ではハンドラを呼び出すのみにします。<br>以下、<code>lambda.py</code>です。</p><figure class="highlight python"><figcaption><span>lambda.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> Handler</span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> os.getenv(<span class="string">&quot;LOCALSTACK_HOSTNAME&quot;</span>) <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    s3 = boto3.client(<span class="string">&quot;s3&quot;</span>, <span class="string">&quot;ap-northeast-1&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    endpoint = <span class="string">f&quot;http://<span class="subst">&#123;os.environ[<span class="string">&#x27;LOCALSTACK_HOSTNAME&#x27;</span>]&#125;</span>:4566&quot;</span></span><br><span class="line">    s3 = boto3.client(</span><br><span class="line">        service_name=<span class="string">&quot;s3&quot;</span>,</span><br><span class="line">        endpoint_url=endpoint,</span><br><span class="line">        aws_access_key_id=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">        aws_secret_access_key=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lambda_handler</span>(<span class="params">event, context</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    handler = Handler(event, context, s3)</span><br><span class="line">    <span class="keyword">return</span> handler.main()</span><br></pre></td></tr></table></figure><p>次に<code>model.py</code>です。</p><figure class="highlight python"><figcaption><span>model.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger = logging.getLogger()</span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, event, context, s3</span>):</span></span><br><span class="line">        self.event = event</span><br><span class="line">        self.context = context</span><br><span class="line">        self.s3 = s3</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            bucket = <span class="string">&quot;test-bucket&quot;</span></span><br><span class="line">            send = <span class="string">&quot;test.xlsx&quot;</span></span><br><span class="line">            data_path = self.event[<span class="string">&quot;input_obj&quot;</span>]</span><br><span class="line">            dict_data: <span class="type">List</span>[<span class="built_in">dict</span>] = self.get_s3_data(bucket, data_path)</span><br><span class="line">            df = self.make_df(dict_data)</span><br><span class="line">            df_processed = self.process(df)</span><br><span class="line">            send = self.send_excel(df_processed, bucket, send)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;completed : &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(send)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            logger.exception(e)</span><br><span class="line">            <span class="keyword">raise</span> e</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_s3_data</span>(<span class="params">self, bucket: <span class="built_in">str</span>, key: <span class="built_in">str</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">dict</span>]:</span></span><br><span class="line">        resp = self.s3.get_object(Bucket=bucket, Key=key)</span><br><span class="line">        body = resp[<span class="string">&quot;Body&quot;</span>].read().decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        json_dict: <span class="type">List</span>[<span class="built_in">dict</span>] = json.loads(body)</span><br><span class="line">        <span class="keyword">return</span> json_dict</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_df</span>(<span class="params">self, data: <span class="built_in">list</span></span>) -&gt; pd.DataFrame:</span></span><br><span class="line">        df = pd.DataFrame.from_dict(data)</span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calc</span>(<span class="params">self, row</span>):</span></span><br><span class="line">        <span class="keyword">if</span> row[<span class="string">&quot;会員ランク&quot;</span>] &gt; <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> row[<span class="string">&quot;ポイント&quot;</span>] * <span class="number">1.25</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> row[<span class="string">&quot;ポイント&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process</span>(<span class="params">self, data: pd.DataFrame</span>) -&gt; pd.DataFrame:</span></span><br><span class="line">        data[<span class="string">&quot;ボーナスポイント&quot;</span>] = data.apply(self.calc, axis=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_excel</span>(<span class="params">self, df: pd.DataFrame, bucket: <span class="built_in">str</span>, send: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">with</span> tempfile.TemporaryFile() <span class="keyword">as</span> fp:</span><br><span class="line">            writer = pd.ExcelWriter(fp, engine=<span class="string">&quot;xlsxwriter&quot;</span>)</span><br><span class="line">            df.to_excel(writer, sheet_name=<span class="string">&quot;Sheet1&quot;</span>, index=<span class="literal">False</span>)</span><br><span class="line">            writer.save()</span><br><span class="line">            fp.seek(<span class="number">0</span>)</span><br><span class="line">            self.s3.put_object(</span><br><span class="line">                Body=fp.read(),</span><br><span class="line">                Bucket=bucket,</span><br><span class="line">                Key=send,</span><br><span class="line">            )</span><br><span class="line">        <span class="keyword">return</span> send</span><br></pre></td></tr></table></figure><p>実装では型アノテーションを付けています。<br>正しく型アノテーションを付与できているか、mypyを使ってチェックすることができます。<br><code>Pipfile</code>に以下を追記します。</p><figure class="highlight ini"><figcaption><span>Pipfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[scripts]</span></span><br><span class="line"><span class="attr">mypy</span> = <span class="string">&quot;mypy model.py lambda.py&quot;</span></span><br></pre></td></tr></table></figure><p><code>Pipfile</code>へ追記したら以下コマンドを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv run mypy</span><br></pre></td></tr></table></figure><p>型付けに問題がなければ以下の結果を得られるはずです。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Success: no issues found in 2 source files</span><br></pre></td></tr></table></figure><p>次にテストコードを実装します。</p><h2 id="テストコードの実装"><a href="#テストコードの実装" class="headerlink" title="テストコードの実装"></a>テストコードの実装</h2><p>テストにはpytestを使用します。プロジェクトルートに<code>tests</code>フォルダを作成し、<code>model.py</code>をテストする<code>test_model.py</code>を実装します。</p><p>以下<code>tests</code>ディレクトリのファイル構成です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── __init__.py</span><br><span class="line">└── test_model.py</span><br><span class="line"></span><br><span class="line">0 directories, 2 files</span><br></pre></td></tr></table></figure><p><code>__init__.py</code>ファイルがないとテストに失敗するので忘れずに作成してください。</p><p>pytestを使用すれば簡単にテーブルドリブンテストを実装することができます。</p><p><code>fixture</code>を使用することで<code>handler</code>の初期値を入力することができ、各メソッドテストで使い回しが可能です。今回pandasを使用したテストを行うため、<code>assert</code>部にはpandasのDataFrame比較メソッドである<code>testing.assert_frame_equal</code>を使用しました。</p><p>以下はボーナスポイント付与のメソッドである<code>process</code>をテストした<code>test_process</code>の例です。</p><figure class="highlight python"><figcaption><span>test_model.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> model <span class="keyword">import</span> Handler</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler</span>():</span></span><br><span class="line">    <span class="keyword">return</span> Handler(</span><br><span class="line">        event=&#123;&#125;,</span><br><span class="line">        context=&#123;&#125;,</span><br><span class="line">        s3=<span class="string">&quot;&quot;</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.mark.parametrize(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="meta">    <span class="string">&quot;input_dict,expected_dict&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="meta">    [</span></span></span><br><span class="line"><span class="params"><span class="meta">        (<span class="params"></span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">            [</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#123;</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員番号&quot;</span>: <span class="string">&quot;000&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;名前&quot;</span>: <span class="string">&quot;椎名 米子&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員ランク&quot;</span>: <span class="number">1</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;ポイント&quot;</span>: <span class="number">45</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-07-14&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#125;,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#123;</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員番号&quot;</span>: <span class="string">&quot;001&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;名前&quot;</span>: <span class="string">&quot;広島 たくみ&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員ランク&quot;</span>: <span class="number">4</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;ポイント&quot;</span>: <span class="number">39</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-12-17&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#125;,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#123;</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員番号&quot;</span>: <span class="string">&quot;002&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;名前&quot;</span>: <span class="string">&quot;大嶺 順子&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員ランク&quot;</span>: <span class="number">2</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;ポイント&quot;</span>: <span class="number">27</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-09-23&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#125;,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">            ],</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">            [</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#123;</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員番号&quot;</span>: <span class="string">&quot;000&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;名前&quot;</span>: <span class="string">&quot;椎名 米子&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員ランク&quot;</span>: <span class="number">1</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;ポイント&quot;</span>: <span class="number">45</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-07-14&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;ボーナスポイント&quot;</span>: <span class="number">45</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#125;,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#123;</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員番号&quot;</span>: <span class="string">&quot;001&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;名前&quot;</span>: <span class="string">&quot;広島 たくみ&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員ランク&quot;</span>: <span class="number">4</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;ポイント&quot;</span>: <span class="number">39</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-12-17&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;ボーナスポイント&quot;</span>: <span class="number">48.75</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#125;,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#123;</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員番号&quot;</span>: <span class="string">&quot;002&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;名前&quot;</span>: <span class="string">&quot;大嶺 順子&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;会員ランク&quot;</span>: <span class="number">2</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;ポイント&quot;</span>: <span class="number">27</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;タイムスタンプ&quot;</span>: <span class="string">&quot;2021-09-23&quot;</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                    <span class="string">&quot;ボーナスポイント&quot;</span>: <span class="number">27</span>,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">                &#125;,</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">            ],</span></span></span></span><br><span class="line"><span class="params"><span class="params"><span class="meta">        </span>),</span></span></span><br><span class="line"><span class="params"><span class="meta">    ],</span></span></span><br><span class="line"><span class="params"><span class="meta"></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_process</span>(<span class="params">handler, input_dict, expected_dict</span>):</span></span><br><span class="line">    json_dict = pd.DataFrame.from_dict(input_dict)</span><br><span class="line">    got = handler.process(json_dict).sort_index(axis=<span class="number">1</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">    expected = pd.DataFrame.from_dict(expected_dict).sort_index(axis=<span class="number">1</span>, ascending=<span class="literal">False</span>)</span><br><span class="line">    pd.testing.assert_frame_equal(got, expected)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>テストも<code>Pipfile</code>でコマンド化することができます。以下を<code>Pipfile</code>に追記してください。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[scripts]</span></span><br><span class="line"><span class="attr">mypy</span> = <span class="string">&quot;mypy model.py lambda.py&quot;</span></span><br><span class="line"><span class="attr">pytest</span> = <span class="string">&quot;pytest -vv&quot;</span></span><br></pre></td></tr></table></figure><p>ファイルへの追記が完了したら、テストを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">❯❯❯ pipenv run pytest</span><br><span class="line">==================================== <span class="built_in">test</span> session starts =====================================</span><br><span class="line">platform linux -- Python 3.9.4, pytest-6.2.5, py-1.11.0, pluggy-1.0.0 -- /home/orangekame3/.<span class="built_in">local</span>/share/virtualenvs/pipenv-lambda-LX4n91M6/bin/python</span><br><span class="line">cachedir: .pytest_cache</span><br><span class="line">rootdir: /home/orangekame3/git/src/pipenv-lambda</span><br><span class="line">collected 1 item</span><br><span class="line"></span><br><span class="line">tests/test_model.py::test_process[input_dict0-expected_dict0] PASSED                   [100%]</span><br><span class="line"></span><br><span class="line">===================================== 1 passed <span class="keyword">in</span> 0.17s ======================================</span><br></pre></td></tr></table></figure><p>無事テストを通過しました🎉</p><h1 id="LocalStackへのデプロイ"><a href="#LocalStackへのデプロイ" class="headerlink" title="LocalStackへのデプロイ"></a>LocalStackへのデプロイ</h1><p>Lambdaのzip化やLocalStackへのデプロイは<code>Makefile</code>で管理します。</p><p><code>Makefile</code>は<code>Pipfile</code>に追加したコマンドやAWS CLIコマンドで構成されています。筆者の環境はAWS CLI v2なので<code>invoke</code>コマンドでpayloadを指定時に<code>--cli-binary-format raw-in-base64-out</code>オプションを付与しています。</p><p>参考：<a href="https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cliv2-migration.html#cliv2-migration-binaryparam">破壊的変更 - AWS CLI バージョン 1 からバージョン 2 への移行</a></p><h2 id="Makefile全貌"><a href="#Makefile全貌" class="headerlink" title="Makefile全貌"></a>Makefile全貌</h2><p>以下作成した<code>Makefile</code>です。</p><figure class="highlight makefile"><figcaption><span>Makefile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">.PHONY</span>: clean zip  delete cretae update invoke log test bucket download json</span></span><br><span class="line">PROJECT_DIR=<span class="variable">$(<span class="built_in">shell</span> pwd)</span></span><br><span class="line">DEPLOY_PACKAGES_DIR=deploy-packages</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -rf ./bin/*</span><br><span class="line"></span><br><span class="line"><span class="section">zip:clean</span></span><br><span class="line">pipenv run mypy</span><br><span class="line">pipenv run pytest</span><br><span class="line">pipenv lock -r &gt;requirements.txt</span><br><span class="line">pipenv run pip install -r requirements.txt --target <span class="variable">$(DEPLOY_PACKAGES_DIR)</span></span><br><span class="line">@echo <span class="string">&quot;Project Location: <span class="variable">$(PROJECT_DIR)</span>&quot;</span></span><br><span class="line">@echo <span class="string">&quot;Library Location: <span class="variable">$(DEPLOY_PACKAGES_DIR)</span>&quot;</span></span><br><span class="line">cd <span class="variable">$(DEPLOY_PACKAGES_DIR)</span> &amp;&amp; rm -rf __pycache__ &amp;&amp; zip -r <span class="variable">$(PROJECT_DIR)</span>/bin/lambda.zip *</span><br><span class="line">cd <span class="variable">$(PROJECT_DIR)</span> &amp;&amp; zip -g ./bin/lambda.zip lambda.py model.py</span><br><span class="line">find ./bin/lambda.zip</span><br><span class="line">cd <span class="variable">$(DEPLOY_PACKAGES_DIR)</span> &amp;&amp; rm -r *</span><br><span class="line"></span><br><span class="line"><span class="section">delete:</span></span><br><span class="line">aws --endpoint-url=http://localhost:4566 \</span><br><span class="line">    --region ap-northeast-1 --profile local lambda delete-function \</span><br><span class="line">    --function-name=pipenv-lambda</span><br><span class="line"></span><br><span class="line"><span class="section">create:</span></span><br><span class="line">aws lambda create-function \</span><br><span class="line">    --function-name=pipenv-lambda \</span><br><span class="line">    --runtime=python3.9 \</span><br><span class="line">    --role=DummyRole \</span><br><span class="line">    --handler=lambda.lambda_handler \</span><br><span class="line">    --zip-file fileb://./bin/lambda.zip \</span><br><span class="line">--region ap-northeast-1 \</span><br><span class="line">    --endpoint-url=http://localhost:4566</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">update:</span></span><br><span class="line">aws lambda update-function-code \</span><br><span class="line">    --function-name=pipenv-lambda \</span><br><span class="line">    --zip-file fileb://./bin/lambda.zip \</span><br><span class="line">--region ap-northeast-1 \</span><br><span class="line">    --endpoint-url=http://localhost:4566</span><br><span class="line"></span><br><span class="line"><span class="section">invoke:</span></span><br><span class="line">aws lambda --endpoint-url=http://localhost:4566 invoke \</span><br><span class="line">--function-name pipenv-lambda \</span><br><span class="line">--region ap-northeast-1 \</span><br><span class="line">--payload &#x27;&#123; <span class="string">&quot;input_obj&quot;</span>: <span class="string">&quot;test.json&quot;</span> &#125;&#x27; \</span><br><span class="line">--cli-binary-format raw-in-base64-out \</span><br><span class="line">--profile local  result.log</span><br><span class="line"></span><br><span class="line"><span class="section">log:</span></span><br><span class="line">cat result.log</span><br><span class="line"></span><br><span class="line"><span class="section">test:</span></span><br><span class="line">pipenv shell <span class="string">&quot;pytest -vv &amp;&amp; exit&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">bucket:</span></span><br><span class="line">aws s3 mb s3://test-bucket \</span><br><span class="line">--endpoint-url=http://localhost:4566 \</span><br><span class="line">--profile local</span><br><span class="line"></span><br><span class="line"><span class="section">download:</span></span><br><span class="line">aws s3 --endpoint-url=http://localhost:4566 \</span><br><span class="line">cp s3://test-bucket/ ./result --exclude <span class="string">&quot;*&quot;</span> \</span><br><span class="line">--include <span class="string">&quot;*.xlsx&quot;</span> --recursive</span><br><span class="line"></span><br><span class="line"><span class="section">json:</span></span><br><span class="line">python utils/utils.py 100</span><br></pre></td></tr></table></figure><h2 id="デプロイパッケージのzip化"><a href="#デプロイパッケージのzip化" class="headerlink" title="デプロイパッケージのzip化"></a>デプロイパッケージのzip化</h2><p>ポイントはzipコマンド部です。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">zip:clean</span></span><br><span class="line">    pipenv run mypy</span><br><span class="line">    pipenv run pytest</span><br><span class="line">    pipenv lock -r &gt;requirements.txt</span><br><span class="line">    pipenv run pip install -r requirements.txt --target <span class="variable">$(DEPLOY_PACKAGES_DIR)</span></span><br><span class="line">    @echo <span class="string">&quot;Project Location: <span class="variable">$(PROJECT_DIR)</span>&quot;</span></span><br><span class="line">    @echo <span class="string">&quot;Library Location: <span class="variable">$(DEPLOY_PACKAGES_DIR)</span>&quot;</span></span><br><span class="line">    cd <span class="variable">$(DEPLOY_PACKAGES_DIR)</span> &amp;&amp; rm -rf __pycache__ &amp;&amp; zip -r <span class="variable">$(PROJECT_DIR)</span>/bin/lambda.zip *</span><br><span class="line">    cd <span class="variable">$(PROJECT_DIR)</span> &amp;&amp; zip -g ./bin/lambda.zip lambda.py model.py</span><br><span class="line">    find ./bin/lambda.zip</span><br><span class="line">    cd <span class="variable">$(DEPLOY_PACKAGES_DIR)</span> &amp;&amp; rm -r *</span><br></pre></td></tr></table></figure><p>前提として、Lambda上でPythonの外部パッケージを使用する際は外部パッケージを含んだzipファイルを作成する必要があります。直接CLI等からアップロードする場合は50MBの上限が存在します。</p><p>今回開発環境の補助ツールとしてpytestとmypyを、デプロイ時に必要なパッケージとしてpandasとxlwt、xlsxwriterをインストールしました。</p><p>開発に使用するpytestとmypyはLambdaの機能として不要です。そこでまずは<code>Pipfile</code>から<code>requirements.txt</code>を作成します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv lock -r -&gt; requirements.txt</span><br></pre></td></tr></table></figure><p>requirements.txtには–devオプションでインストールしたパッケージは含まれません。開発パッケージとデプロイパッケージを分離することができました。</p><p>次にrequirements.txtを元にdeploy-packagesというフォルダを作成します。事前に<code>mkdir</code>コマンドで<code>deploy-packages</code>を作成しておきます。pipコマンドは<code>--target</code>オプションを付与することでインストール先を指定することができます。</p><p>コマンド冒頭で<code>pipenv run</code>を付与することで、プロジェクトの仮想環境上で実行することができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipenv run pip install -r requirements.txt --target $(DEPLOY_PACKAGES_DIR)</span><br></pre></td></tr></table></figure><p>あとはzipコマンドを使用して実装した<code>lambda.py</code>と<code>model.py</code>を追加するだけです。</p><p>なお、このzipコマンドを作成する際に以下の記事と<br><a href="https://pyteyon.hatenablog.com/entry/2019/08/04/204704">https://pyteyon.hatenablog.com/entry/2019/08/04/204704</a></p><p>pipenv公式の以下のIssue<br><a href="https://github.com/pypa/pipenv/issues/746">https://github.com/pypa/pipenv/issues/746</a></p><p>を参考にさせていただきました。</p><p>zipコマンドを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make zip</span><br></pre></td></tr></table></figure><img src="/images/20220202a/zip.gif" alt="zip" width="890" height="786" loading="lazy"><p>正常に動作していればルートディレクトリのbinフォルダに<code>lambda.zip</code>が生成されます。</p><p>続いてLocalStackが起動していることを確認した上でS3上に新規バケットを作成します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make bucket</span><br></pre></td></tr></table></figure><p>バケットの作成が完了したらLocalStackにアプリをデプロイします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make create</span><br></pre></td></tr></table></figure><p>Lambdaのデプロイに成功していれば以下のレスポンスが返ってきます。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;FunctionName&quot;</span>: <span class="string">&quot;pipenv-lambda&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;FunctionArn&quot;</span>: <span class="string">&quot;arn:aws:lambda:ap-northeast-1:000000000000:function:pipenv-lambda&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Runtime&quot;</span>: <span class="string">&quot;python3.9&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Role&quot;</span>: <span class="string">&quot;DummyRole&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Handler&quot;</span>: <span class="string">&quot;lambda.lambda_handler&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;CodeSize&quot;</span>: <span class="number">38937088</span>,</span><br><span class="line">    <span class="attr">&quot;Description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Timeout&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;LastModified&quot;</span>: <span class="string">&quot;2022-01-29T11:52:04.798+0000&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;CodeSha256&quot;</span>: <span class="string">&quot;cr93AW1EjYHkErTkS6dGRKGCsTrtBEedwcuO9N4LSj0=&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Version&quot;</span>: <span class="string">&quot;$LATEST&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;VpcConfig&quot;</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">&quot;TracingConfig&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;Mode&quot;</span>: <span class="string">&quot;PassThrough&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;RevisionId&quot;</span>: <span class="string">&quot;35bfafab-da87-4f25-8014-16c7b35caa9e&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;State&quot;</span>: <span class="string">&quot;Active&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;LastUpdateStatus&quot;</span>: <span class="string">&quot;Successful&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;PackageType&quot;</span>: <span class="string">&quot;Zip&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Architectures&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;x86_64&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LocalStackへのLambdaデプロイに成功しました🎉<br>最後に動作検証をします。</p><h1 id="動作検証"><a href="#動作検証" class="headerlink" title="動作検証"></a>動作検証</h1><h2 id="テストデータの作成"><a href="#テストデータの作成" class="headerlink" title="テストデータの作成"></a>テストデータの作成</h2><p>まずはETL処理元のテストデータを作成します。<br>ルートディレクトリに<code>utils/utils.py</code>を作成し、以下のコードを実装します。</p><figure class="highlight python"><figcaption><span>utils.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> boto3</span><br><span class="line"><span class="keyword">from</span> fire <span class="keyword">import</span> Fire</span><br><span class="line"><span class="keyword">from</span> mimesis <span class="keyword">import</span> Person</span><br><span class="line"><span class="keyword">from</span> mimesis.locales <span class="keyword">import</span> Locale</span><br><span class="line"></span><br><span class="line">person = Person(Locale.JA)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dummy_data</span>(<span class="params">num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">dict</span>:</span></span><br><span class="line">    <span class="built_in">id</span> = <span class="built_in">str</span>(num).zfill(<span class="number">3</span>)</span><br><span class="line">    date = datetime.date(<span class="number">2021</span>, randint(<span class="number">1</span>, <span class="number">12</span>), randint(<span class="number">1</span>, <span class="number">28</span>)).strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br><span class="line">    dummy_dict = &#123;</span><br><span class="line">        <span class="string">&quot;会員番号&quot;</span>: <span class="built_in">id</span>,</span><br><span class="line">        <span class="string">&quot;名前&quot;</span>: person.full_name(reverse=<span class="literal">True</span>),</span><br><span class="line">        <span class="string">&quot;会員ランク&quot;</span>: randint(<span class="number">1</span>, <span class="number">5</span>),</span><br><span class="line">        <span class="string">&quot;ポイント&quot;</span>: randint(<span class="number">50</span>, <span class="number">100</span>),</span><br><span class="line">        <span class="string">&quot;タイムスタンプ&quot;</span>: date,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dummy_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_json</span>(<span class="params">s3, sample_data: <span class="built_in">list</span>, bucket: <span class="built_in">str</span>, send: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;utils/data/sample_data.json&quot;</span>, mode=<span class="string">&quot;wt&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(sample_data, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>)</span><br><span class="line">    s3.put_object(</span><br><span class="line">        Body=json.dumps(sample_data, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">4</span>),</span><br><span class="line">        Bucket=bucket,</span><br><span class="line">        Key=send,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> send</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_dummy_data</span>(<span class="params">k</span>) -&gt; <span class="built_in">list</span>:</span></span><br><span class="line">    sample_data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        sample_data.append(dummy_data(i))</span><br><span class="line">    <span class="keyword">return</span> sample_data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>(<span class="params">iterate_num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    endpoint = <span class="string">f&quot;http://localhost:4566&quot;</span></span><br><span class="line">    s3 = boto3.client(</span><br><span class="line">        service_name=<span class="string">&quot;s3&quot;</span>,</span><br><span class="line">        endpoint_url=endpoint,</span><br><span class="line">        aws_access_key_id=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">        aws_secret_access_key=<span class="string">&quot;test&quot;</span>,</span><br><span class="line">    )</span><br><span class="line">    bucket = <span class="string">&quot;test-bucket&quot;</span></span><br><span class="line">    send = <span class="string">&quot;test.json&quot;</span></span><br><span class="line">    sample_data = make_dummy_data(iterate_num)</span><br><span class="line">    send = send_json(s3, sample_data, bucket, send)</span><br><span class="line">    <span class="keyword">return</span> send</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    Fire(main)</span><br></pre></td></tr></table></figure><p>テストデータを作成するにあたってmimesisとfireの2つの外部パッケージを使用しました。</p><p>mimesisはダミーデータを作成するパッケージ、fireはPythonスクリプトにコマンドライン引数を渡すパッケージです。fireは社内チャットで話題になっていたので今回使用してみました。非常に便利でした。皆さんぜひ、使ってみてください。utils直下で以下コマンドを実行することで先程作成した<code>test-bucket</code>に<code>test.json</code>を任意のデータ量で格納することができます。</p><p>今回は100行のダミーデータを作成しました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python utils.py 100</span><br></pre></td></tr></table></figure><h2 id="Lambdaの実行"><a href="#Lambdaの実行" class="headerlink" title="Lambdaの実行"></a>Lambdaの実行</h2><p>それではデプロイしたLambdaを呼び出します。AWS CLIのinvoke実行時に<code>--payload &#39;&#123; &quot;input_obj&quot;: &quot;test.json&quot; &#125;&#39;</code>を付与することでLambdaに<code>test.json</code>の場所を渡します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make invoke</span><br></pre></td></tr></table></figure><p>Lambdaの実行が完了していれば次のレスポンスが返ってきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;StatusCode&quot;</span>: 200,</span><br><span class="line">    <span class="string">&quot;LogResult&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ExecutedVersion&quot;</span>: <span class="string">&quot;<span class="variable">$LATEST</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>それではS3からLambdaの実行により生成されたExcelファイルをダウンロードします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make download</span><br></pre></td></tr></table></figure><p>以下の画像はETL処理元のJSONファイルとETL処理後のExcelファイルを比較したものです。<br>想定通りの結果が得られました！！🎉</p><img src="/images/20220202a/image.png" alt="実行結果" width="1200" height="676" loading="lazy"><p>本記事で使用したソースコードは以下のGitHubリポジトリにまとめています。</p><p><a href="https://github.com/orangekame3/pipenv-lambda">https://github.com/orangekame3/pipenv-lambda</a></p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回はPipenvとLocalStackを使用してLambdaの開発環境を構築しました。</p><p>普段はGo言語を使用してLambdaを作成しており、外部パッケージの依存を気にすることがありませんでした。今回Pythonを使用するにあたり、<a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/python-package.html">公式で紹介されているデプロイ方法</a>をもう少しスマートに行いたいと考えて試行錯誤しました。ひとつ自分として満足の行く形にたどり着けて良かったと思っています。</p><p>調べて見るとLambdaの開発環境としては<a href="https://aws.amazon.com/jp/serverless/sam/">Serverless Application Model</a>や<a href="https://github.com/serverless/serverless">Serverless Famework</a>などのテンプレートがあるようです。こうしたフレームワークも今後触ってみて自分なりのベストな開発環境を模索していきたいです。</p><p>最後までお付き合いいただきありがとうございました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/Lambda/">Lambda</category>
      
      <category domain="https://future-architect.github.io/tags/LoclStack/">LoclStack</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83/">開発環境</category>
      
      <category domain="https://future-architect.github.io/tags/Pipenv/">Pipenv</category>
      
      
      <comments>https://future-architect.github.io/articles/20220202a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>HACK TO THE FUTURE 2022本選のビジュアライザ作成しました</title>
      <link>https://future-architect.github.io/articles/20220201a/</link>
      <guid>https://future-architect.github.io/articles/20220201a/</guid>
      <pubDate>Mon, 31 Jan 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;テクノロジーイノベーショングループ コアテクノロジーユニットの山田です。&lt;br&gt;HACK TO THE FUTURE 2022本選のビジュアライザ開発担当したのでその体験記を残しておきます。&lt;/p&gt;
&lt;h2 id=&quot;HACK-TO-THE-FUTUREとは&quot;&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>テクノロジーイノベーショングループ コアテクノロジーユニットの山田です。<br>HACK TO THE FUTURE 2022本選のビジュアライザ開発担当したのでその体験記を残しておきます。</p><h2 id="HACK-TO-THE-FUTUREとは"><a href="#HACK-TO-THE-FUTUREとは" class="headerlink" title="HACK TO THE FUTUREとは"></a>HACK TO THE FUTUREとは</h2><p>HACK TO THE FUTUREはフューチャーグループが2018年からAtCoderで開催しているオンライン競技プログラミングコンテストで、全国から高度なプログラミングスキルを持つユース世代を発掘し、交流を図り切磋琢磨し合う場を提供することを目的として開催しています<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p><p><strong>【本選概要】</strong><br><strong>開催日時</strong>：2021年12月18日(土) 10:00〜20:30<br><strong>プログラム</strong>：プログラミングコンテスト(10:30~18:30)、表彰式・懇親会(任意)<br><strong>実施形式</strong>：オンライン (開会式・表彰式、懇親会はバーチャル空間oViceを利用)<br><strong>コンテストサイト</strong>：AtCoder「HACK TO THE FUTURE 2022本選」<br>＜本選出場者＞<a href="https://atcoder.jp/contests/future-contest-2022-final">https://atcoder.jp/contests/future-contest-2022-final</a><br>＜オープン参加＞<a href="https://atcoder.jp/contests/future-contest-2022-final-open">https://atcoder.jp/contests/future-contest-2022-final-open</a></p><p>HACK TO THE FUTUREは予選と本選に分かれていて<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>、今回のコンテストでは予選は744人、本選は（本選と同時刻に行われる本選オープンと合算で）186人の方が有効回答を提出しています。HACK TO THE FUTUREは厳密解を求めるのが難しい問題が出題されるヒューリスティックコンテストで、競技者はより良い解を求めることが要求されます。ヒューリスティックコンテストでは、競技者はアルゴリズム改善のヒントを得るために解を可視化するビジュアライザを使用することがあります。ビジュアライザは必ずしも公式で提供されるわけではありませんが、HACK TO THE FUTUREでは必ず提供しています。</p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>今回の問題は、与えられたプログラムの通りに部屋を掃除するお掃除ロボットがあり、入力で与えられた部屋を掃除するプログラムを計算するという問題でした。掃除できた範囲が広いほど高いスコアを得ることができ、部屋全体を掃除できた場合は更にプログラムの短さに応じたボーナススコアが入ります。</p><p>プログラムは<code>LRlrF()0123456789</code>の文字で構成された文字列で、L,R,l,r の命令により向きを変え、F命令で前進します。また、括弧で命令列をグループ化し、数値で命令列の繰り返し回数を指定できます。詳しくは<a href="https://atcoder.jp/contests/future-contest-2022-final-open/tasks/future_contest_2022_final_a">問題文</a>をご参照ください。</p><p><a href="https://img.atcoder.jp/future-contest-2022-final/e4ace3a9dfd2d994ac246560e10d2f4e.html">ビジュアライザ</a>を開き、input欄に「rFL3F」を1文字ずつ順番に追加入力してsimulateボタン押下してみてください。</p><p>output欄に1文字ずつ「r」と入力→simulateボタン押下→「r」のあとに「F」→simulateボタン押下→…と進めていくとロボットの動きが動いていくのが確認できます。</p><ol><li>r：壁を向いているので右を向く</li><li>F：前に壁がないため1マス進む</li><li>L：90度左を向く</li><li>3F：前に壁がないため3マス進む<br>※実際には作成したプログラムで出力した文字を貼り付けるとsimulateボタンを押下せず一気にロボット動かせます。</li></ol><p>入力前のビジュアライザの状態<br><img src="/images/20220201a/2022-01-20_11h20_48.png" alt="2022-01-20_11h20_48.png" width="982" height="918" loading="lazy"></p><p>入力後のビジュアライザの状態<br><img src="/images/20220201a/2022-01-20_11h15_49.png" alt="2022-01-20_11h15_49.png" width="987" height="915" loading="lazy"></p><p>アニメーション<br><img src="/images/20220201a/Animation.gif" alt="Animation.gif" width="1200" height="843" loading="lazy"></p><h2 id="ビジュアライザ開発業務の流れ"><a href="#ビジュアライザ開発業務の流れ" class="headerlink" title="ビジュアライザ開発業務の流れ"></a>ビジュアライザ開発業務の流れ</h2><h3 id="応募"><a href="#応募" class="headerlink" title="応募"></a>応募</h3><p>全社メールにビジュアライザ作成メンバー募集のメールが送られており、今年はコンテストに参加する予定もなくビジュアライザ作成業務に興味があったこともあり応募しました。</p><p>複数人応募があったようですが、運良く私が選ばれました。</p><h3 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h3><p>問題が完成する前段階で事前準備を行いました。</p><p>まずは、コンテスト開催を主導している塚本さんから過去のビジュアライザ開発の流れや注意点などを教えていただき、それから過去問のビジュアライザの実装を見てビジュアライザの実装について理解を深めつつ開発環境の構築を行っていました。</p><p>ビジュアライザは個人開発のため、これまではソース管理などは行っていなかったということだったのですが、塚本さんと共有するためのプラットフォームとしての意味も含めgitlabで管理することにしました。その後linterやformatterの導入を進めましたが、元々linterやformatterを使わずに開発されたプロダクトに後から導入するのには壁があり、結局eslintでJavaScriptのlintのみ行うようにしました<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。</p><p>cypressも導入できるとpush時にリグレッションテストを行ったりビジュアライザの動きをmp4で動画化して成果物として保存したりできるのかなと思っていたのですが、そこまで手が回らなかったのが残念でした。</p><h3 id="ビジュアライザ開発"><a href="#ビジュアライザ開発" class="headerlink" title="ビジュアライザ開発"></a>ビジュアライザ開発</h3><p>問題完成し、こちらで問題内容が確認できるようになってから開発を開始しました。部屋の情報とプログラムから掃除の過程をシミュレーションする処理はAtCoder社側で作成したwasmによって提供されており、可視化部分の開発に注力することができました。</p><p>ビジュアライザの開発では、まず入出力のバリデーションの処理を書き<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>、それから可視化に必要な素材集めを行いました。今回は壁のあるグリッドを掃除ロボットが掃除するという設定だったので、壁を表現できるタイル、汚れの表現、掃除ロボットの素材を探しました。</p><p>素材については<a href="https://pipoya.net/sozai/">ぴぽや倉庫</a>さんからお借りしました。ぴぽや倉庫さんの無料素材は素材データの転売のみ厳格に禁止で改変等については自由という非常に利用しやすいライセンスとなっているため、過去コンテストでも使用しています。ありがとうございます。</p><p>今回使用したいただいた元素材は以下の通りです。</p><img src="/images/20220201a/pipo-fog004a.png" alt="ホコリに使った素材" width="640" height="480" loading="lazy"><p>部屋の埃を表現に使用しました。埃っぽさを増すために明度をあげて使用しました。</p><img src="/images/20220201a/tiles_-_コピー.png" alt="タイル" width="256" height="192" loading="lazy"><p>壁付きの部屋を表現するのに使用した素材です。後述の素材のフローリング部分と合成して洋風の部屋にしています。</p><img src="/images/20220201a/32x32mapchip_20190721.png" alt="床" width="640" height="480" loading="lazy"><p>部屋の床をフローリングにするため、右下の部屋の床部分を切り出して前述の素材と合成しました。</p><img src="/images/20220201a/robot_-_コピー.png" alt="お掃除ロボット" width="96" height="128" loading="lazy"><p>お掃除ロボットです。目の部分を書き換えて使用しています。</p><h3 id="コンテスト中"><a href="#コンテスト中" class="headerlink" title="コンテスト中"></a>コンテスト中</h3><p>コンテスト中の質問<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>対応等については全て塚本さんが担当していたため、コンテスト中はTwitterで反応を見ていました。ビジュアライザ関連のトラブルが発生しないか不安でしたが、コンテスト中は不具合なく動いていたようでほっとしました。</p><h3 id="懇親会"><a href="#懇親会" class="headerlink" title="懇親会"></a>懇親会</h3><p>表彰式参加したかったのですが、共有機能にバグが見つかったため表彰式中は共有機能のバグ修正に追われていました<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>。表彰式終了の少し前に対応が終わり、なんとか懇親会には参加できました。<br>懇親会ではロボット（の名前が「お掃除高橋くん」なのに）かわいいという感想をいただいたりして、とても嬉しく思いました。（ロボットの名前が「お掃除高橋くん」というのは、そこで言われるまで気づいていなかったため驚きましたが）</p><h2 id="共有機能のバグについて"><a href="#共有機能のバグについて" class="headerlink" title="共有機能のバグについて"></a>共有機能のバグについて</h2><p>命令列の最後が<code>)</code>で終わる場合、末尾の括弧がURLとして判定されず不正な命令列となってしまう不具合が発生しました。今後同じ轍を踏まないように <a href="https://github.com/twitter/twitter-text">GitHub - twitter/twitter-text</a> を見て軽く調査しました。（内容に誤りがありましたらご指摘いただけると幸いです）</p><p>tweet内のURLの解析の正規表現は下図のように、<code>validUrlQueryChars</code> と <code>validUrlQueryEndingChars</code> が分かれているため、クエリ文字列として使用可能だが終端には置けない文字が存在します。</p><img src="/images/20220201a/2022-01-13_19h09_50.png" alt="正規表現" width="556" height="426" loading="lazy"><p>クエリ文字列として使用可能な文字集合</p><img src="/images/20220201a/2022-01-13_19h12_21.png" alt="正規表現" width="527" height="37" loading="lazy"><p>クエリ文字列の終端として使用可能な文字集合</p><img src="/images/20220201a/2022-01-13_19h13_34.png" alt="正規表現" width="399" height="40" loading="lazy"><p>今回問題となった<code>)</code>はクエリ文字列として使用可能だが、終端として使用可能な文字ではないためこのような現象が起きてしまったようです。今後共有機能を使う際には<code>#</code>などの文字を番兵として配置しておくのが無難でしょう。</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>ビジュアライザ開発が間に合わなかったら多方面に迷惑をかけてしまうのでとても緊張感がありましたが、無事開発できて安心しました。開発は普段の業務と大きく違う内容なので、新鮮味があり楽しく開発ができました。Twitterの方でもビジュアライズに言及いただき大変励みになりました。</p><p>今後ヒューリスティックコンテストがこれまで以上に盛り上がり、各社独自のビジュアライザ自作する流れができたら面白いなと思います。</p><p>反省点としては下記の3点です。</p><ol><li>メッセージやUIの修正を最後に回してしまったが、これらの修正は先に行い、後はアニメーションや機能追加の方のクオリティを向上させるだけという状態を作るべきでした。</li><li>共有機能でバグらせてしまい、競技者の皆様やAtCoder社の方にご迷惑をおかけしてしまった。</li><li>競技者にとってあると嬉しい機能を提案したかったが、いい案が浮かばず提案できなかった。</li></ol><p>詳しい日程は未定ですが、今年も開催予定なので参加お待ちしています！</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://prtimes.jp/main/html/rd/p/000000527.000004374.html">オンライン競技プログラミングコンテスト「HACK TO THE FUTURE 2022 for Youth」本選 12月18日開催</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">本選オープンも同時刻に行われ、そちらは誰でも参加することができます</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">弊社には社内にeslint-plugin-vueのメインコミッターの方もおり、linterなどの設定は社内のドキュメント通りに設定すれば済んでいたためこのあたりの作業をしたことがなかったのですが、やってみると細かいところで躓いたりして、きちんとした環境が用意されていることのありがたみを感じました。</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">いつもは、素材集め→アニメーション無しマスの描画→入出力のvalidation→wasmを用いたスコアや盤面の表示→アニメーション作成という順番で行っているそうです</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;">競プロの世界ではclarと呼ばれることが多い</span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="vertical-align: top; padding-right: 10px;">6.</span><span style="vertical-align: top;">結局AtCoder社の方がよりよい方法で対応してくださったため、私の対応は使われることはありませんでしたが。</span><a href="#fnref:6" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/">競技プログラミング</category>
      
      <category domain="https://future-architect.github.io/tags/AtCoder/">AtCoder</category>
      
      <category domain="https://future-architect.github.io/tags/HTTF/">HTTF</category>
      
      
      <comments>https://future-architect.github.io/articles/20220201a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>フューチャー社員が行ったIT系技術誌への寄稿まとめ(2017~2022年)</title>
      <link>https://future-architect.github.io/articles/20220128a/</link>
      <guid>https://future-architect.github.io/articles/20220128a/</guid>
      <pubDate>Thu, 27 Jan 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220128a/kindle-ga51f96f25_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;426&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220128a/kindle-ga51f96f25_640.jpg" alt="" width="640" height="426"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>フューチャーにおける、ここ4,5年でIT技術系の雑誌への寄稿をまとめました。せっかくのなのでブログ公開します。なお<a href="https://www.future.co.jp/press_room/media/">コーポレートサイトのプレスルーム</a>ではIT技術系以外のメディア露出もまとめられていますので、もっと知りたい方はそちらを確認いただけると幸いです。</p><p>たまたま部門別に良い感じに散らばっていたのでその単位でグルーピングしてまとめました。本当は寄稿したタイミングで、フューチャー技術ブログ側にも記念記事を書いてほしかったのですがけっこう抜けていることに気が付きました。今後は運営としてもウォッチして一緒にアピールできればなと考えています。</p><h2 id="SAIG（Strategic-AI-Group）"><a href="#SAIG（Strategic-AI-Group）" class="headerlink" title="SAIG（Strategic AI Group）"></a>SAIG（Strategic AI Group）</h2><p>SAIGは世界最先端の、ディープラーニングを中心とするAI技術をベースとして、顧客企業の抱える重要課題に挑戦する、先進的AIプロジェクトをリードしているチームです。</p><ul><li><a href="https://gihyo.jp/magazine/SD/archive/2019/201901">Software Design 2019年1月号</a><ul><li>自然言語処理・画像処理における線形代数の応用 ～データ処理アルゴリズムへの活用事例～(貞光さん)</li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2019/201903">Software Design 2019年3月号</a><ul><li>微分でつなぐ、機械学習とニューラルネットワーク ～データ分析も画像処理も最小二乗法で！～（上野さん、貞光さん）</li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2019/201909">Software Design 2019年9月号</a><ul><li>数字認識APIを作って実感 ～充実した機械学習ライブラリがPythonの魅力～（上野さん、貞光さん）</li><li>2019年の1,3,9号は上野さんが<a href="/articles/20191016/">Software Design 後記</a>というタイトルでまとめ記事を書いてくれています。</li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2021/202111">Software Design 2021/11月号</a><ul><li>Kaggleで知る機械学習 前処理から学習モデルの構築，スコアの上げ方までわかる<ul><li>第1章：Kaggleにエントリーしよう 登録からSubmitまでブラウザ上で完結（農見さん）</li><li>第2章：自然言語処理のコンペに挑戦① データの前処理・学習・推論の流れ（玉木さん）</li><li>第3章：自然言語処理のコンペに挑戦② モデル変更でスコアを底上げする（玉木さん）</li><li>第4章：くずし字認識のコンペに挑戦① パラメータチューニングの奥深さに触れる（金子さん）</li><li>第5章：くずし字認識のコンペに挑戦② さらなるスコアアップのためにKagglerがやっていること（金子さん）</li></ul></li><li>玉木さんの<a href="/articles/20211026b/">Software Design 2021年11月号「Kaggleで知る機械学習」を寄稿しました</a>記事が公開されています。</li></ul></li></ul><h2 id="CSIG-Cyber-Security-Innovation-Group"><a href="#CSIG-Cyber-Security-Innovation-Group" class="headerlink" title="CSIG(Cyber Security Innovation Group)"></a>CSIG(Cyber Security Innovation Group)</h2><p>CSIGは先進のセキュリティ技術で、未来の安心を創るチームです。</p><ul><li><a href="https://gihyo.jp/magazine/SD/archive/2017/201710">Software Design 2017年10月号</a><ul><li>システムのセキュリティチェックをもっと楽に 脆弱性スキャナVuls入門<ul><li>第1章：セキュリティ対応に追われる現場の悲鳴と，その解決策 （林さん）</li><li>第2章：Vuls導入チュートリアル （枇榔さん、牛田さん）</li><li>第3章：Vulsとさまざまなプロダクトとの外部連携 （牛田さん）</li><li>第4章：Vuls誕生秘話――OSSをバズらせるには（神戸さん）</li></ul></li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2018/201801">Software Design 2018年1月号</a><ul><li>システムのセキュリティ運用をもっと楽に・セキュアに 脆弱性管理サービスFutureVuls登場（林さん，牛田さん，枇榔さん）</li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2019/201911">Software Design 2019年11月号</a><ul><li>環境構築から使い方まで実践指導！<br>脆弱性スキャナVuls/Trivy/Dockle OSSを公開したら人生が変わった3人の開発者（神戸さん）</li></ul></li></ul><h2 id="TIG-Technology-Innovation-Group"><a href="#TIG-Technology-Innovation-Group" class="headerlink" title="TIG(Technology Innovation Group)"></a>TIG(Technology Innovation Group)</h2><p>TIGは、「最先端、且つ先進的なテクノロジーのプロフェッショナル集団」、「プロジェクト品質と生産性の向上」、「自社サービス事業の立ち上げ」を主なミッションとして発足したチームです。</p><ul><li><a href="https://gihyo.jp/magazine/SD/archive/2019/201903">Software Design 2019年3月号</a><ul><li>第3章：ES2015～2018を踏まえた、今どきのJavaScriptの書き方 （澁川さん）</li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2019/201905">Software Design 2019年5月号</a><ul><li>入門！ Go CLIツールとWebアプリを作って学ぶ 第3章（澁川さん）</li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2021/202107">Software Design 2021年7月号</a><ul><li>[特別企画］WSL 2本格入門 何ができるか，どこまでできるか（澁川さん）</li></ul></li><li><a href="https://gihyo.jp/magazine/wdpress/archive/2021/vol120">WEB+DB PRESS Vol.120</a><ul><li>最新vue.js 3コアチームが解説！ 基本から新機能まで完全網羅（第2章～第4章 太田さん）</li><li>久保さんによる<a href="/articles/20210203/">WEB+DB PRESS Vol.120 最新Vue.js3入門を読んで</a> という書評記事があります</li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2022/202201">Software Design 2022年1月号</a><ul><li>Cypressで作る“消耗しない”E2Eテスト環境 【1】Cypressで快適なテストライフを（木戸さん）</li><li>木戸さんの<a href="/articles/20211218a/">紹介記事</a></li></ul></li><li><a href="https://gihyo.jp/magazine/SD/archive/2022/202202">Software Design 2022年2月号</a><ul><li>Cypressで作る“消耗しない”E2Eテスト環境 【2】実運用に効くコードの書き方＆便利な機能（枇榔さん）</li></ul></li><li>まだ未発売ですが、連載は4回まで続くようです。3,4月号も期待ですね！</li></ul><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>まとめてみると、Software Design と WEB+DB PRESSの2つが対象になりました。フューチャーのITコンサルティングの技術スタックと相性が良いと言うのはなんとなく分かるような気がします。Cypressに関してはまだフューチャーメンバーの連載が続くようですので応援お願いします！</p><p>引き続き、フューチャーからこういった寄稿が増えていくと良いなと思っています。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E9%9B%91%E8%AA%8C/">雑誌</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%AF%84%E7%A8%BF/">寄稿</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%81%BE%E3%81%A8%E3%82%81/">まとめ</category>
      
      
      <comments>https://future-architect.github.io/articles/20220128a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CHAdeMO vs コンボ EV充電規格を比較する</title>
      <link>https://future-architect.github.io/articles/20220127a/</link>
      <guid>https://future-architect.github.io/articles/20220127a/</guid>
      <pubDate>Wed, 26 Jan 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニットの村上です。</p><p>大手自動車メーカーが続々とEVを発表したり、EUでは2035年にガソリン車の新車販売が禁止になったりと、近年電気自動車業界が盛り上がりを見せています。</p><p>EVといえば充電しなければならないのが特徴です。充電ステーションにはスマホのLightningやUSBなどのように、充電するための対応規格が存在します。今回はEVの充電規格について解説したいと思います。</p><h1 id="充電ステーションの通信規格"><a href="#充電ステーションの通信規格" class="headerlink" title="充電ステーションの通信規格"></a>充電ステーションの通信規格</h1><p>充電ステーションとEVの通信規格は多数存在し、シェア争いが過熱しています。主要な規格をまとめると、以下のようになります。</p><div class="scroll"><table><thead><tr><th>項目</th><th>CHAdeMO</th><th>GB/T</th><th>テスラ</th><th>CCS1</th><th>CCS2</th></tr></thead><tbody><tr><td>規格制定国</td><td>日本</td><td>中国</td><td>アメリカ</td><td>アメリカ</td><td>ドイツ</td></tr><tr><td>デジタル通信規格</td><td>CAN</td><td>CAN</td><td>CAN</td><td>PLC</td><td>PLC</td></tr></tbody></table></div><p>CCS1とCCS2は通称<strong>コンボ</strong>と呼ばれています。<br>テスラは独自規格を採用していますが、専用の変換アダプタを使うことによってCHAdeMOで充電することができます。</p><h2 id="CHAdeMO"><a href="#CHAdeMO" class="headerlink" title="CHAdeMO"></a>CHAdeMO</h2><p>上記で示したように、充電規格は多数存在しますが、現在はCHAdeMOへの統一化の動きがあります。</p><p>実際に2020年にCHAdeMO、GB/T、コンボに互換性のあるCHAdeMO3.0が完成しました。</p><img src="/images/20220127a/image.png" alt="チャデモ3.0" width="1200" height="620" loading="lazy"><p>参考：<a href="https://www.chademo.com/ja/chademo3-0/">https://www.chademo.com/ja/chademo3-0/</a></p><p>現在CHAdeMOの充電ステーションは欧州を中心に全世界で35600台以上普及しており、世界最大のカバレッジを誇っています。規格上の最大出力は900kWです。</p><h3 id="CHAdeMOの充電シーケンス"><a href="#CHAdeMOの充電シーケンス" class="headerlink" title="CHAdeMOの充電シーケンス"></a>CHAdeMOの充電シーケンス</h3><p>CHAdeMOではEVとCANによってデジタル通信を行いながら充電を進めます。</p><p>充電の手続きをざっくりとまとめると以下のようになります。</p><ol><li>EVと充電ステーションを接続</li><li>EVと充電ステーションの互換性を確認し、問題なければEVが準備完了状態に移行</li><li>車両コネクタロック</li><li>充電ステーションから給電開始</li><li>EVから充電停止命令を送ることで充電終了</li><li>車両コネクタロック解除</li><li>充電ステーションで支払い手続きを行う</li></ol><p>車両コネクタロックとは、充電コネクタがEVのプラグから離れないようにするための物理的なロックです。</p><p>安全面でのロックであることはもちろんですが、充電自体にしばらく時間がかかるため、充電を開始してからその場を離れることがあります。その際に風などで自然に外れたり、他人が勝手に外したりすることを防ぐ目的もあります。</p><p>また、このロックが解除された瞬間にEVとのデジタル通信が切断されます。</p><p>さらに給電が行われている最中は充電ステーションとEV間で以下のデータがやりとりされています。</p><div class="scroll"><table><thead><tr><th>充電ステーションから送信</th><th>EVから送信</th></tr></thead><tbody><tr><td>充電シーケンス管理番号</td><td>充電シーケンス管理番号</td></tr><tr><td>出力可能電圧値</td><td>電池総容量</td></tr><tr><td>出力可能電流値</td><td>電池耐久上限値</td></tr><tr><td>電池不適合</td><td>最大充電時間</td></tr><tr><td>車両コネクタロック</td><td>充電電圧上限値</td></tr><tr><td>充電システム異常</td><td>車両充電可能</td></tr><tr><td>充電器状態</td><td>充電電流指令値</td></tr><tr><td>現在出力電圧値</td><td>充電システム異常</td></tr><tr><td>現在充電電流値</td><td>車両シフト位置</td></tr><tr><td>残り充電時間</td><td></td></tr><tr><td>充電器異常</td><td></td></tr><tr><td>充電システム故障</td><td></td></tr></tbody></table></div><p>参考：<a href="https://kikakurui.com/d6/D61851-24-2014-01.html">https://kikakurui.com/d6/D61851-24-2014-01.html</a></p><p>これらのデータを用いてリアルタイムで充電状態を監視し、異常が発生した場合は安全にかつ素早く停止するようになっています。</p><p>CHAdeMOは物理的な安全面への配慮が徹底している規格です。</p><h2 id="コンボ"><a href="#コンボ" class="headerlink" title="コンボ"></a>コンボ</h2><p>コンボは欧州で生まれた規格で、デジタル通信はPLCを用いて行われます。</p><p><a href="https://en.wikipedia.org/wiki/Combined_Charging_System">Wikipediaによると</a>規格上の最大出力は350kWになることがアナウンスされています。</p><p>また、コンボは料金の支払い方法に大きな違いがあります。</p><h2 id="コンボの充電シーケンス"><a href="#コンボの充電シーケンス" class="headerlink" title="コンボの充電シーケンス"></a>コンボの充電シーケンス</h2><p>コンボでは支払方法を予め設定しておくことができます。</p><p>支払方法によって充電手順が若干変わってきますが、以下で一例を示します。</p><ol><li>EVに支払方法や契約情報をセットしておく<ul><li>充電ステーションへの直接支払い</li><li>EVへの自動課金</li></ul></li><li>EVと充電ステーションを接続</li><li>EVから指定の支払方法を送信（ここではEVへの自動課金を選択したと仮定）</li><li>充電ステーションで支払い契約情報の承認</li><li>EVから充電許可信号を送信</li><li>充電ステーションから給電開始</li><li>充電終了</li><li>充電ステーションから課金額をEVに送信</li></ol><p>このように、コンボではユーザの認証情報が充電コネクタを通して行われるケースがあるため、情報セキュリティ的な観点で安全性が高い設計となっています。</p><h2 id="CHAdeMOとコンボの比較"><a href="#CHAdeMOとコンボの比較" class="headerlink" title="CHAdeMOとコンボの比較"></a>CHAdeMOとコンボの比較</h2><p>CHAdeMOとコンボを比較した表が以下になります。</p><div class="scroll"><table><thead><tr><th>項目</th><th>CHAdeMO</th><th>コンボ</th></tr></thead><tbody><tr><td>普及地域</td><td>世界中</td><td>欧州</td></tr><tr><td>最大出力</td><td>900kW</td><td>350kW</td></tr><tr><td>認証情報の通信</td><td>なし</td><td>あり</td></tr><tr><td>規格の設計思想</td><td>物理的な安全性重視</td><td>データのセキュリティ重視</td></tr></tbody></table></div><p>スペックを比較すると現状はCHAdeMOが優勢と言えそうです。<br>しかしEV市場は今後さらに盛り上がっていくと思われるので、今後どうなっていくか注目していきたいですね。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>最後まで読んでいただいてありがとうございました！</p><p>2021年末にはトヨタがEVを大量に発表するなど、国内でもEVに対する盛り上がりが本格的になってきました。将来的には日本でもガソリン車に対する課税や販売制限などが設けられたりするのでしょうか？</p><p>EV市場の今後の動向には目が離せませんね。</p><h1 id="参考資料"><a href="#参考資料" class="headerlink" title="参考資料"></a>参考資料</h1><ul><li><a href="https://monoist.itmedia.co.jp/mn/articles/1409/03/news003_2.html">https://monoist.itmedia.co.jp/mn/articles/1409/03/news003_2.html</a></li><li><a href="https://car.watch.impress.co.jp/docs/series/tech/554577.html">https://car.watch.impress.co.jp/docs/series/tech/554577.html</a></li><li><a href="https://www.chademo.com/wp/pdf/QCtebikiRev32.pdf">https://www.chademo.com/wp/pdf/QCtebikiRev32.pdf</a></li><li><a href="https://monoist.itmedia.co.jp/mn/articles/1407/02/news014_2.html">https://monoist.itmedia.co.jp/mn/articles/1407/02/news014_2.html</a></li><li><a href="https://www.chademo.com/ja/">https://www.chademo.com/ja/</a></li><li><a href="https://www.chademo.com/ja/chademo3-0/">https://www.chademo.com/ja/chademo3-0/</a></li><li><a href="https://en.wikipedia.org/wiki/Combined_Charging_System">https://en.wikipedia.org/wiki/Combined_Charging_System</a></li><li><a href="https://kikakurui.com/d6/D61851-23-2014-01.html">https://kikakurui.com/d6/D61851-23-2014-01.html</a></li><li><a href="https://kikakurui.com/d6/D61851-24-2014-01.html">https://kikakurui.com/d6/D61851-24-2014-01.html</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/IoT/">IoT</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E9%9B%BB%E6%B0%97%E8%87%AA%E5%8B%95%E8%BB%8A/">電気自動車</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%80%9A%E4%BF%A1%E8%A6%8F%E6%A0%BC/">通信規格</category>
      
      <category domain="https://future-architect.github.io/tags/CHAdeMO/">CHAdeMO</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B3%E3%83%B3%E3%83%9D/">コンポ</category>
      
      
      <comments>https://future-architect.github.io/articles/20220127a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 1.18 Release Notes みんなで読む会を開催しました</title>
      <link>https://future-architect.github.io/articles/20220126a/</link>
      <guid>https://future-architect.github.io/articles/20220126a/</guid>
      <pubDate>Tue, 25 Jan 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220126a/top.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;261&quot;&gt;

&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;2022.1.14（金）に &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220126a/top.png" alt="" width="600" height="261"><p>TIGの伊藤真彦です。</p><p>2022.1.14（金）に <a href="https://future.connpass.com/event/235852/">Go 1.18 Release Notes みんなで読む会</a> というイベントを開催しました。</p><h1 id="Go-1-18-Release-Notes-みんなで読む会"><a href="#Go-1-18-Release-Notes-みんなで読む会" class="headerlink" title="Go 1.18 Release Notes みんなで読む会"></a>Go 1.18 Release Notes みんなで読む会</h1><p>フューチャーでは定期的に勉強会などのイベントを開催しています。詳細は<a href="https://future.connpass.com/event/235852/">connpass</a>で確認できます、今後もイベントを開催予定ですので、ぜひご確認ください。</p><p>Go 1.18 Release Notes みんなで読む会はタイトルの通り<a href="https://tip.golang.org/doc/go1.18">Go 1.18のリリースノート</a>を読み、適宜解説を行うイベントです。</p><p>がっつりと資料を作りこむスタイルではなく、社内勉強会くらいの軽めのノリでオープンなイベントを開催するという試みでもありました。詳しくは、<a href="/articles/20220125a/">がんばらない手ぶらオンライン勉強会</a>の記事で説明しています。</p><p>視聴枠40人が埋まり、楽しくイベントを開催できました、今後はこういったスタイルのイベントを高頻度に開催できると良いかもしれませんね。</p><h1 id="リリースノートの内容を紹介"><a href="#リリースノートの内容を紹介" class="headerlink" title="リリースノートの内容を紹介"></a>リリースノートの内容を紹介</h1><p>イベントで取り上げたリリースノートの注目ポイントを軽く紹介します。内容はYoutube動画で公開予定です。</p><h2 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h2><p>Go1.18の目玉機能と言えばGenericsの導入です。</p><p>Genericsは既に<a href="https://go.dev/doc/tutorial/generics">チュートリアル</a>も公開されていますが、<a href="https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md">Type ParametersProposal</a>で提案された内容に従った新機能が提供されます。</p><p>リリースノートの内容だけでもある程度紹介にはなりますが、非常に大きく複雑な新機能であるため、詳しくは様々な資料を見たり実際に触れながら勉強していくと良いでしょう。</p><p>またリリースノートにはメソッド内の型宣言など、Go 1.18では提供しないが、Go 1.19で追加を検討している機能もあるなど注意事項も書かれています。</p><h2 id="Bug-fixes"><a href="#Bug-fixes" class="headerlink" title="Bug fixes"></a>Bug fixes</h2><p>勿論バグの修正もリリースノートには記載されています。</p><p>今回は使用されていない変数をコンパイラが検知できないエッジケースの修正などが含まれています。普通に使っていて同じ現象に遭遇する事はほぼ無いであろうケースが紹介されており、これはこれで勉強になります。</p><h2 id="Port"><a href="#Port" class="headerlink" title="Port"></a>Port</h2><p>Portとはビルド対象のアーキテクチャにまつわる話です。AMD64、RISC-Vなど各アーキテクチャ向けにビルドした際の挙動の変更などが記載されています。CPU命令セットの話など詳しい人と一緒に読んでいくと大きな学びになります。</p><p>GoはPlan 9対応が強いよね。理由は開発チームにメンバーがいて..といった小話をしました。</p><h2 id="Fuzzing"><a href="#Fuzzing" class="headerlink" title="Fuzzing"></a>Fuzzing</h2><p>Genericsの導入が大きいため他の変更は少ないと思いきや、その他様々な新機能も提供されています。</p><p>Go1.18からテストでFuzzingを行う事が可能になります。詳しくは<a href="https://go.dev/doc/fuzz/">fuzzing landing page</a>をご覧ください。</p><p>イベント当日で私が喋った部分です。</p><h2 id="Go-command"><a href="#Go-command" class="headerlink" title="Go command"></a>Go command</h2><p><code>go get</code>、<code>go instal</code>等の各種コマンドの細かな変更から、前述のFuzzing機能の追加によるコマンド追加などが説明されています。</p><h2 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h2><p>ガベージコレクタの改善などが説明されています。</p><h2 id="Compiler"><a href="#Compiler" class="headerlink" title="Compiler"></a>Compiler</h2><p>コンパイル結果の改善やジェネリクスの追加によるコンパイル速度への影響などのトピックがあります。<br><code>-asan</code>オプションについてはリリースノートを読むまで知らなかった、という方も多いのではないでしょうか。</p><h2 id="Linker"><a href="#Linker" class="headerlink" title="Linker"></a>Linker</h2><p>リンカについては<code>-asan</code>オプションについて記述があります。</p><p>asanとはつまりAddress Sanitizerの事ですね。cgoを利用する際に起こり得るメモリエラーを検知できるようになります。</p><h2 id="Core-library"><a href="#Core-library" class="headerlink" title="Core library"></a>Core library</h2><p>Genericsの登場に伴い<code>constraints</code>パッケージが登場する事が大きなニュースではありますが、<code>net/netip</code>パッケージの登場などGenerics以外でも様々なニュースがありました。</p><p>Go 1.18はジェネリクスなど大きな目玉機能が多いので、コアライブラリなどの機能追加は減らそうという</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>リリースノートを読む会を開催しました</li><li>Genericsの導入が目玉ですがその他にも様々な変更があります</li><li><a href="https://future.connpass.com/">connpass</a>に今後のイベント予定を掲載しています</li></ul><p>次回は2022/1/28(金)に<a href="https://future.connpass.com/event/236138/">AWSを中心とした勉強会</a>を開催します。<br>ぜひご参加ください。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/TechNight/">TechNight</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%8B%89%E5%BC%B7%E4%BC%9A/">勉強会</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%96%8B%E5%82%AC%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">開催レポート</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-18/">Go1.18</category>
      
      
      <comments>https://future-architect.github.io/articles/20220126a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>がんばらない手ぶらオンライン勉強会</title>
      <link>https://future-architect.github.io/articles/20220125a/</link>
      <guid>https://future-architect.github.io/articles/20220125a/</guid>
      <pubDate>Mon, 24 Jan 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220125a/video-conference-gb478cc247_640.jpg&quot; title=&quot;Alexandra_KochによるPixabay&lt;からの画像&quot; alt=&quot;&quot; width=&quot;640&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220125a/video-conference-gb478cc247_640.jpg" title="Alexandra_KochによるPixabay<からの画像" alt="" width="640" height="384"><p>読書会とか勉強会をやるときに、どうしても負担が大きくなってくると継続が面倒になってきて消滅してしまったりします。継続のためには負担を減らすことが大切だな、と昔から考えてきました。最近実践している勉強会の時間以外の負担をなるべく減らす方法をいくつか紹介します。</p><h1 id="とちぎRuby式読書会"><a href="#とちぎRuby式読書会" class="headerlink" title="とちぎRuby式読書会"></a>とちぎRuby式読書会</h1><p>これは僕が栃木に住んでいた時に参加していた、とちぎRuby方式の勉強会です。対象の本を決めて、順番に音読しつつ、気になったところは質問したり、という方式です。事前に本を読んでまとめたりとかは不要です。</p><p>知見のある人が参加すると勉強会で得られるものはぐーんと濃くなります。とちぎRubyでは著者の咳さんがいる中でのdRuby本の読書会だったのでめちゃくちゃ刺激がありました。ちょっと経験値の高めな人が何人か入れるのが成功の秘訣かと思います。ただ、経験値が高い人が多すぎると、ｌ本とかから脱線しまくって、その人達の間の雑談で終わってしまいそうな気もするので、バランスも大切かもしれません。</p><p>この方式は密度の濃いドキュメントとか行間が広い文章を読むには適切かと思います。一方で、時間がかかるので「この部分はスキップしましょうか？」みたいなこともうまく入れるといいと思います。</p><p>この方式は、最近お客様と<a href="https://ja.reactjs.org/docs/getting-started.html">Reactの公式ドキュメントの読書会</a>をしていて採用しました。僕がちょうどクラス方式とか旧Reduxとか現Redux Toolkitとかいろいろ経験はしていたので、うまく盛り上げられたり、「ここは昔のクラス方式の話なので軽く読み飛ばしましょう」とか言えて、良い勉強会にできているのではないかな、と思っているところです。</p><h1 id="Amazon方式読書会"><a href="#Amazon方式読書会" class="headerlink" title="Amazon方式読書会"></a>Amazon方式読書会</h1><p>Amazonの会議方式として検索するとすぐ出てくるのが「まず黙読」というスタイルです。僕はAmazonで仕事したことはないので本当の公式なやり方はわからないのですが、15分とか時間を決めて黙読し、黙読しながらチャットに気になるところをコメント、その後30分とかで議論をする、みたいなスタイルで勉強会は行いました。</p><p>世の中の平均的な人は、音読する速度でしか文章の黙読もできないらしいのですが、まあ大学出ている人たちとかITの仕事をしている人ならほとんどは音読の数倍の速度で読めるはずなので、ゆっくり音読よりはちょっと長めの文章を短時間で進められます。本の1章（20-40ページ）を一回で、進めるみたいな感じでやりました。</p><p>この方式は議論が中心となるので、まったくの初心者からの勉強会には向かないかもしれません。書かれたコメントを拾ってファシリテーションしつつ、なされた議論も文章化してログに残したりと、ちょっと会議チックなスキルは必要になります。</p><p>ちょうど今、フューチャーメンバーと一緒に本を書いていて、その本のレビュー会をこの方式で行いました。直前にPDFを共有し（直前まで修正したりするので直前じゃないと共有できない）、黙読して議論し、それをissue化する、といった感じでした。</p><h1 id="その真ん中方式"><a href="#その真ん中方式" class="headerlink" title="その真ん中方式"></a>その真ん中方式</h1><p>黙読だと最初ちょっと黙ってしまうので、勉強会コンテンツというのを考えると、一般受けはあんまりしなそう、しかもコンテンツが英語だとじっくり音読も厳しいだろいうということもあり、順番に音読はするものの、ちょっと飛ばし気味にダイジェストで読んで議論する、みたいな方式にすれば社外向け勉強会でもできそうだ、という議論の末行ったのが先日行った<a href="https://future.connpass.com/event/235852/">Go 1.18リリースノートを読む会</a>の方式です。</p><p>ここ最近はGoリリースに合わせて会社のメンバーと技術ブログの連載を行っているのですが、その準備としてリリースノートを読んでおきたいね→勉強会にしようか→どうせなら社内に限定する必要ないし公開しちゃえ、という流れで企画しました。通常のフューチャーのTech Nightなんかは1か月近く前にはコンテンツを決めてConnpass上で募集をして・・・という感じでしたが、今回は実質作業は1週間ぐらい前から動いて、という感じでした（真野さんが全部やってくれました）。やろうということ自体は昨年末ぐらいから話はしてましたが、スライドとかも作らず、軽く事前に流し読みするぐらいで臨みました。</p><p>本当は音読も社外の人にも参加して欲しい気持ちはあった（当日も声掛けはしたが）のですが、いきなりだとそれも難しかろう、ということで一応フューチャーメンバーだけで回せるように場所ごとの担当を浅く決めていました。</p><p>なお、議論方式なので、今回はZoomのウェビナーではなく、ミーティングとして行っています。全員が発言できてしまうので、いきなりマイクオンでマツケンサンバとか歌いだす人がいると破綻したりというリスクもあり、人数が多すぎても難しいかも、ということで40人にさせてもらいました。</p><p>一人で読むのと比べると、何人かで読むとわからないところもコメントもらえたりしてみんなで読むのは確かにメリットはありました。また、当日参加した知人からは「勉強になりました」とコメントいただいたので、参加された方からも喜んでもらえたと思います。こちらのイベントのYoutube公開などは準備中ですので、お待ちください。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ここ1-2か月ぐらいで試しているいくつかの方式について紹介しました。それぞれ、勉強会で扱うコンテンツの質やメンバーのスキルなど、いろいろな要因でメリット・デメリットが出てくるかと思います。今のところ、どれも成功したな、という実感はありました。僕はいぜん、つまみぐい勉強法という本を共著で出しましたが、勉強会への参加も、勉強そのものも、「燃え尽きないこと」が一番大事だというのが、書籍を書くにあたって考えたことでした。本が出てからもう12年ですが、当時から「勉強会疲れ」ということは言われていました。移動時間もないオンラインの「準備がいらない（少ない）手ぶら勉強会」というのは、当時では到達できなかったもう1つのテクニックですね。</p><p>今回書いたのは、どれもオンライン勉強会での開催を前提としています。オフラインでもできるとは思いますが、それはまたコロナが納まって、やってみて、新しい知見が見つかったらまたブログに書こうと思います。</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><ul><li><a href="https://www.ohmsha.co.jp/book/9784274066092/">オーム社: dRubyによる分散・Webプログラミング</a></li><li><a href="https://future-architect.github.io/articles/20190729/">https://future-architect.github.io/articles/20190729/</a></li><li><a href="https://gihyo.jp/dp/ebook/2012/978-4-7741-5265-3">技術評論社: つまみぐい勉強法</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/">運営</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%8B%89%E5%BC%B7%E4%BC%9A/">勉強会</category>
      
      
      <comments>https://future-architect.github.io/articles/20220125a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Docker Desktop有償化！どのライセンス契約する？</title>
      <link>https://future-architect.github.io/articles/20220124a/</link>
      <guid>https://future-architect.github.io/articles/20220124a/</guid>
      <pubDate>Sun, 23 Jan 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;大きな組織でのDocker Desktop有料化が発表されて、いよいよFreeからの切り替え期限が今月末に迫っています。「Docker DesktopだからLinux版は無償だからWSL2に入れれば無料」みたいな解説もされていますが、Linux版のDocker</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>大きな組織でのDocker Desktop有料化が発表されて、いよいよFreeからの切り替え期限が今月末に迫っています。「Docker DesktopだからLinux版は無償だからWSL2に入れれば無料」みたいな解説もされていますが、Linux版のDocker Desktopもすでにベータリリースされており、そのうちLinux版も遅かれ早かれ有償化されるかと思います。</p><p>で、ライセンスもいくつかあるけど、どれを選べばよいのかを検討した記録を公開します。なお、2022/01時点の情報を元に書いており、最新情報はDockerのサイトをご覧ください。</p><p><a href="https://www.docker.com/pricing">https://www.docker.com/pricing</a></p><h1 id="有償ライセンスは3種類"><a href="#有償ライセンスは3種類" class="headerlink" title="有償ライセンスは3種類"></a>有償ライセンスは3種類</h1><p>Freeはフューチャーの規模では使えませんので、除外してみると、Pro, Team, Businessがあります。2022年1月時点の一人/月あたりの金額は以下の通りです。</p><img src="/images/20220124a/image.png" alt="ライセンス一覧" width="1200" height="725" loading="lazy"><div class="scroll"><table><thead><tr><th>Type</th><th align="center">年契約</th><th align="center">月契約</th><th align="left">メモ</th></tr></thead><tbody><tr><td>Pro</td><td align="center">$5</td><td align="center">$7</td><td align="left">個人ごとの契約？</td></tr><tr><td>Team</td><td align="center">$7</td><td align="center">$9</td><td align="left">シート数契約。組織に人を追加したり外したりは比較的自由にできそう。最初の5ユーザーはProと同じ金額。</td></tr><tr><td>Business</td><td align="center">$21</td><td align="center">$21</td><td align="left">おそらくTeam同様？ボリュームディスカウントがあるらしい</td></tr></tbody></table></div><p>外部公開しないのであれば、イメージを置いておく機能とか権限管理とかはまああんまり大事じゃないというか、AWSを使うならECR、GCPを使うならGCRと、コンテナレジストリは代替があるし、実際にクラウド環境にサービスデプロイするならどうせそっちを使うことになりますし、大きな会社だとNexusとかを社内に立ててたりもするでしょう。GitHubのもありますし。なのであんまり大事じゃなさそうです。もちろん、そのあたりは会社のビジネスにもよるのでそこは各自判断で。</p><p>Proアカウントはボタンを押すといきなりクレジットカード入力画面が出てきます。個人ごとにチャージですので、会社で全員が各自ぽちぽち購入申請を上げて・・・みたいなのが必要です。全員がコーポレートカード持っているとかであればこれでもいいかもしれません。</p><img src="/images/20220124a/image_2.png" alt="支払い方法" width="951" height="719" loading="lazy"><p>Teamは組織名を決めて、人数（シート数、最小5ライセンス）を入れて、その後クレジットカード番号を入れることになります。複数人数分まとめて支払える点がProよりも良いですね。ただ、組織名はユニークでなければならず、チームごとに決済を分けたい、となるとチーム名も分かれることになるし、複数チームに所属する人はその分お金がかかるというのはデメリットです。まあDocker Hubにイメージをpushしたり、そこでプロジェクトのイメージ管理をしようとかしないで、ローカルでDocker Desktop使うだけなら、仕事上は複数チームでも1つのTeamに所属してお金を払っていたらまあ問題はないかと思います。大きなチーム（org）を内部でチームに分けることは可能っぽく、その場合は複数チームに入ってもお金は重複してかからなそうなので、なるべく多くのチームにして支払いをまとめたほうがよさそうです。プロジェクト按分とかを事後に行う必要があると思いますが。</p><p>なお、マニュアルを見ると、Teamではシート数が固定で、だれを入れるかは自由にあとから変更できるので、プロジェクトのメンバー入れ替えとかにも対応できそうです。シート数の増減は可能（増加は日割りで元の契約期間にプラス、減少は次回の支払い時にその分減額、月払い、年払い混在は不可）みたいな感じのようです。</p><p><a href="https://docs.docker.com/subscription/add-seats/">https://docs.docker.com/subscription/add-seats/</a></p><img src="/images/20220124a/image_3.png" alt="組織設定" width="952" height="673" loading="lazy"><p>Businessは試してないですが、おそらく営業とやりとりして見積して・・・という流れになるかと思います。請求書払いができるってのがBusinessのメリットしてあげられていますね。あとは、長らくComing Soonだったシングルサインオンが1/7ぐらいに突然やってきたので、それがあったほうが管理が楽、というのがあればBusinessがいいんじゃないでしょうか。</p><p>フューチャーのうちの部署ではとりあえず組織とかプロジェクト（フューチャーグループ各社をまたぐ場合）ごとに申請しよう、ということになったので、各プロジェクトごとにTeamでの申請かな、と思っているところです。実運用始まって実際にアカウント数とか見えてきたらどのぐらいディスカウントしてもらえるか問い合わせたうえでBusinessにアップグレードでもいいかもしれません。</p><h1 id="プロジェクト参画のリードタイムを減らすために"><a href="#プロジェクト参画のリードタイムを減らすために" class="headerlink" title="プロジェクト参画のリードタイムを減らすために"></a>プロジェクト参画のリードタイムを減らすために</h1><p>プロジェクトに参画してすぐで購入申請のリードタイムとか考えると、Dockerなしでもできる手立ては用意した方がいいのかな、と思っています。今のところは候補としてはpodmanですかね。BUILDKITは使えないようですが、docker-composeが使えるようにDocker互換性がさらに増えていますし、Kubernetesのマニフェストも食えます。</p><p><a href="https://rheb.hatenablog.com/entry/podman3_docker_compose">https://rheb.hatenablog.com/entry/podman3_docker_compose</a></p><p>もちろん、podmanを最初から全員使うという手もあるかもしれませんが、どうしても情報がまだまだ少ないし、まずは安定していて知見もたまっているDockerを使いつつ、アプリ本体をビルドとか開発環境整備用途ではなくて、ビルド済みのミドルウェアの起動、アプリはローカルネイティブに起動ぐらいの用途にとどめておこうかな、と考えているところです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Docker/">Docker</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%A9%E3%82%A4%E3%82%BB%E3%83%B3%E3%82%B9/">ライセンス</category>
      
      
      <comments>https://future-architect.github.io/articles/20220124a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Best Blogger of the Year 2021 受賞者を発表します</title>
      <link>https://future-architect.github.io/articles/20220121a/</link>
      <guid>https://future-architect.github.io/articles/20220121a/</guid>
      <pubDate>Thu, 20 Jan 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220121a/badge-gf28962ed1_640.png&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;320&quot;&gt;

&lt;p&gt;こんにちは。技術ブログ運営の伊藤です。&lt;/p&gt;
&lt;p&gt;今回は、社内の取り組みであるBest</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220121a/badge-gf28962ed1_640.png" alt="" width="640" height="320"><p>こんにちは。技術ブログ運営の伊藤です。</p><p>今回は、社内の取り組みであるBest Blogger of the Yearの紹介と、2021年の受賞者を発表します。</p><h2 id="Best-Blogger-of-the-Year（べすぶろ）とは"><a href="#Best-Blogger-of-the-Year（べすぶろ）とは" class="headerlink" title="Best Blogger of the Year（べすぶろ）とは"></a>Best Blogger of the Year（べすぶろ）とは</h2><p>Best Blogger of the Year（べすぶろ）は、社外に影響を与えた記事を執筆した人を表彰する仕組みとして2020年より開催しています。べすぶろは技術ブログ部門と<a href="https://note.future.co.jp/">未来報</a>（フューチャーの人を紹介するオウンドメディア）との共催で開催します。<br>記事の選定基準は、</p><ul><li><strong>品質</strong>：読者が望む内容を適切に文章に落とし込んで価値ある記事である。</li><li><strong>ユニーク</strong>：記事の固有性がある。唯一無二の記事になっている。</li><li><strong>記事数</strong>：発信に積極的に取り組んでいる。数多くの記事を出している。</li><li><strong>影響度</strong>：記事によって何らかの影響が可視化される。（多く閲覧された（PV）、行動変容があった（内定承諾に影響した、ビジネス展開に影響した）等）</li></ul><p>の4つを基準とし、3名選出しました。</p><p>選出された3名の中での順位はつけてはいないです。2021年は105名の寄稿者がいましたので、選出されるためにはよっぽど目立った記事を書くか、定期的なアウトプットが求められたのかなと思います。</p><h2 id="2021年受賞者の発表"><a href="#2021年受賞者の発表" class="headerlink" title="2021年受賞者の発表"></a>2021年受賞者の発表</h2><p>さて、2021年のべすぶろ受賞者を発表します。寄稿数順に記載しています。</p><div class="scroll"><table><thead><tr><th>名前</th><th>寄稿数</th><th>代表記事</th><th>選出理由</th></tr></thead><tbody><tr><td>澁川喜規</td><td>32</td><td><a href="/articles/20210611a/">サーバーアプリ開発環境(Python／FastAPI)</a></td><td>今年1番記事を寄稿いただき、数々の記事ではてブのランキング入りを果たした。GoやPythonの特定の言語だけでなく、近年盛り上がりをみせるFlutterの記事も複数公開し、技術の幅を魅せるきっかけにもなっている。</td></tr><tr><td>伊藤真彦</td><td>31</td><td><a href="/articles/20210812a/">Go 1.17のtesting新機能</a></td><td>特定の分野の記事に問わず、AWSやGo言語、さらには自作OSSなどのネタも投稿。技術ブログ主催の連載にも数多く参加し、資格の合格体験記やイベントの登壇レポートなど、フューチャーとしての技術力の向上にも寄与していたため。</td></tr><tr><td>枇榔晃裕</td><td>2</td><td><a href="/articles/20210621a/">どうしてHTML5が廃止されたのか</a></td><td>フロントエンド連載にて寄稿いただいた、HTML5の廃止を題材とした記事は、連日にわたってはてブへのランクインし、技術ブログのはてブ数では歴代1位になった。また、Twitterのトレンド入りも果たし、業界の中でも話題になった。</td></tr></tbody></table></div><p>2021年はこの3記事を選出しました。いずれもはてブのランク入りを果たしたり、Twitterで話題になった記事なので、皆さんも1度は読んだ記事も上がっているのではないでしょうか？</p><h2 id="2020年受賞者に付いて"><a href="#2020年受賞者に付いて" class="headerlink" title="2020年受賞者に付いて"></a>2020年受賞者に付いて</h2><p>2020年も社内では表彰していたものの記事として公開はしていなかったため、こちらも本記事で合わせて公開します。全体の寄稿者は81名でした。</p><div class="scroll"><table><thead><tr><th>名前</th><th>寄稿数</th><th>代表記事</th><th>選出理由</th></tr></thead><tbody><tr><td>澁川喜規</td><td>21</td><td><a href="/articles/20200513/">仕事でPythonコンテナをデプロイする人向けのDockerfile (1): オールマイティ編 </a> など多数</td><td><a href="/articles/20200910/">イベント登壇</a>から技術ブログの各種関連記事まで幅広いジャンルで記事投稿があり、記事に対する反響も大きくSNSでシェアなど拡散がみられる。寄稿数がトップ。PVも2万超えのものもあり、認知度向上に寄与している。</td></tr><tr><td>多賀聡一朗</td><td>6</td><td>AirFlow記事全般</td><td><a href="/tags/Airflow/">AirFlow記事</a>は日本語トップの検索結果になるものが多く。影響力が大きい。<a href="/articles/20200708/">Zuora記事</a>は社外パートナー推進のきっかけにもなり、ビジネスにも影響があった。</td></tr><tr><td>ヴーホアン・ミン</td><td>1</td><td><a href="/articles/20200203/">PlantUML規約</a></td><td>おそらく世界初のPlantUML規約を公開し、エポックメーキングとなった。GitHubに<a href="https://github.com/future-architect/puml-themes">OSS</a>としても公開している。幅広い人に向けてフューチャーの知名度と、良い意味での技術へのこだわりをアピールできた。</td></tr></tbody></table></div><p>なんと、澁川さんが2年連続での受賞となります！</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>フューチャー技術ブログは社員の有志という形で寄稿されて成り立っているので、今後もこういった称える仕組みを継続していければと思います。<br>また、皆さんが気になった記事はコメントやシェアをしていただくと、励みにもなりますので、今後ともよろしくお願いいたします！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/TechBlog/">TechBlog</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/">運営</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%99%E3%82%B9%E3%83%96%E3%83%AD/">ベスブロ</category>
      
      
      <comments>https://future-architect.github.io/articles/20220121a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>数字と振り返るフューチャー技術ブログ（2021）</title>
      <link>https://future-architect.github.io/articles/20220120a/</link>
      <guid>https://future-architect.github.io/articles/20220120a/</guid>
      <pubDate>Wed, 19 Jan 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220120a/top.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;441&quot; loading=&quot;lazy&quot;&gt;


&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220120a/top.png" alt="" width="600" height="441" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>技術ブログ運営の真野です。年があけましたが、<a href="/articles/20201127/">2020年</a>に引き続き2021年の技術ブログの振り返りをお届けしたいと思います。</p><h2 id="キーメトリクスについて"><a href="#キーメトリクスについて" class="headerlink" title="キーメトリクスについて"></a>キーメトリクスについて</h2><p>この技術ブログ運営の指標としてPVやSNSでのリアクション数などは追っていません。理由は次です。</p><ol><li>PVを真面目にあげようとすると、タイトル釣りやエッセー的な内容を増やしたくなり、趣旨であるフューチャーのITコンサルティング業務を通して得た知見を共有するという趣旨が薄まる恐れがある</li><li>PVが少なくても、特定の領域を追っている人に刺さる記事は重要であると認識していること</li><li>一般ウケしない記事を書いてしまっても次回作以降で、バズる記事を書いてくれる人もいる。あまりそこに囚われないようにしたい</li><li>運営上、PVやSNSでのリアクションを追わないけど、バズった場合はチームで礼賛すれば良い</li></ol><p>そのため、このブログで気にしているのは以下です。</p><ul><li><strong>記事の投稿数/月</strong></li><li><strong>寄稿者のユニークユーザ（UU）数/年</strong></li><li><strong>連載企画の本数および、それぞれの参加人数</strong></li></ul><p>投稿数がある程度活発であれば、IT技術組織的な活動がある一面ではヘルシーに行われていると思うからです。さらに寄稿者UUですが、寄稿者が増えれば増えるほど様々な観点の記事が増えるためユニークな媒体になると考えており、広く当社の技術的な成果を伝えられるのでは？と考えています。連載企画も発信内容の偏りを意思入れで散らすことや、単発だと出てこないようなテーマを拾い上げるキッカケにしたいため、企画本数やそこに参加しているメンバーの数にはこだわっていきたいと思っていました。</p><p>年間目標はなんとなく300本にしました。実績は281本で届きませんでしたが、2020年から1.5倍になっており大健闘かとおもっています。</p><div class="scroll"><table><thead><tr><th>year</th><th>objectives</th><th>results</th></tr></thead><tbody><tr><td>2021</td><td>300</td><td>281</td></tr><tr><td>2020</td><td>48</td><td>190</td></tr><tr><td>2019</td><td>24</td><td>75</td></tr></tbody></table></div><p>月別で見てもコンスタントに公開できており、2022年もこのペースを守りたいと思っています。</p><img src="/images/20220120a/月別投稿数.png" alt="月別投稿数.png" width="1200" height="387" loading="lazy"><p>寄稿者UU数ですが、2021年は105名。これもかなりがんばれたと思います。フューチャーは1000名を超えるITコンサルタントが所属しているため、このうち1割程度が関わったということでしょうか。2022年は130名を目指したいと思います。</p><img src="/images/20220120a/寄稿者数の推移.png" alt="寄稿者数の推移.png" width="1200" height="245" loading="lazy"><p>連載企画は<a href="/articles/20210112/">技術ブログの2021年の連載予定を発表します </a>にある通り、14本開催できました。CNCFは惜しくも開催できませんでした。2022年は月1ペースでの開催を行う予定。スポットで2,3本増やしていく予定です。今の運営的には月2開催だとかなり厳しいので、月1程度がサステナブルです。</p><p>なお、繰り返しですがSNSなどで盛り上がった記事についてはできる限り社内で褒め合えるようにシェアしています。</p><h2 id="PV数"><a href="#PV数" class="headerlink" title="PV数"></a>PV数</h2><p>PVを追っていないと言いながらも共有です。上がると嬉しいですね。6月はスパイクして32万PV/月を声、2021年下期は12～14万PV/月でした。2020年と比較すると、記事のストック効果もあり1~2割成長しているのかな？と思っています。</p><img src="/images/20220120a/PV.png" alt="PV.png" width="1200" height="206" loading="lazy"><p>6月スパイクの要員は <a href="/articles/20210621a/">どうしてHTML5が廃止されたのか </a> の記事がバズったからです。素晴らしい吸引力。</p><h2 id="ベストブロガーオブザイヤー"><a href="#ベストブロガーオブザイヤー" class="headerlink" title="ベストブロガーオブザイヤー"></a>ベストブロガーオブザイヤー</h2><p>年1ペースで、技術ブログからは3名、発信力があった方を讃えています。ギフト券をプレゼントもしているようです。</p><p>2020年に引き続き、<a href="https://future-architect.github.io/authors/%E6%BE%81%E5%B7%9D%E5%96%9C%E8%A6%8F/">澁川さん</a>が素晴らしい貢献をしてくれています。社外にもファンが多数いらっしゃるということも理解できるほど、良記事を大量にアウトプットされていて尊敬します。これについては<a href="/articles/20220121a/">別の記事</a>で紹介しています。</p><h2 id="人気の記事分析"><a href="#人気の記事分析" class="headerlink" title="人気の記事分析"></a>人気の記事分析</h2><p>PVで見る人気の記事や、2020年いちばん寄稿してくれた人は？といった調査を2020年は行いましたが、これはブログの機能として実装したので、だれでも簡単に見ることができるようになりましたので、今年はスキップします。</p><h2 id="記事・寄稿者を増やす取り組み"><a href="#記事・寄稿者を増やす取り組み" class="headerlink" title="記事・寄稿者を増やす取り組み"></a>記事・寄稿者を増やす取り組み</h2><p>ブログ連載自体に、地道に改善を続けています。</p><h3 id="1-Bar-Techblogの開催"><a href="#1-Bar-Techblogの開催" class="headerlink" title="1. Bar Techblogの開催"></a>1. Bar Techblogの開催</h3><img src="/images/20220120a/bar_techblogの募集ページ.png" alt="bar_techblogの募集ページ" width="959" height="523" loading="lazy"><p>社内向けで技術ブログの運営についての意見吸い上げや、寄稿に悩んでいる人の相談室を2回開催しました。ブログ機能についても色々フィードバックをもらい、機能上はかなり強化できたので、ユーザーの声を聞く大事さを学びました。</p><p>このかっこいい画像はもうひとりの技術ブログ運営の伊藤太斉が作ってくれて、企画もぜんぶやってくれました。</p><h3 id="2-ブログ機能のアップグレード"><a href="#2-ブログ機能のアップグレード" class="headerlink" title="2. ブログ機能のアップグレード"></a>2. ブログ機能のアップグレード</h3><p>記事数がここ2年で3倍以上になっているため、記事を探しやすくする工夫や、回遊率を上げるための施策をかなり増やしました。</p><ol><li>記事検索ボックスの追加</li><li>Google AnalyticsのPVから、<a href="https://future-architect.github.io/#popular">人気の記事を週・月・年別</a>に追加</li><li>各記事に対して、タグ情報から関連する記事を表示</li><li>ブログ内で被リンクされている記事を表示</li><li>著者による記事の絞り込み</li><li>著者ページに投稿頻度のグラフなどメトリクス表示</li><li><a href="https://future-architect.github.io/authors/">著者一覧に投稿数のランキング</a>を表示</li><li>最近投稿された記事に NEW ラベルを表示</li><li>トップページの表示件数を10→25に変更</li><li>記事のサイドバーに目次（toc）を表示</li></ol><p>他にも様々な対応（CSS調整、アクセシビリティ、数式表示の最適化、記事のタグ付け改善）などを継続的に行っています。</p><p>Lighthouseによる検査も定期的にチェックしています（ユーザー補助がちょっと下がっていることにこの記事を書いていて気が付きました）。</p><img src="/images/20220120a/lighthouse結果.png" alt="lighthouse結果.png" width="1200" height="280" loading="lazy"><p>最適化の余地はまだまだ多分に残っていますが、ある程度快適に参照できるようにはなっているのではないでしょうか。</p><h3 id="3-Future-Tech-Night（勉強会）との連動"><a href="#3-Future-Tech-Night（勉強会）との連動" class="headerlink" title="3. Future Tech Night（勉強会）との連動"></a>3. Future Tech Night（勉強会）との連動</h3><p><a href="https://future.connpass.com/">connpassのフューチャーページ</a> で募集している勉強会との連動を強化しました。できる限り毎回、登壇者レポートを記載してもらうようにしています。勉強会を開催して終わりではなく、登壇資料・登壇レポートの添付で、資料の添付も2021年だけで40ほど増えました。引き続きよりオープンな運営を目指したいと思います。次は動画撮影しYoutubeでの公開も目指しています。</p><h3 id="4-連載のインデックス記事"><a href="#4-連載のインデックス記事" class="headerlink" title="4. 連載のインデックス記事"></a>4. 連載のインデックス記事</h3><p>ブログ連載のインデックス記事を丁寧に作成するようにしました。<a href="/articles/20210112/">インデックスをまとめたインデックス記事</a>もあります。本数ベースでいくと水増しですが、こういった丁寧な運用をすると、リンクのシェアなども行いやすくなるので、記事数が増えてきて初見の人からすると記事を相対的に見つけにくくなっていることを踏まえ、おまとめページもできる限り同期をとってメンテナンスしていきます。</p><h2 id="2022年に向けて"><a href="#2022年に向けて" class="headerlink" title="2022年に向けて"></a>2022年に向けて</h2><p>数を追ってもということはあるのですが、ブログ本数300本、著者UU数130人を目指したいと思っております。社員のみなさまの協力を、、なにとぞお願いします🙏</p><p>7/18にテックカンファレンスを開催したいと思っており、こちらも技術ブログ側にレポートや動画を載せていきたいです。</p><p>技術ブログでの発信を通して、このブログを見てくださる皆まさに少しでもお役に立ちたいと思っています。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>2021年は順調に運営できた。ブログ自体の機能も強化し改善サイクルを回せた。<br>2022年も地道な改善を回し続けることと、カンファレンス開催とコラボレーションしていきます。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/TechBlog/">TechBlog</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/">運営</category>
      
      <category domain="https://future-architect.github.io/tags/PV/">PV</category>
      
      
      <comments>https://future-architect.github.io/articles/20220120a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>DatoCMSでポートフォリオをサクッとつくる</title>
      <link>https://future-architect.github.io/articles/20220119a/</link>
      <guid>https://future-architect.github.io/articles/20220119a/</guid>
      <pubDate>Tue, 18 Jan 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220119a/color_full_logo.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;371&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220119a/color_full_logo.png" alt="" width="1200" height="371" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG/DXユニット所属の宮永です。</p><p>今回はタイトルの通り、Headless CMSサービスである<a href="https://www.datocms.com/">DatoCMS</a>をつかってポートフォリオをサクッと作成する方法をご紹介します。</p><p>この記事をお読みの皆様はご自身のポートフォリオサイトはお持ちでしょうか？</p><p>GitHubPagesやWordPressなど、コーディングを行わずともWebサイトを作成できるサービスはたくさんあります。上記のようなサービスは比較的低コストで簡単にウェブサイトを作成ができる一方で拡張性やフロントエンドの自由度は高くありません。フロントエンドを自力でカスタマイズしつつ、お手軽にサイトを作りたいと思ったとき、次に考えるサービスはHeadless CMSの類いであると思います。今回紹介する<a href="https://www.datocms.com/">DatoCMS</a>もHeadless CMSサービスの一つです。</p><p>本記事では<a href="https://www.datocms.com/">DatoCMS</a>を使用してポートフォリオサイトを作成する方法をハンズオン形式で紹介します。</p><p>サービス登録に必要なのはGitHubアカウントとメールアドレスだけなので、記事を読み進めながら取り組んでいただければと思います。</p><h1 id="Headless-CMSとは"><a href="#Headless-CMSとは" class="headerlink" title="Headless CMSとは"></a>Headless CMSとは</h1><p>Headless CMSについての解説が和製Headless CMSサービスである<a href="https://blog.microcms.io/what-is-headlesscms/">microCMSのブログ記事</a>に記載されていたので以下引用します。</p><blockquote><p>ヘッドレスの「ヘッド」は、ビュー（表示する画面）を指します。ヘッドレスなので、ビューの無いCMSということになります。<br>ビューがないとはどういう事でしょうか？<br>そもそもCMSとはContent Management Systemの略で、つまりはコンテンツ管理システムを指します。従来のCMSはコンテンツを入稿するシステムとコンテンツを表示するビューが合わさったものでした。<br>最も代表的な例としてはWordPressが挙げられます。また、はてなブログやQiita、NoteなどもCMSです。<br>CMSのビュー（見た目）には以下の三種類があります。<br>サービス固有の画面（Qiita、Note、Mediumなど）<br>テンプレートを選択できるもの（WordPress、はてなブログなど）<br>自由に作成可能なもの（WordPress）<br>※ はてなブログ等もCSSの範囲であれば自由に見た目を変更可能<br>※ WordPressはHTMLの骨組みから自由に作成可能<br>このビューに当たる部分が無いのがヘッドレスCMSです。</p></blockquote><p>例えば、ブログサイトの作成を考えるとき、入稿システムはHeadless CMSに預けて、ビューの管理をコーディング（Vue.jsやNuxt.jsなど）で作成するといった事例が考えられます。バックエンドの開発を自分で行わずともブログサイトを作成できるのはとても便利ですね。</p><h1 id="DatoCMSをはじめる"><a href="#DatoCMSをはじめる" class="headerlink" title="DatoCMSをはじめる"></a>DatoCMSをはじめる</h1><p>それでは早速<a href="https://www.datocms.com/">DatoCMS</a>をはじめましょう。こちらの<a href="https://dashboard.datocms.com/signup">リンク</a>からサービスの登録ができます。</p><p>なんと登録するときにクレジットカードその他個人情報の登録は不要です。メールアドレスと名前を用意すればすぐにサービスを始めることができます。</p><img src="/images/20220119a/image.png" alt="ユーザ登録" width="1200" height="631" loading="lazy"><p>登録が完了したら、下記のページに遷移します。[New project]で新規プロジェクトを作成しましょう。</p><img src="/images/20220119a/image_2.png" alt="New project" width="1174" height="909" loading="lazy"><p>新規プロジェクトを作成すると、スクラッチから作成する「Blank project」と「Demo project」の2つを選択することができます。<br>「Demo project」にはフレームワークや用途に沿って複数のスタータープロジェクトが用意されています。</p><img src="/images/20220119a/image_3.png" alt="Demo project" width="991" height="1007" loading="lazy"><p>今回は「サクッと」ポートフォリオを作成したいので<a href="https://www.datocms.com/marketplace/starters/vue-js-profile-card">Vue.js Profile Card Website</a>を選択します。</p><p>[Start project]を選択すると以下のようなポップアップ画面が立ち上がります。ホスティングサービスはNetliftyとVercelを選ぶことができます。今回はNetliftyを選択します。</p><p>プロジェクト名とホスティングサービスの入力が完了したら、ご自身のGitHubアカウントとNetliftyとを連携します。</p><img src="/images/20220119a/Screenshot_from_2022-01-15_15-20-56.png" alt="Create demo project" width="957" height="610" loading="lazy"><p>[Create project]を選択すると、スタータープロジェクトのフォークとNetlifyへのデプロイがはじまります。</p><img src="/images/20220119a/image_4.png" alt="Netlifyデプロイ" width="946" height="607" loading="lazy"><p>プロジェクトの作成が完了すると以下のような画面に切り替わります。この時点でサイトはデプロイされています。</p><p>自身のGitHubリポジトリにフォークされたプロジェクトからフロントエンドを編集することができます。</p><img src="/images/20220119a/image_5.png" alt="GitHubリポジトリにフォークされたプロジェクト" width="952" height="587" loading="lazy"><p>以下がデフォルトのサイトの画面です。</p><p><a href="https://vuejs-datocms-demo.netlify.app/">https://vuejs-datocms-demo.netlify.app/</a></p><img src="/images/20220119a/image_6.png" alt="image.png" width="1200" height="612" loading="lazy"><p>すでにかっこいいですね。</p><p>もちろんレスポンシブにも対応しています。</p><img src="/images/20220119a/responsive.png" alt="responsive" width="791" height="632" loading="lazy"><p>それでは、このスタータープロジェクトをベースにカスタマイズしていきます。</p><p>まずはローカルでクローンしたプロジェクトを開き、<code>.env</code>に<code>API_KEY</code>を格納します。<br>このとき、キャッシュがクリアされていないと<code>.gitignore</code>に<code>.env</code>が記載されていてもリモートにアップロードされてしまうので注意してください。🙅</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>を実行したあと、以下コマンドでサーバーを起動します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p><code>http://192.168.10.108:8080/</code>で確認ができると思います。</p><p>まずはコーディングは行わず、スタータープロジェクトで実装されたモデルを変更していきます。</p><p>プロジェクトにログインすると下記画像のような編集画面に遷移します。<br><code>Profile</code>、<code>Theme</code>、<code>Social</code>は初期設定で実装されているものです。<code>Product</code>は私が新規に作成しました。</p><p>下記の画面では<code>Profile</code>を選択しています。初期設定では<code>Photo</code>にRebeccaさんの写真が登録されています。</p><p>写真や名前などプロフィール欄を変更します。</p><img src="/images/20220119a/image_7.png" alt="プロフィール" width="1200" height="610" loading="lazy"><p>同様にして、<code>Theme</code>、<code>Social</code>も変更して[Save]を押下します。正しく登録ができており、<code>API_KEY</code>が設定されていれば下図のようにローカルで変更を確認することができます。</p><p>余談ですが、背景画像は<a href="https://unsplash.com/">Unsplash</a>から<a href="https://unsplash.com/@sumaidsingh?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Sumaid pal Singh Bakshi</a>さんの写真を使用しています。</p><img src="/images/20220119a/image_8.png" alt="背景画像" width="1200" height="610" loading="lazy"><p>次に新規にモデルを作成します。</p><p>「Settings」に遷移し、画面下部のプラスマークからモデルを追加できます。</p><img src="/images/20220119a/image_9.png" alt="Settings画面" width="1200" height="609" loading="lazy"><p><code>Product</code>の中身は<code>Name</code>、<code>URL</code>、<code>Image</code>としています。</p><img src="/images/20220119a/image_10.png" alt="Product" width="1200" height="611" loading="lazy"><p>「Content」に再度遷移するとメニューアイテムに<code>Product</code>が追加されています。<br><code>Product collection</code>に成果物を追加していきます。</p><img src="/images/20220119a/image_11.png" alt="Product collection" width="1200" height="609" loading="lazy"><p>編集画面は下図のようになります。</p><img src="/images/20220119a/image_12.png" alt="Product編集画面" width="1200" height="772" loading="lazy"><p>次にコーディングに移ります。</p><p><code>src/</code>配下の<code>App.vue</code>のクエリ文に以下を追記します。</p><figure class="highlight js"><figcaption><span>graphql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">products</span>: allProducts &#123;</span><br><span class="line">    name</span><br><span class="line">    url</span><br><span class="line">    image &#123;</span><br><span class="line">      <span class="attr">productImage</span>: <span class="function"><span class="title">responsiveImage</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        imgixParams: &#123; w: <span class="number">100</span>, h: <span class="number">100</span>, fit: crop, crop: faces, auto: format &#125;</span></span></span><br><span class="line"><span class="params"><span class="function">      </span>)</span> &#123;</span><br><span class="line">        ...imageFields</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>v-forで配列を表示するようにします。</p><figure class="highlight html"><figcaption><span>vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">&quot;profile in data.products&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;link&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:href</span>=<span class="string">&quot;profile.url&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">&quot;profile.name&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">      pt-4</span></span></span><br><span class="line"><span class="string"><span class="tag">      text-base</span></span></span><br><span class="line"><span class="string"><span class="tag">      font-bold</span></span></span><br><span class="line"><span class="string"><span class="tag">      flex</span></span></span><br><span class="line"><span class="string"><span class="tag">      items-center</span></span></span><br><span class="line"><span class="string"><span class="tag">      justify-center</span></span></span><br><span class="line"><span class="string"><span class="tag">      lg:justify-start</span></span></span><br><span class="line"><span class="string"><span class="tag">    &quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    &#123;&#123; profile.name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;lg:w-2/5&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">datocms-image</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:data</span>=<span class="string">&quot;profile.image.productImage&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;rounded-none lg:rounded-lg shadow-2xl hidden&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ここまでコーディングしたら、保存して<code>http://192.168.10.108:8080/</code>にアクセスします。</p><p>実装が正しければ新たに追加した<code>Product</code>の情報が反映されているはずです。</p><img src="/images/20220119a/image_13.png" alt="image.png" width="1200" height="629" loading="lazy"><p>きちんと反映されていますね。 🎉</p><p>あとはモデルを追加しつつ、コーディングを進めればオリジナルのウェブサイトを作成することができます。今回はここまでとします。</p><p>実装したコードはこちらに格納しています。</p><p><a href="https://github.com/orangekame3/datocms-orangekame3-portfolio">https://github.com/orangekame3/datocms-orangekame3-portfolio</a></p><p>また、今回作成したポートフォリオは<a href="https://orangekame3.blog/">こちら</a>です</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回はHeadless CMSサービスである<a href="https://www.datocms.com/">DatoCMS</a>を使用して、ポートフォリオを「サクッと」作成する方法をハンズオン形式で紹介しました。</p><p>DatoCMSの機能は今回全く紹介できていないので、また機会を見て記事にまとめられればと思います。DatoCMSには各種フレームワークに沿ったスタータープロジェクトが充実していたため、低コストで見栄えの良いものを作成できました。</p><p>ご自身のポートフォリオを作成する手段の一つとしてDatoCMSを試してみてはいかがでしょうか。</p><p>最後までお付き合いいただきありがとうございました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/">フロントエンド</category>
      
      <category domain="https://future-architect.github.io/tags/Vue-js/">Vue.js</category>
      
      <category domain="https://future-architect.github.io/tags/CMS/">CMS</category>
      
      <category domain="https://future-architect.github.io/tags/HeadlessCMS/">HeadlessCMS</category>
      
      <category domain="https://future-architect.github.io/tags/DatoCMS/">DatoCMS</category>
      
      
      <comments>https://future-architect.github.io/articles/20220119a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2022年のテック勉強会スケジュールを発表します</title>
      <link>https://future-architect.github.io/articles/20220118a/</link>
      <guid>https://future-architect.github.io/articles/20220118a/</guid>
      <pubDate>Mon, 17 Jan 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220118a/top.jpeg&quot; alt=&quot;&quot; title=&quot;Alexandra_KochPixabayによるPixabayからの画像&quot; width=&quot;640&quot; height=&quot;421&quot; loading=&quot;lazy&quot;&gt;


&lt;h2</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220118a/top.jpeg" alt="" title="Alexandra_KochPixabayによるPixabayからの画像" width="640" height="421" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。 <a href="/articles/20210314/">2021年</a>に続きまして、2022年のフューチャーが主催するIT技術系の勉強会について発表いたします。</p><div class="scroll"><table><thead><tr><th>#</th><th>Date</th><th>Category</th><th>Name</th><th>Memo</th></tr></thead><tbody><tr><td>2</td><td>01/14(金)</td><td>connpass</td><td><a href="https://future.connpass.com/event/235852/">Go ReleaseNotes 読む会</a></td><td>澁川、真野、辻、伊藤m</td></tr><tr><td>3</td><td>01/28(金)</td><td>connpass</td><td><a href="https://future.connpass.com/event/236138/">AWS CodePipelineと新聞向けCMS構築事例</a></td><td>渡邉、岡田、原</td></tr><tr><td>4</td><td>02/17(木)</td><td>connpass</td><td>Terraform</td><td>伊藤t、TBD</td></tr><tr><td>5</td><td>02/25(金)</td><td>社内イベント</td><td>LT2022 Winter</td><td>TBD×6名</td></tr><tr><td>6</td><td>03/17(木)</td><td>connpass</td><td>GCP</td><td>TBD、TBD</td></tr><tr><td>7</td><td>04/21(木)</td><td>connpass</td><td>Flutter</td><td>宮崎、藤田</td></tr><tr><td>8</td><td>05/19(木)</td><td>connpass</td><td>【公募】Goで自分で作ったOSSを自慢会</td><td>公募</td></tr><tr><td>9</td><td>06/16(木)</td><td>connpass</td><td>Svelte</td><td>TBD、TBD</td></tr><tr><td>10</td><td>07/18(月)</td><td>Youtube配信</td><td>Future Tech Conference</td><td>30本の動画配信を予定</td></tr><tr><td>11</td><td>07/28(木)</td><td>connpass</td><td>Go言語</td><td>TBD、TBD</td></tr><tr><td>12</td><td>08/18(木)</td><td>connpass</td><td>データレイク</td><td>TBD、TBD</td></tr><tr><td>13</td><td>08/26(金)</td><td>社内イベント</td><td>LT2022 Summer</td><td>TBD×6名</td></tr><tr><td>14</td><td>09/22(木)</td><td>connpass</td><td>Java/Java18</td><td>藤野、星</td></tr><tr><td>15</td><td>10/20(木)</td><td>connpass</td><td>Reactのドキュメントを読む会</td><td>澁川、TBD</td></tr><tr><td>16</td><td>11/24(木)</td><td>connpass</td><td>AWS</td><td>TBD、TBD</td></tr></tbody></table></div><p>2021年は、<a href="/articles/20211004a/">ナイルさん</a>と<a href="/articles/20211014a/">トップゲート</a>さんと合同LTイベントを企画しました。こういった合同勉強会もオープンに開催したいと考えています。フューチャーの本社がある東京都品川区の大崎にも、Go言語をよく使っている会社さんが増えているということで、osaki.go のようなイベントも開催できたらね、と話しています。</p><p>※ LTは視聴者枠で一般募集も検討していますので一応掲載しました。</p><h2 id="Future-TechNight"><a href="#Future-TechNight" class="headerlink" title="Future TechNight"></a>Future TechNight</h2><p><a href="https://future.connpass.com/">connpass</a> で募集している技術系のイベントは、Future Tech Nightという名称で月1程度のペースで開催しています。「フューチャーが業務を通して得た技術的な知見やナレッジを共有する勉強会」がテーマです。なるべく<a href="https://future.connpass.com/presentation/">発表資料</a>はすぐに公開すること、<a href="/tags/TechNight/">登壇レポート</a>も1ヶ月以内で公開することを目標にしていました。2022年はYoutubeに動画も公開するように運営を整えていますので、時間が合わなくて参加できない！といった方にも好きな時間で視聴できるように環境を整えていきます。connpassは約2週間からオープンするようにしますので、フォローよろしくおねがいします。（2021年初期では300名ほどでしたが、2022年には1300名を超えて運営として喜んでいます。）</p><p>また、「Go ReleaseNotes 読む会」のようにフューチャー社内の雰囲気が伝わるような、より双方向な勉強会の開催頻度も増やしていこうと考えています（本番は緊張しますが、準備は楽できますのでもっと開催頻度を増やせるかも知れません！）。</p><p>ハッシュタグは引き続き <a href="https://twitter.com/search?q=%23future_tech_night">#future_tech_nigth</a> です。</p><h2 id="Future-Tech-Conference"><a href="#Future-Tech-Conference" class="headerlink" title="Future Tech Conference"></a>Future Tech Conference</h2><p>2022年初の試みです。30名の登壇者がそれぞれの技術テーマで、25分枠で全Youtube配信を行おうと考えています。現在企画を進めていますのでご期待ください。</p><p><a href="https://www.youtube.com/channel/UCJUSwYYd0CkGgmEKAW7QVpw">https://www.youtube.com/channel/UCJUSwYYd0CkGgmEKAW7QVpw</a></p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>勉強会についてもフューチャー社員一同、良い情報を発信してみなさまのお役にたてるようにがんばって行きます。どうぞよろしくお願いします。新卒・キャリア採用ともに積極的に募集していますので、興味がある方はご気軽にお問い合わせください！</p><p><a href="https://www.future.co.jp/recruit/">https://www.future.co.jp/recruit/</a></p><p>社員のみなさまへ：</p><ul><li>TBDの登壇者、積極的に募集しています。ちょっと自信が無いけど..といった方も声をかけてもらえると嬉しいです！（支援します！）</li><li>こういった勉強会もやりたい！という方も真野隼記 or 伊藤太斉まで連絡をいただけるとです。</li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/TechNight/">TechNight</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB/">スケジュール</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%8B%89%E5%BC%B7%E4%BC%9A/">勉強会</category>
      
      
      <comments>https://future-architect.github.io/articles/20220118a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>2022年のブログ連載予定を発表します</title>
      <link>https://future-architect.github.io/articles/20220117a/</link>
      <guid>https://future-architect.github.io/articles/20220117a/</guid>
      <pubDate>Sun, 16 Jan 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220117a/calendar.jpeg&quot; alt=&quot;&quot; title=&quot;Andreas LischkaPixabayからの画像&quot; width=&quot;640&quot; height=&quot;426&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220117a/calendar.jpeg" alt="" title="Andreas LischkaPixabayからの画像" width="640" height="426" loading="lazy"><p>あけましておめでとうございます。本年もどうぞよろしくおねがいします。TIG真野です。</p><p>2022年に計画しているブログ連載について紹介します。</p><h2 id="連載計画を発表する背景"><a href="#連載計画を発表する背景" class="headerlink" title="連載計画を発表する背景"></a>連載計画を発表する背景</h2><p><a href="/articles/20210112/">2021年</a>の記事でも説明しましたが、追加でいくつかの理由があります。</p><ul><li>企画が増えてくると、寄稿者を募集するスケジューリングが忘れがちになるため備忘にしたい<ul><li>スプレッドシート管理はファイルがどこにいったか分からなくなりがち</li></ul></li><li>寄稿者の幅を広げたい<ul><li>リモートワークになってからの他チームにジョインしたメンバーなどに少しでも届くように</li></ul></li></ul><h2 id="2022年の計画"><a href="#2022年の計画" class="headerlink" title="2022年の計画"></a>2022年の計画</h2><div class="scroll"><table><thead><tr><th>#</th><th>Title</th><th>Memo</th><th>Link</th></tr></thead><tbody><tr><td>1月</td><td>ー</td><td>ー</td><td></td></tr><tr><td>2月</td><td>Go 1.18</td><td>Go 1.18のリリースノートからテーマをピックアップして深堀りする連載</td><td>公開予定</td></tr><tr><td>3月</td><td>Flutter連載</td><td>Flutterの開発ネタ</td><td>2022、<a href="/articles/20210510a/">2021</a></td></tr><tr><td></td><td>電子工作</td><td>電子工作、IoT、自作キーボードなど</td><td>公開予定</td></tr><tr><td>4月</td><td>春の入門祭り</td><td>初心者向けに入門記事を書いてみようという連載</td><td>2022、<a href="/articles/20210414a/">2021</a>、<a href="/articles/20200529/">2020</a></td></tr><tr><td>5月</td><td>Svelte</td><td>JSフレームワーク、Svelteをテーマにした連載</td><td>公開予定</td></tr><tr><td>6月</td><td>サービス間通信</td><td>gRPC、GraphQL、OpenAPIなどをテーマにした連載</td><td>公開予定</td></tr><tr><td></td><td>技術書評</td><td>技術書の書評を書いていく連載</td><td>公開予定</td></tr><tr><td>7月</td><td>認証認可</td><td>Auth0、KeyCloackやWebAuthなどの技術周りについての連載</td><td>公開予定</td></tr><tr><td>8月</td><td>Go 1.19</td><td>Go 1.19のリリースノートからテーマをピックアップして深堀りする連載</td><td>公開予定</td></tr><tr><td></td><td>夏休み自由研究</td><td>夏休みに行った自由研究と銘うって、個人的に関心があることを深堀りして調べる連載</td><td>2022、<a href="/articles/20210823a/">2021</a>、<a href="/articles/20200726/">2020</a></td></tr><tr><td>9月</td><td>Terraform</td><td>Terraformをテーマにした連載</td><td>公開予定</td></tr><tr><td>10月</td><td>秋のブログ週間</td><td>秋の夜長に楽しめるように、いつもより文章が多めな読み物をテーマにした連載</td><td>2022、<a href="/articles/20211027a/">2021</a>、<a href="/articles/20201026/">2020</a></td></tr><tr><td>11月</td><td>Python 3.11</td><td>Python 3.11が出ることを記念して、Python全般をテーマにした連載</td><td>2022、<a href="/articles/20210927b/">2021</a></td></tr><tr><td>12月</td><td>アドベントカレンダー2022</td><td>Qiitaさんのアドベントカレンダーのイベントに乗っかる連載</td><td>2022、<a href="http://qiita.com/advent-calendar/2021/future">2021</a>、<a href="http://qiita.com/advent-calendar/2020/future">2020</a>、<a href="http://qiita.com/advent-calendar/2019/future">2019</a>、<a href="http://qiita.com/advent-calendar/2018/future">2018</a>、<a href="http://qiita.com/advent-calendar/2017/future">2017</a>、<a href="http://qiita.com/advent-calendar/2016/future">2016</a>、<a href="http://qiita.com/advent-calendar/2015/future">2015</a></td></tr></tbody></table></div><p>同月に複数実施することもありますが、並列に走らないようにする予定です。</p><p>2020～2021年実施した、GCP・サーバレス連載は寄稿者の集客がいまいちだったため本年は行わない予定です。代わりに、電子工作・サービス間通信・技術書評・Terraformテーマを新規に行います。Auth0は認証認可と少しスコープを広げて行う予定。フロントエンド連載はテーマが広すぎたため、Svelteに絞って行います。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>これまでの経緯を踏まえテーマをブラッシュアップしています。2022年も皆様にとって有益な情報発信を活発にしていきますので、応援よろしくおねがいします！</p><p>社員の皆さんへ：</p><ul><li><a href="/articles/20200908/">フューチャー技術ブログで行っている連載企画が良いよって話</a> でも記載しましたが、読み手にとっても、書き手にとっても色々とメリットがあります。興味があるけどブログに載せるほどのネタになるか不安という声はよく聞きます。どういうレベル感の記事を書くべきかにも相談を承っています。ハードルは限りなく低いので、DMなどで連絡いただけるとです。お気軽に参加いただけるとです。だいたい2～4週間前に寄稿者募集を投げるためレスポンスをいただけると助かります。</li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/TechBlog/">TechBlog</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%81%8B%E5%96%B6/">運営</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB/">スケジュール</category>
      
      
      <comments>https://future-architect.github.io/articles/20220117a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Minikubeでk8s学習を進めるためのヒント</title>
      <link>https://future-architect.github.io/articles/20220112a/</link>
      <guid>https://future-architect.github.io/articles/20220112a/</guid>
      <pubDate>Tue, 11 Jan 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220112a/minikube.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;519&quot;&gt;

&lt;h1 id=&quot;k8s学習環境が欲しい&quot;&gt;&lt;a href=&quot;#k8s学習環境が欲しい&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220112a/minikube.png" alt="" width="1000" height="519"><h1 id="k8s学習環境が欲しい"><a href="#k8s学習環境が欲しい" class="headerlink" title="k8s学習環境が欲しい"></a>k8s学習環境が欲しい</h1><p>こんにちはTIG鈴木です。</p><p>以前チームの輪読会で<a href="https://www.amazon.co.jp/Kubernetes%E5%AE%8C%E5%85%A8%E3%82%AC%E3%82%A4%E3%83%89-%E7%AC%AC2%E7%89%88-Top-Gear-%E9%9D%92%E5%B1%B1/dp/4295009792">Kuberntes完全ガイド</a>(以下k8s本)を読みました。 k8s本は、GKEを例にしながら、k8sのCLIツールだったりマニフェストのyamlファイルを丁寧に紹介しており、実践的に勉強するの適しています。</p><p>そのため、手を動かしつつ勉強したいところですが、クラウドプロバイダーが提供するマネージドk8sはコストが高めで気分的にほいほい使えないところがあります。となるとローカル環境でk8sを用意したくなります。</p><p>k8s完全ガイドでは<a href="https://github.com/kubernetes/minikube">minikube</a>だったり<a href="https://kind.sigs.k8s.io/">kind</a>だったりが紹介されています</p><h1 id="ローカル環境もそれなりにめんどくさい"><a href="#ローカル環境もそれなりにめんどくさい" class="headerlink" title="ローカル環境もそれなりにめんどくさい"></a>ローカル環境もそれなりにめんどくさい</h1><p>ところがminikubeだとGKEとは使い勝手が違っていて、k8s本通りに検証できない部分があり、初学者の私は混乱してしまいました。</p><p>ということで、私がひっかかったポイント（おもにServiceまわり）を踏まえて、k8s学習を進めるためのいくつかTipsを紹介します。</p><h1 id="minikubeとは"><a href="#minikubeとは" class="headerlink" title="minikubeとは"></a>minikubeとは</h1><p>ローカルk8sクラスタをを簡単に構築できる定番のツールです。DockerやVirtualBoxで仮想マシンが立ち上がりその上にk8sが構築されます。</p><p>下の様にオプションなしで起動した場合、筆者環境ではDockerコンテナとして起動します。デフォルトでは1 nodeで構築されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ minikube start</span><br><span class="line">...</span><br><span class="line">🏄  Done! kubectlisnow configuredtouse <span class="string">&quot;minikube&quot;</span> clusterand <span class="string">&quot;default&quot;</span> namespacebydefault</span><br><span class="line"></span><br><span class="line">$ kubectl get nodes</span><br><span class="line">NAME           STATUS   ROLES                  AGE   VERSION</span><br><span class="line">minikube       Ready    control-plane,master   90m   v1.22.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># ノードはdockerコンテナとして起動している</span></span><br><span class="line">$ docker ps</span><br><span class="line">CONTAINERID   IMAGE                                 COMMAND                  CREATEDSTATUS              PORTS</span><br><span class="line">NAMES</span><br><span class="line">362ee8fb5198   gcr.io/k8s-minikube/kicbase:v0.0.26   <span class="string">&quot;/usr/local/bin/entr…&quot;</span>   2 hours ago   Up 2 hours   127.0.0.1:49177-&gt;22/tcp, 127.0.0.1:49176-&gt;2376/tcp, 127.0.0.1:49175-&gt;5000/tcp, 127.0.0.1:49174-&gt;8443/tcp, 127.0.0.1:49173-&gt;32443/tcp   minikube</span><br></pre></td></tr></table></figure><h1 id="Serviceまわり"><a href="#Serviceまわり" class="headerlink" title="Serviceまわり"></a>Serviceまわり</h1><p><strong>NodePort</strong>は&lt;ノードのIP&gt;:&lt; Port &gt;への通信をPodに転送する形で、アプリケーションの外部疎通性を確保するリソースです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create deployment test-deployment --image=nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># NodePortを作成</span></span><br><span class="line">$ kubectl expose deployment test-deployment --port=80 --<span class="built_in">type</span>=NodePort</span><br><span class="line">$ kubectl get service test-deployment</span><br><span class="line">NAME              TYPE       CLUSTER-IP       EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">test-deployment   NodePort   10.107.114.198   &lt;none&gt;        80:31307/TCP   4m21s</span><br></pre></td></tr></table></figure><p>上記Deploymentにアクセスするには、ノードのIPアドレスを調べる必要があります。minikubeではコマンドが用意されており、<code>minikube ip</code> で調べられます。  実態はminikubeノードとして起動しているDockerコンテナのアドレスです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ minikube ip</span><br><span class="line">192.168.49.2</span><br><span class="line"></span><br><span class="line">$ docker <span class="built_in">exec</span> -it minikube ip -4 a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">69: eth0@if70: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default  link-netnsid 0</span><br><span class="line">    inet 192.168.49.2/24 brd 192.168.49.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>curlをしてみれば、疎通できることがわかります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  curl 192.168.49.2:31307</span><br></pre></td></tr></table></figure><p><strong>LoadBalancer</strong>を使う場合は<code>minikube tunnel</code> で EXTERNAL-IPを払い出し、ホストサーバからEXTERNAL-IPへルートを確保します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl expose deployment test-deployment --<span class="built_in">type</span>=LoadBalancer --port=80</span><br><span class="line"></span><br><span class="line">$ kubectl get service test-deployment</span><br><span class="line">NAME              TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">test-deployment   LoadBalancer   10.108.139.68   &lt;pending&gt;     80:31284/TCP   70s</span><br><span class="line"></span><br><span class="line">$ minikube tunnel</span><br><span class="line"></span><br><span class="line"><span class="comment"># EXTERNAL-IPが払い出されている</span></span><br><span class="line">$ kubectl get service test-deployment</span><br><span class="line">NAME              TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)        AGE</span><br><span class="line">test-deployment   LoadBalancer   10.108.139.68   10.108.139.68   80:31284/TCP   2m35s</span><br></pre></td></tr></table></figure><p><code>curl 10.108.139.68:80</code> で疎通が確認できます。</p><h1 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h1><p>Ingressを使う場合は、Ingressコントローラをデプロイする必要があります。<br>minikubeではそのためのaddonが用意されています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ minikube addons <span class="built_in">enable</span> ingress</span><br><span class="line"><span class="comment"># nginx ingress controllerがデプロイされている</span></span><br><span class="line">$ kubectl get pods -n ingress-nginx</span><br><span class="line">NAME                                        READY   STATUS      RESTARTS   AGE</span><br><span class="line">ingress-nginx-admission-create-2mjhv        0/1     Completed   0          5m34s</span><br><span class="line">ingress-nginx-admission-patch-pj8jv         0/1     Completed   0          5m34s</span><br><span class="line">ingress-nginx-controller-5d88495688-grssn   1/1     Running     0          5m35s</span><br></pre></td></tr></table></figure><p>以下のマニフェストでingressを作成してみます。</p><figure class="highlight yaml"><figcaption><span>ing.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-ingress</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">&quot;nginx&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">        <span class="attr">pathType:</span> <span class="string">Prefix</span></span><br><span class="line">        <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">service:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">test-deployment</span></span><br><span class="line">            <span class="attr">port:</span></span><br><span class="line">              <span class="attr">number:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f ing.yaml</span><br></pre></td></tr></table></figure><p>下のようにIngressが作成されたことがわかります。 <code>ADDRESS</code> に対してリクエストを送ればアプリケーションにアクセスできます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get ingress</span><br><span class="line">NAME            CLASS    HOSTS   ADDRESS        PORTS   AGE</span><br><span class="line">test-ingress    &lt;none&gt;   *       192.168.49.2   80      13m</span><br></pre></td></tr></table></figure><p><a href="https://minikube.sigs.k8s.io/docs/handbook/addons/ingress-dns/">ingress-dns</a> addonを使えば、Ingressで設定したホスト名をホストサーバから解決することが可能らしいです。ちょっと試せていないですが、参考までに。</p><h1 id="Horizontal-Pod-Autoscaler"><a href="#Horizontal-Pod-Autoscaler" class="headerlink" title="Horizontal Pod Autoscaler"></a>Horizontal Pod Autoscaler</h1><p>Horizontal Pod Autoscaler(HPA)はCPUやメモリ消費に基づいてPodをスケールさせる機能です。HPAを使うためには、Podの消費するリソースをmetricsとして取得できる必要があります。minikubeではaddonとしてmetrics-serverを有効化します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ minikube addons <span class="built_in">enable</span> metrics-server</span><br><span class="line">    ▪ Using image k8s.gcr.io/metrics-server/metrics-server:v0.4.2</span><br></pre></td></tr></table></figure><p>metrics-serverを有効化したので、<code>kubectl top</code> でpodのリソース消費を確認できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl top pod test-nginx</span><br><span class="line">NAME         CPU(cores)   MEMORY(bytes)</span><br><span class="line">test-nginx   0m           1Mi</span><br></pre></td></tr></table></figure><p>この状態であれば、<a href="https://kubernetes.io/ja/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/">HPAのチュートリアル</a>で、HPAが機能することを確認できます。</p><h1 id="Multi-Node-Clusterとスケジューリング"><a href="#Multi-Node-Clusterとスケジューリング" class="headerlink" title="Multi-Node Clusterとスケジューリング"></a>Multi-Node Clusterとスケジューリング</h1><p>minikubeはデフォルトで1 nodeで起動します。なのでそのままでは、Node AffinityやPod Affinityなど高度なスケジューリング機能の検証ができません。</p><p>ですが、minikubeでは<code>--nodes</code> オプションで複数ノードでクラスタを作成可能です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ minikube start --nodes 2</span><br><span class="line">$ kubectl get node</span><br><span class="line">NAME           STATUS   ROLES                  AGE     VERSION</span><br><span class="line">minikube       Ready    control-plane,master   9m53s   v1.22.1</span><br><span class="line">minikube-m02   Ready    &lt;none&gt;                 9m35s   v1.22.1</span><br></pre></td></tr></table></figure><p>下のマニフェストでPod Anti Affinityを使ってみます。このDeploymentでは2つのPodが作成されますが、別々のノードに配置される設定になっています。</p><figure class="highlight yaml"><figcaption><span>pod-antiaffinity.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">100</span><span class="string">%</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">hello</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">hello</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">affinity:</span></span><br><span class="line">        <span class="comment"># ⬇⬇⬇ This ensures pods will land on separate hosts</span></span><br><span class="line">        <span class="attr">podAntiAffinity:</span></span><br><span class="line">          <span class="attr">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">labelSelector:</span></span><br><span class="line">              <span class="attr">matchExpressions:</span> [&#123; <span class="attr">key:</span> <span class="string">app</span>, <span class="attr">operator:</span> <span class="string">In</span>, <span class="attr">values:</span> [<span class="string">hello</span>] &#125;]</span><br><span class="line">            <span class="attr">topologyKey:</span> <span class="string">&quot;kubernetes.io/hostname&quot;</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hello-from</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">pbitty/hello-from:latest</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">            <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Podが異なるノードに配置されていることがわかります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get pods -o wide</span><br><span class="line">NAME                     READY   STATUS    RESTARTS   AGE     IP           NODE           NOMINATED NODE   READINESS GATES</span><br><span class="line">hello-7db79cdc77-68mvs   1/1     Running   0          4m23s   10.244.0.3   minikube       &lt;none&gt;           &lt;none&gt;</span><br><span class="line">hello-7db79cdc77-gkpwm   1/1     Running   0          4m23s   10.244.1.5   minikube-m02   &lt;none&gt;           &lt;none&gt;</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>minikubeでk8sを学習していく際のTipsをご紹介しました。minikube以外にも<a href="https://microk8s.io/">microk8s</a>, <a href="https://kind.sigs.k8s.io/">kind</a>などローカルk8sクラスタ構築ツールの選択肢はありますし、VMとkubeadmで構築するのも勉強になると思います。<br>入門者のお役に立てれば幸いです！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/Kubernetes/">Kubernetes</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/">環境構築</category>
      
      <category domain="https://future-architect.github.io/tags/Minikube/">Minikube</category>
      
      
      <comments>https://future-architect.github.io/articles/20220112a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Step Functions を利用して感じた Airflow との比較</title>
      <link>https://future-architect.github.io/articles/20220111a/</link>
      <guid>https://future-architect.github.io/articles/20220111a/</guid>
      <pubDate>Mon, 10 Jan 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;Step-Functions-を利用して感じた-Airflow-との比較&quot;&gt;&lt;a href=&quot;#Step-Functions-を利用して感じた-Airflow-との比較&quot; class=&quot;headerlink&quot; title=&quot;Step Functions</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="Step-Functions-を利用して感じた-Airflow-との比較"><a href="#Step-Functions-を利用して感じた-Airflow-との比較" class="headerlink" title="Step Functions を利用して感じた Airflow との比較"></a>Step Functions を利用して感じた Airflow との比較</h1><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>TIG 所属の多賀です。</p><p>AWS 上でのワークフロー構築のため、Step Functions を直近で導入しました。</p><p>筆者は Airflow (MWAA) の経験が長く、いくつかブログも書いています。 (<a href="/tags/Airflow/">過去ブログ一覧</a>)。今回、両サービスを利用してみた上での比較を整理したく記事化しました。</p><p>前提として、どちらも素晴らしいサービスで、ユースケースに合わせて選定していくことが大事かと思います。</p><h2 id="サービス概要"><a href="#サービス概要" class="headerlink" title="サービス概要"></a>サービス概要</h2><p>各サービスについて、概要を整理しました。</p><p>※ Airflow は AWS 上でマネージドサービスとして提供されている Amazon Managed Workflows for Apache Airflow (以下 MWAA) をベースに記載します。</p><div class="scroll"><table><thead><tr><th align="left"></th><th align="left"><a href="https://docs.aws.amazon.com/mwaa/latest/userguide/what-is-mwaa.html">MWAA</a></th><th align="left"><a href="https://aws.amazon.com/jp/step-functions/?step-functions.sort-by=item.additionalFields.postDateTime&step-functions.sort-order=desc">Step Functions</a></th></tr></thead><tbody><tr><td align="left"></td><td align="left"><img src="/images/20220111a/image.png" alt="MWAAフロー" width="1200" height="764" loading="lazy"></td><td align="left"><img src="/images/20220111a/stepfunction.png" alt="stepfunctionフロー" width="922" height="908" loading="lazy">  <br> <a href="https://aws.amazon.com/jp/blogs/news/new-aws-step-functions-workflow-studio-a-low-code-visual-tool-for-building-state-machines/">新機能 – AWS Step Functions ワークフロースタジオ – ステートマシンを構築するためのローコードのビジュアルツール - Amazon Web Services ブログ</a> 参照</td></tr><tr><td align="left">サービス概要</td><td align="left">OSS である <a href="https://airflow.apache.org/">Airflow</a> をマネージドサービスとして提供</td><td align="left">AWS 独自実装のビジュアルワークフローサービス</td></tr><tr><td align="left">一言で</td><td align="left">ワークフローにソースコードベース管理の概念を取入れアプリケーション化したサービス (※ Airflow について)</td><td align="left">各種 AWS サービスをパイプラインとして実行するサービス</td></tr><tr><td align="left">特徴</td><td align="left">・Pure Python ベースでワークフローを実装可能 <br> ・独自のブラウザベース UI を提供 <br> ・DAG(有向非巡回グラフ)ベースのワークフロー定義</td><td align="left">・Amazon States Language(JSON/YAML) ベースでワークフロー(=State Macine)を実装 <br> ・AWSコンソール上でドラッグ&amp;ドロップでワークフローを作成可能 (<a href="https://docs.aws.amazon.com/step-functions/latest/dg/workflow-studio.html">Workflow Studio</a>) <br> ・200を超える AWS サービスのサポート(<a href="https://aws.amazon.com/jp/about-aws/whats-new/2021/09/aws-step-functions-200-aws-sdk-integration/">参考</a> )</td></tr><tr><td align="left">コスト</td><td align="left"><a href="https://aws.amazon.com/jp/managed-workflows-for-apache-airflow/pricing/">料金 - Amazon Managed Workflows for Apache Airflow (MWAA)</a> <br><br> ・時間単位のインスタンス使用量課金 <br> ・ストレージ使用量課金 <br></td><td align="left"><a href="https://aws.amazon.com/jp/step-functions/pricing/">料金 - AWS Step Functions AWS</a> <br><br>・実行毎課金(状態遷移毎)</td></tr></tbody></table></div><h2 id="サービス比較"><a href="#サービス比較" class="headerlink" title="サービス比較"></a>サービス比較</h2><p>各サービス別に、Good/Challenge に分けて記載しています。</p><h3 id="Good"><a href="#Good" class="headerlink" title="Good"></a>Good</h3><h4 id="MWAA"><a href="#MWAA" class="headerlink" title="MWAA"></a>MWAA</h4><ul><li>Pythonで実現できることは基本すべて実装可能で、実装の制約が少ない</li><li>UI が充実しており、実行履歴、ログ、実行時間等の様々な情報を参照することが可能</li><li>UI 上でワークフローの任意の位置からリトライ可能</li><li>各種クラウドSDK/OSS API を呼び出しを簡易化するための provider がサードパーティ提供されている<ul><li><a href="https://airflow.apache.org/docs/apache-airflow-providers/packages-ref.html#">Providers packages reference — apache-airflow-providers Documentation</a></li><li>provider を pip でインストール後、各 provider に実装されている operator 関数を呼び出すことで実現可能</li></ul></li></ul><h4 id="Step-Functions"><a href="#Step-Functions" class="headerlink" title="Step Functions"></a>Step Functions</h4><ul><li>AWS サービスの呼び出しをローコード(パラメータ指定程度)で実現可能</li><li>Workflow Studio を利用した AWS コンソール上でのワークフロー組み上げが可能<ul><li>Amazon States Language を直接書くことなく定義することができる</li></ul></li><li>パラメータ指定(JSON形式)でワークフロー実行可能</li><li>AWS サービスの呼び出しごとにログが出力されており、各 SDK の呼び出し結果を確認可能</li></ul><h3 id="Challenge"><a href="#Challenge" class="headerlink" title="Challenge"></a>Challenge</h3><h4 id="MWAA-1"><a href="#MWAA-1" class="headerlink" title="MWAA"></a>MWAA</h4><ul><li>ソースコードベースであることから実装コストはある程度見込む必要あり<ul><li>初期構築等で、デフォルトで用意されていなければ、単純なクラウド SDK 呼び出しをするだけの処理を Python で都度実装が必要になる</li></ul></li><li>UI 上からパラメータ指定での実行がしづらい<ul><li>厳密には実行可能な方法があるが、UI 上でサポートされていない or ジョブの実行画面外に存在しており、運用しづらくなっている</li><li>(2022/01/07時点で <a href="https://docs.aws.amazon.com/mwaa/latest/userguide/airflow-versions.html#airflow-versions-latest">MWAA 未サポート</a>) Aiflow version 2.1.0 以上でパラメータ指定(<code>Trigger Dag w/ config</code>)でワークフローを実行可能となっている</li><li>デフォルトで<a href="https://airflow.apache.org/docs/apache-airflow/stable/templates-ref.html#variables">実行時間等</a>はワークフローへ渡されるため、時間ベースでの実行の場合は特段困らない</li></ul></li><li>運用コスト面では、EC2等と同様に起動時間課金であり、基本は立ち上げたままで運用されることから、Step Functions よりコストは高くなる</li><li>ソースコードを実装するため単体テストを実装したいが、外部 API 呼び出し等が多くなる場合はモック化含めてコストは高くなる</li><li>VPC の構築が必須<ul><li>MWAA 向けのネットワーク要件が存在するため、VPC 構築時に合わせて確認しておく必要がある</li><li><a href="https://docs.aws.amazon.com/ja_jp/mwaa/latest/userguide/networking-about.html">Amazon MWAA でのネットワーキングについて - Amazon Managed Workflows for Apache Airflow</a></li></ul></li><li>マネージドサービスのため直接意識することは少ないが、Airflow の構成について学習するコストはかかる</li></ul><h4 id="Step-Functions-1"><a href="#Step-Functions-1" class="headerlink" title="Step Functions"></a>Step Functions</h4><ul><li>ワークフロー途中からの実行が未サポート<ul><li>初期構築等で失敗しながら動かしていく際に、毎回最初からになって効率が悪かった</li><li>運用上は、リトライ単位 = 1 State Macine の原則で構築すれば問題なし</li></ul></li><li>Workflow Studio で作成した定義を IaC 管理化に置きたい場合は、環境情報(本番、開発..)等の一部修正が必須<ul><li>「Workflow Studio で基本作成→JSONをダウンロード→IaC 管理下へ配置」の作成フロー</li></ul></li><li><a href="https://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/amazon-states-language-intrinsic-functions.html">組み込み関数</a>でできることがあまりないため、入力を少し加工をしたい等で Lambda の実装が必要</li><li>API の実行結果が非同期で成功する場合(インスタンス作成等)に、成功を待ち受けるためのループ処理を都度実装する必要がある<ul><li><a href="https://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/sample-project-job-poller.html">Job ステータスのポーリング (Lambda、AWS Batch) - AWS Step Functions</a></li></ul></li><li>各 State の入出力を扱うための、Input/Output/ResultPath,ResultSelector等の学習コストは低くはない<ul><li>同一のパラメータをワークフロー全体で引き回したいケースで実装に考慮が必要<ul><li>OutputPath を指定して、Input がすべて上書きされる問題に直面した</li></ul></li><li>最終的に、ResultSelector で残したいレスポンス情報を選定して、ResultPath で追加する形式を取ることが多かった</li><li>参考: <a href="https://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/concepts-input-output-filtering.html">Step Functions の入出力処理 - AWS Step Functions</a></li></ul></li></ul><h2 id="選定方針"><a href="#選定方針" class="headerlink" title="選定方針"></a>選定方針</h2><p>各ケースごとに細かい要件等があるかと思いますが、大まかな方針としては以下の通りと考えています。</p><ul><li>MWAA (Airflow)<ul><li>ワークフローの複雑度(※ 実行するタスクの量が指標) が高い</li><li>実行する 処理時間の長いタスクが複数連続している (リトライ観点)</li><li>単純な AWS SDK や API Call で処理が完結しない (※ 設計としてワークフローにロジックをもたせる可否は要検討)</li><li>初期構築にコストをかけることができる</li></ul></li><li>Step Functions<ul><li>複雑度が低くAWS の各種 SDK を呼び出すのみの単純なワークフロー</li><li>ワークフローの実行頻度が低い</li><li>手動でのパラメータ指定必須</li></ul></li></ul><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>Step Functions を本格的に利用したのは初めてだったので、同じワークフロー系サービスとして経験のあった Airflow との比較をしてみました。</p><p>実際に AWS 上でワークフローを構築しようとする際は、まずはこの2つのサービス比較から入ることが今後は多くなってくるのではと思いますので、参考になりましたら幸いです。</p><p>Airflow は 2.0 がリリースされて以降も、月1程度で継続的にリリースがされていてますので、引き続きウォッチしていていきたいと考えてます。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://airflow.apache.org/docs/apache-airflow/stable/index.html">Apache Airflow Documentation — Airflow Documentation</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/mwaa/latest/userguide/what-is-mwaa.html">Amazon Managed Workflows for Apache Airflow (MWAA) とは - Amazon Managed Workflows for Apache Airflow</a></li><li><a href="https://docs.aws.amazon.com/ja_jp/step-functions/latest/dg/welcome.html">AWS Step Functions とは - AWS Step Functions</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%8A%80%E8%A1%93%E9%81%B8%E5%AE%9A/">技術選定</category>
      
      <category domain="https://future-architect.github.io/tags/Airflow/">Airflow</category>
      
      <category domain="https://future-architect.github.io/tags/StepFunctions/">StepFunctions</category>
      
      
      <comments>https://future-architect.github.io/articles/20220111a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Future社員が使っているWindows便利ツール（新人さん向け）</title>
      <link>https://future-architect.github.io/articles/20220107a/</link>
      <guid>https://future-architect.github.io/articles/20220107a/</guid>
      <pubDate>Thu, 06 Jan 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。2020年4月入社の青柳です。タイトルにある通り便利ツールをまとめてみました。</p><p>今回は、新入社員や入社前の大学生をターゲットに、誰でもすぐに使えるツールを紹介しているので、まだ使っていないツールがあればぜひ使ってみて下さい。<br>※前提としてwindowsの方向けなので、Macの方はごめんなさい🙇🏼</p><h1 id="everything"><a href="#everything" class="headerlink" title="everything"></a>everything</h1><img src="/images/20220107a/everything.gif" alt="everything" width="1160" height="428" loading="lazy"><p><a href="https://forest.watch.impress.co.jp/library/software/everything/">https://forest.watch.impress.co.jp/library/software/everything/</a></p><p>ファイルやフォルダを超高速で検索できるツール。</p><p>あのファイルどこにあったっけ？？の問題が一瞬で解消できます。私も初めて使った際は、検索のスピードの早さに驚きました。</p><p>しかも設定すればファイルサーバーの中も検索できます。</p><p>もはや必須ツールですね。</p><h1 id="cribor"><a href="#cribor" class="headerlink" title="cribor"></a>cribor</h1><img src="/images/20220107a/cribor1.gif" alt="cribor1" width="1200" height="372" loading="lazy"><p><a href="https://forest.watch.impress.co.jp/library/software/clibor/">https://forest.watch.impress.co.jp/library/software/clibor/</a></p><p>簡単にコピーと貼り付けができるツール。</p><p>クリップボードの履歴を呼び出して、以前にコピーした文章も貼り付けれる。定型文も登録できる。</p><p>いたってシンプルな機能ですが、一度使うとすぐに便利さがわかると思います。</p><h1 id="Tablacus-Explorer"><a href="#Tablacus-Explorer" class="headerlink" title="Tablacus Explorer"></a>Tablacus Explorer</h1><img src="/images/20220107a/TablacusExplorer.gif" alt="TablacusExplorer.gif" width="862" height="451" loading="lazy"><p><a href="https://tablacus.github.io/explorer.html">https://tablacus.github.io/explorer.html</a></p><p>ついついたくさん開きがちなエクスプローラをタブで管理可能。</p><p>似たようなツールで「QTTabBar」もあるが、個人的にはこちらがおすすめ。アドイン機能も充実しているので、好きなようにカスタマイズもできます。</p><h1 id="orchis-launcher"><a href="#orchis-launcher" class="headerlink" title="orchis launcher"></a>orchis launcher</h1><img src="/images/20220107a/orchislauncher.gif" alt="orchislauncher.gif" width="768" height="348" loading="lazy"><p><a href="https://forest.watch.impress.co.jp/library/software/orchis/">https://forest.watch.impress.co.jp/library/software/orchis/</a></p><p>ポップアップメニューでよく使うファイルやフォルダを、素早く簡単に起動。</p><p>私の先輩も使っていますが、これを使いこなしてるだけで仕事できる感が半端ない。</p><p>みなさんもカッコよく使いこなして！</p><h1 id="OneNote"><a href="#OneNote" class="headerlink" title="OneNote"></a>OneNote</h1><img src="/images/20220107a/ScreenToGif_2.gif" alt="ScreenToGif.gif" width="1200" height="604" loading="lazy"><p><a href="https://www.microsoft.com/ja-jp/microsoft-365/onenote/digital-note-taking-app">https://www.microsoft.com/ja-jp/microsoft-365/onenote/digital-note-taking-app</a></p><p>メモとして使えたりキャプチャを張り付けたりと、画面に情報を効率よく集約。</p><p>他のテキストツールだと、画像の貼付やイラストの挿入とかができないですが、OneNoteだと自由自在。</p><p>まさにノートのような使い方ができて非常に便利です。</p><h1 id="ScreenToGif"><a href="#ScreenToGif" class="headerlink" title="ScreenToGif"></a>ScreenToGif</h1><img src="/images/20220107a/ScreenToGif.gif" alt="ScreenToGif.gif" width="469" height="72" loading="lazy"><p><a href="https://www.screentogif.com/">https://www.screentogif.com/</a></p><p>簡単な動画ならこちらのツールで簡単に作成可能。この記事にあるGif動画もこのツールで撮影しました。</p><p>自分のパソコンの動きをそのまま記録できるので、手順を他の人に共有する時とか便利そう。</p><p>工夫次第で使い道はいくらでもありそうなので、一度使ってみて欲しいです。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>テレワークだと先輩社員の仕事を直接見れず、どんなツールを使っているのか知る機会が少ないですよね。</p><p>そこで、便利ツールの一覧とかあったら嬉しいかなという気持ちで書きました。</p><p>参考にしていただければ幸いです。</p><p>上記以外にも色々なツールを紹介して頂きましたが、今回は誰でもすぐに使えそうなものを厳選しました。</p><p>より開発向けのツールについては、どなたか続編をお願いします🙇🏼</p><p>以上、お読みいただきありがとうございました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/">初心者向け</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/">環境構築</category>
      
      <category domain="https://future-architect.github.io/tags/%E4%BE%BF%E5%88%A9%E3%83%84%E3%83%BC%E3%83%AB/">便利ツール</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%96%B0%E5%85%A5%E7%A4%BE%E5%93%A1/">新入社員</category>
      
      
      <comments>https://future-architect.github.io/articles/20220107a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>アジャイル開発を2年弱実践した開発者目線で語るアジャイルソフトウェア開発</title>
      <link>https://future-architect.github.io/articles/20220106a/</link>
      <guid>https://future-architect.github.io/articles/20220106a/</guid>
      <pubDate>Wed, 05 Jan 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220106a/concept-gbe000bf93_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;426&quot;&gt;

&lt;h1 id=&quot;自己紹介&quot;&gt;&lt;a href=&quot;#自己紹介&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220106a/concept-gbe000bf93_640.jpg" alt="" width="640" height="426"><h1 id="自己紹介"><a href="#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h1><p>2018年4月新卒入社、TIG所属の関です。</p><p>現在、私は大手メーカ様の社内システムを対象に、アジャイル開発を行っています。<br>基本的には、プロダクトの全体設計に加えてコアや複雑な部分を担当する開発者として参画していますが、改善提案やPOの補佐的な役回りをすることもある立ち位置です。</p><p>このプロジェクトには2年弱入っていますが、開発したシステムは利用ユーザも増え、さらなる拡大を狙う企画も出てきているため、このプロジェクトとしては成功しており、ありがたいことに複数の別プロダクトも担当してもらいたいとの声もいただきました。<br>2年程度の期間、継続してそれなりの成功を収めることができているため、アジャイル開発をテーマに記事を書くことにしました。</p><p>この記事では、アジャイル(ソフトウェア)開発とはそもそも何なのか？どのような時に採用すべきものなのか？といったことについて述べたいと思います。</p><p>今後も不定期にアジャイルについての記事を出していきたいなと考えており、今回はその第一弾です。</p><p>また、当社では私以外にもアジャイル開発に取り組んでいるメンバーもおり、そこで得た知見は<a href="https://future-architect.github.io/articles/20211117a/">JFPUGオープンセミナー2021 DX時代のプロジェクトのあり方で登壇しました</a>などの”<a href="https://future-architect.github.io/tags/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB/">アジャイル</a>“タグのついた過去記事で取り上げられております。アジャイルはチームを単位として機能し、各々のチームが置かれた状況によってアプローチも変わってくるため、見比べてみても面白いかもしれません。</p><h1 id="アジャイルが注目されているのはなぜか？"><a href="#アジャイルが注目されているのはなぜか？" class="headerlink" title="アジャイルが注目されているのはなぜか？"></a>アジャイルが注目されているのはなぜか？</h1><p>実際の定義に入る前に、なぜ注目されているのかを軽く触れておきましょう。</p><p>“アジャイル”という言葉が注目されるようになって、しばらくの期間が経っているように思います。<br>実際、アジャイル経営、アジャイル組織、アジャイル型製品開発、etc.ソフトウェア開発以外にも様々な文脈で”アジャイル”が取り上げられることも増えているようです。<br>なぜ、”アジャイル”が注目されているのでしょうか？<br>昨今のビジネス環境は急激に変化しており、それに対する変化対応力が大きく問われています。<br>この変化対応力に大きな価値を置くのが、”アジャイル”になります。<br>その起源はアジャイルソフトウェア開発で、そこから輸入される形で様々な分野で取り入れられるようになっています。</p><h1 id="アジャイルソフトウェア開発とは？"><a href="#アジャイルソフトウェア開発とは？" class="headerlink" title="アジャイルソフトウェア開発とは？"></a>アジャイルソフトウェア開発とは？</h1><p>アジャイルソフトウェア開発宣言にで示された価値観に基づき実践されるソフトウェア開発のことです。具体的には、「下記の4つに価値を置く」という価値観です。</p><ul><li>個人と対話</li><li>動くソフトウェア</li><li>顧客との協調</li><li>変化への対応</li></ul><p>具体的な開発プロセスや手法ではなく、あくまでこれらの価値観に基づくものであるというのが重要です。<br>また、これらの価値観にはそれを支える12の原理・原則が存在します。</p><p>これらの価値観は、<a href="http://agilemanifesto.org/iso/ja/manifesto.html">アジャイルソフトウェア開発宣言</a>（ないしアジャイルマニフェスト）として、原理・原則は<a href="http://agilemanifesto.org/iso/ja/principles.html">アジャイル宣言の背後にある原則</a>としてまとめられており、日本語を含む各国語に翻訳されています。原理主義的ではありますが、<a href="http://agilemanifesto.org/iso/ja/manifesto.html">アジャイルソフトウェア開発宣言</a>がアジャイル開発の起源、原典、聖書であるため、この記事を読み進める前にリンクに飛んで目を通していただけると良いと思います。</p><h1 id="アジャイルソフトウェア開発宣言はどのような経緯で生まれたのか？"><a href="#アジャイルソフトウェア開発宣言はどのような経緯で生まれたのか？" class="headerlink" title="アジャイルソフトウェア開発宣言はどのような経緯で生まれたのか？"></a>アジャイルソフトウェア開発宣言はどのような経緯で生まれたのか？</h1><p>アジャイルソフトウェア開発宣言が生まれた会議の発起人の一人であり、誕生の瞬間の立会人でもあるRobert C.Martinが著した書籍: CleanAgileによると、概ね下記の経緯で生まれたようです。</p><ul><li>1970年代前半から30年にわたり、ソフトウェア開発プロセスはウォータフォールが主流であった。</li><li>ウォータフォールは、コマンド&amp;コントロールを基礎とするトップダウンな科学的な管理法である。</li><li>科学的管理法が適するのは、「変更コストは高くてもよい代わりに、目標が具体的であり、明確に定義された問題」である。</li><li>しかし、ソフトウェア開発はそうではなく、(少なくとも著者の周りでは)うまくいってなかった。</li><li>ケントベックのエクストリームプログラミング等に刺激を受けた筆者を含む2名が「軽量級プロセスのサミット」を開催。</li><li>その会議にて、宣言に記載された価値が特定された。</li></ul><p>アジャイルソフトウェア開発宣言は「事前に詳細な分析を行い計画を立て、それをもとに入念な設計を行い、それに基づき実装する」というウォーターフォールに対するアンチテーゼとして生まれました。</p><h1 id="アジャイル開発を成功させるには？"><a href="#アジャイル開発を成功させるには？" class="headerlink" title="アジャイル開発を成功させるには？"></a>アジャイル開発を成功させるには？</h1><p>アジャイル開発を成功させるあたって、考えるべき問題が2つあります。</p><ul><li>そもそもアジャイル開発を採用すべきか？</li><li>どうやってアジャイルの価値を具現化するのか？</li></ul><p>この記事では、「そもそもアジャイルを採用すべきか？」をどう判断するかをメインに書きたいと思います。</p><h2 id="そもそもアジャイルを採用すべきか、どう判断したら良い？"><a href="#そもそもアジャイルを採用すべきか、どう判断したら良い？" class="headerlink" title="そもそもアジャイルを採用すべきか、どう判断したら良い？"></a>そもそもアジャイルを採用すべきか、どう判断したら良い？</h2><p>先ほど見たように、アジャイルは具体的な手法に基づくものではなく、アジャイルソフトウェア開発宣言で述べられた価値観に基づき行う開発です。<br>まずは、今やろうとしている事に対して、アジャイルの価値観がマッチするかをよく考えましょう。</p><p>価値観と対極にあるものが求められているのであれば、ほぼ確実に失敗するでしょう。それでもアジャイルで進めるというのであれば、まずはプロジェクトの責任者、開発者が価値観を理解し、責任者はステークホルダからの理解を得る必要があります。<br>より具体的には、下記が求められるのであれば、まずはその要求自体を排除する必要があります。</p><ul><li>開発者の要求の具体例<ul><li>言われたことだけ、決まったことだけやりたい。</li><li>自分の責任で何かを決めたくない、考えたくない、その責任も負いたくない。</li><li>ビジネス的にどのように役に立つのか興味がないから技術のことだけ考えたい。</li></ul></li><li>プロジェクトの責任者やステークホルダの要求の具体例<ul><li>計画やスケジュールは既に固定されたものなので、その遵守を必須とする。</li><li>目的が忘れ去られた不要にリードタイムの長いプロセスがあり、その遵守が必須（無駄に煩雑な承認フロー、意思決定や合意プロセスなど）とする。</li><li>機能スコープとスケジュールの両方は事前に決めて、削除や変更をしたくない。（が、追加はしたい）</li><li>最初から完璧なものができないと満足できない。</li></ul></li></ul><p>特に、最後に記載した「機能スコープとスケジュールが変更できない」という要求はアジャイルの「変化への対応」という価値観と決して相入れません。この要求を満たすことが必須の場合は、そもそもの出発点から求めていない事になるので、無理して採用すべきではないと言えます。</p><p>人間誰しも、自身が本当に望むものはわかっていないものです。明言されていないからといって要求がないわけではない、ということも認識しておいた方が良いでしょう。組織的な構造やプロセスが問題で要求が避けられない場合もあります。</p><p>例えば、直接のステークホルダにさらにステークホルダ（以降、”間接のステークホルダ”と記載）がいる場合を考えてみましょう。間接のステークホルダが、「機能スコープとスケジュールの厳格な遵守」を強く求めており、力関係が「直接のステークホルダ &lt; 間接のステークホルダ」になっていると、「機能スコープとスケジュールの厳格な遵守」は避けられなくなります。このような場合、間接のステークホルダから理解を得られないといずれうまくいかなくなります。</p><p>また、誰しも魅力的で都合の良い部分ばかり目に入り、不都合なことは顕在化するまで気づかないものです。アジャイルの採用を検討している段階であるなら、「実は、アジャイルマニフェストの左側の価値観(計画に従う事など)の方が求められているのではないか？」は必ず疑ってみましょう。「流行っているからやってみたい」みたいな理由で安易に採用すると、組織構造などの気付いていなかった思わぬ制約に阻まれて痛い目を見るでしょう。</p><p>「よく考えたら実は不要だった」ということも往々にしてあるものです。いずれの場合でも、本当はどうなのかをよく考えて判断する必要があります。<br>例えば、「最初から完璧なものができないと満足できない。」という要求については、多くの場合は排除して良いのではないでしょうか？「システムを導入しその恩恵を受ける」ことが目的であるなら、恩恵を受けられるようになった段階で多少の不便には目を瞑り、利用を開始することで恩恵を受け、それ以後改善と拡張を行う進め方でも問題ないはずです。</p><p>逆に、価値観にマッチするような状況であるならば、大きな価値を発揮してくれるでしょう。<br>これらを踏まえた上で、まずは責任者、開発者、ステークホルダの間でアジャイルの価値観を共有しましょう。プロジェクトを進めるための土台となります。</p><h2 id="どうやってアジャイルの価値を具現化するのか？"><a href="#どうやってアジャイルの価値を具現化するのか？" class="headerlink" title="どうやってアジャイルの価値を具現化するのか？"></a>どうやってアジャイルの価値を具現化するのか？</h2><p>ここまで、””価値観””という少し曖昧なものをメインで見てきましたが、どのように実践し価値を受け取るにはどうすれば良いでしょうか？<br>まずは、<a href="http://agilemanifesto.org/iso/ja/principles.html">アジャイル宣言の背後にある原則</a>を念頭に置き、可能な限り実践すると良いでしょう。<br>また、アジャイルソフトウェア開発は、典型的なプロジェクトの進め方、プラクティス、フレームワークが先人たちによって提唱されており、多くのプロジェクトはこれらのどれかを基礎として進めることが多いです。</p><p>しかしながら、大切なのはこれらの遵守ではなく価値観に基づき、価値を体現することです。宣言の「プロセスやツールより個人と対話」という文言にあるように、「採用したプロセスを遵守していれば良い」という類のものではないことは肝に銘じなければなりません。</p><p>これらの典型的な進め方について、踏み込んだ内容は次回以降でお送りしたいと思います。</p><h1 id="2年弱アジャイル開発を実践して得た所感"><a href="#2年弱アジャイル開発を実践して得た所感" class="headerlink" title="2年弱アジャイル開発を実践して得た所感"></a>2年弱アジャイル開発を実践して得た所感</h1><p>ソフトウェアやシステム開発を自身で行うと痛感しますが、事前にわからないことは思った以上に多いです。次のような経験をしている方も多いのではないでしょうか？</p><ul><li>ちょっとした拡張がしたいが、利用しているライブラリに期待する機能がないから自作する必要が出た。</li><li>（特にUIで）微調整に想像以上に時間がかかる。</li><li>前提として与えられた情報の誤りが判明、修正を余儀なくされる。</li><li>前任の書いたコードが酷く、変更に一々時間がかかるから改善してから取り組みたい。</li></ul><p>一方で、次のような絶対に抑えなければならない項目もあります。</p><ul><li>全体アーキテクチャ</li><li>データモデル</li></ul><p>アジャイルは、事前に入念な計画を練るのではなく、必要な時に必要な分だけ行って、実際の進行具合を見て柔軟に計画を変更することで、継続的に現実の複雑さ、変化、問題に対処し、”その時点での最大価値”を目指す考え方です。”必要な時に必要な分だけ”というのがキーワードですが、単に詰んでいるのを”必要になった!”と誤認している方もいるようです。簡単なように見えて実は難しく、意外にも準備はとても重要です。</p><p>お客様を含む周囲に恵まれたことに加えて、現実に即した考え方を好み、単純に開発が好きという自身の特性が上手く噛み合ったことで、2年弱の間、開発したシステムの価値が向上していったのではないかなと考えています。</p><p>次回以降は、自身の経験を踏まえた、アジャイルソフトウェア開発の全体の流れや、どんな人や環境がマッチするのか、”こんな時にはこう対処する!”といったもう少し踏み込んだエピソード、よくある誤解などについても記載していきたいと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB/">アジャイル</category>
      
      
      <comments>https://future-architect.github.io/articles/20220106a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>FlutterをElectronと組み合わせる</title>
      <link>https://future-architect.github.io/articles/20211228a/</link>
      <guid>https://future-architect.github.io/articles/20211228a/</guid>
      <pubDate>Mon, 27 Dec 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;TIGの伊藤真彦です。&lt;/p&gt;
&lt;p&gt;最近はFlutterの研究を進めており、一人Flutter連載のような動きをしています。&lt;/p&gt;
&lt;h1 id=&quot;FlutterをElectronと組み合わせる&quot;&gt;&lt;a href=&quot;#FlutterをElectronと組み合わせる&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>TIGの伊藤真彦です。</p><p>最近はFlutterの研究を進めており、一人Flutter連載のような動きをしています。</p><h1 id="FlutterをElectronと組み合わせる"><a href="#FlutterをElectronと組み合わせる" class="headerlink" title="FlutterをElectronと組み合わせる"></a>FlutterをElectronと組み合わせる</h1><ul><li><a href="/articles/20211221a/">入門記事</a>: Flutterであればデスクトップアプリケーションを構築することができることを説明しました</li><li><a href="/articles/20210107/">Electronの入門記事</a>: これも私が書きましたが、Electronもクロスプラットフォームのデスクトップアプリケーションを開発できるライブラリです</li></ul><p>ElectronはHTML、Javascriptをアセットとして利用してデスクトップアプリケーションとして動かすことができます、結論としてはFlutterアプリケーションをWEB向けにビルドして、その成果物をElectronアプリケーションとしてビルドすることができました。</p><p>なぜそのような事を行うかというポイントですが2点あります。</p><ul><li>Flutter on Desktop未対応の機能を使いたい</li><li>Electron向けの資産を活かしたい</li></ul><h3 id="Flutter-on-Desktop未対応の機能を使いたい"><a href="#Flutter-on-Desktop未対応の機能を使いたい" class="headerlink" title="Flutter on Desktop未対応の機能を使いたい"></a>Flutter on Desktop未対応の機能を使いたい</h3><p>Flutter on Desktopはまだまだリリースから間もないため、安心して利用できるか見極めながら開発していく必要があります。<br>またFlutter向けパッケージのいくつかはFlutter on Desktopに対応していないものもあります。</p><p>例えば<a href="/articles/20211224a/">先日の記事</a>で技術検証した<a href="https://pub.dev/packages/google_maps_flutter">google_maps_flutter</a>を利用したアプリケーションをデスクトップ向けにビルドすると、執筆時点ではアラートが表示され正常に動作しません。</p><img src="/images/20211228a/image.png" alt="ビルドエラー" width="1200" height="937" loading="lazy"><p>同じソースコードをWEB向けにビルドし、Electronに組み込むと問題なく動作します。</p><img src="/images/20211228a/image_2.png" alt="ElectronでMap表示" width="1200" height="949" loading="lazy"><p>Flutter on Desktopのエコシステムが充実するまでの繋ぎとしてこのような手法をとることができます。</p><h3 id="Electron向けの資産を活かしたい"><a href="#Electron向けの資産を活かしたい" class="headerlink" title="Electron向けの資産を活かしたい"></a>Electron向けの資産を活かしたい</h3><p>ビジネス要件的にどうしても必要な、Electronに向け最適化されたJavaScript、TypeScript製モジュールがありました。これらの資産をDart向けに作り直す必要をなくす、という意味でFlutter on Electronという組み合わせが実現できないかな、という検証を行ったという背景もあります。</p><p>あまり頼りすぎるとFlutter on Desktopに本格移行する難易度が跳ね上がりますが、この組み合わせであれば既存の資産や豊富なnpmモジュールを活用することができます。</p><h1 id="Flutter-on-Desktopのおさらい"><a href="#Flutter-on-Desktopのおさらい" class="headerlink" title="Flutter on Desktopのおさらい"></a>Flutter on Desktopのおさらい</h1><p>Flutterアプリケーションをデスクトップアプリケーションとして動かすことはとても簡単にできます。</p><p>起動時、ビルド時のターゲットを指定するだけです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flutter create myapp</span><br><span class="line"><span class="built_in">cd</span> myapp</span><br><span class="line">flutter run -d macos</span><br></pre></td></tr></table></figure><img src="/images/20211228a/image_3.png" alt="Flutter on Desktopおさらい" width="1200" height="933" loading="lazy"><p>設定でデスクトップ向けのビルドが有効化されていない場合は<code>config</code>コマンドで有効化します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter config --enable-macos-desktop</span><br></pre></td></tr></table></figure><p>既存のプロジェクトで有効化する場合は<code>config</code>で有効化した後にカレントディレクトリで<code>create</code>コマンドを実行すると、対象のプラットフォーム向けの設定ファイルが用意されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter create .</span><br></pre></td></tr></table></figure><p>この辺りの手軽さはやはり素晴らしいと感じますね。</p><h1 id="FlutterアプリケーションをElectronと組み合わせる"><a href="#FlutterアプリケーションをElectronと組み合わせる" class="headerlink" title="FlutterアプリケーションをElectronと組み合わせる"></a>FlutterアプリケーションをElectronと組み合わせる</h1><p>さて本題です。</p><p>やる事自体はFlutterアプリケーションは素直にFlutter on the WEBとして開発し、ビルド成果物を組み込むElectronライブラリを用意する形です。作成したmyappフォルダと同じ階層にElectron部分を用意するフォルダを作成します、名前は<code>nodejs</code>フォルダにしておきます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">project</span><br><span class="line">  ├ myapp</span><br><span class="line">  └ nodejs</span><br></pre></td></tr></table></figure><p><code>nodejs</code>フォルダで諸々準備をするとElectronアプリケーションが利用できるようになります。</p><ul><li>依存モジュールのインストール</li><li>package.jsonの編集</li><li>必要なファイルの配置</li></ul><h3 id="依存モジュールのインストール"><a href="#依存モジュールのインストール" class="headerlink" title="依存モジュールのインストール"></a>依存モジュールのインストール</h3><p><code>nodejs</code>フォルダで<code>npm init</code>コマンドを実行し、Electronを導入します。<a href="https://www.electron.build/">electron-builder</a>が「Yarn is strongly recommended instead on npm」と強く訴えているので、Yarnを使って依存モジュールを導入します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nodejs</span><br><span class="line">npm init -y</span><br><span class="line">yarn</span><br><span class="line">yarn add electron --dev</span><br><span class="line">yarn add electron-builder --dev</span><br></pre></td></tr></table></figure><h3 id="package-jsonの編集"><a href="#package-jsonの編集" class="headerlink" title="package.jsonの編集"></a>package.jsonの編集</h3><p>インストールが完了したら必要なファイルやコマンドを整備します。まずは<code>package.json</code>に下記の内容を追加します。</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;main&quot;</span>: <span class="string">&quot;src/background.js&quot;</span>,</span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="attr">&quot;start&quot;</span>: <span class="string">&quot;cd ../myapp flutter run&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;electron:start&quot;</span>: <span class="string">&quot;bash ../build.sh &amp;&amp; electron src/background.js&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;electron:build&quot;</span>: <span class="string">&quot;bash ../build.sh &amp;&amp; electron-builder&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>start</code>コマンドはピュアにFlutterアプリとして動かしたい場合にいちいちフォルダを移動するのが面倒なのでオマケのようなノリで追加しています。</p><h3 id="必要なファイルの配置"><a href="#必要なファイルの配置" class="headerlink" title="必要なファイルの配置"></a>必要なファイルの配置</h3><p>追加したコマンドはElectronアプリケーションを起動、またはビルドする前にFlutterのビルドコマンドを記載したシェルを叩く、という仕組みにしています。</p><p><code>build.sh</code>は下記のような内容です。</p><figure class="highlight sh"><figcaption><span>build.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># flutterアプリをビルド</span></span><br><span class="line"><span class="built_in">cd</span> ../mymap</span><br><span class="line">flutter build web</span><br><span class="line"><span class="comment"># ビルド成果物をコピー</span></span><br><span class="line">cp -r ./build/web/ ../nodejs/src/</span><br><span class="line"><span class="comment"># electronで動かすためhtmlの内容を修正</span></span><br><span class="line">sed -i -e <span class="string">&#x27;s/base href=\&quot;\/\&quot;/base href=\&quot;\&quot;/&#x27;</span> ../nodejs/src/index.html</span><br></pre></td></tr></table></figure><p>Flutter on the Webには<code>index.html</code>に記載された<code>base</code>タグを参照してJavascriptのモジュールが動く仕組みになっています。</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  If you are serving your web app in a path other than the root, change the</span></span><br><span class="line"><span class="comment">  href value below to reflect the base path you are serving from.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  The path provided below has to start and end with a slash &quot;/&quot; in order for</span></span><br><span class="line"><span class="comment">  it to work correctly.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  For more details:</span></span><br><span class="line"><span class="comment">  * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  This is a placeholder for base href that will be replaced by the value of</span></span><br><span class="line"><span class="comment">  the `--base-href` argument provided to `flutter build`.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;$FLUTTER_BASE_HREF&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>このbaseタグはビルド時のオプションで変更できます。<br>Webアプリとしてビルドする時に、デプロイする先のドメインを柔軟に変更できるためのオプションです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter build web --base-href <span class="string">&quot;/myapp/&quot;</span></span><br></pre></td></tr></table></figure><p>デフォルト値は<code>/</code>になっています。Electronで利用する場合、<code>base</code>タグの値は空文字が都合が良いのですが、オプションで空文字を指定するとエラーが起きてしまいます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ flutter build web --base-href <span class="string">&quot;&quot;</span></span><br><span class="line">base-href should start and end with /</span><br></pre></td></tr></table></figure><p>仕方がないので一旦オプション無しでビルドして、sedコマンドで編集しています。</p><p><code>index.html</code>のテンプレートを変更してしまっても良いですが、Flutter側の変更は控えることでElectronとFlutterの関係性をなるべく疎結合なものに保ちたい意図があります。ともかくこれだけの変更でFlutter on the WEB向けにビルドしたファイルがElectronのアセットファイルとして利用できます。</p><p>あとは<code>package.json</code>に追加したコマンドで指定している場所(nodejs/src)に<code>background.js</code>を配置しておきます。中身はよくあるElectron向けの起動スクリプトです。個人的にはVue.js向けのElectronプラグインが生成してくれるファイルが一番気が利いていると感じているのですが、MacOSでのエッジケース向けの挙動などはそこから拝借しています。</p><figure class="highlight js"><figcaption><span>background.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> electron = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = electron.app;</span><br><span class="line"><span class="keyword">const</span> BrowserWindow = electron.BrowserWindow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isDevelopment = process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Keep a global reference of the window object, if you don&#x27;t, the window will</span></span><br><span class="line"><span class="comment">// be closed automatically when the JavaScript object is garbage collected.</span></span><br><span class="line"><span class="keyword">let</span> win</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">createWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Create the browser window.</span></span><br><span class="line">  win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    <span class="attr">autoHideMenuBar</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">useContentSize</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="number">1280</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">      <span class="attr">nodeIntegration</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">contextIsolation</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  win.loadURL(<span class="string">&#x27;file://&#x27;</span> + __dirname + <span class="string">&#x27;/index.html&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Quit when all windows are closed.</span></span><br><span class="line">app.on(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  app.quit()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">&#x27;activate&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// On macOS it&#x27;s common to re-create a window in the app when the</span></span><br><span class="line">  <span class="comment">// dock icon is clicked and there are no other windows open.</span></span><br><span class="line">  <span class="keyword">if</span> (BrowserWindow.getAllWindows().length === <span class="number">0</span>) createWindow()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// This method will be called when Electron has finished</span></span><br><span class="line"><span class="comment">// initialization and is ready to create browser windows.</span></span><br><span class="line"><span class="comment">// Some APIs can only be used after this event occurs.</span></span><br><span class="line">app.on(<span class="string">&#x27;ready&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  createWindow()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Exit cleanly on request from parent process in development mode.</span></span><br><span class="line"><span class="keyword">if</span> (isDevelopment) &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.platform === <span class="string">&#x27;win32&#x27;</span>) &#123;</span><br><span class="line">    process.on(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (data === <span class="string">&#x27;graceful-exit&#x27;</span>) &#123;</span><br><span class="line">        app.quit()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    process.on(<span class="string">&#x27;SIGTERM&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      app.quit()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>パスはElectronをVue.jsと組み合わせた場合一般的にここになる、という意図でsrcに配置しています、名前が<code>main.js</code>になっても<code>package.json</code>に記載した内容と齟齬がなければ問題なく動きます。</p><p>Flutter on the Web向けのファイルをビルドすると<code>main.dart.js</code>というファイルが生成されますが、今後アップデートによる挙動の変化があってもFlutter側の成果物と名称がぶつからない名前にしておくと良いでしょう。<code>background.js</code>という名称もVue.js向けプラグインが生成するファイルに倣っています。</p><p>上記の準備を終えるとElectronアプリケーションとしてFlutterのデモアプリが動きます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> nodejs</span><br><span class="line">yarn electron:start</span><br></pre></td></tr></table></figure><img src="/images/20211228a/image_4.png" alt="Flutter on Electron" width="1200" height="769" loading="lazy"><p>Flutter on Desktopとして起動したものと比較すると、微妙にフォントが変わるなどの違いが発生しますが、どちらも快適に動作します(右がFlutter on Desktopです)。ウィンドウのリサイズ時の挙動などはFlutter on Desktopの方がスムーズです、この辺りは仕組み上仕方がないかな、といった印象です。</p><img src="/images/20211228a/image_5.png" alt="Flutter on Desktopとの表示の違い" width="1200" height="465" loading="lazy"><p>今回の仕組みではFlutterアプリケーション自体は素直にFlutterアプリケーションとして開発できているので、Flutter on Desktopでも問題なければフットワーク軽めに移行できます。</p><p>デスクトップ対応は魅力的だけど、欲しい機能がまだ動かなかったので見送る、というパターンの時の選択肢としてはオススメできるかなと思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>Flutter on Desktop未対応のパッケージはまだ存在する</li><li>Flutter on the WEBとElectronの組み合わせは簡単に実現できる</li></ul><p>なかなかトリッキーな試みでブログ記事にするか迷いましたが、面白いという意見をいただけたのと意外と需要があるかも…?ということで記事にしてみました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Flutter/">Flutter</category>
      
      <category domain="https://future-architect.github.io/tags/Dart/">Dart</category>
      
      <category domain="https://future-architect.github.io/tags/Electron/">Electron</category>
      
      
      <comments>https://future-architect.github.io/articles/20211228a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>科目等履修生はいいぞ</title>
      <link>https://future-architect.github.io/articles/20211227a/</link>
      <guid>https://future-architect.github.io/articles/20211227a/</guid>
      <pubDate>Sun, 26 Dec 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20211227a/education-g3f9d86844_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;404&quot;&gt;

&lt;p&gt;TIG</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20211227a/education-g3f9d86844_640.jpg" alt="" width="640" height="404"><p>TIG DXユニット所属の中川旭です。</p><p>昔から興味がありCS(Computer Science)に触れてはきましたが、大学では非CSの学部に行ったため体系的な知識を持っているのか不安を持ちながら過ごしてきました。<br>働き始めてお金に余裕が生まれたこと、そして優秀なメンバーに囲まれ学習意欲が湧いてきたことからふと私は思い立ちました。</p><p><strong>よし！大学院行くぞ！</strong></p><p>でも、社会人コースであったとしてもいきなり修士課程に入学するのはハードルが高い。<br>入学を決める前に、社会人学生になるとどのような生活をすることになるか知っておきたい。<br>そんな私が見つけたのが「科目等履修生制度」でした。</p><h2 id="科目等履修生とは"><a href="#科目等履修生とは" class="headerlink" title="科目等履修生とは"></a>科目等履修生とは</h2><p>科目等履修生とは、「正規生でない、大学や大学院の科目を履修する者」のことです。<br>日本の大学/大学院の多くが科目等履修生制度を採用しています。<br><a href="https://www.niad.ac.jp/n_gakui/application/kamokutou/">大学改革支援・学位授与機構のページ</a> に一覧があるので、気になる大学を調べてみましょう。</p><h2 id="科目等履修生の特徴"><a href="#科目等履修生の特徴" class="headerlink" title="科目等履修生の特徴"></a>科目等履修生の特徴</h2><p>科目等履修生には、以下のような特徴があります。</p><ul><li>一つの科目から履修が可能である</li><li>履修した科目の単位を正式に認定される</li><li>授業料は履修する単位数の分だけ支払う（そのほか、検定料や入学料がかかります）</li></ul><p>このため、「この分野について学んでみたいけど、まだ知らないから入学は決意できない」という方や「この先生の講義を受けてみたい！」という方に最適な制度です。</p><p>そしてなんと、単位が正式に認定されるため、もし大学や大学院に入学する場合に取得済みの単位として認められる場合があります。※事前によく調べましょう。</p><h3 id="ちなみに料金"><a href="#ちなみに料金" class="headerlink" title="ちなみに料金"></a>ちなみに料金</h3><p>大学によって異なるかと思いますが、私が科目を履修しているJAIST東京社会人コースでは以下のようになっています。<br>在学期間満了日から2年以内であれば授業料のみでまた履修が可能で、検定料と入学料を再度支払う必要はありません。</p><p><a href="https://www.jaist.ac.jp/education/non-degree/">https://www.jaist.ac.jp/education/non-degree/</a></p><ul><li>検定料 9800円</li><li>入学料 28,200円</li><li>授業料 14,800円 / 1単位</li></ul><p>※各大学の最新の情報を参照してください。</p><h3 id="社会人向けの情報系コースがある大学院"><a href="#社会人向けの情報系コースがある大学院" class="headerlink" title="社会人向けの情報系コースがある大学院"></a>社会人向けの情報系コースがある大学院</h3><p>こちらのブログを読んでいる人はIT業界の方が多そう、ということで情報系のコースで社会人が勤務しながらでも通いやすいように配慮されている大学院について書いておきます。私が調べた範囲なので網羅できているわけではありません。</p><ul><li><a href="https://www.jaist.ac.jp/satellite/sate/">北陸先端科学技術大学院大学(JAIST) 東京社会人コース</a><br><a href="https://www.jaist.ac.jp/education/non-degree/">科目等履修生制度のページ</a><br>「東京社会人コース」とある通り、社会人向けのコースが存在します。講義は基本的に土日に行われるため、スケジュールの調整がしやすいことが特徴です。<br>私もJAISTの東京サテライトの講義を受講しています。</li><li><a href="https://aiit.ac.jp/">東京都立産業技術大学院大学(AIIT)</a><br><a href="https://aiit.ac.jp/admission/credited_student/">AIIT単位バンク制度(科目等履修生制度)のページ</a><br>社会人学生が約8割を占める、社会人が通いやすい大学院です。<br>講義の多くが土日と平日夜間に行われており、平日日中に仕事をしながらでも受講しやすくなっています。</li></ul><h2 id="科目等履修生をやってよかったこと"><a href="#科目等履修生をやってよかったこと" class="headerlink" title="科目等履修生をやってよかったこと"></a>科目等履修生をやってよかったこと</h2><h3 id="自分の生活にあった負荷で履修できる"><a href="#自分の生活にあった負荷で履修できる" class="headerlink" title="自分の生活にあった負荷で履修できる"></a>自分の生活にあった負荷で履修できる</h3><p>3か月で社会人コースの1科目2単位を履修しており、平日に適度に課題をこなす状態をキープできています。<br>〇年間で△単位といった決まりがないため、次はもう少し増やそう、減らそう、と調節ができるのは科目等履修生の非常に大きなメリットです。</p><h3 id="興味のある科目を履修できる"><a href="#興味のある科目を履修できる" class="headerlink" title="興味のある科目を履修できる"></a>興味のある科目を履修できる</h3><p>自分にとって大学生時代の履修の目的は「学位を取得すること」でしたが、科目等履修生としての履修の目的は「その科目の学習をすること」であると強く自覚できており、楽しみながら講義を受け課題に取り組むことができています。</p><p>私が履修しているのは「並列処理」という講義です。この講義では処理能力向上のためにハードウェア・ソフトウェアの両面からどのような工夫がされてきたか学ぶことができます。実習では講義の内容を生かしたプログラムを作成し、なんとJAISTのスーパーコンピューターで実行することもできます。スパコンを使えるなんて、これだけでもコスパがいいですね！</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>技術の進歩が非常に早いこともあり、IT業界には他の業界よりも社会人学生や働いてから大学や大学院に行く例が多いように見えます。しかしまだまだ周囲からの理解が得られないこともあるかと思います。</p><p>科目等履修生という選択肢の存在がもっと広く知られ、もともと興味のあった分野や仕事を通じて興味を持ったことについて多くの人が気軽に学べるようになるといいなと思っています。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%A7%E5%AD%A6%E9%99%A2/">大学院</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%A7%91%E7%9B%AE%E7%AD%89%E5%B1%A5%E4%BF%AE%E7%94%9F/">科目等履修生</category>
      
      
      <comments>https://future-architect.github.io/articles/20211227a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>FlutterでGoogleマップを表示してみる</title>
      <link>https://future-architect.github.io/articles/20211224a/</link>
      <guid>https://future-architect.github.io/articles/20211224a/</guid>
      <pubDate>Thu, 23 Dec 2021 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;TIGの伊藤真彦です&lt;/p&gt;
&lt;p&gt;先日&lt;a href=&quot;/articles/20211221a/&quot;&gt;入門記事&lt;/a&gt;を書いたFlutterですが、実践的なアプリケーションの作り込みも試してみました。&lt;/p&gt;
&lt;h1</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>TIGの伊藤真彦です</p><p>先日<a href="/articles/20211221a/">入門記事</a>を書いたFlutterですが、実践的なアプリケーションの作り込みも試してみました。</p><h1 id="FlutterでGoogleマップを表示したい"><a href="#FlutterでGoogleマップを表示したい" class="headerlink" title="FlutterでGoogleマップを表示したい"></a>FlutterでGoogleマップを表示したい</h1><p>FlutterではGoogleマップを表示するためのウィジェットが存在するため、どのくらい簡単に実現できるか検証してみました。</p><h1 id="実装の準備"><a href="#実装の準備" class="headerlink" title="実装の準備"></a>実装の準備</h1><p><a href="https://developers.google.com/maps/documentation?hl=ja">Google Maps Platform</a>を活用することで、任意のアプリケーションからGoogleマップの機能を利用することができます。<br>アプリケーションの実装の前に、GCPアカウントを用意し、<code>Maps JavaScript API</code>など必要な機能を有効化し、APIを実行するためのキーを払い出す必要があります。</p><h1 id="google-maps-flutter"><a href="#google-maps-flutter" class="headerlink" title="google_maps_flutter"></a>google_maps_flutter</h1><p>Flutterでは<a href="https://pub.dev/packages/google_maps_flutter">google_maps_flutter</a>というパッケージが存在します。Flutterチームのオフィシャルプラグインで安心感が高いです。このプラグインの機能を試してみます。</p><p>今回もFlutter on the Webで検証します。</p><h2 id="パッケージの導入"><a href="#パッケージの導入" class="headerlink" title="パッケージの導入"></a>パッケージの導入</h2><p>環境構築、Hello Worldアプリケーションの用意は<a href="https://future-architect.github.io/articles/20211221a/">環境構築の記事</a>を参照してください。<br>アプリケーションの用意ができたらパッケージをインストールします。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter pub add google_maps_flutter</span><br></pre></td></tr></table></figure><p>Flutter on the Webでは<a href="https://pub.dev/packages/google_maps_flutter_web">google_maps_flutter_web</a>も導入します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter pub add google_maps_flutter_web</span><br></pre></td></tr></table></figure><p>導入するとGoogleMapウィジェットが使えるようになります。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:google_maps_flutter/google_maps_flutter.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> GoogleMap(</span><br><span class="line">      mapType: MapType.normal,</span><br><span class="line">      initialCameraPosition: _kGooglePlex,</span><br><span class="line">      markers: _markers,</span><br><span class="line">      polylines: _lines,</span><br><span class="line">      onMapCreated: (GoogleMapController controller) &#123;</span><br><span class="line">        _controller.complete(controller);</span><br><span class="line">      &#125;,</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Flutter on the Webでは<code>index.html</code>のヘッダー部分にGoogle MapsのJavascriptを追加するとウィジェットが正常に動作します。</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://maps.googleapis.com/maps/api/js?key=MyApiKey&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ウィジェットを組み込む"><a href="#ウィジェットを組み込む" class="headerlink" title="ウィジェットを組み込む"></a>ウィジェットを組み込む</h2><p><a href="https://pub.dev/packages/google_maps_flutter/example">公式example</a>は中々壮大な例となっており、最小限の機能を抜粋するのが逆に難しいくらいです.<br><a href="https://github.com/flutter/plugins/tree/master/packages/google_maps_flutter/google_maps_flutter">GitHubのREADME</a>には比較的ミニマムな実装が用意されています。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:google_maps_flutter/google_maps_flutter.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Google Maps Demo&#x27;</span>,</span><br><span class="line">      home: MapSample(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapSample</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;MapSample&gt; createState() =&gt; MapSampleState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapSampleState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MapSample</span>&gt; </span>&#123;</span><br><span class="line">  Completer&lt;GoogleMapController&gt; _controller = Completer();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> CameraPosition _kGooglePlex = CameraPosition(</span><br><span class="line">    target: LatLng(<span class="number">37.42796133580664</span>, <span class="number">-122.085749655962</span>),</span><br><span class="line">    zoom: <span class="number">14.4746</span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> CameraPosition _kLake = CameraPosition(</span><br><span class="line">      bearing: <span class="number">192.8334901395799</span>,</span><br><span class="line">      target: LatLng(<span class="number">37.43296265331129</span>, <span class="number">-122.08832357078792</span>),</span><br><span class="line">      tilt: <span class="number">59.440717697143555</span>,</span><br><span class="line">      zoom: <span class="number">19.151926040649414</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Scaffold(</span><br><span class="line">      body: GoogleMap(</span><br><span class="line">        mapType: MapType.hybrid,</span><br><span class="line">        initialCameraPosition: _kGooglePlex,</span><br><span class="line">        onMapCreated: (GoogleMapController controller) &#123;</span><br><span class="line">          _controller.complete(controller);</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton.extended(</span><br><span class="line">        onPressed: _goToTheLake,</span><br><span class="line">        label: Text(<span class="string">&#x27;To the lake!&#x27;</span>),</span><br><span class="line">        icon: Icon(Icons.directions_boat),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Future&lt;<span class="keyword">void</span>&gt; _goToTheLake() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> GoogleMapController controller = <span class="keyword">await</span> _controller.future;</span><br><span class="line">    controller.animateCamera(CameraUpdate.newCameraPosition(_kLake));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>main.dart</code>を上記コードに置き換えてアプリケーションを起動すると画像のような状態になります。</p><img src="/images/20211224a/image.png" alt="Google Mapサンプルアプリ" width="628" height="719" loading="lazy"><p>実際のアプリケーションではGoogleMapウィジェットを全画面に表示するだけのものを作ることにはならないと思います。<br>サンプルの様々な部分を参考に何らかの機能を追加したり、他のウィジェットと組み合わせたりと拡張していきましょう。</p><p>例えば他の情報を表示する余白を作るためにContainerウィジェットでGoogleMapウィジェットをラッピングするようなことができます。<br><img src="/images/20211224a/image_2.png" alt="ウィジェットを用いてラッピングしたマップ" width="1200" height="1278" loading="lazy"></p><p>README記載のサンプルで表示される地図の場所はGoogle本社オフィスのようです、近くにゴルフ場やコンピュータ歴史博物館があるんですね、楽しそうです。</p><h1 id="地図のプロパティを変更する"><a href="#地図のプロパティを変更する" class="headerlink" title="地図のプロパティを変更する"></a>地図のプロパティを変更する</h1><p>GoogleMapウィジェットのプロパティを設定する事で地図の描画スタイルや機能の有無など様々な変更ができます。<br><a href="https://pub.dev/documentation/google_maps_flutter/latest/google_maps_flutter/GoogleMap-class.html">ドキュメント</a>を参考に変更してみましょう。</p><p>例えば<code>mapType</code>プロパティをnormalに変更することで、地図の描画が航空写真から地図らしい描画に切り替わります。</p><figure class="highlight dart"><figcaption><span>dart main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GoogleMap(</span><br><span class="line">  mapType: MapType.normal,</span><br><span class="line">  <span class="comment">// 以下省略</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><img src="/images/20211224a/image_3.png" alt="地図画像" width="1200" height="909" loading="lazy"><h1 id="地図にマーカーを表示する"><a href="#地図にマーカーを表示する" class="headerlink" title="地図にマーカーを表示する"></a>地図にマーカーを表示する</h1><p>独自のアプリケーションを作り込むからには、任意の地点を地図に表示したい要望が出てくるでしょう。GoogleMapウィジェットの<a href="https://pub.dev/documentation/google_maps_flutter/latest/google_maps_flutter/GoogleMap/markers.html">markersプロパティ</a>に<code>Set&lt;Marker&gt;</code>の適切なデータを追加することでマーカーが表示されます。</p><p><a href="https://pub.dev/documentation/google_maps_flutter_platform_interface/latest/google_maps_flutter_platform_interface/Marker-class.html">Markerクラス</a>は位置情報、アイコンなどのプロパティの他、オンクリックイベントのコールバック関数などを設定することができます。マーカーの位置情報である<a href="https://pub.dev/documentation/google_maps_flutter_platform_interface/latest/google_maps_flutter_platform_interface/LatLng-class.html">LatLngクラス</a>は緯度経度の情報です。</p><p>infoWindowでマーカーの名称や情報を追加できます。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span>&lt;Marker&gt; _markers = &#123;</span><br><span class="line">  Marker(</span><br><span class="line">    markerId: MarkerId(<span class="string">&quot;marker1&quot;</span>),</span><br><span class="line">    position: LatLng(<span class="number">37.4224411</span>,<span class="number">-122.0884808</span>),</span><br><span class="line">    infoWindow: InfoWindow(title: <span class="string">&quot;フューチャー株式会社&quot;</span>),</span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">GoogleMap(</span><br><span class="line">  markers: _markers,</span><br><span class="line">  <span class="comment">// 以下省略</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><img src="/images/20211224a/image_4.png" alt="地図上にマーカー" width="1200" height="616" loading="lazy"><h1 id="地図に線を引く"><a href="#地図に線を引く" class="headerlink" title="地図に線を引く"></a>地図に線を引く</h1><p>GoogleMapウィジェットは<a href="https://pub.dev/documentation/google_maps_flutter/latest/google_maps_flutter/GoogleMap/polylines.html">polylinesプロパティ</a>で２点間のルート情報を表示することもできます。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span>&lt;Marker&gt; _markers = &#123;</span><br><span class="line">  Marker(</span><br><span class="line">    markerId: MarkerId(<span class="string">&quot;marker1&quot;</span>),</span><br><span class="line">    position: LatLng(<span class="number">37.42246006639176</span>, <span class="number">-122.08409675340478</span>),</span><br><span class="line">    infoWindow: InfoWindow(title: <span class="string">&quot;Google本社&quot;</span>),</span><br><span class="line">  ),</span><br><span class="line">  Marker(</span><br><span class="line">    markerId: MarkerId(<span class="string">&quot;marker2&quot;</span>),</span><br><span class="line">    position: LatLng(<span class="number">37.42747752203552</span>, <span class="number">-122.08057852883495</span>),</span><br><span class="line">    infoWindow: InfoWindow(title: <span class="string">&quot;ショアライン・アンフィシアター&quot;</span>),</span><br><span class="line">  ),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Set</span>&lt;Polyline&gt; _lines = &#123;</span><br><span class="line">  Polyline(</span><br><span class="line">    polylineId: PolylineId(<span class="string">&quot;line1&quot;</span>),</span><br><span class="line">    points: [</span><br><span class="line">      LatLng(<span class="number">37.42246006639176</span>, <span class="number">-122.08409675340478</span>),</span><br><span class="line">      LatLng(<span class="number">37.42747752203552</span>, <span class="number">-122.08057852883495</span>),</span><br><span class="line">    ],</span><br><span class="line">    color: Colors.blue,</span><br><span class="line">  ),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">GoogleMap(</span><br><span class="line">  markers: _markers,</span><br><span class="line">  polylines: _lines,</span><br><span class="line">  <span class="comment">// 以下省略</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>Set&lt;Polyline&gt;</code>のデータを用意することで青い線を引くことができました。</p><img src="/images/20211224a/image_5.png" alt="2点間で線を引く" width="1200" height="770" loading="lazy"><p>しかしこれではスタートとゴールの間に山があろうと谷があろうと乗り越え直進するという無茶なルートしか表示できません。</p><h2 id="Directions-APIを活用する"><a href="#Directions-APIを活用する" class="headerlink" title="Directions APIを活用する"></a>Directions APIを活用する</h2><p>これまで紹介したGoogle MapのAPIは地図の描画に専念して用意されたAPIです。経路探索や距離の計算は別のAPIとして公開されています。</p><p><a href="https://developers.google.com/maps/documentation/directions/overview?hl=ja">Directions API</a>を利用することで、任意の２点間の現実的で最適な経路を取得することができます。  <code>Directions API</code>も<code>Javascript API</code>のようにGCPの管理画面で機能を有効化する必要があります。</p><p><code>Directions API</code>を実行するDartパッケージとして<a href="https://pub.dev/packages/flutter_polyline_points">flutter_polyline_points</a>が存在しますが、執筆時点ではレスポンスのパース処理に不具合があったため、愚直に<code>Directions API</code>を実行し、レスポンスのパースは<a href="https://pub.dev/packages/google_polyline_algorithm">google_polyline_algorithm</a>で行いました。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:google_polyline_algorithm/google_polyline_algorithm.dart&#x27;</span>;</span><br><span class="line">Future&lt;<span class="built_in">List</span>&lt;LatLng&gt;&gt; getPolylineResult(</span><br><span class="line">  LatLng origin,</span><br><span class="line">  LatLng destination,</span><br><span class="line">  <span class="built_in">List</span>&lt;LatLng&gt; wayPoints) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> params = &#123;</span><br><span class="line">    <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;<span class="subst">$&#123;origin.latitude&#125;</span>,<span class="subst">$&#123;origin.longitude&#125;</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;destination&quot;</span>: <span class="string">&quot;<span class="subst">$&#123;destination.latitude&#125;</span>,<span class="subst">$&#123;destination.longitude&#125;</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;driving&quot;</span>,</span><br><span class="line">    <span class="string">&quot;avoidHighways&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">    <span class="string">&quot;avoidFerries&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">    <span class="string">&quot;avoidTolls&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: <span class="string">&quot;MyApiKey&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (wayPoints.isNotEmpty) &#123;</span><br><span class="line">    <span class="built_in">List</span> wayPointsArray = [];</span><br><span class="line">    wayPoints.forEach((point) &#123;</span><br><span class="line">      <span class="built_in">String</span> encoded = encodePolyline([[point.latitude.toDouble(), point.longitude.toDouble()]]);</span><br><span class="line">      wayPointsArray.add(<span class="string">&quot;enc:<span class="subst">$&#123;encoded&#125;</span>:&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">String</span> wayPointsString = wayPointsArray.join(<span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">    params.addAll(&#123;<span class="string">&quot;waypoints&quot;</span>: wayPointsString&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Uri</span> uri = <span class="built_in">Uri</span>.https(<span class="string">&quot;maps.googleapis.com&quot;</span>, <span class="string">&quot;maps/api/directions/json&quot;</span>, params);</span><br><span class="line">  <span class="keyword">var</span> response = <span class="keyword">await</span> http.<span class="keyword">get</span>(uri);</span><br><span class="line">  <span class="built_in">List</span>&lt;LatLng&gt; polylineCoordinates = [];</span><br><span class="line">  <span class="keyword">if</span> (response.statusCode != <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> parsedJson = json.decode(response.body);</span><br><span class="line">  <span class="keyword">if</span> (parsedJson[<span class="string">&quot;status&quot;</span>]?.toLowerCase() != <span class="string">&quot;ok&quot;</span> || parsedJson[<span class="string">&quot;routes&quot;</span>] == <span class="keyword">null</span> || parsedJson[<span class="string">&quot;routes&quot;</span>].isEmpty) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">num</span>&gt;&gt; points = decodePolyline(parsedJson[<span class="string">&quot;routes&quot;</span>][<span class="number">0</span>][<span class="string">&quot;overview_polyline&quot;</span>][<span class="string">&quot;points&quot;</span>]);</span><br><span class="line">  points.forEach((point) &#123;</span><br><span class="line">    polylineCoordinates.add(LatLng(point[<span class="number">0</span>].toDouble(), point[<span class="number">1</span>].toDouble()));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> polylineCoordinates;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>パッケージを導入すると使えるようになる<code>decodePolyline()</code>はレスポンスにあるエンコードされた経路情報をデコードして緯度経度の配列にする関数です。</p><p>曲がり角の情報だけでなく、線を道に沿って表示するにはどこを繋ぐとよいのか、という詳細な緯度経度情報の配列が取得できます。<a href="https://developers.google.com/maps/documentation/utilities/polylinealgorithm">エンコードされた緯度軽度の圧縮アルゴリズム</a>はドキュメントとして公開されているため、仕様に則ってデコードするだけですが、中々難しいことをしています。</p><p><code>Drection API</code>の実行結果を地図に反映させると画像のようになります。完璧なルートが出力されました、当たり前のように使ってるGoogleマップって改めて考えると凄いなと感じますね。</p><img src="/images/20211224a/image_6.png" alt="image.png" width="1200" height="1337" loading="lazy"><p>なおFlutter on the Webとして動かす場合、<code>maps.googleapis.com</code>へのGETリクエストはCORS設定の都合で失敗してしまいます。ウェブサイトとして完成させるには同一ドメインで<code>maps.googleapis.com</code>へのリクエストを代行してくれるプロキシ的なバックエンドを作る必要があります。単にローカルでは一旦ブラウザで動かしたい、という場合は<code>chromium</code>をインストールして、オプション付きで起動すると動作します。</p><p>下記のようなシェルスクリプトを用意します。</p><figure class="highlight sh"><figcaption><span>google-chrome-unsafe.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/chromium --disable-web-security --user-data-dir=<span class="string">&quot;A-TEMP-LOCATION&quot;</span> $*</span><br></pre></td></tr></table></figure><p>環境変数<code>CHROME_EXECUTABLE</code>でFlutterが起動するブラウザの起動設定をカスタマイズできます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CHROME_EXECUTABLE=`<span class="built_in">pwd</span>`/google-chrome-unsafe.sh flutter run</span><br></pre></td></tr></table></figure><p>Flutter on the Webは、対象プラットフォームがモバイルアプリだけだった頃に作られたライブラリがCORS対策の問題などで上手く動かない、という可能性があるかもしれません。</p><h1 id="アプリケーションとして整備する"><a href="#アプリケーションとして整備する" class="headerlink" title="アプリケーションとして整備する"></a>アプリケーションとして整備する</h1><p>最低限やれることはわかってきました。ウィジェットとしてリファクタリングする、データの取得と画面描画をリファクタリングする、オンクリックイベントの実装などアプリケーションとして作り込んでいきます。サンプルアプリケーションを見るとGoogleMapウィジェットはExpandウィジェットなどと組み合わせて利用されています。今回はColumnウィジェットの一要素としてGoogleMapウィジェットを読み込んでみるスタイルにしてみます。Columnウィジェットに積み込む他のウィジェットは適当にflutterロゴを出してみます。</p><img src="/images/20211224a/image_7.png" alt="image.png" width="1200" height="730" loading="lazy"><p>オンクリックイベントの実験と、infoWindowより自由度の高いUIを実現したい、という観点で、マーカーをタップするとサイドバーが表示されるような作り込みもしてみました。</p><img src="/images/20211224a/image_8.png" alt="image.png" width="1200" height="728" loading="lazy"><p>サンプルを試していた時にはマーカーやルートの位置情報をソースコードに愚直に書きましたが、実際にアプリケーションとして作り込むにあたっては、ウィジェットのレイアウトとビジネスロジックはなるべく切り分けたいですね。</p><p>表示したい情報の取得は一般的にサーバーサイドへアクセスする処理を非同期な関数で実装する事になることを想定しています。律儀にデータの取得完了を待ってから<a href="https://api.flutter.dev/flutter/widgets/FutureBuilder-class.html">FutureBuilderウィジェット</a>を利用して描画する手法も試してみましたが、地図に描画するデータの更新ではマーカーやルートを取得して差し替えた際に地図そのものの再描画は発生せず綺麗に動くため、素直に<code>setState</code>を利用した方が快適に動きました。</p><p>上記の作り込みをまとめると下記のようになります。</p><p>今回は大掛かりなファイル分割は行わず、<code>main.dart</code>と<code>service.dart</code>の2ファイルに分けて、GoogleMap用のトークンを書き換えたら動くような形にしました。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:async&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:google_maps_flutter/google_maps_flutter.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./service.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      title: <span class="string">&#x27;Flutter Google Maps Demo&#x27;</span>,</span><br><span class="line">      home: MapSample(),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapSample</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;MapSample&gt; createState() =&gt; MapSampleState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapSampleState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MapSample</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> _scaffoldKey = GlobalKey&lt;ScaffoldState&gt;();</span><br><span class="line">  Completer&lt;GoogleMapController&gt; _controller = Completer();</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> CameraPosition _kGooglePlex = CameraPosition(</span><br><span class="line">    target: LatLng(<span class="number">37.42796133580684</span>, <span class="number">-122.085749655962</span>),</span><br><span class="line">    zoom: <span class="number">14.4746</span>,</span><br><span class="line">  );</span><br><span class="line">  <span class="built_in">Set</span>&lt;Polyline&gt; _lines = &#123;&#125;;</span><br><span class="line">  <span class="built_in">Set</span>&lt;Marker&gt; _markers = &#123;&#125;;</span><br><span class="line">  <span class="built_in">String</span> _drawer_name = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="built_in">String</span> _drawer_info = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="built_in">String</span> _drawer_lat = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="built_in">String</span> _drawer_lng = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    createPolylines();</span><br><span class="line">    createMarkers();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        FlutterLogo(),</span><br><span class="line">        MapContainer(),</span><br><span class="line">        FlutterLogo(),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  MapContainer() &#123;</span><br><span class="line">    <span class="keyword">return</span> Expanded(</span><br><span class="line">      child: Container(</span><br><span class="line">        width: <span class="number">1000</span>,</span><br><span class="line">        height: <span class="number">900</span>,</span><br><span class="line">        child: Scaffold(</span><br><span class="line">          key: _scaffoldKey,</span><br><span class="line">          resizeToAvoidBottomInset: <span class="keyword">false</span>,</span><br><span class="line">          drawer: MapDrawer(),</span><br><span class="line">          body: GoogleMap(</span><br><span class="line">            mapType: MapType.normal,</span><br><span class="line">            initialCameraPosition: _kGooglePlex,</span><br><span class="line">            markers: _markers,</span><br><span class="line">            polylines: _lines,</span><br><span class="line">            onMapCreated: (GoogleMapController controller) &#123;</span><br><span class="line">              _controller.complete(controller);</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  MapDrawer() &#123;</span><br><span class="line">    <span class="keyword">return</span> Drawer(</span><br><span class="line">      child: ListView(</span><br><span class="line">        padding: EdgeInsets.zero,</span><br><span class="line">        children: [</span><br><span class="line">          ListTile(</span><br><span class="line">            title: Text(<span class="string">&quot;name: <span class="subst">$&#123;_drawer_name&#125;</span>&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">          ListTile(</span><br><span class="line">            title: Text(<span class="string">&quot;info: <span class="subst">$&#123;_drawer_info&#125;</span>&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">          ListTile(</span><br><span class="line">            title: Text(<span class="string">&quot;latitude: <span class="subst">$&#123;_drawer_lat&#125;</span>&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">          ListTile(</span><br><span class="line">            title: Text(<span class="string">&quot;longitude: <span class="subst">$&#123;_drawer_lng&#125;</span>&quot;</span>),</span><br><span class="line">          ),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  marker_tapped(Place place)&#123;</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _drawer_name = place.name;</span><br><span class="line">      _drawer_info = place.info;</span><br><span class="line">      _drawer_lat= place.latlng.latitude.toString();</span><br><span class="line">      _drawer_lng= place.latlng.longitude.toString();</span><br><span class="line">    &#125;);</span><br><span class="line">    _scaffoldKey.currentState?.openDrawer();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> createMarkers() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">Set</span>&lt;Marker&gt; markers = <span class="keyword">await</span> getMarkers(marker_tapped);</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _markers = markers;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> createPolylines() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="built_in">Set</span>&lt;Polyline&gt; lines = <span class="keyword">await</span> getLines();</span><br><span class="line">    setState(() &#123;</span><br><span class="line">      _lines = lines;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><figcaption><span>service.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:http/http.dart&#x27;</span> <span class="keyword">as</span> http;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:google_maps_flutter/google_maps_flutter.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:google_polyline_algorithm/google_polyline_algorithm.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">String</span> apiKey = <span class="string">&quot;MyApiKey&quot;</span>;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="built_in">Set</span>&lt;Marker&gt;&gt; getMarkers(<span class="keyword">void</span> <span class="built_in">Function</span>(Place) callback) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">Set</span>&lt;Place&gt; places = <span class="keyword">await</span> getPlaces();</span><br><span class="line">  <span class="built_in">Set</span>&lt;Marker&gt; markers = &#123;&#125;;</span><br><span class="line">  places.toList().asMap().forEach((k, v) &#123;</span><br><span class="line">    markers.add(Marker(</span><br><span class="line">      markerId: MarkerId(k.toString()),</span><br><span class="line">      position: v.latlng,</span><br><span class="line">      onTap: () =&gt; callback(v),</span><br><span class="line">    ));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> markers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DBから取得する想定</span></span><br><span class="line">Future&lt;<span class="built_in">Set</span>&lt;Place&gt;&gt; getPlaces() <span class="keyword">async</span> &#123;</span><br><span class="line">  LatLng latLng1 = LatLng(<span class="number">37.42747752203552</span>, <span class="number">-122.08057852883495</span>);</span><br><span class="line">  LatLng latLng2 = LatLng(<span class="number">37.42246006639176</span>, <span class="number">-122.08409675340478</span>);</span><br><span class="line">  LatLng latLng3 = LatLng(<span class="number">37.41746006639176</span>, <span class="number">-122.08409675340478</span>);</span><br><span class="line">  LatLng latLng4 = LatLng(<span class="number">37.42546006639176</span>, <span class="number">-122.09809675340478</span>);</span><br><span class="line">  <span class="built_in">Set</span>&lt;Place&gt; places = &#123;&#125;;</span><br><span class="line">  [latLng1, latLng2, latLng3, latLng4].asMap().forEach((<span class="built_in">int</span> i, LatLng v) &#123;</span><br><span class="line">    places.add(</span><br><span class="line">      Place(</span><br><span class="line">        name: <span class="string">&quot;place<span class="subst">$&#123;i&#125;</span>&quot;</span>,</span><br><span class="line">        info: <span class="string">&quot;it is place <span class="subst">$&#123;i&#125;</span>&quot;</span>,</span><br><span class="line">        latlng: v,</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> places;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="built_in">Set</span>&lt;Polyline&gt;&gt; getLines() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">Set</span>&lt;MapRoute&gt; routes = <span class="keyword">await</span> getRoutes();</span><br><span class="line">  <span class="built_in">Set</span>&lt;Polyline&gt; lines = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; routes.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> route = routes.elementAt(i);</span><br><span class="line">    <span class="built_in">List</span>&lt;LatLng&gt; polylineCoordinates = [];</span><br><span class="line">    polylineCoordinates.add(route.origin);</span><br><span class="line">    <span class="built_in">List</span>&lt;LatLng&gt; result = <span class="keyword">await</span> getPolylineResult(</span><br><span class="line">      route.origin,</span><br><span class="line">      route.destination,</span><br><span class="line">      route.wayPoints</span><br><span class="line">    );</span><br><span class="line">    polylineCoordinates.addAll(result);</span><br><span class="line">    polylineCoordinates.add(route.destination);</span><br><span class="line">    lines.add(</span><br><span class="line">      Polyline(</span><br><span class="line">        polylineId: PolylineId(i.toString()),</span><br><span class="line">        jointType: JointType.round,</span><br><span class="line">        points: polylineCoordinates,</span><br><span class="line">        color: Colors.blue,</span><br><span class="line">      )</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> lines;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// DBから取得する想定</span></span><br><span class="line">Future&lt;<span class="built_in">Set</span>&lt;MapRoute&gt;&gt; getRoutes() <span class="keyword">async</span> &#123;</span><br><span class="line">  LatLng latLng1 = LatLng(<span class="number">37.42747752203552</span>, <span class="number">-122.08057852883495</span>);</span><br><span class="line">  LatLng latLng2 = LatLng(<span class="number">37.42246006639176</span>, <span class="number">-122.08409675340478</span>);</span><br><span class="line">  LatLng latLng3 = LatLng(<span class="number">37.41746006639176</span>, <span class="number">-122.08409675340478</span>);</span><br><span class="line">  LatLng latLng4 = LatLng(<span class="number">37.42546006639176</span>, <span class="number">-122.09809675340478</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    MapRoute(</span><br><span class="line">      origin: latLng1,</span><br><span class="line">      destination: latLng2,</span><br><span class="line">    ),</span><br><span class="line">    MapRoute(</span><br><span class="line">      origin: latLng1,</span><br><span class="line">      destination: latLng2,</span><br><span class="line">      wayPoints: [</span><br><span class="line">        latLng3,</span><br><span class="line">        latLng4,</span><br><span class="line">      ],</span><br><span class="line">    ),</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="built_in">List</span>&lt;LatLng&gt;&gt; getPolylineResult(</span><br><span class="line">  LatLng origin,</span><br><span class="line">  LatLng destination,</span><br><span class="line">  <span class="built_in">List</span>&lt;LatLng&gt; wayPoints) <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> params = &#123;</span><br><span class="line">    <span class="string">&quot;origin&quot;</span>: <span class="string">&quot;<span class="subst">$&#123;origin.latitude&#125;</span>,<span class="subst">$&#123;origin.longitude&#125;</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;destination&quot;</span>: <span class="string">&quot;<span class="subst">$&#123;destination.latitude&#125;</span>,<span class="subst">$&#123;destination.longitude&#125;</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mode&quot;</span>: <span class="string">&quot;driving&quot;</span>,</span><br><span class="line">    <span class="string">&quot;avoidHighways&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">    <span class="string">&quot;avoidFerries&quot;</span>: <span class="string">&quot;true&quot;</span>,</span><br><span class="line">    <span class="string">&quot;avoidTolls&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key&quot;</span>: apiKey</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span> (wayPoints.isNotEmpty) &#123;</span><br><span class="line">    <span class="built_in">List</span> wayPointsArray = [];</span><br><span class="line">    wayPoints.forEach((point) &#123;</span><br><span class="line">      <span class="built_in">String</span> encoded = encodePolyline([[point.latitude.toDouble(), point.longitude.toDouble()]]);</span><br><span class="line">      wayPointsArray.add(<span class="string">&quot;enc:<span class="subst">$&#123;encoded&#125;</span>:&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">String</span> wayPointsString = wayPointsArray.join(<span class="string">&#x27;|&#x27;</span>);</span><br><span class="line">    params.addAll(&#123;<span class="string">&quot;waypoints&quot;</span>: wayPointsString&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Uri</span> uri = <span class="built_in">Uri</span>.https(<span class="string">&quot;maps.googleapis.com&quot;</span>, <span class="string">&quot;maps/api/directions/json&quot;</span>, params);</span><br><span class="line">  <span class="keyword">var</span> response = <span class="keyword">await</span> http.<span class="keyword">get</span>(uri);</span><br><span class="line">  <span class="built_in">List</span>&lt;LatLng&gt; polylineCoordinates = [];</span><br><span class="line">  <span class="keyword">if</span> (response.statusCode != <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> parsedJson = json.decode(response.body);</span><br><span class="line">  <span class="keyword">if</span> (parsedJson[<span class="string">&quot;status&quot;</span>]?.toLowerCase() != <span class="string">&quot;ok&quot;</span> || parsedJson[<span class="string">&quot;routes&quot;</span>] == <span class="keyword">null</span> || parsedJson[<span class="string">&quot;routes&quot;</span>].isEmpty) &#123;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">List</span>&lt;<span class="built_in">num</span>&gt;&gt; points = decodePolyline(parsedJson[<span class="string">&quot;routes&quot;</span>][<span class="number">0</span>][<span class="string">&quot;overview_polyline&quot;</span>][<span class="string">&quot;points&quot;</span>]);</span><br><span class="line">  points.forEach((point) &#123;</span><br><span class="line">    polylineCoordinates.add(LatLng(point[<span class="number">0</span>].toDouble(), point[<span class="number">1</span>].toDouble()));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> polylineCoordinates;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Place</span> </span>&#123;</span><br><span class="line">  LatLng latlng;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">String</span> info;</span><br><span class="line">  Place(&#123;<span class="keyword">this</span>.name = <span class="string">&quot;&quot;</span>, <span class="keyword">this</span>.info = <span class="string">&quot;&quot;</span>, <span class="keyword">this</span>.latlng = <span class="keyword">const</span> LatLng(<span class="number">0</span>, <span class="number">0</span>)&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapRoute</span> </span>&#123;</span><br><span class="line">  LatLng origin;</span><br><span class="line">  LatLng destination;</span><br><span class="line">  <span class="built_in">List</span>&lt;LatLng&gt; wayPoints;</span><br><span class="line">  MapRoute(&#123;<span class="keyword">this</span>.origin = <span class="keyword">const</span> LatLng(<span class="number">0</span>, <span class="number">0</span>), <span class="keyword">this</span>.destination = <span class="keyword">const</span> LatLng(<span class="number">0</span>,<span class="number">0</span>), <span class="keyword">this</span>.wayPoints = <span class="keyword">const</span> []&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>Flutterにはチーム公式のGoogleMapライブラリが存在する</li><li>ルートの計算を行うにはDirections APIを活用する</li><li>Flutter on the WebはCORS対策の必要性がある</li><li>ウィジェットの組み合わせなどは公式サンプルが参考になる</li></ul><p>特にウィジェットの組み合わせに頭を悩ませる時間が最初のうちはあると思います、OSSパッケージやサンプルコードなど様々な事例を参考にすると良いと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/Flutter/">Flutter</category>
      
      <category domain="https://future-architect.github.io/tags/Dart/">Dart</category>
      
      <category domain="https://future-architect.github.io/tags/GoogleMapsAPI/">GoogleMapsAPI</category>
      
      
      <comments>https://future-architect.github.io/articles/20211224a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
