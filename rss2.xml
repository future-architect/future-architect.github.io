<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Mon, 16 May 2022 03:08:28 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Lambda×Go並列処理で100万回APIを呼び出す</title>
      <link>https://future-architect.github.io/articles/20220516a/</link>
      <guid>https://future-architect.github.io/articles/20220516a/</guid>
      <pubDate>Sun, 15 May 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXチームの後藤です。2021年7月に新卒でフューチャーに入社しました。</p><p>業務でAPIを通して数万～100万のデータのバッチ処理を行うLambdaの開発を行ったので、学びを共有したいと思います。　　</p><h1 id="システム構成"><a href="#システム構成" class="headerlink" title="システム構成"></a>システム構成</h1><p>参画しているプロジェクトでCSVデータをデータベースに登録する必要がありLambdaの開発を行いました。ちなみに所属しているチームではGo言語を採用しているので、Go言語で開発を行いました。データを登録するためのAPI(API Gateway + proxy統合Lambda)を活用してバッチ処理を行います。データの件数は数百件から数十万件と幅が広く、「数十万件ものリクエストをLambdaの実行時間制限である15分以内に処理しきれるのか？」というところから開発を始めました。</p><img src="/images/20220516a/Image_from_iOS.jpg" alt="構成図" width="852" height="362" loading="lazy"><p>ちなみに、1Web API呼び出し大体30ms~80msほどかかります。</p><h1 id="AWS-Lambda"><a href="#AWS-Lambda" class="headerlink" title="AWS Lambda"></a>AWS Lambda</h1><p>AWS Lambdaはマネージドサービスでありサーバーの運用管理が必要なく、プログラムが実行された時間に対してのみ課金がされるので、開発コスト、運用コスト、金銭面を考えると非常に使い勝手がいいサービスです。実際に私の所属しているチームではLambdaを積極的に活用しています。そんな便利なLambdaですが、実行時間に制約があり最大で15分までの処理しか行うことができず、15分以上の時間がかかる処理を行う場合にはEC2などの別の環境を用意する必要があります。</p><h1 id="試してみた結果"><a href="#試してみた結果" class="headerlink" title="試してみた結果"></a>試してみた結果</h1><p> まずは非同期処理を使わず同期処理でデータの登録を実行してみました。<br> CSVファイルから読み込んだデータを登録するプログラムを書きLambdaのメモリサイズを512MBに設定ました。サンプルデータとして2万行のCSVファイルの処理を実行してみました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _, line := <span class="keyword">range</span> lines &#123;</span><br><span class="line">    <span class="keyword">if</span> err := postRequest(ctx, line); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Printf(<span class="string">&quot;post request error: %v&quot;</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果としては、約1万4千件のデータを登録し終えたところで15分の実行時間制限を超えてしまいました。通常の方法では数十万件のデータの処理は難しい事がわかりました。</p><p>　　</p><h1 id="並行処理"><a href="#並行処理" class="headerlink" title="並行処理"></a>並行処理</h1><p>実際にプログラムを動かして、数十万件のデータを登録することが難しいとわかったので、他の方法を考えることにしました。1つ目の方法はStep Functionsを使いCSVデータを分割し処理する方法、2つ目はgoroutineで並行処理を行う方法です。Step Functionsを使う場合には追加でインフラの設定が必要になりますが、ソースコードは並行処理を行う場合よりもわかりやすくなるというメリットがあります。goroutineで並行処理を行う場合には、ソースコードは少し複雑になりますが、インフラのリソースを追加する必要がなく1つのLambdaでバッチ処理が完結します。今回はインフラ管理などの保守の容易さからgoroutineを実装することにしました。1つのLambdaで処理が完結している場合の方がログの確認も容易かと思います。再度メモリサイズを512MBに設定しサンプルデータ2万行のCSVファイルの処理を実行しました。　　</p><p>※エラーハンドリングを行う場合には<code>sync.ErrGroup</code>を使用する方がよさそうです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="keyword">for</span> _, line := <span class="keyword">range</span> lines &#123;</span><br><span class="line">    wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(wg *sync.WaitGroup, line CsvLine)</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> wg.Done()</span><br><span class="line">        <span class="keyword">if</span> err := postRequest(ctx, line); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Printf(<span class="string">&quot;post request error: %v&quot;</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(&amp;wg, line)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br></pre></td></tr></table></figure><p>結果は、20秒かからずに終了！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Duration: 19927.45 ms   Billed Duration: 19928 ms   Memory Size: 512 MB Max Memory Used: 206</span><br></pre></td></tr></table></figure><p>と喜んでいましたが、ログをよく見ると</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dial tcp xxx.xxx.xxx.xxx:443: socket: too many open files</span><br></pre></td></tr></table></figure><p>というエラーが大量に出力されていました。</p><p>これはgoroutineで大量のコネクションを同時に作成してしまっているために起こるエラーです。</p><p>ということで、goroutineの同時実行数を500に制限することにしました。東京リージョンでのLambdaの同時実行数の上限は1000件であるためその半分である500に設定しました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">semaphore := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">500</span>)</span><br><span class="line"><span class="keyword">for</span> _, line := <span class="keyword">range</span> lines &#123;</span><br><span class="line">    semaphore &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">    wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(wg *sync.WaitGroup, line CsvLine)</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> wg.Done()</span><br><span class="line">        <span class="keyword">if</span> err := postRequest(ctx, line); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Printf(<span class="string">&quot;post request error: %v&quot;</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(&amp;wg, line)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br></pre></td></tr></table></figure><p>実行してみると無事にエラーなく処理が終了しました。2万件の処理が約20秒で終了することがわかりました。並行処理を使うとかなり高速に処理が行えました。</p><h1 id="同時実行数と実行時間"><a href="#同時実行数と実行時間" class="headerlink" title="同時実行数と実行時間"></a>同時実行数と実行時間</h1><p>無事に処理が実行できたところで次に気になるのが、同時実行数と実行時間の関係性です。行数を20万、メモリを1024MBに固定し同時実行数を100,300,500と変えて関係性を調査してみました。</p><div class="scroll"><table><thead><tr><th>同時実行数</th><th>APIの最大同時実行数</th><th>メモリ(MB)</th><th>実行時間(秒)</th></tr></thead><tbody><tr><td>100</td><td>98</td><td>1024</td><td>246</td></tr><tr><td>300</td><td>304</td><td>1024</td><td>218</td></tr><tr><td>500</td><td>469</td><td>1024</td><td>227</td></tr></tbody></table></div><p>それぞれ一度ずつしか実行していませんが、API（Lambda）の最大同時実行数は概ね設定した上限値に近い値になっています。Lambdaの最大同時実行が304になっている理由はよくわかりませんが、他のリーソースからAPIが呼ばれたか、実行後のLambdaが完全に停止する前に新しくgoroutineが実行されたのだと思います。実行するたびに結果は違うとは思いますが、表の結果から同時実行数を300あたりに制限するのが良さそうです。</p><h1 id="メモリサイズと実行時間"><a href="#メモリサイズと実行時間" class="headerlink" title="メモリサイズと実行時間"></a>メモリサイズと実行時間</h1><p>同時実行数と実行時間の関係性がわかり、その次に気になるのが、メモリサイズと実行時間の関係性です。同時実行数を500、行数を10万に固定してメモリサイズを変え実行時間との関係性を調査しました。</p><div class="scroll"><table><thead><tr><th>同時実行数</th><th>APIの最大同時実行数</th><th>メモリ(MB)</th><th>実行時間(秒)</th></tr></thead><tbody><tr><td>500</td><td>488</td><td>1024</td><td>199</td></tr><tr><td>500</td><td>320</td><td>2048</td><td>110</td></tr><tr><td>500</td><td>460</td><td>4096</td><td>46</td></tr><tr><td>500</td><td>502</td><td>6144</td><td>39</td></tr><tr><td>500</td><td>475</td><td>8192</td><td>27</td></tr></tbody></table></div><p>メモリサイズが大きいほど、実行時間が短くなっています。それぞれの最大メモリ使用量は200MB～280MBに収まっていたので、CPUの性能の違いで処理が高速化した可能性が高いです。</p><h1 id="APIを100万回呼び出す"><a href="#APIを100万回呼び出す" class="headerlink" title="APIを100万回呼び出す"></a>APIを100万回呼び出す</h1><p>最後に8GBのメモリで100万行の処理を実行してみました。</p><p>処理時間はなんと<strong>258秒</strong>でした！</p><p>多少上振れするとしても、Lambda関数の実行時間の限界である900秒以内に200万件は余裕で登録出来そうです！</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://qiita.com/jerfareza/items/314401bb3fa55a82f8c0">Writing Large Data to CSV File in Go</a><br><a href="https://selfnote.work/20210311/programming/must-consider-use-goroutine-in-loop/">[Golang]ループ処理内でgoroutineを使う時に考慮しておくべきこと</a><br><a href="https://docs.aws.amazon.com/lambda/latest/dg/invocation-scaling.html#concurrent-execution-safety-limit">Lambda function scaling</a><br><a href="https://pkg.go.dev/golang.org/x/sync/errgroup">pkg.go.dev/golang.org/x/sync/errgroup</a></p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%80%A7%E8%83%BD%E6%A4%9C%E8%A8%BC/">性能検証</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Lambda/">Lambda</category>
      
      <category domain="https://future-architect.github.io/tags/%E4%B8%A6%E5%88%97%E5%87%A6%E7%90%86/">並列処理</category>
      
      
      <comments>https://future-architect.github.io/articles/20220516a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Future Tech Night #21 Google Cloud Vertex AIによるフルマネージドなMLOps導入</title>
      <link>https://future-architect.github.io/articles/20220513a/</link>
      <guid>https://future-architect.github.io/articles/20220513a/</guid>
      <pubDate>Thu, 12 May 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、SAIG所属の真鍋です。&lt;/p&gt;
&lt;p&gt;この度は「Future Tech Night #21 Google</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、SAIG所属の真鍋です。</p><p>この度は「Future Tech Night #21 Google Cloud: データエンジニア＋MLOps」に登壇させていただきましたので、その内容について触れていきたいと思います。</p><p>本イベントはTIGの村田さんの「JSON関数と共に歩む、BigQueryを使った超汎化型データ活用基盤」パートと、私の「Vertex AIによるフルマネージドなMLOps導入」の2本立てで行われました。前者については、別記事が既に投稿されておりますので、そちらもご覧いただければ幸いです。</p><h1 id="発表資料"><a href="#発表資料" class="headerlink" title="発表資料"></a>発表資料</h1><ul><li><a href="https://speakerdeck.com/komodoran/vertex-ainiyoruhurumanezidonamlopsdao-ru">Vertex AIによるフルマネージドなMLOps導入</a></li><li><a href="https://www.youtube.com/watch?v=o0oZnX1Ai-k">Future Tech Night #21 Google Cloud: データエンジニア＋MLOps</a></li></ul><h2 id="MLOpsとは"><a href="#MLOpsとは" class="headerlink" title="MLOpsとは"></a>MLOpsとは</h2><p>機械学習プロジェクトが広く一般に普及してきた昨今、多くのカンファレンスや企業活動の中でMLOpsが注目を集めています。<br>MLOpsとは、下記のライフサイクルを潤滑に回すための概念であり、Machine Learning + DevOps + Operateを合わせたものです。</p><img src="/images/20220513a/image.png" alt="MLOps" width="800" height="450" loading="lazy"><p>本発表では、コーディングと学習のフェーズに焦点を当てています。<br>如何にデータサイエンティストのためのコーディング環境や、ハイスペックな学習環境を用意するかといった環境面の問題や、実装されたアルゴリズムをどのようにサービスとして素早くデプロイするのか等が課題となってきます。</p><h2 id="Vertex-AIとは"><a href="#Vertex-AIとは" class="headerlink" title="Vertex AIとは"></a>Vertex AIとは</h2><p>Vertex AIとはGoogle Cloud Platformにおける必要なMLツールがすべて揃った一元的なAIプラットフォームであり、GAされたのが2021年5月と比較的新しいサービスです。</p><img src="/images/20220513a/image_2.png" alt="Vertex AI" width="800" height="450" loading="lazy"><ul><li>Vertex AI WorkBench<br>フルマネージド型のコンピューティング環境で、JupyterLabの環境を数クリックで構築することができます。<br>本サービスの大きな利点としては、複数のデータサイエンティストが利用する環境をパッケージやマシンスペックについて統一できることと、必要な性能に合わせてマシンスペックを変更できる点です。</li></ul><p>また、Pythonだけでなくパッケージが導入済みのイメージや、自身で作成したイメージを用いて構築することも可能です。</p><img src="/images/20220513a/image_3.png" alt="Vertex AI WorkBench" width="800" height="450" loading="lazy"><ul><li>Vertex AI Pipeline<br>WorkBenchで構築した学習アルゴリズムや推論のコードは、サービス化・システム導入の際に利用する環境に合わせて準備する必要があります。<br>その際注意しているのことは、下記の3点があります。<br>　1. 処理に合わせた性能の環境を用意すること<br>　2. 実行する環境に依存してしまうことでエラーが起こらないようにすること<br>　3. 利用したデータやパラメータ、コードのバージョンを後から見直せるようにすること<br>これらの管理をVertex AI Pipelineを用いることで容易に行うことができます。</li></ul><img src="/images/20220513a/image_4.png" alt="Vertex AI Pipeline概要" width="800" height="450" loading="lazy"><p>Pipelineは複数のコンポーネントから構成されており、デフォルトで用意されたAutoMLといった処理や、各自で作成するDockerイメージによる独自の処理を登録することができます。</p><img src="/images/20220513a/image_5.png" alt="Pipeline" width="800" height="450" loading="lazy"><p>実行されたPipelineは、自動的に利用したデータや設定値、開始日時や実行時間といった各種パラメータを記録することができ、後から結果を遡ることを容易にします。</p><img src="/images/20220513a/image_6.png" alt="メタデータ管理" width="800" height="450" loading="lazy"><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><ul><li>VertexAIは、TerraformのようなlaCで構築は可能でしょうか？<br>→ 2022/5現在、Terraformで全てのサービスを用意することは難しいのが現状です。WorkBenchはAI Platformのコードを流用することができますが、パイプライン等は別途用意することが必要です。</li><li>データサイエンティストが共通で使う社内ライブラリがあったときにWorkbenchの環境で社内ライブラリが使えるように環境構築できますか？<br>→ 各自が作成したDockerイメージをArtifact RegistryにPushしておくことで、WorkBench構築時に選択することが可能です。</li><li>vertex AIを利用する際、ローカルマシンの環境をうまく組み合わせてコストを抑えられたり出来ますか？<br>→ Vertex AI Pipelineに関してですが、ローカルモード等といったシステムは現時点では存在しない認識です。</li><li>実験管理に関して、mlflow等で自分で作るよりVertex AI Pipelineに任せたほうが楽なんでしょうか。<br>→ 私の個人的な印象ですが、mlflowの実験管理機能の方が柔軟性に富んでおり、必要な情報をトラッキングが容易です。今後、Vertex AIとmlflowの連携についても探っていきたいと考えています。</li></ul><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>フルマネージドなサービスを用いることで、オンプレでは難しい柔軟かつ迅速な環境構築が可能であると考えています。</p><p>特に必要なマシンスペックに大きな差が生じる機械学習プロジェクトでは、フルマネージドサービスの需要が高まっていくことでしょう。</p><p>Vertex AIは現在も発展を続けているサービスであり、引き続きウォッチしていきたいと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/InfrasDataSciencetructure/">InfrasDataSciencetructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/MLOps/">MLOps</category>
      
      <category domain="https://future-architect.github.io/tags/TechNight/">TechNight</category>
      
      <category domain="https://future-architect.github.io/tags/VertexAI/">VertexAI</category>
      
      
      <comments>https://future-architect.github.io/articles/20220513a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Cloud Functions+ GoでビッグデータETLするときのコツ</title>
      <link>https://future-architect.github.io/articles/20220512a/</link>
      <guid>https://future-architect.github.io/articles/20220512a/</guid>
      <pubDate>Wed, 11 May 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;Google Cloud上の大規模なシステムのとあるログがCloud</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>Google Cloud上の大規模なシステムのとあるログがCloud Storageに溜まっており、それらをBigQueryにロードし、分析したい、ということがありました。このログは未加工のままBigQueryに読み込めるフォーマットではなく、いわゆるETL処理が必要でした。恒常的にいつでもデータ分析したいというわけではなく、必要な時に必要な分だけBigQueryにロードして分析したい、というユースケースなのでバッチETL処理です。</p><p>Google CloudでETL処理する場合Dataflowを採用することが一般的かと思いますが、開発言語でGoを使っていること（DataflowのプレビューではApache Beam SDK for Goが使えるようです）や、運用面を考慮すると利用サービスを増やしたくない、ということで使い慣れたCloud Functionsを使うことにしました。ログファイルが大規模なためCloud Functionsの限られたリソースで処理しきるためにちょっと考えることがあったので、ブログにします。</p><p>フューチャー技術ブログ内の類似記事としては次のようなものがあります。是非合わせてお読みください。</p><ul><li><a href="/articles/20210601a/">15分の壁を超えて。Lambda分散実行術</a></li><li><a href="/articles/20200515/">Serverless連載6: AWSのStep FunctionsとLambdaでServelessなBatch処理を実現する</a></li></ul><h1 id="問題設定"><a href="#問題設定" class="headerlink" title="問題設定"></a>問題設定</h1><p>Cloud Storageに大量かつ、大きいログファイルが存在していました。それを整形し、BigQueryにバッチ読み込みします。</p><p>ログのサイズ感は、</p><ul><li>ファイルサイズは数MiB ~ 数GiB程度で、上限がある。</li><li>ファイル数は約 ~1000件/日</li><li>データサイズは ~500GB/日</li></ul><p>ログファイルは、改行区切りテキストデータです。</p><p>大量データをCloud Functionsで処理する場合、<a href="https://cloud.google.com/functions/quotas?hl=ja">メモリ上限やタイムアウト上限</a>が制約になります。加えて<a href="https://cloud.google.com/bigquery/quotas?hl=ja">BigQueryの一日あたりのロードジョブ数や、一回当たりの読み込みデータサイズの上限などの割り当て</a>も気にしなければなりません。</p><h1 id="Cloud-FunctionsをファンアウトさせてETL処理"><a href="#Cloud-FunctionsをファンアウトさせてETL処理" class="headerlink" title="Cloud FunctionsをファンアウトさせてETL処理"></a>Cloud FunctionsをファンアウトさせてETL処理</h1><p>今回のETL処理の構成を説明していきます。</p><p>Cloud Storageからログファイルを取ってきて、テキスト加工する処理は、Cloud FunctionsとPub/Subを使ったファンアウト構成にしました。</p><img src="/images/20220512a/CloudFunction_ETL.drawio_(1).png" alt="CloudFunction_ETL" width="616" height="301" loading="lazy"><ul><li>左のCloud Functionsが、Cloud Storageに存在するログファイルのリストを1件ずつPub/Subにpublishします。</li><li>真ん中のCloud FunctionsはPub/Subをトリガーにして並行に起動させ、ログファイルをダウンロードして加工し、別のCloud Storageにアップロードします。Cloud Functionsの最大同時実行数までスケールさせることができ、同時に多くのログファイルを処理できます。</li></ul><p>今回はログファイルのサイズに上限がある前提なので、ファイル分割処理はしなくて済んでます。</p><p>最近では、<a href="https://cloud.google.com/functions/docs/2nd-gen/overview">Cloud Functions 第2世代</a>が発表され、より多くのメモリ（最大16GiB）、タイムアウト（イベントトリガーの場合10分）を設定できるようになりました。できることも広がりますね。</p><p>BigQueryへの読み込みはCloud Storageからのバッチ読み込みにしました。Cloud Functionsで並行でBigQueryに書き込むと、処理するファイル数=BigQueryロードジョブ数が多すぎて諸々のBigQueryの割り当てに引っかかる恐れがあったからです。</p><h2 id="実用上の細かい作り込み"><a href="#実用上の細かい作り込み" class="headerlink" title="実用上の細かい作り込み"></a>実用上の細かい作り込み</h2><p>Pub/Subはデフォルトでは<a href="https://cloud.google.com/pubsub/docs/subscriber?hl=eg#at-least-once-delivery">at-least-once配信</a>、つまりpublishされたデータが複数回配信される可能性があるのですが、今回のジョブは単純なファイル加工処理で冪等なのでOKです。</p><p>Cloud FunctionのETL処理の完了を、なんらかの方法で検知しなければならないという課題があります。<a href="https://cloud.google.com/blog/ja/topics/developers-practitioners/celebrating-pi-day-cloud-functions">こちらのブログ</a>のように、並行実行されているジョブの完了や失敗を管理するテーブルを用意したり、<a href="https://cloud.google.com/blog/ja/products/data-analytics/ingesting-data-into-bigquery-using-serverless-spark">こちらのブログ</a>のように失敗したジョブを別のPub/Subに公開する、などの方法があるかなと思います。</p><h1 id="Cloud-Functinonsの中身のGo実装"><a href="#Cloud-Functinonsの中身のGo実装" class="headerlink" title="Cloud Functinonsの中身のGo実装"></a>Cloud Functinonsの中身のGo実装</h1><p>Cloud FunctionsにはGoのソースをデプロイしました。並行で起動するCloud Functionsが、メモリを効率よく使いつつタイムアウト内に処理を終えるために考えたことを説明していきます。</p><h2 id="ログファイルは1行ずつ読み込む"><a href="#ログファイルは1行ずつ読み込む" class="headerlink" title="ログファイルは1行ずつ読み込む"></a>ログファイルは1行ずつ読み込む</h2><p>ログファイルは改行区切りのテキストファイルなので、Cloud Storageから1行ずつ読み込んで加工し、1行ずつ書き込みます。これによってメモリにログファイル全量を展開せずに済みます。<br>Cloud Storageからの読み込み、書き込みに使う<a href="https://pkg.go.dev/cloud.google.com/go/storage">storage.Reader, storage.Writer</a>はio.Reader, io.Writerを満たすので、ファイルへの読み書きと同じように扱えます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;cloud.google.com/go/storage&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> PubSubMessage <span class="keyword">struct</span> &#123;</span><br><span class="line">Data []<span class="type">byte</span> <span class="string">`json:&quot;data&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PubSubEntryPoint</span><span class="params">(ctx context.Context, m PubSubMessage)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">logFilePath := <span class="type">string</span>(m.Data) <span class="comment">// Pub/Subからログファイルのパスがpushされてくる</span></span><br><span class="line"></span><br><span class="line">client, err := storage.NewClient(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> client.Close()</span><br><span class="line"></span><br><span class="line">storageReader, err := client.Bucket(LogBucket).Object(logFilePath).NewReader(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">storageWriter := client.Bucket(TmpBucket).Object(translatedLog).NewWriter(ctx)</span><br><span class="line"></span><br><span class="line">s := bufio.NewScanner(storageReader)</span><br><span class="line"><span class="keyword">for</span> s.Scan() &#123;</span><br><span class="line">line := s.Text() <span class="comment">// 1行ずつ読み込む</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// なんらかの加工処理を行う</span></span><br><span class="line"></span><br><span class="line">fmt.Fprintln(storageWriter, line) <span class="comment">// 1行ずつ書き込む</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := storageWriter.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文字列の加工は並行処理"><a href="#文字列の加工は並行処理" class="headerlink" title="文字列の加工は並行処理"></a>文字列の加工は並行処理</h2><p>読み込んだ行を処理するところは並行で書けます。<a href="https://pkg.go.dev/golang.org/x/sync/errgroup">sync.errgroup</a>を使うと、groutineのエラーハンドリングがしやすいです。<br>goroutineの数だけメモリを使うのでgoroutineの同時実行数の上限を設定してあげます。これは実際のログの1行分のサイズと、Cloud Functionのメモリ消費量を計測してよしなに決めます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">s := bufio.NewScanner(storageReader)</span><br><span class="line">eg := errgroup.Group&#123;&#125;</span><br><span class="line">limit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">5000</span>) <span class="comment">// 同時実行数に制限をかける</span></span><br><span class="line"><span class="keyword">for</span> s.Scan() &#123;</span><br><span class="line">line := s.Text() <span class="comment">// 1行ずつ読み込む</span></span><br><span class="line">limit &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">eg.Go(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">&lt;-limit</span><br><span class="line">&#125;()</span><br><span class="line">translatedLine, err := translate(line) <span class="comment">// なんらかの加工処理を行う</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintln(storageWriter, translatedLine) <span class="comment">// 1行ずつ書き込む</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := eg.Wait(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回はCloud FunctionsでETL処理を実装しましたが、Dataflowや他のETL処理パターンも今後試していきたいです。<br>かなり大規模なシステムになると、データの規模も大きくなります。当たり前かもしれませんが、<strong>クラウドでも無尽蔵にリソースを使えるわけではなく、諸々の制約、割り当てを気にしなければならないな</strong>、、、ということを意識させられました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/CloudFunctions/">CloudFunctions</category>
      
      <category domain="https://future-architect.github.io/tags/ETL/">ETL</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AC%E3%82%B9/">サーバーレス</category>
      
      
      <comments>https://future-architect.github.io/articles/20220512a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>IPAの過去問で学ぶDNSキャッシュポイズニングの攻撃手法と対応策</title>
      <link>https://future-architect.github.io/articles/20220511a/</link>
      <guid>https://future-architect.github.io/articles/20220511a/</guid>
      <pubDate>Tue, 10 May 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220511a/title.png&quot; alt=&quot;title.png&quot; width=&quot;840&quot; height=&quot;542&quot; loading=&quot;lazy&quot;&gt;


&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220511a/title.png" alt="title.png" width="840" height="542" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG 村瀬です。</p><p>情報処理推進機構(IPA)のネットワークスペシャリスト試験の過去問を解いていて興味深い問題がありました。</p><p>対象の試験は ネットワークスペシャリスト試験 令和元年度 午後Ⅱ 問2<br>過去問は<a href="https://www.jitec.ipa.go.jp/1_04hanni_sukiru/mondai_kaitou_2019h31.html#01aki">こちら</a>からダウンロード可能です。<br>　　<br>この問題の中でSYNフラッド攻撃、DNSキャッシュポイズニング、C&amp;C(Command &amp; Control)サーバの攻撃手法と対応策が記載されています。</p><p>ネットワークの試験ではあるものの内容としてはセキュリティに関するものです。DNSキャッシュポイズニングという攻撃があるのは知っていたのですが、攻撃手法と対応策を知らなかったので自分の知識を整理するためにブログにしてみました。</p><p>当たり前ですが、このブログでは犯罪行為を推奨するものではなく、セキュリティ意識、対策の向上を目的として記載しております。</p><h1 id="DNSとは"><a href="#DNSとは" class="headerlink" title="DNSとは"></a>DNSとは</h1><p>DNSキャッシュポイズニングの説明をする前にDNSについておさらいします。</p><p>DNS(ディーエヌエス: Domain Name System)とはインターネットなどのIPネットワーク上でドメイン名(ホスト名)とIPアドレスの対応を管理するシステムです。</p><p>DNSがあるおかげで利用者はブラウザにURLを入力するだけで目的のWEBページを見ることができます。目的のWEBページが表示されるまでの過程で利用者が意識することなくDNSの名前解決によってドメイン名(ホスト名)からIPアドレスを取得しています。</p><p>インターネットを支える縁の下の力持ちですね。</p><h1 id="DNSキャッシュポイズニングとは"><a href="#DNSキャッシュポイズニングとは" class="headerlink" title="DNSキャッシュポイズニングとは"></a>DNSキャッシュポイズニングとは</h1><p>DNSキャッシュポイズニングとはDNSのキャッシュを書き換えることでDNSの名前解決で本来あるべきIPアドレスではなく、攻撃者が用意した悪意のあるサーバのIPアドレスを返却すること。これがなされると悪意のあるサーバでフィッシングなどが行われます。不正なURLを利用する一般的なフィッシングとは異なり、正規のURLで悪意のあるWEBページが表示されることになるので注意深いユーザであっても気が付くのは困難になります。</p><h1 id="なぜキャッシュを書き換えられるのか"><a href="#なぜキャッシュを書き換えられるのか" class="headerlink" title="なぜキャッシュを書き換えられるのか"></a>なぜキャッシュを書き換えられるのか</h1><p>試験問題を読むと理解しやすかったので抜粋します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">DNSキャッシュポイズニング攻撃は、次の手順で行われる。</span><br><span class="line">(ⅰ)攻撃者は、偽の情報を送り込みたいドメイン名について、標的のフルリゾルバサーバに問い合わせる。</span><br><span class="line">(ⅱ)フルリゾルバサーバは、指定されたドメインのゾーン情報を管理するコンテンツサーバに問い合わせる。</span><br><span class="line">(ⅲ)攻撃者は、コンテンツサーバから正しい応答が返ってくる前に、大量の偽の応答パケットを標的のフルリゾルバサーバ宛てに送信する。</span><br><span class="line">(ⅳ)フルリゾルバサーバは、受信した偽の応答パケットをチェックし、偽の応答パケットが正当なものであると判断してしまった場合、キャッシュの内容を偽の応答パケットを基に書き換える。</span><br></pre></td></tr></table></figure><p>ネットワークスペシャリスト試験 令和元年度 午後Ⅱ 問2 から抜粋(試験問題に関する表記を改変しています。)</p><p>問題文に記載のある通り、フルリゾルバサーバが偽の応答パケットを正当なものと判断してしまうため、誤った情報がキャッシュされてしまいます。</p><p>もう少し詳細に説明すると上記のDNSのやりとりはTCPではなく、UDPで行われます。UDPでは通信相手を確認することなく処理が行われるため、攻撃者は偽のパケットを容易に作成することができます。</p><p>問合せに対する応答は先に届いた情報が利用されるので、正当な応答パケットよりも先に偽の応答パケットがフルリゾルバサーバに受信されると攻撃が成功してしまうのです。</p><p>図で表すと以下のようになります。</p><h2 id="通常時の名前解決"><a href="#通常時の名前解決" class="headerlink" title="通常時の名前解決"></a>通常時の名前解決</h2><p>問合せに対して応答が1つだけなされます。その応答の情報がキャッシュされます。</p><img src="/images/20220511a/p1.png" alt="通常時の名前解決" width="1200" height="380" loading="lazy"><h2 id="DNSキャッシュポイズニングが行われる場合"><a href="#DNSキャッシュポイズニングが行われる場合" class="headerlink" title="DNSキャッシュポイズニングが行われる場合"></a>DNSキャッシュポイズニングが行われる場合</h2><p>正規の応答が行われるタイミングに合わせて正当なものであると判断されうる大量の偽の応答パケットを送信します。<br><img src="/images/20220511a/p2.png" alt="DNSキャッシュポイズニング" width="1200" height="366" loading="lazy"></p><p>攻撃者は宛先ポート番号と識別子が何かわからないのでこれらを変更した応答パケットを大量に送信することになります。全てのパターンを網羅する場合には宛先ポート番号 * 識別子の全ての組み合わせになります。宛先ポート番号が固定の単一のポートであった場合、識別子は16ビットのため65,536パターンになります。</p><p>なお、応答パケットに必要なその他の情報であるフルリゾルバサーバのIPアドレス、コンテンツサーバのIPアドレス、送信元ポート番号は攻撃者が容易に把握できるものになります。</p><h1 id="対応策"><a href="#対応策" class="headerlink" title="対応策"></a>対応策</h1><p>大別して2つの方法があります。</p><h2 id="対応策1-送信元ポート番号のランダム化"><a href="#対応策1-送信元ポート番号のランダム化" class="headerlink" title="対応策1 送信元ポート番号のランダム化"></a>対応策1 送信元ポート番号のランダム化</h2><p>ネットワークスペシャリスト試験 令和元年度 午後Ⅱ 問2 から抜粋します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(ⅱ)の問合せパケットの送信元ポート番号には特定の範囲の値が使用されるケースが多いので、攻撃者は、(ⅲ)の偽の応答パケットを正当なパケットに偽装しやすくなるという問題がある。調査の結果、この問題の対応策には、送信元ポート番号のランダム化があることが分かった。</span><br></pre></td></tr></table></figure><p>DNSキャッシュポイズニング攻撃が成立する条件の必要条件として、問合せパケットの送信元ポート番号と応答パケットの宛先ポート番号が一致し、かつ問合せパケットの識別子と応答パケットの識別子が一致することが挙げられます。固定であった送信元ポート番号をランダムにすることで攻撃が成功する確率をぐっと下げることができます。</p><p>100個のポート番号を利用するだけでも成功率を1/100にすることができます。ポート番号を仮に30,000個利用する場合の全ての組み合わせは、30,000 * 65,536 = 1,966,080,000パターンになるので攻撃者からしてみると用意するのが辛い数になります。</p><h2 id="対応策2-フルリゾルバサーバに対する攻撃者からの名前解決要求の禁止"><a href="#対応策2-フルリゾルバサーバに対する攻撃者からの名前解決要求の禁止" class="headerlink" title="対応策2 フルリゾルバサーバに対する攻撃者からの名前解決要求の禁止"></a>対応策2 フルリゾルバサーバに対する攻撃者からの名前解決要求の禁止</h2><p>また、試験問題と解答にもあるとおり、そもそもの話、フルリゾルバサーバに対して攻撃者から名前解決の要求を禁止することが効果的です。<br>試験問題では外部DNSサーバ上でフルリゾルバサーバとコンテンツサーバが稼働しているため、(試験問題の都合上)インターネットからの名前解決要求を許容していました。</p><img src="/images/20220511a/p3.png" alt="フルリゾルバサーバに対する攻撃者からの名前解決要求の禁止" width="794" height="590" loading="lazy"><p>ネットワークスペシャリスト試験 令和元年度 午後Ⅱ 問2から引用</p><p>試験問題と解答を踏まえてフルリゾルバサーバとコンテンツサーバの分離後のあるべき姿を整理すると以下の通りです。</p><ul><li>フルリゾルバによるインターネット上のホストの名前解決はFPサーバとメール中継サーバからの要求に応答できればよい。</li><li>コンテンツサーバは、インターネット上の不特定のホストからの名前解決要求に応答する必要がある。</li></ul><p>フルリゾルバサーバは社内(DMZ)からの名前解決要求だけ許容すれば良いため、インターネットからのフルリゾルバサーバに対する名前解決要求をファイアーウォールで防ぐことが重要です。<br>この対応により攻撃者はインターネットからフルリゾルバサーバに対して名前解決要求をできなくなります。<br>ちなみにコンテンツサーバにはインターネットからの名前解決要求が来ますが、DNSキャッシュを持たないので問題ありません。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>DNSキャッシュポイズニングという言葉自体は知っていたものの、キャッシュを書き換える仕組みや対応策を知らなかったのでネットワークスペシャリスト試験の勉強をすることで知識が身に付きました。</p><p>セキュリティは重要ですが、やみくもに恐れてはセキュリティ対策コストがいくらあっても足りません。どういった仕組みで攻撃が成功するかを適切に理解しておくことで、費用対効果の高いセキュリティ対策やインフラ設計ができるようになるはずです。</p><p>日々新たな脆弱性が見つかる状況であるため、100%安全と言い切れるネットワークを作ることはできません。しかしそのような状況であっても攻撃に合う確率を如何に0%に近づけるかがネットワーク(セキュリティ)エンジニアの腕の見せ所かと思います。</p><p>今回はDNSキャッシュポイズニングに焦点を充てて記載しましたが、SYNフラッド攻撃、C&amp;C(Command &amp; Control)サーバも興味深いのでそのうちまとめてみようと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Security/">Security</category>
      
      
      <category domain="https://future-architect.github.io/tags/Network/">Network</category>
      
      <category domain="https://future-architect.github.io/tags/DNS/">DNS</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%94%BB%E6%92%83%E6%89%8B%E6%B3%95/">攻撃手法</category>
      
      <category domain="https://future-architect.github.io/tags/DNS%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5%E3%83%9D%E3%82%A4%E3%82%BA%E3%83%8B%E3%83%B3%E3%82%B0/">DNSキャッシュポイズニング</category>
      
      <category domain="https://future-architect.github.io/tags/IPA/">IPA</category>
      
      
      <comments>https://future-architect.github.io/articles/20220511a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Lambda Function URLs をGoでお試し。実行時間の上限（タイムアウト）やWeb API構築周りで気になること</title>
      <link>https://future-architect.github.io/articles/20220510a/</link>
      <guid>https://future-architect.github.io/articles/20220510a/</guid>
      <pubDate>Mon, 09 May 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG DXユニット真野です。2022/04/06にGAになったと発表された、Lambda Function</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット真野です。2022/04/06にGAになったと発表された、Lambda Function URLsは、AWS Lambdaに直接HTTPSエンドポイントを追加できるというもので、API Gateway（やALB）無しでWeb APIやサイトを構築できると話題になりました。</p><ul><li><a href="https://aws.amazon.com/jp/blogs/aws/announcing-aws-lambda-function-urls-built-in-https-endpoints-for-single-function-microservices/">Announcing AWS Lambda Function URLs: Built-in HTTPS Endpoints for Single-Function Microservices</a><ul><li><a href="https://aws.amazon.com/jp/blogs/news/announcing-aws-lambda-function-urls-built-in-https-endpoints-for-single-function-microservices/">（4/14公開の日本語訳）AWS Lambda Function URLs の提供開始: 単一機能のマイクロサービス向けの組み込み HTTPS エンドポイント</a></li></ul></li></ul><p>私も業務でAPI Gateway + Lambdaの組み合わせで稼働している事例があります。非常に安定稼働していますが、この組み合わせだとタイムアウトがAPI GatewayのLambda統合となるため上限が29秒<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>です。Lambda Function URLs だとAPI Gatewayを経由しない分、Lambda側の15分<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>になることが嬉しいなと思いました。Web APIでそんなに長時間動かすことって無いだろうと思いますよね。私もそう思っていましたが、Excelファイルアップロードによるバッチ登録や、Excel帳票ダウンロード機能の登場を予見できず目論見は崩れました。</p><p>さて、ドキュメントにはLambda Function URLsで個別のタイムアウト制約があるという記載がないため、制約は通常のLambdaと同様に15分が上限であることは自明な気がしますが、せっかくなので検証します。また、GoでJSONを返すWeb APIを構築するときにどういった使い方になるかコードベースで試します。</p><h2 id="タイムアウトについて"><a href="#タイムアウトについて" class="headerlink" title="タイムアウトについて"></a>タイムアウトについて</h2><p>Lambdaについては「関数URLを有効化」し、cURLやブラウザなどで簡易的に疎通したかったので認証タイプは「NONE」を選択します。関数名は「my-function-url-lambda」とします。</p><img src="/images/20220510a/lambda_create_resource.png" alt="lambda_create_resource" width="1200" height="987" loading="lazy"><p>Lambda設定は、ランタイムを「Go 1.x」、ハンドラは適当に「lambda」にしています。Lambdaリソースのタイムアウトは「15分0秒」（最長）にします。</p><p>AWS LambdaをGoで動かすためには、ドキュメントにもあるように <code>github.com/aws/aws-lambda-go/lambda</code> パッケージを利用します。本来は不要ですが、動いているか心配になったので、tickerで1分ごとに標準出力しています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-lambda-go/lambda&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleRequest</span><span class="params">()</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">ticker := time.NewTicker(<span class="number">1</span> * time.Minute)</span><br><span class="line"><span class="keyword">defer</span> ticker.Stop()</span><br><span class="line">start := time.Now()</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> t := &lt;-ticker.C:</span><br><span class="line">term := t.Sub(start)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Term %f[sec]&quot;</span>, term.Seconds())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">&lt;-<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">bool</span>) <span class="comment">// チャネル受信待ちにして、無限にウェイトさせています</span></span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;3年も一緒に暮らしたのに、猫がまったく懐かなくて悲しい&quot;</span>), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(HandleRequest)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>デプロイは次のようなMakefileを作って行います（どういうやり方でも良いと思います）</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">deploy:</span></span><br><span class="line">GOOS=linux GOARCH=amd64 go build -ldflags=<span class="string">&quot;-s -w -buildid=&quot;</span> -trimpath -o bin/lambda_raw/lambda cmd/lambda_raw/main.go</span><br><span class="line">zip -j bin/lambda_raw/lambda.zip bin/lambda_raw/lambda</span><br><span class="line">aws lambda update-function-code --profile my_profile --region ap-northeast-1 --function-name my-function-url-lambda --zip-file fileb://bin/lambda_raw/lambda.zip</span><br></pre></td></tr></table></figure><p>アクセスするURLは、関数URLという部分に表示されるので、ブラウザでクリックしてLambdaを実行します。</p><img src="/images/20220510a/Lambda定義.png" alt="Lambda定義" width="1200" height="381" loading="lazy"><p>15分待つと <code>Internal Server Error</code> がブラウザで表示されます。CloudWatch Logsで確認すると、以下のように約900秒（15分）起動したことが分かります。おお..!!  29秒の呪縛から開放されている!!</p><figure class="highlight plaintext"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">2022-05-05T00:34:58.224+09:00START RequestId: 5203b933-276b-4abc-b1cb-8a92ffbfec06 Version: $LATEST</span><br><span class="line">2022-05-05T00:35:59.228+09:00Term 60.000960[sec]</span><br><span class="line">2022-05-05T00:36:59.228+09:00Term 120.001254[sec]</span><br><span class="line">2022-05-05T00:37:59.228+09:00Term 180.001482[sec]</span><br><span class="line">2022-05-05T00:38:59.228+09:00Term 240.000151[sec]</span><br><span class="line">2022-05-05T00:39:59.229+09:00Term 300.000145[sec]</span><br><span class="line">2022-05-05T00:40:59.230+09:00Term 360.000407[sec]</span><br><span class="line">2022-05-05T00:41:59.231+09:00Term 420.000769[sec]</span><br><span class="line">2022-05-05T00:42:59.232+09:00Term 480.001089[sec]</span><br><span class="line">2022-05-05T00:43:59.285+09:00Term 540.054274[sec]</span><br><span class="line">2022-05-05T00:44:59.286+09:00Term 600.054582[sec]</span><br><span class="line">2022-05-05T00:45:59.288+09:00Term 660.054826[sec]</span><br><span class="line">2022-05-05T00:46:59.288+09:00Term 720.055132[sec]</span><br><span class="line">2022-05-05T00:47:59.290+09:00Term 780.055406[sec]</span><br><span class="line">2022-05-05T00:48:59.290+09:00Term 840.055729[sec]</span><br><span class="line">2022-05-05T00:49:58.245+09:00END RequestId: 5203b933-276b-4abc-b1cb-8a92ffbfec06</span><br><span class="line">2022-05-05T00:49:58.245+09:00REPORT RequestId: 5203b933-276b-4abc-b1cb-8a92ffbfec06 Duration: 900011.38 ms Billed Duration: 900000 ms Memory Size: 512 MB Max Memory Used: 28 MB Init Duration: 90.72 ms</span><br><span class="line">2022-05-05T00:49:58.245+09:002022-05-04T15:49:58.244Z 5203b933-276b-4abc-b1cb-8a92ffbfec06 Task timed out after 900.01 seconds</span><br><span class="line">2022-05-05T00:49:58.455+09:00START RequestId: 89b046b7-dc8d-4f68-be08-66a992f2e46e Version: $LATEST</span><br></pre></td></tr></table></figure><p>これで、Lambda Function URLsは実行時間の面でかなり有用だと感じます。</p><h2 id="WAFの制御"><a href="#WAFの制御" class="headerlink" title="WAFの制御"></a>WAFの制御</h2><p>API Gatewayのようなリッチな制御は行えなくても、セキュリティ要件でWAF設置が必須な場合があります。Lambda Function URLsは2022.5.5時点ではAWS WAFの設定は不可のようです。AWS WAFの設定画面をみても、現状はAPI Gateway, ALB, AppSyncの3つに限られています。</p><img src="/images/20220510a/WAF設定画面.png" alt="WAF設定画面" width="840" height="256" loading="lazy"><p>そのためブラウザアクセスを許容したいけど、検証用のエンドポイントは送信元IPを絞りたいとかも現状はできないです。スロットリング、カスタムドメイン名などとともに、これらの要件が必要な場合はAPI Gatewayを利用しましょうということです。（InboundのSecurity Groupが設定できれば最高なんですが..）</p><h2 id="httpハンドラー対応"><a href="#httpハンドラー対応" class="headerlink" title="httpハンドラー対応"></a>httpハンドラー対応</h2><p>AWS Lambdaですが、aws-sdk for Goのお作法にそのまま従うとGoのhttpハンドラーと微妙に使い勝手が異なります。このギャップを吸収するために用いるのが <code>github.com/awslabs/aws-lambda-go-api-proxy</code> で、API Gatewayリクエストをnet/httpのhandlerの形式に変換してくれ、アプリコードとしてはnet/http、Gin、Echoの形式で実装すれば良くなります。</p><p>Lambda Function URLsでも使えるかなと試しました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-lambda-go/lambda&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/awslabs/aws-lambda-go-api-proxy/httpadapter&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">io.WriteString(w, <span class="string">&quot;aws labs http adapter response!!&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">lambda.Start(httpadapter.New(http.DefaultServeMux).ProxyWithContext)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>動かしてみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://ma5pnqdphjf6tvd5xxxxxxxxxxxxxxxx.lambda-url.ap-northeast-1.on.aws/</span><br><span class="line">aws labs http adapter response!!</span><br></pre></td></tr></table></figure><p>そのまま、、、動きましたね。 API Gateway用のアダプターだと思いましたが、Lambda Function URLsでも動きます。</p><p>というのも、ドキュメントを見ると、Lambda Function URLsのリクエスト形式は <strong>API Gatewayペイロードフォーマットv2.0と同じ</strong> だからです。</p><blockquote><p>The request and response event formats follow the same schema as the Amazon API Gateway payload format version 2.0.<br><a href="https://docs.aws.amazon.com/lambda/latest/dg/urls-invocation.html#urls-payloads">https://docs.aws.amazon.com/lambda/latest/dg/urls-invocation.html#urls-payloads</a></p></blockquote><p>そのため、現在API Gateway + Lambda構成で開発しているアプリも、アプリコードとしてはそのまま Lambda Function URLsに移植できますし、同様に <code>awslabs/aws-lambda-go-api-proxy</code> を使っている場合もです。 <code>awslabs/aws-lambda-go-api-proxy</code> を使っていれば、ECSでもAPI Gateway Lambdaでも Lambda Function URLs でもコアなアプリコードは同じにできるので、非常に安心ですね。（ECSはproxyなしで生のHTTPサーバを実行するイメージです）</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>Lambda Function URLsのタイムアウトは最長15分になり、API Gatewayを経由するときより伸びた</li><li>AWS WAFはつけられないので、ブラウザ経由のアクセス制御は個別に実施する必要がある</li><li>リクエストはAPI Gatewayペイロードフォーマットと同じなので、エコシステムをそのまま流用できる</li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">2022.4.30時点でAPI Gatewayの統合のタイムアウトは最大29秒で上限緩和不可。 <a href="https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/limits.html">https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/limits.html</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">2022.4.30時点でLambda関数タイムアウトは最大15分で上限緩和不可。<a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/gettingstarted-limits.html">https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/gettingstarted-limits.html</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Lambda/">Lambda</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%BF%E3%82%A4%E3%83%A0%E3%82%A2%E3%82%A6%E3%83%88/">タイムアウト</category>
      
      <category domain="https://future-architect.github.io/tags/LambdaFunctionURLs/">LambdaFunctionURLs</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AC%E3%82%B9/">サーバーレス</category>
      
      
      <comments>https://future-architect.github.io/articles/20220510a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Future Tech Night #21 Google Cloud：JSON関数と共に歩む、BigQueryを使った超汎化型データ活用基盤</title>
      <link>https://future-architect.github.io/articles/20220509a/</link>
      <guid>https://future-architect.github.io/articles/20220509a/</guid>
      <pubDate>Sun, 08 May 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは、TIGの村田です。&lt;br&gt;本記事では、3月17日に開催された「Future Tech Night #21 Google Cloud:</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは、TIGの村田です。<br>本記事では、3月17日に開催された「Future Tech Night #21 Google Cloud: データエンジニア＋MLOps」のセッションサマリと補足事項について触れていきます。</p><p>当日のセッションは2つありましたが、私の記事では「JSON関数と共に歩む、BigQueryを使った超汎化型データ活用基盤」のセッションについて記載します。「Vertex AIによるフルマネージドなMLOps導入」のセッションについては真鍋さんの記事をお待ち下さい。</p><h1 id="スライド-amp-動画"><a href="#スライド-amp-動画" class="headerlink" title="スライド&amp;動画"></a>スライド&amp;動画</h1><p>登壇時の資料および動画がそれぞれ以下にアップロードされています。</p><p><a href="https://speakerdeck.com/mura123yasu/jsonguan-shu-togong-nibu-mu-bigquerywoshi-tutachao-fan-hua-xing-detahuo-yong-ji-pan">JSON関数と共に歩む、BigQueryを使った超汎化型データ活用基盤</a><br><a href="https://www.youtube.com/watch?v=o0oZnX1Ai-k">Future Tech Night #21 Google Cloud: データエンジニア＋MLOps</a></p><h1 id="サマリ"><a href="#サマリ" class="headerlink" title="サマリ"></a>サマリ</h1><p>セッションでは、ビルIoTデータ蓄積基盤の設計開発をユースケースとしてピックアップし、設計における考慮ポイント等についてお話ししました。</p><h2 id="At-least-onceとの付き合い方"><a href="#At-least-onceとの付き合い方" class="headerlink" title="At least onceとの付き合い方"></a>At least onceとの付き合い方</h2><p>Google CloudでのIoTデータ蓄積基盤を構築する際、「データは最終的にBigQueryに格納する」というケースは多く存在すると思います。</p><p>データ格納までの道中でメッセージングサービスを利用することも多く、アーキデザイン時の考慮事項として”QoSとの付き合い方”は欠かせません。</p><img src="/images/20220509a/スクリーンショット_2022-05-06_19.47.04.png" alt="At least onceについて" width="1200" height="669" loading="lazy"><p>今回のアーキテクチャではPub/Subを採用したのですが、Pub/SubはAt least onceのQoSで動作するため、BigQuery到達までの道中で電文が重複してしまう可能性がありました。</p><p>結論としては、BigQueryにてSELECT DISTINCTを利用する方針で、道中の電文重複を許容する形をとりました。</p><p>そのため、Cloud Runで行っていたIoT電文の加工は最小限および冪等に設計し、BigQueryでのSELECT DISTINCTにて”同一レコードである”と確実に判定されるよう考慮しました。</p><h2 id="BigQueryのカラム構造設計とJSON関数"><a href="#BigQueryのカラム構造設計とJSON関数" class="headerlink" title="BigQueryのカラム構造設計とJSON関数"></a>BigQueryのカラム構造設計とJSON関数</h2><p>今回のユースケースでは、データ取得元のデータ構造含めて発展途上かつ今後も頻繁なレイアウト変更が予想されました。そのため、テーブルのカラム構造は極力柔軟な形を目指し設計しました。</p><img src="/images/20220509a/スクリーンショット_2022-05-06_19.55.51.png" alt="BigQueryカラム構造" width="1200" height="668" loading="lazy"><p>添付資料記載の”JSON一括”方式を最終的には採用しました。カラムをキーごとに分割して格納する形はとらず、受け取ったJSONを丸ごと1カラムに格納しました。</p><p>この方式、BigQueryの課金体系を考慮するとベストプラクティスとは言えないのですが、データ量が少ないかつ発展途上である点を考慮して現段階では柔軟な形を採用しました。</p><p>BigQueryの課金はスキャンデータ量に応じた従量課金モデルであり、列単位での課金となるため、”JSON一括”方式にした場合不要なデータのバイト数もスキャンされ、課金の対象となります。もしこの方式を採用する場合にはその点に注意する必要があります。</p><h1 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h1><h2 id="Q1-JSON一括方式を採用した際、具体的な性能懸念等はありましたか？"><a href="#Q1-JSON一括方式を採用した際、具体的な性能懸念等はありましたか？" class="headerlink" title="Q1. JSON一括方式を採用した際、具体的な性能懸念等はありましたか？"></a>Q1. JSON一括方式を採用した際、具体的な性能懸念等はありましたか？</h2><p>無かったです。</p><p>というよりも、データ量が少なかったのでそこまで具体的に「遅い！」となるケースは無かったです。理論上はデータ量が増えてくるとチリツモで性能劣化してくるのではないかなと思います。（未検証です）</p><h2 id="Q2-検索キーだけでも固まっていれば、そこを切り出すとコスト削減を見込めるのでは？"><a href="#Q2-検索キーだけでも固まっていれば、そこを切り出すとコスト削減を見込めるのでは？" class="headerlink" title="Q2. 検索キーだけでも固まっていれば、そこを切り出すとコスト削減を見込めるのでは？"></a>Q2. 検索キーだけでも固まっていれば、そこを切り出すとコスト削減を見込めるのでは？</h2><p>おっしゃる通りですね。利活用側の要件が一定見えているのであればそのようなコスト最適化アプローチをとることができたと考えられます。本ケースではデータ蓄積時に利活用側の要件が見えきらず、柔軟な形を採択しました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>BigQueryの機能に助けられる形で、クイックスタートに適したデータ活用基盤を簡単に構築することができました。JSON関数は非常に便利なのですが、BQのコスト最適化アプローチは念頭に置きつつアーキテクチャデザインおよび処理方式設計を行うことがとても重要だなと感じました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/BigQuery/">BigQuery</category>
      
      <category domain="https://future-architect.github.io/tags/TechNight/">TechNight</category>
      
      
      <comments>https://future-architect.github.io/articles/20220509a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Glueの開発環境の構築(2022)</title>
      <link>https://future-architect.github.io/articles/20220428a/</link>
      <guid>https://future-architect.github.io/articles/20220428a/</guid>
      <pubDate>Wed, 27 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;昨年の記事&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>昨年の記事<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>でもAWSの公式のDockerイメージを使って環境構築をする内容の記事があるのですが、Glue3.0の公式のDockerイメージがリリースされていたので、そちらを使って再度Glueのローカルでの開発環境構築の記事を書いてみようと思います。</p><p>せっかくなので昨年の記事と少しコードを変えようと思い、AWSの公式ドキュメント<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>に書かれたコードを基に解説します。公式ドキュメントとは、</p><ul><li>docker-compose</li><li>LocalStack</li></ul><p>を使用している点が異なるので、その点でも本記事は参考になると思います。</p><p>本記事で紹介するコードは以下のレポジトリに載せてあります。</p><p><a href="https://github.com/RyujiTamaki/glue-dev-sample">https://github.com/RyujiTamaki/glue-dev-sample</a></p><p>ディレクトリ構成は以下のようになっています。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── spark.conf</span><br><span class="line">├── src</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   └── sample.py</span><br><span class="line">└── tests</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    └── test_sample.py</span><br></pre></td></tr></table></figure><h1 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h1><p>本記事ではDockerFileを特に作らず、GlueとLocalStackのDockerイメージをそのまま使用します。</p><p>以下docker-compose.ymlになります。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.5&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">glue.dev.s3.local:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">s3.dev</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">localstack/localstack:0.12.8</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SERVICES=s3</span></span><br><span class="line">      <span class="comment"># dummy configure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_DEFAULT_REGION=ap-northeast-1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_DEFAULT_OUTPUT=json</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_ACCESS_KEY_ID=test</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_SECRET_ACCESS_KEY=test</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">glue.dev.network</span></span><br><span class="line">  <span class="attr">glue.dev.summary:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">glue.dev</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">amazon/aws-glue-libs:glue_libs_3.0.0_image_01</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./:/home/glue_user/workspace/jupyter_workspace</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./spark.conf:/home/glue_user/spark/conf/spark-defaults.conf</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DISABLE_SSL=true</span></span><br><span class="line">      <span class="comment"># dummy configure</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_REGION=ap-northeast-1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_OUTPUT=json</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_ACCESS_KEY_ID=test</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">AWS_SECRET_ACCESS_KEY=test</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># jupyterlabのポート</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8888</span><span class="string">:8888</span></span><br><span class="line">      <span class="comment"># spark uiのポート</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">4040</span><span class="string">:4040</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">glue.dev.network</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/home/glue_user/jupyter/jupyter_start.sh</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">glue.dev.network:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">glue.dev.network</span></span><br></pre></td></tr></table></figure><p>以前の記事<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>では <code>jupyter_start.sh</code> をDockerFileでコピーしていましたが、本記事では最初からDockerイメージにある <code>jupyter_start.sh</code> を実行しています。</p><p>また、Glue3.0の公式のDockerイメージにはバグがあり、暗号化を無効にすることで解決することが報告されています<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。そのため <code>spark.conf</code> を用いて <code>/home/glue_user/spark/conf/spark-defaults.conf</code>を上書きしています。</p><p>上書きに使用している <code>spark.conf</code>は以下になります。元からある <code>/home/glue_user/spark/conf/spark-defaults.conf</code> の <code>spark.io.encryption.enabled</code> を <code>false</code>に書き換えています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">spark.driver.extraClassPath /home/glue_user/spark/jars/*:/home/glue_user/aws-glue-libs/jars/*</span><br><span class="line">spark.executor.extraClassPath   /home/glue_user/spark/jars/*:/home/glue_user/aws-glue-libs/jars/*</span><br><span class="line">spark.sql.catalogImplementation hive</span><br><span class="line">spark.eventLog.enabled  true</span><br><span class="line">spark.history.fs.logDirectory   file:////tmp/spark-events</span><br><span class="line">spark.hadoop.mapreduce.fileoutputcommitter.algorithm.version    2</span><br><span class="line">spark.hadoop.mapreduce.fileoutputcommitter.marksuccessfuljobs   false</span><br><span class="line">spark.unsafe.sorter.spill.read.ahead.enabled    false</span><br><span class="line">spark.network.crypto.enabled    true</span><br><span class="line">spark.network.crypto.keyLength  256</span><br><span class="line">spark.network.crypto.keyFactoryAlgorithm    PBKDF2WithHmacSHA256</span><br><span class="line">spark.network.crypto.saslFallback   false</span><br><span class="line">spark.authenticate  true</span><br><span class="line">spark.io.encryption.enabled false</span><br><span class="line">spark.io.encryption.keySizeBits 256</span><br><span class="line">spark.io.encryption.keygen.algorithm    HmacSHA256</span><br><span class="line">spark.authenticate.secret       62e100c5-5281-4030-992b-1f60391ed508</span><br></pre></td></tr></table></figure><h1 id="Glueジョブのサンプルコードとテストコード"><a href="#Glueジョブのサンプルコードとテストコード" class="headerlink" title="Glueジョブのサンプルコードとテストコード"></a>Glueジョブのサンプルコードとテストコード</h1><p>AWSの公式ドキュメント<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>に書かれているサンプルコードを用います。</p><p>サンプルコードは以下です。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</span><br><span class="line"><span class="keyword">from</span> awsglue.context <span class="keyword">import</span> GlueContext</span><br><span class="line"><span class="keyword">from</span> awsglue.job <span class="keyword">import</span> Job</span><br><span class="line"><span class="keyword">from</span> awsglue.utils <span class="keyword">import</span> getResolvedOptions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GluePythonSampleTest</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        params = []</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;--JOB_NAME&#x27;</span> <span class="keyword">in</span> sys.argv:</span><br><span class="line">            params.append(<span class="string">&#x27;JOB_NAME&#x27;</span>)</span><br><span class="line">        args = getResolvedOptions(sys.argv, params)</span><br><span class="line"></span><br><span class="line">        self.context = GlueContext(SparkSession.builder.getOrCreate())</span><br><span class="line">        self.job = Job(self.context)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;JOB_NAME&#x27;</span> <span class="keyword">in</span> args:</span><br><span class="line">            jobname = args[<span class="string">&#x27;JOB_NAME&#x27;</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            jobname = <span class="string">&quot;test&quot;</span></span><br><span class="line">        self.job.init(jobname, args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        dyf = read_json(self.context, <span class="string">&quot;s3://awsglue-datasets/examples/us-legislators/all/persons.json&quot;</span>)</span><br><span class="line">        dyf.printSchema()</span><br><span class="line"></span><br><span class="line">        self.job.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_json</span>(<span class="params">glue_context, path</span>):</span><br><span class="line">    dynamicframe = glue_context.create_dynamic_frame.from_options(</span><br><span class="line">        connection_type=<span class="string">&#x27;s3&#x27;</span>,</span><br><span class="line">        connection_options=&#123;</span><br><span class="line">            <span class="string">&#x27;paths&#x27;</span>: [path],</span><br><span class="line">            <span class="string">&#x27;recurse&#x27;</span>: <span class="literal">True</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="built_in">format</span>=<span class="string">&#x27;json&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> dynamicframe</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    GluePythonSampleTest().run()</span><br></pre></td></tr></table></figure><p>S3に置かれたJSONファイルをDynamicFrameに読み込む処理をしています。<br>こちらのサンプルに対するテストコードが以下となります。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pytest</span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</span><br><span class="line"><span class="keyword">from</span> awsglue.context <span class="keyword">import</span> GlueContext</span><br><span class="line"><span class="keyword">from</span> awsglue.job <span class="keyword">import</span> Job</span><br><span class="line"><span class="keyword">from</span> awsglue.utils <span class="keyword">import</span> getResolvedOptions</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> src <span class="keyword">import</span> sample</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@pytest.fixture(<span class="params">scope=<span class="string">&quot;module&quot;</span>, autouse=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">glue_context</span>():</span><br><span class="line">    sys.argv.append(<span class="string">&#x27;--JOB_NAME&#x27;</span>)</span><br><span class="line">    sys.argv.append(<span class="string">&#x27;test_count&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    args = getResolvedOptions(sys.argv, [<span class="string">&#x27;JOB_NAME&#x27;</span>])</span><br><span class="line">    sc = SparkSession.builder.getOrCreate()</span><br><span class="line">    sc._jsc.hadoopConfiguration().<span class="built_in">set</span>(<span class="string">&quot;fs.s3a.endpoint&quot;</span>, <span class="string">&quot;http://glue.dev.s3.local:4566&quot;</span>)</span><br><span class="line">    sc._jsc.hadoopConfiguration().<span class="built_in">set</span>(<span class="string">&quot;fs.s3a.path.style.access&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">    sc._jsc.hadoopConfiguration().<span class="built_in">set</span>(<span class="string">&quot;fs.s3a.signing-algorithm&quot;</span>, <span class="string">&quot;S3SignerType&quot;</span>)</span><br><span class="line">    sc._jsc.hadoopConfiguration().<span class="built_in">set</span>(<span class="string">&quot;fs.s3a.change.detection.mode&quot;</span>, <span class="string">&quot;None&quot;</span>)</span><br><span class="line">    sc._jsc.hadoopConfiguration().<span class="built_in">set</span>(<span class="string">&quot;fs.s3a.change.detection.version.required&quot;</span>, <span class="string">&quot;false&quot;</span>)</span><br><span class="line">    context = GlueContext(sc)</span><br><span class="line">    job = Job(context)</span><br><span class="line">    job.init(args[<span class="string">&#x27;JOB_NAME&#x27;</span>], args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span>(context)</span><br><span class="line"></span><br><span class="line">    job.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_counts</span>(<span class="params">glue_context</span>):</span><br><span class="line">    dyf = sample.read_json(glue_context, <span class="string">&quot;s3://awsglue-datasets/examples/us-legislators/all/persons.json&quot;</span>)</span><br><span class="line">    <span class="keyword">assert</span> dyf.toDF().count() == <span class="number">1961</span></span><br></pre></td></tr></table></figure><p>公式のドキュメントのコードとは以下の設定を加えている箇所が異なります。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sc = SparkSession.builder.getOrCreate()</span><br><span class="line">sc._jsc.hadoopConfiguration().<span class="built_in">set</span>(<span class="string">&quot;fs.s3a.endpoint&quot;</span>, <span class="string">&quot;http://glue.dev.s3.local:4566&quot;</span>)</span><br><span class="line">sc._jsc.hadoopConfiguration().<span class="built_in">set</span>(<span class="string">&quot;fs.s3a.path.style.access&quot;</span>, <span class="string">&quot;true&quot;</span>)</span><br><span class="line">sc._jsc.hadoopConfiguration().<span class="built_in">set</span>(<span class="string">&quot;fs.s3a.signing-algorithm&quot;</span>, <span class="string">&quot;S3SignerType&quot;</span>)</span><br><span class="line">sc._jsc.hadoopConfiguration().<span class="built_in">set</span>(<span class="string">&quot;fs.s3a.change.detection.mode&quot;</span>, <span class="string">&quot;None&quot;</span>)</span><br><span class="line">sc._jsc.hadoopConfiguration().<span class="built_in">set</span>(<span class="string">&quot;fs.s3a.change.detection.version.required&quot;</span>, <span class="string">&quot;false&quot;</span>)</span><br></pre></td></tr></table></figure><p>以前のAWS Glueの単体テスト環境の構築手順<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>でも紹介されている設定に加えて、change.detectionを無効にする設定もしています。これはサードパーティのS3実装に対してはS3の変更の検知がうまくできないためです<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>。ローカルでのテストにはLocalStackを用いるため、change.detectionを無効にしています。</p><h1 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h1><p>以下コマンドでDockerを起動します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up --build</span><br></pre></td></tr></table></figure><p>Glue用のコンテナとLocalStack用のコンテナが立ち上がります。<br><code>http://127.0.0.1:8888</code> にブラウザでアクセスすると、JupyterLabが起動していることが確認できます。</p><img src="/images/20220428a/スクリーンショット_2022-04-03_16.24.58.png" alt="JupyterLab" width="1200" height="905" loading="lazy"><p>次にテストを実行してみましょう。<br>Dockerが起動していれば、以下コマンドでglue.devコンテナに入れます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it glue.dev bash</span><br></pre></td></tr></table></figure><p><code>/home/glue_user/workspace/jupyter_workspace</code> にマウントしたファイルがあることが確認できます。<br><img src="/images/20220428a/スクリーンショット_2022-04-03_16.28.33.png" alt="マウント結果" width="1036" height="282" loading="lazy"></p><p>テストに使用するJSONファイル <code>s3://awsglue-datasets/examples/us-legislators/all/persons.json</code> をローカルにコピーします。</p><p>Dockerコンテナ内で以下コマンドを実行し、LocalStackのS3に格納します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ aws s3 mb s3://awsglue-datasets --endpoint-url http://glue.dev.s3.<span class="built_in">local</span>:4566</span><br><span class="line">$ aws s3 <span class="built_in">cp</span> /path/to/persons.json s3://awsglue-datasets/examples/us-legislators/all/ --endpoint-url http://glue.dev.s3.<span class="built_in">local</span>:4566</span><br></pre></td></tr></table></figure><p>jupyter_workspace配下で以下のコマンドを実行することにより、pytestが実行できます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pytest tests/</span><br></pre></td></tr></table></figure><p>以下実行結果です。<br><img src="/images/20220428a/スクリーンショット_2022-04-03_16.37.16.png" alt="pytest結果" width="1200" height="275" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DeprecationWarning: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate() instead.</span><br></pre></td></tr></table></figure><p>上記Warningが出ていますが、テストがパスできたことを確認できました。<br>テスト実行中に <code>http://127.0.0.1:4040/</code> にブラウザでアクセスすると、Spark UIを確認できます。</p><img src="/images/20220428a/スクリーンショット_2022-04-03_16.40.41.png" alt="Spark UI" width="1200" height="573" loading="lazy"><p>Jobの調査に便利です。ただ、自分が使ってみたところ少し不安定なところもありました。今後の改善に期待です。</p><p>以上で開発環境構築の紹介を終わります。以降はsrc/以下にGlueジョブのスクリプトを作成、tests/以下にGlueジョブのテストを追加、としていくといいと思います。</p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p>dockerを再起動すると以下のようなエラーが出ます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glue.dev             | PermissionError: [Errno 13] Permission denied: &#x27;/home/glue_user/.jupyter/migrated&#x27;</span><br></pre></td></tr></table></figure><p>根本解決になっていなくて恐縮ですが、一度 <code>docker compose rm</code> で停止済みのコンテナを削除すると次の <code>docker compose up</code>では上記のエラーが出ずにJupyter Labが立ち上がるようになります。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>本記事では最新のGlue3.0のDockerイメージを使って、ローカルでの環境構築を紹介しました。<br>Sparkの設定を変える箇所がハマりどころだと思うので、参考になれば幸いです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://future-architect.github.io/articles/20210521a/">https://future-architect.github.io/articles/20210521a/</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-libraries.html">https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-libraries.html</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;"><a href="https://github.com/awslabs/aws-glue-libs/issues/128">https://github.com/awslabs/aws-glue-libs/issues/128</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;"><a href="https://future-architect.github.io/articles/20191206/">https://future-architect.github.io/articles/20191206/</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;"><a href="https://hadoop.apache.org/docs/r3.3.1/hadoop-aws/tools/hadoop-aws/index.html#Handling_Read-During-Overwrite">https://hadoop.apache.org/docs/r3.3.1/hadoop-aws/tools/hadoop-aws/index.html#Handling_Read-During-Overwrite</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/Glue/">Glue</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/">環境構築</category>
      
      <category domain="https://future-architect.github.io/tags/LocalStack/">LocalStack</category>
      
      <category domain="https://future-architect.github.io/tags/DockerCompose/">DockerCompose</category>
      
      <category domain="https://future-architect.github.io/tags/JupyterNotebook/">JupyterNotebook</category>
      
      
      <comments>https://future-architect.github.io/articles/20220428a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>インフラからアプリ領域にチャレンジした話</title>
      <link>https://future-architect.github.io/articles/20220427a/</link>
      <guid>https://future-architect.github.io/articles/20220427a/</guid>
      <pubDate>Tue, 26 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220427a/change-g898fb62db_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;426&quot;&gt;

&lt;p&gt;こんにちは。TIGの伊藤です。この記事は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220427a/change-g898fb62db_640.jpg" alt="" width="640" height="426"><p>こんにちは。TIGの伊藤です。この記事は<a href="/articles/20220418a">春の入門連載2022</a>の8日目の記事です。<br>この連載は「新年度新しいことに取り組んでみる」ということも目的やテーマとして取り上げていますが、そんな私は新年明けてから3月末までアプリ領域に取り組んでみた、という内容を取り上げてみようと思います。<br>未知の領域に入門するとき、どうしても点になりがちな知識たちをつなげるためにどうしたか？みたいなところを読んでいただけると幸いです。</p><h2 id="これまでの私の遍歴"><a href="#これまでの私の遍歴" class="headerlink" title="これまでの私の遍歴"></a>これまでの私の遍歴</h2><p>前職に新卒で入社してはじめてエンジニアになりました。その頃は、エンジニアにもインフラとかフロントエンドとかあったことを全く知らずに、日々案件の仕事をこなしていました。前職ではRuby on Railsを取り扱っており、それに関わるフロントからインフラまで触れたのはいい経験でした。そんなこんなで、これまででアプリは全くの未経験というわけではないです。とはいえ、結構前の出来事であったり、その当時はインフラの方がより興味があったため、転職を機にインフラ領域を主軸として仕事をしています。<br>インフラを仕事にしてからは、コードと呼ばれるものはTerraformくらいで、あとはYAMLは書いていました。そんな中、年明けにプロジェクト異動のタイミングが重なり、アプリに挑戦させてもらいました。</p><h2 id="ロールチェンジしたモチベーション"><a href="#ロールチェンジしたモチベーション" class="headerlink" title="ロールチェンジしたモチベーション"></a>ロールチェンジしたモチベーション</h2><p>私がアプリに手を出したいと思ったきっかけ、モチベーションです。<br>当たり前と言えば当たり前なのですが、インフラだけやっていてもサービスが完成することはもちろんなく、作ったインフラの上にアプリを乗せることで初めてどちらも力を発揮するものだと改めて思っています。車の両輪、とまではいかないですが、インフラの上にアプリを乗せる常がある限りは、</p><ul><li>何がアプリとして乗るのか</li><li>どんなシステムを作るのか</li></ul><p>の視野を広げたいという気持ちでアプリを作れる環境を選びました。<br>このきっかけとは別で、以前所属していたプロジェクトでクラウドリフトをやっていた時に、既存のアプリへの理解が深くできなかったために、踏み入れられないエリアがあったためでもあります。</p><h2 id="ロールチェンジしてやっていたこと"><a href="#ロールチェンジしてやっていたこと" class="headerlink" title="ロールチェンジしてやっていたこと"></a>ロールチェンジしてやっていたこと</h2><p>アプリをやり始めたときは、プロジェクトとしてGoを取り入れるタイミングで参画したので、数日Goを勉強する時間をいただいて、アウトプットとして簡単なCLIを作りました。<br>また、チームで開発するための共通認識としてGoDocの書き方をまとめて説明もしたり、エディタの設定の統一など開発の基準を設けることもやりました。幸いにもフューチャーには、先日発売された<a href="https://www.oreilly.co.jp/books/9784873119694/">「実用Go言語」</a>を執筆する方もおり、助言をいただきながらしっかり目に基準を設けることができたかと思います。<br>その他は実際にGoのコードを書いてはレビューをもらい、わずかながらですが案件を出る頃には少しだけ感覚を掴むことが出来ました。</p><h2 id="ロールチェンジして思ったこと"><a href="#ロールチェンジして思ったこと" class="headerlink" title="ロールチェンジして思ったこと"></a>ロールチェンジして思ったこと</h2><p>ロールチェンジして改めて肌で感じたことがいくつかあります。</p><h3 id="別領域の開発経験も役に立つ"><a href="#別領域の開発経験も役に立つ" class="headerlink" title="別領域の開発経験も役に立つ"></a>別領域の開発経験も役に立つ</h3><p>言わずもがなといえばそうなのですが、これまでインフラをやって経験したことが役に立ちました。Terraformの理解度は高く、大体の勘所は分かるようになっている一方、俗に言うプログラミング言語はほぼできないので不安はありました。しかし、一定のルールについてはソースコードを書くときの感覚にも生きており、知識が繋がっていることを感じました。</p><h3 id="インフラを意識してアプリを考えられる"><a href="#インフラを意識してアプリを考えられる" class="headerlink" title="インフラを意識してアプリを考えられる"></a>インフラを意識してアプリを考えられる</h3><p>これはバックグラウンドが生きてきた場面ですが、先のモチベーションのところでも書きましたが、自分の領域外のところを意識してものづくりが出来たと思っています。</p><ul><li>どんなインフラの作りになっているか</li><li>性能が悪くなるとどんな影響が起こるか</li></ul><p>など、インフラを理解してアプリの作りを考えられたことは良かったです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>この記事は本当に新人の方向けになっていると思います。未知の領域に飛び込んだ時、全てを一回リセットして初めてみることもありだと思いますが、意外と技術はつながっているので、点を結ぶように調べていくと効率もよく、より楽しく学べるのかなと思いました。<br>また、ロールチェンジはタイミングあれど、リフレッシュにもなったので、オススメです！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%96%B0%E4%BA%BA%E5%90%91%E3%81%91/">新人向け</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AD%E3%83%BC%E3%83%AB%E3%83%81%E3%82%A7%E3%83%B3%E3%82%B8/">ロールチェンジ</category>
      
      
      <comments>https://future-architect.github.io/articles/20220427a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ソフトウェアのバージョンと開発スタイルの関係について</title>
      <link>https://future-architect.github.io/articles/20220426a/</link>
      <guid>https://future-architect.github.io/articles/20220426a/</guid>
      <pubDate>Mon, 25 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>初めまして、TIGに所属している原木と申します。<br>バージョンという言葉を身近に聞いたり、体感することは多いのではないでしょうか？</p><ul><li>霜踏み弱体化前のバージョンでRTAの記録をたたき出したらしいね。最新版ならどんなビルドがおすすめだと思う？(執筆時は三月でした)</li><li>今日新作ゲームが配信されるぞ、帰ったら遊ぶんだ…ネットワーク機能を使うためには”本体の更新が必要です。更新しますか?”</li></ul><p>ソフトウェア開発においてもバージョンは決して避けて通ることはできません。しかし、プログラムにバージョンをつける側に立ってみると、そもそもバージョンとは何なのでしょうか？ふわっと考え出すとわりときりがないと思います。</p><ul><li>バージョンの付け方ってどんなルールがあるのだろうか？</li><li>バージョンをつけるタイミングは？</li><li>バージョンってだいたいどれくらいの期間で上がるのだろう？</li><li>バージョンって1(or0.1)から始めないといけないのか？</li><li>バージョンが何回更新されるまで同じソフトウェアだと言えるのだろうか？</li></ul><p>本記事ではソフトウェア開発において、避けて通ることのできないソフトウェアのバージョンについてそんな疑問に答えていきたいと思います。</p><h1 id="セマンティックバージョニング"><a href="#セマンティックバージョニング" class="headerlink" title="セマンティックバージョニング"></a>セマンティックバージョニング</h1><p>ソフトウェアのバージョンに関する命名規則は、昔から開発者の心をつかんで離さない、ホットトピックの一つです。</p><p><a href="https://en.wikipedia.org/wiki/Software_versioning">Software versioning</a>というウィキペディアの記事を見ると、古今東西、ソフトウェアのバージョン管理方法として様々な手法が試されてきたことがわかります。その中でも、今日特によく目にするのがセマンティックバージョニングです。</p><blockquote><p>コンテナオーケストレーションを実現するKubernetesの最新版となる「<strong>Kubernetes 1.23</strong>」正式版がリリースされました。<br><a href="https://www.publickey1.jp/blog/21/kubernetes_123ipv4v6podapiv2kubelet_cri_api.html">https://www.publickey1.jp/blog/21/kubernetes_123ipv4v6podapiv2kubelet_cri_api.html</a></p></blockquote><blockquote><p>プログラミング言語「Go」の最新版「<strong>Go 1.18</strong>」が、3月15日にリリースされた。<br><a href="https://forest.watch.impress.co.jp/docs/news/1395812.html">https://forest.watch.impress.co.jp/docs/news/1395812.html</a></p></blockquote><p>ソフトウェアのバージョンにおいて、昨今ではこのように小数点を突き抜けてる書き方をよく目にする機会が多いと思います。<br>この表記方法をセマンティックバージョニングといいます。Githubの共同創業者であるTom Preston Werner氏が2010年に提唱し、GitHub上のオープンソースソフトウェア(OSS)等で広く使われるようになりました。</p><p>セマンティックバージョニングでは、 X.Y.Z (Major.Minor.Patch)というフォーマットで書きます。具体的な説明として、Go言語のモジュールにおけるバージョン番号の付け方に関する説明から引用します。</p><p><a href="https://go.dev/doc/modules/version-numbers">https://go.dev/doc/modules/version-numbers</a></p><blockquote><p>リリースされたモジュールは、下図のようにセマンティックバージョンニング・モデルでバージョン番号を付けて公開されます。<br><img src="/images/20220426a/image.png" alt="セマンティックバージョニング" width="512" height="160" loading="lazy"><br>次の表は、バージョン番号の各パーツが、モジュールの安定性と後方互換性をどのように示すかを説明したものです。</p><div class="scroll"><table><thead><tr><th align="left">バージョンの段階</th><th align="left">例</th><th align="left">開発者へのメッセージ</th></tr></thead><tbody><tr><td align="left">開発中</td><td align="left">自動的な疑似バージョン番号 v<strong>0</strong>.x.x</td><td align="left">このモジュールが<strong>まだ開発中であり、不安定であること</strong>を示します。このリリースは、後方互換性や安定性を保証しません。</td></tr><tr><td align="left">メジャーバージョン</td><td align="left">v<strong>1</strong>.x.x</td><td align="left"><strong>後方互換性のない、公開APIの変更</strong>を示します。このリリースは、以前のメジャーバージョンとの後方互換性を保証しません。</td></tr><tr><td align="left">マイナーバージョン</td><td align="left">vx.<strong>4</strong>.x</td><td align="left"><strong>後方互換性のある、公開APIの変更</strong>を示します。このリリースは後方互換性と安定性を保証します。</td></tr><tr><td align="left">パッチバージョン</td><td align="left">vx.x.<strong>1</strong></td><td align="left"><strong>モジュールの公開APIや依存関係に影響を与えない変更</strong>を示します。このリリースは後方互換性と安定性を保証します。</td></tr><tr><td align="left">プレリリースバージョン</td><td align="left">vx.x.x-<strong>beta.2</strong></td><td align="left"><strong>アルファ版やベータ版のような、リリース前のマイルストーンであること</strong>を示します。このリリースは安定性を保証しません。</td></tr></tbody></table></div></blockquote><p>新しいバージョンのソフトウェアを公開した時は、通常パッチを出さないため(ゲームだと即日同時リリースだったりしますが….)、最後のZを省略してX.Yと書くことが多いです。先ほどの例も厳密にはGo 1.18.0、 Kubernetes 1.23.0ですが、最後のパッチバージョンを省略したため、小数点だけど小数点じゃない、そんな見え方になっていたのでした。</p><p>ソフトウェアのバージョンの付け方はセマンティックバージョニングだけではありません。例えばLinuxはかつて、バージョンの末尾が偶数か奇数かによってソフトウェアが安定版か不安定版か(ベータ版、開発版に相当)を示していました。Microsoft Windows Vistaが登場するより前の話です。</p><p>バージョニングに関する長い歴史の中で、なぜセマンティックバージョニングがこれだけ普及したのでしょうか? その理由について、<strong>リリース間隔</strong>と<strong>ソフトウェアをとりまくエコシステム</strong>という二つの視点から探ってみました。</p><h1 id="バージョンとリリースの関係"><a href="#バージョンとリリースの関係" class="headerlink" title="バージョンとリリースの関係"></a>バージョンとリリースの関係</h1><p>プログラミング言語には、前述したGo以外にも、RustやRuby等セマンティックバージョニングを採用、準拠したものが少なくありません。試しにRustのバージョンが1.0以降どのように刻まれてきたかプロットしてみました。</p><img src="/images/20220426a/image_2.png" alt="Rustリリース" width="641" height="296" loading="lazy"><p>等間隔にぎっしりであることがわかりますね。<br>比較材料としてJavaのバージョンヒストリーを並べてみるとその違いがよくわかると思います。</p><img src="/images/20220426a/image_3.png" alt="Javaリリース" width="641" height="296" loading="lazy"><p>なぜRustはこんなバージョンの刻み方をしているのでしょうか？</p><p>その理由はRustのリリースサイクル(あるソフトウェアが改修されて次のバージョンが出る前の間隔)にあります。Rust言語とそのコンパイラは6週間で新しいバージョンがリリースされます。つまり、6週間でバージョンが変わってしまうんですね。</p><p>バージョンを0.1、 0.2と刻んでいって0.9まで来たけれども、まだリリースできないから1.0にはしたくない、そんな状況を思い浮かべてみてください。セマンティックバージョニングならば、高頻度でバージョンが更新されてもバージョン間の違いや互換性を破綻なく表すことが可能です。そんなセマンティックバージョニングの恩恵を受けるのは、実は人ではなく機械側なのかもしれません。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>一年間に8回以上バージョンが変わるRustのバージョンヒストリーが人間にとってわかりやすいかというと正直微妙だと思います。"これらを振り返って、「Rust 1.10とRust 1.31を比較すると、すごく変わったねえ！」などとリリースごとに言うのは難しいです。" そこで、**エディション**というさらに視野を広げたパッケージ管理のバージョン単位がRustでは採用されています。</p>  <p><a href="https://doc.rust-jp.rs/book-ja/appendix-05-editions.html">https://doc.rust-jp.rs/book-ja/appendix-05-editions.html</a></p></div><h1 id="エコシステムを支えるセマンティックバージョニング"><a href="#エコシステムを支えるセマンティックバージョニング" class="headerlink" title="エコシステムを支えるセマンティックバージョニング"></a>エコシステムを支えるセマンティックバージョニング</h1><p>昨今のソフトウェアは単一のリポジトリのソースコードからビルドできないこと、実行できないことは珍しくありません。ライブラリを管理しているパッケージマネージャーからダウンロードしたシステムモジュールパッケージ(ライブラリ)であったり、ビルドを行うためのパラメータやテスト環境が組み込まれたビルド用のパイプラインであったり、様々なサービス、別のソフトウェアに支えられてできています。ソフトウェアを取り巻く環境を生態系に例えてエコシステムと呼ぶことがあります。</p><p>このエコシステムにおいて、セマンティックバージョニングは重要な役割を果たしています。</p><p>iOSのネイティブアプリケーション作成などで利用されるプログラミング言語、Swift(金融制裁の方ではなく)のパッケージマネージャーツールであるSwift Package Managerの<a href="https://github.com/apple/swift-package-manager/tree/main/Documentation">README.md</a>を見ると、このバージョン指定を雑に行った結果、”依存性地獄(Dependency Hell)”に陥ってしまったユーザーシナリオが紹介されています。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>OSS全盛期の昨今、アプリケーションがとあるライブラリを呼び出し、そのライブラリがまた別のライブラリを呼び出し...とマトリョーシカみたいになっていることは珍しくありません。このソフトウェアが動くために別のライブラリが必要な状況を 依存関係(Dependency) と呼びます。ライブラリがお互いに依存関係を持つとどうなってしまうでしょうか？身動きが取れませんよね。立派な依存地獄の完成です。(このケースだけを指して循環参照なんていうこともあります)</p></div><p>その一つにバージョンの固定があります。意外に思われるかもしれませんが、ライブラリのバージョンをガチガチに固定することはあまり望ましくありません。</p><p>例えば、文字を解析するライブラリであるパーサーがあったとしましょう。このパーサーを利用する、ログ出力ライブラリとファイル解析ライブラリを組み込んだアプリケーションを開発します。</p><p>しかし、問題が発覚しました。ログ解析のライブラリを作ったときはパーサーv2.0.1が最新で、ファイル処理のライブラリを作ったときにはパーサーv2.0.2が最新だったので、最新のバージョンを指定したのですが、二つのライブラリを同時に使うことを想定していなかったのです。この場合、パーサーはどちらのバージョンを指定すればいいでしょうか？</p><img src="/images/20220426a/ライブラリ依存ツリー1.svg" alt="ライブラリ依存ツリー1" width="606" height="208" loading="lazy"><p>めんどくさいし、二つのバージョンのパーサーをいれてビルドしてしまえ…アプリケーションでエラーが起きました。v2.0.1とv2.0.2はほとんどのソースコードが一緒なので、メソッド名やクラス名が重複してしまったからです。</p><img src="/images/20220426a/ライブラリ依存ツリー2.svg" alt="ライブラリ依存ツリー2" width="585" height="206" loading="lazy"><p>これに対する解決策の一つとしてセマンティックバージョニングの活用があります。機能やIFといった大まかに変わらない範囲内でバージョンをゆるーく設定することで依存性地獄を回避することができます。</p><p>Swift Package Managerで、v2.0.0~v2.0.1までのバージョンで最新のライブラリを指定する方法を下記に示します。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PackageDescription</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> package <span class="operator">=</span> <span class="type">Package</span>(</span><br><span class="line">    name: <span class="string">&quot;Parser&quot;</span>,</span><br><span class="line">    <span class="comment">// いろいろな書き方があります</span></span><br><span class="line">    dependencies:</span><br><span class="line">        <span class="comment">// v2.0.0以上v2.1.0未満の最新バージョンを指定する</span></span><br><span class="line">        .<span class="type">Package</span>(url: <span class="string">&quot;git@github.com:foo/ParserPackage1.git&quot;</span>, versions: <span class="string">&quot;2.0.0&quot;</span><span class="operator">..&lt;</span><span class="string">&quot;2.1.0&quot;</span>)</span><br><span class="line">        <span class="comment">// メジャーバージョン2, マイナーバージョン0に合致する最新バージョンを指定する</span></span><br><span class="line">        .<span class="type">Package</span>(url: <span class="string">&quot;git@github.com:foo/ParserPackage2.git&quot;</span>, majorVersion: <span class="number">2</span>, minor: <span class="number">0</span>)</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="開発時とリリース時"><a href="#開発時とリリース時" class="headerlink" title="開発時とリリース時"></a>開発時とリリース時</h1><p>今までセマンティックバージョニングについて説明してきましたが、ソフトウェアがリリースされた後につけるバージョンを前提に話を進めてきました。</p><p>日常的に目にするソフトウェアは、テストがちゃんと行われて動くようになったから一般的に広く使っていいよということが保障されています。これをGA版(General Availability)といいます。</p><p>GAがあるのであれば、当然GAじゃない、開発途中に対する呼び名もあります。</p><blockquote><p>アプリケーションソフトウェアの開発は、さまざまな状態／段階を経て完成します。<br>その段階／状態と、リリース後の状態／段階を示したのが、バージョン表記です。<br>Pre-Alpha（Nightly Build）<br>Alpha<br>Beta<br>RC（Release Candidate）<br>RTM（Release to Manufacturing）または、GM（Golden Master）<br>GA（General Availability）<br><a href="https://atmarkit.itmedia.co.jp/ait/articles/1003/26/news106.html">https://atmarkit.itmedia.co.jp/ait/articles/1003/26/news106.html</a></p></blockquote><p>リリース時とは異なり、リリースするまでの開発時につけるバージョンはセマンティックバージョニングに完全に従うよりも、開発現場の都合を優先することが多いと個人的に思います。</p><p>筆者が以前お世話になっていたところでは、Kubernetes環境で動くコンテナイメージのバージョンについて開発中は、カレンダーの日付とgitのコミットのハッシュ値を組み合わせたものを使用していました。</p><p>コンテナイメージをpushするためのコンテナイメージレジストリを定期的に掃除して、ストレージ容量を抑える必要があったのですが、カレンダーの日付が先頭にあれば古いものを消すときに指定が楽だったからです。</p><p>もちろん、セマンティックバージョニングの枠組みでバージョンを運用することもあります。</p><p>例えば前述したRustでは、<code>stable</code>というバージョン以外に<br><code>nightly</code>ビルドという毎日その日の夜に毎晩ビルドしたバージョンと<br><code>beta</code>ビルドという次のリリース機能がお試しで入ったバージョンがあります。<br>セマンティックバージョニングのプレリリースバージョンに続けて<br>ソースコードのリリース日とgitのハッシュ値が表示されるため、わかりやすいものとなっています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">soharaki@NOTE:~/work$ rustc --version</span><br><span class="line">rustc 1.59.0 (9d1b2106e 2022-02-23)</span><br><span class="line"></span><br><span class="line">soharaki@NOTE:~/work$ rustc --version</span><br><span class="line">rustc 1.60.0-beta.6 (7bccde197 2022-03-22)</span><br><span class="line"></span><br><span class="line">soharaki@NOTE:~/work$ rustc --version</span><br><span class="line">rustc 1.61.0-nightly (1d9c262ee 2022-03-26)</span><br></pre></td></tr></table></figure><h1 id="開発プロセスとバージョンの関係"><a href="#開発プロセスとバージョンの関係" class="headerlink" title="開発プロセスとバージョンの関係"></a>開発プロセスとバージョンの関係</h1><p>ソフトウェアをどういう過程で開発し、リリースするか？この一連の流れを開発プロセスといいます。アジャイルやウォーターフォールは開発プロセスの具体的なやり方の一つです。</p><p>この開発プロセスとバージョンには大きくかかわりがあります。</p><p>例えば、 ECMAScript（エクマスクリプト）の略称で知られる、JavaScriptの標準規格があります。このECMAScript、途中まではES1, ES2, というバージョン表記でしたが途中で名前がES2015, ES2016という風に名前が変わりました。</p><p>バージョンのタイムラインをここで見てみましょう。</p><img src="/images/20220426a/image_4.png" alt="ECMAScriptリリース" width="641" height="296" loading="lazy"><p>バージョン間隔が飛び飛びですが2015年を境にほぼ等間隔になっていることがわかります。</p><p>現在のECMAScriptはTC39という専門委員会が新しい仕様を一年かけてブラッシュアップして、その上の組織にあたるEcma Internationalが一年に一回、総会(General Assembly)にて採択しています。しかし、かつては様々な混乱があり、採択できないことが多々ありました。一年に一回、ちゃんと仕様書として出せるように策定プロセスが整ったのは2015年のことです。それ以降、ES2016、ES2017..と年がバージョン名として採用されるようになりました。</p><p>最新版のES2021/2022については、柏木さんが詳しく解説しています。<br><a href="https://future-architect.github.io/articles/20210617a/">https://future-architect.github.io/articles/20210617a/</a></p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>ES4は意見がまとまらず途中で放棄されたため、仕様書はドラフト版しか存在しません。</p></div><br><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>前述のJava(JDK)もある時期を境に開発プロセス、リリースの間隔を変更しています。</p>  <p><a href="https://www.oracle.com/jp/technical-resources/article/java/ja-topics/jdk-release-model.html">https://www.oracle.com/jp/technical-resources/article/java/ja-topics/jdk-release-model.html</a></p></p></div><p>ソフトウェアや開発体制が成熟したことで、バージョンアップが遅くなったソフトウェアもあれば、早くなったソフトウェアもあります。例えば、Rustは実は開発当初、12週間のリリースサイクルを採用していました。ですが、GA版を迎えたことで、変化を迎えます。</p><p>Rustをより早いスピードで機能開発し、同時に安定性を求めるため「リリーストレイン」という開発手法を採用しました。</p><p>…その結果、Rustは6週間!!という間隔でバージョンアップを行うようになります。<br><a href="https://rust-lang.github.io/rfcs/0507-release-channels.html">https://rust-lang.github.io/rfcs/0507-release-channels.html</a></p><p>「リリーストレイン」では数週間から数か月という短い時間の中で、決まった期間にソフトウェアのリリースを行っていきます。「リリーストレイン」自体が安定した定期的なリリースを実現するための手法ではありますが、なぜRustではより短い時間間隔を採用したのでしょうか？</p><h1 id="ソフトウェアの更新頻度と人気の関係"><a href="#ソフトウェアの更新頻度と人気の関係" class="headerlink" title="ソフトウェアの更新頻度と人気の関係"></a>ソフトウェアの更新頻度と人気の関係</h1><p>OSSの人気を集める上で、バージョン更新の頻度自体が欠かせない要素かもしれません。</p><p>ここにGitHub上のJaraライブラリをベースに、バージョン更新がAPIの互換性、そしてライブラリを利用するユーザーにどれくらい影響を与えているかを調べた2017年の調査論文があります。</p><p><a href="https://ieeexplore.ieee.org/document/7884616">Historical and Impact Analysis of API Breaking Changes: A Large-Scale Study</a></p><p>この論文によると、実世界の317のJavaライブラリ、9000のリリース、26万のクライアントアプリケーションを対象とした大規模な分析により、<br>(i) API変更の14.78%は旧バージョンとの互換性を破壊していること<br>(ii) API変更の破壊頻度は時間とともに増加すること<br>(iv) API変更の破壊頻度が高いシステムほど大規模、人気、活発であること<br>などがわかったそうです。</p><p>要はバージョン更新の頻度が大きく修正を要求されるソフトウェアほど、より利用者に人気であり、開発に協力してくれる人も集めていたというものです。変化し続けるマインドを持つOSSがプロジェクトもコミュニティも成長することができると言いきっていいのかもしれません。</p><p>逆に言えば、ソフトウェアを安定的に塩漬けしたい、そういった作業に従事していただける開発者をOSSにおいて求めるのは、文化的にも人材的にも難しいという現実があります。</p><p>例えば、Go言語の父とも呼ばれるRob Pike氏は、Go言語にLTSがほしいというissueに対して次の通り回答しています。</p><blockquote><p>また、ソフトウェアのビルドに必要なライブラリやその他の依存物の一式をサポートする必要があります。今なら、1.16からのコアライブラリが古いコンパイラで引き続きコンパイルされ、正しく動作することを期待するのは、大きな要求ではありますが、妥当なことかもしれません。しかし、それにはサポートを継続することに同意する貢献者文化も必要です。それを実現するのはかなり難しいようです。<br><a href="https://github.com/golang/go/issues/47942#issuecomment-905184706">https://github.com/golang/go/issues/47942#issuecomment-905184706</a></p></blockquote><img src="/images/20220426a/image_5.png" alt="Goリリース" width="641" height="296" loading="lazy"><h1 id="バージョン更新が当たり前の世界で守りたい約束"><a href="#バージョン更新が当たり前の世界で守りたい約束" class="headerlink" title="バージョン更新が当たり前の世界で守りたい約束"></a>バージョン更新が当たり前の世界で守りたい約束</h1><blockquote><p>semver(セマンティックバージョニングのこと)は実際のところ、<br>メジャーバージョンアップ: 「おそらく多くの場所でコードの更新が必要になるだろう」、<br>マイナーバージョンアップ: 「ほとんどの部分で常に問題がないはずだ」<br>ということを意味します。</p><p><a href="https://github.com/microsoft/TypeScript/issues/14116#issuecomment-292581018">https://github.com/microsoft/TypeScript/issues/14116#issuecomment-292581018</a><br>※なぜTypeScriptはセマンティックバージョニングを採用しないのか？という質問に対する中の人の解答</p></blockquote><p>セマンティックバージョニングを単純に採用するだけでは、ソフトウェアの安定性や互換性を担保するものにはなりません。コンベンショナルコミットといったソースコードの修正をわかりやすくするコメントの書き方であったり、ビルドパイプラインでテストをなるべく自動化することで意図しない破壊的な修正=デグレを防ぐような仕組みが別途必要です。</p><p>それらの仕組みを設けてセマンティックバージョニングに準じようとしていても開発の過程でマイナーバージョン更新によって今まで使えていたAPIが使えなくなるといったことはあります<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>…ですが、そういった修正を繰り返すと利用者側(開発者も含む)の信用は当然すり減っていきます。</p><p>「メジャーバージョンが変わらないから、影響はそんなにないと思っていたのに…」</p><p>バージョンをパッと見たときのユーザーの暗黙的な期待値を下げないための工夫の一つとして、メジャーバージョンが同じ間は、最低限この機能は影響が及ばないように品質を保証しますといったことをドキュメント化する手立てがあります。</p><p>例えばクラウドの構築などで利用されるTerraformでは”Terraformv1.0の互換性の約束”として、メジャーバージョンが1の間、互換性を維持する内容について明文化しています。<br><a href="https://www.terraform.io/language/v1-compatibility-promises">https://www.terraform.io/language/v1-compatibility-promises</a></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ソフトウェアのバージョンの付け方について、主にセマンティックバージョニングを中心に開発手法を交えて説明しました。</p><ul><li>バージョンの付け方ってルールがあるのだろうか？<ul><li>セマンティックバージョニング等、様々な種類があります。</li><li><a href="https://en.wikipedia.org/wiki/Software_versioning">https://en.wikipedia.org/wiki/Software_versioning</a> の内容が非常に詳しいです</li></ul></li><li>バージョンをつけるタイミングは？<ul><li>開発時～リリースまで目的に応じた様々な段階があります。</li></ul></li><li>バージョンってだいたいどれくらいの期間で上がるのだろう？<ul><li>開発を行うプロジェクトがどういった開発手法を採用しているかによります</li><li>人気のあるOSSは「リリーストレイン」と呼ばれるリリース期間を固定した方法を取っているところが多いようです。だいたい1ヵ月～6か月でマイナーバージョンが上がります。</li></ul></li><li>バージョンって1(or0.1)から始めないといけないのか？<ul><li>セマンティックバージョニングに従えば、0.1.0から開発版をリリースして、マイナーバージョンを上げていけばいいと一般的に言われています</li><li>セマンティックバージョニングに従うのでなければ、開発者の気持ち次第です。</li></ul></li></ul><p>ソフトウェアやサービスの開発現場に配属後、バージョンを意識し、時には互換性といった問題で悩む機会は多々あると思います。本記事はそういったトラブルを具体的に解決するものではありませんが、そういったルールで回ってるんだと頭の片隅にあれば、問題を意識しやすいのではないでしょうか。</p><p>少しでもお力になれば幸いです。</p><h1 id="閑話休題-最初のバージョンは1から？"><a href="#閑話休題-最初のバージョンは1から？" class="headerlink" title="閑話休題: 最初のバージョンは1から？"></a>閑話休題: 最初のバージョンは1から？</h1><p>バージョンが1.0になるとテストがちゃんと行われて動くようになったから一般的に広く使っていいよということが慣例で決まっています。これをGA版(General Availability)といいます。<br>ですが、SuSE Linux(Jurixベース版)の最初のリリースのバージョンは4.2でした。これはSF小説「銀河ヒッチハイク・ガイド」をフィーチャーしたものです。<br><a href="https://en.opensuse.org/S.u.S.E._Linux_4.2">https://en.opensuse.org/S.u.S.E._Linux_4.2</a></p><h1 id="閑話休題-一見セマンティックバージョニングっぽいけど…"><a href="#閑話休題-一見セマンティックバージョニングっぽいけど…" class="headerlink" title="閑話休題: 一見セマンティックバージョニングっぽいけど…"></a>閑話休題: 一見セマンティックバージョニングっぽいけど…</h1><p>TypeScriptは型の構文を備えたJavaScriptであり、Webアプリケーションの開発などで活躍しているプログラミング言語です。<br>TypeScriptのバージョンは一見するとセマンティックバージョニングに見えます</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soharaki@NOTE:~/work/example-20220328$ tsc --version</span><br><span class="line">Version 4.6.3</span><br></pre></td></tr></table></figure><p>ですが、実態は十進数的なdecimal versioningです。</p><p><a href="https://twitter.com/teppeis/status/1296672623498149888">https://twitter.com/teppeis/status/1296672623498149888</a></p><img src="/images/20220426a/image_6.png" alt="TypeScriptリリース" width="641" height="296" loading="lazy"><h1 id="閑話休題-バージョンといえば、リリースノート芸も忘れてはなりません"><a href="#閑話休題-バージョンといえば、リリースノート芸も忘れてはなりません" class="headerlink" title="閑話休題: バージョンといえば、リリースノート芸も忘れてはなりません"></a>閑話休題: バージョンといえば、リリースノート芸も忘れてはなりません</h1><p>ソフトウェアのバージョンを上げたとき(リリースした時)、どんな機能を更新したのか？<br>説明する文書をリリースノートといいます。</p><p>企業によっては知られざる文才が密かにその実力を発揮しているようです…<br>例えば、チャットアプリケーションのSlackの履歴を見てみましょう。</p><blockquote><p>Slack 22.03.10 2022年3月14日 新着情報<br>チャンネル参加前にプレビューする際、チャンネル名とともに説明が表示されるようになり、より詳しい情報を得られるようになりました。これなら「#たぬき」が信楽焼のチャンネルなのか、カップ麺の話なのか、それとも策略家の集いなのか、一目瞭然ですね！</p><p>「明日」や「来週」などにリマインダーを設定した場合、その表示時間を選べるようになりました。始業が朝 9 時でない皆さんや、Slackbot のアラートが朝一に飛び込んでくるのがしっくりこない人にぴったりです。「環境設定」&gt;「通知」で、好きな時間をデフォルト設定してください。<br><a href="https://slack.com/intl/ja-jp/release-notes/ios">https://slack.com/intl/ja-jp/release-notes/ios</a></p></blockquote><p>新しくリリースされた機能がユーザーのどういった利用シーンで活躍するのか非常にわかりやすいですね。</p><p>このリリースノートから、Slackは一か月単位で機能をリリースしているリリーストレインスタイルであること、バージョニング方法はカレンダー方式(これはOracle等で採用されている昔からある方式)であることがわかります。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://semver.org/lang/ja/">https://semver.org/lang/ja/</a><ul><li>セマンティックバージョニングのドキュメント</li></ul></li><li><a href="https://azu.github.io/slide/jser200/javascript-2014.html">https://azu.github.io/slide/jser200/javascript-2014.html</a><ul><li>開発プロセスとバージョニングの関係について参考にさせていただきました</li></ul></li><li><a href="https://rust-lang.github.io/rfcs/0507-release-channels.html">https://rust-lang.github.io/rfcs/0507-release-channels.html</a><ul><li>RustがGAしてからもうじき7年か…</li></ul></li><li><a href="https://atmarkit.itmedia.co.jp/ait/articles/1003/26/news106.html">https://atmarkit.itmedia.co.jp/ait/articles/1003/26/news106.html</a><ul><li>セマンティックバージョニングが周知される前の記事ですが、非常に参考になりました</li></ul></li><li><a href="https://en.wikipedia.org/wiki/Software_versioning">https://en.wikipedia.org/wiki/Software_versioning</a><ul><li>ソフトウェアのバージョンについて学びました</li></ul></li><li><a href="https://qiita.com/righteous/items/e5448cb2e7e11ab7d477">https://qiita.com/righteous/items/e5448cb2e7e11ab7d477</a><ul><li>NPMとpackage.jsonについて詳しく説明されています</li></ul></li><li><a href="https://homepages.dcc.ufmg.br/~mtov/pub/2017-saner-breaking-apis.pdf">https://homepages.dcc.ufmg.br/~mtov/pub/2017-saner-breaking-apis.pdf</a><ul><li>APIの更新頻度とコミュニティの活性度の関係について調べた調査論文</li></ul></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://ieeexplore.ieee.org/document/6975655">https://ieeexplore.ieee.org/document/6975655</a>JavaのパッケージマネージャーであるMavenで、後方互換性を意識したセマンティックバージョニングをちゃんと行っているライブラリがどれくらいあるのか調べた調査論文</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/">設計</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86/">バージョン管理</category>
      
      
      <comments>https://future-architect.github.io/articles/20220426a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>読書感想文「リファクタリング第2版」</title>
      <link>https://future-architect.github.io/articles/20220425a/</link>
      <guid>https://future-architect.github.io/articles/20220425a/</guid>
      <pubDate>Sun, 24 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;a href=&quot;https://www.ohmsha.co.jp/book/9784274224546/&quot; title=&quot;出版社のページへ&quot;&gt;
&lt;img src=&quot;/images/20220425a/978-4-274-22454-6.jpg&quot; alt=&quot;&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<a href="https://www.ohmsha.co.jp/book/9784274224546/" title="出版社のページへ"><img src="/images/20220425a/978-4-274-22454-6.jpg" alt="" width="400" height="519"></a><p><a href="/articles/20220418a/">春の入門連載</a>の6日目です。</p><p>「リファクタリング」という言葉を聞いたことがある人は多いでしょう。「リファクタリング」という言葉は最初の書籍が出版されて、ここ22年ほどですっかり「一般名詞」として開発の中の活動として定着した印象があります。</p><p>リファクタリングは「コードの機能を変えずに、コードのメンテナンスがしやすいようにコードを整理する」活動です。リファクタリング本と相互に参考文献になっているエクストリームプログラミングの本では次のサイクルを繰り返すことで開発の生産性と品質を維持しながら開発をし続けることを提唱していました。</p><ul><li>テストコードを書く</li><li>機能を実装する</li><li>リファクタリングをする</li></ul><p>そのメンテナンスがしやすいコードの書き方のパートを集中的に紹介する書籍のリファクタリングですが、原著は1999年に初版が刊行されました。日本語訳も2000年に刊行されました。残念ながら、この時のバージョンは出版社がIT書籍から撤退ということで絶版になってしまいましたが、オーム社が引き継いで2019年には第2版の翻訳も出版されています。</p><p>僕も何度も読み込んで「良い設計をする」「良いコードを書く」というスキルアップに大いに影響を受けた本です。入門祭りということで、新しくなった第2版を改めて読んでみようと思います。</p><h1 id="書籍の概要"><a href="#書籍の概要" class="headerlink" title="書籍の概要"></a>書籍の概要</h1><p>この書籍はそこそこ厚みのある本（430ページ＋目次と前書きで20ページ）ですが、エッセンスはとても薄くまとまっています。最初の5章はこんな感じです。</p><div class="scroll"><table><thead><tr><th align="left">章</th><th align="left">タイトル</th><th align="left">ページ数</th><th align="left">内容</th></tr></thead><tbody><tr><td align="left">1章</td><td align="left">リファクタリングー最初の例</td><td align="left">44</td><td align="left">読み物で、「リファクタリングをする人はこんな手順でやっているぞ」というロールプレイ</td></tr><tr><td align="left">2章</td><td align="left">リファクタリングの原則</td><td align="left">28</td><td align="left">一番大事！</td></tr><tr><td align="left">3章</td><td align="left">コードの不吉な臭い</td><td align="left">15</td><td align="left">「世の中にはどのような悪い設計があるのか」というのがコンパクトにまとまっている</td></tr><tr><td align="left">4章</td><td align="left">テストの構築</td><td align="left">17</td><td align="left">リファクタリングとともに行われるテストの紹介</td></tr><tr><td align="left">5章</td><td align="left">カタログの紹介</td><td align="left">3</td><td align="left">これから先の章のリファクタリングカタログを読むためのガイド</td></tr></tbody></table></div><p>最初の例は一度ざっと流し読みして雰囲気をつかむと、この後を読むのが楽になると思います。この時代の本にはこの手のロールプレイが良くついていた気がします。2版になってカラーになって見やすさが段違いに上がっています。また、このあとの章やカタログの章まで全部読んだあとに再度戻ってくると、自分の理解の補強や確認に役立つでしょう。</p><p>「リファクタリングの理論とエッセンスをつかむ」のであれば、2章を読むだけで十分です。ここは本気で読むと良いです。読書会をするとか、ちょっとできる人に教えてもらえる環境を作ってもいいと思います。28ページしかないので、すぐに読めると思います。</p><p>個人的には3章もお気に入りの章です。文法を学んで、なんとか動くものを作るぞ、という段階の人にはまだ良いコード、悪いコードというイメージがつきにくいかもしれませんが、この章を読むことでコードを見た時の選球眼を鍛えるきっかけになると思います。</p><p>あとの章はリファクタリング技法のカタログです。</p><h1 id="カタログとコードの不吉な臭いから見えてくる良い設計"><a href="#カタログとコードの不吉な臭いから見えてくる良い設計" class="headerlink" title="カタログとコードの不吉な臭いから見えてくる良い設計"></a>カタログとコードの不吉な臭いから見えてくる良い設計</h1><p>「良い設計」とか「悪いコード」って一言で言えるようなものではありません。同じ見た目のコードでも、変更頻度とか外的要因で悪くないコードだったりもします。それでも、長年の経験やら、変更のしにくさなど、さまざまな理由で、経験のある開発者は「よくない設計」を感じ取ります。</p><p>3章はアンチパターンから学ぶ良い設計のガイドです。昔はCプログラミング診断室という書籍もあり、このアプローチに感銘を受けましたが、いかんせんそちらの本は古すぎるし、今読むなら本書のリファクタリングの3章が良いですね。最初から良い設計でコードを書けることはほとんどなく、多くの場合は徐々に改善していってよいコードにしていくと思います。改善するには改善箇所を見つける必要があります。</p><p>例えば、「属性とgetとset以外に持たないクラス」を「データクラス」として不吉な臭いに挙げています。そして改善方法の一つとして、このデータクラスの値の変更をしている関数をメソッドとしてデータクラスに持ってくることを紹介しています。本来、適切に責務分割がされているのであれば、このようなコードにはならなかったはずですが、リファクタリングにより、ボトムアップで適切な責務が割り当てられて、良い設計が後から得られます。</p><p>リファクタリングというのは「ボトムアップの設計手法」であり、文法を学んで動くものが作れるようになった人が「設計を学ぶ」アプローチのひとつとしてとても優れていると思います。もちろん、トップダウンでオブジェクト指向な分析をしてコードを導いていくのも設計だと思いますし、概念設計でERDを書いてデータ構造を設計してテーブル設計をしていくアプローチもありますが、別に学ぶ方法は一本道ではないし、同時に学んでもいいわけで、その1つとしてもおすすめです。</p><p>カタログをよく見ると、A⇔Bみたいな対になっているものがあることに気づくでしょう。これも「良い設計」が状況次第である、ということの証左ですね。また、デザインパターンと呼ばれる設計カタログを導出するようなものもあります。デザインパターン入門の一つのきっかけになるポテンシャルもあります。</p><h1 id="第2版の変更ポイント"><a href="#第2版の変更ポイント" class="headerlink" title="第2版の変更ポイント"></a>第2版の変更ポイント</h1><p>初版と比べると、2版では主に2つの点が変更されています。</p><ul><li>カラーになってカタログに挿絵がついて見やすくなった</li><li>言語がJavaScriptになった</li></ul><p>執筆時点のJavaScriptのバージョンにはなかったprivateの説明をするところだけはJavaになっていたりしますが、JavaScriptになったおかげで読みやすくなったという人も多いでしょう。とはいえ、言語の違いで伝える内容が変わるような本ではないし、JavaScript固有のリファクタリングのカタログとかはないので、一歩引いてそのエッセンスを実際に利用することになるでしょう。</p><p>例えば、今どきのウェブのフレームワークはクラスは使うことは減っています。VueもReactもクラスではない書き方が主流です。Angularとかlitは使いますが、ただこれらもコンポーネントとしての制約が大きくて、この本のクラスとは少し特性が違います。ただ、クラス間の責務の移動とかはコンポーネントからフック（React）とかサービス層とかへの移動とかに置き換えられるので、それぞれ使っているフレームワークにあわせて読み替えていく必要があります。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>2章と3章だけがポイントでこの程度のページ数なら本屋で立ち読みでも読み切ってしまえる分量ではありますが、後半のカタログ集を読めば読むほど理解が強調されていきますし、ぜひともじっくりカタログ部分も読んで、理解を深めていくのがおすすめです。</p><p>本書導入部にも書かれていますが、すっかり出版されてから業界に浸透し、各種IDEとかエディタとかでも機能として搭載されるようになったリファクタリングの原点を知ることで、良い設計に一歩近づけると思います。</p><p>この本は一度で完全に理解する必要はなく、読み手のレベルが上がってくると後半のカタログの「面白い！」と思う章が変わってくると思います。新卒入社でプログラミングを始めたばかり、という人でも、すぐに役に立つものもあれば、ちょっと大きめの設計をしてきて初めて「なるほど！」と思うものもあるかもしれません。また、そういう本であるので、読書会とかでちょっとできる先輩に行間とか事例とかを教えてもらいながら読むのも楽しい本だと思います。</p><p><a href="https://www.ohmsha.co.jp/book/9784274224546/">https://www.ohmsha.co.jp/book/9784274224546/</a></p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0/">リファクタリング</category>
      
      
      <comments>https://future-architect.github.io/articles/20220425a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「プロになるJava」読書感想文〜新人の頃の気持ちで最近のJava入門書を読む話</title>
      <link>https://future-architect.github.io/articles/20220422a/</link>
      <guid>https://future-architect.github.io/articles/20220422a/</guid>
      <pubDate>Thu, 21 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;この記事は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>この記事は<a href="/articles/20220418a/">「春の入門連載2022」</a>5日目です。昨日は、岸本卓也さんによる<a href="/articles/20220421a/">「技術情報の調べ方」</a>でした。</p><p>HealthCare Innovation Group(HIG)の永井優斗です。</p><p>久しぶりにJavaを利用するプロジェクトにアサインされたことや、初めてOJTトレーナーをやることになったことがきっかけで、「最近のJava入門書ってどんな感じなんだろう？」とふと興味が湧きました。</p><p>というわけで、「プロになるJava―仕事で必要なプログラミングの知識がゼロから身につく最高の指南書」（以下「プロになるJava」）というJava入門書を早速購入し、読んでみた中での感想文となります。とてもわかりやすく書かれており、よかったら皆さんも手に取ってみてください。</p><p>「プロになるJava」は発売して1か月ほどにも関わらず、twitterのTL(<a href="https://twitter.com/search?q=%23projava">#projava</a>)などでもとても評価が高いです。</p><p>なんと明日(2022/4/23)付で第2刷が出るそうです(<a href="https://twitter.com/kis/status/1515520867467337732">著者の1人である、きしださんのtweet</a>より)。すごいですね。</p><img src="/images/20220422a/image.png" alt="" width="400" height="507" loading="lazy"><ul><li><a href="https://gihyo.jp/book/2022/978-4-297-12685-8">https://gihyo.jp/book/2022/978-4-297-12685-8</a></li></ul><p>記事タイトルのとおり、できる限り自分が新人だった頃の気持ち（2017年4月にフューチャーに新卒入社しました）を思い出しながら、読み進めています。</p><p>この5年間で、Java SEのバージョンも進んでいます。「プロになるJava」では、Java17に対応していますが、私が新人のときに読んでいた入門書には「最新Java8に対応！」と記載されていました。</p><h1 id="「プロになるJava」目次"><a href="#「プロになるJava」目次" class="headerlink" title="「プロになるJava」目次"></a>「プロになるJava」目次</h1><p>部と章立ては以下の通りです。</p><h3 id="第1部-Javaを始める準備"><a href="#第1部-Javaを始める準備" class="headerlink" title="第1部 Javaを始める準備"></a>第1部 Javaを始める準備</h3><p>第1章 Java ってなんだろう<br>第2章 開発環境の準備と最初の一歩</p><h3 id="第2部-Javaの基本"><a href="#第2部-Javaの基本" class="headerlink" title="第2部　Javaの基本"></a>第2部　Javaの基本</h3><p>第3章 値と計算<br>第4章 変数と型<br>第5章 標準API<br>第6章 SwingによるGUI</p><h3 id="第3部-Javaの文法"><a href="#第3部-Javaの文法" class="headerlink" title="第3部　Javaの文法"></a>第3部　Javaの文法</h3><p>第7章 条件分岐<br>第8章 データ構造<br>第9章 繰り返し<br>第10章 データ構造の処理<br>第11章 メソッド</p><h3 id="第4部-高度なプログラミング"><a href="#第4部-高度なプログラミング" class="headerlink" title="第4部　高度なプログラミング"></a>第4部　高度なプログラミング</h3><p>第12章 入出力と例外<br>第13章 処理の難しさの段階<br>第14章 クラスとインタフェース<br>第15章 継承</p><h3 id="第5部-ツールと開発技法"><a href="#第5部-ツールと開発技法" class="headerlink" title="第5部　ツールと開発技法"></a>第5部　ツールと開発技法</h3><p>第16章 ビルドツールとMaven<br>第17章 Javadocとドキュメンテーション<br>第18章 JUnitとテストの自動化<br>第19章 IntelliJ IDEAを使いこなす<br>第20章 バージョン管理とGit</p><h3 id="第6部-Webアプリケーション開発"><a href="#第6部-Webアプリケーション開発" class="headerlink" title="第6部　Webアプリケーション開発"></a>第6部　Webアプリケーション開発</h3><p>第21章 Spring BootでWebアプリケーションを作ってみる<br>第22章 Webアプリケーションにデータベースを組み込む<br>おわりに<br>目次の詳細（節以降については、<a href="https://gihyo.jp/book/2022/978-4-297-12685-8">技術評論社のページ</a>をご確認ください。）</p><h1 id="特徴と感想"><a href="#特徴と感想" class="headerlink" title="特徴と感想"></a>特徴と感想</h1><h3 id="取り上げるテーマの広さ"><a href="#取り上げるテーマの広さ" class="headerlink" title="取り上げるテーマの広さ"></a>取り上げるテーマの広さ</h3><p>目次を見ると、単なる文法やAPIの紹介にとどまらず、テストや、Gitによるバージョン管理、Spring BootでWebアプリを作成したり、データベースについても網羅していることがわかります。それぞれ奥が深く、章で取り上げているものだけで1冊本を書くことができますが、現場に入るまでに知っておきたい知識をバランスよく記載していると感じました。</p><h3 id="JShellとIntelliJ-IDEAによる書面ハンズオン"><a href="#JShellとIntelliJ-IDEAによる書面ハンズオン" class="headerlink" title="JShellとIntelliJ IDEAによる書面ハンズオン"></a>JShellとIntelliJ IDEAによる書面ハンズオン</h3><p>かといって、プログラミング初心者にとっつきにくい本ではなく、特にJShellを使って1行1行処理を動かしながら学べるのはとてもわかりやすいと感じました。また、プログラムが原則1行1行上から実行されるという感覚を身につけることができます。（完全に初心者だった時の私はこのことすら理解できていなかったのです。）ちなみにJShellはJava9にて導入されているので、新人の頃読んだ、Java8対応な入門書には残念ながら載るはずがありませんでした。</p><p>また、条件分岐以降、ソースファイルとして記述したほうがわかりやすくなることから、書面ハンズオンはIntelliJ IDEAを利用しています。</p><p>第3部9章では、ループのなかでデバッガーを利用して、ループ処理の中を覗く節があるのですが、デバッガーによって、処理がどのように行われるのかを把握する方法を丁寧に指南しています。<br>副題にあるように「ゼロから身につく」を体現している入門書だと感じました。</p><h3 id="オブジェクト指向を重視しない"><a href="#オブジェクト指向を重視しない" class="headerlink" title="オブジェクト指向を重視しない"></a>オブジェクト指向を重視しない</h3><p>目次を見ると、オブジェクト指向を題した、部も章もありません。</p><p>私が新人の頃学んだ記憶を思い返すと、イヌ・ネコ、哺乳類のクラスだったり、たい焼きとたい焼きの型だったり、さまざまな例を使って、オブジェクト指向を説明しようとしていました。が、当時の私はわかった感じがしただけで、実装にどう生かしていいのかよくわかりませんでした。</p><p>「プロになるJava」では、継承の使い方を差分プログラミングとデータの分類に整理して解説しています。オブジェクト指向については、その限界を語っています。本文から、Javaでのオブジェクト指向に対する筆者の考え方がわかる段落を引用します。</p><blockquote><p>入門時にいろいろなところで「オブジェクト指向は大切」という話を聞くかもしれませんが、オブジェクト指向はラムダ式などに対応しておらず、またオブジェクト指向ならではの特徴はあまり使われなくなっているため、現実的にはそこまでこだわる必要はなくなっています。Javaで継承を使う際も、差分プログラミングが行いたいのかデータの分類が行いたいのか意識しながら、それぞれの指針に従って実装するのがいいでしょう。</p></blockquote><p>このあたりは著者の1人である<a href="https://nowokay.hatenablog.com/entry/2022/02/28/163436">きしださんのblog記事</a>に詳しく(熱く)思いが語られています。</p><h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><ul><li>「わからないところは飛ばしましょう」<br>「プロになるJava」では、冒頭に「わからないところは飛ばしましょう」と書かれています。</li></ul><blockquote><p>ちょっと読んでわからないなというとき、悩みすぎるくらいであれば先に進む方がいいです。</p></blockquote><p> 本書の随所にこの心構えを伝えてくれる要素があります。これは今後さまざまな情報を調べながら仕事を進めていくときにも必要な心構えではないかなと思います。</p><ul><li>デザイン性<br>水色ベースで初心者にも手に取りやすいデザインな本になっています。また、紙質のせいか、本が開きやすいので、参照しながら実際に手を動かすときに取り組みやすいと感じました。</li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Javaやプログラミング初心者だけでなく、Javaの経験者が読んでも学びのある１冊でした。みなさんもぜひ手に取ってみてください。</p><p>春の入門連載2022、次回（4/25(月)）は澁川喜規さんの「リファクタリング2版読書感想文」となります。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Java/">Java</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      
      <comments>https://future-architect.github.io/articles/20220422a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>技術情報の調べ方</title>
      <link>https://future-architect.github.io/articles/20220421a/</link>
      <guid>https://future-architect.github.io/articles/20220421a/</guid>
      <pubDate>Wed, 20 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220421a/markus-winkler-afW1hht0NSs-unsplash.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;427&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;Photo by &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220421a/markus-winkler-afW1hht0NSs-unsplash.jpg" alt="" width="640" height="427" loading="lazy"><p>Photo by <a href="https://unsplash.com/@markuswinkler?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Markus Winkler</a> on <a href="https://unsplash.com/s/photos/search?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの岸本卓也です。 <a href="/articles/20220418a/">春の入門連載2022</a> の4日目です。</p><p>業務を進める上では日々多くの技術情報を調べる必要がありますが、無策に調べると時間を浪費したりイマイチな解決策を採用してしまう可能性があります。そこで、本稿では普段私がやっている方法を中心に、調べる上でのポイントを紹介します。</p><p>調べる方法として、自分で調べる方法と人に聞く方法があると思いますので、それぞれの場合のポイントを紹介し、最後に調べる上で便利なツールを紹介します。</p><h1 id="自分で調べる場合のポイント"><a href="#自分で調べる場合のポイント" class="headerlink" title="自分で調べる場合のポイント"></a>自分で調べる場合のポイント</h1><p>自分で調べる場合は以下の点が大切です。</p><ol><li><strong>自力解決に制限時間を設け、それまでに解決できなければ上長に相談したり人に聞くといった別の方法に切り替える</strong><br>初めてチャレンジすることは分からないことが多いため、全て自分で調べていてはタスクに割り当てられた時間では足りません。課題によってはそもそも自力解決が不可能なこともあります。業務プロジェクトは期限が決まっているので、スケジュールを優先して適宜手段を切り替えていく必要があります。</li><li><strong>公式情報を当たる</strong><br>昨今は多数の情報を簡単に入手できますがその質は様々なため、適切な情報を選び取る必要があります。品質が高く信頼性に足る情報源としては公式情報が一番なため公式情報は必ず調べます。</li><li><strong>解決の選択肢を1個に絞らない</strong><br>課題の解決方法は複数あることが多いです。したがって最初に見つけた方法をそのまま採用するのではなく、複数の方法を調査、比較、検討して個別事情に適した方法を選択します。</li></ol><p>前述の通り公式情報が最も信頼できますが非公式の情報も参考になることが多いです。そこで、以下では公式/非公式それぞれの情報の使い方を紹介します。</p><h2 id="公式情報"><a href="#公式情報" class="headerlink" title="公式情報"></a>公式情報</h2><p>製品や規格のオーナー自身が公開しているまたはオーナーが認めたコミュニティなどの第三者が公開している情報や、広く認められた団体に登録された情報が公式情報にあたります。公式情報は最も信頼できる情報源のため、常に公式情報は調べるようにすると良いです。</p><p>代表的な公式情報には以下のものがあります。</p><ul><li><strong>公式の原文情報</strong><br>大抵は英語で記述されています。製品マニュアル、ブログ、課題追跡システム、規格・規約 (RFC) などがあります。使い方や仕様を調べる場合はマニュアルや規格・規約を、エラーや課題を調べる場合は製品のGitHub issuesを調べると良いです。</li><li><strong>公式の翻訳情報</strong><br>日本でもよく使われている場合は、製品マニュアルやブログの公式日本語翻訳版が公開されていることがあります。翻訳情報は以下に注意して参考にします。<ul><li>時々情報が古いことがあるため、公開日、更新日が古かったり、違和感がある場合は原文を参照します。</li><li>不自然な日本語のある翻訳情報の場合は機械翻訳の可能性があります。機械翻訳は理解しにくい日本語になっていることや、稀に原文と真逆の意味に翻訳されてしまっていることがあります。読みにくい場合や説明に違和感がある場合は原文を参照します。</li></ul></li><li><strong>製品サポート</strong><br>有償サポートやコミュニティによるサポートが公式に提供されていることがあります。プロプライエタリな製品について調べる場合は公開情報が少ないため積極的に活用する必要があります。調べたいことの期日感や難易度に応じて活用すると良いです。</li><li><strong>ソース</strong><br>プログラムの動きや事実を把握するには最も正確な情報源です。調べたいことの期日感や必要性に応じて調べると良いです。</li></ul><p>なお、製品マニュアルやソースは製品バージョン別の文書を公開していることが多いです。そういった情報は調査したい内容に一致するバージョンの文書を参照することが大切です。</p><h2 id="非公式情報"><a href="#非公式情報" class="headerlink" title="非公式情報"></a>非公式情報</h2><p>先人が残してくれた多種多様な非公式情報も参考になることがよくあります。しかし、一定の品質が担保される公式情報に対して非公式情報の信頼性はまちまちなため、以下のような工夫をして参考にします。</p><ul><li>複数の情報を組み合わせる。</li><li>情報源の信頼性を見極める。</li><li>公開日、更新日を確認し、古過ぎる情報は避ける。</li></ul><p>代表的な非公式情報には以下のものがあります。</p><ul><li><strong>非公式の翻訳情報</strong><br>公式原文情報の非公式翻訳であれば内容の信頼性はある程度期待できますが、情報の鮮度は公式の翻訳情報以上に注意が必要です。</li><li><strong>法人の技術サイトやブログ</strong><br>当ブログのように会社の看板を掲げている情報源はある程度品質担保された情報になっていると期待できます。</li><li><strong>技術系Q&amp;Aサイト</strong><br>Stack Exchangeネットワーク (代表的な物はStack Overflow, Super Userなど) やteratailといったQ&amp;Aサイトはコメント機能や評価機能があることが多く、信憑性のある情報を見つけやすいです。ただし、間違った回答や古い情報が高評価になっていることもあるため裏取りが必要です。</li><li><strong>個人執筆の記事</strong><br>情報が古くなりがちだったり、環境依存な解決策が記述されていることがあるため、注意深く検証と裏取りが必要です。</li><li><strong>ユーザーコミュニティ</strong><br>物によってはユーザーが集まるコミュニティがSlackやDiscordなどにできていることがあります。大抵は英語でのやり取りですが、日本のユーザー会が日本語でやり取りしているチャネルもあるのでログを探したり聞いてみる、という方法もあります。</li></ul><h1 id="人に聞く場合のポイント"><a href="#人に聞く場合のポイント" class="headerlink" title="人に聞く場合のポイント"></a>人に聞く場合のポイント</h1><p>人に聞く場合は相手が自分と齟齬のない共通認識を持ってもらうことが重要です。そのためには正確な内容を不足なく誤解を生まない表現で伝える必要があります。AWSで「 <a href="https://aws.amazon.com/jp/premiumsupport/tech-support-guidelines/">技術的なお問い合わせに関するガイドライン</a> 」という文書が公開されており、以下の部分はAWSに限らず質問する場合の方法としてとても参考になるため、まずはこれを参考にすると良いです。</p><ul><li>解決したい課題を明確にする</li><li>状況を正確に共有する</li><li>経緯を共有する</li></ul><p>このガイドラインに加えて、以下の点に注意すると良いです。</p><ul><li><strong>情報を絞らない</strong><ul><li>エラーメッセージ、ログ、ソースコードなどはパスワードのような機微情報だけマスクして全量共有します。ソースリポジトリ経由で共有する場合は、ブランチ名だけでなくタグ、コミットID、リビジョン番号といったソースのバージョンも伝えると良いです。</li><li>情報を絞ると質問を受けた方では確実に情報不足を感じます。</li></ul></li><li><strong>事実とそれ以外 (自分の考え、仮説など) を混在させない、明確に区別して伝える</strong><br>これらが混在していると認識齟齬を生みやすいです。</li><li><strong>試したこと、調べたこと、考えたことは初手で伝えておく</strong><br>これを試してください→それは既にやっていたけどダメでした、というやり取りは無駄なだけでなく相手の心証を悪くする可能性があります。</li><li><strong>なぜそれを聞きたいのか、背景も伝える</strong><br>背景を伝えることで、より良い別の方法や考え方を提示してもらえる可能性があります。</li><li><strong>解決してもしなくても最終的な結果とお礼を伝える</strong><br>質問した内容とその結果はナレッジや事例としてとても役に立つため、相談相手の糧となったり、同様の課題に直面する他の人の助けとなります。</li></ul><h1 id="Web検索におけるTips"><a href="#Web検索におけるTips" class="headerlink" title="Web検索におけるTips"></a>Web検索におけるTips</h1><p>最もよく使う調査方法はWeb検索だと思いますので、ここではWeb検索する上でのコツを紹介します。</p><ul><li><strong>英語で検索する</strong><br>できれば英語で検索します。特にエラーメッセージを検索する場合は、英文エラーメッセージが出力されるようにして英文で検索した方が良いです。日本語よりも英語の情報の方が圧倒的に多く、適切な情報ににたどり着けるかどうかに大きな差があるためです。ほぼ日本でしか使われていない製品に関する情報のみ日本語で検索します。</li><li><strong>質の低いページを検索結果から除外する</strong><br>昨今は高品質な情報が検索結果上位に表示されるとは限らなくなってしまっています。例えば日本語で検索するとStack Overflow英語版を機械翻訳しただけのWebページが出てくることもよくありますが、こういったWebページは、不自然な日本語で読みにくい、検索結果の一部を占めてしまう、悪質なスクリプトが埋め込まれている危険性があるといった問題があると考えています。<br>そのような低品質なWebページは、指定したドメインは検索結果から排除してくれるブラウザ拡張機能を使ってまとめて消しておくと良いです。</li><li><strong>検索エンジンの絞り込み機能を使う</strong><br>検索エンジンで提供されている、サイト内検索、フレーズ検索、除外検索、期間指定といった機能を使って適宜情報を絞り込みます。例えば、製品バージョン別のマニュアルが公開されている場合は特定バージョンのマニュアルだけ検索されるようにサイト内検索を指定したり、エラーメッセージならフレーズ検索したりします。</li><li><strong>ブラウザに検索ショートカットを追加する</strong><br>ブラウザによってはアドレスバーから直接任意のWebサイト内を検索するショートカットが追加できます (Google Chromeなら <a href="https://support.google.com/chrome/answer/95426">サイト内検索のショートカットを追加</a>)。私はよく調べる製品マニュアルや辞書サイトを追加しており、以下のようにすぐに調べられるようにしています。</li></ul><img src="/images/20220421a/insite-search_example.png" alt="insite-search_example" width="640" height="524" loading="lazy"><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>本稿では既存の情報を調べるときに私が実践している方法を紹介しました。</p><p>課題によっては自力解決は不可能で、ベンダーやステークホルダーを巻き込んで解決策を模索したり想定する解決策に対して公式見解を引き出すといった方法が必要なこともよくあります。視野を広くすると採れる手段が複数見えてくるので、課題解決にあたっては周囲を巻き込んでいくことが大切です。自分で抱え込みすぎないために、最初に書いた制限時間を決めて手段を切り替えていくことを意識すると良いと思います。</p><p>春の入門連載2022の次は永井さんの「プロになるJava」読書感想文です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%96%B0%E4%BA%BA%E5%90%91%E3%81%91/">新人向け</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%88/">トラブルシュート</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88/">ドキュメント</category>
      
      
      <comments>https://future-architect.github.io/articles/20220421a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>強いお兄さん達に囲まれて</title>
      <link>https://future-architect.github.io/articles/20220420a/</link>
      <guid>https://future-architect.github.io/articles/20220420a/</guid>
      <pubDate>Tue, 19 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220420a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;518&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220420a/top.png" alt="" width="800" height="518"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>おはようございます、流通製造グループの戸田聖人です。<br><a href="https://future-architect.github.io/articles/20220418a/">春の入門連載2022</a>の3日目です。</p><p>「新人のときに知っておきたかったこと」として、自分が新人だったときに周りの強いお兄さんたちから学んだことを書いていこうと思います。<br>思考の持ち方の話ばかりなので、ぜひ他の連載記事も読んで技術的な話も見て行ってください！</p><h1 id="お兄さんたちの背中と言葉"><a href="#お兄さんたちの背中と言葉" class="headerlink" title="お兄さんたちの背中と言葉"></a>お兄さんたちの背中と言葉</h1><p>新人研修を終えて、縁あってアサインされたのは少しばかり特殊なプロジェクトで、OJTのリーダーとトレーナーにはプロジェクトのリーダーを統括する立場の人がついてくれました。<br>彼らを見ていて感じたこと、教えてくれたことを書いて行きます。</p><h2 id="言語化し、言語化した言葉を分解して具体的にしていくこと"><a href="#言語化し、言語化した言葉を分解して具体的にしていくこと" class="headerlink" title="言語化し、言語化した言葉を分解して具体的にしていくこと"></a>言語化し、言語化した言葉を分解して具体的にしていくこと</h2><p>アサインされてから他のプロジェクトに移るまで、彼らと話しているときに感じ続けたことは「言葉が重い」ということでした。<br>借りてきた言葉ではなく、彼ら自身の経験と思考からの言葉であることが伝わってきました。</p><p>その言葉の重みの源流は <strong>「言語化し、言語化した言葉を分解して具体的にしていくこと」</strong> であること思いました。</p><p>一つ一つの事柄・事象を言葉として表現し、表現した言葉を分解して要素に分解しそこから得られるものをすべて吸い上げるような思考をしていました。</p><p>非常に単純な例ですが「とあるタスクの期日までに終わらなかった」としましょう、その場合には下記のように分解していけます。</p><ul><li>タスクが期日までに終わらなかった（なぜ終わらなかったのか？）<ul><li>想定していた時間よりも多くの時間が必要だった（なぜ多くの時間が必要だったのか？）<ul><li>自分の能力を超えるタスクだった（どのように自分の能力を超えていたのか？）<ul><li>自分の知らない領域の知識が必要だった（習得を期限内に終わらせるにはどうすればよかったか？）<ul><li>既に知っている人（上司やメンバー）に質問するべきだった（なぜ質問ができなかったか？）<ul><li>話しかけるタイミングが無かった（なぜ話しかけるタイミングがなかったか？）<ul><li> ……</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>この様に具体的な行動な行動や施策になり、それを行う際に気をつけることが出るまで分解します。</p><p>上記は言ってしまえば「PDCAサイクルを回す」や「なぜなぜ分析」をすることそのものです。<br>しかしながら、その動作を自然体として行い、眼の前の事柄を単純な作業としてではなく考え続けた結果として彼らの言葉の重みがあると私は感じました。<br>当たり前のことを当たり前に積み重ねることの重要性を学びました。</p><h2 id="他人を観察し良いと思うことを吸収すること"><a href="#他人を観察し良いと思うことを吸収すること" class="headerlink" title="他人を観察し良いと思うことを吸収すること"></a>他人を観察し良いと思うことを吸収すること</h2><p>これは、面談の際に繰り返し受けたアドバイスです。</p><p>ただ「この人は仕事ができてすごいなぁ……」ではなく、「なぜそう感じるのか」「どこを見て自分がすごいと思ったのか」を観察して考えることです。</p><p>自分1人の行動とその振り返りの積み重ね自体も大切ですが、それでは自身の経験に線形に比例した成長しかできません。<br>しかし、他人が経験し身につけたものを吸収することができれば自分の経験に対して非線形な成長をしていけます。</p><p>チームのメンバーが増えればそれだけ吸収できる他人も増えます、その全員の良いところを観察し吸収すれば飛躍的な成長をしていくことができます。</p><p>今の自分が経験できないことも他人は経験し、それを糧にしています。<br>その他人の経験を吸収し自分が経験する際の基礎とすれば、自分の経験自体もより上質なものに変わっていきます。<br>そうすれば経験の積み重ねの成長もより早くなります。</p><p>今、自分が得られるものをすべて利用する貪欲さを学びました。</p><h2 id="視野を広く持つこと（先入観や前提を疑うこと）"><a href="#視野を広く持つこと（先入観や前提を疑うこと）" class="headerlink" title="視野を広く持つこと（先入観や前提を疑うこと）"></a>視野を広く持つこと（先入観や前提を疑うこと）</h2><p>私がアドバイスしてもらった「他人と目線を合わせること」を例に話します。</p><p>「目線を揃える」と聞くと私は、「話し手である自分が聞き手である相手がわかるように話す。」と言ったイメージを持っていました。<br>しかしながら、それは視野が狭いと教えてもらいました。</p><p>前述した「話し手である自分が聞き手である相手がわかるように話す。」は自分の目線を相手の目線に揃えるために「自分の目線を下げる」行動になります。<br>相手に伝えるということから、自分の目線が上であり相手の目線が低いこと・相手の目線は変えられないことを先入観・前提としてしまっています。</p><p>その先入観を排せば、話し手と聞き手と目線が揃っていないときにできることは次の4つに増えます。</p><ul><li>話し手が聞き手と同じ目線まで下げる</li><li>話し手が情報をインプットし聞き手と同じ目線まで上げる</li><li>聞き手に情報をインプットし目線を上げてもらう</li><li>聞き手に目線が高いことを伝えて目線を下げてもらう</li></ul><p>このアドバイスを受けたときに、自分自身が言葉にしていない先入観にとらわれていることに気付かされました。<br>先入観・意識しない前提がないかを疑うことを学びました。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>私がアサインされた当時を思い返しながらつらつらと書かせていただきました。</p><p>「当たり前のことを書いていたな」「そんな見方もあるんだ」「その考え方はおかしい」等の様々な感想があると思います。<br>私が感じたことを書いてあるので、否定も肯定もあると思います。<br>ただ、この記事をきっかけに皆さん自分自身の言葉と考えを持って、様々な経験を自身の成長の糧としていってほしいと思います。<br>皆さんの成長の礎になることが出来れば幸いです。</p><p>新しい環境に入って、新しい人と関わって、と新しいことだらけで不安になることもあると思います。<br>しかし、裏を返せばそれだけ吸収して成長できることにあふれているとも取れます。<br>ワクワクして楽しんで仕事をして成長していってください！</p><p><a href="https://future-architect.github.io/articles/20220418a/">春の入門連載2022</a>、次回は岸本さんです。お楽しみに！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%96%B0%E4%BA%BA%E5%90%91%E3%81%91/">新人向け</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9/">ビジネス</category>
      
      
      <comments>https://future-architect.github.io/articles/20220420a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>フューチャー製OSSのreguerrに入門しつつ、エラーハンドリングしてPRあげてみた</title>
      <link>https://future-architect.github.io/articles/20220419a/</link>
      <guid>https://future-architect.github.io/articles/20220419a/</guid>
      <pubDate>Mon, 18 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは、TIGの村田です。&lt;br&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは、TIGの村田です。<br><a href="/articles/20220418a/">春の入門祭り連載</a>2日目の本記事では、フューチャー製OSSであるreguerrに入門しようと思います。</p><p>入門の途中でエラーと遭遇したため、途中からエラーハンドリング編に突入しています。入門祭りということで、エラーハンドリングの一例として「こんな風に考えるんだなー」と思いつつ読んでいただければ幸いです。</p><p>また、最終的にはエラーハンドリングを元に、OSSへPRを投げています。そういったOSSとの向き合い方を感じて頂くきっかけになれば良いなと思っています。</p><p>では本編に入っていきます。</p><h1 id="reguerrとは"><a href="#reguerrとは" class="headerlink" title="reguerrとは"></a>reguerrとは</h1><p>reguerrはエラーハンドリング向けのソースコードを自動生成してくれるGo製のライブラリです。フューチャーの案件でも採用実績があり、体系的なエラー定義とそれに伴うハンドリングが重要となってくるエンタープライズシステムでの利用に足る機能をreguerrは有しています。</p><h1 id="入門してみる"><a href="#入門してみる" class="headerlink" title="入門してみる"></a>入門してみる</h1><h2 id="下準備"><a href="#下準備" class="headerlink" title="下準備"></a>下準備</h2><p>まずはフューチャーのGitHubリポジトリ上<a href="https://github.com/future-architect/reguerr">reguerr</a>のreadmeに沿ってコマンドをインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go install github.com/future-architect/reguerr/cmd/reguerr</span><br></pre></td></tr></table></figure><p>以下のようにヘルプコマンドが実行できればインストール成功です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ reguerr -h</span><br><span class="line">Usage:</span><br><span class="line">  reguerr [<span class="built_in">command</span>]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  generate    generate reguerr code</span><br><span class="line">  <span class="built_in">help</span>        Help about any <span class="built_in">command</span></span><br><span class="line">  validate    validate input file</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --<span class="built_in">help</span>   <span class="built_in">help</span> <span class="keyword">for</span> reguerr</span><br><span class="line"></span><br><span class="line">Use <span class="string">&quot;reguerr [command] --help&quot;</span> <span class="keyword">for</span> more information about a <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure><h2 id="自動生成してみる"><a href="#自動生成してみる" class="headerlink" title="自動生成してみる"></a>自動生成してみる</h2><p><code>generate</code> コマンドのヘルプを見てみると、-fでインプットファイルを指定すれば良いことが分かります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ reguerr generate --<span class="built_in">help</span></span><br><span class="line">generate reguerr code</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  reguerr generate [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --defaultErrorLevel string   change default <span class="built_in">log</span> level(Trace,Debug,Info,Warn,Error,Fatal)</span><br><span class="line">      --defaultStatusCode int      change default status code (default -1)</span><br><span class="line">  -f, --file string                input go file</span><br><span class="line">  -h, --<span class="built_in">help</span>                       <span class="built_in">help</span> <span class="keyword">for</span> generate</span><br></pre></td></tr></table></figure><p>readmeに沿って、以下ファイルをexample.goとして作成します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;gitlab.com/future-architect/reguerr&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// No message arguments</span></span><br><span class="line">PermissionDeniedErr = reguerr.New(<span class="string">&quot;1001&quot;</span>, <span class="string">&quot;permission denied&quot;</span>).Build()</span><br><span class="line"></span><br><span class="line"><span class="comment">// One message arguments</span></span><br><span class="line">UpdateConflictErr = reguerr.New(<span class="string">&quot;1002&quot;</span>, <span class="string">&quot;other user updated: key=%s&quot;</span>).Build()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Message arguments with label</span></span><br><span class="line">InvalidInputParameterErr = reguerr.New(<span class="string">&quot;1003&quot;</span>, <span class="string">&quot;invalid input parameter: %v&quot;</span>).</span><br><span class="line">Label(<span class="number">0</span>,<span class="string">&quot;payload&quot;</span>, <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;&#125;).</span><br><span class="line">Build()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>そしてexample.goをインプットファイルにして自動生成を実行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ reguerr generate -f example.go</span><br></pre></td></tr></table></figure><p>example_gen.goとexample_gen.mdの2つのファイルが作成されます。<br>goファイルの中身は以下のようになっています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// generated by reguerr; DO NOT EDIT</span></span><br><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;errors&quot;</span></span><br><span class="line">        <span class="string">&quot;github.com/future-architect/reguerr&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewPermissionDeniedErr is the error indicating [1001] permission denied: $err.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPermissionDeniedErr</span><span class="params">(err <span class="type">error</span>)</span></span> *reguerr.ReguError &#123;</span><br><span class="line">        <span class="keyword">return</span> PermissionDeniedErr.WithError(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IsPermissionDeniedErr indicates if the passed in error is from the error with code [1001].</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsPermissionDeniedErr</span><span class="params">(err <span class="type">error</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> cerr *reguerr.ReguError</span><br><span class="line">        <span class="keyword">if</span> as := errors.As(err, &amp;cerr); as &#123;</span><br><span class="line">                <span class="keyword">if</span> cerr.Code() == PermissionDeniedErr.Code() &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewUpdateConflictErr is the error indicating [1002] other user updated: key=%s: $err.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUpdateConflictErr</span><span class="params">(err <span class="type">error</span>, arg1 <span class="keyword">interface</span>&#123;&#125;)</span></span> *reguerr.ReguError &#123;</span><br><span class="line">        <span class="keyword">return</span> UpdateConflictErr.WithError(err).WithArgs(arg1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IsUpdateConflictErr indicates if the passed in error is from the error with code [1002].</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsUpdateConflictErr</span><span class="params">(err <span class="type">error</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> cerr *reguerr.ReguError</span><br><span class="line">        <span class="keyword">if</span> as := errors.As(err, &amp;cerr); as &#123;</span><br><span class="line">                <span class="keyword">if</span> cerr.Code() == UpdateConflictErr.Code() &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewInvalidInputParameterErr is the error indicating [1003] invalid input parameter: %v: $err.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewInvalidInputParameterErr</span><span class="params">(err <span class="type">error</span>, payload <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span></span> *reguerr.ReguError &#123;</span><br><span class="line">        <span class="keyword">return</span> InvalidInputParameterErr.WithError(err).WithArgs(payload)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IsInvalidInputParameterErr indicates if the passed in error is from the error with code [1003].</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsInvalidInputParameterErr</span><span class="params">(err <span class="type">error</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> cerr *reguerr.ReguError</span><br><span class="line">        <span class="keyword">if</span> as := errors.As(err, &amp;cerr); as &#123;</span><br><span class="line">                <span class="keyword">if</span> cerr.Code() == InvalidInputParameterErr.Code() &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>インプットファイルで定義されたエラーパターンをもとに、それぞれ以下2種の関数が作成されています。</p><ul><li>引数で受け取ったエラーを、定義した任意のエラーへ変換して返してくれる関数</li><li>引数で受け取ったエラーが、定義したエラーとエラー内容が一致しているか判定してくれる関数</li></ul><p>mdファイルは以下のような内容になっています。エラーが自動的に表形式で整理されるので、各種ドキュメンテーションの際に活躍してくれそうです。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Error Code List</span></span><br><span class="line"></span><br><span class="line">| CODE |           NAME           | LOGLEVEL | STATUSCODE |           FORMAT            |</span><br><span class="line">|------|--------------------------|----------|------------|-----------------------------|</span><br><span class="line">| 1001 | PermissionDeniedErr      | Error    |        500 | permission denied           |</span><br><span class="line">| 1002 | UpdateConflictErr        | Error    |        500 | other user updated: key=%s  |</span><br><span class="line">| 1003 | InvalidInputParameterErr | Error    |        500 | invalid input parameter: %v |</span><br></pre></td></tr></table></figure><h2 id="自動生成の引数をいじってみる"><a href="#自動生成の引数をいじってみる" class="headerlink" title="自動生成の引数をいじってみる"></a>自動生成の引数をいじってみる</h2><p><code>generate</code> コマンドの引数には <code>--defaultStatusCode</code> などの可変パラメータが存在していました。次はこちらをいじってみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ reguerr generate -f example.go --defaultStatusCode 300</span><br><span class="line">$ <span class="built_in">cat</span> example_gen.md</span><br><span class="line"><span class="comment"># Error Code List</span></span><br><span class="line"></span><br><span class="line">| CODE |           NAME           | LOGLEVEL | STATUSCODE |           FORMAT            |</span><br><span class="line">|------|--------------------------|----------|------------|-----------------------------|</span><br><span class="line">| 1001 | PermissionDeniedErr      | Error    |        300 | permission denied           |</span><br><span class="line">| 1002 | UpdateConflictErr        | Error    |        300 | other user updated: key=%s  |</span><br><span class="line">| 1003 | InvalidInputParameterErr | Error    |        300 | invalid input parameter: %v |</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ステータスコードが指定通りに変更されていることが確認できました。</p><h2 id="エラーハンドリングしてみる"><a href="#エラーハンドリングしてみる" class="headerlink" title="エラーハンドリングしてみる"></a>エラーハンドリングしてみる</h2><p><code>--defaultErrorLevel</code> をいじってデフォルトのエラーレベルを変更しようとしたのですが、エラーが出てしまいました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ reguerr generate -f example.go --defaultErrorLevel Info</span><br><span class="line">Usage:</span><br><span class="line">  reguerr generate [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --defaultErrorLevel string   change default <span class="built_in">log</span> level(Trace,Debug,Info,Warn,Error,Fatal)</span><br><span class="line">      --defaultStatusCode int      change default status code (default -1)</span><br><span class="line">  -f, --file string                input go file</span><br><span class="line">  -h, --<span class="built_in">help</span>                       <span class="built_in">help</span> <span class="keyword">for</span> generate</span><br><span class="line"></span><br><span class="line">unknown error level</span><br></pre></td></tr></table></figure><p>渡している文字列が悪いのか、渡し方が悪いのか、はたまた元のソースコードにバグが存在しているのか。末尾に出ている <code>unknown error level</code> がエラーログなので、ソースコードを追って原因を探ってみます。</p><p>リポジトリを漁ってみると、<a href="https://github.com/future-architect/reguerr/blob/main/reguerr.go#L47">reguerr.goの47行目</a>に該当のエラー文言がありました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewLevel</span><span class="params">(s <span class="type">string</span>)</span></span> (Level, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> strings.ToLower(s) &#123;</span><br><span class="line"><span class="keyword">case</span> strings.ToLower(Trace.String()):</span><br><span class="line"><span class="keyword">return</span> Trace, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> strings.ToLower(Debug.String()):</span><br><span class="line"><span class="keyword">return</span> Debug, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> strings.ToLower(Info.String()):</span><br><span class="line"><span class="keyword">return</span> Info, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> strings.ToLower(Warn.String()):</span><br><span class="line"><span class="keyword">return</span> Warn, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> strings.ToLower(Error.String()):</span><br><span class="line"><span class="keyword">return</span> Error, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> strings.ToLower(Fatal.String()):</span><br><span class="line"><span class="keyword">return</span> Fatal, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> Trace, errors.New(<span class="string">&quot;unknown error level&quot;</span>)  <span class="comment">//ここが47行目</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>コマンドの実行引数で渡している <code>Info</code> の文字列が <code>NewLevel</code> 関数の引数 <code>s</code> として渡っていくのだろうと思いますが、このswitch文の中でdefaultに突入、該当のエラーが発生しているだろうと推測されます。</p><p>この <code>NewLevel</code> 関数自体も呼び元がいるはずなので探ってみると、<a href="https://github.com/future-architect/reguerr/blob/main/cmd/root.go#L71">cmd配下のroot.go内71行目</a>にて呼び出されていることが確認できました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> opts []gen.Option</span><br><span class="line"><span class="keyword">if</span> errLevel != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">level, err := reguerr.NewLevel(errLevel + <span class="string">&quot;Level&quot;</span>)  <span class="comment">//ここが71行目</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">opts = <span class="built_in">append</span>(opts, gen.DefaultErrorLevel(level))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> statusCode != <span class="number">-1</span> &#123;</span><br><span class="line">opts = <span class="built_in">append</span>(opts, gen.DefaultStatusCode(statusCode))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここで <code>--defaultErrorLevel</code> と <code>--defaultStatusCode</code> にて設定された値を処理しているようです。</p><p>期待する挙動は、先程のswitch文の中で <code>strings.ToLower(s)</code> の値が <code>strings.ToLower(Info.String())</code> の値と一致することなのですが、そうなってないようなので何が起きているかもう少し探ってみます。</p><p><code>NewLevel</code> のタイミングで各々の値が実際どうなっているのか確認できるようにログを仕込んでみました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;[USER]strings.ToLower(s)=%v\n&quot;</span>, strings.ToLower(s))</span><br><span class="line">fmt.Printf(<span class="string">&quot;[USER]strings.ToLower(Info.String())=%v\n&quot;</span>, strings.ToLower(Info.String()))</span><br></pre></td></tr></table></figure><p>これで再度generateを試してみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">reguerr generate -f example.go --defaultErrorLevel Info</span><br><span class="line">[USER]strings.ToLower(s)=infolevel</span><br><span class="line">[USER]strings.ToLower(Info.String())=info</span><br><span class="line">Usage:</span><br><span class="line">  reguerr generate [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --defaultErrorLevel string   change default <span class="built_in">log</span> level(Trace,Debug,Info,Warn,Error,Fatal)</span><br><span class="line">      --defaultStatusCode int      change default status code (default -1)</span><br><span class="line">  -f, --file string                input go file</span><br><span class="line">  -h, --<span class="built_in">help</span>                       <span class="built_in">help</span> <span class="keyword">for</span> generate</span><br><span class="line"></span><br><span class="line">unknown error level</span><br></pre></td></tr></table></figure><p>ログが出ました。まず、コマンド引数として渡している部分は <code>infolevel</code> という文字列になっていました。たしかに <code>NewLevel</code> の呼び元で以下のように呼び出していましたね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reguerr.NewLevel(errLevel + <span class="string">&quot;Level&quot;</span>)</span><br></pre></td></tr></table></figure><p>引数で渡されたエラーレベルの文言に <code>Level</code> という文字列を付け加え、それがlowercaseに変換されるのでプログラム上違和感はないです。</p><p>ただ、マッチ対象文字列は <code>level</code> という文字列を含まないのでこれが原因と考えられます。<br>試しに <code>NewLevel</code> の呼び出し方を以下のように変えてみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// level, err := reguerr.NewLevel(errLevel + &quot;Level&quot;)</span></span><br><span class="line">level, err := reguerr.NewLevel(errLevel)</span><br></pre></td></tr></table></figure><p>以下コマンドで再度generateを実行。エラーなく終了しました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ reguerr generate -f example.go --defaultErrorLevel Info</span><br></pre></td></tr></table></figure><p>生成されたマークダウンファイルを覗いてみると、LOGLEVEL部が想定通り <code>Info</code> に変わっていることを確認できました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> example_gen.md</span><br><span class="line"><span class="comment"># Error Code List</span></span><br><span class="line"></span><br><span class="line">| CODE |           NAME           | LOGLEVEL | STATUSCODE |           FORMAT            |</span><br><span class="line">|------|--------------------------|----------|------------|-----------------------------|</span><br><span class="line">| 1001 | PermissionDeniedErr      | Info     |        500 | permission denied           |</span><br><span class="line">| 1002 | UpdateConflictErr        | Info     |        500 | other user updated: key=%s  |</span><br><span class="line">| 1003 | InvalidInputParameterErr | Info     |        500 | invalid input parameter: %v |</span><br></pre></td></tr></table></figure><p>また、goファイル側ではデフォルトのエラーレベルを変更するinit処理が追加されていることを確認できました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">        reguerr.DefaultErrorLevel = reguerr.Info</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="OSSにPRを投げてみる"><a href="#OSSにPRを投げてみる" class="headerlink" title="OSSにPRを投げてみる"></a>OSSにPRを投げてみる</h2><p>動作確認を元に以下の変更を加え、<a href="https://github.com/future-architect/reguerr/pull/1">プルリクエスト</a>を作成しました。<br><img src="/images/20220419a/スクリーンショット_2022-04-17_21.19.31.png" alt="Pull Request" width="1138" height="174" loading="lazy"></p><p>OSSの挙動でおかしいと思われる点があった際に「このOSS使えねえ！」と騒ぐのではなくissueを起票するかPRをあげよとどこかのエラい人から教わったので、私も例に漏れずそのように行動したいと思います。このPRが少しでも世界平和に繋がることを祈っています。</p><p>などと言いつつ、執筆時点(2022.04)でこの修正が全体を鑑みた上でベストなのかどうかは判断しきれていないのが正直なところです。ただ、そこはコードオーナーのレビューに任せ、修正案のたたき台としてこのPRが機能するといいなという気持ちでPRをあげることにします。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>さて、今回はフューチャー製OSSであるreguerrに入門しつつ、エラーハンドリングしつつOSSへPRをあげるということに入門してみました。</p><p>私のPRがマージされた暁には、本記事で触れているエラーに直面することは無くなるのですが、エラーハンドリングの考え方やOSSとの向き合い方が皆さんの参考になればと思っています。</p><p>春の入門祭り連載、次回は戸田さんです。お楽しみに！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/OSS/">OSS</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%8F%E3%83%B3%E3%83%89%E3%83%AA%E3%83%B3%E3%82%B0/">エラーハンドリング</category>
      
      
      <comments>https://future-architect.github.io/articles/20220419a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>FigmaのOverlayに超入門してみた</title>
      <link>https://future-architect.github.io/articles/20220418b/</link>
      <guid>https://future-architect.github.io/articles/20220418b/</guid>
      <pubDate>Sun, 17 Apr 2022 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20220418a/&quot;&gt;春の入門連載&lt;/a&gt; の1日目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20220418a/">春の入門連載</a> の1日目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="https://www.figma.com/">Figma</a> の入門記事です。Figmaとはデザインをブラウザ上で簡単に共同編集できることが特徴なUIデザインツールです。プレビュー実行すると作成したデザインがクリックなどのイベントで遷移させることができるので、WebサイトやPC・スマホアプリのワイヤーフレームやプロトタイプ作成で使われている場面をよく見ます。Figmaで<a href="https://note.com/smartcamp_design/n/ncc0fb574f2d3">プレゼンテーション用のスライド</a>を作る人も噂では増えているようです。2022年3月16日に日本法人ができ国内でもさらに勢い増しそうな予感がします。</p><ul><li><a href="https://prtimes.jp/main/html/rd/p/000000001.000097201.html">世界でデザインコラボレーションツールをリードする「Figma」が日本へ本格進出｜Figma Japan株式会社のプレスリリース</a></li></ul><p>様々なデザインシステム<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>もFigma上で公開されており、UIの生きた教材となっているようです。（私はまだ眺めていてすごいなーくらいですが）</p><ul><li><a href="https://note.com/rio310mink/n/n4ead8d789621">勉強になったFigmaのデザインシステム8選｜東 莉緒／Rio Azuma｜note</a></li></ul><p>この記事ではFigmaを使って簡単なログインページを作ります。よくネットで見る参考情報では、入力フォームのキーボード入力などインタラクション性にかけるものが多かったので、オーバーレイを利用して動きをつけてアプリイメージを湧きやすくするように工夫します。</p><h1 id="Figmaことはじめ"><a href="#Figmaことはじめ" class="headerlink" title="Figmaことはじめ"></a>Figmaことはじめ</h1><ul><li><a href="https://www.figma.com/">公式サイト</a>で、まずはログインします</li><li>New design fileを選択して開きます</li></ul><p>最初の使い方については<a href="https://zenn.dev/umi_mori/books/d1ea181264ebb3">サクッと始めるウェブデザイン【Figma】</a> がチュートリアルとして楽でした。また、Figmaの使い方はYoutube動画に多く説明されており、むしろそちらの方が情報が多い印象です。</p><p>よりよいデザインで作る場合は、既存のFigma Resources（Figmaで利用できる素材）をうまく活用し、むしろ乗っかっていく方がてっとり早いと思いますが、今回は使い方を学ぶということでなるべく手動で作る領域を多めにとる方針とします。</p><h1 id="つくるもの"><a href="#つくるもの" class="headerlink" title="つくるもの"></a>つくるもの</h1><p>今回作るものですが、簡単なログインフォームを作ります。サンプルで引っかかるテキストの入力フォームがインタラクティブに動くものが無かったので、オーバーレイを利用し、スマートフォンのネイティブキーボードを表示させるインタラクションを作ります。少しでも動くとぐっとアプリのイメージが具体化されると思うからです。</p><img src="/images/20220418b/ログイン概念.png" alt="ログイン概念.png" width="1200" height="982" loading="lazy"><h1 id="流れ"><a href="#流れ" class="headerlink" title="流れ"></a>流れ</h1><p>New design fileで開くと、バナーからフレームを選択します。</p><img src="/images/20220418b/フレーム選択.png" alt="フレーム選択.png" width="559" height="63" loading="lazy"><p>サイドバーにどういったテンプレートを作成するかプルダウンが表示されるので、iPhone 13 Pro Maxを選択します。</p><img src="/images/20220418b/モバイルを選択.png" alt="モバイルを選択.png" width="494" height="266" loading="lazy"><p>オブジェクト挿入し、入力ボックスを作っていきます。</p><img src="/images/20220418b/オブジェクト挿入.png" alt="オブジェクト挿入.png" width="573" height="180" loading="lazy"><p>Cornar radiusで少し端っこを丸くすると入力フォームぽくなります。</p><img src="/images/20220418b/角丸.png" alt="角丸.png" width="356" height="271" loading="lazy"><p>テキストでラベル・入力のダミー値を設定します。固定値です。</p><img src="/images/20220418b/テキスト入力.png" alt="テキスト入力.png" width="592" height="76" loading="lazy"><p>ログインボタンはCornar radiusを強めにするして色を塗りつぶすとそれっぽく見えます。同様にトップページも作っておき、2ページ並べて全体を見ると次のような状態を作ります。</p><img src="/images/20220418b/全体モック.png" alt="全体モック.png" width="1200" height="599" loading="lazy"><h1 id="キーボードを追加"><a href="#キーボードを追加" class="headerlink" title="キーボードを追加"></a>キーボードを追加</h1><p>デフォルトだとキーボードを表示するような仕組みが無いため、素材をもとに作り込む必要があります。Figma上からCommunityが上げている素材を検索します。keyboardなどで検索すると、例えば以下のようなページが見つかると思います。</p><ul><li><a href="https://www.figma.com/community/file/1029525540844129321">https://www.figma.com/community/file/1029525540844129321</a></li></ul><p>Duplicate ボタンを押すと、別タブでFigma編集画面が表示されます。</p><img src="/images/20220418b/複製.png" alt="複製.png" width="1143" height="538" loading="lazy"><p>利用したいリソースをコピーして、編集中のデザインファイルに貼り付けます。</p><img src="/images/20220418b/リソースをコピー.png" alt="リソースをコピー.png" width="1161" height="400" loading="lazy"><p>横幅を調整して合わせます（少しキーボタンが崩れますが、調整は割愛）。</p><img src="/images/20220418b/キーボード貼り付け.png" alt="キーボード貼り付け.png" width="997" height="380" loading="lazy"><p>ここで入力フォームをクリック時にPrototype+Overrayでキーボードが立ち上がるようにします。</p><p>入力ボックスをクリック、PrototypeからInteractionsでOpen overlayを選択。</p><img src="/images/20220418b/prototype.png" alt="prototype.png" width="926" height="506" loading="lazy"><p>先程追加した「キーボード」を選択します。Overlayでは、Bottom centerで被さる位置を画面下部にし、「Close when clicking outside」で外すようにします。AnimationではMove inを選び、進行方向を「↑」をクリックします。</p><img src="/images/20220418b/Overlay設定.png" alt="Overlay設定.png" width="721" height="705" loading="lazy"><p>ログインボタンの遷移はもっとシンプルで、On tap時に Navigate to でトップページを選択します。</p><img src="/images/20220418b/ログインボタンの遷移.png" alt="ログインボタンの遷移.png" width="791" height="439" loading="lazy"><h1 id="デモ"><a href="#デモ" class="headerlink" title="デモ"></a>デモ</h1><p>ナビゲーションバーの「▷」でプレゼンテーションモードで再生できます。</p><p>入力フォームを選択すると、キーボードがぬっと立ち上がるのがわかると思います。キーボード入力はできませんが、このレベルでもアプリの導線があたえる印象がガラッと変わってくると思います。</p><img src="/images/20220418b/figma_demo.gif" alt="figma_demo.gif" width="1200" height="682" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Figmaのオーバーレイの超入門記事でした。コミュニティのみなさんが共有してくださっている素材をうまく組み合わせるとちょっとした時間でワイヤーフレーム・プロトタイプの品質をぐっと向上させることができます。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://www.concentinc.jp/design_research/2021/04/designsystem/">https://www.concentinc.jp/design_research/2021/04/designsystem/</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Design/">Design</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/Figma/">Figma</category>
      
      
      <comments>https://future-architect.github.io/articles/20220418b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>春の入門連載2022を始めます</title>
      <link>https://future-architect.github.io/articles/20220418a/</link>
      <guid>https://future-architect.github.io/articles/20220418a/</guid>
      <pubDate>Sun, 17 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220418a/IMG_0722.jpg&quot; alt=&quot;満開の桜&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;Photo taken by &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220418a/IMG_0722.jpg" alt="満開の桜" loading="lazy"><p>Photo taken by <a href="https://twitter.com/kaedemalu">@kaedemalu</a></p><p>こんにちは。技術ブログ運営の伊藤太斉です。新年度も始まり、数週間が経ち、新人の方も徐々に会社や所属している団体へ慣れてきた頃ではないかと思います。<br>そんなフレッシュな時期に、2022年もフューチャーは春の入門連載を始めます。</p><h2 id="春の入門連載について"><a href="#春の入門連載について" class="headerlink" title="春の入門連載について"></a>春の入門連載について</h2><p>新年度になり、心機一転場を新たにしたり、これまで取り組んだことのないものにトライしてみる、というところで、2020年より開始しています。この連載では、</p><ul><li>新人が参画にする時に知っておいて欲しいこと</li><li>自分が新人の時に知っておきたかったこと</li></ul><p>をテーマに寄稿者を募りました。<br>フューチャーでも新人研修があり、各々研修が終えたら様々な案件に参画していきます。そのときに、この連載に寄稿された内容が一助となればと思い、本日から開催します。</p><h2 id="投稿スケジュール・タイトル"><a href="#投稿スケジュール・タイトル" class="headerlink" title="投稿スケジュール・タイトル"></a>投稿スケジュール・タイトル</h2><p>本連載は以下のスケジュールで進めます。新卒の方のみならず、新しく学ぶきっかけにしていただければと思います。</p><div class="scroll"><table><thead><tr><th>日付</th><th>執筆者</th><th>タイトル</th></tr></thead><tbody><tr><td>4/18</td><td>真野隼記</td><td><a href="/articles/20220418b/">Figma入門</a></td></tr><tr><td>4/19</td><td>村田靖拓</td><td><a href="/articles/20220419a/">フューチャー発のOSS入門</a></td></tr><tr><td>4/20</td><td>戸田聖人</td><td><a href="/articles/20220420a/">強いお兄さん達に囲まれて</a></td></tr><tr><td>4/21</td><td>岸本卓也</td><td><a href="/articles/20220421a/">技術情報の調べ方</a></td></tr><tr><td>4/22</td><td>永井優斗</td><td><a href="/articles/20220422a/">「プロになるJava」読書感想文</a></td></tr><tr><td>4/25</td><td>澁川喜規</td><td><a href="/articles/20220425a/">リファクタリング2版読書感想文</a></td></tr><tr><td>4/26</td><td>原木翔</td><td><a href="/articles/20220426a/">ソフトウェアのバージョンと開発スタイルの関係について</a></td></tr><tr><td>4/27</td><td>伊藤太斉</td><td><a href="/articles/20220427a/">エンジニアのロールを切り替えた時の話</a></td></tr></tbody></table></div><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>寄稿者も今回が初だったり、記事の内容を初めて触る方もいるので、是非読んでいただき、シェアしていただけると嬉しいです！</p><ul><li><a href="/articles/20200529/">2020年の連載記事</a></li><li><a href="/articles/20210414a/">2021年の連載記事</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%98%A5%E3%81%AE%E5%85%A5%E9%96%80%E7%A5%AD%E3%82%8A/">春の入門祭り</category>
      
      
      <comments>https://future-architect.github.io/articles/20220418a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Partner Summit Japan 2022に登壇してみた</title>
      <link>https://future-architect.github.io/articles/20220415b/</link>
      <guid>https://future-architect.github.io/articles/20220415b/</guid>
      <pubDate>Thu, 14 Apr 2022 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220415b/top.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;447&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220415b/top.png" alt="" width="1200" height="447" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>2022/3/16（水）に開催された<a href="https://aws.amazon.com/jp/events/PartnerSummitJapan/">AWS Partner Summit Japan 2022</a> に縁あって登壇の機会をいただきました。オンラインでしたが、撮影は目黒セントラルスクエア。TV局かなと思うほどの撮影機材や、明らかにプロフェッショナルなスタッフの皆さまに囲まれての発表だったので非常によい刺激をいただけました。終わった後の達成感が凄く良かったです！</p><h1 id="AWS-Partner-Summitとは"><a href="#AWS-Partner-Summitとは" class="headerlink" title="AWS Partner Summitとは"></a>AWS Partner Summitとは</h1><p>2022年は3月16日～17日の2日開催で、AWSパートナーネットワーク(APN)に参加しているかつ、NDA締結済み企業が参加できる、年に1度の大型イベントです。完全なオープンでないはずですが、参加者は数千人オーダーとのこと。人気の秘密はセッションのタイムテーブルを読むと分かる気がします。興味をひかれる気合の入ったセッションが多数発表されていました。</p><p>フューチャーとしてはAWS Partner Summitに登壇したのは私が最初だったようで、ちょっと会社に爪痕を残せたようで嬉しいです。来年以降も良い事例などを作っていきたいなと思いました。</p><h1 id="登壇内容"><a href="#登壇内容" class="headerlink" title="登壇内容"></a>登壇内容</h1><p>3/16のなんと基調講演での枠にて登壇時間は7分。<a href="https://aws.amazon.com/jp/solutions/case-studies/nicigas-future-architect/">AWS 導入事例：日本瓦斯株式会社 | AWS</a> で触れている内容について説明しました。</p><p>登壇の様子を同僚に撮影してもらいました。当日は視聴者多数で接続優先のため画質が落とされていたなどの裏事情があり静止画で見ると少し粗いです。<br>スライドですが会社説明はともかく、AWSパートナーシップについても触れるのはこのイベントならではだなと思いました。笑</p><img src="/images/20220415b/会社紹介.png" alt="会社紹介" width="1200" height="635" loading="lazy"><p>目的・ミッション・採用技術などはかなり面白く話せることが無限にあるのですが、この場ではスライドの紹介だけにさせてください。30分くらいは余裕で話せると思うのですが…、時間が短い！</p><img src="/images/20220415b/プロジェクトミッション.png" alt="プロジェクトミッション" width="1200" height="653" loading="lazy"><img src="/images/20220415b/アーキテクチャ.png" alt="アーキテクチャ" width="1200" height="510" loading="lazy"><p>短い時間とはいえ、企業のデジタルトランスフォーメーション化の文脈で、かなり野心的なプロジェクトであったことは伝えられたのはないでしょうか。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>AWSの中橋さんが丁寧に色々サポートしてくださって助かりました。社内だと吉田さんとか富山さんに頼り切りました。会場の様子ですが、こんな感じでした。登壇時のみノーマスクで、待機時間などはディスタンスを保ちつつアクリル板とかも用意されていたので安心でした。ページ送りとかは左手に持っているスイッチみたいなので行い、写真にはちょっとしか写ってないですが、前面のディスプレイを見ながら話せるのでとても楽でした。</p><img src="/images/20220415b/会場の様子.jpeg" alt="会場の様子" width="1200" height="900" loading="lazy"><p>繰り返しになりますが、貴重な機会をいただけて感謝しています。自分自身としてもこうしたDX案件が大好きなので、楽しみながらさらにステージを上げていきたいと思ってます。最後まで読んでいただき、ありがとうございました！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/IoT/">IoT</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E4%BA%8B%E4%BE%8B%E7%B4%B9%E4%BB%8B/">事例紹介</category>
      
      
      <comments>https://future-architect.github.io/articles/20220415b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SvelteKitのデフォルトプロジェクトから学ぶ</title>
      <link>https://future-architect.github.io/articles/20220415a/</link>
      <guid>https://future-architect.github.io/articles/20220415a/</guid>
      <pubDate>Thu, 14 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;ウェブアプリケーションフレームワークとして最近注目度が少しずつ上がっているのがSvelteです。以前、Svelteをちょびっとサンプルを触ってみた感じ、コードの雰囲気は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>ウェブアプリケーションフレームワークとして最近注目度が少しずつ上がっているのがSvelteです。以前、Svelteをちょびっとサンプルを触ってみた感じ、コードの雰囲気は<a href="https://vuejs.org/api/sfc-script-setup.html"> <code>&lt;script setup&gt;</code> 版のVue 3</a>っぽいなー、という感じです。あとはプロパティ入力のあるコンポーネントでHTMLを生成するという基本構成はReactもAngularもみんなそうなので、今時のウェブフロントエンドのフレームワークを触ったことがあれば難しくはない気がします。</p><p>1コンポーネントでおさまる範囲では<a href="https://future-architect.github.io/articles/20220207a/">ちょっと前に</a>かんたんなアプリの試作をしてみました（毎週何回も使ってるので手間の割に活躍してます）が、じゃあ、一本分のアプリを作るときはどうなんだ、ということでSvelteKitでプロジェクトを新規で作ってみたけど、いろいろな未知の要素がでてきて、これはどうなんだ？というのをドキュメントから探す、という学び方もまあ悪くないな、ということでブログにしてみました。</p><p>ReactにNext.jsがあれば、VueにはNuxt.js、SvelteにはSvelteKitがあります。フロントエンドのフレームワークを拡張して、初回レンダリングをサーバーで行うサーバーサイドレンダリングなどの自分で環境を作ると不便なものが組み込まれていて、さらにサーバー側のAPI実装も同じフレームワーク内でサポートするなどの付加機能も提供してくれているものです。サーバーがNode.jsや、Node.jsベースのPaaSを使えば、JavaScriptだけでフロントもサーバーも完結します。</p><p>プロジェクトは次のコマンドで作っていきます。最初のコマンドでいろいろ聞かれるので、好きな条件を入れていきます。デモプロジェクトはYESにするといろいろなコードが生成されます。今回はこれを見ていきます。それ以外は全部YESにしてみました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ npm init svelte@next my-app</span><br><span class="line"></span><br><span class="line">Welcome to SvelteKit!</span><br><span class="line"></span><br><span class="line">This is beta software; expect bugs and missing features.</span><br><span class="line"></span><br><span class="line">Problems? Open an issue on https://github.com/sveltejs/kit/issues <span class="keyword">if</span> none exists already.</span><br><span class="line"></span><br><span class="line">✔ Which Svelte app template? › SvelteKit demo app</span><br><span class="line">✔ Use TypeScript? … No / Yes</span><br><span class="line">✔ Add ESLint <span class="keyword">for</span> code linting? … No / Yes</span><br><span class="line">✔ Add Prettier <span class="keyword">for</span> code formatting? … No / Yes</span><br><span class="line">✔ Add Playwright <span class="keyword">for</span> browser testing? … No / Yes</span><br><span class="line"></span><br><span class="line">(以下略)</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> my-app</span><br><span class="line">$ npm install</span><br><span class="line">$ npm run dev -- --open</span><br></pre></td></tr></table></figure><h1 id="サンプルプロジェクトのページ構成"><a href="#サンプルプロジェクトのページ構成" class="headerlink" title="サンプルプロジェクトのページ構成"></a>サンプルプロジェクトのページ構成</h1><p>サンプルプロジェクトは3つのページがあります。静的なAbout以外に、よくあるカウンターと、ToDoがあります。カウンターはSvelte単体でも実現できるような内容で、ToDoはウェブサービスアクセスを伴うサンプルです。</p><img src="/images/20220415a/スクリーンショット_2022-04-08_9.57.03.png" alt="カウンターのサンプル" width="1200" height="856" loading="lazy"><img src="/images/20220415a/スクリーンショット_2022-04-08_9.58.41.png" alt="TODOのサンプル" width="1200" height="856" loading="lazy"><p>ページ周りのコードを抜き出してきたのがこれです。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── src</span><br><span class="line">│   ├── app.css</span><br><span class="line">│   ├── app.html</span><br><span class="line">│   └── routes</span><br><span class="line">│       ├── __layout.svelte</span><br><span class="line">│       ├── about.svelte</span><br><span class="line">│       ├── index.svelte</span><br><span class="line">│       └── todos</span><br><span class="line">│           ├── _api.ts</span><br><span class="line">│           ├── index.svelte</span><br><span class="line">│           └── index.ts</span><br></pre></td></tr></table></figure><p>ぱっと見て想像できるルールはこんな感じです。</p><h2 id="src-routesの階層がURLになりそう"><a href="#src-routesの階層がURLになりそう" class="headerlink" title="src/routesの階層がURLになりそう"></a><code>src/routes</code>の階層がURLになりそう</h2><p>Next.jsの<code>pages</code>みたいな感じのようです。<a href="https://kit.svelte.dev/docs/routing">Routing</a>ページを見て答え合わせすると、やはりこのファイルシステムがそのままURLになるよ、と書いてあります。便利ですよねこれ。</p><h2 id="src-routes-layout-svelteも共通部分を書きそう"><a href="#src-routes-layout-svelteも共通部分を書きそう" class="headerlink" title="src/routes/__layout.svelteも共通部分を書きそう"></a><code>src/routes/__layout.svelte</code>も共通部分を書きそう</h2><p>おそらくこれはきっとどのページでも今日で使われるヘッダーとかフッターとかを書きそうで、.svelteだからきっと動的なコンポーネントも使えそうな気がします。</p><p><a href="https://kit.svelte.dev/docs/layouts">Layouts</a>を見て答え合わせをすると、確かにこのようです。書くページのコンテンツは、このコンポーネントの<code>&lt;slot&gt;</code>の中に表示されるとのこと。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></table></figure><p>複数階層にしてネストしてレイアウトを設定して使ったりもできて、同じフォルダで同じブレッドクラムを表示させたりというのもできるみたいですね。</p><p>面白かったのは、名前付きレイアウトで、<code>src/routes/__layout-foo.svelte</code>という名前のレイアウトを作っておいて、実際に作られるページのファイル名が<code>src/routes/my-special-page@foo.svelte</code>だとすると、この特別な<code>foo</code>レイアウトが使われるとのこと。複雑な継承とかもできるようです。</p><p>あと、このレイアウトのページにあった注目内容は<code>__error.svlete</code>ですね。これでページが見つからなかったときのエラーページが設定できるようです。</p><p>階層構造のサポートはSvelteのRouter機能のポイントらしく、レイアウトとかエラーページとかは特定のフォルダ内でのみに適用とかができるみたいです。</p><h2 id="app-htmlが最終的に作られるアプリケーションの枠組みっぽい"><a href="#app-htmlが最終的に作られるアプリケーションの枠組みっぽい" class="headerlink" title="app.htmlが最終的に作られるアプリケーションの枠組みっぽい"></a>app.htmlが最終的に作られるアプリケーションの枠組みっぽい</h2><p>__layout.svelteと違い、きっと静的な共通要素、例えばmetaタグとかはここに書くんだろうと思われます。しかし、これに関する直接的な解説はドキュメントにはありません。ドキュメントの中に書かれているapp.htmlに関する要素は、2つだけです。</p><ul><li><a href="https://kit.svelte.dev/docs/configuration">Configure</a>で、src/app.htmlの名前を書き換えるコンフィグがあるよ</li><li><a href="https://kit.svelte.dev/docs/migrating#project-files-src-template-html">SvelteKitの前身のSapperから乗り換えるとき</a>はapp/template.htmlからsrc/app.htmlに書き換えて、タグも置き換えたり、不要になったタグは削除してね。</li></ul><p><a href="https://sapper.svelte.dev/docs#src_template_html">Sapper側のドキュメント</a>と合わせて読めば意味が理解できますね:</p><blockquote><p>サーバーから返されるレスポンスのテンプレートとして使われるファイル。Svelteは次のタグをそれぞれの内容に置き換える:</p><ul><li><code>%svelte.head%</code> — ページ固有の<code>&lt;title&gt;</code>などの<code>&lt;head&gt;</code>に置かれるHTMLに置き換えられる</li><li><code>%svelte.body%</code> — SvelteがレンダリングするボディのHTMLに置き換えられる</li></ul></blockquote><h1 id="API周り"><a href="#API周り" class="headerlink" title="API周り"></a>API周り</h1><p>SvelteじゃなくてSvelteKitを選びたいニーズとしては主にサーバーもTypeScriptやJavaScriptも書きたいというのがあると思います。それ以外にもすでに説明したrouter周りで楽がしたい、静的コンテンツ生成に使いたい、というのもあると思いますが、ここではサーバーAPI提供側のコードを見ていきます。</p><p>API周りは以下のコードのようですね。src/routes/todos/index.svelteは<code>/todos</code>でアクセスしたときに表示されるページのコンテンツなので、<code>index.ts</code>がハンドラー定義のファイルみたいですね。<code>_api.ts</code>は名前からして共通コード置き場でrouterからは無視されそうな雰囲気。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── src</span><br><span class="line">│   └── routes</span><br><span class="line">│       └── todos</span><br><span class="line">│           ├── _api.ts</span><br><span class="line">│           ├── index.svelte</span><br><span class="line">│           └── index.ts</span><br></pre></td></tr></table></figure><p>Next.jsはフォルダ構成をガッチリ決めることでAPIとHTMLを分けていましたが、ミックスできるのは便利ですね。でもこれだと、<code>/todos</code>でHTMLを要求するアクセスされたときと、APIのGETの区別が大変そうですね。ドキュメントを見ていきます。</p><p><a href="https://kit.svelte.dev/docs/routing#endpoints">Endpoints</a>のドキュメントによると、<code>.ts</code>でエンドポイントにできることが書かれていますね。その中で、<code>get</code>とか<code>post</code>という名前で関数を作ってあげるとエンドポイントになるとのこと。それ以外にも、post, put, patch, del(deleteは予約語なのでdel)に対応するとのことです。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">get</span>: <span class="title class_">RequestHandler</span> = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ただ、これだとWebページのコンテンツとAPIの区別がつかないので、明治的に<code>accept: application/json</code>をリクエストにつけるか、<code>__data.json</code>というのをリクエスト側で付与することでJSONのAPIの方を明示的に要求するらしい。確かに、サンプルコードの動きを見ると、<code>__data.json</code>がついていますね。</p><img src="/images/20220415a/スクリーンショット_2022-04-10_9.40.11.png" alt="API" width="1200" height="412" loading="lazy"><p>アンダースコアで除外できることは<a href="https://kit.svelte.dev/docs/routing#private-modules">プライベートモジュール</a>で説明されていました。ピリオドもプライベート扱い（<code>.well-known</code>を除く)とのこと。</p><h2 id="メソッドオーバーライド"><a href="#メソッドオーバーライド" class="headerlink" title="メソッドオーバーライド"></a>メソッドオーバーライド</h2><p>動かしてみて、おっと思ったのが、<code>_method=DELETE</code>というところですね。HTTP的にはメソッドはたくさんありますが、JavaScriptを使わずにHTTPのフォームを使って送れるのはGETとPOSTのみです。そこで、POSTにいろいろなメソッドも振る舞わせるというメソッドオーバーライドというのがあります。</p><img src="/images/20220415a/スクリーンショット_2022-04-10_9.50.19.png" alt="メソッドオーバーライド" width="1200" height="250" loading="lazy"><p>設定を見たときに、メソッドオーバーライドという項目があるのに気づきました。</p><figure class="highlight js"><figcaption><span>svelte.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line"><span class="attr">preprocess</span>: <span class="title function_">preprocess</span>(),</span><br><span class="line"><span class="attr">kit</span>: &#123;</span><br><span class="line"><span class="attr">adapter</span>: <span class="title function_">adapter</span>(),</span><br><span class="line"><span class="attr">methodOverride</span>: &#123;</span><br><span class="line"><span class="attr">allowed</span>: [<span class="string">&#x27;PATCH&#x27;</span>, <span class="string">&#x27;DELETE&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://kit.svelte.dev/docs/routing#endpoints-http-method-overrides">メソッドオーバーライド</a>のドキュメントにいろいろ書かれています。フロント側でがんばらなくてもできるようにする配慮があるのはいいですね。</p><h2 id="フォームのパース"><a href="#フォームのパース" class="headerlink" title="フォームのパース"></a>フォームのパース</h2><p>サンプルを見ると、<code>request</code>のメソッドを使うことで、フロントから渡されるリクエストを処理できるみたいですね。</p><figure class="highlight ts"><figcaption><span>src/routes/todos/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">post</span>: <span class="title class_">RequestHandler</span> = <span class="keyword">async</span> (&#123; request, locals &#125;) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> form = <span class="keyword">await</span> request.<span class="title function_">formData</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">api</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">`todos/<span class="subst">$&#123;locals.userid&#125;</span>`</span>, &#123;</span><br><span class="line"><span class="attr">text</span>: form.<span class="title function_">get</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>このリクエストオブジェクトは<a href="https://kit.svelte.dev/docs/routing#endpoints-body-parsing">ボディのパースのドキュメント</a>のリンクを見る限り、<a href="https://developer.mozilla.org/en-US/docs/Web/API/Request">ブラウザのAPIと同じ</a>っぽい。</p><h2 id="サンプルのAPI実装のバックエンドの中身"><a href="#サンプルのAPI実装のバックエンドの中身" class="headerlink" title="サンプルのAPI実装のバックエンドの中身"></a>サンプルのAPI実装のバックエンドの中身</h2><p>サーバーコード側の実装を見てみたら、fetchでsvelteが提供しているサーバーにリクエストを飛ばしているっぽいですね。サンプル用にサーバー維持するのすごい。たしかにストレージ周りだとSQLにしてもMongoDBなどにしても、SvelteKitの書き方を伝えたい、というニーズ以上のさまざまな前提知識が発生しがちなので、この割り切りは理解できます。</p><figure class="highlight ts"><figcaption><span>/src/routes/todos/_api.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> base = <span class="string">&#x27;https://api.svelte.dev&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">RequestHandler</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@sveltejs/kit&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">api</span>(<span class="params">method: <span class="built_in">string</span>, resource: <span class="built_in">string</span>, data?: Record&lt;<span class="built_in">string</span>, <span class="built_in">unknown</span>&gt;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">`<span class="subst">$&#123;base&#125;</span>/<span class="subst">$&#123;resource&#125;</span>`</span>, &#123;</span><br><span class="line">method,</span><br><span class="line"><span class="attr">headers</span>: &#123;</span><br><span class="line"><span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">body</span>: data &amp;&amp; <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://dbdb.io/db/nedb">NeDB</a>みたいなのでもいいのに、と思ったら、NeDBはもうメンテナンス中止していたんですね。残念。</p><h1 id="フック"><a href="#フック" class="headerlink" title="フック"></a>フック</h1><p>ソースフォルダの中にhooks.tsという気になるファイルがありました。中を見ると、クッキーからユーザーIDを取り出し、なければUUIDを生成して<code>event.locals.userid</code>に格納しています。ウェブアプリケーションフレームワークに頻出するミドルウェアと近そうです。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">├── src</span><br><span class="line">│   └── hooks.ts</span><br></pre></td></tr></table></figure><p><a href="https://kit.svelte.dev/docs/hooks">フックのドキュメント</a>を見ると、このフックのようにサーバーへのリクエストをちょっと加工する以外に、カスタムコンテンツをフックで返してしまうとか、外部サーバーへのリクエストを加工するなど、いろいろなことができるみたいです。</p><figure class="highlight ts"><figcaption><span>src/hooks.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">response.<span class="property">headers</span>.<span class="title function_">set</span>(</span><br><span class="line"><span class="string">&#x27;set-cookie&#x27;</span>,</span><br><span class="line">cookie.<span class="title function_">serialize</span>(<span class="string">&#x27;userid&#x27;</span>, event.<span class="property">locals</span>.<span class="property">userid</span>, &#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line"><span class="attr">httpOnly</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>クッキーへの書き込みは、ヘッダーに直接入れていますが、<a href="https://kit.svelte.dev/docs/routing#endpoints-setting-cookies">ドキュメント</a>でもそうなっていますね。面白いですね。</p><h1 id="それ以外の要素"><a href="#それ以外の要素" class="headerlink" title="それ以外の要素"></a>それ以外の要素</h1><p>生成されたコードにはないがドキュメントにある項目は以下の通りです。あとはこのあたりをピックアップして読んでみたら、SvelteKitの機能をざっと掴むには良いかなと思いました。</p><ul><li><a href="https://kit.svelte.dev/docs/routing#advanced-routing">パスで渡すパラメータ</a></li><li><a href="https://kit.svelte.dev/docs/loading">ページ生成前のコンテンツのロード</a></li><li><a href="https://kit.svelte.dev/docs/modules">モジュール</a></li></ul><p>あとは、デプロイ時の環境ごとの違いは<a href="https://kit.svelte.dev/docs/adapters">アダプター</a>というものにまとめられているので、何かしらのアダプターについては学ぶことになるかと思います。</p><h1 id="補足-Playwright"><a href="#補足-Playwright" class="headerlink" title="(補足)Playwright"></a>(補足)Playwright</h1><p>SvelteKitのプロジェクト作成ではJestとかVitestのような普通のテスティングフレームワークではなくて、E2EのPlaywrightの生成のみに対応しています。</p><p>ですが、TypeScriptを使うよオプションと、Playwrightを同時に有効にするとエラーになってしまいました。<a href="https://playwright.dev/docs/test-typescript">Playwrightのマニュアル</a>に従って事前にビルドしてからテストを実行するようにしたら修正できました。</p><figure class="highlight json"><figcaption><span>tests/tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2015&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Node&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../tests-out&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;pretest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc --incremental -p tests/tsconfig.json&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;playwright test -c tests-out&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>TypeScript周りはいろいろ<a href="https://github.com/sveltejs/kit/issues?q=is:issue+playwright+is:open">Issueがどんどん修正されている</a>ので、もうちょっと新しいバージョンなら問題なくなるんじゃないかと思います。<a href="https://github.com/sveltejs/kit/issues/4143">Issue</a>を見ると、PlaywrightじゃないUnit Testについて はvitest側のsveltekit対応の改善待ちステータスのようです。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>SvelteKitを学ぼうと思ったけど、チュートリアル的なコンテンツがなく、上からドキュメント読むのもいいけど手っ取り早く概要を掴もうと思って、デフォルトプロジェクトのコードリーディングなどをしつつ、ドキュメントをつまみ食いするスタイルで学習してみました。</p><p>あと、書き終わってから気づいたのですが、<a href="https://kit.svelte.jp/">日本語訳されたドキュメント</a>もありましたので、日本語なら早く読めるぞという方はドキュメントを先に読むのでもいいかもしれません。</p><p>全体的に、コードを見ると動きが想像できそうなものが多いというか、Next.jsとか類似ソリューションに近いというか、あまり奇をてらったところがない感じがします。あと、クッキーの設定だったり、メソッドオーバーライドだったり、サーバーで使われるReqestがブラウザのそれと同じだったり、既存のウェブ周りの情報がある人には慣れ親しんでいる方法を選択してくれている感じは気に入りました。</p><p>テスト周りの対応を見るとまだまだ若い感じが伝わってきますし、今までReact/Vueでやってきたようなことをいきなり全部実現というのは少し手間暇があるかもしれませんが、活発に改善されていっているので、SvelteKitをじっくり触りながら変化を感じるのも楽しいと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Svelte/">Svelte</category>
      
      <category domain="https://future-architect.github.io/tags/SvelteKit/">SvelteKit</category>
      
      
      <comments>https://future-architect.github.io/articles/20220415a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>WordPressの脆弱性への攻撃とセキュリティ対策の実施</title>
      <link>https://future-architect.github.io/articles/20220414a/</link>
      <guid>https://future-architect.github.io/articles/20220414a/</guid>
      <pubDate>Wed, 13 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;2021年7月入社の八田です。現在はCSIG（Cyber Security Innovation</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>2021年7月入社の八田です。現在はCSIG（Cyber Security Innovation Group）に所属しています。CSIGは、リスクアセスメントやセキュリティ対策支援を行うコンサルティングチームと、FutureVulsの開発を行っているチームがあり、私は前者のコンサルティングチームに所属しています。今回はIT未経験で入社した私が技術面のキャッチアップとして取り組んだ、脆弱性への攻撃および対策方法を共有したいと思います。</p><p>本記事で、読者の皆さんのセキュリティ分野への関心・理解を深められたり、「文系・IT未経験でも入社半年でこのレベルのことができるようになるのだ！」ということを伝えられたら嬉しいです。</p><h1 id="WordPressプラグインの脆弱性CVE-2020-25213"><a href="#WordPressプラグインの脆弱性CVE-2020-25213" class="headerlink" title="WordPressプラグインの脆弱性CVE-2020-25213"></a>WordPressプラグインの脆弱性CVE-2020-25213</h1><p>今回扱ったのは、WordPressのプラグインFile Managerの脆弱性で、CVE-2020-25213が割り当てられているものです。</p><p>ご存知の方も多いかもしれませんが、WordPressというのは簡単にホームページが作成できるCMS（Contents Management System）であり、File ManagerはWordPress上のフォルダやファイルの管理ができるプラグインのことです。その利便性が故に、File Managerは非常に人気のプラグインでダウンロードは70万を超えているようです。</p><p>そんな大人気のプラグインFile Managerですが、2020年に重大な脆弱性が発覚しました。<br>この脆弱性を利用することで、認証不要でファイルのアップロードができます。WebShellをアップロードすることで、任意のコードを実行することができます。</p><p>この脆弱性を利用すれば、Webサーバからの情報漏洩やサイトの改ざんが可能です。また、具体的な方法は後述しますが攻撃が非常に容易であるのもこの脆弱性の特徴で、誰でも利用できてしまいます。（今回のキャッチアップでこの脆弱性を選んだのも攻撃が容易だったというのが理由です。）</p><p>また、米国のサイバーセキュリティやインフラの安全に関わるアドバイザリーを行う政府機関のCISA（Cybersecurity and Infrastructure Security Agency）が発表している脆弱性リスト「Known Exploited Vulnerabilities Catalog（KEV Catalog）」にも登録されていることから、悪用される危険性が非常に高い脆弱性ということがわかります。</p><h1 id="攻撃方法"><a href="#攻撃方法" class="headerlink" title="攻撃方法"></a>攻撃方法</h1><p>今回確認したPoCは、攻撃対象のWordPressサーバとは別のホストから攻撃を仕掛け、攻撃対象のWordPressサーバに格納されたテストファイルの削除や新たにファイル配置を行うというものです。</p><p>攻撃対象サーバ構築では、以下のものを使用しました。</p><p><strong>環境情報（攻撃対象サーバ）</strong></p><ul><li>CentOS 7.9</li><li>Apache 2.4.6</li><li>MariaDB 10.6</li><li>PHP 8.0</li><li>WordPress 5.9.1</li><li>File Manager 6.0</li></ul><p>一般的な構築手順のためインストール作業の詳細は省略しますが、以下の流れで進めました。</p><ol><li>Apache、MariaDB、PHPインストール</li><li>WordPressインストール</li><li>File Managerインストール</li><li>テストファイル（testfile）作成</li></ol><p><strong>環境情報（攻撃クライアント）</strong></p><ul><li>CentOS 7.9（攻撃対象サーバとは別に用意）</li><li>Python 2.7</li><li>pip 20.3.4</li><li>requests 2.6.0</li></ul><p>検証に使うPoCは<a href="https://github.com/w4fz5uck5/wp-file-manager-0day/blob/master/elFinder.py">こちら</a>で公開されているコードを使用しました。</p><p>このPoCは、攻撃対象サーバのconnector.minimal.phpというファイルに対してPOSTし、connector.minimal.phpを介してelFinder（サーバ内のファイルを扱うもの）インスタンスを呼び出すことで、x.phpというWebShellを配置します。そして配置したx.phpに対して任意のコマンドを送ります。<br><img src="/images/20220414a/攻撃仕組み4_2022-04-08_085527.png" alt="攻撃仕組み4_2022-04-08_085527.png" width="934" height="631" loading="lazy"></p><p>したがって、今回のFile Managerの脆弱性はconnector.minimal.phpが外部から実行できてしまうことに原因があると言えるでしょう。</p><h2 id="攻撃実行"><a href="#攻撃実行" class="headerlink" title="攻撃実行"></a>攻撃実行</h2><p>攻撃対象サーバに対して攻撃をしていきます。<br><code>./vul.py http //192.168.10.6/wordpress</code><br>まず、攻撃クライアント構築で作成したファイルを実行します。これにより、攻撃側が用意したPHPファイルが攻撃対象サーバへ格納され、任意のコマンド実行が可能な状態となります。</p><p>その後、任意のコマンドを入力できるようになるので、攻撃対象サーバ内で実行させたい任意のコマンドを入力します。</p><p>今回実行したコマンドは順に、</p><ol><li>既存ファイルの削除<br><code>rm -f /var/www/html/testfile</code></li><li>ファイルの配置<br><code>touch /var/www/html/wordpress/testfile2</code></li><li>ファイルへの書き込み<br><code>echo Hello &gt;&gt; /var/www/html/wordpress/testfile2</code></li></ol><p>の3つです。</p><p>※上の黒いウィンドウが攻撃対象（192.168.10.6）、下の青いウィンドウが攻撃クライアントです。<br><img src="/images/20220414a/攻撃実行タイトルフレーム付_0408.gif" alt="攻撃実行タイトルフレーム付_0408" width="959" height="984" loading="lazy"></p><p>このように、非常に簡単にWordPressサーバ内のファイル配置や削除、変更が可能であることがわかります。<br>これを利用すれば、WordPress関連の設定ファイルの改ざんや悪意のあるスクリプトが記載されたファイルをアップロードするといった不正が行われてしまいます。</p><h1 id="対策方法"><a href="#対策方法" class="headerlink" title="対策方法"></a>対策方法</h1><p>攻撃に対してどのように検知・防御できるかを検討しました。</p><p>脆弱性に対する対策として、ソフトウェアのアップデートを行うことが最も効果的です。</p><p>しかし、他のソフトウェアとの互換性がなくなってしまう、などの事情でアップデートできない場合も考えられます。そこで今回は、他に行うことができる対策として複数のセキュリティツールで対策を行う、多層防御を実施しました。<br><img src="/images/20220414a/対策図_2022-04-08_104452.png" alt="対策図_2022-04-08_104452" width="837" height="478" loading="lazy"></p><p>複数の層で対策をすることで、一か所の防御が破られても他のレイヤでカバーできセキュリティレベルが高まります。</p><p>実際に行った対策は以下の通りです。</p><ol><li>改ざん検知</li><li>脆弱性検知・管理</li><li>侵入防御</li><li>アクセス制御</li><li>ログ監視・通知</li></ol><p>実施した各対策について説明していきたいと思います。</p><h2 id="1-改ざん検知"><a href="#1-改ざん検知" class="headerlink" title="1. 改ざん検知"></a>1. 改ざん検知</h2><p>今回の攻撃では、攻撃用のPHPファイルが追加されたり既存のファイルが削除されたりと、攻撃対象サーバ内でのファイルの不審な動きが多かったため、ファイルの変更監視を行うTripwireというツールを使用して改ざん検知および間接的な不正侵入検知を行いました。</p><p>Tripwireとはホスト型IDSで、あらかじめ作成したベースラインデータベースと現行システム上のファイル・ディレクトリの状態を照合（整合性チェック）することで、差分検知を行います。また、不正に改ざんされたり意図せず破損してしまったりした場合には元の状態に戻すこともできます。</p><p>こちらを使って、実施した攻撃の一つのテストファイルの削除を検知しました。</p><h3 id="検知の実施"><a href="#検知の実施" class="headerlink" title="検知の実施"></a>検知の実施</h3><p>差分検知には、監査対象および監査ルールを定義するポリシーファイルとベースラインデータベースの作成が必要です。まず、ポリシーファイルを作成します。<br>デフォルトのポリシーファイルの内容を今回の環境に最適化するため、ファイルを書き換えました。<br>新しいポリシーファイルを基にベースラインとなるデータベースを作成します。<br><code>tripwire -m i -s -c /etc/tripwire/tw.cfg</code></p><p>データベースが作成できたら、攻撃クライアントから攻撃対象サーバ内のテストファイルを削除し、攻撃対象サーバで差分検知をします。<br><code>tripwire -m c -s -c /etc/tripwire/tw.cfg</code><br>レポートを見てみるとテストファイルがなくなっていることがわかります。<em>➀<br>また、Modifiedの欄にあるPHPファイルが攻撃クライアントから送られてきたものです。</em>➁（何度も攻撃しているのでModified欄に入っていますが、攻撃初回はAddedの欄に表示されると思います。）<br><img src="/images/20220414a/TWレポート_再_2022-04-01_102943_(4).png" alt="TWレポート_再" width="686" height="342" loading="lazy"></p><p>今回は手動で差分検知を実施しましたが、cronで設定することで定期的な自動検知が可能となります。<br>また、ポリシーファイル内でEmailアドレスを設定すれば、ルール違反が発生した際に通知が送信されるので、更に管理が容易になり被害を抑える迅速な対応が可能となるでしょう。</p><h2 id="2-脆弱性検知・管理"><a href="#2-脆弱性検知・管理" class="headerlink" title="2. 脆弱性検知・管理"></a>2. 脆弱性検知・管理</h2><p>日頃から自分が扱う環境に脆弱性が存在するか確認し、パッチを適用しておけば未然に被害を防ぐことができます。今回はFile Managerに潜む脆弱性の検知を行うためFutureVulsというサービスを使いました。</p><p>FutureVulsとは、2016年にフューチャーの神戸氏が開発・公開し世界的に話題になった脆弱性検知ツールOSS Vulsの商用版です。<br>OSS Vulsは管理下のシステムに入っているOSパッケージやライブラリなどのソフトウェア情報を収集し、公開されている脆弱性データベースの情報と関連付け、自システムに内在する脆弱性情報のみをメールやSlack等で関係者に通知できます。OSS Vulsの導入により脆弱性管理を効率化できます。<br>また、商用版のFutureVulsは、スキャン結果をグラフィカルに表示するダッシュボード機能、検知した脆弱性を漏れなく管理できるチケット管理機能、複数の事業部での脆弱性管理が可能なグループ横断管理機能など、OSS Vulsと比較するとより運用・管理を意識した機能が充実しています。</p><p>OSS Vuls および FutureVulsの歴史についてはこちらの記事で詳しく説明されています。</p><p><a href="https://future-architect.github.io/articles/20201027/">https://future-architect.github.io/articles/20201027/</a></p><p>今回は機能がより充実したFutureVulsを使用しました。</p><h3 id="検知の実施-1"><a href="#検知の実施-1" class="headerlink" title="検知の実施"></a>検知の実施</h3><p>対象のサーバにスキャナをインストールし、スキャンを実施します。<br>WordPressプラグインの脆弱性ということで、WordPress関連の脆弱性情報を2万件以上持つwpscan.comの脆弱性データベースを利用したWordPressスキャンを行います。</p><p>スキャンはスキャナのインストール後5分毎に行われますが、手動でも可能です。今回は手動でスキャンしてみました。<br><code>/opt/vuls-saas/vuls-saas.sh</code><br>スキャン後しばらくするとポータルサイトにスキャン結果が表示されました。<br>CVE-2020-25213が検知されていることが確認できます。<br><img src="/images/20220414a/FV_ポータルサイト1_2022-03-25_092729.png" alt="FV_ポータルサイト1" width="1200" height="542" loading="lazy"><br>管理画面では検知された脆弱性情報がまとめられています。<br><img src="/images/20220414a/FV_脆弱性詳細タブ_2022-04-01_112205.png" alt="FV_脆弱性詳細タブ" width="1200" height="636" loading="lazy"></p><p>冒頭で触れましたが、CVE-2020-25213が重大なリスクのある脆弱性としてCISAのKEVに登録されていることが詳細タブからも確認できます。<em>➀<br>また、どこから攻撃可能なのかを表す攻撃元区分や攻撃の複雑さといったCVSSの評価も表示されます。</em>➁　今回の脆弱性では攻撃の複雑さが「低」となっており、攻撃が容易であるということが推測できます。</p><p>脆弱性検知後は管理画面「タスク」タブからチケットによるタスク管理が可能です。対応に応じて各タスクのステータスを変更したりコメントを投稿して他ユーザと情報共有が行えたりします。パッチが適用されたら次回スキャンでステータスが自動で「PATCH_APPLIED」となります。</p><p>その他の機能についてはこちらから確認できます。</p><p><a href="https://help.vuls.biz/">https://help.vuls.biz/</a></p><h2 id="3-侵入防御"><a href="#3-侵入防御" class="headerlink" title="3. 侵入防御"></a>3. 侵入防御</h2><p>攻撃方法の箇所で触れましたが、今回の脆弱性の原因はconnector.minimal.phpが外部から実行できてしまう点にありました。なので、攻撃用PHPファイルをconnector.minimal.phpファイルに対してPOSTするアクセスをブロックできれば攻撃を防ぐことができます。攻撃クライアントから送られるパケットの中身を確認し不正なアクセス防御を行うためCloud One Workload Securityを使いました。</p><p>Cloud One Workload Securityとは、以前Deep Securityという名称で販売されていたもので、サーバ周りの様々なセキュリティ対策が可能な商用サービスです。今回はWAFと同等の機能である侵入防御機能を利用しましたが、他にも以下の機能が利用可能です。</p><ul><li>不正プログラム対策</li><li>Webレピュテーション</li><li>アクティビティ監視</li><li>変更監視</li><li>アプリケーションコントロール</li><li>ファイアウォール</li><li>セキュリティログ監視</li></ul><p>本サービスは、エージェントを対象サーバに導入することで利用でき、ポータルサイトで結果を一括で管理できます。<br>また、脆弱性検知と管理を行うFutureVulsと連携が可能となっており、FutureVulsで検知した脆弱性情報をもとに関連する侵入防御ポリシーを適用することができます。</p><h3 id="防御の実施"><a href="#防御の実施" class="headerlink" title="防御の実施"></a>防御の実施</h3><p>まず、攻撃対象サーバ上でCloud Oneのエージェント（ds_agent）のステータスがactiveになっていることを確認します。その後、攻撃クライアントから攻撃を仕掛けると、エラーが出て攻撃対象サーバに接続することができません。<br><img src="/images/20220414a/WS_攻撃失敗_2022-03-25_140743.png" alt="WS_攻撃失敗" width="1200" height="520" loading="lazy"></p><p>Workload Securityのポータルサイトの侵入防御イベントを見てみると、不正なアクセスが検知されブロックしたことが確認できました。<em>➀　イベントを選択し関連する情報を見てみると、CVE-2020-25213の脆弱性を理由に侵入防御されていることがわかります。</em>➁<br><img src="/images/20220414a/WS_侵入防御イベント_2022-04-01_121633.png" alt="WS_侵入防御イベント" width="1200" height="633" loading="lazy"></p><h2 id="4-アクセス制御"><a href="#4-アクセス制御" class="headerlink" title="4. アクセス制御"></a>4. アクセス制御</h2><p>次に、アクセス制御です。<br>今回の検証では、攻撃クライアントで入力したコマンドが対象サーバ/var/www/html下のファイルやディレクトリに対して実行されてしまう、というものでした。幸いなことに、Linuxにはリソースへのアクセスが指定された条件通りかどうかを監視・制御するSELinuxという仕組みが存在するため、こちらを使用してアクセス制御を行ってみました。</p><p>SELinuxにはaudit logへのログ記録のみが行えるPermissiveモードと、ログの記録に加えて不正アクセスをブロックするEnforcingモードがあります。ログに関しては次章で触れるので、ここではEnforcingモードでブロックをしてみたいと思います。</p><h3 id="検知・防御の実施"><a href="#検知・防御の実施" class="headerlink" title="検知・防御の実施"></a>検知・防御の実施</h3><p>まず、現在設定されているモードを<code>getenforce</code>コマンドで確認し、Permissiveであれば<code>setenforce 1</code>でEnforcingモードに切り替えます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# setenforce 1</span><br><span class="line">[root@localhost ~]# getenforce</span><br><span class="line">Enforcing</span><br></pre></td></tr></table></figure><p>これで準備ができたので、攻撃をしていきます。<br><img src="/images/20220414a/Enforcing_攻撃失敗確認.gif" alt="Enforcing_攻撃失敗確認" width="959" height="987" loading="lazy"><br>ファイルが削除されていないことが確認できました。<br>SELinuxのEnforcingモードを使うことによって、リモートからのコマンドを防御することができました。</p><h2 id="5-ログの監視"><a href="#5-ログの監視" class="headerlink" title="5. ログの監視"></a>5. ログの監視</h2><p>前章ではSELinuxのEnforcingモードでルール違反のアクセスブロックを行いました。しかし、実際にはEnforcingモードを有効にすると正常なアクセスも拒否されることを懸念しPermissiveモードに留め、ログ記録のみ行っている環境も多いかと思います。ということで今回は、Permissiveモードで取得したログを攻撃防御に役立てるために、Elasticsearchというサービスを使用してログの集約・検索をしてみました。<br>出力されたログの監視を行うことで攻撃の早期発見・対応に繋げられ、結果的に被害の拡大を防ぐことができるでしょう。<br>Elasticsearchとは拡張性に優れた全文検索エンジンのことです。他Elastic製品と組み合わせることで、取得したログを集約、検索、分析、検知、アラート、通知、レポートなどに活用することができます。<br>Elasticsearchに関する用語の説明やインストール方法はこちらの記事で詳しく解説されています。</p><p><a href="https://future-architect.github.io/articles/20200623/">https://future-architect.github.io/articles/20200623/</a></p><p>今回は検索を行うElasticsearch、データをグラフィカルに可視化するKibana、特定のログを収集するFilebeat Moduleを使用しaudit logおよびApacheのエラーログの確認を行いました。</p><h3 id="検知・防御の実施-1"><a href="#検知・防御の実施-1" class="headerlink" title="検知・防御の実施"></a>検知・防御の実施</h3><p><code>setenforce 0</code> でSELinuxをPermissiveモードにしアクセス可否のログが記録されるようにしておきます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# setenforce 0</span><br><span class="line">[root@localhost ~]# getenforce</span><br><span class="line">Permissive</span><br></pre></td></tr></table></figure><p>攻撃クライアントから攻撃をし、テストファイルが削除されていることを確認後、ブラウザからKibanaへアクセスします。<br>Analytics → Dashboardと進み、検索から[Filebeat Auditd]Audit Events ECSのタイトルを選択します。</p><p>SELinuxによるアクセス制御の動作はAVC(Access-Vector-Cache)というフィールドを見れば確認できます。<br>avcがdeniedとなっており、アクセス拒否のログが出力されたことがわかります。Permissiveなので実際にアクセスはブロックされずテストファイルは削除されています。<br><img src="/images/20220414a/ES_KibanaAVCdenied_2022-03-29_153632.png" alt="ES_KibanaAVCdenied" width="1200" height="609" loading="lazy"></p><p>ちなみにEnforcingモードの場合は実際にアクセスをブロックするため、audit logに加えApacheのエラーログも出力されます。<br>Analytics → Dashboardより確認してみると、Apacheのエラーが出ていることがわかります。<br><img src="/images/20220414a/ES_Apacheerrorlogcheck_2022-03-30_114834.png" alt="ES_Apacheerrorlogcheck" width="1200" height="570" loading="lazy"></p><p>このように、Elasticsearch、Kibana、Filebeat Moduleを導入することによって、確認したいログをダッシュボードで視覚的に表示することができます。</p><p>今回はKibanaでのログ確認のみを実施しましたが、章の冒頭で述べたようにPermissiveの設定の場合、不正な挙動の早期発見・対応を行うにはログを監視する必要があります。そこでおすすめなのが、X-Packという拡張機能です。<br>X-Packはアラート、モニタリング、レポートなどの機能を含むパッケージで、不正行為をリアルタイムに検知しアラート・通知させることができます。<br>例えば、今回収集した「audit logのavcの値がdeniedだった場合」「Apacheのエラーログが検出された場合」に「アラート・通知する」と設定しておけばすぐに攻撃に気づくことができるでしょう。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>本記事では、WordPressプラグインの脆弱性への攻撃～対策を実施・解説しました。</p><p>上記で示したように、アップデートができない場合でも、複数のツール・サービスを組み合わせて多層防御を行うことでより堅牢なセキュリティ対策が行えるため攻撃被害を軽減する可能性が高まります。例えば、ゼロデイ攻撃を受けた場合、Workload Securityでは未対応のため侵入防御できないことがありますが、ファイルの変更監視を行うTripwireを併せて使っていればゼロデイ攻撃への対応有無に関係なく検知ができ、不正ファイルの削除するなどの対応に繋げられます。<br>このように、一か所の対策が破られても他のものでカバーでき、甚大な被害を避けられる可能性が高まるため、異なる特徴をもつ対策を併用することをおすすめします。</p><p>また、有識者の方々に半年間根気強くサポートしていただけたおかげで、「Linuxって何？」なレベルから、仮想サーバ構築～セキュリティ対策までできるレベルに成長することができました。この記事で、「フューチャーにはチャレンジする者を応援する環境が整っている」ということが伝わっていれば幸いです。</p><p>最後までお付き合い頂きありがとうございました！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Security/">Security</category>
      
      
      <category domain="https://future-architect.github.io/tags/Vuls/">Vuls</category>
      
      <category domain="https://future-architect.github.io/tags/WordPress/">WordPress</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%84%86%E5%BC%B1%E6%80%A7/">脆弱性</category>
      
      <category domain="https://future-architect.github.io/tags/FutureVuls/">FutureVuls</category>
      
      
      <comments>https://future-architect.github.io/articles/20220414a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>cuDNN の CUDA API の紹介</title>
      <link>https://future-architect.github.io/articles/20220413a/</link>
      <guid>https://future-architect.github.io/articles/20220413a/</guid>
      <pubDate>Tue, 12 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、2021年新卒入社の SAIG 松崎功也です。Tech Blog 初投稿です。&lt;/p&gt;
&lt;p&gt;NVIDIA</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、2021年新卒入社の SAIG 松崎功也です。Tech Blog 初投稿です。</p><p>NVIDIA 社が提供するディープラーニング用の GPGPU ライブラリ「cuDNN」の CUDA API を紹介します。</p><p>cuDNN は TensorFlow や Keras で学習や推論を高速化するためのバックエンドとしてよく使われていますが、CUDA API を直接たたいたことがある方は少ないのではないでしょうか？</p><p>個人的に作成したアプリケーションで CUDA API を叩く機会があり、社内の技術勉強会で紹介したところ好評だったため、こちらにも寄稿します。</p><img src="/images/20220413a/ファイル名.png" alt="システム概念図" width="1200" height="591" loading="lazy"><h1 id="cuDNN-を叩くことになったきっかけ"><a href="#cuDNN-を叩くことになったきっかけ" class="headerlink" title="cuDNN を叩くことになったきっかけ"></a>cuDNN を叩くことになったきっかけ</h1><p>私はレトロゲームを遊ぶことが多いのですが、解像度が低いため 4K ディスプレイだと拡大した際に非常に粗が目立ってしまいます。これをなんとかしたかったのがきっかけです。<br>最終的には以下の手法で解決することにしました。</p><ol><li>Windows API でゲームウィンドウをキャプチャ</li><li><a href="%22https://github.com/nagadomi/waifu2x%22">waifu2x</a> という CNN の超解像モデルでキレイに拡大</li><li>ウィンドウをもう一枚作り、拡大後の画像を表示</li></ol><p>この一連のフローをリアルタイムで行います。Python でもできないことはないのですが、今回はパフォーマンスチューニングのしやすさを考慮して CUDA を選択しました。</p><p>この記事では、1., 3. の部分の説明は行いません。3. において使用した cuDNN API にのみ焦点を当てて紹介します。</p><h1 id="cuDNN-で畳込みを行う流れ"><a href="#cuDNN-で畳込みを行う流れ" class="headerlink" title="cuDNN で畳込みを行う流れ"></a>cuDNN で畳込みを行う流れ</h1><p>流れは以下の通りです。</p><p>次の章で、1項目ずつコードと一緒に紹介していきます。なお、コードは正確に書くと量が多くなりすぎるためある程度端折って掲載しています。そのため、単純にコピペしてつなげても動きませんのでご了承ください。</p><ol><li>cuDNN ライブラリの初期化</li><li>モデルのフィルタの重みをRAM（ホスト）に読み込む</li><li>RAM（ホスト）に読み込んだフィルタの重みを VRAM へ転送する</li><li>フィルタ記述子（フィルターのサイズなどを定義）の準備</li><li>バイアス記述子の準備</li><li>畳込み記述子（パディング、ストライドなどを定義）の準備</li><li>活性化関数の記述子（ReLU, Swish などの係数を含めて定義）の準備</li><li>畳込みの内部アルゴリズムを設定する</li><li>拡大したい画像データをRAM（ホスト）→ VRAM へ転送</li><li>畳込みを行う</li></ol><h2 id="1-cuDNN-ライブラリの初期化"><a href="#1-cuDNN-ライブラリの初期化" class="headerlink" title="1. cuDNN ライブラリの初期化"></a>1. cuDNN ライブラリの初期化</h2><p>ライブラリの初期化は以下のように行います。</p><figure class="highlight c++"><figcaption><span>cuDNN の初期化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ハンドルを表す変数を用意</span></span><br><span class="line">cudnnHandle_t cudnn_handle = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="comment">// ハンドルのポインタを渡してハンドルを受け取る</span></span><br><span class="line"><span class="built_in">cudnnCreate</span>(&amp;cudnn_handle);</span><br></pre></td></tr></table></figure><h2 id="2-モデルのフィルタの重みをRAM（ホスト）に読み込む"><a href="#2-モデルのフィルタの重みをRAM（ホスト）に読み込む" class="headerlink" title="2. モデルのフィルタの重みをRAM（ホスト）に読み込む"></a>2. モデルのフィルタの重みをRAM（ホスト）に読み込む</h2><p>今回は JSON 形式で保存されているモデルのフィルタの重みを、<a href="%22https://github.com/kazuho/picojson%22">picojson</a> で読込みました。</p><img src="/images/20220413a/0cda6e32-95a9-385b-22fb-726db27156b6.png" alt="モデルをRAMに読み込む概念図" width="1089" height="523" loading="lazy"><figure class="highlight c++"><figcaption><span>重みの読込み</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// picojson で kernels に JSON ファイルを読込んでおく　</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; layer.nOutputPlane_; i++) &#123;</span><br><span class="line">    <span class="keyword">auto</span>&amp; kernel = kernels[i].<span class="built_in">get</span>&lt;picojson::array&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; layer.nInputPlane_; j++) &#123;</span><br><span class="line">        <span class="keyword">auto</span>&amp; mat = kernel[j].<span class="built_in">get</span>&lt;picojson::array&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; layer.kH_; k++) &#123;</span><br><span class="line">            <span class="keyword">auto</span>&amp; row = mat[k].<span class="built_in">get</span>&lt;picojson::array&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; layer.kW_; l++) &#123;</span><br><span class="line">                layer.host_weight_[</span><br><span class="line">                    i * (layer.nInputPlane_ * layer.kH_ * layer.kW_)</span><br><span class="line">                        + j * (layer.kH_ * layer.kW_)</span><br><span class="line">                        + k * layer.kW_</span><br><span class="line">                        + l</span><br><span class="line">                ] = row[l].<span class="built_in">get</span>&lt;<span class="type">double</span>&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-RAM（ホスト）に読み込んだフィルタの重みを-VRAM-へ転送する"><a href="#3-RAM（ホスト）に読み込んだフィルタの重みを-VRAM-へ転送する" class="headerlink" title="3. RAM（ホスト）に読み込んだフィルタの重みを VRAM へ転送する"></a>3. RAM（ホスト）に読み込んだフィルタの重みを VRAM へ転送する</h2><p>VRAM のメモリを確保して、読み込んだモデルのフィルタを VRAM へ転送します。<br>メモリ管理はスマートポインタで行っているので、それに合わせたラッパーを自作し使用しています（cuda_memory_allocate）。<br><img src="/images/20220413a/ファイル名_2.png" alt="VRAMへ転送する" width="1200" height="454" loading="lazy"></p><figure class="highlight c++"><figcaption><span>VRAM へ重みを転送する</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// VRAM のメモリを確保</span></span><br><span class="line">layer.device_weight_ptr_ = <span class="built_in">cuda_memory_allocate</span>(<span class="built_in">sizeof</span>(<span class="type">float</span>) * layer.host_weight_.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// RAM（ホスト）のデータを VRAM へ転送する。転送の方向は引数の最後で指定する。</span></span><br><span class="line"><span class="built_in">cudaMemcpy</span>(layer.device_weight_ptr_.<span class="built_in">get</span>(), layer.host_weight_.<span class="built_in">data</span>(),</span><br><span class="line">           <span class="built_in">sizeof</span>(<span class="type">float</span>) * layer.host_weight_.<span class="built_in">size</span>(), cudaMemcpyKind::cudaMemcpyHostToDevice);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>cuda_memory_allocate（自作のメモリ確保ラッパー）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解放処理</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cuda_device_memory_delete</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">void</span>* ptr)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cudaFree</span>(ptr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11 のスマートポインタを使ってみる</span></span><br><span class="line"><span class="keyword">using</span> device_unique_ptr = std::unique_ptr&lt;<span class="type">void</span>, cuda_device_memory_delete&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function">device_unique_ptr <span class="title">cuda_memory_allocate</span><span class="params">(<span class="type">size_t</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">void</span>* ptr = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="built_in">cudaMalloc</span>(&amp;ptr, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">device_unique_ptr</span>(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-フィルタ記述子（フィルターのサイズなどを定義）の準備"><a href="#4-フィルタ記述子（フィルターのサイズなどを定義）の準備" class="headerlink" title="4. フィルタ記述子（フィルターのサイズなどを定義）の準備"></a>4. フィルタ記述子（フィルターのサイズなどを定義）の準備</h2><p>フィルタ記述子では、フィルタの枚数やサイズなどを設定します。<br><img src="/images/20220413a/ファイル名_3.png" alt="フィルタ記述子" width="1200" height="577" loading="lazy"></p><figure class="highlight c++"><figcaption><span>フィルタ記述子の準備</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生のフィルタ記述子を作成</span></span><br><span class="line">cudnnFilterDescriptor_t temp_filter_desc;</span><br><span class="line"><span class="built_in">cudnnCreateFilterDescriptor</span>(&amp;temp_filter_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// スマートポインタに移管</span></span><br><span class="line">filter_desc_.<span class="built_in">reset</span>(temp_filter_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2番目以降の引数は、「データ型」、「データの配置順番」、「出力枚数」、「入力枚数」、「フィルターのサイズ」</span></span><br><span class="line"><span class="built_in">cudnnSetFilter4dDescriptor</span>(filter_desc_.<span class="built_in">get</span>(), CUDNN_DATA_FLOAT, CUDNN_TENSOR_NCHW, nOutputPlane_, nInputPlane_, kH_, kW_);</span><br></pre></td></tr></table></figure><h2 id="5-バイアス記述子の準備"><a href="#5-バイアス記述子の準備" class="headerlink" title="5. バイアス記述子の準備"></a>5. バイアス記述子の準備</h2><p>畳込み処理後に加算するバイアスの準備を行います。バイアスは1次元ベクトルなので、テンソルの記述子を流用します。</p><img src="/images/20220413a/バイアス.png" alt="バイアス" width="1200" height="409" loading="lazy"><figure class="highlight c++"><figcaption><span>バイアス記述子の準備</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生のテンソル記述子の準備</span></span><br><span class="line">cudnnTensorDescriptor_t temp_bias_desc;</span><br><span class="line">(<span class="built_in">cudnnCreateTensorDescriptor</span>(&amp;temp_bias_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// スマートポインタに移管</span></span><br><span class="line">bias_desc_.<span class="built_in">reset</span>(temp_bias_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1次元ベクトルとして、バイアスを設定する</span></span><br><span class="line"><span class="built_in">cudnnSetTensor4dDescriptor</span>(bias_desc_.<span class="built_in">get</span>(), CUDNN_TENSOR_NCHW, CUDNN_DATA_FLOAT, <span class="number">1</span>, nOutputPlane, <span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="6-畳込み記述子（パディング、ストライドなどを定義）の準備"><a href="#6-畳込み記述子（パディング、ストライドなどを定義）の準備" class="headerlink" title="6. 畳込み記述子（パディング、ストライドなどを定義）の準備"></a>6. 畳込み記述子（パディング、ストライドなどを定義）の準備</h2><p>畳込み記述子では、フィルタの動かし方（パディング、ストライド、ディレーションなど）を設定します。</p><figure class="highlight c++"><figcaption><span>畳込み記述子の準備</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生の畳込み記述子を作成</span></span><br><span class="line">cudnnConvolutionDescriptor_t temp_conv_desc;</span><br><span class="line">(<span class="built_in">cudnnCreateConvolutionDescriptor</span>(&amp;temp_conv_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// スマートポインタに移管</span></span><br><span class="line">conv_desc_.<span class="built_in">reset</span>(temp_conv_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2番目以降の引数は、「パディング」、「ストライド」、「ディレーション」、「畳込みのタイプ」、「データ型」</span></span><br><span class="line"><span class="built_in">cudnnSetConvolution2dDescriptor</span>(conv_desc_.<span class="built_in">get</span>(), padH, padW, dH, dW, <span class="number">1</span>, <span class="number">1</span>, cudnnConvolutionMode_t::CUDNN_CONVOLUTION, cudnnDataType_t::CUDNN_DATA_FLOAT);</span><br></pre></td></tr></table></figure><h2 id="7-活性化関数の記述子の準備"><a href="#7-活性化関数の記述子の準備" class="headerlink" title="7. 活性化関数の記述子の準備"></a>7. 活性化関数の記述子の準備</h2><p>cuDNN ではデフォルトで ReLU や Swish などの活性化関数が準備されています（<a href="%22https://docs.nvidia.com/deeplearning/cudnn/api/index.html#cudnnActivationMode_t%22">提供されている活性化関数の一覧</a>）。</p><p>ただ、waifu2x で使用されている leakyReLU は cuDNN では提供されていないため、自前で準備する必要があります。</p><p>そのため、活性化関数には IDENTITY（何もしない恒等関数）を指定し、CUDA で leakyReLU を実装しました。</p><img src="/images/20220413a/ファイル名_4.png" alt="活性化関数の記述子" width="1200" height="679" loading="lazy"><figure class="highlight c++"><figcaption><span>活性化関数の記述子の準備</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生の活性化関数の記述子を作成</span></span><br><span class="line">cudnnActivationDescriptor_t temp_activation_desc;</span><br><span class="line"><span class="built_in">cudnnCreateActivationDescriptor</span>(&amp;temp_activation_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">//スマートポインタに移管</span></span><br><span class="line">activation_desc_.<span class="built_in">reset</span>(temp_activation_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2番目以降の引数は、「活性化関数」、「NaN を伝播させるかどうか」、「活性化関数の係数」（無い場合は適当な数値を入れておけばOK）</span></span><br><span class="line"><span class="built_in">cudnnSetActivationDescriptor</span>(activation_desc_.<span class="built_in">get</span>(), cudnnActivationMode_t::CUDNN_ACTIVATION_IDENTITY,, cudnnNanPropagation_t::CUDNN_PROPAGATE_NAN, <span class="number">0.0</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>leakyReLU.cu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">leakyRelu_</span><span class="params">(<span class="type">float</span>* vec, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = blockIdx.x * blockDim.x + threadIdx.x;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; n)</span><br><span class="line">        vec[i] = <span class="number">0.1f</span> * <span class="built_in">fminf</span>(vec[i], <span class="number">0.f</span>) + <span class="built_in">fmaxf</span>(vec[i], <span class="number">0.f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-畳込みの内部アルゴリズムを設定する"><a href="#8-畳込みの内部アルゴリズムを設定する" class="headerlink" title="8. 畳込みの内部アルゴリズムを設定する"></a>8. 畳込みの内部アルゴリズムを設定する</h2><p>cuDNN では畳込みの内部アルゴリズムがいくつか用意されていて、それぞれメモリ使用量や計算速度にトレードオフがあります（<a href="%22https://docs.nvidia.com/deeplearning/cudnn/api/index.html#cudnnConvolutionFwdAlgo_t%22">提供されている内部アルゴリズムの一覧</a>）。</p><p>これまで設定してきたフィルタ記述子や畳込み記述子の情報を使用して、cuDNN に自動で選択させることもできます。</p><p>ただ、同じ記述子を使用した場合でも、実行のたびに自動選択されるアルゴリズムが異なることがありました。そのため、使用するメモリ使用量や処理時間に再現性が欲しい場合は自分で指定するのが吉です。</p><figure class="highlight c++"><figcaption><span>畳込みの内部アルゴリズムの設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内部アルゴリズムを自動で設定する場合</span></span><br><span class="line"><span class="built_in">cudnnFindConvolutionForwardAlgorithm</span>(handle, src, filter_desc_.<span class="built_in">get</span>(), conv_desc_.<span class="built_in">get</span>(), dst, <span class="number">1</span>, &amp;nAlgos, &amp;forward_algo_);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部アルゴリズムを手動で設定する場合</span></span><br><span class="line">forward_algo_.algo = cudnnConvolutionFwdAlgo_t::CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMP_GEMM;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部アルゴリズムの作業領域のサイズを計算する</span></span><br><span class="line"><span class="built_in">cudnnGetConvolutionForwardWorkspaceSize</span>(handle, src, filter_desc_.<span class="built_in">get</span>(), conv_desc_.<span class="built_in">get</span>(), dst, forward_algo_.algo, &amp;workspace_size);</span><br></pre></td></tr></table></figure><h2 id="9-拡大したい画像データをRAM（ホスト）→-VRAM-へ転送"><a href="#9-拡大したい画像データをRAM（ホスト）→-VRAM-へ転送" class="headerlink" title="9. 拡大したい画像データをRAM（ホスト）→ VRAM へ転送"></a>9. 拡大したい画像データをRAM（ホスト）→ VRAM へ転送</h2><p>あともう一息です。</p><p>拡大したい画像データを VRAM へ転送します。</p><figure class="highlight c++"><figcaption><span>画像の転送</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// VRAM を確保</span></span><br><span class="line"><span class="keyword">auto</span> image0 = <span class="built_in">cuda_memory_allocate</span>(image_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// image_float にはウィンドウをキャプチャしたデータが入っている</span></span><br><span class="line"><span class="built_in">cudaMemcpy</span>(image0.<span class="built_in">get</span>(), image_float.<span class="built_in">data</span>(), <span class="built_in">sizeof</span>(<span class="type">float</span>) * image_float.<span class="built_in">size</span>(), cudaMemcpyKind::cudaMemcpyHostToDevice);</span><br></pre></td></tr></table></figure><h2 id="10-畳込みを行う"><a href="#10-畳込みを行う" class="headerlink" title="10. 畳込みを行う"></a>10. 畳込みを行う</h2><p>最後にここまで設定してきた記述子を元に、VRAM へコピーした画像データに畳込み処理を行います。<br>関数名から分かるように、畳込み、バイアスの加算、活性化関数の適用を一気に行います。</p><figure class="highlight c++"><figcaption><span>畳込みを行う</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cudnnConvolutionBiasActivationForward</span>(</span><br><span class="line">        handle,</span><br><span class="line">        &amp;one, src, src_data,</span><br><span class="line">        filter_desc_.<span class="built_in">get</span>(), device_weight_ptr_.<span class="built_in">get</span>(),</span><br><span class="line">        conv_desc_.<span class="built_in">get</span>(), forward_algo_.algo,</span><br><span class="line">        workspace, workspace_size,</span><br><span class="line">        &amp;zero, dst, dst_data,</span><br><span class="line">        bias_desc_.<span class="built_in">get</span>(), device_bias_ptr_.<span class="built_in">get</span>(),</span><br><span class="line">        activation_desc_.<span class="built_in">get</span>(),</span><br><span class="line">        dst, dst_data</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>cuDNN の CUDA API による畳込みの流れを紹介しました。</p><p>普段なかなか見ることのないバックエンド側の API でしたが、興味を持ってもらえるきっかけになればうれしいです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/CUDA/">CUDA</category>
      
      <category domain="https://future-architect.github.io/tags/GPGPU/">GPGPU</category>
      
      <category domain="https://future-architect.github.io/tags/cuDNN/">cuDNN</category>
      
      
      <comments>https://future-architect.github.io/articles/20220413a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
