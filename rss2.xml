<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Thu, 01 Sep 2022 02:23:07 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>IoTの力でワインの品質を管理する</title>
      <link>https://future-architect.github.io/articles/20220901a/</link>
      <guid>https://future-architect.github.io/articles/20220901a/</guid>
      <pubDate>Wed, 31 Aug 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20220822a/&quot;&gt;夏休み自由研究ブログ連載&lt;/a&gt;の7本目です。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20220822a/">夏休み自由研究ブログ連載</a>の7本目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。日本ソムリエ協会認定ワインエキスパートの今泉です。<br>間違えました。TIG&#x2F;DXユニットの今泉です。</p><p>先日、古い年式のワインセラーを我が家に迎えました。新品といえど型落ち品のため、怖いのが故障です。</p><p>ワインはとてもデリケートな飲み物で真夏の気温などでは直ぐにダメになってしまいます。また熟成に適した温度もあり、一般的には年間を通じて12~15℃程度で一日の温度変化が少ないほうが良いとされています。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup><br>もし長期間家を空けたタイミングでセラーが壊れてしまったら……………</p><p>機械なので故障は仕方ありませんが、なんとかトラブルをすぐに検知する仕組みが欲しいところです。<br>そこでセラーに温度データロガーを設置することにしましたが、私の要望を満たす市販の製品は非常に高価かつ私にとっては不要な機能も含まれており、選定は難航しました。</p><p>ちょうどいい製品がないのであれば作ればよいのです。</p><p>ということでアラート機能付きの温湿度データロガーを自作することにしました。</p><h2 id="システム構成"><a href="#システム構成" class="headerlink" title="システム構成"></a>システム構成</h2><img src="/images/20220901a/無題.png" alt="API Gateway + Lambda + CloudWatch + DynamoDB" width="922" height="534" loading="lazy"><p>実現したいこととしては以下の通りです。</p><ol><li>セラー内部の温湿度を取得</li><li>API Gateway経由でLambdaにHTTP POSTし、DynamoDBにデータを蓄積</li><li>CloudWatchをトリガーにDBへのデータ更新が行われているか、セラー内部の温度が基準を上回っていないか監視</li><li>3で問題があった場合、LINE messaging APIで自分のLINEアカウントに通知</li></ol><p>MQTT &amp; AWSIoTで実現することも考えましたが、すでに宮永さんが素敵な記事を書いているので今回は見送りました。<br><a href="/articles/20210929a/">GoでMQTT!!　～温湿度マイスターbotの作成～(前編)</a></p><h2 id="まずはAPI"><a href="#まずはAPI" class="headerlink" title="まずはAPI"></a>まずはAPI</h2><p>まずはクラウド環境の構築ですが、今回使用する<a href="/tags/Lambda/">Lambda</a>、<a href="/tags/DynamoDB/">DynamoDB</a>については特段本記事では取り上げません。<br>フューチャー技術ブログでは数多く記事が投稿されていますので是非読んでみて下さい。</p><p>Lambdaから実行するコードは以下の通りです。<br>Node.jsでもよかったのですが、最近使い始めたGoに少しでも慣れるためにもGoで書くことにしました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-lambda-go/events&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-lambda-go/lambda&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/aws&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/aws/session&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/service/dynamodb&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tokyo, _ = time.LoadLocation(<span class="string">&quot;Asia/Tokyo&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CellarData <span class="keyword">struct</span> &#123;</span><br><span class="line">Id          <span class="type">int</span>    <span class="string">`dynamodbav:&quot;id&quot;`</span></span><br><span class="line">TimeStamp   <span class="type">string</span> <span class="string">`dynamodbav:&quot;timestamp&quot;`</span></span><br><span class="line">Temperature <span class="type">string</span> <span class="string">`dynamodbav:&quot;temperature&quot;`</span></span><br><span class="line">Humidity    <span class="type">string</span> <span class="string">`dynamodbav:&quot;humidity&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> RequestBody <span class="keyword">struct</span> &#123;</span><br><span class="line">Temperature <span class="type">string</span> <span class="string">`json:&quot;temperature&quot;`</span></span><br><span class="line">Humidity    <span class="type">string</span> <span class="string">`json:&quot;humidity&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Response <span class="keyword">struct</span> &#123;</span><br><span class="line">RequestMethod <span class="type">string</span> <span class="string">`json:&quot;RequestMethod&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(request RequestBody)</span></span> (events.APIGatewayProxyResponse, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// connect DB</span></span><br><span class="line">db := dynamodb.New(session.Must(session.NewSession()))</span><br><span class="line"></span><br><span class="line"><span class="comment">//set Data</span></span><br><span class="line">cellarData := CellarData&#123;</span><br><span class="line">Id:          <span class="number">1</span>,</span><br><span class="line">TimeStamp:   time.Now().In(tokyo).Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>),</span><br><span class="line">Temperature: request.Temperature,</span><br><span class="line">Humidity:    request.Humidity,</span><br><span class="line">&#125;</span><br><span class="line">item, err := dynamodbattribute.MarshalMap(cellarData)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> events.APIGatewayProxyResponse&#123;</span><br><span class="line">Body:       err.Error(),</span><br><span class="line">StatusCode: <span class="number">500</span>,</span><br><span class="line">&#125;, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// execute</span></span><br><span class="line">_, err = db.PutItem(&amp;dynamodb.PutItemInput&#123;</span><br><span class="line">TableName: aws.String(<span class="string">&quot;CELLAR&quot;</span>),</span><br><span class="line">Item:      item,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> events.APIGatewayProxyResponse&#123;</span><br><span class="line">Body:       err.Error(),</span><br><span class="line">StatusCode: <span class="number">500</span>,</span><br><span class="line">&#125;, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// set response</span></span><br><span class="line">jsonBytes, _ := json.Marshal(Response&#123;</span><br><span class="line">RequestMethod: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> events.APIGatewayProxyResponse&#123;</span><br><span class="line">Body:       <span class="type">string</span>(jsonBytes),</span><br><span class="line">StatusCode: <span class="number">200</span>,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ここで話せるようなポイントはあまりないのですが、POSTのリクエストボディはAPI Gatewayのマッピングテンプレートを活用しました。</p><h2 id="ESP-WROOM02-ESP8266-を使った温湿度センサの作成"><a href="#ESP-WROOM02-ESP8266-を使った温湿度センサの作成" class="headerlink" title="ESP-WROOM02(ESP8266)を使った温湿度センサの作成"></a>ESP-WROOM02(ESP8266)を使った温湿度センサの作成</h2><p>今回はじめて電子工作にチャレンジしたのですが、どのマイコンボードを選べばいいのか、どういう機材をそろえればいいのか、全く当たりがつきません。<br>Arduinoが入門者にはお勧めらしいのですが、無線でのインターネット接続を行うには別途Wifi通信モジュールが必要で、その通信モジュール自体もプログラムの読み書きが可能なマイコンとして動作が可能らしく、じゃあもうそれでいいじゃんとなりました。</p><p>回路の構築やはんだ付にやや不安があったのである程度構築済みのものを探した結果、以下の製品を利用することにしました。</p><ul><li><a href="https://www.switch-science.com/catalog/2500/">ESPr® Developer（ピンソケット実装済）</a></li><li><a href="https://www.switch-science.com/catalog/2703/">ESPr® Developer用環境センサシールド</a></li></ul><p>ESPr® DeveloperはWifiモジュールであるESP-WROOM-02(RSP8266)の開発ボードで、こちらの製品はすでにピンソケットが実装されています。温湿度センサーとしてはBME280とフォトトランジスタを搭載したESPr® Developer用環境センサシールドを利用したのですがこちらもピンヘッダがすでに付いているので手間が大幅に削減できます。</p><p>ESP-WROOM02はArduinoと同様、C&#x2F;C++をベースとしたArduino言語を使用することができるため、キャッチアップなどは不要でプログラミングに取り掛かることができました。<br>開発環境構築に当たっては以下記事を参考にさせていただきました。</p><p><a href="http://trac.switch-science.com/wiki/esp_dev_arduino_ide">ESP-WROOM-02開発ボードをArduino IDEで開発する方法 </a></p><p>ソースコードは次の通りです。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266HTTPClient.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ESP8266WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFiClientSecure.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;BME280I2C.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Wire.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ArduinoJson.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERIAL_BAUD 115200</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> API_KEY <span class="string">&quot;your api_key&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WIFI_SSID <span class="string">&quot;your ssid&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PWD <span class="string">&quot;your password&quot;</span></span></span><br><span class="line"></span><br><span class="line">BME280I2C bme;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Serial.begin(SERIAL_BAUD);</span><br><span class="line">    delay(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    Serial.println(<span class="string">&quot;Connecting to Wi-Fi&quot;</span>);</span><br><span class="line">    WiFi.begin(WIFI_SSID, PWD);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;</span><br><span class="line">      delay(<span class="number">500</span>);</span><br><span class="line">      Serial.println(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Serial.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    Serial.println(<span class="string">&quot;Wi-Fi connected&quot;</span>);</span><br><span class="line">    Serial.println(WiFi.localIP());</span><br><span class="line"></span><br><span class="line">    Wire.begin();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!bme.begin())&#123;</span><br><span class="line">        Serial.println(<span class="string">&quot;BME280 is not available&quot;</span>);</span><br><span class="line">        delay(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> <span class="title function_">temp</span><span class="params">(NAN)</span>, <span class="title function_">hum</span><span class="params">(NAN)</span>, <span class="title function_">pres</span><span class="params">(NAN)</span>;</span><br><span class="line"></span><br><span class="line">    BME280::TempUnit <span class="title function_">tempUnit</span><span class="params">(BME280::TempUnit_Celsius)</span>;</span><br><span class="line">    BME280::PresUnit <span class="title function_">presUnit</span><span class="params">(BME280::PresUnit_Pa)</span>;</span><br><span class="line"></span><br><span class="line">    bme.read(pres, temp, hum, tempUnit, presUnit);</span><br><span class="line"></span><br><span class="line">    Serial.print(<span class="string">&quot;temp: &quot;</span>);</span><br><span class="line">    Serial.print(temp);</span><br><span class="line">    Serial.print(<span class="string">&quot;, humid: &quot;</span>);</span><br><span class="line">    Serial.print(hum);</span><br><span class="line">    Serial.print(<span class="string">&quot;, pressure: &quot;</span>);</span><br><span class="line">    Serial.println(pres);</span><br><span class="line"></span><br><span class="line">    registerSensor(temp,hum);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//30min</span></span><br><span class="line">    ESP.deepSleep(<span class="number">30</span> * <span class="number">60</span> * <span class="number">1000000</span> );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">registerSensor</span><span class="params">(<span class="type">float</span> temp,<span class="type">float</span> hum)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (WiFi.status() == WL_CONNECTED) &#123;</span><br><span class="line"></span><br><span class="line">        HTTPClient http;</span><br><span class="line">        WiFiClientSecure client;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>* path = <span class="string">&quot;your endpoint&quot;</span>;</span><br><span class="line">        http.setTimeout(<span class="number">500</span>); <span class="comment">// 500ms</span></span><br><span class="line">        client.setInsecure();</span><br><span class="line"></span><br><span class="line">        http.begin(client,path);</span><br><span class="line">        <span class="comment">//set header</span></span><br><span class="line">        http.addHeader(<span class="string">&quot;x-api-key&quot;</span>,API_KEY);</span><br><span class="line">        http.addHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//set requestbody</span></span><br><span class="line">        StaticJsonDocument&lt;JSON_OBJECT_SIZE(<span class="number">20</span>)&gt;  jsonArray;</span><br><span class="line">        <span class="type">char</span> tempstr[<span class="number">10</span>];</span><br><span class="line">        <span class="type">char</span> humstr[<span class="number">10</span>];</span><br><span class="line">        dtostrf(temp, <span class="number">6</span>, <span class="number">2</span>, tempstr);</span><br><span class="line">        dtostrf(hum, <span class="number">6</span>, <span class="number">2</span>, humstr);</span><br><span class="line"></span><br><span class="line">        jsonArray[<span class="string">&quot;temperature&quot;</span>] = tempstr;</span><br><span class="line">        jsonArray[<span class="string">&quot;humidity&quot;</span>] = humstr;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> jsonString[<span class="number">255</span>];</span><br><span class="line">        serializeJson(jsonArray,jsonString, <span class="keyword">sizeof</span>(jsonString));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// post</span></span><br><span class="line">        <span class="type">int</span> httpCode = http.POST((<span class="type">uint8_t</span> *)jsonString, <span class="built_in">strlen</span>(jsonString));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (httpCode &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Serial.<span class="built_in">printf</span>(<span class="string">&quot;[HTTPS] POST... code: %d\n&quot;</span>, httpCode);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Serial.println(<span class="string">&quot;[HTTPS] no connection or no HTTP server.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        http.end();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>環境センサシールドはI2C通信のみ対応しているため、温湿度の取得はBME280I2Cをimportしました。</p><p>コードは<a href="https://github.com/finitespace/BME280">BME280ライブラリ</a>のサンプルを参考にしています。<br>組み込み系ではJSON形式にするのは面倒なのでは…？と思っていましたが、ArduinoJsonを利用することで手間なくJson化することができました。</p><h3 id="給電"><a href="#給電" class="headerlink" title="給電"></a>給電</h3><p>今回、セラー内に設置する必要があるためPCやコンセント以外での電源確保が必要です。</p><p>たまたまスマートフォン用の電池交換式充填機があったため使ってみましたが、問題なく稼働しました。<br><img src="/images/20220901a/IMG_4153.jpg" alt="IMG_4153.jpg" width="727" height="968" loading="lazy"></p><p>長時間駆動させることを考えるとセンサを常に稼働させておくのは望ましくありません。<br>ESP-WROOM02にはDeepSleepモードがあるため、これを活用して30分間隔で温湿度を取得するようにしました。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//30min</span></span><br><span class="line">ESP.deepSleep(<span class="number">30</span> * <span class="number">60</span> * <span class="number">1000000</span> );</span><br></pre></td></tr></table></figure><p>sleepの単位はμ秒のため秒を1000000倍する必要があります。</p><p>なお、以下記事によると最大で71.5分ほどスリープが可能なようです。</p><p><a href="https://mag.switch-science.com/2017/03/03/esp-wroom-02-deep-sleep/">ESP-WROOM-02のDeep-sleepはどれだけ寝ていられるのか</a><br>運用から4日程度経ちますが、今のところ駆動に問題はありません。あまりにも電池の持ちが短かったら別の給電方法を考えたいと思います。</p><p>さて、プログラムが組み終わったのでセラーに設置してみます。<br><img src="/images/20220901a/IMG_4160.jpeg" alt="ワインセラー" width="807" height="605" loading="lazy"></p><p>なんだか電子工作感がまるでありませんが気にしないことにします。</p><h2 id="通知機能をつける"><a href="#通知機能をつける" class="headerlink" title="通知機能をつける"></a>通知機能をつける</h2><p>Lambdaに実装した関数は次の通りです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-lambda-go/lambda&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/aws&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/aws/session&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/service/dynamodb&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/aws/aws-sdk-go/service/dynamodb/dynamodbattribute&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/line/line-bot-sdk-go/linebot&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> CellarData <span class="keyword">struct</span> &#123;</span><br><span class="line">Id          <span class="type">int</span>    <span class="string">`dynamodbav:&quot;id&quot;`</span></span><br><span class="line">TimeStamp   <span class="type">string</span> <span class="string">`dynamodbav:&quot;timestamp&quot;`</span></span><br><span class="line">Temperature <span class="type">string</span> <span class="string">`dynamodbav:&quot;temperature&quot;`</span></span><br><span class="line">Humidity    <span class="type">string</span> <span class="string">`dynamodbav:&quot;humidity&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">()</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">const</span> threshold = <span class="number">25.00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// connect DB</span></span><br><span class="line">db := dynamodb.New(session.Must(session.NewSession()))</span><br><span class="line"></span><br><span class="line">result, err := db.Query(&amp;dynamodb.QueryInput&#123;</span><br><span class="line">TableName:        aws.String(<span class="string">&quot;CELLAR&quot;</span>),</span><br><span class="line">Limit:            aws.Int(<span class="number">1</span>),</span><br><span class="line">ScanIndexForward: aws.Bool(<span class="literal">false</span>),</span><br><span class="line">ExpressionAttributeNames: <span class="keyword">map</span>[<span class="type">string</span>]*<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;#id&quot;</span>: aws.String(<span class="string">&quot;id&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">ExpressionAttributeValues: <span class="keyword">map</span>[<span class="type">string</span>]*dynamodb.AttributeValue&#123;</span><br><span class="line"><span class="string">&quot;:id&quot;</span>: &#123;</span><br><span class="line">N: aws.String(<span class="string">&quot;1&quot;</span>),</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">KeyConditionExpression: aws.String(<span class="string">&quot;#id = :id&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cellarData []CellarData</span><br><span class="line">err = dynamodbattribute.UnmarshalListOfMaps(result.Items, &amp;cellarData)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t1, _ := time.Parse(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>, cellarData[<span class="number">0</span>].TimeStamp)</span><br><span class="line">t2 := time.Now().Add(time.Hour + <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">f, _ := strconv.ParseFloat(cellarData[<span class="number">0</span>].Temperature, <span class="number">64</span>)</span><br><span class="line"><span class="keyword">if</span> f &gt; threshold &#123;</span><br><span class="line"><span class="keyword">return</span> toNotify(<span class="string">&quot;セラーの現在の温度は&quot;</span> + cellarData[<span class="number">0</span>].Temperature + <span class="string">&quot;度です&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> t2.After(t1) &#123;</span><br><span class="line"><span class="keyword">return</span> toNotify(cellarData[<span class="number">0</span>].TimeStamp + <span class="string">&quot;以降更新がありません&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">toNotify</span><span class="params">(str <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">const</span> LINE_BOT_CHANNEL_SECRET = <span class="string">&quot;your channel&quot;</span></span><br><span class="line"><span class="keyword">const</span> LINE_CHANNEL_ACCESS_TOKEN = <span class="string">&quot;your token&quot;</span></span><br><span class="line"></span><br><span class="line">bot, err := linebot.New(LINE_BOT_CHANNEL_SECRET, LINE_CHANNEL_ACCESS_TOKEN)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message := linebot.NewTextMessage(str)</span><br><span class="line"><span class="keyword">if</span> _, err := bot.BroadcastMessage(message).Do(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lambda.Start(handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>データの取得はQueryInputで最新のレコードを1件のみ取得しています。<br>2時間以上、更新がなければ通知するようにしたかったのですが、DBにはJSTで時刻が登録されているもののtimestamp型にparseする際、時刻はそのままにUTCに戻ってしまってしまうため、今回は 9(時差) -2 &#x3D;7で現在時刻をずらして無理やり比較しました。(なにをしてるのか意味不明かと思い補足)</p><h3 id="LINE-messaging-API"><a href="#LINE-messaging-API" class="headerlink" title="LINE messaging API"></a>LINE messaging API</h3><p>今回初めて利用しましたが、非常に簡単に実装することができました。</p><p><a href="https://developers.line.biz/ja/">LINE Developers</a>でMessaging APIのチャネルを作成し、払い出されたLINEシークレットとトークンを設定するのみでBotが作成することができます。<br>通知には友達登録をしている人全員にメッセージを送信するBroadcastMessageを使用します。</p><p>実際にテストしてみた結果です。<br><img src="/images/20220901a/IMG_4163.jpg" alt="LINEからの通知" width="351" height="760" loading="lazy"></p><p>これで夏場でも安心して外出できるようになりました。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>今回の仕組みを導入し終えてから1本ワインを開けましたが、いつもより美味しく感じました。</p><p>これは新しいワインの楽しみ方を見出してしまったかもしれません……。</p><p>さて、実際に通知が来てしまった場合ですが、外出先であればとんぼ返りして、セラー内のワインを冷蔵庫に退避させるか、セラー内に氷を置いて温度を下げるなどの対応が必要になります。自分で実装した手前、通知が来てほしい気持ちがありつつも活躍する場面がないと嬉しいですね。複雑です。</p><p>案外手軽に実装することができたので、次はデータだけは蓄積できている湿度<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>も活用して、より厳格な品質管理にチャレンジしてみたいと思います。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">より厳格にはブルゴーニュ地方のもので11～12℃、ボルドー地方のもので13～15℃、カルフォルニアで14～18℃程度が望ましく、どの産地のものを保管するかによって温度をコントロールするのが良いです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">湿度は70～75%程度が望ましいとされています。</span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/IoT/">IoT</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/DynamoDB/">DynamoDB</category>
      
      <category domain="https://future-architect.github.io/tags/ArduinoIDE/">ArduinoIDE</category>
      
      <category domain="https://future-architect.github.io/tags/LINEmessagingAPI/">LINEmessagingAPI</category>
      
      
      <comments>https://future-architect.github.io/articles/20220901a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>買い物で人をつなぐ</title>
      <link>https://future-architect.github.io/articles/20220831b/</link>
      <guid>https://future-architect.github.io/articles/20220831b/</guid>
      <pubDate>Tue, 30 Aug 2022 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220831b/Stable_Diffusion先生に出力してもらったコンセプトアート.png&quot; alt=&quot;&quot; width=&quot;940&quot; height=&quot;627&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;Stable</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220831b/Stable_Diffusion先生に出力してもらったコンセプトアート.png" alt="" width="940" height="627" loading="lazy"><p>Stable Diffusion先生に出力してもらったコンセプトアート</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>このブログは、Google社によるパートナー企業向けのアプリケーション モダナイゼーションに関するテクニカルブログ投稿の集中キャンペーン兼大人の夏休みの宿題の成果になります。</p><p>Google社から、初夏某所、下記のようなお題でテックブログを書いてみませんか？というお誘いが来ました。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">サーバーレス製品を活用し、下記のテーマから選択いただいた社会課題を解決するためのアプリケーションアーキテクチャを投稿してください。</span><br><span class="line"></span><br><span class="line">●対象テーマ: サーバーレス技術を活用した社会課題の解決策</span><br><span class="line">○空き家問題</span><br><span class="line">○買い物難民問題</span><br><span class="line">○東京一極集中</span><br><span class="line">○フードロス問題</span><br></pre></td></tr></table></figure><p>そこでFutureの村田、鈴木、原木の有志三人で定期的に検討会を開き、「買い物難民問題」を解決するためにどのようなサービス、アーキテクチャが好ましいか検討しました。</p><h2 id="お題「買い物難民問題」とそのモチベーション"><a href="#お題「買い物難民問題」とそのモチベーション" class="headerlink" title="お題「買い物難民問題」とそのモチベーション"></a>お題「買い物難民問題」とそのモチベーション</h2><p>私たちのチームでは「買い物難民問題」を選択しました。理由としては、私が今住んでいる関東郊外のとある地域には周囲五キロにスーパーがないという、まさに「買い物難民」当事者だったこと、だからこそ、生協やネットスーパーのようなサービスが今どきあるから既に「問題」じゃないのでは？といった疑問に答えられると思ったからです。</p><p>「買い物難民問題」という言葉を聞いたことがないという人は少ないと思います。しかし、この問題について調べる前の私たちがそうであったように、単純に「買い物」ができるようになれば解決する話ではないことを知る人はそう多くないのではないでしょうか。</p><p>「買い物難民問題」に関して、当事者からヒアリングを行った経済産業委員会調査室の笹井かおり氏による『「買い物難民」問題 ～その現状と解決に向けた取組～』を読むと、単純に解決できない難しさの一端が見えてきます。</p><p>本資料では、関東近辺の高度経済成長期時代に山間部に造成されたニュータウン住民を取り上げています。</p><ul><li>高齢者数が全体の1&#x2F;4を占める</li><li>過去に地域内にあったスーパーが不採算のまま撤退</li><li>70代の住人は家族のために細い未舗装路を自転車で20~30分かけてスーパーで移動している</li><li>元々山を切り開いたところなので道路環境が悪い(GoogleMapで見る限り、坂も多そう)</li><li>現役時代には、都心に通勤し、早朝に家を出て深夜に帰宅する生活を送っていたという高齢者が多い。 <strong>したがって、住民は地域との接点が薄く、住民同士の横の付き合いも希薄なため、住民の連携が不足している。</strong></li><li>今後、高齢の夫婦だけの世帯 や一人暮らしの住民が更に増加することが想定されるため、団地の外まで買い物に行けなくなる人が増加するおそれがある<br>※ブログ著者強調</li></ul><p>こうしてみると、買い物難民は買いたいものが買えればOKでは決してありません。当時の時代背景ではあまり重視されてこなかった、地域コミュニティといったコミュニケーションの乏しさから来る「関係性の希薄さ」が「買い物難民であること」と表裏一体で問題であることが見えてくるのではないでしょうか。また、それが社会問題として全体化しているとはいえ、地域性の強い問題であり、人によって感度の違いはあると思います。</p><p>これらを踏まえた上で、私たちのチームでは全員にとって買い物難民問題を捉えやすくするために、地域の格差を取り払い(かつ将来現実化するかもしれない！？）世界を想定して、「買い物を通じて人との繋がりを生み出す」ための仕組みを考えてみました。</p><h2 id="舞台設定"><a href="#舞台設定" class="headerlink" title="舞台設定"></a>舞台設定</h2><p>これから話す世界では、現実にはない、どこか少し不思議な世界です。そこでは自動運転が発達しており、キャンピングカーのような移動躯体に乗って生活することが当たり前の世界です。「お隣さん」という概念がもはや古くなって久しく、一か所に集まらないことが普通になった世界で、顔を突き合わせたコミュニケーションは過去のものになっていました。</p><p>しかし、こちらの世界で「昭和レトロ」が流行っているように、あちらの世界でも昔のものが形を変えて何度もリバイバルすることはよくあります。最近耳にしたのが、昔ながらのコミュニケーション方法、つまり知らない人と直接会って会話を交わすことが一部で圧倒的な人気を得ているという情報でした…</p><h2 id="サービス概要"><a href="#サービス概要" class="headerlink" title="サービス概要"></a>サービス概要</h2><p>私たちのチームでは、「買い物」x「人との繋がり」x「(あちらの世界の)レトロ」という軸で、買い物をきっかけに人との繋がりを生み出す新しいサービスを提案します。</p><img src="/images/20220831b/ビジネスモデル.png" alt="ビジネスモデル" width="940" height="529" loading="lazy"><h2 id="主なシステム要件"><a href="#主なシステム要件" class="headerlink" title="主なシステム要件"></a>主なシステム要件</h2><ul><li>各ユーザーは手元のアプリから「欲しいもの」「受け取りたいエリア」「受け取りたい時間帯」「一緒に受け取りたい他のユーザーの属性情報」を登録できる</li><li>アプリは複数のユーザー「受け取りたいエリア」をベースに、配達先を設定する</li><li>自動宅配車が欲しい物を指定の時間・場所へ届け、各ユーザーはそこにて交流の機会を得る</li><li>各ユーザーに別途入力されたプロフィール情報を元に、交流のテーマを設定する<br>※たとえば自家製パンの製造を趣味にしている人で集まることで食材などをある程度共通化する</li><li>一定人数が揃わないと空けることができないコンポーネントなどを設けることで「まとめ買い」による販売を促進する</li></ul><h2 id="システム全体の概要図"><a href="#システム全体の概要図" class="headerlink" title="システム全体の概要図"></a>システム全体の概要図</h2><img src="/images/20220831b/全体概要図.png" alt="全体概要図" width="940" height="529" loading="lazy"><h3 id="ポイント1-位置情報のリアルタイム更新"><a href="#ポイント1-位置情報のリアルタイム更新" class="headerlink" title="ポイント1: 位置情報のリアルタイム更新"></a>ポイント1: 位置情報のリアルタイム更新</h3><img src="/images/20220831b/位置情報のリアルタイム更新.png" alt="位置情報のリアルタイム更新" width="940" height="433" loading="lazy"><p>本サービスでは物理的に直接会えることが重要なので、地理情報を予め分割した状態で永続層に持たせることで、「ユーザーの現在の場所」「商品受け取り場所(合流地点)」を更新、索引できるようにする必要があります。</p><p>位置情報の検索処理を検討する上で、課題の一つがどのように位置情報をデータベースに格納すれば効率的か？ということです。”移動躯体”がラピュタのように空を飛んでいるのではなく、地上を走行することを考えた場合、地上データは密にデータを管理する必要がありますが、海上や湖上という場所はそんなに必要ないかもしれません。</p><p>こちらの世界で、マッチングサービスとして稼働しているTinderでは、Googleが提供しているジオメトリライブラリである<a href="https://s2geometry.io/">S2 Geometry Library</a>を活用することでジオシャーディング(地理情報のインデックス化)を行い、Elasticsearch クラスターに入れているようです。そのロジック自体非常に興味深い内容ではあるのですが、本ブログでは割愛させていただきます。なにかしらの方法でジオシャーディングを行ったデータをデータベースに格納し、ビジネスサービス用アプリケーションと繋がっているとします。</p><p>ここでは、「ユーザ（ここでは移動躯体）」の位置情報は定期的にクラウドと同期され、Google Cloud上にデジタルツイン(現実世界の情報がクラウド上に再現されること)が構築される状態を実現します。定期的な位置情報の更新に合わせ、各ユーザの所属するジオシャードは常に更新される仕組みを考えました。</p><p>デジタルツインを実現するためには、定期的な位置情報更新が必要ですが、それを裏で支えるために、パフォーマンスはなくてはならないポイントです。位置情報は利用者に合わせて同期的に送られるため、ビジネスのスケールに応じて多くのトラフィックを処理しなくてはいけないかもしれません。そのためにキューイングをクライアントとデータベースの間に噛ませることで、混雑を緩和させます。</p><p>こちらの世界で身近なところでいえば、タクシー用のシステムは上記要件と近しいと思われます。たとえば、タクシーアプリ『Go』を開発しているチームではアーキテクチャを公開しており、中でも位置情報を捌く「動態収集・配信システム」は興味深い実装をしています。メインシステムはGoogle Cloud上で動かしていますが、ManagedServiceであるGoogle Cloud Pub&#x2F;Subを使わずに、Pub&#x2F;SubをGKE上のアプリケーション、キュー情報をMemorystore for Redisで管理するようにしています。おそらく、Pub&#x2F;Subにおいてデータ加工等の業務要件があり、採用できなかったのだと思われます。現在でしたらCloud Pub&#x2F;Subとネイティブ結合されたDataflowを用いるなど別の選択肢がありえたかもしれません。</p><p>以上を踏まえて、本サービスでは位置情報の更新処理にあたり、Cloud Pub&#x2F;SubサービスとElastic Cloud(ElasticSearchのManagedService、 非GoogleCloud)を採用させていただきました。</p><h3 id="ポイント2-マッチングサービス"><a href="#ポイント2-マッチングサービス" class="headerlink" title="ポイント2: マッチングサービス"></a>ポイント2: マッチングサービス</h3><img src="/images/20220831b/マッチングサービス.png" alt="マッチングサービス" width="940" height="498" loading="lazy"><p>今回のシステムの要は、「買い物」を契機としたマッチングサービスです。上記で検討した位置情報検索サービスを元に付近のユーザーを探し、一緒に買い物をする場所を提供します。</p><p>単に近い場所にいるユーザーであればいいというわけではありません。マッチングするための要素として最も重要視しているのが、「買い物」対象について同じ指向を持つユーザー同士を引き合わすための仕組みです。※あえて嗜好ではなく指向と書いています</p><p>異なる食文化が摩擦を生み出す経験は、私もかつて卵焼きに砂糖を入れたことで、すれ違いという苦い思いをしたのでよくわかるのですが、それゆえにすり合わせは重要です。「買い物」を契機としてユーザー同士がつながりをもってもらうために、買い物対象はある程度傾向が同じであることが望ましいです。ビジネスサイドから見ても、多くの重複があることで食材の品種をある程度絞れるので、効率的な調達や配送ができることからメリットは大きいでしょう。</p><p>それでは、マッチングサービスの実装はどうなるのでしょうか？Googleのテックブログでは、今回によく似た事例として「Vertex AI を利用して強化学習レコメンデーション アプリケーションをビルドする」として強化学習を行うための仕組みが紹介されています。この仕組みでは、ユーザーが試行を重ねることで精度を上げられるため、聞き放題のような試行回数を気軽に重ねられるシステムでは非常に有効ですが、本サービスでは残念ながらそのままブログの内容を流用できません。しかし、本質的なところは同じです。ユーザーの指向を特徴量として抽出したりベクトル化した上で、似たユーザーを引き合わすことが目標になります。</p><p>プラットフォーム上ではどんなレコメンデーションアルゴリズムを動かせば良いでしょうか。今回のブログでは、その詳細まで踏み込みませんが、参考文献をいくつか取り上げます。</p><p>たとえば、Alibabaクラウドのテックブログ「Basic Concepts and Architecture of a Recommender System」ではマルチチャンネルマッチング(複数のレコメンデーションアルゴリズムを元に三者協議する仕組み)とランキング(マッチングの条件にあてはまるものを優先度に応じて並び替えること)がEコマースにおいて重要だと伸べています。</p><p>今大きな隆盛を見せているディープラーニングも候補に入るでしょう。<a href="https://techblog.zozo.com/entry/deep-learning-recommendation-improvement">ZOZOさんのテックブログ</a>ではディープラーニングを活用したレコメンデーション用アルゴリズムをいくつか紹介していますが、こちらも参考になりそうです。</p><p>マッチングの中には禁忌の組み合わせが考えられます。マッチングサービスにおいて論争になりそうな組み合わせ(先ほどの卵焼きにおける塩&#x2F;砂糖問題)はルールベースで記載しておいて、ファインチューニングで定期的にモデルから取り除く努力が必要そうです。</p><p>上記を踏まえて、本サービスでは下記のような処理を検討しました。</p><ol><li>注文を受注する「注文サービス」から、ユーザーの購買履歴やサービスの閲覧ログなどを「パーソナルデータ」として保存します</li><li>パーソナルデータから、ユーザーを特定する機微情報などを取り除いた「レコメンド向け購買データ」をBigQueryに保存します<br> a.このデータはマッチングサービス以外にも、購買予測や調達システムなどでも使用します</li><li>「レコメンド向け購買データ」をVertex AIの機械学習処理にかけて、どういった購買履歴を持つユーザー同士なら親和性が高くなりそうか、推論エンジンを作成します</li><li>注文後、マッチングを待つ「マッチングウェイティングサービス」から、下記条件で絞り込みを行い、マッチングを成立させます<br> a. 「ジオシャード」から取得した位置情報<br> b. 推論エンジンによるユーザー親和性判定</li></ol><h2 id="その他のポイント"><a href="#その他のポイント" class="headerlink" title="その他のポイント"></a>その他のポイント</h2><p>本ブログでは書ききれなかった、アプリケーションアーキテクチャの考察ポイントであった議論をこちらで供養します</p><ul><li>「グループマッチング」と「受取地点・時間確定」の順番</li></ul><p>今回のサービスは、「グループマッチング」した後で、「受取地点・時間確定」を決めていましたが、その逆もありえたかと思います。単純に落ち合う場所を最初に確保するだけではなく、街コンのようにテーマを決めた上で参加するような形式も今後このサービスが発展した上でありえるかもしれないと議論になりました。</p><p>最終的に「この世界では皆が自由なんだ。場所に縛られたくない」という、異世界転生者の一言で「グループマッチング」→「受取地点・時間確定」の順番になりました。</p><ul><li>自動運転車の走行を支えるためのシステム。あるいは自動運転を裏で支える機械学習プラットフォームのデザイン</li></ul><p>機械学習のモデル構築は重要な作業ですが、そもそもそのためのトレーニング環境をいかに自動化するかというのも大きなポイントです。たとえば、「<a href="https://cloud.google.com/blog/ja/products/containers-kubernetes/how-cruise-tests-its-avs-on-a-google-cloud-platform">自律走行車のための継続的インテグレーションと継続的デリバリーを Google Cloud で構築する</a>」を見ると、現実かゲームか？と見間違うような仮想環境、そして道路上で起こりうるイベントを人手を介さずに自動で構築し、自律走行のためにトレーニング環境として活用しているかわかります。E2Eテストの延長線上に広がっている世界に戦慄しました。</p><ul><li>「支払い」を支えるためのシステムデザイン</li></ul><p>PSP(決済代行業者、クレジットカード会社とユーザーの間に入って決済処理を代わりに行ってくれる企業)を用いて決済を行った場合、ユーザーが買い物をした後決済が完了するまでには一定の待ち時間が発生します。それをどういったロジックで吸収するのか、アーキテクチャ図を元に議論しました。</p><ul><li>地図における最適な経路を決めるナビゲーションシステムのデザイン</li><li>買い物対象を、JITで調達するためのサプライチェーンマネジメントシステムのデザイン</li><li>無人配送車から商品を安全に受け取るための本人確認&#x2F;認証に関するシステムデザイン</li></ul><p>今回は議論できませんでしたが、興味深いテーマです。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>以上、「買い物を通じて人と人を繋ぐ」サービスとそのアプリケーションアーキテクチャの紹介でした。</p><p>今回の取り組みで最初に論点になったのが、こちらの世界で既にある既存サービスとの競合をいかに避けるかという点でした。最終的に異世界転生でいいんじゃないか？という発想で解決しましたが、その結果、自由にシステムデザインを行うことができて良かったのではないかと思います。</p><p>最後に、こちらの世界で行われている取り組み、事業を紹介します。</p><p>「買い物難民問題」でよく問題が表面化するのが、「採算が取れずに近所のスーパーが撤退してしまった」ことです。その隙間を埋める一つに、一事業所のカバー領域が広く、人口密度が低い田舎であっても採算を確保できるネットスーパーがあります。しかし、すべての人の助けになるかといえば難しく、一部のデジタル化から取り残された高齢者、地方密着型スーパーのような新たな追加投資が難しい事業者の淘汰という新たな問題が生じました。</p><p>そこで最近名前を聞くようになったのが、「<a href="https://www.tokushimaru.jp/">とくし丸</a>」です。「<a href="https://www.itmedia.co.jp/business/articles/2206/11/news022.html">移動スーパー「とくし丸」はなぜ“独走”しているのか　1000台突破の舞台裏</a>」にあるように、地方のスーパーと協業したフランチャイズモデルを確立することで、採算性という大きなネックを解決しつつ、ネットスーパーではフォローできなかった人たちへの支えとなりました。</p><p>もちろん、官公庁でも「買い物難民問題」を座して解決を待っているわけではありません。農林水産省では「<a href="https://www.maff.go.jp/j/shokusan/eat/syoku_akusesu.html">食料品アクセス（買い物弱者・買い物難民等）問題ポータルサイト</a>」を立ち上げて、解決に向けた施策を実施、事業支援を行っています。<a href="https://www.maff.go.jp/j/shokusan/eat/access_jirei.html">地域に応じた各地での買い物支援の取組</a>では、様々な事例が紹介されており、今回のサービスでも、ビジネスの種として参考にさせていただきました。</p><p>中でも印象深かったのが兵庫県神河町・寺前楽座 「 まちの灯り 」 の事例です。地区唯一のスーパーが運営難により閉店後、地元企業や住民出資により運営会社「株式会社 寺前村振興公社」を自ら設立し、再建されたスーパーになります。</p><blockquote><p>消えたまちの灯りを取り戻すべく屋号は「まちの灯り」に決定。また寺前11集落全世帯から1万円を支援金として募り、地区住民自ら意識を持ってスーパーの経営、運営にあたるべく代表を一人、監査役として同公社に配置されたそう。<br>引用元: <a href="https://iimono.town/topic/life/18862/">https://iimono.town/topic/life/18862/</a></p></blockquote><p>さらには前のスーパーが閉店したときに勤めていた店長・従業員全員を新しい店舗でも再雇用したとのことで、地域でスーパーを守っていくという強い意志が感じられる取り組みでした。</p><p>再建後、四年経ちましたが、Googleの口コミでも、小さめなスーパーだが地域に密着した良いスーパーだと評判は良いようです。そこ目当てで旅行するには敷居が少々高そうですが、最寄りの寺前駅から播但線で更に北上すれば、天空の城で有名な竹田城跡があります。寄り道にはちょうどいいのではないでしょうか。</p><h2 id="参考資料"><a href="#参考資料" class="headerlink" title="参考資料"></a>参考資料</h2><ul><li>Basic Concepts and Architecture of a Recommender System<ul><li><a href="https://www.alibabacloud.com/blog/basic-concepts-and-architecture-of-a-recommender-system_596642">https://www.alibabacloud.com/blog/basic-concepts-and-architecture-of-a-recommender-system_596642</a></li></ul></li><li>ディープラーニングを活用したレコメンドエンジン改善への取り組み<ul><li><a href="https://techblog.zozo.com/entry/deep-learning-recommendation-improvement">https://techblog.zozo.com/entry/deep-learning-recommendation-improvement</a></li></ul></li><li>Vertex AI を利用して強化学習レコメンデーション アプリケーションをビルドする<ul><li><a href="https://cloud.google.com/blog/ja/topics/developers-practitioners/build-reinforcement-learning-recommendation-application-using-vertex-ai">https://cloud.google.com/blog/ja/topics/developers-practitioners/build-reinforcement-learning-recommendation-application-using-vertex-ai</a></li></ul></li><li>Geosharded Recommendations Part 1: Sharding Approach<ul><li><a href="https://medium.com/tinder/geosharded-recommendations-part-1-sharding-approach-d5d54e0ec77a">https://medium.com/tinder/geosharded-recommendations-part-1-sharding-approach-d5d54e0ec77a</a></li></ul></li><li>技術書典頒布のタクシーアプリ『GO』アーキテクチャ図録を一挙解説<ul><li><a href="https://lab.mo-t.com/blog/mot-online-techtalk-7">https://lab.mo-t.com/blog/mot-online-techtalk-7</a></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Bussiness/">Bussiness</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E8%B2%B7%E3%81%84%E7%89%A9/">買い物</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%A4%BE%E4%BC%9A%E5%95%8F%E9%A1%8C/">社会問題</category>
      
      <category domain="https://future-architect.github.io/tags/GoogleCloud/">GoogleCloud</category>
      
      
      <comments>https://future-architect.github.io/articles/20220831b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>OpenAPI Generatorでrust-serverのコードを生成して、GET/POSTメソッドを呼び出すまで</title>
      <link>https://future-architect.github.io/articles/20220831a/</link>
      <guid>https://future-architect.github.io/articles/20220831a/</guid>
      <pubDate>Tue, 30 Aug 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220831a/beach-g4cba82d86_640.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;404&quot;&gt;

&lt;p&gt;TIG</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220831a/beach-g4cba82d86_640.png" alt="" width="600" height="404"><p>TIG DXユニットの中川旭です。</p><p>夏の自由研究ということで、趣味で作ったものを一部改変して記事化しました。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>コードのサンプルを以下のリポジトリに配置しました。<br>記事には重要な部分を記載しているので、コード全体を見たい場合にはリポジトリを参照してください。<br><a href="https://github.com/modockey/openapi-rust">https://github.com/modockey/openapi-rust</a></p><p>以下が使用できることを前提としています。</p><ul><li>rustup</li><li>npm</li><li>GNU make</li><li>docker</li></ul><p>手元の環境はUbuntu20.04LTS on WSL2です。</p><h2 id="YAMLファイルの記述"><a href="#YAMLファイルの記述" class="headerlink" title="YAMLファイルの記述"></a>YAMLファイルの記述</h2><p>まずはYAMLファイルにAPIのスキーマを記述します。<br>同一PATH(&#x2F;ip)にGET&#x2F;POSTメソッドをそれぞれ用意しました。</p><p>内容は変化してしまう自宅のグローバルIPの管理のための機能です。</p><ul><li>GET: DBに登録された最新のグローバルIPアドレスを取得する</li><li>POST: グローバルIPアドレスをDBに登録する。最新のものと同じ場合は確認時刻として記録し、異なる場合は新規登録する。</li></ul><figure class="highlight yaml"><figcaption><span>openapi.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">openapi:</span> <span class="number">3.0</span><span class="number">.3</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">&quot;GET/POST IPv4 Address&quot;</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">&quot;openapi-rust&quot;</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;IP&quot;</span></span><br><span class="line"><span class="attr">paths:</span></span><br><span class="line">  <span class="string">/ip:</span></span><br><span class="line">    <span class="attr">get:</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">&quot;200&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;Get Global IPv4 address of the system&quot;</span></span><br><span class="line">          <span class="attr">content:</span></span><br><span class="line">            <span class="attr">application/json:</span></span><br><span class="line">              <span class="attr">schema:</span></span><br><span class="line">                <span class="attr">type:</span> <span class="string">object</span></span><br><span class="line">                <span class="attr">properties:</span></span><br><span class="line">                  <span class="attr">IPv4_address:</span></span><br><span class="line">                    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">                    <span class="attr">format:</span> <span class="string">ipv4</span></span><br><span class="line">                  <span class="attr">checked_at:</span></span><br><span class="line">                    <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">                    <span class="attr">format:</span> <span class="string">date-time</span></span><br><span class="line">        <span class="attr">&quot;500&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;Internal Server Error&quot;</span></span><br><span class="line">    <span class="attr">post:</span></span><br><span class="line">      <span class="attr">requestBody:</span></span><br><span class="line">        <span class="attr">description:</span> <span class="string">&quot;IPv4 address to register&quot;</span></span><br><span class="line">        <span class="attr">content:</span></span><br><span class="line">          <span class="attr">application/json:</span></span><br><span class="line">            <span class="attr">schema:</span></span><br><span class="line">              <span class="attr">properties:</span></span><br><span class="line">                <span class="attr">IPv4_address:</span></span><br><span class="line">                  <span class="attr">type:</span> <span class="string">string</span></span><br><span class="line">                  <span class="attr">format:</span> <span class="string">ipv4</span></span><br><span class="line">      <span class="attr">responses:</span></span><br><span class="line">        <span class="attr">&quot;200&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;The new IPv4 address has been registered&quot;</span></span><br><span class="line">        <span class="attr">&quot;500&quot;:</span></span><br><span class="line">          <span class="attr">description:</span> <span class="string">&quot;Internal Server Error&quot;</span></span><br></pre></td></tr></table></figure><h2 id="コード生成"><a href="#コード生成" class="headerlink" title="コード生成"></a>コード生成</h2><p>OpenAPI Generatorのリポジトリに使用方法が書いてあるので、好きな方法で使用しましょう。<br><a href="https://github.com/OpenAPITools/openapi-generator#openapi-generator">https://github.com/OpenAPITools/openapi-generator#openapi-generator</a></p><p>いくつか方法がありますが、今回はNPMを使用してインストールしました。<br>npmを使用することができれば、以下のようにインストールするだけで使用可能です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @openapitools/openapi-generator-cli -g</span><br></pre></td></tr></table></figure><p>さて、Makefileに以下のように記載しておきましょう。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">generate:</span></span><br><span class="line">openapi-generator-cli generate \</span><br><span class="line">    -i ./openapi.yaml \</span><br><span class="line">    -g rust-server \</span><br><span class="line">    -o .</span><br></pre></td></tr></table></figure><p>この状態で<code>make generate</code> でコードを生成すると、もともと配置していた<code>Makefile</code>と<code>openapi.yaml</code>の他にたくさんのファイルが生成されます。<br>親切に、Markdownのドキュメントまで生成してくれていますね。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ tree</span><br><span class="line">.</span><br><span class="line">├── Cargo.toml</span><br><span class="line">├── Makefile</span><br><span class="line">├── README.md</span><br><span class="line">├── api</span><br><span class="line">│   └── openapi.yaml</span><br><span class="line">├── docs</span><br><span class="line">│   ├── IpGet200Response.md</span><br><span class="line">│   └── default_api.md</span><br><span class="line">├── examples</span><br><span class="line">│   ├── ca.pem</span><br><span class="line">│   ├── client</span><br><span class="line">│   │   └── main.rs</span><br><span class="line">│   ├── server</span><br><span class="line">│   │   ├── main.rs</span><br><span class="line">│   │   └── server.rs</span><br><span class="line">│   ├── server-chain.pem</span><br><span class="line">│   └── server-key.pem</span><br><span class="line">├── openapi.yaml</span><br><span class="line">├── openapitools.json</span><br><span class="line">└── src</span><br><span class="line">    ├── client</span><br><span class="line">    │   └── mod.rs</span><br><span class="line">    ├── context.rs</span><br><span class="line">    ├── header.rs</span><br><span class="line">    ├── lib.rs</span><br><span class="line">    ├── models.rs</span><br><span class="line">    └── server</span><br><span class="line">        └── mod.rs</span><br></pre></td></tr></table></figure><h2 id="DBの準備"><a href="#DBの準備" class="headerlink" title="DBの準備"></a>DBの準備</h2><p>本体部分の前に、アクセス対象のDBの説明をしておきます。<br>今回はPostgreSQLをDockerで使用します。</p><p>以下のように設定ファイルを作成しました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Makefile</span><br><span class="line">├── database</span><br><span class="line">│   ├── Dockerfile</span><br><span class="line">│   └── init</span><br><span class="line">│       ├── ddl.sql</span><br><span class="line">│       └── dml.sql</span><br><span class="line">└─── docker-compose.yml</span><br></pre></td></tr></table></figure><p>説明の都合上、テーブル定義とテストデータの内容だけ記載します。<br>他の部分は必要であればリポジトリを参照してください。</p><figure class="highlight sql"><figcaption><span>ddl.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> ipv4_history;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ipv4_history (</span><br><span class="line">  id serial,</span><br><span class="line">  ipv4_address <span class="type">varchar</span>(<span class="number">15</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  effective_flg <span class="type">boolean</span> <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  created_at timestamptz <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  updated_at timestamptz <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  last_checked_at timestamptz <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>dml.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> ipv4_history;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span></span><br><span class="line">  ipv4_history (</span><br><span class="line">    id,</span><br><span class="line">    ipv4_address,</span><br><span class="line">    effective_flg,</span><br><span class="line">    created_at,</span><br><span class="line">    updated_at,</span><br><span class="line">    last_checked_at</span><br><span class="line">  )</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">  (</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;111.111.111.111&#x27;</span>,</span><br><span class="line">    <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&#x27;2022-01-01 00:00:00Z&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2022-01-01 00:00:00Z&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2022-01-01 00:00:00Z&#x27;</span></span><br><span class="line">  ),</span><br><span class="line">  (</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;112.112.112.112&#x27;</span>,</span><br><span class="line">    <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&#x27;2022-01-02 00:00:00Z&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2022-01-02 00:00:00Z&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2022-01-02 00:00:00Z&#x27;</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure><p>これにより以下コマンドでDBの起動とテストデータの準備を行うことができるようになりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make setup</span><br></pre></td></tr></table></figure><h2 id="生成されたコードの確認-amp-cargo-run-で動かせるようコードを移動"><a href="#生成されたコードの確認-amp-cargo-run-で動かせるようコードを移動" class="headerlink" title="生成されたコードの確認 &amp; cargo run で動かせるようコードを移動"></a>生成されたコードの確認 &amp; cargo run で動かせるようコードを移動</h2><p>生成されたコードをどう使えばいいのか、<code>README.md</code>を確認してみると以下の記載があります。</p><figure class="highlight markdown"><figcaption><span>README.md</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">### Running the example server</span></span><br><span class="line">To run the server, follow these simple steps:</span><br><span class="line"></span><br><span class="line">cargo run --example server</span><br></pre></td></tr></table></figure><p><a href="https://doc.rust-lang.org/cargo/reference/cargo-targets.html#examples">公式ドキュメント</a>に記載があるように、このコマンドでは<code>./examples/server/main.rs</code>が実行されます。</p><p>ということで、<code>./example/</code>配下のコードを<code>./src</code>配下にコピーします。<br><code>server.rs</code>は名前が<code>server</code>ディレクトリと衝突するので名前を変更しておきましょう。今回は<code>api.rs</code>とします。</p><p>これに合わせ、<code>main.rs</code>のmod宣言と使用部分を以下のように変更します。</p><figure class="highlight rust"><figcaption><span>./src/main.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mod</span> api;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><figcaption><span>./src/main.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">api::<span class="title function_ invoke__">create</span>(addr, matches.<span class="title function_ invoke__">is_present</span>(<span class="string">&quot;https&quot;</span>)).<span class="keyword">await</span>;</span><br></pre></td></tr></table></figure><p>この状態で<code>cargo run</code>をすると以下のようなエラーになります。<code>cargo add</code>で追加しましょう。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error[E0433]: failed to resolve: use of undeclared crate or module `tokio`</span><br></pre></td></tr></table></figure><p>自分の場合はエラーログから必要だった以下のcrateを追加しました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo add tokio clap env_logger tokio_openssl</span><br></pre></td></tr></table></figure><p>改めて<code>cargo run</code>で実行すると、<code>localhost:8080</code>にサーバーが立ちます。</p><p>サーバーを立てて以下のようにcurlでGETをしてみると</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl localhost:8080/ip</span><br></pre></td></tr></table></figure><p>処理が実装されていないため以下のレスポンスが返ってきます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">An internal error occurred</span><br></pre></td></tr></table></figure><p>では、実装していきましょう。</p><h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><p>今回は<code>./src</code>に<code>db.rs</code>,<code>usecase.rs</code>を新規作成します。さらに、先ほど<code>./examples/server/server.rs</code>をコピーして作成した<code>api.rs</code>にも追記します。<br>それぞれに記載する内容は以下とします。</p><ul><li><code>db.rs</code>(新規): DBとのIO、<code>src/db/</code>には<code>db.rs</code>から呼び出すORM用のファイルを配置する</li><li><code>usecase.rs</code>(新規): DBとのIOを呼び出すロジック</li><li><code>api.rs</code>(追記): リクエストのハンドリング</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">└── src</span><br><span class="line">    ├── api.rs</span><br><span class="line">    ├── client</span><br><span class="line">    ├── context.rs</span><br><span class="line">    ├── db</span><br><span class="line">    │   ├── model</span><br><span class="line">    │   │   └── schema.rs</span><br><span class="line">    │   └── model.rs</span><br><span class="line">    ├── db.rs</span><br><span class="line">    ├── header.rs</span><br><span class="line">    ├── lib.rs</span><br><span class="line">    ├── main.rs</span><br><span class="line">    ├── models.rs</span><br><span class="line">    ├── usecase.rs</span><br><span class="line">    └── server</span><br></pre></td></tr></table></figure><h4 id="db-rsの実装"><a href="#db-rsの実装" class="headerlink" title="db.rsの実装"></a>db.rsの実装</h4><p>今回はRustのORMとしてメジャーなDieselを使用するため、<code>cargo add</code>をします。<br>DieselでPostgresSQLと日時を扱いたいので<code>--features &quot;postgres chrono&quot;</code>を引数としています。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo add diesel --no-default-features --features <span class="string">&quot;postgres chrono&quot;</span></span><br></pre></td></tr></table></figure><p>また、設定のためにdiesel_cliをinstallします。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo install diesel_cli</span><br></pre></td></tr></table></figure><p>diesel_cliを使用して<code>db.go</code>から参照するスキーマを作成します。<br>.envファイルに環境変数をセットして、print-schemaを実行しましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DATABASE_URL=postgres://postgres:postgres@localhost/postgres &gt; .<span class="built_in">env</span></span><br><span class="line">diesel print-schema &gt; ./src/db/model/schema.rs</span><br></pre></td></tr></table></figure><p>指定したファイルにschemaが出力されます。</p><figure class="highlight rust"><figcaption><span>src/db/model/schema.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">table! &#123;</span><br><span class="line">    <span class="title function_ invoke__">ipv4_history</span> (id) &#123;</span><br><span class="line">        id <span class="punctuation">-&gt;</span> Int4,</span><br><span class="line">        ipv4_address <span class="punctuation">-&gt;</span> Varchar,</span><br><span class="line">        effective_flg <span class="punctuation">-&gt;</span> Bool,</span><br><span class="line">        created_at <span class="punctuation">-&gt;</span> Timestamptz,</span><br><span class="line">        updated_at <span class="punctuation">-&gt;</span> Timestamptz,</span><br><span class="line">        last_checked_at <span class="punctuation">-&gt;</span> Timestamptz,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SELECTやINSERTをマップする構造体を定義します。</p><figure class="highlight rust"><figcaption><span>src/db/model.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> chrono::&#123;DateTime, Utc&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> schema;</span><br><span class="line"><span class="keyword">use</span> schema::ipv4_history;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[allow(dead_code)]</span></span><br><span class="line"><span class="meta">#[derive(Clone, Queryable)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Ipv4Record</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> id: <span class="type">i32</span>,</span><br><span class="line">    <span class="keyword">pub</span> ipv4_address: <span class="type">String</span>,</span><br><span class="line">    effective_flg: <span class="type">bool</span>,</span><br><span class="line">    created_at: DateTime&lt;Utc&gt;,</span><br><span class="line">    updated_at: DateTime&lt;Utc&gt;,</span><br><span class="line">    <span class="keyword">pub</span> last_checked_at: DateTime&lt;Utc&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Insertable)]</span></span><br><span class="line"><span class="meta">#[table_name = <span class="string">&quot;ipv4_history&quot;</span>]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">NewIpV4Record</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> ipv4_address: <span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> effective_flg: <span class="type">bool</span>,</span><br><span class="line">    <span class="keyword">pub</span> created_at: DateTime&lt;Utc&gt;,</span><br><span class="line">    <span class="keyword">pub</span> updated_at: DateTime&lt;Utc&gt;,</span><br><span class="line">    <span class="keyword">pub</span> last_checked_at: DateTime&lt;Utc&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DBを扱う際に使用する便利なメソッドをいくつか用意します。</p><figure class="highlight rust"><figcaption><span>src/db.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> chrono::Utc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> diesel::prelude::*;</span><br><span class="line"><span class="keyword">use</span> diesel::&#123;insert_into, update&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> model;</span><br><span class="line"><span class="keyword">use</span> model::schema::ipv4_history::dsl::*;</span><br><span class="line"><span class="keyword">use</span> model::&#123;Ipv4Record, NewIpV4Record&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> dotenv::dotenv;</span><br><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">establish_connection</span>() <span class="punctuation">-&gt;</span> PgConnection &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">cfg!</span>(test) | <span class="built_in">cfg!</span>(debug_assertions) &#123;</span><br><span class="line">        <span class="title function_ invoke__">dotenv</span>().<span class="title function_ invoke__">ok</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">database_url</span> = env::<span class="title function_ invoke__">var</span>(<span class="string">&quot;DATABASE_URL&quot;</span>).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;DATABASE_URL must be set&quot;</span>);</span><br><span class="line">    PgConnection::<span class="title function_ invoke__">establish</span>(&amp;database_url).<span class="title function_ invoke__">expect</span>(&amp;<span class="built_in">format!</span>(<span class="string">&quot;Error connecting to &#123;&#125;&quot;</span>, database_url))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">get_effective_records</span>(conn: &amp;PgConnection) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;Ipv4Record&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ipv4_effective</span> = ipv4_history</span><br><span class="line">        .<span class="title function_ invoke__">filter</span>(effective_flg.<span class="title function_ invoke__">eq</span>(<span class="literal">true</span>))</span><br><span class="line">        .load::&lt;Ipv4Record&gt;(conn)</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Error loading ipv4_history&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ipv4_effective;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">insert_record</span>(conn: &amp;PgConnection, address: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> Ipv4Record &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">now</span> = Utc::<span class="title function_ invoke__">now</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">new_ipv4_record</span> = NewIpV4Record &#123;</span><br><span class="line">        ipv4_address: address.<span class="title function_ invoke__">to_string</span>(),</span><br><span class="line">        effective_flg: <span class="literal">true</span>,</span><br><span class="line">        created_at: now,</span><br><span class="line">        updated_at: now,</span><br><span class="line">        last_checked_at: now,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_ invoke__">insert_into</span>(ipv4_history)</span><br><span class="line">        .<span class="title function_ invoke__">values</span>(new_ipv4_record)</span><br><span class="line">        .<span class="title function_ invoke__">get_result</span>(conn)</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Error saving record&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">disable_record</span>(conn: &amp;PgConnection, target_id: &amp;<span class="type">i32</span>) <span class="punctuation">-&gt;</span> Ipv4Record &#123;</span><br><span class="line">    <span class="title function_ invoke__">update</span>(ipv4_history.<span class="title function_ invoke__">find</span>(target_id))</span><br><span class="line">        .<span class="title function_ invoke__">set</span>((effective_flg.<span class="title function_ invoke__">eq</span>(<span class="literal">false</span>), updated_at.<span class="title function_ invoke__">eq</span>(Utc::<span class="title function_ invoke__">now</span>())))</span><br><span class="line">        .get_result::&lt;Ipv4Record&gt;(conn)</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(&amp;<span class="built_in">format!</span>(<span class="string">&quot;Error Update Record &#123;&#125;&quot;</span>, target_id))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">update_last_checked_at</span>(conn: &amp;PgConnection, target_id: &amp;<span class="type">i32</span>) <span class="punctuation">-&gt;</span> Ipv4Record &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">now</span> = Utc::<span class="title function_ invoke__">now</span>();</span><br><span class="line">    <span class="title function_ invoke__">update</span>(ipv4_history.<span class="title function_ invoke__">find</span>(target_id))</span><br><span class="line">        .<span class="title function_ invoke__">set</span>((last_checked_at.<span class="title function_ invoke__">eq</span>(now), updated_at.<span class="title function_ invoke__">eq</span>(now)))</span><br><span class="line">        .get_result::&lt;Ipv4Record&gt;(conn)</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(&amp;<span class="built_in">format!</span>(<span class="string">&quot;Error Update Record &#123;&#125;&quot;</span>, target_id))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="usecase-rsの実装"><a href="#usecase-rsの実装" class="headerlink" title="usecase.rsの実装"></a>usecase.rsの実装</h4><p>GET、POSTメソッドで呼び出すロジックを記載しています。ここから<code>db.rs</code>にある関数を呼び出します。</p><figure class="highlight rust"><figcaption><span>./src/usecase.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> crate::db;</span><br><span class="line"><span class="keyword">use</span> db::*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">get_effective_ipv4_record</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;db::model::Ipv4Record, <span class="type">String</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">conn</span> = <span class="title function_ invoke__">establish_connection</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">effective_records</span> = <span class="title function_ invoke__">get_effective_records</span>(&amp;conn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> effective_records.<span class="title function_ invoke__">len</span>() == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(<span class="string">&quot;IPv4 record not found&quot;</span>.<span class="title function_ invoke__">into</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> effective_records.<span class="title function_ invoke__">len</span>() &gt; <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(<span class="string">&quot;Too many IPv4 records have been found&quot;</span>.<span class="title function_ invoke__">into</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">Ok</span>(effective_records[<span class="number">0</span>].<span class="title function_ invoke__">clone</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">post_ip4_address</span>(ipv4_address: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(), <span class="type">String</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">conn</span> = <span class="title function_ invoke__">establish_connection</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">effective_records</span> = <span class="title function_ invoke__">get_effective_records</span>(&amp;conn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> effective_records.<span class="title function_ invoke__">len</span>() == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">insert_record</span>(&amp;conn, ipv4_address);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">Ok</span>(());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> effective_records.<span class="title function_ invoke__">len</span>() &gt; <span class="number">1</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(<span class="string">&quot;Too many IPv4 records have been found&quot;</span>.<span class="title function_ invoke__">into</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ipv4_address == effective_records[<span class="number">0</span>].ipv4_address &#123;</span><br><span class="line">        <span class="title function_ invoke__">update_last_checked_at</span>(&amp;conn, &amp;effective_records[<span class="number">0</span>].id);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">Ok</span>(());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">disable_record</span>(&amp;conn, &amp;effective_records[<span class="number">0</span>].id);</span><br><span class="line">    <span class="title function_ invoke__">insert_record</span>(&amp;conn, ipv4_address);</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="api-rsの実装"><a href="#api-rsの実装" class="headerlink" title="api.rsの実装"></a>api.rsの実装</h4><p>リクエストをハンドリングする部分です。<br>※ファイル上部には生成されたコードがあるため、自分で記述したファイル下部のみ記載しています。</p><figure class="highlight rust"><figcaption><span>src/db.rs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> openapi_client::server::MakeService;</span><br><span class="line"><span class="keyword">use</span> openapi_client::IpGetResponse::GetGlobalIPv;</span><br><span class="line"><span class="keyword">use</span> openapi_client::IpPostResponse::*;</span><br><span class="line"><span class="keyword">use</span> openapi_client::&#123;Api, IpGetResponse, IpPostResponse&#125;;</span><br><span class="line"><span class="keyword">use</span> std::error::Error;</span><br><span class="line"><span class="keyword">use</span> swagger::ApiError;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> crate::db;</span><br><span class="line"><span class="keyword">use</span> crate::db::model::schema::ipv4_history::ipv4_address;</span><br><span class="line"><span class="keyword">use</span> crate::usecase;</span><br><span class="line"><span class="keyword">use</span> usecase::*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> models::IpGet200Response;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[async_trait]</span></span><br><span class="line"><span class="keyword">impl</span>&lt;C&gt; Api&lt;C&gt; <span class="keyword">for</span> <span class="title class_">Server</span>&lt;C&gt;</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    C: Has&lt;XSpanIdString&gt; + <span class="built_in">Send</span> + <span class="built_in">Sync</span>,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">ip_get</span>(&amp;<span class="keyword">self</span>, context: &amp;C) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;IpGetResponse, ApiError&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">context</span> = context.<span class="title function_ invoke__">clone</span>();</span><br><span class="line">        info!(<span class="string">&quot;get_ip() - X-Span-ID: &#123;:?&#125;&quot;</span>, context.<span class="title function_ invoke__">get</span>().<span class="number">0</span>.<span class="title function_ invoke__">clone</span>());</span><br><span class="line">        <span class="keyword">match</span> <span class="title function_ invoke__">get_effective_ipv4_record</span>() &#123;</span><br><span class="line">            <span class="title function_ invoke__">Ok</span>(ipv4_record) =&gt; <span class="title function_ invoke__">Ok</span>(<span class="title function_ invoke__">GetGlobalIPv</span>(IpGet200Response &#123;</span><br><span class="line">                ipv4_address: <span class="title function_ invoke__">Some</span>(ipv4_record.ipv4_address.<span class="title function_ invoke__">to_string</span>()),</span><br><span class="line">                checked_at: <span class="title function_ invoke__">Some</span>(ipv4_record.last_checked_at),</span><br><span class="line">            &#125;)),</span><br><span class="line">            <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="title function_ invoke__">Err</span>(<span class="title function_ invoke__">ApiError</span>(e.<span class="title function_ invoke__">into</span>())),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">ip_post</span>(</span><br><span class="line">        &amp;<span class="keyword">self</span>,</span><br><span class="line">        ip_get_request: <span class="type">Option</span>&lt;models::IpGetRequest&gt;,</span><br><span class="line">        context: &amp;C,</span><br><span class="line">    ) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;IpPostResponse, ApiError&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">context</span> = context.<span class="title function_ invoke__">clone</span>();</span><br><span class="line">        info!(</span><br><span class="line">            <span class="string">&quot;ip_post(&#123;:?&#125;) - X-Span-ID: &#123;:?&#125;&quot;</span>,</span><br><span class="line">            ip_get_request,</span><br><span class="line">            context.<span class="title function_ invoke__">get</span>().<span class="number">0</span>.<span class="title function_ invoke__">clone</span>()</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(request) = ip_get_request &amp;&amp; <span class="keyword">let</span> <span class="variable">Some</span>(address)=request.ipv4_address &amp;&amp; <span class="title function_ invoke__">is_ipv4</span>(&amp;address)&#123;</span><br><span class="line">            <span class="keyword">match</span> <span class="title function_ invoke__">post_ip4_address</span>(&amp;address) &#123;</span><br><span class="line">                <span class="title function_ invoke__">Ok</span>(()) =&gt; <span class="title function_ invoke__">Ok</span>(TheNewIPv &#123;&#125;),</span><br><span class="line">                <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="title function_ invoke__">Err</span>(<span class="title function_ invoke__">ApiError</span>(e.<span class="title function_ invoke__">into</span>())),</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_ invoke__">Ok</span>(BadRequest)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> regex::Regex;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">fn</span> <span class="title function_">is_ipv4</span>(text: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">re</span> = Regex::<span class="title function_ invoke__">new</span>(</span><br><span class="line">        <span class="string">r&quot;^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.)&#123;3&#125;(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$&quot;</span>,</span><br><span class="line">    ).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    re.<span class="title function_ invoke__">is_match</span>(text)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h4><p>上記実装をして<code>cargo build</code>をすると不足しているcrateがあるはずです。以下のように追加します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo add dotenv regex</span><br></pre></td></tr></table></figure><h2 id="curlで動作テスト"><a href="#curlで動作テスト" class="headerlink" title="curlで動作テスト"></a>curlで動作テスト</h2><p>さて、DBを立ち上げた状態でAPIサーバーを起動しましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo run</span><br></pre></td></tr></table></figure><p>動作確認はcurlで行います。</p><p>GETメソッドで最新のレコードが取得できていることがわかります。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X GET localhost:8080/ip -i</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">x-span-id: 8a278ac0-a84f-4643-b29b-22ae83be9d6c</span><br><span class="line">content-type: application/json</span><br><span class="line">content-length: 70</span><br><span class="line"><span class="built_in">date</span>: Sun, 28 Aug 2022 18:12:27 GMT</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;IPv4_address&quot;</span>:<span class="string">&quot;112.112.112.112&quot;</span>,<span class="string">&quot;checked_at&quot;</span>:<span class="string">&quot;2022-01-02T00:00:00Z&quot;</span>&#125;%</span><br></pre></td></tr></table></figure><p>POSTメソッドのパラメータとして登録内容を渡すと、新規レコードが登録されます。<br>その後GETメソッドを呼び出すと登録されたことが確認できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST localhost:8080/ip -H <span class="string">&quot;Content-Type: application/json&quot;</span> -d <span class="string">&#x27;&#123;&quot;IPv4_address&quot;:&quot;1.1.1.1&quot;&#125;&#x27;</span> -i</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">x-span-id: 72fb2d42-c968-4e6a-bf54-73cf0b592e07</span><br><span class="line">content-length: 0</span><br><span class="line"><span class="built_in">date</span>: Sun, 28 Aug 2022 18:18:02 GMT</span><br><span class="line"></span><br><span class="line">$ curl -X GET localhost:8080/ip -i</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">x-span-id: 42879369-eda0-4cdf-927c-853db2548efe</span><br><span class="line">content-type: application/json</span><br><span class="line">content-length: 69</span><br><span class="line"><span class="built_in">date</span>: Sun, 28 Aug 2022 18:19:40 GMT</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&quot;IPv4_address&quot;</span>:<span class="string">&quot;1.1.1.1&quot;</span>,<span class="string">&quot;checked_at&quot;</span>:<span class="string">&quot;2022-08-28T18:18:02.385752Z&quot;</span>&#125;%</span><br></pre></td></tr></table></figure><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>Rustのコンパイラは本当に優秀で、的確にたくさん叱ってくれます。<br>言語仕様も洗練されており、曖昧なところや危険なところはそれを明示する必要があるような仕組みになっています。<br>こういった点を楽しめる人にとってRustはきっと最高の言語です。案外ハマるかもしれないので、みなさんぜひ書いてみてください！</p><p>アイキャッチ画像は<a href="https://pixabay.com/ja/users/ricinator-3282802/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1777966">Ricarda Mölck</a>による<a href="https://pixabay.com/ja//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1777966">Pixabay</a>を利用させていただきました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Rust/">Rust</category>
      
      <category domain="https://future-architect.github.io/tags/OpenAPIGenerator/">OpenAPIGenerator</category>
      
      
      <comments>https://future-architect.github.io/articles/20220831a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>S3 on LocalStackをGoとFUSEを使ってMountする（WSL2）</title>
      <link>https://future-architect.github.io/articles/20220829a/</link>
      <guid>https://future-architect.github.io/articles/20220829a/</guid>
      <pubDate>Sun, 28 Aug 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG DXユニットの真野です。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニットの真野です。<a href="/articles/20220822a/">夏休み自由研究連載</a>の5本目です。</p><p>ずっと気になっていた、<a href="https://github.com/hanwen/go-fuse">go-fuse</a>を用いて、<a href="https://github.com/localstack/localstack">LocalStack</a> でローカル環境にエミュレートされるS3バケットをマウントするツールを開発しました。普段はWebのAPIサーバを中心に開発しているので、FUSEとはいえファイルシステムの知識が無く、トライ＆エラーの連続ですごく楽しい自由研究（工作）でした。</p><p>モチベーションは以下です。</p><ul><li>業務でよくS3にアクセスするコードを書き、ローカル開発ではLocalStack上のS3を用いてテストしている</li><li>LocalStack上のS3に事前データを置いたり、事後データの検証にいちいちアクセスコードを書くのが面倒<ul><li>実装ミスで予期しない階層にファイルを出力してしまったりするときに、容易に視認できるようにしたい</li><li>aws cliコマンドを叩けば良いけど、コマンドを覚えられないし手間がある</li></ul></li><li>FUSEを用いてマウントできたら、初心者フレンドリーである<ul><li>WindowsでもWSL2であればFUSEが利用できる</li><li>標準のエクスプローラー（explorer.exe）で、WSL2上のUbuntu-20.04上のディレクトリも見れるのでより便利</li><li>VS Codeなどでのエディタでも確認できツールを統一できるし、ターミナルの手慣れたコマンドを利用できる（diffなど）</li></ul></li></ul><p>ポイントは、LocakStack自体がローカル（やCIでの）テスト環境ですので、これをマウントするツールもテスト支援ツールとして動かしたいということがあります。AWSなどクラウド上で稼働するランタイムのアプリケーションが直接マウントしたディレクトリを経由してS3に書き込むことは想定していません。</p><p>※動作検証したのがWSL2だけで、Macだと新し目のOSだと動かないようです（古いMacしか手持ちになく、すいません）。</p><h2 id="LocalStackとは"><a href="#LocalStackとは" class="headerlink" title="LocalStackとは"></a>LocalStackとは</h2><p><a href="https://localstack.cloud/blog/2022-07-13-announcing-localstack-v1-general-availability/">2022年7月13日にGA 1.0になったと発表された</a>、AWSの主要なサービスのAPIをローカル端末上でエミュレートするという、開発に便利なツールです。</p><p>2016年頃は、API Gateway、Lambda、DynamoDBなど8つのサービスをサポートしていましたが、今や80を超えるサービスが利用できるとのことです。わたしも現在業務で使っており、開発上ほぼすべてのユースケースを網羅できていて助かっています。どれくらいのカバレッジか気になる人は<a href="https://docs.localstack.cloud/aws/feature-coverage/">AWS Service Feature Coverage</a> ページもあります。</p><ul><li><a href="https://localstack.cloud/">https://localstack.cloud/</a></li><li><a href="https://github.com/localstack/localstack">https://github.com/localstack/localstack</a></li></ul><h2 id="FUSEとは"><a href="#FUSEとは" class="headerlink" title="FUSEとは"></a>FUSEとは</h2><p>FUSEとはFilesystem in Userspaceの略で、ユーザーランドで手軽に動作するファイルシステムを作成するための仕組みです。FUSEではカーネルがファイルなどの操作のシステムコールを、ユーザーランド側で動作しているプロセスに転送する仕組みで、決められたインターフェースを実装すると、手軽にファイルシステムを実装できます。同僚の澁川さん著作な<a href="https://www.lambdanote.com/products/go-2">Goならわかるシステムプログラミング 第2版</a> の10章にも触れられています。</p><p>下図は<a href="https://ja.wikipedia.org/wiki/Filesystem_in_Userspace">Wikipedia</a>より引用した動作イメージです。左上の <code>ls -l</code> をされると、カーネルにシステム要求が飛び、それをFUSEの仕組みを経由してユーザーランドのアプリケーションが応答するような流れです。</p><img src="/images/20220829a/800px-FUSE_structure.svg.png" alt="800px-FUSE_structure.svg.png" width="800" height="606" loading="lazy"><p>今回は右上のユーザーランド側のプロセスで、AWS SDK for Goを用いてS3 on LocalStackをバックエンドにadaptorするようなコードを書きました。</p><p>ファイル操作がカーネル→ユーザーランドと切り替わるということは、コンテキストスイッチが発生することで、性能は一般的に良くなさそうですよね。今回の用途では実際の永続化先がS3であり、I&#x2F;O待ちが支配的だと思うので、裏側がS3だと分かっていればそこまでレイテンシは気にはなりませんでした（重い処理をすると当然遅いですが）。</p><h2 id="go-fuse-とは"><a href="#go-fuse-とは" class="headerlink" title="go-fuse とは"></a>go-fuse とは</h2><p><a href="https://github.com/hanwen/go-fuse">go-fuse</a>はFUSEのGoバインディングです。この自由研究では安直ですがStar数が多かったのでこれを採用しました。他の選択肢としては<a href="https://github.com/winfsp/cgofuse">winfsp&#x2F;cgofuse</a> が良さそうな感じがします。</p><p>go-fuseのAPIはバージョンが1系と2系がありますが、今回うっかり1系で実装してしまったのは反省です。</p><h2 id="デモ"><a href="#デモ" class="headerlink" title="デモ"></a>デモ</h2><p>作ったものを紹介します。すでにLocalStack上のS3が起動していれば不要ですが、なければ次のコマンドを実行して立ち上げます。</p><figure class="highlight sh"><figcaption><span>LocalStackの起動</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ma91n/localstackmount.git</span><br><span class="line"><span class="built_in">cd</span> localstackmount</span><br><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><p>次にlocalstackmountを起動します。Windowsの人はWSL2で実行してください。</p><figure class="highlight sh"><figcaption><span>マウントの実行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go install github.com/ma91n/localstackmount@latest</span><br><span class="line">localstackmount</span><br></pre></td></tr></table></figure><p>そうすると、 <code>~/mount/localstack</code> 配下にLocalStackの全S3バケットがマウントされます。</p><p>awscliでファイルを予め登録したファイル(hello.txt)を確認→マウント上でそのファイルに1行追記→awscliで追記されていることを確認するデモをしてみました。</p><p>デモは以下のことをしています。</p><ol><li>左のウィンドウで <code>localstackmount</code> を起動</li><li>真ん中のウインドウで、 awscliの <code>s3 api list-buckets</code> でバケットの一覧、<code>s3 ls --recursive</code> と <code>s3 cp</code> コマンドでファイルをダウンロードし表示</li><li>右のウインドウで、LocalStackをマウントしたディレクトリにアクセスし、先程ダウンロードしたファイルを編集・保存</li><li>真ん中のウインドウに戻って、マウント経由で編集したファイルをaws cli経由で再度ダウンロードし、編集結果が反映されていることを確認</li></ol><img src="/images/20220829a/demo1.gif" alt="" width="1200" height="502" loading="lazy"><p>もちろん、エクスプローラからも確認できます。</p><img src="/images/20220829a/demo2.gif" alt="" width="1200" height="565" loading="lazy"><p>GIF動画では実演してないですが、もちろんVS Codeで好きに編集・保存をしても、LocalStack上のS3に反映されます。そこそこ便利かと思います。</p><h2 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h2><p>コードはここに上げています。</p><ul><li><a href="https://github.com/ma91n/localstackmount">https://github.com/ma91n/localstackmount</a></li></ul><p>詳細はリポジトリを見ていただくとして、大きな実装の流れとしてはまず以下のAPIを実装することです（多いです）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> FileSystem <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Attributes.  This function is the main entry point, through</span></span><br><span class="line"><span class="comment">// which FUSE discovers which files and directories exist.</span></span><br><span class="line">GetAttr(name <span class="type">string</span>, context *fuse.Context) (*fuse.Attr, fuse.Status)</span><br><span class="line"></span><br><span class="line"><span class="comment">// These should update the file&#x27;s ctime too.</span></span><br><span class="line">Chmod(name <span class="type">string</span>, mode <span class="type">uint32</span>, context *fuse.Context) (code fuse.Status)</span><br><span class="line">Chown(name <span class="type">string</span>, uid <span class="type">uint32</span>, gid <span class="type">uint32</span>, context *fuse.Context) (code fuse.Status)</span><br><span class="line">Utimens(name <span class="type">string</span>, Atime *time.Time, Mtime *time.Time, context *fuse.Context) (code fuse.Status)</span><br><span class="line"></span><br><span class="line">Truncate(name <span class="type">string</span>, size <span class="type">uint64</span>, context *fuse.Context) (code fuse.Status)</span><br><span class="line"></span><br><span class="line">Access(name <span class="type">string</span>, mode <span class="type">uint32</span>, context *fuse.Context) (code fuse.Status)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tree structure</span></span><br><span class="line">Link(oldName <span class="type">string</span>, newName <span class="type">string</span>, context *fuse.Context) (code fuse.Status)</span><br><span class="line">Mkdir(name <span class="type">string</span>, mode <span class="type">uint32</span>, context *fuse.Context) fuse.Status</span><br><span class="line">Mknod(name <span class="type">string</span>, mode <span class="type">uint32</span>, dev <span class="type">uint32</span>, context *fuse.Context) fuse.Status</span><br><span class="line">Rename(oldName <span class="type">string</span>, newName <span class="type">string</span>, context *fuse.Context) (code fuse.Status)</span><br><span class="line">Rmdir(name <span class="type">string</span>, context *fuse.Context) (code fuse.Status)</span><br><span class="line">Unlink(name <span class="type">string</span>, context *fuse.Context) (code fuse.Status)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Extended attributes.</span></span><br><span class="line">GetXAttr(name <span class="type">string</span>, attribute <span class="type">string</span>, context *fuse.Context) (data []<span class="type">byte</span>, code fuse.Status)</span><br><span class="line">ListXAttr(name <span class="type">string</span>, context *fuse.Context) (attributes []<span class="type">string</span>, code fuse.Status)</span><br><span class="line">RemoveXAttr(name <span class="type">string</span>, attr <span class="type">string</span>, context *fuse.Context) fuse.Status</span><br><span class="line">SetXAttr(name <span class="type">string</span>, attr <span class="type">string</span>, data []<span class="type">byte</span>, flags <span class="type">int</span>, context *fuse.Context) fuse.Status</span><br><span class="line"></span><br><span class="line"><span class="comment">// Called after mount.</span></span><br><span class="line">OnMount(nodeFs *PathNodeFs)</span><br><span class="line">OnUnmount()</span><br><span class="line"></span><br><span class="line"><span class="comment">// File handling.  If opening for writing, the file&#x27;s mtime</span></span><br><span class="line"><span class="comment">// should be updated too.</span></span><br><span class="line">Open(name <span class="type">string</span>, flags <span class="type">uint32</span>, context *fuse.Context) (file nodefs.File, code fuse.Status)</span><br><span class="line">Create(name <span class="type">string</span>, flags <span class="type">uint32</span>, mode <span class="type">uint32</span>, context *fuse.Context) (file nodefs.File, code fuse.Status)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Directory handling</span></span><br><span class="line">OpenDir(name <span class="type">string</span>, context *fuse.Context) (stream []fuse.DirEntry, code fuse.Status)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Symlinks.</span></span><br><span class="line">Symlink(value <span class="type">string</span>, linkName <span class="type">string</span>, context *fuse.Context) (code fuse.Status)</span><br><span class="line">Readlink(name <span class="type">string</span>, context *fuse.Context) (<span class="type">string</span>, fuse.Status)</span><br><span class="line"></span><br><span class="line">StatFs(name <span class="type">string</span>) *fuse.StatfsOut</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多すぎて大変！って思われた方も大丈夫です。</p><p>すべてを実装しなくても、<code>pathfs.NewDefaultFileSystem()</code> と言う一律 <code>fuse.ENOSYS(Function not implemented)</code> を返すデフォルト実装があるためこれを組み込んで、必要なものだけ順次、動作を確認しながら実装できます。</p><figure class="highlight go"><figcaption><span>組み込みの例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> FileSystem <span class="keyword">struct</span> &#123;</span><br><span class="line">pathfs.FileSystem</span><br><span class="line"></span><br><span class="line">sess *S3Session</span><br><span class="line"></span><br><span class="line">callTime *time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *FileSystem)</span></span> GetAttr(name <span class="type">string</span>, ctx *fuse.Context) (*fuse.Attr, fuse.Status) &#123;</span><br><span class="line">  <span class="comment">// 必要な関数だけ選抜して実装する</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>あと、<code>Open</code> など <code>nodefs.File</code> を返すのですが、こういったインターフェースです。実際にファイルへの追記・編集で使われます（例えばファイルを編集して保存するとWrite、Flush、Releaseが呼ばれます）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> File <span class="keyword">interface</span> &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"></span><br><span class="line">Read(dest []<span class="type">byte</span>, off <span class="type">int64</span>) (fuse.ReadResult, fuse.Status)</span><br><span class="line">Write(data []<span class="type">byte</span>, off <span class="type">int64</span>) (written <span class="type">uint32</span>, code fuse.Status)</span><br><span class="line"></span><br><span class="line"><span class="comment">// File locking</span></span><br><span class="line">GetLk(owner <span class="type">uint64</span>, lk *fuse.FileLock, flags <span class="type">uint32</span>, out *fuse.FileLock) (code fuse.Status)</span><br><span class="line">SetLk(owner <span class="type">uint64</span>, lk *fuse.FileLock, flags <span class="type">uint32</span>) (code fuse.Status)</span><br><span class="line">SetLkw(owner <span class="type">uint64</span>, lk *fuse.FileLock, flags <span class="type">uint32</span>) (code fuse.Status)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Flush is called for close() call on a file descriptor.</span></span><br><span class="line">Flush() fuse.Status</span><br><span class="line"></span><br><span class="line"><span class="comment">// This is called to before the file handle is forgotten.</span></span><br><span class="line">Release()</span><br><span class="line">Fsync(flags <span class="type">int</span>) (code fuse.Status)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The methods below may be called on closed files, due to concurrency.  In that case, you should return EBADF.</span></span><br><span class="line">Truncate(size <span class="type">uint64</span>) fuse.Status</span><br><span class="line">GetAttr(out *fuse.Attr) fuse.Status</span><br><span class="line">Chown(uid <span class="type">uint32</span>, gid <span class="type">uint32</span>) fuse.Status</span><br><span class="line">Chmod(perms <span class="type">uint32</span>) fuse.Status</span><br><span class="line">Utimens(atime *time.Time, mtime *time.Time) fuse.Status</span><br><span class="line">Allocate(off <span class="type">uint64</span>, size <span class="type">uint64</span>, mode <span class="type">uint32</span>) (code fuse.Status)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今回開発した ma91n&#x2F;localstack では、ChmodやChown、Symlinkなどは非対応にしました。かつ、<code>Extended attributes</code> と書かれている <code>GetXAttr</code>、<code>ListXAttr</code>、<code>RemoveXAttr</code>、<code>SetXAttr</code> も未実装です（実装していれば適時呼ばれますが、なければノーマルな <code>GetAttr</code> などにフォールバックされる仕組みなようです。）</p><p>どれがどれに紐づくか、最初はピンとこなかったのでざっくりと紹介します。</p><ul><li>GetAttr<ul><li>ファイルディレクトリの属性（ファイル、ディレクトリ、リンクなどの種別や、権限、サイズ、オーナー、作成日時）などを返します</li><li>すべての操作で呼ばれます。 <code>cd</code> や <code>ls</code> や <code>cat</code> などマウントしたファイル・ディレクトリ操作で頻発に呼ばれます</li><li>かなり高速に動くこと必要です</li><li>初戦はテスト用のLocalStack。ファイル数は大したことがないので毎回通信で存在チェックすれば良いと思っていましたが、キャッシュを入れないとかなりもっさりでした</li></ul></li><li>Access<ul><li><code>cd</code> など、ディレクトリに移動可能かの確認で呼ばれます</li></ul></li><li>Mkdir, Rename, Rmdir<ul><li>読んだままですが、  <code>mkdir</code>, <code>mv(rename)</code>, <code>rm -r</code> で呼ばれます</li></ul></li><li>Unlink<ul><li><code>rm</code> で呼ばれます。削除です</li></ul></li><li>Open<ul><li>head, cat, tail, lessなどファイルを開くと呼ばれます</li></ul></li><li>Create<ul><li>touchや echo hello &gt; hello.txt などで呼ばれます</li></ul></li><li>OpenDir<ul><li><code>cd</code>や<code>ls</code>などでディレクトアクセスするときに呼ばれます</li></ul></li></ul><p>概ね上記の関数を実装すればファイルエクスプローラを用いてのメインどころの操作はどうにかなりました。</p><p>ファイルエディタ系は <code>Read</code>、<code>Write</code>、<code>Flush</code>、 <code>Release</code>、<code>GetAttr</code> あたりを実装すれば、S3を用いた単体テストで用いるようなS3の操作は動くようになりました。</p><h2 id="実装メモ"><a href="#実装メモ" class="headerlink" title="実装メモ"></a>実装メモ</h2><p>今までファイルシステム周りが何もわからなかったので、実装を通して感じたことを記録に残します。</p><ul><li>S3でディレクトリの表現について仕様が公式ドキュメントに書かれている（仕様が合ったのか）<ul><li><code>/</code> で終わるとフォルダとして判定される<ul><li><a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-folders.html">https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-folders.html</a></li></ul></li></ul></li><li>想像以上に <code>GetAttr</code> が利用される<ul><li>例えば、 mnt-point&#x2F;bucket&#x2F;aaa&#x2F;bbb&#x2F;ccc&#x2F;log.txt というファイルを操作すると、 <code>bucket</code>, <code>bucket/aaa</code>, <code>bucket/aaa/bbb</code>, <code>bucket/aaa/bbb/ccc</code>, <code>bucket/aaa/bbb/ccc/log.txt</code> といった親のパス全てに対して <code>GetAttr</code> が呼ばれます</li><li>S3バックエンドだと、実際には <code>aaa/bbb/ccc/log.txt</code> というオブジェクトがあるだけで、実際にフォルダとして <code>aaa</code>や<code>bbb</code>があるわけではないことがあるので、上記の大部分は無駄です</li><li>最終的にはキャッシュレスは諦め、<a href="https://github.com/patrickmn/go-cache">go-cache</a>を導入しました</li></ul></li><li>キャッシュの扱い。難しい・うまくハマると速度向上が体感できて楽しい<ul><li>キャッシュの扱いですが、例えばファイルを書き込んだ後には破棄しないと、エディタによってはアプリで持っている情報と不整合が生じて警告を出してくることがあります。別にFUSEを用いた実装に閉じた話でもないですが、適切なハンドリングが必要でした<img src="/images/20220829a/FbGZVhJUIAA3Im7.jpg" alt="FbGZVhJUIAA3Im7.jpg" width="1143" height="699" loading="lazy"></li><li>オブジェクトストレージと、ファイルシステムとのギャップも感じました<ul><li>例えば、 <code>/bucket/dir1/aaa.txt</code> を削除すると、<code>GetAttr</code> のキャッシュとしては <code>/bucket/dir1/aaa.txt</code>、<code>/bucket/dir1</code>、<code>/bucket</code> の3つを無効化しないと不整合になる場合があります<ul><li>※実際に <code>dir1/</code> のオブジェクトが存在するとは限らないため、<code>aaa.txt</code> が消えたら <code>bucket</code> だけが残る方が自然なケースがある</li></ul></li></ul></li></ul></li><li>フォルダのリネームが面倒くさい<ul><li>S3だとキーの途中をリネームすることになりますが、複数オブジェクトが存在すると面倒です</li><li>prefixをもとにlistObjectし、対象となった全オブジェクトに対してgetObject、キーを書き換えてputObjectし、もとのキーをdeleteObjectする必要があり重い処理です</li><li>S3マウントツールで有名な<a href="https://github.com/kahing/goofys">kahing&#x2F;goofys</a> も、1000個までと制約をかけているようです</li></ul></li><li>ctrl+c で停止できない理由は、ターミナルで開いていたから<ul><li><code>signal.Notify(ch, os.Interrupt, syscall.SIGTERM)</code> といったコードで、チャネル経由でシグナルを拾ってアンマウントする処理を実装していたんですが、<code>Device or resource busy </code> で失敗することがありました</li><li>調べてもよくわからなかったのですが、マウントしているディレクトリじょうにターミナルで移動していると、何かしらのファイルディスクリプタを握ってしまうのか、アンマウントに失敗するようです<ul><li>面倒くさいですが、再起動するときは <code>cd ~</code> していました（どうにかならないものか）</li></ul></li></ul></li><li>エクスプローラー（explore.exe）で開くためにはオプションが必要<ul><li><code>allow_other</code> というオプションが必要でした</li></ul></li><li>Macで動かない？<ul><li>Macでは標準でFUSEが入っていないので、<a href="https://osxfuse.github.io/">osxfuse</a>をインストールしてもらう必要がある</li><li>go-fuseはosxfuseの3系は動くようですが、4系は動かない模様（自環境が無く未検証）</li><li>osxfuseの3系が入るOSバージョンであれば、動作しました</li></ul></li><li>開発環境<ul><li>Windowsで開発する場合、goosをlinuxにしないとビルドが通らないのでご注意を</li></ul></li></ul><h2 id="実装して学べたこと"><a href="#実装して学べたこと" class="headerlink" title="実装して学べたこと"></a>実装して学べたこと</h2><p>総じて、普段あまり意識しないレイヤーがどう動作するかを感じることができ、やってみて良かったと思っています。</p><ul><li><code>cd</code>、<code>ls</code> などのコマンドが、どのようなファイルシステム操作をしているか再認識したり、挙動について覚え直すキッカケなった<ul><li>mvするときに、既存のファイルが存在したら上書きする or しない</li></ul></li><li>ファイルシステムとしての実装の考え方が少しわかった<ul><li>どの操作で、どういうAPIが呼び出されるかの脳内マッピング（これくらいのAPI数で逆に成り立つのか、まぁ成り立つよねという心の天秤）</li><li>どこにキャッシュを用いると効果的かの勘所</li><li>高速化の工夫と、マウントを経由しない別経路での更新（例えばAWS CLIで直接更新など）とのバランス（キャッシュの有効期限のパラメータ調整）</li></ul></li><li>例えばVS Codeがどういう情報をファイルシステムに問い合わせているか、FUSE側のAPI呼び出しのログを見てイメージが湧いた<ul><li>VS Codeでmy-bucket&#x2F;aaa&#x2F;bbb&#x2F;hello.txtにあるマウントしたファイルを開くと、以下のファイルを探していた<ul><li>my-bucket&#x2F;aaa&#x2F;bbb&#x2F;git.exe</li><li>my-bucket&#x2F;aaa&#x2F;.git</li><li>my-bucket&#x2F;aaa&#x2F;HEAD</li><li>my-bucket&#x2F;.git</li></ul></li></ul></li><li>FUSE、思ったよりWSL2でシャキシャキ動く<ul><li>Windowsならではのハマりがもっと壮絶にあると思ったんですが、環境周りのハマりはほぼ無しで余裕でした<ul><li>逆にMacは新しいバージョンの手持ちが無く動作検証ができず</li></ul></li></ul></li></ul><h2 id="今後について"><a href="#今後について" class="headerlink" title="今後について"></a>今後について</h2><p>どこまでがんばるかということはあるのですが、いくつか試したいことがあります。</p><ul><li>go-fuseの2系のAPIに書き換える<ul><li>winfsp&#x2F;cgofuse に載せ替える（Macなどのサポート的にこっちの方が良い気も..？）</li></ul></li><li><code>Extended attributes</code> 系のAPI対応<ul><li>おそらく性能などに有利</li></ul></li><li>各操作の goroutine 化<ul><li>現状の実装だと、全て同期的に書いているのでマルチコアを全く行かせていません</li><li>一般的にはgoroutineを活用したほうが良さそうです</li></ul></li><li>ファイル自体のキャシュ<ul><li>現状ではS3に対するファイル属性の取得のための、listObjectを中心にキャッシュしています</li><li>S3のgetObjectは、<code>IfModifiedSince</code> と呼ばれる機能があり、指定した時間より更新がなければ <code>304 (not modified)</code> を返す機能があります</li><li>これを用いた、マウント外のディレクトリにファイルをキャッシュしておき、更新がなればそのファイルを用いれば有効なケースもあるかなと目論んでいます</li></ul></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>WSL2（Macは一部OS）に対応した LocalStack上のS3をマウントするツールを、go-fuse を用いて実装してみたよ</li><li>ファイルシステムといっても、FUSEと各言語ごとのバインド（例: go-fuse）を用いれば気軽に実装できるよ</li><li>普段あまり意識しない人にもオススメだよ</li><li>S3とファイルシステムのギャップは色々あるけど、工夫のしどころが多くて楽しいよ</li></ul><p>最後まで読んでいただきありがとうございました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/S3/">S3</category>
      
      <category domain="https://future-architect.github.io/tags/LocalStack/">LocalStack</category>
      
      <category domain="https://future-architect.github.io/tags/fuse/">fuse</category>
      
      <category domain="https://future-architect.github.io/tags/go-fuse/">go-fuse</category>
      
      
      <comments>https://future-architect.github.io/articles/20220829a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>React + Goで簡素な掲示板アプリを作ってみた</title>
      <link>https://future-architect.github.io/articles/20220826a/</link>
      <guid>https://future-architect.github.io/articles/20220826a/</guid>
      <pubDate>Thu, 25 Aug 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。金融グループ所属、新人の藤戸四恩です。&lt;br&gt;本記事は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。金融グループ所属、新人の藤戸四恩です。<br>本記事は<a href="/articles/20220822a/">夏の自由研究ブログ連載2022</a> 5日目の記事です。</p><p>今回は勉強中のReact、TypeScript、Goを使って掲示板アプリを作りました。</p><p>夏の自由研究ということで、以前から気になっていた<a href="https://vitejs.dev/">vite</a>を使って開発しました。</p><p>いままでフロントエンドの開発環境を作成する際には、<code>create-react-app</code> を使っていましたが、少しもっさり感を感じていました。そこで従来のビルドツールよりも高速に動作すると噂のviteを使ってみました。</p><p>また、掲示板アプリを開発する上で勉強になったパスワードをハッシュ化してDBに保存するところが勉強なったところをピックアップしました。</p><h2 id="作ったアプリ"><a href="#作ったアプリ" class="headerlink" title="作ったアプリ"></a>作ったアプリ</h2><p>今回の掲示板アプリでは、投稿ができて、投稿されたものが一覧で表示されます。<br><img src="/images/20220826a/image.png" alt="" width="1200" height="930" loading="lazy"></p><p>また、一覧表示されている投稿のうちログインしているユーザー本人が投稿したものには削除ボタンがつきます。削除ボタンを押下するとアラートを出す機能を付けました。</p><img src="/images/20220826a/image_2.png" alt="" width="1200" height="443" loading="lazy"><h2 id="viteを使った環境構築"><a href="#viteを使った環境構築" class="headerlink" title="viteを使った環境構築"></a>viteを使った環境構築</h2><p>viteを使った環境構築の手順を紹介します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn create vite</span></span><br></pre></td></tr></table></figure><p>上記のコマンドを実行すると、プロジェクトの名前を聞かれるので適当に入力します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yarn create v1.22.10</span><br><span class="line">[1/4] 🔍  Resolving packages...</span><br><span class="line">[2/4] 🚚  Fetching packages...</span><br><span class="line">[3/4] 🔗  Linking dependencies...</span><br><span class="line">[4/4] 🔨  Building fresh packages...</span><br><span class="line">success Installed &quot;create-vite@3.0.2&quot; with binaries:</span><br><span class="line">      - create-vite</span><br><span class="line">      - cva</span><br><span class="line">? Project name: › vite-project</span><br></pre></td></tr></table></figure><p>次に、フレームワークはreactを選択します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">? Select a framework: › - Use arrow-keys. Return to submit.</span><br><span class="line">    vanilla</span><br><span class="line">    vue</span><br><span class="line">❯   react</span><br><span class="line">    preact</span><br><span class="line">    lit</span><br><span class="line">    svelte</span><br></pre></td></tr></table></figure><p>最後にreactかreact-tsかの選択を聞かれるので、TypeScriptを使用するため、react-tsを選択します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">? Select a variant: › - Use arrow-keys. Return to submit.</span><br><span class="line">    react</span><br><span class="line">❯   react-ts</span><br></pre></td></tr></table></figure><p>非常に簡単に作成することができました。</p><h2 id="パスワードをハッシュ化"><a href="#パスワードをハッシュ化" class="headerlink" title="パスワードをハッシュ化"></a>パスワードをハッシュ化</h2><p>最近のwebサービスのログイン機能はGoogleなどの外部の認証サーバーが使われていることが多いですが、今回はパスワードをハッシュ化しDBに保存する実装をしてみたいと思いました。<br>パスワードのハッシュ化には、<a href="https://pkg.go.dev/golang.org/x/crypto/bcrypt">bcrypt</a>モジュールを使用しました。</p><p>ユーザー登録時のパスワードをハッシュ化には<code>bcrypto</code>モジュールの<code>GenerateFromPassword</code>を使用することでパスワードがハッシュ化されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">password := r.PostFormValue(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">hashedPassword, _ := bcrypt.GenerateFromPassword([]<span class="type">byte</span>(password), bcrypt.DefaultCost)</span><br></pre></td></tr></table></figure><p>認証時に入力されたパスワードを検証するには、CompareHashAndPasswordで確認できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name := r.PostFormValue(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">password := r.PostFormValue(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">db.Where(<span class="string">&quot;name = ? &quot;</span>, name).First(&amp;User)</span><br><span class="line"><span class="comment">// User.PasswordにはDBから取得したパスワード</span></span><br><span class="line">err := bcrypt.CompareHashAndPassword(User.Password, []<span class="type">byte</span>(password))</span><br></pre></td></tr></table></figure><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>以上が作成した掲示板アプリの内容でした。</p><h3 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h3><p>環境構築も非常に簡単にできました。またこのサイズのアプリでも速さを実感することができました。</p><p>今後はviteを使っていきたいなと思うくらい良かったです。</p><h3 id="パスワードをハッシュ化-1"><a href="#パスワードをハッシュ化-1" class="headerlink" title="パスワードをハッシュ化"></a>パスワードをハッシュ化</h3><p>今回初めてパスワードをハッシュ化してDBに保存しましたが、簡単に実装ができました。</p><p>しかし、認証周りはとてもセンシティブで自分は自信がないので今後はIDaaSを使っていくのがよいなと思いました。</p><h2 id="今後やりたいこと"><a href="#今後やりたいこと" class="headerlink" title="今後やりたいこと"></a>今後やりたいこと</h2><p>大学時代に機械学習をやっていたので、アプリに機械学習を組み込んでみたいです。<br>具体的には、投稿された内容から自動でタグを振り分けるような機能を考えています。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>自由研究ということで最近学んでいたことと、気になっていた技術を使い掲示板アプリを開発しました。</p><p>他に気になっている技術としてgRPCやPWAなどが気になっているので、その辺りについての記事を執筆できたらと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/TypeScript/">TypeScript</category>
      
      <category domain="https://future-architect.github.io/tags/React/">React</category>
      
      
      <comments>https://future-architect.github.io/articles/20220826a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「業務を通じて学ぶ」vs「業務外で学ぶ」Vue.jsで人気曲ランキングを当てるWebアプリを作ってみた</title>
      <link>https://future-architect.github.io/articles/20220825a/</link>
      <guid>https://future-architect.github.io/articles/20220825a/</guid>
      <pubDate>Wed, 24 Aug 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20220822a/&quot;&gt;フューチャー夏休みの自由研究連載&lt;/a&gt;の3本目です。&lt;/p&gt;
&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20220822a/">フューチャー夏休みの自由研究連載</a>の3本目です。</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>はじめまして。TIG DXユニットの佐々木です。</p><p>2022年4月に新卒入社し、7月からプロジェクトに参画しています。</p><p>未経験の技術が採用されている開発にも携わっているのですが、技術のキャッチアップ方法には試行錯誤の毎日です…!!</p><p>今回は自由研究企画ということで「業務を通じて学ぶ」と「業務外で学ぶ」のどちらが良いのかについて、実際に業務外で技術をキャッチアップした結果を基に整理したいと思います！</p><h2 id="なぜ業務を通じて学ぶことに試行錯誤しているのか"><a href="#なぜ業務を通じて学ぶことに試行錯誤しているのか" class="headerlink" title="なぜ業務を通じて学ぶことに試行錯誤しているのか"></a>なぜ業務を通じて学ぶことに試行錯誤しているのか</h2><p>そもそも私がなぜ業務を通じて学ぶことに試行錯誤しているかを振り返ってみました。<br>自分なりに考える主な要因はここら辺なのかなと思っています。</p><ul><li>期限内にアウトプットを出すために短期間でキャッチアップするため、断片的な知識が蓄積されがちで、なんとなく分かる・書ける状態になりやすい</li><li>システムの基盤が既に完成しているため、既存のソースコードを応用することで担当するアウトプットが作れる</li></ul><p>なるべくチームメンバー全員がシステム・技術を体系的に理解している状態で成果を出せるようになる状態が理想だとは思うのですが、現状のままでは難しいなと感じています。<br>そこで業務外で体系的に学ぶべく、プロジェクトで採用されている技術を用いて簡単なアプリを作りました！</p><h2 id="作ったアプリの紹介"><a href="#作ったアプリの紹介" class="headerlink" title="作ったアプリの紹介"></a>作ったアプリの紹介</h2><p>各アーティストの人気曲ランキングを当てる簡単なWebアプリを作りました。<br><img src="/images/20220825a/操作イメージ.gif" alt="操作イメージ.gif" width="360" height="240" loading="lazy"></p><h4 id="使用技術"><a href="#使用技術" class="headerlink" title="使用技術"></a>使用技術</h4><p>実際にプロジェクトで採用されている技術を模倣しました。</p><ul><li>Vue.js</li><li>TypeScript</li><li>Vuetify（UIフレームワーク）</li></ul><h4 id="楽曲データ源"><a href="#楽曲データ源" class="headerlink" title="楽曲データ源"></a>楽曲データ源</h4><p>各アーティストの楽曲データは無料で公開されている<a href="https://developer.spotify.com/documentation/web-api/">SpotifyのWebAPI</a>を使用して取得しました。<br>Spotifyに登録されている全アーティストの楽曲情報を取得することができます。</p><h2 id="「業務外で学ぶ」のメリット・デメリット"><a href="#「業務外で学ぶ」のメリット・デメリット" class="headerlink" title="「業務外で学ぶ」のメリット・デメリット"></a>「業務外で学ぶ」のメリット・デメリット</h2><p>プロジェクトで採用されている技術を用いてアプリを作ることで以下のようなメリット・デメリットがありました。</p><h4 id="メリット"><a href="#メリット" class="headerlink" title="メリット"></a>メリット</h4><ol><li>仕様・言語に慣れて業務中のソースを読む速度が上がった</li><li>普段は気にかけていなかった部分のコードの意味も考えるようになった</li><li>公式ドキュメントや記事を読む時間が増えた</li><li>コンポーネント設計やライブラリ選定など、普段の業務では考えない領域に触れられた</li><li>採用されている技術のことがちょっと好きになった</li></ol><h4 id="デメリット"><a href="#デメリット" class="headerlink" title="デメリット"></a>デメリット</h4><ol><li>自分の理解・ソースが間違っていないか議論できない</li><li>業務との頭の切り替えが必要でいつもよりﾁｮｯﾄ疲れが溜まっている感じがする</li></ol><h2 id="「業務を通じて学ぶ」-vs-「業務外で学ぶ」"><a href="#「業務を通じて学ぶ」-vs-「業務外で学ぶ」" class="headerlink" title="「業務を通じて学ぶ」 vs 「業務外で学ぶ」"></a>「業務を通じて学ぶ」 vs 「業務外で学ぶ」</h2><p>業務外で学ぶことのメリットをたくさん発見しましたが、私の中での優勝は・・・<br><strong>「業務を通じて学ぶ」</strong> です！！</p><p>メインの理由は以下の3点です。</p><ol><li>業務外で学ぶメリットの1番〜3番は工夫次第では業務を通じても獲得できる</li><li>間違った理解をしていた時にはチームメンバーと議論できる</li><li>何より業務時間の方が基本的に長いので、長い目で見るとその時間を有効活用する考え方が大事そう</li></ol><p>個人開発をするのは業務では触れられない興味のある領域を開発したいときかなと思いました。<br>もっと言えば興味のある領域を仕事にしたい！</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>これから長く続くエンジニア・コンサルとしての道のりですが、働き方を自分なりに考えて工夫する必要があるなと感じました。<br>また、改めてチームメンバーの皆さんと議論できる機会があることのありがたさを実感しました！</p><h2 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h2><p>今回はSpotifyが提供する外部APIから楽曲データを取得してアプリを作成しました。<br>その中で外部APIを用いるがゆえに沼った箇所がありましたので、その時に得た知見を記します！</p><h4 id="非同期通信を並列で処理する"><a href="#非同期通信を並列で処理する" class="headerlink" title="非同期通信を並列で処理する"></a>非同期通信を並列で処理する</h4><p>SpotifyのWebAPIではアーティストの全楽曲を直接取得するAPIは用意されていません。</p><p>全楽曲を取得するためには以下の2つのAPIを用いる必要がありました。</p><ul><li>アーティストの全シングル・アルバムを取得するAPI</li><li>シングル・アルバムに収録されている全楽曲を取得するAPI</li></ul><p>全楽曲取得後にデータを加工する必要があるため、次のような非同期通信のコードを書きました。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// アーティストの全シングル・アルバムを取得</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getArtistAlbums</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// シングル・アルバムに収録されている全楽曲を取得</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getAlbumTracks</span>(<span class="params">album</span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">const</span> albums = <span class="keyword">await</span> <span class="title function_">getArtistAlbums</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> album <span class="keyword">of</span> albums)&#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title function_">getAlbumTracks</span>(album)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加工処理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>しかし、<code>for</code>の中で<code>await</code>を用いることでアーティストが公開しているシングル・アルバム数に比例して処理時間が長くなってしまいます。</p><p>そのため<code>Promise.all()</code>を用いることで<code>await</code>処理をループの外に置き、並列で実行されるようにしました。</p><p>これで下図のように処理時間を大幅に短縮することができました。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// アーティストの全シングル・アルバムを取得</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getArtistAlbums</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// シングル・アルバムに収録されている全楽曲を取得</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getAlbumTracks</span>(<span class="params">album</span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">const</span> albums = <span class="keyword">await</span> <span class="title function_">getArtistAlbums</span>()</span><br><span class="line">    <span class="comment">// Promiseインスタンスを配列化</span></span><br><span class="line">    <span class="keyword">const</span> promises = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> album <span class="keyword">of</span> albums)&#123;</span><br><span class="line">        promises.<span class="title function_">push</span>(<span class="title function_">getAlbumTracks</span>(album))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(promises)</span><br><span class="line">    <span class="comment">// 加工処理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/20220825a/並列化.png" alt="並列化" width="1200" height="717" loading="lazy"><h4 id="非同期通信の並列数を制御する"><a href="#非同期通信の並列数を制御する" class="headerlink" title="非同期通信の並列数を制御する"></a>非同期通信の並列数を制御する</h4><p>SpotifyのWebAPIでは、秒間あたりのアクセス数が制限されていることから、先程のコードを用いて大量のリクエストを同時に投げると一部のリクエストからエラーが返ってきてしまいました。そこで、外部APIへのリクエストの並列数を制限することを試みました。</p><p>使用したのは<a href="https://www.npmjs.com/package/p-map">p-map</a>というライブラリです。このライブラリを用いることで並列数を制御しつつ<code>Promise.all()</code>と同等のことを実現できました。</p><p>また、今回は使用しませんでしたが、返ってくるレスポンスの内容に応じて後続のリクエストの制御を実施することもできます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pMap <span class="keyword">from</span> <span class="string">&#x27;p-map&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// アーティストの全シングル・アルバムを取得</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getArtistAlbums</span>(<span class="params"></span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// シングル・アルバムに収録されている全楽曲を取得</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getAlbumTracks</span>(<span class="params">album</span>)&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">const</span> albums = <span class="keyword">await</span> <span class="title function_">getArtistAlbums</span>()</span><br><span class="line">    <span class="comment">// 並列処理数を5個に制限</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">pMap</span>(albums, <span class="title function_">getAlbumTracks</span>(), &#123;<span class="attr">concurrency</span>: <span class="number">5</span>&#125;)</span><br><span class="line">    <span class="comment">// 加工処理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで下図のようにSpotifyへの同時リクエスト数が一定数を超えないように制御しながら高速に処理を行うことができるようになりました。<br><img src="/images/20220825a/並列数を制限.png" alt="並列数を制限.png" width="1200" height="743" loading="lazy"></p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>今回は自由研究ということで技術のキャッチアップの方法についてまとめてみました。</p><p>個人的にアプリ設計を自分で考えるところが楽しかったのでまた機会があれば取り組もうと思います。</p><p>今後はもっと技術に踏み込んだ記事を執筆していけたらと思います！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/TypeScript/">TypeScript</category>
      
      <category domain="https://future-architect.github.io/tags/Vue-js/">Vue.js</category>
      
      <category domain="https://future-architect.github.io/tags/Vuetify/">Vuetify</category>
      
      
      <comments>https://future-architect.github.io/articles/20220825a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Quest2のハンドトラッキングでVRテルミンシミュレータを作ってみた</title>
      <link>https://future-architect.github.io/articles/20220823a/</link>
      <guid>https://future-architect.github.io/articles/20220823a/</guid>
      <pubDate>Mon, 22 Aug 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIG DXユニット所属、金欠コンサルタントの藤井です。&lt;br&gt;最近、長らく買おう買おうと思っていたMeta</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニット所属、金欠コンサルタントの藤井です。<br>最近、長らく買おう買おうと思っていたMeta Quest 2をとうとう買いました。</p><p><a href="/articles/20220822a/">夏の自由研究ブログ連載2022</a> 6日目のこの記事では、このMeta Quest 2向けに作ってみた、VRテルミンシミュレータというものを題材に記事を書きます。<br>作ったものはこちらです。readmeの動画は音量注意かもしれません。</p><p><a href="https://github.com/shomuMatch/thereminSimulator">https://github.com/shomuMatch/thereminSimulator</a></p><p>自分で作成したリソースと、ビルド後のapk、サンプル動画のみ配置してあります。</p><p>apkは自由に使っていただいて構わないので、うまく演奏出来たら教えてください。<br>ところでgithub、readmeに動画置けるようになっていたんですね。</p><h2 id="前提知識"><a href="#前提知識" class="headerlink" title="前提知識"></a>前提知識</h2><h3 id="Meta-Quest-2とハンドトラッキング"><a href="#Meta-Quest-2とハンドトラッキング" class="headerlink" title="Meta Quest 2とハンドトラッキング"></a>Meta Quest 2とハンドトラッキング</h3><p>皆さんご存知の通り、Meta Quest 2（以下、Quest2と略記）はMeta（旧Facebook）社が開発・販売しているVRヘッドセットです。</p><p>Meta社の社名変更前はOculus Quest 2という名前で販売されており、こちらの名前の方がなじみ深い方も居られるかもしれません。</p><p>詳細なスペック等は公式情報<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>を参照頂くとして、このQuest2には前面に4つのカメラが搭載されています。この4つのカメラの画像を元に位置・回転のいわゆる6DoFの情報を特定することができるのですが、このカメラは他の目的にも利用できます。</p><p>その1つが今回用いる<strong>ハンドトラッキング</strong>。カメラの画像から手を検出し、手の各部位の位置を特定、入力情報として用いるための機能です。</p><h3 id="テルミン"><a href="#テルミン" class="headerlink" title="テルミン"></a>テルミン</h3><p>テルミンというのは、レフ・テルミンという人が1920年にロシアで発明した楽器の名前なのですが、楽器の中でも電子楽器と呼ばれるジャンルに分類される楽器です。</p><p>電子ピアノや、キーボード等が電子楽器の例ですが、電子回路によって音の信号を作り出す物を総称して電子楽器と呼びます。テルミンはこの電子楽器の中でも世界最古の電子楽器であり、その特徴は何といってもテルミンそのものに触れることなく演奏できるという、一見不思議な楽器です。</p><p>もちろん演奏と言うからには、音量や音程等をコントロールする必要があるのですが、演奏者はこのコントロールを楽器に触れずに行うことができます。テルミンからは2本のアンテナが伸びており、このアンテナと演奏者の手の距離に応じて音量・音程が変動します。</p><p>高校時代に何かの折でテルミンを知り、一度演奏してみたいと思っていたのですが、その夢が叶う時が来たようです。</p><h4 id="概要原理"><a href="#概要原理" class="headerlink" title="概要原理"></a>概要原理</h4><p>では、どうやって触れずに演奏するのか、一言で言うと、<strong>演奏者自身が楽器の一部となる</strong>ように設計されています。</p><p>最初から演奏者が楽器に含まれているので、改めて楽器に触れずとも演奏が可能であるという、どうやったらそんな発想に至れるのかという仕組みでテルミンは動いています。<br>とても簡単に構成図を書くとこんな感じです。</p><img src="/images/20220823a/image.png" alt="image.png" width="1052" height="687" loading="lazy"><p>この仕組みをシミュレーションしたいので、数式に落とし込む必要があるのですが、少し話が膨らんでしまうため、より詳細な原理については後回しにします。</p><p><a href="#%E8%A9%B3%E7%B4%B0%E5%8E%9F%E7%90%86">詳細原理</a>の項に記載しておくので、先に読みたいという方はそちらからお読みください。</p><h2 id="作ってみる"><a href="#作ってみる" class="headerlink" title="作ってみる"></a>作ってみる</h2><p>それではテルミンシミュレータを作っていきます。<br>開発環境は以下です。</p><ul><li>IDE: Unity 2021.3.7f1(LTS)</li><li>入れたモジュール<ul><li>Android Build Support<ul><li>OpenJDK</li><li>Android SDK &amp; NDK Tools</li></ul></li></ul></li><li>テンプレート: VR<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li><li>入れたパッケージ<ul><li>Oculus Integration</li></ul></li></ul><p>また、Quest Link（Quest2をPC用のVRヘッドセットとして使える機能）を使うと、都度ビルドせずともQuest2実機を用いてテストプレイができるのですが…</p><img src="/images/20220823a/image_2.png" alt="" width="629" height="47" loading="lazy"><p>ダメでした。記事を書きながらPCを注文したので、また今度こちらも含めて環境構築記事を書きます。</p><h3 id="初期設定"><a href="#初期設定" class="headerlink" title="初期設定"></a>初期設定</h3><p>まずはメニューの<code>Assets &gt; Create &gt; Scene</code>からSceneを作成しましょう。<br>今回はScene間の遷移はしない想定のため、ThereminSimulatorと言う名前のSceneを1つ作成しました。</p><p>続いて、ハンドトラッキングができるよう、Projectの<code>Assets &gt; Oculus &gt; OculusProjectConfig</code>を選択し、GeneralのHand Tracking Supportを<code>Hands Only</code>に設定します。</p><img src="/images/20220823a/image_3.png" alt="" width="880" height="476" loading="lazy"><p>Oculusストアでアプリを公開したい場合は、<code>Controllers and Hands</code>に設定する必要があるようです。<br>Hand Tracking Versionはデフォルトでも良いですが、V2に設定しておきます。</p><p>次に、メインプレイヤーになる<code>OVRCameraRig</code>と、ハンドトラッキング結果を表示するための<code>OVRHandPrefab</code>を以下の様に配置します。</p><p>この際、デフォルトで配置されている<code>Main Camera</code>は削除しましょう。</p><img src="/images/20220823a/image_4.png" alt="" width="232" height="236" loading="lazy"><p>右手用に<code>RightHandAnchor</code>の子として配置した<code>OVRHandPrefab</code>のInspectorを見ると、以下の3か所に手の左右を選択する部分があるため、全て<code>Hand Right</code>に変更します。</p><ul><li>OVR Handの<code>Hand Type</code></li><li>OVR Skeletonの<code>Skeleton Type</code></li><li>OVR Meshの<code>Mesh Type</code></li></ul><img src="/images/20220823a/image_5.png" alt="" width="738" height="767" loading="lazy"><p>デフォルト値が<code>Hand Left</code>であるため、左手用の<code>OVRHandPrefab</code>は変更不要です。</p><p>ここまでで、ハンドトラッキングの初期設定は完了です。<br>ビルドして動かしてみるとこの通り、フレミングの左手の法則も、右ネジの法則もばっちり表現できます。</p><img src="/images/20220823a/image_6.png" alt="" width="720" height="354" loading="lazy"><p>想像以上にトラッキングの精度が高くて驚きましたが、手を握るなどするとトラッキングできなくなるため、使いどころには注意が必要かもしれません。<br>（急に自分の手が消えたので、結構焦りました）</p><p>あとはテルミンや床を置いたり、位置やサイズの調整をしましょう。こんな感じになりました。</p><img src="/images/20220823a/image_7.png" alt="" width="1027" height="587" loading="lazy"><p>Quest2で見るとこんな感じです。（最初テルミンのサイズを間違えてとんでもないサイズのテルミンに潰されかけました）</p><img src="/images/20220823a/image_8.png" alt="" width="771" height="586" loading="lazy">ちなみにテルミンの3Dモデルは自作です。本体とアンテナを当社のカラーで作っています。<h3 id="実装する"><a href="#実装する" class="headerlink" title="実装する"></a>実装する</h3><h4 id="実装の流れ"><a href="#実装の流れ" class="headerlink" title="実装の流れ"></a>実装の流れ</h4><p>さて、テルミンを実装していくにあたり、以下が必要になります。</p><ol><li>トラッキングした手の各部位の位置情報の取得</li><li>↑により決定される発振回路の発振周波数と音程・音量の計算</li><li>↑により決定された音の出力</li></ol><p>では、上から順にやっていきましょう。</p><h4 id="トラッキングした手の各部位の位置情報の取得"><a href="#トラッキングした手の各部位の位置情報の取得" class="headerlink" title="トラッキングした手の各部位の位置情報の取得"></a>トラッキングした手の各部位の位置情報の取得</h4><p>まず、手の各部位の位置情報ですが、<code>OVRHandPrefab</code>にアタッチされている<code>OVRSkeleton</code>クラスの<code>Bones</code>に格納されています。</p><p>手の各部位にボーンが割り当てられており、そのTransformを取得することが出来ます。<a href="https://qiita.com/divideby_zero/items/4949fadb2c60f810b3aa">こちらの記事</a>にボーンと部位の対応図が載せられているので、ご参考ください。</p><p>手のひらのボーンは無いため、小指と親指は0番目、それ以外の指は1番目のボーン位置の中心を手のひらの位置として扱うことにしましょう。指の位置は各指の3番目のボーン位置とします。</p><p>以下のメソッドに位置を取得したい手のOVRSkeletonを渡せば、各部位のpositionの配列が返されます。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Vector3[] <span class="title">getHandPositions</span>(<span class="params">OVRSkeleton skeleton</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (!(_leftHand.IsTracked &amp;&amp; _rightHand.IsTracked))</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vector3[] { };</span><br><span class="line">    }</span><br><span class="line">    Vector3 palmPosition = (</span><br><span class="line">        skeleton.Bones[(<span class="built_in">int</span>)OVRSkeleton.BoneId.Hand_Thumb0].Transform.position +</span><br><span class="line">        skeleton.Bones[(<span class="built_in">int</span>)OVRSkeleton.BoneId.Hand_Index1].Transform.position +</span><br><span class="line">        skeleton.Bones[(<span class="built_in">int</span>)OVRSkeleton.BoneId.Hand_Middle1].Transform.position +</span><br><span class="line">        skeleton.Bones[(<span class="built_in">int</span>)OVRSkeleton.BoneId.Hand_Ring1].Transform.position +</span><br><span class="line">        skeleton.Bones[(<span class="built_in">int</span>)OVRSkeleton.BoneId.Hand_Pinky0].Transform.position</span><br><span class="line">        ) / <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Vector3[]{</span><br><span class="line">        skeleton.Bones[(<span class="built_in">int</span>) OVRSkeleton.BoneId.Hand_Thumb3].Transform.position,</span><br><span class="line">        skeleton.Bones[(<span class="built_in">int</span>) OVRSkeleton.BoneId.Hand_Index3].Transform.position,</span><br><span class="line">        skeleton.Bones[(<span class="built_in">int</span>) OVRSkeleton.BoneId.Hand_Middle3].Transform.position,</span><br><span class="line">        skeleton.Bones[(<span class="built_in">int</span>) OVRSkeleton.BoneId.Hand_Ring3].Transform.position,</span><br><span class="line">        skeleton.Bones[(<span class="built_in">int</span>) OVRSkeleton.BoneId.Hand_Pinky3].Transform.position,</span><br><span class="line">        palmPosition</span><br><span class="line">        };</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>手がトラッキングされていない場合は、空の配列を返却するようにしておきました。</p><h4 id="発振回路の発振周波数と音程・音量の計算"><a href="#発振回路の発振周波数と音程・音量の計算" class="headerlink" title="発振回路の発振周波数と音程・音量の計算"></a>発振回路の発振周波数と音程・音量の計算</h4><p>次に、テルミンから出力される音の音程・音量を計算します。<br>簡単のため、以下の制約を設けます。</p><ul><li>音程コントロールは右手、音量コントロールは左手で行い、反対側の手は考慮しない。</li><li>音程コントロールはX-Z平面（水平面）内での距離、音量コントロールはY軸（鉛直）方向の距離のみを考慮する。<br>併せて、計算に用いる定数を定義しておきましょう。<br>ここのパラメータにより、テルミンの特性が決まります。<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> PITCH_INDUCTANCE = <span class="number">10.0e-6</span>f; <span class="comment">//音程コントロール側に使用するコイルのインダクタンス</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> PITCH_CAPACITANCE = <span class="number">1.0e-9</span>f; <span class="comment">//音程コントロール側に使用するコンデンサの静電容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> VOLUME_INDUCTANCE = <span class="number">1.0e-4</span>f; <span class="comment">//音量コントロール側に使用するコイルのインダクタンス</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> VOLUME_CAPACITANCE = <span class="number">2.0e-11</span>f; <span class="comment">//音量コントロール側に使用するコンデンサの静電容量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> VOLUME_RESISTANCE = <span class="number">1.0e1</span>f; <span class="comment">//音量コントロール側に使用する抵抗器の抵抗</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">float</span> PERMITTIVITY = <span class="number">8.854e-12</span>f; <span class="comment">//真空の誘電率（真空中で演奏することにします）</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">float</span>[] HAND_AREAS = { <span class="comment">//手の各部位の面積</span></span><br><span class="line">    <span class="number">11.0e-4</span>f,</span><br><span class="line">    <span class="number">15.0e-4</span>f,</span><br><span class="line">    <span class="number">17.0e-4</span>f,</span><br><span class="line">    <span class="number">15.0e-4</span>f,</span><br><span class="line">    <span class="number">13.0e-4</span>f,</span><br><span class="line">    <span class="number">80.0e-4</span>f</span><br><span class="line">};</span><br></pre></td></tr></table></figure>音程・音量どちらにしても発振回路の発振周波数を用いるため、まずは発振周波数の計算に用いるメソッドを定義します。<br>数式が共通なので、バンドパスフィルターの共振周波数もこのメソッドで計算します。<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">float</span> <span class="title">getOscillatingFrequency</span>(<span class="params"><span class="built_in">float</span> inductance, <span class="built_in">float</span> capacitance</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">2</span> * Mathf.PI * Mathf.Sqrt(inductance * capacitance));</span><br><span class="line">}</span><br></pre></td></tr></table></figure></li></ul><p>あとは上記仮定を元に、数式に基づいて音量・音程を求めるだけです。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">float</span> <span class="title">getPitch</span>()</span></span><br><span class="line">{</span><br><span class="line">    Vector3[] handPositions = getHandPositions(_rightSkeleton);</span><br><span class="line">    Vector3 antennaPosition = _pitchAntenna.position;</span><br><span class="line">    <span class="built_in">float</span> capacitance = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; handPositions.Length; i++)</span><br><span class="line">    {</span><br><span class="line">        handPositions[i].y = antennaPosition.y;</span><br><span class="line">        <span class="built_in">float</span> dist = Vector3.Distance(handPositions[i], antennaPosition);</span><br><span class="line">        capacitance += HAND_AREAS[i] / dist;</span><br><span class="line">    }</span><br><span class="line">    capacitance *= PERMITTIVITY;</span><br><span class="line">    capacitance += PITCH_CAPACITANCE;</span><br><span class="line">    <span class="built_in">float</span> fix_frequency = getOscillatingFrequency(PITCH_INDUCTANCE, PITCH_CAPACITANCE);</span><br><span class="line">    <span class="keyword">return</span> Mathf.Abs(fix_frequency - getOscillatingFrequency(PITCH_INDUCTANCE, capacitance));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">float</span> <span class="title">getVolume</span>()</span></span><br><span class="line">{</span><br><span class="line">    Vector3[] handPositions = getHandPositions(_leftSkeleton);</span><br><span class="line">    Vector3 antennaPosition = _volumeAntenna.position;</span><br><span class="line">    <span class="built_in">float</span> capacitance = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; handPositions.Length; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">float</span> dist = Mathf.Abs(handPositions[i].y - antennaPosition.y);</span><br><span class="line">        capacitance += HAND_AREAS[i] / dist;</span><br><span class="line">    }</span><br><span class="line">    capacitance *= PERMITTIVITY;</span><br><span class="line">    capacitance += VOLUME_CAPACITANCE;</span><br><span class="line">    <span class="built_in">float</span> gainFrequency = getOscillatingFrequency(VOLUME_INDUCTANCE, capacitance);</span><br><span class="line">    <span class="built_in">float</span> gain =</span><br><span class="line">        <span class="number">1</span> /</span><br><span class="line">            Mathf.Sqrt(</span><br><span class="line">                <span class="number">1</span> +</span><br><span class="line">                Mathf.Pow(</span><br><span class="line">                    <span class="number">1</span> / (<span class="number">2</span> * Mathf.PI * gainFrequency * VOLUME_RESISTANCE * VOLUME_CAPACITANCE) -</span><br><span class="line">                    <span class="number">2</span> * Mathf.PI * gainFrequency * VOLUME_INDUCTANCE / VOLUME_RESISTANCE,</span><br><span class="line">                    <span class="number">2</span></span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">return</span> gain;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>なお、音量コントロール側も音程コントロール側も、手の位置で決まる静電容量に、固定の静電容量を加えています。<br>手をかざしていない間に変な音が出ないように固定するためです。</p><p>あとはこれらを<code>Update()</code>から呼び出して、1フレームごとに周波数と音量を計算しましょう。<br>アンプを通した気持ちになって、ボリュームは3倍した上で一定幅内（0.1から1）で収まるようにしています。<br>なお、周波数とボリュームはメンバ変数としてあらかじめ宣言しておきます。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> frequency;</span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> gain;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">{</span><br><span class="line">    frequency = getPitch();</span><br><span class="line">    <span class="built_in">string</span> scale = getScale(frequency);</span><br><span class="line">    gain = Mathf.Min(getVolume() * <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (gain &lt; <span class="number">0.1f</span>)</span><br><span class="line">    {</span><br><span class="line">        gain = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="音の出力"><a href="#音の出力" class="headerlink" title="音の出力"></a>音の出力</h4><p>それでは実際に音を鳴らしていきましょう。</p><p>まずはテルミンのオブジェクトに<code>Audio Source</code>のコンポーネントを付与し、音を鳴らせるようにしておきます。すると、音を鳴らす前に（AudioClipをセットしていなくても）<code>OnAudioFilterRead()</code>が呼び出されるので、ここで直接音の情報を書き込んでしまいます。本来はフィルターをかけたりすることが目的のメソッドですが、音情報を書き込むこともできます。</p><p>前段で音程・音量の情報をメンバ変数に記録しているため、あとは正弦波の音情報を書き込むのみです。</p><p>サンプリング周波数はデバイスに依存するため、<code>Start()</code>内で取得しておきましょう。サンプリング周期ごとに位相と振幅を計算し、書き込んでいます。ステレオ音源にする意味は無いので、両チャンネルに同じ値を書き込んでいます。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">{</span><br><span class="line">    sampling_frequency = AudioSettings.outputSampleRate;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">OnAudioFilterRead</span>(<span class="params"><span class="built_in">float</span>[] data, <span class="built_in">int</span> channels</span>)</span></span><br><span class="line">{</span><br><span class="line">    increment = frequency * <span class="number">2</span> * Mathf.PI / sampling_frequency;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.Length; i = i + channels)</span><br><span class="line">    {</span><br><span class="line">        phase = phase + increment;</span><br><span class="line">        data[i] = (gain * Mathf.Sin(phase));</span><br><span class="line">        <span class="keyword">if</span> (channels == <span class="number">2</span>) data[i + <span class="number">1</span>] = data[i];</span><br><span class="line">        <span class="keyword">if</span> (phase &gt; <span class="number">2</span> * Mathf.PI) phase = <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure><p>これで音が鳴るようになりました。</p><h2 id="演奏してみる"><a href="#演奏してみる" class="headerlink" title="演奏してみる"></a>演奏してみる</h2><p>ではビルドして、演奏してみます。</p><p>Quest2とPCを接続し、<code>Build Settings</code>からPlatformをAndroidにし、作業していたSceneが追加されていることを確認してBuild And Runします。</p><img src="/images/20220823a/image_9.png" alt="image.png" width="640" height="601" loading="lazy"><p>しばらく待つと、Quest2側で起動しているので、試しに演奏してみました。↓に動画を配置しているのでご覧ください。<br>※音量注意かもしれません。</p><p><a href="https://github.com/shomuMatch/thereminSimulator">https://github.com/shomuMatch/thereminSimulator</a></p><p>想像の80倍ぐらい難しくて、ロクに演奏できませんでした。きらきら星を演奏しているつもりです。</p><p>周波数が連続的に変化していくので、半端な音が出がちなのと、どれぐらい動かせばどの音階になるのかが全くつかめず…低音域だと大きく手を動かさないといけないのに、高音域だと少し動かしただけで一気に周波数が変わるため、脳が混乱し続けていました。</p><p>ちなみに実際のテルミンを演奏したことは無いので、実物もこれぐらい難しいのかはよくわかりません。</p><p>ちなみに、後ろに今の音の周波数と音階、ボリュームも出るようにしておきました。<br>それを見ながらならもう少しマシに演奏出来る気もするのですが、動画としてどうなんだという気がしたのでやめておきました。<br>（Quest2の録画機能だと、プレイヤーの視点がそのまま録画対象になるため）</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>テルミン、とても難しい。</p><p>というのはさておき、Quest2のハンドトラッキング、とても簡単かつ高精度に手の動きを入力することができて、非常に可能性を感じました。</p><p>今回は一度演奏してみたかったテルミンを作ってみましたが、なんだかもっといろんなことができそうです。</p><p>VRにおける最も大切なものは、没入感であると個人的に思っています。</p><p>自身の体をそのまま入力装置として扱えるハンドトラッキングは、今後のVRの発展に不可欠なのでは、と思った自由研究でした。</p><p><a href="/articles/20220822a/">夏の自由研究ブログ連載2022</a> 明日もお楽しみに！</p><h2 id="補足"><a href="#補足" class="headerlink" title="補足"></a>補足</h2><h3 id="詳細原理"><a href="#詳細原理" class="headerlink" title="詳細原理"></a>詳細原理</h3><p>さて、後回しにしたテルミンの詳細原理とその数式化について記載します。</p><p>テルミンに限らず、電子回路にはコイル・コンデンサ・抵抗の3つの素子が良く使われます。</p><p>この内、コンデンサというのは少し特殊なつくりをしていて、2つの導体（電気を通す物体）で絶縁体（電気を通しにくい物体）を挟み込むような形をしています。導体は電気を通すが、絶縁体は電気を通しにくいので、コンデンサに電圧をかけると導体の絶縁体付近に電気がたまるという仕組みです。導体の例としては、鉄や、人体などが導体です。絶縁体はゴムや、空気などです。</p><p>勘の良い方は気づかれたかもしれませんが、例えば鉄板から少し離れて手のひらをかざすと、これだけでコンデンサができます。（絶縁体は間の空気）また、コンデンサに使われる導体を、極板と呼びます。</p><p>この鉄（アンテナ）・空気・人体で構成されたコンデンサを電子回路に取り込んだ楽器がテルミンなのです。</p><h4 id="2つの発振回路で音程コントロール"><a href="#2つの発振回路で音程コントロール" class="headerlink" title="2つの発振回路で音程コントロール"></a>2つの発振回路で音程コントロール</h4><p>さて、テルミンには上記の3つの素子を用いた、発振回路と呼ばれるものが音程コントロールのために2つ組み込まれています。発振回路と言うのは、発振周波数と呼ばれる周波数の正弦波の電気信号を作り出す電子回路のことです。</p><p>発振回路の種類にもよりますが、例えばハートレー発振回路と呼ばれるものだと、発振周波数はコイルの特性値であるインダクタンス（L）とコンデンサの特性値である静電容量（C）を用いて以下の数式で求められます。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.308ex;" xmlns="http://www.w3.org/2000/svg" width="12.868ex" height="5.344ex" role="img" focusable="false" viewBox="0 -1342 5687.6 2362"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(827.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(1883.6,0)"><g data-mml-node="mn" transform="translate(1652,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-929)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="msqrt" transform="translate(1070,0)"><g transform="translate(853,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(681,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g><g data-mml-node="mo" transform="translate(0,109)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="1441" height="60" x="853" y="849"></rect></g></g><rect width="3564" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p><p>一方の発振回路には演奏者を取り込まず、固定の周波数で発振する（電気信号を作る）ようにしておき、もう一方の発振回路には演奏者をコンデンサの片方の極板として取り込みます。</p><p>すると、演奏者の操作によりコンデンサの静電容量が変動し、片方の発振回路の発振周波数が変動します。この2つの発振回路の発振周波数の差を電気信号として出力、音に変換する（これはスピーカーの役割）ことで、音楽を演奏することができます。</p><p>ここまでをまとめると、最終的にテルミンから出る音の周波数（≒音程）は以下となります。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.76ex;" xmlns="http://www.w3.org/2000/svg" width="25.711ex" height="6.652ex" role="img" focusable="false" viewBox="0 -1720 11364.2 2940"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1300,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(1966.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(3022.6,0)"><g data-mml-node="mo"><svg width="278" height="2940" y="-1220" x="27.5" viewBox="0 -364.2 278 2940"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" transform="scale(1,4.414)"></path></svg></g><g data-mml-node="msub" transform="translate(333,0)"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1481.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mfrac" transform="translate(2482,0)"><g data-mml-node="mn" transform="translate(2388.3,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-937.5)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="msqrt" transform="translate(1070,0)"><g transform="translate(1020,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(681,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mrow" transform="translate(1607.7,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(750,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mo" transform="translate(0,67.5)"><path data-c="221A" d="M263 249Q264 249 315 130T417 -108T470 -228L725 302Q981 837 982 839Q989 850 1001 850Q1008 850 1013 844T1020 832V826L741 243Q645 43 540 -176Q479 -303 469 -324T453 -348Q449 -350 436 -350L424 -349L315 -96Q206 156 205 156L171 130Q138 104 137 104L111 130L263 249Z"></path></g><rect width="2746.7" height="60" x="1020" y="857.5"></rect></g></g><rect width="5036.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(7758.7,0)"><svg width="278" height="2940" y="-1220" x="27.5" viewBox="0 -364.2 278 2940"><path data-c="2223" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" transform="scale(1,4.414)"></path></svg></g></g><g data-mml-node="mtext" transform="translate(11114.2,0)"><path data-c="A0" d=""></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="29.435ex" height="2.161ex" role="img" focusable="false" viewBox="0 -750 13010.1 955"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1204.3,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(1760.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">固</text></g><g data-mml-node="mi" transform="translate(2760.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">定</text></g><g data-mml-node="mi" transform="translate(3760.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">発</text></g><g data-mml-node="mi" transform="translate(4760.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">振</text></g><g data-mml-node="mi" transform="translate(5760.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">器</text></g><g data-mml-node="mi" transform="translate(6760.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">の</text></g><g data-mml-node="mi" transform="translate(7760.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">発</text></g><g data-mml-node="mi" transform="translate(8760.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">振</text></g><g data-mml-node="mi" transform="translate(9760.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">周</text></g><g data-mml-node="mi" transform="translate(10760.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">波</text></g><g data-mml-node="mi" transform="translate(11760.1,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">数</text></g><g data-mml-node="mtext" transform="translate(12760.1,0)"><path data-c="A0" d=""></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="53.766ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 23764.6 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mo" transform="translate(958.8,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(1514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">演</text></g><g data-mml-node="mi" transform="translate(2514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">奏</text></g><g data-mml-node="mi" transform="translate(3514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">者</text></g><g data-mml-node="mi" transform="translate(4514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">を</text></g><g data-mml-node="mi" transform="translate(5514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">含</text></g><g data-mml-node="mi" transform="translate(6514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">む</text></g><g data-mml-node="mi" transform="translate(7514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">発</text></g><g data-mml-node="mi" transform="translate(8514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">振</text></g><g data-mml-node="mi" transform="translate(9514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">回</text></g><g data-mml-node="mi" transform="translate(10514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">路</text></g><g data-mml-node="mi" transform="translate(11514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">の</text></g><g data-mml-node="mi" transform="translate(12514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">コ</text></g><g data-mml-node="mi" transform="translate(13514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">イ</text></g><g data-mml-node="mi" transform="translate(14514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">ル</text></g><g data-mml-node="mi" transform="translate(15514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">の</text></g><g data-mml-node="mi" transform="translate(16514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">イ</text></g><g data-mml-node="mi" transform="translate(17514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">ン</text></g><g data-mml-node="mi" transform="translate(18514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">ダ</text></g><g data-mml-node="mi" transform="translate(19514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">ク</text></g><g data-mml-node="mi" transform="translate(20514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">タ</text></g><g data-mml-node="mi" transform="translate(21514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">ン</text></g><g data-mml-node="mi" transform="translate(22514.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">ス</text></g><g data-mml-node="mspace" transform="translate(23514.6,0)"></g><g data-mml-node="mtext" transform="translate(23514.6,0)"><path data-c="A0" d=""></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="54.071ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 23899.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mrow" transform="translate(926.7,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(750,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mo" transform="translate(2343.4,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(2899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">演</text></g><g data-mml-node="mi" transform="translate(3899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">奏</text></g><g data-mml-node="mi" transform="translate(4899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">者</text></g><g data-mml-node="mi" transform="translate(5899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">を</text></g><g data-mml-node="mi" transform="translate(6899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">含</text></g><g data-mml-node="mi" transform="translate(7899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">む</text></g><g data-mml-node="mi" transform="translate(8899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">発</text></g><g data-mml-node="mi" transform="translate(9899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">振</text></g><g data-mml-node="mi" transform="translate(10899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">回</text></g><g data-mml-node="mi" transform="translate(11899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">路</text></g><g data-mml-node="mi" transform="translate(12899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">の</text></g><g data-mml-node="mi" transform="translate(13899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">コ</text></g><g data-mml-node="mi" transform="translate(14899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">ン</text></g><g data-mml-node="mi" transform="translate(15899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">デ</text></g><g data-mml-node="mi" transform="translate(16899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">ン</text></g><g data-mml-node="mi" transform="translate(17899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">サ</text></g><g data-mml-node="mi" transform="translate(18899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">の</text></g><g data-mml-node="mi" transform="translate(19899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">静</text></g><g data-mml-node="mi" transform="translate(20899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">電</text></g><g data-mml-node="mi" transform="translate(21899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">容</text></g><g data-mml-node="mi" transform="translate(22899.2,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">量</text></g></g></g></svg></mjx-container></p><p>静電容量は演奏者の挙動（これはさらに時間に依存）に依存することを明記するため、時間を変数として記載しています。</p><h4 id="もう1つの発振回路と共振回路で音量コントロール"><a href="#もう1つの発振回路と共振回路で音量コントロール" class="headerlink" title="もう1つの発振回路と共振回路で音量コントロール"></a>もう1つの発振回路と共振回路で音量コントロール</h4><p>テルミンにはもう1つ、演奏者をコンデンサとして取り込んだ発振回路が含まれており、こちらは音量をコントロールするためのものです。<br>また、音量コントロール用の回路には発振回路に加え、共振回路（バンドパスフィルタ）と呼ばれる、特定の周波数帯の電気信号を通す回路が組み込まれています。<br>共振回路に周波数<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.244ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 550 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g></g></svg></mjx-container>の電気信号を流すと、以下の式に従って、その信号は減衰します。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -5.475ex;" xmlns="http://www.w3.org/2000/svg" width="46.364ex" height="8.776ex" role="img" focusable="false" viewBox="0 -1459 20492.9 3879"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(786,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1175,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1536,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2202.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(3258.6,0)"><g data-mml-node="mrow" transform="translate(220,709.5)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(278,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="TeXAtom" transform="translate(616,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(485,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1057,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1946.7,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g><g data-mml-node="mrow" transform="translate(387.2,-709.5)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(278,0)"><g data-mml-node="mi"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="TeXAtom" transform="translate(616,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1612.2,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g></g><rect width="2424.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(6201,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(7256.8,0)"><g data-mml-node="mn" transform="translate(6368.1,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="msqrt" transform="translate(220,-1636.5)"><g transform="translate(1020,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(722.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msup" transform="translate(1722.4,0)"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="28" d="M180 96T180 250T205 541T266 770T353 944T444 1069T527 1150H555Q561 1144 561 1141Q561 1137 545 1120T504 1072T447 995T386 878T330 721T288 513T272 251Q272 133 280 56Q293 -87 326 -209T399 -405T475 -531T536 -609T561 -640Q561 -643 555 -649H527Q483 -612 443 -568T353 -443T266 -270T205 -41Z"></path></g><g data-mml-node="mfrac" transform="translate(597,0)"><g data-mml-node="mn" transform="translate(1555.7,394) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-370.3) scale(0.707)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mi" transform="translate(1070,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(1620,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2009,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(2370,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(2759,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(3518,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g><rect width="3225" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(4284.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(5284.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(5784.4,0)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="mi" transform="translate(6354.4,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(6904.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7293.4,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(7654.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mfrac" transform="translate(8043.4,0)"><g data-mml-node="mi" transform="translate(247.6,394) scale(0.707)"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(220,-345) scale(0.707)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><rect width="736.7" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(9020.1,0) translate(0 -0.5)"><path data-c="29" d="M35 1138Q35 1150 51 1150H56H69Q113 1113 153 1069T243 944T330 771T391 541T416 250T391 -40T330 -270T243 -443T152 -568T69 -649H56Q43 -649 39 -647T35 -637Q65 -607 110 -548Q283 -316 316 56Q324 133 324 251Q324 368 316 445Q278 877 48 1123Q36 1137 35 1138Z"></path></g></g><g data-mml-node="mn" transform="translate(9650.1,876.6) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(0,166.5)"><path data-c="221A" d="M424 -948Q422 -947 313 -434T202 80L170 31Q165 24 157 10Q137 -21 137 -21Q131 -16 124 -8L111 5L264 248L473 -720Q473 -717 727 359T983 1440Q989 1450 1001 1450Q1007 1450 1013 1445T1020 1433Q1020 1425 742 244T460 -941Q458 -950 439 -950H436Q424 -950 424 -948Z"></path></g><rect width="11776.1" height="60" x="1020" y="1556.5"></rect></g><rect width="12996.1" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p><p>上記より、入力の周波数が以下の<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="2.096ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 926.6 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></g></svg></mjx-container>（共振周波数）であるとき、出力は最大となります。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.308ex;" xmlns="http://www.w3.org/2000/svg" width="13.72ex" height="5.344ex" role="img" focusable="false" viewBox="0 -1342 6064.1 2362"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mn" transform="translate(523,-150) scale(0.707)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mo" transform="translate(1204.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(2260.1,0)"><g data-mml-node="mn" transform="translate(1652,676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mrow" transform="translate(220,-929)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D70B" d="M132 -11Q98 -11 98 22V33L111 61Q186 219 220 334L228 358H196Q158 358 142 355T103 336Q92 329 81 318T62 297T53 285Q51 284 38 284Q19 284 19 294Q19 300 38 329T93 391T164 429Q171 431 389 431Q549 431 553 430Q573 423 573 402Q573 371 541 360Q535 358 472 358H408L405 341Q393 269 393 222Q393 170 402 129T421 65T431 37Q431 20 417 5T381 -10Q370 -10 363 -7T347 17T331 77Q330 86 330 121Q330 170 339 226T357 318T367 358H269L268 354Q268 351 249 275T206 114T175 17Q164 -11 132 -11Z"></path></g><g data-mml-node="msqrt" transform="translate(1070,0)"><g transform="translate(853,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g><g data-mml-node="mi" transform="translate(681,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g><g data-mml-node="mo" transform="translate(0,109)"><path data-c="221A" d="M95 178Q89 178 81 186T72 200T103 230T169 280T207 309Q209 311 212 311H213Q219 311 227 294T281 177Q300 134 312 108L397 -77Q398 -77 501 136T707 565T814 786Q820 800 834 800Q841 800 846 794T853 782V776L620 293L385 -193Q381 -200 366 -200Q357 -200 354 -197Q352 -195 256 15L160 225L144 214Q129 202 113 190T95 178Z"></path></g><rect width="1441" height="60" x="853" y="849"></rect></g></g><rect width="3564" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p><p>つまり、演奏者の操作により、発振回路の発振周波数が共振回路の共振周波数に近づけば出力は大きく、遠ざかれば小さくなります。<br>この出力を、最終的な音量として用いることで、テルミン自体の音量を操作します。</p><h4 id="演奏者による静電容量の変化"><a href="#演奏者による静電容量の変化" class="headerlink" title="演奏者による静電容量の変化"></a>演奏者による静電容量の変化</h4><p>さて、ここまでで、演奏者による静電容量<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.296ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1899 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(760,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1149,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1510,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>の変化に応じて音量・音程が操作できることを見てきました。<br>では、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.296ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1899 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(760,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1149,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1510,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>はどのように変化するのでしょう。</p><p>これを厳密に求めることは実質的に不可能であるため、演奏者を含む発振回路のコンデンサは、以下の図のような構成であるとモデル化してみましょう。</p><img src="/images/20220823a/image_10.png" alt="" width="863" height="652" loading="lazy"><p>要するに、演奏者の手のひらから先だけを演奏者側の極板として扱い、テルミンのアンテナは演奏者に合わせて複数の極板に分割されているとします。</p><p>こうしてできた6つのコンデンサが並列に接続されることで、発振回路のコンデンサが構成されていると考えましょう。</p><p>さて、誘電率（絶縁体の特性）<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.072ex" role="img" focusable="false" viewBox="0 -452 466 474"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"></path></g></g></g></svg></mjx-container> の絶縁体を距離<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="1.176ex" height="1.593ex" role="img" focusable="false" viewBox="0 -694 520 704"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></svg></mjx-container>離れた面積 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.459ex" height="1.645ex" role="img" focusable="false" viewBox="0 -705 645 727"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g></g></g></svg></mjx-container> の2枚の極板で挟んだ場合、静電容量は以下となります。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.575ex;" xmlns="http://www.w3.org/2000/svg" width="8.246ex" height="4.699ex" role="img" focusable="false" viewBox="0 -1381 3644.6 2077"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1037.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2093.6,0)"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"></path></g><g data-mml-node="mfrac" transform="translate(2559.6,0)"><g data-mml-node="mi" transform="translate(220,676)"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(282.5,-686)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><rect width="845" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p><p>また、コンデンサを複数個並列につないだ場合、トータルの静電容量は以下となります。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.819ex;" xmlns="http://www.w3.org/2000/svg" width="10.738ex" height="6.354ex" role="img" focusable="false" viewBox="0 -1562.5 4746.2 2808.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(1037.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(2093.6,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(509.9,1150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="msub" transform="translate(3704.2,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(748,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container></p><p>以上より、今回考えるモデルにおいて、<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.296ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1899 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(760,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1149,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1510,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>は以下となります。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.819ex;" xmlns="http://www.w3.org/2000/svg" width="29.473ex" height="6.712ex" role="img" focusable="false" viewBox="0 -1720.9 13027 2966.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(760,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1149,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1510,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2176.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(3232.6,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mn" transform="translate(545.2,1150) scale(0.707)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g><g data-mml-node="msub" transform="translate(4843.2,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(748,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(5885.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6274.2,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(6635.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7302,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(8357.7,0)"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"></path></g><g data-mml-node="munderover" transform="translate(8990.4,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mn" transform="translate(545.2,1150) scale(0.707)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g><g data-mml-node="mfrac" transform="translate(10601.1,0)"><g data-mml-node="msub" transform="translate(743,676)"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(646,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-710)"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(553,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(847,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1236,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1597,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><rect width="2186" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p><p>演奏者が指や手のひらの位置をテルミン側の極板に近づけたり離したりすることで、静電容量が変化することが分かります。<br><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.127ex" height="1.952ex" role="img" focusable="false" viewBox="0 -705 940 862.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(646,-150) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>もテルミン側の極板と指や手のひらの角度に応じて変化させればもうちょっと正確になりますが、ここでは割愛します。</p><h4 id="テルミンから出る音"><a href="#テルミンから出る音" class="headerlink" title="テルミンから出る音"></a>テルミンから出る音</h4><p>以上より、テルミンから出る音の波形<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="4.036ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 1784 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(645,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1034,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1395,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container>は以下の数式で表されます。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="23.979ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10598.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mo" transform="translate(645,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1034,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(1395,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(2061.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3117.6,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(3867.6,0)"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(4653.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5042.6,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(5403.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mi" transform="translate(5959.2,0)"><path data-c="73" d="M295 316Q295 356 268 385T190 414Q154 414 128 401Q98 382 98 349Q97 344 98 336T114 312T157 287Q175 282 201 278T245 269T277 256Q294 248 310 236T342 195T359 133Q359 71 321 31T198 -10H190Q138 -10 94 26L86 19L77 10Q71 4 65 -1L54 -11H46H42Q39 -11 33 -5V74V132Q33 153 35 157T45 162H54Q66 162 70 158T75 146T82 119T101 77Q136 26 198 26Q295 26 295 104Q295 133 277 151Q257 175 194 187T111 210Q75 227 54 256T33 318Q33 357 50 384T93 424T143 442T187 447H198Q238 447 268 432L283 424L292 431Q302 440 314 448H322H326Q329 448 335 442V310L329 304H301Q295 310 295 316Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(394,0)"></path><path data-c="6E" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q450 438 463 329Q464 322 464 190V104Q464 66 466 59T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(672,0)"></path></g><g data-mml-node="mo" transform="translate(7187.2,0)"><path data-c="2061" d=""></path></g><g data-mml-node="mrow" transform="translate(7353.9,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mrow" transform="translate(1105.7,0)"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(750,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mi" transform="translate(2244.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mo" transform="translate(2605.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g><g data-mml-node="mtext" transform="translate(10348.6,0)"><path data-c="A0" d=""></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="28.47ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 12583.6 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1027.8,0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(1583.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">音</text></g><g data-mml-node="mi" transform="translate(2583.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">量</text></g><g data-mml-node="mi" transform="translate(3583.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">の</text></g><g data-mml-node="mi" transform="translate(4583.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">基</text></g><g data-mml-node="mi" transform="translate(5583.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">準</text></g><g data-mml-node="mi" transform="translate(6583.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">と</text></g><g data-mml-node="mi" transform="translate(7583.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">な</text></g><g data-mml-node="mi" transform="translate(8583.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">る</text></g><g data-mml-node="mi" transform="translate(9583.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">固</text></g><g data-mml-node="mi" transform="translate(10583.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">定</text></g><g data-mml-node="mi" transform="translate(11583.6,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">値</text></g></g></g></svg></mjx-container></p><p>上記のように仮定・導出した各数式をシミュレータでは使っていました。<br>先にこちらの項を読まれた方は、<a href="#%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B">作ってみる</a>までお戻りください。</p><p>補足も含めて、本記事は以上です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">Meta Quest 2技術仕様 <a href="https://aws.amazon.com/jp/rds/pricing/https://store.facebook.com/jp/quest/products/quest-2/">https://aws.amazon.com/jp/rds/pricing/https://store.facebook.com/jp/quest/products/quest-2/</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">Unity VR project template <a href="https://docs.unity3d.com/ja/2021.3/Manual/xr-template-vr.html">https://docs.unity3d.com/ja/2021.3/Manual/xr-template-vr.html</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/VR/">VR</category>
      
      
      <category domain="https://future-architect.github.io/tags/Unity/">Unity</category>
      
      <category domain="https://future-architect.github.io/tags/VR/">VR</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%86%E3%83%AB%E3%83%9F%E3%83%B3/">テルミン</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%8F%E3%83%B3%E3%83%89%E3%83%88%E3%83%A9%E3%83%83%E3%82%AD%E3%83%B3%E3%82%B0/">ハンドトラッキング</category>
      
      
      <comments>https://future-architect.github.io/articles/20220823a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>夏の自由研究_英単語学習アプリを作ってみた</title>
      <link>https://future-architect.github.io/articles/20220822b/</link>
      <guid>https://future-architect.github.io/articles/20220822b/</guid>
      <pubDate>Sun, 21 Aug 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20220822a/">夏の自由研究ブログ連載2022</a>の1本目です。</p><p>長女の勉強を見ていて、英単語の暗記に苦労していたのでFlutterで学習アプリを作りました。</p><p>英語はフォニックスで学ぶといいよ、とか最近言われたりします。確かに自分の経験から見ても、ある程度単語を覚えてくると、だいたい音節の区切りが見えてきて、「この発音だと母音の形式はだいたいこれかな？」「子音はこれかな？」とか選択肢が見えてきて、その組み合わせで考えていけるので、徐々に少ない労力でたくさんの単語を覚えていけます。</p><p>しかし、小学生の英語だと、まず覚えている単語が少なく、音節やフォニックスといった規則性を見つけ出すのは困難のようです。そのため、単語のスペルを覚える労力はO(n)というか、勘も働かずにほんと力技になってしまいます。あと、勘が働かないのはもう1つ問題があって、間違ったスペルを書いても「間違った」という感触がないため、間違ったスペルを何度もノートに書いて練習してしまっても気付きにくいという問題がありました。</p><p>あとは子供の性格や学習スタイルの個性もあると思いますが、うちの子はパソコンのキーボードにはそれほど抵抗がないのと、文字をたくさん書くのはストレスのようなので、パソコンで目と耳を使って学習、なおかつスペルのミスをなるべく間違えた瞬間にフィードバックしてあげるようなものがあれば良いかな、と思いました。</p><p>で、良いスマホアプリとかないかな、と思って探したのですが、今使っている英語の教材の進度に合わせた単語の選択ができるものとかがなくて、自分で作ることにしました。</p><h1 id="作ったアプリ"><a href="#作ったアプリ" class="headerlink" title="作ったアプリ"></a>作ったアプリ</h1><p>Flutterで作りました。Flutterは案件でモバイルアプリを作ったりもして、生産性の高さは実感していました。あと、スペルとかを声で言ってくれるようなアプリが作りたかったので、当初はmacOSのsayコマンドをサブプロセス実行するようなものとして作りました。そのため、デスクトップアプリにしたかったというのもあります。</p><p>まあ、Text To Speechは<a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API">ブラウザのAPIも後からあるのに気づいた</a>し、最終的にはsayコマンドを実行するのはやめてFlutterのライブラリの<a href="https://pub.dev/packages/flutter_tts">flutter_tts</a>にしたので、声を出すだけならFlutter出なくても良かったというのは気付きましたが、基本的なところは1晩で作れたので技術選択は悪くはなかったかと思います。</p><p>ソースコードは<a href="https://github.com/shibukawa/englishword">こちら</a>にアップしてます。</p><p>基本的には問題の答えをキーボードでタイプしていくだけですが、間違ったらタイプできないようにして、間違ったスペルを覚えないようにしています。ちなみに一文字でもタイプミスすると不正解になって、正解するまでは問題が出続けるというスパルタン仕様です。</p><img src="/images/20220822b/スクリーンショット_2022-07-09_14.29.04.png" alt="" width="1200" height="699" loading="lazy"><p>間違ったらスペルを声で教えてくれる、間違った箇所を色付けするようにしたあたりが工夫ポイントです。Text To Speechエンジンに「<code>baseball</code>」というテキストを渡せば「ベースボール」と読んでくれますが、「<code>b a s e b a l l</code>」と間にスペースを挟むとスペルの読み上げになりますね。今のところ試したエンジンはみんなこうなってくれました。</p><img src="/images/20220822b/スクリーンショット_2022-07-09_14.25.36.png" alt="" width="1200" height="699" loading="lazy"><p>最初はローカルのJSONファイルを手修正してましたが、問題編集機能もつけてみました。</p><img src="/images/20220822b/スクリーンショット_2022-07-09_14.24.47.png" alt="" width="1200" height="621" loading="lazy"><h1 id="今後やりたいこと"><a href="#今後やりたいこと" class="headerlink" title="今後やりたいこと"></a>今後やりたいこと</h1><p>英単語を自動で音節(syllable)に分けてあげて、その単位で単語を分けて表示してあげると、勘が働きにくい部分をアプリとしてサポートしやすくなるんじゃないかと思ったのですが、本格的に音節分割するには何かしらの辞書データが必要そうなので、ちょっと手間が大変そうでした。簡易的なロジックは調べればいくつか出るので、そこはやってもいいかなと思っています。</p><p>あとは間違った回数の履歴をもとに出てくる単語の数を調整とかしたらいいかな、と思いつつ、学習曲線とかをアルゴリズムに落とし込むのは結構面倒ですね、と思ってまだやってません。いつかやりたい。</p><h1 id="Flutterの落とし穴"><a href="#Flutterの落とし穴" class="headerlink" title="Flutterの落とし穴"></a>Flutterの落とし穴</h1><p>最終的にはビルドしたものをそのまま子供のパソコン(intel mac)にインストールしたので問題はないのですが、今後のARM macだとDeveloper Programに入らないとインストール面倒そうだな、ということでFlutter Webにしようかなと少し思ったのですが、Flutter Webにするには<a href="https://medium.com/flutter/learning-flutters-new-navigation-and-routing-system-7c9068155ade">Named Route</a>にしないとページ遷移できません。で、Named Routeの場合はページ間で状態を渡すには、riverpodとかのステート管理ライブラリが何か必要となります。</p><p>今回はスピード重視で<code>Navigator.pushReplacement()</code>でコンストラクタ渡しで状態を渡すように最初に作ってしまったため、ウェブ化はできませんでした。</p><p>あと、当初はText To Speechのライブラリとして<a href="https://pub.dev/packages/text_to_speech">text_to_speech</a>を使おうとしたのですが、Flutter 3でビルドが通らなかったり、依存ライブラリの互換性対応はなかなか難しいですね。人気があって更新が頻繁なライブラリを選ぶしかなさげ。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>新型コロナは社会的にいろいろ大きな影響を与えましたが、リモートワークで子供の勉強を見る機会は増えました。フューチャーは今のところリモートをやめようという話はないですし、その点は良かったなと思っています。子供の得意な勉強法は姉妹であっても全然違うし、「こうすればOK」と1つのやり方だけすれば良いということもなく、無理やり特定のやり方を押し付けると学習効率が上がらないばかりか、勉強嫌いになってしまう恐れがあります。</p><p>今回は子供の勉強の様子をじっくり観察できたので、子供にあわせた学習アプリを作れました。Flutterはすばやくデスクトップアプリが作れて良いですね。他の科目もいくつか「ここさえクリアできれば」というポイントがいくつかあるので、また色々作ってあげようと思っています。次はsolid.jsでも使ってみようかな？sveltekitでもいいかも？それか、Swiftでネイティブで作るか。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Flutter/">Flutter</category>
      
      
      <comments>https://future-architect.github.io/articles/20220822b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>夏の自由研究ブログ連載2022を始めます</title>
      <link>https://future-architect.github.io/articles/20220822a/</link>
      <guid>https://future-architect.github.io/articles/20220822a/</guid>
      <pubDate>Sun, 21 Aug 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220822a/camp-gec4719bda_640.png&quot; alt=&quot;camp-gec4719bda_640.png&quot; width=&quot;640&quot; height=&quot;433&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220822a/camp-gec4719bda_640.png" alt="camp-gec4719bda_640.png" width="640" height="433" loading="lazy"><p>TIG真野です。</p><p>2022年も夏の自由研究ブログ連載を始めます。！</p><h1 id="夏休み自由研究のテーマ"><a href="#夏休み自由研究のテーマ" class="headerlink" title="夏休み自由研究のテーマ"></a>夏休み自由研究のテーマ</h1><p>小学生の時の夏休みの宿題には必ず、自由研究、自由工作というものが存在していました。面倒と思った時もある一方で、楽しいテーマを題材にしたときは自分から前のめりに何かを作ったり調べたりしていました。</p><p>フューチャー技術ブログはこれまで数多くの連載を行っており、それぞれ題材に応じて記事を執筆してもらっていました。ただ、夏休みの自由研究連載は、あくまで「自分が好きなこと」を調べて記事にしてもらう連載なので、幅の広いネタが扱われます。日によって異なる分野のネタが投稿される、それが夏の自由研究ブログ連載です。</p><p>好きなこと、興味関心に赴くままということですのでテーマは自由。</p><ul><li>業務作業を優先していて、ちゃんと調べきれていなかったことを調べる</li><li>お家をスマート化してみる</li><li>今まで触っていなかったプロダクトに入門する</li></ul><p>など寄稿者それぞれのカラーが最も出る連載だと思います！</p><h1 id="スケジュール"><a href="#スケジュール" class="headerlink" title="スケジュール"></a>スケジュール</h1><p>有志にて10名のメンバーが集って連投します。<br>🔰マークがついている方は、2022年入社の新人さんです。フレッシュ！</p><div class="scroll"><table><thead><tr><th>Date</th><th>Author</th><th>Title</th></tr></thead><tbody><tr><td>8&#x2F;22（月）</td><td>澁川さん</td><td><a href="/articles/20220822b/">夏の自由研究: 英単語学習アプリを作ってみた</a></td></tr><tr><td>8&#x2F;23（火）</td><td>藤井さん</td><td><a href="/articles/20220823a/">Quest2のハンドトラッキングでVRテルミンシミュレータを作ってみた</a></td></tr><tr><td>8&#x2F;24（水）</td><td>skip</td><td>skip</td></tr><tr><td>8&#x2F;25（木）</td><td>佐々木さん🔰</td><td><a href="/articles/20220825a/">「業務を通じて学ぶ」vs「業務外で学ぶ」Vue.jsで人気曲ランキングを当てるWebアプリを作ってみた</a></td></tr><tr><td>8&#x2F;26（金）</td><td>藤戸さん🔰</td><td><a href="/articles/20220826a/">React + Go で何か作る</a></td></tr><tr><td>–</td><td></td><td></td></tr><tr><td>8&#x2F;29（月）</td><td>真野さん</td><td><a href="/articles/20220829a/">S3 on LocalStackをGoとFUSEを使ってMountする（WSL2）</a></td></tr><tr><td>8&#x2F;30（火）</td><td>skip</td><td>skip</td></tr><tr><td>8&#x2F;31（水）</td><td>中川さん</td><td><a href="/articles/20220831a/">OpenAPI Generator + Rust</a></td></tr><tr><td>9&#x2F;1（木）</td><td>今泉さん</td><td><a href="/articles/20220901a/">IoTの力でワインの品質管理をする</a></td></tr><tr><td>9&#x2F;2（金）</td><td>skip</td><td>skip</td></tr><tr><td>–</td><td></td><td></td></tr><tr><td>9&#x2F;5（月）</td><td>宮永さん</td><td>【Go×土壌水分計】観葉植物を枯れから救う</td></tr><tr><td>9&#x2F;6（火）</td><td>金子さん</td><td>Tech Blogからキーワード抽出</td></tr><tr><td>9&#x2F;7（水）</td><td>王さん</td><td>変なルービックキューブのソルバーの後編</td></tr></tbody></table></div><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>2022年はとても暑い夏でした。時期的にも夏休みが終わる時期ですが、ぜひあの頃を思い出しながら読んでいただければと思います！</p><p>アイキャッチの画像は <a href="https://pixabay.com/users/bowl_of_nicole-1260429/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4363073">Nicole Turner</a> from <a href="https://pixabay.com//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4363073">Pixabay</a> を利用させていただきました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%8F%E4%BC%91%E3%81%BF%E8%87%AA%E7%94%B1%E7%A0%94%E7%A9%B6/">夏休み自由研究</category>
      
      
      <comments>https://future-architect.github.io/articles/20220822a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>gRPCがフロントエンド通信の第一の選択肢になる時代がやってきたかも？</title>
      <link>https://future-architect.github.io/articles/20220819a/</link>
      <guid>https://future-architect.github.io/articles/20220819a/</guid>
      <pubDate>Thu, 18 Aug 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;Go 1.19が8&amp;#x2F;2に早々にリリースされました。個人的にはGo 1.19よりも楽しみだったのが、サービス間通信とIDL（インタフェース記述言語）連載の中でご紹介した&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>Go 1.19が8&#x2F;2に早々にリリースされました。個人的にはGo 1.19よりも楽しみだったのが、サービス間通信とIDL（インタフェース記述言語）連載の中でご紹介した<a href="/articles/20220623a/">gRPCのGo実装の新星、Connect</a>のアップデートでした。そしてそれはやってきました。</p><p>詳しい内容は↑の記事を見ていただくとして、Connectが<a href="https://buf.build/blog/connect-a-better-grpc">その開発元ブログの紹介記事</a>で宣言していたのが次の2つのことでした。</p><ul><li>Go 1.19が出たらconnect-goは1.0にして以後後方互換性を守るよ</li><li>connect-webを出すよ</li></ul><p>前者はまだ0.3だったのですが、connect-webはリリースされました。歴史のあるフロントエンドのコードジェネレータはTypeScript対応が後付けだったりするのですが、TypeScriptがファーストシチズンかつ、ネイティブというコードジェネレータなので、開発はかなりやりやすくなることが期待されます。connect-webの公開は数日前でしたが、本家の紹介記事もちょうど今日、公開されました。</p><p><a href="https://buf.build/blog/connect-web-protobuf-grpc-in-the-browser">Connect-Web: It’s time for Protobuf and gRPC to be your first choice in the browser</a></p><p>本家のチュートリアルとかもまだない状態ですが、サンプルコードを見たら簡単そうだったので、connect-goとセットで試してみました。サンプルは以下のリポジトリにアップしています。</p><p><a href="https://github.com/shibukawa/connect-test">https://github.com/shibukawa/connect-test</a></p><p>元のエントリーではRuby, Python, PHPにも出していくよ宣言がありましたが、今回のconnect-webのブログには、Node.js、Android, iOSにも出すよ宣言がありました。あと、<a href="https://github.com/bufbuild/connect-web/blob/main/packages/connect-web/src/assert-fetch-api.ts#L23">connect-webの中のソースコード</a>を見ると、</p><blockquote><p>fetch()がないってことは古いNode.js使っているのか？connect-nodeを待ってて！</p></blockquote><p>とあるので、今でも<code>fetch()</code>のあるNode.js 18でクライアントなら動作しそうですね。</p><h1 id="プロジェクトのフォルダ構成と初期化"><a href="#プロジェクトのフォルダ構成と初期化" class="headerlink" title="プロジェクトのフォルダ構成と初期化"></a>プロジェクトのフォルダ構成と初期化</h1><p>フォルダ構造はこんな感じです。Goの標準的な構成(トップにgo.mod、cmdフォルダ以下にエントリポイント)にプラスして、frontendというフォルダにフロントエンドのプロジェクトフォルダを起きました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">connect-test</span><br><span class="line">├── buf.gen.yaml           <span class="comment"># コード生成の設定。修正必要。</span></span><br><span class="line">├── buf.yaml               <span class="comment"># buf mod initで生成。いじらない。</span></span><br><span class="line">├── cmd</span><br><span class="line">│   └── connect-test</span><br><span class="line">│       └── main.go        <span class="comment"># サーバーのエントリーポイント</span></span><br><span class="line">├── frontend               <span class="comment"># フロントエンドのフォルダ(詳細は省略</span></span><br><span class="line">│   ├── package.json</span><br><span class="line">│   └── src</span><br><span class="line">│       └── greet          <span class="comment"># 自動生成で作ったフロントエンドコード</span></span><br><span class="line">│           └── v1</span><br><span class="line">│               ├── greet_connectweb.ts</span><br><span class="line">│               └── greet_pb.ts</span><br><span class="line">├── release.go             <span class="comment"># 静的HTMLバンドル用(github.com/shibukawa/frontend-go利用)</span></span><br><span class="line">├── gen                    <span class="comment"># 自動生成で作ったサーバーコード</span></span><br><span class="line">│   └── greet</span><br><span class="line">│       └── v1</span><br><span class="line">│           ├── greet.pb.go</span><br><span class="line">│           └── greetv1connect</span><br><span class="line">│               └── greet.connect.go</span><br><span class="line">├── generate.go            <span class="comment"># go generateを定義したコード</span></span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── greet                  <span class="comment"># protobuf定義</span></span><br><span class="line">│   └── v1</span><br><span class="line">│       └── greet.proto</span><br><span class="line">└── server.go              <span class="comment"># サーバー実装</span></span><br></pre></td></tr></table></figure><p>プロジェクトのフォルダ（ここではconnect-test)を作り、次のようにプロジェクトを作りました。フロントエンドはSolid.jsを使ってます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> connect-test</span><br><span class="line">$ go mod init connecttest</span><br><span class="line">$ npx degit solidjs/templates/ts frontend <span class="comment"># Solid.jsでfrontend作成</span></span><br></pre></td></tr></table></figure><p>必要なツール類を入れます。メインのbufとGo用のツールはGo製なのでgo installで入れます。フロントエンドの方はnpmで配布されているのでnpm installします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ go install github.com/bufbuild/buf/cmd/buf@latest</span><br><span class="line">$ go install google.golang.org/protobuf/cmd/protoc-gen-go@latest</span><br><span class="line">$ go install github.com/bufbuild/connect-go/cmd/protoc-gen-connect-go@latest</span><br><span class="line">$ <span class="built_in">cd</span> frontend</span><br><span class="line">$ npm install --save-dev bufbuild/protoc-gen-connect-web bufbuild/protoc-gen-es</span><br></pre></td></tr></table></figure><h1 id="gRPCの定義作成"><a href="#gRPCの定義作成" class="headerlink" title="gRPCの定義作成"></a>gRPCの定義作成</h1><p>ここでは、connect-goのサンプルをとりあえずそのまま利用しました。go_packageだけはgo modで設定したルートのパッケージ名はじまりになるように修正しています。</p><figure class="highlight java"><figcaption><span>greet/v1/greet.proto</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> greet.v1;</span><br><span class="line"></span><br><span class="line"><span class="type">option</span> <span class="variable">go_package</span> <span class="operator">=</span> <span class="string">&quot;connecttest/gen/greet/v1;greetv1&quot;</span>;</span><br><span class="line"></span><br><span class="line">message GreetRequest &#123;</span><br><span class="line">  <span class="type">string</span> <span class="variable">name</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message GreetResponse &#123;</span><br><span class="line">  <span class="type">string</span> <span class="variable">greeting</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service GreetService &#123;</span><br><span class="line">  rpc <span class="title function_">Greet</span><span class="params">(GreetRequest)</span> returns (GreetResponse) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>buf mod init</code>を実行して<code>buf.yaml</code>を生成したあとは、<code>buf.gen.yaml</code>を自分で作成します。上二つはGoコード生成のためのconnect-goのサンプルと同じですが、下にフロントエンド用のコード生成用の設定です。出力先はフロントエンドフォルダの中になるようにしています。</p><figure class="highlight yaml"><figcaption><span>buf.gen.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">go</span></span><br><span class="line">    <span class="attr">out:</span> <span class="string">gen</span></span><br><span class="line">    <span class="attr">opt:</span> <span class="string">paths=source_relative</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">connect-go</span></span><br><span class="line">    <span class="attr">out:</span> <span class="string">gen</span></span><br><span class="line">    <span class="attr">opt:</span> <span class="string">paths=source_relative</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">es</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./frontend/node_modules/.bin/protoc-gen-es</span></span><br><span class="line">    <span class="attr">out:</span> <span class="string">frontend/src</span></span><br><span class="line">    <span class="attr">opt:</span> <span class="string">target=ts</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">connect-web</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">./frontend/node_modules/.bin/protoc-gen-connect-web</span></span><br><span class="line">    <span class="attr">out:</span> <span class="string">frontend/src</span></span><br><span class="line">    <span class="attr">opt:</span> <span class="string">target=ts</span></span><br></pre></td></tr></table></figure><p>あとは<code>buf generate</code>でサーバーとフロントのコードを生成します。</p><h1 id="APIサーバーの中身の実装"><a href="#APIサーバーの中身の実装" class="headerlink" title="APIサーバーの中身の実装"></a>APIサーバーの中身の実装</h1><p>中身はconnect-goのサンプルとほぼ同じで、リクエストできた<code>name</code>パラメータを使って、レスポンスの文字列を作って返しているだけです。</p><figure class="highlight go"><figcaption><span>server.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> connecttest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">greetv1 <span class="string">&quot;connecttest/gen/greet/v1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/bufbuild/connect-go&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GreetServer <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *GreetServer)</span></span> Greet(</span><br><span class="line">ctx context.Context,</span><br><span class="line">req *connect.Request[greetv1.GreetRequest],</span><br><span class="line">) (*connect.Response[greetv1.GreetResponse], <span class="type">error</span>) &#123;</span><br><span class="line">res := connect.NewResponse(&amp;greetv1.GreetResponse&#123;</span><br><span class="line">Greeting: fmt.Sprintf(<span class="string">&quot;Hello, %s!&quot;</span>, req.Msg.Name),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このサーバーをハンドラーとして登録してウェブサーバーを起動するエントリーポイントのコードは以下の通りです。</p><figure class="highlight go"><figcaption><span>cmd/connect-test/main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/signal&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/shibukawa/frontend-go&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/net/http2&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/net/http2/h2c&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;connecttest&quot;</span></span><br><span class="line"><span class="string">&quot;connecttest/gen/greet/v1/greetv1connect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ctx, stop := signal.NotifyContext(context.Background(), os.Interrupt)</span><br><span class="line"><span class="keyword">defer</span> stop()</span><br><span class="line"></span><br><span class="line">greeter := &amp;connecttest.GreetServer&#123;&#125;</span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">path, handler := greetv1connect.NewGreetServiceHandler(greeter)</span><br><span class="line">mux.Handle(path, handler)</span><br><span class="line">mux.Handle(<span class="string">&quot;/&quot;</span>, frontend.MustNewSPAHandler(ctx)) <span class="comment">// 🐙</span></span><br><span class="line"></span><br><span class="line">server := &amp;http.Server&#123;</span><br><span class="line">Addr:    <span class="string">&quot;:8888&quot;</span>,</span><br><span class="line">Handler: h2c.NewHandler(mux, &amp;http2.Server&#123;&#125;),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">&lt;-ctx.Done()</span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), <span class="number">5</span>*time.Second)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line">server.Shutdown(ctx)</span><br><span class="line">&#125;()</span><br><span class="line">fmt.Println(<span class="string">&quot;start receiving at :8888&quot;</span>)</span><br><span class="line">log.Fatal(server.ListenAndServe())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>開発時には裏でfrontendフォルダでnpm run devして開発サーバーを起動してリバースプロキシ経由でSPAを表示して、リリース時にはgo embedで取り込んだ成果物のHTML&#x2F;CSS&#x2F;JSを使って表示してあげる(<a href="https://future-architect.github.io/articles/20210408/">go:embed紹介記事でやっているのと同等</a>)パッケージの<a href="https://github.com/shibukawa/frontend-go">github.com&#x2F;shibukawa&#x2F;frontend-go</a>というのをこの前作ったので、それを使っています。</p><p>ついでにそれの設定用のコードも作成しますが、リバプロいらないよ、ということであれば、このファイルと↑の🐙の行を消してください。</p><figure class="highlight go"><figcaption><span>frontend.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:build release</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> connecttest</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;embed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/shibukawa/frontend-go&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed frontend/dist/*</span></span><br><span class="line"><span class="keyword">var</span> asset embed.FS</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">frontend.SetFrontAsset(asset, frontend.Opt&#123;</span><br><span class="line">FrameworkType: frontend.SolidJS,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これでサーバーは完成です。</p><h1 id="フロントエンドの作成"><a href="#フロントエンドの作成" class="headerlink" title="フロントエンドの作成"></a>フロントエンドの作成</h1><p>connect-webで作成したクライアントは、まずトランスポートを作成し、それを渡してクライアントを作成します。あとはクライアントのメソッドを呼べばサーバーにリクエストを送信できます。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createConnectTransport,</span><br><span class="line">  createPromiseClient,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;@bufbuild/connect-web&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">GreetService</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;./greet/v1/greet_connectweb&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// トランスポート作成</span></span><br><span class="line"><span class="keyword">const</span> transport = <span class="title function_">createConnectTransport</span>(&#123;</span><br><span class="line">  <span class="attr">baseUrl</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// クライアント作成</span></span><br><span class="line"><span class="keyword">const</span> client = <span class="title function_">createPromiseClient</span>(<span class="title class_">GreetService</span>, transport);</span><br><span class="line"></span><br><span class="line"><span class="comment">// サーバーリクエスト実行</span></span><br><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span> client.<span class="title function_">greet</span>(&#123;<span class="attr">name</span>: <span class="string">&quot;名前&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p>この状態では、オリジナルのconnectプロトコルでの通信になります。なお、<code>createConnectTransport()</code>のオプションでテキスト形式、バイナリ形式が選べたり、インターセプターの設定ができたり、いろいろできます。なお、リバースプロキシを外した場合は<code>baseUrl</code>は<code>http://localhost:3000</code>とかにしておく必要があると思います。</p><p>ソースを見ると<code>createGrpcWebTransport()</code>というトランスポート作成のファクトリー関数もあり、これを使うと純正のgRPC-Webプロトコルの通信になってくれるようです。</p><p>また、クライアントは、いまどき使うことはないと思いますが、コールバックスタイルのものを作成する<code>createCallbackClient()</code>もあります。</p><p>最終系は次のようになります。Solid.jsではサーバー通信は<code>createResource()</code>でラップして使いますが、この中ではasync関数を渡せば良いので、connect-webで生成したサービスはばっちり活用できます。</p><figure class="highlight tsx"><figcaption><span>App.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  createSignal,</span><br><span class="line">  createResource,</span><br><span class="line">  <span class="title class_">Component</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;solid-js&#x27;</span>;</span><br><span class="line"></span><br><span class="line">(ここに上記のコードを入れる)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">greeter</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> client.<span class="title function_">greet</span>(&#123;name&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">App</span>: <span class="title class_">Component</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = <span class="title function_">createSignal</span>(<span class="string">&quot;bob&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [greet] = <span class="title function_">createResource</span>(name, greeter);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#123;styles.App&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&#123;styles.header&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">placeholder</span>=<span class="string">&quot;名前を入れてね&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onInput</span>=<span class="string">&#123;(e)</span> =&gt;</span> setName(e.currentTarget.value)&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>greeting: &#123;greet()?.greeting&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><img src="/images/20220819a/image.png" alt="image.png" width="1200" height="792" loading="lazy"><p>これだけで、名前を入れたらサーバーで挨拶文を生成して返し、それを表示するコードができました。</p><p>今回の例は使ってみたかったのでSolid.jsを使いましたが、Reactユーザーで<code>useSWR()</code>を利用しているならたぶんこうすることになるかと思います。SWRは最初のパラメータ（文字列か文字列の配列）がキャッシュキーになります。そのため、<code>fetcher</code>の中では不要な(生成コードが持ってくれている)サービスのメソッドの名前をあえて<code>useSWR()</code>の引数に入れています。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetcher</span>(<span class="params">key: <span class="built_in">string</span>, name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> client.<span class="title function_">greet</span>(&#123;name&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; data, error &#125; = <span class="title function_">useSWR</span>([<span class="title class_">GreetService</span>.<span class="property">methods</span>.<span class="property">greet</span>.<span class="property">name</span>, name], fetcher)</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>connect-goのときもそうでしたが、生成されるコードの分量がかなり少なくて理解しやすいので、生成されたコードに責任を持ってリリースするのがやりやすそうでいいですね。また、gRPCはOpenAPIのyamlよりもコンパクトに書けるし、もちろん、フロントもサーバーも型チェックがばっちり効いていい感じです。これであれば、OpenAPIのときみたいに、コード生成のテンプレートをいじり出したり、というのも当面は不要な気がします。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/">フロントエンド</category>
      
      <category domain="https://future-architect.github.io/tags/gRPC/">gRPC</category>
      
      
      <comments>https://future-architect.github.io/articles/20220819a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>MacのVPNをコマンドでスムーズに切り替えよう</title>
      <link>https://future-architect.github.io/articles/20220818a/</link>
      <guid>https://future-architect.github.io/articles/20220818a/</guid>
      <pubDate>Wed, 17 Aug 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;複数のVPNを切り替える際に、認証情報(Username,</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>複数のVPNを切り替える際に、認証情報(Username, Password)を入力することが面倒で、パスワードを間違えると、再度入力しないといけなくなり、わずかでありながらも、仕事する中の小さなストレスだと感じています。</p><p>今回は、コマンドでスムーズに複数のVPNを切り替える方法を紹介します。<br>コマンドを紹介する前に、なぜ複数VPNを使っているかを話します。</p><h1 id="切り替えているVPN"><a href="#切り替えているVPN" class="headerlink" title="切り替えているVPN"></a>切り替えているVPN</h1><p>筆者は普段から、開発したソースコードをGithubにプッシュしたり、DBにアクセスしたりします。</p><p>Githubへのアクセスは社内VPN、DBには別のVPNに接続する必要があります。</p><p>社内VPNからDB接続できるようにすればいいじゃないかと思いますが、社内VPNから顧客システムDBに接続できると、関係者以外の社員もアクセスできてしまいますので、まずい話です。</p><p>社内VPNはCisco AnyConnectで接続し、DB接続用VPNはMacOS標準のVPN機能を使用しています。</p><h2 id="社内VPN-Cisco-AnyConnect"><a href="#社内VPN-Cisco-AnyConnect" class="headerlink" title="社内VPN (Cisco AnyConnect)"></a>社内VPN (Cisco AnyConnect)</h2><p>Cisco社のAnyConnectを使用しています。</p><p>接続するために、AnyConnectを開き、接続先を選択します。</p><img src="/images/20220818a/Screen_Shot_2022-06-19_at_16.02.47.png" alt="" width="425" height="516" loading="lazy"><p>System keychainのアクセス許可が求められ、Username と Password を入力する必要があります。(面倒)</p><img src="/images/20220818a/Screen_Shot_2022-06-19_at_15.33.36_1.png" alt="Screen_Shot_2022-06-19_at_15.33.36_1.png" width="430" height="214" loading="lazy"><p>さらに、Cisco Anyconnect からも Username と Password を求められ、再度入力します。</p><img src="/images/20220818a/Screen_Shot_2022-06-19_at_15.34.26.png" alt="" width="465" height="194" loading="lazy"><p>ここまでできて、やっと社内VPNに繋がります。<br>1日のはじめに、Mac起動後に1回だけこの作業をやるのであれば、まだ我慢ができます。<br>ただ、1日に何回もDB接続する場面があったりするので、Cisco AnyConnect も何回も接続&#x2F;切断する羽目になります。</p><h2 id="DB接続用VPN"><a href="#DB接続用VPN" class="headerlink" title="DB接続用VPN"></a>DB接続用VPN</h2><p>DB接続用VPNはCisco AnyConnectを使わず、MacOS標準のVPN機能を使用します。<br>(System Preferences &gt; Network から設定するVPN)</p><img src="/images/20220818a/Screen_Shot_2022-06-19_at_15.50.11.png" alt="" width="658" height="630" loading="lazy"><p>↑のように、ネットワーク設定画面から接続&#x2F;切断できますが、<br>↓のように、ツールバーにVPNアイコン配置して、VPNの接続&#x2F;切断もできます。</p><img src="/images/20220818a/Screen_Shot_2022-06-19_at_16.25.52.png" alt="" width="330" height="236" loading="lazy"><h1 id="VPNをスムーズに切り替えるコマンド"><a href="#VPNをスムーズに切り替えるコマンド" class="headerlink" title="VPNをスムーズに切り替えるコマンド"></a>VPNをスムーズに切り替えるコマンド</h1><p>上で説明したVPN切り替え操作は、コマンドラインからでも実現することができます。<br>下記のコマンドで Cisco VPN に切り替えます。</p><figure class="highlight sh"><figcaption><span>ciscovpn.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Disconnet VPN</span></span><br><span class="line">scutil --nc stop <span class="variable">$&#123;VPN&#125;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Connect Cisco AnyConnect</span></span><br><span class="line">/opt/cisco/anyconnect/bin/vpn -s  &lt; ~/.vpn/CISCO_VPN.cre connect <span class="variable">$&#123;CISCO_VPN&#125;</span>;</span><br></pre></td></tr></table></figure><p>また、下記のコマンドで、標準機能VPNに接続できます。</p><figure class="highlight sh"><figcaption><span>vpn.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Disconnect Cisco AnyConnect</span></span><br><span class="line">/opt/cisco/anyconnect/bin/vpn -s disconnect;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Connet VPN</span></span><br><span class="line">secret=`<span class="built_in">cat</span> ~/.vpn/vpn`;</span><br><span class="line">scutil --nc start <span class="variable">$&#123;VPN&#125;</span> --secret <span class="variable">$&#123;secret&#125;</span>;</span><br><span class="line"><span class="built_in">unset</span> secret;</span><br></pre></td></tr></table></figure><p>ではここから、それぞれのVPNに切り替えるコマンドを解説します。</p><h2 id="Cisco-VPN-に切り替えるコマンド"><a href="#Cisco-VPN-に切り替えるコマンド" class="headerlink" title="Cisco VPN に切り替えるコマンド"></a>Cisco VPN に切り替えるコマンド</h2><p>標準機能VPNを切断して、Cisco VPNに接続します。</p><figure class="highlight sh"><figcaption><span>ciscovpn.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Disconnet VPN</span></span><br><span class="line">scutil --nc stop <span class="variable">$&#123;VPN&#125;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Connect Cisco AnyConnect</span></span><br><span class="line">/opt/cisco/anyconnect/bin/vpn -s  &lt; ~/.vpn/CISCO_VPN.cre connect <span class="variable">$&#123;CISCO_VPN&#125;</span>;</span><br></pre></td></tr></table></figure><p><code>scutil</code> コマンドを使用して、環境変数 <code>VPN</code> で指定した標準機能VPNを切断します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scutil --nc stop <span class="variable">$&#123;VPN&#125;</span>;</span><br></pre></td></tr></table></figure><p>次に<code>vpn</code>コマンドを使用して、環境変数<code>CISCO_VPN</code>で指定したCisco VPNに接続します。<br>Username、Passwordと確認の入力を求められますので、入力します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ /opt/cisco/anyconnect/bin/vpn -s connect <span class="variable">$&#123;CISCO_VPN&#125;</span>;</span><br><span class="line">  &gt;&gt; Please enter your username and password.</span><br><span class="line"></span><br><span class="line">Username:</span><br><span class="line">Password:</span><br><span class="line">accept? [y/n]: y</span><br><span class="line">  &gt;&gt; state: Connecting</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>毎度入力するのが面倒なので、Username、Passwordと確認の入力(Yesの)yが書き込まれているテキストファイルを用意します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Username</span><br><span class="line">Password</span><br><span class="line">y</span><br></pre></td></tr></table></figure><p>リダイレクトを使って標準入力の入力元として、このテキストファイルを指定してあげると、Username、Passwordと確認の入力を手入力しなくて済みます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /opt/cisco/anyconnect/bin/vpn -s  &lt; ~/.vpn/CISCO_VPN.cre connect <span class="variable">$&#123;CISCO_VPN&#125;</span>;</span><br></pre></td></tr></table></figure><p>アプリケーション<code>AnyConnect</code>を起動している状態で、<code>vpn</code>コマンドを実行すると、怒られます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ /opt/cisco/anyconnect/bin/vpn -s  &lt; ~/.vpn/CISCO_VPN.cre connect <span class="variable">$&#123;CISCO_VPN&#125;</span>;</span><br><span class="line">...</span><br><span class="line">  &gt;&gt; error: Connect not available. Another AnyConnect application is running</span><br><span class="line">or this functionality was not requested by this application.</span><br><span class="line">VPN&gt;</span><br></pre></td></tr></table></figure><p>アプリケーション<code>Anyconnet</code>を閉じて、再度実行すると、無事に接続することができます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">$ /opt/cisco/anyconnect/bin/vpn -s  &lt; ~/.vpn/CISCO_VPN.cre connect <span class="variable">$&#123;CISCO_VPN&#125;</span>;</span><br><span class="line">...</span><br><span class="line">!!!!!!!!!!!  WARNING  !!!!!!!!!!!</span><br><span class="line">This is a private system.</span><br><span class="line">Unauthorized access is prohibited by law.</span><br><span class="line">Violators may be prosecuted.</span><br><span class="line">If you are not authorized to access this system,</span><br><span class="line">please disconnect now.</span><br><span class="line"></span><br><span class="line">!!!!!!!!!!!  NOTICE  !!!!!!!!!!!</span><br><span class="line">When browsing the Web via WebProxy,</span><br><span class="line">user authentication is absolutely necessary.</span><br><span class="line">Please enter user ID and password on the authentication</span><br><span class="line">screen without adding <span class="string">&quot;xxxxxx&quot;</span>.</span><br><span class="line"></span><br><span class="line">  &gt;&gt; state: Connecting</span><br><span class="line">  &gt;&gt; notice: Establishing VPN session...</span><br><span class="line">  &gt;&gt; notice: The AnyConnect Downloader is performing update checks...</span><br><span class="line">  &gt;&gt; notice: Checking <span class="keyword">for</span> profile updates...</span><br><span class="line">  &gt;&gt; notice: Checking <span class="keyword">for</span> product updates...</span><br><span class="line">  &gt;&gt; notice: Checking <span class="keyword">for</span> customization updates...</span><br><span class="line">  &gt;&gt; notice: Performing any required updates...</span><br><span class="line">  &gt;&gt; notice: The AnyConnect Downloader updates have been completed.</span><br><span class="line">  &gt;&gt; state: Connecting</span><br><span class="line">  &gt;&gt; notice: Establishing VPN session...</span><br><span class="line">  &gt;&gt; notice: Establishing VPN - Initiating connection...</span><br><span class="line">  &gt;&gt; notice: Establishing VPN - Examining system...</span><br><span class="line">  &gt;&gt; notice: Establishing VPN - Activating VPN adapter...</span><br><span class="line">  &gt;&gt; notice: Establishing VPN - Configuring system...</span><br><span class="line">  &gt;&gt; notice: Establishing VPN...</span><br><span class="line">  &gt;&gt; state: Connected</span><br></pre></td></tr></table></figure><h2 id="標準機能VPNに切り替えるコマンド"><a href="#標準機能VPNに切り替えるコマンド" class="headerlink" title="標準機能VPNに切り替えるコマンド"></a>標準機能VPNに切り替えるコマンド</h2><p>今度は<code>Cisco VPN</code>を切断して、<code>標準機能VPN</code>に接続するので、上記のコマンドと逆のことをやっています。</p><figure class="highlight sh"><figcaption><span>vpn.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Disconnect Cisco AnyConnect</span></span><br><span class="line">/opt/cisco/anyconnect/bin/vpn -s disconnect;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Connet VPN</span></span><br><span class="line">secret=`<span class="built_in">cat</span> ~/.vpn/vpn`;</span><br><span class="line">scutil --nc start <span class="variable">$&#123;VPN&#125;</span> --secret <span class="variable">$&#123;secret&#125;</span>;</span><br><span class="line"><span class="built_in">unset</span> secret;</span><br></pre></td></tr></table></figure><p><code>vpn</code>コマンドで、<code>Cisco VPN</code>を切断します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ /opt/cisco/anyconnect/bin/vpn -s disconnect;</span><br><span class="line">Cisco AnyConnect Secure Mobility Client (version 4.10.04071) .</span><br><span class="line"></span><br><span class="line">Copyright (c) 2004 - 2021 Cisco Systems, Inc.  All Rights Reserved.</span><br><span class="line"></span><br><span class="line">  &gt;&gt; state: Connected</span><br><span class="line">  &gt;&gt; state: Connected</span><br><span class="line">  &gt;&gt; registered with local VPN subsystem.</span><br><span class="line">  &gt;&gt; state: Disconnecting</span><br><span class="line">  &gt;&gt; notice: Disconnect in progress, please wait...</span><br><span class="line">  &gt;&gt; state: Connected</span><br><span class="line">  &gt;&gt; notice: Connected to XXXXXX.</span><br><span class="line">  &gt;&gt; state: Disconnecting</span><br><span class="line">  &gt;&gt; notice: Disconnect in progress, please wait...</span><br><span class="line">  &gt;&gt; state: Disconnecting</span><br><span class="line">  &gt;&gt; state: Disconnected</span><br><span class="line">  &gt;&gt; notice: Ready to connect.</span><br><span class="line">VPN&gt;</span><br></pre></td></tr></table></figure><p><code>scutil</code>コマンドを使用して、環境変数<code>VPN</code>で指定した<code>標準機能VPN</code>に接続する際に、事前共有鍵が必要となります。<br>そのため、鍵情報をテキストファイルに保存して、環境変数<code>secret</code>として読み込んだ上で、実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">secret=`<span class="built_in">cat</span> ~/.vpn/vpn`;</span><br><span class="line">scutil --nc start <span class="variable">$&#123;VPN&#125;</span> --secret <span class="variable">$&#123;secret&#125;</span>;</span><br><span class="line"><span class="built_in">unset</span> secret;</span><br></pre></td></tr></table></figure><h1 id="VPN切り替えコマンド導入の効果"><a href="#VPN切り替えコマンド導入の効果" class="headerlink" title="VPN切り替えコマンド導入の効果"></a>VPN切り替えコマンド導入の効果</h1><p>コマンドを導入したことで、どの程度スムーズに切り替えることができるのか、時刻コマンドで実際の処理時間を測ってみます。<br>MacOSだと、標準の時刻コマンド date は秒までしか指定できないので、代わりにナノ秒を指定できる gdate コマンドを使用して、計測します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+ start=`gdate +%s.%N`</span><br><span class="line"></span><br><span class="line"># 計測する処理</span><br><span class="line"></span><br><span class="line">+ finish=`gdate +%s.%N`</span><br><span class="line">+ diff=$( echo &quot;$finish - $start&quot; | bc -l )</span><br><span class="line">+ echo &#x27;execution time:&#x27; $diff</span><br></pre></td></tr></table></figure><p>計測した結果、Cisco AnyConnect に接続する ciscovpn.sh は 約2.3秒</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution time: 2.335424000</span><br></pre></td></tr></table></figure><p>VPNに接続する vpn.sh は約 0.8秒となりました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execution time: .785082000</span><br></pre></td></tr></table></figure><p>通常の手動ですと、VPNの切り替えに10秒程度はかかることと比べて、2秒程度で切り替えられることを考えると、VPNをスムーズに切り替えられていると言えます。<br>また、手動によるパスワードの入力間違いなどもなくなり、小さいながらもストレス軽減に繋がっています。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>今回はMacでのVPN切り替えコマンドを紹介しましたが、Windowsでも同様にVPNを切り替えることができます。<br>マウス操作よりもキーボード操作やコマンド操作に移行することで、1つ効率化を図ることができました。<br>毎日やっている単純作業を自動化することで、より考えることに集中して、知的生産性を高めることができると考えています。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/ShellScript/">ShellScript</category>
      
      <category domain="https://future-architect.github.io/tags/VPN/">VPN</category>
      
      <category domain="https://future-architect.github.io/tags/Mac/">Mac</category>
      
      
      <comments>https://future-architect.github.io/articles/20220818a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Next.js公式のMDXプラグインで、Markdownでページを作る機能を試してみた</title>
      <link>https://future-architect.github.io/articles/20220816a/</link>
      <guid>https://future-architect.github.io/articles/20220816a/</guid>
      <pubDate>Mon, 15 Aug 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;お客様と一緒にNext.jsのドキュメントの輪読会をやっているのですが、その中で初めて知った機能がMDXというマークダウンでページを作成する機能です。&lt;/p&gt;
&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>お客様と一緒にNext.jsのドキュメントの輪読会をやっているのですが、その中で初めて知った機能がMDXというマークダウンでページを作成する機能です。</p><p><a href="https://nextjs.org/docs/advanced-features/using-mdx">https://nextjs.org/docs/advanced-features/using-mdx</a></p><p>利用規約とか、プライバシーポリシーのページ、ヘルプページの作成とか、Reactコンポーネントも表示できるので、Storybookがわりのコンポーネントカタログを作るのに便利そうという話になったので、ちょっと試してみました。</p><h1 id="設定方法"><a href="#設定方法" class="headerlink" title="設定方法"></a>設定方法</h1><p>上記のページに全部書いてあるのでそちらを見ると良いのですが、軽く手順だけ書いておきます。説明をするため、というよりも「これだけの手間ならやってもいいかな」と興味をもってもらうための説明なので実際に作業をする場合は公式ドキュメントの最新情報を確認してください。</p><p>まずは必要なパッケージを追加し、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install @next/mdx @mdx-js/loader</span><br></pre></td></tr></table></figure><p>設定ファイルを少し書き換えます。Next.jsでゼロから作ったnext.config.jsに書き加えるとこんな感じになるかと。</p><figure class="highlight js"><figcaption><span>next.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;next&#x27;).NextConfig</span>&#125; */</span></span><br><span class="line"><span class="keyword">const</span> nextConfig = &#123;</span><br><span class="line">  <span class="attr">reactStrictMode</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">swcMinify</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// ↓この行を追加</span></span><br><span class="line">  <span class="attr">pageExtensions</span>: [<span class="string">&#x27;ts&#x27;</span>, <span class="string">&#x27;tsx&#x27;</span>, <span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;jsx&#x27;</span>, <span class="string">&#x27;md&#x27;</span>, <span class="string">&#x27;mdx&#x27;</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ↓これ以下を追加</span></span><br><span class="line"><span class="keyword">const</span> withMDX = <span class="built_in">require</span>(<span class="string">&#x27;@next/mdx&#x27;</span>)(&#123;</span><br><span class="line">  <span class="attr">extension</span>: <span class="regexp">/\.mdx?$/</span>,</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">remarkPlugins</span>: [],</span><br><span class="line">    <span class="attr">rehypePlugins</span>: [],</span><br><span class="line">    <span class="comment">// `MDXProvider`を使う場合はコメントを外すこと</span></span><br><span class="line">    <span class="comment">// providerImportSource: &quot;@mdx-js/react&quot;,</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">withMDX</span>(nextConfig)</span><br></pre></td></tr></table></figure><p>Next.js公式機能ではありますが、別パッケージになっています。</p><p>markdownのライブラリのプラグインや、HTML処理を行うrehypeのプラグインも設定でき、いろいろな書き方を追加したりできます。GFMサポートを追加するプラグインとかもありますね。</p><p><a href="https://github.com/remarkjs/remark/blob/main/doc/plugins.md">https://github.com/remarkjs/remark/blob/main/doc/plugins.md</a></p><h1 id="さっそく試す。"><a href="#さっそく試す。" class="headerlink" title="さっそく試す。"></a>さっそく試す。</h1><p>Markdownの形式のライセンスをコピペしてきました。</p><p><a href="https://github.com/IQAndreas/markdown-licenses/blob/master/bsd-3.md">https://github.com/IQAndreas/markdown-licenses/blob/master/bsd-3.md</a></p><p>pages以下に<code>license.mdx</code>という名前で配置してアクセスすると表示されていることがわかります。簡単ですね。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── pages</span><br><span class="line">    ├── _app.tsx</span><br><span class="line">    ├── api</span><br><span class="line">    │   └── hello.ts</span><br><span class="line">    ├── index.tsx</span><br><span class="line">    └── license.mdx  # これ！</span><br></pre></td></tr></table></figure><img src="/images/20220816a/スクリーンショット_2022-07-29_12.57.25.png" alt="スクリーンショット_2022-07-29_12.57.25.png" width="1200" height="817" loading="lazy"><p>mdxの書き方は以下のサイトで確認できます。</p><p><a href="https://mdxjs.com/">https://mdxjs.com/</a></p><p>JSX同様、<code>&#123;&#125;</code>でJSコードを挟み込めます。<code>getStaticProps()</code>とかのNode.jsのデータフェッチの処理もいつも通りに書けますね。結果は<code>props</code>に入れられるので、それをもとに表示することも可能です。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">Modified BSD License</span></span><br><span class="line"><span class="section">====================</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_Copyright © &#123;props.year&#125;, &#123;props.holder&#125;</span></span><br><span class="line"><span class="emphasis">_</span>All rights reserved.<span class="emphasis">_</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">Redistribution and use in source and binary forms, with or without</span></span><br><span class="line"><span class="emphasis">modification, are permitted provided that the following conditions are met:</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">(省略)</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">export async function getStaticProps(context) &#123;</span></span><br><span class="line"><span class="emphasis">  return &#123;</span></span><br><span class="line"><span class="emphasis">    props: &#123;</span></span><br><span class="line"><span class="emphasis">      year: (new Date()).getFullYear(),</span></span><br><span class="line"><span class="emphasis">      holder: &quot;Yoshiki Shibukawa&quot;</span></span><br><span class="line"><span class="emphasis">    &#125;</span></span><br><span class="line"><span class="emphasis">  &#125;</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br></pre></td></tr></table></figure><p>権利者情報とか、年情報をサーバーからとってきて埋め込みもできました。<code>getStaticProps()</code>なので静的サイト生成にも使えますね。</p><img src="/images/20220816a/スクリーンショット_2022-07-29_15.13.23.png" alt="スクリーンショット_2022-07-29_15.13.23.png" width="998" height="114" loading="lazy"><h1 id="タグのカスタマイズ機能を試してみる"><a href="#タグのカスタマイズ機能を試してみる" class="headerlink" title="タグのカスタマイズ機能を試してみる"></a>タグのカスタマイズ機能を試してみる</h1><p>ドキュメントにはタグのカスタマイズ機能も紹介されていました。これにより、たとえばアプリケーションのメインの機能と、ドキュメントのスタイルの合わせも簡単になります。</p><p>特定のmdxページだけのラップでも良いのですが、今回は手間を考えて<code>_app.tsx</code>にまとめて入れてしまいました。mdxの標準構成だと、<code>&lt;h1&gt;</code>とか　<code>&lt;p&gt;</code>とかのプレーンなタグを生成するのですが、<code>MDXProvider</code>を使うと、それを自作のタグに置き換えられます。</p><p>Tailwind CSSを使ったコンポーネントを作って登録してみたのがこのコードです。</p><figure class="highlight tsx"><figcaption><span>pages/_app.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../styles/globals.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ReactNode</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">AppProps</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;next/app&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MDXProvider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@mdx-js/react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成されたHTMLで使用するコンポーネント</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">H1</span>(<span class="params">props: &#123;children?: ReactNode&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;text-blue-600 text-2xl font-bold&quot;</span>&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">P</span>(<span class="params">props: &#123;children?: ReactNode&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;p-3&quot;</span>&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Li</span>(<span class="params">props: &#123;children?: ReactNode&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;px-6 py-1 list-item list-outside drop-shadow-lg&quot;</span>&gt;</span>🏄 &#123;props.children&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> components = &#123;</span><br><span class="line">  <span class="attr">h1</span>: <span class="variable constant_">H1</span>,</span><br><span class="line">  <span class="attr">p</span>: P,</span><br><span class="line">  <span class="attr">li</span>: <span class="title class_">Li</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyApp</span>(<span class="params">&#123; Component, pageProps &#125;: AppProps</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MDXProvider</span> <span class="attr">components</span>=<span class="string">&#123;components&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Component</span> &#123;<span class="attr">...pageProps</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MDXProvider</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MyApp</span></span><br></pre></td></tr></table></figure><p>スタイルが書きかわりました。簡単ですね。React Bootstrapを使っていたらBootstrapのコンポーネントを、MUIを使っていたらMUIを使うように設定することで、デザインの親和性も上がると思います。</p><img src="/images/20220816a/スクリーンショット_2022-07-29_15.13.12.png" alt="スクリーンショット_2022-07-29_15.13.12.png" width="1200" height="948" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Next.jsのページにはReactコンポーネントを表示する方法や、ページ全体をラップする書き方とかの紹介はありましたが、<code>getStaticProps()</code>のようなデータ取得関数と<code>props</code>の利用や、TypeScriptの型チェックを効かせたカスタマイズ機能の実装の例が公式ドキュメントにはなかったので、ちょっと試行錯誤してみました。</p><p>Next.jsのさまざまな機能とも合わせ込みしやすくなっていますし、応用しやすそうに感じました。</p><p>また、MDXそのものも今回初めて知ったのですが、Next.js固有のものではなく、独立したパッケージで、Vue.jsとかとも組み合わせられそうですね。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/">フロントエンド</category>
      
      <category domain="https://future-architect.github.io/tags/Next-js/">Next.js</category>
      
      <category domain="https://future-architect.github.io/tags/Markdown/">Markdown</category>
      
      <category domain="https://future-architect.github.io/tags/MDX/">MDX</category>
      
      
      <comments>https://future-architect.github.io/articles/20220816a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【メディア業界】新聞社の編集業務とフューチャーの取組み</title>
      <link>https://future-architect.github.io/articles/20220810a/</link>
      <guid>https://future-architect.github.io/articles/20220810a/</guid>
      <pubDate>Tue, 09 Aug 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220810a/absolutvision-WYd_PkCa1BY-unsplash.jpg&quot; alt=&quot;absolutvision-WYd_PkCa1BY-unsplash.jpg&quot; width=&quot;1200&quot; height=&quot;800&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220810a/absolutvision-WYd_PkCa1BY-unsplash.jpg" alt="absolutvision-WYd_PkCa1BY-unsplash.jpg" width="1200" height="800" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは！2021年入社、TIGメディアユニット所属の武田です。</p><p>本記事は<a href="/articles/20220616a/">「業界ドメインに詳しくなろう」シリーズ連載</a>の「メディア業界へのチャレンジ」第2回目です。前回の<a href="/articles/20220715a/">新聞業界（メディア業界）基礎編</a>では、新聞業界（メディア業界）の変遷や新聞社の使命についてご紹介しました。<br>今回はさらに新聞業界に深入りし、新聞社の具体的な編集業務やフューチャーの新聞業界への取組みについてご紹介します。</p><h1 id="新聞社の編集業務-～新聞ができるまで～"><a href="#新聞社の編集業務-～新聞ができるまで～" class="headerlink" title="新聞社の編集業務　～新聞ができるまで～"></a>新聞社の編集業務　～新聞ができるまで～</h1><p>まずはじめに、一般的な新聞製作の流れについてご説明します。<br>新聞社ごとに作業順序や部署の呼び方、業務の割り振りは異なる部分もありますが、基本的にどの新聞社も以下のような工程で紙面を制作しています。<br><img src="/images/20220810a/image_(36).png" alt="紙面の制作フロー" width="1200" height="267" loading="lazy"></p><h2 id="1-取材"><a href="#1-取材" class="headerlink" title="1. 取材"></a>1. 取材</h2><p>まずは記者による取材です。政治、経済、文化、スポーツ、事件など世の中の様々な出来事を取材します。</p><p>記者が日常的に行なっている取材の形は、大きく分けて「会見取材」と「懇談取材」の2種類があります。「会見取材」は、報道陣の要請に応じて、あるいは自発的に、当事者が行なう説明の場であり、録音やカメラ撮影が許されます。記者の出席は基本的に自由で、質疑応答もあります。<br>もう一方の「懇談取材」は、正式な手続きや形式を踏まない取材を指します。録音や撮影がNGということも多く、メモさえも許されない場合があります。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p>その他にも「発生もの」と呼ばれる取材もあります。</p><p>例えば、事件や事故の当事者や家族、関係者への取材などがそれにあたります。事件や事故の関係者に、喜んで話してくれる人はいないのが当たり前で、取材先で断られたり、冷たく追い帰されたり、非難されたりすることもしばしば起こります。もちろん、いきなり訪ねる失礼は承知の上で記者も取材をしています。</p><p>記者は、関係者の辛さや痛みを察しながらも、その出来事の事実や核心を広く世の中に伝えることで、事件や事故の原因や経緯が明らかになり、それが取材に協力してくれた人々への恩返しになると信じて取材活動を続けています。そんな一生懸命な記者の真意や熱意、誠意が伝わって、徐々に心を開き、取材に協力してくれる人もいます。</p><h2 id="2-記事出稿"><a href="#2-記事出稿" class="headerlink" title="2. 記事出稿"></a>2. 記事出稿</h2><p>記者は取材してきた内容をもとに原稿を作成し、デスクに送ります。（送稿・入稿）</p><p>デスクは、記者が書いた原稿をチェックしてアレンジしたり、削ったり、加筆したり、書き換えさせたりして、最適な形で記事を紙面に載せるための責任者です。取材の指揮をとるのもデスクの仕事で、誰にどこに取材に向かってもらうかを指示したり、記者が取材した内容に対して「もっとこういう話も聞いてきいてくれ」「こういう写真を追加で撮ってきてほしい」とアドバイスをします。</p><p>ちなみに、どこの新聞社でも取材記者としての経験を積んだ後に「デスク」という役職を任されることが多いようです。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><p>デスクが念入りにチェックをした後は校閲に送ります。（出稿）</p><p>※自社で作成する記事以外にも、共同通信社や時事通信社などの外部通信社からの入稿もあります。</p><h2 id="3-校閲"><a href="#3-校閲" class="headerlink" title="3. 校閲"></a>3. 校閲</h2><p>情報の正確さを身上とする新聞記事に「間違い」はあってはならぬものです。そこで重要になってくるのが、記事の校閲です。</p><p>校閲部門は、各部からあがってくる全ての記事を読み、誤字脱字のチェックや、事実確認を行います。事実確認では、記事と一緒に送られてくる照合資料やインターネットなどを駆使して、触れられている情報は正しいか、固有名詞や日付に誤りはないかなど、調べられるものは全て調べます。校閲と聞くと「誤字・脱字を直す仕事」と思われがちですが、実はこの「事実確認」の部分に時間をかけています。</p><p>単純な文字の誤りだけでなくコンテンツの内容にまで踏み込み、徹底した事実確認のもと、著者ですら気づかないような間違い、表現上の矛盾点などを発見し修正しています。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p><p>新聞という商品の品質管理を担うのが校閲部門というわけです。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p><h2 id="4-編集デスク会議"><a href="#4-編集デスク会議" class="headerlink" title="4. 編集デスク会議"></a>4. 編集デスク会議</h2><p>編集デスク会議では、各部のデスクが集まり、「この記事は重要だから大きく掲載する」「この記事は一面トップに」「この記事は小さく」などと、掲載する記事や、その扱い方を決めます。</p><p>面白い原稿があれば、取材記者に依頼して、足りない要素を加えて原稿を膨らませてもらうことや、反対に原稿を短く削ったりすることもあります。<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p><h2 id="5-紙面レイアウト"><a href="#5-紙面レイアウト" class="headerlink" title="5. 紙面レイアウト"></a>5. 紙面レイアウト</h2><p>掲載する記事が決まったら紙面のレイアウト作業（割り付けとも呼ばれる）をしていきます。新聞社によって、整理部の記者が行ったり、面担（経済面、社会面などの面ごとの割り付け担当者）と呼ばれる役職が存在したりします。</p><p>どの記事を一番強調するか、記事の価値を評価し見出しや本文を削りながら、位置やサイズを調整していきます。「見出し」は記事にとってとても重要です。おそらくほとんどの方は、見出しを読んで興味を持ったらその記事を読み始めるのではないでしょうか。文字の種類やデザイン、大きさ、文字数などでニュースの価値の大小を知らせるとともに、記事の内容が一目でわかるような見出しを付けます。</p><p>10人いれば、10通りの紙面ができるといわれているほど、レイアウトには個性がにじみ出ます。新聞社の特徴を出しつつ、そこに自分の個性を活かしていくために、日々、試行錯誤しています。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></p><h2 id="6-印刷"><a href="#6-印刷" class="headerlink" title="6. 印刷"></a>6. 印刷</h2><p>紙面が完成したら工場にデータを送って印刷していきます。工場にデータが送られると、刷版という印刷の原版が作られます。<br>印刷には輪転機と呼ばれる高さ10メートルにも及ぶ巨大な機械を使います。新聞の印刷に使われるのは巨大なロールになった巻き取り紙と呼ばれるもので、１本の巻き取り紙をのばすと、約16キロメートルにもなります。輪転機は、印刷はもちろん、裁断、ページ折りまでを自動で行ないます。１秒で25部から50部もの新聞を超高速で刷り上げて新聞の形にしていきます。<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup><br>輪転機は、かつて必ず新聞社内に置かれていましたが、通信システムの発達に伴い、外部に印刷機能を移している新聞社も出てきました。<br>大手新聞各社は印刷工場を別会社化し、その専門性を高めながら、連携する他紙の印刷を行なったり、新聞以外の印刷も受注したりといった専業会社として、独自に発展している例も増えています。</p><p>こうして新聞の出来上がりです！</p><h1 id="フューチャーの新聞業界への取組み"><a href="#フューチャーの新聞業界への取組み" class="headerlink" title="フューチャーの新聞業界への取組み"></a>フューチャーの新聞業界への取組み</h1><p>ここからはフューチャーの新聞業界への取組みについて紹介していきます。</p><p>昨今のソーシャルメディアの普及に伴う新聞発行部数の減少を鑑みて、新聞社は新聞販売を主軸とした従来のビジネスモデルから、デジタルビジネスへのシフトが急務とされています。そこで大事になるのが、紙やデジタルといった媒体別の対策ではなく読者にとって読みやすいコンテンツをタイムリーに届けることに主眼を置いた「コンテンツファースト」の実現です。そのためには、紙の締切時刻や紙面割の管理を超えた新たな発想への転換が必須でした。それを支えるためのコンテンツ管理システムが「GlyphFeeds」です。</p><img src="/images/20220810a/image_(28).png" alt="GlyphFeeds" width="1200" height="383" loading="lazy"><h2 id="「コンテンツファースト」を支えるGlyphFeeds"><a href="#「コンテンツファースト」を支えるGlyphFeeds" class="headerlink" title="「コンテンツファースト」を支えるGlyphFeeds"></a>「コンテンツファースト」を支えるGlyphFeeds</h2><p>GlyphFeedsは、フューチャーが開発したメディア業界向けのコンテンツマネジメントシステムを中核に持つクラウドサービスです。<br>全てのコンテンツを集約して管理するデータベースを搭載しており、記者が取材して書く記事やカメラマンが撮影した写真などを一括管理できます。</p><p>また、編集業務ワークフローを搭載していて、原稿の作成から編集まで、多様な編集業務をGlyphFeedsの画面一つで行うことができ、記者、デスク、校閲、整理、デジタル担当者などの全アクターによる統合編集が可能な上、パソコンやタブレットなどの端末と通信環境さえあれば、どこからでも行えます。従来は、媒体毎に「個別編集」を行っており、修正反映が大変でしたが、「統合編集」では、同一素材を派生させて利用しており、一括で修正反映が可能です。<br>コンテンツを適切なタイミングで新聞紙面やデジタルサイト・ニュースアプリ等に届けることで、コンテンツの価値を最大化できます。</p><p>GlyphFeedsは新聞社に不可欠な「可用性」にも強みを持ちます。クラウド基盤を利用し世界レベルでの冗長構成をとっているため、仮に日本で大きな災害が起きたときでも取材・報道活動を継続できます。どんな災害時でもニュースを届けなくてはならない使命を持つ新聞社にとって、非常に大きな意味を持ちます。<br><img src="/images/20220810a/image_(29).png" alt="image_(29).png" width="1200" height="473" loading="lazy"></p><h2 id="コンテンツの価値を再定義する"><a href="#コンテンツの価値を再定義する" class="headerlink" title="コンテンツの価値を再定義する"></a>コンテンツの価値を再定義する</h2><p>また、GlyphFeedsには一般公開用のコンテンツ活用APIも搭載しており、既存媒体向けの掲載編集に加えて、コンテンツを活用した新規サービス創出にも寄与します。<br><a href="https://prtimes.jp/main/html/rd/p/000000140.000033323.html">日刊工業新聞社プロジェクト</a>では、コンテンツを活用した新規サービスとして、一つ一つの記事や画像を商品として売り出すECサイトを構築しました。これにより、紙面などに掲載されなかったコンテンツにも価値を見出すことができるようになりました。<br><img src="/images/20220810a/image_(31).png" alt="" width="1200" height="587" loading="lazy"></p><p>まだまだGlyphFeedsの魅力は伝えきれませんが、過去にもGlyphFeedsについて紹介された記事がございますので、ぜひ<a href="https://future-architect.github.io/articles/20200914/">こちら</a>も御覧ください。</p><h2 id="私たちで未来を創造する"><a href="#私たちで未来を創造する" class="headerlink" title="私たちで未来を創造する"></a>私たちで未来を創造する</h2><p>2022年から始まった<a href="https://kyodonewsprwire.jp/release/202204089747">読売新聞社プロジェクト</a>では、単なるGlyphFeeds導入だけではなく、新たな業務領域にも踏み込み、新聞社各社が利用できる業界標準のプラットフォーム構築に取り組んでいます。</p><p>マルチベンダーで複雑化したシステムの集約による維持管理コストの低減や、業務フローの効率化で取材記者や編集記者の作業負担を軽減する働き方改革など、新聞業界全体の課題解決を目指します。</p><p>さらに、今後はGX（グリーントランスフォーメーション）も視野に入れ、環境へのアプローチも積極的に行っていきます。<br><img src="/images/20220810a/image_(35).png" alt="" width="1200" height="373" loading="lazy"></p><p>今後のGlyphFeedsの成長にぜひご期待ください！</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>新聞社の編集業務、そしてフューチャーの新聞業界への取り組みについて紹介してきましたが、いかがだったでしょうか。<br>少しでも新聞業界、GlyphFeedsに興味を持っていただけたら幸いです！</p><p>次回からは2回に渡り、新聞社のビジネスモデルの現状とこれからについて紹介する予定です。<br>新聞社の未来はどうなっていくのか・・・新聞業界のDXに携わるフューチャーの視点で新聞社の未来について考察していきます。</p><p>お楽しみに！</p><p>アイキャッチ画像は <a href="https://unsplash.com/es/@freegraphictoday?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">AbsolutVision</a> on <a href="https://unsplash.com/s/photos/newspaper?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a> を利用させていただきました。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">メディアポ「新聞記者の仕事　いろいろな取材のかたち」：<a href="https://www.homemate-research-newspaper-office.com/useful/12659_facil_062/">https://www.homemate-research-newspaper-office.com/useful/12659_facil_062/</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">メディアポ「新聞記者のステップアップ「デスクから支局長」」：<a href="https://www.homemate-research-newspaper-office.com/useful/12670_facil_073/">https://www.homemate-research-newspaper-office.com/useful/12670_facil_073/</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">毎日ことば「新聞校閲は時間との闘い」：<a href="https://mainichi-kotoba.jp/blog-20181020">https://mainichi-kotoba.jp/blog-20181020</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">メディアポ「新聞紙面の校閲」：<a href="https://www.homemate-research-newspaper-office.com/useful/12683_facil_086/">https://www.homemate-research-newspaper-office.com/useful/12683_facil_086/</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;">メディアポ「掲載する新聞記事は編集デスク会議で決定」：<a href="https://www.homemate-research-newspaper-office.com/useful/12677_facil_080/">https://www.homemate-research-newspaper-office.com/useful/12677_facil_080/</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="vertical-align: top; padding-right: 10px;">6.</span><span style="vertical-align: top;">メディアポ「新聞紙面のレイアウト作業」：<a href="https://www.homemate-research-newspaper-office.com/useful/12680_facil_083/">https://www.homemate-research-newspaper-office.com/useful/12680_facil_083/</a></span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="vertical-align: top; padding-right: 10px;">7.</span><span style="vertical-align: top;">メディアポ「新聞の印刷から搬送」：<a href="https://www.homemate-research-newspaper-office.com/useful/12684_facil_087/">https://www.homemate-research-newspaper-office.com/useful/12684_facil_087/</a></span><a href="#fnref:7" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Business/">Business</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%A1%E3%83%87%E3%82%A3%E3%82%A2%E6%A5%AD%E7%95%8C/">メディア業界</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9/">ビジネス</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%A5%AD%E7%95%8C%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3/">業界ドメイン</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%96%B0%E8%81%9E%E6%A5%AD%E7%95%8C/">新聞業界</category>
      
      
      <comments>https://future-architect.github.io/articles/20220810a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 1.19のメモリ周りの更新</title>
      <link>https://future-architect.github.io/articles/20220808a/</link>
      <guid>https://future-architect.github.io/articles/20220808a/</guid>
      <pubDate>Sun, 07 Aug 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20220801a/&quot;&gt;Go 1.19リリース連載&lt;/a&gt;の6本目です。&lt;/p&gt;
&lt;p&gt;Go 1.19では、いくつかメモリ周りの更新がありました。1つはガベージコレクタ周りのお話と、あとはメモリモデルの更新です。　ライブラリでは&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20220801a/">Go 1.19リリース連載</a>の6本目です。</p><p>Go 1.19では、いくつかメモリ周りの更新がありました。1つはガベージコレクタ周りのお話と、あとはメモリモデルの更新です。　ライブラリでは<a href="https://pkg.go.dev/sync/atomic#Int64">sync&#x2F;atomic.Int64</a>など、いくつか型が追加されました。</p><h1 id="ガベージコレクタ"><a href="#ガベージコレクタ" class="headerlink" title="ガベージコレクタ"></a>ガベージコレクタ</h1><p><a href="https://go.dev/doc/gc-guide">ガベージコレクタの詳細と調整の仕方についてのドキュメント</a><br>が追加されました。このドキュメントはスライダーで動作の変化がみられるインタラクティブなドキュメントになっているので、ぜひご覧ください。</p><img src="/images/20220808a/スクリーンショット_2022-08-03_21.22.41.png" alt="" width="1200" height="500" loading="lazy"><p>「GoはJavaと違って、GCの調整ポイントがほとんどなく、最初からトップスピード（オプションの選択の中で相対的に）だよ」みたいに説明されることもありましたが、そういうわけにも行かなくなったというか、ある程度知っておく必要はあるかもしれません。とはいえ、デフォルトでも十分うまくやってくれますし、そもそも即座に終了するユーティリティでは頑張る必要もないので、長期間動作するサーバー系とくにリクエストごとのメモリ消費が大きいものを使っている人は必読ですが、そうでない人はそこまで追いかける必要はないかもしれません。</p><p>なお、これはGoの言語仕様ではなく、Go製の純正Go処理系に特化した話（ただしgccgoもかなり似ているという注釈つき)とのことです。また、処理系依存の話なので将来はまた変わってくる可能性があります。</p><p>Goのメモリ戦略が最初に紹介されています。</p><ul><li>スタックメモリはGCを使わずにまとめて解放という戦略で扱われている</li><li>ヒープはGCが管理する。ヒープにおくかスタックにおくかはプログラムのロジックを見てきまる</li><li>GoのGCはマークアンドスイープ方式を利用</li></ul><h2 id="環境変数-GOGC-（go-1-18以前よりあった）"><a href="#環境変数-GOGC-（go-1-18以前よりあった）" class="headerlink" title="環境変数: GOGC （go 1.18以前よりあった）"></a>環境変数: GOGC （go 1.18以前よりあった）</h2><p>ここで設定した値(100で10MB、200で20MB)だけヒープメモリが使用されると、GCが実行されるようになります。数値を小さくすればするほど、GCが走りやすくなるため、無駄なメモリは減ります。一方でGCのマーク処理は重いため、CPUを消費します。このパラメータは「CPUコストとメモリ使用量の間のトレードオフ」を調整するものであると説明されています。</p><h2 id="環境変数-GOMEMLIMIT-（go-1-19で追加）"><a href="#環境変数-GOMEMLIMIT-（go-1-19で追加）" class="headerlink" title="環境変数: GOMEMLIMIT （go 1.19で追加）"></a>環境変数: GOMEMLIMIT （go 1.19で追加）</h2><p>GOGCはCPUとメモリのトレードオフの設定としては有効ですが、実際のメモリ使用量を考慮したものではありません。実際に必要なライブヒープ（GCで削除されない）が急に増えた場合に、GOGCだけで調整しようとするとCPU消費量が無駄に多くなり過ぎてしまいます。そこで<a href="https://go.googlesource.com/proposal/+/master/design/48409-soft-memory-limit.md">提案された</a>のがこの環境変数での設定です。このGCガイドには書かれてないですが、”100MB”とか、”100MiB”といった内容を設定するようです。</p><p>なお、これはソフトリミットであって、GCが稼働後にこのメモリ量以下になることが保証されてません。GC対象じゃないライブヒープが増えてしまうといくらGCでも解放できません。ガベージじゃないですし。5-10%ほど余裕をみて設定しましょう、と書かれています。また、データ量に比例してメモリを消費するようなプログラムの場合、データ量側を制限せずにメモリ制限だけしてしまうとパフォーマンス低下が発生するとあります。</p><p>このドキュメントでは、Goの仮想メモリの使い方の解説、ストップザワールドのGCは重い(CPUの25%を持っていくし、マークとスイープを同時に行うのでレイテンシーが大幅に伸びる）という話や、プロファイリングの指標の紹介などがあります。</p><h1 id="メモリモデルの更新"><a href="#メモリモデルの更新" class="headerlink" title="メモリモデルの更新"></a>メモリモデルの更新</h1><p><a href="https://go.dev/ref/mem">The Go Memory Model</a>が8年ぶりに更新されています。そのベースとなっているのがRuss Coxが投稿した3つのドキュメントです。</p><ul><li><a href="https://research.swtch.com/hwmm">Hardware Memory Models</a></li><li><a href="https://research.swtch.com/plmm">Programming Language Memory Models</a></li><li><a href="https://research.swtch.com/gomm">Updating the Go Memory Model</a></li></ul><p>なお、2014年版も、2022年版も同じ前書きとなっています。</p><blockquote><p>アドバイス</p><p>同時にアクセスする複数のgoroutineによってデータを変更するようなプログラムでは、そのようなアクセスを直列化しなければなりません。</p><p>アクセスを直列化してデータを保護するには、チャネル操作またはsync、sync&#x2F;atomicパッケージ内の要素などを使います。</p><p>プログラムの動作を理解するためにこのドキュメントの残りの部分を読まなければならない場合、あなたは頭が良すぎます。</p><p>賢くならないでください。</p></blockquote><p>ようするにGo開発者が行うべきことは、チャネル、sync&#x2F;atomicパッケージなどを適切に使うこと、と言い切っています。これは2014年版も2022年版も変わりません。CPU特有の癖などを駆使したトリッキーなロックフリーな順序制御！！！みたいなことをするとトラブルの元になるのでやめとけよ、ということですね。このドキュメント自体はGoでアプリを書く人向けというよりも、主にランタイムやコンパイラを実装する人向けのデザインドキュメントのようなものかと思います。</p><h3 id="The-Go-Memory-Modelの更新内容"><a href="#The-Go-Memory-Modelの更新内容" class="headerlink" title="The Go Memory Modelの更新内容"></a>The Go Memory Modelの更新内容</h3><p>Go公式ドキュメントの方でどのような変更があったのかを目diffで差分を調べました。</p><ul><li>Happens Beforeが[<a href="https://go.dev/ref/mem#model]">https://go.dev/ref/mem#model]</a>(Memory Model)にリライト<ul><li>他の言語のメモリモデルの論文等と同じ語彙を使って厳密に書き換えたように見える</li></ul></li><li><a href="https://go.dev/ref/mem#restrictions">Implementation Restrictions for Programs Containing Data Races</a>が追加<ul><li>ThreadSanitizer (go build -race) の紹介や、単一の命令で一度に読み書きできない操作が分断されて行われた時（スライスの3つの構成要素とか)の問題について言及</li></ul></li><li>Synchronization<ul><li><a href="https://go.dev/ref/mem#locks">Locksのセクション</a>で、1.18で追加されたTryLockの記述が追加</li><li><a href="https://go.dev/ref/mem#atomic">Atomic Values</a>, <a href="https://go.dev/ref/mem#finalizer">Finalizers</a>, <a href="https://go.dev/ref/mem#more">Additional Mechanisms</a>が追加</li></ul></li><li><a href="https://go.dev/ref/mem#badcompiler">Incorrect compilation</a>が追加<ul><li>コンパイラ実装者向け</li></ul></li></ul><p>Synchronizationのセクションは追加説明やここ　８年間のライブラリの追加を反映した小粒な変更となっています。大きく説明が変わったのが最初のモデル説明（ただし内容は大きく変わっていないように見える）と、コンパイラ実装者向けの説明の追加ですね。</p><h2 id="メモリモデルの概要"><a href="#メモリモデルの概要" class="headerlink" title="メモリモデルの概要"></a>メモリモデルの概要</h2><p>Russ Coxの3つの記事を読んでみました。1周では理解できなかったので、何周か読んでみた結果のダイジェストです。</p><h3 id="メモリモデルとは"><a href="#メモリモデルとは" class="headerlink" title="メモリモデルとは"></a>メモリモデルとは</h3><ul><li>シングルスレッドでは不要だったが、マルチプロセスが出てきたので必要になった。</li><li>大雑把にメモリモデルというのは、「メモリの読み書きの順序」の決定性の問題<ul><li>コンパイラが最適化目的で命令を入れ替えることもある<ul><li>RISCのCPU向けコンパイラの方が積極的に介入するというのを聴いたことがある(渋川補足)</li></ul></li><li>CPUが命令を解釈して制約を崩さない中でリアルタイムに順序を勝手に書き換えることもある（渋川補足: アウトオブオーダー）</li></ul></li><li>メモリオーダーにはランクがある。逐次一貫性(Sequential Consistency)→弱い一貫性→ゆるい一貫性とここでは３段階あるある。弱いほど並び替えが自由に行われる。<ul><li>保証が弱ければ弱いほど、パフォーマンスのための組み替えの自由度が上がるのでパフォーマンスは上がる</li></ul></li><li>ハードウェアとプログラミング言語の両方がメモリをモデルを持つ</li><li>ハードウェアメモリモデルは、ハードウェアとその上で動くソフトウェアの契約</li><li>言語側のメモリモデルは、コンパイラとプログラマーの契約</li><li>言語側のメモリモデルの現在の標準は極めて保守的な（Java 1.5、C++11、Go 1.19など)は逐次一貫性だが、 これでは性能が上がらないため、ハードウェアはより柔軟性が高い（ゆるい）メモリモデルを持つのが普通とのこと</li><li>保証が必要以上に強いと、それに甘えたソフトウェア実装になってしまい、将来速度のためにゆるいメモリモデルのCPUがリリースされると動かないということになりかねない。</li></ul><h3 id="ハードウェアのお話"><a href="#ハードウェアのお話" class="headerlink" title="ハードウェアのお話"></a>ハードウェアのお話</h3><p>以下の図は<a href="https://research.swtch.com/hwmm">Hardware Memory Models</a>からの引用になります。</p><ul><li>逐次一貫性では常に共有メモリと同期を取る</li></ul><img src="/images/20220808a/一貫性.png" alt="一貫性" width="964" height="190" loading="lazy"><ul><li>Intel(x86-TSO)の方がそれよりもゆるいモデルとなっている。</li></ul><img src="/images/20220808a/intel.png" alt="intel" width="964" height="360" loading="lazy"><ul><li>ARMはさらに弱いモデル。スレッドがメモリのコピーを持って、必要に応じて他のスレッドにコピーを伝搬させる実装とのこと。</li></ul><img src="/images/20220808a/ARM.png" alt="ARM" width="616" height="588" loading="lazy"><ul><li>メモリバリア（あるいはメモリフェンスとも呼ばれる）を使うことで、前の処理が終わることを明示的に示せる。</li></ul><p>あとは、Plan 9をPentium Proに移植しようとしたときの苦労話がたくさん書かれています。ここが一番語りたかったことではないか？</p><h3 id="プログラミング言語のメモリモデル"><a href="#プログラミング言語のメモリモデル" class="headerlink" title="プログラミング言語のメモリモデル"></a>プログラミング言語のメモリモデル</h3><ul><li>主にDRF-SCが利用される<ul><li>SC for DRFとも呼ばれる</li><li>データレースがない状態ではデータレースがないプログラムは逐次一貫した方法で実行されることが保証されて、結果が想像しやすい。</li></ul></li><li>Goのメモリモデル<ul><li>DRF-SC。他の言語と同じ。</li><li>データのレースコンディションがある状況での実装がちょっと違う。<ul><li>C++は自由</li><li>Javaはそのコンディションの状況もより厳密に定義されていてデバッグが楽</li><li>Goは保守的なrace conditionチェックと、実行時はノーガード(パニック)</li></ul></li></ul></li></ul><p>1行にまとめると、メモリモデルの強度はパフォーマンスとのトレードオフがあり、弱くするほど最適化の余地があるが、コードと実際の動きの違いが出てきて動作の予測はしにくくなる。最新のGoをはじめとした各種プログラミング言語は保守的で予測しやすいものを選んだが、その下のハードウェアは柔軟なモデルを採用している、という感じですかね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>GCの方は調整の余地が多少出てきたため、大規模なアプリケーションではこのあたりも意識する必要が出てきました。といっても、調整の環境変数はまだ2つなので、まだまだ十分にシンプルかと思います。</p><p>メモリモデルの説明は、読めば読むほど普段のプログラミングの話からはちょっと遠い、レイヤーがかなり低い話でした。普段の開発でどのような影響があるかというとあまりないかと思います。syncパッケージの提供する各種同期プリミティブ、チャネルを使った同期、sync&#x2F;atomicパッケージなどを普段から正しく使っていれば特に問題はありません。</p><p>The Go Memory Modelのドキュメントを今回初めてじっくり読んでみましたが、<a href="https://go.dev/ref/mem#synchronization">Synchronization</a>のセクションが、メモリに限らず、「○○と△△は、必ず前者の完了後にもう片方が呼ばれる」といったタイミングについての言語仕様集ともなっていますので、一度軽く目を通しておくとよさそうです。読書会のネタに最適。</p><p>余談ですが、Apple SiliconのmacはRosetta2でインテルバイナリをARMでエミュレーションして実行しますが、Appleはこのためにインテル方式の強い制約を実装したようです。同じARMといっても、MicrosoftのSurfaceのインテルエミュレーションと比べてAppleの方がパフォーマンスが圧倒的に高いのは、元々のコアの性能差もあるがこういうところにあるようです。</p><ul><li><a href="https://www.infoq.com/news/2020/11/rosetta-2-translation/">https://www.infoq.com/news/2020/11/rosetta-2-translation/</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-19/">Go1.19</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%A2%E3%83%87%E3%83%AB/">メモリモデル</category>
      
      
      <comments>https://future-architect.github.io/articles/20220808a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 1.19 Genericsのアップデート</title>
      <link>https://future-architect.github.io/articles/20220805a/</link>
      <guid>https://future-architect.github.io/articles/20220805a/</guid>
      <pubDate>Thu, 04 Aug 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220805a/baner.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;479&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220805a/baner.png" alt="" width="1200" height="479" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。DXユニットの村上です。<br>本記事は<a href="/articles/20220801a/">Go 1.19リリース連載</a>の5本目です。関数やレシーバのジェネリクスの微修正についてご紹介します。</p><p>Release Noteでは次の箇所になります。</p><p><a href="https://tip.golang.org/ref/spec#Declarations_and_scope">https://tip.golang.org/ref/spec#Declarations_and_scope</a></p><blockquote><p>The scope of an identifier denoting a type parameter of a function or declared by a method receiver begins after the name of the function and ends at the end of the function body.</p></blockquote><p>翻訳すると以下のようになります。</p><blockquote><p>関数の型パラメータやメソッドレシーバで宣言されたもののスコープは、関数名の後ろから関数本体の終端までです。</p></blockquote><p>しかし本アップデートはGo 1.19でリリース予定でしたが、Go 1.20でのリリースに変更されたようです。<br><a href="https://github.com/golang/go/issues/51503#issuecomment-1154209161">https://github.com/golang/go/issues/51503#issuecomment-1154209161</a></p><p>よってGo 1.20リリース予定の紹介という感じになります。</p><h1 id="従来の問題点"><a href="#従来の問題点" class="headerlink" title="従来の問題点"></a>従来の問題点</h1><p>こちらのissueで問題提起されています。<br><a href="https://github.com/golang/go/issues/51503">https://github.com/golang/go/issues/51503</a></p><p>以下のコードが例として提示されています。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T[T any] <span class="keyword">struct</span> &#123;&#125; <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(T[T])</span></span> Bar() &#123;&#125; <span class="comment">// error: T is not a generic type</span></span><br></pre></td></tr></table></figure><p>前者がOKなら後者もOKであるべきと議論されていました。</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>後者がビルドエラーとなる原因は以下のissueで説明されています。<br><a href="https://github.com/golang/go/issues/52038">https://github.com/golang/go/issues/52038</a></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(T[T])</span></span> Bar() &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>[T]</code>の<code>T</code>が外側（左側）の<code>T</code>を参照しているため、エラーとなるようです。</p><p>逆に外側を<code>T</code>以外にすればエラーにはなりません。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Hoge[T any] <span class="keyword">struct</span>&#123;&#125; <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Hoge[T])</span></span> Bar() &#123;&#125; <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><p>後者の<code>Hoge</code>、<code>[T]</code>は前者の<code>Hoge</code>、<code>[T any]</code>をそれぞれ参照できているため問題ありません。</p><p>もしくは<code>[T]</code>を別の文字に置き換えても大丈夫です。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> T[T any] <span class="keyword">struct</span>&#123;&#125; <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(T[Hoge])</span></span> Bar() &#123;&#125; <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><h1 id="解決策"><a href="#解決策" class="headerlink" title="解決策"></a>解決策</h1><p>冒頭で引用したリリースノートの内容にすることで、これがエラーにならなくなります。<br>レシーバの中で宣言された型のスコープを関数名以降にします。<br>これによって、外側の<code>T</code>のスコープは関数名以降となり、<code>[T]</code>に適用されなくなります。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>かなりマイナーアップデートですが、Golangがより洗練された言語になることは間違いないかと思います。<br>修正範囲が大きいということで惜しくもGo 1.19でのリリースは見送られることになりましたが、Go 1.20では修正されるということで期待したいと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AA%E3%82%AF%E3%82%B9/">ジェネリクス</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-19/">Go1.19</category>
      
      
      <comments>https://future-architect.github.io/articles/20220805a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go1.19 net/http のアップデート</title>
      <link>https://future-architect.github.io/articles/20220804a/</link>
      <guid>https://future-architect.github.io/articles/20220804a/</guid>
      <pubDate>Wed, 03 Aug 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220804a/top.png&quot; alt=&quot;&quot; width=&quot;827&quot; height=&quot;361&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220804a/top.png" alt="" width="827" height="361"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIGの辻です。<a href="(/articles/20220801a/)">Go 1.19連載</a>の4本目です。</p><p><a href="https://tip.golang.org/doc/go1.19">Go Release Notes</a> に記載がある Minor changes to the library の <code>net/http</code> の3点のアップデートについて触れていきます。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><ul><li><code>ResponseWriter.WriteHeader</code> がユーザーが定義した 1xx 系の情報レスポンスをサポートした</li><li><code>MaxBytesReader</code> が読み取り制限を超過した場合に <code>MaxBytesError</code> を返却するようになった</li><li><code>Location</code> ヘッダーのない 3xx 系のレスポンスをエラーとして扱わないようになった</li></ul><h2 id="①ResponseWriter-WriteHeader-がユーザーが定義した-1xx-系の情報レスポンスをサポートした"><a href="#①ResponseWriter-WriteHeader-がユーザーが定義した-1xx-系の情報レスポンスをサポートした" class="headerlink" title="①ResponseWriter.WriteHeader がユーザーが定義した 1xx 系の情報レスポンスをサポートした"></a>①<code>ResponseWriter.WriteHeader</code> がユーザーが定義した 1xx 系の情報レスポンスをサポートした</h2><p>Go 1.19 からユーザーが定義したHTTPのレスポンスコード 1xx 系の情報ヘッダーをサポートするようになりました。Go 1.18 まではGoの <code>net/http</code> を使ったHTTPサーバでステータスコード 1xx 系を書き込むことはできませんでした。関連するIssue は以下などが挙げられます。</p><ul><li><a href="https://github.com/golang/go/issues/26089">net&#x2F;http: Server&#x2F;Handler&#x2F;ResponseWriter doesn’t allowing sending arbitrary 1xx responses</a></li><li><a href="https://github.com/golang/go/issues/36734">net&#x2F;http: support status code 102 (Processing) in ResponseWriter</a></li><li><a href="https://github.com/golang/go/issues/26088">net&#x2F;http&#x2F;httputil: make ReverseProxy forward 1xx responses</a></li></ul><p>Goの改善内容の詳細を紹介する前に 1xx のステータスコードがどういうものであるか、どのような挙動になるか簡単におさらいしておきます。</p><h3 id="1xx-のステータスコード"><a href="#1xx-のステータスコード" class="headerlink" title="1xx のステータスコード"></a>1xx のステータスコード</h3><p>1xx は情報レスポンスと呼ばれています。</p><blockquote><p>The 1xx (Informational) class of status code indicates an interim response for communicating connection status or request progress prior to completing the requested action and sending a final response. 1xx responses are terminated by the first empty line after the status-line (the empty line signaling the end of the header section).  Since HTTP&#x2F;1.0 did not define any 1xx status codes, a server MUST NOT send a 1xx response to an HTTP&#x2F;1.0 client.</p></blockquote><p><a href="https://httpwg.org/specs/rfc7231.html">Hypertext Transfer Protocol (HTTP&#x2F;1.1): Semantics and Content</a> より</p><p>ポイントは以下の3つです。</p><ol><li>要求されたアクションを完了し最終的なレスポンスを送信する前に、コネクションの状態やレスポンスの進捗状況を伝えるための中間的なレスポンスである</li><li>1xx レスポンスは、ステータス行の後の最初の空行(ヘッダーセクションの終わりを示す空行)で終了する</li><li>HTTP&#x2F;1.0 では定義されていないため、サーバーは HTTP&#x2F;1.0 クライアントに 1xx レスポンスを送信してはいけない</li></ol><p>この挙動は具体的にどのようになるのか 1xx 系のステータスコードの一つである <a href="https://httpwg.org/specs/rfc8297.html">103 Early Hints</a> を使って確認しておきます。</p><h3 id="103-Early-Hints"><a href="#103-Early-Hints" class="headerlink" title="103 Early Hints"></a>103 Early Hints</h3><p>103 Early Hints はクライアントが最終的なレスポンスを処理するために役立つヒントを伝えるために使用できるHTTP ステータスコードです。ヘッダだけを送る目的で使われます。リソース配信の最適化に役に立つ、と考えられています。RFCのステータスは EXPERIMENTAL であり、実験的な仕様です。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><p>103 Early Hints のレスポンスをクライアントが解釈する場合&#x2F;しない場合のそれぞれの挙動を補足します。</p><ul><li>103 Early Hints を解釈する場合の挙動</li></ul><img src="/images/20220804a/3.png" alt="3.png" width="654" height="520" loading="lazy"><p>イメージ図は日本経済新聞社さんのブログ記事「<a href="https://hack.nikkei.com/blog/advent20201220/">ChromeとFastlyのEarly Hintsの効果計測に貢献する</a>」より引用しています。</p><p>図左のクライアントが図右のサーバーに対して <code>GET /index.html</code> のリソースをリクエストしたときに、そのレスポンスが返却される前にサーバーから 103 Early Hints と <code>link</code> ヘッダーがレスポンスされます。 103 Early Hints のレスポンスを受け取ったクライアントは <code>GET /index.html</code> のレスポンスを待たずして <code>link</code> ヘッダーに記載があるリソース <code>/main.css</code> にリクエストできます。<code>GET /main.css</code> とリクエストすることで、最終的な <code>/index.html</code> で必要なリソース <code>/main.css</code> を予め取得できます。</p><ul><li>103 Early Hints を解釈しない場合の挙動</li></ul><img src="/images/20220804a/2.png" alt="2.png" width="589" height="520" loading="lazy"><p>103 Early Hints を解釈しないクライアントの場合、以下のような挙動になります。クライアントは <code>GET /index.html</code> のレスポンスが返却された後に <code>GET /main.css</code> とリクエストして最終的なレスポンスに必要なリソースを取得します。</p><h3 id="net-http-の挙動の変化"><a href="#net-http-の挙動の変化" class="headerlink" title="net/http の挙動の変化"></a><code>net/http</code> の挙動の変化</h3><p>前置きが少し長くなりました。先程紹介した 103 Early Hints と 200 OKを返却するようなHTTPサーバを <code>net/http</code> を使って実装する場合、以下のようなコードが一例として考えられます。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">earlyHintHandler := http.HandlerFunc(<span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">h := w.Header()</span><br><span class="line">h.Add(<span class="string">&quot;Link&quot;</span>, <span class="string">&quot;&lt;/main.css&gt;; rel=preload; as=style&quot;</span>)</span><br><span class="line">w.WriteHeader(http.StatusEarlyHints)</span><br><span class="line"></span><br><span class="line">w.Write([]<span class="type">byte</span>(<span class="string">&quot;hello&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">mux := http.NewServeMux()</span><br><span class="line">mux.Handle(<span class="string">&quot;/&quot;</span>, earlyHintHandler)</span><br><span class="line">log.Fatal(http.ListenAndServe(<span class="string">&quot;localhost:8080&quot;</span>, mux))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go 1.18までは <code>WriteHeader()</code> は任意の 1xx 系のステータスコードをサポートしていませんでした。このことは <a href="https://pkg.go.dev/net/http@go1.18.5#ResponseWriter.WriteHeader">WriteHeader</a> のドキュメントにも記載があります。</p><blockquote><p>Go does not currently support sending user-defined 1xx informational headers, with the exception of 100-continue response header that the Server sends automatically when the Request.Body is read.</p></blockquote><p>そのため、上記の実装を Go 1.18 でビルド&amp;起動したサーバに、クライアントからHTTPリクエストしても機能しません。103 Early Hints のレスポンスはクライアントとのコネクションに書き込まれますが、200 OK のレスポンスはサーバーから書き込まれません。<code>curl</code><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> のクライアントではサーバーからのレスポンスを待ち続けます。</p><figure class="highlight bash"><figcaption><span>Go 1.18のHTTPサーバの場合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl -LIXGET localhost:8080</span><br><span class="line">HTTP/1.1 103 Early Hints</span><br><span class="line">Link: &lt;/main.css&gt;; rel=preload; as=style</span><br><span class="line">Date: Tue, 02 Aug 2022 03:39:40 GMT</span><br><span class="line"></span><br><span class="line">... (レスポンスを待ち続ける) ...</span><br></pre></td></tr></table></figure><p>一方、Go 1.19 でビルド&amp;起動すると、想定どおり 103 Early Hints と 200 OK の両方のレスポンスが得られます。想定どおり機能していることがわかります。なお <code>Link</code> ヘッダーは最終的なレスポンスにも含まれることに注意してください。</p><figure class="highlight bash"><figcaption><span>Go 1.19のHTTPサーバの場合</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; curl -LIXGET localhost:8080</span><br><span class="line">HTTP/1.1 103 Early Hints</span><br><span class="line">Link: &lt;/main.css&gt;; rel=preload; as=style</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Link: &lt;/main.css&gt;; rel=preload; as=style</span><br><span class="line">Date: Tue, 02 Aug 2022 03:46:01 GMT</span><br><span class="line">Content-Length: 5</span><br><span class="line">Content-Type: text/plain; charset=utf-8</span><br></pre></td></tr></table></figure><h3 id="Goのパッチ内容"><a href="#Goのパッチ内容" class="headerlink" title="Goのパッチ内容"></a>Goのパッチ内容</h3><p>パッチは <a href="https://go-review.googlesource.com/c/go/+/269997">269997: net&#x2F;http: allow sending 1xx responses</a> で進められていました。<code>WriteHeader()</code> でステータスコードを書き込むときにステータスコードが 1xx のときはHTTPヘッダーと改行をバッファに書き込んで、それをフラッシュする、ということが主です。</p><figure class="highlight diff"><figcaption><span>net/http/server.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">func (w *response) WriteHeader(code int) &#123;</span><br><span class="line">if w.conn.hijacked() &#123;</span><br><span class="line">caller := relevantCaller()</span><br><span class="line">w.conn.server.logf(&quot;http: response.WriteHeader on hijacked connection from %s (%s:%d)&quot;, caller.Function, path.Base(caller.File), caller.Line)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">if w.wroteHeader &#123;</span><br><span class="line">caller := relevantCaller()</span><br><span class="line">w.conn.server.logf(&quot;http: superfluous response.WriteHeader call from %s (%s:%d)&quot;, caller.Function, path.Base(caller.File), caller.Line)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">checkWriteHeaderCode(code)</span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+// Handle informational headers</span></span><br><span class="line"><span class="addition">+if code &gt;= 100 &amp;&amp; code &lt;= 199 &#123;</span></span><br><span class="line"><span class="addition">+// Prevent a potential race with an automatically-sent 100 Continue triggered by Request.Body.Read()</span></span><br><span class="line"><span class="addition">+if code == 100 &amp;&amp; w.canWriteContinue.isSet() &#123;</span></span><br><span class="line"><span class="addition">+w.writeContinueMu.Lock()</span></span><br><span class="line"><span class="addition">+w.canWriteContinue.setFalse()</span></span><br><span class="line"><span class="addition">+w.writeContinueMu.Unlock()</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+writeStatusLine(w.conn.bufw, w.req.ProtoAtLeast(1, 1), code, w.statusBuf[:])</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+// Per RFC 8297 we must not clear the current header map</span></span><br><span class="line"><span class="addition">+w.handlerHeader.WriteSubset(w.conn.bufw, excludedHeadersNoBody)</span></span><br><span class="line"><span class="addition">+w.conn.bufw.Write(crlf)</span></span><br><span class="line"><span class="addition">+w.conn.bufw.Flush()</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+return</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"></span><br><span class="line">w.wroteHeader = true</span><br><span class="line">w.status = code</span><br><span class="line"></span><br><span class="line">if w.calledHeader &amp;&amp; w.cw.header == nil &#123;</span><br><span class="line">w.cw.header = w.handlerHeader.Clone()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if cl := w.handlerHeader.get(&quot;Content-Length&quot;); cl != &quot;&quot; &#123;</span><br><span class="line">v, err := strconv.ParseInt(cl, 10, 64)</span><br><span class="line">if err == nil &amp;&amp; v &gt;= 0 &#123;</span><br><span class="line">w.contentLength = v</span><br><span class="line">&#125; else &#123;</span><br><span class="line">w.conn.server.logf(&quot;http: invalid Content-Length of %q&quot;, cl)</span><br><span class="line">w.handlerHeader.Del(&quot;Content-Length&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="②MaxBytesReader-が読み取り制限を超過した場合に-MaxBytesError-を返却するようになった"><a href="#②MaxBytesReader-が読み取り制限を超過した場合に-MaxBytesError-を返却するようになった" class="headerlink" title="②MaxBytesReader が読み取り制限を超過した場合に MaxBytesError を返却するようになった"></a>②<code>MaxBytesReader</code> が読み取り制限を超過した場合に <code>MaxBytesError</code> を返却するようになった</h2><p>Go 1.18 で追加になった<a href="https://pkg.go.dev/net/http#MaxBytesReader">MaxBytesReader</a> でエラーが発生した場合のエラーハンドリングが行いやすくなりました。Go1.18 ではリクエストが大きすぎる場合に <code>errors.New(&quot;http: request body too large&quot;)</code> としてAPIのクライアントにエラーを返却していました。このエラー固有のエラーハンドリングを行いたい場合、以下のように文字列で比較してエラーハンドリングする必要がありました。</p><figure class="highlight go"><figcaption><span>リクエストボディが大きすぎる場合のエラーハンドリング例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">b, err := io.ReadAll(r.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> err.Error() == <span class="string">&quot;http: request body too large&quot;</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go 1.19ではユーザーがエラーハンドリングしやすいように新たに <code>MaxBytesError</code> 型という <code>error</code> インターフェースを満たした型を返却するようになりました。元のIssueは <a href="https://github.com/golang/go/issues/30715">net&#x2F;http: add MaxBytesError #30715</a> です。</p><ul><li>パッチ内容の一部</li></ul><figure class="highlight diff"><figcaption><span>net/http/request.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+// MaxBytesError is returned by MaxBytesReader when its read limit is exceeded.</span></span><br><span class="line"><span class="addition">+type MaxBytesError struct &#123;</span></span><br><span class="line"><span class="addition">+Limit int64</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+func (e *MaxBytesError) Error() string &#123;</span></span><br><span class="line"><span class="addition">+// Due to Hyrum&#x27;s law, this text cannot be changed.</span></span><br><span class="line"><span class="addition">+return &quot;http: request body too large&quot;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line">type maxBytesReader struct &#123;</span><br><span class="line">w   ResponseWriter</span><br><span class="line">r   io.ReadCloser // underlying reader</span><br><span class="line"><span class="addition">+i   int64         // max bytes initially, for MaxBytesError</span></span><br><span class="line">n   int64         // max bytes remaining</span><br><span class="line">err error         // sticky error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>私が興味深く思ったことは、わざわざ新しく <code>maxBytesReader</code> 型でバイトの初期サイズを非公開フィールド <code>i</code> として保持するようにしているが、エラーメッセージを変更していない点です。<code>Error()</code> メソッドのコメントによると「Hyrumの法則」に基づくためとのことです。<code>errors.New()</code> で返却する文字列はGo Docとして公開しているわけではないが、Go 1.18で観測可能なエラー発生時の文字列によりエラーハンドリングを行っているユーザーへの配慮を感じました。なお、Hyrumの法則は『<a href="https://www.oreilly.co.jp/books/9784873119656/">Googleのソフトウェアエンジニアリング</a>』の1章にて以下のように紹介されています。</p><ul><li>Hyrumの法則</li></ul><blockquote><p>あるAPIに十分な数のユーザーがいるとき、APIを作った者自身が契約仕様として何かを約束しているかは重要ではない。作られたシステムが持つあらゆる観察可能（observable）な挙動に関して、それに依存するユーザーが出てくるものである。</p></blockquote><h2 id="③Location-ヘッダーのない-3xx-系のレスポンスをエラーとして扱わないようになった"><a href="#③Location-ヘッダーのない-3xx-系のレスポンスをエラーとして扱わないようになった" class="headerlink" title="③Location ヘッダーのない 3xx 系のレスポンスをエラーとして扱わないようになった"></a>③<code>Location</code> ヘッダーのない 3xx 系のレスポンスをエラーとして扱わないようになった</h2><p>Go1.18 までは 3xx 系のレスポンスコードで <code>Location</code> ヘッダーがない場合はエラーとして扱っていました。</p><p>一方 <a href="https://httpwg.org/specs/rfc7231.html#status.301">RFC7231 Hypertext Transfer Protocol (HTTP&#x2F;1.1): Semantics and Content</a> ではステータスコード 301 における <code>Location</code> ヘッダーは <code>SHOULD</code> の項目になります。<a href="https://www.rfc-editor.org/rfc/rfc2119.html">RFC2119 Key words for use in RFCs to Indicate Requirement Levels</a> にあるように <code>MUST</code> であれば、絶対的に含めるべき項目になりますが、<code>SHOULD</code> は推奨される項目です。RFC上は <code>Location</code> ヘッダーが含まれないことも許容されます。</p><p>このことから Go の実装としても <code>Location</code> ヘッダーがなくてもエラーとせずにレスポンスをAPIの呼び出し元に返却するように改善しました。</p><p>リアルワールドでは <a href="https://github.com/golang/go/issues/49281">net&#x2F;http: can’t read 301 response without a Location header #49281</a> という課題がありました。AWSが提供するS3のURLにHTTPリクエストしたときにレスポンスコード 301 で返却されたが <code>Location</code> ヘッダーが含まれないためにGoのエラーが発生する。レスポンスヘッダー <code>x-amz-bucket-region</code> から想定するリージョンを取得できず、困っていた、とのことです。この挙動は Go1.19 で改善されます。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getBucketRegion</span><span class="params">(bucket <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// Construct client that makes one request and does not follow redirects</span></span><br><span class="line">client := &amp;http.Client&#123;</span><br><span class="line">CheckRedirect: <span class="function"><span class="keyword">func</span><span class="params">(req *http.Request, via []*http.Request)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> http.ErrUseLastResponse</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">resp, err := client.Get(<span class="string">&quot;https://&quot;</span> + bucket + <span class="string">&quot;.s3.us-west-1.amazonaws.com/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err <span class="comment">// &lt;-- function will return here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> resp.StatusCode == <span class="number">200</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;us-west-1&quot;</span>, <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> resp.StatusCode == <span class="number">404</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, errors.New(<span class="string">&quot;Bucket does not exist.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> resp.Header.Get(<span class="string">&quot;x-amz-bucket-region&quot;</span>), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">region, err := getBucketRegion(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;region: %s\n&quot;</span>, region)</span><br><span class="line">fmt.Printf(<span class="string">&quot;err: %v\n&quot;</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p><code>net/http</code> のアップデートはリリースノートではさらっと3行記載があるだけですが、それぞれの背景やパッチ内容を含めて紹介しました。リアルワールド感あふれる課題やニーズを感じることでき、とてもわくわくしました。</p><p>本記事では <code>net/http</code> のアップデートを紹介しました。その他にも <code>net/url</code> で <a href="https://pkg.go.dev/net/url@go1.19#JoinPath">JoinPath</a> と <a href="https://pkg.go.dev/net/url@go1.19#URL.JoinPath">URL.JoinPath</a> が追加になっています。HTTPはもちろんですが、その他のプロトコルにおいても、便利にURLを組み立てられるようになっています。</p><p>最後まで読んでいただき、ありがとうございました！</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">なお2022年8月2日にGo1.19 rc2で調べています。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">Chrome と Fastly による実装実験が始まっています。<a href="https://www.fastly.com/jp/blog/beyond-server-push-experimenting-with-the-103-early-hints-status-code">https://www.fastly.com/jp/blog/beyond-server-push-experimenting-with-the-103-early-hints-status-code</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">curlのバージョンは7.83.1を使っています。</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/HTTP/">HTTP</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-19/">Go1.19</category>
      
      
      <comments>https://future-architect.github.io/articles/20220804a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go1.19で追加されたAppend系メソッド</title>
      <link>https://future-architect.github.io/articles/20220803a/</link>
      <guid>https://future-architect.github.io/articles/20220803a/</guid>
      <pubDate>Tue, 02 Aug 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220803a/eyecatch.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;486&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220803a/eyecatch.png" alt="" width="1200" height="486" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG&#x2F;DXユニットの宮永です。</p><p><a href="/articles/20220801a/">Go 1.19リリース連載</a>の3本目です。本記事ではGo1.19のライブラリマイナーチェンジの中でも、Append系メソッドに注目して紹介します。</p><p>Go1.19でAppend系のメソッドが追加されたのは以下2つのライブラリです。<br>それぞれのProposalのリンクを添付します。</p><ul><li>encoding&#x2F;binary<ul><li><a href="https://github.com/golang/go/issues/50601">encoding&#x2F;binary: add AppendByteOrder (#50601)</a></li><li><a href="https://github.com/golang/go/issues/51644">encoding&#x2F;binary: add AppendUvarint and AppendVarint (#51644)</a></li></ul></li><li>fmt<ul><li><a href="https://github.com/golang/go/issues/47579">fmt: add Append, Appendf, Appendln (#47579)</a></li></ul></li></ul><p>順に説明します。</p><h1 id="encoding-x2F-binary"><a href="#encoding-x2F-binary" class="headerlink" title="encoding&#x2F;binary"></a>encoding&#x2F;binary</h1><blockquote><p><em>The new interface AppendByteOrder provides efficient methods for appending a uint16, uint32, or uint64 to a byte slice. BigEndian and LittleEndian now implement this interface.<br>Similarly, the new functions AppendUvarint and AppendVarint are efficient appending versions of PutUvarint and PutVarint.<br><a href="https://tip.golang.org/doc/go1.19#:~:text=The%20new%20interface,and%20PutVarint.">Go 1.19 Release Notesより引用</a></em></p></blockquote><p>encoding&#x2F;binaryパッケージにはAppendByteOrder、AppendUvarint、 AppendVarint、が新たに追加されました。</p><p><a href="https://github.com/golang/go/issues/50601">(#50601)</a>では、AppendByteOrderインターフェースの導入が提案され、BigEndian 型と LittleEndian 型に新たにAppendUint16、AppendUint32、AppendUint64が実装されています。<br><a href="https://github.com/golang/go/issues/51644">(#51644)</a>では<a href="https://github.com/golang/go/issues/50601">(#50601)</a>にてAppendByteOrderを導入した関連でAppendUvarint、 AppendVarintを実装しています。この2つのメソッドは型への紐づけは行われておらずそれぞれ<code>uint64</code>、<code>int64</code>を引数に持ちます。</p><h2 id="利用方法"><a href="#利用方法" class="headerlink" title="利用方法"></a>利用方法</h2><p>byte型のスライスに整数型をさらに追加する場合、使用します。</p><p>Go1.18以前で上記を達成する場合、以下の様な実装をする必要がありました。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>✅利用方法という観点では、今回導入されたメソッドはどれも同じ様な使われ方のため、AppendUint16に注目して解説します。</p></div><br><p>▶<a href="https://go.dev/play/p/1txJEaI7FdK">playground</a></p><figure class="highlight go"><figcaption><span>go1.18以前</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/binary&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">in := []<span class="type">uint16</span>&#123;<span class="number">102</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">104</span>, <span class="number">45</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">103</span>&#125;</span><br><span class="line">out := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">0</span>, <span class="built_in">len</span>(in))</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> in &#123;</span><br><span class="line"><span class="keyword">var</span> arr [<span class="number">2</span>]<span class="type">byte</span></span><br><span class="line">binary.LittleEndian.PutUint16(arr[:], v)</span><br><span class="line">out = <span class="built_in">append</span>(out, arr[:]...)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;raw: %v \n&quot;</span>, out)</span><br><span class="line">fmt.Printf(<span class="string">&quot;str: %s \n&quot;</span>, out)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>▼実行結果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raw: [102 0 117 0 116 0 117 0 114 0 101 0 32 0 116 0 101 0 99 0 104 0 45 0 98 0 108 0 111 0 103 0]</span><br><span class="line">str: future tech-blog</span><br></pre></td></tr></table></figure><p>今回導入されたAppendUintメソッドを使用すればより端的に実装することができます。</p><p>▶<a href="https://go.dev/play/p/Rvp0_2vONlp?v=gotip">playground</a></p><figure class="highlight go"><figcaption><span>go1.19以降</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/binary&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">input := []<span class="type">uint16</span>&#123;<span class="number">102</span>, <span class="number">117</span>, <span class="number">116</span>, <span class="number">117</span>, <span class="number">114</span>, <span class="number">101</span>, <span class="number">32</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">99</span>, <span class="number">104</span>, <span class="number">45</span>, <span class="number">98</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">103</span>&#125;</span><br><span class="line">out := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">0</span>, <span class="built_in">len</span>(input))</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> input &#123;</span><br><span class="line">out = binary.LittleEndian.AppendUint16(out, v)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;raw: %v \n&quot;</span>, out)</span><br><span class="line">fmt.Printf(<span class="string">&quot;str: %s \n&quot;</span>, out)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>▼実行結果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raw: [102 0 117 0 116 0 117 0 114 0 101 0 32 0 116 0 101 0 99 0 104 0 45 0 98 0 108 0 111 0 103 0]</span><br><span class="line">str: future tech-blog</span><br></pre></td></tr></table></figure><p>Appendで実装することにより記述行数が減り、可読性もぐっと上がりました。</p><p>AppendUint32、AppendUint64も基本的な利用方法は同じです。</p><h1 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h1><blockquote><p><em>The new functions Append, Appendf, and Appendln append formatted data to byte slices.<br><a href="https://tip.golang.org/doc/go1.19#:~:text=The%20new%20functions%20Append%2C%20Appendf%2C%20and%20Appendln%20append%20formatted%20data%20to%20byte%20slices.">Go 1.19 Release Notesより引用</a></em></p></blockquote><p>fmtパッケージにもAppend系のメソッドが導入されました。<br>こちらもbyte型のスライスを戻り値に持つメソッドです。</p><p>こちらのメソッドの導入経緯はproposalにも記載されています</p><blockquote><p><em>fmt.Sprintf is an allocator that produces a string, but there are times when you want formatted-output, but want to write into a []byte. And you can do that with bytes.Buffer and fmt.Fprintf<br>…(中略)<br>What I want: Something like Sprintf, but that can write into a []byte, and can fail gracefully if there’s not enough space to write things.<br><a href="https://github.com/golang/go/issues/47579">fmt: add Append, Appendf, Appendln (#47579)より引用</a></em></p></blockquote><p>フォーマットされた出力で[]byteに書き込みを行う場合、これまではbytes.Bufferとfmt.Fprintfを組み合わせて実装することができました。Appendfの導入によりこれを気軽に利用することができます。</p><h2 id="利用方法-1"><a href="#利用方法-1" class="headerlink" title="利用方法"></a>利用方法</h2><p>Sprintfと比較すると利用方法がわかりやすいと思います。<br>fmtにはSprintfメソッドが定義されています。これは任意の型をフォーマットし、文字列で返すメソッドです。</p><p>Appendfでは引数にbyte型スライスを持ち、Sprintfとは異なり、戻り値にbyte型スライスを持ちます。<br>つまり、任意の型をフォーマットをした後、引数に与えられたbyte型スライスに値を追加し、返却します。</p><p>SprintfとAppendfの実装を見たほうがわかりやすいと思いますので、以下比較を行います。</p><figure class="highlight go"><figcaption><span>fmt.Sprintf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sprintf formats according to a format specifier and returns the resulting string.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sprintf</span><span class="params">(format <span class="type">string</span>, a ...any)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">p := newPrinter()</span><br><span class="line">p.doPrintf(format, a)</span><br><span class="line">s := <span class="type">string</span>(p.buf)</span><br><span class="line">p.free()</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>fmt.Appendf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Appendf formats according to a format specifier, appends the result to the byte</span></span><br><span class="line"><span class="comment">// slice, and returns the updated slice.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Appendf</span><span class="params">(b []<span class="type">byte</span>, format <span class="type">string</span>, a ...any)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">p := newPrinter()</span><br><span class="line">p.doPrintf(format, a)</span><br><span class="line">b = <span class="built_in">append</span>(b, p.buf...)</span><br><span class="line">p.free()</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>細かな点で異なりますが、2つのメソッドの本質的な差分は以下の1行のみです。</p><figure class="highlight diff"><figcaption><span>diff</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-   s := string(p.buf)</span></span><br><span class="line"><span class="addition">+b = append(b, p.buf...)</span></span><br></pre></td></tr></table></figure><p>では実際に使用してみます。</p><p><code>in:=tech-blog</code>を<code>%s</code>でフォーマットして、空のbyte型スライスに追加します。</p><p>▶<a href="https://go.dev/play/p/mWlytnqwn5a?v=gotip">playground</a></p><figure class="highlight go"><figcaption><span>fmt.Appendf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">in := <span class="string">&quot;tech-blog&quot;</span></span><br><span class="line">out := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">out = fmt.Appendf(out, <span class="string">&quot;future %s&quot;</span>, in)</span><br><span class="line">fmt.Printf(<span class="string">&quot;raw: %v \n&quot;</span>, out)</span><br><span class="line">fmt.Printf(<span class="string">&quot;str: %s \n&quot;</span>, out)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>▼実行結果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raw: [102 117 116 117 114 101 32 116 101 99 104 45 98 108 111 103]</span><br><span class="line">str: future tech-blog</span><br></pre></td></tr></table></figure><p>空だったbyte型スライスoutに要素が追加されていますね。</p><p>Appendはフォーマットは行わず、要素の追加のみ行います。</p><p>▶<a href="https://go.dev/play/p/esdszlv900P?v=gotip">playground</a></p><figure class="highlight go"><figcaption><span>fmt.Append</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">in := <span class="string">&quot;tech-blog&quot;</span></span><br><span class="line">out := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">out = fmt.Append(out, in)</span><br><span class="line">fmt.Printf(<span class="string">&quot;raw: %v \n&quot;</span>, out)</span><br><span class="line">fmt.Printf(<span class="string">&quot;str: %s \n&quot;</span>, out)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>▼実行結果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raw: [116 101 99 104 45 98 108 111 103]</span><br><span class="line">str: tech-blog</span><br></pre></td></tr></table></figure><p>AppendlnはAppendした後に改行を挿入します。<br>先程のコードに<code>out = fmt.Appendln(out, &quot;future&quot;)</code>を加えます。</p><p>▶<a href="https://go.dev/play/p/esdszlv900P?v=gotip">playground</a></p><figure class="highlight go"><figcaption><span>fmt.Appendln</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">in := <span class="string">&quot;tech-blog&quot;</span></span><br><span class="line">out := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">0</span>, <span class="number">100</span>)</span><br><span class="line">out = fmt.Appendln(out, <span class="string">&quot;future&quot;</span>)</span><br><span class="line">out = fmt.Append(out, in)</span><br><span class="line">fmt.Printf(<span class="string">&quot;raw: %v \n&quot;</span>, out)</span><br><span class="line">fmt.Printf(<span class="string">&quot;str: %s \n&quot;</span>, out)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>▼実行結果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">raw: [102 117 116 117 114 101 10 116 101 99 104 45 98 108 111 103]</span><br><span class="line">str: future</span><br><span class="line">tech-blog</span><br></pre></td></tr></table></figure><p>期待どおり、Appendlnで追加した<code>future</code>で改行が挿入されていますね。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>今回はGo1.19でリリースされた各種ライブラリのマイナーチェンジの中でもAppend系のメソッドに注目しました。<br>今回のリリースには含まれていませんが、<a href="https://github.com/golang/go/issues/53693">proposal: encoding: provide append-like variants #53693</a>では<code>encoding/hex</code>,<code>encoding/base32</code>,<code>encoding/base64</code>に対してAppend系のメソッドを追加しようという提案がされており、今後もencoding周りのAPIはマイナーリリースが続きそうです。</p><p><a href="https://github.com/golang/go/issues/53693">(#53693)</a>以外にも、以下のようなProposalでAppend-likeなメソッド追加が提案されています。</p><ul><li><a href="https://github.com/golang/go/issues/24630">proposal: encoding: BinaryMarshaler should be an append API #24630</a></li><li><a href="https://github.com/golang/go/issues/54078">proposal: compress: add AppendEncoded and AppendDecoded #54078</a></li></ul><p>普段とは異なる切り口で公式リポジトリを眺めていましたが、特定のパッケージやAPIに注目するとパッケージの役割や関数の命名に非常に慎重に議論が進められている事に気が付きます。<br>Goの思想や質の高いコーディングを学ぶという点で今回の連載は非常に良い体験でした。</p><p>最後までお付き合いただきありがとうございました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-19/">Go1.19</category>
      
      
      <comments>https://future-architect.github.io/articles/20220803a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go1.19 encoding/csv のアップデート</title>
      <link>https://future-architect.github.io/articles/20220802a/</link>
      <guid>https://future-architect.github.io/articles/20220802a/</guid>
      <pubDate>Mon, 01 Aug 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220802a/go1.19csv.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;447&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220802a/go1.19csv.png" alt="" width="800" height="447"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG真野です。<a href="/articles/20220801a/">Go 1.19リリース連載</a>の2本目です。</p><p>encoding&#x2F;csv のアップデート内容について紹介します。 <a href="/articles/20210811a/">Go 1.17のときも encoding&#x2F;csv</a> を取り上げたので2回目です。</p><p>ちなみにその時に説明した<code>FieldPos()</code> ですが、類似のメソッドがGo 1.19の <code>encoding/xml</code> にも追加されています。隣のパッケージに類似の展開がされているのは面白いですね。</p><blockquote><p><code>encoding/xml</code><br>The new method <code>Decoder.InputPos</code> reports the reader’s current input position as a line and column, analogous to encoding&#x2F;csv’s <code>Decoder.FieldPos</code>.<br>readerの現在入力位置の行と列を示すを取得します。 <code>encoding/csv</code> の <code>Decoder.FieldPos</code> と同様です。</p></blockquote><h2 id="アップデート内容について"><a href="#アップデート内容について" class="headerlink" title="アップデート内容について"></a>アップデート内容について</h2><p>さて、<code>encoding/csv</code> のアップデートについてです。</p><p><a href="https://tip.golang.org/doc/go1.19">Go 1.19 Release Notes</a> に1行だけ書いてあります。</p><blockquote><p>The new method Reader.InputOffset reports the reader’s current input position as a byte offset, analogous to encoding&#x2F;json’s Decoder.InputOffset.<br>新しい <code>Reader.InputOffset</code> メソッドは、現在の入力位置をバイトオフセットとして取得します。encoding&#x2F;jsonの <code>Decoder.InputOffset</code> と類似しています。</p></blockquote><p>追加された関数は<a href="https://pkg.go.dev/encoding/csv@master#Reader.InputOffset">GoDocs</a>に次のように書かれています。</p><figure class="highlight go"><figcaption><span>追加されたメソッド</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *Reader)</span></span> InputOffset() <span class="type">int64</span></span><br></pre></td></tr></table></figure><p>これであーこれで便利になるねってピンと来る人は、そこそこディープな <code>encoding/csv</code> のファンではないでしょうか？説明していきます。</p><h2 id="まずどういうAPIか動かしましょう"><a href="#まずどういうAPIか動かしましょう" class="headerlink" title="まずどういうAPIか動かしましょう"></a>まずどういうAPIか動かしましょう</h2><p>以下のバージョンで動かしています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;go version</span><br><span class="line">go version go1.19rc2 windows/amd64</span><br></pre></td></tr></table></figure><p>改行を含むCSVデータで動かしてみます。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/csv&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">`aaa,&quot;b</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bb&quot;,ccc</span></span><br><span class="line"><span class="string">ddd,eee,fff</span></span><br><span class="line"><span class="string">zzz,yyy,xxx</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">r := csv.NewReader(strings.NewReader(s))</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;input offset:%d: &quot;</span>, r.InputOffset())</span><br><span class="line"></span><br><span class="line">record, err := r.Read()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err) <span class="comment">// 何かしらのエラーハンドリング</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, record)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>結果は次のようになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;go run main.go</span><br><span class="line">input offset:0: []string&#123;<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;b\n\nbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>&#125;</span><br><span class="line">input offset:16: []string&#123;<span class="string">&quot;ddd&quot;</span>, <span class="string">&quot;eee&quot;</span>, <span class="string">&quot;fff&quot;</span>&#125;</span><br><span class="line">input offset:28: []string&#123;<span class="string">&quot;zzz&quot;</span>, <span class="string">&quot;yyy&quot;</span>, <span class="string">&quot;xxx&quot;</span>&#125;</span><br><span class="line">input offset:40:</span><br></pre></td></tr></table></figure><p>最初は0で <code>r.Read()</code> が呼び出されるとバイト位置が進み、呼び出されるたびにddd、zzz項目の直前まで先に進んでいることがわかります。バイト位置的にどこまで進んだかがわかります。</p><h2 id="Issue上でのやり取り"><a href="#Issue上でのやり取り" class="headerlink" title="Issue上でのやり取り"></a>Issue上でのやり取り</h2><p><a href="https://github.com/golang/go/issues/43401">encoding&#x2F;csv: add Reader.InputOffset method #43401</a> が該当のIssueですが、<code>encoding/json.Decoder</code> という前例があるからか割りとすんなり提案から受け入れられています。</p><p>議論があったポイントは以下程度。</p><ul><li><code>encoding/json</code> の <code>Decoder.InputOffset</code> はJSONバイナリをどこまで読み取ったか知るすべが無いので有効である<ul><li>CSVの場合は行ベースなので、不要では？<ul><li>いやいや、ランダムアクセスが必要なケースもあるし必要。例えば CSVに対して転置インデックスを作成し、オフセットから特定の行を読み取りたいケースがある</li><li>（筆者補足）あと、CSVは項目の改行が許容されているので必ずしも読み取った行でポジションが分かるわけでもない</li></ul></li></ul></li></ul><p>ちなみに、前例とされている <code>encoding/json.Decoder</code> は2020年2月25日の <a href="https://go.dev/doc/go1.14#:~:text=The%20Decoder%20type%20supports%20a%20new%20method%20InputOffset%20that%20returns%20the%20input%20stream%20byte%20offset%20of%20the%20current%20decoder%20position.">Go 1.14</a>に追加されたメソッドです。</p><h2 id="追加された関数の内容は分かるけど、どういう時に嬉しいのか"><a href="#追加された関数の内容は分かるけど、どういう時に嬉しいのか" class="headerlink" title="追加された関数の内容は分かるけど、どういう時に嬉しいのか"></a>追加された関数の内容は分かるけど、どういう時に嬉しいのか</h2><p>Issueのくだりで触れられていますが、主要なユースケースは2つ思いつきます。</p><ol><li>CSVをデコード時に不正な入力が合った場合、どのバイト位置で失敗したか知らせたい<ol><li>通常はこちらの用途が多いのではと思いますが…さていかに。</li></ol></li><li>（巨大な）CSVファイルに対してランダムアクセスをさせるため、正確な位置を知りたい場合<ol><li>どういうケースで必要になるかイメージがわかないですが(私が扱うような業務システム領域だとRDBとかElasticsearchに突っ込んじゃうので..)、 <a href="https://stackoverflow.com/questions/22875018/read-random-lines-off-a-text-file-in-go">Read random lines off a text file in go - Stack Overflow</a> にある通り、需要はあるようです</li></ol></li></ol><p>それぞれどんな感じになるか簡易実装で紹介します。</p><h3 id="不正なCSV入力例"><a href="#不正なCSV入力例" class="headerlink" title="不正なCSV入力例"></a>不正なCSV入力例</h3><p>試しに不正なクウォートを混入させてみます。 ee<code>&quot;</code>e が該当の部分です。</p><figure class="highlight go"><figcaption><span>main.goのCSVに不正なクォートを混入させる</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">`aaa,&quot;b</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">bb&quot;,ccc</span></span><br><span class="line"><span class="string">ddd,ee&quot;e,fff</span></span><br><span class="line"><span class="string">zzz,yyy,xxx</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>動かしてみると、次のメッセージが取得できます。</p><figure class="highlight sh"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;go run main.go</span><br><span class="line">input offset:0: []string&#123;<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;b\n\nbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>&#125;</span><br><span class="line">input offset:16: 2022/08/02 12:17:52 parse error on line 4, column 7: bare <span class="string">&quot; in non-quoted-field</span></span><br><span class="line"><span class="string">exit status 1</span></span><br></pre></td></tr></table></figure><p>やってみて気がついたんですが、CSVパースエラーの場合は行番号も列位置も出ているため、 <code>InputOffset()</code> をわざわざ出さなくても良いかなとは思いました。</p><p>信頼できない連携先とのやり取りで、不正値を混入することを考慮して、 <code>InputOffset()</code> を表示しなくてもまぁ大丈夫かなということが分かりました。</p><h3 id="巨大なCSVに対するランダムアクセス例"><a href="#巨大なCSVに対するランダムアクセス例" class="headerlink" title="巨大なCSVに対するランダムアクセス例"></a>巨大なCSVに対するランダムアクセス例</h3><p>ということで、巨大なCSVのランダムアクセスです。データは<a href="https://www.e-stat.go.jp/stat-search/files?page=1&layout=datalist&toukei=00200521&tstat=000001011777&cycle=0&tclass1=000001094741&cycle_facet=tclass1&tclass2val=0">国勢調査 - 年齢（５歳階級），男女別人口－都道府県（大正９年～平成27年）</a> から取得したCSVを使っています（<code>c03.csv</code> という名称もそのままです）。1.7万行ほどで1MBほどなのでメモリに載せれるほどですが、いったんこれが1000TBくらいあると仮定します。</p><p>最初に対象となる巨大なCSVファイルを読み取り、後で検索したいレコードが登場したらそのオフセット位置を覚えておきます（この情報を後でファイルに出力しても良いですね）。</p><p>その後、<code>fetchFirstLine()</code> で覚えておいたオフセット位置をもとに巨大なファイルを <code>f.Seek()</code> を用いてその位置から1行だけCSVを読み込みます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bufio&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/csv&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 都道府県ごとのオフセット位置を `indexMap` に格納する</span></span><br><span class="line">f, err := os.Open(<span class="string">&quot;c03.csv&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">indexMap := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int64</span>)</span><br><span class="line">r := csv.NewReader(f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> prefectureCD <span class="type">string</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">offset := r.InputOffset()</span><br><span class="line">record, err := r.Read()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> record[<span class="number">0</span>] != prefectureCD &#123;</span><br><span class="line">prefectureCD = record[<span class="number">0</span>]</span><br><span class="line">indexMap[record[<span class="number">1</span>]] = offset</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err) <span class="comment">// 何かしらのエラーハンドリング</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// オフセット位置を表示</span></span><br><span class="line">fmt.Println(<span class="string">&quot;北海道&quot;</span>, indexMap[<span class="string">&quot;北海道&quot;</span>])</span><br><span class="line">fmt.Println(<span class="string">&quot;神奈川県&quot;</span>, indexMap[<span class="string">&quot;東京都&quot;</span>])</span><br><span class="line">fmt.Println(<span class="string">&quot;沖縄県&quot;</span>, indexMap[<span class="string">&quot;沖縄県&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 該当の最初の1行を取得（ランダムアクセスを想定）</span></span><br><span class="line">line, err := fetchFirstLine(indexMap, <span class="string">&quot;東京都&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, line)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fetchFirstLine</span><span class="params">(indexMap <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int64</span>, key <span class="type">string</span>)</span></span> ([]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">f, err := os.Open(<span class="string">&quot;c03.csv&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">_, err = f.Seek(indexMap[key], <span class="number">0</span>) <span class="comment">//特定の位置から読む</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r := csv.NewReader(f)</span><br><span class="line"><span class="keyword">return</span> r.Read()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行するとこういう感じです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;go run main.go</span><br><span class="line">北海道 146</span><br><span class="line">神奈川県 262340</span><br><span class="line">沖縄県 1006890</span><br><span class="line">[]string&#123;<span class="string">&quot;13&quot;</span>, <span class="string">&quot;東京都&quot;</span>, <span class="string">&quot;総数&quot;</span>, <span class="string">&quot;大正&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;1920&quot;</span>, <span class="string">&quot;3699428&quot;</span>, <span class="string">&quot;1952989&quot;</span>, <span class="string">&quot;1746439&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>こういった用途に関しては、 <code>f.Seek()</code> を使ってファイルの特定位置から読み込むためには、従来の行番号などでは不適切です。なぜなら100万行目から読み込む必要があると分かっても、ファイルの先頭から改行コードをカウントする必要があり、アクセスしたい行番号が大きければ大きいほど時間がかかってしまいます。</p><p>このようにして、 <code>InputOffset()</code> で取得したバイト位置をもとに、巨大なファイルに対してランダムアクセスのようなことができます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>新しく追加された <code>InputOffset()</code> について調べました。リリースノートの内容だけ見ると不正な入力値に対するトレース用途に用いるのかなと思っていましたが、どちらかといえばもう少しテクニカルな用途での利用を想定していそうです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-19/">Go1.19</category>
      
      <category domain="https://future-architect.github.io/tags/CSV/">CSV</category>
      
      
      <comments>https://future-architect.github.io/articles/20220802a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title> Go 1.19リリース連載始まります GoDoc/ツール周りのアップデート</title>
      <link>https://future-architect.github.io/articles/20220801a/</link>
      <guid>https://future-architect.github.io/articles/20220801a/</guid>
      <pubDate>Sun, 31 Jul 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20200521/go1.19.png&quot; alt=&quot;&quot; width=&quot;&quot; height=&quot;&quot;&gt;

&lt;p&gt;Go</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20200521/go1.19.png" alt="" width="" height=""><p>Go 1.18のジェネリクス導入の大規模リリースと比べると比較的小さな1.19ですが、それでもさまざまな変更があります。今回ももちろん、恒例行事になりつつある、このテックブログでリリース連載をやります。特に、網羅性とか考えずに書きたい人が書きたいテーマをピックアップしています。もし、「このテーマについて語らせろ！」という方がいましたら、社外からも飛び込み参加可能ですので、ぜひどうぞ。</p><p>なお、正式リリースはおそらく8月中旬になるかと思います。現時点の<a href="https://tip.golang.org/doc/go1.19">最新版のリリースノート</a>を参考にしているため、もしかしたら正式版で変更があるかもしれません。その場合は補足を行う予定です。</p><div class="scroll"><table><thead><tr><th align="center">Date</th><th align="center">Title</th><th align="center">Author</th></tr></thead><tbody><tr><td align="center">8&#x2F;1 (月)</td><td align="center">Docコメント&#x2F;ツール周りのアップデート</td><td align="center">澁川喜規</td></tr><tr><td align="center">8&#x2F;2 (火)</td><td align="center"><a href="/articles/20220802a/">encoding&#x2F;csv</a></td><td align="center">真野隼記さん</td></tr><tr><td align="center">8&#x2F;3 (水)</td><td align="center"><a href="/articles/20220803a/">encoding&#x2F;byte, fmtのAppend系メソッド</a></td><td align="center">宮永崇史さん</td></tr><tr><td align="center">8&#x2F;4 (木)</td><td align="center"><a href="/articles/20220804a/">net&#x2F;http</a></td><td align="center">辻大志郎さん</td></tr><tr><td align="center">8&#x2F;5 (金)</td><td align="center"><a href="/articles/20220805a/">ジェネリクス</a></td><td align="center">村上知優さん</td></tr><tr><td align="center">8&#x2F;8 (月)</td><td align="center"><a href="/articles/20220808a/">メモリ周り</a></td><td align="center">澁川喜規</td></tr></tbody></table></div><p>まずは、GoDocと、その他ツール周りのアップデートの紹介です。</p><h1 id="Docコメントの更新"><a href="#Docコメントの更新" class="headerlink" title="Docコメントの更新"></a>Docコメントの更新</h1><p>以前、Qiitaの方に、<a href="https://qiita.com/shibukawa/items/8c70fdd1972fad76a5ce">チョットできるGoプログラマーになるための詳解GoDoc</a>という記事を掲載しました。</p><p><a href="https://qiita.com/shibukawa/items/8c70fdd1972fad76a5ce">https://qiita.com/shibukawa/items/8c70fdd1972fad76a5ce</a></p><p>GoDocの書き方の詳細ですが、以前は空行をあけて段落、インデントをしてフォーマット済みテキスト、URLがあればリンク、という程度のマークアップしかなく、とてもシンプルでした。GitHub FlavorなMarkdownとまでもいかなくても、もうちょっとマークアップが高機能になってほしい、せめてリストだけでも・・・と思っていた日本全国1億2000万のGoプログラマーにとって待望のアップデートが1.19で入りました。</p><ul><li>セクションタイトル</li><li>リンク</li><li>リスト</li></ul><p>また、gofmtが改善され、Docコメントでよくある間違いがチェックされるようになりました。詳しくは<a href="https://tip.golang.org/doc/comment">Go Doc Comments</a>というドキュメントを参照してください。</p><p>Docコメントはpkg.go.devで公開されるだけではなく、IDEでマウスオーバーしたときに表示されたりもするため、丁寧なドキュメントは利用者への助けとなります。</p><h2 id="セクションタイトル（heading）"><a href="#セクションタイトル（heading）" class="headerlink" title="セクションタイトル（heading）"></a>セクションタイトル（heading）</h2><p>セクションタイトルはMarkdownと同じく、 <code>#</code> 記号＋スペース＋テキストという形式で書きます。なお、他のマークアップでは、HTMLにあわせてか、6階層まで書けるのですが、Goの場合は1階層のタイトルしか書けません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Package strconv implements conversions to and from string representations</span></span><br><span class="line"><span class="comment">// of basic data types.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// # Numeric Conversions</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The most common numeric conversions are [Atoi] (string to int) and [Itoa] (int to string).</span></span><br></pre></td></tr></table></figure><h2 id="リンクの書き方"><a href="#リンクの書き方" class="headerlink" title="リンクの書き方"></a>リンクの書き方</h2><p>まずリンクですが、URLを設定したい場合は、次のような <code>[ ]</code> でくくったテキストを書き、その下の注釈のようにリンクを書きます。書籍に書くような書き方ですね。あるいはreStructuredTextの、あまり使われない方の書き方。リンク定義のブロックは通常のパラグラフと空行で空けて書きます。gofmtはリンク定義のブロックは全自動で末尾に移動してくれるとのこと。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Package json implements encoding and decoding of JSON as defined in</span></span><br><span class="line"><span class="comment">// [RFC 7159]. The mapping between JSON and Go values is described</span></span><br><span class="line"><span class="comment">// in the documentation for the Marshal and Unmarshal functions.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For an introduction to this package, see the article</span></span><br><span class="line"><span class="comment">// “[JSON and Go].”</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// [RFC 7159]: https://tools.ietf.org/html/rfc7159</span></span><br><span class="line"><span class="comment">// [JSON and Go]: https://golang.org/doc/articles/json_and_go.htmlpackage json</span></span><br></pre></td></tr></table></figure><p>それ以外に、リファレンスの中で相互リンクも書けるようになります。パッケージ名（階層があるならencoding&#x2F;jsonのようにスラッシュ付きで）、構造体のようなトップの要素、それらの子供の要素などをピリオドでつないで書くとのこと。オプションでアスタリスクを前につけて、 <code>[*bytes.Buffer]</code>のようにもできるとのことです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReadFrom reads data from r until EOF and appends it to the buffer, growing</span></span><br><span class="line"><span class="comment">// the buffer as needed. The return value n is the number of bytes read. Any</span></span><br><span class="line"><span class="comment">// error except [io.EOF] encountered during the read is also returned. If the</span></span><br><span class="line"><span class="comment">// buffer becomes too large, ReadFrom will panic with [ErrTooLarge].</span></span><br></pre></td></tr></table></figure><h2 id="リスト"><a href="#リスト" class="headerlink" title="リスト"></a>リスト</h2><p>リストは、今までのコードブロックの派生という感じで、リストの前の段落の末尾のコロンと、リストのインデントが必要な点に要注意です。</p><p>バレットリストと数字つきの2つがあります。バレットリストはマイナス記号やアスタリスクなど複数の記号に対応しているとのことですが、gofmtにかけると、空白スペース2個＋マイナス＋スペースに整列しちゃうとのことで、マイナスだけ覚えておけば良さそう。</p><p>数字は他のマークアップでもよくある形式ですが、スペースが前に1個入るのが正式とのこと（gofmtがそのように整形する）。</p><p>ただし、ネストなどはできませんし、リストの中にコードブロックなども書けません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PublicSuffixList provides the public suffix of a domain. For example:</span></span><br><span class="line"><span class="comment">//   - the public suffix of &quot;example.com&quot; is &quot;com&quot;,</span></span><br><span class="line"><span class="comment">//   - the public suffix of &quot;foo1.foo2.foo3.co.uk&quot; is &quot;co.uk&quot;, and</span></span><br><span class="line"><span class="comment">//   - the public suffix of &quot;bar.pvt.k12.ma.us&quot; is &quot;pvt.k12.ma.us&quot;.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Clean returns the shortest path name equivalent to path</span></span><br><span class="line"><span class="comment">// by purely lexical processing. It applies the following rules</span></span><br><span class="line"><span class="comment">// iteratively until no further processing can be done:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  1. Replace multiple slashes with a single slash.</span></span><br><span class="line"><span class="comment">//  2. Eliminate each . path name element (the current directory).</span></span><br><span class="line"><span class="comment">//  3. Eliminate each inner .. path name element (the parent directory)</span></span><br><span class="line"><span class="comment">//     along with the non-.. element that precedes it.</span></span><br><span class="line"><span class="comment">//  4. Eliminate .. elements that begin a rooted path:</span></span><br><span class="line"><span class="comment">//     that is, replace &quot;/..&quot; by &quot;/&quot; at the beginning of a path.</span></span><br></pre></td></tr></table></figure><h2 id="コードブロック"><a href="#コードブロック" class="headerlink" title="コードブロック"></a>コードブロック</h2><p>これは前からあったものです。前の段落の末尾のコロン＋インデントで、スペースなどが維持された形で表示されます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Search uses binary search...</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// As a more whimsical example, this program guesses your number:</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  func GuessingGame() &#123;</span></span><br><span class="line"><span class="comment">//      var s string</span></span><br><span class="line"><span class="comment">//      fmt.Printf(&quot;Pick an integer from 0 to 100.\n&quot;)</span></span><br><span class="line"><span class="comment">//      answer := sort.Search(100, func(i int) bool &#123;</span></span><br><span class="line"><span class="comment">//          fmt.Printf(&quot;Is your number &lt;= %d? &quot;, i)</span></span><br><span class="line"><span class="comment">//          fmt.Scanf(&quot;%s&quot;, &amp;s)</span></span><br><span class="line"><span class="comment">//          return s != &quot;&quot; &amp;&amp; s[0] == &#x27;y&#x27;</span></span><br><span class="line"><span class="comment">//      &#125;)</span></span><br><span class="line"><span class="comment">//      fmt.Printf(&quot;Your number is %d.\n&quot;, answer)</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br></pre></td></tr></table></figure><h2 id="Go-Doc-Commentsドキュメントは必読"><a href="#Go-Doc-Commentsドキュメントは必読" class="headerlink" title="Go Doc Commentsドキュメントは必読"></a>Go Doc Commentsドキュメントは必読</h2><p>今回はメモリやGCに加えて、Doc Commentsのドキュメントが追加されました。上記のサンプルはここからの引用でした。</p><p>なお、このドキュメントは単に文法の書き方だけではなく、パッケージ、コマンド、型、関数、定数、変数といった要素へのドキュメントの書き方のベストプラクティスが前半の半分を占めています。</p><p>例えば、ゼロ値が目的を持っている場合は書け、とか関数の場合は名前付きの返り値との併用で読みやすくなるぞ、とか、並列実行でユーザーの期待と違う場合（型の場合はデフォルト並列不可、関数の場合は並列可能、というのが期待のライン）はきちんと明示的に説明しよう、とかですね。</p><p>この前半部分、Go特有の内容もありますが、JavaとかTypeScriptとか使っている人にも役立つと思うので、社内で勉強会をしているのであれば、軽くみんなで読む教材として取り上げてもよいかと思います。</p><p>また、最後にはよくある間違いについての説明もあります。</p><h1 id="その他のツールの更新"><a href="#その他のツールの更新" class="headerlink" title="その他のツールの更新"></a>その他のツールの更新</h1><p>その他気になる改善としては、コンパイラの更新がいくつかありました。</p><h2 id="unix-というbuild-constraintが追加"><a href="#unix-というbuild-constraintが追加" class="headerlink" title="unix というbuild constraintが追加"></a><code>unix</code> というbuild constraintが追加</h2><p>Go 1.17でsignal_unix.goは次のようなbuild constraintがついていました。</p><figure class="highlight go"><figcaption><span>os/signal/signal_unix.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:build aix || darwin || dragonfly || freebsd || (js &amp;&amp; wasm) || linux || netbsd || openbsd || solaris || windows</span></span><br></pre></td></tr></table></figure><p>それがこんなにコンパクトになりますよっと。いいですね。</p><figure class="highlight go"><figcaption><span>os/signal/signal_unix.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:build unix || (js &amp;&amp; wasm) || windows</span></span><br></pre></td></tr></table></figure><h2 id="コンパイラの改良でswitch文が高速化"><a href="#コンパイラの改良でswitch文が高速化" class="headerlink" title="コンパイラの改良でswitch文が高速化"></a>コンパイラの改良でswitch文が高速化</h2><p>数値と文字列を対象にジャンプテーブルを使うように改良されたため、20%ほど高速化されたとのことです。</p><h2 id="ELF環境でリンカーが圧縮形式のデバッグ情報を持つようになった"><a href="#ELF環境でリンカーが圧縮形式のデバッグ情報を持つようになった" class="headerlink" title="ELF環境でリンカーが圧縮形式のデバッグ情報を持つようになった"></a>ELF環境でリンカーが圧縮形式のデバッグ情報を持つようになった</h2><p>レガシーな.zdebugから、SHF_COMPRESSEDに変わったとのことでした。Hello Worldの短いプログラムを作ってサイズを比較してみました（M2 Air上でGOOS&#x3D;linux go build)。</p><div class="scroll"><table><thead><tr><th align="center">1.18</th><th align="center">1.19rc2</th></tr></thead><tbody><tr><td align="center">1799875</td><td align="center">1821715</td></tr></tbody></table></div><p>うーむ。増えてる？とはいえ、Mach-OなmacOSネイティブでやった場合はもうちょっと(70KB)増えていたので他の増加分が打ち消された、と考えれば良さそう。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88/">ドキュメント</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-19/">Go1.19</category>
      
      <category domain="https://future-architect.github.io/tags/GoDoc/">GoDoc</category>
      
      
      <comments>https://future-architect.github.io/articles/20220801a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SpringBootで動的な条件をもとにDIしたい</title>
      <link>https://future-architect.github.io/articles/20220729a/</link>
      <guid>https://future-architect.github.io/articles/20220729a/</guid>
      <pubDate>Thu, 28 Jul 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;SpringBootのDependency</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>SpringBootのDependency Injection（DI）は便利ですよね？利用する側にコンストラクタインジェクションやら、フィールドインジェクションやらセッターインジェクションやらの形式で書いておくと、DIコンテナが勝手に実行時に対象となるクラスをもってきてインスタンスの生成をしてくれますし、インスタンスのライフサイクルをインジェクションされるクラス側に書けます。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UseDI</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MyService myService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UseDI</span><span class="params">(MyService myService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.myService = myService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyService</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;DIコンテナがnewしてくれたよ&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行時にDIしてくれるとはいっても、コンストラクタのパラメータとかクラスのフィールドはコンパイル前にソースコードにハードコードされてしまいます。本当に実行時に決まるような値をもとに動的に生成するクラスを変えたいという要件があったのでやり方を調べてみました。SpringBoot上だったので、汎用的な仕組みではなくてSpringBootの仕組みに乗っかるようにしています。</p><p>動的というのは、例えば、リクエストしてくるユーザーのランクを見て、VIPユーザー用ロジックを選択したい、みたいなストラテジーパターンです。ユーザーのランクの種類は動的に増えたりするのでハードコードしたくない、みたいな感じの要件だとします。</p><img src="/images/20220729a/名称未設定ファイル.drawio.png" alt="名称未設定ファイル.drawio.png" width="460" height="191" loading="lazy"><h1 id="まずはロジックの登録機構"><a href="#まずはロジックの登録機構" class="headerlink" title="まずはロジックの登録機構"></a>まずはロジックの登録機構</h1><p>やはりDIするにはアノテーションですよね。 <code>@UserRank</code>アノテーションを作ります。1つだけ引数を持つ単一値アノテーションとします。で、アノテーションの合成を使って、<code>@Component</code>もつけています。これは、このアノテーションをつけたら、即座にDI対象（別途<code>@Service</code>やら<code>@Component</code>やら<code>@Bean</code>をつける必要はない）とするためのものです。</p><figure class="highlight java"><figcaption><span>src/main/java/com/example/annotations/UserRank.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.annotations;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;</span></span><br><span class="line"><span class="meta">    ElementType.TYPE,</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">// ここに並べると合成となって、UserRankアノテーションをつけたものにComponentをつけたのと同じ効果も付与される</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UserRank&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>String value()</code>のところが引数で、<code>value</code>という名前であれば、<code>@UserRank(&quot;VIP&quot;)</code>と書けますが、仮に<code>type</code>だと、<code>@UserRank(type=&quot;VIP&quot;)</code>とする必要があります。また、複数個パラメータをつけることも可能です。VIPになった勤続回数でも選択したいが、特別な場合以外は省略したい場合、<code>int streak() default 0;</code>みたいに<code>default</code>をつけると省略可能になります。</p><p>これで、ロジック側に動的にフィルタリングするためのアノテーションが作れました。</p><p>実際にはアノテーションを使わないでも、特定インタフェースを実装しているものとか、クラス名でなどの条件でコンポーネントは探せるのですが、やはりアノテーションのほうがアスペクト指向っぽい感じで、ロジックの中身と探索ルールを切り離して表現できるのでアノテーションにしています。</p><h1 id="動的に選択したいサービスクラスを実装する。"><a href="#動的に選択したいサービスクラスを実装する。" class="headerlink" title="動的に選択したいサービスクラスを実装する。"></a>動的に選択したいサービスクラスを実装する。</h1><p>まずは実装につけるインタフェースを作っておきます。</p><figure class="highlight java"><figcaption><span>src/main/java/com/example/UserService.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">public</span> String <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実装を2つ作ります。</p><figure class="highlight java"><figcaption><span>src/main/java/com/example/services/VIPService.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.services;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.annotations.UserRank;</span><br><span class="line"><span class="keyword">import</span> com.example.UserService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * VIP用ロジック</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@UserRank(&quot;VIP&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VIPService</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;VIP用ロジック&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;VIP&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><figcaption><span>src/main/java/com/example/services/GenericUserService.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.services;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.annotations.UserRank;</span><br><span class="line"><span class="keyword">import</span> com.example.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一般用ロジック</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@UserRank(&quot;一般&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeneralUserService</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;一般人用ロジック&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;一般人&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="コンポーネントをスキャンしてコンポーネントのマップを作る"><a href="#コンポーネントをスキャンしてコンポーネントのマップを作る" class="headerlink" title="コンポーネントをスキャンしてコンポーネントのマップを作る"></a>コンポーネントをスキャンしてコンポーネントのマップを作る</h1><p>ちょっと長いですが、コンポーネントのマップを作るクラスが以下の通りです。</p><p><code>ClassPathScanningCandidateComponentProvider</code>クラスを使うと特定のパッケージ以下のクラス群を取得できます。取得時には名前とかいろいろフィルタが設定できるのですが、ここでは<code>UserRank</code>というアノテーションがついているクラスを全取得しています。一度スキャンしたらその結果使いまわしたいので<code>static</code>な<code>Map</code>に入れています。</p><figure class="highlight java"><figcaption><span>src/main/java/com/example/UserServiceFactory.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.filter.AnnotationTypeFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.annoatations.UserRank;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ユーザーランクごとのサービスのマップをキャッシュし、必要に応じてインスタンスを作成する。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceFactory</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * コンポーネントスキャンするパッケージ。デフォルト値は与えているが、設定したい場合はmainでこれを呼ぶこと。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> String[] scanTargets = &#123;<span class="string">&quot;com.example&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * コンポーネントをスキャンするパッケージを設定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScanTarget</span><span class="params">(String[] packages)</span> &#123;</span><br><span class="line">scanTargets = packages;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * プログラム中に含まれるすべてのサービスを集めたもの</span></span><br><span class="line"><span class="comment"> * 初期の取得時に初期化を行う</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> Map&lt;String, Class&lt;?&gt;&gt; services = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * サービスのMapを作成する</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">initServiceMap</span><span class="params">()</span> &#123;</span><br><span class="line">services = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="type">var</span> <span class="variable">provider</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathScanningCandidateComponentProvider</span>(<span class="literal">false</span>);</span><br><span class="line">provider.addIncludeFilter(<span class="keyword">new</span> <span class="title class_">AnnotationTypeFilter</span>(UserService.class));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> scanTarget : scanTargets) &#123;</span><br><span class="line"><span class="type">var</span> <span class="variable">beanSet</span> <span class="operator">=</span> provider.findCandidateComponents(scanTarget);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> def : beanSet) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class&lt;?&gt; clazz = Class.forName(def.getBeanClassName());</span><br><span class="line"><span class="type">var</span> <span class="variable">annotation</span> <span class="operator">=</span> (UserRank)clazz.getAnnotation(UserRank.class);</span><br><span class="line">services.put(annotation.value(), clazz);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// 取得した名前でクラスをその場で取り出しているだけなのでClass.forNameがこの例外を投げることはない見込み</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="インスタンス作成機構の追加"><a href="#インスタンス作成機構の追加" class="headerlink" title="インスタンス作成機構の追加"></a>インスタンス作成機構の追加</h1><p>インスタンス作成はSpringBootの提供するDIコンテナの機構を使います。そうすれば、サービスクラスが何かしらの外部依存を持っていてもそれのDIも一緒に行えます。</p><p>DIのファクトリーは<code>BeanFactory</code>を使うのですが、これ自身はDIでインジェクションしてもらえばOKです。クラスの定義は前のコードで取得できていますので、あとは名前をもとにクラスをもってきて、<code>beanFactory.getBean()</code>を呼んでインスタンス化するだけです。</p><figure class="highlight java"><figcaption><span>src/main/java/com/example/UserServiceFactory .java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceFactory</span> &#123;</span><br><span class="line"><span class="comment">// インスタンス生成に使うファクトリー</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ランクをもとにサービスを取得する</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rank ランク</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> UserService <span class="title function_">findService</span><span class="params">(String rank)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (services == <span class="literal">null</span>) &#123;</span><br><span class="line">initServiceMap(); <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">var</span> <span class="variable">clazz</span> <span class="operator">=</span> services.get(rank);</span><br><span class="line"><span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (UserService) beanFactory.getBean(clazz);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使ってみる"><a href="#使ってみる" class="headerlink" title="使ってみる"></a>使ってみる</h1><p>それではコントローラに組み込んでみます。</p><figure class="highlight java"><figcaption><span>src/main/java/com/example/MyController.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.CookieValue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserServiceFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyController</span><span class="params">(UserServiceFactory factory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.factory= factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/do&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doService</span><span class="params">(<span class="meta">@CookieValue(&quot;rank&quot;)</span> String rank)</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">service</span> <span class="operator">=</span> factory.findService(rank); <span class="comment">// 名前でインスタンスを取得</span></span><br><span class="line">        <span class="keyword">if</span> (service == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;不正なランク&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> service.execute();                <span class="comment">// ランクごとのロジック実行</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>はい。これで動的にインスタンスをとってきて実行するより動的なDIコンテナが実装できました。</p><h1 id="もっと簡単な実装もあるよ"><a href="#もっと簡単な実装もあるよ" class="headerlink" title="もっと簡単な実装もあるよ"></a>もっと簡単な実装もあるよ</h1><p><a href="https://twitter.com/ryushi">@ryushi</a>さんに<a href="https://www.baeldung.com/spring-dynamic-autowire">教えてもらった記事</a>ではもっと簡単なやり方が書いてありました。</p><p>SpringBootのDIコンテナに自身に、コンポーネントに文字列で名前をつけて、その文字列を使ってインスタンス化を行う機構があります。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;GBregionService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GBRegionService</span> <span class="keyword">implements</span> <span class="title class_">RegionService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このようにDIのためのアノテーションに文字列をつけてあげて、<code>getBean()</code>にその名前を渡すと絞り込みを行ってくれるというものです（ちょっとサンプルを短くなるように改変しています）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanFactoryDynamicAutowireService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SERVICE_NAME_SUFFIX</span> <span class="operator">=</span> <span class="string">&quot;regionService&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BeanFactoryDynamicAutowireService</span><span class="params">(BeanFactory beanFactory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.beanFactory = beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isServerActive</span><span class="params">(String isoCountryCode, <span class="type">int</span> serverId)</span> &#123;</span><br><span class="line">        <span class="type">RegionService</span> <span class="variable">service</span> <span class="operator">=</span> beanFactory.getBean(isoCountryCode + SERVICE_NAME_SUFFIX,</span><br><span class="line">          RegionService.class);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> service.isServerActive(serverId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最初の実装も今回はサンプルのためにだいぶシンプル化していますが、要件としてはDI対象を探すロジックは本当はもうちょっと複雑で、マッチしなかったときのフォールバックとかもやろうと思っていたので、このシンプルな実装とは別の<code>ClassPathScanningCandidateComponentProvider</code>でとってきたクラスリストをMapに入れて、いろいろな検索が行えるような実装にしました。<br>シンプルな機構で特殊な検索条件を実現するためには、アノテーションに入れるリテラルの名前のルールを作り、それを実装者が守る必要がありますが、たんなる文字列リテラルで複雑なルールを作ってもコンパイル時のチェックとかも効かないので不親切かなという点がネックでした。独自アノテーション作成時に<code>@AliasFor</code>で親のアノテーションに値を渡すときにパラメータの加工とか合成とかいろいろコードが書ければ実現できそうでしたが、そういうのはできなそうでしたので。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>独立性の高いロジックをどかどか追加して、それを動的な条件をもとに選択して実行する、みたいなときに使える機構を作ってみました。</p><p>アノテーション単独での実装方法は調べるとすぐ出てきたのですが、その情報をもとにクラス一覧を取得してくるコード、またそのアノテーションの引数をもとにマップを作って、動的に選択してインスタンスを作るところなど、つなぎ合わせのサンプルは出てこなかったので、いろいろ調べながら書いてみました。</p><p>このようなロジックを実装したライブラリとかあるかもしれませんが、Javaのメタプログラミング的なところをいろいろ知れて楽しかったです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Java/">Java</category>
      
      <category domain="https://future-architect.github.io/tags/SpringBoot/">SpringBoot</category>
      
      <category domain="https://future-architect.github.io/tags/DI/">DI</category>
      
      
      <comments>https://future-architect.github.io/articles/20220729a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
