<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Fri, 18 Mar 2022 01:52:01 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Flutter Windows開発を試す</title>
      <link>https://future-architect.github.io/articles/20220318a/</link>
      <guid>https://future-architect.github.io/articles/20220318a/</guid>
      <pubDate>Thu, 17 Mar 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20220315a/&quot;&gt;Dart/Flutter連載&lt;/a&gt; の3本目です。&lt;/p&gt;
&lt;p&gt;FlutterのWindows対応が正式版になったので軽く試してみました。&lt;/p&gt;
&lt;h1 id=&quot;インストール&quot;&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20220315a/">Dart/Flutter連載</a> の3本目です。</p><p>FlutterのWindows対応が正式版になったので軽く試してみました。</p><h1 id="インストール"><a href="#インストール" class="headerlink" title="インストール"></a>インストール</h1><p>Flutterのいつものインストール手順でインストールします。</p><ul><li><a href="https://docs.flutter.dev/get-started/install">https://docs.flutter.dev/get-started/install</a></li></ul><p>手順としては次の通り</p><ul><li>Flutterのサイトからstableのzipをダウンロード</li><li>適当なフォルダーに展開してflutter/binフォルダにパスを通す（今回は<code>%USERPROFILE%/flutter/bin</code>でアクセスするようにしました）</li><li><code>flutter upgrade</code>で最新版にしてから、あとは<code>flutter doctor</code>でどんどん足りないコンポーネントを入れていく</li></ul><p>他の環境と違うのは、Visual Studio（Codeじゃない方）が必要なことですね。インストーラを起動したらC++を使ったデスクトップ開発を選択してインストールします。</p><img src="/images/20220318a/スクリーンショット_2022-03-06_092832.png" alt="スクリーンショット_2022-03-06_092832.png" width="1200" height="675" loading="lazy"><p>今回の検証ではなくてもよいのですが、IDEとしてはAndroid Studioが便利なのでそれも入れました。FlutterとDartのプラグインも入れます。全部緑色になると気持ち良いですね。</p><img src="/images/20220318a/image.png" alt="Visual Studioインストール" width="1200" height="311" loading="lazy"><h1 id="Windowsデスクトップの有効化"><a href="#Windowsデスクトップの有効化" class="headerlink" title="Windowsデスクトップの有効化"></a>Windowsデスクトップの有効化</h1><p>CLI上でflutterコマンドを使って有効化します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ flutter config --enable-windows-desktop</span><br><span class="line">Setting <span class="string">&quot;enable-windows-desktop&quot;</span> value to <span class="string">&quot;true&quot;</span>.</span><br><span class="line"></span><br><span class="line">You may need to restart any open editors <span class="keyword">for</span> them to <span class="built_in">read</span> new settings.</span><br></pre></td></tr></table></figure><p>既存のプロジェクトでは次のコマンドでWindowsデスクトップのターゲットを追加できます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; flutter create --platforms=windows .</span><br><span class="line">Recreating project ....</span><br><span class="line">:</span><br><span class="line">All <span class="keyword">done</span>!</span><br><span class="line">In order to run your application, <span class="built_in">type</span>:</span><br><span class="line"></span><br><span class="line">  $ <span class="built_in">cd</span> .</span><br><span class="line">  $ flutter run</span><br><span class="line"></span><br><span class="line">Your application code is <span class="keyword">in</span> .\lib\main.dart.</span><br></pre></td></tr></table></figure><h1 id="プロジェクトの作成とビルド"><a href="#プロジェクトの作成とビルド" class="headerlink" title="プロジェクトの作成とビルド"></a>プロジェクトの作成とビルド</h1><p>Android Studioでプロジェクトを作ります。New Flutter Pojectでプロジェクトを作成します。僕はターゲットの追加でLinuxとかmacOSも試しに追加してみたのでいろいろプラットフォームが多いですが、いくらつけてもAndroid Studio上で選択できるわけではありません。クロスコンパイルとかできると便利なんですけどね。</p><img src="/images/20220318a/image_2.png" alt="Android Studioプロジェクト作成" width="862" height="660" loading="lazy"><p>プロジェクトができたら、上段から<code>Windows (Desktop)</code>を選んで実行すればWindowsのアプリがビルドされます。</p><img src="/images/20220318a/image_3.png" alt="Windows (Desktop)の選択" width="462" height="203" loading="lazy"><p>サンプルにテキストフィールドだけ追加してみた感じのものがこちらです。何事もなく普通ですね。IMEも普通に使える。<code>flutter build windows</code>でプロダクションビルドをしてみました。</p><p>Qt(Widgets)だとランタイム入れて50MBぐらいになったと思うのですが、<code>build/Release/runner</code>だと21MBですね。フォントが1.5MB、アイコンが280KB、ランタイムが14MB、app.soというDartコードをビルドして作られたモジュールらしきものが4MB。ランチャーが75KB。zip圧縮すると8MBぐらいなので配布も楽勝ですね。Electronだと展開後は数100MB、圧縮しても1環境ごとに50MB（macOSのユニバーサルバイナリとかWindowsの32/64ビット両対応をやると2倍）なので1/10ぐらい。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ du -h</span><br><span class="line">1.9M    ./data/flutter_assets</span><br><span class="line">6.5M    ./data</span><br><span class="line">21M     .</span><br></pre></td></tr></table></figure><img src="/images/20220318a/image_4.png" alt="デモ画面" width="750" height="478" loading="lazy"><p>リソース使用量はかなり少ないですね。GPUはモバイルのRyzen 4900HSの内蔵GPUなのでそこまで強いわけじゃないですが、負荷はかなり小さいです。メモリ使用量もQt並み。そのうちソフトウェアの二酸化炭素排出量が・・・みたいな話になったらFlutterは良さそう。</p><img src="/images/20220318a/image_5.png" alt="PCリソース利用量" width="1200" height="178" loading="lazy"><h1 id="ついでにLinuxのコードも見てみる"><a href="#ついでにLinuxのコードも見てみる" class="headerlink" title="ついでにLinuxのコードも見てみる"></a>ついでにLinuxのコードも見てみる</h1><p>安定版になったのはWindowsだけですが、Linuxも興味本位で覗いてみました。ビルド設定ファイルを見ると、GTKを使っていているようですね。GLFWでOpenGLベースのものも選べると。GTKなのでUbuntuとかのLinuxデスクトップであればIME対応も問題なさそうです。</p><p><a href="https://github.com/flutter/engine">https://github.com/flutter/engine</a></p><figure class="highlight sh"><figcaption><span>/main/shell/platform/linux/BUILD.gn</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">group(<span class="string">&quot;linux&quot;</span>) &#123;</span><br><span class="line">  deps = [</span><br><span class="line">    <span class="string">&quot;:flutter_linux_gtk&quot;</span>,</span><br><span class="line">    <span class="string">&quot;:publish_headers_linux&quot;</span>,</span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">if</span> (build_glfw_shell) &#123;</span><br><span class="line">    deps += [</span><br><span class="line">      <span class="string">&quot;:flutter_linux_glfw&quot;</span>,</span><br><span class="line">      <span class="string">&quot;//flutter/shell/platform/glfw:publish_headers_glfw&quot;</span>,</span><br><span class="line">      <span class="string">&quot;//flutter/shell/platform/glfw/client_wrapper:publish_wrapper_glfw&quot;</span>,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ライブラリ対応"><a href="#ライブラリ対応" class="headerlink" title="ライブラリ対応"></a>ライブラリ対応</h1><p>なお、Flutterのライブラリはマルチプラットフォーム対応はパッケージごとにだいぶ差がありますし、Windowsデスクトップ対応はその中でもかなり少ないです。例えば、人気のWebViewのパッケージの<a href="https://pub.dev/packages/webview_flutter">webview_flutter</a>とか<a href="https://pub.dev/packages/flutter_inappwebview">flutter_inappwebview</a>は非対応ですが、flutter.dev公式の<a href="https://pub.dev/packages/webview_flutter_platform_interface">webview_flutter_platform_interface</a>なんかもでてきていて、ちょっとずつ使えるライブラリなんかも増えていくんじゃないかなと思います。</p><h1 id="他のフレームワークとの比較"><a href="#他のフレームワークとの比較" class="headerlink" title="他のフレームワークとの比較"></a>他のフレームワークとの比較</h1><p>QtとかElectronだと、ウインドウとは独立して「アプリケーション」やら「メインプロセス」といったものがあり、ウインドウはその付属物という世界観となっています。DelphiとかWin32の直利用とかもみんなそうですね。なので1つのアプリケーションで多数のウィンドウを持つMDIみたいなのもあったりはしますが、Flutterは元々がモバイルの世界観なのか、アプリケーション==ウインドウというところはちょっと違うなという感じがありますが、それはまあそういうもんだな、という感じで受け入れられそうな気はします。</p><p>Visual Studioだけじゃなくて、QtみたいにWindows SDKも使えたり、クロスプラットフォームビルドもできたりするといいのになぁ、と思ったりはしますが、なにより、使いやすい言語で開発できて、クロスプラットフォームでAndroidやiOSにも展開できて、というのは魅力的です。類似のソリューションもいくつかありますが、バイナリも小さくメモリ使用量も少ないところがよさそうですね。<a href="https://tauri.studio/docs/about/intro">Tauri</a>も面白そうですけどね。</p><p>ウェブサービスを開発しつつ、コンパニオンアプリをモバイルのついでにデスクトップ版も作るよ、というケースや、長時間動かしたあとの安定性とかはわかりませんがキオスク端末とかのWindows IoTみたいな長く使うOS環境で少ないメモリで動かすには良いかもしれません。</p><h1 id="タスクトレイ常駐型アプリを作ってみる"><a href="#タスクトレイ常駐型アプリを作ってみる" class="headerlink" title="タスクトレイ常駐型アプリを作ってみる"></a>タスクトレイ常駐型アプリを作ってみる</h1><p>ほとんどのシステムがウェブブラウザをインタフェースとして利用するウェブアプリケーションという時代にあって、ローカルでアプリケーションをわざわざ作る理由というのは、単体アプリケーションとして使えるほうが便利というもの以外に、システムに統合される便利UIを追加で提供する、みたいな理由があります。例えば、Google Driveはデスクトップ版のツールを入れたりするとローカルとの同期を取ったりできますし、AdobeやJetBrainsはアプリケーションの更新をダウンロードするインタフェースとして常駐プログラムを提供していたりします。</p><p>Flutterは使用するリソースがマルチプラットフォームな環境の割には少なそうなので、この手の常駐アプリにはよさそうです。常駐アプリでリソースを食いまくるのはみんな嫌がりますしね。</p><p>まず、Flutterはアプリ＝ウインドウ＝アクティブなので、ウインドウ非表示のままアプリを実行し続けるということがデフォルトではできません。そこは、パッケージの<a href="https://pub.dev/documentation/bitsdojo_window/latest/">bitsdojo_window</a>の力を借りる必要があります。また、システムトレイは[system_tray(<a href="https://pub.dev/packages/system_tray)%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F%E3%80%82%E3%81%93%E3%81%A1%E3%82%89%E3%81%AF%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%83%88%E3%83%AC%E3%82%A4%E3%81%AB%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%97%E3%81%A4%E3%81%A4%E3%80%81%E3%82%B3%E3%83%B3%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%83%A1%E3%83%8B%E3%83%A5%E3%83%BC%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%97%E3%81%9F%E3%82%8A%E3%80%81%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%82%92%E5%8B%95%E7%9A%84%E3%81%AB%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%81%9F%E3%82%8A%E3%81%A8%E3%81%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99%E3%80%82">https://pub.dev/packages/system_tray)を利用しました。こちらはシステムトレイにアイコンを表示しつつ、コンテキストメニューを表示したり、アイコンを動的に切り替えたりといったことができます。</a></p><p>今回はWindowsに特化して説明しますが、各ライブラリはmacOSやLinuxにも対応しています。そちらは紹介しませんので興味のある方はそれぞれのライブラリのドキュメントを参照してください。</p><p>まずライブラリを追加します。</p><figure class="highlight yaml"><figcaption><span>pubspec.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">system_tray:</span> <span class="string">^0.1.0</span></span><br><span class="line">  <span class="attr">bitsdojo_window:</span> <span class="string">^0.1.1+1</span></span><br></pre></td></tr></table></figure><p>まずは、bitsdojo_window側からやっていきます。WindowsであればWindows用のmain.cppの先頭に次の2行を足します。これでデフォルトでウインドウが非表示になります。サンプルだとCUSTOM_FRAMEだかもつけていますが、これをするとウインドウタイトルが消えて終了が面倒なので消しました。</p><figure class="highlight cpp"><figcaption><span>windows/runner/main.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitsdojo_window_windows/bitsdojo_window_plugin.h&gt;</span></span></span><br><span class="line"><span class="keyword">auto</span> bdw = <span class="built_in">bitsdojo_window_configure</span>(BDW_HIDE_ON_STARTUP);</span><br></pre></td></tr></table></figure><p>ウインドウが表示される際のサイズなどを設定します。サンプルだと最後にappWindow.show()をしていますが、常駐なのでそこの行は消しました。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:bitsdojo_window/bitsdojo_window.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line"></span><br><span class="line">  doWhenWindowReady(() &#123;</span><br><span class="line">    <span class="keyword">final</span> initialSize = Size(<span class="number">600</span>, <span class="number">450</span>);</span><br><span class="line">    appWindow.minSize = initialSize;</span><br><span class="line">    appWindow.size = initialSize;</span><br><span class="line">    appWindow.alignment = Alignment.center;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この後はappWindow経由でウインドウを消したり表示したりができます。</p><p>次にsystem_tray周りのコードを追加します。まずはimportを足します。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:system_tray/system_tray.dart&#x27;</span>;</span><br></pre></td></tr></table></figure><p>ウインドウのステートのクラス、あるいはstatelessであればそのウィジェットそのものに以下のコードを足します。ここではコンテキストメニューは消していますが、サンプルにはコンテキストメニューの使い方もあります。ここはクリックされたらウインドウを表示しているだけですが、本来ならメインウインドウの閉じるが押されたらhide()する、表示時にアイコンをクリックしたらhide()するといったコードも必要でしょう（前者をどうやるかはまだ調べてません）。</p><figure class="highlight dart"><figcaption><span>main.dart</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@overrideclass</span> _MyHomePageState <span class="keyword">extends</span> State&lt;MyHomePage&gt; &#123;</span><br><span class="line"><span class="keyword">final</span> SystemTray _systemTray = SystemTray(); <span class="comment">// システムトレイ</span></span><br><span class="line"><span class="keyword">final</span> AppWindow _appWindow = AppWindow();    <span class="comment">// ウインドウ表示で使う</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> initState() &#123;</span><br><span class="line">  <span class="keyword">super</span>.initState();</span><br><span class="line">  initSystemTray();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Future&lt;<span class="keyword">void</span>&gt; initSystemTray() <span class="keyword">async</span> &#123;</span><br><span class="line">  <span class="built_in">String</span> path = <span class="string">&#x27;assets/idea.ico&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> _systemTray.initSystemTray(</span><br><span class="line">    title: <span class="string">&quot;system tray&quot;</span>,</span><br><span class="line">    iconPath: path,</span><br><span class="line">    toolTip: <span class="string">&quot;How to use system tray with Flutter&quot;</span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  _systemTray.registerSystemTrayEventHandler((eventName) &#123;</span><br><span class="line">    <span class="keyword">if</span> (eventName == <span class="string">&quot;leftMouseDown&quot;</span>) &#123;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (eventName == <span class="string">&quot;leftMouseUp&quot;</span>) &#123;</span><br><span class="line">      _appWindow.<span class="keyword">show</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>アイコンはこちら↓のを使わせていただいております。Creative Commons By-SAです。いつも通り、pubspec.yamlにアセットとして追加します。</p><p><a href="https://www.flaticon.com/free-icons/professions-and-jobs">Professions and jobs icons created by Yogi Aprelliyanto - Flaticon</a></p><p>ビルドして動かしてみると、以下のようにアイコンがトレイに表示され、クリックしたら表示されることがわかります。</p><img src="/images/20220318a/image_6.png" alt="アイコン" width="229" height="104" loading="lazy"><p>うまく用途にあうニーズが見つけられればFlutterでやろう！というのは説得できそうな感じがします。使えるチャンスをうかがっていきたいですね。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Flutter/">Flutter</category>
      
      <category domain="https://future-architect.github.io/tags/Windows/">Windows</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%87%E3%82%B9%E3%82%AF%E3%83%88%E3%83%83%E3%83%97%E3%82%A2%E3%83%97%E3%83%AA/">デスクトップアプリ</category>
      
      
      <comments>https://future-architect.github.io/articles/20220318a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>VSCode DevToolsによるWidget Buildタイムラインの確認</title>
      <link>https://future-architect.github.io/articles/20220317a/</link>
      <guid>https://future-architect.github.io/articles/20220317a/</guid>
      <pubDate>Wed, 16 Mar 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。TIGの藤田です。&lt;br&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIGの藤田です。<br><a href="/articles/20220315a/">Dart/Flutter連載</a> の2日目として、VSCodeの<a href="https://docs.flutter.dev/development/tools/devtools/overview">DevTools</a>を使用したWidget Buildの可視化についてご紹介します。</p><p>Flutterアプリの開発では、Widgetのビルド単位を考えてコードを記述/改修すると思います。<br><a href="https://docs.flutter.dev/development/tools/android-studio#show-performance-data">AndroidStudioのPerformance機能</a>を使ってWidgetのリビルドを確認している例は見かけるのですが、VSCodeでの確認方法を見かけなかったため調べてみました。予想以上に高機能で、今回使わなかった機能も含めて活用どころがありそうです。</p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>１. <a href="#vscode-dart-devtools">VSCode Dart DevTools</a><br>２. <a href="#widget-build%E3%82%92%E3%82%BF%E3%82%A4%E3%83%A0%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%A7%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B">Widget Buildをタイムラインで確認する</a><br>３. <a href="#%E5%AE%9F%E8%A3%85%E3%81%AEwidget-build%E3%81%B8%E3%81%AE%E5%BD%B1%E9%9F%BF%E3%82%92%E7%A2%BA%E8%AA%8D">実装のWidget Buildへの影響を確認</a></p><h1 id="VSCode-Dart-DevTools"><a href="#VSCode-Dart-DevTools" class="headerlink" title="VSCode Dart DevTools"></a>VSCode Dart DevTools</h1><p>Flutter公式の<a href="https://docs.flutter.dev/development/tools/devtools/overview">DevTools</a>は、VSCodeの<a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.dart-code">Dart Extension</a>, <a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter">Flutter Extension</a>のインストールと共にインストールされます。レイアウト構造を可視化/編集できる<a href="https://docs.flutter.dev/development/tools/devtools/inspector">Flutter Inspector</a> がよく使われると思いますが、他にもCPUやメモリ、Networkの可視化など多機能です。今回は、<a href="https://docs.flutter.dev/development/tools/devtools/performance">Performance view</a>機能を使ってWidget Buildをタイムラインで確認してみます。</p><h1 id="Widget-Buildをタイムラインで確認する"><a href="#Widget-Buildをタイムラインで確認する" class="headerlink" title="Widget Buildをタイムラインで確認する"></a>Widget Buildをタイムラインで確認する</h1><ol><li>devTools起動: <a href="https://docs.flutter.dev/development/tools/devtools/vscode">公式手順</a>に従って、アプリの起動後にDevToolsを起動します。</li><li>DevToolsのPerformanceタブを開きます。<img src="/images/20220317a/performance_tab.png" alt="performance_tab.png" width="1200" height="355" loading="lazy"></li><li>「Enhance Tracing」から、Widget Builds, Layouts, PaintsをTrackするように設定します。<img src="/images/20220317a/EnhanceTracing.png" alt="EnhanceTracing.png" width="797" height="262" loading="lazy"></li><li>アプリを実行すると、タイムラインにFrameごとの処理時間が表示されます（#１）。Frame Time(UI)は、Dart VM内でビルドされるLayer treeと描画コマンドを含む軽量オブジェクトの作成時間を表しています。これらオブジェクトがGPUに渡されることでレンダリングが行われ、その実行時間が、Frame Time(Raster)になります。</li><li>バーグラフをクリックすると、UIイベント, Raster(GPU)イベントそれぞれの内訳を確認することができます。UIイベントは、実装Dartコードを直接反映していて、Widgetレベルで実行イベントを確認できます。（#2）</li><li>Raster(GPU)イベント（#3）は、UIイベントから作成されます。アプリのパフォーマンスを考える上では、UIグラフに課題がなくても、GPUグラフに課題があることもあります。</li><li>「Performance Overlay」ボタン（#4）をONにすると、アプリ画面に重ねる形で、UIグラフとGPUグラフを確認できます。</li></ol><p>【補足】 公式ページに紹介される<a href="https://docs.flutter.dev/perf/rendering/ui-performance#diagnosing-performance-problems">パフォーマンス診断</a>では、UIスレッドとGPUスレッドのプロファイルから実装に落とし込んで対処することを説明しており、実機を使用した<a href="https://docs.flutter.dev/testing/build-modes#profile">profile mode</a>にて行うことを前提としています。今回はiOSシミュレータにて、DevToolsの使い方と、ソースコードがプロファイルに与える影響の確認方法を見てみたいと思います。</p><img src="/images/20220317a/image.png" alt="image.png" width="963" height="749" loading="lazy"><h1 id="実装のWidget-Buildへの影響を確認"><a href="#実装のWidget-Buildへの影響を確認" class="headerlink" title="実装のWidget Buildへの影響を確認"></a>実装のWidget Buildへの影響を確認</h1><p>例として、アニメーションの実装方法によるWidget Buildパタンの違いをタイムラインで確認します。今回はiOSシミュレータ（iPhone 13）を使用しています。</p><p>１） 全体ビルド（アンチパタン）<br>bodyのアニメーションのためにsetState()することで、レイアウト全体をビルドしてしまっています。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(App());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Page(),</span><br><span class="line">      checkerboardOffscreenLayers: <span class="keyword">true</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  PageState createState() =&gt; PageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Page</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">late</span> <span class="keyword">final</span> _controller = AnimationController(vsync: <span class="keyword">this</span>, duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">    _controller.addListener(() =&gt; setState(() &#123;&#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&#x27;test animation&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Opacity(</span><br><span class="line">          opacity: _controller.value,</span><br><span class="line">          child: Image.asset(<span class="string">&#x27;assets/dash.png&#x27;</span>),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          _controller</span><br><span class="line">            ..reset()</span><br><span class="line">            ..forward();</span><br><span class="line">        &#125;,</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.refresh),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>画面はこのようになります。Overlayされたグラフの上段がRaster(GPU)スレッド, 下段がUIスレッドを表しています。16msおきに補助ラインが引かれていますが、<a href="https://docs.flutter.dev/perf/rendering/ui-performance#interpreting-the-graphs">おおよそ16msを超えるFrameは描画されずにJankとなります</a>。UIスレッド側に多くのJankが見られることから、この実装には課題がありそうだと分かります。</p><img src="/images/20220317a/83854e5c-c719-6331-6f55-ef03e48c3359.gif" alt="" width="560" height="2000" loading="lazy"><p>Frame実行時間のタイムラインを見ても、UIグラフに赤色のJank（slow frame）が多くなっています。<br><img src="/images/20220317a/test1.png" alt="test1.png" width="1200" height="141" loading="lazy"></p><p>UIイベントの内訳を見てみましょう。連続する2Frameをクローズアップしていますが、アニメーションには関係のないAppBarやFloatingActionButtonも、Frame毎にビルドしてしまっていることが分かります。今回はビルド対象が小さいですが、対象が大きければ更にコストがかかりそうです。</p><img src="/images/20220317a/test1_ui.png" alt="test1_ui.png" width="1200" height="457" loading="lazy"><p>GPUイベントも確認してみます。こちらは、赤いグラフが見られなかったことからも大きな課題はなさそうです。</p><img src="/images/20220317a/test1_raster.png" alt="test1_raster.png" width="1200" height="339" loading="lazy"><p>２） コードの改善<br>Frame毎のビルド範囲をアニメーション部分に限定するには<a href="https://api.flutter.dev/flutter/widgets/AnimatedBuilder-class.html">AnimatedBuilder</a>等を用いる方法があります。ただし今回のケースは、以下のように<a href="https://api.flutter.dev/flutter/widgets/Image-class.html">Image</a> widgetを使用することで、Frame毎のビルドをなくすことができます。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(App());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Page(),</span><br><span class="line">      checkerboardOffscreenLayers: <span class="keyword">true</span>,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  PageState createState() =&gt; PageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Page</span>&gt; <span class="title">with</span> <span class="title">TickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">late</span> <span class="keyword">final</span> _controller = AnimationController(vsync: <span class="keyword">this</span>, duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>));</span><br><span class="line">  <span class="keyword">late</span> <span class="keyword">final</span> _animation = CurvedAnimation(parent: _controller, curve: Curves.easeIn);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> initState() &#123;</span><br><span class="line">    <span class="keyword">super</span>.initState();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: <span class="keyword">const</span> Text(<span class="string">&#x27;test animation&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: Image.asset(</span><br><span class="line">          <span class="string">&#x27;assets/dash.png&#x27;</span>,</span><br><span class="line">          opacity: _animation,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">      floatingActionButton: FloatingActionButton(</span><br><span class="line">        onPressed: () &#123;</span><br><span class="line">          _controller</span><br><span class="line">            ..reset()</span><br><span class="line">            ..forward();</span><br><span class="line">        &#125;,</span><br><span class="line">        child: <span class="keyword">const</span> Icon(Icons.refresh),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>アプリ画面は以下になります。下段UIスレッドから、Jankがほぼなくなりました。少し見にくいですが、各グラフに平均実行時間が表示されていて、GPUスレッドは5.4ms/frame, UIスレッドは7.9ms/frameとなっています。（改修前は、GPUスレッドが4.1ms/frame, UIスレッドが19.7ms/frameでした。）<br><img src="/images/20220317a/5538b10a-158a-bd17-b27f-09f0f4c22222.gif" alt="" width="480" height="1000" loading="lazy"></p><p>Frame実行時間のタイムラインを見ても、UIグラフに赤色のJank（slow frame）が見られません。平均43FPSとなっており、改修前の28FPSより改善しています。<br><img src="/images/20220317a/test4.png" alt="test4.png" width="1200" height="129" loading="lazy"></p><p>UIイベントの内訳を見てみると、Frame毎の「Build」処理自体がなくなっていることが分かります。<br><img src="/images/20220317a/test4_ui.png" alt="test4_ui.png" width="1200" height="455" loading="lazy"></p><p>GPUイベントについては、画面Overlayグラフからもわかるように、改修前より少し実行時間が増えていますが、Jankは見られず課題はなさそうです。<br><img src="/images/20220317a/test4_raster.png" alt="test4_raster.png" width="1200" height="320" loading="lazy"></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>VSCodeのDevToolsを使って、Dart VM上のDartコード実行によるビルド（UIスレッド）と、GPU上のレンダリング(Rasterスレッド)のFrame毎の実行時間をタイムラインで可視化できます。</li><li>Jank　Frameを１つの指標として、UIスレッド(Dartコード)の内訳を確認することで、実装コードの改善に利用できます。</li><li>効果的なパフォーマンス改善には、他の観点も必要となります。<ul><li>I/O処理（IOスレッド）は、パフォーマンス上コストが高くUIスレッドやGPUスレッドをブロックするため、その考慮が必要。</li><li>CPUやメモリメトリクスの考慮（DevToolsのうち、今回取り上げていない機能）</li><li>実機（ユーザーが使用し得る一番遅いデバイス）での確認</li></ul></li><li>パフォーマンス改善については、<a href="https://docs.flutter.dev/perf">公式ページ</a>も参考に、今回紹介できなかった機能も活用していきたいところです。</li></ul><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><ul><li><a href="https://docs.flutter.dev/perf/rendering">Improving rendering performance</a><ul><li>Flutter公式サイトにおける、レンダリングパフォーマンスのページ。</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Flutter/">Flutter</category>
      
      <category domain="https://future-architect.github.io/tags/VSCode/">VSCode</category>
      
      
      <comments>https://future-architect.github.io/articles/20220317a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Class Widgets vs Functional Widgets</title>
      <link>https://future-architect.github.io/articles/20220316a/</link>
      <guid>https://future-architect.github.io/articles/20220316a/</guid>
      <pubDate>Tue, 15 Mar 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220316a/logo_lockup_flutter_horizontal.png&quot; alt=&quot;&quot; width=&quot;700&quot; height=&quot;196&quot;&gt;


&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220316a/logo_lockup_flutter_horizontal.png" alt="" width="700" height="196"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="https://future-architect.github.io/articles/20220315a/">Dart/Flutter連載</a> の2本目です</p><p>FlutterでWidgetを開発するとき、Stateless WidgetやStateful Widgetを継承したクラスを作成することが一般的だと思います。一方でクラスを定義せずとも、Widgetを返却するFunctionを定義することで同様のことが実現できるのでは？と考えたことはないでしょうか。</p><p>本記事では前者をClass Widget, 後者をFunctional Widgetと称して以下説明をしていきます。</p><p>簡単なサンプルを示してみましょう。</p><h3 id="Class-Widget"><a href="#Class-Widget" class="headerlink" title="Class Widget"></a>Class Widget</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> SampleWidget(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      child: Text(<span class="string">&#x27;hello&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Functional-Widget"><a href="#Functional-Widget" class="headerlink" title="Functional Widget"></a>Functional Widget</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Widget sampleWidget() &#123;</span><br><span class="line">  <span class="keyword">return</span> Container(</span><br><span class="line">    child: Text(<span class="string">&#x27;hello&#x27;</span>),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>恐らく多くの方がFunctional Widgetはあまり良くないと思っていると思いますが、その理由を明確に説明できるでしょうか。</p><p>本記事では、2つの違いや使い分けについて整理したいと思います。</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>Flutterが公式に公開している動画でも本件について触れられており、パフォーマンス最適化や予期せぬバグの回避、テスタビリティ（本記事では割愛しています）という観点で Class Widgetの利用が推奨されています。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/IOyq-eTRhvo" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><h2 id="2つの違い"><a href="#2つの違い" class="headerlink" title="2つの違い"></a>2つの違い</h2><p>冒頭のサンプルで記述したClass WidgetとFunctional Widgetをそれぞれ利用した場合、アプリケーションの見た目はどちらも変わりません。<br>２つの一番の違いは生成されるWidgetツリーの構造です。それぞれのWidgetツリーは次のようになります。</p><h3 id="Class-Widget-1"><a href="#Class-Widget-1" class="headerlink" title="Class Widget"></a>Class Widget</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ParentWidget</span><br><span class="line">　　└─ SampleWidget</span><br><span class="line">　　　　　　　　　　└─ Container</span><br><span class="line">　　　　　　　　　　　　　　　　　　└─ Text</span><br></pre></td></tr></table></figure><h3 id="Functional-Widget-1"><a href="#Functional-Widget-1" class="headerlink" title="Functional Widget"></a>Functional Widget</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ParentWidget</span><br><span class="line">　　└─ Container</span><br><span class="line">　　　　　　　　　　└─ Text</span><br></pre></td></tr></table></figure><p>Widgetツリーの構造は、FlutterがWidgetをリビルドする際の挙動に影響します。</p><p>Functional WidgetはClass Widgetに比べて、パフォーマンスが最適化されない可能性があり、また予期せぬバグが発生する可能性が高まります。</p><p>以下、具体的に説明していきましょう。</p><h2 id="具体例"><a href="#具体例" class="headerlink" title="具体例"></a>具体例</h2><h3 id="リビルドの最適化"><a href="#リビルドの最適化" class="headerlink" title="リビルドの最適化"></a>リビルドの最適化</h3><p>これは紹介した動画でも述べられている例になります。<br>下記のようにクリック時に状態を変更するようなボタンをFunctional Widgetとして切り出した場合を考えてみます。この場合、ボタンをクリックした場合には大元のWidget全体のリビルドが実行されてしまいます。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigUIElementState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">BigUIElement</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// build method is rerun when the sample button is pressed.</span></span><br><span class="line">    <span class="keyword">return</span> Stack(</span><br><span class="line">      children: [</span><br><span class="line">        <span class="comment">// Some widgets.</span></span><br><span class="line">        ...,</span><br><span class="line">        ...,</span><br><span class="line">        sampleButton(),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget sampleButton() &#123;</span><br><span class="line">    <span class="keyword">return</span> ElevatedButton(</span><br><span class="line">      onPressed: () &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          <span class="comment">// Update some states.</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      child: <span class="keyword">const</span> Text(<span class="string">&#x27;Button&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このボタンが変更する状態のスコープが限定的な場合（例えばいいねボタンの様にクリックによってボタン自身の色を変更するようなケース）は、Functional WidgetではなくStateful Widgetとして切り出した方がリビルドの範囲を限定できるため、パフォーマンスの面で優れています。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigUIElementState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">BigUIElement</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// build method is NOT rerun when the sample button is pressed.</span></span><br><span class="line">    <span class="keyword">return</span> Stack(</span><br><span class="line">      children: [</span><br><span class="line">        <span class="comment">// Some widgets.</span></span><br><span class="line">        ...,</span><br><span class="line">        ...,</span><br><span class="line">        SampleButton(),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleButton</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;StatefulWidget&gt; createState() &#123;</span><br><span class="line">   <span class="keyword">return</span> SampleButtonState();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleButtonState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SampleButton</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">     <span class="keyword">return</span> ElevatedButton(</span><br><span class="line">      onPressed: () &#123;</span><br><span class="line">        setState(() &#123;</span><br><span class="line">          <span class="comment">// Update some states.</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">      child: <span class="keyword">const</span> Text(<span class="string">&#x27;Button&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ただこの例は、状態のスコープを最小化すべきというのが主要なポイントであって、Class WidgetとFunctional Widgetの本質的な違いの例としては少しズレているように筆者は感じてしまったので、もう一つリビルドの最適化に着目した例を示しましょう。</p><h3 id="リビルドの最適化-その２"><a href="#リビルドの最適化-その２" class="headerlink" title="リビルドの最適化 その２"></a>リビルドの最適化 その２</h3><p>先ほどの例は切り出すWidgetが状態を保持する前提でしたが、下記のように状態を持たないWidgetの場合はどうでしょうか。<br>Functional Widgetの場合は<code>ParentElement</code>の状態が変わるたびに<code>sampleWidget()</code>が呼び出され、内部で返却しているWidgetが都度再生成されることになります。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentElementState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ParentElement</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Stack(</span><br><span class="line">      children: [</span><br><span class="line">        <span class="comment">// Some widgets.</span></span><br><span class="line">        ...,</span><br><span class="line">        ...,</span><br><span class="line">        sampleWidget(),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget sampleWidget() &#123;</span><br><span class="line">    <span class="comment">// Run each time when the parent widget is rebuilt.</span></span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      child: <span class="keyword">const</span> Text(<span class="string">&#x27;hello&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この場合も、Functional Widgetではなく Stateless Widgetとして切り出すことで、リビルドを最適化することができます。（const constructorが利用できることが前提となります。）<br>下記のようにStateless Widgetとして切り出した場合は<code>ParentElement</code>がリビルドされた場合でも<code>SampleWidget</code>のリビルドは実行されません。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentElementState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ParentElement</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Stack(</span><br><span class="line">      children: [</span><br><span class="line">        <span class="comment">// Some widgets.</span></span><br><span class="line">        ...,</span><br><span class="line">        ...,</span><br><span class="line">        <span class="keyword">const</span> SampleWidget(),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> SampleWidget(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      child: <span class="keyword">const</span> Text(<span class="string">&#x27;hello&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="誤ったBuild-Contextの参照"><a href="#誤ったBuild-Contextの参照" class="headerlink" title="誤ったBuild Contextの参照"></a>誤ったBuild Contextの参照</h3><p>例えば <code>Builder</code> Widgetを使用するようなコードにおいて、Build Contextの1つに任意の別の名前（ここでは innerContext）を指定すると、下層のWidgetにて古いBuild Contextを参照することができてしまいます。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Builder(builder: (innerContext) &#123;</span><br><span class="line">      <span class="keyword">return</span> sampleWidget(context);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget sampleWidget(BuildContext context) &#123;</span><br><span class="line">    <span class="comment">// This could be stale.</span></span><br><span class="line">    Theme.of(context)...</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      child: <span class="keyword">const</span> Text(<span class="string">&#x27;hello&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Class Widgetとして切り出すことでこのような予期せぬバグを防ぐことができます。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Builder(builder: (innerContext) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">const</span> SampleWidget();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> SampleWidget(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    Theme.of(context)...</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      child: <span class="keyword">const</span> Text(<span class="string">&#x27;hello&#x27;</span>),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Widget-Keyによるリビルド制御"><a href="#Widget-Keyによるリビルド制御" class="headerlink" title="Widget Keyによるリビルド制御"></a>Widget Keyによるリビルド制御</h3><p>少し無理やりな例ですが、下記のようにボタンクリックによって、四角のコンテナが円形にアニメーションする例を考えてみましょう。<br><code>circle()</code>メソッドと<code>square()</code>メソッドで返却されるWidgetはどちらも <code>Container</code> Widgetであるため、RuntimeTypeが同じであり、アニメーションがうまく機能しません。<br><a href="https://dartpad.dev/?id=ab9ef6401c4687811ea59f44adfa8ee7">https://dartpad.dev/?id=ab9ef6401c4687811ea59f44adfa8ee7</a></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ParentWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> showCircle = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        <span class="comment">// The animation does NOT work.</span></span><br><span class="line">        AnimatedSwitcher(</span><br><span class="line">          duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>),</span><br><span class="line">          child: showCircle ? circle() : square(),</span><br><span class="line">        ),</span><br><span class="line">        ElevatedButton(</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              showCircle = !showCircle;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          child: <span class="keyword">const</span> Text(<span class="string">&#x27;Click&#x27;</span>),</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget square() &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: <span class="number">50</span>,</span><br><span class="line">      height: <span class="number">50</span>,</span><br><span class="line">      color: Colors.red,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget circle() &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: <span class="number">50</span>,</span><br><span class="line">      height: <span class="number">50</span>,</span><br><span class="line">      decoration: <span class="keyword">const</span> BoxDecoration(</span><br><span class="line">        shape: BoxShape.circle,</span><br><span class="line">        color: Colors.red,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>それぞれの <code>Container</code> WidgetにKeyを指定すればうまく機能します。<br>Widget Keyの詳細は割愛しますが、気になる方は下記の記事などを参考にすると良いでしょう。<br><a href="https://qiita.com/kurun_pan/items/f91228cf5c793ec3f3cc">https://qiita.com/kurun_pan/items/f91228cf5c793ec3f3cc</a></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  Widget square() &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      key: UniqueKey(),</span><br><span class="line">      width: <span class="number">50</span>,</span><br><span class="line">      height: <span class="number">50</span>,</span><br><span class="line">      color: Colors.red,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget circle() &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      key: UniqueKey(),</span><br><span class="line">      width: <span class="number">50</span>,</span><br><span class="line">      height: <span class="number">50</span>,</span><br><span class="line">      decoration: <span class="keyword">const</span> BoxDecoration(</span><br><span class="line">        shape: BoxShape.circle,</span><br><span class="line">        color: Colors.red,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このような予期せぬ不具合もClass Widgetとして切り出しておけば WidgetのKeyを意識せずとも未然に防ぐことが可能です。<br><a href="https://dartpad.dev/?id=a69d57ea09802753676a46efc8390d15">https://dartpad.dev/?id=a69d57ea09802753676a46efc8390d15</a></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ParentWidget</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">bool</span> showCircle = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        AnimatedSwitcher(</span><br><span class="line">          duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">1</span>),</span><br><span class="line">          child: showCircle ? <span class="keyword">const</span> Circle() : <span class="keyword">const</span> Square(),</span><br><span class="line">        ),</span><br><span class="line">        ElevatedButton(</span><br><span class="line">          onPressed: () &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              showCircle = !showCircle;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          child: <span class="keyword">const</span> Text(<span class="string">&#x27;Click&#x27;</span>),</span><br><span class="line">        )</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Square(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: <span class="number">50</span>,</span><br><span class="line">      height: <span class="number">50</span>,</span><br><span class="line">      color: Colors.red,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Circle(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container(</span><br><span class="line">      width: <span class="number">50</span>,</span><br><span class="line">      height: <span class="number">50</span>,</span><br><span class="line">      decoration: <span class="keyword">const</span> BoxDecoration(</span><br><span class="line">        shape: BoxShape.circle,</span><br><span class="line">        color: Colors.red,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使い分け"><a href="#使い分け" class="headerlink" title="使い分け"></a>使い分け</h2><p>ここまでみてきた通り、基本的には原則Class Widgetを利用する形が良いでしょう。</p><p>ただしFunctional Widgetそれ自体が問題を引き起こすものではなく、リファクタを目的としたプライベートなFunctional Widgetであれば、Functional Widgetの方がスマートに記述できるシーンがあると考えています。</p><p>下記のように、Widget自体が分岐によって切り替わるようなケースにおいて、<code>build</code>メソッド内が肥大化しているため、Switchのロジックを切り出したくなったとします。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ParentWidget(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.someType&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> someType;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        <span class="comment">// Some widgets.</span></span><br><span class="line">        ...,</span><br><span class="line">        ...,</span><br><span class="line">        () &#123;</span><br><span class="line">          <span class="keyword">switch</span> (someType) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">              <span class="keyword">return</span> WidgetA();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">              <span class="keyword">return</span> WidgetB();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">              <span class="keyword">return</span> WidgetC();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">const</span> SizedBox.shrink();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;()</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このような場合は、Class Widgetではなく Functional Widgetの方がより簡潔にかつ分かりやすく記述できるのではないでしょうか。</p><p><strong>Class Widget</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ParentWidget(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.someType&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> someType;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        <span class="comment">// Some widgets.</span></span><br><span class="line">        ...,</span><br><span class="line">        ...,</span><br><span class="line">        SwitchWidget(someType: someType),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwitchWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ParentWidget(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.someType&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> someType;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (someType) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> WidgetA();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> WidgetB();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> WidgetC();</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">const</span> SizedBox.shrink();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Functional Widget</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ParentWidget(&#123;Key? key, <span class="keyword">required</span> <span class="keyword">this</span>.someType&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> someType;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        <span class="comment">// Some widgets.</span></span><br><span class="line">        ...,</span><br><span class="line">        ...,</span><br><span class="line">        _switchWidget(),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Widget _switchWidget() &#123;</span><br><span class="line">    <span class="keyword">switch</span> (someType) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> WidgetA();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> WidgetB();</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> WidgetC();</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">const</span> SizedBox.shrink();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このようにSwitchや三項演算子などにより、既にClass Widgetとして定義されているWidgetを返却するためのロジックのみを切り出したいような場合（言い換えればFunuctional Widget自体が構造化されたWidgetを定義せず、Privateな関数として広く再利用されないような場合）は　Functional Widgetの利用を許容しても良い気がしています。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>原則Class Widgetの利用が推奨されるべきであり、開発時のルールとしてFunctional Widgetは禁止にして問題ないと思います。<br>ただ最後に記述したとおり、Functional Widgetを使いたくなるようなシーンがいくつかあるような気がしており、（筆者もうまく明文化ができていないですが）そのようなケースが他にもあればコメントいただけますと幸いです。</p><h2 id="参考記事"><a href="#参考記事" class="headerlink" title="参考記事"></a>参考記事</h2><ul><li><a href="https://stackoverflow.com/questions/53234825/what-is-the-difference-between-functions-and-classes-to-create-reusable-widgets">https://stackoverflow.com/questions/53234825/what-is-the-difference-between-functions-and-classes-to-create-reusable-widgets</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/">設計</category>
      
      <category domain="https://future-architect.github.io/tags/Flutter/">Flutter</category>
      
      
      <comments>https://future-architect.github.io/articles/20220316a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Dart/Flutter連載2022始めます</title>
      <link>https://future-architect.github.io/articles/20220315a/</link>
      <guid>https://future-architect.github.io/articles/20220315a/</guid>
      <pubDate>Mon, 14 Mar 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220315a/logo_flutter.png&quot; alt=&quot;logo_flutter.png&quot; width=&quot;700&quot; height=&quot;196&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220315a/logo_flutter.png" alt="logo_flutter.png" width="700" height="196" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/articles/20210510a/">2021年</a>に引き続き、本年もDart/Flutterをテーマにした連載を始めます！</p><p>Flutterといえば、国内外問わず採用事例が増えてきており、クロスプラットフォームのフレームワークの人気度もここ数年は上がってきていますよね。</p><img src="/images/20220315a/chart.png" alt="人気グラフ" width="724" height="450" loading="lazy"><p><a href="https://www.statista.com/statistics/869224/worldwide-software-developer-working-hours/">https://www.statista.com/statistics/869224/worldwide-software-developer-working-hours/</a> より</p><p>また、<a href="https://www.publickey1.jp/blog/22/flutter_for_windowsflutter_210iosandroidwebwindows.html">Flutter for Windowsが正式版に、「Flutter 2.10」リリース。単一コードでiOS/Android/Web/Windowsアプリが可能に</a> といった記事が話題に上がりましたが、Windowsの正式サポートも始まりました。こちらについても連載で触れていきたいと思います。Dart自体は<a href="https://dart.dev/guides/whats-new#february-3-2022-216-release">2022/2/3に2.16がリリース</a>されました。2.17も3,4月に公開されそうなので待ち遠しいですね。</p><h1 id="スケジュール"><a href="#スケジュール" class="headerlink" title="スケジュール"></a>スケジュール</h1><p>有志で募集したところ、あっという間に手を上げていただき集まったメンバーで連載をいたします。</p><div class="scroll"><table><thead><tr><th>Date</th><th>Author</th><th>Title</th></tr></thead><tbody><tr><td>3/16 水</td><td>武田</td><td><a href="/articles/20220316a/">Class Widgets vs Functional Widgets</a></td></tr><tr><td>3/17 木</td><td>藤田</td><td><a href="/articles/20220317a/">VSCode DevToolsによるWidget Buildタイムラインの確認</a></td></tr><tr><td>3/18 金</td><td>澁川</td><td><a href="/articles/20220318a/">Flutter Windows開発を試す</a></td></tr><tr><td>3/21 月</td><td>岸下</td><td>Tensorflow Liteを使ったモバイル端末推論</td></tr><tr><td>3/22 火</td><td>宮崎</td><td>Flutter FlowかBuildContext</td></tr><tr><td>3/23 水</td><td>越島</td><td></td></tr><tr><td>3/24 木</td><td>村田</td><td>WeakReferenceかenum</td></tr><tr><td>3/25 金</td><td>真野</td><td>GraphQL</td></tr></tbody></table></div><p>社内でも採用事例が如実に増えだした、Flutter。より実践的な内容を共有する記事も昨年比で増えてきたと思います。</p><p>引き続きお願いします！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/Flutter/">Flutter</category>
      
      <category domain="https://future-architect.github.io/tags/Dart/">Dart</category>
      
      
      <comments>https://future-architect.github.io/articles/20220315a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Future Tech Night #19 CodePipelineを用いたECS on EC2でのBlue/Greenデプロイメント</title>
      <link>https://future-architect.github.io/articles/20220314a/</link>
      <guid>https://future-architect.github.io/articles/20220314a/</guid>
      <pubDate>Sun, 13 Mar 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220314a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;449&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220314a/top.png" alt="" width="800" height="449"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>2019年新卒入社筋肉エンジニアの渡邉光です。</p><p>2022年1月28日に<a href="https://future.connpass.com/event/236138/">Future Tech Night #19 AWS CodePipelineと新聞向けCMS構築事例</a>を開催しました。こちらの勉強会で「<strong>CodePipelineを用いたECS on EC2でのBlue/Greenデプロイメント</strong>」というテーマで発表させていただきました。</p><h1 id="発表の概要"><a href="#発表の概要" class="headerlink" title="発表の概要"></a>発表の概要</h1><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/d674a2342857499185e80b1ceb1f46da" title="CodePipelineを用いたECS on EC2でのBlue/Greenデプロイメント" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 314px;" data-ratio="1.78343949044586"></iframe><p>発表の経緯として所属プロジェクトでECS on EC2を採用していたこと、パイプライン構築時にはまったことや知見を共有できるのではないかと考えて本テーマについて発表しました。</p><p>内容としては、そもそもBlue/Greenデプロイメントってどんなデプロイ方法なのか、ECSでのデプロイ方法の種類、Blue/Greenデプロイメント中のALBやECSタスクがどのような挙動をするのかを図解して解説させていただきました。また、構築した際にはまった点や、実際にパイプラインを実行した時にマネジメントコンソール上でどのように見えるかや、操作方法等を説明させていただきました。</p><p>以下が、パイプライン構築時にはまったことやTips等の抜粋です。</p><ul><li>ECS on EC2でAWSVPCモードを使用する場合は、タスクごとにENIがアタッチされるため、インスタンスタイプによっては許容されているENI数を超えてしまい、タスクが立ち上がらないことがあります。その対策としてAWSVPC Trunking制限緩和申請を行うことでインスタンスで許容されるENI数の上限を大幅に引き上げることができます。</li><li>CodeBuild実行時にDocker HubからイメージをPullする構成になっていると「error pulling image configuration: toomanyrequests:Too Many Requests」とrate-limitエラーになってしまうので、ECR Publicを使用してイメージをpullするようにしました。</li><li>CapacityProviderの設定を入れている場合、CodeDeployで使用する「appspec.yml」に「CapacityProviderStrategy」の設定を記載しないと、Blue/Greenデプロイが完了した際に構築時に設定したはずの「CapacityProviderStrategy」の設定が消えてしまい、タスクがAZに分散されず偏る事象が発生しました。</li><li>Blue/Greenデプロイが、サービスのAutoScalingをサポートしていないため、CodeDeployのイベントフックを利用してデプロイ前後にサービスのAutoScalingの停止と再開を実行するLambdaを実行する必要があります。</li></ul><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>所属プロジェクト内での勉強会に登壇して発表することはありましたが、社外イベントでの勉強会に登壇することは初めてだったので、とても良い経験になりました。勉強会登壇に向けて再びECS、Codeシリーズのインプットをしたり、資料にアプトプットする段階で理解が深まったりしたので勉強会登壇して本当に良かったです。</p><p>後日先輩社員から少し話すのが早かったかなとフィードバックを頂いたので、次発表する機会があれば落ち着いてゆっくりプレゼンできるようにしておきます！（笑）</p><p>改めて当発表をご視聴いただいた方、そしてここまで当記事を読んでくださった方ありがとうございました。</p><p>次のイベントに関する情報は、フューチャーの<a href="https://future.connpass.com/">connpass</a>で確認できます。ぜひご参加ください！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DevOps/">DevOps</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/TechNight/">TechNight</category>
      
      <category domain="https://future-architect.github.io/tags/CodePipeline/">CodePipeline</category>
      
      <category domain="https://future-architect.github.io/tags/ECS/">ECS</category>
      
      <category domain="https://future-architect.github.io/tags/BlueGreenDeployment/">BlueGreenDeployment</category>
      
      
      <comments>https://future-architect.github.io/articles/20220314a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Certified SysOps Administrator – Associate 合格体験記</title>
      <link>https://future-architect.github.io/articles/20220309a/</link>
      <guid>https://future-architect.github.io/articles/20220309a/</guid>
      <pubDate>Tue, 08 Mar 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220309a/AWS-Certified_Sysops-Administrator_Associate_512x512.png&quot; alt=&quot;&quot; width=&quot;512&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220309a/AWS-Certified_Sysops-Administrator_Associate_512x512.png" alt="" width="512" height="512"><p>お久しぶりです。2019年新卒入社筋肉エンジニアの渡邉光です。</p><p>前回の<a href="https://future-architect.github.io/articles/20210906a/">AWS Certified Developer - Associate 合格体験記</a>から結構時間がたってしまいましたが、時間的に余裕が出てきたのでAWS Certified SysOps Administrator – Associate (AWS SOA-C02) を受験してきました。無事合格できたので、Associate試験は3冠を達成することができました！</p><ul><li>AWS Certified Cloud Practitioner (AWS CLF)</li><li>AWS Certified Solutions Architect – Associate (AWS SAA)</li><li>AWS Certified Developer - Associate (AWS DVA)</li><li>AWS Certified SysOps Administrator – Associate (AWS SOA-C02) ★NEW!</li></ul><h1 id="AWS-Certified-SysOps-Administrator-–-Associate-AWS-SOA-C02-とは"><a href="#AWS-Certified-SysOps-Administrator-–-Associate-AWS-SOA-C02-とは" class="headerlink" title="AWS Certified SysOps Administrator – Associate (AWS SOA-C02)とは"></a>AWS Certified SysOps Administrator – Associate (AWS SOA-C02)とは</h1><p>AWS認定資格の一つで、AWSでのワークロードのデプロイ、管理、運用に関して問われる試験になっています。去年の7月27日にAWS SOAの試験形式が刷新されました。従来の択一選択問題、複数選択問題に加えて、<strong>試験ラボ（マネジメントコンソール操作）</strong> が追加されました。</p><p>試験ラボは、サンドボックス用のAWSアカウントを操作し表示されたシナリオ通りにマネジメントコンソールから設定を行っていく試験です。</p><p>試験ラボが追加になったことにより、試験時間も180分とかなりの長時間になっています。<br>※試験ガイドは<a href="https://d1.awsstatic.com/ja_JP/training-and-certification/docs-sysops-associate/AWS-Certified-SysOps-Administrator-Associate_Exam-Guide.pdf">こちら</a>で確認できます。</p><p>試験内容としては以下の分野について出題されます。</p><ul><li>モニタリング、ロギング、および修復</li><li>信頼性とビジネス継続性</li><li>デプロイ、プロビジョニング、およびオートメーション</li><li>セキュリティとコンプライアンス</li><li>ネットワークとコンテンツ配信</li><li>コストとパフォーマンスの最適化</li></ul><p>具体的には、organizationsを利用したアカウント管理、cloudwatchでのメトリクス監視、cloudformationでのAWSリソースのデプロイ方法、aws cost exploer、aws budgetsでのコスト管理等、multi azでの高可用性について問われます。</p><h1 id="学習方法"><a href="#学習方法" class="headerlink" title="学習方法"></a>学習方法</h1><h2 id="選択問題対策"><a href="#選択問題対策" class="headerlink" title="選択問題対策"></a>選択問題対策</h2><h3 id="学習サイト-aws-koiwaclub-com"><a href="#学習サイト-aws-koiwaclub-com" class="headerlink" title="学習サイト aws.koiwaclub.com"></a>学習サイト aws.koiwaclub.com</h3><p>安定のkoiwaclubさんのサイトを使用して、選択問題の対策は行いました。koiwaclubさんの合格体験記にも記載があるように、#50~#95を中心に二周問題を解きました。試験当日もkoiwaclubさんで解いた問題と同じような意図の問題が多く出題されたためすらっと回答することができたと思います。</p><h2 id="試験ラボ対策"><a href="#試験ラボ対策" class="headerlink" title="試験ラボ対策"></a>試験ラボ対策</h2><h3 id="AWS-hands-on-for-Beginners"><a href="#AWS-hands-on-for-Beginners" class="headerlink" title="AWS hands-on for Beginners"></a>AWS hands-on for Beginners</h3><p>試験ラボでは与えられたシナリオ通りにマネジメントコンソールからの設定を行っていく必要があるので、AWSが公式で提供している<a href="https://aws.amazon.com/jp/aws-jp-introduction/aws-jp-webinar-hands-on/?trk=aws_blog">AWS hands-on for Beginners</a>を利用して、普段なじみがないサービス等のキャッチアップやマネジメントコンソールの設定方法を学習していきました。AWS SOA-C02では、運用面でのサービスについて問われるため、運用系サービス代表のSystems Managerは以下のハンズオンを行い、サービスの概要とユースケース、設定方法等をキャッチアップしました。</p><p><a href="https://pages.awscloud.com/JAPAN-event-OE-Hands-on-for-Beginners-systems-manager-2022-reg-event.html?trk=aws_introduction_page">AWS Systems Managerを使ったサーバ管理はじめの一歩編</a></p><p>高可用性についても問われるため、<a href="https://pages.awscloud.com/event_JAPAN_Hands-on-for-Beginners-Scalable_LP.html?trk=aws_introduction_page">スケーラブルウェブサイト構築編</a>も行い、一般的な高可用性アーキテクチャについて学習しました。</p><h1 id="受験結果と感想"><a href="#受験結果と感想" class="headerlink" title="受験結果と感想"></a>受験結果と感想</h1><p>合格ライン720点に対して777点と予想より低い点数となってしまいましたが、無事合格することができました。</p><p>普段はterraformを使用してAWS環境構築を行っており、試験ラボのマネジメントコンソールから設定する形式に対応できるか不安だったので、試験範囲のサービスはマネジメントコンソールから設定できるようにAWS hands-on for Beginnersを利用したり、自分でアーキテクチャを考えてマネジメントコンソールから作成してみる等の対策を行いました。実際の試験ラボの結果も「コンピテンシーを満たしている」結果だったので、対策のおかげでハンズオンは余裕でした！</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>無事にAssociate三冠取得することができたので、今後はprofessional試験に挑戦していこうと思います。</p><p>伊藤真彦さんが<a href="/articles/20211112b/">AWS認定資格全冠された</a>のでAPN ALL AWS Certifications Engineersに表彰されます！おめでとうございます！</p><p>私も伊藤さん目指して頑張ります！！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/">合格記</category>
      
      <category domain="https://future-architect.github.io/tags/SysOps%E3%82%A2%E3%83%89%E3%83%9F%E3%83%8B%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%BF%E3%83%BC/">SysOpsアドミニストレーター</category>
      
      
      <comments>https://future-architect.github.io/articles/20220309a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Project Haystackに関する備忘録</title>
      <link>https://future-architect.github.io/articles/20220308a/</link>
      <guid>https://future-architect.github.io/articles/20220308a/</guid>
      <pubDate>Mon, 07 Mar 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;最近、IoTに関するデータモデル標準化に用いられる &lt;a href=&quot;https://project-haystack.org/&quot;&gt;Project Haystack&lt;/a&gt;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>最近、IoTに関するデータモデル標準化に用いられる <a href="https://project-haystack.org/">Project Haystack</a> について調べる機会があり、日本語でまとめられている文献が少なくて理解するのに若干苦労したため、備忘録も兼ねて調査した内容を簡単にまとめておきます。</p><p>Haystack の公式ドキュメントを読んだけどいまいち分からなかったという方がいれば参考にしていただけると幸いです。</p><h2 id="Project-Haystack-概要"><a href="#Project-Haystack-概要" class="headerlink" title="Project Haystack 概要"></a>Project Haystack 概要</h2><p>Project Haystack は、ファシリティ・機器などの IoT に関するデータモデルを標準化する取り組みです。<br>ビルシステムとそれに関連するデバイスのモデルを様々なツールで解釈できるようにするため、メタデータ定義の方法論と共通語彙を提供することをミッションとしています。</p><blockquote><p>We standardize semantic data models and web services with the goal of making it easier to unlock value from the vast quantity of data being generated by the smart devices that permeate our homes, buildings, factories, and cities.<br>Applications include automation, control, energy, HVAC, lighting, and other environmental systems.</p></blockquote><p>(Project Haystack 公式ページから抜粋)</p><h2 id="技術概要"><a href="#技術概要" class="headerlink" title="技術概要"></a>技術概要</h2><p>Haystackの技術概要をざっくり箇条書でまとめてみました。<br>エンティティとタグを使ってデータやデータ間の関係性を表現することがキモなようです。</p><ul><li>各機器や建物ごとに、それぞれ適した「エンティティ」（※1）と「タグ」（※2）を用いてデータモデルを標準化する。</li><li>建物は「site」、機器は「equip」、運転データは「point」エンティティを使用する。</li><li>エンティティ同士の関係性（どの機器がどの建物に設置されているかなど）も、タグによって表現する。</li><li>データモデルを標準化する際、site と equip エンティティではタグのみ付与されるが、point エンティティには実際の観測データが格納される。</li></ul><p>※1 エンティティ…実世界の物理オブジェクトを抽象化したもの（例: 建物、ヒーター、センサーなど）。<br>※2 タグ…エンティティに付与する情報。名前と値によって構成されており、タグによって値の型が異なる（例: 文字列型、参照型、真偽値型など）。</p><h2 id="エンティティごとの主なタグ"><a href="#エンティティごとの主なタグ" class="headerlink" title="エンティティごとの主なタグ"></a>エンティティごとの主なタグ</h2><p>エンティティごとのお主なタグを表にまとめました。<br>全てのエンティティは一意な id と dis(表示名) のタグを持っており、エンティティごとに固有のタグも存在するようです。<br>また、カスタムタグとして Haystack が標準で用意していないタグを作成することも可能なようです。</p><img src="/images/20220308a/タグ.png" alt="タグ" width="1200" height="565" loading="lazy"><h2 id="エンティティ間の関係性の表現"><a href="#エンティティ間の関係性の表現" class="headerlink" title="エンティティ間の関係性の表現"></a>エンティティ間の関係性の表現</h2><p>データモデルの例を図に示します。<br>Haystack ではエンティティ内に作成したタグによって、自身のエンティティの特性と他のエンティティとの関係性を示します。<br>例）Sample Electricity Meter は、equip, elec, meter タグにより 自身が equip の派生である elec-meterであることを示し、 site タグの中に Sample Site の id を記載することで、 Sample Site の中に設置されていることを示す。</p><img src="/images/20220308a/要素間の関連.png" alt="要素間の関連" width="1200" height="506" loading="lazy"><h2 id="Point-へのデータの格納"><a href="#Point-へのデータの格納" class="headerlink" title="Point へのデータの格納"></a>Point へのデータの格納</h2><p>エンティティのうち、Pointだけは実際の観測データを格納するなど、仕組みが複雑に感じたため Point へのデータの格納方法について箇条書きでまとめました。</p><ul><li>point には派生として現在状態を表す cur-point と過去状態を表す his-point が存在する。</li><li>cur-point は、スカラー値が入るcurValタグを持つ。</li><li>his-point は、timestamp と curVal のセットをローカルストレージに記録することで履歴を管理することができる。</li><li>equip と point は1対多の関係であり、1つの point が1つの値（温度、速度など）を表す。</li><li>point は他のエンティティと結合し、用途に応じた働きをするための新たなエンティティを形成する。<br>例）point に air, temp タグをつけることで、 point と air-temp が結合し、温度計が計測した温度を表すためのエンティティとなる。</li></ul><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>本記事を読んでくださった方の Haystack への理解向上に少しでも役立っていれば幸いです。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li>Project Haystack 公式ドキュメント<br><a href="https://project-haystack.org/">https://project-haystack.org/</a></li><li>Project Haystack オープンソースデータモデル化標準に基づくビルシステムおよび機器のデータモデル化ガイド仕様<br><a href="https://marketing.project-haystack.org/images/documents/Project-Haystack-Guide-Specification-Japanese.pdf">https://marketing.project-haystack.org/images/documents/Project-Haystack-Guide-Specification-Japanese.pdf</a></li><li>Simplifying Data Collection and Analysis through Haystack<br><a href="https://assets.new.siemens.com/siemens/assets/api/uuid:60cc0b1f-c9df-4a44-8116-a834c994c7ff/us-si-pss-bp-sra-projecthaystack-whitepaper-sie-brand-redesign-0.pdf">https://assets.new.siemens.com/siemens/assets/api/uuid:60cc0b1f-c9df-4a44-8116-a834c994c7ff/us-si-pss-bp-sra-projecthaystack-whitepaper-sie-brand-redesign-0.pdf</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/IoT/">IoT</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%A2%E3%83%87%E3%83%AB/">データモデル</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/">設計</category>
      
      <category domain="https://future-architect.github.io/tags/Haystack/">Haystack</category>
      
      
      <comments>https://future-architect.github.io/articles/20220308a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Pyright を LSP サーバとした自作 LSP クライアント（実装編）</title>
      <link>https://future-architect.github.io/articles/20220303a/</link>
      <guid>https://future-architect.github.io/articles/20220303a/</guid>
      <pubDate>Wed, 02 Mar 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220303a/PyrightLarge.png&quot; alt=&quot;&quot; width=&quot;565&quot; height=&quot;234&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220303a/PyrightLarge.png" alt="" width="565" height="234"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Future でアルバイトをしている空閑と申します。本記事ではタイトルの通り、Pyright を LSP (Language Server Protocol) サーバとした自作クライアントを実装しますが、その前に経緯について説明します。本節では実装については触れません。</p><p>アルバイトの前は、Future のインターン Engineer Camp で Python のソースコード解析に取り組んでいました。そのときの様子は、<a href="/articles/20211019a/">Engineer Camp2021: Python の AST モジュールを使ってクラス構造を可視化する</a> で触れています。当時は Python の AST モジュールを活用する方針で、それ以外は自前で解析を行っていました。アルバイトでも引き続き解析に取り組んでいますが、次第に型推論などの技術が必要になってきており、全てを自前で実装することは困難な状況です。そこで現在は、既存のツールを拡張する方針を取っています。</p><p>ツールの候補としては、Mypy および Pyright が挙がりましたが、検討の結果（<a href="/articles/20220301a/">Mypy と Pyright の解析比較</a>）Pyright を拡張することにしています。Pyright は Pylance 上での実行を前提としているため、入力補完などで使う、型チェックにとどまらない情報を取得できることが理由の一つです。また、Pyright には LSP での実装が存在するため、これを利用することで、Pyright 本体の実装に手を加える必要がなく、システムを疎結合に保てます。</p><p>問題は、LSP クライアントをエディタ（主に VSCode）以外で実装するサンプルがほとんどないことです。解析ツールはコマンドラインで動作するようにしたいため、エディタ依存の機能は使えません。<a href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/">LSP の仕様</a>は公開されているものの、詳細な手順については記載がありません。特に Pyright における初期化の手順は、実際の実装を追う必要があり苦戦しました。次節以降では、初期化の手順を含めた自作 LSP クライアントの実装方法を紹介します。</p><h1 id="自作-LSP-クライアントの作成"><a href="#自作-LSP-クライアントの作成" class="headerlink" title="自作 LSP クライアントの作成"></a>自作 LSP クライアントの作成</h1><h2 id="仕様"><a href="#仕様" class="headerlink" title="仕様"></a>仕様</h2><ul><li>解析対象：Python</li><li>LSP サーバ：Pyright</li><li>LSP クライアント：CLI（Node.js, TypeScript）</li><li>目標<ul><li>サーバ・クライアント間のメッセージ送受信</li><li>メッセージによる簡単な解析結果の取得</li></ul></li></ul><h2 id="最低限実装が必要なメッセージ"><a href="#最低限実装が必要なメッセージ" class="headerlink" title="最低限実装が必要なメッセージ"></a>最低限実装が必要なメッセージ</h2><ol><li><a href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initialize">Initialize Request</a>：サーバの初期化を要求</li><li><a href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initialized">Initialized Notification</a>：クライアント側の初期化が完了したことを通知</li><li><a href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#workspace_didChangeWorkspaceFolders">DidChangeWorkspaceFolders Notification</a>：ワークスペースフォルダの変更を通知</li></ol><p>詳しくは <a href="/articles/20220302a/">Pyright を LSP サーバとした自作 LSP クライアント（調査編）</a>を参照してください。</p><h1 id="実装"><a href="#実装" class="headerlink" title="実装"></a>実装</h1><h2 id="サーバ起動・メッセージ受信"><a href="#サーバ起動・メッセージ受信" class="headerlink" title="サーバ起動・メッセージ受信"></a>サーバ起動・メッセージ受信</h2><p>LSP サーバのパスを指定し、子プロセスで起動します。Pyright のリポジトリをクローンした場合、サーバのパスは <code>pyright/packages/pyright/langserver.index.js</code> です。Pyright は実行時引数で通信方法を指定できます。<code>--node-ipc</code>、<code>--stdio</code>、<code>--socket=&#123;number&#125;</code> から選ぶことができますが、今回は <code>--node-ipc</code> を採用します。</p><p>接続を確立するために <a href="https://www.npmjs.com/package/vscode-jsonrpc"><code>vscode-jsonrpc</code></a> の <code>createMessageConnection</code> を使います。<code>vscode-jsonrpc</code> はメッセージプロトコルのライブラリで、今後もたびたび出てきます。<code>setup(connection)</code> ではメッセージハンドラを定義します。最初なのでとりあえず、<code>notification</code> と <code>error</code> メッセージが来た時に内容を出力することにします。</p><figure class="highlight typescript"><figcaption><span>client.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> child_process <span class="keyword">from</span> <span class="string">&#x27;child_process&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> rpc <span class="keyword">from</span> <span class="string">&#x27;vscode-jsonrpc/node&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params">connection: rpc.MessageConnection</span>) </span>&#123;</span><br><span class="line">    connection.onUnhandledNotification(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;notification&#x27;</span>, e);</span><br><span class="line">    &#125;);</span><br><span class="line">    connection.onError(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>, e);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> modulePath = path.resolve(<span class="string">&#x27;/path/to/langserver.index.js&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> childProcess = child_process.fork(modulePath, [<span class="string">&#x27;--node-ipc&#x27;</span>]);</span><br><span class="line">    <span class="keyword">const</span> connection = rpc.createMessageConnection(</span><br><span class="line">        <span class="keyword">new</span> rpc.IPCMessageReader(childProcess),</span><br><span class="line">        <span class="keyword">new</span> rpc.IPCMessageWriter(childProcess)</span><br><span class="line">    );</span><br><span class="line">    setup(connection);</span><br><span class="line">    connection.listen();</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br></pre></td></tr></table></figure><p>以上のコードを実際に実行すると、サーバが起動したことを通知するメッセージを <code>window/logMessage</code> メソッドで受信できます。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">jsonrpc</span>: <span class="string">&#x27;2.0&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;window/logMessage&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>: &#123;<span class="attr">type</span>: <span class="number">3</span>, <span class="attr">message</span>: <span class="string">&#x27;Pyright language server 1.1.182 starting&#x27;</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Initialize-Request"><a href="#Initialize-Request" class="headerlink" title="Initialize Request"></a>Initialize Request</h2><p>今はまだ起動してメッセージを受信するだけのプログラムなので、今度はメッセージを送信してみます。仕様では最初に Initialize Request を送ることになっているので、これを実装します。サーバにリクエストを送る場合には <code>connection.sendRequest(type, params)</code> を使います。<code>type</code> はメソッドの種類、<code>params</code> はメソッド固有のパラメタになります。これらの型定義は <a href="https://www.npmjs.com/package/vscode-languageserver-protocol"><code>vscode-languageserver-protocol</code></a> にあるので、適当に参照します。</p><p><code>InitializeParams</code> にはいくつかのプロパティがありますが、最低限実装すべきは次の 4 つです。</p><ol><li><code>processId</code>（サーバの親プロセスの ID）</li><li><code>rootUri</code>（解析したいワークスペースのルート URI、適当でよいです）</li><li><code>capabilities</code>（クライアントが実装している機能、無いので空）</li><li><code>workspaceFolders</code>（解析したいワークスペースのフォルダ、とりあえず空）</li></ol><figure class="highlight ts"><figcaption><span>client.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> url <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> lsp <span class="keyword">from</span> <span class="string">&#x27;vscode-languageserver-protocol&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InitializeParams</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">InitializeParams</span> </span>&#123;</span><br><span class="line">    <span class="attr">processId</span>: <span class="built_in">number</span>;</span><br><span class="line">    rootUri: <span class="built_in">string</span>;</span><br><span class="line">    capabilities: lsp.ClientCapabilities;</span><br><span class="line">    workspaceFolders: lsp.WorkspaceFolder[] | <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.processId = process.pid;</span><br><span class="line">        <span class="built_in">this</span>.rootUri = url.pathToFileURL(path.resolve(<span class="string">&#x27;./&#x27;</span>)).toString();</span><br><span class="line">        <span class="built_in">this</span>.capabilities = &#123;&#125;;</span><br><span class="line">        <span class="built_in">this</span>.workspaceFolders = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params">connection: rpc.MessageConnection</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    connection.listen();</span><br><span class="line">    <span class="keyword">const</span> initializeResult = <span class="keyword">await</span> connection.sendRequest(lsp.InitializeRequest.type, <span class="keyword">new</span> InitializeParams());</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;initialize&#x27;</span>, initializeResult);</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br></pre></td></tr></table></figure><p>Initialize Request が正しく送れていると、Initialize Result が返ってきます。こちらにも <code>capabilities</code> が含まれていますが、これはサーバ側で実装されている機能の一覧になります。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">capabilities</span>: &#123;</span><br><span class="line">        <span class="attr">textDocumentSync</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">definitionProvider</span>: &#123;…&#125;,</span><br><span class="line">        <span class="attr">declarationProvider</span>: &#123;…&#125;,</span><br><span class="line">        <span class="attr">referencesProvider</span>: &#123;…&#125;,</span><br><span class="line">        …</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Initialized-Notification"><a href="#Initialized-Notification" class="headerlink" title="Initialized Notification"></a>Initialized Notification</h2><p>次は Initialize Result を受けて、クライアント側の初期化が終わったことを通知するために Initialized Notification を送信します。サーバに通知を送る場合には <code>connection.sendNotification(type, params)</code> を使います。<code>InitializedParams</code> は空のオブジェクトなので実装はしないで <code>&#123;&#125;</code> を直接入力することにします。</p><figure class="highlight typescript"><figcaption><span>client.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InitializeParams</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">InitializeParams</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params">connection: rpc.MessageConnection</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">const</span> initializeResult = <span class="keyword">await</span> connection.sendRequest(lsp.InitializeRequest.type, <span class="keyword">new</span> InitializeParams());</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;initialize&#x27;</span>, initializeResult);</span><br><span class="line">    connection.sendNotification(lsp.InitializedNotification.type, &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br></pre></td></tr></table></figure><p>Initialized Notification を送ると、<code>client/registerCapability</code> メソッドのメッセージが送られてきます。これはサーバがクライアントに対して機能追加を要求するメッセージになります。今はまだ、このメソッドに対するハンドラを定義していないので、ハンドラを定義して受信できるようにします。</p><figure class="highlight typescript"><figcaption><span>client.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InitializeParams</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">InitializeParams</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params">connection: rpc.MessageConnection</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    connection.onRequest(lsp.RegistrationRequest.type, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;client/registerCapability&#x27;</span>, e);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br></pre></td></tr></table></figure><p>すると、以下のような内容のメッセージを受信したことがわかります。次はこのメソッドを実装します。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;workspace/didChangeWorkspaceFolders&#x27;</span>,</span><br><span class="line">    <span class="attr">registerOptions</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DidChangeWorkspaceFolders-Notification"><a href="#DidChangeWorkspaceFolders-Notification" class="headerlink" title="DidChangeWorkspaceFolders Notification"></a>DidChangeWorkspaceFolders Notification</h2><p>ワークスペースフォルダを変更するメソッドを実装します。これを実行することで、解析対象のフォルダを変更することができます。<code>InitializeParams</code> 同様に <code>DidChangeWorkspaceFoldersParams</code> を実装します。プロパティは多いですが、単にワークスペースとして認識するフォルダの追加と削除を行っているだけです。また、DidChangeWorkspaceFolders Notification はデフォルトではサーバ側から認識されないため、<code>InitializeParams.capabilities</code> にワークスペース機能があることを記載します。詳細は、<a href="/articles/20220302a/">Pyright を LSP サーバとした自作 LSP クライアント（調査編）</a>で解説しています。</p><figure class="highlight ts"><figcaption><span>client.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InitializeParams</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">InitializeParams</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capabilities = &#123; <span class="attr">workspace</span>: &#123; <span class="attr">workspaceFolders</span>: <span class="literal">true</span> &#125; &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkspaceFoldersChangeEvent</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">WorkspaceFoldersChangeEvent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> added: lsp.WorkspaceFolder[], <span class="keyword">public</span> removed: lsp.WorkspaceFolder[]</span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkspaceFolder</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">WorkspaceFolder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> uri: <span class="built_in">string</span>, <span class="keyword">public</span> name: <span class="built_in">string</span></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DidChangeWorkspaceFoldersParams</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">DidChangeWorkspaceFoldersParams</span> </span>&#123;</span><br><span class="line">    <span class="attr">event</span>: WorkspaceFoldersChangeEvent;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">added: lsp.WorkspaceFolder[], removed: lsp.WorkspaceFolder[]</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.event = <span class="keyword">new</span> WorkspaceFoldersChangeEvent(added, removed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params">connection: rpc.MessageConnection</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    connection.onRequest(lsp.RegistrationRequest.type, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;client/registerCapability&#x27;</span>, e);</span><br><span class="line">        connection.sendNotification(</span><br><span class="line">            lsp.DidChangeWorkspaceFoldersNotification.type,</span><br><span class="line">            <span class="keyword">new</span> DidChangeWorkspaceFoldersParams(</span><br><span class="line">                [<span class="keyword">new</span> WorkspaceFolder(url.pathToFileURL(path.resolve(<span class="string">&#x27;./&#x27;</span>)).toString(), <span class="string">&#x27;dev&#x27;</span>)],</span><br><span class="line">                []</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br></pre></td></tr></table></figure><p>実装が上手くいっていれば、DidChangeWorkspaceFolders Notification を送信したタイミングで、<code>window/logMessage</code> メソッドのメッセージが大量に受信できると思います。主に解析対象のファイルや、仮想環境の情報を通知してくれています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Assuming Python platform Windows</span><br><span class="line">Searching for source files</span><br><span class="line">Auto-excluding \path\to\.venv</span><br><span class="line">Auto-excluding \path\to\myvenv</span><br><span class="line">Found &#123;number&#125; source files</span><br></pre></td></tr></table></figure><h2 id="解析メッセージ"><a href="#解析メッセージ" class="headerlink" title="解析メッセージ"></a>解析メッセージ</h2><p>以上で、解析に必要な初期化メッセージをすべて実装したことになり、ここから先は自由にメッセージを送信できます。今回は最近のエディタでよく見かける、<a href="https://microsoft.github.io/language-server-protocol/specification#textDocument_hover">Hover Request</a> を送信してみます。<a href="https://fastapi.tiangolo.com/ja/">FastAPI</a> を使用した以下のファイルを対象にします。</p><figure class="highlight py"><figcaption><span>main.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/hello&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello</span>():</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;hello world!&quot;</span>&#125;</span><br></pre></td></tr></table></figure><p>今までと同様に、<code>HoverParams</code> を実装し適切な引数でメッセージを送信します。今回はテストなので、引数は手動で設定します。<code>Position.create(2, 6)</code> は 0-based で行数と文字数を指定しており、3 行目の 7 文字目、<code>FastAPI()</code> にカーソル位置があることを示しています。</p><figure class="highlight typescript"><figcaption><span>client.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HoverParams</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">HoverParams</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> textDocument: lsp.TextDocumentIdentifier, <span class="keyword">public</span> position: lsp.Position</span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">connection.sendRequest(</span><br><span class="line">    lsp.HoverRequest.type,</span><br><span class="line">    <span class="keyword">new</span> HoverParams(</span><br><span class="line">        lsp.TextDocumentIdentifier.create(url.pathToFileURL(path.resolve(<span class="string">&#x27;./main.py&#x27;</span>)).toString()),</span><br><span class="line">        lsp.Position.create(<span class="number">2</span>, <span class="number">6</span>)</span><br><span class="line">    )</span><br><span class="line">).then(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>実行すると以下のようなメッセージが受信でき、カーソルを合わせた時のような情報が得られました。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">contents</span>: &#123;</span><br><span class="line">        <span class="attr">kind</span>: <span class="string">&#x27;plaintext&#x27;</span></span><br><span class="line">        <span class="attr">value</span>: <span class="string">&#x27;(class) FastAPI(*, debug: bool = False, routes: List[BaseRoute] | None = None, title: str = &quot;FastAPI&quot;, description: str = &quot;&quot;, version: str = &quot;0.1.0&quot;, openapi_url: str | None = &quot;/openapi.json&quot;, openapi_tags: List[Dict[str, Any]] | None = None, servers: List[Dict[str, str | Any]] | None = None, dependencies: Sequence[Depends] | None = None, default_response_class: Type[Response] = Default(JSONResponse), docs_url: str | None = &quot;/docs&quot;, redoc_url: str | None = &quot;/redoc&quot;, swagger_ui_oauth2_redirect_u…one = None, on_startup: Sequence[() -&gt; Any] | None = None, on_shutdown: Sequence[() -&gt; Any] | None = None, terms_of_service: str | None = None, contact: Dict[str, str | Any] | None = None, license_info: Dict[str, str | Any] | None = None, openapi_prefix: str = &quot;&quot;, root_path: str = &quot;&quot;, root_path_in_servers: bool = True, responses: Dict[int | str, Dict[str, Any]] | None = None, callbacks: List[BaseRoute] | None = None, deprecated: bool | None = None, include_in_schema: bool = True, **extra: Any)&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">range</span>: &#123;</span><br><span class="line">        <span class="attr">end</span>: &#123;<span class="attr">line</span>: <span class="number">2</span>, <span class="attr">character</span>: <span class="number">13</span>&#125;</span><br><span class="line">        <span class="attr">start</span>: &#123;<span class="attr">line</span>: <span class="number">2</span>, <span class="attr">character</span>: <span class="number">6</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全体の実装"><a href="#全体の実装" class="headerlink" title="全体の実装"></a>全体の実装</h2><details>  <summary>長いので折り畳み</summary>  <div><figure class="highlight js"><figcaption><span>client.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> child_process <span class="keyword">from</span> <span class="string">&#x27;child_process&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> url <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> rpc <span class="keyword">from</span> <span class="string">&#x27;vscode-jsonrpc/node&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> lsp <span class="keyword">from</span> <span class="string">&#x27;vscode-languageserver-protocol&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InitializeParams</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">InitializeParams</span> </span>&#123;</span><br><span class="line">    <span class="attr">processId</span>: number;</span><br><span class="line">    rootUri: string;</span><br><span class="line">    capabilities: lsp.ClientCapabilities;</span><br><span class="line">    workspaceFolders: lsp.WorkspaceFolder[] | <span class="literal">null</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.processId = process.pid;</span><br><span class="line">        <span class="built_in">this</span>.rootUri = url.pathToFileURL(path.resolve(<span class="string">&#x27;./&#x27;</span>)).toString();</span><br><span class="line">        <span class="built_in">this</span>.capabilities = &#123; <span class="attr">workspace</span>: &#123; <span class="attr">workspaceFolders</span>: <span class="literal">true</span> &#125; &#125;;</span><br><span class="line">        <span class="built_in">this</span>.workspaceFolders = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkspaceFoldersChangeEvent</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">WorkspaceFoldersChangeEvent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">public added: lsp.WorkspaceFolder[], public removed: lsp.WorkspaceFolder[]</span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkspaceFolder</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">WorkspaceFolder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">public uri: string, public name: string</span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DidChangeWorkspaceFoldersParams</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">DidChangeWorkspaceFoldersParams</span> </span>&#123;</span><br><span class="line">    <span class="attr">event</span>: WorkspaceFoldersChangeEvent;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">added: lsp.WorkspaceFolder[], removed: lsp.WorkspaceFolder[]</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.event = <span class="keyword">new</span> WorkspaceFoldersChangeEvent(added, removed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HoverParams</span> <span class="title">implements</span> <span class="title">lsp</span>.<span class="title">HoverParams</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">public textDocument: lsp.TextDocumentIdentifier, public position: lsp.Position</span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params">connection: rpc.MessageConnection</span>) </span>&#123;</span><br><span class="line">    connection.onUnhandledNotification(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;notification&#x27;</span>, e);</span><br><span class="line">    &#125;);</span><br><span class="line">    connection.onError(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;error&#x27;</span>, e);</span><br><span class="line">    &#125;);</span><br><span class="line">    connection.onNotification(lsp.LogMessageNotification.type, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.info(e.message);</span><br><span class="line">    &#125;);</span><br><span class="line">    connection.onRequest(lsp.RegistrationRequest.type, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;client/registerCapability&#x27;</span>, e);</span><br><span class="line">        connection.sendNotification(</span><br><span class="line">            lsp.DidChangeWorkspaceFoldersNotification.type,</span><br><span class="line">            <span class="keyword">new</span> DidChangeWorkspaceFoldersParams(</span><br><span class="line">                [<span class="keyword">new</span> WorkspaceFolder(url.pathToFileURL(path.resolve(<span class="string">&#x27;./&#x27;</span>)).toString(), <span class="string">&#x27;dev&#x27;</span>)],</span><br><span class="line">                []</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">        connection</span><br><span class="line">            .sendRequest(</span><br><span class="line">                lsp.HoverRequest.type,</span><br><span class="line">                <span class="keyword">new</span> HoverParams(</span><br><span class="line">                    lsp.TextDocumentIdentifier.create(url.pathToFileURL(path.resolve(<span class="string">&#x27;./main.py&#x27;</span>)).toString()),</span><br><span class="line">                    lsp.Position.create(<span class="number">2</span>, <span class="number">6</span>)</span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line">            .then(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(e);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> modulePath = path.resolve(<span class="string">&#x27;./packages/cli-pyright/langserver.index.js&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> childProcess = child_process.fork(modulePath, [<span class="string">&#x27;--node-ipc&#x27;</span>]);</span><br><span class="line">    <span class="keyword">const</span> connection = rpc.createMessageConnection(</span><br><span class="line">        <span class="keyword">new</span> rpc.IPCMessageReader(childProcess),</span><br><span class="line">        <span class="keyword">new</span> rpc.IPCMessageWriter(childProcess)</span><br><span class="line">    );</span><br><span class="line">    setup(connection);</span><br><span class="line">    connection.listen();</span><br><span class="line">    <span class="keyword">const</span> initializeResult = <span class="keyword">await</span> connection.sendRequest(lsp.InitializeRequest.type, <span class="keyword">new</span> InitializeParams());</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;initialize&#x27;</span>, initializeResult);</span><br><span class="line">    connection.sendNotification(lsp.InitializedNotification.type, &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">main();</span><br></pre></td></tr></table></figure></div></details><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>今回は、自作の LSP クライアントを実装しました。機能としては不十分ですが、遊ぶ分には楽しめると思います。本来の目的は既存のメッセージを組み合わせての解析なのですが、実際のところかなり面倒です…。LSP が解析目的のプロトコルではないので当然ですが。現在は Pyright 内部をいじることも検討しているので、LSP サーバ側の実装についても今後機会があれば紹介したいと思います。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://microsoft.github.io/language-server-protocol/">https://microsoft.github.io/language-server-protocol/</a></li><li><a href="https://docs.microsoft.com/en-us/visualstudio/extensibility/language-server-protocol?view=vs-2022">https://docs.microsoft.com/en-us/visualstudio/extensibility/language-server-protocol?view=vs-2022</a></li><li><a href="https://qiita.com/atsushieno/items/ce31df9bd88e98eec5c4">https://qiita.com/atsushieno/items/ce31df9bd88e98eec5c4</a></li><li><a href="https://qiita.com/Ladicle/items/e666e3fb9fae9d807969">https://qiita.com/Ladicle/items/e666e3fb9fae9d807969</a></li><li><a href="https://zenn.dev/takl/books/0fe11c6e177223">https://zenn.dev/takl/books/0fe11c6e177223</a></li><li><a href="https://github.com/tennashi/lsp_spec_ja">https://github.com/tennashi/lsp_spec_ja</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Python/">Python</category>
      
      <category domain="https://future-architect.github.io/tags/Pyright/">Pyright</category>
      
      <category domain="https://future-architect.github.io/tags/LSP/">LSP</category>
      
      
      <comments>https://future-architect.github.io/articles/20220303a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Pyright を LSP サーバとした自作 LSP クライアント（調査編）</title>
      <link>https://future-architect.github.io/articles/20220302a/</link>
      <guid>https://future-architect.github.io/articles/20220302a/</guid>
      <pubDate>Tue, 01 Mar 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;Language Server Protocol の理解として、Pyright を LSP</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>Language Server Protocol の理解として、Pyright を LSP サーバとした自作クライアントの作成を行いました（<a href="/articles/20220303a/">Pyright を LSP サーバとした自作 LSP クライアント（実装編）</a>）。その際、Pyright に解析を行わせるための初期化方法がドキュメントには書かれていなかったので、VSCode 拡張用のクライアントをトレースして調査することにしました。</p><h1 id="調査方法"><a href="#調査方法" class="headerlink" title="調査方法"></a>調査方法</h1><p>Pyright のリポジトリには言語サーバ（<a href="https://github.com/microsoft/pyright/tree/main/packages/pyright"><code>packages/pyright</code></a>）だけでなく、VSCode 拡張用のクライアント（<a href="https://github.com/microsoft/pyright/tree/main/packages/vscode-pyright"><code>packages/vscode-pyright</code></a>）が存在します。今回はこの二つをデバッガで実行して調査します。</p><p><a href="https://github.com/microsoft/pyright">https://github.com/microsoft/pyright</a></p><h2 id="1-インストール"><a href="#1-インストール" class="headerlink" title="1. インストール"></a>1. インストール</h2><p><a href="https://github.com/microsoft/pyright/blob/main/docs/build-debug.md">https://github.com/microsoft/pyright/blob/main/docs/build-debug.md</a></p><p>ます、上の記事にしたがって Pyright をローカルでビルドします。</p><ol><li>Node.js のインストール</li><li><code>git clone https://github.com/microsoft/pyright.git &amp;&amp; cd pyright</code></li><li><code>npm install</code></li></ol><p>また、拡張機能として Pyright および Pylance を導入している場合には無効にします。</p><h2 id="2-デバッグ実行"><a href="#2-デバッグ実行" class="headerlink" title="2. デバッグ実行"></a>2. デバッグ実行</h2><p>Pyright を VSCode 拡張としてデバッグ実行します。VSCode のサイドバーから「実行とデバッグ」を選択し、プルダウンメニューから “Pyright extension” を選択、実行します。なお、実行時のオプションについてはプルダウンメニュー横の歯車、あるいは <a href="https://github.com/microsoft/pyright/blob/main/.vscode/launch.json"><code>.vscode/launch.json</code></a> から確認できます。</p><img src="/images/20220302a/s.png" alt="VS Codeデバッグ実行" width="1200" height="656" loading="lazy"><p>実行すると、VSCode がもう一つ別のウィンドウで立ち上がります。上部に [拡張機能開発ホスト] と書かれていることを確認します。このウィンドウは現在実行している拡張機能が反映された VSCode になっています。<br><img src="/images/20220302a/ss.png" alt="VSCode がもう一つ別のウィンドウ" width="1200" height="84" loading="lazy"></p><p>ブレークポイントが動作することを確認します。<a href="https://github.com/microsoft/pyright/blob/06e9f626f4388bc9b894daf4239a9e4a8e3ffb11/packages/vscode-pyright/src/extension.ts#L206"><code>packages/vscode-pyright/src/extension.ts:206</code></a> にはクライアントからサーバへ再起動を要求するメッセージ送信が実装されているので、ここにブレークポイントを置いてみます。[拡張機能開発ホスト] のウィンドウでコマンドパレットを開き、”Pyright: Restart Server” を実行すると、プログラムが一時停止しておりブレークポイントが機能していることを確認できます。</p><img src="/images/20220302a/スクリーンショット_(8).png" alt="コマンドパレット" width="924" height="229" loading="lazy"><img src="/images/20220302a/スクリーンショット_(10).png" alt="ブレークポイントが機能している" width="1200" height="499" loading="lazy"><h2 id="3-デバッガのアタッチ"><a href="#3-デバッガのアタッチ" class="headerlink" title="3. デバッガのアタッチ"></a>3. デバッガのアタッチ</h2><p>2 までの手順では、クライアントのみがデバッガで実行されます。しかし、メッセージを受信した後の処理はサーバ側で行われるため、調査のためにはこちらもデバッガで実行したくなります。<a href="https://github.com/microsoft/pyright/blob/06e9f626f4388bc9b894daf4239a9e4a8e3ffb11/packages/vscode-pyright/src/extension.ts#L66"><code>extension.ts:66</code></a> では、サーバがポート 6600 で建てられているので、ここにデバッガをアタッチします。<br><img src="/images/20220302a/スクリーンショット_(12).png" alt="スクリーンショット_(12).png" width="1074" height="367" loading="lazy"></p><p>「実行とデバッグ」のプルダウンメニューに “Pyright attach server” があるのでこれを “Pyright extension” 実行後に実行すればよいです。<a href="https://github.com/microsoft/pyright/blob/main/.vscode/launch.json"><code>.vscode/launch.json</code></a> の <code>&quot;port&quot;: 6600</code> が先ほど確認したポートと一致することに注意します。<br><img src="/images/20220302a/スクリーンショット_(11).png" alt="スクリーンショット_(11).png" width="1200" height="546" loading="lazy"></p><p><a href="https://github.com/microsoft/pyright/blob/06e9f626f4388bc9b894daf4239a9e4a8e3ffb11/packages/pyright-internal/src/commands/restartServer.ts#L18"><code>pyright-internal/src/commands/restartServer.ts</code></a> がサーバ側で再起動コマンドを扱う部分です。ブレークポイントを打って同様にメッセージを送信すると、一時停止することが確認できます。<br><img src="/images/20220302a/スクリーンショット_(13).png" alt="デバッガをアタッチ" width="1200" height="586" loading="lazy"></p><p>アタッチできていない場合には、下の画像のように Unbound breakpoint となり一時停止しません。<br><img src="/images/20220302a/スクリーンショット_(14).png" alt=".vscode/launch.json" width="909" height="224" loading="lazy"></p><h1 id="調査内容"><a href="#調査内容" class="headerlink" title="調査内容"></a>調査内容</h1><h2 id="1-Initialize-Request"><a href="#1-Initialize-Request" class="headerlink" title="1. Initialize Request"></a>1. Initialize Request</h2><p><a href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initialize">初期化関連の仕様</a>を見ると、メソッド <code>initialize</code> は送信する必要がありそうです。そこでまず次の二つを順に送信してみます。</p><blockquote><ol><li><code>initialize</code> メソッド：サーバの初期化を要求</li><li>適当な解析メソッド</li></ol></blockquote><p>すると、<a href="https://github.com/microsoft/pyright/blob/844f7cb98987955dc617cd97b1372325e76a4530/packages/pyright-internal/src/languageServerBase.ts#L415"><code>pyright-internal/src/commands/languageServerBase.ts:417</code></a> で停止してしまいました。<code>workspace.isInitialized</code> が <code>true</code> とならないことが原因です。</p><img src="/images/20220302a/スクリーンショット_(15).png" alt="workspace.isInitialized" width="923" height="131" loading="lazy"><p>したがって、<code>initialize</code> メソッドの後に何か他のメソッドを送信する必要がありそうです。</p><blockquote><ol><li><code>initialize</code> メソッド：サーバの初期化を要求</li><li>???：ワークスペースを初期化</li><li>適当な解析メソッド</li></ol></blockquote><h2 id="2-DidChangeWorkspaceFolders-Notification"><a href="#2-DidChangeWorkspaceFolders-Notification" class="headerlink" title="2. DidChangeWorkspaceFolders Notification"></a>2. DidChangeWorkspaceFolders Notification</h2><p>調べると、<code>workspace.isInitialized</code> はメソッド <a href="https://github.com/microsoft/pyright/blob/844f7cb98987955dc617cd97b1372325e76a4530/packages/pyright-internal/src/languageServerBase.ts#L1265"><code>updateSettingsForWorkspace</code></a> が実行されて <code>true</code> となります。</p><img src="/images/20220302a/スクリーンショット_(16).png" alt="DidChangeWorkspaceFolders Notification" width="967" height="384" loading="lazy"><p>このメソッドは <a href="https://github.com/microsoft/pyright/blob/844f7cb98987955dc617cd97b1372325e76a4530/packages/pyright-internal/src/languageServerBase.ts#L581"><code>onDidChangeWorkspaceFolders</code></a> で管理されているので、<code>workspace/didChangeWorkspaceFolders</code> を送信することで呼ばれます。</p><img src="/images/20220302a/スクリーンショット_(18).png" alt="workspace/didChangeWorkspaceFolders" width="742" height="269" loading="lazy"><p>つまり、手順としては次のようになります。</p><blockquote><ol><li><code>initialize</code> メソッド：サーバの初期化を要求</li><li><code>workspace/didChangeWorkspaceFolders</code> メソッド：ワークスペースフォルダを変更</li><li>適当な解析メソッド</li></ol></blockquote><p>ただし、<code>onDidChangeWorkspaceFolders</code> は特定の条件で有効化されることに注意します。</p><h2 id="3-Initialized-Notification"><a href="#3-Initialized-Notification" class="headerlink" title="3. Initialized Notification"></a>3. Initialized Notification</h2><p><a href="https://github.com/microsoft/pyright/blob/844f7cb98987955dc617cd97b1372325e76a4530/packages/pyright-internal/src/languageServerBase.ts#L579"><code>onDidChangeWorkspaceFolders</code>の前後</a> を確認すると、有効化には以下の二つの条件を満たす必要があります。</p><ol><li><code>initialized</code> メソッドの送信</li><li><code>this.client.hasWorkspaceFoldersCapability = true</code></li></ol><p>1 は明らかに送信するだけです。<a href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initialized"><code>initialized</code> メソッド</a> は サーバからの InitializeResult に対応するものなので、タイミングは InitializeResult を受け取った後、<code>workspace/didChangeWorkspaceFolders</code> メソッドを送信する前になります。2 はわかりにくいですが、<a href="https://microsoft.github.io/language-server-protocol/specifications/specification-current/#initialize"><code>initialize</code>メソッド</a> のオプションに <code>capabilities</code> があるのでここで登録します。つまり、初期化方法は全体で次のようになることがわかりました。</p><blockquote><ol><li><code>initialize</code> メソッド：サーバの初期化を要求<br>a. <code>capabilities.workspace.workspaceFolders = true</code>：ワークスペースフォルダ機能を有効化</li><li><code>initialized</code> メソッド：クライアント側の初期化が完了したことを通知</li><li><code>workspace/didChangeWorkspaceFolders</code> メソッド：ワークスペースフォルダの変更を通知</li><li>適当な解析メソッド</li></ol></blockquote><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>以上から、Pyright の初期化は下図のようにして行われることがわかりました。実装は<a href="/articles/20220303a/">Pyright を LSP サーバとした自作 LSP クライアント（実装編）</a>で扱っていますので、合わせて読んでいただければと思います。</p><img src="/images/20220302a/スクリーンショット_(19).PNG" alt="シーケンス図" width="807" height="529" loading="lazy">]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Python/">Python</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B3%E3%82%A2%E3%83%86%E3%82%AF/">コアテク</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%A7%8B%E6%96%87%E8%A7%A3%E6%9E%90/">構文解析</category>
      
      <category domain="https://future-architect.github.io/tags/Pyright/">Pyright</category>
      
      <category domain="https://future-architect.github.io/tags/LSP/">LSP</category>
      
      
      <comments>https://future-architect.github.io/articles/20220302a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Mypy と Pyright の解析手法と型情報の比較</title>
      <link>https://future-architect.github.io/articles/20220301a/</link>
      <guid>https://future-architect.github.io/articles/20220301a/</guid>
      <pubDate>Mon, 28 Feb 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220301a/mypy.png&quot; alt=&quot;&quot; width=&quot;600&quot; weihgt=&quot;376&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220301a/mypy.png" alt="" width="600" weihgt="376"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>Mypy や Pyright は Python の静的解析ツールとして有名ですが、これら二つに解析情報でどのような違いがあるのかわからなかったので、実験することにしました。Pyright は Mypy に比べて後発のプロジェクトですが、性能面で優れているなどとして徐々に注目を集めています。</p><ul><li><a href="https://github.com/python/mypy">https://github.com/python/mypy</a></li><li><a href="https://github.com/microsoft/pyright">https://github.com/microsoft/pyright</a></li></ul><p>解析以外での比較はこちらが参考になります。</p><ul><li><a href="https://qiita.com/simonritchie/items/7492d1c1a3c13b2f27aa#%E4%BA%8B%E5%89%8D%E3%81%AEpyright%E3%81%AE%E8%BF%BD%E5%8A%A0">https://qiita.com/simonritchie/items/7492d1c1a3c13b2f27aa#%E4%BA%8B%E5%89%8D%E3%81%AEpyright%E3%81%AE%E8%BF%BD%E5%8A%A0</a></li></ul><h1 id="実験概要"><a href="#実験概要" class="headerlink" title="実験概要"></a>実験概要</h1><p>Mypy、Pyright はともに <code>reveal_type(expr)</code> という機能があります。これを解析対象のコードに挿入すると、実行時点での <code>expr</code> の型情報を表示することができます。Mypy、Pyright の両者で同一コードに解析を行いその結果を比較します。以下、コード中ではコメントで <code>reveal_type</code> の結果を記録し、<code>reveal_type</code> 自体の記述は省略します。</p><h2 id="実験-1-再代入"><a href="#実験-1-再代入" class="headerlink" title="実験 1: 再代入"></a>実験 1: 再代入</h2><figure class="highlight py"><figcaption><span>Mypy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span>     <span class="comment"># Revealed type is &quot;builtins.int&quot;</span></span><br><span class="line">a = <span class="string">&#x27;str&#x27;</span>  <span class="comment"># error: Incompatible types in assignment (expression has type &quot;str&quot;, variable has type &quot;int&quot;)</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><figcaption><span>Pyright</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span>     <span class="comment"># Type of &quot;a&quot; is &quot;Literal[10]&quot;</span></span><br><span class="line">a = <span class="string">&#x27;str&#x27;</span>  <span class="comment"># Type of &quot;a&quot; is &quot;Literal[&#x27;str&#x27;]&quot;</span></span><br></pre></td></tr></table></figure><p><code>a</code> に型の違う値を再代入しています。</p><ul><li>Mypy は 1 行目の代入によって <code>a</code> の型を <code>builtins.int</code> に確定させるため、2 行目の代入は型の違いで失敗します。これは Python 本来の挙動とは異なりますが、暗黙の変換がないため型チェックの観点からは安全です。</li><li>Pyright はリテラルを別の型に変換せず、リテラルのままで表現しています。また、代入によって型が変わっても、特別問題視はしないようです。</li></ul><h2 id="実験-2-オーバーライド"><a href="#実験-2-オーバーライド" class="headerlink" title="実験 2: オーバーライド"></a>実験 2: オーバーライド</h2><figure class="highlight py"><figcaption><span>Mypy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span>     <span class="comment"># Revealed type is &quot;def () -&gt; builtins.int&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">override</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span>  <span class="comment"># Revealed type is &quot;def () -&gt; builtins.int&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span>(<span class="params">Parent</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">override</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span>  <span class="comment"># error: Return type &quot;str&quot; of &quot;override&quot; incompatible with return type &quot;int&quot; in supertype &quot;Parent&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;override&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><figcaption><span>Pyright</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span>     <span class="comment"># Type of &quot;Parent().hello&quot; is &quot;() -&gt; int&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">override</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span>  <span class="comment"># Type of &quot;Parent().override&quot; is &quot;() -&gt; int&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span>(<span class="params">Parent</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">override</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span>  <span class="comment"># Type of &quot;Child().override&quot; is &quot;() -&gt; str&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;override&quot;</span></span><br></pre></td></tr></table></figure><p>戻り値型の異なるメソッドをオーバーライドしています。Java などのオーバーライドはシグネチャの一致が求められますが、Python ではこのようなオーバーライドが可能です。Mypy では、<code>Child.override</code> はエラーになりますが、Pyright ではエラーになりません。</p><h2 id="実験-3-戻り値の型推論"><a href="#実験-3-戻り値の型推論" class="headerlink" title="実験 3: 戻り値の型推論"></a>実験 3: 戻り値の型推論</h2><figure class="highlight py"><figcaption><span>Mypy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a: <span class="built_in">int</span></span>):</span>  <span class="comment"># Revealed type is &quot;def (a: builtins.int) -&gt; Any&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a       <span class="comment"># Revealed type is &quot;builtins.int&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><figcaption><span>Pyright</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a: <span class="built_in">int</span></span>):</span>  <span class="comment"># Type of &quot;func&quot; is &quot;(a: int) -&gt; int&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a       <span class="comment"># Type of &quot;a&quot; is &quot;int&quot;</span></span><br></pre></td></tr></table></figure><p>引数の型から推論をすれば <code>func</code> は明らかに <code>(int) -&gt; int</code> となりますが、Mypy は推論を行わないようになっており、戻り値の型が <code>Any</code> になります。</p><h2 id="実験-4-戻り値の型チェック"><a href="#実験-4-戻り値の型チェック" class="headerlink" title="実験 4: 戻り値の型チェック"></a>実験 4: 戻り値の型チェック</h2><figure class="highlight py"><figcaption><span>Mypy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span>  <span class="comment"># Revealed type is &quot;def (a: builtins.int) -&gt; builtins.str&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a              <span class="comment"># error: Incompatible return value type (got &quot;int&quot;, expected &quot;str&quot;)</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><figcaption><span>Pyright</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">a: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span>  <span class="comment"># Type of &quot;func&quot; is &quot;(a: int) -&gt; str&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a              <span class="comment"># error: Expression of type &quot;int&quot; cannot be assigned to return type &quot;str&quot; &quot;int&quot; is incompatible with &quot;str&quot; (reportGeneralTypeIssues)</span></span><br></pre></td></tr></table></figure><p>実験 3 の関数に戻り値の型をヒントとして与えています。すると先ほどとは違い、両者ともエラーを出すようになりました。Mypy もヒントがある場合には推論して整合性のチェックを行うようです。</p><h2 id="実験-5-タイプナローイング"><a href="#実験-5-タイプナローイング" class="headerlink" title="実験 5: タイプナローイング"></a>実験 5: タイプナローイング</h2><figure class="highlight py"><figcaption><span>Mypy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">flg: <span class="built_in">bool</span>, i: <span class="built_in">int</span>, j: <span class="built_in">str</span></span>):</span>  <span class="comment"># Revealed type is &quot;def (flg: builtins.bool, i: builtins.int, j: builtins.str) -&gt; Any&quot;</span></span><br><span class="line">    <span class="keyword">if</span> flg:</span><br><span class="line">        a = i  <span class="comment"># Revealed type is &quot;builtins.int&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a = j  <span class="comment"># error: Incompatible types in assignment (expression has type &quot;str&quot;, variable has type &quot;int&quot;)</span></span><br><span class="line">    <span class="keyword">return</span> a   <span class="comment"># Revealed type is &quot;builtins.int&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><figcaption><span>Pyright</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">flg: <span class="built_in">bool</span>, i: <span class="built_in">int</span>, j: <span class="built_in">str</span></span>):</span>  <span class="comment"># Type of &quot;func&quot; is &quot;(flg: bool, i: int, j: str) -&gt; (int | str)&quot;</span></span><br><span class="line">    <span class="keyword">if</span> flg:</span><br><span class="line">        a = i  <span class="comment"># Type of &quot;a&quot; is &quot;int&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a = j  <span class="comment"># Type of &quot;a&quot; is &quot;str&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a   <span class="comment"># Type of &quot;a&quot; is &quot;int | str&quot;</span></span><br></pre></td></tr></table></figure><p>if 文の分岐によって <code>a</code> の型が変わる例です。</p><ul><li>Mypy は 5 行目でエラーが出ました。実験 1 と同様に 3 行目で <code>a</code> の型が <code>builtins.int</code> に確定しているためです。</li><li>Pyright はエラーが出ません。分岐ごとに <code>a</code> の型を独立に判断し、戻り値の段階ではこれらの和を取っています。このような技術は Pyright のドキュメント内で <a href="https://github.com/microsoft/pyright/blob/main/docs/type-concepts.md#type-narrowing">Type Narrowing</a> として紹介されています。</li></ul><h2 id="実験-6-タイプナローイング（到達不能な分岐がある場合）"><a href="#実験-6-タイプナローイング（到達不能な分岐がある場合）" class="headerlink" title="実験 6: タイプナローイング（到達不能な分岐がある場合）"></a>実験 6: タイプナローイング（到達不能な分岐がある場合）</h2><figure class="highlight py"><figcaption><span>Mypy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">flg: <span class="built_in">bool</span>, i: <span class="built_in">int</span>, j: <span class="built_in">str</span></span>):</span>  <span class="comment"># Revealed type is &quot;def (flg: builtins.bool, i: builtins.int, j: builtins.str) -&gt; Any&quot;</span></span><br><span class="line">    <span class="keyword">if</span> flg:             <span class="comment"># Revealed type is &quot;builtins.bool&quot;</span></span><br><span class="line">        a = i           <span class="comment"># Revealed type is &quot;builtins.int&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> flg:       <span class="comment"># Revealed type is &quot;builtins.bool&quot;</span></span><br><span class="line">        a = j           <span class="comment"># error: Incompatible types in assignment (expression has type &quot;str&quot;, variable has type &quot;int&quot;)</span></span><br><span class="line">    <span class="keyword">else</span>:               <span class="comment"># Revealed type is &quot;builtins.bool&quot;</span></span><br><span class="line">        reveal_type(a)  <span class="comment"># Revealed type is &quot;builtins.int&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> a            <span class="comment"># Revealed type is &quot;builtins.int&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><figcaption><span>Pyright</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">flg: <span class="built_in">bool</span>, i: <span class="built_in">int</span>, j: <span class="built_in">str</span></span>):</span>  <span class="comment"># Type of &quot;func&quot; is &quot;(flg: bool, i: int, j: str) -&gt; (int | str)&quot;</span></span><br><span class="line">    <span class="keyword">if</span> flg:             <span class="comment"># Type of &quot;flg&quot; is &quot;Literal[True]&quot;</span></span><br><span class="line">        a = i           <span class="comment"># Type of &quot;a&quot; is &quot;int&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> flg:       <span class="comment"># Type of &quot;flg&quot; is &quot;Literal[False]&quot;</span></span><br><span class="line">        a = j           <span class="comment"># Type of &quot;a&quot; is &quot;str&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:               <span class="comment"># Type of &quot;flg&quot; is &quot;Never&quot;</span></span><br><span class="line">        reveal_type(a)  <span class="comment"># error: &quot;a&quot; is possibly unbound (reportUnboundVariable)</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> a            <span class="comment"># Type of &quot;a&quot; is &quot;int | str | Unbound&quot;</span></span><br></pre></td></tr></table></figure><p>実験 5 の if 文に到達しない分岐 (<code>else</code>) を追加します。</p><ul><li>Pyright では 6 行目で <code>flg</code> の型を <code>Never</code> としています。<code>bool</code> は <code>True</code> と <code>False</code> の 2 値しかないため、上 2 つの分岐で消費し、<code>else</code> 内に到達する <code>flg</code> は存在しないことを表しています。こちらも Pyright のドキュメント内で <a href="https://github.com/microsoft/pyright/blob/main/docs/internals.md#type-checking-concepts">Type Checking Concepts</a> として紹介されています。</li></ul><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>Mypy と Pyright では型情報の用途が違う印象を受けます。Pyright は Python の挙動を極力トレースした上で、入力補完など利便性を高める機能に必要な情報を、型ヒントや型推論を用いて特定しているように見えます。対照的に、Mypy はヒントなしでの型の異なる代入を禁止するなど、Python とは異なる型システムを導入し、その中で厳密なコーディングを求めるような設計になっていそうです。個人的には、両者に優劣があるわけではなく、ユースケースによって使い分けが存在するという言い方がしっくりきています。</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><p><a href="https://blog.abarabakuhatsu.com/changed_python_type_checking_tool_from_mypy">https://blog.abarabakuhatsu.com/changed_python_type_checking_tool_from_mypy</a></p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Python/">Python</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B3%E3%82%A2%E3%83%86%E3%82%AF/">コアテク</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%A7%8B%E6%96%87%E8%A7%A3%E6%9E%90/">構文解析</category>
      
      <category domain="https://future-architect.github.io/tags/Mypy/">Mypy</category>
      
      <category domain="https://future-architect.github.io/tags/Pyright/">Pyright</category>
      
      
      <comments>https://future-architect.github.io/articles/20220301a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>A5:SQL Mk-2に回帰した話</title>
      <link>https://future-architect.github.io/articles/20220225a/</link>
      <guid>https://future-architect.github.io/articles/20220225a/</guid>
      <pubDate>Thu, 24 Feb 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG/DXチームの宮崎将太です。</p><p>みなさま、ER図を作成するとき、どんなツールを使っていますか？</p><p>タイトル通りの出オチですが、数度の輪廻転生を経て私はA5:SQL Mk-2（以下A5M2）を使用しています。ツールをお勧めする記事は多数ありますが、意外と現場のリアルな事情を踏まえた投稿は見当たらなかったので、経験を踏まえてER図作成ツールの比較検討していきたいと思います。</p><h2 id="What’s-A5M2"><a href="#What’s-A5M2" class="headerlink" title="What’s A5M2"></a>What’s A5M2</h2><p>真面目な比較検討は後述しますが、文脈の都合上最低限度の情報としてA5M2が何者か記載しておきます。</p><ul><li>無料のER図作成ツール兼SQLクライアント<br><a href="https://a5m2.mmatsubara.com/">https://a5m2.mmatsubara.com/</a></li><li>古くは2007年から開発が続けられており、ER図作成ツールとしては超古参。<br>内部的には1997年から脈々と開発が続けられています。<br>最近(2022/1/23)も大幅なUpdateが加えられました。<br><a href="https://a5m2.mmatsubara.com/document/history.txt">https://a5m2.mmatsubara.com/document/history.txt</a></li><li>対応OSはWindowsのみ（超重要）<br>これが原因で道に迷う方も多いのではないかと思います。<br>私が輪廻転生を遂げるきっかけもこの事象が原因です。</li></ul><img src="/images/20220225a/image.png" alt="A5M2" width="1000" height="556" loading="lazy"><h2 id="経緯"><a href="#経緯" class="headerlink" title="経緯"></a>経緯</h2><p>そもそも何故ER図作成ツールで輪廻転生しているのか簡単にご説明です。<br>ざっくり↓の遍歴です。</p><h3 id="7年前から5年程WindowsでA5M2使用"><a href="#7年前から5年程WindowsでA5M2使用" class="headerlink" title="7年前から5年程WindowsでA5M2使用"></a>7年前から5年程WindowsでA5M2使用</h3><p>当時のプロジェクト標準になっていたこともありA5M2を使用していました。</p><p>この時は会社通じてWindowsメインだった（Mac調達もできたけど標準PCではなかった）ので、どこのプロジェクトに行ってもだいたいA5M2だったかなと思います。</p><p>※プロジェクトサイズが超大規模になると、テーブル管理がエクセルになったり諸々あり。今思うとこの時点でA5M2が浸透していたのは偉大な先人の知恵であり、余計な手間からメンバを守ってくれていたのだなとしみじみ思います。</p><h3 id="2年前にWindows→Macに乗り換え"><a href="#2年前にWindows→Macに乗り換え" class="headerlink" title="2年前にWindows→Macに乗り換え"></a>2年前にWindows→Macに乗り換え</h3><p>2~3年前くらいのタイミングで会社標準PCとしてMacが選択可能になったこともあり、メインマシンをMacに交換しました。</p><p>開発含む普段の操作は圧倒的にMacの方が軽快でしたが、お察しの通りA5M2が使えなくなりました。</p><p>私と同じ理由でMacに交換するメンバーも多く、なんとかMacでDBモデリングをするツールを探そうとし始めます。</p><h3 id="ツールに迷走する"><a href="#ツールに迷走する" class="headerlink" title="ツールに迷走する"></a>ツールに迷走する</h3><p>都合の良い代替製品は見つかりませんでしが、当時PostgreSQLを使用していたこともあり、pgModelerを使用し始めました。</p><p>Mac版もWindows版もあり、かつ自前でビルドしてあげれば無料で使用でき、ぱっと見困りごとはなさそうでしたが↓のような問題が発生します。</p><ul><li><strong>リレーションを貼るとFK制約が勝手に作成され、かつ削除できない</strong><br>細かいですが、こういうちょっとした仕様で余計なコストをくらい続けます。<br>DBのお作法的には全く正しいのですが、既に稼働しているシステムの定義には合わせざるを得ないので、DDLにしてから手動で削除するなど対応が必要になります。<br>DB純正のツールはこういった事情が多いイメージです。</li><li><strong>git上で差分がわからない</strong><br>ファイル拡張子は<code>.dbm</code>ですが、実体はzip形式のバイナリファイルです。<br>git pushしたところで差分がわからず、いちいちローカルに持ってきて確認するコストが発生します。</li><li><strong>根本的に他DBに対応できない</strong><br>個人的にはこれが一番モチベーション的に辛かった記憶があります。<br>なんとかツール仕様に対応したところで、たとえばMySQLを使用する場合はMySQL Workbenchに乗り換えが必要だったり。<br>使用するDBが変わってもツールは統一したくなります。</li></ul><p>上記のような問題を解決するため、プロジェクトが変わるたびに頭を悩ませて新ツールに挑戦するのですがなかなか満足のいくツールはありませんでした。</p><p>有料版にまで手を出し、迷走と言って全く過言ではない状態だったのを覚えています。</p><p>※↓pgModeler操作画面。posgreSQL本家が出しているだけあり、UIはとてもおしゃれ。<br><img src="/images/20220225a/image_2.png" alt="pgModeler操作画面" width="1200" height="651" loading="lazy"></p><h2 id="ER図作成ツールに求められる要件"><a href="#ER図作成ツールに求められる要件" class="headerlink" title="ER図作成ツールに求められる要件"></a>ER図作成ツールに求められる要件</h2><p>さて、前置きが長くなりましたが、本題です。<br>前述のような状態からA5M2に転生するのですが、その時考えた内容をまとめておきます。</p><h3 id="想定する環境"><a href="#想定する環境" class="headerlink" title="想定する環境"></a>想定する環境</h3><p>まず前提として、想定される環境です。<br>FutureのDXチームだと↓のような状況が多く、対応できるツールを模索していました。</p><ul><li>Windonws/Mac混在<ul><li>MacOSはCatalina</li></ul></li><li>中規模以上開発<ul><li>設計/開発者10人以上</li><li>エンティティ数50以上</li></ul></li><li>DBはプロジェクトごとに異なる<ul><li>PostgreSQL/MySQL/SQL Server/（最近あまりないけど）Oracle</li><li>RedShift/BigQuery etc…</li></ul></li></ul><h3 id="求められる要件"><a href="#求められる要件" class="headerlink" title="求められる要件"></a>求められる要件</h3><p>議論の余地はあると思いますが、求められるであろう要件一覧です。</p><p>MUST/WANTは現場によって変わるので、都度フィッティングする必要はあると思います。ほぼ全てMUSTになっていますが、あくまで主観です。</p><div class="scroll"><table><thead><tr><th>機能（仕様）</th><th>MUST/WANT</th><th>説明</th></tr></thead><tbody><tr><td>GUI作図機能</td><td>MUST</td><td>当然ですがER図をGUIで作図する機能です。<br> 世の中にはCUIベースでしか作図できないツールもあるので、求められる機能にカウントしておきます。</td></tr><tr><td>DBオブジェクト管理</td><td>MUST</td><td>最低限のDBオブジェクトの管理機能です。（スキーマ/テーブル/インデックス/シーケンス/ビュー） <br> テーブル項目だけで、シーケンスやインデックスを管理できないと実運用上は立ちいきません。</td></tr><tr><td>型桁管理</td><td>MUST</td><td>これも当然ですが、カラムの型桁設定機能です。 <br> 使用するDBに依存するのではなく、自由記述ができるものが望ましいです。 <br> 必須/PK/FK/その他制約設定もここに含みます。</td></tr><tr><td>論理名/物理名管理（日本語対応含む）</td><td>MUST</td><td>日本語表示を含めた論理名/物理名の管理機能です。<br>  海外製だと日本語表示ができないことがあるので、必要機能としてカウントしておきます。 <br> ER図自体の表示を論理名/物理名で切り替えられるとなお良しです。</td></tr><tr><td>DBドメイン管理</td><td>MUST</td><td>この辺りから当たり前機能ではなくなってくる印象がありますが、DBドメインの管理機能です。<br> カラムの型桁を論理的に意味のある形式に定義します。 <br> ex) <br> 型桁: varchar(255) ドメイン: メールアドレス <br>型桁: int ドメイン: 会員ID  <br><br> プロジェクトサイズが大きくなるとドメイン管理がデータモデルの足腰になるので、個人的には外せない機能です。</td></tr><tr><td>DDL生成機能</td><td>MUST</td><td>テーブル定義からDDLを生成する機能です。<br> 作図だけでDDL生成はできない物も存在するので、忘れずに要件カウントします。</td></tr><tr><td>対応OS</td><td>MUST</td><td>前項で述べましたが超重要要素、windows/mac両対応か否かです。（通常業務用途なので、Linux系は考えません。） <br> 設計/開発マシンをどちらかに限定する発想もあるかとは思いますが、 windows onlyだった時代からのエンジニア的な良い流れを止めたくないのでMUST要件として考えます。</td></tr><tr><td>静的解析/加工可否</td><td>MUST</td><td>ER図ファイルを解析/加工できるか・しやすいか否かです。（≒テキストファイルか否か） <br>同じく個人的に超重要要素で、例えば↓のような対応が可能になります。 <br>　・エディタでER図ファイルを開いて一括置換　<br> 　・CIで禁止文言ないかなどチェックをかける <br>　・同じくCIで他設計書と整合性が取れているかチェックをかける <br>　・自動で論物変換をかける <br> ER図設計作業は細かな設定作業も多く、人力チェックだけではミスも発生してしまいます。<br>プロダクト品質を決める重要要素なのでMUST要件としています。</td></tr><tr><td>標準SQL対応</td><td>MUST</td><td>生成されるDML/DDLが特定のDBに依存した記述になっていないかどうかです。 <br>SQLには標準仕様が存在するので、その仕様に則ることでDBが変わってもツールを変更することなく設計が可能になります。 <br>標準SQLに則っていなくとも、生成されるSQLそのものをカスタマイズできれば要件的にはOKです。</td></tr><tr><td>共同編集可否</td><td>WANT</td><td>スプレッドシートのようにweb上で共同編集できる機能です。 設計立ち上げ期でこういったことができると迅速に立ち上げが可能になります。 個人的には必須ではないと考えますが、昨今のツールはこの手のものも多いので検討要素にはあげておきます。</td></tr><tr><td>価格</td><td>WANT</td><td>最後が価格です。 <br>当然ですが安ければ安いほど良く、無料が望ましい。 <br>ただし、ITプロジェクト全体からすると微々たる費用なので、必要であれば購入しても良いと思います。</td></tr></tbody></table></div><h2 id="ツールごとの比較"><a href="#ツールごとの比較" class="headerlink" title="ツールごとの比較"></a>ツールごとの比較</h2><p>要件をもとにしたツールごとの比較です。</p><div class="scroll"><table><thead><tr><th>要件</th><th>MUST/WANT</th><th>pgModeler</th><th>MySQL Workbench</th><th>Draw.io</th><th>LucidChart</th><th>DBDiagram.io</th><th>A5M2</th></tr></thead><tbody><tr><td>GUI作図機能</td><td>MUST</td><td>○</td><td>○</td><td>○</td><td>○</td><td>×</td><td>○</td></tr><tr><td>DBオブジェクト管理</td><td>MUST</td><td>○</td><td>○</td><td>×</td><td>△</td><td>○</td><td>○</td></tr><tr><td>型桁管理</td><td>MUST</td><td>○</td><td>○</td><td>×</td><td>△</td><td>○</td><td>○</td></tr><tr><td>論理名/物理名管理（日本語対応含む）</td><td>MUST</td><td>○</td><td>○</td><td>○</td><td>○</td><td>×</td><td>○</td></tr><tr><td>DBドメイン管理</td><td>MUST</td><td>○</td><td>○</td><td>×</td><td>×</td><td>×</td><td>○</td></tr><tr><td>DDL生成機能</td><td>MUST</td><td>○</td><td>○</td><td>×</td><td>○</td><td>○</td><td>○</td></tr><tr><td>対応OS</td><td>MUST</td><td>○</td><td>○</td><td>○</td><td>○</td><td>○</td><td>×</td></tr><tr><td>静的解析/加工可否</td><td>MUST</td><td>△</td><td>△</td><td>×</td><td>×</td><td>×</td><td>○</td></tr><tr><td>標準SQL対応</td><td>MUST</td><td>×</td><td>×</td><td>×</td><td>○</td><td>○</td><td>○</td></tr><tr><td>共同編集可否</td><td>WANT</td><td>×</td><td>×</td><td>○</td><td>○</td><td>○</td><td>×</td></tr><tr><td>価格</td><td>WANT</td><td>○</td><td>○</td><td>○</td><td>△</td><td>△</td><td>○</td></tr></tbody></table></div><h3 id="総評"><a href="#総評" class="headerlink" title="総評"></a>総評</h3><p>それぞれ以下の評価です。<br>満点のツールは存在しないので、短所を何かしらで埋めてあげる対応が必要があります。</p><ul><li><strong>pgModeler</strong><br><a href="https://pgmodeler.io/">https://pgmodeler.io/</a><br>冒頭で記載したPostgreSQLネイティブツールです。<br>DB依存なのと、ファイル形式がバイナリな点が無視できないマイナス要素。<br>自力でzip解凍すればxmlが現れるので、頑張れば解析できなくもありませんが、書き換えは厳しそう。</li><li><strong>MySQL Workbench</strong><br><a href="https://www.mysql.com/jp/products/workbench/">https://www.mysql.com/jp/products/workbench/</a><br>MySQLのネイティブツールです。<br>評価はpgModelerと同様。</li><li><strong>LucidChart</strong><br><a href="https://www.lucidchart.com/pages/ja">https://www.lucidchart.com/pages/ja</a><br>クラウドベースのER図作成ツールで、メインどころのDBには対応しています。（MySQL、PostgreSQL、SQL Server や Oracle）<br>DB管理としては若干機能不足&amp;静的解析は無理そうなので、シビアな現場にはfitしにくそうです。<br>速度優先でガンガン変更を本番に反映していくサービスであれば採用の可能性はあるかと思いますが、<br>どこかのタイミングでしっかりしたツールに乗り換える必要がある印象です。<br>フリー版もありますが、縛りがきびしいので最低でも月額800円程度支払う必要があります。</li><li><strong>DBDiagram.io</strong><br>コードベースでER図を記載できるwebベースツールです。<br>個人で使う分にはありなのですが、GUIでの定義ができない点がチーム展開には厳しいと感じました。<br>また、定義中に日本語を使用することができなく、コメントで対応する必要がありました。<br>無料でも使えますが、バージョン管理など積むと月額9ドル必要です。</li><li><strong>A5M2</strong><br><a href="https://a5m2.mmatsubara.com/">https://a5m2.mmatsubara.com/</a><br>件のwindows向けER図作成ツールです。<br>Macで使えないのと、共同編集不可な点以外は全て要件を満たしています。</li></ul><h2 id="MacでA5M2を使う"><a href="#MacでA5M2を使う" class="headerlink" title="MacでA5M2を使う"></a>MacでA5M2を使う</h2><h3 id="wineで解決"><a href="#wineで解決" class="headerlink" title="wineで解決"></a>wineで解決</h3><p>A5M2の問題はMac版がリリースされていないことですが、wine（Macでexeを使用できるようにするツール）を使用することで解決しました。<br><a href="https://bottoms-programming.com/archives/a5sql-mk-2-after-mac-catalina.html">https://bottoms-programming.com/archives/a5sql-mk-2-after-mac-catalina.html</a></p><p>日本語が文字化けする問題や、そもそも操作感大丈夫なのか？という疑念がMAXで実験的に使ってみたんですが悪くない触り心地でした。</p><p>普通のMacアプリだと保存キーが<code>⌘-S</code>のところ、<code>Ctrl-S</code>になっているなど、WindowsとMacのキーバインド問題はありますが、自前の設定でなんとかなる範疇です。（<code>Ctrl</code>を<code>⌘</code>に置き換える程度で解決）</p><p>(2022.02.26追記) A5:SQL Mk-2開発者の松原さんからコメントいただきました。</p><p><a href="https://a5m2.mmatsubara.com/wp/?p=8950">Arm Mac (M1 Mac) 上で Wine を使ってA5:SQL Mk-2を動作させる方法</a> というエントリーもぜひ確認ください。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">Wine を使って Mac 上でA5:SQL Mk-2 を使う記事は自分も書いているのだけれど、いまいち見られていない気がする…？ <a href="https://t.co/kEjCejBgRy">https://t.co/kEjCejBgRy</a> <a href="https://t.co/Bf4qFpxJ6t">https://t.co/Bf4qFpxJ6t</a></p>&mdash; 松原正和 (m.matsubara) (@m_matsubara) <a href="https://twitter.com/m_matsubara/status/1497152258005340160?ref_src=twsrc%5Etfw">February 25, 2022</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>なお、この記事が出るより前にwine上で動かすことにトライしたため、コメントを貰うまで記事の存在に気が付きませんでした。すれ違い..。</p><h3 id="A5M2戻ってみて"><a href="#A5M2戻ってみて" class="headerlink" title="A5M2戻ってみて"></a>A5M2戻ってみて</h3><p>以下、いざA5M2に戻ってみてざっと感じたことです。</p><ul><li><strong>リレーション/ドメイン管理の自由度が高い</strong><br>良いのか悪いのかは微妙ですが、変な制約なしに思った通りにリレーションやドメイン管理が可能です。<br>プロダクトのディープな事情についていける点がとても嬉しい。</li><li><strong>ファイル直接操作可能</strong><br>なんと言ってもこの恩恵が大きいです。<br>エディタでgrep置換、スクリプトで論物変換、名称揺れチェック、解析してソースコード生成etc…<br>体感、一回りプロダクトの品質が向上したことを感じます。</li><li><strong>Macで目立ったトラブルもない</strong><br>複数プロジェクトで1年程度wine運用していますが、特段のトラブルもなくER図管理ができています。<br>環境構築も面倒とまではいかないので、プロジェクトメンバへの導入で躓くということもありませんでした。</li></ul><h3 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h3><p>ER図作成ツールの比較した結果全てを満たすツールが見当たらなかったのでMac+wineでA5M2を使用することにしましたが、そもそもMac対応版がリリースされればもっと幸せだったり、webベースツールでもっと良いものが出ればそちらを使用する選択肢が出てくると思います。</p><p>あまり脚光を浴びない割に日進月歩で進化しているので、定期的にウォッチして良いものがあれば別記事を書こうかなと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DB/">DB</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/">設計</category>
      
      <category domain="https://future-architect.github.io/tags/ER%E5%9B%B3/">ER図</category>
      
      <category domain="https://future-architect.github.io/tags/DB%E8%A8%AD%E8%A8%88/">DB設計</category>
      
      <category domain="https://future-architect.github.io/tags/A5-SQLMk-2/">A5:SQLMk-2</category>
      
      
      <comments>https://future-architect.github.io/articles/20220225a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Future Tech Night #19「新聞業界を変革するクラウドサービス「GlyphFeeds」を支えるAWSサービス」</title>
      <link>https://future-architect.github.io/articles/20220224a/</link>
      <guid>https://future-architect.github.io/articles/20220224a/</guid>
      <pubDate>Wed, 23 Feb 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220224a/glyphfeeds_top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;363&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220224a/glyphfeeds_top.png" alt="" width="800" height="363"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは！2020年7月入社の原と、2021年4月入社の岡田です。</p><p>2022年1月28日に<a href="https://future.connpass.com/event/236138/">Future Tech Night #19 AWS CodePipelineと新聞向けCMS構築事例</a>を開催しました。<br>こちらの勉強会で「<strong>新聞業界を変革するクラウドサービス「GlyphFeeds」を支えるAWSサービス</strong>」というテーマで発表させていただきました。</p><p><strong>GlyphFeeds</strong>とは、フューチャーが独自開発したメディア業界向けのクラウドサービスです。新聞メディアCMS（基幹システム）をAWSフルクラウド＆Webアーキテクチャで実現しています。<br>フューチャー技術ブログにて<a href="/articles/20200914/">GlyphFeeds連載</a>もしていますので、ぜひご覧ください。</p><h2 id="発表の概要"><a href="#発表の概要" class="headerlink" title="発表の概要"></a>発表の概要</h2><script async class="speakerdeck-embed" data-id="e83ec1aa5554405588af65470638653e" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>はじめに、「GlyphFeeds」のサービス紹介をさせていただきました。<br>そしてGlyphFeedsのAWSサービスについて、大きくわけて2つピックアップして発表しました。</p><p><strong>①「DynamoDB」「OpenSearch」を利用したコンテンツ管理システム</strong><br>新聞社のデータの特性に触れながら、採用したAWSサービスの紹介をしました。<br>DynamoDBでは現在GlyphFeedsで利用しているテーブルの紹介や履歴を保持するテーブルを用いた将来の展望もお話しました。</p><p><strong>② 「CloudFront」と「S3」を組み合わせた動画ストリーミング配信の実現</strong><br>GlyphFeedsに溜まったコンテンツを活用する新規サービスのうち、動画ストリーミング配信の実現について紹介しました。<br>動画ストリーミング配信構成の話のなかでは、動画変換役を担うMediaConvertについても解説しました。</p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p><strong>Q1. GlyphFeedsというCMSは他とは何が違って採用されたのでしょうか？</strong></p><p><strong>A1. まずは、クラウドであることだと考えています。</strong><br>従来新聞社はオンプレ環境のクラサバ構成で作られており、専用端末が置いてある場所に行かなければ業務が出来ないというところがネックでした。一方で、GlyphFeedsはクラウド＋Web技術の活用により、例えば自宅からでも編集業務ができるというところがポイントです。<br>また、<strong>検索性の高さも挙げられます。</strong><br>新聞社のデータは色々な種類のデータが混在しており、その中からデータを検索するという作業が多いです。例えば数年に渡るような裁判に対して、事実関係を確認するためにかなり昔の記事を探したいケースがあります。<br>他のCMSでは検索に時間がかかったり検索タイムアウトが発生するということがある一方で、GlyphFeedsではOpenSearchを駆使することでデータ量に依存せず高速な検索が可能です。</p><p><strong>Q2. DynamoDBとOpenSearchへのアクセスをデータストアサーバーに一本化していることの理由は何でしょうか？</strong></p><p><strong>A2.</strong> この2つのサービスでデータの同期を取る必要があったり複数テーブルに書き込みをするため、データ整合担保が必要となります。<br>そのため、フロント側の各機能がそれぞれDynamoDBやOpenSearchのPureAPIを呼び出すよりも、<strong>コンポーネント化したサービスとして一本化する方がスマートなつくりとなるためです。</strong></p><p><strong>Q3. 動画ストリーミング配信構成について</strong><br>S3に動画が置かれたことを契機にLambdaを実行して動くMediaConvertの設定は、AWSマネジメントコンソールで簡単にできますか？また、設定まわりでハマったところはありますか？</p><p><strong>A3. 設定自体はマネジメントコンソールで可能です。</strong><br>（発表ではお伝えできなかったですが）実際には、MediaConvertを呼び出すLambdaの実行のなかで、必要なパラメータを詰めてMediaConvertのCreateJobを実行しています！当初はMediaConvertの動画分割（セグメントの長さ）の設定違いで、ストリーミングになっていないことがありました。</p><p><strong>Q4.Elastic SearchからOpenSearchに名称が変わった際に、何か苦労はありましたか？</strong></p><p><strong>A4. 特にないです。</strong><br>気付いたら変わっていて、何も影響がなかったので良かったです（笑）</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>はじめての勉強会登壇で、ドキドキしながらの発表でした！<br>GlyphFeedsのアーキテクチャ、AWSについてどのように発表に落とし込んで伝えるか悩みましたが、自分自身がよりGlyphFeedsについて学べた勉強会になりました。<br>このイベントをきっかけに、他のAWSサービスについても学び続けていきたいと思います。（岡田）</p><p>私も初めての勉強会への登壇でした！想像していたよりもゆるい雰囲気で、かなりやりやすかったです。<br>新聞社のこともGlyphFeedsのことも知らない社外の方に、短い時間で興味を持ってもらえるよう内容とするところが難しいポイントでした。<br>また、AWSサービスやGlyphFeedsへの自分自身の理解も深まる良い機会となりました。もっと勉強して強くなるので、その時またお手合わせ願います！（原）</p><p>改めて当発表をご視聴いただいた方、そしてここまで当記事を読んでくださった方<br>ありがとうございました。</p><p>次のイベントに関する情報は、フューチャーの<a href="https://future.connpass.com/">connpass</a>で確認できます。ぜひご参加ください！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/CMS/">CMS</category>
      
      <category domain="https://future-architect.github.io/tags/GlyphFeeds/">GlyphFeeds</category>
      
      <category domain="https://future-architect.github.io/tags/TechNight/">TechNight</category>
      
      
      <comments>https://future-architect.github.io/articles/20220224a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CORSエラーのトラブルシューティング入門</title>
      <link>https://future-architect.github.io/articles/20220222a/</link>
      <guid>https://future-architect.github.io/articles/20220222a/</guid>
      <pubDate>Mon, 21 Feb 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;はじめまして。&lt;/p&gt;
&lt;p&gt;TIG</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして。</p><p>TIG DXユニットの宮本達朗です。2020年7月の新卒入社です。</p><p>業務でのフロントエンド開発時に、おなじみCORSエラーでハマってしまったのでそこで学んだ切り分け方法を共有したいと思います。</p><h1 id="CORSエラーのトラブルシュートのために必要なこと"><a href="#CORSエラーのトラブルシュートのために必要なこと" class="headerlink" title="CORSエラーのトラブルシュートのために必要なこと"></a>CORSエラーのトラブルシュートのために必要なこと</h1><ol><li>CORSについて知る<ul><li>CORSが制定された背景を深く知る必要は(トラブルシュートのためには)ないですが、CORSってざっくりどんな仕組みなんだっけ？を知る必要はあります。</li><li>特に<code>プリフライトリクエスト</code>という概念を理解することが重要です。</li><li>(CORS含め、HTTPに関する知識を体系的に学びたい方には<a href="https://www.oreilly.co.jp/books/9784873119038/">こちらの書籍</a>がおすすめです。)</li></ul></li><li>CORSエラーについて知る<ul><li>なぜエラーが出るのか大まかに知っておきましょう。</li></ul></li><li>CORSエラーの場合分け(本記事の主題)<ul><li>手元で発生したCORSエラーを解決するためにどこから手をつければいいかを理解しましょう。</li></ul></li></ol><p>本記事を読むことで上記の理解が深まれば幸いです。</p><h1 id="CORSとは"><a href="#CORSとは" class="headerlink" title="CORSとは"></a>CORSとは</h1><p>オリジン間リソース共有(Cross-Origin Resource Sharing) 略してCORSです。<br>詳細は<a href="https://future-architect.github.io/articles/20200717/#CORS%E3%81%A8%E3%81%AF">こちらの記事</a>にもあります。</p><p>ざっくりいうと、<br><strong>「クライアント側のオリジンとサーバー側のオリジンが異なる場合のリクエストでは、セキュリティを担保するために、ブラウザに以下2つのルールを守らせる仕組み」</strong><br>がCORSです。</p><p>ポイントは<strong>ブラウザに対するルール</strong>である点です。<br>(今日のブラウザはほぼ全てこのルールを遵守するよう作られているようです)</p><ol><li>ブラウザさんは、送りたいリクエスト(メインリクエスト※)の前に「サーバーさん、こういうメインリクエストを今から送ろうとしてるんですが…いいですよね？」という確認用の別リクエスト（プリフライトリクエスト）を、とある条件を満たす場合を除いて、必ずサーバー側に送信しましょう。<ul><li>説明の簡単化のために「とある条件」については<a href="#%E5%8D%98%E7%B4%94%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88">後述</a>しています。</li></ul></li><li>ブラウザさんは、送ったリクエストに対するレスポンスのHTTPヘッダーを都度適切にチェックして、場合によっては「メインリクエスト送信」や「メインリクエストに対するレスポンスをJavaScript側へ引き渡すこと」をブロックしましょう。<ul><li>このブロックこそがCORSエラー！</li></ul></li></ol><p>ちなみに、同じリクエストでもCURLコマンドなら正常に疎通できるのにWebUIからだとCORSエラーになる…と嘆く場面があるかもしれませんが、これはCORSがブラウザ単体に対する仕組みであるためなのです。</p><p>※説明上、「実際に送りたいリクエスト」と「ブラウザ判断でのプリフライトリクエスト」とを区別するために前者を「メインリクエスト」と呼ぶことにします。</p><h1 id="ブラウザがやっていること"><a href="#ブラウザがやっていること" class="headerlink" title="ブラウザがやっていること"></a>ブラウザがやっていること</h1><p>CORSの仕組みに則ったブラウザが裏でやっている(=ユーザーは意識していない)ことは以下です。</p><ul><li>(とある条件を満たす場合を除いて)プリフライトリクエストを送信する</li><li>レスポンスのHTTPヘッダーをチェックする</li></ul><p>プリフライトリクエストとは一体どんなもので、ブラウザはレスポンスのどのようなHTTPヘッダーをチェックしているのか、具体例で説明します。</p><h2 id="シチュエーション"><a href="#シチュエーション" class="headerlink" title="シチュエーション"></a>シチュエーション</h2><p>オリジン<code>https://www.past.example.com</code>のクライアント側から、それとは異なるオリジン<code>https://api.future.example.com</code>のサーバーに対してPUTリクエストを送信しようとしているシチュエーションを考えます。<br><img src="/images/20220222a/image.png" alt="状況説明" width="1200" height="343" loading="lazy"></p><h2 id="プリフライトリクエストとそのレスポンス"><a href="#プリフライトリクエストとそのレスポンス" class="headerlink" title="プリフライトリクエストとそのレスポンス"></a>プリフライトリクエストとそのレスポンス</h2><h3 id="プリフライトリクエスト"><a href="#プリフライトリクエスト" class="headerlink" title="プリフライトリクエスト"></a>プリフライトリクエスト</h3><p>ブラウザはメインリクエストの前に、サーバー側に以下のような内容で自動でプリフライトリクエストを送ります。</p><p>プリフライトリクエストは必ずOPTIONSメソッドで送られます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS /api HTTP/1.1</span><br><span class="line">Origin: https://www.past.example.com</span><br><span class="line">Access-Control-Request-Method: PUT</span><br><span class="line">Access-Control-Request-Headers: xxxx</span><br></pre></td></tr></table></figure><p>上記は、</p><p>オリジン<code>https://www.past.example.com</code>から</p><p>HTTPメソッド<code>PUT</code>でリクエストを送ろうとしているのですがいいですかね？</p><p>ちなみに<code>xxxx</code>というHTTPヘッダーを使うつもりのようです。</p><p>という内容です。</p><img src="/images/20220222a/image_2.png" alt="プリフライト" width="1200" height="436" loading="lazy"><h3 id="プリフライトリクエストに対するレスポンス"><a href="#プリフライトリクエストに対するレスポンス" class="headerlink" title="プリフライトリクエストに対するレスポンス"></a>プリフライトリクエストに対するレスポンス</h3><p>プリフライトリクエストを受信したサーバー側は以下のようなレスポンスを返します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Access-Control-Allow-Origin: https://www.past.example.com</span><br><span class="line">Access-Control-Allow-Method: GET,PUT,OPTIONS</span><br><span class="line">Access-Control-Allow-Headers: xxxx</span><br><span class="line">Access-Control-Max-Age: 10</span><br></pre></td></tr></table></figure><p>上記は、</p><p>オリジン<code>https://www.past.example.com</code>からなら、HTTPメソッド<code>GET</code>, <code>PUT</code>, <code>OPTIONS</code>でのリクエストに限ってはOKです。その時使ってもいいHTTPヘッダーは<code>xxxx</code>です。</p><p>ちなみに、今から<code>10</code>秒間だけならこのレスポンスをキャッシュしていいですよ。<br>(10秒以上経ったら再度プリフライトリクエストを送り直してください)</p><p>という内容です。</p><img src="/images/20220222a/image_3.png" alt="プリフライトリクエストに対するレスポンス" width="1200" height="495" loading="lazy"><h3 id="プリフライトリクエストのレスポンスでチェックされるHTTPヘッダー"><a href="#プリフライトリクエストのレスポンスでチェックされるHTTPヘッダー" class="headerlink" title="プリフライトリクエストのレスポンスでチェックされるHTTPヘッダー"></a>プリフライトリクエストのレスポンスでチェックされるHTTPヘッダー</h3><p>プリフライトリクエストのレスポンスを受け取ったブラウザはHTTPヘッダーをチェックします。</p><p>サーバー側へのアクセス許可を示す以下のHTTPヘッダー</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin</span><br><span class="line">Access-Control-Allow-Method</span><br><span class="line">Access-Control-Allow-Headers</span><br></pre></td></tr></table></figure><p>をチェックして、これから送るメインリクエストがサーバー側から</p><ul><li>アクセスを許可されているオリジンから送られるか？</li><li>許可されているHTTPメソッドか？</li><li>許可されているHTTPヘッダーだけを利用しているか？</li></ul><p>を確認し、もしOKならばメインリクエストの送信を実行します。</p><p>ちなみに<code>Access-Control-Allow-Origin</code>に指定できるのは1つのオリジンまたはワイルドカード(*)のみです。<br>※ただしワイルドカードはセキュリティ上の理由から利用を避けた方が良いようです。</p><h2 id="メインリクエストとそのレスポンス"><a href="#メインリクエストとそのレスポンス" class="headerlink" title="メインリクエストとそのレスポンス"></a>メインリクエストとそのレスポンス</h2><h3 id="メインリクエスト"><a href="#メインリクエスト" class="headerlink" title="メインリクエスト"></a>メインリクエスト</h3><p>プリフライトリクエストのレスポンスに問題がなかった場合、ブラウザはメインリクエストを送ります。<br>（この場合はPUTリクエスト）<br><img src="/images/20220222a/image_4.png" alt="メインリクエスト" width="1200" height="412" loading="lazy"></p><h3 id="メインリクエストに対するレスポンス"><a href="#メインリクエストに対するレスポンス" class="headerlink" title="メインリクエストに対するレスポンス"></a>メインリクエストに対するレスポンス</h3><p>サーバー側は送られたPUTリクエストに対するレスポンスを返します。<br>ただし、レスポンスには</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin: https://www.past.example.com</span><br></pre></td></tr></table></figure><p>のようにHTTPヘッダー<code>Access-Control-Allow-Origin</code>が付与されている必要があります。</p><h3 id="メインリクエストのレスポンスでチェックされるHTTPヘッダー"><a href="#メインリクエストのレスポンスでチェックされるHTTPヘッダー" class="headerlink" title="メインリクエストのレスポンスでチェックされるHTTPヘッダー"></a>メインリクエストのレスポンスでチェックされるHTTPヘッダー</h3><p>ここでブラウザが確認するHTTPヘッダーは上記<code>Access-Control-Allow-Origin</code>です。<br>ブラウザは<br>「<code>Access-Control-Allow-Origin</code>に記載のオリジンであればJavaScript側にレスポンス内容を引き渡して良い」<br>と解釈し、クライアント側のオリジンと一致しているかどうかを確認します。</p><p>オリジンが一致していた場合、レスポンスが無事引き渡されます。</p><img src="/images/20220222a/image_5.png" alt="メインリクエストに対するレスポンス" width="1200" height="518" loading="lazy"><h1 id="CORSエラーの発生ポイント"><a href="#CORSエラーの発生ポイント" class="headerlink" title="CORSエラーの発生ポイント"></a>CORSエラーの発生ポイント</h1><p>上記を踏まえると、CORSエラーが発生するポイントは以下2つです。</p><ol><li><strong>プリフライトリクエストに対するレスポンスのHTTPヘッダーをブラウザがチェックした結果、「このあとメインリクエストを送信してはダメ」と判断したとき</strong><ul><li>つまり以下のHTTPヘッダーが適切ではなかった場合<ul><li>Access-Control-Allow-Origin</li><li>Access-Control-Allow-Method</li><li>Access-Control-Allow-Headers</li></ul></li></ul></li><li><strong>メインリクエストに対するレスポンスのHTTPヘッダーをブラウザがチェックした結果、「このレスポンスはJavascript側に引き渡してはダメ」と判断したとき</strong><ul><li>つまり以下のHTTPヘッダーが適切ではなかった場合<ul><li>Access-Control-Allow-Origin</li></ul></li></ul></li></ol><p>ここで、<strong>プリフライトリクエストもメインリクエストも同一のサーバーへのリクエストなのだから、結局はサーバー側で「所望のHTTPヘッダーを返す」設定をミスしているのがCORSエラーの原因なのね</strong>、と思われるかもしれませんが、実はそうとは言い切れないです。</p><p>というのも、CORSの仕組みに則っているブラウザは単純に「レスポンスのHTTPヘッダー」だけを見るため、リクエストがインフラ要因によってサーバーや意図したリソースに届かなかった場合や、認証などで弾かれた場合(=リクエストが失敗した場合)にもHTTPヘッダーはチェックされるからです。</p><p>その結果、サーバーでは適切にレスポンスのHTTPヘッダーを設定しているのに「CORSエラー」となることがあります。</p><p>したがって、<strong>リクエスト種別</strong>(プリフライト or メイン)と<strong>HTTPステータスコード</strong>(200 or NOT)での場合分けが必要になります。</p><h1 id="トラブルシュート"><a href="#トラブルシュート" class="headerlink" title="トラブルシュート"></a>トラブルシュート</h1><p>やっと本題ですが、リクエスト種別とHTTPステータスコードで場合分けした以下4パターンについて、どこから手をつけるべきかを整理していきます。</p><ol><li><strong>プリフライトリクエストの応答が200ではなく、CORSエラーが発生したケース。</strong></li><li><strong>プリフライトリクエストの応答は200でOKだったが、メインリクエストを送る前にCORSエラーが発生したケース。</strong></li><li><strong>メインリクエストの応答が200ではなく、CORSエラーが発生したケース。</strong></li><li><strong>メインリクエストの応答は200でOKだったが、CORSエラーが発生したケース。</strong></li></ol><p>実際の切り分けの際には上から順に疑ってみてください。</p><h2 id="パターン1-プリフライトリクエストの応答が200ではない"><a href="#パターン1-プリフライトリクエストの応答が200ではない" class="headerlink" title="パターン1: プリフライトリクエストの応答が200ではない"></a>パターン1: プリフライトリクエストの応答が200ではない</h2><p>プリフライトリクエストの応答が200ではないため、CORSエラーが発生したケースです。</p><p>基本的には<strong>サーバー側の実装ミス</strong>もしくは<strong>インフラ側の設定ミス</strong>が疑われます。</p><p>サーバー側でAPIのハンドラーを実装したはいいものの、プリフライトリクエストに対する処理を実装・設定し忘れているケースが考えられます。<br>（特に初回疎通の際などにハマりやすい）<br>サーバー側でプリフライトリクエストのハンドリングが実装されているか確認しましょう。</p><p>それでもCORSエラーが解決しない場合、インフラ側の設定ミスを疑っていいと思います。愚直にプリフライトリクエストがどこまで到達したのかを確認しましょう。プリフライトリクエストがOPTIONSメソッドであるための考慮漏れがあるあるかもしれません。</p><p>AWSを例に出すと、WAFで弾かれていたり、APIGateWayでOPTIONSメソッドが定義されておらず403だったり、Authorizerで弾いて403だったり…などが考えられるかと思います。</p><p>WAFで弾かれていた実例は<a href="https://future-architect.github.io/articles/20200717/">こちらの記事</a>にありますのでよければご覧ください。</p><h2 id="パターン2-プリフライトリクエストの応答が200だがCORSエラー"><a href="#パターン2-プリフライトリクエストの応答が200だがCORSエラー" class="headerlink" title="パターン2: プリフライトリクエストの応答が200だがCORSエラー"></a>パターン2: プリフライトリクエストの応答が200だがCORSエラー</h2><p>プリフライトリクエストの応答は200でOKだったが、メインリクエストを送る前にCORSエラーが発生したケースです。</p><p>基本的には<strong>サーバー側の実装ミス</strong>が疑われます。</p><p>プリフライトリクエストに対する応答での</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin</span><br><span class="line">Access-Control-Allow-Method</span><br><span class="line">Access-Control-Allow-Headers</span><br></pre></td></tr></table></figure><p>が適切に実装されているのかを見直しましょう。</p><h2 id="パターン3-メインリクエストの応答が200ではない"><a href="#パターン3-メインリクエストの応答が200ではない" class="headerlink" title="パターン3: メインリクエストの応答が200ではない"></a>パターン3: メインリクエストの応答が200ではない</h2><p>メインリクエストの応答が200ではないため、CORSエラーが発生したケースです。</p><p>こちらも基本的には<strong>インフラ側の設定ミス</strong>が疑われます。</p><p>プリフライトリクエストが200でないケースと同様に、愚直にメインリクエストがどこまで到達したのかを確認しましょう。</p><p>AWSを例に出すと、WAF、APIGateway、Authorizerの他、S3の設定ミスなども考えられるかと思います。</p><h2 id="パターン4-メインリクエストの応答が200だがCORSエラー"><a href="#パターン4-メインリクエストの応答が200だがCORSエラー" class="headerlink" title="パターン4: メインリクエストの応答が200だがCORSエラー"></a>パターン4: メインリクエストの応答が200だがCORSエラー</h2><p>メインリクエストの応答は200でOKだったが、CORSエラーが発生したケースです。</p><p>基本的には<strong>サーバー側の実装ミス</strong>が疑われます。</p><p>メインリクエストに対する応答での</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Origin</span><br></pre></td></tr></table></figure><p>が適切に実装されているのかを見直しましょう。</p><h1 id="単純リクエスト"><a href="#単純リクエスト" class="headerlink" title="単純リクエスト"></a>単純リクエスト</h1><p>ここまで、プリフライトリクエスト→メインリクエストの順にリクエストが送られるのがさも当たり前かのように話をしてきましたが、実は例外があります。<br>それが「メインリクエストが単純リクエストに該当する」とみなされる場合です。</p><p>メインリクエストが単純リクエストに該当する場合、ブラウザは「プリフライトリクエストは送信せずにいきなりメインリクエストを送ってOK」と判断し、そのように実行されます。</p><p>本記事ではCORSエラーの解決に焦点を当てていますので、単純リクエストについて詳しく知りたい方は<a href="https://developer.mozilla.org/ja/docs/Web/HTTP/CORS#%E5%8D%98%E7%B4%94%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88">こちら</a>をご参考ください。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>CORSとは、あるオリジンで動作しているウェブアプリケーションに、異なるオリジンにある選択されたリソースへのアクセス権を与えるようブラウザに指示するための仕組み</li><li>CORSエラーとは、ブラウザ側がレスポンスのHTTPヘッダーをチェックした結果、「指定リソースにアクセスする許可がない」と判定し、後続処理をブロックした場合に出るエラー</li><li>切り分けパターンとしては以下がある<ol><li>プリフライトリクエストの応答が200ではなく、CORSエラーが発生したケース。</li><li>プリフライトリクエストの応答は200でOKだったが、メインのリクエストを送る前にCORSエラーが発生したケース。</li><li>メインリクエストの応答が200ではなく、CORSエラーが発生したケース。</li><li>メインリクエストの応答は200でOKだったが、CORSエラーが発生したケース。</li></ol></li></ul><p>お付き合いいただきありがとうございました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%88%9D%E5%BF%83%E8%80%85%E5%90%91%E3%81%91/">初心者向け</category>
      
      <category domain="https://future-architect.github.io/tags/Web/">Web</category>
      
      <category domain="https://future-architect.github.io/tags/CORS/">CORS</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0/">トラブルシューティング</category>
      
      
      <comments>https://future-architect.github.io/articles/20220222a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Groovyスクリプトで、ファイルの最終更新日時をgit clone/pullの日時ではなく、commit日時にしてみた</title>
      <link>https://future-architect.github.io/articles/20220221a/</link>
      <guid>https://future-architect.github.io/articles/20220221a/</guid>
      <pubDate>Sun, 20 Feb 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは、TIG コアテクノロジーユニットの田中です。&lt;/p&gt;
&lt;p&gt;ファイルの最終更新日時を上書きするスクリプトをGroovyで書く機会があったので紹介します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Groovy 4.0.0&lt;/li&gt;
&lt;li&gt;JVM</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは、TIG コアテクノロジーユニットの田中です。</p><p>ファイルの最終更新日時を上書きするスクリプトをGroovyで書く機会があったので紹介します。</p><ul><li>Groovy 4.0.0</li><li>JVM 1.8.0_121</li><li>Perl 5.32.1</li></ul><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>git clone/pullした時に、ローカルにチェックアウトされたファイルの最終更新日時がどうなっているかご存知でしょうか。</p><p>答えは<code>git clone/pullした時刻</code>です。(pullした場合はcommitがあったファイルのみ最終更新日時が変わります)</p><p>この時困るのが、ファイルの最終更新日時を見てファイルの更新有無を判定し、更新があったファイルにのみ処理を実行する、いわゆる<code>差分解析</code>のような事を行いたいケースです。</p><p>git cloneをやり直した場合、全てのファイルの最終更新日時が変わってしまうので、結局差分解析が全てのファイルに対して走ってしまいます。pullした場合はcommitがあったファイルのみ最終更新日時が変わるので、基本的にはcloneはやり直さずpullし続ければ意図通りの差分解析を行う事は可能です。</p><p>しかし例えば、Jenkinsでスポットインスタンスを立ち上げた場合や、GitHub Actions/GitLab CIで実行した場合など、毎回git cloneが必要な場合があります。</p><p>こういった状況でも差分解析を意図通りに行うため、ファイルの最終更新日時をcloneした日時ではなく、<code>commitした日時</code>である必要があります。</p><p>実はこれを実現するためのPerlスクリプトがgit公式から配布されています。今回はJVMで動かしたかったので、同様の処理を行う<code>Groovyスクリプト</code>を作成しました。</p><h1 id="Perlスクリプト"><a href="#Perlスクリプト" class="headerlink" title="Perlスクリプト"></a>Perlスクリプト</h1><p>まずはPerlスクリプトを用いた方法から紹介していきます。</p><p>git公式で配布されているPerlスクリプトは<a href="https://git.wiki.kernel.org/index.php/ExampleScripts#Setting_the_timestamps_of_the_files_to_the_commit_timestamp_of_the_commit_which_last_touched_them">こちら</a>にあります。</p><p>このスクリプトの探索および内容理解のため以下記事を参考にしました。</p><ul><li><a href="https://qiita.com/mAster_rAdio/items/246fcab7984e50d7d66f">ファイルのタイムスタンプをコミット日時に合わせる - Qiita</a></li><li><a href="https://srz-zumix.blogspot.com/2020/06/git.html">[GIT] 「ファイルのタイムスタンプをコミット日時に合わせる」を爆速にした - ブログズミ</a></li></ul><p>Perlスクリプトの全量は以下です。</p><p>処理の方針としては比較的単純です。</p><ol><li>gitの<code>コミットログ</code>から各ファイルのコミット情報を取得</li><li>コミットの新しい順に、対応するローカルファイルの最終更新時間をコミット時間で上書き</li><li>コミットログで同一ファイルが出てきたら、最新のコミット時間を優先</li></ol><p>ローカルのgit定義フォルダルートでスクリプトを実行すると、各ファイルの最終更新時間がコミット時間に変更されます。</p><figure class="highlight bash"><figcaption><span>実行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ perl git-set-file-times.pl</span><br></pre></td></tr></table></figure><figure class="highlight perl"><figcaption><span>git-set-file-times.pl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/perl -w</span></span><br><span class="line"><span class="keyword">use</span> strict;</span><br><span class="line"></span><br><span class="line"><span class="comment"># gitレポジトリのファイル一覧格納用</span></span><br><span class="line"><span class="keyword">my</span> %ls = ();</span><br><span class="line"><span class="comment"># コミット時間格納用</span></span><br><span class="line"><span class="keyword">my</span> $commit_time;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($ENV<span class="string">&#123;GIT_DIR&#125;</span>) &#123;</span><br><span class="line">    <span class="comment"># GIT_DIR環境変数を定義しておくとgit定義ディレクトリに遷移</span></span><br><span class="line"><span class="keyword">chdir</span>($ENV<span class="string">&#123;GIT_DIR&#125;</span>) <span class="keyword">or</span> <span class="keyword">die</span> $!;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 区切り文字としてASCII NULを指定</span></span><br><span class="line">$/ = <span class="string">&quot;\0&quot;</span>;</span><br><span class="line"><span class="comment"># gitレポジトリのファイル一覧を取得</span></span><br><span class="line"><span class="keyword">open</span> FH, <span class="string">&#x27;git ls-files -z|&#x27;</span> <span class="keyword">or</span> <span class="keyword">die</span> $!;</span><br><span class="line"><span class="keyword">while</span> (&lt;FH&gt;) &#123;</span><br><span class="line">    <span class="comment"># 文字列末尾の改行文字を削除</span></span><br><span class="line"><span class="keyword">chomp</span>;</span><br><span class="line">    <span class="comment"># ファイルパスをマップ($ls)に格納</span></span><br><span class="line">$ls&#123;$_&#125; = $_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">close</span> FH;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 区切り文字として改行(\n)を指定</span></span><br><span class="line">$/ = <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="comment"># gitのコミットログを取得</span></span><br><span class="line"><span class="keyword">open</span> FH, <span class="string">&quot;git log -m -r --name-only --no-color --pretty=raw -z @ARGV |&quot;</span> <span class="keyword">or</span> <span class="keyword">die</span> $!;</span><br><span class="line"><span class="keyword">while</span> (&lt;FH&gt;) &#123;</span><br><span class="line"><span class="keyword">chomp</span>;</span><br><span class="line">    <span class="comment"># 「comitter」キーワード行に記載されているcommit日時を抽出</span></span><br><span class="line"><span class="keyword">if</span> (<span class="regexp">/^committer .*? (\d+) (?:[\-\+]\d+)$/</span>) &#123;</span><br><span class="line">$commit_time = $1;</span><br><span class="line">    <span class="comment"># 「commit」キーワード直前にcommit対象ファイル一覧が記載されている</span></span><br><span class="line">    <span class="comment"># sedでcommit以降を除去しcommit対象ファイル一覧を抜き出す</span></span><br><span class="line">&#125; <span class="keyword">elsif</span> (<span class="regexp">s/\0\0commit [a-f0-9]&#123;40&#125;( \(from [a-f0-9]&#123;40&#125;\))?$//</span> <span class="keyword">or</span> s/\<span class="number">0</span>$//) &#123;</span><br><span class="line">        <span class="comment"># コミットの新しい順に処理</span></span><br><span class="line">        <span class="comment"># １度更新したファイルはファイル一覧(@ls)から削除する事で最新のコミット時間のみ反映</span></span><br><span class="line"><span class="keyword">my</span> @files = <span class="keyword">delete</span> @ls&#123;<span class="keyword">split</span>(<span class="regexp">/\0/</span>, $_)&#125;;</span><br><span class="line">@files = <span class="keyword">grep</span> &#123; <span class="keyword">defined</span> $_ &#125; @files;</span><br><span class="line"><span class="keyword">next</span> <span class="keyword">unless</span> @files;</span><br><span class="line">        <span class="comment"># ローカルファイルの最終更新時間を変更する</span></span><br><span class="line"><span class="keyword">utime</span> $commit_time, $commit_time, @files;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">last</span> <span class="keyword">unless</span> %ls;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">close</span> FH;</span><br></pre></td></tr></table></figure><p>イメージしやすさのため、各gitコマンドで取得されるデータ例を記載しておきます。</p><ul><li><code>git ls-files -z</code><ul><li><code>-z</code>をつけているため、ファイルはASCII NULで区切られています。</li><li><code>&lt;0x00&gt;</code>の箇所にASCII NULが入っています。</li><li>ターミナルやコマンドプロンプトでgit ls-files -z してもNULは見えないのですが、Groovyで<code>&#39;git ls-files -z&#39;.execute().text</code>の実行結果をファイルに出力後、<a href="https://www.sublimetext.com/3">Windows版Sublime Text</a>で確認しました。<br>エディタやビューアによってはNUL文字表示をサポートしていないものがあるようです。</li></ul></li></ul><img src="/images/20220221a/image.png" alt="NUL文字表示" width="941" height="162" loading="lazy"><ul><li><code>git log -m -r --name-only --no-color --pretty=raw -z</code><ul><li><code>--name-only</code>で更新ファイルの情報を表示します。</li><li><code>-z</code>で1コミットログがASCII NULで区切られます。</li><li>git logのオプション詳細は<a href="https://git-scm.com/docs/git-log">こちら</a>。</li><li><code>&lt;0x00&gt;</code>の箇所にASCII NULが入っています。</li><li>この出力の見方は、<code>git ls-files</code>の出力の見方と同様です。</li></ul></li></ul><img src="/images/20220221a/image_2.png" alt="git log出力" width="1124" height="785" loading="lazy"><h1 id="Groovyスクリプト"><a href="#Groovyスクリプト" class="headerlink" title="Groovyスクリプト"></a>Groovyスクリプト</h1><p>さて本題のGroovyスクリプトです。</p><p>処理の流れは基本的にPerlスクリプトの時と同じです。</p><p>スクリプトの全量は以下です。ローカルのgit定義フォルダルートでスクリプトを実行すると、各ファイルの最終更新時間がコミット時間に変更されます。</p><figure class="highlight bash"><figcaption><span>実行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ groovy git-set-file-times.groovy</span><br></pre></td></tr></table></figure><figure class="highlight groovy"><figcaption><span>git-set-file-times.groovy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gitレポジトリのファイル一覧を取得</span></span><br><span class="line">files = <span class="string">&#x27;git ls-files -z&#x27;</span>.execute().text.split(<span class="string">&quot;\0&quot;</span>).collect()</span><br><span class="line"><span class="comment">// gitコミットログを取得</span></span><br><span class="line">logs = <span class="string">&#x27;git log -m -r --name-only --no-color --pretty=raw -z&#x27;</span></span><br><span class="line">       .execute().text.split(<span class="string">&quot;\n&quot;</span>).collect()</span><br><span class="line"><span class="comment">// 更新日時抜き出し用</span></span><br><span class="line">pattern_update_time = <span class="regexp">/^committer .*? (\d+) (?:[\-\+]\d+)$/</span></span><br><span class="line"><span class="comment">// 更新ファイル抜き出し用</span></span><br><span class="line">pattern_update_files = <span class="regexp">/^(.+?)commit [a-f0-9]&#123;40&#125;(?:| \(from [a-f0-9]&#123;40&#125;\))$/</span></span><br><span class="line"><span class="keyword">def</span> update_time</span><br><span class="line"><span class="keyword">for</span> (log <span class="keyword">in</span> logs) &#123;</span><br><span class="line">(log =~ pattern_update_time).each&#123;</span><br><span class="line">update_time = it[<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line">(log =~ pattern_update_files).each&#123;</span><br><span class="line">update_files = it[<span class="number">1</span>]</span><br><span class="line"><span class="comment">// 複数ファイルの場合はASCII Null(\0)で区切られているので分割</span></span><br><span class="line"><span class="keyword">for</span>(update_file <span class="keyword">in</span> update_files.split(<span class="string">&quot;\0&quot;</span>).collect())&#123;</span><br><span class="line"><span class="comment">// コミットの新しい順に更新時間を書き換えていく</span></span><br><span class="line"><span class="comment">// 一度処理を行ったファイルはファイル一覧から削除する</span></span><br><span class="line"><span class="keyword">if</span>(files.remove(update_file))&#123;</span><br><span class="line">f = <span class="keyword">new</span> File(update_file)</span><br><span class="line"><span class="comment">// ローカルファイルの最終更新日時を変更する</span></span><br><span class="line"><span class="comment">// 1000倍することで13桁に合わせる(000msを追加している)</span></span><br><span class="line">f.setLastModified((update_time <span class="keyword">as</span> <span class="keyword">long</span>) * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下ポイントを絞ってソースの解説をしていきます。<br>基本的にはJavaと同じ感覚で書く事が出来ます。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">files = <span class="string">&#x27;git ls-files -z&#x27;</span>.execute().text.split(<span class="string">&quot;\0&quot;</span>).collect()</span><br></pre></td></tr></table></figure><ul><li><code>&#39;command&#39;.execute()</code>でコマンドを実行<ul><li><code>execute(null, new File(base_dir))</code>のように書くことで、指定したディレクトリ配下で実行できる (Jenkins等で実行する場合に有用)</li></ul></li><li><code>text</code>で実行結果の文字列を取得</li><li><code>split(&quot;\0&quot;)</code>で文字列をASCII NULで分割</li><li><code>collect()</code>で分割した文字列をList化</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新日時抜き出し用</span></span><br><span class="line">pattern_update_time = <span class="regexp">/^committer .*? (\d+) ([\-\+]\d+)$/</span></span><br><span class="line">...</span><br><span class="line">(log =~ pattern_update_time).each&#123;</span><br><span class="line">        update_time = it[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><code>文字列 =~ /正規表現/</code>で、正規表現にマッチした文字列を探索出来る</li><li><code>it</code>で正規表現文字列に一致した文字列を取得</li><li><code>it[1]</code>のように指定することでグループ化した文字列を取得</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(files.remove(update_file))&#123;</span><br><span class="line">  f = <span class="keyword">new</span> File(update_file)</span><br><span class="line">  <span class="comment">// ローカルファイルの最終更新日時を変更する</span></span><br><span class="line">  <span class="comment">// 1000倍することで13桁に合わせる(000msを追加している)</span></span><br><span class="line">  f.setLastModified((update_time <span class="keyword">as</span> <span class="keyword">long</span>) * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>files.remove(update_file)</code>で配列filesから<code>update_file</code>要素を削除。削除出来た場合はtrueを返す。</li><li><code>f = new File(update_file)</code>で、<code>update_file</code>で指定したローカルファイルを取得</li><li><code>f.setLastModified((update_time as long) * 1000)</code>で、ファイルの最終更新時間を上書き。コミットログで取得したUnix時間は10桁なので、13桁に合わせるため1000倍している。</li></ul><p>Groovyのキャッチアップは以下のサイトを参考にしました。</p><ul><li><a href="https://koji-k.github.io/groovy-tutorial/index.html">Apache Groovyチュートリアル</a></li><li><a href="https://codezine.jp/article/detail/3757">Groovyってどんな言語？JavaプログラマのためのGroovy入門 - CodeZine</a></li><li><a href="https://qiita.com/saba1024/items/61aeaf36061df35f8bee">[Groovy]正規表現メモ - Qiita</a></li></ul><h1 id="処理時間の比較"><a href="#処理時間の比較" class="headerlink" title="処理時間の比較"></a>処理時間の比較</h1><p>それぞれのスクリプトを、23,898ファイルを持つgitプロジェクトで実行して処理時間を測定しました。対象プロジェクトの開発期間は6年程で、コミットログもそれなりに育っているという状況です。(4334コミット)</p><p>git clone/pullの時間は含んでおらず、純粋なスクリプト実行時間のみを測定しています。Perlスクリプトのほうが速いという結果にはなりましたが、<code>Groovyスクリプトでも2.4万ファイルに対して約5秒</code>と十分な性能である事が確認できました。</p><div class="scroll"><table><thead><tr><th>スクリプト</th><th>処理時間(3回平均)</th></tr></thead><tbody><tr><td>Groovy</td><td>5.0 秒</td></tr><tr><td>Perl</td><td>2.2 秒</td></tr></tbody></table></div><p>処理時間はコマンドプロンプト使用、以下コマンド実行で測定しました。</p><ul><li><a href="https://qiita.com/kazufusa/items/40caaf192e7f719bc1bd">cmdで簡単な処理時間計測 - Qiita</a></li></ul><figure class="highlight bash"><figcaption><span>Perl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -C (Measure-Command &#123;perl git-set-file-times.pl&#125;).TotalSeconds</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>Groovy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell -C (Measure-Command &#123;groovy git-set-file-times.groovy&#125;).TotalSeconds</span><br></pre></td></tr></table></figure><h1 id="Groovyスクリプト改良版"><a href="#Groovyスクリプト改良版" class="headerlink" title="Groovyスクリプト改良版"></a>Groovyスクリプト改良版</h1><p>git logのオプションでフォーマットを指定すると、変更に強く、かつスッキリとしたソースになります。</p><p><code>--pretty=&quot;--pretty=format:&quot;update_time:%ct&quot;</code>と<code>--name-only</code>を指定することで、必要最小限の情報、コミット時間と更新ファイルのみを出力させる事が出来ます。<code>--pretty</code>の詳細は<a href="https://git-scm.com/docs/pretty-formats">こちらのwiki</a>を参考にして下さい。</p><figure class="highlight groovy"><figcaption><span>git-set-file-times.groovy</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// レポジトリのファイル一覧を取得する</span></span><br><span class="line">files = <span class="string">&#x27;git ls-files -z&#x27;</span>.execute().text.split(<span class="string">&quot;\0&quot;</span>).collect()</span><br><span class="line"><span class="comment">// コミットログを取得する</span></span><br><span class="line">logs = <span class="string">&#x27;git log -m -r --name-only --no-color --pretty=format:&quot;update_time:%ct&quot; -z&#x27;</span></span><br><span class="line">.execute().text.split(<span class="string">&quot;update_time:&quot;</span>).collect()</span><br><span class="line"><span class="comment">// 情報抜き出し用の正規表現</span></span><br><span class="line">pattern = <span class="regexp">/^(?&lt;updateTime&gt;\d+)\n(?&lt;updateFiles&gt;.+)$/</span></span><br><span class="line"><span class="keyword">for</span> (log <span class="keyword">in</span> logs) &#123;</span><br><span class="line"><span class="keyword">def</span> matcher = log =~ pattern</span><br><span class="line"><span class="keyword">if</span>(matcher.matches()) &#123;</span><br><span class="line">update_time = matcher.group(<span class="string">&quot;updateTime&quot;</span>)</span><br><span class="line">update_files = matcher.group(<span class="string">&quot;updateFiles&quot;</span>)</span><br><span class="line"><span class="comment">// 複数ファイルの場合はASCII Null(\0)で区切られているので分割</span></span><br><span class="line"><span class="keyword">for</span>(update_file <span class="keyword">in</span> update_files.split(<span class="string">&quot;\0&quot;</span>).collect())&#123;</span><br><span class="line"><span class="comment">// コミットの新しい順に更新時間を書き換えていく</span></span><br><span class="line"><span class="comment">// 一度処理を行ったファイルはファイル一覧から削除する</span></span><br><span class="line"><span class="keyword">if</span>(files.remove(update_file))&#123;</span><br><span class="line">f = <span class="keyword">new</span> File(update_file);</span><br><span class="line"><span class="comment">// ローカルのファイルの最終更新日時を変更する</span></span><br><span class="line"><span class="comment">// 1000倍することで13桁に合わせる(000msを追加している)</span></span><br><span class="line">f.setLastModified((update_time <span class="keyword">as</span> <span class="keyword">long</span>) * <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この場合のgit log出力例は以下のようになります。</p><ul><li><code>git log -m -r --name-only --no-color --pretty=format:&quot;update_time:%ct&quot; -z</code></li></ul><img src="/images/20220221a/image_3.png" alt="git log出力例" width="1200" height="205" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>GroovyスクリプトはJavaと同じ感覚で書けるので、普段Javaを使っている方はほとんどキャッチアップコストをかけずに習得出来ると思います。</p><p>シェルやPerlスクリプトが少し使い難いなと思っている方にはオススメです。</p><p>コアテクノロジーユニットでは、現在チームメンバーを募集しています。</p><p>私たちと一緒にテクノロジーで設計、開発、テストの高品質・高生産性を実現する仕組みづくりをしませんか？</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Git/">Git</category>
      
      <category domain="https://future-architect.github.io/tags/Groovy/">Groovy</category>
      
      <category domain="https://future-architect.github.io/tags/Perl/">Perl</category>
      
      
      <comments>https://future-architect.github.io/articles/20220221a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>認定スクラムマスターの資格を取得しました</title>
      <link>https://future-architect.github.io/articles/20220218a/</link>
      <guid>https://future-architect.github.io/articles/20220218a/</guid>
      <pubDate>Thu, 17 Feb 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;2/3, 2/4に永和システムさんのAgile　Studio主催の認定スクラムマスター研修を受けてきて、認定スクラムマスターの資格を取得しました。&lt;/p&gt;
&lt;img src=&quot;/images/20220218a/AgileStudioロゴ.png&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>2/3, 2/4に永和システムさんのAgile　Studio主催の認定スクラムマスター研修を受けてきて、認定スクラムマスターの資格を取得しました。</p><img src="/images/20220218a/AgileStudioロゴ.png" alt="AgileStudioロゴ.png" width="1200" height="613" loading="lazy"><p><a href="https://www.agile-studio.jp/scrum-training">https://www.agile-studio.jp/scrum-training</a></p><p>日本で提供されているスクラムマスターの資格にはScrum Alliance版のCSM®(Certified Scrum Master)とScrum Inc版のLSM(Licensed Scrum Master)があります。Agile Studioの認定は後者のScrum Inc版となります。どちらかというと前者の方が長く開催されているので、こちらの認定を取っている人が多いと思います。Scrum Inc版も、Agile Studioさんの方もまだ開始されてから日も浅く、これからどんどん開催されていくと思いますので、どんな研修だったのか、というのを参考のためにブログに書いておこうと思います。</p><p>僕自身は、2003年に出した日本最初の<a href="https://www.amazon.co.jp/dp/4894715899">アジャイルソフトウェア開発スクラム</a>という本の翻訳に参加していたり、Scrumへの関わりは20年近くになりますし、Scrumを採用した案件などもいくつか経験したりしていて、だいたいはわかっているという状態ではありますが、アジャイルで内製開発したい！というお客さんが今後増えていくということも想定して、きちんとした認定資格を持って手札を増やしておきたいな、ということで受講しました。</p><p>そもそも、認定を取ろうと思ったのは、昔からの知人のあまのりょーさんの書き込みを見て興味を持ったのが最初のきっかけでしたし、日本で最初のアジャイルコミュニティであるXP-jp（メーリングリスト）を作った平鍋さんが社長をされていて、アジャイル系のイベントなども開催していた日本のアジャイルの歴史書が作られるとしたら確実に名前が乗るであろう永和システムマネジメントさんの研修ならよかろう、と思ってこちらを選びました。</p><img src="/images/20220218a/スクリーンショット_2022-02-05_18.24.03.png" alt="スクリーンショット_2022-02-05_18.24.03.png" width="1068" height="796" loading="lazy"><h1 id="研修の内容"><a href="#研修の内容" class="headerlink" title="研修の内容"></a>研修の内容</h1><p>研修は2日（4Hx4)で、講義ありワークあり、という感じです。Zoomのオンライン開催に合わせた感じで構成されており、ワークだけでなく、休憩時間もブレークアウトルームに分かれて休憩になるので、気軽にトレーナーに質問できる体制になっていました。オンラインだと大人数の部屋だと会話するのもチャットするのも大変ですからね。</p><p>Scrum Masterの研修なので、基本的には無料で公開されているScrum Guideの内容（概要のみが書かれている）をもっと細かく説明したり、実践するための技法を紹介したり、といった感じでした。僕は最初の本が出た当時のScrumは知っていましたが、そこからのアップデートの話もありました。</p><p>基本的にScrum Incの教材をもとに進んでいくのですが、さすがは永和さんという感じで、オリジナルコンテンツも随所に挟まれており、今までのアジャイルの案件の中でよく課題になった内容が盛り込まれています。資料のページ数的には説明のあった範囲(ワークショップ部分を抜いて)の15%ぐらい？平鍋さんによるScrumが作られるまでの歴史やその後のアップデートの講義もあります。</p><p>また、今時の状況などを踏まえ、完全リモートでScrumを行なったときの情報管理（オンラインホワイトボード）やら、いろいろチャレンジしたこと、現在うまく回っている仕組みなどの紹介もありました。</p><p>あと、解説はなかったのですが、興味のあったScrum@Scaleの話も資料の末尾におまけでついていて、休憩時間中や懇親会でいろいろお話しが聞けたのもよかったです。Scrum IncでScrum@Scaleのセミナーあるようなので気になっています。</p><h1 id="研修後の試験"><a href="#研修後の試験" class="headerlink" title="研修後の試験"></a>研修後の試験</h1><p>4択の30問の試験を受けて一定の成績を越えると合格です。講義資料をざっと眺めて、スクラムガイドをもう一度見直しつつ受けたら合格できました。講義の内容そのままではなく、ちょっと捻ったような内容もあったように思います。</p><p>Scrum Incの試験結果はLinkedInに投稿するボタンがあるのですが、ここに投稿すると、スクラムの産みの親のジェフ・サザーランドがいいねしてくれます。</p><img src="/images/20220218a/スクリーンショット_2022-02-06_11.23.49.png" alt="LinkedInのいいね" width="1200" height="1236" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>そんな感じで、自分で実践したときの悩みも相談しつつ、新しい知識にアップデートしたり、リモートワークでの活用方法など、幅広く学べました。じっくり学習するのは久しぶりでしたが、楽しめました。講師の皆様、一緒に受けた皆さん、どうもありがとうございました。</p><p>今後、同僚の千葉さんが、今度Scrum Alliance版のCertified Scurm Master®を受けるそうなので、お互いに比較してみたいな、という気持ちもあります。まあ研修内容を公開するのは難しそうなので社内勉強会的にやって、当たり障りのない範囲でブログに書くとかですかね？</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Management/">Management</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB/">アジャイル</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%A0/">スクラム</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%B3%87%E6%A0%BC/">資格</category>
      
      
      <comments>https://future-architect.github.io/articles/20220218a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 1.18 集中連載 実行ファイルのメタデータに関するアップデート(コミットID追加等)</title>
      <link>https://future-architect.github.io/articles/20220217a/</link>
      <guid>https://future-architect.github.io/articles/20220217a/</guid>
      <pubDate>Wed, 16 Feb 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220217a/go1.18top.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;295&quot;&gt;

&lt;p&gt;TIG DX ユニットの多賀です。 &lt;a href=&quot;/articles/20220209a/&quot;&gt;Go</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220217a/go1.18top.png" alt="" width="600" height="295"><p>TIG DX ユニットの多賀です。 <a href="/articles/20220209a/">Go 1.18連載</a> の最後6本目です。<br>最近業務で久々に Go を触ることになりそうで、少し思い出しながらコードを実装してみたりしてます。</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><ul><li>Go 1.18 から build 時に含まれるメタデータに VCS, ビルド情報が追加</li><li>メタデータを参照可能な実装が <code>debug/buildinfo</code> パッケージとして公開</li></ul><h2 id="Go-1-18-アップデート概要"><a href="#Go-1-18-アップデート概要" class="headerlink" title="Go 1.18 アップデート概要"></a>Go 1.18 アップデート概要</h2><p>Go 1.18 ではビルドして生成される実行ファイル中のメタデータに関連して、2点アップデートが入っています。</p><p>1点目は、メタデータの追加です。Go のビルドした実行ファイルには、Go 1.17 以前からメタデータとしてコンパイルした Go のバージョンや、依存 module の情報が含まれていました。 Go 1.18 からは、元々の情報に加えて Git の commit id や commit した時刻等の VCS 情報と、build したアーキテクチャやOS等のビルド情報が追加されました。</p><p>2 点目は、実行ファイルのメタデータをパッケージを通して参照できるようになったことです。<br>Go 1.17 以前は、実行ファイルのメタデータを外部から取得するためには、 <code>go version -m $&#123;実行ファイル&#125;</code>  コマンドを実行するしか方法がありませんでした(※1)。 <a href="https://github.com/golang/go/blob/go1.17.6/src/cmd/go/internal/version/version.go">go version</a> コマンドの実装を利用しようにも、 <code>internal</code> パッケージ下に含まれてしまい、外部から利用することはできず、コードをコピーして実装したりする状況が生まれていました。</p><p>そのため、Go 1.18 にて <a href="https://github.com/golang/go/blob/go1.17.6/src/cmd/go/internal/version/version.go">go version</a> の実装を移植した外部利用可能な <a href="https://pkg.go.dev/runtime/debug@go1.18beta2#BuildInfo">debug/buildinfo</a> パッケージが追加されました。</p><p>※1: 正確には <a href="https://github.com/golang/go/blob/go1.17.6/src/runtime/debug/mod.go#L23">runtime/debug.BuildInfo</a> を利用すれば、実装したコード自身のメタデータへアクセスすることはできました。 <code>BuildInfo</code> をコンパイルコード内で取得、Print しておけば実行時に出力できたりします。</p><h2 id="アップデート詳細"><a href="#アップデート詳細" class="headerlink" title="アップデート詳細"></a>アップデート詳細</h2><p>Go 1.18 はまだリリース前なので、ベータバージョン(<code>go1.18beta2</code>)で動作確認してます。<br>正式リリース時に挙動が変更されている可能性がありますので、ご注意ください。</p><h3 id="メタデータ追加"><a href="#メタデータ追加" class="headerlink" title="メタデータ追加"></a>メタデータ追加</h3><p>追加されるメタデータを、各バージョンの出力を参考に比較してみます。<br><code>build</code> 項目以下が、 Go 1.18 で追加予定です。</p><p><strong>Go 1.17.6</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">❯ go version -m 1.17.6</span><br><span class="line">1.17.6: go1.17.6</span><br><span class="line">        path    poc/go-buildinfo</span><br><span class="line">        mod     poc/go-buildinfo        (devel)</span><br></pre></td></tr></table></figure><p><strong>Go 1.18beta2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">❯ go1.18beta2 version -m 1.18beta2</span><br><span class="line">1.18beta2: go1.18beta2</span><br><span class="line">        path    poc/go-buildinfo</span><br><span class="line">        mod     poc/go-buildinfo        (devel)</span><br><span class="line">        build   -compiler=gc</span><br><span class="line">        build   CGO_ENABLED=1</span><br><span class="line">        build   CGO_CFLAGS=</span><br><span class="line">        build   CGO_CPPFLAGS=</span><br><span class="line">        build   CGO_CXXFLAGS=</span><br><span class="line">        build   CGO_LDFLAGS=</span><br><span class="line">        build   GOARCH=amd64</span><br><span class="line">        build   GOOS=darwin</span><br><span class="line">        build   GOAMD64=v1</span><br><span class="line">        build   vcs=git</span><br><span class="line">        build   vcs.revision=ae89406296a8de9e9ccfecf06659c4e9c8c5f0b3</span><br><span class="line">        build   vcs.time=2022-02-09T08:47:00Z</span><br><span class="line">        build   vcs.modified=true</span><br></pre></td></tr></table></figure><p>よく使いそうな項目について補足します。</p><ul><li><code>GOARCH</code>/<code>GOOS</code><ul><li>コンパイル後にbuild した アーキテクチャと OS を見ることができるようになります</li></ul></li><li><code>vcs.revision</code>/<code>vcs.time</code><ul><li>(Gitの場合) build したタイミングの commit id と時刻を保持します</li></ul></li><li><code>vcs.modified</code><ul><li>(Gitの場合) build したタイミングに、commit していない変更が残されている場合に <code>true</code> となり、変更漏れがないか確認できます</li></ul></li></ul><h3 id="debug-buildinfo"><a href="#debug-buildinfo" class="headerlink" title="debug/buildinfo"></a>debug/buildinfo</h3><p>実行ファイルからメタデータを読み取れる、<a href="https://pkg.go.dev/debug/buildinfo@go1.18beta2#BuildInfo">debug/buildinfo</a> パッケージが追加されました。<br>ドキュメントを見ると、API としては以下が定義されています。実行ファイルを <code>io.ReaderAt</code> か ファイルから読み込む実装だけですね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> BuildInfo</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Read</span><span class="params">(r io.ReaderAt)</span> <span class="params">(*BuildInfo, error)</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadFile</span><span class="params">(name <span class="keyword">string</span>)</span> <span class="params">(info *BuildInfo, err error)</span></span></span><br></pre></td></tr></table></figure><p>読み込んだ返却値である  <code>BuildInfo</code> 型は、 <a href="https://pkg.go.dev/runtime/debug@go1.18beta2#BuildInfo">runtime/debug.BuildInfo</a> の型エイリアスになっています。 Go 1.18 でメタデータが追加されているため、 <a href="https://pkg.go.dev/runtime/debug@go1.18beta2#BuildInfo">runtime/debug.BuildInfo</a> の定義も以下の通りアップデートされています。</p><p><strong>Go 1.17.6</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> BuildInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">Path <span class="keyword">string</span>    <span class="comment">// The main package path</span></span><br><span class="line">Main Module    <span class="comment">// The module containing the main package</span></span><br><span class="line">Deps []*Module <span class="comment">// Module dependencies</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Go 1.18beta2</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> BuildInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">GoVersion <span class="keyword">string</span>         <span class="comment">// Version of Go that produced this binary.</span></span><br><span class="line">Path      <span class="keyword">string</span>         <span class="comment">// The main package path</span></span><br><span class="line">Main      Module         <span class="comment">// The module containing the main package</span></span><br><span class="line">Deps      []*Module      <span class="comment">// Module dependencies</span></span><br><span class="line">Settings  []BuildSetting <span class="comment">// Other information about the build.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>試しに実行ファイルを読み込んだコードを動かしてみます。  <code>BuildInfo</code> を JSON にして中身も確認してみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;debug/buildinfo&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">e := flag.String(<span class="string">&quot;e&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;execution file&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> e == <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;-e required&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">flag.Parse()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 実行ファイル読込</span></span><br><span class="line">b, err := buildinfo.ReadFile(*e)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;read file failed: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出力</span></span><br><span class="line">j, err := json.MarshalIndent(*b, <span class="string">&quot;&quot;</span>, <span class="string">&quot;  &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;marshal json failed: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(j))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>出力はこちらになりました。 Go 1.18 で追加予定の項目は <code>Settings</code> へ詰め込まれるようです。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;GoVersion&quot;</span>: <span class="string">&quot;go1.18beta2&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Path&quot;</span>: <span class="string">&quot;poc/go-buildinfo&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;Main&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;Path&quot;</span>: <span class="string">&quot;poc/go-buildinfo&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Version&quot;</span>: <span class="string">&quot;(devel)&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Sum&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;Replace&quot;</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;Deps&quot;</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">&quot;Settings&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;-compiler&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;gc&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;CGO_ENABLED&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;CGO_CFLAGS&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;CGO_CPPFLAGS&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;CGO_CXXFLAGS&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;CGO_LDFLAGS&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;GOARCH&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;amd64&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;GOOS&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;darwin&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;GOAMD64&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;v1&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;vcs&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;git&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;vcs.revision&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;ae89406296a8de9e9ccfecf06659c4e9c8c5f0b3&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;vcs.time&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;2022-02-09T08:47:00Z&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;Key&quot;</span>: <span class="string">&quot;vcs.modified&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;Value&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="関連-issue"><a href="#関連-issue" class="headerlink" title="関連 issue"></a>関連 issue</h3><ul><li>build 時に含まれるメタデータを追加したい要望<ul><li><a href="https://github.com/golang/go/issues/35667">cmd/go: add compiler flags, relevant env vars to ‘go version -m’ output · Issue #35667 · golang/go</a></li><li><a href="https://github.com/golang/go/issues/37475">cmd/go: stamp git/vcs current HEAD hash/commit hash/dirty bit in binaries · Issue #37475 · golang/go</a></li></ul></li><li><code>go version -m</code> の実装コード <a href="https://github.com/golang/go/blob/go1.17.6/src/cmd/go/internal/version/version.go">version.go</a> が internal package のため、外部から利用できるようにしたい<ul><li><a href="https://github.com/golang/go/issues/39301">cmd/go: factor version reading into debug/buildinfo · Issue #39301 · golang/go</a></li></ul></li></ul><h3 id="関連-パッチ"><a href="#関連-パッチ" class="headerlink" title="関連 パッチ"></a>関連 パッチ</h3><ul><li>build 時の挙動変更<ul><li><a href="https://go-review.googlesource.com/c/go/+/353930/">cmd/go: stamp VCS revision and uncommitted status into binaries (I4e7d3159) · Gerrit Code Review</a></li></ul></li><li>debug/buildinfo 追加<ul><li><a href="https://go-review.googlesource.com/c/mod/+/348016/">buildinfo: add package for reading build metadata from Go executables (Ia1d97d9b) · Gerrit Code Review</a></li></ul></li></ul><h2 id="所感"><a href="#所感" class="headerlink" title="所感"></a>所感</h2><p>Go 1.18 で変更される実行ファイルに含まれるメタデータ関連について、整理してみました。</p><p>Git の commit id が参照できるようになるのも良いですが、 <code>GOOS</code> / <code>GOARCH</code> を見ることができるようになったのも良さそうです。 複数環境向けの build 後に、どの実行ファイルがどの環境向けかわからなくなっても確認するのに使えそうです。 (わからなくなったときは、とりあえず実行してみて確認したりしてました)<code>debug/buildinfo</code> パッケージの登場により、実行されているバイナリをスキャンしてツールへ連携する実装がやりやすくなったのも良さそうですね。</p><p>Go 1.18 連載は以上で終了です。</p><p>一般的に待望されていたジェネリクスや、コードの安全性を高める fuzzing にサポートしたりと盛り沢山なリリースだったかと思います。リリースは 3 月にずれ込みそうとのことですが、それまでのつなぎとして楽しんでいただけていたら幸いです。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://tip.golang.org/doc/go1.18">Go 1.18 Release Notes - The Go Programming Language</a></li><li><a href="https://qiita.com/sg0hsmt/items/6d852c50baa37a0c957e">Go 1.18 で追加される debug/buildinfo - Qiita</a></li><li><a href="https://pkg.go.dev/runtime/debug@go1.18beta2#BuildInfo">debug package - runtime/debug - pkg.go.dev</a></li><li><a href="https://github.com/golang/go">golang/go: The Go programming language</a></li><li><a href="https://knqyf263.hatenablog.com/entry/2021/02/12/162928">Goのバイナリから依存するmodule情報を取り出す方法 - knqyf263’s blog</a></li><li><a href="https://github.com/rsc/goversion">rsc/goversion: Print version used to build Go executables</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go1-18/">Go1.18</category>
      
      
      <comments>https://future-architect.github.io/articles/20220217a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 1.18集中連載 Workspacesモードを試してみた</title>
      <link>https://future-architect.github.io/articles/20220216a/</link>
      <guid>https://future-architect.github.io/articles/20220216a/</guid>
      <pubDate>Tue, 15 Feb 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220216a/go1.18top.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;295&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220216a/go1.18top.png" alt="" width="600" height="295"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="/articles/20220209a/">Go 1.18連載</a>の5本目です。</p><p>Go 1.18からGoのマルチモジュール<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>での開発を便利にするWorkspacesモードが導入されます。Workspacesモードの導入背景はマルチモジュールでの開発体験を改善することです。詳しくは<a href="https://go.googlesource.com/proposal/+/master/design/45713-workspace.md">Proposal: Multi-Module Workspaces in cmd/go</a>のBackgroundやScopeに記載があります。</p><p>Workspacesモードがどのように動作するか知るためには、実際に動かしてみるのがよいでしょう。本記事ではWorkspacesモードを試してみた結果を紹介します。GoのバージョンはGo 1.18 beta2を使っています。</p><h2 id="マルチモジュール構成"><a href="#マルチモジュール構成" class="headerlink" title="マルチモジュール構成"></a>マルチモジュール構成</h2><p>早速、例として、Workspacesモードが存在しない場合のマルチモジュール構成を考えてみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; tree</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">├── names</span><br><span class="line">│   ├── company.go</span><br><span class="line">│   └── go.mod</span><br><span class="line">└── tools</span><br><span class="line">    ├── cmd</span><br><span class="line">    │   └── main.go</span><br><span class="line">    └── go.mod</span><br></pre></td></tr></table></figure><ul><li>names モジュール</li></ul><figure class="highlight sh"><figcaption><span>names/go.mod</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module github.com/d-tsuji/sample-go-workspace/names</span><br><span class="line"></span><br><span class="line">go 1.18</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>names/company.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> names</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Name = <span class="string">&quot;Future&quot;</span></span><br></pre></td></tr></table></figure><ul><li>tools モジュール</li></ul><figure class="highlight sh"><figcaption><span>tools/go.mod</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">module github.com/d-tsuji/sample-go-workspace/tools</span><br><span class="line"></span><br><span class="line">go 1.18</span><br><span class="line"></span><br><span class="line">require github.com/d-tsuji/sample-go-workspace/names v0.0.0-20220215133818-3d5d200fc3de</span><br><span class="line"></span><br><span class="line">replace github.com/d-tsuji/sample-go-workspace/names =&gt; ../names</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>tools/cmd/main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/d-tsuji/sample-go-workspace/names&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(names.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>マルチモジュール構成で開発している場合、ローカルファイルシステムに存在する依存モジュールを参照するために <code>go.mod</code> ファイルで <code>replace</code> ディレクティブを使って参照することがあります。本例では <code>replace</code> ディレクティブが必要な <code>go.mod</code> ファイルは1つですが、複数のモジュールが依存していると複数のモジュールの <code>go.mod</code> をもれなくメンテナンスする必要があります。マルチモジュール構成の開発で <code>replace</code> ディレクティブに苦しめられたのは私だけではないはずです。</p><h2 id="Workspacesモード"><a href="#Workspacesモード" class="headerlink" title="Workspacesモード"></a>Workspacesモード</h2><p>さて本題のWorkspacesモードを紹介します。</p><p><code>go work init</code> コマンドでWorkspacesモードの対象とするモジュールのパスを指定して、<code>go.work</code> ファイルを作成します。<code>go.work</code> ファイルが存在すると、<code>go</code> コマンドはWorkspacesモードになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; go work init names tools</span><br></pre></td></tr></table></figure><p>ディレクトリ構成は以下です。<code>go.work</code> ファイルが存在することと <code>go.mod</code> に <code>replace</code> ディレクティブが存在しないことが最初に紹介したマルチモジュール構成の例との大きな違いです。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── go.work</span><br><span class="line">├── names</span><br><span class="line">│   ├── company.go</span><br><span class="line">│   └── go.mod</span><br><span class="line">└── tools</span><br><span class="line">    ├── cmd</span><br><span class="line">    │   └── main.go</span><br><span class="line">    └── go.mod</span><br></pre></td></tr></table></figure><p><code>go.work</code> ファイルは <code>go.mod</code> ファイルと同様な形式で記述されるファイルです。<code>go.work</code> ファイルに含まれる <code>use</code> ディレクティブは <code>go.mod</code> ファイルを含む相対パスまたは絶対パスが記述されます。また <code>use</code> ディレクティブにはコメントを書くこともできます。</p><figure class="highlight go"><figcaption><span>go.work</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> <span class="number">1.18</span></span><br><span class="line"></span><br><span class="line">use (</span><br><span class="line">./names <span class="comment">// github.com/d-tsuji/sample-go-workspace/names</span></span><br><span class="line">./tools</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>go.mod</code> ファイルには <code>replace</code> ディレクティブは不要です。</p><figure class="highlight sh"><figcaption><span>tools/go.mod</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">module github.com/d-tsuji/sample-go-workspace/tools</span><br><span class="line"></span><br><span class="line">go 1.18</span><br><span class="line"></span><br><span class="line">require github.com/d-tsuji/sample-go-workspace/names v0.0.0-20220215133818-3d5d200fc3de</span><br></pre></td></tr></table></figure><p><code>replace</code> ディレクティブなしに <code>use</code> で指定したモジュールの依存を解決できます。以下のように動作を確認できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">go</span> run tools\cmd\main.<span class="keyword">go</span></span><br><span class="line">Future</span><br></pre></td></tr></table></figure><p>もちろん以下のように <code>go.work</code> ファイルで指定しなかった場合は依存関係を解決できません。</p><figure class="highlight diff"><figcaption><span>go.work</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">go 1.18</span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="deletion">-use (</span></span><br><span class="line"><span class="deletion">-./names</span></span><br><span class="line"><span class="deletion">-./tools</span></span><br><span class="line"><span class="deletion">-)</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go run tools\cmd\main.go</span><br><span class="line">tools\cmd\main.go:5:2: package github.com/d-tsuji/sample-go-workspace/names is not <span class="keyword">in</span> GOROOT (c:\go\src\github.com\d-tsuji\sample-go-workspace\names)</span><br></pre></td></tr></table></figure><p><code>go work</code> コマンドは <code>init</code> の他に、<code>go.work</code> ファイルを修正する <code>edit</code> コマンドや <code>go.work</code> ファイルにディレクトリを追加する <code>use</code> コマンド、<code>sync</code> コマンドなどいくつかのコマンドがあります。<a href="https://go.dev/ref/mod">Go Modules Reference</a> にある <a href="https://go.dev/ref/mod#go-work-init">go work init</a> などに詳しく書いてあります。</p><ul><li><code>gopls</code> でのサポート<br>今後、<code>gopls</code> においてもWorkspacesモードをサポートする<a href="https://go.googlesource.com/proposal/+/master/design/37720-gopls-workspaces.md">Proposal</a>もあります。開発ツール含めて、マルチモジュールの開発体験を改善していく動きがあります。</li><li><code>go.work</code> ファイルはリポジトリにコミットしない慣習<br>Proposalでは <code>go.work</code> ファイルはリポジトリにコミットしないことを推奨しています。<code>go.work</code> ファイルによってリポジトリのビルド構成が変更されてしまうため、とあります。<code>github/gitignore</code> のGoのテンプレートにも <code>go.work</code> ファイルが追加されていました。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></li></ul><p>とはいえ、<code>go.work</code> ファイルを共有したいユースケースもありそうなので、このあたりの議論に詳しい方、こっそり教えて下さい。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>Go 1.18で導入されるWorkspacesモードを試してみました。Workspacesモードを学ぶにあたって、Proposalを書いた本人のデモ動画(<a href="https://www.youtube.com/watch?v=wQglU5aB5NQ">Go Workspaces Proposal Demo</a>)なども参考になりました。マルチモジュールの開発体験が向上するWorkspacesモード、リリースが楽しみです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">マルチモジュールとは、あるリポジトリに複数のモジュールが含まれるようなリポジトリを指し、それぞれのモジュールが <code>go.mod</code> ファイルを持ちます。<a href="https://github.com/golang/go/wiki/Modules#faqs--multi-module-repositories">https://github.com/golang/go/wiki/Modules#faqs--multi-module-repositories</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://github.com/github/gitignore/blob/438cb4af67f3a09c008c5c3f5c1ec325511b8970/Go.gitignore">https://github.com/github/gitignore/blob/438cb4af67f3a09c008c5c3f5c1ec325511b8970/Go.gitignore</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-18/">Go1.18</category>
      
      
      <comments>https://future-architect.github.io/articles/20220216a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go1.18集中連載：新たに追加されたnet/netipとは</title>
      <link>https://future-architect.github.io/articles/20220215a/</link>
      <guid>https://future-architect.github.io/articles/20220215a/</guid>
      <pubDate>Mon, 14 Feb 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220215a/netip.png&quot; alt=&quot;&quot; width=&quot;945&quot; height=&quot;491&quot; loading=&quot;lazy&quot;&gt;

&lt;blockquote&gt;
&lt;p&gt;Image is generated By &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220215a/netip.png" alt="" width="945" height="491" loading="lazy"><blockquote><p>Image is generated By <a href="https://gopherize.me/">gopherize.me</a>. Artwork by <a href="https://twitter.com/ashleymcnamara">Ashley McNamara</a> inspired by <a href="http://reneefrench.blogspot.co.uk/">Renee French</a>. Web app by <a href="https://twitter.com/matryer">Mat Ryer</a></p></blockquote><p>この記事は<a href="/articles/20220209a/">Go1.18連載</a>の4記事目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIG/DXユニット所属の宮永です。<br>本記事ではGo1.18で追加されたnet/netipの機能について解説します。</p><h1 id="net-netipとは？"><a href="#net-netipとは？" class="headerlink" title="net/netipとは？"></a>net/netipとは？</h1><p>IPアドレスを対象とした基本的な操作(比較演算子による操作など)を提供するパッケージです。</p><p>netipパッケージに定義されている型は全部で3つ「Addr型(IPアドレスを定義)」「AddrPort型(IPアドレスとポートを定義)」「Prefix型(IPアドレスとビット長を定義)」です。</p><p>net/netipによって新たに導入された「Addr型」は「net.IP型」と比較してより少ないメモリでimmutableでかつ比較演算子を使って簡単に比較することができるようになっていると<a href="https://pkg.go.dev/net/netip">公式のdocs</a>には記載されています。</p><p>net/netipパッケージの導入提案は<a href="https://github.com/bradfitz">Bradさん</a>によってこちらの<a href="https://github.com/golang/go/issues/46518">issue</a>でされています。</p><p>私はnet.IPを使用したことはないのですが、従来のnetパッケージにはnet.IP型が実装されていました。net/netipの導入に伴ってnet.IP型の取り扱いやパッケージの命名方法などはかなり議論されていたようです。</p><p><a href="https://github.com/golang/go/discussions/47323">proposal: net/netaddr: add new IP address type, netaddr package (discussion) · Discussion #47323 · golang/go</a></p><p>議論の争点は</p><ol><li>netパッケージに軽量なアドレスパッケージを追加するか？</li><li>汎用的なIPアドレス操作を担うパッケージを追加するか？</li></ol><p>の2点でした。①を採用する場合は今回追加されるパッケージ名は「net/netip」ではなく「net/netaddr」になっていたようです。</p><p>結論としてはnet/netipとして汎用的なIPアドレス操作を担うパッケージとしてgo1.18に取り入れることが決定したようです。</p><h1 id="net-netipの利用用途は？"><a href="#net-netipの利用用途は？" class="headerlink" title="net/netipの利用用途は？"></a>net/netipの利用用途は？</h1><p>私自身、netパッケージはnet/http程度しか触ったことがないため従来のnet.IP型がどのように利用されていたのか、またどんなところに欠点があったのかを知りません。</p><p>net/netipの追加に大きな貢献をしたBradさんの技術ブログ<a href="https://tailscale.com/blog/netaddr-new-ip-type-for-go/#uint64s">netaddr.IP: a new IP address type for Go · Tailscale</a>にnet/netipの前身である<a href="https://github.com/inetaf/netaddr">inetaf/netaddr</a>を作成した経緯が記載されていましたのでこちらをベースにnet/netipの紹介をします。</p><p>Bradさんの記事では従来のnet.IP型の問題点はnet.IP型が単なるbyteのスライスでしか定義されていないことであると指摘されています。</p><p>この問題は、例えばIPアドレスを比較する際に<code>＝＝</code>などの演算子は使用することができないということを意味しています。</p><p>また、IPアドレスを表現するには不要な24バイトがnet.IPに割り当てられていることを指摘しています。<br>確かに<a href="https://cs.opensource.google/go/go/+/refs/tags/go1.17.7:src/net/ip.go;drc=d3e3d03666bbd8784007bbb78a75864aac786967;l=35">go1.17のnet.IP型</a>を見てみると明確なサイズ制限はされていません。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IP address lengths (bytes).</span></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">IPv4len = <span class="number">4</span></span><br><span class="line">IPv6len = <span class="number">16</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// An IP is a single IP address, a slice of bytes.</span></span><br><span class="line"><span class="comment">// Functions in this package accept either 4-byte (IPv4)</span></span><br><span class="line"><span class="comment">// or 16-byte (IPv6) slices as input.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Note that in this documentation, referring to an</span></span><br><span class="line"><span class="comment">// IP address as an IPv4 address or an IPv6 address</span></span><br><span class="line"><span class="comment">// is a semantic property of the address, not just the</span></span><br><span class="line"><span class="comment">// length of the byte slice: a 16-byte slice can still</span></span><br><span class="line"><span class="comment">// be an IPv4 address.</span></span><br><span class="line"><span class="keyword">type</span> IP []<span class="keyword">byte</span></span><br></pre></td></tr></table></figure><p>一方でgo1.18beta2の<a href="https://cs.opensource.google/go/go/+/refs/tags/go1.18beta2:src/net/netip/netip.go;drc=49b7c9caec6b96d0b327624efee61bd8a72cf68c;l=38">netip.Addr</a>を確認すると<code>addr</code>に<code>uint128</code>が明確に定義されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Addr <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// addr is the hi and lo bits of an IPv6 address. If z==z4,</span></span><br><span class="line"><span class="comment">// hi and lo contain the IPv4-mapped IPv6 address.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// hi and lo are constructed by interpreting a 16-byte IPv6</span></span><br><span class="line"><span class="comment">// address as a big-endian 128-bit number. The most significant</span></span><br><span class="line"><span class="comment">// bits of that number go into hi, the rest into lo.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// For example, 0011:2233:4455:6677:8899:aabb:ccdd:eeff is stored as:</span></span><br><span class="line"><span class="comment">//  addr.hi = 0x0011223344556677</span></span><br><span class="line"><span class="comment">//  addr.lo = 0x8899aabbccddeeff</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// We store IPs like this, rather than as [16]byte, because it</span></span><br><span class="line"><span class="comment">// turns most operations on IPs into arithmetic and bit-twiddling</span></span><br><span class="line"><span class="comment">// operations on 64-bit registers, which is much faster than</span></span><br><span class="line"><span class="comment">// bytewise processing.</span></span><br><span class="line">addr uint128</span><br><span class="line"></span><br><span class="line"><span class="comment">// z is a combination of the address family and the IPv6 zone.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// nil means invalid IP address (for a zero Addr).</span></span><br><span class="line"><span class="comment">// z4 means an IPv4 address.</span></span><br><span class="line"><span class="comment">// z6noz means an IPv6 address without a zone.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Otherwise it&#x27;s the interned zone name string.</span></span><br><span class="line">z *intern.Value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>goには<code>uint128</code>という型は存在しないため、<a href="https://cs.opensource.google/go/go/+/refs/tags/go1.18beta2:src/net/netip/uint128.go;drc=refs%2Ftags%2Fgo1.18beta2;l=13">uint64型2つを使用して定義</a>しています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// uint128 represents a uint128 using two uint64s.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// When the methods below mention a bit number, bit 0 is the most</span></span><br><span class="line"><span class="comment">// significant bit (in hi) and bit 127 is the lowest (lo&amp;1).</span></span><br><span class="line"><span class="keyword">type</span> uint128 <span class="keyword">struct</span> &#123;</span><br><span class="line">hi <span class="keyword">uint64</span></span><br><span class="line">lo <span class="keyword">uint64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uint64</code>とは64ビット、つまり<code>uint128</code>で128ビット(=16バイト)を表現しています。</p><p>また、Addr型にはIPv6のゾーン識別子として<a href="https://cs.opensource.google/go/go/+/refs/tags/go1.18beta2:src/net/netip/netip.go;drc=49b7c9caec6b96d0b327624efee61bd8a72cf68c;l=68">zというフィールド</a>を用意しています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// z0, z4, and z6noz are sentinel IP.z values.</span></span><br><span class="line"><span class="comment">// See the IP type&#x27;s field docs.</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">z0    = (*intern.Value)(<span class="literal">nil</span>)</span><br><span class="line">z4    = <span class="built_in">new</span>(intern.Value)</span><br><span class="line">z6noz = <span class="built_in">new</span>(intern.Value)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>ゾーンを参照する<code>Zone()</code>メソッドも用意されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Zone returns ip&#x27;s IPv6 scoped addressing zone, if any.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ip Addr)</span> <span class="title">Zone</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> ip.z == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">zone, _ := ip.z.Get().(<span class="keyword">string</span>)</span><br><span class="line"><span class="keyword">return</span> zone</span><br></pre></td></tr></table></figure><p>ゾーンを定義する際には<code>WithZone()</code>メソッドを使用します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// WithZone returns an IP that&#x27;s the same as ip but with the provided</span></span><br><span class="line"><span class="comment">// zone. If zone is empty, the zone is removed. If ip is an IPv4</span></span><br><span class="line"><span class="comment">// address, WithZone is a no-op and returns ip unchanged.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ip Addr)</span> <span class="title">WithZone</span><span class="params">(zone <span class="keyword">string</span>)</span> <span class="title">Addr</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> !ip.Is6() &#123;</span><br><span class="line"><span class="keyword">return</span> ip</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> zone == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">ip.z = z6noz</span><br><span class="line"><span class="keyword">return</span> ip</span><br><span class="line">&#125;</span><br><span class="line">ip.z = intern.GetByString(zone)</span><br><span class="line"><span class="keyword">return</span> ip</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WithZone()</code>メソッドは文字列からAddr型を定義する<a href="https://cs.opensource.google/go/go/+/refs/tags/go1.18beta2:src/net/netip/netip.go;drc=49b7c9caec6b96d0b327624efee61bd8a72cf68c;l=202"><code>ParseAddr()</code>メソッド</a>の内部でも利用されています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// parseIPv6 parses s as an IPv6 address (in form &quot;2001:db8::68&quot;).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parseIPv6</span><span class="params">(in <span class="keyword">string</span>)</span> <span class="params">(Addr, error)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">...省略...</span><br><span class="line"><span class="keyword">return</span> AddrFrom16(ip).WithZone(zone), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="net-netipを使う"><a href="#net-netipを使う" class="headerlink" title="net/netipを使う"></a>net/netipを使う</h1><p>それではnet/netipパッケージを実際に使ってみます。</p><p>まずは文字列からAddr型を生成します。<code>ip0</code>を空文字として不当なAddr型に、<code>ip1</code>をゾーン識別子(%eth0)付きのAddr型として設定します。</p><p>Addr型のメソッドである<code>IsValid()</code>メソッドを使用していそれぞれの入力を評価します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/netip&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ip0, _ := netip.ParseAddr(<span class="string">&quot;&quot;</span>)</span><br><span class="line">ip1, _ := netip.ParseAddr(<span class="string">&quot;fe80::2%eth0&quot;</span>)</span><br><span class="line">fmt.Println(ip0.IsValid())</span><br><span class="line">fmt.Println(ip1.IsValid())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上のソースコードを実行すると</p><figure class="highlight bash"><figcaption><span>出力</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>が出力されます。</p><p>それでは次にIPv6アドレス(ゾーン識別子付き)を定義して比較演算子を使用してみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/netip&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ip1, _ := netip.ParseAddr(<span class="string">&quot;fe80::2%eth0&quot;</span>)</span><br><span class="line">ip2, _ := netip.ParseAddr(<span class="string">&quot;fe80::2%eth0&quot;</span>)</span><br><span class="line">    ip3, _ := netip.ParseAddr(<span class="string">&quot;192.0.2.1&quot;</span>)</span><br><span class="line">fmt.Println(ip1 == ip2)</span><br><span class="line">fmt.Println(ip1 != ip2)</span><br><span class="line">    fmt.Println(ip1 == ip3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上のコードを実行すると</p><figure class="highlight bash"><figcaption><span>出力</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p>と出力されます。net/netip導入の１つの目標である演算子による比較が可能になっています。</p><p>また、IPv6の表記ではゼロが２度以上続く場合<code>「::」</code>として省略することができます。</p><p>省略せずに展開するメソッドとして<code>StringExpanded()</code>などのメソッドも用意されています。<code>StringExpanded()</code>で返却される値は文字列です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/netip&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ip1, _ := netip.ParseAddr(<span class="string">&quot;fe80::2%eth0&quot;</span>)</span><br><span class="line">expIp1 := ip1.StringExpanded()</span><br><span class="line">fmt.Println(expIp1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, ip1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, expIp1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>出力</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fe80:0000:0000:0000:0000:0000:0000:0002%eth0</span><br><span class="line">netip.Addr</span><br><span class="line">string</span><br></pre></td></tr></table></figure><p>ビット長も<code>BitLen()</code>メソッドを使えば簡単に調べることができます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/netip&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ip1, _ := netip.ParseAddr(<span class="string">&quot;fe80::2%eth0&quot;</span>)</span><br><span class="line">ip3, _ := netip.ParseAddr(<span class="string">&quot;192.0.2.1&quot;</span>)</span><br><span class="line">fmt.Println(ip1.BitLen())</span><br><span class="line">fmt.Println(ip3.BitLen())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>出力</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">128</span><br><span class="line">32</span><br></pre></td></tr></table></figure><p>簡単にIPアドレスの操作を行うことができますね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>net/netipによって新たに導入された構造体は「Addr型(IPアドレスを定義)」「AddrPort型(IPアドレスとポートを定義)」「Prefix型(IPアドレスとビット長を定義)」の3つである。</li><li>net/netipではとnet.IPと比較してより少ないメモリでimmutableでかつ比較演算子を使って簡単に比較することができるようになった。</li></ul><p>今回Go1.18の集中連載記事を書くにあたってGoの公式リポジトリのissueやdocsなどを比較しながらまとめました。普段の実装では本家のソースコードをつぶさに確認することはなかったので良い体験ができたと思っています。「Goの実装をより良くするにはGo自体の実装を研究することだ」と誰かが言っていたのを思い出しました。</p><p>これを機に自分の普段の実装も見直してみたいと思います。</p><p>最後までお付き合いいただきありがとうございました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-18/">Go1.18</category>
      
      <category domain="https://future-architect.github.io/tags/netip/">netip</category>
      
      
      <comments>https://future-architect.github.io/articles/20220215a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go1.18から追加されたFuzzingとは</title>
      <link>https://future-architect.github.io/articles/20220214a/</link>
      <guid>https://future-architect.github.io/articles/20220214a/</guid>
      <pubDate>Sun, 13 Feb 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;この記事は&lt;a href=&quot;https://future-architect.github.io/articles/20220209a/&quot;&gt;Go1.18連載&lt;/a&gt;の3記事目です。&lt;/p&gt;
&lt;p&gt;伊藤真彦です、最近CSIGの&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>この記事は<a href="https://future-architect.github.io/articles/20220209a/">Go1.18連載</a>の3記事目です。</p><p>伊藤真彦です、最近CSIGの<a href="https://vuls.biz/">Vuls</a>チームで働くようになりました。</p><p><code>crypto/elliptic (CVE-2022-23806)、math/big (CVE-2022-23772)、cmd/go (CVE-2022-23773)</code>へのセキュリティFixを含む<a href="https://go.dev/dl/#go1.17.7">Go 1.17.7と1.16.14</a>が先日リリースされました。急にセキュリティエンジニアっぽい事を言うようになるのは恐縮ですが忘れずアップデートしていきましょう。</p><p>脇道に逸れましたがこの記事ではFuzzingについて紹介します。</p><h1 id="Go1-18から追加されたFuzzingとは"><a href="#Go1-18から追加されたFuzzingとは" class="headerlink" title="Go1.18から追加されたFuzzingとは"></a>Go1.18から追加されたFuzzingとは</h1><p>Go1.18からFuzzingという機能が追加されます、Genericsのインパクトが大きいですが、Go1.18ではこういった大きな変更も加わっています。</p><p>機能追加に伴い<a href="https://go.dev/doc/fuzz/">ランディングページ</a>が作成されました、<a href="https://tip.golang.org/doc/go1.18">リリースノート</a>で<code>fuzzing landing page</code>と紹介されています。今後もドキュメントと呼ぶよりランディングページと呼ぶ方が伝わりやすいかもしれません。</p><p>Fuzzingとはテスト手法の一つで、プログラムの機能が想定していない入力を与える事でバグを発見するアプローチの事を指します。想定していない入力とは具体的にはランダムな値を乱数を基に生成する事で生み出した値ですが、ランダムな値であること自体はFuzzingの本質ではありません。テスト入力に人力で用意したデータを追加する事もあります。ともかくテストケースの不足や実装の考慮漏れを炙り出すための工夫ということですね。</p><p>なおFuzzingはGo独自の概念ではありません。</p><h1 id="Fuzzingの使い方"><a href="#Fuzzingの使い方" class="headerlink" title="Fuzzingの使い方"></a>Fuzzingの使い方</h1><p><a href="https://go.dev/doc/fuzz/">ランディングページ</a>に説明がありますが、端的に説明すると下記の通りです。</p><ol><li>Fuzzing機能を利用するテストを記載する</li><li><code>-fuzz</code>オプションをつけてテストを実行する</li></ol><p>それほど難しいものではありません。</p><h1 id="Fuzzingの書き方"><a href="#Fuzzingの書き方" class="headerlink" title="Fuzzingの書き方"></a>Fuzzingの書き方</h1><p>テストの書き方も<a href="https://go.dev/doc/fuzz/">ランディングページ</a>にある画像を見ればすぐに理解できると思います。</p><img src="/images/20220214a/image.png" alt="テストの書き方" width="1090" height="408" loading="lazy"><p><code>func FuzzFoo(f *testing.F)</code>のようにFuzzから始まり、Go1.18から新しく追加された<code>*testing.F</code>を引数に取るテストコードを記載します。</p><p><code>f.Fuzz</code>の中にテストの内容を記載します、テストコードの<code>Fuzzing arguments</code>はランダム生成された値になります。<br>下記の型のデータであれば任意の個数用意する事が可能です。</p><ul><li>string, []byte</li><li>int, int8, int16, int32/rune, int64</li><li>uint, uint8/byte, uint16, uint32, uint64</li><li>float32, float64</li><li>bool</li></ul><p>任意の値の組み合わせを必ず実行したい、という場合は<code>f.Add</code>で入力を指定できます。</p><h1 id="Fuzzingの実行方法"><a href="#Fuzzingの実行方法" class="headerlink" title="Fuzzingの実行方法"></a>Fuzzingの実行方法</h1><p>テストコードが用意出来たら<code>-fuzz</code>オプションをつけてテストを実行します。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">test</span> -fuzz=FuzzTestName</span><br></pre></td></tr></table></figure><p>テスト名を指定しなくても実行する事は可能です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">test</span> -fuzz .</span><br></pre></td></tr></table></figure><p><code>-fuzztime</code>のデフォルト値は無期限です、設定しないと<code>Ctrl + C</code>で中断するまで永遠にテストが続きますのでご注意ください。</p><p>また、下記のような内容がリリースノートに記載されています。</p><p>ファジングは大量のメモリを消費する可能性があり、実行中のマシンのパフォーマンスに影響を与える可能性があることに注意してください。現在、ファズキャッシュに書き込まれる可能性のあるファイルの数または合計バイト数に制限はないため、ファズキャッシュは大量のストレージ（場合によっては数GB）を占有する可能性があります。</p><p>実際に簡単なFuzzingテストコードを実行したところ一瞬でCPU使用率が100%になりました。<br><img src="/images/20220214a/image_2.png" alt="CPU利用率が高い様子" width="1157" height="1271" loading="lazy"></p><p>メモリ使用量も2GBほど増えました、実用上差し支える事例が出た場合は今後のアップデートで調整が入る、またはオプション項目が増えるかもしれません。</p><h1 id="Fuzzingはどこで使うと良いのか"><a href="#Fuzzingはどこで使うと良いのか" class="headerlink" title="Fuzzingはどこで使うと良いのか"></a>Fuzzingはどこで使うと良いのか</h1><p>ランダムな値でテストを実行できることはわかったけど実際どのように使うと良いのだろうか、と疑問に思う方もいるかもしれません。</p><p>困ったら標準ライブラリを見ると良い、という事で執筆時点での<a href="https://github.com/golang/go">Goのmasterブランチ</a>を覗いてみました。</p><p>下記のパッケージでFuzzingが採用されていました。</p><p><a href="https://github.com/golang/go/blob/master/src/archive/tar/fuzz_test.go">archive/tar</a><br><a href="https://github.com/golang/go/blob/master/src/archive/zip/fuzz_test.go">archive/zip</a><br><a href="https://github.com/golang/go/blob/master/src/compress/gzip/fuzz_test.go">compress/gzip</a><br><a href="https://github.com/golang/go/blob/master/src/crypto/elliptic/fuzz_test.go">crypto/elliptic</a><br><a href="https://github.com/golang/go/blob/master/src/encoding/json/fuzz_test.go">encoding/json</a><br><a href="https://github.com/golang/go/blob/master/src/image/gif/fuzz_test.go">image/gif</a><br><a href="https://github.com/golang/go/blob/master/src/image/jpeg/fuzz_test.go">image/jpeg</a><br><a href="https://github.com/golang/go/blob/master/src/image/png/fuzz_test.go">image/png</a><br><a href="https://github.com/golang/go/blob/master/src/net/netip/fuzz_test.go">net/netip</a><br><a href="https://github.com/golang/go/blob/30501bbef9fcfc9d53e611aaec4d20bb3cdb8ada/src/runtime/mgcpacer_test.go#L719">runtime/mgcpacer_test</a><br><a href="https://github.com/golang/go/blob/30501bbef9fcfc9d53e611aaec4d20bb3cdb8ada/src/runtime/debug/mod_test.go#L23">runtime/debug_test</a><br><a href="https://github.com/golang/go/blob/30501bbef9fcfc9d53e611aaec4d20bb3cdb8ada/src/testing/match_test.go#L197">testing</a></p><p>主にエンコード、デコード、パースといった機能に相当する部分が多い印象です。</p><p><code>net/netip</code>はそれ自体がGo1.18の新機能ですね、<code>f.Add</code>を有効活用する事例やFuzzingにおける高度な検証の手法としてとても参考になりますね。</p><p>参考までにお世話になる事が多いであろう<code>encoding/json</code>のテストコードを見てみましょう。</p><figure class="highlight go"><figcaption><span>fuzz_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FuzzUnmarshalJSON</span><span class="params">(f *testing.F)</span></span> &#123;</span><br><span class="line">f.Add([]<span class="keyword">byte</span>(<span class="string">`&#123;</span></span><br><span class="line"><span class="string">&quot;object&quot;: &#123;</span></span><br><span class="line"><span class="string">&quot;slice&quot;: [</span></span><br><span class="line"><span class="string">1,</span></span><br><span class="line"><span class="string">2.0,</span></span><br><span class="line"><span class="string">&quot;3&quot;,</span></span><br><span class="line"><span class="string">[4],</span></span><br><span class="line"><span class="string">&#123;5: &#123;&#125;&#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">&quot;slice&quot;: [[]],</span></span><br><span class="line"><span class="string">&quot;string&quot;: &quot;:)&quot;,</span></span><br><span class="line"><span class="string">&quot;int&quot;: 1e5,</span></span><br><span class="line"><span class="string">&quot;float&quot;: 3e-9&quot;</span></span><br><span class="line"><span class="string">&#125;`</span>))</span><br><span class="line"></span><br><span class="line">f.Fuzz(<span class="function"><span class="keyword">func</span><span class="params">(t *testing.T, b []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, typ := <span class="keyword">range</span> []<span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125;&#123;</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123; <span class="keyword">return</span> <span class="built_in">new</span>(<span class="keyword">interface</span>&#123;&#125;) &#125;,</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123; <span class="keyword">return</span> <span class="built_in">new</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;) &#125;,</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123; <span class="keyword">return</span> <span class="built_in">new</span>([]<span class="keyword">interface</span>&#123;&#125;) &#125;,</span><br><span class="line">&#125; &#123;</span><br><span class="line">i := typ()</span><br><span class="line"><span class="keyword">if</span> err := Unmarshal(b, i); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">encoded, err := Marshal(i)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">&quot;failed to marshal: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := Unmarshal(encoded, i); err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatalf(<span class="string">&quot;failed to roundtrip: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>そもそもデコード(Unmarshal)できない入力は無視する</li><li>デコードできた場合、それを正常にエンコード(Marshal)できる</li><li>エンコードできた場合、それをまたデコードできる</li></ol><p>という<code>roudtrip</code>な性質をテストしているようです。このような考え方は様々な処理のテストで応用できそうですね。</p><p><code>runtime、testing</code>のように既存のテストファイルにFuzzingのコードを書いても動作しますが、標準パッケージにおいては<code>fuzz_test.go</code>というファイルを用意する形を取っているようです。</p><p>標準パッケージの流儀に必ず従う必要はありませんが是非参考にしてみてください。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><ul><li>Go1.18からFuzzingが追加された</li><li>リリースに伴い<a href="https://go.dev/doc/fuzz/">ランディングページ</a>が用意された</li><li>テストコードを追加し<code>-fuzz</code>オプション付きでテストするだけでFuzzingを利用できる</li><li>標準パッケージでは<code>fuzz_test.go</code>に切り分けているものが多い</li></ul><p>どれほど真剣に取り組んでもバグは尽きぬものです、新機能を有効活用して安全に動くアプリケーションを目指していきたいですね。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-18/">Go1.18</category>
      
      <category domain="https://future-architect.github.io/tags/Fuzzing/">Fuzzing</category>
      
      
      <comments>https://future-architect.github.io/articles/20220214a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go 1.18集中連載 net/httpのマイナーチェンジ</title>
      <link>https://future-architect.github.io/articles/20220210a/</link>
      <guid>https://future-architect.github.io/articles/20220210a/</guid>
      <pubDate>Wed, 09 Feb 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220210a/image.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;543&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220210a/image.png" alt="" width="1200" height="543" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット真野です。<a href="https://future-architect.github.io/articles/20220209a/">Go 1.18連載</a>の2本目です。</p><p><a href="https://tip.golang.org/doc/go1.18">Go Release Notes</a> に記載があったMinor changes to the libraryにあったnet/httpの3点の更新について触れていきます。</p><ol><li>WebAssemblyの改善について</li><li>Cookie.Valid()の追加</li><li>MaxBytesHandlerの追加</li></ol><p>なお、2022年2月6日にGo 1.18 beta2で調べていますのでご注意ください。また、登場するコードは<a href="https://github.com/ma91n/go1.18release-note">ここに</a>コミットしています。</p><h2 id="①WebAssemblyの改善について"><a href="#①WebAssemblyの改善について" class="headerlink" title="①WebAssemblyの改善について"></a>①WebAssemblyの改善について</h2><p>Go 1.18からWebAssemblyでDialContext、DialTLS、DialTLSContext が正しく動くようになりました。</p><p>リリースノートから引用します。</p><blockquote><p>On WebAssembly targets, the Dial, DialContext, DialTLS and DialTLSContext method fields in Transport will now be correctly used, if specified, for making HTTP requests.<br><a href="https://tip.golang.org/doc/go1.18#minor_library_changes">https://tip.golang.org/doc/go1.18#minor_library_changes</a></p></blockquote><p>net/httpはサーバー・クライアントの両方を含んでいますがWebAssemblyというだけあってクライアントの話です。トランスポートのDial、DialContext、DialTLS、およびDialTLSContextメソッドフィールドが指定されている場合、HTTPリクエストが正しく使用されるようになりました。..ということです。そのままですが詳しく説明していきます。</p><h3 id="どういうことか"><a href="#どういうことか" class="headerlink" title="どういうことか"></a>どういうことか</h3><p><a href="https://github.com/golang/go/issues/27495">net/http: Expose the normal transport RoundTripper for WASM/js #27495</a>のIssueで触れられています。</p><p>http.Clientを拡張する手段としてトランスポートがあります。例えば必ずエラーになるような拡張を行うと、HTTP GETが必ず失敗するはずです。</p><figure class="highlight go"><figcaption><span>トランスポートを使った例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := http.Client&#123;Transport: &amp;http.Transport&#123;</span><br><span class="line">DialContext: <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, network, addr <span class="keyword">string</span>)</span> <span class="params">(net.Conn, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;あえてエラーにします&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;&#125;</span><br><span class="line">resp, err := c.Get(<span class="string">&quot;https://api.ipify.org/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err) <span class="comment">// 必ずここでエラーになるはず</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err = io.Copy(os.Stdout, resp.Body); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;\nDone.\n&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実際動かすと、<code>Get &quot;https://api.ipify.org/&quot;: あえてエラーにします</code> が出力されるでしょう。</p><p>このコードをGo 1.17で wasm 版で動かすと動かないよーということでした。</p><p>実際に動かしてみますが、Goのwasm対応は少しお作法が多く、先程のコードもお作法にそって修正する必要があります。</p><p><a href="https://www.kabuku.co.jp/developers/annoying-go-wasm">GoのWASMがライブラリではなくアプリケーションであること</a> の記事を参考にしました。</p><figure class="highlight go"><figcaption><span>wasm対応させるために修正したmain.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;syscall/js&quot;</span> <span class="comment">// wasm利用で必要なパッケージ</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, <span class="number">0</span>)                <span class="comment">// チャネル呼び出しはお作法</span></span><br><span class="line">js.Global().Set(<span class="string">&quot;getIp&quot;</span>, js.FuncOf(GetIp)) <span class="comment">// JS側で呼び出すための関数登録</span></span><br><span class="line">&lt;-c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetIp</span><span class="params">(_ js.Value, _ []js.Value)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">// HTTPリクエストを送信する場合は、goroutine化する必要がある</span></span><br><span class="line">c := http.Client&#123;Transport: &amp;http.Transport&#123;</span><br><span class="line">DialContext: <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, network, addr <span class="keyword">string</span>)</span> <span class="params">(net.Conn, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;あえてエラーにします&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line">resp, err := c.Get(<span class="string">&quot;https://api.ipify.org/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">appendHTMLBody(fmt.Sprintf(<span class="string">&quot;http get: %s&quot;</span>, err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line">b := bytes.NewBuffer(<span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">if</span> _, err = io.Copy(b, resp.Body); err != <span class="literal">nil</span> &#123;</span><br><span class="line">appendHTMLBody(fmt.Sprintf(<span class="string">&quot;read body: %s&quot;</span>, err))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">appendHTMLBody(b.String())</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;OK&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">appendHTMLBody</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> document = js.Global().Get(<span class="string">&quot;document&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> p = document.Call(<span class="string">&quot;createElement&quot;</span>, <span class="string">&quot;p&quot;</span>)</span><br><span class="line">p.Set(<span class="string">&quot;textContent&quot;</span>, s)</span><br><span class="line">document.Get(<span class="string">&quot;body&quot;</span>).Call(<span class="string">&quot;appendChild&quot;</span>, p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>コード中にコメントにも書いていますが、wasmでHTTPリクエストを送る場合にブロッキングさせると <a href="https://github.com/golang/go/issues/34478">wasm: fatal error: all goroutines are asleep - deadlock! #34478</a> にあるようにdeadlock! と表示されます。回避するためには別goroutineを利用する必要があるので、ひと手間ラップしています。<code>appendHTMLBody</code> は見たままですが、bodyに <code>&lt;p&gt;</code> タグを追加してIP情報（HTTPレスポンス）かエラーメッセージを表示します。</p><p>これをビルドします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ go version</span><br><span class="line">go version go1.17.6 windows/amd64</span><br><span class="line"></span><br><span class="line"><span class="comment"># ビルド(Go 1.17.6)</span></span><br><span class="line">$ <span class="built_in">set</span> GOOS=js</span><br><span class="line">$ <span class="built_in">set</span> GOARCH=wasm</span><br><span class="line">$ go build -o main1.17.wasm</span><br><span class="line"></span><br><span class="line"><span class="comment"># ビルド(Go 1.18beta2)</span></span><br><span class="line">$ go1.18beta2 build -o main1.18beta2.wasm</span><br></pre></td></tr></table></figure><p>続いて以下のようなHTMLを作成し、さきほどのw main.1.17.wasmと、main.1.18beta2.wasm と同じ階層に配備し何かしらのWebサーバでホストさせます。wasm_exec.jsはGoインストールしたフォルダに準備されているのでコピーして持ってきます。</p><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;wasm_exec.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> go = <span class="keyword">new</span> Go();</span></span><br><span class="line"><span class="javascript">        <span class="comment">// WebAssembly.instantiateStreaming(fetch(&quot;main1.17.wasm&quot;), go.importObject).then((result) =&gt; &#123;</span></span></span><br><span class="line"><span class="javascript">        WebAssembly.instantiateStreaming(fetch(<span class="string">&quot;main1.18beta2.wasm&quot;</span>), go.importObject).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            go.run(result.instance);</span></span><br><span class="line"><span class="javascript">            getIp();</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>net/http wasm調査<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>実行結果を比較すると、当然ながらGo 1.18ではトランスポートが正しく機能している（あえて発生させたエラーが表示される）ことが分かります。</p><h3 id="1-17実行結果"><a href="#1-17実行結果" class="headerlink" title="1.17実行結果"></a>1.17実行結果</h3><p>カスタムラウンドトリッパーが無視され、普通に通信が行われます。</p><img src="/images/20220210a/117実行結果.png" alt="1.17実行結果" width="787" height="275" loading="lazy"><h3 id="1-18実行結果"><a href="#1-18実行結果" class="headerlink" title="1.18実行結果"></a>1.18実行結果</h3><p>カスタムラウンドトリッパーが有効に動き、想定通りエラーメッセージが表示されます。</p><img src="/images/20220210a/118実行結果.png" alt="1.18実行結果" width="787" height="322" loading="lazy"><p>標準パッケージのどういう修正だったかというと概ね以下の修正方針だったそうで、goosがjsだったときはデフォルトのラウンドトリッパーを使わず、jsRoundTripperという構造体を新たに使うようになったようです。</p><p><a href="https://github.com/golang/go/commit/e8050da2dd93f4ff00a590c14f94c31da3c3159b">https://github.com/golang/go/commit/e8050da2dd93f4ff00a590c14f94c31da3c3159b</a></p><h2 id="②Cookie-Valid-の追加"><a href="#②Cookie-Valid-の追加" class="headerlink" title="②Cookie.Valid()の追加"></a>②Cookie.Valid()の追加</h2><p>HTTPリクエストヘッダーからCookieを読み取るロジックでは、Cookieのキーや値のパースに失敗した場合は切り捨てる（標準エラーに出力する）設計だったそうです。切り捨てられたかどうか判定するためにValid()の関数を追加しようよという提案でした。</p><p><a href="https://github.com/golang/go/blob/master/src/net/http/cookie.go#L288-L303">https://github.com/golang/go/blob/master/src/net/http/cookie.go#L288-L303</a></p><p>もとのIssueは<a href="https://github.com/golang/go/issues/46370">net/http: add Cookie.Valid method #46370</a> で、かなり議論が長いです。そもそもValidかどうか知ってもハンドリングできないだろうとか、無効な値を送信することがそもそも～とか、Serialize()関数を追加すべきとか、RFC 6265準拠について誤解が無いようにしようなど、いろいろな意見があり興味深いです。</p><h2 id="③MaxBytesHandlerの追加"><a href="#③MaxBytesHandlerの追加" class="headerlink" title="③MaxBytesHandlerの追加"></a>③MaxBytesHandlerの追加</h2><p><a href="https://github.com/golang/go/issues/39567">net/http: add MaxBytesHandler(h Handler, n int64) Handler #39567</a> で提案されています。</p><p>みなさん、HTTPリクエストボディをjson.Unmarshal() なんかで読み取るコードは覚えきれないほど書いて来たかと思いますが、何かしら悪意のあるクライアントが大容量のペイロードを送信してきたときはメモリ溢れ（オーバーフローなど）が起こる懸念があります。DDOS攻撃の一種かと思うので、セキュリティ的な改善につながるかと思います。</p><p>すでにいくつかのブログで紹介されていました。詳しい..。</p><ul><li><a href="https://mattn.kaoriya.net/software/lang/go/20211224005655.htm">Big Sky :: Go の http パッケージに MaxBytesHandler が入った。</a></li><li><a href="https://zenn.dev/hiroyukim/articles/4b4f5b482c0c2d">go1.18で入ったhttp.MaxBytesHandlerの中身を見てみた</a></li></ul><p>こういったストリームの読み取り時は、io.CopyN() を使ってまるごと読み取らないようにしようよといったお決まりがありましたが、それがさらに標準化されたのは良い流れかなと思います。ぜひ使っていきましょう。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>Go1.16のときは<a href="https://future-architect.github.io/articles/20210209/">go install</a>についてまとめ、Go 1.17連載のときは<a href="https://future-architect.github.io/articles/20210811a/">encoding/csv</a> について調べました。マイナーチェンジ系もIssueなどの議論を追っていくと自分にとってちょうど良いサイズで、学びがありオススメです。</p><p>この記事では、wasmのお作法をあまり理解せずかなりハマりましたが、こういう機会でないと使わないので楽しかったです。</p><p>最後まで読んでいただき、ありがとうございます！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/Go1-18/">Go1.18</category>
      
      <category domain="https://future-architect.github.io/tags/wasm/">wasm</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%83%8E%E3%83%BC%E3%83%88/">リリースノート</category>
      
      
      <comments>https://future-architect.github.io/articles/20220210a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
