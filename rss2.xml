<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Tue, 25 Oct 2022 01:23:23 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>A5:SQL Mk-2 （a5m2）のデータモデリング便利機能（初心者向け）</title>
      <link>https://future-architect.github.io/articles/20221025a/</link>
      <guid>https://future-architect.github.io/articles/20221025a/</guid>
      <pubDate>Mon, 24 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;私が所属しているチームでは、ERDの管理およびDDL生成のために、A5:SQL</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>私が所属しているチームでは、ERDの管理およびDDL生成のために、A5:SQL Mk-2（以下A5M2）を利用しています。全員がそこまで使ったことがあるわけでなく、徐々にかゆいところに手が届く機能を知り利用してよかったと思っています。</p><p>そこで、開発を通して最初から知っていれば嬉しかったなという機能をまとめます。使いこなしているチーム（人）に確認したら全て当たり前に使っていたので、常識レベルらしいです。</p><ul><li><a href="https://a5m2.mmatsubara.com/">A5:SQL Mk-2 - フリーのSQLクライアント&#x2F;ER図作成ソフト (松原正和)</a></li></ul><p>なお、a5m2 ってどういう機能があるんだという方は、宮崎さんの <a href="/articles/20220225a/">A5:SQL Mk-2に回帰した話 </a> を参照ください。また、SQLクライアントとして a5m2 を使う話はしません。余談ですが個人的にはSQLクライアントとしてはJetBrainsで特に有料製品を使っている方は<a href="/articles/20221014a/">Database Tools and SQLプラグインをおすすめ</a>しています。</p><h3 id="共通列（システム共通カラム）"><a href="#共通列（システム共通カラム）" class="headerlink" title="共通列（システム共通カラム）"></a>共通列（システム共通カラム）</h3><p>全テーブルに共通して付与したいカラムのことです。よく目にしそうなのが以下です。</p><ul><li>created_at: 作成日時</li><li>created_by: 作成ユーザーID、作成プログラムID</li><li>created_trace_id: 作成トレースID</li><li>updated_at: 更新日時</li><li>updated_by: 更新ユーザーID、更新プログラムID</li><li>updated_trace_id: 作成トレースID</li><li>revision: 更新番号</li><li>delete_flg: 削除フラグ(※是非については要議論)</li></ul><p>通常、運用観点から全テーブルに対して一律、横断的に付与させるため、個々のテーブル定義で設定するのは手間だし、管理の上でも省略したくなります。</p><p>a5m2 には共通列という機能が存在します。</p><p>「ER図タブ＞共通列を表示」から設定します。</p><img src="/images/20221025a/共通列の設定.png" alt="共通列の設定" width="1200" height="616" loading="lazy"><p>これにより全テーブルの一律設定が可能となります。</p><p>なお、共通列というだけあって、あるテーブルは追記オンリーである（更新がない）ため、updated_xx 系が不要にしたいといったことはできないです。その場合はa5m2のブックを分けるとか、DDLを生成した後に 何かしらのスクリプトで削除するといった作り込みになりそうです。</p><h3 id="型ドメイン"><a href="#型ドメイン" class="headerlink" title="型ドメイン"></a>型ドメイン</h3><p>公式ドキュメントにもしっかりと記載がある、<a href="https://a5m2.mmatsubara.com/help/ER/ERDomain.html">型ドメイン</a>についてです。</p><p>テーブル数が増えてくると、同じデータが入るにもかかわらず、データ型の定義が揺れてしまうときが多々あります。</p><p>例えば以下のようなケースです。</p><ul><li>論理的には同じ営業店コード VARCHAR(12) の体系で登録されるべきだが、名称は別のカラムが複数ある</li><li>移管先営業店コード、配送先営業店コードなど派生的な別名で登録する際に、誤ってVARCHAR(14)などと定義し揺れてしまう</li></ul><p>こういった状況を防ぐために取られるのが <strong>型ドメイン</strong> の機能です。基本的には個別で VARCHARやINTEGERなどを定義するのをやめ、全てドメイン定義で指定すると良いでしょう。</p><img src="/images/20221025a/型ドメイン.png" alt="型ドメイン.png" width="1200" height="603" loading="lazy"><p>当然ですが、型ドメインで個別の方を指定すると、DDLなどの出力時には指定された型桁で置換されます。ERDの大枠を作成する人が最初にいかに整えられるかが鍵になるかなと思います。</p><p>型ドメインですが、どれくらい汎化して用いるかは少しコツが必要だと思います。個別の営業店コードといったレベル感でいくのか、実は支社・支店も同じコード体型で存在するよというのであれば、 「店コード」 といったより抽象的な型ドメインを適用スべきかもしれません。システムで扱いたいエンティティをよく見極めて設計すると良いかなと思います。</p><h3 id="コマンドラインツール"><a href="#コマンドラインツール" class="headerlink" title="コマンドラインツール"></a>コマンドラインツール</h3><p>a5m2を用いるとGUIからDDLを生成できますが、コマンドラインツールも整備されておりこちらもうまく活用できると、CIやローカルでのタスクランナーでの実行に便利です。</p><ul><li><a href="https://www.vector.co.jp/soft/winnt/util/se519353.html?ds">A5ER コマンドラインユーティリティ</a></li></ul><p>上記をインストールしてPATHを通すと、大体の自動化ができます。使い方ですが、 <code>/Help</code> でみると用意されているコマンドの説明が出てきますので助かります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt;A5M2cmd /Help</span><br><span class="line">A5:SQL Mk-2 コマンドラインユーティリティ</span><br><span class="line">  Version 2.17.1</span><br><span class="line"></span><br><span class="line">■コマンドライン引数</span><br><span class="line">  &gt; a5m2cmd コマンドオプション [追加オプション...]</span><br><span class="line"></span><br><span class="line">  追加オプションは <span class="string">&quot;/オプション名&quot;</span> または <span class="string">&quot;/オプション名=オプション値&quot;</span> の形式で</span><br><span class="line">  指定します。</span><br><span class="line"></span><br><span class="line">  オプション値に空白が含まれる場合、オプション名も含めてダブルクォートで括ってく</span><br><span class="line">  ださい。</span><br><span class="line"></span><br><span class="line">■コマンドオプション</span><br><span class="line">  /RunSql     SQLのスクリプトファイルを実行します。</span><br><span class="line"></span><br><span class="line">（以下、省略）</span><br></pre></td></tr></table></figure><p>DDLの出力ですが、例えば次のようなコマンドで可能です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; A5M2cmd.exe /ERDDL /Encoding=UTF-8 /ERD=erd.a5er /OutFileName=ddl.sql</span><br></pre></td></tr></table></figure><p>出力の改行コードの設定はできないようなので、次のようなMakefileでカバーしたりしました。WSLで実行するイメージです（WSL側からWindows側のexeを叩くのがどうなんだというのはあります）。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">ddl.sql: erd.a5er</span></span><br><span class="line">@A5M2cmd.exe /ERDDL /Encoding=UTF-8 /ERD=erd.a5er /OutFileName=ddl.sql</span><br><span class="line">@nkf -wd --overwrite ddl.sql</span><br></pre></td></tr></table></figure><p>なお、コマンドラインツールですが、Wine&#x2F;Macだと動かないという話もあり（私は未検証）、もし何か追加で手順が必要であれば教えてください。</p><p>他にも、ERDのPDFを生成したりします。PDFではなくPNGなどの画像ファイルを出力を自動化するのも良いかなと思います。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">erd.png: erd.a5er</span></span><br><span class="line">@A5M2cmd.exe /ERImage /ERD=ERD.a5er /OutFileName=erd.png</span><br></pre></td></tr></table></figure><p>まとめて generate タスクのようにしても良いかなと思います。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.PHONY : generate</span><br><span class="line"><span class="section">generate: ddl.sql erd.pdf erd.png</span></span><br></pre></td></tr></table></figure><p>他にも、今回は割愛しますがSQLフォーマッタやImport&#x2F;ExportなどもCLIで呼び出せます。この手のツールでコマンドラインを用意されているところが、痒いところに手が届いて素晴らしいのでぜひ活用していきましょう。</p><h3 id="DDLオプション"><a href="#DDLオプション" class="headerlink" title="DDLオプション"></a>DDLオプション</h3><p>例えばPostgreSQLにおけるパーティション設定をどこで設定するか、迷った方も多いのではないでしょうか（私です）。</p><p>こういったRDBMS固有の設定は、CREATE TABLEオプションに記載します。次の例は、注文テーブルに対して、注文日でRANGEパーティションを設定する例です。</p><img src="/images/20221025a/PARTITON_BY_RANGE(order_on).png" alt="PARTITON_BY_RANGE(order_on)" width="1018" height="404" loading="lazy"><p>これが設定されると次のようにDDL出力時に差し込まれます。シンプルな仕組みに感じますが、私の周辺ではこれが逆に良いんだという声が続出している拡張機能です。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">order</span> (</span><br><span class="line">  id <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , user_id <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  <span class="comment">-- 中略</span></span><br><span class="line">  , updated_by <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  , revision <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">) <span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span>(ordered_on); <span class="comment">-- ★差し込まれたパーティション設定</span></span><br></pre></td></tr></table></figure><h3 id="論物変換"><a href="#論物変換" class="headerlink" title="論物変換"></a>論物変換</h3><p>型ドメインと類似ですが、同じ論理名なのに、物理名が揺れるケースがあります。よく見る例は次のようなケースです。</p><ul><li>注文番号（order_number）と処理番号（process_num）のように、 number と num で揺れるケース</li><li>開始日、終了日が start, end または from, to で揺れるケース</li><li>Xxx装置といったドメインで扱う名称が、 device と equipment で揺れるケース</li></ul><p>a5m2において標準で論物管理するような機能は存在しません。</p><p>そこでサードパーティ製のツールですが、 <a href="https://github.com/future-architect/a5er-dictionary">future-architect&#x2F;a5er-dictionary</a> を用いると便利です（同僚の辻さんが開発してくれました）。 <code>a5er-dictionary</code> は論理名でカラムを指定すると、辞書をもとに物理名を自動で組み立ててくれる便利ツールです。</p><p>例えば、以下のような辞書を用意します。</p><figure class="highlight txt"><figcaption><span>dict/dict.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ID,id</span><br><span class="line">会社,company</span><br><span class="line">コード,cd</span><br><span class="line">名,nm</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>これを用いて、各カラムの論理名から辞書を用いて、物理名を振り下ろすMakefileを用いると次のような感じで使えます。</p><figure class="highlight makefile"><figcaption><span>Makefile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">.PHONY</span>: install a5er-dictionary</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> ERD_PATH=erd.a5er</span><br><span class="line"><span class="keyword">export</span> DICT_PATH=dict/dict.txt</span><br><span class="line"><span class="keyword">export</span> OUTPUT_PATH=erd.tmp</span><br><span class="line"><span class="keyword">export</span> TABLE_PLURAL=false</span><br><span class="line"></span><br><span class="line"><span class="section">install:</span></span><br><span class="line">@go install github.com/future-architect/a5er-dictionary/cmd/a5er-dictionary@latest</span><br><span class="line"></span><br><span class="line"><span class="section">a5er-dictionary: erd.a5er</span></span><br><span class="line">@a5er-dictionary</span><br><span class="line">@rm -f erd.a5er</span><br><span class="line">@mv erd.tmp erd.a5er</span><br><span class="line">@nkf -wd --overwrite erd.a5er</span><br></pre></td></tr></table></figure><p>これを実行すると、辞書が不完全であれば次のようなメッセージが出力されます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ make a5er-dictionary</span><br><span class="line">2022/10/23 21:34:41 Fail to logical to physical [<span class="comment">#注文]. remain [#注文]</span></span><br></pre></td></tr></table></figure><p>これは、「注文」に一致する「物理名」が無いため、論物変換できなかったということです。</p><p>その場合、次のようにdict.txt にレコードを追加していくことで、辞書自体を育てつつ論理名と物理名の揺れを防ぐ仕組みです。</p><figure class="highlight txt"><figcaption><span>dict/dict.txtに追加する</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注文,order</span><br></pre></td></tr></table></figure><p>注意ですが、論理名自体が揺れてしまうと意味がないの注意です（装置ID:equipment_id、デバイスID:device_idなど論理名で揺れると防ぎようが無いです）。</p><p><code>a5er-dictionary</code> はまだ <code>v0.2.0</code> であるため、不具合、ご要望などあればコメント貰えればです（こういったdict.txtの辞書自体も、オープン化したいですね）。</p><h3 id="ERDレビュー"><a href="#ERDレビュー" class="headerlink" title="ERDレビュー"></a>ERDレビュー</h3><p>機能でもなんでも無いですが、a5m2 の良いところの1つに、定義ファイルがテキストファイルであるということです。</p><p>そのため、何かしらの修正が発生した場合にはGitHub上で差分を見てレビューできることは非常に良いです（もちろん <code>ddl.sql</code> を見てレビューでも良いと思いますが、本体側に予期せぬ変更が加えられていないか見れるのが良いです）。</p><img src="/images/20221025a/a5m2フォーマット.png" alt="" width="1200" height="1180" loading="lazy"><p><code>a5er</code> 拡張子のファイルをエディタで開くとフラットな構造であることがわかり、Diffも取りやすいことが分かります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>a5m2のデータモデリング周りの便利な機能、使い方を紹介しました。</p><p>個人的には開発者10人程度までであれば、今回のようなa5m2の機能を用いて十分に設計開発が進められると感じています。</p><p>もっと他にもこういった機能が便利だよというのがありましたら、Twitterなどでコメントを貰えると幸いです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DB/">DB</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%83%87%E3%83%BC%E3%82%BF%E3%83%A2%E3%83%87%E3%83%AB/">データモデル</category>
      
      <category domain="https://future-architect.github.io/tags/%E4%BE%BF%E5%88%A9%E3%83%84%E3%83%BC%E3%83%AB/">便利ツール</category>
      
      <category domain="https://future-architect.github.io/tags/A5SQLMk-2/">A5SQLMk-2</category>
      
      <category domain="https://future-architect.github.io/tags/a5m2/">a5m2</category>
      
      
      <comments>https://future-architect.github.io/articles/20221025a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Goで作ったロジックにWebUIをつけてGitHubページに公開する</title>
      <link>https://future-architect.github.io/articles/20221024a/</link>
      <guid>https://future-architect.github.io/articles/20221024a/</guid>
      <pubDate>Sun, 23 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;ちょっとしたツールをGoで作ってみたのですが、わざわざインストールしなくてもいいようにWebのUIをつけてブラウザで使えるようにしてみました。作ってみたのは以下のツールで、Markdownのリスト形式でざっと下書きしたテーブルの設計をSQLとか、PlantUMLとかMerm</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>ちょっとしたツールをGoで作ってみたのですが、わざわざインストールしなくてもいいようにWebのUIをつけてブラウザで使えるようにしてみました。作ってみたのは以下のツールで、Markdownのリスト形式でざっと下書きしたテーブルの設計をSQLとか、PlantUMLとかMermaid.js形式のERDの図にします。</p><p><a href="https://shibukawa.github.io/md2sql/">https://shibukawa.github.io/md2sql/</a></p><img src="/images/20221024a/スクリーンショット_2022-10-18_8.38.26.png" alt="" width="1200" height="714" loading="lazy"><p>ウェブフロントエンド部分はNext.jsの静的サイトで、GoはWASMにしてロードして実行しています。WASMを使うのは初めてなのであえて選んでみました。</p><h1 id="GoをWASM化する"><a href="#GoをWASM化する" class="headerlink" title="GoをWASM化する"></a>GoをWASM化する</h1><p>もともとCLIツールは作っておりました。CLIのメインは<a href="https://github.com/shibukawa/md2sql/blob/main/cmd/md2sql/main.go">cmd&#x2F;md2sql&#x2F;main.go</a>で作っていました。この中でやっていることは</p><ul><li>kingpin.v2のオプションパース</li><li>指定されたファイルを読み込み(あるいは標準入力)</li><li>パース</li><li>指定の形式変換</li></ul><p>です。このうち、Web化する場合は後者の2個だけ必要ですし、コマンドラインオプションのパースとかは不要なので、WASM化用のmain.goを別途作ります。それが<a href="https://github.com/shibukawa/md2sql/blob/main/cmd/wasm/main.go">cmd&#x2F;wasm&#x2F;main.go</a>です。JSから呼ばれる関数は<code>js.Value</code>で引数を受け取るエントリー関数を用意しておきます。<code>ConvertToSQL()</code>がこれにあたります。そしてJS側から呼べるように、<code>js.Global()</code>に作ったAPIを追加します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:build wasm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;bytes&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;syscall/js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/shibukawa/md2sql&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ConvertToSQL</span><span class="params">(this js.Value, args []js.Value)</span></span> any &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">map</span>[<span class="type">string</span>]any&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span>:      <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;first argument should be markdown source.&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">tables, err := md2sql.Parse(strings.NewReader(args[<span class="number">0</span>].String()))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">map</span>[<span class="type">string</span>]any&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span>:      <span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;message&quot;</span>: err.Error(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> buf bytes.Buffer</span><br><span class="line">md2sql.DumpSQL(&amp;buf, tables, md2sql.PostgreSQL)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">map</span>[<span class="type">string</span>]any&#123;</span><br><span class="line"><span class="string">&quot;ok&quot;</span>:     <span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;result&quot;</span>: buf.String(),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Mermaid/PlantUML変換は省略</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">js.Global().Set(<span class="string">&quot;md2sql&quot;</span>, js.ValueOf(<span class="keyword">map</span>[<span class="type">string</span>]any&#123;</span><br><span class="line"><span class="string">&quot;toSQL&quot;</span>:      js.FuncOf(ConvertToSQL),</span><br><span class="line"><span class="string">&quot;toMermaid&quot;</span>:  js.FuncOf(ConvertToMermaid),</span><br><span class="line"><span class="string">&quot;toPlantUML&quot;</span>: js.FuncOf(ConvertToPlantUML),</span><br><span class="line">&#125;))</span><br><span class="line">&lt;-c <span class="comment">// 終了しないようにブロック</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>次のコマンドでwasmが生成されることを確認しておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ GOOS=js GOARCH=wasm go build -o md2sql.wasm</span><br></pre></td></tr></table></figure><p>実行時にローダーも必要なのでwasm_exec.jsを取得しておきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> <span class="string">&quot;<span class="subst">$(go env GOROOT)</span>/misc/wasm/wasm_exec.js&quot;</span> .</span><br></pre></td></tr></table></figure><h1 id="Webの画面を作る"><a href="#Webの画面を作る" class="headerlink" title="Webの画面を作る"></a>Webの画面を作る</h1><p>&#x2F;cmd&#x2F;frontendをつくるようにcreate-next-appを実行し、最近お気に入りの<a href="https://future-architect.github.io/articles/20211124a/">Tailwind.CSSとdaisyUI</a>の組み合わせで、ページトップのスクリーンショットのような画面を作りました。テキストボックスに入れられたソースコードを<code>useRef</code>の変数に一時変数に入れておいて、generateボタンを押されたらGoコードを呼び出して実行します。</p><p>まず、Next.jsが動くページは、ドメイン(shibukawa.github.io)直下ではなく、&#x2F;md2sql&#x2F;というフォルダの中で動くのでbasePathを設定します。ついでに、静的サイト生成してアップするので画像の最適化もオフにしておきます。</p><figure class="highlight js"><figcaption><span>/cmd/frontend/next.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nextConfig = &#123;</span><br><span class="line">  <span class="attr">basePath</span>: <span class="string">&#x27;/md2sql&#x27;</span>,     <span class="comment">// 追加</span></span><br><span class="line">  <span class="attr">reactStrictMode</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">swcMinify</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">images</span>: &#123;                <span class="comment">// 追加</span></span><br><span class="line">    <span class="attr">unoptimized</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ついでにロードするWASMが公開する関数の型定義を宣言します。</p><figure class="highlight ts"><figcaption><span>/cmd/frontend/md2sql.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> f = <span class="function">(<span class="params">src: <span class="built_in">string</span></span>) =&gt;</span> &#123; <span class="attr">ok</span>: <span class="literal">true</span>, <span class="attr">result</span>: <span class="built_in">string</span>&#125; | &#123;<span class="attr">ok</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="built_in">string</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="attr">md2sql</span>:&#123;</span><br><span class="line">    <span class="attr">toSQL</span>: f,</span><br><span class="line">    <span class="attr">toMermaid</span>: f,</span><br><span class="line">    <span class="attr">toPlantUML</span>: f,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>tsconfig.json</code>にこの追加したmd2sql.d.tsを追加しておきます。最初next-env.d.tsに追加してやっていたのですが、このファイルってビルドのたびに再生成されてしまうので消えてしまいます。</p><figure class="highlight json"><figcaption><span>/cmd/frontend/tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;next-env.d.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;md2sql.d.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;**/*.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;**/*.tsx&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>wasm_exec.js</code>はNext.jsのpublicフォルダに入れておきます。</p><p>ビルド周りもいろいろ書き換えておきます。静的サイト生成なので、next build後にnext exportも実行するのと、GitHubの制約でリポジトリのルート以下の&#x2F;docsフォルダに生成されたファイルを移動、<code>.nojekyll</code>ファイルをその中に作る、というのを一緒にやります。ついでにGoのビルドもここに入れておきました。</p><p>さっとやったのでWindowsでは動かない書き方をしています。すみません。Windowsだったら<a href="https://www.npmjs.com/package/shelljs">shelljs</a>とか<a href="https://www.npmjs.com/package/crossenv">crossenv</a>を使ってください。</p><figure class="highlight json"><figcaption><span>/cmd/frontend/package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;prebuild&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cd ../wasm &amp;&amp; GOOS=js GOARCH=wasm go build -o ../frontend/public/md2sql.wasm&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;next build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;postbuild&quot;</span><span class="punctuation">:</span> <span class="string">&quot;next export &amp;&amp; mv out ../../docs &amp;&amp; touch ../../docs/.nojekyll&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="繋げる部分のコード"><a href="#繋げる部分のコード" class="headerlink" title="繋げる部分のコード"></a>繋げる部分のコード</h1><p>wasm_exec.jsをロードして実行するコードを書きます。Next.jsでは任意のページ内とかコンポーネント内で宣言しておけば、ページのヘッダー部分に<code>&lt;script&gt;</code>タグを作って遅延ロードしてくれる<a href="https://nextjs.org/docs/basic-features/script"><code>next/script</code>コンポーネント</a>があるのでこれを使います。一応この<a href="https://www.npmjs.com/package/@types/golang-wasm-exec">wasm_exec.jsの型定義も</a>入れようと思えば入れられますが、今回はts-ignoreで済ませてしまいました。定型文ですし。GitHubページのプロジェクトページなのでjsもwasmもパスが<code>/md2sql/</code>以下にある想定で書きます。</p><figure class="highlight tsx"><figcaption><span>/cmd/frontend/pages/index.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Script</span> <span class="keyword">from</span> <span class="string">&#x27;next/script&#x27;</span></span><br><span class="line"></span><br><span class="line">:中略</span><br><span class="line"></span><br><span class="line">&#123; <span class="comment">/* Load web assembly */</span> &#125;</span><br><span class="line">&lt;<span class="title class_">Script</span> id=<span class="string">&quot;exec-wasm&quot;</span> src=<span class="string">&quot;/md2sql/wasm_exec.js&quot;</span> onLoad=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// @ts-ignore</span></span><br><span class="line">    <span class="keyword">const</span> go = <span class="keyword">new</span> <span class="title class_">Go</span>();</span><br><span class="line">    <span class="title class_">WebAssembly</span>.<span class="title function_">instantiateStreaming</span>(<span class="title function_">fetch</span>(<span class="string">&quot;/md2sql/md2sql.wasm&quot;</span>), go.<span class="property">importObject</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">        go.<span class="title function_">run</span>(result.<span class="property">instance</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;&#125;/&gt;</span><br></pre></td></tr></table></figure><p>WASMのロジックは生成のコールバックが呼ばれた時に呼び出します。型定義があるのでその通りに呼んであげればOKです。本当はエラーはトーストとかでポップアップさせた方が良いけどとりあえず雑にコンソールに書いてます。</p><figure class="highlight tsx"><figcaption><span>/cmd/frontend/pages/index.tsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> generate = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (format) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;sql&quot;</span>:</span><br><span class="line">      <span class="keyword">const</span> r1 = md2sql.<span class="title function_">toSQL</span>(src.<span class="property">current</span>);</span><br><span class="line">      <span class="keyword">if</span> (r1.<span class="property">ok</span>) &#123;</span><br><span class="line">        <span class="title function_">setResult</span>(r1.<span class="property">result</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(r1.<span class="property">message</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// 以下略</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [format])</span><br></pre></td></tr></table></figure><p>接点としてはこの「起動時のロード」と、ローダーが登録した関数の呼び出しだけですので、あとはウェブフロントエンド作れる人には特に問題なく進められると思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>思ったよりもWASM化が簡単にできました。作業時間の半分はGitHubページのフォルダがルート直下じゃないことで起きる問題のトラブルシュートでした。繋ぐ部分を作ってローカルで試すのは思ったよりもすぐでした。</p><p>なお、標準のGoコンパイラでやっていますので生成されるwasmファイルは大きめ(5.5MB、gzip時に1.3MB)ですが、TinyGoを使えばもっと小さいものが作れますが、標準のGoの方が互換性が高いというメリットはあります。以前はgopher.jsを使ったりしたこともありますが、標準処理系でできるのはありがたいですね。まあ、あちらは.jsになるのでローダーが不要というメリットはあります。</p><p>今後も、小さいな補助ツールを作ったらウェブで簡単に実行できるようにしていこうと思いました。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.asobou.co.jp/blog/web/go-webassembly">GoのコードをWebAssenblyにコンパイルしてブラウザ上でGoを実行する</a></li><li><a href="https://macias.info/entry/202003151900_go_wasm_js.md">Go and WebAssembly (I): interacting with your browser JS API</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89/">フロントエンド</category>
      
      <category domain="https://future-architect.github.io/tags/Next-js/">Next.js</category>
      
      <category domain="https://future-architect.github.io/tags/wasm/">wasm</category>
      
      
      <comments>https://future-architect.github.io/articles/20221024a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>CSV処理における共通処理をDecoratorパターンで実現する</title>
      <link>https://future-architect.github.io/articles/20221021a/</link>
      <guid>https://future-architect.github.io/articles/20221021a/</guid>
      <pubDate>Thu, 20 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;Technogoly Innovation Group</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Technogoly Innovation Group 辻です。</p><p>システム間のデータ連携として、他システムが出力した CSV ファイルを Go で読み込んでリレーショナルデータベースにファイルのデータを保存する、という処理がありました。CSV の値をデコードしたあとに共通的な処理を差し込みたいユースケースで <a href="https://ja.wikipedia.org/wiki/Decorator_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3">Decorator パターン</a>を使って実装をしました。コードベースをシンプルに保ちつつ共通処理をフックできます。実用的なユースケースで Decorator パターンを紹介する記事は少ないと思ったので、本記事を書きました。<br>まず Decorator パターンが必要になった背景を説明したあとに具体的な Go の実装を見ていきます。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>他システムが出力した CSV ファイルを Go でデコードして、PostgreSQL にデータを投入するような処理がありました。簡略化したイメージは以下です。</p><img src="/images/20221021a/abstract.png" alt="" width="666" height="156" loading="lazy"><p>このとき、連携元システムが出力した CSV ファイルにヌル文字（NUL）<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> が稀に含まれることがわかりました。ヌル文字は PostgreSQL では扱えません。ヌル文字が含まれるデータを PostgreSQL に投入しようとするとエラーになります。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: invalid byte sequence for encoding &quot;UTF8&quot;: 0x00 (SQLSTATE 22021)</span><br></pre></td></tr></table></figure><p>PostgreSQL のエラーコード <a href="https://www.postgresql.jp/document/14/html/errcodes-appendix.html#:~:text=22021,character_not_in_repertoire">22021</a> や PostgreSQL の開発グループが運営する QA のスレッド <a href="https://www.postgresql.org/message-id/1510040474.2845.41.camel%40cybertec.at">“Re: ERROR: invalid byte sequence for encoding “UTF8”: 0x00”</a> などを見ると、PostgreSQL ではヌル文字は許容されていないことがわかります。</p><p>このことから PostgreSQL にデータを投入する前にヌル文字を削除する必要がありました。連携元システムの CSV ファイル出力処理は手を加えることができなかったため、<strong>Go の実装のなかでヌル文字を削除する</strong>ことにしました。</p><h2 id="実装方針"><a href="#実装方針" class="headerlink" title="実装方針"></a>実装方針</h2><p>実装方針として大きく２つ考えらます。</p><ul><li>案１：ナイーブにヌル文字を除外する</li><li>案２：Decorator パターンを使ってヌル文字を除外する</li></ul><p>本ケースでは後者の方法がより望ましい実装方針です。</p><p>まずヌル文字を除外する前の実装を確認します。その上でヌル文字を除外するためのナイーブな実装方法と、その実装をするとコードベースがどうなるか考えたあと、最後に Decorator パターンを使った実装を紹介します。</p><h3 id="ヌル文字を除外する前の実装"><a href="#ヌル文字を除外する前の実装" class="headerlink" title="ヌル文字を除外する前の実装"></a>ヌル文字を除外する前の実装</h3><p>まずヌル文字を除外する前の実装例です。CSV ファイルを読み込んで <a href="https://github.com/gocarina/gocsv">gocarina&#x2F;gocsv</a> でデコードし標準出力する実装です。データベースにデータを投入するコードは省略します。説明の便宜上 CSV ファイルの値は標準出力してヌル文字が含まれていることを確認します。</p><p>CSV ファイルの <code>&quot;future&quot;</code> の文字列の後ろにはヌル文字が含まれています。</p><figure class="highlight plaintext"><figcaption><span>company.csv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id,company_name</span><br><span class="line">&quot;1&quot;,&quot;future &quot;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>model.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Company <span class="keyword">struct</span> &#123;</span><br><span class="line">ID          <span class="type">string</span> <span class="string">`csv:&quot;id&quot;`</span></span><br><span class="line">CompanyName <span class="type">string</span> <span class="string">`csv:&quot;company_name&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/csv&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gocarina/gocsv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f, err := os.Open(<span class="string">&quot;company.csv&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"></span><br><span class="line">r := csv.NewReader(f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ss []Company</span><br><span class="line"><span class="keyword">if</span> err := gocsv.UnmarshalCSV(r, &amp;ss); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> ss &#123;</span><br><span class="line"><span class="comment">// ヌル文字は目には見えないため、バイト列として表示します</span></span><br><span class="line"><span class="comment">// 値が 0 であるバイトがヌル文字です</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;ID = %v, CompanyName = %v&quot;</span>,</span><br><span class="line">[]<span class="type">byte</span>(s.ID),</span><br><span class="line">[]<span class="type">byte</span>(s.CompanyName),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// データベースを投入する何らかの処理（省略）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>出力結果</li></ul><p>バイト列で確認すると、たしかに <code>CompanyName</code> の終端にヌル文字（バイトが 0）が含まれています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ID = [49], CompanyName = [102 117 116 117 114 101 0]</span><br></pre></td></tr></table></figure><h3 id="案１：ナイーブにヌル文字を除外する実装"><a href="#案１：ナイーブにヌル文字を除外する実装" class="headerlink" title="案１：ナイーブにヌル文字を除外する実装"></a>案１：ナイーブにヌル文字を除外する実装</h3><p>さて、ヌル文字を除外する実装を考えます。ナイーブな実装は <code>ID</code> や <code>CompanyName</code> の各構造体の値をデータベースへ投入するときにヌル文字を除外するという方法です。実装例のコードでは標準出力時に除外することに相当します。</p><p>実装例は以下です。</p><figure class="highlight go"><figcaption><span>delete_nul.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// deleteNUL はヌル文字を削除した文字列を返却します</span></span><br><span class="line"><span class="comment">// &quot;\x00&quot; がヌル文字です</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteNUL</span><span class="params">(s <span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> strings.ReplaceAll(s, <span class="string">&quot;\x00&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> ss &#123;</span><br><span class="line"><span class="comment">// 表示するときに各フィールドに deleteNUL() を挟み、ヌル文字を除外する</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;ID = %v, CompanyName = %v&quot;</span>,</span><br><span class="line">[]<span class="type">byte</span>(deleteNUL(s.ID)),</span><br><span class="line">[]<span class="type">byte</span>(deleteNUL(s.CompanyName)),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>出力結果</li></ul><p>出力結果を見ると、ヌル文字が削除されています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ID = [49], CompanyName = [102 117 116 117 114 101]</span><br></pre></td></tr></table></figure><p>この実装方法でヌル文字を除外できますが、以下のような課題があります。</p><ul><li>コードの見通し、可読性が悪くなる。ビジネスロジックのコードにシステム都合によるコードが混ざるため</li><li>実装やテストが漏れてしまうおそれがある。構造体の全フィールドに適用する必要があるため</li></ul><p>Decorator パターンを使って実装することで上記の課題を解決できます。</p><h3 id="案２：Decorator-パターンを使ってヌル文字を除外する実装"><a href="#案２：Decorator-パターンを使ってヌル文字を除外する実装" class="headerlink" title="案２：Decorator パターンを使ってヌル文字を除外する実装"></a>案２：Decorator パターンを使ってヌル文字を除外する実装</h3><p>本ケースでベターな方法である Decorator パターンを使った実装を紹介します。Decorator パターンはデザインパターンの１つとして知られています。もともとの振る舞いに対して、新しい振る舞いを動的に追加できます。</p><p>今回のケースでは「CSV の値を読み込む」という振る舞いに対して「ヌル文字を除去する」という振る舞いを追加します。これにより <code>gocsv.UnmarshalCSV()</code> で CSV をデコードするときにヌル文字を除去できます。まず <code>gocsv.UnmarshalCSV()</code> の API のシグネチャを確認したあとに、どのように Decorator を実装するか説明します。</p><p><code>gocsv.UnmarshalCSV</code> の API は以下のようになっています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UnmarshalCSV(in CSVReader, out <span class="keyword">interface</span>&#123;&#125;) <span class="type">error</span></span><br></pre></td></tr></table></figure><p>第一引数に <code>gocsv.CSVReader</code> のインターフェースを受け取っていることがポイントです。 <code>gocsv.CSVReader</code> は以下のメソッドがあるインターフェースです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CSVReader <span class="keyword">interface</span> &#123;</span><br><span class="line">Read() ([]<span class="type">string</span>, <span class="type">error</span>)</span><br><span class="line">ReadAll() ([][]<span class="type">string</span>, <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>またヌル文字を除外する前の実装で <code>gocsv.UnmarshalCSV</code> の引数として渡している <code>*csv.Reader</code> 構造体は当然ながら <code>Read()</code> と <code>ReadAll()</code> メソッドがあります。</p><p>このとき <strong><code>gocsv.CSVReader</code> インターフェースを満たす <code>Read()</code> と <code>ReadAll()</code> メソッドを持つ構造体を用意し、それぞれメソッドで <code>*csv.Reader</code> の <code>Read()</code> と <code>ReadAll()</code> を呼び出したあとに、ヌル文字を除外するような実装ができます。この構造体を <code>gocsv.UnmarshalCSV()</code> の引数に渡すことで <code>gocsv</code> によるデコード時にヌル文字を除去できます</strong>。</p><p>具体的な Decorator の実装例は以下のとおりです。</p><figure class="highlight go"><figcaption><span>decorator_reader.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> deleteNulReader <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 型は *csv.Reader でも良いです</span></span><br><span class="line"><span class="comment">// ただ Decorator と呼ぶ場合、振る舞いをラップするインターフェースと</span></span><br><span class="line"><span class="comment">// 同じインターフェースを型に持つのが一般的です</span></span><br><span class="line">r gocsv.CSVReader</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewDeleteNulReader は Decorator したインターフェースを返却します</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewDeleteNulReader</span><span class="params">(r gocsv.CSVReader)</span></span> gocsv.CSVReader &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;deleteNulReader&#123;r: r&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dr *deleteNulReader)</span></span> Read() ([]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// 最初に引数に渡された値の Read() を呼び出す</span></span><br><span class="line">ss, err := dr.r.Read()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ss, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read() の結果に対して、ヌル文字を除去する処理をおこなう</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> ss &#123;</span><br><span class="line">ss[i] = strings.ReplaceAll(ss[i], <span class="string">&quot;\x00&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ss, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(dr *deleteNulReader)</span></span> ReadAll() ([][]<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// 最初に引数に渡された値の ReadAll() を呼び出す</span></span><br><span class="line">ss, err := dr.r.ReadAll()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> ss, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ReadAll() の結果に対して、ヌル文字を除去する処理をおこなう</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> ss &#123;</span><br><span class="line"><span class="keyword">for</span> j := <span class="keyword">range</span> ss[i] &#123;</span><br><span class="line">ss[i][j] = strings.ReplaceAll(ss[i][j], <span class="string">&quot;\x00&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ss, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで Decorator は完成です。アプリケーションのコードに Decorator を適用する場合は以下のようになります。デコード処理以降の実装は手を加えずとも <code>gocsv.UnmarshalCSV()</code> で得られる結果ではヌル文字が削除されているのが非常に嬉しいポイントです。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// ... 省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NewDeleteNulReader() として Decorator を適用する</span></span><br><span class="line">r := NewDeleteNulReader(csv.NewReader(f))</span><br><span class="line"></span><br><span class="line"><span class="comment">// デコード処理以降の実装は手を加えずにヌル文字を除外することができる</span></span><br><span class="line"><span class="keyword">var</span> ss []Company</span><br><span class="line"><span class="keyword">if</span> err := gocsv.UnmarshalCSV(r, &amp;ss); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> ss &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;ID = %v, CompanyName = %v&quot;</span>,</span><br><span class="line">[]<span class="type">byte</span>(s.ID),</span><br><span class="line">[]<span class="type">byte</span>(s.CompanyName),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// データベースを投入する何らかの処理（省略）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>出力結果</li></ul><p>このような方法でヌル文字を除外できました。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ID = [49], CompanyName = [102 117 116 117 114 101]</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>CSV ファイルのデコード時に必要な共通的な処理を Decorator パターンを使って実装しました。この方法はコードベースをシンプルに保ちつつ、必要な共通処理をフックできる方法として役に立ちます。Decorator パターンの実用的な適用例として、みなさんの参考になれば嬉しいです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">文字コード 0 番の制御文字のことです。データや文字列の終端を示す特殊な文字として使用されることがあります。 <a href="https://e-words.jp/w/%E7%A9%BA%E6%96%87%E5%AD%97.html">https://e-words.jp/w/空文字.html</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/CSV/">CSV</category>
      
      <category domain="https://future-architect.github.io/tags/Decorator/">Decorator</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E9%80%A3%E6%90%BA/">ファイル連携</category>
      
      
      <comments>https://future-architect.github.io/articles/20221021a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>DynamoDB Streamsは同一ハッシュキーでもソートキーが異なれば順序保証されない</title>
      <link>https://future-architect.github.io/articles/20221020a/</link>
      <guid>https://future-architect.github.io/articles/20221020a/</guid>
      <pubDate>Wed, 19 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG DXユニットの真野です。&lt;/p&gt;
&lt;p&gt;タイトルに書いたままの内容の記事です。おそらくDynamoDB</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニットの真野です。</p><p>タイトルに書いたままの内容の記事です。おそらくDynamoDB Streams について調べたことがある方の多くの人には自明な内容だと思います。サマリです。</p><ul><li>DynamoDB Streamsの起動順序が保たれるのは <strong>項目単位</strong><ul><li>ハッシュキーのみのテーブルであればその単位</li><li>ハッシュキー＋ソートキーのテーブルであれば、 <strong>ソートキーまで含めた単位</strong></li><li>ソートキーが異なれば、起動順序が異なる可能性がある</li></ul></li><li>よく耳にするDynamoDB Streams シャードに言い換えると、シャードが同じであれば順序制御される<ul><li>異なるシャード同士では当然、順序保証はされない</li><li>同じハッシュキーでも、ソートキーが異なれば異なるシャードに割り当てられる可能性がある（あった）</li><li>DynamoDB Streamsのシャードは、DynamoDBテーブルのパーティションとは管理粒度が異なる</li></ul></li></ul><p>私がガッツリ勘違いしていて、でもトラブルシュートしてくれたのはチームの若手エースという、遺憾な結果でしたので、二度と繰り返さないという反省の意味も込め詳細を書きます。</p><h2 id="DynamoDB-Streamsとは"><a href="#DynamoDB-Streamsとは" class="headerlink" title="DynamoDB Streamsとは"></a>DynamoDB Streamsとは</h2><p>DynamoDB Streamsについては1.5年前に似たような小ネタを投稿しました。DynamoDB Streams自体についてはそちらを参照ください（今見ても（当時から）すでにタイトルが..）。</p><ul><li><a href="/articles/20210122/">オレのDynamoDB Streamsが再着火しないわけがない </a></li></ul><h2 id="ハマったケース"><a href="#ハマったケース" class="headerlink" title="ハマったケース"></a>ハマったケース</h2><p>例を上げて説明します。</p><img src="/images/20221020a/dynamodbstreams_構成.png" alt="dynamodbstreams_構成.png" width="1200" height="277" loading="lazy"><p>構成例のイメージです。何かしらスタッフの動作をセンシングするデバイスがあり、それをリアルタイムでDynamoDBに登録。そのデータをニアリアルタイムで別システムに連携する必要があるため、DynamoDB StreamsでS3に N 分間隔でタイムスタンプ付きのファイル名で出力。連携先の別システムはファイル名をもとに順次取り込む、といった連携方式です。</p><p>センシングされたデータは時系列に並んでおり、DynamoDBのキーとしては、デバイスIDがハッシュキー、読み取り時間がソートキーになるようなイメージです。</p><p>問題になった事象としては次です。</p><ul><li>生成されたファイルを順次取り込んだが、あるデバイスIDに絞ると時系列で順序が狂っていた</li><li>センシングされた最新の情報が誤って取り込まれ、実体とシステムの値が異なった</li></ul><img src="/images/20221020a/dynamodbstreams_構成-ページ2.drawio.png" alt="dynamodbstreams_構成-ページ2.drawio.png" width="1200" height="486" loading="lazy"><p>最初は、センシングするデバイス側から送られる順番が狂ったとか、図では省略していますが途中で経由するKinesis Data StreamsのシャードIDにデバイスIDが入っていないなど、DynamoDBに書き込まれるまでで順序が狂ったのかと思っていましたが、書き込みデータにデバイスから送信日時とサーバ受付時間、DBへの永続日時を比較すると原因がDynamoDB Streamsでの出力で狂っていることが分かりました。</p><h2 id="発生メカニズム"><a href="#発生メカニズム" class="headerlink" title="発生メカニズム"></a>発生メカニズム</h2><p><a href="https://aws.amazon.com/jp/blogs/news/how-to-perform-ordered-data-replication-between-applications-by-using-amazon-dynamodb-streams/">Amazon DynamoDB ストリームを使用して、順序付けされたデータをアプリケーション間でレプリケーションする方法 | Amazon Web Services ブログ</a> からの図を参照します。</p><p>DynamoDB Streamsは内部的にシャードと呼ばれる単位で分割されています。シャードがどういう単位で分割されるかは利用者側の制御ができず、操作数に応じて柔軟に拡大・縮小する仕組みです。（下図だと3シャードに分かれており、その単位でLambdaが起動します。）</p><img src="/images/20221020a/DDB-Stream.jpg" alt="DDB-Stream.jpg" width="880" height="459" loading="lazy"><p>Lambdaの起動数ですが、同時実行数を1にすれば、次のように1シャード、1Lambdaしか起動しないです。シャード内は更新順に並んでいるためその中ではLambdaで順番に処理すれば良いです。</p><img src="/images/20221020a/DDB-Table1.jpg" alt="DDB-Table1.jpg" width="760" height="293" loading="lazy"><p>今回の間違いは、下図のように、同一Partitionにあるけれど、異なるDynamoDB Streamsシャードに割り当てられたため、ほぼ同時タイミングで複数のLambdaが起動し、同一ハッシュキーのデータ順序が狂ったことが原因で発生しました。</p><img src="/images/20221020a/dynamodb順序-ページ3.drawio.png" alt="dynamodb順序-ページ3.drawio.png" width="1200" height="397" loading="lazy"><p>連携先システムとしてはどのファイルにどのキーが含まれているかわかりようがないので回避しようがない（ファイルをマージして取り込むにしても、まだ出力されていないファイルに順序が狂ったデータが無いと言い切れない）ため、出力側が調整すべきことです。</p><p>なお、図ではシャードごとのLambda起動順が狂った感じで書いていますが、起動順序が図とは逆であったとしても、Lambdaの実行時間によっては想定外の出力順序になりえます（どちらか片方がこの例でいくとS3の書き込みでリトライが走ったとか、Streamsの件数がたまたま片方が100件でもう片方が10件だったとか）。</p><p>これを開発した当初はデータ量もまだ少なく、シャードが細かく分割されていなかったためテストで検知されず、利用量が増えたことで顕在化したのかなとも思います。ハッシュキーが同じであればDynamoDB上は同一パーティションとなるので、そのままDynamoDB Streamsのシャードとなるのかと勘違いしていました。思い込みは良くないですね。後で切り分けするのは大変なので最初に裏取りしておくべきことでした。</p><h2 id="回避方法"><a href="#回避方法" class="headerlink" title="回避方法"></a>回避方法</h2><p>複数の回避手段があるかなと思います。てっとり早いのはDynamoDB Streamsではなく定時起動のジョブを作ることでしょう。</p><img src="/images/20221020a/改善案.png" alt="改善案.png" width="1200" height="642" loading="lazy"><p>もし、取り込み側のシステムのコントロールが効く、かつ過去分に対する補正処理が複雑でなければ、前回取り込んだデバイスのセンサー読み取り時刻より古ければ弾くといった処理を入れても良いかなと思います（状況によりますが）。</p><p>ちなみに、シャードが分かれることが原因であるため、Kinesis Data Streamsのキャプチャに変えても意味はないです。</p><ul><li><a href="https://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/kds.html">Kinesis Data Streams を使用して DynamoDB への変更をキャプチャする。 - Amazon DynamoDB</a></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>AWSドキュメント、ちゃんと読みましょう（自戒）</li><li>DynamoDB Streamsの起動順序は項目単位。ソートキーが指定されているテーブルの場合は、ハッシュキー＋ソートキーの単位での保証となる<ul><li>時系列DBのような使い方をしているテーブルに関しては、おそらく想定通りの挙動をしない</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/DynamoDB/">DynamoDB</category>
      
      <category domain="https://future-architect.github.io/tags/Lambda/">Lambda</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      <category domain="https://future-architect.github.io/tags/DynamoDBStreams/">DynamoDBStreams</category>
      
      
      <comments>https://future-architect.github.io/articles/20221020a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>技育祭2022秋に登壇しました。ソフトウェアアーキテクトって何やるの？～知っておくと役立つ考え方を共有します～</title>
      <link>https://future-architect.github.io/articles/20221019a/</link>
      <guid>https://future-architect.github.io/articles/20221019a/</guid>
      <pubDate>Tue, 18 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221019a/top.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;371&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221019a/top.png" alt="" width="1200" height="371" loading="lazy"><p>TIG真野です。技育祭2022秋のDAY1、勉強会のトップバッターで登壇させていただきました報告記事です。</p><ul><li><a href="https://talent.supporterz.jp/geeksai/2022autumn/">「技育祭」エンジニアを目指す学生のためのテックカンファレンス</a></li><li><a href="https://talent.supporterz.jp/geeksai/2022autumn/information/#1014-1330-HallA">技育祭2022【秋】参加学生のしおり</a></li></ul><h2 id="技育祭とは"><a href="#技育祭とは" class="headerlink" title="技育祭とは"></a>技育祭とは</h2><p>技育祭はサポーターズさんが運営している、「技術者を育てる」ことを目的としたエンジニアを目指す学生のための日本最大のオンラインカンファレンスです。調べた限りだと2020年から始まり、年に2回開催、今回で5回目の開催です。</p><p>個人的に思う特徴は以下かなと思っています。</p><ul><li><strong>豪華すぎる登壇陣</strong><ul><li>企業の役員・CTOクラスはもちろんのこと、デジタル大臣や、TVでも有名なデータ科学者、NASAジェット推進研究所、Rubyのパパ、AtCoderのchokudaiさんなど多方面で活躍されている方がいます。こんな集中して聞けるの学生さんが本当に羨ましい..</li></ul></li><li><strong>エンジニアを目指す学生さんのためのカンファレンス</strong><ul><li>このため、すでに社会人の方は知らない人も多いかもしれません</li></ul></li><li><strong>参加してくれる学生さんも多い!!</strong><ul><li>2022年秋は3日開催ですが、3000名以上と聞きました（もっとかも？）。3,4レーンでコンテンツが公開され、大型イベントです</li></ul></li></ul><p>私も同じタイムテーブルに、部屋の本棚に並んでいる<a href="https://www.amazon.co.jp/dp/B082WXZVPC/">ドメイン駆動設計入門 ボトムアップでわかる！ドメイン駆動設計の基本</a> の成瀬さんが登壇していて、しかもアーキテクトというタイトルもニアミスしており、チョチョチョ、マジでこれクジ運悪やつ～って思いました。当日は60名くらいの学生さんが見に来てくれました。何名か弊社員の人も来てくれたらしいです。応援、ありがとうございました。</p><h2 id="当日の内容"><a href="#当日の内容" class="headerlink" title="当日の内容"></a>当日の内容</h2><p>FutureCon2022の内容をアップデートして話しました。ソフトウェアアーキテクトって、大半の学生さんにとってはチーム開発の経験をしたことが無い以上、かなりストレッチじみた内容かなと思ったのですが、”勉強会” という枠にワザワザ参加したしてくれた以上、少しでも新しい視点を持ち帰ってもらえるような内容としました。</p><script async class="speakerdeck-embed" data-id="c3767385785847958fb75d0e07913ae2" data-ratio="1.77725118483412" src="//speakerdeck.com/assets/embed.js"></script><p>てっきり60分フルフル話すものだと思って資料を作りましたがが、最初に司会の方から会の趣旨について3,4分説明があり、質問タイムもあるということで45分くらいで終わるのが良いかなと思いました。アンチパターンの部分は飛ばし飛ばしだったので反省です。</p><h2 id="当日の質問"><a href="#当日の質問" class="headerlink" title="当日の質問"></a>当日の質問</h2><p>10分弱ほどの時間でしたが、時間目一杯まで質問をいただけました。ありがとうございます。覚えている範囲で質問＆回答を備忘に残します（チャットをメモに残すの忘れたのでうろ覚えです）。</p><ol><li>質問「アーキテクチャを検討する時に必要なスキルはあるんですか？」<ul><li>回答「最低限なレベルとしては、まず作りたいものをどの方法でも開発できるスキルは必要だと思います。その上で複数の選択肢が思いついたら、実現手段を比較してみるといった時間を取ってみると良いと思います」</li></ul></li><li>質問「AWSの資格はアーキテクチャを考える上で有益ですか？」<ul><li>回答「特にAWS上で構築する場合はプラスだと思います。何か実現したいことがある場合、AWSだと大体複数の手段が選択でき、その選択肢となりうるサービスを知っていることはプラスだと思います」</li></ul></li><li>質問「どれくらいアーキテクチャを考えることに時間を書けても良いですか？」<ul><li>回答「だいたい1割、多くても2割が適切かと思います。例えば、1週間で作れるシステムに3日かけるのはやり過ぎでしょう。その場合は半日～1日程度の時間を投資してもペイすると思います。まぁ本当に1週間くらいなら手戻りになってもたかが知れているので、数時間作戦を考えて、一気に作るくらいが多いような気もします」</li><li>（補足）Design It!に類似のことが書いていますが、<a href="https://speakerdeck.com/twada/quality-and-speed-2022-spring-edition?slide=100">t_wadaさんの発表</a>にでも触れられていました。</li></ul></li><li>質問「優秀な人が3名揃っていた時に、うまく進まないんですがこういう時にどうしますか？」<ul><li>回答「現場でもよく起こります。話しても空中戦になり疲弊するので、まず手を動かしてたたき台を作ることが大事です。」</li></ul></li></ol><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>社会人7,8年目くらいの同僚とか、私よりパイセンな15年目くらいの同僚にも良かったって話していたので、終わってみると少し背伸びした内容だった気もします。</p><p>ただ、個人的には学生の時に少し背伸びして読んだ書籍が、社会人になって後々かなりプラスに働いた体験があり、分からないところもあるが、こういう世界もあるんだと感じてもらえたらなと思います。最近は、ソフトウェアの規模もますます大きく、それを早く品質高く作るとともに、時に大きく変更したりいっそ捨てて作り直すということも多いと思います。そのためアーキテクトの判断はますます重要でしょう。良いアーキテクトはチームにとっても良い成長を促し、それが良いプロダクトを作ることにも繋がると思います。</p><p>私にとっても良い経験になりました。聞きに来てくれた方も、この記事を読んでくださった方もありがとうございました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%8A%80%E8%82%B2%E7%A5%AD/">技育祭</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%88/">ソフトウェアアーキテクト</category>
      
      
      <comments>https://future-architect.github.io/articles/20221019a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>PostgreSQLで Goの flextime のような関数を作りテスト時間を差し替える</title>
      <link>https://future-architect.github.io/articles/20221018a/</link>
      <guid>https://future-architect.github.io/articles/20221018a/</guid>
      <pubDate>Mon, 17 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221018a/safari-gb655953e6_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;426&quot;&gt;

&lt;p&gt;TIG 真野です。&lt;/p&gt;
&lt;p&gt;Goで時刻モックライブラリである、Songmuさん開発の&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221018a/safari-gb655953e6_640.jpg" alt="" width="640" height="426"><p>TIG 真野です。</p><p>Goで時刻モックライブラリである、Songmuさん開発の<a href="https://github.com/Songmu/flextime">flextime</a>にはずっとお世話になっています。</p><p>素晴らしいライブラリですが、SQLを用いて結果を永続化するようなテストでの利用する時に冗長性を感じました。</p><p>例えばあるWeb APIやバッチ処理のテストとして、DB上のデータが想定通りに登録&#x2F;更新されていることを調べたいときです。検証対象のカラムが例えば <code>created_at</code> 、<code>updated_at</code> だとします。通常は現在日時を登録する項目で、flextime で扱うのにうってつけです。ただし、これを固定化するには、Go側の <code>flextime</code> の値を外からSQLプレスホルダーで渡す必要があります。本来であれば、PostgreSQLであれば<code>current_timestamp</code> の関数で済むところを一々外から渡すのは面倒に感じます（仕方ないですが、これがなくなればGoもSQLのコードもスッキリするのにと思うこともしばしば）。</p><figure class="highlight go"><figcaption><span>SQLバインド</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_ <span class="string">&quot;embed&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/Songmu/flextime&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/jmoiron/sqlx&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go:embed update.sql</span></span><br><span class="line"><span class="keyword">var</span> updateSQL <span class="type">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UpdateAlreadyRead</span><span class="params">(tx *sqlx.Tx, userID <span class="type">string</span>)</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">now := flextime.Now() <span class="comment">// 現在時刻取得</span></span><br><span class="line"></span><br><span class="line">row := tx.QueryRow(updateSQL, now, userID) -- updated_atのためにnowをバインドする</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> updateCnt <span class="type">int64</span></span><br><span class="line"><span class="keyword">if</span> err := row.Scan(&amp;updateCnt); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, fmt.Errorf(<span class="string">&quot;update read status: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="type">int</span>(updateCnt), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>update.sql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> update_cnt <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">UPDATE</span> notification</span><br><span class="line">        <span class="keyword">SET</span> read_status_typ <span class="operator">=</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line">            , updated_at <span class="operator">=</span> $<span class="number">1</span> <span class="comment">-- 要件上はcurrent_timestampで良いが、テスト観点でバインド項目化</span></span><br><span class="line">            , revision <span class="operator">=</span> revision <span class="operator">+</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">WHERE</span> user_id <span class="operator">=</span> $<span class="number">2</span></span><br><span class="line">            <span class="keyword">AND</span> read_status_typ <span class="operator">=</span> <span class="string">&#x27;0&#x27;</span> <span class="comment">-- 0:未読</span></span><br><span class="line">        RETURNING <span class="number">1</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> cnt</span><br><span class="line"><span class="keyword">FROM</span> update_cnt;</span><br></pre></td></tr></table></figure><p>もちろん、<code>created_at</code>, <code>updated_at</code> などの項目を検証から除外すれば上記は気にしなくても良いですが、経験的には検証を外せば外すほど、そのテストの信頼性は落ちるのであまりしたくないです（しばしば、実は更新されていないことが後続フェーズで発覚して苦労します）。この辺は<a href="https://zenn.dev/mpyw/articles/rdb-ids-and-timestamps-best-practices">mpywさんの書いている記事</a>のように、PostgreSQLのトリガーなどでカバーするチームも多いかと思いますが、いったんそのやり方は忘れるとします。</p><figure class="highlight go"><figcaption><span>go-cmpでupdated_atをチェック対象外にする</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestUpdateAlreadyRead</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line">opts := cmpopts.IgnoreFields(<span class="string">&quot;updated_at&quot;</span>) <span class="comment">// 検証をスキップする項目を増やすと、テスト漏れになりやすい</span></span><br><span class="line"><span class="keyword">if</span> diff := cmp.Diff(wantRecords, gotRecords, opts); diff != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">t.Errorf(<span class="string">&quot;records mismatch (-want +got):\n%s&quot;</span>, diff)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然、PostgreSQLのもとから用意されている組み込み関数には、flextimeのような時刻固定の仕組みはないです。</p><p>この例だと更新系なので1項目ですが、登録だとcreated_at分も合わせて2項目になります。また、SQLで抽出したGo側でゴリゴリ業務ロジックで組み立てて、またDBに書き戻すようなコードを書いていると、ここで書いた <code>now</code> を一々引き回す必要があり面倒です（引き回さないと、微妙に呼び出しタイミングで created_at, updated_at の値が変わって扱いにくくなります）。</p><h2 id="PostgreSQL関数-を作成して代用してみる"><a href="#PostgreSQL関数-を作成して代用してみる" class="headerlink" title="PostgreSQL関数 を作成して代用してみる"></a>PostgreSQL関数 を作成して代用してみる</h2><p>次のようなテーブルと関数を作成してみる提案です。次の <code>flex_time</code> テーブルと、 <code>flex_timestamp()</code> 関数を定義します。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- テーブル定義</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> flex_time</span><br><span class="line">(</span><br><span class="line">    seq_num  BIGSERIAL,</span><br><span class="line">    fix_time TIMESTAMPTZ</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 関数定義</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">FUNCTION</span> flex_timestamp()</span><br><span class="line">    <span class="keyword">RETURNS</span> TIMESTAMPTZ <span class="keyword">AS</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span></span><br><span class="line">        flex_ts TIMESTAMPTZ :<span class="operator">=</span> (<span class="keyword">SELECT</span> fix_time</span><br><span class="line">                                <span class="keyword">FROM</span> flex_time</span><br><span class="line">                                <span class="keyword">WHERE</span> seq_num <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">max</span>(seq_num) <span class="keyword">FROM</span> flex_time));</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        IF flex_ts <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">        <span class="keyword">THEN</span></span><br><span class="line">            <span class="keyword">RETURN</span> flex_ts;</span><br><span class="line">        <span class="keyword">ELSE</span></span><br><span class="line">            <span class="keyword">RETURN</span> <span class="built_in">current_timestamp</span>;</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">    <span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$ <span class="keyword">LANGUAGE</span> PLPGSQL;</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>上記を作っておいて、、 <code>flex_timestamp()</code> を呼ぶと、何もしないと現在時刻を返します。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># <span class="keyword">SELECT</span> flex_timestamp();</span><br><span class="line">        flex_timestamp</span><br><span class="line"><span class="comment">------------------------------</span></span><br><span class="line"> <span class="number">2022</span><span class="number">-10</span><span class="number">-08</span> <span class="number">22</span>:<span class="number">50</span>:<span class="number">28.52979</span><span class="operator">+</span><span class="number">09</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">SELECT</span> flex_timestamp();</span><br><span class="line">        flex_timestamp</span><br><span class="line"><span class="comment">-------------------------------</span></span><br><span class="line"> <span class="number">2022</span><span class="number">-10</span><span class="number">-08</span> <span class="number">22</span>:<span class="number">52</span>:<span class="number">33.674613</span><span class="operator">+</span><span class="number">09</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br></pre></td></tr></table></figure><p>テストで使用したい時間を登録します。</p><figure class="highlight sql"><figcaption><span>時刻を固定化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># <span class="keyword">INSERT</span> <span class="keyword">INTO</span> flex_time(fix_time) <span class="keyword">VALUES</span> (TO_TIMESTAMP(<span class="string">&#x27;2022-04-01 15:30:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>そうすると時間が固定化されます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># <span class="keyword">SELECT</span> flex_timestamp();</span><br><span class="line">     flex_timestamp</span><br><span class="line"><span class="comment">------------------------</span></span><br><span class="line"> <span class="number">2022</span><span class="number">-04</span><span class="number">-01</span> <span class="number">15</span>:<span class="number">30</span>:<span class="number">00</span><span class="operator">+</span><span class="number">09</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">SELECT</span> flex_timestamp();</span><br><span class="line">     flex_timestamp</span><br><span class="line"><span class="comment">------------------------</span></span><br><span class="line"> <span class="number">2022</span><span class="number">-04</span><span class="number">-01</span> <span class="number">15</span>:<span class="number">30</span>:<span class="number">00</span><span class="operator">+</span><span class="number">09</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br></pre></td></tr></table></figure><p>当たり前ですが、<code>flex_time</code> テーブルのレコードを削除すれば、現在時刻を返します。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">postgres<span class="operator">=</span># <span class="keyword">TRUNCATE</span> flex_time;</span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span></span><br><span class="line"></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">SELECT</span> flex_timestamp();</span><br><span class="line">        flex_timestamp</span><br><span class="line"><span class="comment">-------------------------------</span></span><br><span class="line"> <span class="number">2022</span><span class="number">-10</span><span class="number">-08</span> <span class="number">22</span>:<span class="number">58</span>:<span class="number">17.919548</span><span class="operator">+</span><span class="number">09</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br></pre></td></tr></table></figure><p>これを用いれば、<code>current_timestamp</code> 関数とほぼ同等の使い方でSQLを書け、呼び出し元のコードもプレスホルダー文ちょっとすっきりすると思います。</p><p>使い終わったら <code>TRUNCATE</code> でキレイにしておくのがお作法になると思います。</p><h2 id="利用イメージ"><a href="#利用イメージ" class="headerlink" title="利用イメージ"></a>利用イメージ</h2><p>ここで最初の実装例に戻って適用してみます。</p><figure class="highlight diff"><figcaption><span>Go側の差分</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func UpdateAlreadyRead(tx *sqlx.Tx, userID string) (int, error) &#123;</span><br><span class="line"><span class="deletion">-row := tx.QueryRow(updateSQL, now, userID)</span></span><br><span class="line"><span class="addition">+row := tx.QueryRow(updateSQL, userID)</span></span><br><span class="line"></span><br><span class="line">var updateCnt int64</span><br><span class="line">if err := row.Scan(&amp;updateCnt); err != nil &#123;</span><br><span class="line">return 0, fmt.Errorf(&quot;update read status: %w&quot;, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return int(updateCnt), nil</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight diff"><figcaption><span>SQLの差分</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">WITH update_cnt AS (</span><br><span class="line">    UPDATE notification</span><br><span class="line">        SET read_status_typ = &#x27;2&#x27;</span><br><span class="line"><span class="deletion">-            , updated_at = $1</span></span><br><span class="line"><span class="addition">+            , updated_at = flex_timestamp()</span></span><br><span class="line">            , revision = revision + 1</span><br><span class="line">        WHERE user_id = $1</span><br><span class="line">            AND read_status_typ = &#x27;0&#x27; -- 未読</span><br><span class="line">        RETURNING 1)</span><br><span class="line">SELECT count(*) as cnt</span><br><span class="line">FROM update_cnt;</span><br></pre></td></tr></table></figure><p>テストでは、次のようにテスト時間を固定化したいタイミングで <code>flex_time</code> に登録します。終わったらTRUNCATEはチームでお約束を決めればよいと思います（通常は不要な気がしますが、一応消す例で書いてみました）。</p><figure class="highlight go"><figcaption><span>_test.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestUpdateAlreadyRead</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"></span><br><span class="line">_, err = tx.Exec(<span class="string">&quot;INSERT INTO flex_time (fix_time) VALUES (TO_TIMESTAMP(&#x27;2022-10-11 10:10:10&#x27;, &#x27;YYYY-MM-DD HH24:MI:SS&#x27;));&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, err := tx.Exec(<span class="string">&quot;TRUNCATE TABLE flex_time&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">t.Error(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>ちょっとした違いですが、開発・レビューなどの観点で見落としになり得るポイントを1つでも減らせるのが大きいかなと思っています。</p><h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><p>あまりないかもしれませんが、もしテストを並列に実行しかつ、固定化したい時間を変えたい場合は、コネクション単位で <code>application_name</code> を変え、その単位で設定するように関数を改修しても良いかもしれません。（flex_timeだけ分ける意味があるかはさておき）</p><p><code>application_name</code> というカラムを追加したバージョンです。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> flex_time</span><br><span class="line">(</span><br><span class="line">    seq_num  BIGSERIAL,</span><br><span class="line">    fix_time TIMESTAMPTZ,</span><br><span class="line">    application_name <span class="type">VARCHAR</span>(<span class="number">64</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">FUNCTION</span> flex_timestamp()</span><br><span class="line">    <span class="keyword">RETURNS</span> TIMESTAMPTZ <span class="keyword">AS</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span></span><br><span class="line">        flex_ts TIMESTAMPTZ :<span class="operator">=</span> (<span class="keyword">SELECT</span> fix_time</span><br><span class="line">                                <span class="keyword">FROM</span> flex_time</span><br><span class="line">                                <span class="keyword">WHERE</span> seq_num <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">max</span>(seq_num) <span class="keyword">FROM</span> flex_time <span class="keyword">WHERE</span> application_name <span class="keyword">IS</span> <span class="keyword">NULL</span>));</span><br><span class="line">        app_flex_ts TIMESTAMPTZ :<span class="operator">=</span> (<span class="keyword">SELECT</span> fix_time</span><br><span class="line">                                <span class="keyword">FROM</span> flex_time</span><br><span class="line">                                <span class="keyword">WHERE</span> seq_num <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">max</span>(seq_num) <span class="keyword">FROM</span> flex_time <span class="keyword">WHERE</span> application_name <span class="operator">=</span> current_setting(<span class="string">&#x27;application_name&#x27;</span>)));</span><br><span class="line">    <span class="keyword">BEGIN</span></span><br><span class="line">        IF app_flex_ts <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">             <span class="keyword">then</span> <span class="keyword">return</span> app_flex_ts;</span><br><span class="line">        ELSIF flex_ts <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">        <span class="keyword">THEN</span></span><br><span class="line">            <span class="keyword">RETURN</span> flex_ts;</span><br><span class="line">        <span class="keyword">ELSE</span></span><br><span class="line">            <span class="keyword">RETURN</span> <span class="built_in">current_timestamp</span>;</span><br><span class="line">        <span class="keyword">END</span> IF;</span><br><span class="line">    <span class="keyword">END</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$ <span class="keyword">LANGUAGE</span> PLPGSQL;</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>これを用いると、グローバル設定と、アプリケーション固有のテスト時間で区別できます。どちらも設定されるとアプリケーション固有を優先です。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- グローバル設定</span></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">INSERT</span> <span class="keyword">INTO</span> flex_time (application_name, fix_time) <span class="keyword">VALUES</span> (CURRENT_SETTING(<span class="string">&#x27;APPLICATION_NAME&#x27;</span>), TO_TIMESTAMP(<span class="string">&#x27;2022-06-27 11:20:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">SELECT</span> flex_timestamp();</span><br><span class="line">     flex_timestamp</span><br><span class="line"><span class="comment">------------------------</span></span><br><span class="line"> <span class="number">2022</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">00</span><span class="operator">+</span><span class="number">09</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- アプリケーション単位</span></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">INSERT</span> <span class="keyword">INTO</span> flex_time (application_name, fix_time) <span class="keyword">VALUES</span> (CURRENT_SETTING(<span class="string">&#x27;APPLICATION_NAME&#x27;</span>), TO_TIMESTAMP(<span class="string">&#x27;2022-06-27 11:20:00&#x27;</span>, <span class="string">&#x27;YYYY-MM-DD HH24:MI:SS&#x27;</span>));</span><br><span class="line"><span class="keyword">INSERT</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">postgres<span class="operator">=</span># <span class="keyword">SELECT</span> flex_timestamp();</span><br><span class="line">     flex_timestamp</span><br><span class="line"><span class="comment">------------------------</span></span><br><span class="line"> <span class="number">2022</span><span class="number">-06</span><span class="number">-27</span> <span class="number">11</span>:<span class="number">20</span>:<span class="number">00</span><span class="operator">+</span><span class="number">09</span></span><br><span class="line">(<span class="number">1</span> <span class="type">row</span>)</span><br></pre></td></tr></table></figure><p><code>application_name</code> ですが、次のようにコネクション接続時に指定できます。（<a href="https://www.postgresql.jp/docs/9.2/libpq-connect.html">参考</a>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgresql://user@localhost:5432/postgres?connect_timeout=10&amp;application_name=myapp</span><br></pre></td></tr></table></figure><p>ただ、こういった多段の設定はデータ削除が難しい（気軽に<code>flex_time</code> テーブルを <code>TRUNCATE</code> しにくくなる）ため、やるならapplication_nameは <code>NOT NULL</code> にした運用にしたほうが良いかもしれません。要件に応じて調整ですが、できる限り最初の実装のシンプルモデルの利用に留めるという、用法用量が良い塩梅かと感じます。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>PostgreSQLに、何も指定がなければ <code>current_timestamp</code>を、何か設定されていればその値を返す<code>flex_timestamp</code>関数 を定義して、使ってはどうかという記事でした。</p><p>これを思いついたのはちょうどあるプロジェクトの開発ラッシュ終盤で、同僚の辻さんに「こんなん思いついたんですけど~」って声をかけたら、もう開発も終わりですから..と諭されたため導入に失敗しました。そのため、まだ本番稼働＆運用実績がゼロのアイデア状態です。機会があればこの仕組を使ってみたいと思います。先駆けてトライしてくださる方も大歓迎です。ぜひ感想をTwitterなどで教えてください。</p><p>この記事で公開したサンプルコードは以下にアップしておきました。</p><ul><li><a href="https://github.com/ma91n/postgres-flextime">https://github.com/ma91n/postgres-flextime</a></li></ul><p>アイキャッチは<a href="https://pixabay.com/ja/users/fearscare-2010330/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4043090">Patrick</a>による<a href="https://pixabay.com/ja//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4043090">Pixabay</a>からの画像を利用させていただきました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/PostgreSQL/">PostgreSQL</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%86%E3%82%B9%E3%83%88/">テスト</category>
      
      <category domain="https://future-architect.github.io/tags/flextime/">flextime</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%88%E3%83%AA%E3%82%AC%E3%83%BC/">トリガー</category>
      
      
      <comments>https://future-architect.github.io/articles/20221018a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GoLand(JetBrains IDE)のDatabase Tools and SQLプラグインをメインのSQLクライアントにする</title>
      <link>https://future-architect.github.io/articles/20221014a/</link>
      <guid>https://future-architect.github.io/articles/20221014a/</guid>
      <pubDate>Thu, 13 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;Technogoly Innovation Group</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Technogoly Innovation Group 真野です。</p><p>RDB（ここでは社内でも実績が多いPostgreSQLとさせてください）のGUIクライアントツールと言えば何を利用していますか？ チーム内で聞くと様々なプロダクトの名前が挙がりました。</p><ul><li><a href="https://dbeaver.io/">DBeaver</a><ul><li>有名、機能リッチ、UIデザイン良い</li></ul></li><li><a href="https://a5m2.mmatsubara.com/">A5:SQL Mk-2</a><ul><li>データモデリングツールに用いていると、DBクライアントとしても用いる流れになりやすい</li></ul></li><li><a href="http://www.hi-ho.ne.jp/a_ogawa/psqledit/index.htm">PSqlEdit</a><ul><li>高速かつシンプル、直感的な動作</li><li>Oracle版の<a href="http://www.hi-ho.ne.jp/a_ogawa/osqledit/">OSqlEdit</a>に課金し、お世話になった。最初に使ったSQLクライアントツール（私です）</li></ul></li><li><a href="https://www.pgadmin.org/">pgAdmin 4</a><ul><li>データモデリングも、DBクライアントとしても利用</li></ul></li></ul><p>10数年前の所属していたプロジェクトだと、こういう開発ツールもチームで統一しないと駄目！みたいな雰囲気でしたが、いつの間にか↑あたりから自由に選んでね、という良い意味でのゆるふわさに変わっていたのが新鮮でした（規模やリーダーのポリシーによるんでしょうが）。</p><p>上記の4つのツールはどれも素晴らしいし、名前がたまたま挙がらなかったけど優れているツールもあるかと思います。そんな中で私が推したいのは、 <strong>GoLand（JetBrainsの有償ライセンスを購入している人）を利用している人に対しては、Database Tools and SQLプラグインを利用する</strong> ことです。GoLandはJetBrainsの提供するIDEの、Go言語版です。Python版のPyCharm(Professional)、Java（JVM）版のIntelliJ(Ultimate)などでも同様の機能を有すると思います</p><img src="/images/20221014a/image.png" alt="" width="1200" height="659" loading="lazy"><p>私がちょうど開発で用いているGoLand 2022.2.3 のバージョンで説明していきます。</p><p>GoLand には、30 日間無料体験版期間があるので、気になる人はお試しもできます。もし、ここに投資したくないって方は最初に上げた4つのツールなどを利用すると良いと思います。</p><ul><li><a href="https://www.jetbrains.com/ja-jp/go/download">https://www.jetbrains.com/ja-jp/go/download</a></li></ul><h2 id="Database-Tools-and-SQLの利用"><a href="#Database-Tools-and-SQLの利用" class="headerlink" title="Database Tools and SQLの利用"></a>Database Tools and SQLの利用</h2><p>GoLandでDatabase Tools and SQLを使うためには、プラグインをインストールする必要があります。</p><ul><li><a href="https://pleiades.io/help/go/relational-databases.html">https://pleiades.io/help/go/relational-databases.html</a></li></ul><p>Pluginから検索して追加ください。</p><img src="/images/20221014a/image_2.png" alt="" width="1200" height="582" loading="lazy"><p>JetBrains製品に詳しい人は、<a href="https://www.jetbrains.com/datagrip/">DataGrip</a> との違い何？と思うでしょう。ぶっちゃけ同じです。このプラグインを入れると DataGrip で利用可能なすべての機能のサポートしてくれるそうです。DataGripも30日より長く利用する場合は有償なのでお得ですね。</p><h2 id="おすすめする理由"><a href="#おすすめする理由" class="headerlink" title="おすすめする理由"></a>おすすめする理由</h2><p>次で機能面でのおすすめポイントを紹介しますが、GoLandでそのままSQL開発やクエリを発行できることの利点は個人的に大きいと思います。</p><ul><li><strong>複数のウィンドウを切り替えなくても良い</strong> （迷子になりにくい）<ul><li>開発していると、VSCode、ブラウザ、テストデータ用に複数のExcelブックなど開くのですが、減らせるのは個人的に嬉しい</li></ul></li><li>ショートカットを始めとした操作感が、JetBrainsと同等なので、コンテキストスイッチの負荷が下がる<ul><li>（当然ですが）デザインに一貫性があるのも強みに感じます</li></ul></li><li>開発するPJごとに、DB接続情報が紐づくので便利<ul><li>最初にDB接続情報を登録しておけば、複数のリポジトリを開発するときに脳内マッチングしなくても済む</li></ul></li></ul><p>このあたりは人によって逆にマイナスに働く部分かもしれませんが、作業によってウィンドウを行ったり来たりしなくても良いのは、個人的意見ですが本当に楽です。</p><p>SQLはORマッパーで隠蔽化されていて、SQLを生で書くことは殆どないよって方もいらっしゃるかと思います。その場合は確かに恩恵は受けにくいかもと思います。</p><h2 id="機能について"><a href="#機能について" class="headerlink" title="機能について"></a>機能について</h2><p>Database Tools and SQLプラグインがDataGripと同等と伝えてしまったので、ここからはDataGripの機能説明と同義になってしまいます。自分が使って気に入っている点・便利だなと思っている点を紹介します。</p><p>次から、いくつかGIF動画を貼っていますが、<a href="https://www.postgresqltutorial.com/postgresql-getting-started/postgresql-sample-database/">PostgreSQL TutorialのDVDレンタルのスキーマ</a>を取り込んでいます<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p><h3 id="スキーマの探索"><a href="#スキーマの探索" class="headerlink" title="スキーマの探索"></a>スキーマの探索</h3><p>いったんDBに接続できてしまえば、ドリルダウン的にテーブル定義を確認することができます。キーの定義などをさっと確認したいときに便利です。</p><img src="/images/20221014a/スキーマ探索.gif" alt="スキーマ探索" width="1200" height="569" loading="lazy"><p>DDLを見たほうが嬉しいという人にも、サクッと生成する機能があります。テーブルを右クリック＞SQLスクリプト＞SQLジェネレータ</p><img src="/images/20221014a/DDL生成.gif" alt="DDL生成" width="1200" height="926" loading="lazy"><h3 id="SQLの実行"><a href="#SQLの実行" class="headerlink" title="SQLの実行"></a>SQLの実行</h3><p>何かしらのSQLを選択肢、 <code>ctrl + Enter</code>で実行することができます。</p><img src="/images/20221014a/SQL実行.gif" alt="SQL実行" width="1200" height="648" loading="lazy"><p>JetBrains製のIDEらしく、補完もバッチリしていて、テーブル名、列名、ファンクションなどもバッチリです。</p><img src="/images/20221014a/補完.gif" alt="補完" width="1200" height="641" loading="lazy"><p>他にも次の点が個人的に気に入っています。</p><ul><li><strong>カラムをダブルクリックするとDDLの定義元にジャンプ</strong>する（！）。最初は驚きました</li><li><strong>存在しないテーブル、カラムなどを指定すると、エラーになる</strong> （コンパイル検出みたいに、実行前に気がつけて良いです）</li><li>（実はあまりやったことがないですが）、テーブル名をダブルクリックした表を、Excelのように直接編集してコミットできる</li><li>検索結果をCSV&#x2F;TSV&#x2F;JSON&#x2F;Markdown&#x2F;xlsxなどの様々なフォーマットでダウンロードもできます<ul><li>その時、縦横変換なども設定で可能</li><li>なんというか、作り込まれている..と感じることができました</li></ul></li></ul><h3 id="SQL生成"><a href="#SQL生成" class="headerlink" title="SQL生成"></a>SQL生成</h3><p>Insert, Updateなどの基本的なSQL生成もできます。</p><img src="/images/20221014a/SQL生成.gif" alt="SQL生成" width="1200" height="392" loading="lazy"><p>この辺はまぁ..大抵のツールに備わっていそうだなという感想です。</p><h3 id="プレスホルダー"><a href="#プレスホルダー" class="headerlink" title="プレスホルダー"></a>プレスホルダー</h3><p>アプリケーションで用いるライブラリによっては、プレスホルダーの書き方が <code>?</code> 以外の、 <code>$1</code> や <code>@id</code> といった書き方があり得ると思います。</p><p>このときにも、正規表現による設定でエディタにプレスホルダーだと認識させることができます。</p><ul><li><a href="https://www.jetbrains.com/help/datagrip/settings-tools-database-user-parameters.html">https://www.jetbrains.com/help/datagrip/settings-tools-database-user-parameters.html</a></li></ul><p>「ツール＞データべース＞クエリと実行＞ユーザーパラメータ」に、 <code>$1</code> の場合は、<code>\$(\d+)</code>、 <code>@id</code> の場合は <code>@(\w+)</code> を追加。</p><img src="/images/20221014a/image_3.png" alt="" width="1200" height="857" loading="lazy"><h3 id="背景色の変更"><a href="#背景色の変更" class="headerlink" title="背景色の変更"></a>背景色の変更</h3><p>例えば、develop, staging, production と3つのDB接続先があり、develop環境に流したつもりが、実はproduction環境であったといったヒューマンエラーを防ぎたいと思います。そもそも、staging, production環境の接続情報を同等に扱うのではなく、権限をREAD_ONLYにするなど様々な工夫はあるかと思いますが、それでもどの環境に接続しているかは非常に重要です。</p><p>「データベースエクスプローラから右クリック＞ツール＞色設定」変更できます。</p><img src="/images/20221014a/背景色変更.png" alt="背景色変更" width="751" height="374" loading="lazy"><p>例えば、本番環境は背景色をオレンジにした例です。GIFだとタブ色だけ変えていますが、エディタ全体の色を変えることもできます。</p><img src="/images/20221014a/background-color.gif" alt="オレンジにした例" width="1200" height="604" loading="lazy"><p>個人的にはツールを選ぶ上で最重要にしている機能かもしれません。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>JetBrainsで有償ライセンスを持っている方でも、Database Tools and SQLプラグインを使っている人が周りで少ないなと思ったので書きました。</p><p>DataGripと同等の機能を有するため非常に高機能で作り込まれており、おすすめです（せっかくなので一度は試さないともったいないという精神もあるかもです）。</p><p>また、GoなりPythonなりNode.jsなりJavaなりで開発しているIDE上で、そのままの開発者体験でSQLのクエリの実装を行えるのはかなりプラスだと思います。これはORマッパーなど使っているかどうかでかなり変わってきそうですが、ちょっとしたデータ調査にもシームレスにSQLを触ろうと思える準備を整えておくのは良いでしょう。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">余り需要は無い気もしますが、 <a href="https://github.com/ma91n/goland_Database_Tools_and_SQL">https://github.com/ma91n/goland_Database_Tools_and_SQL</a> のdocker-compose.yaml で利用すると、このブログで利用したスキーマを再現できます。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DB/">DB</category>
      
      
      <category domain="https://future-architect.github.io/tags/SQL/">SQL</category>
      
      <category domain="https://future-architect.github.io/tags/Goland/">Goland</category>
      
      <category domain="https://future-architect.github.io/tags/JetBrains/">JetBrains</category>
      
      <category domain="https://future-architect.github.io/tags/%E4%BE%BF%E5%88%A9%E3%83%84%E3%83%BC%E3%83%AB/">便利ツール</category>
      
      
      <comments>https://future-architect.github.io/articles/20221014a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>FutureCon2022の運営ラップアップ</title>
      <link>https://future-architect.github.io/articles/20221013a/</link>
      <guid>https://future-architect.github.io/articles/20221013a/</guid>
      <pubDate>Wed, 12 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221013a/image.png&quot; alt=&quot;image.png&quot; width=&quot;1200&quot; height=&quot;684&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221013a/image.png" alt="image.png" width="1200" height="684" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p><a href="/articles/20220712a/">FutureCon2022 を開催します | フューチャー技術ブログ</a> の記事で報告した通り、2022&#x2F;7&#x2F;18 海の日 にFutureConというテックカンファレンスを開催しました。</p><p>主要な運営メンバーは運営もしつつ登壇者でもあるので（私も<a href="https://www.youtube.com/watch?v=aBkDy79l9Zo">How to become a Software Architecture アーキテクティング入門</a>で発表しました）、両方の視点から振り返りました。隠すことでも無いので（とは言え別に公開する必要もないですが、インターネット上にあると後で探すのが楽なので）、振り返り内容を共有します。</p><h2 id="開催で良かったこと"><a href="#開催で良かったこと" class="headerlink" title="開催で良かったこと"></a>開催で良かったこと</h2><h3 id="企画全体"><a href="#企画全体" class="headerlink" title="企画全体"></a>企画全体</h3><ul><li>何よりもちゃんと開催まで持っていけたことが良かった<ul><li>おそらくフューチャー史上初のカンファレンス</li><li>3レーン</li></ul></li><li>FutureCon という略称<ul><li>最初は、「フューチャーテックカンファレンス」 と名乗ってましたが、それより呼びやすいと思いました</li><li>第1回はテックオンリーでしたが、ビジネス系が入る余地も残しているのが、将来拡張を匂わせ良かったという声もありました</li></ul></li></ul><h3 id="登壇者"><a href="#登壇者" class="headerlink" title="登壇者"></a>登壇者</h3><ul><li>登壇者の残存率が高い<ul><li>30名が承諾のうち、仕方ない理由で1名キャンセル、業務都合がつかず1名キャンセルで28名登壇<ul><li>比較的、登壇や外部発表に慣れていて、意識が高い人に声をかけた効果かも知れないです</li></ul></li></ul></li><li>登壇者募集のタイミングは良かった<ul><li>1月末から募集開始</li><li>5ヶ月ほど先なので、登壇者の人も承諾しやすいのかも</li><li>主に私（真野）がSlack DMをフル活用して声がけしましたが、承諾率も高くて感謝です。本当に良い人が多い会社やで（です）</li></ul></li><li>公募について<ul><li>2&#x2F;14に投げました。公募からは1名応募してくれた人がいました。ありがたい（募集している様子↓。この後DMで声かけもらいました）</li></ul></li></ul><img src="/images/20221013a/image_2.png" alt="" width="1200" height="530" loading="lazy"><h3 id="組織"><a href="#組織" class="headerlink" title="組織"></a>組織</h3><ul><li>社内組織のフォローが良かった（手厚かった）<ul><li>運営の有志はたまたまTIGという技術部隊の部署の人でしたが、社内の情シス、HR（人事、採用）、広報、セキュリティチームなどの協力が厚くて、かつ優しくて助かりました</li><li>後、部署の上長的な人も全員引き止めるわけでもなく、外部発信をしてくれてありがとうございますと逆に感謝されました（普通に会社にとっても社員にとってもポジティブ寄りのことをしていると思っているんですが、それでも素直に褒められると嬉しいですね！）</li><li>ということで、何か新しいことでも障壁なく、ポジティブな会社であることがわかって良かったです</li></ul></li></ul><h3 id="収録"><a href="#収録" class="headerlink" title="収録"></a>収録</h3><ul><li>スプレッドシートに動画の収録予定を、登壇者自身が予約するスタイルは良かった<ul><li>それで火がついた感がある</li></ul></li><li>最初のページの背景画像を統一する動きは良かった<ul><li>最後のページも統一できると良かったかも</li></ul></li><li>バーチャル背景<ul><li>正直、あまり見えないのでどっちでも良かったかも</li></ul></li></ul><h3 id="動画配信"><a href="#動画配信" class="headerlink" title="動画配信"></a>動画配信</h3><ul><li>Zoomで撮影したが、動画が軽くて良かった<ul><li>画質もそんなに悪いとは思わなかった</li></ul></li><li>予約投稿<ul><li>海の日という休日が開催日だったが、楽だった</li><li>事前収録という安心感もある</li></ul></li><li>サムネイルの統一は良かった<ul><li><a href="https://www.youtube.com/channel/UCJUSwYYd0CkGgmEKAW7QVpw/videos">YouTube</a>で並んでいて一体感がある（下画像）</li></ul></li></ul><img src="/images/20221013a/image_3.png" alt="" width="1200" height="853" loading="lazy"><h3 id="開催日"><a href="#開催日" class="headerlink" title="開催日"></a>開催日</h3><ul><li>休日開催の是非<ul><li>結果的に良かったと思うが</li></ul></li><li>1日、長くて疲れる<ul><li>特に後半の疲弊感は大きい</li><li>3日間開催で午前中のみ配信とかの方が嬉しい？</li><li>あるいは、2日開催にするとか</li><li>3並列は、かっこいいけど追いかける方はけっこう辛い</li></ul></li></ul><h2 id="改善点"><a href="#改善点" class="headerlink" title="改善点"></a>改善点</h2><ul><li>社内申請、難しい<ul><li>特にYouTube周り、予行演習しないとなんか引っかかりがち</li></ul></li><li>音量がバラバラ？<ul><li>YouTube予約投稿のカウントダウンがうるさい</li><li>カウントダウンに合わせると、投稿の声が小さくなるのでバランスが難しい</li></ul></li><li>フューチャーグループ側の人とのコミュニケーションは課題<ul><li>メールやり取りが面倒だった<ul><li>Slackのシェアチャネルでやり取りすればよかったのでは？<ul><li>なるほど！</li></ul></li></ul></li></ul></li><li>トラック別に1本の動画にしたい？<ul><li>1本見終わって、次の動画を探すのが面倒（なので中座する人が多かったのでは？）</li><li>golang.tokyo#32の動画の例。各動画の最初に、頭出しが必要かもしれないけど</li><li>穴埋めの動画編集がやや化しそう。リアル開催だと司会とのやり取りで埋める。紹介する動画も撮影する？</li></ul></li><li>登壇資料の運営側からの事前レビュー<ul><li>案外、社員番号を自己紹介に載せちゃう人がいた（機密情報じゃないと思いますが…一応消してもらって再撮影した人も）</li><li>資料テンプレートミスで、Credentialとフッターに記載していた人もいた</li><li>注意点はまとめよう</li></ul></li><li>Zoomで2画面表示していて、撮影が空振った人もいた</li><li>運営スケジュール<ul><li>登壇者集め終わって満足してしまった</li><li>その後から、Abstract（登壇内容サマリ）を出すまでが空いてしまった</li><li>気持ち、もう1,2週間早く動けると良かった</li></ul></li><li>動画配信方法はもっと早く決めたかった<ul><li>AWS ライブストリーミングを使う方法と迷っていた</li><li>今回、プラクティスが見つかって良かった</li></ul></li><li>ハッシュタグでつぶやく人が少ない問題<ul><li>Twitterで中継する人はもっと増やしたい</li><li>…という運営チームも、当日は満足してしまってTwitter活はしてなかった<ul><li>ツイートしてくれた人、ありがとうございました</li></ul></li></ul></li><li>connpassに申し込まなくても、動画リンクで見れる<ul><li>別に気にしなくても良いのでは</li><li>connpassはGoogle Calendarとかに登録しやすくする用途</li></ul></li><li>登壇者のレベル<ul><li>Beginner 初心者向け、Intermediate 中級レベル、Advance 上級レベルの3レベルは良かった</li><li>山田さんの「Datalakeにおける認証・認可 検討ポイント紹介 by 山田勇一 」は視聴したけど、どう見ても上級だった</li></ul></li><li>ラストセッションについて<ul><li>トラック最後の人のセッションだが、シュッと終わったので、終わった感がなかった</li><li>ハイライト動画を流すとか、終了の挨拶の動画が欲しかった</li></ul></li><li>パネルディスカッションみたいな、会話のセッションがあってもよい</li><li>せっかく開催するので、既存のお客さんに周知していく、という導線を作ってもよい</li><li>開催の１カ月前くらいからFutureCon の開催の壁紙を作って日々の業務の顧客ミーティングでアピールしていくとよい</li><li>ビジネス系（ドメインへの切り口など）テーマのセッションを増やしていくのもよい</li></ul><h2 id="次回に向けて"><a href="#次回に向けて" class="headerlink" title="次回に向けて"></a>次回に向けて</h2><ul><li>2023年も開催するかどうかは、2023年の1月に考えましょう（隔年開催くらいな予感）</li><li>登壇者。半分被りくらいはセーフにしたいですね</li><li>キーノートは、<a href="https://future-architect.github.io/articles/20190917/">エンジニア組織デザイン</a>などのテーマも持っている宮原さんにお願いしてみたい</li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>FutureCon2022 の振り返りを共有しました。<br>私は普段 <a href="https://future.connpass.com/">Future Tech Night</a> というconnpassで募集しているフューチャーのIT勉強会を運営していますが、関わるメンバーが桁違いに多く、良い経験を得ました。引き続き運営ナレッジを貯め、もっと良い発信ができるように努めていきたいと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A/">振り返り</category>
      
      <category domain="https://future-architect.github.io/tags/FutureCon/">FutureCon</category>
      
      <category domain="https://future-architect.github.io/tags/futurecon2022/">futurecon2022</category>
      
      
      <comments>https://future-architect.github.io/articles/20221013a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>OAuth の仕組みを理解しながらクライアントを実装してみる</title>
      <link>https://future-architect.github.io/articles/20221012a/</link>
      <guid>https://future-architect.github.io/articles/20221012a/</guid>
      <pubDate>Tue, 11 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは、TIG の吉岡と申します。Tech Blog には初投稿です。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIG の吉岡と申します。Tech Blog には初投稿です。<a href="/articles/20221003a/">認証認可連載</a>の 5 本目です。</p><p>業務で認証・認可に関する SaaS に触れる場面があり、そういえば OAuth, OpenID Connect の仕組みをちゃんと理解していなかったと思い、RFC を読みながら OAuth クライアントを実装してみました。N 番煎じの車輪の再発明ですが、何かの役に立てば幸いです。</p><p>※本稿において、OAuth は基本的に OAuth 2.0 を指しますが、OAuth 2.1 にて推奨されているベストプラクティスを取り入れています。<br>※本当は OpenID Connect にも触れたかったのですが力尽きました。また機会があれば書かせてください。</p><h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><p>この記事は、次のような方々に向けて書いています。</p><ul><li>OAuth を聞いたことがある</li><li>認証と認可の違いを認識している</li><li>HTTP の基本的な仕組みを知っている</li></ul><h2 id="OAuth-とは"><a href="#OAuth-とは" class="headerlink" title="OAuth とは"></a>OAuth とは</h2><p>OAuth は、サードパーティアプリケーションが HTTP サービスに対して制限付きのアクセスを取得することを可能にする認可フレームワークです。</p><p>具体的には、ある SNS アプリケーションがあり、ユーザーはこの SNS に対して、自身の Google Photos 上の画像を投稿したいとします。このとき、SNS アプリケーションに Google のユーザー名とパスワードを教えることにより、画像を取得させることもできますが、この方法には、付与される権限が大きすぎる、権限を剥奪するためにはパスワードを変更するしかないなど、さまざまな問題があります。</p><p>これらの問題を解決し、サードパーティアプリケーションに適切な権限を付与するための認可フレームワークが OAuth です。</p><p>なお、2022 年現在広く使われている仕様である OAuth 2.0 は <a href="https://www.rfc-editor.org/rfc/rfc6749">RFC 6749</a> により規定されています。この仕様には、後にさまざまな拡張が施されたため、それらの拡張とセキュリティに関するベストプラクティスをまとめた <a href="https://oauth.net/2.1/">OAuth 2.1</a> が策定中です。OAuth 2.1 は OAuth 2.0 とその拡張をまとめ直した仕様として策定中であり、OAuth 2.0 を大きく変えるものではありません。</p><p>本稿では、OAuth 2.0 並びに OAuth 2.1 における代表的なフローである「認可コードグラント + PKCE」を解説します。</p><h2 id="OAuth-のロール"><a href="#OAuth-のロール" class="headerlink" title="OAuth のロール"></a>OAuth のロール</h2><p>OAuth では、次の 4 つのロール (登場人物) が定義されています。</p><ul><li>リソースオーナー: リソースの所有者であるエンドユーザー</li><li>リソースサーバー: リソースを保持しているサーバー</li><li>クライアント: リソースオーナーが利用し、リソースに対する権限を付与されるアプリケーション</li><li>認可サーバー: リソースオーナーの承諾を得たうえでクライアントに対してアクセストークンを発行するサーバー</li></ul><p>4 つのロールのうち、クライアントには注意が必要です。通常私たちがクライアントと聞くと、OS のネイティブアプリケーションやブラウザ上で動作するアプリケーションを想像してしまいますが、OAuth の言葉遣いにおいては、それらに限らず、サーバー上で動作するウェブアプリケーションもクライアントに含まれます。</p><p>また、クライアントは <strong>コンフィデンシャルクライアント</strong> と <strong>パブリッククライアント</strong> の 2 種類に分類されます。後に説明しますが、認可サーバーはクライアントを識別するために、クライアント ID とクライアントシークレットを発行します。このクライアントシークレットを安全に保持できるクライアントはコンフィデンシャルクライアント、安全に保持できないクライアントはパブリッククライアントと呼ばれます。サーバー上で動作するウェブアプリケーションはコンフィデンシャルクライアントで、OS のネイティブアプリケーションやブラウザ上で動作するアプリケーションはパブリッククライアントです。</p><p>なお、クライアントは事前に認可サーバーに登録されている必要があります。登録の方法は OAuth 仕様の範疇外ですが、多くの場合、ウェブアプリケーションとして構築されたマネジメントコンソールなどから登録することができます。本稿では Google API にクライアントを登録するフローを説明します。</p><h2 id="OAuth-のグラントタイプ"><a href="#OAuth-のグラントタイプ" class="headerlink" title="OAuth のグラントタイプ"></a>OAuth のグラントタイプ</h2><p>OAuth では、権限付与の種類が 4 種類規定されており、これをグラントタイプと呼びます。</p><ul><li>認可コードグラント + PKCE</li><li>インプリシットグラント (非推奨)</li><li>リソースオーナーパスワードクレデンシャルグラント (非推奨)</li><li>クライアントクレデンシャルグラント</li></ul><p>認可コードグラント + PKCE は、エンドユーザーの承諾を得た上でクライアントがリソースにアクセスするという、OAuth の典型的なパターンです。クライアントクレデンシャルグラントは、クライアントが直接、クライアント自身の認証情報を認可サーバーに提示して、リソースへのアクセスを取得する方法です。</p><p>OAuth 2.0 では、これらに加えてインプリシットグラント、リソースオーナーパスワードクレデンシャルグラントが規定されていますが、これらは OAuth 2.1 で削除される予定であり、もはや利用すべきではありません。</p><p>本稿では <strong>認可コードグラント + PKCE</strong> による権限付与を説明します。認可コードグラントは、リソースオーナー・クライアント・認可サーバーの三者のやりとりによって認可を達成するため、<strong>3-legged OAuth</strong> などとも呼ばれます。</p><h2 id="OAuth-のシーケンス"><a href="#OAuth-のシーケンス" class="headerlink" title="OAuth のシーケンス"></a>OAuth のシーケンス</h2><p>認可コードグラントによる OAuth の処理シーケンスは図のとおりです。</p><img src="/images/20221012a/oauth.png" alt="oauth.png" width="587" height="501" loading="lazy"><ol><li>ユーザーが「Google Photos から画像を取得する」ボタンを押下する</li><li>クライアントが 302 Found を返却し、ユーザーエージェントを認可サーバーの認可エンドポイントにリダイレクトする <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li><li>ユーザーエージェントが認可サーバーの認可エンドポイントにアクセスする</li><li>認可サーバーが認証画面を表示し、ユーザーにログインを促す</li><li>ユーザーが認証情報を入力し、認可サーバーに認証を求める</li><li>認証に成功した認可サーバーは、クライアントが要求する権限一覧をユーザーに提示し、ユーザーの承諾を求める</li><li>ユーザーがクライアントに対する権限の付与を承諾する</li><li>権限付与の承諾を得た認可サーバーは 302 Found を返却し、ユーザーエージェントをクライアントのリダイレクト URI にリダイレクトする <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li><li>ユーザーエージェントがリダイレクト URI にアクセスする</li><li>クライアントは手順 9 で取得した認可コードを用いて認可サーバーにトークンリクエストを送信する</li><li>リクエストの有効性を検証した認可サーバーは、アクセストークンを発行し、トークンレスポンスを返却する</li><li>クライアントは手順 11 で取得したアクセストークンを用いてリソースサーバーにアクセスする</li><li>アクセストークンの有効性を検証したリソースサーバーは、リソースを返却する</li><li>クライアントはリソースオーナーのユーザーエージェントに対して、リソースを含む画面をレスポンスする</li></ol><p>順に詳しく見ていきます。</p><h3 id="Step-A-手順-1…2"><a href="#Step-A-手順-1…2" class="headerlink" title="Step A. 手順 1…2"></a>Step A. 手順 1…2</h3><p>手順 1 から 2 では、ユーザーをクライアントから認可サーバーに誘導します。ユーザーがアプリケーションの「Google Photos から画像を取得する」などのボタンをクリックすると、クライアントは各種パラメータを生成し、302 Found をレスポンスします。これにより、ユーザーエージェントは認可サーバーにリダイレクトされます。この認可サーバーに対するリクエストを <strong>認可リクエスト</strong> と呼び、リクエスト先を <strong>認可エンドポイント</strong> と呼びます。</p><p>認可リクエストは次の通りです。ここで、認可サーバーの認可エンドポイントは <code>auth.example.com/authorize</code> であるとします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /authorize</span><br><span class="line">    ?response_type=code                                     <span class="comment"># 1</span></span><br><span class="line">    &amp;client_id=&lt;client_id&gt;                                  <span class="comment"># 2</span></span><br><span class="line">    &amp;state=&lt;state&gt;                                          <span class="comment"># 3</span></span><br><span class="line">    &amp;scope=&lt;scope&gt;                                          <span class="comment"># 4</span></span><br><span class="line">    &amp;redirect_uri=https://client.example.com/callback       <span class="comment"># 5</span></span><br><span class="line">    &amp;code_challenge=&lt;code_challenge&gt;                        <span class="comment"># 6</span></span><br><span class="line">    &amp;code_challenge_method=&lt;code_challenge_method&gt; HTTP/1.1 <span class="comment"># 7</span></span><br><span class="line">Host: auth.example.com</span><br></pre></td></tr></table></figure><ol><li>(必須) 認可コードグラントを利用するため、<code>response_type=code</code> を指定します</li><li>(必須) クライアント登録時に認可サーバーから発行された <code>client_id</code> を指定します</li><li>(推奨) CSRF 攻撃を防ぐため、ランダムな <code>state</code> 値を指定します</li><li>(任意) リソースサーバー・認可サーバーが規定するリソースアクセスのスコープを指定します</li><li>(任意) クライアントが認可レスポンスを受け取るための URI を指定します</li><li>(推奨) ランダムに生成した <code>code_verifier</code> から生成されたチャレンジを指定します (PKCE)</li><li>(推奨) <code>code_challenge</code> を生成する方法を指定します (PKCE)</li></ol><p>上の例では、認可コード横取り攻撃と呼ばれる攻撃を防ぐため、 <strong>PKCE (Proof Key for Code Exchange)</strong> という仕組みを使用しています。PKCE は、OAuth 2.0 において使用が推奨されており、OAuth 2.1 においては事実上必須となる見込みです。</p><p>ここで、PKCE を用いる場合、クライアントはまず <code>code_verifier</code> と呼ばれるランダムな ASCII 文字列を生成します。<code>code_verifier</code> を正規表現で書くと <code>/[A-Za-z0-9-_.~]&#123;43,128&#125;/</code> です。次に、クライアントは <code>code_challenge_method</code> の値を選択します。<code>code_challenge_method</code> として有効な値は <code>plain</code> と <code>S256</code> です。<code>code_challenge_method</code> の値により、<code>code_challenge</code> はそれぞれ次のように計算されます。</p><div class="scroll"><table><thead><tr><th>code_challenge_method</th><th>code_challenge</th></tr></thead><tbody><tr><td>plain</td><td><code>code_verifier</code></td></tr><tr><td>S256</td><td><code>BASE64URL-ENCODE(SHA256(ASCII(code_verifier)))</code></td></tr></tbody></table></div><p><code>code_challenge_method == plain</code> のとき、<code>code_challenge</code> と <code>code_verifier</code> は同一の値です。<code>code_challenge_method == S256</code> のとき、<code>code_challenge</code> は <code>code_verifier</code> を SHA-256 ハッシュ関数に通した値となります。特段の技術的な制約がない限り、<code>code_challenge_method == S256</code> を指定すべきです。</p><h3 id="Step-B-手順-3…8"><a href="#Step-B-手順-3…8" class="headerlink" title="Step B. 手順 3…8"></a>Step B. 手順 3…8</h3><p>手順 3 から 8 では、ユーザーは認可サーバーとコミュニケーションをとります。手順 4, 5 においてユーザーは認可サーバーにログインします。この認証は、あくまで認可サーバーが認可処理を進めるために必要な認証であり、クライアントは認証情報そのものはおろか、認証情報がやりとりされていることすら知ることはありません。また、ユーザーがすでにユーザーエージェント上で対象サービスにログインしており、そのセッションが有効な場合、手順 4, 5 は省略されることが一般的です。手順 6, 7 において、ユーザーはクライアントに対する権限の付与を提示され、問題がなければそれを承諾します。権限付与の承諾を確認した認可サーバーは、手順 8 で <strong>認可コード</strong> を発行し、これをクエリパラメータに付与して <strong>リダイレクト URI</strong> に対する 302 Found をレスポンスします。</p><p>認可レスポンスは次のとおりです。<code>Location</code> ヘッダにはリダイレクト URI が含まれています。ここで、クライアントのリダイレクト URI は <code>https://client.example.com/callback</code> であるとします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Location: https://client.example.com/callback</span><br><span class="line">    ?code=&lt;authorization_code&gt;                <span class="comment"># 1</span></span><br><span class="line">    &amp;state=&lt;state&gt;                            <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><ol><li>(必須) 認可サーバーが発行した認可コード</li><li>(認可リクエストに <code>state</code> が含まれる場合必須) 認可リクエストにて送信した <code>state</code> 値</li></ol><p>なお、手順 8 と手順 9 の間において、認可リクエストと認可レスポンスの <code>state</code> 値を比較し、これらが等しくない場合は CSRF 攻撃が行われたと判断して処理を中断する必要があります。</p><h3 id="Step-C-手順-9…14"><a href="#Step-C-手順-9…14" class="headerlink" title="Step C. 手順 9…14"></a>Step C. 手順 9…14</h3><p>手順 8 により 302 Found を受け取ったユーザーエージェントは、手順 9 でリダイレクト URI に遷移します。ここにおいてクライアントは認可コードを取得し、手順 10 で <strong>トークンリクエスト</strong> を発行します。なお、トークンリクエストを受け取る認可サーバーのエンドポイントは <strong>トークンエンドポイント</strong> と呼ばれます。手順 11 において、認可コードの有効性を確認した認可サーバーは <strong>アクセストークン</strong> を発行し、<strong>トークンレスポンス</strong> としてクライアントに返却します。これ以降、クライアントはアクセストークンを用いてリソースサーバーにアクセスし、リソースへの CRUD 操作を実行することができるようになります。</p><p>トークンリクエストは次の通りです。ここで、認可サーバーのトークンエンドポイントは <code>auth.example.com/token</code> であるとします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST /token HTTP/1.1</span><br><span class="line">Host: auth.example.com</span><br><span class="line">Authorization: Basic &lt;basic_auth_token&gt;               <span class="comment"># 1</span></span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">grant_type=authorization_code                         <span class="comment"># 2</span></span><br><span class="line">    &amp;code=&lt;code&gt;                                      <span class="comment"># 3</span></span><br><span class="line">    &amp;redirect_uri=https://client.example.com/callback <span class="comment"># 4</span></span><br><span class="line">    &amp;code_verifier=&lt;code_verifier&gt;                    <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><ol><li>(必須) クライアント ID とクライアントシークレットを使用して Basic 認証を行います</li><li>(必須) <code>grant_type=authorization_code</code> を指定します</li><li>(必須) 手順 8 認可レスポンスにより取得した <code>code</code> を指定します</li><li>(必須) クライアントが認可レスポンスを受け取るための URI を指定します</li><li>(認可リクエストで <code>code_challenge</code>, <code>code_challenge_method</code> を指定した場合必須) クライアントが生成した <code>code_verifier</code> を指定します</li></ol><p>トークンレスポンスは次の通りです。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;access_token&quot;</span>: &lt;access_token&gt;,  <span class="comment"># 1</span></span><br><span class="line">  <span class="string">&quot;token_type&quot;</span>: <span class="string">&quot;bearer&quot;</span>,          <span class="comment"># 2</span></span><br><span class="line">  <span class="string">&quot;expires_in&quot;</span>: 3600,              <span class="comment"># 3</span></span><br><span class="line">  <span class="string">&quot;refresh_token&quot;</span>: &lt;refresh_token&gt; <span class="comment"># 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>発行されたアクセストークン</li><li>トークンの種類</li><li>トークンの有効期限 (秒数)</li><li>リフレッシュトークン (本稿では触れない)</li></ol><h2 id="Google-Photos-API-を使ってみる"><a href="#Google-Photos-API-を使ってみる" class="headerlink" title="Google Photos API を使ってみる"></a>Google Photos API を使ってみる</h2><p>ここからは、実際に Google Photos API を利用するクライアントアプリケーションを実装し、OAuth の処理フローを確認していきます。</p><h3 id="GCP-マネジメントコンソールにてクライアントを登録する"><a href="#GCP-マネジメントコンソールにてクライアントを登録する" class="headerlink" title="GCP マネジメントコンソールにてクライアントを登録する"></a>GCP マネジメントコンソールにてクライアントを登録する</h3><p>GCP に実験用のプロジェクトを作成します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.02.52.png" alt="" width="1200" height="807" loading="lazy"><p>API &amp; Services から、OAuth consent screen を設定していきます。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.04.06.png" alt="" width="1200" height="807" loading="lazy"><p>External を選択し、CREATE を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.04.18.png" alt="" width="1200" height="807" loading="lazy"><p>App information として、App name に任意の名前を設定し、User support email にはご自身の Google アカウントのメールアドレスを設定します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.04.54.png" alt="" width="1200" height="807" loading="lazy"><p>Developer contact information として、ご自身の Google アカウントのメールアドレスを設定し、SAVE AND CONTINUE を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.05.11.png" alt="" width="1200" height="807" loading="lazy"><p>Scopes 画面において、ADD OR REMOVE SCOPES を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.05.35.png" alt="" width="1200" height="807" loading="lazy"><p>今回は Google Photos API を利用したいため、Manually add scopes に <code>https://www.googleapis.com/auth/photoslibrary.readonly</code> と入力し、ADD TO TABLE を押下します。なお、このスコープは、対象ユーザーの Google Photos リソースに対する読み取り権限を付与します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.08.04.png" alt="" width="1200" height="807" loading="lazy"><p>テーブルに Google Photos API のスコープが追加されるので、チェックボックスをチェックし、UPDATE を押下します。次いで、SAVE AND CONTINUE を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.08.15.png" alt="" width="1200" height="807" loading="lazy"><p>Test users 画面においてテストのためのユーザーを設定します。ADD USERS を押下し、ご自身の Google アカウントのメールアドレスを入力の上、ADD を押下してください。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.09.02.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-02_23.09.24.png" alt="" width="1200" height="807" loading="lazy"><p>テーブルにご自身のメールアドレスが追加されていることを確認し、SAVE AND CONTINUE を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.09.29.png" alt="" width="1200" height="807" loading="lazy"><p>Summary 画面において、各種パラメータが正しいことを確認の上、BACK TO DASHBOARD を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.09.43.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-02_23.09.46.png" alt="" width="1200" height="807" loading="lazy"><p>次に OAuth client ID を作成します。Credential 画面に遷移し、CREATE CREDENTIAL, OAuth client ID と順に押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.10.30.png" alt="" width="1200" height="807" loading="lazy"><p>実験用のサーバーは <code>localhost:8080</code> に立てる予定なので、Authorization redirect URI として <code>http://localhost:8080/callback</code> を入力し、CREATE を押下します。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.11.17.png" alt="" width="1200" height="807" loading="lazy"><p>OAuth クライアントのクライアント ID とクライアントシークレットが作成されました。これらを控えておいてください。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.11.35.png" alt="" width="1200" height="807" loading="lazy"><p>次に、今回利用する Photos Library API を有効にしておきます。Google Photos Library API のページにアクセスし、ENABLE を押下してください。</p><img src="/images/20221012a/スクリーンショット_2022-10-02_23.32.14.png" alt="" width="1200" height="807" loading="lazy"><p>ここまでで GCP の作業は完了です。次に、ローカル環境でアプリケーションを立て、ブラウザからアクセスします。</p><h3 id="クライアントを実装する"><a href="#クライアントを実装する" class="headerlink" title="クライアントを実装する"></a>クライアントを実装する</h3><p>ここからは、Go によりクライアントアプリケーションを実装し、実際にローカル環境で動かしていきます。なお、テストに使用したソースコードは <a href="https://github.com/tmsick/tech-blog-oauth">https://github.com/tmsick/tech-blog-oauth</a> にアップロードしました。本稿にも <code>main.go</code> の全量を掲載します。</p><p>なお、このアプリケーションは次の環境変数を必要とします。これらは、先ほどの手順で Google から発行されたクライアント ID とクライアントシークレットです。</p><ul><li><code>GOOGLE_CLIENT_ID</code></li><li><code>GOOGLE_CLIENT_SECRET</code></li></ul><p>掲載しているコードは簡単な検証用のコードであり、適切なエラーハンドリングを省略していますのでご承知おきください。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line"><span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;math/big&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;text/template&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gorilla/sessions&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TokenResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">AccessToken <span class="type">string</span> <span class="string">`json:&quot;access_token&quot;`</span></span><br><span class="line">ExpiresIn   <span class="type">int</span>    <span class="string">`json:&quot;expires_in&quot;`</span></span><br><span class="line">IDToken     <span class="type">string</span> <span class="string">`json:&quot;id_token&quot;`</span></span><br><span class="line">Scope       <span class="type">string</span> <span class="string">`json:&quot;scope&quot;`</span></span><br><span class="line">TokenType   <span class="type">string</span> <span class="string">`json:&quot;token_type&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Photos <span class="keyword">struct</span> &#123;</span><br><span class="line">MediaItems []<span class="keyword">struct</span> &#123;</span><br><span class="line">ID         <span class="type">string</span> <span class="string">`json:&quot;id&quot;`</span></span><br><span class="line">ProductURL <span class="type">string</span> <span class="string">`json:&quot;productUrl&quot;`</span></span><br><span class="line">BaseURL    <span class="type">string</span> <span class="string">`json:&quot;baseUrl&quot;`</span></span><br><span class="line">MimeType   <span class="type">string</span> <span class="string">`json:&quot;mimeType&quot;`</span></span><br><span class="line">Filename   <span class="type">string</span> <span class="string">`json:&quot;filename&quot;`</span></span><br><span class="line">&#125; <span class="string">`json:&quot;mediaItems&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">lenState        = <span class="number">30</span></span><br><span class="line">lenCodeVerifier = <span class="number">64</span></span><br><span class="line">redirectURI     = <span class="string">&quot;http://localhost:8080/callback&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">googleClientID     <span class="type">string</span></span><br><span class="line">googleClientSecret <span class="type">string</span></span><br><span class="line">store              = sessions.NewCookieStore([]<span class="type">byte</span>(os.Getenv(<span class="string">&quot;SESSION_KEY&quot;</span>)))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">googleClientID = os.Getenv(<span class="string">&quot;GOOGLE_CLIENT_ID&quot;</span>)</span><br><span class="line">googleClientSecret = os.Getenv(<span class="string">&quot;GOOGLE_CLIENT_SECRET&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> googleClientID == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;Env var GOOGLE_CLIENT_ID is required&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> googleClientSecret == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">log.Fatal(<span class="string">&quot;Env var GOOGLE_CLIENT_SECRET is required&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/&quot;</span>, handleIndex)</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/oauth&quot;</span>, handleOAuth)</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/callback&quot;</span>, handleCallback)</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/photos&quot;</span>, handlePhotos)</span><br><span class="line">log.Print(<span class="string">&quot;Serving web server at localhost:8080&quot;</span>)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;0.0.0.0:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleIndex</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">tpl, _ := template.ParseFiles(<span class="string">&quot;templates/index.html&quot;</span>)</span><br><span class="line">tpl.Execute(w, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleOAuth</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// Save `state` and `code_verifier` to session</span></span><br><span class="line">session, _ := store.Get(r, <span class="string">&quot;session&quot;</span>)</span><br><span class="line"><span class="comment">// Generate a random state</span></span><br><span class="line">state, _ := randomString(lenState)</span><br><span class="line">session.Values[<span class="string">&quot;state&quot;</span>] = state</span><br><span class="line"><span class="comment">// Generate code_verifier</span></span><br><span class="line">codeVerifier, _ := randomString(lenCodeVerifier)</span><br><span class="line">session.Values[<span class="string">&quot;code_verifier&quot;</span>] = codeVerifier</span><br><span class="line">session.Save(r, w)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate code_challenge</span></span><br><span class="line">b := sha256.Sum256([]<span class="type">byte</span>(codeVerifier))</span><br><span class="line">codeChallenge := base64.URLEncoding.WithPadding(base64.NoPadding).EncodeToString(b[:])</span><br><span class="line"></span><br><span class="line"><span class="comment">// Redirect the user agent == Make a authorization request</span></span><br><span class="line">u, _ := url.Parse(<span class="string">&quot;https://accounts.google.com/o/oauth2/v2/auth&quot;</span>)</span><br><span class="line">q := u.Query()</span><br><span class="line">q.Add(<span class="string">&quot;response_type&quot;</span>, <span class="string">&quot;code&quot;</span>)                                           <span class="comment">// Indicate authorization code grant</span></span><br><span class="line">q.Add(<span class="string">&quot;client_id&quot;</span>, googleClientID)                                       <span class="comment">// The client ID issued by Google</span></span><br><span class="line">q.Add(<span class="string">&quot;state&quot;</span>, state)                                                    <span class="comment">// The random state</span></span><br><span class="line">q.Add(<span class="string">&quot;scope&quot;</span>, <span class="string">&quot;https://www.googleapis.com/auth/photoslibrary.readonly&quot;</span>) <span class="comment">// The scope we need</span></span><br><span class="line">q.Add(<span class="string">&quot;redirect_uri&quot;</span>, redirectURI)                                       <span class="comment">// The redirect URI</span></span><br><span class="line">q.Add(<span class="string">&quot;code_challenge&quot;</span>, codeChallenge)                                   <span class="comment">// Code challenge</span></span><br><span class="line">q.Add(<span class="string">&quot;code_challenge_method&quot;</span>, <span class="string">&quot;S256&quot;</span>)                                   <span class="comment">// Code challenge method</span></span><br><span class="line">u.RawQuery = q.Encode()</span><br><span class="line">http.Redirect(w, r, u.String(), http.StatusFound)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleCallback</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// Confirm `state` matches</span></span><br><span class="line">session, _ := store.Get(r, <span class="string">&quot;session&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> r.URL.Query().Get(<span class="string">&quot;state&quot;</span>) != session.Values[<span class="string">&quot;state&quot;</span>] &#123;</span><br><span class="line">w.WriteHeader(http.StatusInternalServerError)</span><br><span class="line">fmt.Fprintln(w, <span class="string">&quot;Invalid state&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Get `code_verifier`</span></span><br><span class="line">codeVerifier := session.Values[<span class="string">&quot;code_verifier&quot;</span>].(<span class="type">string</span>)</span><br><span class="line"><span class="comment">// Clear session</span></span><br><span class="line">session.Values[<span class="string">&quot;state&quot;</span>] = <span class="string">&quot;&quot;</span></span><br><span class="line">session.Values[<span class="string">&quot;code_verifier&quot;</span>] = <span class="string">&quot;&quot;</span></span><br><span class="line">session.Save(r, w)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make a token request</span></span><br><span class="line">code := r.URL.Query().Get(<span class="string">&quot;code&quot;</span>)</span><br><span class="line">q := url.Values&#123;&#125;</span><br><span class="line">q.Add(<span class="string">&quot;grant_type&quot;</span>, <span class="string">&quot;authorization_code&quot;</span>) <span class="comment">// Indicate token request</span></span><br><span class="line">q.Add(<span class="string">&quot;code&quot;</span>, code)                       <span class="comment">// The authorization code</span></span><br><span class="line">q.Add(<span class="string">&quot;redirect_uri&quot;</span>, redirectURI)        <span class="comment">// The redirect URI</span></span><br><span class="line">q.Add(<span class="string">&quot;code_verifier&quot;</span>, codeVerifier)      <span class="comment">// Code verifier</span></span><br><span class="line">req, _ := http.NewRequest(http.MethodPost, <span class="string">&quot;https://oauth2.googleapis.com/token&quot;</span>, strings.NewReader(q.Encode()))</span><br><span class="line">req.SetBasicAuth(googleClientID, googleClientSecret)</span><br><span class="line">req.Header.Add(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">resp, _ := http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Capture the access token we&#x27;ve received</span></span><br><span class="line">body, _ := io.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">var</span> token TokenResponse</span><br><span class="line">json.Unmarshal(body, &amp;token)</span><br><span class="line">session.Values[<span class="string">&quot;access_token&quot;</span>] = token.AccessToken</span><br><span class="line">session.Save(r, w)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Redirect the user agent to the photos page</span></span><br><span class="line">http.Redirect(w, r, <span class="string">&quot;http://localhost:8080/photos&quot;</span>, http.StatusFound)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handlePhotos</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// Fetch photos from Google Photos Library API using the access_token</span></span><br><span class="line">session, _ := store.Get(r, <span class="string">&quot;session&quot;</span>)</span><br><span class="line">accessToken := session.Values[<span class="string">&quot;access_token&quot;</span>].(<span class="type">string</span>)</span><br><span class="line">req, _ := http.NewRequest(http.MethodGet, <span class="string">&quot;https://photoslibrary.googleapis.com/v1/mediaItems&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">req.Header.Add(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Bearer &quot;</span>+accessToken)</span><br><span class="line">resp, _ := http.DefaultClient.Do(req)</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line">body, _ := io.ReadAll(resp.Body)</span><br><span class="line"><span class="keyword">var</span> photos Photos</span><br><span class="line">json.Unmarshal(body, &amp;photos)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Render photos</span></span><br><span class="line">tpl, _ := template.ParseFiles(<span class="string">&quot;templates/photos.html&quot;</span>)</span><br><span class="line">tpl.Execute(w, photos)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// randomString generates a secure random string of length `length`.</span></span><br><span class="line"><span class="comment">// It returns an error when `length` is negative or failed to use the platform&#x27;s</span></span><br><span class="line"><span class="comment">// secure pseudorandom number generator.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">randomString</span><span class="params">(length <span class="type">int</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> length &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, fmt.Errorf(<span class="string">&quot;cannot generate random string of negative length %d&quot;</span>, length)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s strings.Builder</span><br><span class="line"><span class="keyword">for</span> s.Len() &lt; length &#123;</span><br><span class="line">r, err := rand.Int(rand.Reader, big.NewInt(<span class="number">1</span>&lt;&lt;<span class="number">60</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1&lt;&lt;60 == 2**60 equals to 1,000,000,000,000,000 in hex.</span></span><br><span class="line">s.WriteString(fmt.Sprintf(<span class="string">&quot;%015x&quot;</span>, r))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.String()[:length], <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>アプリケーションのエンドポイントは次の 4 つです。</p><div class="scroll"><table><thead><tr><th>パス</th><th>説明</th></tr></thead><tbody><tr><td><code>/</code></td><td>アプリケーションのインデックス。「Fetch photos from Google Photos」ボタンが設置されている。</td></tr><tr><td><code>/oauth</code></td><td>OAuth 開始エンドポイント。ブラウザを Google Photos API の認可エンドポイントにリダイレクトする。</td></tr><tr><td><code>/callback</code></td><td>リダイレクトエンドポイント。認可レスポンスにより呼び出される。</td></tr><tr><td><code>/photos</code></td><td>認可完了後にブラウザがリダイレクトされるエンドポイント。Google Photos の画像が表示される。</td></tr></tbody></table></div><p>以下、ハンドラごとに処理を説明していきます。</p><ol><li><code>handleIndex()</code></li><li><code>handleOAuth()</code></li><li><code>handleCallback()</code></li><li><code>handlePhotos()</code></li></ol><h4 id="1-handleIndex"><a href="#1-handleIndex" class="headerlink" title="1. handleIndex()"></a>1. <code>handleIndex()</code></h4><p><code>handleIndex()</code> は、静的な HTML をレスポンスしているだけです。</p><h4 id="2-handleOAuth"><a href="#2-handleOAuth" class="headerlink" title="2. handleOAuth()"></a>2. <code>handleOAuth()</code></h4><p>78…86 行目において、ランダムな <code>state</code> と <code>codeVerifier</code> を生成し、ブラウザのセッションに保存しています。</p><p>88…90 行目において、<code>codeVerifier</code> から <code>codeChallenge</code> を生成しています。</p><p>92…103 行目において、認可リクエストの URL を生成し、ブラウザをリダイレクトしています。</p><h4 id="3-handleCallback"><a href="#3-handleCallback" class="headerlink" title="3. handleCallback()"></a>3. <code>handleCallback()</code></h4><p>107…113 行目において、ブラウザが保持している <code>state</code> と <code>code_verifier</code> を取得し、セッションをクリアしています。</p><p>115…120 行目において、ブラウザが保持していた <code>session</code> と認可サーバからレスポンスされた <code>state</code> が等しいことを確認しています。これにより、CSRF 攻撃を防いでいます。</p><p>122…133 行目において、トークンリクエストを生成し、リクエストをおこなっています。</p><p>135…140 行目において、トークンレスポンスからアクセストークンを取得し、ブラウザのセッションに保存しています。</p><p>142…143 行目において、ブラウザを <code>/photos</code> にリダイレクトしています。</p><h4 id="4-handlePhotos"><a href="#4-handlePhotos" class="headerlink" title="4. handlePhotos()"></a>4. <code>handlePhotos()</code></h4><p>147…156 行目において、セッションに保存されたアクセストークンを用いて Google Photos API にアクセスし、画像情報を取得しています。</p><p>158…160 行目において、画像情報 (URL) を含むレスポンスを返却しています。</p><img src="/images/20221012a/スクリーンショット_2022-10-03_0.18.47.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-03_0.18.57.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-03_0.19.03.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-03_0.20.59.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-03_0.21.05.png" alt="" width="1200" height="807" loading="lazy"><img src="/images/20221012a/スクリーンショット_2022-10-03_0.21.12.png" alt="" width="1200" height="807" loading="lazy"><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>OAuth, OpenID 周りには、なんとなく苦手意識があったのですが、今回仕様に基づいてスクラッチで実装することで、技術の基盤とセキュリティ上の考慮事項などを知ることができました。</p><p>IDaaS の採用が当然となった現在において、認証・認可周りの知識は、ウェブ技術者の基礎教養といえると思います。今後も引き続き認証・認可周りの情報をウォッチしていきます。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">仕様上、302 Found 以外の方法でユーザーエージェントをリダイレクトすることも許可されています。特に理由がなければ 302 Found でよいでしょう。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/">認証認可</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/OAuth/">OAuth</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%AA%8D%E5%8F%AF%E3%82%B3%E3%83%BC%E3%83%89%E3%82%B0%E3%83%A9%E3%83%B3%E3%83%88/">認可コードグラント</category>
      
      <category domain="https://future-architect.github.io/tags/PKCE/">PKCE</category>
      
      
      <comments>https://future-architect.github.io/articles/20221012a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Auth0のトークン取得とITPへの対応</title>
      <link>https://future-architect.github.io/articles/20221007a/</link>
      <guid>https://future-architect.github.io/articles/20221007a/</guid>
      <pubDate>Thu, 06 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは。フューチャーの棚井龍之介と申します。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。フューチャーの棚井龍之介と申します。<a href="/articles/20221003a/">認証認可連載</a>の 4 本目を担当しました。</p><p>認証認可周りは最近触りたてでして、普段の開発業務では、Go・React・AWS を利用しています。</p><p>先日、React ベースのモバイル向け Web アプリに Auth0 の認証を実装したところ、Silent Authentication（サイレント認証）のタイミングでブラウザからトークンが消失し、ログイン状態が維持できない現象に遭遇しました。</p><p>調べたところ、Safari に搭載されているトラッキング防止機能の ITP（Intelligent Tracking Prevention &#x2F; インテリジェント・トラッキング・プリベンション）が原因だと判明しました。</p><p>調べる過程で、Cookie の基本的な機能からアドテク周りの技術要素、最近のプライバシー保護トレンドについて触れる機会を得ましたので、技術ブログとして整理しました。</p><p>本記事では、以下の内容を扱います</p><ul><li>Cookie（1st Party、3rd Party）</li><li>ITP（Intelligent Tracking Prevention）</li><li>ITP による、Auth0 の PKCE フローへの影響<ul><li>対応方法</li></ul></li></ul><p>前半は Cookie とプライバシー保護の話で、後半が Auth0 と ITP の話です。</p><h1 id="Cookie-とは"><a href="#Cookie-とは" class="headerlink" title="Cookie とは"></a>Cookie とは</h1><p>Cookie とは、Web サイトに訪れたユーザの情報を、一時的に保存する機能のことです。<br>この「一時保存する機能」により、ユーザのログイン状態を維持することや、Web ページに再訪したときに「この人は、以前にウチのサイトに来た〇〇さんだ！」と判定できます。</p><img src="/images/20221007a/スクリーンショット_2022-10-05_3.12.54.png" alt="" width="1200" height="614" loading="lazy"><p>「以前に来た〇〇さん」と技術的に判定できると、次は「きっと〇〇さんならば…」という「Cookie により収集された個人属性の、Web 広告利用」へと直結させる動きが当然出てきます。</p><p>最近だとプライバシー保護の観点から、こういった Web 広告の規制が強化されるトレンドにあります。例えば、Web サイトのトップページに訪問した際に「Cookie の有効化に同意してください。Yes or No」がポップアップで表示されて、オプトインでの意思表示が求められるのは、このトレンドに乗ったものだと思います。</p><h2 id="Cookie-の分類"><a href="#Cookie-の分類" class="headerlink" title="Cookie の分類"></a>Cookie の分類</h2><p>続いて、Cookie の分類を見ていきます。</p><p>Cookie の発行元が、訪問しているサイト（ドメイン）と同じか別かにより、1st Party Cookie と 3rd Party Cookie と呼び方が変わります。</p><div class="scroll"><table><thead><tr><th>Cookie の発行元と訪問しているサイト(ドメイン)の関係</th><th>Cookie の呼び方</th></tr></thead><tbody><tr><td>同じ（Cookie の発行者は、訪問したサイトの運営者である）</td><td>1st Party Cookie</td></tr><tr><td>異なる（Cookie の発行者は、訪問しサイトとは別の外部の第三者である）</td><td>3rd Party Cookie</td></tr></tbody></table></div><p>主に、外部のサービスを利用して「ユーザ行動に合わせた Web 広告を表示したい（ターゲティング広告を実施したい）」や「ログイン状態管理などの特定の機能を外部に任せたい」ケースで 3rd Party Cookie が利用されることが多いと思います。</p><h1 id="ITP（Intelligent-Tracking-Prevention）とは"><a href="#ITP（Intelligent-Tracking-Prevention）とは" class="headerlink" title="ITP（Intelligent Tracking Prevention）とは"></a>ITP（Intelligent Tracking Prevention）とは</h1><p>ひとこと言うと、ITP は「3rd Party Cookie の利用を禁止する技術」です。</p><p>先ほど、3rd Party Cookie により実現できることの 1 つに「ターゲティング広告（ユーザの行動履歴を元にした、Web 広告最適化）」があると述べました。ターゲティング広告により、各ユーザごとに個別最適化された（高いクリック率を獲得できる見込みの）Web 広告が表示できます。これにより、Web 広告のクリック率向上 → 購入率の向上が見込まれます。アドテク技術の進歩により、この Web 広告の精度が高まるほど、広告掲載ページ・広告を載せたい企業・その仕組みを提供する企業などの「Web マーケティング」界隈にとっては嬉しい世界になります。</p><p>その一方で、プライバシー保護の観点から、以下のような考え方が広まりつつあります。</p><p>①Web 広告の精度が高まる<br>↓<br>② ユーザの趣味嗜好を高精度で特定できる<br>↓<br>③ 高精度な趣味嗜好の情報って、それはもはや個人情報では？<br>↓<br>④ 個人情報を無断でクロスドメインに共有するは、プライバシー保護観点から NG では？<br>（例えば、あるユーザ α の行動履歴を取得した A 社が、その情報を Web 広告機能を提供する B 社に「α の同意がない状況で」共有するケース）</p><p>このような考え方はメガテック企業でも意識され、Safari や Chrome などのブラウザによる規制も進んでいます。</p><p>例えば、Apple では 2017 年から Safari での 3rd Party Cookie の利用制限を段階的に導入しており、iOS14 ではついに Safari だけでなく Chrome・Firefox 含めて 3rd Party Cookie の利用が全面禁止になりました。<br>Google においても、Chrome での 3rd Party Cookie の利用を「2024 年後半に向けて段階的に廃止する可能性がある」と発表し、その代替技術として「プライバシー・サンドボックス」の開発・ユーザテストを進めています。ただ、Google は当初は 2022 年 1 月に規制を開始すると発表していましたが、その後に 2023 年後半に開始予定と延期し、さらに 2024 年後半と再延期しています。</p><p>Safari での ITP 規制状況を見ると、ユーザー情報のクロスサイトトラッキングを規制しようとする Apple と、規制の穴を探すアドテク企業の戦いが垣間見れます。</p><div class="scroll"><table><thead><tr><th>アップデート</th><th>リリース</th><th>規制概要(*1)</th></tr></thead><tbody><tr><td>ITP1.0</td><td>2017 年 9 月</td><td>特定の 3rd Party Cookie は 24 時間で削除</td></tr><tr><td>ITP2.0</td><td>2018 年 9 月</td><td>特定の 3rd Party Cookie は即時削除</td></tr><tr><td>ITP2.1</td><td>2019 年 3 月</td><td>特定の 1st Party Cookie は 7 日間で削除</td></tr><tr><td>ITP2.2</td><td>2019 年 4 月</td><td>特定の 1st Party Cookie は 24 時間で削除</td></tr><tr><td>ITP2.3</td><td>2019 年 9 月</td><td>特定の localstrage 上のデータを即時削除</td></tr><tr><td>iOS13.1</td><td>2020 年 3 月</td><td>全ての 3rd Party Cookie を即時削除</td></tr><tr><td>iOS14.0</td><td>2020 年 9 月</td><td>iOS で稼働する Firefox, Chrome にも ITP を適応開始</td></tr></tbody></table></div><p>(*1)より詳細な規制内容は<a href="https://webkit.org/blog/category/privacy/">こちら</a>を参照お願いします。</p><p>3rd Party Cookie は何もアドテク領域に閉じた技術ではなく、それ以外の分野でも利用されています。<br>次は、ITP により Auth0 のトークンがうまく動かなくなってしまう話に移ります。</p><h1 id="Auth0-のトークン取得フローと-ITP-ブロックへの対応"><a href="#Auth0-のトークン取得フローと-ITP-ブロックへの対応" class="headerlink" title="Auth0 のトークン取得フローと ITP ブロックへの対応"></a>Auth0 のトークン取得フローと ITP ブロックへの対応</h1><p>Auth0 の React 用 SDK（<a href="https://github.com/auth0/auth0-react">auth0-react</a>）を利用する場合、PKCE（Proof Key for Code Exchange）の認証認可フローに従います。フローの詳細は<a href="https://auth0.com/docs/get-started/authentication-and-authorization-flow/authorization-code-flow-with-proof-key-for-code-exchange-pkce">こちらのサイト</a>に記載があります。</p><img src="/images/20221007a/auth0_pkce.png" alt="auth0_pkceフロー" width="1200" height="976" loading="lazy"><p>Auth0 の JavaScript SDK ではログイン成功後、トークンを取得して、ブラウザのインメモリにキャッシュされます（上図での ⑨ で取得した Access Token をインメモリに保存する）。インメモリに保存すると、ページ遷移や画面リロードの度にトークンの再取得が必要で色々と面倒になりそうですが、この辺のトークンリフレッシュを Auth0 側では「Silent Authentication（サイレント認証）」により解決しています。サイレント認証により、ログイン状態を維持しながら、トークンをインメモリでセキュアに保持できます。</p><h2 id="3rd-Party-Cookie-が-ITP-で強制消去される"><a href="#3rd-Party-Cookie-が-ITP-で強制消去される" class="headerlink" title="3rd Party Cookie が ITP で強制消去される"></a>3rd Party Cookie が ITP で強制消去される</h2><p>Auth0 x React でのログイン状態の管理が<br>（1）ID&#x2F;Pass を入力してログインし、トークンを取得<br>（2）サイレント認証でトークンのリフレッシュ、ログイン状態を維持<br>（3）トークンの破棄、ログアウト<br>の 3 つで完結するならばこれで話は終わりですが、昨今の ITP（3rd Party Cookie の禁止）により、② のサイレント認証に失敗するケースが出てきました。</p><p>例えば、会社 Z が Auth0 でログイン機能を実装した Web サービスを運営しているとします。サービスの運営会社 Z と Auth0 では「異なるドメインの会社」になるため、Auth0 の発行したトークンが、Z 社の Web ページ上では 3rd Party Cookie と判定されて、ブラウザにより Cookie が強制消去されるケースが有り得る、ということです。サイレント認証に失敗すると「ログイン状態を維持できない（ページ遷移・リロードの度にログイン処理を求めることになる）」ため、ユーザ体験を大きく損なってしまいます。</p><p>ITP により 3rd Party Cookie が消去されたとき、Auth0 のコンソール画面、Safari の Web Inspector それぞれで以下の挙動が得られます。</p><img src="/images/20221007a/failed_auth0.png" alt="auth0で失敗" width="1200" height="481" loading="lazy"><p>↑<br>Auth0 のコンソール画面では「ログインには成功」しているが「サイレント認証には失敗」している</p><img src="/images/20221007a/failed_emulator.png" alt="サイレント認証に失敗" width="1200" height="212" loading="lazy"><p>↑<br>Web Inspector のネットワークのログから、前述した PKCE フロー ③ の <code>/authorize</code> は Call されているが、3rd Party Cookie がブラウザにより消去されているため、⑦ の <code>/oauth/token</code> が Call されない。→ PKCE フローが途中終了しているため、認証は「失敗」である。</p><h2 id="ITP-への対応方法"><a href="#ITP-への対応方法" class="headerlink" title="ITP への対応方法"></a>ITP への対応方法</h2><p>サイレント認証が ITP により失敗する問題には、<a href="https://auth0.com/docs/troubleshoot/authentication-issues/renew-tokens-when-using-safari">Auth0 公式が 2 つの対応方法</a>を提示しています。</p><p>①<a href="https://auth0.com/docs/secure/tokens/refresh-tokens/refresh-token-rotation">リフレッシュトークンローテーション</a>を設定する<br>②<a href="https://auth0.com/docs/customize/custom-domains">カスタムドメイン</a>を設定する</p><p>この 2 つを設定すれば、ITP による 3rd Party Cookie 消失問題には対応できます。</p><p>また、ブラウザの設定変更で「ITP をオフにする」ことも可能なので、問題切り分け手法の 1 つとして覚えておくと、後々に役立つかも知れません。</p><p>以下は iPhone のブラウザ設定画面です。<br>スクショは ITP がオンの状態で撮影したものなので、Safari は「『サイト越えトラッキングを防ぐ』をオフ」にすることで、Chrome は「『Web サイト超えトラッキングを許可』をオン」にすることで、ITP を無効化できます。</p><img src="/images/20221007a/スクリーンショット_2022-10-05_2.46.11.png" alt="" width="1200" height="985" loading="lazy"><p>以下はリフレッシュトークン・カスタムドメインのどちらも設定せずに、エミュレーターの Safari 設定で ITP をオフにした場合の挙動です。Auth0 のコンソール画面、Web Inspector のログから、<code>/authorize</code>と<code>/oauth/token</code>が Call されて、PKCE フローが正常終了してサイレント認証に成功していることが分かります。</p><img src="/images/20221007a/スクリーンショット_2022-10-05_2.57.58.png" alt="" width="1200" height="712" loading="lazy"><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>モバイル向けの Web ページを作成してリリースし、リリース後の動作チェックで「あれ、iOS だとログイン状態が維持できてない！？」と気づき、OAuth2.0 の仕様や PKCE の確認、インスペクタのログと認証フローと付き合わせながら、処理に失敗している場所の特定にまで至れました。①「ITP」について知見がなかったこと、② 事前チェックが Android と Chrome シミュレーターだけで、iOS は工数削減のため未実施だったことが根原因なのですが、スマホと PC・iOS と Android で色々細かいところが違うのなー（なので、モバイル実機テストは Android と iOS は両方やろう）と再認識する機会になりました。</p><h2 id="参照サイト"><a href="#参照サイト" class="headerlink" title="参照サイト"></a>参照サイト</h2><ul><li><a href="https://webkit.org/blog/category/privacy/">Webkit</a></li><li><a href="https://auth0.com/docs/troubleshoot/authentication-issues/renew-tokens-when-using-safari">Troubleshoot Renew Tokens When Using Safari</a></li><li><a href="https://dangerous-animal141.hatenablog.com/entry/2021/06/08/220637">Auth0 の Silent Authentication (サイレント認証)と Refresh Token Rotation (リフレッシュトークンローテーション)を完全に理解した (い)</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/">認証認可</category>
      
      
      <category domain="https://future-architect.github.io/tags/Auth0/">Auth0</category>
      
      <category domain="https://future-architect.github.io/tags/AuthN/">AuthN</category>
      
      <category domain="https://future-architect.github.io/tags/ITP/">ITP</category>
      
      <category domain="https://future-architect.github.io/tags/Cookie/">Cookie</category>
      
      
      <comments>https://future-architect.github.io/articles/20221007a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Kong API Gatewayを使ってResource Serverを保護する</title>
      <link>https://future-architect.github.io/articles/20221006a/</link>
      <guid>https://future-architect.github.io/articles/20221006a/</guid>
      <pubDate>Wed, 05 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは。TIGのLEEです。&lt;a href=&quot;/articles/20221003a/&quot;&gt;認証認可連載&lt;/a&gt;の3本目です。&lt;/p&gt;
&lt;p&gt;前回はAWS API Gatewayを利用して、OIDC&amp;#x2F;OAuth2.0におけるResource</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは。TIGのLEEです。<a href="/articles/20221003a/">認証認可連載</a>の3本目です。</p><p>前回はAWS API Gatewayを利用して、OIDC&#x2F;OAuth2.0におけるResource ServerをCustom Authorizerで保護する記事を書いてました。</p><p><a href="https://future-architect.github.io/articles/20210610a/">https://future-architect.github.io/articles/20210610a/</a></p><p>今回はAPI Gatewayのミドルウェア製品となるKongを使ってResource Serverを構築する方法について話します。</p><h1 id="Kong-Gateway"><a href="#Kong-Gateway" class="headerlink" title="Kong Gateway"></a>Kong Gateway</h1><img src="/images/20221006a/gateway_overview.png" alt="gateway_overview.png" width="1200" height="507" loading="lazy"><p><a href="https://github.com/Kong/kong">Kong</a>はOSSから始まったAPIサーバのトラフィックを管理するためのミドルウェアです。</p><p>NginxベースにLuaJITエンジンを使ってLuaスクリプトが組み込めるWebプラットフォームの<a href="https://openresty.org/">OpenResty</a>を採用し、Luaで書かれた様々なPlug-inをデフォルトで揃え、それを組み立てることでAPIGatewayの機能を実装しています。また、Luaスクリプトで新しいカスタムPlug-inを作りそれを組み込むことも可能です。</p><p>Enterprise版が登場してからはAPIGateway以外にも様々さサービスがありますが、今回はKong Gatewayにのみ注目して行きたいです。</p><h2 id="Kongの構造"><a href="#Kongの構造" class="headerlink" title="Kongの構造"></a>Kongの構造</h2><p>構築の話になる前にかんたんにKongの構造を触れていきます。上の図のようにKongは基本的にConsumer&#x2F;Route&#x2F;Service&#x2F;LoadBalancer(Upstream)の4つのレイヤリングが存在します。Kongで使う様々なPlug-inはこの4つのレイヤーのどこか、もしくはGlobalに組み込むこともできます。</p><ul><li><strong>Consumer</strong>: Kongを実際利用するAPIClient(もしくはユーザ)を表すEntity</li><li><strong>Route</strong>: Requestのルールを定義するEntity</li><li><strong>Service</strong>: KongがProxyするBackendServiceを表すEntity</li><li><strong>Upstream</strong>: Backendの負荷分散やHealthCheckなどに使う仮想ホストのEntity</li></ul><h1 id="Actors"><a href="#Actors" class="headerlink" title="Actors"></a>Actors</h1><p>構築にあたり、まずはOIDCの役者を揃えましょう。Front&#x2F;Backで分離された認証認可設計のためには、少なくとも下記3つのActorが必要になります。</p><img src="/images/20221006a/kong-jwt.drawio.png" alt="kong-jwt.drawio.png" width="928" height="501" loading="lazy"><h2 id="Keycloak-as-OpenID-Provider-Authorization-Server"><a href="#Keycloak-as-OpenID-Provider-Authorization-Server" class="headerlink" title="Keycloak as OpenID Provider (Authorization Server)"></a><a href="https://www.keycloak.org/">Keycloak</a> as OpenID Provider (Authorization Server)</h2><p><a href="https://www.keycloak.org/getting-started/getting-started-docker">https://www.keycloak.org/getting-started/getting-started-docker</a></p><p>中心となる認可サーバはOSSのKeycloakを使いましょう。ID管理、トークンや証明書の発行&amp;管理、認証画面提供などの役割があります。<br>今回は上記リンク通り、Dockerを利用して構築します。Client設定は下記のVueの設定に従いましょう。<br>Keycloak構築はチュートリアル通りで問題ないので、詳細な実装方法は省略します。</p><h2 id="Vue-as-Relying-Party-Client"><a href="#Vue-as-Relying-Party-Client" class="headerlink" title="Vue as Relying Party (Client)"></a><a href="https://vuejs.org/">Vue</a> as Relying Party (Client)</h2><p><a href="https://www.keycloak.org/securing-apps/vue">https://www.keycloak.org/securing-apps/vue</a></p><p>FrontendとなるClientはVueを使います。認証後トークンの保持&amp;リフレッシュ、APIサーバへリクエストを送ったりします。<br>今回はVueを使いますが、<a href="https://www.npmjs.com/package/keycloak-js">keycloak-js</a>さえ組み込めば、どのFrameworkでもかんたんにRelyingPartyを作ることができます。<br>Keycloak同様リンク通り実装すれば問題ないので、詳細は省略します。</p><h2 id="Kong-as-Resource-Server-API-Server-Backend-Service"><a href="#Kong-as-Resource-Server-API-Server-Backend-Service" class="headerlink" title="Kong as Resource Server (API Server, Backend Service)"></a><a href="https://konghq.com/">Kong</a> as Resource Server (API Server, Backend Service)</h2><p><a href="https://mockbin.org/">https://mockbin.org/</a></p><p>今回の保護対象となるResourceServerは、Gatewayとして前段に位置するKongと本丸となるBackend Service (API Server)に構成されます。Backend ServiceとしてはKongのチュートリアルで使われる<a href="https://mockbin.org/">Mockbin</a>をそのまま使います。</p><h1 id="Kongの構築"><a href="#Kongの構築" class="headerlink" title="Kongの構築"></a>Kongの構築</h1><p><a href="https://docs.konghq.com/gateway/latest/install/">https://docs.konghq.com/gateway/latest/install/</a></p><p>まずはKongをインストールします。Dockerなど便利なオプションもあるので好きな方法でインストールしましょう。<br>Kongは設定の保存先としてDBを使うのでPostgreSQLもインストールが必要です。</p><p>Kongはデフォルトで</p><ul><li>Port 8001：あらゆるEntity設定を行うのAdminAPI</li><li>Port 8000：実際トラフィックをさばくProxy</li></ul><p>に分かれています。</p><h2 id="Service-amp-Routing"><a href="#Service-amp-Routing" class="headerlink" title="Service &amp; Routing"></a>Service &amp; Routing</h2><p><a href="https://docs.konghq.com/gateway/latest/get-started/services-and-routes/">https://docs.konghq.com/gateway/latest/get-started/services-and-routes/</a></p><p>次にKongとBackendServiceとなるMockbinをつないで、KongのURLにアクセスするとMockbinのレスポンスが出るようにします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -i -s -X POST http://localhost:8001/services \</span><br><span class="line">  --data name=example_service \</span><br><span class="line">  --data url=<span class="string">&#x27;http://mockbin.org&#x27;</span></span><br><span class="line">curl -i -X POST http://localhost:8001/services/example_service/routes \</span><br><span class="line">  --data <span class="string">&#x27;paths[]=/mock&#x27;</span> \</span><br><span class="line">  --data name=example_route</span><br></pre></td></tr></table></figure><p>上記のように設定することでKongの<code>/mock</code>へのアクセスが、Mockbinの<code>/</code>にProxyされるようになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET http://localhost:8000/mock/requests</span><br></pre></td></tr></table></figure><p>そうすると上のようなCurlでMockbinのAPIパスである<code>/requests</code>のレスポンスが取得できます。</p><h1 id="APIを保護する"><a href="#APIを保護する" class="headerlink" title="APIを保護する"></a>APIを保護する</h1><p>ここまで下準備が整ったところで、本題である認証機能実装に入ります。<br>ClientからのリクエストはBearerTokenとしてKeycloakが発行したJWTを乗せないと拒否するようにしたいので、トークンを検証するためにKong公式の<a href="https://docs.konghq.com/hub/kong-inc/jwt/">JWTプラグイン</a>を使います。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:8001/plugins -d <span class="string">&quot;name=jwt&quot;</span></span><br><span class="line">curl -i http://localhost:8000/mock/requests <span class="comment"># 401 Unauthorized</span></span><br></pre></td></tr></table></figure><p>今回はJWTプラグインをGlobalに設定しますが、特定のServiceやRouteに限定して設定することも可能です。</p><h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><p>次はConsumerの設定です。ConsumerはAPI Clientを表すEntityですが、今回の場合は特定認可サーバ(Keycloak)に認証済みのユーザ全員を表すために予め設定するものになります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:8001/consumers -d <span class="string">&quot;username=authorized_user&quot;</span></span><br></pre></td></tr></table></figure><h2 id="JWT-Credential"><a href="#JWT-Credential" class="headerlink" title="JWT Credential"></a>JWT Credential</h2><p>最後にConsumerにJWTを検証するための公開鍵を設定することで、「この検証されたトークンのBearerはこのConsumerで間違いない」ということを認証させるための設定をします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:8001/consumers/authorized_user/jwt \</span><br><span class="line">-H <span class="string">&#x27;Content-Type: application/json&#x27;</span> \</span><br><span class="line">-d <span class="string">&#x27;&#123;&quot;key&quot;: &quot;http://localhost:8080/realms/&#123;REALM_NAME&#125;&quot;,</span></span><br><span class="line"><span class="string">     &quot;algorithm&quot;: &quot;RS256&quot;,</span></span><br><span class="line"><span class="string">     &quot;rsa_public_key&quot;: &quot;-----BEGIN PUBLIC KEY-----\nMIIBI...QIDAQAB\n-----END PUBLIC KEY-----&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="key"><a href="#key" class="headerlink" title="key"></a><code>key</code></h3><p>JWTのペイロード<code>iss</code>と同じ値を設定します。<br>このAPIにアクセスできるユーザ(<code>authorized_user</code>)は、みんな同じ認可サーバ(<code>Issuer</code>)から発行されたトークンを持ってる(<code>Bearer</code>)ことを意味します。</p><p>JWTプラグインのデフォルト設定で<code>config.key_claim_name=iss</code>となるので、別のClaimの値にしたい場合(例えば<code>aud</code>か<code>azp</code>など)はAdminAPIの<code>/plugins/&#123;jwt plug-in ID&#125;</code>をPATCHなどして変更も可能です。</p><h3 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a><code>algorithm</code></h3><p>Keycloakでデフォルトで発行するAccessToken(JWT)のアルゴリズムである<code>RS256</code>を指定します。<br>注意するところは、もしこの設定のリクエストで下記の<code>rsa_public_key</code>のPEM形式が正しくない場合でも、このフィールドのエラーメッセージが出ます。</p><h3 id="rsa-public-key"><a href="#rsa-public-key" class="headerlink" title="rsa_public_key"></a><code>rsa_public_key</code></h3><p>Keycloakは同じRealmのユーザには同じ公開鍵でJWTを署名しているので、AdminConsoleの<code>Realm Settings &gt; Keys</code>から<code>RS256</code>の公開鍵をPEM形式でセットします。<br>一般的にRS256のJWT検証に使われるJWKs Endpointの証明書(<code>x5c</code>)と違い、公開鍵であることに注意しましょう。</p><h1 id="実際リクエストを送ってみる"><a href="#実際リクエストを送ってみる" class="headerlink" title="実際リクエストを送ってみる"></a>実際リクエストを送ってみる</h1><p>普通アプリを作るならばここでClientであるVue上でKeycloakから取得したAccessToken(JWT)を<code>Authorization</code>ヘッダーに載せ、KongのAPIにアクセスするコードを書くことになります。<br>しかし、ここではKongの機能を確認するだけでいいので、Vueが保持するKeycloakのインスタンスをダンプさせAccessTokenを取得し、curlを使います。</p><img src="/images/20221006a/スクリーンショット_2022-10-06_4.38.57.png" alt="スクリーンショット_2022-10-06_4.38.57.png" width="1200" height="707" loading="lazy"><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:8000/mock/requests -H <span class="string">&quot;Authorization: Bearer eyJhbGciOiJS...&quot;</span> | jq .</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="string">&quot;authorization&quot;</span>: <span class="string">&quot;Bearer eyJhbGciOiJS...&quot;</span>,</span><br><span class="line">        <span class="string">&quot;x-consumer-username&quot;</span>: <span class="string">&quot;authorized_user&quot;</span>,</span><br><span class="line">        <span class="string">&quot;x-credential-identifier&quot;</span>: <span class="string">&quot;http://localhost:8080/realms/&#123;REALM_NAME&#125;&quot;</span>,</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>そうするとMockbinが受け取ったHeaderを上記のようなレスポンスとして返してくれます。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>といった感じで簡単に触ってみましたが、いかがだったでしょうか。</p><p>今回は割愛しましたが、<code>exp</code>Claimで有効期限をチェックすることも可能ですし、設定の<code>config.key_claim_name</code>とプラグインを適用するRoute&#x2F;Serviceを調整する機能を組み合わせることで認可機能を実装することも可能です。</p><p>個人的にはどのアカウントからのリクエストかわかるように、ペイロードの<code>sub</code>など一部のClaimを後ろにヘッダーとして流せる機能があったら良かったなとも思いましたが、例えば<a href="https://docs.konghq.com/hub/yesinteractive/kong-jwt2header/">こういったカスタムプラグイン</a>を組み合わせることでなんとかなりそうです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/">認証認可</category>
      
      
      <category domain="https://future-architect.github.io/tags/Kong/">Kong</category>
      
      <category domain="https://future-architect.github.io/tags/OAuth/">OAuth</category>
      
      <category domain="https://future-architect.github.io/tags/openid-connect/">openid_connect</category>
      
      
      <comments>https://future-architect.github.io/articles/20221006a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Casbinで始めるアクセス制御</title>
      <link>https://future-architect.github.io/articles/20221004a/</link>
      <guid>https://future-architect.github.io/articles/20221004a/</guid>
      <pubDate>Mon, 03 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;TIG真野です。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG真野です。<a href="/articles/20221003a/">認証認可連載</a>の2本目です。</p><p>認証認可がテーマの中で、アクセス制御と聞くとちょっと外れているかもと思いましたが、<a href="https://casbin.io/">Casbin</a>について紹介します。</p><p>トップページにも <code>An authorization library that supports access control models like ACL...</code> とあり、アクセス制御を支援する認可ライブラリだよって書いているので、OKと判断しました。</p><h2 id="Casbinについて"><a href="#Casbinについて" class="headerlink" title="Casbinについて"></a>Casbinについて</h2><p>ACL、RBAC、ABACなどの様々なモデルでアクセス制御を行えるライブラリです。</p><p>私が最初に存在を知ったのは、<a href="https://github.com/avelino/awesome-go#authentication-and-oauth">avelino&#x2F;awesome-go</a> に載っていたことからだったので、てっきりGo言語のみのライブラリかと思っていました。</p><p>実際はドキュメントを見ると、複数の言語をサポートしています。Go以外にも、Java, Node.js, PHP, Python, .NET, C#, C++, Rust, Delphi, Lua, Dart, Elixirに対応しているとのこと（言語によっては一部の機能が使えないなどあるようです。）</p><p><a href="https://casbin.org/docs/ja/overview">ドキュメント</a>に書いてることがシンプルだったのでそのまま転載、抜粋します。</p><p>Casbinが行うこと：</p><ol><li><code>&#123;subject, object, action&#125;</code> の形式や独自定義のカスタマイズされた形式のポリシーを適用します</li><li>アクセス制御モデルとそのポリシーの保存をハンドリングします</li><li>ロール・ユーザー間のマッピングとロール・ロール間のマッピング（RBACのロール階層管理</li><li>root や administrator のようなスーパーユーザのサポート</li><li>ルールのマッチングをサポートする複数の組み込み演算子もサポートします。 例えば、 keyMatch はリソース キー <code>/foo/bar</code> をパターン <code>/foo*</code> のマッピング</li></ol><p>Casbinが行わないこと：</p><ol><li>認証 (ログイン時の ユーザー名 と パスワード の検証)</li><li>ユーザーまたはロールのリスト管理。 プロジェクトがこれらのエンティティを管理する方が利便性が高いと考えています。 Casbinはパスワードを保管しない</li></ol><p>仕組みとしては、 PERM メタモデル (Policy, Effect, Request, Matchers) にもとづいて動作するとのこと。</p><h2 id="ACL、RBAC、ABACについて"><a href="#ACL、RBAC、ABACについて" class="headerlink" title="ACL、RBAC、ABACについて"></a>ACL、RBAC、ABACについて</h2><p>それぞれ用語だけ簡単に触れます。</p><ul><li>ACL(Access Controll List)<ul><li>アクセス制御</li></ul></li><li>RBAC(Role Based Access Control)<ul><li>ロールベースアクセス制御</li></ul></li><li>ABAC(Attribute Based Access Control)<ul><li>属性ベースアクセス制御</li></ul></li></ul><p>アクセス制御について詳しい解説は、次のようなサイトを見ると良いと思います。</p><ul><li><a href="https://kenfdev.hateblo.jp/entry/2020/01/13/115032">https://kenfdev.hateblo.jp/entry/2020/01/13/115032</a></li><li><a href="https://ja.wikipedia.org/wiki/%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E5%88%B6%E5%BE%A1%E3%83%AA%E3%82%B9%E3%83%88">https://ja.wikipedia.org/wiki/%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E5%88%B6%E5%BE%A1%E3%83%AA%E3%82%B9%E3%83%88</a></li><li><a href="https://www.cloudflare.com/ja-jp/learning/access-management/role-based-access-control-rbac/">https://www.cloudflare.com/ja-jp/learning/access-management/role-based-access-control-rbac/</a></li><li><a href="https://www.okta.com/jp/identity-101/role-based-access-control-vs-attribute-based-access-control/">https://www.okta.com/jp/identity-101/role-based-access-control-vs-attribute-based-access-control/</a></li></ul><h2 id="PERM-メタモデル-について"><a href="#PERM-メタモデル-について" class="headerlink" title="PERM メタモデル について"></a>PERM メタモデル について</h2><p>Casbin以外で聞いたことが無いですが（一般用語でしたらすいません）、Policy, Effect, Request, Matchersの略です。</p><img src="/images/20221004a/casbin_image.png" alt="casbin_image.png" width="1200" height="531" loading="lazy"><p>ファイルシステムのACLのイメージ図です。ポリシー定義がそのファイルの権限を誰が持っているかのリストです。モデル定義はそれをもとにどのように動作させるかを示しています。</p><p>図だと、以下を示しています。</p><ul><li>aliceはdata1を読み取りOK</li><li>bobはdata2を書き込みOK</li></ul><p>sub, obj, actは <code>だれ</code>が、<code>何</code>を、<code>どうする</code> に置き換えるとイメージしやすいと思います。</p><h2 id="触ってみる（Go）"><a href="#触ってみる（Go）" class="headerlink" title="触ってみる（Go）"></a>触ってみる（Go）</h2><p>GoでどのようにCasbinを動かすのか、触ってみます。</p><p>最初にPolicyを定義します。実用的にはPostgreSQL&#x2F;MySQLといったDBやAmazon S3などに配備すると思います。そういったAdaptorも用意されています。今回は簡易的にCSVファイルを用います。</p><p>例としてRBACをイメージしています。</p><figure class="highlight plaintext"><figcaption><span>policy.csv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">p, admin, file1, read</span><br><span class="line">p, admin, file2, read</span><br><span class="line">p, admin, file3, read</span><br><span class="line">p, Aさん, file4, read</span><br><span class="line">g, Bさん, file5, read</span><br><span class="line">g, Aさん, admin</span><br></pre></td></tr></table></figure><p>見たまんまですが、adminロールを持っている人はfile1~file3に対して権限があり、Aさんのみadminです。<br>また、Aさんはfile4, Bさんはfile5に権限を個別に持っています。</p><p>Goのコードとしては、モデルのロード、ポリシーのロードを行い生成する <code>casbin.NewEnforcer()</code> がメインどころです。このインスタンスを生成できるとあとは <code>Enforce()</code> で判定可能です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/casbin/casbin/v2&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/casbin/casbin/v2/model&quot;</span></span><br><span class="line">fileadapter <span class="string">&quot;github.com/casbin/casbin/v2/persist/file-adapter&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">modelParam, err := model.NewModelFromString(<span class="string">`</span></span><br><span class="line"><span class="string">[request_definition]</span></span><br><span class="line"><span class="string">r = sub, obj, act</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[policy_definition]</span></span><br><span class="line"><span class="string">p = sub, obj, act</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[role_definition]</span></span><br><span class="line"><span class="string">g = _ , _</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[policy_effect]</span></span><br><span class="line"><span class="string">e = some(where (p.eft == allow))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[matchers]</span></span><br><span class="line"><span class="string">m = g(r.sub, p.sub) &amp;&amp; r.obj == p.obj &amp;&amp; r.act == p.act</span></span><br><span class="line"><span class="string">`</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;NewModelFromString: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enforcer, err := casbin.NewEnforcer(modelParam, fileadapter.NewAdapter(<span class="string">&quot;policy.csv&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;NewEnforcer: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">in := [][]any&#123;</span><br><span class="line">&#123;<span class="string">&quot;Aさん&quot;</span>, <span class="string">&quot;file1&quot;</span>, <span class="string">&quot;read&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Aさん&quot;</span>, <span class="string">&quot;file1&quot;</span>, <span class="string">&quot;write&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Aさん&quot;</span>, <span class="string">&quot;file4&quot;</span>, <span class="string">&quot;read&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;Bさん&quot;</span>, <span class="string">&quot;file1&quot;</span>, <span class="string">&quot;read&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> in &#123;</span><br><span class="line">ok, err := enforcer.Enforce(v...)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;enforce: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v: %v\n&quot;</span>, v, ok)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これを動かすと、次のように想定通りの結果を得られます。</p><figure class="highlight plaintext"><figcaption><span>実行結果</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Aさん file1 read]: true</span><br><span class="line">[Aさん file1 write]: false</span><br><span class="line">[Aさん file4 read]: true</span><br><span class="line">[Bさん file1 read]: false</span><br></pre></td></tr></table></figure><p>CasbinのAPIの使い方で言えば、判定するための実装そのものより、モデルのmatcherの書き方や、これらの定義をどのようにロードさせたり、変更があった場合に追随させるかといったところの方が難しいと思います。</p><p>matcherの文法:</p><ul><li><a href="https://casbin.io/ja/docs/function">https://casbin.io/ja/docs/function</a> にかかれている通り、組み込み関数が使えます。<ul><li>ワイルドカード指定などもこれで対応できます</li></ul></li></ul><p>adaptor:</p><ul><li><a href="https://casbin.io/docs/adapters">https://casbin.io/docs/adapters</a> に記載されている通り、複数のデータソースに対応しています。地味に<code>Ent</code>や<code>sqlx</code> といったORマッパーも対応していて細かいです<ul><li><code>AutoSave</code> ですが、enforcerは <code>UpdatePolicy()</code> で動的に定義を変更することが可能なため、それを自動で保存する機能です</li><li>例えば、何か新しいファイルやレコードが追加された時に権限を更新→自動で永続化先まで反映してくれるといった具合です</li></ul></li></ul><h2 id="HTTPサーバの利用できるAPIをアクセス制御する"><a href="#HTTPサーバの利用できるAPIをアクセス制御する" class="headerlink" title="HTTPサーバの利用できるAPIをアクセス制御する"></a>HTTPサーバの利用できるAPIをアクセス制御する</h2><img src="/images/20221004a/casbin_server.drawio.png" alt="casbin_server.drawio.png" width="1200" height="486" loading="lazy"><p>さきほどの例だとあまりイメージが付きにくいと思うので、Web APIの URL＋Method でアクセス制限する例を実装していみます。</p><p>ここでは説明のためスクラッチで書いていますが、Echo, Gin、Chiなどすでにミドルウェアで準備されています。</p><ul><li><a href="https://casbin.io/ja/docs/middlewares">https://casbin.io/ja/docs/middlewares</a></li></ul><p>今回は <a href="https://github.com/go-chi/chi">go-chi</a> を用いて実装します。それっぽい例を探すのが大変だっため、<a href="https://github.com/go-chi/chi/tree/master/_examples/rest">_examples&#x2F;rest</a> を流用しました。オリジナルのコードはそちらを参照ください。</p><p>まずはモデル定義です。</p><figure class="highlight plaintext"><figcaption><span>model.conf</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[request_definition]</span><br><span class="line">r = sub, obj, act</span><br><span class="line"></span><br><span class="line">[policy_definition]</span><br><span class="line">p = sub, obj, act</span><br><span class="line"></span><br><span class="line">[policy_effect]</span><br><span class="line">e = some(where (p.eft == allow))</span><br><span class="line"></span><br><span class="line">[matchers]</span><br><span class="line">m = r.sub == p.sub &amp;&amp; keyMatch(r.obj, p.obj) &amp;&amp; (r.act == p.act || p.act == &quot;*&quot;)</span><br></pre></td></tr></table></figure><p>最後のmachersだけ、条件が増えています。<br><code>keyMatch</code> はワイルドカードを許容する関数です。例えば、 <code>/articles/*</code> で <code>/articles/1234</code> とか、 <code>/articles/1234/comments/5678</code> などを許容したいので利用しています。詳細は<a href="https://casbin.io/docs/function#:~:text=Example-,keyMatch,-a%20URL%20path">こちら</a>を参照ください。<br>今回はワイルドカードで許容できるようにしたいので、 <code>act</code> 側はORで繋いでいます。 <code>keyMatch</code> だと GET, POST, DELETE などを <code>*</code> で許容できなかったのでこの書き方をしています。</p><p>ポリシーは今回もCSVファイルで定義します。</p><figure class="highlight plaintext"><figcaption><span>policy.csv</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">p, guest, /, *</span><br><span class="line">p, guest, /ping, *</span><br><span class="line">p, member, /, GET</span><br><span class="line">p, member, /ping, GET</span><br><span class="line">p, member, /articles, GET</span><br><span class="line">p, member, /articles/*, GET</span><br><span class="line">p, owner, /, GET</span><br><span class="line">p, owner, /ping, GET</span><br><span class="line">p, owner, /articles, *</span><br><span class="line">p, owner, /articles/*, *</span><br><span class="line">p, admin, /*, *</span><br></pre></td></tr></table></figure><p>全てロールで、guest &lt; member &lt; owner &lt; admin の順番で権限が強くなるイメージです。</p><p>次に、Casbinの判定をchiのミドルウェアに設定する実装イメージを書いてみました。</p><figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line">r := chi.NewRouter()</span><br><span class="line">r.Use(middleware.RequestID)</span><br><span class="line"><span class="comment">// 中略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Casbinのモデル、ポリシーをロード</span></span><br><span class="line">casbinModel, err := model.NewModelFromFile(<span class="string">&quot;model.conf&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;NewModelFromFile: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">enforcer, err := casbin.NewEnforcer(casbinModel, fileadapter.NewAdapter(<span class="string">&quot;policy.csv&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;NewEnforcer: %s&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ミドルウェアに設定</span></span><br><span class="line">r.Use(CasbinAuthorizer(enforcer))</span><br></pre></td></tr></table></figure><p>続いてミドルウェア本体です。かなり端折って書いています。コードコメントにも書いていますが、本来はログイン後にセッションか何かにユーザーIDを載せ、紐づくユーザーロールをDBから取得するようなイメージでいます（あるいはJSTトークンにロールを載せてもらうかなど）。取得したロールも、本来は http.Requestの <code>context.Context</code> に載せて引き回した方が自然かもしれませんが、簡易的にリクエストヘッダーから取っています。</p><p>main関数側で設定した <code>casbin.Enforcer</code> で、リクエストを検証して、OKであれば後続へ。NGであれば403を返します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CasbinAuthorizer</span><span class="params">(e *casbin.Enforcer)</span></span> <span class="function"><span class="keyword">func</span><span class="params">(next http.Handler)</span></span> http.Handler &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(next http.Handler)</span></span> http.Handler &#123;</span><br><span class="line">fn := <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 何かしらミドルウェアの前処理（セッションやJWTトークンから取得）でロールがリクエストヘッダーに入っているものとする</span></span><br><span class="line">role := r.Header.Get(<span class="string">&quot;user_role&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> role == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">role = <span class="string">&quot;guest&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// casbinでリクエストを検証（ロール、URL、メソッド）</span></span><br><span class="line">res, err := e.Enforce(role, r.URL.Path, r.Method)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">http.Error(w, err.Error(), http.StatusInternalServerError)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> res &#123;</span><br><span class="line">next.ServeHTTP(w, r)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">http.Error(w, http.StatusText(http.StatusForbidden), http.StatusForbidden)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> http.HandlerFunc(fn)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実際にcurlで試してみます。ロールをリクエストヘッダで切り替えていますが、本来はこれだと意味がないので、ログイン処理などを追加して、サーバ側でロールを判定するように改修し、クライアントがロールを指定できなくする必要があります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># guest ロール</span></span><br><span class="line">$ curl  http://localhost:3333/ping</span><br><span class="line">pong</span><br><span class="line"></span><br><span class="line">$ curl  http://localhost:3333/articles</span><br><span class="line">Forbidden</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># member ロール</span></span><br><span class="line">$ curl -H <span class="string">&#x27;user_role:member&#x27;</span>  http://localhost:3333/articles</span><br><span class="line">[&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;user_id&quot;</span>:100,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;Hi&quot;</span>,<span class="string">&quot;slug&quot;</span>:<span class="string">&quot;hi&quot;</span>,<span class="string">&quot;user&quot;</span>:&#123;<span class="string">&quot;id&quot;</span>:100,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Peter&quot;</span>,<span class="string">&quot;role&quot;</span>:<span class="string">&quot;collaborator&quot;</span>&#125;,<span class="string">&quot;elapsed&quot;</span>:10&#125;,&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;2&quot;</span>,<span class="string">&quot;user_id&quot;</span>:200,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;sup&quot;</span>,<span class="string">&quot;slug&quot;</span>:<span class="string">&quot;sup&quot;</span>,<span class="string">&quot;user&quot;</span>:&#123;<span class="string">&quot;id&quot;</span>:200,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Julia&quot;</span>,<span class="string">&quot;role&quot;</span>:<span class="string">&quot;collaborator&quot;</span>&#125;,<span class="string">&quot;elapsed&quot;</span>:10&#125;,&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;3&quot;</span>,<span class="string">&quot;u</span></span><br><span class="line"><span class="string">ser_id&quot;</span>:300,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;alo&quot;</span>,<span class="string">&quot;slug&quot;</span>:<span class="string">&quot;alo&quot;</span>,<span class="string">&quot;elapsed&quot;</span>:10&#125;,&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;4&quot;</span>,<span class="string">&quot;user_id&quot;</span>:400,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;bonjour&quot;</span>,<span class="string">&quot;slug&quot;</span>:<span class="string">&quot;bonjour&quot;</span>,<span class="string">&quot;elapsed&quot;</span>:10&#125;,&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;5&quot;</span>,<span class="string">&quot;user_id&quot;</span>:500,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;whats up&quot;</span>,<span class="string">&quot;slug&quot;</span>:<span class="string">&quot;whats-up&quot;</span>,<span class="string">&quot;elapsed&quot;</span>:10&#125;]</span><br><span class="line"></span><br><span class="line">$ curl -H <span class="string">&#x27;user_role:member&#x27;</span> -X DELETE http://localhost:3333/articles/1</span><br><span class="line">Forbidden</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># owner ロール</span></span><br><span class="line">$ curl -H <span class="string">&#x27;user_role:owner&#x27;</span> -X DELETE http://localhost:3333/articles/1</span><br><span class="line">&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;1&quot;</span>,<span class="string">&quot;user_id&quot;</span>:100,<span class="string">&quot;title&quot;</span>:<span class="string">&quot;Hi&quot;</span>,<span class="string">&quot;slug&quot;</span>:<span class="string">&quot;hi&quot;</span>,<span class="string">&quot;user&quot;</span>:&#123;<span class="string">&quot;id&quot;</span>:100,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Peter&quot;</span>,<span class="string">&quot;role&quot;</span>:<span class="string">&quot;collaborator&quot;</span>&#125;,<span class="string">&quot;elapsed&quot;</span>:10&#125;</span><br><span class="line"></span><br><span class="line">$ curl -H <span class="string">&#x27;user_role:owner&#x27;</span> http://localhost:3333/admin</span><br><span class="line">Forbidden</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># admin ロール</span></span><br><span class="line">$ curl -H <span class="string">&#x27;user_role:admin&#x27;</span> http://localhost:3333/admin</span><br><span class="line">admin: index</span><br></pre></td></tr></table></figure><p>ロールに権限があれば、操作が成功していることが分かります。</p><h2 id="もっと細かい制御をするためには"><a href="#もっと細かい制御をするためには" class="headerlink" title="もっと細かい制御をするためには"></a>もっと細かい制御をするためには</h2><p>上記の実装例だと、例えばある記事の削除は、<code>作成したユーザー自身</code> も削除できるようにしたい、といった要望には対応できません（ユーザー単位でロールを作ればもちろん可能ですが、もはやそれはロールの意味が無いですよね）。</p><p>Casbinでどう実現するかですが、今のURLの構造でがんばるのであれば、articlesが追加されるごとにユーザーIDとマッピングさせた policy.csv のレコードに相当するデータを釣っていくことです。Casbinの機能であれば、<a href="https://casbin.org/docs/en/priority-model">Priority Model</a>で多段の権限を判定できるので、参考になるかもしれません。</p><p>また、この実装例のURL階層だと、ワイルドカードが使いにくいので、 <code>/users/&lt;user_id&gt;/articles/&lt;article id&gt;</code> といった階層を工夫すると <code>policy</code> のメンテナンスをシンプルに抑えることもできるかと思います。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>気になっていたCasbinの触りについてまとめました。ドキュメントサイトも新しくなっていますし、採用事例もちょくちょく聞きますし、プロダクション運用にも耐えうる品質だと思っています。</p><p>すこし気になっているのは、2022.10.3時点だと <code>v3.0.0-beta.7</code> がタグ付けされています。もうすぐv3系がリリースされる予感があり、APIの互換性がすこし崩れるのかも？と推測しています。（とは言え、ドキュメントページも整理されていますし、すでにv1→v2で移行しているので、根本からそこまで変わらないのでは？と思っていますが）。このあたりは新規に採用する時に留意したほうが良いと思います。</p><p>アクセス制限は自前で作り込むと面倒な割に、ユーザーからは当たり前品質の扱いをされがちだと思うので、こういった既存プロダクトにうまくのっかれると良いと思います。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://qiita.com/unhurried/items/4688b4e94d96db2d1143">https://qiita.com/unhurried/items/4688b4e94d96db2d1143</a></li><li><a href="https://articles.wesionary.team/understanding-casbin-with-different-access-control-model-configurations-faebc60f6da5">https://articles.wesionary.team/understanding-casbin-with-different-access-control-model-configurations-faebc60f6da5</a></li><li><a href="https://zenn.dev/dove/articles/bc6933dbb39509">https://zenn.dev/dove/articles/bc6933dbb39509</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/">認証認可</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/AuthZ/">AuthZ</category>
      
      <category domain="https://future-architect.github.io/tags/Casbin/">Casbin</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E5%88%B6%E5%BE%A1/">アクセス制御</category>
      
      
      <comments>https://future-architect.github.io/articles/20221004a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>認証認可連載2022</title>
      <link>https://future-architect.github.io/articles/20221003a/</link>
      <guid>https://future-architect.github.io/articles/20221003a/</guid>
      <pubDate>Sun, 02 Oct 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20221003a/padlock-g268bd2c48_640.jpg&quot; alt=&quot;padlock-g268bd2c48_640.jpg&quot; width=&quot;640&quot; height=&quot;352&quot; loading=&quot;lazy&quot;&gt;


&lt;h2</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20221003a/padlock-g268bd2c48_640.jpg" alt="padlock-g268bd2c48_640.jpg" width="640" height="352" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG 真野です。</p><p>フューチャーで認証系のブログ連載と言えば、 <a href="/tags/Auth0/">Auth0</a> をテーマとした連載があります。今回は次のようにもう少しテーマを広くした連載を始めます。</p><ul><li>認証・認可の技術全般<ul><li>WebAuthn、OpenID Connect 周り</li><li>KeyCloack、Auth0、AWS Cognitoなどなんでも</li></ul></li></ul><p>2022年が初めてですので、「やってみた、触った見たレベルから」～「マニアックな挙動の紹介まで」何でもOKというテーマで募集しました。</p><h2 id="スケジュール"><a href="#スケジュール" class="headerlink" title="スケジュール"></a>スケジュール</h2><p>すでに公開済みの澁川さんの他、5名が参加予定です。</p><div class="scroll"><table><thead><tr><th>Date</th><th>Title</th><th>Author</th></tr></thead><tbody><tr><td>9&#x2F;2</td><td><a href="/articles/20220902a/">パスワードレスな認証を実現する認証ミドルウェアのhanko</a></td><td>澁川喜規</td></tr><tr><td>10&#x2F;4</td><td><a href="/articles/20221004a/">Casbinで始めるアクセス制御</a></td><td>真野隼記</td></tr><tr><td>10&#x2F;6</td><td><a href="/articles/20221006a/">Kong API Gatewayを使ってResource Serverを保護する</a></td><td>Lee</td></tr><tr><td>10&#x2F;7</td><td><a href="/articles/20221007a/">Auth0のアクセストークン取得とITPへの対応</a></td><td>棚井龍之介</td></tr><tr><td>10&#x2F;12</td><td><a href="/articles/20221012a/">OAuth の仕組みを理解しながらクライアントを実装してみる</a></td><td>吉岡朋哉</td></tr></tbody></table></div><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>フューチャーには「認証認可についての相談室」というGoogleチャットスペースがあり、そこで声掛けするとすぐに企画に賛同する人がいてくれて助かりました。</p><p>実はあまり活発ではないチャットルームなので、こうしたブログでの外部発表を通して交流を促進できると良いなとも感じています。</p><img src="/images/20221003a/chat.png" alt="" width="385" height="75" loading="lazy"><p>今回の連載で、少しでも皆様に良い情報を共有できればと思います！</p><p>アイキャッチ画像は、<a href="https://pixabay.com/users/qimono-1962238/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3658577">Arek Socha</a> from <a href="https://pixabay.com//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=3658577">Pixabay</a>を利用させていただきました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/%E8%AA%8D%E8%A8%BC%E8%AA%8D%E5%8F%AF/">認証認可</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/AuthZ/">AuthZ</category>
      
      <category domain="https://future-architect.github.io/tags/AuthN/">AuthN</category>
      
      
      <comments>https://future-architect.github.io/articles/20221003a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【合格記】Google Cloud Professional Machine Learning Engineer認定資格を振り返る</title>
      <link>https://future-architect.github.io/articles/20220930a/</link>
      <guid>https://future-architect.github.io/articles/20220930a/</guid>
      <pubDate>Thu, 29 Sep 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220930a/tokyo.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;333&quot;&gt;

&lt;p&gt;こんにちは、TIGの岸下です。&lt;/p&gt;
&lt;p&gt;先日、Google Cloudの認定資格である&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220930a/tokyo.png" alt="" width="800" height="333"><p>こんにちは、TIGの岸下です。</p><p>先日、Google Cloudの認定資格である<a href="https://cloud.google.com/certification/machine-learning-engineer">Professional Machine Learning Engineer認定資格</a>を受験し、取得することができました。<br>また、今回はリモート試験にて受験をしてみました。<br>この記事では</p><ul><li>Professional Machine Learning Engineer認定資格の合格に至った学習過程</li><li>リモート試験体験記</li></ul><p>について書いていこうと思います。</p><h2 id="筆者のバックグラウンドについて"><a href="#筆者のバックグラウンドについて" class="headerlink" title="筆者のバックグラウンドについて"></a>筆者のバックグラウンドについて</h2><p>今回の試験では受験者のバックグラウンドによって学習過程・学習量がかなり変わると思うので、以下に筆者のバックグラウンドを記しておきます。</p><ul><li>大学・大学院の研究室が医用工学系で機械学習（ML）、DeepLearning（DL）の発表をほぼ毎週聞いていたため、基礎はある程度身についていた。</li><li>新卒から約2年ほど画像処理AI関連の業務に従事。<ul><li>データの前処理から学習・推論・評価といった一連の処理・計算は知っており、Pythonで書くことができた。</li><li>MLOpsは経験無し。</li><li>ML&#x2F;DL, AI大好き人間ではなかったがTwitter等でトレンドは追っかけていたため、画像処理以外でもML&#x2F;DL技術の仕組みと何に使われるかはある程度知っていた。<ul><li>強化学習</li><li>NLP</li><li>など</li></ul></li></ul></li><li>現在、8ヶ月ほどGCP関連のプロジェクトに従事。<ul><li>どういったサービスが何に使われるかや、Googleオススメのアーキテクトなどがなんとなーくわかってきたフェーズ。</li><li><a href="https://cloud.google.com/certification/guides/professional-cloud-architect?hl=ja">Processional Cloud Architect</a>は取得済み。</li></ul></li></ul><h2 id="試験と出題範囲について"><a href="#試験と出題範囲について" class="headerlink" title="試験と出題範囲について"></a>試験と出題範囲について</h2><p>2022年9月25日現在だと、Professional Machine Learning Engineerの試験は<strong>英語試験</strong>のみとなります。<br>問題数は60問で試験時間は2時間となります。<br>英語に関しては類似の言い回しも多く、ML&#x2F;DL系の英単語を知っていれば難なく完遂できると思います。</p><p>出題範囲は<a href="https://cloud.google.com/certification/machine-learning-engineer?hl=ja">公式</a>からの抜粋です。<br>各出題範囲に対して受験後の体感を書いておきます。</p><div class="scroll"><table><thead><tr><th>出題範囲</th><th>ざっくりした内容</th></tr></thead><tbody><tr><td>ML 問題の枠組み</td><td>■ このML&#x2F;DLで何ができるのか？</td></tr><tr><td>ML ソリューションの設計</td><td>■ 利用者の前提知識によって、BigQueryML, AutoML, VertexAIの使い分けをどうするか。<br>■ 「最小限のエフォートで」、「インフラを管理したくない」、「Python使いたい」などユーザーの要望に沿うことのできるソリューション設計など。</td></tr><tr><td>データ準備 &#x2F; 処理システムの設計</td><td>■ 特徴量エンジニアリング（連続値どうするか、カテゴリ値どうするか、標準化・正規化…）。<br> ■ Dataflow, DataFusion, BigQueryの使い分けなど。</td></tr><tr><td>ML モデルの開発</td><td>■ ML&#x2F;DLモデルの評価方法。（<strong>Recall&#x2F;Accuracy&#x2F;Precisionは絶対に理解しておきましょう。</strong>） <br>■ モデル開発におけるアンチパターンとその対応など。</td></tr><tr><td>ML パイプラインの自動化とオーケストレーション</td><td>■ KubeFlow&#x2F;TFXの使い分けなど。 <br> ■ MLOpsのベストプラクティス（データがCloud Storageに置かれたらPubSubに通知してCloud Functionで～的な）など。</td></tr><tr><td>ML ソリューションのモニタリング、最適化、メンテナンス</td><td>■ データセットやモデルのモニタリング（精度が急に落ちていないか、データセットに異常値が発生していないかなど）など。<br> ■ 上記のような問題が起きないようにするにはどうするかなど。</td></tr></tbody></table></div><h2 id="学習過程"><a href="#学習過程" class="headerlink" title="学習過程"></a>学習過程</h2><h3 id="1-Coursera"><a href="#1-Coursera" class="headerlink" title="1. Coursera"></a>1. Coursera</h3><p>8月に学習を開始し、ちょうどCourseraで<a href="https://www.coursera.org/promo/googlecloud-training-promotion?utm_campaign=July22_blog&utm_medium=institutions&utm_source=googlecloud">Google Cloud関連コース1ヶ月無料＆1ヶ月で完遂すればバウチャーあげるよキャンペーン</a>（既に終了済）やっていたので、<a href="https://www.coursera.org/professional-certificates/preparing-for-google-cloud-machine-learning-engineer-professional-certificate">Preparing for Google Cloud Certification: Machine Learning Engineer Professional Certificate</a>を受講しました。</p><p>以下9コースの詰め合わせセットになっています。</p><ul><li>Google Cloud Big Data and Machine Learning Fundamentals</li><li>How Google does Machine Learning</li><li>Launching into Machine Learning</li><li>TensorFlow on Google Cloud</li><li>Feature Engineering</li><li>Machine Learning in the Enterprise</li><li>Production Machine Learning Systems</li><li>MLOps (Machine Learning Operations) Fundamentals</li><li>ML Pipelines on Google Cloud</li></ul><h4 id="良さみ"><a href="#良さみ" class="headerlink" title="良さみ"></a>良さみ</h4><ul><li>各コースでハンズオン形式で学べるQuikLabが付いており、手を動かしながら以下の内容について学べる。<ul><li>DataPrepを利用した学習用データセットの準備</li><li>DataFusionを利用したUIによるデータETL処理構築</li><li>PythonとDataFlowを利用したデータETL処理構築</li><li>BigQueryMLを利用した機械学習モデルの構築（学習・推論・評価）</li><li>AutoMLを利用した機械学習モデルの構築（学習・推論・評価）</li><li>VertexAI上でのKubeFlowを利用したMLOps構築</li><li>VertexAI上でのTFXを利用したMLOps構築</li><li>…etc.</li></ul></li><li>9コース終わると、GCPにおけるMLOpsの知識は身につく。<ul><li>Googleのベストプラクティスがわかるようになりました。</li><li>試験に出てくる内容の80％以上は網羅できていると思います。<ul><li>この単語・サービス知らない！はほとんどありませんでした。</li></ul></li></ul></li></ul><h4 id="つらみ"><a href="#つらみ" class="headerlink" title="つらみ"></a>つらみ</h4><ul><li>全9コース＆英語音声&#x2F;字幕しかない。<ul><li>英語の肩慣らしだと思って頑張りました。</li></ul></li><li>GKE立ち上げるのに10分かかったり、学習回すのに1時間かかったりし、時間が溶ける。<ul><li>パイプラインの仕組みや処理の流れで類似した箇所が多いので、ある程度掴んだら飛ばし飛ばしやるといいと思います。</li><li>（たまに、完遂しないと修了認定出してくれないレクチャーもあるのでそこは注意…）</li></ul></li><li>ML&#x2F;DLのバックグラウンドがある人にとっては既知の内容も多い。<ul><li>特にFeature Engineeringのコースは基礎的な前処理の話が多く、飛ばし飛ばし or 倍速で見て雰囲気感じるだけでもいいと思います。</li></ul></li></ul><h4 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h4><p>ボリュームがかなりある分、中身がかなり濃いです。ML&#x2F;DL関連は最近全く触れていなかったので改めて復習をすることができました。<br>特にRecall&#x2F;Precision&#x2F;Accuracy&#x2F;F1-scoreあたりの使い分けは完全に忘れていました（PrecisionとAccuracyがややこしい…）。<br>また、GCPではML&#x2F;DL向けに多くのサービスを用意しており、MLOpsに関してはステップを踏んで導入（コードをプッシュして自動ビルドする初期段階から、データがGCSに置かれた時点でETL処理→学習処理に入る半自動段階など）を進めていくことができるようで、非常に勉強になりました。</p><h3 id="2-Udemy"><a href="#2-Udemy" class="headerlink" title="2. Udemy"></a>2. Udemy</h3><p>Udemyにて模擬試験を購入し、Coursera終了後はひたすらこちらをやっていました。<br><a href="https://www.udemy.com/course/google-cloud-professional-machine-learning-engineer-2022/">Google Cloud Professional Machine Learning Engineer *2022*</a></p><h4 id="良さみ-1"><a href="#良さみ-1" class="headerlink" title="良さみ"></a>良さみ</h4><ul><li>試験問題の雰囲気がわかる。<ul><li>問題の出題形式が網羅されており、大体こんな感じで問題出されるんだなーというのが掴めます。</li></ul></li><li>回答の解説が秀逸<ul><li>間違えた問題の解説がしっかりしており、Google公式のリンクも付いているので勉強になります。</li></ul></li><li>英語の勉強になる。<ul><li>こちらの教材でわからない単語はしっかり潰しておきましょう。</li></ul></li></ul><h4 id="つらみ-1"><a href="#つらみ-1" class="headerlink" title="つらみ"></a>つらみ</h4><ul><li>あくまで<strong>模擬試験</strong><ul><li>こちらの模擬試験と本試験の出題内容は全く別物になります。</li><li>類似問題はあり、Googleオススメのベストプラクティスを適用するのは同様なので、この模擬試験やっておいて損はないです。</li></ul></li><li>本試験は<strong>60問</strong><ul><li>模擬試験は50問になっています。</li><li>もうこれは調べてなかった自分が悪いのですが、受験開始して60問ということを知りました…</li></ul></li></ul><h4 id="感想-1"><a href="#感想-1" class="headerlink" title="感想"></a>感想</h4><p>Udemyの模擬問題集をやったことでどういう形式で問題を出されるのかという部分で良い練習となりました。<br>問題内容から要望を汲み取ってGCPでの実装を提案するというのは模擬問題集も実際の試験も変わりはないです。<br>以下のような言い回しから意図をくみ取るのが大切だと思いました。</p><ul><li>「コストを最小にしたい」</li><li>「インフラの管理コストは抑えたい」</li><li>「マネージドサービスで」</li><li>「最小限のエフォートで」</li><li>「早く実装したい」</li><li>「機械学習のバックグラウンドがなく、SQLは使える」</li><li>…etc.</li></ul><h2 id="リモート受験について"><a href="#リモート受験について" class="headerlink" title="リモート受験について"></a>リモート受験について</h2><p>今回、テストセンターで受けずにリモート環境での受験を体験してみました。<br>注意点としては以下になります。</p><h3 id="受験前"><a href="#受験前" class="headerlink" title="受験前"></a>受験前</h3><ul><li><p>アカウントの作成</p><ul><li><strong>言語別でアカウントの作成が必要</strong>です。</li><li>自分はPCAを日本語で受けたので、英語試験用にアカウントをもう一つ作りました。</li></ul></li><li><p>受験時間の予約</p><ul><li>テストセンターと違い、早朝や夜遅くにも受けることができます。</li><li>英語を読むのに体力使うと思ったので朝9時の一番元気な時間に予約しました😂</li></ul></li><li><p>受験時間はJST（日本時間）</p><ul><li>受験予約時にタイムゾーンが書かれていないのですが、ちゃんとJSTでした。</li><li>受験時間確定時にタイムゾーン出てくるので、そこで念のため確認してください。</li></ul></li><li><p>事前に専用のブラウザをダウンロード・インストールしておく</p><ul><li>当日は専用ブラウザから試験を受けます。</li><li>受験用のページから事前にダウンロードすることができます。</li></ul></li><li><p>顔認証用の画像を事前に撮っておく。</p><ul><li>こちらも受験用のページから事前に撮影することができます。</li></ul></li></ul><h3 id="受験当日"><a href="#受験当日" class="headerlink" title="受験当日"></a>受験当日</h3><ul><li>バックグラウンドソフトは切っておく。<ul><li>Slack等通知がきそうなものは切っておきましょう。</li></ul></li><li>机の上、周辺は何も置かない。<ul><li>筆記用具❌</li><li>デュアルディスプレイ❌</li><li>本❌</li><li>スマホ❌</li><li>水❌</li><li>ラップトップ用スタンドデスクはOKでした。</li></ul></li><li>PCに差し込まれているUSBは最小限とする。<ul><li>特に注意は受けませんでしたが、マウスのみ挿すようにしていました。</li><li>盗聴・盗撮などに敏感らしく、念のための対応です。</li></ul></li><li>大きめの手鏡を用意しておく。<ul><li>足元やPC周辺を監視員の人に見せるためにスマホのカメラ or 手鏡で写すように言われるのですが、スマホは画面が小さく大きめの手鏡で見せたほうがスムーズです。</li></ul></li><li><strong>PCが安定動作することを確認する。</strong><ul><li>これが一番大事です。</li><li>Surface Pro4で受験したのですが、受験中に<a href="https://muichinoblog.com/gadget/sur4-flick">初期不良の画面揺れが発生</a>し、40問くらい問題文が揺れて目が死にました。</li></ul></li><li>監視員とのチャットが英語<ul><li>難しい内容は聞かれないですが、質問によっては「I’m ready.」「Just a moment, please.」と回答できるようにしておきましょう。</li><li>質問例：「トイレ行く時間あげるから帰ってきたら教えてね」「スマホもう使わないから手の届かないところおいてね」など</li></ul></li></ul><h3 id="試験終了後"><a href="#試験終了後" class="headerlink" title="試験終了後"></a>試験終了後</h3><ul><li>試験終了後すぐに結果がでる。<ul><li>「Pass」で合格、「Fail」で不合格です。</li><li>ここはテストセンターと同じですね。</li></ul></li><li>アンケートのお願いがくる。<ul><li>アンケートは受けても受けなくてもどちらでもOKです。</li><li>自分は画面揺れで諦めました。</li></ul></li></ul><h2 id="受験した感想"><a href="#受験した感想" class="headerlink" title="受験した感想"></a>受験した感想</h2><p>GCPにおけるML&#x2F;DLのベストプラクティスやMLOpsについて網羅的に学習する良い機会になりました。<br>受験前は「BigQueryMLなにそれ？おいしいの？」みたいな状態でしたが、GCPのML&#x2F;DLサービスの棲み分けはある程度理解できました。もし業務で使うことがあればすんなり入れるのかなと思います。</p><p>また、GoogleはML&#x2F;DLのサービス（前処理からデプロイまで全て）に力入れているんだなーということを学習と受験の過程で体感することができました。GoogleのAIスゴイ！</p><p>これからGCPでMLOpsやっていこう・やっていきたい方には学習のきっかけとなる良い試験だと思います（合格特典ももらえますし）。ぜひ受験してみてください！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/">機械学習</category>
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/">合格記</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%B3%87%E6%A0%BC/">資格</category>
      
      <category domain="https://future-architect.github.io/tags/MachineLearning/">MachineLearning</category>
      
      
      <comments>https://future-architect.github.io/articles/20220930a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AGPLが適する場所、適さない場所</title>
      <link>https://future-architect.github.io/articles/20220929a/</link>
      <guid>https://future-architect.github.io/articles/20220929a/</guid>
      <pubDate>Wed, 28 Sep 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;前回翻訳した&lt;a href=&quot;/articles/20220922a/&quot;&gt;AGPLを理解する:</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>前回翻訳した<a href="/articles/20220922a/">AGPLを理解する: もっとも誤解されたライセンス</a>では、実体以上に強いライセンスであると思われているケースについての紹介がありました。</p><p>もちろん、使い方次第ではアプリケーションコードの開示が必要になってしまうケースもあるかと思います。前回のエントリーはわかりやすい切り口で書いてくれていますが、いくつか、やはりプロダクトコード側へ制約が出るケースが考えられるので、その点についてまとめてみます。</p><p>AGPLの特徴を2行でまとめると以下の通りかと思います</p><ul><li>ネットワーク越しに利用することも配布とみなし、AGPLで書かれたアプリケーションのソースにアクセスする権利が伝わる</li><li>ネットワーク越しの利用することはリンクではないため、ネットワークで通信するアプリケーションのライセンスをAGPLにする必要はない</li></ul><img src="/images/20220929a/agpl1.png" alt="" width="830" height="161" loading="lazy"><p>配布とリンクがごっちゃにされるのが、よくされる誤解の原因かと思います。もしネットワークアクセスでもライセンスが伝播するなら、商用のルーターとかそこで動くOSのネットワークスタックとか、ブラウザとかもAGPLにしないといけない、ということになります。</p><h1 id="AGPLもリンクではGPL同等"><a href="#AGPLもリンクではGPL同等" class="headerlink" title="AGPLもリンクではGPL同等"></a>AGPLもリンクではGPL同等</h1><p>AGPLを使った場合に、アプリケーションコードの開示が必要かつアプリケーションもAGPLにしなければならないケースは、AGPLのコードをリンクする場合です。たとえば、ライブラリとして提供されるものや、サーバー製品のドライバやSDKがAGPLの場合、もしくはAGPLのアプリケーションの一部を取り出して組み込んだ場合は、アプリケーションもAGPLになります。これはAGPLというよりも、そこにリンクするコードの扱いに関しては今まであったGPLとほぼ同一条件になります。</p><p>なお、全利用者というのは、社内限定利用であれば社内ユーザーへの開示だけなので、前回翻訳したエントリーで説明されているように、AGPLになったからといって全世界に公開しないといけないということはありません。</p><img src="/images/20220929a/agpl2.png" alt="" width="540" height="211" loading="lazy"><h1 id="ライブラリ-x2F-SDK-x2F-ドライバでは使わない方が無難"><a href="#ライブラリ-x2F-SDK-x2F-ドライバでは使わない方が無難" class="headerlink" title="ライブラリ&#x2F;SDK&#x2F;ドライバでは使わない方が無難"></a>ライブラリ&#x2F;SDK&#x2F;ドライバでは使わない方が無難</h1><p>結論としては、ライセンスを選択できる自由があったとしてもAGPLを適用するのは、単独で動くサーバーアプリケーションとしての形態で提供するソフトウェアに限定した方が良さそうです。</p><p>アプリケーションが(A)GPLになるということは、プロプラなライブラリとのリンクもできなくなってしまうため、利用者の自由度が下がってしまいます。そのような状況で今まで良く使われていたのがLGPLというライセンスです。LGPLのライブラリとリンクするアプリケーションはコードの公開は不要です。ですが、残念ながらAGPLのLGPL版というのはありません。AGPLのように成果物に対する修正を（ネットワーク越しの配布でも）公開して欲しい、かつ広く使って欲しいというニーズを満たすのはAGPLで実現するのは簡単ではないことがわかります。</p><p>良く知られているように、MongoDBも、本体がAGPLだった時代から、SDKやドライバーはApache2を採用していました。</p><p>なお、LGPLですが、LGPLはリンク対象となるコードには何も制限がないかというとそんなことはなく、いくつかのルールがあります。例えばリバースエンジニアリングを許可しなければならない、またLGPLを使うアプリケーションユーザーが、LGPLのコード部分だけを修正して自分で再ビルドできるようにしなければならない、というものです。実際、これを守る難易度はやや高い気がします。</p><h1 id="AGPLのツールが生成するソース-x2F-AGPLのソースから作られるソースコードも除外した方が無難"><a href="#AGPLのツールが生成するソース-x2F-AGPLのソースから作られるソースコードも除外した方が無難" class="headerlink" title="AGPLのツールが生成するソース&#x2F;AGPLのソースから作られるソースコードも除外した方が無難"></a>AGPLのツールが生成するソース&#x2F;AGPLのソースから作られるソースコードも除外した方が無難</h1><p>AGPL製ツールが何かしらのソースコードを生成する場合もあるかと思います。何も注記がなければこの生成されるコードもAGPLになると思います。だいたい生成されたソースの実行には何かしらのランタイムが必要で、そのランタイムがAGPLだからです。そのため、何かしらの「生成を行う」ツールや一部ライブラリは<a href="https://ja.wikipedia.org/wiki/GPL%E3%83%AA%E3%83%B3%E3%82%AF%E4%BE%8B%E5%A4%96">例外条項</a>を設けています。GCCやBisonは不自由なライセンス（とフリーソフトウェア派の人が呼ぶクローズドソース）とのリンクを許可しています。</p><p>この辺りの意図とかが書かれている貴重な資料としてはBisonの使用条件のドキュメントがあります。</p><ul><li><a href="https://www.gnu.org/software/bison/manual/html_node/Conditions.html">Bisonの使用条件</a></li></ul><p>サーバーアプリケーションがOpenAPIとかGraphQLとかgRPCのAPI定義を用意していて、クライアントがそれをもとにクライアントを生成して使う場合は悩ましいですね。設定からソースの生成はある種のコンパイルであり、生成されるソースもGPL系であれば同じライセンスになりそうな気がするので、これらの設定ファイルもドライバとみなして、別ライセンス化するか、例外を規定しておく方が無難な気がします。</p><h1 id="CLIツールもあまりAGPLにする必要は（本来は）なさそう"><a href="#CLIツールもあまりAGPLにする必要は（本来は）なさそう" class="headerlink" title="CLIツールもあまりAGPLにする必要は（本来は）なさそう"></a>CLIツールもあまりAGPLにする必要は（本来は）なさそう</h1><p>僕とDeNAでもフューチャーでも同僚だったknqyf263さんが書いてめちゃくちゃバズった記事が以下のやつです。</p><ul><li><a href="https://knqyf263.hatenablog.com/entry/2019/08/20/120713">趣味で作ったソフトウェアが海外企業に買われるまでの話</a></li></ul><p>Trivyは当初AGPLで、買収後にApache2になったと記憶しています。</p><p>本来はこの手のCLIツールはAGPLにしても、単にツールとして単独実行する場合はネットワーク越しに直接叩くことをしないため、AGPLにしてもソースを提供する義務は発生しなくなってしまいます。</p><p>とはいえ、エージェントとしてこの手の定期的に実行して情報収集するツールで、実行頻度をネットワーク越しに制御したり、結果を閲覧するウェブサービスを提供する場合は、下記の説明を解釈すればTCPで繋がっているサービスとかとなんら変わらず、AGPLとしての配布の条件にマッチする気がします。</p><p><a href="https://gpl.mhatta.org/agpl.ja.html">GNU Affero 一般公衆利用許諾書の八田さんの翻訳の引用</a></p><blockquote><p>改変したバージョンは、そのバージョンとリモートでコンピュータネットワークを介し対話的にやりとりする（あなたのソフトウェアがそのようなインタラクションをサポートしている場合）すべてのユーザに対して、(中略)『対応するソース』を受け取る機会を明示的に与えなければなければならない。</p></blockquote><h1 id="商用ライセンスとGPL系ライセンスのデュアルライセンス"><a href="#商用ライセンスとGPL系ライセンスのデュアルライセンス" class="headerlink" title="商用ライセンスとGPL系ライセンスのデュアルライセンス"></a>商用ライセンスとGPL系ライセンスのデュアルライセンス</h1><p>近年ではコミットの前に<a href="https://en.wikipedia.org/wiki/Contributor_License_Agreement">Contributor License Agreement(CLA)</a>を締結してコードを自由にする権利とともにPull Requestを受け付けるというのが多くなってきました。これはオリジナルの著者にライセンスを変更できる権限を残した状態でコミットをしてもらうためのものです。これにより、GPLなコードであっても、状況が変わって商用サービス化したい場合に自由にできるようになります。MongoDBが商用ライセンスとAGPLのデュアルライセンスを維持したり、Server Side Public LicenseやBusiness Source Licenseで出し直すことができているのはこれによるものです。</p><p>GPL系ライセンスとして公開したコードを別ライセンスで出し直すのは、例え開発者本人であっても容易ではありません。多くの人のコントリビュートがあったとして、送られてきたパッチのコード片もGPL系ライセンスのはずで、ライセンス変更にあたってはコードにコミットした人の許可が必要とされています。MeCabが以前、AppleのiPhoneにバンドルされる前に、Appleから要望を受けてライセンスを変更したという話がありました。ブログはちょっとネガティブな方向性ですが・・・</p><ul><li><a href="http://chasen.org/~taku/blog/archives/2010/04/mecabiphoneosx.html">MeCabがiPhone,OSXに載っていると言うのは止めようと思う</a></li></ul><p>SaaSタダ乗り問題をばっちり解決するライセンスというのはまだみんな模索している感じはありますが、いざというときのライセンス変更を考えると、OSS開発ではCLAを用意しておくのは業務開発では必要かもしれません。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>AGPLのように成果物に対する修正を（ネットワーク越しの配布でも）公開して欲しい、かつ広く使って欲しいというニーズを満たすには単独動作するサーバーアプリケーション、およびサーバーに組み込みで使われるエージェント形式のCLIツール等で利用するのがベストかな、と思います。その形態で配布されているアプリケーションであれば、そのAGPLのコードを修正しない限りは別にコード公開とかはないため、前回のエントリーで説明された範囲で利用できます。</p><p>LGPL版のAGPLがないということで、直接リンクして使う利用方法では、従来のGPLと同じように、リンクするコードもライセンスをAGPLにする必要があります。ここは別のライセンスを提供するか例外とした方が良さそうです。</p><p>OSSを開発する個人としては、AGPLにはTrivyのように一攫千金チャンスもありつつ、広く使ってもらえるという点が魅力的かと思います。一方で、企業開発するコードでAGPLにするには、CLAにして、自分の方でコードのライセンスを自由にして、AGPLと自社でプロプラコードとして使うためのデュアルライセンスを許可しつつ、パッチを受け入れるといったことが必要になるかもしれません。</p><p>AGPLアレルギー的な反応をする人が周りにも多かったので、前回のエントリーの翻訳をしつつ、今回のまとめ記事も書いてみました。AGPLを正しく理解して、面白いソフトウェアが日本からももっと出てきつつ、開発した人がもっとフィーチャーされるようになって欲しいな、と思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/OSS/">OSS</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%A9%E3%82%A4%E3%82%BB%E3%83%B3%E3%82%B9/">ライセンス</category>
      
      <category domain="https://future-architect.github.io/tags/AGPL/">AGPL</category>
      
      
      <comments>https://future-architect.github.io/articles/20220929a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AGPLを理解する: もっとも誤解されたライセンス</title>
      <link>https://future-architect.github.io/articles/20220922a/</link>
      <guid>https://future-architect.github.io/articles/20220922a/</guid>
      <pubDate>Wed, 21 Sep 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220922a/open-sign-g123296793_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;426&quot;&gt;


&lt;p&gt;このエントリーは&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220922a/open-sign-g123296793_640.jpg" alt="" width="640" height="426"><p>このエントリーは<a href="https://twitter.com/ohhsayan">Sayan</a>さんによる<a href="https://medium.com/swlh/understanding-the-agpl-the-most-misunderstood-license-86fd1fe91275">Understanding the AGPL: The Most Misunderstood License</a>の日本語訳になります。</p><hr><p>オープンソースの出現は、ソフトウェア産業全体を一変させました。しかし、オープンソースのコードを使って誰が何をできるかを管理することは課題でしたし、今も解決していません。オープンソースライセンスはそこに救いの手を差し伸べました。しかし、常に次のことを忘れないでください：石のない土地はなく、骨のない肉はありません。<a href="https://opensource.org/licenses/alphabetical">OSI（オープンソースイニシアチブ: オープンソースを促進することを目的とする組織）が承認したライセンスは80以上</a>あり、その数はさらに増加しています。それぞれのライセンスには利点と欠点があるため、オープンソースの開発者は自分のプロジェクトにあったライセンスを選ぶのは簡単ではありません。<a href="https://opensource.org/licenses/AGPL-3.0">Affero General Public License</a>の略称であるAGPLはこれらのライセンスの1つで、より具体的には強い<a href="https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%94%E3%83%BC%E3%83%AC%E3%83%95%E3%83%88">コピーレフト・ライセンス</a>であり、間違いなく最も誤解されているライセンスの一つでしょう。</p><h1 id="なぜ別のGPLが必要なのか"><a href="#なぜ別のGPLが必要なのか" class="headerlink" title="なぜ別のGPLが必要なのか?"></a>なぜ別のGPLが必要なのか?</h1><p>待って、待って? もう1つの<em>GPL</em>? うーん、そうです。AGPLはGPLは以下の内容が第13節に追加されている点を除くとほとんど同じです。</p><p><a href="https://gpl.mhatta.org/agpl.ja.html">八田真行さんのAGPLライセンス訳から引用</a></p><blockquote><p>本許諾書に含まれる他の条件に関わらず、あなたが『プログラム』を改変した場合、改変したバージョンは、そのバージョンとリモートでコンピュータネットワークを介し対話的にやりとりする（あなたのソフトウェアがそのようなインタラクションをサポートしている場合）すべてのユーザに対して、ネットワークサーバから、あなたのバージョンに『対応するソース』にアクセスする手段を、無償、かつソフトウェアのコピーを円滑に行う上で標準的、慣習的に用いられる方法で提供することにより、ユーザが『対応するソース』を受け取る機会を明示的に与えなければなければならない。[…]</p></blockquote><p>これは1つの直接的な意味を持ちます。もしあなたがユーザにネットワークを通じてAGPLでライセンスされたソフトウェアにアクセスさせるならば、それは配布の一形態と見なすということです。これは、GPLが見落としていた点です。クラウドがブームになる時代となり、<a href="https://ja.wikipedia.org/wiki/SaaS">SaaS</a>は爆発的に普及し、開発者とベンダーはソフトウェアを直接配布する代わりに、ソフトウェアをデジタルで配布するようになりました。</p><p>ボブが開発したバイナリアプリケーション（ライブラリではない）を例にとって考えてみよう。表現の都合上、これをXBinと呼ぶことにします。このアプリケーションは、ウェブアプリがリソースを使い切ったときに、自動的に追加のリソースを割り当てる機能があります(追記: これはサンプルです)。</p><h2 id="ステップ1：ボブがGPLを使う"><a href="#ステップ1：ボブがGPLを使う" class="headerlink" title="ステップ1：ボブがGPLを使う"></a>ステップ1：ボブがGPLを使う</h2><p>ボブはGPLを使うことにしました。ユーザーはみな、バグを見つけたり、機能を追加してほしいときはいつでも、彼にパッチを送ることができ、ボブにとっては最高のライセンスでした。ボブは喜んで彼らのコードをマージし、幸せな気分に浸っていました。しかしある日、彼は大手クラウドプロバイダーである<em>ProviderX</em>が、XBinにより多くの機能を追加した上で、自社のプロジェクト管理スイートの一部として提供していることを知りました。しかし、XBinを改善するためのパッチを<em>ProviderX</em>に送ってもらうことを望んでいたボブには嬉しくありません。GPLがネットワークを通じた配布を考慮していないため、今はボブには合法的に何かを行うことはできません。</p><h2 id="ステップ2-ボブがAGPLに切り替える"><a href="#ステップ2-ボブがAGPLに切り替える" class="headerlink" title="ステップ2: ボブがAGPLに切り替える"></a>ステップ2: ボブがAGPLに切り替える</h2><p>GPLライセンスの欠点に気づいたボブは、次のリリースからAGPLに切り替えました。これで、<em>ProviderX</em>が何か変更を加え、それをサービスとしてユーザに配布したときは、いつでも、同じライセンスのもとでソース形式で変更を利用できるようにしなければならなくなりました。したがって、ボブは<em>ProviderX</em>によってなされた改良を彼自身のソースコードにマージすることができるのです。これはフェアプレーです。それ以来、<strong>ボブはずっと幸せにコーディングをしています。</strong></p><h1 id="受け入れの問題"><a href="#受け入れの問題" class="headerlink" title="受け入れの問題"></a>受け入れの問題</h1><p>しかし、クラウドの大物はこれが気に入りませんでした。いくつかの会社はAGPLに対して独自のポリシーを持っていて、AGPLの採用や使用に反対し、有害だと声を上げる者まで出始めました。しかし、AGPLの採用はいくつかのSaaSプロバイダーの間で増え続けており、DBaaSプロバイダーは最も積極的に適用しています。ほとんどの人が見逃していますが、AGPLはネットワーク配布も配布としている点だけが異なるGPLのスーパーセットに過ぎません。</p><p>さて、AGPLでライセンスされたバイナリを使う場合の賛成と反対を見てみましょう。私のプロジェクト、Skytableを例にとって説明します。</p><h2 id="シナリオ1-改変せずにAGPLバイナリを使う"><a href="#シナリオ1-改変せずにAGPLバイナリを使う" class="headerlink" title="シナリオ1: 改変せずにAGPLバイナリを使う"></a>シナリオ1: 改変せずにAGPLバイナリを使う</h2><p>再びボブに登場してもらいましょう。しかし、今回は逆にAGPLライセンスのデータベースであるSkytableをデータの保存に使う、ウェブアプリを構築しようとしています。彼のアプリは、人々がサインアップして自分の好きな本を保存することができます。このデータはAGPLライセンスのデータベースに保存されます。</p><p><strong>ボブの悩み:</strong> 自分のアプリのコードをオープンソースにしなければならないのか？<br><strong>答え:</strong> いいえ！ AGPLはボブのアプリとは何の関係もありません! ボブはデータベースに手を加えておらず、単にバイナリ形式で「そのまま」使っているだけなので、彼は自分のアプリを改良する以外に何もする必要がありません!</p><h2 id="シナリオ2-改変されたAGPLバイナリを使う"><a href="#シナリオ2-改変されたAGPLバイナリを使う" class="headerlink" title="シナリオ2: 改変されたAGPLバイナリを使う"></a>シナリオ2: 改変されたAGPLバイナリを使う</h2><p>ボブは今、Skytableがクエリータイプ<strong>X</strong>を持っていればもっと良くなり、自分の開発がもっと便利になると気づきました。そこで彼は、ソースコードをダウンロードし、それを修正しました。今、彼は<strong>派生物</strong>(derivative work)と呼ばれるものを作りましたが、それを直接配布したわけではありません。</p><p><strong>ボブの悩み:</strong> 自分のアプリのコードをオープンソースにしなければならないのか？<br><strong>答え:</strong> いいえ！ ユーザーが直接データベースにアクセスできるようにしていないので、彼がデータベースに加えた変更を返す必要すらありません。また、彼のアプリのコードは、彼自身のものであることに変わりはありません。</p><h2 id="シナリオ3-プライベートで変更したバージョンを使う"><a href="#シナリオ3-プライベートで変更したバージョンを使う" class="headerlink" title="シナリオ3: プライベートで変更したバージョンを使う"></a>シナリオ3: プライベートで変更したバージョンを使う</h2><p>ボブの職場の人々は、Skytableの修正版を気に入り、職場内で使いたいと考えています。ボブの同僚は、職場のユーザーが自分自身を認証できるように、Skytableに認証機能をさらに追加しました。しかし、このコードはSkytableの作者（つまり、私です！）に返すのは安全ではありません。</p><p><strong>ボブの悩み:</strong> 変更内容を公開しなければならないのでしょうか？<br><strong>答え:</strong> いいえ！ ボブは自分の組織内でのみ使っているだけなので、他の人に配布しているわけではありません。そのようなAGPLソフトウェアの複製は、変更を開示することなく、保持することができます。</p><p>これらの事例を見ていけば十分でしょう。あなたのアプリケーションやサービスが、AGPLバイナリをバックエンドとして使っていたとしても、AGPLはそれには興味を持ちません。しかし、その代わりにAGPLでライセンスされたバイナリにあなたが加えた変更が何かという点のみに興味を持っているということをはっきりと理解できたと思います。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>1行にシンプルまとめると、もしあなたがAGPLでライセンスされたバイナリを「そのまま」、何の変更も加えずに使うのであれば、あなたはあまり考える必要はありません。自分自身のコードにフォーカスすべきです。しかし、もしあなたがAGPLのコードに変更を加えて配布する場合は、あなたが行った改変をソースコードとしてユーザに提供することで、法的に正しい状態を維持できます。</p><p>あなたがコメント欄を荒らす前にひとつお伝えすると、これは<strong>法的なアドバイスではありません</strong>。もしあなた（や私自身）を誤解させるようなところがあれば、遠慮なく訂正してください。</p><h2 id="関連の読み物"><a href="#関連の読み物" class="headerlink" title="関連の読み物"></a>関連の読み物</h2><ul><li><a href="https://techcrunch.com/2019/05/30/lack-of-leadership-in-open-source-results-in-source-available-licenses">Lack of leadership in open source results in source-available licenses</a></li><li><a href="https://haacked.com/archive/2006/07/26/CodeAvailableVsOpenSourceVsFreeSoftware.aspx/">Source Available vs Open Source vs Free Software</a></li><li><a href="https://thenewstack.io/the-amazon-effect-on-open-source/">The Amazon Effect on Open Source</a></li></ul><p>もしあなたが気に入ったなら、この記事を👋🏻してシェアしてください。また、<a href="https://github.com/skytable/skytable">GitHubのSkytable</a>もご覧ください。</p><hr><p>↑ここまでが原文を翻訳したものです。</p><p>ソフトウェアを開発するのにも、趣味で開発する以外は無料ではできず、霞を食べて生きていけない以上、業務でやる場合にはコストが発生します。本業のついでに作られた直接飯の種にならないソフトウェアであれば業務で開発したコードをOSS化するのは比較的社内調整しやすいとは思いますが、ビジネスのコアになりえる高度なソフトウェアをOSSにしながら開発する場合、よく使われるのがGPL系ライセンスやBSL(Business Source License)です。ですが、GPL系ライセンスの中のAGPLは誤解している人が多いな、と感じることが多かったので、説明用のエントリーを書こうと思ったのですが、言いたいことをばっちり書いてくれているエントリーがありましたので、翻訳の許諾をとって翻訳しました。より多くの企業がビジネスのコアとしてOSSを開発するきっかけになれば、と思います。</p><p>アイキャッチ画像は<a href="https://pixabay.com/ja/users/pexels-2286921/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1836961">Pexels</a>による<a href="https://pixabay.com/ja//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1836961">Pixabay</a>からを利用させていただきました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/OSS/">OSS</category>
      
      <category domain="https://future-architect.github.io/tags/%E7%BF%BB%E8%A8%B3/">翻訳</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%A9%E3%82%A4%E3%82%BB%E3%83%B3%E3%82%B9/">ライセンス</category>
      
      <category domain="https://future-architect.github.io/tags/AGPL/">AGPL</category>
      
      
      <comments>https://future-architect.github.io/articles/20220922a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>たのしいGoリフレクション: 変数アサイン</title>
      <link>https://future-architect.github.io/articles/20220921a/</link>
      <guid>https://future-architect.github.io/articles/20220921a/</guid>
      <pubDate>Tue, 20 Sep 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220921a/goreflection.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;482&quot;&gt;

&lt;p&gt;The Go gopher was designed by &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220921a/goreflection.png" alt="" width="800" height="482"><p>The Go gopher was designed by <a href="https://reneefrench.blogspot.com/">Renée French</a></p><p>一般に、リフレクションは黒魔術と呼ばれることもあります。Goでは「リフレクションよりはコード生成」と長く言われてきました。ジェネリクスも一般的にはそのリフレクションとコード生成の間を埋めるもので、やはりリフレクションの使用を減らすためのもの（リフレクションではできない静的型チェックもできますが）です。</p><p>ですが、リフレクションでしか実現できないこともあります。そのため、誰かが人柱にならなければならないこともあります。リフレクションについては次のサイトがよくまとまっています。</p><ul><li><a href="https://www.how2go.dev/docs/advanced/reflect/">How to GO: リフレクション</a></li></ul><p>ですが、やってみると予想外のパニックがいっぱい出てきます。まあパニックといっても、スタックトレースとかがきちんと出てくれるので、昔のC++と比べるとだいぶ優しい世界ですが。</p><p>構造体のタグを見て、データを取り出したり、データを構造体に設定したりする、encoding&#x2F;jsonのようなライブラリを自分で作りたい時のヘルパーライブラリとして作ったのが以下のものです。Goで2WaySQLを実現する<a href="https://github.com/future-architect/go-twowaysql">github.com&#x2F;future-architect&#x2F;go-twowaysql</a>で、パラメータを構造体から取り出したり、実行結果を構造体にマッピングするところで使われています。この関数は独立した関数としてパッケージ外からも使えるようにしています。</p><ul><li><a href="https://pkg.go.dev/github.com/future-architect/tagscanner@v1.0.1/runtimescan#FuzzyAssign">runtimescan.FuzzyAssign()</a></li></ul><p>これを作ったのはだいぶ前ですが（最近future-architect orgに移動してきた）、最近ちょっとバグ修正したりして、またハマったりしたので、また将来メンテするときのためのメモとして残しておきます。</p><h1 id="ポインタがnilに初期化されていると型情報の取り方に注意が必要"><a href="#ポインタがnilに初期化されていると型情報の取り方に注意が必要" class="headerlink" title="ポインタがnilに初期化されていると型情報の取り方に注意が必要"></a>ポインタがnilに初期化されていると型情報の取り方に注意が必要</h1><p><code>reflect.Value</code>がすべての基本となる型です。</p><ul><li><code>Elem()</code>メソッド→ポインタのデリファレンス。<code>*int</code>の<code>*</code>の記号</li><li><code>Type()</code>メソッド→型情報を取得</li></ul><p><code>*int</code>の変数から、<code>int</code>という型情報を取り出すのは、<code>Type()</code>→<code>Elem()</code>でも<code>Elem()</code>→<code>Type()</code>でもどちらでも到達できるのですが、変数が<code>nil</code>の場合だけ先に<code>Elem()</code>を呼ぶとパニックになります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// nilじゃない</span></span><br><span class="line"><span class="keyword">var</span> i *<span class="type">int</span> = &amp;[]<span class="type">int</span>&#123;<span class="number">1</span>&#125;[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// nil</span></span><br><span class="line"><span class="keyword">var</span> j *<span class="type">int</span></span><br><span class="line"></span><br><span class="line">vi := reflect.ValueOf(i)</span><br><span class="line">fmt.Println(vi.Type().Elem())</span><br><span class="line">fmt.Println(vi.Elem().Type())</span><br><span class="line"></span><br><span class="line">vj := reflect.ValueOf(j)</span><br><span class="line">fmt.Println(vj.Type().Elem())</span><br><span class="line">fmt.Println(vj.Elem().Type()) <span class="comment">// panic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代入時はポインタでないといけない"><a href="#代入時はポインタでないといけない" class="headerlink" title="代入時はポインタでないといけない"></a>代入時はポインタでないといけない</h1><p>変数に代入するときはポインタを渡す必要があります。ポインタの<code>reflect.Value</code>の<code>Elem()</code>と、即値の<code>reflect.Value</code>は、どちらも<code>int</code>ですが、代入が可能かどうかが違います。playgroundとかで試しながらやっていて「いけるはずなのに」と思ってだいぶハマったポイントです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line"></span><br><span class="line">vip := reflect.ValueOf(&amp;i) <span class="comment">// ポインタにしないといけない</span></span><br><span class="line">fmt.Println(vip.Elem().Type(), vip.Elem().CanSet(), vi.Elem().CanAddr())</span><br><span class="line">    <span class="comment">// int true true</span></span><br><span class="line">vip.Elem().SetInt(<span class="number">10</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;i = %d\n&quot;</span>, i)</span><br><span class="line"></span><br><span class="line">vi := reflect.ValueOf(i)</span><br><span class="line">fmt.Println(vi.Type(), vi.CanSet(), vi.CanAddr())</span><br><span class="line">    <span class="comment">// int false false</span></span><br><span class="line">vi.SetInt(<span class="number">20</span>) <span class="comment">// panic</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;i = %d\n&quot;</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>reflect.ValueOf</code>に渡す時に、値渡しになってしまうと上書き不可になってしまうようです。C言語脳とか、Goのメソッドのレシーバーがポインタか値かのイメージでいると、スタックメモリに乗って書き換えは可能だけど、結果は呼び出し元には帰ってこない、みたいな感じを期待しちゃうのですが<code>panic()</code>になります。<code>CanAddr()</code>で、ポインタ取得かのうかどうかも<code>false</code>に。</p><h1 id="構造体も最初がポインタでないとエラーになる"><a href="#構造体も最初がポインタでないとエラーになる" class="headerlink" title="構造体も最初がポインタでないとエラーになる"></a>構造体も最初がポインタでないとエラーになる</h1><p>構造体のメンバーは値型であれば<code>FieldByName()</code>や<code>Field()</code>で取ってきた<code>reflect.Value</code>はポインタではなくてその該当する型になります。前節の変数のポインタ渡しと違って、<code>Elem()</code>は呼ばずに書き換えできるのですが、これも最初の構造体をポインタで渡さないとだめです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="keyword">struct</span>&#123; Name <span class="type">string</span> &#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line">vps := reflect.ValueOf(&amp;s).Elem()</span><br><span class="line">vf := vps.FieldByName(<span class="string">&quot;Name&quot;</span>)</span><br><span class="line">fmt.Println(vf.Type(), vf.CanSet(), vf.CanAddr())</span><br><span class="line"><span class="comment">// string　true true</span></span><br><span class="line">vf.SetString(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">vs := reflect.ValueOf(s)</span><br><span class="line">vf2 := vs.FieldByName(<span class="string">&quot;Name&quot;</span>)</span><br><span class="line">fmt.Println(vf2.Type(), vf2.CanSet(), vf2.CanAddr())</span><br><span class="line"><span class="comment">// string　false false</span></span><br><span class="line">vf2.SetString(<span class="string">&quot;hello&quot;</span>) <span class="comment">// panic</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代入先がポインタ変数でnilの場合は先にnewする"><a href="#代入先がポインタ変数でnilの場合は先にnewする" class="headerlink" title="代入先がポインタ変数でnilの場合は先にnewする"></a>代入先がポインタ変数で<code>nil</code>の場合は先にnewする</h1><p>これはGoで普通にコードを書いていたら当たり前のことですが、リフレクションとして再現する時にちょっと手間取ったところなので。通常はポインタ変数があったときに、ポイント先が無効（nil）なら値の設定はしないのですが、encoding&#x2F;jsonなどはポイント先のメモリを確保した上で値を設定してくれるので、その挙動の再現をしようと思います。</p><p>参照先のメモリが有効であれば、ポインタを値渡しして設定も可能です。</p><p>リフレクションで<code>new</code>するには<code>reflect.New()</code>をします。<code>reflect.Type</code>が必要なので、即値の0から<code>reflect.TypeOf</code>で型情報にしてやっています。</p><p>なお、「代入時はポインタでないといけない」ルールは、元々の変数がポインタ型であっても、今回のように<code>new</code>したインスタンスを割り当てる場合はやはり該当しますので、</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i *<span class="type">int</span> = &amp;[]<span class="type">int</span>&#123;<span class="number">0</span>&#125;[<span class="number">0</span>] <span class="comment">// 初期化済みポインタ変数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初期化済みならポインタ変数の値渡しも可能</span></span><br><span class="line">vip := reflect.ValueOf(i)</span><br><span class="line">fmt.Println(vip.Type().Elem(), vip.Elem().CanSet(), vip.Elem().CanAddr())</span><br><span class="line"><span class="comment">// int false false: ポインタが指す先は代入可能</span></span><br><span class="line">vip.Elem().SetInt(<span class="number">20</span>) <span class="comment">// panic</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;i = %d\n&quot;</span>, *i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> j *<span class="type">int</span> <span class="comment">// ポインタ変数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ポインタ変数のポインタ渡し</span></span><br><span class="line">vjpp := reflect.ValueOf(&amp;j)</span><br><span class="line">fmt.Println(vjpp.Type().Elem(), vjpp.Elem().CanSet(), vjpp.Elem().CanAddr())</span><br><span class="line"><span class="comment">// *int true true: ポインタ変数自体は代入可能</span></span><br><span class="line">fmt.Println(vjpp.Type().Elem().Elem(), vjpp.Elem().Elem().CanSet(), vjpp.Elem().Elem().CanAddr())</span><br><span class="line"><span class="comment">// int false false: ポインタが指す先は代入不可能</span></span><br><span class="line">vjpp.Elem().Set(reflect.New(reflect.TypeOf(<span class="number">0</span>))) <span class="comment">// 初期化</span></span><br><span class="line">fmt.Println(vjpp.Type().Elem().Elem(), vjpp.Elem().Elem().CanSet(), vjpp.Elem().Elem().CanAddr())</span><br><span class="line"><span class="comment">// int true true: 初期化したら代入可能になった</span></span><br><span class="line">vjpp.Elem().Elem().SetInt(<span class="number">20</span>) <span class="comment">// panic</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;j = %d\n&quot;</span>, *j)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> k *<span class="type">int</span> <span class="comment">// ポインタ変数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ポインタ変数の値渡し</span></span><br><span class="line">vkp := reflect.ValueOf(k)</span><br><span class="line">fmt.Println(vkp.Type(), vkp.CanSet(), vkp.CanAddr())</span><br><span class="line"><span class="comment">// *int false false: ポインタ変数自体が代入不可能に</span></span><br><span class="line">vkp.Set(reflect.New(reflect.TypeOf(<span class="number">0</span>))) <span class="comment">// 初期化でpanic</span></span><br><span class="line"><span class="comment">// vjp.Elem().SetInt(20)</span></span><br><span class="line"><span class="comment">// fmt.Printf(&quot;j = %d\n&quot;, *j)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ちょっとした型違いであっても代入は可能"><a href="#ちょっとした型違いであっても代入は可能" class="headerlink" title="ちょっとした型違いであっても代入は可能"></a>ちょっとした型違いであっても代入は可能</h1><p>初めてリフレクションの値の代入をしたときは、変換元と変換先の型を大量に並べた巨大なswitch文を書いてやっていたのですが、型違いであっても<code>reflect.Value</code>の<code>Convert()</code>メソッドで変換できます。panicを防ぐためにあらかじめ<code>CanConvert()</code>メソッドで確認しておくと安全です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> f <span class="type">float64</span></span><br><span class="line"></span><br><span class="line">vfp := reflect.ValueOf(&amp;f)</span><br><span class="line">vft := vfp.Type().Elem()</span><br><span class="line"></span><br><span class="line"><span class="comment">// intはfloat64に変換可能</span></span><br><span class="line">fmt.Println(reflect.ValueOf(<span class="number">10</span>).CanConvert(vft))</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 変換したら設定可能</span></span><br><span class="line">vfp.Elem().Set(reflect.ValueOf(<span class="number">10</span>).Convert(vft))</span><br><span class="line">fmt.Println(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 変換しないとpanic</span></span><br><span class="line">vfp.Elem().Set(reflect.ValueOf(<span class="number">20</span>)) <span class="comment">// panic</span></span><br><span class="line"><span class="comment">// fmt.Println(f)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="でもやっちゃいけないこともある"><a href="#でもやっちゃいけないこともある" class="headerlink" title="でもやっちゃいけないこともある"></a>でもやっちゃいけないこともある</h1><p>数字から文字列への変換はたぶんruneとして扱われて成功しちゃうのですが、一般的にはやりたいことではないと思うので、<code>CanConvert()</code>そのままではなく、除外したい条件も設定する必要があります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s <span class="type">string</span></span><br><span class="line"></span><br><span class="line">vsp := reflect.ValueOf(&amp;s)</span><br><span class="line">vst := vsp.Type().Elem()</span><br><span class="line"></span><br><span class="line"><span class="comment">// intはstringに変換可能？</span></span><br><span class="line">fmt.Println(reflect.ValueOf(<span class="number">1234</span>).CanConvert(vst))</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line">vsp.Elem().Set(reflect.ValueOf(<span class="number">1234</span>).Convert(vst))</span><br><span class="line">fmt.Println(s)</span><br><span class="line"><span class="comment">// Ӓ という文字になってしまう</span></span><br><span class="line"></span><br><span class="line">ik := reflect.TypeOf(<span class="number">0</span>).Kind()</span><br><span class="line"><span class="comment">// この変換を封じるための条件式</span></span><br><span class="line">fmt.Println(reflect.ValueOf(<span class="number">1234</span>).CanConvert(vst) &amp;&amp; !(vst.Kind() == reflect.String &amp;&amp; ((ik == reflect.Int) || (ik == reflect.Uint))))</span><br><span class="line"><span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>同じコードの書き方でも、状況によってうまくいったりいかなかったりということがあって、思ったよりもコードのデバッグに時間がかかってしまったので、整理した結果をまとめました。リファレンスを眺めただけではわからなかった数々の落とし穴です。</p><p><code>Type()</code>を見た時に同じ<code>int</code>となる<code>reflect.Value</code>でも、代入可能なもの、不可能なものがある、というのに気づくまでかなり時間がかかって遠回りをしてきましたが、今では自信を持ってリフレクションが使えるようになりました。</p><ul><li><code>nil</code>のポインタ変数場合は<code>Elem()</code>から<code>Type()</code>はpanicになるので逆の呼び出しが必要</li><li>単体の変数はポインタ渡し。<code>Elem()</code>を呼んでから<code>Set()</code>系メソッドが必要</li><li>構造体のメンバーは値型の場合は<code>Elem()</code>不要</li><li>ポインタ変数への代入はインスタンスを作ってあげる必要がある</li><li>ちょっとした自動型変換はできるが、数値から文字列への変換は要注意</li></ul><p>リフレクションをやる必要がある人は、参考にしてもらえればと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/OSS/">OSS</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%95%E3%83%AC%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3/">リフレクション</category>
      
      <category domain="https://future-architect.github.io/tags/tagscanner/">tagscanner</category>
      
      
      <comments>https://future-architect.github.io/articles/20220921a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Dataflow後編（Dataflowの事前準備からPub/Sub・BigQueryとの連携例まで）</title>
      <link>https://future-architect.github.io/articles/20220920b/</link>
      <guid>https://future-architect.github.io/articles/20220920b/</guid>
      <pubDate>Mon, 19 Sep 2022 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220920b/dataflow_top2.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;663&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220920b/dataflow_top2.png" alt="" width="1000" height="663"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、フューチャーのインターン”Engineer Camp”に参加した平野と申します。<br>今回のインターンでは、Google Cloud Platform (GCP)のサービスとして提供されているDataflowについて調査し、その仕組みや使い方についてこの技術ブログにまとめることに取り組みました。</p><p>フューチャーのインターンについては<a href="/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/">こちら</a>をご覧ください！</p><p>今回の記事は前編・後編に分かれており</p><ul><li>前編:<ul><li>Dataflowの概要</li><li>Apache Beamの概要・内部的な仕組み</li><li>Apache Beamのコードの書き方</li></ul></li><li>後編：<ul><li>Dataflowを使う上での事前準備と基本的な使い方</li><li>GPUを使う上での事前準備と基本的な使い方</li><li>Pub&#x2F;Sub・BigQueryとの連携例</li></ul></li></ul><p>という構成になっています。前編は<a href="/articles/20220920a/">こちら</a>。</p><h1 id="Datflowの事前準備と基本的な使い方"><a href="#Datflowの事前準備と基本的な使い方" class="headerlink" title="Datflowの事前準備と基本的な使い方"></a>Datflowの事前準備と基本的な使い方</h1><p>Dataflowを使うための事前準備からパイプライン実行までの一連の流れについて説明します。以下の手順で進めます。</p><ol><li>APIの有効化</li><li>IAMの設定</li><li>Apache Beam SDKのインストール</li><li>Cloud Storageバケットの作成</li><li>Dataflow上でパイプラインを実行</li></ol><p>なお、以降の</p><ul><li><a href="#dataflow%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8Bgpu%E3%81%AA%E3%81%97ver">Dataflowの使用例（GPUなしver.）</a></li><li><a href="#dataflow%E3%81%A7gpu%E3%82%92%E4%BD%BF%E3%81%86%E9%9A%9B%E3%81%AE%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99%E3%81%A8%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E3%81%84%E6%96%B9">DataflowでGPUを使う際の事前準備と基本的な使い方</a></li><li><a href="#dataflow%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8Bgpu%E3%81%82%E3%82%8Aver">Dataflowの使用例（GPUありver.）</a></li><li><a href="#%E4%BB%96%E3%81%AEgcp%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%A8%E3%81%AE%E9%80%A3%E6%90%BA%E3%81%A8%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%9F%E3%83%B3%E3%82%B0%E5%87%A6%E7%90%86">他のGCPサービスとの連携とストリーミング処理</a></li></ul><p>では、ここで説明する<a href="#api%E3%81%AE%E6%9C%89%E5%8A%B9%E5%8C%96">APIの有効化</a>、<a href="#iam%E3%81%AE%E8%A8%AD%E5%AE%9A">IAMの設定</a>、<a href="#cloud-storage%E3%83%90%E3%82%B1%E3%83%83%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90">Cloud Storageバケットの作成</a>ができている前提で話を進めています。</p><h2 id="APIの有効化"><a href="#APIの有効化" class="headerlink" title="APIの有効化"></a>APIの有効化</h2><p>Compute Engine API, Dataflow API, Cloud Storage APIとその他必要な（連携させたい）APIを有効化します。APIの有効化はコンソール画面上部にある検索窓から有効化したいAPIを検索すれば簡単に有効化できます。</p><h2 id="IAMの設定"><a href="#IAMの設定" class="headerlink" title="IAMの設定"></a>IAMの設定</h2><p>APIを有効化するとIAMに<strong>Compute Engine default service account</strong>という名前のアカウントが追加されているはずです。<br>Dataflowを利用するにはそのサービスアカウントに<strong>Dataflowワーカー</strong>、<strong>Dataflow管理者</strong>、<strong>Storageオブジェクト管理者</strong>のロールを追加して保存します。以下の画像のようになっていればOKです。<br><img src="/images/20220920b/IAM_setting.png" alt="IAM_setting.png" width="1200" height="164" loading="lazy"><br>なお、ロールを付与するには、<strong>resourcemanager.projects.setIamPolicy</strong>の権限を持っている必要があります。持っていない場合はプロジェクトの管理者に権限を付与してもらうか、サービスアカウントへのロールの付与を代わりにやってもらってください。</p><h2 id="Apache-Beam-SDKのインストール"><a href="#Apache-Beam-SDKのインストール" class="headerlink" title="Apache Beam SDKのインストール"></a>Apache Beam SDKのインストール</h2><p>続いて、ローカル環境（今回はCloud Shell）にApache Beam SDKをインストールします。2022&#x2F;08&#x2F;30現在、Apache Beam SDKでサポートされているPythonのバージョンは3.8までです。一方、Cloud ShellにデフォルトでインストールされているPythonのバージョンは3.9ですので、pyenv等を用いてPython3.8を実行する仮想環境を作成してください。その後、作成した仮想環境にApache Beamをインストールします。Dataflow(GCP)上で実行するには追加パッケージをインストールする必要があるので、以下のコマンドでインストールしてください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install apache-beam[gcp]</span><br></pre></td></tr></table></figure><h2 id="Cloud-Storageバケットの作成"><a href="#Cloud-Storageバケットの作成" class="headerlink" title="Cloud Storageバケットの作成"></a>Cloud Storageバケットの作成</h2><p>Dataflowでパイプライン処理を行う場合、一時ファイルや出力ファイルを保存するためにCloud Storageのバケットを作成する必要があります。<br>バケットの作成はコンソール画面から作成する方法とpythonから作成する方法があります。<br>コンソール画面からは以下のように作成できます。<br><img src="/images/20220920b/make_bucket_new.gif" alt="make_bucket_new.gif" width="1200" height="665" loading="lazy"></p><p>pythonからバケットを作成する際は以下のコードを参考にしてください（<code>pip3 install google-cloud-storage</code>が必要です）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> storage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_bucket</span>(<span class="params">project_name, bucket_name, region</span>):</span><br><span class="line">    client = storage.Client(project_name)</span><br><span class="line">    bucket = storage.Bucket(client)</span><br><span class="line">    bucket.name = bucket_name</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> bucket.exists():</span><br><span class="line">        client.create_bucket(bucket, location=region)</span><br></pre></td></tr></table></figure><h2 id="Dataflow上でパイプラインを実行"><a href="#Dataflow上でパイプラインを実行" class="headerlink" title="Dataflow上でパイプラインを実行"></a>Dataflow上でパイプラインを実行</h2><p>続いて、Dataflow上でパイプラインを実行していきます。Dataflow上でパイプラインを実行するにはいくつかのオプションを指定する必要があります（主にGCP関連）。ここでは、それらのオプションの説明とオプションの渡し方について説明します。<br>Dataflowでパイプラインを実行するためには以下のようなオプションを指定する必要があります。</p><div class="scroll"><table><thead><tr><th align="center">オプション名</th><th align="left">説明</th></tr></thead><tbody><tr><td align="center">runner</td><td align="left">Dataflowで動かす場合には<code>DataflowRunner</code>を指定。ローカルで動かす場合には<code>DirectRunner</code>。</td></tr><tr><td align="center">project</td><td align="left">プロジェクトID。指定しないとエラーが返ってくる。</td></tr><tr><td align="center">job_name</td><td align="left">実行するジョブの名前。Dataflowのジョブのところにジョブの一覧が表示されるが、その際にどのジョブかを見分ける際に使える。指定しなければ勝手に名前をつけてくれるが、パッと見で判断しづらい。</td></tr><tr><td align="center">temp_location</td><td align="left">一時ファイルを保存するためのGCSのパス（<code>gs://</code>からスタートするパス）。指定しなければstaging_locationのパスが使用される。</td></tr><tr><td align="center">staging_location</td><td align="left">ローカルファイルをステージングするためのGCSのパス。指定しなければtemp_locationのパスが使用される。temp_locationかstaging_locationのどちらかは指定しなければならない。</td></tr><tr><td align="center">region</td><td align="left">Dataflowジョブをデプロイするリージョンエンドポイント。デフォルトでは<code>us-central1</code>。</td></tr></tbody></table></div><p>ここでは動かすのに必要な（とりあえずこのへんを渡しておけば動く）オプションを紹介していますので、その他のオプションについては<a href="https://cloud.google.com/dataflow/docs/guides/setting-pipeline-options#setting-other-cloud-dataflow-pipeline-options">公式ドキュメント</a>を参照してください。</p><p>実行する際には以下のように<code>--&lt;オプション名&gt; 値</code>の形式で指定することでオプションを渡すことができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python &#123;ソースコードまでのpath&#125; \</span><br><span class="line">--runner <span class="string">&quot;DataflowRunner&quot;</span> \</span><br><span class="line">--project <span class="string">&quot;&#123;プロジェクトID&#125;&quot;</span> \</span><br><span class="line">--job_name <span class="string">&quot;&#123;ジョブの名前&#125;&quot;</span> \</span><br><span class="line">--temp_location <span class="string">&quot;gs://&#123;バケットの名前&#125;/temp&quot;</span> \</span><br><span class="line">--region <span class="string">&quot;asia-northeast1&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Dataflowの使用例（GPUなしver-）"><a href="#Dataflowの使用例（GPUなしver-）" class="headerlink" title="Dataflowの使用例（GPUなしver.）"></a>Dataflowの使用例（GPUなしver.）</h1><p>ここでは、scikit-learnのモデルの推論をDataflow上で行う例を扱っていきます。今回はIrisデータセットで学習したモデルの重みパラメータ(<code>SVC_iris.pkl2</code>)が既に手元にあるという想定で、そのモデルの推論（学習時と同じIrisデータセットを使用）をDataflow上で行っていきます。以下のような手順で進めていきます。</p><ol><li>ソースコードの準備</li><li>Cloud ShellでPythonの環境構築</li><li>パイプラインの実行</li></ol><p>なお、<a href="#api%E3%81%AE%E6%9C%89%E5%8A%B9%E5%8C%96">APIの有効化</a>、<a href="#iam%E3%81%AE%E8%A8%AD%E5%AE%9A">IAMの設定</a>、<a href="#cloud-storage%E3%83%90%E3%82%B1%E3%83%83%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90">Cloud Storageバケットの作成</a>がお済みでない方はまずそちらから始めてください。</p><h2 id="ソースコードの準備"><a href="#ソースコードの準備" class="headerlink" title="ソースコードの準備"></a>ソースコードの準備</h2><p>今回実行したいソースコード(ファイル名:<code>runinference_sklearn.py</code>)です。モデルの重みパラメータまでのpathは<code>&#123;ソースコードがあるディレクトリ&#125;/models/sklearn_models/SVC_iris.pkl2</code>です。</p><figure class="highlight python"><figcaption><span>runinference_sklearn.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apache_beam <span class="keyword">as</span> beam</span><br><span class="line"><span class="keyword">from</span> apache_beam.ml.inference <span class="keyword">import</span> RunInference</span><br><span class="line"><span class="keyword">from</span> apache_beam.ml.inference.sklearn_inference <span class="keyword">import</span> ModelFileType, SklearnModelHandlerNumpy</span><br><span class="line"><span class="keyword">from</span> apache_beam.options.pipeline_options <span class="keyword">import</span> PipelineOptions</span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> storage</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_model_to_gcs</span>(<span class="params">local_model_path, gcs_model_path, project_name, bucket_name</span>):</span><br><span class="line">    client = storage.Client(project_name)</span><br><span class="line">    bucket = storage.Bucket(client)</span><br><span class="line">    bucket.name = bucket_name</span><br><span class="line">    blob = bucket.blob(gcs_model_path)</span><br><span class="line">    blob.upload_from_filename(local_model_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># パイプラインオプションの設定</span></span><br><span class="line">    pipeline_options = PipelineOptions()</span><br><span class="line">    options_dict = pipeline_options.display_data()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Irisデータの準備</span></span><br><span class="line">    data = load_iris()</span><br><span class="line">    numpy_data = data.data</span><br><span class="line"></span><br><span class="line">    <span class="comment"># モデルのアップロード</span></span><br><span class="line">    upload_model_to_gcs(</span><br><span class="line">        local_model_path=<span class="string">&quot;./models/sklearn_models/SVC_iris.pkl2&quot;</span>,</span><br><span class="line">        gcs_model_path=<span class="string">&quot;models/sklearn_models/SVC_iris.pkl2&quot;</span>,</span><br><span class="line">        project_name=options_dict[<span class="string">&quot;project&quot;</span>],</span><br><span class="line">        bucket_name=options_dict[<span class="string">&quot;bucket_name&quot;</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ハンドラーの設定</span></span><br><span class="line">    model_uri = <span class="string">&quot;gs://&#123;&#125;/models/sklearn_models/SVC_iris.pkl2&quot;</span>.<span class="built_in">format</span>(options_dict[<span class="string">&quot;bucket_name&quot;</span>])</span><br><span class="line">    model_file_type = ModelFileType.JOBLIB</span><br><span class="line">    model_handler = SklearnModelHandlerNumpy(model_uri=model_uri, model_file_type=model_file_type)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># パイプライン実行</span></span><br><span class="line">    logging.getLogger().setLevel(logging.INFO)</span><br><span class="line">    <span class="keyword">with</span> beam.Pipeline(options=pipeline_options) <span class="keyword">as</span> p:</span><br><span class="line">        <span class="built_in">input</span> = p | <span class="string">&quot;read&quot;</span> &gt;&gt; beam.Create(numpy_data)</span><br><span class="line"></span><br><span class="line">        prediction = (</span><br><span class="line">            <span class="built_in">input</span></span><br><span class="line">            | RunInference(model_handler)</span><br><span class="line">            | beam.io.WriteToText(options_dict[<span class="string">&quot;output_executable_path&quot;</span>], shard_name_template=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><h2 id="Cloud-ShellでPythonの環境構築"><a href="#Cloud-ShellでPythonの環境構築" class="headerlink" title="Cloud ShellでPythonの環境構築"></a>Cloud ShellでPythonの環境構築</h2><p>次にCloud ShellのPython環境を構築していきます。<br>まず、Python 3.8の環境を準備します。ターミナル上で</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 3.8.13</span><br></pre></td></tr></table></figure><p>を実行し、Python 3.8をインストールします。その後、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv virtualenv 3.8.13 dataflow</span><br><span class="line">pyenv activate dataflow</span><br></pre></td></tr></table></figure><p>を実行してPython 3.8.13がインストールされた仮想環境（ここでは<code>dataflow</code>）をアクティベートします。<br>続いて、必要なパッケージをインストールしていきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install apache-beam[gcp] google-gcloud-storage</span><br><span class="line">pip3 install scikit-learn</span><br></pre></td></tr></table></figure><h2 id="パイプラインの実行"><a href="#パイプラインの実行" class="headerlink" title="パイプラインの実行"></a>パイプラインの実行</h2><p>必要なパッケージのインストールが終わったら、最後にパイプラインを実行していきます。以下のコマンドを実行するとDataflow上でパイプライン処理が動き始めます。<code>&#123;プロジェクトID&#125;</code>、<code>&#123;ジョブの名前&#125;</code>、<code>&#123;バケットの名前&#125;</code>は適宜変更してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">python runinference_sklearn.py \</span><br><span class="line">--runner <span class="string">&quot;DataflowRunner&quot;</span> \</span><br><span class="line">--project <span class="string">&quot;&#123;プロジェクトID&#125;&quot;</span> \</span><br><span class="line">--job_name <span class="string">&quot;&#123;ジョブの名前&#125;&quot;</span> \</span><br><span class="line">--temp_location <span class="string">&quot;gs://&#123;バケットの名前&#125;/temp/&quot;</span> \</span><br><span class="line">--staging_location <span class="string">&quot;gs://&#123;バケットの名前&#125;/stage/&quot;</span> \</span><br><span class="line">--region <span class="string">&quot;asia-northeast1&quot;</span> \</span><br><span class="line">--bucket_name <span class="string">&quot;&#123;バケットの名前&#125;&quot;</span> \</span><br><span class="line">--output <span class="string">&quot;gs://&#123;バケットの名前&#125;/output.txt&quot;</span></span><br></pre></td></tr></table></figure><h2 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h2><p>推論結果はCloud Storageのバケットの<code>output.txt</code>に出力されます。今回の例では以下のような結果が得られました。</p><figure class="highlight text"><figcaption><span>output.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PredictionResult(example=array([5.1, 3.4, 1.5, 0.2]), inference=0)</span><br><span class="line">PredictionResult(example=array([5. , 3.4, 1.6, 0.4]), inference=0)</span><br><span class="line">PredictionResult(example=array([7.6, 3. , 6.6, 2.1]), inference=2)</span><br><span class="line">PredictionResult(example=array([5.9, 3. , 4.2, 1.5]), inference=1)</span><br><span class="line">PredictionResult(example=array([5.7, 3.8, 1.7, 0.3]), inference=0)</span><br><span class="line">PredictionResult(example=array([5.7, 4.4, 1.5, 0.4]), inference=0)</span><br><span class="line">PredictionResult(example=array([6.9, 3.1, 5.4, 2.1]), inference=2)</span><br><span class="line">PredictionResult(example=array([6.2, 2.2, 4.5, 1.5]), inference=1)</span><br><span class="line">PredictionResult(example=array([5.2, 4.1, 1.5, 0.1]), inference=0)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="DataflowでGPUを使う際の事前準備と基本的な使い方"><a href="#DataflowでGPUを使う際の事前準備と基本的な使い方" class="headerlink" title="DataflowでGPUを使う際の事前準備と基本的な使い方"></a>DataflowでGPUを使う際の事前準備と基本的な使い方</h1><p>DataflowでGPUを使用したい場合（例えば機械学習モデルの推論など）には、Dockerと組み合わせることでGPUを使用できます。<br>基本的な流れは<a href="#datflow%E3%81%AE%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99%E3%81%A8%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E3%81%84%E6%96%B9">Datflowの事前準備と基本的な使い方</a>と同じです。違いはDockerイメージの準備とパイプラインに追加で渡すオプションが増えることくらいです。ここでは</p><ol><li>Dockerイメージの準備</li><li>GPU使用時のオプション</li></ol><p>について説明します。なお、<a href="#api%E3%81%AE%E6%9C%89%E5%8A%B9%E5%8C%96">APIの有効化</a>、<a href="#iam%E3%81%AE%E8%A8%AD%E5%AE%9A">IAMの設定</a>、<a href="#cloud-storage%E3%83%90%E3%82%B1%E3%83%83%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90">Cloud Storageバケットの作成</a>がお済みでない方はまずそちらから始めてください。</p><h2 id="Dockerイメージの準備"><a href="#Dockerイメージの準備" class="headerlink" title="Dockerイメージの準備"></a>Dockerイメージの準備</h2><p>DataflowでGPUを使用するには、Apache Beamが扱える、かつ、必要なGPUライブラリが入ったDockerイメージを用意する必要があります。ありがたいことに<a href="https://github.com/GoogleCloudPlatform/python-docs-samples/tree/main/dataflow/gpu-examples/pytorch-minimal">PyTorch用の最小イメージ</a>や<a href="https://github.com/GoogleCloudPlatform/python-docs-samples/tree/main/dataflow/gpu-examples/tensorflow-minimal">TensorFlow用の最小イメージ</a>のためのsampleが既に用意されているので、特に理由がなければこちらを利用するのが楽かと思います。</p><p>PyTorchを使用する場合には<a href="https://github.com/GoogleCloudPlatform/python-docs-samples/tree/main/dataflow/gpu-examples/pytorch-minimal">PyTorch用の最小イメージ</a>からファイルをダウンロード後、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud builds submit --config build.yaml</span><br></pre></td></tr></table></figure><p>で、DockerイメージをContainer Registryに保存します（デフォルトでのイメージ名は<code>samples/dataflow/pytorch-gpu:latest</code>）。</p><p>なお、私の環境では、Pythonのバージョンが3.8ではパイプライン実行の際にエラー（<code>TypeError: code() takes at most 15 arguments (16 given)</code>）が発生してしまっていたため、Pythonのバージョンを3.7に落としました。具体的には以下のように変更することでエラーは発生しなくなりました。</p><ul><li><p>pyenvでPython 3.7の環境を用意<br>  ターミナル上で</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 3.7.13</span><br></pre></td></tr></table></figure><p>  を実行し、Python 3.7をインストールします。その後、</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv virtualenv 3.7.13 dataflow_gpu</span><br><span class="line">pyenv activate dataflow_gpu</span><br></pre></td></tr></table></figure><p>  を実行してPython 3.7.13がインストールされた仮想環境（ここでは<code>dataflow_gpu</code>）をアクティベートします。<br>  続いて、Apache Beamをインストールしていきます。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install apache-beam[gcp]</span><br></pre></td></tr></table></figure></li><li><p>Dockerfileを以下のように変更</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">FROM pytorch/pytorch:1.9.1-cuda11.1-cudnn8-runtime</span><br><span class="line"></span><br><span class="line">WORKDIR /pipeline</span><br><span class="line"></span><br><span class="line">COPY requirements.txt .</span><br><span class="line">COPY *.py ./</span><br><span class="line"></span><br><span class="line">RUN apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y --no-install-recommends g++ \</span><br><span class="line">    &amp;&amp; apt-get install -y curl \  # この行を追加</span><br><span class="line">        python3.7 \  # この行を追加</span><br><span class="line">        python3-distutils \  # この行を追加</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/* \</span><br><span class="line">    # Install the pipeline requirements and check that there are no conflicts.</span><br><span class="line">    # Since the image already has all the dependencies installed,</span><br><span class="line">    # there&#x27;s no need to run with the --requirements_file option.</span><br><span class="line">    &amp;&amp; pip install --no-cache-dir --upgrade pip \</span><br><span class="line">    &amp;&amp; pip install --no-cache-dir -r requirements.txt \</span><br><span class="line">    &amp;&amp; pip check</span><br><span class="line"></span><br><span class="line"># Set the entrypoint to Apache Beam SDK worker launcher.</span><br><span class="line">COPY --from=apache/beam_python3.8_sdk:2.38.0 /opt/apache/beam /opt/apache/beam</span><br><span class="line">ENTRYPOINT [ &quot;/opt/apache/beam/boot&quot; ]</span><br></pre></td></tr></table></figure></li></ul><h2 id="GPU使用時のオプション"><a href="#GPU使用時のオプション" class="headerlink" title="GPU使用時のオプション"></a>GPU使用時のオプション</h2><p>DataflowでGPUを使用する際には、実行時に以下のようなオプションを追加で指定する必要があります。</p><div class="scroll"><table><thead><tr><th align="left">オプション名</th><th align="left">説明</th></tr></thead><tbody><tr><td align="left">sdk_container_image</td><td align="left">使用するコンテナイメージの名前。</td></tr><tr><td align="left">disk_size_gb</td><td align="left">各ワーカー VM のブートディスクのサイズ</td></tr><tr><td align="left">experiments</td><td align="left">Dataflow Runner v2を使用するかやGPUのタイプ・個数、Nvidiaドライバをインストールするかを指定する際に使用。具体的な使い方は下の例を参照。</td></tr></tbody></table></div><p><code>experiments</code>オプションに関しては次のように指定します。下の例のように複数個に分けて指定してもOKです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--experiments <span class="string">&quot;worker_accelerator=type:nvidia-tesla-t4;count:1;install-nvidia-driver&quot;</span> \</span><br><span class="line">--experiments <span class="string">&quot;use_runner_v2&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Dataflowの使用例（GPUありver-）"><a href="#Dataflowの使用例（GPUありver-）" class="headerlink" title="Dataflowの使用例（GPUありver.）"></a>Dataflowの使用例（GPUありver.）</h1><p>ここでは、PyTorchのモデルの推論をDataflow上で行う例を扱っていきます。今回はMNISTデータセットで学習したモデルの重みパラメータ(<code>mnist_epoch_10.pth</code>)が既に手元にあるという想定で、そのモデルの推論（MNISTのテスト用データセットを使用）をDataflow上で行っていきます。以下のような手順で進めていきます。</p><ol><li>ソースコードの準備</li><li>Dockerコンテナイメージの作成</li><li>Cloud ShellでPythonの環境構築</li><li>パイプラインの実行</li></ol><p>なお、<a href="#api%E3%81%AE%E6%9C%89%E5%8A%B9%E5%8C%96">APIの有効化</a>、<a href="#iam%E3%81%AE%E8%A8%AD%E5%AE%9A">IAMの設定</a>、<a href="#cloud-storage%E3%83%90%E3%82%B1%E3%83%83%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90">Cloud Storageバケットの作成</a>がお済みでない方はまずそちらから始めてください。</p><h2 id="ソースコードの準備-1"><a href="#ソースコードの準備-1" class="headerlink" title="ソースコードの準備"></a>ソースコードの準備</h2><p>今回実行したいソースコード(ファイル名:<code>runinference_pytorch.py</code>)です。</p><figure class="highlight python"><figcaption><span>runinference_pytorch.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apache_beam <span class="keyword">as</span> beam</span><br><span class="line"><span class="keyword">from</span> apache_beam.ml.inference.base <span class="keyword">import</span> RunInference</span><br><span class="line"><span class="keyword">from</span> apache_beam.ml.inference.pytorch_inference <span class="keyword">import</span> PytorchModelHandlerTensor</span><br><span class="line"><span class="keyword">from</span> apache_beam.options.pipeline_options <span class="keyword">import</span> PipelineOptions</span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> storage</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pytorch_MNIST <span class="keyword">import</span> MNIST_Model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_model_to_gcs</span>(<span class="params">local_model_path, gcs_model_path, project_name, bucket_name</span>):</span><br><span class="line">    client = storage.Client(project_name)</span><br><span class="line">    bucket = storage.Bucket(client)</span><br><span class="line">    bucket.name = bucket_name</span><br><span class="line">    blob = bucket.blob(gcs_model_path)</span><br><span class="line">    blob.upload_from_filename(local_model_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># パイプラインオプションの設定</span></span><br><span class="line">    pipeline_options = PipelineOptions()</span><br><span class="line">    options_dict = pipeline_options.display_data()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># データセットの準備</span></span><br><span class="line">    transform = transforms.Compose([</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize((<span class="number">0.1307</span>), (<span class="number">0.3081</span>), inplace=<span class="literal">True</span>)</span><br><span class="line">    ])</span><br><span class="line">    test_dataset = datasets.MNIST(</span><br><span class="line">        root=<span class="string">&quot;./data/&quot;</span>,</span><br><span class="line">        train=<span class="literal">False</span>,</span><br><span class="line">        transform=transform,</span><br><span class="line">        download=<span class="literal">True</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># モデルのアップロード</span></span><br><span class="line">    upload_model_to_gcs(</span><br><span class="line">        local_model_path=<span class="string">&quot;./models/pytorch_models/mnist_epoch_10.pth&quot;</span>,</span><br><span class="line">        gcs_model_path=<span class="string">&quot;models/pytorch_models/mnist_epoch_10.pth&quot;</span>,</span><br><span class="line">        project_name=options_dict[<span class="string">&quot;project&quot;</span>],</span><br><span class="line">        bucket_name=options_dict[<span class="string">&quot;bucket_name&quot;</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ハンドラーの設定</span></span><br><span class="line">    model_handler = PytorchModelHandlerTensor(</span><br><span class="line">        state_dict_path=<span class="string">&quot;gs://&#123;&#125;/models/pytorch_models/mnist_epoch_10.pth&quot;</span>.<span class="built_in">format</span>(options_dict[<span class="string">&quot;bucket_name&quot;</span>]),</span><br><span class="line">        model_class=MNIST_Model,</span><br><span class="line">        model_params=&#123;&#125;,</span><br><span class="line">        device=<span class="string">&quot;GPU&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># パイプライン実行</span></span><br><span class="line">    logging.getLogger().setLevel(logging.INFO)</span><br><span class="line">    <span class="keyword">with</span> beam.Pipeline(options=pipeline_options) <span class="keyword">as</span> p:</span><br><span class="line">        data = p | <span class="string">&quot;read&quot;</span> &gt;&gt; beam.Create(test_dataset)</span><br><span class="line">        test = (</span><br><span class="line">            data</span><br><span class="line">            | <span class="string">&quot;extract image&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line">            | <span class="string">&quot;inference&quot;</span> &gt;&gt; RunInference(model_handler)</span><br><span class="line">            | beam.io.WriteToText(options_dict[<span class="string">&quot;output_executable_path&quot;</span>], shard_name_template=<span class="string">&quot;&quot;</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>モデルの構造を定義したコード(ファイル名:<code>pytorch_MNIST.py</code>)です。</p><figure class="highlight python"><figcaption><span>pytorch_MNIST.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MNIST_Model</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self.feature = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.MaxPool2d(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>)</span><br><span class="line">        )</span><br><span class="line">        self.classifier = nn.Sequential(</span><br><span class="line">            nn.Linear(<span class="number">147</span>, <span class="number">128</span>),</span><br><span class="line">            nn.ReLU(<span class="literal">True</span>),</span><br><span class="line">            nn.Linear(<span class="number">128</span>, <span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        x = self.feature(x)</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), -<span class="number">1</span>)</span><br><span class="line">        x = self.classifier(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure><p>これらのソースコードはCloud Shellの同一のディレクトリに置いてください。また、モデルの重みパラメータまでのpathは<code>&#123;ソースコードがあるディレクトリ&#125;/models/pytorch_models/mnist_epoch_10.pth</code>です。</p><h2 id="Dockerコンテナイメージの作成"><a href="#Dockerコンテナイメージの作成" class="headerlink" title="Dockerコンテナイメージの作成"></a>Dockerコンテナイメージの作成</h2><p>続いて、Dockerイメージを準備していきます。<a href="https://github.com/GoogleCloudPlatform/python-docs-samples/tree/main/dataflow/gpu-examples/pytorch-minimal">PyTorch用の最小イメージ</a>からファイルをダウンロード後、それらのファイルをソースコードと同一のディレクトリに置きます。続いてDockerfileを以下のように変更します。</p><figure class="highlight dockerfile"><figcaption><span>Dockerfile</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> pytorch/pytorch:<span class="number">1.9</span>.<span class="number">1</span>-cuda11.<span class="number">1</span>-cudnn8-runtime</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /pipeline</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> requirements.txt .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> *.py ./</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get install -y --no-install-recommends g++ \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; apt-get install -y curl \  <span class="comment"># この行を追加</span></span></span><br><span class="line">        python3.<span class="number">7</span> \  <span class="comment"># この行を追加</span></span><br><span class="line">        python3-distutils \  <span class="comment"># この行を追加</span></span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/* \</span><br><span class="line">    <span class="comment"># Install the pipeline requirements and check that there are no conflicts.</span></span><br><span class="line">    <span class="comment"># Since the image already has all the dependencies installed,</span></span><br><span class="line">    <span class="comment"># there&#x27;s no need to run with the --requirements_file option.</span></span><br><span class="line">    &amp;&amp; pip install --no-cache-dir --upgrade pip \</span><br><span class="line">    &amp;&amp; pip install --no-cache-dir -r requirements.txt \</span><br><span class="line">    &amp;&amp; pip check</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set the entrypoint to Apache Beam SDK worker launcher.</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=apache/beam_python3.8_sdk:2.38.0 /opt/apache/beam /opt/apache/beam</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;/opt/apache/beam/boot&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>その後、コンテナイメージをContainer Registryに保存するために以下のコマンドを実行します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcloud builds submit --config build.yaml</span><br></pre></td></tr></table></figure><p>コンテナイメージ名は<code>samples/dataflow/pytorch-gpu:latest</code>で保存されます。</p><h2 id="Cloud-ShellでPythonの環境構築-1"><a href="#Cloud-ShellでPythonの環境構築-1" class="headerlink" title="Cloud ShellでPythonの環境構築"></a>Cloud ShellでPythonの環境構築</h2><p>次にCloud ShellのPython環境を構築していきます。<br>まず、Python 3.7の環境を準備します。ターミナル上で</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 3.7.13</span><br></pre></td></tr></table></figure><p>を実行し、Python 3.7をインストールします。その後、</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv virtualenv 3.7.13 dataflow_gpu</span><br><span class="line">pyenv activate dataflow_gpu</span><br></pre></td></tr></table></figure><p>を実行してPython 3.7.13がインストールされた仮想環境（ここでは<code>dataflow_gpu</code>）をアクティベートします。<br>続いて、必要なパッケージをインストールしていきます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install apache-beam[gcp] google-gcloud-storage</span><br><span class="line">pip3 install torch torchvision</span><br></pre></td></tr></table></figure><h2 id="パイプラインの実行-1"><a href="#パイプラインの実行-1" class="headerlink" title="パイプラインの実行"></a>パイプラインの実行</h2><p>必要なパッケージのインストールが終わったら、最後にパイプラインを実行していきます。<br>以下のコマンドを実行するとDataflow上でパイプライン処理が動き始めます。<code>&#123;プロジェクトID&#125;</code>、<code>&#123;ジョブの名前&#125;</code>、<code>&#123;バケットの名前&#125;</code>は適宜変更してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python runinference_pytorch.py \</span><br><span class="line">--runner <span class="string">&quot;DataflowRunner&quot;</span> \</span><br><span class="line">--project <span class="string">&quot;&#123;プロジェクトID&#125;&quot;</span> \</span><br><span class="line">--job_name <span class="string">&quot;&#123;ジョブの名前&#125;&quot;</span> \</span><br><span class="line">--temp_location <span class="string">&quot;gs://&#123;バケットの名前&#125;/temp/&quot;</span> \</span><br><span class="line">--staging_location <span class="string">&quot;gs://&#123;バケットの名前&#125;/stage/&quot;</span> \</span><br><span class="line">--region <span class="string">&quot;asia-northeast1&quot;</span> \</span><br><span class="line">--bucket_name <span class="string">&quot;&#123;バケットの名前&#125;&quot;</span> \</span><br><span class="line">--output <span class="string">&quot;gs://&#123;バケットの名前&#125;/output.txt&quot;</span> \</span><br><span class="line">--sdk_container_image <span class="string">&quot;gcr.io/&#123;プロジェクトID&#125;/samples/dataflow/pytorch-gpu:latest&quot;</span> \</span><br><span class="line">--disk_size_gb 50 \</span><br><span class="line">--experiments <span class="string">&quot;worker_accelerator=type:nvidia-tesla-t4;count:1;install-nvidia-driver&quot;</span> \</span><br><span class="line">--experiments <span class="string">&quot;use_runner_v2&quot;</span></span><br></pre></td></tr></table></figure><h2 id="結果-1"><a href="#結果-1" class="headerlink" title="結果"></a>結果</h2><p>推論結果はCloud Storageのバケットの<code>output.txt</code>に出力されます。今回の例では以下のような結果が得られました。</p><figure class="highlight text"><figcaption><span>output.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">tensor([ -8.2468,  -2.1803,  -9.8459,   1.3747,   2.4845,  -5.6996, -18.9429,</span><br><span class="line">          3.0085,  -5.7692,  12.0357], requires_grad=True)</span><br><span class="line">tensor([ -5.9876, -14.5651,  -7.3873,   8.2820,  -6.1497,   1.6121, -18.5136,</span><br><span class="line">         -9.5785,   1.7698,  12.8093], requires_grad=True)</span><br><span class="line">tensor([  9.2505,  -1.7219,  -2.7147,  -3.9045, -10.8319,  -1.9610,   2.5355,</span><br><span class="line">         -8.6489,  -3.3169,  -6.9540], requires_grad=True)</span><br><span class="line">tensor([-8.1391, -0.9647, -6.3984,  2.4964, -0.9498,  1.4407, -8.2989, -3.1957,</span><br><span class="line">         2.5867,  2.6507], requires_grad=True)</span><br><span class="line">tensor([-7.6571, -2.4950, -5.2014, -1.6730, 10.1947, -7.5948, -9.2541,  0.5039,</span><br><span class="line">        -2.6531,  7.1487], requires_grad=True)</span><br><span class="line">tensor([ -5.8362,  12.8431,  -4.1835,  -8.8176,  -6.0804, -10.7981,  -6.2982,</span><br><span class="line">         -0.1830,  -1.4379,  -4.4298], requires_grad=True)</span><br><span class="line">tensor([-4.6527, -7.1966, -8.8277, -7.4921,  6.7380, -4.9899, -0.2908, -4.7030,</span><br><span class="line">         2.0198,  2.2414], requires_grad=True)</span><br><span class="line">tensor([-9.9818, -9.7239, -4.4335, -2.8926,  7.8835,  1.4599, -1.7376, -6.2337,</span><br><span class="line">        -0.9638, -0.7414], requires_grad=True)</span><br><span class="line">tensor([ -3.8291,  -2.5081,  16.6454,   6.6208,  -7.5311, -10.9999, -13.9144,</span><br><span class="line">         -5.1685,   2.5498,  -7.2168], requires_grad=True)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="他のGCPサービスとの連携とストリーミング処理"><a href="#他のGCPサービスとの連携とストリーミング処理" class="headerlink" title="他のGCPサービスとの連携とストリーミング処理"></a>他のGCPサービスとの連携とストリーミング処理</h1><p>最後に、Pub&#x2F;Subからリアルタイムにデータを取得→Dataflowでデータ処理→結果をBigQueryに書き出す例を紹介します。<br>今回はIrisデータセットの各サンプルを10秒間隔でPub&#x2F;SubにPublishし、<a href="#dataflow%E3%81%AE%E4%BD%BF%E7%94%A8%E4%BE%8Bgpu%E3%81%AA%E3%81%97ver">Dataflowの使用例（GPUなしver.）</a>で行ったscikit-learnモデルを用いた推論をストリーミング処理でDataflow上で行い、その結果をBigQueryに書き出します。今回もIrisデータセットで学習したモデルの重みパラメータ(<code>SVC_iris.pkl2</code>)が既に手元にあるという想定で、以下のような手順で進めていきます。</p><ol><li>ソースコードの準備</li><li>Pub&#x2F;Sub・BigQueryの準備</li><li>パイプラインの実行</li></ol><p>なお、<a href="#api%E3%81%AE%E6%9C%89%E5%8A%B9%E5%8C%96">APIの有効化</a>、<a href="#iam%E3%81%AE%E8%A8%AD%E5%AE%9A">IAMの設定</a>、<a href="#cloud-storage%E3%83%90%E3%82%B1%E3%83%83%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90">Cloud Storageバケットの作成</a>がお済みでない方はまずそちらから始めてください。</p><h2 id="ソースコードの準備-2"><a href="#ソースコードの準備-2" class="headerlink" title="ソースコードの準備"></a>ソースコードの準備</h2><p>今回実行したいソースコード(ファイル名:<code>predict_iris_dataflow_pubsub2bq.py</code>)です。<br>モデルの重みパラメータまでのpathは<code>&#123;ソースコードがあるディレクトリ&#125;/models/sklearn_models/SVC_iris.pkl2</code>です。</p><figure class="highlight python"><figcaption><span>predict_iris_dataflow_pubsub2bq.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> apache_beam <span class="keyword">as</span> beam</span><br><span class="line"><span class="keyword">from</span> apache_beam.ml.inference <span class="keyword">import</span> RunInference</span><br><span class="line"><span class="keyword">from</span> apache_beam.ml.inference.sklearn_inference <span class="keyword">import</span> ModelFileType, SklearnModelHandlerNumpy</span><br><span class="line"><span class="keyword">from</span> apache_beam.options.pipeline_options <span class="keyword">import</span> PipelineOptions, StandardOptions</span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> storage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_model_to_gcs</span>(<span class="params">local_model_path, gcs_model_path, project_name, bucket_name</span>):</span><br><span class="line">    client = storage.Client(project_name)</span><br><span class="line">    bucket = storage.Bucket(client)</span><br><span class="line">    bucket.name = bucket_name</span><br><span class="line">    blob = bucket.blob(gcs_model_path)</span><br><span class="line">    blob.upload_from_filename(local_model_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># パイプラインオプションの設定</span></span><br><span class="line">    options = PipelineOptions()</span><br><span class="line">    options_dict = options.display_data()</span><br><span class="line">    options.view_as(StandardOptions).runner = <span class="string">&quot;DataflowRunner&quot;</span></span><br><span class="line">    options.view_as(StandardOptions).streaming = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># モデルのアップロード</span></span><br><span class="line">    upload_model_to_gcs(</span><br><span class="line">        local_model_path=<span class="string">&quot;./models/sklearn_models/SVC_iris.pkl2&quot;</span>,</span><br><span class="line">        gcs_model_path=<span class="string">&quot;models/sklearn_models/SVC_iris.pkl2&quot;</span>,</span><br><span class="line">        project_name=options_dict[<span class="string">&quot;project&quot;</span>],</span><br><span class="line">        bucket_name=options_dict[<span class="string">&quot;bucket_name&quot;</span>]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ハンドラーの設定</span></span><br><span class="line">    model_uri = <span class="string">&quot;gs://&#123;&#125;/models/sklearn_models/SVC_iris.pkl2&quot;</span>.<span class="built_in">format</span>(options_dict[<span class="string">&quot;bucket_name&quot;</span>])</span><br><span class="line">    model_file_type = ModelFileType.JOBLIB</span><br><span class="line">    model_handler = SklearnModelHandlerNumpy(model_uri=model_uri, model_file_type=model_file_type)</span><br><span class="line"></span><br><span class="line">    topic = <span class="string">&quot;projects/&#123;&#125;/topics/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(options_dict[<span class="string">&quot;project&quot;</span>], options_dict[<span class="string">&quot;topic_name&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># パイプライン実行</span></span><br><span class="line">    logging.getLogger().setLevel(logging.INFO)</span><br><span class="line">    <span class="keyword">with</span> beam.Pipeline(options=options) <span class="keyword">as</span> p:</span><br><span class="line">        raw_data = (</span><br><span class="line">            p</span><br><span class="line">            | <span class="string">&quot;ReadFromPub/Sub&quot;</span> &gt;&gt; beam.io.ReadFromPubSub(topic)</span><br><span class="line">            | <span class="string">&quot;Decode&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: x.decode())</span><br><span class="line">            | <span class="string">&quot;StrToDict&quot;</span> &gt;&gt; beam.Map(json.loads)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        inference = (</span><br><span class="line">            raw_data</span><br><span class="line">            | <span class="string">&quot;ExtractFeature&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: x[<span class="string">&quot;feature&quot;</span>])</span><br><span class="line">            | <span class="string">&quot;RunInference&quot;</span> &gt;&gt; RunInference(model_handler)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        write2bq = (</span><br><span class="line">            inference</span><br><span class="line">            | <span class="string">&quot;ConvertToBigQueryFormat&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: &#123;</span><br><span class="line">                <span class="string">&quot;input&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;sepal_length&quot;</span>: x[<span class="number">0</span>][<span class="number">0</span>],</span><br><span class="line">                    <span class="string">&quot;sepal_width&quot;</span>: x[<span class="number">0</span>][<span class="number">1</span>],</span><br><span class="line">                    <span class="string">&quot;petal_length&quot;</span>: x[<span class="number">0</span>][<span class="number">2</span>],</span><br><span class="line">                    <span class="string">&quot;petal_width&quot;</span>: x[<span class="number">0</span>][<span class="number">3</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;predict&quot;</span>: x[<span class="number">1</span>].item()</span><br><span class="line">            &#125;)</span><br><span class="line">            | <span class="string">&quot;WriteToBigQuery&quot;</span> &gt;&gt; beam.io.WriteToBigQuery(table=options_dict[<span class="string">&quot;table_name&quot;</span>], dataset=options_dict[<span class="string">&quot;dataset_name&quot;</span>])</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>また、Irisデータセットの各サンプルを10秒間隔でPub&#x2F;SubにPublishにするためのコード（ファイル名:<code>publish_iris_local2pubsub.py</code>）です。</p><figure class="highlight python"><figcaption><span>publish_iris_local2pubsub.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> google.cloud <span class="keyword">import</span> pubsub</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&quot;--project&quot;</span>, required=<span class="literal">True</span>)</span><br><span class="line">parser.add_argument(<span class="string">&quot;--topic_name&quot;</span>, required=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    data = load_iris()</span><br><span class="line">    feature = data.data</span><br><span class="line">    target = data.target</span><br><span class="line"></span><br><span class="line">    publisher = pubsub.PublisherClient()</span><br><span class="line">    topic_path = publisher.topic_path(args.project, args.topic_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i, (f, t) <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">zip</span>(feature, target)):</span><br><span class="line">        f_t_dict = &#123;<span class="string">&quot;id&quot;</span>: i, <span class="string">&quot;feature&quot;</span>: f.tolist(), <span class="string">&quot;target&quot;</span>: t.item()&#125;</span><br><span class="line">        message = json.dumps(f_t_dict)</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line">        b_message = message.encode()</span><br><span class="line">        publisher.publish(topic_path, b_message)</span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="Pub-x2F-Sub・BigQueryの準備"><a href="#Pub-x2F-Sub・BigQueryの準備" class="headerlink" title="Pub&#x2F;Sub・BigQueryの準備"></a>Pub&#x2F;Sub・BigQueryの準備</h2><p>まず、Pub&#x2F;Subのトピック作成から始めていきます。Pub&#x2F;Subのページ上部にある「トピックを作成」から、トピックIDを設定してトピックを作成します。そのほかの設定に関しては今回はデフォルトのままで大丈夫です。<br><img src="/images/20220920b/make_topic.png" alt="make_topic.png" width="1200" height="691" loading="lazy"></p><p>続いて、BigQueryのデータセット・テーブルの作成に入ります。BigQueryのデータセット・テーブルは以下のようにして作成できます。<br><img src="/images/20220920b/make_dataset.gif" alt="make_dataset.gif" width="1200" height="675" loading="lazy"></p><p>なお、今回使用しているスキーマは以下の通りです。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;input&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RECORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NULLABLE&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sepal_length&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FLOAT&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NULLABLE&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sepal_width&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FLOAT&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NULLABLE&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;petal_length&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FLOAT&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NULLABLE&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;petal_width&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;FLOAT&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NULLABLE&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;predict&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;INTEGER&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NULLABLE&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h2 id="パイプラインの実行-2"><a href="#パイプラインの実行-2" class="headerlink" title="パイプラインの実行"></a>パイプラインの実行</h2><p>続いて、パイプラインの実行に移ります。以下のコマンドを実行するとパイプラインが動き始めます。<code>&#123;プロジェクトID&#125;</code>、<code>&#123;ジョブの名前&#125;</code>、<code>&#123;バケットの名前&#125;</code>、<code>&#123;テーブルの名前&#125;</code>、<code>&#123;データセットの名前&#125;</code>、<code>&#123;トピックの名前&#125;</code>は適宜変更してください。今回はRunnerおよびストリーミング処理のオプションはコード内で記述しているためコマンドライン引数から渡す必要はありません。ストリーミング処理をコマンドラインから有効化したい場合は、<code>--streaming</code>を加えるとできます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">python predict_iris_dataflow_pubsub2bq.py \</span><br><span class="line">--project <span class="string">&quot;&#123;プロジェクトID&#125;&quot;</span> \</span><br><span class="line">--job_name <span class="string">&quot;&#123;ジョブの名前&#125;&quot;</span> \</span><br><span class="line">--temp_location <span class="string">&quot;gs://&#123;バケットの名前&#125;/temp/&quot;</span> \</span><br><span class="line">--staging_location <span class="string">&quot;gs://&#123;バケットの名前&#125;/stage/&quot;</span> \</span><br><span class="line">--region <span class="string">&quot;asia-northeast1&quot;</span> \</span><br><span class="line">--bucket_name <span class="string">&quot;&#123;バケットの名前&#125;&quot;</span> \</span><br><span class="line">--table_name <span class="string">&quot;&#123;テーブルの名前&#125;&quot;</span> \</span><br><span class="line">--dataset_name <span class="string">&quot;&#123;データセットの名前&#125;&quot;</span> \</span><br><span class="line">--topic_name <span class="string">&quot;&#123;トピックの名前&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>これでパイプラインが実行されます。</p><p>パイプラインのジョブが動き始めたら、以下のコマンドで、Irisデータセットの各サンプルをPublishしていきます。なお、PythonファイルからPub&#x2F;SubにPublishする際にはサービスアカウントキー作成する必要があります。<code>IAMと管理→サービスアカウント</code>からサービスアカウントキーを含むjsonファイルを作成し</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOOGLE_APPLICATION_CREDENTIALS=<span class="string">&quot;&#123;jsonファイルまでのpath&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>で、PythonファイルからPub&#x2F;SubにPublishできるようになります。それが終わったら</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python publish_iris_local2pubsub.py \</span><br><span class="line">--project <span class="string">&quot;&#123;プロジェクトID&#125;&quot;</span> \</span><br><span class="line">--topic_name <span class="string">&quot;&#123;トピックの名前&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>を実行して、Pub&#x2F;Subに10秒間隔でデータを送ります。</p><h2 id="結果-2"><a href="#結果-2" class="headerlink" title="結果"></a>結果</h2><p>BigQueryの画面からクエリを実行して結果を確認します。クエリは下図の赤枠の部分を順にクリックして<br><img src="/images/20220920b/make_query.png" alt="make_query.png" width="702" height="486" loading="lazy"></p><p>開いたエディタに</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `&#123;プロジェクトID&#125;.&#123;データセットの名前&#125;.&#123;テーブルの名前&#125;` LIMIT <span class="number">1000</span></span><br></pre></td></tr></table></figure><p>を入力して実行します。</p><p>今回の例では以下のような結果が得られました。<br><img src="/images/20220920b/pubsub2bq_result.png" alt="pubsub2bq_result" width="1164" height="822" loading="lazy"></p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>今回のインターンで扱わせていただいたDataflowは、なかなか個人で扱う機会がない一方で、ビジネスの場面ではとても需要のあるサービスです。そのようなものを扱う機会を頂けたことは今回のインターンに参加してよかったと思えることの１つです。また、私は今まで技術ブログを書いた経験がなかったため、今回のインターンで、学んだことを言語化しまとめることの難しさを知ることができました。</p><p>そのほかにも、インターンではSAIG（フューチャーのAIチーム）の進捗報告会に参加させていただき、さまざまなプロジェクトの存在、各プロジェクトの進め方、各プロジェクトの難しさなど実際の仕事の現場を体験することができました。また、インターンのイベントの一環である社員の方にインタビューをさせていただき、そこでは専門分野の勉強の進め方、AIのトレンドのキャッチアップのやり方を教えていただきました。</p><p>今回のインターンでは本当に多くのことを学ばせていただきました。受け入れ先プロジェクトの方々やフューチャーHRの皆さん、本当にありがとうございました！</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://qiita.com/esakik/items/3c5c18d4a645db7a8634">Apache Beam (Dataflow) 実践入門【Python】</a></li><li><a href="https://beam.apache.org/documentation/runtime/model/">How Beam executes a pipeline (公式ドキュメント)</a></li><li><a href="https://cloud.google.com/dataflow/docs/quickstarts/create-pipeline-python">Python を使用して Dataflow パイプラインを作成する</a></li><li><a href="https://cloud.google.com/dataflow/docs/guides/using-gpus">GPUの使用</a></li></ul><p>アイキャッチは<a href="https://pixabay.com/ja/users/paulbr75-2938186/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2471293">Paul Brennan</a>による<a href="https://pixabay.com/ja//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2471293">Pixabay</a>からの画像です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/">インターン</category>
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/BigQuery/">BigQuery</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B32022/">インターン2022</category>
      
      <category domain="https://future-architect.github.io/tags/Dataflow/">Dataflow</category>
      
      <category domain="https://future-architect.github.io/tags/ApacheBeam/">ApacheBeam</category>
      
      
      <comments>https://future-architect.github.io/articles/20220920b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Dataflow前編（Dataflowの概要からApache Beamの使い方まで）</title>
      <link>https://future-architect.github.io/articles/20220920a/</link>
      <guid>https://future-architect.github.io/articles/20220920a/</guid>
      <pubDate>Mon, 19 Sep 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220920a/dataflow_top1.png&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;655&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220920a/dataflow_top1.png" alt="" width="1000" height="655"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、フューチャーのインターン”Engineer Camp”に参加した平野と申します。</p><p>今回のインターンでは、Google Cloud Platform (GCP)のサービスとして提供されているDataflowについて調査し、その仕組みや使い方についてこの技術ブログにまとめることに取り組みました。</p><p>フューチャーのインターンについては<a href="/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/">こちら</a>をご覧ください！</p><p>今回の記事は前編・後編に分かれており</p><ul><li>前編:<ul><li>Dataflowの概要</li><li>Apache Beamの概要・内部的な仕組み</li><li>Apache Beamのコードの書き方</li></ul></li><li>後編：<ul><li>Dataflowを使う上での事前準備と基本的な使い方</li><li>GPUを使う上での事前準備と基本的な使い方</li><li>Pub&#x2F;Sub・BigQueryとの連携例</li></ul></li></ul><p>という構成になっています。<a href="/articles/20220920b/">後編</a>も公開しています。</p><h1 id="Dataflowとは"><a href="#Dataflowとは" class="headerlink" title="Dataflowとは"></a>Dataflowとは</h1><p>Dataflowは様々なデータの分散処理を簡単に実現できるプラットフォームです。</p><p>大規模なデータを処理したいけれど、十分な計算資源がない場合やそのためのインフラの構築・管理が面倒な場合には、Dataflowは有効な選択肢の一つです。Dataflowではそのような環境構築が不要で、後述するApache Beamでデータ処理の流れを記述すれば、データの分散処理を実行できます。</p><p>また、Dataflowにはオートスケーリングという機能が備わっており、データ処理の重さに応じて自動で最適な計算リソースを割り当ててくれます。さらにDataflowはGCPのサービスなので、他のGCPサービス（Cloud Strage, Cloud Pub&#x2F;Sub, BigQueryなど）との連携がしやすくなっています。</p><p>Dataflowの活用事例は多く、例えばメルペイさんはさまざまなマイクロサービスで必要とされる典型的なデータ処理にDataflow Templateを活用されています。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p>また、SUBARUさんでは学習データにアノテーションを付与する処理にDataflowを利用されています。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p><blockquote><p>「学習用の画像データにアノテーション データを付与して TFRecord を生成する前処理が、日を追うごとに増えていき、これまでのやり方だと並列でやっても丸一日以上かかってしまうようになってしまいました。そこで、これを<br>Apache Beam を使って Cloud Dataflow で処理するようにしています。結果、データを流すと数百CPU くらいまで一気にオートスケールして、だいたい 30 分くらいで終わるようになりました。」（大久保氏）</p></blockquote><p>Dataflowでは、データ処理パイプラインの中に機械学習モデルの推論を組み込むことも可能で、ストリーム処理と組み合わせるとリアルタイム推論もできるようになります。今回はそのようなMLシステムへの応用を見据えて基本から整理しました。</p><h1 id="Apache-Beamとは"><a href="#Apache-Beamとは" class="headerlink" title="Apache Beamとは"></a>Apache Beamとは</h1><p>Dataflow上で実行するデータ処理の内容はApache Beamを用いて記述します。</p><p>Apache Beam自体は、データ処理パイプラインを定義・実行するソフトウェア開発キット (SDK) で、OSSなので誰でも利用することができます。Dataflow以外にもFlink, Nemo, Spark, AWS KDAなどの環境（Runnerという）で動かすことができ、Go, Java, Pythonといった様々なプログラミング言語で利用できます。</p><img src="/images/20220920a/Apache_Beam_flow.png" alt="Apache_Beam_flow.png" width="1200" height="534" loading="lazy"><p>Apache Beamの特徴としては、パイプライン処理を実行するWorkerの確保、各Workerへのデータの割り当てなどはRunnerが自動で行なってくれるという点があります。そのため、コードを書く際にはパイプライン処理の流れだけに注力すればよく、大規模なデータの分散処理を簡単に実行することができます。</p><p>また、バッチ処理・ストリーム処理の両方のデータ処理を同じようなコードで記述できるというのも大きな特徴の一つで、バッチ処理⇄ストリーム処理の切り替えが簡単にできます。ちなみにBeamという名前は <strong>B</strong> atch + st <strong>eam</strong> から来ています。</p><h2 id="Apache-Beamの構成要素"><a href="#Apache-Beamの構成要素" class="headerlink" title="Apache Beamの構成要素"></a>Apache Beamの構成要素</h2><p>Apache Beamでは以下の図のような構成となっています。<br><img src="/images/20220920a/Apache_Beam_flow_2.png" alt="Apache_Beam_flow.png" width="1200" height="241" loading="lazy"></p><ul><li>Pipeline:<br>データ処理タスク全体（入力データの読み取り→データの処理→データの書き出し）をカプセル化したもの。</li><li>PCollection:<br>パイプラインを流れるデータ。パイプラインの最初は外部ソースからデータを読み出して、PCollectionにすることから始まる。</li><li>PTransfrom:<br>パイプライン内の個々のデータ処理オペレーション。PTransformの入出力はPCollection。</li><li>I&#x2F;O transforms:<br>外部ソースからのデータの読み取り、外部ソースへのデータの書き出しを行う際に用いるPTransform。</li></ul><h2 id="Apache-Beamの仕組み"><a href="#Apache-Beamの仕組み" class="headerlink" title="Apache Beamの仕組み"></a>Apache Beamの仕組み</h2><p>ここでは、Apache Beamがどのようにして分散処理を行っているのかについて、<a href="https://beam.apache.org/documentation/runtime/model/">公式ドキュメント</a>の内容をもとに説明します。<br>以下の説明で用いている図は<a href="https://beam.apache.org/documentation/runtime/model/">公式ドキュメント</a>から引用しています。</p><h3 id="Transform並列化の仕組み"><a href="#Transform並列化の仕組み" class="headerlink" title="Transform並列化の仕組み"></a>Transform並列化の仕組み</h3><ol><li>Runnerは入力されたPCollectionをいくつかのBundleに分ける。</li><li>各BundleをWorkerが並列に処理する。</li></ol><p>いくつのBundleに分割するかはRunnerが決定します。以下の図では9つのelementからなるPCollectionを2つのBundleに分割しています。</p><img src="/images/20220920a/Bundleに分割する例.svg" alt="Bundleに分割する例" loading="lazy"><p>ParDo1を実行する際に、各BundleはWorkerに渡され、並列に実行されます。</p><img src="/images/20220920a/Bundleの並列処理.svg" alt="Bundleの並列処理" loading="lazy"><p>PCollectionに含まれるelementよりも小さく分割することはできないため、Bundle数の最大はPCollectionのelement数です。</p><img src="/images/20220920a/最も細かくBundleに分割した例.svg" alt="最も細かくBundleに分割した例" loading="lazy"><p><em>※Splittable ParDoを使えば、1つのelementを複数のBundleで処理することができるらしい。この機能は開発中とのこと。</em></p><h3 id="Transform間に従属関係がある場合の挙動"><a href="#Transform間に従属関係がある場合の挙動" class="headerlink" title="Transform間に従属関係がある場合の挙動"></a>Transform間に従属関係がある場合の挙動</h3><p>以下の例では、入力に対してParDo1を適用した後に、ParDo2を適用します。</p><p>図ではBundle AにParDo1を適用した出力がBundle C、Bundle BにParDo1を適用した出力がBundle Dとなっています。</p><img src="/images/20220920a/Transform間に従属関係がある場合.svg" alt="Transform間に従属関係がある場合" loading="lazy"><p>RunnerがParDo1を適用前と後でBundleの再構成を行わない場合、各Bundleは同じWorkerでParDo1とParDo2を適用されます。</p><img src="/images/20220920a/各Bundleは同じWorkerで処理される.svg" alt="各Bundleは同じWorkerで処理される" loading="lazy"><p>こうすることで、Worker間の通信を省くことができ、他のWorkerの処理を待つ必要がなくなります。</p><h3 id="1つのTransformに失敗した場合の挙動"><a href="#1つのTransformに失敗した場合の挙動" class="headerlink" title="1つのTransformに失敗した場合の挙動"></a>1つのTransformに失敗した場合の挙動</h3><p>Bundle内のあるelementの処理に失敗した場合、そのelementが属するBundle全体に対して処理を再度実行する必要があります。</p><p>ただし、処理を実行するWorkerは変わってもよく、以下の例ではWorker2が処理に失敗したBundleをWorker1が引き受けています。</p><img src="/images/20220920a/1つのTransformに失敗した時.svg" alt="1つのTransformに失敗した時" loading="lazy"><h3 id="従属関係にあるTransformに失敗した場合の挙動"><a href="#従属関係にあるTransformに失敗した場合の挙動" class="headerlink" title="従属関係にあるTransformに失敗した場合の挙動"></a>従属関係にあるTransformに失敗した場合の挙動</h3><p>2つのTransform間に従属関係があり、後続のTransformの処理に失敗した場合、Bundleは再度最初からTransformを適用される必要があります。</p><img src="/images/20220920a/従属関係にあるTransformに失敗した場合.svg" alt="従属関係にあるTransformに失敗した場合" loading="lazy"><p><em>このような挙動となっている理由は、Transform間のelementを保持しておくとメモリを圧迫してしまうため？公式DocにはPersistence costを節約するためとあった。ラージスケールなデータを処理することを念頭においた設計となっている？</em></p><h2 id="Apache-Beamのコードの書き方"><a href="#Apache-Beamのコードの書き方" class="headerlink" title="Apache Beamのコードの書き方"></a>Apache Beamのコードの書き方</h2><p>Apache Beamでは、以下のような流れでコードを書いていきます。</p><ol><li>Pipelineの生成と実行オプションの設定（ここでRunnerも指定）</li><li>I&#x2F;O transformsを用いて最初のPCollectionの生成。外部ソースからデータを取ってきたり、コード内で定義してもOK</li><li>PTransformの適用</li><li>PTransform適用後のPCollectionを外部ソースへ書き込み</li><li>RunnerでPipelineを実行</li></ol><p>上記の流れで実装したサンプルコードが以下になります。以下の例では<code>input.txt</code>の各行の文字数を<code>output.txt</code>に出力するコードです。</p><figure class="highlight python"><figcaption><span>beam_sample.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> apache_beam <span class="keyword">as</span> beam</span><br><span class="line"><span class="keyword">from</span> apache_beam.options.pipeline_options <span class="keyword">import</span> StandardOptions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ComputeWordLength</span>(beam.DoFn):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process</span>(<span class="params">self, element</span>):</span><br><span class="line">        <span class="keyword">yield</span> <span class="built_in">len</span>(element)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    options = StandardOptions()  <span class="comment"># 1. 実行オプションの設定</span></span><br><span class="line">    options.runner = <span class="string">&quot;DirectRunner&quot;</span>  <span class="comment"># Runnerもここで決めている</span></span><br><span class="line"></span><br><span class="line">    p = beam.Pipeline(options=options)  <span class="comment"># 1. Pipelineの生成</span></span><br><span class="line"></span><br><span class="line">    (</span><br><span class="line">        p</span><br><span class="line">        | <span class="string">&quot;ReadFromText&quot;</span> &gt;&gt; beam.io.ReadFromText(<span class="string">&quot;./input.txt&quot;</span>)  <span class="comment"># 2. input.txtから最初のPCollectionを生成</span></span><br><span class="line">        | <span class="string">&quot;ComputeWordLength&quot;</span> &gt;&gt; beam.ParDo(ComputeWordLength())  <span class="comment"># 3. PTransformの適用</span></span><br><span class="line">        | <span class="string">&quot;WriteToText&quot;</span> &gt;&gt; beam.io.WriteToText(<span class="string">&quot;./output&quot;</span>, file_name_suffix=<span class="string">&quot;.txt&quot;</span>, shard_name_template=<span class="string">&quot;&quot;</span>)  <span class="comment"># 4. output.txtへPCollectionの書き込み</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    p.run()  <span class="comment"># 5. RunnerでPipelineを実行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>例えば、以下のようなinput.txtに対して、上のコードを実行すると</p><figure class="highlight text"><figcaption><span>input.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello World!</span><br><span class="line">foo bar</span><br><span class="line">hoge hoge</span><br></pre></td></tr></table></figure><p>以下のようなoutput.txtが生成されます。</p><figure class="highlight text"><figcaption><span>output.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">7</span><br><span class="line">9</span><br></pre></td></tr></table></figure><p>Apache Beamのパイプライン処理はLinuxコマンドのパイプライン処理と同じように</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pipeline | PTransform1 | PTransform2 | ...</span><br></pre></td></tr></table></figure><p>と記述します。Pipelineのインスタンスがパイプラインのスタートとなります。<br>また、パイプライン内の各Transformにはラベルが割り振られ、コード中で明示的にラベルを与えなかった場合には、そのTransform自体がラベルとなります。<br>パイプライン内に同一のラベルを持つTransformが存在してしまうと、エラーとなってしまうため注意です。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p</span><br><span class="line">| <span class="string">&quot;ReadFromText&quot;</span> &gt;&gt; beam.io.ReadFromText(<span class="string">&quot;./input.txt&quot;</span>)  <span class="comment"># このTransformのラベルは&quot;ReadFromText&quot;</span></span><br><span class="line">| <span class="string">&quot;ComputeWordLength&quot;</span> &gt;&gt; beam.ParDo(ComputeWordLength()) <span class="comment"># このTransformのラベルは&quot;ComputeWordLength&quot;</span></span><br><span class="line">| beam.Map(<span class="built_in">print</span>)  <span class="comment"># この場合は&quot;Map(print)&quot;がラベルとなる。</span></span><br></pre></td></tr></table></figure><h2 id="パイプラインの分岐・合流"><a href="#パイプラインの分岐・合流" class="headerlink" title="パイプラインの分岐・合流"></a>パイプラインの分岐・合流</h2><p>Apache Beamは一直線のパイプラインだけでなく、分岐や合流を含む複雑なパイプラインを構成できます。<br>パイプラインを分岐させたい場合には、分岐の直前までを変数に代入することで、その変数をスタートとしてパイプラインの分岐させることができます。</p><figure class="highlight python"><figcaption><span>beam_branch.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> apache_beam <span class="keyword">as</span> beam</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">with</span> beam.Pipeline() <span class="keyword">as</span> p:</span><br><span class="line">        input_data = (  <span class="comment"># 分岐を直前までの処理を変数(input_data)に代入</span></span><br><span class="line">            p</span><br><span class="line">            | <span class="string">&quot;Create&quot;</span> &gt;&gt; beam.Create([</span><br><span class="line">                &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;height&quot;</span>: <span class="number">165</span>, <span class="string">&quot;weight&quot;</span>: <span class="number">49</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;height&quot;</span>: <span class="number">171</span>, <span class="string">&quot;weight&quot;</span>: <span class="number">60</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Charlie&quot;</span>, <span class="string">&quot;height&quot;</span>: <span class="number">184</span>, <span class="string">&quot;weight&quot;</span>: <span class="number">76</span>&#125;</span><br><span class="line">            ])</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        height_average = (</span><br><span class="line">            input_data  <span class="comment"># input_dataから分岐後の処理(身長の平均算出)を記述</span></span><br><span class="line">            | <span class="string">&quot;Extract height&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: x[<span class="string">&quot;height&quot;</span>])</span><br><span class="line">            | <span class="string">&quot;Compute mean height&quot;</span> &gt;&gt; beam.combiners.Mean.Globally()</span><br><span class="line">            | <span class="string">&quot;Print mean height&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: <span class="built_in">print</span>(<span class="string">&quot;height average =&quot;</span>, x))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        weight_average = (</span><br><span class="line">            input_data  <span class="comment"># input_dataから分岐後の処理(体重の平均算出)を記述</span></span><br><span class="line">            | <span class="string">&quot;Extract weight&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: x[<span class="string">&quot;weight&quot;</span>])</span><br><span class="line">            | <span class="string">&quot;Compute mean weight&quot;</span> &gt;&gt; beam.combiners.Mean.Globally()</span><br><span class="line">            | <span class="string">&quot;Print mean weight&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: <span class="built_in">print</span>(<span class="string">&quot;weight average =&quot;</span>, x))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="comment"># height average = 173.33333333333334</span></span><br><span class="line"><span class="comment"># weight average = 61.666666666666664</span></span><br></pre></td></tr></table></figure><p>この場合、パイプラインのグラフは次のようになります。<br><img src="/images/20220920a/caf53485-704f-545e-4c3d-119c96a1615e.png" alt="" width="880" height="926" loading="lazy"></p><p>また、合流させたい場合には、<code>beam.Flatten()</code>を使うことで、分岐したパイプラインを合流させることができます。上の分岐のコードではターミナルへの出力を別々にやっていましたが、下の例では<code>height_average</code>と<code>weight_average</code>を合流させて、ターミナルへの出力を一括化しています。</p><figure class="highlight python"><figcaption><span>beam_merge.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> apache_beam <span class="keyword">as</span> beam</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">with</span> beam.Pipeline() <span class="keyword">as</span> p:</span><br><span class="line">        input_data = (</span><br><span class="line">            p</span><br><span class="line">            | <span class="string">&quot;Create&quot;</span> &gt;&gt; beam.Create([</span><br><span class="line">                &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Alice&quot;</span>, <span class="string">&quot;height&quot;</span>: <span class="number">165</span>, <span class="string">&quot;weight&quot;</span>: <span class="number">49</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;height&quot;</span>: <span class="number">171</span>, <span class="string">&quot;weight&quot;</span>: <span class="number">60</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Charlie&quot;</span>, <span class="string">&quot;height&quot;</span>: <span class="number">184</span>, <span class="string">&quot;weight&quot;</span>: <span class="number">76</span>&#125;</span><br><span class="line">            ])</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        height_average = (</span><br><span class="line">            input_data</span><br><span class="line">            | <span class="string">&quot;Extract height&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: x[<span class="string">&quot;height&quot;</span>])</span><br><span class="line">            | <span class="string">&quot;Compute mean height&quot;</span> &gt;&gt; beam.combiners.Mean.Globally()</span><br><span class="line">            | <span class="string">&quot;Add height key&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: (<span class="string">&quot;height&quot;</span>, x))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        weight_average = (</span><br><span class="line">            input_data</span><br><span class="line">            | <span class="string">&quot;Extract weight&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: x[<span class="string">&quot;weight&quot;</span>])</span><br><span class="line">            | <span class="string">&quot;Compute mean weight&quot;</span> &gt;&gt; beam.combiners.Mean.Globally()</span><br><span class="line">            | <span class="string">&quot;Add weight key&quot;</span> &gt;&gt; beam.Map(<span class="keyword">lambda</span> x: (<span class="string">&quot;weight&quot;</span>, x))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        print_mean = (</span><br><span class="line">            (height_average, weight_average)  <span class="comment"># 合流させたいPCollectionを()でまとめる</span></span><br><span class="line">            | beam.Flatten()  <span class="comment"># Flatten()で1つのPCollectionにする</span></span><br><span class="line">            | beam.Map(<span class="keyword">lambda</span> x: <span class="built_in">print</span>(x[<span class="number">0</span>], <span class="string">&quot;average =&quot;</span>, x[<span class="number">1</span>]))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="comment"># output</span></span><br><span class="line"><span class="comment"># height average = 173.33333333333334</span></span><br><span class="line"><span class="comment"># weight average = 61.666666666666664</span></span><br></pre></td></tr></table></figure><p>この場合、パイプラインのグラフは次のようになります。<br><img src="/images/20220920a/bd3c7575-0cd5-a2a6-6f31-b6914a43bf50.png" alt="" width="870" height="1438" loading="lazy"></p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>ここまでお読みいただきありがとうございます。稚拙な文章で読みづらい箇所が多々あったかと思います。よければ<a href="/articles/20220920b/">後編</a>もお読みいただければと思います。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://qiita.com/esakik/items/3c5c18d4a645db7a8634">Apache Beam (Dataflow) 実践入門【Python】</a></li><li><a href="https://beam.apache.org/documentation/runtime/model/">How Beam executes a pipeline (公式ドキュメント)</a></li><li><a href="https://cloud.google.com/dataflow/docs/quickstarts/create-pipeline-python">Python を使用して Dataflow パイプラインを作成する</a></li></ul><p>アイキャッチは<a href="https://pixabay.com/ja/users/paulbr75-2938186/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2471293">Paul Brennan</a>による<a href="https://pixabay.com/ja//?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=2471293">Pixabay</a>からの画像です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://engineering.mercari.com/blog/entry/2019-05-30-120000/">メルペイにおけるDataflow Templateの活用</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://cloud.google.com/customers/subaru/?hl=ja">SUBARU：次世代「アイサイト」に向けた AI 開発をマネージドな機械学習プラットフォーム Vertex AI でスピードアップ</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/">インターン</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B32022/">インターン2022</category>
      
      <category domain="https://future-architect.github.io/tags/Dataflow/">Dataflow</category>
      
      <category domain="https://future-architect.github.io/tags/ApacheBeam/">ApacheBeam</category>
      
      
      <comments>https://future-architect.github.io/articles/20220920a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Engineer Camp2022 RustでSQLフォーマッタ作成（後編）</title>
      <link>https://future-architect.github.io/articles/20220916c/</link>
      <guid>https://future-architect.github.io/articles/20220916c/</guid>
      <pubDate>Thu, 15 Sep 2022 15:00:02 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;この記事は&lt;a href=&quot;/articles/20220916b/&quot;&gt;前編&lt;/a&gt;の続きです。この記事では、作成したフォーマッタの実装について説明します。&lt;/p&gt;
&lt;h1 id=&quot;作成したフォーマッタの処理の流れ&quot;&gt;&lt;a href=&quot;#作成したフォーマッタの処理の流れ&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>この記事は<a href="/articles/20220916b/">前編</a>の続きです。この記事では、作成したフォーマッタの実装について説明します。</p><h1 id="作成したフォーマッタの処理の流れ"><a href="#作成したフォーマッタの処理の流れ" class="headerlink" title="作成したフォーマッタの処理の流れ"></a>作成したフォーマッタの処理の流れ</h1><p>前編でも示しましたが、今回作成したフォーマッタの処理の流れを再度示します。</p><img src="/images/20220916c/nagare.png" alt="" width="960" height="228" loading="lazy"><h1 id="使用した技術"><a href="#使用した技術" class="headerlink" title="使用した技術"></a>使用した技術</h1><p>フォーマッタの実装にはRustを使用し、構文解析にはtree-sitter-sqlを使用しました。</p><h3 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h3><img src="/images/20220916c/rustacean.png" alt="" width="400" height="266" loading="lazy"><p>高速で、かつwasm-packなどのライブラリを用いてWebAssembly化することができることから、様々なプラットフォームで動作するため、Rustを採用しました。</p><h3 id="tree-sitter-sql"><a href="#tree-sitter-sql" class="headerlink" title="tree-sitter-sql"></a><a href="https://github.com/m-novikov/tree-sitter-sql">tree-sitter-sql</a></h3><p><a href="https://tree-sitter.github.io/tree-sitter/">tree-sitter</a>で出力されたSQLパーサです。tree-sitterとは作成した文法ファイルからパーサを自動生成するパーサジェネレータの1つです。一般的なパーサライブラリは抽象構文木(AST)を出力するのに対して、tree-sitter-sqlは具象構文木(CST)を出力します。ASTが意味のない情報(例: コメントや多重括弧など)を保持しないのに対して、CSTはそのような情報も保持します。</p><p>今回作成するフォーマッタではコメントや括弧の情報を使用したいため、CSTを出力することができるtree-sitter-sqlを採用しました。</p><h1 id="フォーマット用の構造体の作成"><a href="#フォーマット用の構造体の作成" class="headerlink" title="フォーマット用の構造体の作成"></a>フォーマット用の構造体の作成</h1><p>行末に現れるコメントの取得や縦揃えの機能を実現するために、tree-sitter-sqlから得られたCSTをそのまま使用するのではなく、CSTのノードをDFS(深さ優先探索)で辿り、フォーマット用の構造体を用いて再構成しました。<br>次のような構造体を定義しています。</p><figure class="highlight rust"><figcaption><span>定義した構造体の例(一部省略)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文</span></span><br><span class="line"><span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) <span class="keyword">struct</span> <span class="title class_">Statement</span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="comment">// 句</span></span><br><span class="line"><span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) <span class="keyword">struct</span> <span class="title class_">Clause</span> &#123; <span class="comment">/* ... */</span>&#125;</span><br><span class="line"><span class="comment">// 句の本体</span></span><br><span class="line"><span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) <span class="keyword">enum</span> <span class="title class_">Body</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="comment">// エイリアス式、演算式、行末コメントを含む式</span></span><br><span class="line"><span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) <span class="keyword">struct</span> <span class="title class_">AlignedExpr</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="comment">// 式</span></span><br><span class="line"><span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) <span class="keyword">enum</span> <span class="title class_">Expr</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// その他の式、Bodyは省略</span></span><br></pre></td></tr></table></figure><p>実装した構造体について、一部抜粋して説明します。</p><h3 id="Clause構造体"><a href="#Clause構造体" class="headerlink" title="Clause構造体"></a>Clause構造体</h3><figure class="highlight rust"><figcaption><span>Clause構造体</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 句</span></span><br><span class="line"><span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) <span class="keyword">struct</span> <span class="title class_">Clause</span> &#123;</span><br><span class="line">    keyword: <span class="type">String</span>,    <span class="comment">// キーワード (e.g., SELECT, FROM)</span></span><br><span class="line">    body: <span class="type">Option</span>&lt;Body&gt;, <span class="comment">// 句の本体</span></span><br><span class="line">    loc: Location,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Clause</code>構造体は句(e.g., SELECT句、FROM句)に対応した構造体です。現状対応している構文に現れる句は、いずれも以下のような構造をしています。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Keyword</span><br><span class="line">    Body</span><br></pre></td></tr></table></figure><p>e.g., SELECT句</p><figure class="highlight sql"><figcaption><span>SELECT句の例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="comment">/* キーワード */</span></span><br><span class="line"><span class="comment">/* ここから本体 */</span></span><br><span class="line">    ID</span><br><span class="line">,   NAME</span><br><span class="line"><span class="comment">/* ここまで本体 */</span></span><br></pre></td></tr></table></figure><p>そのため、フィールドにはキーワードと本体(<code>Body</code>)を保持させています。<br>詳細は割愛しますが、<code>Body</code>に後述する<code>AlignedExpr</code>を複数保持させることで、複数行の式の縦揃えを実現しています。</p><h3 id="AlignedExpr構造体"><a href="#AlignedExpr構造体" class="headerlink" title="AlignedExpr構造体"></a>AlignedExpr構造体</h3><figure class="highlight rust"><figcaption><span>AlignedExpr</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// エイリアス式、演算式、行末コメントを含む式</span></span><br><span class="line"><span class="title function_ invoke__">pub</span>(<span class="keyword">crate</span>) <span class="keyword">struct</span> <span class="title class_">AlignedExpr</span> &#123;</span><br><span class="line">    lhs: Expr,                      <span class="comment">// 左辺</span></span><br><span class="line">    rhs: <span class="type">Option</span>&lt;Expr&gt;,              <span class="comment">// 右辺</span></span><br><span class="line">    op: <span class="type">Option</span>&lt;<span class="type">String</span>&gt;,             <span class="comment">// 演算子(ASや比較演算子)</span></span><br><span class="line">    loc: Location,                  <span class="comment">// ソースコード上の対応位置</span></span><br><span class="line">    trailing_comment: <span class="type">Option</span>&lt;<span class="type">String</span>&gt;,   <span class="comment">// 行末コメント</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AlignedExpr</code>構造体は、現状揃えたいAS句や比較演算子、行末コメントを含む式に対応しています。<br>例えば、以下のSQLを考えてみます。</p><figure class="highlight sql"><figcaption><span>例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">STD.ID<span class="keyword">AS</span>STD_ID<span class="comment">-- 学籍番号</span></span><br><span class="line">,STD.NAME<span class="keyword">AS</span>STD_NAME<span class="comment">-- 名前</span></span><br></pre></td></tr></table></figure><p>今回作成したフォーマッタでは、このように<code>AS</code>と行末のコメントの位置を縦揃えする必要がありました。そこで、揃える対象となる<code>AS</code>や<code>=</code>などの比較演算子、行末のコメントを持つ行(式)を<code>AlignedExpr</code>構造体で表現しています。<br><code>AlignedExpr</code>構造体は、左辺(<code>lhs</code>)、演算子(<code>op</code>)、右辺(<code>rhs</code>)と行末コメント(<code>trailing_comment</code>)をフィールドに保持しています。<br>上の例の学籍番号の行は、左辺が<code>STD.ID</code>、演算子が<code>AS</code>、右辺が<code>STD_ID</code>、そして行末コメントが<code>-- 学籍番号</code>であるような<code>AlignedExpr</code>のインスタンスです。<br>フォーマットを行う際には、左辺や右辺の長さを参照して縦揃えを実現しています。具体的な縦揃えの方法は後述します。</p><h1 id="コメントノードの処理"><a href="#コメントノードの処理" class="headerlink" title="コメントノードの処理"></a>コメントノードの処理</h1><p>コメントの情報はCST上に保持されますが、直感的でない位置に現れてしまう場合があります。そのため、それに対応する処理を行います。例として以下のようなSQL文を考えます。</p><figure class="highlight sql"><figcaption><span>行末に現れるコメント</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">ID</span><br><span class="line">,   GRADE <span class="comment">-- 成績</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><figcaption><span>次以降の行に現れるコメント</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ID</span><br><span class="line">,   GRADE</span><br><span class="line"><span class="comment">/* <span class="doctag">TODO:</span> add NAME */</span></span><br></pre></td></tr></table></figure><p>これらのSQLをtree-sitter-sqlでパースすると、どちらも以下のようなCSTが構築されます。</p><img src="/images/20220916c/syntax_tree-Comment_tech.drawio_(3).png" alt="syntax_tree-Comment_tech.drawio_(3).png" width="582" height="222" loading="lazy"><p>これは、パース時にコメントの位置等を考慮しておらず、コメントの意味まで解釈できないためです。<br>下のSQLはこの木構造で問題ありませんが、上のSQLでは、<code>GRADE</code>とその末尾コメントである<code>-- 成績</code>がまとまっていたほうが直感的です。そこで、私たちのフォーマッタではCSTを走査する段階で、行末コメントとその行の式を対応付けています。<br>これからその対応付けの方法について説明します。例として以下のSQLを考えます。</p><figure class="highlight sql"><figcaption><span>行末に現れるコメント</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">ID</span><br><span class="line">,   GRADE <span class="comment">-- 成績</span></span><br></pre></td></tr></table></figure><p>このSQL文をtree-sitter-sqlでパースすると、以下のようなCSTが出力されます。</p><img src="/images/20220916c/syntax_tree-Comment_tech.drawio_(2).png" alt="syntax_tree-Comment_tech.drawio_(2).png" width="581" height="222" loading="lazy"><p>出力されたCSTでは<code>GRADE</code>のコメントである<code>-- 成績</code>が<code>ファイル</code>ノードの子ノードになってしまっています。パーサーではコメントの意味まで解釈することができないため、このような直感的でない木構造になってしまうことがあります。<br>この離れた位置にある2つのノードを同じ<code>AlignedExpr</code>構造体に格納する方法について説明します。<br>まずCST上の<code>GRADE</code>ノードまで深さ優先探索順に辿ります。</p><img src="/images/20220916c/syntax_tree-to_comment.drawio_(1).png" alt="syntax_tree-to_comment.drawio_(1).png" width="581" height="222" loading="lazy"><p><code>GRADE</code>ノードを辿り終わった時点での自作構造体は以下のようになります。</p><img src="/images/20220916c/syntax_tree-to_ID.drawio_(3).png" alt="syntax_tree-to_ID.drawio_(3).png" width="381" height="211" loading="lazy"><p>この状態で次のノードへ辿ると、コメントノードが出現します。</p><img src="/images/20220916c/syntax_tree-Comment_tech.drawio_(2)_2.png" alt="syntax_tree-Comment_tech.drawio_(2).png" width="581" height="222" loading="lazy"><p>コメントノードが出現した時点の自作構造体を参照し、自作構造体の一番最後の子とコメントが同じ行であれば<code>trailing_comment</code>にコメントを追加します。今回の例では<code>GRADE</code>を左辺として持っている<code>aligned_expr</code>に<code>-- 成績</code>を追加します。</p><img src="/images/20220916c/syntax_tree-to_comment.drawio_(2).png" alt="syntax_tree-to_comment.drawio_(2).png" width="396" height="282" loading="lazy"><h1 id="レンダリング時の処理"><a href="#レンダリング時の処理" class="headerlink" title="レンダリング時の処理"></a>レンダリング時の処理</h1><p>先述したように構文木を再構築し、最後にレンダリングをして整形されたSQL文を出力します。このときにインデントの調整や縦揃えのためにタブ文字を適切な数挿入します。</p><p>挿入するタブ文字の計算について説明します。例えば以下のようなSQLで、タブ幅4の場合を考えます。</p><figure class="highlight sql"><figcaption><span>例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    LONGLONGTABLE   LLTB</span><br><span class="line">,   TABLE1          TB1</span><br></pre></td></tr></table></figure><img src="/images/20220916c/calc_tab_1.png" alt="calc_tab_1.png" width="846" height="183" loading="lazy"><p>テーブル名を左辺、エイリアスを右辺として説明します。<br>上の行の左辺(<code>LONGLONGTABLE</code>)は13文字で、これにタブを1つ加えた16文字の位置から右辺(<code>LLTB</code>)が開始します。上の行の右辺の開始位置、すなわち16文字の位置に下の行の右辺(<code>TB1</code>)の開始位置が合わさるようにタブ文字を挿入します。</p><img src="/images/20220916c/calc_tab_2.png" alt="calc_tab_2.png" width="842" height="231" loading="lazy"><p>下の行の左辺(<code>TABLE1</code>)は6文字であるため、今回の例ではタブ文字を3つ挿入することで右辺の位置が揃います。<br>このように、合わせたい部分における最長の左辺の長さを利用して、以下の式で各行で挿入するタブ文字の数を計算します。求めた数タブ文字を挿入することで縦揃えを実現できます。</p><p><code>(左辺のタブ長) = ((文字列の長さ) / TAB_SIZE) + 1</code><br><code>(挿入するタブ文字の数) = ((左辺のタブ長最大値) - (合わせたい行の左辺のタブ長))</code></p><p>同様の処理を行うことで、コメント、演算子も縦揃えをすることができます。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>最後に本インターンの感想です。</p><h2 id="インターンの感想-川渕"><a href="#インターンの感想-川渕" class="headerlink" title="インターンの感想 (川渕)"></a>インターンの感想 (川渕)</h2><p>今回のインターンでは齋藤さんとペアで設計~開発を行っていたため、お互いが何を考えているかを詳細に把握する必要がありました。また、毎日のミーティングで受け入れ先のプロジェクトの方に成果報告をする場面では、自分の頭の中を説明する難しさを改めて実感しました。このようなことから、相手にわかりやすく伝えることの難しさと大切さを実感したので、これから意識して伝える力を向上させたいと思いました。</p><p>今回のインターンは4週間あり、始まる前は長いと感じていましたが、いざ始まってみると毎日充実しており、あっという間に過ぎてしまいました。受け入れ先のプロジェクトの方をはじめとしたFUTUREの方が楽しく成長できるように工夫していただいたからだと思います。4週間本当に楽しかったです！ありがとうございました！</p><h2 id="インターンの感想-齋藤"><a href="#インターンの感想-齋藤" class="headerlink" title="インターンの感想 (齋藤)"></a>インターンの感想 (齋藤)</h2><p>私(齋藤)は研究で構文解析を扱っており、その経験が生かせると考えて本インターンシップに参加しました。実際の業務の中では、使用する構文解析ソフトウェアの選定や構文解析結果を利用したフォーマッタの開発など、構文解析に関する知識が生かせる業務が多くありました。</p><p>このようなニッチな技術・分野は直接ビジネスにかかわってくるとは限りませんが、業務改善などの点でビジネスを支える重要な技術であるということを実感できました。<br>他にもチーム開発の経験が得られたり、フューチャーの社風を肌で感じることができ、様々なことを学ばせていただきました。4週間本当にありがとうございました！</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>今回はフォーマッタの作成を行いました。タスク外でも他のプロジェクトの参加者とのコミュ会やディナー等たくさんのイベントを開いていただきました。</p><p>受け入れてくれたコアテクの皆さん、HRの皆さん、Engineer Camp2022に参加していたインターン生の皆さんに感謝します。<br>4週間本当にありがとうございました！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/SQL/">SQL</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/">インターン</category>
      
      <category domain="https://future-architect.github.io/tags/Rust/">Rust</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B32022/">インターン2022</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%82%BF%E3%83%BC/">フォーマッター</category>
      
      
      <comments>https://future-architect.github.io/articles/20220916c/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
