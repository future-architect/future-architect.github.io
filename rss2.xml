<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Tue, 26 Apr 2022 01:41:56 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>ソフトウェアのバージョンと開発スタイルの関係について</title>
      <link>https://future-architect.github.io/articles/20220426a/</link>
      <guid>https://future-architect.github.io/articles/20220426a/</guid>
      <pubDate>Mon, 25 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>初めまして、TIGに所属している原木と申します。<br>バージョンという言葉を身近に聞いたり、体感することは多いのではないでしょうか？</p><ul><li>霜踏み弱体化前のバージョンでRTAの記録をたたき出したらしいね。最新版ならどんなビルドがおすすめだと思う？(執筆時は三月でした)</li><li>今日新作ゲームが配信されるぞ、帰ったら遊ぶんだ…ネットワーク機能を使うためには”本体の更新が必要です。更新しますか?”</li></ul><p>ソフトウェア開発においてもバージョンは決して避けて通ることはできません。しかし、プログラムにバージョンをつける側に立ってみると、そもそもバージョンとは何なのでしょうか？ふわっと考え出すとわりときりがないと思います。</p><ul><li>バージョンの付け方ってどんなルールがあるのだろうか？</li><li>バージョンをつけるタイミングは？</li><li>バージョンってだいたいどれくらいの期間で上がるのだろう？</li><li>バージョンって1(or0.1)から始めないといけないのか？</li><li>バージョンが何回更新されるまで同じソフトウェアだと言えるのだろうか？</li></ul><p>本記事ではソフトウェア開発において、避けて通ることのできないソフトウェアのバージョンについてそんな疑問に答えていきたいと思います。</p><h1 id="セマンティックバージョニング"><a href="#セマンティックバージョニング" class="headerlink" title="セマンティックバージョニング"></a>セマンティックバージョニング</h1><p>ソフトウェアのバージョンに関する命名規則は、昔から開発者の心をつかんで離さない、ホットトピックの一つです。</p><p><a href="https://en.wikipedia.org/wiki/Software_versioning">Software versioning</a>というウィキペディアの記事を見ると、古今東西、ソフトウェアのバージョン管理方法として様々な手法が試されてきたことがわかります。その中でも、今日特によく目にするのがセマンティックバージョニングです。</p><blockquote><p>コンテナオーケストレーションを実現するKubernetesの最新版となる「<strong>Kubernetes 1.23</strong>」正式版がリリースされました。<br><a href="https://www.publickey1.jp/blog/21/kubernetes_123ipv4v6podapiv2kubelet_cri_api.html">https://www.publickey1.jp/blog/21/kubernetes_123ipv4v6podapiv2kubelet_cri_api.html</a></p></blockquote><blockquote><p>プログラミング言語「Go」の最新版「<strong>Go 1.18</strong>」が、3月15日にリリースされた。<br><a href="https://forest.watch.impress.co.jp/docs/news/1395812.html">https://forest.watch.impress.co.jp/docs/news/1395812.html</a></p></blockquote><p>ソフトウェアのバージョンにおいて、昨今ではこのように小数点を突き抜けてる書き方をよく目にする機会が多いと思います。<br>この表記方法をセマンティックバージョニングといいます。Githubの共同創業者であるTom Preston Werner氏が2010年に提唱し、GitHub上のオープンソースソフトウェア(OSS)等で広く使われるようになりました。</p><p>セマンティックバージョニングでは、 X.Y.Z (Major.Minor.Patch)というフォーマットで書きます。具体的な説明として、Go言語のモジュールにおけるバージョン番号の付け方に関する説明から引用します。</p><p><a href="https://go.dev/doc/modules/version-numbers">https://go.dev/doc/modules/version-numbers</a></p><blockquote><p>リリースされたモジュールは、下図のようにセマンティックバージョンニング・モデルでバージョン番号を付けて公開されます。<br><img src="/images/20220426a/image.png" alt="セマンティックバージョニング" width="512" height="160" loading="lazy"><br>次の表は、バージョン番号の各パーツが、モジュールの安定性と後方互換性をどのように示すかを説明したものです。</p><div class="scroll"><table><thead><tr><th align="left">バージョンの段階</th><th align="left">例</th><th align="left">開発者へのメッセージ</th></tr></thead><tbody><tr><td align="left">開発中</td><td align="left">自動的な疑似バージョン番号 v<strong>0</strong>.x.x</td><td align="left">このモジュールが<strong>まだ開発中であり、不安定であること</strong>を示します。このリリースは、後方互換性や安定性を保証しません。</td></tr><tr><td align="left">メジャーバージョン</td><td align="left">v<strong>1</strong>.x.x</td><td align="left"><strong>後方互換性のない、公開APIの変更</strong>を示します。このリリースは、以前のメジャーバージョンとの後方互換性を保証しません。</td></tr><tr><td align="left">マイナーバージョン</td><td align="left">vx.<strong>4</strong>.x</td><td align="left"><strong>後方互換性のある、公開APIの変更</strong>を示します。このリリースは後方互換性と安定性を保証します。</td></tr><tr><td align="left">パッチバージョン</td><td align="left">vx.x.<strong>1</strong></td><td align="left"><strong>モジュールの公開APIや依存関係に影響を与えない変更</strong>を示します。このリリースは後方互換性と安定性を保証します。</td></tr><tr><td align="left">プレリリースバージョン</td><td align="left">vx.x.x-<strong>beta.2</strong></td><td align="left"><strong>アルファ版やベータ版のような、リリース前のマイルストーンであること</strong>を示します。このリリースは安定性を保証しません。</td></tr></tbody></table></div></blockquote><p>新しいバージョンのソフトウェアを公開した時は、通常パッチを出さないため(ゲームだと即日同時リリースだったりしますが….)、最後のZを省略してX.Yと書くことが多いです。先ほどの例も厳密にはGo 1.18.0、 Kubernetes 1.23.0ですが、最後のパッチバージョンを省略したため、小数点だけど小数点じゃない、そんな見え方になっていたのでした。</p><p>ソフトウェアのバージョンの付け方はセマンティックバージョニングだけではありません。例えばLinuxはかつて、バージョンの末尾が偶数か奇数かによってソフトウェアが安定版か不安定版か(ベータ版、開発版に相当)を示していました。Microsoft Windows Vistaが登場するより前の話です。</p><p>バージョニングに関する長い歴史の中で、なぜセマンティックバージョニングがこれだけ普及したのでしょうか? その理由について、<strong>リリース間隔</strong>と<strong>ソフトウェアをとりまくエコシステム</strong>という二つの視点から探ってみました。</p><h1 id="バージョンとリリースの関係"><a href="#バージョンとリリースの関係" class="headerlink" title="バージョンとリリースの関係"></a>バージョンとリリースの関係</h1><p>プログラミング言語には、前述したGo以外にも、RustやRuby等セマンティックバージョニングを採用、準拠したものが少なくありません。試しにRustのバージョンが1.0以降どのように刻まれてきたかプロットしてみました。</p><img src="/images/20220426a/image_2.png" alt="Rustリリース" width="641" height="296" loading="lazy"><p>等間隔にぎっしりであることがわかりますね。<br>比較材料としてJavaのバージョンヒストリーを並べてみるとその違いがよくわかると思います。</p><img src="/images/20220426a/image_3.png" alt="Javaリリース" width="641" height="296" loading="lazy"><p>なぜRustはこんなバージョンの刻み方をしているのでしょうか？</p><p>その理由はRustのリリースサイクル(あるソフトウェアが改修されて次のバージョンが出る前の間隔)にあります。Rust言語とそのコンパイラは6週間で新しいバージョンがリリースされます。つまり、6週間でバージョンが変わってしまうんですね。</p><p>バージョンを0.1、 0.2と刻んでいって0.9まで来たけれども、まだリリースできないから1.0にはしたくない、そんな状況を思い浮かべてみてください。セマンティックバージョニングならば、高頻度でバージョンが更新されてもバージョン間の違いや互換性を破綻なく表すことが可能です。そんなセマンティックバージョニングの恩恵を受けるのは、実は人ではなく機械側なのかもしれません。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>一年間に8回以上バージョンが変わるRustのバージョンヒストリーが人間にとってわかりやすいかというと正直微妙だと思います。"これらを振り返って、「Rust 1.10とRust 1.31を比較すると、すごく変わったねえ！」などとリリースごとに言うのは難しいです。" そこで、**エディション**というさらに視野を広げたパッケージ管理のバージョン単位がRustでは採用されています。</p>  <p><a href="https://doc.rust-jp.rs/book-ja/appendix-05-editions.html">https://doc.rust-jp.rs/book-ja/appendix-05-editions.html</a></p></div><h1 id="エコシステムを支えるセマンティックバージョニング"><a href="#エコシステムを支えるセマンティックバージョニング" class="headerlink" title="エコシステムを支えるセマンティックバージョニング"></a>エコシステムを支えるセマンティックバージョニング</h1><p>昨今のソフトウェアは単一のリポジトリのソースコードからビルドできないこと、実行できないことは珍しくありません。ライブラリを管理しているパッケージマネージャーからダウンロードしたシステムモジュールパッケージ(ライブラリ)であったり、ビルドを行うためのパラメータやテスト環境が組み込まれたビルド用のパイプラインであったり、様々なサービス、別のソフトウェアに支えられてできています。ソフトウェアを取り巻く環境を生態系に例えてエコシステムと呼ぶことがあります。</p><p>このエコシステムにおいて、セマンティックバージョニングは重要な役割を果たしています。</p><p>iOSのネイティブアプリケーション作成などで利用されるプログラミング言語、Swift(金融制裁の方ではなく)のパッケージマネージャーツールであるSwift Package Managerの<a href="https://github.com/apple/swift-package-manager/tree/main/Documentation">README.md</a>を見ると、このバージョン指定を雑に行った結果、”依存性地獄(Dependency Hell)”に陥ってしまったユーザーシナリオが紹介されています。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>OSS全盛期の昨今、アプリケーションがとあるライブラリを呼び出し、そのライブラリがまた別のライブラリを呼び出し...とマトリョーシカみたいになっていることは珍しくありません。このソフトウェアが動くために別のライブラリが必要な状況を 依存関係(Dependency) と呼びます。ライブラリがお互いに依存関係を持つとどうなってしまうでしょうか？身動きが取れませんよね。立派な依存地獄の完成です。(このケースだけを指して循環参照なんていうこともあります)</p></div><p>その一つにバージョンの固定があります。意外に思われるかもしれませんが、ライブラリのバージョンをガチガチに固定することはあまり望ましくありません。</p><p>例えば、文字を解析するライブラリであるパーサーがあったとしましょう。このパーサーを利用する、ログ出力ライブラリとファイル解析ライブラリを組み込んだアプリケーションを開発します。</p><p>しかし、問題が発覚しました。ログ解析のライブラリを作ったときはパーサーv2.0.1が最新で、ファイル処理のライブラリを作ったときにはパーサーv2.0.2が最新だったので、最新のバージョンを指定したのですが、二つのライブラリを同時に使うことを想定していなかったのです。この場合、パーサーはどちらのバージョンを指定すればいいでしょうか？</p><img src="/images/20220426a/ライブラリ依存ツリー1.svg" alt="ライブラリ依存ツリー1" width="606" height="208" loading="lazy"><p>めんどくさいし、二つのバージョンのパーサーをいれてビルドしてしまえ…アプリケーションでエラーが起きました。v2.0.1とv2.0.2はほとんどのソースコードが一緒なので、メソッド名やクラス名が重複してしまったからです。</p><img src="/images/20220426a/ライブラリ依存ツリー2.svg" alt="ライブラリ依存ツリー2" width="585" height="206" loading="lazy"><p>これに対する解決策の一つとしてセマンティックバージョニングの活用があります。機能やIFといった大まかに変わらない範囲内でバージョンをゆるーく設定することで依存性地獄を回避することができます。</p><p>Swift Package Managerで、v2.0.0~v2.0.1までのバージョンで最新のライブラリを指定する方法を下記に示します。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PackageDescription</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> package <span class="operator">=</span> <span class="type">Package</span>(</span><br><span class="line">    name: <span class="string">&quot;Parser&quot;</span>,</span><br><span class="line">    <span class="comment">// いろいろな書き方があります</span></span><br><span class="line">    dependencies:</span><br><span class="line">        <span class="comment">// v2.0.0以上v2.1.0未満の最新バージョンを指定する</span></span><br><span class="line">        .<span class="type">Package</span>(url: <span class="string">&quot;git@github.com:foo/ParserPackage1.git&quot;</span>, versions: <span class="string">&quot;2.0.0&quot;</span><span class="operator">..&lt;</span><span class="string">&quot;2.1.0&quot;</span>)</span><br><span class="line">        <span class="comment">// メジャーバージョン2, マイナーバージョン0に合致する最新バージョンを指定する</span></span><br><span class="line">        .<span class="type">Package</span>(url: <span class="string">&quot;git@github.com:foo/ParserPackage2.git&quot;</span>, majorVersion: <span class="number">2</span>, minor: <span class="number">0</span>)</span><br><span class="line">    ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="開発時とリリース時"><a href="#開発時とリリース時" class="headerlink" title="開発時とリリース時"></a>開発時とリリース時</h1><p>今までセマンティックバージョニングについて説明してきましたが、ソフトウェアがリリースされた後につけるバージョンを前提に話を進めてきました。</p><p>日常的に目にするソフトウェアは、テストがちゃんと行われて動くようになったから一般的に広く使っていいよということが保障されています。これをGA版(General Availability)といいます。</p><p>GAがあるのであれば、当然GAじゃない、開発途中に対する呼び名もあります。</p><blockquote><p>アプリケーションソフトウェアの開発は、さまざまな状態／段階を経て完成します。<br>その段階／状態と、リリース後の状態／段階を示したのが、バージョン表記です。<br>Pre-Alpha（Nightly Build）<br>Alpha<br>Beta<br>RC（Release Candidate）<br>RTM（Release to Manufacturing）または、GM（Golden Master）<br>GA（General Availability）<br><a href="https://atmarkit.itmedia.co.jp/ait/articles/1003/26/news106.html">https://atmarkit.itmedia.co.jp/ait/articles/1003/26/news106.html</a></p></blockquote><p>リリース時とは異なり、リリースするまでの開発時につけるバージョンはセマンティックバージョニングに完全に従うよりも、開発現場の都合を優先することが多いと個人的に思います。</p><p>筆者が以前お世話になっていたところでは、Kubernetes環境で動くコンテナイメージのバージョンについて開発中は、カレンダーの日付とgitのコミットのハッシュ値を組み合わせたものを使用していました。</p><p>コンテナイメージをpushするためのコンテナイメージレジストリを定期的に掃除して、ストレージ容量を抑える必要があったのですが、カレンダーの日付が先頭にあれば古いものを消すときに指定が楽だったからです。</p><p>もちろん、セマンティックバージョニングの枠組みでバージョンを運用することもあります。</p><p>例えば前述したRustでは、<code>stable</code>というバージョン以外に<br><code>nightly</code>ビルドという毎日その日の夜に毎晩ビルドしたバージョンと<br><code>beta</code>ビルドという次のリリース機能がお試しで入ったバージョンがあります。<br>セマンティックバージョニングのプレリリースバージョンに続けて<br>ソースコードのリリース日とgitのハッシュ値が表示されるため、わかりやすいものとなっています。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">soharaki@NOTE:~/work$ rustc --version</span><br><span class="line">rustc 1.59.0 (9d1b2106e 2022-02-23)</span><br><span class="line"></span><br><span class="line">soharaki@NOTE:~/work$ rustc --version</span><br><span class="line">rustc 1.60.0-beta.6 (7bccde197 2022-03-22)</span><br><span class="line"></span><br><span class="line">soharaki@NOTE:~/work$ rustc --version</span><br><span class="line">rustc 1.61.0-nightly (1d9c262ee 2022-03-26)</span><br></pre></td></tr></table></figure><h1 id="開発プロセスとバージョンの関係"><a href="#開発プロセスとバージョンの関係" class="headerlink" title="開発プロセスとバージョンの関係"></a>開発プロセスとバージョンの関係</h1><p>ソフトウェアをどういう過程で開発し、リリースするか？この一連の流れを開発プロセスといいます。アジャイルやウォーターフォールは開発プロセスの具体的なやり方の一つです。</p><p>この開発プロセスとバージョンには大きくかかわりがあります。</p><p>例えば、 ECMAScript（エクマスクリプト）の略称で知られる、JavaScriptの標準規格があります。このECMAScript、途中まではES1, ES2, というバージョン表記でしたが途中で名前がES2015, ES2016という風に名前が変わりました。</p><p>バージョンのタイムラインをここで見てみましょう。</p><img src="/images/20220426a/image_4.png" alt="ECMAScriptリリース" width="641" height="296" loading="lazy"><p>バージョン間隔が飛び飛びですが2015年を境にほぼ等間隔になっていることがわかります。</p><p>現在のECMAScriptはTC39という専門委員会が新しい仕様を一年かけてブラッシュアップして、その上の組織にあたるEcma Internationalが一年に一回、総会(General Assembly)にて採択しています。しかし、かつては様々な混乱があり、採択できないことが多々ありました。一年に一回、ちゃんと仕様書として出せるように策定プロセスが整ったのは2015年のことです。それ以降、ES2016、ES2017..と年がバージョン名として採用されるようになりました。</p><p>最新版のES2021/2022については、柏木さんが詳しく解説しています。<br><a href="https://future-architect.github.io/articles/20210617a/">https://future-architect.github.io/articles/20210617a/</a></p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>ES4は意見がまとまらず途中で放棄されたため、仕様書はドラフト版しか存在しません。</p></div><br><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span>  <p>前述のJava(JDK)もある時期を境に開発プロセス、リリースの間隔を変更しています。</p>  <p><a href="https://www.oracle.com/jp/technical-resources/article/java/ja-topics/jdk-release-model.html">https://www.oracle.com/jp/technical-resources/article/java/ja-topics/jdk-release-model.html</a></p></p></div><p>ソフトウェアや開発体制が成熟したことで、バージョンアップが遅くなったソフトウェアもあれば、早くなったソフトウェアもあります。例えば、Rustは実は開発当初、12週間のリリースサイクルを採用していました。ですが、GA版を迎えたことで、変化を迎えます。</p><p>Rustをより早いスピードで機能開発し、同時に安定性を求めるため「リリーストレイン」という開発手法を採用しました。</p><p>…その結果、Rustは6週間!!という間隔でバージョンアップを行うようになります。<br><a href="https://rust-lang.github.io/rfcs/0507-release-channels.html">https://rust-lang.github.io/rfcs/0507-release-channels.html</a></p><p>「リリーストレイン」では数週間から数か月という短い時間の中で、決まった期間にソフトウェアのリリースを行っていきます。「リリーストレイン」自体が安定した定期的なリリースを実現するための手法ではありますが、なぜRustではより短い時間間隔を採用したのでしょうか？</p><h1 id="ソフトウェアの更新頻度と人気の関係"><a href="#ソフトウェアの更新頻度と人気の関係" class="headerlink" title="ソフトウェアの更新頻度と人気の関係"></a>ソフトウェアの更新頻度と人気の関係</h1><p>OSSの人気を集める上で、バージョン更新の頻度自体が欠かせない要素かもしれません。</p><p>ここにGitHub上のJaraライブラリをベースに、バージョン更新がAPIの互換性、そしてライブラリを利用するユーザーにどれくらい影響を与えているかを調べた2017年の調査論文があります。</p><p><a href="https://ieeexplore.ieee.org/document/7884616">Historical and Impact Analysis of API Breaking Changes: A Large-Scale Study</a></p><p>この論文によると、実世界の317のJavaライブラリ、9000のリリース、26万のクライアントアプリケーションを対象とした大規模な分析により、<br>(i) API変更の14.78%は旧バージョンとの互換性を破壊していること<br>(ii) API変更の破壊頻度は時間とともに増加すること<br>(iv) API変更の破壊頻度が高いシステムほど大規模、人気、活発であること<br>などがわかったそうです。</p><p>要はバージョン更新の頻度が大きく修正を要求されるソフトウェアほど、より利用者に人気であり、開発に協力してくれる人も集めていたというものです。変化し続けるマインドを持つOSSがプロジェクトもコミュニティも成長することができると言いきっていいのかもしれません。</p><p>逆に言えば、ソフトウェアを安定的に塩漬けしたい、そういった作業に従事していただける開発者をOSSにおいて求めるのは、文化的にも人材的にも難しいという現実があります。</p><p>例えば、Go言語の父とも呼ばれるRob Pike氏は、Go言語にLTSがほしいというissueに対して次の通り回答しています。</p><blockquote><p>また、ソフトウェアのビルドに必要なライブラリやその他の依存物の一式をサポートする必要があります。今なら、1.16からのコアライブラリが古いコンパイラで引き続きコンパイルされ、正しく動作することを期待するのは、大きな要求ではありますが、妥当なことかもしれません。しかし、それにはサポートを継続することに同意する貢献者文化も必要です。それを実現するのはかなり難しいようです。<br><a href="https://github.com/golang/go/issues/47942#issuecomment-905184706">https://github.com/golang/go/issues/47942#issuecomment-905184706</a></p></blockquote><img src="/images/20220426a/image_5.png" alt="Goリリース" width="641" height="296" loading="lazy"><h1 id="バージョン更新が当たり前の世界で守りたい約束"><a href="#バージョン更新が当たり前の世界で守りたい約束" class="headerlink" title="バージョン更新が当たり前の世界で守りたい約束"></a>バージョン更新が当たり前の世界で守りたい約束</h1><blockquote><p>semver(セマンティックバージョニングのこと)は実際のところ、<br>メジャーバージョンアップ: 「おそらく多くの場所でコードの更新が必要になるだろう」、<br>マイナーバージョンアップ: 「ほとんどの部分で常に問題がないはずだ」<br>ということを意味します。</p><p><a href="https://github.com/microsoft/TypeScript/issues/14116#issuecomment-292581018">https://github.com/microsoft/TypeScript/issues/14116#issuecomment-292581018</a><br>※なぜTypeScriptはセマンティックバージョニングを採用しないのか？という質問に対する中の人の解答</p></blockquote><p>セマンティックバージョニングを単純に採用するだけでは、ソフトウェアの安定性や互換性を担保するものにはなりません。コンベンショナルコミットといったソースコードの修正をわかりやすくするコメントの書き方であったり、ビルドパイプラインでテストをなるべく自動化することで意図しない破壊的な修正=デグレを防ぐような仕組みが別途必要です。</p><p>それらの仕組みを設けてセマンティックバージョニングに準じようとしていても開発の過程でマイナーバージョン更新によって今まで使えていたAPIが使えなくなるといったことはあります<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>…ですが、そういった修正を繰り返すと利用者側(開発者も含む)の信用は当然すり減っていきます。</p><p>「メジャーバージョンが変わらないから、影響はそんなにないと思っていたのに…」</p><p>バージョンをパッと見たときのユーザーの暗黙的な期待値を下げないための工夫の一つとして、メジャーバージョンが同じ間は、最低限この機能は影響が及ばないように品質を保証しますといったことをドキュメント化する手立てがあります。</p><p>例えばクラウドの構築などで利用されるTerraformでは”Terraformv1.0の互換性の約束”として、メジャーバージョンが1の間、互換性を維持する内容について明文化しています。<br><a href="https://www.terraform.io/language/v1-compatibility-promises">https://www.terraform.io/language/v1-compatibility-promises</a></p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>ソフトウェアのバージョンの付け方について、主にセマンティックバージョニングを中心に開発手法を交えて説明しました。</p><ul><li>バージョンの付け方ってルールがあるのだろうか？<ul><li>セマンティックバージョニング等、様々な種類があります。</li><li><a href="https://en.wikipedia.org/wiki/Software_versioning">https://en.wikipedia.org/wiki/Software_versioning</a> の内容が非常に詳しいです</li></ul></li><li>バージョンをつけるタイミングは？<ul><li>開発時～リリースまで目的に応じた様々な段階があります。</li></ul></li><li>バージョンってだいたいどれくらいの期間で上がるのだろう？<ul><li>開発を行うプロジェクトがどういった開発手法を採用しているかによります</li><li>人気のあるOSSは「リリーストレイン」と呼ばれるリリース期間を固定した方法を取っているところが多いようです。だいたい1ヵ月～6か月でマイナーバージョンが上がります。</li></ul></li><li>バージョンって1(or0.1)から始めないといけないのか？<ul><li>セマンティックバージョニングに従えば、0.1.0から開発版をリリースして、マイナーバージョンを上げていけばいいと一般的に言われています</li><li>セマンティックバージョニングに従うのでなければ、開発者の気持ち次第です。</li></ul></li></ul><p>ソフトウェアやサービスの開発現場に配属後、バージョンを意識し、時には互換性といった問題で悩む機会は多々あると思います。本記事はそういったトラブルを具体的に解決するものではありませんが、そういったルールで回ってるんだと頭の片隅にあれば、問題を意識しやすいのではないでしょうか。</p><p>少しでもお力になれば幸いです。</p><h1 id="閑話休題-最初のバージョンは1から？"><a href="#閑話休題-最初のバージョンは1から？" class="headerlink" title="閑話休題: 最初のバージョンは1から？"></a>閑話休題: 最初のバージョンは1から？</h1><p>バージョンが1.0になるとテストがちゃんと行われて動くようになったから一般的に広く使っていいよということが慣例で決まっています。これをGA版(General Availability)といいます。<br>ですが、SuSE Linux(Jurixベース版)の最初のリリースのバージョンは4.2でした。これはSF小説「銀河ヒッチハイク・ガイド」をフィーチャーしたものです。<br><a href="https://en.opensuse.org/S.u.S.E._Linux_4.2">https://en.opensuse.org/S.u.S.E._Linux_4.2</a></p><h1 id="閑話休題-一見セマンティックバージョニングっぽいけど…"><a href="#閑話休題-一見セマンティックバージョニングっぽいけど…" class="headerlink" title="閑話休題: 一見セマンティックバージョニングっぽいけど…"></a>閑話休題: 一見セマンティックバージョニングっぽいけど…</h1><p>TypeScriptは型の構文を備えたJavaScriptであり、Webアプリケーションの開発などで活躍しているプログラミング言語です。<br>TypeScriptのバージョンは一見するとセマンティックバージョニングに見えます</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">soharaki@NOTE:~/work/example-20220328$ tsc --version</span><br><span class="line">Version 4.6.3</span><br></pre></td></tr></table></figure><p>ですが、実態は十進数的なdecimal versioningです。</p><p><a href="https://twitter.com/teppeis/status/1296672623498149888">https://twitter.com/teppeis/status/1296672623498149888</a></p><img src="/images/20220426a/image_6.png" alt="TypeScriptリリース" width="641" height="296" loading="lazy"><h1 id="閑話休題-バージョンといえば、リリースノート芸も忘れてはなりません"><a href="#閑話休題-バージョンといえば、リリースノート芸も忘れてはなりません" class="headerlink" title="閑話休題: バージョンといえば、リリースノート芸も忘れてはなりません"></a>閑話休題: バージョンといえば、リリースノート芸も忘れてはなりません</h1><p>ソフトウェアのバージョンを上げたとき(リリースした時)、どんな機能を更新したのか？<br>説明する文書をリリースノートといいます。</p><p>企業によっては知られざる文才が密かにその実力を発揮しているようです…<br>例えば、チャットアプリケーションのSlackの履歴を見てみましょう。</p><blockquote><p>Slack 22.03.10 2022年3月14日 新着情報<br>チャンネル参加前にプレビューする際、チャンネル名とともに説明が表示されるようになり、より詳しい情報を得られるようになりました。これなら「#たぬき」が信楽焼のチャンネルなのか、カップ麺の話なのか、それとも策略家の集いなのか、一目瞭然ですね！</p><p>「明日」や「来週」などにリマインダーを設定した場合、その表示時間を選べるようになりました。始業が朝 9 時でない皆さんや、Slackbot のアラートが朝一に飛び込んでくるのがしっくりこない人にぴったりです。「環境設定」&gt;「通知」で、好きな時間をデフォルト設定してください。<br><a href="https://slack.com/intl/ja-jp/release-notes/ios">https://slack.com/intl/ja-jp/release-notes/ios</a></p></blockquote><p>新しくリリースされた機能がユーザーのどういった利用シーンで活躍するのか非常にわかりやすいですね。</p><p>このリリースノートから、Slackは一か月単位で機能をリリースしているリリーストレインスタイルであること、バージョニング方法はカレンダー方式(これはOracle等で採用されている昔からある方式)であることがわかります。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><ul><li><a href="https://semver.org/lang/ja/">https://semver.org/lang/ja/</a><ul><li>セマンティックバージョニングのドキュメント</li></ul></li><li><a href="https://azu.github.io/slide/jser200/javascript-2014.html">https://azu.github.io/slide/jser200/javascript-2014.html</a><ul><li>開発プロセスとバージョニングの関係について参考にさせていただきました</li></ul></li><li><a href="https://rust-lang.github.io/rfcs/0507-release-channels.html">https://rust-lang.github.io/rfcs/0507-release-channels.html</a><ul><li>RustがGAしてからもうじき7年か…</li></ul></li><li><a href="https://atmarkit.itmedia.co.jp/ait/articles/1003/26/news106.html">https://atmarkit.itmedia.co.jp/ait/articles/1003/26/news106.html</a><ul><li>セマンティックバージョニングが周知される前の記事ですが、非常に参考になりました</li></ul></li><li><a href="https://en.wikipedia.org/wiki/Software_versioning">https://en.wikipedia.org/wiki/Software_versioning</a><ul><li>ソフトウェアのバージョンについて学びました</li></ul></li><li><a href="https://qiita.com/righteous/items/e5448cb2e7e11ab7d477">https://qiita.com/righteous/items/e5448cb2e7e11ab7d477</a><ul><li>NPMとpackage.jsonについて詳しく説明されています</li></ul></li><li><a href="https://homepages.dcc.ufmg.br/~mtov/pub/2017-saner-breaking-apis.pdf">https://homepages.dcc.ufmg.br/~mtov/pub/2017-saner-breaking-apis.pdf</a><ul><li>APIの更新頻度とコミュニティの活性度の関係について調べた調査論文</li></ul></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://ieeexplore.ieee.org/document/6975655">https://ieeexplore.ieee.org/document/6975655</a>JavaのパッケージマネージャーであるMavenで、後方互換性を意識したセマンティックバージョニングをちゃんと行っているライブラリがどれくらいあるのか調べた調査論文</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E8%A8%AD%E8%A8%88/">設計</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86/">バージョン管理</category>
      
      
      <comments>https://future-architect.github.io/articles/20220426a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>読書感想文「リファクタリング第2版」</title>
      <link>https://future-architect.github.io/articles/20220425a/</link>
      <guid>https://future-architect.github.io/articles/20220425a/</guid>
      <pubDate>Sun, 24 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;a href=&quot;https://www.ohmsha.co.jp/book/9784274224546/&quot; title=&quot;出版社のページへ&quot;&gt;
&lt;img src=&quot;/images/20220425a/978-4-274-22454-6.jpg&quot; alt=&quot;&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<a href="https://www.ohmsha.co.jp/book/9784274224546/" title="出版社のページへ"><img src="/images/20220425a/978-4-274-22454-6.jpg" alt="" width="400" height="519"></a><p><a href="/articles/20220418a/">春の入門連載</a>の6日目です。</p><p>「リファクタリング」という言葉を聞いたことがある人は多いでしょう。「リファクタリング」という言葉は最初の書籍が出版されて、ここ22年ほどですっかり「一般名詞」として開発の中の活動として定着した印象があります。</p><p>リファクタリングは「コードの機能を変えずに、コードのメンテナンスがしやすいようにコードを整理する」活動です。リファクタリング本と相互に参考文献になっているエクストリームプログラミングの本では次のサイクルを繰り返すことで開発の生産性と品質を維持しながら開発をし続けることを提唱していました。</p><ul><li>テストコードを書く</li><li>機能を実装する</li><li>リファクタリングをする</li></ul><p>そのメンテナンスがしやすいコードの書き方のパートを集中的に紹介する書籍のリファクタリングですが、原著は1999年に初版が刊行されました。日本語訳も2000年に刊行されました。残念ながら、この時のバージョンは出版社がIT書籍から撤退ということで絶版になってしまいましたが、オーム社が引き継いで2019年には第2版の翻訳も出版されています。</p><p>僕も何度も読み込んで「良い設計をする」「良いコードを書く」というスキルアップに大いに影響を受けた本です。入門祭りということで、新しくなった第2版を改めて読んでみようと思います。</p><h1 id="書籍の概要"><a href="#書籍の概要" class="headerlink" title="書籍の概要"></a>書籍の概要</h1><p>この書籍はそこそこ厚みのある本（430ページ＋目次と前書きで20ページ）ですが、エッセンスはとても薄くまとまっています。最初の5章はこんな感じです。</p><div class="scroll"><table><thead><tr><th align="left">章</th><th align="left">タイトル</th><th align="left">ページ数</th><th align="left">内容</th></tr></thead><tbody><tr><td align="left">1章</td><td align="left">リファクタリングー最初の例</td><td align="left">44</td><td align="left">読み物で、「リファクタリングをする人はこんな手順でやっているぞ」というロールプレイ</td></tr><tr><td align="left">2章</td><td align="left">リファクタリングの原則</td><td align="left">28</td><td align="left">一番大事！</td></tr><tr><td align="left">3章</td><td align="left">コードの不吉な臭い</td><td align="left">15</td><td align="left">「世の中にはどのような悪い設計があるのか」というのがコンパクトにまとまっている</td></tr><tr><td align="left">4章</td><td align="left">テストの構築</td><td align="left">17</td><td align="left">リファクタリングとともに行われるテストの紹介</td></tr><tr><td align="left">5章</td><td align="left">カタログの紹介</td><td align="left">3</td><td align="left">これから先の章のリファクタリングカタログを読むためのガイド</td></tr></tbody></table></div><p>最初の例は一度ざっと流し読みして雰囲気をつかむと、この後を読むのが楽になると思います。この時代の本にはこの手のロールプレイが良くついていた気がします。2版になってカラーになって見やすさが段違いに上がっています。また、このあとの章やカタログの章まで全部読んだあとに再度戻ってくると、自分の理解の補強や確認に役立つでしょう。</p><p>「リファクタリングの理論とエッセンスをつかむ」のであれば、2章を読むだけで十分です。ここは本気で読むと良いです。読書会をするとか、ちょっとできる人に教えてもらえる環境を作ってもいいと思います。28ページしかないので、すぐに読めると思います。</p><p>個人的には3章もお気に入りの章です。文法を学んで、なんとか動くものを作るぞ、という段階の人にはまだ良いコード、悪いコードというイメージがつきにくいかもしれませんが、この章を読むことでコードを見た時の選球眼を鍛えるきっかけになると思います。</p><p>あとの章はリファクタリング技法のカタログです。</p><h1 id="カタログとコードの不吉な臭いから見えてくる良い設計"><a href="#カタログとコードの不吉な臭いから見えてくる良い設計" class="headerlink" title="カタログとコードの不吉な臭いから見えてくる良い設計"></a>カタログとコードの不吉な臭いから見えてくる良い設計</h1><p>「良い設計」とか「悪いコード」って一言で言えるようなものではありません。同じ見た目のコードでも、変更頻度とか外的要因で悪くないコードだったりもします。それでも、長年の経験やら、変更のしにくさなど、さまざまな理由で、経験のある開発者は「よくない設計」を感じ取ります。</p><p>3章はアンチパターンから学ぶ良い設計のガイドです。昔はCプログラミング診断室という書籍もあり、このアプローチに感銘を受けましたが、いかんせんそちらの本は古すぎるし、今読むなら本書のリファクタリングの3章が良いですね。最初から良い設計でコードを書けることはほとんどなく、多くの場合は徐々に改善していってよいコードにしていくと思います。改善するには改善箇所を見つける必要があります。</p><p>例えば、「属性とgetとset以外に持たないクラス」を「データクラス」として不吉な臭いに挙げています。そして改善方法の一つとして、このデータクラスの値の変更をしている関数をメソッドとしてデータクラスに持ってくることを紹介しています。本来、適切に責務分割がされているのであれば、このようなコードにはならなかったはずですが、リファクタリングにより、ボトムアップで適切な責務が割り当てられて、良い設計が後から得られます。</p><p>リファクタリングというのは「ボトムアップの設計手法」であり、文法を学んで動くものが作れるようになった人が「設計を学ぶ」アプローチのひとつとしてとても優れていると思います。もちろん、トップダウンでオブジェクト指向な分析をしてコードを導いていくのも設計だと思いますし、概念設計でERDを書いてデータ構造を設計してテーブル設計をしていくアプローチもありますが、別に学ぶ方法は一本道ではないし、同時に学んでもいいわけで、その1つとしてもおすすめです。</p><p>カタログをよく見ると、A⇔Bみたいな対になっているものがあることに気づくでしょう。これも「良い設計」が状況次第である、ということの証左ですね。また、デザインパターンと呼ばれる設計カタログを導出するようなものもあります。デザインパターン入門の一つのきっかけになるポテンシャルもあります。</p><h1 id="第2版の変更ポイント"><a href="#第2版の変更ポイント" class="headerlink" title="第2版の変更ポイント"></a>第2版の変更ポイント</h1><p>初版と比べると、2版では主に2つの点が変更されています。</p><ul><li>カラーになってカタログに挿絵がついて見やすくなった</li><li>言語がJavaScriptになった</li></ul><p>執筆時点のJavaScriptのバージョンにはなかったprivateの説明をするところだけはJavaになっていたりしますが、JavaScriptになったおかげで読みやすくなったという人も多いでしょう。とはいえ、言語の違いで伝える内容が変わるような本ではないし、JavaScript固有のリファクタリングのカタログとかはないので、一歩引いてそのエッセンスを実際に利用することになるでしょう。</p><p>例えば、今どきのウェブのフレームワークはクラスは使うことは減っています。VueもReactもクラスではない書き方が主流です。Angularとかlitは使いますが、ただこれらもコンポーネントとしての制約が大きくて、この本のクラスとは少し特性が違います。ただ、クラス間の責務の移動とかはコンポーネントからフック（React）とかサービス層とかへの移動とかに置き換えられるので、それぞれ使っているフレームワークにあわせて読み替えていく必要があります。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>2章と3章だけがポイントでこの程度のページ数なら本屋で立ち読みでも読み切ってしまえる分量ではありますが、後半のカタログ集を読めば読むほど理解が強調されていきますし、ぜひともじっくりカタログ部分も読んで、理解を深めていくのがおすすめです。</p><p>本書導入部にも書かれていますが、すっかり出版されてから業界に浸透し、各種IDEとかエディタとかでも機能として搭載されるようになったリファクタリングの原点を知ることで、良い設計に一歩近づけると思います。</p><p>この本は一度で完全に理解する必要はなく、読み手のレベルが上がってくると後半のカタログの「面白い！」と思う章が変わってくると思います。新卒入社でプログラミングを始めたばかり、という人でも、すぐに役に立つものもあれば、ちょっと大きめの設計をしてきて初めて「なるほど！」と思うものもあるかもしれません。また、そういう本であるので、読書会とかでちょっとできる先輩に行間とか事例とかを教えてもらいながら読むのも楽しい本だと思います。</p><p><a href="https://www.ohmsha.co.jp/book/9784274224546/">https://www.ohmsha.co.jp/book/9784274224546/</a></p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0/">リファクタリング</category>
      
      
      <comments>https://future-architect.github.io/articles/20220425a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>「プロになるJava」読書感想文〜新人の頃の気持ちで最近のJava入門書を読む話</title>
      <link>https://future-architect.github.io/articles/20220422a/</link>
      <guid>https://future-architect.github.io/articles/20220422a/</guid>
      <pubDate>Thu, 21 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;この記事は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>この記事は<a href="/articles/20220418a/">「春の入門連載2022」</a>5日目です。昨日は、岸本卓也さんによる<a href="/articles/20220421a/">「技術情報の調べ方」</a>でした。</p><p>HealthCare Innovation Group(HIG)の永井優斗です。</p><p>久しぶりにJavaを利用するプロジェクトにアサインされたことや、初めてOJTトレーナーをやることになったことがきっかけで、「最近のJava入門書ってどんな感じなんだろう？」とふと興味が湧きました。</p><p>というわけで、「プロになるJava―仕事で必要なプログラミングの知識がゼロから身につく最高の指南書」（以下「プロになるJava」）というJava入門書を早速購入し、読んでみた中での感想文となります。とてもわかりやすく書かれており、よかったら皆さんも手に取ってみてください。</p><p>「プロになるJava」は発売して1か月ほどにも関わらず、twitterのTL(<a href="https://twitter.com/search?q=%23projava">#projava</a>)などでもとても評価が高いです。</p><p>なんと明日(2022/4/23)付で第2刷が出るそうです(<a href="https://twitter.com/kis/status/1515520867467337732">著者の1人である、きしださんのtweet</a>より)。すごいですね。</p><img src="/images/20220422a/image.png" alt="" width="400" height="507" loading="lazy"><ul><li><a href="https://gihyo.jp/book/2022/978-4-297-12685-8">https://gihyo.jp/book/2022/978-4-297-12685-8</a></li></ul><p>記事タイトルのとおり、できる限り自分が新人だった頃の気持ち（2017年4月にフューチャーに新卒入社しました）を思い出しながら、読み進めています。</p><p>この5年間で、Java SEのバージョンも進んでいます。「プロになるJava」では、Java17に対応していますが、私が新人のときに読んでいた入門書には「最新Java8に対応！」と記載されていました。</p><h1 id="「プロになるJava」目次"><a href="#「プロになるJava」目次" class="headerlink" title="「プロになるJava」目次"></a>「プロになるJava」目次</h1><p>部と章立ては以下の通りです。</p><h3 id="第1部-Javaを始める準備"><a href="#第1部-Javaを始める準備" class="headerlink" title="第1部 Javaを始める準備"></a>第1部 Javaを始める準備</h3><p>第1章 Java ってなんだろう<br>第2章 開発環境の準備と最初の一歩</p><h3 id="第2部-Javaの基本"><a href="#第2部-Javaの基本" class="headerlink" title="第2部　Javaの基本"></a>第2部　Javaの基本</h3><p>第3章 値と計算<br>第4章 変数と型<br>第5章 標準API<br>第6章 SwingによるGUI</p><h3 id="第3部-Javaの文法"><a href="#第3部-Javaの文法" class="headerlink" title="第3部　Javaの文法"></a>第3部　Javaの文法</h3><p>第7章 条件分岐<br>第8章 データ構造<br>第9章 繰り返し<br>第10章 データ構造の処理<br>第11章 メソッド</p><h3 id="第4部-高度なプログラミング"><a href="#第4部-高度なプログラミング" class="headerlink" title="第4部　高度なプログラミング"></a>第4部　高度なプログラミング</h3><p>第12章 入出力と例外<br>第13章 処理の難しさの段階<br>第14章 クラスとインタフェース<br>第15章 継承</p><h3 id="第5部-ツールと開発技法"><a href="#第5部-ツールと開発技法" class="headerlink" title="第5部　ツールと開発技法"></a>第5部　ツールと開発技法</h3><p>第16章 ビルドツールとMaven<br>第17章 Javadocとドキュメンテーション<br>第18章 JUnitとテストの自動化<br>第19章 IntelliJ IDEAを使いこなす<br>第20章 バージョン管理とGit</p><h3 id="第6部-Webアプリケーション開発"><a href="#第6部-Webアプリケーション開発" class="headerlink" title="第6部　Webアプリケーション開発"></a>第6部　Webアプリケーション開発</h3><p>第21章 Spring BootでWebアプリケーションを作ってみる<br>第22章 Webアプリケーションにデータベースを組み込む<br>おわりに<br>目次の詳細（節以降については、<a href="https://gihyo.jp/book/2022/978-4-297-12685-8">技術評論社のページ</a>をご確認ください。）</p><h1 id="特徴と感想"><a href="#特徴と感想" class="headerlink" title="特徴と感想"></a>特徴と感想</h1><h3 id="取り上げるテーマの広さ"><a href="#取り上げるテーマの広さ" class="headerlink" title="取り上げるテーマの広さ"></a>取り上げるテーマの広さ</h3><p>目次を見ると、単なる文法やAPIの紹介にとどまらず、テストや、Gitによるバージョン管理、Spring BootでWebアプリを作成したり、データベースについても網羅していることがわかります。それぞれ奥が深く、章で取り上げているものだけで1冊本を書くことができますが、現場に入るまでに知っておきたい知識をバランスよく記載していると感じました。</p><h3 id="JShellとIntelliJ-IDEAによる書面ハンズオン"><a href="#JShellとIntelliJ-IDEAによる書面ハンズオン" class="headerlink" title="JShellとIntelliJ IDEAによる書面ハンズオン"></a>JShellとIntelliJ IDEAによる書面ハンズオン</h3><p>かといって、プログラミング初心者にとっつきにくい本ではなく、特にJShellを使って1行1行処理を動かしながら学べるのはとてもわかりやすいと感じました。また、プログラムが原則1行1行上から実行されるという感覚を身につけることができます。（完全に初心者だった時の私はこのことすら理解できていなかったのです。）ちなみにJShellはJava9にて導入されているので、新人の頃読んだ、Java8対応な入門書には残念ながら載るはずがありませんでした。</p><p>また、条件分岐以降、ソースファイルとして記述したほうがわかりやすくなることから、書面ハンズオンはIntelliJ IDEAを利用しています。</p><p>第3部9章では、ループのなかでデバッガーを利用して、ループ処理の中を覗く節があるのですが、デバッガーによって、処理がどのように行われるのかを把握する方法を丁寧に指南しています。<br>副題にあるように「ゼロから身につく」を体現している入門書だと感じました。</p><h3 id="オブジェクト指向を重視しない"><a href="#オブジェクト指向を重視しない" class="headerlink" title="オブジェクト指向を重視しない"></a>オブジェクト指向を重視しない</h3><p>目次を見ると、オブジェクト指向を題した、部も章もありません。</p><p>私が新人の頃学んだ記憶を思い返すと、イヌ・ネコ、哺乳類のクラスだったり、たい焼きとたい焼きの型だったり、さまざまな例を使って、オブジェクト指向を説明しようとしていました。が、当時の私はわかった感じがしただけで、実装にどう生かしていいのかよくわかりませんでした。</p><p>「プロになるJava」では、継承の使い方を差分プログラミングとデータの分類に整理して解説しています。オブジェクト指向については、その限界を語っています。本文から、Javaでのオブジェクト指向に対する筆者の考え方がわかる段落を引用します。</p><blockquote><p>入門時にいろいろなところで「オブジェクト指向は大切」という話を聞くかもしれませんが、オブジェクト指向はラムダ式などに対応しておらず、またオブジェクト指向ならではの特徴はあまり使われなくなっているため、現実的にはそこまでこだわる必要はなくなっています。Javaで継承を使う際も、差分プログラミングが行いたいのかデータの分類が行いたいのか意識しながら、それぞれの指針に従って実装するのがいいでしょう。</p></blockquote><p>このあたりは著者の1人である<a href="https://nowokay.hatenablog.com/entry/2022/02/28/163436">きしださんのblog記事</a>に詳しく(熱く)思いが語られています。</p><h3 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h3><ul><li>「わからないところは飛ばしましょう」<br>「プロになるJava」では、冒頭に「わからないところは飛ばしましょう」と書かれています。</li></ul><blockquote><p>ちょっと読んでわからないなというとき、悩みすぎるくらいであれば先に進む方がいいです。</p></blockquote><p> 本書の随所にこの心構えを伝えてくれる要素があります。これは今後さまざまな情報を調べながら仕事を進めていくときにも必要な心構えではないかなと思います。</p><ul><li>デザイン性<br>水色ベースで初心者にも手に取りやすいデザインな本になっています。また、紙質のせいか、本が開きやすいので、参照しながら実際に手を動かすときに取り組みやすいと感じました。</li></ul><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Javaやプログラミング初心者だけでなく、Javaの経験者が読んでも学びのある１冊でした。みなさんもぜひ手に取ってみてください。</p><p>春の入門連載2022、次回（4/25(月)）は澁川喜規さんの「リファクタリング2版読書感想文」となります。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Java/">Java</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      
      <comments>https://future-architect.github.io/articles/20220422a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>技術情報の調べ方</title>
      <link>https://future-architect.github.io/articles/20220421a/</link>
      <guid>https://future-architect.github.io/articles/20220421a/</guid>
      <pubDate>Wed, 20 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220421a/markus-winkler-afW1hht0NSs-unsplash.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;427&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;Photo by &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220421a/markus-winkler-afW1hht0NSs-unsplash.jpg" alt="" width="640" height="427" loading="lazy"><p>Photo by <a href="https://unsplash.com/@markuswinkler?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Markus Winkler</a> on <a href="https://unsplash.com/s/photos/search?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText">Unsplash</a></p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、TIGの岸本卓也です。 <a href="/articles/20220418a/">春の入門連載2022</a> の4日目です。</p><p>業務を進める上では日々多くの技術情報を調べる必要がありますが、無策に調べると時間を浪費したりイマイチな解決策を採用してしまう可能性があります。そこで、本稿では普段私がやっている方法を中心に、調べる上でのポイントを紹介します。</p><p>調べる方法として、自分で調べる方法と人に聞く方法があると思いますので、それぞれの場合のポイントを紹介し、最後に調べる上で便利なツールを紹介します。</p><h1 id="自分で調べる場合のポイント"><a href="#自分で調べる場合のポイント" class="headerlink" title="自分で調べる場合のポイント"></a>自分で調べる場合のポイント</h1><p>自分で調べる場合は以下の点が大切です。</p><ol><li><strong>自力解決に制限時間を設け、それまでに解決できなければ上長に相談したり人に聞くといった別の方法に切り替える</strong><br>初めてチャレンジすることは分からないことが多いため、全て自分で調べていてはタスクに割り当てられた時間では足りません。課題によってはそもそも自力解決が不可能なこともあります。業務プロジェクトは期限が決まっているので、スケジュールを優先して適宜手段を切り替えていく必要があります。</li><li><strong>公式情報を当たる</strong><br>昨今は多数の情報を簡単に入手できますがその質は様々なため、適切な情報を選び取る必要があります。品質が高く信頼性に足る情報源としては公式情報が一番なため公式情報は必ず調べます。</li><li><strong>解決の選択肢を1個に絞らない</strong><br>課題の解決方法は複数あることが多いです。したがって最初に見つけた方法をそのまま採用するのではなく、複数の方法を調査、比較、検討して個別事情に適した方法を選択します。</li></ol><p>前述の通り公式情報が最も信頼できますが非公式の情報も参考になることが多いです。そこで、以下では公式/非公式それぞれの情報の使い方を紹介します。</p><h2 id="公式情報"><a href="#公式情報" class="headerlink" title="公式情報"></a>公式情報</h2><p>製品や規格のオーナー自身が公開しているまたはオーナーが認めたコミュニティなどの第三者が公開している情報や、広く認められた団体に登録された情報が公式情報にあたります。公式情報は最も信頼できる情報源のため、常に公式情報は調べるようにすると良いです。</p><p>代表的な公式情報には以下のものがあります。</p><ul><li><strong>公式の原文情報</strong><br>大抵は英語で記述されています。製品マニュアル、ブログ、課題追跡システム、規格・規約 (RFC) などがあります。使い方や仕様を調べる場合はマニュアルや規格・規約を、エラーや課題を調べる場合は製品のGitHub issuesを調べると良いです。</li><li><strong>公式の翻訳情報</strong><br>日本でもよく使われている場合は、製品マニュアルやブログの公式日本語翻訳版が公開されていることがあります。翻訳情報は以下に注意して参考にします。<ul><li>時々情報が古いことがあるため、公開日、更新日が古かったり、違和感がある場合は原文を参照します。</li><li>不自然な日本語のある翻訳情報の場合は機械翻訳の可能性があります。機械翻訳は理解しにくい日本語になっていることや、稀に原文と真逆の意味に翻訳されてしまっていることがあります。読みにくい場合や説明に違和感がある場合は原文を参照します。</li></ul></li><li><strong>製品サポート</strong><br>有償サポートやコミュニティによるサポートが公式に提供されていることがあります。プロプライエタリな製品について調べる場合は公開情報が少ないため積極的に活用する必要があります。調べたいことの期日感や難易度に応じて活用すると良いです。</li><li><strong>ソース</strong><br>プログラムの動きや事実を把握するには最も正確な情報源です。調べたいことの期日感や必要性に応じて調べると良いです。</li></ul><p>なお、製品マニュアルやソースは製品バージョン別の文書を公開していることが多いです。そういった情報は調査したい内容に一致するバージョンの文書を参照することが大切です。</p><h2 id="非公式情報"><a href="#非公式情報" class="headerlink" title="非公式情報"></a>非公式情報</h2><p>先人が残してくれた多種多様な非公式情報も参考になることがよくあります。しかし、一定の品質が担保される公式情報に対して非公式情報の信頼性はまちまちなため、以下のような工夫をして参考にします。</p><ul><li>複数の情報を組み合わせる。</li><li>情報源の信頼性を見極める。</li><li>公開日、更新日を確認し、古過ぎる情報は避ける。</li></ul><p>代表的な非公式情報には以下のものがあります。</p><ul><li><strong>非公式の翻訳情報</strong><br>公式原文情報の非公式翻訳であれば内容の信頼性はある程度期待できますが、情報の鮮度は公式の翻訳情報以上に注意が必要です。</li><li><strong>法人の技術サイトやブログ</strong><br>当ブログのように会社の看板を掲げている情報源はある程度品質担保された情報になっていると期待できます。</li><li><strong>技術系Q&amp;Aサイト</strong><br>Stack Exchangeネットワーク (代表的な物はStack Overflow, Super Userなど) やteratailといったQ&amp;Aサイトはコメント機能や評価機能があることが多く、信憑性のある情報を見つけやすいです。ただし、間違った回答や古い情報が高評価になっていることもあるため裏取りが必要です。</li><li><strong>個人執筆の記事</strong><br>情報が古くなりがちだったり、環境依存な解決策が記述されていることがあるため、注意深く検証と裏取りが必要です。</li><li><strong>ユーザーコミュニティ</strong><br>物によってはユーザーが集まるコミュニティがSlackやDiscordなどにできていることがあります。大抵は英語でのやり取りですが、日本のユーザー会が日本語でやり取りしているチャネルもあるのでログを探したり聞いてみる、という方法もあります。</li></ul><h1 id="人に聞く場合のポイント"><a href="#人に聞く場合のポイント" class="headerlink" title="人に聞く場合のポイント"></a>人に聞く場合のポイント</h1><p>人に聞く場合は相手が自分と齟齬のない共通認識を持ってもらうことが重要です。そのためには正確な内容を不足なく誤解を生まない表現で伝える必要があります。AWSで「 <a href="https://aws.amazon.com/jp/premiumsupport/tech-support-guidelines/">技術的なお問い合わせに関するガイドライン</a> 」という文書が公開されており、以下の部分はAWSに限らず質問する場合の方法としてとても参考になるため、まずはこれを参考にすると良いです。</p><ul><li>解決したい課題を明確にする</li><li>状況を正確に共有する</li><li>経緯を共有する</li></ul><p>このガイドラインに加えて、以下の点に注意すると良いです。</p><ul><li><strong>情報を絞らない</strong><ul><li>エラーメッセージ、ログ、ソースコードなどはパスワードのような機微情報だけマスクして全量共有します。ソースリポジトリ経由で共有する場合は、ブランチ名だけでなくタグ、コミットID、リビジョン番号といったソースのバージョンも伝えると良いです。</li><li>情報を絞ると質問を受けた方では確実に情報不足を感じます。</li></ul></li><li><strong>事実とそれ以外 (自分の考え、仮説など) を混在させない、明確に区別して伝える</strong><br>これらが混在していると認識齟齬を生みやすいです。</li><li><strong>試したこと、調べたこと、考えたことは初手で伝えておく</strong><br>これを試してください→それは既にやっていたけどダメでした、というやり取りは無駄なだけでなく相手の心証を悪くする可能性があります。</li><li><strong>なぜそれを聞きたいのか、背景も伝える</strong><br>背景を伝えることで、より良い別の方法や考え方を提示してもらえる可能性があります。</li><li><strong>解決してもしなくても最終的な結果とお礼を伝える</strong><br>質問した内容とその結果はナレッジや事例としてとても役に立つため、相談相手の糧となったり、同様の課題に直面する他の人の助けとなります。</li></ul><h1 id="Web検索におけるTips"><a href="#Web検索におけるTips" class="headerlink" title="Web検索におけるTips"></a>Web検索におけるTips</h1><p>最もよく使う調査方法はWeb検索だと思いますので、ここではWeb検索する上でのコツを紹介します。</p><ul><li><strong>英語で検索する</strong><br>できれば英語で検索します。特にエラーメッセージを検索する場合は、英文エラーメッセージが出力されるようにして英文で検索した方が良いです。日本語よりも英語の情報の方が圧倒的に多く、適切な情報ににたどり着けるかどうかに大きな差があるためです。ほぼ日本でしか使われていない製品に関する情報のみ日本語で検索します。</li><li><strong>質の低いページを検索結果から除外する</strong><br>昨今は高品質な情報が検索結果上位に表示されるとは限らなくなってしまっています。例えば日本語で検索するとStack Overflow英語版を機械翻訳しただけのWebページが出てくることもよくありますが、こういったWebページは、不自然な日本語で読みにくい、検索結果の一部を占めてしまう、悪質なスクリプトが埋め込まれている危険性があるといった問題があると考えています。<br>そのような低品質なWebページは、指定したドメインは検索結果から排除してくれるブラウザ拡張機能を使ってまとめて消しておくと良いです。</li><li><strong>検索エンジンの絞り込み機能を使う</strong><br>検索エンジンで提供されている、サイト内検索、フレーズ検索、除外検索、期間指定といった機能を使って適宜情報を絞り込みます。例えば、製品バージョン別のマニュアルが公開されている場合は特定バージョンのマニュアルだけ検索されるようにサイト内検索を指定したり、エラーメッセージならフレーズ検索したりします。</li><li><strong>ブラウザに検索ショートカットを追加する</strong><br>ブラウザによってはアドレスバーから直接任意のWebサイト内を検索するショートカットが追加できます (Google Chromeなら <a href="https://support.google.com/chrome/answer/95426">サイト内検索のショートカットを追加</a>)。私はよく調べる製品マニュアルや辞書サイトを追加しており、以下のようにすぐに調べられるようにしています。</li></ul><img src="/images/20220421a/insite-search_example.png" alt="insite-search_example" width="640" height="524" loading="lazy"><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>本稿では既存の情報を調べるときに私が実践している方法を紹介しました。</p><p>課題によっては自力解決は不可能で、ベンダーやステークホルダーを巻き込んで解決策を模索したり想定する解決策に対して公式見解を引き出すといった方法が必要なこともよくあります。視野を広くすると採れる手段が複数見えてくるので、課題解決にあたっては周囲を巻き込んでいくことが大切です。自分で抱え込みすぎないために、最初に書いた制限時間を決めて手段を切り替えていくことを意識すると良いと思います。</p><p>春の入門連載2022の次は永井さんの「プロになるJava」読書感想文です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%88/">トラブルシュート</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88/">ドキュメント</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%96%B0%E4%BA%BA%E5%90%91%E3%81%91/">新人向け</category>
      
      
      <comments>https://future-architect.github.io/articles/20220421a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>強いお兄さん達に囲まれて</title>
      <link>https://future-architect.github.io/articles/20220420a/</link>
      <guid>https://future-architect.github.io/articles/20220420a/</guid>
      <pubDate>Tue, 19 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220420a/top.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;518&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220420a/top.png" alt="" width="800" height="518"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>おはようございます、流通製造グループの戸田聖人です。<br><a href="https://future-architect.github.io/articles/20220418a/">春の入門連載2022</a>の3日目です。</p><p>「新人のときに知っておきたかったこと」として、自分が新人だったときに周りの強いお兄さんたちから学んだことを書いていこうと思います。<br>思考の持ち方の話ばかりなので、ぜひ他の連載記事も読んで技術的な話も見て行ってください！</p><h1 id="お兄さんたちの背中と言葉"><a href="#お兄さんたちの背中と言葉" class="headerlink" title="お兄さんたちの背中と言葉"></a>お兄さんたちの背中と言葉</h1><p>新人研修を終えて、縁あってアサインされたのは少しばかり特殊なプロジェクトで、OJTのリーダーとトレーナーにはプロジェクトのリーダーを統括する立場の人がついてくれました。<br>彼らを見ていて感じたこと、教えてくれたことを書いて行きます。</p><h2 id="言語化し、言語化した言葉を分解して具体的にしていくこと"><a href="#言語化し、言語化した言葉を分解して具体的にしていくこと" class="headerlink" title="言語化し、言語化した言葉を分解して具体的にしていくこと"></a>言語化し、言語化した言葉を分解して具体的にしていくこと</h2><p>アサインされてから他のプロジェクトに移るまで、彼らと話しているときに感じ続けたことは「言葉が重い」ということでした。<br>借りてきた言葉ではなく、彼ら自身の経験と思考からの言葉であることが伝わってきました。</p><p>その言葉の重みの源流は <strong>「言語化し、言語化した言葉を分解して具体的にしていくこと」</strong> であること思いました。</p><p>一つ一つの事柄・事象を言葉として表現し、表現した言葉を分解して要素に分解しそこから得られるものをすべて吸い上げるような思考をしていました。</p><p>非常に単純な例ですが「とあるタスクの期日までに終わらなかった」としましょう、その場合には下記のように分解していけます。</p><ul><li>タスクが期日までに終わらなかった（なぜ終わらなかったのか？）<ul><li>想定していた時間よりも多くの時間が必要だった（なぜ多くの時間が必要だったのか？）<ul><li>自分の能力を超えるタスクだった（どのように自分の能力を超えていたのか？）<ul><li>自分の知らない領域の知識が必要だった（習得を期限内に終わらせるにはどうすればよかったか？）<ul><li>既に知っている人（上司やメンバー）に質問するべきだった（なぜ質問ができなかったか？）<ul><li>話しかけるタイミングが無かった（なぜ話しかけるタイミングがなかったか？）<ul><li> ……</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li></ul><p>この様に具体的な行動な行動や施策になり、それを行う際に気をつけることが出るまで分解します。</p><p>上記は言ってしまえば「PDCAサイクルを回す」や「なぜなぜ分析」をすることそのものです。<br>しかしながら、その動作を自然体として行い、眼の前の事柄を単純な作業としてではなく考え続けた結果として彼らの言葉の重みがあると私は感じました。<br>当たり前のことを当たり前に積み重ねることの重要性を学びました。</p><h2 id="他人を観察し良いと思うことを吸収すること"><a href="#他人を観察し良いと思うことを吸収すること" class="headerlink" title="他人を観察し良いと思うことを吸収すること"></a>他人を観察し良いと思うことを吸収すること</h2><p>これは、面談の際に繰り返し受けたアドバイスです。</p><p>ただ「この人は仕事ができてすごいなぁ……」ではなく、「なぜそう感じるのか」「どこを見て自分がすごいと思ったのか」を観察して考えることです。</p><p>自分1人の行動とその振り返りの積み重ね自体も大切ですが、それでは自身の経験に線形に比例した成長しかできません。<br>しかし、他人が経験し身につけたものを吸収することができれば自分の経験に対して非線形な成長をしていけます。</p><p>チームのメンバーが増えればそれだけ吸収できる他人も増えます、その全員の良いところを観察し吸収すれば飛躍的な成長をしていくことができます。</p><p>今の自分が経験できないことも他人は経験し、それを糧にしています。<br>その他人の経験を吸収し自分が経験する際の基礎とすれば、自分の経験自体もより上質なものに変わっていきます。<br>そうすれば経験の積み重ねの成長もより早くなります。</p><p>今、自分が得られるものをすべて利用する貪欲さを学びました。</p><h2 id="視野を広く持つこと（先入観や前提を疑うこと）"><a href="#視野を広く持つこと（先入観や前提を疑うこと）" class="headerlink" title="視野を広く持つこと（先入観や前提を疑うこと）"></a>視野を広く持つこと（先入観や前提を疑うこと）</h2><p>私がアドバイスしてもらった「他人と目線を合わせること」を例に話します。</p><p>「目線を揃える」と聞くと私は、「話し手である自分が聞き手である相手がわかるように話す。」と言ったイメージを持っていました。<br>しかしながら、それは視野が狭いと教えてもらいました。</p><p>前述した「話し手である自分が聞き手である相手がわかるように話す。」は自分の目線を相手の目線に揃えるために「自分の目線を下げる」行動になります。<br>相手に伝えるということから、自分の目線が上であり相手の目線が低いこと・相手の目線は変えられないことを先入観・前提としてしまっています。</p><p>その先入観を排せば、話し手と聞き手と目線が揃っていないときにできることは次の4つに増えます。</p><ul><li>話し手が聞き手と同じ目線まで下げる</li><li>話し手が情報をインプットし聞き手と同じ目線まで上げる</li><li>聞き手に情報をインプットし目線を上げてもらう</li><li>聞き手に目線が高いことを伝えて目線を下げてもらう</li></ul><p>このアドバイスを受けたときに、自分自身が言葉にしていない先入観にとらわれていることに気付かされました。<br>先入観・意識しない前提がないかを疑うことを学びました。</p><h1 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h1><p>私がアサインされた当時を思い返しながらつらつらと書かせていただきました。</p><p>「当たり前のことを書いていたな」「そんな見方もあるんだ」「その考え方はおかしい」等の様々な感想があると思います。<br>私が感じたことを書いてあるので、否定も肯定もあると思います。<br>ただ、この記事をきっかけに皆さん自分自身の言葉と考えを持って、様々な経験を自身の成長の糧としていってほしいと思います。<br>皆さんの成長の礎になることが出来れば幸いです。</p><p>新しい環境に入って、新しい人と関わって、と新しいことだらけで不安になることもあると思います。<br>しかし、裏を返せばそれだけ吸収して成長できることにあふれているとも取れます。<br>ワクワクして楽しんで仕事をして成長していってください！</p><p><a href="https://future-architect.github.io/articles/20220418a/">春の入門連載2022</a>、次回は岸本さんです。お楽しみに！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%96%B0%E4%BA%BA%E5%90%91%E3%81%91/">新人向け</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%93%E3%82%B8%E3%83%8D%E3%82%B9/">ビジネス</category>
      
      
      <comments>https://future-architect.github.io/articles/20220420a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>フューチャー製OSSのreguerrに入門しつつ、エラーハンドリングしてPRあげてみた</title>
      <link>https://future-architect.github.io/articles/20220419a/</link>
      <guid>https://future-architect.github.io/articles/20220419a/</guid>
      <pubDate>Mon, 18 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは、TIGの村田です。&lt;br&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは、TIGの村田です。<br><a href="/articles/20220418a/">春の入門祭り連載</a>2日目の本記事では、フューチャー製OSSであるreguerrに入門しようと思います。</p><p>入門の途中でエラーと遭遇したため、途中からエラーハンドリング編に突入しています。入門祭りということで、エラーハンドリングの一例として「こんな風に考えるんだなー」と思いつつ読んでいただければ幸いです。</p><p>また、最終的にはエラーハンドリングを元に、OSSへPRを投げています。そういったOSSとの向き合い方を感じて頂くきっかけになれば良いなと思っています。</p><p>では本編に入っていきます。</p><h1 id="reguerrとは"><a href="#reguerrとは" class="headerlink" title="reguerrとは"></a>reguerrとは</h1><p>reguerrはエラーハンドリング向けのソースコードを自動生成してくれるGo製のライブラリです。フューチャーの案件でも採用実績があり、体系的なエラー定義とそれに伴うハンドリングが重要となってくるエンタープライズシステムでの利用に足る機能をreguerrは有しています。</p><h1 id="入門してみる"><a href="#入門してみる" class="headerlink" title="入門してみる"></a>入門してみる</h1><h2 id="下準備"><a href="#下準備" class="headerlink" title="下準備"></a>下準備</h2><p>まずはフューチャーのGitHubリポジトリ上<a href="https://github.com/future-architect/reguerr">reguerr</a>のreadmeに沿ってコマンドをインストールします。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go install github.com/future-architect/reguerr/cmd/reguerr</span><br></pre></td></tr></table></figure><p>以下のようにヘルプコマンドが実行できればインストール成功です。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ reguerr -h</span><br><span class="line">Usage:</span><br><span class="line">  reguerr [<span class="built_in">command</span>]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  generate    generate reguerr code</span><br><span class="line">  <span class="built_in">help</span>        Help about any <span class="built_in">command</span></span><br><span class="line">  validate    validate input file</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --<span class="built_in">help</span>   <span class="built_in">help</span> <span class="keyword">for</span> reguerr</span><br><span class="line"></span><br><span class="line">Use <span class="string">&quot;reguerr [command] --help&quot;</span> <span class="keyword">for</span> more information about a <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure><h2 id="自動生成してみる"><a href="#自動生成してみる" class="headerlink" title="自動生成してみる"></a>自動生成してみる</h2><p><code>generate</code> コマンドのヘルプを見てみると、-fでインプットファイルを指定すれば良いことが分かります。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ reguerr generate --<span class="built_in">help</span></span><br><span class="line">generate reguerr code</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  reguerr generate [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --defaultErrorLevel string   change default <span class="built_in">log</span> level(Trace,Debug,Info,Warn,Error,Fatal)</span><br><span class="line">      --defaultStatusCode int      change default status code (default -1)</span><br><span class="line">  -f, --file string                input go file</span><br><span class="line">  -h, --<span class="built_in">help</span>                       <span class="built_in">help</span> <span class="keyword">for</span> generate</span><br></pre></td></tr></table></figure><p>readmeに沿って、以下ファイルをexample.goとして作成します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;gitlab.com/future-architect/reguerr&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// No message arguments</span></span><br><span class="line">PermissionDeniedErr = reguerr.New(<span class="string">&quot;1001&quot;</span>, <span class="string">&quot;permission denied&quot;</span>).Build()</span><br><span class="line"></span><br><span class="line"><span class="comment">// One message arguments</span></span><br><span class="line">UpdateConflictErr = reguerr.New(<span class="string">&quot;1002&quot;</span>, <span class="string">&quot;other user updated: key=%s&quot;</span>).Build()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Message arguments with label</span></span><br><span class="line">InvalidInputParameterErr = reguerr.New(<span class="string">&quot;1003&quot;</span>, <span class="string">&quot;invalid input parameter: %v&quot;</span>).</span><br><span class="line">Label(<span class="number">0</span>,<span class="string">&quot;payload&quot;</span>, <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;&#125;).</span><br><span class="line">Build()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>そしてexample.goをインプットファイルにして自動生成を実行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ reguerr generate -f example.go</span><br></pre></td></tr></table></figure><p>example_gen.goとexample_gen.mdの2つのファイルが作成されます。<br>goファイルの中身は以下のようになっています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// generated by reguerr; DO NOT EDIT</span></span><br><span class="line"><span class="keyword">package</span> example</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;errors&quot;</span></span><br><span class="line">        <span class="string">&quot;github.com/future-architect/reguerr&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewPermissionDeniedErr is the error indicating [1001] permission denied: $err.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPermissionDeniedErr</span><span class="params">(err <span class="type">error</span>)</span></span> *reguerr.ReguError &#123;</span><br><span class="line">        <span class="keyword">return</span> PermissionDeniedErr.WithError(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IsPermissionDeniedErr indicates if the passed in error is from the error with code [1001].</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsPermissionDeniedErr</span><span class="params">(err <span class="type">error</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> cerr *reguerr.ReguError</span><br><span class="line">        <span class="keyword">if</span> as := errors.As(err, &amp;cerr); as &#123;</span><br><span class="line">                <span class="keyword">if</span> cerr.Code() == PermissionDeniedErr.Code() &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewUpdateConflictErr is the error indicating [1002] other user updated: key=%s: $err.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewUpdateConflictErr</span><span class="params">(err <span class="type">error</span>, arg1 <span class="keyword">interface</span>&#123;&#125;)</span></span> *reguerr.ReguError &#123;</span><br><span class="line">        <span class="keyword">return</span> UpdateConflictErr.WithError(err).WithArgs(arg1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IsUpdateConflictErr indicates if the passed in error is from the error with code [1002].</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsUpdateConflictErr</span><span class="params">(err <span class="type">error</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> cerr *reguerr.ReguError</span><br><span class="line">        <span class="keyword">if</span> as := errors.As(err, &amp;cerr); as &#123;</span><br><span class="line">                <span class="keyword">if</span> cerr.Code() == UpdateConflictErr.Code() &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewInvalidInputParameterErr is the error indicating [1003] invalid input parameter: %v: $err.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewInvalidInputParameterErr</span><span class="params">(err <span class="type">error</span>, payload <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span></span> *reguerr.ReguError &#123;</span><br><span class="line">        <span class="keyword">return</span> InvalidInputParameterErr.WithError(err).WithArgs(payload)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// IsInvalidInputParameterErr indicates if the passed in error is from the error with code [1003].</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsInvalidInputParameterErr</span><span class="params">(err <span class="type">error</span>)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> cerr *reguerr.ReguError</span><br><span class="line">        <span class="keyword">if</span> as := errors.As(err, &amp;cerr); as &#123;</span><br><span class="line">                <span class="keyword">if</span> cerr.Code() == InvalidInputParameterErr.Code() &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>インプットファイルで定義されたエラーパターンをもとに、それぞれ以下2種の関数が作成されています。</p><ul><li>引数で受け取ったエラーを、定義した任意のエラーへ変換して返してくれる関数</li><li>引数で受け取ったエラーが、定義したエラーとエラー内容が一致しているか判定してくれる関数</li></ul><p>mdファイルは以下のような内容になっています。エラーが自動的に表形式で整理されるので、各種ドキュメンテーションの際に活躍してくれそうです。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># Error Code List</span></span><br><span class="line"></span><br><span class="line">| CODE |           NAME           | LOGLEVEL | STATUSCODE |           FORMAT            |</span><br><span class="line">|------|--------------------------|----------|------------|-----------------------------|</span><br><span class="line">| 1001 | PermissionDeniedErr      | Error    |        500 | permission denied           |</span><br><span class="line">| 1002 | UpdateConflictErr        | Error    |        500 | other user updated: key=%s  |</span><br><span class="line">| 1003 | InvalidInputParameterErr | Error    |        500 | invalid input parameter: %v |</span><br></pre></td></tr></table></figure><h2 id="自動生成の引数をいじってみる"><a href="#自動生成の引数をいじってみる" class="headerlink" title="自動生成の引数をいじってみる"></a>自動生成の引数をいじってみる</h2><p><code>generate</code> コマンドの引数には <code>--defaultStatusCode</code> などの可変パラメータが存在していました。次はこちらをいじってみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ reguerr generate -f example.go --defaultStatusCode 300</span><br><span class="line">$ <span class="built_in">cat</span> example_gen.md</span><br><span class="line"><span class="comment"># Error Code List</span></span><br><span class="line"></span><br><span class="line">| CODE |           NAME           | LOGLEVEL | STATUSCODE |           FORMAT            |</span><br><span class="line">|------|--------------------------|----------|------------|-----------------------------|</span><br><span class="line">| 1001 | PermissionDeniedErr      | Error    |        300 | permission denied           |</span><br><span class="line">| 1002 | UpdateConflictErr        | Error    |        300 | other user updated: key=%s  |</span><br><span class="line">| 1003 | InvalidInputParameterErr | Error    |        300 | invalid input parameter: %v |</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ステータスコードが指定通りに変更されていることが確認できました。</p><h2 id="エラーハンドリングしてみる"><a href="#エラーハンドリングしてみる" class="headerlink" title="エラーハンドリングしてみる"></a>エラーハンドリングしてみる</h2><p><code>--defaultErrorLevel</code> をいじってデフォルトのエラーレベルを変更しようとしたのですが、エラーが出てしまいました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ reguerr generate -f example.go --defaultErrorLevel Info</span><br><span class="line">Usage:</span><br><span class="line">  reguerr generate [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --defaultErrorLevel string   change default <span class="built_in">log</span> level(Trace,Debug,Info,Warn,Error,Fatal)</span><br><span class="line">      --defaultStatusCode int      change default status code (default -1)</span><br><span class="line">  -f, --file string                input go file</span><br><span class="line">  -h, --<span class="built_in">help</span>                       <span class="built_in">help</span> <span class="keyword">for</span> generate</span><br><span class="line"></span><br><span class="line">unknown error level</span><br></pre></td></tr></table></figure><p>渡している文字列が悪いのか、渡し方が悪いのか、はたまた元のソースコードにバグが存在しているのか。末尾に出ている <code>unknown error level</code> がエラーログなので、ソースコードを追って原因を探ってみます。</p><p>リポジトリを漁ってみると、<a href="https://github.com/future-architect/reguerr/blob/main/reguerr.go#L47">reguerr.goの47行目</a>に該当のエラー文言がありました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewLevel</span><span class="params">(s <span class="type">string</span>)</span></span> (Level, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> strings.ToLower(s) &#123;</span><br><span class="line"><span class="keyword">case</span> strings.ToLower(Trace.String()):</span><br><span class="line"><span class="keyword">return</span> Trace, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> strings.ToLower(Debug.String()):</span><br><span class="line"><span class="keyword">return</span> Debug, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> strings.ToLower(Info.String()):</span><br><span class="line"><span class="keyword">return</span> Info, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> strings.ToLower(Warn.String()):</span><br><span class="line"><span class="keyword">return</span> Warn, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> strings.ToLower(Error.String()):</span><br><span class="line"><span class="keyword">return</span> Error, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> strings.ToLower(Fatal.String()):</span><br><span class="line"><span class="keyword">return</span> Fatal, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> Trace, errors.New(<span class="string">&quot;unknown error level&quot;</span>)  <span class="comment">//ここが47行目</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>コマンドの実行引数で渡している <code>Info</code> の文字列が <code>NewLevel</code> 関数の引数 <code>s</code> として渡っていくのだろうと思いますが、このswitch文の中でdefaultに突入、該当のエラーが発生しているだろうと推測されます。</p><p>この <code>NewLevel</code> 関数自体も呼び元がいるはずなので探ってみると、<a href="https://github.com/future-architect/reguerr/blob/main/cmd/root.go#L71">cmd配下のroot.go内71行目</a>にて呼び出されていることが確認できました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> opts []gen.Option</span><br><span class="line"><span class="keyword">if</span> errLevel != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">level, err := reguerr.NewLevel(errLevel + <span class="string">&quot;Level&quot;</span>)  <span class="comment">//ここが71行目</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">opts = <span class="built_in">append</span>(opts, gen.DefaultErrorLevel(level))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> statusCode != <span class="number">-1</span> &#123;</span><br><span class="line">opts = <span class="built_in">append</span>(opts, gen.DefaultStatusCode(statusCode))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ここで <code>--defaultErrorLevel</code> と <code>--defaultStatusCode</code> にて設定された値を処理しているようです。</p><p>期待する挙動は、先程のswitch文の中で <code>strings.ToLower(s)</code> の値が <code>strings.ToLower(Info.String())</code> の値と一致することなのですが、そうなってないようなので何が起きているかもう少し探ってみます。</p><p><code>NewLevel</code> のタイミングで各々の値が実際どうなっているのか確認できるようにログを仕込んでみました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Printf(<span class="string">&quot;[USER]strings.ToLower(s)=%v\n&quot;</span>, strings.ToLower(s))</span><br><span class="line">fmt.Printf(<span class="string">&quot;[USER]strings.ToLower(Info.String())=%v\n&quot;</span>, strings.ToLower(Info.String()))</span><br></pre></td></tr></table></figure><p>これで再度generateを試してみます。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">reguerr generate -f example.go --defaultErrorLevel Info</span><br><span class="line">[USER]strings.ToLower(s)=infolevel</span><br><span class="line">[USER]strings.ToLower(Info.String())=info</span><br><span class="line">Usage:</span><br><span class="line">  reguerr generate [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --defaultErrorLevel string   change default <span class="built_in">log</span> level(Trace,Debug,Info,Warn,Error,Fatal)</span><br><span class="line">      --defaultStatusCode int      change default status code (default -1)</span><br><span class="line">  -f, --file string                input go file</span><br><span class="line">  -h, --<span class="built_in">help</span>                       <span class="built_in">help</span> <span class="keyword">for</span> generate</span><br><span class="line"></span><br><span class="line">unknown error level</span><br></pre></td></tr></table></figure><p>ログが出ました。まず、コマンド引数として渡している部分は <code>infolevel</code> という文字列になっていました。たしかに <code>NewLevel</code> の呼び元で以下のように呼び出していましたね。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reguerr.NewLevel(errLevel + <span class="string">&quot;Level&quot;</span>)</span><br></pre></td></tr></table></figure><p>引数で渡されたエラーレベルの文言に <code>Level</code> という文字列を付け加え、それがlowercaseに変換されるのでプログラム上違和感はないです。</p><p>ただ、マッチ対象文字列は <code>level</code> という文字列を含まないのでこれが原因と考えられます。<br>試しに <code>NewLevel</code> の呼び出し方を以下のように変えてみます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// level, err := reguerr.NewLevel(errLevel + &quot;Level&quot;)</span></span><br><span class="line">level, err := reguerr.NewLevel(errLevel)</span><br></pre></td></tr></table></figure><p>以下コマンドで再度generateを実行。エラーなく終了しました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ reguerr generate -f example.go --defaultErrorLevel Info</span><br></pre></td></tr></table></figure><p>生成されたマークダウンファイルを覗いてみると、LOGLEVEL部が想定通り <code>Info</code> に変わっていることを確認できました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> example_gen.md</span><br><span class="line"><span class="comment"># Error Code List</span></span><br><span class="line"></span><br><span class="line">| CODE |           NAME           | LOGLEVEL | STATUSCODE |           FORMAT            |</span><br><span class="line">|------|--------------------------|----------|------------|-----------------------------|</span><br><span class="line">| 1001 | PermissionDeniedErr      | Info     |        500 | permission denied           |</span><br><span class="line">| 1002 | UpdateConflictErr        | Info     |        500 | other user updated: key=%s  |</span><br><span class="line">| 1003 | InvalidInputParameterErr | Info     |        500 | invalid input parameter: %v |</span><br></pre></td></tr></table></figure><p>また、goファイル側ではデフォルトのエラーレベルを変更するinit処理が追加されていることを確認できました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">        reguerr.DefaultErrorLevel = reguerr.Info</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="OSSにPRを投げてみる"><a href="#OSSにPRを投げてみる" class="headerlink" title="OSSにPRを投げてみる"></a>OSSにPRを投げてみる</h2><p>動作確認を元に以下の変更を加え、<a href="https://github.com/future-architect/reguerr/pull/1">プルリクエスト</a>を作成しました。<br><img src="/images/20220419a/スクリーンショット_2022-04-17_21.19.31.png" alt="Pull Request" width="1138" height="174" loading="lazy"></p><p>OSSの挙動でおかしいと思われる点があった際に「このOSS使えねえ！」と騒ぐのではなくissueを起票するかPRをあげよとどこかのエラい人から教わったので、私も例に漏れずそのように行動したいと思います。このPRが少しでも世界平和に繋がることを祈っています。</p><p>などと言いつつ、執筆時点(2022.04)でこの修正が全体を鑑みた上でベストなのかどうかは判断しきれていないのが正直なところです。ただ、そこはコードオーナーのレビューに任せ、修正案のたたき台としてこのPRが機能するといいなという気持ちでPRをあげることにします。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>さて、今回はフューチャー製OSSであるreguerrに入門しつつ、エラーハンドリングしつつOSSへPRをあげるということに入門してみました。</p><p>私のPRがマージされた暁には、本記事で触れているエラーに直面することは無くなるのですが、エラーハンドリングの考え方やOSSとの向き合い方が皆さんの参考になればと思っています。</p><p>春の入門祭り連載、次回は戸田さんです。お楽しみに！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/OSS/">OSS</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%8F%E3%83%B3%E3%83%89%E3%83%AA%E3%83%B3%E3%82%B0/">エラーハンドリング</category>
      
      
      <comments>https://future-architect.github.io/articles/20220419a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>FigmaのOverlayに超入門してみた</title>
      <link>https://future-architect.github.io/articles/20220418b/</link>
      <guid>https://future-architect.github.io/articles/20220418b/</guid>
      <pubDate>Sun, 17 Apr 2022 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20220418a/&quot;&gt;春の入門連載&lt;/a&gt; の1日目です。&lt;/p&gt;
&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20220418a/">春の入門連載</a> の1日目です。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="https://www.figma.com/">Figma</a> の入門記事です。Figmaとはデザインをブラウザ上で簡単に共同編集できることが特徴なUIデザインツールです。プレビュー実行すると作成したデザインがクリックなどのイベントで遷移させることができるので、WebサイトやPC・スマホアプリのワイヤーフレームやプロトタイプ作成で使われている場面をよく見ます。Figmaで<a href="https://note.com/smartcamp_design/n/ncc0fb574f2d3">プレゼンテーション用のスライド</a>を作る人も噂では増えているようです。2022年3月16日に日本法人ができ国内でもさらに勢い増しそうな予感がします。</p><ul><li><a href="https://prtimes.jp/main/html/rd/p/000000001.000097201.html">世界でデザインコラボレーションツールをリードする「Figma」が日本へ本格進出｜Figma Japan株式会社のプレスリリース</a></li></ul><p>様々なデザインシステム<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>もFigma上で公開されており、UIの生きた教材となっているようです。（私はまだ眺めていてすごいなーくらいですが）</p><ul><li><a href="https://note.com/rio310mink/n/n4ead8d789621">勉強になったFigmaのデザインシステム8選｜東 莉緒／Rio Azuma｜note</a></li></ul><p>この記事ではFigmaを使って簡単なログインページを作ります。よくネットで見る参考情報では、入力フォームのキーボード入力などインタラクション性にかけるものが多かったので、オーバーレイを利用して動きをつけてアプリイメージを湧きやすくするように工夫します。</p><h1 id="Figmaことはじめ"><a href="#Figmaことはじめ" class="headerlink" title="Figmaことはじめ"></a>Figmaことはじめ</h1><ul><li><a href="https://www.figma.com/">公式サイト</a>で、まずはログインします</li><li>New design fileを選択して開きます</li></ul><p>最初の使い方については<a href="https://zenn.dev/umi_mori/books/d1ea181264ebb3">サクッと始めるウェブデザイン【Figma】</a> がチュートリアルとして楽でした。また、Figmaの使い方はYoutube動画に多く説明されており、むしろそちらの方が情報が多い印象です。</p><p>よりよいデザインで作る場合は、既存のFigma Resources（Figmaで利用できる素材）をうまく活用し、むしろ乗っかっていく方がてっとり早いと思いますが、今回は使い方を学ぶということでなるべく手動で作る領域を多めにとる方針とします。</p><h1 id="つくるもの"><a href="#つくるもの" class="headerlink" title="つくるもの"></a>つくるもの</h1><p>今回作るものですが、簡単なログインフォームを作ります。サンプルで引っかかるテキストの入力フォームがインタラクティブに動くものが無かったので、オーバーレイを利用し、スマートフォンのネイティブキーボードを表示させるインタラクションを作ります。少しでも動くとぐっとアプリのイメージが具体化されると思うからです。</p><img src="/images/20220418b/ログイン概念.png" alt="ログイン概念.png" width="1200" height="982" loading="lazy"><h1 id="流れ"><a href="#流れ" class="headerlink" title="流れ"></a>流れ</h1><p>New design fileで開くと、バナーからフレームを選択します。</p><img src="/images/20220418b/フレーム選択.png" alt="フレーム選択.png" width="559" height="63" loading="lazy"><p>サイドバーにどういったテンプレートを作成するかプルダウンが表示されるので、iPhone 13 Pro Maxを選択します。</p><img src="/images/20220418b/モバイルを選択.png" alt="モバイルを選択.png" width="494" height="266" loading="lazy"><p>オブジェクト挿入し、入力ボックスを作っていきます。</p><img src="/images/20220418b/オブジェクト挿入.png" alt="オブジェクト挿入.png" width="573" height="180" loading="lazy"><p>Cornar radiusで少し端っこを丸くすると入力フォームぽくなります。</p><img src="/images/20220418b/角丸.png" alt="角丸.png" width="356" height="271" loading="lazy"><p>テキストでラベル・入力のダミー値を設定します。固定値です。</p><img src="/images/20220418b/テキスト入力.png" alt="テキスト入力.png" width="592" height="76" loading="lazy"><p>ログインボタンはCornar radiusを強めにするして色を塗りつぶすとそれっぽく見えます。同様にトップページも作っておき、2ページ並べて全体を見ると次のような状態を作ります。</p><img src="/images/20220418b/全体モック.png" alt="全体モック.png" width="1200" height="599" loading="lazy"><h1 id="キーボードを追加"><a href="#キーボードを追加" class="headerlink" title="キーボードを追加"></a>キーボードを追加</h1><p>デフォルトだとキーボードを表示するような仕組みが無いため、素材をもとに作り込む必要があります。Figma上からCommunityが上げている素材を検索します。keyboardなどで検索すると、例えば以下のようなページが見つかると思います。</p><ul><li><a href="https://www.figma.com/community/file/1029525540844129321">https://www.figma.com/community/file/1029525540844129321</a></li></ul><p>Duplicate ボタンを押すと、別タブでFigma編集画面が表示されます。</p><img src="/images/20220418b/複製.png" alt="複製.png" width="1143" height="538" loading="lazy"><p>利用したいリソースをコピーして、編集中のデザインファイルに貼り付けます。</p><img src="/images/20220418b/リソースをコピー.png" alt="リソースをコピー.png" width="1161" height="400" loading="lazy"><p>横幅を調整して合わせます（少しキーボタンが崩れますが、調整は割愛）。</p><img src="/images/20220418b/キーボード貼り付け.png" alt="キーボード貼り付け.png" width="997" height="380" loading="lazy"><p>ここで入力フォームをクリック時にPrototype+Overrayでキーボードが立ち上がるようにします。</p><p>入力ボックスをクリック、PrototypeからInteractionsでOpen overlayを選択。</p><img src="/images/20220418b/prototype.png" alt="prototype.png" width="926" height="506" loading="lazy"><p>先程追加した「キーボード」を選択します。Overlayでは、Bottom centerで被さる位置を画面下部にし、「Close when clicking outside」で外すようにします。AnimationではMove inを選び、進行方向を「↑」をクリックします。</p><img src="/images/20220418b/Overlay設定.png" alt="Overlay設定.png" width="721" height="705" loading="lazy"><p>ログインボタンの遷移はもっとシンプルで、On tap時に Navigate to でトップページを選択します。</p><img src="/images/20220418b/ログインボタンの遷移.png" alt="ログインボタンの遷移.png" width="791" height="439" loading="lazy"><h1 id="デモ"><a href="#デモ" class="headerlink" title="デモ"></a>デモ</h1><p>ナビゲーションバーの「▷」でプレゼンテーションモードで再生できます。</p><p>入力フォームを選択すると、キーボードがぬっと立ち上がるのがわかると思います。キーボード入力はできませんが、このレベルでもアプリの導線があたえる印象がガラッと変わってくると思います。</p><img src="/images/20220418b/figma_demo.gif" alt="figma_demo.gif" width="1200" height="682" loading="lazy"><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>Figmaのオーバーレイの超入門記事でした。コミュニティのみなさんが共有してくださっている素材をうまく組み合わせるとちょっとした時間でワイヤーフレーム・プロトタイプの品質をぐっと向上させることができます。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://www.concentinc.jp/design_research/2021/04/designsystem/">https://www.concentinc.jp/design_research/2021/04/designsystem/</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Design/">Design</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%85%A5%E9%96%80/">入門</category>
      
      <category domain="https://future-architect.github.io/tags/Figma/">Figma</category>
      
      
      <comments>https://future-architect.github.io/articles/20220418b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>春の入門連載2022を始めます</title>
      <link>https://future-architect.github.io/articles/20220418a/</link>
      <guid>https://future-architect.github.io/articles/20220418a/</guid>
      <pubDate>Sun, 17 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220418a/IMG_0722.jpg&quot; alt=&quot;満開の桜&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;Photo taken by &lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220418a/IMG_0722.jpg" alt="満開の桜" loading="lazy"><p>Photo taken by <a href="https://twitter.com/kaedemalu">@kaedemalu</a></p><p>こんにちは。技術ブログ運営の伊藤太斉です。新年度も始まり、数週間が経ち、新人の方も徐々に会社や所属している団体へ慣れてきた頃ではないかと思います。<br>そんなフレッシュな時期に、2022年もフューチャーは春の入門連載を始めます。</p><h2 id="春の入門連載について"><a href="#春の入門連載について" class="headerlink" title="春の入門連載について"></a>春の入門連載について</h2><p>新年度になり、心機一転場を新たにしたり、これまで取り組んだことのないものにトライしてみる、というところで、2020年より開始しています。この連載では、</p><ul><li>新人が参画にする時に知っておいて欲しいこと</li><li>自分が新人の時に知っておきたかったこと</li></ul><p>をテーマに寄稿者を募りました。<br>フューチャーでも新人研修があり、各々研修が終えたら様々な案件に参画していきます。そのときに、この連載に寄稿された内容が一助となればと思い、本日から開催します。</p><h2 id="投稿スケジュール・タイトル"><a href="#投稿スケジュール・タイトル" class="headerlink" title="投稿スケジュール・タイトル"></a>投稿スケジュール・タイトル</h2><p>本連載は以下のスケジュールで進めます。新卒の方のみならず、新しく学ぶきっかけにしていただければと思います。</p><div class="scroll"><table><thead><tr><th>日付</th><th>執筆者</th><th>タイトル</th></tr></thead><tbody><tr><td>4/18</td><td>真野隼記</td><td><a href="/articles/20220418b/">Figma入門</a></td></tr><tr><td>4/19</td><td>村田靖拓</td><td><a href="/articles/20220419a/">フューチャー発のOSS入門</a></td></tr><tr><td>4/20</td><td>戸田聖人</td><td><a href="/articles/20220420a/">強いお兄さん達に囲まれて</a></td></tr><tr><td>4/21</td><td>岸本卓也</td><td><a href="/articles/20220421a/">技術情報の調べ方</a></td></tr><tr><td>4/22</td><td>永井優斗</td><td><a href="/articles/20220422a/">「プロになるJava」読書感想文</a></td></tr><tr><td>4/25</td><td>澁川喜規</td><td><a href="/articles/20220425a/">リファクタリング2版読書感想文</a></td></tr><tr><td>4/26</td><td>原木翔</td><td><a href="/articles/20220426a/">ソフトウェアのバージョンと開発スタイルの関係について</a></td></tr><tr><td>4/27</td><td>伊藤太斉</td><td>エンジニアのロールを切り替えた時の話</td></tr></tbody></table></div><p>※公開日、タイトルや内容については変更になる場合があります。ご了承ください。</p><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>寄稿者も今回が初だったり、記事の内容を初めて触る方もいるので、是非読んでいただき、シェアしていただけると嬉しいです！</p><ul><li><a href="/articles/20200529/">2020年の連載記事</a></li><li><a href="/articles/20210414a/">2021年の連載記事</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%98%A5%E3%81%AE%E5%85%A5%E9%96%80%E7%A5%AD%E3%82%8A/">春の入門祭り</category>
      
      
      <comments>https://future-architect.github.io/articles/20220418a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Partner Summit Japan 2022に登壇してみた</title>
      <link>https://future-architect.github.io/articles/20220415b/</link>
      <guid>https://future-architect.github.io/articles/20220415b/</guid>
      <pubDate>Thu, 14 Apr 2022 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220415b/top.png&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;447&quot; loading=&quot;lazy&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220415b/top.png" alt="" width="1200" height="447" loading="lazy"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>2022/3/16（水）に開催された<a href="https://aws.amazon.com/jp/events/PartnerSummitJapan/">AWS Partner Summit Japan 2022</a> に縁あって登壇の機会をいただきました。オンラインでしたが、撮影は目黒セントラルスクエア。TV局かなと思うほどの撮影機材や、明らかにプロフェッショナルなスタッフの皆さまに囲まれての発表だったので非常によい刺激をいただけました。終わった後の達成感が凄く良かったです！</p><h1 id="AWS-Partner-Summitとは"><a href="#AWS-Partner-Summitとは" class="headerlink" title="AWS Partner Summitとは"></a>AWS Partner Summitとは</h1><p>2022年は3月16日～17日の2日開催で、AWSパートナーネットワーク(APN)に参加しているかつ、NDA締結済み企業が参加できる、年に1度の大型イベントです。完全なオープンでないはずですが、参加者は数千人オーダーとのこと。人気の秘密はセッションのタイムテーブルを読むと分かる気がします。興味をひかれる気合の入ったセッションが多数発表されていました。</p><p>フューチャーとしてはAWS Partner Summitに登壇したのは私が最初だったようで、ちょっと会社に爪痕を残せたようで嬉しいです。来年以降も良い事例などを作っていきたいなと思いました。</p><h1 id="登壇内容"><a href="#登壇内容" class="headerlink" title="登壇内容"></a>登壇内容</h1><p>3/16のなんと基調講演での枠にて登壇時間は7分。<a href="https://aws.amazon.com/jp/solutions/case-studies/nicigas-future-architect/">AWS 導入事例：日本瓦斯株式会社 | AWS</a> で触れている内容について説明しました。</p><p>登壇の様子を同僚に撮影してもらいました。当日は視聴者多数で接続優先のため画質が落とされていたなどの裏事情があり静止画で見ると少し粗いです。<br>スライドですが会社説明はともかく、AWSパートナーシップについても触れるのはこのイベントならではだなと思いました。笑</p><img src="/images/20220415b/会社紹介.png" alt="会社紹介" width="1200" height="635" loading="lazy"><p>目的・ミッション・採用技術などはかなり面白く話せることが無限にあるのですが、この場ではスライドの紹介だけにさせてください。30分くらいは余裕で話せると思うのですが…、時間が短い！</p><img src="/images/20220415b/プロジェクトミッション.png" alt="プロジェクトミッション" width="1200" height="653" loading="lazy"><img src="/images/20220415b/アーキテクチャ.png" alt="アーキテクチャ" width="1200" height="510" loading="lazy"><p>短い時間とはいえ、企業のデジタルトランスフォーメーション化の文脈で、かなり野心的なプロジェクトであったことは伝えられたのはないでしょうか。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>AWSの中橋さんが丁寧に色々サポートしてくださって助かりました。社内だと吉田さんとか富山さんに頼り切りました。会場の様子ですが、こんな感じでした。登壇時のみノーマスクで、待機時間などはディスタンスを保ちつつアクリル板とかも用意されていたので安心でした。ページ送りとかは左手に持っているスイッチみたいなので行い、写真にはちょっとしか写ってないですが、前面のディスプレイを見ながら話せるのでとても楽でした。</p><img src="/images/20220415b/会場の様子.jpeg" alt="会場の様子" width="1200" height="900" loading="lazy"><p>繰り返しになりますが、貴重な機会をいただけて感謝しています。自分自身としてもこうしたDX案件が大好きなので、楽しみながらさらにステージを上げていきたいと思ってます。最後まで読んでいただき、ありがとうございました！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/IoT/">IoT</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E4%BA%8B%E4%BE%8B%E7%B4%B9%E4%BB%8B/">事例紹介</category>
      
      
      <comments>https://future-architect.github.io/articles/20220415b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>SvelteKitのデフォルトプロジェクトから学ぶ</title>
      <link>https://future-architect.github.io/articles/20220415a/</link>
      <guid>https://future-architect.github.io/articles/20220415a/</guid>
      <pubDate>Thu, 14 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;ウェブアプリケーションフレームワークとして最近注目度が少しずつ上がっているのがSvelteです。以前、Svelteをちょびっとサンプルを触ってみた感じ、コードの雰囲気は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>ウェブアプリケーションフレームワークとして最近注目度が少しずつ上がっているのがSvelteです。以前、Svelteをちょびっとサンプルを触ってみた感じ、コードの雰囲気は<a href="https://vuejs.org/api/sfc-script-setup.html"> <code>&lt;script setup&gt;</code> 版のVue 3</a>っぽいなー、という感じです。あとはプロパティ入力のあるコンポーネントでHTMLを生成するという基本構成はReactもAngularもみんなそうなので、今時のウェブフロントエンドのフレームワークを触ったことがあれば難しくはない気がします。</p><p>1コンポーネントでおさまる範囲では<a href="https://future-architect.github.io/articles/20220207a/">ちょっと前に</a>かんたんなアプリの試作をしてみました（毎週何回も使ってるので手間の割に活躍してます）が、じゃあ、一本分のアプリを作るときはどうなんだ、ということでSvelteKitでプロジェクトを新規で作ってみたけど、いろいろな未知の要素がでてきて、これはどうなんだ？というのをドキュメントから探す、という学び方もまあ悪くないな、ということでブログにしてみました。</p><p>ReactにNext.jsがあれば、VueにはNuxt.js、SvelteにはSvelteKitがあります。フロントエンドのフレームワークを拡張して、初回レンダリングをサーバーで行うサーバーサイドレンダリングなどの自分で環境を作ると不便なものが組み込まれていて、さらにサーバー側のAPI実装も同じフレームワーク内でサポートするなどの付加機能も提供してくれているものです。サーバーがNode.jsや、Node.jsベースのPaaSを使えば、JavaScriptだけでフロントもサーバーも完結します。</p><p>プロジェクトは次のコマンドで作っていきます。最初のコマンドでいろいろ聞かれるので、好きな条件を入れていきます。デモプロジェクトはYESにするといろいろなコードが生成されます。今回はこれを見ていきます。それ以外は全部YESにしてみました。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ npm init svelte@next my-app</span><br><span class="line"></span><br><span class="line">Welcome to SvelteKit!</span><br><span class="line"></span><br><span class="line">This is beta software; expect bugs and missing features.</span><br><span class="line"></span><br><span class="line">Problems? Open an issue on https://github.com/sveltejs/kit/issues <span class="keyword">if</span> none exists already.</span><br><span class="line"></span><br><span class="line">✔ Which Svelte app template? › SvelteKit demo app</span><br><span class="line">✔ Use TypeScript? … No / Yes</span><br><span class="line">✔ Add ESLint <span class="keyword">for</span> code linting? … No / Yes</span><br><span class="line">✔ Add Prettier <span class="keyword">for</span> code formatting? … No / Yes</span><br><span class="line">✔ Add Playwright <span class="keyword">for</span> browser testing? … No / Yes</span><br><span class="line"></span><br><span class="line">(以下略)</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> my-app</span><br><span class="line">$ npm install</span><br><span class="line">$ npm run dev -- --open</span><br></pre></td></tr></table></figure><h1 id="サンプルプロジェクトのページ構成"><a href="#サンプルプロジェクトのページ構成" class="headerlink" title="サンプルプロジェクトのページ構成"></a>サンプルプロジェクトのページ構成</h1><p>サンプルプロジェクトは3つのページがあります。静的なAbout以外に、よくあるカウンターと、ToDoがあります。カウンターはSvelte単体でも実現できるような内容で、ToDoはウェブサービスアクセスを伴うサンプルです。</p><img src="/images/20220415a/スクリーンショット_2022-04-08_9.57.03.png" alt="カウンターのサンプル" width="1200" height="856" loading="lazy"><img src="/images/20220415a/スクリーンショット_2022-04-08_9.58.41.png" alt="TODOのサンプル" width="1200" height="856" loading="lazy"><p>ページ周りのコードを抜き出してきたのがこれです。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── src</span><br><span class="line">│   ├── app.css</span><br><span class="line">│   ├── app.html</span><br><span class="line">│   └── routes</span><br><span class="line">│       ├── __layout.svelte</span><br><span class="line">│       ├── about.svelte</span><br><span class="line">│       ├── index.svelte</span><br><span class="line">│       └── todos</span><br><span class="line">│           ├── _api.ts</span><br><span class="line">│           ├── index.svelte</span><br><span class="line">│           └── index.ts</span><br></pre></td></tr></table></figure><p>ぱっと見て想像できるルールはこんな感じです。</p><h2 id="src-routesの階層がURLになりそう"><a href="#src-routesの階層がURLになりそう" class="headerlink" title="src/routesの階層がURLになりそう"></a><code>src/routes</code>の階層がURLになりそう</h2><p>Next.jsの<code>pages</code>みたいな感じのようです。<a href="https://kit.svelte.dev/docs/routing">Routing</a>ページを見て答え合わせすると、やはりこのファイルシステムがそのままURLになるよ、と書いてあります。便利ですよねこれ。</p><h2 id="src-routes-layout-svelteも共通部分を書きそう"><a href="#src-routes-layout-svelteも共通部分を書きそう" class="headerlink" title="src/routes/__layout.svelteも共通部分を書きそう"></a><code>src/routes/__layout.svelte</code>も共通部分を書きそう</h2><p>おそらくこれはきっとどのページでも今日で使われるヘッダーとかフッターとかを書きそうで、.svelteだからきっと動的なコンポーネントも使えそうな気がします。</p><p><a href="https://kit.svelte.dev/docs/layouts">Layouts</a>を見て答え合わせをすると、確かにこのようです。書くページのコンテンツは、このコンポーネントの<code>&lt;slot&gt;</code>の中に表示されるとのこと。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br></pre></td></tr></table></figure><p>複数階層にしてネストしてレイアウトを設定して使ったりもできて、同じフォルダで同じブレッドクラムを表示させたりというのもできるみたいですね。</p><p>面白かったのは、名前付きレイアウトで、<code>src/routes/__layout-foo.svelte</code>という名前のレイアウトを作っておいて、実際に作られるページのファイル名が<code>src/routes/my-special-page@foo.svelte</code>だとすると、この特別な<code>foo</code>レイアウトが使われるとのこと。複雑な継承とかもできるようです。</p><p>あと、このレイアウトのページにあった注目内容は<code>__error.svlete</code>ですね。これでページが見つからなかったときのエラーページが設定できるようです。</p><p>階層構造のサポートはSvelteのRouter機能のポイントらしく、レイアウトとかエラーページとかは特定のフォルダ内でのみに適用とかができるみたいです。</p><h2 id="app-htmlが最終的に作られるアプリケーションの枠組みっぽい"><a href="#app-htmlが最終的に作られるアプリケーションの枠組みっぽい" class="headerlink" title="app.htmlが最終的に作られるアプリケーションの枠組みっぽい"></a>app.htmlが最終的に作られるアプリケーションの枠組みっぽい</h2><p>__layout.svelteと違い、きっと静的な共通要素、例えばmetaタグとかはここに書くんだろうと思われます。しかし、これに関する直接的な解説はドキュメントにはありません。ドキュメントの中に書かれているapp.htmlに関する要素は、2つだけです。</p><ul><li><a href="https://kit.svelte.dev/docs/configuration">Configure</a>で、src/app.htmlの名前を書き換えるコンフィグがあるよ</li><li><a href="https://kit.svelte.dev/docs/migrating#project-files-src-template-html">SvelteKitの前身のSapperから乗り換えるとき</a>はapp/template.htmlからsrc/app.htmlに書き換えて、タグも置き換えたり、不要になったタグは削除してね。</li></ul><p><a href="https://sapper.svelte.dev/docs#src_template_html">Sapper側のドキュメント</a>と合わせて読めば意味が理解できますね:</p><blockquote><p>サーバーから返されるレスポンスのテンプレートとして使われるファイル。Svelteは次のタグをそれぞれの内容に置き換える:</p><ul><li><code>%svelte.head%</code> — ページ固有の<code>&lt;title&gt;</code>などの<code>&lt;head&gt;</code>に置かれるHTMLに置き換えられる</li><li><code>%svelte.body%</code> — SvelteがレンダリングするボディのHTMLに置き換えられる</li></ul></blockquote><h1 id="API周り"><a href="#API周り" class="headerlink" title="API周り"></a>API周り</h1><p>SvelteじゃなくてSvelteKitを選びたいニーズとしては主にサーバーもTypeScriptやJavaScriptも書きたいというのがあると思います。それ以外にもすでに説明したrouter周りで楽がしたい、静的コンテンツ生成に使いたい、というのもあると思いますが、ここではサーバーAPI提供側のコードを見ていきます。</p><p>API周りは以下のコードのようですね。src/routes/todos/index.svelteは<code>/todos</code>でアクセスしたときに表示されるページのコンテンツなので、<code>index.ts</code>がハンドラー定義のファイルみたいですね。<code>_api.ts</code>は名前からして共通コード置き場でrouterからは無視されそうな雰囲気。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">├── src</span><br><span class="line">│   └── routes</span><br><span class="line">│       └── todos</span><br><span class="line">│           ├── _api.ts</span><br><span class="line">│           ├── index.svelte</span><br><span class="line">│           └── index.ts</span><br></pre></td></tr></table></figure><p>Next.jsはフォルダ構成をガッチリ決めることでAPIとHTMLを分けていましたが、ミックスできるのは便利ですね。でもこれだと、<code>/todos</code>でHTMLを要求するアクセスされたときと、APIのGETの区別が大変そうですね。ドキュメントを見ていきます。</p><p><a href="https://kit.svelte.dev/docs/routing#endpoints">Endpoints</a>のドキュメントによると、<code>.ts</code>でエンドポイントにできることが書かれていますね。その中で、<code>get</code>とか<code>post</code>という名前で関数を作ってあげるとエンドポイントになるとのこと。それ以外にも、post, put, patch, del(deleteは予約語なのでdel)に対応するとのことです。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">get</span>: <span class="title class_">RequestHandler</span> = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ただ、これだとWebページのコンテンツとAPIの区別がつかないので、明治的に<code>accept: application/json</code>をリクエストにつけるか、<code>__data.json</code>というのをリクエスト側で付与することでJSONのAPIの方を明示的に要求するらしい。確かに、サンプルコードの動きを見ると、<code>__data.json</code>がついていますね。</p><img src="/images/20220415a/スクリーンショット_2022-04-10_9.40.11.png" alt="API" width="1200" height="412" loading="lazy"><p>アンダースコアで除外できることは<a href="https://kit.svelte.dev/docs/routing#private-modules">プライベートモジュール</a>で説明されていました。ピリオドもプライベート扱い（<code>.well-known</code>を除く)とのこと。</p><h2 id="メソッドオーバーライド"><a href="#メソッドオーバーライド" class="headerlink" title="メソッドオーバーライド"></a>メソッドオーバーライド</h2><p>動かしてみて、おっと思ったのが、<code>_method=DELETE</code>というところですね。HTTP的にはメソッドはたくさんありますが、JavaScriptを使わずにHTTPのフォームを使って送れるのはGETとPOSTのみです。そこで、POSTにいろいろなメソッドも振る舞わせるというメソッドオーバーライドというのがあります。</p><img src="/images/20220415a/スクリーンショット_2022-04-10_9.50.19.png" alt="メソッドオーバーライド" width="1200" height="250" loading="lazy"><p>設定を見たときに、メソッドオーバーライドという項目があるのに気づきました。</p><figure class="highlight js"><figcaption><span>svelte.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line"><span class="attr">preprocess</span>: <span class="title function_">preprocess</span>(),</span><br><span class="line"><span class="attr">kit</span>: &#123;</span><br><span class="line"><span class="attr">adapter</span>: <span class="title function_">adapter</span>(),</span><br><span class="line"><span class="attr">methodOverride</span>: &#123;</span><br><span class="line"><span class="attr">allowed</span>: [<span class="string">&#x27;PATCH&#x27;</span>, <span class="string">&#x27;DELETE&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://kit.svelte.dev/docs/routing#endpoints-http-method-overrides">メソッドオーバーライド</a>のドキュメントにいろいろ書かれています。フロント側でがんばらなくてもできるようにする配慮があるのはいいですね。</p><h2 id="フォームのパース"><a href="#フォームのパース" class="headerlink" title="フォームのパース"></a>フォームのパース</h2><p>サンプルを見ると、<code>request</code>のメソッドを使うことで、フロントから渡されるリクエストを処理できるみたいですね。</p><figure class="highlight ts"><figcaption><span>src/routes/todos/index.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">post</span>: <span class="title class_">RequestHandler</span> = <span class="keyword">async</span> (&#123; request, locals &#125;) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> form = <span class="keyword">await</span> request.<span class="title function_">formData</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">api</span>(<span class="string">&#x27;post&#x27;</span>, <span class="string">`todos/<span class="subst">$&#123;locals.userid&#125;</span>`</span>, &#123;</span><br><span class="line"><span class="attr">text</span>: form.<span class="title function_">get</span>(<span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>このリクエストオブジェクトは<a href="https://kit.svelte.dev/docs/routing#endpoints-body-parsing">ボディのパースのドキュメント</a>のリンクを見る限り、<a href="https://developer.mozilla.org/en-US/docs/Web/API/Request">ブラウザのAPIと同じ</a>っぽい。</p><h2 id="サンプルのAPI実装のバックエンドの中身"><a href="#サンプルのAPI実装のバックエンドの中身" class="headerlink" title="サンプルのAPI実装のバックエンドの中身"></a>サンプルのAPI実装のバックエンドの中身</h2><p>サーバーコード側の実装を見てみたら、fetchでsvelteが提供しているサーバーにリクエストを飛ばしているっぽいですね。サンプル用にサーバー維持するのすごい。たしかにストレージ周りだとSQLにしてもMongoDBなどにしても、SvelteKitの書き方を伝えたい、というニーズ以上のさまざまな前提知識が発生しがちなので、この割り切りは理解できます。</p><figure class="highlight ts"><figcaption><span>/src/routes/todos/_api.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> base = <span class="string">&#x27;https://api.svelte.dev&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">RequestHandler</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@sveltejs/kit&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">api</span>(<span class="params">method: <span class="built_in">string</span>, resource: <span class="built_in">string</span>, data?: Record&lt;<span class="built_in">string</span>, <span class="built_in">unknown</span>&gt;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">`<span class="subst">$&#123;base&#125;</span>/<span class="subst">$&#123;resource&#125;</span>`</span>, &#123;</span><br><span class="line">method,</span><br><span class="line"><span class="attr">headers</span>: &#123;</span><br><span class="line"><span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">body</span>: data &amp;&amp; <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://dbdb.io/db/nedb">NeDB</a>みたいなのでもいいのに、と思ったら、NeDBはもうメンテナンス中止していたんですね。残念。</p><h1 id="フック"><a href="#フック" class="headerlink" title="フック"></a>フック</h1><p>ソースフォルダの中にhooks.tsという気になるファイルがありました。中を見ると、クッキーからユーザーIDを取り出し、なければUUIDを生成して<code>event.locals.userid</code>に格納しています。ウェブアプリケーションフレームワークに頻出するミドルウェアと近そうです。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">├── src</span><br><span class="line">│   └── hooks.ts</span><br></pre></td></tr></table></figure><p><a href="https://kit.svelte.dev/docs/hooks">フックのドキュメント</a>を見ると、このフックのようにサーバーへのリクエストをちょっと加工する以外に、カスタムコンテンツをフックで返してしまうとか、外部サーバーへのリクエストを加工するなど、いろいろなことができるみたいです。</p><figure class="highlight ts"><figcaption><span>src/hooks.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">response.<span class="property">headers</span>.<span class="title function_">set</span>(</span><br><span class="line"><span class="string">&#x27;set-cookie&#x27;</span>,</span><br><span class="line">cookie.<span class="title function_">serialize</span>(<span class="string">&#x27;userid&#x27;</span>, event.<span class="property">locals</span>.<span class="property">userid</span>, &#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line"><span class="attr">httpOnly</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>クッキーへの書き込みは、ヘッダーに直接入れていますが、<a href="https://kit.svelte.dev/docs/routing#endpoints-setting-cookies">ドキュメント</a>でもそうなっていますね。面白いですね。</p><h1 id="それ以外の要素"><a href="#それ以外の要素" class="headerlink" title="それ以外の要素"></a>それ以外の要素</h1><p>生成されたコードにはないがドキュメントにある項目は以下の通りです。あとはこのあたりをピックアップして読んでみたら、SvelteKitの機能をざっと掴むには良いかなと思いました。</p><ul><li><a href="https://kit.svelte.dev/docs/routing#advanced-routing">パスで渡すパラメータ</a></li><li><a href="https://kit.svelte.dev/docs/loading">ページ生成前のコンテンツのロード</a></li><li><a href="https://kit.svelte.dev/docs/modules">モジュール</a></li></ul><p>あとは、デプロイ時の環境ごとの違いは<a href="https://kit.svelte.dev/docs/adapters">アダプター</a>というものにまとめられているので、何かしらのアダプターについては学ぶことになるかと思います。</p><h1 id="補足-Playwright"><a href="#補足-Playwright" class="headerlink" title="(補足)Playwright"></a>(補足)Playwright</h1><p>SvelteKitのプロジェクト作成ではJestとかVitestのような普通のテスティングフレームワークではなくて、E2EのPlaywrightの生成のみに対応しています。</p><p>ですが、TypeScriptを使うよオプションと、Playwrightを同時に有効にするとエラーになってしまいました。<a href="https://playwright.dev/docs/test-typescript">Playwrightのマニュアル</a>に従って事前にビルドしてからテストを実行するようにしたら修正できました。</p><figure class="highlight json"><figcaption><span>tests/tsconfig.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2015&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Node&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../tests-out&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;pretest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc --incremental -p tests/tsconfig.json&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;playwright test -c tests-out&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>TypeScript周りはいろいろ<a href="https://github.com/sveltejs/kit/issues?q=is:issue+playwright+is:open">Issueがどんどん修正されている</a>ので、もうちょっと新しいバージョンなら問題なくなるんじゃないかと思います。<a href="https://github.com/sveltejs/kit/issues/4143">Issue</a>を見ると、PlaywrightじゃないUnit Testについて はvitest側のsveltekit対応の改善待ちステータスのようです。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>SvelteKitを学ぼうと思ったけど、チュートリアル的なコンテンツがなく、上からドキュメント読むのもいいけど手っ取り早く概要を掴もうと思って、デフォルトプロジェクトのコードリーディングなどをしつつ、ドキュメントをつまみ食いするスタイルで学習してみました。</p><p>あと、書き終わってから気づいたのですが、<a href="https://kit.svelte.jp/">日本語訳されたドキュメント</a>もありましたので、日本語なら早く読めるぞという方はドキュメントを先に読むのでもいいかもしれません。</p><p>全体的に、コードを見ると動きが想像できそうなものが多いというか、Next.jsとか類似ソリューションに近いというか、あまり奇をてらったところがない感じがします。あと、クッキーの設定だったり、メソッドオーバーライドだったり、サーバーで使われるReqestがブラウザのそれと同じだったり、既存のウェブ周りの情報がある人には慣れ親しんでいる方法を選択してくれている感じは気に入りました。</p><p>テスト周りの対応を見るとまだまだ若い感じが伝わってきますし、今までReact/Vueでやってきたようなことをいきなり全部実現というのは少し手間暇があるかもしれませんが、活発に改善されていっているので、SvelteKitをじっくり触りながら変化を感じるのも楽しいと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Svelte/">Svelte</category>
      
      <category domain="https://future-architect.github.io/tags/SvelteKit/">SvelteKit</category>
      
      
      <comments>https://future-architect.github.io/articles/20220415a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>WordPressの脆弱性への攻撃とセキュリティ対策の実施</title>
      <link>https://future-architect.github.io/articles/20220414a/</link>
      <guid>https://future-architect.github.io/articles/20220414a/</guid>
      <pubDate>Wed, 13 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;2021年7月入社の八田です。現在はCSIG（Cyber Security Innovation</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>2021年7月入社の八田です。現在はCSIG（Cyber Security Innovation Group）に所属しています。CSIGは、リスクアセスメントやセキュリティ対策支援を行うコンサルティングチームと、FutureVulsの開発を行っているチームがあり、私は前者のコンサルティングチームに所属しています。今回はIT未経験で入社した私が技術面のキャッチアップとして取り組んだ、脆弱性への攻撃および対策方法を共有したいと思います。</p><p>本記事で、読者の皆さんのセキュリティ分野への関心・理解を深められたり、「文系・IT未経験でも入社半年でこのレベルのことができるようになるのだ！」ということを伝えられたら嬉しいです。</p><h1 id="WordPressプラグインの脆弱性CVE-2020-25213"><a href="#WordPressプラグインの脆弱性CVE-2020-25213" class="headerlink" title="WordPressプラグインの脆弱性CVE-2020-25213"></a>WordPressプラグインの脆弱性CVE-2020-25213</h1><p>今回扱ったのは、WordPressのプラグインFile Managerの脆弱性で、CVE-2020-25213が割り当てられているものです。</p><p>ご存知の方も多いかもしれませんが、WordPressというのは簡単にホームページが作成できるCMS（Contents Management System）であり、File ManagerはWordPress上のフォルダやファイルの管理ができるプラグインのことです。その利便性が故に、File Managerは非常に人気のプラグインでダウンロードは70万を超えているようです。</p><p>そんな大人気のプラグインFile Managerですが、2020年に重大な脆弱性が発覚しました。<br>この脆弱性を利用することで、認証不要でファイルのアップロードができます。WebShellをアップロードすることで、任意のコードを実行することができます。</p><p>この脆弱性を利用すれば、Webサーバからの情報漏洩やサイトの改ざんが可能です。また、具体的な方法は後述しますが攻撃が非常に容易であるのもこの脆弱性の特徴で、誰でも利用できてしまいます。（今回のキャッチアップでこの脆弱性を選んだのも攻撃が容易だったというのが理由です。）</p><p>また、米国のサイバーセキュリティやインフラの安全に関わるアドバイザリーを行う政府機関のCISA（Cybersecurity and Infrastructure Security Agency）が発表している脆弱性リスト「Known Exploited Vulnerabilities Catalog（KEV Catalog）」にも登録されていることから、悪用される危険性が非常に高い脆弱性ということがわかります。</p><h1 id="攻撃方法"><a href="#攻撃方法" class="headerlink" title="攻撃方法"></a>攻撃方法</h1><p>今回確認したPoCは、攻撃対象のWordPressサーバとは別のホストから攻撃を仕掛け、攻撃対象のWordPressサーバに格納されたテストファイルの削除や新たにファイル配置を行うというものです。</p><p>攻撃対象サーバ構築では、以下のものを使用しました。</p><p><strong>環境情報（攻撃対象サーバ）</strong></p><ul><li>CentOS 7.9</li><li>Apache 2.4.6</li><li>MariaDB 10.6</li><li>PHP 8.0</li><li>WordPress 5.9.1</li><li>File Manager 6.0</li></ul><p>一般的な構築手順のためインストール作業の詳細は省略しますが、以下の流れで進めました。</p><ol><li>Apache、MariaDB、PHPインストール</li><li>WordPressインストール</li><li>File Managerインストール</li><li>テストファイル（testfile）作成</li></ol><p><strong>環境情報（攻撃クライアント）</strong></p><ul><li>CentOS 7.9（攻撃対象サーバとは別に用意）</li><li>Python 2.7</li><li>pip 20.3.4</li><li>requests 2.6.0</li></ul><p>検証に使うPoCは<a href="https://github.com/w4fz5uck5/wp-file-manager-0day/blob/master/elFinder.py">こちら</a>で公開されているコードを使用しました。</p><p>このPoCは、攻撃対象サーバのconnector.minimal.phpというファイルに対してPOSTし、connector.minimal.phpを介してelFinder（サーバ内のファイルを扱うもの）インスタンスを呼び出すことで、x.phpというWebShellを配置します。そして配置したx.phpに対して任意のコマンドを送ります。<br><img src="/images/20220414a/攻撃仕組み4_2022-04-08_085527.png" alt="攻撃仕組み4_2022-04-08_085527.png" width="934" height="631" loading="lazy"></p><p>したがって、今回のFile Managerの脆弱性はconnector.minimal.phpが外部から実行できてしまうことに原因があると言えるでしょう。</p><h2 id="攻撃実行"><a href="#攻撃実行" class="headerlink" title="攻撃実行"></a>攻撃実行</h2><p>攻撃対象サーバに対して攻撃をしていきます。<br><code>./vul.py http //192.168.10.6/wordpress</code><br>まず、攻撃クライアント構築で作成したファイルを実行します。これにより、攻撃側が用意したPHPファイルが攻撃対象サーバへ格納され、任意のコマンド実行が可能な状態となります。</p><p>その後、任意のコマンドを入力できるようになるので、攻撃対象サーバ内で実行させたい任意のコマンドを入力します。</p><p>今回実行したコマンドは順に、</p><ol><li>既存ファイルの削除<br><code>rm -f /var/www/html/testfile</code></li><li>ファイルの配置<br><code>touch /var/www/html/wordpress/testfile2</code></li><li>ファイルへの書き込み<br><code>echo Hello &gt;&gt; /var/www/html/wordpress/testfile2</code></li></ol><p>の3つです。</p><p>※上の黒いウィンドウが攻撃対象（192.168.10.6）、下の青いウィンドウが攻撃クライアントです。<br><img src="/images/20220414a/攻撃実行タイトルフレーム付_0408.gif" alt="攻撃実行タイトルフレーム付_0408" width="959" height="984" loading="lazy"></p><p>このように、非常に簡単にWordPressサーバ内のファイル配置や削除、変更が可能であることがわかります。<br>これを利用すれば、WordPress関連の設定ファイルの改ざんや悪意のあるスクリプトが記載されたファイルをアップロードするといった不正が行われてしまいます。</p><h1 id="対策方法"><a href="#対策方法" class="headerlink" title="対策方法"></a>対策方法</h1><p>攻撃に対してどのように検知・防御できるかを検討しました。</p><p>脆弱性に対する対策として、ソフトウェアのアップデートを行うことが最も効果的です。</p><p>しかし、他のソフトウェアとの互換性がなくなってしまう、などの事情でアップデートできない場合も考えられます。そこで今回は、他に行うことができる対策として複数のセキュリティツールで対策を行う、多層防御を実施しました。<br><img src="/images/20220414a/対策図_2022-04-08_104452.png" alt="対策図_2022-04-08_104452" width="837" height="478" loading="lazy"></p><p>複数の層で対策をすることで、一か所の防御が破られても他のレイヤでカバーできセキュリティレベルが高まります。</p><p>実際に行った対策は以下の通りです。</p><ol><li>改ざん検知</li><li>脆弱性検知・管理</li><li>侵入防御</li><li>アクセス制御</li><li>ログ監視・通知</li></ol><p>実施した各対策について説明していきたいと思います。</p><h2 id="1-改ざん検知"><a href="#1-改ざん検知" class="headerlink" title="1. 改ざん検知"></a>1. 改ざん検知</h2><p>今回の攻撃では、攻撃用のPHPファイルが追加されたり既存のファイルが削除されたりと、攻撃対象サーバ内でのファイルの不審な動きが多かったため、ファイルの変更監視を行うTripwireというツールを使用して改ざん検知および間接的な不正侵入検知を行いました。</p><p>Tripwireとはホスト型IDSで、あらかじめ作成したベースラインデータベースと現行システム上のファイル・ディレクトリの状態を照合（整合性チェック）することで、差分検知を行います。また、不正に改ざんされたり意図せず破損してしまったりした場合には元の状態に戻すこともできます。</p><p>こちらを使って、実施した攻撃の一つのテストファイルの削除を検知しました。</p><h3 id="検知の実施"><a href="#検知の実施" class="headerlink" title="検知の実施"></a>検知の実施</h3><p>差分検知には、監査対象および監査ルールを定義するポリシーファイルとベースラインデータベースの作成が必要です。まず、ポリシーファイルを作成します。<br>デフォルトのポリシーファイルの内容を今回の環境に最適化するため、ファイルを書き換えました。<br>新しいポリシーファイルを基にベースラインとなるデータベースを作成します。<br><code>tripwire -m i -s -c /etc/tripwire/tw.cfg</code></p><p>データベースが作成できたら、攻撃クライアントから攻撃対象サーバ内のテストファイルを削除し、攻撃対象サーバで差分検知をします。<br><code>tripwire -m c -s -c /etc/tripwire/tw.cfg</code><br>レポートを見てみるとテストファイルがなくなっていることがわかります。<em>➀<br>また、Modifiedの欄にあるPHPファイルが攻撃クライアントから送られてきたものです。</em>➁（何度も攻撃しているのでModified欄に入っていますが、攻撃初回はAddedの欄に表示されると思います。）<br><img src="/images/20220414a/TWレポート_再_2022-04-01_102943_(4).png" alt="TWレポート_再" width="686" height="342" loading="lazy"></p><p>今回は手動で差分検知を実施しましたが、cronで設定することで定期的な自動検知が可能となります。<br>また、ポリシーファイル内でEmailアドレスを設定すれば、ルール違反が発生した際に通知が送信されるので、更に管理が容易になり被害を抑える迅速な対応が可能となるでしょう。</p><h2 id="2-脆弱性検知・管理"><a href="#2-脆弱性検知・管理" class="headerlink" title="2. 脆弱性検知・管理"></a>2. 脆弱性検知・管理</h2><p>日頃から自分が扱う環境に脆弱性が存在するか確認し、パッチを適用しておけば未然に被害を防ぐことができます。今回はFile Managerに潜む脆弱性の検知を行うためFutureVulsというサービスを使いました。</p><p>FutureVulsとは、2016年にフューチャーの神戸氏が開発・公開し世界的に話題になった脆弱性検知ツールOSS Vulsの商用版です。<br>OSS Vulsは管理下のシステムに入っているOSパッケージやライブラリなどのソフトウェア情報を収集し、公開されている脆弱性データベースの情報と関連付け、自システムに内在する脆弱性情報のみをメールやSlack等で関係者に通知できます。OSS Vulsの導入により脆弱性管理を効率化できます。<br>また、商用版のFutureVulsは、スキャン結果をグラフィカルに表示するダッシュボード機能、検知した脆弱性を漏れなく管理できるチケット管理機能、複数の事業部での脆弱性管理が可能なグループ横断管理機能など、OSS Vulsと比較するとより運用・管理を意識した機能が充実しています。</p><p>OSS Vuls および FutureVulsの歴史についてはこちらの記事で詳しく説明されています。</p><p><a href="https://future-architect.github.io/articles/20201027/">https://future-architect.github.io/articles/20201027/</a></p><p>今回は機能がより充実したFutureVulsを使用しました。</p><h3 id="検知の実施-1"><a href="#検知の実施-1" class="headerlink" title="検知の実施"></a>検知の実施</h3><p>対象のサーバにスキャナをインストールし、スキャンを実施します。<br>WordPressプラグインの脆弱性ということで、WordPress関連の脆弱性情報を2万件以上持つwpscan.comの脆弱性データベースを利用したWordPressスキャンを行います。</p><p>スキャンはスキャナのインストール後5分毎に行われますが、手動でも可能です。今回は手動でスキャンしてみました。<br><code>/opt/vuls-saas/vuls-saas.sh</code><br>スキャン後しばらくするとポータルサイトにスキャン結果が表示されました。<br>CVE-2020-25213が検知されていることが確認できます。<br><img src="/images/20220414a/FV_ポータルサイト1_2022-03-25_092729.png" alt="FV_ポータルサイト1" width="1200" height="542" loading="lazy"><br>管理画面では検知された脆弱性情報がまとめられています。<br><img src="/images/20220414a/FV_脆弱性詳細タブ_2022-04-01_112205.png" alt="FV_脆弱性詳細タブ" width="1200" height="636" loading="lazy"></p><p>冒頭で触れましたが、CVE-2020-25213が重大なリスクのある脆弱性としてCISAのKEVに登録されていることが詳細タブからも確認できます。<em>➀<br>また、どこから攻撃可能なのかを表す攻撃元区分や攻撃の複雑さといったCVSSの評価も表示されます。</em>➁　今回の脆弱性では攻撃の複雑さが「低」となっており、攻撃が容易であるということが推測できます。</p><p>脆弱性検知後は管理画面「タスク」タブからチケットによるタスク管理が可能です。対応に応じて各タスクのステータスを変更したりコメントを投稿して他ユーザと情報共有が行えたりします。パッチが適用されたら次回スキャンでステータスが自動で「PATCH_APPLIED」となります。</p><p>その他の機能についてはこちらから確認できます。</p><p><a href="https://help.vuls.biz/">https://help.vuls.biz/</a></p><h2 id="3-侵入防御"><a href="#3-侵入防御" class="headerlink" title="3. 侵入防御"></a>3. 侵入防御</h2><p>攻撃方法の箇所で触れましたが、今回の脆弱性の原因はconnector.minimal.phpが外部から実行できてしまう点にありました。なので、攻撃用PHPファイルをconnector.minimal.phpファイルに対してPOSTするアクセスをブロックできれば攻撃を防ぐことができます。攻撃クライアントから送られるパケットの中身を確認し不正なアクセス防御を行うためCloud One Workload Securityを使いました。</p><p>Cloud One Workload Securityとは、以前Deep Securityという名称で販売されていたもので、サーバ周りの様々なセキュリティ対策が可能な商用サービスです。今回はWAFと同等の機能である侵入防御機能を利用しましたが、他にも以下の機能が利用可能です。</p><ul><li>不正プログラム対策</li><li>Webレピュテーション</li><li>アクティビティ監視</li><li>変更監視</li><li>アプリケーションコントロール</li><li>ファイアウォール</li><li>セキュリティログ監視</li></ul><p>本サービスは、エージェントを対象サーバに導入することで利用でき、ポータルサイトで結果を一括で管理できます。<br>また、脆弱性検知と管理を行うFutureVulsと連携が可能となっており、FutureVulsで検知した脆弱性情報をもとに関連する侵入防御ポリシーを適用することができます。</p><h3 id="防御の実施"><a href="#防御の実施" class="headerlink" title="防御の実施"></a>防御の実施</h3><p>まず、攻撃対象サーバ上でCloud Oneのエージェント（ds_agent）のステータスがactiveになっていることを確認します。その後、攻撃クライアントから攻撃を仕掛けると、エラーが出て攻撃対象サーバに接続することができません。<br><img src="/images/20220414a/WS_攻撃失敗_2022-03-25_140743.png" alt="WS_攻撃失敗" width="1200" height="520" loading="lazy"></p><p>Workload Securityのポータルサイトの侵入防御イベントを見てみると、不正なアクセスが検知されブロックしたことが確認できました。<em>➀　イベントを選択し関連する情報を見てみると、CVE-2020-25213の脆弱性を理由に侵入防御されていることがわかります。</em>➁<br><img src="/images/20220414a/WS_侵入防御イベント_2022-04-01_121633.png" alt="WS_侵入防御イベント" width="1200" height="633" loading="lazy"></p><h2 id="4-アクセス制御"><a href="#4-アクセス制御" class="headerlink" title="4. アクセス制御"></a>4. アクセス制御</h2><p>次に、アクセス制御です。<br>今回の検証では、攻撃クライアントで入力したコマンドが対象サーバ/var/www/html下のファイルやディレクトリに対して実行されてしまう、というものでした。幸いなことに、Linuxにはリソースへのアクセスが指定された条件通りかどうかを監視・制御するSELinuxという仕組みが存在するため、こちらを使用してアクセス制御を行ってみました。</p><p>SELinuxにはaudit logへのログ記録のみが行えるPermissiveモードと、ログの記録に加えて不正アクセスをブロックするEnforcingモードがあります。ログに関しては次章で触れるので、ここではEnforcingモードでブロックをしてみたいと思います。</p><h3 id="検知・防御の実施"><a href="#検知・防御の実施" class="headerlink" title="検知・防御の実施"></a>検知・防御の実施</h3><p>まず、現在設定されているモードを<code>getenforce</code>コマンドで確認し、Permissiveであれば<code>setenforce 1</code>でEnforcingモードに切り替えます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# setenforce 1</span><br><span class="line">[root@localhost ~]# getenforce</span><br><span class="line">Enforcing</span><br></pre></td></tr></table></figure><p>これで準備ができたので、攻撃をしていきます。<br><img src="/images/20220414a/Enforcing_攻撃失敗確認.gif" alt="Enforcing_攻撃失敗確認" width="959" height="987" loading="lazy"><br>ファイルが削除されていないことが確認できました。<br>SELinuxのEnforcingモードを使うことによって、リモートからのコマンドを防御することができました。</p><h2 id="5-ログの監視"><a href="#5-ログの監視" class="headerlink" title="5. ログの監視"></a>5. ログの監視</h2><p>前章ではSELinuxのEnforcingモードでルール違反のアクセスブロックを行いました。しかし、実際にはEnforcingモードを有効にすると正常なアクセスも拒否されることを懸念しPermissiveモードに留め、ログ記録のみ行っている環境も多いかと思います。ということで今回は、Permissiveモードで取得したログを攻撃防御に役立てるために、Elasticsearchというサービスを使用してログの集約・検索をしてみました。<br>出力されたログの監視を行うことで攻撃の早期発見・対応に繋げられ、結果的に被害の拡大を防ぐことができるでしょう。<br>Elasticsearchとは拡張性に優れた全文検索エンジンのことです。他Elastic製品と組み合わせることで、取得したログを集約、検索、分析、検知、アラート、通知、レポートなどに活用することができます。<br>Elasticsearchに関する用語の説明やインストール方法はこちらの記事で詳しく解説されています。</p><p><a href="https://future-architect.github.io/articles/20200623/">https://future-architect.github.io/articles/20200623/</a></p><p>今回は検索を行うElasticsearch、データをグラフィカルに可視化するKibana、特定のログを収集するFilebeat Moduleを使用しaudit logおよびApacheのエラーログの確認を行いました。</p><h3 id="検知・防御の実施-1"><a href="#検知・防御の実施-1" class="headerlink" title="検知・防御の実施"></a>検知・防御の実施</h3><p><code>setenforce 0</code> でSELinuxをPermissiveモードにしアクセス可否のログが記録されるようにしておきます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# setenforce 0</span><br><span class="line">[root@localhost ~]# getenforce</span><br><span class="line">Permissive</span><br></pre></td></tr></table></figure><p>攻撃クライアントから攻撃をし、テストファイルが削除されていることを確認後、ブラウザからKibanaへアクセスします。<br>Analytics → Dashboardと進み、検索から[Filebeat Auditd]Audit Events ECSのタイトルを選択します。</p><p>SELinuxによるアクセス制御の動作はAVC(Access-Vector-Cache)というフィールドを見れば確認できます。<br>avcがdeniedとなっており、アクセス拒否のログが出力されたことがわかります。Permissiveなので実際にアクセスはブロックされずテストファイルは削除されています。<br><img src="/images/20220414a/ES_KibanaAVCdenied_2022-03-29_153632.png" alt="ES_KibanaAVCdenied" width="1200" height="609" loading="lazy"></p><p>ちなみにEnforcingモードの場合は実際にアクセスをブロックするため、audit logに加えApacheのエラーログも出力されます。<br>Analytics → Dashboardより確認してみると、Apacheのエラーが出ていることがわかります。<br><img src="/images/20220414a/ES_Apacheerrorlogcheck_2022-03-30_114834.png" alt="ES_Apacheerrorlogcheck" width="1200" height="570" loading="lazy"></p><p>このように、Elasticsearch、Kibana、Filebeat Moduleを導入することによって、確認したいログをダッシュボードで視覚的に表示することができます。</p><p>今回はKibanaでのログ確認のみを実施しましたが、章の冒頭で述べたようにPermissiveの設定の場合、不正な挙動の早期発見・対応を行うにはログを監視する必要があります。そこでおすすめなのが、X-Packという拡張機能です。<br>X-Packはアラート、モニタリング、レポートなどの機能を含むパッケージで、不正行為をリアルタイムに検知しアラート・通知させることができます。<br>例えば、今回収集した「audit logのavcの値がdeniedだった場合」「Apacheのエラーログが検出された場合」に「アラート・通知する」と設定しておけばすぐに攻撃に気づくことができるでしょう。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>本記事では、WordPressプラグインの脆弱性への攻撃～対策を実施・解説しました。</p><p>上記で示したように、アップデートができない場合でも、複数のツール・サービスを組み合わせて多層防御を行うことでより堅牢なセキュリティ対策が行えるため攻撃被害を軽減する可能性が高まります。例えば、ゼロデイ攻撃を受けた場合、Workload Securityでは未対応のため侵入防御できないことがありますが、ファイルの変更監視を行うTripwireを併せて使っていればゼロデイ攻撃への対応有無に関係なく検知ができ、不正ファイルの削除するなどの対応に繋げられます。<br>このように、一か所の対策が破られても他のものでカバーでき、甚大な被害を避けられる可能性が高まるため、異なる特徴をもつ対策を併用することをおすすめします。</p><p>また、有識者の方々に半年間根気強くサポートしていただけたおかげで、「Linuxって何？」なレベルから、仮想サーバ構築～セキュリティ対策までできるレベルに成長することができました。この記事で、「フューチャーにはチャレンジする者を応援する環境が整っている」ということが伝わっていれば幸いです。</p><p>最後までお付き合い頂きありがとうございました！</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Security/">Security</category>
      
      
      <category domain="https://future-architect.github.io/tags/Vuls/">Vuls</category>
      
      <category domain="https://future-architect.github.io/tags/WordPress/">WordPress</category>
      
      <category domain="https://future-architect.github.io/tags/FutureVuls/">FutureVuls</category>
      
      <category domain="https://future-architect.github.io/tags/%E8%84%86%E5%BC%B1%E6%80%A7/">脆弱性</category>
      
      
      <comments>https://future-architect.github.io/articles/20220414a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>cuDNN の CUDA API の紹介</title>
      <link>https://future-architect.github.io/articles/20220413a/</link>
      <guid>https://future-architect.github.io/articles/20220413a/</guid>
      <pubDate>Tue, 12 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、2021年新卒入社の SAIG 松崎功也です。Tech Blog 初投稿です。&lt;/p&gt;
&lt;p&gt;NVIDIA</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、2021年新卒入社の SAIG 松崎功也です。Tech Blog 初投稿です。</p><p>NVIDIA 社が提供するディープラーニング用の GPGPU ライブラリ「cuDNN」の CUDA API を紹介します。</p><p>cuDNN は TensorFlow や Keras で学習や推論を高速化するためのバックエンドとしてよく使われていますが、CUDA API を直接たたいたことがある方は少ないのではないでしょうか？</p><p>個人的に作成したアプリケーションで CUDA API を叩く機会があり、社内の技術勉強会で紹介したところ好評だったため、こちらにも寄稿します。</p><img src="/images/20220413a/ファイル名.png" alt="システム概念図" width="1200" height="591" loading="lazy"><h1 id="cuDNN-を叩くことになったきっかけ"><a href="#cuDNN-を叩くことになったきっかけ" class="headerlink" title="cuDNN を叩くことになったきっかけ"></a>cuDNN を叩くことになったきっかけ</h1><p>私はレトロゲームを遊ぶことが多いのですが、解像度が低いため 4K ディスプレイだと拡大した際に非常に粗が目立ってしまいます。これをなんとかしたかったのがきっかけです。<br>最終的には以下の手法で解決することにしました。</p><ol><li>Windows API でゲームウィンドウをキャプチャ</li><li><a href="%22https://github.com/nagadomi/waifu2x%22">waifu2x</a> という CNN の超解像モデルでキレイに拡大</li><li>ウィンドウをもう一枚作り、拡大後の画像を表示</li></ol><p>この一連のフローをリアルタイムで行います。Python でもできないことはないのですが、今回はパフォーマンスチューニングのしやすさを考慮して CUDA を選択しました。</p><p>この記事では、1., 3. の部分の説明は行いません。3. において使用した cuDNN API にのみ焦点を当てて紹介します。</p><h1 id="cuDNN-で畳込みを行う流れ"><a href="#cuDNN-で畳込みを行う流れ" class="headerlink" title="cuDNN で畳込みを行う流れ"></a>cuDNN で畳込みを行う流れ</h1><p>流れは以下の通りです。</p><p>次の章で、1項目ずつコードと一緒に紹介していきます。なお、コードは正確に書くと量が多くなりすぎるためある程度端折って掲載しています。そのため、単純にコピペしてつなげても動きませんのでご了承ください。</p><ol><li>cuDNN ライブラリの初期化</li><li>モデルのフィルタの重みをRAM（ホスト）に読み込む</li><li>RAM（ホスト）に読み込んだフィルタの重みを VRAM へ転送する</li><li>フィルタ記述子（フィルターのサイズなどを定義）の準備</li><li>バイアス記述子の準備</li><li>畳込み記述子（パディング、ストライドなどを定義）の準備</li><li>活性化関数の記述子（ReLU, Swish などの係数を含めて定義）の準備</li><li>畳込みの内部アルゴリズムを設定する</li><li>拡大したい画像データをRAM（ホスト）→ VRAM へ転送</li><li>畳込みを行う</li></ol><h2 id="1-cuDNN-ライブラリの初期化"><a href="#1-cuDNN-ライブラリの初期化" class="headerlink" title="1. cuDNN ライブラリの初期化"></a>1. cuDNN ライブラリの初期化</h2><p>ライブラリの初期化は以下のように行います。</p><figure class="highlight c++"><figcaption><span>cuDNN の初期化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ハンドルを表す変数を用意</span></span><br><span class="line">cudnnHandle_t cudnn_handle = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="comment">// ハンドルのポインタを渡してハンドルを受け取る</span></span><br><span class="line"><span class="built_in">cudnnCreate</span>(&amp;cudnn_handle);</span><br></pre></td></tr></table></figure><h2 id="2-モデルのフィルタの重みをRAM（ホスト）に読み込む"><a href="#2-モデルのフィルタの重みをRAM（ホスト）に読み込む" class="headerlink" title="2. モデルのフィルタの重みをRAM（ホスト）に読み込む"></a>2. モデルのフィルタの重みをRAM（ホスト）に読み込む</h2><p>今回は JSON 形式で保存されているモデルのフィルタの重みを、<a href="%22https://github.com/kazuho/picojson%22">picojson</a> で読込みました。</p><img src="/images/20220413a/0cda6e32-95a9-385b-22fb-726db27156b6.png" alt="モデルをRAMに読み込む概念図" width="1089" height="523" loading="lazy"><figure class="highlight c++"><figcaption><span>重みの読込み</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// picojson で kernels に JSON ファイルを読込んでおく　</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; layer.nOutputPlane_; i++) &#123;</span><br><span class="line">    <span class="keyword">auto</span>&amp; kernel = kernels[i].<span class="built_in">get</span>&lt;picojson::array&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; layer.nInputPlane_; j++) &#123;</span><br><span class="line">        <span class="keyword">auto</span>&amp; mat = kernel[j].<span class="built_in">get</span>&lt;picojson::array&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; layer.kH_; k++) &#123;</span><br><span class="line">            <span class="keyword">auto</span>&amp; row = mat[k].<span class="built_in">get</span>&lt;picojson::array&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> l = <span class="number">0</span>; l &lt; layer.kW_; l++) &#123;</span><br><span class="line">                layer.host_weight_[</span><br><span class="line">                    i * (layer.nInputPlane_ * layer.kH_ * layer.kW_)</span><br><span class="line">                        + j * (layer.kH_ * layer.kW_)</span><br><span class="line">                        + k * layer.kW_</span><br><span class="line">                        + l</span><br><span class="line">                ] = row[l].<span class="built_in">get</span>&lt;<span class="type">double</span>&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-RAM（ホスト）に読み込んだフィルタの重みを-VRAM-へ転送する"><a href="#3-RAM（ホスト）に読み込んだフィルタの重みを-VRAM-へ転送する" class="headerlink" title="3. RAM（ホスト）に読み込んだフィルタの重みを VRAM へ転送する"></a>3. RAM（ホスト）に読み込んだフィルタの重みを VRAM へ転送する</h2><p>VRAM のメモリを確保して、読み込んだモデルのフィルタを VRAM へ転送します。<br>メモリ管理はスマートポインタで行っているので、それに合わせたラッパーを自作し使用しています（cuda_memory_allocate）。<br><img src="/images/20220413a/ファイル名_2.png" alt="VRAMへ転送する" width="1200" height="454" loading="lazy"></p><figure class="highlight c++"><figcaption><span>VRAM へ重みを転送する</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// VRAM のメモリを確保</span></span><br><span class="line">layer.device_weight_ptr_ = <span class="built_in">cuda_memory_allocate</span>(<span class="built_in">sizeof</span>(<span class="type">float</span>) * layer.host_weight_.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// RAM（ホスト）のデータを VRAM へ転送する。転送の方向は引数の最後で指定する。</span></span><br><span class="line"><span class="built_in">cudaMemcpy</span>(layer.device_weight_ptr_.<span class="built_in">get</span>(), layer.host_weight_.<span class="built_in">data</span>(),</span><br><span class="line">           <span class="built_in">sizeof</span>(<span class="type">float</span>) * layer.host_weight_.<span class="built_in">size</span>(), cudaMemcpyKind::cudaMemcpyHostToDevice);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>cuda_memory_allocate（自作のメモリ確保ラッパー）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解放処理</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cuda_device_memory_delete</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">void</span>* ptr)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cudaFree</span>(ptr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++11 のスマートポインタを使ってみる</span></span><br><span class="line"><span class="keyword">using</span> device_unique_ptr = std::unique_ptr&lt;<span class="type">void</span>, cuda_device_memory_delete&gt;;</span><br><span class="line"></span><br><span class="line"><span class="function">device_unique_ptr <span class="title">cuda_memory_allocate</span><span class="params">(<span class="type">size_t</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">void</span>* ptr = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="built_in">cudaMalloc</span>(&amp;ptr, n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">device_unique_ptr</span>(ptr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-フィルタ記述子（フィルターのサイズなどを定義）の準備"><a href="#4-フィルタ記述子（フィルターのサイズなどを定義）の準備" class="headerlink" title="4. フィルタ記述子（フィルターのサイズなどを定義）の準備"></a>4. フィルタ記述子（フィルターのサイズなどを定義）の準備</h2><p>フィルタ記述子では、フィルタの枚数やサイズなどを設定します。<br><img src="/images/20220413a/ファイル名_3.png" alt="フィルタ記述子" width="1200" height="577" loading="lazy"></p><figure class="highlight c++"><figcaption><span>フィルタ記述子の準備</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生のフィルタ記述子を作成</span></span><br><span class="line">cudnnFilterDescriptor_t temp_filter_desc;</span><br><span class="line"><span class="built_in">cudnnCreateFilterDescriptor</span>(&amp;temp_filter_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// スマートポインタに移管</span></span><br><span class="line">filter_desc_.<span class="built_in">reset</span>(temp_filter_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2番目以降の引数は、「データ型」、「データの配置順番」、「出力枚数」、「入力枚数」、「フィルターのサイズ」</span></span><br><span class="line"><span class="built_in">cudnnSetFilter4dDescriptor</span>(filter_desc_.<span class="built_in">get</span>(), CUDNN_DATA_FLOAT, CUDNN_TENSOR_NCHW, nOutputPlane_, nInputPlane_, kH_, kW_);</span><br></pre></td></tr></table></figure><h2 id="5-バイアス記述子の準備"><a href="#5-バイアス記述子の準備" class="headerlink" title="5. バイアス記述子の準備"></a>5. バイアス記述子の準備</h2><p>畳込み処理後に加算するバイアスの準備を行います。バイアスは1次元ベクトルなので、テンソルの記述子を流用します。</p><img src="/images/20220413a/バイアス.png" alt="バイアス" width="1200" height="409" loading="lazy"><figure class="highlight c++"><figcaption><span>バイアス記述子の準備</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生のテンソル記述子の準備</span></span><br><span class="line">cudnnTensorDescriptor_t temp_bias_desc;</span><br><span class="line">(<span class="built_in">cudnnCreateTensorDescriptor</span>(&amp;temp_bias_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// スマートポインタに移管</span></span><br><span class="line">bias_desc_.<span class="built_in">reset</span>(temp_bias_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1次元ベクトルとして、バイアスを設定する</span></span><br><span class="line"><span class="built_in">cudnnSetTensor4dDescriptor</span>(bias_desc_.<span class="built_in">get</span>(), CUDNN_TENSOR_NCHW, CUDNN_DATA_FLOAT, <span class="number">1</span>, nOutputPlane, <span class="number">1</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><h2 id="6-畳込み記述子（パディング、ストライドなどを定義）の準備"><a href="#6-畳込み記述子（パディング、ストライドなどを定義）の準備" class="headerlink" title="6. 畳込み記述子（パディング、ストライドなどを定義）の準備"></a>6. 畳込み記述子（パディング、ストライドなどを定義）の準備</h2><p>畳込み記述子では、フィルタの動かし方（パディング、ストライド、ディレーションなど）を設定します。</p><figure class="highlight c++"><figcaption><span>畳込み記述子の準備</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生の畳込み記述子を作成</span></span><br><span class="line">cudnnConvolutionDescriptor_t temp_conv_desc;</span><br><span class="line">(<span class="built_in">cudnnCreateConvolutionDescriptor</span>(&amp;temp_conv_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// スマートポインタに移管</span></span><br><span class="line">conv_desc_.<span class="built_in">reset</span>(temp_conv_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2番目以降の引数は、「パディング」、「ストライド」、「ディレーション」、「畳込みのタイプ」、「データ型」</span></span><br><span class="line"><span class="built_in">cudnnSetConvolution2dDescriptor</span>(conv_desc_.<span class="built_in">get</span>(), padH, padW, dH, dW, <span class="number">1</span>, <span class="number">1</span>, cudnnConvolutionMode_t::CUDNN_CONVOLUTION, cudnnDataType_t::CUDNN_DATA_FLOAT);</span><br></pre></td></tr></table></figure><h2 id="7-活性化関数の記述子の準備"><a href="#7-活性化関数の記述子の準備" class="headerlink" title="7. 活性化関数の記述子の準備"></a>7. 活性化関数の記述子の準備</h2><p>cuDNN ではデフォルトで ReLU や Swish などの活性化関数が準備されています（<a href="%22https://docs.nvidia.com/deeplearning/cudnn/api/index.html#cudnnActivationMode_t%22">提供されている活性化関数の一覧</a>）。</p><p>ただ、waifu2x で使用されている leakyReLU は cuDNN では提供されていないため、自前で準備する必要があります。</p><p>そのため、活性化関数には IDENTITY（何もしない恒等関数）を指定し、CUDA で leakyReLU を実装しました。</p><img src="/images/20220413a/ファイル名_4.png" alt="活性化関数の記述子" width="1200" height="679" loading="lazy"><figure class="highlight c++"><figcaption><span>活性化関数の記述子の準備</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生の活性化関数の記述子を作成</span></span><br><span class="line">cudnnActivationDescriptor_t temp_activation_desc;</span><br><span class="line"><span class="built_in">cudnnCreateActivationDescriptor</span>(&amp;temp_activation_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">//スマートポインタに移管</span></span><br><span class="line">activation_desc_.<span class="built_in">reset</span>(temp_activation_desc);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2番目以降の引数は、「活性化関数」、「NaN を伝播させるかどうか」、「活性化関数の係数」（無い場合は適当な数値を入れておけばOK）</span></span><br><span class="line"><span class="built_in">cudnnSetActivationDescriptor</span>(activation_desc_.<span class="built_in">get</span>(), cudnnActivationMode_t::CUDNN_ACTIVATION_IDENTITY,, cudnnNanPropagation_t::CUDNN_PROPAGATE_NAN, <span class="number">0.0</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><figcaption><span>leakyReLU.cu</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__global__ <span class="type">void</span> <span class="title">leakyRelu_</span><span class="params">(<span class="type">float</span>* vec, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = blockIdx.x * blockDim.x + threadIdx.x;</span><br><span class="line">    <span class="keyword">if</span> (i &lt; n)</span><br><span class="line">        vec[i] = <span class="number">0.1f</span> * <span class="built_in">fminf</span>(vec[i], <span class="number">0.f</span>) + <span class="built_in">fmaxf</span>(vec[i], <span class="number">0.f</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-畳込みの内部アルゴリズムを設定する"><a href="#8-畳込みの内部アルゴリズムを設定する" class="headerlink" title="8. 畳込みの内部アルゴリズムを設定する"></a>8. 畳込みの内部アルゴリズムを設定する</h2><p>cuDNN では畳込みの内部アルゴリズムがいくつか用意されていて、それぞれメモリ使用量や計算速度にトレードオフがあります（<a href="%22https://docs.nvidia.com/deeplearning/cudnn/api/index.html#cudnnConvolutionFwdAlgo_t%22">提供されている内部アルゴリズムの一覧</a>）。</p><p>これまで設定してきたフィルタ記述子や畳込み記述子の情報を使用して、cuDNN に自動で選択させることもできます。</p><p>ただ、同じ記述子を使用した場合でも、実行のたびに自動選択されるアルゴリズムが異なることがありました。そのため、使用するメモリ使用量や処理時間に再現性が欲しい場合は自分で指定するのが吉です。</p><figure class="highlight c++"><figcaption><span>畳込みの内部アルゴリズムの設定</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内部アルゴリズムを自動で設定する場合</span></span><br><span class="line"><span class="built_in">cudnnFindConvolutionForwardAlgorithm</span>(handle, src, filter_desc_.<span class="built_in">get</span>(), conv_desc_.<span class="built_in">get</span>(), dst, <span class="number">1</span>, &amp;nAlgos, &amp;forward_algo_);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部アルゴリズムを手動で設定する場合</span></span><br><span class="line">forward_algo_.algo = cudnnConvolutionFwdAlgo_t::CUDNN_CONVOLUTION_FWD_ALGO_IMPLICIT_PRECOMP_GEMM;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内部アルゴリズムの作業領域のサイズを計算する</span></span><br><span class="line"><span class="built_in">cudnnGetConvolutionForwardWorkspaceSize</span>(handle, src, filter_desc_.<span class="built_in">get</span>(), conv_desc_.<span class="built_in">get</span>(), dst, forward_algo_.algo, &amp;workspace_size);</span><br></pre></td></tr></table></figure><h2 id="9-拡大したい画像データをRAM（ホスト）→-VRAM-へ転送"><a href="#9-拡大したい画像データをRAM（ホスト）→-VRAM-へ転送" class="headerlink" title="9. 拡大したい画像データをRAM（ホスト）→ VRAM へ転送"></a>9. 拡大したい画像データをRAM（ホスト）→ VRAM へ転送</h2><p>あともう一息です。</p><p>拡大したい画像データを VRAM へ転送します。</p><figure class="highlight c++"><figcaption><span>画像の転送</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// VRAM を確保</span></span><br><span class="line"><span class="keyword">auto</span> image0 = <span class="built_in">cuda_memory_allocate</span>(image_size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// image_float にはウィンドウをキャプチャしたデータが入っている</span></span><br><span class="line"><span class="built_in">cudaMemcpy</span>(image0.<span class="built_in">get</span>(), image_float.<span class="built_in">data</span>(), <span class="built_in">sizeof</span>(<span class="type">float</span>) * image_float.<span class="built_in">size</span>(), cudaMemcpyKind::cudaMemcpyHostToDevice);</span><br></pre></td></tr></table></figure><h2 id="10-畳込みを行う"><a href="#10-畳込みを行う" class="headerlink" title="10. 畳込みを行う"></a>10. 畳込みを行う</h2><p>最後にここまで設定してきた記述子を元に、VRAM へコピーした画像データに畳込み処理を行います。<br>関数名から分かるように、畳込み、バイアスの加算、活性化関数の適用を一気に行います。</p><figure class="highlight c++"><figcaption><span>畳込みを行う</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cudnnConvolutionBiasActivationForward</span>(</span><br><span class="line">        handle,</span><br><span class="line">        &amp;one, src, src_data,</span><br><span class="line">        filter_desc_.<span class="built_in">get</span>(), device_weight_ptr_.<span class="built_in">get</span>(),</span><br><span class="line">        conv_desc_.<span class="built_in">get</span>(), forward_algo_.algo,</span><br><span class="line">        workspace, workspace_size,</span><br><span class="line">        &amp;zero, dst, dst_data,</span><br><span class="line">        bias_desc_.<span class="built_in">get</span>(), device_bias_ptr_.<span class="built_in">get</span>(),</span><br><span class="line">        activation_desc_.<span class="built_in">get</span>(),</span><br><span class="line">        dst, dst_data</span><br><span class="line">        );</span><br></pre></td></tr></table></figure><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>cuDNN の CUDA API による畳込みの流れを紹介しました。</p><p>普段なかなか見ることのないバックエンド側の API でしたが、興味を持ってもらえるきっかけになればうれしいです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/CUDA/">CUDA</category>
      
      <category domain="https://future-architect.github.io/tags/GPGPU/">GPGPU</category>
      
      <category domain="https://future-architect.github.io/tags/cuDNN/">cuDNN</category>
      
      
      <comments>https://future-architect.github.io/articles/20220413a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Blazor WebAssembly入門</title>
      <link>https://future-architect.github.io/articles/20220412a/</link>
      <guid>https://future-architect.github.io/articles/20220412a/</guid>
      <pubDate>Mon, 11 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;FutureOne株式会社</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>FutureOne株式会社 テクノロジー本部の清水です。</p><p>FutureOneはフューチャーグループの中で、中堅・中小企業様向けのERPパッケージを展開している会社となります。<br>弊社ERPパッケージの特色の1つとしては、弊社独自開発プラットフォームにより、中小企業様でも各企業様のビジネス・商習慣に合わせた柔軟なカスタマイズが可能な点があります。定型的な業務にはパッケージ標準機能にて効率化を図り、競争力・工夫が求められる業務にはお客様の要望をカスタマイズにて提供可能な、ハイブリッドなERPパッケージとなっています。</p><p>今回は、新たに弊社ERPパッケージのクラウド型提供で追加される、WebおよびモバイルインターフェースのプロトタイプアプリをBlazor WebAssemblyを用いて開発した経験を通して感じたことなどを簡単に紹介したいと思います。</p><h2 id="Blazor-WebAssemblyとは"><a href="#Blazor-WebAssemblyとは" class="headerlink" title="Blazor WebAssemblyとは"></a>Blazor WebAssemblyとは</h2><p>まず始めに、<code>WebAssembly</code>の基本について紹介します。<br><code>WebAssembly</code>とは、Webブラウザ上でネイティブコードに近い実行速度で高速に実行できるバイナリフォーマットです。<br>W3CのWebAssembly Working Groupによって2019年12月5日に勧告され、正式なWeb標準仕様となりました。詳細は以下で確認できます。</p><ul><li><a href="https://www.w3.org/2019/12/pressrelease-wasm-rec.html.en">World Wide Web Consortium (W3C) brings a new language to the Web as WebAssembly becomes a W3C Recommendation | W3C</a></li><li><a href="https://developer.mosnapcrab_devtools-localhost7065_2022-3-29_10-24-46_no-00zilla.org/ja/docs/WebAssembly/Concepts">WebAssembly の概要 | mdn web docs</a></li><li><a href="https://www.publickey1.jp/blog/19/webassemblyw3cwebassembly_core_specification_webassembly_web_apiwebassembly_javascript_interface_3.html">WebAssemblyがW3Cの勧告に到達。「WebAssembly Core Specification 」「WebAssembly Web API」「WebAssembly JavaScript Interface 」の3つ | Publickey</a></li></ul><p>現在は、C言語、C++、Rust、Go、Kotlin/Native、C#などが対応しています。</p><p>Blazor WebAssemblyは、.NETランタイムやアプリケーションコードが全て<code>WebAssembly</code>にコンパイルされ、コンパイル結果（アセンブリ）をダウンロードしたブラウザ上で実行するフレームワークです。</p><p>アプリケーション開発者は、従来JavaScriptを用いて記述していたフロントエンド側のスクリプト処理を、C#言語を用いて開発することができるのです。また、このフレームワークで開発されたアプリケーションは <strong>Single Page Application（SPA）</strong> でもあります。<br>Blazorには「Blazor WebAssembly」と「Blazor Sever」の２種類ありますが、今回は前者に焦点を充てて紹介します。</p><h2 id="プロトタイプアプリの概要"><a href="#プロトタイプアプリの概要" class="headerlink" title="プロトタイプアプリの概要"></a>プロトタイプアプリの概要</h2><p>今回の取り組みの発端は、弊社のERPパッケージはリッチクライアント画面となっているのですが、そこに冒頭のWebおよびモバイルインターフェースを追加するといった自分も含めた色んな人の要望から始まりました。</p><p>1stステップのアプリケーションの要件を簡単にまとめると以下のようになりました。</p><ul><li>まずは既存のERPパッケージのデータベースを参照し、売上情報などの情報を見れるようにしたい。</li><li>モバイルやPCなどクロスプラットフォームとしたい。</li></ul><h2 id="Blazor-WebAssembly採用の背景とメリット・デメリット"><a href="#Blazor-WebAssembly採用の背景とメリット・デメリット" class="headerlink" title="Blazor WebAssembly採用の背景とメリット・デメリット"></a>Blazor WebAssembly採用の背景とメリット・デメリット</h2><p>Blazor WebAssemblyを採用した背景としては、面白そうな技術要素で、かつ開発に時間をかけずにクイックに動くものを見せて欲しいという依頼がリーダーからあり、私が通常業務でC#を扱っている点や弊社内には.NET系のエンジニアが多数在籍している点からBlazor WebAssemblyを選択しました。</p><p>ざっくりとBlazor WebAssemblyのメリットとデメリットを主観含め挙げます。</p><ul><li>メリット（弊社にとって馴染みのある技術が利用できる）<ul><li>フロントエンド（のスクリプト処理）およびバックエンドをC#で記述できる。<ul><li>もちろんHTML、CSSの知識は必要です。</li></ul></li><li>Visual Studioさえあれば開発可能である。<ul><li>何ならIISやAzure App ServiceへVisual Studioから直接デプロイできる。</li></ul></li><li>Azure App Service（Azure のWebアプリホスティングサービス）がBlazor WebAssemblyへ対応している。</li><li>SPAで避けて通れないユーザ認証サービスとして、Azure Active Directoryが対応している。<ul><li>また、実装方法に関する公式ドキュメントが、Microsoft社に依頼せずともオープンに充実している。</li></ul></li><li>Microsoft社が今推しのフレームワークで、積極的に開発が進んでいる。<ul><li>ASP.NET Web Forms アプリからの移行先候補の一つでもある。</li></ul></li></ul></li><li>デメリット（まだ新しい）<ul><li>登場したばかり。採用実績に乏しい。</li><li>標準のUIコンポーネントが圧倒的に少ない。</li><li>OSSのUIコンポーネントも圧倒的に少ない。</li><li>アセンブリのダウンロードに時間がかかる。</li></ul></li></ul><p>メリットについては、要はクイックなプロトタイプ開発、その後の保守の観点で弊社でやり易い点なのですが、デメリットについては、新規フレームワークということで、エコシステム界隈が充実してない点にある印象です。</p><h2 id="開発の始め方"><a href="#開発の始め方" class="headerlink" title="開発の始め方"></a>開発の始め方</h2><p>では、ここからはBlazor WebAssemblyのアプリケーション開発方法を簡単に紹介します。<br>次のコマンドを実行すると、プロジェクトテンプレートに基づき、プロジェクトファイル一式が作成されます。<br>※もちろんコマンドプロンプトからでなくVisual StudioのGUIから作成できます。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt;dotnet new blazorwasm -ho -o future_one_demo</span><br><span class="line">テンプレート &quot;Blazor WebAssembly App&quot; が正常に作成されました。</span><br><span class="line">このテンプレートには、Microsoft 以外のパーティのテクノロジが含まれています。詳しくは、https://aka.ms/aspnetcore/<span class="number">6</span>.<span class="number">0</span>-third-party-notices をご覧ください。</span><br><span class="line"></span><br><span class="line">作成後の操作を処理しています...</span><br><span class="line"><span class="function">D:\<span class="title">xxx</span>\<span class="title">future_one_demo</span>\<span class="title">future_one_demo.sln</span> で &#x27; <span class="title">dotnet</span> <span class="title">restore</span> &#x27; を実行しています...</span></span><br><span class="line"><span class="function">  復元対象のプロジェクトを決定しています...</span></span><br><span class="line"><span class="function">  <span class="title">D</span>:\<span class="title">xxx</span>\<span class="title">future_one_demo</span>\<span class="title">Shared</span>\<span class="title">future_one_demo.Shared.csproj</span> を復元しました (95 <span class="title">ms</span>)。</span></span><br><span class="line"><span class="function">  <span class="title">D</span>:\<span class="title">xxx</span>\<span class="title">future_one_demo</span>\<span class="title">Client</span>\<span class="title">future_one_demo.Client.csproj</span> を復元しました (1.71 <span class="title">sec</span>)。</span></span><br><span class="line"><span class="function">  <span class="title">D</span>:\<span class="title">xxx</span>\<span class="title">future_one_demo</span>\<span class="title">Server</span>\<span class="title">future_one_demo.Server.csproj</span> を復元しました (1.71 <span class="title">sec</span>)。</span></span><br><span class="line"><span class="function">正常に復元されました。</span></span><br></pre></td></tr></table></figure><h2 id="プロジェクト構成"><a href="#プロジェクト構成" class="headerlink" title="プロジェクト構成"></a>プロジェクト構成</h2><p>作成されたプロジェクトを見てみます。<br>以下のように<code>Client/Server/Share</code>と役割が容易に分かるようにプロジェクトが構成されています。<br>フロントエンドとバックエンドで開発部署が分かれているの場合などに好ましい構成ですね。</p><img src="/images/20220412a/プロジェクト構成.png" alt="プロジェクト構成.png" width="302" height="760" loading="lazy"><p><code>Client</code>フォルダはフロントエンドのプロジェクトです。拡張子が<code>.razor</code>のファイルがありますが、これはRazorコンポーネントと呼ばれており、コンポーネントを組み合わせてWebページを作成するイメージとなります。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p><p><code>Server</code>フォルダはバックエンドのプロジェクトです。Blazor WebAssembly専用とかではなく、純粋なASP.NET Core WebAPIアプリケーションです。<br><code>Microsoft.AspNetCore.Mvc.ControllerBase</code>を継承したコントローラクラスを定義します。<br>お馴染みですね。</p><p><code>Shared</code>フォルダは<code>Client</code>と<code>Server</code>で共通するコードを定義するプロジェクトです。<br>デフォルトでは<code>Client</code>と<code>Server</code>の間でHTTPリクエスト／レスポンスでやり取りするデータクラスが定義されています。<br>Vue.jsなどで起こりがちな<code>Client</code>と<code>Server</code>でデータクラスを個々に定義せざるを得ない問題を防げるという点もBlazor WebAssemblyのメリットの一つかもしれません。</p><h2 id="実行してみる"><a href="#実行してみる" class="headerlink" title="実行してみる"></a>実行してみる</h2><p>アプリを起動してみます。左がデスクトップPCの表示。右はモバイル端末の表示です。<br>デフォルトでレスポンシブデザインが採用されている点も良いです。</p><img src="/images/20220412a/アプリ.png" alt="アプリ.png" width="1200" height="749" loading="lazy"><p>アプリを起動した直後、ブラウザのDevToolsで見たネットワークの状態です。<br><code>System.xxx.dll</code>という.NETランタイムのアセンブリ群がダウンロードされていることが分かります。全体のサイズで約4MBでした。（参考：.NET SDK v6.0.201）</p><p>モバイルなど非力な端末の場合、ネックになるかもしれません。</p><img src="/images/20220412a/DevTools.png" alt="DevTools.png" width="954" height="710" loading="lazy"><p>ただし、２回目以降に起動した際はダウンロードは発生しません。ランタイム関係のアセンブリはキャッシュストレージへ保存され、キャッシュしたものが使われているようです。この辺りは工夫がされているのですね。</p><img src="/images/20220412a/DevTools_2.png" alt="DevTools.png" width="872" height="724" loading="lazy"><p>DevToolsのソースを見てます。<br><code>_framework</code>コンテンツ内に複数の<code>.js</code>ファイルがあります。<br>また、<code>wasm</code>内には<code>WebAssembly</code>のテキストコードのようなものがあります。<br>この辺りは深追いしておりませんが、本格的に仕組みを理解したい場合はこの辺りを研究する必要がありそうです。</p><img src="/images/20220412a/DevTools_3.png" alt="DevTools.png" width="956" height="850" loading="lazy"><h2 id="開発ポイント"><a href="#開発ポイント" class="headerlink" title="開発ポイント"></a>開発ポイント</h2><p>ここからはBlazor WebAssmblyの開発で理解しておいた方が良いポイントを挙げてゆきます。<br>なお、RazorコンポーネントはRazor構文という独自の文法でコードを記述しますが、文法の詳細については割愛します。</p><h3 id="ライフサイクルイベント"><a href="#ライフサイクルイベント" class="headerlink" title="ライフサイクルイベント"></a>ライフサイクルイベント</h3><p>Blazorは基本的にイベント駆動型で、イベントハンドラに処理を実装してゆきます。<br>その中で重要なのがRazorコンポーネントのライフサイクルイベントです。</p><ul><li><code>SetParametersAsync</code>：パラメーターが設定されるタイミングに呼び出されます。</li><li><code>OnInitialized&#123;Async&#125;</code>：コンポーネントの初期化時に呼び出されます。</li><li><code>OnParametersSet&#123;Async&#125;</code>：パラメーターが設定された後に呼び出されます。</li><li><code>OnAfterRender&#123;Async&#125;</code>：コンポーネントのレンダリング後に呼び出されます。</li></ul><p>必要に応じてコンポーネントの初期化やパラメタの受け渡し時の処理を実装する必要があります。</p><p>以下の公式ドキュメントが参考になります。<br><a href="https://docs.microsoft.com/ja-jp/aspnet/core/blazor/components/lifecycle?view=aspnetcore-6.0">ASP.NET Core Razor コンポーネントのライフサイクル | Microsoft Docs</a></p><h3 id="画面の状態更新"><a href="#画面の状態更新" class="headerlink" title="画面の状態更新"></a>画面の状態更新</h3><p>Razorコンポーネントには画面のコンポーネントの状態変更を通知するための<code>StateHasChanged</code>メソッドというものがあります。<br>以下のシナリオにおいて<code>StateHasChanged</code>メソッドの呼び出しが必要になる場合があります。</p><ol><li>非同期I/O呼び出し（HTTPリクエストなど）の結果を受け取って画面へ結果を反映する。</li><li>UIスレッド以外のスレッド上から画面の要素を更新する。</li><li>あるシングルトンなインスタンスを複数コンポーネントが参照し状態変更を観察（Subscribe）する。そのシングルトンインスタンスの状態を参照する全画面へ反映する。<ul><li>次のMicrosoft Docsの中で紹介されているコードで<code>StateHasChanged</code>メソッド呼び出しをコメントアウトすると、期待通り動きません。<ul><li><a href="https://docs.microsoft.com/ja-jp/aspnet/core/blazor/state-management?view=aspnetcore-6.0&pivots=webassembly#in-memory-state-container-service-wasm">メモリ内状態コンテナー サービス | Microsoft Docs</a></li></ul></li></ul></li><li>上記以外にもあるかもしれません。</li></ol><p>以下は「2. UIスレッド以外のスレッド上から画面の要素を更新する」の例です。<br>UIスレッド外のタイマから１秒ごとに現在時刻を画面へ反映する処理です。（実際にこのような機能を必要とするかどうかは別ですが。）<br><code>Elapsed</code>イベントハンドラ内で<code>StateHasChanged</code>メソッドを呼び出していますが、この行をコメントアウトすると期待通りに動きません。（現在時刻が変わりません。）</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@page <span class="string">&quot;/timersample&quot;</span></span><br><span class="line">&lt;p&gt;Now Time: [@_nowTime]&lt;/p&gt;</span><br><span class="line">@code &#123;</span><br><span class="line">    <span class="keyword">private</span> Timer _timer = <span class="keyword">new</span> Timer(<span class="number">1000</span>);</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInitialized</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        _timer.Elapsed += (sender, e) =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            _nowTime = DateTime.Now.ToString();</span><br><span class="line">            StateHasChanged(); <span class="comment">//コメントアウトすると動きません。</span></span><br><span class="line">        &#125;;</span><br><span class="line">        _timer.Start();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>アプリケーション開発者が「<code>StateHasChanged</code>メソッドの呼び出しの必要性を判断しなければならない」という点はBlazor WebAssemblyのデメリットの一つかもしれません。<br>私が調べた範囲ではVue.jsはこのような配慮が必要ではないため、イケてないなぁという印象です。</p><h3 id="状態管理について"><a href="#状態管理について" class="headerlink" title="状態管理について"></a>状態管理について</h3><p>SPAにて度々議題にあがる（と私が思っている）「アプリケーションの状態管理」についててす。<br>先述した<a href="https://docs.microsoft.com/ja-jp/aspnet/core/blazor/state-management?view=aspnetcore-6.0&pivots=webassembly#in-memory-state-container-service-wasm">メモリ内状態コンテナー サービス | Microsoft Docs</a>で、Microsoft社の解説があります。</p><p>以下のようなコンテナクラスを定義します。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StateContainer.cs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StateContainer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span>? savedString;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Property</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> =&gt; savedString ?? <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            savedString = <span class="keyword">value</span>;</span><br><span class="line">            NotifyStateChanged();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">event</span> Action? OnChange;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">NotifyStateChanged</span>()</span> =&gt; OnChange?.Invoke();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>状態を観察するコンポーネント側は以下のような感じです。このようなコンポーネントが複数あるイメージです。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Pages/StateContainerExample.razor</span></span><br><span class="line">@page <span class="string">&quot;/state-container-example&quot;</span></span><br><span class="line">@implements IDisposable</span><br><span class="line">@inject StateContainer StateContainer</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;State Container Example component&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;State Container component Property: &lt;b&gt;@StateContainer.Property&lt;/b&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;button @onclick=<span class="string">&quot;ChangePropertyValue&quot;</span>&gt;</span><br><span class="line">        Change the Property <span class="keyword">from</span> the State Container Example component</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;Nested /&gt;</span><br><span class="line"></span><br><span class="line">@code &#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnInitialized</span>()</span></span><br><span class="line">     =&gt;  StateContainer.OnChange += StateHasChanged;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ChangePropertyValue</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        StateContainer.Property = <span class="string">&quot;New value set in the State &quot;</span> +</span><br><span class="line">            <span class="string">$&quot;Container Example component: <span class="subst">&#123;DateTime.Now&#125;</span>&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">     =&gt; StateContainer.OnChange -= StateHasChanged;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般的には「Fluxアーキテクチャ」が提唱されており、Vue.jsではVuex、RactではReduxといったライブラリが有名かと思います。<br>Blazor WebAssemblyでの「Fluxアーキテクチャ」のライブラリも存在するようです。<br><a href="https://github.com/mrpmorris/Fluxor">mrpmorris/Fluxor | Github</a></p><p>今回のプロトタイプアプリではFluxorの採用は見送りました。<br>詳細は省きますがMicrosoft社さんの解説手法にひと工夫をした形で採用することとしました。<br>この辺りについては今後研究の余地がありそうです。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>最後に簡単にまとめます。</p><ul><li>Blazor WebAssmblyではC#を使いWebアプリケーションが開発できる。</li><li>Visual Studioから開発が簡単にできる。</li><li>Razorコンポーネントのライフサイクルイベントや<code>StateHasChanged</code>の仕組みは理解した方が良い。</li><li>一方で<code>WebAssembly</code>の内部的な仕組みを理解せずともWebアプリケーションが開発可能である。</li></ul><p>特に最後の点について、<code>WebAssembly</code>だからといってその仕様や機械語レベルの理解する必要は殆どなく、<br>高級言語から機械語への翻訳はコンパイラに全てお任せ、開発者は馴染みのある高級言語でWebアプリ開発に注力でき、Blazor WebAssemblyはC#を用いてWebアプリケーションを開発できる点が一番のメリットなのかなぁと感じました。<br>Blazor WebAssmblyを今後使用される方の一助になれば幸いです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">BlazorではなくRazorです。紛らわしいですがそういうものらしいです。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Blazor/">Blazor</category>
      
      <category domain="https://future-architect.github.io/tags/WebAssembly/">WebAssembly</category>
      
      <category domain="https://future-architect.github.io/tags/C/">C#</category>
      
      
      <comments>https://future-architect.github.io/articles/20220412a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Google Cloud Professional Cloud Architectの再認定に合格しました</title>
      <link>https://future-architect.github.io/articles/20220411a/</link>
      <guid>https://future-architect.github.io/articles/20220411a/</guid>
      <pubDate>Sun, 10 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは。TIGの伊藤太斉です。&lt;br&gt;今回は、受験から日が空いてしまいましたが、2022/2/4にGoogle CloudのProfessional Cloud</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは。TIGの伊藤太斉です。<br>今回は、受験から日が空いてしまいましたが、2022/2/4にGoogle CloudのProfessional Cloud Architectの再認定に合格したので、前回受験からの差分や受験にあたっての勉強について書いていきます。</p><h2 id="以前の記事"><a href="#以前の記事" class="headerlink" title="以前の記事"></a>以前の記事</h2><p>技術ブログでは以前に合格体験記をいくつか出しているので、そちらも是非みていただければと思います。</p><ul><li><a href="/articles/20210625a/">Associate Cloud Engineer</a></li><li><a href="/articles/20190530/">Professional Cloud Architect</a> <strong>※今回はこちらの再認定記事になります</strong></li><li><a href="/articles/20211013a/">Professional Data Engineer</a></li><li><a href="/articles/20200902/">Professional Network Engineer</a></li></ul><h2 id="試験について"><a href="#試験について" class="headerlink" title="試験について"></a>試験について</h2><p>有効期限が迫ってくると、メールで再認定を受ける旨が送られてきます。メールには受験時に<strong>半額になるクーポンコード</strong>があるので、申し込み時にはしっかり利用しましょう。<br>その上で、試験概要は</p><ul><li>試験時間: 2 時間</li><li>登録料: 200 米ドル　-&gt; <strong>100 米ドル（クーポンコード利用時）</strong></li><li>言語: 英語、日本語</li><li>受験方法: テストセンターもしくは自宅での遠隔監視のオンライン試験</li></ul><h2 id="試験前の勉強"><a href="#試験前の勉強" class="headerlink" title="試験前の勉強"></a>試験前の勉強</h2><p>試験準備自体は2週間前くらいから、大体1日30分くらいで以下の内容をやっていました。</p><h3 id="公式の模擬試験"><a href="#公式の模擬試験" class="headerlink" title="公式の模擬試験"></a>公式の模擬試験</h3><p>何はともあれ、公式の模擬試験（Google Forms形式）を受験し、自分自身の分野の理解度を確認しました。また、2年前に比べて内容も変わっているので、その意味も込めて一度は試した方が良いと感じました。</p><h3 id="新しいサービスの学習"><a href="#新しいサービスの学習" class="headerlink" title="新しいサービスの学習"></a>新しいサービスの学習</h3><p>公式の模擬試験をもとに、新しいサービスへの理解が足りないと感じたので、以下の2つを特に重点的に勉強しました。</p><ul><li>Identity Aware Proxy<ul><li>IAPの設定について</li><li>ゼロトラストな考え方のもと、どのようにサービスを組み合わせるか</li></ul></li><li>VPC Service Controls<ul><li>境界内部のサービスへのアクセスの仕方</li><li>境界面の適切な作り方</li></ul></li></ul><p>これらは私が最初に受験した時(2020/2)時点では試験には取り入れられていなかったのですが、初回受験後にどちらも実際に触ったことがあったので、そこまで大きな負担にはならなかったです。</p><h3 id="書籍"><a href="#書籍" class="headerlink" title="書籍"></a>書籍</h3><p>PCAの受験には誰もが重宝する<a href="https://www.amazon.co.jp/dp/4822257908">Google Cloud Platform エンタープライズ設計ガイド</a>を読み返していました。とはいえ、この書籍も現在の試験範囲を全てカバーは出来ないので、普遍的な部分のみを再確認といった感じで見返す程度でした。</p><h3 id="公式ドキュメント"><a href="#公式ドキュメント" class="headerlink" title="公式ドキュメント"></a>公式ドキュメント</h3><p>なんといっても公式ドキュメントを読むのが一番ですね。<br>前回受験時では、StackDriver xxと呼ばれていた監視系のサービス群がCloud xxと呼び名が変わっていたりすることもあり、特に差分が大きそうだと思っているところをいくつか読みました。</p><h2 id="受験"><a href="#受験" class="headerlink" title="受験"></a>受験</h2><p>受験当日は、家のきちんと試験仕様にする自信がなかったので、自宅からではなくテストセンターで受験しました。<br>当日は問題を解いている途中は落ちる感じは全くしなかったものの、油断も出来ない状態でしたが、無事合格し、再認定となりました。<br><a href="https://googlecloudcertified.credential.net/?name=taisei%20ito">https://googlecloudcertified.credential.net/?name=taisei%20ito</a></p><h2 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h2><p>再認定であっても、試験合格後のノベルティはもらえるみたいで、一部ですが以下の中から選べるようになっていました。(2022/3月現在)<br>$100で受験できて、ノベルティまでもらえるのは、もしかしたらノベルティの方が高いのかもしれません。<br>私は、リュックを選びました。Google Cloudﾁｮｯﾄﾜｶﾙことが背中から知られるようになります。</p><img src="/images/20220411a/スクリーンショット_2022-03-29_18.42.30.png" alt="ノベルティ" width="1200" height="434" loading="lazy"><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回はPCAの再認定についてまとめました。<br>しばらく実務ではGoogle Cloudから離れていたので、それなりの不安はあったものの、定着している部分も大きく、改めて力試しにはなりました。<br>これから再認定の時期がやってくる方も、安く受けることができるので、是非失効させずに受けてみてはいかがでしょうか？</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%90%88%E6%A0%BC%E8%A8%98/">合格記</category>
      
      
      <comments>https://future-architect.github.io/articles/20220411a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>元日に92%引きで叩き売りされていた変形ホームロボットを買ったのでScalaから叩いてみた</title>
      <link>https://future-architect.github.io/articles/20220408a/</link>
      <guid>https://future-architect.github.io/articles/20220408a/</guid>
      <pubDate>Thu, 07 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20220404a/&quot;&gt;電子工作/IoT連載&lt;/a&gt; の5本目です&lt;/p&gt;
&lt;h1 id=&quot;リベンジ&quot;&gt;&lt;a href=&quot;#リベンジ&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20220404a/">電子工作/IoT連載</a> の5本目です</p><h1 id="リベンジ"><a href="#リベンジ" class="headerlink" title="リベンジ"></a>リベンジ</h1><p>2019年に<a href="https://www.google.com/search?q=%E3%83%97%E3%83%AA%E3%83%A1%E3%82%A4%E3%83%89AI">某ロボット</a>が85%引きで叩き売りされましたが、その時はウェーブに乗り遅れてしまい、入手できず悔しい思いをした経験があったのですが、今年の正月、それを超える値引率である<a href="https://store.shopping.yahoo.co.jp/misaonet/cerevo-tipron.html">92%引きで叩き売りされていた変形ホームロボット</a>を購入することができました。今回はウェーブに乗ることができたのでとりあえずそれだけで非常に満足でした。</p><h1 id="今回入手した変形ホームロボットについて"><a href="#今回入手した変形ホームロボットについて" class="headerlink" title="今回入手した変形ホームロボットについて"></a>今回入手した変形ホームロボットについて</h1><p>以前叩き売りされていた某ロボットは25軸でしたが、今回の変形ホームロボットは3軸+2輪となります。<br>ロボットの名前は<a href="https://cerevo.com/">Cerevo社</a>の「Tipron」と言い、<a href="https://info-blog.cerevo.com/2016/01/05/1712/">6年前のCESでもお披露目されていた</a>ロボです。<br>ルンバはお掃除ロボットですが、このTipronはプロジェクターロボットになります。わざわざ、部屋の真ん中にプロジェクターを手で運ばなくても、プロジェクター自身が自分で部屋の真ん中まで自動で移動して映画などを映してくれるというものです。</p><div class="scroll"><table><thead><tr><th>変形前</th><th>変形後</th></tr></thead><tbody><tr><td><img src="/images/20220408a/fold.png" alt="fold" width="998" height="1331" loading="lazy"></td><td><img src="/images/20220408a/extend.png" alt="extend" width="990" height="1320" loading="lazy"></td></tr></tbody></table></div><h1 id="準備"><a href="#準備" class="headerlink" title="準備"></a>準備</h1><p>Scalaを今使うならやっぱりフレッシュな3を使いたいですよね。<br>ただし、現状のsbt(Scalaのビルドツール）はJava18だとエラーが出るので、Java17で実行したいと思います。</p><figure class="highlight bash"><figcaption><span>macOS/Linuxなどでの手順例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;curl -s <span class="string">&quot;https://get.sdkman.io&quot;</span> | bash</span><br><span class="line">&gt;<span class="built_in">source</span> <span class="string">&quot;<span class="variable">$HOME</span>/.sdkman/bin/sdkman-init.sh&quot;</span></span><br><span class="line">&gt;sdk install java 17-open</span><br><span class="line">&gt;sdk install sbt 1.6.2</span><br></pre></td></tr></table></figure><p>次の各ファイル、フォルダを作成します。</p><figure class="highlight scala"><figcaption><span>project/build.properties</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbt.version=<span class="number">1.6</span><span class="number">.2</span></span><br></pre></td></tr></table></figure><figure class="highlight scala"><figcaption><span>project.sbt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scalaVersion := <span class="string">&quot;3.1.1&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight scala"><figcaption><span>tipron.scala</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jp.co.future.example.tipron</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net._</span><br><span class="line"><span class="keyword">import</span> java.nio._</span><br><span class="line"><span class="keyword">import</span> java.nio.channels._</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Tipron</span> <span class="keyword">extends</span> <span class="title">App</span></span>:</span><br><span class="line">  <span class="keyword">val</span> <span class="type">TIPRON_IP</span> = <span class="string">&quot;Tipron本体のIPアドレス&quot;</span></span><br><span class="line">  <span class="keyword">val</span> <span class="type">SENDER_ADDR</span> = <span class="keyword">new</span> <span class="type">InetSocketAddress</span>(<span class="number">9999</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">RECIEVER_ADDR</span> = <span class="keyword">new</span> <span class="type">InetSocketAddress</span>(<span class="type">TIPRON_IP</span>, <span class="number">9999</span>)</span><br><span class="line">  <span class="keyword">val</span> channel = <span class="type">DatagramChannel</span>.open()</span><br><span class="line">  channel.socket().bind(<span class="type">SENDER_ADDR</span>)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sendMsg</span></span>(msg: <span class="type">String</span>) =</span><br><span class="line">    <span class="keyword">val</span> buff = <span class="type">ByteBuffer</span>.allocate(msg.length)</span><br><span class="line">    buff.clear()</span><br><span class="line">    buff.put(msg.getBytes)</span><br><span class="line">    buff.flip()</span><br><span class="line">    <span class="keyword">val</span> result = channel.send(buff, <span class="type">RECIEVER_ADDR</span>)</span><br><span class="line">    result</span><br><span class="line"></span><br><span class="line">  sendMsg(<span class="string">&quot;&quot;&quot;&#123;&quot;clearQueue&quot;:false,&quot;commandId&quot;:1,&quot;commandName&quot;:&quot;turnLeft&quot;,&quot;commandValue&quot;:&quot;-90&quot;&#125;&quot;&quot;&quot;</span>)</span><br><span class="line">  <span class="type">Thread</span>.sleep(<span class="number">5000</span>)</span><br><span class="line">  sendMsg(<span class="string">&quot;&quot;&quot;&#123;&quot;clearQueue&quot;:false,&quot;commandId&quot;:1,&quot;commandName&quot;:&quot;turnLeft&quot;,&quot;commandValue&quot;:&quot;90&quot;&#125;&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="叩いてみる"><a href="#叩いてみる" class="headerlink" title="叩いてみる"></a>叩いてみる</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;sbt run</span><br></pre></td></tr></table></figure><p>実行すると、右旋回を少し行なった後、同じ角度分、左旋回を行なって元の向きに戻ります。<br><img src="/images/20220408a/run.gif" alt="run" width="270" height="480" loading="lazy"></p><h1 id="今後の展望"><a href="#今後の展望" class="headerlink" title="今後の展望"></a>今後の展望</h1><p>Tipronの標準バッテリーだとプロジェクターの連続稼働時間が心許ないので、手元のお小遣いに余裕ができてきたら、追加のバッテリーを買って空いているバッテリー格納スペースに入れたいと思っています。</p><h1 id="参考サイト"><a href="#参考サイト" class="headerlink" title="参考サイト"></a>参考サイト</h1><p>本記事は次のサイトを参考しました。</p><ul><li><a href="https://gist.github.com/yoneken/03561a831344c08eda9a2f37a8d56bcb">GitHub Gist: yoneken/cam_stream.py</a></li><li><a href="https://tech-blog.cerevo.com/archives/8795/">Cerevo TechBlog: 変形するロボットプロジェクターをスクリプトで自由自在に動かす（絶賛決算セール中！）</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/IoT/">IoT</category>
      
      
      <category domain="https://future-architect.github.io/tags/Scala/">Scala</category>
      
      <category domain="https://future-architect.github.io/tags/Tipron/">Tipron</category>
      
      
      <comments>https://future-architect.github.io/articles/20220408a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TinkerBoard 2S：AWS Greengrass v1をインストールする</title>
      <link>https://future-architect.github.io/articles/20220407a/</link>
      <guid>https://future-architect.github.io/articles/20220407a/</guid>
      <pubDate>Wed, 06 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220407a/tinker.png&quot; alt=&quot;tinker.png&quot; width=&quot;945&quot; height=&quot;287&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220407a/tinker.png" alt="tinker.png" width="945" height="287" loading="lazy"><p><a href="/articles/20220404a/">電子工作/IoT連載</a> の4本目です</p><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、TIG所属の宮永です。</p><p>ASUSが販売しているシングルボードコンピュータTinekr Board2SにAWS Greengrassの環境を構築したので記事にまとめました。</p><p>シングルボードコンピュータと聞くと真っ先に思い浮かべるのはRaspberryPiでしょうか。私も初めて触ったシングルボードコンピュータはRaspberryPiでした。</p><p>マザーボードなどで有名なASUSが販売しているシングルボードコンピュータの性能はとても気になります。</p><p>ネット上でもTinker Board2Sの記事はRaspberryPiに比べると非常に少ないため、本記事の構成も前半はTinker Boardの初期セットアップ、後半をAWS Greengrassの環境構築との章立てとしています。</p><p>本記事がTinker Board2S購入検討をしている方の役にたてば幸いです。</p><h2 id="Tinker-Board2Sとは"><a href="#Tinker-Board2Sとは" class="headerlink" title="Tinker Board2Sとは"></a>Tinker Board2Sとは</h2><p>ASUSが販売するArmベースのシングルボードコンピュータです。<br>商品についての公式ページは<a href="https://tinker-board.asus.com/jp/product/tinker-board-2s.html">こちら</a>です。<br>まずは外観から観察します。</p><h3 id="外観"><a href="#外観" class="headerlink" title="外観"></a>外観</h3><p>一際目を惹くのはでっかいヒートシンクですね。😳<br>このヒートシンクは付属品です。</p><img src="/images/20220407a/tinker.JPG" alt="外観" width="1200" height="676" loading="lazy"><p>手前にピンヘッダーが40個確認できます。着色してあるため非常に便利です。<br>RaspberryPiだと上から一つずつ数えていかなければ行けないのでこの仕様はとてもありがたいですね。</p><p>外部インタフェースを見ていきます。<br><img src="/images/20220407a/usb.JPG" alt="外部インターフェース" width="1200" height="676" loading="lazy"></p><p>3.2USB Gen1 Type-Aが3つ、3.2USB Gen1 Type-Cが１つ付属しています。有線LANも接続できるようになっています。</p><img src="/images/20220407a/DSC_0559.JPG" alt="USB周り" width="1200" height="676" loading="lazy">側面です。一番左にあるのは電源端子その隣がHDMI端子です。HDMIの横にMIDI DSI(Mobile Industry Processor Interface Display Serial Interface)も確認できます。こちらの端子はディスプレイモジュールを扱う際に使用します。<img src="/images/20220407a/DSC_0560.JPG" alt="HDMI" width="1200" height="676" loading="lazy"><p>最後に前面(背面？)です。<br>手前に見えている端子はMIPI CSI(Mobile Industry Processor Interfa Camera Serial Interface)です。こちらの端子はカメラモジュールを取り付ける際に使用します。</p><p>その右側には小さいですがLEDが3つついています。<br>左から電源用LEDランプ、ディスクアクティビティLEDランプ、プログラマブルLEDです。<br>外観の観察もほどほどにOSのインストールをします。</p><h3 id="OSインストール"><a href="#OSインストール" class="headerlink" title="OSインストール"></a>OSインストール</h3><p>Tinker Boardは専用のOSが<a href="https://tinker-board.asus.com/jp/download-list.html?product=tinker-board-2s">公式ページ</a>で配布されています。<br>まずはOSをデスクトップPCにダウンロードします。<br>筆者のデスクトップ環境はUbuntu22.04ですのでセットアップもそれに準じたものとなっています。<br>以下Ubuntu22.04がインストールされた母艦PCをデスクトップPCと呼称しています。</p><p>デバイスをUSB経由でPCに接続しデスクトップPCでの正常に認識されているかを確認します。<br><code>lsusb</code>で接続デバイスを確認することができます。</p><p><strong>Tinker Board接続前</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">❯❯❯ lsusb</span><br><span class="line">Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class="line">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 001 Device 031: ID 08bb:27c4 Texas Instruments PCM2704C stereo audio DAC</span><br><span class="line">Bus 001 Device 005: ID 05e3:0608 Genesys Logic, Inc. Hub</span><br><span class="line">Bus 001 Device 003: ID 0b05:1939 ASUSTek Computer, Inc. AURA LED Controller</span><br><span class="line">Bus 001 Device 043: ID 0d8c:016c C-Media Electronics, Inc.</span><br><span class="line">Bus 001 Device 042: ID 2be8:0001  USB 2.0 Hub [Safe]</span><br><span class="line">Bus 001 Device 041: ID 046d:c52b Logitech, Inc. Unifying Receiver</span><br><span class="line">Bus 001 Device 040: ID 1a40:0101 Terminus Technology Inc. Hub</span><br><span class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br></pre></td></tr></table></figure><p><strong>Tinker Board接続後</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">❯❯❯ lsusb</span><br><span class="line">Bus 004 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 003 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br><span class="line">Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub</span><br><span class="line">Bus 001 Device 031: ID 08bb:27c4 Texas Instruments PCM2704C stereo audio DAC</span><br><span class="line">Bus 001 Device 005: ID 05e3:0608 Genesys Logic, Inc. Hub</span><br><span class="line">Bus 001 Device 003: ID 0b05:1939 ASUSTek Computer, Inc. AURA LED Controller</span><br><span class="line"><span class="addition">+Bus 001 Device 047: ID 0b05:7820 ASUSTek Computer, Inc. USB download gadget</span></span><br><span class="line">Bus 001 Device 043: ID 0d8c:016c C-Media Electronics, Inc. USB download gadget</span><br><span class="line">Bus 001 Device 042: ID 2be8:0001  USB 2.0 Hub [Safe]</span><br><span class="line">Bus 001 Device 041: ID 046d:c52b Logitech, Inc. Unifying Receiver</span><br><span class="line">Bus 001 Device 040: ID 1a40:0101 Terminus Technology Inc. Hub</span><br><span class="line">Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub</span><br></pre></td></tr></table></figure><p>デバイスが1つ増えていますね。</p><p>書き込みは<a href="https://www.balena.io/etcher/">Ethcer</a>を使用します。<br>デバイスを認識した状態でOSイメージをTinkerOSで選択します<br>私の場合はこのタイミングで書き込み先も自動的にTinkerBoardが登録されました。</p><img src="/images/20220407a/image.png" alt="Ethcer" width="890" height="579" loading="lazy"><p>書き込まれるのを待つだけです。</p><img src="/images/20220407a/image_2.png" alt="Ethcer書き込み中" width="801" height="503" loading="lazy"><p>イメージの書き込みが完了したら再度電源を入れます。<br>起動するとリブートが始まり、以下の画面が立ち上がります。<br><img src="/images/20220407a/Screenshot_from_2022-02-04_22-29-32.png" alt="起動画面" width="1200" height="676" loading="lazy"></p><p>有線LANを接続した状態で引き続きセットアップを行います。</p><p>SSH接続します。<br>ログイン名linaroとなっているので</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh linaro@&lt;IPaddress&gt;</span><br></pre></td></tr></table></figure><p>で接続ができます。Passwordを要求されるのでlinaroと入力すると接続ができます。<br>AWS Greengrassの環境構築はssh接続できれば問題ありませんので、Tinker Boardの初期セットアップは以上で完了とします。</p><h2 id="AWS-Greengrassのインストール"><a href="#AWS-Greengrassのインストール" class="headerlink" title="AWS Greengrassのインストール"></a>AWS Greengrassのインストール</h2><p>AWS Greengrassは2022年4月現在v1とv2の２つあります。<br>今回はCPU　ARM64 【AArch64】環境でdockerを使用したかったためv1の環境構築を行います。<br>v2では　ARM64 【AArch64】のdocker環境はサポートされていないようです。</p><p>なお、以下の環境構築ではTinker Board上にdocker及び、docker-composeがインストールされていることを想定しています。</p><p>環境構築は以下の公式の開発者ガイドに沿って行います。<br><a href="https://docs.aws.amazon.com/ja_jp/greengrass/v1/developerguide/what-is-gg.html">https://docs.aws.amazon.com/ja_jp/greengrass/v1/developerguide/what-is-gg.html</a></p><h3 id="Greengrassのグループ作成"><a href="#Greengrassのグループ作成" class="headerlink" title="Greengrassのグループ作成"></a>Greengrassのグループ作成</h3><p>まずはAWS Greengrassのグループを作成します。<br>デフォルトの設定でグループを作成します。<br>AWS IoTコンソール画面左のタブから「クラシック＞グループ」を選択します.<br>画面遷移後「グループを作成」を選択すると下図のようになるので「デフォルト作成を使用」を選択します。</p><img src="/images/20220407a/image_3.png" alt="Greengrassのグループ作成" width="241" height="107" loading="lazy"><img src="/images/20220407a/image_4.png" alt="Greengrassのグループ作成のグループ名" width="879" height="620" loading="lazy">適当にグループ名をつけて「次へ」を選択します。<img src="/images/20220407a/image_5.png" alt="Greengrassのグループ作成のグループ名" width="878" height="481" loading="lazy">こちらも同様にして「次へ」を選択します。<img src="/images/20220407a/image_6.png" alt="次へ" width="867" height="477" loading="lazy"><p>グループの作成が完了すると証明書が発行されます。<br>この証明書は後ほど使用するためデスクトップPCにダウンロードしておきます。</p><img src="/images/20220407a/image_7.png" alt="証明書の発行" width="910" height="859" loading="lazy"><p>次に先程発行した証明書を使用してGreengrassコンテナを起動します。<br>必要なDockerfileなどは<a href="https://docs.aws.amazon.com/ja_jp/greengrass/v1/developerguide/what-is-gg.html?icmpid=docs_gg_mktg#gg-docker-download">こちら</a>からダウンロードすることができます。</p><p>私はバージョン1.10を使用しました。<br><img src="/images/20220407a/image_8.png" alt="バージョン1.10" width="1197" height="181" loading="lazy"></p><p>ダウンロードした圧縮ファイルはデスクトップPCからTinker Boardに転送します。<br>以下のコマンドTinker Boardのhomeに転送することができます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r aws-greengrass-docker-1.11.0.tar.gz linaro@&lt;IPaddress&gt;:~/</span><br></pre></td></tr></table></figure><p>先程ダウンロードした証明書も転送してしまいましょう。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r xxxxxx-setup.tar.gz linaro@&lt;IPaddress&gt;:~/</span><br></pre></td></tr></table></figure><p>それではsshでTinker Boardに接続してコンテナを起動します。</p><p>sshで接続します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh linaro@&lt;IPaddress&gt;</span><br></pre></td></tr></table></figure><p>ディレクトリ構成ですが私はhome直下にgreengrassというディレクトリを作成し、そこに先程の2つのファイルを格納しました。<br>下記のような構成です。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">linaro@linaro-alip:~/greengrass$ tree</span><br><span class="line">.</span><br><span class="line">├── xxxxxxx-setup.tar.gz</span><br><span class="line">└── aws-greengrass-docker-1.11.0.tar.gz</span><br></pre></td></tr></table></figure><p>まずはaws-greengrass-docker-1.11.0.tar.gzを同一ディレクトリに解凍します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf aws-greengrass-docker-1.11.0.tar.gz</span><br></pre></td></tr></table></figure><p>次に証明書の圧縮ファイルを解凍したフォルダの中に解凍します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf xxxxxxx-setup.tar.gz -C aws-greengrass-docker-1.11.0/</span><br></pre></td></tr></table></figure><p>この状態でディレクトリ構成は以下のようになります。<br>certsとconfigは証明書の圧縮ファイルを解凍して生成されたものです。<br>本記事で解説している方法は解凍ファイル中のREADME.mdに全て記載されています。<br>RaspberryPiを使用される方はarmv7l についての環境構築方法も記載されているため、ぜひご覧になってください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">linaro@linaro-alip:~/greengrass/aws-greengrass-docker-1.11.0$ <span class="built_in">ls</span></span><br><span class="line">Dockerfile                          config</span><br><span class="line">Dockerfile.alpine-aarch64           deployment</span><br><span class="line">Dockerfile.alpine-aarch64.template  docker-compose.alpine-aarch64.yml</span><br><span class="line">Dockerfile.alpine-armv7l            docker-compose.alpine-armv7l.yml</span><br><span class="line">Dockerfile.alpine-armv7l.template   docker-compose.alpine-x86-64.yml</span><br><span class="line">Dockerfile.alpine-x86_64            docker-compose.yml</span><br><span class="line">Dockerfile.alpine-x86_64.template   greengrass-entrypoint.sh</span><br><span class="line">README.md                           greengrass-license-v1.pdf</span><br><span class="line">certs</span><br></pre></td></tr></table></figure><h3 id="コンテナの起動"><a href="#コンテナの起動" class="headerlink" title="コンテナの起動"></a>コンテナの起動</h3><p>開発ガイドにはLinuxをコアデバイスとするときに以下のコマンドを入力するように記載されていますので、それに従います。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/fs/protected_hardlinks</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/fs/protected_symlinks</span><br></pre></td></tr></table></figure><p>また、<code>/etc/sysctl.conf</code>に以下の記載をした後に<code>sudo sysctl -p</code>を端末に入力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure><p>それでは用意されているdocekr-composeからイメージをビルドします。<br>docker-compose.ymlはCPUアーキテクチャ毎に用意されているので使用するプラットフォームに合わせてファイルを指定します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose -f docker-compose.alpine-aarch64.yml build</span><br></pre></td></tr></table></figure><p>ビルドが終了したら、コンテナを起動します。<br>コンテナの起動の前にルート証明書が必要なのでcertsディレクトに移動して以下のコマンドを入力します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O root.ca.pem https://www.amazontrust.com/repository/AmazonRootCA1.pem</span><br></pre></td></tr></table></figure><p>certs配下にroot.ca.pemがダウンロードされていることを確認してください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">linaro@linaro-alip:~/greengrass/aws-greengrass-docker-1.11.0/certs$ tree</span><br><span class="line">.</span><br><span class="line">├── xxxxxxxxxx.cert.pem</span><br><span class="line">├── xxxxxxxxxx.private.key</span><br><span class="line">├── xxxxxxxxxx.public.key</span><br><span class="line">└── root.ca.pem</span><br></pre></td></tr></table></figure><p>ここまでできたらコンテナを起動します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker-compose -f docker-compose.alpine-aarch64.yml up</span><br></pre></td></tr></table></figure><p>起動しました🎉</p><img src="/images/20220407a/image_9.png" alt="起動画面" width="1167" height="167" loading="lazy"><h3 id="Lambda関数の準備"><a href="#Lambda関数の準備" class="headerlink" title="Lambda関数の準備"></a>Lambda関数の準備</h3><p>次にマネジメントコンソールからLambda関数をコンテナに向けてデプロイします。</p><p>Lambda関数を作成するのに必要なGreengrassのPython SDKは<a href="https://github.com/aws/aws-greengrass-core-sdk-python/">ここから</a>ダウンロードすることができます。</p><p><a href="https://docs.aws.amazon.com/ja_jp/greengrass/v1/developerguide/create-lambda.html">開発者ガイド</a>に記載の通り<br>Helloフォルダにgreengrasssdkをコピーしてzipファイルに圧縮します。<br><a href="https://github.com/aws/aws-greengrass-core-sdk-python/">ここから</a>ダウンロードしたファイルのexamplesにHelloフォルダがあるので以下の構成で<br>圧縮ファイルを作成します。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">~/Downloads/aws-greengrass-core-sdk-python-master/examples/HelloWorld</span><br><span class="line">❯❯❯ tree</span><br><span class="line">.</span><br><span class="line">├── greengrasssdk</span><br><span class="line">│   ├── IoTDataPlane.py</span><br><span class="line">│   ├── Lambda.py</span><br><span class="line">│   ├── SecretsManager.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── client.py</span><br><span class="line">│   ├── stream_manager</span><br><span class="line">│   │   ├── __init__.py</span><br><span class="line">│   │   ├── data</span><br><span class="line">│   │   │   └── __init__.py</span><br><span class="line">│   │   ├── exceptions.py</span><br><span class="line">│   │   ├── streammanagerclient.py</span><br><span class="line">│   │   ├── util.py</span><br><span class="line">│   │   └── utilinternal.py</span><br><span class="line">│   └── utils</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       └── testing.py</span><br><span class="line">└── greengrassHelloWorld.py</span><br></pre></td></tr></table></figure><p>圧縮コマンドは以下の通りです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r hello_world_python_lambda.zip greengrasssdk greengrassHelloWorld.py</span><br></pre></td></tr></table></figure><p>それでは、AWSクラウド上にLambdda関数をデプロイします。<br>マネジメントコンソールで適当な名前をつけてLambda関数を作成します。</p><img src="/images/20220407a/image_10.png" alt="Lambdaデプロイ" width="1200" height="450" loading="lazy"><p>先程のzipファイルを直接アップロードしてハンドラの名前を編集します。</p><img src="/images/20220407a/image_11.png" alt="Lambdaのハンドラ設定" width="774" height="639" loading="lazy"><p>開発者ガイドに沿ってバージョンとエイリアスも設定します。</p><img src="/images/20220407a/image_12.png" alt="Lambdaのエイリアス" width="813" height="369" loading="lazy"><p>クラウド上へのLambda関数のデプロイが完了したらコンテナに向けてコードの更新を行います。<br>Greengrassのグループから「Lambdaの追加」を選択します。</p><img src="/images/20220407a/image_13.png" alt="Lambda追加" width="930" height="806" loading="lazy"><p>すでにLambda関数はデプロイしていますので「既存のLambdaの使用」を選択します。</p><img src="/images/20220407a/image_14.png" alt="既存のLambdaの使用ボタン" width="906" height="456" loading="lazy"><p>関数を追加したらLambdaの設定画面に移動して<br>「タイムアウト」とLambdaの「ライフサイクル」を下記のように設定します。<br>他の設定はデフォルトのままで「更新」を選択します。</p><img src="/images/20220407a/image_15.png" alt="Lambdaの実行時の設定画面" width="923" height="741" loading="lazy"><p>グループの設定画面に戻り「最初のサブスクリプションの追加」を選択します。</p><img src="/images/20220407a/image_16.png" alt="Greengrassの最初のサブスクリプションの追加" width="920" height="605" loading="lazy"><p>「サブスクリプションの作成」画面ではメッセージの送信元(ソース)と受信先（ターゲット）を選択します。<br>AWS IoTではMQTTをPub/Subすることができます。<br>以前RaspberryPiとAWS IoT CoreでPub/Subした記事をいかにまとめていますのでよろしければご覧になってください。</p><p><a href="https://future-architect.github.io/articles/20210929a/">GoでMQTT!!　～温湿度マイスターbotの作成～(前編)</a><br><a href="https://future-architect.github.io/articles/20210930a/">GoでMQTT!!　～温湿度マイスターbotの作成～(後編)</a></p><p>トピックのフィルターに「hello/world」と入力して「次へ」を選択します。</p><img src="/images/20220407a/image_17.png" alt="image.png" width="936" height="567" loading="lazy"><p>それではコアデバイスにLambda関数をデプロイします。<br>作成したHelloWorldグループ画面で「アクション＞デプロイ」を選択します。<br>デプロイする前にコアデバイスでGreengrassが起動していることを再度確認しましょう。</p><img src="/images/20220407a/image_18.png" alt="トピックのフィルタリング" width="931" height="476" loading="lazy"><p>「自動検出」を選択するとデプロイが開始します。</p><img src="/images/20220407a/image_19.png" alt="自動検出" width="924" height="476" loading="lazy"><p>デプロイが正常に終了するとステータスが緑色になります。</p><img src="/images/20220407a/image_20.png" alt="ステータス" width="904" height="480" loading="lazy"><h2 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h2><p>AWS IoTのマネジメントコンソールの「テスト＞MQTTテストクライアント」からトピックをサブスクライブします。</p><img src="/images/20220407a/image_21.png" alt="動作確認" width="244" height="103" loading="lazy"><p>トピックのフィルターはhello/worldとして、各種設定を以下のようにします。</p><img src="/images/20220407a/image_22.png" alt="トピックの設定" width="899" height="548" loading="lazy"><p>サブスクライブを選択すると、MQTTの受信が始まります。</p><p>コアデバイスが正常に動作していると下図のようにコアデバイスから設定したメッセージが届きます🎉</p><img src="/images/20220407a/image_23.png" alt="MQTT受信" width="1200" height="556" loading="lazy"><p>コアデバイスのLambda関数はクラウド上から関数を更新、グループの設定から再デプロイを行うことでいつでも更新することができます。とても便利ですね。</p><p>今回はTinker BoardにGreengrassの環境を構築して終わりましたが、次回はエッジデバイスでの加工処理なども行いたいと思います。<br>最後までお付き合いいただきありがとうございました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/IoT/">IoT</category>
      
      
      <category domain="https://future-architect.github.io/tags/TinkerBoard2S/">TinkerBoard2S</category>
      
      <category domain="https://future-architect.github.io/tags/AWSGreengrass/">AWSGreengrass</category>
      
      
      <comments>https://future-architect.github.io/articles/20220407a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>プロトタイピングの勧め</title>
      <link>https://future-architect.github.io/articles/20220406a/</link>
      <guid>https://future-architect.github.io/articles/20220406a/</guid>
      <pubDate>Tue, 05 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20220404a/&quot;&gt;電子工作/IoT連載&lt;/a&gt; の3本目です。&lt;/p&gt;
&lt;h1 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初めに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20220404a/">電子工作/IoT連載</a> の3本目です。</p><h1 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h1><p>こんにちわ。フューチャーの井上です。<br>過去にこんな記事を書いています。</p><ul><li><a href="/articles/20200909/">自作キーボードを組み立てた話</a></li><li><a href="/articles/20211101a/">キーボードを、基盤から自作してみた</a></li></ul><p>今回は、M5Stackというマイコンモジュールを使って、「バイクの各種情報を簡単に表示できたらいいな」という”思い付きを形にしていく過程”を記事にしようと思います。</p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>結果として、車両データロガーのようなものを作りました。</p><img src="/images/20220406a/image.png" alt="車両データを表示したM5Stack" width="600" height="322" loading="lazy"><p>車でレースをする人のにはなじみ深い、いわゆるデータロガーで取るようなデータの一部を表示します。モックアップとしてM5Stackで実装し、実際に実装する際に考慮すべき点などをこれで確認しました。</p><p>以下のような流れで制作しています。これは、仕事で何かを作る際にやることと一緒だと思います。</p><h2 id="やりたいことを決める"><a href="#やりたいことを決める" class="headerlink" title="やりたいことを決める"></a>やりたいことを決める</h2><p>現在、私はバイクを3台所有しています（HONDA GROM/HONDA V-Twin Magna/HONDA CB150R）。以前私は車でレースをしていたのですが、バイクは市販のままだと車両データがほとんど見れないのです。ある程度同じような情報が見たいな、と思っていました。</p><p>四輪のレース時は、以下のような情報を取っていました。</p><ul><li>加速度（旋回/加速の強度を見れる）</li><li>傾き（地形の影響を見れる、操作の滑らかさを確認できる）</li><li>エンジン状態（回転数、燃料消費量、スロットル開度、etc…）</li></ul><p>四輪の車においてはOBD2という自動車診断規格があり、そこから車内ネットワークであるCAN Busにアクセスして情報を取得することができます。</p><blockquote><p>CAN（Controller Area Network）とは、（ざっくりと説明すると）車載機器に使われるネットワークのことです。CANプロトコルを使い、車載機器間の通信を行います。例えばエンジンからは回転数情報を取得することができ、メーターがこの値を表示することで例えば「運転席のメーターにエンジン回転数が表示される」ようになります。逆に言うと、偽のデータを送り付けることで車両に異常を起こすことが可能です（セキュリティの領域）。</p></blockquote><blockquote><p>OBD2は、自動車診断企画です。上記CANはOBD2で使用されるプロトコルの一つで、故障診断用端末を接続しデータを吸い出すことを主な目的としています。日本では、四輪車量は2008年以降の新車に義務付け、二輪車両は2020年12月以降の新車に義務付けがされました。最近車両を買った方がいれば、ダッシュボードや運転席前部にコネクタが隠されているはずです。尚、適当に触ってしまうと機器故障と判断され、ディーラー持ち込み修理になる可能性があるのでお勧めはしません。</p></blockquote><p>私が最近買ったバイク（GROM）にはOBD2が装備されているらしいことを知ったので、そこから情報を取得して、記事にしようと思います。<br>四輪でのOBD2経由でデータ取得/書き換えの記事は世の中にあふれていますが、二輪のものはあまりありません。何ができるのか、辺りを調べることは良いアウトプットになりそうです。</p><p>以下をゴールにしようと思います。</p><ul><li>バイクに設置する、データロガーを作ろう<ul><li>以下の機能を実装する<ul><li>傾斜を表示する（ロール/ピッチ）</li><li>加速度を表示する（X/Y軸の加速度）</li><li>エンジン状態を表示する（OBD2経由で取得・四輪なら取得できる）<ul><li>燃料消費量<ul><li>100kmでの燃料消費量（L/100km）</li><li>1時間での消費量（L/h）</li><li>燃料圧力（kPa）</li></ul></li><li>車速（km/h）</li><li>ブースト圧（bar）</li><li>回転数（rpm）</li></ul></li></ul></li></ul></li></ul><h2 id="最初の躓き"><a href="#最初の躓き" class="headerlink" title="最初の躓き"></a>最初の躓き</h2><p>データが取得できることをまずは確かめたいので、このようなプロジェクトで使いやすいM5Stackというマイコンモジュールを使います。</p><blockquote><p>M5Stackとは、WiFiやBlutoothの機能を備えたCPUに、液晶ディスプレイやボタンや入出力ピンなどを一通り搭載した、小型のマイコンモジュールです。”Stack”と名前がついているように、専用モジュールを積み重ねて機能拡張ができます。</p></blockquote><p><a href="https://m5stack.com/">https://m5stack.com/</a></p><p>M5Stackを使ってバイクのCAN-Bus情報を見ようと思ったのですが、なんと、<br>M5Stack用の <strong>CAN Busユニットが売り切れ</strong> でした。</p><p>本企画の根幹を揺る問題ですが、この記事は書かないといけません。<br>故に、OBD2を使わずに車両状況を見るものを作ってみます。</p><p>M5Stackを使うと以下の情報が単体で取得できます。また、追加のセンサーがUnitとして販売されているので、今回はGPS Unitを使ってみようと思います。</p><ul><li>M5Stack本体<ul><li>M5StickC Plus</li><li>内蔵センサ<ul><li>6軸IMU<ul><li>加速度（X/Y/Z軸）</li><li>傾斜角度（ピッチ/ロール）</li></ul></li></ul></li><li>表示機能<ul><li>液晶（135 x 240）</li><li>LED x1</li></ul></li></ul></li><li>追加のUnit<ul><li>GPS Unit<ul><li>経度緯度</li><li>速度、コース</li><li>時刻</li></ul></li></ul></li></ul><img src="/images/20220406a/image_2.png" alt="M5Stack" width="600" height="382" loading="lazy"><p>当初の実装目標を変更し、以下を実現できるものにしようと思います。</p><ul><li>取得する/表示するもの<ul><li>加速度(X/Y軸)<ul><li>急な加減速は安全運転ではない、レース時は同じ場所で同じような加減速をすることでタイムが安定する）</li></ul></li><li>傾斜角度（ピッチ/ロール）<ul><li>ロール不足は車両の能力を生かし切れていない、ピッチが大きい場合はサスペンションセッティングの変更が必要</li><li>山道などでどの程度の坂なのか、が判別できる（燃費に影響）</li></ul></li><li>現在時刻<ul><li>時刻は見えた方が良いよね（バイクのメーターにも表示されているけど）</li></ul></li><li>車速<ul><li>今は使わないけど、サーキットでは位置情報などと合わせて安定した周回ができているかの判断になる</li></ul></li><li>GPS情報<ul><li>補足している衛星数とGPS受信ステータスは見えたほうが良い</li></ul></li></ul></li><li>取らないもの<ul><li>加速度（Z軸）<ul><li>Z軸（上下動）はジャンプでもしない限り不要なので実装しない</li></ul></li><li>緯度経度情報<ul><li>M5Stackの制約を考えると、プロトタイプなので、まだ要らない<ul><li>利用するM5StickC PlusにはSDカードなどの記録媒体が無いので、ローカル記録ができない</li><li>画面表示領域が狭い、経度緯度を見ても人間には分かりづらい（要PCでのデータ加工）</li></ul></li></ul></li></ul></li></ul><img src="/images/20220406a/image_3.png" alt="加速度、ピッチのイメージ" width="801" height="429" loading="lazy"><h2 id="どのように「見せるか」を決める"><a href="#どのように「見せるか」を決める" class="headerlink" title="どのように「見せるか」を決める"></a>どのように「見せるか」を決める</h2><p>M5StackC Plusの液晶（125 x 240）は小さいので、表示方法を考えないといけません。</p><div class="scroll"><table><thead><tr><th align="left">項目</th><th align="left">数値必須</th><th align="left">見やすくする必要性</th></tr></thead><tbody><tr><td align="left">加速度</td><td align="left">None</td><td align="left">数値自体より、推移を見たい</td></tr><tr><td align="left">傾斜度</td><td align="left">None</td><td align="left">数値自体より、推移を見たい</td></tr><tr><td align="left">現在時刻</td><td align="left">Yes</td><td align="left">なくてもいいけど…</td></tr><tr><td align="left">車速</td><td align="left">Yes</td><td align="left">汎用的に言えば、数字出しておけばいいのでは</td></tr><tr><td align="left">GPS:補足衛星数</td><td align="left">Yes</td><td align="left">デバッグ的に見れれば良さそう</td></tr><tr><td align="left">GPS:ステータス</td><td align="left">None</td><td align="left">デバッグ的に見れれば良さそう</td></tr></tbody></table></div><p>グラフと数値の組み合わせで表現をすれば良さそうなので、一旦イメージを書き出してみます。</p><img src="/images/20220406a/image_4.png" alt="M5Stackに表示するレイアウトイメージ" width="801" height="536" loading="lazy"><p>運転しながら見えるサイズなのかは少し疑問ですが、とりあえずは実装してみましょう。</p><h2 id="実装する"><a href="#実装する" class="headerlink" title="実装する"></a>実装する</h2><p>M5Stackは、UIFlow/microPythonかArudino IDEで開発する必要があります。<br>今回はプログラミング知識が少なくてもできるように、UIFlowを使います。UIFlowは各ブロックを組み合わせてプログラミングすることができるツールです。ブラウザでのオンライン利用も可能なので、実機が無くても一部試してみることは可能です。</p><p><a href="https://flow.m5stack.com/">https://flow.m5stack.com/</a></p><img src="/images/20220406a/image_5.png" alt="UIFlow" width="600" height="259" loading="lazy"><p>まずは、画面を設計します。</p><ul><li>左側のハードウェア風の画像で、テキストボックス（Label）や線などを配置していきます。<ul><li>バーグラフは、線を位置を指定して再描画することで表現します。</li><li>水平儀の位置は、赤い色の円のオブジェクトを再描画して表現します。</li></ul></li></ul><p>次に、データを取得できるようにし、表示位置のラベルに記載するようにします。</p><ul><li>定期的に更新されるように Timer オブジェクトを利用します。</li><li>電源を切りやすいように、AボタンにPowerOffを割り当てます。</li></ul><p>できたものが以下のです。<br>ブロック構成で、日本語でアクションが書かれているので、プログラミングの知識が無くても理解できそう/作れそう ですね。</p><img src="/images/20220406a/image_6.png" alt="ブロック構成" width="1200" height="762" loading="lazy"><p>UIFlowで作ったものを、microPythonに変換することもできます。<br>但し、UIFlowとmicroPythonは交互に行き来はできない為、microPythonで修正を行うとUIFlowに反映することはできず、以降はmicroPythonで構築することになります。<br><img src="/images/20220406a/image_7.png" alt="microPython" width="1200" height="762" loading="lazy"></p><h2 id="試用する"><a href="#試用する" class="headerlink" title="試用する"></a>試用する</h2><p>センサやプログラムの設計はできたので、さっそく実車で使用してみます。</p><p>まずはバイク（V-TwinMagna）のETCカードホルダに乗せてみましたが、ちょっと水平が取れてないので修正が必要ですね。<br>あと、絶望的に見辛いです。表示面を運転者側に傾けても、結構距離があるので文字が小さいので見えません。<br><img src="/images/20220406a/image_8.png" alt="バイクに取り付けたM5Stack" width="500" height="667" loading="lazy"></p><p>次に別のバイク（GROM）に乗せてみます。ETCアンテナベースをミラーステーに付け、そこに養生用のテープで巻きつけます。<br>これもやっぱり、見辛いですね。高さの関係で見えはするのですが、文字サイズ的に読み取るのは難しいですね。<br>（画像を拡大すると、表示されている部分が見えます。）<br><img src="/images/20220406a/image_9.png" alt="別のバイクに取り付けたM5Stack" width="600" height="800" loading="lazy"></p><p>視認性が悪いですね。ですが、動作は問題なく行われました（運転中に撮影はできないので画像はありません）。</p><h2 id="改善案"><a href="#改善案" class="headerlink" title="改善案"></a>改善案</h2><p>実際に屋外で使ってみたことで、（分かってはいたけど）以下の問題が明確に判明しました</p><ul><li>視認性の問題<ul><li>設置角度が運転者方向に向いていないので、のぞき込む必要がある。<ul><li>表示器を分離する必要がある。</li><li>M5Stack自体を傾ける場合、内蔵センサの補正が必要で、制度が下がる。外付けの加速度センサで水平を出す必要がある。</li></ul></li><li>輝度が足りず、日照下では見えない。<ul><li>7Segment LEDなどを使うか、屋外用のディスプレイを使う必要がある = 表示器とセンサは分離する。</li><li>電子ペーパーなら視認性は良いが、紫外線耐久性や表示更新頻度で不安がある。</li></ul></li></ul></li><li>データ誤差があると推定される<ul><li>センサーを水平に保てていない場合、加速度等低く見積もられる = センサー設置時の水平確認</li></ul></li><li>データが記録できない<ul><li>MicroSD等が使えるものを使う</li></ul></li><li>エンジン情報が取れない<ul><li>CAN Busへのアクセスが必要 = 部品を買おう（売り切れ）</li></ul></li></ul><p>以上から、今後は以下のように更新していく予定です。</p><ul><li>表示機能を別に用意する<ul><li>LEDテープや7Segment LEDの方が見やすいものもある</li></ul></li><li>センサーは内臓ではなく、別部品で用意する<ul><li>設置自由度も上がる</li></ul></li><li>記録媒体が使えるデバイスに置き換える<ul><li>M5StickC Plusではなく、M5Stack（Basic等）などのMicroSDが使える筐体を利用する</li><li>Raspberry Piに乗り換える</li></ul></li><li>CAN Busに接続する<ul><li>バイクの診断ポートをOBD2変換し、OBD2経由でアクセスする</li><li><strong>部品を買う</strong></li></ul></li></ul><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>こんな感じでプロトタイプ作って改善していくのは楽しいですね。<br>思い付きを形にすることが最近は簡単にできるので、やってみましょう！</p><ul><li>M5Stackは簡単にプログラムできるし、いろいろなセンサ（UNIT）がそろっているので、思い付きを形にしやすいですね！</li></ul><p>弊社ではデバイスの開発をするプロジェクトもあり、おそらくこのように「やりたい事」「プロトタイプ」「改善」を回して開発をしていると思われます（私はそのようなプロジェクトにまだ参加していませんのですが…）。<br>ここまで読んだ方なら興味があると思いますので、ぜひ採用担当者等にご相談ください。関連する方を紹介してもらえるかもしれません。</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><ul><li>M5Stack<ul><li><a href="https://m5stack.com/">https://m5stack.com/</a><ul><li>用途に合わせて色々なシリーズがあります。</li><li>基本的にGPIOと表示系とボタンがあり、単体で活用しやすいモジュール構成になっています。</li><li>プログラミングは、UIFlow/MicroPythonかArudinoのものを利用します。</li></ul></li><li>同様なものに micro:bit - <a href="https://microbit.org/ja/">https://microbit.org/ja/</a> があります。</li></ul></li><li>UIFlow<ul><li><a href="https://m5stack.com/uiflow">https://m5stack.com/uiflow</a><ul><li><code>Get Started FREE</code>　<a href="https://flow.m5stack.com/">ボタン</a>から試すことができます。<code>APIキー</code> は指定せず、<code>Device:</code> は適当なものを指定すれば使えます。</li></ul></li></ul></li><li>CAN Bus<ul><li>O’REILLYの「カーハッカーズ・ハンドブック –車載システムの仕組み・分析・セキュリティ–」辺りが参考になります。<ul><li><a href="https://www.oreilly.co.jp/books/9784873118239/">https://www.oreilly.co.jp/books/9784873118239/</a></li></ul></li></ul></li><li>売っている店<ul><li><a href="https://www.marutsu.co.jp/">マルツオンライン</a> や <a href="https://www.switch-science.com/">スイッチサイエンス</a> 辺りで通販することが多いですね。</li><li><a href="https://www.marutsu.co.jp/pc/static/shop/akihabara">マルツ秋葉原本店</a> で実物を見ながら検討するのもよいでしょう</li></ul></li><li>ホンダ<ul><li><a href="https://www.honda.co.jp/GROM/">GROM</a></li><li><a href="https://www.honda.co.jp/news/1994/2940603.html">V-TwinMagna</a></li><li><a href="https://www.thaihonda.co.th/honda/motorcycle/neo-sport-cafe/new-cb150r-2021">CB150R</a></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/IoT/">IoT</category>
      
      <category domain="https://future-architect.github.io/tags/%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C/">電子工作</category>
      
      <category domain="https://future-architect.github.io/tags/M5Stick/">M5Stick</category>
      
      <category domain="https://future-architect.github.io/tags/CAN/">CAN</category>
      
      <category domain="https://future-architect.github.io/tags/UIFlow/">UIFlow</category>
      
      <category domain="https://future-architect.github.io/tags/microPython/">microPython</category>
      
      <category domain="https://future-architect.github.io/tags/OBD2/">OBD2</category>
      
      
      <comments>https://future-architect.github.io/articles/20220406a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>雀を見守るカメラを作ってみた</title>
      <link>https://future-architect.github.io/articles/20220405a/</link>
      <guid>https://future-architect.github.io/articles/20220405a/</guid>
      <pubDate>Mon, 04 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;&lt;a href=&quot;/articles/20220404a/&quot;&gt;電子工作/IoT連載&lt;/a&gt; の2本目です。&lt;/p&gt;
&lt;h1 id=&quot;背景、はじめに。&quot;&gt;&lt;a href=&quot;#背景、はじめに。&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p><a href="/articles/20220404a/">電子工作/IoT連載</a> の2本目です。</p><h1 id="背景、はじめに。"><a href="#背景、はじめに。" class="headerlink" title="背景、はじめに。"></a>背景、はじめに。</h1><p>みなさんこんにちは。フューチャーの矢野です。</p><p>もう春ですね。この季節になると実家の壁に雀が巣を作ることがあります。</p><p>今年も雀が巣を作ったなら、それを見守れたら楽しいなと思います。</p><p>そこで、雀を見守るためのカメラを試作してみました。</p><h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>作ったのがこれです。(<a href="#%E3%83%87%E3%83%A2">デモ</a>)<br><img src="/images/20220405a/image.png" alt="デモ" width="1200" height="717" loading="lazy"></p><p>今回実現したのは下記です。</p><ol><li>LAN内ならカメラの映像が確認できる</li><li>雀がいない間はカメラの電源を落とすことで節電</li><li>カメラが起動したら通知が届く</li><li>かわいい雀の写真がLINEに通知される</li><li>カメラの設定はスマホからできる</li></ol><h2 id="フロー図"><a href="#フロー図" class="headerlink" title="フロー図"></a>フロー図</h2><img src="/images/20220405a/TF_Blog2022-ページ2.drawio.png" alt="フロー図" width="697" height="843" loading="lazy"><p>人感センサーに反応があると、カメラに電源が入ります。<br>カメラは起動するとまずWiFiに接続を試みて、失敗したらAPモードになり、APに接続することでWiFi設定などができるようになります。設定が終了したら、再起動して、またWiFiの接続を試みます。WiFiの接続に成功したらば、まずLINEに通知を飛ばします。飛ばせない場合は、黙ってカメラのサーバーを立ち上げます。３０秒以上センサーに反応がない場合は、カメラの電源が落ちます。ここのロジックはATTiny202のマイコン側でやっていますが、ESP32-CAMだけで実現できると思います。</p><h2 id="使用の想定"><a href="#使用の想定" class="headerlink" title="使用の想定"></a>使用の想定</h2><img src="/images/20220405a/TF_Blog2022-ページ3.drawio.png" alt="使用の想定" width="854" height="399" loading="lazy"><p>カメラがアクセスするWiFiなどの設定はスマホからできるようにしました。カメラへのアクセスはLAN内に限定しました。インターネット越しに雀を見守ることはできません。</p><p>今回の想定は、ユーザー（私）がLINEの通知をみたあと、同じWiFi内にいるにスマホでカメラに接続する想定です。</p><h2 id="回路図"><a href="#回路図" class="headerlink" title="回路図"></a>回路図</h2><img src="/images/20220405a/image_2.png" alt="回路図" width="1200" height="513" loading="lazy"><p>常時人感センサーだけ給電されていて、人感センサーに反応があると、ほかのモジュールにも電源がいくようになっています。NchMOSFETとPchMOSFETを組み合わせて電源を入れる処理は実現しました。電源が入ったATTiny202がQ2のゲートを開けます。</p><p>これによって電源が切れないようなります。電源を切るときはQ2のゲートを閉じます。</p><p>ブレッドボードだとこうなります。<br><img src="/images/20220405a/FTBlog_ブレッドボード.png" alt="ブレッドボード" width="1200" height="845" loading="lazy"><br>一枚のブレッドボードでサクッと作れるのは気持ちがいいですね。</p><h2 id="パーツリスト"><a href="#パーツリスト" class="headerlink" title="パーツリスト"></a>パーツリスト</h2><p>今回の工作で使ったパーツと、購入できるページを載せておきます。<br>ブレッドボードやジャンパーピンは省略します。</p><div class="scroll"><table><thead><tr><th></th><th>名称</th><th>購入先例</th></tr></thead><tbody><tr><td>U1</td><td>焦電型赤外線センサーモジュール（焦電人感センサ）</td><td><a href="https://akizukidenshi.com/catalog/g/gM-14064/">秋月電子</a></td></tr><tr><td>U2</td><td>ＡＶＲマイコン　ＡＴＴＩＮＹ２０２－ＳＳＮＲ</td><td><a href="https://akizukidenshi.com/catalog/g/gI-15731/">秋月電子</a></td></tr><tr><td>U3</td><td>ESPカメラモジュール [ESP32-CAM-K]</td><td><a href="https://www.aitendo.com/product/19515">www.aitendo.com</a></td></tr><tr><td>Q1,Q2</td><td>ＮｃｈＭＯＳＦＥＴ　３０Ｖ５Ａ　ＩＲＬＭＬ６３４４ＴＲＰＢＦＴＲ</td><td><a href="https://akizukidenshi.com/catalog/g/gI-06049/">秋月電子</a></td></tr><tr><td>Q3</td><td>ＰｃｈＭＯＳＦＥＴ　ＩＲＬＭＬ２２４６ＴＲＰＢＦ</td><td><a href="https://akizukidenshi.com/catalog/g/gI-06048/">秋月電子</a></td></tr><tr><td>R1,R4,R5</td><td>100kΩ抵抗</td><td>秋月電子等</td></tr><tr><td>R2</td><td>39kΩ抵抗</td><td>秋月電子等</td></tr><tr><td>R3</td><td>100Ω抵抗</td><td>秋月電子等</td></tr><tr><td>LED1</td><td>何かしらのLED</td><td>秋月電子等</td></tr></tbody></table></div><p>MOSFETやATTiny202などの表面実装パッケージをブレッドボードに差し込むために下記の基板を使いました。</p><div class="scroll"><table><thead><tr><th></th><th>名称</th><th>購入先例</th></tr></thead><tbody><tr><td>ATTiny202用</td><td>ＳＯＴ－２３－３　ＤＩＰ化基板　（５枚入）</td><td><a href="https://akizukidenshi.com/catalog/g/gP-05154/">秋月電子</a></td></tr><tr><td>MOSFET用</td><td>ＳＯＰ８（１．２７ｍｍ）ＤＩＰ変換基板　金フラッシュ　（９枚入）</td><td><a href="https://akizukidenshi.com/catalog/g/gP-14298/">秋月電子</a></td></tr></tbody></table></div><h2 id="ソースコード"><a href="#ソースコード" class="headerlink" title="ソースコード"></a>ソースコード</h2><p>ソースコードは下記です。<br>ESP32のスケッチ例、CameraWebServerに下記のような変更を加えたものです。</p><ol><li>WiFi接続時に<a href="https://github.com/zhouhan0126/WIFIMANAGER-ESP32">WiFiManager</a>を用いることで、WiFi設定をスマホからできるようにした。</li><li>HTTPClientを用いて、LINE NotifyのAPIを叩くようにした。</li></ol><p>画像をHTTPClientを用いてLINEにPOSTするのですが、<a href="https://qiita.com/dzonesasaki/items/1417b917751443994ffc">この記事</a>が大変参考になりました。</p><figure class="highlight c"><figcaption><span>camera_server.ino</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;esp_camera.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;DNSServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WebServer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WiFiManager.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;HTTPClient.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CAMERA_MODEL_AI_THINKER</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;camera_pins.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">startCameraServer</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LINE_ACCESS_TOKEN <span class="string">&quot;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BOUNDARY <span class="string">&quot;CHUNCHUNNOTICE20220327&quot;</span></span></span><br><span class="line">HTTPClient http;</span><br><span class="line"><span class="type">int32_t</span> <span class="title function_">linePost</span><span class="params">( <span class="type">camera_fb_t</span> *fb )</span> &#123;</span><br><span class="line">  String RequestURL=<span class="string">&quot;https://notify-api.line.me/api/notify&quot;</span>;</span><br><span class="line">  http.begin(RequestURL);</span><br><span class="line">  <span class="keyword">if</span> (fb)</span><br><span class="line">  &#123;</span><br><span class="line">    String stConType =<span class="string">&quot;multipart/form-data; boundary=&quot;</span>;</span><br><span class="line">    stConType+=BOUNDARY;</span><br><span class="line">    http.addHeader(<span class="string">&quot;Content-Type&quot;</span>, stConType);</span><br><span class="line">    String authorization = <span class="string">&quot;Bearer &quot;</span>;</span><br><span class="line">    authorization += LINE_ACCESS_TOKEN;</span><br><span class="line">    http.addHeader(<span class="string">&quot;Authorization&quot;</span>, authorization);</span><br><span class="line"></span><br><span class="line">    String stMHead=<span class="string">&quot;--&quot;</span>;</span><br><span class="line">    stMHead += BOUNDARY;</span><br><span class="line">    stMHead += <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    stMHead += <span class="string">&quot;Content-Disposition: form-data; name=\&quot;message\&quot;;\r\n\r\n&quot;</span>;</span><br><span class="line">    stMHead += <span class="string">&quot;Camera: http://&quot;</span>;</span><br><span class="line">    stMHead += WiFi.localIP().toString();</span><br><span class="line">    stMHead += <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    stMHead += <span class="string">&quot;--&quot;</span>;</span><br><span class="line">    stMHead += BOUNDARY;</span><br><span class="line">    stMHead += <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">    stMHead += <span class="string">&quot;Content-Disposition: form-data; name=\&quot;imageFile\&quot;; filename=\&quot;./a.jpg\&quot; \r\n&quot;</span>;</span><br><span class="line">    stMHead += <span class="string">&quot;Content-Type: image/jpeg \r\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    stMHead += <span class="string">&quot;\r\n&quot;</span>;</span><br><span class="line">    <span class="type">uint32_t</span> iNumMHead = stMHead.length();</span><br><span class="line"></span><br><span class="line">    String stMTail=<span class="string">&quot;\r\n--&quot;</span>;</span><br><span class="line">    stMTail += BOUNDARY;</span><br><span class="line">    stMTail += <span class="string">&quot;--\r\n\r\n&quot;</span>;</span><br><span class="line">    <span class="type">uint32_t</span> iNumMTail = stMTail.length();</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> iNumTotalLen = iNumMHead + iNumMTail + fb-&gt;len;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint8_t</span> *uiB = (<span class="type">uint8_t</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">uint8_t</span>)*iNumTotalLen);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> uilp=<span class="number">0</span>;uilp&lt;iNumMHead;uilp++)</span><br><span class="line">      uiB[<span class="number">0</span>+uilp]=stMHead[uilp];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> uilp=<span class="number">0</span>;uilp&lt;fb-&gt;len;uilp++)</span><br><span class="line">      uiB[iNumMHead+uilp]=(fb-&gt;buf)[uilp];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> uilp=<span class="number">0</span>;uilp&lt;iNumMTail;uilp++)</span><br><span class="line">      uiB[iNumMHead+fb-&gt;len+uilp]=stMTail[uilp];</span><br><span class="line"></span><br><span class="line">    <span class="type">int32_t</span> httpResponseCode = (<span class="type">int32_t</span>)http.POST(uiB,iNumTotalLen);</span><br><span class="line">    http.end();</span><br><span class="line">    <span class="built_in">free</span>(uiB);</span><br><span class="line">    Serial.print(<span class="string">&quot;Response Code:&quot;</span>);</span><br><span class="line">    Serial.println(httpResponseCode);</span><br><span class="line">    Serial.print(<span class="string">&quot;Response Body:&quot;</span>);</span><br><span class="line">    Serial.println(http.getString());</span><br><span class="line">    <span class="keyword">return</span> (httpResponseCode);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">takePhoto</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">camera_fb_t</span> * fb = <span class="literal">NULL</span>;</span><br><span class="line">    fb = esp_camera_fb_get();</span><br><span class="line">    <span class="keyword">if</span>(!fb) Serial.println(<span class="string">&quot;Camera capture failed&quot;</span>);</span><br><span class="line">    linePost(fb);</span><br><span class="line">    esp_camera_fb_return(fb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  Serial.begin(<span class="number">115200</span>);</span><br><span class="line">  Serial.setDebugOutput(<span class="literal">true</span>);</span><br><span class="line">  Serial.println();</span><br><span class="line"></span><br><span class="line">  <span class="type">camera_config_t</span> config;</span><br><span class="line">  config.ledc_channel = LEDC_CHANNEL_0;</span><br><span class="line">  config.ledc_timer = LEDC_TIMER_0;</span><br><span class="line">  config.pin_d0 = Y2_GPIO_NUM;</span><br><span class="line">  config.pin_d1 = Y3_GPIO_NUM;</span><br><span class="line">  config.pin_d2 = Y4_GPIO_NUM;</span><br><span class="line">  config.pin_d3 = Y5_GPIO_NUM;</span><br><span class="line">  config.pin_d4 = Y6_GPIO_NUM;</span><br><span class="line">  config.pin_d5 = Y7_GPIO_NUM;</span><br><span class="line">  config.pin_d6 = Y8_GPIO_NUM;</span><br><span class="line">  config.pin_d7 = Y9_GPIO_NUM;</span><br><span class="line">  config.pin_xclk = XCLK_GPIO_NUM;</span><br><span class="line">  config.pin_pclk = PCLK_GPIO_NUM;</span><br><span class="line">  config.pin_vsync = VSYNC_GPIO_NUM;</span><br><span class="line">  config.pin_href = HREF_GPIO_NUM;</span><br><span class="line">  config.pin_sscb_sda = SIOD_GPIO_NUM;</span><br><span class="line">  config.pin_sscb_scl = SIOC_GPIO_NUM;</span><br><span class="line">  config.pin_pwdn = PWDN_GPIO_NUM;</span><br><span class="line">  config.pin_reset = RESET_GPIO_NUM;</span><br><span class="line">  config.xclk_freq_hz = <span class="number">20000000</span>;</span><br><span class="line">  config.pixel_format = PIXFORMAT_JPEG;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if PSRAM IC present, init with UXGA resolution and higher JPEG quality</span></span><br><span class="line">  <span class="comment">//                      for larger pre-allocated frame buffer.</span></span><br><span class="line">  <span class="keyword">if</span>(psramFound())&#123;</span><br><span class="line">    config.frame_size = FRAMESIZE_UXGA;</span><br><span class="line">    config.jpeg_quality = <span class="number">10</span>;</span><br><span class="line">    config.fb_count = <span class="number">2</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    config.frame_size = FRAMESIZE_SVGA;</span><br><span class="line">    config.jpeg_quality = <span class="number">12</span>;</span><br><span class="line">    config.fb_count = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CAMERA_MODEL_ESP_EYE)</span></span><br><span class="line">  pinMode(<span class="number">13</span>, INPUT_PULLUP);</span><br><span class="line">  pinMode(<span class="number">14</span>, INPUT_PULLUP);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// camera init</span></span><br><span class="line">  <span class="type">esp_err_t</span> err = esp_camera_init(&amp;config);</span><br><span class="line">  <span class="keyword">if</span> (err != ESP_OK) &#123;</span><br><span class="line">    Serial.<span class="built_in">printf</span>(<span class="string">&quot;Camera init failed with error 0x%x&quot;</span>, err);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">sensor_t</span> * s = esp_camera_sensor_get();</span><br><span class="line">  <span class="comment">// initial sensors are flipped vertically and colors are a bit saturated</span></span><br><span class="line">  <span class="keyword">if</span> (s-&gt;id.PID == OV3660_PID) &#123;</span><br><span class="line">    s-&gt;set_vflip(s, <span class="number">1</span>); <span class="comment">// flip it back</span></span><br><span class="line">    s-&gt;set_brightness(s, <span class="number">1</span>); <span class="comment">// up the brightness just a bit</span></span><br><span class="line">    s-&gt;set_saturation(s, <span class="number">-2</span>); <span class="comment">// lower the saturation</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// drop down frame size for higher initial frame rate</span></span><br><span class="line">  s-&gt;set_framesize(s, FRAMESIZE_QVGA);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(CAMERA_MODEL_M5STACK_WIDE) || defined(CAMERA_MODEL_M5STACK_ESP32CAM)</span></span><br><span class="line">  s-&gt;set_vflip(s, <span class="number">1</span>);</span><br><span class="line">  s-&gt;set_hmirror(s, <span class="number">1</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  WiFiManager wifiManager;</span><br><span class="line">  wifiManager.setConfigPortalTimeout(<span class="number">30</span>);</span><br><span class="line">  <span class="keyword">if</span> (!wifiManager.autoConnect(<span class="string">&quot;BirdWatcher&quot;</span>,<span class="string">&quot;hogehoge&quot;</span>)) &#123;</span><br><span class="line">    Serial.println(<span class="string">&quot;failed to connect and hit timeout&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  takePhoto();</span><br><span class="line">  startCameraServer();</span><br><span class="line"></span><br><span class="line">  Serial.print(<span class="string">&quot;Camera Ready! Use &#x27;http://&quot;</span>);</span><br><span class="line">  Serial.print(WiFi.localIP());</span><br><span class="line">  Serial.println(<span class="string">&quot;&#x27; to connect&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// put your main code here, to run repeatedly:</span></span><br><span class="line">  delay(<span class="number">10000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ATTINY202側のコードです。人感センサーが反応してから30秒間電源が落ちないように0pin(NchMOSFETに繋がっている)をオンにします。こちらもArduinoのブートローダーを書き込んでArduinoIDEで開発してます。</p><figure class="highlight c"><figcaption><span>attiny202.ino</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  PowerController for tiny 202</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">keepPassive</span><span class="params">(<span class="type">int</span> digiin,<span class="type">int</span> interval)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;interval; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> (digitalRead(digiin) == HIGH) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    delay(<span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setup</span><span class="params">()</span> &#123;</span><br><span class="line">  pinMode(<span class="number">0</span>, OUTPUT); <span class="comment">// POWER FLAG</span></span><br><span class="line">  pinMode(<span class="number">1</span>, INPUT); <span class="comment">// POWER BUTTON</span></span><br><span class="line">  digitalWrite(<span class="number">0</span>, HIGH);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">loop</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> ( digitalRead(<span class="number">1</span>)==LOW &amp;&amp; keepPassive(<span class="number">1</span>, <span class="number">30</span>) ) digitalWrite(<span class="number">0</span>, LOW);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="デモ"><a href="#デモ" class="headerlink" title="デモ"></a>デモ</h1><img src="/images/20220405a/demo.gif" alt="demo.gif" width="200" height="433" loading="lazy">消費電力はテスターで測れる範囲で測った結果が下記です。電源の電圧は5Vです。<div class="scroll"><table><thead><tr><th>状態</th><th>電流</th></tr></thead><tbody><tr><td>人感センサのみ</td><td>0.0mA以下（※0.0mA以下をテスターで計測することができませんでした）</td></tr><tr><td>人感センサ反応後、WiFi起動時</td><td>190mA前後</td></tr><tr><td>サーバー起動、待機中</td><td>120mA前後</td></tr><tr><td>カメラ起動、配信開始</td><td>200mA以上（※テスターでは200mA以上の測定ができませんでした）</td></tr></tbody></table></div><p>上記の通り、カメラを常時起動させているよりは電気を節約できていそうですね。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>これでかわいい雀が巣を作っても見守れますね。今回はカメラ部分だけ作りました。</p><p>実際に雀を見守るとなると、巣箱と、カメラを動かす電源が必要になります。</p><p>電源にはソーラーパネルと鉛蓄電池を使おうかなと思っています。</p><p>ありがとうございました。</p><h1 id="利用ツール・参考"><a href="#利用ツール・参考" class="headerlink" title="利用ツール・参考"></a>利用ツール・参考</h1><ol><li><a href="https://app.diagrams.net/">diagrams.net(フロー図、利用想定図作成)</a></li><li><a href="https://www.kicad.org/">KiCad(回路図作成)</a></li><li><a href="https://fritzing.org/">fritzing(ブレッドボードの図作成)</a></li><li><a href="https://ffmpeg.org/">ffmpeg(デモ動画変換)</a></li><li><a href="https://support.apple.com/ja_JP/downloads/quicktime">QuickTime Player + iPhone(デモ動画撮影)</a></li><li><a href="https://qiita.com/dzonesasaki/items/1417b917751443994ffc">Arduino HTTPClientでファイルのバイナリ送信</a></li><li><a href="https://notify-bot.line.me/doc/ja/">LINE Notify API Document([POST] /api/notify)</a></li></ol>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/IoT/">IoT</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C/">電子工作</category>
      
      <category domain="https://future-architect.github.io/tags/ESP32-CAM/">ESP32-CAM</category>
      
      <category domain="https://future-architect.github.io/tags/Arduino/">Arduino</category>
      
      <category domain="https://future-architect.github.io/tags/%E4%BA%BA%E6%84%9F%E3%82%BB%E3%83%B3%E3%82%B5%E3%83%BC/">人感センサー</category>
      
      
      <comments>https://future-architect.github.io/articles/20220405a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>スマートLED（Philips Hue）にFlutterでBLEアクセスしてみた</title>
      <link>https://future-architect.github.io/articles/20220404b/</link>
      <guid>https://future-architect.github.io/articles/20220404b/</guid>
      <pubDate>Sun, 03 Apr 2022 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG DXユニット真野です。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG DXユニット真野です。<a href="/articles/20220404a/">電子工作/IoT連載</a>は電子工作らしく、LEDをLチカ（LEDをチカチカさせる）する記事です。</p><p>普通のLEDだと面白くないので、<a href="https://www.amazon.co.jp/dp/B0848YBKGW/">Philips HueのLED</a>を購入しました。Philipsと言えば電動歯ブラシなどのイメージが強いかもしれませんが、スマートLED界では非常に有名で、ON/OFFはもちろんのこと、1600万色以上のカラー制御ができるので気分や何かしらの状態に合わせて照明の色を変えるなどのお楽しみができます。パリピになりたいですね。</p><p>接続ですが、Bluetooth（BLE: Bluetooth Low Energy）で接続可能。Hueブリッジと呼ばれるIoTゲートウェイ（Webサーバ的なもの）を経由してWeb API連携も可能という、いたせりつくせりです。Hueから各デバイスはZigBeeが用いられているということでいかした感じがします。Hueブリッジを経由する例は、Pythonを始め多くの自動化を試みる日本語記事も多く見かけます。今回は先週までブログ連載を開催していた<a href="/articles/20220315a/">Flutter</a>を用いて、Hueブリッジを用いずBLEで直接LEDの操作をします。</p><h2 id="FlutterでBLE"><a href="#FlutterでBLE" class="headerlink" title="FlutterでBLE"></a>FlutterでBLE</h2><p>FlutterでBLEのライブラリはいくつか存在しますが、<a href="https://github.com/PhilipsHue/flutter_reactive_ble">PhilipsHue/flutter_reactive_ble</a> を利用します。理由は以下の記事をパット見てメンテナンスがされていそうだからということです。</p><ul><li><a href="https://medium.com/flutter-community/bluetooth-low-energy-in-flutter-an-overview-937d0a68bc41">https://medium.com/flutter-community/bluetooth-low-energy-in-flutter-an-overview-937d0a68bc41</a></li></ul><p>flutter_reactive_bleはPhilips社が開発元なので、Hue LEDとの接続性もバッチリかと思いましたが、特段それに特化しているわけではなくBLE全般をあつかうライブラリのようです。</p><h2 id="Hue-LEDのBLE仕様"><a href="#Hue-LEDのBLE仕様" class="headerlink" title="Hue LEDのBLE仕様"></a>Hue LEDのBLE仕様</h2><p>Hue LEDのBluetoothの仕様ですが公式は存在しないようです。そのため有志の人が調査した（？）gistや、Python製のライブラリの実装を参考にします。</p><ul><li><a href="https://gist.github.com/shinyquagsire23/f7907fdf6b470200702e75a30135caf3">https://gist.github.com/shinyquagsire23/f7907fdf6b470200702e75a30135caf3</a></li><li><a href="https://github.com/npaun/philble">https://github.com/npaun/philble</a></li></ul><p>1つ目のgistを見てもBLEをよくしらない人からするとサッパリだと思うので補足します。BLE論理的な構造は以下のように、あるDeviceには複数のServiceが紐づいており、その配下にCharacteristicと呼ばれる構造で管理されています。この構成によってデータのやり取りを行います。ServiceもCharacteristicも特定のためにUUIDを用いています。</p><img src="/images/20220404b/ble_strucutre.png" alt="ble_strucutre.png" width="791" height="441" loading="lazy"><p>さきほどのgistを確認すると、Service <code>932c32bd-0000-47a2-835a-a8d455b859dd</code> に、電源ON/OFFをする <code>932c32bd-0002-47a2-835a-a8d455b859dd</code> というCharacteristicがあり、そちらに 1/0 のバイナリを送信すると、LEDがついたり消えたりするわけです。何に使うかわからないCharacteristicもいくつかありますが、ライトの操作は大まかこのシートから推測して行うことができます。Python側のライブラリは補足情報としてあつかうと良いかなと思います。</p><h2 id="Flutter実装"><a href="#Flutter実装" class="headerlink" title="Flutter実装"></a>Flutter実装</h2><p>さきほど紹介したPhilipsHue/flutter_reactive_bleを用いてBLE通信を行います。<code>scanForDevices()</code> が周囲のBLE端末を検出するAPIです。デバイスの特定ですが、device名が <code>Hue Lamp</code> だったのでそれで特定しています。複数のLED操作を行う際はそれぞれ別名で管理するなど工夫すると良いでしょう。実際にデバイスに接続するためには<code>connectToDevice()</code> を用います。</p><p>実際の処理は <code>QualifiedCharacteristic()</code> で送信データを作成し、 <code>writeCharacteristicWithoutResponse()</code> でBLEに通信しています。途中で出ているUUIDはgistのシートを参考にしました。製品固定です。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@override</span></span><br><span class="line"><span class="keyword">void</span> initState() &#123;</span><br><span class="line">  <span class="keyword">super</span>.initState();</span><br><span class="line"></span><br><span class="line">  Future(() <span class="keyword">async</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ble = FlutterReactiveBle();</span><br><span class="line">    <span class="keyword">var</span> device = <span class="keyword">await</span> FlutterReactiveBle().scanForDevices(withServices: [], scanMode: ScanMode.lowLatency).firstWhere((device) =&gt; device.name == <span class="string">&quot;Hue Lamp&quot;</span>);</span><br><span class="line">    _deviceName = device.name;</span><br><span class="line"></span><br><span class="line">    ble.connectToDevice(id: device.id, servicesWithCharacteristicsToDiscover: &#123;&#125;, connectionTimeout: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>)).listen((state) <span class="keyword">async</span> &#123;</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;State: <span class="subst">$&#123;state.toString()&#125;</span>&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (state.connectionState == DeviceConnectionState.connected) &#123;</span><br><span class="line">        <span class="keyword">var</span> services = <span class="keyword">await</span> ble.discoverServices(device.id);</span><br><span class="line">        <span class="keyword">var</span> service = services;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>;; i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (_color) &#123;</span><br><span class="line">            <span class="keyword">const</span> colors = [</span><br><span class="line">              <span class="comment">// RGB color</span></span><br><span class="line">              [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">              [<span class="number">128</span>, <span class="number">51</span>, <span class="number">51</span>],</span><br><span class="line">              [<span class="number">128</span>, <span class="number">128</span>, <span class="number">51</span>],</span><br><span class="line">              [<span class="number">51</span>, <span class="number">128</span>, <span class="number">51</span>],</span><br><span class="line">              [<span class="number">51</span>, <span class="number">128</span>, <span class="number">128</span>],</span><br><span class="line">              [<span class="number">128</span>, <span class="number">70</span>, <span class="number">70</span>]</span><br><span class="line">            ];</span><br><span class="line">            <span class="keyword">final</span> colorControl = QualifiedCharacteristic(</span><br><span class="line">                serviceId: Uuid.parse(<span class="string">&quot;932c32bd-0000-47a2-835a-a8d455b859dd&quot;</span>), characteristicId: Uuid.parse(<span class="string">&quot;932c32bd-0005-47a2-835a-a8d455b859dd&quot;</span>), deviceId: device.id);</span><br><span class="line">            <span class="keyword">await</span> ble.writeCharacteristicWithoutResponse(colorControl, value: [<span class="number">1</span>, ...colors[i % <span class="number">5</span>]]);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_onOff) &#123;</span><br><span class="line">            <span class="keyword">final</span> lightControl = QualifiedCharacteristic(</span><br><span class="line">                serviceId: Uuid.parse(<span class="string">&quot;932c32bd-0000-47a2-835a-a8d455b859dd&quot;</span>), characteristicId: Uuid.parse(<span class="string">&quot;932c32bd-0002-47a2-835a-a8d455b859dd&quot;</span>), deviceId: device.id);</span><br><span class="line">            <span class="keyword">await</span> ble.writeCharacteristicWithoutResponse(lightControl, value: [i % <span class="number">2</span>]);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_temperature) &#123;</span><br><span class="line">            <span class="comment">// Index ranges from 153 (bluest) to 454 (bluest), or 500 on some models</span></span><br><span class="line">            <span class="keyword">final</span> temperatureControl = QualifiedCharacteristic(</span><br><span class="line">                serviceId: Uuid.parse(<span class="string">&quot;932c32bd-0000-47a2-835a-a8d455b859dd&quot;</span>), characteristicId: Uuid.parse(<span class="string">&quot;932c32bd-0004-47a2-835a-a8d455b859dd&quot;</span>), deviceId: device.id);</span><br><span class="line">            <span class="keyword">await</span> ble.writeCharacteristicWithoutResponse(temperatureControl, value: [<span class="number">50</span>, i % <span class="number">255</span>]); <span class="comment">// sample value</span></span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_brightness) &#123;</span><br><span class="line">            <span class="keyword">final</span> brightnessControl = QualifiedCharacteristic(</span><br><span class="line">                serviceId: Uuid.parse(<span class="string">&quot;932c32bd-0000-47a2-835a-a8d455b859dd&quot;</span>), characteristicId: Uuid.parse(<span class="string">&quot;932c32bd-0003-47a2-835a-a8d455b859dd&quot;</span>), deviceId: device.id);</span><br><span class="line">            <span class="keyword">await</span> ble.writeCharacteristicWithoutResponse(brightnessControl, value: [i % <span class="number">2</span> == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">254</span>]); <span class="comment">// 1~254</span></span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">await</span> Future.delayed(<span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">2</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, onError: (<span class="built_in">dynamic</span> error) &#123;</span><br><span class="line">      <span class="built_in">print</span>(error.toString());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全文は次に載せています。</p><p><a href="https://github.com/ma91n/flutter-hue-led-sample">https://github.com/ma91n/flutter-hue-led-sample</a></p><h2 id="動かしてみた"><a href="#動かしてみた" class="headerlink" title="動かしてみた"></a>動かしてみた</h2><p>さきほどのFlutterで作成したアプリから、LEDを操作してみます。</p><h3 id="ON-OFF"><a href="#ON-OFF" class="headerlink" title="ON/OFF"></a>ON/OFF</h3><p>Lチカです。照明のON/OFFでカメラのフォーカスが変わってしまっていますが、ついたり消えたりしているのがわかります。手ブレですが、撮影中に飼い猫がじゃれついてきているためにいつもより多めに発生しています。</p><p><video src="/images/20220404b/Lチカ.mp4" controls width="50%"></video></p><h3 id="色変更"><a href="#色変更" class="headerlink" title="色変更"></a>色変更</h3><p>適当にRGBで指定した色に変更するようにしてています。</p><p><video src="/images/20220404b/色変更.mp4" controls width="50%"></video></p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>BLEで操作する概念のとっかりが難しかったですが、Lチカが無事できて良かったです。BLEがたまにdisconnectになるなど、実用性はまだまだであるため、精度を上げるためには実験を繰り返しながらのトライが必要そうです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/IoT/">IoT</category>
      
      
      <category domain="https://future-architect.github.io/tags/Flutter/">Flutter</category>
      
      <category domain="https://future-architect.github.io/tags/L%E3%83%81%E3%82%AB/">Lチカ</category>
      
      <category domain="https://future-architect.github.io/tags/BLE/">BLE</category>
      
      
      <comments>https://future-architect.github.io/articles/20220404b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>電子工作/IoT連載をはじめます</title>
      <link>https://future-architect.github.io/articles/20220404a/</link>
      <guid>https://future-architect.github.io/articles/20220404a/</guid>
      <pubDate>Sun, 03 Apr 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220404a/bulb-gffed9c0de_640.png&quot; alt=&quot;&quot;  width=&quot;600&quot; height=&quot;640&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220404a/bulb-gffed9c0de_640.png" alt=""  width="600" height="640"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>フューチャー電子工作部の真野です。</p><p>フューチャーには会社公認のクラブ活動（FACTS）があり、野球部、テニス部、ゴルフ部など、趣味を通じて和気あいあいと活動しています。この記事ではその中でもやや異色な存在である電子工作部＋αの有志で、ブログ連載を行います。</p><p>電子工作部自体は <a href="https://future-architect.github.io/tags/Future%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C%E9%83%A8/">#Future電子工作部</a> で発信しようと2019年ごろから<a href="https://future-architect.github.io/articles/20191018/">ラインレーサー</a>を企画したり起動に乗ろうとしていたところ、あいにくの情勢下で活動が難しくなり、主にチャット上で購入したデバイスについて自慢したり、<a href="https://speakerdeck.com/fumimaker/dian-zi-gong-zuo-falsetamefalsedian-qi-hui-lu-ji-chu-jiang-zuo">良質な教材をもとにみんなで勉強したり</a>、<a href="https://www.youtube.com/watch?v=1L_MBAwDqXc">おもしろ動画</a>を共有するといった緩い繋がりのコミュニティでした。</p><p>とはいえさすがに休止期間が長いので、何か技術ブログで発信していこうという活動を取ることにしました。</p><h2 id="スケジューリング"><a href="#スケジューリング" class="headerlink" title="スケジューリング"></a>スケジューリング</h2><p>電子工作やIoTのテーマで、6名のメンバーで開催します。</p><div class="scroll"><table><thead><tr><th>Date</th><th>Title</th><th>Author</th></tr></thead><tbody><tr><td>4月4日</td><td><a href="/articles/20220404b/">スマートLED照明に接続にしてみた</a></td><td>真野隼記</td></tr><tr><td>4月5日</td><td><a href="/articles/20220405a/">雀を見守るカメラを作ってみた</a></td><td>矢野颯太</td></tr><tr><td>4月6日</td><td><a href="/articles/20220406a/">プロトタイピングの勧め</a></td><td>井上圭</td></tr><tr><td>4月7日</td><td><a href="/articles/20220407a/">TinkerBoard 2S：AWS Greengrass v1をインストールする</a></td><td>宮永崇史</td></tr><tr><td>4月8日</td><td><a href="/articles/20220408a/">元日に92%引きで叩き売りされていた変形ホームロボットを買ったのでScalaから叩いてみた</a></td><td>山本力世</td></tr></tbody></table></div><p>実はメンバーが集まらず、企画が流れるかなと思いましたが、矢野さんや井上さんが急遽参画いただけて助かりました。</p><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>この情勢下で中々外出が難しい、リモートワークになり在宅率が高い状況下ですので、電子工作・IoTの力で少しでも快適に過ごせるヒントに慣ればと思います。このブログを読んだ社員の人で電子工作/IoTに興味がある方はお気軽にメンバーまで連絡をいただければです。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/IoT/">IoT</category>
      
      
      <category domain="https://future-architect.github.io/tags/IoT/">IoT</category>
      
      <category domain="https://future-architect.github.io/tags/Future%E9%9B%BB%E5%AD%90%E5%B7%A5%E4%BD%9C%E9%83%A8/">Future電子工作部</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      
      <comments>https://future-architect.github.io/articles/20220404a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
