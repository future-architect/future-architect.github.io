<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>フューチャー技術ブログ</title>
    <link>https://future-architect.github.io/</link>
    
    <image>
      <url>https://future-architect.github.io/feed_icon.png</url>
      <title>フューチャー技術ブログ</title>
      <link>https://future-architect.github.io/</link>
    </image>
    
    <atom:link href="https://future-architect.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>フューチャーの開発者による公式技術ブログです。業務で利用している技術を幅広く紹介します。</description>
    <pubDate>Wed, 15 Jun 2022 00:29:26 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Go で map 型の YAML 出力を指定の順序へ変更したい</title>
      <link>https://future-architect.github.io/articles/20220615a/</link>
      <guid>https://future-architect.github.io/articles/20220615a/</guid>
      <pubDate>Tue, 14 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220615a/yml.png&quot; alt=&quot;&quot; width=&quot;512&quot; height=&quot;512&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://www.flaticon.com/free-icons/yml&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220615a/yml.png" alt="" width="512" height="512" loading="lazy"><p><a href="https://www.flaticon.com/free-icons/yml" title="yml icons">Yml icons created by Darius Dan - Flaticon</a></p><p>TIG 所属の多賀です。<br>表題の通り、Go で map 型の YAML 出力の際、key を指定した順序にする方法を調査・実装してみました。</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><ul><li>map の key は YAML 変換ライブラリ側でソートされた上で、出力することで順序が固定化されている</li><li>指定した順序で出力したいので、map を struct へ変換して出力した</li></ul><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Go の map のソート順は不定であることは、よく言われることかなと思います。<br>(言語仕様にも明記されています。)</p><blockquote><h4 id="Map-types"><a href="#Map-types" class="headerlink" title="Map types"></a>Map types</h4><p>A map is <strong>an unordered group</strong> of elements of one type, called the element type, indexed by a set of unique keys of another type, called the key type. The value of an uninitialized map is nil.</p><p><a href="https://go.dev/ref/spec#Map_types">The Go Programming Language Specification - Map types</a></p></blockquote><p>そのため、map をソートして出力したい場合は、 map に含まれる key のリストをソートし、ソートされた key ごとに map の value を出力することで実現します。</p><p>例: <a href="https://go.dev/play/p/5LC2H8ziPpI">The Go Playground - map sort sample</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sort&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;a&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;d&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;c&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;b&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">keys := <span class="built_in">make</span>([]<span class="type">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(m))</span><br><span class="line"><span class="keyword">for</span> k := <span class="keyword">range</span> m &#123;</span><br><span class="line">keys = <span class="built_in">append</span>(keys, k)</span><br><span class="line">&#125;</span><br><span class="line">sort.Strings(keys)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, key := <span class="keyword">range</span> keys &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;key: %v, val: %v\n&quot;</span>, key, m[key])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="comment">// key: a, val: xxx</span></span><br><span class="line"><span class="comment">// key: b, val: xxx</span></span><br><span class="line"><span class="comment">// key: c, val: xxx</span></span><br><span class="line"><span class="comment">// key: d, val: xxx</span></span><br></pre></td></tr></table></figure><p>同様に、map を <a href="https://ja.wikipedia.org/wiki/YAML">YAML</a> へ出力する際も key でソートして出力したかったのですが、YAML を扱うライブラリ側でソート順が固定化されており、できませんでした。ライブラリの調査について以下に記載します。<br>まず、Go で YAML を扱うためには、一般的に以下ライブラリが利用することができます。</p><ul><li><a href="https://github.com/go-yaml/yaml">go-yaml/yaml.v3</a></li><li><a href="https://github.com/goccy/go-yaml">goccy/go-yaml</a></li></ul><p>(今回のサンプルは、 <a href="https://github.com/go-yaml/yaml">go-yaml/yaml.v3</a> を利用しています。)</p><p>map を YAML 形式へ出力するコードを以下の通りに実装してみました。</p><p>例: <a href="https://go.dev/play/p/19g1PtgoyRq">The Go Playground - map to yaml sample</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;gopkg.in/yaml.v3&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line"><span class="string">&quot;a&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;d&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;c&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;b&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b, err := yaml.Marshal(&amp;m)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="type">string</span>(b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="comment">// a: xxx</span></span><br><span class="line"><span class="comment">// b: xxx</span></span><br><span class="line"><span class="comment">// c: xxx</span></span><br><span class="line"><span class="comment">// d: xxx</span></span><br></pre></td></tr></table></figure><p>出力を見てみると(もしくは、PlayGround上で複数回実行していみると) 固定でアルファベット順にソートされて出力されていることがわかります。<br>ソースコードを読んでみると、ライブラリ内で key をソートした上で出力するように実装されていました。<br>それぞれのライブラリの該当行は以下になります。</p><ul><li><a href="https://github.com/go-yaml/yaml/blob/f6f7691b1fdeb513f56608cd2c32c51f8194bf51/encode.go#L186">go-yaml/yaml - encode.go#mapv</a></li><li><a href="https://github.com/goccy/go-yaml/blob/883a73b67b4e35d8f5bad112c918363aad961e3c/encode.go#L503">goccy/go-yaml - encode.go#encodeMap</a></li></ul><p>(key がソートされてないと出力ごとに余計な差分が出て不便なので、ライブラリ側で吸収してくれているのかと思いました。)</p><p>ライブラリ側で<strong>固定で</strong>ソート順が定められている以上、map の出力を<strong>指定の</strong>ソート順にできないことになります。<br>今回、 <strong>指定の</strong>ソート順にしたい要望があり、どうにかできないか調査・実装してみました。</p><h2 id="対応方法"><a href="#対応方法" class="headerlink" title="対応方法"></a>対応方法</h2><p>やりたいことは、 「map の YAML 出力時の key を指定した順序で出力すること」になります。<br>上記記載の通り、map のソート順はライブラリ側で固定化されているので、map 型のままだと難しそうです。<br>map 型の他に、key/value 形式でソート順が固定されているデータ構造としては、 struct が該当すると考え、map → struct の変換をすれば良いのではと思いつきました。</p><p>ですが、map は任意の key/value 値になるため、コンパイル前に struct を定義することはできません。<br>そのため、map の key/value 値を元にして、実行時に struct を生成することにしました。</p><p>また、YAML 形式へ変換する実装を map → struct への変換処理にカスタマイズしたいです。<br>変換処理を独自カスタマイズするには、<a href="https://github.com/go-yaml/yaml">go-yaml/yaml.v3</a> の場合は <code>Marshaler</code> interface を実装することで可能です。</p><p><a href="https://github.com/go-yaml/yaml/blob/v3/yaml.go#L50">yaml/yaml.go at v3 · go-yaml/yaml · GitHub</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The Marshaler interface may be implemented by types to customize their</span></span><br><span class="line"><span class="comment">// behavior when being marshaled into a YAML document. The returned value</span></span><br><span class="line"><span class="comment">// is marshaled in place of the original value implementing Marshaler.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If an error is returned by MarshalYAML, the marshaling procedure stops</span></span><br><span class="line"><span class="comment">// and returns with the provided error.</span></span><br><span class="line"><span class="keyword">type</span> Marshaler <span class="keyword">interface</span> &#123;</span><br><span class="line">MarshalYAML() (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(<code>goccy/go-yaml</code> の場合も同様の interface (<a href="https://github.com/goccy/go-yaml/blob/883a73b67b4e35d8f5bad112c918363aad961e3c/yaml.go#L29">InterfaceMarshaler</a>) でカスタマイズ可能な模様です。)</p><p>整理すると、以下の 2点を実装する必要があります。</p><p><strong>① map の値から実行時に struct を新たに生成し、struct のフィールドを指定したソート順で定義する。</strong><br><strong>② YAML 出力時に map → struct 変換を実装するため、出力カスタマイズ可能な interface を満たすように実装する。</strong></p><p>こちらの 2点を満たす実装を以下の通り実施してみました。<br>(※ reflection が多用されたナイーブな実装なので、本運用等のコードに使うのは少しリスキーだと思います。今回は CLI ツールでの利用であったため、問題ないとしています。)</p><p><a href="https://go.dev/play/p/-ZlYbk2_La-">The Go Playground - sort map to yaml sample</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/iancoleman/strcase&quot;</span></span><br><span class="line"><span class="string">&quot;gopkg.in/yaml.v3&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ② Marshaler interface を実装する専用の構造体を定義</span></span><br><span class="line"><span class="keyword">type</span> SortedMap <span class="keyword">struct</span> &#123;</span><br><span class="line">output     <span class="keyword">map</span>[<span class="type">string</span>]any</span><br><span class="line">sortedKeys []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ② Marshaler interface を満たすメソッドを定義</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o SortedMap)</span></span> MarshalYAML() (<span class="keyword">interface</span>&#123;&#125;, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> o.sortedKeys == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> o.output, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ① の map → struct 生成を実装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 構造体のフィールドを定義</span></span><br><span class="line">newStructFields := <span class="built_in">make</span>([]reflect.StructField, <span class="number">0</span>, <span class="built_in">len</span>(o.output))</span><br><span class="line"><span class="keyword">for</span> _, key := <span class="keyword">range</span> o.sortedKeys &#123;</span><br><span class="line"><span class="keyword">var</span> newStructField reflect.StructField</span><br><span class="line"><span class="keyword">if</span> o.output[key] != <span class="literal">nil</span> &#123;</span><br><span class="line">newStructField = reflect.StructField&#123;</span><br><span class="line">Name: strcase.ToCamel(key),</span><br><span class="line">Type: reflect.ValueOf(o.output[key]).Type(),</span><br><span class="line">Tag:  reflect.StructTag(fmt.Sprintf(<span class="string">`yaml:&quot;%v&quot;`</span>, key)),</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// nil 値の場合 zero value error となるため、ポインタ型で定義して型を抽出</span></span><br><span class="line"><span class="keyword">var</span> ptrTyp *<span class="keyword">struct</span>&#123;&#125; = <span class="literal">nil</span></span><br><span class="line">newStructField = reflect.StructField&#123;</span><br><span class="line">Name: strcase.ToCamel(key),</span><br><span class="line">Type: reflect.ValueOf(ptrTyp).Type(),</span><br><span class="line">Tag:  reflect.StructTag(fmt.Sprintf(<span class="string">`yaml:&quot;%v&quot;`</span>, key)),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">newStructFields = <span class="built_in">append</span>(newStructFields, newStructField)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 構造体型の生成</span></span><br><span class="line">newStructType := reflect.StructOf(newStructFields)</span><br><span class="line"><span class="comment">// 構造体の生成</span></span><br><span class="line">newStruct := reflect.New(newStructType).Elem()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 構造体へ値を詰める</span></span><br><span class="line"><span class="keyword">for</span> _, key := <span class="keyword">range</span> o.sortedKeys &#123;</span><br><span class="line">newStructValue := newStruct.FieldByName(strcase.ToCamel(key))</span><br><span class="line">value := o.output[key]</span><br><span class="line"><span class="keyword">if</span> value != <span class="literal">nil</span> &#123;</span><br><span class="line">newStructValue.Set(reflect.ValueOf(value))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// nil 値の場合 zero value error となるため、ポインタ型で定義して nil を定義</span></span><br><span class="line"><span class="comment">// YAML ファイル上に nil で出力したいため</span></span><br><span class="line"><span class="keyword">var</span> ptrValue *<span class="keyword">struct</span>&#123;&#125; = <span class="literal">nil</span></span><br><span class="line">newStructValue.Set(reflect.ValueOf(ptrValue))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> newStruct.Interface(), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]any&#123;</span><br><span class="line"><span class="string">&quot;a&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;d&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;c&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line"><span class="string">&quot;b&quot;</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ソート順を指定</span></span><br><span class="line">sortedKeys := []<span class="type">string</span>&#123;<span class="string">&quot;d&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">sm := SortedMap&#123;output: m, sortedKeys: sortedKeys&#125;</span><br><span class="line"></span><br><span class="line">b, err := yaml.Marshal(&amp;sm)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="type">string</span>(b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line"><span class="comment">// d: xxx</span></span><br><span class="line"><span class="comment">// c: xxx</span></span><br><span class="line"><span class="comment">// b: xxx</span></span><br><span class="line"><span class="comment">// a: xxx</span></span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Go で map の YAML 出力時のソート順を指定する方法を実装してみました。<br>YAML 形式に閉じずに、他の形式でも似た実装で同じような結果が得られそうです。<br>実装方法としては、reflection 利用のあまり良くないコードかなとは思いつつ、他に方法も浮かばなかったのが実際のところです。<br>(他に良い実現方法があれば、ぜひ知りたいです。)</p><p>最後まで読んでいただきありがとうございました。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://qiita.com/uechoco@github/items/b51df877659226d2893e">Goのreflectで任意の構造体のフィールド変数を1つ増やしちゃう - Qiita</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/YAML/">YAML</category>
      
      <category domain="https://future-architect.github.io/tags/map/">map</category>
      
      
      <comments>https://future-architect.github.io/articles/20220615a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>循環的複雑度の計算を題材にRoslyn APIを使ってみた</title>
      <link>https://future-architect.github.io/articles/20220614a/</link>
      <guid>https://future-architect.github.io/articles/20220614a/</guid>
      <pubDate>Mon, 13 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;TIG コアテクノロジーユニットの山田です。ソースやドキュメントを解析してファクト分析を行う仕事をしています。&lt;/p&gt;
&lt;p&gt;今回は循環的複雑度の計算を題材に、Roslynを用いてVB.NETに対する解析コード&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>TIG コアテクノロジーユニットの山田です。ソースやドキュメントを解析してファクト分析を行う仕事をしています。</p><p>今回は循環的複雑度の計算を題材に、Roslynを用いてVB.NETに対する解析コード<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>をC#で書いてみました。本記事では、メソッド単位の循環的複雑度の計算を、クエリメソッドを用いて構文木を走査する方法とVisualBasicSyntaxWalkerを継承したクラスを用いて構文木を走査する方法の2通りの方法を紹介します。それぞれの方法の特徴は以下の通りです。</p><ol><li>クエリメソッドを用いる方法<ul><li>あるノードの子ノードや子孫ノード、祖先ノードをクエリメソッドにより列挙して処理する形になります</li><li>いわゆるXMLに対するXPathやHTMLに対するCSSセレクタのようなインタフェースです</li></ul></li><li>VisualBasicSyntaxWalkerを継承したクラスを用いる方法<ul><li>どの型のノードを訪問した際にどんな処理をするかというのを記述する方式となります</li><li>いわゆるVisitorパターンです</li></ul></li></ol><h2 id="Roslynとは"><a href="#Roslynとは" class="headerlink" title="Roslynとは"></a>Roslynとは</h2><p>Roslynとは.NET Compiler Platformのコードネームで、コード解析ツール構築のためのAPIを持つコンパイラです<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。Roslynが提供しているAPIを用いることで簡単に静的解析を行うことが出来ます。Microsoft公式で開発されているため、安心感がありますね。</p><h2 id="循環的複雑度について"><a href="#循環的複雑度について" class="headerlink" title="循環的複雑度について"></a>循環的複雑度について</h2><p>循環的複雑度とはコードの品質を表す指標の一つで、循環的複雑度が高いほど複雑な構造であるといえます。<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> <sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p><p>循環的複雑度は制御フローグラフのノード数nとエッジ数eから <code>e - n + 2</code> という形で計算できます。<br>制御フローグラフに分岐が一つもない場合、この値は1となり、分岐が増えるごとに値が増えていくため、分岐の数 + 1という形で簡単に求めることができます。</p><p>今回の記事では、<code>If</code>, <code>ElseIf</code>, <code>For</code>, <code>For Each</code>, <code>While</code>, <code>Case</code>, <code>Catch</code> の数を数えて循環的複雑度を算出<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>することにします。<br>なお、<code>IIf</code> は一見三項演算子のようですが、扱いとしてはただの関数なので今回は対象としませんでした。自前で算出すると自由に計算ロジックを変えられるので、プロジェクトのルールに応じてカスタマイズできますね。</p><p>具体的には以下のようにカウントします。</p><figure class="highlight vb"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Public</span> <span class="keyword">Class</span> A</span><br><span class="line">    <span class="comment">&#x27; 分岐の数は合計で10個なので循環的複雑度は11となる</span></span><br><span class="line">    <span class="keyword">Public</span> <span class="keyword">Shared</span> <span class="keyword">Sub</span> Main()</span><br><span class="line">        <span class="keyword">Dim</span> i <span class="keyword">As</span> <span class="type">Integer</span> = <span class="number">1</span></span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">If</span> i = <span class="number">1</span> <span class="keyword">Then</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">ElseIf</span> i = <span class="number">0</span> <span class="keyword">Then</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">        <span class="keyword">Else</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;C&quot;</span>)</span><br><span class="line">        <span class="keyword">End</span> <span class="keyword">If</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">While</span> i &gt; <span class="number">0</span></span><br><span class="line">            i -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">End</span> <span class="keyword">While</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">For</span> index <span class="keyword">As</span> <span class="type">Integer</span> = <span class="number">0</span> <span class="keyword">To</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">Next</span> index</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Dim</span> lst <span class="keyword">As</span> <span class="built_in">New</span> List(<span class="keyword">Of</span> <span class="type">String</span>) <span class="keyword">From</span> &#123;<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>&#125;</span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">For</span> <span class="keyword">Each</span> elem <span class="keyword">As</span> <span class="type">String</span> <span class="keyword">In</span> lst</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;&#123;0&#125;&quot;</span>, elem)</span><br><span class="line">        <span class="keyword">Next</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">Try</span></span><br><span class="line">            <span class="keyword">Throw</span> <span class="built_in">New</span> Exception()</span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">Catch</span> ex <span class="keyword">As</span> Exception</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Catch&quot;</span>)</span><br><span class="line">        <span class="keyword">End</span> <span class="keyword">Try</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        <span class="keyword">Dim</span> s <span class="keyword">As</span> <span class="type">String</span> = <span class="keyword">If</span>(<span class="literal">Nothing</span>, <span class="string">&quot;hoge&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">&#x27; ここで+1</span></span><br><span class="line">        i = <span class="keyword">If</span>(<span class="number">0</span> = <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">&#x27; ここは+1しない</span></span><br><span class="line">        i = IIf(<span class="number">0</span> = <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">Select</span> <span class="keyword">Case</span> <span class="number">2</span></span><br><span class="line">            <span class="comment">&#x27; ここで+1</span></span><br><span class="line">            <span class="keyword">Case</span> <span class="number">0</span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">            <span class="comment">&#x27; ここで+1</span></span><br><span class="line">            <span class="keyword">Case</span> <span class="number">1</span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">            <span class="keyword">Case</span> <span class="keyword">Else</span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Else&quot;</span>)</span><br><span class="line">        <span class="keyword">End</span> <span class="keyword">Select</span></span><br><span class="line">    <span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Class</span></span><br></pre></td></tr></table></figure><h2 id="環境構築"><a href="#環境構築" class="headerlink" title="環境構築"></a>環境構築</h2><p>下記ツールをインストールします</p><ul><li>.NET 6.0 SDK</li><li>Visual Studio Code<ul><li>C# 拡張機能</li></ul></li></ul><h3 id="プロジェクト作成"><a href="#プロジェクト作成" class="headerlink" title="プロジェクト作成"></a>プロジェクト作成</h3><p>下記コマンドでプロジェクトを作成します。（<code>-o</code>で指定しているのはプロジェクト名です）<br>これによりカレントフォルダに <code>RoslynBlog.csproj</code> ファイルが作成されます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console -o RoslynBlog</span><br></pre></td></tr></table></figure><h3 id="デバッガの設定"><a href="#デバッガの設定" class="headerlink" title="デバッガの設定"></a>デバッガの設定</h3><p>さて、ここまでで C# の開発環境とプロジェクトの作成が済みましたが、まだデバッガが使用出来ない状態です。続いてデバッガの設定をしていきましょう。<br>といっても手順は簡単で、Visual Studio Codeのデバッグパネルを開き、 <code>create a launch.json file</code> をクリックするだけです。<br>これにより、<code>launch.json</code>が作成され、このようにデバッグが可能となります。<br><img src="/images/20220614a/2022-06-01_16h51_12.png" alt="2022-06-01_16h51_12.png" width="540" height="256" loading="lazy"></p><p>これで無事にデバッグできるようになりました。<br><img src="/images/20220614a/2022-06-02_13h23_24.png" alt="2022-06-02_13h23_24.png" width="679" height="223" loading="lazy"></p><h2 id="開発"><a href="#開発" class="headerlink" title="開発"></a>開発</h2><h3 id="パッケージ追加"><a href="#パッケージ追加" class="headerlink" title="パッケージ追加"></a>パッケージ追加</h3><p>まず今回使用するパッケージを追加します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package Microsoft.Build.Locator --version 1.4.1</span><br><span class="line">dotnet add package Microsoft.CodeAnalysis --version 4.2.0</span><br><span class="line">dotnet add package Microsoft.CodeAnalysis.VisualBasic --version 4.2.0</span><br><span class="line">dotnet add package Microsoft.CodeAnalysis.VisualBasic.Workspaces --version 4.2.0</span><br><span class="line">dotnet add package Microsoft.CodeAnalysis.Workspaces.Common --version 4.2.0</span><br><span class="line">dotnet add package Microsoft.CodeAnalysis.Workspaces.MSBuild --version 4.2.0</span><br></pre></td></tr></table></figure><p><code>RoslynBlog.csproj</code> ファイルをエディタで開くことで、依存パッケージが追加されていることが確認できます。言語とビルドツールが統合されており便利ですね。</p><h3 id="計算対象のプロジェクトの読み込み"><a href="#計算対象のプロジェクトの読み込み" class="headerlink" title="計算対象のプロジェクトの読み込み"></a>計算対象のプロジェクトの読み込み</h3><p><code>MSBuildWorkspace</code>を用いてプロジェクトを読み込み、各ドキュメントの各メソッドごとの循環的複雑度を計算して返します。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    MSBuildLocator.RegisterDefaults();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">var</span> workspace = MSBuildWorkspace.Create();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> projectPath = <span class="string">@&quot;../TestProjVB/TestProjVB.vbproj&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> project = <span class="keyword">await</span> workspace.OpenProjectAsync(projectPath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> document <span class="keyword">in</span> project.Documents)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> syntaxTree = <span class="keyword">await</span> document.GetSyntaxTreeAsync();</span><br><span class="line">        <span class="keyword">if</span> (syntaxTree == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// クエリメソッドを用いて循環的複雑度を計算した結果を出力</span></span><br><span class="line">        <span class="keyword">var</span> cyclomaticComplexityByQueryMethod = CalcCyclomaticComplexityByQueryMethod(syntaxTree);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> (methodName, cyclomaticComplexity) <span class="keyword">in</span> cyclomaticComplexityByQueryMethod)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;CalcCyclomaticComplexityByQueryMethod(&#123;0&#125;)=&#123;1&#125;&quot;</span>, methodName, cyclomaticComplexity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// SyntaxWalkerを用いて循環的複雑度を計算した結果を出力</span></span><br><span class="line">        <span class="keyword">var</span> cyclomaticComplexityBySyntaxWalker = CalcCyclomaticComplexityBySyntaxWalker(syntaxTree);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> (methodName, cyclomaticComplexity) <span class="keyword">in</span> cyclomaticComplexityBySyntaxWalker)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;CalcCyclomaticComplexityBySyntaxWalker(&#123;0&#125;)=&#123;1&#125;&quot;</span>, methodName, cyclomaticComplexity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="クエリメソッドによる循環的複雑度の計算"><a href="#クエリメソッドによる循環的複雑度の計算" class="headerlink" title="クエリメソッドによる循環的複雑度の計算"></a>クエリメソッドによる循環的複雑度の計算</h3><p><a href="https://docs.microsoft.com/ja-jp/dotnet/csharp/roslyn-sdk/get-started/syntax-analysis#query-methods">こちら</a>で紹介されているクエリメソッドを用いて循環的複雑度を計算します。<br>循環的複雑度の加算対象となるノードは以下のように判定できます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">IsDecisionNode</span>(<span class="params">SyntaxNode node</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Case Else は除外</span></span><br><span class="line">    <span class="keyword">if</span> (node.IsKind(SyntaxKind.CaseElseStatement))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">        node <span class="keyword">is</span> IfStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> ElseIfStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> WhileStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> ForStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> ForEachStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> CatchStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> CaseStatementSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> TernaryConditionalExpressionSyntax ||</span><br><span class="line">        node <span class="keyword">is</span> BinaryConditionalExpressionSyntax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上記メソッドを用いて、メソッド毎の循環的複雑度は下記のように計算できます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; <span class="title">CalcCyclomaticComplexityByQueryMethod</span>(<span class="params">SyntaxTree syntaxTree</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> cyclomaticComplexityDict = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> methodBlockSyntax <span class="keyword">in</span> syntaxTree.GetRoot().DescendantNodes().OfType&lt;MethodBlockSyntax&gt;())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> methodStatementSyntax = methodBlockSyntax.ChildNodes().OfType&lt;MethodStatementSyntax&gt;().First();</span><br><span class="line">        <span class="keyword">var</span> methodName = methodStatementSyntax.Identifier.Text;</span><br><span class="line">        <span class="keyword">var</span> methodCyclomaticComplexity = methodBlockSyntax.DescendantNodes().Where(node =&gt; CyclomaticComplexity.IsDecisionNode(node)).Count() + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        cyclomaticComplexityDict[methodName] = methodCyclomaticComplexity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cyclomaticComplexityDict;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SyntaxWalkerによる循環的複雑度の計算"><a href="#SyntaxWalkerによる循環的複雑度の計算" class="headerlink" title="SyntaxWalkerによる循環的複雑度の計算"></a>SyntaxWalkerによる循環的複雑度の計算</h3><p>構文木を走査しながら循環的複雑度を計算するSyntaxWalkerクラスを作成します。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">CyclomaticComplexitySyntaxWalker</span> : <span class="title">VisualBasicSyntaxWalker</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; CyclomaticComplexityDict &#123; <span class="keyword">get</span>; &#125; = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> _currentMethodName = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitMethodStatement</span>(<span class="params">MethodStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        _currentMethodName = node.Identifier.Text;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitMethodStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitIfStatement</span>(<span class="params">IfStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitIfStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitElseIfStatement</span>(<span class="params">ElseIfStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitElseIfStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitWhileStatement</span>(<span class="params">WhileStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitWhileStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitForStatement</span>(<span class="params">ForStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitForStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitForEachStatement</span>(<span class="params">ForEachStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitForEachStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitCatchStatement</span>(<span class="params">CatchStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitCatchStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitCaseStatement</span>(<span class="params">CaseStatementSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Case Else は除外</span></span><br><span class="line">        <span class="keyword">if</span> (!node.IsKind(SyntaxKind.CaseElseStatement))</span><br><span class="line">        &#123;</span><br><span class="line">            CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">base</span>.VisitCaseStatement(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitTernaryConditionalExpression</span>(<span class="params">TernaryConditionalExpressionSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitTernaryConditionalExpression(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">VisitBinaryConditionalExpression</span>(<span class="params">BinaryConditionalExpressionSyntax node</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        CyclomaticComplexityDict[_currentMethodName] += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">base</span>.VisitBinaryConditionalExpression(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作成した <code>CyclomaticComplexitySyntaxWalker</code>クラス用いて、下記のように循環的複雑度が計算できます。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; <span class="title">CalcCyclomaticComplexityBySyntaxWalker</span>(<span class="params">SyntaxTree syntaxTree</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> walker = <span class="keyword">new</span> CyclomaticComplexitySyntaxWalker();</span><br><span class="line"></span><br><span class="line">    walker.Visit(syntaxTree.GetRoot());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> walker.CyclomaticComplexityDict;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>今回はRoslynのSyntax APIを使い、VB.NETのプロジェクトを解析し循環的複雑度の計算をしてみました。<br>Roslynを使うことで（Solutionや）Projectを簡単に読み込み、解析することができることがわかりました。<br>C#の循環的複雑度もノードの型が違うだけで、ほぼ同じ形で作ることができます。</p><p>今回の記事とは関係ないですが、C#だと <a href="https://github.com/dotnet/roslyn/blob/main/docs/wiki/Scripting-API-Samples.md">Scripting API</a> により、C#のコードをevalすることが可能なのですが、<a href="https://github.com/dotnet/roslyn/issues/6897#issuecomment-462433349">VB.NETのScripting APIは開発中止になった</a>ようなので今後使える見込みはなさそうです。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="https://github.com/dotnet/vblang/tree/main/spec">vblang/spec at main · dotnet/vblang · GitHub</a> でantlrのgrammarが配布されているのですが、これを使ってparseすることはできないようでした。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://github.com/dotnet/roslyn">GitHub - dotnet/roslyn: The Roslyn .NET compiler provides C# and Visual Basic languages with rich code analysis APIs.</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;"><a href="https://www.buildinsider.net/enterprise/sansanreport/0503">10分間で人に説明できるまで分かるCompiler as a Service“Roslyn” - Build Insider</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;"><a href="https://www.w2solution.co.jp/tech/2021/11/26/eg_ns_rs_cyclomaticcomplexity/">バグの出にくいコードを書く~サイクロマティック複雑度について~ | ｗ２ソリューション株式会社 TECH Media</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;"><a href="https://docs.microsoft.com/ja-jp/visualstudio/code-quality/code-metrics-cyclomatic-complexity?view=vs-2022#the-magic-number">コード メトリック - サイクロマティック複雑度 - Visual Studio (Windows) | Microsoft Docs</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="vertical-align: top; padding-right: 10px;">6.</span><span style="vertical-align: top;">.NETの静的解析ツールであるNDependの場合はcontinue, gotoなどもカウントするようですが、今回は計算対象外としています。<a href="https://blog.ndepend.com/understanding-cyclomatic-complexity/#:~:text=Along%20with%20the%20if%20keyword%2C%20you%20can%20acquire%20additional%20complexity%20by%20use%20of%20looping%20constructs%20(while%2C%20for%2C%20foreach)%2C%20switch%20blocks%20(case/default)%2C%20jumps%20(continue%2C%20goto)%2C%20exceptions%20(catch)%2C%20and%20compound%20conditional%20enablers%20(%26%26%2C%20%7C%7C%2C%20ternary%20operator).">Understanding Cyclomatic Complexity -- NDepend</a></span><a href="#fnref:6" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E9%9D%99%E7%9A%84%E8%A7%A3%E6%9E%90/">静的解析</category>
      
      <category domain="https://future-architect.github.io/tags/C/">C#</category>
      
      <category domain="https://future-architect.github.io/tags/VB-Net/">VB.Net</category>
      
      <category domain="https://future-architect.github.io/tags/Roslyn/">Roslyn</category>
      
      
      <comments>https://future-architect.github.io/articles/20220614a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Future Tech Night #17 embeddingを用いた分析・検索・推薦の技術</title>
      <link>https://future-architect.github.io/articles/20220613a/</link>
      <guid>https://future-architect.github.io/articles/20220613a/</guid>
      <pubDate>Sun, 12 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220613a/top.png&quot; alt=&quot;&quot; width=&quot;600&quot; height=&quot;263&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220613a/top.png" alt="" width="600" height="263"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。Strategic AI Group所属の金子剛士です。</p><p>2021年11月26日に<a href="https://future.connpass.com/event/231310/">Future Tech Night #17「embeddingの活用」と「MLOps」のAI勉強会</a>を開催し、「embeddingを用いた分析・検索・推薦の技術」というタイトルで発表しました。</p><p>当日の勉強会の様子は<a href="https://www.youtube.com/watch?v=6_C-GnwIz3U">YouTubeで公開しており</a>、発表スライドも公開しています。</p><iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/c424fa8e8ec24dab980b0f3ba0905502" title="embeddingを用いた分析・検索・推薦の技術" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 560px; height: 314px;" data-ratio="1.78343949044586"></iframe><h1 id="発表の概要"><a href="#発表の概要" class="headerlink" title="発表の概要"></a>発表の概要</h1><p>深層学習のモデルは画像や自然言語に対して高い精度の予測を行うことが可能ですが、その処理の過程で様々な意味を含んだベクトル(=embedding)を作ります。これを活用することで、どのデータとどのデータが意味的に似ているかを計算し分析することができるようになります。</p><p>本発表の前半では学習済みの自然言語モデルを用いて技術ブログの文章をembeddingに変換し、類似記事の検索や記事のクラスタリングを行いました。embeddingを活用することで、過去の類似記事やタグを効率的に探すことができ、かつ意味的にクラスタリングすることで記事の傾向について考察することができました。これと同様の分析は画像やログデータのデータベースにも適用可能で、人の手で付与したラベルやカテゴリを越えた多くの気づきを与えてくれます。</p><p>本発表の後半ではgensimや対照学習によるembeddingを作成するモデルの学習方法や、embeddingを高速に検索するための近似近傍探索といった最先端のトピックを紹介しました。ログデータからのembeddingを学習・分析は<a href="https://future-architect.github.io/articles/20210901a/">医薬品副作用データベースから医薬品同士の関係を学習・評価・可視化する</a>の記事で紹介したこともありますが、例えidだけでもログデータを用いて適切に学習すればそれだけで意味のあるembeddingを学習することができ、かつ深層学習モデルをスクラッチで組めばデータのカテゴリ情報や画像・言語情報も考慮したうえでデータ同士の関係性を分析することができます。また、<a href="https://cloud.google.com/blog/ja/products/ai-machine-learning/vertex-matching-engine-blazing-fast-and-massively-scalable-nearest-neighbor-search">Vertex Matching Engine</a>にも採用されている、コサイン類似度に適した近似近傍探索手法のScaNNについても紹介・実験を行いパフォーマンスを比較しました。</p><h1 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h1><p>普段自身で研究していたembedding関連の技術の一部をTechNightの場を借りて発表させていただきました。多くの方から反応をいただき嬉しかったです。また、参加者の方とのdiscussionでよりembeddingに関連した技術の幅を広げられました。感謝しております。</p><p>深層学習を通じて得られるembeddingには多種多様な可能性があり、非常にホットな分野です。<br>今後も動向を追いつつ、社会実装を行っていきたいと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92/">機械学習</category>
      
      <category domain="https://future-architect.github.io/tags/TechNight/">TechNight</category>
      
      <category domain="https://future-architect.github.io/tags/TensorFlow/">TensorFlow</category>
      
      
      <comments>https://future-architect.github.io/articles/20220613a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ドメイン駆動設計の源流のPofEAAを読んでみる</title>
      <link>https://future-architect.github.io/articles/20220610a/</link>
      <guid>https://future-architect.github.io/articles/20220610a/</guid>
      <pubDate>Thu, 09 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;最近、ドメイン駆動設計(以下DDD)とかそのあたりを読みこんでいる人から、DDD本の読み方を教えてもらいました。ここではDDD本は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>最近、ドメイン駆動設計(以下DDD)とかそのあたりを読みこんでいる人から、DDD本の読み方を教えてもらいました。ここではDDD本は<a href="https://www.amazon.co.jp/dp/B00GRKD6XU/">エリック・エヴァンスのドメイン駆動設計</a>の方を参照しました。</p><p><a href="https://twitter.com/katzchang">@katzchang</a> さんから教わったのは「DDDはパターンランゲージの形式を意識してるよ」ということでした。ただし、きちんとしたパターンランゲージの形式になっておらず、記述が著者のものになってるので、読者は注意して読む必要があるのかもとのことです。</p><p><a href="https://twitter.com/ryoaita">@ryoaita</a>さんから教わったのは「DDDは<a href="https://www.amazon.co.jp/dp/B01B5MX2O2/">エンタープライズアプリケーションアーキテクチャパターン</a>(以下PofEAA)を下敷きにしている本だよ」ということでした。</p><p>DDDももう時代的にはかなり古い本です。自分で読んだ限りは全然好きになれなくて、でもきっと何かあるはずだと3-4冊読んでみましたが感想は変わらずでした。ユビキタス言語も「当たり前のものを先頭に持ってきて、<a href="https://million-sales.com/?p=346">イエスセット</a>のテクとして誘導してくる詐欺師のテクニックでは」と思ってたぐらいでした。DDDを理解するよりも、DDD本が出た当時のこの本の立ち位置とか成立の過程というのが最近は気になっていました。</p><p>本当はここで紹介する2冊（エリック・エヴァンスのドメイン駆動設計と、エンタープライズアプリケーションアーキテクチャパターン）が半額セールしているうちに書きたかったのですが、5月末で終わってしまったようです。残念。</p><h1 id="パターンランゲージとして見る"><a href="#パターンランゲージとして見る" class="headerlink" title="パターンランゲージとして見る"></a>パターンランゲージとして見る</h1><p>パターンランゲージは、カタログ集の形式ですが、パターンを選ぶ基準を決める「フォース（場）」が大事です。パターンは順番に適用していくものではなく、その状況にあったものをピックアップして使う、という使い方をします。フォースが合わなければ使っても意味なかったり、逆効果だったりします。なので、基本的にそこに入っているものをすべて適用するということはしない、というのがパターンを意識して書かれた本を読むコツです（XPは全適用が基本ですが）。</p><p>モデリング周りのパターンはこんな感じです。DDD本の裏表紙の折り返し部分に書かれているのを引用しました。境界づけられたコンテキストとかあるけど、基本的にはマージできないコンテキストは分けて開始するけど、徐々に統合していくよ、という流れのように見えますね。レガシーシステムラッパー（腐敗防止層）もいつかはリプレースする想定でしょうし。汎用サブドメインはどこの会社でも同じような「銀行振込」みたいなわざわざモデル化すべきでないものだと思うし、統合されたコンテキストとその中で実現するコアドメインというのが最終進化系な気がしますね。まあ単一のモデルで実現できるものであれば、わざわざ分ける必要ないですものね。</p><img src="/images/20220610a/スクリーンショット_2022-06-03_8.05.54.png" alt="スクリーンショット_2022-06-03_8.05.54.png" width="1190" height="1048" loading="lazy"><p>本文はXPを想定してUMLみたいなモデルを作らずにコードでモデルを表現する方法を推していて、補足的な方法としてアナリシスパターンとか、UMLも紹介していますね。モデリング周りのパターンは、この「単一のモデル（を含むコンテキスト）」をスケーリングする方法として書かれている、という読み方をすればいいということですね。肝心のモデリングする部分が「ドメインエキスパートに聞いてコードに書いて洗練する」とか程度で方法論として薄いなぁ、というのも今までDDDに持っていた不満ポイントでした。</p><p>が、DDD本の出版当時に多数あった「既存のモデリング手法」をスケーリングさせるパターンであった考えれば、理解できます。問題は、20年ほど前に流行ったさまざまなモデリング手法が現代で失われてしまったということぐらいですかね。</p><p>ちなみに、XP的な設計手法を使う前提だとしても、この説明だけでは実現できず、他のXP本の力が必要でしょう。4重のイテレーション、フィードバックの仕組み、ストーリーなどを使った要求のマッピングなど、お客さんの言葉を引き出すテクニックがきちんと形になっているのがXPですし、メタファーを使って再現とかコードにする前にきちんとチーム内でコミュニケーションする方法論になっていますが、DDD本はそこを端折っています。まあ他の方法論同様、XPをみんなが知っている（という時代だった）という前提だったんだろうな、と思います。</p><p>実装周りはこんな感じです。DDD本の表紙の折り返し部分に書かれているのを引用しました。モデルをコードとして表現するには、エンティティ、サービス、値オブジェクトで表現するとありますね（図はモジュールも矢印が伸びているが5章の本文では3要素のみ）。ですが、これらのパターンはどれもふわっとしか書かれてなくて、詳細がいまいち分かりませんでしたが、ここでPofEAAを召喚すると良さそうです。</p><img src="/images/20220610a/スクリーンショット_2022-06-03_8.03.08.png" alt="スクリーンショット_2022-06-03_8.03.08.png" width="1122" height="1126" loading="lazy"><h1 id="PofEAAのドメインの表現手法のパターン"><a href="#PofEAAのドメインの表現手法のパターン" class="headerlink" title="PofEAAのドメインの表現手法のパターン"></a>PofEAAのドメインの表現手法のパターン</h1><p>DDD本で書いてあるコードの部品のパターン名と似たものがDDDにはあります。こちらの方が詳しく説明されているので、DDDの説明を補完するにはこちらも合わせて読むと良さそうです。マーチン・ファウラーのエンタープライズアプリケーションアーキテクチャパターン（PofEAA）には、ドメインロジックの構築方法として、３つのパターンが紹介されています。</p><ul><li><a href="https://bliki-ja.github.io/pofeaa/TransactionScript/">トランザクションスクリプト</a></li><li><a href="https://bliki-ja.github.io/pofeaa/DomainModel/">ドメインモデル</a></li><li><a href="https://bliki-ja.github.io/pofeaa/TableModule/">テーブルモジュール</a></li></ul><p>DDD本が選んだのは、この中のドメインモデルです。DDD本はエンティティと値オブジェクトと書いていますが、ドメインモデルという言葉では表現していません。ドメインモデル（オブジェクトで表現）という形式に、エンティティと値オブジェクトを重ねている状態かと思います。他の物は重ならないですし。</p><p>で、PofEAAはドメインを表現する手段としてはバリューオブジェクトの紹介はしておらず、ドメイン関係ないネジ釘を紹介する「ベースパターン」の中にいます。エンティティという言葉はないですが、12章のオブジェクトリレーショナル構造パターンという章まるごとがエンティティを扱っています。PofEAAでは、実装手段（バリューオブジェクト、OR構造パターン）と、ドメインロジックを持つオブジェクトである、という情報は直交したものとして扱われていますね。</p><p>DDD本はテーブルモジュールには触れず、トランザクションスクリプトはアンチパターンで、ドメインモデルが正義のように説明していますが、PofEAAではそれぞれのメリットとデメリットがフラットに紹介されています。トランザクションスクリプトもシンプルでいいよと説明されています。でもって、実装手段とドメインロジックを持つもの、といのが別の軸のものという紹介を省いて、値オブジェクトとエンティティを「ドメインを表現するもの」と紹介してしまっているようです。つまり、ドメインを表現しない値オブジェクトとか、エンティティなんてものはないぞ、という誤解を生み出す源泉はこの魔改造にありそうです。</p><p>このあたりとか、DDDとPofEAAの関係は次のエントリーが詳しいです。</p><ul><li><a href="https://note.com/ryoaita/n/nc263697882cd">RE:メモ:値オブジェクトの定義と差異について</a></li></ul><p>DDD本は、すごくシンプルな事例（Ruby on Railsでさっと作ったアプリ的な）向けに、そのシンプルな状況に耐えうるミニマムセットのパターンを取り出し「ドメインを表現するならこの部分に込めるといいよ」と抜き出して説明しているんだろうな、という気がしてきました。ただ、抜き出す基準が、１５年前のブームになっていたJava文化基準でピックアップしたのかな、というあたりが気になりました。</p><h1 id="ソフトウェアエンジニアリングは全然エンジニアリングじゃない"><a href="#ソフトウェアエンジニアリングは全然エンジニアリングじゃない" class="headerlink" title="ソフトウェアエンジニアリングは全然エンジニアリングじゃない"></a>ソフトウェアエンジニアリングは全然エンジニアリングじゃない</h1><p>オブジェクト指向だって、言語によって機能が異なり、同じようなソフトウェアを作る場合に出来上がるクラス構造とかが大きく変わってきます。例えば、DIなんかはリフレクション前提でしょうしね。クラス図ときれいにマッピングできるようなモデルがあって、上流から下流までうまく繋がるというのは幻だったということです。</p><p>現在行われているソフトウェアの設計という行為は、レイヤーを絞り込んで、その中だけで行われています。</p><ul><li>データベースを中心として設計を行うデータ中心設計（DOA）</li><li>データベースとかフレームワークを切り離しでアプリケーションコード中心に設計するいくつかの方法論</li><li>ゲームではシーングラフの上で動くアクターを中心にしたイベント駆動</li></ul><p>そのレイヤーを定めるのは土台となってるフレームワーク次第なので、フレームワークごとのベストプラクティス的な立場に収まってしまったと言えます。「汎用の設計手法」というのはなくて、土台となる技術が変わって来れば設計手法も影響を受けて変わるということです。</p><p>以前、歴史学を専攻している知人から歴史学のエコシステムを教えてもらったことがあります(もう10年以上前の話ですが)。歴史学では遺跡から出た出土品とかさまざまな資料をもとに、仮説検証をおこなって当時の姿を再現したモデルを作ります。で、新しい発見があると、それをもとに新しいモデルを作り直します。特に情報の少ない古代史になればなるほど、1つの発見で既存のモデルが大きく書き換えられていきます。これって、ようするに、自然科学の発展のような過程を何度も何度も繰り返していると言えます。なぜ<a href="https://ja.wikipedia.org/wiki/%E6%97%A7%E7%9F%B3%E5%99%A8%E6%8D%8F%E9%80%A0%E4%BA%8B%E4%BB%B6">神の手事件</a>が大きな問題として扱われたのか当時はよくわからなくて「歴史書のそこの記述をちょっと直せばいいだけでは」とか思っていましたが、「そのページ以降すべて書き直し」というインパクトがあったのだな、とそれを聞いて初めて理解できました。</p><p>20年ぐらい前に流行ったオブジェクト指向な方法論とかも、当時のJavaとかを想定して組み上げられた方法論ですので、同じような探求活動を、クラスはあるけどほとんど使わない今のTypeScriptとかに対して行えば、当然別の発展が得られるかと思います。歴史学と同じようなリビルドがソフトウェア開発にも起きうるべきですし、ソフトウェア工学の大部分は人文科学なんだなと思います。</p><p>プロパティベーステストとか、SIerあたりでよく出てくるソースジェネレータ開発とかスキーマ駆動なやつとかそのあたりは工学感ありますが。パターンランゲージはいい線行っていると思いますが、デザインパターンとかもC++98以前の30年前に伝えられた姿のままでバージョンアップされずに固定化されてしまっているのですよね。パターンは有機的なもので発展し続けるのを想定していたのかもしれませんが、XPのパターン数も12→13→24(11+13)→19だったか変化し続けて、Clean Agileはケント・ベックとまた別の13だったりするが、XPについて触れた記事もどの時代のものについて触れているか情報が失われて議論が発散してしまった感じがあり、パターンランゲージにバージョン番号をつけて改訂していく文化がなかったのが残念だなと。</p><p>余談ですが、世の中の「オブジェクト指向」は基本Javaを想定していますが、個人的にはprivateの概念はRubyの方が好きですね。同一インスタンス以外には見せない。C++の「お前のものは俺のもの」という悪いカツアゲしてくる「トモダチ」もひどい概念ですね。</p><h1 id="令和時代のDDDを妄想してみると面白いと思う"><a href="#令和時代のDDDを妄想してみると面白いと思う" class="headerlink" title="令和時代のDDDを妄想してみると面白いと思う"></a>令和時代のDDDを妄想してみると面白いと思う</h1><p>パターンランゲージについては最初の方に説明しました。パターンは基本的に数が多ければ多いほど、その組み合わせでたくさんの場面に活用できるというものです。比較的多くのパターンを並べていて網羅的に書かれているPofEAAのパターンも、時代に合っていないもの、その後登場して入るべきであろう、というものもありますし、仮に利用可能なパターンがあっても、そのフォースも、20年の歴史の中で大きく変わっています。当然、それをもとに組み上げられてきたDDDはさらに大きな変化があるはずです。</p><p>特に、最近のクラウドネイティブなFaaSを駆使したピタゴラスイッチ的なやつ。あれとか旧来のDDDとかだとオーバーヘッドが大きすぎると思うんですよね。モデルはデータベースの構造として表現して、トランザクションスクリプトにドメインロジックとか、そういうのに合わせたDDDとか、いろいろ新しい形が模索できるんじゃないかと思います。</p><p>PofEAAで特に古さを感じたのは。ウェブアプリケーションのフロントエンド周りの考え方で、CGIとかそういう時代も考慮したものでSPAとかそういう時代ではないのですが、そういうあたりは微笑ましいなぁ、という感じで読めます。あと、DBにXMLとかを文字列で入れる、みたいな話はJSON型ネイティブサポートとかで解決されるものとかあったりとかするなって思ったりもしました。まあ、このあたり、年長者の人と一緒に読書会でもして、「昔はこうだったけど今はもうこうじゃないよ」とアンラーニングしながらPofEAA本を読むのも良さそうな気がします。</p><iframe sandbox="allow-popups allow-scripts allow-modals allow-forms allow-same-origin" style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=shibukawayosh-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B01B5MX2O2&linkId=9b9628f33caaf7af0ab2e6d7e171fece"></iframe><iframe sandbox="allow-popups allow-scripts allow-modals allow-forms allow-same-origin" style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=shibukawayosh-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B00GRKD6XU&linkId=f551c5e0f7c499cd88dfeec95133d75d"></iframe>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E7%B1%8D/">書籍</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%9B%B8%E8%A9%95/">書評</category>
      
      <category domain="https://future-architect.github.io/tags/DDD/">DDD</category>
      
      <category domain="https://future-architect.github.io/tags/PofEAA/">PofEAA</category>
      
      
      <comments>https://future-architect.github.io/articles/20220610a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GoogleWorkspace SDKのAPIリクエスト間隔は気を付けましょう</title>
      <link>https://future-architect.github.io/articles/20220609a/</link>
      <guid>https://future-architect.github.io/articles/20220609a/</guid>
      <pubDate>Wed, 08 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220609a/googleworkspace.png&quot; alt=&quot;&quot; width=&quot;708&quot; height=&quot;402&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220609a/googleworkspace.png" alt="" width="708" height="402"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG DXユニットの岸下です。2022年2月にキャリア入社して、早4ヶ月経ちました。時が流れるのは早いですね。</p><p>参加しているプロジェクトで、Google Workspace Admin SDKのDirectory APIを使った開発を行いました。</p><p>本記事では、<a href="/articles/20220601a/">失敗談をテーマにした連載</a>として、APIを利用した際に500エラーを頻発させてしまった件について執筆していこうと思います。</p><p>結構あるあるな失敗なので、これから開発に入っていく新入社員・初学者の方にはぜひ読んで頂きたい内容となっております。</p><h2 id="Google-Workspace-Admin-SDKとDirectory-APIについて"><a href="#Google-Workspace-Admin-SDKとDirectory-APIについて" class="headerlink" title="Google Workspace Admin SDKとDirectory APIについて"></a>Google Workspace Admin SDKとDirectory APIについて</h2><p>Google WorkspaceはGoogleが提供する組織向けオンラインアプリケーションセットです。</p><p><a href="https://developers.google.com/admin-sdk">Google Workspace Admin SDK</a>はGoogle Workspaceに存在する情報を取得するための管理者向けSDKになっています。<br>また、<a href="https://developers.google.com/admin-sdk/directory">Directory API</a>はGoogle Workspaceで利用しているドメインのユーザーや繋がっているデバイス、サードパーティアプリケーションを管理したり、取得したりすることができます。</p><h2 id="何をしていたのか"><a href="#何をしていたのか" class="headerlink" title="何をしていたのか"></a>何をしていたのか</h2><p>今回、Google Workspace上でグループ化された情報（グループの人数、グループのメールアドレス、グループメンバーのメールアドレスなど）を取得する必要がありました。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span><p>Google Workspaceのグループ化について</p>  <p>Google Workspaceではアカウントのグルーピングが可能です。これには<a href="https://cloud.google.com/?hl=ja">Google Cloud Platform（GCP）</a>上で、グループに対してIAMロールを付与することができるという恩恵があり、グループに所属しているメンバー全員に対してGCPリソースの権限管理ができます。（例えば、グループAにはGoogle Cloud Storageの管理者権限、グループBにはGoogle Cloud Storageの閲覧権限のみなど）</p></div><h2 id="何が起きたのか"><a href="#何が起きたのか" class="headerlink" title="何が起きたのか"></a>何が起きたのか</h2><h3 id="開発環境"><a href="#開発環境" class="headerlink" title="開発環境"></a>開発環境</h3><ul><li>WSL2</li><li>Go1.18</li></ul><h3 id="リクエスト間隔を考慮しなかったがために、500エラーを乱発"><a href="#リクエスト間隔を考慮しなかったがために、500エラーを乱発" class="headerlink" title="リクエスト間隔を考慮しなかったがために、500エラーを乱発"></a>リクエスト間隔を考慮しなかったがために、500エラーを乱発</h3><p>以下、サンプルコードになります。</p><figure class="highlight golang"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;golang.org/x/oauth2/google&quot;</span></span><br><span class="line">admin <span class="string">&quot;google.golang.org/api/admin/directory/v1&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/api/option&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Group <span class="keyword">struct</span> &#123;</span><br><span class="line">groupEmail       <span class="type">string</span></span><br><span class="line">groupName        <span class="type">string</span></span><br><span class="line">numberOfMembers  <span class="type">int64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GroupMember <span class="keyword">struct</span> &#123;</span><br><span class="line">groupEmail  <span class="type">string</span></span><br><span class="line">memberEmail <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> googleWorkspaceScopesForGroupAndMember = []<span class="type">string</span>&#123;</span><br><span class="line">admin.AdminDirectoryGroupMemberReadonlyScope,</span><br><span class="line">admin.AdminDirectoryGroupReadonlyScope,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// グループのメールアドレス（本来はもっと多い）</span></span><br><span class="line"><span class="comment">// グループのメールアドレスもDirectory APIで取得できるが今回は省略</span></span><br><span class="line"><span class="keyword">var</span> groups = []Group&#123;</span><br><span class="line">&#123;</span><br><span class="line">groupEmail:       <span class="string">&quot;hoge-developer@test.com&quot;</span>,</span><br><span class="line">groupName:        <span class="string">&quot;hoge developer team&quot;</span>,</span><br><span class="line">numberOfMembers: <span class="number">5</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">groupEmail:       <span class="string">&quot;fuga-owner@test.com&quot;</span>,</span><br><span class="line">groupName:        <span class="string">&quot;fuga owner team&quot;</span>,</span><br><span class="line">numberOfMembers: <span class="number">10</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetGroupMember</span><span class="params">()</span></span> ([]GroupMember, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> groupMemberList []GroupMember</span><br><span class="line"><span class="comment">// 取得を行うためのAdmin Serviceを取得</span></span><br><span class="line">srv, err := getService()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;get admin service: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, g := <span class="keyword">range</span> groups &#123;</span><br><span class="line"><span class="keyword">if</span> g.numberOfMembers != <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// この中でDirectory APIを叩いている</span></span><br><span class="line">members, err := createGroupMemberList(srv, g.groupEmail)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;create group member list: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">groupMemberList = <span class="built_in">append</span>(groupMemberList, members...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> groupMemberList, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createGroupMemberList</span><span class="params">(srv *admin.Service, email <span class="type">string</span>)</span></span> ([]GroupMember, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="comment">// APIを叩く</span></span><br><span class="line">rm, err := srv.Members.List(email).Do()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;get member list: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> memberList []GroupMember</span><br><span class="line"><span class="comment">// リスト作成処理</span></span><br><span class="line"><span class="keyword">for</span> _, m := <span class="keyword">range</span> rm.Members &#123;</span><br><span class="line">memberList = <span class="built_in">append</span>(memberList, GroupMember&#123;groupEmail: email, memberEmail: m.Email&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> memberList, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getService</span><span class="params">()</span></span> (*admin.Service, <span class="type">error</span>) &#123;</span><br><span class="line">serviceAccountJSON, err := ioutil.ReadFile(<span class="string">&quot;key/service-account-key.json&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;read service account key: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">config, err := google.JWTConfigFromJSON(serviceAccountJSON, googleWorkspaceScopesForGroupAndMember...)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;authorize service account key: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">config.Subject = <span class="string">&quot;&lt;管理者のメールアドレス&gt;&quot;</span></span><br><span class="line">config.Scopes = googleWorkspaceScopesForGroupAndMember</span><br><span class="line">ctx := context.Background()</span><br><span class="line">srv, err := admin.NewService(ctx, option.WithHTTPClient(config.Client(ctx)))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;get new service: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> srv, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">groupMembers, err := GetGroupMember()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line">        os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, member := <span class="keyword">range</span> groupMembers &#123;</span><br><span class="line"><span class="comment">// 何か処理する</span></span><br><span class="line">fmt.Println(member)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>タイトルの通りなのですが、上記実装では<code>createGroupMemberList(srv, g.groupEmail)</code>にて、リクエスト間隔について全く考慮しておらず、<strong>間髪入れずにAPIへリクエストを送ったことによって500エラーを発生させてしまいました。</strong></p><p>それもそのはずで、<a href="https://developers.google.com/admin-sdk/directory/v1/limits">APIの仕様書</a>を見ると1分あたりの呼び出し制限数が記載されています。</p><blockquote><p>Indicates that the user rate limit has been exceeded. The default value set in the Google Developers Console is 3,000 queries per 100 seconds per IP address.</p></blockquote><h3 id="解決策①：リクエスト間隔に余裕を持たせる"><a href="#解決策①：リクエスト間隔に余裕を持たせる" class="headerlink" title="解決策①：リクエスト間隔に余裕を持たせる"></a>解決策①：リクエスト間隔に余裕を持たせる</h3><p>高速でリクエストを投げつけるとDoSアタックと勘違いされてブロックされる場合もあるのでちゃんと間隔をおいてリクエストを投げましょう。</p><p>以下のように、<code>Sleep</code>を入れてリクエスト間隔に余裕を持たせるのが一番簡単だと思います。</p><figure class="highlight golang"><figcaption><span>main.go (GetGroupMemberでリクエスト時間を調節)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetGroupMember</span><span class="params">()</span></span> ([]GroupMember, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> groupMemberList []GroupMember</span><br><span class="line"><span class="comment">// 取得を行うためのAdmin Serviceを取得</span></span><br><span class="line">srv, err := getService()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;get admin service: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, g := <span class="keyword">range</span> groups &#123;</span><br><span class="line"><span class="keyword">if</span> g.numberOfMembers != <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// Serviceとグループのメールアドレスを渡すことで、メンバー情報を取得</span></span><br><span class="line"><span class="comment">// この中でAPIを叩いている</span></span><br><span class="line">members, err := createGroupMemberList(srv, g.groupEmail)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;create group member list: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">groupMemberList = <span class="built_in">append</span>(groupMemberList, members...)</span><br><span class="line">            <span class="comment">// Sleepを設定</span></span><br><span class="line">time.Sleep(time.Millisecond * <span class="number">250</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> groupMemberList, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="あれ？またリクエストがコケたぞ"><a href="#あれ？またリクエストがコケたぞ" class="headerlink" title="あれ？またリクエストがコケたぞ"></a>あれ？またリクエストがコケたぞ</h3><p>リクエスト間隔を調整したにも関わらず、たまーに500エラーが返ってきます。</p><p><a href="https://stackoverflow.com/questions/26188334/why-do-i-get-503-service-unavailable-errors-using-the-google-cloud-datastore-api">StackOverflow</a>にも同じ現象が起きている人が居て、リクエスト間隔に余裕を持たせていたとしてもGoogle側の何かしらのトラブルによって500エラーでコケるようです。</p><blockquote><p>“You did everything right, but Google is having some trouble handling your request.”<br>（コードは正しく書けているけど、Google側でリクエストを処理しようとした際に何かしらのエラーが起きているみたいよ）</p></blockquote><h3 id="解決策②：指数バックオフを導入する"><a href="#解決策②：指数バックオフを導入する" class="headerlink" title="解決策②：指数バックオフを導入する"></a>解決策②：指数バックオフを導入する</h3><p>こういったケースはどのAPIでもあり得るので、 <strong><a href="https://cloud.google.com/memorystore/docs/redis/exponential-backoff?hl=ja">指数バックオフ</a></strong> を導入しましょう。<br>「指数バックオフ？？数学＋横文字やめて！」となるかもしれませんが、簡単にまとめると「APIへリクエストしたにも関わらず失敗した際に、時間を少しおいてリクエストをもう一度送る」処理になります。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span><p>指数バックオフに関しては本ブログ過去記事でも紹介しております。</p>  <p><a href="/articles/20200121/">スロットリングとの付き合い方</a></p></div><p>先ほどのリクエスト時間に余裕を持たせたうえで以下の変更を施します。</p><figure class="highlight golang"><figcaption><span>main.go（createGroupMemberList内のAPI利用時に指数バックオフを導入）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createGroupMemberList</span><span class="params">(srv *admin.Service, email <span class="type">string</span>)</span></span> ([]GroupMember, <span class="type">error</span>) &#123;</span><br><span class="line">maxRetries := <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> memberList []GroupMember</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= maxRetries; i++ &#123;</span><br><span class="line"><span class="comment">// APIを叩く</span></span><br><span class="line">rm, err := srv.Members.List(email).Do()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">var</span> gerr *googleapi.Error</span><br><span class="line"><span class="keyword">if</span> ok := errors.As(err, &amp;gerr); ok &#123;</span><br><span class="line">                <span class="comment">// エラーコードが500系列であれば、リトライ</span></span><br><span class="line"><span class="keyword">if</span> gerr.Code &gt;= <span class="number">500</span> &#123;</span><br><span class="line">                    <span class="comment">// 繰り返しの数を用いて待ち時間を生成</span></span><br><span class="line">waitTime := <span class="type">int</span>(math.Pow(<span class="number">2</span>, <span class="type">float64</span>(i+<span class="number">1</span>)) * <span class="type">float64</span>(<span class="number">100</span>))</span><br><span class="line">fmt.Println(waitTime)</span><br><span class="line">                    <span class="comment">// 待つ</span></span><br><span class="line">time.Sleep(time.Millisecond * time.Duration(waitTime))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;get member list: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// リスト作成処理</span></span><br><span class="line"><span class="keyword">for</span> _, m := <span class="keyword">range</span> rm.Members &#123;</span><br><span class="line">memberList = <span class="built_in">append</span>(memberList, GroupMember&#123;groupEmail: email, memberEmail: m.Email&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> memberList, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;reaching max retries in createGroupMemberList&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>リトライ数などはべた書きですが、関数として指数バックオフを定義して複数のAPIで共通で利用できるようにしておくと良さそうですね。</p><p>こうすることで、たまーにコケるエラーに対して頑健なリクエストをすることが可能になります。<br>（というか、<a href="https://developers.google.com/admin-sdk/directory/v1/limits">APIの仕様書</a>にも指数バックオフ導入しといてねって書いてありますね…）</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span><p>GoogleAPIのエラーコード処理についても本ブログ過去記事で紹介しております。）</p>  <p>こちらを参考にすれば、AWS向けにも導入可能になります。</p>  <p><a href="/articles/20200523/">Go Tips連載6: Error wrappingされた各クラウドSDKの独自型エラーを扱う</a></p></div><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>サードパーティのAPIを使う処理を書く場合は、</p><ul><li>リクエスト間隔は気をつけましょう（APIの仕様書をちゃんと読みましょう）。</li><li>指数バックオフを導入しておきましょう。</li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/GCP/">GCP</category>
      
      <category domain="https://future-architect.github.io/tags/GoogleWorkspace/">GoogleWorkspace</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%B9%E3%83%AD%E3%83%83%E3%83%88%E3%83%AA%E3%83%B3%E3%82%B0/">スロットリング</category>
      
      
      <comments>https://future-architect.github.io/articles/20220609a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>ユーザー要望で要件が増えてく〜アジャイル開発での落とし穴〜</title>
      <link>https://future-architect.github.io/articles/20220608a/</link>
      <guid>https://future-architect.github.io/articles/20220608a/</guid>
      <pubDate>Tue, 07 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、Technology Innovation Group所属の久保です。&lt;/p&gt;
&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Technology Innovation Group所属の久保です。</p><p><a href="/articles/20220601a/">失敗談をテーマにした連載</a>の6本目です。</p><p>自分が担当した業務でのアジャイル開発での失敗について反省したいと思います。選定したアーキテクチャとアジャイル開発の相性があまりよくなく苦労しました。これはアジャイルの本にはなかった知見でした。</p><h1 id="アジャイル開発ってなに？"><a href="#アジャイル開発ってなに？" class="headerlink" title="アジャイル開発ってなに？"></a>アジャイル開発ってなに？</h1><p>Wikipediaにはこのように書いてありました。</p><blockquote><p>ソフトウェア工学におけるアジャイルソフトウェア開発 (アジャイルソフトウェアかいはつ、英: agile software development) は、人間・迅速さ・顧客・適応性に価値を置くソフトウェア開発である[1]。典型的なアジャイルソフトウェア開発では、チーム主導で設計・実装・デプロイを短期間に繰り返してユーザーが得た価値を学習し適応する、すなわちトライアルアンドエラーで開発が行われる。アジャイルソフトウェア開発を可能にする開発手法にはエクストリーム・プログラミングやスクラムなどがある。</p></blockquote><p>引用:<a href="https://ja.wikipedia.org/wiki/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA">アジャイルソフトウェア開発</a></p><h1 id="アジャイル開発のメリットと落とし穴"><a href="#アジャイル開発のメリットと落とし穴" class="headerlink" title="アジャイル開発のメリットと落とし穴"></a>アジャイル開発のメリットと落とし穴</h1><h2 id="メリット"><a href="#メリット" class="headerlink" title="メリット"></a>メリット</h2><p>上記の様にアジャイル開発では短いスパンでアプリをリリースしフィードバックを頂きながら開発を進めるというものです。</p><p>メリットとして短いスパンでフィードバックを貰うことで顧客の求めるものと出来上がるもののイメージがあまりブレず、手戻りなどが少なく開発を行えるという点があります。そのためアジャイル開発は仕様変更に柔軟に対応できる開発方法と言われています。自分のプロジェクトでは2週間に1回アプリケーションをリリースしフィードバックを頂き開発をしていました。</p><h2 id="ユーザー要望でデータ表示条件の増加"><a href="#ユーザー要望でデータ表示条件の増加" class="headerlink" title="ユーザー要望でデータ表示条件の増加"></a>ユーザー要望でデータ表示条件の増加</h2><p>ではなぜアジャイル開発で失敗したのか？自分の失敗を話したいと思います。私が作ったシステムはIoTデバイスで取得した日次のデータをKVSに格納しアプリケーションに表示するというものでした。</p><p>開発初期から表示するデータの要件定義は以下のように変化していきました。</p><ol><li>取得したデータを閲覧できるようにする</li><li>取得したデータをソートして閲覧できるようにする</li><li>取得したデータをソートして閲覧できるようにする。IoTデバイスがデータの取得に失敗した時は失敗したことがわかるように表示する</li><li>取得したデータを状況毎に表示を変えソートして閲覧できるようにする。IoTデバイスがデータの取得に失敗した時は失敗したことがわかるように表示する</li></ol><p>４は少し分かりづらいですがIoTデバイスが故障している場合や電池切れ、電源が入っていないものは「IoTデバイスの状態」を表示するという仕様の追加でした。</p><h2 id="落とし穴"><a href="#落とし穴" class="headerlink" title="落とし穴"></a>落とし穴</h2><p>今回使ったKVSではソート条件を追加するにはインデックスの追加が必要であり、これはコスト増加することに繋がります。またKVSでは検索条件の追加やソート条件の更新を行う度に、データマイグレーションが必要となります。日次データを取り扱っている為、データ量が多くデータマイグレーションを行うこと事が非常に大変でした。</p><p>このようにフィードバックを受ける度に要件が増えることで工数がどんどん増えていってしまいました。</p><img src="/images/20220608a/アジャイルでの失敗.jpg" alt="アジャイルでの失敗.jpg" width="915" height="460" loading="lazy"><p>初期の要件定義の時点ではユーザーストーリーなどの仮説が荒く、詰めきれない場面が多く追加要望が来る度に仕様の変更を余儀なくされていました。一次情報保存先のKVSとは別に、閲覧用にデータ分析用のRDBMSを追加するなど、要件変更に耐えうる構成などもできましたが、コストの増加の面から採用を見送りました。</p><p>初期の段階である程度仕様を詰めたり、途中のフィードバック時に仕様を落とし込めていれば工数はもう少し下げれたと考えています。</p><h1 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h1><p>自分のアジャイル開発での失敗談を書いてみました。</p><p>DBMSのアーキテクチャやデータマイグレーションが変更の容易さに与える影響など、クラウド時代に増えてきた特徴の強いDBMSを活用する場合に、ある程度変更の範囲を予測するなり、事前に合意するなりする必要があると感じました。<br>同じようなミスで苦しむ人が少なくなりますように。</p><p>次の<a href="/articles/20220601a/">失敗談をテーマにした連載</a>は、岸下さんの<a href="/articles/20220609a/">GoogleWorkspace SDKのAPIリクエスト間隔は気を付けましょう</a>でし・</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DevOps/">DevOps</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB/">アジャイル</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      
      <comments>https://future-architect.github.io/articles/20220608a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>AWS Lambdaの初期化処理と初期化タイミングの考慮不足によるはまりどころ</title>
      <link>https://future-architect.github.io/articles/20220607a/</link>
      <guid>https://future-architect.github.io/articles/20220607a/</guid>
      <pubDate>Mon, 06 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;こんにちは、TIGの辻です。&lt;a href=&quot;/articles/20220601a/&quot;&gt;失敗談をテーマにした連載&lt;/a&gt;の5本目です。&lt;/p&gt;
&lt;p&gt;AWS</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>こんにちは、TIGの辻です。<a href="/articles/20220601a/">失敗談をテーマにした連載</a>の5本目です。</p><p>AWS Lambda（以下Lambda）は様々なユースケースで利用できる、なにかと便利で強力なサービスです。本ブログでも以下のようにLambdaに関するたくさんの記事が投稿されています。</p><ul><li><a href="/articles/20220510a/">Lambda Function URLs をGoでお試し。実行時間の上限（タイムアウト）やWeb API構築周りで気になること</a></li><li><a href="/articles/20220516a/">Lambda×Go並列処理で100万回APIを呼び出す</a></li><li><a href="/articles/20210914a/">LambdaをカスタムDockerランタイムで開発する方法</a></li></ul><p>私もLambdaが好きで、Lambdaの実行時間制約以内で終了する処理であれば、初手の候補の一つとしてLambdaを考えます。</p><p>そんなLambdaですが、予約済同時実行数<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>を1に制限して使っていたときに、初期化処理と初期化タイミングの考慮不足により、はまったことがありました。本記事ではLambdaの初期化処理についておさらいした後、はまったケースの事例や原因、対応した方法を紹介します。</p><h2 id="Lambdaのライフサイクルと初期化処理"><a href="#Lambdaのライフサイクルと初期化処理" class="headerlink" title="Lambdaのライフサイクルと初期化処理"></a>Lambdaのライフサイクルと初期化処理</h2><p>Lambda実行環境のライフサイクルは3つに分かれています。INITとINVOKEとSHUTDOWNです。</p><img src="/images/20220607a/Overview-Successful-Invokes.png" alt="Overview-Successful-Invokes.png" width="1200" height="225" loading="lazy"><p><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/lambda-runtime-environment.html">https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/lambda-runtime-environment.html</a> より</p><p>INITフェーズでは、関数インスタンス（Lambda関数が実行される環境のこと）作成やハンドラ関数外に実装されている初期化処理が行われます。たとえばGoの場合、AWSのサンプルにある <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> 以下のような <code>init()</code> の処理はINITフェーズで行われます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;log&quot;</span></span><br><span class="line">        <span class="string">&quot;github.com/aws/aws-lambda-go/lambda&quot;</span></span><br><span class="line">        <span class="string">&quot;github.com/aws/aws-sdk-go/aws/session&quot;</span></span><br><span class="line">        <span class="string">&quot;github.com/aws/aws-sdk-go/service/s3&quot;</span></span><br><span class="line">        <span class="string">&quot;github.com/aws/aws-sdk-go/aws&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> invokeCount = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> myObjects []*s3.Object</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">        svc := s3.New(session.New())</span><br><span class="line">        input := &amp;s3.ListObjectsV2Input&#123;</span><br><span class="line">                Bucket: aws.String(<span class="string">&quot;examplebucket&quot;</span>),</span><br><span class="line">        &#125;</span><br><span class="line">        result, _ := svc.ListObjectsV2(input)</span><br><span class="line">        myObjects = result.Contents</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">LambdaHandler</span><span class="params">()</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line">        invokeCount = invokeCount + <span class="number">1</span></span><br><span class="line">        log.Print(myObjects)</span><br><span class="line">        <span class="keyword">return</span> invokeCount, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        lambda.Start(LambdaHandler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>データベースとの接続などの、実行タイミングに依存しない処理を初期化処理として実施し、グローバル変数として再利用できるようにすることはパフォーマンスの観点から有効です。ハンドラの関数外に宣言されているグローバル変数は、Lambdaの関数インスタンスの一部として保存され、その後のリクエストで再利用されることがあるためです。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p><p>なお、上のサンプルで <code>LambdaHandler()</code> に該当するハンドラ関数内の処理はINVOKEフェーズで実行されます。</p><h2 id="はまりケース"><a href="#はまりケース" class="headerlink" title="はまりケース"></a>はまりケース</h2><p>はまりケースでもパフォーマンスを考慮して、TCP通信の確立をLambdaの初期化処理として実装していました。構成はざっくり以下のようなクライアントサーバモデルです。</p><ul><li>対向システム（サーバ）<ul><li>ある処理を受け付けるサーバがある。スケールアウトはしない</li><li>サーバ制約上、複数のクライアントから同時に接続することはできない</li></ul></li><li>Lambda（クライアント）<ul><li>対向システムとTCP通信して処理を行う</li><li>同期呼び出しLambdaである</li><li>Lambdaは複数起動しても通信確立できないため、予約済同時実行数を1としていた</li><li>TCP通信するための変数はグローバル変数として宣言し、初期化処理で通信を確立するようにしていた</li></ul></li></ul><p>対向システムの制約と（詳細は割愛しますが）非機能要件上、Lambdaの予約済同時実行数を1で絞ることで、Lambdaが2つ以上同時実行されないようにしている、という点がトリッキーな感じです。<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup></p><p>このとき、ロングランテスト<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>中に、稀に以下の問題となる事象を観測することがありました。</p><ul><li>あるタイミングで一定時間Lambdaと対向システムのTCP接続が確立できず、処理が失敗する</li><li>対向システムのサーバは電源断などは起きておらず、通常通り通信できる状態であった</li><li>通信できなくなるLambda起動の前に、別の関数インスタンスによるTCP通信の初期化処理を行っているログがあった</li><li>先に通信を確立した関数インスタンスではハンドラ関数内の処理は行われていない</li></ul><p>イメージ図は以下になります。</p><img src="/images/20220607a/before.png" alt="対向システムが同時接続数が1" width="872" height="462" loading="lazy"><p>ログから原因は以下のように推測しています。</p><ul><li>Lambdaの予約済同時実行数は1としていたものの、AWS側での関数インスタンスの作成が必ずしも1つとなるわけではない</li><li>なんらかの理由により、Lambdaの実行環境のライフサイクルを管理しているAWS側で関数インスタンスが作成された</li><li>関数インスタンス作成時にINITフェーズが起動し、意図しないタイミングでTCP通信の確立がなされたが、Lambdaのハンドラ関数は呼び出されなかった</li><li>先に作成されていた関数インスタンスでTCP接続が確立されていたため、後から作成した別の関数インスタンスではTCP通信を確立できず、実行に失敗した</li></ul><h2 id="対応"><a href="#対応" class="headerlink" title="対応"></a>対応</h2><p>本ケースではTCP通信の確立は初期化処理ではなく、Lambdaハンドラ関数内で行うようにしました。意図しないタイミングで初期化処理が行われ、対向システムと通信が確立されることを防ぐためです。</p><p>結果として、この対応以降は同様のTCP通信が確立できなくなる事象は発生しておらず、期待した動作を得ることができました。</p><img src="/images/20220607a/after.png" alt="毎回TCPコネクションをオープン・クローズする" width="872" height="462" loading="lazy"><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>予約済同時実行数を1で動かしていたケースで、Lambdaの初期化処理と初期化タイミングに関するはまった内容を紹介しました。予約済同時実行数を1とするケースはあまりないとは思いますが、このようにトリッキーな状況で動作する場合、特にLambdaの初期化処理と初期化タイミングに注意しましょう。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></p><p><a href="/articles/20220601a/">失敗談連載2022</a>の次は、久保さんの<a href="/articles/20220608a/">ユーザー要望で要件が増えてく〜アジャイル開発での落とし穴〜</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/golang-handler.html">https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/golang-handler.html</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;"><a href="https://aws.amazon.com/jp/lambda/faqs/">https://aws.amazon.com/jp/lambda/faqs/</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;"><a href="https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/configuration-concurrency.html">https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/configuration-concurrency.html</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="vertical-align: top; padding-right: 10px;">6.</span><span style="vertical-align: top;">その他、実行タイミングに依存するデータはLambdaのグローバル変数に保存するべきではない、というような一般的な注意ポイントもありますが、本記事では割愛します。詳細は <a href="https://aws.amazon.com/jp/blogs/news/operating-lambda-performance-optimization-part-2/">https://aws.amazon.com/jp/blogs/news/operating-lambda-performance-optimization-part-2/</a> などを参照ください。</span><a href="#fnref:6" rev="footnote"> ↩</a></li><li id="fn:7"><span style="vertical-align: top; padding-right: 10px;">7.</span><span style="vertical-align: top;">本ケースでは仕方がなく予約済同時実行数を1と設定しましたが、本来であればこうならないように設計を工夫したいところです。</span><a href="#fnref:7" rev="footnote"> ↩</a></li><li id="fn:8"><span style="vertical-align: top; padding-right: 10px;">8.</span><span style="vertical-align: top;"><a href="https://e-words.jp/w/%E3%83%AD%E3%83%B3%E3%82%B0%E3%83%A9%E3%83%B3%E3%83%86%E3%82%B9%E3%83%88.html">https://e-words.jp/w/ロングランテスト.html</a></span><a href="#fnref:8" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/Lambda/">Lambda</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      <category domain="https://future-architect.github.io/tags/TCP/">TCP</category>
      
      
      <comments>https://future-architect.github.io/articles/20220607a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>フューチャー夏のインターンシップ2022（Engineer Camp）の募集を開始しました！</title>
      <link>https://future-architect.github.io/articles/20220606b/</link>
      <guid>https://future-architect.github.io/articles/20220606b/</guid>
      <pubDate>Sun, 05 Jun 2022 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220606b/23855886_s.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;427&quot; loading=&quot;lazy&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220606b/23855886_s.jpg" alt="" width="640" height="427" loading="lazy"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは、真野です。</p><p>フューチャーのサマーインターン2022 Summer Engineer Camp🌞⛺🏃の募集が始まりました。</p><p>フューチャーでは夏のインターンシップは2つのコースがあります。</p><ul><li><strong>Engineer Camp</strong>: エンジニア向けのプログラミング主体のプロジェクト業務を体験するコース</li><li><strong>Project Camp</strong>: だれでも応募OKのプロジェクト業務を体験するコース</li></ul><p>それぞれに良いところがありますが、ここでは Engineer Camp のメニューについて紹介します。</p><p>Project Campに興味がある方は、下記の記事をご覧ください。</p><ul><li><a href="https://note.com/future_event/n/nb94191ebdd53">【対象：新卒】サマーインターン＜Project Camp＞｜採用イベント情報 | フューチャー株式会社｜note</a></li></ul><h2 id="実施概況"><a href="#実施概況" class="headerlink" title="実施概況"></a>実施概況</h2><ul><li>期間<ul><li>8月22日（月）～9月16日（金）</li><li>原則は土日祝日を除く、週5日/8時間の勤務。期間中、数日程度の欠席は調整可能</li><li>週3～4日でのインターンを希望される場合は理由などを伺い、要相談とさせてください</li></ul></li><li>報酬<ul><li>時給1500円/H。1日あたり12,000円（※8時間勤務を行った場合）</li><li>実際の勤務時間に基づいて支給いたします</li></ul></li><li>交通費<ul><li>規定に沿って来社時の交通費を支給します。<ul><li>※原則リモートですが、初日および最終日は出社いただく可能性がございます</li><li>※コースで出社が必要になる場合がございます。募集要項に記載をしておりますのでご確認ください</li><li>※来社が可能な状況だと判断した場合には、オフィスにて数回程度勤務する可能性があります</li></ul></li></ul></li></ul><h2 id="選考プロセス、選考スケジュール"><a href="#選考プロセス、選考スケジュール" class="headerlink" title="選考プロセス、選考スケジュール"></a>選考プロセス、選考スケジュール</h2><p>次の流れで選考を行います。</p><ol><li>マイページ登録（※まずはこちらをお願いします！）<ul><li>登録は <strong><a href="https://job.axol.jp/jn/s/future_24/entry/">こちら</a></strong> から</li></ul></li><li>エントリーシート提出 &amp; プログラミングテスト<ul><li>テストは全5問。各問1~2時間程度の見込み</li><li><strong>締切: 2022年6月26日（日）23時59分まで</strong></li></ul></li><li>面接<ul><li>リモートにて1回。1h程度を想定</li></ul></li></ol><h2 id="Engineer-Campのポイント"><a href="#Engineer-Campのポイント" class="headerlink" title="Engineer Campのポイント"></a>Engineer Campのポイント</h2><p>フューチャーのインターンシップをお勧めする理由を3つ上げさせてください。</p><ul><li><strong>実際の業務にメンバーとして関わることができる</strong><ul><li>インターン用のタスクをしてもらうのではなく、実プロジェクトにアサインされ、リアル業務を行えます。個人では扱うことのできない技術にも触れられます。また、チームで開発する際の苦労や工夫を知ることもできるのは大きいと思います。当然、社会人になってエンジニアとしてはたらくイメージを持つにはうってつけです</li></ul></li><li><strong>フューチャーの技術部隊のメンバーがメンターのためサポートが手厚い</strong><ul><li>実プロジェクトのアサインと聞いて不安に思われた方も多いと思いますが安心してください。フューチャーの各技術分野のスペシャリストがメンターとしてサポートします。社員との距離感も近く、フラットな社風なので、気軽に質問をしやすい環境です。フューチャーの技術力の高さを体感いただきつつ、ご自身のスキルも伸ばしてください。Slackをフル活用しているので疑問を呟くと、きっとすぐに先輩社員がアドバイスしてくれます</li></ul></li><li><strong>4週間のプログラムで成長を実感できる</strong><ul><li>フューチャーの仕事を体験できるように4週間の期間を設けました。長いよ！と思われる方もいるかもしれませんが、実は2週間のプログラムを組んでいたとき、「終わってみれば短すぎた。慣れてきたくらいで終了なのがもったいない。もう少し期間があればもっと深く入ることができるのに！」という声を多数聞きました。その反省を活かし、より深く・より面白く・より満足できるように期間を調整して4週間になりました</li></ul></li></ul><p>他にも受け入れ先プロジェクトごとに、様々な工夫をしています。</p><h2 id="Engineer-Camp-のコース紹介"><a href="#Engineer-Camp-のコース紹介" class="headerlink" title="Engineer Camp のコース紹介"></a>Engineer Camp のコース紹介</h2><p>Engineer Campではバラエティ豊かな14コースを用意しています。それぞれに特徴があり、使う技術も様々です。すべてのコースに共通するスキル要件は3つありますますが、非常にベーシックな内容です。</p><ul><li>1つ以上のプログラミング言語での開発経験（学校、プライベート問わず）</li><li>Slackなどのチャットを用いた非同期コミュニケーション</li><li>主体的にコミュニケーションを取りながら進めていただける方</li></ul><p>こに加えて、各受け入れプロジェクトごとに内容と、応募条件をまとめました。ご自身の強みを活かせるコースや興味のあるコースがあるかと思います。</p><div class="scroll"><table><thead><tr><th>No</th><th>タイトル</th><th>説明</th><th>応募条件（必須）</th></tr></thead><tbody><tr><td>1</td><td>サブスクサービスのWebアプリ開発</td><td>BtoBサブスクリプションモデル最前線！メディア業界を支えるWebアプリケーションを開発する</td><td>・フロントエンド開発経験</td></tr><tr><td>2</td><td>RustでSQLフォーマッタ開発</td><td>大規模システム開発のソースコード品質向上を目的に、SQLのフォーマッタをRustで開発する</td><td>・Git利用経験<br>・構文解析の知識<br>  (AST/lexer/parser/printer等の用語がわかること)<br>・SQL構文の理解（初歩レベルで良い）</td></tr><tr><td>3</td><td>社内設計開発ツールのデータ分析</td><td>設計開発ツールのユーザ行動データを分析し、プロジェクト品質向上のためのデータ可視化を実現する</td><td>・Git利用経験<br>・Python・R・SQLでのデータ解析経験<br>・未知のデータモデルに対する理解力<br>（不明点を対話を通じて把握する力）</td></tr><tr><td>4</td><td>鉄道業界の to C 向け Web アプリケーション開発</td><td>沿線住民を対象としたサービス体験型プラットフォームの機能拡張を担当する(仕様を検討する部分から、フロントエンド、バックエンド開発まで幅広く経験できます！)</td><td>・Git利用経験<br>・フロントエンド開発経験または<br>  RDBを用いた静的言語でのバックエンド開発経験</td></tr><tr><td>5</td><td>メディアサービスのID連携プラットフォーム構築</td><td>クラウド構築から開発まで、近年需要の増加しているID連携プラットフォームの構築に携わる</td><td>・Git利用経験<br>・AWS利用経験</td></tr><tr><td>6</td><td>大手メディアグループの最先端データ分析基盤の構築</td><td>最新アーキテクチャによるデータ分析基盤を構築する</td><td>・SQL利用経験<br>・AWS or GCP利用経験</td></tr><tr><td>7</td><td>市場規模7000億超の外食業における、顧客全社DX施策の仮説立てとそれに向けたシステムとデータ分析</td><td>顧客の業務・システム・データの分析をおこない、それを取り巻くマーケット調査を踏まえ今後進むべき施策を策定する</td><td>・SQL構文の理解（結合・絞り込み・ソート等）<br>・パワーポイント等での資料作成経験</td></tr><tr><td>8</td><td>不動産会社向け新規サービスの検討・プロト開発</td><td>要件定義からリリースまでを一貫して体験する (提案いただいたアイデアが新規サービスとして採用される可能性があります！)</td><td>・フロントエンド開発経験</td></tr><tr><td>9</td><td>ユーザーと企業をつなぐ物流コールセンターを支える仕組み・システム化考案</td><td>あらたなコールセンターの企画立案を体験する</td><td>・間違ってて全然いいので思ったことを発言できること<br>・IPAの<a href="https://www.ipa.go.jp/files/000004568.pdf">この資料</a>を読了すること</td></tr><tr><td>10</td><td>プロパンガス配送計画の最適化に向けた数値データ解析</td><td>超肉体労働なプロパンガス配送員のしごとをDXで効率化する。</td><td>・Git利用経験<br>・Go言語に興味がある方<br>・バックエンド開発に興味のある方</td></tr><tr><td>11</td><td>プロパンガス設備点検の管理アプリケーション開発</td><td>安全第一なプロパンガス保安点検員のしごとをDXで最適化する</td><td>・Git利用経験<br>・Go言語に興味がある方<br>・<strong>大崎オフィスへ出社可能な方</strong></td></tr><tr><td>12</td><td>機械学習プラットフォーム開発</td><td>エンジニアリング力で機械学習モデル開発を加速する</td><td>・基本的なLinuxコマンドの操作経験<br>・Linuxサーバの構築・運用経験（プライベート可）</td></tr><tr><td>13</td><td>画像認識AIの開発</td><td>画像認識AIの社会実装を実現する</td><td>・Pythonでの画像処理の経験<br>・TensorflowやPytorch等を用いたNN構築経験<br>・論文を読んでNNなどの実装ができること<br>・基本的なLinuxコマンドの操作経験</td></tr><tr><td>14</td><td>ヘルスケアアプリの開発</td><td>コンシューマ向けの新規ヘルスケアサービスをつくる</td><td>・フロントエンド、バックエンド開発経験</td></tr></tbody></table></div><p>続けてコースごとの詳細です。 <code>応募条件(あれば歓迎）</code> を見れば、大体どのような技術で開発を行うかが分かると思います。</p><h3 id="1-サブスクサービスのWebアプリ開発"><a href="#1-サブスクサービスのWebアプリ開発" class="headerlink" title="1. サブスクサービスのWebアプリ開発"></a>1. サブスクサービスのWebアプリ開発</h3><p>メディア業界の業務を支えるWebアプリケーションサービスの開発を通じて、サブスクリプション型サービスにおけるチーム開発を経験します。チームで開発するために必要なスキルや、大規模システムのアーキテクチャを知る、実践レベルのプログラミングスキルが身につきます。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・フロントエンド開発経験<br>（JavaScript/TypeScriptを用いたWeb画面の開発経験）</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・Git利用経験<br>・Vue.js開発経験</td></tr><tr><td>募集人数</td><td>2名</td></tr><tr><td>こんな人にオススメ</td><td>・メディア業界を支える技術に興味がある人<br>・フューチャー自身が手掛けるSaaSサービスの裏側に興味がある人</td></tr></tbody></table></div><h3 id="2-RustでSQLフォーマッタ開発"><a href="#2-RustでSQLフォーマッタ開発" class="headerlink" title="2. RustでSQLフォーマッタ開発"></a>2. RustでSQLフォーマッタ開発</h3><p>RustでSQLフォーマッタを作るためRust製パーサ・ジェネレータ/パーサの調査・検証、あるいはパーサを自作していただきます※インターンシップ参加者のレベルに合わせて内容レベル調整を行う想定です。</p><p>大規模エンタープライズシステム開発ではデータモデルの複雑さからSQLは欠かせません。※フューチャーではそれらを支えるためSQLコーディング規約やSQL実行ライブラリ等をOSSとして公開しています。</p><ol><li><a href="https://future-architect.github.io/coding-standards/documents/forSQL/SQL%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E8%A6%8F%E7%B4%84%EF%BC%88Oracle%EF%BC%89.html">SQLコーディング規約 | Future Enterprise Coding Standards</a></li><li><a href="https://future-architect.github.io/uroborosql-doc/">uroboroSQL</a></li><li><a href="https://github.com/future-architect/uroboroSQL-formatter">future-architect/uroboroSQL-formatter: Beautiful SQL Formatter</a></li></ol><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Git利用経験<br>・構文解析の知識(AST/lexer/parser/printer等の用語がわかること)<br>・SQL構文の理解（初歩レベルで良い）</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・Git利用経験<br>・構文解析の経験(自作 or ライブラリ問わず)<br>・Rust利用経験</td></tr><tr><td>募集人数</td><td>1-2名</td></tr><tr><td>こんな人にオススメ</td><td>・構文解析に興味がある方<br>・チームの品質/生産性を上げる手法に興味がある方・<br>・Rustにチャレンジしたい方</td></tr></tbody></table></div><h3 id="3-社内設計開発ツールのデータ分析"><a href="#3-社内設計開発ツールのデータ分析" class="headerlink" title="3. 社内設計開発ツールのデータ分析"></a>3. 社内設計開発ツールのデータ分析</h3><p>フューチャーでは大規模システムの設計品質向上のために設計開発ツールを開発・提供しています。利用プロジェクト増加に伴いデータが蓄積されてきたため、マネージャー向けダッシュボードを検討しています。本コースでは蓄積した利用者の行動データを分析し、プロジェクト運営に役立つビジュアライゼーションの検討・実装をテーマにしています。</p><p>プロジェクト品質をあげるようなインテリジェントなリスク検知、統計値の提供を想定していますが、ゼロベースでのアイデアを期待しています。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Git利用経験<br>・Python・R・SQLでのデータ解析経験<br>・未知のデータモデルに対する理解力（不明点を対話を通じて把握する力）</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・PowerBI等のビジュアライゼーション経験<br>・SQLでのデータ解析経験(集合関数、分析関数レベル)</td></tr><tr><td>募集人数</td><td>1-2名</td></tr><tr><td>こんな人にオススメ</td><td>・ビジュアライズ手法に興味がある方<br>・行動分析を行いたい方</td></tr></tbody></table></div><h3 id="4-鉄道業界の-to-C-向け-Web-アプリケーション開発"><a href="#4-鉄道業界の-to-C-向け-Web-アプリケーション開発" class="headerlink" title="4. 鉄道業界の to C 向け Web アプリケーション開発"></a>4. 鉄道業界の to C 向け Web アプリケーション開発</h3><p>実社会に公開しているサービスの改善を実施します。正解のない中で、より良いサービス、より良いサービス運用のために出来ることを考え、自走する力が身につきます。</p><p>技術領域はモダン、社員は若手中心、開発・コミュニケーション速度が求められる環境で、爆発的な成長を促進します。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Git利用経験<br>・フロントエンド開発経験または<br>  RDBを用いた静的言語でのバックエンド開発経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・Vue.js, Goの利用経験<br>・AWS利用経験</td></tr><tr><td>募集人数</td><td>2-4名</td></tr><tr><td>こんな人にオススメ</td><td>・本番稼働しているtoC向けのサービス開発に触れたい方<br>・フロントエンド～バックエンド～インフラまで、幅広く技術領域を体験したい方</td></tr></tbody></table></div><h3 id="5-メディアサービスのID連携プラットフォーム構築"><a href="#5-メディアサービスのID連携プラットフォーム構築" class="headerlink" title="5. メディアサービスのID連携プラットフォーム構築"></a>5. メディアサービスのID連携プラットフォーム構築</h3><p>複数サービスを展開している企業様のサービス間のIDや情報連携を実現するプラットフォームの構築がメインとなります。同時にエンドユーザーが直接利用するサービスも構築しますので、クラウドインフラだけでなく、UIやアプリケーションの開発まで幅広い領域を経験したい方は是非ご応募ください。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Git利用経験<br>・AWS利用経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・Vue.js, Goの利用経験<br>・SQL利用経験<br>・CI/CD環境の構築、運用経験</td></tr><tr><td>募集人数</td><td>1名</td></tr><tr><td>こんな人にオススメ</td><td>・セキュリティと使い勝手のバランスを取ることに興味がある方<br>・フロントエンド～バックエンド～インフラまで、幅広く技術領域を体験したい方</td></tr></tbody></table></div><h3 id="6-大手メディアグループの最先端データ分析基盤の構築"><a href="#6-大手メディアグループの最先端データ分析基盤の構築" class="headerlink" title="6. 大手メディアグループの最先端データ分析基盤の構築"></a>6. 大手メディアグループの最先端データ分析基盤の構築</h3><p>誰もが知っている某グループ企業のデータ分析基盤を構築しています。通常のWebアプリケーションとは一風違った考え方、開発手法となるので、特にデータ分析分野にご興味がある方におすすめです。</p><p>また今年がファーストリリースとなるので、技術面だけでなく、新規サービスの立ち上げに際するリアルな空気を感じていただけると考えています。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・SQL利用経験<br>・AWS or GCP利用経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・GASの開発経験</td></tr><tr><td>募集人数</td><td>1名</td></tr><tr><td>こんな人にオススメ</td><td>・データ分析に興味がある方<br>・データ基盤の構築に興味がある方</td></tr></tbody></table></div><h3 id="7-市場規模7000億超の外食業における、顧客全社DX施策の仮説立てとそれに向けたシステムとデータ分析"><a href="#7-市場規模7000億超の外食業における、顧客全社DX施策の仮説立てとそれに向けたシステムとデータ分析" class="headerlink" title="7. 市場規模7000億超の外食業における、顧客全社DX施策の仮説立てとそれに向けたシステムとデータ分析"></a>7. 市場規模7000億超の外食業における、顧客全社DX施策の仮説立てとそれに向けたシステムとデータ分析</h3><p>誰もが好きで行ったことのある外食業のお客様の、全社DX計画を策定します。サービス開発やアプリケーション構築の大前段である、一番最初のステップを経験していただきます。顧客の保有しているサービス／システム／データを整理し、分析し、仮説を立て、今後進むべき方向性を策定しお客様へ提案を目指します。具体的には、以下のいずれか（または複数）を実施いただきます。</p><ol><li><strong>全社DX計画策定支援（非開発）</strong><ul><li>顧客の業務／システムを整理し、現サービス／システムの整理とあるべきサービス像の仮説立て、簡易測定をおこないます。</li></ul></li><li><strong>データ分析・可視化・ダッシュボード作成（含開発）</strong><ul><li>顧客のPOSデータ／行動データを受領し、分析し、潜在課題・顕在課題を立て打ち手を考えます。</li></ul></li><li><strong>顧客へのプレゼンテーション</strong><ul><li>1,2を踏まえ、完成度によっては顧客への直接提案・ディスカッションの場を設定します。</li></ul></li></ol><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・SQL構文の理解（結合・絞り込み・ソート等）<br>・パワーポイント等での資料作成経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・SQL利用経験（分析関数）<br>・Python・R・SQLでのデータ解析経験<br>・データの可視化（BIダッシュボード・グラフ作成）</td></tr><tr><td>募集人数</td><td>1-2名</td></tr><tr><td>こんな人にオススメ</td><td>・サービス開発のド頭から経験したい方<br>・プロダクト開発がどう始まるか知りたい方</td></tr></tbody></table></div><h3 id="8-不動産会社向け新規サービスの検討・プロト開発"><a href="#8-不動産会社向け新規サービスの検討・プロト開発" class="headerlink" title="8. 不動産会社向け新規サービスの検討・プロト開発"></a>8. 不動産会社向け新規サービスの検討・プロト開発</h3><p>私たちは、日本の防災力・事業継続力を底上げする新規事業の全体推進支援を行っています。その一環として、フューチャー内部も新規サービスの検討を進めており、インターンシップでは下記2つのどちらかを実施していただきたいと考えています。</p><ol><li><strong>新規サービスの機能提案・開発</strong><ul><li>現在想定している新規サービスに必要な機能を提案し、実際に開発まで行っていただきます。</li></ul></li><li><strong>新規サービスで未検討のアイディアを深堀り、プロト作成</strong><ul><li>新規サービスのアイディアの深掘りと必要な機能の提案を行ったのち、実際に開発まで行っていただきます。</li></ul></li></ol><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・フロントエンド開発経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・新規サービス開発に興味がある方<br>・Vue.js利用経験</td></tr><tr><td>募集人数</td><td>1名</td></tr><tr><td>こんな人にオススメ</td><td>・サービス開発に興味がある方<br>・プロダクトマネージャーに興味がある方</td></tr></tbody></table></div><h3 id="9-ユーザーと企業をつなぐ物流コールセンターを支える仕組み・システム化考案"><a href="#9-ユーザーと企業をつなぐ物流コールセンターを支える仕組み・システム化考案" class="headerlink" title="9. ユーザーと企業をつなぐ物流コールセンターを支える仕組み・システム化考案"></a>9. ユーザーと企業をつなぐ物流コールセンターを支える仕組み・システム化考案</h3><p>実現したい価値から逆算し、それを成し遂げる業務・要素を考え、システムの形につながる。非機能要件を抽出・立案し、導出した非機能要件よりインフラの特定部分の構成立案を行います。システム企画～実装に至るまでの流れ、意思決定プロセスの掴み方・泳ぎ方を知ると共にシステムアーキテクチャ構想の１タスクと、顧客価値との関連を体験し、Futureで自分が働くことの意義も感じて貰えます。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・間違ってて全然いいので思ったことを発言できること<br>・IPAの<a href="https://www.ipa.go.jp/files/000004568.pdf">この資料</a>を読了すること</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・企画から実装までに興味がある方<br>・非機能要件の作り込みに興味がある方</td></tr><tr><td>募集人数</td><td>2名</td></tr><tr><td>こんな人にオススメ</td><td>・経営とITの両方どりしたい方<br>・ミッションクリティカルなシステムの作り方を知りたい方<br>・チームでみんなの意見を吸い上げ洗練させていく過程に興味がある方</td></tr></tbody></table></div><h3 id="10-プロパンガス配送計画の最適化に向けた数値データ解析"><a href="#10-プロパンガス配送計画の最適化に向けた数値データ解析" class="headerlink" title="10. プロパンガス配送計画の最適化に向けた数値データ解析"></a>10. プロパンガス配送計画の最適化に向けた数値データ解析</h3><p>大手プロパンガス供給会社の配送員の仕事の効率化に取り組みます。現行システムで課題となっていた交換頻度や変動の予測精度を改善するのが我々のミッションです。新たなIoTデバイスを用いたビッグデータ解析を行うことにより、最適な配送計画を立案できるようなDX化にチャレンジしてもらいます。ビッグデータ解析やIoTに興味のある方におすすめです。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Git利用経験<br>・Go言語に興味がある方<br>・バックエンド開発に興味のある方</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・AWS利用経験<br>・Dockerを用いた開発経験<br>・基本的なLinuxコマンドの操作経験</td></tr><tr><td>募集人数</td><td>1名</td></tr><tr><td>こんな人にオススメ</td><td>・何がDXで何が普通のITか違いを知りたい方<br>・Go言語でバッチ処理を書きたい方</td></tr></tbody></table></div><p>プロパンガス業界を知らない方（都市ガスユーザーの方）も歓迎です。ややマニアックかもしれませんが、業界記事について知りたい方は<a href="https://future-architect.github.io/articles/20220519a/">こちら</a>も参照ください。</p><h3 id="11-プロパンガス設備点検の管理アプリケーション開発"><a href="#11-プロパンガス設備点検の管理アプリケーション開発" class="headerlink" title="11. プロパンガス設備点検の管理アプリケーション開発"></a>11. プロパンガス設備点検の管理アプリケーション開発</h3><p>大手プロパンガス供給会社の保安点検員の仕事を効率化する、アプリケーションの開発に取り組みます。ガスの安全性担保というミッションクリティカルなシステムをより確実に、ミスなく行うためのスマホアプリの開発に挑戦していただきます。ガス業界のDX化を担うプロジェクトの一員として一緒に改革に取り組みましょう！</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Git利用経験<br>・Go言語に興味がある方<br>・大崎オフィスへ出社可能な方</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・AWS利用経験<br>・Docker利用経験<br>・モバイルアプリ開発経験</td></tr><tr><td>募集人数</td><td>1名</td></tr><tr><td>こんな人にオススメ</td><td>・Flutterでスマホアプリ開発をしたい方</td></tr></tbody></table></div><p>《特記事項》</p><ul><li>本コースでは期間中に大崎オフィスへの出社をお願いする予定です</li><li>遠方の方については一部期間もしくは全期間東京に滞在いただく可能性がありますのでご理解の上、ご応募をお願いします（宿泊費、交通費は社内規定に基づき支給）</li></ul><h3 id="12-機械学習プラットフォーム開発"><a href="#12-機械学習プラットフォーム開発" class="headerlink" title="12. 機械学習プラットフォーム開発"></a>12. 機械学習プラットフォーム開発</h3><p>現状オンプレで稼働している、AIチームが利用する機械学習プラットフォームをクラウドに移行（・併用）するため、クラウド環境上に機械学習モデル・システム開発のための環境を構築します。データ基盤、分析環境、学習環境、実験管理、CI/CD、MLパイプライン、などから範囲を決めて実施します。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・基本的なLinuxコマンドの操作経験<br>・Linuxサーバの構築・運用経験（プライベート可）</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・Git利用経験<br>・AWS（or GCP）利用経験<br>・Docker利用経験<br>・機械学習モデルの実装経験<br>・Kaggle等のコンペティション参加経験</td></tr><tr><td>募集人数</td><td>1-2名</td></tr><tr><td>こんな人にオススメ</td><td>・オンプレミス環境を触ってみたい方<br>・MLOpsに興味がある方</td></tr></tbody></table></div><h3 id="13-画像認識AIの開発"><a href="#13-画像認識AIの開発" class="headerlink" title="13. 画像認識AIの開発"></a>13. 画像認識AIの開発</h3><p>実案件のデータを対象に、画像分類・物体検出・セグメンテーション・画像生成等幅広い画像系のAI技術を駆使して、AIを活用した顧客の業務削減に取り組みます。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>・Pythonでの画像処理の経験<br>・TensorflowやPytorch等を用いたNN構築経験<br>・論文を読んでNNなどの実装ができること<br>・基本的なLinuxコマンドの操作経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>・Git利用経験<br>・Kaggle等のコンペティション参加経験<br>・Docker利用経験</td></tr><tr><td>募集人数</td><td>1名</td></tr><tr><td>こんな人にオススメ</td><td>・とにかく画像処理の実案件に関わりたい方<br></td></tr></tbody></table></div><h3 id="14-ヘルスケアアプリの開発"><a href="#14-ヘルスケアアプリの開発" class="headerlink" title="14. ヘルスケアアプリの開発"></a>14. ヘルスケアアプリの開発</h3><p><a href="https://note.future.co.jp/n/n8b57d4bf4604">ビジネスイノベーション事業</a>でヘルスケアサービス開発を行います。展開する生活者・患者やその家族といったtoC向けのアプリを開発。看護や介護、あるいは健康維持が必要な高齢者の状態をモニタリングできて安心を提供するための仕組みづくりです。ウェアラブルデバイス等を有効活用します。</p><div class="scroll"><table><thead><tr><th>項目</th><th>説明</th></tr></thead><tbody><tr><td>応募条件(必須)</td><td>フロントエンド、バックエンド開発経験</td></tr><tr><td>応募条件(あれば歓迎)</td><td>AWS利用経験</td></tr><tr><td>募集人数</td><td>2名</td></tr><tr><td>こんな人にオススメ</td><td>・ウェアラブルアプリの開発に携わりたい方<br>・新規事業に興味がある方<br></td></tr></tbody></table></div><h2 id="2021年の参加者の声"><a href="#2021年の参加者の声" class="headerlink" title="2021年の参加者の声"></a>2021年の参加者の声</h2><p>インターンシップに参加していただいた方に、体験記を寄稿いただいていますので紹介します。概ね、「リモートワークであっても密度が濃い」、「普段の個人開発ではほとんど発生しない、コミュニケーションの部分の学びがある」、「フューチャーのブログ文化に触れることができた」、「参加者同士の交流が貴重」、「タスクの割り当てが親切で、成長を実感できた」などと評価いただいています（私がこう抜粋するとどうしても怪しいので…、ぜひインターン生の記事を読んでいただけるとです）。</p><ul><li>2021年<ul><li><a href="https://future-architect.github.io/articles/20211019a/">Engineer Camp: Python の AST モジュールを使ってクラス構造を可視化する </a></li><li><a href="https://future-architect.github.io/articles/20211018a/">Engineer Camp: スマートファクトリーでの学び </a></li><li><a href="https://future-architect.github.io/articles/20210922a/">Engineer Camp: IoTプラットフォームに参加しました！</a></li></ul></li><li>2020年<ul><li><a href="https://future-architect.github.io/articles/20200921/">フューチャーのインターンEngineer Camp2020（モビリティサービスプラットフォーム）に参加した話</a></li><li><a href="https://future-architect.github.io/articles/20200920/">Engineer Camp 2020（スマートファクトリー） 参加記 </a></li><li><a href="https://future-architect.github.io/articles/20200919/">Engineer Camp2020でSQLフォーマッタを開発しました</a></li><li><a href="https://future-architect.github.io/articles/20200913/">フューチャーの2020 夏季インターンに参加してみた</a></li></ul></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>わたちたちフューチャー社員一同、良いインターンになるよう工夫を凝らしたいと思っております。</p><p>興味がある学生の皆さん。なにはともあれマイページにエントリーをお願いします！</p><p>たくさんのご応募をお待ちしています！　最後まで読んでいただいてありがとうございました。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Culture/">Culture</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B3/">インターン</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%B32022/">インターン2022</category>
      
      
      <comments>https://future-architect.github.io/articles/20220606b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RDSの自動再起動によるインフラコストの悲劇</title>
      <link>https://future-architect.github.io/articles/20220606a/</link>
      <guid>https://future-architect.github.io/articles/20220606a/</guid>
      <pubDate>Sun, 05 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220606a/catch-g298cbbc5a_640.jpg&quot; alt=&quot;&quot; width=&quot;640&quot; height=&quot;435&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220606a/catch-g298cbbc5a_640.jpg" alt="" width="640" height="435"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは。TIG DXユニット所属、金欠コンサルタントの藤井です。<br>最近買ってよかったものは玄関に設置できる宅配ボックスです。</p><p><a href="/articles/20220601a/">失敗談連載2022</a> 4日目のこの記事では、クラウドインフラにはつきものの、インフラコストについての失敗談をご紹介します。<br>ぜひご一読いただき、私の屍を乗り越えていく事で、悲劇の発生を未然に防いでいただければと思います。<br>（一部記事にするにあたり、経緯を改変している部分があります。ご容赦ください）</p><h2 id="RDSについて"><a href="#RDSについて" class="headerlink" title="RDSについて"></a>RDSについて</h2><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>皆さん、RDSはお好きでしょうか。私は<strong>基本的に</strong>好きです。Amazon <strong>R</strong>elational <strong>D</strong>atabase <strong>S</strong>ervice、略してRDS。その名の通りAWSが提供する、RDBを運用するためのマネージド型サービスです。</p><p>高い可用性・耐久性・スケーラビリティを誇るサービスであるため、サービスの管理者はDBサーバそのものをほとんど意識をすることなくサービスを提供することが可能となります。</p><p>そんなRDSですが、二つだけどうしても私が好きになれない点があるので、紹介させてください。</p><h3 id="私が好きになれない点"><a href="#私が好きになれない点" class="headerlink" title="私が好きになれない点"></a>私が好きになれない点</h3><h4 id="単純に利用料金が高い"><a href="#単純に利用料金が高い" class="headerlink" title="単純に利用料金が高い"></a>単純に利用料金が高い</h4><p>前述のとおり、RDSはDBサーバの構築・運用において非常に便利なサービスを提供してくれます。EC2へのRDBMSのインストールから、ストレージ管理、障害時のフェイルオーバー、等と言った作業を管理者が実施する場合、人的コストもかなりかかってしまいます。</p><p>そのため、ある程度利用料金が高くなるのは仕方がないことではあります。</p><p>ご参考までに2022年5月時点での東京リージョンにおけるRDS<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>（シングルAZ・Aurora PostgreSQL互換エディション・オンデマンドインスタンス）とEC2<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>（オンデマンド・OSはLinux）の料金比較をいくつかのインスタンスタイプについて以下に掲載します。</p><div class="scroll"><table><thead><tr><th>インスタンスタイプ</th><th>RDSの時間あたりの料金 (USD)</th><th>EC2の時間あたりの料金 (USD)</th><th>RDSコスト/EC2コスト</th></tr></thead><tbody><tr><td>t4g.medium</td><td>0.113</td><td>0.0432</td><td>2.62</td></tr><tr><td>t4g.large</td><td>0.225</td><td>0.0864</td><td>2.60</td></tr><tr><td>t3.medium</td><td>0.125</td><td>0.0544</td><td>2.30</td></tr><tr><td>t3.large</td><td>0.250</td><td>0.1088</td><td>2.30</td></tr><tr><td>r6g.large</td><td>0.313</td><td>0.1216</td><td>2.57</td></tr><tr><td>r6g.xlarge</td><td>0.627</td><td>0.2432</td><td>2.58</td></tr><tr><td>r5.large</td><td>0.350</td><td>0.152</td><td>2.30</td></tr><tr><td>r5.xlarge</td><td>0.700</td><td>0.304</td><td>2.30</td></tr></tbody></table></div><p>だいたいRDSはEC2の2～3倍のコストがかかるようです。（ストレージ・通信等は除く）<br>もちろんリザーブドインスタンスを用いたり、<strong>不要な時間帯は停止する</strong>等で節約することは可能です。<br>基本的な利用料金が高いからこそ、不要な課金をしないよう管理する必要があります。</p><h4 id="7日間しか停止できない"><a href="#7日間しか停止できない" class="headerlink" title="7日間しか停止できない"></a>7日間しか停止できない</h4><p><strong>罠です</strong>。記載の通り、RDSは7日間しか停止することができません。<br>例えばこの記事が公開される2022年6月6日にRDSを停止した場合、7日後の6月13日に自動的に再起動されます。<br>もちろん停止時には以下のように停止可能期間について案内されるため、管理者はこの仕様について把握することができます。<br><img src="/images/20220606a/image.png" alt="image.png" width="529" height="214" loading="lazy"></p><p>この仕様について、公式ドキュメント<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>には</p><blockquote><p>DB インスタンスは最大 7 日間停止できます。7 日後に DB インスタンスを手動で起動しなかった場合、DB インスタンスは自動的に起動されるため、必要なメンテナンス更新が遅れることはありません。</p></blockquote><p>と記載されていますが、個人的には「最大7日間しか停止できません」と書くべきだと思います。7日後に自動で再起動される理由としては、ハードウェアやRDBMS等のメンテナンスにインスタンスが遅れないようにするため、とのことです。</p><p>2022年5月時点でRDSを7日間以上停止し続ける方法は存在せず、Lambda等で定期的に再起動・停止をスケジューリングする<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>等の方法でしか長期的なRDSの停止はできないようです。</p><h2 id="失敗談"><a href="#失敗談" class="headerlink" title="失敗談"></a>失敗談</h2><p>ここまでの記載内容で私が何をやらかしたか、予想が付いている方も居られるかとは思います。</p><p>検証用に立ち上げ、不要になったため停止したDBが7日後に自動で再起動・利用料金が発生してしまったのです。</p><p>しかも必要以上に大きなインスタンスサイズで構築してしまっていたため、発生した余分コストは高額でした。</p><h3 id="悲劇の発生経緯"><a href="#悲劇の発生経緯" class="headerlink" title="悲劇の発生経緯"></a>悲劇の発生経緯</h3><ol><li>EC2との接続検証用にRDSのインスタンスを1つ（すぐ落とす想定だったため、インスタンスサイズはxlargeを選択）立ち上げ、無事検証を終えました。</li><li>検証が完了したため、このRDSインスタンスは不要となりました。しかし追加で検証が必要になることが予想されるため、ここではインスタンスの削除ではなく停止を選択しました。</li><li>結果として、追加検証は不要であったため、結局インスタンスが再利用されることはありませんでした。</li><li>停止から7日後、RDSは自動でインスタンスを再起動しました。<ul><li>このとき、私の頭には既にこのインスタンスの記憶はありません。</li><li>RDS周りの検証は完了しているため、RDSのマネジメントコンソールにアクセスする理由も無いので、インスタンスの再起動に気づくことはありません。</li></ul></li><li>各種構築が完了し、最後に念のため請求書を確認したところ、想定外の請求が発生している事に気づきます。<ul><li>明細を見ると、よくわからないRDSインスタンスについての請求が・・・</li></ul></li></ol><p>おおよそ上記のような流れで悲劇は発生・検知されました。<br>検知後の対処にも2やらかしぐらいあるのですが、こちらは技術話では無いのでここでは割愛します。</p><h3 id="どうすればよかったのか"><a href="#どうすればよかったのか" class="headerlink" title="どうすればよかったのか"></a>どうすればよかったのか</h3><p>ここまで失敗談について記載しましたが、ではどうすればこの悲劇は回避できたのでしょうか。<br>この悲劇に限らず、大体の事象において以下2つの対応が重要と考えます。</p><ul><li>根本原因を取り除き、悲劇が発生しないようにする</li><li>事象を早期検知し、悲劇を発展させない</li></ul><h4 id="根本原因を取り除き、悲劇が発生しないようにする"><a href="#根本原因を取り除き、悲劇が発生しないようにする" class="headerlink" title="根本原因を取り除き、悲劇が発生しないようにする"></a>根本原因を取り除き、悲劇が発生しないようにする</h4><p>悲劇が発生しないよう、根本原因を排除することができれば悲しむ人は生まれません。</p><p>今回の悲劇に関しては、これはとても簡単で、<strong>RDSは停止せず、削除</strong>すればよいです。後で再利用することが予想される場合は、バックアップを取得した上でインスタンスはためらいなく削除してしまいましょう。</p><p>停止→再起動に比べるとバックアップからの復元の方が多少手間はかかりますが、確実に勝手に再起動されることはありません。バックアップもストレージ分のコストはかかりますが、Auroraの場合月額 0.023USD/GB<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup> と軽微です。</p><p>また、これはRDSに限らずですが、そもそもインスタンスサイズは必要最小限に設定しましょう。</p><h4 id="事象を早期検知し、悲劇を発展させない"><a href="#事象を早期検知し、悲劇を発展させない" class="headerlink" title="事象を早期検知し、悲劇を発展させない"></a>事象を早期検知し、悲劇を発展させない</h4><p>万一悲劇が発生してしまっても、早期に検知・食い止めることが出来れば最小限の悲しみに抑えられます。</p><p>一方検知が遅れれば利用料金と共に悲劇は発展し続けます。</p><p>詳細はこの記事には記載しません（いつか別記事として書くかも）が、早期検知には以下のような対策が考えられます。</p><ul><li><strong>システムで検知</strong><ul><li>AWS Budget、AWSコスト異常検出を適切に設定し、想定外の請求が発生した際に検知・通知する</li><li>停止中のRDSがあれば検知・再起動までの期間を通知するLambdaを作成・定期実行する</li></ul></li><li><strong>運用で検知（検知システムの構築ができない場合）</strong><ul><li>定期的（日次・週次など）に請求額を確認する。可能であればリソース毎の請求内容も確認する</li><li>定期的（日次・週次など）にRDSマネジメントコンソールを確認し、想定外インスタンスが存在しないことを確認する</li></ul></li></ul><p>なお、利用サービスに種類や検証などの用途に問わず、利用金額の通知周りについては、AWSアカウントを作成の初期段階で常に設定を行っておくとよいでしょう。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>私の失敗談は以上です。</p><p>インフラコストにまつわる悲劇は様々な原因で起こり得るものです。今回の内容はRDSの、それも自動再起動に特化した内容ではありましたが、対策についての考え方は様々な悲劇に共通するものです。</p><p>どうすれば悲劇を予防できるのか、早期検知できるのかについて考え続け、少しでも悲劇を抑えられると良いと思います。</p><p><a href="/articles/20220601a/">失敗談連載2022</a> 明日は辻さんの<a href="/articles/20220607a/">AWS Lambdaの初期化処理と初期化タイミングの考慮不足によるはまりどころ</a>です。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">Amazon RDS の料金 <a href="https://aws.amazon.com/jp/rds/pricing/">https://aws.amazon.com/jp/rds/pricing/</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">Amazon EC2 の料金 <a href="https://aws.amazon.com/jp/ec2/pricing/">https://aws.amazon.com/jp/ec2/pricing/</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">一時的に Amazon RDS DB インスタンスを停止する <a href="https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/USER_StopInstance.html">https://docs.aws.amazon.com/ja_jp/AmazonRDS/latest/UserGuide/USER_StopInstance.html</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">Amazon RDS インスタンスを 7 日以上停止する方法を教えて下さい。 <a href="https://aws.amazon.com/jp/premiumsupport/knowledge-center/rds-stop-seven-days/">https://aws.amazon.com/jp/premiumsupport/knowledge-center/rds-stop-seven-days/</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;">Amazon Aurora の料金 <a href="https://aws.amazon.com/jp/rds/aurora/pricing/">https://aws.amazon.com/jp/rds/aurora/pricing/</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Infrastructure/">Infrastructure</category>
      
      
      <category domain="https://future-architect.github.io/tags/AWS/">AWS</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      <category domain="https://future-architect.github.io/tags/RDS/">RDS</category>
      
      
      <comments>https://future-architect.github.io/articles/20220606a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Go言語で定数として扱いたいmapを毎回アロケートさせて性能劣化した話</title>
      <link>https://future-architect.github.io/articles/20220603a/</link>
      <guid>https://future-architect.github.io/articles/20220603a/</guid>
      <pubDate>Thu, 02 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p><a href="/articles/20220601a/">失敗談をテーマにした連載</a>の3本目です。</p><p>TIG DXユニットの原です。21年度4月に新卒で入社し、2年目となります。</p><p>参加しているプロジェクトで、数百万件のデータを処理する機能を担当したことがありました。</p><p>本記事はその際の失敗と、その失敗から得た経験を共有するため、執筆しました。</p><h1 id="内容のサマリ"><a href="#内容のサマリ" class="headerlink" title="内容のサマリ"></a>内容のサマリ</h1><ul><li>本来フィールドで宣言すべき定数的に扱いたい変数を、関数内で毎回生成しreturnしてしまったので呼び出す度に毎回アロケートが発生し性能劣化してしまった</li><li>Benchmark Test、Profiling、Escape Analysisでどういう挙動になってしまっていたか調べてみた</li></ul><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>本記事では、まずどのような状況であったかを説明し、どのような順番で問題を解決したかの順で説明します。</p><p>主にGoのテストとProfilingに関した内容です。</p><p>Goのテストについての関連記事として、<a href="/articles/20200601/">Goのテストに入門してみよう！</a>と<a href="/articles/20210812a/">Go 1.17のtesting新機能</a>があります。<br>ぜひ確認ください！</p><h2 id="問題状況"><a href="#問題状況" class="headerlink" title="問題状況"></a>問題状況</h2><p>処理する数百件のデータについて、マスタ情報から情報を引き出す必要がありました。</p><p>その際に、マスタデータをDBに置いとくとDBへの接続が発生するため、map型でハードコーディングすることにしました。</p><p>そして、他の個所でマスタ情報の変更ができないようにGetterを作りました。<br>(Go言語では、map型はconstができないため、Getterにするしかありませんでした、、)</p><p>それで最初に作成したコードが下記のような感じです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> master</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MasterRecord <span class="keyword">struct</span> &#123;</span><br><span class="line">Double <span class="type">string</span></span><br><span class="line">Triple <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Example code of problem setting</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetMaster1</span><span class="params">()</span></span> <span class="keyword">map</span>[<span class="type">int</span>]MasterRecord &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">map</span>[<span class="type">int</span>]MasterRecord&#123;</span><br><span class="line"><span class="number">0</span>:   &#123;Double: <span class="string">&quot;００&quot;</span>, Triple: <span class="string">&quot;０００&quot;</span>&#125;,</span><br><span class="line"><span class="number">1</span>:   &#123;Double: <span class="string">&quot;１１&quot;</span>, Triple: <span class="string">&quot;１１１&quot;</span>&#125;,</span><br><span class="line">...</span><br><span class="line"><span class="number">498</span>: &#123;Double: <span class="string">&quot;４９８４９８&quot;</span>, Triple: <span class="string">&quot;４９８４９８４９８&quot;</span>&#125;,</span><br><span class="line"><span class="number">499</span>: &#123;Double: <span class="string">&quot;４９９４９９&quot;</span>, Triple: <span class="string">&quot;４９９４９９４９９&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>その結果、数百件のデータを処理するためには、数時間がかかる性能問題が発生しました。</p><h2 id="問題箇所の特定"><a href="#問題箇所の特定" class="headerlink" title="問題箇所の特定"></a>問題箇所の特定</h2><p>最初は、問題個所の特定ができなかったため、問題の箇所を特定するために、機能ごとの<code>Benchmark Test</code>を書くことにしました。</p><h3 id="Benchmark-Test"><a href="#Benchmark-Test" class="headerlink" title="Benchmark Test"></a>Benchmark Test</h3><p>Go言語では、テスト作成の際に性能の観点でのテストができる<code>Benchmark Test</code>を提供しています。<br><code>Benchmark Test</code>は、<code>*testing.B</code>の引数を持つ<code>Benchmark</code>で始まるテストメソッドを作ることで作成できます。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> master_test</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment">// BenchmarkGetMaster Benchmark Test for GetMaster1</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkGetMaster1</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">master.GetMaster1()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="Benchmark-Test-Result"><a href="#Benchmark-Test-Result" class="headerlink" title="Benchmark Test Result"></a>Benchmark Test Result</h3><p>テストの実行は<code>-bench</code>オプションと<code>-benchmem</code>つけてテストを実行するだけでできます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -bench . -benchmem playground/master</span><br><span class="line">goos: windows</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: playground/master</span><br><span class="line">cpu: Intel(R) Core(TM) i7-5700HQ CPU @ 2.70GHz</span><br><span class="line">...</span><br><span class="line">BenchmarkGetMaster1</span><br><span class="line">BenchmarkGetMaster1-8               5713            207556 ns/op          210712 B/op       1021 allocs/op</span><br><span class="line">...</span><br><span class="line">ok      playground/master       3.911s</span><br></pre></td></tr></table></figure><p>上記のテスト結果を見ると、BenchmarkGetMasterを<code>5713</code>反復したら、平均的に<code>207556 ns/op</code>の実行速度と<code>210712 B/op</code>・<code>1021 allocs/op</code>のメモリアロケーションが発生していることが分かります。</p><p>ほかの機能と比較して、実行速度が顕著に遅かったため、マスタデータのGetterが性能問題の原因であると特定できました。そしてその原因は、想定外の大量のメモリアロケーションが発生しているからだと推測できます。</p><h2 id="メモリアロケーションの原因特定"><a href="#メモリアロケーションの原因特定" class="headerlink" title="メモリアロケーションの原因特定"></a>メモリアロケーションの原因特定</h2><p>メモリアロケーションの原因を特定するためには、<code>Profiling</code>と<code>Escape Analysis</code>を利用しました。</p><h3 id="Profiling"><a href="#Profiling" class="headerlink" title="Profiling"></a>Profiling</h3><p>Go言語では、標準的にProfiling機能提供しています。Profilingは<code>-cpuprofile</code>と<code>-memprofile</code>オプションを用いてできます。</p><h4 id="Profiling-Test-Code"><a href="#Profiling-Test-Code" class="headerlink" title="Profiling Test Code"></a>Profiling Test Code</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -cpuprofile cpu.prof -memprofile mem.prof -bench . -benchmem playground/master</span><br><span class="line">goos: windows</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: playground/master</span><br><span class="line">cpu: Intel(R) Core(TM) i7-5700HQ CPU @ 2.70GHz</span><br><span class="line">...</span><br><span class="line">BenchmarkGetMaster1</span><br><span class="line">BenchmarkGetMaster1-8               5713            207556 ns/op          210712 B/op       1021 allocs/op</span><br><span class="line">...</span><br><span class="line">PASS</span><br><span class="line">ok      playground/master       3.911s</span><br></pre></td></tr></table></figure><h4 id="Profiling結果の確認"><a href="#Profiling結果の確認" class="headerlink" title="Profiling結果の確認"></a>Profiling結果の確認</h4><p><code>-cpuprofile</code>では、CPUの処理時間ベースのProfilingが、<code>-memprofile</code>メモリベースのProfilingができます。その結果は<code>go tool pprof</code>コマンドで確認できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go tool pprof -http :8080 cpu.prof</span><br><span class="line">Serving web UI on http://localhost:8080</span><br></pre></td></tr></table></figure><p>すると、下記のようにProfilingの結果を確認できます。</p><img src="/images/20220603a/image.png" alt="プロファイル結果" width="1200" height="588" loading="lazy"><p>私が想像したのは、固定のmap型のデータを返すような単純な処理図を予測していましたが、ものすごく複雑な結果を得ました。</p><h3 id="Escape-Analysis"><a href="#Escape-Analysis" class="headerlink" title="Escape Analysis"></a>Escape Analysis</h3><p>なんでこんなに複雑になったかを把握するため、<code>Escape Analysis</code>を適応してみました。<code>Escape Analysis</code>は、<code>go build</code>する際に<code>-gcflags &#39;-m&#39;</code>オプションを追加することでできます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ go build -gcflags <span class="string">&#x27;-m&#x27;</span> master/mater1.go</span><br><span class="line"><span class="comment"># command-line-arguments</span></span><br><span class="line">master\mater1.go:4:34: map[int]map[string]string&#123;...&#125; escapes to heap</span><br><span class="line">master\mater1.go:5:8: map[string]string&#123;...&#125; escapes to heap</span><br><span class="line">master\mater1.go:6:8: map[string]string&#123;...&#125; escapes to heap</span><br><span class="line">...</span><br><span class="line">master\mater1.go:503:8: map[string]string&#123;...&#125; escapes to heap</span><br><span class="line">master\mater1.go:504:8: map[string]string&#123;...&#125; escapes to heap</span><br></pre></td></tr></table></figure><p>その結果、GetterをするたびにHeapメモリにエスケープが発生していることが分かりました。すなわち、Getterが呼ばれるたびに、mapデータを作っていたわけです。</p><h2 id="問題の解決"><a href="#問題の解決" class="headerlink" title="問題の解決"></a>問題の解決</h2><p>Getterが呼ばれるたびに、mapを生成することが問題であるため、mapデータをパッケージ変数として定義し、Getterではその変数を返すようにすることで、mapの再生成は抑えることができました。</p><p>その結果最初数時間かかる数百万件データの処理速度も、数十秒レベルで終わらせることができました。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> master</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="type">int</span>]MasterRecord&#123;</span><br><span class="line"><span class="number">0</span>:   &#123;Double: <span class="string">&quot;００&quot;</span>, Triple: <span class="string">&quot;０００&quot;</span>&#125;,</span><br><span class="line"><span class="number">1</span>:   &#123;Double: <span class="string">&quot;１１&quot;</span>, Triple: <span class="string">&quot;１１１&quot;</span>&#125;,</span><br><span class="line">...</span><br><span class="line"><span class="number">498</span>: &#123;Double: <span class="string">&quot;４９８４９８&quot;</span>, Triple: <span class="string">&quot;４９８４９８４９８&quot;</span>&#125;,</span><br><span class="line"><span class="number">499</span>: &#123;Double: <span class="string">&quot;４９９４９９&quot;</span>, Triple: <span class="string">&quot;４９９４９９４９９&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetMaster2</span><span class="params">()</span></span> <span class="keyword">map</span>[<span class="type">int</span>]MasterRecord &#123;</span><br><span class="line"><span class="keyword">return</span> m</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>もとの変数mが直接呼び出し元に渡るため、呼び出し元でmapを直接操作して書き換えると、全体に影響を受けます。これを避けるために、アクセスをキー指定必須にするといったことも検討できると思います。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GetMaster2() は非公開のみとし、ID指定の関数のみパッケージエクスポートする</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetMasterByID</span><span class="params">(id <span class="type">string</span>)</span></span> MasterRecord &#123;</span><br><span class="line">  <span class="keyword">return</span> m[id]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>今回の要件ですとマスタ（map）を駆動に処理をしたい処理があったこと。トレードオフはあるものの、書き換えはコードレビューで担保することとし、GetMaster2()方式で対処しました。</p><h4 id="比較"><a href="#比較" class="headerlink" title="比較"></a>比較</h4><p>Getterでmapデータを生成していた<code>GetMaster1</code>と、パッケージ変数を返している<code>GetMaster2</code>を比較してみました。</p><h5 id="GetMaster1とGetMaster2のBenchmark-Test結果"><a href="#GetMaster1とGetMaster2のBenchmark-Test結果" class="headerlink" title="GetMaster1とGetMaster2のBenchmark Test結果"></a>GetMaster1とGetMaster2のBenchmark Test結果</h5><p>その結果は明らかで、パッケージ変数を返している<code>GetMaster2</code>ではメモリアロケーションが発生してなく、処理速度も数十万倍速くなりました。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ go <span class="built_in">test</span> -v -cpuprofile cpu.prof -memprofile mem.prof -bench . -benchmem playground/master</span><br><span class="line">goos: windows</span><br><span class="line">goarch: amd64</span><br><span class="line">pkg: playground/master</span><br><span class="line">cpu: Intel(R) Core(TM) i7-5700HQ CPU @ 2.70GHz</span><br><span class="line">BenchmarkGetMaster1</span><br><span class="line">BenchmarkGetMaster1-8               5172            206772 ns/op          210720 B/op       1021 allocs/op</span><br><span class="line">BenchmarkGetMaster2</span><br><span class="line">BenchmarkGetMaster2-8           1000000000               0.2957 ns/op          0 B/op          0 allocs/op</span><br><span class="line">PASS</span><br><span class="line">ok      playground/master       1.639s</span><br></pre></td></tr></table></figure><p>グラフで比較すると下記のような感じです！</p><img src="/images/20220603a/chart_(1).png" alt="性能比較" width="713" height="498" loading="lazy"><h5 id="GetMaster2のProfiling結果"><a href="#GetMaster2のProfiling結果" class="headerlink" title="GetMaster2のProfiling結果"></a>GetMaster2のProfiling結果</h5><p><code>GetMaster1</code>と比較してみると、ものすごく単純な処理図になっていることが確認できます。</p><img src="/images/20220603a/image_2.png" alt="プロファイル結果" width="1200" height="587" loading="lazy"><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>まとめると、<strong>Go言語ではmap型は基本Heapメモリにエスケープするため、使う際には注意が必要である</strong>になります。</p><p>Go言語では、Benchmark TestやProfiling、Escape Analysisを使うことで性能問題の原因の調査ができるため、みなさまも性能問題に遭遇したらご活用してください！</p><p>次は藤井さんの<a href="http://articles/20220606a/">RDSの自動再起動によるインフラコストの悲劇</a>です。</p><h1 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h1><ul><li><a href="https://pkg.go.dev/cmd/go/internal/test">https://pkg.go.dev/cmd/go/internal/test</a><ul><li>Goのテストオプションに参考になる記事です</li></ul></li><li><a href="https://go.dev/blog/pprof">https://go.dev/blog/pprof</a><ul><li>GoのProfilingに参考になる記事です</li></ul></li><li><a href="https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/">https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/</a><ul><li>Goのメモリアロケーションの理解に参考になる記事です</li></ul></li><li><a href="https://hnakamur.github.io/blog/2018/01/30/go-heap-allocations/">https://hnakamur.github.io/blog/2018/01/30/go-heap-allocations/</a><ul><li>上記の英語記事の日本語レビュー記事です</li></ul></li><li><a href="https://medium.com/eureka-engineering/understanding-allocations-in-go-stack-heap-memory-9a2631b5035d">https://medium.com/eureka-engineering/understanding-allocations-in-go-stack-heap-memory-9a2631b5035d</a><ul><li>HeapメモリとStackメモリの理解に参考になる記事です</li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%80%A7%E8%83%BD%E6%A4%9C%E8%A8%BC/">性能検証</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%88/">トラブルシュート</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%83%97%E3%83%AD%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AA%E3%83%B3%E3%82%B0/">プロファイリング</category>
      
      <category domain="https://future-architect.github.io/tags/map/">map</category>
      
      
      <comments>https://future-architect.github.io/articles/20220603a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>H&amp;M Personalized Fashion Recommendations 参加記 (46th/2952)</title>
      <link>https://future-architect.github.io/articles/20220602b/</link>
      <guid>https://future-architect.github.io/articles/20220602b/</guid>
      <pubDate>Wed, 01 Jun 2022 15:00:01 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;こんにちは、Strategic AI</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>こんにちは、Strategic AI Group所属の金子です。普段は推薦に関連する実装やデータ分析を行っています。</p><p>先日Kaggleで開催された<a href="https://www.kaggle.com/competitions/h-and-m-personalized-fashion-recommendations/overview">H&amp;M Personalized Fashion Recommendations</a>コンペに単独で参加し、2952チーム中46位をとりました。</p><p>今回の参加記では以下の内容を紹介します。</p><ul><li>H&amp;Mコンペ概要</li><li>H&amp;Mコンペの難しいところ</li><li>解法のサマリ</li><li>解放の工夫</li><li>次に取り組みたいこと</li><li>感想</li></ul><h1 id="H-amp-Mコンペ概要"><a href="#H-amp-Mコンペ概要" class="headerlink" title="H&amp;Mコンペ概要"></a>H&amp;Mコンペ概要</h1><p>本コンペはH&amp;Mのオンライン・オフラインの行動履歴をもとに、次にユーザーが購買する商品をレコメンドするコンペティションでした。提供されたデータの期間は2018-09-20～2020-09-22の約二年間で、このデータをもとに2020/9/23～2020/09/29のユーザーの行動を予測しました。予測対象のユーザーは約137万人のユーザーで、これらのユーザーに対し予測対象の商品(=article)は約10万点の中から12点を選び、MAP@12で評価しました。データの種類をユーザー、アイテム、インタラクションの三つに分類すると、それぞれ以下のようなデータがありました。</p><ul><li>ユーザー: 年齢、ハッシュ化された住所、会員登録の状況</li><li>アイテム: 商品のカテゴリ、色・模様、商品の説明文(英語)、商品画像</li><li>インタラクション: 日付、オンラインかオフラインか</li></ul><h1 id="H-amp-Mコンペの難しいところ"><a href="#H-amp-Mコンペの難しいところ" class="headerlink" title="H&amp;Mコンペの難しいところ"></a>H&amp;Mコンペの難しいところ</h1><p>今回のコンペで難しかった点について、レコメンド一般的な課題、このコンペ特有の課題の順に説明していきます。</p><h2 id="レコメンド一般的な問題"><a href="#レコメンド一般的な問題" class="headerlink" title="レコメンド一般的な問題"></a>レコメンド一般的な問題</h2><p>レコメンド一般的な課題として、暗黙的(=implicit)なデータであること、大量のデータを高速にさばく必要があること、コールドスタートに対応する必要があることがあります。</p><h3 id="implicit-なデータ"><a href="#implicit-なデータ" class="headerlink" title="implicit なデータ"></a>implicit なデータ</h3><p>implicitなデータとは、ユーザーから明示的(=explicit)なフィードバックが与えられていないデータです。それぞれ例を挙げるなら、explicitは星の数やいいねなどユーザーの反応がついている状態、implicitはユーザーが見たという情報だけがあるような状態です。explicitなデータではユーザーの好みが数値化されているので、これを直接予測し評価することができますが、implicitなデータではユーザーが何かしらの行動を起こしたということが分かるのみで、実際にユーザーが気に入ったかどうかは分からないという問題があります。また、ユーザーが行動を起こさなかったデータはない場合が多く、閲覧・購入したデータを二値分類の正例にするのであれば、負例は上手く生成する必要があるのも問題です。</p><h3 id="大量の商品xユーザー、履歴データ。"><a href="#大量の商品xユーザー、履歴データ。" class="headerlink" title="大量の商品xユーザー、履歴データ。"></a>大量の商品xユーザー、履歴データ。</h3><p>今回のコンペは137万人のユーザーに対し、10万の商品の候補からレコメンドを行う必要がありました。また、履歴については2年間で約3000万件あり、これをうまく処理することが求められました。レコメンドはリアルタイムに予測を行う場合と、バッチ形式でまとめて予測するものがありますが、今回のコンペでは後者で時間もマシンリソースも無限でした。ただ、それでも全組み合わせを愚直に評価するのは難しく工夫が求められました。</p><h3 id="コールドスタート問題"><a href="#コールドスタート問題" class="headerlink" title="コールドスタート問題"></a>コールドスタート問題</h3><p>コールドスタートは履歴の少ないユーザー・アイテムに対して上手く予測ができない問題です。レコメンドは主にユーザーの行動履歴もとに予測を行う協調フィルタリング形式と、アイテム自身のカテゴリや画像といった情報を活用するコンテンツベースの手法に分類されます。前者の協調フィルタリングのアルゴリズムは大量にデータがあるアイテムやユーザーには上手く作用しますが、まだ履歴の少ないユーザーや新しく登録されたばかり・マイナーなアイテムには上手く予測できないという問題があります。</p><h2 id="コンペ特有の課題"><a href="#コンペ特有の課題" class="headerlink" title="コンペ特有の課題"></a>コンペ特有の課題</h2><p>コンペ特有の課題として、ユーザーの行動が散発的であること、繰り返しの購入パターンが強すぎることがありました。</p><h3 id="散発的な履歴"><a href="#散発的な履歴" class="headerlink" title="散発的な履歴"></a>散発的な履歴</h3><p>ユーザーの履歴を確認したところ、前回の履歴から数か月空いていることが多く、履歴があったのは似たようなズボン数種類だけ、と一部の種類のカテゴリにのみ行動があったケースが多くみられました。これはユーザーの気持ちになって考えると、ある程度買いたい種類の服を決めてからオンラインのサイトを見て欲しいものだけ買うケースが多かったからではないかと考えています。</p><h3 id="繰り返し購入の多さ"><a href="#繰り返し購入の多さ" class="headerlink" title="繰り返し購入の多さ"></a>繰り返し購入の多さ</h3><p>また、今回のコンペでは繰り返し商品を購入するパターンが強い傾向が見られました。例えば書籍などの推薦では一度購入した商品を再度推薦する意味はないのですが、今回のH&amp;Mでは同じ商品やその色違いを購入するケースが多くみられました。この点は自身が普段服をオンラインで買うときはサイズを間違えてもダメージの少ない靴下やシャツ等の消耗品ばかり買っているので予測はできていました。ただ、想像以上にスコアに対する比率が高く、以前購入した商品の再購入をとらえるのがコンペのカギとなっていました。</p><h1 id="解法のサマリ"><a href="#解法のサマリ" class="headerlink" title="解法のサマリ"></a>解法のサマリ</h1><p>今回私はこの問題に対し、候補を高速に絞り込むretrievalステージと精度よく予測を行うrankingステージの二段階で予測を行う<a href="https://research.google/pubs/pub48840/">two-tower model</a>を構築しました。解法については<a href="https://www.kaggle.com/competitions/h-and-m-personalized-fashion-recommendations/discussion/324205">kaggleのdiscussion</a>にも投稿したので、ここではサマリで割愛させていただきます。<br><img src="/images/20220602b/H&M_46th_solution_overview.drawio.png" alt="H&M_46th_solution_overview.drawio" width="811" height="531" loading="lazy"></p><h2 id="Retrieval-Stage"><a href="#Retrieval-Stage" class="headerlink" title="Retrieval Stage"></a>Retrieval Stage</h2><p>Retrieval Stageではarticleの画像や自然言語、カテゴリといった情報を、articleの性質を表すベクトル(=embedding)に変換し、ユーザーの行動履歴で学習を行う協調フィルタリングとコンテンツベースのハイブリッド手法を実装しました。ユーザーの行動履歴はこのembeddingの平均とし、ユーザーと候補のアイテムのembeddingの類似度を内積計算で計算することで、ユーザーの行動履歴に近い商品を高速に絞り込みました。検索対象のアイテムはユーザーが過去に購入したことのあるアイテムと、直近90日で履歴の数が多かったトップ20000のアイテムのうち、過去一週間で1回以上購入されている販売終了になっていないものに絞ることで実行速度と精度を上げました。</p><h2 id="Ranking-Stage"><a href="#Ranking-Stage" class="headerlink" title="Ranking Stage"></a>Ranking Stage</h2><p>Ranking Stageではユーザーの行動履歴とRetrival Stageで絞り込んだ商品の組み合わせについて、それぞれBERT等に用いられるattentionという技術を用いてより正確に相性を判定し精度を高めました。<br>この二つを組み合わせることで130万人のユーザーに対する予測をRTX3090でわずか20分のうちに予測し全体で46位に入ることができました。</p><h1 id="解法の工夫"><a href="#解法の工夫" class="headerlink" title="解法の工夫"></a>解法の工夫</h1><p>今回の課題で有効だった工夫について三点紹介します。</p><h2 id="Gumbel-Max-Trickを用いた効率的Negative-Hard-Sampling"><a href="#Gumbel-Max-Trickを用いた効率的Negative-Hard-Sampling" class="headerlink" title="Gumbel-Max Trickを用いた効率的Negative Hard Sampling"></a>Gumbel-Max Trickを用いた効率的Negative Hard Sampling</h2><p>二値問題のモデルを学習させる際、負例はある程度難しいものを選ぶと良いことが知られています。例えば[gensimのWord2Vec](<a href="https://radimrehurek.com/gensim/models/word2vec.html#gensim.models.word2vec.Word2Vec)%E3%81%A7%E3%81%AF%E5%8D%98%E8%AA%9E%E3%81%AE%E5%87%BA%E7%8F%BE%E7%A2%BA%E7%8E%87%E3%81%AE%CE%B1(%E9%80%9A%E5%B8%B8%E3%81%AF3/4)%E4%B9%97%E3%81%A7%E8%B2%A0%E4%BE%8B%E3%82%92%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%97%E3%81%BE%E3%81%99%E3%80%82">https://radimrehurek.com/gensim/models/word2vec.html#gensim.models.word2vec.Word2Vec)では単語の出現確率のα(通常は3/4)乗で負例をサンプリングします。</a><br>今回のデータでは予測日と対象のユーザーの年齢が分かっていました。そこでバッチごとにユーザーの年齢(10歳区切り)と予測日を統一し、予測する日から直近1週間における予測対象の年齢層の購入数top10000の割合からItem2Vec用の負例をサンプリングしました。</p><p>サンプリングの方法はGumbel-Max-Trickという手法を用いました。これはカテゴリカル分布から重複のない組み合わせをサンプリングする手法です。日ごと年齢層ごとにtop10000のarticleのIDと出現確率を入れた配列を用意し、それを用いて計算を行いました。</p><p>今回のItem2Vecの学習では負例の量と質が非常に重要でした。Word2Vecの負例の数は通常5~15付近ですが、今回のモデルでは負例の数を最大4096まで増やしました。負例の数を変えて学習させたところ、負例が4096個の時がLB0.020付近で、1024個の時がLB0.010付近、それより少なく質の低い負例ではあまり効率的に学習ができませんでした。</p><h2 id="ApproxNDCGLossベースによるランク学習"><a href="#ApproxNDCGLossベースによるランク学習" class="headerlink" title="ApproxNDCGLossベースによるランク学習"></a>ApproxNDCGLossベースによるランク学習</h2><p>Ranking StageにおけるTransformerの学習では<a href="https://www.tensorflow.org/ranking/api_docs/python/tfr/keras/losses/ApproxNDCGLoss">ApproxNDCGLoss</a>ベースのランク学習が有効でした。通常の二値分類ではユーザーが購入したかどうかをそれぞれ別々に計算するPointwiseの学習を行いますが、ApproxNDCGLossを用いた学習では一つの予測対象につき複数個のarticleを予測し、その順番を最適化するlistwiseな学習を行います。ApproxNDCGLossの実装は、予測値の差をsigmoid関数にかけることで微分可能な順位を計算し、その順位を用いてnDCGLossを計算します。私はこれをもとにnDCGの重み付けの部分を代わりに正例の順位差で計算するように改造しました。これが効いた原因は今回の予測は難しく、例えば128個サンプリングしても正例は平均して32位付近に予測されるので、nDCGによる重みづけが上手くいかず、代わりに順位差をそのまま使った方がよかったからだと推測しています。</p><h2 id="配列長を意識したattention計算の効率化"><a href="#配列長を意識したattention計算の効率化" class="headerlink" title="配列長を意識したattention計算の効率化"></a>配列長を意識したattention計算の効率化</h2><p>計算時間短縮のための工夫としてattentionの計算を大幅に高速化しました。通常のattentionではクエリの長さとターゲットの長さの積の計算量で行列計算を行います。ただ、行動履歴のようなデータは大抵が一桁二桁の長さで、ヘビーユーザーのみ三桁四桁の長さである場合が多いです。ただ、精度のためにヘビーユーザーに合わせた行列の大きさで計算を行うとかなり無駄な計算を行って非効率的になってしまいます。</p><p>そこで、クエリとターゲットの配列を一定の長さで分割し、計算を行うペアのみ部分的に計算を行うようにtf.tensor_scatter_nd系のメソッドを使ってTransformer Layerを設計することで、時間・空間計算量を大幅に削減しました。また、予測時は行動履歴の少ない順にユーザーを並べ、行動履歴の少ないユーザーの時はバッチサイズを大きくすることでさらに予測時間を短縮しました。</p><h1 id="次に取り組みたいこと"><a href="#次に取り組みたいこと" class="headerlink" title="次に取り組みたいこと"></a>次に取り組みたいこと</h1><p>今回のコンペのテーマでは取り組めませんでしたが、検討すると面白いと思うテーマについて個人的に述べていきたいと思います。</p><h2 id="セレンディピティの検討"><a href="#セレンディピティの検討" class="headerlink" title="セレンディピティの検討"></a>セレンディピティの検討</h2><p>今回のコンペは繰り返しの購入を当てることが有効で、それにうまく取り組めたチームが上位になっていました。一方で実際のレコメンドではユーザーにとって自明なレコメンドより、ユーザーにとって有用でかつ意外なアイテムを推薦することが重要な場合もあります。(セレンディピティといいます)実際には今回のH&amp;Mコンペのような指標のみではなく、本当に改善したい指標(ユーザーの満足度・売上)につながる指標も検討が必要と考えています。　</p><h2 id="ユーザー・アイテムセグメンテーションと分析"><a href="#ユーザー・アイテムセグメンテーションと分析" class="headerlink" title="ユーザー・アイテムセグメンテーションと分析"></a>ユーザー・アイテムセグメンテーションと分析</h2><p>今回はItem2Vecを推薦に用いましたが、ここで得られたベクトル(=embedding)を分析することで似たようなアイテム・ユーザーの傾向を分析することができます。embeddingを用いた分析の例は過去に<a href="https://future-architect.github.io/articles/20210901a/">医薬品副作用データベースから医薬品同士の関係を学習・評価・可視化する</a>や<a href="https://speakerdeck.com/nadare881/embeddingwoyong-itafen-xi-jian-suo-tui-jian-falseji-shu">embeddingを用いた分析・検索・推薦の技術</a>で紹介しましたが、これらの手法を用いることでレコメンドモデルから新たな示唆を得られる可能性があります。</p><h2 id="テーマ別推薦・検索との融合"><a href="#テーマ別推薦・検索との融合" class="headerlink" title="テーマ別推薦・検索との融合"></a>テーマ別推薦・検索との融合</h2><p>今回のコンペではユーザーに対して全アイテムの中からレコメンドを行っていました。実際にレコメンドを適用するとしたらサイトのトップページ、もしくはメルマガやアプリのプッシュ通知のような例が考えられます。しかしこのようなレコメンドから購入するというケースは少なく、ユーザーはキーワードで検索・もしくはカテゴリのページで探しながら商品を購入すると考えられます。</p><p>私は趣味でいろいろなECサイトのUIを眺めるのですが、カテゴリ・検索後の部分までパーソナライズできているサイトは少ないです。(ウィンドウを見て評価するショッピングをしています。)レコメンドは一方的に出して終わりではなく、ユーザーに気づきを与え、そこから興味を深堀りできるようインタラクティブに設計していくのがキモだと思っています。全商品からだけでなく、カテゴリ別のページや検索結果にもパーソナライズされたレコメンドを適用できるモデルの検討は実用上重要なテーマであると考えています。</p><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>今回のコンペは画像・自然言語・カテゴリの詰まったログデータによるレコメンドコンペということで非常にワクワクしながら挑戦しました。ただ、今回のコンペはユーザーの購入間隔がばらばらかつ同じ商品の繰り返しの購入傾向が強いという性質からか画像や自然言語を用いたNNがあまり効かないタスクでした。私はEnd2EndのNNで勝つことにこだわったため、NNを用いた解法の中では非常に高いスコアを出せたものの、順位としては46位ともっと上を目指せたのになという後悔が残りました。このコンペからは良いレコメンドには人のロジックとMLのアルゴリズムを上手く融合させることのできる設計が必要と学びました。それを実現するための仕組みを引き続き研究していきたいと思います。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DataScience/">DataScience</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E5%8F%82%E6%88%A6%E8%A8%98/">参戦記</category>
      
      <category domain="https://future-architect.github.io/tags/Kaggle/">Kaggle</category>
      
      <category domain="https://future-architect.github.io/tags/TensorFlow/">TensorFlow</category>
      
      
      <comments>https://future-architect.github.io/articles/20220602b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>int32 のサロゲートキーが数年でオーバーフローしそうになった件</title>
      <link>https://future-architect.github.io/articles/20220602a/</link>
      <guid>https://future-architect.github.io/articles/20220602a/</guid>
      <pubDate>Wed, 01 Jun 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220602a/key-gd9783fabe_1280.jpg&quot; alt=&quot;&quot; width=&quot;1280&quot; height=&quot;799&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220602a/key-gd9783fabe_1280.jpg" alt="" width="1280" height="799"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、2021/11 にキャリア入社したTIGの穴井です。<a href="/articles/20220601a/">失敗談をテーマにした連載</a>の2本目です。</p><p>Go の ORM（Object-relational mapping）である <code>gorm</code> 利用時の構造体にて、サロゲートキーの型が <code>int32</code>であることに起因して、当該フィールドが数年でオーバーフローしそうだった件について、なぜ実装時に気づけなかったのか、記載いたします。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>既存システムに機能追加することで、これまでとは比べ物にならないデータ量を扱うシステムとなることがあると思います。私が参画しているプロジェクトでも扱うデータ量が大幅に急増し、結果として Go の構造体の <code>int32</code> のサロゲートキーが数年でオーバーフローすることが見込まれる状況となりました。</p><h1 id="なぜ実装時に気づけなかったのか"><a href="#なぜ実装時に気づけなかったのか" class="headerlink" title="なぜ実装時に気づけなかったのか"></a>なぜ実装時に気づけなかったのか</h1><p>システム開発を行う際に、開発者が共通で利用する部品を作り込むと思いますが、<br>その部品の利用に問題がありました。</p><p>私が参画しているプロジェクトは、全てのテーブルでサロゲートキーとシステムカラムを定義するという開発規約があるため、これらを表現する構造体を一つ定義しておき、構造体の埋め込みを利用して ORM を利用していました。また、サロゲートキーは ID という名称にするテーブル定義規約があり、ID はデータが insert されるたびに increment されるテーブル定義 (PostgreSQL の serial 型) となっています。</p><p>上記をコードで表すと以下の通りとなります。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BaseColumns 共通カラムの構造体</span></span><br><span class="line"><span class="keyword">type</span> BaseColumns <span class="keyword">struct</span> &#123;</span><br><span class="line">ID <span class="type">int32</span> <span class="string">`gorm:&quot;primary_key&quot;`</span></span><br><span class="line"></span><br><span class="line">CreatedAt    time.Time <span class="string">`gorm:&quot;column:created_at&quot;`</span></span><br><span class="line">UpdatedAt    time.Time <span class="string">`gorm:&quot;column:updated_at&quot;`</span></span><br><span class="line">PatchedAt   *time.Time <span class="string">`gorm:&quot;column:patched_at&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CreateSampleModel SampleModel を DB に書き込む関数（利用例）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CreateSampleModel</span><span class="params">(ctx context.Context, userID <span class="type">string</span>)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">s := &amp;SampleModel&#123;</span><br><span class="line">UserID:        userID,</span><br><span class="line">BaseColumns: BaseColumns&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">tx := GetTx(ctx)</span><br><span class="line">err := tx.WithContext(ctx).Create(&amp;s).Error</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このような規約がある中で実装を愚直に進めた結果、データ量に関する考慮漏れが発生し、<br>int32 のサロゲートキーを利用してしまい、数年でオーバーフローが見込まれる状況となってしまいました。</p><p>今回はサロゲートキーのオーバフロー問題ということで下記に int32, int64 の最大値を示します。</p><div class="scroll"><table><thead><tr><th>int32</th><th>int64</th></tr></thead><tbody><tr><td>2,147,483,647</td><td>9,223,372,036,854,775,807</td></tr></tbody></table></div><p>本事象では、DB で自動採番された ID が 2,147,483,647 を超えた際に Go の構造体にパースできずオーバーフローすることが見込まれました。</p><p>機能追加により約21億のデータを扱うシステムとなることは、稀なケースですが、このようなオーバーフロー問題はすべての人が遭遇する可能性がある事象だと思います。本事象に遭遇したことで、改めて、データ量と型設定について見直すいい機会となりました。</p><p>※本事象発覚後、int64のサロゲートキーを利用するようソースを修正しました。</p><h1 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h1><p>同じ苦しみを味わう人が出ないよう、本記事にて供養いたします。</p><p>次は原さんの<a href="/articles/20220603a/">Go言語で定数として扱いたいmapを毎回アロケートさせて性能劣化した話</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DB/">DB</category>
      
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/GORM/">GORM</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%95%E3%83%AD%E3%83%BC/">オーバーフロー</category>
      
      
      <comments>https://future-architect.github.io/articles/20220602a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>GoとDynamoDBを用いた開発で反省していること</title>
      <link>https://future-architect.github.io/articles/20220601b/</link>
      <guid>https://future-architect.github.io/articles/20220601b/</guid>
      <pubDate>Tue, 31 May 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h1&gt;&lt;p&gt;TIG真野です。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG真野です。<a href="/articles/20220601a/">失敗談をテーマにした連載</a>で、ちょうどプロダクト開発的に良い区切りのタイミングでもあるため、振り返りがてら、DynamoDB,Go,AWS Lambdaの技術要素について自分自身の理解・見込みの甘さについて反省します。</p><h2 id="DynamoDBのシステム項目created-atとかupdated-atのタイムゾーンはJSTにすれば良かった"><a href="#DynamoDBのシステム項目created-atとかupdated-atのタイムゾーンはJSTにすれば良かった" class="headerlink" title="DynamoDBのシステム項目created_atとかupdated_atのタイムゾーンはJSTにすれば良かった"></a>DynamoDBのシステム項目created_atとかupdated_atのタイムゾーンはJSTにすれば良かった</h2><p>DynamoDBは日付型を直接サポートしておらず、文字列型で保存することになります。</p><ul><li><a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes.String">https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes.String</a></li></ul><p>データサイズや諸々の理由で<a href="https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/dynamodbattribute/#UnixTime">UnixTime</a> 勢力もあるかもしれませんが、アプリケーションから直接参照されず、トレースその他を運用時の利用を目的にしたシステム項目は、可読性が大事なのでRFC3339ナノ秒で保管していました。RFC3339ナノ秒は <code>2022-06-01T03:31:14.6300415Z</code> と言った形式です。</p><p>ここまでは良かったのですがタイムゾーンはUTCに統一する方針を取っていたので、JSTではないです。変換するときは常に+9時間することになり激しく反省をしています。少なくてもクライアントのタイムゾーンがJSTであれば、JSTで保存したほうが良かったと考えています。JSTですと次のような形式を想定しています。</p><ul><li><code>2022-06-01T12:31:14.6300415+09:00</code></li></ul><p>ちなみに、AWS SDK for Goを用いると、time.Time型はデフォルトではRFC3339で保存されます。</p><blockquote><p><code>time.Time</code> is marshaled as RFC3339 format.<br><a href="https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/dynamodbattribute/#:~:text=%60time.Time%60%20is%20marshaled%20as%20RFC3339%20format">https://docs.aws.amazon.com/sdk-for-go/api/service/dynamodb/dynamodbattribute/#:~:text=%60time.Time%60%20is%20marshaled%20as%20RFC3339%20format</a>.</p></blockquote><p>ちなみに、システム項目に限っていますが、時系列データのソートキーなどもJSTタイムゾーンで保存するほうが日本ユーザーが大半のケースにおいてはベターだと思います。</p><h2 id="時系列DBをDynamoDBに貯めるのは良かったけど、分析用のデータストアを最初から分けるべきだった"><a href="#時系列DBをDynamoDBに貯めるのは良かったけど、分析用のデータストアを最初から分けるべきだった" class="headerlink" title="時系列DBをDynamoDBに貯めるのは良かったけど、分析用のデータストアを最初から分けるべきだった"></a>時系列DBをDynamoDBに貯めるのは良かったけど、分析用のデータストアを最初から分けるべきだった</h2><p>今回のユースケースとしては、温湿度や移動情報（緯度経度）をそれなりの量と頻度（つまり時系列）で受信するようなタイプです。基本的には全データを利用するというよりは、ときより発生する異常値をトリガーに通知をしたり、ある断面のセンサー値を別システムに連携します。発生するデータ量の将来換算が読みきれずDynamoDBをメインのデータストアに採用したのは良かったのですが、データが蓄積するとちょっとした調査・集計をかなり頻繁に行いたくなりました。</p><p>最初はちょっとした集計ですし、簡易なスクリプトを開発していましたが、気づけばチーム全員がちょっとしたスクリプトを開発するのがうまくなっていました。これはこれで悪くないスキルセットかもしれませんが、すこし方向性が異なります。</p><p><a href="/articles/20210403/">S3 Export + Athenaで集計しよう</a>という方法も部分的に行いましたが、やはり特定の業務キー＋年月日でパーティショングしたいということもあり、これについては早期にデータ基盤を整えるべきであったと反省しています。</p><p>例えば次のように、DynamoDB Streamsトリガーでデータレイク側に参照したい形式で転送するといったことを早期に行っていれば..という反省があります。</p><img src="/images/20220601b/失敗談技術ブログ.drawio.png" alt="分析用データストアにDDB Streamsで転送" width="1200" height="698" loading="lazy"><p>上図はS3に転送していますが、どういったデータストアで投げても良いとは思います。この例では月額コストをなるべく抑えたく、そこまで集計に用いるクエリにレイテンシを求められなかったため、S3+Athenaで済ましています。</p><h2 id="参照Viewを構築するためのDynamoDB-Streamsの処理はWeb-API側の同期処理に寄せて良かったのでは"><a href="#参照Viewを構築するためのDynamoDB-Streamsの処理はWeb-API側の同期処理に寄せて良かったのでは" class="headerlink" title="参照Viewを構築するためのDynamoDB Streamsの処理はWeb API側の同期処理に寄せて良かったのでは"></a>参照Viewを構築するためのDynamoDB Streamsの処理はWeb API側の同期処理に寄せて良かったのでは</h2><p>逆に、DynamoDB Streamsを使わないほうが良かったという話です。どうしてもアプリケーション管理画面からの参照要件が耐えられず、メインのテーブルの更新トリガーでLambdaを着火させ、参照のビューテーブルを作成する処理を追加しました。管理画面を作る処理は後々の追加要件であったため、すでに稼働済みのシステムに手をいれることを避け、疎結合に追加したという動きです。</p><p>アプリ上は疎結合となりましたが、アプリケーションの構成要素を増やすと後々面倒だなという思いが募ってきました。インフラの監視、運用、リリース。非機能的な性能、障害テストなども手間です。もちろん許容範囲内なので、この件に関してはメインテーブルに書き込みを担当するWeb APIのロジックに追加して良かったのかなと考えています。</p><h3 id="元の構成"><a href="#元の構成" class="headerlink" title="元の構成"></a>元の構成</h3><img src="/images/20220601b/失敗談技術ブログ-ページ2.drawio.png" alt="失敗談技術ブログ-ページ2.drawio.png" width="1200" height="771" loading="lazy"><h3 id="こうすればよかった"><a href="#こうすればよかった" class="headerlink" title="こうすればよかった"></a>こうすればよかった</h3><p>元も思想的には悪くない（DynamoDB Streams部分だけの改修で済むケースもあり影響範囲が限定的だった）ですが、終わってみればやや重厚だった気がします（ローカルの環境で再現するのが面倒で、単体テスト品質が上がりにくいにもあり）。</p><img src="/images/20220601b/失敗談技術ブログ-ページ3.drawio.png" alt="失敗談技術ブログ-ページ3.drawio.png" width="1200" height="771" loading="lazy"><p>上図のように、同期的に書き込む方式も、既存部分へ手を入れることを過度に恐れず、客観的に判断していこうと思います。</p><h2 id="DynamoDBアクセスにAWS-SDK-for-Goを生で使う必要はなかったのでは"><a href="#DynamoDBアクセスにAWS-SDK-for-Goを生で使う必要はなかったのでは" class="headerlink" title="DynamoDBアクセスにAWS SDK for Goを生で使う必要はなかったのでは"></a>DynamoDBアクセスにAWS SDK for Goを生で使う必要はなかったのでは</h2><p>GoからDynamoDBアクセスをするためのパッケージは大体3つあるかなと思います。<a href="/tags/DynamoDB%C3%97Go/">DynamoDB×Go連載</a>を行ったことすらありました。</p><ol><li><a href="https://aws.amazon.com/jp/sdk-for-go/">AWS SDK for Go</a><ul><li>v1, v2がある</li></ul></li><li><a href="https://github.com/guregu/dynamo">guregu/dynamo</a></li><li><a href="https://gocloud.dev/">Go CDK</a></li></ol><p>AWS SDK for Goですが、記載がやや冗長になりがちでした。条件式も<a href="/articles/20211025a/">ヘルパーパッケージがあるよという記事</a>を書きましたが、やっぱり冗長です。公式提供だけに使えない機能は存在しない安心感はありましたが、guregu/dynamo が優秀すぎるので逆に生でわざわざ使う理由はないかなという印象です。</p><p>ちなみに、Go CDKは<a href="/articles/20200228/">DynamoDBアクセスもけっこういけるんじゃないか？</a>で1本記事を書きましたが、結局導入に至っていないです。別の機会があればこれはこれでチャレンジしたいと考えています。</p><h2 id="AWS-Lambdaのバッチ処理はStep-Functionsで必ずラップするルールにすれば良かった"><a href="#AWS-Lambdaのバッチ処理はStep-Functionsで必ずラップするルールにすれば良かった" class="headerlink" title="AWS Lambdaのバッチ処理はStep Functionsで必ずラップするルールにすれば良かった"></a>AWS Lambdaのバッチ処理はStep Functionsで必ずラップするルールにすれば良かった</h2><p>データ量が少ないため、ちょっとしたシステムI/Fでの受信/送信処理は生のLambdaで軽く書いていました。ご存知の通り最大実行時間は2022.6.1時点で15分です。今回の要件では問題なかったのですが、隣のチームに構成を移植された場合にはデータ量が多くなるケースがありタイムアウトが発生。いっそすべてStep Functionsでラップして統一するルールにしても良かったのかなと今では少し思っています。もちろん、ここだけECSやApp Runnerにする形式も面白いと思います。</p><h3 id="少し反省している構成"><a href="#少し反省している構成" class="headerlink" title="少し反省している構成"></a>少し反省している構成</h3><p>初期移行、リラン、連携先の不具合などで予期せぬデータ量に達した場合は、タイムアウトになりがち。</p><img src="/images/20220601b/失敗談技術ブログ-ページ4.drawio.png" alt="失敗談技術ブログ-ページ4.drawio.png" width="962" height="470" loading="lazy"><h3 id="横展開するのであれば最初から固く作っておいても良かったと思っている構成"><a href="#横展開するのであれば最初から固く作っておいても良かったと思っている構成" class="headerlink" title="横展開するのであれば最初から固く作っておいても良かったと思っている構成"></a>横展開するのであれば最初から固く作っておいても良かったと思っている構成</h3><p>連携先の品質その他の制御が取りにくい場合は、自衛的に固く作り込んでおくことが吉。</p><img src="/images/20220601b/失敗談技術ブログ-ページ5.drawio.png" alt="失敗談技術ブログ-ページ5.drawio.png" width="962" height="682" loading="lazy"><h2 id="その他"><a href="#その他" class="headerlink" title="その他"></a>その他</h2><ul><li><a href="https://github.com/go-swagger/go-swagger">go-swagger</a>も好きですが、 <a href="https://github.com/deepmap/oapi-codegen">deepmap/oapi-codegen</a> にしておけば良かった<ul><li>別にOpenAPI Specification v2（Swagger）で困ることもなく、v3を使いたいことはなかったのですが…</li></ul></li><li>go-swaggerで –strict-additional-properties をつけていることを忘れて、項目追加が許容できないため互換性を失い、リリースのときに困った<ul><li>開発時にtypoで誤った項目をcurlなどで呼ばれるよりはつけておいた方が間違いないだろうと考えたが、いつしかクライアントが増え、サーバ・クライアントのリリースサイクルがずれたときに困りました</li></ul></li><li>スキーマ駆動で自動生成したStructを、アプリ本体で用いるモデルのStructに埋め込めば良かった<ul><li>必ずしもWeb API時の項目とDBカラムが1:1ではないので、埋め込む方向に舵を切るとそれはそれで何か不満が出そうですが、項目詰め替え作業も<a href="https://github.com/jinzhu/copier">copier</a> を導入するのも何だかなと思っていた</li></ul></li><li>DynamoDBのGSIを用いて重複チェックをアプリ側で実装していましたが、反映まで時間がかかるため同時実行数の制御が必要などモヤるポイントがあった</li></ul><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>列挙すると事前に回避ないしは途中で方向転換できそうな内容が多く、アーキテクチャ的な意思決定を微修正したり、マネジメントレベルの調整ができてなかったんだなと感じました。</p><p>また、こういった振り返りの記事がもっと増えると良いなと思います。</p><p>失敗談連載の次は穴井さんの<a href="/articles/20220602a/">int32 型のサロゲートキーが数年でオーバーフローしそうになった件</a>です。</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/DynamoDB/">DynamoDB</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A/">振り返り</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      
      <comments>https://future-architect.github.io/articles/20220601b/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>失敗談連載2022を始めます</title>
      <link>https://future-architect.github.io/articles/20220601a/</link>
      <guid>https://future-architect.github.io/articles/20220601a/</guid>
      <pubDate>Tue, 31 May 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220601a/the-eleventh-hour-g4dea65fba_1280.jpg&quot; alt=&quot;&quot; width=&quot;800&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220601a/the-eleventh-hour-g4dea65fba_1280.jpg" alt="" width="800" height="531"><p>こんにちは。技術ブログ運営の伊藤です。<br>今回は、タイトルの通り、普段仕事している中での失敗談を集めた連載開始のインデックス記事となります。</p><h2 id="いろんな失敗"><a href="#いろんな失敗" class="headerlink" title="いろんな失敗"></a>いろんな失敗</h2><p>普段、仕事で開発などを進めているとき、そのときのレビューが通過したり、気づきにくい小さなミスなどがあるかと思います。そういった内容がちょっとずつ積もっていき、どこかで障害になったり、性能の劣化を引き起こします。</p><p>はたまた、日頃の作業をしている中で、一つ忘れてしまったがために、クラウドプロバイダーから高額な請求が来てしまうこともあります。<br>そういった、人が作業、開発する上ではどこかに失敗はつきものであるので、本連載を読んで、失敗しそうな落とし穴を事前に把握したり、日々の業務をちょっと気をつけるなどしていただければ幸いです。</p><h2 id="連載スケジュール"><a href="#連載スケジュール" class="headerlink" title="連載スケジュール"></a>連載スケジュール</h2><p>本連載は以下のスケジュールで記事を公開します。<br>扱う内容が変わったり、公開日程がずれることがございますが、ご了承ください。</p><div class="scroll"><table><thead><tr><th>日付</th><th>執筆者</th><th>タイトル</th></tr></thead><tbody><tr><td>6/1</td><td>真野隼記</td><td><a href="/articles/20220601b/">GoとDynamoDBを用いた開発で反省していること</a></td></tr><tr><td>6/2</td><td>穴井智史</td><td><a href="/articles/20220602a/">int32 型のサロゲートキーが数年でオーバーフローしそうになった件</a></td></tr><tr><td>6/3</td><td>原忠辰</td><td><a href="/articles/20220603a/">Go言語で定数として扱いたいmapを毎回アロケートさせて性能劣化した話</a></td></tr><tr><td>6/6</td><td>藤井亮佑</td><td><a href="/articles/20220606a/">RDSの自動再起動によるインフラコストの悲劇</a></td></tr><tr><td>6/7</td><td>辻大志郎</td><td><a href="/articles/20220607a/">AWS Lambdaの初期化処理と初期化タイミングの考慮不足によるはまりどころ</a></td></tr><tr><td>6/8</td><td>久保勇暉</td><td><a href="/articles/20220608a/">ユーザー要望で要件が増えてく〜アジャイル開発での落とし穴〜</a></td></tr><tr><td>6/9</td><td>岸下優介</td><td><a href="/articles/20220609a/">GoogleWorkspace SDKのAPIリクエスト間隔は気を付けましょう</a></td></tr></tbody></table></div><h2 id="最後に"><a href="#最後に" class="headerlink" title="最後に"></a>最後に</h2><p>失敗談連載は今年が初の試みになりますが、ジャストアイデアで募ったところ、6名の方が参加してくださいました。</p><p>失敗を経て、現在は修正されているネタなので、失敗からどう回復したか、なども是非読んでいただければと思います。</p><p>その他の連載は以下の連載スケジュールに記載されていたり、Twitterにて告知するので、ぜひ併せてご確認お願いします！</p><ul><li><a href="/articles/20220117a">2022年のブログ連載予定を発表します</a></li><li><a href="https://twitter.com/future_techblog">公式Twitter</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A4%E3%83%B3%E3%83%87%E3%83%83%E3%82%AF%E3%82%B9/">インデックス</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%A4%B1%E6%95%97%E8%AB%87/">失敗談</category>
      
      
      <comments>https://future-architect.github.io/articles/20220601a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>golang.tokyo #32 で go-twowaysql について紹介しました</title>
      <link>https://future-architect.github.io/articles/20220531a/</link>
      <guid>https://future-architect.github.io/articles/20220531a/</guid>
      <pubDate>Mon, 30 May 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220531a/top.jpg&quot; alt=&quot;&quot; width=&quot;1000&quot; height=&quot;560&quot;&gt;

&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220531a/top.jpg" alt="" width="1000" height="560"><h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>TIG 多賀です。 2022/5/19 に開催された <a href="https://golangtokyo.connpass.com/event/246982/">golang.tokyo #32</a> に登壇しましたので報告させていただきます。<br>「自作ライブラリ、ソフトウェアGo自慢大会」ということで、OSS 活動の一環で作成した <a href="https://github.com/future-architect/go-twowaysql">future-architect/go-twowaysql</a> について紹介してきました。</p><h2 id="発表資料"><a href="#発表資料" class="headerlink" title="発表資料"></a>発表資料</h2><p>5分と短めな発表のため、<a href="https://github.com/future-architect/go-twowaysql">go-twowaysql</a> の概要について整理された資料になっていると思いますので、気になる方は以下見てみてください。</p><iframe src="https://docs.google.com/presentation/d/1mkqEEb7eNtkXnW-t_lw3OPmTrD7JoR04SDSvy6WhjPg/embed?start=false&loop=false&delayms=3000" frameborder="0" width="100%" height="550" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><h2 id="さいごに"><a href="#さいごに" class="headerlink" title="さいごに"></a>さいごに</h2><p>昔からよくイベントに観る側として参加していた<a href="https://golangtokyo.connpass.com/event/246982/">golang.tokyo</a> でしたが、良い機会をいただき登壇することができ、嬉しく思います。</p><p><a href="https://github.com/future-architect/go-twowaysql">future-architect/go-twowaysql</a> についても、日々改善を行っていてより使いやすくしていきたいと考えています。イベントの中で上がった、 <code>go:embed</code> 対応はぜひサポートできるようにしたいですね。</p><p>他の方々が発表された OSS ライブラリ、発表資料ともに、<a href="https://golangtokyo.connpass.com/event/246982/">golang.tokyo #32</a> イベントページ内にリンクが載ってます。面白い OSS ライブラリがいくつもありましたので、ぜひ見てみてください。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://future-architect.github.io/articles/20210803a/">Go言語で2WaySQL</a></li><li><a href="https://future-architect.github.io/uroborosql-doc/">uroboroSQL</a></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/OSS/">OSS</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/ORM/">ORM</category>
      
      <category domain="https://future-architect.github.io/tags/2WaySQL/">2WaySQL</category>
      
      
      <comments>https://future-architect.github.io/articles/20220531a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【エネルギー業界】LPガス基礎知識編part2 供給設備</title>
      <link>https://future-architect.github.io/articles/20220530a/</link>
      <guid>https://future-architect.github.io/articles/20220530a/</guid>
      <pubDate>Sun, 29 May 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;p&gt;TIG DXユニット真野です。業界ドメインに詳しくなろうというテーマで、LPガス業界入門編のpart2です。前回の基礎知識編はなるべく幅広く説明しましたが、本記事では供給設備にフォーカスします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<p>TIG DXユニット真野です。業界ドメインに詳しくなろうというテーマで、LPガス業界入門編のpart2です。前回の基礎知識編はなるべく幅広く説明しましたが、本記事では供給設備にフォーカスします。</p><ul><li><a href="https://future-architect.github.io/articles/20220519a/">【エネルギー業界】LPガス基礎知識編  part1</a></li></ul><h2 id="LPガス設備とは"><a href="#LPガス設備とは" class="headerlink" title="LPガス設備とは"></a>LPガス設備とは</h2><p>part1で説明したとおりですが、供給設備と消費設備の2つに分類することができます。</p><img src="/images/20220530a/LPガス設備.png" alt="LPガス設備" width="981" height="511" loading="lazy"><p>供給設備はLPガス会社側の持ち物（つまり資産）で、消費設備が利用者側の資産です。</p><p>少し例外的ですが細かい話をします。消費設備側について業界慣習があり、戸建てでは貸し付け配管、アパートでは無償貸与と言う、LPガス会社側が住宅内のガス管を無償で設置し、代わりに毎月のガス料金に利用料を上乗せして払うようなケースがあります。つまりLPガスの販売業者の所有のまま貸与していることもあります。この辺りは経産省のワーキンググループ<a href="https://www.chugoku.meti.go.jp/policy/seisaku/sekiyu/pdf/p408sub_1_1.pdf">改正液石法省令等・取引適正化ガイドライン説明会資料 p7</a> にも課題感と周知について動きがあります。<a href="https://www.asahi.com/articles/ASPDY722TPCSULFA038.html">LPガス料金、月数千円を上乗せ　違約金20万円請求の業界慣行も：朝日新聞デジタル</a> にもわかりやすくまとまっています。LPガス会社の中の方が執筆した書籍を複数読みましたが、LP会社としても好ましいとは思っておらず、ただ商流上、要請されると断るのが難しいという構造があるようです。</p><p>続いて、供給設備を構成する主な設備について細かく紹介します。図にあるLPと書かれた容器（ボンベ）、圧力調整器、ガスメータについて触れていきます。図には書いていないですが、ボンベ・ガスメーター間には放出防止器や高圧ホースなどがありますが省略します。</p><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><p>ボンベと（私は）よく言いますが、液石法や高圧ガス保安法では”容器”と呼びます。バルク（比較的大容量のＬＰガスを蓄えることが可能なタンク）と対比しての、シリンダー容器を略したシリンダーと呼ぶこともあります。50kg”瓶” と言った、瓶をつけて呼ぶこともあります。業界人と話す時は、大体は”容器”と表現すれば問題ないと思います。</p><p>この容器ですが、part1 でも話した通り、20kg, 50kgなどのサイズの違いがあります。LPガス業者としてはなるべく大きいサイズを設置したほうが配送コストを抑えることができますが、50kg容器にLPガスが充てんされると90kg近くになり、持ち運びとしては限界サイズになるためか、一般家庭用に使われる上限が50kgとなります。工業用ですと<a href="http://www.zenkenkyo.jp/test/propane.php">450~500kgもある</a>ようです。</p><p>50kg容器の持ち運びは担ぐ方法もありますが、<a href="https://www.youtube.com/watch?v=woWn6VcJsdw">転がす</a>方法も一般的です。また、二輪台車（キャリーや、ネコ車と呼ぶことも）で運ぶこともできます。</p><img src="/images/20220530a/二輪台車.jpeg" alt="二輪台車" width="1200" height="655" loading="lazy"><p>二輪台車、現場では <strong>ネコ</strong> と呼ぶことも多いらしく、一輪車じゃなくてもこう呼ぶのが少し新鮮でした。</p><p>ちなみに、家庭用に用いられる容器の素材は、炭素鋼を使用した溶接容器が用いられています。炭素鋼以外だとアルミウム合金製もあるようですが少量です。溶接容器以外だと、継目なし容器や複合容器が存在するようです。海外では、容器が軽い・美観がよい等の理由で、この複合容器（FRP容器（繊維強化プラスチック複合型容器））が選ばれることが増えているそうです。</p><img src="/images/20220530a/image.png" alt="複合容器" width="994" height="746" loading="lazy"><p>※画像は <a href="https://www.kanagawalpg.or.jp/images/201503_p3.pdf">https://www.kanagawalpg.or.jp/images/201503_p3.pdf</a> より。右側が複合容器です</p><p>美観…はわかりませんが、軽いのは良いですね。左は8kg容器で9.6kg、右は7.5kg容器で4.4kgだそうです。どちらも当然、容器だけの重さです。</p><p>日本でも中国工業株式会社さんが2020年8月に、<a href="http://www.ckk-chugoku.co.jp/topics/20200828%2020kgPLACOMPO.pdf">プラコンポ 20kg (FRP 製 20 ㎏型 LP ガス容器)発売のお知らせ</a>を発表していますので、もしかしたら広がっているのかもしれません（まだ私は見たことがないです）。</p><h3 id="容器検査"><a href="#容器検査" class="headerlink" title="容器検査"></a>容器検査</h3><p>容器ですが、充てん期限が存在します。充てん期限を超過した場合、再検査をしないと再度ガスを充填できません。20kg, 50kg容器ですと製造から20年未満5年に1度。20年以上経過すると2年に1度検査する必要があります<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p><p>充てん期限はガチャガチャ写真ですが、こんな感じで記載されています。平成38年、つまり令和8年、西暦2026年の4月までということがわかります。</p><img src="/images/20220530a/充てん期限.jpeg" alt="充てん期限" width="1000" height="628" loading="lazy"><p>通常、LPガス業者では無い我々が気にすることはほとんど無いと思いますが、期限が切れた場合は耐圧検査に回されるか、破棄されることで、安全が保たれています。</p><p>検査が終わると、容器に合格年月が <strong>刻印</strong> されます。月→年の順で打刻されるため、下画像の場合は、5-02で2002年5月に検査を受けたことがわかります。</p><img src="/images/20220530a/容器の刻印.jpeg" alt="容器の刻印" width="1200" height="971" loading="lazy"><p>※画像は <a href="https://www.hyogolpg.or.jp/info20131001.html">https://www.hyogolpg.or.jp/info20131001.html</a> より</p><h3 id="容器の固定"><a href="#容器の固定" class="headerlink" title="容器の固定"></a>容器の固定</h3><p>容器は転倒・転落の防止のため、チェーンで固定されています。</p><img src="/images/20220530a/チェーン.png" alt="チェーン" width="577" height="345" loading="lazy"><p>※ 画像は <a href="http://www.lpg.or.jp/sp/about_lpg/about_lpg04.html">http://www.lpg.or.jp/sp/about_lpg/about_lpg04.html</a> より</p><p>1重、2重のルールですが、経済産業省の<a href="https://www.meti.go.jp/policy/safety_security/industrial_safety/oshirase/2021/06/20210618-01.html">液石法施行規則及び同規則の機能性基準の運用（例示基準）の一部改正について（自然災害対策：充てん容器の流出防止措置）</a>を見ると、洪水浸水想定区域などにおいて1m以上の浸水が予想される場合は2重にすると言った基準があるそうです。</p><p>こういった安全策は何重にも検討・実施されており、安心してガスを使えるありがたみを感じることができます。</p><h2 id="圧力調整器"><a href="#圧力調整器" class="headerlink" title="圧力調整器"></a>圧力調整器</h2><img src="/images/20220530a/調整器.jpeg" alt="調整器" width="1072" height="1072" loading="lazy"><p>※画像は <a href="https://www.katsuraseiki.co.jp/?page_id=287">https://www.katsuraseiki.co.jp/?page_id=287</a> にある 桂精機製作所さんのCA8A-BH065Zより</p><p>圧力調整器（調整器）は容器の中の高い圧力のガスを、コンロなどの消費設備で利用に適した、低い圧力に下げるための設備です。容器内のLPガスの圧力は0.4～1.2MPa程度で、調整器により2.3～3.3kPaまで下げてくれます。容器と調整器の間は、高圧ホースという特殊な管でつながっています。他にも流量調整機能（整圧、閉塞圧力）などの機能も持っていて、途中でガスが使えなかったり流れ過ぎを防止しています。まさに調整の役目です。</p><p>自動切替式（”じきり”と呼ぶことも）の調整器も存在します。これは下図を見るとわかりやすいです。容器が複数系統接続されている場合に、片方が無くなるともう片方に切り替えてくれます。</p><img src="/images/20220530a/圧力調整器による切り替え.png" alt="圧力調整器による切り替え" width="1200" height="683" loading="lazy"><p>※画像は <a href="https://www.lia.or.jp/Portals/0/images/news/kurashi2020_4.pdf">https://www.lia.or.jp/Portals/0/images/news/kurashi2020_4.pdf</a> より</p><p>自動切替式調整器を設置することのメリットですが、例えば片方のボンベを使い切ったタイミングから、予備側を使い切る間に、容器交換に向かえば必ず1本（方系）の容器が空っぽなので、持ち帰り時に楽（ガソリン代も浮く）があります。必ず両系統（図だと2本）交換するような配送の仕組みでは、持ち帰り残量としてのメリットは無いですが、通常の戸建てでは一般的に使われていると思います。1970年ほどから容器の複数構成＋自動切替調整器の組み合わせが多くなったようで、それまではガス切れが日常茶飯事<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>だったようです。</p><p>調整器切り替えの注意としては、必ずしも使用側が完全に0Paになるタイミングで、予備側に切り替わるということではないということです。ゼロ近くまでは利用しますが、圧力が低くなると完全に無くなる前に切り替えられちゃいます。</p><p>切り替わりですが、図のように真ん中の表示が「赤色（シグなりあり）」になっていると、予備側の容器から供給されています。「表示無し」は使用側の容器から供給されていることを示しています。矢印の向いている側が使用側です。</p><p>他にも、二段式調整器という種類の機器があります。マンションなど高層階にガスを届けるには、中圧に落として各戸の前で低圧に落とすという二段階の減圧の仕組みです。</p><ul><li>参考: <a href="https://gas-2syuhan.com/security-management/lp_tool_household/#i-8">https://gas-2syuhan.com/security-management/lp_tool_household/#i-8</a></li></ul><h2 id="中圧"><a href="#中圧" class="headerlink" title="中圧"></a>中圧</h2><p>圧力について、LPガス（プロパンガス）において高圧・中圧・低圧が存在します。高圧はボンベから高圧ガスを通って、調整器で減圧されるまでです。低圧は一般の消費設備が利用する圧力です。中圧は先程述べた通り、マンションなどの配管が長い場合や、工業用（溶接など）などに利用します。</p><div class="scroll"><table><thead><tr><th>種類</th><th>圧力<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></th></tr></thead><tbody><tr><td>高圧</td><td>0.7MPa ～ 1.3MPa</td></tr><tr><td>中圧</td><td>60kPa ～ 80kPa</td></tr><tr><td>低圧</td><td>2.3kPa ～ 3.3kPa</td></tr></tbody></table></div><p>この中圧のまま減圧せずガスを利用するパターンにおいては、中圧対応のガスメーターを利用して計測する場合があります。また、この供給圧力によって、係数を変えて利用量を算出するようです。</p><img src="/images/20220530a/流量換算.png" alt="流量換算" width="1129" height="438" loading="lazy"><p>※画像は愛知時計電機株式会社さんの <a href="https://www.aichitokei.co.jp/wp/wp-content/uploads/gk-ah-020z-1606.pdf">https://www.aichitokei.co.jp/wp/wp-content/uploads/gk-ah-020z-1606.pdf</a> より</p><p>上図の例では、1㎥とガスメータ上は表示されていても、例えば60kPaの圧力で供給された場合、1.5922㎥利用したとカウントするということです。</p><img src="/images/20220530a/中圧設備.png" alt="中圧設備" width="1111" height="271" loading="lazy"><h2 id="ガスメーター"><a href="#ガスメーター" class="headerlink" title="ガスメーター"></a>ガスメーター</h2><p>ガスの使用量を計測するガスメーターについて説明します。</p><h3 id="種類"><a href="#種類" class="headerlink" title="種類"></a>種類</h3><img src="/images/20220530a/マイコンガスメーター.png" alt="マイコンガスメーター" width="1200" height="534" loading="lazy"><p>※画像は <a href="http://www.lpg.or.jp/download/pdf/micom_meter_s.pdf">http://www.lpg.or.jp/download/pdf/micom_meter_s.pdf</a> より</p><p>一般家庭につけられているガスメーターですが、part1でも説明した通り、内部にマイコンが入っており非常に賢い作りになっています。大きくS型、E型の2種類ありますが。それぞれについて説明しますが、機能的には同等です。</p><ol><li>S型（マイコンメーターS）<ul><li>ガスの流量を膜式で計測する（下図の左を参考）</li><li>消費社宅のガス消費パターンを学習する機能があり、自動的に遮断値を設定してくれる</li></ul></li><li>E型（マイコンメーターE）<ul><li>ガスの流量を超音波で計測する。膜式と異なり計量室が不要なので約半分の大きさとなり小型である<ul><li>超音波で、一定距離の往復時間の相違から、流速を求め流量を計測します</li></ul></li><li>微量流量でも数秒で計測できるため、漏洩検知など安全性も向上している</li><li>機能上はS型と同様</li></ul></li></ol><p>それぞれの継続方法の簡単なイメージは次のとおりです。膜式は直接体積を計測しているイメージです。</p><img src="/images/20220530a/計測方法.png" alt="計測方法" width="1200" height="403" loading="lazy"><p>※画像は <a href="http://toma-lpg.com/2017micon_1.pdf">http://toma-lpg.com/2017micon_1.pdf</a> より</p><p>S型ガスメーターは、KHKS 0733(高圧ガス協会規格)で規格化されています<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>。KHKは高圧ガス保安協会の略で、KHKSの最後のSはStandardの意味です。<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></p><p>マイコンメーターにはS型・E型があるというお話をしましたが、さらにS4、SB、E4、EBなどに分かれます。ざっと違いをまとめます。</p><div class="scroll"><table><thead><tr><th>分類</th><th>型</th><th>計測方法</th><th>最大流量</th><th>規格(すべてKHKS 0751に統合される予定)</th></tr></thead><tbody><tr><td>家庭用</td><td>S型</td><td>腹膜式</td><td>2.5㎥</td><td><a href="https://www.khk.or.jp/Portals/0/khk/lpg/kikaku/2022/public%20comment/KHKS%200733(2016).pdf">KHKS 0733</a></td></tr><tr><td>家庭用</td><td>S4型</td><td>腹膜式</td><td>4㎥</td><td><a href="https://www.khk.or.jp/Portals/0/khk/lpg/kikaku/2022/public%20comment/KHKS%200742(2016).pdf">KHKS 0742</a></td></tr><tr><td>家庭用</td><td>E型</td><td>超音波式</td><td>2.5㎥</td><td><a href="https://www.khk.or.jp/Portals/0/khk/lpg/kikaku/2022/public%20comment/KHKS%200741(2016).pdf">KHKS 0741</a></td></tr><tr><td>家庭用</td><td>E4型</td><td>超音波式</td><td>4㎥</td><td><a href="KHKS_0743">KHKS 0743</a></td></tr><tr><td>業務用</td><td>SB型</td><td>腹膜式</td><td>6～16 ㎥/h</td><td><a href="https://www.khk.or.jp/Portals/0/khk/lpg/kikaku/2022/public%20comment/KHKS%200737(2016).pdf">KHKS 0737</a></td></tr><tr><td>業務用</td><td>EB型</td><td>超音波式</td><td>6～16 ㎥/h</td><td><a href="https://www.khk.or.jp/Portals/0/khk/lpg/kikaku/2022/public%20comment/KHKS%200741(2016).pdf">KHKS 0741</a></td></tr></tbody></table></div><p>マイコンメーターで調べると、メーカーごとにこういった型番が出てきて混乱するかと思います。家庭用、業務用などの区別ができると混乱も減るかなと思います。</p><h3 id="マイコンメーターの名称の系譜"><a href="#マイコンメーターの名称の系譜" class="headerlink" title="マイコンメーターの名称の系譜"></a>マイコンメーターの名称の系譜</h3><p>最初に登場するのはマイコンⅠです。1981年ごろに東京ガスさんと松下電器産業さんの共同開発で生まれました。先行で部分的に導入され安全性が高く評価されたため、1987年に全戸普及を図るべく次のような機能を持ったマイコンⅡが発売されました。マイコンⅡは総称のようなもので規格です。6社10型式が申請を出して合格したのを皮切りに広がっていきます。</p><ol><li>異常なガス流量を検知したら遮断する（合計・増加流量遮断）</li><li>異常な長時間使用を検知したら遮断する（継続使用時間遮断）</li><li>微小流量を含むガス流量を、30日継続して検知したら警告表示する（微小漏洩表示）</li></ol><p>1989年には、マイコンⅡが一般家庭用に異常検知ロジックを組んだため、業務用に用いられるように改良したバージョンが登場。マイコンB（業務用）、C（大消費者及び、緩加熱型貯湯式湯沸器仕様世帯用）、L（大口消費者用）です。これで大多数のガスメーターをマイコンメーターに置き換えられるようになったとのことです。設置が進むに連れて、機能強化・改善や寸法の統一など、様々な要望が寄せられました。</p><p>そこで1994年頃から出てきたのがマイコンSです。Ⅱに比べて追加された機能が主に4つあります。Sはスマートメーターの略だと思います。</p><ol><li>最大流用および最大器具流量を学習結果に基づき設定</li><li>メータ上流側の漏れ及び恒久圧力の状態も認知できるように圧力センサーを追加<ul><li>これは配管低圧部側の漏洩検査を省略できるようになり、事業者側のメリットが大きかったとのこと<ul><li>従来は2年に1回、法定点検で手動で検査していたとのこと</li></ul></li></ul></li><li>感震器を内蔵し、震度5相当の地震で遮断</li><li>通信機能<ul><li>Ⅱでは通信機能があるもの、無いものが混在していたため、通信仕様を標準化</li><li><a href="https://www.khk.or.jp/Portals/0/khk/lpg/kikaku/2022/public%20comment/KHKS%200733(2016).pdf">KHKS 0733</a> を見る限り、外部端末に接続できる端子などの決まりがあるようです</li></ul></li></ol><p>その後は超音波型の、E型（おそらく電子式のElectronicから）が登場したといった流れです。</p><ul><li>参考<ul><li><a href="https://www.tokyo-gas.co.jp/letter/2020/07/20200715sp.html">https://www.tokyo-gas.co.jp/letter/2020/07/20200715sp.html</a></li><li><a href="http://www.shmj.or.jp/dev_story/pdf/develop17.pdf">http://www.shmj.or.jp/dev_story/pdf/develop17.pdf</a></li><li><a href="https://www.lia.or.jp/Portals/0/resources/ayumi/05anteiki.pdf">https://www.lia.or.jp/Portals/0/resources/ayumi/05anteiki.pdf</a></li></ul></li></ul><h3 id="交換期限"><a href="#交換期限" class="headerlink" title="交換期限"></a>交換期限</h3><p>マイコンメーターですが交換期限が法律で決まっており、10年（6号より大きいと7年<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>）の期限があります。これは液石法ではなく、計量法で定められています。ガスメーターは供給設備でありLPガス業者側の業務となります。交換のタイミングですがLPガス配送の繁忙期が冬期（寒くなるとガスを使うので当たり前ですね）であるため、閑散期にあたる夏期にメーター交換を行うことが多いようです。</p><p>さらりと6号というワードを出しましたが、これは1時間あたりに何㎥を流すことができるかの単位で、号数と呼びます。例えば、2.5号だと2.5㎥/h、4号だと4㎥/hです。この号数は各メーターの型番にもよく利用されます。</p><p>ちなみに、都市ガスについては16号より大きいと交換期限が7年となります。こちらも計量法と、都市ガスの1㎥あたりの発熱量から分かります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>ざっとLPガスの供給設備について説明しました。設備周りは用語が揺れている気がしたり（ボンベ/容器/シリンダーや、S型/マイコンS/マイコンメーターSなど）、名前の由来が謎（Sってどういう意味なんだろうなど）が多く、調べるのに骨が折れました。</p><p>この記事が初学者の取っ掛かりになれば良いなと思います。最後まで読んでいただき、ありがとうございました。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;"><a href="http://www.zenkenkyo.jp/test/post.php">http://www.zenkenkyo.jp/test/post.php</a> にあるように、製造日や容器サイズで充てん期限が異なります。</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;">数値は <a href="https://fatmag.jp/lpg-pressure-operator/">https://fatmag.jp/lpg-pressure-operator/</a> を参考</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">計量法では、①ガスの総発熱量が90MJ/㎥未満・使用最大流量16㎥以下を10年。②ガスの総発熱量が90MJ/㎥以上・使用最大流量6㎥以下を10年。③1,2以外を7年と記載がある。プロパンの発熱量は99MJ/㎥のため2の条件と考えると、6号未満は10年。6号より大きいと7年となる</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">2022年にKHKS 0751に統合予定だそうです</span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;"><a href="https://www.lia.or.jp/Portals/0/resources/ayumi/03sogyoki.pdf">https://www.lia.or.jp/Portals/0/resources/ayumi/03sogyoki.pdf</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="vertical-align: top; padding-right: 10px;">6.</span><span style="vertical-align: top;"><a href="https://www.khk.or.jp/public_information/public_introduction/publications/standards.html">https://www.khk.or.jp/public_information/public_introduction/publications/standards.html</a> のURLが &quot;s&quot;tandards.html から推測</span><a href="#fnref:6" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Business/">Business</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%A5%AD%E7%95%8C%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3/">業界ドメイン</category>
      
      <category domain="https://future-architect.github.io/tags/LP%E3%82%AC%E3%82%B9%E6%A5%AD%E7%95%8C/">LPガス業界</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A8%E3%83%8D%E3%83%AB%E3%82%AE%E3%83%BC%E6%A5%AD%E7%95%8C/">エネルギー業界</category>
      
      
      <comments>https://future-architect.github.io/articles/20220530a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Future Tech Night #22 Flutter勉強会より：Flutterアプリのperformance測定と基本的な実装ポイント</title>
      <link>https://future-architect.github.io/articles/20220525a/</link>
      <guid>https://future-architect.github.io/articles/20220525a/</guid>
      <pubDate>Tue, 24 May 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;こんにちは。TIGの藤田です。&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>こんにちは。TIGの藤田です。<a href="https://future.connpass.com/event/242858/">Future Tech Night #22 Flutter勉強会</a>にてお話した「Flutterアプリのperformance測定と基本的な実装ポイント」についてご紹介します。</p><h2 id="コンテンツ"><a href="#コンテンツ" class="headerlink" title="コンテンツ"></a>コンテンツ</h2><ol><li>Performanceについて</li><li>DevToolsについて</li><li>レンダリングのプロファイリングデモ</li><li>メモリのプロファイリングデモ</li></ol><h2 id="Performanceについて"><a href="#Performanceについて" class="headerlink" title="Performanceについて"></a>Performanceについて</h2><p>複数の観点があります。Flutter GitHub リポジトリではPerformance issue を４カテゴリに分けて管理しています： <a href="https://github.com/flutter/flutter/issues?q=is:open+label:%22perf:+speed%22+sort:updated-asc+">perf: speed</a>, <a href="https://github.com/flutter/flutter/issues?q=is:open+label:%22perf:+memory%22+sort:updated-asc+">perf: memory</a>, <a href="https://github.com/flutter/flutter/issues?q=is:open+label:%22perf:+app+size%22+sort:updated-asc+">perf: app size</a>, <a href="https://github.com/flutter/flutter/issues?q=is:open+label:%22perf:+energy%22+sort:updated-asc+">perf: energy</a>.<br>“Speed”には、レンダリング速度、ファイルIOなども影響します。</p><h2 id="DevToolsについて"><a href="#DevToolsについて" class="headerlink" title="DevToolsについて"></a>DevToolsについて</h2><p><a href="https://docs.flutter.dev/development/tools/devtools/overview">公式ページ</a>でも紹介されるように、Widget inspector, CPU profiler, Memory view, Performance view, Network view, Logging view, Debug機能を持っています。勉強会では、Performance viewと、Memory viewを紹介しました。<br><img src="/images/20220525a/image.png" alt="DevToolsについて" width="1200" height="674" loading="lazy"></p><p>以前に技術ブログで紹介した<a href="https://future-architect.github.io/articles/20220317a/">Performance viewの使い方</a>の振り返りにもなりましたが、勉強会では、さらに実装上の注意点をデモを交えてお話しました。<br><img src="/images/20220525a/image_2.png" alt="DevToolsによる性能測定(Performance View)" width="1200" height="676" loading="lazy"></p><img src="/images/20220525a/image_3.png" alt="Frameと処理時間" width="1200" height="675" loading="lazy"><p>レンダリングPerformanceについての実装上の注意の基本的な3点を紹介しました。3番目については、デモとコードを用いてお話しています。<br><img src="/images/20220525a/image_4.png" alt="レンダリングPerformance tips" width="1200" height="676" loading="lazy"></p><p>Memory viewの紹介もしています。機能は大きく分けると以下の2つで、１）Memory 使用量とイベントの時系列グラフ表示、２）Memory上のインスタンス分析（SnapShot時の分析と、trace分析の2種類）になります。<br><img src="/images/20220525a/image_5.png" alt="DevToolsによる性能測定 Memory View" width="1200" height="676" loading="lazy"></p><h2 id="レンダリングのプロファイリングデモ"><a href="#レンダリングのプロファイリングデモ" class="headerlink" title="レンダリングのプロファイリングデモ"></a>レンダリングのプロファイリングデモ</h2><p>レンダリングPerformance Tips「３）大きなGridやListは画面表示部のみをBuildする」の例をDevToolsの使い方と合わせて紹介しました。Animationを含む100個のWidgetをスクロール表示するために、1つめはColumnとSingleChildScrollViewを使用、2つめはListView.builderを使用しています。</p><p>１）ColumnとSingleChildScrollViewを使用（アンチパターン）</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span> <span class="keyword">as</span> math;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SCScrollViewPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> SCScrollViewPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _SCScrollViewPageState createState() =&gt; _SCScrollViewPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_SCScrollViewPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">SCScrollViewPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> _itemCount = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">var</span> screenSize = MediaQuery.of(context).size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&#x27;SingleChildScrollView List&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: SizedBox(</span><br><span class="line">          width: screenSize.width * <span class="number">0.6</span>,</span><br><span class="line">          height: screenSize.width * <span class="number">0.8</span>,</span><br><span class="line">          child: SingleChildScrollView(</span><br><span class="line">            child: Column(</span><br><span class="line">              children: &lt;Widget&gt;[</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; _itemCount; i++) <span class="keyword">const</span> Item(),</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Item(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;Item&gt; createState() =&gt; _ItemState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ItemState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">Item</span>&gt; <span class="title">with</span> <span class="title">SingleTickerProviderStateMixin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">late</span> <span class="keyword">final</span> _controller = AnimationController(</span><br><span class="line">    vsync: <span class="keyword">this</span>,</span><br><span class="line">    duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(seconds: <span class="number">10</span>),</span><br><span class="line">  )..repeat();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">    _controller.dispose();</span><br><span class="line">    <span class="keyword">super</span>.dispose();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> SizedBox(</span><br><span class="line">      height: <span class="number">200</span>,</span><br><span class="line">      child: AnimatedBuilder(</span><br><span class="line">        animation: _controller,</span><br><span class="line">        child: Image.asset(<span class="string">&#x27;assets/images/dash.png&#x27;</span>, fit: BoxFit.fitHeight),</span><br><span class="line">        builder: (_, Widget? child) &#123;</span><br><span class="line">          <span class="keyword">return</span> Transform.rotate(</span><br><span class="line">            angle: _controller.value * <span class="number">2.0</span> * math.pi,</span><br><span class="line">            child: child,</span><br><span class="line">          );</span><br><span class="line">        &#125;,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DevToolsのPerformance viewで確認すると、Frame毎に、画面に表示されないWidgetもすべてBuildされてしまっています。<br><img src="/images/20220525a/build_100loop.gif" alt="DevToolsのPerformance viewで確認" width="1200" height="442" loading="lazy"></p><p>２）ListView.builderを使用<br>上の１）と同じItem Widgetを、ListView.builderを使用して表示すると、Frame毎に、画面に表示される数個のWidgetのみがBuildされることが分かります。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:math&#x27;</span> <span class="keyword">as</span> math;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LVBuilderPage</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> LVBuilderPage(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _LVBuilderPageState createState() =&gt; _LVBuilderPageState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_LVBuilderPageState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">LVBuilderPage</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> _itemCount = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">var</span> screenSize = MediaQuery.of(context).size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(</span><br><span class="line">        title: <span class="keyword">const</span> Text(<span class="string">&#x27;ListViewBuilder List&#x27;</span>),</span><br><span class="line">      ),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: SizedBox(</span><br><span class="line">          width: screenSize.width * <span class="number">0.6</span>,</span><br><span class="line">          height: screenSize.width * <span class="number">0.8</span>,</span><br><span class="line">          child: ListView.builder(</span><br><span class="line">            itemCount: _itemCount,</span><br><span class="line">            itemBuilder: (context, index) &#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">const</span> Item();</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/20220525a/build_listviewbuilder.gif" alt="DevToolsのPerformance viewで確認" width="1200" height="442" loading="lazy"><h2 id="メモリのプロファイリングデモ"><a href="#メモリのプロファイリングデモ" class="headerlink" title="メモリのプロファイリングデモ"></a>メモリのプロファイリングデモ</h2><p><a href="https://docs.flutter.dev/development/tools/devtools/memory">Flutter DevTools公式サイトのMemory view解説ページ</a>で紹介される<a href="https://github.com/flutter/devtools/tree/master/case_study/memory_leaks/images_1_null_safe">Case Study</a>を利用して、Memory viewの簡単な説明をしました。Network経由でサイズの大きな画像を多数連続して読み込んで表示するデモアプリのMemory使用を可視化しています。</p><ul><li>メモリ使用状況を時系列にグラフで確認できます。ユーザイベント、Heapメモリ、Nativeメモリ、Garbage collection (GC)などが表示されています。</li><li>メモリ使用のスパイク(40%以上)を検知してDevToolsが自動でSnapShotを取得（手動でも可能）して、その時のメモリ使用状況を分析できるようになっています。</li><li>以下ではImageCache PackageのObject数が急増していることを確認しています。</li></ul><img src="/images/20220525a/memory_demo.gif" alt="メモリのプロファイリングデモ" width="1200" height="661" loading="lazy"><p>補足：正確なPerformance測定は実機を用いた「Profile mode」での測定を前提としていますが、勉強会デモでは画面表示のためシミュレータのdebug modeでの確認としています。</p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><ul><li>Android studioでも同じようにPerformance測定できますか？<br>→ Android studioに、Flutter pluginをインストールすることでDevToolsも使用可能になります。参考：<a href="https://docs.flutter.dev/development/tools/devtools/android-studio">https://docs.flutter.dev/development/tools/devtools/android-studio</a></li><li>実業務での使用事例はありますか？<br>→ 現在のところは、開発プロセスに組み込んでの使用はしていませんが、課題発生時の原因究明に役立つと見込んでいます。</li></ul><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>Performanceについても<a href="https://docs.flutter.dev/development/tools/sdk/release-notes">Flutter stable release</a>で毎回向上していて更新が多く注目度の高い開発ポイントだと分かります。DevToolsをFlutterアプリのPerformance課題解決と品質向上に役立てたいところです。</p><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li>Flutter DevTools公式サイトのMemory view解説ページ<ul><li><a href="https://docs.flutter.dev/development/tools/devtools/memory">https://docs.flutter.dev/development/tools/devtools/memory</a></li></ul></li></ul>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/%E6%80%A7%E8%83%BD%E6%A4%9C%E8%A8%BC/">性能検証</category>
      
      <category domain="https://future-architect.github.io/tags/Flutter/">Flutter</category>
      
      <category domain="https://future-architect.github.io/tags/DevTools/">DevTools</category>
      
      
      <comments>https://future-architect.github.io/articles/20220525a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>golang.tokyo #32を主催しました</title>
      <link>https://future-architect.github.io/articles/20220524a/</link>
      <guid>https://future-architect.github.io/articles/20220524a/</guid>
      <pubDate>Mon, 23 May 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220524a/image.png&quot; alt=&quot;&quot; width=&quot;256&quot; height=&quot;256&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;The Gopher character is based on the Go mascot</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220524a/image.png" alt="" width="256" height="256" loading="lazy"><p>The Gopher character is based on the Go mascot designed by Renée French.<br>この図柄はtenntennさん作成です</p><p><a href="https://golangtokyo.connpass.com/event/246982/">golang.tokyo #32</a>を主催しました。Futureが社外向けに行なっている<a href="https://future.connpass.com/">Future Tech Night</a>という、だいたい月次で行なっている勉強会があり、今月はGoですかね、という話をしていたのですが、どうせなら外部の人にも登壇してもらう場にして盛り上げて、集客もたくさんしよう、という感じでgolang.tokyoとしての開催にすることにしました。僕はオープニングと司会進行をやりました。</p><iframe src="https://docs.google.com/presentation/d/e/2PACX-1vS_puMX7qVj6pFxR8b1dfU0C9QIpVhY5MGFhP7itvjyugapignGenhuJmdJSc0A7mtPoI23_-kB0bXH/embed?start=false&loop=false&delayms=3000" frameborder="0" width="960" height="569" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe><p>IT業界ではよく英語を学べとか一次情報（たいてい英語）に触れろとか言われますが、日本語での発表とかもコミュニティが育っていけば価値があると思っています。Rubyとか海外の人が来てくれたりしますしね。そういう風に日本のGoコミュニティが育っていけばいいな、と思うのですが、そのためには「日本発」を増やしていく必要があると思っています。</p><p>golang.tokyoの趣旨である、Goの業務利用を推進するというのはうまくいっていて、設立当初よりもGoを活用している企業がだいぶ増えてきていると感じます。一方で、日本発を増やしていくには、「自分で作ったぞ！」とかをもっとアピールできる場を作りたいと思っていました。日本で大きなGoのイベントというとGo Conferenceですが、これは募集期間が長めということもあり、作ったものを気軽に発表する場としては敷居が高くなってしまっているし、CfPの競争率も高いです。どうしても「1.Xバージョンで追加された新機能！」みたいなキャッチーなものとかが選ばれがちで、「うちの社内で困っていたこういう問題を解決したい！」みたいな、超現場ニーズみたいなものは選ばれにくいように思います。</p><p>そういうこともあって、Go自慢大会を今回開催させていただきました。</p><h1 id="力強い発表の数々"><a href="#力強い発表の数々" class="headerlink" title="力強い発表の数々"></a>力強い発表の数々</h1><p>今回は1週間程度募集期間を設けて公募しました。多すぎたら抽選にしようと思いましたが、11人なので全員当選となりました。</p><p>実際に使っているというものも多く、リアルな職場のニーズを捉えて作られていたり、なんか魂がこもっているな、という発表が多くて楽しかったです。</p><div class="scroll"><table><thead><tr><th>発表</th><th>URL</th><th>実装の動機</th></tr></thead><tbody><tr><td>濱田洋太</td><td><a href="https://github.com/yohamta/dagu">github.com/yohamta/dagu</a></td><td>データ処理（ETL）バッチ群の依存関係の可視化、運用効率化</td></tr><tr><td>satoken</td><td><a href="https://github.com/sat0ken/go-tcpip">github.com/sat0ken/go-tcpip</a></td><td>プロトコルを学ぶためで業務用ではありません</td></tr><tr><td>convto / 奥村 優哉 (株式会社Kyash)</td><td><a href="https://github.com/convto/bit">github.com/convto/bit</a></td><td>バイナリをbit表現に変換するためのエンコーディングライブラリで、バイナリを解釈するようなプログラムのlogやデバッグのために作りました。 具体的な動機は <a href="https://convto.hatenablog.com/entry/2022/05/08/160157">https://convto.hatenablog.com/entry/2022/05/08/160157</a> に詳しいです</td></tr><tr><td>issei (Univ.Ryukyu)</td><td><a href="https://github.com/Issei0804-ie/who-is-in-a-lab">github.com/Issei0804-ie/who-is-in-a-lab</a></td><td>研究室の先輩からお願いがありソフトウェアを作成しました</td></tr><tr><td>澤田晋之介 (株式会社サイバーエージェント)</td><td><a href="https://github.com/Warashi/wrapmsg">github.com/Warashi/wrapmsg</a></td><td>fmt.Errorf でエラーをwrapするときのメッセージを統一するべく定めたコード規約をlinterとして実装しました</td></tr><tr><td>aereal</td><td><a href="https://github.com/aereal/pkgboundaries">github.com/aereal/pkgboundaries</a></td><td>clean architectureなどプロジェクトごとに依存関係の方向を規定したいことがあります。このツールはJSONで定めたルールを与えてgo vetツールとして実行すると不正な依存（import）を発見してくれます。</td></tr><tr><td>多賀聡一朗 (フューチャー株式会社)</td><td><a href="https://github.com/future-architect/go-twowaysql">github.com/future-architect/go-twowaysql</a></td><td>2-Way SQL 形式の DB アクセスライブラリのニーズがあり作成しました</td></tr><tr><td>小山健一郎 (GMOペパボ株式会社)</td><td><a href="https://github.com/k1LoW/runn">github.com/k1LoW/runn</a></td><td>OpenAPI Documentを使ったGoのAPIサーバを開発している時、複数のAPIをまたいでかつ、データベースのデータを参照しながらのテストをOpenAPI Documentライクに簡単に書けるようにしたいというニーズ</td></tr><tr><td>辻大志郎 (フューチャー株式会社)</td><td><a href="https://github.com/future-architect/awsmfa">github.com/future-architect/awsmfa</a></td><td>以下のニーズによるものです・AWS CLIにおけるMFA認証を効率的に実施したい・簡単にローカルPCにインストールして使えるようにしたい</td></tr><tr><td>原 慧士 (GMOペパボ株式会社)</td><td><a href="https://github.com/harakeishi/whris">github.com/harakeishi/whris</a></td><td>証明書の発行などで該当のドメインのAレコードがどこの管理サーバーに向いているかを１コマンドで調べれるように作成しました</td></tr><tr><td>富樫 知基</td><td><a href="https://github.com/toga4/go-retryabletransport">github.com/toga4/go-retryabletransport</a></td><td>httputil.ReverseProxyを使った実装でHTTPリクエストのリトライをRoundTripperでやりたかった</td></tr></tbody></table></div><p>発表は<a href="https://go.dev/play/p/KKfF9zIJPO4">Goのコード</a>で順番を決めました。あ、Playgroundは常に同じ結果になるのでローカルで実行していますよ。</p><p>当社からも、多賀さんと辻さんの2人が発表してくれました。</p><h1 id="今後"><a href="#今後" class="headerlink" title="今後"></a>今後</h1><p>この場はきっと、定期的に開催して行った方が良いのだろうな、と思っています。目標があればそれに向けて頑張ろうという人も出てくるでしょう。また、OSSを開発に利用する人は多いと思いますが、業務のコードのOSS化の促進の啓発にも繋がると思います。今回、多少手伝ってもらったところはありますが、多くの部分を1人で運営できたので、省力運営は実現できましたので、定期的な運営もできそうです。</p><p>3ヶ月ごとぐらいの開催とかだと良いでしょうかね？</p>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Programming/">Programming</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E7%99%BB%E5%A3%87%E3%83%AC%E3%83%9D%E3%83%BC%E3%83%88/">登壇レポート</category>
      
      <category domain="https://future-architect.github.io/tags/Go/">Go</category>
      
      <category domain="https://future-architect.github.io/tags/%E5%8B%89%E5%BC%B7%E4%BC%9A/">勉強会</category>
      
      <category domain="https://future-architect.github.io/tags/golang-tokyo/">golang.tokyo</category>
      
      
      <comments>https://future-architect.github.io/articles/20220524a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>【エネルギー業界】LPガス基礎知識編</title>
      <link>https://future-architect.github.io/articles/20220519a/</link>
      <guid>https://future-architect.github.io/articles/20220519a/</guid>
      <pubDate>Wed, 18 May 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220519a/LPボンベ.jpeg&quot; alt=&quot;&quot; width=&quot;1200&quot; height=&quot;589&quot; loading=&quot;lazy&quot;&gt;

&lt;p&gt;※画像は&lt;a</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220519a/LPボンベ.jpeg" alt="" width="1200" height="589" loading="lazy"><p>※画像は<a href="https://twitter.com/TOYSCABIN/status/1452575185282875399?s=20&t=J0rViIgbnCf7-Uxfj06ooA">トイズキャビンさんの1/24スケール</a>プロパンガスのガチャガチャです。</p><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>TIG真野です。業界ドメインに詳しくなろうというテーマで、LPガス業界について触れていきます。</p><p>この記事はLPG業界知識の超入門編です。新規参画のメンバーのオンボーディングで何度か受け入れの紹介をしましたが、高頻度で繰り返し説明したことをこの記事でまとめます。かなり基礎的な内容も含みますが、個別の詳細な内容は別記事にて紹介します。この記事では各領域を説明する記事から基礎的な部分はこちらで、といったリンクを貼られて使われることも想定しています。</p><h2 id="LPガスとは"><a href="#LPガスとは" class="headerlink" title="LPガスとは"></a>LPガスとは</h2><p>LPガスとはLiquefied Petroleum Gasの略で、プロパンとブタンを液化した液化石油ガスです。LPGと略すことも多いです。8割ほどがプロパンであるためプロパンガスが一般名称にもなっています。トップ画像にあるように、ガスボンベに詰められ、都市ガスが通っていない地域のご家庭などで燃料として使われています。当然、ガスボンベを定期的に交換しないとガスが利用できないため直感的にはかなり手間がかかるインフラだと感じますが、その分ガスボンベは各家庭など供給先単位で独立しているため、災害に強いとされています<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p><p>対して、都市ガスは道路の下のガス管を経由して供給されます。日本ガス業界さんのページからわかりやすい比較図をお借りすると、以下のような物流の違いがあります。都市部でよく見るガスホルダーは都市ガスだけにあるということが分かると思います。</p><img src="/images/20220519a/供給の違い.png" alt="供給の違い" width="1200" height="743" loading="lazy"><p>※画像は <a href="https://www.gas.or.jp/chigai/">https://www.gas.or.jp/chigai/</a> より</p><p>上図のLPガスで補足すると、充填所（じゅうてんじょ）は、ガスボンベにLPガスを詰めることを指します。配送者はトラックで各需要家（エネルギー業界では供給先のお客様を指す）に充填されたボンベと、使用済みで空っぽになったボンベを交換します。後で説明しますが、家庭用でよく見るLPガスが50kg入るボンベだとフル充填で86kgほどになるのでかなり重く運搬が大変です。充填所のスタッフの方や、配送員さんには感謝しかないですね。</p><p>また、よく混乱しやすい点としては、都市ガスはLNG（メタンを主成分に持つ液化天然ガス）で、ガスの種類自体が異なります。理由はLPガスの方が凝固点が高い<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>（マイナス42度。都市ガスはマイナス162度）である点や、LPガスの方が同じ体積で倍以上の熱を出すことができるなど、運搬用途として適しているから使い分けているのだと思います。この燃焼効率が良いという特性から、街の中華料理屋さんなど火力が必要な一部の飲食店では、都市ガスエリアでありながらLPガスを契約する場合もあるそうです<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>。</p><p>その他の利用用途としては、工業向けや、LPG車（タクシーなどに多いですよね）があります。現在、私の自宅は都市ガスですが、鍋を食べる時は<a href="https://www.amazon.co.jp/dp/B008R7OOJ6/">イワタニ カセットフー 達人スリム</a>さんにいつもお世話になりますが、これもLPガスが詰まっています（主成分はブタンになるそうですが）。</p><h2 id="LPガス市場について"><a href="#LPガス市場について" class="headerlink" title="LPガス市場について"></a>LPガス市場について</h2><p>そんなLPガス業界の需要動向ですが、1996年度1970万トンがピークで、2021年以降は1400万トン程度と減少傾向にあります<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>。</p><p>「ガス事業の現状<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>」を見ると需要家数は2013年度ベースで、都市ガス2,900万件、簡易ガス（後述します）140万件、LP ガスが約2,400万件なので、だいたい46%ほどがLPガスを利用しています。特筆すべきはその事業者数で、都市ガスは209社ですが、LPガス販売事業は21,052社です。都市ガスはどうしても導管等に必要な設備投資が大きく規模の経済性が働くのですが、LPガスはボンベ配送が地域密着になるため事業者数が多くなるのでしょう。</p><h2 id="LPガス事業について"><a href="#LPガス事業について" class="headerlink" title="LPガス事業について"></a>LPガス事業について</h2><p>ガス事業ですが、大きく3つに分割できます。</p><ol><li><strong>一般ガス事業</strong><ol><li>いわゆる導管でガスを供給する、都市ガスです</li></ol></li><li><strong>簡易ガス事業</strong><ol><li>70戸以上の団地に対して、LPガスを導管で一括で供給する方式</li><li>業界ではコミュニティガス事業とも呼ばれているようです</li></ol></li><li><strong>LPガス販売事業</strong><ol><li>充填したボンベを需要家に対して輸送・供給する方式</li><li>導管を使っていても、70戸未満の場合はこちらになる</li></ol></li></ol><p>簡易ガス事業がLPガス販売事業と分けられているのは、根拠となる法令が異なるからです。一般ガス事業と簡易ガス事業はガス事業法、LPガス販売事業は液石法（液化石油ガスの保安の確保及び取引の適正化に関する法律）の法令が管理されています。本記事では法律の詳細には触れませんが、根拠となる法令が異なるということは知っておくと良いでしょう。</p><h2 id="LPガスの需要家への料金請求"><a href="#LPガスの需要家への料金請求" class="headerlink" title="LPガスの需要家への料金請求"></a>LPガスの需要家への料金請求</h2><p>一般家庭の請求ですが、大体月に1回の検針（ガスメーターの数値を読み取ること）で、ガスの使用量をもとに料金が決定します。物理的に現地に訪問して検針する方法もあれば、何かしらのスマートデバイス経由で読み取るケースもあります。例えば、5/1に101㎥(立方メートルですが、<strong>りゅうべい</strong> と呼ぶことが多い)、6/1に106㎥だった場合、5月分は5㎥分の従量料金を請求するという形です（正確には基本料金も上乗せになるでしょう）。</p><p>この5㎥はどれくらいの使用量でお値段がいくつなんだという話ですが、200リットルの浴槽だと、約0.3㎥のLPガスを使用すれば15℃の水から40℃のお湯にすることができるそうです<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>。 16回ほどお風呂にはいれるくらいでしょうか。料金は都道府県ごとに相場が異なりそうですが、<a href="https://selectra.jp/lpgas/guides/ryokin/tekisei">Selectra</a>さんで見てみると、東京都で3,190円ほどでした。2022年5月の国際情勢を見ると、今後はさらに値上がっていくでしょう…。価格決定のメカニズムについて興味がある方は、CP(contract price)について調べると良いと思います。</p><h2 id="産気率"><a href="#産気率" class="headerlink" title="産気率"></a>産気率</h2><p>さきほどガスの使用量が5㎥と例を上げましたが、これは50kgボンベのどれくらい消費したでしょうか。㎥→kgの変換は産気率を用います。産気率ですが、気温によっても変わりますが、日本LPガス協会が出した数値だと、0.458㎥/kg だそうです。</p><ul><li><a href="https://www.j-lpgas.gr.jp/news/files/CO2_guidline.pdf">プロパン、ブタン、ＬＰガスのＣＯ２排出原単位に係るガイドライン - PDF</a></li></ul><p>これをもとにすると、 5[㎥]/ 0.458[㎥/kg] ≒ 10.9[kg] です。50kgボンベですと×5回弱分の消費量ですので、仮に30日5㎥だと、150日ほどで1本消費。1本ごと交換するのであれば、年に2回ほどボンベ交換を行うイメージでしょうか。</p><h2 id="LPガス設備について"><a href="#LPガス設備について" class="headerlink" title="LPガス設備について"></a>LPガス設備について</h2><p>大きく、<strong>供給設備</strong>、<strong>消費設備</strong>の2種類に分かれることが特徴です。</p><img src="/images/20220519a/1-2.gif" alt="供給設備・消費設備" width="472" height="304" loading="lazy"><p>※画像は<a href="https://www.kumalpg.or.jp/anshin.html">熊本県LPガス協会</a>さんのページより</p><p>供給設備ですが、図にあるようにLPボンベからガスメータの出口までが供給設備です。消費設備は、コンロや給湯器などの設備を指します。供給設備はLPガス会社側の持ち物であるため、当然ですがガスメーターを消費者側で自由に取り替えたりできません（そもそも、国家資格が必要です）。</p><p>さて、供給設備の重要な要素の1つであるガスメーターですが、中にはマイコンが入っていて非常に賢い作りになっています。24時間ガスの使用状態を見守っており、ガス漏れ、ガス機器の消し忘れの疑い、や震度5以上の地震発生などの非常時には、ガスを自動的にストップします。電気のブレーカーのようで安全な仕組みです。安全性については<a href="https://www.amazon.co.jp//dp/4778204638">都市ガスはどのようにして安全になったのか?</a> という書籍に詳しく述べられています。東京ガスさんの<a href="https://www.tokyo-gas.co.jp/letter/2020/07/20200715sp.html">◆今日は「何の日」？ ◆ 知られざる「ガスメーター」の歴史</a>にもダイジェストで書かれているので、興味がある方は読むと学びになります。</p><p>ガスボンベですが、大体の一般家庭では2本設置されます（場所が取れず、1本の場合もありえますし、使用量次第では3本以上設置されることもあります）。理由ですが、急な使用量の急増でガスが切れる恐れを極力なくすことや、配送の効率化（持ち帰り時に空っぽになっていることが作業負荷としても良い）がよく説明されます。</p><h2 id="集中プロパン方式（集団供給方式）"><a href="#集中プロパン方式（集団供給方式）" class="headerlink" title="集中プロパン方式（集団供給方式）"></a>集中プロパン方式（集団供給方式）</h2><img src="/images/20220519a/lpg-stand-alone-house2.png" alt="集中プロパン方式" width="402" height="223" loading="lazy"><p>※画像は <a href="https://fatmag.jp/lpg-stand-alone-house/">https://fatmag.jp/lpg-stand-alone-house/</a> より</p><p>供給方法ですが、供給設備:需要家=1:1（個別供給システムとも呼びます）ではなく、1:Nになることがあります。これを集中プロパン方式と言います。この場合は、需要家ごとに料金を請求したいのでガスメーターも複数存在することになります。集中プロパン方式が70戸以上ですと、簡易ガス事業になります。</p><p>簡易ガスとみなすときの注意ですが、供給設備が1つに紐づく需要家が70戸以上とは限らず、同じ団地など区画であることが重要だそうです。また、LPガス会社の事業統合などで、自社あるエリアが70を超えると、簡易ガス扱いになるとのこと。<a href="http://www.kan-eki.jp/pdf/kensyukai/20130520-4.pdf">関東液化石油ガス協議会 保安管理者研修会 研修資料 簡易ガス事業について - 関東経済産業局 ガス事業課</a> のp33に詳しいです。</p><p>LPガス容器庫ですが、次のようなイメージです。集中プロパンですと、大体のケースで供給設備に接続されたボンベも2本より大きくなるでしょう。</p><img src="/images/20220519a/info_work03.jpg" alt="LPガス容器庫" width="300" height="200" loading="lazy"><p>※画像は <a href="http://godo-gas.co.jp/godo-gas/">http://godo-gas.co.jp/godo-gas/</a> より</p><p>集中プロパン方式では、ボンベの代わりにバルク貯槽を用いる方式があります。バルクローリで直接LPガスを充填できるので、配送の合理化、保安の高度化、美観の向上など多くの利点があります。</p><img src="/images/20220519a/image.png" alt="バルク貯槽" width="1087" height="577" loading="lazy"><p>※画像は <a href="http://www.nichidankyo.gr.jp/toku/chapter07/pdf/ch07_07.pdf">http://www.nichidankyo.gr.jp/toku/chapter07/pdf/ch07_07.pdf</a> より</p><p>バルクの場合は、いちいちボンベに詰め替える必要も無いため、かなり配送の合理化ができそうなことが直感的に分かります。</p><p>集団供給方式と並べて、戸建てに対する個別の供給は、戸別供給方式とも呼びます。</p><h2 id="ボンベについて"><a href="#ボンベについて" class="headerlink" title="ボンベについて"></a>ボンベについて</h2><p>ガスボンベですが、複数の大きさが存在します。サイズはどれくらいのLPガスを充填できるかで分けられており50kg、20kgがよく用いられています。おそらくLPガス事業者にとってはなるべく大きなサイズのボンベを設置したほうが有利でしょうが、持ち運びや設置場所などの問題で20kgなど小さな容量のボンベが用いられます。各容量別のサイズについては<a href="https://fatmag.jp/lpg-cylinder_size/">プロパンガス ボンベのサイズ（寸法）について ２Kg ～ ５０Kg | ファトマグ</a> にまとめがありました。</p><p>その他、ベーパーライザーと呼ばれる強制気化装置の存在があります。多量のガスを使用する場では、ボンベからの自然気化によるガス量だけでは供給が追いつかないため、LPG液をベーパーライザーに渡して、温水や電熱で液体を気化させます。これに対応したボンベが、ベーパーライザー用のボンベです。ベーパー瓶と呼ぶこともあります。</p><img src="/images/20220519a/50kg_pr.jpg" alt="ベーパー対応ボンベ" width="100" height="250" loading="lazy"><p>違いですが、緑（真ん中）と赤（左）のバルブが2種類ついていることが特徴です。緑のバルブからは気化したガスが、赤いバルブからは液体のままでてきます。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>ざっと新規参画者に概況をインプットするときにお伝えする内容をまとめました。エネルギー業界は昨今の世界情勢もあり非常に注目されていて面白い領域です。業界の将来像（注目されている技術）や最新動向（自由化など）といった内容や、各領域についても、もっとディープダイブした内容を紹介していこうと思います。</p><p>2022.05.30 パート2も公開しました。</p><ul><li><a href="/articles/20220530a/">【エネルギー業界】LPガス基礎知識編part2 供給設備 </a></li></ul><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">東日本大震災でも活躍したというニュースがありました。分散型で軒下在庫があり、劣化しないといった特性があります。 <a href="https://www.enecho.meti.go.jp/about/special/johoteikyo/lpgas.html#:~:text=%E6%9D%B1%E6%97%A5%E6%9C%AC%E5%A4%A7%E9%9C%87%E7%81%BD%E3%81%A7%E3%82%82%E5%AE%9F%E8%A8%BC%E3%81%95%E3%82%8C,%E3%81%97%E3%81%A6%E7%A8%BC%E5%83%8D%E3%81%97%E3%81%BE%E3%81%99%E3%80%82">https://www.enecho.meti.go.jp/about/special/johoteikyo/lpgas.html#:~:text=東日本大震災でも実証され,して稼働します。</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="vertical-align: top; padding-right: 10px;">2.</span><span style="vertical-align: top;"><a href="https://www.gas.or.jp/chigai/">https://www.gas.or.jp/chigai/</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="vertical-align: top; padding-right: 10px;">3.</span><span style="vertical-align: top;">もちろん、中華料理屋さん以外の飲食店や、工場などでも必要なケースはあると思います。 <a href="https://gentosha-go.com/articles/-/30464">https://gentosha-go.com/articles/-/30464</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="vertical-align: top; padding-right: 10px;">4.</span><span style="vertical-align: top;">ＬＰガス業界の現況について: <a href="https://www.meti.go.jp/shingikai/mono_info_service/carbon_neutral_car/pdf/002_06_00.pdf">https://www.meti.go.jp/shingikai/mono_info_service/carbon_neutral_car/pdf/002_06_00.pdf</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li><li id="fn:5"><span style="vertical-align: top; padding-right: 10px;">5.</span><span style="vertical-align: top;"><a href="https://www.meti.go.jp/shingikai/enecho/kihon_seisaku/gas_system/pdf/01_05_00.pdf">https://www.meti.go.jp/shingikai/enecho/kihon_seisaku/gas_system/pdf/01_05_00.pdf</a></span><a href="#fnref:5" rev="footnote"> ↩</a></li><li id="fn:6"><span style="vertical-align: top; padding-right: 10px;">6.</span><span style="vertical-align: top;"><a href="https://gline-fukui.com/faq/gasEquipment/waterHeater/entry-54.html">https://gline-fukui.com/faq/gasEquipment/waterHeater/entry-54.html</a></span><a href="#fnref:6" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/Business/">Business</category>
      
      
      <category domain="https://future-architect.github.io/tags/%E6%A5%AD%E7%95%8C%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3/">業界ドメイン</category>
      
      <category domain="https://future-architect.github.io/tags/LP%E3%82%AC%E3%82%B9%E6%A5%AD%E7%95%8C/">LPガス業界</category>
      
      <category domain="https://future-architect.github.io/tags/%E3%82%A8%E3%83%8D%E3%83%AB%E3%82%AE%E3%83%BC%E6%A5%AD%E7%95%8C/">エネルギー業界</category>
      
      
      <comments>https://future-architect.github.io/articles/20220519a/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>OpenSLOについて</title>
      <link>https://future-architect.github.io/articles/20220518a/</link>
      <guid>https://future-architect.github.io/articles/20220518a/</guid>
      <pubDate>Tue, 17 May 2022 15:00:00 GMT</pubDate>
      
        
        
          
          
      <description>&lt;img src=&quot;/images/20220518a/openslo.png&quot; alt=&quot;&quot; width=&quot;800&quot; height=&quot;150&quot;&gt;

&lt;h1 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot;</description>
          
        
      
      
      
      <content:encoded><![CDATA[<img src="/images/20220518a/openslo.png" alt="" width="800" height="150"><h1 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h1><p>はじめまして、原木と申します。</p><p>皆さまは<a href="https://sre-next.dev/2022/">SRE NEXT</a>をご覧になりましたでしょうか？</p><p>SRE NEXTは　先日実施された『信頼性に関するプラクティスに深い関心を持つエンジニアのためのカンファレンス』です。国内外のエンジニアが日々SRE(サイト信頼性エンジニアリング/Site Reliability Engineering)の実践手法を共有することで、Webサービスが今後運用、成長していくための次世代の信頼性を担おうとしています。</p><p>もしもWebサービスの運用を安定的に行う手法やそのためのチームビルディングに興味がある場合、SRE NEXTの動画セッションやスライドが公開されると思うのでご覧ください<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。</p><p>さて本ブログではそんなSREとも関係の深い、OpenSLOに関して取り上げたいと思います。</p><h1 id="OpenSLOとは"><a href="#OpenSLOとは" class="headerlink" title="OpenSLOとは"></a>OpenSLOとは</h1><p>最近、SLOモニタリングという言葉が注目を集めつつあります。例えば、GoogleCloudのCloud Monitoringではサービスモニタリングというサービス名を<a href="https://cloud.google.com/monitoring/slo-monitoring?hl=ja">SLOモニタリング</a>と改め、SLOを使った運用監視を強く推しています。</p><p>従来の運用監視とSLOでは何が違うのでしょうか？その手掛かりの一つにOpenSLOがあります。</p><p>OpenSLOとは、SLOを定義するためのオープンな仕様です。SLOのSaaSサービスを展開しているNobl9が中心となって策定し、先日バージョン1.0を迎えました。</p><p><a href="https://github.com/OpenSLO/OpenSLO/releases/tag/v1.0.0">https://github.com/OpenSLO/OpenSLO/releases/tag/v1.0.0</a></p><p>実際にOpenSLOの例を見てみましょう。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">openslo/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">SLO</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">slo-example</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&quot;ウェブサイトの可用性に関するSLO&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">service:</span> <span class="string">website-backend-service</span></span><br><span class="line">  <span class="comment"># エラーバジェットの消費方法</span></span><br><span class="line">  <span class="attr">budgetingMethod:</span> <span class="string">Occurrences</span></span><br><span class="line">  <span class="comment"># タイムウィンドウ</span></span><br><span class="line">  <span class="attr">timeWindow:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">duration:</span> <span class="string">4w</span></span><br><span class="line">      <span class="attr">isRolling:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># SLI</span></span><br><span class="line">  <span class="attr">indicator:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">error-count</span></span><br><span class="line">      <span class="attr">displayName:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">ratioMetric:</span></span><br><span class="line">        <span class="attr">counter:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">good:</span></span><br><span class="line">          <span class="attr">metricSource:</span></span><br><span class="line">            <span class="attr">metricSourceRef:</span> <span class="string">prometheus-datasource</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">Prometheus</span></span><br><span class="line">            <span class="attr">spec:</span></span><br><span class="line">              <span class="attr">query:</span> <span class="string">sum</span> <span class="string">by(handler)(rate(http_requests_total&#123;code=&quot;200&quot;&#125;[1m]))</span></span><br><span class="line">        <span class="attr">total:</span></span><br><span class="line">          <span class="attr">metricSource:</span></span><br><span class="line">            <span class="attr">metricSourceRef:</span> <span class="string">prometheus-datasource</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">Prometheus</span></span><br><span class="line">            <span class="attr">spec:</span></span><br><span class="line">              <span class="attr">query:</span> <span class="string">sum</span> <span class="string">by(handler)(rate(http_requests_total[1m]))</span></span><br><span class="line">  <span class="comment"># SLO</span></span><br><span class="line">  <span class="attr">objectives:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">displayName:</span> <span class="string">Total</span> <span class="string">Errors</span></span><br><span class="line">      <span class="attr">target:</span> <span class="number">0.98</span></span><br></pre></td></tr></table></figure><p>OpenSLOを読み解くには、SREの知識が頭の片隅にあるとわかりやすいでしょう。そこでSREの概念をそれぞれ説明しながら、従来の運用監視とSLOの目指す姿の違いについてOpenSLOを通して理解を深めたいと思います。</p><h1 id="SLOとは？"><a href="#SLOとは？" class="headerlink" title="SLOとは？"></a>SLOとは？</h1><p>サービスレベル目標(SLO)とは、<strong>サービスの信頼性の目標レベル</strong>を指定します。</p><p>サービスの信頼性ってわかるようでわからないですね。</p><p>“実際、信頼性(reliability )は可用性(availability )だけではなく、品質(quality)、信頼性(dependability)、応答性(responsiveness)など幅広い含意を持つ言葉です。”</p><p>メーカーの工具から自分の友人に至るまでどれくらい信頼できるのかって聞かれても、なかなか即答って難しいかなと存じます。</p><p>それでも、あえて挙げるとするなら自分は<a href="https://www.alex-hidalgo.com/the-slo-book">Implementing Service Level Objectives</a>という書籍の定義が気に入っています。</p><blockquote><p>The question “Is my service reliable?” is pretty much analogous to the question “Is my service doing what its users need it to do?”<br>「私のサービスは信頼できるか?」という問いは、「私のサービスはユーザーが必要とすることを行っているか?」という問いによく似ています。<br><a href="https://learning.oreilly.com/library/view/implementing-service-level/9781492076803/ch01.html#service_truths">https://learning.oreilly.com/library/view/implementing-service-level/9781492076803/ch01.html#service_truths</a></p></blockquote><p>「私のサービスはユーザーが必要とすることを行っているか?」</p><p>この問いに答えるための材料として重要視されるのが、システムの可用性があります。</p><p>Googleでは、システムの可用性をSLOとして正確な数値目標に落とすことしました。</p><blockquote><p>SRE は、可用性が成功の前提条件であるという考えが発端になっています。<br>可用性のないシステムはその機能を実行できず、デフォルトで失敗します。<br>SRE 用語における可用性の定義は、システムがある時点で目的の機能を実行できるかどうかです。<br>可用性測定の履歴は、レポートツールとしてだけでなく、システムが将来的に予想どおりのパフォーマンスを発揮する確率を示す指標としても使用できます。</p><p>GoogleはSREの用語を定義するにあたり、システムの可用性を正確な数値目標として設定したいと考えました。<br>この目標をシステムの可用性サービスレベル目標（SLO）と呼びます。<br><a href="https://cloud.google.com/blog/ja/products/devops-sre/sre-fundamentals-sli-vs-slo-vs-sla">https://cloud.google.com/blog/ja/products/devops-sre/sre-fundamentals-sli-vs-slo-vs-sla</a></p></blockquote><p>この数値目標がSLOの実態です。このSLOをOpenSLOでどのように定義しているのかは後述で解説するとして、試しにSLOを設定するために、極端なケース…例えばSLOを100%とします!!といった場合に何が起きるか考えてみましょう。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span><h2>数値目標</h2>  <p>なぜSLOではシステムの信頼性、可用性を測定するために正確な数値化が必要なのでしょうか。<p>SRE発祥の地でもあるGoogleの社内文化を色々な書籍を通じてみていると<br>この数値化に対してのモチベーションの根本に、多様性を肯定する社風が見えてきます。</p><p>メンバが多種多様な価値観や考え方を持つ中で、意思疎通を誤りなく行うには<br>客観的な指標と、なぜその数字を採用したのかという導出を誰でもわかる形で残すことは欠かせません。</p><p>そのような文化のなか、運用にも変化が生じました。</p><p>「私のサービスはユーザーが必要とすることを行っているか?」</p><p>この問いの中で、旧来の運用監視では損失だと思われていた指標を、機会投資の指標だと見なせないかと考えるようになりました。<br>ポジティブなフィードバックこそが明日のWebサービスを担う推進力であり、コンセンサスの源泉となるからです。</p></p></div><h1 id="100-のSLO-絶対に壊れないシステム？"><a href="#100-のSLO-絶対に壊れないシステム？" class="headerlink" title="100%のSLO=絶対に壊れないシステム？"></a>100%のSLO=絶対に壊れないシステム？</h1><p>100%のSLOとは、先の定義によればユーザーが必要とするときにサービスが目的の機能を提供できる状態が完全無欠に保たれていることです。<br>ならばすべての目標値を100%にすれば、サービス運用は安泰ではないか、そういった軽重な考えに、<br><a href="https://cloud.google.com/blog/ja/products/devops-sre/sre-fundamentals-sli-vs-slo-vs-sla">SRE の基本（2021 年版）: SLI、SLA、SLO の比較</a>では警告を鳴らしています。</p><blockquote><p>サービスの信頼性が高いほど、運用コストが高くなることに注意してください。</p><p>各サービスのユーザーが許容できる最低レベルの信頼性を定義し、それを SLO として規定します。すべてのサービスには可用性 SLO が必要です。これがなければ、チームや関係者はサービスの信頼性を高める（コストを増やして開発を遅らせる）必要があるのか、あるいは信頼性を下げる（開発速度を上げる）必要があるのかを、原則に基づいて判断できません。過剰な可用性が期待されるようになり、それが問題になることがあります。</p><p>ユーザー エクスペリエンスにとって必要でなければ、システムの信頼性を過度に高くしないでください。常にそのレベルに到達することを確約するつもりがない場合はなおさらです。</p></blockquote><p>SREのポジションにあるエンジニアは、次の1,2の間を調整することに大抵は苦労します。</p><ol><li>サービスを継続的に新規開発する速度</li><li>その結果低下していくサービスの信頼性</li></ol><p>どんな注意を払っても開発がある限り、サービスの信頼性に影響を及ぼすことは避けられません。</p><p>しかし、システムを塩漬けにして永遠に変わらない変化をもたらしたとしても「ユーザーが必要としていること」が満たされたままとは限りません。</p><p>どちらが正解なのか…</p><p>もしもそこにユーザーエクスペリエンスに繋がる指標が、蓄積された状態であったとしたらどうでしょう。ウェブサービスのSLOがほんの少し下がってもユーザーの顧客マインドに影響が及ぼさず、満足度を保ったままでいられることがわかりました。あえて余裕のある数値をSLOとして設けることで、それを満たしている間は、サービスを継続的に開発してもいいのではないか？という考えが生まれました。</p><p>エラーバジェットの誕生です。</p><p>可用性の担保について、ある程度のリスクを”予算”と見なすことで予算を超過しそうなら開発速度を抑えて、予算内であれば開発を促進するといったように、サービスを開発する速度をコントロールできるようにしたわけです。</p><p>OpenSLOにも <code>budgetingMethod: Occurrences</code> という項目があります。これは出現率法は、イベント全体に対してgoodイベントのカウントの比率をエラーバジェットの計算方法として使用するという意味です。</p><p>全体のイベントのうち、”良い”イベントの割合を指標として採用する考えはSLOとしてよく採用されています。</p><div class="note info" style="background: #e5f8e2; padding: 16px;">  <span class="fa fa-fw fa-check-circle"></span><h2>SREをダイエットで例えたら...</h2>  <p>ダイエットにおいて食事制限は最も基本的なやり方です。食事を制限するために我慢を強いられる方も多いと思います。<p>例えば、ダイエットをするときの努力目標として1日1600kcalしか取らないと決めたとします。<br>一日で1600kcalしか取れないんだと思うよりも、1600kcalも食事をしていいんだって思った方がポジティブになれないでしょうか。</p><p>同じことがエラーバジェットにも言えます。</p></p></div><h1 id="SLOとSLI"><a href="#SLOとSLI" class="headerlink" title="SLOとSLI"></a>SLOとSLI</h1><p>エラーバジェットを作るためには数値目標とそれを図るための測定手段が必要です。<br><a href="https://www.oreilly.co.jp/books/9784873119137/">サイトリライアビリティワークブック</a>というSREの参考書では具体的な方法が記載されています。</p><p>例えば、Webサイトにおいて、ユーザーからの評価を良好に保つために読み込み時間を測定、SLOとして定めたとします。<br>これは「サイトリライアビリティワークブック」によれば、<code>SLI specification</code> (SLIの仕様)と <code>SLI implementation</code> (SLIの実装)として分解することができます。</p><ul><li><code>SLI specification</code> (SLIの仕様)<ul><li>100ms以内でホームページが読み込まれた割合。</li><li>ユーザーにとって重要だと思われるサービス評価の結果</li></ul></li><li><code>SLI implementation</code> (SLIの実装)<ul><li>SLIの仕様を計測するための手段。例えば…<ol><li>サーバーログから計測したサーバー内の処理時間</li><li>VM環境のブラウザで動くJavaScript製のプロバーによる測定時間</li><li>ユーザーのホームページのリクエストのうち、読み込み時間が100ミリ秒未満のものの割合。</li></ol></li></ul></li></ul><p>通常、SLIを測定するための手段である <code>SLI implementation</code> (SLIの実装)は複数あり、それぞれのトレードオフを踏まえた上で、今どの指標がユーザーの信頼を測定するために必要な指標か考える必要があります。</p><h1 id="OpenSLOにおけるSLI仕様-SLI実装"><a href="#OpenSLOにおけるSLI仕様-SLI実装" class="headerlink" title="OpenSLOにおけるSLI仕様/SLI実装"></a>OpenSLOにおけるSLI仕様/SLI実装</h1><p>OpenSLOでは、SLI仕様/SLI実装に該当するのがobjectives(目標)とindicator(指標)という項目です。objectives(目標)では数値目標を記載し、indicator(指標)ではSLIの実装にあたるメトリクスの取得方法を記載しています。</p><p>OpenSLOの例を振り返ってみましょう。objectivesと indicatorの項目があることがわかります。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">openslo/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">SLO</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">slo-example</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&quot;ウェブサイトの可用性に関するSLO&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="string">//略</span></span><br><span class="line">  <span class="attr">indicator:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">error-count</span></span><br><span class="line">      <span class="attr">displayName:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">ratioMetric:</span></span><br><span class="line">        <span class="attr">counter:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">good:</span></span><br><span class="line">          <span class="attr">metricSource:</span></span><br><span class="line">            <span class="attr">metricSourceRef:</span> <span class="string">prometheus-datasource</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">Prometheus</span></span><br><span class="line">            <span class="attr">spec:</span></span><br><span class="line">              <span class="attr">query:</span> <span class="string">sum</span> <span class="string">by(handler)(rate(http_requests_total&#123;code=&quot;200&quot;&#125;[1m]))</span></span><br><span class="line">        <span class="attr">total:</span></span><br><span class="line">          <span class="attr">metricSource:</span></span><br><span class="line">            <span class="attr">metricSourceRef:</span> <span class="string">prometheus-datasource</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">Prometheus</span></span><br><span class="line">            <span class="attr">spec:</span></span><br><span class="line">              <span class="attr">query:</span> <span class="string">sum</span> <span class="string">by(handler)(rate(http_requests_total[1m]))</span></span><br><span class="line">  <span class="attr">objectives:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">displayName:</span> <span class="string">Total</span> <span class="string">Errors</span></span><br><span class="line">      <span class="attr">target:</span> <span class="number">0.98</span></span><br></pre></td></tr></table></figure><p>GoogleSRE Workbookなどによると、objectives(目標)について二つの数値の比率から導出できることがお勧めされています。</p><p>例えば、</p><blockquote><ul><li>成功したHTTPリクエストの数/合計HTTPリクエスト（成功率）</li><li>100ミリ秒未満で正常に完了したgRPC呼び出しの数/合計gRPCリクエスト</li></ul></blockquote><p>SLIは <code>spec.indicator.spec</code>という項目から読み取ることができます。Pometheusから連携したメトリクスのうち、1分以内に受信したリクエストとそのうちステータスコードが200だったステータスをそれぞれSLIとしてカウントし、ratioMetricとしてその割合を計算していることがわかります。</p><p>そしてSLOにあたるのが<code>spec.objectives</code> になります。<br>エラーとなったステータスリクエストが全体の割合で2%を下回ることを求められています。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">openslo/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">SLO</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">slo-example</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&quot;ウェブサイトの可用性に関するSLO&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="string">//略</span></span><br><span class="line">  <span class="attr">objectives:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">displayName:</span> <span class="string">Total</span> <span class="string">Errors</span></span><br><span class="line">      <span class="attr">target:</span> <span class="number">0.98</span></span><br></pre></td></tr></table></figure><p>SLO/SLIをどのような周期で観測するか(そしてその期間を過ぎたらリセットするか)というタイムウィンドウに関する設定もあります。<br>下記の例では4週間を一定期間としてその特定の日数分だけSLOを評価していることがわかります。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">openslo/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">SLO</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">slo-example</span></span><br><span class="line">  <span class="attr">displayName:</span> <span class="string">&quot;ウェブサイトの可用性に関するSLO&quot;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">budgetingMethod:</span> <span class="string">Occurrences</span></span><br><span class="line">　<span class="attr">timeWindow:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">duration:</span> <span class="string">4w</span></span><br><span class="line">      <span class="attr">isRolling:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="OpenSLOの現状"><a href="#OpenSLOの現状" class="headerlink" title="OpenSLOの現状"></a>OpenSLOの現状</h1><p>OpenSLO自体は単なる仕様であり、ドキュメントなので</p><ul><li>運用監視からの情報取得方法</li><li>そのSLO情報に変化があった場合に画面可視化を行うサービスへの連携</li></ul><p>…など、いまだ周辺のエコシステムは拡張に向けた途上にあります。</p><p>現状あるツールを紹介します。</p><ul><li><a href="https://github.com/OpenSLO/oslo">OpenSLO/oslo</a><ul><li>SLOで書かれたYamlファイルのバリエーションチェックなどを行うCLIツール</li></ul></li><li><a href="https://github.com/OpenSLO/slogen">OpenSLO/slogen</a><ul><li>SUMO LogicというSaaSに提供するためのダッシュボード、運用監視対象の自動生成ツール</li></ul></li><li><a href="https://github.com/slok/sloth">sloth/sloth</a><ul><li>PrometheusのSLO設定を容易にするためのジェネレーターツール。チャットツールである<a href="https://mattermost.com/blog/sloth-for-slo-monitoring-and-alerting-with-prometheus/">Mattermost</a>などで活用されている。OpenSLOを限定的にサポートしている。</li></ul></li></ul><p>OpenSLOは、最終的にSLO-as-codeとしてサービスレベルが達成されているかどうかを確認するメトリックを簡単に収集できるようにすることを目的とし、開発が現在も積極的に行われています。</p><p>ITサービスのメトリクス自体はITシステムができた当初から、安定的な運用目的のために取得されてきた情報ですが、SREというフレームワークの大転換により、メトリクス情報がサービスが停止するという機会損失の指標から、新機能開発による機会創出の指標としてつなげられるようになったのはここ最近の変化です。その中心にSLOがあります。</p><p>OpenSLOのエコシステム拡充が進めば、これから先、運用監視ツールとして欠かせないものになっていくのではないでしょうか。</p><h1 id="私的感想"><a href="#私的感想" class="headerlink" title="私的感想"></a>私的感想</h1><p>まだ道半ばですが、generatorについてエコシステムが整うことで運用監視体制がそのままGitOpsとして管理できるような体制になると面白そうですね。その片鱗はすでに各所で起きています。</p><p>例えば、Preferred Networks Researchでは、Alertmanagerでシステムの異常検知を行った後、それをGitHubのissueとして自動的に起票できるようにするOSSを開発しています。<br><a href="https://github.com/pfnet-research/alertmanager-to-github">https://github.com/pfnet-research/alertmanager-to-github</a></p><p>例えば、GrafanaのThemaではCUELANGをベースに、ダッシュボードのコード化を進めようとしています。(既存でもJsonnetという仕組みがあるのですが扱いづらいということから生まれました)<br><a href="https://github.com/grafana/thema">https://github.com/grafana/thema</a></p><p>同様にOpenSLOの仕様書もGit上で管理されて、OpenAPIやIaCでは既に実践されていることではありますが、運用監視システムにCI/CDで動かしたgeneratorを通して組み込まれることで、SLOの棚卸しを気軽に行えるような体制が組めるといいなと思いました。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="vertical-align: top; padding-right: 10px;">1.</span><span style="vertical-align: top;">SRE NEXT様と筆者(そして多分弊社も...)の間には2022年現在何の関係もありませんが、好きなイベントなのでこの場をお借りして宣伝させていただきました。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content:encoded>
      
      
      <category domain="https://future-architect.github.io/categories/DevOps/">DevOps</category>
      
      
      <category domain="https://future-architect.github.io/tags/SRE/">SRE</category>
      
      <category domain="https://future-architect.github.io/tags/SLO/">SLO</category>
      
      <category domain="https://future-architect.github.io/tags/OpenSLO/">OpenSLO</category>
      
      
      <comments>https://future-architect.github.io/articles/20220518a/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
